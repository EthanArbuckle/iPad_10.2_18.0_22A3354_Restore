void sub_1BF8D2908(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void (__cdecl ***std::__match_any<char>::~__match_any(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__match_any<char>::~__match_any(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x1C3B8D890);
}

uint64_t std::__match_any<char>::__exec(uint64_t result, uint64_t a2)
{
  _BYTE *v2;
  uint64_t v3;

  v2 = *(_BYTE **)(a2 + 16);
  if (v2 == *(_BYTE **)(a2 + 24) || !*v2)
  {
    v3 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(_QWORD *)(a2 + 16) = v2 + 1;
    v3 = *(_QWORD *)(result + 8);
  }
  *(_QWORD *)(a2 + 80) = v3;
  return result;
}

BOOL std::basic_regex<char,std::regex_traits<char>>::__test_back_ref(std::basic_regex<char> *this, char a2)
{
  if ((a2 & 0xF8) != 0x30 && (a2 & 0xFE) != 0x38 || a2 - 49 > 8)
    return 0;
  if (a2 - 48 > this->__marked_count_)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(this, a2 - 48);
  return 1;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C3B8D4D0](exception, 4);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], (void (*)(void *))MEMORY[0x1E0DE43B8]);
}

void sub_1BF8D2A88(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(std::basic_regex<char> *this, int __i)
{
  std::basic_regex<_CharT, _Traits>::flag_type flags;
  uint64_t v5;
  std::__owns_one_state<char> *end;
  std::__node<char> *v7;
  std::locale *v8;
  std::locale *v9;
  std::__node<char> *first;
  uint64_t (**v11)();

  flags = this->__flags_;
  if ((flags & 1) != 0)
  {
    v8 = (std::locale *)operator new();
    v9 = v8;
    first = this->__end_->__first_;
    v11 = &off_1E79323E8;
LABEL_6:
    v8->__locale_ = (std::locale::__imp *)v11;
    v8[1].__locale_ = (std::locale::__imp *)first;
    std::locale::locale(v8 + 2, &this->__traits_.__loc_);
    *(_OWORD *)&v9[3].__locale_ = *(_OWORD *)&this->__traits_.__ct_;
    LODWORD(v9[5].__locale_) = __i;
    this->__end_->__first_ = (std::__node<char> *)v9;
    goto LABEL_7;
  }
  if ((flags & 8) != 0)
  {
    v8 = (std::locale *)operator new();
    v9 = v8;
    first = this->__end_->__first_;
    v11 = &off_1E7932430;
    goto LABEL_6;
  }
  v5 = operator new();
  end = this->__end_;
  v7 = end->__first_;
  *(_QWORD *)v5 = &off_1E7932478;
  *(_QWORD *)(v5 + 8) = v7;
  *(_DWORD *)(v5 + 16) = __i;
  end->__first_ = (std::__node<char> *)v5;
LABEL_7:
  this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
}

void (__cdecl ***std::__back_ref<char>::~__back_ref(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__back_ref<char>::~__back_ref(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x1C3B8D890);
}

unsigned int *std::__back_ref<char>::__exec(unsigned int *result, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  unsigned int v5;
  unsigned int *v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = result[4];
  v3 = *(_QWORD *)(a2 + 32);
  if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a2 + 40) - v3) >> 3) < v2)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  v5 = v2 - 1;
  if (*(_BYTE *)(v3 + 24 * v5 + 16)
    && (v6 = result,
        v7 = v3 + 24 * v5,
        result = *(unsigned int **)v7,
        v8 = *(_QWORD *)(v7 + 8) - *(_QWORD *)v7,
        v9 = *(_QWORD *)(a2 + 16),
        *(_QWORD *)(a2 + 24) - v9 >= v8)
    && (result = (unsigned int *)memcmp(result, *(const void **)(a2 + 16), v8), !(_DWORD)result))
  {
    *(_DWORD *)a2 = -994;
    *(_QWORD *)(a2 + 16) = v9 + v8;
    v10 = *((_QWORD *)v6 + 1);
  }
  else
  {
    v10 = 0;
    *(_DWORD *)a2 = -993;
  }
  *(_QWORD *)(a2 + 80) = v10;
  return result;
}

std::locale *std::__back_ref_collate<char,std::regex_traits<char>>::~__back_ref_collate(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_1E7932430;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void std::__back_ref_collate<char,std::regex_traits<char>>::~__back_ref_collate(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_1E7932430;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  JUMPOUT(0x1C3B8D890);
}

uint64_t std::__back_ref_collate<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  unsigned int v2;
  uint64_t v3;
  unsigned __int8 **v4;
  unsigned __int8 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  int v11;
  int v12;
  int v13;

  v2 = *(_DWORD *)(result + 40) - 1;
  v3 = *(_QWORD *)(a2 + 32);
  if (*(_BYTE *)(v3 + 24 * v2 + 16))
  {
    v4 = (unsigned __int8 **)(v3 + 24 * v2);
    v5 = *v4;
    v6 = v4[1] - *v4;
    v7 = *(_QWORD *)(a2 + 16);
    if (*(_QWORD *)(a2 + 24) - v7 >= v6)
    {
      if (v6 < 1)
      {
LABEL_8:
        *(_DWORD *)a2 = -994;
        *(_QWORD *)(a2 + 16) = v7 + v6;
        v8 = *(_QWORD *)(result + 8);
        goto LABEL_9;
      }
      v9 = v6;
      v10 = *(unsigned __int8 **)(a2 + 16);
      while (1)
      {
        v12 = *v5++;
        v11 = v12;
        v13 = *v10++;
        if (v11 != v13)
          break;
        if (!--v9)
          goto LABEL_8;
      }
    }
  }
  v8 = 0;
  *(_DWORD *)a2 = -993;
LABEL_9:
  *(_QWORD *)(a2 + 80) = v8;
  return result;
}

std::locale *std::__back_ref_icase<char,std::regex_traits<char>>::~__back_ref_icase(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_1E79323E8;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void std::__back_ref_icase<char,std::regex_traits<char>>::~__back_ref_icase(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_1E79323E8;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  JUMPOUT(0x1C3B8D890);
}

uint64_t std::__back_ref_icase<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  v3 = *(_QWORD *)(a2 + 32) + 24 * (*(_DWORD *)(result + 40) - 1);
  if (*(_BYTE *)(v3 + 16))
  {
    v4 = *(_QWORD *)(v3 + 8) - *(_QWORD *)v3;
    v5 = *(_QWORD *)(a2 + 16);
    if (*(_QWORD *)(a2 + 24) - v5 >= v4)
    {
      v7 = result;
      if (v4 < 1)
      {
LABEL_9:
        *(_DWORD *)a2 = -994;
        *(_QWORD *)(a2 + 16) = v5 + v4;
        v6 = *(_QWORD *)(v7 + 8);
        goto LABEL_10;
      }
      v8 = 0;
      while (1)
      {
        v9 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v7 + 24) + 40))(*(_QWORD *)(v7 + 24), *(char *)(*(_QWORD *)v3 + v8));
        result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v7 + 24) + 40))(*(_QWORD *)(v7 + 24), *(char *)(*(_QWORD *)(a2 + 16) + v8));
        if (v9 != (_DWORD)result)
          break;
        if (v4 == ++v8)
        {
          v5 = *(_QWORD *)(a2 + 16);
          goto LABEL_9;
        }
      }
    }
  }
  v6 = 0;
  *(_DWORD *)a2 = -993;
LABEL_10:
  *(_QWORD *)(a2 + 80) = v6;
  return result;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_simple_RE<char const*>(std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  char *v3;
  std::__owns_one_state<char> *end;
  unsigned int marked_count;
  int v8;
  unsigned __int8 *v9;
  char *v11;
  std::__node<char> *v12;
  std::__owns_one_state<char> *v13;
  std::__node<char> *first;
  int v15;
  uint64_t v16;
  unsigned int v17;
  unsigned __int8 *v18;
  _BOOL4 v19;
  uint64_t v20;
  size_t v21;
  int v22;
  unsigned __int8 *v23;
  unsigned __int8 *v24;
  int v25;
  unsigned __int8 *v26;
  size_t v27;
  size_t v28;
  std::basic_regex<char> *v29;
  int v31;
  int v32;

  v3 = (char *)a2;
  if (a2 != a3)
  {
    end = a1->__end_;
    marked_count = a1->__marked_count_;
    v9 = a2 + 1;
    v8 = *a2;
    if ((a2 + 1 != a3 || v8 != 36)
      && ((v8 - 46) > 0x2E || ((1 << (v8 - 46)) & 0x600000000001) == 0))
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v8);
      goto LABEL_29;
    }
    v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR<char const*>(a1, a2, a3);
    if (v11 == v3)
    {
      if (*v3 == 46)
      {
        v12 = (std::__node<char> *)operator new();
        v13 = a1->__end_;
        first = v13->__first_;
        v12->__vftable = (std::__node<char>_vtbl *)&off_1E7932700;
        v12[1].__vftable = (std::__node<char>_vtbl *)first;
        v13->__first_ = v12;
        a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
        goto LABEL_29;
      }
      v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>((uint64_t)a1, v3, (char *)a3);
    }
    if (v11 == v3 && v11 != (char *)a3)
    {
      if (v9 == a3 || *v3 != 92)
        return v3;
      v15 = *v9;
      if (v15 == 40)
      {
        v16 = (uint64_t)(v3 + 2);
        std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(a1);
        v17 = a1->__marked_count_;
        do
        {
          v18 = (unsigned __int8 *)v16;
          v16 = std::basic_regex<char,std::regex_traits<char>>::__parse_simple_RE<char const*>(a1, v16, a3);
        }
        while ((unsigned __int8 *)v16 != v18);
        if (v18 == a3 || v18 + 1 == a3 || *v18 != 92 || v18[1] != 41)
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
        v11 = (char *)(v18 + 2);
        std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(a1, v17);
      }
      else
      {
        v19 = std::basic_regex<char,std::regex_traits<char>>::__test_back_ref(a1, v15);
        v20 = 2;
        if (!v19)
          v20 = 0;
        v11 = &v3[v20];
      }
    }
    v9 = (unsigned __int8 *)v11;
    if (v11 != v3)
    {
LABEL_29:
      if (v9 == a3)
        return (char *)a3;
      v21 = a1->__marked_count_ + 1;
      v22 = *v9;
      if (v22 == 42)
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, 0, 0xFFFFFFFFFFFFFFFFLL, end, marked_count + 1, a1->__marked_count_ + 1, 1);
        return (char *)(v9 + 1);
      }
      if (v9 + 1 == a3 || v22 != 92 || v9[1] != 123)
        return (char *)v9;
      v32 = 0;
      v23 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>(v9 + 2, a3, &v32);
      if (v23 == v9 + 2)
LABEL_45:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
      if (v23 != a3)
      {
        v24 = v23 + 1;
        v25 = *v23;
        if (v25 == 44)
        {
          v31 = -1;
          v26 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>(v23 + 1, a3, &v31);
          if (v26 != a3 && v26 + 1 != a3 && *v26 == 92 && v26[1] == 125)
          {
            v28 = v31;
            v27 = v32;
            if (v31 == -1)
            {
              v28 = -1;
            }
            else if (v31 < v32)
            {
              goto LABEL_45;
            }
            v3 = (char *)&v26[2 * (v26[1] == 125)];
            v29 = a1;
LABEL_53:
            std::basic_regex<char,std::regex_traits<char>>::__push_loop(v29, v27, v28, end, marked_count + 1, v21, 1);
            return v3;
          }
        }
        else if (v24 != a3 && v25 == 92 && *v24 == 125)
        {
          v3 = (char *)(v23 + 2);
          v27 = v32;
          v29 = a1;
          v28 = v32;
          goto LABEL_53;
        }
      }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
    }
  }
  return v3;
}

_BYTE *std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR<char const*>(std::basic_regex<char> *a1, _BYTE *a2, _BYTE *a3)
{
  _BYTE *v3;
  int v4;

  v3 = a2;
  if (a2 != a3 && a2 + 1 != a3 && *a2 == 92)
  {
    v4 = (char)a2[1];
    if ((v4 - 36) <= 0x3A && ((1 << (a2[1] - 36)) & 0x580000000000441) != 0)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v4);
      v3 += 2;
    }
  }
  return v3;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_term<char const*>(std::basic_regex<char> *a1, unsigned __int8 *a2, char *a3)
{
  int v6;
  int v7;
  char *v8;
  BOOL v9;
  char *v10;
  int v12;
  char *v13;
  unsigned int v14;
  uint64_t v15;
  BOOL v16;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;
  uint64_t (**v19)();
  unsigned __int8 *result;
  int v21;
  BOOL v22;
  unsigned int marked_count;
  std::__owns_one_state<char> *v24;
  unsigned int v25;
  int *p_open_count;
  char *v27;
  char *v28;
  uint64_t v29;
  unsigned __int8 *v30;
  char *v31;
  int v32;
  unsigned int v33;
  std::__node<char> *v34;
  std::__owns_one_state<char> *v35;
  std::__node<char> *v36;
  unsigned int v37;
  char *v38;
  int v39;
  int v40;
  std::basic_regex<char> *v41;
  BOOL v42;
  std::basic_regex<char> *v43;
  BOOL v44;
  std::__bracket_expression<char, std::regex_traits<char>> *started;
  int v46;
  std::__bracket_expression<char, std::regex_traits<char>> *v47;
  std::basic_regex<char> *v48;
  std::basic_regex<char> *v49;
  BOOL v50;
  std::basic_regex<char> v51;

  if (a2 == (unsigned __int8 *)a3)
    return a2;
  v6 = (char)*a2;
  v7 = *a2;
  if (v6 > 91)
  {
    if (v6 == 92)
    {
      if (a2 + 1 == (unsigned __int8 *)a3)
        goto LABEL_32;
      v21 = a2[1];
      if (v21 == 66)
      {
        v22 = 1;
      }
      else
      {
        if (v21 != 98)
          goto LABEL_31;
        v22 = 0;
      }
      std::basic_regex<char,std::regex_traits<char>>::__push_word_boundary(a1, v22);
      return a2 + 2;
    }
    if (v6 != 94)
      goto LABEL_32;
    v15 = operator new();
    v16 = (a1->__flags_ & 0x5F0) == 1024;
    end = a1->__end_;
    first = end->__first_;
    v19 = &off_1E79321A8;
LABEL_21:
    *(_QWORD *)v15 = v19;
    *(_QWORD *)(v15 + 8) = first;
    *(_BYTE *)(v15 + 16) = v16;
    end->__first_ = (std::__node<char> *)v15;
    a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
    return a2 + 1;
  }
  if (v6 == 36)
  {
    v15 = operator new();
    v16 = (a1->__flags_ & 0x5F0) == 1024;
    end = a1->__end_;
    first = end->__first_;
    v19 = &off_1E79321F0;
    goto LABEL_21;
  }
  v9 = v6 == 40;
  v8 = (char *)(a2 + 1);
  v9 = !v9 || v8 == a3;
  if (!v9)
  {
    v10 = (char *)(a2 + 2);
    if (*v8 == 63 && v10 != a3)
    {
      v12 = *v10;
      if (v12 == 33)
      {
        std::regex_traits<char>::regex_traits(&v51.__traits_);
        memset(&v51.__flags_, 0, 40);
        v51.__flags_ = a1->__flags_;
        v13 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>(&v51, a2 + 3, a3);
        marked_count = v51.__marked_count_;
        std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(a1, &v51, 1, a1->__marked_count_);
        a1->__marked_count_ += marked_count;
        if (v13 == a3 || *v13 != 41)
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
LABEL_30:
        std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&v51.__start_);
        std::locale::~locale(&v51.__traits_.__loc_);
        result = (unsigned __int8 *)(v13 + 1);
        if (v13 + 1 != (char *)a2)
          return result;
        goto LABEL_31;
      }
      if (v12 == 61)
      {
        std::regex_traits<char>::regex_traits(&v51.__traits_);
        memset(&v51.__flags_, 0, 40);
        v51.__flags_ = a1->__flags_;
        v13 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>(&v51, a2 + 3, a3);
        v14 = v51.__marked_count_;
        std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(a1, &v51, 0, a1->__marked_count_);
        a1->__marked_count_ += v14;
        if (v13 == a3 || *v13 != 41)
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
        goto LABEL_30;
      }
    }
LABEL_31:
    v7 = *a2;
  }
LABEL_32:
  v24 = a1->__end_;
  v25 = a1->__marked_count_;
  if ((char)v7 <= 91)
  {
    result = a2;
    switch((char)v7)
    {
      case '$':
      case ')':
        return result;
      case '%':
      case '&':
      case '\'':
      case ',':
      case '-':
        goto LABEL_60;
      case '(':
        if (a2 + 1 == (unsigned __int8 *)a3)
          goto LABEL_97;
        if (a2 + 2 != (unsigned __int8 *)a3 && a2[1] == 63 && a2[2] == 58)
        {
          p_open_count = &a1->__open_count_;
          ++a1->__open_count_;
          v27 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>(a1, a2 + 3, a3);
          if (v27 == a3)
            goto LABEL_97;
          v28 = v27;
          if (*v27 != 41)
            goto LABEL_97;
        }
        else
        {
          std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(a1);
          v37 = a1->__marked_count_;
          p_open_count = &a1->__open_count_;
          ++a1->__open_count_;
          v38 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>(a1, a2 + 1, a3);
          if (v38 == a3 || (v28 = v38, *v38 != 41))
LABEL_97:
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
          std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(a1, v37);
        }
        --*p_open_count;
        v30 = (unsigned __int8 *)(v28 + 1);
        goto LABEL_57;
      case '*':
      case '+':
        goto LABEL_64;
      case '.':
        v34 = (std::__node<char> *)operator new();
        v35 = a1->__end_;
        v36 = v35->__first_;
        v34->__vftable = (std::__node<char>_vtbl *)&off_1E79322C8;
        v34[1].__vftable = (std::__node<char>_vtbl *)v36;
        v35->__first_ = v34;
        a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
        goto LABEL_61;
      default:
        if ((char)v7 == 91)
        {
          v30 = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>((uint64_t)a1, (char *)a2, a3);
          goto LABEL_57;
        }
        if ((char)v7 != 63)
          goto LABEL_60;
        goto LABEL_64;
    }
  }
  v29 = ((char)v7 - 92);
  if (v29 > 0x21)
  {
LABEL_60:
    std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v7);
LABEL_61:
    v30 = a2 + 1;
    return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>((uint64_t)a1, v30, (unsigned __int8 *)a3, v24, v25 + 1, a1->__marked_count_ + 1);
  }
  if (((1 << (v7 - 92)) & 0x300000006) != 0)
    return a2;
  if ((char)v7 != 92)
  {
    if (v29 == 31)
LABEL_64:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)11>();
    goto LABEL_60;
  }
  if (v7 != 92)
    return a2;
  v31 = (char *)(a2 + 1);
  if (a2 + 1 == (unsigned __int8 *)a3)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  v32 = *v31;
  v33 = v32 - 48;
  if (v32 == 48)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v33);
LABEL_96:
    v30 = a2 + 2;
    return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>((uint64_t)a1, v30, (unsigned __int8 *)a3, v24, v25 + 1, a1->__marked_count_ + 1);
  }
  if ((v32 - 49) > 8)
    goto LABEL_76;
  v30 = a2 + 2;
  if (a2 + 2 == (unsigned __int8 *)a3)
  {
    v30 = (unsigned __int8 *)a3;
  }
  else
  {
    while (1)
    {
      v39 = *v30;
      if ((v39 - 48) > 9)
        break;
      if (v33 >= 0x19999999)
        goto LABEL_98;
      ++v30;
      v33 = v39 + 10 * v33 - 48;
      if (v30 == (unsigned __int8 *)a3)
      {
        v30 = (unsigned __int8 *)a3;
        break;
      }
    }
    if (!v33)
LABEL_98:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  }
  if (v33 > v25)
    goto LABEL_98;
  std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(a1, v33);
  if (v30 == (unsigned __int8 *)v31)
  {
LABEL_76:
    v40 = *v31;
    if (v40 > 99)
    {
      if (v40 == 119)
      {
        v41 = a1;
        v42 = 0;
        goto LABEL_88;
      }
      if (v40 == 115)
      {
        v49 = a1;
        v50 = 0;
LABEL_94:
        started = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(v49, v50);
        v46 = started->__mask_ | 0x4000;
        goto LABEL_95;
      }
      if (v40 != 100)
      {
LABEL_89:
        v48 = std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(a1, (std::basic_regex<char> *)(a2 + 1), (std::basic_regex<char> *)a3, 0);
        if (v48 == (std::basic_regex<char> *)v31)
          v30 = a2;
        else
          v30 = (unsigned __int8 *)v48;
        goto LABEL_57;
      }
      v43 = a1;
      v44 = 0;
    }
    else
    {
      if (v40 != 68)
      {
        if (v40 != 83)
        {
          if (v40 == 87)
          {
            v41 = a1;
            v42 = 1;
LABEL_88:
            v47 = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(v41, v42);
            v47->__mask_ |= 0x500u;
            std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v47, 95);
            goto LABEL_96;
          }
          goto LABEL_89;
        }
        v49 = a1;
        v50 = 1;
        goto LABEL_94;
      }
      v43 = a1;
      v44 = 1;
    }
    started = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(v43, v44);
    v46 = started->__mask_ | 0x400;
LABEL_95:
    started->__mask_ = v46;
    goto LABEL_96;
  }
LABEL_57:
  result = a2;
  if (v30 != a2)
    return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>((uint64_t)a1, v30, (unsigned __int8 *)a3, v24, v25 + 1, a1->__marked_count_ + 1);
  return result;
}

void sub_1BF8D3994(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
  std::locale::~locale(&a9);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)11>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C3B8D4D0](exception, 11);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], (void (*)(void *))MEMORY[0x1E0DE43B8]);
}

void sub_1BF8D39F8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void (__cdecl ***std::__match_any_but_newline<char>::~__match_any_but_newline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__match_any_but_newline<char>::~__match_any_but_newline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x1C3B8D890);
}

void std::basic_regex<char,std::regex_traits<char>>::__push_word_boundary(std::basic_regex<char> *this, BOOL a2)
{
  uint64_t v4;
  std::__node<char> *first;

  v4 = operator new();
  first = this->__end_->__first_;
  *(_QWORD *)v4 = &off_1E7932238;
  *(_QWORD *)(v4 + 8) = first;
  std::locale::locale((std::locale *)(v4 + 16), &this->__traits_.__loc_);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)&this->__traits_.__ct_;
  *(_BYTE *)(v4 + 40) = a2;
  this->__end_->__first_ = (std::__node<char> *)v4;
  this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(std::basic_regex<char> *this, const std::basic_regex<char> *a2, BOOL a3, unsigned int a4)
{
  uint64_t v8;
  std::__node<char> *first;
  std::__shared_weak_count *cntrl;
  unint64_t *p_shared_owners;
  unint64_t v12;

  v8 = operator new();
  first = this->__end_->__first_;
  *(_QWORD *)v8 = &off_1E7932280;
  *(_QWORD *)(v8 + 8) = first;
  std::locale::locale((std::locale *)(v8 + 16), &a2->__traits_.__loc_);
  *(_OWORD *)(v8 + 24) = *(_OWORD *)&a2->__traits_.__ct_;
  *(_OWORD *)(v8 + 40) = *(_OWORD *)&a2->__flags_;
  cntrl = a2->__start_.__cntrl_;
  *(_QWORD *)(v8 + 56) = a2->__start_.__ptr_;
  *(_QWORD *)(v8 + 64) = cntrl;
  if (cntrl)
  {
    p_shared_owners = (unint64_t *)&cntrl->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  *(_QWORD *)(v8 + 72) = a2->__end_;
  *(_DWORD *)(v8 + 80) = a4;
  *(_BYTE *)(v8 + 84) = a3;
  this->__end_->__first_ = (std::__node<char> *)v8;
  this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
}

void (__cdecl ***std::__lookahead<char,std::regex_traits<char>>::~__lookahead(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  std::locale *v2;
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&off_1E7932280;
  v2 = (std::locale *)(a1 + 2);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 7));
  std::locale::~locale(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  return a1;
}

void std::__lookahead<char,std::regex_traits<char>>::~__lookahead(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  std::locale *v2;
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&off_1E7932280;
  v2 = (std::locale *)(a1 + 2);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 7));
  std::locale::~locale(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  JUMPOUT(0x1C3B8D890);
}

void std::__lookahead<char,std::regex_traits<char>>::__exec(uint64_t a1, uint64_t a2)
{
  std::vector<std::csub_match>::size_type v4;
  uint64_t v5;
  const char *v6;
  BOOL v7;
  char v8;
  std::vector<std::csub_match>::pointer begin;
  unint64_t v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  std::sub_match<const char *> *v15;
  uint64_t v16;
  std::vector<std::csub_match> __p;
  std::vector<std::csub_match>::value_type v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  std::vector<std::csub_match>::value_type v23;
  char v24;
  uint64_t v25;

  v20 = 0;
  v21 = 0;
  v22 = 0;
  memset(&v23, 0, 17);
  v24 = 0;
  v25 = 0;
  memset(&__p, 0, sizeof(__p));
  v4 = (*(_DWORD *)(a1 + 44) + 1);
  v5 = *(_QWORD *)(a2 + 16);
  v19.first = *(const char **)(a2 + 24);
  v19.second = v19.first;
  v19.matched = 0;
  std::vector<std::sub_match<char const*>>::assign(&__p, v4, &v19);
  v20 = v5;
  v21 = v5;
  v22 = 0;
  v23 = v19;
  v25 = v5;
  v24 = 1;
  v6 = *(const char **)(a2 + 16);
  if (*(_BYTE *)(a2 + 92))
    v7 = v6 == *(const char **)(a2 + 8);
  else
    v7 = 0;
  v8 = v7;
  if (*(unsigned __int8 *)(a1 + 84) == std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(a1 + 16, v6, *(const char **)(a2 + 24), (uint64_t *)&__p, *(_DWORD *)(a2 + 88) & 0xFBF | 0x40u, v8))
  {
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
    begin = __p.__begin_;
    goto LABEL_13;
  }
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(a1 + 8);
  begin = __p.__begin_;
  v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_ - (char *)__p.__begin_) >> 3);
  if (v10 < 2)
  {
LABEL_13:
    if (!begin)
      return;
    goto LABEL_14;
  }
  v11 = *(_DWORD *)(a1 + 80);
  v12 = *(_QWORD *)(a2 + 32);
  v13 = 2;
  v14 = 1;
  do
  {
    v15 = &begin[v14];
    v16 = v12 + 24 * (v11 + v13 - 2);
    *(std::pair<const char *, const char *> *)v16 = v15->std::pair<const char *, const char *>;
    *(_BYTE *)(v16 + 16) = v15->matched;
    v14 = v13;
  }
  while (v10 > v13++);
LABEL_14:
  operator delete(begin);
}

void sub_1BF8D3E28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::locale *std::__word_boundary<char,std::regex_traits<char>>::~__word_boundary(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_1E7932238;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void std::__word_boundary<char,std::regex_traits<char>>::~__word_boundary(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_1E7932238;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  JUMPOUT(0x1C3B8D890);
}

uint64_t std::__word_boundary<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;

  v2 = *(unsigned __int8 **)(a2 + 8);
  v3 = *(unsigned __int8 **)(a2 + 24);
  if (v2 == v3)
    goto LABEL_17;
  v4 = *(unsigned __int8 **)(a2 + 16);
  if (v4 == v3)
  {
    if ((*(_BYTE *)(a2 + 88) & 8) == 0)
    {
      v6 = *(v3 - 1);
      goto LABEL_13;
    }
LABEL_17:
    v10 = 0;
    goto LABEL_25;
  }
  if (v4 == v2)
  {
    v5 = *(_DWORD *)(a2 + 88);
    if ((v5 & 0x80) == 0)
    {
      if ((v5 & 4) == 0)
      {
        v6 = *v2;
LABEL_13:
        if (v6 == 95
          || (v6 & 0x80) == 0 && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) + 16) + 4 * v6) & 0x500) != 0)
        {
          v10 = 1;
          goto LABEL_25;
        }
        goto LABEL_17;
      }
      goto LABEL_17;
    }
  }
  v7 = *(v4 - 1);
  v8 = *v4;
  v9 = v7 == 95 || (v7 & 0x80) == 0 && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) + 16) + 4 * v7) & 0x500) != 0;
  v11 = (_DWORD)v8 == 95
     || (v8 & 0x80) == 0 && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) + 16) + 4 * v8) & 0x500) != 0;
  v10 = v9 != v11;
LABEL_25:
  if (*(unsigned __int8 *)(result + 40) == v10)
  {
    v12 = 0;
    v13 = -993;
  }
  else
  {
    v12 = *(_QWORD *)(result + 8);
    v13 = -994;
  }
  *(_DWORD *)a2 = v13;
  *(_QWORD *)(a2 + 80) = v12;
  return result;
}

void std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B8D890);
}

uint64_t std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void (__cdecl ***std::__empty_state<char>::~__empty_state(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__empty_state<char>::~__empty_state(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x1C3B8D890);
}

void std::__empty_state<char>::__exec(const std::__empty_state<char> *this, std::__empty_state<char>::__state *a2)
{
  a2->__do_ = -994;
  a2->__node_ = this->__first_;
}

void std::__end_state<char>::~__end_state()
{
  JUMPOUT(0x1C3B8D890);
}

void std::__end_state<char>::__exec(uint64_t a1, _DWORD *a2)
{
  *a2 = -1000;
}

std::string *siri::dialogengine::DialogCurrency::compactDecimalLong(siri::dialogengine::DialogCurrency *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  return siri::dialogengine::FormatCurrency(this, (uint64_t)a2, 1u);
}

std::string *siri::dialogengine::DialogCurrency::compactDecimalShort(siri::dialogengine::DialogCurrency *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  return siri::dialogengine::FormatCurrency(this, (uint64_t)a2, 2u);
}

uint64_t siri::dialogengine::DialogCurrency::symbol(siri::dialogengine::DialogCurrency *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  void *RequiredStringParameter;
  void *v6;
  uint64_t v7;
  std::string v9;
  std::string __p;
  void *v11;
  char v12;
  void *v13;
  char v14;
  void *v15;
  char v16;
  void *v17;
  char v18;
  void *v19;
  char v20;
  void *v21;
  char v22;
  std::string v23;

  std::string::basic_string[abi:ne180100]<0>(&__p, "units");
  RequiredStringParameter = siri::dialogengine::GetRequiredStringParameter((const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)a2);
  v6 = RequiredStringParameter;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v6)
      goto LABEL_3;
LABEL_6:
    std::string::basic_string[abi:ne180100]<0>(&v23, "");
    goto LABEL_22;
  }
  if (!RequiredStringParameter)
    goto LABEL_6;
LABEL_3:
  (*(void (**)(std::string *__return_ptr, void *))(*(_QWORD *)v6 + 48))(&__p, v6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v23, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v23 = __p;
  if (v22 < 0)
    operator delete(v21);
  if (v20 < 0)
    operator delete(v19);
  if (v18 < 0)
    operator delete(v17);
  if (v16 < 0)
    operator delete(v15);
  if (v14 < 0)
    operator delete(v13);
  if (v12 < 0)
    operator delete(v11);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_22:
  siri::dialogengine::GetCurrencyInfo((uint64_t)&__p, this, (unsigned __int8 *)&v23, 0);
  v7 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&v9, "");
  siri::dialogengine::VariableString::VariableString(v7, &v9, (uint64_t)&__p);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);
  if (v14 < 0)
    operator delete(v13);
  if (v12 < 0)
    operator delete(v11);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
  return v7;
}

void sub_1BF8D4330(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  siri::dialogengine::SpeakableString::~SpeakableString((void **)&a15);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::DialogCurrency::unitName(siri::dialogengine::DialogCurrency *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  void *RequiredStringParameter;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t i;
  std::__shared_weak_count *size;
  unint64_t *v11;
  unint64_t v12;
  std::string v14;
  std::string v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19[3];
  const void **v20[3];
  void *v21[2];
  char v22;
  void *v23;
  char v24;
  void *v25;
  char v26;
  unsigned __int8 v27;
  unsigned __int8 v28;
  std::string v29;
  std::string __p;
  std::string v31;
  void *v32;
  __int128 v33;
  uint64_t v34;
  char v35;
  void *v36;
  __int128 v37;
  void *v38;
  char v39;
  __int128 v40;
  uint64_t v41;
  __int128 v42;
  _QWORD v43[3];
  __int128 v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(&__p, "units");
  RequiredStringParameter = siri::dialogengine::GetRequiredStringParameter((const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)a2);
  v6 = RequiredStringParameter;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v6)
    {
LABEL_3:
      (*(void (**)(std::string *__return_ptr, void *))(*(_QWORD *)v6 + 48))(&__p, v6);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v29, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      else
        v29 = __p;
      if (SHIBYTE(v41) < 0)
        operator delete((void *)v40);
      if (v39 < 0)
        operator delete(v38);
      if (SHIBYTE(v37) < 0)
        operator delete(v36);
      if (v35 < 0)
        operator delete(*((void **)&v33 + 1));
      if (SBYTE7(v33) < 0)
        operator delete(v32);
      if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v31.__r_.__value_.__l.__data_);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      siri::dialogengine::GetCurrencyInfo((uint64_t)v21, this, (unsigned __int8 *)&v29, 0);
      siri::dialogengine::CreateJSONDoubleVal(1.0, (uint64_t *)&v15);
      std::string::basic_string[abi:ne180100]<0>(&__p, "unitPrice");
      *(_OWORD *)&v31.__r_.__value_.__l.__data_ = *(_OWORD *)&v15.__r_.__value_.__l.__data_;
      *(_OWORD *)&v15.__r_.__value_.__l.__data_ = 0uLL;
      siri::dialogengine::CreateJSONStringVal((uint64_t)&v29, (uint64_t *)&v14);
      std::string::basic_string[abi:ne180100]<0>(&v31.__r_.__value_.__r.__words[2], "code");
      v33 = *(_OWORD *)&v14.__r_.__value_.__l.__data_;
      *(_OWORD *)&v14.__r_.__value_.__l.__data_ = 0uLL;
      siri::dialogengine::CreateJSONStringVal((uint64_t)&v23, v19);
      std::string::basic_string[abi:ne180100]<0>(&v34, "name");
      v37 = *(_OWORD *)v19;
      *(_OWORD *)v19 = 0uLL;
      siri::dialogengine::CreateJSONStringVal((uint64_t)v21, (uint64_t *)&v18);
      std::string::basic_string[abi:ne180100]<0>(&v38, "symbol");
      v40 = v18;
      v18 = 0uLL;
      siri::dialogengine::CreateJSONBoolVal((siri::dialogengine *)v28, (uint64_t *)&v17);
      std::string::basic_string[abi:ne180100]<0>(&v41, "knownCurrency");
      v42 = v17;
      v17 = 0uLL;
      siri::dialogengine::CreateJSONBoolVal((siri::dialogengine *)v27, (uint64_t *)&v16);
      std::string::basic_string[abi:ne180100]<0>(v43, "native");
      v44 = v16;
      v16 = 0uLL;
      std::map<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>::map[abi:ne180100]((uint64_t)v20, (const void **)&__p.__r_.__value_.__l.__data_, 6);
      for (i = 0; i != -30; i -= 5)
      {
        std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&v44 + i * 8);
        if (SHIBYTE(v43[i + 2]) < 0)
          operator delete((void *)v43[i]);
      }
      size = (std::__shared_weak_count *)v15.__r_.__value_.__l.__size_;
      if (v15.__r_.__value_.__l.__size_)
      {
        v11 = (unint64_t *)(v15.__r_.__value_.__l.__size_ + 8);
        do
          v12 = __ldaxr(v11);
        while (__stlxr(v12 - 1, v11));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
          std::__shared_weak_count::__release_weak(size);
        }
      }
      std::string::basic_string[abi:ne180100]<0>(&v15, "unit#currencyUnit");
      siri::dialogengine::ExecuteSharedCat(this, (uint64_t)&v15, v20, (uint64_t)&__p);
      if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v15.__r_.__value_.__l.__data_);
      v7 = operator new();
      std::string::basic_string[abi:ne180100]<0>(&v15, "");
      if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v14, v31.__r_.__value_.__l.__data_, v31.__r_.__value_.__l.__size_);
      else
        v14 = v31;
      siri::dialogengine::VariableString::VariableString(v7, &v15, (uint64_t)&v14);
      if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v14.__r_.__value_.__l.__data_);
      if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v15.__r_.__value_.__l.__data_);
      if (SHIBYTE(v41) < 0)
        operator delete((void *)v40);
      if (v39 < 0)
        operator delete(v38);
      if (SHIBYTE(v37) < 0)
        operator delete(v36);
      if (v35 < 0)
        operator delete(*((void **)&v33 + 1));
      if (SBYTE7(v33) < 0)
        operator delete(v32);
      if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v31.__r_.__value_.__l.__data_);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(v20[1]);
      if (v26 < 0)
        operator delete(v25);
      if (v24 < 0)
        operator delete(v23);
      if (v22 < 0)
        operator delete(v21[0]);
      if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      {
        v8 = (void *)v29.__r_.__value_.__r.__words[0];
        goto LABEL_65;
      }
      return v7;
    }
  }
  else if (RequiredStringParameter)
  {
    goto LABEL_3;
  }
  v7 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::basic_string[abi:ne180100]<0>(v21, "");
  siri::dialogengine::VariableString::VariableString(v7, &__p, (uint64_t)v21);
  if (v22 < 0)
    operator delete(v21[0]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    v8 = (void *)__p.__r_.__value_.__r.__words[0];
LABEL_65:
    operator delete(v8);
  }
  return v7;
}

void sub_1BF8D489C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23,uint64_t a24,char a25,uint64_t a26,char a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,_QWORD *a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  uint64_t v59;

  if (a21 < 0)
    operator delete(__p);
  MEMORY[0x1C3B8D890](v59, 0x10B3C40D3060B95);
  siri::dialogengine::SpeakableString::~SpeakableString(&a54);
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(a33);
  siri::dialogengine::CurrencyInfo::~CurrencyInfo(&a35);
  if (a53 < 0)
    operator delete(a48);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::DialogCurrency::subunitName(siri::dialogengine::DialogCurrency *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  void *RequiredStringParameter;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t i;
  std::__shared_weak_count *size;
  unint64_t *v11;
  unint64_t v12;
  std::string v14;
  std::string v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19[3];
  const void **v20[3];
  void *v21[2];
  char v22;
  void *v23;
  char v24;
  void *v25;
  char v26;
  unsigned __int8 v27;
  unsigned __int8 v28;
  std::string v29;
  std::string __p;
  std::string v31;
  void *v32;
  __int128 v33;
  uint64_t v34;
  char v35;
  void *v36;
  __int128 v37;
  void *v38;
  char v39;
  __int128 v40;
  uint64_t v41;
  __int128 v42;
  _QWORD v43[3];
  __int128 v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(&__p, "units");
  RequiredStringParameter = siri::dialogengine::GetRequiredStringParameter((const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)a2);
  v6 = RequiredStringParameter;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v6)
    {
LABEL_3:
      (*(void (**)(std::string *__return_ptr, void *))(*(_QWORD *)v6 + 48))(&__p, v6);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v29, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      else
        v29 = __p;
      if (SHIBYTE(v41) < 0)
        operator delete((void *)v40);
      if (v39 < 0)
        operator delete(v38);
      if (SHIBYTE(v37) < 0)
        operator delete(v36);
      if (v35 < 0)
        operator delete(*((void **)&v33 + 1));
      if (SBYTE7(v33) < 0)
        operator delete(v32);
      if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v31.__r_.__value_.__l.__data_);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      siri::dialogengine::GetCurrencyInfo((uint64_t)v21, this, (unsigned __int8 *)&v29, 0);
      siri::dialogengine::CreateJSONDoubleVal(1.0, (uint64_t *)&v15);
      std::string::basic_string[abi:ne180100]<0>(&__p, "subUnitPrice");
      *(_OWORD *)&v31.__r_.__value_.__l.__data_ = *(_OWORD *)&v15.__r_.__value_.__l.__data_;
      *(_OWORD *)&v15.__r_.__value_.__l.__data_ = 0uLL;
      siri::dialogengine::CreateJSONStringVal((uint64_t)&v29, (uint64_t *)&v14);
      std::string::basic_string[abi:ne180100]<0>(&v31.__r_.__value_.__r.__words[2], "code");
      v33 = *(_OWORD *)&v14.__r_.__value_.__l.__data_;
      *(_OWORD *)&v14.__r_.__value_.__l.__data_ = 0uLL;
      siri::dialogengine::CreateJSONStringVal((uint64_t)&v23, v19);
      std::string::basic_string[abi:ne180100]<0>(&v34, "name");
      v37 = *(_OWORD *)v19;
      *(_OWORD *)v19 = 0uLL;
      siri::dialogengine::CreateJSONStringVal((uint64_t)v21, (uint64_t *)&v18);
      std::string::basic_string[abi:ne180100]<0>(&v38, "symbol");
      v40 = v18;
      v18 = 0uLL;
      siri::dialogengine::CreateJSONBoolVal((siri::dialogengine *)v28, (uint64_t *)&v17);
      std::string::basic_string[abi:ne180100]<0>(&v41, "knownCurrency");
      v42 = v17;
      v17 = 0uLL;
      siri::dialogengine::CreateJSONBoolVal((siri::dialogengine *)v27, (uint64_t *)&v16);
      std::string::basic_string[abi:ne180100]<0>(v43, "native");
      v44 = v16;
      v16 = 0uLL;
      std::map<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>::map[abi:ne180100]((uint64_t)v20, (const void **)&__p.__r_.__value_.__l.__data_, 6);
      for (i = 0; i != -30; i -= 5)
      {
        std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&v44 + i * 8);
        if (SHIBYTE(v43[i + 2]) < 0)
          operator delete((void *)v43[i]);
      }
      size = (std::__shared_weak_count *)v15.__r_.__value_.__l.__size_;
      if (v15.__r_.__value_.__l.__size_)
      {
        v11 = (unint64_t *)(v15.__r_.__value_.__l.__size_ + 8);
        do
          v12 = __ldaxr(v11);
        while (__stlxr(v12 - 1, v11));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
          std::__shared_weak_count::__release_weak(size);
        }
      }
      std::string::basic_string[abi:ne180100]<0>(&v15, "unit#currencySubUnit");
      siri::dialogengine::ExecuteSharedCat(this, (uint64_t)&v15, v20, (uint64_t)&__p);
      if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v15.__r_.__value_.__l.__data_);
      v7 = operator new();
      std::string::basic_string[abi:ne180100]<0>(&v15, "");
      if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v14, v31.__r_.__value_.__l.__data_, v31.__r_.__value_.__l.__size_);
      else
        v14 = v31;
      siri::dialogengine::VariableString::VariableString(v7, &v15, (uint64_t)&v14);
      if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v14.__r_.__value_.__l.__data_);
      if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v15.__r_.__value_.__l.__data_);
      if (SHIBYTE(v41) < 0)
        operator delete((void *)v40);
      if (v39 < 0)
        operator delete(v38);
      if (SHIBYTE(v37) < 0)
        operator delete(v36);
      if (v35 < 0)
        operator delete(*((void **)&v33 + 1));
      if (SBYTE7(v33) < 0)
        operator delete(v32);
      if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v31.__r_.__value_.__l.__data_);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(v20[1]);
      if (v26 < 0)
        operator delete(v25);
      if (v24 < 0)
        operator delete(v23);
      if (v22 < 0)
        operator delete(v21[0]);
      if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      {
        v8 = (void *)v29.__r_.__value_.__r.__words[0];
        goto LABEL_65;
      }
      return v7;
    }
  }
  else if (RequiredStringParameter)
  {
    goto LABEL_3;
  }
  v7 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::basic_string[abi:ne180100]<0>(v21, "");
  siri::dialogengine::VariableString::VariableString(v7, &__p, (uint64_t)v21);
  if (v22 < 0)
    operator delete(v21[0]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    v8 = (void *)__p.__r_.__value_.__r.__words[0];
LABEL_65:
    operator delete(v8);
  }
  return v7;
}

void sub_1BF8D4F90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23,uint64_t a24,char a25,uint64_t a26,char a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,_QWORD *a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  uint64_t v59;

  if (a21 < 0)
    operator delete(__p);
  MEMORY[0x1C3B8D890](v59, 0x10B3C40D3060B95);
  siri::dialogengine::SpeakableString::~SpeakableString(&a54);
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(a33);
  siri::dialogengine::CurrencyInfo::~CurrencyInfo(&a35);
  if (a53 < 0)
    operator delete(a48);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::DialogCurrency::unitValue(siri::dialogengine::DialogCurrency *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  double *RequiredNumberParameter;
  double *v5;
  double v6;
  uint64_t v7;
  double v8;
  double v9;
  std::string __p;

  std::string::basic_string[abi:ne180100]<0>(&__p, "value");
  RequiredNumberParameter = (double *)siri::dialogengine::GetRequiredNumberParameter((const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)a2);
  v5 = RequiredNumberParameter;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v5)
      goto LABEL_3;
LABEL_7:
    v7 = operator new();
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    siri::dialogengine::VariableNumber::VariableNumber(v7, &__p, 0.0);
    goto LABEL_8;
  }
  if (!RequiredNumberParameter)
    goto LABEL_7;
LABEL_3:
  v6 = v5[9];
  v7 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  v8 = floor(v6);
  v9 = ceil(v6);
  if (v6 < 0.0)
    v8 = v9;
  siri::dialogengine::VariableNumber::VariableNumber(v7, &__p, v8);
LABEL_8:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v7;
}

void sub_1BF8D52AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  MEMORY[0x1C3B8D890](v15, 0x10B3C4030AE2ACELL);
  _Unwind_Resume(a1);
}

void sub_1BF8D52F0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  JUMPOUT(0x1BF8D52E8);
}

uint64_t siri::dialogengine::DialogCurrency::subunitValue(siri::dialogengine::DialogCurrency *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  double *RequiredNumberParameter;
  double *v5;
  double v6;
  uint64_t v7;
  double v8;
  std::string __p;

  std::string::basic_string[abi:ne180100]<0>(&__p, "value");
  RequiredNumberParameter = (double *)siri::dialogengine::GetRequiredNumberParameter((const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)a2);
  v5 = RequiredNumberParameter;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v5)
      goto LABEL_3;
  }
  else if (RequiredNumberParameter)
  {
LABEL_3:
    v6 = v5[9];
    v7 = operator new();
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    siri::dialogengine::GetSubUnitValue((siri::dialogengine *)2, v6);
    siri::dialogengine::VariableNumber::VariableNumber(v7, &__p, v8);
    goto LABEL_6;
  }
  v7 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  siri::dialogengine::VariableNumber::VariableNumber(v7, &__p, 0.0);
LABEL_6:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v7;
}

void sub_1BF8D5408(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  MEMORY[0x1C3B8D890](v15, 0x10B3C4030AE2ACELL);
  _Unwind_Resume(a1);
}

void siri::dialogengine::FilterDialogForModeAndSettings(uint64_t *a1, uint64_t a2, int a3, int a4, int a5, uint64_t a6)
{
  uint64_t v10;
  std::string *v11;
  void *v12;
  char v13;
  char *v14;
  const char *v15;
  void **v16;
  std::string *v17;
  const char *v18;
  char *v19;
  const char *v20;
  _BYTE *v21;
  char *v22;
  const char *v23;
  _BYTE *v24;
  char *v25;
  const char *v26;
  _BYTE *v27;
  unint64_t v28;
  int v29;
  int v30;
  const char *v31;
  int v32;
  std::string::size_type v33;
  const char *v34;
  std::string *v35;
  _BYTE *v36;
  int v37;
  std::string::size_type v38;
  const char *v39;
  std::string *v40;
  _BYTE *v41;
  int v42;
  std::string::size_type v43;
  const char *v44;
  std::string *v45;
  _BYTE *v46;
  int v47;
  std::string::size_type v48;
  const char *v49;
  std::string *v50;
  _BYTE *v51;
  uint64_t v52;
  int v53;
  std::string::size_type v54;
  const char *v55;
  std::string *v56;
  _BYTE *v57;
  int v58;
  std::string::size_type v59;
  const char *v60;
  std::string *v61;
  _BYTE *v62;
  int v63;
  std::string::size_type v64;
  const char *v65;
  std::string *v66;
  _BYTE *v67;
  int v68;
  std::string::size_type v69;
  const char *v70;
  std::string *v71;
  _BYTE *v72;
  int v73;
  std::string::size_type v74;
  const char *v75;
  std::string *v76;
  _BYTE *v77;
  int v78;
  std::string::size_type v79;
  const char *v80;
  void **v81;
  const char *v82;
  unint64_t v83;
  const char *v84;
  _BYTE *v85;
  void **v86;
  void **v87;
  void **v88;
  void **v89;
  __int16 v90;
  const char *v91;
  char *v92;
  void **v93;
  __int16 v94;
  const char *v95;
  char *v96;
  void **v97;
  uint64_t *v98;
  void **v99;
  void **v100;
  void **v101;
  _BYTE *v102;
  const char *v103;
  void **v104;
  unint64_t v105;
  int v106;
  void **v107;
  void (*v108)(void **__return_ptr, uint64_t *);
  uint64_t *v109;
  uint64_t *v110;
  unint64_t v111;
  const char *v112;
  void **v113;
  void **v114;
  void **v115;
  void **v116;
  void **v117;
  void **v118;
  void **v120;
  void *__p[2];
  char v122;
  void *v123[2];
  char v124;
  void *v125[2];
  char v126;
  void *v127[2];
  char v128;
  void *v129[2];
  char v130;
  void *v131[2];
  char v132;
  void *v133[2];
  char v134;
  void *v135[2];
  char v136;
  void *v137[2];
  char v138;
  void *v139[2];
  char v140;
  std::string v141;
  void *v142;
  __int128 v143;
  _BYTE v144[15];
  char v145;
  uint64_t v146;

  v146 = *MEMORY[0x1E0C80C00];
  v142 = 0;
  v143 = 0uLL;
  v10 = *(unsigned __int8 *)(a6 + 23);
  if ((v10 & 0x80u) != 0)
    v10 = *(_QWORD *)(a6 + 8);
  if (v10)
  {
    std::operator+<char>();
    v11 = std::string::append(&v141, "'");
    v12 = (void *)v11->__r_.__value_.__r.__words[0];
    *(_QWORD *)v144 = v11->__r_.__value_.__l.__size_;
    *(_QWORD *)&v144[7] = *(std::string::size_type *)((char *)&v11->__r_.__value_.__r.__words[1] + 7);
    v13 = HIBYTE(v11->__r_.__value_.__r.__words[2]);
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v143) < 0)
      operator delete(v142);
    v142 = v12;
    *(_QWORD *)&v143 = *(_QWORD *)v144;
    *(_QWORD *)((char *)&v143 + 7) = *(_QWORD *)&v144[7];
    HIBYTE(v143) = v13;
    if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v141.__r_.__value_.__l.__data_);
  }
  if ((a2 - 1) > 3)
    v14 = "";
  else
    v14 = off_1E7930A68[(a2 - 1)];
  std::string::basic_string[abi:ne180100]<0>(&v141, v14);
  v16 = &v142;
  if (v143 < 0)
    v16 = (void **)v142;
  if ((v141.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v17 = &v141;
  else
    v17 = (std::string *)v141.__r_.__value_.__r.__words[0];
  siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Filtering dialog%s according to response mode '%s'", v15, v16, v17);
  if ((*(uint64_t (**)(uint64_t *))(*a1 + 16))(a1))
  {
    if (a3)
      v19 = "true";
    else
      v19 = "false";
    std::string::basic_string[abi:ne180100]<0>(v144, v19);
    if (v145 >= 0)
      v21 = v144;
    else
      v21 = *(_BYTE **)v144;
    siri::dialogengine::Log::Info((siri::dialogengine::Log *)"alwaysDisplayDialog = %s", v20, v21);
    if (v145 < 0)
      operator delete(*(void **)v144);
    if (a4)
      v22 = "true";
    else
      v22 = "false";
    std::string::basic_string[abi:ne180100]<0>(v144, v22);
    if (v145 >= 0)
      v24 = v144;
    else
      v24 = *(_BYTE **)v144;
    siri::dialogengine::Log::Info((siri::dialogengine::Log *)"printSupportingDialogInDisplayModes = %s", v23, v24);
    if (v145 < 0)
      operator delete(*(void **)v144);
    if (a5)
      v25 = "true";
    else
      v25 = "false";
    std::string::basic_string[abi:ne180100]<0>(v144, v25);
    if (v145 >= 0)
      v27 = v144;
    else
      v27 = *(_BYTE **)v144;
    siri::dialogengine::Log::Info((siri::dialogengine::Log *)"containsVisual = %s", v26, v27);
    if (v145 < 0)
      operator delete(*(void **)v144);
    v28 = 0;
    v29 = a5 ^ 1 | a3;
    v30 = v29 | a4;
    while (v28 < (*(uint64_t (**)(uint64_t *))(*a1 + 16))(a1))
    {
      switch((int)a2)
      {
        case 1:
          (*(void (**)(uint64_t *, unint64_t))(*a1 + 120))(a1, v28);
          v32 = SHIBYTE(v141.__r_.__value_.__r.__words[2]);
          v33 = v141.__r_.__value_.__r.__words[0];
          (*(void (**)(_BYTE *__return_ptr, uint64_t *, unint64_t))(*a1 + 24))(v144, a1, v28);
          if (v32 >= 0)
            v35 = &v141;
          else
            v35 = (std::string *)v33;
          if (v145 >= 0)
            v36 = v144;
          else
            v36 = *(_BYTE **)v144;
          siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Response mode '%s' filtering removed SUPPORTING dialog with id '%s'", v34, v35, v36);
          if (v145 < 0)
            operator delete(*(void **)v144);
          (*(void (**)(uint64_t *, unint64_t, uint64_t))(*a1 + 136))(a1, v28, 1);
          v37 = SHIBYTE(v141.__r_.__value_.__r.__words[2]);
          v38 = v141.__r_.__value_.__r.__words[0];
          (*(void (**)(_BYTE *__return_ptr, uint64_t *, unint64_t))(*a1 + 24))(v144, a1, v28);
          if (v37 >= 0)
            v40 = &v141;
          else
            v40 = (std::string *)v38;
          if (v145 >= 0)
            v41 = v144;
          else
            v41 = *(_BYTE **)v144;
          siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Response mode '%s' filtering disallowed printing dialog with id '%s' due to mode (set spokenOnly = true)", v39, v40, v41);
          goto LABEL_124;
        case 2:
          (*(void (**)(uint64_t *, unint64_t))(*a1 + 120))(a1, v28);
          v42 = SHIBYTE(v141.__r_.__value_.__r.__words[2]);
          v43 = v141.__r_.__value_.__r.__words[0];
          (*(void (**)(_BYTE *__return_ptr, uint64_t *, unint64_t))(*a1 + 24))(v144, a1, v28);
          if (v42 >= 0)
            v45 = &v141;
          else
            v45 = (std::string *)v43;
          if (v145 >= 0)
            v46 = v144;
          else
            v46 = *(_BYTE **)v144;
          siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Response mode '%s' filtering removed SUPPORTING dialog with id '%s'", v44, v45, v46);
          if (v145 < 0)
          {
            operator delete(*(void **)v144);
            if (!v29)
              goto LABEL_126;
          }
          else if (!v29)
          {
            goto LABEL_126;
          }
          (*(void (**)(uint64_t *, unint64_t, _QWORD))(*a1 + 136))(a1, v28, 0);
          v73 = SHIBYTE(v141.__r_.__value_.__r.__words[2]);
          v74 = v141.__r_.__value_.__r.__words[0];
          (*(void (**)(_BYTE *__return_ptr, uint64_t *, unint64_t))(*a1 + 24))(v144, a1, v28);
          if (v73 >= 0)
            v76 = &v141;
          else
            v76 = (std::string *)v74;
          if (v145 >= 0)
            v77 = v144;
          else
            v77 = *(_BYTE **)v144;
          siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Response mode '%s' filtering allowed printing dialog with id '%s' due to user setting (set spokenOnly = false)", v75, v76, v77);
          goto LABEL_124;
        case 3:
          (*(void (**)(uint64_t *, unint64_t))(*a1 + 112))(a1, v28);
          v47 = SHIBYTE(v141.__r_.__value_.__r.__words[2]);
          v48 = v141.__r_.__value_.__r.__words[0];
          (*(void (**)(_BYTE *__return_ptr, uint64_t *, unint64_t))(*a1 + 24))(v144, a1, v28);
          if (v47 >= 0)
            v50 = &v141;
          else
            v50 = (std::string *)v48;
          if (v145 >= 0)
            v51 = v144;
          else
            v51 = *(_BYTE **)v144;
          siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Response mode '%s' filtering removed FULL dialog with id '%s'", v49, v50, v51);
          if (v145 < 0)
          {
            operator delete(*(void **)v144);
            if (!v30)
              goto LABEL_126;
          }
          else if (!v30)
          {
            goto LABEL_126;
          }
          (*(void (**)(uint64_t *, unint64_t, _QWORD))(*a1 + 136))(a1, v28, 0);
          v78 = SHIBYTE(v141.__r_.__value_.__r.__words[2]);
          v79 = v141.__r_.__value_.__r.__words[0];
          (*(void (**)(_BYTE *__return_ptr, uint64_t *, unint64_t))(*a1 + 24))(v144, a1, v28);
          if (v78 >= 0)
            v66 = &v141;
          else
            v66 = (std::string *)v79;
          if (v145 >= 0)
            v67 = v144;
          else
            v67 = *(_BYTE **)v144;
          goto LABEL_123;
        case 4:
          v52 = *a1;
          if (v30)
          {
            (*(void (**)(uint64_t *, unint64_t))(v52 + 112))(a1, v28);
            v53 = SHIBYTE(v141.__r_.__value_.__r.__words[2]);
            v54 = v141.__r_.__value_.__r.__words[0];
            (*(void (**)(_BYTE *__return_ptr, uint64_t *, unint64_t))(*a1 + 24))(v144, a1, v28);
            if (v53 >= 0)
              v56 = &v141;
            else
              v56 = (std::string *)v54;
            if (v145 >= 0)
              v57 = v144;
            else
              v57 = *(_BYTE **)v144;
            siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Response mode '%s' filtering removed FULL dialog with id '%s' due to pattern setting, user setting and/or lack of visual", v55, v56, v57);
            if (v145 < 0)
              operator delete(*(void **)v144);
            (*(void (**)(uint64_t *, unint64_t, uint64_t))(*a1 + 128))(a1, v28, 1);
            v58 = SHIBYTE(v141.__r_.__value_.__r.__words[2]);
            v59 = v141.__r_.__value_.__r.__words[0];
            (*(void (**)(_BYTE *__return_ptr, uint64_t *, unint64_t))(*a1 + 24))(v144, a1, v28);
            if (v58 >= 0)
              v61 = &v141;
            else
              v61 = (std::string *)v59;
            if (v145 >= 0)
              v62 = v144;
            else
              v62 = *(_BYTE **)v144;
            siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Response mode '%s' filtering disallowed speaking for dialog with id '%s' due to pattern setting, user setting and/or lack of visual (set printOnly = true)", v60, v61, v62);
            if (v145 < 0)
              operator delete(*(void **)v144);
            (*(void (**)(uint64_t *, unint64_t, _QWORD))(*a1 + 136))(a1, v28, 0);
            v63 = SHIBYTE(v141.__r_.__value_.__r.__words[2]);
            v64 = v141.__r_.__value_.__r.__words[0];
            (*(void (**)(_BYTE *__return_ptr, uint64_t *, unint64_t))(*a1 + 24))(v144, a1, v28);
            if (v63 >= 0)
              v66 = &v141;
            else
              v66 = (std::string *)v64;
            if (v145 >= 0)
              v67 = v144;
            else
              v67 = *(_BYTE **)v144;
LABEL_123:
            siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Response mode '%s' filtering allowed printing dialog with id '%s' due to pattern setting, user setting and/or lack of visual (set spokenOnly = false)", v65, v66, v67);
          }
          else
          {
            (*(void (**)(uint64_t *, unint64_t))(v52 + 144))(a1, v28);
            v68 = SHIBYTE(v141.__r_.__value_.__r.__words[2]);
            v69 = v141.__r_.__value_.__r.__words[0];
            (*(void (**)(_BYTE *__return_ptr, uint64_t *, unint64_t))(*a1 + 24))(v144, a1, v28);
            if (v68 >= 0)
              v71 = &v141;
            else
              v71 = (std::string *)v69;
            if (v145 >= 0)
              v72 = v144;
            else
              v72 = *(_BYTE **)v144;
            siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Response mode '%s' filtering completely removed dialog with id '%s'", v70, v71, v72);
          }
LABEL_124:
          if (v145 < 0)
            operator delete(*(void **)v144);
LABEL_126:
          ++v28;
          break;
        default:
          siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Unrecognized response mode: %d", v31, a2);
          goto LABEL_126;
      }
    }
    (*(void (**)(uint64_t *))(*a1 + 152))(a1);
    v81 = &v142;
    if (v143 < 0)
      v81 = (void **)v142;
    siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Done filtering dialog%s", v80, v81);
    if ((*(uint64_t (**)(uint64_t *))(*a1 + 16))(a1))
    {
      v83 = 0;
      v84 = "unset";
      while (v83 < (*(uint64_t (**)(uint64_t *))(*a1 + 16))(a1))
      {
        (*(void (**)(_BYTE *__return_ptr, uint64_t *, unint64_t))(*a1 + 24))(v144, a1, v83);
        if (v145 >= 0)
          v85 = v144;
        else
          v85 = *(_BYTE **)v144;
        (*(void (**)(void **__return_ptr, uint64_t *, unint64_t))(*a1 + 32))(v139, a1, v83);
        if (v140 >= 0)
          v86 = v139;
        else
          v86 = (void **)v139[0];
        (*(void (**)(void **__return_ptr, uint64_t *, unint64_t))(*a1 + 40))(v137, a1, v83);
        if (v138 >= 0)
          v87 = v137;
        else
          v87 = (void **)v137[0];
        (*(void (**)(void **__return_ptr, uint64_t *, unint64_t))(*a1 + 48))(v135, a1, v83);
        if (v136 >= 0)
          v88 = v135;
        else
          v88 = (void **)v135[0];
        (*(void (**)(void **__return_ptr, uint64_t *, unint64_t))(*a1 + 56))(v133, a1, v83);
        if (v134 >= 0)
          v89 = v133;
        else
          v89 = (void **)v133[0];
        v90 = (*(uint64_t (**)(uint64_t *, unint64_t))(*a1 + 64))(a1, v83);
        v91 = "true";
        if (!(_BYTE)v90)
          v91 = "false";
        if ((v90 & 0xFF00) != 0)
          v92 = (char *)v91;
        else
          v92 = (char *)v84;
        std::string::basic_string[abi:ne180100]<0>(v131, v92);
        v93 = v131;
        if (v132 < 0)
          v93 = (void **)v131[0];
        v120 = v93;
        v94 = (*(uint64_t (**)(uint64_t *, unint64_t))(*a1 + 72))(a1, v83);
        v95 = "true";
        if (!(_BYTE)v94)
          v95 = "false";
        if ((v94 & 0xFF00) != 0)
          v96 = (char *)v95;
        else
          v96 = (char *)v84;
        std::string::basic_string[abi:ne180100]<0>(v129, v96);
        v97 = v129;
        if (v130 < 0)
          v97 = (void **)v129[0];
        v118 = v97;
        (*(void (**)(void **__return_ptr, uint64_t *, unint64_t))(*a1 + 80))(v127, a1, v83);
        v98 = a1;
        v99 = v89;
        v100 = v88;
        v116 = v87;
        v117 = v86;
        if (v128 >= 0)
          v101 = v127;
        else
          v101 = (void **)v127[0];
        (*(void (**)(void **__return_ptr, uint64_t *, unint64_t))(*v98 + 88))(v125, v98, v83);
        v102 = v85;
        v103 = v84;
        if (v126 >= 0)
          v104 = v125;
        else
          v104 = (void **)v125[0];
        (*(void (**)(void **__return_ptr, uint64_t *, unint64_t))(*v98 + 96))(v123, v98, v83);
        v105 = v83;
        v106 = v124;
        v107 = (void **)v123[0];
        v108 = *(void (**)(void **__return_ptr, uint64_t *))(*v98 + 104);
        v109 = v98;
        v110 = v98;
        v111 = v105;
        v108(__p, v110);
        v113 = v123;
        if (v106 < 0)
          v113 = v107;
        v114 = __p;
        if (v122 < 0)
          v114 = (void **)__p[0];
        siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Dialog ID: '%s'\nFull print: '%s'\nFull speak: '%s'\nSupporting print: '%s'\nSupporting speak: '%s'\nspokenOnly: %s\nprintOnly: %s\nRedacted full print: '%s'\nRedacted full speak: '%s'\nRedacted supporting print: '%s'\nRedacted supporting speak: '%s'", v112, v102, v117, v116, v100, v99, v120, v118,
          v101,
          v104,
          v113,
          v114);
        v84 = v103;
        a1 = v109;
        if (v122 < 0)
          operator delete(__p[0]);
        if (v124 < 0)
          operator delete(v123[0]);
        if (v126 < 0)
          operator delete(v125[0]);
        if (v128 < 0)
          operator delete(v127[0]);
        if (v130 < 0)
          operator delete(v129[0]);
        if (v132 < 0)
          operator delete(v131[0]);
        if (v134 < 0)
          operator delete(v133[0]);
        if (v136 < 0)
          operator delete(v135[0]);
        if (v138 < 0)
          operator delete(v137[0]);
        if (v140 < 0)
          operator delete(v139[0]);
        if (v145 < 0)
          operator delete(*(void **)v144);
        v83 = v111 + 1;
      }
    }
    else
    {
      siri::dialogengine::Log::Info((siri::dialogengine::Log *)"All dialog was removed", v82);
    }
  }
  else
  {
    v115 = &v142;
    if (v143 < 0)
      v115 = (void **)v142;
    siri::dialogengine::Log::Info((siri::dialogengine::Log *)"There is no dialog to filter%s", v18, v115);
  }
  if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v141.__r_.__value_.__l.__data_);
  if (SHIBYTE(v143) < 0)
    operator delete(v142);
}

void sub_1BF8D5F88(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 - 97) < 0)
    operator delete(*(void **)(v1 - 120));
  if (*(char *)(v1 - 145) < 0)
    operator delete(*(void **)(v1 - 168));
  if (*(char *)(v1 - 121) < 0)
    operator delete(*(void **)(v1 - 144));
  _Unwind_Resume(a1);
}

void sub_1BF8D6704(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  if (v4)

  _Unwind_Resume(a1);
}

void sub_1BF8D6B9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, void *a11, void *a12, void *a13, uint64_t a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55)
{
  void *v55;
  uint64_t v56;

  if (a41 < 0)
    operator delete(__p);
  if (a48 < 0)
    operator delete(a43);
  if (a55 < 0)
    operator delete(a50);
  if (*(char *)(v56 - 225) < 0)
    operator delete(*(void **)(v56 - 248));

  _Unwind_Resume(a1);
}

void sub_1BF8D6DD8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BF8D6E58(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BF8D6EC8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BF8D6F20(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BF8D708C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  void *v33;
  uint64_t v34;

  if (a33 < 0)
    operator delete(__p);
  siri::dialogengine::TestSuite::~TestSuite((siri::dialogengine::TestSuite *)(v34 - 88));

  _Unwind_Resume(a1);
}

void sub_1BF8D72F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  void *v33;
  void *v34;
  uint64_t v35;

  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  if (a33 < 0)
    operator delete(a28);
  siri::dialogengine::TestSuite::~TestSuite((siri::dialogengine::TestSuite *)(v35 - 88));

  _Unwind_Resume(a1);
}

void sub_1BF8D7504(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  void *v28;
  void *v29;

  if (a16 < 0)
    operator delete(__p);

  if (a28 < 0)
    operator delete(a23);

  _Unwind_Resume(a1);
}

void sub_1BF8D7600(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BF8D771C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  void *v23;
  void *v24;
  uint64_t v25;

  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (*(char *)(v25 - 33) < 0)
    operator delete(*(void **)(v25 - 56));

  _Unwind_Resume(a1);
}

void sub_1BF8D78D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  void *v23;

  siri::dialogengine::UpdatableDir::~UpdatableDir(&a18);

  _Unwind_Resume(a1);
}

void sub_1BF8D7A4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  void *v23;
  void *v24;
  uint64_t v25;

  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (*(char *)(v25 - 33) < 0)
    operator delete(*(void **)(v25 - 56));

  _Unwind_Resume(a1);
}

void sub_1BF8D7C04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  void *v23;

  siri::dialogengine::UpdatableDir::~UpdatableDir(&a18);

  _Unwind_Resume(a1);
}

void sub_1BF8D7CBC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BF8D7D0C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BF8D7DF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  void *v15;

  __p = &a15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);

  _Unwind_Resume(a1);
}

void sub_1BF8D7FC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  void *v15;
  void *v16;

  if (a14 < 0)
    operator delete(__p);

  __p = &a15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);

  _Unwind_Resume(a1);
}

void sub_1BF8D8100(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  void *v21;

  if (a20 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1BF8D81B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BF8D8278(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  void *v21;

  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);

  _Unwind_Resume(a1);
}

void sub_1BF8D8420(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  void *v21;
  void *v22;
  uint64_t v23;

  if (*(char *)(v23 - 49) < 0)
    operator delete(*(void **)(v23 - 72));

  _Unwind_Resume(a1);
}

void siri::dialogengine::UpdatableDir::~UpdatableDir(void **this)
{
  void **v2;

  v2 = this + 9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = this + 6;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

void std::vector<siri::dialogengine::TestCase>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = v2;
    if (v4 != v2)
    {
      do
        siri::dialogengine::TestCase::~TestCase(v4 - 32);
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void siri::dialogengine::TestSuite::~TestSuite(siri::dialogengine::TestSuite *this)
{
  void **v2;

  v2 = (void **)((char *)this + 32);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = (void **)((char *)this + 8);
  std::vector<siri::dialogengine::TestCase>::__destroy_vector::operator()[abi:ne180100](&v2);
}

void siri::dialogengine::TestCase::~TestCase(void **this)
{
  void **v2;

  v2 = this + 29;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = this + 25;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 199) < 0)
    operator delete(this[22]);
  if (*((char *)this + 175) < 0)
    operator delete(this[19]);
  if (*((char *)this + 151) < 0)
    operator delete(this[16]);
  if (*((char *)this + 119) < 0)
    operator delete(this[12]);
  if (*((char *)this + 95) < 0)
    operator delete(this[9]);
  if (*((char *)this + 71) < 0)
    operator delete(this[6]);
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

id CATExecutor(void *a1, uint64_t a2, void *a3, void *a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, void *a10)
{
  id v17;
  id v18;
  id v19;
  id v20;
  void *v21;
  id v22;
  id v23;
  id v24;
  id v25;
  void *v26;
  void *v27;
  void *v28;
  uint64_t v30;
  id v31;
  _QWORD v32[4];
  id v33;
  id v34;
  void *__p[2];
  char v36;
  void *v37[2];
  char v38;

  v17 = a1;
  v18 = a3;
  v19 = a4;
  v20 = a5;
  v31 = a10;
  LODWORD(v30) = a9;
  +[CATCommonApi CreateDEExecutor:templateDir:catId:paramsXML:localeXML:parameters:globalContext:callback:options:](CATCommonApi, "CreateDEExecutor:templateDir:catId:paramsXML:localeXML:parameters:globalContext:callback:options:", v17, a2, v18, v19, v20, a6, a7, a8, v30);
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  if (v17)
  {
    objc_msgSend(v17, "bundleIdentifier");
    v22 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    std::string::basic_string[abi:ne180100]<0>(v37, (char *)objc_msgSend(v22, "UTF8String"));
    objc_msgSend(v21, "templateDir");
    v23 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)objc_msgSend(v23, "UTF8String"));
    siri::dialogengine::GradingAllowListFactory::RegisterBundle((char *)v37, (__int128 *)__p);
    if (v36 < 0)
      operator delete(__p[0]);

    if (v38 < 0)
      operator delete(v37[0]);

  }
  v32[0] = MEMORY[0x1E0C809B0];
  v32[1] = 3221225472;
  v32[2] = ___ZL11CATExecutorP8NSBundleP5NSURLP8NSStringS4_S4_P12NSDictionaryP11objc_objectPU22objcproto11CATCallback11objc_objectiU13block_pointerFvPK9CATResultPK7NSErrorE_block_invoke;
  v32[3] = &unk_1E7937868;
  v24 = v18;
  v33 = v24;
  v25 = v31;
  v34 = v25;
  v26 = (void *)MEMORY[0x1C3B8DDB8](v32);
  if (v25)
  {
    if (v24)
      objc_msgSend(v21, "executeWithCompletionBlock:", v26);
    else
      objc_msgSend(v21, "executeWithParams:locale:completionBlock:", v19, v20, v26);
    v28 = 0;
  }
  else
  {
    objc_msgSend(v21, "execute");
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    +[CATCommonApi DEResultToCATResult:catId:](CATCommonApi, "DEResultToCATResult:catId:", v27, v24);
    v28 = (void *)objc_claimAutoreleasedReturnValue();

  }
  return v28;
}

{
  id v17;
  id v18;
  id v19;
  id v20;
  void *v21;
  id v22;
  id v23;
  id v24;
  id v25;
  void *v26;
  void *v27;
  void *v28;
  uint64_t v30;
  id v31;
  _QWORD v32[4];
  id v33;
  id v34;
  void *__p[2];
  char v36;
  void *v37[2];
  char v38;

  v17 = a1;
  v18 = a3;
  v19 = a4;
  v20 = a5;
  v31 = a10;
  LODWORD(v30) = a9;
  +[CATCommonApi CreateDEExecutor:templateDir:catId:paramsXML:localeXML:parameters:globalContext:callback:options:](CATCommonApi, "CreateDEExecutor:templateDir:catId:paramsXML:localeXML:parameters:globalContext:callback:options:", v17, a2, v18, v19, v20, a6, a7, a8, v30);
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  if (v17)
  {
    objc_msgSend(v17, "bundleIdentifier");
    v22 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    std::string::basic_string[abi:ne180100]<0>(v37, (char *)objc_msgSend(v22, "UTF8String"));
    objc_msgSend(v21, "templateDir");
    v23 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)objc_msgSend(v23, "UTF8String"));
    siri::dialogengine::GradingAllowListFactory::RegisterBundle((char *)v37, (__int128 *)__p);
    if (v36 < 0)
      operator delete(__p[0]);

    if (v38 < 0)
      operator delete(v37[0]);

  }
  v32[0] = MEMORY[0x1E0C809B0];
  v32[1] = 3221225472;
  v32[2] = ___ZL11CATExecutorP8NSBundleP5NSURLP8NSStringS4_S4_P12NSDictionaryP11objc_objectPU22objcproto11CATCallback11objc_objectiU13block_pointerFvPK21DialogExecutionResultPK7NSErrorE_block_invoke;
  v32[3] = &unk_1E7937868;
  v24 = v18;
  v33 = v24;
  v25 = v31;
  v34 = v25;
  v26 = (void *)MEMORY[0x1C3B8DDB8](v32);
  if (v25)
  {
    if (v24)
      objc_msgSend(v21, "executeWithCompletionBlock:", v26);
    else
      objc_msgSend(v21, "executeWithParams:locale:completionBlock:", v19, v20, v26);
    v28 = 0;
  }
  else
  {
    objc_msgSend(v21, "execute");
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    +[CATCommonApi DEResultToDialogExecutionResult:catId:](CATCommonApi, "DEResultToDialogExecutionResult:catId:", v27, v24);
    v28 = (void *)objc_claimAutoreleasedReturnValue();

  }
  return v28;
}

void sub_1BF8D8898(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;

  _Unwind_Resume(a1);
}

void ___ZL11CATExecutorP8NSBundleP5NSURLP8NSStringS4_S4_P12NSDictionaryP11objc_objectPU22objcproto11CATCallback11objc_objectiU13block_pointerFvPK9CATResultPK7NSErrorE_block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  char v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;

  v10 = a2;
  +[CATCommonApi DEResultToCATResult:catId:](CATCommonApi, "DEResultToCATResult:catId:");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "status");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "isEqualToString:", CFSTR("success"));

  v6 = *(_QWORD *)(a1 + 40);
  if ((v5 & 1) != 0)
  {
    +[CATCommonApi NSErrorFromString:errorCode:](CATCommonApi, "NSErrorFromString:errorCode:", &stru_1E793AF80, 0);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, void *, void *))(v6 + 16))(v6, v3, v7);
  }
  else
  {
    objc_msgSend(v10, "error");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "status");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    +[CATCommonApi NSErrorFromString:errorCode:](CATCommonApi, "NSErrorFromString:errorCode:", v7, v8);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, void *, void *))(v6 + 16))(v6, v3, v9);

  }
}

void sub_1BF8D8A54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void InitDefaultsscc_info_KeyValue_Standard_KeyValue_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/KeyValue.pb.cc", a4);
  SnippetUI::KeyValue_Standard::KeyValue_Standard((SnippetUI::KeyValue_Standard *)&SnippetUI::_KeyValue_Standard_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_KeyValue_Standard_default_instance_, v4);
}

void InitDefaultsscc_info_KeyValue_Standard_Pair_KeyValue_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/KeyValue.pb.cc", a4);
  SnippetUI::KeyValue_Standard_Pair::KeyValue_Standard_Pair((SnippetUI::KeyValue_Standard_Pair *)&SnippetUI::_KeyValue_Standard_Pair_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_KeyValue_Standard_Pair_default_instance_, v4);
  qword_1EF583EB0 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
}

SnippetUI::KeyValue_Standard_Pair *SnippetUI::KeyValue_Standard_Pair::KeyValue_Standard_Pair(SnippetUI::KeyValue_Standard_Pair *this)
{
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_QWORD *)this = &off_1E792C028;
  *((_DWORD *)this + 12) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  if (atomic_load(scc_info_KeyValue_Standard_Pair_KeyValue_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_KeyValue_Standard_Pair_KeyValue_2eproto);
  *((_QWORD *)this + 5) = 0;
  return this;
}

void sub_1BF8D8BC4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t *v2;

  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((google::protobuf::internal::RepeatedPtrFieldBase *)(v1 + 16));
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v2);
  _Unwind_Resume(a1);
}

void SnippetUI::KeyValue_Standard_Pair::~KeyValue_Standard_Pair(SnippetUI::KeyValue_Standard_Pair *this)
{
  SnippetUI::KeyValue_Standard_Pair::~KeyValue_Standard_Pair(this);
  JUMPOUT(0x1C3B8D890);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_1E792C028;
  if (this != (SnippetUI::KeyValue_Standard_Pair *)&SnippetUI::_KeyValue_Standard_Pair_default_instance_)
  {
    v2 = *((_QWORD *)this + 5);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((SnippetUI::KeyValue_Standard_Pair *)((char *)this + 16));
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

SnippetUI::KeyValue_Standard_Pair *SnippetUI::KeyValue_Standard_Pair::New(SnippetUI::KeyValue_Standard_Pair *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::KeyValue_Standard_Pair>(0);
}

SnippetUI::KeyValue_Standard_Pair *SnippetUI::KeyValue_Standard_Pair::New(SnippetUI::KeyValue_Standard_Pair *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::KeyValue_Standard_Pair>(a2);
}

void SnippetUI::KeyValue_Standard_Pair::Clear(SnippetUI::KeyValue_Standard_Pair *this)
{
  uint64_t v2;
  google::protobuf::internal::InternalMetadataWithArena *v3;
  char v4;

  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::TextProperty>::TypeHandler>((uint64_t)this + 16);
  v2 = *((_QWORD *)this + 5);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v4 = *((_BYTE *)this + 8);
  v3 = (SnippetUI::KeyValue_Standard_Pair *)((char *)this + 8);
  *((_QWORD *)v3 + 4) = 0;
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v3);
}

uint64_t SnippetUI::KeyValue_Standard_Pair::IsInitialized(SnippetUI::KeyValue_Standard_Pair *this)
{
  return 1;
}

char *SnippetUI::KeyValue_Standard_Pair::ByteSizeLong(SnippetUI::KeyValue_Standard_Pair *this)
{
  const google::protobuf::UnknownFieldSet *v2;
  uint64_t v3;
  SnippetUI::TextProperty **v4;
  uint64_t v5;
  SnippetUI::TextProperty *v6;
  char *v7;
  SnippetUI::TextProperty *v8;
  char *v9;

  v2 = (const google::protobuf::UnknownFieldSet *)*((int *)this + 6);
  v3 = *((_QWORD *)this + 4);
  if (v3)
    v4 = (SnippetUI::TextProperty **)(v3 + 8);
  else
    v4 = 0;
  if ((_DWORD)v2)
  {
    v5 = 8 * (_QWORD)v2;
    do
    {
      v6 = *v4++;
      v7 = SnippetUI::TextProperty::ByteSizeLong(v6);
      v2 = (const google::protobuf::UnknownFieldSet *)((char *)v2
                                                     + (_QWORD)v7
                                                     + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6));
      v5 -= 8;
    }
    while (v5);
  }
  else
  {
    v2 = 0;
  }
  if (this != (SnippetUI::KeyValue_Standard_Pair *)&SnippetUI::_KeyValue_Standard_Pair_default_instance_)
  {
    v8 = (SnippetUI::TextProperty *)*((_QWORD *)this + 5);
    if (v8)
    {
      v9 = SnippetUI::TextProperty::ByteSizeLong(v8);
      v2 = (const google::protobuf::UnknownFieldSet *)&v9[(_QWORD)v2
                                                        + 1
                                                        + ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6)];
    }
  }
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::KeyValue_Standard_Pair *)((char *)this + 8), v2, (_DWORD *)this + 12);
  *((_DWORD *)this + 12) = (_DWORD)v2;
  return (char *)v2;
}

uint64_t SnippetUI::KeyValue_Standard_Pair::GetCachedSize(SnippetUI::KeyValue_Standard_Pair *this)
{
  return *((unsigned int *)this + 12);
}

google::protobuf::internal *SnippetUI::KeyValue_Standard_Pair::_InternalParse(SnippetUI::KeyValue_Standard_Pair *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  unsigned int *v5;
  uint64_t *v6;
  google::protobuf::internal::ParseContext *v7;
  google::protobuf::internal *TagFallback;
  char *v9;
  BOOL v11;
  char *v12;
  char *v13;
  google::protobuf::internal *v14;
  int *v15;
  uint64_t v16;
  int v17;
  SnippetUI::TextProperty *v18;
  uint64_t v19;
  uint64_t v20;
  SnippetUI::TextProperty *v21;
  google::protobuf::internal *v23;

  v23 = a2;
  v5 = (unsigned int *)((char *)this + 16);
  v6 = (uint64_t *)((char *)this + 8);
  while ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v23, *((_DWORD *)a3 + 23)) & 1) == 0)
  {
    TagFallback = (google::protobuf::internal *)((char *)v23 + 1);
    v9 = (char *)*(unsigned __int8 *)v23;
    if ((*(char *)v23 & 0x80000000) == 0)
      goto LABEL_6;
    v9 = (char *)(v9 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v23 + 2);
LABEL_6:
      v23 = TagFallback;
      goto LABEL_7;
    }
    TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v23, v9);
    v23 = TagFallback;
    if (!TagFallback)
      return TagFallback;
LABEL_7:
    if (v9 >> 3 == 2)
    {
      if (v9 != 18)
        goto LABEL_12;
      v13 = (char *)TagFallback - 1;
LABEL_19:
      v14 = (google::protobuf::internal *)(v13 + 1);
      v23 = (google::protobuf::internal *)(v13 + 1);
      v15 = (int *)*((_QWORD *)this + 4);
      if (v15)
      {
        v16 = *((int *)this + 6);
        v17 = *v15;
        if ((int)v16 < *v15)
        {
          *((_DWORD *)this + 6) = v16 + 1;
          v18 = *(SnippetUI::TextProperty **)&v15[2 * v16 + 2];
          goto LABEL_26;
        }
        if (v17 == *((_DWORD *)this + 7))
        {
LABEL_24:
          google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v5, v17 + 1);
          v15 = (int *)*((_QWORD *)this + 4);
          v17 = *v15;
        }
        *v15 = v17 + 1;
        v18 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(*((google::protobuf::internal::ArenaImpl **)this
                                                                                   + 2));
        v19 = *((_QWORD *)this + 4);
        v20 = *((int *)this + 6);
        *((_DWORD *)this + 6) = v20 + 1;
        *(_QWORD *)(v19 + 8 * v20 + 8) = v18;
        v14 = v23;
LABEL_26:
        v13 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::TextProperty>(a3, v18, v14);
        v23 = (google::protobuf::internal *)v13;
        if (!v13)
          return 0;
        if (*(_QWORD *)a3 <= (unint64_t)v13 || *v13 != 18)
          continue;
        goto LABEL_19;
      }
      v17 = *((_DWORD *)this + 7);
      goto LABEL_24;
    }
    if (v9 >> 3 == 1 && v9 == 10)
    {
      v21 = (SnippetUI::TextProperty *)*((_QWORD *)this + 5);
      if (!v21)
      {
        v21 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 5) = v21;
        TagFallback = v23;
      }
      v12 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::TextProperty>(a3, v21, TagFallback);
      goto LABEL_33;
    }
LABEL_12:
    if ((_DWORD)v9)
      v11 = (v9 & 7) == 4;
    else
      v11 = 1;
    if (v11)
    {
      *((_DWORD *)a3 + 20) = (_DWORD)v9 - 1;
      return TagFallback;
    }
    v12 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v9, v6, TagFallback, a3, v7);
LABEL_33:
    v23 = (google::protobuf::internal *)v12;
    if (!v12)
      return 0;
  }
  return v23;
}

const google::protobuf::UnknownFieldSet *SnippetUI::KeyValue_Standard_Pair::InternalSerializeWithCachedSizesToArray(SnippetUI::KeyValue_Standard_Pair *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  char *v5;
  SnippetUI::TextProperty *v7;
  unsigned int v8;
  google::protobuf::UnknownFieldSet *v9;
  unsigned int v10;
  _BYTE *v11;
  _BYTE *v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  int v16;
  std::string *v17;
  std::string *v18;
  SnippetUI::TextProperty *v19;
  unsigned int v20;
  google::protobuf::UnknownFieldSet *v21;
  unsigned int v22;
  _BYTE *v23;
  _BYTE *v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  char v29;
  std::string v30[2];

  v5 = (char *)a2;
  if (this != (SnippetUI::KeyValue_Standard_Pair *)&SnippetUI::_KeyValue_Standard_Pair_default_instance_)
  {
    v7 = (SnippetUI::TextProperty *)*((_QWORD *)this + 5);
    if (v7)
    {
      if (*(_QWORD *)a3 <= (unint64_t)a2)
      {
        v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
        v7 = (SnippetUI::TextProperty *)*((_QWORD *)this + 5);
      }
      *v5 = 10;
      v8 = *((_DWORD *)v7 + 15);
      if (v8 > 0x7F)
      {
        v5[1] = v8 | 0x80;
        v10 = v8 >> 7;
        if (v8 >> 14)
        {
          v11 = v5 + 2;
          do
          {
            v12 = v11;
            *v11++ = v10 | 0x80;
            v13 = v10 >> 7;
            v14 = v10 >> 14;
            v10 >>= 7;
          }
          while (v14);
          v9 = (google::protobuf::UnknownFieldSet *)(v12 + 2);
          *v11 = v13;
        }
        else
        {
          v5[2] = v10;
          v9 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
        }
      }
      else
      {
        v5[1] = v8;
        v9 = (google::protobuf::UnknownFieldSet *)(v5 + 2);
      }
      v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v7, v9, a3, a4);
    }
  }
  v15 = *((_DWORD *)this + 6);
  if (v15)
  {
    v16 = 0;
    while ((unint64_t)v5 < *(_QWORD *)a3)
    {
      if (v16 < 0)
        goto LABEL_17;
LABEL_18:
      if (*((_DWORD *)this + 6) <= v16)
      {
        google::protobuf::internal::LogMessage::LogMessage((uint64_t)v30, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1539);
        v18 = google::protobuf::internal::LogMessage::operator<<(v30, "CHECK failed: (index) < (current_size_): ");
        google::protobuf::internal::LogFinisher::operator=((int)&v29, (const char **)&v18->__r_.__value_.__l.__data_);
        google::protobuf::internal::LogMessage::~LogMessage((void **)&v30[0].__r_.__value_.__l.__data_);
      }
      v19 = *(SnippetUI::TextProperty **)(*((_QWORD *)this + 4) + 8 * v16 + 8);
      *v5 = 18;
      v20 = *((_DWORD *)v19 + 15);
      if (v20 > 0x7F)
      {
        v5[1] = v20 | 0x80;
        v22 = v20 >> 7;
        if (v20 >> 14)
        {
          v23 = v5 + 2;
          do
          {
            v24 = v23;
            *v23++ = v22 | 0x80;
            v25 = v22 >> 7;
            v26 = v22 >> 14;
            v22 >>= 7;
          }
          while (v26);
          v21 = (google::protobuf::UnknownFieldSet *)(v24 + 2);
          *v23 = v25;
        }
        else
        {
          v5[2] = v22;
          v21 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
        }
      }
      else
      {
        v5[1] = v20;
        v21 = (google::protobuf::UnknownFieldSet *)(v5 + 2);
      }
      v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v19, v21, a3, a4);
      if (++v16 == v15)
        goto LABEL_31;
    }
    v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    if ((v16 & 0x80000000) == 0)
      goto LABEL_18;
LABEL_17:
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v30, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1538);
    v17 = google::protobuf::internal::LogMessage::operator<<(v30, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v29, (const char **)&v17->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v30[0].__r_.__value_.__l.__data_);
    goto LABEL_18;
  }
LABEL_31:
  v27 = *((_QWORD *)this + 1);
  if ((v27 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v27 & 0xFFFFFFFFFFFFFFFELL), (const google::protobuf::UnknownFieldSet *)v5, a3, a4);
  else
    return (const google::protobuf::UnknownFieldSet *)v5;
}

void sub_1BF8D91D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void SnippetUI::KeyValue_Standard_Pair::CopyFrom(int **this, int **a2)
{
  if (a2 != this)
  {
    SnippetUI::KeyValue_Standard_Pair::Clear((SnippetUI::KeyValue_Standard_Pair *)this);
    SnippetUI::KeyValue_Standard_Pair::MergeFrom(this, a2);
  }
}

{
  if (a2 != this)
  {
    SnippetUI::KeyValue_Standard_Pair::Clear((SnippetUI::KeyValue_Standard_Pair *)this);
    SnippetUI::KeyValue_Standard_Pair::MergeFrom(this, a2);
  }
}

void SnippetUI::KeyValue_Standard_Pair::MergeFrom(int **this, int **lpsrc)
{
  std::string *v4;
  int **v5;
  google::protobuf::Message *v6;
  char v7;
  std::string v8[2];

  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/KeyValue.pb.cc", 306);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5)
    SnippetUI::KeyValue_Standard_Pair::MergeFrom(this, v5);
  else
    google::protobuf::internal::ReflectionOps::Merge((google::protobuf::internal::ReflectionOps *)lpsrc, (const google::protobuf::Message *)this, v6);
}

void sub_1BF8D92D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::KeyValue_Standard_Pair::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 48) = a2;
  return this;
}

uint64_t SnippetUI::KeyValue_Standard_Pair::GetMetadata(SnippetUI::KeyValue_Standard_Pair *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_KeyValue_2eproto);
  return file_level_metadata_KeyValue_2eproto;
}

void *SnippetUI::KeyValue_Standard_Pair::default_instance(SnippetUI::KeyValue_Standard_Pair *this)
{
  if (atomic_load(scc_info_KeyValue_Standard_Pair_KeyValue_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_KeyValue_Standard_Pair_KeyValue_2eproto);
  return &SnippetUI::_KeyValue_Standard_Pair_default_instance_;
}

void SnippetUI::KeyValue_Standard_Pair::MergeFrom(int **this, int **a2)
{
  std::string *v4;
  unint64_t v5;
  int **v6;
  int **v7;
  int **v8;
  char v9;
  std::string v10[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/KeyValue.pb.cc", 321);
    v4 = google::protobuf::internal::LogMessage::operator<<(v10, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v9, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v10[0].__r_.__value_.__l.__data_);
  }
  v5 = (unint64_t)a2[1];
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((google::protobuf::internal::InternalMetadataWithArena *)(this + 1), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<SnippetUI::TextProperty>::TypeHandler>(this + 2, (uint64_t)(a2 + 2));
  if (a2 != (int **)&SnippetUI::_KeyValue_Standard_Pair_default_instance_)
  {
    v6 = (int **)a2[5];
    if (v6)
    {
      v7 = (int **)this[5];
      if (!v7)
      {
        v7 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        this[5] = (int *)v7;
        v6 = (int **)a2[5];
      }
      if (v6)
        v8 = v6;
      else
        v8 = (int **)&SnippetUI::_TextProperty_default_instance_;
      SnippetUI::TextProperty::MergeFrom(v7, v8);
    }
  }
}

void sub_1BF8D941C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<SnippetUI::TextProperty>::TypeHandler>(int **this, uint64_t a2)
{
  std::string *v4;
  int v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int ***v13;
  int ***v14;
  int **v15;
  int **v16;
  int **v17;
  google::protobuf::internal::ArenaImpl *v18;
  int v19;
  uint64_t v20;
  int ***v21;
  int ***v22;
  int **v23;
  int **v24;
  int v25;
  int *v26;
  char v27;
  std::string v28[2];

  if ((int **)a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1632);
    v4 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
  }
  v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    v6 = *(_QWORD *)(a2 + 16);
    v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)this, *(_DWORD *)(a2 + 8));
    v8 = v7;
    v9 = *this[2];
    v10 = *((int *)this + 2);
    v11 = v9 - v10;
    if ((int)v9 - (int)v10 >= v5)
      v12 = v5;
    else
      v12 = v11;
    if ((int)v12 >= 1)
    {
      v13 = (int ***)(v6 + 8);
      v14 = (int ***)v7;
      do
      {
        v16 = *v13++;
        v15 = v16;
        v17 = *v14++;
        google::protobuf::internal::GenericTypeHandler<SnippetUI::TextProperty>::Merge(v15, v17);
        --v12;
      }
      while (v12);
    }
    if (v11 < v5)
    {
      v18 = (google::protobuf::internal::ArenaImpl *)*this;
      v19 = v10 + v5 - v9;
      v20 = 8 * v9 - 8 * v10;
      v21 = (int ***)((char *)v8 + v20);
      v22 = (int ***)(v20 + v6 + 8);
      do
      {
        v23 = *v22++;
        v24 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(v18);
        google::protobuf::internal::GenericTypeHandler<SnippetUI::TextProperty>::Merge(v23, v24);
        *v21++ = v24;
        --v19;
      }
      while (v19);
    }
    v25 = *((_DWORD *)this + 2) + v5;
    *((_DWORD *)this + 2) = v25;
    v26 = this[2];
    if (*v26 < v25)
      *v26 = v25;
  }
}

void sub_1BF8D9588(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::GenericTypeHandler<SnippetUI::TextProperty>::Merge(int **a1, int **a2)
{
  SnippetUI::TextProperty::MergeFrom(a2, a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::TextProperty>::TypeHandler>(uint64_t a1)
{
  uint64_t v1;
  SnippetUI::TextProperty **v3;
  SnippetUI::TextProperty *v4;
  std::string *v5;
  char v6;
  std::string v7[2];

  v1 = *(unsigned int *)(a1 + 8);
  if ((v1 & 0x80000000) != 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1613);
    v5 = google::protobuf::internal::LogMessage::operator<<(v7, "CHECK failed: (n) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v6, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v7[0].__r_.__value_.__l.__data_);
  }
  else if ((_DWORD)v1)
  {
    v3 = (SnippetUI::TextProperty **)(*(_QWORD *)(a1 + 16) + 8);
    do
    {
      v4 = *v3++;
      SnippetUI::TextProperty::Clear(v4);
      --v1;
    }
    while (v1);
    *(_DWORD *)(a1 + 8) = 0;
  }
}

void sub_1BF8D9644(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

SnippetUI::KeyValue_Standard_Pair *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::KeyValue_Standard_Pair>(google::protobuf::internal::ArenaImpl *this)
{
  SnippetUI::KeyValue_Standard_Pair *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (SnippetUI::KeyValue_Standard_Pair *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x38uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::KeyValue_Standard_Pair>);
    SnippetUI::KeyValue_Standard_Pair::KeyValue_Standard_Pair(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (SnippetUI::KeyValue_Standard_Pair *)operator new();
    SnippetUI::KeyValue_Standard_Pair::KeyValue_Standard_Pair(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_1BF8D96E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D890](v1, 0x10A1C40B18DE219);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::KeyValue_Standard_Pair>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

SnippetUI::KeyValue_Standard *SnippetUI::KeyValue_Standard::KeyValue_Standard(SnippetUI::KeyValue_Standard *this)
{
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_QWORD *)this = &off_1E792C0E8;
  *((_DWORD *)this + 12) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  if (atomic_load(scc_info_KeyValue_Standard_KeyValue_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_KeyValue_Standard_KeyValue_2eproto);
  *((_QWORD *)this + 5) = &google::protobuf::internal::fixed_address_empty_string;
  return this;
}

void sub_1BF8D97E4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t *v2;

  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((google::protobuf::internal::RepeatedPtrFieldBase *)(v1 + 16));
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v2);
  _Unwind_Resume(a1);
}

void SnippetUI::KeyValue_Standard::~KeyValue_Standard(SnippetUI::KeyValue_Standard *this)
{
  SnippetUI::KeyValue_Standard::~KeyValue_Standard(this);
  JUMPOUT(0x1C3B8D890);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_1E792C0E8;
  v2 = *((_QWORD *)this + 5);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x1C3B8D890](v2, 0x1012C40EC159624);
  }
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((SnippetUI::KeyValue_Standard *)((char *)this + 16));
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

SnippetUI::KeyValue_Standard *SnippetUI::KeyValue_Standard::New(SnippetUI::KeyValue_Standard *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::KeyValue_Standard>(0);
}

SnippetUI::KeyValue_Standard *SnippetUI::KeyValue_Standard::New(SnippetUI::KeyValue_Standard *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::KeyValue_Standard>(a2);
}

void SnippetUI::KeyValue_Standard::Clear(SnippetUI::KeyValue_Standard *this)
{
  uint64_t v2;
  SnippetUI::KeyValue_Standard_Pair **v3;
  SnippetUI::KeyValue_Standard_Pair *v4;
  std::string *v5;
  uint64_t v6;
  google::protobuf::internal::InternalMetadataWithArena *v7;
  char v8;
  char v9;
  std::string v10[2];

  v2 = *((unsigned int *)this + 6);
  if ((v2 & 0x80000000) != 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1613);
    v5 = google::protobuf::internal::LogMessage::operator<<(v10, "CHECK failed: (n) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v9, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v10[0].__r_.__value_.__l.__data_);
  }
  else if ((_DWORD)v2)
  {
    v3 = (SnippetUI::KeyValue_Standard_Pair **)(*((_QWORD *)this + 4) + 8);
    do
    {
      v4 = *v3++;
      SnippetUI::KeyValue_Standard_Pair::Clear(v4);
      --v2;
    }
    while (v2);
    *((_DWORD *)this + 6) = 0;
  }
  v6 = *((_QWORD *)this + 5);
  if ((uint64_t *)v6 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v6 + 23) < 0)
    {
      **(_BYTE **)v6 = 0;
      *(_QWORD *)(v6 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v6 = 0;
      *(_BYTE *)(v6 + 23) = 0;
    }
  }
  v8 = *((_BYTE *)this + 8);
  v7 = (SnippetUI::KeyValue_Standard *)((char *)this + 8);
  if ((v8 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v7);
}

void sub_1BF8D9920(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::KeyValue_Standard::IsInitialized(SnippetUI::KeyValue_Standard *this)
{
  return 1;
}

char *SnippetUI::KeyValue_Standard::ByteSizeLong(SnippetUI::KeyValue_Standard *this)
{
  const google::protobuf::UnknownFieldSet *v2;
  uint64_t v3;
  SnippetUI::KeyValue_Standard_Pair **v4;
  uint64_t v5;
  SnippetUI::KeyValue_Standard_Pair *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = (const google::protobuf::UnknownFieldSet *)*((int *)this + 6);
  v3 = *((_QWORD *)this + 4);
  if (v3)
    v4 = (SnippetUI::KeyValue_Standard_Pair **)(v3 + 8);
  else
    v4 = 0;
  if ((_DWORD)v2)
  {
    v5 = 8 * (_QWORD)v2;
    do
    {
      v6 = *v4++;
      v7 = SnippetUI::KeyValue_Standard_Pair::ByteSizeLong(v6);
      v2 = (const google::protobuf::UnknownFieldSet *)((char *)v2
                                                     + (_QWORD)v7
                                                     + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6));
      v5 -= 8;
    }
    while (v5);
  }
  else
  {
    v2 = 0;
  }
  v8 = *((_QWORD *)this + 5);
  v9 = *(unsigned __int8 *)(v8 + 23);
  if (*(char *)(v8 + 23) < 0)
  {
    if (!*(_QWORD *)(v8 + 8))
      goto LABEL_14;
  }
  else if (!*(_BYTE *)(v8 + 23))
  {
    goto LABEL_14;
  }
  v10 = *(_QWORD *)(v8 + 8);
  if ((v9 & 0x80u) == 0)
    v10 = v9;
  v2 = (const google::protobuf::UnknownFieldSet *)((char *)v2 + v10 + ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_14:
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::KeyValue_Standard *)((char *)this + 8), v2, (_DWORD *)this + 12);
  *((_DWORD *)this + 12) = (_DWORD)v2;
  return (char *)v2;
}

uint64_t SnippetUI::KeyValue_Standard::GetCachedSize(SnippetUI::KeyValue_Standard *this)
{
  return *((unsigned int *)this + 12);
}

google::protobuf::internal *SnippetUI::KeyValue_Standard::_InternalParse(SnippetUI::KeyValue_Standard *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  std::string **v5;
  unsigned int *v6;
  uint64_t *v7;
  google::protobuf::internal::ParseContext *v8;
  google::protobuf::internal *TagFallback;
  char *v10;
  BOOL v12;
  char *v13;
  std::string *v14;
  google::protobuf::internal *v15;
  google::protobuf::internal *v16;
  int *v17;
  uint64_t v18;
  int v19;
  SnippetUI::KeyValue_Standard_Pair *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  char *v24;
  char *SizeFallback;
  unsigned int v26;
  int v27;
  int v28;
  BOOL v29;
  int v30;
  int v31;
  unint64_t v32;
  google::protobuf::internal *v34;

  v34 = a2;
  v5 = (std::string **)((char *)this + 40);
  v6 = (unsigned int *)((char *)this + 16);
  v7 = (uint64_t *)((char *)this + 8);
  do
  {
LABEL_2:
    if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v34, *((_DWORD *)a3 + 23)) & 1) != 0)
      return v34;
    TagFallback = (google::protobuf::internal *)((char *)v34 + 1);
    v10 = (char *)*(unsigned __int8 *)v34;
    if ((*(char *)v34 & 0x80000000) == 0)
      goto LABEL_6;
    v10 = (char *)(v10 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v34 + 2);
LABEL_6:
      v34 = TagFallback;
      goto LABEL_7;
    }
    TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v34, v10);
    v34 = TagFallback;
    if (!TagFallback)
      return TagFallback;
LABEL_7:
    if (v10 >> 3 != 2)
    {
      if (v10 >> 3 != 1 || v10 != 10)
        goto LABEL_12;
      v15 = (google::protobuf::internal *)((char *)TagFallback - 1);
      while (1)
      {
        v16 = (google::protobuf::internal *)((char *)v15 + 1);
        v34 = v16;
        v17 = (int *)*((_QWORD *)this + 4);
        if (!v17)
          break;
        v18 = *((int *)this + 6);
        v19 = *v17;
        if ((int)v18 < *v17)
        {
          *((_DWORD *)this + 6) = v18 + 1;
          v20 = *(SnippetUI::KeyValue_Standard_Pair **)&v17[2 * v18 + 2];
          goto LABEL_31;
        }
        if (v19 == *((_DWORD *)this + 7))
          goto LABEL_29;
LABEL_30:
        *v17 = v19 + 1;
        v20 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::KeyValue_Standard_Pair>(*((google::protobuf::internal::ArenaImpl **)this
                                                                                             + 2));
        v21 = *((_QWORD *)this + 4);
        v22 = *((int *)this + 6);
        *((_DWORD *)this + 6) = v22 + 1;
        *(_QWORD *)(v21 + 8 * v22 + 8) = v20;
        v16 = v34;
LABEL_31:
        v23 = *(unsigned __int8 *)v16;
        if (*(char *)v16 < 0)
        {
          SizeFallback = google::protobuf::internal::ReadSizeFallback(v16, (const char *)*(unsigned __int8 *)v16);
          if (!SizeFallback)
            return 0;
          v24 = SizeFallback;
          v23 = v26;
        }
        else
        {
          v24 = (char *)v16 + 1;
        }
        v27 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v24, v23);
        v28 = *((_DWORD *)a3 + 22);
        v29 = __OFSUB__(v28--, 1);
        *((_DWORD *)a3 + 22) = v28;
        if (v28 < 0 != v29)
          return 0;
        v30 = v27;
        v15 = SnippetUI::KeyValue_Standard_Pair::_InternalParse(v20, (google::protobuf::internal *)v24, a3);
        if (!v15)
          return 0;
        ++*((_DWORD *)a3 + 22);
        if (*((_DWORD *)a3 + 20))
          return 0;
        v31 = *((_DWORD *)a3 + 7) + v30;
        *((_DWORD *)a3 + 7) = v31;
        v32 = *((_QWORD *)a3 + 1) + (v31 & (v31 >> 31));
        *(_QWORD *)a3 = v32;
        v34 = v15;
        if (v32 <= (unint64_t)v15 || *(_BYTE *)v15 != 10)
          goto LABEL_2;
      }
      v19 = *((_DWORD *)this + 7);
LABEL_29:
      google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v6, v19 + 1);
      v17 = (int *)*((_QWORD *)this + 4);
      v19 = *v17;
      goto LABEL_30;
    }
    if (v10 == 18)
    {
      v14 = *v5;
      if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      {
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        v14 = *v5;
        TagFallback = v34;
      }
      v13 = google::protobuf::internal::InlineGreedyStringParserUTF8(v14, (std::string::value_type *)TagFallback, (uint64_t)a3, (google::protobuf::internal *)"SnippetUI.KeyValue_Standard.component_name");
      goto LABEL_21;
    }
LABEL_12:
    if ((_DWORD)v10)
      v12 = (v10 & 7) == 4;
    else
      v12 = 1;
    if (v12)
    {
      *((_DWORD *)a3 + 20) = (_DWORD)v10 - 1;
      return TagFallback;
    }
    v13 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v10, v7, TagFallback, a3, v8);
LABEL_21:
    v34 = (google::protobuf::internal *)v13;
  }
  while (v13);
  return 0;
}

const google::protobuf::UnknownFieldSet *SnippetUI::KeyValue_Standard::InternalSerializeWithCachedSizesToArray(SnippetUI::KeyValue_Standard *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  int v7;
  int v8;
  std::string *v9;
  std::string *v10;
  SnippetUI::KeyValue_Standard_Pair *v11;
  unsigned int v12;
  google::protobuf::UnknownFieldSet *v13;
  unsigned int v14;
  _BYTE *v15;
  _BYTE *v16;
  unsigned int v17;
  unsigned int v18;
  google::protobuf::internal *v19;
  const char *v20;
  uint64_t v21;
  char v23;
  std::string v24[2];

  v7 = *((_DWORD *)this + 6);
  if (v7)
  {
    v8 = 0;
    while ((unint64_t)a2 < *(_QWORD *)a3)
    {
      if (v8 < 0)
        goto LABEL_5;
LABEL_6:
      if (*((_DWORD *)this + 6) <= v8)
      {
        google::protobuf::internal::LogMessage::LogMessage((uint64_t)v24, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1539);
        v10 = google::protobuf::internal::LogMessage::operator<<(v24, "CHECK failed: (index) < (current_size_): ");
        google::protobuf::internal::LogFinisher::operator=((int)&v23, (const char **)&v10->__r_.__value_.__l.__data_);
        google::protobuf::internal::LogMessage::~LogMessage((void **)&v24[0].__r_.__value_.__l.__data_);
      }
      v11 = *(SnippetUI::KeyValue_Standard_Pair **)(*((_QWORD *)this + 4) + 8 * v8 + 8);
      *(_BYTE *)a2 = 10;
      v12 = *((_DWORD *)v11 + 12);
      if (v12 > 0x7F)
      {
        *((_BYTE *)a2 + 1) = v12 | 0x80;
        v14 = v12 >> 7;
        if (v12 >> 14)
        {
          v15 = (char *)a2 + 2;
          do
          {
            v16 = v15;
            *v15++ = v14 | 0x80;
            v17 = v14 >> 7;
            v18 = v14 >> 14;
            v14 >>= 7;
          }
          while (v18);
          v13 = (google::protobuf::UnknownFieldSet *)(v16 + 2);
          *v15 = v17;
        }
        else
        {
          *((_BYTE *)a2 + 2) = v14;
          v13 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 3);
        }
      }
      else
      {
        *((_BYTE *)a2 + 1) = v12;
        v13 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 2);
      }
      a2 = SnippetUI::KeyValue_Standard_Pair::InternalSerializeWithCachedSizesToArray(v11, v13, a3, a4);
      if (++v8 == v7)
        goto LABEL_19;
    }
    a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_6;
LABEL_5:
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v24, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1538);
    v9 = google::protobuf::internal::LogMessage::operator<<(v24, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v23, (const char **)&v9->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v24[0].__r_.__value_.__l.__data_);
    goto LABEL_6;
  }
LABEL_19:
  v19 = (google::protobuf::internal *)*((_QWORD *)this + 5);
  if (*((char *)v19 + 23) < 0)
  {
    v20 = (const char *)*((_QWORD *)v19 + 1);
    if (!v20)
      goto LABEL_25;
    v19 = *(google::protobuf::internal **)v19;
    goto LABEL_24;
  }
  v20 = (const char *)*((unsigned __int8 *)v19 + 23);
  if (*((_BYTE *)v19 + 23))
  {
LABEL_24:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v19, v20, 1, (google::protobuf::internal *)"SnippetUI.KeyValue_Standard.component_name");
    a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 2, *((_QWORD *)this + 5), (char *)a2);
  }
LABEL_25:
  v21 = *((_QWORD *)this + 1);
  if ((v21 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v21 & 0xFFFFFFFFFFFFFFFELL), a2, a3, a4);
  else
    return a2;
}

void sub_1BF8D9F04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void SnippetUI::KeyValue_Standard::CopyFrom(int **this, int **a2)
{
  if (a2 != this)
  {
    SnippetUI::KeyValue_Standard::Clear((SnippetUI::KeyValue_Standard *)this);
    SnippetUI::KeyValue_Standard::MergeFrom(this, a2);
  }
}

{
  if (a2 != this)
  {
    SnippetUI::KeyValue_Standard::Clear((SnippetUI::KeyValue_Standard *)this);
    SnippetUI::KeyValue_Standard::MergeFrom(this, a2);
  }
}

void SnippetUI::KeyValue_Standard::MergeFrom(int **this, int **lpsrc)
{
  std::string *v4;
  int **v5;
  google::protobuf::Message *v6;
  char v7;
  std::string v8[2];

  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/KeyValue.pb.cc", 532);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5)
    SnippetUI::KeyValue_Standard::MergeFrom(this, v5);
  else
    google::protobuf::internal::ReflectionOps::Merge((google::protobuf::internal::ReflectionOps *)lpsrc, (const google::protobuf::Message *)this, v6);
}

void sub_1BF8DA004(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::KeyValue_Standard::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 48) = a2;
  return this;
}

uint64_t SnippetUI::KeyValue_Standard::GetMetadata(SnippetUI::KeyValue_Standard *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_KeyValue_2eproto);
  return qword_1EF581768;
}

void *SnippetUI::KeyValue_Standard::default_instance(SnippetUI::KeyValue_Standard *this)
{
  if (atomic_load(scc_info_KeyValue_Standard_KeyValue_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_KeyValue_Standard_KeyValue_2eproto);
  return &SnippetUI::_KeyValue_Standard_default_instance_;
}

void SnippetUI::KeyValue_Standard::MergeFrom(int **this, int **a2)
{
  std::string *v4;
  unint64_t v5;
  uint64_t v6;
  std::string *v7;
  std::string **v8;
  std::string *v9;
  char v10;
  std::string v11[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/KeyValue.pb.cc", 547);
    v4 = google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v10, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v11[0].__r_.__value_.__l.__data_);
  }
  v5 = (unint64_t)a2[1];
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((google::protobuf::internal::InternalMetadataWithArena *)(this + 1), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<SnippetUI::KeyValue_Standard_Pair>::TypeHandler>(this + 2, (uint64_t)(a2 + 2));
  v6 = (uint64_t)a2[5];
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(_QWORD *)(v6 + 8))
      return;
  }
  else if (!*(_BYTE *)(v6 + 23))
  {
    return;
  }
  v9 = (std::string *)this[5];
  v8 = (std::string **)(this + 5);
  v7 = v9;
  if (v9 != (std::string *)v6)
  {
    if (v7 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v8, v6);
    else
      std::string::operator=(v7, (const std::string *)v6);
  }
}

void sub_1BF8DA15C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<SnippetUI::KeyValue_Standard_Pair>::TypeHandler>(int **this, uint64_t a2)
{
  std::string *v4;
  int v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int ***v13;
  int ***v14;
  int **v15;
  int **v16;
  int **v17;
  google::protobuf::internal::ArenaImpl *v18;
  int v19;
  uint64_t v20;
  int ***v21;
  int ***v22;
  int **v23;
  int **v24;
  int v25;
  int *v26;
  char v27;
  std::string v28[2];

  if ((int **)a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1632);
    v4 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
  }
  v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    v6 = *(_QWORD *)(a2 + 16);
    v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)this, *(_DWORD *)(a2 + 8));
    v8 = v7;
    v9 = *this[2];
    v10 = *((int *)this + 2);
    v11 = v9 - v10;
    if ((int)v9 - (int)v10 >= v5)
      v12 = v5;
    else
      v12 = v11;
    if ((int)v12 >= 1)
    {
      v13 = (int ***)(v6 + 8);
      v14 = (int ***)v7;
      do
      {
        v16 = *v13++;
        v15 = v16;
        v17 = *v14++;
        google::protobuf::internal::GenericTypeHandler<SnippetUI::KeyValue_Standard_Pair>::Merge(v15, v17);
        --v12;
      }
      while (v12);
    }
    if (v11 < v5)
    {
      v18 = (google::protobuf::internal::ArenaImpl *)*this;
      v19 = v10 + v5 - v9;
      v20 = 8 * v9 - 8 * v10;
      v21 = (int ***)((char *)v8 + v20);
      v22 = (int ***)(v20 + v6 + 8);
      do
      {
        v23 = *v22++;
        v24 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::KeyValue_Standard_Pair>(v18);
        google::protobuf::internal::GenericTypeHandler<SnippetUI::KeyValue_Standard_Pair>::Merge(v23, v24);
        *v21++ = v24;
        --v19;
      }
      while (v19);
    }
    v25 = *((_DWORD *)this + 2) + v5;
    *((_DWORD *)this + 2) = v25;
    v26 = this[2];
    if (*v26 < v25)
      *v26 = v25;
  }
}

void sub_1BF8DA2C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::GenericTypeHandler<SnippetUI::KeyValue_Standard_Pair>::Merge(int **a1, int **this)
{
  SnippetUI::KeyValue_Standard_Pair::MergeFrom(this, a1);
}

SnippetUI::KeyValue_Standard *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::KeyValue_Standard>(google::protobuf::internal::ArenaImpl *this)
{
  SnippetUI::KeyValue_Standard *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (SnippetUI::KeyValue_Standard *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x38uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::KeyValue_Standard>);
    SnippetUI::KeyValue_Standard::KeyValue_Standard(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (SnippetUI::KeyValue_Standard *)operator new();
    SnippetUI::KeyValue_Standard::KeyValue_Standard(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_1BF8DA374(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D890](v1, 0x10A1C40B18DE219);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::KeyValue_Standard>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

void SnippetUI::KeyValue_Standard_Pair::InitAsDefaultInstance(SnippetUI::KeyValue_Standard_Pair *this)
{
  qword_1EF583EB0 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
}

uint64_t SnippetUI::KeyValue_Standard_Pair::_Internal::key(SnippetUI::KeyValue_Standard_Pair::_Internal *this, const SnippetUI::KeyValue_Standard_Pair *a2)
{
  return *((_QWORD *)this + 5);
}

uint64_t SnippetUI::KeyValue_Standard_Pair::clear_key(SnippetUI::KeyValue_Standard_Pair *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 5);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 5) = 0;
  return result;
}

void SnippetUI::KeyValue_Standard_Pair::clear_value(SnippetUI::KeyValue_Standard_Pair *this)
{
  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::TextProperty>::TypeHandler>((uint64_t)this + 16);
}

SnippetUI::KeyValue_Standard_Pair *SnippetUI::KeyValue_Standard_Pair::KeyValue_Standard_Pair(SnippetUI::KeyValue_Standard_Pair *this, const SnippetUI::KeyValue_Standard_Pair *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  uint64_t v5;
  SnippetUI::TextProperty *v6;

  *(_QWORD *)this = &off_1E792C028;
  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (SnippetUI::KeyValue_Standard_Pair *)((char *)this + 8);
  *(_OWORD *)((char *)this + 24) = 0u;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<SnippetUI::TextProperty>::TypeHandler>((int **)this + 2, (uint64_t)a2 + 16);
  *((_DWORD *)this + 12) = 0;
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom(v4, (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  v6 = 0;
  if (a2 != (const SnippetUI::KeyValue_Standard_Pair *)&SnippetUI::_KeyValue_Standard_Pair_default_instance_
    && *((_QWORD *)a2 + 5))
  {
    v6 = (SnippetUI::TextProperty *)operator new();
    SnippetUI::TextProperty::TextProperty(v6, *((const SnippetUI::TextProperty **)a2 + 5));
  }
  *((_QWORD *)this + 5) = v6;
  return this;
}

void sub_1BF8DA538(_Unwind_Exception *a1)
{
  uint64_t *v1;
  google::protobuf::internal::RepeatedPtrFieldBase *v2;
  uint64_t v3;

  MEMORY[0x1C3B8D890](v3, 0x10A1C40BEC01B52);
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::KeyValue_Standard_Pair::InternalSwap(SnippetUI::KeyValue_Standard_Pair *this, SnippetUI::KeyValue_Standard_Pair *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  uint64_t v5;
  google::protobuf::UnknownFieldSet *v6;
  uint64_t v7;
  google::protobuf::UnknownFieldSet *v8;

  v4 = (SnippetUI::KeyValue_Standard_Pair *)((char *)this + 8);
  v5 = *((_QWORD *)a2 + 1);
  if ((*((_BYTE *)this + 8) & 1) != 0)
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v6 = v8;
      goto LABEL_6;
    }
  }
  else if ((v5 & 1) == 0)
  {
    goto LABEL_7;
  }
  v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
  google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
LABEL_7:
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((SnippetUI::KeyValue_Standard_Pair *)((char *)this + 16), (SnippetUI::KeyValue_Standard_Pair *)((char *)a2 + 16));
  v7 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v7;
}

SnippetUI::KeyValue_Standard *SnippetUI::KeyValue_Standard::KeyValue_Standard(SnippetUI::KeyValue_Standard *this, const SnippetUI::KeyValue_Standard *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)this = &off_1E792C0E8;
  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (SnippetUI::KeyValue_Standard *)((char *)this + 8);
  *(_OWORD *)((char *)this + 24) = 0u;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<SnippetUI::KeyValue_Standard_Pair>::TypeHandler>((int **)this + 2, (uint64_t)a2 + 16);
  *((_DWORD *)this + 12) = 0;
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom(v4, (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  *((_QWORD *)this + 5) = &google::protobuf::internal::fixed_address_empty_string;
  v6 = *((_QWORD *)a2 + 5);
  if (*(char *)(v6 + 23) < 0)
    v7 = *(_QWORD *)(v6 + 8);
  else
    v7 = *(unsigned __int8 *)(v6 + 23);
  if ((uint64_t *)v6 != &google::protobuf::internal::fixed_address_empty_string && v7 != 0)
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 5, v6);
  return this;
}

void sub_1BF8DA6EC(_Unwind_Exception *a1)
{
  uint64_t *v1;
  google::protobuf::internal::RepeatedPtrFieldBase *v2;

  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

__n128 SnippetUI::KeyValue_Standard::InternalSwap(SnippetUI::KeyValue_Standard *this, SnippetUI::KeyValue_Standard *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  uint64_t v5;
  google::protobuf::UnknownFieldSet *v6;
  __n128 result;
  std::string **v8;
  std::string *v9;
  uint64_t *v10;
  std::string **v11;
  std::string *v12;
  std::string::size_type v13;
  std::string::size_type v14;
  google::protobuf::UnknownFieldSet *v15;

  v4 = (SnippetUI::KeyValue_Standard *)((char *)this + 8);
  v5 = *((_QWORD *)a2 + 1);
  if ((*((_BYTE *)this + 8) & 1) != 0)
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v6 = v15;
      goto LABEL_6;
    }
LABEL_5:
    v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
    google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
    goto LABEL_7;
  }
  if ((v5 & 1) != 0)
    goto LABEL_5;
LABEL_7:
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((SnippetUI::KeyValue_Standard *)((char *)this + 16), (SnippetUI::KeyValue_Standard *)((char *)a2 + 16));
  v10 = (uint64_t *)*((_QWORD *)this + 5);
  v8 = (std::string **)((char *)this + 40);
  v9 = (std::string *)v10;
  v11 = (std::string **)((char *)a2 + 40);
  if (v10 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v11 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      return result;
    google::protobuf::internal::ArenaStringPtr::CreateInstance(v8, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v9 = *v8;
  }
  v12 = *v11;
  if (*v11 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance(v11, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v12 = *v11;
  }
  v13 = v9->__r_.__value_.__r.__words[2];
  result = *(__n128 *)&v9->__r_.__value_.__l.__data_;
  v14 = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v9->__r_.__value_.__r.__words[2] = v14;
  *(__n128 *)&v12->__r_.__value_.__l.__data_ = result;
  v12->__r_.__value_.__r.__words[2] = v13;
  return result;
}

uint64_t siri::dialogengine::LogCurareCATExecution(uint64_t *a1, const std::string::value_type *a2, uint64_t *a3, uint64_t *a4)
{
  void *v8;
  char v9;
  const char *v10;
  void *v11;
  id v12;
  uint64_t *v13;
  void *v14;
  uint64_t *v15;
  void *v16;
  uint64_t *v17;
  void *v18;
  void **v19;
  void *v20;
  void *v21;
  uint64_t *v22;
  void *v23;
  void *v24;
  void *v25;
  id v26;
  void *v27;
  id v28;
  uint64_t v29;
  char *v30;
  std::string *v31;
  __int128 v32;
  int v33;
  const std::string::value_type *v34;
  std::string::size_type v35;
  std::string *v36;
  __int128 v37;
  std::string *v38;
  __int128 v39;
  const std::string::value_type *v40;
  std::string::size_type v41;
  std::string *v42;
  __int128 v43;
  uint64_t v44;
  std::string *v45;
  __int128 v46;
  int v47;
  const std::string::value_type *v48;
  std::string::size_type v49;
  std::string *v50;
  __int128 v51;
  void *v53;
  std::string v54;
  std::string v55;
  std::string v56;
  std::string v57;
  std::string __p;
  __int128 v59;
  int64_t v60;
  id v61;
  void *v62[2];
  char v63;
  _QWORD v64[4];
  _QWORD v65[7];

  v65[4] = *MEMORY[0x1E0C80C00];
  NSUserName();
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v8, "isEqualToString:", CFSTR("mobile"));

  if ((v9 & 1) != 0)
  {
    v11 = (void *)objc_opt_new();
    objc_msgSend(v11, "setDateFormat:", CFSTR("yyyy-MM-dd HH:mm:ss.A-OOOO"));
    objc_msgSend(MEMORY[0x1E0C99D68], "date");
    v53 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "stringFromDate:");
    v12 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    std::string::basic_string[abi:ne180100]<0>(v62, (char *)objc_msgSend(v12, "UTF8String"));

    v64[0] = CFSTR("catId");
    if (*((char *)a1 + 23) >= 0)
      v13 = a1;
    else
      v13 = (uint64_t *)*a1;
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v13);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v65[0] = v14;
    v64[1] = CFSTR("patternId");
    if (*((char *)a4 + 23) >= 0)
      v15 = a4;
    else
      v15 = (uint64_t *)*a4;
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v15);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v65[1] = v16;
    v64[2] = CFSTR("params");
    if (*((char *)a3 + 23) >= 0)
      v17 = a3;
    else
      v17 = (uint64_t *)*a3;
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v17);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    v65[2] = v18;
    v64[3] = CFSTR("catTimeStamp");
    if (v63 >= 0)
      v19 = v62;
    else
      v19 = (void **)v62[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v19);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    v65[3] = v20;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v65, v64, 4);
    v21 = (void *)objc_claimAutoreleasedReturnValue();

    if (a2[23] >= 0)
      v22 = (uint64_t *)a2;
    else
      v22 = *(uint64_t **)a2;
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v22);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    v24 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D20F70]), "initWithStreamId:", CFSTR("DialogEngine"));
    v25 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D20F60]), "initWithContent:interactionId:dataVersion:", v21, v23, 0);
    v61 = 0;
    objc_msgSend(v24, "insert:error:", v25, &v61);
    v26 = v61;
    if (v26)
    {
      v27 = v26;
      objc_msgSend(v26, "localizedFailureReason");
      v28 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      v29 = objc_msgSend(v28, "UTF8String");

      if (v29)
        v30 = (char *)v29;
      else
        v30 = "no localizedFailureReason provided";
      std::string::basic_string[abi:ne180100]<0>(&v59, v30);
      std::operator+<char>();
      v31 = std::string::append(&v54, ", interactionId: ");
      v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
      v55.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v55.__r_.__value_.__l.__data_ = v32;
      v31->__r_.__value_.__l.__size_ = 0;
      v31->__r_.__value_.__r.__words[2] = 0;
      v31->__r_.__value_.__r.__words[0] = 0;
      v33 = a2[23];
      if (v33 >= 0)
        v34 = a2;
      else
        v34 = *(const std::string::value_type **)a2;
      if (v33 >= 0)
        v35 = *((unsigned __int8 *)a2 + 23);
      else
        v35 = *((_QWORD *)a2 + 1);
      v36 = std::string::append(&v55, v34, v35);
      v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
      v56.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v37;
      v36->__r_.__value_.__l.__size_ = 0;
      v36->__r_.__value_.__r.__words[2] = 0;
      v36->__r_.__value_.__r.__words[0] = 0;
      v38 = std::string::append(&v56, ", error: ");
      v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
      v57.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v39;
      v38->__r_.__value_.__l.__size_ = 0;
      v38->__r_.__value_.__r.__words[2] = 0;
      v38->__r_.__value_.__r.__words[0] = 0;
      if (v60 >= 0)
        v40 = (const std::string::value_type *)&v59;
      else
        v40 = (const std::string::value_type *)v59;
      if (v60 >= 0)
        v41 = HIBYTE(v60);
      else
        v41 = *((_QWORD *)&v59 + 1);
      v42 = std::string::append(&v57, v40, v41);
      v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v42->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v43;
      v42->__r_.__value_.__l.__size_ = 0;
      v42->__r_.__value_.__r.__words[2] = 0;
      v42->__r_.__value_.__r.__words[0] = 0;
      siri::dialogengine::Log::LogWithLevel((uint64_t)&__p, 3u);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v57.__r_.__value_.__l.__data_);
      if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v56.__r_.__value_.__l.__data_);
      if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v55.__r_.__value_.__l.__data_);
      if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v54.__r_.__value_.__l.__data_);
      if (SHIBYTE(v60) < 0)
        operator delete((void *)v59);

      v44 = 0;
    }
    else
    {
      std::operator+<char>();
      v45 = std::string::append(&v57, ", interactionId: ");
      v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v45->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v46;
      v45->__r_.__value_.__l.__size_ = 0;
      v45->__r_.__value_.__r.__words[2] = 0;
      v45->__r_.__value_.__r.__words[0] = 0;
      v47 = a2[23];
      if (v47 >= 0)
        v48 = a2;
      else
        v48 = *(const std::string::value_type **)a2;
      if (v47 >= 0)
        v49 = *((unsigned __int8 *)a2 + 23);
      else
        v49 = *((_QWORD *)a2 + 1);
      v50 = std::string::append(&__p, v48, v49);
      v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
      v60 = v50->__r_.__value_.__r.__words[2];
      v59 = v51;
      v50->__r_.__value_.__l.__size_ = 0;
      v50->__r_.__value_.__r.__words[2] = 0;
      v50->__r_.__value_.__r.__words[0] = 0;
      siri::dialogengine::Log::LogWithLevel((uint64_t)&v59, 0);
      if (SHIBYTE(v60) < 0)
        operator delete((void *)v59);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v57.__r_.__value_.__l.__data_);

      v44 = 1;
    }

    if (v63 < 0)
      operator delete(v62[0]);

  }
  else
  {
    siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"FeatureStore operation not permitted as 'root' user.", v10);
    return 0;
  }
  return v44;
}

void sub_1BF8DAD48(_Unwind_Exception *a1, void *exc_buf, uint64_t a3, std::string *a4, std::string *a5, uint64_t a6, std::string *a7, uint64_t a8, std::string *a9, void *exc_bufa, std::string *a11, void *a12, std::string *a13, uint64_t a14, __int128 a15, std::string::size_type a16, uint64_t a17, __int128 __p, std::string::size_type a19, uint64_t a20,__int128 a21,std::string::size_type a22,uint64_t a23,__int128 a24,std::string::size_type a25,uint64_t a26,__int128 a27,std::string::size_type a28,uint64_t a29,__int128 a30,std::string::size_type a31,uint64_t a32,void *__pa,std::string::size_type a34,int a35,__int16 a36,char a37,unsigned __int8 a38)
{
  void *v38;
  void *v39;
  void *v40;
  uint64_t v41;
  id v42;
  void *v43;
  uint64_t v44;
  int v45;
  id v46;
  id v47;
  uint64_t v48;
  char *v49;
  id v50;
  uint64_t v51;
  char *v52;
  std::string *v53;
  __int128 v54;
  int v55;
  const std::string::value_type *v56;
  std::string::size_type v57;
  std::string *v58;
  __int128 v59;
  std::string *v60;
  __int128 v61;
  char v62;
  const std::string::value_type *v63;
  std::string::size_type v64;
  std::string *v65;
  __int128 v66;
  std::string *v67;
  __int128 v68;
  const std::string::value_type *p_pa;
  std::string::size_type v70;
  std::string *v71;
  __int128 v72;

  v45 = (int)exc_buf;
  if (*(char *)(v44 - 201) < 0)
    operator delete(*(void **)(v44 - 224));
  if ((char)a38 < 0)
    operator delete(__pa);
  if (SHIBYTE(a31) < 0)
    operator delete((void *)a30);

  if (v45 == 1)
  {
    v46 = objc_begin_catch(a1);
    objc_msgSend(v46, "name");
    v47 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v48 = objc_msgSend(v47, "UTF8String");
    if (v48)
    {
      objc_msgSend(v46, "name");
      v42 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      v49 = (char *)objc_msgSend(v42, "UTF8String");
    }
    else
    {
      v49 = "no name provided";
    }
    std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v44 - 224), v49);
    if (v48)

    objc_msgSend(v46, "reason");
    v50 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v51 = objc_msgSend(v50, "UTF8String");
    if (v51)
    {
      objc_msgSend(v46, "reason");
      v42 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      v52 = (char *)objc_msgSend(v42, "UTF8String");
    }
    else
    {
      v52 = "no reason provided";
    }
    std::string::basic_string[abi:ne180100]<0>(&__pa, v52);
    if (v51)

    std::operator+<char>();
    v53 = std::string::append((std::string *)&a12, ", interactionId: ");
    v54 = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
    a16 = v53->__r_.__value_.__r.__words[2];
    a15 = v54;
    v53->__r_.__value_.__l.__size_ = 0;
    v53->__r_.__value_.__r.__words[2] = 0;
    v53->__r_.__value_.__r.__words[0] = 0;
    v55 = *(char *)(v41 + 23);
    if (v55 >= 0)
      v56 = (const std::string::value_type *)v41;
    else
      v56 = *(const std::string::value_type **)v41;
    if (v55 >= 0)
      v57 = *(unsigned __int8 *)(v41 + 23);
    else
      v57 = *(_QWORD *)(v41 + 8);
    v58 = std::string::append((std::string *)&a15, v56, v57);
    v59 = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
    a19 = v58->__r_.__value_.__r.__words[2];
    __p = v59;
    v58->__r_.__value_.__l.__size_ = 0;
    v58->__r_.__value_.__r.__words[2] = 0;
    v58->__r_.__value_.__r.__words[0] = 0;
    v60 = std::string::append((std::string *)&__p, ", exception: ");
    v61 = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
    a22 = v60->__r_.__value_.__r.__words[2];
    a21 = v61;
    v60->__r_.__value_.__l.__size_ = 0;
    v60->__r_.__value_.__r.__words[2] = 0;
    v60->__r_.__value_.__r.__words[0] = 0;
    v62 = *(_BYTE *)(v44 - 201);
    if (v62 >= 0)
      v63 = (const std::string::value_type *)(v44 - 224);
    else
      v63 = *(const std::string::value_type **)(v44 - 224);
    if (v62 >= 0)
      v64 = *(unsigned __int8 *)(v44 - 201);
    else
      v64 = *(_QWORD *)(v44 - 216);
    v65 = std::string::append((std::string *)&a21, v63, v64);
    v66 = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
    a25 = v65->__r_.__value_.__r.__words[2];
    a24 = v66;
    v65->__r_.__value_.__l.__size_ = 0;
    v65->__r_.__value_.__r.__words[2] = 0;
    v65->__r_.__value_.__r.__words[0] = 0;
    v67 = std::string::append((std::string *)&a24, " - ");
    v68 = *(_OWORD *)&v67->__r_.__value_.__l.__data_;
    a28 = v67->__r_.__value_.__r.__words[2];
    a27 = v68;
    v67->__r_.__value_.__l.__size_ = 0;
    v67->__r_.__value_.__r.__words[2] = 0;
    v67->__r_.__value_.__r.__words[0] = 0;
    if ((a38 & 0x80u) == 0)
      p_pa = (const std::string::value_type *)&__pa;
    else
      p_pa = (const std::string::value_type *)__pa;
    if ((a38 & 0x80u) == 0)
      v70 = a38;
    else
      v70 = a34;
    v71 = std::string::append((std::string *)&a27, p_pa, v70);
    v72 = *(_OWORD *)&v71->__r_.__value_.__l.__data_;
    a31 = v71->__r_.__value_.__r.__words[2];
    a30 = v72;
    v71->__r_.__value_.__l.__size_ = 0;
    v71->__r_.__value_.__r.__words[2] = 0;
    v71->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Log::LogWithLevel((uint64_t)&a30, 3u);
    if (SHIBYTE(a31) < 0)
      operator delete((void *)a30);
    if (SHIBYTE(a28) < 0)
      operator delete((void *)a27);
    if (SHIBYTE(a25) < 0)
      operator delete((void *)a24);
    if (SHIBYTE(a22) < 0)
      operator delete((void *)a21);
    if (SHIBYTE(a19) < 0)
      operator delete((void *)__p);
    if (SHIBYTE(a16) < 0)
      operator delete((void *)a15);
    if (SHIBYTE(a14) < 0)
      operator delete(a12);
    if ((char)a38 < 0)
      operator delete(__pa);
    if (*(char *)(v44 - 201) < 0)
      operator delete(*(void **)(v44 - 224));

    objc_end_catch();
    JUMPOUT(0x1BF8DACE0);
  }

  if (*(char *)(v44 - 169) < 0)
    operator delete(*(void **)(v44 - 192));

  _Unwind_Resume(a1);
}

void siri::dialogengine::DialogStateUseCaseFromNSDictionary(siri::dialogengine *this@<X0>, _QWORD *a2@<X8>)
{
  siri::dialogengine *v4;
  siri::dialogengine *v5;
  void *v6;
  void *v7;
  double v8;
  double v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t i;
  void *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t j;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  siri::dialogengine *v23;
  uint64_t v24;
  id v25;
  void *v26;
  void *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  void *v31;
  id v32;
  uint64_t v33;
  char *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t k;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  void *v47;
  void *v48;
  char *v49;
  uint64_t v50;
  void *v51;
  void **v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  id obj;
  uint64_t v65;
  void *v66;
  void *v67;
  uint64_t v68;
  void *v69;
  id v70;
  _BYTE __p[24];
  uint64_t v72;
  __int128 v73;
  uint64_t v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  void *v79[2];
  char v80;
  __int128 v81;
  uint64_t v82;
  char *v83;
  char *v84;
  unint64_t v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  uint64_t *v90;
  _QWORD *v91[2];
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  char **v96;
  char *v97[2];
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  char **v102;
  char *v103[2];
  void **v104;
  _BYTE v105[128];
  _BYTE v106[128];
  _BYTE v107[128];
  _BYTE v108[128];
  uint64_t v109;

  v109 = *MEMORY[0x1E0C80C00];
  v4 = this;
  v5 = v4;
  if (v4)
  {
    -[siri::dialogengine objectForKey:](v4, "objectForKey:", CFSTR("count"));
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v56 = v6;
    if (v6)
      v55 = objc_msgSend(v6, "unsignedIntValue");
    else
      v55 = 0;
    -[siri::dialogengine objectForKey:](v5, "objectForKey:", CFSTR("timestamp"));
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v57 = v7;
    if (v7)
    {
      objc_msgSend(v7, "doubleValue");
      v9 = v8;
    }
    else
    {
      v9 = 0.0;
    }
    v103[1] = 0;
    v103[0] = 0;
    v102 = v103;
    -[siri::dialogengine objectForKey:](v5, "objectForKey:", CFSTR("allRandomIds"));
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v58 = v10;
    if (v10)
    {
      v100 = 0u;
      v101 = 0u;
      v98 = 0u;
      v99 = 0u;
      v11 = v10;
      v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v98, v108, 16);
      if (v12)
      {
        v13 = *(_QWORD *)v99;
        do
        {
          for (i = 0; i != v12; ++i)
          {
            if (*(_QWORD *)v99 != v13)
              objc_enumerationMutation(v11);
            v15 = *(void **)(*((_QWORD *)&v98 + 1) + 8 * i);
            if (v15)
            {
              std::string::basic_string[abi:ne180100]<0>(__p, (char *)objc_msgSend(objc_retainAutorelease(v15), "UTF8String"));
              std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)&v102, (const void **)__p, (uint64_t)__p);
              if ((__p[23] & 0x80000000) != 0)
                operator delete(*(void **)__p);
            }
          }
          v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v98, v108, 16);
        }
        while (v12);
      }

    }
    v97[1] = 0;
    v97[0] = 0;
    v96 = v97;
    -[siri::dialogengine objectForKey:](v5, "objectForKey:", CFSTR("lastRandomIds"));
    v59 = (void *)objc_claimAutoreleasedReturnValue();
    if (v59)
    {
      v94 = 0u;
      v95 = 0u;
      v92 = 0u;
      v93 = 0u;
      v16 = v59;
      v17 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v92, v107, 16);
      if (v17)
      {
        v18 = *(_QWORD *)v93;
        do
        {
          for (j = 0; j != v17; ++j)
          {
            if (*(_QWORD *)v93 != v18)
              objc_enumerationMutation(v16);
            v20 = *(void **)(*((_QWORD *)&v92 + 1) + 8 * j);
            if (v20)
            {
              std::string::basic_string[abi:ne180100]<0>(__p, (char *)objc_msgSend(objc_retainAutorelease(v20), "UTF8String"));
              std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)&v96, (const void **)__p, (uint64_t)__p);
              if ((__p[23] & 0x80000000) != 0)
                operator delete(*(void **)__p);
            }
          }
          v17 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v92, v107, 16);
        }
        while (v17);
      }

    }
    v91[0] = 0;
    v91[1] = 0;
    v90 = (uint64_t *)v91;
    v21 = objc_msgSend(CFSTR("grounding_"), "length");
    v88 = 0u;
    v89 = 0u;
    v86 = 0u;
    v87 = 0u;
    -[siri::dialogengine allKeys](v5, "allKeys");
    obj = (id)objc_claimAutoreleasedReturnValue();
    v22 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v86, v106, 16);
    if (v22)
    {
      v68 = *(_QWORD *)v87;
      v23 = v5;
      v60 = v21;
      v61 = a2;
      do
      {
        v24 = 0;
        v62 = v22;
        do
        {
          if (*(_QWORD *)v87 != v68)
            objc_enumerationMutation(obj);
          v70 = *(id *)(*((_QWORD *)&v86 + 1) + 8 * v24);
          if (objc_msgSend(v70, "hasPrefix:", CFSTR("grounding_")))
          {
            v83 = 0;
            v84 = 0;
            v85 = 0;
            v81 = 0uLL;
            v82 = 0;
            objc_msgSend(v70, "substringFromIndex:", v21);
            v25 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
            std::string::basic_string[abi:ne180100]<0>(v79, (char *)objc_msgSend(v25, "UTF8String"));

            -[siri::dialogengine objectForKey:](v5, "objectForKey:", v70);
            v26 = (void *)objc_claimAutoreleasedReturnValue();
            v69 = v26;
            if (v26)
            {
              objc_msgSend(v26, "objectForKey:", CFSTR("count"));
              v27 = (void *)objc_claimAutoreleasedReturnValue();
              v67 = v27;
              if (v27)
                v28 = objc_msgSend(v27, "unsignedIntValue");
              else
                v28 = 0;
              objc_msgSend(v69, "objectForKey:", CFSTR("timestamps"));
              v31 = (void *)objc_claimAutoreleasedReturnValue();
              v65 = v28;
              v66 = v31;
              if (v31)
              {
                v77 = 0u;
                v78 = 0u;
                v75 = 0u;
                v76 = 0u;
                v32 = v31;
                v33 = objc_msgSend(v32, "countByEnumeratingWithState:objects:count:", &v75, v105, 16);
                v63 = v24;
                if (v33)
                {
                  v34 = 0;
                  v29 = 0;
                  v35 = 0;
                  v36 = *(_QWORD *)v76;
                  do
                  {
                    for (k = 0; k != v33; ++k)
                    {
                      if (*(_QWORD *)v76 != v36)
                        objc_enumerationMutation(v32);
                      objc_msgSend(*(id *)(*((_QWORD *)&v75 + 1) + 8 * k), "doubleValue");
                      v39 = v38;
                      if ((unint64_t)v34 >= v35)
                      {
                        v40 = (v34 - v29) >> 3;
                        v41 = v40 + 1;
                        if ((unint64_t)(v40 + 1) >> 61)
                        {
                          v85 = v35;
                          v83 = v29;
                          std::vector<BOOL>::__throw_length_error[abi:ne180100]();
                        }
                        if ((uint64_t)(v35 - (_QWORD)v29) >> 2 > v41)
                          v41 = (uint64_t)(v35 - (_QWORD)v29) >> 2;
                        if (v35 - (unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8)
                          v42 = 0x1FFFFFFFFFFFFFFFLL;
                        else
                          v42 = v41;
                        if (v42)
                          v42 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<morphun::dialog::SemanticFeatureConceptBase *>>(v42);
                        else
                          v43 = 0;
                        v44 = (char *)(v42 + 8 * v40);
                        *(_QWORD *)v44 = v39;
                        v45 = v44 + 8;
                        while (v34 != v29)
                        {
                          v46 = *((_QWORD *)v34 - 1);
                          v34 -= 8;
                          *((_QWORD *)v44 - 1) = v46;
                          v44 -= 8;
                        }
                        v35 = v42 + 8 * v43;
                        v84 = v45;
                        if (v29)
                          operator delete(v29);
                        v29 = v44;
                        v34 = v45;
                        v5 = v23;
                      }
                      else
                      {
                        *(_QWORD *)v34 = v38;
                        v34 += 8;
                      }
                      v84 = v34;
                    }
                    v85 = v35;
                    v83 = v29;
                    v33 = objc_msgSend(v32, "countByEnumeratingWithState:objects:count:", &v75, v105, 16);
                  }
                  while (v33);
                }
                else
                {
                  v29 = 0;
                }

                v21 = v60;
                a2 = v61;
                v22 = v62;
                v24 = v63;
              }
              else
              {
                v29 = 0;
              }
              objc_msgSend(v69, "objectForKey:", CFSTR("text"));
              v47 = (void *)objc_claimAutoreleasedReturnValue();
              v48 = v47;
              if (v47)
              {
                std::string::basic_string[abi:ne180100]<0>(__p, (char *)objc_msgSend(objc_retainAutorelease(v47), "UTF8String"));
                if (SHIBYTE(v82) < 0)
                  operator delete((void *)v81);
                v81 = *(_OWORD *)__p;
                v82 = *(_QWORD *)&__p[16];
              }

              v30 = v65;
            }
            else
            {
              v29 = 0;
              v30 = 0;
            }
            siri::dialogengine::GroundingInfo::GroundingInfo(__p, v30, (uint64_t)&v83, &v81);
            v104 = v79;
            v49 = std::__tree<std::__value_type<std::string,siri::dialogengine::GroundingInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::GroundingInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::GroundingInfo>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v90, (const void **)v79, (__int128 **)&v104);
            v50 = v24;
            v51 = (void *)*((_QWORD *)v49 + 8);
            *((_QWORD *)v49 + 7) = *(_QWORD *)__p;
            if (v51)
            {
              *((_QWORD *)v49 + 9) = v51;
              operator delete(v51);
              *((_QWORD *)v49 + 8) = 0;
              *((_QWORD *)v49 + 9) = 0;
              *((_QWORD *)v49 + 10) = 0;
            }
            *((_OWORD *)v49 + 4) = *(_OWORD *)&__p[8];
            *((_QWORD *)v49 + 10) = v72;
            *(_QWORD *)&__p[16] = 0;
            v72 = 0;
            *(_QWORD *)&__p[8] = 0;
            v52 = (void **)(v49 + 88);
            if (v49[111] < 0)
            {
              operator delete(*v52);
              v53 = *(void **)&__p[8];
              *(_OWORD *)v52 = v73;
              *((_QWORD *)v49 + 13) = v74;
              HIBYTE(v74) = 0;
              LOBYTE(v73) = 0;
              if (v53)
              {
                *(_QWORD *)&__p[16] = v53;
                operator delete(v53);
              }
            }
            else
            {
              *(_OWORD *)v52 = v73;
              *((_QWORD *)v49 + 13) = v74;
            }

            v24 = v50;
            if (v80 < 0)
              operator delete(v79[0]);
            if ((SHIBYTE(v82) & 0x80000000) == 0)
            {
              if (!v29)
                goto LABEL_89;
LABEL_88:
              v84 = v29;
              operator delete(v29);
              goto LABEL_89;
            }
            operator delete((void *)v81);
            if (v29)
              goto LABEL_88;
          }
LABEL_89:

          ++v24;
        }
        while (v24 != v22);
        v54 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v86, v106, 16);
        v22 = v54;
      }
      while (v54);
    }

    siri::dialogengine::DialogStateUseCase::DialogStateUseCase((uint64_t)a2, v55, (const void ***)&v102, (const void ***)&v96, (const void ***)&v90, v9);
    std::__tree<std::__value_type<std::string,siri::dialogengine::GroundingInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::GroundingInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::GroundingInfo>>>::destroy(v91[0]);

    std::__tree<std::string>::destroy((uint64_t)&v96, v97[0]);
    std::__tree<std::string>::destroy((uint64_t)&v102, v103[0]);

  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    a2[3] = 0;
    a2[2] = a2 + 3;
    a2[6] = 0;
    a2[4] = 0;
    a2[5] = a2 + 6;
    a2[10] = 0;
    a2[9] = 0;
    a2[7] = 0;
    a2[8] = a2 + 9;
  }

}

void sub_1BF8DBB08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14)
{
  void *v14;
  void *v15;

  std::__tree<std::string>::destroy((uint64_t)&STACK[0x208], (char *)STACK[0x210]);
  std::__tree<std::string>::destroy((uint64_t)&STACK[0x268], (char *)STACK[0x270]);

  _Unwind_Resume(a1);
}

char *std::__tree<std::__value_type<std::string,siri::dialogengine::GroundingInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::GroundingInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::GroundingInfo>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, __int128 **a3)
{
  void **v5;
  char *v6;
  uint64_t **v7;
  std::string *v8;
  __int128 *v9;
  __int128 v10;
  _QWORD v12[2];
  char v13;
  uint64_t v14;

  v5 = (void **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)a1, &v14, a2);
  v6 = (char *)*v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = (char *)operator new(0x70uLL);
    v12[0] = v6;
    v12[1] = a1 + 1;
    v13 = 0;
    v8 = (std::string *)(v6 + 32);
    v9 = *a3;
    if (*((char *)*a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)v9, *((_QWORD *)v9 + 1));
    }
    else
    {
      v10 = *v9;
      *((_QWORD *)v6 + 6) = *((_QWORD *)v9 + 2);
      *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v10;
    }
    *((_QWORD *)v6 + 13) = 0;
    *(_OWORD *)(v6 + 88) = 0u;
    *(_OWORD *)(v6 + 72) = 0u;
    *(_OWORD *)(v6 + 56) = 0u;
    v13 = 1;
    std::__tree<std::string>::__insert_node_at(a1, v14, v7, (uint64_t *)v6);
    v12[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,siri::dialogengine::GroundingInfo>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,siri::dialogengine::GroundingInfo>,void *>>>>::reset[abi:ne180100]((uint64_t)v12);
  }
  return v6;
}

void sub_1BF8DBDD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,siri::dialogengine::GroundingInfo>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,siri::dialogengine::GroundingInfo>,void *>>>>::reset[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,siri::dialogengine::GroundingInfo>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,siri::dialogengine::GroundingInfo>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,siri::dialogengine::GroundingInfo>,0>((uint64_t)v1 + 32);
    operator delete(v1);
  }
}

id siri::dialogengine::DialogStateUseCaseToNSDictionary(siri::dialogengine *this, const siri::dialogengine::DialogStateUseCase *a2)
{
  void *v3;
  void *v4;
  std::string::size_type v5;
  _QWORD *v6;
  void *v7;
  std::string *v8;
  std::string *v9;
  BOOL v10;
  std::string::size_type v11;
  _QWORD *v12;
  void *v13;
  std::string *v14;
  std::string *v15;
  __int128 *v16;
  void *v17;
  std::string *p_p;
  void *v19;
  void *v20;
  __int128 v21;
  double *v22;
  void *v23;
  void *v24;
  void *v25;
  std::string *v26;
  void *v27;
  void *v28;
  __int128 *v29;
  __int128 *v30;
  void *v32;
  void *v33;
  id v34;
  std::string __p;
  std::string v36;
  unsigned int v37;
  void *v38;
  _BYTE *v39;
  std::string v40;
  __int128 *v41;
  _QWORD *v42[2];
  _QWORD v43[3];
  _QWORD v44[5];

  v44[3] = *MEMORY[0x1E0C80C00];
  v34 = (id)objc_opt_new();
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", *(unsigned int *)this);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v34, "setObject:forKey:", v3, CFSTR("count"));

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", *((double *)this + 1));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v34, "setObject:forKey:", v4, CFSTR("timestamp"));

  v33 = (void *)objc_opt_new();
  std::set<std::string>::set[abi:ne180100]((uint64_t *)&v36, (const void ***)this + 5);
  v5 = v36.__r_.__value_.__r.__words[0];
  if ((std::string::size_type *)v36.__r_.__value_.__l.__data_ != &v36.__r_.__value_.__r.__words[1])
  {
    do
    {
      v6 = (_QWORD *)(v5 + 32);
      if (*(char *)(v5 + 55) < 0)
        v6 = (_QWORD *)*v6;
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v6);
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v33, "addObject:", v7);

      v8 = *(std::string **)(v5 + 8);
      if (v8)
      {
        do
        {
          v9 = v8;
          v8 = (std::string *)v8->__r_.__value_.__r.__words[0];
        }
        while (v8);
      }
      else
      {
        do
        {
          v9 = *(std::string **)(v5 + 16);
          v10 = v9->__r_.__value_.__r.__words[0] == v5;
          v5 = (std::string::size_type)v9;
        }
        while (!v10);
      }
      v5 = (std::string::size_type)v9;
    }
    while (v9 != (std::string *)&v36.__r_.__value_.__r.__words[1]);
  }
  std::__tree<std::string>::destroy((uint64_t)&v36, (char *)v36.__r_.__value_.__l.__size_);
  objc_msgSend(v34, "setObject:forKey:", v33, CFSTR("allRandomIds"));
  v32 = (void *)objc_opt_new();
  std::set<std::string>::set[abi:ne180100]((uint64_t *)&v36, (const void ***)this + 2);
  v11 = v36.__r_.__value_.__r.__words[0];
  if ((std::string::size_type *)v36.__r_.__value_.__l.__data_ != &v36.__r_.__value_.__r.__words[1])
  {
    do
    {
      v12 = (_QWORD *)(v11 + 32);
      if (*(char *)(v11 + 55) < 0)
        v12 = (_QWORD *)*v12;
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v12);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v32, "addObject:", v13);

      v14 = *(std::string **)(v11 + 8);
      if (v14)
      {
        do
        {
          v15 = v14;
          v14 = (std::string *)v14->__r_.__value_.__r.__words[0];
        }
        while (v14);
      }
      else
      {
        do
        {
          v15 = *(std::string **)(v11 + 16);
          v10 = v15->__r_.__value_.__r.__words[0] == v11;
          v11 = (std::string::size_type)v15;
        }
        while (!v10);
      }
      v11 = (std::string::size_type)v15;
    }
    while (v15 != (std::string *)&v36.__r_.__value_.__r.__words[1]);
  }
  std::__tree<std::string>::destroy((uint64_t)&v36, (char *)v36.__r_.__value_.__l.__size_);
  objc_msgSend(v34, "setObject:forKey:", v32, CFSTR("lastRandomIds"));
  std::map<std::string,siri::dialogengine::GroundingInfo>::map[abi:ne180100]((uint64_t)&v41, (const void ***)this + 8);
  v16 = v41;
  if (v41 != (__int128 *)v42)
  {
    do
    {
      std::pair<std::string const,siri::dialogengine::GroundingInfo>::pair[abi:ne180100](&v36, v16 + 2);
      v17 = (void *)MEMORY[0x1E0CB3940];
      std::operator+<char>();
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      objc_msgSend(v17, "stringWithUTF8String:", p_p);
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v20 = (void *)objc_opt_new();
      memset(&__p, 0, sizeof(__p));
      std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>(&__p, v38, (uint64_t)v39, (v39 - (_BYTE *)v38) >> 3);
      v21 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      v22 = (double *)__p.__r_.__value_.__r.__words[0];
      if (__p.__r_.__value_.__r.__words[0] != __p.__r_.__value_.__l.__size_)
      {
        do
        {
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", *v22);
          v23 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v20, "addObject:", v23);

          ++v22;
        }
        while (v22 != *((double **)&v21 + 1));
      }
      if ((_QWORD)v21)
        operator delete((void *)v21);
      v43[0] = CFSTR("count");
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", v37);
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      v44[0] = v24;
      v43[1] = CFSTR("text");
      v25 = (void *)MEMORY[0x1E0CB3940];
      if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&__p, v40.__r_.__value_.__l.__data_, v40.__r_.__value_.__l.__size_);
      else
        __p = v40;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v26 = &__p;
      else
        v26 = (std::string *)__p.__r_.__value_.__r.__words[0];
      objc_msgSend(v25, "stringWithUTF8String:", v26);
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      v43[2] = CFSTR("timestamps");
      v44[1] = v27;
      v44[2] = v20;
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v44, v43, 3);
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v34, "setObject:forKey:", v28, v19);

      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);

      if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v40.__r_.__value_.__l.__data_);
      if (v38)
      {
        v39 = v38;
        operator delete(v38);
      }
      if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v36.__r_.__value_.__l.__data_);
      v29 = (__int128 *)*((_QWORD *)v16 + 1);
      if (v29)
      {
        do
        {
          v30 = v29;
          v29 = *(__int128 **)v29;
        }
        while (v29);
      }
      else
      {
        do
        {
          v30 = (__int128 *)*((_QWORD *)v16 + 2);
          v10 = *(_QWORD *)v30 == (_QWORD)v16;
          v16 = v30;
        }
        while (!v10);
      }
      v16 = v30;
    }
    while (v30 != (__int128 *)v42);
  }
  std::__tree<std::__value_type<std::string,siri::dialogengine::GroundingInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::GroundingInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::GroundingInfo>>>::destroy(v42[0]);

  return v34;
}

void sub_1BF8DC2E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, void *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{

  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,siri::dialogengine::GroundingInfo>::pair[abi:ne180100](std::string *this, __int128 *a2)
{
  __int128 v4;
  std::string::size_type v5;
  std::string *v6;
  __int128 v7;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  v5 = *((_QWORD *)a2 + 3);
  this[1].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[0] = v5;
  this[1].__r_.__value_.__r.__words[2] = 0;
  this[2].__r_.__value_.__r.__words[0] = 0;
  std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>(&this[1].__r_.__value_.__l.__size_, *((const void **)a2 + 4), *((_QWORD *)a2 + 5), (uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 3);
  v6 = (std::string *)((char *)this + 56);
  if (*((char *)a2 + 79) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *((const std::string::value_type **)a2 + 7), *((_QWORD *)a2 + 8));
  }
  else
  {
    v7 = *(__int128 *)((char *)a2 + 56);
    this[3].__r_.__value_.__r.__words[0] = *((_QWORD *)a2 + 9);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  return this;
}

void sub_1BF8DC4E0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 40) = v4;
    operator delete(v4);
  }
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::pair<std::string const,siri::dialogengine::GroundingInfo>::~pair(uint64_t a1)
{
  void *v2;

  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  v2 = *(void **)(a1 + 32);
  if (v2)
  {
    *(_QWORD *)(a1 + 40) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<double>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1BF8DC5C0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<double>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 61)
    std::vector<BOOL>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<morphun::dialog::SemanticFeatureConceptBase *>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

uint64_t siri::dialogengine::DialogStateFamilyFromNSDictionary(siri::dialogengine *this, NSDictionary *a2)
{
  siri::dialogengine *v2;
  siri::dialogengine *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;

  v2 = this;
  v3 = v2;
  if (v2)
  {
    -[siri::dialogengine objectForKey:](v2, "objectForKey:", CFSTR("count"));
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = v4;
    if (v4)
      v6 = objc_msgSend(v4, "unsignedIntValue");
    else
      v6 = 0;
    -[siri::dialogengine objectForKey:](v3, "objectForKey:", CFSTR("timestamp"));
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = v7;
    if (v7)
      objc_msgSend(v7, "doubleValue");

  }
  else
  {
    v6 = 0;
  }

  return v6;
}

void sub_1BF8DC6CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

id siri::dialogengine::DialogStateFamilyToNSDictionary(siri::dialogengine *this, const siri::dialogengine::DialogStateFamily *a2)
{
  void *v3;
  void *v4;
  void *v5;

  v3 = (void *)objc_opt_new();
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", *(unsigned int *)this);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setObject:forKey:", v4, CFSTR("count"));

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", *((double *)this + 1));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setObject:forKey:", v5, CFSTR("timestamp"));

  return v3;
}

void sub_1BF8DC78C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::DialogStatePatternFromNSDictionary(siri::dialogengine *this, NSDictionary *a2)
{
  siri::dialogengine *v2;
  siri::dialogengine *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;

  v2 = this;
  v3 = v2;
  if (v2)
  {
    -[siri::dialogengine objectForKey:](v2, "objectForKey:", CFSTR("count"));
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = v4;
    if (v4)
      v6 = objc_msgSend(v4, "unsignedIntValue");
    else
      v6 = 0;
    -[siri::dialogengine objectForKey:](v3, "objectForKey:", CFSTR("timestamp"));
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = v7;
    if (v7)
      objc_msgSend(v7, "doubleValue");

  }
  else
  {
    v6 = 0;
  }

  return v6;
}

void sub_1BF8DC860(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

id siri::dialogengine::DialogStatePatternToNSDictionary(siri::dialogengine *this, const siri::dialogengine::DialogStatePattern *a2)
{
  void *v3;
  void *v4;
  void *v5;

  v3 = (void *)objc_opt_new();
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", *(unsigned int *)this);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setObject:forKey:", v4, CFSTR("count"));

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", *((double *)this + 1));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setObject:forKey:", v5, CFSTR("timestamp"));

  return v3;
}

void sub_1BF8DC920(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void siri::dialogengine::WriteDialogStateUseCaseToFile(siri::dialogengine::Context *a1, const char *a2)
{
  uint64_t *v4;
  const char *v5;
  uint64_t v6;
  const siri::dialogengine::DialogStateUseCase *v7;
  void *v8;
  uint64_t *v9;
  void *v10;
  void *v11;
  char *v12;
  _BYTE v13[16];
  char *v14[3];
  char *v15[6];

  if (a2[23] >= 0)
    v4 = (uint64_t *)a2;
  else
    v4 = *(uint64_t **)a2;
  siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"WriteDialogStateUseCaseToFile: %s", a2, v4);
  if (!a1)
  {
    v12 = "Context is null; Can't get use case state.";
LABEL_14:
    siri::dialogengine::Log::Debug((siri::dialogengine::Log *)v12, v5);
    return;
  }
  v6 = *((unsigned __int8 *)a2 + 23);
  if ((v6 & 0x80u) != 0)
    v6 = *((_QWORD *)a2 + 1);
  if (!v6)
  {
    v12 = "filePath is empty. Can't write use case state to file.";
    goto LABEL_14;
  }
  siri::dialogengine::Context::GetUseCaseState(a1, v5, (uint64_t)v13);
  siri::dialogengine::DialogStateUseCaseToNSDictionary((siri::dialogengine *)v13, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (a2[23] >= 0)
    v9 = (uint64_t *)a2;
  else
    v9 = *(uint64_t **)a2;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99E98], "fileURLWithPath:", v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "writeToURL:error:", v11, 0);

  std::__tree<std::__value_type<std::string,siri::dialogengine::GroundingInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::GroundingInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::GroundingInfo>>>::destroy((_QWORD *)v15[4]);
  std::__tree<std::string>::destroy((uint64_t)v15, v15[1]);
  std::__tree<std::string>::destroy((uint64_t)v14, v14[1]);
}

void sub_1BF8DCA6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  va_list va;

  va_start(va, a2);
  v5 = v4;

  siri::dialogengine::DialogStateUseCase::~DialogStateUseCase((siri::dialogengine::DialogStateUseCase *)va);
  _Unwind_Resume(a1);
}

void siri::dialogengine::WriteDialogStateFamilyToFile(siri::dialogengine::Context *a1, const char *a2)
{
  uint64_t *v4;
  const char *v5;
  uint64_t v6;
  const siri::dialogengine::DialogStateFamily *v7;
  uint64_t *v8;
  void *v9;
  void *v10;
  char *v11;
  id v12;
  _QWORD v13[2];

  if (a2[23] >= 0)
    v4 = (uint64_t *)a2;
  else
    v4 = *(uint64_t **)a2;
  siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"WriteDialogStateFamilyToFile: %s", a2, v4);
  if (!a1)
  {
    v11 = "Context is null; Can't get family state.";
LABEL_14:
    siri::dialogengine::Log::Debug((siri::dialogengine::Log *)v11, v5);
    return;
  }
  v6 = *((unsigned __int8 *)a2 + 23);
  if ((v6 & 0x80u) != 0)
    v6 = *((_QWORD *)a2 + 1);
  if (!v6)
  {
    v11 = "filePath is empty. Can't write family state to file.";
    goto LABEL_14;
  }
  v13[0] = siri::dialogengine::Context::GetFamilyState(a1, v5);
  v13[1] = v7;
  siri::dialogengine::DialogStateFamilyToNSDictionary((siri::dialogengine *)v13, v7);
  v12 = (id)objc_claimAutoreleasedReturnValue();
  if (a2[23] >= 0)
    v8 = (uint64_t *)a2;
  else
    v8 = *(uint64_t **)a2;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99E98], "fileURLWithPath:", v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "writeToURL:error:", v10, 0);

}

void sub_1BF8DCBA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  v12 = v11;

  _Unwind_Resume(a1);
}

void InitDefaultsscc_info_ImageElement_ImageElement_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/ImageElement.pb.cc", a4);
  SnippetUI::ImageElement::ImageElement((SnippetUI::ImageElement *)&SnippetUI::_ImageElement_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_ImageElement_default_instance_, v4);
}

void InitDefaultsscc_info_ImageElement_Source_ImageElement_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/ImageElement.pb.cc", a4);
  SnippetUI::ImageElement_Source::ImageElement_Source((SnippetUI::ImageElement_Source *)&SnippetUI::_ImageElement_Source_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_ImageElement_Source_default_instance_, v4);
  qword_1ED1D53F8 = (uint64_t)&SnippetUI::_ImageElement_Data_default_instance_;
  unk_1ED1D5400 = &SnippetUI::_ImageElement_Bundle_default_instance_;
  qword_1ED1D5408 = (uint64_t)&SnippetUI::_ImageElement_Url_default_instance_;
  unk_1ED1D5410 = &SnippetUI::_ImageElement_Symbol_default_instance_;
  qword_1ED1D5418 = (uint64_t)&SnippetUI::_ImageElement_AppIcon_default_instance_;
  unk_1ED1D5420 = &SnippetUI::_ImageElement_Contact_default_instance_;
}

void InitDefaultsscc_info_ImageElement_Contact_ImageElement_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/ImageElement.pb.cc", a4);
  SnippetUI::ImageElement_Contact::ImageElement_Contact((SnippetUI::ImageElement_Contact *)&SnippetUI::_ImageElement_Contact_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_ImageElement_Contact_default_instance_, v4);
  qword_1EF583F38 = (uint64_t)&SnippetUI::_ImageElement_Contact_Monogram_default_instance_;
  unk_1EF583F40 = &SnippetUI::_ImageElement_Contact_Avatar_default_instance_;
}

void InitDefaultsscc_info_ImageElement_Contact_Avatar_ImageElement_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/ImageElement.pb.cc", a4);
  SnippetUI::ImageElement_Contact_Avatar::ImageElement_Contact_Avatar((SnippetUI::ImageElement_Contact_Avatar *)&SnippetUI::_ImageElement_Contact_Avatar_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_ImageElement_Contact_Avatar_default_instance_, v4);
}

SnippetUI::ImageElement_Contact_Avatar *SnippetUI::ImageElement_Contact_Avatar::ImageElement_Contact_Avatar(SnippetUI::ImageElement_Contact_Avatar *this)
{
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_QWORD *)this = &off_1E792C430;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_DWORD *)this + 10) = 0;
  if (atomic_load(scc_info_ImageElement_Contact_Avatar_ImageElement_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_ImageElement_Contact_Avatar_ImageElement_2eproto);
  return this;
}

void sub_1BF8DCDD4(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;

  google::protobuf::RepeatedPtrField<std::string>::~RepeatedPtrField(v2 + 16);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::ImageElement_Contact_Avatar::~ImageElement_Contact_Avatar(SnippetUI::ImageElement_Contact_Avatar *this)
{
  uint64_t *v1;

  *(_QWORD *)this = &off_1E792C430;
  v1 = (uint64_t *)((char *)this + 8);
  google::protobuf::RepeatedPtrField<std::string>::~RepeatedPtrField((char *)this + 16);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
}

{
  uint64_t *v1;

  *(_QWORD *)this = &off_1E792C430;
  v1 = (uint64_t *)((char *)this + 8);
  google::protobuf::RepeatedPtrField<std::string>::~RepeatedPtrField((char *)this + 16);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  JUMPOUT(0x1C3B8D890);
}

{
  uint64_t *v1;

  *(_QWORD *)this = &off_1E792C430;
  v1 = (uint64_t *)((char *)this + 8);
  google::protobuf::RepeatedPtrField<std::string>::~RepeatedPtrField((char *)this + 16);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
}

SnippetUI::ImageElement_Contact_Avatar *SnippetUI::ImageElement_Contact_Avatar::New(SnippetUI::ImageElement_Contact_Avatar *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement_Contact_Avatar>(0);
}

SnippetUI::ImageElement_Contact_Avatar *SnippetUI::ImageElement_Contact_Avatar::New(SnippetUI::ImageElement_Contact_Avatar *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement_Contact_Avatar>(a2);
}

void SnippetUI::ImageElement_Contact_Avatar::Clear(SnippetUI::ImageElement_Contact_Avatar *this)
{
  google::protobuf::internal::InternalMetadataWithArena *v2;
  char v3;

  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 16);
  v3 = *((_BYTE *)this + 8);
  v2 = (SnippetUI::ImageElement_Contact_Avatar *)((char *)this + 8);
  if ((v3 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v2);
}

uint64_t SnippetUI::ImageElement_Contact_Avatar::IsInitialized(SnippetUI::ImageElement_Contact_Avatar *this)
{
  return 1;
}

char *SnippetUI::ImageElement_Contact_Avatar::ByteSizeLong(SnippetUI::ImageElement_Contact_Avatar *this)
{
  int v2;
  int v3;
  const google::protobuf::UnknownFieldSet *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *((_DWORD *)this + 6);
  if (v2 < 1)
  {
    v4 = (const google::protobuf::UnknownFieldSet *)*((unsigned int *)this + 6);
  }
  else
  {
    v3 = 0;
    v4 = (const google::protobuf::UnknownFieldSet *)*((unsigned int *)this + 6);
    do
    {
      v5 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 16, v3);
      v6 = *(unsigned __int8 *)(v5 + 23);
      if ((v6 & 0x80u) != 0)
        v6 = *(_QWORD *)(v5 + 8);
      v4 = (const google::protobuf::UnknownFieldSet *)((char *)v4 + v6 + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6));
      ++v3;
    }
    while (v2 != v3);
  }
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::ImageElement_Contact_Avatar *)((char *)this + 8), v4, (_DWORD *)this + 10);
  *((_DWORD *)this + 10) = (_DWORD)v4;
  return (char *)v4;
}

uint64_t SnippetUI::ImageElement_Contact_Avatar::GetCachedSize(SnippetUI::ImageElement_Contact_Avatar *this)
{
  return *((unsigned int *)this + 10);
}

google::protobuf::internal *SnippetUI::ImageElement_Contact_Avatar::_InternalParse(SnippetUI::ImageElement_Contact_Avatar *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  uint64_t *v5;
  unsigned int *v6;
  google::protobuf::internal::ParseContext *v7;
  google::protobuf::internal *TagFallback;
  char *v9;
  BOOL v10;
  char *v11;
  std::string::value_type *v12;
  int *v13;
  uint64_t v14;
  int v15;
  std::string *AlignedAndAddCleanup;
  google::protobuf::internal::ArenaImpl *v17;
  uint64_t v18;
  uint64_t v19;
  google::protobuf::internal *v21;

  v21 = a2;
  v5 = (uint64_t *)((char *)this + 8);
  v6 = (unsigned int *)((char *)this + 16);
LABEL_2:
  while ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v21, *((_DWORD *)a3 + 23)) & 1) == 0)
  {
    TagFallback = (google::protobuf::internal *)((char *)v21 + 1);
    v9 = (char *)*(unsigned __int8 *)v21;
    if ((*(char *)v21 & 0x80000000) == 0)
      goto LABEL_6;
    v9 = (char *)(v9 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v21 + 2);
LABEL_6:
      v21 = TagFallback;
      goto LABEL_7;
    }
    TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v21, v9);
    v21 = TagFallback;
    if (!TagFallback)
      return TagFallback;
LABEL_7:
    if ((_DWORD)v9 == 10)
    {
      v11 = (char *)TagFallback - 1;
      while (1)
      {
        v12 = v11 + 1;
        v21 = (google::protobuf::internal *)(v11 + 1);
        v13 = (int *)*((_QWORD *)this + 4);
        if (!v13)
          break;
        v14 = *((int *)this + 6);
        v15 = *v13;
        if ((int)v14 >= *v13)
        {
          if (v15 == *((_DWORD *)this + 7))
          {
LABEL_20:
            google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v6, v15 + 1);
            v13 = (int *)*((_QWORD *)this + 4);
            v15 = *v13;
          }
          *v13 = v15 + 1;
          v17 = *(google::protobuf::internal::ArenaImpl **)v6;
          if (*(_QWORD *)v6)
          {
            if (*((_QWORD *)v17 + 14))
            AlignedAndAddCleanup = (std::string *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(v17, 0x18uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<std::string>);
          }
          else
          {
            AlignedAndAddCleanup = (std::string *)operator new();
          }
          AlignedAndAddCleanup->__r_.__value_.__r.__words[0] = 0;
          AlignedAndAddCleanup->__r_.__value_.__l.__size_ = 0;
          AlignedAndAddCleanup->__r_.__value_.__r.__words[2] = 0;
          v18 = *((_QWORD *)this + 4);
          v19 = *((int *)this + 6);
          *((_DWORD *)this + 6) = v19 + 1;
          *(_QWORD *)(v18 + 8 * v19 + 8) = AlignedAndAddCleanup;
          v12 = (std::string::value_type *)v21;
          goto LABEL_27;
        }
        *((_DWORD *)this + 6) = v14 + 1;
        AlignedAndAddCleanup = *(std::string **)&v13[2 * v14 + 2];
LABEL_27:
        v11 = google::protobuf::internal::InlineGreedyStringParserUTF8(AlignedAndAddCleanup, v12, (uint64_t)a3, (google::protobuf::internal *)"SnippetUI.ImageElement.Contact.Avatar.contact_ids");
        v21 = (google::protobuf::internal *)v11;
        if (!v11)
          return 0;
        if (*(_QWORD *)a3 <= (unint64_t)v11 || *v11 != 10)
          goto LABEL_2;
      }
      v15 = *((_DWORD *)this + 7);
      goto LABEL_20;
    }
    if ((_DWORD)v9)
      v10 = (v9 & 7) == 4;
    else
      v10 = 1;
    if (v10)
    {
      *((_DWORD *)a3 + 20) = (_DWORD)v9 - 1;
      return TagFallback;
    }
    v21 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v9, v5, TagFallback, a3, v7);
    if (!v21)
      return 0;
  }
  return v21;
}

const google::protobuf::UnknownFieldSet *SnippetUI::ImageElement_Contact_Avatar::InternalSerializeWithCachedSizesToArray(SnippetUI::ImageElement_Contact_Avatar *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  int v6;
  int v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;
  int64_t v13;
  const void *v14;
  uint64_t v15;

  v6 = *((_DWORD *)this + 6);
  if (v6 >= 1)
  {
    v7 = 0;
    v8 = (char *)this + 16;
    do
    {
      v9 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)v8, v7);
      v10 = v9;
      v11 = *(_DWORD *)(v9 + 8);
      if (*(char *)(v9 + 23) >= 0)
      {
        v12 = *(unsigned __int8 *)(v9 + 23);
      }
      else
      {
        v9 = *(_QWORD *)v9;
        v12 = v11;
      }
      google::protobuf::internal::WireFormatLite::VerifyUtf8String((google::protobuf::internal *)v9, (const char *)v12, 1, (google::protobuf::internal *)"SnippetUI.ImageElement.Contact.Avatar.contact_ids");
      if (*(char *)(v10 + 23) < 0)
      {
        v13 = *(_QWORD *)(v10 + 8);
        if (v13 > 127)
          goto LABEL_16;
      }
      else
      {
        v13 = *(unsigned __int8 *)(v10 + 23);
      }
      if (*(_QWORD *)a3 - (_QWORD)a2 + 14 >= v13)
      {
        *(_BYTE *)a2 = 10;
        *((_BYTE *)a2 + 1) = v13;
        if (*(char *)(v10 + 23) >= 0)
          v14 = (const void *)v10;
        else
          v14 = *(const void **)v10;
        memcpy((char *)a2 + 2, v14, v13);
        a2 = (google::protobuf::UnknownFieldSet *)((char *)a2 + v13 + 2);
        goto LABEL_14;
      }
LABEL_16:
      a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::WriteStringOutline(a3, 1, v10, (char *)a2);
LABEL_14:
      ++v7;
    }
    while (v6 != v7);
  }
  v15 = *((_QWORD *)this + 1);
  if ((v15 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v15 & 0xFFFFFFFFFFFFFFFELL), a2, a3, a4);
  else
    return a2;
}

void SnippetUI::ImageElement_Contact_Avatar::CopyFrom(int **this, int **a2)
{
  if (a2 != this)
  {
    SnippetUI::ImageElement_Contact_Avatar::Clear((SnippetUI::ImageElement_Contact_Avatar *)this);
    SnippetUI::ImageElement_Contact_Avatar::MergeFrom(this, a2);
  }
}

{
  if (a2 != this)
  {
    SnippetUI::ImageElement_Contact_Avatar::Clear((SnippetUI::ImageElement_Contact_Avatar *)this);
    SnippetUI::ImageElement_Contact_Avatar::MergeFrom(this, a2);
  }
}

void SnippetUI::ImageElement_Contact_Avatar::MergeFrom(int **this, int **lpsrc)
{
  std::string *v4;
  int **v5;
  google::protobuf::Message *v6;
  char v7;
  std::string v8[2];

  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/ImageElement.pb.cc", 1538);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5)
    SnippetUI::ImageElement_Contact_Avatar::MergeFrom(this, v5);
  else
    google::protobuf::internal::ReflectionOps::Merge((google::protobuf::internal::ReflectionOps *)lpsrc, (const google::protobuf::Message *)this, v6);
}

void sub_1BF8DD408(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::ImageElement_Contact_Avatar::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 40) = a2;
  return this;
}

uint64_t SnippetUI::ImageElement_Contact_Avatar::GetMetadata(SnippetUI::ImageElement_Contact_Avatar *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ImageElement_2eproto);
  return qword_1EF5817A0;
}

void InitDefaultsscc_info_ImageElement_Symbol_Background_ImageElement_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/ImageElement.pb.cc", a4);
  SnippetUI::ImageElement_Symbol_Background::ImageElement_Symbol_Background((SnippetUI::ImageElement_Symbol_Background *)&SnippetUI::_ImageElement_Symbol_Background_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_ImageElement_Symbol_Background_default_instance_, v4);
  qword_1EF583F58 = (uint64_t)&SnippetUI::_Color_default_instance_;
  unk_1EF583F60 = &SnippetUI::_ImageElement_AspectRatio_default_instance_;
  qword_1EF583F68 = (uint64_t)&SnippetUI::_OptionalBool_default_instance_;
  unk_1EF583F70 = &SnippetUI::_OptionalBool_default_instance_;
}

SnippetUI::ImageElement_Symbol_Background *SnippetUI::ImageElement_Symbol_Background::ImageElement_Symbol_Background(SnippetUI::ImageElement_Symbol_Background *this)
{
  *(_QWORD *)this = &off_1E792C8B0;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 12) = 0;
  if (atomic_load(scc_info_ImageElement_Symbol_Background_ImageElement_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_ImageElement_Symbol_Background_ImageElement_2eproto);
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  return this;
}

void sub_1BF8DD524(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::ImageElement_Symbol_Background::~ImageElement_Symbol_Background(SnippetUI::ImageElement_Symbol_Background *this)
{
  SnippetUI::ImageElement_Symbol_Background::~ImageElement_Symbol_Background(this);
  JUMPOUT(0x1C3B8D890);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)this = &off_1E792C8B0;
  if (this != (SnippetUI::ImageElement_Symbol_Background *)&SnippetUI::_ImageElement_Symbol_Background_default_instance_)
  {
    v2 = *((_QWORD *)this + 2);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    v3 = *((_QWORD *)this + 3);
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    v4 = *((_QWORD *)this + 4);
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    v5 = *((_QWORD *)this + 5);
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

SnippetUI::ImageElement_Symbol_Background *SnippetUI::ImageElement_Symbol_Background::New(SnippetUI::ImageElement_Symbol_Background *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement_Symbol_Background>(0);
}

SnippetUI::ImageElement_Symbol_Background *SnippetUI::ImageElement_Symbol_Background::New(SnippetUI::ImageElement_Symbol_Background *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement_Symbol_Background>(a2);
}

void SnippetUI::ImageElement_Symbol_Background::Clear(SnippetUI::ImageElement_Symbol_Background *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  google::protobuf::internal::InternalMetadataWithArena *v6;
  char v7;

  v2 = *((_QWORD *)this + 2);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)this + 2) = 0;
  v3 = *((_QWORD *)this + 3);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *((_QWORD *)this + 3) = 0;
  v4 = *((_QWORD *)this + 4);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  *((_QWORD *)this + 4) = 0;
  v5 = *((_QWORD *)this + 5);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v7 = *((_BYTE *)this + 8);
  v6 = (SnippetUI::ImageElement_Symbol_Background *)((char *)this + 8);
  *((_QWORD *)v6 + 4) = 0;
  if ((v7 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v6);
}

uint64_t SnippetUI::ImageElement_Symbol_Background::IsInitialized(SnippetUI::ImageElement_Symbol_Background *this)
{
  return 1;
}

char *SnippetUI::ImageElement_Symbol_Background::ByteSizeLong(SnippetUI::ImageElement_Symbol_Background *this)
{
  SnippetUI::Color *v2;
  char *v3;
  const google::protobuf::UnknownFieldSet *v4;
  SnippetUI::ImageElement_AspectRatio *v5;
  char *v6;
  SnippetUI::OptionalBool *v7;
  char *v8;
  SnippetUI::OptionalBool *v9;
  char *v10;

  if (this == (SnippetUI::ImageElement_Symbol_Background *)&SnippetUI::_ImageElement_Symbol_Background_default_instance_)
  {
    v4 = 0;
  }
  else
  {
    v2 = (SnippetUI::Color *)*((_QWORD *)this + 2);
    if (v2)
    {
      v3 = SnippetUI::Color::ByteSizeLong(v2);
      v4 = (const google::protobuf::UnknownFieldSet *)&v3[((9 * (__clz(v3 | 1) ^ 0x1F) + 73) >> 6) + 1];
    }
    else
    {
      v4 = 0;
    }
    v5 = (SnippetUI::ImageElement_AspectRatio *)*((_QWORD *)this + 3);
    if (v5)
    {
      v6 = SnippetUI::ImageElement_AspectRatio::ByteSizeLong(v5);
      v4 = (const google::protobuf::UnknownFieldSet *)&v6[(_QWORD)v4
                                                        + 1
                                                        + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v7 = (SnippetUI::OptionalBool *)*((_QWORD *)this + 4);
    if (v7)
    {
      v8 = SnippetUI::OptionalBool::ByteSizeLong(v7);
      v4 = (const google::protobuf::UnknownFieldSet *)&v8[(_QWORD)v4
                                                        + 1
                                                        + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v9 = (SnippetUI::OptionalBool *)*((_QWORD *)this + 5);
    if (v9)
    {
      v10 = SnippetUI::OptionalBool::ByteSizeLong(v9);
      v4 = (const google::protobuf::UnknownFieldSet *)&v10[(_QWORD)v4
                                                         + 1
                                                         + ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6)];
    }
  }
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::ImageElement_Symbol_Background *)((char *)this + 8), v4, (_DWORD *)this + 12);
  *((_DWORD *)this + 12) = (_DWORD)v4;
  return (char *)v4;
}

uint64_t SnippetUI::ImageElement_Symbol_Background::GetCachedSize(SnippetUI::ImageElement_Symbol_Background *this)
{
  return *((unsigned int *)this + 12);
}

google::protobuf::internal *SnippetUI::ImageElement_Symbol_Background::_InternalParse(SnippetUI::ImageElement_Symbol_Background *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  uint64_t *v5;
  google::protobuf::internal::ParseContext *v6;
  google::protobuf::internal *TagFallback;
  char *v8;
  SnippetUI::Color *v9;
  char *v10;
  SnippetUI::ImageElement_AspectRatio *v11;
  SnippetUI::OptionalBool *v12;
  BOOL v13;
  google::protobuf::internal *v15;

  v15 = a2;
  v5 = (uint64_t *)((char *)this + 8);
  while (2)
  {
    if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v15, *((_DWORD *)a3 + 23)) & 1) != 0)
      return v15;
    TagFallback = (google::protobuf::internal *)((char *)v15 + 1);
    v8 = (char *)*(unsigned __int8 *)v15;
    if ((*(char *)v15 & 0x80000000) == 0)
      goto LABEL_6;
    v8 = (char *)(v8 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v15 + 2);
LABEL_6:
      v15 = TagFallback;
      goto LABEL_7;
    }
    TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v15, v8);
    v15 = TagFallback;
    if (!TagFallback)
      return TagFallback;
LABEL_7:
    switch(v8 >> 3)
    {
      case 1u:
        if (v8 != 10)
          goto LABEL_24;
        v9 = (SnippetUI::Color *)*((_QWORD *)this + 2);
        if (!v9)
        {
          v9 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Color>(0);
          *((_QWORD *)this + 2) = v9;
          TagFallback = v15;
        }
        v10 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::Color>(a3, v9, TagFallback);
        goto LABEL_29;
      case 2u:
        if (v8 != 18)
          goto LABEL_24;
        v11 = (SnippetUI::ImageElement_AspectRatio *)*((_QWORD *)this + 3);
        if (!v11)
        {
          v11 = (SnippetUI::ImageElement_AspectRatio *)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement_AspectRatio>(0);
          *((_QWORD *)this + 3) = v11;
          TagFallback = v15;
        }
        v10 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::ImageElement_AspectRatio>(a3, v11, TagFallback);
        goto LABEL_29;
      case 3u:
        if (v8 != 26)
          goto LABEL_24;
        v12 = (SnippetUI::OptionalBool *)*((_QWORD *)this + 4);
        if (v12)
          goto LABEL_23;
        v12 = (SnippetUI::OptionalBool *)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::OptionalBool>(0);
        *((_QWORD *)this + 4) = v12;
        goto LABEL_22;
      case 4u:
        if (v8 != 34)
          goto LABEL_24;
        v12 = (SnippetUI::OptionalBool *)*((_QWORD *)this + 5);
        if (v12)
          goto LABEL_23;
        v12 = (SnippetUI::OptionalBool *)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::OptionalBool>(0);
        *((_QWORD *)this + 5) = v12;
LABEL_22:
        TagFallback = v15;
LABEL_23:
        v10 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::OptionalBool>(a3, v12, TagFallback);
        goto LABEL_29;
      default:
LABEL_24:
        if ((_DWORD)v8)
          v13 = (v8 & 7) == 4;
        else
          v13 = 1;
        if (v13)
        {
          *((_DWORD *)a3 + 20) = (_DWORD)v8 - 1;
          return TagFallback;
        }
        v10 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v8, v5, TagFallback, a3, v6);
LABEL_29:
        v15 = (google::protobuf::internal *)v10;
        if (v10)
          continue;
        TagFallback = 0;
        break;
    }
    return TagFallback;
  }
}

const google::protobuf::UnknownFieldSet *SnippetUI::ImageElement_Symbol_Background::InternalSerializeWithCachedSizesToArray(SnippetUI::ImageElement_Symbol_Background *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  SnippetUI::Color *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  char *v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  unsigned int v13;
  unsigned int v14;
  SnippetUI::ImageElement_AspectRatio *v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  char *v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  unsigned int v22;
  unsigned int v23;
  SnippetUI::OptionalBool *v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  char *v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  unsigned int v31;
  unsigned int v32;
  SnippetUI::OptionalBool *v33;
  unsigned int v34;
  unsigned __int8 *v35;
  unsigned int v36;
  unsigned __int8 *v37;
  unsigned __int8 *v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;

  if (this == (SnippetUI::ImageElement_Symbol_Background *)&SnippetUI::_ImageElement_Symbol_Background_default_instance_)
    goto LABEL_49;
  v6 = (SnippetUI::Color *)*((_QWORD *)this + 2);
  if (v6)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
    {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      v6 = (SnippetUI::Color *)*((_QWORD *)this + 2);
    }
    *a2 = 10;
    v7 = *((_DWORD *)v6 + 6);
    if (v7 > 0x7F)
    {
      a2[1] = v7 | 0x80;
      v9 = v7 >> 7;
      if (v7 >> 14)
      {
        v11 = (unsigned __int8 *)(a2 + 2);
        do
        {
          v12 = v11;
          *v11++ = v9 | 0x80;
          v13 = v9 >> 7;
          v14 = v9 >> 14;
          v9 >>= 7;
        }
        while (v14);
        v10 = (char *)(v12 + 2);
        *v11 = v13;
        goto LABEL_13;
      }
      a2[2] = v9;
      v8 = 3;
    }
    else
    {
      a2[1] = v7;
      v8 = 2;
    }
    v10 = &a2[v8];
LABEL_13:
    a2 = (char *)SnippetUI::Color::InternalSerializeWithCachedSizesToArray(v6, v10, a3, a4);
  }
  v15 = (SnippetUI::ImageElement_AspectRatio *)*((_QWORD *)this + 3);
  if (!v15)
    goto LABEL_26;
  if ((unint64_t)a2 >= *(_QWORD *)a3)
  {
    a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
    v15 = (SnippetUI::ImageElement_AspectRatio *)*((_QWORD *)this + 3);
  }
  *a2 = 18;
  v16 = *((_DWORD *)v15 + 6);
  if (v16 > 0x7F)
  {
    a2[1] = v16 | 0x80;
    v18 = v16 >> 7;
    if (v16 >> 14)
    {
      v20 = (unsigned __int8 *)(a2 + 2);
      do
      {
        v21 = v20;
        *v20++ = v18 | 0x80;
        v22 = v18 >> 7;
        v23 = v18 >> 14;
        v18 >>= 7;
      }
      while (v23);
      v19 = (char *)(v21 + 2);
      *v20 = v22;
      goto LABEL_25;
    }
    a2[2] = v18;
    v17 = 3;
  }
  else
  {
    a2[1] = v16;
    v17 = 2;
  }
  v19 = &a2[v17];
LABEL_25:
  a2 = (char *)SnippetUI::ImageElement_AspectRatio::InternalSerializeWithCachedSizesToArray(v15, v19, a3, a4);
LABEL_26:
  v24 = (SnippetUI::OptionalBool *)*((_QWORD *)this + 4);
  if (!v24)
    goto LABEL_38;
  if ((unint64_t)a2 >= *(_QWORD *)a3)
  {
    a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
    v24 = (SnippetUI::OptionalBool *)*((_QWORD *)this + 4);
  }
  *a2 = 26;
  v25 = *((_DWORD *)v24 + 5);
  if (v25 > 0x7F)
  {
    a2[1] = v25 | 0x80;
    v27 = v25 >> 7;
    if (v25 >> 14)
    {
      v29 = (unsigned __int8 *)(a2 + 2);
      do
      {
        v30 = v29;
        *v29++ = v27 | 0x80;
        v31 = v27 >> 7;
        v32 = v27 >> 14;
        v27 >>= 7;
      }
      while (v32);
      v28 = (char *)(v30 + 2);
      *v29 = v31;
      goto LABEL_37;
    }
    a2[2] = v27;
    v26 = 3;
  }
  else
  {
    a2[1] = v25;
    v26 = 2;
  }
  v28 = &a2[v26];
LABEL_37:
  a2 = (char *)SnippetUI::OptionalBool::InternalSerializeWithCachedSizesToArray(v24, v28, a3, a4);
LABEL_38:
  v33 = (SnippetUI::OptionalBool *)*((_QWORD *)this + 5);
  if (v33)
  {
    if ((unint64_t)a2 >= *(_QWORD *)a3)
    {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      v33 = (SnippetUI::OptionalBool *)*((_QWORD *)this + 5);
    }
    *a2 = 34;
    v34 = *((_DWORD *)v33 + 5);
    if (v34 > 0x7F)
    {
      a2[1] = v34 | 0x80;
      v36 = v34 >> 7;
      if (v34 >> 14)
      {
        v37 = (unsigned __int8 *)(a2 + 2);
        do
        {
          v38 = v37;
          *v37++ = v36 | 0x80;
          v39 = v36 >> 7;
          v40 = v36 >> 14;
          v36 >>= 7;
        }
        while (v40);
        v35 = v38 + 2;
        *v37 = v39;
      }
      else
      {
        a2[2] = v36;
        v35 = (unsigned __int8 *)(a2 + 3);
      }
    }
    else
    {
      a2[1] = v34;
      v35 = (unsigned __int8 *)(a2 + 2);
    }
    a2 = (char *)SnippetUI::OptionalBool::InternalSerializeWithCachedSizesToArray(v33, (char *)v35, a3, a4);
  }
LABEL_49:
  v41 = *((_QWORD *)this + 1);
  if ((v41 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v41 & 0xFFFFFFFFFFFFFFFELL), (const google::protobuf::UnknownFieldSet *)a2, a3, a4);
  else
    return (const google::protobuf::UnknownFieldSet *)a2;
}

void SnippetUI::ImageElement_Symbol_Background::CopyFrom(SnippetUI::ImageElement_Symbol_Background *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    SnippetUI::ImageElement_Symbol_Background::Clear(this);
    SnippetUI::ImageElement_Symbol_Background::MergeFrom(this, a2);
  }
}

void SnippetUI::ImageElement_Symbol_Background::MergeFrom(SnippetUI::ImageElement_Symbol_Background *this, const google::protobuf::Message *lpsrc)
{
  std::string *v4;
  const SnippetUI::ImageElement_Symbol_Background *v5;
  google::protobuf::Message *v6;
  char v7;
  std::string v8[2];

  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/ImageElement.pb.cc", 3992);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5)
    SnippetUI::ImageElement_Symbol_Background::MergeFrom(this, v5);
  else
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
}

void sub_1BF8DDCA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::ImageElement_Symbol_Background::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 48) = a2;
  return this;
}

uint64_t SnippetUI::ImageElement_Symbol_Background::GetMetadata(SnippetUI::ImageElement_Symbol_Background *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ImageElement_2eproto);
  return qword_1EF581800;
}

void *SnippetUI::ImageElement_Symbol_Background::default_instance(SnippetUI::ImageElement_Symbol_Background *this)
{
  if (atomic_load(scc_info_ImageElement_Symbol_Background_ImageElement_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_ImageElement_Symbol_Background_ImageElement_2eproto);
  return &SnippetUI::_ImageElement_Symbol_Background_default_instance_;
}

void SnippetUI::ImageElement_Symbol_Background::MergeFrom(SnippetUI::ImageElement_Symbol_Background *this, const SnippetUI::ImageElement_Symbol_Background *a2)
{
  std::string *v4;
  uint64_t v5;
  const SnippetUI::Color *v6;
  SnippetUI::Color *v7;
  const SnippetUI::Color *v8;
  const SnippetUI::ImageElement_AspectRatio *v9;
  SnippetUI::ImageElement_AspectRatio *v10;
  const SnippetUI::ImageElement_AspectRatio *v11;
  const SnippetUI::OptionalBool *v12;
  SnippetUI::OptionalBool *v13;
  const SnippetUI::OptionalBool *v14;
  const SnippetUI::OptionalBool *v15;
  SnippetUI::OptionalBool *v16;
  const SnippetUI::OptionalBool *v17;
  char v18;
  std::string v19[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v19, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/ImageElement.pb.cc", 4007);
    v4 = google::protobuf::internal::LogMessage::operator<<(v19, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v18, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v19[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::ImageElement_Symbol_Background *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  if (a2 != (const SnippetUI::ImageElement_Symbol_Background *)&SnippetUI::_ImageElement_Symbol_Background_default_instance_)
  {
    v6 = (const SnippetUI::Color *)*((_QWORD *)a2 + 2);
    if (v6)
    {
      v7 = (SnippetUI::Color *)*((_QWORD *)this + 2);
      if (!v7)
      {
        v7 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Color>(0);
        *((_QWORD *)this + 2) = v7;
        v6 = (const SnippetUI::Color *)*((_QWORD *)a2 + 2);
      }
      if (v6)
        v8 = v6;
      else
        v8 = (const SnippetUI::Color *)&SnippetUI::_Color_default_instance_;
      SnippetUI::Color::MergeFrom(v7, v8);
    }
    v9 = (const SnippetUI::ImageElement_AspectRatio *)*((_QWORD *)a2 + 3);
    if (v9)
    {
      v10 = (SnippetUI::ImageElement_AspectRatio *)*((_QWORD *)this + 3);
      if (!v10)
      {
        v10 = (SnippetUI::ImageElement_AspectRatio *)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement_AspectRatio>(0);
        *((_QWORD *)this + 3) = v10;
        v9 = (const SnippetUI::ImageElement_AspectRatio *)*((_QWORD *)a2 + 3);
      }
      if (v9)
        v11 = v9;
      else
        v11 = (const SnippetUI::ImageElement_AspectRatio *)&SnippetUI::_ImageElement_AspectRatio_default_instance_;
      SnippetUI::ImageElement_AspectRatio::MergeFrom(v10, v11);
    }
    v12 = (const SnippetUI::OptionalBool *)*((_QWORD *)a2 + 4);
    if (v12)
    {
      v13 = (SnippetUI::OptionalBool *)*((_QWORD *)this + 4);
      if (!v13)
      {
        v13 = (SnippetUI::OptionalBool *)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::OptionalBool>(0);
        *((_QWORD *)this + 4) = v13;
        v12 = (const SnippetUI::OptionalBool *)*((_QWORD *)a2 + 4);
      }
      if (v12)
        v14 = v12;
      else
        v14 = (const SnippetUI::OptionalBool *)&SnippetUI::_OptionalBool_default_instance_;
      SnippetUI::OptionalBool::MergeFrom(v13, v14);
    }
    v15 = (const SnippetUI::OptionalBool *)*((_QWORD *)a2 + 5);
    if (v15)
    {
      v16 = (SnippetUI::OptionalBool *)*((_QWORD *)this + 5);
      if (!v16)
      {
        v16 = (SnippetUI::OptionalBool *)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::OptionalBool>(0);
        *((_QWORD *)this + 5) = v16;
        v15 = (const SnippetUI::OptionalBool *)*((_QWORD *)a2 + 5);
      }
      if (v15)
        v17 = v15;
      else
        v17 = (const SnippetUI::OptionalBool *)&SnippetUI::_OptionalBool_default_instance_;
      SnippetUI::OptionalBool::MergeFrom(v16, v17);
    }
  }
}

void sub_1BF8DDE78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement_AspectRatio>(google::protobuf::internal::ArenaImpl *this)
{
  uint64_t result;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    result = (uint64_t)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x20uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::ImageElement_AspectRatio>);
  }
  else
  {
    result = operator new();
  }
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = &off_1E792CA30;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void SnippetUI::ImageElement_AspectRatio::MergeFrom(SnippetUI::ImageElement_AspectRatio *this, const SnippetUI::ImageElement_AspectRatio *a2)
{
  std::string *v4;
  uint64_t v5;
  float v6;
  float v7;
  char v8;
  std::string v9[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v9, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/ImageElement.pb.cc", 4612);
    v4 = google::protobuf::internal::LogMessage::operator<<(v9, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v8, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v9[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::ImageElement_AspectRatio *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  v6 = *((float *)a2 + 4);
  if (v6 != 0.0)
    *((float *)this + 4) = v6;
  v7 = *((float *)a2 + 5);
  if (v7 != 0.0)
    *((float *)this + 5) = v7;
}

void sub_1BF8DDFB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::ImageElement_AspectRatio>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

void SnippetUI::ImageElement_AspectRatio::~ImageElement_AspectRatio(SnippetUI::ImageElement_AspectRatio *this)
{
  *(_QWORD *)this = &off_1E792CA30;
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  *(_QWORD *)this = &off_1E792CA30;
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
  JUMPOUT(0x1C3B8D890);
}

{
  *(_QWORD *)this = &off_1E792CA30;
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

uint64_t SnippetUI::ImageElement_AspectRatio::New(SnippetUI::ImageElement_AspectRatio *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement_AspectRatio>(0);
}

uint64_t SnippetUI::ImageElement_AspectRatio::New(SnippetUI::ImageElement_AspectRatio *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement_AspectRatio>(a2);
}

void SnippetUI::ImageElement_AspectRatio::Clear(SnippetUI::ImageElement_AspectRatio *this)
{
  google::protobuf::internal::InternalMetadataWithArena *v1;
  char v2;

  v2 = *((_BYTE *)this + 8);
  v1 = (SnippetUI::ImageElement_AspectRatio *)((char *)this + 8);
  *((_QWORD *)v1 + 1) = 0;
  if ((v2 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v1);
}

uint64_t SnippetUI::ImageElement_AspectRatio::IsInitialized(SnippetUI::ImageElement_AspectRatio *this)
{
  return 1;
}

char *SnippetUI::ImageElement_AspectRatio::ByteSizeLong(SnippetUI::ImageElement_AspectRatio *this)
{
  uint64_t v1;
  const google::protobuf::UnknownFieldSet *v2;

  v1 = 5;
  if (*((float *)this + 4) == 0.0)
    v1 = 0;
  if (*((float *)this + 5) == 0.0)
    v2 = (const google::protobuf::UnknownFieldSet *)v1;
  else
    v2 = (const google::protobuf::UnknownFieldSet *)(v1 + 5);
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::ImageElement_AspectRatio *)((char *)this + 8), v2, (_DWORD *)this + 6);
  *((_DWORD *)this + 6) = (_DWORD)v2;
  return (char *)v2;
}

uint64_t SnippetUI::ImageElement_AspectRatio::GetCachedSize(SnippetUI::ImageElement_AspectRatio *this)
{
  return *((unsigned int *)this + 6);
}

google::protobuf::internal *SnippetUI::ImageElement_AspectRatio::_InternalParse(SnippetUI::ImageElement_AspectRatio *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  uint64_t *v5;
  google::protobuf::internal::ParseContext *v6;
  char *TagFallback;
  char *v8;
  google::protobuf::internal *v12;

  v12 = a2;
  v5 = (uint64_t *)((char *)this + 8);
  while (1)
  {
    while (1)
    {
      while (1)
      {
        if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v12, *((_DWORD *)a3 + 23)) & 1) != 0)return v12;
        TagFallback = (char *)v12 + 1;
        v8 = (char *)*(unsigned __int8 *)v12;
        if ((*(char *)v12 & 0x80000000) == 0)
          goto LABEL_6;
        v8 = (char *)(v8 + (*TagFallback << 7) - 128);
        if ((*TagFallback & 0x80000000) == 0)
        {
          TagFallback = (char *)v12 + 2;
LABEL_6:
          v12 = (google::protobuf::internal *)TagFallback;
          goto LABEL_7;
        }
        TagFallback = (char *)google::protobuf::internal::ReadTagFallback(v12, v8);
        v12 = (google::protobuf::internal *)TagFallback;
        if (!TagFallback)
          return (google::protobuf::internal *)TagFallback;
LABEL_7:
        if (v8 >> 3 != 2)
          break;
        if (v8 != 21)
          goto LABEL_12;
        *((_DWORD *)this + 5) = *(_DWORD *)TagFallback;
        v12 = (google::protobuf::internal *)(TagFallback + 4);
      }
      if (v8 >> 3 != 1 || v8 != 13)
        break;
      *((_DWORD *)this + 4) = *(_DWORD *)TagFallback;
      v12 = (google::protobuf::internal *)(TagFallback + 4);
    }
LABEL_12:
    if (!(_DWORD)v8 || (v8 & 7) == 4)
      break;
    v12 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v8, v5, (google::protobuf::internal::InternalMetadataWithArena *)TagFallback, a3, v6);
    if (!v12)
      return 0;
  }
  *((_DWORD *)a3 + 20) = (_DWORD)v8 - 1;
  return (google::protobuf::internal *)TagFallback;
}

const google::protobuf::UnknownFieldSet *SnippetUI::ImageElement_AspectRatio::InternalSerializeWithCachedSizesToArray(SnippetUI::ImageElement_AspectRatio *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  int v6;
  int v7;
  uint64_t v8;

  if (*((float *)this + 4) != 0.0)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
    {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      v6 = *((_DWORD *)this + 4);
    }
    else
    {
      v6 = *((_DWORD *)this + 4);
    }
    *a2 = 13;
    *(_DWORD *)(a2 + 1) = v6;
    a2 += 5;
  }
  if (*((float *)this + 5) != 0.0)
  {
    if ((unint64_t)a2 >= *(_QWORD *)a3)
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
    v7 = *((_DWORD *)this + 5);
    *a2 = 21;
    *(_DWORD *)(a2 + 1) = v7;
    a2 += 5;
  }
  v8 = *((_QWORD *)this + 1);
  if ((v8 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v8 & 0xFFFFFFFFFFFFFFFELL), (const google::protobuf::UnknownFieldSet *)a2, a3, a4);
  else
    return (const google::protobuf::UnknownFieldSet *)a2;
}

void SnippetUI::ImageElement_AspectRatio::CopyFrom(SnippetUI::ImageElement_AspectRatio *this, const google::protobuf::Message *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  char v5;

  if (a2 != this)
  {
    v5 = *((_BYTE *)this + 8);
    v4 = (SnippetUI::ImageElement_AspectRatio *)((char *)this + 8);
    *((_QWORD *)v4 + 1) = 0;
    if ((v5 & 1) != 0)
      google::protobuf::internal::InternalMetadataWithArena::DoClear(v4);
    SnippetUI::ImageElement_AspectRatio::MergeFrom(this, a2);
  }
}

void SnippetUI::ImageElement_AspectRatio::MergeFrom(SnippetUI::ImageElement_AspectRatio *this, const google::protobuf::Message *lpsrc)
{
  std::string *v4;
  const SnippetUI::ImageElement_AspectRatio *v5;
  google::protobuf::Message *v6;
  char v7;
  std::string v8[2];

  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/ImageElement.pb.cc", 4597);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5)
    SnippetUI::ImageElement_AspectRatio::MergeFrom(this, v5);
  else
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
}

void sub_1BF8DE38C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::ImageElement_AspectRatio::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 24) = a2;
  return this;
}

uint64_t SnippetUI::ImageElement_AspectRatio::GetMetadata(SnippetUI::ImageElement_AspectRatio *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ImageElement_2eproto);
  return qword_1EF581820;
}

uint64_t *SnippetUI::ImageElement_AspectRatio::default_instance(SnippetUI::ImageElement_AspectRatio *this)
{
  if (atomic_load(scc_info_ImageElement_AspectRatio_ImageElement_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_ImageElement_AspectRatio_ImageElement_2eproto);
  return &SnippetUI::_ImageElement_AspectRatio_default_instance_;
}

char *google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::ImageElement_AspectRatio>(google::protobuf::internal::EpsCopyInputStream *this, SnippetUI::ImageElement_AspectRatio *a2, google::protobuf::internal *a3)
{
  int v6;
  const char *v7;
  char *v8;
  char *result;
  int v10;
  int v11;
  int v12;
  BOOL v13;
  int v14;
  int v15;

  v6 = *(char *)a3;
  v7 = (const char *)*(unsigned __int8 *)a3;
  if (v6 < 0)
  {
    result = google::protobuf::internal::ReadSizeFallback(a3, v7);
    if (!result)
      return result;
    v8 = result;
    LODWORD(v7) = v10;
  }
  else
  {
    v8 = (char *)a3 + 1;
  }
  v11 = google::protobuf::internal::EpsCopyInputStream::PushLimit(this, v8, v7);
  v12 = *((_DWORD *)this + 22);
  v13 = __OFSUB__(v12--, 1);
  *((_DWORD *)this + 22) = v12;
  if (v12 < 0 != v13)
    return 0;
  v14 = v11;
  result = (char *)SnippetUI::ImageElement_AspectRatio::_InternalParse(a2, (google::protobuf::internal *)v8, this);
  if (!result)
    return result;
  ++*((_DWORD *)this + 22);
  if (*((_DWORD *)this + 20))
    return 0;
  v15 = *((_DWORD *)this + 7) + v14;
  *((_DWORD *)this + 7) = v15;
  *(_QWORD *)this = *((_QWORD *)this + 1) + (v15 & (v15 >> 31));
  return result;
}

char *google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::OptionalBool>(google::protobuf::internal::EpsCopyInputStream *this, SnippetUI::OptionalBool *a2, google::protobuf::internal *a3)
{
  int v6;
  const char *v7;
  char *v8;
  char *result;
  int v10;
  int v11;
  int v12;
  BOOL v13;
  int v14;
  int v15;

  v6 = *(char *)a3;
  v7 = (const char *)*(unsigned __int8 *)a3;
  if (v6 < 0)
  {
    result = google::protobuf::internal::ReadSizeFallback(a3, v7);
    if (!result)
      return result;
    v8 = result;
    LODWORD(v7) = v10;
  }
  else
  {
    v8 = (char *)a3 + 1;
  }
  v11 = google::protobuf::internal::EpsCopyInputStream::PushLimit(this, v8, v7);
  v12 = *((_DWORD *)this + 22);
  v13 = __OFSUB__(v12--, 1);
  *((_DWORD *)this + 22) = v12;
  if (v12 < 0 != v13)
    return 0;
  v14 = v11;
  result = (char *)SnippetUI::OptionalBool::_InternalParse(a2, (google::protobuf::internal *)v8, this);
  if (!result)
    return result;
  ++*((_DWORD *)this + 22);
  if (*((_DWORD *)this + 20))
    return 0;
  v15 = *((_DWORD *)this + 7) + v14;
  *((_DWORD *)this + 7) = v15;
  *(_QWORD *)this = *((_QWORD *)this + 1) + (v15 & (v15 >> 31));
  return result;
}

SnippetUI::ImageElement_Symbol_Background *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement_Symbol_Background>(google::protobuf::internal::ArenaImpl *this)
{
  SnippetUI::ImageElement_Symbol_Background *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (SnippetUI::ImageElement_Symbol_Background *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x38uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::ImageElement_Symbol_Background>);
    SnippetUI::ImageElement_Symbol_Background::ImageElement_Symbol_Background(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (SnippetUI::ImageElement_Symbol_Background *)operator new();
    SnippetUI::ImageElement_Symbol_Background::ImageElement_Symbol_Background(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_1BF8DE618(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D890](v1, 0x10A1C40668C0A6DLL);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::ImageElement_Symbol_Background>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

void InitDefaultsscc_info_ImageElement_AspectRatio_ImageElement_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/ImageElement.pb.cc", a4);
  qword_1EF583F88 = 0;
  unk_1EF583F90 = 0;
  SnippetUI::_ImageElement_AspectRatio_default_instance_ = (uint64_t)&off_1E792CA30;
  dword_1EF583F98 = 0;
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_ImageElement_AspectRatio_default_instance_, v4);
}

void *SnippetUI::ImageElement_Contact_Avatar::default_instance(SnippetUI::ImageElement_Contact_Avatar *this)
{
  if (atomic_load(scc_info_ImageElement_Contact_Avatar_ImageElement_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_ImageElement_Contact_Avatar_ImageElement_2eproto);
  return &SnippetUI::_ImageElement_Contact_Avatar_default_instance_;
}

void SnippetUI::ImageElement_Contact_Avatar::MergeFrom(int **this, int **a2)
{
  std::string *v4;
  unint64_t v5;
  char v6;
  std::string v7[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/ImageElement.pb.cc", 1553);
    v4 = google::protobuf::internal::LogMessage::operator<<(v7, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v6, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v7[0].__r_.__value_.__l.__data_);
  }
  v5 = (unint64_t)a2[1];
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((google::protobuf::internal::InternalMetadataWithArena *)(this + 1), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>(this + 2, (uint64_t)(a2 + 2));
}

void sub_1BF8DE7F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

SnippetUI::ImageElement_Contact_Avatar *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement_Contact_Avatar>(google::protobuf::internal::ArenaImpl *this)
{
  SnippetUI::ImageElement_Contact_Avatar *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (SnippetUI::ImageElement_Contact_Avatar *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x30uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::ImageElement_Contact_Avatar>);
    SnippetUI::ImageElement_Contact_Avatar::ImageElement_Contact_Avatar(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (SnippetUI::ImageElement_Contact_Avatar *)operator new();
    SnippetUI::ImageElement_Contact_Avatar::ImageElement_Contact_Avatar(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_1BF8DE88C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D890](v1, 0x10A1C40290C9B23);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::ImageElement_Contact_Avatar>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

void InitDefaultsscc_info_ImageElement_Contact_Monogram_ImageElement_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/ImageElement.pb.cc", a4);
  SnippetUI::ImageElement_Contact_Monogram::ImageElement_Contact_Monogram((SnippetUI::ImageElement_Contact_Monogram *)&SnippetUI::_ImageElement_Contact_Monogram_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_ImageElement_Contact_Monogram_default_instance_, v4);
}

SnippetUI::ImageElement_Contact_Monogram *SnippetUI::ImageElement_Contact_Monogram::ImageElement_Contact_Monogram(SnippetUI::ImageElement_Contact_Monogram *this)
{
  *(_QWORD *)this = &off_1E792C370;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 6) = 0;
  if (atomic_load(scc_info_ImageElement_Contact_Monogram_ImageElement_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_ImageElement_Contact_Monogram_ImageElement_2eproto);
  *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  return this;
}

void sub_1BF8DE970(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::ImageElement_Contact_Monogram::~ImageElement_Contact_Monogram(SnippetUI::ImageElement_Contact_Monogram *this)
{
  SnippetUI::ImageElement_Contact_Monogram::~ImageElement_Contact_Monogram(this);
  JUMPOUT(0x1C3B8D890);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_1E792C370;
  v2 = *((_QWORD *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x1C3B8D890](v2, 0x1012C40EC159624);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

SnippetUI::ImageElement_Contact_Monogram *SnippetUI::ImageElement_Contact_Monogram::New(SnippetUI::ImageElement_Contact_Monogram *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement_Contact_Monogram>(0);
}

SnippetUI::ImageElement_Contact_Monogram *SnippetUI::ImageElement_Contact_Monogram::New(SnippetUI::ImageElement_Contact_Monogram *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement_Contact_Monogram>(a2);
}

void SnippetUI::ImageElement_Contact_Monogram::Clear(SnippetUI::ImageElement_Contact_Monogram *this)
{
  uint64_t v1;
  google::protobuf::internal::InternalMetadataWithArena *v2;
  char v3;

  v1 = *((_QWORD *)this + 2);
  if ((uint64_t *)v1 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v1 + 23) < 0)
    {
      **(_BYTE **)v1 = 0;
      *(_QWORD *)(v1 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v1 = 0;
      *(_BYTE *)(v1 + 23) = 0;
    }
  }
  v3 = *((_BYTE *)this + 8);
  v2 = (SnippetUI::ImageElement_Contact_Monogram *)((char *)this + 8);
  if ((v3 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v2);
}

uint64_t SnippetUI::ImageElement_Contact_Monogram::IsInitialized(SnippetUI::ImageElement_Contact_Monogram *this)
{
  return 1;
}

char *SnippetUI::ImageElement_Contact_Monogram::ByteSizeLong(SnippetUI::ImageElement_Contact_Monogram *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  const google::protobuf::UnknownFieldSet *v4;

  v1 = *((_QWORD *)this + 2);
  v2 = *(unsigned __int8 *)(v1 + 23);
  if (*(char *)(v1 + 23) < 0)
  {
    if (*(_QWORD *)(v1 + 8))
      goto LABEL_3;
LABEL_7:
    v4 = 0;
    goto LABEL_8;
  }
  if (!*(_BYTE *)(v1 + 23))
    goto LABEL_7;
LABEL_3:
  v3 = *(_QWORD *)(v1 + 8);
  if ((v2 & 0x80u) == 0)
    v3 = v2;
  v4 = (const google::protobuf::UnknownFieldSet *)(v3 + ((9 * (__clz(v3 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_8:
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::ImageElement_Contact_Monogram *)((char *)this + 8), v4, (_DWORD *)this + 6);
  *((_DWORD *)this + 6) = (_DWORD)v4;
  return (char *)v4;
}

uint64_t SnippetUI::ImageElement_Contact_Monogram::GetCachedSize(SnippetUI::ImageElement_Contact_Monogram *this)
{
  return *((unsigned int *)this + 6);
}

google::protobuf::internal *SnippetUI::ImageElement_Contact_Monogram::_InternalParse(SnippetUI::ImageElement_Contact_Monogram *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  uint64_t *v4;
  std::string **v5;
  google::protobuf::internal::ParseContext *v6;
  google::protobuf::internal *TagFallback;
  char *v8;
  char *v10;
  std::string *v11;
  google::protobuf::internal *v13;

  v13 = a2;
  v4 = (uint64_t *)((char *)this + 8);
  v5 = (std::string **)((char *)this + 16);
  while (1)
  {
    if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v13, *((_DWORD *)a3 + 23)) & 1) != 0)
      return v13;
    TagFallback = (google::protobuf::internal *)((char *)v13 + 1);
    v8 = (char *)*(unsigned __int8 *)v13;
    if ((*(char *)v13 & 0x80000000) == 0)
      goto LABEL_6;
    v8 = (char *)(v8 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v13 + 2);
LABEL_6:
      v13 = TagFallback;
      goto LABEL_7;
    }
    TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v13, v8);
    v13 = TagFallback;
    if (!TagFallback)
      return TagFallback;
LABEL_7:
    if ((_DWORD)v8 == 10)
    {
      v11 = *v5;
      if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      {
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        v11 = *v5;
        TagFallback = v13;
      }
      v10 = google::protobuf::internal::InlineGreedyStringParserUTF8(v11, (std::string::value_type *)TagFallback, (uint64_t)a3, (google::protobuf::internal *)"SnippetUI.ImageElement.Contact.Monogram.letters");
      goto LABEL_16;
    }
    if (!(_DWORD)v8 || (v8 & 7) == 4)
      break;
    v10 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v8, v4, TagFallback, a3, v6);
LABEL_16:
    v13 = (google::protobuf::internal *)v10;
    if (!v10)
      return 0;
  }
  *((_DWORD *)a3 + 20) = (_DWORD)v8 - 1;
  return TagFallback;
}

const google::protobuf::UnknownFieldSet *SnippetUI::ImageElement_Contact_Monogram::InternalSerializeWithCachedSizesToArray(SnippetUI::ImageElement_Contact_Monogram *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  google::protobuf::internal *v7;
  const char *v8;
  uint64_t v9;

  v7 = (google::protobuf::internal *)*((_QWORD *)this + 2);
  if (*((char *)v7 + 23) < 0)
  {
    v8 = (const char *)*((_QWORD *)v7 + 1);
    if (!v8)
      goto LABEL_7;
    v7 = *(google::protobuf::internal **)v7;
    goto LABEL_6;
  }
  v8 = (const char *)*((unsigned __int8 *)v7 + 23);
  if (*((_BYTE *)v7 + 23))
  {
LABEL_6:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v7, v8, 1, (google::protobuf::internal *)"SnippetUI.ImageElement.Contact.Monogram.letters");
    a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 1, *((_QWORD *)this + 2), (char *)a2);
  }
LABEL_7:
  v9 = *((_QWORD *)this + 1);
  if ((v9 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v9 & 0xFFFFFFFFFFFFFFFELL), a2, a3, a4);
  else
    return a2;
}

void SnippetUI::ImageElement_Contact_Monogram::CopyFrom(SnippetUI::ImageElement_Contact_Monogram *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    SnippetUI::ImageElement_Contact_Monogram::Clear(this);
    SnippetUI::ImageElement_Contact_Monogram::MergeFrom(this, a2);
  }
}

void SnippetUI::ImageElement_Contact_Monogram::MergeFrom(SnippetUI::ImageElement_Contact_Monogram *this, const google::protobuf::Message *lpsrc)
{
  std::string *v4;
  const SnippetUI::ImageElement_Contact_Monogram *v5;
  google::protobuf::Message *v6;
  char v7;
  std::string v8[2];

  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/ImageElement.pb.cc", 1340);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5)
    SnippetUI::ImageElement_Contact_Monogram::MergeFrom(this, v5);
  else
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
}

void sub_1BF8DED3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::ImageElement_Contact_Monogram::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 24) = a2;
  return this;
}

uint64_t SnippetUI::ImageElement_Contact_Monogram::GetMetadata(SnippetUI::ImageElement_Contact_Monogram *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ImageElement_2eproto);
  return qword_1EF581790;
}

void *SnippetUI::ImageElement_Contact_Monogram::default_instance(SnippetUI::ImageElement_Contact_Monogram *this)
{
  if (atomic_load(scc_info_ImageElement_Contact_Monogram_ImageElement_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_ImageElement_Contact_Monogram_ImageElement_2eproto);
  return &SnippetUI::_ImageElement_Contact_Monogram_default_instance_;
}

void SnippetUI::ImageElement_Contact_Monogram::MergeFrom(SnippetUI::ImageElement_Contact_Monogram *this, const SnippetUI::ImageElement_Contact_Monogram *a2)
{
  std::string *v4;
  uint64_t v5;
  uint64_t v6;
  std::string *v7;
  std::string **v8;
  std::string *v9;
  char v10;
  std::string v11[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/ImageElement.pb.cc", 1355);
    v4 = google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v10, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v11[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::ImageElement_Contact_Monogram *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  v6 = *((_QWORD *)a2 + 2);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(_QWORD *)(v6 + 8))
      return;
  }
  else if (!*(_BYTE *)(v6 + 23))
  {
    return;
  }
  v9 = (std::string *)*((_QWORD *)this + 2);
  v8 = (std::string **)((char *)this + 16);
  v7 = v9;
  if (v9 != (std::string *)v6)
  {
    if (v7 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v8, v6);
    else
      std::string::operator=(v7, (const std::string *)v6);
  }
}

void sub_1BF8DEE88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

SnippetUI::ImageElement_Contact_Monogram *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement_Contact_Monogram>(google::protobuf::internal::ArenaImpl *this)
{
  SnippetUI::ImageElement_Contact_Monogram *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (SnippetUI::ImageElement_Contact_Monogram *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x20uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::ImageElement_Contact_Monogram>);
    SnippetUI::ImageElement_Contact_Monogram::ImageElement_Contact_Monogram(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (SnippetUI::ImageElement_Contact_Monogram *)operator new();
    SnippetUI::ImageElement_Contact_Monogram::ImageElement_Contact_Monogram(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_1BF8DEF24(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D890](v1, 0x10A1C4084265165);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::ImageElement_Contact_Monogram>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

SnippetUI::ImageElement_Contact *SnippetUI::ImageElement_Contact::ImageElement_Contact(SnippetUI::ImageElement_Contact *this)
{
  *(_QWORD *)this = &off_1E792C4F0;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 8) = 0;
  if (atomic_load(scc_info_ImageElement_Contact_ImageElement_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_ImageElement_Contact_ImageElement_2eproto);
  *((_DWORD *)this + 4) = 0;
  *((_DWORD *)this + 9) = 0;
  return this;
}

void sub_1BF8DF028(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::ImageElement_Contact::~ImageElement_Contact(SnippetUI::ImageElement_Contact *this)
{
  SnippetUI::ImageElement_Contact::~ImageElement_Contact(this);
  JUMPOUT(0x1C3B8D890);
}

{
  *(_QWORD *)this = &off_1E792C4F0;
  if (*((_DWORD *)this + 9))
    SnippetUI::ImageElement_Contact::clear_content((uint64_t)this);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

SnippetUI::ImageElement_Contact *SnippetUI::ImageElement_Contact::New(SnippetUI::ImageElement_Contact *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement_Contact>(0);
}

SnippetUI::ImageElement_Contact *SnippetUI::ImageElement_Contact::New(SnippetUI::ImageElement_Contact *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement_Contact>(a2);
}

void SnippetUI::ImageElement_Contact::Clear(SnippetUI::ImageElement_Contact *this)
{
  google::protobuf::internal::InternalMetadataWithArena *v2;
  char v3;

  *((_DWORD *)this + 4) = 0;
  SnippetUI::ImageElement_Contact::clear_content((uint64_t)this);
  v3 = *((_BYTE *)this + 8);
  v2 = (SnippetUI::ImageElement_Contact *)((char *)this + 8);
  if ((v3 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v2);
}

uint64_t SnippetUI::ImageElement_Contact::IsInitialized(SnippetUI::ImageElement_Contact *this)
{
  return 1;
}

char *SnippetUI::ImageElement_Contact::ByteSizeLong(SnippetUI::ImageElement_Contact *this)
{
  int v2;
  uint64_t v3;
  int v4;
  char *v5;

  v2 = *((_DWORD *)this + 4);
  if (v2)
  {
    if (v2 < 0)
      v3 = 11;
    else
      v3 = ((9 * (__clz(v2 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
  else
  {
    v3 = 0;
  }
  v4 = *((_DWORD *)this + 9);
  if (v4 == 2)
  {
    v5 = SnippetUI::ImageElement_Contact_Avatar::ByteSizeLong(*((SnippetUI::ImageElement_Contact_Avatar **)this + 3));
  }
  else
  {
    if (v4 != 1)
      goto LABEL_11;
    v5 = SnippetUI::ImageElement_Contact_Monogram::ByteSizeLong(*((SnippetUI::ImageElement_Contact_Monogram **)this + 3));
  }
  v3 += (uint64_t)&v5[((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6) + 1];
LABEL_11:
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::ImageElement_Contact *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)v3, (_DWORD *)this + 8);
  *((_DWORD *)this + 8) = v3;
  return (char *)v3;
}

uint64_t SnippetUI::ImageElement_Contact::GetCachedSize(SnippetUI::ImageElement_Contact *this)
{
  return *((unsigned int *)this + 8);
}

google::protobuf::internal *SnippetUI::ImageElement_Contact::_InternalParse(SnippetUI::ImageElement_Contact *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  uint64_t *v5;
  google::protobuf::internal::ParseContext *v6;
  google::protobuf::internal *TagFallback;
  char *v8;
  unsigned int v9;
  google::protobuf::internal *v12;
  unint64_t v13;
  int v14;
  SnippetUI::ImageElement_Contact_Avatar *v15;
  SnippetUI::ImageElement_Contact_Monogram *v16;
  unsigned int v17;
  char *v18;
  unsigned int v19;
  char *v20;
  char *SizeFallback;
  unsigned int v22;
  int v23;
  int v24;
  BOOL v25;
  int v26;
  google::protobuf::internal *v27;
  char *v28;
  unsigned int v29;
  int v30;
  int v31;
  int v32;
  google::protobuf::internal *v34;

  v34 = a2;
  v5 = (uint64_t *)((char *)this + 8);
  while (1)
  {
    while (1)
    {
      while (1)
      {
        if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v34, *((_DWORD *)a3 + 23)) & 1) != 0)return v34;
        TagFallback = (google::protobuf::internal *)((char *)v34 + 1);
        v8 = (char *)*(unsigned __int8 *)v34;
        if ((*(char *)v34 & 0x80000000) == 0)
          goto LABEL_6;
        v8 = (char *)(v8 + (*(unsigned __int8 *)TagFallback << 7) - 128);
        if ((*(char *)TagFallback & 0x80000000) == 0)
        {
          TagFallback = (google::protobuf::internal *)((char *)v34 + 2);
LABEL_6:
          v34 = TagFallback;
          goto LABEL_7;
        }
        TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v34, v8);
        v34 = TagFallback;
        if (!TagFallback)
          return TagFallback;
LABEL_7:
        v9 = v8 >> 3;
        if (v8 >> 3 != 3)
          break;
        if (v8 != 24)
          goto LABEL_13;
        v12 = (google::protobuf::internal *)((char *)TagFallback + 1);
        LODWORD(v13) = *(unsigned __int8 *)TagFallback;
        if ((*(char *)TagFallback & 0x80000000) == 0)
          goto LABEL_23;
        v14 = *(char *)v12;
        v13 = v13 + (v14 << 7) - 128;
        if ((v14 & 0x80000000) == 0)
        {
          v12 = (google::protobuf::internal *)((char *)TagFallback + 2);
LABEL_23:
          v34 = v12;
          goto LABEL_24;
        }
        v34 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(TagFallback, v13);
        if (!v34)
          return 0;
LABEL_24:
        *((_DWORD *)this + 4) = v13;
      }
      if (v9 != 2)
        break;
      if (v8 != 18)
        goto LABEL_13;
      if (*((_DWORD *)this + 9) == 2)
      {
        v15 = (SnippetUI::ImageElement_Contact_Avatar *)*((_QWORD *)this + 3);
      }
      else
      {
        SnippetUI::ImageElement_Contact::clear_content((uint64_t)this);
        *((_DWORD *)this + 9) = 2;
        v15 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement_Contact_Avatar>(0);
        *((_QWORD *)this + 3) = v15;
        TagFallback = v34;
      }
      v17 = *(unsigned __int8 *)TagFallback;
      if (*(char *)TagFallback < 0)
      {
        SizeFallback = google::protobuf::internal::ReadSizeFallback(TagFallback, (const char *)*(unsigned __int8 *)TagFallback);
        if (!SizeFallback)
          return 0;
        v18 = SizeFallback;
        v17 = v22;
      }
      else
      {
        v18 = (char *)TagFallback + 1;
      }
      v23 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v18, v17);
      v24 = *((_DWORD *)a3 + 22);
      v25 = __OFSUB__(v24--, 1);
      *((_DWORD *)a3 + 22) = v24;
      if (v24 < 0 != v25)
        return 0;
      v26 = v23;
      v27 = SnippetUI::ImageElement_Contact_Avatar::_InternalParse(v15, (google::protobuf::internal *)v18, a3);
      if (!v27)
        return 0;
LABEL_47:
      ++*((_DWORD *)a3 + 22);
      if (*((_DWORD *)a3 + 20))
        return 0;
      v32 = *((_DWORD *)a3 + 7) + v26;
      *((_DWORD *)a3 + 7) = v32;
      *(_QWORD *)a3 = *((_QWORD *)a3 + 1) + (v32 & (v32 >> 31));
      v34 = v27;
    }
    if (v9 == 1 && v8 == 10)
    {
      if (*((_DWORD *)this + 9) == 1)
      {
        v16 = (SnippetUI::ImageElement_Contact_Monogram *)*((_QWORD *)this + 3);
      }
      else
      {
        SnippetUI::ImageElement_Contact::clear_content((uint64_t)this);
        *((_DWORD *)this + 9) = 1;
        v16 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement_Contact_Monogram>(0);
        *((_QWORD *)this + 3) = v16;
        TagFallback = v34;
      }
      v19 = *(unsigned __int8 *)TagFallback;
      if (*(char *)TagFallback < 0)
      {
        v28 = google::protobuf::internal::ReadSizeFallback(TagFallback, (const char *)*(unsigned __int8 *)TagFallback);
        if (!v28)
          return 0;
        v20 = v28;
        v19 = v29;
      }
      else
      {
        v20 = (char *)TagFallback + 1;
      }
      v30 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v20, v19);
      v31 = *((_DWORD *)a3 + 22);
      v25 = __OFSUB__(v31--, 1);
      *((_DWORD *)a3 + 22) = v31;
      if (v31 < 0 != v25)
        return 0;
      v26 = v30;
      v27 = SnippetUI::ImageElement_Contact_Monogram::_InternalParse(v16, (google::protobuf::internal *)v20, a3);
      if (!v27)
        return 0;
      goto LABEL_47;
    }
LABEL_13:
    if (!(_DWORD)v8 || (v8 & 7) == 4)
      break;
    v34 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v8, v5, TagFallback, a3, v6);
    if (!v34)
      return 0;
  }
  *((_DWORD *)a3 + 20) = (_DWORD)v8 - 1;
  return TagFallback;
}

const google::protobuf::UnknownFieldSet *SnippetUI::ImageElement_Contact::InternalSerializeWithCachedSizesToArray(SnippetUI::ImageElement_Contact *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  int v6;
  SnippetUI::ImageElement_Contact_Monogram *v7;
  unsigned int v8;
  unsigned __int8 *v9;
  unsigned int v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  unsigned int v13;
  unsigned int v14;
  SnippetUI::ImageElement_Contact_Avatar *v15;
  unsigned int v16;
  unsigned __int8 *v17;
  unsigned int v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unint64_t v24;
  unsigned __int8 *v25;
  unsigned __int8 *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;

  v6 = *((_DWORD *)this + 9);
  if (v6 == 1)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
    v7 = (SnippetUI::ImageElement_Contact_Monogram *)*((_QWORD *)this + 3);
    *a2 = 10;
    v8 = *((_DWORD *)v7 + 6);
    if (v8 > 0x7F)
    {
      a2[1] = v8 | 0x80;
      v10 = v8 >> 7;
      if (v8 >> 14)
      {
        v11 = (unsigned __int8 *)(a2 + 2);
        do
        {
          v12 = v11;
          *v11++ = v10 | 0x80;
          v13 = v10 >> 7;
          v14 = v10 >> 14;
          v10 >>= 7;
        }
        while (v14);
        v9 = v12 + 2;
        *v11 = v13;
      }
      else
      {
        a2[2] = v10;
        v9 = (unsigned __int8 *)(a2 + 3);
      }
    }
    else
    {
      a2[1] = v8;
      v9 = (unsigned __int8 *)(a2 + 2);
    }
    a2 = (char *)SnippetUI::ImageElement_Contact_Monogram::InternalSerializeWithCachedSizesToArray(v7, (google::protobuf::UnknownFieldSet *)v9, a3, a4);
    v6 = *((_DWORD *)this + 9);
  }
  if (v6 == 2)
  {
    if ((unint64_t)a2 >= *(_QWORD *)a3)
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
    v15 = (SnippetUI::ImageElement_Contact_Avatar *)*((_QWORD *)this + 3);
    *a2 = 18;
    v16 = *((_DWORD *)v15 + 10);
    if (v16 > 0x7F)
    {
      a2[1] = v16 | 0x80;
      v18 = v16 >> 7;
      if (v16 >> 14)
      {
        v19 = (unsigned __int8 *)(a2 + 2);
        do
        {
          v20 = v19;
          *v19++ = v18 | 0x80;
          v21 = v18 >> 7;
          v22 = v18 >> 14;
          v18 >>= 7;
        }
        while (v22);
        v17 = v20 + 2;
        *v19 = v21;
      }
      else
      {
        a2[2] = v18;
        v17 = (unsigned __int8 *)(a2 + 3);
      }
    }
    else
    {
      a2[1] = v16;
      v17 = (unsigned __int8 *)(a2 + 2);
    }
    a2 = (char *)SnippetUI::ImageElement_Contact_Avatar::InternalSerializeWithCachedSizesToArray(v15, (google::protobuf::UnknownFieldSet *)v17, a3, a4);
  }
  v23 = *((_DWORD *)this + 4);
  if (v23)
  {
    if ((unint64_t)a2 >= *(_QWORD *)a3)
    {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      v23 = *((_DWORD *)this + 4);
    }
    *a2 = 24;
    if (v23 > 0x7F)
    {
      a2[1] = v23 | 0x80;
      v24 = (unint64_t)(int)v23 >> 7;
      if (v23 >> 14)
      {
        v25 = (unsigned __int8 *)(a2 + 2);
        do
        {
          v26 = v25;
          *v25++ = v24 | 0x80;
          v27 = v24 >> 7;
          v28 = v24 >> 14;
          v24 >>= 7;
        }
        while (v28);
        a2 = (char *)(v26 + 2);
        *v25 = v27;
      }
      else
      {
        a2[2] = v24;
        a2 += 3;
      }
    }
    else
    {
      a2[1] = v23;
      a2 += 2;
    }
  }
  v29 = *((_QWORD *)this + 1);
  if ((v29 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v29 & 0xFFFFFFFFFFFFFFFELL), (const google::protobuf::UnknownFieldSet *)a2, a3, a4);
  else
    return (const google::protobuf::UnknownFieldSet *)a2;
}

void SnippetUI::ImageElement_Contact::CopyFrom(SnippetUI::ImageElement_Contact *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    SnippetUI::ImageElement_Contact::Clear(this);
    SnippetUI::ImageElement_Contact::MergeFrom(this, a2);
  }
}

void SnippetUI::ImageElement_Contact::MergeFrom(SnippetUI::ImageElement_Contact *this, const google::protobuf::Message *lpsrc)
{
  std::string *v4;
  const SnippetUI::ImageElement_Contact *v5;
  google::protobuf::Message *v6;
  char v7;
  std::string v8[2];

  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/ImageElement.pb.cc", 1853);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5)
    SnippetUI::ImageElement_Contact::MergeFrom(this, v5);
  else
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
}

void sub_1BF8DF758(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::ImageElement_Contact::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 32) = a2;
  return this;
}

uint64_t SnippetUI::ImageElement_Contact::GetMetadata(SnippetUI::ImageElement_Contact *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ImageElement_2eproto);
  return qword_1EF5817B0;
}

void *SnippetUI::ImageElement_Contact::default_instance(SnippetUI::ImageElement_Contact *this)
{
  if (atomic_load(scc_info_ImageElement_Contact_ImageElement_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_ImageElement_Contact_ImageElement_2eproto);
  return &SnippetUI::_ImageElement_Contact_default_instance_;
}

void SnippetUI::ImageElement_Contact::MergeFrom(SnippetUI::ImageElement_Contact *this, const SnippetUI::ImageElement_Contact *a2)
{
  std::string *v4;
  uint64_t v5;
  int v6;
  int v7;
  SnippetUI::ImageElement_Contact_Monogram *v8;
  int **v9;
  const SnippetUI::ImageElement_Contact_Monogram *v10;
  int **v11;
  char v12;
  std::string v13[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/ImageElement.pb.cc", 1868);
    v4 = google::protobuf::internal::LogMessage::operator<<(v13, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v12, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v13[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::ImageElement_Contact *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  v6 = *((_DWORD *)a2 + 4);
  if (v6)
    *((_DWORD *)this + 4) = v6;
  v7 = *((_DWORD *)a2 + 9);
  if (v7 != 2)
  {
    if (v7 != 1)
      return;
    if (*((_DWORD *)this + 9) == 1)
    {
      v8 = (SnippetUI::ImageElement_Contact_Monogram *)*((_QWORD *)this + 3);
    }
    else
    {
      SnippetUI::ImageElement_Contact::clear_content((uint64_t)this);
      *((_DWORD *)this + 9) = 1;
      v8 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement_Contact_Monogram>(0);
      *((_QWORD *)this + 3) = v8;
      if (*((_DWORD *)a2 + 9) != 1)
      {
        v10 = (const SnippetUI::ImageElement_Contact_Monogram *)&SnippetUI::_ImageElement_Contact_Monogram_default_instance_;
        goto LABEL_18;
      }
    }
    v10 = (const SnippetUI::ImageElement_Contact_Monogram *)*((_QWORD *)a2 + 3);
LABEL_18:
    SnippetUI::ImageElement_Contact_Monogram::MergeFrom(v8, v10);
    return;
  }
  if (*((_DWORD *)this + 9) == 2)
  {
    v9 = (int **)*((_QWORD *)this + 3);
  }
  else
  {
    SnippetUI::ImageElement_Contact::clear_content((uint64_t)this);
    *((_DWORD *)this + 9) = 2;
    v9 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement_Contact_Avatar>(0);
    *((_QWORD *)this + 3) = v9;
    if (*((_DWORD *)a2 + 9) != 2)
    {
      v11 = (int **)&SnippetUI::_ImageElement_Contact_Avatar_default_instance_;
      goto LABEL_20;
    }
  }
  v11 = (int **)*((_QWORD *)a2 + 3);
LABEL_20:
  SnippetUI::ImageElement_Contact_Avatar::MergeFrom(v9, v11);
}

void sub_1BF8DF91C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::ImageElement_Contact::clear_content(uint64_t this)
{
  uint64_t v1;
  int v2;

  v1 = this;
  v2 = *(_DWORD *)(this + 36);
  if (v2 == 2 || v2 == 1)
  {
    this = *(_QWORD *)(this + 24);
    if (this)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
  }
  *(_DWORD *)(v1 + 36) = 0;
  return this;
}

SnippetUI::ImageElement_Contact *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement_Contact>(google::protobuf::internal::ArenaImpl *this)
{
  SnippetUI::ImageElement_Contact *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (SnippetUI::ImageElement_Contact *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x28uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::ImageElement_Contact>);
    SnippetUI::ImageElement_Contact::ImageElement_Contact(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (SnippetUI::ImageElement_Contact *)operator new();
    SnippetUI::ImageElement_Contact::ImageElement_Contact(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_1BF8DFA00(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D890](v1, 0x10A1C40E7D3C9D8);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::ImageElement_Contact>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

void InitDefaultsscc_info_ImageElement_AppIcon_ImageElement_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/ImageElement.pb.cc", a4);
  SnippetUI::ImageElement_AppIcon::ImageElement_AppIcon((SnippetUI::ImageElement_AppIcon *)&SnippetUI::_ImageElement_AppIcon_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_ImageElement_AppIcon_default_instance_, v4);
}

SnippetUI::ImageElement_AppIcon *SnippetUI::ImageElement_AppIcon::ImageElement_AppIcon(SnippetUI::ImageElement_AppIcon *this)
{
  *(_QWORD *)this = &off_1E792C5B0;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 7) = 0;
  if (atomic_load(scc_info_ImageElement_AppIcon_ImageElement_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_ImageElement_AppIcon_ImageElement_2eproto);
  *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  *((_DWORD *)this + 6) = 0;
  return this;
}

void sub_1BF8DFB30(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::ImageElement_AppIcon::~ImageElement_AppIcon(SnippetUI::ImageElement_AppIcon *this)
{
  SnippetUI::ImageElement_AppIcon::~ImageElement_AppIcon(this);
  JUMPOUT(0x1C3B8D890);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_1E792C5B0;
  v2 = *((_QWORD *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x1C3B8D890](v2, 0x1012C40EC159624);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

SnippetUI::ImageElement_AppIcon *SnippetUI::ImageElement_AppIcon::New(SnippetUI::ImageElement_AppIcon *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement_AppIcon>(0);
}

SnippetUI::ImageElement_AppIcon *SnippetUI::ImageElement_AppIcon::New(SnippetUI::ImageElement_AppIcon *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement_AppIcon>(a2);
}

void SnippetUI::ImageElement_AppIcon::Clear(SnippetUI::ImageElement_AppIcon *this)
{
  uint64_t v1;
  google::protobuf::internal::InternalMetadataWithArena *v2;
  char v3;

  v1 = *((_QWORD *)this + 2);
  if ((uint64_t *)v1 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v1 + 23) < 0)
    {
      **(_BYTE **)v1 = 0;
      *(_QWORD *)(v1 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v1 = 0;
      *(_BYTE *)(v1 + 23) = 0;
    }
  }
  v3 = *((_BYTE *)this + 8);
  v2 = (SnippetUI::ImageElement_AppIcon *)((char *)this + 8);
  *((_DWORD *)v2 + 4) = 0;
  if ((v3 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v2);
}

uint64_t SnippetUI::ImageElement_AppIcon::IsInitialized(SnippetUI::ImageElement_AppIcon *this)
{
  return 1;
}

char *SnippetUI::ImageElement_AppIcon::ByteSizeLong(SnippetUI::ImageElement_AppIcon *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  const google::protobuf::UnknownFieldSet *v4;
  int v5;
  uint64_t v6;

  v1 = *((_QWORD *)this + 2);
  v2 = *(unsigned __int8 *)(v1 + 23);
  if (*(char *)(v1 + 23) < 0)
  {
    if (*(_QWORD *)(v1 + 8))
      goto LABEL_3;
LABEL_7:
    v4 = 0;
    goto LABEL_8;
  }
  if (!*(_BYTE *)(v1 + 23))
    goto LABEL_7;
LABEL_3:
  v3 = *(_QWORD *)(v1 + 8);
  if ((v2 & 0x80u) == 0)
    v3 = v2;
  v4 = (const google::protobuf::UnknownFieldSet *)(v3 + ((9 * (__clz(v3 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_8:
  v5 = *((_DWORD *)this + 6);
  if (v5)
  {
    if (v5 < 0)
      v6 = 11;
    else
      v6 = ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6) + 1;
    v4 = (const google::protobuf::UnknownFieldSet *)((char *)v4 + v6);
  }
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::ImageElement_AppIcon *)((char *)this + 8), v4, (_DWORD *)this + 7);
  *((_DWORD *)this + 7) = (_DWORD)v4;
  return (char *)v4;
}

uint64_t SnippetUI::ImageElement_AppIcon::GetCachedSize(SnippetUI::ImageElement_AppIcon *this)
{
  return *((unsigned int *)this + 7);
}

google::protobuf::internal *SnippetUI::ImageElement_AppIcon::_InternalParse(SnippetUI::ImageElement_AppIcon *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  std::string **v5;
  uint64_t *v6;
  google::protobuf::internal::ParseContext *v7;
  google::protobuf::internal *TagFallback;
  char *v9;
  char *v12;
  google::protobuf::internal *v13;
  unint64_t v14;
  int v15;
  std::string *v16;
  google::protobuf::internal *v18;

  v18 = a2;
  v5 = (std::string **)((char *)this + 16);
  v6 = (uint64_t *)((char *)this + 8);
  while (1)
  {
    while (1)
    {
      if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v18, *((_DWORD *)a3 + 23)) & 1) != 0)
        return v18;
      TagFallback = (google::protobuf::internal *)((char *)v18 + 1);
      v9 = (char *)*(unsigned __int8 *)v18;
      if ((*(char *)v18 & 0x80000000) == 0)
        goto LABEL_6;
      v9 = (char *)(v9 + (*(unsigned __int8 *)TagFallback << 7) - 128);
      if ((*(char *)TagFallback & 0x80000000) == 0)
      {
        TagFallback = (google::protobuf::internal *)((char *)v18 + 2);
LABEL_6:
        v18 = TagFallback;
        goto LABEL_7;
      }
      TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v18, v9);
      v18 = TagFallback;
      if (!TagFallback)
        return TagFallback;
LABEL_7:
      if (v9 >> 3 != 2)
        break;
      if (v9 != 16)
        goto LABEL_12;
      v13 = (google::protobuf::internal *)((char *)TagFallback + 1);
      LODWORD(v14) = *(unsigned __int8 *)TagFallback;
      if ((*(char *)TagFallback & 0x80000000) == 0)
        goto LABEL_21;
      v15 = *(char *)v13;
      v14 = v14 + (v15 << 7) - 128;
      if ((v15 & 0x80000000) == 0)
      {
        v13 = (google::protobuf::internal *)((char *)TagFallback + 2);
LABEL_21:
        v18 = v13;
        goto LABEL_22;
      }
      v18 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(TagFallback, v14);
      if (!v18)
        return 0;
LABEL_22:
      *((_DWORD *)this + 6) = v14;
    }
    if (v9 >> 3 == 1 && v9 == 10)
    {
      v16 = *v5;
      if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      {
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        v16 = *v5;
        TagFallback = v18;
      }
      v12 = google::protobuf::internal::InlineGreedyStringParserUTF8(v16, (std::string::value_type *)TagFallback, (uint64_t)a3, (google::protobuf::internal *)"SnippetUI.ImageElement.AppIcon.application_bundle_identifier");
      goto LABEL_26;
    }
LABEL_12:
    if (!(_DWORD)v9 || (v9 & 7) == 4)
      break;
    v12 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v9, v6, TagFallback, a3, v7);
LABEL_26:
    v18 = (google::protobuf::internal *)v12;
    if (!v12)
      return 0;
  }
  *((_DWORD *)a3 + 20) = (_DWORD)v9 - 1;
  return TagFallback;
}

const google::protobuf::UnknownFieldSet *SnippetUI::ImageElement_AppIcon::InternalSerializeWithCachedSizesToArray(SnippetUI::ImageElement_AppIcon *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  google::protobuf::internal *v7;
  const char *v8;
  unsigned int v9;
  unint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v7 = (google::protobuf::internal *)*((_QWORD *)this + 2);
  if (*((char *)v7 + 23) < 0)
  {
    v8 = (const char *)*((_QWORD *)v7 + 1);
    if (!v8)
      goto LABEL_7;
    v7 = *(google::protobuf::internal **)v7;
    goto LABEL_6;
  }
  v8 = (const char *)*((unsigned __int8 *)v7 + 23);
  if (*((_BYTE *)v7 + 23))
  {
LABEL_6:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v7, v8, 1, (google::protobuf::internal *)"SnippetUI.ImageElement.AppIcon.application_bundle_identifier");
    a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 1, *((_QWORD *)this + 2), (char *)a2);
  }
LABEL_7:
  v9 = *((_DWORD *)this + 6);
  if (v9)
  {
    if ((unint64_t)a2 >= *(_QWORD *)a3)
    {
      a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      v9 = *((_DWORD *)this + 6);
    }
    *(_BYTE *)a2 = 16;
    if (v9 > 0x7F)
    {
      *((_BYTE *)a2 + 1) = v9 | 0x80;
      v10 = (unint64_t)(int)v9 >> 7;
      if (v9 >> 14)
      {
        v11 = (char *)a2 + 2;
        do
        {
          v12 = v11;
          *v11++ = v10 | 0x80;
          v13 = v10 >> 7;
          v14 = v10 >> 14;
          v10 >>= 7;
        }
        while (v14);
        a2 = (google::protobuf::UnknownFieldSet *)(v12 + 2);
        *v11 = v13;
      }
      else
      {
        *((_BYTE *)a2 + 2) = v10;
        a2 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 3);
      }
    }
    else
    {
      *((_BYTE *)a2 + 1) = v9;
      a2 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 2);
    }
  }
  v15 = *((_QWORD *)this + 1);
  if ((v15 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v15 & 0xFFFFFFFFFFFFFFFELL), a2, a3, a4);
  else
    return a2;
}

void SnippetUI::ImageElement_AppIcon::CopyFrom(SnippetUI::ImageElement_AppIcon *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    SnippetUI::ImageElement_AppIcon::Clear(this);
    SnippetUI::ImageElement_AppIcon::MergeFrom(this, a2);
  }
}

void SnippetUI::ImageElement_AppIcon::MergeFrom(SnippetUI::ImageElement_AppIcon *this, const google::protobuf::Message *lpsrc)
{
  std::string *v4;
  const SnippetUI::ImageElement_AppIcon *v5;
  google::protobuf::Message *v6;
  char v7;
  std::string v8[2];

  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/ImageElement.pb.cc", 2087);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5)
    SnippetUI::ImageElement_AppIcon::MergeFrom(this, v5);
  else
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
}

void sub_1BF8E0030(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::ImageElement_AppIcon::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 28) = a2;
  return this;
}

uint64_t SnippetUI::ImageElement_AppIcon::GetMetadata(SnippetUI::ImageElement_AppIcon *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ImageElement_2eproto);
  return qword_1EF5817C0;
}

void *SnippetUI::ImageElement_AppIcon::default_instance(SnippetUI::ImageElement_AppIcon *this)
{
  if (atomic_load(scc_info_ImageElement_AppIcon_ImageElement_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_ImageElement_AppIcon_ImageElement_2eproto);
  return &SnippetUI::_ImageElement_AppIcon_default_instance_;
}

void SnippetUI::ImageElement_AppIcon::MergeFrom(SnippetUI::ImageElement_AppIcon *this, const SnippetUI::ImageElement_AppIcon *a2)
{
  std::string *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  int v8;
  char v9;
  std::string v10[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/ImageElement.pb.cc", 2102);
    v4 = google::protobuf::internal::LogMessage::operator<<(v10, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v9, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v10[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::ImageElement_AppIcon *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  v6 = *((_QWORD *)a2 + 2);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(_QWORD *)(v6 + 8))
      goto LABEL_13;
  }
  else if (!*(_BYTE *)(v6 + 23))
  {
    goto LABEL_13;
  }
  v7 = (uint64_t *)*((_QWORD *)this + 2);
  if (v7 != (uint64_t *)v6)
  {
    if (v7 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, v6);
    else
      std::string::operator=(*((std::string **)this + 2), (const std::string *)v6);
  }
LABEL_13:
  v8 = *((_DWORD *)a2 + 6);
  if (v8)
    *((_DWORD *)this + 6) = v8;
}

void sub_1BF8E018C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

SnippetUI::ImageElement_AppIcon *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement_AppIcon>(google::protobuf::internal::ArenaImpl *this)
{
  SnippetUI::ImageElement_AppIcon *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (SnippetUI::ImageElement_AppIcon *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x20uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::ImageElement_AppIcon>);
    SnippetUI::ImageElement_AppIcon::ImageElement_AppIcon(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (SnippetUI::ImageElement_AppIcon *)operator new();
    SnippetUI::ImageElement_AppIcon::ImageElement_AppIcon(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_1BF8E0228(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D890](v1, 0x10A1C406A65A86DLL);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::ImageElement_AppIcon>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

void InitDefaultsscc_info_ImageElement_Symbol_ImageElement_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/ImageElement.pb.cc", a4);
  SnippetUI::ImageElement_Symbol::ImageElement_Symbol((SnippetUI::ImageElement_Symbol *)&SnippetUI::_ImageElement_Symbol_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_ImageElement_Symbol_default_instance_, v4);
  qword_1ED1D5448 = (uint64_t)&SnippetUI::_Color_default_instance_;
  unk_1ED1D5450 = &SnippetUI::_ImageElement_Symbol_Background_default_instance_;
}

SnippetUI::ImageElement_Symbol *SnippetUI::ImageElement_Symbol::ImageElement_Symbol(SnippetUI::ImageElement_Symbol *this)
{
  *(_QWORD *)this = &off_1E792C970;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 14) = 0;
  if (atomic_load(scc_info_ImageElement_Symbol_ImageElement_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_ImageElement_Symbol_ImageElement_2eproto);
  *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 4) = 0;
  return this;
}

void sub_1BF8E03A0(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::ImageElement_Symbol::~ImageElement_Symbol(SnippetUI::ImageElement_Symbol *this)
{
  SnippetUI::ImageElement_Symbol::~ImageElement_Symbol(this);
  JUMPOUT(0x1C3B8D890);
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)this = &off_1E792C970;
  v2 = *((_QWORD *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x1C3B8D890](v2, 0x1012C40EC159624);
  }
  v4 = *((_QWORD *)this + 3);
  if ((uint64_t *)v4 != &google::protobuf::internal::fixed_address_empty_string && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0)
      operator delete(*(void **)v4);
    MEMORY[0x1C3B8D890](v4, 0x1012C40EC159624);
  }
  if (this != (SnippetUI::ImageElement_Symbol *)&SnippetUI::_ImageElement_Symbol_default_instance_)
  {
    v6 = *((_QWORD *)this + 4);
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    v7 = *((_QWORD *)this + 5);
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

SnippetUI::ImageElement_Symbol *SnippetUI::ImageElement_Symbol::New(SnippetUI::ImageElement_Symbol *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement_Symbol>(0);
}

SnippetUI::ImageElement_Symbol *SnippetUI::ImageElement_Symbol::New(SnippetUI::ImageElement_Symbol *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement_Symbol>(a2);
}

void SnippetUI::ImageElement_Symbol::Clear(SnippetUI::ImageElement_Symbol *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  google::protobuf::internal::InternalMetadataWithArena *v7;
  char v8;

  v2 = *((_QWORD *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(_BYTE **)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v2 = 0;
      *(_BYTE *)(v2 + 23) = 0;
    }
  }
  v3 = *((_QWORD *)this + 3);
  if ((uint64_t *)v3 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v3 + 23) < 0)
    {
      **(_BYTE **)v3 = 0;
      *(_QWORD *)(v3 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v3 = 0;
      *(_BYTE *)(v3 + 23) = 0;
    }
  }
  v4 = *((_QWORD *)this + 4);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v6 = (_QWORD *)((char *)this + 40);
  v5 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 4) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v8 = *((_BYTE *)this + 8);
  v7 = (SnippetUI::ImageElement_Symbol *)((char *)this + 8);
  *v6 = 0;
  v6[1] = 0;
  if ((v8 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v7);
}

uint64_t SnippetUI::ImageElement_Symbol::IsInitialized(SnippetUI::ImageElement_Symbol *this)
{
  return 1;
}

char *SnippetUI::ImageElement_Symbol::ByteSizeLong(SnippetUI::ImageElement_Symbol *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  const google::protobuf::UnknownFieldSet *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  SnippetUI::Color *v9;
  char *v10;
  SnippetUI::ImageElement_Symbol_Background *v11;
  char *v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;

  v2 = *((_QWORD *)this + 2);
  v3 = *(unsigned __int8 *)(v2 + 23);
  if (*(char *)(v2 + 23) < 0)
  {
    if (*(_QWORD *)(v2 + 8))
      goto LABEL_3;
LABEL_7:
    v5 = 0;
    goto LABEL_8;
  }
  if (!*(_BYTE *)(v2 + 23))
    goto LABEL_7;
LABEL_3:
  v4 = *(_QWORD *)(v2 + 8);
  if ((v3 & 0x80u) == 0)
    v4 = v3;
  v5 = (const google::protobuf::UnknownFieldSet *)(v4 + ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_8:
  v6 = *((_QWORD *)this + 3);
  v7 = *(unsigned __int8 *)(v6 + 23);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(_QWORD *)(v6 + 8))
      goto LABEL_13;
  }
  else if (!*(_BYTE *)(v6 + 23))
  {
    goto LABEL_13;
  }
  v8 = *(_QWORD *)(v6 + 8);
  if ((v7 & 0x80u) == 0)
    v8 = v7;
  v5 = (const google::protobuf::UnknownFieldSet *)((char *)v5 + v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_13:
  if (this != (SnippetUI::ImageElement_Symbol *)&SnippetUI::_ImageElement_Symbol_default_instance_)
  {
    v9 = (SnippetUI::Color *)*((_QWORD *)this + 4);
    if (v9)
    {
      v10 = SnippetUI::Color::ByteSizeLong(v9);
      v5 = (const google::protobuf::UnknownFieldSet *)&v10[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v11 = (SnippetUI::ImageElement_Symbol_Background *)*((_QWORD *)this + 5);
    if (v11)
    {
      v12 = SnippetUI::ImageElement_Symbol_Background::ByteSizeLong(v11);
      v5 = (const google::protobuf::UnknownFieldSet *)&v12[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v12 | 1) ^ 0x1F) + 73) >> 6)];
    }
  }
  v13 = *((_DWORD *)this + 12);
  if (v13)
  {
    if (v13 < 0)
      v14 = 11;
    else
      v14 = ((9 * (__clz(v13 | 1) ^ 0x1F) + 73) >> 6) + 1;
    v5 = (const google::protobuf::UnknownFieldSet *)((char *)v5 + v14);
  }
  v15 = *((_DWORD *)this + 13);
  if (v15)
  {
    if (v15 < 0)
      v16 = 11;
    else
      v16 = ((9 * (__clz(v15 | 1) ^ 0x1F) + 73) >> 6) + 1;
    v5 = (const google::protobuf::UnknownFieldSet *)((char *)v5 + v16);
  }
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::ImageElement_Symbol *)((char *)this + 8), v5, (_DWORD *)this + 14);
  *((_DWORD *)this + 14) = (_DWORD)v5;
  return (char *)v5;
}

uint64_t SnippetUI::ImageElement_Symbol::GetCachedSize(SnippetUI::ImageElement_Symbol *this)
{
  return *((unsigned int *)this + 14);
}

google::protobuf::internal *SnippetUI::ImageElement_Symbol::_InternalParse(SnippetUI::ImageElement_Symbol *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  std::string **v5;
  std::string **v6;
  uint64_t *v7;
  google::protobuf::internal::ParseContext *v8;
  google::protobuf::internal *TagFallback;
  char *v10;
  std::string *v11;
  std::string::value_type *v12;
  google::protobuf::internal::ParseContext *v13;
  char *v14;
  SnippetUI::Color *v15;
  char *v16;
  google::protobuf::internal *v17;
  unint64_t v18;
  int v19;
  google::protobuf::internal *v20;
  unint64_t v21;
  int v22;
  SnippetUI::ImageElement_Symbol_Background *v23;
  unsigned int v24;
  char *v25;
  BOOL v26;
  char *SizeFallback;
  unsigned int v28;
  int v29;
  int v30;
  BOOL v31;
  int v32;
  google::protobuf::internal *v33;
  int v34;
  google::protobuf::internal *v36;

  v36 = a2;
  v5 = (std::string **)((char *)this + 24);
  v6 = (std::string **)((char *)this + 16);
  v7 = (uint64_t *)((char *)this + 8);
  while (2)
  {
    if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v36, *((_DWORD *)a3 + 23)) & 1) != 0)
      return v36;
    TagFallback = (google::protobuf::internal *)((char *)v36 + 1);
    v10 = (char *)*(unsigned __int8 *)v36;
    if ((*(char *)v36 & 0x80000000) == 0)
      goto LABEL_6;
    v10 = (char *)(v10 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v36 + 2);
LABEL_6:
      v36 = TagFallback;
      goto LABEL_7;
    }
    TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v36, v10);
    v36 = TagFallback;
    if (!TagFallback)
      return TagFallback;
LABEL_7:
    switch(v10 >> 3)
    {
      case 1u:
        if (v10 != 10)
          goto LABEL_38;
        v11 = *v6;
        if (*v6 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v6, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v11 = *v6;
          TagFallback = v36;
        }
        v12 = (std::string::value_type *)TagFallback;
        v13 = a3;
        v14 = "SnippetUI.ImageElement.Symbol.name";
        goto LABEL_32;
      case 2u:
        if (v10 != 18)
          goto LABEL_38;
        v15 = (SnippetUI::Color *)*((_QWORD *)this + 4);
        if (!v15)
        {
          v15 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Color>(0);
          *((_QWORD *)this + 4) = v15;
          TagFallback = v36;
        }
        v16 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::Color>(a3, v15, TagFallback);
        goto LABEL_43;
      case 3u:
        if (v10 != 24)
          goto LABEL_38;
        v17 = (google::protobuf::internal *)((char *)TagFallback + 1);
        LODWORD(v18) = *(unsigned __int8 *)TagFallback;
        if ((*(char *)TagFallback & 0x80000000) == 0)
          goto LABEL_20;
        v19 = *(char *)v17;
        v18 = v18 + (v19 << 7) - 128;
        if (v19 < 0)
        {
          v36 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(TagFallback, v18);
          if (!v36)
            goto LABEL_56;
        }
        else
        {
          v17 = (google::protobuf::internal *)((char *)TagFallback + 2);
LABEL_20:
          v36 = v17;
        }
        *((_DWORD *)this + 12) = v18;
        continue;
      case 4u:
        if (v10 != 32)
          goto LABEL_38;
        v20 = (google::protobuf::internal *)((char *)TagFallback + 1);
        LODWORD(v21) = *(unsigned __int8 *)TagFallback;
        if ((*(char *)TagFallback & 0x80000000) == 0)
          goto LABEL_26;
        v22 = *(char *)v20;
        v21 = v21 + (v22 << 7) - 128;
        if (v22 < 0)
        {
          v36 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(TagFallback, v21);
          if (!v36)
            goto LABEL_56;
        }
        else
        {
          v20 = (google::protobuf::internal *)((char *)TagFallback + 2);
LABEL_26:
          v36 = v20;
        }
        *((_DWORD *)this + 13) = v21;
        continue;
      case 5u:
        if (v10 != 42)
          goto LABEL_38;
        v11 = *v5;
        if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v11 = *v5;
          TagFallback = v36;
        }
        v12 = (std::string::value_type *)TagFallback;
        v13 = a3;
        v14 = "SnippetUI.ImageElement.Symbol.dark_mode_name";
LABEL_32:
        v16 = google::protobuf::internal::InlineGreedyStringParserUTF8(v11, v12, (uint64_t)v13, (google::protobuf::internal *)v14);
        goto LABEL_43;
      case 6u:
        if (v10 != 50)
          goto LABEL_38;
        v23 = (SnippetUI::ImageElement_Symbol_Background *)*((_QWORD *)this + 5);
        if (!v23)
        {
          v23 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement_Symbol_Background>(0);
          *((_QWORD *)this + 5) = v23;
          TagFallback = v36;
        }
        v24 = *(unsigned __int8 *)TagFallback;
        if (*(char *)TagFallback < 0)
        {
          SizeFallback = google::protobuf::internal::ReadSizeFallback(TagFallback, (const char *)*(unsigned __int8 *)TagFallback);
          if (!SizeFallback)
            goto LABEL_56;
          v25 = SizeFallback;
          v24 = v28;
        }
        else
        {
          v25 = (char *)TagFallback + 1;
        }
        v29 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v25, v24);
        v30 = *((_DWORD *)a3 + 22);
        v31 = __OFSUB__(v30--, 1);
        *((_DWORD *)a3 + 22) = v30;
        if (v30 < 0 != v31)
          goto LABEL_56;
        v32 = v29;
        v33 = SnippetUI::ImageElement_Symbol_Background::_InternalParse(v23, (google::protobuf::internal *)v25, a3);
        if (!v33)
          goto LABEL_56;
        ++*((_DWORD *)a3 + 22);
        if (*((_DWORD *)a3 + 20))
          goto LABEL_56;
        v34 = *((_DWORD *)a3 + 7) + v32;
        *((_DWORD *)a3 + 7) = v34;
        *(_QWORD *)a3 = *((_QWORD *)a3 + 1) + (v34 & (v34 >> 31));
        v36 = v33;
        continue;
      default:
LABEL_38:
        if ((_DWORD)v10)
          v26 = (v10 & 7) == 4;
        else
          v26 = 1;
        if (v26)
        {
          *((_DWORD *)a3 + 20) = (_DWORD)v10 - 1;
          return TagFallback;
        }
        v16 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v10, v7, TagFallback, a3, v8);
LABEL_43:
        v36 = (google::protobuf::internal *)v16;
        if (v16)
          continue;
LABEL_56:
        TagFallback = 0;
        break;
    }
    return TagFallback;
  }
}

const google::protobuf::UnknownFieldSet *SnippetUI::ImageElement_Symbol::InternalSerializeWithCachedSizesToArray(SnippetUI::ImageElement_Symbol *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  uint64_t *v7;
  const char *v8;
  SnippetUI::Color *v9;
  unsigned int v10;
  char *v11;
  unsigned int v12;
  _BYTE *v13;
  _BYTE *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unint64_t v18;
  _BYTE *v19;
  _BYTE *v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  unint64_t v24;
  _BYTE *v25;
  _BYTE *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t *v29;
  const char *v30;
  SnippetUI::ImageElement_Symbol_Background *v31;
  unsigned int v32;
  char *v33;
  unsigned int v34;
  _BYTE *v35;
  _BYTE *v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;

  v7 = (uint64_t *)*((_QWORD *)this + 2);
  if ((*((char *)v7 + 23) & 0x80000000) == 0)
  {
    v8 = (const char *)*((unsigned __int8 *)v7 + 23);
    if (!*((_BYTE *)v7 + 23))
      goto LABEL_7;
    goto LABEL_6;
  }
  v8 = (const char *)v7[1];
  if (v8)
  {
    v7 = (uint64_t *)*v7;
LABEL_6:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String((google::protobuf::internal *)v7, v8, 1, (google::protobuf::internal *)"SnippetUI.ImageElement.Symbol.name");
    a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 1, *((_QWORD *)this + 2), (char *)a2);
  }
LABEL_7:
  if (this != (SnippetUI::ImageElement_Symbol *)&SnippetUI::_ImageElement_Symbol_default_instance_)
  {
    v9 = (SnippetUI::Color *)*((_QWORD *)this + 4);
    if (v9)
    {
      if ((unint64_t)a2 >= *(_QWORD *)a3)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
        v9 = (SnippetUI::Color *)*((_QWORD *)this + 4);
      }
      *(_BYTE *)a2 = 18;
      v10 = *((_DWORD *)v9 + 6);
      if (v10 > 0x7F)
      {
        *((_BYTE *)a2 + 1) = v10 | 0x80;
        v12 = v10 >> 7;
        if (v10 >> 14)
        {
          v13 = (char *)a2 + 2;
          do
          {
            v14 = v13;
            *v13++ = v12 | 0x80;
            v15 = v12 >> 7;
            v16 = v12 >> 14;
            v12 >>= 7;
          }
          while (v16);
          v11 = v14 + 2;
          *v13 = v15;
        }
        else
        {
          *((_BYTE *)a2 + 2) = v12;
          v11 = (char *)a2 + 3;
        }
      }
      else
      {
        *((_BYTE *)a2 + 1) = v10;
        v11 = (char *)a2 + 2;
      }
      a2 = SnippetUI::Color::InternalSerializeWithCachedSizesToArray(v9, v11, a3, a4);
    }
  }
  v17 = *((_DWORD *)this + 12);
  if (v17)
  {
    if ((unint64_t)a2 >= *(_QWORD *)a3)
    {
      a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      v17 = *((_DWORD *)this + 12);
    }
    *(_BYTE *)a2 = 24;
    if (v17 > 0x7F)
    {
      *((_BYTE *)a2 + 1) = v17 | 0x80;
      v18 = (unint64_t)(int)v17 >> 7;
      if (v17 >> 14)
      {
        v19 = (char *)a2 + 2;
        do
        {
          v20 = v19;
          *v19++ = v18 | 0x80;
          v21 = v18 >> 7;
          v22 = v18 >> 14;
          v18 >>= 7;
        }
        while (v22);
        a2 = (google::protobuf::UnknownFieldSet *)(v20 + 2);
        *v19 = v21;
      }
      else
      {
        *((_BYTE *)a2 + 2) = v18;
        a2 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 3);
      }
    }
    else
    {
      *((_BYTE *)a2 + 1) = v17;
      a2 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 2);
    }
  }
  v23 = *((_DWORD *)this + 13);
  if (v23)
  {
    if ((unint64_t)a2 >= *(_QWORD *)a3)
    {
      a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      v23 = *((_DWORD *)this + 13);
    }
    *(_BYTE *)a2 = 32;
    if (v23 > 0x7F)
    {
      *((_BYTE *)a2 + 1) = v23 | 0x80;
      v24 = (unint64_t)(int)v23 >> 7;
      if (v23 >> 14)
      {
        v25 = (char *)a2 + 2;
        do
        {
          v26 = v25;
          *v25++ = v24 | 0x80;
          v27 = v24 >> 7;
          v28 = v24 >> 14;
          v24 >>= 7;
        }
        while (v28);
        a2 = (google::protobuf::UnknownFieldSet *)(v26 + 2);
        *v25 = v27;
      }
      else
      {
        *((_BYTE *)a2 + 2) = v24;
        a2 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 3);
      }
    }
    else
    {
      *((_BYTE *)a2 + 1) = v23;
      a2 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 2);
    }
  }
  v29 = (uint64_t *)*((_QWORD *)this + 3);
  if ((*((char *)v29 + 23) & 0x80000000) == 0)
  {
    v30 = (const char *)*((unsigned __int8 *)v29 + 23);
    if (!*((_BYTE *)v29 + 23))
      goto LABEL_45;
    goto LABEL_44;
  }
  v30 = (const char *)v29[1];
  if (v30)
  {
    v29 = (uint64_t *)*v29;
LABEL_44:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String((google::protobuf::internal *)v29, v30, 1, (google::protobuf::internal *)"SnippetUI.ImageElement.Symbol.dark_mode_name");
    a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 5, *((_QWORD *)this + 3), (char *)a2);
  }
LABEL_45:
  if (this != (SnippetUI::ImageElement_Symbol *)&SnippetUI::_ImageElement_Symbol_default_instance_)
  {
    v31 = (SnippetUI::ImageElement_Symbol_Background *)*((_QWORD *)this + 5);
    if (v31)
    {
      if ((unint64_t)a2 >= *(_QWORD *)a3)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
        v31 = (SnippetUI::ImageElement_Symbol_Background *)*((_QWORD *)this + 5);
      }
      *(_BYTE *)a2 = 50;
      v32 = *((_DWORD *)v31 + 12);
      if (v32 > 0x7F)
      {
        *((_BYTE *)a2 + 1) = v32 | 0x80;
        v34 = v32 >> 7;
        if (v32 >> 14)
        {
          v35 = (char *)a2 + 2;
          do
          {
            v36 = v35;
            *v35++ = v34 | 0x80;
            v37 = v34 >> 7;
            v38 = v34 >> 14;
            v34 >>= 7;
          }
          while (v38);
          v33 = v36 + 2;
          *v35 = v37;
        }
        else
        {
          *((_BYTE *)a2 + 2) = v34;
          v33 = (char *)a2 + 3;
        }
      }
      else
      {
        *((_BYTE *)a2 + 1) = v32;
        v33 = (char *)a2 + 2;
      }
      a2 = SnippetUI::ImageElement_Symbol_Background::InternalSerializeWithCachedSizesToArray(v31, v33, a3, a4);
    }
  }
  v39 = *((_QWORD *)this + 1);
  if ((v39 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v39 & 0xFFFFFFFFFFFFFFFELL), a2, a3, a4);
  else
    return a2;
}

void SnippetUI::ImageElement_Symbol::CopyFrom(SnippetUI::ImageElement_Symbol *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    SnippetUI::ImageElement_Symbol::Clear(this);
    SnippetUI::ImageElement_Symbol::MergeFrom(this, a2);
  }
}

void SnippetUI::ImageElement_Symbol::MergeFrom(SnippetUI::ImageElement_Symbol *this, const google::protobuf::Message *lpsrc)
{
  std::string *v4;
  const SnippetUI::ImageElement_Symbol *v5;
  google::protobuf::Message *v6;
  char v7;
  std::string v8[2];

  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/ImageElement.pb.cc", 4365);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5)
    SnippetUI::ImageElement_Symbol::MergeFrom(this, v5);
  else
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
}

void sub_1BF8E0E28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::ImageElement_Symbol::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 56) = a2;
  return this;
}

uint64_t SnippetUI::ImageElement_Symbol::GetMetadata(SnippetUI::ImageElement_Symbol *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ImageElement_2eproto);
  return qword_1EF581810;
}

void *SnippetUI::ImageElement_Symbol::default_instance(SnippetUI::ImageElement_Symbol *this)
{
  if (atomic_load(scc_info_ImageElement_Symbol_ImageElement_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_ImageElement_Symbol_ImageElement_2eproto);
  return &SnippetUI::_ImageElement_Symbol_default_instance_;
}

void SnippetUI::ImageElement_Symbol::MergeFrom(SnippetUI::ImageElement_Symbol *this, const SnippetUI::ImageElement_Symbol *a2)
{
  std::string *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  const SnippetUI::Color *v10;
  SnippetUI::Color *v11;
  const SnippetUI::Color *v12;
  const SnippetUI::ImageElement_Symbol_Background *v13;
  SnippetUI::ImageElement_Symbol_Background *v14;
  const SnippetUI::ImageElement_Symbol_Background *v15;
  int v16;
  int v17;
  char v18;
  std::string v19[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v19, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/ImageElement.pb.cc", 4380);
    v4 = google::protobuf::internal::LogMessage::operator<<(v19, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v18, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v19[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::ImageElement_Symbol *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  v6 = *((_QWORD *)a2 + 2);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(_QWORD *)(v6 + 8))
      goto LABEL_13;
  }
  else if (!*(_BYTE *)(v6 + 23))
  {
    goto LABEL_13;
  }
  v7 = (uint64_t *)*((_QWORD *)this + 2);
  if (v7 != (uint64_t *)v6)
  {
    if (v7 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, v6);
    else
      std::string::operator=(*((std::string **)this + 2), (const std::string *)v6);
  }
LABEL_13:
  v8 = *((_QWORD *)a2 + 3);
  if (*(char *)(v8 + 23) < 0)
  {
    if (!*(_QWORD *)(v8 + 8))
      goto LABEL_21;
  }
  else if (!*(_BYTE *)(v8 + 23))
  {
    goto LABEL_21;
  }
  v9 = (uint64_t *)*((_QWORD *)this + 3);
  if (v9 != (uint64_t *)v8)
  {
    if (v9 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 3, v8);
    else
      std::string::operator=(*((std::string **)this + 3), (const std::string *)v8);
  }
LABEL_21:
  if (a2 != (const SnippetUI::ImageElement_Symbol *)&SnippetUI::_ImageElement_Symbol_default_instance_)
  {
    v10 = (const SnippetUI::Color *)*((_QWORD *)a2 + 4);
    if (v10)
    {
      v11 = (SnippetUI::Color *)*((_QWORD *)this + 4);
      if (!v11)
      {
        v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Color>(0);
        *((_QWORD *)this + 4) = v11;
        v10 = (const SnippetUI::Color *)*((_QWORD *)a2 + 4);
      }
      if (v10)
        v12 = v10;
      else
        v12 = (const SnippetUI::Color *)&SnippetUI::_Color_default_instance_;
      SnippetUI::Color::MergeFrom(v11, v12);
    }
    v13 = (const SnippetUI::ImageElement_Symbol_Background *)*((_QWORD *)a2 + 5);
    if (v13)
    {
      v14 = (SnippetUI::ImageElement_Symbol_Background *)*((_QWORD *)this + 5);
      if (!v14)
      {
        v14 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement_Symbol_Background>(0);
        *((_QWORD *)this + 5) = v14;
        v13 = (const SnippetUI::ImageElement_Symbol_Background *)*((_QWORD *)a2 + 5);
      }
      if (v13)
        v15 = v13;
      else
        v15 = (const SnippetUI::ImageElement_Symbol_Background *)&SnippetUI::_ImageElement_Symbol_Background_default_instance_;
      SnippetUI::ImageElement_Symbol_Background::MergeFrom(v14, v15);
    }
  }
  v16 = *((_DWORD *)a2 + 12);
  if (v16)
    *((_DWORD *)this + 12) = v16;
  v17 = *((_DWORD *)a2 + 13);
  if (v17)
    *((_DWORD *)this + 13) = v17;
}

void sub_1BF8E1050(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

SnippetUI::ImageElement_Symbol *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement_Symbol>(google::protobuf::internal::ArenaImpl *this)
{
  SnippetUI::ImageElement_Symbol *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (SnippetUI::ImageElement_Symbol *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x40uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::ImageElement_Symbol>);
    SnippetUI::ImageElement_Symbol::ImageElement_Symbol(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (SnippetUI::ImageElement_Symbol *)operator new();
    SnippetUI::ImageElement_Symbol::ImageElement_Symbol(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_1BF8E10EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D890](v1, 0x10A1C405F83DAE1);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::ImageElement_Symbol>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

void InitDefaultsscc_info_ImageElement_Url_ImageElement_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/ImageElement.pb.cc", a4);
  SnippetUI::ImageElement_Url::ImageElement_Url((SnippetUI::ImageElement_Url *)&SnippetUI::_ImageElement_Url_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_ImageElement_Url_default_instance_, v4);
  qword_1ED1D51B0 = (uint64_t)&SnippetUI::_ImageElement_Data_default_instance_;
  unk_1ED1D51B8 = &SnippetUI::_ImageElement_Bundle_default_instance_;
  qword_1ED1D51C0 = (uint64_t)&SnippetUI::_ImageElement_Symbol_default_instance_;
  qword_1ED1D5178 = (uint64_t)&SnippetUI::_ImageElement_AspectRatio_default_instance_;
  unk_1ED1D5180 = &SnippetUI::_OptionalBool_default_instance_;
  qword_1ED1D5188 = (uint64_t)&SnippetUI::_OptionalBool_default_instance_;
  unk_1ED1D5190 = &SnippetUI::_Color_default_instance_;
}

SnippetUI::ImageElement_Url *SnippetUI::ImageElement_Url::ImageElement_Url(SnippetUI::ImageElement_Url *this)
{
  *(_QWORD *)this = &off_1E792C7F0;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 20) = 0;
  if (atomic_load(scc_info_ImageElement_Url_ImageElement_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_ImageElement_Url_ImageElement_2eproto);
  *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_QWORD *)this + 8) = 0;
  *((_DWORD *)this + 21) = 0;
  return this;
}

void sub_1BF8E1310(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::ImageElement_Url::~ImageElement_Url(SnippetUI::ImageElement_Url *this)
{
  SnippetUI::ImageElement_Url::~ImageElement_Url(this);
  JUMPOUT(0x1C3B8D890);
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)this = &off_1E792C7F0;
  v2 = *((_QWORD *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x1C3B8D890](v2, 0x1012C40EC159624);
  }
  v4 = *((_QWORD *)this + 3);
  if ((uint64_t *)v4 != &google::protobuf::internal::fixed_address_empty_string && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0)
      operator delete(*(void **)v4);
    MEMORY[0x1C3B8D890](v4, 0x1012C40EC159624);
  }
  if (this != (SnippetUI::ImageElement_Url *)&SnippetUI::_ImageElement_Url_default_instance_)
  {
    v6 = *((_QWORD *)this + 4);
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    v7 = *((_QWORD *)this + 5);
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    v8 = *((_QWORD *)this + 6);
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    v9 = *((_QWORD *)this + 7);
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  }
  if (*((_DWORD *)this + 21))
    SnippetUI::ImageElement_Url::clear_loading_image((uint64_t)this);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

SnippetUI::ImageElement_Url *SnippetUI::ImageElement_Url::New(SnippetUI::ImageElement_Url *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement_Url>(0);
}

SnippetUI::ImageElement_Url *SnippetUI::ImageElement_Url::New(SnippetUI::ImageElement_Url *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement_Url>(a2);
}

void SnippetUI::ImageElement_Url::Clear(SnippetUI::ImageElement_Url *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  google::protobuf::internal::InternalMetadataWithArena *v8;
  char v9;

  v2 = *((_QWORD *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(_BYTE **)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v2 = 0;
      *(_BYTE *)(v2 + 23) = 0;
    }
  }
  v3 = *((_QWORD *)this + 3);
  if ((uint64_t *)v3 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v3 + 23) < 0)
    {
      **(_BYTE **)v3 = 0;
      *(_QWORD *)(v3 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v3 = 0;
      *(_BYTE *)(v3 + 23) = 0;
    }
  }
  v4 = *((_QWORD *)this + 4);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  *((_QWORD *)this + 4) = 0;
  v5 = *((_QWORD *)this + 5);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *((_QWORD *)this + 5) = 0;
  v6 = *((_QWORD *)this + 6);
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 6) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  SnippetUI::ImageElement_Url::clear_loading_image((uint64_t)this);
  v9 = *((_BYTE *)this + 8);
  v8 = (SnippetUI::ImageElement_Url *)((char *)this + 8);
  if ((v9 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v8);
}

uint64_t SnippetUI::ImageElement_Url::IsInitialized(SnippetUI::ImageElement_Url *this)
{
  return 1;
}

char *SnippetUI::ImageElement_Url::ByteSizeLong(SnippetUI::ImageElement_Url *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  const google::protobuf::UnknownFieldSet *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  SnippetUI::ImageElement_AspectRatio *v9;
  char *v10;
  SnippetUI::OptionalBool *v11;
  char *v12;
  SnippetUI::OptionalBool *v13;
  char *v14;
  SnippetUI::Color *v15;
  char *v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  char *v22;

  v2 = *((_QWORD *)this + 2);
  v3 = *(unsigned __int8 *)(v2 + 23);
  if (*(char *)(v2 + 23) < 0)
  {
    if (*(_QWORD *)(v2 + 8))
      goto LABEL_3;
LABEL_7:
    v5 = 0;
    goto LABEL_8;
  }
  if (!*(_BYTE *)(v2 + 23))
    goto LABEL_7;
LABEL_3:
  v4 = *(_QWORD *)(v2 + 8);
  if ((v3 & 0x80u) == 0)
    v4 = v3;
  v5 = (const google::protobuf::UnknownFieldSet *)(v4 + ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_8:
  v6 = *((_QWORD *)this + 3);
  v7 = *(unsigned __int8 *)(v6 + 23);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(_QWORD *)(v6 + 8))
      goto LABEL_13;
  }
  else if (!*(_BYTE *)(v6 + 23))
  {
    goto LABEL_13;
  }
  v8 = *(_QWORD *)(v6 + 8);
  if ((v7 & 0x80u) == 0)
    v8 = v7;
  v5 = (const google::protobuf::UnknownFieldSet *)((char *)v5 + v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_13:
  if (this != (SnippetUI::ImageElement_Url *)&SnippetUI::_ImageElement_Url_default_instance_)
  {
    v9 = (SnippetUI::ImageElement_AspectRatio *)*((_QWORD *)this + 4);
    if (v9)
    {
      v10 = SnippetUI::ImageElement_AspectRatio::ByteSizeLong(v9);
      v5 = (const google::protobuf::UnknownFieldSet *)&v10[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v11 = (SnippetUI::OptionalBool *)*((_QWORD *)this + 5);
    if (v11)
    {
      v12 = SnippetUI::OptionalBool::ByteSizeLong(v11);
      v5 = (const google::protobuf::UnknownFieldSet *)&v12[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v12 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v13 = (SnippetUI::OptionalBool *)*((_QWORD *)this + 6);
    if (v13)
    {
      v14 = SnippetUI::OptionalBool::ByteSizeLong(v13);
      v5 = (const google::protobuf::UnknownFieldSet *)&v14[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v14 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v15 = (SnippetUI::Color *)*((_QWORD *)this + 7);
    if (v15)
    {
      v16 = SnippetUI::Color::ByteSizeLong(v15);
      v5 = (const google::protobuf::UnknownFieldSet *)&v16[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v16 | 1) ^ 0x1F) + 73) >> 6)];
    }
  }
  v17 = *((_DWORD *)this + 16);
  if (v17)
  {
    if (v17 < 0)
      v18 = 11;
    else
      v18 = ((9 * (__clz(v17 | 1) ^ 0x1F) + 73) >> 6) + 1;
    v5 = (const google::protobuf::UnknownFieldSet *)((char *)v5 + v18);
  }
  v19 = *((_DWORD *)this + 17);
  if (v19)
  {
    if (v19 < 0)
      v20 = 11;
    else
      v20 = ((9 * (__clz(v19 | 1) ^ 0x1F) + 73) >> 6) + 1;
    v5 = (const google::protobuf::UnknownFieldSet *)((char *)v5 + v20);
  }
  v21 = *((_DWORD *)this + 21);
  switch(v21)
  {
    case 4:
      v22 = SnippetUI::ImageElement_Symbol::ByteSizeLong(*((SnippetUI::ImageElement_Symbol **)this + 9));
      break;
    case 3:
      v22 = SnippetUI::ImageElement_Bundle::ByteSizeLong(*((SnippetUI::ImageElement_Bundle **)this + 9));
      break;
    case 2:
      v22 = SnippetUI::ImageElement_Data::ByteSizeLong(*((SnippetUI::ImageElement_Data **)this + 9));
      break;
    default:
      goto LABEL_41;
  }
  v5 = (const google::protobuf::UnknownFieldSet *)&v22[(_QWORD)v5
                                                     + 1
                                                     + ((9 * (__clz(v22 | 1) ^ 0x1F) + 73) >> 6)];
LABEL_41:
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::ImageElement_Url *)((char *)this + 8), v5, (_DWORD *)this + 20);
  *((_DWORD *)this + 20) = (_DWORD)v5;
  return (char *)v5;
}

uint64_t SnippetUI::ImageElement_Url::GetCachedSize(SnippetUI::ImageElement_Url *this)
{
  return *((unsigned int *)this + 20);
}

google::protobuf::internal *SnippetUI::ImageElement_Url::_InternalParse(SnippetUI::ImageElement_Url *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  std::string **v5;
  std::string **v6;
  uint64_t *v7;
  google::protobuf::internal::ParseContext *v8;
  google::protobuf::internal *TagFallback;
  char *v10;
  std::string *v11;
  std::string::value_type *v12;
  google::protobuf::internal::ParseContext *v13;
  char *v14;
  SnippetUI::ImageElement_Data *v15;
  SnippetUI::ImageElement_Bundle *v16;
  SnippetUI::ImageElement_Symbol *v17;
  google::protobuf::internal *v18;
  unint64_t v19;
  int v20;
  google::protobuf::internal *v21;
  unint64_t v22;
  int v23;
  SnippetUI::ImageElement_AspectRatio *v24;
  char *v25;
  SnippetUI::OptionalBool *v26;
  SnippetUI::Color *v27;
  BOOL v28;
  google::protobuf::internal *v30;

  v30 = a2;
  v5 = (std::string **)((char *)this + 24);
  v6 = (std::string **)((char *)this + 16);
  v7 = (uint64_t *)((char *)this + 8);
  while (2)
  {
    if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v30, *((_DWORD *)a3 + 23)) & 1) != 0)
      return v30;
    TagFallback = (google::protobuf::internal *)((char *)v30 + 1);
    v10 = (char *)*(unsigned __int8 *)v30;
    if ((*(char *)v30 & 0x80000000) == 0)
      goto LABEL_6;
    v10 = (char *)(v10 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v30 + 2);
LABEL_6:
      v30 = TagFallback;
      goto LABEL_7;
    }
    TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v30, v10);
    v30 = TagFallback;
    if (!TagFallback)
      return TagFallback;
LABEL_7:
    switch(v10 >> 3)
    {
      case 1u:
        if (v10 != 10)
          goto LABEL_56;
        v11 = *v6;
        if (*v6 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v6, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v11 = *v6;
          TagFallback = v30;
        }
        v12 = (std::string::value_type *)TagFallback;
        v13 = a3;
        v14 = "SnippetUI.ImageElement.Url.source";
        goto LABEL_55;
      case 2u:
        if (v10 != 18)
          goto LABEL_56;
        if (*((_DWORD *)this + 21) == 2)
        {
          v15 = (SnippetUI::ImageElement_Data *)*((_QWORD *)this + 9);
        }
        else
        {
          SnippetUI::ImageElement_Url::clear_loading_image((uint64_t)this);
          *((_DWORD *)this + 21) = 2;
          v15 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement_Data>(0);
          *((_QWORD *)this + 9) = v15;
          TagFallback = v30;
        }
        v25 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::ImageElement_Data>(a3, v15, TagFallback);
        goto LABEL_67;
      case 3u:
        if (v10 != 26)
          goto LABEL_56;
        if (*((_DWORD *)this + 21) == 3)
        {
          v16 = (SnippetUI::ImageElement_Bundle *)*((_QWORD *)this + 9);
        }
        else
        {
          SnippetUI::ImageElement_Url::clear_loading_image((uint64_t)this);
          *((_DWORD *)this + 21) = 3;
          v16 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement_Bundle>(0);
          *((_QWORD *)this + 9) = v16;
          TagFallback = v30;
        }
        v25 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::ImageElement_Bundle>(a3, v16, TagFallback);
        goto LABEL_67;
      case 4u:
        if (v10 != 34)
          goto LABEL_56;
        if (*((_DWORD *)this + 21) == 4)
        {
          v17 = (SnippetUI::ImageElement_Symbol *)*((_QWORD *)this + 9);
        }
        else
        {
          SnippetUI::ImageElement_Url::clear_loading_image((uint64_t)this);
          *((_DWORD *)this + 21) = 4;
          v17 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement_Symbol>(0);
          *((_QWORD *)this + 9) = v17;
          TagFallback = v30;
        }
        v25 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::ImageElement_Symbol>(a3, v17, TagFallback);
        goto LABEL_67;
      case 6u:
        if (v10 != 48)
          goto LABEL_56;
        v18 = (google::protobuf::internal *)((char *)TagFallback + 1);
        LODWORD(v19) = *(unsigned __int8 *)TagFallback;
        if ((*(char *)TagFallback & 0x80000000) == 0)
          goto LABEL_27;
        v20 = *(char *)v18;
        v19 = v19 + (v20 << 7) - 128;
        if (v20 < 0)
        {
          v30 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(TagFallback, v19);
          if (!v30)
            goto LABEL_72;
        }
        else
        {
          v18 = (google::protobuf::internal *)((char *)TagFallback + 2);
LABEL_27:
          v30 = v18;
        }
        *((_DWORD *)this + 16) = v19;
        continue;
      case 7u:
        if (v10 != 56)
          goto LABEL_56;
        v21 = (google::protobuf::internal *)((char *)TagFallback + 1);
        LODWORD(v22) = *(unsigned __int8 *)TagFallback;
        if ((*(char *)TagFallback & 0x80000000) == 0)
          goto LABEL_33;
        v23 = *(char *)v21;
        v22 = v22 + (v23 << 7) - 128;
        if (v23 < 0)
        {
          v30 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(TagFallback, v22);
          if (!v30)
            goto LABEL_72;
        }
        else
        {
          v21 = (google::protobuf::internal *)((char *)TagFallback + 2);
LABEL_33:
          v30 = v21;
        }
        *((_DWORD *)this + 17) = v22;
        continue;
      case 8u:
        if (v10 != 66)
          goto LABEL_56;
        v24 = (SnippetUI::ImageElement_AspectRatio *)*((_QWORD *)this + 4);
        if (!v24)
        {
          v24 = (SnippetUI::ImageElement_AspectRatio *)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement_AspectRatio>(0);
          *((_QWORD *)this + 4) = v24;
          TagFallback = v30;
        }
        v25 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::ImageElement_AspectRatio>(a3, v24, TagFallback);
        goto LABEL_67;
      case 9u:
        if (v10 != 74)
          goto LABEL_56;
        v26 = (SnippetUI::OptionalBool *)*((_QWORD *)this + 5);
        if (v26)
          goto LABEL_46;
        v26 = (SnippetUI::OptionalBool *)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::OptionalBool>(0);
        *((_QWORD *)this + 5) = v26;
        goto LABEL_45;
      case 0xAu:
        if (v10 != 82)
          goto LABEL_56;
        v26 = (SnippetUI::OptionalBool *)*((_QWORD *)this + 6);
        if (v26)
          goto LABEL_46;
        v26 = (SnippetUI::OptionalBool *)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::OptionalBool>(0);
        *((_QWORD *)this + 6) = v26;
LABEL_45:
        TagFallback = v30;
LABEL_46:
        v25 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::OptionalBool>(a3, v26, TagFallback);
        goto LABEL_67;
      case 0xBu:
        if (v10 != 90)
          goto LABEL_56;
        v27 = (SnippetUI::Color *)*((_QWORD *)this + 7);
        if (!v27)
        {
          v27 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Color>(0);
          *((_QWORD *)this + 7) = v27;
          TagFallback = v30;
        }
        v25 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::Color>(a3, v27, TagFallback);
        goto LABEL_67;
      case 0xCu:
        if (v10 != 98)
          goto LABEL_56;
        v11 = *v5;
        if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v11 = *v5;
          TagFallback = v30;
        }
        v12 = (std::string::value_type *)TagFallback;
        v13 = a3;
        v14 = "SnippetUI.ImageElement.Url.dark_mode_source";
LABEL_55:
        v25 = google::protobuf::internal::InlineGreedyStringParserUTF8(v11, v12, (uint64_t)v13, (google::protobuf::internal *)v14);
        goto LABEL_67;
      default:
LABEL_56:
        if ((_DWORD)v10)
          v28 = (v10 & 7) == 4;
        else
          v28 = 1;
        if (v28)
        {
          *((_DWORD *)a3 + 20) = (_DWORD)v10 - 1;
          return TagFallback;
        }
        v25 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v10, v7, TagFallback, a3, v8);
LABEL_67:
        v30 = (google::protobuf::internal *)v25;
        if (v25)
          continue;
LABEL_72:
        TagFallback = 0;
        break;
    }
    return TagFallback;
  }
}

const google::protobuf::UnknownFieldSet *SnippetUI::ImageElement_Url::InternalSerializeWithCachedSizesToArray(SnippetUI::ImageElement_Url *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  google::protobuf::internal *v7;
  const char *v8;
  int v9;
  SnippetUI::ImageElement_Data *v10;
  unsigned int v11;
  char *v12;
  unsigned int v13;
  _BYTE *v14;
  _BYTE *v15;
  unsigned int v16;
  unsigned int v17;
  SnippetUI::ImageElement_Bundle *v18;
  unsigned int v19;
  google::protobuf::UnknownFieldSet *v20;
  unsigned int v21;
  _BYTE *v22;
  _BYTE *v23;
  unsigned int v24;
  unsigned int v25;
  SnippetUI::ImageElement_Symbol *v26;
  unsigned int v27;
  google::protobuf::UnknownFieldSet *v28;
  unsigned int v29;
  _BYTE *v30;
  _BYTE *v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unint64_t v35;
  _BYTE *v36;
  _BYTE *v37;
  unint64_t v38;
  unint64_t v39;
  unsigned int v40;
  unint64_t v41;
  _BYTE *v42;
  _BYTE *v43;
  unint64_t v44;
  unint64_t v45;
  SnippetUI::ImageElement_AspectRatio *v46;
  unsigned int v47;
  uint64_t v48;
  unsigned int v49;
  char *v50;
  _BYTE *v51;
  _BYTE *v52;
  unsigned int v53;
  unsigned int v54;
  SnippetUI::OptionalBool *v55;
  unsigned int v56;
  uint64_t v57;
  unsigned int v58;
  char *v59;
  _BYTE *v60;
  _BYTE *v61;
  unsigned int v62;
  unsigned int v63;
  SnippetUI::OptionalBool *v64;
  unsigned int v65;
  uint64_t v66;
  unsigned int v67;
  char *v68;
  _BYTE *v69;
  _BYTE *v70;
  unsigned int v71;
  unsigned int v72;
  SnippetUI::Color *v73;
  unsigned int v74;
  char *v75;
  unsigned int v76;
  _BYTE *v77;
  _BYTE *v78;
  unsigned int v79;
  unsigned int v80;
  google::protobuf::internal *v81;
  const char *v82;
  uint64_t v83;

  v7 = (google::protobuf::internal *)*((_QWORD *)this + 2);
  if (*((char *)v7 + 23) < 0)
  {
    v8 = (const char *)*((_QWORD *)v7 + 1);
    if (!v8)
      goto LABEL_7;
    v7 = *(google::protobuf::internal **)v7;
    goto LABEL_6;
  }
  v8 = (const char *)*((unsigned __int8 *)v7 + 23);
  if (*((_BYTE *)v7 + 23))
  {
LABEL_6:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v7, v8, 1, (google::protobuf::internal *)"SnippetUI.ImageElement.Url.source");
    a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 1, *((_QWORD *)this + 2), (char *)a2);
  }
LABEL_7:
  v9 = *((_DWORD *)this + 21);
  if (v9 == 2)
  {
    if ((unint64_t)a2 >= *(_QWORD *)a3)
      a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
    v10 = (SnippetUI::ImageElement_Data *)*((_QWORD *)this + 9);
    *(_BYTE *)a2 = 18;
    v11 = *((_DWORD *)v10 + 15);
    if (v11 > 0x7F)
    {
      *((_BYTE *)a2 + 1) = v11 | 0x80;
      v13 = v11 >> 7;
      if (v11 >> 14)
      {
        v14 = (char *)a2 + 2;
        do
        {
          v15 = v14;
          *v14++ = v13 | 0x80;
          v16 = v13 >> 7;
          v17 = v13 >> 14;
          v13 >>= 7;
        }
        while (v17);
        v12 = v15 + 2;
        *v14 = v16;
      }
      else
      {
        *((_BYTE *)a2 + 2) = v13;
        v12 = (char *)a2 + 3;
      }
    }
    else
    {
      *((_BYTE *)a2 + 1) = v11;
      v12 = (char *)a2 + 2;
    }
    a2 = SnippetUI::ImageElement_Data::InternalSerializeWithCachedSizesToArray(v10, v12, a3);
    v9 = *((_DWORD *)this + 21);
  }
  if (v9 == 3)
  {
    if ((unint64_t)a2 >= *(_QWORD *)a3)
      a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
    v18 = (SnippetUI::ImageElement_Bundle *)*((_QWORD *)this + 9);
    *(_BYTE *)a2 = 26;
    v19 = *((_DWORD *)v18 + 19);
    if (v19 > 0x7F)
    {
      *((_BYTE *)a2 + 1) = v19 | 0x80;
      v21 = v19 >> 7;
      if (v19 >> 14)
      {
        v22 = (char *)a2 + 2;
        do
        {
          v23 = v22;
          *v22++ = v21 | 0x80;
          v24 = v21 >> 7;
          v25 = v21 >> 14;
          v21 >>= 7;
        }
        while (v25);
        v20 = (google::protobuf::UnknownFieldSet *)(v23 + 2);
        *v22 = v24;
      }
      else
      {
        *((_BYTE *)a2 + 2) = v21;
        v20 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 3);
      }
    }
    else
    {
      *((_BYTE *)a2 + 1) = v19;
      v20 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 2);
    }
    a2 = SnippetUI::ImageElement_Bundle::InternalSerializeWithCachedSizesToArray(v18, v20, a3, a4);
    v9 = *((_DWORD *)this + 21);
  }
  if (v9 == 4)
  {
    if ((unint64_t)a2 >= *(_QWORD *)a3)
      a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
    v26 = (SnippetUI::ImageElement_Symbol *)*((_QWORD *)this + 9);
    *(_BYTE *)a2 = 34;
    v27 = *((_DWORD *)v26 + 14);
    if (v27 > 0x7F)
    {
      *((_BYTE *)a2 + 1) = v27 | 0x80;
      v29 = v27 >> 7;
      if (v27 >> 14)
      {
        v30 = (char *)a2 + 2;
        do
        {
          v31 = v30;
          *v30++ = v29 | 0x80;
          v32 = v29 >> 7;
          v33 = v29 >> 14;
          v29 >>= 7;
        }
        while (v33);
        v28 = (google::protobuf::UnknownFieldSet *)(v31 + 2);
        *v30 = v32;
      }
      else
      {
        *((_BYTE *)a2 + 2) = v29;
        v28 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 3);
      }
    }
    else
    {
      *((_BYTE *)a2 + 1) = v27;
      v28 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 2);
    }
    a2 = SnippetUI::ImageElement_Symbol::InternalSerializeWithCachedSizesToArray(v26, v28, a3, a4);
  }
  v34 = *((_DWORD *)this + 16);
  if (v34)
  {
    if ((unint64_t)a2 >= *(_QWORD *)a3)
    {
      a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      v34 = *((_DWORD *)this + 16);
    }
    *(_BYTE *)a2 = 48;
    if (v34 > 0x7F)
    {
      *((_BYTE *)a2 + 1) = v34 | 0x80;
      v35 = (unint64_t)(int)v34 >> 7;
      if (v34 >> 14)
      {
        v36 = (char *)a2 + 2;
        do
        {
          v37 = v36;
          *v36++ = v35 | 0x80;
          v38 = v35 >> 7;
          v39 = v35 >> 14;
          v35 >>= 7;
        }
        while (v39);
        a2 = (google::protobuf::UnknownFieldSet *)(v37 + 2);
        *v36 = v38;
      }
      else
      {
        *((_BYTE *)a2 + 2) = v35;
        a2 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 3);
      }
    }
    else
    {
      *((_BYTE *)a2 + 1) = v34;
      a2 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 2);
    }
  }
  v40 = *((_DWORD *)this + 17);
  if (v40)
  {
    if ((unint64_t)a2 >= *(_QWORD *)a3)
    {
      a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      v40 = *((_DWORD *)this + 17);
    }
    *(_BYTE *)a2 = 56;
    if (v40 > 0x7F)
    {
      *((_BYTE *)a2 + 1) = v40 | 0x80;
      v41 = (unint64_t)(int)v40 >> 7;
      if (v40 >> 14)
      {
        v42 = (char *)a2 + 2;
        do
        {
          v43 = v42;
          *v42++ = v41 | 0x80;
          v44 = v41 >> 7;
          v45 = v41 >> 14;
          v41 >>= 7;
        }
        while (v45);
        a2 = (google::protobuf::UnknownFieldSet *)(v43 + 2);
        *v42 = v44;
      }
      else
      {
        *((_BYTE *)a2 + 2) = v41;
        a2 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 3);
      }
    }
    else
    {
      *((_BYTE *)a2 + 1) = v40;
      a2 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 2);
    }
  }
  if (this != (SnippetUI::ImageElement_Url *)&SnippetUI::_ImageElement_Url_default_instance_)
  {
    v46 = (SnippetUI::ImageElement_AspectRatio *)*((_QWORD *)this + 4);
    if (!v46)
      goto LABEL_73;
    if ((unint64_t)a2 >= *(_QWORD *)a3)
    {
      a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      v46 = (SnippetUI::ImageElement_AspectRatio *)*((_QWORD *)this + 4);
    }
    *(_BYTE *)a2 = 66;
    v47 = *((_DWORD *)v46 + 6);
    if (v47 > 0x7F)
    {
      *((_BYTE *)a2 + 1) = v47 | 0x80;
      v49 = v47 >> 7;
      if (v47 >> 14)
      {
        v51 = (char *)a2 + 2;
        do
        {
          v52 = v51;
          *v51++ = v49 | 0x80;
          v53 = v49 >> 7;
          v54 = v49 >> 14;
          v49 >>= 7;
        }
        while (v54);
        v50 = v52 + 2;
        *v51 = v53;
        goto LABEL_72;
      }
      *((_BYTE *)a2 + 2) = v49;
      v48 = 3;
    }
    else
    {
      *((_BYTE *)a2 + 1) = v47;
      v48 = 2;
    }
    v50 = (char *)a2 + v48;
LABEL_72:
    a2 = SnippetUI::ImageElement_AspectRatio::InternalSerializeWithCachedSizesToArray(v46, v50, a3, a4);
LABEL_73:
    v55 = (SnippetUI::OptionalBool *)*((_QWORD *)this + 5);
    if (!v55)
      goto LABEL_85;
    if ((unint64_t)a2 >= *(_QWORD *)a3)
    {
      a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      v55 = (SnippetUI::OptionalBool *)*((_QWORD *)this + 5);
    }
    *(_BYTE *)a2 = 74;
    v56 = *((_DWORD *)v55 + 5);
    if (v56 > 0x7F)
    {
      *((_BYTE *)a2 + 1) = v56 | 0x80;
      v58 = v56 >> 7;
      if (v56 >> 14)
      {
        v60 = (char *)a2 + 2;
        do
        {
          v61 = v60;
          *v60++ = v58 | 0x80;
          v62 = v58 >> 7;
          v63 = v58 >> 14;
          v58 >>= 7;
        }
        while (v63);
        v59 = v61 + 2;
        *v60 = v62;
        goto LABEL_84;
      }
      *((_BYTE *)a2 + 2) = v58;
      v57 = 3;
    }
    else
    {
      *((_BYTE *)a2 + 1) = v56;
      v57 = 2;
    }
    v59 = (char *)a2 + v57;
LABEL_84:
    a2 = SnippetUI::OptionalBool::InternalSerializeWithCachedSizesToArray(v55, v59, a3, a4);
LABEL_85:
    v64 = (SnippetUI::OptionalBool *)*((_QWORD *)this + 6);
    if (!v64)
      goto LABEL_97;
    if ((unint64_t)a2 >= *(_QWORD *)a3)
    {
      a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      v64 = (SnippetUI::OptionalBool *)*((_QWORD *)this + 6);
    }
    *(_BYTE *)a2 = 82;
    v65 = *((_DWORD *)v64 + 5);
    if (v65 > 0x7F)
    {
      *((_BYTE *)a2 + 1) = v65 | 0x80;
      v67 = v65 >> 7;
      if (v65 >> 14)
      {
        v69 = (char *)a2 + 2;
        do
        {
          v70 = v69;
          *v69++ = v67 | 0x80;
          v71 = v67 >> 7;
          v72 = v67 >> 14;
          v67 >>= 7;
        }
        while (v72);
        v68 = v70 + 2;
        *v69 = v71;
        goto LABEL_96;
      }
      *((_BYTE *)a2 + 2) = v67;
      v66 = 3;
    }
    else
    {
      *((_BYTE *)a2 + 1) = v65;
      v66 = 2;
    }
    v68 = (char *)a2 + v66;
LABEL_96:
    a2 = SnippetUI::OptionalBool::InternalSerializeWithCachedSizesToArray(v64, v68, a3, a4);
LABEL_97:
    v73 = (SnippetUI::Color *)*((_QWORD *)this + 7);
    if (v73)
    {
      if ((unint64_t)a2 >= *(_QWORD *)a3)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
        v73 = (SnippetUI::Color *)*((_QWORD *)this + 7);
      }
      *(_BYTE *)a2 = 90;
      v74 = *((_DWORD *)v73 + 6);
      if (v74 > 0x7F)
      {
        *((_BYTE *)a2 + 1) = v74 | 0x80;
        v76 = v74 >> 7;
        if (v74 >> 14)
        {
          v77 = (char *)a2 + 2;
          do
          {
            v78 = v77;
            *v77++ = v76 | 0x80;
            v79 = v76 >> 7;
            v80 = v76 >> 14;
            v76 >>= 7;
          }
          while (v80);
          v75 = v78 + 2;
          *v77 = v79;
        }
        else
        {
          *((_BYTE *)a2 + 2) = v76;
          v75 = (char *)a2 + 3;
        }
      }
      else
      {
        *((_BYTE *)a2 + 1) = v74;
        v75 = (char *)a2 + 2;
      }
      a2 = SnippetUI::Color::InternalSerializeWithCachedSizesToArray(v73, v75, a3, a4);
    }
  }
  v81 = (google::protobuf::internal *)*((_QWORD *)this + 3);
  if (*((char *)v81 + 23) < 0)
  {
    v82 = (const char *)*((_QWORD *)v81 + 1);
    if (!v82)
      goto LABEL_114;
    v81 = *(google::protobuf::internal **)v81;
    goto LABEL_113;
  }
  v82 = (const char *)*((unsigned __int8 *)v81 + 23);
  if (*((_BYTE *)v81 + 23))
  {
LABEL_113:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v81, v82, 1, (google::protobuf::internal *)"SnippetUI.ImageElement.Url.dark_mode_source");
    a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 12, *((_QWORD *)this + 3), (char *)a2);
  }
LABEL_114:
  v83 = *((_QWORD *)this + 1);
  if ((v83 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v83 & 0xFFFFFFFFFFFFFFFELL), a2, a3, a4);
  else
    return a2;
}

void SnippetUI::ImageElement_Url::CopyFrom(SnippetUI::ImageElement_Url *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    SnippetUI::ImageElement_Url::Clear(this);
    SnippetUI::ImageElement_Url::MergeFrom(this, a2);
  }
}

void SnippetUI::ImageElement_Url::MergeFrom(SnippetUI::ImageElement_Url *this, const google::protobuf::Message *lpsrc)
{
  std::string *v4;
  const SnippetUI::ImageElement_Url *v5;
  google::protobuf::Message *v6;
  char v7;
  std::string v8[2];

  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/ImageElement.pb.cc", 3600);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5)
    SnippetUI::ImageElement_Url::MergeFrom(this, v5);
  else
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
}

void sub_1BF8E2284(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::ImageElement_Url::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 80) = a2;
  return this;
}

uint64_t SnippetUI::ImageElement_Url::GetMetadata(SnippetUI::ImageElement_Url *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ImageElement_2eproto);
  return qword_1EF5817F0;
}

void *SnippetUI::ImageElement_Url::default_instance(SnippetUI::ImageElement_Url *this)
{
  if (atomic_load(scc_info_ImageElement_Url_ImageElement_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_ImageElement_Url_ImageElement_2eproto);
  return &SnippetUI::_ImageElement_Url_default_instance_;
}

void SnippetUI::ImageElement_Url::MergeFrom(SnippetUI::ImageElement_Url *this, const SnippetUI::ImageElement_Url *a2)
{
  std::string *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  const SnippetUI::ImageElement_AspectRatio *v10;
  SnippetUI::ImageElement_AspectRatio *v11;
  const SnippetUI::ImageElement_AspectRatio *v12;
  const SnippetUI::OptionalBool *v13;
  SnippetUI::OptionalBool *v14;
  const SnippetUI::OptionalBool *v15;
  const SnippetUI::OptionalBool *v16;
  SnippetUI::OptionalBool *v17;
  const SnippetUI::OptionalBool *v18;
  const SnippetUI::Color *v19;
  SnippetUI::Color *v20;
  const SnippetUI::Color *v21;
  int v22;
  int v23;
  int v24;
  SnippetUI::ImageElement_Data *v25;
  SnippetUI::ImageElement_Symbol *v26;
  SnippetUI::ImageElement_Bundle *v27;
  const SnippetUI::ImageElement_Data *v28;
  const SnippetUI::ImageElement_Symbol *v29;
  const SnippetUI::ImageElement_Bundle *v30;
  char v31;
  std::string v32[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v32, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/ImageElement.pb.cc", 3615);
    v4 = google::protobuf::internal::LogMessage::operator<<(v32, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v31, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v32[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::ImageElement_Url *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  v6 = *((_QWORD *)a2 + 2);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(_QWORD *)(v6 + 8))
      goto LABEL_13;
  }
  else if (!*(_BYTE *)(v6 + 23))
  {
    goto LABEL_13;
  }
  v7 = (uint64_t *)*((_QWORD *)this + 2);
  if (v7 != (uint64_t *)v6)
  {
    if (v7 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, v6);
    else
      std::string::operator=(*((std::string **)this + 2), (const std::string *)v6);
  }
LABEL_13:
  v8 = *((_QWORD *)a2 + 3);
  if (*(char *)(v8 + 23) < 0)
  {
    if (!*(_QWORD *)(v8 + 8))
      goto LABEL_21;
  }
  else if (!*(_BYTE *)(v8 + 23))
  {
    goto LABEL_21;
  }
  v9 = (uint64_t *)*((_QWORD *)this + 3);
  if (v9 != (uint64_t *)v8)
  {
    if (v9 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 3, v8);
    else
      std::string::operator=(*((std::string **)this + 3), (const std::string *)v8);
  }
LABEL_21:
  if (a2 != (const SnippetUI::ImageElement_Url *)&SnippetUI::_ImageElement_Url_default_instance_)
  {
    v10 = (const SnippetUI::ImageElement_AspectRatio *)*((_QWORD *)a2 + 4);
    if (v10)
    {
      v11 = (SnippetUI::ImageElement_AspectRatio *)*((_QWORD *)this + 4);
      if (!v11)
      {
        v11 = (SnippetUI::ImageElement_AspectRatio *)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement_AspectRatio>(0);
        *((_QWORD *)this + 4) = v11;
        v10 = (const SnippetUI::ImageElement_AspectRatio *)*((_QWORD *)a2 + 4);
      }
      if (v10)
        v12 = v10;
      else
        v12 = (const SnippetUI::ImageElement_AspectRatio *)&SnippetUI::_ImageElement_AspectRatio_default_instance_;
      SnippetUI::ImageElement_AspectRatio::MergeFrom(v11, v12);
    }
    v13 = (const SnippetUI::OptionalBool *)*((_QWORD *)a2 + 5);
    if (v13)
    {
      v14 = (SnippetUI::OptionalBool *)*((_QWORD *)this + 5);
      if (!v14)
      {
        v14 = (SnippetUI::OptionalBool *)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::OptionalBool>(0);
        *((_QWORD *)this + 5) = v14;
        v13 = (const SnippetUI::OptionalBool *)*((_QWORD *)a2 + 5);
      }
      if (v13)
        v15 = v13;
      else
        v15 = (const SnippetUI::OptionalBool *)&SnippetUI::_OptionalBool_default_instance_;
      SnippetUI::OptionalBool::MergeFrom(v14, v15);
    }
    v16 = (const SnippetUI::OptionalBool *)*((_QWORD *)a2 + 6);
    if (v16)
    {
      v17 = (SnippetUI::OptionalBool *)*((_QWORD *)this + 6);
      if (!v17)
      {
        v17 = (SnippetUI::OptionalBool *)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::OptionalBool>(0);
        *((_QWORD *)this + 6) = v17;
        v16 = (const SnippetUI::OptionalBool *)*((_QWORD *)a2 + 6);
      }
      if (v16)
        v18 = v16;
      else
        v18 = (const SnippetUI::OptionalBool *)&SnippetUI::_OptionalBool_default_instance_;
      SnippetUI::OptionalBool::MergeFrom(v17, v18);
    }
    v19 = (const SnippetUI::Color *)*((_QWORD *)a2 + 7);
    if (v19)
    {
      v20 = (SnippetUI::Color *)*((_QWORD *)this + 7);
      if (!v20)
      {
        v20 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Color>(0);
        *((_QWORD *)this + 7) = v20;
        v19 = (const SnippetUI::Color *)*((_QWORD *)a2 + 7);
      }
      if (v19)
        v21 = v19;
      else
        v21 = (const SnippetUI::Color *)&SnippetUI::_Color_default_instance_;
      SnippetUI::Color::MergeFrom(v20, v21);
    }
  }
  v22 = *((_DWORD *)a2 + 16);
  if (v22)
    *((_DWORD *)this + 16) = v22;
  v23 = *((_DWORD *)a2 + 17);
  if (v23)
    *((_DWORD *)this + 17) = v23;
  v24 = *((_DWORD *)a2 + 21);
  if (v24 == 4)
  {
    if (*((_DWORD *)this + 21) == 4)
    {
      v26 = (SnippetUI::ImageElement_Symbol *)*((_QWORD *)this + 9);
    }
    else
    {
      SnippetUI::ImageElement_Url::clear_loading_image((uint64_t)this);
      *((_DWORD *)this + 21) = 4;
      v26 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement_Symbol>(0);
      *((_QWORD *)this + 9) = v26;
      if (*((_DWORD *)a2 + 21) != 4)
      {
        v29 = (const SnippetUI::ImageElement_Symbol *)&SnippetUI::_ImageElement_Symbol_default_instance_;
        goto LABEL_72;
      }
    }
    v29 = (const SnippetUI::ImageElement_Symbol *)*((_QWORD *)a2 + 9);
LABEL_72:
    SnippetUI::ImageElement_Symbol::MergeFrom(v26, v29);
    return;
  }
  if (v24 != 3)
  {
    if (v24 != 2)
      return;
    if (*((_DWORD *)this + 21) == 2)
    {
      v25 = (SnippetUI::ImageElement_Data *)*((_QWORD *)this + 9);
    }
    else
    {
      SnippetUI::ImageElement_Url::clear_loading_image((uint64_t)this);
      *((_DWORD *)this + 21) = 2;
      v25 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement_Data>(0);
      *((_QWORD *)this + 9) = v25;
      if (*((_DWORD *)a2 + 21) != 2)
      {
        v28 = (const SnippetUI::ImageElement_Data *)&SnippetUI::_ImageElement_Data_default_instance_;
        goto LABEL_70;
      }
    }
    v28 = (const SnippetUI::ImageElement_Data *)*((_QWORD *)a2 + 9);
LABEL_70:
    SnippetUI::ImageElement_Data::MergeFrom(v25, v28);
    return;
  }
  if (*((_DWORD *)this + 21) == 3)
  {
    v27 = (SnippetUI::ImageElement_Bundle *)*((_QWORD *)this + 9);
  }
  else
  {
    SnippetUI::ImageElement_Url::clear_loading_image((uint64_t)this);
    *((_DWORD *)this + 21) = 3;
    v27 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement_Bundle>(0);
    *((_QWORD *)this + 9) = v27;
    if (*((_DWORD *)a2 + 21) != 3)
    {
      v30 = (const SnippetUI::ImageElement_Bundle *)&SnippetUI::_ImageElement_Bundle_default_instance_;
      goto LABEL_74;
    }
  }
  v30 = (const SnippetUI::ImageElement_Bundle *)*((_QWORD *)a2 + 9);
LABEL_74:
  SnippetUI::ImageElement_Bundle::MergeFrom(v27, v30);
}

void sub_1BF8E2620(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::ImageElement_Url::clear_loading_image(uint64_t this)
{
  uint64_t v1;
  int v2;

  v1 = this;
  v2 = *(_DWORD *)(this + 84);
  if (v2 == 4 || v2 == 3 || v2 == 2)
  {
    this = *(_QWORD *)(this + 72);
    if (this)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
  }
  *(_DWORD *)(v1 + 84) = 0;
  return this;
}

SnippetUI::ImageElement_Data *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement_Data>(google::protobuf::internal::ArenaImpl *this)
{
  SnippetUI::ImageElement_Data *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (SnippetUI::ImageElement_Data *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x40uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::ImageElement_Data>);
    SnippetUI::ImageElement_Data::ImageElement_Data(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (SnippetUI::ImageElement_Data *)operator new();
    SnippetUI::ImageElement_Data::ImageElement_Data(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_1BF8E270C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D890](v1, 0x10A1C40AE67B8E4);
  _Unwind_Resume(a1);
}

void SnippetUI::ImageElement_Data::MergeFrom(SnippetUI::ImageElement_Data *this, const SnippetUI::ImageElement_Data *a2)
{
  std::string *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  const SnippetUI::ImageElement_AspectRatio *v10;
  SnippetUI::ImageElement_AspectRatio *v11;
  const SnippetUI::ImageElement_AspectRatio *v12;
  const SnippetUI::OptionalBool *v13;
  SnippetUI::OptionalBool *v14;
  const SnippetUI::OptionalBool *v15;
  const SnippetUI::OptionalBool *v16;
  SnippetUI::OptionalBool *v17;
  const SnippetUI::OptionalBool *v18;
  int v19;
  char v20;
  std::string v21[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v21, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/ImageElement.pb.cc", 2481);
    v4 = google::protobuf::internal::LogMessage::operator<<(v21, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v20, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v21[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::ImageElement_Data *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  v6 = *((_QWORD *)a2 + 2);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(_QWORD *)(v6 + 8))
      goto LABEL_13;
  }
  else if (!*(_BYTE *)(v6 + 23))
  {
    goto LABEL_13;
  }
  v7 = (uint64_t *)*((_QWORD *)this + 2);
  if (v7 != (uint64_t *)v6)
  {
    if (v7 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, v6);
    else
      std::string::operator=(*((std::string **)this + 2), (const std::string *)v6);
  }
LABEL_13:
  v8 = *((_QWORD *)a2 + 3);
  if (*(char *)(v8 + 23) < 0)
  {
    if (!*(_QWORD *)(v8 + 8))
      goto LABEL_21;
  }
  else if (!*(_BYTE *)(v8 + 23))
  {
    goto LABEL_21;
  }
  v9 = (uint64_t *)*((_QWORD *)this + 3);
  if (v9 != (uint64_t *)v8)
  {
    if (v9 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 3, v8);
    else
      std::string::operator=(*((std::string **)this + 3), (const std::string *)v8);
  }
LABEL_21:
  if (a2 != (const SnippetUI::ImageElement_Data *)&SnippetUI::_ImageElement_Data_default_instance_)
  {
    v10 = (const SnippetUI::ImageElement_AspectRatio *)*((_QWORD *)a2 + 4);
    if (v10)
    {
      v11 = (SnippetUI::ImageElement_AspectRatio *)*((_QWORD *)this + 4);
      if (!v11)
      {
        v11 = (SnippetUI::ImageElement_AspectRatio *)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement_AspectRatio>(0);
        *((_QWORD *)this + 4) = v11;
        v10 = (const SnippetUI::ImageElement_AspectRatio *)*((_QWORD *)a2 + 4);
      }
      if (v10)
        v12 = v10;
      else
        v12 = (const SnippetUI::ImageElement_AspectRatio *)&SnippetUI::_ImageElement_AspectRatio_default_instance_;
      SnippetUI::ImageElement_AspectRatio::MergeFrom(v11, v12);
    }
    v13 = (const SnippetUI::OptionalBool *)*((_QWORD *)a2 + 5);
    if (v13)
    {
      v14 = (SnippetUI::OptionalBool *)*((_QWORD *)this + 5);
      if (!v14)
      {
        v14 = (SnippetUI::OptionalBool *)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::OptionalBool>(0);
        *((_QWORD *)this + 5) = v14;
        v13 = (const SnippetUI::OptionalBool *)*((_QWORD *)a2 + 5);
      }
      if (v13)
        v15 = v13;
      else
        v15 = (const SnippetUI::OptionalBool *)&SnippetUI::_OptionalBool_default_instance_;
      SnippetUI::OptionalBool::MergeFrom(v14, v15);
    }
    v16 = (const SnippetUI::OptionalBool *)*((_QWORD *)a2 + 6);
    if (v16)
    {
      v17 = (SnippetUI::OptionalBool *)*((_QWORD *)this + 6);
      if (!v17)
      {
        v17 = (SnippetUI::OptionalBool *)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::OptionalBool>(0);
        *((_QWORD *)this + 6) = v17;
        v16 = (const SnippetUI::OptionalBool *)*((_QWORD *)a2 + 6);
      }
      if (v16)
        v18 = v16;
      else
        v18 = (const SnippetUI::OptionalBool *)&SnippetUI::_OptionalBool_default_instance_;
      SnippetUI::OptionalBool::MergeFrom(v17, v18);
    }
  }
  v19 = *((_DWORD *)a2 + 14);
  if (v19)
    *((_DWORD *)this + 14) = v19;
}

void sub_1BF8E28FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

SnippetUI::ImageElement_Bundle *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement_Bundle>(google::protobuf::internal::ArenaImpl *this)
{
  SnippetUI::ImageElement_Bundle *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (SnippetUI::ImageElement_Bundle *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x50uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::ImageElement_Bundle>);
    SnippetUI::ImageElement_Bundle::ImageElement_Bundle(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (SnippetUI::ImageElement_Bundle *)operator new();
    SnippetUI::ImageElement_Bundle::ImageElement_Bundle(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_1BF8E2998(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D890](v1, 0x10A1C40D311D1CDLL);
  _Unwind_Resume(a1);
}

void SnippetUI::ImageElement_Bundle::MergeFrom(SnippetUI::ImageElement_Bundle *this, const SnippetUI::ImageElement_Bundle *a2)
{
  std::string *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  const SnippetUI::ImageElement_AspectRatio *v14;
  SnippetUI::ImageElement_AspectRatio *v15;
  const SnippetUI::ImageElement_AspectRatio *v16;
  const SnippetUI::OptionalBool *v17;
  SnippetUI::OptionalBool *v18;
  const SnippetUI::OptionalBool *v19;
  const SnippetUI::OptionalBool *v20;
  SnippetUI::OptionalBool *v21;
  const SnippetUI::OptionalBool *v22;
  int v23;
  char v24;
  std::string v25[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v25, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/ImageElement.pb.cc", 2948);
    v4 = google::protobuf::internal::LogMessage::operator<<(v25, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v24, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v25[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::ImageElement_Bundle *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  v6 = *((_QWORD *)a2 + 2);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(_QWORD *)(v6 + 8))
      goto LABEL_13;
  }
  else if (!*(_BYTE *)(v6 + 23))
  {
    goto LABEL_13;
  }
  v7 = (uint64_t *)*((_QWORD *)this + 2);
  if (v7 != (uint64_t *)v6)
  {
    if (v7 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, v6);
    else
      std::string::operator=(*((std::string **)this + 2), (const std::string *)v6);
  }
LABEL_13:
  v8 = *((_QWORD *)a2 + 3);
  if (*(char *)(v8 + 23) < 0)
  {
    if (!*(_QWORD *)(v8 + 8))
      goto LABEL_21;
  }
  else if (!*(_BYTE *)(v8 + 23))
  {
    goto LABEL_21;
  }
  v9 = (uint64_t *)*((_QWORD *)this + 3);
  if (v9 != (uint64_t *)v8)
  {
    if (v9 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 3, v8);
    else
      std::string::operator=(*((std::string **)this + 3), (const std::string *)v8);
  }
LABEL_21:
  v10 = *((_QWORD *)a2 + 4);
  if (*(char *)(v10 + 23) < 0)
  {
    if (!*(_QWORD *)(v10 + 8))
      goto LABEL_29;
  }
  else if (!*(_BYTE *)(v10 + 23))
  {
    goto LABEL_29;
  }
  v11 = (uint64_t *)*((_QWORD *)this + 4);
  if (v11 != (uint64_t *)v10)
  {
    if (v11 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 4, v10);
    else
      std::string::operator=(*((std::string **)this + 4), (const std::string *)v10);
  }
LABEL_29:
  v12 = *((_QWORD *)a2 + 5);
  if (*(char *)(v12 + 23) < 0)
  {
    if (!*(_QWORD *)(v12 + 8))
      goto LABEL_37;
  }
  else if (!*(_BYTE *)(v12 + 23))
  {
    goto LABEL_37;
  }
  v13 = (uint64_t *)*((_QWORD *)this + 5);
  if (v13 != (uint64_t *)v12)
  {
    if (v13 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 5, v12);
    else
      std::string::operator=(*((std::string **)this + 5), (const std::string *)v12);
  }
LABEL_37:
  if (a2 != (const SnippetUI::ImageElement_Bundle *)&SnippetUI::_ImageElement_Bundle_default_instance_)
  {
    v14 = (const SnippetUI::ImageElement_AspectRatio *)*((_QWORD *)a2 + 6);
    if (v14)
    {
      v15 = (SnippetUI::ImageElement_AspectRatio *)*((_QWORD *)this + 6);
      if (!v15)
      {
        v15 = (SnippetUI::ImageElement_AspectRatio *)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement_AspectRatio>(0);
        *((_QWORD *)this + 6) = v15;
        v14 = (const SnippetUI::ImageElement_AspectRatio *)*((_QWORD *)a2 + 6);
      }
      if (v14)
        v16 = v14;
      else
        v16 = (const SnippetUI::ImageElement_AspectRatio *)&SnippetUI::_ImageElement_AspectRatio_default_instance_;
      SnippetUI::ImageElement_AspectRatio::MergeFrom(v15, v16);
    }
    v17 = (const SnippetUI::OptionalBool *)*((_QWORD *)a2 + 7);
    if (v17)
    {
      v18 = (SnippetUI::OptionalBool *)*((_QWORD *)this + 7);
      if (!v18)
      {
        v18 = (SnippetUI::OptionalBool *)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::OptionalBool>(0);
        *((_QWORD *)this + 7) = v18;
        v17 = (const SnippetUI::OptionalBool *)*((_QWORD *)a2 + 7);
      }
      if (v17)
        v19 = v17;
      else
        v19 = (const SnippetUI::OptionalBool *)&SnippetUI::_OptionalBool_default_instance_;
      SnippetUI::OptionalBool::MergeFrom(v18, v19);
    }
    v20 = (const SnippetUI::OptionalBool *)*((_QWORD *)a2 + 8);
    if (v20)
    {
      v21 = (SnippetUI::OptionalBool *)*((_QWORD *)this + 8);
      if (!v21)
      {
        v21 = (SnippetUI::OptionalBool *)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::OptionalBool>(0);
        *((_QWORD *)this + 8) = v21;
        v20 = (const SnippetUI::OptionalBool *)*((_QWORD *)a2 + 8);
      }
      if (v20)
        v22 = v20;
      else
        v22 = (const SnippetUI::OptionalBool *)&SnippetUI::_OptionalBool_default_instance_;
      SnippetUI::OptionalBool::MergeFrom(v21, v22);
    }
  }
  v23 = *((_DWORD *)a2 + 18);
  if (v23)
    *((_DWORD *)this + 18) = v23;
}

void sub_1BF8E2C28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

SnippetUI::ImageElement_Bundle *SnippetUI::ImageElement_Bundle::ImageElement_Bundle(SnippetUI::ImageElement_Bundle *this)
{
  *(_QWORD *)this = &off_1E792C730;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 19) = 0;
  if (atomic_load(scc_info_ImageElement_Bundle_ImageElement_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_ImageElement_Bundle_ImageElement_2eproto);
  *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 4) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 5) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_DWORD *)this + 18) = 0;
  return this;
}

void sub_1BF8E2CB4(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::ImageElement_Bundle>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

void SnippetUI::ImageElement_Bundle::~ImageElement_Bundle(SnippetUI::ImageElement_Bundle *this)
{
  SnippetUI::ImageElement_Bundle::~ImageElement_Bundle(this);
  JUMPOUT(0x1C3B8D890);
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)this = &off_1E792C730;
  v2 = *((_QWORD *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x1C3B8D890](v2, 0x1012C40EC159624);
  }
  v4 = *((_QWORD *)this + 3);
  if ((uint64_t *)v4 != &google::protobuf::internal::fixed_address_empty_string && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0)
      operator delete(*(void **)v4);
    MEMORY[0x1C3B8D890](v4, 0x1012C40EC159624);
  }
  v6 = *((_QWORD *)this + 4);
  if ((uint64_t *)v6 != &google::protobuf::internal::fixed_address_empty_string && v6 != 0)
  {
    if (*(char *)(v6 + 23) < 0)
      operator delete(*(void **)v6);
    MEMORY[0x1C3B8D890](v6, 0x1012C40EC159624);
  }
  v8 = *((_QWORD *)this + 5);
  if ((uint64_t *)v8 != &google::protobuf::internal::fixed_address_empty_string && v8 != 0)
  {
    if (*(char *)(v8 + 23) < 0)
      operator delete(*(void **)v8);
    MEMORY[0x1C3B8D890](v8, 0x1012C40EC159624);
  }
  if (this != (SnippetUI::ImageElement_Bundle *)&SnippetUI::_ImageElement_Bundle_default_instance_)
  {
    v10 = *((_QWORD *)this + 6);
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    v11 = *((_QWORD *)this + 7);
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = *((_QWORD *)this + 8);
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

SnippetUI::ImageElement_Bundle *SnippetUI::ImageElement_Bundle::New(SnippetUI::ImageElement_Bundle *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement_Bundle>(0);
}

SnippetUI::ImageElement_Bundle *SnippetUI::ImageElement_Bundle::New(SnippetUI::ImageElement_Bundle *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement_Bundle>(a2);
}

void SnippetUI::ImageElement_Bundle::Clear(SnippetUI::ImageElement_Bundle *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char v10;

  v2 = *((_QWORD *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(_BYTE **)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v2 = 0;
      *(_BYTE *)(v2 + 23) = 0;
    }
  }
  v3 = *((_QWORD *)this + 3);
  if ((uint64_t *)v3 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v3 + 23) < 0)
    {
      **(_BYTE **)v3 = 0;
      *(_QWORD *)(v3 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v3 = 0;
      *(_BYTE *)(v3 + 23) = 0;
    }
  }
  v4 = *((_QWORD *)this + 4);
  if ((uint64_t *)v4 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v4 + 23) < 0)
    {
      **(_BYTE **)v4 = 0;
      *(_QWORD *)(v4 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v4 = 0;
      *(_BYTE *)(v4 + 23) = 0;
    }
  }
  v5 = *((_QWORD *)this + 5);
  if ((uint64_t *)v5 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v5 + 23) < 0)
    {
      **(_BYTE **)v5 = 0;
      *(_QWORD *)(v5 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v5 = 0;
      *(_BYTE *)(v5 + 23) = 0;
    }
  }
  v6 = *((_QWORD *)this + 6);
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  *((_QWORD *)this + 6) = 0;
  v7 = *((_QWORD *)this + 7);
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  *((_QWORD *)this + 7) = 0;
  v8 = *((_QWORD *)this + 8);
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v10 = *((_BYTE *)this + 8);
  v9 = (char *)this + 8;
  *((_QWORD *)v9 + 7) = 0;
  *((_DWORD *)v9 + 16) = 0;
  if ((v10 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoClear((google::protobuf::internal::InternalMetadataWithArena *)v9);
}

uint64_t SnippetUI::ImageElement_Bundle::IsInitialized(SnippetUI::ImageElement_Bundle *this)
{
  return 1;
}

char *SnippetUI::ImageElement_Bundle::ByteSizeLong(SnippetUI::ImageElement_Bundle *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  const google::protobuf::UnknownFieldSet *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  SnippetUI::ImageElement_AspectRatio *v15;
  char *v16;
  SnippetUI::OptionalBool *v17;
  char *v18;
  SnippetUI::OptionalBool *v19;
  char *v20;
  int v21;
  uint64_t v22;

  v2 = *((_QWORD *)this + 2);
  v3 = *(unsigned __int8 *)(v2 + 23);
  if (*(char *)(v2 + 23) < 0)
  {
    if (*(_QWORD *)(v2 + 8))
      goto LABEL_3;
LABEL_7:
    v5 = 0;
    goto LABEL_8;
  }
  if (!*(_BYTE *)(v2 + 23))
    goto LABEL_7;
LABEL_3:
  v4 = *(_QWORD *)(v2 + 8);
  if ((v3 & 0x80u) == 0)
    v4 = v3;
  v5 = (const google::protobuf::UnknownFieldSet *)(v4 + ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_8:
  v6 = *((_QWORD *)this + 3);
  v7 = *(unsigned __int8 *)(v6 + 23);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(_QWORD *)(v6 + 8))
      goto LABEL_13;
  }
  else if (!*(_BYTE *)(v6 + 23))
  {
    goto LABEL_13;
  }
  v8 = *(_QWORD *)(v6 + 8);
  if ((v7 & 0x80u) == 0)
    v8 = v7;
  v5 = (const google::protobuf::UnknownFieldSet *)((char *)v5 + v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_13:
  v9 = *((_QWORD *)this + 4);
  v10 = *(unsigned __int8 *)(v9 + 23);
  if (*(char *)(v9 + 23) < 0)
  {
    if (!*(_QWORD *)(v9 + 8))
      goto LABEL_18;
  }
  else if (!*(_BYTE *)(v9 + 23))
  {
    goto LABEL_18;
  }
  v11 = *(_QWORD *)(v9 + 8);
  if ((v10 & 0x80u) == 0)
    v11 = v10;
  v5 = (const google::protobuf::UnknownFieldSet *)((char *)v5 + v11 + ((9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_18:
  v12 = *((_QWORD *)this + 5);
  v13 = *(unsigned __int8 *)(v12 + 23);
  if (*(char *)(v12 + 23) < 0)
  {
    if (!*(_QWORD *)(v12 + 8))
      goto LABEL_23;
  }
  else if (!*(_BYTE *)(v12 + 23))
  {
    goto LABEL_23;
  }
  v14 = *(_QWORD *)(v12 + 8);
  if ((v13 & 0x80u) == 0)
    v14 = v13;
  v5 = (const google::protobuf::UnknownFieldSet *)((char *)v5 + v14 + ((9 * (__clz(v14 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_23:
  if (this != (SnippetUI::ImageElement_Bundle *)&SnippetUI::_ImageElement_Bundle_default_instance_)
  {
    v15 = (SnippetUI::ImageElement_AspectRatio *)*((_QWORD *)this + 6);
    if (v15)
    {
      v16 = SnippetUI::ImageElement_AspectRatio::ByteSizeLong(v15);
      v5 = (const google::protobuf::UnknownFieldSet *)&v16[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v16 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v17 = (SnippetUI::OptionalBool *)*((_QWORD *)this + 7);
    if (v17)
    {
      v18 = SnippetUI::OptionalBool::ByteSizeLong(v17);
      v5 = (const google::protobuf::UnknownFieldSet *)&v18[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v18 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v19 = (SnippetUI::OptionalBool *)*((_QWORD *)this + 8);
    if (v19)
    {
      v20 = SnippetUI::OptionalBool::ByteSizeLong(v19);
      v5 = (const google::protobuf::UnknownFieldSet *)&v20[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v20 | 1) ^ 0x1F) + 73) >> 6)];
    }
  }
  v21 = *((_DWORD *)this + 18);
  if (v21)
  {
    if (v21 < 0)
      v22 = 11;
    else
      v22 = ((9 * (__clz(v21 | 1) ^ 0x1F) + 73) >> 6) + 1;
    v5 = (const google::protobuf::UnknownFieldSet *)((char *)v5 + v22);
  }
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::ImageElement_Bundle *)((char *)this + 8), v5, (_DWORD *)this + 19);
  *((_DWORD *)this + 19) = (_DWORD)v5;
  return (char *)v5;
}

uint64_t SnippetUI::ImageElement_Bundle::GetCachedSize(SnippetUI::ImageElement_Bundle *this)
{
  return *((unsigned int *)this + 19);
}

google::protobuf::internal *SnippetUI::ImageElement_Bundle::_InternalParse(SnippetUI::ImageElement_Bundle *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  std::string **v5;
  std::string **v6;
  std::string **v7;
  std::string **v8;
  uint64_t *v9;
  google::protobuf::internal::ParseContext *v10;
  google::protobuf::internal *TagFallback;
  char *v12;
  std::string *v13;
  std::string::value_type *v14;
  google::protobuf::internal::ParseContext *v15;
  char *v16;
  google::protobuf::internal *v17;
  unint64_t v18;
  int v19;
  SnippetUI::ImageElement_AspectRatio *v20;
  char *v21;
  SnippetUI::OptionalBool *v22;
  BOOL v23;
  google::protobuf::internal *v25;

  v25 = a2;
  v5 = (std::string **)((char *)this + 40);
  v6 = (std::string **)((char *)this + 32);
  v7 = (std::string **)((char *)this + 24);
  v8 = (std::string **)((char *)this + 16);
  v9 = (uint64_t *)((char *)this + 8);
  while (2)
  {
    if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v25, *((_DWORD *)a3 + 23)) & 1) != 0)
      return v25;
    TagFallback = (google::protobuf::internal *)((char *)v25 + 1);
    v12 = (char *)*(unsigned __int8 *)v25;
    if ((*(char *)v25 & 0x80000000) == 0)
      goto LABEL_6;
    v12 = (char *)(v12 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v25 + 2);
LABEL_6:
      v25 = TagFallback;
      goto LABEL_7;
    }
    TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v25, v12);
    v25 = TagFallback;
    if (!TagFallback)
      return TagFallback;
LABEL_7:
    switch(v12 >> 3)
    {
      case 1u:
        if (v12 != 10)
          goto LABEL_47;
        v13 = *v8;
        if (*v8 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v8, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v13 = *v8;
          TagFallback = v25;
        }
        v14 = (std::string::value_type *)TagFallback;
        v15 = a3;
        v16 = "SnippetUI.ImageElement.Bundle.name";
        goto LABEL_44;
      case 2u:
        if (v12 != 18)
          goto LABEL_47;
        v13 = *v7;
        if (*v7 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v7, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v13 = *v7;
          TagFallback = v25;
        }
        v14 = (std::string::value_type *)TagFallback;
        v15 = a3;
        v16 = "SnippetUI.ImageElement.Bundle.bundle_id";
        goto LABEL_44;
      case 3u:
        if (v12 != 24)
          goto LABEL_47;
        v17 = (google::protobuf::internal *)((char *)TagFallback + 1);
        LODWORD(v18) = *(unsigned __int8 *)TagFallback;
        if ((*(char *)TagFallback & 0x80000000) == 0)
          goto LABEL_22;
        v19 = *(char *)v17;
        v18 = v18 + (v19 << 7) - 128;
        if (v19 < 0)
        {
          v25 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(TagFallback, v18);
          if (!v25)
            goto LABEL_53;
        }
        else
        {
          v17 = (google::protobuf::internal *)((char *)TagFallback + 2);
LABEL_22:
          v25 = v17;
        }
        *((_DWORD *)this + 18) = v18;
        continue;
      case 4u:
        if (v12 != 34)
          goto LABEL_47;
        v20 = (SnippetUI::ImageElement_AspectRatio *)*((_QWORD *)this + 6);
        if (!v20)
        {
          v20 = (SnippetUI::ImageElement_AspectRatio *)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement_AspectRatio>(0);
          *((_QWORD *)this + 6) = v20;
          TagFallback = v25;
        }
        v21 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::ImageElement_AspectRatio>(a3, v20, TagFallback);
        goto LABEL_45;
      case 5u:
        if (v12 != 42)
          goto LABEL_47;
        v13 = *v6;
        if (*v6 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v6, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v13 = *v6;
          TagFallback = v25;
        }
        v14 = (std::string::value_type *)TagFallback;
        v15 = a3;
        v16 = "SnippetUI.ImageElement.Bundle.bundle_path";
        goto LABEL_44;
      case 6u:
        if (v12 != 50)
          goto LABEL_47;
        v22 = (SnippetUI::OptionalBool *)*((_QWORD *)this + 7);
        if (v22)
          goto LABEL_39;
        v22 = (SnippetUI::OptionalBool *)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::OptionalBool>(0);
        *((_QWORD *)this + 7) = v22;
        goto LABEL_38;
      case 7u:
        if (v12 != 58)
          goto LABEL_47;
        v22 = (SnippetUI::OptionalBool *)*((_QWORD *)this + 8);
        if (v22)
          goto LABEL_39;
        v22 = (SnippetUI::OptionalBool *)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::OptionalBool>(0);
        *((_QWORD *)this + 8) = v22;
LABEL_38:
        TagFallback = v25;
LABEL_39:
        v21 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::OptionalBool>(a3, v22, TagFallback);
        goto LABEL_45;
      case 8u:
        if (v12 != 66)
          goto LABEL_47;
        v13 = *v5;
        if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v13 = *v5;
          TagFallback = v25;
        }
        v14 = (std::string::value_type *)TagFallback;
        v15 = a3;
        v16 = "SnippetUI.ImageElement.Bundle.dark_mode_name";
LABEL_44:
        v21 = google::protobuf::internal::InlineGreedyStringParserUTF8(v13, v14, (uint64_t)v15, (google::protobuf::internal *)v16);
        goto LABEL_45;
      default:
LABEL_47:
        if ((_DWORD)v12)
          v23 = (v12 & 7) == 4;
        else
          v23 = 1;
        if (v23)
        {
          *((_DWORD *)a3 + 20) = (_DWORD)v12 - 1;
          return TagFallback;
        }
        v21 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v12, v9, TagFallback, a3, v10);
LABEL_45:
        v25 = (google::protobuf::internal *)v21;
        if (v21)
          continue;
LABEL_53:
        TagFallback = 0;
        break;
    }
    return TagFallback;
  }
}

const google::protobuf::UnknownFieldSet *SnippetUI::ImageElement_Bundle::InternalSerializeWithCachedSizesToArray(SnippetUI::ImageElement_Bundle *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  google::protobuf::internal *v7;
  const char *v8;
  google::protobuf::internal *v9;
  const char *v10;
  unsigned int v11;
  unint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  unint64_t v15;
  unint64_t v16;
  SnippetUI::ImageElement_AspectRatio *v17;
  unsigned int v18;
  char *v19;
  unsigned int v20;
  _BYTE *v21;
  _BYTE *v22;
  unsigned int v23;
  unsigned int v24;
  google::protobuf::internal *v25;
  const char *v26;
  SnippetUI::OptionalBool *v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int v30;
  char *v31;
  _BYTE *v32;
  _BYTE *v33;
  unsigned int v34;
  unsigned int v35;
  SnippetUI::OptionalBool *v36;
  unsigned int v37;
  char *v38;
  unsigned int v39;
  _BYTE *v40;
  _BYTE *v41;
  unsigned int v42;
  unsigned int v43;
  google::protobuf::internal *v44;
  const char *v45;
  uint64_t v46;

  v7 = (google::protobuf::internal *)*((_QWORD *)this + 2);
  if (*((char *)v7 + 23) < 0)
  {
    v8 = (const char *)*((_QWORD *)v7 + 1);
    if (!v8)
      goto LABEL_7;
    v7 = *(google::protobuf::internal **)v7;
    goto LABEL_6;
  }
  v8 = (const char *)*((unsigned __int8 *)v7 + 23);
  if (*((_BYTE *)v7 + 23))
  {
LABEL_6:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v7, v8, 1, (google::protobuf::internal *)"SnippetUI.ImageElement.Bundle.name");
    a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 1, *((_QWORD *)this + 2), (char *)a2);
  }
LABEL_7:
  v9 = (google::protobuf::internal *)*((_QWORD *)this + 3);
  if (*((char *)v9 + 23) < 0)
  {
    v10 = (const char *)*((_QWORD *)v9 + 1);
    if (!v10)
      goto LABEL_13;
    v9 = *(google::protobuf::internal **)v9;
    goto LABEL_12;
  }
  v10 = (const char *)*((unsigned __int8 *)v9 + 23);
  if (*((_BYTE *)v9 + 23))
  {
LABEL_12:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v9, v10, 1, (google::protobuf::internal *)"SnippetUI.ImageElement.Bundle.bundle_id");
    a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 2, *((_QWORD *)this + 3), (char *)a2);
  }
LABEL_13:
  v11 = *((_DWORD *)this + 18);
  if (v11)
  {
    if ((unint64_t)a2 >= *(_QWORD *)a3)
    {
      a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      v11 = *((_DWORD *)this + 18);
    }
    *(_BYTE *)a2 = 24;
    if (v11 > 0x7F)
    {
      *((_BYTE *)a2 + 1) = v11 | 0x80;
      v12 = (unint64_t)(int)v11 >> 7;
      if (v11 >> 14)
      {
        v13 = (char *)a2 + 2;
        do
        {
          v14 = v13;
          *v13++ = v12 | 0x80;
          v15 = v12 >> 7;
          v16 = v12 >> 14;
          v12 >>= 7;
        }
        while (v16);
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
        *v13 = v15;
      }
      else
      {
        *((_BYTE *)a2 + 2) = v12;
        a2 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 3);
      }
    }
    else
    {
      *((_BYTE *)a2 + 1) = v11;
      a2 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 2);
    }
  }
  if (this != (SnippetUI::ImageElement_Bundle *)&SnippetUI::_ImageElement_Bundle_default_instance_)
  {
    v17 = (SnippetUI::ImageElement_AspectRatio *)*((_QWORD *)this + 6);
    if (v17)
    {
      if ((unint64_t)a2 >= *(_QWORD *)a3)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
        v17 = (SnippetUI::ImageElement_AspectRatio *)*((_QWORD *)this + 6);
      }
      *(_BYTE *)a2 = 34;
      v18 = *((_DWORD *)v17 + 6);
      if (v18 > 0x7F)
      {
        *((_BYTE *)a2 + 1) = v18 | 0x80;
        v20 = v18 >> 7;
        if (v18 >> 14)
        {
          v21 = (char *)a2 + 2;
          do
          {
            v22 = v21;
            *v21++ = v20 | 0x80;
            v23 = v20 >> 7;
            v24 = v20 >> 14;
            v20 >>= 7;
          }
          while (v24);
          v19 = v22 + 2;
          *v21 = v23;
        }
        else
        {
          *((_BYTE *)a2 + 2) = v20;
          v19 = (char *)a2 + 3;
        }
      }
      else
      {
        *((_BYTE *)a2 + 1) = v18;
        v19 = (char *)a2 + 2;
      }
      a2 = SnippetUI::ImageElement_AspectRatio::InternalSerializeWithCachedSizesToArray(v17, v19, a3, a4);
    }
  }
  v25 = (google::protobuf::internal *)*((_QWORD *)this + 4);
  if (*((char *)v25 + 23) < 0)
  {
    v26 = (const char *)*((_QWORD *)v25 + 1);
    if (!v26)
      goto LABEL_41;
    v25 = *(google::protobuf::internal **)v25;
    goto LABEL_40;
  }
  v26 = (const char *)*((unsigned __int8 *)v25 + 23);
  if (*((_BYTE *)v25 + 23))
  {
LABEL_40:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v25, v26, 1, (google::protobuf::internal *)"SnippetUI.ImageElement.Bundle.bundle_path");
    a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 5, *((_QWORD *)this + 4), (char *)a2);
  }
LABEL_41:
  if (this == (SnippetUI::ImageElement_Bundle *)&SnippetUI::_ImageElement_Bundle_default_instance_)
    goto LABEL_65;
  v27 = (SnippetUI::OptionalBool *)*((_QWORD *)this + 7);
  if (v27)
  {
    if ((unint64_t)a2 >= *(_QWORD *)a3)
    {
      a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      v27 = (SnippetUI::OptionalBool *)*((_QWORD *)this + 7);
    }
    *(_BYTE *)a2 = 50;
    v28 = *((_DWORD *)v27 + 5);
    if (v28 > 0x7F)
    {
      *((_BYTE *)a2 + 1) = v28 | 0x80;
      v30 = v28 >> 7;
      if (v28 >> 14)
      {
        v32 = (char *)a2 + 2;
        do
        {
          v33 = v32;
          *v32++ = v30 | 0x80;
          v34 = v30 >> 7;
          v35 = v30 >> 14;
          v30 >>= 7;
        }
        while (v35);
        v31 = v33 + 2;
        *v32 = v34;
        goto LABEL_53;
      }
      *((_BYTE *)a2 + 2) = v30;
      v29 = 3;
    }
    else
    {
      *((_BYTE *)a2 + 1) = v28;
      v29 = 2;
    }
    v31 = (char *)a2 + v29;
LABEL_53:
    a2 = SnippetUI::OptionalBool::InternalSerializeWithCachedSizesToArray(v27, v31, a3, a4);
  }
  v36 = (SnippetUI::OptionalBool *)*((_QWORD *)this + 8);
  if (v36)
  {
    if ((unint64_t)a2 >= *(_QWORD *)a3)
    {
      a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      v36 = (SnippetUI::OptionalBool *)*((_QWORD *)this + 8);
    }
    *(_BYTE *)a2 = 58;
    v37 = *((_DWORD *)v36 + 5);
    if (v37 > 0x7F)
    {
      *((_BYTE *)a2 + 1) = v37 | 0x80;
      v39 = v37 >> 7;
      if (v37 >> 14)
      {
        v40 = (char *)a2 + 2;
        do
        {
          v41 = v40;
          *v40++ = v39 | 0x80;
          v42 = v39 >> 7;
          v43 = v39 >> 14;
          v39 >>= 7;
        }
        while (v43);
        v38 = v41 + 2;
        *v40 = v42;
      }
      else
      {
        *((_BYTE *)a2 + 2) = v39;
        v38 = (char *)a2 + 3;
      }
    }
    else
    {
      *((_BYTE *)a2 + 1) = v37;
      v38 = (char *)a2 + 2;
    }
    a2 = SnippetUI::OptionalBool::InternalSerializeWithCachedSizesToArray(v36, v38, a3, a4);
  }
LABEL_65:
  v44 = (google::protobuf::internal *)*((_QWORD *)this + 5);
  if (*((char *)v44 + 23) < 0)
  {
    v45 = (const char *)*((_QWORD *)v44 + 1);
    if (!v45)
      goto LABEL_71;
    v44 = *(google::protobuf::internal **)v44;
    goto LABEL_70;
  }
  v45 = (const char *)*((unsigned __int8 *)v44 + 23);
  if (*((_BYTE *)v44 + 23))
  {
LABEL_70:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v44, v45, 1, (google::protobuf::internal *)"SnippetUI.ImageElement.Bundle.dark_mode_name");
    a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 8, *((_QWORD *)this + 5), (char *)a2);
  }
LABEL_71:
  v46 = *((_QWORD *)this + 1);
  if ((v46 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v46 & 0xFFFFFFFFFFFFFFFELL), a2, a3, a4);
  else
    return a2;
}

void SnippetUI::ImageElement_Bundle::CopyFrom(SnippetUI::ImageElement_Bundle *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    SnippetUI::ImageElement_Bundle::Clear(this);
    SnippetUI::ImageElement_Bundle::MergeFrom(this, a2);
  }
}

void SnippetUI::ImageElement_Bundle::MergeFrom(SnippetUI::ImageElement_Bundle *this, const google::protobuf::Message *lpsrc)
{
  std::string *v4;
  const SnippetUI::ImageElement_Bundle *v5;
  google::protobuf::Message *v6;
  char v7;
  std::string v8[2];

  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/ImageElement.pb.cc", 2933);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5)
    SnippetUI::ImageElement_Bundle::MergeFrom(this, v5);
  else
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
}

void sub_1BF8E38DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::ImageElement_Bundle::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 76) = a2;
  return this;
}

uint64_t SnippetUI::ImageElement_Bundle::GetMetadata(SnippetUI::ImageElement_Bundle *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ImageElement_2eproto);
  return qword_1EF5817E0;
}

void *SnippetUI::ImageElement_Bundle::default_instance(SnippetUI::ImageElement_Bundle *this)
{
  if (atomic_load(scc_info_ImageElement_Bundle_ImageElement_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_ImageElement_Bundle_ImageElement_2eproto);
  return &SnippetUI::_ImageElement_Bundle_default_instance_;
}

SnippetUI::ImageElement_Data *SnippetUI::ImageElement_Data::ImageElement_Data(SnippetUI::ImageElement_Data *this)
{
  *(_QWORD *)this = &off_1E792C670;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 15) = 0;
  if (atomic_load(scc_info_ImageElement_Data_ImageElement_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_ImageElement_Data_ImageElement_2eproto);
  *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_DWORD *)this + 14) = 0;
  return this;
}

void sub_1BF8E3B3C(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::ImageElement_Data>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

void SnippetUI::ImageElement_Data::~ImageElement_Data(SnippetUI::ImageElement_Data *this)
{
  SnippetUI::ImageElement_Data::~ImageElement_Data(this);
  JUMPOUT(0x1C3B8D890);
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)this = &off_1E792C670;
  v2 = *((_QWORD *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x1C3B8D890](v2, 0x1012C40EC159624);
  }
  v4 = *((_QWORD *)this + 3);
  if ((uint64_t *)v4 != &google::protobuf::internal::fixed_address_empty_string && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0)
      operator delete(*(void **)v4);
    MEMORY[0x1C3B8D890](v4, 0x1012C40EC159624);
  }
  if (this != (SnippetUI::ImageElement_Data *)&SnippetUI::_ImageElement_Data_default_instance_)
  {
    v6 = *((_QWORD *)this + 4);
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    v7 = *((_QWORD *)this + 5);
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    v8 = *((_QWORD *)this + 6);
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

SnippetUI::ImageElement_Data *SnippetUI::ImageElement_Data::New(SnippetUI::ImageElement_Data *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement_Data>(0);
}

SnippetUI::ImageElement_Data *SnippetUI::ImageElement_Data::New(SnippetUI::ImageElement_Data *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement_Data>(a2);
}

void SnippetUI::ImageElement_Data::Clear(SnippetUI::ImageElement_Data *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char v8;

  v2 = *((_QWORD *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(_BYTE **)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v2 = 0;
      *(_BYTE *)(v2 + 23) = 0;
    }
  }
  v3 = *((_QWORD *)this + 3);
  if ((uint64_t *)v3 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v3 + 23) < 0)
    {
      **(_BYTE **)v3 = 0;
      *(_QWORD *)(v3 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v3 = 0;
      *(_BYTE *)(v3 + 23) = 0;
    }
  }
  v4 = *((_QWORD *)this + 4);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  *((_QWORD *)this + 4) = 0;
  v5 = *((_QWORD *)this + 5);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *((_QWORD *)this + 5) = 0;
  v6 = *((_QWORD *)this + 6);
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v8 = *((_BYTE *)this + 8);
  v7 = (char *)this + 8;
  *((_QWORD *)v7 + 5) = 0;
  *((_DWORD *)v7 + 12) = 0;
  if ((v8 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoClear((google::protobuf::internal::InternalMetadataWithArena *)v7);
}

uint64_t SnippetUI::ImageElement_Data::IsInitialized(SnippetUI::ImageElement_Data *this)
{
  return 1;
}

char *SnippetUI::ImageElement_Data::ByteSizeLong(SnippetUI::ImageElement_Data *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  const google::protobuf::UnknownFieldSet *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  SnippetUI::ImageElement_AspectRatio *v9;
  char *v10;
  SnippetUI::OptionalBool *v11;
  char *v12;
  SnippetUI::OptionalBool *v13;
  char *v14;
  int v15;
  uint64_t v16;

  v2 = *((_QWORD *)this + 2);
  v3 = *(unsigned __int8 *)(v2 + 23);
  if (*(char *)(v2 + 23) < 0)
  {
    if (*(_QWORD *)(v2 + 8))
      goto LABEL_3;
LABEL_7:
    v5 = 0;
    goto LABEL_8;
  }
  if (!*(_BYTE *)(v2 + 23))
    goto LABEL_7;
LABEL_3:
  v4 = *(_QWORD *)(v2 + 8);
  if ((v3 & 0x80u) == 0)
    v4 = v3;
  v5 = (const google::protobuf::UnknownFieldSet *)(v4 + ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_8:
  v6 = *((_QWORD *)this + 3);
  v7 = *(unsigned __int8 *)(v6 + 23);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(_QWORD *)(v6 + 8))
      goto LABEL_13;
  }
  else if (!*(_BYTE *)(v6 + 23))
  {
    goto LABEL_13;
  }
  v8 = *(_QWORD *)(v6 + 8);
  if ((v7 & 0x80u) == 0)
    v8 = v7;
  v5 = (const google::protobuf::UnknownFieldSet *)((char *)v5 + v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_13:
  if (this != (SnippetUI::ImageElement_Data *)&SnippetUI::_ImageElement_Data_default_instance_)
  {
    v9 = (SnippetUI::ImageElement_AspectRatio *)*((_QWORD *)this + 4);
    if (v9)
    {
      v10 = SnippetUI::ImageElement_AspectRatio::ByteSizeLong(v9);
      v5 = (const google::protobuf::UnknownFieldSet *)&v10[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v11 = (SnippetUI::OptionalBool *)*((_QWORD *)this + 5);
    if (v11)
    {
      v12 = SnippetUI::OptionalBool::ByteSizeLong(v11);
      v5 = (const google::protobuf::UnknownFieldSet *)&v12[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v12 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v13 = (SnippetUI::OptionalBool *)*((_QWORD *)this + 6);
    if (v13)
    {
      v14 = SnippetUI::OptionalBool::ByteSizeLong(v13);
      v5 = (const google::protobuf::UnknownFieldSet *)&v14[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v14 | 1) ^ 0x1F) + 73) >> 6)];
    }
  }
  v15 = *((_DWORD *)this + 14);
  if (v15)
  {
    if (v15 < 0)
      v16 = 11;
    else
      v16 = ((9 * (__clz(v15 | 1) ^ 0x1F) + 73) >> 6) + 1;
    v5 = (const google::protobuf::UnknownFieldSet *)((char *)v5 + v16);
  }
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::ImageElement_Data *)((char *)this + 8), v5, (_DWORD *)this + 15);
  *((_DWORD *)this + 15) = (_DWORD)v5;
  return (char *)v5;
}

uint64_t SnippetUI::ImageElement_Data::GetCachedSize(SnippetUI::ImageElement_Data *this)
{
  return *((unsigned int *)this + 15);
}

google::protobuf::internal *SnippetUI::ImageElement_Data::_InternalParse(SnippetUI::ImageElement_Data *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  std::string **v5;
  std::string **v6;
  uint64_t *v7;
  google::protobuf::internal::ParseContext *v8;
  google::protobuf::internal *TagFallback;
  char *v10;
  std::string *v11;
  google::protobuf::internal *v12;
  unint64_t v13;
  int v14;
  SnippetUI::ImageElement_AspectRatio *v15;
  char *v16;
  SnippetUI::OptionalBool *v17;
  BOOL v18;
  google::protobuf::internal *v20;

  v20 = a2;
  v5 = (std::string **)((char *)this + 24);
  v6 = (std::string **)((char *)this + 16);
  v7 = (uint64_t *)((char *)this + 8);
  while (2)
  {
    if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v20, *((_DWORD *)a3 + 23)) & 1) != 0)
      return v20;
    TagFallback = (google::protobuf::internal *)((char *)v20 + 1);
    v10 = (char *)*(unsigned __int8 *)v20;
    if ((*(char *)v20 & 0x80000000) == 0)
      goto LABEL_6;
    v10 = (char *)(v10 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v20 + 2);
LABEL_6:
      v20 = TagFallback;
      goto LABEL_7;
    }
    TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v20, v10);
    v20 = TagFallback;
    if (!TagFallback)
      return TagFallback;
LABEL_7:
    switch(v10 >> 3)
    {
      case 1u:
        if (v10 != 10)
          goto LABEL_34;
        v11 = *v6;
        if (*v6 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
          goto LABEL_33;
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v6, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        v11 = *v6;
        goto LABEL_32;
      case 2u:
        if (v10 != 16)
          goto LABEL_34;
        v12 = (google::protobuf::internal *)((char *)TagFallback + 1);
        LODWORD(v13) = *(unsigned __int8 *)TagFallback;
        if ((*(char *)TagFallback & 0x80000000) == 0)
          goto LABEL_15;
        v14 = *(char *)v12;
        v13 = v13 + (v14 << 7) - 128;
        if (v14 < 0)
        {
          v20 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(TagFallback, v13);
          if (!v20)
            goto LABEL_44;
        }
        else
        {
          v12 = (google::protobuf::internal *)((char *)TagFallback + 2);
LABEL_15:
          v20 = v12;
        }
        *((_DWORD *)this + 14) = v13;
        continue;
      case 3u:
        if (v10 != 26)
          goto LABEL_34;
        v15 = (SnippetUI::ImageElement_AspectRatio *)*((_QWORD *)this + 4);
        if (!v15)
        {
          v15 = (SnippetUI::ImageElement_AspectRatio *)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement_AspectRatio>(0);
          *((_QWORD *)this + 4) = v15;
          TagFallback = v20;
        }
        v16 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::ImageElement_AspectRatio>(a3, v15, TagFallback);
        goto LABEL_39;
      case 4u:
        if (v10 != 34)
          goto LABEL_34;
        v17 = (SnippetUI::OptionalBool *)*((_QWORD *)this + 5);
        if (v17)
          goto LABEL_28;
        v17 = (SnippetUI::OptionalBool *)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::OptionalBool>(0);
        *((_QWORD *)this + 5) = v17;
        goto LABEL_27;
      case 5u:
        if (v10 != 42)
          goto LABEL_34;
        v17 = (SnippetUI::OptionalBool *)*((_QWORD *)this + 6);
        if (v17)
          goto LABEL_28;
        v17 = (SnippetUI::OptionalBool *)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::OptionalBool>(0);
        *((_QWORD *)this + 6) = v17;
LABEL_27:
        TagFallback = v20;
LABEL_28:
        v16 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::OptionalBool>(a3, v17, TagFallback);
        goto LABEL_39;
      case 6u:
        if (v10 != 50)
          goto LABEL_34;
        v11 = *v5;
        if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v11 = *v5;
LABEL_32:
          TagFallback = v20;
        }
LABEL_33:
        v16 = google::protobuf::internal::InlineGreedyStringParser(v11, (std::string::value_type *)TagFallback, (uint64_t)a3);
        goto LABEL_39;
      default:
LABEL_34:
        if ((_DWORD)v10)
          v18 = (v10 & 7) == 4;
        else
          v18 = 1;
        if (v18)
        {
          *((_DWORD *)a3 + 20) = (_DWORD)v10 - 1;
          return TagFallback;
        }
        v16 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v10, v7, TagFallback, a3, v8);
LABEL_39:
        v20 = (google::protobuf::internal *)v16;
        if (v16)
          continue;
LABEL_44:
        TagFallback = 0;
        break;
    }
    return TagFallback;
  }
}

const google::protobuf::UnknownFieldSet *SnippetUI::ImageElement_Data::InternalSerializeWithCachedSizesToArray(SnippetUI::ImageElement_Data *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3)
{
  char *v4;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  _BYTE *v9;
  _BYTE *v10;
  unint64_t v11;
  unint64_t v12;
  SnippetUI::ImageElement_AspectRatio *v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  char *v17;
  _BYTE *v18;
  _BYTE *v19;
  unsigned int v20;
  unsigned int v21;
  SnippetUI::OptionalBool *v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  char *v26;
  _BYTE *v27;
  _BYTE *v28;
  unsigned int v29;
  unsigned int v30;
  SnippetUI::OptionalBool *v31;
  unsigned int v32;
  char *v33;
  unsigned int v34;
  _BYTE *v35;
  _BYTE *v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;

  v4 = a2;
  v6 = *((_QWORD *)this + 2);
  if ((*(char *)(v6 + 23) & 0x80000000) == 0)
  {
    if (!*(_BYTE *)(v6 + 23))
      goto LABEL_4;
    goto LABEL_3;
  }
  if (*(_QWORD *)(v6 + 8))
LABEL_3:
    v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 1, v6, a2);
LABEL_4:
  v7 = *((_DWORD *)this + 14);
  if (v7)
  {
    if ((unint64_t)v4 >= *(_QWORD *)a3)
    {
      v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
      v7 = *((_DWORD *)this + 14);
    }
    *v4 = 16;
    if (v7 > 0x7F)
    {
      v4[1] = v7 | 0x80;
      v8 = (unint64_t)(int)v7 >> 7;
      if (v7 >> 14)
      {
        v9 = v4 + 2;
        do
        {
          v10 = v9;
          *v9++ = v8 | 0x80;
          v11 = v8 >> 7;
          v12 = v8 >> 14;
          v8 >>= 7;
        }
        while (v12);
        v4 = v10 + 2;
        *v9 = v11;
      }
      else
      {
        v4[2] = v8;
        v4 += 3;
      }
    }
    else
    {
      v4[1] = v7;
      v4 += 2;
    }
  }
  if (this != (SnippetUI::ImageElement_Data *)&SnippetUI::_ImageElement_Data_default_instance_)
  {
    v13 = (SnippetUI::ImageElement_AspectRatio *)*((_QWORD *)this + 4);
    if (!v13)
      goto LABEL_29;
    if ((unint64_t)v4 >= *(_QWORD *)a3)
    {
      v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
      v13 = (SnippetUI::ImageElement_AspectRatio *)*((_QWORD *)this + 4);
    }
    *v4 = 26;
    v14 = *((_DWORD *)v13 + 6);
    if (v14 > 0x7F)
    {
      v4[1] = v14 | 0x80;
      v16 = v14 >> 7;
      if (v14 >> 14)
      {
        v18 = v4 + 2;
        do
        {
          v19 = v18;
          *v18++ = v16 | 0x80;
          v20 = v16 >> 7;
          v21 = v16 >> 14;
          v16 >>= 7;
        }
        while (v21);
        v17 = v19 + 2;
        *v18 = v20;
        goto LABEL_28;
      }
      v4[2] = v16;
      v15 = 3;
    }
    else
    {
      v4[1] = v14;
      v15 = 2;
    }
    v17 = &v4[v15];
LABEL_28:
    v4 = (char *)SnippetUI::ImageElement_AspectRatio::InternalSerializeWithCachedSizesToArray(v13, v17, a3, (google::protobuf::io::EpsCopyOutputStream *)v4);
LABEL_29:
    v22 = (SnippetUI::OptionalBool *)*((_QWORD *)this + 5);
    if (!v22)
      goto LABEL_41;
    if ((unint64_t)v4 >= *(_QWORD *)a3)
    {
      v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
      v22 = (SnippetUI::OptionalBool *)*((_QWORD *)this + 5);
    }
    *v4 = 34;
    v23 = *((_DWORD *)v22 + 5);
    if (v23 > 0x7F)
    {
      v4[1] = v23 | 0x80;
      v25 = v23 >> 7;
      if (v23 >> 14)
      {
        v27 = v4 + 2;
        do
        {
          v28 = v27;
          *v27++ = v25 | 0x80;
          v29 = v25 >> 7;
          v30 = v25 >> 14;
          v25 >>= 7;
        }
        while (v30);
        v26 = v28 + 2;
        *v27 = v29;
        goto LABEL_40;
      }
      v4[2] = v25;
      v24 = 3;
    }
    else
    {
      v4[1] = v23;
      v24 = 2;
    }
    v26 = &v4[v24];
LABEL_40:
    v4 = (char *)SnippetUI::OptionalBool::InternalSerializeWithCachedSizesToArray(v22, v26, a3, (google::protobuf::io::EpsCopyOutputStream *)v4);
LABEL_41:
    v31 = (SnippetUI::OptionalBool *)*((_QWORD *)this + 6);
    if (v31)
    {
      if ((unint64_t)v4 >= *(_QWORD *)a3)
      {
        v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
        v31 = (SnippetUI::OptionalBool *)*((_QWORD *)this + 6);
      }
      *v4 = 42;
      v32 = *((_DWORD *)v31 + 5);
      if (v32 > 0x7F)
      {
        v4[1] = v32 | 0x80;
        v34 = v32 >> 7;
        if (v32 >> 14)
        {
          v35 = v4 + 2;
          do
          {
            v36 = v35;
            *v35++ = v34 | 0x80;
            v37 = v34 >> 7;
            v38 = v34 >> 14;
            v34 >>= 7;
          }
          while (v38);
          v33 = v36 + 2;
          *v35 = v37;
        }
        else
        {
          v4[2] = v34;
          v33 = v4 + 3;
        }
      }
      else
      {
        v4[1] = v32;
        v33 = v4 + 2;
      }
      v4 = (char *)SnippetUI::OptionalBool::InternalSerializeWithCachedSizesToArray(v31, v33, a3, (google::protobuf::io::EpsCopyOutputStream *)v4);
    }
  }
  v39 = *((_QWORD *)this + 3);
  if ((*(char *)(v39 + 23) & 0x80000000) == 0)
  {
    if (!*(_BYTE *)(v39 + 23))
      goto LABEL_55;
    goto LABEL_54;
  }
  if (*(_QWORD *)(v39 + 8))
LABEL_54:
    v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 6, v39, v4);
LABEL_55:
  v40 = *((_QWORD *)this + 1);
  if ((v40 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v40 & 0xFFFFFFFFFFFFFFFELL), (const google::protobuf::UnknownFieldSet *)v4, a3, (google::protobuf::io::EpsCopyOutputStream *)v4);
  else
    return (const google::protobuf::UnknownFieldSet *)v4;
}

void SnippetUI::ImageElement_Data::CopyFrom(SnippetUI::ImageElement_Data *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    SnippetUI::ImageElement_Data::Clear(this);
    SnippetUI::ImageElement_Data::MergeFrom(this, a2);
  }
}

void SnippetUI::ImageElement_Data::MergeFrom(SnippetUI::ImageElement_Data *this, const google::protobuf::Message *lpsrc)
{
  std::string *v4;
  const SnippetUI::ImageElement_Data *v5;
  google::protobuf::Message *v6;
  char v7;
  std::string v8[2];

  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/ImageElement.pb.cc", 2466);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5)
    SnippetUI::ImageElement_Data::MergeFrom(this, v5);
  else
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
}

void sub_1BF8E44CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::ImageElement_Data::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 60) = a2;
  return this;
}

uint64_t SnippetUI::ImageElement_Data::GetMetadata(SnippetUI::ImageElement_Data *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ImageElement_2eproto);
  return qword_1EF5817D0;
}

void *SnippetUI::ImageElement_Data::default_instance(SnippetUI::ImageElement_Data *this)
{
  if (atomic_load(scc_info_ImageElement_Data_ImageElement_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_ImageElement_Data_ImageElement_2eproto);
  return &SnippetUI::_ImageElement_Data_default_instance_;
}

char *google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::ImageElement_Data>(google::protobuf::internal::EpsCopyInputStream *this, SnippetUI::ImageElement_Data *a2, google::protobuf::internal *a3)
{
  int v6;
  const char *v7;
  char *v8;
  char *result;
  int v10;
  int v11;
  int v12;
  BOOL v13;
  int v14;
  int v15;

  v6 = *(char *)a3;
  v7 = (const char *)*(unsigned __int8 *)a3;
  if (v6 < 0)
  {
    result = google::protobuf::internal::ReadSizeFallback(a3, v7);
    if (!result)
      return result;
    v8 = result;
    LODWORD(v7) = v10;
  }
  else
  {
    v8 = (char *)a3 + 1;
  }
  v11 = google::protobuf::internal::EpsCopyInputStream::PushLimit(this, v8, v7);
  v12 = *((_DWORD *)this + 22);
  v13 = __OFSUB__(v12--, 1);
  *((_DWORD *)this + 22) = v12;
  if (v12 < 0 != v13)
    return 0;
  v14 = v11;
  result = (char *)SnippetUI::ImageElement_Data::_InternalParse(a2, (google::protobuf::internal *)v8, this);
  if (!result)
    return result;
  ++*((_DWORD *)this + 22);
  if (*((_DWORD *)this + 20))
    return 0;
  v15 = *((_DWORD *)this + 7) + v14;
  *((_DWORD *)this + 7) = v15;
  *(_QWORD *)this = *((_QWORD *)this + 1) + (v15 & (v15 >> 31));
  return result;
}

char *google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::ImageElement_Bundle>(google::protobuf::internal::EpsCopyInputStream *this, SnippetUI::ImageElement_Bundle *a2, google::protobuf::internal *a3)
{
  int v6;
  const char *v7;
  char *v8;
  char *result;
  int v10;
  int v11;
  int v12;
  BOOL v13;
  int v14;
  int v15;

  v6 = *(char *)a3;
  v7 = (const char *)*(unsigned __int8 *)a3;
  if (v6 < 0)
  {
    result = google::protobuf::internal::ReadSizeFallback(a3, v7);
    if (!result)
      return result;
    v8 = result;
    LODWORD(v7) = v10;
  }
  else
  {
    v8 = (char *)a3 + 1;
  }
  v11 = google::protobuf::internal::EpsCopyInputStream::PushLimit(this, v8, v7);
  v12 = *((_DWORD *)this + 22);
  v13 = __OFSUB__(v12--, 1);
  *((_DWORD *)this + 22) = v12;
  if (v12 < 0 != v13)
    return 0;
  v14 = v11;
  result = (char *)SnippetUI::ImageElement_Bundle::_InternalParse(a2, (google::protobuf::internal *)v8, this);
  if (!result)
    return result;
  ++*((_DWORD *)this + 22);
  if (*((_DWORD *)this + 20))
    return 0;
  v15 = *((_DWORD *)this + 7) + v14;
  *((_DWORD *)this + 7) = v15;
  *(_QWORD *)this = *((_QWORD *)this + 1) + (v15 & (v15 >> 31));
  return result;
}

char *google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::ImageElement_Symbol>(google::protobuf::internal::EpsCopyInputStream *this, SnippetUI::ImageElement_Symbol *a2, google::protobuf::internal *a3)
{
  int v6;
  const char *v7;
  char *v8;
  char *result;
  int v10;
  int v11;
  int v12;
  BOOL v13;
  int v14;
  int v15;

  v6 = *(char *)a3;
  v7 = (const char *)*(unsigned __int8 *)a3;
  if (v6 < 0)
  {
    result = google::protobuf::internal::ReadSizeFallback(a3, v7);
    if (!result)
      return result;
    v8 = result;
    LODWORD(v7) = v10;
  }
  else
  {
    v8 = (char *)a3 + 1;
  }
  v11 = google::protobuf::internal::EpsCopyInputStream::PushLimit(this, v8, v7);
  v12 = *((_DWORD *)this + 22);
  v13 = __OFSUB__(v12--, 1);
  *((_DWORD *)this + 22) = v12;
  if (v12 < 0 != v13)
    return 0;
  v14 = v11;
  result = (char *)SnippetUI::ImageElement_Symbol::_InternalParse(a2, (google::protobuf::internal *)v8, this);
  if (!result)
    return result;
  ++*((_DWORD *)this + 22);
  if (*((_DWORD *)this + 20))
    return 0;
  v15 = *((_DWORD *)this + 7) + v14;
  *((_DWORD *)this + 7) = v15;
  *(_QWORD *)this = *((_QWORD *)this + 1) + (v15 & (v15 >> 31));
  return result;
}

SnippetUI::ImageElement_Url *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement_Url>(google::protobuf::internal::ArenaImpl *this)
{
  SnippetUI::ImageElement_Url *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (SnippetUI::ImageElement_Url *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x58uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::ImageElement_Url>);
    SnippetUI::ImageElement_Url::ImageElement_Url(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (SnippetUI::ImageElement_Url *)operator new();
    SnippetUI::ImageElement_Url::ImageElement_Url(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_1BF8E491C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D890](v1, 0x10A1C409865CCEALL);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::ImageElement_Url>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

void InitDefaultsscc_info_ImageElement_Bundle_ImageElement_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/ImageElement.pb.cc", a4);
  SnippetUI::ImageElement_Bundle::ImageElement_Bundle((SnippetUI::ImageElement_Bundle *)&SnippetUI::_ImageElement_Bundle_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_ImageElement_Bundle_default_instance_, v4);
  qword_1ED1D53B8 = (uint64_t)&SnippetUI::_ImageElement_AspectRatio_default_instance_;
  unk_1ED1D53C0 = &SnippetUI::_OptionalBool_default_instance_;
  qword_1ED1D53C8 = (uint64_t)&SnippetUI::_OptionalBool_default_instance_;
}

void InitDefaultsscc_info_ImageElement_Data_ImageElement_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/ImageElement.pb.cc", a4);
  SnippetUI::ImageElement_Data::ImageElement_Data((SnippetUI::ImageElement_Data *)&SnippetUI::_ImageElement_Data_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_ImageElement_Data_default_instance_, v4);
  qword_1ED1D5368 = (uint64_t)&SnippetUI::_ImageElement_AspectRatio_default_instance_;
  unk_1ED1D5370 = &SnippetUI::_OptionalBool_default_instance_;
  qword_1ED1D5378 = (uint64_t)&SnippetUI::_OptionalBool_default_instance_;
}

SnippetUI::ImageElement_Source *SnippetUI::ImageElement_Source::ImageElement_Source(SnippetUI::ImageElement_Source *this)
{
  *(_QWORD *)this = &off_1E792C2B0;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 6) = 0;
  if (atomic_load(scc_info_ImageElement_Source_ImageElement_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_ImageElement_Source_ImageElement_2eproto);
  *((_DWORD *)this + 7) = 0;
  return this;
}

void sub_1BF8E4BA8(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::ImageElement_Source::~ImageElement_Source(SnippetUI::ImageElement_Source *this)
{
  SnippetUI::ImageElement_Source::~ImageElement_Source(this);
  JUMPOUT(0x1C3B8D890);
}

{
  *(_QWORD *)this = &off_1E792C2B0;
  if (*((_DWORD *)this + 7))
    SnippetUI::ImageElement_Source::clear_value((uint64_t)this);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

SnippetUI::ImageElement_Source *SnippetUI::ImageElement_Source::New(SnippetUI::ImageElement_Source *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement_Source>(0);
}

SnippetUI::ImageElement_Source *SnippetUI::ImageElement_Source::New(SnippetUI::ImageElement_Source *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement_Source>(a2);
}

void SnippetUI::ImageElement_Source::Clear(SnippetUI::ImageElement_Source *this)
{
  google::protobuf::internal::InternalMetadataWithArena *v2;
  char v3;

  SnippetUI::ImageElement_Source::clear_value((uint64_t)this);
  v3 = *((_BYTE *)this + 8);
  v2 = (SnippetUI::ImageElement_Source *)((char *)this + 8);
  if ((v3 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v2);
}

uint64_t SnippetUI::ImageElement_Source::IsInitialized(SnippetUI::ImageElement_Source *this)
{
  return 1;
}

char *SnippetUI::ImageElement_Source::ByteSizeLong(SnippetUI::ImageElement_Data **this)
{
  char *v2;
  const google::protobuf::UnknownFieldSet *v3;

  switch(*((_DWORD *)this + 7))
  {
    case 1:
      v2 = SnippetUI::ImageElement_Data::ByteSizeLong(this[2]);
      goto LABEL_9;
    case 2:
      v2 = SnippetUI::ImageElement_Bundle::ByteSizeLong(this[2]);
      goto LABEL_9;
    case 3:
      v2 = SnippetUI::ImageElement_Url::ByteSizeLong(this[2]);
      goto LABEL_9;
    case 4:
      v2 = SnippetUI::ImageElement_Symbol::ByteSizeLong(this[2]);
      goto LABEL_9;
    case 5:
      v2 = SnippetUI::ImageElement_AppIcon::ByteSizeLong(this[2]);
      goto LABEL_9;
    case 6:
      v2 = SnippetUI::ImageElement_Contact::ByteSizeLong(this[2]);
LABEL_9:
      v3 = (const google::protobuf::UnknownFieldSet *)&v2[((9 * (__clz(v2 | 1) ^ 0x1F) + 73) >> 6) + 1];
      break;
    default:
      v3 = 0;
      break;
  }
  if (((_BYTE)this[1] & 1) != 0)
    return google::protobuf::internal::ComputeUnknownFieldsSize((google::protobuf::UnknownFieldSet *)(this + 1), v3, (_DWORD *)this + 6);
  *((_DWORD *)this + 6) = (_DWORD)v3;
  return (char *)v3;
}

uint64_t SnippetUI::ImageElement_Source::GetCachedSize(SnippetUI::ImageElement_Source *this)
{
  return *((unsigned int *)this + 6);
}

google::protobuf::internal *SnippetUI::ImageElement_Source::_InternalParse(SnippetUI::ImageElement_Source *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  uint64_t *v5;
  google::protobuf::internal::ParseContext *v6;
  google::protobuf::internal *TagFallback;
  char *v8;
  SnippetUI::ImageElement_Data *v9;
  SnippetUI::ImageElement_Bundle *v10;
  SnippetUI::ImageElement_Url *v11;
  SnippetUI::ImageElement_Symbol *v12;
  SnippetUI::ImageElement_AppIcon *v13;
  SnippetUI::ImageElement_Contact *v14;
  BOOL v15;
  char *v16;
  unsigned int v17;
  char *v18;
  unsigned int v19;
  char *v20;
  unsigned int v21;
  char *v22;
  char *SizeFallback;
  unsigned int v24;
  int v25;
  int v26;
  BOOL v27;
  int v28;
  google::protobuf::internal *v29;
  char *v30;
  unsigned int v31;
  int v32;
  int v33;
  char *v34;
  unsigned int v35;
  int v36;
  int v37;
  int v38;
  google::protobuf::internal *v40;

  v40 = a2;
  v5 = (uint64_t *)((char *)this + 8);
  while (2)
  {
    if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v40, *((_DWORD *)a3 + 23)) & 1) != 0)
      return v40;
    TagFallback = (google::protobuf::internal *)((char *)v40 + 1);
    v8 = (char *)*(unsigned __int8 *)v40;
    if ((*(char *)v40 & 0x80000000) == 0)
      goto LABEL_6;
    v8 = (char *)(v8 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v40 + 2);
LABEL_6:
      v40 = TagFallback;
      goto LABEL_7;
    }
    TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v40, v8);
    v40 = TagFallback;
    if (!TagFallback)
      return TagFallback;
LABEL_7:
    switch(v8 >> 3)
    {
      case 1u:
        if (v8 != 10)
          goto LABEL_26;
        if (*((_DWORD *)this + 7) == 1)
        {
          v9 = (SnippetUI::ImageElement_Data *)*((_QWORD *)this + 2);
        }
        else
        {
          SnippetUI::ImageElement_Source::clear_value((uint64_t)this);
          *((_DWORD *)this + 7) = 1;
          v9 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement_Data>(0);
          *((_QWORD *)this + 2) = v9;
          TagFallback = v40;
        }
        v16 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::ImageElement_Data>(a3, v9, TagFallback);
        goto LABEL_42;
      case 2u:
        if (v8 != 18)
          goto LABEL_26;
        if (*((_DWORD *)this + 7) == 2)
        {
          v10 = (SnippetUI::ImageElement_Bundle *)*((_QWORD *)this + 2);
        }
        else
        {
          SnippetUI::ImageElement_Source::clear_value((uint64_t)this);
          *((_DWORD *)this + 7) = 2;
          v10 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement_Bundle>(0);
          *((_QWORD *)this + 2) = v10;
          TagFallback = v40;
        }
        v16 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::ImageElement_Bundle>(a3, v10, TagFallback);
        goto LABEL_42;
      case 3u:
        if (v8 != 26)
          goto LABEL_26;
        if (*((_DWORD *)this + 7) == 3)
        {
          v11 = (SnippetUI::ImageElement_Url *)*((_QWORD *)this + 2);
        }
        else
        {
          SnippetUI::ImageElement_Source::clear_value((uint64_t)this);
          *((_DWORD *)this + 7) = 3;
          v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement_Url>(0);
          *((_QWORD *)this + 2) = v11;
          TagFallback = v40;
        }
        v17 = *(unsigned __int8 *)TagFallback;
        if (*(char *)TagFallback < 0)
        {
          SizeFallback = google::protobuf::internal::ReadSizeFallback(TagFallback, (const char *)*(unsigned __int8 *)TagFallback);
          if (!SizeFallback)
            goto LABEL_67;
          v18 = SizeFallback;
          v17 = v24;
        }
        else
        {
          v18 = (char *)TagFallback + 1;
        }
        v25 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v18, v17);
        v26 = *((_DWORD *)a3 + 22);
        v27 = __OFSUB__(v26--, 1);
        *((_DWORD *)a3 + 22) = v26;
        if (v26 < 0 != v27)
          goto LABEL_67;
        v28 = v25;
        v29 = SnippetUI::ImageElement_Url::_InternalParse(v11, (google::protobuf::internal *)v18, a3);
        if (!v29)
          goto LABEL_67;
        goto LABEL_64;
      case 4u:
        if (v8 != 34)
          goto LABEL_26;
        if (*((_DWORD *)this + 7) == 4)
        {
          v12 = (SnippetUI::ImageElement_Symbol *)*((_QWORD *)this + 2);
        }
        else
        {
          SnippetUI::ImageElement_Source::clear_value((uint64_t)this);
          *((_DWORD *)this + 7) = 4;
          v12 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement_Symbol>(0);
          *((_QWORD *)this + 2) = v12;
          TagFallback = v40;
        }
        v16 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::ImageElement_Symbol>(a3, v12, TagFallback);
        goto LABEL_42;
      case 5u:
        if (v8 != 42)
          goto LABEL_26;
        if (*((_DWORD *)this + 7) == 5)
        {
          v13 = (SnippetUI::ImageElement_AppIcon *)*((_QWORD *)this + 2);
        }
        else
        {
          SnippetUI::ImageElement_Source::clear_value((uint64_t)this);
          *((_DWORD *)this + 7) = 5;
          v13 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement_AppIcon>(0);
          *((_QWORD *)this + 2) = v13;
          TagFallback = v40;
        }
        v19 = *(unsigned __int8 *)TagFallback;
        if (*(char *)TagFallback < 0)
        {
          v30 = google::protobuf::internal::ReadSizeFallback(TagFallback, (const char *)*(unsigned __int8 *)TagFallback);
          if (!v30)
            goto LABEL_67;
          v20 = v30;
          v19 = v31;
        }
        else
        {
          v20 = (char *)TagFallback + 1;
        }
        v32 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v20, v19);
        v33 = *((_DWORD *)a3 + 22);
        v27 = __OFSUB__(v33--, 1);
        *((_DWORD *)a3 + 22) = v33;
        if (v33 < 0 != v27)
          goto LABEL_67;
        v28 = v32;
        v29 = SnippetUI::ImageElement_AppIcon::_InternalParse(v13, (google::protobuf::internal *)v20, a3);
        if (!v29)
          goto LABEL_67;
        goto LABEL_64;
      case 6u:
        if (v8 != 50)
          goto LABEL_26;
        if (*((_DWORD *)this + 7) == 6)
        {
          v14 = (SnippetUI::ImageElement_Contact *)*((_QWORD *)this + 2);
        }
        else
        {
          SnippetUI::ImageElement_Source::clear_value((uint64_t)this);
          *((_DWORD *)this + 7) = 6;
          v14 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement_Contact>(0);
          *((_QWORD *)this + 2) = v14;
          TagFallback = v40;
        }
        v21 = *(unsigned __int8 *)TagFallback;
        if (*(char *)TagFallback < 0)
        {
          v34 = google::protobuf::internal::ReadSizeFallback(TagFallback, (const char *)*(unsigned __int8 *)TagFallback);
          if (!v34)
            goto LABEL_67;
          v22 = v34;
          v21 = v35;
        }
        else
        {
          v22 = (char *)TagFallback + 1;
        }
        v36 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v22, v21);
        v37 = *((_DWORD *)a3 + 22);
        v27 = __OFSUB__(v37--, 1);
        *((_DWORD *)a3 + 22) = v37;
        if (v37 < 0 != v27)
          goto LABEL_67;
        v28 = v36;
        v29 = SnippetUI::ImageElement_Contact::_InternalParse(v14, (google::protobuf::internal *)v22, a3);
        if (!v29)
          goto LABEL_67;
LABEL_64:
        ++*((_DWORD *)a3 + 22);
        if (*((_DWORD *)a3 + 20))
          goto LABEL_67;
        v38 = *((_DWORD *)a3 + 7) + v28;
        *((_DWORD *)a3 + 7) = v38;
        *(_QWORD *)a3 = *((_QWORD *)a3 + 1) + (v38 & (v38 >> 31));
        v40 = v29;
        continue;
      default:
LABEL_26:
        if ((_DWORD)v8)
          v15 = (v8 & 7) == 4;
        else
          v15 = 1;
        if (v15)
        {
          *((_DWORD *)a3 + 20) = (_DWORD)v8 - 1;
          return TagFallback;
        }
        v16 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v8, v5, TagFallback, a3, v6);
LABEL_42:
        v40 = (google::protobuf::internal *)v16;
        if (v16)
          continue;
LABEL_67:
        TagFallback = 0;
        break;
    }
    return TagFallback;
  }
}

const google::protobuf::UnknownFieldSet *SnippetUI::ImageElement_Source::InternalSerializeWithCachedSizesToArray(SnippetUI::ImageElement_Source *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  int v6;
  SnippetUI::ImageElement_Data *v7;
  unsigned int v8;
  unsigned __int8 *v9;
  unsigned int v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  unsigned int v13;
  unsigned int v14;
  SnippetUI::ImageElement_Bundle *v15;
  unsigned int v16;
  unsigned __int8 *v17;
  unsigned int v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  unsigned int v21;
  unsigned int v22;
  SnippetUI::ImageElement_Url *v23;
  unsigned int v24;
  unsigned __int8 *v25;
  unsigned int v26;
  unsigned __int8 *v27;
  unsigned __int8 *v28;
  unsigned int v29;
  unsigned int v30;
  SnippetUI::ImageElement_Symbol *v31;
  unsigned int v32;
  unsigned __int8 *v33;
  unsigned int v34;
  unsigned __int8 *v35;
  unsigned __int8 *v36;
  unsigned int v37;
  unsigned int v38;
  SnippetUI::ImageElement_AppIcon *v39;
  unsigned int v40;
  unsigned __int8 *v41;
  unsigned int v42;
  unsigned __int8 *v43;
  unsigned __int8 *v44;
  unsigned int v45;
  unsigned int v46;
  SnippetUI::ImageElement_Contact *v47;
  unsigned int v48;
  unsigned __int8 *v49;
  unsigned int v50;
  unsigned __int8 *v51;
  unsigned __int8 *v52;
  unsigned int v53;
  unsigned int v54;
  uint64_t v55;

  v6 = *((_DWORD *)this + 7);
  if (v6 == 1)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
    v7 = (SnippetUI::ImageElement_Data *)*((_QWORD *)this + 2);
    *a2 = 10;
    v8 = *((_DWORD *)v7 + 15);
    if (v8 > 0x7F)
    {
      a2[1] = v8 | 0x80;
      v10 = v8 >> 7;
      if (v8 >> 14)
      {
        v11 = (unsigned __int8 *)(a2 + 2);
        do
        {
          v12 = v11;
          *v11++ = v10 | 0x80;
          v13 = v10 >> 7;
          v14 = v10 >> 14;
          v10 >>= 7;
        }
        while (v14);
        v9 = v12 + 2;
        *v11 = v13;
      }
      else
      {
        a2[2] = v10;
        v9 = (unsigned __int8 *)(a2 + 3);
      }
    }
    else
    {
      a2[1] = v8;
      v9 = (unsigned __int8 *)(a2 + 2);
    }
    a2 = (char *)SnippetUI::ImageElement_Data::InternalSerializeWithCachedSizesToArray(v7, (char *)v9, a3);
    v6 = *((_DWORD *)this + 7);
  }
  if (v6 == 2)
  {
    if ((unint64_t)a2 >= *(_QWORD *)a3)
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
    v15 = (SnippetUI::ImageElement_Bundle *)*((_QWORD *)this + 2);
    *a2 = 18;
    v16 = *((_DWORD *)v15 + 19);
    if (v16 > 0x7F)
    {
      a2[1] = v16 | 0x80;
      v18 = v16 >> 7;
      if (v16 >> 14)
      {
        v19 = (unsigned __int8 *)(a2 + 2);
        do
        {
          v20 = v19;
          *v19++ = v18 | 0x80;
          v21 = v18 >> 7;
          v22 = v18 >> 14;
          v18 >>= 7;
        }
        while (v22);
        v17 = v20 + 2;
        *v19 = v21;
      }
      else
      {
        a2[2] = v18;
        v17 = (unsigned __int8 *)(a2 + 3);
      }
    }
    else
    {
      a2[1] = v16;
      v17 = (unsigned __int8 *)(a2 + 2);
    }
    a2 = (char *)SnippetUI::ImageElement_Bundle::InternalSerializeWithCachedSizesToArray(v15, (google::protobuf::UnknownFieldSet *)v17, a3, a4);
    v6 = *((_DWORD *)this + 7);
  }
  if (v6 == 3)
  {
    if ((unint64_t)a2 >= *(_QWORD *)a3)
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
    v23 = (SnippetUI::ImageElement_Url *)*((_QWORD *)this + 2);
    *a2 = 26;
    v24 = *((_DWORD *)v23 + 20);
    if (v24 > 0x7F)
    {
      a2[1] = v24 | 0x80;
      v26 = v24 >> 7;
      if (v24 >> 14)
      {
        v27 = (unsigned __int8 *)(a2 + 2);
        do
        {
          v28 = v27;
          *v27++ = v26 | 0x80;
          v29 = v26 >> 7;
          v30 = v26 >> 14;
          v26 >>= 7;
        }
        while (v30);
        v25 = v28 + 2;
        *v27 = v29;
      }
      else
      {
        a2[2] = v26;
        v25 = (unsigned __int8 *)(a2 + 3);
      }
    }
    else
    {
      a2[1] = v24;
      v25 = (unsigned __int8 *)(a2 + 2);
    }
    a2 = (char *)SnippetUI::ImageElement_Url::InternalSerializeWithCachedSizesToArray(v23, (google::protobuf::UnknownFieldSet *)v25, a3, a4);
    v6 = *((_DWORD *)this + 7);
  }
  if (v6 == 4)
  {
    if ((unint64_t)a2 >= *(_QWORD *)a3)
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
    v31 = (SnippetUI::ImageElement_Symbol *)*((_QWORD *)this + 2);
    *a2 = 34;
    v32 = *((_DWORD *)v31 + 14);
    if (v32 > 0x7F)
    {
      a2[1] = v32 | 0x80;
      v34 = v32 >> 7;
      if (v32 >> 14)
      {
        v35 = (unsigned __int8 *)(a2 + 2);
        do
        {
          v36 = v35;
          *v35++ = v34 | 0x80;
          v37 = v34 >> 7;
          v38 = v34 >> 14;
          v34 >>= 7;
        }
        while (v38);
        v33 = v36 + 2;
        *v35 = v37;
      }
      else
      {
        a2[2] = v34;
        v33 = (unsigned __int8 *)(a2 + 3);
      }
    }
    else
    {
      a2[1] = v32;
      v33 = (unsigned __int8 *)(a2 + 2);
    }
    a2 = (char *)SnippetUI::ImageElement_Symbol::InternalSerializeWithCachedSizesToArray(v31, (google::protobuf::UnknownFieldSet *)v33, a3, a4);
    v6 = *((_DWORD *)this + 7);
  }
  if (v6 == 5)
  {
    if ((unint64_t)a2 >= *(_QWORD *)a3)
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
    v39 = (SnippetUI::ImageElement_AppIcon *)*((_QWORD *)this + 2);
    *a2 = 42;
    v40 = *((_DWORD *)v39 + 7);
    if (v40 > 0x7F)
    {
      a2[1] = v40 | 0x80;
      v42 = v40 >> 7;
      if (v40 >> 14)
      {
        v43 = (unsigned __int8 *)(a2 + 2);
        do
        {
          v44 = v43;
          *v43++ = v42 | 0x80;
          v45 = v42 >> 7;
          v46 = v42 >> 14;
          v42 >>= 7;
        }
        while (v46);
        v41 = v44 + 2;
        *v43 = v45;
      }
      else
      {
        a2[2] = v42;
        v41 = (unsigned __int8 *)(a2 + 3);
      }
    }
    else
    {
      a2[1] = v40;
      v41 = (unsigned __int8 *)(a2 + 2);
    }
    a2 = (char *)SnippetUI::ImageElement_AppIcon::InternalSerializeWithCachedSizesToArray(v39, (google::protobuf::UnknownFieldSet *)v41, a3, a4);
    v6 = *((_DWORD *)this + 7);
  }
  if (v6 == 6)
  {
    if ((unint64_t)a2 >= *(_QWORD *)a3)
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
    v47 = (SnippetUI::ImageElement_Contact *)*((_QWORD *)this + 2);
    *a2 = 50;
    v48 = *((_DWORD *)v47 + 8);
    if (v48 > 0x7F)
    {
      a2[1] = v48 | 0x80;
      v50 = v48 >> 7;
      if (v48 >> 14)
      {
        v51 = (unsigned __int8 *)(a2 + 2);
        do
        {
          v52 = v51;
          *v51++ = v50 | 0x80;
          v53 = v50 >> 7;
          v54 = v50 >> 14;
          v50 >>= 7;
        }
        while (v54);
        v49 = v52 + 2;
        *v51 = v53;
      }
      else
      {
        a2[2] = v50;
        v49 = (unsigned __int8 *)(a2 + 3);
      }
    }
    else
    {
      a2[1] = v48;
      v49 = (unsigned __int8 *)(a2 + 2);
    }
    a2 = (char *)SnippetUI::ImageElement_Contact::InternalSerializeWithCachedSizesToArray(v47, (char *)v49, a3, a4);
  }
  v55 = *((_QWORD *)this + 1);
  if ((v55 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v55 & 0xFFFFFFFFFFFFFFFELL), (const google::protobuf::UnknownFieldSet *)a2, a3, a4);
  else
    return (const google::protobuf::UnknownFieldSet *)a2;
}

void SnippetUI::ImageElement_Source::CopyFrom(SnippetUI::ImageElement_Source *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    SnippetUI::ImageElement_Source::Clear(this);
    SnippetUI::ImageElement_Source::MergeFrom(this, a2);
  }
}

void SnippetUI::ImageElement_Source::MergeFrom(SnippetUI::ImageElement_Source *this, const google::protobuf::Message *lpsrc)
{
  std::string *v4;
  const SnippetUI::ImageElement_Source *v5;
  google::protobuf::Message *v6;
  char v7;
  std::string v8[2];

  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/ImageElement.pb.cc", 1118);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5)
    SnippetUI::ImageElement_Source::MergeFrom(this, v5);
  else
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
}

void sub_1BF8E5634(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::ImageElement_Source::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 24) = a2;
  return this;
}

uint64_t SnippetUI::ImageElement_Source::GetMetadata(SnippetUI::ImageElement_Source *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ImageElement_2eproto);
  return file_level_metadata_ImageElement_2eproto;
}

void *SnippetUI::ImageElement_Source::default_instance(SnippetUI::ImageElement_Source *this)
{
  if (atomic_load(scc_info_ImageElement_Source_ImageElement_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_ImageElement_Source_ImageElement_2eproto);
  return &SnippetUI::_ImageElement_Source_default_instance_;
}

void SnippetUI::ImageElement_Source::MergeFrom(SnippetUI::ImageElement_Source *this, const SnippetUI::ImageElement_Source *a2)
{
  std::string *v4;
  uint64_t v5;
  SnippetUI::ImageElement_Data *v6;
  SnippetUI::ImageElement_Bundle *v7;
  SnippetUI::ImageElement_Url *v8;
  SnippetUI::ImageElement_Symbol *v9;
  SnippetUI::ImageElement_AppIcon *v10;
  SnippetUI::ImageElement_Contact *v11;
  const SnippetUI::ImageElement_Data *v12;
  const SnippetUI::ImageElement_Bundle *v13;
  const SnippetUI::ImageElement_Url *v14;
  const SnippetUI::ImageElement_Symbol *v15;
  const SnippetUI::ImageElement_AppIcon *v16;
  const SnippetUI::ImageElement_Contact *v17;
  char v18;
  std::string v19[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v19, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/ImageElement.pb.cc", 1133);
    v4 = google::protobuf::internal::LogMessage::operator<<(v19, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v18, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v19[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::ImageElement_Source *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  switch(*((_DWORD *)a2 + 7))
  {
    case 1:
      if (*((_DWORD *)this + 7) == 1)
      {
        v6 = (SnippetUI::ImageElement_Data *)*((_QWORD *)this + 2);
      }
      else
      {
        SnippetUI::ImageElement_Source::clear_value((uint64_t)this);
        *((_DWORD *)this + 7) = 1;
        v6 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement_Data>(0);
        *((_QWORD *)this + 2) = v6;
        if (*((_DWORD *)a2 + 7) != 1)
        {
          v12 = (const SnippetUI::ImageElement_Data *)&SnippetUI::_ImageElement_Data_default_instance_;
          goto LABEL_31;
        }
      }
      v12 = (const SnippetUI::ImageElement_Data *)*((_QWORD *)a2 + 2);
LABEL_31:
      SnippetUI::ImageElement_Data::MergeFrom(v6, v12);
      return;
    case 2:
      if (*((_DWORD *)this + 7) == 2)
      {
        v7 = (SnippetUI::ImageElement_Bundle *)*((_QWORD *)this + 2);
LABEL_21:
        v13 = (const SnippetUI::ImageElement_Bundle *)*((_QWORD *)a2 + 2);
        goto LABEL_33;
      }
      SnippetUI::ImageElement_Source::clear_value((uint64_t)this);
      *((_DWORD *)this + 7) = 2;
      v7 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement_Bundle>(0);
      *((_QWORD *)this + 2) = v7;
      if (*((_DWORD *)a2 + 7) == 2)
        goto LABEL_21;
      v13 = (const SnippetUI::ImageElement_Bundle *)&SnippetUI::_ImageElement_Bundle_default_instance_;
LABEL_33:
      SnippetUI::ImageElement_Bundle::MergeFrom(v7, v13);
      return;
    case 3:
      if (*((_DWORD *)this + 7) == 3)
      {
        v8 = (SnippetUI::ImageElement_Url *)*((_QWORD *)this + 2);
LABEL_23:
        v14 = (const SnippetUI::ImageElement_Url *)*((_QWORD *)a2 + 2);
        goto LABEL_35;
      }
      SnippetUI::ImageElement_Source::clear_value((uint64_t)this);
      *((_DWORD *)this + 7) = 3;
      v8 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement_Url>(0);
      *((_QWORD *)this + 2) = v8;
      if (*((_DWORD *)a2 + 7) == 3)
        goto LABEL_23;
      v14 = (const SnippetUI::ImageElement_Url *)&SnippetUI::_ImageElement_Url_default_instance_;
LABEL_35:
      SnippetUI::ImageElement_Url::MergeFrom(v8, v14);
      return;
    case 4:
      if (*((_DWORD *)this + 7) == 4)
      {
        v9 = (SnippetUI::ImageElement_Symbol *)*((_QWORD *)this + 2);
LABEL_25:
        v15 = (const SnippetUI::ImageElement_Symbol *)*((_QWORD *)a2 + 2);
        goto LABEL_37;
      }
      SnippetUI::ImageElement_Source::clear_value((uint64_t)this);
      *((_DWORD *)this + 7) = 4;
      v9 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement_Symbol>(0);
      *((_QWORD *)this + 2) = v9;
      if (*((_DWORD *)a2 + 7) == 4)
        goto LABEL_25;
      v15 = (const SnippetUI::ImageElement_Symbol *)&SnippetUI::_ImageElement_Symbol_default_instance_;
LABEL_37:
      SnippetUI::ImageElement_Symbol::MergeFrom(v9, v15);
      return;
    case 5:
      if (*((_DWORD *)this + 7) == 5)
      {
        v10 = (SnippetUI::ImageElement_AppIcon *)*((_QWORD *)this + 2);
LABEL_27:
        v16 = (const SnippetUI::ImageElement_AppIcon *)*((_QWORD *)a2 + 2);
        goto LABEL_39;
      }
      SnippetUI::ImageElement_Source::clear_value((uint64_t)this);
      *((_DWORD *)this + 7) = 5;
      v10 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement_AppIcon>(0);
      *((_QWORD *)this + 2) = v10;
      if (*((_DWORD *)a2 + 7) == 5)
        goto LABEL_27;
      v16 = (const SnippetUI::ImageElement_AppIcon *)&SnippetUI::_ImageElement_AppIcon_default_instance_;
LABEL_39:
      SnippetUI::ImageElement_AppIcon::MergeFrom(v10, v16);
      return;
    case 6:
      if (*((_DWORD *)this + 7) == 6)
      {
        v11 = (SnippetUI::ImageElement_Contact *)*((_QWORD *)this + 2);
LABEL_29:
        v17 = (const SnippetUI::ImageElement_Contact *)*((_QWORD *)a2 + 2);
        goto LABEL_41;
      }
      SnippetUI::ImageElement_Source::clear_value((uint64_t)this);
      *((_DWORD *)this + 7) = 6;
      v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement_Contact>(0);
      *((_QWORD *)this + 2) = v11;
      if (*((_DWORD *)a2 + 7) == 6)
        goto LABEL_29;
      v17 = (const SnippetUI::ImageElement_Contact *)&SnippetUI::_ImageElement_Contact_default_instance_;
LABEL_41:
      SnippetUI::ImageElement_Contact::MergeFrom(v11, v17);
      return;
    default:
      return;
  }
}

void sub_1BF8E5950(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::ImageElement_Source::clear_value(uint64_t this)
{
  uint64_t v1;

  v1 = this;
  switch(*(_DWORD *)(this + 28))
  {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      this = *(_QWORD *)(this + 16);
      if (this)
        this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
      break;
    default:
      break;
  }
  *(_DWORD *)(v1 + 28) = 0;
  return this;
}

SnippetUI::ImageElement_Source *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement_Source>(google::protobuf::internal::ArenaImpl *this)
{
  SnippetUI::ImageElement_Source *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (SnippetUI::ImageElement_Source *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x20uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::ImageElement_Source>);
    SnippetUI::ImageElement_Source::ImageElement_Source(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (SnippetUI::ImageElement_Source *)operator new();
    SnippetUI::ImageElement_Source::ImageElement_Source(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_1BF8E5A48(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D890](v1, 0x10A1C406A65A86DLL);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::ImageElement_Source>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

SnippetUI::ImageElement *SnippetUI::ImageElement::ImageElement(SnippetUI::ImageElement *this)
{
  *(_QWORD *)this = &off_1E792CAF0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *((_DWORD *)this + 15) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  if (atomic_load(scc_info_ImageElement_ImageElement_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_ImageElement_ImageElement_2eproto);
  return this;
}

void sub_1BF8E5B2C(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;

  google::protobuf::RepeatedField<int>::~RepeatedField(v2 + 40);
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((google::protobuf::internal::RepeatedPtrFieldBase *)(v2 + 16));
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::ImageElement::~ImageElement(SnippetUI::ImageElement *this)
{
  SnippetUI::ImageElement::~ImageElement(this);
  JUMPOUT(0x1C3B8D890);
}

{
  uint64_t *v2;

  *(_QWORD *)this = &off_1E792CAF0;
  v2 = (uint64_t *)((char *)this + 8);
  google::protobuf::RepeatedField<int>::~RepeatedField((char *)this + 40);
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((SnippetUI::ImageElement *)((char *)this + 16));
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v2);
}

SnippetUI::ImageElement *SnippetUI::ImageElement::New(SnippetUI::ImageElement *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement>(0);
}

SnippetUI::ImageElement *SnippetUI::ImageElement::New(SnippetUI::ImageElement *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement>(a2);
}

void SnippetUI::ImageElement::Clear(SnippetUI::ImageElement *this)
{
  uint64_t v2;
  SnippetUI::ImageElement_Source **v3;
  SnippetUI::ImageElement_Source *v4;
  std::string *v5;
  google::protobuf::internal::InternalMetadataWithArena *v6;
  char v7;
  char v8;
  std::string v9[2];

  v2 = *((unsigned int *)this + 6);
  if ((v2 & 0x80000000) != 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v9, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1613);
    v5 = google::protobuf::internal::LogMessage::operator<<(v9, "CHECK failed: (n) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v8, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v9[0].__r_.__value_.__l.__data_);
  }
  else if ((_DWORD)v2)
  {
    v3 = (SnippetUI::ImageElement_Source **)(*((_QWORD *)this + 4) + 8);
    do
    {
      v4 = *v3++;
      SnippetUI::ImageElement_Source::Clear(v4);
      --v2;
    }
    while (v2);
    *((_DWORD *)this + 6) = 0;
  }
  v7 = *((_BYTE *)this + 8);
  v6 = (SnippetUI::ImageElement *)((char *)this + 8);
  *((_DWORD *)v6 + 8) = 0;
  if ((v7 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v6);
}

void sub_1BF8E5C44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::ImageElement::IsInitialized(SnippetUI::ImageElement *this)
{
  return 1;
}

char *SnippetUI::ImageElement::ByteSizeLong(SnippetUI::ImageElement *this)
{
  uint64_t v2;
  uint64_t v3;
  SnippetUI::ImageElement_Data ***v4;
  uint64_t v5;
  SnippetUI::ImageElement_Data **v6;
  char *v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  const google::protobuf::UnknownFieldSet *v15;

  v2 = *((int *)this + 6);
  v3 = *((_QWORD *)this + 4);
  if (v3)
    v4 = (SnippetUI::ImageElement_Data ***)(v3 + 8);
  else
    v4 = 0;
  if ((_DWORD)v2)
  {
    v5 = 8 * v2;
    do
    {
      v6 = *v4++;
      v7 = SnippetUI::ImageElement_Source::ByteSizeLong(v6);
      v2 += (uint64_t)&v7[(9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6];
      v5 -= 8;
    }
    while (v5);
  }
  else
  {
    v2 = 0;
  }
  v8 = *((_DWORD *)this + 10);
  if (!v8)
  {
    v10 = 0;
LABEL_19:
    v14 = 0;
    goto LABEL_22;
  }
  v9 = 0;
  v10 = 0;
  do
  {
    v11 = *(_DWORD *)google::protobuf::RepeatedField<int>::Get((_DWORD *)this + 10, v9);
    if (v11 < 0)
      v12 = 10;
    else
      v12 = (9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6;
    v10 += v12;
    ++v9;
  }
  while (v8 != v9);
  if (!v10)
    goto LABEL_19;
  if ((v10 & 0x80000000) != 0)
    v13 = 11;
  else
    v13 = ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6) + 1;
  v2 += v13;
  v14 = v10;
LABEL_22:
  *((_DWORD *)this + 14) = v14;
  v15 = (const google::protobuf::UnknownFieldSet *)(v2 + v10);
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::ImageElement *)((char *)this + 8), v15, (_DWORD *)this + 15);
  *((_DWORD *)this + 15) = (_DWORD)v15;
  return (char *)(v2 + v10);
}

uint64_t SnippetUI::ImageElement::GetCachedSize(SnippetUI::ImageElement *this)
{
  return *((unsigned int *)this + 15);
}

google::protobuf::internal *SnippetUI::ImageElement::_InternalParse(SnippetUI::ImageElement *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  google::protobuf::internal *v5;
  unsigned int *v6;
  uint64_t *v7;
  google::protobuf::internal::ParseContext *v8;
  google::protobuf::internal::ParseContext *v9;
  google::protobuf::internal *TagFallback;
  char *v11;
  BOOL v13;
  char *v14;
  google::protobuf::internal *v15;
  google::protobuf::internal *v16;
  int *v17;
  uint64_t v18;
  int v19;
  SnippetUI::ImageElement_Source *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  char *v24;
  char *SizeFallback;
  unsigned int v26;
  int v27;
  int v28;
  BOOL v29;
  int v30;
  int v31;
  unint64_t v32;
  int v33;
  google::protobuf::internal *v35;

  v35 = a2;
  v5 = (SnippetUI::ImageElement *)((char *)this + 40);
  v6 = (unsigned int *)((char *)this + 16);
  v7 = (uint64_t *)((char *)this + 8);
  while (1)
  {
    while (1)
    {
LABEL_2:
      if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v35, *((_DWORD *)a3 + 23)) & 1) != 0)
        return v35;
      TagFallback = (google::protobuf::internal *)((char *)v35 + 1);
      v11 = (char *)*(unsigned __int8 *)v35;
      if ((*(char *)v35 & 0x80000000) == 0)
        goto LABEL_6;
      v11 = (char *)(v11 + (*(unsigned __int8 *)TagFallback << 7) - 128);
      if ((*(char *)TagFallback & 0x80000000) == 0)
      {
        TagFallback = (google::protobuf::internal *)((char *)v35 + 2);
LABEL_6:
        v35 = TagFallback;
        goto LABEL_7;
      }
      TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v35, v11);
      v35 = TagFallback;
      if (!TagFallback)
        return TagFallback;
LABEL_7:
      if (v11 >> 3 != 2)
      {
        if (v11 >> 3 != 1 || v11 != 10)
          goto LABEL_12;
        v15 = (google::protobuf::internal *)((char *)TagFallback - 1);
        while (1)
        {
          v16 = (google::protobuf::internal *)((char *)v15 + 1);
          v35 = v16;
          v17 = (int *)*((_QWORD *)this + 4);
          if (!v17)
            break;
          v18 = *((int *)this + 6);
          v19 = *v17;
          if ((int)v18 < *v17)
          {
            *((_DWORD *)this + 6) = v18 + 1;
            v20 = *(SnippetUI::ImageElement_Source **)&v17[2 * v18 + 2];
            goto LABEL_29;
          }
          if (v19 == *((_DWORD *)this + 7))
            goto LABEL_27;
LABEL_28:
          *v17 = v19 + 1;
          v20 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement_Source>(*((google::protobuf::internal::ArenaImpl **)this
                                                                                            + 2));
          v21 = *((_QWORD *)this + 4);
          v22 = *((int *)this + 6);
          *((_DWORD *)this + 6) = v22 + 1;
          *(_QWORD *)(v21 + 8 * v22 + 8) = v20;
          v16 = v35;
LABEL_29:
          v23 = *(unsigned __int8 *)v16;
          if (*(char *)v16 < 0)
          {
            SizeFallback = google::protobuf::internal::ReadSizeFallback(v16, (const char *)*(unsigned __int8 *)v16);
            if (!SizeFallback)
              return 0;
            v24 = SizeFallback;
            v23 = v26;
          }
          else
          {
            v24 = (char *)v16 + 1;
          }
          v27 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v24, v23);
          v28 = *((_DWORD *)a3 + 22);
          v29 = __OFSUB__(v28--, 1);
          *((_DWORD *)a3 + 22) = v28;
          if (v28 < 0 != v29)
            return 0;
          v30 = v27;
          v15 = SnippetUI::ImageElement_Source::_InternalParse(v20, (google::protobuf::internal *)v24, a3);
          if (!v15)
            return 0;
          ++*((_DWORD *)a3 + 22);
          if (*((_DWORD *)a3 + 20))
            return 0;
          v31 = *((_DWORD *)a3 + 7) + v30;
          *((_DWORD *)a3 + 7) = v31;
          v32 = *((_QWORD *)a3 + 1) + (v31 & (v31 >> 31));
          *(_QWORD *)a3 = v32;
          v35 = v15;
          if (v32 <= (unint64_t)v15 || *(_BYTE *)v15 != 10)
            goto LABEL_2;
        }
        v19 = *((_DWORD *)this + 7);
LABEL_27:
        google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v6, v19 + 1);
        v17 = (int *)*((_QWORD *)this + 4);
        v19 = *v17;
        goto LABEL_28;
      }
      if (v11 == 18)
      {
        v14 = google::protobuf::internal::PackedInt32Parser(v5, TagFallback, a3, v8);
        goto LABEL_19;
      }
      if (v11 == 16)
        break;
LABEL_12:
      if ((_DWORD)v11)
        v13 = (v11 & 7) == 4;
      else
        v13 = 1;
      if (v13)
      {
        *((_DWORD *)a3 + 20) = (_DWORD)v11 - 1;
        return TagFallback;
      }
      v14 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v11, v7, TagFallback, a3, v9);
LABEL_19:
      v35 = (google::protobuf::internal *)v14;
      if (!v14)
        return 0;
    }
    v33 = google::protobuf::internal::ReadVarint(&v35, (const char **)v11);
    if (!v35)
      return 0;
    SnippetUI::ImageElement::_internal_add_idioms((uint64_t)this, v33);
  }
}

const google::protobuf::UnknownFieldSet *SnippetUI::ImageElement::InternalSerializeWithCachedSizesToArray(SnippetUI::ImageElement *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  int v7;
  int v8;
  std::string *v9;
  std::string *v10;
  SnippetUI::ImageElement_Source *v11;
  unsigned int v12;
  char *v13;
  unsigned int v14;
  _BYTE *v15;
  _BYTE *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unint64_t v20;
  std::string *v21;
  _BYTE *v22;
  int *v23;
  int *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _BYTE *v28;
  _BYTE *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unsigned int v34;
  char v35;
  std::string v36[2];

  v7 = *((_DWORD *)this + 6);
  if (v7)
  {
    v8 = 0;
    while ((unint64_t)a2 < *(_QWORD *)a3)
    {
      if (v8 < 0)
        goto LABEL_5;
LABEL_6:
      if (*((_DWORD *)this + 6) <= v8)
      {
        google::protobuf::internal::LogMessage::LogMessage((uint64_t)v36, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1539);
        v10 = google::protobuf::internal::LogMessage::operator<<(v36, "CHECK failed: (index) < (current_size_): ");
        google::protobuf::internal::LogFinisher::operator=((int)&v35, (const char **)&v10->__r_.__value_.__l.__data_);
        google::protobuf::internal::LogMessage::~LogMessage((void **)&v36[0].__r_.__value_.__l.__data_);
      }
      v11 = *(SnippetUI::ImageElement_Source **)(*((_QWORD *)this + 4) + 8 * v8 + 8);
      *(_BYTE *)a2 = 10;
      v12 = *((_DWORD *)v11 + 6);
      if (v12 > 0x7F)
      {
        *((_BYTE *)a2 + 1) = v12 | 0x80;
        v14 = v12 >> 7;
        if (v12 >> 14)
        {
          v15 = (char *)a2 + 2;
          do
          {
            v16 = v15;
            *v15++ = v14 | 0x80;
            v17 = v14 >> 7;
            v18 = v14 >> 14;
            v14 >>= 7;
          }
          while (v18);
          v13 = v16 + 2;
          *v15 = v17;
        }
        else
        {
          *((_BYTE *)a2 + 2) = v14;
          v13 = (char *)a2 + 3;
        }
      }
      else
      {
        *((_BYTE *)a2 + 1) = v12;
        v13 = (char *)a2 + 2;
      }
      a2 = SnippetUI::ImageElement_Source::InternalSerializeWithCachedSizesToArray(v11, v13, a3, a4);
      if (++v8 == v7)
        goto LABEL_19;
    }
    a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_6;
LABEL_5:
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v36, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1538);
    v9 = google::protobuf::internal::LogMessage::operator<<(v36, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v35, (const char **)&v9->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v36[0].__r_.__value_.__l.__data_);
    goto LABEL_6;
  }
LABEL_19:
  v19 = *((_DWORD *)this + 14);
  if ((int)v19 > 0)
  {
    v20 = *(_QWORD *)a3;
    if ((unint64_t)a2 >= *(_QWORD *)a3)
    {
      a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      v20 = *(_QWORD *)a3;
    }
    if (v20 <= (unint64_t)a2)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v36, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/io/coded_stream.h", 856);
      v21 = google::protobuf::internal::LogMessage::operator<<(v36, "CHECK failed: ptr < end_: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v35, (const char **)&v21->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v36[0].__r_.__value_.__l.__data_);
    }
    *(_BYTE *)a2 = 18;
    v22 = (char *)a2 + 1;
    if (v19 >= 0x80)
    {
      do
      {
        *v22++ = v19 | 0x80;
        v34 = v19 >> 14;
        v19 >>= 7;
      }
      while (v34);
      a2 = (google::protobuf::UnknownFieldSet *)(v22 - 1);
    }
    a2 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 2);
    *v22 = v19;
    v23 = (int *)*((_QWORD *)this + 6);
    v24 = &v23[*((int *)this + 10)];
    do
    {
      if ((unint64_t)a2 >= *(_QWORD *)a3)
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      v26 = *v23++;
      v25 = v26;
      if (v26 > 0x7F)
      {
        *(_BYTE *)a2 = v25 | 0x80;
        v27 = v25 >> 7;
        if (v25 >> 14)
        {
          v28 = (char *)a2 + 1;
          do
          {
            v29 = v28;
            *v28++ = v27 | 0x80;
            v30 = v27 >> 7;
            v31 = v27 >> 14;
            v27 >>= 7;
          }
          while (v31);
          a2 = (google::protobuf::UnknownFieldSet *)(v29 + 2);
          *v28 = v30;
        }
        else
        {
          *((_BYTE *)a2 + 1) = v27;
          a2 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 2);
        }
      }
      else
      {
        *(_BYTE *)a2 = v25;
        a2 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 1);
      }
    }
    while (v23 < v24);
  }
  v32 = *((_QWORD *)this + 1);
  if ((v32 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v32 & 0xFFFFFFFFFFFFFFFELL), a2, a3, a4);
  return a2;
}

void sub_1BF8E6348(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void SnippetUI::ImageElement::CopyFrom(SnippetUI::ImageElement *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    SnippetUI::ImageElement::Clear(this);
    SnippetUI::ImageElement::MergeFrom(this, a2);
  }
}

void SnippetUI::ImageElement::MergeFrom(SnippetUI::ImageElement *this, const google::protobuf::Message *lpsrc)
{
  std::string *v4;
  const SnippetUI::ImageElement *v5;
  google::protobuf::Message *v6;
  char v7;
  std::string v8[2];

  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/ImageElement.pb.cc", 4834);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5)
    SnippetUI::ImageElement::MergeFrom(this, v5);
  else
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
}

void sub_1BF8E6450(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::ImageElement::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 60) = a2;
  return this;
}

uint64_t SnippetUI::ImageElement::GetMetadata(SnippetUI::ImageElement *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ImageElement_2eproto);
  return qword_1EF581830;
}

void *SnippetUI::ImageElement::default_instance(SnippetUI::ImageElement *this)
{
  if (atomic_load(scc_info_ImageElement_ImageElement_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_ImageElement_ImageElement_2eproto);
  return &SnippetUI::_ImageElement_default_instance_;
}

void SnippetUI::ImageElement::MergeFrom(SnippetUI::ImageElement *this, const SnippetUI::ImageElement *a2)
{
  std::string *v4;
  uint64_t v5;
  char v6;
  std::string v7[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/ImageElement.pb.cc", 4849);
    v4 = google::protobuf::internal::LogMessage::operator<<(v7, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v6, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v7[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::ImageElement *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<SnippetUI::ImageElement_Source>::TypeHandler>((int **)this + 2, (uint64_t)a2 + 16);
  google::protobuf::RepeatedField<int>::MergeFrom((int *)this + 10, (int *)a2 + 10);
}

void sub_1BF8E6568(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<SnippetUI::ImageElement_Source>::TypeHandler>(int **this, uint64_t a2)
{
  std::string *v4;
  int v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  SnippetUI::ImageElement_Source **v13;
  SnippetUI::ImageElement_Source **v14;
  SnippetUI::ImageElement_Source *v15;
  SnippetUI::ImageElement_Source *v16;
  SnippetUI::ImageElement_Source *v17;
  google::protobuf::internal::ArenaImpl *v18;
  int v19;
  uint64_t v20;
  SnippetUI::ImageElement_Source **v21;
  SnippetUI::ImageElement_Source **v22;
  SnippetUI::ImageElement_Source *v23;
  SnippetUI::ImageElement_Source *v24;
  int v25;
  int *v26;
  char v27;
  std::string v28[2];

  if ((int **)a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1632);
    v4 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
  }
  v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    v6 = *(_QWORD *)(a2 + 16);
    v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)this, *(_DWORD *)(a2 + 8));
    v8 = v7;
    v9 = *this[2];
    v10 = *((int *)this + 2);
    v11 = v9 - v10;
    if ((int)v9 - (int)v10 >= v5)
      v12 = v5;
    else
      v12 = v11;
    if ((int)v12 >= 1)
    {
      v13 = (SnippetUI::ImageElement_Source **)(v6 + 8);
      v14 = (SnippetUI::ImageElement_Source **)v7;
      do
      {
        v16 = *v13++;
        v15 = v16;
        v17 = *v14++;
        google::protobuf::internal::GenericTypeHandler<SnippetUI::ImageElement_Source>::Merge(v15, v17);
        --v12;
      }
      while (v12);
    }
    if (v11 < v5)
    {
      v18 = (google::protobuf::internal::ArenaImpl *)*this;
      v19 = v10 + v5 - v9;
      v20 = 8 * v9 - 8 * v10;
      v21 = (SnippetUI::ImageElement_Source **)((char *)v8 + v20);
      v22 = (SnippetUI::ImageElement_Source **)(v20 + v6 + 8);
      do
      {
        v23 = *v22++;
        v24 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement_Source>(v18);
        google::protobuf::internal::GenericTypeHandler<SnippetUI::ImageElement_Source>::Merge(v23, v24);
        *v21++ = v24;
        --v19;
      }
      while (v19);
    }
    v25 = *((_DWORD *)this + 2) + v5;
    *((_DWORD *)this + 2) = v25;
    v26 = this[2];
    if (*v26 < v25)
      *v26 = v25;
  }
}

void sub_1BF8E66D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::GenericTypeHandler<SnippetUI::ImageElement_Source>::Merge(SnippetUI::ImageElement_Source *a1, SnippetUI::ImageElement_Source *this)
{
  SnippetUI::ImageElement_Source::MergeFrom(this, a1);
}

uint64_t SnippetUI::ImageElement::_internal_add_idioms(uint64_t a1, int a2)
{
  int v3;
  int *v4;
  uint64_t result;
  uint64_t v6;

  v3 = *(_DWORD *)(a1 + 40);
  v4 = (int *)(a1 + 40);
  if (v3 == *(_DWORD *)(a1 + 44))
    google::protobuf::RepeatedField<int>::Reserve((int *)(a1 + 40), v3 + 1);
  result = google::protobuf::RepeatedField<int>::elements((uint64_t)v4);
  v6 = *v4;
  *v4 = v6 + 1;
  *(_DWORD *)(result + 4 * v6) = a2;
  return result;
}

SnippetUI::ImageElement *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement>(google::protobuf::internal::ArenaImpl *this)
{
  SnippetUI::ImageElement *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (SnippetUI::ImageElement *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x40uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::ImageElement>);
    SnippetUI::ImageElement::ImageElement(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (SnippetUI::ImageElement *)operator new();
    SnippetUI::ImageElement::ImageElement(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_1BF8E67D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D890](v1, 0x10A1C408A86EF6ALL);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::ImageElement>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t SnippetUI::ImageElement_SymbolLayout_descriptor(SnippetUI *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ImageElement_2eproto);
  return file_level_enum_descriptors_ImageElement_2eproto;
}

BOOL SnippetUI::ImageElement_SymbolLayout_IsValid(SnippetUI *this)
{
  return this < 2;
}

uint64_t SnippetUI::ImageElement_ImageStyle_descriptor(SnippetUI *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ImageElement_2eproto);
  return qword_1EF581848;
}

BOOL SnippetUI::ImageElement_ImageStyle_IsValid(SnippetUI *this)
{
  return this < 0x19;
}

uint64_t SnippetUI::ImageElement_RenderingMode_descriptor(SnippetUI *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ImageElement_2eproto);
  return qword_1EF581850;
}

BOOL SnippetUI::ImageElement_RenderingMode_IsValid(SnippetUI *this)
{
  return this < 2;
}

uint64_t SnippetUI::ImageElement_ContentMode_descriptor(SnippetUI *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ImageElement_2eproto);
  return qword_1EF581858;
}

BOOL SnippetUI::ImageElement_ContentMode_IsValid(SnippetUI *this)
{
  return this < 2;
}

void SnippetUI::ImageElement_Source::InitAsDefaultInstance(SnippetUI::ImageElement_Source *this)
{
  qword_1ED1D53F8 = (uint64_t)&SnippetUI::_ImageElement_Data_default_instance_;
  unk_1ED1D5400 = &SnippetUI::_ImageElement_Bundle_default_instance_;
  qword_1ED1D5408 = (uint64_t)&SnippetUI::_ImageElement_Url_default_instance_;
  unk_1ED1D5410 = &SnippetUI::_ImageElement_Symbol_default_instance_;
  qword_1ED1D5418 = (uint64_t)&SnippetUI::_ImageElement_AppIcon_default_instance_;
  unk_1ED1D5420 = &SnippetUI::_ImageElement_Contact_default_instance_;
}

uint64_t SnippetUI::ImageElement_Source::_Internal::data(SnippetUI::ImageElement_Source::_Internal *this, const SnippetUI::ImageElement_Source *a2)
{
  return *((_QWORD *)this + 2);
}

uint64_t SnippetUI::ImageElement_Source::_Internal::bundle(SnippetUI::ImageElement_Source::_Internal *this, const SnippetUI::ImageElement_Source *a2)
{
  return *((_QWORD *)this + 2);
}

uint64_t SnippetUI::ImageElement_Source::_Internal::url(SnippetUI::ImageElement_Source::_Internal *this, const SnippetUI::ImageElement_Source *a2)
{
  return *((_QWORD *)this + 2);
}

uint64_t SnippetUI::ImageElement_Source::_Internal::symbol(SnippetUI::ImageElement_Source::_Internal *this, const SnippetUI::ImageElement_Source *a2)
{
  return *((_QWORD *)this + 2);
}

uint64_t SnippetUI::ImageElement_Source::_Internal::app_icon(SnippetUI::ImageElement_Source::_Internal *this, const SnippetUI::ImageElement_Source *a2)
{
  return *((_QWORD *)this + 2);
}

uint64_t SnippetUI::ImageElement_Source::_Internal::contact(SnippetUI::ImageElement_Source::_Internal *this, const SnippetUI::ImageElement_Source *a2)
{
  return *((_QWORD *)this + 2);
}

uint64_t SnippetUI::ImageElement_Source::set_allocated_data(SnippetUI::ImageElement_Source *this, SnippetUI::ImageElement_Data *a2)
{
  uint64_t result;

  result = SnippetUI::ImageElement_Source::clear_value((uint64_t)this);
  if (a2)
  {
    *((_DWORD *)this + 7) = 1;
    *((_QWORD *)this + 2) = a2;
  }
  return result;
}

uint64_t SnippetUI::ImageElement_Source::set_allocated_bundle(SnippetUI::ImageElement_Source *this, SnippetUI::ImageElement_Bundle *a2)
{
  uint64_t result;

  result = SnippetUI::ImageElement_Source::clear_value((uint64_t)this);
  if (a2)
  {
    *((_DWORD *)this + 7) = 2;
    *((_QWORD *)this + 2) = a2;
  }
  return result;
}

uint64_t SnippetUI::ImageElement_Source::set_allocated_url(SnippetUI::ImageElement_Source *this, SnippetUI::ImageElement_Url *a2)
{
  uint64_t result;

  result = SnippetUI::ImageElement_Source::clear_value((uint64_t)this);
  if (a2)
  {
    *((_DWORD *)this + 7) = 3;
    *((_QWORD *)this + 2) = a2;
  }
  return result;
}

uint64_t SnippetUI::ImageElement_Source::set_allocated_symbol(SnippetUI::ImageElement_Source *this, SnippetUI::ImageElement_Symbol *a2)
{
  uint64_t result;

  result = SnippetUI::ImageElement_Source::clear_value((uint64_t)this);
  if (a2)
  {
    *((_DWORD *)this + 7) = 4;
    *((_QWORD *)this + 2) = a2;
  }
  return result;
}

uint64_t SnippetUI::ImageElement_Source::set_allocated_app_icon(SnippetUI::ImageElement_Source *this, SnippetUI::ImageElement_AppIcon *a2)
{
  uint64_t result;

  result = SnippetUI::ImageElement_Source::clear_value((uint64_t)this);
  if (a2)
  {
    *((_DWORD *)this + 7) = 5;
    *((_QWORD *)this + 2) = a2;
  }
  return result;
}

uint64_t SnippetUI::ImageElement_Source::set_allocated_contact(SnippetUI::ImageElement_Source *this, SnippetUI::ImageElement_Contact *a2)
{
  uint64_t result;

  result = SnippetUI::ImageElement_Source::clear_value((uint64_t)this);
  if (a2)
  {
    *((_DWORD *)this + 7) = 6;
    *((_QWORD *)this + 2) = a2;
  }
  return result;
}

SnippetUI::ImageElement_Source *SnippetUI::ImageElement_Source::ImageElement_Source(SnippetUI::ImageElement_Source *this, const SnippetUI::ImageElement_Source *a2)
{
  uint64_t v4;
  SnippetUI::ImageElement_Data *v5;
  const SnippetUI::ImageElement_Data *v6;
  SnippetUI::ImageElement_Bundle *v7;
  const SnippetUI::ImageElement_Bundle *v8;
  SnippetUI::ImageElement_Url *v9;
  const SnippetUI::ImageElement_Url *v10;
  SnippetUI::ImageElement_Symbol *v11;
  const SnippetUI::ImageElement_Symbol *v12;
  SnippetUI::ImageElement_AppIcon *v13;
  const SnippetUI::ImageElement_AppIcon *v14;
  SnippetUI::ImageElement_Contact *v15;
  const SnippetUI::ImageElement_Contact *v16;

  *(_QWORD *)this = &off_1E792C2B0;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 6) = 0;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::ImageElement_Source *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  *((_DWORD *)this + 7) = 0;
  switch(*((_DWORD *)a2 + 7))
  {
    case 1:
      SnippetUI::ImageElement_Source::clear_value((uint64_t)this);
      *((_DWORD *)this + 7) = 1;
      v5 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement_Data>(0);
      *((_QWORD *)this + 2) = v5;
      if (*((_DWORD *)a2 + 7) == 1)
        v6 = (const SnippetUI::ImageElement_Data *)*((_QWORD *)a2 + 2);
      else
        v6 = (const SnippetUI::ImageElement_Data *)&SnippetUI::_ImageElement_Data_default_instance_;
      SnippetUI::ImageElement_Data::MergeFrom(v5, v6);
      break;
    case 2:
      SnippetUI::ImageElement_Source::clear_value((uint64_t)this);
      *((_DWORD *)this + 7) = 2;
      v7 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement_Bundle>(0);
      *((_QWORD *)this + 2) = v7;
      if (*((_DWORD *)a2 + 7) == 2)
        v8 = (const SnippetUI::ImageElement_Bundle *)*((_QWORD *)a2 + 2);
      else
        v8 = (const SnippetUI::ImageElement_Bundle *)&SnippetUI::_ImageElement_Bundle_default_instance_;
      SnippetUI::ImageElement_Bundle::MergeFrom(v7, v8);
      break;
    case 3:
      SnippetUI::ImageElement_Source::clear_value((uint64_t)this);
      *((_DWORD *)this + 7) = 3;
      v9 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement_Url>(0);
      *((_QWORD *)this + 2) = v9;
      if (*((_DWORD *)a2 + 7) == 3)
        v10 = (const SnippetUI::ImageElement_Url *)*((_QWORD *)a2 + 2);
      else
        v10 = (const SnippetUI::ImageElement_Url *)&SnippetUI::_ImageElement_Url_default_instance_;
      SnippetUI::ImageElement_Url::MergeFrom(v9, v10);
      break;
    case 4:
      SnippetUI::ImageElement_Source::clear_value((uint64_t)this);
      *((_DWORD *)this + 7) = 4;
      v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement_Symbol>(0);
      *((_QWORD *)this + 2) = v11;
      if (*((_DWORD *)a2 + 7) == 4)
        v12 = (const SnippetUI::ImageElement_Symbol *)*((_QWORD *)a2 + 2);
      else
        v12 = (const SnippetUI::ImageElement_Symbol *)&SnippetUI::_ImageElement_Symbol_default_instance_;
      SnippetUI::ImageElement_Symbol::MergeFrom(v11, v12);
      break;
    case 5:
      SnippetUI::ImageElement_Source::clear_value((uint64_t)this);
      *((_DWORD *)this + 7) = 5;
      v13 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement_AppIcon>(0);
      *((_QWORD *)this + 2) = v13;
      if (*((_DWORD *)a2 + 7) == 5)
        v14 = (const SnippetUI::ImageElement_AppIcon *)*((_QWORD *)a2 + 2);
      else
        v14 = (const SnippetUI::ImageElement_AppIcon *)&SnippetUI::_ImageElement_AppIcon_default_instance_;
      SnippetUI::ImageElement_AppIcon::MergeFrom(v13, v14);
      break;
    case 6:
      SnippetUI::ImageElement_Source::clear_value((uint64_t)this);
      *((_DWORD *)this + 7) = 6;
      v15 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement_Contact>(0);
      *((_QWORD *)this + 2) = v15;
      if (*((_DWORD *)a2 + 7) == 6)
        v16 = (const SnippetUI::ImageElement_Contact *)*((_QWORD *)a2 + 2);
      else
        v16 = (const SnippetUI::ImageElement_Contact *)&SnippetUI::_ImageElement_Contact_default_instance_;
      SnippetUI::ImageElement_Contact::MergeFrom(v15, v16);
      break;
    default:
      return this;
  }
  return this;
}

void sub_1BF8E6CA4(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::ImageElement_Source::CopyFrom(SnippetUI::ImageElement_Source *this, const SnippetUI::ImageElement_Source *a2)
{
  if (a2 != this)
  {
    SnippetUI::ImageElement_Source::Clear(this);
    SnippetUI::ImageElement_Source::MergeFrom(this, a2);
  }
}

void SnippetUI::ImageElement_Source::InternalSwap(SnippetUI::ImageElement_Source *this, SnippetUI::ImageElement_Source *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  uint64_t v5;
  google::protobuf::UnknownFieldSet *v6;
  uint64_t v7;
  google::protobuf::UnknownFieldSet *v8;

  v4 = (SnippetUI::ImageElement_Source *)((char *)this + 8);
  v5 = *((_QWORD *)a2 + 1);
  if ((*((_BYTE *)this + 8) & 1) != 0)
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v6 = v8;
      goto LABEL_6;
    }
  }
  else if ((v5 & 1) == 0)
  {
    goto LABEL_7;
  }
  v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
  google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
LABEL_7:
  v7 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v7;
  LODWORD(v7) = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v7;
}

SnippetUI::ImageElement_Contact_Monogram *SnippetUI::ImageElement_Contact_Monogram::ImageElement_Contact_Monogram(SnippetUI::ImageElement_Contact_Monogram *this, const SnippetUI::ImageElement_Contact_Monogram *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)this = &off_1E792C370;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 6) = 0;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::ImageElement_Contact_Monogram *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  v5 = *((_QWORD *)a2 + 2);
  if (*(char *)(v5 + 23) < 0)
    v6 = *(_QWORD *)(v5 + 8);
  else
    v6 = *(unsigned __int8 *)(v5 + 23);
  if ((uint64_t *)v5 != &google::protobuf::internal::fixed_address_empty_string && v6 != 0)
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, v5);
  return this;
}

void sub_1BF8E6E0C(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::ImageElement_Contact_Monogram::CopyFrom(SnippetUI::ImageElement_Contact_Monogram *this, const SnippetUI::ImageElement_Contact_Monogram *a2)
{
  if (a2 != this)
  {
    SnippetUI::ImageElement_Contact_Monogram::Clear(this);
    SnippetUI::ImageElement_Contact_Monogram::MergeFrom(this, a2);
  }
}

__n128 SnippetUI::ImageElement_Contact_Monogram::InternalSwap(SnippetUI::ImageElement_Contact_Monogram *this, SnippetUI::ImageElement_Contact_Monogram *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  uint64_t v5;
  google::protobuf::UnknownFieldSet *v6;
  __n128 result;
  std::string **v8;
  std::string *v9;
  uint64_t *v10;
  std::string **v11;
  std::string *v12;
  std::string::size_type v13;
  std::string::size_type v14;
  google::protobuf::UnknownFieldSet *v15;

  v4 = (SnippetUI::ImageElement_Contact_Monogram *)((char *)this + 8);
  v5 = *((_QWORD *)a2 + 1);
  if ((*((_BYTE *)this + 8) & 1) != 0)
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v6 = v15;
      goto LABEL_6;
    }
LABEL_5:
    v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
    google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
    goto LABEL_7;
  }
  if ((v5 & 1) != 0)
    goto LABEL_5;
LABEL_7:
  v10 = (uint64_t *)*((_QWORD *)this + 2);
  v8 = (std::string **)((char *)this + 16);
  v9 = (std::string *)v10;
  v11 = (std::string **)((char *)a2 + 16);
  if (v10 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v11 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      return result;
    google::protobuf::internal::ArenaStringPtr::CreateInstance(v8, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v9 = *v8;
  }
  v12 = *v11;
  if (*v11 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance(v11, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v12 = *v11;
  }
  v13 = v9->__r_.__value_.__r.__words[2];
  result = *(__n128 *)&v9->__r_.__value_.__l.__data_;
  v14 = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v9->__r_.__value_.__r.__words[2] = v14;
  *(__n128 *)&v12->__r_.__value_.__l.__data_ = result;
  v12->__r_.__value_.__r.__words[2] = v13;
  return result;
}

SnippetUI::ImageElement_Contact_Avatar *SnippetUI::ImageElement_Contact_Avatar::ImageElement_Contact_Avatar(SnippetUI::ImageElement_Contact_Avatar *this, const SnippetUI::ImageElement_Contact_Avatar *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  uint64_t v5;

  *(_QWORD *)this = &off_1E792C430;
  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (SnippetUI::ImageElement_Contact_Avatar *)((char *)this + 8);
  *(_OWORD *)((char *)this + 24) = 0u;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((int **)this + 2, (uint64_t)a2 + 16);
  *((_DWORD *)this + 10) = 0;
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom(v4, (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  return this;
}

void sub_1BF8E6FBC(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;

  google::protobuf::RepeatedPtrField<std::string>::~RepeatedPtrField(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::ImageElement_Contact_Avatar::InternalSwap(SnippetUI::ImageElement_Contact_Avatar *this, SnippetUI::ImageElement_Contact_Avatar *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  uint64_t v5;
  google::protobuf::UnknownFieldSet *v6;
  google::protobuf::UnknownFieldSet *v7;

  v4 = (SnippetUI::ImageElement_Contact_Avatar *)((char *)this + 8);
  v5 = *((_QWORD *)a2 + 1);
  if ((*((_BYTE *)this + 8) & 1) != 0)
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v6 = v7;
      goto LABEL_6;
    }
  }
  else if ((v5 & 1) == 0)
  {
    goto LABEL_7;
  }
  v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
  google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
LABEL_7:
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((SnippetUI::ImageElement_Contact_Avatar *)((char *)this + 16), (SnippetUI::ImageElement_Contact_Avatar *)((char *)a2 + 16));
}

void SnippetUI::ImageElement_Contact::InitAsDefaultInstance(SnippetUI::ImageElement_Contact *this)
{
  qword_1EF583F38 = (uint64_t)&SnippetUI::_ImageElement_Contact_Monogram_default_instance_;
  unk_1EF583F40 = &SnippetUI::_ImageElement_Contact_Avatar_default_instance_;
}

uint64_t SnippetUI::ImageElement_Contact::_Internal::monogram(SnippetUI::ImageElement_Contact::_Internal *this, const SnippetUI::ImageElement_Contact *a2)
{
  return *((_QWORD *)this + 3);
}

uint64_t SnippetUI::ImageElement_Contact::_Internal::avatar(SnippetUI::ImageElement_Contact::_Internal *this, const SnippetUI::ImageElement_Contact *a2)
{
  return *((_QWORD *)this + 3);
}

uint64_t SnippetUI::ImageElement_Contact::set_allocated_monogram(SnippetUI::ImageElement_Contact *this, SnippetUI::ImageElement_Contact_Monogram *a2)
{
  uint64_t result;

  result = SnippetUI::ImageElement_Contact::clear_content((uint64_t)this);
  if (a2)
  {
    *((_DWORD *)this + 9) = 1;
    *((_QWORD *)this + 3) = a2;
  }
  return result;
}

uint64_t SnippetUI::ImageElement_Contact::set_allocated_avatar(SnippetUI::ImageElement_Contact *this, SnippetUI::ImageElement_Contact_Avatar *a2)
{
  uint64_t result;

  result = SnippetUI::ImageElement_Contact::clear_content((uint64_t)this);
  if (a2)
  {
    *((_DWORD *)this + 9) = 2;
    *((_QWORD *)this + 3) = a2;
  }
  return result;
}

SnippetUI::ImageElement_Contact *SnippetUI::ImageElement_Contact::ImageElement_Contact(SnippetUI::ImageElement_Contact *this, const SnippetUI::ImageElement_Contact *a2)
{
  uint64_t v4;
  int v5;
  int **v6;
  int **v7;
  SnippetUI::ImageElement_Contact_Monogram *v8;
  const SnippetUI::ImageElement_Contact_Monogram *v9;

  *(_QWORD *)this = &off_1E792C4F0;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 8) = 0;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::ImageElement_Contact *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)this + 9) = 0;
  v5 = *((_DWORD *)a2 + 9);
  if (v5 == 1)
  {
    SnippetUI::ImageElement_Contact::clear_content((uint64_t)this);
    *((_DWORD *)this + 9) = 1;
    v8 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement_Contact_Monogram>(0);
    *((_QWORD *)this + 3) = v8;
    if (*((_DWORD *)a2 + 9) == 1)
      v9 = (const SnippetUI::ImageElement_Contact_Monogram *)*((_QWORD *)a2 + 3);
    else
      v9 = (const SnippetUI::ImageElement_Contact_Monogram *)&SnippetUI::_ImageElement_Contact_Monogram_default_instance_;
    SnippetUI::ImageElement_Contact_Monogram::MergeFrom(v8, v9);
  }
  else if (v5 == 2)
  {
    SnippetUI::ImageElement_Contact::clear_content((uint64_t)this);
    *((_DWORD *)this + 9) = 2;
    v6 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement_Contact_Avatar>(0);
    *((_QWORD *)this + 3) = v6;
    if (*((_DWORD *)a2 + 9) == 2)
      v7 = (int **)*((_QWORD *)a2 + 3);
    else
      v7 = (int **)&SnippetUI::_ImageElement_Contact_Avatar_default_instance_;
    SnippetUI::ImageElement_Contact_Avatar::MergeFrom(v6, v7);
  }
  return this;
}

void sub_1BF8E7254(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::ImageElement_Contact::CopyFrom(SnippetUI::ImageElement_Contact *this, const SnippetUI::ImageElement_Contact *a2)
{
  if (a2 != this)
  {
    SnippetUI::ImageElement_Contact::Clear(this);
    SnippetUI::ImageElement_Contact::MergeFrom(this, a2);
  }
}

void SnippetUI::ImageElement_Contact::InternalSwap(SnippetUI::ImageElement_Contact *this, SnippetUI::ImageElement_Contact *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  uint64_t v5;
  google::protobuf::UnknownFieldSet *v6;
  int v7;
  uint64_t v8;
  google::protobuf::UnknownFieldSet *v9;

  v4 = (SnippetUI::ImageElement_Contact *)((char *)this + 8);
  v5 = *((_QWORD *)a2 + 1);
  if ((*((_BYTE *)this + 8) & 1) != 0)
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v6 = v9;
      goto LABEL_6;
    }
  }
  else if ((v5 & 1) == 0)
  {
    goto LABEL_7;
  }
  v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
  google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
LABEL_7:
  v7 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v7;
  v8 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v8;
  LODWORD(v8) = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v8;
}

SnippetUI::ImageElement_AppIcon *SnippetUI::ImageElement_AppIcon::ImageElement_AppIcon(SnippetUI::ImageElement_AppIcon *this, const SnippetUI::ImageElement_AppIcon *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)this = &off_1E792C5B0;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 7) = 0;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::ImageElement_AppIcon *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  v5 = *((_QWORD *)a2 + 2);
  if (*(char *)(v5 + 23) < 0)
    v6 = *(_QWORD *)(v5 + 8);
  else
    v6 = *(unsigned __int8 *)(v5 + 23);
  if ((uint64_t *)v5 != &google::protobuf::internal::fixed_address_empty_string && v6 != 0)
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, v5);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  return this;
}

void sub_1BF8E73D4(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::ImageElement_AppIcon::CopyFrom(SnippetUI::ImageElement_AppIcon *this, const SnippetUI::ImageElement_AppIcon *a2)
{
  if (a2 != this)
  {
    SnippetUI::ImageElement_AppIcon::Clear(this);
    SnippetUI::ImageElement_AppIcon::MergeFrom(this, a2);
  }
}

void SnippetUI::ImageElement_AppIcon::InternalSwap(SnippetUI::ImageElement_AppIcon *this, SnippetUI::ImageElement_AppIcon *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  uint64_t v5;
  google::protobuf::UnknownFieldSet *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  int v13;
  google::protobuf::UnknownFieldSet *v14;

  v4 = (SnippetUI::ImageElement_AppIcon *)((char *)this + 8);
  v5 = *((_QWORD *)a2 + 1);
  if ((*((_BYTE *)this + 8) & 1) != 0)
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v6 = v14;
      goto LABEL_6;
    }
LABEL_5:
    v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
    google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
    goto LABEL_7;
  }
  if ((v5 & 1) != 0)
    goto LABEL_5;
LABEL_7:
  v7 = (uint64_t *)*((_QWORD *)this + 2);
  v8 = (uint64_t **)((char *)a2 + 16);
  if (v7 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_13;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 2, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v7 = (uint64_t *)*((_QWORD *)this + 2);
  }
  v9 = *v8;
  if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 2, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v9 = *v8;
  }
  v10 = v7[2];
  v11 = *(_OWORD *)v7;
  v12 = v9[2];
  *(_OWORD *)v7 = *(_OWORD *)v9;
  v7[2] = v12;
  *(_OWORD *)v9 = v11;
  v9[2] = v10;
LABEL_13:
  v13 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v13;
}

void SnippetUI::ImageElement_Data::InitAsDefaultInstance(SnippetUI::ImageElement_Data *this)
{
  qword_1ED1D5368 = (uint64_t)&SnippetUI::_ImageElement_AspectRatio_default_instance_;
  unk_1ED1D5370 = &SnippetUI::_OptionalBool_default_instance_;
  qword_1ED1D5378 = (uint64_t)&SnippetUI::_OptionalBool_default_instance_;
}

uint64_t SnippetUI::ImageElement_Data::_Internal::aspect_ratio(SnippetUI::ImageElement_Data::_Internal *this, const SnippetUI::ImageElement_Data *a2)
{
  return *((_QWORD *)this + 4);
}

uint64_t SnippetUI::ImageElement_Data::_Internal::fixed_height(SnippetUI::ImageElement_Data::_Internal *this, const SnippetUI::ImageElement_Data *a2)
{
  return *((_QWORD *)this + 5);
}

uint64_t SnippetUI::ImageElement_Data::_Internal::fixed_width(SnippetUI::ImageElement_Data::_Internal *this, const SnippetUI::ImageElement_Data *a2)
{
  return *((_QWORD *)this + 6);
}

uint64_t SnippetUI::ImageElement_Data::clear_fixed_height(SnippetUI::ImageElement_Data *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 5);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 5) = 0;
  return result;
}

uint64_t SnippetUI::ImageElement_Data::clear_fixed_width(SnippetUI::ImageElement_Data *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 6);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 6) = 0;
  return result;
}

SnippetUI::ImageElement_Data *SnippetUI::ImageElement_Data::ImageElement_Data(SnippetUI::ImageElement_Data *this, const SnippetUI::ImageElement_Data *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  SnippetUI::ImageElement_AspectRatio *v10;
  SnippetUI::OptionalBool *v11;
  SnippetUI::OptionalBool *v12;

  *(_QWORD *)this = &off_1E792C670;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 15) = 0;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::ImageElement_Data *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  v5 = *((_QWORD *)a2 + 2);
  if (*(char *)(v5 + 23) < 0)
    v6 = *(_QWORD *)(v5 + 8);
  else
    v6 = *(unsigned __int8 *)(v5 + 23);
  if ((uint64_t *)v5 != &google::protobuf::internal::fixed_address_empty_string && v6 != 0)
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, v5);
  *((_QWORD *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  v8 = *((_QWORD *)a2 + 3);
  if (*(char *)(v8 + 23) < 0)
    v9 = *(_QWORD *)(v8 + 8);
  else
    v9 = *(unsigned __int8 *)(v8 + 23);
  if ((uint64_t *)v8 != &google::protobuf::internal::fixed_address_empty_string && v9)
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 3, v8);
  if (a2 == (const SnippetUI::ImageElement_Data *)&SnippetUI::_ImageElement_Data_default_instance_)
  {
    v11 = 0;
    *((_QWORD *)this + 4) = 0;
    *((_QWORD *)this + 5) = 0;
  }
  else
  {
    if (*((_QWORD *)a2 + 4))
    {
      v10 = (SnippetUI::ImageElement_AspectRatio *)operator new();
      SnippetUI::ImageElement_AspectRatio::ImageElement_AspectRatio(v10, *((const SnippetUI::ImageElement_AspectRatio **)a2 + 4));
    }
    else
    {
      v10 = 0;
    }
    *((_QWORD *)this + 4) = v10;
    if (*((_QWORD *)a2 + 5))
    {
      v12 = (SnippetUI::OptionalBool *)operator new();
      SnippetUI::OptionalBool::OptionalBool(v12, *((const SnippetUI::OptionalBool **)a2 + 5));
    }
    else
    {
      v12 = 0;
    }
    *((_QWORD *)this + 5) = v12;
    if (*((_QWORD *)a2 + 6))
    {
      v11 = (SnippetUI::OptionalBool *)operator new();
      SnippetUI::OptionalBool::OptionalBool(v11, *((const SnippetUI::OptionalBool **)a2 + 6));
    }
    else
    {
      v11 = 0;
    }
  }
  *((_QWORD *)this + 6) = v11;
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  return this;
}

void sub_1BF8E775C(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;

  MEMORY[0x1C3B8D890](v2, 0x1081C40B60F2DE8);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

SnippetUI::ImageElement_AspectRatio *SnippetUI::ImageElement_AspectRatio::ImageElement_AspectRatio(SnippetUI::ImageElement_AspectRatio *this, const SnippetUI::ImageElement_AspectRatio *a2)
{
  uint64_t v4;

  *(_QWORD *)this = &off_1E792CA30;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 6) = 0;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::ImageElement_AspectRatio *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  return this;
}

void sub_1BF8E7808(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::ImageElement_Data::CopyFrom(SnippetUI::ImageElement_Data *this, const SnippetUI::ImageElement_Data *a2)
{
  if (a2 != this)
  {
    SnippetUI::ImageElement_Data::Clear(this);
    SnippetUI::ImageElement_Data::MergeFrom(this, a2);
  }
}

void SnippetUI::ImageElement_Data::InternalSwap(SnippetUI::ImageElement_Data *this, SnippetUI::ImageElement_Data *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  uint64_t v5;
  google::protobuf::UnknownFieldSet *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  google::protobuf::UnknownFieldSet *v22;

  v4 = (SnippetUI::ImageElement_Data *)((char *)this + 8);
  v5 = *((_QWORD *)a2 + 1);
  if ((*((_BYTE *)this + 8) & 1) != 0)
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v6 = v22;
      goto LABEL_6;
    }
LABEL_5:
    v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
    google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
    goto LABEL_7;
  }
  if ((v5 & 1) != 0)
    goto LABEL_5;
LABEL_7:
  v7 = (uint64_t *)*((_QWORD *)this + 2);
  v8 = (uint64_t **)((char *)a2 + 16);
  if (v7 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_13;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 2, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v7 = (uint64_t *)*((_QWORD *)this + 2);
  }
  v9 = *v8;
  if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 2, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v9 = *v8;
  }
  v10 = v7[2];
  v11 = *(_OWORD *)v7;
  v12 = v9[2];
  *(_OWORD *)v7 = *(_OWORD *)v9;
  v7[2] = v12;
  *(_OWORD *)v9 = v11;
  v9[2] = v10;
LABEL_13:
  v13 = (uint64_t *)*((_QWORD *)this + 3);
  v14 = (uint64_t **)((char *)a2 + 24);
  if (v13 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_19;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 3, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v13 = (uint64_t *)*((_QWORD *)this + 3);
  }
  v15 = *v14;
  if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 3, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v15 = *v14;
  }
  v16 = v13[2];
  v17 = *(_OWORD *)v13;
  v18 = v15[2];
  *(_OWORD *)v13 = *(_OWORD *)v15;
  v13[2] = v18;
  *(_OWORD *)v15 = v17;
  v15[2] = v16;
LABEL_19:
  v19 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v19;
  v20 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v20;
  v21 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v21;
  LODWORD(v21) = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v21;
}

void SnippetUI::ImageElement_Bundle::InitAsDefaultInstance(SnippetUI::ImageElement_Bundle *this)
{
  qword_1ED1D53B8 = (uint64_t)&SnippetUI::_ImageElement_AspectRatio_default_instance_;
  unk_1ED1D53C0 = &SnippetUI::_OptionalBool_default_instance_;
  qword_1ED1D53C8 = (uint64_t)&SnippetUI::_OptionalBool_default_instance_;
}

uint64_t SnippetUI::ImageElement_Bundle::_Internal::aspect_ratio(SnippetUI::ImageElement_Bundle::_Internal *this, const SnippetUI::ImageElement_Bundle *a2)
{
  return *((_QWORD *)this + 6);
}

uint64_t SnippetUI::ImageElement_Bundle::_Internal::fixed_height(SnippetUI::ImageElement_Bundle::_Internal *this, const SnippetUI::ImageElement_Bundle *a2)
{
  return *((_QWORD *)this + 7);
}

uint64_t SnippetUI::ImageElement_Bundle::_Internal::fixed_width(SnippetUI::ImageElement_Bundle::_Internal *this, const SnippetUI::ImageElement_Bundle *a2)
{
  return *((_QWORD *)this + 8);
}

uint64_t SnippetUI::ImageElement_Bundle::clear_fixed_height(SnippetUI::ImageElement_Bundle *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 7);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 7) = 0;
  return result;
}

uint64_t SnippetUI::ImageElement_Bundle::clear_fixed_width(SnippetUI::ImageElement_Bundle *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 8);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 8) = 0;
  return result;
}

SnippetUI::ImageElement_Bundle *SnippetUI::ImageElement_Bundle::ImageElement_Bundle(SnippetUI::ImageElement_Bundle *this, const SnippetUI::ImageElement_Bundle *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  SnippetUI::ImageElement_AspectRatio *v14;
  SnippetUI::OptionalBool *v15;
  SnippetUI::OptionalBool *v16;

  *(_QWORD *)this = &off_1E792C730;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 19) = 0;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::ImageElement_Bundle *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  v5 = *((_QWORD *)a2 + 2);
  if (*(char *)(v5 + 23) < 0)
    v6 = *(_QWORD *)(v5 + 8);
  else
    v6 = *(unsigned __int8 *)(v5 + 23);
  if ((uint64_t *)v5 != &google::protobuf::internal::fixed_address_empty_string && v6 != 0)
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, v5);
  *((_QWORD *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  v8 = *((_QWORD *)a2 + 3);
  if (*(char *)(v8 + 23) < 0)
    v9 = *(_QWORD *)(v8 + 8);
  else
    v9 = *(unsigned __int8 *)(v8 + 23);
  if ((uint64_t *)v8 != &google::protobuf::internal::fixed_address_empty_string && v9)
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 3, v8);
  *((_QWORD *)this + 4) = &google::protobuf::internal::fixed_address_empty_string;
  v10 = *((_QWORD *)a2 + 4);
  if (*(char *)(v10 + 23) < 0)
    v11 = *(_QWORD *)(v10 + 8);
  else
    v11 = *(unsigned __int8 *)(v10 + 23);
  if ((uint64_t *)v10 != &google::protobuf::internal::fixed_address_empty_string && v11)
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 4, v10);
  *((_QWORD *)this + 5) = &google::protobuf::internal::fixed_address_empty_string;
  v12 = *((_QWORD *)a2 + 5);
  if (*(char *)(v12 + 23) < 0)
    v13 = *(_QWORD *)(v12 + 8);
  else
    v13 = *(unsigned __int8 *)(v12 + 23);
  if ((uint64_t *)v12 != &google::protobuf::internal::fixed_address_empty_string && v13)
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 5, v12);
  if (a2 == (const SnippetUI::ImageElement_Bundle *)&SnippetUI::_ImageElement_Bundle_default_instance_)
  {
    v15 = 0;
    *((_QWORD *)this + 6) = 0;
    *((_QWORD *)this + 7) = 0;
  }
  else
  {
    if (*((_QWORD *)a2 + 6))
    {
      v14 = (SnippetUI::ImageElement_AspectRatio *)operator new();
      SnippetUI::ImageElement_AspectRatio::ImageElement_AspectRatio(v14, *((const SnippetUI::ImageElement_AspectRatio **)a2 + 6));
    }
    else
    {
      v14 = 0;
    }
    *((_QWORD *)this + 6) = v14;
    if (*((_QWORD *)a2 + 7))
    {
      v16 = (SnippetUI::OptionalBool *)operator new();
      SnippetUI::OptionalBool::OptionalBool(v16, *((const SnippetUI::OptionalBool **)a2 + 7));
    }
    else
    {
      v16 = 0;
    }
    *((_QWORD *)this + 7) = v16;
    if (*((_QWORD *)a2 + 8))
    {
      v15 = (SnippetUI::OptionalBool *)operator new();
      SnippetUI::OptionalBool::OptionalBool(v15, *((const SnippetUI::OptionalBool **)a2 + 8));
    }
    else
    {
      v15 = 0;
    }
  }
  *((_QWORD *)this + 8) = v15;
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  return this;
}

void sub_1BF8E7CA0(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;

  MEMORY[0x1C3B8D890](v2, 0x1081C40B60F2DE8);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::ImageElement_Bundle::CopyFrom(SnippetUI::ImageElement_Bundle *this, const SnippetUI::ImageElement_Bundle *a2)
{
  if (a2 != this)
  {
    SnippetUI::ImageElement_Bundle::Clear(this);
    SnippetUI::ImageElement_Bundle::MergeFrom(this, a2);
  }
}

void SnippetUI::ImageElement_Bundle::InternalSwap(SnippetUI::ImageElement_Bundle *this, SnippetUI::ImageElement_Bundle *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  uint64_t v5;
  google::protobuf::UnknownFieldSet *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t **v20;
  uint64_t *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t **v26;
  uint64_t *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  google::protobuf::UnknownFieldSet *v34;

  v4 = (SnippetUI::ImageElement_Bundle *)((char *)this + 8);
  v5 = *((_QWORD *)a2 + 1);
  if ((*((_BYTE *)this + 8) & 1) != 0)
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v6 = v34;
      goto LABEL_6;
    }
LABEL_5:
    v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
    google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
    goto LABEL_7;
  }
  if ((v5 & 1) != 0)
    goto LABEL_5;
LABEL_7:
  v7 = (uint64_t *)*((_QWORD *)this + 2);
  v8 = (uint64_t **)((char *)a2 + 16);
  if (v7 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_13;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 2, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v7 = (uint64_t *)*((_QWORD *)this + 2);
  }
  v9 = *v8;
  if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 2, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v9 = *v8;
  }
  v10 = v7[2];
  v11 = *(_OWORD *)v7;
  v12 = v9[2];
  *(_OWORD *)v7 = *(_OWORD *)v9;
  v7[2] = v12;
  *(_OWORD *)v9 = v11;
  v9[2] = v10;
LABEL_13:
  v13 = (uint64_t *)*((_QWORD *)this + 3);
  v14 = (uint64_t **)((char *)a2 + 24);
  if (v13 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_19;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 3, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v13 = (uint64_t *)*((_QWORD *)this + 3);
  }
  v15 = *v14;
  if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 3, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v15 = *v14;
  }
  v16 = v13[2];
  v17 = *(_OWORD *)v13;
  v18 = v15[2];
  *(_OWORD *)v13 = *(_OWORD *)v15;
  v13[2] = v18;
  *(_OWORD *)v15 = v17;
  v15[2] = v16;
LABEL_19:
  v19 = (uint64_t *)*((_QWORD *)this + 4);
  v20 = (uint64_t **)((char *)a2 + 32);
  if (v19 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v20 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_25;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 4, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v19 = (uint64_t *)*((_QWORD *)this + 4);
  }
  v21 = *v20;
  if (*v20 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 4, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v21 = *v20;
  }
  v22 = v19[2];
  v23 = *(_OWORD *)v19;
  v24 = v21[2];
  *(_OWORD *)v19 = *(_OWORD *)v21;
  v19[2] = v24;
  *(_OWORD *)v21 = v23;
  v21[2] = v22;
LABEL_25:
  v25 = (uint64_t *)*((_QWORD *)this + 5);
  v26 = (uint64_t **)((char *)a2 + 40);
  if (v25 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v26 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_31;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 5, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v25 = (uint64_t *)*((_QWORD *)this + 5);
  }
  v27 = *v26;
  if (*v26 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 5, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v27 = *v26;
  }
  v28 = v25[2];
  v29 = *(_OWORD *)v25;
  v30 = v27[2];
  *(_OWORD *)v25 = *(_OWORD *)v27;
  v25[2] = v30;
  *(_OWORD *)v27 = v29;
  v27[2] = v28;
LABEL_31:
  v31 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v31;
  v32 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v32;
  v33 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v33;
  LODWORD(v33) = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v33;
}

void SnippetUI::ImageElement_Url::InitAsDefaultInstance(SnippetUI::ImageElement_Url *this)
{
  qword_1ED1D51B0 = (uint64_t)&SnippetUI::_ImageElement_Data_default_instance_;
  unk_1ED1D51B8 = &SnippetUI::_ImageElement_Bundle_default_instance_;
  qword_1ED1D51C0 = (uint64_t)&SnippetUI::_ImageElement_Symbol_default_instance_;
  qword_1ED1D5178 = (uint64_t)&SnippetUI::_ImageElement_AspectRatio_default_instance_;
  unk_1ED1D5180 = &SnippetUI::_OptionalBool_default_instance_;
  qword_1ED1D5188 = (uint64_t)&SnippetUI::_OptionalBool_default_instance_;
  unk_1ED1D5190 = &SnippetUI::_Color_default_instance_;
}

uint64_t SnippetUI::ImageElement_Url::_Internal::data_loading_image(SnippetUI::ImageElement_Url::_Internal *this, const SnippetUI::ImageElement_Url *a2)
{
  return *((_QWORD *)this + 9);
}

uint64_t SnippetUI::ImageElement_Url::_Internal::bundle_loading_image(SnippetUI::ImageElement_Url::_Internal *this, const SnippetUI::ImageElement_Url *a2)
{
  return *((_QWORD *)this + 9);
}

uint64_t SnippetUI::ImageElement_Url::_Internal::symbol_loading_image(SnippetUI::ImageElement_Url::_Internal *this, const SnippetUI::ImageElement_Url *a2)
{
  return *((_QWORD *)this + 9);
}

uint64_t SnippetUI::ImageElement_Url::_Internal::aspect_ratio(SnippetUI::ImageElement_Url::_Internal *this, const SnippetUI::ImageElement_Url *a2)
{
  return *((_QWORD *)this + 4);
}

uint64_t SnippetUI::ImageElement_Url::_Internal::fixed_height(SnippetUI::ImageElement_Url::_Internal *this, const SnippetUI::ImageElement_Url *a2)
{
  return *((_QWORD *)this + 5);
}

uint64_t SnippetUI::ImageElement_Url::_Internal::fixed_width(SnippetUI::ImageElement_Url::_Internal *this, const SnippetUI::ImageElement_Url *a2)
{
  return *((_QWORD *)this + 6);
}

uint64_t SnippetUI::ImageElement_Url::_Internal::background_color(SnippetUI::ImageElement_Url::_Internal *this, const SnippetUI::ImageElement_Url *a2)
{
  return *((_QWORD *)this + 7);
}

uint64_t SnippetUI::ImageElement_Url::set_allocated_data_loading_image(SnippetUI::ImageElement_Url *this, SnippetUI::ImageElement_Data *a2)
{
  uint64_t result;

  result = SnippetUI::ImageElement_Url::clear_loading_image((uint64_t)this);
  if (a2)
  {
    *((_DWORD *)this + 21) = 2;
    *((_QWORD *)this + 9) = a2;
  }
  return result;
}

uint64_t SnippetUI::ImageElement_Url::set_allocated_bundle_loading_image(SnippetUI::ImageElement_Url *this, SnippetUI::ImageElement_Bundle *a2)
{
  uint64_t result;

  result = SnippetUI::ImageElement_Url::clear_loading_image((uint64_t)this);
  if (a2)
  {
    *((_DWORD *)this + 21) = 3;
    *((_QWORD *)this + 9) = a2;
  }
  return result;
}

uint64_t SnippetUI::ImageElement_Url::set_allocated_symbol_loading_image(SnippetUI::ImageElement_Url *this, SnippetUI::ImageElement_Symbol *a2)
{
  uint64_t result;

  result = SnippetUI::ImageElement_Url::clear_loading_image((uint64_t)this);
  if (a2)
  {
    *((_DWORD *)this + 21) = 4;
    *((_QWORD *)this + 9) = a2;
  }
  return result;
}

uint64_t SnippetUI::ImageElement_Url::clear_fixed_height(SnippetUI::ImageElement_Url *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 5);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 5) = 0;
  return result;
}

uint64_t SnippetUI::ImageElement_Url::clear_fixed_width(SnippetUI::ImageElement_Url *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 6);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 6) = 0;
  return result;
}

uint64_t SnippetUI::ImageElement_Url::clear_background_color(SnippetUI::ImageElement_Url *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 7);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 7) = 0;
  return result;
}

SnippetUI::ImageElement_Url *SnippetUI::ImageElement_Url::ImageElement_Url(SnippetUI::ImageElement_Url *this, const SnippetUI::ImageElement_Url *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  SnippetUI::ImageElement_AspectRatio *v10;
  SnippetUI::Color *v11;
  SnippetUI::OptionalBool *v12;
  SnippetUI::OptionalBool *v13;
  int v14;
  SnippetUI::ImageElement_Data *v15;
  const SnippetUI::ImageElement_Data *v16;
  SnippetUI::ImageElement_Symbol *v17;
  const SnippetUI::ImageElement_Symbol *v18;
  SnippetUI::ImageElement_Bundle *v19;
  const SnippetUI::ImageElement_Bundle *v20;

  *(_QWORD *)this = &off_1E792C7F0;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 20) = 0;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::ImageElement_Url *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  v5 = *((_QWORD *)a2 + 2);
  if (*(char *)(v5 + 23) < 0)
    v6 = *(_QWORD *)(v5 + 8);
  else
    v6 = *(unsigned __int8 *)(v5 + 23);
  if ((uint64_t *)v5 != &google::protobuf::internal::fixed_address_empty_string && v6 != 0)
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, v5);
  *((_QWORD *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  v8 = *((_QWORD *)a2 + 3);
  if (*(char *)(v8 + 23) < 0)
    v9 = *(_QWORD *)(v8 + 8);
  else
    v9 = *(unsigned __int8 *)(v8 + 23);
  if ((uint64_t *)v8 != &google::protobuf::internal::fixed_address_empty_string && v9)
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 3, v8);
  if (a2 == (const SnippetUI::ImageElement_Url *)&SnippetUI::_ImageElement_Url_default_instance_)
  {
    v11 = 0;
    *((_QWORD *)this + 4) = 0;
    *((_QWORD *)this + 5) = 0;
    *((_QWORD *)this + 6) = 0;
  }
  else
  {
    if (*((_QWORD *)a2 + 4))
    {
      v10 = (SnippetUI::ImageElement_AspectRatio *)operator new();
      SnippetUI::ImageElement_AspectRatio::ImageElement_AspectRatio(v10, *((const SnippetUI::ImageElement_AspectRatio **)a2 + 4));
    }
    else
    {
      v10 = 0;
    }
    *((_QWORD *)this + 4) = v10;
    if (*((_QWORD *)a2 + 5))
    {
      v12 = (SnippetUI::OptionalBool *)operator new();
      SnippetUI::OptionalBool::OptionalBool(v12, *((const SnippetUI::OptionalBool **)a2 + 5));
    }
    else
    {
      v12 = 0;
    }
    *((_QWORD *)this + 5) = v12;
    if (*((_QWORD *)a2 + 6))
    {
      v13 = (SnippetUI::OptionalBool *)operator new();
      SnippetUI::OptionalBool::OptionalBool(v13, *((const SnippetUI::OptionalBool **)a2 + 6));
    }
    else
    {
      v13 = 0;
    }
    *((_QWORD *)this + 6) = v13;
    if (*((_QWORD *)a2 + 7))
    {
      v11 = (SnippetUI::Color *)operator new();
      SnippetUI::Color::Color(v11, *((const SnippetUI::Color **)a2 + 7));
    }
    else
    {
      v11 = 0;
    }
  }
  *((_QWORD *)this + 7) = v11;
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_DWORD *)this + 21) = 0;
  v14 = *((_DWORD *)a2 + 21);
  switch(v14)
  {
    case 4:
      SnippetUI::ImageElement_Url::clear_loading_image((uint64_t)this);
      *((_DWORD *)this + 21) = 4;
      v17 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement_Symbol>(0);
      *((_QWORD *)this + 9) = v17;
      if (*((_DWORD *)a2 + 21) == 4)
        v18 = (const SnippetUI::ImageElement_Symbol *)*((_QWORD *)a2 + 9);
      else
        v18 = (const SnippetUI::ImageElement_Symbol *)&SnippetUI::_ImageElement_Symbol_default_instance_;
      SnippetUI::ImageElement_Symbol::MergeFrom(v17, v18);
      break;
    case 3:
      SnippetUI::ImageElement_Url::clear_loading_image((uint64_t)this);
      *((_DWORD *)this + 21) = 3;
      v19 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement_Bundle>(0);
      *((_QWORD *)this + 9) = v19;
      if (*((_DWORD *)a2 + 21) == 3)
        v20 = (const SnippetUI::ImageElement_Bundle *)*((_QWORD *)a2 + 9);
      else
        v20 = (const SnippetUI::ImageElement_Bundle *)&SnippetUI::_ImageElement_Bundle_default_instance_;
      SnippetUI::ImageElement_Bundle::MergeFrom(v19, v20);
      break;
    case 2:
      SnippetUI::ImageElement_Url::clear_loading_image((uint64_t)this);
      *((_DWORD *)this + 21) = 2;
      v15 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement_Data>(0);
      *((_QWORD *)this + 9) = v15;
      if (*((_DWORD *)a2 + 21) == 2)
        v16 = (const SnippetUI::ImageElement_Data *)*((_QWORD *)a2 + 9);
      else
        v16 = (const SnippetUI::ImageElement_Data *)&SnippetUI::_ImageElement_Data_default_instance_;
      SnippetUI::ImageElement_Data::MergeFrom(v15, v16);
      break;
  }
  return this;
}

void sub_1BF8E8428(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;

  MEMORY[0x1C3B8D890](v2, 0x10A3C407A2727C4);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::ImageElement_Url::CopyFrom(SnippetUI::ImageElement_Url *this, const SnippetUI::ImageElement_Url *a2)
{
  if (a2 != this)
  {
    SnippetUI::ImageElement_Url::Clear(this);
    SnippetUI::ImageElement_Url::MergeFrom(this, a2);
  }
}

void SnippetUI::ImageElement_Url::InternalSwap(SnippetUI::ImageElement_Url *this, SnippetUI::ImageElement_Url *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  uint64_t v5;
  google::protobuf::UnknownFieldSet *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  google::protobuf::UnknownFieldSet *v24;

  v4 = (SnippetUI::ImageElement_Url *)((char *)this + 8);
  v5 = *((_QWORD *)a2 + 1);
  if ((*((_BYTE *)this + 8) & 1) != 0)
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v6 = v24;
      goto LABEL_6;
    }
LABEL_5:
    v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
    google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
    goto LABEL_7;
  }
  if ((v5 & 1) != 0)
    goto LABEL_5;
LABEL_7:
  v7 = (uint64_t *)*((_QWORD *)this + 2);
  v8 = (uint64_t **)((char *)a2 + 16);
  if (v7 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_13;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 2, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v7 = (uint64_t *)*((_QWORD *)this + 2);
  }
  v9 = *v8;
  if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 2, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v9 = *v8;
  }
  v10 = v7[2];
  v11 = *(_OWORD *)v7;
  v12 = v9[2];
  *(_OWORD *)v7 = *(_OWORD *)v9;
  v7[2] = v12;
  *(_OWORD *)v9 = v11;
  v9[2] = v10;
LABEL_13:
  v13 = (uint64_t *)*((_QWORD *)this + 3);
  v14 = (uint64_t **)((char *)a2 + 24);
  if (v13 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_19;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 3, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v13 = (uint64_t *)*((_QWORD *)this + 3);
  }
  v15 = *v14;
  if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 3, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v15 = *v14;
  }
  v16 = v13[2];
  v17 = *(_OWORD *)v13;
  v18 = v15[2];
  *(_OWORD *)v13 = *(_OWORD *)v15;
  v13[2] = v18;
  *(_OWORD *)v15 = v17;
  v15[2] = v16;
LABEL_19:
  v19 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v19;
  v20 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v20;
  v21 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v21;
  v22 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v22;
  LODWORD(v22) = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v22;
  LODWORD(v22) = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v22;
  v23 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v23;
  LODWORD(v23) = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v23;
}

void SnippetUI::ImageElement_Symbol_Background::InitAsDefaultInstance(SnippetUI::ImageElement_Symbol_Background *this)
{
  qword_1EF583F58 = (uint64_t)&SnippetUI::_Color_default_instance_;
  unk_1EF583F60 = &SnippetUI::_ImageElement_AspectRatio_default_instance_;
  qword_1EF583F68 = (uint64_t)&SnippetUI::_OptionalBool_default_instance_;
  unk_1EF583F70 = &SnippetUI::_OptionalBool_default_instance_;
}

uint64_t SnippetUI::ImageElement_Symbol_Background::_Internal::color(SnippetUI::ImageElement_Symbol_Background::_Internal *this, const SnippetUI::ImageElement_Symbol_Background *a2)
{
  return *((_QWORD *)this + 2);
}

uint64_t SnippetUI::ImageElement_Symbol_Background::_Internal::aspect_ratio(SnippetUI::ImageElement_Symbol_Background::_Internal *this, const SnippetUI::ImageElement_Symbol_Background *a2)
{
  return *((_QWORD *)this + 3);
}

uint64_t SnippetUI::ImageElement_Symbol_Background::_Internal::fixed_height(SnippetUI::ImageElement_Symbol_Background::_Internal *this, const SnippetUI::ImageElement_Symbol_Background *a2)
{
  return *((_QWORD *)this + 4);
}

uint64_t SnippetUI::ImageElement_Symbol_Background::_Internal::fixed_width(SnippetUI::ImageElement_Symbol_Background::_Internal *this, const SnippetUI::ImageElement_Symbol_Background *a2)
{
  return *((_QWORD *)this + 5);
}

uint64_t SnippetUI::ImageElement_Symbol_Background::clear_color(SnippetUI::ImageElement_Symbol_Background *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 2);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 2) = 0;
  return result;
}

uint64_t SnippetUI::ImageElement_Symbol_Background::clear_fixed_height(SnippetUI::ImageElement_Symbol_Background *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 4);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 4) = 0;
  return result;
}

uint64_t SnippetUI::ImageElement_Symbol_Background::clear_fixed_width(SnippetUI::ImageElement_Symbol_Background *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 5);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 5) = 0;
  return result;
}

SnippetUI::ImageElement_Symbol_Background *SnippetUI::ImageElement_Symbol_Background::ImageElement_Symbol_Background(SnippetUI::ImageElement_Symbol_Background *this, const SnippetUI::ImageElement_Symbol_Background *a2)
{
  uint64_t v4;
  SnippetUI::Color *v5;
  SnippetUI::OptionalBool *v6;
  SnippetUI::ImageElement_AspectRatio *v7;
  SnippetUI::OptionalBool *v8;

  *(_QWORD *)this = &off_1E792C8B0;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 12) = 0;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::ImageElement_Symbol_Background *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  if (a2 == (const SnippetUI::ImageElement_Symbol_Background *)&SnippetUI::_ImageElement_Symbol_Background_default_instance_)
  {
    v6 = 0;
    *((_QWORD *)this + 2) = 0;
    *((_QWORD *)this + 3) = 0;
    *((_QWORD *)this + 4) = 0;
  }
  else
  {
    if (*((_QWORD *)a2 + 2))
    {
      v5 = (SnippetUI::Color *)operator new();
      SnippetUI::Color::Color(v5, *((const SnippetUI::Color **)a2 + 2));
    }
    else
    {
      v5 = 0;
    }
    *((_QWORD *)this + 2) = v5;
    if (*((_QWORD *)a2 + 3))
    {
      v7 = (SnippetUI::ImageElement_AspectRatio *)operator new();
      SnippetUI::ImageElement_AspectRatio::ImageElement_AspectRatio(v7, *((const SnippetUI::ImageElement_AspectRatio **)a2 + 3));
    }
    else
    {
      v7 = 0;
    }
    *((_QWORD *)this + 3) = v7;
    if (*((_QWORD *)a2 + 4))
    {
      v8 = (SnippetUI::OptionalBool *)operator new();
      SnippetUI::OptionalBool::OptionalBool(v8, *((const SnippetUI::OptionalBool **)a2 + 4));
    }
    else
    {
      v8 = 0;
    }
    *((_QWORD *)this + 4) = v8;
    if (*((_QWORD *)a2 + 5))
    {
      v6 = (SnippetUI::OptionalBool *)operator new();
      SnippetUI::OptionalBool::OptionalBool(v6, *((const SnippetUI::OptionalBool **)a2 + 5));
    }
    else
    {
      v6 = 0;
    }
  }
  *((_QWORD *)this + 5) = v6;
  return this;
}

void sub_1BF8E8900(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;

  MEMORY[0x1C3B8D890](v2, 0x1081C40B60F2DE8);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::ImageElement_Symbol_Background::CopyFrom(SnippetUI::ImageElement_Symbol_Background *this, const SnippetUI::ImageElement_Symbol_Background *a2)
{
  if (a2 != this)
  {
    SnippetUI::ImageElement_Symbol_Background::Clear(this);
    SnippetUI::ImageElement_Symbol_Background::MergeFrom(this, a2);
  }
}

void SnippetUI::ImageElement_Symbol_Background::InternalSwap(SnippetUI::ImageElement_Symbol_Background *this, SnippetUI::ImageElement_Symbol_Background *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  uint64_t v5;
  google::protobuf::UnknownFieldSet *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  google::protobuf::UnknownFieldSet *v11;

  v4 = (SnippetUI::ImageElement_Symbol_Background *)((char *)this + 8);
  v5 = *((_QWORD *)a2 + 1);
  if ((*((_BYTE *)this + 8) & 1) != 0)
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v6 = v11;
      goto LABEL_6;
    }
  }
  else if ((v5 & 1) == 0)
  {
    goto LABEL_7;
  }
  v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
  google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
LABEL_7:
  v7 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v7;
  v8 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v8;
  v9 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v9;
  v10 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v10;
}

void SnippetUI::ImageElement_Symbol::InitAsDefaultInstance(SnippetUI::ImageElement_Symbol *this)
{
  qword_1ED1D5448 = (uint64_t)&SnippetUI::_Color_default_instance_;
  unk_1ED1D5450 = &SnippetUI::_ImageElement_Symbol_Background_default_instance_;
}

uint64_t SnippetUI::ImageElement_Symbol::_Internal::tint_color(SnippetUI::ImageElement_Symbol::_Internal *this, const SnippetUI::ImageElement_Symbol *a2)
{
  return *((_QWORD *)this + 4);
}

uint64_t SnippetUI::ImageElement_Symbol::_Internal::background(SnippetUI::ImageElement_Symbol::_Internal *this, const SnippetUI::ImageElement_Symbol *a2)
{
  return *((_QWORD *)this + 5);
}

uint64_t SnippetUI::ImageElement_Symbol::clear_tint_color(SnippetUI::ImageElement_Symbol *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 4);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 4) = 0;
  return result;
}

SnippetUI::ImageElement_Symbol *SnippetUI::ImageElement_Symbol::ImageElement_Symbol(SnippetUI::ImageElement_Symbol *this, const SnippetUI::ImageElement_Symbol *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  SnippetUI::Color *v10;
  SnippetUI::ImageElement_Symbol_Background *v11;

  *(_QWORD *)this = &off_1E792C970;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 14) = 0;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::ImageElement_Symbol *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  v5 = *((_QWORD *)a2 + 2);
  if (*(char *)(v5 + 23) < 0)
    v6 = *(_QWORD *)(v5 + 8);
  else
    v6 = *(unsigned __int8 *)(v5 + 23);
  if ((uint64_t *)v5 != &google::protobuf::internal::fixed_address_empty_string && v6 != 0)
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, v5);
  *((_QWORD *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  v8 = *((_QWORD *)a2 + 3);
  if (*(char *)(v8 + 23) < 0)
    v9 = *(_QWORD *)(v8 + 8);
  else
    v9 = *(unsigned __int8 *)(v8 + 23);
  if ((uint64_t *)v8 != &google::protobuf::internal::fixed_address_empty_string && v9)
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 3, v8);
  if (a2 == (const SnippetUI::ImageElement_Symbol *)&SnippetUI::_ImageElement_Symbol_default_instance_)
  {
    v11 = 0;
    *((_QWORD *)this + 4) = 0;
  }
  else
  {
    if (*((_QWORD *)a2 + 4))
    {
      v10 = (SnippetUI::Color *)operator new();
      SnippetUI::Color::Color(v10, *((const SnippetUI::Color **)a2 + 4));
    }
    else
    {
      v10 = 0;
    }
    *((_QWORD *)this + 4) = v10;
    if (*((_QWORD *)a2 + 5))
    {
      v11 = (SnippetUI::ImageElement_Symbol_Background *)operator new();
      SnippetUI::ImageElement_Symbol_Background::ImageElement_Symbol_Background(v11, *((const SnippetUI::ImageElement_Symbol_Background **)a2 + 5));
    }
    else
    {
      v11 = 0;
    }
  }
  *((_QWORD *)this + 5) = v11;
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  return this;
}

void sub_1BF8E8C00(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;

  MEMORY[0x1C3B8D890](v2, 0x10A1C40668C0A6DLL);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::ImageElement_Symbol::CopyFrom(SnippetUI::ImageElement_Symbol *this, const SnippetUI::ImageElement_Symbol *a2)
{
  if (a2 != this)
  {
    SnippetUI::ImageElement_Symbol::Clear(this);
    SnippetUI::ImageElement_Symbol::MergeFrom(this, a2);
  }
}

void SnippetUI::ImageElement_Symbol::InternalSwap(SnippetUI::ImageElement_Symbol *this, SnippetUI::ImageElement_Symbol *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  uint64_t v5;
  google::protobuf::UnknownFieldSet *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  google::protobuf::UnknownFieldSet *v21;

  v4 = (SnippetUI::ImageElement_Symbol *)((char *)this + 8);
  v5 = *((_QWORD *)a2 + 1);
  if ((*((_BYTE *)this + 8) & 1) != 0)
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v6 = v21;
      goto LABEL_6;
    }
LABEL_5:
    v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
    google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
    goto LABEL_7;
  }
  if ((v5 & 1) != 0)
    goto LABEL_5;
LABEL_7:
  v7 = (uint64_t *)*((_QWORD *)this + 2);
  v8 = (uint64_t **)((char *)a2 + 16);
  if (v7 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_13;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 2, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v7 = (uint64_t *)*((_QWORD *)this + 2);
  }
  v9 = *v8;
  if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 2, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v9 = *v8;
  }
  v10 = v7[2];
  v11 = *(_OWORD *)v7;
  v12 = v9[2];
  *(_OWORD *)v7 = *(_OWORD *)v9;
  v7[2] = v12;
  *(_OWORD *)v9 = v11;
  v9[2] = v10;
LABEL_13:
  v13 = (uint64_t *)*((_QWORD *)this + 3);
  v14 = (uint64_t **)((char *)a2 + 24);
  if (v13 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_19;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 3, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v13 = (uint64_t *)*((_QWORD *)this + 3);
  }
  v15 = *v14;
  if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 3, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v15 = *v14;
  }
  v16 = v13[2];
  v17 = *(_OWORD *)v13;
  v18 = v15[2];
  *(_OWORD *)v13 = *(_OWORD *)v15;
  v13[2] = v18;
  *(_OWORD *)v15 = v17;
  v15[2] = v16;
LABEL_19:
  v19 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v19;
  v20 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v20;
  LODWORD(v20) = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v20;
  LODWORD(v20) = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v20;
}

uint64_t SnippetUI::ImageElement_AspectRatio::ImageElement_AspectRatio(uint64_t this)
{
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)this = &off_1E792CA30;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

{
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)this = &off_1E792CA30;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

void SnippetUI::ImageElement_AspectRatio::CopyFrom(SnippetUI::ImageElement_AspectRatio *this, const SnippetUI::ImageElement_AspectRatio *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  char v5;

  if (a2 != this)
  {
    v5 = *((_BYTE *)this + 8);
    v4 = (SnippetUI::ImageElement_AspectRatio *)((char *)this + 8);
    *((_QWORD *)v4 + 1) = 0;
    if ((v5 & 1) != 0)
      google::protobuf::internal::InternalMetadataWithArena::DoClear(v4);
    SnippetUI::ImageElement_AspectRatio::MergeFrom(this, a2);
  }
}

float SnippetUI::ImageElement_AspectRatio::InternalSwap(SnippetUI::ImageElement_AspectRatio *this, SnippetUI::ImageElement_AspectRatio *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  uint64_t v5;
  google::protobuf::UnknownFieldSet *v6;
  int v7;
  float result;
  google::protobuf::UnknownFieldSet *v9;

  v4 = (SnippetUI::ImageElement_AspectRatio *)((char *)this + 8);
  v5 = *((_QWORD *)a2 + 1);
  if ((*((_BYTE *)this + 8) & 1) != 0)
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v6 = v9;
      goto LABEL_6;
    }
  }
  else if ((v5 & 1) == 0)
  {
    goto LABEL_7;
  }
  v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
  google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
LABEL_7:
  v7 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v7;
  result = *((float *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((float *)a2 + 5) = result;
  return result;
}

SnippetUI::ImageElement *SnippetUI::ImageElement::ImageElement(SnippetUI::ImageElement *this, const SnippetUI::ImageElement *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  uint64_t v5;

  *(_QWORD *)this = &off_1E792CAF0;
  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (SnippetUI::ImageElement *)((char *)this + 8);
  *(_OWORD *)((char *)this + 24) = 0u;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<SnippetUI::ImageElement_Source>::TypeHandler>((int **)this + 2, (uint64_t)a2 + 16);
  google::protobuf::RepeatedField<int>::RepeatedField((uint64_t)this + 40, (int *)a2 + 10);
  *((_DWORD *)this + 15) = 0;
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom(v4, (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  return this;
}

void sub_1BF8E8FF0(_Unwind_Exception *a1)
{
  uint64_t *v1;
  google::protobuf::internal::RepeatedPtrFieldBase *v2;
  uint64_t v3;

  google::protobuf::RepeatedField<int>::~RepeatedField(v3);
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::ImageElement::CopyFrom(SnippetUI::ImageElement *this, const SnippetUI::ImageElement *a2)
{
  if (a2 != this)
  {
    SnippetUI::ImageElement::Clear(this);
    SnippetUI::ImageElement::MergeFrom(this, a2);
  }
}

void SnippetUI::ImageElement::InternalSwap(SnippetUI::ImageElement *this, SnippetUI::ImageElement *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  uint64_t v5;
  google::protobuf::UnknownFieldSet *v6;
  google::protobuf::UnknownFieldSet *v7;

  v4 = (SnippetUI::ImageElement *)((char *)this + 8);
  v5 = *((_QWORD *)a2 + 1);
  if ((*((_BYTE *)this + 8) & 1) != 0)
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v6 = v7;
      goto LABEL_6;
    }
  }
  else if ((v5 & 1) == 0)
  {
    goto LABEL_7;
  }
  v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
  google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
LABEL_7:
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((SnippetUI::ImageElement *)((char *)this + 16), (SnippetUI::ImageElement *)((char *)a2 + 16));
  google::protobuf::RepeatedField<int>::InternalSwap((uint64_t)this + 40, (uint64_t)a2 + 40);
}

void siri::dialogengine::ParseGzippedFile()
{
  uint64_t v0;
  uint64_t v1;
  std::string *v2;
  std::string *v3;
  gzFile v4;
  gzFile_s *v5;
  int v6;
  const char *v7;
  const char *v8;
  uint64_t v9;
  int *v10;
  char *v11;
  const char *v12;
  int errnum;
  std::string v14;
  std::string::value_type buf[8192];
  uint64_t v16;

  v0 = MEMORY[0x1E0C80A78]();
  v1 = v0;
  v3 = v2;
  v16 = *MEMORY[0x1E0C80C00];
  if (*(char *)(v0 + 23) < 0)
    v0 = *(_QWORD *)v0;
  v4 = gzopen((const char *)v0, "r");
  if (v4)
  {
    v5 = v4;
    memset(&v14, 0, sizeof(v14));
    while (1)
    {
      while (1)
      {
        if (gzeof(v5))
        {
          gzclose(v5);
          *v3 = v14;
          return;
        }
        v6 = gzread(v5, buf, 0x2000u);
        if (v6 < 1)
          break;
        std::string::append(&v14, buf, v6);
      }
      if (v6 < 0)
      {
        errnum = 0;
        v7 = gzerror(v5, &errnum);
        if (errnum)
          break;
      }
    }
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Error while reading: %s (%d)", v8, v7, errnum);
    gzclose(v5);
    std::string::basic_string[abi:ne180100]<0>(v3, "");
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v14.__r_.__value_.__l.__data_);
  }
  else
  {
    if (*(char *)(v1 + 23) >= 0)
      v9 = v1;
    else
      v9 = *(_QWORD *)v1;
    v10 = __error();
    v11 = strerror(*v10);
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Unable to open file for reading: '%s' : %s", v12, v9, v11);
    std::string::basic_string[abi:ne180100]<0>(v3, "");
  }
}

void sub_1BF8E928C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL siri::dialogengine::WriteGzippedFile(std::string *a1, const void **a2)
{
  const char *v4;
  gzFile_s *v5;
  gzFile_s *v6;
  int v7;
  const void *v8;
  const void *v9;
  int v10;
  const char *v11;
  _BOOL8 v12;
  uint64_t *v13;
  int *v14;
  char *v15;
  const char *v16;
  std::string __p;

  siri::dialogengine::DirName(a1, (uint64_t)&__p);
  siri::dialogengine::CreateDir(&__p, 504);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if ((a1->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v4 = (const char *)a1;
  else
    v4 = (const char *)a1->__r_.__value_.__r.__words[0];
  v5 = gzopen(v4, "w");
  if (v5)
  {
    v6 = v5;
    v7 = *((char *)a2 + 23);
    if (v7 >= 0)
      v8 = a2;
    else
      v8 = *a2;
    if (v7 >= 0)
      v9 = (const void *)*((unsigned __int8 *)a2 + 23);
    else
      v9 = a2[1];
    v10 = gzwrite(v5, v8, v9);
    v12 = v9 == (const void *)v10;
    if (v9 != (const void *)v10)
      siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Write error.  Expected %zu bytes, wrote %zu", v11, v9, v10);
    gzclose(v6);
  }
  else
  {
    if ((a1->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v13 = (uint64_t *)a1;
    else
      v13 = (uint64_t *)a1->__r_.__value_.__r.__words[0];
    v14 = __error();
    v15 = strerror(*v14);
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Unable to open file for writing: '%s' : %s", v16, v13, v15);
    return 0;
  }
  return v12;
}

void sub_1BF8E93B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1BF8E94AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;

  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_1BF8E9588(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_1BF8E96D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, char a18)
{
  void *v18;
  void *v19;

  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  if (a15 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1BF8E98A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  void *v13;

  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a13);

  _Unwind_Resume(a1);
}

void sub_1BF8E9AAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  void *v5;
  uint64_t v7;
  va_list va;
  uint64_t v9;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)va1);

  _Unwind_Resume(a1);
}

void sub_1BF8E9CB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  va_list va;

  va_start(va, a7);

  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<siri::dialogengine::VariableObject>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E7936190;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<siri::dialogengine::VariableObject>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E7936190;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B8D890);
}

uint64_t std::__shared_ptr_emplace<siri::dialogengine::VariableObject>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

siri::dialogengine::VariableObject *_ZNSt3__115allocate_sharedB8ne180100IN4siri12dialogengine14VariableObjectENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(siri::dialogengine::VariableObject **a1)
{
  _QWORD *v2;
  siri::dialogengine::VariableObject *result;

  v2 = operator new(0x78uLL);
  v2[1] = 0;
  v2[2] = 0;
  *v2 = &off_1E7936190;
  result = siri::dialogengine::VariableObject::VariableObject((siri::dialogengine::VariableObject *)(v2 + 3));
  *a1 = result;
  a1[1] = (siri::dialogengine::VariableObject *)v2;
  return result;
}

void sub_1BF8E9D94(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void InitDefaultsscc_info_Separators_Separators_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Separators.pb.cc", a4);
  qword_1EF5845B0 = 0;
  unk_1EF5845B8 = 0;
  SnippetUI::_Separators_default_instance_ = (uint64_t)&off_1E792CCC8;
  dword_1EF5845C0 = 0;
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_Separators_default_instance_, v4);
}

void SnippetUI::Separators::~Separators(SnippetUI::Separators *this)
{
  *(_QWORD *)this = &off_1E792CCC8;
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  *(_QWORD *)this = &off_1E792CCC8;
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
  JUMPOUT(0x1C3B8D890);
}

{
  *(_QWORD *)this = &off_1E792CCC8;
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

uint64_t SnippetUI::Separators::New(SnippetUI::Separators *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Separators>(0);
}

uint64_t SnippetUI::Separators::New(SnippetUI::Separators *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Separators>(a2);
}

void SnippetUI::Separators::Clear(SnippetUI::Separators *this)
{
  google::protobuf::internal::InternalMetadataWithArena *v1;
  char v2;

  v2 = *((_BYTE *)this + 8);
  v1 = (SnippetUI::Separators *)((char *)this + 8);
  *((_QWORD *)v1 + 1) = 0;
  if ((v2 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v1);
}

uint64_t SnippetUI::Separators::IsInitialized(SnippetUI::Separators *this)
{
  return 1;
}

char *SnippetUI::Separators::ByteSizeLong(SnippetUI::Separators *this)
{
  int v1;
  uint64_t v2;
  int v3;
  uint64_t v4;

  v1 = *((_DWORD *)this + 4);
  if (v1)
  {
    if (v1 < 0)
      v2 = 11;
    else
      v2 = ((9 * (__clz(v1 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
  else
  {
    v2 = 0;
  }
  v3 = *((_DWORD *)this + 5);
  if (v3)
  {
    if (v3 < 0)
      v4 = 11;
    else
      v4 = ((9 * (__clz(v3 | 1) ^ 0x1F) + 73) >> 6) + 1;
    v2 += v4;
  }
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::Separators *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)v2, (_DWORD *)this + 6);
  *((_DWORD *)this + 6) = v2;
  return (char *)v2;
}

uint64_t SnippetUI::Separators::GetCachedSize(SnippetUI::Separators *this)
{
  return *((unsigned int *)this + 6);
}

google::protobuf::internal *SnippetUI::Separators::_InternalParse(SnippetUI::Separators *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  uint64_t *v5;
  google::protobuf::internal::ParseContext *v6;
  google::protobuf::internal *TagFallback;
  char *v8;
  google::protobuf::internal *v11;
  unint64_t v12;
  int v13;
  google::protobuf::internal *v14;
  unint64_t v15;
  int v16;
  google::protobuf::internal *v18;

  v18 = a2;
  v5 = (uint64_t *)((char *)this + 8);
  while (1)
  {
    while (1)
    {
      while (1)
      {
        if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v18, *((_DWORD *)a3 + 23)) & 1) != 0)return v18;
        TagFallback = (google::protobuf::internal *)((char *)v18 + 1);
        v8 = (char *)*(unsigned __int8 *)v18;
        if ((*(char *)v18 & 0x80000000) == 0)
          goto LABEL_6;
        v8 = (char *)(v8 + (*(unsigned __int8 *)TagFallback << 7) - 128);
        if ((*(char *)TagFallback & 0x80000000) == 0)
        {
          TagFallback = (google::protobuf::internal *)((char *)v18 + 2);
LABEL_6:
          v18 = TagFallback;
          goto LABEL_7;
        }
        TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v18, v8);
        v18 = TagFallback;
        if (!TagFallback)
          return TagFallback;
LABEL_7:
        if (v8 >> 3 != 2)
          break;
        if (v8 != 16)
          goto LABEL_12;
        v11 = (google::protobuf::internal *)((char *)TagFallback + 1);
        LODWORD(v12) = *(unsigned __int8 *)TagFallback;
        if ((*(char *)TagFallback & 0x80000000) == 0)
          goto LABEL_22;
        v13 = *(char *)v11;
        v12 = v12 + (v13 << 7) - 128;
        if ((v13 & 0x80000000) == 0)
        {
          v11 = (google::protobuf::internal *)((char *)TagFallback + 2);
LABEL_22:
          v18 = v11;
          goto LABEL_23;
        }
        v18 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(TagFallback, v12);
        if (!v18)
          return 0;
LABEL_23:
        *((_DWORD *)this + 5) = v12;
      }
      if (v8 >> 3 != 1 || v8 != 8)
        break;
      v14 = (google::protobuf::internal *)((char *)TagFallback + 1);
      LODWORD(v15) = *(unsigned __int8 *)TagFallback;
      if ((*(char *)TagFallback & 0x80000000) == 0)
        goto LABEL_27;
      v16 = *(char *)v14;
      v15 = v15 + (v16 << 7) - 128;
      if ((v16 & 0x80000000) == 0)
      {
        v14 = (google::protobuf::internal *)((char *)TagFallback + 2);
LABEL_27:
        v18 = v14;
        goto LABEL_28;
      }
      v18 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(TagFallback, v15);
      if (!v18)
        return 0;
LABEL_28:
      *((_DWORD *)this + 4) = v15;
    }
LABEL_12:
    if (!(_DWORD)v8 || (v8 & 7) == 4)
      break;
    v18 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v8, v5, TagFallback, a3, v6);
    if (!v18)
      return 0;
  }
  *((_DWORD *)a3 + 20) = (_DWORD)v8 - 1;
  return TagFallback;
}

const google::protobuf::UnknownFieldSet *SnippetUI::Separators::InternalSerializeWithCachedSizesToArray(SnippetUI::Separators *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  unsigned int v6;
  unint64_t v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unint64_t v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;

  v6 = *((_DWORD *)this + 4);
  if (v6)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
    {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      v6 = *((_DWORD *)this + 4);
    }
    *a2 = 8;
    if (v6 > 0x7F)
    {
      a2[1] = v6 | 0x80;
      v7 = (unint64_t)(int)v6 >> 7;
      if (v6 >> 14)
      {
        v8 = (unsigned __int8 *)(a2 + 2);
        do
        {
          v9 = v8;
          *v8++ = v7 | 0x80;
          v10 = v7 >> 7;
          v11 = v7 >> 14;
          v7 >>= 7;
        }
        while (v11);
        a2 = (char *)(v9 + 2);
        *v8 = v10;
      }
      else
      {
        a2[2] = v7;
        a2 += 3;
      }
    }
    else
    {
      a2[1] = v6;
      a2 += 2;
    }
  }
  v12 = *((_DWORD *)this + 5);
  if (v12)
  {
    if ((unint64_t)a2 >= *(_QWORD *)a3)
    {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      v12 = *((_DWORD *)this + 5);
    }
    *a2 = 16;
    if (v12 > 0x7F)
    {
      a2[1] = v12 | 0x80;
      v13 = (unint64_t)(int)v12 >> 7;
      if (v12 >> 14)
      {
        v14 = (unsigned __int8 *)(a2 + 2);
        do
        {
          v15 = v14;
          *v14++ = v13 | 0x80;
          v16 = v13 >> 7;
          v17 = v13 >> 14;
          v13 >>= 7;
        }
        while (v17);
        a2 = (char *)(v15 + 2);
        *v14 = v16;
      }
      else
      {
        a2[2] = v13;
        a2 += 3;
      }
    }
    else
    {
      a2[1] = v12;
      a2 += 2;
    }
  }
  v18 = *((_QWORD *)this + 1);
  if ((v18 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v18 & 0xFFFFFFFFFFFFFFFELL), (const google::protobuf::UnknownFieldSet *)a2, a3, a4);
  else
    return (const google::protobuf::UnknownFieldSet *)a2;
}

void SnippetUI::Separators::CopyFrom(SnippetUI::Separators *this, const google::protobuf::Message *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  char v5;

  if (a2 != this)
  {
    v5 = *((_BYTE *)this + 8);
    v4 = (SnippetUI::Separators *)((char *)this + 8);
    *((_QWORD *)v4 + 1) = 0;
    if ((v5 & 1) != 0)
      google::protobuf::internal::InternalMetadataWithArena::DoClear(v4);
    SnippetUI::Separators::MergeFrom(this, a2);
  }
}

void SnippetUI::Separators::MergeFrom(SnippetUI::Separators *this, const google::protobuf::Message *lpsrc)
{
  std::string *v4;
  const SnippetUI::Separators *v5;
  google::protobuf::Message *v6;
  char v7;
  std::string v8[2];

  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Separators.pb.cc", 264);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5)
    SnippetUI::Separators::MergeFrom(this, v5);
  else
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
}

void sub_1BF8EA30C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::Separators::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 24) = a2;
  return this;
}

uint64_t SnippetUI::Separators::GetMetadata(SnippetUI::Separators *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_Separators_2eproto);
  return file_level_metadata_Separators_2eproto;
}

uint64_t *SnippetUI::Separators::default_instance(SnippetUI::Separators *this)
{
  if (atomic_load(scc_info_Separators_Separators_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Separators_Separators_2eproto);
  return &SnippetUI::_Separators_default_instance_;
}

void SnippetUI::Separators::MergeFrom(SnippetUI::Separators *this, const SnippetUI::Separators *a2)
{
  std::string *v4;
  uint64_t v5;
  int v6;
  int v7;
  char v8;
  std::string v9[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v9, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Separators.pb.cc", 279);
    v4 = google::protobuf::internal::LogMessage::operator<<(v9, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v8, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v9[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::Separators *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  v6 = *((_DWORD *)a2 + 4);
  if (v6)
    *((_DWORD *)this + 4) = v6;
  v7 = *((_DWORD *)a2 + 5);
  if (v7)
    *((_DWORD *)this + 5) = v7;
}

void sub_1BF8EA424(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Separators>(google::protobuf::internal::ArenaImpl *this)
{
  uint64_t result;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    result = (uint64_t)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x20uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::Separators>);
  }
  else
  {
    result = operator new();
  }
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = &off_1E792CCC8;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::Separators>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t SnippetUI::SeparatorStyle_descriptor(SnippetUI *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_Separators_2eproto);
  return file_level_enum_descriptors_Separators_2eproto;
}

BOOL SnippetUI::SeparatorStyle_IsValid(SnippetUI *this)
{
  return this < 7;
}

uint64_t SnippetUI::Separators::Separators(uint64_t this)
{
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)this = &off_1E792CCC8;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

{
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)this = &off_1E792CCC8;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

SnippetUI::Separators *SnippetUI::Separators::Separators(SnippetUI::Separators *this, const SnippetUI::Separators *a2)
{
  uint64_t v4;

  *(_QWORD *)this = &off_1E792CCC8;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 6) = 0;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::Separators *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  return this;
}

void sub_1BF8EA590(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::Separators::CopyFrom(SnippetUI::Separators *this, const SnippetUI::Separators *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  char v5;

  if (a2 != this)
  {
    v5 = *((_BYTE *)this + 8);
    v4 = (SnippetUI::Separators *)((char *)this + 8);
    *((_QWORD *)v4 + 1) = 0;
    if ((v5 & 1) != 0)
      google::protobuf::internal::InternalMetadataWithArena::DoClear(v4);
    SnippetUI::Separators::MergeFrom(this, a2);
  }
}

void SnippetUI::Separators::InternalSwap(SnippetUI::Separators *this, SnippetUI::Separators *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  uint64_t v5;
  google::protobuf::UnknownFieldSet *v6;
  int v7;
  int v8;
  google::protobuf::UnknownFieldSet *v9;

  v4 = (SnippetUI::Separators *)((char *)this + 8);
  v5 = *((_QWORD *)a2 + 1);
  if ((*((_BYTE *)this + 8) & 1) != 0)
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v6 = v9;
      goto LABEL_6;
    }
  }
  else if ((v5 & 1) == 0)
  {
    goto LABEL_7;
  }
  v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
  google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
LABEL_7:
  v7 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v7;
  v8 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v8;
}

void siri::dialogengine::VariableArray::~VariableArray(siri::dialogengine::VariableArray *this)
{
  siri::dialogengine::VariableArray::~VariableArray(this);
  JUMPOUT(0x1C3B8D890);
}

{
  uint64_t v2;
  uint64_t v3;
  void **v4;

  *(_QWORD *)this = &off_1E792CDA0;
  v2 = *((_QWORD *)this + 9);
  v3 = *((_QWORD *)this + 10);
  while (v2 != v3)
  {
    if (*(siri::dialogengine::VariableArray **)(*(_QWORD *)v2 + 56) == this)
      *(_QWORD *)(*(_QWORD *)v2 + 56) = 0;
    v2 += 16;
  }
  v4 = (void **)((char *)this + 72);
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100](&v4);
  siri::dialogengine::Variable::~Variable((void **)this);
}

uint64_t siri::dialogengine::VariableArray::Accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, a1);
}

BOOL siri::dialogengine::VariableArray::IsEmpty(siri::dialogengine::VariableArray *this)
{
  return *((_QWORD *)this + 9) == *((_QWORD *)this + 10);
}

void siri::dialogengine::VariableArray::ToString(siri::dialogengine::VariableArray *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::vector<std::string>::pointer end;
  __int128 v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  std::string *v13;
  std::string *v14;
  __int128 v15;
  std::string *v16;
  std::vector<std::string>::pointer v17;
  __int128 v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  std::string *v22;
  std::string *v23;
  __int128 v24;
  std::string *v25;
  unint64_t *v26;
  unint64_t v27;
  void *v29[2];
  std::string v30;
  std::string v31;
  std::string v32;
  void *v33;
  char v34;
  void *v35;
  char v36;
  void *v37;
  char v38;
  void *v39;
  char v40;
  void *__p;
  char v42;
  std::vector<std::string> v43;
  std::vector<std::string> v44;
  std::__split_buffer<std::string> __v;

  memset(&v44, 0, sizeof(v44));
  memset(&v43, 0, sizeof(v43));
  v2 = *((_QWORD *)this + 9);
  v3 = *((_QWORD *)this + 10);
  if (v2 == v3)
  {
LABEL_58:
    std::string::basic_string[abi:ne180100]<0>(&__v, ", ");
    siri::dialogengine::StringJoinInternal<std::vector<std::string>>((uint64_t)&v31, (uint64_t)v44.__begin_, (uint64_t)v44.__end_, (uint64_t)&__v);
    std::string::basic_string[abi:ne180100]<0>(v29, ", ");
    siri::dialogengine::StringJoinInternal<std::vector<std::string>>((uint64_t)&v30, (uint64_t)v43.__begin_, (uint64_t)v43.__end_, (uint64_t)v29);
    siri::dialogengine::SpeakableString::SpeakableString(a2, &v31, &v30);
  }
  while (1)
  {
    v4 = *(void **)v2;
    v5 = *(std::__shared_weak_count **)(v2 + 8);
    v29[0] = *(void **)v2;
    v29[1] = v5;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
    }
    (*(void (**)(std::string *__return_ptr))(*(_QWORD *)v4 + 48))(&v31);
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v30, v31.__r_.__value_.__l.__data_, v31.__r_.__value_.__l.__size_);
    else
      v30 = v31;
    end = v44.__end_;
    if (v44.__end_ >= v44.__end_cap_.__value_)
    {
      v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)v44.__end_ - (char *)v44.__begin_) >> 3);
      v11 = v10 + 1;
      if (v10 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<BOOL>::__throw_length_error[abi:ne180100]();
      if (0x5555555555555556 * (((char *)v44.__end_cap_.__value_ - (char *)v44.__begin_) >> 3) > v11)
        v11 = 0x5555555555555556 * (((char *)v44.__end_cap_.__value_ - (char *)v44.__begin_) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v44.__end_cap_.__value_ - (char *)v44.__begin_) >> 3) >= 0x555555555555555)
        v12 = 0xAAAAAAAAAAAAAAALL;
      else
        v12 = v11;
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v44.__end_cap_;
      if (v12)
        v13 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v44.__end_cap_, v12);
      else
        v13 = 0;
      v14 = v13 + v10;
      __v.__first_ = v13;
      __v.__begin_ = v14;
      __v.__end_cap_.__value_ = &v13[v12];
      v15 = *(_OWORD *)&v30.__r_.__value_.__l.__data_;
      v14->__r_.__value_.__r.__words[2] = v30.__r_.__value_.__r.__words[2];
      *(_OWORD *)&v14->__r_.__value_.__l.__data_ = v15;
      memset(&v30, 0, sizeof(v30));
      __v.__end_ = v14 + 1;
      std::vector<std::string>::__swap_out_circular_buffer(&v44, &__v);
      v16 = v44.__end_;
      std::__split_buffer<std::string>::~__split_buffer(&__v);
      v44.__end_ = v16;
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v30.__r_.__value_.__l.__data_);
    }
    else
    {
      v9 = *(_OWORD *)&v30.__r_.__value_.__l.__data_;
      v44.__end_->__r_.__value_.__r.__words[2] = v30.__r_.__value_.__r.__words[2];
      *(_OWORD *)&end->__r_.__value_.__l.__data_ = v9;
      v44.__end_ = end + 1;
    }
    if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v30, v32.__r_.__value_.__l.__data_, v32.__r_.__value_.__l.__size_);
    else
      v30 = v32;
    v17 = v43.__end_;
    if (v43.__end_ >= v43.__end_cap_.__value_)
    {
      v19 = 0xAAAAAAAAAAAAAAABLL * (((char *)v43.__end_ - (char *)v43.__begin_) >> 3);
      v20 = v19 + 1;
      if (v19 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<BOOL>::__throw_length_error[abi:ne180100]();
      if (0x5555555555555556 * (((char *)v43.__end_cap_.__value_ - (char *)v43.__begin_) >> 3) > v20)
        v20 = 0x5555555555555556 * (((char *)v43.__end_cap_.__value_ - (char *)v43.__begin_) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v43.__end_cap_.__value_ - (char *)v43.__begin_) >> 3) >= 0x555555555555555)
        v21 = 0xAAAAAAAAAAAAAAALL;
      else
        v21 = v20;
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v43.__end_cap_;
      if (v21)
        v22 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v43.__end_cap_, v21);
      else
        v22 = 0;
      v23 = v22 + v19;
      __v.__first_ = v22;
      __v.__begin_ = v23;
      __v.__end_cap_.__value_ = &v22[v21];
      v24 = *(_OWORD *)&v30.__r_.__value_.__l.__data_;
      v23->__r_.__value_.__r.__words[2] = v30.__r_.__value_.__r.__words[2];
      *(_OWORD *)&v23->__r_.__value_.__l.__data_ = v24;
      memset(&v30, 0, sizeof(v30));
      __v.__end_ = v23 + 1;
      std::vector<std::string>::__swap_out_circular_buffer(&v43, &__v);
      v25 = v43.__end_;
      std::__split_buffer<std::string>::~__split_buffer(&__v);
      v43.__end_ = v25;
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v30.__r_.__value_.__l.__data_);
    }
    else
    {
      v18 = *(_OWORD *)&v30.__r_.__value_.__l.__data_;
      v43.__end_->__r_.__value_.__r.__words[2] = v30.__r_.__value_.__r.__words[2];
      *(_OWORD *)&v17->__r_.__value_.__l.__data_ = v18;
      v43.__end_ = v17 + 1;
    }
    if (v42 < 0)
      operator delete(__p);
    if (v40 < 0)
      operator delete(v39);
    if (v38 < 0)
      operator delete(v37);
    if (v36 < 0)
      operator delete(v35);
    if (v34 < 0)
      operator delete(v33);
    if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v32.__r_.__value_.__l.__data_);
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v31.__r_.__value_.__l.__data_);
      if (v5)
      {
LABEL_53:
        v26 = (unint64_t *)&v5->__shared_owners_;
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
    }
    else if (v5)
    {
      goto LABEL_53;
    }
    v2 += 16;
    if (v2 == v3)
      goto LABEL_58;
  }
}

void sub_1BF8EAB30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  if (a27 < 0)
    operator delete(a22);
  if (*(char *)(v27 - 105) < 0)
    operator delete(*(void **)(v27 - 128));
  a22 = (void *)(v27 - 176);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
  a22 = (void *)(v27 - 152);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
  _Unwind_Resume(a1);
}

void siri::dialogengine::VariableArray::ToString(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v8;
  void *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::vector<std::string>::pointer end;
  __int128 v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  std::string *v17;
  std::string *v18;
  __int128 v19;
  std::string *v20;
  std::vector<std::string>::pointer v21;
  __int128 v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  std::string *v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  unint64_t *v30;
  unint64_t v31;
  void *v33[2];
  std::string v34;
  std::string v35;
  std::string v36;
  void *v37;
  char v38;
  void *v39;
  char v40;
  void *v41;
  char v42;
  void *v43;
  char v44;
  void *__p;
  char v46;
  std::vector<std::string> v47;
  std::vector<std::string> v48;
  std::__split_buffer<std::string> __v;

  memset(&v48, 0, sizeof(v48));
  memset(&v47, 0, sizeof(v47));
  v4 = *(_QWORD *)(a1 + 72);
  v5 = *(_QWORD *)(a1 + 80);
  if (v4 == v5)
  {
LABEL_60:
    std::string::basic_string[abi:ne180100]<0>(&__v, ", ");
    siri::dialogengine::StringJoinInternal<std::vector<std::string>>((uint64_t)&v35, (uint64_t)v48.__begin_, (uint64_t)v48.__end_, (uint64_t)&__v);
    std::string::basic_string[abi:ne180100]<0>(v33, ", ");
    siri::dialogengine::StringJoinInternal<std::vector<std::string>>((uint64_t)&v34, (uint64_t)v47.__begin_, (uint64_t)v47.__end_, (uint64_t)v33);
    siri::dialogengine::SpeakableString::SpeakableString(a4, &v35, &v34);
  }
  while (1)
  {
    v9 = *(void **)v4;
    v8 = *(std::__shared_weak_count **)(v4 + 8);
    v33[0] = *(void **)v4;
    v33[1] = v8;
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
    }
    siri::dialogengine::GetArrayElementType(a3, (std::string *)&__v);
    (*(void (**)(std::string *__return_ptr, void *, uint64_t, std::__split_buffer<std::string> *))(*(_QWORD *)v9 + 56))(&v35, v9, a2, &__v);
    if (SHIBYTE(__v.__end_) < 0)
      operator delete(__v.__first_);
    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v34, v35.__r_.__value_.__l.__data_, v35.__r_.__value_.__l.__size_);
    else
      v34 = v35;
    end = v48.__end_;
    if (v48.__end_ >= v48.__end_cap_.__value_)
    {
      v14 = 0xAAAAAAAAAAAAAAABLL * (((char *)v48.__end_ - (char *)v48.__begin_) >> 3);
      v15 = v14 + 1;
      if (v14 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<BOOL>::__throw_length_error[abi:ne180100]();
      if (0x5555555555555556 * (((char *)v48.__end_cap_.__value_ - (char *)v48.__begin_) >> 3) > v15)
        v15 = 0x5555555555555556 * (((char *)v48.__end_cap_.__value_ - (char *)v48.__begin_) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v48.__end_cap_.__value_ - (char *)v48.__begin_) >> 3) >= 0x555555555555555)
        v16 = 0xAAAAAAAAAAAAAAALL;
      else
        v16 = v15;
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v48.__end_cap_;
      if (v16)
        v17 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v48.__end_cap_, v16);
      else
        v17 = 0;
      v18 = v17 + v14;
      __v.__first_ = v17;
      __v.__begin_ = v18;
      __v.__end_cap_.__value_ = &v17[v16];
      v19 = *(_OWORD *)&v34.__r_.__value_.__l.__data_;
      v18->__r_.__value_.__r.__words[2] = v34.__r_.__value_.__r.__words[2];
      *(_OWORD *)&v18->__r_.__value_.__l.__data_ = v19;
      memset(&v34, 0, sizeof(v34));
      __v.__end_ = v18 + 1;
      std::vector<std::string>::__swap_out_circular_buffer(&v48, &__v);
      v20 = v48.__end_;
      std::__split_buffer<std::string>::~__split_buffer(&__v);
      v48.__end_ = v20;
      if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v34.__r_.__value_.__l.__data_);
    }
    else
    {
      v13 = *(_OWORD *)&v34.__r_.__value_.__l.__data_;
      v48.__end_->__r_.__value_.__r.__words[2] = v34.__r_.__value_.__r.__words[2];
      *(_OWORD *)&end->__r_.__value_.__l.__data_ = v13;
      v48.__end_ = end + 1;
    }
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v34, v36.__r_.__value_.__l.__data_, v36.__r_.__value_.__l.__size_);
    else
      v34 = v36;
    v21 = v47.__end_;
    if (v47.__end_ >= v47.__end_cap_.__value_)
    {
      v23 = 0xAAAAAAAAAAAAAAABLL * (((char *)v47.__end_ - (char *)v47.__begin_) >> 3);
      v24 = v23 + 1;
      if (v23 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<BOOL>::__throw_length_error[abi:ne180100]();
      if (0x5555555555555556 * (((char *)v47.__end_cap_.__value_ - (char *)v47.__begin_) >> 3) > v24)
        v24 = 0x5555555555555556 * (((char *)v47.__end_cap_.__value_ - (char *)v47.__begin_) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v47.__end_cap_.__value_ - (char *)v47.__begin_) >> 3) >= 0x555555555555555)
        v25 = 0xAAAAAAAAAAAAAAALL;
      else
        v25 = v24;
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v47.__end_cap_;
      if (v25)
        v26 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v47.__end_cap_, v25);
      else
        v26 = 0;
      v27 = v26 + v23;
      __v.__first_ = v26;
      __v.__begin_ = v27;
      __v.__end_cap_.__value_ = &v26[v25];
      v28 = *(_OWORD *)&v34.__r_.__value_.__l.__data_;
      v27->__r_.__value_.__r.__words[2] = v34.__r_.__value_.__r.__words[2];
      *(_OWORD *)&v27->__r_.__value_.__l.__data_ = v28;
      memset(&v34, 0, sizeof(v34));
      __v.__end_ = v27 + 1;
      std::vector<std::string>::__swap_out_circular_buffer(&v47, &__v);
      v29 = v47.__end_;
      std::__split_buffer<std::string>::~__split_buffer(&__v);
      v47.__end_ = v29;
      if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v34.__r_.__value_.__l.__data_);
    }
    else
    {
      v22 = *(_OWORD *)&v34.__r_.__value_.__l.__data_;
      v47.__end_->__r_.__value_.__r.__words[2] = v34.__r_.__value_.__r.__words[2];
      *(_OWORD *)&v21->__r_.__value_.__l.__data_ = v22;
      v47.__end_ = v21 + 1;
    }
    if (v46 < 0)
      operator delete(__p);
    if (v44 < 0)
      operator delete(v43);
    if (v42 < 0)
      operator delete(v41);
    if (v40 < 0)
      operator delete(v39);
    if (v38 < 0)
      operator delete(v37);
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v36.__r_.__value_.__l.__data_);
    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v35.__r_.__value_.__l.__data_);
      if (v8)
      {
LABEL_55:
        v30 = (unint64_t *)&v8->__shared_owners_;
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 - 1, v30));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
    }
    else if (v8)
    {
      goto LABEL_55;
    }
    v4 += 16;
    if (v4 == v5)
      goto LABEL_60;
  }
}

void sub_1BF8EB090(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  uint64_t v29;

  if (a23 < 0)
    operator delete(__p);
  if (a17 < 0)
    operator delete(a12);
  if (a29 < 0)
    operator delete(a24);
  if (*(char *)(v29 - 105) < 0)
    operator delete(*(void **)(v29 - 128));
  a24 = (void *)(v29 - 176);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);
  a24 = (void *)(v29 - 152);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);
  _Unwind_Resume(a1);
}

siri::dialogengine::VariableArray *siri::dialogengine::VariableArray::VariableArray(siri::dialogengine::VariableArray *this)
{
  std::string __p;
  std::string v4;

  std::string::basic_string[abi:ne180100]<0>(&v4, "");
  std::string::basic_string[abi:ne180100]<0>(&__p, (char *)siri::dialogengine::TYPE_ARRAY);
  siri::dialogengine::Variable::Variable((uint64_t)this, &v4, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v4.__r_.__value_.__l.__data_);
  *(_QWORD *)this = &off_1E792CDA0;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 9) = 0;
  return this;
}

void sub_1BF8EB28C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

_QWORD *siri::dialogengine::VariableArray::VariableArray(_QWORD *a1, const std::string *a2)
{
  std::string __p;

  std::string::basic_string[abi:ne180100]<0>(&__p, (char *)siri::dialogengine::TYPE_ARRAY);
  siri::dialogengine::Variable::Variable((uint64_t)a1, a2, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *a1 = &off_1E792CDA0;
  a1[10] = 0;
  a1[11] = 0;
  a1[9] = 0;
  return a1;
}

void sub_1BF8EB334(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *siri::dialogengine::VariableArray::AddItem(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  __int128 v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  char *v24;
  __int128 v25;
  int64x2_t v26;
  uint64_t v27;
  uint64_t v28;
  int64x2_t v29;
  uint64_t v30;
  _QWORD *v31;

  if (*a2)
  {
    v3 = result;
    v4 = result + 11;
    v5 = result[11];
    v6 = (_QWORD *)result[10];
    if ((unint64_t)v6 >= v5)
    {
      v11 = result[9];
      v12 = ((uint64_t)v6 - v11) >> 4;
      v13 = v12 + 1;
      if ((unint64_t)(v12 + 1) >> 60)
        std::vector<BOOL>::__throw_length_error[abi:ne180100]();
      v14 = v5 - v11;
      if (v14 >> 3 > v13)
        v13 = v14 >> 3;
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
        v15 = 0xFFFFFFFFFFFFFFFLL;
      else
        v15 = v13;
      v31 = v4;
      v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>>(v15);
      v18 = &v16[16 * v12];
      v19 = *(_OWORD *)a2;
      *(_OWORD *)v18 = *(_OWORD *)a2;
      if (*((_QWORD *)&v19 + 1))
      {
        v20 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
        do
          v21 = __ldxr(v20);
        while (__stxr(v21 + 1, v20));
      }
      v23 = (_QWORD *)v3[9];
      v22 = (_QWORD *)v3[10];
      if (v22 == v23)
      {
        v26 = vdupq_n_s64((unint64_t)v22);
        v24 = &v16[16 * v12];
      }
      else
      {
        v24 = &v16[16 * v12];
        do
        {
          v25 = *((_OWORD *)v22 - 1);
          v22 -= 2;
          *((_OWORD *)v24 - 1) = v25;
          v24 -= 16;
          *v22 = 0;
          v22[1] = 0;
        }
        while (v22 != v23);
        v26 = *(int64x2_t *)(v3 + 9);
      }
      v10 = v18 + 16;
      v3[9] = v24;
      v3[10] = v18 + 16;
      v29 = v26;
      v27 = v3[11];
      v3[11] = &v16[16 * v17];
      v30 = v27;
      v28 = v26.i64[0];
      result = (_QWORD *)std::__split_buffer<std::shared_ptr<siri::dialogengine::ChunkText>>::~__split_buffer((uint64_t)&v28);
    }
    else
    {
      *v6 = *a2;
      v7 = a2[1];
      v6[1] = v7;
      if (v7)
      {
        v8 = (unint64_t *)(v7 + 8);
        do
          v9 = __ldxr(v8);
        while (__stxr(v9 + 1, v8));
      }
      v10 = v6 + 2;
    }
    v3[10] = v10;
    *(_QWORD *)(*a2 + 56) = v3;
  }
  return result;
}

void siri::dialogengine::VariableArray::SetItems(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  _QWORD v14[2];

  v5 = a1[9];
  v4 = a1[10];
  if (v5 != v4)
  {
    v6 = v5;
    do
    {
      if (*(_QWORD **)(*(_QWORD *)v6 + 56) == a1)
        *(_QWORD *)(*(_QWORD *)v6 + 56) = 0;
      v6 += 16;
    }
    while (v6 != v4);
    do
      v4 = std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](v4 - 16);
    while (v4 != v5);
  }
  a1[10] = v5;
  v7 = *(_QWORD **)a2;
  v8 = *(_QWORD **)(a2 + 8);
  while (v7 != v8)
  {
    v9 = (std::__shared_weak_count *)v7[1];
    v14[0] = *v7;
    v14[1] = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
    }
    siri::dialogengine::VariableArray::AddItem(a1, v14);
    if (v9)
    {
      v12 = (unint64_t *)&v9->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v7 += 2;
  }
}

void sub_1BF8EB588(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::VariableArray::GetItem@<X0>(uint64_t this@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  __int128 v4;
  unint64_t *v5;
  unint64_t v6;

  v3 = *(_QWORD *)(this + 72);
  if (a2 >= (*(_QWORD *)(this + 80) - v3) >> 4)
  {
    *a3 = 0;
    a3[1] = 0;
  }
  else
  {
    v4 = *(_OWORD *)(v3 + 16 * a2);
    *(_OWORD *)a3 = v4;
    if (*((_QWORD *)&v4 + 1))
    {
      v5 = (unint64_t *)(*((_QWORD *)&v4 + 1) + 8);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
    }
  }
  return this;
}

uint64_t siri::dialogengine::VariableArray::GetLength(siri::dialogengine::VariableArray *this)
{
  return (uint64_t)(*((_QWORD *)this + 10) - *((_QWORD *)this + 9)) >> 4;
}

void siri::dialogengine::VariableArray::GetConcreteType(siri::dialogengine::VariableArray *this@<X0>, siri::dialogengine::Context *a2@<X1>, uint64_t a3@<X8>)
{
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t Parameter;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::string __p;
  std::string v15;
  uint64_t v16;
  std::__shared_weak_count *v17;

  std::string::basic_string[abi:ne180100]<0>((_QWORD *)a3, siri::dialogengine::TYPE_UNKNOWN);
  if (!a2)
    return;
  v7 = *((_QWORD *)a2 + 63);
  v6 = (std::__shared_weak_count *)*((_QWORD *)a2 + 64);
  v16 = v7;
  v17 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  if (v7)
  {
    if (*((char *)this + 31) < 0)
      std::string::__init_copy_ctor_external(&v15, *((const std::string::value_type **)this + 1), *((_QWORD *)this + 2));
    else
      v15 = *(std::string *)((char *)this + 8);
    Parameter = siri::dialogengine::File::GetParameter(v7, (unsigned __int8 **)&v15);
    v11 = Parameter;
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v15.__r_.__value_.__l.__data_);
      if (!v11)
        goto LABEL_20;
    }
    else if (!Parameter)
    {
      goto LABEL_20;
    }
    if (*(char *)(v11 + 55) < 0)
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v11 + 32), *(_QWORD *)(v11 + 40));
    else
      __p = *(std::string *)(v11 + 32);
    siri::dialogengine::GetArrayElementType((uint64_t)&__p, &v15);
    if (*(char *)(a3 + 23) < 0)
      operator delete(*(void **)a3);
    *(std::string *)a3 = v15;
    *((_BYTE *)&v15.__r_.__value_.__s + 23) = 0;
    v15.__r_.__value_.__s.__data_[0] = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
LABEL_20:
  if (v6)
  {
    v12 = (unint64_t *)&v6->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1BF8EB754(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;
  uint64_t v22;

  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](v22 - 48);
  if (*(char *)(v21 + 23) < 0)
    operator delete(*(void **)v21);
  _Unwind_Resume(a1);
}

void siri::dialogengine::VariableArray::SemanticConceptsToVariableArray(siri::dialogengine::VariableArray *this@<X0>, siri::dialogengine::Context *a2@<X1>, siri::dialogengine::FormatAttributes *a3@<X2>, char **a4@<X8>)
{
  uint64_t v5;
  unint64_t v9;
  std::string *v10;
  __n128 v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::string *v17;
  _QWORD *v18;
  __int128 v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  __int128 v33;
  int64x2_t v34;
  char *v35;
  unsigned __int8 *v36;
  __n128 v37;
  __int128 v38;
  std::string v39;
  __int128 v40;
  __int128 v41;
  std::string __p;
  void *v43;
  char v44;
  void *v45;
  char v46;
  void *v47;
  char v48;
  void *v49;
  char v50;
  void *v51;
  char v52;
  void *v53;
  char v54;
  std::string v55;
  std::string v56;
  void *v57;
  char v58;
  void *v59;
  char v60;
  void *v61;
  char v62;
  void *v63;
  char v64;
  void *v65;
  char v66;
  void *v67;
  char v68;
  std::string v69;
  char *v70;
  _QWORD *v71;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v5 = *((_QWORD *)this + 9);
  if (*((_QWORD *)this + 10) != v5)
  {
    v9 = 0;
    v10 = (std::string *)((char *)a3 + 296);
    v36 = (unsigned __int8 *)a3 + 320;
    do
    {
      v11 = *(__n128 *)(v5 + 16 * v9);
      *(__n128 *)&v69.__r_.__value_.__l.__data_ = v11;
      v37 = v11;
      v12 = (std::__shared_weak_count *)v11.n128_u64[1];
      if (v11.n128_u64[1])
      {
        v13 = (unint64_t *)(v11.n128_u64[1] + 8);
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, siri::dialogengine::TYPE_STRING[0]);
      (*(void (**)(std::string *__return_ptr, unint64_t, siri::dialogengine::Context *, std::string *, __n128))(*(_QWORD *)v37.n128_u64[0] + 56))(&v56, v37.n128_u64[0], a2, &__p, v37);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if (v12)
        {
LABEL_10:
          p_shared_owners = (unint64_t *)&v12->__shared_owners_;
          do
            v16 = __ldaxr(p_shared_owners);
          while (__stlxr(v16 - 1, p_shared_owners));
          if (!v16)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
      }
      else if (v12)
      {
        goto LABEL_10;
      }
      memset(&v55, 0, sizeof(v55));
      if (!*((_BYTE *)a3 + 72))
      {
        siri::dialogengine::SemanticFeatureConstraint::FromString((uint64_t)a2, v36, (uint64_t *)&__p);
        std::vector<siri::dialogengine::SemanticFeatureConstraint>::__vdeallocate((void **)&v55.__r_.__value_.__l.__data_);
        v55 = __p;
        memset(&__p, 0, sizeof(__p));
        v69.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
        std::vector<siri::dialogengine::SemanticFeatureConstraint>::__destroy_vector::operator()[abi:ne180100]((void ***)&v69);
      }
      if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v69, v56.__r_.__value_.__l.__data_, v56.__r_.__value_.__l.__size_);
      else
        v69 = v56;
      siri::dialogengine::ApplySemanticConcept(a2, v10, &v69, (__int128 **)&v55, &__p);
      if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v69.__r_.__value_.__l.__data_);
      v17 = (std::string *)operator new();
      std::string::basic_string[abi:ne180100]<0>(&v39, "");
      siri::dialogengine::VariableString::VariableString(v17, &v39, (const siri::dialogengine::SpeakableString *)&__p);
      *(_QWORD *)&v40 = v17;
      v18 = (_QWORD *)operator new();
      *v18 = &off_1E7937B88;
      v18[1] = 0;
      v18[2] = 0;
      v18[3] = v17;
      *((_QWORD *)&v40 + 1) = v18;
      v19 = v40;
      v41 = v40;
      v40 = 0uLL;
      v21 = a4[1];
      v20 = (unint64_t)a4[2];
      if ((unint64_t)v21 >= v20)
      {
        v38 = v19;
        v23 = (v21 - *a4) >> 4;
        if ((unint64_t)(v23 + 1) >> 60)
          std::vector<BOOL>::__throw_length_error[abi:ne180100]();
        v24 = v20 - (_QWORD)*a4;
        v25 = v24 >> 3;
        if (v24 >> 3 <= (unint64_t)(v23 + 1))
          v25 = v23 + 1;
        if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF0)
          v26 = 0xFFFFFFFFFFFFFFFLL;
        else
          v26 = v25;
        v71 = a4 + 2;
        v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>>(v26);
        v29 = &v27[16 * v23];
        *(_OWORD *)v29 = v38;
        v41 = 0uLL;
        v31 = *a4;
        v30 = a4[1];
        if (v30 == *a4)
        {
          v34 = vdupq_n_s64((unint64_t)v30);
          v32 = &v27[16 * v23];
        }
        else
        {
          v32 = &v27[16 * v23];
          do
          {
            v33 = *((_OWORD *)v30 - 1);
            v30 -= 16;
            *((_OWORD *)v32 - 1) = v33;
            v32 -= 16;
            *(_QWORD *)v30 = 0;
            *((_QWORD *)v30 + 1) = 0;
          }
          while (v30 != v31);
          v34 = *(int64x2_t *)a4;
        }
        v22 = v29 + 16;
        *a4 = v32;
        a4[1] = v29 + 16;
        *(int64x2_t *)&v69.__r_.__value_.__r.__words[1] = v34;
        v35 = a4[2];
        a4[2] = &v27[16 * v28];
        v70 = v35;
        v69.__r_.__value_.__r.__words[0] = v34.i64[0];
        std::__split_buffer<std::shared_ptr<siri::dialogengine::ChunkText>>::~__split_buffer((uint64_t)&v69);
      }
      else
      {
        *(_OWORD *)v21 = v19;
        v22 = v21 + 16;
        v41 = 0uLL;
      }
      a4[1] = v22;
      if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v39.__r_.__value_.__l.__data_);
      if (v54 < 0)
        operator delete(v53);
      if (v52 < 0)
        operator delete(v51);
      if (v50 < 0)
        operator delete(v49);
      if (v48 < 0)
        operator delete(v47);
      if (v46 < 0)
        operator delete(v45);
      if (v44 < 0)
        operator delete(v43);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v55;
      std::vector<siri::dialogengine::SemanticFeatureConstraint>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      if (v68 < 0)
        operator delete(v67);
      if (v66 < 0)
        operator delete(v65);
      if (v64 < 0)
        operator delete(v63);
      if (v62 < 0)
        operator delete(v61);
      if (v60 < 0)
        operator delete(v59);
      if (v58 < 0)
        operator delete(v57);
      if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v56.__r_.__value_.__l.__data_);
      ++v9;
      v5 = *((_QWORD *)this + 9);
    }
    while (v9 < (*((_QWORD *)this + 10) - v5) >> 4);
  }
}

void sub_1BF8EBBD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,char a22,uint64_t a23,char *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52)
{
  a24 = &a49;
  std::vector<siri::dialogengine::SemanticFeatureConstraint>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);
  siri::dialogengine::SpeakableString::~SpeakableString((void **)&a52);
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a52);
  _Unwind_Resume(a1);
}

void std::vector<siri::dialogengine::SemanticFeatureConstraint>::__vdeallocate(void **a1)
{
  void *v1;
  uint64_t v3;
  void *v4;

  v1 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 56;
        std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>(v3);
      }
      while ((void *)v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void std::vector<siri::dialogengine::SemanticFeatureConstraint>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 56;
        std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>(v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void siri::dialogengine::VariableArray::IterateWithFormatPhrase(siri::dialogengine::VariableArray *this@<X0>, siri::dialogengine::Context *a2@<X1>, siri::dialogengine::FormatAttributes *a3@<X2>, std::string *a4@<X8>)
{
  std::__shared_weak_count *v8;
  siri::dialogengine::File *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  std::string::size_type i;
  std::string::size_type size;
  __int128 v17;
  std::string::size_type v18;
  std::string::size_type v19;
  std::string *p_str;
  uint64_t v21;
  int v22;
  int v23;
  void *v25;
  int v26;
  unint64_t j;
  std::string::size_type v28;
  uint64_t v29;
  __int128 v30;
  std::string::size_type v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  size_t v35;
  size_t v36;
  size_t v37;
  std::string *v38;
  size_t v39;
  char *v40;
  size_t v41;
  std::string *v42;
  char *v43;
  size_t v44;
  std::string *p_p;
  void *v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t v49;
  void *v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t v53;
  char *v54;
  uint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  void *v66;
  unint64_t *v67;
  unint64_t v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t *v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  unint64_t *v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  unint64_t *v81;
  std::string::size_type v82;
  uint64_t v83;
  _QWORD *v84;
  __int128 v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  __int128 v89;
  unint64_t *v90;
  unint64_t v91;
  unint64_t *v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  unint64_t *v110;
  unint64_t v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  std::string *v121;
  __int128 v122;
  unint64_t *v123;
  unint64_t v124;
  _QWORD v125[3];
  __int128 v126;
  __int128 v127;
  _QWORD **v128;
  _QWORD *v129[2];
  __int128 v130;
  uint64_t v131;
  std::__shared_weak_count *v132;
  std::string v133;
  std::string v134;
  std::string v135;
  std::string v136;
  std::string v137;
  std::string v138;
  std::string v139;
  void *v140;
  char v141;
  void *v142;
  char v143;
  void *v144;
  char v145;
  void *v146;
  char v147;
  void *v148;
  char v149;
  void *v150;
  char v151;
  void *v152[12];
  char *v153;
  std::__shared_weak_count *v154;
  void *v155;
  std::__shared_weak_count *v156;
  void *v157;
  std::__shared_weak_count *v158;
  void *v159;
  std::__shared_weak_count *v160;
  __int128 v161;
  __int128 v162;
  std::string __p;
  const void **v164[3];
  uint64_t v165[3];
  std::string v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  uint64_t v176;
  _QWORD **v177;
  _QWORD *v178[2];
  __int128 v179;
  __int128 v180;
  __int128 v181;
  char v182;
  std::string v183;
  std::string v184;
  std::string __str;
  siri::dialogengine::File *v186;
  std::__shared_weak_count *v187;
  std::string v188;
  unint64_t v189;
  std::string::size_type *v190;

  a4->__r_.__value_.__r.__words[0] = 0;
  a4->__r_.__value_.__l.__size_ = 0;
  a4->__r_.__value_.__r.__words[2] = 0;
  v9 = (siri::dialogengine::File *)*((_QWORD *)a2 + 63);
  v8 = (std::__shared_weak_count *)*((_QWORD *)a2 + 64);
  v186 = v9;
  v187 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    if (!v9)
    {
      v12 = (unint64_t *)&v8->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        v14 = v8;
        goto LABEL_294;
      }
      return;
    }
  }
  else if (!v9)
  {
    return;
  }
  if (*((char *)a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  else
    __str = *(std::string *)a3;
  if (*((char *)a3 + 71) < 0)
    std::string::__init_copy_ctor_external(&v184, *((const std::string::value_type **)a3 + 6), *((_QWORD *)a3 + 7));
  else
    v184 = *(std::string *)((_BYTE *)a3 + 2);
  if (*((char *)a3 + 47) < 0)
    std::string::__init_copy_ctor_external(&v183, *((const std::string::value_type **)a3 + 3), *((_QWORD *)a3 + 4));
  else
    v183 = *(std::string *)((_BYTE *)a3 + 1);
  memset(&v139, 0, sizeof(v139));
  std::vector<siri::dialogengine::Parameter>::__init_with_size[abi:ne180100]<siri::dialogengine::Parameter*,siri::dialogengine::Parameter*>(&v139, *((_QWORD *)v9 + 22), *((_QWORD *)v9 + 23), 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(*((_QWORD *)v9 + 23) - *((_QWORD *)v9 + 22)) >> 4));
  size = v139.__r_.__value_.__l.__size_;
  for (i = v139.__r_.__value_.__r.__words[0]; i != size; i += 336)
  {
    if (*(char *)(i + 31) < 0)
    {
      std::string::__init_copy_ctor_external(&v166, *(const std::string::value_type **)(i + 8), *(_QWORD *)(i + 16));
    }
    else
    {
      v17 = *(_OWORD *)(i + 8);
      v166.__r_.__value_.__r.__words[2] = *(_QWORD *)(i + 24);
      *(_OWORD *)&v166.__r_.__value_.__l.__data_ = v17;
    }
    if ((v166.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v18 = HIBYTE(v166.__r_.__value_.__r.__words[2]);
    else
      v18 = v166.__r_.__value_.__l.__size_;
    v19 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v19 = __str.__r_.__value_.__l.__size_;
    if (v18 == v19)
    {
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_str = &__str;
      else
        p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
      if ((*((_BYTE *)&v166.__r_.__value_.__s + 23) & 0x80) != 0)
      {
        v25 = (void *)v166.__r_.__value_.__r.__words[0];
        v26 = memcmp(v166.__r_.__value_.__l.__data_, p_str, v166.__r_.__value_.__l.__size_);
        operator delete(v25);
        if (!v26)
          goto LABEL_279;
      }
      else
      {
        if (!*((_BYTE *)&v166.__r_.__value_.__s + 23))
          goto LABEL_279;
        v21 = 0;
        do
        {
          v22 = v166.__r_.__value_.__s.__data_[v21];
          v23 = p_str->__r_.__value_.__s.__data_[v21];
        }
        while (v22 == v23 && HIBYTE(v166.__r_.__value_.__r.__words[2]) - 1 != v21++);
        if (v22 == v23)
        {
LABEL_279:
          std::operator+<char>();
          v121 = std::string::append(&v188, "' has already been defined as a variable");
          v122 = *(_OWORD *)&v121->__r_.__value_.__l.__data_;
          v166.__r_.__value_.__r.__words[2] = v121->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v166.__r_.__value_.__l.__data_ = v122;
          v121->__r_.__value_.__l.__size_ = 0;
          v121->__r_.__value_.__r.__words[2] = 0;
          v121->__r_.__value_.__r.__words[0] = 0;
          siri::dialogengine::Log::LogWithLevel((uint64_t)&v166, 3u);
          if (SHIBYTE(v166.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v166.__r_.__value_.__l.__data_);
          if (SHIBYTE(v188.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v188.__r_.__value_.__l.__data_);
          v166.__r_.__value_.__r.__words[0] = (std::string::size_type)&v139;
          std::vector<siri::dialogengine::Parameter>::__destroy_vector::operator()[abi:ne180100]((void ***)&v166);
          if (SHIBYTE(v183.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v183.__r_.__value_.__l.__data_);
          if (SHIBYTE(v184.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v184.__r_.__value_.__l.__data_);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__str.__r_.__value_.__l.__data_);
          if (v8)
          {
            v123 = (unint64_t *)&v8->__shared_owners_;
            do
              v124 = __ldaxr(v123);
            while (__stlxr(v124 - 1, v123));
            if (!v124)
            {
              ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
              v14 = v8;
LABEL_294:
              std::__shared_weak_count::__release_weak(v14);
            }
          }
          return;
        }
      }
    }
    else if ((*((_BYTE *)&v166.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      operator delete(v166.__r_.__value_.__l.__data_);
    }
  }
  v166.__r_.__value_.__r.__words[0] = (std::string::size_type)&v139;
  std::vector<siri::dialogengine::Parameter>::__destroy_vector::operator()[abi:ne180100]((void ***)&v166);
  v175 = 0u;
  v174 = 0u;
  v173 = 0u;
  v172 = 0u;
  v171 = 0u;
  v170 = 0u;
  v169 = 0u;
  v168 = 0u;
  v167 = 0u;
  *(_OWORD *)&v166.__r_.__value_.__r.__words[1] = 0u;
  v178[1] = 0;
  v178[0] = 0;
  v177 = v178;
  v176 = 0;
  v166.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E7930990;
  v179 = 0u;
  v180 = 0u;
  v181 = 0u;
  v182 = 0;
  siri::dialogengine::ChunkPhrase::SetName((uint64_t)&v166, &v184);
  memset(v165, 0, sizeof(v165));
  std::vector<siri::dialogengine::Parameter>::__init_with_size[abi:ne180100]<siri::dialogengine::Parameter*,siri::dialogengine::Parameter*>(v165, *((_QWORD *)v9 + 22), *((_QWORD *)v9 + 23), 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(*((_QWORD *)v9 + 23) - *((_QWORD *)v9 + 22)) >> 4));
  std::map<std::string,std::vector<std::shared_ptr<siri::dialogengine::Node>>>::map[abi:ne180100]((uint64_t)v164, (const void ***)a2 + 83);
  if (*((_QWORD *)this + 10) != *((_QWORD *)this + 9))
  {
    for (j = 0; j < (uint64_t)(*((_QWORD *)this + 10) - *((_QWORD *)this + 9)) >> 4; ++j)
    {
      siri::dialogengine::VariableArray::GetConcreteType(this, a2, (uint64_t)&__p);
      v28 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v28 = __p.__r_.__value_.__l.__size_;
      if (!v28)
      {
        siri::dialogengine::GetArrayElementType((uint64_t)a3 + 392, &v139);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        __p = v139;
      }
      v29 = *((_QWORD *)this + 9);
      if (j >= (*((_QWORD *)this + 10) - v29) >> 4)
      {
        v31 = 0;
        v32 = 0;
        v162 = 0uLL;
      }
      else
      {
        v30 = *(_OWORD *)(v29 + 16 * j);
        v162 = v30;
        v31 = *((_QWORD *)&v30 + 1);
        v32 = v30;
        if (*((_QWORD *)&v30 + 1))
        {
          v33 = (unint64_t *)(*((_QWORD *)&v30 + 1) + 8);
          do
            v34 = __ldxr(v33);
          while (__stxr(v34 + 1, v33));
        }
      }
      v161 = 0uLL;
      std::string::operator=((std::string *)(v32 + 8), &__str);
      std::string::operator=((std::string *)(v32 + 32), &__p);
      *(_BYTE *)(v32 + 64) = 1;
      v35 = strlen(siri::dialogengine::TYPE_STRING[0]);
      v36 = v35;
      v37 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        v39 = __p.__r_.__value_.__l.__size_;
        if (v35 != __p.__r_.__value_.__l.__size_)
        {
          v40 = siri::dialogengine::TYPE_NUMBER[0];
          v41 = strlen(siri::dialogengine::TYPE_NUMBER[0]);
          goto LABEL_74;
        }
        if (v35 == -1)
          std::string::__throw_out_of_range[abi:ne180100]();
        v38 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      else
      {
        if (v35 != HIBYTE(__p.__r_.__value_.__r.__words[2]))
        {
          v40 = siri::dialogengine::TYPE_NUMBER[0];
          v41 = strlen(siri::dialogengine::TYPE_NUMBER[0]);
LABEL_70:
          if (v41 != v37)
          {
            v43 = siri::dialogengine::TYPE_BOOLEAN;
            v44 = strlen(siri::dialogengine::TYPE_BOOLEAN);
LABEL_79:
            if (v44 == v37)
            {
              p_p = &__p;
              goto LABEL_100;
            }
            goto LABEL_101;
          }
          v42 = &__p;
          v39 = v37;
          goto LABEL_77;
        }
        v38 = &__p;
      }
      if (!memcmp(v38, siri::dialogengine::TYPE_STRING[0], v36))
      {
        if (v46)
        {
          v139.__r_.__value_.__r.__words[0] = (std::string::size_type)v46;
          v139.__r_.__value_.__l.__size_ = v31;
          if (v31)
          {
            v47 = (unint64_t *)(v31 + 8);
            do
              v48 = __ldxr(v47);
            while (__stxr(v48 + 1, v47));
            v159 = v46;
            v160 = (std::__shared_weak_count *)v31;
            do
              v49 = __ldxr(v47);
            while (__stxr(v49 + 1, v47));
            goto LABEL_147;
          }
        }
        else
        {
          *(_OWORD *)&v139.__r_.__value_.__l.__data_ = 0uLL;
        }
        v159 = v46;
        v160 = 0;
LABEL_147:
        siri::dialogengine::Context::AddVariable((uint64_t)a2, (uint64_t *)&v159);
        v70 = v160;
        if (v160)
        {
          v71 = (unint64_t *)&v160->__shared_owners_;
          do
            v72 = __ldaxr(v71);
          while (__stlxr(v72 - 1, v71));
          if (!v72)
          {
            ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
            std::__shared_weak_count::__release_weak(v70);
          }
        }
        v63 = (std::__shared_weak_count *)v139.__r_.__value_.__l.__size_;
        if (!v139.__r_.__value_.__l.__size_)
          goto LABEL_179;
        v73 = (unint64_t *)(v139.__r_.__value_.__l.__size_ + 8);
        do
          v65 = __ldaxr(v73);
        while (__stlxr(v65 - 1, v73));
        goto LABEL_177;
      }
      v40 = siri::dialogengine::TYPE_NUMBER[0];
      v41 = strlen(siri::dialogengine::TYPE_NUMBER[0]);
      if ((v37 & 0x80) == 0)
        goto LABEL_70;
      v39 = __p.__r_.__value_.__l.__size_;
LABEL_74:
      if (v41 != v39)
      {
        v43 = siri::dialogengine::TYPE_BOOLEAN;
        v44 = strlen(siri::dialogengine::TYPE_BOOLEAN);
        goto LABEL_97;
      }
      if (v39 == -1)
        std::string::__throw_out_of_range[abi:ne180100]();
      v42 = (std::string *)__p.__r_.__value_.__r.__words[0];
LABEL_77:
      if (!memcmp(v42, v40, v39))
      {
        if (v50)
        {
          v139.__r_.__value_.__r.__words[0] = (std::string::size_type)v50;
          v139.__r_.__value_.__l.__size_ = v31;
          if (v31)
          {
            v51 = (unint64_t *)(v31 + 8);
            do
              v52 = __ldxr(v51);
            while (__stxr(v52 + 1, v51));
            v157 = v50;
            v158 = (std::__shared_weak_count *)v31;
            do
              v53 = __ldxr(v51);
            while (__stxr(v53 + 1, v51));
            goto LABEL_158;
          }
        }
        else
        {
          *(_OWORD *)&v139.__r_.__value_.__l.__data_ = 0uLL;
        }
        v157 = v50;
        v158 = 0;
LABEL_158:
        siri::dialogengine::Context::AddVariable((uint64_t)a2, (uint64_t *)&v157);
        v74 = v158;
        if (v158)
        {
          v75 = (unint64_t *)&v158->__shared_owners_;
          do
            v76 = __ldaxr(v75);
          while (__stlxr(v76 - 1, v75));
          if (!v76)
          {
            ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
            std::__shared_weak_count::__release_weak(v74);
          }
        }
        v63 = (std::__shared_weak_count *)v139.__r_.__value_.__l.__size_;
        if (!v139.__r_.__value_.__l.__size_)
          goto LABEL_179;
        v77 = (unint64_t *)(v139.__r_.__value_.__l.__size_ + 8);
        do
          v65 = __ldaxr(v77);
        while (__stlxr(v65 - 1, v77));
        goto LABEL_177;
      }
      v43 = siri::dialogengine::TYPE_BOOLEAN;
      v44 = strlen(siri::dialogengine::TYPE_BOOLEAN);
      if ((v37 & 0x80) == 0)
        goto LABEL_79;
      v39 = __p.__r_.__value_.__l.__size_;
LABEL_97:
      if (v44 == v39)
      {
        if (v39 == -1)
          std::string::__throw_out_of_range[abi:ne180100]();
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        v37 = v39;
LABEL_100:
        if (!memcmp(p_p, v43, v37))
        {
          if (v66)
          {
            v139.__r_.__value_.__r.__words[0] = (std::string::size_type)v66;
            v139.__r_.__value_.__l.__size_ = v31;
            if (v31)
            {
              v67 = (unint64_t *)(v31 + 8);
              do
                v68 = __ldxr(v67);
              while (__stxr(v68 + 1, v67));
              v155 = v66;
              v156 = (std::__shared_weak_count *)v31;
              do
                v69 = __ldxr(v67);
              while (__stxr(v69 + 1, v67));
              goto LABEL_169;
            }
          }
          else
          {
            *(_OWORD *)&v139.__r_.__value_.__l.__data_ = 0uLL;
          }
          v155 = v66;
          v156 = 0;
LABEL_169:
          siri::dialogengine::Context::AddVariable((uint64_t)a2, (uint64_t *)&v155);
          v78 = v156;
          if (v156)
          {
            v79 = (unint64_t *)&v156->__shared_owners_;
            do
              v80 = __ldaxr(v79);
            while (__stlxr(v80 - 1, v79));
            if (!v80)
            {
              ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
              std::__shared_weak_count::__release_weak(v78);
            }
          }
          v63 = (std::__shared_weak_count *)v139.__r_.__value_.__l.__size_;
          if (!v139.__r_.__value_.__l.__size_)
            goto LABEL_179;
          v81 = (unint64_t *)(v139.__r_.__value_.__l.__size_ + 8);
          do
            v65 = __ldaxr(v81);
          while (__stlxr(v65 - 1, v81));
          goto LABEL_177;
        }
      }
LABEL_101:
      v55 = (uint64_t)v54;
      if (v54)
      {
        v153 = v54;
        v154 = (std::__shared_weak_count *)v31;
        if (v31)
        {
          v56 = (unint64_t *)(v31 + 8);
          do
            v57 = __ldxr(v56);
          while (__stxr(v57 + 1, v56));
        }
      }
      else
      {
        v31 = 0;
        v154 = 0;
        v153 = 0;
      }
      if (v54[55] < 0)
        std::string::__init_copy_ctor_external(&v188, *((const std::string::value_type **)v54 + 4), *((_QWORD *)v54 + 5));
      else
        v188 = *(std::string *)(v54 + 32);
      std::string::basic_string[abi:ne180100]<0>(&v138, "");
      std::string::basic_string[abi:ne180100]<0>(&v137, "");
      std::string::basic_string[abi:ne180100]<0>(&v136, "");
      std::string::basic_string[abi:ne180100]<0>(&v135, "");
      std::string::basic_string[abi:ne180100]<0>(&v134, "");
      std::string::basic_string[abi:ne180100]<0>(&v133, "");
      siri::dialogengine::Parameter::Parameter((uint64_t)&v139, &__str, &v188, &v138, &v137, &v136, &v135, &v134, &v133, 1, 0, 0, 1);
      if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v133.__r_.__value_.__l.__data_);
      if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v134.__r_.__value_.__l.__data_);
      if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v135.__r_.__value_.__l.__data_);
      if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v136.__r_.__value_.__l.__data_);
      if (SHIBYTE(v137.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v137.__r_.__value_.__l.__data_);
      if (SHIBYTE(v138.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v138.__r_.__value_.__l.__data_);
      if (SHIBYTE(v188.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v188.__r_.__value_.__l.__data_);
      siri::dialogengine::File::AddParameter(v186, (const siri::dialogengine::Parameter *)&v139);
      std::string::basic_string[abi:ne180100]<0>(&v188, (char *)siri::dialogengine::TYPE_OBJECT);
      std::string::operator=((std::string *)(v55 + 32), &v188);
      if (SHIBYTE(v188.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v188.__r_.__value_.__l.__data_);
      v131 = v55;
      v132 = (std::__shared_weak_count *)v31;
      if (v31)
      {
        v58 = (unint64_t *)(v31 + 8);
        do
          v59 = __ldxr(v58);
        while (__stxr(v59 + 1, v58));
      }
      siri::dialogengine::Context::AddVariable((uint64_t)a2, &v131);
      v60 = v132;
      if (v132)
      {
        v61 = (unint64_t *)&v132->__shared_owners_;
        do
          v62 = __ldaxr(v61);
        while (__stlxr(v62 - 1, v61));
        if (!v62)
        {
          ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
          std::__shared_weak_count::__release_weak(v60);
        }
      }
      v152[8] = off_1E793AED8;
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((_QWORD *)v152[10]);
      siri::dialogengine::LineNumberBase::~LineNumberBase(v152);
      siri::dialogengine::ObjectProperty::~ObjectProperty((void **)&v139.__r_.__value_.__l.__data_);
      v63 = v154;
      if (!v154)
        goto LABEL_179;
      v64 = (unint64_t *)&v154->__shared_owners_;
      do
        v65 = __ldaxr(v64);
      while (__stlxr(v65 - 1, v64));
LABEL_177:
      if (!v65)
      {
        ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
        std::__shared_weak_count::__release_weak(v63);
      }
LABEL_179:
      v82 = HIBYTE(v183.__r_.__value_.__r.__words[2]);
      if ((v183.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v82 = v183.__r_.__value_.__l.__size_;
      if (v82)
      {
        v83 = operator new();
        siri::dialogengine::VariableNumber::VariableNumber(v83, &v183, (double)(int)j);
        v84 = (_QWORD *)operator new();
        *v84 = &off_1E792CDF0;
        v84[1] = 0;
        v84[2] = 0;
        v84[3] = v83;
        *(_QWORD *)&v85 = v83;
        *((_QWORD *)&v85 + 1) = v84;
        v86 = (std::__shared_weak_count *)*((_QWORD *)&v161 + 1);
        v161 = v85;
        if (v86)
        {
          v87 = (unint64_t *)&v86->__shared_owners_;
          do
            v88 = __ldaxr(v87);
          while (__stlxr(v88 - 1, v87));
          if (!v88)
          {
            ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
            std::__shared_weak_count::__release_weak(v86);
          }
        }
        v89 = v161;
        *(_BYTE *)(v161 + 64) = 1;
        v130 = v89;
        if (*((_QWORD *)&v89 + 1))
        {
          v90 = (unint64_t *)(*((_QWORD *)&v89 + 1) + 8);
          do
            v91 = __ldxr(v90);
          while (__stxr(v91 + 1, v90));
        }
        siri::dialogengine::Context::AddVariable((uint64_t)a2, (uint64_t *)&v130);
        if (*((_QWORD *)&v89 + 1))
        {
          v92 = (unint64_t *)(*((_QWORD *)&v89 + 1) + 8);
          do
            v93 = __ldaxr(v92);
          while (__stlxr(v93 - 1, v92));
          if (!v93)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v89 + 1) + 16))(*((_QWORD *)&v89 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v89 + 1));
          }
        }
      }
      v129[0] = 0;
      v129[1] = 0;
      v128 = v129;
      siri::dialogengine::Context::SetRandomMatches(a2, &v128);
      std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<siri::dialogengine::Node>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<siri::dialogengine::Node>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<siri::dialogengine::Node>>>>>::destroy(v129[0]);
      siri::dialogengine::ChunkPhrase::Expand((siri::dialogengine::ChunkPhrase *)&v166, a2, (uint64_t)&v139);
      v95 = a4->__r_.__value_.__l.__size_;
      v94 = a4->__r_.__value_.__r.__words[2];
      if (v95 >= v94)
      {
        v97 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(v95 - a4->__r_.__value_.__r.__words[0]) >> 3);
        v98 = v97 + 1;
        if (v97 + 1 > 0x186186186186186)
          std::vector<BOOL>::__throw_length_error[abi:ne180100]();
        v99 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(v94 - a4->__r_.__value_.__r.__words[0]) >> 3);
        if (2 * v99 > v98)
          v98 = 2 * v99;
        if (v99 >= 0xC30C30C30C30C3)
          v100 = 0x186186186186186;
        else
          v100 = v98;
        v190 = &a4->__r_.__value_.__r.__words[2];
        if (v100)
          v100 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<siri::dialogengine::SpeakableString>>(v100);
        else
          v101 = 0;
        v188.__r_.__value_.__r.__words[0] = v100;
        v188.__r_.__value_.__l.__size_ = v100 + 168 * v97;
        v188.__r_.__value_.__r.__words[2] = v188.__r_.__value_.__l.__size_;
        v189 = v100 + 168 * v101;
        siri::dialogengine::SpeakableString::SpeakableString((std::string *)v188.__r_.__value_.__l.__size_, (const siri::dialogengine::SpeakableString *)&v139);
        v188.__r_.__value_.__r.__words[2] += 168;
        std::vector<siri::dialogengine::SpeakableString>::__swap_out_circular_buffer(a4, &v188);
        v96 = a4->__r_.__value_.__l.__size_;
        std::__split_buffer<siri::dialogengine::SpeakableString>::~__split_buffer((uint64_t)&v188);
      }
      else
      {
        siri::dialogengine::SpeakableString::SpeakableString((std::string *)a4->__r_.__value_.__l.__size_, (const siri::dialogengine::SpeakableString *)&v139);
        v96 = v95 + 168;
        a4->__r_.__value_.__l.__size_ = v96;
      }
      a4->__r_.__value_.__l.__size_ = v96;
      if (v151 < 0)
        operator delete(v150);
      if (v149 < 0)
        operator delete(v148);
      if (v147 < 0)
        operator delete(v146);
      if (v145 < 0)
        operator delete(v144);
      if (v143 < 0)
        operator delete(v142);
      if (v141 < 0)
        operator delete(v140);
      if (SHIBYTE(v139.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v139.__r_.__value_.__l.__data_);
      v102 = (std::__shared_weak_count *)*((_QWORD *)&v162 + 1);
      v127 = v162;
      if (*((_QWORD *)&v162 + 1))
      {
        v103 = (unint64_t *)(*((_QWORD *)&v162 + 1) + 8);
        do
          v104 = __ldxr(v103);
        while (__stxr(v104 + 1, v103));
      }
      siri::dialogengine::Context::RemoveVariable((uint64_t)a2, (uint64_t *)&v127);
      if (v102)
      {
        v105 = (unint64_t *)&v102->__shared_owners_;
        do
          v106 = __ldaxr(v105);
        while (__stlxr(v106 - 1, v105));
        if (!v106)
        {
          ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
          std::__shared_weak_count::__release_weak(v102);
        }
      }
      v107 = (std::__shared_weak_count *)*((_QWORD *)&v161 + 1);
      v126 = v161;
      if (*((_QWORD *)&v161 + 1))
      {
        v108 = (unint64_t *)(*((_QWORD *)&v161 + 1) + 8);
        do
          v109 = __ldxr(v108);
        while (__stxr(v109 + 1, v108));
      }
      siri::dialogengine::Context::RemoveVariable((uint64_t)a2, (uint64_t *)&v126);
      if (v107)
      {
        v110 = (unint64_t *)&v107->__shared_owners_;
        do
          v111 = __ldaxr(v110);
        while (__stlxr(v111 - 1, v110));
        if (!v111)
        {
          ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
          std::__shared_weak_count::__release_weak(v107);
        }
      }
      siri::dialogengine::File::SetParameters(v186, v165);
      v112 = (std::__shared_weak_count *)*((_QWORD *)&v161 + 1);
      if (*((_QWORD *)&v161 + 1))
      {
        v113 = (unint64_t *)(*((_QWORD *)&v161 + 1) + 8);
        do
          v114 = __ldaxr(v113);
        while (__stlxr(v114 - 1, v113));
        if (!v114)
        {
          ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
          std::__shared_weak_count::__release_weak(v112);
        }
      }
      v115 = (std::__shared_weak_count *)*((_QWORD *)&v162 + 1);
      if (*((_QWORD *)&v162 + 1))
      {
        v116 = (unint64_t *)(*((_QWORD *)&v162 + 1) + 8);
        do
          v117 = __ldaxr(v116);
        while (__stlxr(v117 - 1, v116));
        if (!v117)
        {
          ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
          std::__shared_weak_count::__release_weak(v115);
        }
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  std::map<std::string,std::vector<std::shared_ptr<siri::dialogengine::Node>>>::map[abi:ne180100]((uint64_t)v125, v164);
  siri::dialogengine::Context::SetRandomMatches(a2, v125);
  std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<siri::dialogengine::Node>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<siri::dialogengine::Node>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<siri::dialogengine::Node>>>>>::destroy((_QWORD *)v125[1]);
  std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<siri::dialogengine::Node>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<siri::dialogengine::Node>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<siri::dialogengine::Node>>>>>::destroy(v164[1]);
  v139.__r_.__value_.__r.__words[0] = (std::string::size_type)v165;
  std::vector<siri::dialogengine::Parameter>::__destroy_vector::operator()[abi:ne180100]((void ***)&v139);
  v166.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E7930990;
  if (SHIBYTE(v181) < 0)
    operator delete(*((void **)&v180 + 1));
  if (SBYTE7(v180) < 0)
    operator delete((void *)v179);
  v166.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E7937608;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v178[0]);
  if (SHIBYTE(v176) < 0)
    operator delete((void *)v175);
  if (SHIBYTE(v174) < 0)
    operator delete(*((void **)&v173 + 1));
  if (SBYTE7(v173) < 0)
    operator delete((void *)v172);
  if (SHIBYTE(v171) < 0)
    operator delete(*((void **)&v170 + 1));
  if (SBYTE7(v170) < 0)
    operator delete((void *)v169);
  if (SHIBYTE(v168) < 0)
    operator delete(*((void **)&v167 + 1));
  if (SBYTE7(v167) < 0)
    operator delete((void *)v166.__r_.__value_.__l.__size_);
  if (SHIBYTE(v183.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v183.__r_.__value_.__l.__data_);
  if (SHIBYTE(v184.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v184.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v118 = v187;
  if (v187)
  {
    v119 = (unint64_t *)&v187->__shared_owners_;
    do
      v120 = __ldaxr(v119);
    while (__stlxr(v120 - 1, v119));
    if (!v120)
    {
      ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
      v14 = v118;
      goto LABEL_294;
    }
  }
}

void sub_1BF8ECE94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,uint64_t a47)
{
  unint64_t v47;
  uint64_t v48;

  if (SLOBYTE(STACK[0x347]) < 0)
    operator delete((void *)STACK[0x330]);
  if (*(char *)(v48 - 121) < 0)
    operator delete(*(void **)(v48 - 144));
  STACK[0x330] = (unint64_t)&a47;
  std::vector<siri::dialogengine::Parameter>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x330]);
  if (*(char *)(v48 - 233) < 0)
    operator delete(*(void **)(v48 - 256));
  if (*(char *)(v48 - 201) < 0)
    operator delete(*(void **)(v48 - 224));
  if (*(char *)(v48 - 169) < 0)
    operator delete(*(void **)(v48 - 192));
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](v48 - 160);
  STACK[0x330] = v47;
  std::vector<siri::dialogengine::SpeakableString>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x330]);
  _Unwind_Resume(a1);
}

uint64_t std::map<std::string,std::vector<std::shared_ptr<siri::dialogengine::Node>>>::map[abi:ne180100](uint64_t a1, const void ***a2)
{
  uint64_t **v3;
  const void ***v4;
  const void **v5;
  uint64_t v6;
  uint64_t **v7;
  uint64_t v8;
  BOOL v9;
  uint64_t **v10;
  const void **v11;
  const void ***v12;
  uint64_t *v14[3];
  _QWORD *v15;

  *(_QWORD *)(a1 + 8) = 0;
  v3 = (uint64_t **)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  v4 = a2 + 1;
  v5 = *a2;
  if (*a2 != (const void **)(a2 + 1))
  {
    while (1)
    {
      v6 = *(_QWORD *)(a1 + 8);
      if (*(uint64_t ***)a1 == v3)
        break;
      v7 = v3;
      if (v6)
      {
        do
        {
          v8 = v6;
          v6 = *(_QWORD *)(v6 + 8);
        }
        while (v6);
      }
      else
      {
        do
        {
          v8 = (uint64_t)v7[2];
          v9 = *(_QWORD *)v8 == (_QWORD)v7;
          v7 = (uint64_t **)v8;
        }
        while (v9);
      }
      if (std::less<std::string>::operator()[abi:ne180100](a1 + 16, (const void **)(v8 + 32), v5 + 4))
      {
        if (!*v3)
          goto LABEL_9;
LABEL_11:
        v15 = (_QWORD *)v8;
        v10 = (uint64_t **)(v8 + 8);
        goto LABEL_13;
      }
      v10 = (uint64_t **)std::__tree<std::string>::__find_equal<std::string>(a1, &v15, v5 + 4);
LABEL_13:
      if (!*v10)
        goto LABEL_14;
LABEL_15:
      v11 = (const void **)v5[1];
      if (v11)
      {
        do
        {
          v12 = (const void ***)v11;
          v11 = (const void **)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (const void ***)v5[2];
          v9 = *v12 == v5;
          v5 = (const void **)v12;
        }
        while (!v9);
      }
      v5 = (const void **)v12;
      if (v12 == v4)
        return a1;
    }
    v8 = (uint64_t)v3;
    if (!v6)
    {
LABEL_9:
      v15 = v3;
      v10 = v3;
LABEL_14:
      std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<siri::dialogengine::Node>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<siri::dialogengine::Node>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<siri::dialogengine::Node>>>>>::__construct_node<std::pair<std::string const,std::vector<std::shared_ptr<siri::dialogengine::Node>>> const&>((uint64_t)v14, a1, (uint64_t)(v5 + 4));
      std::__tree<std::string>::__insert_node_at((uint64_t **)a1, (uint64_t)v15, v10, v14[0]);
      v14[0] = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::shared_ptr<siri::dialogengine::Node>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::shared_ptr<siri::dialogengine::Node>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v14);
      goto LABEL_15;
    }
    goto LABEL_11;
  }
  return a1;
}

void sub_1BF8ED318(_Unwind_Exception *a1)
{
  _QWORD **v1;

  std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<siri::dialogengine::Node>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<siri::dialogengine::Node>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<siri::dialogengine::Node>>>>>::destroy(*v1);
  _Unwind_Resume(a1);
}

void siri::dialogengine::Parameter::~Parameter(siri::dialogengine::Parameter *this)
{
  *((_QWORD *)this + 38) = off_1E793AED8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*((_QWORD **)this + 40));
  siri::dialogengine::LineNumberBase::~LineNumberBase((void **)this + 30);
  siri::dialogengine::ObjectProperty::~ObjectProperty((void **)this);
}

{
  *((_QWORD *)this + 38) = off_1E793AED8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*((_QWORD **)this + 40));
  siri::dialogengine::LineNumberBase::~LineNumberBase((void **)this + 30);
  siri::dialogengine::ObjectProperty::~ObjectProperty((void **)this);
}

{
  *((_QWORD *)this + 38) = off_1E793AED8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*((_QWORD **)this + 40));
  siri::dialogengine::LineNumberBase::~LineNumberBase((void **)this + 30);
  siri::dialogengine::ObjectProperty::~ObjectProperty((void **)this);
  JUMPOUT(0x1C3B8D890);
}

void std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<siri::dialogengine::Node>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<siri::dialogengine::Node>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<siri::dialogengine::Node>>>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<siri::dialogengine::Node>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<siri::dialogengine::Node>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<siri::dialogengine::Node>>>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<siri::dialogengine::Node>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<siri::dialogengine::Node>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<siri::dialogengine::Node>>>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::shared_ptr<siri::dialogengine::Node>>>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void siri::dialogengine::ChunkPhrase::~ChunkPhrase(void **this)
{
  *this = off_1E7930990;
  if (*((char *)this + 247) < 0)
    operator delete(this[28]);
  if (*((char *)this + 223) < 0)
    operator delete(this[25]);
  *this = &off_1E7937608;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(this[23]);
  siri::dialogengine::SpeakableString::~SpeakableString(this + 1);
}

{
  *this = off_1E7930990;
  if (*((char *)this + 247) < 0)
    operator delete(this[28]);
  if (*((char *)this + 223) < 0)
    operator delete(this[25]);
  *this = &off_1E7937608;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(this[23]);
  siri::dialogengine::SpeakableString::~SpeakableString(this + 1);
  JUMPOUT(0x1C3B8D890);
}

void std::vector<siri::dialogengine::SpeakableString>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = v2;
    if (v4 != v2)
    {
      do
        siri::dialogengine::SpeakableString::~SpeakableString(v4 - 21);
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<siri::dialogengine::SpeakableString>>(unint64_t a1)
{
  if (a1 >= 0x186186186186187)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(168 * a1);
}

std::string *std::vector<siri::dialogengine::SpeakableString>::__swap_out_circular_buffer(std::string *result, _QWORD *a2)
{
  std::string::__raw *v3;
  std::string::size_type size;
  std::string::size_type v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  const siri::dialogengine::SpeakableString *v9;
  std::string::size_type v10;
  std::string::size_type v11;
  std::string::size_type v12;
  std::string::size_type v13;

  v3 = (std::string::__raw *)result;
  v5 = result->__r_.__value_.__r.__words[0];
  size = result->__r_.__value_.__l.__size_;
  v6 = a2[1];
  for (i = 168; ; i -= 168)
  {
    v8 = v6 + i;
    if (size + i - 168 == v5)
      break;
    v9 = (const siri::dialogengine::SpeakableString *)(size + i - 336);
    result = siri::dialogengine::SpeakableString::SpeakableString((std::string *)(v8 - 336), v9);
  }
  v10 = v8 - 168;
  a2[1] = v10;
  v11 = v3->__words[0];
  v3->__words[0] = v10;
  a2[1] = v11;
  v12 = v3->__words[1];
  v3->__words[1] = a2[2];
  a2[2] = v12;
  v13 = v3->__words[2];
  v3->__words[2] = a2[3];
  a2[3] = v13;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<siri::dialogengine::SpeakableString>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 168;
    siri::dialogengine::SpeakableString::~SpeakableString((void **)(i - 168));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::shared_ptr<siri::dialogengine::Node>>>,0>(uint64_t a1)
{
  void **v2;

  v2 = (void **)(a1 + 24);
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

char *std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<siri::dialogengine::Node>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<siri::dialogengine::Node>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<siri::dialogengine::Node>>>>>::__construct_node<std::pair<std::string const,std::vector<std::shared_ptr<siri::dialogengine::Node>>> const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  char *v6;
  char *v7;
  char *result;

  v5 = a2 + 8;
  v6 = (char *)operator new(0x50uLL);
  v7 = v6;
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = 0;
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v6 + 32), *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *((_OWORD *)v6 + 2) = *(_OWORD *)a3;
    *((_QWORD *)v6 + 6) = *(_QWORD *)(a3 + 16);
  }
  *((_QWORD *)v7 + 7) = 0;
  *((_QWORD *)v7 + 8) = 0;
  *((_QWORD *)v7 + 9) = 0;
  result = std::vector<std::shared_ptr<siri::dialogengine::Node>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::Node>*,std::shared_ptr<siri::dialogengine::Node>*>(v7 + 56, *(_QWORD **)(a3 + 24), *(_QWORD **)(a3 + 32), (uint64_t)(*(_QWORD *)(a3 + 32) - *(_QWORD *)(a3 + 24)) >> 4);
  *(_BYTE *)(a1 + 16) = 1;
  return result;
}

void sub_1BF8ED6C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::shared_ptr<siri::dialogengine::Node>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::shared_ptr<siri::dialogengine::Node>>>,void *>>>>::reset[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::shared_ptr<siri::dialogengine::Node>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::shared_ptr<siri::dialogengine::Node>>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::shared_ptr<siri::dialogengine::Node>>>,0>((uint64_t)v1 + 32);
    operator delete(v1);
  }
}

char *std::vector<std::shared_ptr<siri::dialogengine::Node>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::Node>*,std::shared_ptr<siri::dialogengine::Node>*>(char *result, _QWORD *a2, _QWORD *a3, unint64_t a4)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  if (a4)
  {
    v6 = result;
    result = std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__vallocate[abi:ne180100](result, a4);
    v7 = (_QWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      *v7 = *a2;
      v8 = a2[1];
      v7[1] = v8;
      if (v8)
      {
        v9 = (unint64_t *)(v8 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      a2 += 2;
      v7 += 2;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_1BF8ED7C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void siri::dialogengine::VariableArray::IterateWithFormatMarkup(siri::dialogengine::VariableArray *this@<X0>, siri::dialogengine::Context *a2@<X1>, siri::dialogengine::FormatAttributes *a3@<X2>, std::string *a4@<X8>)
{
  unint64_t v7;
  unint64_t v8;
  unint64_t size;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  std::string::size_type v16;
  char *v17;
  char *v18;
  const void **v19;
  char *v20;
  std::string __str;
  std::string v22;
  std::string v23;
  std::string v24;
  std::string v25;
  std::string v26;
  std::string __p;
  std::string v28;
  std::string v29;
  std::string v30;
  std::string v31;
  std::string v32;
  std::string v33;
  std::string v34;
  void *v35;
  char v36;

  a4->__r_.__value_.__r.__words[0] = 0;
  a4->__r_.__value_.__l.__size_ = 0;
  a4->__r_.__value_.__r.__words[2] = 0;
  LOBYTE(v35) = 0;
  v36 = 0;
  if (*((_QWORD *)this + 10) != *((_QWORD *)this + 9))
  {
    v7 = 0;
    v19 = (const void **)((char *)a3 + 368);
    v20 = (char *)a3 + 272;
    v17 = (char *)a3 + 344;
    v18 = (char *)a3 + 392;
    v16 = (std::string::size_type)&a4->__r_.__value_.__r.__words[2];
    do
    {
      siri::dialogengine::FormatArrayItem((uint64_t)a2, (uint64_t)this, v7, (uint64_t)v20, v19, (uint64_t)v18, (uint64_t)&v28);
      siri::dialogengine::TransformText((siri::dialogengine::SpeakableString *)&v28, a2, (uint64_t)v17, &__str);
      std::string::operator=(&v28, &__str);
      std::string::operator=(&v29, &v22);
      std::string::operator=(&v30, &v23);
      std::string::operator=(&v31, &v24);
      std::string::operator=(&v32, &v25);
      std::string::operator=(&v33, &v26);
      std::string::operator=(&v34, &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v26.__r_.__value_.__l.__data_);
      if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v25.__r_.__value_.__l.__data_);
      if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v24.__r_.__value_.__l.__data_);
      if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v23.__r_.__value_.__l.__data_);
      if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v22.__r_.__value_.__l.__data_);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      size = a4->__r_.__value_.__l.__size_;
      v8 = a4->__r_.__value_.__r.__words[2];
      if (size >= v8)
      {
        v11 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(size - a4->__r_.__value_.__r.__words[0]) >> 3);
        v12 = v11 + 1;
        if (v11 + 1 > 0x186186186186186)
          std::vector<BOOL>::__throw_length_error[abi:ne180100]();
        v13 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(v8 - a4->__r_.__value_.__r.__words[0]) >> 3);
        if (2 * v13 > v12)
          v12 = 2 * v13;
        if (v13 >= 0xC30C30C30C30C3)
          v14 = 0x186186186186186;
        else
          v14 = v12;
        v22.__r_.__value_.__l.__size_ = v16;
        if (v14)
          v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<siri::dialogengine::SpeakableString>>(v14);
        else
          v15 = 0;
        __str.__r_.__value_.__r.__words[0] = v14;
        __str.__r_.__value_.__l.__size_ = v14 + 168 * v11;
        __str.__r_.__value_.__r.__words[2] = __str.__r_.__value_.__l.__size_;
        v22.__r_.__value_.__r.__words[0] = v14 + 168 * v15;
        siri::dialogengine::SpeakableString::SpeakableString((std::string *)__str.__r_.__value_.__l.__size_, (const siri::dialogengine::SpeakableString *)&v28);
        __str.__r_.__value_.__r.__words[2] += 168;
        std::vector<siri::dialogengine::SpeakableString>::__swap_out_circular_buffer(a4, &__str);
        v10 = a4->__r_.__value_.__l.__size_;
        std::__split_buffer<siri::dialogengine::SpeakableString>::~__split_buffer((uint64_t)&__str);
      }
      else
      {
        siri::dialogengine::SpeakableString::SpeakableString((std::string *)a4->__r_.__value_.__l.__size_, (const siri::dialogengine::SpeakableString *)&v28);
        v10 = size + 168;
        a4->__r_.__value_.__l.__size_ = v10;
      }
      a4->__r_.__value_.__l.__size_ = v10;
      if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v34.__r_.__value_.__l.__data_);
      if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v33.__r_.__value_.__l.__data_);
      if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v32.__r_.__value_.__l.__data_);
      if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v31.__r_.__value_.__l.__data_);
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v30.__r_.__value_.__l.__data_);
      if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v29.__r_.__value_.__l.__data_);
      if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v28.__r_.__value_.__l.__data_);
      ++v7;
    }
    while (v7 < (uint64_t)(*((_QWORD *)this + 10) - *((_QWORD *)this + 9)) >> 4);
    if (v36)
      siri::dialogengine::ObjectProperty::~ObjectProperty(&v35);
  }
}

void sub_1BF8EDB18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *a63)
{
  siri::dialogengine::SpeakableString::~SpeakableString(&a42);
  if (LOBYTE(STACK[0x2A0]))
    siri::dialogengine::ObjectProperty::~ObjectProperty(&a63);
  std::vector<siri::dialogengine::SpeakableString>::__destroy_vector::operator()[abi:ne180100]((void ***)&a63);
  _Unwind_Resume(a1);
}

void siri::dialogengine::VariableArray::Iterate(siri::dialogengine::VariableArray *this@<X0>, siri::dialogengine::Context *a2@<X1>, siri::dialogengine::FormatAttributes *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  __int128 v9;
  std::string v10;
  _QWORD v11[3];
  std::string *v12;

  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  memset(v11, 0, sizeof(v11));
  std::vector<std::shared_ptr<siri::dialogengine::Variable>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::Variable>*,std::shared_ptr<siri::dialogengine::Variable>*>(v11, *((_QWORD **)this + 9), *((_QWORD **)this + 10), (uint64_t)(*((_QWORD *)this + 10) - *((_QWORD *)this + 9)) >> 4);
  v8 = *((unsigned __int8 *)a3 + 319);
  if ((v8 & 0x80u) != 0)
    v8 = *((_QWORD *)a3 + 38);
  if (v8)
  {
    siri::dialogengine::VariableArray::SemanticConceptsToVariableArray(this, a2, a3, &v10.__r_.__value_.__l.__data_);
    siri::dialogengine::VariableArray::SetItems(this, (uint64_t)&v10);
    v12 = &v10;
    std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v12);
  }
  if (!*((_BYTE *)a3 + 72)
    || (siri::dialogengine::VariableArray::IterateWithFormatPhrase(this, a2, a3, &v10),
        std::vector<siri::dialogengine::SpeakableString>::__vdeallocate((void **)a4),
        v9 = *(_OWORD *)&v10.__r_.__value_.__l.__data_,
        *(std::string *)a4 = v10,
        memset(&v10, 0, sizeof(v10)),
        v12 = &v10,
        std::vector<siri::dialogengine::SpeakableString>::__destroy_vector::operator()[abi:ne180100]((void ***)&v12),
        (_QWORD)v9 == *((_QWORD *)&v9 + 1)))
  {
    siri::dialogengine::VariableArray::IterateWithFormatMarkup(this, a2, a3, &v10);
    std::vector<siri::dialogengine::SpeakableString>::__vdeallocate((void **)a4);
    *(std::string *)a4 = v10;
    memset(&v10, 0, sizeof(v10));
    v12 = &v10;
    std::vector<siri::dialogengine::SpeakableString>::__destroy_vector::operator()[abi:ne180100]((void ***)&v12);
  }
  siri::dialogengine::VariableArray::SetItems(this, (uint64_t)v11);
  v10.__r_.__value_.__r.__words[0] = (std::string::size_type)v11;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v10);
}

void sub_1BF8EDCF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void **v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  va_copy((va_list)v4, va1);
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<siri::dialogengine::SpeakableString>::__destroy_vector::operator()[abi:ne180100]((void ***)va1);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::shared_ptr<siri::dialogengine::Variable>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::Variable>*,std::shared_ptr<siri::dialogengine::Variable>*>(_QWORD *result, _QWORD *a2, _QWORD *a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  if (a4)
  {
    if (a4 >> 60)
      std::vector<BOOL>::__throw_length_error[abi:ne180100]();
    v6 = result;
    result = std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>>(a4);
    *v6 = result;
    v6[1] = result;
    v6[2] = &result[2 * v7];
    while (a2 != a3)
    {
      *result = *a2;
      v8 = a2[1];
      result[1] = v8;
      if (v8)
      {
        v9 = (unint64_t *)(v8 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      a2 += 2;
      result += 2;
    }
    v6[1] = result;
  }
  return result;
}

void sub_1BF8EDDE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void std::vector<siri::dialogengine::SpeakableString>::__vdeallocate(void **a1)
{
  void **v1;
  void **v3;
  void *v4;

  v1 = (void **)*a1;
  if (*a1)
  {
    v3 = (void **)a1[1];
    v4 = v1;
    if (v3 != v1)
    {
      do
        siri::dialogengine::SpeakableString::~SpeakableString(v3 - 21);
      while (v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

BOOL siri::dialogengine::VariableArray::Contains(siri::dialogengine::VariableArray *this, siri::dialogengine::Context *a2, uint64_t *a3)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  std::string::size_type size;
  std::__shared_weak_count *v12;
  const void *v13;
  unint64_t *v14;
  unint64_t v15;
  _BOOL8 ArrayItemAny;
  unint64_t *v17;
  unint64_t v18;
  std::string __p;
  const void *v21;
  std::__shared_weak_count *v22;
  uint64_t v23[5];
  std::string v24;
  void **v25;

  v5 = *a3;
  v6 = (std::__shared_weak_count *)a3[1];
  v23[3] = *a3;
  v23[4] = (uint64_t)v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  siri::dialogengine::ValidateTargetType(&v24, a2, this, v5);
  if (v6)
  {
    v9 = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  size = HIBYTE(v24.__r_.__value_.__r.__words[2]);
  if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v24.__r_.__value_.__l.__size_;
  if (size)
  {
    memset(v23, 0, 24);
    std::vector<std::shared_ptr<siri::dialogengine::Variable>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::Variable>*,std::shared_ptr<siri::dialogengine::Variable>*>(v23, *((_QWORD **)this + 9), *((_QWORD **)this + 10), (uint64_t)(*((_QWORD *)this + 10) - *((_QWORD *)this + 9)) >> 4);
    v13 = (const void *)*a3;
    v12 = (std::__shared_weak_count *)a3[1];
    v21 = v13;
    v22 = v12;
    if (v12)
    {
      v14 = (unint64_t *)&v12->__shared_owners_;
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&__p, v24.__r_.__value_.__l.__data_, v24.__r_.__value_.__l.__size_);
    else
      __p = v24;
    ArrayItemAny = siri::dialogengine::FindArrayItemAny(v23, v13, v12, (const void **)&__p.__r_.__value_.__l.__data_, 0);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v12)
    {
      v17 = (unint64_t *)&v12->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    v25 = (void **)v23;
    std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100](&v25);
    if ((*((_BYTE *)&v24.__r_.__value_.__s + 23) & 0x80) != 0)
      goto LABEL_28;
  }
  else
  {
    ArrayItemAny = 0;
    if ((*((_BYTE *)&v24.__r_.__value_.__s + 23) & 0x80) != 0)
LABEL_28:
      operator delete(v24.__r_.__value_.__l.__data_);
  }
  return ArrayItemAny;
}

void sub_1BF8EDFF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, char a20)
{
  uint64_t v20;

  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  *(_QWORD *)(v20 - 40) = &a17;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v20 - 40));
  if (*(char *)(v20 - 41) < 0)
    operator delete(*(void **)(v20 - 64));
  _Unwind_Resume(a1);
}

void siri::dialogengine::ValidateTargetType(std::string *a1, siri::dialogengine::Context *a2, siri::dialogengine::VariableArray *this, uint64_t a4)
{
  void **v7;
  std::string::size_type size;
  unint64_t v9;
  int v10;
  uint64_t v11;
  std::string *v12;
  int v13;
  int v14;
  int v15;
  _BOOL4 v16;
  void *__p[2];
  unsigned __int8 v19;
  std::string v20;

  if (!a2 || !a4)
  {
    std::string::basic_string[abi:ne180100]<0>(a1, "");
    return;
  }
  if (*(char *)(a4 + 55) < 0)
    std::string::__init_copy_ctor_external(&v20, *(const std::string::value_type **)(a4 + 32), *(_QWORD *)(a4 + 40));
  else
    v20 = *(std::string *)(a4 + 32);
  siri::dialogengine::VariableArray::GetConcreteType(this, a2, (uint64_t)__p);
  if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v20.__r_.__value_.__r.__words[2]);
  else
    size = v20.__r_.__value_.__l.__size_;
  v9 = v19;
  v10 = (char)v19;
  if ((v19 & 0x80u) != 0)
    v9 = (unint64_t)__p[1];
  if (size != v9)
  {
    v16 = 1;
    if (((char)v19 & 0x80000000) == 0)
      goto LABEL_29;
    goto LABEL_32;
  }
  if ((v19 & 0x80u) == 0)
    v7 = __p;
  else
    v7 = (void **)__p[0];
  if ((*((_BYTE *)&v20.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    v16 = memcmp(v20.__r_.__value_.__l.__data_, v7, v20.__r_.__value_.__l.__size_) != 0;
    goto LABEL_28;
  }
  if (*((_BYTE *)&v20.__r_.__value_.__s + 23))
  {
    v11 = HIBYTE(v20.__r_.__value_.__r.__words[2]) - 1;
    v12 = &v20;
    do
    {
      v14 = v12->__r_.__value_.__s.__data_[0];
      v12 = (std::string *)((char *)v12 + 1);
      v13 = v14;
      v15 = *(unsigned __int8 *)v7;
      v7 = (void **)((char *)v7 + 1);
      v16 = v13 != v15;
    }
    while (v13 == v15 && v11-- != 0);
LABEL_28:
    if ((v10 & 0x80000000) == 0)
      goto LABEL_29;
LABEL_32:
    operator delete(__p[0]);
    if (v16)
      goto LABEL_30;
    goto LABEL_33;
  }
  v16 = 0;
  if ((char)v19 < 0)
    goto LABEL_32;
LABEL_29:
  if (v16)
  {
LABEL_30:
    siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"Target type and concrete type of dialog.Array do not match!", (const char *)v7);
    std::string::basic_string[abi:ne180100]<0>(a1, "");
    goto LABEL_36;
  }
LABEL_33:
  if ((SHIBYTE(v20.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    *a1 = v20;
    return;
  }
  std::string::__init_copy_ctor_external(a1, v20.__r_.__value_.__l.__data_, v20.__r_.__value_.__l.__size_);
LABEL_36:
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
}

void sub_1BF8EE1F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL siri::dialogengine::FindArrayItemAny(uint64_t *a1, const void *a2, std::__shared_weak_count *a3, const void **a4, int a5)
{
  size_t v10;
  size_t v11;
  size_t v12;
  const void **v13;
  char *v14;
  size_t v15;
  size_t v16;
  const void *v17;
  char *v18;
  size_t v19;
  char *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  double *v23;
  unint64_t *v24;
  unint64_t v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  _BOOL8 v29;
  double *v31;
  unint64_t *v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  const void *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  double *v41;
  unint64_t *v42;
  unint64_t v43;
  double v44;
  BOOL v45;
  std::string *v46;
  __int128 v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  const void *v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  _BYTE *v59;
  unint64_t *v60;
  unint64_t v61;
  int v62;
  char v63;
  std::string *v64;
  __int128 v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  const void *v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  char *v74;
  unint64_t *v75;
  unint64_t v76;
  BOOL v77;
  char v78;
  std::string::size_type size;
  std::string::size_type v80;
  std::string *v81;
  uint64_t v82;
  std::string *v83;
  int v84;
  int v85;
  int v86;
  int v87;
  BOOL v89;
  std::string *v90;
  __int128 v91;
  std::string::size_type v92;
  char v93;
  std::string::size_type v94;
  std::string *v95;
  std::string::size_type v96;
  std::string *v97;
  std::string::size_type v98;
  size_t v99;
  int v100;
  std::string::size_type v101;
  std::string *v102;
  std::string::size_type v103;
  std::string *v104;
  size_t v105;
  int v106;
  void *v107;
  unint64_t *v108;
  unint64_t v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  uint64_t v119;
  unint64_t *v120;
  std::string v121;
  int v122;
  unsigned __int8 v123;
  std::string __p;
  char *v125;
  std::__shared_weak_count *v126;
  const void *v127;
  std::__shared_weak_count *v128;
  std::string v129;
  double *v130;
  std::__shared_weak_count *v131;
  std::string v132;
  std::string v133;

  v10 = strlen(siri::dialogengine::TYPE_STRING[0]);
  v11 = v10;
  v12 = *((unsigned __int8 *)a4 + 23);
  if (*((char *)a4 + 23) < 0)
  {
    v16 = (size_t)a4[1];
    if (v10 != v16)
    {
      v14 = siri::dialogengine::TYPE_NUMBER[0];
      v15 = strlen(siri::dialogengine::TYPE_NUMBER[0]);
      goto LABEL_20;
    }
    if (v10 == -1)
      std::string::__throw_out_of_range[abi:ne180100]();
    v13 = (const void **)*a4;
  }
  else
  {
    v13 = a4;
    if (v11 != v12)
    {
      v14 = siri::dialogengine::TYPE_NUMBER[0];
      v15 = strlen(siri::dialogengine::TYPE_NUMBER[0]);
      goto LABEL_9;
    }
  }
  if (!memcmp(v13, siri::dialogengine::TYPE_STRING[0], v11))
  {
    if (a2
    {
      v125 = v20;
      v126 = a3;
      if (a3)
      {
        p_shared_owners = (unint64_t *)&a3->__shared_owners_;
        do
          v22 = __ldxr(p_shared_owners);
        while (__stxr(v22 + 1, p_shared_owners));
      }
      if (v20[95] < 0)
        std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)v20 + 9), *((_QWORD *)v20 + 10));
      else
        __p = *(std::string *)(v20 + 3);
    }
    else
    {
      v125 = 0;
      v126 = 0;
      std::string::basic_string[abi:ne180100]<0>(&__p, "");
    }
    v27 = *a1;
    v28 = a1[1];
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v121, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    else
      v121 = __p;
    v122 = a5;
    v123 = 1;
    if (v27 != v28)
    {
      while (1)
      {
        v70 = *(const void **)v27;
        v71 = *(std::__shared_weak_count **)(v27 + 8);
        v127 = *(const void **)v27;
        v128 = v71;
        if (v71)
        {
          v72 = (unint64_t *)&v71->__shared_owners_;
          do
            v73 = __ldxr(v72);
          while (__stxr(v73 + 1, v72));
        }
        if (v70
        {
          v130 = (double *)v74;
          v131 = v71;
          if (v71)
          {
            v75 = (unint64_t *)&v71->__shared_owners_;
            do
              v76 = __ldxr(v75);
            while (__stxr(v76 + 1, v75));
          }
          if (v74[95] < 0)
            std::string::__init_copy_ctor_external(&v133, *((const std::string::value_type **)v74 + 9), *((_QWORD *)v74 + 10));
          else
            v133 = *(std::string *)(v74 + 3);
          switch(v122)
          {
            case 0:
              v78 = HIBYTE(v133.__r_.__value_.__r.__words[2]);
              if ((v133.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                size = HIBYTE(v133.__r_.__value_.__r.__words[2]);
              else
                size = v133.__r_.__value_.__l.__size_;
              v80 = HIBYTE(v121.__r_.__value_.__r.__words[2]);
              if ((v121.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v80 = v121.__r_.__value_.__l.__size_;
              if (size == v80)
              {
                if ((v121.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v81 = &v121;
                else
                  v81 = (std::string *)v121.__r_.__value_.__r.__words[0];
                if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0)
                {
                  v107 = (void *)v133.__r_.__value_.__r.__words[0];
                  v77 = memcmp(v133.__r_.__value_.__l.__data_, v81, v133.__r_.__value_.__l.__size_) == 0;
                  goto LABEL_254;
                }
                if (*((_BYTE *)&v133.__r_.__value_.__s + 23))
                {
                  v82 = HIBYTE(v133.__r_.__value_.__r.__words[2]) - 1;
                  v83 = &v133;
                  do
                  {
                    v85 = v83->__r_.__value_.__s.__data_[0];
                    v83 = (std::string *)((char *)v83 + 1);
                    v84 = v85;
                    v87 = v81->__r_.__value_.__s.__data_[0];
                    v81 = (std::string *)((char *)v81 + 1);
                    v86 = v87;
                    v89 = v82-- != 0;
                    v77 = v84 == v86;
                  }
                  while (v84 == v86 && v89);
                  goto LABEL_252;
                }
                v77 = 1;
              }
              else
              {
                v77 = 0;
                if ((*((_BYTE *)&v133.__r_.__value_.__s + 23) & 0x80) != 0)
                  goto LABEL_253;
              }
              goto LABEL_255;
            case 1:
              v93 = HIBYTE(v133.__r_.__value_.__r.__words[2]);
              if ((v121.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v94 = HIBYTE(v121.__r_.__value_.__r.__words[2]);
              else
                v94 = v121.__r_.__value_.__l.__size_;
              if ((v121.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v95 = &v121;
              else
                v95 = (std::string *)v121.__r_.__value_.__r.__words[0];
              if ((v133.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v96 = HIBYTE(v133.__r_.__value_.__r.__words[2]);
              else
                v96 = v133.__r_.__value_.__l.__size_;
              if ((v133.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v97 = &v133;
              else
                v97 = (std::string *)v133.__r_.__value_.__r.__words[0];
              goto LABEL_214;
            case 2:
              v93 = HIBYTE(v133.__r_.__value_.__r.__words[2]);
              if ((v133.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v94 = HIBYTE(v133.__r_.__value_.__r.__words[2]);
              else
                v94 = v133.__r_.__value_.__l.__size_;
              if ((v133.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v95 = &v133;
              else
                v95 = (std::string *)v133.__r_.__value_.__r.__words[0];
              if ((v121.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v96 = HIBYTE(v121.__r_.__value_.__r.__words[2]);
              else
                v96 = v121.__r_.__value_.__l.__size_;
              if ((v121.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v97 = &v121;
              else
                v97 = (std::string *)v121.__r_.__value_.__r.__words[0];
LABEL_214:
              if (v96 >= v94)
                v99 = v94;
              else
                v99 = v96;
              v100 = memcmp(v95, v97, v99);
              if (v100)
                v77 = v100 < 0;
              else
                v77 = v94 < v96;
              if (v93 < 0)
                goto LABEL_253;
              goto LABEL_255;
            case 3:
              v78 = HIBYTE(v133.__r_.__value_.__r.__words[2]);
              if ((v133.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v101 = HIBYTE(v133.__r_.__value_.__r.__words[2]);
              else
                v101 = v133.__r_.__value_.__l.__size_;
              if ((v133.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v102 = &v133;
              else
                v102 = (std::string *)v133.__r_.__value_.__r.__words[0];
              if ((v121.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v103 = HIBYTE(v121.__r_.__value_.__r.__words[2]);
              else
                v103 = v121.__r_.__value_.__l.__size_;
              if ((v121.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v104 = &v121;
              else
                v104 = (std::string *)v121.__r_.__value_.__r.__words[0];
              goto LABEL_246;
            case 4:
              v78 = HIBYTE(v133.__r_.__value_.__r.__words[2]);
              if ((v121.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v101 = HIBYTE(v121.__r_.__value_.__r.__words[2]);
              else
                v101 = v121.__r_.__value_.__l.__size_;
              if ((v121.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v102 = &v121;
              else
                v102 = (std::string *)v121.__r_.__value_.__r.__words[0];
              if ((v133.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v103 = HIBYTE(v133.__r_.__value_.__r.__words[2]);
              else
                v103 = v133.__r_.__value_.__l.__size_;
              if ((v133.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v104 = &v133;
              else
                v104 = (std::string *)v133.__r_.__value_.__r.__words[0];
LABEL_246:
              if (v103 >= v101)
                v105 = v101;
              else
                v105 = v103;
              v106 = memcmp(v102, v104, v105);
              if (v106)
                v77 = v106 >= 0;
              else
                v77 = v101 >= v103;
LABEL_252:
              if (v78 < 0)
                goto LABEL_253;
              goto LABEL_255;
            case 7:
              v92 = HIBYTE(v133.__r_.__value_.__r.__words[2]);
              if ((v133.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v92 = v133.__r_.__value_.__l.__size_;
              v77 = v92 == 0;
              if ((*((_BYTE *)&v133.__r_.__value_.__s + 23) & 0x80) != 0)
                goto LABEL_253;
              goto LABEL_255;
            case 8:
              v98 = HIBYTE(v133.__r_.__value_.__r.__words[2]);
              if ((v133.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v98 = v133.__r_.__value_.__l.__size_;
              v77 = v98 != 0;
              if ((*((_BYTE *)&v133.__r_.__value_.__s + 23) & 0x80) != 0)
                goto LABEL_253;
              goto LABEL_255;
            default:
              siri::dialogengine::ArrayComparatorToString(&v129, v122, v123);
              v90 = std::string::insert(&v129, 0, "Unkown comparator type: ");
              v91 = *(_OWORD *)&v90->__r_.__value_.__l.__data_;
              v132.__r_.__value_.__r.__words[2] = v90->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v132.__r_.__value_.__l.__data_ = v91;
              v90->__r_.__value_.__l.__size_ = 0;
              v90->__r_.__value_.__r.__words[2] = 0;
              v90->__r_.__value_.__r.__words[0] = 0;
              siri::dialogengine::Log::Debug((siri::dialogengine *)&v132);
              if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v132.__r_.__value_.__l.__data_);
              if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v129.__r_.__value_.__l.__data_);
              v77 = 0;
              if ((*((_BYTE *)&v133.__r_.__value_.__s + 23) & 0x80) != 0)
              {
LABEL_253:
                v107 = (void *)v133.__r_.__value_.__r.__words[0];
LABEL_254:
                operator delete(v107);
              }
LABEL_255:
              if (v71)
              {
                v108 = (unint64_t *)&v71->__shared_owners_;
                do
                  v109 = __ldaxr(v108);
                while (__stlxr(v109 - 1, v108));
                if (!v109)
                {
                  ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
                  std::__shared_weak_count::__release_weak(v71);
                }
              }
              break;
          }
        }
        else
        {
          v77 = 0;
        }
        v110 = v128;
        if (v128)
        {
          v111 = (unint64_t *)&v128->__shared_owners_;
          do
            v112 = __ldaxr(v111);
          while (__stlxr(v112 - 1, v111));
          if (!v112)
          {
            ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
            std::__shared_weak_count::__release_weak(v110);
          }
        }
        if (v77)
          break;
        v27 += 16;
        if (v27 == v28)
        {
          v27 = v28;
          break;
        }
      }
    }
    if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v121.__r_.__value_.__l.__data_);
    v29 = v27 != a1[1];
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v113 = v126;
    if (v126)
    {
      v114 = (unint64_t *)&v126->__shared_owners_;
      do
        v115 = __ldaxr(v114);
      while (__stlxr(v115 - 1, v114));
      if (!v115)
      {
        ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
        v116 = v113;
        goto LABEL_293;
      }
    }
    return v29;
  }
  v14 = siri::dialogengine::TYPE_NUMBER[0];
  v15 = strlen(siri::dialogengine::TYPE_NUMBER[0]);
  if ((v12 & 0x80) == 0)
  {
LABEL_9:
    v16 = v12;
    v17 = a4;
    if (v15 != v12)
    {
      v18 = siri::dialogengine::TYPE_BOOLEAN;
      v19 = strlen(siri::dialogengine::TYPE_BOOLEAN);
      goto LABEL_25;
    }
    goto LABEL_23;
  }
  v16 = (size_t)a4[1];
LABEL_20:
  if (v15 != v16)
  {
    v18 = siri::dialogengine::TYPE_BOOLEAN;
    v19 = strlen(siri::dialogengine::TYPE_BOOLEAN);
    goto LABEL_38;
  }
  if (v16 == -1)
    std::string::__throw_out_of_range[abi:ne180100]();
  v17 = *a4;
LABEL_23:
  if (memcmp(v17, v14, v16))
  {
    v18 = siri::dialogengine::TYPE_BOOLEAN;
    v19 = strlen(siri::dialogengine::TYPE_BOOLEAN);
    if ((v12 & 0x80) == 0)
    {
LABEL_25:
      v16 = v12;
      if (v19 != v12)
        return 0;
      goto LABEL_41;
    }
    v16 = (size_t)a4[1];
LABEL_38:
    if (v19 != v16)
      return 0;
    if (v16 == -1)
      std::string::__throw_out_of_range[abi:ne180100]();
    a4 = (const void **)*a4;
LABEL_41:
    if (memcmp(a4, v18, v16))
      return 0;
    if (a2
    {
      v130 = v31;
      v131 = a3;
      if (a3)
      {
        v32 = (unint64_t *)&a3->__shared_owners_;
        do
          v33 = __ldxr(v32);
        while (__stxr(v33 + 1, v32));
      }
      v34 = *((_BYTE *)v31 + 66) != 0;
    }
    else
    {
      a3 = 0;
      v34 = 0;
      v130 = 0;
      v131 = 0;
    }
    v53 = *a1;
    v54 = a1[1];
    if (*a1 == v54)
    {
      v119 = *a1;
    }
    else
    {
      while (1)
      {
        v55 = *(const void **)v53;
        v56 = *(std::__shared_weak_count **)(v53 + 8);
        __p.__r_.__value_.__r.__words[0] = *(_QWORD *)v53;
        __p.__r_.__value_.__l.__size_ = (std::string::size_type)v56;
        if (v56)
        {
          v57 = (unint64_t *)&v56->__shared_owners_;
          do
            v58 = __ldxr(v57);
          while (__stxr(v58 + 1, v57));
        }
        if (v55
        {
          v129.__r_.__value_.__r.__words[0] = (std::string::size_type)v59;
          v129.__r_.__value_.__l.__size_ = (std::string::size_type)v56;
          if (v56)
          {
            v60 = (unint64_t *)&v56->__shared_owners_;
            do
              v61 = __ldxr(v60);
            while (__stxr(v61 + 1, v60));
          }
          v62 = v59[66];
          v63 = v59[66] != 0;
          switch(a5)
          {
            case 0:
              v63 = v34 ^ (v62 != 0) ^ 1;
              if (v56)
                goto LABEL_129;
              break;
            case 1:
              if (v59[66])
                v63 = !v34;
              else
                v63 = 0;
              if (v56)
                goto LABEL_129;
              break;
            case 2:
              if (v59[66])
                v63 = 0;
              else
                v63 = v34;
              if (v56)
                goto LABEL_129;
              break;
            case 3:
              if (v59[66])
                v63 = 1;
              else
                v63 = !v34;
              if (v56)
                goto LABEL_129;
              break;
            case 4:
              if (v59[66])
                v63 = v34;
              else
                v63 = 1;
              goto LABEL_128;
            case 5:
LABEL_128:
              if (v56)
                goto LABEL_129;
              break;
            case 6:
              v63 = v62 == 0;
              if (!v56)
                break;
              goto LABEL_129;
            default:
              siri::dialogengine::ArrayComparatorToString(&v132, a5, 1);
              v64 = std::string::insert(&v132, 0, "Unkown comparator type: ");
              v65 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
              v133.__r_.__value_.__r.__words[2] = v64->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v133.__r_.__value_.__l.__data_ = v65;
              v64->__r_.__value_.__l.__size_ = 0;
              v64->__r_.__value_.__r.__words[2] = 0;
              v64->__r_.__value_.__r.__words[0] = 0;
              siri::dialogengine::Log::Debug((siri::dialogengine *)&v133);
              if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v133.__r_.__value_.__l.__data_);
              if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v132.__r_.__value_.__l.__data_);
              v63 = 0;
              if (!v56)
                break;
LABEL_129:
              v66 = (unint64_t *)&v56->__shared_owners_;
              do
                v67 = __ldaxr(v66);
              while (__stlxr(v67 - 1, v66));
              if (!v67)
              {
                ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
                std::__shared_weak_count::__release_weak(v56);
              }
              break;
          }
        }
        else
        {
          v63 = 0;
        }
        if (__p.__r_.__value_.__l.__size_)
        {
          v68 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
          do
            v69 = __ldaxr(v68);
          while (__stlxr(v69 - 1, v68));
          if (!v69)
          {
            (*(void (**)(std::string::size_type))(*(_QWORD *)__p.__r_.__value_.__l.__size_ + 16))(__p.__r_.__value_.__l.__size_);
            std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
          }
        }
        if ((v63 & 1) != 0)
          break;
        v53 += 16;
        if (v53 == v54)
        {
          v53 = v54;
          break;
        }
      }
      v119 = v53;
      v53 = a1[1];
      a3 = v131;
    }
    v29 = v119 != v53;
    if (a3)
    {
      v120 = (unint64_t *)&a3->__shared_owners_;
      do
        v118 = __ldaxr(v120);
      while (__stlxr(v118 - 1, v120));
LABEL_291:
      if (v118)
        return v29;
      ((void (*)(std::__shared_weak_count *))a3->__on_zero_shared)(a3);
      v116 = a3;
LABEL_293:
      std::__shared_weak_count::__release_weak(v116);
      return v29;
    }
    return v29;
  }
  if (a2
  {
    v130 = v23;
    v131 = a3;
    if (a3)
    {
      v24 = (unint64_t *)&a3->__shared_owners_;
      do
        v25 = __ldxr(v24);
      while (__stxr(v25 + 1, v24));
    }
    v26 = v23[9];
  }
  else
  {
    a3 = 0;
    v130 = 0;
    v131 = 0;
    v26 = 0.0;
  }
  v35 = *a1;
  v36 = a1[1];
  if (*a1 == v36)
  {
    v52 = *a1;
  }
  else
  {
    while (1)
    {
      v37 = *(const void **)v35;
      v38 = *(std::__shared_weak_count **)(v35 + 8);
      __p.__r_.__value_.__r.__words[0] = *(_QWORD *)v35;
      __p.__r_.__value_.__l.__size_ = (std::string::size_type)v38;
      if (v38)
      {
        v39 = (unint64_t *)&v38->__shared_owners_;
        do
          v40 = __ldxr(v39);
        while (__stxr(v40 + 1, v39));
      }
      if (v37
      {
        v129.__r_.__value_.__r.__words[0] = (std::string::size_type)v41;
        v129.__r_.__value_.__l.__size_ = (std::string::size_type)v38;
        if (v38)
        {
          v42 = (unint64_t *)&v38->__shared_owners_;
          do
            v43 = __ldxr(v42);
          while (__stxr(v43 + 1, v42));
        }
        v44 = v41[9];
        switch(a5)
        {
          case 0:
            v45 = v44 == v26;
            if (v38)
              goto LABEL_77;
            break;
          case 1:
            v45 = v44 > v26;
            if (v38)
              goto LABEL_77;
            break;
          case 2:
            v45 = v44 < v26;
            if (v38)
              goto LABEL_77;
            break;
          case 3:
            v45 = v44 >= v26;
            if (v38)
              goto LABEL_77;
            break;
          case 4:
            v45 = v44 <= v26;
            if (v38)
              goto LABEL_77;
            break;
          default:
            siri::dialogengine::ArrayComparatorToString(&v132, a5, 1);
            v46 = std::string::insert(&v132, 0, "Unkown comparator type: ");
            v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
            v133.__r_.__value_.__r.__words[2] = v46->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v133.__r_.__value_.__l.__data_ = v47;
            v46->__r_.__value_.__l.__size_ = 0;
            v46->__r_.__value_.__r.__words[2] = 0;
            v46->__r_.__value_.__r.__words[0] = 0;
            siri::dialogengine::Log::Debug((siri::dialogengine *)&v133);
            if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v133.__r_.__value_.__l.__data_);
            if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v132.__r_.__value_.__l.__data_);
            v45 = 0;
            if (v38)
            {
LABEL_77:
              v48 = (unint64_t *)&v38->__shared_owners_;
              do
                v49 = __ldaxr(v48);
              while (__stlxr(v49 - 1, v48));
              if (!v49)
              {
                ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
                std::__shared_weak_count::__release_weak(v38);
              }
            }
            break;
        }
      }
      else
      {
        v45 = 0;
      }
      if (__p.__r_.__value_.__l.__size_)
      {
        v50 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
        do
          v51 = __ldaxr(v50);
        while (__stlxr(v51 - 1, v50));
        if (!v51)
        {
          (*(void (**)(std::string::size_type))(*(_QWORD *)__p.__r_.__value_.__l.__size_ + 16))(__p.__r_.__value_.__l.__size_);
          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
        }
      }
      if (v45)
        break;
      v35 += 16;
      if (v35 == v36)
      {
        v35 = v36;
        break;
      }
    }
    v52 = v35;
    v35 = a1[1];
    a3 = v131;
  }
  v29 = v52 != v35;
  if (a3)
  {
    v117 = (unint64_t *)&a3->__shared_owners_;
    do
      v118 = __ldaxr(v117);
    while (__stlxr(v118 - 1, v117));
    goto LABEL_291;
  }
  return v29;
}

void sub_1BF8EEDF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,char a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  uint64_t v41;

  if (*(char *)(v41 - 105) < 0)
    operator delete(*(void **)(v41 - 128));
  if (a41 < 0)
    operator delete(__p);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a28);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a34);
  _Unwind_Resume(a1);
}

_QWORD *siri::dialogengine::ArrayComparatorToString(_QWORD *a1, int a2, int a3)
{
  const char *v3;
  const char *v4;
  char *v5;

  switch(a2)
  {
    case 0:
      v3 = "all_eq";
      v4 = "contains";
      goto LABEL_13;
    case 1:
      v3 = "all_gt";
      v4 = "any_gt";
      goto LABEL_13;
    case 2:
      v3 = "all_lt";
      v4 = "any_lt";
      goto LABEL_13;
    case 3:
      v3 = "all_gte";
      v4 = "any_gte";
      goto LABEL_13;
    case 4:
      v3 = "all_lte";
      v4 = "any_lte";
      goto LABEL_13;
    case 5:
      v3 = "all_set";
      v4 = "any_set";
      goto LABEL_13;
    case 6:
      v3 = "all_unset";
      v4 = "any_unset";
      goto LABEL_13;
    case 7:
      v3 = "all_empty";
      v4 = "any_empty";
      goto LABEL_13;
    case 8:
      v3 = "all_nonempty";
      v4 = "any_nonempty";
LABEL_13:
      if (a3)
        v5 = (char *)v4;
      else
        v5 = (char *)v3;
      break;
    default:
      v5 = "unknown";
      break;
  }
  return std::string::basic_string[abi:ne180100]<0>(a1, v5);
}

uint64_t siri::dialogengine::VariableArray::AllEqual(siri::dialogengine::VariableArray *this, siri::dialogengine::Context *a2, uint64_t *a3)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  std::string::size_type size;
  std::__shared_weak_count *v12;
  const void *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t ArrayItemAll;
  unint64_t *v17;
  unint64_t v18;
  std::string __p;
  const void *v21;
  std::__shared_weak_count *v22;
  uint64_t v23[5];
  std::string v24;
  void **v25;

  v5 = *a3;
  v6 = (std::__shared_weak_count *)a3[1];
  v23[3] = *a3;
  v23[4] = (uint64_t)v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  siri::dialogengine::ValidateTargetType(&v24, a2, this, v5);
  if (v6)
  {
    v9 = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  size = HIBYTE(v24.__r_.__value_.__r.__words[2]);
  if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v24.__r_.__value_.__l.__size_;
  if (size)
  {
    memset(v23, 0, 24);
    std::vector<std::shared_ptr<siri::dialogengine::Variable>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::Variable>*,std::shared_ptr<siri::dialogengine::Variable>*>(v23, *((_QWORD **)this + 9), *((_QWORD **)this + 10), (uint64_t)(*((_QWORD *)this + 10) - *((_QWORD *)this + 9)) >> 4);
    v13 = (const void *)*a3;
    v12 = (std::__shared_weak_count *)a3[1];
    v21 = v13;
    v22 = v12;
    if (v12)
    {
      v14 = (unint64_t *)&v12->__shared_owners_;
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&__p, v24.__r_.__value_.__l.__data_, v24.__r_.__value_.__l.__size_);
    else
      __p = v24;
    ArrayItemAll = siri::dialogengine::FindArrayItemAll(v23, v13, v12, (const void **)&__p.__r_.__value_.__l.__data_, 0);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v12)
    {
      v17 = (unint64_t *)&v12->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    v25 = (void **)v23;
    std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100](&v25);
    if ((*((_BYTE *)&v24.__r_.__value_.__s + 23) & 0x80) != 0)
      goto LABEL_28;
  }
  else
  {
    ArrayItemAll = 0;
    if ((*((_BYTE *)&v24.__r_.__value_.__s + 23) & 0x80) != 0)
LABEL_28:
      operator delete(v24.__r_.__value_.__l.__data_);
  }
  return ArrayItemAll;
}

void sub_1BF8EF1C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, char a20)
{
  uint64_t v20;

  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  *(_QWORD *)(v20 - 40) = &a17;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v20 - 40));
  if (*(char *)(v20 - 41) < 0)
    operator delete(*(void **)(v20 - 64));
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::FindArrayItemAll(uint64_t *a1, const void *a2, std::__shared_weak_count *a3, const void **a4, int a5)
{
  size_t v10;
  size_t v11;
  size_t v12;
  const void **v13;
  char *v14;
  size_t v15;
  size_t v16;
  const void *v17;
  char *v18;
  size_t v19;
  char *v20;
  unint64_t *v21;
  unint64_t v22;
  double *v23;
  unint64_t *v24;
  unint64_t v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  _BOOL4 v34;
  uint64_t v35;
  uint64_t v36;
  const void *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  double *v41;
  unint64_t *v42;
  unint64_t v43;
  double v44;
  std::string *v45;
  __int128 v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  const void *v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  _BYTE *v58;
  unint64_t *v59;
  unint64_t v60;
  int v61;
  std::string *v62;
  __int128 v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  char v68;
  const void *v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  char *v73;
  unint64_t *v74;
  unint64_t v75;
  char v76;
  std::string::size_type size;
  std::string::size_type v78;
  std::string *v79;
  uint64_t v80;
  std::string *v81;
  int v82;
  int v83;
  int v84;
  int v85;
  BOOL v87;
  std::string *v88;
  __int128 v89;
  std::string::size_type v90;
  char v91;
  std::string::size_type v92;
  std::string *v93;
  std::string::size_type v94;
  std::string *v95;
  std::string::size_type v96;
  size_t v97;
  int v98;
  std::string::size_type v99;
  std::string *v100;
  std::string::size_type v101;
  std::string *v102;
  size_t v103;
  int v104;
  void *v105;
  unint64_t *v106;
  unint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  char v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  unint64_t *v118;
  unsigned int v119;
  std::string v120;
  int v121;
  unsigned __int8 v122;
  std::string __p;
  char *v124;
  std::__shared_weak_count *v125;
  const void *v126;
  std::__shared_weak_count *v127;
  std::string v128;
  double *v129;
  std::__shared_weak_count *v130;
  std::string v131;
  std::string v132;

  v10 = strlen(siri::dialogengine::TYPE_STRING[0]);
  v11 = v10;
  v12 = *((unsigned __int8 *)a4 + 23);
  if (*((char *)a4 + 23) < 0)
  {
    v16 = (size_t)a4[1];
    if (v10 != v16)
    {
      v14 = siri::dialogengine::TYPE_NUMBER[0];
      v15 = strlen(siri::dialogengine::TYPE_NUMBER[0]);
      goto LABEL_20;
    }
    if (v10 == -1)
      std::string::__throw_out_of_range[abi:ne180100]();
    v13 = (const void **)*a4;
  }
  else
  {
    v13 = a4;
    if (v11 != v12)
    {
      v14 = siri::dialogengine::TYPE_NUMBER[0];
      v15 = strlen(siri::dialogengine::TYPE_NUMBER[0]);
      goto LABEL_9;
    }
  }
  if (memcmp(v13, siri::dialogengine::TYPE_STRING[0], v11))
  {
    v14 = siri::dialogengine::TYPE_NUMBER[0];
    v15 = strlen(siri::dialogengine::TYPE_NUMBER[0]);
    if ((v12 & 0x80) == 0)
    {
LABEL_9:
      v16 = v12;
      v17 = a4;
      if (v15 != v12)
      {
        v18 = siri::dialogengine::TYPE_BOOLEAN;
        v19 = strlen(siri::dialogengine::TYPE_BOOLEAN);
        goto LABEL_25;
      }
      goto LABEL_23;
    }
    v16 = (size_t)a4[1];
LABEL_20:
    if (v15 != v16)
    {
      v18 = siri::dialogengine::TYPE_BOOLEAN;
      v19 = strlen(siri::dialogengine::TYPE_BOOLEAN);
      goto LABEL_38;
    }
    if (v16 == -1)
      std::string::__throw_out_of_range[abi:ne180100]();
    v17 = *a4;
LABEL_23:
    if (memcmp(v17, v14, v16))
    {
      v18 = siri::dialogengine::TYPE_BOOLEAN;
      v19 = strlen(siri::dialogengine::TYPE_BOOLEAN);
      if ((v12 & 0x80) == 0)
      {
LABEL_25:
        v16 = v12;
        if (v19 != v12)
          return 0;
LABEL_41:
        if (memcmp(a4, v18, v16))
          return 0;
        if (a2
        {
          v129 = v31;
          v130 = a3;
          if (a3)
          {
            p_shared_owners = (unint64_t *)&a3->__shared_owners_;
            do
              v33 = __ldxr(p_shared_owners);
            while (__stxr(v33 + 1, p_shared_owners));
          }
          v34 = *((_BYTE *)v31 + 66) != 0;
        }
        else
        {
          a3 = 0;
          v34 = 0;
          v129 = 0;
          v130 = 0;
        }
        v52 = *a1;
        v53 = a1[1];
        if (*a1 == v53)
        {
          v29 = 1;
          if (!a3)
            return v29;
        }
        else
        {
          v119 = !v34;
          do
          {
            v54 = *(const void **)v52;
            v55 = *(std::__shared_weak_count **)(v52 + 8);
            __p.__r_.__value_.__r.__words[0] = *(_QWORD *)v52;
            __p.__r_.__value_.__l.__size_ = (std::string::size_type)v55;
            if (v55)
            {
              v56 = (unint64_t *)&v55->__shared_owners_;
              do
                v57 = __ldxr(v56);
              while (__stxr(v57 + 1, v56));
            }
            if (v54
            {
              v128.__r_.__value_.__r.__words[0] = (std::string::size_type)v58;
              v128.__r_.__value_.__l.__size_ = (std::string::size_type)v55;
              if (v55)
              {
                v59 = (unint64_t *)&v55->__shared_owners_;
                do
                  v60 = __ldxr(v59);
                while (__stxr(v60 + 1, v59));
              }
              v61 = v58[66];
              v29 = v58[66] != 0;
              switch(a5)
              {
                case 0:
                  v29 = v34 ^ (v61 != 0) ^ 1u;
                  if (v55)
                    goto LABEL_132;
                  break;
                case 1:
                  if (v58[66])
                    v29 = v119;
                  else
                    v29 = 0;
                  if (v55)
                    goto LABEL_132;
                  break;
                case 2:
                  if (v58[66])
                    v29 = 0;
                  else
                    v29 = v34;
                  if (v55)
                    goto LABEL_132;
                  break;
                case 3:
                  if (v58[66])
                    v29 = 1;
                  else
                    v29 = v119;
                  if (v55)
                    goto LABEL_132;
                  break;
                case 4:
                  if (v58[66])
                    v29 = v34;
                  else
                    v29 = 1;
                  goto LABEL_131;
                case 5:
LABEL_131:
                  if (v55)
                    goto LABEL_132;
                  break;
                case 6:
                  v29 = v61 == 0;
                  if (!v55)
                    break;
                  goto LABEL_132;
                default:
                  siri::dialogengine::ArrayComparatorToString(&v131, a5, 0);
                  v62 = std::string::insert(&v131, 0, "Unkown comparator type: ");
                  v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
                  v132.__r_.__value_.__r.__words[2] = v62->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v132.__r_.__value_.__l.__data_ = v63;
                  v62->__r_.__value_.__l.__size_ = 0;
                  v62->__r_.__value_.__r.__words[2] = 0;
                  v62->__r_.__value_.__r.__words[0] = 0;
                  siri::dialogengine::Log::Debug((siri::dialogengine *)&v132);
                  if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v132.__r_.__value_.__l.__data_);
                  if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v131.__r_.__value_.__l.__data_);
                  v29 = 0;
                  if (!v55)
                    break;
LABEL_132:
                  v64 = (unint64_t *)&v55->__shared_owners_;
                  do
                    v65 = __ldaxr(v64);
                  while (__stlxr(v65 - 1, v64));
                  if (!v65)
                  {
                    ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
                    std::__shared_weak_count::__release_weak(v55);
                  }
                  break;
              }
            }
            else
            {
              v29 = 0;
            }
            if (__p.__r_.__value_.__l.__size_)
            {
              v66 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
              do
                v67 = __ldaxr(v66);
              while (__stlxr(v67 - 1, v66));
              if (!v67)
              {
                (*(void (**)(std::string::size_type))(*(_QWORD *)__p.__r_.__value_.__l.__size_ + 16))(__p.__r_.__value_.__l.__size_);
                std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
              }
            }
            v52 += 16;
            if (v52 == v53)
              v68 = 0;
            else
              v68 = v29;
          }
          while ((v68 & 1) != 0);
          a3 = v130;
          if (!v130)
            return v29;
        }
        v118 = (unint64_t *)&a3->__shared_owners_;
        do
          v117 = __ldaxr(v118);
        while (__stlxr(v117 - 1, v118));
        goto LABEL_298;
      }
      v16 = (size_t)a4[1];
LABEL_38:
      if (v19 != v16)
        return 0;
      if (v16 == -1)
        std::string::__throw_out_of_range[abi:ne180100]();
      a4 = (const void **)*a4;
      goto LABEL_41;
    }
    if (a2
    {
      v129 = v23;
      v130 = a3;
      if (a3)
      {
        v24 = (unint64_t *)&a3->__shared_owners_;
        do
          v25 = __ldxr(v24);
        while (__stxr(v25 + 1, v24));
      }
      v26 = v23[9];
    }
    else
    {
      a3 = 0;
      v129 = 0;
      v130 = 0;
      v26 = 0.0;
    }
    v35 = *a1;
    v36 = a1[1];
    if (*a1 == v36)
    {
      v29 = 1;
      if (!a3)
        return v29;
    }
    else
    {
      do
      {
        v37 = *(const void **)v35;
        v38 = *(std::__shared_weak_count **)(v35 + 8);
        __p.__r_.__value_.__r.__words[0] = *(_QWORD *)v35;
        __p.__r_.__value_.__l.__size_ = (std::string::size_type)v38;
        if (v38)
        {
          v39 = (unint64_t *)&v38->__shared_owners_;
          do
            v40 = __ldxr(v39);
          while (__stxr(v40 + 1, v39));
        }
        if (v37
        {
          v128.__r_.__value_.__r.__words[0] = (std::string::size_type)v41;
          v128.__r_.__value_.__l.__size_ = (std::string::size_type)v38;
          if (v38)
          {
            v42 = (unint64_t *)&v38->__shared_owners_;
            do
              v43 = __ldxr(v42);
            while (__stxr(v43 + 1, v42));
          }
          v44 = v41[9];
          switch(a5)
          {
            case 0:
              v29 = v44 == v26;
              if (v38)
                goto LABEL_77;
              break;
            case 1:
              v29 = v44 > v26;
              if (v38)
                goto LABEL_77;
              break;
            case 2:
              v29 = v44 < v26;
              if (v38)
                goto LABEL_77;
              break;
            case 3:
              v29 = v44 >= v26;
              if (v38)
                goto LABEL_77;
              break;
            case 4:
              v29 = v44 <= v26;
              if (v38)
                goto LABEL_77;
              break;
            default:
              siri::dialogengine::ArrayComparatorToString(&v131, a5, 0);
              v45 = std::string::insert(&v131, 0, "Unkown comparator type: ");
              v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
              v132.__r_.__value_.__r.__words[2] = v45->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v132.__r_.__value_.__l.__data_ = v46;
              v45->__r_.__value_.__l.__size_ = 0;
              v45->__r_.__value_.__r.__words[2] = 0;
              v45->__r_.__value_.__r.__words[0] = 0;
              siri::dialogengine::Log::Debug((siri::dialogengine *)&v132);
              if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v132.__r_.__value_.__l.__data_);
              if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v131.__r_.__value_.__l.__data_);
              v29 = 0;
              if (v38)
              {
LABEL_77:
                v47 = (unint64_t *)&v38->__shared_owners_;
                do
                  v48 = __ldaxr(v47);
                while (__stlxr(v48 - 1, v47));
                if (!v48)
                {
                  ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
                  std::__shared_weak_count::__release_weak(v38);
                }
              }
              break;
          }
        }
        else
        {
          v29 = 0;
        }
        if (__p.__r_.__value_.__l.__size_)
        {
          v49 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
          do
            v50 = __ldaxr(v49);
          while (__stlxr(v50 - 1, v49));
          if (!v50)
          {
            (*(void (**)(std::string::size_type))(*(_QWORD *)__p.__r_.__value_.__l.__size_ + 16))(__p.__r_.__value_.__l.__size_);
            std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
          }
        }
        v35 += 16;
        if (v35 == v36)
          v51 = 0;
        else
          v51 = v29;
      }
      while ((v51 & 1) != 0);
      a3 = v130;
      if (!v130)
        return v29;
    }
    v116 = (unint64_t *)&a3->__shared_owners_;
    do
      v117 = __ldaxr(v116);
    while (__stlxr(v117 - 1, v116));
LABEL_298:
    if (v117)
      return v29;
    ((void (*)(std::__shared_weak_count *))a3->__on_zero_shared)(a3);
    v115 = a3;
LABEL_300:
    std::__shared_weak_count::__release_weak(v115);
    return v29;
  }
  if (a2
  {
    v124 = v20;
    v125 = a3;
    if (a3)
    {
      v21 = (unint64_t *)&a3->__shared_owners_;
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
    }
    if (v20[95] < 0)
      std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)v20 + 9), *((_QWORD *)v20 + 10));
    else
      __p = *(std::string *)(v20 + 3);
  }
  else
  {
    v124 = 0;
    v125 = 0;
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
  }
  v27 = *a1;
  v28 = a1[1];
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v120, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v120 = __p;
  v121 = a5;
  v122 = 0;
  if (v27 == v28)
  {
    v29 = 1;
  }
  else
  {
    do
    {
      v69 = *(const void **)v27;
      v70 = *(std::__shared_weak_count **)(v27 + 8);
      v126 = *(const void **)v27;
      v127 = v70;
      if (v70)
      {
        v71 = (unint64_t *)&v70->__shared_owners_;
        do
          v72 = __ldxr(v71);
        while (__stxr(v72 + 1, v71));
      }
      if (v69
      {
        v129 = (double *)v73;
        v130 = v70;
        if (v70)
        {
          v74 = (unint64_t *)&v70->__shared_owners_;
          do
            v75 = __ldxr(v74);
          while (__stxr(v75 + 1, v74));
        }
        if (v73[95] < 0)
          std::string::__init_copy_ctor_external(&v132, *((const std::string::value_type **)v73 + 9), *((_QWORD *)v73 + 10));
        else
          v132 = *(std::string *)(v73 + 3);
        switch(v121)
        {
          case 0:
            v76 = HIBYTE(v132.__r_.__value_.__r.__words[2]);
            if ((v132.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              size = HIBYTE(v132.__r_.__value_.__r.__words[2]);
            else
              size = v132.__r_.__value_.__l.__size_;
            v78 = HIBYTE(v120.__r_.__value_.__r.__words[2]);
            if ((v120.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v78 = v120.__r_.__value_.__l.__size_;
            if (size == v78)
            {
              if ((v120.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v79 = &v120;
              else
                v79 = (std::string *)v120.__r_.__value_.__r.__words[0];
              if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0)
              {
                v105 = (void *)v132.__r_.__value_.__r.__words[0];
                v29 = memcmp(v132.__r_.__value_.__l.__data_, v79, v132.__r_.__value_.__l.__size_) == 0;
                goto LABEL_261;
              }
              if (*((_BYTE *)&v132.__r_.__value_.__s + 23))
              {
                v80 = HIBYTE(v132.__r_.__value_.__r.__words[2]) - 1;
                v81 = &v132;
                do
                {
                  v83 = v81->__r_.__value_.__s.__data_[0];
                  v81 = (std::string *)((char *)v81 + 1);
                  v82 = v83;
                  v85 = v79->__r_.__value_.__s.__data_[0];
                  v79 = (std::string *)((char *)v79 + 1);
                  v84 = v85;
                  v87 = v80-- != 0;
                  v29 = v82 == v84;
                }
                while (v82 == v84 && v87);
                goto LABEL_259;
              }
              v29 = 1;
            }
            else
            {
              v29 = 0;
              if ((*((_BYTE *)&v132.__r_.__value_.__s + 23) & 0x80) != 0)
                goto LABEL_260;
            }
            goto LABEL_262;
          case 1:
            v91 = HIBYTE(v132.__r_.__value_.__r.__words[2]);
            if ((v120.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v92 = HIBYTE(v120.__r_.__value_.__r.__words[2]);
            else
              v92 = v120.__r_.__value_.__l.__size_;
            if ((v120.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v93 = &v120;
            else
              v93 = (std::string *)v120.__r_.__value_.__r.__words[0];
            if ((v132.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v94 = HIBYTE(v132.__r_.__value_.__r.__words[2]);
            else
              v94 = v132.__r_.__value_.__l.__size_;
            if ((v132.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v95 = &v132;
            else
              v95 = (std::string *)v132.__r_.__value_.__r.__words[0];
            goto LABEL_221;
          case 2:
            v91 = HIBYTE(v132.__r_.__value_.__r.__words[2]);
            if ((v132.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v92 = HIBYTE(v132.__r_.__value_.__r.__words[2]);
            else
              v92 = v132.__r_.__value_.__l.__size_;
            if ((v132.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v93 = &v132;
            else
              v93 = (std::string *)v132.__r_.__value_.__r.__words[0];
            if ((v120.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v94 = HIBYTE(v120.__r_.__value_.__r.__words[2]);
            else
              v94 = v120.__r_.__value_.__l.__size_;
            if ((v120.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v95 = &v120;
            else
              v95 = (std::string *)v120.__r_.__value_.__r.__words[0];
LABEL_221:
            if (v94 >= v92)
              v97 = v92;
            else
              v97 = v94;
            v98 = memcmp(v93, v95, v97);
            if (v98)
              v29 = v98 < 0;
            else
              v29 = v92 < v94;
            if (v91 < 0)
              goto LABEL_260;
            goto LABEL_262;
          case 3:
            v76 = HIBYTE(v132.__r_.__value_.__r.__words[2]);
            if ((v132.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v99 = HIBYTE(v132.__r_.__value_.__r.__words[2]);
            else
              v99 = v132.__r_.__value_.__l.__size_;
            if ((v132.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v100 = &v132;
            else
              v100 = (std::string *)v132.__r_.__value_.__r.__words[0];
            if ((v120.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v101 = HIBYTE(v120.__r_.__value_.__r.__words[2]);
            else
              v101 = v120.__r_.__value_.__l.__size_;
            if ((v120.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v102 = &v120;
            else
              v102 = (std::string *)v120.__r_.__value_.__r.__words[0];
            goto LABEL_253;
          case 4:
            v76 = HIBYTE(v132.__r_.__value_.__r.__words[2]);
            if ((v120.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v99 = HIBYTE(v120.__r_.__value_.__r.__words[2]);
            else
              v99 = v120.__r_.__value_.__l.__size_;
            if ((v120.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v100 = &v120;
            else
              v100 = (std::string *)v120.__r_.__value_.__r.__words[0];
            if ((v132.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v101 = HIBYTE(v132.__r_.__value_.__r.__words[2]);
            else
              v101 = v132.__r_.__value_.__l.__size_;
            if ((v132.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v102 = &v132;
            else
              v102 = (std::string *)v132.__r_.__value_.__r.__words[0];
LABEL_253:
            if (v101 >= v99)
              v103 = v99;
            else
              v103 = v101;
            v104 = memcmp(v100, v102, v103);
            if (v104)
              v29 = v104 >= 0;
            else
              v29 = v99 >= v101;
LABEL_259:
            if (v76 < 0)
              goto LABEL_260;
            goto LABEL_262;
          case 7:
            v90 = HIBYTE(v132.__r_.__value_.__r.__words[2]);
            if ((v132.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v90 = v132.__r_.__value_.__l.__size_;
            v29 = v90 == 0;
            if ((*((_BYTE *)&v132.__r_.__value_.__s + 23) & 0x80) != 0)
              goto LABEL_260;
            goto LABEL_262;
          case 8:
            v96 = HIBYTE(v132.__r_.__value_.__r.__words[2]);
            if ((v132.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v96 = v132.__r_.__value_.__l.__size_;
            v29 = v96 != 0;
            if ((*((_BYTE *)&v132.__r_.__value_.__s + 23) & 0x80) != 0)
              goto LABEL_260;
            goto LABEL_262;
          default:
            siri::dialogengine::ArrayComparatorToString(&v128, v121, v122);
            v88 = std::string::insert(&v128, 0, "Unkown comparator type: ");
            v89 = *(_OWORD *)&v88->__r_.__value_.__l.__data_;
            v131.__r_.__value_.__r.__words[2] = v88->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v131.__r_.__value_.__l.__data_ = v89;
            v88->__r_.__value_.__l.__size_ = 0;
            v88->__r_.__value_.__r.__words[2] = 0;
            v88->__r_.__value_.__r.__words[0] = 0;
            siri::dialogengine::Log::Debug((siri::dialogengine *)&v131);
            if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v131.__r_.__value_.__l.__data_);
            if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v128.__r_.__value_.__l.__data_);
            v29 = 0;
            if ((*((_BYTE *)&v132.__r_.__value_.__s + 23) & 0x80) != 0)
            {
LABEL_260:
              v105 = (void *)v132.__r_.__value_.__r.__words[0];
LABEL_261:
              operator delete(v105);
            }
LABEL_262:
            if (v70)
            {
              v106 = (unint64_t *)&v70->__shared_owners_;
              do
                v107 = __ldaxr(v106);
              while (__stlxr(v107 - 1, v106));
              if (!v107)
              {
                ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
                std::__shared_weak_count::__release_weak(v70);
              }
            }
            break;
        }
      }
      else
      {
        v29 = 0;
      }
      v108 = v127;
      if (v127)
      {
        v109 = (unint64_t *)&v127->__shared_owners_;
        do
          v110 = __ldaxr(v109);
        while (__stlxr(v110 - 1, v109));
        if (!v110)
        {
          ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
          std::__shared_weak_count::__release_weak(v108);
        }
      }
      v27 += 16;
      if (v27 == v28)
        v111 = 0;
      else
        v111 = v29;
    }
    while ((v111 & 1) != 0);
  }
  if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v120.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v112 = v125;
  if (v125)
  {
    v113 = (unint64_t *)&v125->__shared_owners_;
    do
      v114 = __ldaxr(v113);
    while (__stlxr(v114 - 1, v113));
    if (!v114)
    {
      ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
      v115 = v112;
      goto LABEL_300;
    }
  }
  return v29;
}

void sub_1BF8EFDD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,char a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  if (a23 < 0)
    operator delete(__p);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::VariableArray::AllGreaterThan(siri::dialogengine::VariableArray *this, siri::dialogengine::Context *a2, uint64_t *a3)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  std::string::size_type size;
  std::__shared_weak_count *v12;
  const void *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t ArrayItemAll;
  unint64_t *v17;
  unint64_t v18;
  std::string __p;
  const void *v21;
  std::__shared_weak_count *v22;
  uint64_t v23[5];
  std::string v24;
  void **v25;

  v5 = *a3;
  v6 = (std::__shared_weak_count *)a3[1];
  v23[3] = *a3;
  v23[4] = (uint64_t)v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  siri::dialogengine::ValidateTargetType(&v24, a2, this, v5);
  if (v6)
  {
    v9 = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  size = HIBYTE(v24.__r_.__value_.__r.__words[2]);
  if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v24.__r_.__value_.__l.__size_;
  if (size)
  {
    memset(v23, 0, 24);
    std::vector<std::shared_ptr<siri::dialogengine::Variable>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::Variable>*,std::shared_ptr<siri::dialogengine::Variable>*>(v23, *((_QWORD **)this + 9), *((_QWORD **)this + 10), (uint64_t)(*((_QWORD *)this + 10) - *((_QWORD *)this + 9)) >> 4);
    v13 = (const void *)*a3;
    v12 = (std::__shared_weak_count *)a3[1];
    v21 = v13;
    v22 = v12;
    if (v12)
    {
      v14 = (unint64_t *)&v12->__shared_owners_;
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&__p, v24.__r_.__value_.__l.__data_, v24.__r_.__value_.__l.__size_);
    else
      __p = v24;
    ArrayItemAll = siri::dialogengine::FindArrayItemAll(v23, v13, v12, (const void **)&__p.__r_.__value_.__l.__data_, 1);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v12)
    {
      v17 = (unint64_t *)&v12->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    v25 = (void **)v23;
    std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100](&v25);
    if ((*((_BYTE *)&v24.__r_.__value_.__s + 23) & 0x80) != 0)
      goto LABEL_28;
  }
  else
  {
    ArrayItemAll = 0;
    if ((*((_BYTE *)&v24.__r_.__value_.__s + 23) & 0x80) != 0)
LABEL_28:
      operator delete(v24.__r_.__value_.__l.__data_);
  }
  return ArrayItemAll;
}

void sub_1BF8F00BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, char a20)
{
  uint64_t v20;

  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  *(_QWORD *)(v20 - 40) = &a17;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v20 - 40));
  if (*(char *)(v20 - 41) < 0)
    operator delete(*(void **)(v20 - 64));
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::VariableArray::AllLessThan(siri::dialogengine::VariableArray *this, siri::dialogengine::Context *a2, uint64_t *a3)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  std::string::size_type size;
  std::__shared_weak_count *v12;
  const void *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t ArrayItemAll;
  unint64_t *v17;
  unint64_t v18;
  std::string __p;
  const void *v21;
  std::__shared_weak_count *v22;
  uint64_t v23[5];
  std::string v24;
  void **v25;

  v5 = *a3;
  v6 = (std::__shared_weak_count *)a3[1];
  v23[3] = *a3;
  v23[4] = (uint64_t)v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  siri::dialogengine::ValidateTargetType(&v24, a2, this, v5);
  if (v6)
  {
    v9 = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  size = HIBYTE(v24.__r_.__value_.__r.__words[2]);
  if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v24.__r_.__value_.__l.__size_;
  if (size)
  {
    memset(v23, 0, 24);
    std::vector<std::shared_ptr<siri::dialogengine::Variable>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::Variable>*,std::shared_ptr<siri::dialogengine::Variable>*>(v23, *((_QWORD **)this + 9), *((_QWORD **)this + 10), (uint64_t)(*((_QWORD *)this + 10) - *((_QWORD *)this + 9)) >> 4);
    v13 = (const void *)*a3;
    v12 = (std::__shared_weak_count *)a3[1];
    v21 = v13;
    v22 = v12;
    if (v12)
    {
      v14 = (unint64_t *)&v12->__shared_owners_;
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&__p, v24.__r_.__value_.__l.__data_, v24.__r_.__value_.__l.__size_);
    else
      __p = v24;
    ArrayItemAll = siri::dialogengine::FindArrayItemAll(v23, v13, v12, (const void **)&__p.__r_.__value_.__l.__data_, 2);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v12)
    {
      v17 = (unint64_t *)&v12->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    v25 = (void **)v23;
    std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100](&v25);
    if ((*((_BYTE *)&v24.__r_.__value_.__s + 23) & 0x80) != 0)
      goto LABEL_28;
  }
  else
  {
    ArrayItemAll = 0;
    if ((*((_BYTE *)&v24.__r_.__value_.__s + 23) & 0x80) != 0)
LABEL_28:
      operator delete(v24.__r_.__value_.__l.__data_);
  }
  return ArrayItemAll;
}

void sub_1BF8F02BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, char a20)
{
  uint64_t v20;

  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  *(_QWORD *)(v20 - 40) = &a17;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v20 - 40));
  if (*(char *)(v20 - 41) < 0)
    operator delete(*(void **)(v20 - 64));
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::VariableArray::AllGreaterThanOrEqual(siri::dialogengine::VariableArray *this, siri::dialogengine::Context *a2, uint64_t *a3)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  std::string::size_type size;
  std::__shared_weak_count *v12;
  const void *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t ArrayItemAll;
  unint64_t *v17;
  unint64_t v18;
  std::string __p;
  const void *v21;
  std::__shared_weak_count *v22;
  uint64_t v23[5];
  std::string v24;
  void **v25;

  v5 = *a3;
  v6 = (std::__shared_weak_count *)a3[1];
  v23[3] = *a3;
  v23[4] = (uint64_t)v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  siri::dialogengine::ValidateTargetType(&v24, a2, this, v5);
  if (v6)
  {
    v9 = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  size = HIBYTE(v24.__r_.__value_.__r.__words[2]);
  if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v24.__r_.__value_.__l.__size_;
  if (size)
  {
    memset(v23, 0, 24);
    std::vector<std::shared_ptr<siri::dialogengine::Variable>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::Variable>*,std::shared_ptr<siri::dialogengine::Variable>*>(v23, *((_QWORD **)this + 9), *((_QWORD **)this + 10), (uint64_t)(*((_QWORD *)this + 10) - *((_QWORD *)this + 9)) >> 4);
    v13 = (const void *)*a3;
    v12 = (std::__shared_weak_count *)a3[1];
    v21 = v13;
    v22 = v12;
    if (v12)
    {
      v14 = (unint64_t *)&v12->__shared_owners_;
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&__p, v24.__r_.__value_.__l.__data_, v24.__r_.__value_.__l.__size_);
    else
      __p = v24;
    ArrayItemAll = siri::dialogengine::FindArrayItemAll(v23, v13, v12, (const void **)&__p.__r_.__value_.__l.__data_, 3);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v12)
    {
      v17 = (unint64_t *)&v12->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    v25 = (void **)v23;
    std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100](&v25);
    if ((*((_BYTE *)&v24.__r_.__value_.__s + 23) & 0x80) != 0)
      goto LABEL_28;
  }
  else
  {
    ArrayItemAll = 0;
    if ((*((_BYTE *)&v24.__r_.__value_.__s + 23) & 0x80) != 0)
LABEL_28:
      operator delete(v24.__r_.__value_.__l.__data_);
  }
  return ArrayItemAll;
}

void sub_1BF8F04BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, char a20)
{
  uint64_t v20;

  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  *(_QWORD *)(v20 - 40) = &a17;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v20 - 40));
  if (*(char *)(v20 - 41) < 0)
    operator delete(*(void **)(v20 - 64));
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::VariableArray::AllLessThanOrEqual(siri::dialogengine::VariableArray *this, siri::dialogengine::Context *a2, uint64_t *a3)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  std::string::size_type size;
  std::__shared_weak_count *v12;
  const void *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t ArrayItemAll;
  unint64_t *v17;
  unint64_t v18;
  std::string __p;
  const void *v21;
  std::__shared_weak_count *v22;
  uint64_t v23[5];
  std::string v24;
  void **v25;

  v5 = *a3;
  v6 = (std::__shared_weak_count *)a3[1];
  v23[3] = *a3;
  v23[4] = (uint64_t)v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  siri::dialogengine::ValidateTargetType(&v24, a2, this, v5);
  if (v6)
  {
    v9 = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  size = HIBYTE(v24.__r_.__value_.__r.__words[2]);
  if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v24.__r_.__value_.__l.__size_;
  if (size)
  {
    memset(v23, 0, 24);
    std::vector<std::shared_ptr<siri::dialogengine::Variable>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::Variable>*,std::shared_ptr<siri::dialogengine::Variable>*>(v23, *((_QWORD **)this + 9), *((_QWORD **)this + 10), (uint64_t)(*((_QWORD *)this + 10) - *((_QWORD *)this + 9)) >> 4);
    v13 = (const void *)*a3;
    v12 = (std::__shared_weak_count *)a3[1];
    v21 = v13;
    v22 = v12;
    if (v12)
    {
      v14 = (unint64_t *)&v12->__shared_owners_;
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&__p, v24.__r_.__value_.__l.__data_, v24.__r_.__value_.__l.__size_);
    else
      __p = v24;
    ArrayItemAll = siri::dialogengine::FindArrayItemAll(v23, v13, v12, (const void **)&__p.__r_.__value_.__l.__data_, 4);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v12)
    {
      v17 = (unint64_t *)&v12->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    v25 = (void **)v23;
    std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100](&v25);
    if ((*((_BYTE *)&v24.__r_.__value_.__s + 23) & 0x80) != 0)
      goto LABEL_28;
  }
  else
  {
    ArrayItemAll = 0;
    if ((*((_BYTE *)&v24.__r_.__value_.__s + 23) & 0x80) != 0)
LABEL_28:
      operator delete(v24.__r_.__value_.__l.__data_);
  }
  return ArrayItemAll;
}

void sub_1BF8F06BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, char a20)
{
  uint64_t v20;

  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  *(_QWORD *)(v20 - 40) = &a17;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v20 - 40));
  if (*(char *)(v20 - 41) < 0)
    operator delete(*(void **)(v20 - 64));
  _Unwind_Resume(a1);
}

BOOL siri::dialogengine::VariableArray::AnyGreaterThan(siri::dialogengine::VariableArray *this, siri::dialogengine::Context *a2, uint64_t *a3)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  std::string::size_type size;
  std::__shared_weak_count *v12;
  const void *v13;
  unint64_t *v14;
  unint64_t v15;
  _BOOL8 ArrayItemAny;
  unint64_t *v17;
  unint64_t v18;
  std::string __p;
  const void *v21;
  std::__shared_weak_count *v22;
  uint64_t v23[5];
  std::string v24;
  void **v25;

  v5 = *a3;
  v6 = (std::__shared_weak_count *)a3[1];
  v23[3] = *a3;
  v23[4] = (uint64_t)v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  siri::dialogengine::ValidateTargetType(&v24, a2, this, v5);
  if (v6)
  {
    v9 = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  size = HIBYTE(v24.__r_.__value_.__r.__words[2]);
  if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v24.__r_.__value_.__l.__size_;
  if (size)
  {
    memset(v23, 0, 24);
    std::vector<std::shared_ptr<siri::dialogengine::Variable>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::Variable>*,std::shared_ptr<siri::dialogengine::Variable>*>(v23, *((_QWORD **)this + 9), *((_QWORD **)this + 10), (uint64_t)(*((_QWORD *)this + 10) - *((_QWORD *)this + 9)) >> 4);
    v13 = (const void *)*a3;
    v12 = (std::__shared_weak_count *)a3[1];
    v21 = v13;
    v22 = v12;
    if (v12)
    {
      v14 = (unint64_t *)&v12->__shared_owners_;
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&__p, v24.__r_.__value_.__l.__data_, v24.__r_.__value_.__l.__size_);
    else
      __p = v24;
    ArrayItemAny = siri::dialogengine::FindArrayItemAny(v23, v13, v12, (const void **)&__p.__r_.__value_.__l.__data_, 1);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v12)
    {
      v17 = (unint64_t *)&v12->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    v25 = (void **)v23;
    std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100](&v25);
    if ((*((_BYTE *)&v24.__r_.__value_.__s + 23) & 0x80) != 0)
      goto LABEL_28;
  }
  else
  {
    ArrayItemAny = 0;
    if ((*((_BYTE *)&v24.__r_.__value_.__s + 23) & 0x80) != 0)
LABEL_28:
      operator delete(v24.__r_.__value_.__l.__data_);
  }
  return ArrayItemAny;
}

void sub_1BF8F08BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, char a20)
{
  uint64_t v20;

  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  *(_QWORD *)(v20 - 40) = &a17;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v20 - 40));
  if (*(char *)(v20 - 41) < 0)
    operator delete(*(void **)(v20 - 64));
  _Unwind_Resume(a1);
}

BOOL siri::dialogengine::VariableArray::AnyLessThan(siri::dialogengine::VariableArray *this, siri::dialogengine::Context *a2, uint64_t *a3)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  std::string::size_type size;
  std::__shared_weak_count *v12;
  const void *v13;
  unint64_t *v14;
  unint64_t v15;
  _BOOL8 ArrayItemAny;
  unint64_t *v17;
  unint64_t v18;
  std::string __p;
  const void *v21;
  std::__shared_weak_count *v22;
  uint64_t v23[5];
  std::string v24;
  void **v25;

  v5 = *a3;
  v6 = (std::__shared_weak_count *)a3[1];
  v23[3] = *a3;
  v23[4] = (uint64_t)v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  siri::dialogengine::ValidateTargetType(&v24, a2, this, v5);
  if (v6)
  {
    v9 = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  size = HIBYTE(v24.__r_.__value_.__r.__words[2]);
  if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v24.__r_.__value_.__l.__size_;
  if (size)
  {
    memset(v23, 0, 24);
    std::vector<std::shared_ptr<siri::dialogengine::Variable>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::Variable>*,std::shared_ptr<siri::dialogengine::Variable>*>(v23, *((_QWORD **)this + 9), *((_QWORD **)this + 10), (uint64_t)(*((_QWORD *)this + 10) - *((_QWORD *)this + 9)) >> 4);
    v13 = (const void *)*a3;
    v12 = (std::__shared_weak_count *)a3[1];
    v21 = v13;
    v22 = v12;
    if (v12)
    {
      v14 = (unint64_t *)&v12->__shared_owners_;
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&__p, v24.__r_.__value_.__l.__data_, v24.__r_.__value_.__l.__size_);
    else
      __p = v24;
    ArrayItemAny = siri::dialogengine::FindArrayItemAny(v23, v13, v12, (const void **)&__p.__r_.__value_.__l.__data_, 2);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v12)
    {
      v17 = (unint64_t *)&v12->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    v25 = (void **)v23;
    std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100](&v25);
    if ((*((_BYTE *)&v24.__r_.__value_.__s + 23) & 0x80) != 0)
      goto LABEL_28;
  }
  else
  {
    ArrayItemAny = 0;
    if ((*((_BYTE *)&v24.__r_.__value_.__s + 23) & 0x80) != 0)
LABEL_28:
      operator delete(v24.__r_.__value_.__l.__data_);
  }
  return ArrayItemAny;
}

void sub_1BF8F0ABC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, char a20)
{
  uint64_t v20;

  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  *(_QWORD *)(v20 - 40) = &a17;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v20 - 40));
  if (*(char *)(v20 - 41) < 0)
    operator delete(*(void **)(v20 - 64));
  _Unwind_Resume(a1);
}

BOOL siri::dialogengine::VariableArray::AnyGreaterThanOrEqual(siri::dialogengine::VariableArray *this, siri::dialogengine::Context *a2, uint64_t *a3)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  std::string::size_type size;
  std::__shared_weak_count *v12;
  const void *v13;
  unint64_t *v14;
  unint64_t v15;
  _BOOL8 ArrayItemAny;
  unint64_t *v17;
  unint64_t v18;
  std::string __p;
  const void *v21;
  std::__shared_weak_count *v22;
  uint64_t v23[5];
  std::string v24;
  void **v25;

  v5 = *a3;
  v6 = (std::__shared_weak_count *)a3[1];
  v23[3] = *a3;
  v23[4] = (uint64_t)v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  siri::dialogengine::ValidateTargetType(&v24, a2, this, v5);
  if (v6)
  {
    v9 = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  size = HIBYTE(v24.__r_.__value_.__r.__words[2]);
  if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v24.__r_.__value_.__l.__size_;
  if (size)
  {
    memset(v23, 0, 24);
    std::vector<std::shared_ptr<siri::dialogengine::Variable>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::Variable>*,std::shared_ptr<siri::dialogengine::Variable>*>(v23, *((_QWORD **)this + 9), *((_QWORD **)this + 10), (uint64_t)(*((_QWORD *)this + 10) - *((_QWORD *)this + 9)) >> 4);
    v13 = (const void *)*a3;
    v12 = (std::__shared_weak_count *)a3[1];
    v21 = v13;
    v22 = v12;
    if (v12)
    {
      v14 = (unint64_t *)&v12->__shared_owners_;
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&__p, v24.__r_.__value_.__l.__data_, v24.__r_.__value_.__l.__size_);
    else
      __p = v24;
    ArrayItemAny = siri::dialogengine::FindArrayItemAny(v23, v13, v12, (const void **)&__p.__r_.__value_.__l.__data_, 3);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v12)
    {
      v17 = (unint64_t *)&v12->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    v25 = (void **)v23;
    std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100](&v25);
    if ((*((_BYTE *)&v24.__r_.__value_.__s + 23) & 0x80) != 0)
      goto LABEL_28;
  }
  else
  {
    ArrayItemAny = 0;
    if ((*((_BYTE *)&v24.__r_.__value_.__s + 23) & 0x80) != 0)
LABEL_28:
      operator delete(v24.__r_.__value_.__l.__data_);
  }
  return ArrayItemAny;
}

void sub_1BF8F0CBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, char a20)
{
  uint64_t v20;

  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  *(_QWORD *)(v20 - 40) = &a17;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v20 - 40));
  if (*(char *)(v20 - 41) < 0)
    operator delete(*(void **)(v20 - 64));
  _Unwind_Resume(a1);
}

BOOL siri::dialogengine::VariableArray::AnyLessThanOrEqual(siri::dialogengine::VariableArray *this, siri::dialogengine::Context *a2, uint64_t *a3)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  std::string::size_type size;
  std::__shared_weak_count *v12;
  const void *v13;
  unint64_t *v14;
  unint64_t v15;
  _BOOL8 ArrayItemAny;
  unint64_t *v17;
  unint64_t v18;
  std::string __p;
  const void *v21;
  std::__shared_weak_count *v22;
  uint64_t v23[5];
  std::string v24;
  void **v25;

  v5 = *a3;
  v6 = (std::__shared_weak_count *)a3[1];
  v23[3] = *a3;
  v23[4] = (uint64_t)v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  siri::dialogengine::ValidateTargetType(&v24, a2, this, v5);
  if (v6)
  {
    v9 = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  size = HIBYTE(v24.__r_.__value_.__r.__words[2]);
  if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v24.__r_.__value_.__l.__size_;
  if (size)
  {
    memset(v23, 0, 24);
    std::vector<std::shared_ptr<siri::dialogengine::Variable>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::Variable>*,std::shared_ptr<siri::dialogengine::Variable>*>(v23, *((_QWORD **)this + 9), *((_QWORD **)this + 10), (uint64_t)(*((_QWORD *)this + 10) - *((_QWORD *)this + 9)) >> 4);
    v13 = (const void *)*a3;
    v12 = (std::__shared_weak_count *)a3[1];
    v21 = v13;
    v22 = v12;
    if (v12)
    {
      v14 = (unint64_t *)&v12->__shared_owners_;
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&__p, v24.__r_.__value_.__l.__data_, v24.__r_.__value_.__l.__size_);
    else
      __p = v24;
    ArrayItemAny = siri::dialogengine::FindArrayItemAny(v23, v13, v12, (const void **)&__p.__r_.__value_.__l.__data_, 4);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v12)
    {
      v17 = (unint64_t *)&v12->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    v25 = (void **)v23;
    std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100](&v25);
    if ((*((_BYTE *)&v24.__r_.__value_.__s + 23) & 0x80) != 0)
      goto LABEL_28;
  }
  else
  {
    ArrayItemAny = 0;
    if ((*((_BYTE *)&v24.__r_.__value_.__s + 23) & 0x80) != 0)
LABEL_28:
      operator delete(v24.__r_.__value_.__l.__data_);
  }
  return ArrayItemAny;
}

void sub_1BF8F0EBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, char a20)
{
  uint64_t v20;

  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  *(_QWORD *)(v20 - 40) = &a17;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v20 - 40));
  if (*(char *)(v20 - 41) < 0)
    operator delete(*(void **)(v20 - 64));
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::VariableArray::AllSet(siri::dialogengine::VariableArray *a1, siri::dialogengine::Context *a2, uint64_t a3)
{
  size_t v5;
  const char *v6;
  size_t v7;
  std::string *p_s1;
  uint64_t ArrayItemAll;
  std::__shared_weak_count *v11;
  const void *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::string __p;
  const void *v18;
  std::__shared_weak_count *v19;
  uint64_t v20[3];
  std::string __s1;
  void **v22;

  if (!a2)
    return 0;
  siri::dialogengine::VariableArray::GetConcreteType(a1, a2, (uint64_t)&__s1);
  v5 = strlen(siri::dialogengine::TYPE_BOOLEAN);
  v7 = v5;
  if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v5 != __s1.__r_.__value_.__l.__size_)
      goto LABEL_10;
    if (v5 == -1)
      std::string::__throw_out_of_range[abi:ne180100]();
    p_s1 = (std::string *)__s1.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (v5 != HIBYTE(__s1.__r_.__value_.__r.__words[2]))
      goto LABEL_10;
    p_s1 = &__s1;
  }
  if (!memcmp(p_s1, siri::dialogengine::TYPE_BOOLEAN, v7))
  {
    memset(v20, 0, sizeof(v20));
    std::vector<std::shared_ptr<siri::dialogengine::Variable>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::Variable>*,std::shared_ptr<siri::dialogengine::Variable>*>(v20, *((_QWORD **)a1 + 9), *((_QWORD **)a1 + 10), (uint64_t)(*((_QWORD *)a1 + 10) - *((_QWORD *)a1 + 9)) >> 4);
    v12 = *(const void **)a3;
    v11 = *(std::__shared_weak_count **)(a3 + 8);
    v18 = v12;
    v19 = v11;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
    if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&__p, __s1.__r_.__value_.__l.__data_, __s1.__r_.__value_.__l.__size_);
    else
      __p = __s1;
    ArrayItemAll = siri::dialogengine::FindArrayItemAll(v20, v12, v11, (const void **)&__p.__r_.__value_.__l.__data_, 5);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v11)
    {
      v15 = (unint64_t *)&v11->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    v22 = (void **)v20;
    std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100](&v22);
    goto LABEL_11;
  }
LABEL_10:
  siri::dialogengine::Log::Warn((siri::dialogengine::Log *)"Comparator 'all_set' for use with dialog.Boolean[] only!", v6);
  ArrayItemAll = 0;
LABEL_11:
  if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s1.__r_.__value_.__l.__data_);
  return ArrayItemAll;
}

void sub_1BF8F10C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  *(_QWORD *)(v25 - 40) = &a17;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v25 - 40));
  if (a25 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL siri::dialogengine::VariableArray::AnySet(siri::dialogengine::VariableArray *a1, siri::dialogengine::Context *a2, uint64_t a3)
{
  size_t v5;
  const char *v6;
  size_t v7;
  std::string *p_s1;
  _BOOL8 ArrayItemAny;
  std::__shared_weak_count *v11;
  const void *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::string __p;
  const void *v18;
  std::__shared_weak_count *v19;
  uint64_t v20[3];
  std::string __s1;
  void **v22;

  if (!a2)
    return 0;
  siri::dialogengine::VariableArray::GetConcreteType(a1, a2, (uint64_t)&__s1);
  v5 = strlen(siri::dialogengine::TYPE_BOOLEAN);
  v7 = v5;
  if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v5 != __s1.__r_.__value_.__l.__size_)
      goto LABEL_10;
    if (v5 == -1)
      std::string::__throw_out_of_range[abi:ne180100]();
    p_s1 = (std::string *)__s1.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (v5 != HIBYTE(__s1.__r_.__value_.__r.__words[2]))
      goto LABEL_10;
    p_s1 = &__s1;
  }
  if (!memcmp(p_s1, siri::dialogengine::TYPE_BOOLEAN, v7))
  {
    memset(v20, 0, sizeof(v20));
    std::vector<std::shared_ptr<siri::dialogengine::Variable>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::Variable>*,std::shared_ptr<siri::dialogengine::Variable>*>(v20, *((_QWORD **)a1 + 9), *((_QWORD **)a1 + 10), (uint64_t)(*((_QWORD *)a1 + 10) - *((_QWORD *)a1 + 9)) >> 4);
    v12 = *(const void **)a3;
    v11 = *(std::__shared_weak_count **)(a3 + 8);
    v18 = v12;
    v19 = v11;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
    if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&__p, __s1.__r_.__value_.__l.__data_, __s1.__r_.__value_.__l.__size_);
    else
      __p = __s1;
    ArrayItemAny = siri::dialogengine::FindArrayItemAny(v20, v12, v11, (const void **)&__p.__r_.__value_.__l.__data_, 5);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v11)
    {
      v15 = (unint64_t *)&v11->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    v22 = (void **)v20;
    std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100](&v22);
    goto LABEL_11;
  }
LABEL_10:
  siri::dialogengine::Log::Warn((siri::dialogengine::Log *)"Comparator 'any_set' for use with dialog.Boolean[] only!", v6);
  ArrayItemAny = 0;
LABEL_11:
  if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s1.__r_.__value_.__l.__data_);
  return ArrayItemAny;
}

void sub_1BF8F12B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  *(_QWORD *)(v25 - 40) = &a17;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v25 - 40));
  if (a25 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL siri::dialogengine::VariableArray::AllUnset(siri::dialogengine::VariableArray *a1, siri::dialogengine::Context *a2, uint64_t a3)
{
  size_t v5;
  const char *v6;
  size_t v7;
  std::string *p_s1;
  _BOOL8 ArrayItemAny;
  std::__shared_weak_count *v11;
  const void *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::string __p;
  const void *v18;
  std::__shared_weak_count *v19;
  uint64_t v20[3];
  std::string __s1;
  void **v22;

  if (!a2)
    return 0;
  siri::dialogengine::VariableArray::GetConcreteType(a1, a2, (uint64_t)&__s1);
  v5 = strlen(siri::dialogengine::TYPE_BOOLEAN);
  v7 = v5;
  if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v5 != __s1.__r_.__value_.__l.__size_)
      goto LABEL_10;
    if (v5 == -1)
      std::string::__throw_out_of_range[abi:ne180100]();
    p_s1 = (std::string *)__s1.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (v5 != HIBYTE(__s1.__r_.__value_.__r.__words[2]))
      goto LABEL_10;
    p_s1 = &__s1;
  }
  if (!memcmp(p_s1, siri::dialogengine::TYPE_BOOLEAN, v7))
  {
    memset(v20, 0, sizeof(v20));
    std::vector<std::shared_ptr<siri::dialogengine::Variable>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::Variable>*,std::shared_ptr<siri::dialogengine::Variable>*>(v20, *((_QWORD **)a1 + 9), *((_QWORD **)a1 + 10), (uint64_t)(*((_QWORD *)a1 + 10) - *((_QWORD *)a1 + 9)) >> 4);
    v12 = *(const void **)a3;
    v11 = *(std::__shared_weak_count **)(a3 + 8);
    v18 = v12;
    v19 = v11;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
    if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&__p, __s1.__r_.__value_.__l.__data_, __s1.__r_.__value_.__l.__size_);
    else
      __p = __s1;
    ArrayItemAny = siri::dialogengine::FindArrayItemAny(v20, v12, v11, (const void **)&__p.__r_.__value_.__l.__data_, 5);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v11)
    {
      v15 = (unint64_t *)&v11->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    v22 = (void **)v20;
    std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100](&v22);
    goto LABEL_11;
  }
LABEL_10:
  siri::dialogengine::Log::Warn((siri::dialogengine::Log *)"Comparator 'all_unset' for use with dialog.Boolean[] only!", v6);
  ArrayItemAny = 0;
LABEL_11:
  if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s1.__r_.__value_.__l.__data_);
  return ArrayItemAny;
}

void sub_1BF8F14B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  *(_QWORD *)(v25 - 40) = &a17;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v25 - 40));
  if (a25 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL siri::dialogengine::VariableArray::AnyUnset(siri::dialogengine::VariableArray *a1, siri::dialogengine::Context *a2, uint64_t a3)
{
  size_t v5;
  const char *v6;
  size_t v7;
  std::string *p_s1;
  _BOOL8 ArrayItemAny;
  std::__shared_weak_count *v11;
  const void *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::string __p;
  const void *v18;
  std::__shared_weak_count *v19;
  uint64_t v20[3];
  std::string __s1;
  void **v22;

  if (!a2)
    return 0;
  siri::dialogengine::VariableArray::GetConcreteType(a1, a2, (uint64_t)&__s1);
  v5 = strlen(siri::dialogengine::TYPE_BOOLEAN);
  v7 = v5;
  if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v5 != __s1.__r_.__value_.__l.__size_)
      goto LABEL_10;
    if (v5 == -1)
      std::string::__throw_out_of_range[abi:ne180100]();
    p_s1 = (std::string *)__s1.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (v5 != HIBYTE(__s1.__r_.__value_.__r.__words[2]))
      goto LABEL_10;
    p_s1 = &__s1;
  }
  if (!memcmp(p_s1, siri::dialogengine::TYPE_BOOLEAN, v7))
  {
    memset(v20, 0, sizeof(v20));
    std::vector<std::shared_ptr<siri::dialogengine::Variable>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::Variable>*,std::shared_ptr<siri::dialogengine::Variable>*>(v20, *((_QWORD **)a1 + 9), *((_QWORD **)a1 + 10), (uint64_t)(*((_QWORD *)a1 + 10) - *((_QWORD *)a1 + 9)) >> 4);
    v12 = *(const void **)a3;
    v11 = *(std::__shared_weak_count **)(a3 + 8);
    v18 = v12;
    v19 = v11;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
    if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&__p, __s1.__r_.__value_.__l.__data_, __s1.__r_.__value_.__l.__size_);
    else
      __p = __s1;
    ArrayItemAny = siri::dialogengine::FindArrayItemAny(v20, v12, v11, (const void **)&__p.__r_.__value_.__l.__data_, 5);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v11)
    {
      v15 = (unint64_t *)&v11->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    v22 = (void **)v20;
    std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100](&v22);
    goto LABEL_11;
  }
LABEL_10:
  siri::dialogengine::Log::Warn((siri::dialogengine::Log *)"Comparator 'any_unset' for use with dialog.Boolean[] only!", v6);
  ArrayItemAny = 0;
LABEL_11:
  if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s1.__r_.__value_.__l.__data_);
  return ArrayItemAny;
}

void sub_1BF8F16A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  *(_QWORD *)(v25 - 40) = &a17;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v25 - 40));
  if (a25 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::VariableArray::AllEmpty(siri::dialogengine::VariableArray *a1, siri::dialogengine::Context *a2, uint64_t a3)
{
  size_t v5;
  const char *v6;
  size_t v7;
  std::string *p_s1;
  uint64_t ArrayItemAll;
  std::__shared_weak_count *v11;
  const void *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::string __p;
  const void *v18;
  std::__shared_weak_count *v19;
  uint64_t v20[3];
  std::string __s1;
  void **v22;

  if (!a2)
    return 0;
  siri::dialogengine::VariableArray::GetConcreteType(a1, a2, (uint64_t)&__s1);
  v5 = strlen(siri::dialogengine::TYPE_STRING[0]);
  v7 = v5;
  if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v5 != __s1.__r_.__value_.__l.__size_)
      goto LABEL_10;
    if (v5 == -1)
      std::string::__throw_out_of_range[abi:ne180100]();
    p_s1 = (std::string *)__s1.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (v5 != HIBYTE(__s1.__r_.__value_.__r.__words[2]))
      goto LABEL_10;
    p_s1 = &__s1;
  }
  if (!memcmp(p_s1, siri::dialogengine::TYPE_STRING[0], v7))
  {
    memset(v20, 0, sizeof(v20));
    std::vector<std::shared_ptr<siri::dialogengine::Variable>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::Variable>*,std::shared_ptr<siri::dialogengine::Variable>*>(v20, *((_QWORD **)a1 + 9), *((_QWORD **)a1 + 10), (uint64_t)(*((_QWORD *)a1 + 10) - *((_QWORD *)a1 + 9)) >> 4);
    v12 = *(const void **)a3;
    v11 = *(std::__shared_weak_count **)(a3 + 8);
    v18 = v12;
    v19 = v11;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
    if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&__p, __s1.__r_.__value_.__l.__data_, __s1.__r_.__value_.__l.__size_);
    else
      __p = __s1;
    ArrayItemAll = siri::dialogengine::FindArrayItemAll(v20, v12, v11, (const void **)&__p.__r_.__value_.__l.__data_, 7);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v11)
    {
      v15 = (unint64_t *)&v11->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    v22 = (void **)v20;
    std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100](&v22);
    goto LABEL_11;
  }
LABEL_10:
  siri::dialogengine::Log::Warn((siri::dialogengine::Log *)"Comparator 'all_empty' for use with dialog.String[] only!", v6);
  ArrayItemAll = 0;
LABEL_11:
  if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s1.__r_.__value_.__l.__data_);
  return ArrayItemAll;
}

void sub_1BF8F18A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  *(_QWORD *)(v25 - 40) = &a17;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v25 - 40));
  if (a25 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL siri::dialogengine::VariableArray::AnyEmpty(siri::dialogengine::VariableArray *a1, siri::dialogengine::Context *a2, uint64_t a3)
{
  size_t v5;
  const char *v6;
  size_t v7;
  std::string *p_s1;
  _BOOL8 ArrayItemAny;
  std::__shared_weak_count *v11;
  const void *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::string __p;
  const void *v18;
  std::__shared_weak_count *v19;
  uint64_t v20[3];
  std::string __s1;
  void **v22;

  if (!a2)
    return 0;
  siri::dialogengine::VariableArray::GetConcreteType(a1, a2, (uint64_t)&__s1);
  v5 = strlen(siri::dialogengine::TYPE_STRING[0]);
  v7 = v5;
  if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v5 != __s1.__r_.__value_.__l.__size_)
      goto LABEL_10;
    if (v5 == -1)
      std::string::__throw_out_of_range[abi:ne180100]();
    p_s1 = (std::string *)__s1.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (v5 != HIBYTE(__s1.__r_.__value_.__r.__words[2]))
      goto LABEL_10;
    p_s1 = &__s1;
  }
  if (!memcmp(p_s1, siri::dialogengine::TYPE_STRING[0], v7))
  {
    memset(v20, 0, sizeof(v20));
    std::vector<std::shared_ptr<siri::dialogengine::Variable>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::Variable>*,std::shared_ptr<siri::dialogengine::Variable>*>(v20, *((_QWORD **)a1 + 9), *((_QWORD **)a1 + 10), (uint64_t)(*((_QWORD *)a1 + 10) - *((_QWORD *)a1 + 9)) >> 4);
    v12 = *(const void **)a3;
    v11 = *(std::__shared_weak_count **)(a3 + 8);
    v18 = v12;
    v19 = v11;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
    if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&__p, __s1.__r_.__value_.__l.__data_, __s1.__r_.__value_.__l.__size_);
    else
      __p = __s1;
    ArrayItemAny = siri::dialogengine::FindArrayItemAny(v20, v12, v11, (const void **)&__p.__r_.__value_.__l.__data_, 7);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v11)
    {
      v15 = (unint64_t *)&v11->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    v22 = (void **)v20;
    std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100](&v22);
    goto LABEL_11;
  }
LABEL_10:
  siri::dialogengine::Log::Warn((siri::dialogengine::Log *)"Comparator 'any_empty' for use with dialog.String[] only!", v6);
  ArrayItemAny = 0;
LABEL_11:
  if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s1.__r_.__value_.__l.__data_);
  return ArrayItemAny;
}

void sub_1BF8F1A98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  *(_QWORD *)(v25 - 40) = &a17;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v25 - 40));
  if (a25 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::VariableArray::AllNonEmpty(siri::dialogengine::VariableArray *a1, siri::dialogengine::Context *a2, uint64_t a3)
{
  size_t v5;
  const char *v6;
  size_t v7;
  std::string *p_s1;
  uint64_t ArrayItemAll;
  std::__shared_weak_count *v11;
  const void *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::string __p;
  const void *v18;
  std::__shared_weak_count *v19;
  uint64_t v20[3];
  std::string __s1;
  void **v22;

  if (!a2)
    return 0;
  siri::dialogengine::VariableArray::GetConcreteType(a1, a2, (uint64_t)&__s1);
  v5 = strlen(siri::dialogengine::TYPE_STRING[0]);
  v7 = v5;
  if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v5 != __s1.__r_.__value_.__l.__size_)
      goto LABEL_10;
    if (v5 == -1)
      std::string::__throw_out_of_range[abi:ne180100]();
    p_s1 = (std::string *)__s1.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (v5 != HIBYTE(__s1.__r_.__value_.__r.__words[2]))
      goto LABEL_10;
    p_s1 = &__s1;
  }
  if (!memcmp(p_s1, siri::dialogengine::TYPE_STRING[0], v7))
  {
    memset(v20, 0, sizeof(v20));
    std::vector<std::shared_ptr<siri::dialogengine::Variable>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::Variable>*,std::shared_ptr<siri::dialogengine::Variable>*>(v20, *((_QWORD **)a1 + 9), *((_QWORD **)a1 + 10), (uint64_t)(*((_QWORD *)a1 + 10) - *((_QWORD *)a1 + 9)) >> 4);
    v12 = *(const void **)a3;
    v11 = *(std::__shared_weak_count **)(a3 + 8);
    v18 = v12;
    v19 = v11;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
    if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&__p, __s1.__r_.__value_.__l.__data_, __s1.__r_.__value_.__l.__size_);
    else
      __p = __s1;
    ArrayItemAll = siri::dialogengine::FindArrayItemAll(v20, v12, v11, (const void **)&__p.__r_.__value_.__l.__data_, 8);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v11)
    {
      v15 = (unint64_t *)&v11->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    v22 = (void **)v20;
    std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100](&v22);
    goto LABEL_11;
  }
LABEL_10:
  siri::dialogengine::Log::Warn((siri::dialogengine::Log *)"Comparator 'all_nonempty' for use with dialog.String[] only!", v6);
  ArrayItemAll = 0;
LABEL_11:
  if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s1.__r_.__value_.__l.__data_);
  return ArrayItemAll;
}

void sub_1BF8F1C90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  *(_QWORD *)(v25 - 40) = &a17;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v25 - 40));
  if (a25 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL siri::dialogengine::VariableArray::AnyNonEmpty(siri::dialogengine::VariableArray *a1, siri::dialogengine::Context *a2, uint64_t a3)
{
  size_t v5;
  const char *v6;
  size_t v7;
  std::string *p_s1;
  _BOOL8 ArrayItemAny;
  std::__shared_weak_count *v11;
  const void *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::string __p;
  const void *v18;
  std::__shared_weak_count *v19;
  uint64_t v20[3];
  std::string __s1;
  void **v22;

  if (!a2)
    return 0;
  siri::dialogengine::VariableArray::GetConcreteType(a1, a2, (uint64_t)&__s1);
  v5 = strlen(siri::dialogengine::TYPE_STRING[0]);
  v7 = v5;
  if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v5 != __s1.__r_.__value_.__l.__size_)
      goto LABEL_10;
    if (v5 == -1)
      std::string::__throw_out_of_range[abi:ne180100]();
    p_s1 = (std::string *)__s1.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (v5 != HIBYTE(__s1.__r_.__value_.__r.__words[2]))
      goto LABEL_10;
    p_s1 = &__s1;
  }
  if (!memcmp(p_s1, siri::dialogengine::TYPE_STRING[0], v7))
  {
    memset(v20, 0, sizeof(v20));
    std::vector<std::shared_ptr<siri::dialogengine::Variable>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::Variable>*,std::shared_ptr<siri::dialogengine::Variable>*>(v20, *((_QWORD **)a1 + 9), *((_QWORD **)a1 + 10), (uint64_t)(*((_QWORD *)a1 + 10) - *((_QWORD *)a1 + 9)) >> 4);
    v12 = *(const void **)a3;
    v11 = *(std::__shared_weak_count **)(a3 + 8);
    v18 = v12;
    v19 = v11;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
    if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&__p, __s1.__r_.__value_.__l.__data_, __s1.__r_.__value_.__l.__size_);
    else
      __p = __s1;
    ArrayItemAny = siri::dialogengine::FindArrayItemAny(v20, v12, v11, (const void **)&__p.__r_.__value_.__l.__data_, 8);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v11)
    {
      v15 = (unint64_t *)&v11->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    v22 = (void **)v20;
    std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100](&v22);
    goto LABEL_11;
  }
LABEL_10:
  siri::dialogengine::Log::Warn((siri::dialogengine::Log *)"Comparator 'any_nonempty' for use with dialog.String[] only!", v6);
  ArrayItemAny = 0;
LABEL_11:
  if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s1.__r_.__value_.__l.__data_);
  return ArrayItemAny;
}

void sub_1BF8F1E88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  *(_QWORD *)(v25 - 40) = &a17;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v25 - 40));
  if (a25 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_1BF8F1F4C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BF8F22E4(_Unwind_Exception *a1, void *a2, uint64_t a3, int a4, __int16 a5, char a6, char a7, void *a8, void *a9, void *a10, char a11, uint64_t a12, std::string *a13, __int128 __p, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,_QWORD *a21)
{
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;

  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(a21);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a15);

  _Unwind_Resume(a1);
}

void sub_1BF8F24DC()
{
  JUMPOUT(0x1BF8F24BCLL);
}

void sub_1BF8F24E8()
{
  JUMPOUT(0x1BF8F24C4);
}

void sub_1BF8F257C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::IsTypeAnExtensionOfBaseType(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unsigned __int8 *i;
  int IsArrayType;
  int v12;
  uint64_t IsTypeAnExtensionOfBaseType;
  char v15;
  std::string::size_type size;
  uint64_t v17;
  int v18;
  unsigned __int8 *v19;
  uint64_t v20;
  std::string *v21;
  int v22;
  int v23;
  int v24;
  int v25;
  BOOL v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::string __p;
  std::string v32;

  v4 = *(unsigned __int8 *)(a1 + 23);
  if ((v4 & 0x80u) == 0)
    v5 = *(unsigned __int8 *)(a1 + 23);
  else
    v5 = *(_QWORD *)(a1 + 8);
  if (!v5)
    return 0;
  v6 = (uint64_t)a2;
  v7 = a2[23];
  v8 = (char)v7;
  if ((v7 & 0x80u) != 0)
    v7 = *((_QWORD *)a2 + 1);
  if (!v7)
    return 0;
  if (v5 == v7)
  {
    if (v8 < 0)
      a2 = *(unsigned __int8 **)a2;
    if ((v4 & 0x80) != 0)
    {
      if (memcmp(*(const void **)a1, a2, *(_QWORD *)(a1 + 8)))
        goto LABEL_18;
    }
    else if (*(_BYTE *)(a1 + 23))
    {
      for (i = (unsigned __int8 *)a1; *i == *a2; ++i)
      {
        ++a2;
        if (!--v4)
          return 0;
      }
      goto LABEL_18;
    }
    return 0;
  }
LABEL_18:
  IsArrayType = siri::dialogengine::IsArrayType((std::string *)a1);
  v12 = siri::dialogengine::IsArrayType((std::string *)v6);
  if (IsArrayType != v12)
    return 0;
  if ((IsArrayType & v12) == 1)
  {
    siri::dialogengine::GetArrayElementType(a1, &v32);
    siri::dialogengine::GetArrayElementType(v6, &__p);
    IsTypeAnExtensionOfBaseType = siri::dialogengine::IsTypeAnExtensionOfBaseType(&v32, &__p, a3);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v32.__r_.__value_.__l.__data_);
    return IsTypeAnExtensionOfBaseType;
  }
  siri::dialogengine::ObjectRegistry::GetObject(a3, (const std::string::value_type **)a1, (uint64_t *)&__p);
  if (!__p.__r_.__value_.__r.__words[0])
  {
    IsTypeAnExtensionOfBaseType = 0;
    goto LABEL_56;
  }
  if (*(char *)(__p.__r_.__value_.__r.__words[0] + 95) < 0)
    std::string::__init_copy_ctor_external(&v32, *(const std::string::value_type **)(__p.__r_.__value_.__r.__words[0] + 72), *(_QWORD *)(__p.__r_.__value_.__r.__words[0] + 80));
  else
    v32 = *(std::string *)(__p.__r_.__value_.__r.__words[0] + 72);
  v15 = HIBYTE(v32.__r_.__value_.__r.__words[2]);
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v32.__r_.__value_.__r.__words[2]);
  else
    size = v32.__r_.__value_.__l.__size_;
  if (size)
  {
    v17 = *(unsigned __int8 *)(v6 + 23);
    v18 = (char)v17;
    if ((v17 & 0x80u) != 0)
      v17 = *(_QWORD *)(v6 + 8);
    if (size == v17)
    {
      if (v18 >= 0)
        v19 = (unsigned __int8 *)v6;
      else
        v19 = *(unsigned __int8 **)v6;
      if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
      {
        if (!memcmp(v32.__r_.__value_.__l.__data_, v19, v32.__r_.__value_.__l.__size_))
        {
          IsTypeAnExtensionOfBaseType = 1;
          goto LABEL_55;
        }
      }
      else
      {
        if (!*((_BYTE *)&v32.__r_.__value_.__s + 23))
        {
          IsTypeAnExtensionOfBaseType = 1;
          goto LABEL_56;
        }
        v20 = HIBYTE(v32.__r_.__value_.__r.__words[2]) - 1;
        v21 = &v32;
        do
        {
          v23 = v21->__r_.__value_.__s.__data_[0];
          v21 = (std::string *)((char *)v21 + 1);
          v22 = v23;
          v25 = *v19++;
          v24 = v25;
          v27 = v20-- != 0;
        }
        while (v22 == v24 && v27);
        if (v22 == v24)
        {
          IsTypeAnExtensionOfBaseType = 1;
          goto LABEL_54;
        }
      }
    }
    IsTypeAnExtensionOfBaseType = siri::dialogengine::IsTypeAnExtensionOfBaseType(&v32, v6, a3);
    v15 = HIBYTE(v32.__r_.__value_.__r.__words[2]);
  }
  else
  {
    IsTypeAnExtensionOfBaseType = 0;
  }
LABEL_54:
  if (v15 < 0)
LABEL_55:
    operator delete(v32.__r_.__value_.__l.__data_);
LABEL_56:
  v28 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v29 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  return IsTypeAnExtensionOfBaseType;
}

void sub_1BF8F2870(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  _Unwind_Resume(a1);
}

double YAML::Directives::Directives(YAML::Directives *this)
{
  double result;

  *(_BYTE *)this = 1;
  *(_QWORD *)&result = 0x200000001;
  *(_QWORD *)((char *)this + 4) = 0x200000001;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 2) = (char *)this + 24;
  return result;
}

{
  double result;

  *(_BYTE *)this = 1;
  *(_QWORD *)&result = 0x200000001;
  *(_QWORD *)((char *)this + 4) = 0x200000001;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 2) = (char *)this + 24;
  return result;
}

void YAML::Directives::TranslateTagHandle(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v6;
  __int128 v7;
  int v8;
  const std::string::value_type *v9;
  std::string::size_type v10;
  std::string *v11;

  v6 = std::__tree<std::string>::find<std::string>(a1 + 16, (const void **)a2);
  if (a1 + 24 != v6)
  {
    if ((*(char *)(v6 + 79) & 0x80000000) == 0)
    {
      v7 = *(_OWORD *)(v6 + 56);
      a3->__r_.__value_.__r.__words[2] = *(_QWORD *)(v6 + 72);
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v7;
      return;
    }
    v9 = *(const std::string::value_type **)(v6 + 56);
    v10 = *(_QWORD *)(v6 + 64);
    goto LABEL_12;
  }
  v8 = *(char *)(a2 + 23);
  if (v8 < 0)
  {
    v9 = *(const std::string::value_type **)a2;
    v10 = *(_QWORD *)(a2 + 8);
    if (v10 != 2)
    {
LABEL_12:
      v11 = a3;
      goto LABEL_13;
    }
    if (*(_WORD *)v9 != 8481)
    {
      v11 = a3;
      v10 = 2;
LABEL_13:
      std::string::__init_copy_ctor_external(v11, v9, v10);
      return;
    }
  }
  else if (v8 != 2 || *(_WORD *)a2 != 8481)
  {
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    a3->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
    return;
  }
  std::string::basic_string[abi:ne180100]<0>(a3, "tag:yaml.org,2002:");
}

void siri::dialogengine::DialogMetadataBytesParser::~DialogMetadataBytesParser(void **this)
{
  *this = off_1E792FE00;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  *this = off_1E792FE00;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  JUMPOUT(0x1C3B8D890);
}

void siri::dialogengine::DialogMetadataBytesParser::Parse(siri::dialogengine::DialogMetadataBytesParser *this@<X0>, const char *a2@<X1>, siri::dialogengine::DialogMetadata::File *a3@<X8>)
{
  char *v4;
  const char *v5;
  char v6;
  void (**v7)(siri::dialogengine::DialogMetadata::File *__hidden);
  uint64_t v8;
  uint64_t v9;

  if (*((char *)this + 31) < 0)
  {
    if (*((_QWORD *)this + 2))
      goto LABEL_3;
LABEL_6:
    siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"No metadata data to parse", a2);
    *(_BYTE *)a3 = 0;
    *((_BYTE *)a3 + 56) = 0;
    return;
  }
  if (!*((_BYTE *)this + 31))
    goto LABEL_6;
LABEL_3:
  v4 = (char *)this + 8;
  siri::dialogengine::DialogMetadata::File::File((siri::dialogengine::DialogMetadata::File *)&v7);
  if ((google::protobuf::MessageLite::ParseFromString(&v7, v4) & 1) != 0)
  {
    siri::dialogengine::DialogMetadata::File::File(a3, (siri::dialogengine::DialogMetadata::File *)&v7);
    v6 = 1;
  }
  else
  {
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Failed to parse metadata", v5);
    v6 = 0;
    *(_BYTE *)a3 = 0;
  }
  *((_BYTE *)a3 + 56) = v6;
  v7 = &off_1E792A850;
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((google::protobuf::internal::RepeatedPtrFieldBase *)&v9);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(&v8);
}

void sub_1BF8F2B5C(_Unwind_Exception *a1)
{
  uint64_t v1;

  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((google::protobuf::internal::RepeatedPtrFieldBase *)(v1 + 24));
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)(v1 + 8));
  _Unwind_Resume(a1);
}

_QWORD *siri::dialogengine::DialogMetadataBytesParser::Source@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "<BYTES>");
}

siri::dialogengine::DialogMetadata::File *siri::dialogengine::DialogMetadata::File::File(siri::dialogengine::DialogMetadata::File *a1, siri::dialogengine::DialogMetadata::File *a2)
{
  siri::dialogengine::DialogMetadata::File::File(a1);
  if (a1 != a2)
    siri::dialogengine::DialogMetadata::File::InternalSwap(a1, a2);
  return a1;
}

void siri::dialogengine::DialogMetadataFileParser::~DialogMetadataFileParser(void **this)
{
  *this = off_1E7930A48;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  *this = off_1E7930A48;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  JUMPOUT(0x1C3B8D890);
}

void siri::dialogengine::DialogMetadataFileParser::Parse(siri::dialogengine::DialogMetadata::File *a1@<X8>)
{
  unint64_t v3;
  char v4;
  void *v5;
  char v6;
  void *__p;
  uint64_t v8;
  char v9;
  uint64_t v10;
  void *v11[2];
  unsigned __int8 v12;

  siri::dialogengine::ParseGzippedFile();
  v3 = v12;
  if ((v12 & 0x80u) != 0)
    v3 = (unint64_t)v11[1];
  if (v3)
  {
    siri::dialogengine::DialogMetadata::File::File((siri::dialogengine::DialogMetadata::File *)&__p);
    if ((google::protobuf::MessageLite::ParseFromString(&__p, v11) & 1) != 0)
    {
      siri::dialogengine::DialogMetadata::File::File(a1, (siri::dialogengine::DialogMetadata::File *)&__p);
      v4 = 1;
    }
    else
    {
      std::operator+<char>();
      siri::dialogengine::Log::LogWithLevel((uint64_t)&v5, 3u);
      if (v6 < 0)
        operator delete(v5);
      v4 = 0;
      *(_BYTE *)a1 = 0;
    }
    *((_BYTE *)a1 + 56) = v4;
    __p = &off_1E792A850;
    google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((google::protobuf::internal::RepeatedPtrFieldBase *)&v10);
    google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(&v8);
  }
  else
  {
    std::operator+<char>();
    siri::dialogengine::Log::LogWithLevel((uint64_t)&__p, 3u);
    if (v9 < 0)
      operator delete(__p);
    *(_BYTE *)a1 = 0;
    *((_BYTE *)a1 + 56) = 0;
  }
  if ((char)v12 < 0)
    operator delete(v11[0]);
}

void sub_1BF8F2D80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22)
{
  uint64_t v22;

  if (a15 < 0)
    operator delete(__p);
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((google::protobuf::internal::RepeatedPtrFieldBase *)&a22);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(&a17);
  if (*(char *)(v22 - 17) < 0)
    operator delete(*(void **)(v22 - 40));
  _Unwind_Resume(a1);
}

void siri::dialogengine::DialogMetadataFileParser::Source(siri::dialogengine::DialogMetadataFileParser *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 31) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 1), *((_QWORD *)this + 2));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 8);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 3);
  }
}

__n128 siri::dialogengine::DialogMetadataBytesParser::DialogMetadataBytesParser(uint64_t a1, __n128 *a2)
{
  __n128 result;

  *(_QWORD *)a1 = off_1E792FE00;
  result = *a2;
  *(_QWORD *)(a1 + 24) = a2[1].n128_u64[0];
  *(__n128 *)(a1 + 8) = result;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  a2->n128_u64[0] = 0;
  return result;
}

{
  __n128 result;

  *(_QWORD *)a1 = off_1E792FE00;
  result = *a2;
  *(_QWORD *)(a1 + 24) = a2[1].n128_u64[0];
  *(__n128 *)(a1 + 8) = result;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  a2->n128_u64[0] = 0;
  return result;
}

__n128 siri::dialogengine::DialogMetadataFileParser::DialogMetadataFileParser(uint64_t a1, __n128 *a2)
{
  __n128 result;

  *(_QWORD *)a1 = off_1E7930A48;
  result = *a2;
  *(_QWORD *)(a1 + 24) = a2[1].n128_u64[0];
  *(__n128 *)(a1 + 8) = result;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  a2->n128_u64[0] = 0;
  return result;
}

{
  __n128 result;

  *(_QWORD *)a1 = off_1E7930A48;
  result = *a2;
  *(_QWORD *)(a1 + 24) = a2[1].n128_u64[0];
  *(__n128 *)(a1 + 8) = result;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  a2->n128_u64[0] = 0;
  return result;
}

void siri::dialogengine::ObjectInput::~ObjectInput(void **this)
{
  siri::dialogengine::PropertyBase::~PropertyBase(this);
  JUMPOUT(0x1C3B8D890);
}

BOOL siri::dialogengine::ObjectInput::operator==(uint64_t a1, const void *a2)
{
  _BOOL8 result;
  _DWORD *v5;

  result = siri::dialogengine::PropertyBase::operator==(a1, (uint64_t)a2);
  if (result)
  {
    return !v5 || *(_DWORD *)(a1 + 156) == v5[39];
  }
  return result;
}

uint64_t siri::dialogengine::ObjectInput::GetAccessMode(siri::dialogengine::ObjectInput *this)
{
  return *((unsigned int *)this + 39);
}

uint64_t siri::dialogengine::ObjectInput::SetAccessMode(uint64_t result, int a2)
{
  *(_DWORD *)(result + 156) = a2;
  return result;
}

std::string *siri::dialogengine::TestCase::TestCase(std::string *this, unsigned int *a2, __int128 *a3, __int128 *a4, __int128 *a5, __int128 *a6, __int128 *a7, std::string::value_type a8)
{
  __int128 v15;
  std::string *v16;
  __int128 v17;
  std::string *v18;
  __int128 v19;
  __int128 v20;
  std::string *v21;
  __int128 v22;
  std::string *v23;
  __int128 v24;
  int v25;
  const std::string::value_type *v26;
  std::string::size_type v27;
  std::string *v28;
  __int128 v29;
  std::string *v30;
  __int128 v31;
  uint64_t v32;
  uint64_t String;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  int v37;
  BOOL v38;
  int v39;
  uint64_t v40;
  _BOOL4 HasMember;
  _BOOL4 v42;
  std::string::value_type *v43;
  std::string::size_type size;
  std::string::pointer data;
  __int128 v46;
  std::string::size_type v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  std::string *v54;
  uint64_t v55;
  char *v56;
  std::string::size_type v57;
  BOOL v58;
  std::string *v59;
  __int128 v60;
  std::string::pointer v61;
  int v62;
  void *v63;
  std::string::size_type v64;
  std::string::pointer v65;
  __int128 v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  std::string *v71;
  uint64_t i;
  unsigned int *v73;
  std::string *v74;
  uint64_t v75;
  char *v76;
  std::vector<std::string>::pointer end;
  __int128 v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  std::string *v82;
  unsigned int *v83;
  std::string *v84;
  __int128 v85;
  std::string *v86;
  std::string::size_type v87;
  std::string *v88;
  char *v89;
  char v90;
  std::vector<std::string>::pointer v91;
  std::string::size_type v92;
  std::string *v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  std::string *v97;
  std::string *v98;
  __int128 v99;
  std::string::pointer v100;
  int v101;
  std::string *v102;
  __int128 v103;
  std::string *v104;
  std::string *v105;
  std::string::size_type v106;
  char v107;
  std::vector<std::string>::pointer v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  std::string *v112;
  std::string::size_type v113;
  std::string *v114;
  std::string *v115;
  unint64_t v116;
  std::string *v117;
  std::string *v118;
  uint64_t v119;
  __int128 *v120;
  std::string *v121;
  char *v122;
  std::string *v123;
  std::string *v124;
  _QWORD *v125;
  uint64_t v126;
  const char *v127;
  unsigned int v128;
  __int128 *v129;
  uint64_t v130;
  std::string::pointer v131;
  _QWORD *v132;
  std::string::size_type v133;
  unint64_t *v134;
  unint64_t v135;
  std::string::size_type v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  unint64_t v140;
  char *v141;
  uint64_t v142;
  char *v143;
  std::string::size_type v144;
  unint64_t *v145;
  unint64_t v146;
  _QWORD *v147;
  std::string::size_type v148;
  std::string::size_type v149;
  __int128 v150;
  int64x2_t v151;
  std::string::pointer v152;
  std::string::pointer v153;
  _QWORD *v154;
  std::string::size_type v155;
  unint64_t *v156;
  unint64_t v157;
  std::string::size_type v158;
  uint64_t v159;
  unint64_t v160;
  uint64_t v161;
  unint64_t v162;
  char *v163;
  uint64_t v164;
  char *v165;
  std::string::size_type v166;
  unint64_t *v167;
  unint64_t v168;
  _QWORD *v169;
  std::string::size_type v170;
  std::string::size_type v171;
  __int128 v172;
  int64x2_t v173;
  std::string::pointer v174;
  std::string::pointer v175;
  _QWORD *v176;
  std::string::size_type v177;
  unint64_t *v178;
  unint64_t v179;
  std::string::size_type v180;
  uint64_t v181;
  unint64_t v182;
  uint64_t v183;
  unint64_t v184;
  char *v185;
  uint64_t v186;
  char *v187;
  std::string::size_type v188;
  unint64_t *v189;
  unint64_t v190;
  _QWORD *v191;
  std::string::size_type v192;
  std::string::size_type v193;
  __int128 v194;
  int64x2_t v195;
  std::string::pointer v196;
  std::__shared_weak_count *v197;
  unint64_t *v198;
  unint64_t v199;
  std::__shared_weak_count *v200;
  unint64_t *v201;
  unint64_t v202;
  std::__shared_weak_count *v203;
  unint64_t *v204;
  unint64_t v205;
  uint64_t v206;
  std::vector<std::string> *v208;
  int64x2_t *v209;
  _BYTE v210[32];
  uint64_t v211;
  uint64_t v212;
  std::vector<std::string> v213;
  std::string __p;
  unsigned int *v215;
  std::string v216;
  unsigned int *v217;
  std::string v218;
  std::string::pointer v219;
  std::string *v220;
  std::__split_buffer<std::string> v221;
  uint64_t v222;
  std::string v223;
  uint64_t v224;
  __int128 v225;
  std::string::size_type v226;
  uint64_t v227;
  std::string __str;
  _QWORD v229[5];

  v229[2] = *MEMORY[0x1E0C80C00];
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v15 = *a3;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v15;
  }
  v16 = this + 1;
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *(const std::string::value_type **)a4, *((_QWORD *)a4 + 1));
  }
  else
  {
    v17 = *a4;
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a4 + 2);
    *(_OWORD *)&v16->__r_.__value_.__l.__data_ = v17;
  }
  v18 = this + 2;
  if (*((char *)a5 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this + 2, *(const std::string::value_type **)a5, *((_QWORD *)a5 + 1));
  }
  else
  {
    v19 = *a5;
    this[2].__r_.__value_.__r.__words[2] = *((_QWORD *)a5 + 2);
    *(_OWORD *)&v18->__r_.__value_.__l.__data_ = v19;
  }
  if (*((char *)a6 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this + 3, *(const std::string::value_type **)a6, *((_QWORD *)a6 + 1));
  }
  else
  {
    v20 = *a6;
    this[3].__r_.__value_.__r.__words[2] = *((_QWORD *)a6 + 2);
    *(_OWORD *)&this[3].__r_.__value_.__l.__data_ = v20;
  }
  v21 = this + 4;
  if (*((char *)a7 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this + 4, *(const std::string::value_type **)a7, *((_QWORD *)a7 + 1));
  }
  else
  {
    v22 = *a7;
    this[4].__r_.__value_.__r.__words[2] = *((_QWORD *)a7 + 2);
    *(_OWORD *)&v21->__r_.__value_.__l.__data_ = v22;
  }
  *(_OWORD *)&this[5].__r_.__value_.__r.__words[1] = 0u;
  this[5].__r_.__value_.__s.__data_[0] = a8;
  *(_OWORD *)&this[7].__r_.__value_.__r.__words[1] = 0u;
  v209 = (int64x2_t *)&this[8].__r_.__value_.__r.__words[1];
  *(_OWORD *)&this[6].__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&this[6].__r_.__value_.__r.__words[2] = 0u;
  *(_OWORD *)&this[8].__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&this[8].__r_.__value_.__r.__words[2] = 0u;
  LOWORD(this[9].__r_.__value_.__r.__words[1]) = 1;
  this[9].__r_.__value_.__r.__words[2] = 0;
  v208 = (std::vector<std::string> *)&this[9].__r_.__value_.__r.__words[2];
  this[10].__r_.__value_.__r.__words[0] = 0;
  this[10].__r_.__value_.__l.__size_ = 0;
  if (rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::HasMember(a2, "name")&& (*(_WORD *)(rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::operator[]<char const>(a2, "name")+ 22) & 0x400) != 0)
  {
    v32 = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::operator[]<char const>(a2, "name");
    String = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::GetString(v32);
    MEMORY[0x1C3B8D53C](&this[5].__r_.__value_.__r.__words[1], String);
  }
  else
  {
    std::operator+<char>();
    v23 = std::string::append(&v218, " (");
    v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    *(_QWORD *)&v210[16] = *((_QWORD *)&v23->__r_.__value_.__l + 2);
    *(_OWORD *)v210 = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    v25 = *((char *)a7 + 23);
    if (v25 >= 0)
      v26 = (const std::string::value_type *)a7;
    else
      v26 = *(const std::string::value_type **)a7;
    if (v25 >= 0)
      v27 = *((unsigned __int8 *)a7 + 23);
    else
      v27 = *((_QWORD *)a7 + 1);
    v28 = std::string::append((std::string *)v210, v26, v27);
    v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
    v221.__end_ = (std::__split_buffer<std::string>::pointer)v28->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v221.__first_ = v29;
    v28->__r_.__value_.__l.__size_ = 0;
    v28->__r_.__value_.__r.__words[2] = 0;
    v28->__r_.__value_.__r.__words[0] = 0;
    v30 = std::string::append((std::string *)&v221, ")");
    v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
    v226 = v30->__r_.__value_.__r.__words[2];
    v225 = v31;
    v30->__r_.__value_.__l.__size_ = 0;
    v30->__r_.__value_.__r.__words[2] = 0;
    v30->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Log::LogWithLevel((uint64_t)&v225, 1u);
    if (SHIBYTE(v226) < 0)
      operator delete((void *)v225);
    if (SHIBYTE(v221.__end_) < 0)
      operator delete(v221.__first_);
    if ((v210[23] & 0x80000000) != 0)
      operator delete(*(void **)v210);
    if (SHIBYTE(v218.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v218.__r_.__value_.__l.__data_);
    MEMORY[0x1C3B8D53C](&this[5].__r_.__value_.__r.__words[1], "<Unnamed Test>");
  }
  if (rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::HasMember(a2, "description")&& (*(_WORD *)(rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::operator[]<char const>(a2, "description")+ 22) & 0x400) != 0)
  {
    v34 = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::operator[]<char const>(a2, "description");
    v35 = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::GetString(v34);
    MEMORY[0x1C3B8D53C](&this[6].__r_.__value_.__r.__words[1], v35);
  }
  if (rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::HasMember(a2, "enabled")&& (*(_WORD *)(rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::operator[]<char const>(a2, "enabled")+ 22) & 8) != 0)
  {
    v37 = *(unsigned __int16 *)(rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::operator[]<char const>(a2, "enabled")+ 22);
    if ((v37 & 8) == 0)
      goto LABEL_319;
    v36 = v37 == 10;
  }
  else
  {
    v36 = 1;
  }
  this[9].__r_.__value_.__s.__data_[8] = v36;
  if (!rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::HasMember(a2, "skip_if_no_morphun")|| (*(_WORD *)(rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::operator[]<char const>(a2, "skip_if_no_morphun")+ 22) & 8) == 0)
  {
    v38 = 0;
    goto LABEL_47;
  }
  v39 = *(unsigned __int16 *)(rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::operator[]<char const>(a2, "skip_if_no_morphun")+ 22);
  if ((v39 & 8) == 0)
LABEL_319:
    __assert_rtn("GetBool", "document.h", 1078, "IsBool()");
  v38 = v39 == 10;
LABEL_47:
  this[9].__r_.__value_.__s.__data_[9] = v38;
  v40 = rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::GenericDocument((uint64_t)&v225);
  v221.__first_ = (std::__split_buffer<std::string>::pointer)"{}";
  v221.__begin_ = (std::__split_buffer<std::string>::pointer)"{}";
  rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::ParseStream<0u,rapidjson::UTF8<char>,rapidjson::GenericStringStream<rapidjson::UTF8<char>>>(v40, (uint64_t)&v221);
  HasMember = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::HasMember(a2, "parameters");
  v42 = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::HasMember(a2, "parametersFile");
  v215 = 0;
  if (HasMember && v42)
  {
    std::string::basic_string[abi:ne180100]<0>(v210, "Both 'parameters' and 'parametersFile' are defined. Use only one or the other.");
    v43 = &this[10].__r_.__value_.__s.__data_[8];
    size = this[10].__r_.__value_.__l.__size_;
    data = this[10].__r_.__value_.__l.__data_;
    if ((unint64_t)data < size)
    {
LABEL_49:
      v46 = *(_OWORD *)v210;
      *((_QWORD *)data + 2) = *(_QWORD *)&v210[16];
      *(_OWORD *)data = v46;
      this[10].__r_.__value_.__r.__words[0] = (std::string::size_type)(data + 24);
      goto LABEL_194;
    }
    v48 = 0xAAAAAAAAAAAAAAABLL * ((data - (std::string::pointer)v208->__begin_) >> 3);
    v52 = v48 + 1;
    if (v48 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<BOOL>::__throw_length_error[abi:ne180100]();
    v53 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(size - (unint64_t)v208->__begin_) >> 3);
    if (2 * v53 > v52)
      v52 = 2 * v53;
    if (v53 >= 0x555555555555555)
      v51 = 0xAAAAAAAAAAAAAAALL;
    else
      v51 = v52;
    v221.__end_cap_.__value_ = (std::allocator<std::string> *)&this[10].__r_.__value_.__r.__words[1];
    if (!v51)
    {
      v54 = 0;
      goto LABEL_78;
    }
LABEL_68:
    v54 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)v43, v51);
LABEL_78:
    v59 = v54 + v48;
    v221.__first_ = v54;
    v221.__begin_ = v59;
    v221.__end_cap_.__value_ = &v54[v51];
    v60 = *(_OWORD *)v210;
    v59->__r_.__value_.__r.__words[2] = *(_QWORD *)&v210[16];
    *(_OWORD *)&v59->__r_.__value_.__l.__data_ = v60;
    memset(v210, 0, 24);
    v221.__end_ = v59 + 1;
    std::vector<std::string>::__swap_out_circular_buffer(v208, &v221);
    v61 = this[10].__r_.__value_.__l.__data_;
    std::__split_buffer<std::string>::~__split_buffer(&v221);
    v62 = v210[23];
    this[10].__r_.__value_.__r.__words[0] = (std::string::size_type)v61;
    if ((v62 & 0x80000000) == 0)
      goto LABEL_194;
    v63 = *(void **)v210;
    goto LABEL_193;
  }
  if (!v42)
    goto LABEL_194;
  if ((*(_WORD *)(rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::operator[]<char const>(a2, "parametersFile")+ 22) & 0x400) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v210, "'parametersFile' value must be a string");
    v43 = &this[10].__r_.__value_.__s.__data_[8];
    v47 = this[10].__r_.__value_.__l.__size_;
    data = this[10].__r_.__value_.__l.__data_;
    if ((unint64_t)data < v47)
      goto LABEL_49;
    v48 = 0xAAAAAAAAAAAAAAABLL * ((data - (std::string::pointer)v208->__begin_) >> 3);
    v49 = v48 + 1;
    if (v48 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<BOOL>::__throw_length_error[abi:ne180100]();
    v50 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v47 - (unint64_t)v208->__begin_) >> 3);
    if (2 * v50 > v49)
      v49 = 2 * v50;
    if (v50 >= 0x555555555555555)
      v51 = 0xAAAAAAAAAAAAAAALL;
    else
      v51 = v49;
    v221.__end_cap_.__value_ = (std::allocator<std::string> *)&this[10].__r_.__value_.__r.__words[1];
    if (!v51)
    {
      v54 = 0;
      goto LABEL_78;
    }
    goto LABEL_68;
  }
  v55 = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::operator[]<char const>(a2, "parametersFile");
  v56 = (char *)rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::GetString(v55);
  std::string::basic_string[abi:ne180100]<0>(&__p, v56);
  v57 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v57 = __p.__r_.__value_.__l.__size_;
  if (!v57)
  {
    std::string::basic_string[abi:ne180100]<0>(v210, "'parametersFile' value is empty");
    v64 = this[10].__r_.__value_.__l.__size_;
    v65 = this[10].__r_.__value_.__l.__data_;
    if ((unint64_t)v65 >= v64)
    {
      v67 = 0xAAAAAAAAAAAAAAABLL * ((v65 - (std::string::pointer)v208->__begin_) >> 3);
      v68 = v67 + 1;
      if (v67 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<BOOL>::__throw_length_error[abi:ne180100]();
      v69 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v64 - (unint64_t)v208->__begin_) >> 3);
      if (2 * v69 > v68)
        v68 = 2 * v69;
      if (v69 >= 0x555555555555555)
        v70 = 0xAAAAAAAAAAAAAAALL;
      else
        v70 = v68;
      v221.__end_cap_.__value_ = (std::allocator<std::string> *)&this[10].__r_.__value_.__r.__words[1];
      if (v70)
        v71 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&this[10].__r_.__value_.__l.__size_, v70);
      else
        v71 = 0;
      v98 = v71 + v67;
      v221.__first_ = v71;
      v221.__begin_ = v98;
      v221.__end_cap_.__value_ = &v71[v70];
      v99 = *(_OWORD *)v210;
      v98->__r_.__value_.__r.__words[2] = *(_QWORD *)&v210[16];
      *(_OWORD *)&v98->__r_.__value_.__l.__data_ = v99;
      memset(v210, 0, 24);
      v221.__end_ = v98 + 1;
      std::vector<std::string>::__swap_out_circular_buffer(v208, &v221);
      v100 = this[10].__r_.__value_.__l.__data_;
      std::__split_buffer<std::string>::~__split_buffer(&v221);
      v101 = v210[23];
      this[10].__r_.__value_.__r.__words[0] = (std::string::size_type)v100;
      if (v101 < 0)
        operator delete(*(void **)v210);
    }
    else
    {
      v66 = *(_OWORD *)v210;
      *((_QWORD *)v65 + 2) = *(_QWORD *)&v210[16];
      *(_OWORD *)v65 = v66;
      this[10].__r_.__value_.__r.__words[0] = (std::string::size_type)(v65 + 24);
    }
    goto LABEL_191;
  }
  std::string::basic_string[abi:ne180100]<0>(&v221, "/");
  v58 = siri::dialogengine::StringStartsWith(&__p, (unsigned __int8 *)&v221);
  if (SHIBYTE(v221.__end_) < 0)
    operator delete(v221.__first_);
  if (!v58)
  {
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v221, this->__r_.__value_.__l.__data_, this->__r_.__value_.__l.__size_);
    }
    else
    {
      *(_OWORD *)&v221.__first_ = *(_OWORD *)&this->__r_.__value_.__l.__data_;
      v221.__end_ = (std::__split_buffer<std::string>::pointer)this->__r_.__value_.__r.__words[2];
    }
    if (SHIBYTE(this[1].__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&__str, this[1].__r_.__value_.__l.__data_, this[1].__r_.__value_.__l.__size_);
    }
    else
    {
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
      __str.__r_.__value_.__r.__words[2] = this[1].__r_.__value_.__r.__words[2];
    }
    siri::dialogengine::DirName(&__str, (uint64_t)&v221.__end_cap_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v223, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    else
      v223 = __p;
    memset(&v218, 0, sizeof(v218));
    v216.__r_.__value_.__r.__words[0] = (std::string::size_type)&v218;
    v216.__r_.__value_.__s.__data_[8] = 0;
    v218.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x48uLL);
    v218.__r_.__value_.__l.__size_ = v218.__r_.__value_.__r.__words[0];
    v218.__r_.__value_.__r.__words[2] = v218.__r_.__value_.__r.__words[0] + 72;
    v218.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v218.__r_.__value_.__r.__words[2], (__int128 *)&v221, (__int128 *)&v224, (std::string *)v218.__r_.__value_.__l.__data_);
    siri::dialogengine::JoinPath((uint64_t *)&v218, (uint64_t)v210);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __p = *(std::string *)v210;
    v216.__r_.__value_.__r.__words[0] = (std::string::size_type)&v218;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v216);
    for (i = 0; i != -9; i -= 3)
    {
      if (SHIBYTE(v223.__r_.__value_.__r.__words[i + 2]) < 0)
        operator delete(*(void **)((char *)&v223.__r_.__value_.__l.__data_ + i * 8));
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
  }
  memset(&v213, 0, sizeof(v213));
  if (!siri::dialogengine::FileExists((uint64_t *)&__p))
  {
    std::operator+<char>();
    end = v213.__end_;
    if (v213.__end_ >= v213.__end_cap_.__value_)
    {
      v79 = 0xAAAAAAAAAAAAAAABLL * (((char *)v213.__end_ - (char *)v213.__begin_) >> 3);
      v80 = v79 + 1;
      if (v79 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<BOOL>::__throw_length_error[abi:ne180100]();
      if (0x5555555555555556 * (((char *)v213.__end_cap_.__value_ - (char *)v213.__begin_) >> 3) > v80)
        v80 = 0x5555555555555556 * (((char *)v213.__end_cap_.__value_ - (char *)v213.__begin_) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v213.__end_cap_.__value_ - (char *)v213.__begin_) >> 3) >= 0x555555555555555)
        v81 = 0xAAAAAAAAAAAAAAALL;
      else
        v81 = v80;
      v221.__end_cap_.__value_ = (std::allocator<std::string> *)&v213.__end_cap_;
      if (v81)
        v82 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v213.__end_cap_, v81);
      else
        v82 = 0;
      v102 = v82 + v79;
      v221.__first_ = v82;
      v221.__begin_ = v102;
      v221.__end_cap_.__value_ = &v82[v81];
      v103 = *(_OWORD *)v210;
      v102->__r_.__value_.__r.__words[2] = *(_QWORD *)&v210[16];
      *(_OWORD *)&v102->__r_.__value_.__l.__data_ = v103;
      memset(v210, 0, 24);
      v221.__end_ = v102 + 1;
      std::vector<std::string>::__swap_out_circular_buffer(&v213, &v221);
      v104 = v213.__end_;
      std::__split_buffer<std::string>::~__split_buffer(&v221);
      v213.__end_ = v104;
      if ((v210[23] & 0x80000000) != 0)
        operator delete(*(void **)v210);
    }
    else
    {
      v78 = *(_OWORD *)v210;
      v213.__end_->__r_.__value_.__r.__words[2] = *(_QWORD *)&v210[16];
      *(_OWORD *)&end->__r_.__value_.__l.__data_ = v78;
      v213.__end_ = end + 1;
    }
    v215 = 0;
    goto LABEL_189;
  }
  v73 = (unsigned int *)operator new();
  rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::GenericDocument((uint64_t)v73);
  v217 = v73;
  siri::dialogengine::ReadFileToString((uint64_t)&__p, (std::string *)v210);
  if (v210[23] >= 0)
    v74 = (std::string *)v210;
  else
    v74 = *(std::string **)v210;
  v221.__first_ = v74;
  v221.__begin_ = v74;
  rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::ParseStream<128u,rapidjson::UTF8<char>,rapidjson::GenericStringStream<rapidjson::UTF8<char>>>((uint64_t)v73, (uint64_t)&v221);
  v75 = v73[22];
  if ((_DWORD)v75)
  {
    if (v75 > 0x11)
      v76 = "Unknown error.";
    else
      v76 = off_1E7931C38[v75];
    std::string::basic_string[abi:ne180100]<0>(&v218, v76);
    std::operator+<char>();
    v84 = std::string::append(&v216, "': ");
    v85 = *(_OWORD *)&v84->__r_.__value_.__l.__data_;
    __str.__r_.__value_.__r.__words[2] = v84->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v85;
    v84->__r_.__value_.__l.__size_ = 0;
    v84->__r_.__value_.__r.__words[2] = 0;
    v84->__r_.__value_.__r.__words[0] = 0;
    if ((v218.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v86 = &v218;
    else
      v86 = (std::string *)v218.__r_.__value_.__r.__words[0];
    if ((v218.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v87 = HIBYTE(v218.__r_.__value_.__r.__words[2]);
    else
      v87 = v218.__r_.__value_.__l.__size_;
    v88 = std::string::append(&__str, (const std::string::value_type *)v86, v87);
    v89 = (char *)v88->__r_.__value_.__r.__words[0];
    v229[0] = v88->__r_.__value_.__l.__size_;
    *(_QWORD *)((char *)v229 + 7) = *(std::string::size_type *)((char *)&v88->__r_.__value_.__r.__words[1] + 7);
    v90 = HIBYTE(v88->__r_.__value_.__r.__words[2]);
    v88->__r_.__value_.__l.__size_ = 0;
    v88->__r_.__value_.__r.__words[2] = 0;
    v88->__r_.__value_.__r.__words[0] = 0;
    v91 = v213.__end_;
    if (v213.__end_ >= v213.__end_cap_.__value_)
    {
      v94 = 0xAAAAAAAAAAAAAAABLL * (((char *)v213.__end_ - (char *)v213.__begin_) >> 3);
      v95 = v94 + 1;
      if (v94 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<BOOL>::__throw_length_error[abi:ne180100]();
      if (0x5555555555555556 * (((char *)v213.__end_cap_.__value_ - (char *)v213.__begin_) >> 3) > v95)
        v95 = 0x5555555555555556 * (((char *)v213.__end_cap_.__value_ - (char *)v213.__begin_) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v213.__end_cap_.__value_ - (char *)v213.__begin_) >> 3) >= 0x555555555555555)
        v96 = 0xAAAAAAAAAAAAAAALL;
      else
        v96 = v95;
      v221.__end_cap_.__value_ = (std::allocator<std::string> *)&v213.__end_cap_;
      if (v96)
        v97 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v213.__end_cap_, v96);
      else
        v97 = 0;
      v112 = v97 + v94;
      v221.__first_ = v97;
      v221.__begin_ = v112;
      v221.__end_cap_.__value_ = &v97[v96];
      v113 = v229[0];
      v112->__r_.__value_.__r.__words[0] = (std::string::size_type)v89;
      v112->__r_.__value_.__l.__size_ = v113;
      *(std::string::size_type *)((char *)&v112->__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v229 + 7);
      *((_BYTE *)&v112->__r_.__value_.__s + 23) = v90;
      v221.__end_ = v112 + 1;
      std::vector<std::string>::__swap_out_circular_buffer(&v213, &v221);
      v93 = v213.__end_;
      std::__split_buffer<std::string>::~__split_buffer(&v221);
      v18 = this + 2;
    }
    else
    {
      v92 = v229[0];
      v213.__end_->__r_.__value_.__l.__data_ = v89;
      v91->__r_.__value_.__l.__size_ = v92;
      *(std::string::size_type *)((char *)&v91->__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v229 + 7);
      *((_BYTE *)&v91->__r_.__value_.__s + 23) = v90;
      v93 = v91 + 1;
    }
    v213.__end_ = v93;
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    if (SHIBYTE(v216.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v216.__r_.__value_.__l.__data_);
    goto LABEL_179;
  }
  if (rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::HasMember(v73, "parameters"))
  {
    if (*(_WORD *)(rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::operator[]<char const>(v73, "parameters")+ 22) == 3)
    {
      v83 = v73;
      v73 = 0;
      goto LABEL_182;
    }
    std::operator+<char>();
    v114 = std::string::append(&v218, ")");
    v106 = v114->__r_.__value_.__r.__words[0];
    __str.__r_.__value_.__r.__words[0] = v114->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v114->__r_.__value_.__r.__words[1] + 7);
    v107 = HIBYTE(v114->__r_.__value_.__r.__words[2]);
    v114->__r_.__value_.__l.__size_ = 0;
    v114->__r_.__value_.__r.__words[2] = 0;
    v114->__r_.__value_.__r.__words[0] = 0;
    v108 = v213.__end_;
    if (v213.__end_ < v213.__end_cap_.__value_)
      goto LABEL_166;
    v109 = 0xAAAAAAAAAAAAAAABLL * (((char *)v213.__end_ - (char *)v213.__begin_) >> 3);
    v116 = v109 + 1;
    if (v109 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<BOOL>::__throw_length_error[abi:ne180100]();
    if (0x5555555555555556 * (((char *)v213.__end_cap_.__value_ - (char *)v213.__begin_) >> 3) > v116)
      v116 = 0x5555555555555556 * (((char *)v213.__end_cap_.__value_ - (char *)v213.__begin_) >> 3);
    if (0xAAAAAAAAAAAAAAABLL * (((char *)v213.__end_cap_.__value_ - (char *)v213.__begin_) >> 3) >= 0x555555555555555)
      v111 = 0xAAAAAAAAAAAAAAALL;
    else
      v111 = v116;
    v221.__end_cap_.__value_ = (std::allocator<std::string> *)&v213.__end_cap_;
    if (!v111)
    {
      v117 = 0;
      goto LABEL_177;
    }
    goto LABEL_174;
  }
  std::operator+<char>();
  v105 = std::string::append(&v218, ")");
  v106 = v105->__r_.__value_.__r.__words[0];
  __str.__r_.__value_.__r.__words[0] = v105->__r_.__value_.__l.__size_;
  *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v105->__r_.__value_.__r.__words[1] + 7);
  v107 = HIBYTE(v105->__r_.__value_.__r.__words[2]);
  v105->__r_.__value_.__l.__size_ = 0;
  v105->__r_.__value_.__r.__words[2] = 0;
  v105->__r_.__value_.__r.__words[0] = 0;
  v108 = v213.__end_;
  if (v213.__end_ >= v213.__end_cap_.__value_)
  {
    v109 = 0xAAAAAAAAAAAAAAABLL * (((char *)v213.__end_ - (char *)v213.__begin_) >> 3);
    v110 = v109 + 1;
    if (v109 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<BOOL>::__throw_length_error[abi:ne180100]();
    if (0x5555555555555556 * (((char *)v213.__end_cap_.__value_ - (char *)v213.__begin_) >> 3) > v110)
      v110 = 0x5555555555555556 * (((char *)v213.__end_cap_.__value_ - (char *)v213.__begin_) >> 3);
    if (0xAAAAAAAAAAAAAAABLL * (((char *)v213.__end_cap_.__value_ - (char *)v213.__begin_) >> 3) >= 0x555555555555555)
      v111 = 0xAAAAAAAAAAAAAAALL;
    else
      v111 = v110;
    v221.__end_cap_.__value_ = (std::allocator<std::string> *)&v213.__end_cap_;
    if (!v111)
    {
      v117 = 0;
      goto LABEL_177;
    }
LABEL_174:
    v117 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v213.__end_cap_, v111);
LABEL_177:
    v118 = v117 + v109;
    v221.__first_ = v117;
    v221.__begin_ = v118;
    v221.__end_cap_.__value_ = &v117[v111];
    v118->__r_.__value_.__r.__words[0] = v106;
    v118->__r_.__value_.__l.__size_ = __str.__r_.__value_.__r.__words[0];
    *(std::string::size_type *)((char *)&v118->__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words + 7);
    *((_BYTE *)&v118->__r_.__value_.__s + 23) = v107;
    v221.__end_ = v118 + 1;
    std::vector<std::string>::__swap_out_circular_buffer(&v213, &v221);
    v115 = v213.__end_;
    std::__split_buffer<std::string>::~__split_buffer(&v221);
    goto LABEL_178;
  }
LABEL_166:
  v108->__r_.__value_.__r.__words[0] = v106;
  v108->__r_.__value_.__l.__size_ = __str.__r_.__value_.__r.__words[0];
  *(std::string::size_type *)((char *)&v108->__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words + 7);
  *((_BYTE *)&v108->__r_.__value_.__s + 23) = v107;
  v115 = v108 + 1;
LABEL_178:
  v213.__end_ = v115;
LABEL_179:
  if (SHIBYTE(v218.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v218.__r_.__value_.__l.__data_);
  v83 = 0;
LABEL_182:
  if ((v210[23] & 0x80000000) != 0)
    operator delete(*(void **)v210);
  if (v73)
  {
    v119 = rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::~GenericDocument((uint64_t)v73);
    MEMORY[0x1C3B8D890](v119, 0x1072C40447AC0FBLL);
  }
  v215 = v83;
  if (v83)
  {
    v120 = (__int128 *)rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::operator[]<char const>(v83, "parameters");
    if (!v227)
      __assert_rtn("GetAllocator", "document.h", 2407, "allocator_");
    v221.__begin_ = (std::__split_buffer<std::string>::pointer)"parameters";
    v221.__end_ = (std::__split_buffer<std::string>::pointer)0x405000000000000;
    v221.__first_ = (std::__split_buffer<std::string>::pointer)10;
    rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::AddMember((unsigned int *)&v225, (__int128 *)&v221, v120, v227);
    goto LABEL_190;
  }
LABEL_189:
  std::vector<std::string>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::string*>,std::__wrap_iter<std::string*>>(v208, (std::string *)this[10].__r_.__value_.__l.__data_, v213.__begin_, (__int128 *)v213.__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)v213.__end_ - (char *)v213.__begin_) >> 3));
LABEL_190:
  v221.__first_ = (std::__split_buffer<std::string>::pointer)&v213;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v221);
LABEL_191:
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_194;
  v63 = (void *)__p.__r_.__value_.__r.__words[0];
LABEL_193:
  operator delete(v63);
LABEL_194:
  std::string::basic_string[abi:ne180100]<0>(&v221, "templateDir");
  v121 = this;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
    v121 = (std::string *)this->__r_.__value_.__r.__words[0];
  std::string::basic_string[abi:ne180100]<0>(v210, (char *)v121);
  siri::dialogengine::SetJSONString((unsigned int *)&v225, (uint64_t)&v221, (uint64_t)v210);
  if ((v210[23] & 0x80000000) != 0)
    operator delete(*(void **)v210);
  if (SHIBYTE(v221.__end_) < 0)
    operator delete(v221.__first_);
  if (SHIBYTE(this[2].__r_.__value_.__r.__words[2]) < 0)
  {
    if (!this[2].__r_.__value_.__l.__size_)
      goto LABEL_210;
  }
  else if (!*((_BYTE *)&this[2].__r_.__value_.__s + 23))
  {
    goto LABEL_210;
  }
  std::string::basic_string[abi:ne180100]<0>(&v221, "catId");
  v122 = (char *)v18;
  if (SHIBYTE(this[2].__r_.__value_.__r.__words[2]) < 0)
    v122 = (char *)v18->__r_.__value_.__r.__words[0];
  std::string::basic_string[abi:ne180100]<0>(v210, v122);
  siri::dialogengine::SetJSONString((unsigned int *)&v225, (uint64_t)&v221, (uint64_t)v210);
  if ((v210[23] & 0x80000000) != 0)
    operator delete(*(void **)v210);
  if (SHIBYTE(v221.__end_) < 0)
    operator delete(v221.__first_);
LABEL_210:
  if (SHIBYTE(this[3].__r_.__value_.__r.__words[2]) < 0)
  {
    if (!this[3].__r_.__value_.__l.__size_)
      goto LABEL_220;
  }
  else if (!*((_BYTE *)&this[3].__r_.__value_.__s + 23))
  {
    goto LABEL_220;
  }
  std::string::basic_string[abi:ne180100]<0>(&v221, "patternId");
  v123 = this + 3;
  if (SHIBYTE(this[3].__r_.__value_.__r.__words[2]) < 0)
    v123 = (std::string *)this[3].__r_.__value_.__l.__data_;
  std::string::basic_string[abi:ne180100]<0>(v210, (char *)v123);
  siri::dialogengine::SetJSONString((unsigned int *)&v225, (uint64_t)&v221, (uint64_t)v210);
  if ((v210[23] & 0x80000000) != 0)
    operator delete(*(void **)v210);
  if (SHIBYTE(v221.__end_) < 0)
    operator delete(v221.__first_);
LABEL_220:
  std::string::basic_string[abi:ne180100]<0>(&v221, "locale");
  v124 = this + 4;
  if (SHIBYTE(this[4].__r_.__value_.__r.__words[2]) < 0)
    v124 = (std::string *)v21->__r_.__value_.__r.__words[0];
  std::string::basic_string[abi:ne180100]<0>(v210, (char *)v124);
  siri::dialogengine::SetJSONString((unsigned int *)&v225, (uint64_t)&v221, (uint64_t)v210);
  if ((v210[23] & 0x80000000) != 0)
    operator delete(*(void **)v210);
  if (SHIBYTE(v221.__end_) < 0)
    operator delete(v221.__first_);
  if (this[5].__r_.__value_.__s.__data_[0])
  {
    std::string::basic_string[abi:ne180100]<0>(&v221, "debug");
    siri::dialogengine::SetJSONBool((unsigned int *)&v225, (uint64_t)&v221, this[5].__r_.__value_.__s.__data_[0]);
    if (SHIBYTE(v221.__end_) < 0)
      operator delete(v221.__first_);
  }
  v125 = operator new(0x68uLL);
  v126 = 0;
  v125[12] = "labelMode";
  *((_OWORD *)v125 + 4) = xmmword_1E792CEE0;
  *((_OWORD *)v125 + 5) = *(_OWORD *)off_1E792CEF0;
  *(_OWORD *)v125 = xmmword_1E792CEA0;
  *((_OWORD *)v125 + 1) = *(_OWORD *)&off_1E792CEB0;
  *((_OWORD *)v125 + 2) = xmmword_1E792CEC0;
  *((_OWORD *)v125 + 3) = *(_OWORD *)&off_1E792CED0;
  do
  {
    v127 = (const char *)v125[v126];
    if (rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::HasMember(a2, v127))
    {
      v128 = rapidjson::GenericStringRef<char>::NotNullStrLen(v127);
      v129 = (__int128 *)rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::operator[]<char const>(a2, v127);
      if (!v227)
        __assert_rtn("GetAllocator", "document.h", 2407, "allocator_");
      *(_OWORD *)&v221.__begin_ = (unint64_t)v127;
      HIWORD(v221.__end_) = 1029;
      v221.__first_ = (std::__split_buffer<std::string>::pointer)v128;
      rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::AddMember((unsigned int *)&v225, (__int128 *)&v221, v129, v227);
    }
    ++v126;
  }
  while (v126 != 13);
  memset(v210, 0, sizeof(v210));
  v211 = 0;
  v212 = 256;
  memset(&v221.__begin_, 0, 32);
  v221.__first_ = (std::__split_buffer<std::string>::pointer)v210;
  v222 = 0;
  v223.__r_.__value_.__r.__words[0] = 512;
  LODWORD(v223.__r_.__value_.__r.__words[1]) = 324;
  WORD2(v223.__r_.__value_.__r.__words[1]) = 0x2000;
  v223.__r_.__value_.__r.__words[2] = 4;
  rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::Accept<rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>>((unsigned int *)&v225, (uint64_t *)&v221);
  v130 = rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>::GetString((uint64_t *)v210);
  MEMORY[0x1C3B8D53C](&this[7].__r_.__value_.__r.__words[1], v130);
  siri::dialogengine::GetConditions((uint64_t *)&__str, a2, "expect", 0);
  if (__str.__r_.__value_.__r.__words[0])
  {
    v131 = this[9].__r_.__value_.__l.__data_;
    v132 = (_QWORD *)this[8].__r_.__value_.__r.__words[2];
    if (v132 >= (_QWORD *)v131)
    {
      v137 = ((uint64_t)v132 - v209->i64[0]) >> 4;
      v138 = v137 + 1;
      if ((unint64_t)(v137 + 1) >> 60)
        std::vector<BOOL>::__throw_length_error[abi:ne180100]();
      v139 = (uint64_t)&v131[-v209->i64[0]];
      if (v139 >> 3 > v138)
        v138 = v139 >> 3;
      if ((unint64_t)v139 >= 0x7FFFFFFFFFFFFFF0)
        v140 = 0xFFFFFFFFFFFFFFFLL;
      else
        v140 = v138;
      v220 = this + 9;
      v141 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>>(v140);
      v143 = &v141[16 * v137];
      v144 = __str.__r_.__value_.__l.__size_;
      *(_OWORD *)v143 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
      if (v144)
      {
        v145 = (unint64_t *)(v144 + 8);
        do
          v146 = __ldxr(v145);
        while (__stxr(v146 + 1, v145));
      }
      v148 = this[8].__r_.__value_.__l.__size_;
      v147 = (_QWORD *)this[8].__r_.__value_.__r.__words[2];
      if (v147 == (_QWORD *)v148)
      {
        v151 = vdupq_n_s64((unint64_t)v147);
        v149 = (std::string::size_type)&v141[16 * v137];
      }
      else
      {
        v149 = (std::string::size_type)&v141[16 * v137];
        do
        {
          v150 = *((_OWORD *)v147 - 1);
          v147 -= 2;
          *(_OWORD *)(v149 - 16) = v150;
          v149 -= 16;
          *v147 = 0;
          v147[1] = 0;
        }
        while (v147 != (_QWORD *)v148);
        v151 = *v209;
      }
      v136 = (std::string::size_type)(v143 + 16);
      this[8].__r_.__value_.__l.__size_ = v149;
      this[8].__r_.__value_.__r.__words[2] = (std::string::size_type)(v143 + 16);
      *(int64x2_t *)&v218.__r_.__value_.__r.__words[1] = v151;
      v152 = this[9].__r_.__value_.__l.__data_;
      this[9].__r_.__value_.__r.__words[0] = (std::string::size_type)&v141[16 * v142];
      v219 = v152;
      v218.__r_.__value_.__r.__words[0] = v151.i64[0];
      std::__split_buffer<std::shared_ptr<siri::dialogengine::ChunkText>>::~__split_buffer((uint64_t)&v218);
    }
    else
    {
      *v132 = __str.__r_.__value_.__r.__words[0];
      v133 = __str.__r_.__value_.__l.__size_;
      v132[1] = __str.__r_.__value_.__l.__size_;
      if (v133)
      {
        v134 = (unint64_t *)(v133 + 8);
        do
          v135 = __ldxr(v134);
        while (__stxr(v135 + 1, v134));
      }
      v136 = (std::string::size_type)(v132 + 2);
    }
    this[8].__r_.__value_.__r.__words[2] = v136;
  }
  siri::dialogengine::GetConditions((uint64_t *)&v216, a2, "expect_all", 0);
  if (v216.__r_.__value_.__r.__words[0])
  {
    v153 = this[9].__r_.__value_.__l.__data_;
    v154 = (_QWORD *)this[8].__r_.__value_.__r.__words[2];
    if (v154 >= (_QWORD *)v153)
    {
      v159 = ((uint64_t)v154 - v209->i64[0]) >> 4;
      v160 = v159 + 1;
      if ((unint64_t)(v159 + 1) >> 60)
        std::vector<BOOL>::__throw_length_error[abi:ne180100]();
      v161 = (uint64_t)&v153[-v209->i64[0]];
      if (v161 >> 3 > v160)
        v160 = v161 >> 3;
      if ((unint64_t)v161 >= 0x7FFFFFFFFFFFFFF0)
        v162 = 0xFFFFFFFFFFFFFFFLL;
      else
        v162 = v160;
      v220 = this + 9;
      v163 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>>(v162);
      v165 = &v163[16 * v159];
      v166 = v216.__r_.__value_.__l.__size_;
      *(_OWORD *)v165 = *(_OWORD *)&v216.__r_.__value_.__l.__data_;
      if (v166)
      {
        v167 = (unint64_t *)(v166 + 8);
        do
          v168 = __ldxr(v167);
        while (__stxr(v168 + 1, v167));
      }
      v170 = this[8].__r_.__value_.__l.__size_;
      v169 = (_QWORD *)this[8].__r_.__value_.__r.__words[2];
      if (v169 == (_QWORD *)v170)
      {
        v173 = vdupq_n_s64((unint64_t)v169);
        v171 = (std::string::size_type)&v163[16 * v159];
      }
      else
      {
        v171 = (std::string::size_type)&v163[16 * v159];
        do
        {
          v172 = *((_OWORD *)v169 - 1);
          v169 -= 2;
          *(_OWORD *)(v171 - 16) = v172;
          v171 -= 16;
          *v169 = 0;
          v169[1] = 0;
        }
        while (v169 != (_QWORD *)v170);
        v173 = *v209;
      }
      v158 = (std::string::size_type)(v165 + 16);
      this[8].__r_.__value_.__l.__size_ = v171;
      this[8].__r_.__value_.__r.__words[2] = (std::string::size_type)(v165 + 16);
      *(int64x2_t *)&v218.__r_.__value_.__r.__words[1] = v173;
      v174 = this[9].__r_.__value_.__l.__data_;
      this[9].__r_.__value_.__r.__words[0] = (std::string::size_type)&v163[16 * v164];
      v219 = v174;
      v218.__r_.__value_.__r.__words[0] = v173.i64[0];
      std::__split_buffer<std::shared_ptr<siri::dialogengine::ChunkText>>::~__split_buffer((uint64_t)&v218);
    }
    else
    {
      *v154 = v216.__r_.__value_.__r.__words[0];
      v155 = v216.__r_.__value_.__l.__size_;
      v154[1] = v216.__r_.__value_.__l.__size_;
      if (v155)
      {
        v156 = (unint64_t *)(v155 + 8);
        do
          v157 = __ldxr(v156);
        while (__stxr(v157 + 1, v156));
      }
      v158 = (std::string::size_type)(v154 + 2);
    }
    this[8].__r_.__value_.__r.__words[2] = v158;
  }
  siri::dialogengine::GetConditions((uint64_t *)&__p, a2, "expect_any", 1);
  if (__p.__r_.__value_.__r.__words[0])
  {
    v175 = this[9].__r_.__value_.__l.__data_;
    v176 = (_QWORD *)this[8].__r_.__value_.__r.__words[2];
    if (v176 >= (_QWORD *)v175)
    {
      v181 = ((uint64_t)v176 - v209->i64[0]) >> 4;
      v182 = v181 + 1;
      if ((unint64_t)(v181 + 1) >> 60)
        std::vector<BOOL>::__throw_length_error[abi:ne180100]();
      v183 = (uint64_t)&v175[-v209->i64[0]];
      if (v183 >> 3 > v182)
        v182 = v183 >> 3;
      if ((unint64_t)v183 >= 0x7FFFFFFFFFFFFFF0)
        v184 = 0xFFFFFFFFFFFFFFFLL;
      else
        v184 = v182;
      v220 = this + 9;
      v185 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>>(v184);
      v187 = &v185[16 * v181];
      v188 = __p.__r_.__value_.__l.__size_;
      *(_OWORD *)v187 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      if (v188)
      {
        v189 = (unint64_t *)(v188 + 8);
        do
          v190 = __ldxr(v189);
        while (__stxr(v190 + 1, v189));
      }
      v192 = this[8].__r_.__value_.__l.__size_;
      v191 = (_QWORD *)this[8].__r_.__value_.__r.__words[2];
      if (v191 == (_QWORD *)v192)
      {
        v195 = vdupq_n_s64((unint64_t)v191);
        v193 = (std::string::size_type)&v185[16 * v181];
      }
      else
      {
        v193 = (std::string::size_type)&v185[16 * v181];
        do
        {
          v194 = *((_OWORD *)v191 - 1);
          v191 -= 2;
          *(_OWORD *)(v193 - 16) = v194;
          v193 -= 16;
          *v191 = 0;
          v191[1] = 0;
        }
        while (v191 != (_QWORD *)v192);
        v195 = *v209;
      }
      v180 = (std::string::size_type)(v187 + 16);
      this[8].__r_.__value_.__l.__size_ = v193;
      this[8].__r_.__value_.__r.__words[2] = (std::string::size_type)(v187 + 16);
      *(int64x2_t *)&v218.__r_.__value_.__r.__words[1] = v195;
      v196 = this[9].__r_.__value_.__l.__data_;
      this[9].__r_.__value_.__r.__words[0] = (std::string::size_type)&v185[16 * v186];
      v219 = v196;
      v218.__r_.__value_.__r.__words[0] = v195.i64[0];
      std::__split_buffer<std::shared_ptr<siri::dialogengine::ChunkText>>::~__split_buffer((uint64_t)&v218);
    }
    else
    {
      *v176 = __p.__r_.__value_.__r.__words[0];
      v177 = __p.__r_.__value_.__l.__size_;
      v176[1] = __p.__r_.__value_.__l.__size_;
      if (v177)
      {
        v178 = (unint64_t *)(v177 + 8);
        do
          v179 = __ldxr(v178);
        while (__stxr(v179 + 1, v178));
      }
      v180 = (std::string::size_type)(v176 + 2);
    }
    this[8].__r_.__value_.__r.__words[2] = v180;
  }
  v197 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v198 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v199 = __ldaxr(v198);
    while (__stlxr(v199 - 1, v198));
    if (!v199)
    {
      ((void (*)(std::__shared_weak_count *))v197->__on_zero_shared)(v197);
      std::__shared_weak_count::__release_weak(v197);
    }
  }
  v200 = (std::__shared_weak_count *)v216.__r_.__value_.__l.__size_;
  if (v216.__r_.__value_.__l.__size_)
  {
    v201 = (unint64_t *)(v216.__r_.__value_.__l.__size_ + 8);
    do
      v202 = __ldaxr(v201);
    while (__stlxr(v202 - 1, v201));
    if (!v202)
    {
      ((void (*)(std::__shared_weak_count *))v200->__on_zero_shared)(v200);
      std::__shared_weak_count::__release_weak(v200);
    }
  }
  v203 = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
  if (__str.__r_.__value_.__l.__size_)
  {
    v204 = (unint64_t *)(__str.__r_.__value_.__l.__size_ + 8);
    do
      v205 = __ldaxr(v204);
    while (__stlxr(v205 - 1, v204));
    if (!v205)
    {
      ((void (*)(std::__shared_weak_count *))v203->__on_zero_shared)(v203);
      std::__shared_weak_count::__release_weak(v203);
    }
  }
  rapidjson::internal::Stack<rapidjson::CrtAllocator>::Destroy((uint64_t)&v221.__begin_);
  rapidjson::internal::Stack<rapidjson::CrtAllocator>::Destroy((uint64_t)v210);
  operator delete(v125);
  if (v215)
  {
    v206 = rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::~GenericDocument((uint64_t)v215);
    MEMORY[0x1C3B8D890](v206, 0x1072C40447AC0FBLL);
  }
  rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::~GenericDocument((uint64_t)&v225);
  return this;
}

void sub_1BF8F4714(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, void **a9, void **a10, void **a11, uint64_t a12, void **a13, uint64_t a14, void *a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *a31,void *__p,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,std::__split_buffer<std::string> *a37,uint64_t a38,uint64_t a39,void *__pa,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48)
{
  uint64_t v48;
  void **v49;
  void **v50;
  void **v51;
  uint64_t v52;

  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a48);
  if (a45 < 0)
    operator delete(__pa);
  if (SHIBYTE(a17) < 0)
    operator delete(a15);
  std::unique_ptr<rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>>::reset[abi:ne180100](&a39);
  __pa = &a25;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__pa);
  if (SHIBYTE(a33) < 0)
    operator delete(a31);
  std::unique_ptr<rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>>::reset[abi:ne180100](&a34);
  rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::~GenericDocument(v52 - 256);
  *(_QWORD *)(v52 - 256) = a12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v52 - 256));
  *(_QWORD *)(v52 - 256) = a14;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v52 - 256));
  if (*(char *)(v48 + 199) < 0)
    operator delete(*v51);
  if (*(char *)(v48 + 175) < 0)
    operator delete(*a11);
  if (*(char *)(v48 + 151) < 0)
    operator delete(*v50);
  if (*(char *)(v48 + 119) < 0)
    operator delete(*v49);
  if (*(char *)(v48 + 95) < 0)
    operator delete(*a13);
  if (*(char *)(v48 + 71) < 0)
    operator delete(*a10);
  if (*(char *)(v48 + 47) < 0)
    operator delete(*a9);
  if (*(char *)(v48 + 23) < 0)
    operator delete(*(void **)v48);
  _Unwind_Resume(a1);
}

uint64_t rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::ParseStream<0u,rapidjson::UTF8<char>,rapidjson::GenericStringStream<rapidjson::UTF8<char>>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned __int8 *i;
  unsigned int v6;
  BOOL v7;
  uint64_t v8;
  unsigned int v10;
  uint64_t v11;
  int v13;
  BOOL (*v14)(rapidjson::ParseResult *);
  uint64_t v15;
  __int128 v16;
  int v18;
  unsigned __int8 *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  int v26;

  v4 = *(_QWORD *)(a1 + 40);
  v20 = a1;
  v21 = v4;
  v22 = 0u;
  v23 = 0u;
  v24 = 256;
  v26 = 2;
  LODWORD(v25) = 0;
  *((_QWORD *)&v25 + 1) = 0;
  for (i = *(unsigned __int8 **)a2; ; ++i)
  {
    v6 = *i;
    v7 = v6 > 0x20;
    v8 = (1 << v6) & 0x100002600;
    if (v7 || v8 == 0)
      break;
  }
  *(_QWORD *)a2 = i;
  if (!*i)
  {
    v18 = 1;
LABEL_26:
    v19 = &i[-*(_QWORD *)(a2 + 8)];
    LODWORD(v25) = v18;
    *((_QWORD *)&v25 + 1) = v19;
    goto LABEL_16;
  }
  rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator>::ParseValue<0u,rapidjson::GenericStringStream<rapidjson::UTF8<char>>,rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>>((uint64_t)&v21, (unsigned __int8 **)a2, a1);
  if (!(_DWORD)v25)
  {
    for (i = *(unsigned __int8 **)a2; ; ++i)
    {
      v10 = *i;
      v7 = v10 > 0x20;
      v11 = (1 << v10) & 0x100002600;
      if (v7 || v11 == 0)
        break;
    }
    *(_QWORD *)a2 = i;
    if (*i)
    {
      v18 = 2;
      goto LABEL_26;
    }
  }
LABEL_16:
  *(_QWORD *)&v23 = *((_QWORD *)&v22 + 1);
  v13 = v25;
  *(_OWORD *)(a1 + 88) = v25;
  if (v13)
    v14 = 0;
  else
    v14 = rapidjson::ParseResult::IsError;
  if (v14)
  {
    v15 = *(_QWORD *)(a1 + 64);
    if (v15 - *(_QWORD *)(a1 + 56) != 24)
      __assert_rtn("ParseStream", "document.h", 2259, "stack_.GetSize() == sizeof(ValueType)");
    *(_QWORD *)(a1 + 64) = v15 - 24;
    if (v15 - 24 != a1)
    {
      v16 = *(_OWORD *)(v15 - 24);
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(v15 - 8);
      *(_OWORD *)a1 = v16;
      *(_WORD *)(v15 - 2) = 0;
    }
  }
  rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::ClearStackOnExit::~ClearStackOnExit((uint64_t)&v20);
  rapidjson::internal::Stack<rapidjson::CrtAllocator>::Destroy((uint64_t)&v21);
  return a1;
}

void sub_1BF8F4D50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  a13 = a12;
  rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::ClearStackOnExit::~ClearStackOnExit((uint64_t)&a9);
  rapidjson::internal::Stack<rapidjson::CrtAllocator>::Destroy((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t std::unique_ptr<rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>>::reset[abi:ne180100](uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  *a1 = 0;
  if (result)
  {
    rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::~GenericDocument(result);
    JUMPOUT(0x1C3B8D890);
  }
  return result;
}

BOOL rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::Accept<rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>>(unsigned int *a1, uint64_t *a2)
{
  __int16 v2;
  uint64_t v5;
  uint64_t *v6;
  int v7;
  uint64_t v8;
  uint64_t String;
  unsigned int StringLength;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unint64_t v15;
  double v16;

  v2 = *((_WORD *)a1 + 11);
  switch(v2 & 7)
  {
    case 0:
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix((uint64_t)a2, 0);
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteNull(a2);
      return 1;
    case 1:
      v5 = 1;
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix((uint64_t)a2, 1);
      v6 = a2;
      v7 = 0;
      goto LABEL_5;
    case 2:
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix((uint64_t)a2, 2);
      v5 = 1;
      v6 = a2;
      v7 = 1;
LABEL_5:
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteBool(v6, v7);
      return v5;
    case 3:
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::StartObject((uint64_t)a2);
      if (*((_WORD *)a1 + 11) != 3)
        __assert_rtn("MemberBegin", "document.h", 1155, "IsObject()");
      v8 = *((_QWORD *)a1 + 1);
      while (2)
      {
        if (v8 == *((_QWORD *)a1 + 1) + 48 * *a1)
        {
          rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::EndObject((uint64_t)a2);
          return 1;
        }
        if ((*(_WORD *)(v8 + 22) & 0x400) == 0)
          __assert_rtn("Accept", "document.h", 1872, "m->name.IsString()");
        String = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::GetString(v8);
        StringLength = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::GetStringLength((unsigned int *)v8);
        rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::String(a2, String, StringLength);
        v11 = v8 + 24;
        if ((rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::Accept<rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>>(v11, a2) & 1) != 0)
        {
          v8 = v11 + 24;
          if (*((_WORD *)a1 + 11) != 3)
            __assert_rtn("MemberEnd", "document.h", 1158, "IsObject()");
          continue;
        }
        break;
      }
      return 0;
    case 4:
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::StartArray((uint64_t)a2);
      if (*((_WORD *)a1 + 11) != 4)
        __assert_rtn("Begin", "document.h", 1591, "IsArray()");
      v12 = *((_QWORD *)a1 + 1);
      while (2)
      {
        if (v12 == *((_QWORD *)a1 + 1) + 24 * *a1)
        {
          rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::EndArray((uint64_t)a2);
          return 1;
        }
        if (rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::Accept<rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>>(v12, a2))
        {
          v12 += 24;
          if (*((_WORD *)a1 + 11) != 4)
            __assert_rtn("End", "document.h", 1594, "IsArray()");
          continue;
        }
        break;
      }
      return 0;
    case 5:
      v13 = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::GetString((uint64_t)a1);
      v14 = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::GetStringLength(a1);
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::String(a2, v13, v14);
      return 1;
    case 6:
      if ((*((_WORD *)a1 + 11) & 0x200) != 0)
      {
        v16 = *(double *)a1;
        rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix((uint64_t)a2, 6);
        return rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteDouble((uint64_t)a2, v16);
      }
      else
      {
        if ((v2 & 0x20) != 0)
        {
          rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::Int((uint64_t **)a2, (rapidjson::internal *)*a1);
        }
        else if ((v2 & 0x40) != 0)
        {
          rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::Uint((uint64_t **)a2, (rapidjson::internal *)*a1);
        }
        else
        {
          v15 = *(_QWORD *)a1;
          if ((v2 & 0x80) != 0)
            rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::Int64((uint64_t **)a2, v15);
          else
            rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::Uint64((uint64_t **)a2, v15);
        }
        return 1;
      }
    default:
      __assert_rtn("Accept", "document.h", 1892, "GetType() == kNumberType");
  }
}

void siri::dialogengine::GetConditions(uint64_t *a1, unsigned int *a2, const char *a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unsigned int v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34[2];
  __int128 v35;

  if (!rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::HasMember(a2, a3)|| (v8 = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::operator[]<char const>(a2, a3), *(_WORD *)(v8 + 22) != 4))
  {
    *a1 = 0;
    a1[1] = 0;
    return;
  }
  v9 = v8;
  v10 = operator new();
  *(_QWORD *)(v10 + 24) = 0;
  *(_QWORD *)(v10 + 16) = 0;
  *(_QWORD *)v10 = &off_1E792B438;
  *(_QWORD *)(v10 + 8) = v10 + 16;
  *(_OWORD *)(v10 + 40) = 0u;
  *(_OWORD *)(v10 + 56) = 0u;
  *(_OWORD *)(v10 + 72) = 0u;
  *(_DWORD *)(v10 + 32) = a4;
  *(_QWORD *)&v35 = v10;
  v11 = (std::__shared_weak_count *)operator new();
  v11->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  v11->__vftable = (std::__shared_weak_count_vtbl *)&off_1E792DA88;
  v11->__shared_weak_owners_ = 0;
  v11[1].__vftable = (std::__shared_weak_count_vtbl *)v10;
  *((_QWORD *)&v35 + 1) = v11;
  if (*(_WORD *)(v9 + 22) != 4)
    __assert_rtn("Size", "document.h", 1557, "IsArray()");
  if (!*(_DWORD *)v9)
    goto LABEL_7;
  if ((*(_WORD *)(rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::operator[](v9, 0)+ 22) & 0x400) == 0)
  {
    if (*(_WORD *)(v9 + 22) != 4)
LABEL_18:
      __assert_rtn("Size", "document.h", 1557, "IsArray()");
LABEL_7:
    v13 = 0;
    while (v13 < *(_DWORD *)v9)
    {
      v14 = (std::__shared_weak_count *)*((_QWORD *)&v35 + 1);
      v33 = v35;
      if (*((_QWORD *)&v35 + 1))
      {
        v15 = (unint64_t *)(*((_QWORD *)&v35 + 1) + 8);
        do
          v16 = __ldxr(v15);
        while (__stxr(v16 + 1, v15));
      }
      v17 = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::operator[](v9, v13);
      siri::dialogengine::ParseCondition((uint64_t *)&v33, v17);
      if (v14)
      {
        v18 = (unint64_t *)&v14->__shared_owners_;
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
      ++v13;
      if (*(_WORD *)(v9 + 22) != 4)
        goto LABEL_18;
    }
    goto LABEL_27;
  }
  v34[0] = v10;
  v34[1] = (uint64_t)v11;
  do
    v20 = __ldxr(p_shared_owners);
  while (__stxr(v20 + 1, p_shared_owners));
  siri::dialogengine::ParseCondition(v34, v9);
  do
    v21 = __ldaxr(p_shared_owners);
  while (__stlxr(v21 - 1, p_shared_owners));
  if (!v21)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
LABEL_27:
  v22 = operator new();
  *(_OWORD *)(v22 + 40) = 0u;
  *(_OWORD *)(v22 + 24) = 0u;
  *(_OWORD *)(v22 + 8) = 0u;
  *(_QWORD *)(v22 + 88) = 0;
  *(_QWORD *)(v22 + 80) = 0;
  *(_QWORD *)(v22 + 72) = v22 + 80;
  *(_QWORD *)v22 = off_1E7939B60;
  *(_QWORD *)(v22 + 56) = 0;
  *(_QWORD *)(v22 + 64) = &unk_1E7939B88;
  *(_OWORD *)(v22 + 96) = 0u;
  *(_OWORD *)(v22 + 112) = 0u;
  *(_OWORD *)(v22 + 128) = 0u;
  *(_OWORD *)(v22 + 144) = 0u;
  *(_QWORD *)(v22 + 160) = 0;
  *a1 = v22;
  v23 = (_QWORD *)operator new();
  *v23 = &off_1E792DB00;
  v23[1] = 0;
  v23[2] = 0;
  v23[3] = v22;
  a1[1] = (uint64_t)v23;
  v24 = (std::__shared_weak_count *)*((_QWORD *)&v35 + 1);
  v32 = v35;
  if (*((_QWORD *)&v35 + 1))
  {
    v25 = (unint64_t *)(*((_QWORD *)&v35 + 1) + 8);
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::emplace_back<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry> const&>((char **)(v22 + 144), &v32);
  if (v24)
  {
    v27 = (unint64_t *)&v24->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v29 = (std::__shared_weak_count *)*((_QWORD *)&v35 + 1);
  if (*((_QWORD *)&v35 + 1))
  {
    v30 = (unint64_t *)(*((_QWORD *)&v35 + 1) + 8);
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
}

void sub_1BF8F5440(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void siri::dialogengine::ParseCondition(uint64_t *a1, uint64_t a2)
{
  char *String;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  __int128 v15;
  std::string __p;
  void *v17[2];
  char v18;
  std::string v19;

  if (*(_WORD *)(a2 + 22) == 4)
  {
    if (*(_DWORD *)a2
      && (*(_WORD *)(rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::operator[](a2, 0)+ 22) & 0x400) != 0)
    {
      v5 = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::operator[](a2, 0);
      String = (char *)rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::GetString(v5);
    }
    else
    {
      String = "";
    }
    std::string::basic_string[abi:ne180100]<0>(&v19, String);
    if (*(_WORD *)(a2 + 22) != 4)
      __assert_rtn("Size", "document.h", 1557, "IsArray()");
    if (*(_DWORD *)a2 >= 2u
      && (*(_WORD *)(rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::operator[](a2, 1u)+ 22) & 0x400) != 0)
    {
      v7 = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::operator[](a2, 1u);
      v6 = (char *)rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::GetString(v7);
    }
    else
    {
      v6 = "";
    }
    std::string::basic_string[abi:ne180100]<0>(v17, v6);
    if (*(_WORD *)(a2 + 22) != 4)
      __assert_rtn("Size", "document.h", 1557, "IsArray()");
    if (*(_DWORD *)a2 >= 3u
      && (*(_WORD *)(rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::operator[](a2, 2u)+ 22) & 0x400) != 0)
    {
      v9 = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::operator[](a2, 2u);
      v8 = (char *)rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::GetString(v9);
    }
    else
    {
      v8 = "";
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, v8);
    v10 = *a1;
    v11 = operator new();
    siri::dialogengine::ConditionExpression::ConditionExpression(v11, &v19, (uint64_t)v17, &__p);
    *(_QWORD *)&v15 = v11;
    v12 = (std::__shared_weak_count *)operator new();
    v12->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    v12->__vftable = (std::__shared_weak_count_vtbl *)&off_1E792CF18;
    v12->__shared_weak_owners_ = 0;
    v12[1].__vftable = (std::__shared_weak_count_vtbl *)v11;
    *((_QWORD *)&v15 + 1) = v12;
    std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::emplace_back<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry> const&>((char **)(v10 + 64), &v15);
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v18 < 0)
      operator delete(v17[0]);
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v19.__r_.__value_.__l.__data_);
  }
}

void sub_1BF8F5704(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;

  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (*(char *)(v23 - 33) < 0)
    operator delete(*(void **)(v23 - 56));
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<siri::dialogengine::ConditionEntry *,std::shared_ptr<siri::dialogengine::ConditionEntry>::__shared_ptr_default_delete<siri::dialogengine::ConditionEntry,siri::dialogengine::ConditionEntry>,std::allocator<siri::dialogengine::ConditionEntry>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B8D890);
}

uint64_t std::__shared_ptr_pointer<siri::dialogengine::ConditionEntry *,std::shared_ptr<siri::dialogengine::ConditionEntry>::__shared_ptr_default_delete<siri::dialogengine::ConditionEntry,siri::dialogengine::ConditionEntry>,std::allocator<siri::dialogengine::ConditionEntry>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<siri::dialogengine::ConditionEntry *,std::shared_ptr<siri::dialogengine::ConditionEntry>::__shared_ptr_default_delete<siri::dialogengine::ConditionEntry,siri::dialogengine::ConditionEntry>,std::allocator<siri::dialogengine::ConditionEntry>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

_BYTE *rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteNull(uint64_t *a1)
{
  uint64_t *v2;
  _BYTE *result;

  v2 = (uint64_t *)*a1;
  if (v2[4] - v2[3] <= 3)
  {
    rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<char>(v2, 4);
    v2 = (uint64_t *)*a1;
  }
  *(_BYTE *)rapidjson::internal::Stack<rapidjson::CrtAllocator>::PushUnsafe<char>((uint64_t)v2, 1) = 110;
  *(_BYTE *)rapidjson::internal::Stack<rapidjson::CrtAllocator>::PushUnsafe<char>(*a1, 1) = 117;
  *(_BYTE *)rapidjson::internal::Stack<rapidjson::CrtAllocator>::PushUnsafe<char>(*a1, 1) = 108;
  result = (_BYTE *)rapidjson::internal::Stack<rapidjson::CrtAllocator>::PushUnsafe<char>(*a1, 1);
  *result = 108;
  return result;
}

_BYTE *rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::Uint64(uint64_t **a1, unint64_t a2)
{
  _BYTE *v4;
  char *v5;
  _BYTE *result;
  uint64_t v7;

  rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix((uint64_t)a1, 6);
  v4 = (_BYTE *)rapidjson::internal::Stack<rapidjson::CrtAllocator>::Push<char>(*a1, 20);
  result = rapidjson::internal::u64toa(a2, v4, v5);
  v7 = (*a1)[3];
  if (v7 - (*a1)[2] < (unint64_t)(v4 - result + 20))
    __assert_rtn("Pop", "stack.h", 139, "GetSize() >= count * sizeof(T)");
  (*a1)[3] = v7 - (v4 - result) - 20;
  return result;
}

void rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator>::ParseValue<0u,rapidjson::GenericStringStream<rapidjson::UTF8<char>>,rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>>(uint64_t a1, unsigned __int8 **a2, uint64_t a3)
{
  char *v6;
  int v7;
  int v8;
  _BYTE *v9;
  uint64_t v10;
  __int16 v11;
  _QWORD *v12;
  uint64_t v13;
  unsigned __int8 *i;
  unsigned int v15;
  uint64_t v16;
  char *v18;
  int v19;
  unsigned __int8 *v20;
  unint64_t v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  __n128 v28;
  unsigned __int8 *j;
  unsigned int v30;
  uint64_t v31;
  int v33;
  _QWORD *v34;
  unsigned int v35;
  _QWORD *v36;
  unsigned int v37;
  unsigned int v38;
  int v39;
  unint64_t v40;
  int v41;
  unsigned int v42;
  unsigned int v43;
  _BYTE *v44;
  unsigned __int8 *v45;
  unsigned int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  double v53;
  int v54;
  int v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  double v59;
  __int16 v60;
  int64_t v61;
  int v62;
  unsigned __int8 *v63;
  int v64;
  unsigned int v65;
  __n128 v66;
  unsigned int v67;
  uint64_t v68;
  unsigned __int8 *v70;
  unsigned int v71;
  uint64_t v72;
  unsigned int v74;
  uint64_t v75;
  int v77;
  unsigned int v78;
  uint64_t v79;
  unsigned int v81;
  unsigned __int8 *k;
  unsigned int v83;
  uint64_t v84;
  int v86;
  unsigned __int8 *v87;
  unsigned int v88;
  uint64_t v89;
  int v91;
  int v92;
  int v93;
  const char *v94;
  int v95;
  const char *v96;
  const char *v97;
  int v98;
  int v99;
  BOOL v100;

  v6 = (char *)*a2;
  v7 = (char)**a2;
  v8 = **a2;
  if (v7 > 109)
  {
    if (v7 != 123)
    {
      if (v7 == 116)
      {
        if (v8 != 116)
          __assert_rtn("ParseTrue", "reader.h", 868, "is.Peek() == 't'");
        v9 = v6 + 1;
        *a2 = (unsigned __int8 *)(v6 + 1);
        if (v6[1] == 114)
        {
          v9 = v6 + 2;
          *a2 = (unsigned __int8 *)(v6 + 2);
          if (v6[2] == 117)
          {
            v9 = v6 + 3;
            *a2 = (unsigned __int8 *)(v6 + 3);
            if (v6[3] == 101)
            {
              *a2 = (unsigned __int8 *)(v6 + 4);
              v10 = rapidjson::internal::Stack<rapidjson::CrtAllocator>::Push<rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>>((uint64_t *)(a3 + 40));
              *(_QWORD *)(v10 + 8) = 0;
              *(_QWORD *)(v10 + 16) = 0;
              *(_QWORD *)v10 = 0;
              v11 = 10;
              goto LABEL_53;
            }
          }
        }
        if (*(_DWORD *)(a1 + 48))
          __assert_rtn("ParseTrue", "reader.h", 876, "!HasParseError()");
        goto LABEL_143;
      }
      if (v7 == 110)
      {
        if (v8 != 110)
          __assert_rtn("ParseNull", "reader.h", 855, "is.Peek() == 'n'");
        v9 = v6 + 1;
        *a2 = (unsigned __int8 *)(v6 + 1);
        if (v6[1] == 117)
        {
          v9 = v6 + 2;
          *a2 = (unsigned __int8 *)(v6 + 2);
          if (v6[2] == 108)
          {
            v9 = v6 + 3;
            *a2 = (unsigned __int8 *)(v6 + 3);
            if (v6[3] == 108)
            {
              *a2 = (unsigned __int8 *)(v6 + 4);
              v12 = (_QWORD *)rapidjson::internal::Stack<rapidjson::CrtAllocator>::Push<rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>>((uint64_t *)(a3 + 40));
              v12[1] = 0;
              v12[2] = 0;
              *v12 = 0;
              return;
            }
          }
        }
        if (*(_DWORD *)(a1 + 48))
          __assert_rtn("ParseNull", "reader.h", 863, "!HasParseError()");
LABEL_143:
        v61 = v9 - a2[1];
        v62 = 3;
LABEL_144:
        *(_DWORD *)(a1 + 48) = v62;
        *(_QWORD *)(a1 + 56) = v61;
        return;
      }
LABEL_27:
      v18 = (char *)a2[1];
      if (v8 == 45)
      {
        v20 = (unsigned __int8 *)(v6 + 1);
        v19 = v6[1];
      }
      else
      {
        v19 = **a2;
        v20 = *a2;
      }
      LODWORD(v21) = v19 - 48;
      if (v19 == 48)
      {
        v39 = 0;
        LODWORD(v26) = 0;
        v40 = 0;
        v41 = 0;
        v25 = 0.0;
        v22 = v20[1];
        v23 = (uint64_t)(v20 + 1);
      }
      else
      {
        if ((v19 - 49) > 8)
        {
          if (*(_DWORD *)(a1 + 48))
            __assert_rtn("ParseNumber", "reader.h", 1532, "!HasParseError()");
          v63 = (unsigned __int8 *)(v20 - (unsigned __int8 *)v18);
          v64 = 3;
          goto LABEL_209;
        }
        v23 = (uint64_t)(v20 + 1);
        v22 = v20[1];
        v24 = v22 - 48;
        v25 = 0.0;
        if (v8 == 45)
        {
          if (v24 <= 9)
          {
            v26 = 0;
            while (1)
            {
              if (v21 > 0xCCCCCCB)
              {
                if ((_DWORD)v21 != 214748364)
                  goto LABEL_40;
                if (v22 > 0x38)
                  break;
              }
              LODWORD(v21) = v22 + 10 * v21 - 48;
              v22 = v20[v26++ + 2];
              if (v22 - 48 >= 0xA)
              {
                v39 = 0;
                v40 = 0;
                v41 = 0;
                v23 = (uint64_t)&v20[v26 + 1];
                goto LABEL_88;
              }
            }
            v22 = 57;
            LODWORD(v21) = 214748364;
LABEL_40:
            v23 = (uint64_t)&v20[v26 + 1];
LABEL_71:
            v40 = v21;
            if (v8 == 45)
            {
              while (v40 <= 0xCCCCCCCCCCCCCCBLL || v40 == 0xCCCCCCCCCCCCCCCLL && v22 <= 0x38)
              {
                v38 = *(unsigned __int8 *)++v23;
                v40 = v22 - 48 + 10 * v40;
                LODWORD(v26) = v26 + 1;
                v22 = v38;
                if (v38 - 48 >= 0xA)
                  goto LABEL_86;
              }
            }
            else
            {
              while (v40 <= 0x1999999999999998 || v40 == 0x1999999999999999 && v22 <= 0x35)
              {
                v42 = *(unsigned __int8 *)++v23;
                v40 = v22 - 48 + 10 * v40;
                LODWORD(v26) = v26 + 1;
                v22 = v42;
                if (v42 - 48 >= 0xA)
                {
LABEL_86:
                  v39 = 0;
                  v25 = 0.0;
                  goto LABEL_87;
                }
              }
            }
            v25 = (double)v40;
            do
            {
              v43 = *(unsigned __int8 *)++v23;
              v25 = (double)(int)(v22 - 48) + v25 * 10.0;
              v22 = v43;
            }
            while (v43 - 48 < 0xA);
            v39 = 1;
LABEL_87:
            v41 = 1;
            goto LABEL_88;
          }
        }
        else if (v24 <= 9)
        {
          v26 = 0;
          while (1)
          {
            if (v21 > 0x19999998)
            {
              if ((_DWORD)v21 != 429496729)
                goto LABEL_70;
              if (v22 > 0x35)
                break;
            }
            LODWORD(v21) = v22 + 10 * v21 - 48;
            v22 = v20[v26++ + 2];
            if (v22 - 48 >= 0xA)
            {
              v39 = 0;
              v40 = 0;
              v41 = 0;
              v23 = (uint64_t)&v20[v26 + 1];
              goto LABEL_88;
            }
          }
          LODWORD(v21) = 429496729;
LABEL_70:
          v23 = (uint64_t)&v20[v26 + 1];
          goto LABEL_71;
        }
        v39 = 0;
        LODWORD(v26) = 0;
        v40 = 0;
        v41 = 0;
      }
LABEL_88:
      v44 = (_BYTE *)(v6 - v18);
      if (v22 == 46)
      {
        v46 = *(unsigned __int8 *)(v23 + 1);
        v45 = (unsigned __int8 *)(v23 + 1);
        v22 = v46;
        if (v46 - 48 >= 0xA)
        {
          if (*(_DWORD *)(a1 + 48))
            __assert_rtn("ParseNumber", "reader.h", 1575, "!HasParseError()");
          *(_DWORD *)(a1 + 48) = 14;
          *(_QWORD *)(a1 + 56) = v45 - (unsigned __int8 *)v18;
          v20 = v45;
          goto LABEL_136;
        }
        v47 = 0;
        if ((v39 & 1) == 0)
        {
          if (!v41)
            v40 = v21;
          while (v22 <= 0x39 && !(v40 >> 53))
          {
            v49 = (char)*++v45;
            v48 = v49;
            v40 = v22 - 48 + 10 * v40;
            --v47;
            if (v40)
              LODWORD(v26) = v26 + 1;
            v22 = v48;
            if (v48 <= 47)
            {
              v50 = 0;
              v25 = (double)v40;
              v20 = v45;
              goto LABEL_107;
            }
          }
          v25 = (double)v40;
        }
        v20 = v45;
        while (v22 <= 0x39)
        {
          if ((int)v26 <= 16)
          {
            v25 = (double)(int)(v22 - 48) + v25 * 10.0;
            --v47;
            if (v25 > 0.0)
              LODWORD(v26) = v26 + 1;
          }
          v51 = (char)*++v20;
          v22 = v51;
          if (v51 <= 47)
            goto LABEL_106;
        }
        v39 = 1;
      }
      else
      {
        v47 = 0;
        v20 = (unsigned __int8 *)v23;
      }
      if (v22 != 101 && v22 != 69)
      {
        if ((v39 & 1) == 0)
        {
          if (v41)
          {
            if (v8 == 45)
              rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::Int64(a3, -(uint64_t)v40);
            else
              rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::Uint64(a3, v40);
            goto LABEL_136;
          }
          v99 = v21;
          v58 = rapidjson::internal::Stack<rapidjson::CrtAllocator>::Push<rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>>((uint64_t *)(a3 + 40));
          *(_QWORD *)(v58 + 8) = 0;
          *(_QWORD *)(v58 + 16) = 0;
          if (v8 == 45)
          {
            *(_QWORD *)v58 = -v99;
            v100 = -v99 < 0;
            v60 = 182;
          }
          else
          {
            *(_QWORD *)v58 = v99;
            v100 = v99 < 0;
            v60 = 470;
          }
          if (!v100)
            v60 = 502;
          goto LABEL_135;
        }
LABEL_106:
        v50 = 0;
LABEL_107:
        v52 = v47 + v50;
        if (v52 > -309)
        {
          if ((v52 & 0x80000000) == 0)
          {
            if (v52 >= 0x135)
            {
              v94 = "n >= 0 && n <= 308";
              v95 = 48;
              v96 = "pow10.h";
              v97 = "Pow10";
              goto LABEL_227;
            }
            v53 = v25 * rapidjson::internal::Pow10(int)::e[v52];
            goto LABEL_129;
          }
          v54 = -v52;
        }
        else
        {
          v53 = 0.0;
          if (v52 < 0xFFFFFD98)
            goto LABEL_132;
          v25 = v25 / 1.0e308;
          v54 = -308 - v52;
        }
        v53 = v25 / rapidjson::internal::Pow10(int)::e[v54];
LABEL_129:
        if (v53 > 1.79769313e308)
        {
          if (!*(_DWORD *)(a1 + 48))
          {
LABEL_131:
            *(_DWORD *)(a1 + 48) = 13;
            *(_QWORD *)(a1 + 56) = v44;
LABEL_136:
            *a2 = v20;
            a2[1] = (unsigned __int8 *)v18;
            return;
          }
          v94 = "!HasParseError()";
          v95 = 1707;
          v96 = "reader.h";
          v97 = "ParseNumber";
LABEL_227:
          __assert_rtn(v97, v96, v95, v94);
        }
LABEL_132:
        v58 = rapidjson::internal::Stack<rapidjson::CrtAllocator>::Push<rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>>((uint64_t *)(a3 + 40));
        v59 = -v53;
        if (v8 != 45)
          v59 = v53;
        *(_QWORD *)(v58 + 8) = 0;
        *(_QWORD *)(v58 + 16) = 0;
        *(double *)v58 = v59;
        v60 = 534;
LABEL_135:
        *(_WORD *)(v58 + 22) = v60;
        goto LABEL_136;
      }
      v55 = v20[1];
      v21 = v21;
      if (v41)
        v21 = v40;
      if (!v39)
        v25 = (double)v21;
      if (v55 == 43)
      {
        v55 = v20[2];
        if ((v55 - 48) < 0xA)
        {
          v56 = 3;
          goto LABEL_119;
        }
        v20 += 2;
      }
      else if (v55 == 45)
      {
        v91 = v20[2] - 48;
        if (v91 < 0xA)
        {
          v20 += 3;
          if (v47 >= 1)
            __assert_rtn("ParseNumber", "reader.h", 1639, "expFrac <= 0");
          v92 = *v20;
          if ((v92 - 48) <= 9)
          {
            while (1)
            {
              v91 = v92 + 10 * v91 - 48;
              if (v91 > (v47 + 2147483639) / 10)
                break;
              v93 = *++v20;
              v92 = v93;
              if ((v93 - 48) >= 0xA)
                goto LABEL_225;
            }
            do
              v98 = *++v20;
            while ((v98 - 48) < 0xA);
          }
LABEL_225:
          v50 = -v91;
          goto LABEL_107;
        }
        v20 += 2;
      }
      else
      {
        if ((v55 - 48) < 0xA)
        {
          v56 = 2;
LABEL_119:
          v20 += v56;
          v50 = v55 - 48;
          do
          {
            v57 = *v20;
            if ((v57 - 48) > 9)
              goto LABEL_107;
            ++v20;
            v50 = v57 + 10 * v50 - 48;
          }
          while (v50 <= 308 - v47);
          if (*(_DWORD *)(a1 + 48))
            __assert_rtn("ParseNumber", "reader.h", 1655, "!HasParseError()");
          goto LABEL_131;
        }
        ++v20;
      }
      if (*(_DWORD *)(a1 + 48))
        __assert_rtn("ParseNumber", "reader.h", 1660, "!HasParseError()");
      v63 = (unsigned __int8 *)(v20 - (unsigned __int8 *)v18);
      v64 = 15;
LABEL_209:
      *(_DWORD *)(a1 + 48) = v64;
      *(_QWORD *)(a1 + 56) = v63;
      goto LABEL_136;
    }
    if (v8 != 123)
      __assert_rtn("ParseObject", "reader.h", 739, "is.Peek() == '{'");
    *a2 = (unsigned __int8 *)(v6 + 1);
    v13 = rapidjson::internal::Stack<rapidjson::CrtAllocator>::Push<rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>>((uint64_t *)(a3 + 40));
    *(_QWORD *)(v13 + 8) = 0;
    *(_QWORD *)(v13 + 16) = 0;
    *(_QWORD *)v13 = 0;
    *(_WORD *)(v13 + 22) = 3;
    for (i = *a2; ; ++i)
    {
      v15 = *i;
      v100 = v15 > 0x20;
      v16 = (1 << v15) & 0x100002600;
      if (v100 || v16 == 0)
        break;
    }
    *a2 = i;
    if (!*(_DWORD *)(a1 + 48))
    {
      v33 = *i;
      if (v33 == 125)
      {
        *a2 = i + 1;
        v34 = (_QWORD *)a3;
        v35 = 0;
LABEL_57:
        rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::EndObject(v34, v35);
      }
      else
      {
        if (v33 != 34)
        {
LABEL_189:
          v62 = 4;
LABEL_222:
          v61 = i - a2[1];
          goto LABEL_144;
        }
        v65 = 0;
        while (1)
        {
          v66.n128_f64[0] = rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator>::ParseString<0u,rapidjson::GenericStringStream<rapidjson::UTF8<char>>,rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>>(a1, a2, a3);
          if (*(_DWORD *)(a1 + 48))
            break;
          for (i = *a2; ; ++i)
          {
            v67 = *i;
            v100 = v67 > 0x20;
            v68 = (1 << v67) & 0x100002600;
            if (v100 || v68 == 0)
              break;
          }
          *a2 = i;
          if (*i != 58)
          {
            v62 = 5;
            goto LABEL_222;
          }
          v70 = i + 1;
          *a2 = v70;
          while (1)
          {
            v71 = *v70;
            v100 = v71 > 0x20;
            v72 = (1 << v71) & 0x100002600;
            if (v100 || v72 == 0)
              break;
            ++v70;
          }
          *a2 = v70;
          rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator>::ParseValue<0u,rapidjson::GenericStringStream<rapidjson::UTF8<char>>,rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>>(a1, a2, a3, v66);
          if (*(_DWORD *)(a1 + 48))
            return;
          for (i = *a2; ; ++i)
          {
            v74 = *i;
            v100 = v74 > 0x20;
            v75 = (1 << v74) & 0x100002600;
            if (v100 || v75 == 0)
              break;
          }
          *a2 = i;
          ++v65;
          v77 = (char)*i;
          if (v77 != 44)
          {
            if (v77 == 125)
            {
              *a2 = i + 1;
              v34 = (_QWORD *)a3;
              v35 = v65;
              goto LABEL_57;
            }
            v62 = 6;
            goto LABEL_222;
          }
          *a2 = ++i;
          while (1)
          {
            v78 = *i;
            v100 = v78 > 0x20;
            v79 = (1 << v78) & 0x100002600;
            if (v100 || v79 == 0)
              break;
            ++i;
          }
          *a2 = i;
          if (*i != 34)
            goto LABEL_189;
        }
      }
    }
  }
  else
  {
    if (v7 == 34)
    {
      rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator>::ParseString<0u,rapidjson::GenericStringStream<rapidjson::UTF8<char>>,rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>>(a1, a2, a3);
      return;
    }
    if (v7 != 91)
    {
      if (v7 == 102)
      {
        if (v8 != 102)
          __assert_rtn("ParseFalse", "reader.h", 881, "is.Peek() == 'f'");
        v9 = v6 + 1;
        *a2 = (unsigned __int8 *)(v6 + 1);
        if (v6[1] == 97)
        {
          v9 = v6 + 2;
          *a2 = (unsigned __int8 *)(v6 + 2);
          if (v6[2] == 108)
          {
            v9 = v6 + 3;
            *a2 = (unsigned __int8 *)(v6 + 3);
            if (v6[3] == 115)
            {
              v9 = v6 + 4;
              *a2 = (unsigned __int8 *)(v6 + 4);
              if (v6[4] == 101)
              {
                *a2 = (unsigned __int8 *)(v6 + 5);
                v10 = rapidjson::internal::Stack<rapidjson::CrtAllocator>::Push<rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>>((uint64_t *)(a3 + 40));
                *(_QWORD *)(v10 + 8) = 0;
                *(_QWORD *)(v10 + 16) = 0;
                *(_QWORD *)v10 = 0;
                v11 = 9;
LABEL_53:
                *(_WORD *)(v10 + 22) = v11;
                return;
              }
            }
          }
        }
        if (*(_DWORD *)(a1 + 48))
          __assert_rtn("ParseFalse", "reader.h", 889, "!HasParseError()");
        goto LABEL_143;
      }
      goto LABEL_27;
    }
    if (v8 != 91)
      __assert_rtn("ParseArray", "reader.h", 807, "is.Peek() == '['");
    *a2 = (unsigned __int8 *)(v6 + 1);
    v27 = rapidjson::internal::Stack<rapidjson::CrtAllocator>::Push<rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>>((uint64_t *)(a3 + 40));
    *(_QWORD *)(v27 + 8) = 0;
    *(_QWORD *)(v27 + 16) = 0;
    *(_QWORD *)v27 = 0;
    *(_WORD *)(v27 + 22) = 4;
    for (j = *a2; ; ++j)
    {
      v30 = *j;
      v100 = v30 > 0x20;
      v31 = (1 << v30) & 0x100002600;
      if (v100 || v31 == 0)
        break;
    }
    *a2 = j;
    if (!*(_DWORD *)(a1 + 48))
    {
      if (*j == 93)
      {
        *a2 = j + 1;
        v36 = (_QWORD *)a3;
        v37 = 0;
LABEL_61:
        rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::EndArray(v36, v37);
      }
      else
      {
        v81 = 0;
        while (1)
        {
          rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator>::ParseValue<0u,rapidjson::GenericStringStream<rapidjson::UTF8<char>>,rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>>(a1, a2, a3, v28);
          if (*(_DWORD *)(a1 + 48))
            break;
          for (k = *a2; ; ++k)
          {
            v83 = *k;
            v100 = v83 > 0x20;
            v84 = (1 << v83) & 0x100002600;
            if (v100 || v84 == 0)
              break;
          }
          ++v81;
          *a2 = k;
          v86 = *k;
          if (v86 != 44)
          {
            if (v86 == 93)
            {
              *a2 = k + 1;
              v36 = (_QWORD *)a3;
              v37 = v81;
              goto LABEL_61;
            }
            v61 = k - a2[1];
            v62 = 7;
            goto LABEL_144;
          }
          v87 = k + 1;
          *a2 = v87;
          while (1)
          {
            v88 = *v87;
            v100 = v88 > 0x20;
            v89 = (1 << v88) & 0x100002600;
            if (v100 || v89 == 0)
              break;
            ++v87;
          }
          *a2 = v87;
        }
      }
    }
  }
}

void sub_1BF8F66B8(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  *v1 = v3;
  v1[1] = v2;
  _Unwind_Resume(a1);
}

double rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator>::ParseString<0u,rapidjson::GenericStringStream<rapidjson::UTF8<char>>,rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>>(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  unsigned __int8 *v5;
  unsigned int v6;
  _BYTE *v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  const char *v16;
  int v17;
  unsigned __int8 *v18;
  int v19;
  double result;
  int v21;
  uint64_t v22;
  int v23[2];
  unsigned int v24;
  __int128 v25;
  _OWORD *v26;

  v25 = *a2;
  v26 = a2;
  if (*(_BYTE *)v25 != 34)
    __assert_rtn("ParseString", "reader.h", 961, "s.Peek() == '\\\"'");
  v5 = (unsigned __int8 *)(v25 + 1);
  *(_QWORD *)&v25 = v25 + 1;
  *(_QWORD *)v23 = a1;
  v24 = 0;
  while (1)
  {
    while (1)
    {
      v6 = *v5;
      if (v6 == 92)
        break;
      if (v6 == 34)
      {
        *(_QWORD *)&v25 = v5 + 1;
        *(_BYTE *)rapidjson::internal::Stack<rapidjson::CrtAllocator>::Push<char>(*(uint64_t **)v23, 1) = 0;
        ++v24;
        if (!*(_DWORD *)(a1 + 48))
        {
          v15 = v24;
          v16 = (const char *)rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator>::StackStream<char>::Pop(*(uint64_t *)v23, v24);
          rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::String(a3, v16, v15 - 1);
        }
        goto LABEL_27;
      }
      if (v6 <= 0x1F)
      {
        v17 = *(_DWORD *)(a1 + 48);
        if (*v5)
        {
          if (!v17)
          {
            v18 = &v5[-*((_QWORD *)&v25 + 1)];
            v19 = 12;
            goto LABEL_26;
          }
          v21 = 1044;
        }
        else
        {
          if (!v17)
          {
            v18 = &v5[-*((_QWORD *)&v25 + 1)];
            v19 = 11;
            goto LABEL_26;
          }
          v21 = 1042;
        }
        goto LABEL_31;
      }
      *(_QWORD *)&v25 = ++v5;
      v7 = (_BYTE *)rapidjson::internal::Stack<rapidjson::CrtAllocator>::Push<char>(*(uint64_t **)v23, 1);
LABEL_7:
      *v7 = v6;
      ++v24;
    }
    v8 = v5[1];
    *(_QWORD *)&v25 = v5 + 1;
    LOBYTE(v6) = rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator>::ParseStringToStream<0u,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::GenericStringStream<rapidjson::UTF8<char>>,rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator>::StackStream<char>>(rapidjson::GenericStringStream<rapidjson::UTF8<char>> &,rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator>::StackStream<char> &)::escape[v8];
    if ((_BYTE)v6)
    {
      v5 += 2;
      *(_QWORD *)&v25 = v5;
      v7 = (_BYTE *)rapidjson::internal::Stack<rapidjson::CrtAllocator>::Push<char>(*(uint64_t **)v23, 1);
      goto LABEL_7;
    }
    if ((_DWORD)v8 != 117)
    {
      if (!*(_DWORD *)(a1 + 48))
      {
        v19 = 10;
        v18 = &v5[-*((_QWORD *)&v25 + 1)];
        goto LABEL_26;
      }
      v21 = 1033;
LABEL_31:
      __assert_rtn("ParseStringToStream", "reader.h", v21, "!HasParseError()");
    }
    *(_QWORD *)&v25 = v5 + 2;
    v22 = (uint64_t)&v5[-*((_QWORD *)&v25 + 1)];
    v9 = rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator>::ParseHex4<rapidjson::GenericStringStream<rapidjson::UTF8<char>>>(a1, (uint64_t *)&v25, (uint64_t)&v5[-*((_QWORD *)&v25 + 1)]);
    v10 = v9;
    if (*(_DWORD *)(a1 + 48))
      goto LABEL_27;
    if (v9 >> 10 == 54)
      break;
LABEL_13:
    rapidjson::UTF8<char>::Encode<rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator>::StackStream<char>>((uint64_t)v23, v10);
    v5 = (unsigned __int8 *)v25;
  }
  v11 = v25;
  if (*(_BYTE *)v25 == 92)
  {
    v12 = *(unsigned __int8 *)(v25 + 1);
    *(_QWORD *)&v25 = v25 + 1;
    if (v12 == 117)
    {
      v13 = v9;
      *(_QWORD *)&v25 = v11 + 2;
      v14 = rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator>::ParseHex4<rapidjson::GenericStringStream<rapidjson::UTF8<char>>>(a1, (uint64_t *)&v25, v22);
      if (*(_DWORD *)(a1 + 48))
        goto LABEL_27;
      if ((v14 - 57344) >= 0xFFFFFC00)
      {
        v10 = ((v14 - 56320) | ((v13 << 10) - 56623104)) + 0x10000;
        goto LABEL_13;
      }
    }
  }
  v19 = 9;
  v18 = (unsigned __int8 *)v22;
LABEL_26:
  *(_DWORD *)(a1 + 48) = v19;
  *(_QWORD *)(a1 + 56) = v18;
LABEL_27:
  result = *(double *)&v25;
  *v26 = v25;
  return result;
}

void sub_1BF8F6988(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, __int128 a13, _OWORD *a14)
{
  *a14 = a13;
  _Unwind_Resume(a1);
}

void siri::dialogengine::TestCase::GetTemplateDir(siri::dialogengine::TestCase *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)this, *((_QWORD *)this + 1));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)this;
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 2);
  }
}

void siri::dialogengine::TestCase::GetRelativePath(siri::dialogengine::TestCase *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 47) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 3), *((_QWORD *)this + 4));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 24);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 5);
  }
}

void siri::dialogengine::TestCase::GetCatId(siri::dialogengine::TestCase *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 71) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 6), *((_QWORD *)this + 7));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 3);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 8);
  }
}

void siri::dialogengine::TestCase::GetPatternId(siri::dialogengine::TestCase *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 95) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 9), *((_QWORD *)this + 10));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 72);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 11);
  }
}

void siri::dialogengine::TestCase::GetLocale(siri::dialogengine::TestCase *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 119) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 12), *((_QWORD *)this + 13));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 6);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 14);
  }
}

uint64_t siri::dialogengine::TestCase::IsDebug(siri::dialogengine::TestCase *this)
{
  return *((unsigned __int8 *)this + 120);
}

void siri::dialogengine::TestCase::GetName(siri::dialogengine::TestCase *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 151) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 16), *((_QWORD *)this + 17));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 8);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 18);
  }
}

void siri::dialogengine::TestCase::GetDescription(siri::dialogengine::TestCase *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 175) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 19), *((_QWORD *)this + 20));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 152);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 21);
  }
}

uint64_t siri::dialogengine::TestCase::IsEnabled(siri::dialogengine::TestCase *this)
{
  return *((unsigned __int8 *)this + 224);
}

uint64_t siri::dialogengine::TestCase::GetSkipIfNoMorphun(siri::dialogengine::TestCase *this)
{
  return *((unsigned __int8 *)this + 225);
}

BOOL siri::dialogengine::TestCase::ShouldSkip(const std::string *this)
{
  _BOOL8 v1;
  void *v3[2];
  char v4;

  siri::dialogengine::TestCase::GetSkipReason(this, v3);
  if ((v4 & 0x80000000) == 0)
    return v4 != 0;
  v1 = v3[1] != 0;
  operator delete(v3[0]);
  return v1;
}

_QWORD *siri::dialogengine::TestCase::GetSkipReason@<X0>(const std::string *this@<X0>, _QWORD *a2@<X8>)
{
  char *v3;

  if (this[9].__r_.__value_.__s.__data_[8])
  {
    if (this[9].__r_.__value_.__s.__data_[9] && !siri::dialogengine::AreMorphunAssetsAvailable(this + 4))
      v3 = "morphun assets not available";
    else
      v3 = "";
  }
  else
  {
    v3 = "test is disabled";
  }
  return std::string::basic_string[abi:ne180100]<0>(a2, v3);
}

void siri::dialogengine::TestCase::ToString(siri::dialogengine::TestCase *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  size_t v7;
  std::string *v8;
  const void *v9;
  int v10;
  const std::string::value_type *v11;
  std::string::size_type v12;
  std::string *v13;
  __int128 v14;
  std::string *v15;
  __int128 v16;
  const std::string::value_type *v17;
  char *v18;
  const std::string::value_type *v19;
  int v20;
  const std::string::value_type *v21;
  std::string::size_type v22;
  std::string *v23;
  std::string v24;
  std::string v25;
  std::string v26;

  if (*((char *)this + 71) < 0)
    v4 = *((_QWORD *)this + 7);
  else
    v4 = *((unsigned __int8 *)this + 71);
  if (v4)
    v5 = 48;
  else
    v5 = 72;
  if (v4)
    v6 = (char *)this + 48;
  else
    v6 = (char *)this + 72;
  if (v6[23] >= 0)
    v7 = v6[23];
  else
    v7 = *((_QWORD *)v6 + 1);
  v8 = &v24;
  std::string::basic_string[abi:ne180100]((uint64_t)&v24, v7 + 2);
  if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v8 = (std::string *)v24.__r_.__value_.__r.__words[0];
  if (v7)
  {
    if (v6[23] >= 0)
      v9 = v6;
    else
      v9 = *(const void **)((char *)this + v5);
    memmove(v8, v9, v7);
  }
  strcpy((char *)v8 + v7, " (");
  v10 = *((char *)this + 119);
  if (v10 >= 0)
    v11 = (char *)this + 96;
  else
    v11 = (const std::string::value_type *)*((_QWORD *)this + 12);
  if (v10 >= 0)
    v12 = *((unsigned __int8 *)this + 119);
  else
    v12 = *((_QWORD *)this + 13);
  v13 = std::string::append(&v24, v11, v12);
  v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v25.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  v15 = std::string::append(&v25, "): ");
  v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  v26.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  v19 = (const std::string::value_type *)*((_QWORD *)this + 16);
  v18 = (char *)this + 128;
  v17 = v19;
  v20 = v18[23];
  if (v20 >= 0)
    v21 = v18;
  else
    v21 = v17;
  if (v20 >= 0)
    v22 = v18[23];
  else
    v22 = *((_QWORD *)v18 + 1);
  v23 = std::string::append(&v26, v21, v22);
  *a2 = *v23;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
}

void sub_1BF8F6D40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::TestCase::GetJSONRequest(siri::dialogengine::TestCase *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 199) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 22), *((_QWORD *)this + 23));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 11);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 24);
  }
}

_QWORD *siri::dialogengine::TestCase::GetExpectedConditions@<X0>(siri::dialogengine::TestCase *this@<X0>, _QWORD *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return std::vector<std::shared_ptr<siri::dialogengine::Condition>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::Condition>*,std::shared_ptr<siri::dialogengine::Condition>*>(a2, *((_QWORD **)this + 25), *((_QWORD **)this + 26), (uint64_t)(*((_QWORD *)this + 26) - *((_QWORD *)this + 25)) >> 4);
}

_QWORD *std::vector<std::shared_ptr<siri::dialogengine::Condition>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::Condition>*,std::shared_ptr<siri::dialogengine::Condition>*>(_QWORD *result, _QWORD *a2, _QWORD *a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  if (a4)
  {
    if (a4 >> 60)
      std::vector<BOOL>::__throw_length_error[abi:ne180100]();
    v6 = result;
    result = std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>>(a4);
    *v6 = result;
    v6[1] = result;
    v6[2] = &result[2 * v7];
    while (a2 != a3)
    {
      *result = *a2;
      v8 = a2[1];
      result[1] = v8;
      if (v8)
      {
        v9 = (unint64_t *)(v8 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      a2 += 2;
      result += 2;
    }
    v6[1] = result;
  }
  return result;
}

void sub_1BF8F6E78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

BOOL siri::dialogengine::TestCase::HasErrors(siri::dialogengine::TestCase *this)
{
  return *((_QWORD *)this + 29) != *((_QWORD *)this + 30);
}

std::string *siri::dialogengine::TestCase::GetErrors@<X0>(__int128 **this@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(a2, this[29], this[30], 0xAAAAAAAAAAAAAAABLL * (((char *)this[30] - (char *)this[29]) >> 3));
}

void InitDefaultsscc_info_CustomCanvas_CustomCanvas_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/CustomCanvas.pb.cc", a4);
  SnippetUI::CustomCanvas::CustomCanvas((SnippetUI::CustomCanvas *)&SnippetUI::_CustomCanvas_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_CustomCanvas_default_instance_, v4);
}

SnippetUI::CustomCanvas *SnippetUI::CustomCanvas::CustomCanvas(SnippetUI::CustomCanvas *this)
{
  *(_QWORD *)this = &off_1E792CFA0;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 13) = 0;
  if (atomic_load(scc_info_CustomCanvas_CustomCanvas_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_CustomCanvas_CustomCanvas_2eproto);
  *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 4) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 5) = &google::protobuf::internal::fixed_address_empty_string;
  *((_WORD *)this + 24) = 0;
  *((_BYTE *)this + 50) = 0;
  return this;
}

void sub_1BF8F6F84(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::CustomCanvas::~CustomCanvas(SnippetUI::CustomCanvas *this)
{
  SnippetUI::CustomCanvas::~CustomCanvas(this);
  JUMPOUT(0x1C3B8D890);
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;

  *(_QWORD *)this = &off_1E792CFA0;
  v2 = *((_QWORD *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x1C3B8D890](v2, 0x1012C40EC159624);
  }
  v4 = *((_QWORD *)this + 3);
  if ((uint64_t *)v4 != &google::protobuf::internal::fixed_address_empty_string && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0)
      operator delete(*(void **)v4);
    MEMORY[0x1C3B8D890](v4, 0x1012C40EC159624);
  }
  v6 = *((_QWORD *)this + 4);
  if ((uint64_t *)v6 != &google::protobuf::internal::fixed_address_empty_string && v6 != 0)
  {
    if (*(char *)(v6 + 23) < 0)
      operator delete(*(void **)v6);
    MEMORY[0x1C3B8D890](v6, 0x1012C40EC159624);
  }
  v8 = *((_QWORD *)this + 5);
  if ((uint64_t *)v8 != &google::protobuf::internal::fixed_address_empty_string && v8 != 0)
  {
    if (*(char *)(v8 + 23) < 0)
      operator delete(*(void **)v8);
    MEMORY[0x1C3B8D890](v8, 0x1012C40EC159624);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

SnippetUI::CustomCanvas *SnippetUI::CustomCanvas::New(SnippetUI::CustomCanvas *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::CustomCanvas>(0);
}

SnippetUI::CustomCanvas *SnippetUI::CustomCanvas::New(SnippetUI::CustomCanvas *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::CustomCanvas>(a2);
}

void SnippetUI::CustomCanvas::Clear(SnippetUI::CustomCanvas *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  char v6;

  v1 = *((_QWORD *)this + 2);
  if ((uint64_t *)v1 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v1 + 23) < 0)
    {
      **(_BYTE **)v1 = 0;
      *(_QWORD *)(v1 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v1 = 0;
      *(_BYTE *)(v1 + 23) = 0;
    }
  }
  v2 = *((_QWORD *)this + 3);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(_BYTE **)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v2 = 0;
      *(_BYTE *)(v2 + 23) = 0;
    }
  }
  v3 = *((_QWORD *)this + 4);
  if ((uint64_t *)v3 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v3 + 23) < 0)
    {
      **(_BYTE **)v3 = 0;
      *(_QWORD *)(v3 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v3 = 0;
      *(_BYTE *)(v3 + 23) = 0;
    }
  }
  v4 = *((_QWORD *)this + 5);
  if ((uint64_t *)v4 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v4 + 23) < 0)
    {
      **(_BYTE **)v4 = 0;
      *(_QWORD *)(v4 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v4 = 0;
      *(_BYTE *)(v4 + 23) = 0;
    }
  }
  v6 = *((_BYTE *)this + 8);
  v5 = (char *)this + 8;
  v5[42] = 0;
  *((_WORD *)v5 + 20) = 0;
  if ((v6 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoClear((google::protobuf::internal::InternalMetadataWithArena *)v5);
}

uint64_t SnippetUI::CustomCanvas::IsInitialized(SnippetUI::CustomCanvas *this)
{
  return 1;
}

char *SnippetUI::CustomCanvas::ByteSizeLong(SnippetUI::CustomCanvas *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const google::protobuf::UnknownFieldSet *v14;

  v1 = *((_QWORD *)this + 2);
  v2 = *(unsigned __int8 *)(v1 + 23);
  if (*(char *)(v1 + 23) < 0)
  {
    if (*(_QWORD *)(v1 + 8))
      goto LABEL_3;
LABEL_7:
    v4 = 0;
    goto LABEL_8;
  }
  if (!*(_BYTE *)(v1 + 23))
    goto LABEL_7;
LABEL_3:
  v3 = *(_QWORD *)(v1 + 8);
  if ((v2 & 0x80u) == 0)
    v3 = v2;
  v4 = v3 + ((9 * (__clz(v3 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_8:
  v5 = *((_QWORD *)this + 3);
  v6 = *(unsigned __int8 *)(v5 + 23);
  if (*(char *)(v5 + 23) < 0)
  {
    if (!*(_QWORD *)(v5 + 8))
      goto LABEL_13;
  }
  else if (!*(_BYTE *)(v5 + 23))
  {
    goto LABEL_13;
  }
  v7 = *(_QWORD *)(v5 + 8);
  if ((v6 & 0x80u) == 0)
    v7 = v6;
  v4 += v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_13:
  v8 = *((_QWORD *)this + 4);
  v9 = *(unsigned __int8 *)(v8 + 23);
  if (*(char *)(v8 + 23) < 0)
  {
    if (!*(_QWORD *)(v8 + 8))
      goto LABEL_18;
  }
  else if (!*(_BYTE *)(v8 + 23))
  {
    goto LABEL_18;
  }
  v10 = *(_QWORD *)(v8 + 8);
  if ((v9 & 0x80u) == 0)
    v10 = v9;
  v4 += v10 + ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_18:
  v11 = *((_QWORD *)this + 5);
  v12 = *(unsigned __int8 *)(v11 + 23);
  if (*(char *)(v11 + 23) < 0)
  {
    if (!*(_QWORD *)(v11 + 8))
      goto LABEL_23;
  }
  else if (!*(_BYTE *)(v11 + 23))
  {
    goto LABEL_23;
  }
  v13 = *(_QWORD *)(v11 + 8);
  if ((v12 & 0x80u) == 0)
    v13 = v12;
  v4 += v13 + ((9 * (__clz(v13 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_23:
  if (*((_BYTE *)this + 48))
    v4 += 2;
  if (*((_BYTE *)this + 49))
    v4 += 2;
  if (*((_BYTE *)this + 50))
    v14 = (const google::protobuf::UnknownFieldSet *)(v4 + 2);
  else
    v14 = (const google::protobuf::UnknownFieldSet *)v4;
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::CustomCanvas *)((char *)this + 8), v14, (_DWORD *)this + 13);
  *((_DWORD *)this + 13) = (_DWORD)v14;
  return (char *)v14;
}

uint64_t SnippetUI::CustomCanvas::GetCachedSize(SnippetUI::CustomCanvas *this)
{
  return *((unsigned int *)this + 13);
}

google::protobuf::internal *SnippetUI::CustomCanvas::_InternalParse(SnippetUI::CustomCanvas *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  std::string **v5;
  std::string **v6;
  std::string **v7;
  std::string **v8;
  uint64_t *v9;
  google::protobuf::internal::ParseContext *v10;
  google::protobuf::internal *TagFallback;
  char *v12;
  std::string *v13;
  std::string::value_type *v14;
  google::protobuf::internal::ParseContext *v15;
  char *v16;
  std::string *v17;
  char *v18;
  google::protobuf::internal *v19;
  unint64_t v20;
  int v21;
  google::protobuf::internal *v22;
  unint64_t v23;
  int v24;
  google::protobuf::internal *v25;
  unint64_t v26;
  int v27;
  BOOL v28;
  google::protobuf::internal *v29;
  uint64_t v30;
  google::protobuf::internal *v31;
  uint64_t v32;
  google::protobuf::internal *v33;
  uint64_t v34;
  google::protobuf::internal *v36;

  v36 = a2;
  v5 = (std::string **)((char *)this + 40);
  v6 = (std::string **)((char *)this + 32);
  v7 = (std::string **)((char *)this + 24);
  v8 = (std::string **)((char *)this + 16);
  v9 = (uint64_t *)((char *)this + 8);
  while (2)
  {
    if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v36, *((_DWORD *)a3 + 23)) & 1) != 0)
      return v36;
    TagFallback = (google::protobuf::internal *)((char *)v36 + 1);
    v12 = (char *)*(unsigned __int8 *)v36;
    if ((*(char *)v36 & 0x80000000) == 0)
      goto LABEL_6;
    v12 = (char *)(v12 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v36 + 2);
LABEL_6:
      v36 = TagFallback;
      goto LABEL_7;
    }
    TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v36, v12);
    v36 = TagFallback;
    if (!TagFallback)
      return TagFallback;
LABEL_7:
    switch(v12 >> 3)
    {
      case 2u:
        if (v12 != 18)
          goto LABEL_42;
        v13 = *v8;
        if (*v8 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v8, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v13 = *v8;
          TagFallback = v36;
        }
        v14 = (std::string::value_type *)TagFallback;
        v15 = a3;
        v16 = "SnippetUI.CustomCanvas.bundle_name";
        goto LABEL_26;
      case 3u:
        if (v12 != 26)
          goto LABEL_42;
        v13 = *v7;
        if (*v7 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v7, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v13 = *v7;
          TagFallback = v36;
        }
        v14 = (std::string::value_type *)TagFallback;
        v15 = a3;
        v16 = "SnippetUI.CustomCanvas.view_id";
        goto LABEL_26;
      case 4u:
        if (v12 != 34)
          goto LABEL_42;
        v17 = *v6;
        if (*v6 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v6, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v17 = *v6;
          TagFallback = v36;
        }
        v18 = google::protobuf::internal::InlineGreedyStringParser(v17, (std::string::value_type *)TagFallback, (uint64_t)a3);
        goto LABEL_47;
      case 5u:
        if (v12 != 42)
          goto LABEL_42;
        v13 = *v5;
        if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v13 = *v5;
          TagFallback = v36;
        }
        v14 = (std::string::value_type *)TagFallback;
        v15 = a3;
        v16 = "SnippetUI.CustomCanvas.component_name";
LABEL_26:
        v18 = google::protobuf::internal::InlineGreedyStringParserUTF8(v13, v14, (uint64_t)v15, (google::protobuf::internal *)v16);
        goto LABEL_47;
      case 6u:
        if (v12 != 48)
          goto LABEL_42;
        v19 = (google::protobuf::internal *)((char *)TagFallback + 1);
        v20 = *(unsigned __int8 *)TagFallback;
        if ((*(char *)TagFallback & 0x80000000) == 0)
          goto LABEL_31;
        v21 = *(char *)v19;
        v20 = v20 + (v21 << 7) - 128;
        if (v21 < 0)
        {
          v29 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(TagFallback, v20);
          v36 = v29;
          *((_BYTE *)this + 48) = v30 != 0;
          if (!v29)
            goto LABEL_54;
        }
        else
        {
          v19 = (google::protobuf::internal *)((char *)TagFallback + 2);
LABEL_31:
          v36 = v19;
          *((_BYTE *)this + 48) = v20 != 0;
        }
        continue;
      case 7u:
        if (v12 != 56)
          goto LABEL_42;
        v22 = (google::protobuf::internal *)((char *)TagFallback + 1);
        v23 = *(unsigned __int8 *)TagFallback;
        if ((*(char *)TagFallback & 0x80000000) == 0)
          goto LABEL_36;
        v24 = *(char *)v22;
        v23 = v23 + (v24 << 7) - 128;
        if (v24 < 0)
        {
          v31 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(TagFallback, v23);
          v36 = v31;
          *((_BYTE *)this + 49) = v32 != 0;
          if (!v31)
            goto LABEL_54;
        }
        else
        {
          v22 = (google::protobuf::internal *)((char *)TagFallback + 2);
LABEL_36:
          v36 = v22;
          *((_BYTE *)this + 49) = v23 != 0;
        }
        continue;
      case 8u:
        if (v12 != 64)
          goto LABEL_42;
        v25 = (google::protobuf::internal *)((char *)TagFallback + 1);
        v26 = *(unsigned __int8 *)TagFallback;
        if ((*(char *)TagFallback & 0x80000000) == 0)
          goto LABEL_41;
        v27 = *(char *)v25;
        v26 = v26 + (v27 << 7) - 128;
        if (v27 < 0)
        {
          v33 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(TagFallback, v26);
          v36 = v33;
          *((_BYTE *)this + 50) = v34 != 0;
          if (!v33)
            goto LABEL_54;
        }
        else
        {
          v25 = (google::protobuf::internal *)((char *)TagFallback + 2);
LABEL_41:
          v36 = v25;
          *((_BYTE *)this + 50) = v26 != 0;
        }
        continue;
      default:
LABEL_42:
        if ((_DWORD)v12)
          v28 = (v12 & 7) == 4;
        else
          v28 = 1;
        if (v28)
        {
          *((_DWORD *)a3 + 20) = (_DWORD)v12 - 1;
          return TagFallback;
        }
        v18 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v12, v9, TagFallback, a3, v10);
LABEL_47:
        v36 = (google::protobuf::internal *)v18;
        if (v18)
          continue;
LABEL_54:
        TagFallback = 0;
        break;
    }
    return TagFallback;
  }
}

const google::protobuf::UnknownFieldSet *SnippetUI::CustomCanvas::InternalSerializeWithCachedSizesToArray(SnippetUI::CustomCanvas *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  google::protobuf::internal *v7;
  const char *v8;
  google::protobuf::internal *v9;
  const char *v10;
  uint64_t v11;
  google::protobuf::internal *v12;
  const char *v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  uint64_t v17;

  v7 = (google::protobuf::internal *)*((_QWORD *)this + 2);
  if (*((char *)v7 + 23) < 0)
  {
    v8 = (const char *)*((_QWORD *)v7 + 1);
    if (!v8)
      goto LABEL_7;
    v7 = *(google::protobuf::internal **)v7;
    goto LABEL_6;
  }
  v8 = (const char *)*((unsigned __int8 *)v7 + 23);
  if (*((_BYTE *)v7 + 23))
  {
LABEL_6:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v7, v8, 1, (google::protobuf::internal *)"SnippetUI.CustomCanvas.bundle_name");
    a2 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 2, *((_QWORD *)this + 2), a2);
  }
LABEL_7:
  v9 = (google::protobuf::internal *)*((_QWORD *)this + 3);
  if (*((char *)v9 + 23) < 0)
  {
    v10 = (const char *)*((_QWORD *)v9 + 1);
    if (!v10)
      goto LABEL_13;
    v9 = *(google::protobuf::internal **)v9;
    goto LABEL_12;
  }
  v10 = (const char *)*((unsigned __int8 *)v9 + 23);
  if (*((_BYTE *)v9 + 23))
  {
LABEL_12:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v9, v10, 1, (google::protobuf::internal *)"SnippetUI.CustomCanvas.view_id");
    a2 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 3, *((_QWORD *)this + 3), a2);
  }
LABEL_13:
  v11 = *((_QWORD *)this + 4);
  if ((*(char *)(v11 + 23) & 0x80000000) == 0)
  {
    if (!*(_BYTE *)(v11 + 23))
      goto LABEL_16;
    goto LABEL_15;
  }
  if (*(_QWORD *)(v11 + 8))
LABEL_15:
    a2 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 4, v11, a2);
LABEL_16:
  v12 = (google::protobuf::internal *)*((_QWORD *)this + 5);
  if (*((char *)v12 + 23) < 0)
  {
    v13 = (const char *)*((_QWORD *)v12 + 1);
    if (!v13)
      goto LABEL_24;
    v12 = *(google::protobuf::internal **)v12;
    goto LABEL_23;
  }
  v13 = (const char *)*((unsigned __int8 *)v12 + 23);
  if (*((_BYTE *)v12 + 23))
  {
LABEL_23:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v12, v13, 1, (google::protobuf::internal *)"SnippetUI.CustomCanvas.component_name");
    a2 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 5, *((_QWORD *)this + 5), a2);
  }
LABEL_24:
  if (*((_BYTE *)this + 48))
  {
    if ((unint64_t)a2 >= *(_QWORD *)a3)
    {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      v14 = *((_BYTE *)this + 48);
    }
    else
    {
      v14 = 1;
    }
    *a2 = 48;
    a2[1] = v14;
    a2 += 2;
  }
  if (*((_BYTE *)this + 49))
  {
    if ((unint64_t)a2 >= *(_QWORD *)a3)
    {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      v15 = *((_BYTE *)this + 49);
    }
    else
    {
      v15 = 1;
    }
    *a2 = 56;
    a2[1] = v15;
    a2 += 2;
  }
  if (*((_BYTE *)this + 50))
  {
    if ((unint64_t)a2 >= *(_QWORD *)a3)
    {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      v16 = *((_BYTE *)this + 50);
    }
    else
    {
      v16 = 1;
    }
    *a2 = 64;
    a2[1] = v16;
    a2 += 2;
  }
  v17 = *((_QWORD *)this + 1);
  if ((v17 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v17 & 0xFFFFFFFFFFFFFFFELL), (const google::protobuf::UnknownFieldSet *)a2, a3, a4);
  else
    return (const google::protobuf::UnknownFieldSet *)a2;
}

void SnippetUI::CustomCanvas::CopyFrom(SnippetUI::CustomCanvas *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    SnippetUI::CustomCanvas::Clear(this);
    SnippetUI::CustomCanvas::MergeFrom(this, a2);
  }
}

void SnippetUI::CustomCanvas::MergeFrom(SnippetUI::CustomCanvas *this, const google::protobuf::Message *lpsrc)
{
  std::string *v4;
  const SnippetUI::CustomCanvas *v5;
  google::protobuf::Message *v6;
  char v7;
  std::string v8[2];

  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/CustomCanvas.pb.cc", 383);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5)
    SnippetUI::CustomCanvas::MergeFrom(this, v5);
  else
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
}

void sub_1BF8F78DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::CustomCanvas::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 52) = a2;
  return this;
}

uint64_t SnippetUI::CustomCanvas::GetMetadata(SnippetUI::CustomCanvas *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_CustomCanvas_2eproto);
  return file_level_metadata_CustomCanvas_2eproto;
}

void *SnippetUI::CustomCanvas::default_instance(SnippetUI::CustomCanvas *this)
{
  if (atomic_load(scc_info_CustomCanvas_CustomCanvas_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_CustomCanvas_CustomCanvas_2eproto);
  return &SnippetUI::_CustomCanvas_default_instance_;
}

void SnippetUI::CustomCanvas::MergeFrom(SnippetUI::CustomCanvas *this, const SnippetUI::CustomCanvas *a2)
{
  std::string *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  char v14;
  std::string v15[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/CustomCanvas.pb.cc", 398);
    v4 = google::protobuf::internal::LogMessage::operator<<(v15, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v14, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v15[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::CustomCanvas *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  v6 = *((_QWORD *)a2 + 2);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(_QWORD *)(v6 + 8))
      goto LABEL_13;
  }
  else if (!*(_BYTE *)(v6 + 23))
  {
    goto LABEL_13;
  }
  v7 = (uint64_t *)*((_QWORD *)this + 2);
  if (v7 != (uint64_t *)v6)
  {
    if (v7 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, v6);
    else
      std::string::operator=(*((std::string **)this + 2), (const std::string *)v6);
  }
LABEL_13:
  v8 = *((_QWORD *)a2 + 3);
  if (*(char *)(v8 + 23) < 0)
  {
    if (!*(_QWORD *)(v8 + 8))
      goto LABEL_21;
  }
  else if (!*(_BYTE *)(v8 + 23))
  {
    goto LABEL_21;
  }
  v9 = (uint64_t *)*((_QWORD *)this + 3);
  if (v9 != (uint64_t *)v8)
  {
    if (v9 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 3, v8);
    else
      std::string::operator=(*((std::string **)this + 3), (const std::string *)v8);
  }
LABEL_21:
  v10 = *((_QWORD *)a2 + 4);
  if (*(char *)(v10 + 23) < 0)
  {
    if (!*(_QWORD *)(v10 + 8))
      goto LABEL_29;
  }
  else if (!*(_BYTE *)(v10 + 23))
  {
    goto LABEL_29;
  }
  v11 = (uint64_t *)*((_QWORD *)this + 4);
  if (v11 != (uint64_t *)v10)
  {
    if (v11 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 4, v10);
    else
      std::string::operator=(*((std::string **)this + 4), (const std::string *)v10);
  }
LABEL_29:
  v12 = *((_QWORD *)a2 + 5);
  if (*(char *)(v12 + 23) < 0)
  {
    if (!*(_QWORD *)(v12 + 8))
      goto LABEL_37;
  }
  else if (!*(_BYTE *)(v12 + 23))
  {
    goto LABEL_37;
  }
  v13 = (uint64_t *)*((_QWORD *)this + 5);
  if (v13 != (uint64_t *)v12)
  {
    if (v13 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 5, v12);
    else
      std::string::operator=(*((std::string **)this + 5), (const std::string *)v12);
  }
LABEL_37:
  if (*((_BYTE *)a2 + 48))
    *((_BYTE *)this + 48) = 1;
  if (*((_BYTE *)a2 + 49))
    *((_BYTE *)this + 49) = 1;
  if (*((_BYTE *)a2 + 50))
    *((_BYTE *)this + 50) = 1;
}

void sub_1BF8F7B4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

SnippetUI::CustomCanvas *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::CustomCanvas>(google::protobuf::internal::ArenaImpl *this)
{
  SnippetUI::CustomCanvas *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (SnippetUI::CustomCanvas *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x38uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::CustomCanvas>);
    SnippetUI::CustomCanvas::CustomCanvas(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (SnippetUI::CustomCanvas *)operator new();
    SnippetUI::CustomCanvas::CustomCanvas(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_1BF8F7BE8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D890](v1, 0x10A1C404D509FBCLL);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::CustomCanvas>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

SnippetUI::CustomCanvas *SnippetUI::CustomCanvas::CustomCanvas(SnippetUI::CustomCanvas *this, const SnippetUI::CustomCanvas *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int16 v14;

  *(_QWORD *)this = &off_1E792CFA0;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 13) = 0;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::CustomCanvas *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  v5 = *((_QWORD *)a2 + 2);
  if (*(char *)(v5 + 23) < 0)
    v6 = *(_QWORD *)(v5 + 8);
  else
    v6 = *(unsigned __int8 *)(v5 + 23);
  if ((uint64_t *)v5 != &google::protobuf::internal::fixed_address_empty_string && v6 != 0)
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, v5);
  *((_QWORD *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  v8 = *((_QWORD *)a2 + 3);
  if (*(char *)(v8 + 23) < 0)
    v9 = *(_QWORD *)(v8 + 8);
  else
    v9 = *(unsigned __int8 *)(v8 + 23);
  if ((uint64_t *)v8 != &google::protobuf::internal::fixed_address_empty_string && v9)
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 3, v8);
  *((_QWORD *)this + 4) = &google::protobuf::internal::fixed_address_empty_string;
  v10 = *((_QWORD *)a2 + 4);
  if (*(char *)(v10 + 23) < 0)
    v11 = *(_QWORD *)(v10 + 8);
  else
    v11 = *(unsigned __int8 *)(v10 + 23);
  if ((uint64_t *)v10 != &google::protobuf::internal::fixed_address_empty_string && v11)
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 4, v10);
  *((_QWORD *)this + 5) = &google::protobuf::internal::fixed_address_empty_string;
  v12 = *((_QWORD *)a2 + 5);
  if (*(char *)(v12 + 23) < 0)
    v13 = *(_QWORD *)(v12 + 8);
  else
    v13 = *(unsigned __int8 *)(v12 + 23);
  if ((uint64_t *)v12 != &google::protobuf::internal::fixed_address_empty_string && v13)
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 5, v12);
  v14 = *((_WORD *)a2 + 24);
  *((_BYTE *)this + 50) = *((_BYTE *)a2 + 50);
  *((_WORD *)this + 24) = v14;
  return this;
}

void sub_1BF8F7E74(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::CustomCanvas::CopyFrom(SnippetUI::CustomCanvas *this, const SnippetUI::CustomCanvas *a2)
{
  if (a2 != this)
  {
    SnippetUI::CustomCanvas::Clear(this);
    SnippetUI::CustomCanvas::MergeFrom(this, a2);
  }
}

void SnippetUI::CustomCanvas::InternalSwap(SnippetUI::CustomCanvas *this, SnippetUI::CustomCanvas *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  uint64_t v5;
  google::protobuf::UnknownFieldSet *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t **v20;
  uint64_t *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t **v26;
  uint64_t *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  char v31;
  char v32;
  char v33;
  google::protobuf::UnknownFieldSet *v34;

  v4 = (SnippetUI::CustomCanvas *)((char *)this + 8);
  v5 = *((_QWORD *)a2 + 1);
  if ((*((_BYTE *)this + 8) & 1) != 0)
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v6 = v34;
      goto LABEL_6;
    }
LABEL_5:
    v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
    google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
    goto LABEL_7;
  }
  if ((v5 & 1) != 0)
    goto LABEL_5;
LABEL_7:
  v7 = (uint64_t *)*((_QWORD *)this + 2);
  v8 = (uint64_t **)((char *)a2 + 16);
  if (v7 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_13;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 2, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v7 = (uint64_t *)*((_QWORD *)this + 2);
  }
  v9 = *v8;
  if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 2, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v9 = *v8;
  }
  v10 = v7[2];
  v11 = *(_OWORD *)v7;
  v12 = v9[2];
  *(_OWORD *)v7 = *(_OWORD *)v9;
  v7[2] = v12;
  *(_OWORD *)v9 = v11;
  v9[2] = v10;
LABEL_13:
  v13 = (uint64_t *)*((_QWORD *)this + 3);
  v14 = (uint64_t **)((char *)a2 + 24);
  if (v13 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_19;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 3, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v13 = (uint64_t *)*((_QWORD *)this + 3);
  }
  v15 = *v14;
  if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 3, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v15 = *v14;
  }
  v16 = v13[2];
  v17 = *(_OWORD *)v13;
  v18 = v15[2];
  *(_OWORD *)v13 = *(_OWORD *)v15;
  v13[2] = v18;
  *(_OWORD *)v15 = v17;
  v15[2] = v16;
LABEL_19:
  v19 = (uint64_t *)*((_QWORD *)this + 4);
  v20 = (uint64_t **)((char *)a2 + 32);
  if (v19 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v20 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_25;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 4, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v19 = (uint64_t *)*((_QWORD *)this + 4);
  }
  v21 = *v20;
  if (*v20 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 4, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v21 = *v20;
  }
  v22 = v19[2];
  v23 = *(_OWORD *)v19;
  v24 = v21[2];
  *(_OWORD *)v19 = *(_OWORD *)v21;
  v19[2] = v24;
  *(_OWORD *)v21 = v23;
  v21[2] = v22;
LABEL_25:
  v25 = (uint64_t *)*((_QWORD *)this + 5);
  v26 = (uint64_t **)((char *)a2 + 40);
  if (v25 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v26 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_31;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 5, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v25 = (uint64_t *)*((_QWORD *)this + 5);
  }
  v27 = *v26;
  if (*v26 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 5, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v27 = *v26;
  }
  v28 = v25[2];
  v29 = *(_OWORD *)v25;
  v30 = v27[2];
  *(_OWORD *)v25 = *(_OWORD *)v27;
  v25[2] = v30;
  *(_OWORD *)v27 = v29;
  v27[2] = v28;
LABEL_31:
  v31 = *((_BYTE *)this + 48);
  *((_BYTE *)this + 48) = *((_BYTE *)a2 + 48);
  *((_BYTE *)a2 + 48) = v31;
  v32 = *((_BYTE *)this + 49);
  *((_BYTE *)this + 49) = *((_BYTE *)a2 + 49);
  *((_BYTE *)a2 + 49) = v32;
  v33 = *((_BYTE *)this + 50);
  *((_BYTE *)this + 50) = *((_BYTE *)a2 + 50);
  *((_BYTE *)a2 + 50) = v33;
}

void siri::dialogengine::GradingAllowListFactory::GetAllowListForBundleId(char *a1@<X0>, const char *a2@<X1>, uint64_t *a3@<X8>)
{
  char *v3;
  char *v5;
  unsigned __int8 v6;
  unint64_t v7;
  std::mutex *v8;
  const char *v9;
  unsigned __int8 v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t **v13;
  uint64_t v14;
  uint64_t v15;
  _BOOL4 v16;
  uint64_t *v17;
  char *v18;
  siri::dialogengine *v19;
  const char *v20;
  uint64_t p_p;
  uint64_t i;
  std::string::size_type size;
  const char *v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  std::string *v28;
  _QWORD *v29;
  __int128 v30;
  uint64_t *v31;
  uint64_t **v32;
  uint64_t **v33;
  const void **v34;
  const char *v35;
  char *v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t *v40;
  std::string *v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *p_shared_owners;
  unint64_t v50;
  char *v51;
  _QWORD *v52;
  _QWORD *v53;
  void *v54[2];
  char v55;
  std::string v56;
  __int128 __p;
  char v58;
  char v59;

  v3 = a1;
  if (a1[23] >= 0)
    v5 = a1;
  else
    v5 = *(char **)a1;
  siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"GetAllowListForBundleId: Looking for allow list for bundleId [%s]...", a2, v5);
  if ((v6 & 1) == 0
  {
    v52 = (_QWORD *)operator new();
    *v52 = 0;
    siri::dialogengine::GetGradingAllowListCacheMutex(void)::flag = (uint64_t)v52;
  }
  v7 = atomic_load((unint64_t *)siri::dialogengine::GetGradingAllowListCacheMutex(void)::flag);
  if (v7 != -1)
  {
    *(_QWORD *)&__p = v54;
    v56.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
    std::__call_once((std::once_flag::_State_type *)siri::dialogengine::GetGradingAllowListCacheMutex(void)::flag, &v56, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::GetGradingAllowListCacheMutex(void)::$_0 &&>>);
  }
  v8 = (std::mutex *)siri::dialogengine::GetGradingAllowListCacheMutex(void)::sMutex;
  std::mutex::lock((std::mutex *)siri::dialogengine::GetGradingAllowListCacheMutex(void)::sMutex);
  if ((v10 & 1) == 0
  {
    v53 = (_QWORD *)operator new();
    *v53 = 0;
    siri::dialogengine::GetGradingAllowListCache(void)::flag = (uint64_t)v53;
  }
  v11 = atomic_load((unint64_t *)siri::dialogengine::GetGradingAllowListCache(void)::flag);
  if (v11 != -1)
  {
    *(_QWORD *)&__p = v54;
    v56.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
    std::__call_once((std::once_flag::_State_type *)siri::dialogengine::GetGradingAllowListCache(void)::flag, &v56, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::GetGradingAllowListCache(void)::$_0 &&>>);
  }
  v12 = siri::dialogengine::GetGradingAllowListCache(void)::sCache;
  v13 = (uint64_t **)(siri::dialogengine::GetGradingAllowListCache(void)::sCache + 8);
  v14 = *(_QWORD *)(siri::dialogengine::GetGradingAllowListCache(void)::sCache + 8);
  if (!v14)
    goto LABEL_17;
  v15 = siri::dialogengine::GetGradingAllowListCache(void)::sCache + 8;
  do
  {
    v16 = std::less<std::string>::operator()[abi:ne180100](v12 + 16, (const void **)(v14 + 32), (const void **)v3);
    v17 = (uint64_t *)(v14 + 8);
    if (!v16)
    {
      v17 = (uint64_t *)v14;
      v15 = v14;
    }
    v14 = *v17;
  }
  while (*v17);
  if ((uint64_t **)v15 == v13
    || std::less<std::string>::operator()[abi:ne180100](v12 + 16, (const void **)v3, (const void **)(v15 + 32)))
  {
LABEL_17:
    if (v3[23] >= 0)
      v18 = v3;
    else
      v18 = *(char **)v3;
    siri::dialogengine::Log::Info((siri::dialogengine::Log *)"GetAllowListForBundleId: Allow list for bundleId [%s] was not found in the cache", v9, v18);
    siri::dialogengine::GetGradingAllowListSearchPaths(v19, &v56);
    std::string::basic_string[abi:ne180100]<0>(v54, "\n");
    siri::dialogengine::StringJoinInternal<std::vector<std::string>>((uint64_t)&__p, (uint64_t)v56.__r_.__value_.__l.__data_, v56.__r_.__value_.__l.__size_, (uint64_t)v54);
    if (v59 >= 0)
      p_p = (uint64_t)&__p;
    else
      p_p = __p;
    siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"GetAllowListForBundleId: Grading allow list search path...\n%s", v20, p_p);
    if (v59 < 0)
      operator delete((void *)__p);
    if (v55 < 0)
      operator delete(v54[0]);
    *a3 = 0;
    a3[1] = 0;
    size = v56.__r_.__value_.__l.__size_;
    for (i = v56.__r_.__value_.__r.__words[0]; ; i += 24)
    {
      if (i == size)
      {
        if (v3[23] < 0)
          v3 = *(char **)v3;
        std::string::basic_string[abi:ne180100]<0>(v54, "\n");
        siri::dialogengine::StringJoinInternal<std::vector<std::string>>((uint64_t)&__p, (uint64_t)v56.__r_.__value_.__l.__data_, v56.__r_.__value_.__l.__size_, (uint64_t)v54);
        if (v59 >= 0)
          v26 = (uint64_t)&__p;
        else
          v26 = __p;
        siri::dialogengine::Log::Warn((siri::dialogengine::Log *)"GetAllowListForBundleId: No allow list found for bundleId [%s]\nSearch paths:\n%s", v25, v3, v26);
        if (v59 < 0)
          operator delete((void *)__p);
        if (v55 < 0)
          operator delete(v54[0]);
        goto LABEL_80;
      }
      siri::dialogengine::JoinPath(i, (uint64_t)v3, (uint64_t)&__p);
      if (siri::dialogengine::FileExists((uint64_t *)&__p))
        break;
      if (v59 < 0)
        operator delete((void *)__p);
    }
    v27 = (uint64_t)&__p;
    if (v59 < 0)
      v27 = __p;
    siri::dialogengine::Log::Info((siri::dialogengine::Log *)"GetAllowListForBundleId: Found allow list: [%s]", v24, v27);
    v28 = (std::string *)operator new();
    siri::dialogengine::GradingAllowList::GradingAllowList(v28, (__int128 *)v3, &__p);
    v29 = (_QWORD *)operator new();
    *v29 = &off_1E792D078;
    v29[1] = 0;
    v29[2] = 0;
    v29[3] = v28;
    *(_QWORD *)&v30 = v28;
    *((_QWORD *)&v30 + 1) = v29;
    *(_OWORD *)a3 = v30;
    if (v59 < 0)
      operator delete((void *)__p);
    v31 = *v13;
    v32 = v13;
    v33 = v13;
    if (!*v13)
      goto LABEL_62;
    v32 = v13;
    while (1)
    {
      while (1)
      {
        v33 = (uint64_t **)v31;
        v34 = (const void **)(v31 + 4);
        if (!std::less<std::string>::operator()[abi:ne180100](v12 + 16, (const void **)v3, (const void **)v31 + 4))
          break;
        v31 = *v33;
        v32 = v33;
        if (!*v33)
          goto LABEL_62;
      }
      if (!std::less<std::string>::operator()[abi:ne180100](v12 + 16, v34, (const void **)v3))
        break;
      v32 = v33 + 1;
      v31 = v33[1];
      if (!v31)
        goto LABEL_62;
    }
    v40 = *v32;
    if (!*v32)
    {
LABEL_62:
      v40 = (uint64_t *)operator new(0x48uLL);
      *(_QWORD *)&__p = v40;
      *((_QWORD *)&__p + 1) = v13;
      v58 = 0;
      v41 = (std::string *)(v40 + 4);
      if (v3[23] < 0)
      {
        std::string::__init_copy_ctor_external(v41, *(const std::string::value_type **)v3, *((_QWORD *)v3 + 1));
      }
      else
      {
        *(_OWORD *)&v41->__r_.__value_.__l.__data_ = *(_OWORD *)v3;
        v40[6] = *((_QWORD *)v3 + 2);
      }
      v40[7] = 0;
      v40[8] = 0;
      v58 = 1;
      *v40 = 0;
      v40[1] = 0;
      v40[2] = (uint64_t)v33;
      *v32 = v40;
      v42 = **(_QWORD **)v12;
      v43 = v40;
      if (v42)
      {
        *(_QWORD *)v12 = v42;
        v43 = *v32;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v12 + 8), v43);
      ++*(_QWORD *)(v12 + 16);
      *(_QWORD *)&__p = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::GradingAllowList>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::GradingAllowList>>,void *>>>>::reset[abi:ne180100]((uint64_t *)&__p);
    }
    v45 = *a3;
    v44 = a3[1];
    if (v44)
    {
      v46 = (unint64_t *)(v44 + 8);
      do
        v47 = __ldxr(v46);
      while (__stxr(v47 + 1, v46));
    }
    v48 = (std::__shared_weak_count *)v40[8];
    v40[7] = v45;
    v40[8] = v44;
    if (v48)
    {
      p_shared_owners = (unint64_t *)&v48->__shared_owners_;
      do
        v50 = __ldaxr(p_shared_owners);
      while (__stlxr(v50 - 1, p_shared_owners));
      if (!v50)
      {
        ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
        std::__shared_weak_count::__release_weak(v48);
      }
    }
    if (v3[23] >= 0)
      v51 = v3;
    else
      v51 = *(char **)v3;
    siri::dialogengine::Log::Info((siri::dialogengine::Log *)"GetAllowListForBundleId: Added allow list for bundleId [%s] to the cache", v35, v51);
LABEL_80:
    *(_QWORD *)&__p = &v56;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  }
  else
  {
    if (v3[23] >= 0)
      v36 = v3;
    else
      v36 = *(char **)v3;
    siri::dialogengine::Log::Info((siri::dialogengine::Log *)"GetAllowListForBundleId: Allow list for bundleId [%s] was found in the cache", v9, v36);
    *a3 = *(_QWORD *)(v15 + 56);
    v37 = *(_QWORD *)(v15 + 64);
    a3[1] = v37;
    if (v37)
    {
      v38 = (unint64_t *)(v37 + 8);
      do
        v39 = __ldxr(v38);
      while (__stxr(v39 + 1, v38));
    }
  }
  std::mutex::unlock(v8);
}

void sub_1BF8F86E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  std::mutex *v26;

  std::mutex::unlock(v26);
  _Unwind_Resume(a1);
}

double std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::GetGradingAllowListCacheMutex(void)::$_0 &&>>()
{
  uint64_t v0;
  double result;

  v0 = operator new();
  *(_QWORD *)v0 = 850045863;
  result = 0.0;
  *(_OWORD *)(v0 + 8) = 0u;
  *(_OWORD *)(v0 + 24) = 0u;
  *(_OWORD *)(v0 + 40) = 0u;
  *(_QWORD *)(v0 + 56) = 0;
  siri::dialogengine::GetGradingAllowListCacheMutex(void)::sMutex = v0;
  return result;
}

_QWORD *std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::GetGradingAllowListCache(void)::$_0 &&>>()
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  result[2] = 0;
  result[1] = 0;
  *result = result + 1;
  siri::dialogengine::GetGradingAllowListCache(void)::sCache = (uint64_t)result;
  return result;
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::GradingAllowList>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::GradingAllowList>>,void *>>>>::reset[abi:ne180100](uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  *a1 = 0;
  if (v1)
  {
    if (*((_BYTE *)a1 + 16))
    {
      std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](v1 + 56);
      if (*(char *)(v1 + 55) < 0)
        operator delete(*(void **)(v1 + 32));
    }
    operator delete((void *)v1);
  }
}

uint64_t std::default_delete<siri::dialogengine::GradingAllowList>::operator()[abi:ne180100](uint64_t result)
{
  uint64_t v1;

  if (result)
  {
    v1 = result;
    std::__tree<std::string>::destroy(*(char **)(result + 56));
    if (*(char *)(v1 + 47) < 0)
      operator delete(*(void **)(v1 + 24));
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    JUMPOUT(0x1C3B8D890);
  }
  return result;
}

void std::__shared_ptr_pointer<siri::dialogengine::GradingAllowList *,std::shared_ptr<siri::dialogengine::GradingAllowList>::__shared_ptr_default_delete<siri::dialogengine::GradingAllowList,siri::dialogengine::GradingAllowList>,std::allocator<siri::dialogengine::GradingAllowList>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B8D890);
}

uint64_t std::__shared_ptr_pointer<siri::dialogengine::GradingAllowList *,std::shared_ptr<siri::dialogengine::GradingAllowList>::__shared_ptr_default_delete<siri::dialogengine::GradingAllowList,siri::dialogengine::GradingAllowList>,std::allocator<siri::dialogengine::GradingAllowList>>::__on_zero_shared(uint64_t a1)
{
  return std::default_delete<siri::dialogengine::GradingAllowList>::operator()[abi:ne180100](*(_QWORD *)(a1 + 24));
}

uint64_t std::__shared_ptr_pointer<siri::dialogengine::GradingAllowList *,std::shared_ptr<siri::dialogengine::GradingAllowList>::__shared_ptr_default_delete<siri::dialogengine::GradingAllowList,siri::dialogengine::GradingAllowList>,std::allocator<siri::dialogengine::GradingAllowList>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void siri::dialogengine::GradingAllowListFactory::GetAllowListForTemplateDir(char *a1@<X0>, uint64_t *a2@<X8>)
{
  std::mutex *BundleRegistryMutex;
  siri::dialogengine *v5;
  uint64_t BundleRegistryRef;
  uint64_t v7;
  const char *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  const char *v12;
  char *v13;

  BundleRegistryMutex = (std::mutex *)siri::dialogengine::GetBundleRegistryMutex((siri::dialogengine *)a1);
  std::mutex::lock(BundleRegistryMutex);
  BundleRegistryRef = siri::dialogengine::GetBundleRegistryRef(v5);
  v7 = std::__tree<std::string>::find<std::string>(BundleRegistryRef, (const void **)a1);
  if (BundleRegistryRef + 8 == v7)
  {
    if (a1[23] >= 0)
      v13 = a1;
    else
      v13 = *(char **)a1;
    siri::dialogengine::Log::Warn((siri::dialogengine::Log *)"GetAllowListForTemplateDir: No bundleId registered for templateDir [%s]", v8, v13);
    *a2 = 0;
    a2[1] = 0;
  }
  else
  {
    v9 = (char *)(v7 + 56);
    v10 = v7 + 56;
    if (*(char *)(v7 + 79) < 0)
      v10 = *(_QWORD *)v9;
    if (a1[23] >= 0)
      v11 = a1;
    else
      v11 = *(char **)a1;
    siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"Using bundleId [%s] for templateDir [%s]", v8, v10, v11);
    siri::dialogengine::GradingAllowListFactory::GetAllowListForBundleId(v9, v12, a2);
  }
  std::mutex::unlock(BundleRegistryMutex);
}

void sub_1BF8F8A8C(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::GetBundleRegistryMutex(siri::dialogengine *this)
{
  unsigned __int8 v1;
  unint64_t v2;
  _QWORD *v4;
  char v5;
  char **v6;
  char *v7;

  {
    v4 = (_QWORD *)operator new();
    *v4 = 0;
    siri::dialogengine::GetBundleRegistryMutex(void)::flag = (uint64_t)v4;
  }
  v2 = atomic_load((unint64_t *)siri::dialogengine::GetBundleRegistryMutex(void)::flag);
  if (v2 != -1)
  {
    v7 = &v5;
    v6 = &v7;
    std::__call_once((std::once_flag::_State_type *)siri::dialogengine::GetBundleRegistryMutex(void)::flag, &v6, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::GetBundleRegistryMutex(void)::$_0 &&>>);
  }
  return siri::dialogengine::GetBundleRegistryMutex(void)::m;
}

void sub_1BF8F8B50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::GetBundleRegistryRef(siri::dialogengine *this)
{
  unsigned __int8 v1;
  unint64_t v2;
  _QWORD *v4;
  char v5;
  char **v6;
  char *v7;

  {
    v4 = (_QWORD *)operator new();
    *v4 = 0;
    siri::dialogengine::GetBundleRegistryRef(void)::flag = (uint64_t)v4;
  }
  v2 = atomic_load((unint64_t *)siri::dialogengine::GetBundleRegistryRef(void)::flag);
  if (v2 != -1)
  {
    v7 = &v5;
    v6 = &v7;
    std::__call_once((std::once_flag::_State_type *)siri::dialogengine::GetBundleRegistryRef(void)::flag, &v6, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::GetBundleRegistryRef(void)::$_0 &&>>);
  }
  return siri::dialogengine::GetBundleRegistryRef(void)::sTemplatDirToBundleIdMap;
}

void sub_1BF8F8C14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::GetBundleRegistryRef(void)::$_0 &&>>()
{
  uint64_t v0;
  _OWORD *v1;
  std::string v2;
  void *__p;
  char v4;
  uint64_t v5;
  uint64_t v6;
  std::string v7;
  std::string *v8;
  void **v9;

  v0 = operator new();
  *(_QWORD *)(v0 + 16) = 0;
  *(_QWORD *)(v0 + 8) = 0;
  *(_QWORD *)v0 = v0 + 8;
  siri::dialogengine::GetBundleRegistryRef(void)::sTemplatDirToBundleIdMap = v0;
  siri::dialogengine::GetSharedTemplateDir((siri::dialogengine *)1, (siri::dialogengine::UpdatableDir *)&v2);
  if (SHIBYTE(v2.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v7, v2.__r_.__value_.__l.__data_, v2.__r_.__value_.__l.__size_);
  else
    v7 = v2;
  v8 = &v7;
  v1 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, (const void **)&v7.__r_.__value_.__l.__data_, (_OWORD **)&v8);
  MEMORY[0x1C3B8D53C]((char *)v1 + 56, "com.apple.siri.DialogEngine");
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  v9 = (void **)&v6;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v9);
  v9 = (void **)&v5;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v9);
  if (v4 < 0)
    operator delete(__p);
  if (SHIBYTE(v2.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v2.__r_.__value_.__l.__data_);
}

void sub_1BF8F8D30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v24;

  *(_QWORD *)(v24 - 24) = &a24;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v24 - 24));
  *(_QWORD *)(v24 - 24) = &a21;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v24 - 24));
  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  _Unwind_Resume(a1);
}

_OWORD *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, const void **a2, _OWORD **a3)
{
  void **v5;
  _OWORD *v6;
  uint64_t **v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD v11[2];
  char v12;
  uint64_t v13;

  v5 = (void **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)a1, &v13, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = operator new(0x50uLL);
    v11[1] = a1 + 1;
    v8 = *a3;
    v9 = *((_QWORD *)*a3 + 2);
    v6[2] = **a3;
    *((_QWORD *)v6 + 6) = v9;
    *v8 = 0;
    v8[1] = 0;
    v8[2] = 0;
    *((_QWORD *)v6 + 8) = 0;
    *((_QWORD *)v6 + 9) = 0;
    *((_QWORD *)v6 + 7) = 0;
    v12 = 1;
    std::__tree<std::string>::__insert_node_at(a1, v13, v7, (uint64_t *)v6);
    v11[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v11);
  }
  return v6;
}

double std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::GetBundleRegistryMutex(void)::$_0 &&>>()
{
  uint64_t v0;
  double result;

  v0 = operator new();
  *(_QWORD *)v0 = 850045863;
  result = 0.0;
  *(_OWORD *)(v0 + 8) = 0u;
  *(_OWORD *)(v0 + 24) = 0u;
  *(_OWORD *)(v0 + 40) = 0u;
  *(_QWORD *)(v0 + 56) = 0;
  siri::dialogengine::GetBundleRegistryMutex(void)::m = v0;
  return result;
}

void siri::dialogengine::GradingAllowListFactory::RegisterBundle(char *a1, __int128 *a2)
{
  std::mutex *BundleRegistryMutex;
  siri::dialogengine *v5;
  uint64_t **BundleRegistryRef;
  uint64_t *v7;
  const char *v8;
  char *v9;
  uint64_t *v10;
  __int128 *v11;

  BundleRegistryMutex = (std::mutex *)siri::dialogengine::GetBundleRegistryMutex((siri::dialogengine *)a1);
  std::mutex::lock(BundleRegistryMutex);
  BundleRegistryRef = (uint64_t **)siri::dialogengine::GetBundleRegistryRef(v5);
  v11 = a2;
  v7 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(BundleRegistryRef, (const void **)a2, &v11);
  std::string::operator=((std::string *)(v7 + 7), (const std::string *)a1);
  if (a1[23] >= 0)
    v9 = a1;
  else
    v9 = *(char **)a1;
  if (*((char *)a2 + 23) >= 0)
    v10 = (uint64_t *)a2;
  else
    v10 = *(uint64_t **)a2;
  siri::dialogengine::Log::Info((siri::dialogengine::Log *)"GradingAllowListFactory: Registered bundle with bundleId [%s] and templateDir [%s]", v8, v9, v10);
  std::mutex::unlock(BundleRegistryMutex);
}

void sub_1BF8F8F2C(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1BF8F911C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BF8F952C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;

  if (a20 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1BF8F9894(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void AppendVisualResultToPatternExecutionResult(void *a1, void *a2, uint64_t a3)
{
  id v5;
  id v6;
  std::string::size_type v7;
  id v8;
  void *v9;
  const char *v10;
  void *v11;
  void *v12;
  id v13;
  _QWORD *v14;
  std::string::size_type size;
  std::string *p_p;
  void *v17;
  void *v18;
  void *v19;
  __int128 *v20;
  __int128 *v21;
  id v22;
  uint64_t *v23;
  __int128 v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t, uint64_t *);
  void *v32;
  id v33;
  std::string v34;
  std::string __p;
  void *v36[2];
  char v37;
  std::string v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  std::string v43;

  v5 = a1;
  v6 = a2;
  if (!v6)
    goto LABEL_40;
  v42 = 0;
  v40 = 0u;
  v41 = 0u;
  v39 = 0u;
  if (*(char *)(a3 + 23) < 0)
  {
    v7 = *(_QWORD *)(a3 + 8);
    if (v7)
    {
      std::string::__init_copy_ctor_external(&v38, *(const std::string::value_type **)a3, v7);
      goto LABEL_8;
    }
LABEL_7:
    std::string::basic_string[abi:ne180100]<0>(&v38, "*");
    goto LABEL_8;
  }
  if (!*(_BYTE *)(a3 + 23))
    goto LABEL_7;
  v38 = *(std::string *)a3;
LABEL_8:
  objc_msgSend(v6, "base64EncodedStringWithOptions:", 0);
  v8 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  std::string::basic_string[abi:ne180100]<0>(v36, (char *)objc_msgSend(v8, "UTF8String"));
  siri::dialogengine::FilterSnippetUISections((std::string::size_type)v36, &v38, (uint64_t)&v39, &__p);
  objc_msgSend(v5, "visual");
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  if (v9)
  {
    objc_msgSend(v5, "visual");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "base64EncodedStringWithOptions:", 0);
    v12 = (void *)objc_claimAutoreleasedReturnValue();

    v13 = objc_retainAutorelease(v12);
    v14 = std::string::basic_string[abi:ne180100]<0>(&v43, (char *)objc_msgSend(v13, "UTF8String"));
    siri::dialogengine::MergeSnippetUIResults((std::string::size_type)v14, (std::string::size_type)&__p, (uint64_t)&v39, &v34);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __p = v34;
    if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v43.__r_.__value_.__l.__data_);

  }
  size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __p.__r_.__value_.__l.__size_;
  if (size && (unint64_t)v39 | (unint64_t)v40)
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", p_p);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D50]), "initWithBase64EncodedString:options:", v17, 0);
    objc_msgSend(v5, "setVisual:", v18);

    objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v21 = (__int128 *)*((_QWORD *)&v41 + 1);
    v20 = (__int128 *)v41;
    v29 = MEMORY[0x1E0C809B0];
    v30 = 3221225472;
    v31 = ___ZL42AppendVisualResultToPatternExecutionResultP22PatternExecutionResultP6NSDataRKNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEE_block_invoke;
    v32 = &unk_1E792D0E8;
    v22 = v19;
    v33 = v22;
    v23 = &v29;
    while (v20 != v21)
    {
      if (*((char *)v20 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v43, *(const std::string::value_type **)v20, *((_QWORD *)v20 + 1));
      }
      else
      {
        v24 = *v20;
        v43.__r_.__value_.__r.__words[2] = *((_QWORD *)v20 + 2);
        *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v24;
      }
      v31((uint64_t)v23, (uint64_t *)&v43);
      if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v43.__r_.__value_.__l.__data_);
      v20 = (__int128 *)((char *)v20 + 24);
    }
    v25 = (void *)MEMORY[0x1C3B8DDB8](v23);

    objc_msgSend(v5, "visualInfo", v29, v30);
    v26 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v26)
    {
      v27 = (void *)objc_opt_new();
      objc_msgSend(v5, "setVisualInfo:", v27);

    }
    objc_msgSend(v5, "visualInfo");
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v28, "setSectionIds:", v22);

  }
  else
  {
    siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Visual has no sections or ornaments. Setting result.visual to nil", v10);
    objc_msgSend(v5, "setVisual:", 0);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v37 < 0)
    operator delete(v36[0]);

  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  v43.__r_.__value_.__r.__words[0] = (std::string::size_type)&v41;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v43);
LABEL_40:

}

void sub_1BF8F9DB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;

  if (a22 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);

  if (a34 < 0)
    operator delete(a29);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a29);

  _Unwind_Resume(a1);
}

void ___ZL42AppendVisualResultToPatternExecutionResultP22PatternExecutionResultP6NSDataRKNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEE_block_invoke(uint64_t a1, uint64_t *a2)
{
  id v3;

  if (*((char *)a2 + 23) < 0)
    a2 = (uint64_t *)*a2;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", a2);
  v3 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "addObject:");

}

void sub_1BF8F9F04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BF8F9F9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1BF8FA480(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45)
{
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  uint64_t v49;

  siri::dialogengine::SpeakableString::~SpeakableString(&a45);
  if (*(char *)(v49 - 105) < 0)
    operator delete(*(void **)(v49 - 128));

  _Unwind_Resume(a1);
}

void sub_1BF8FAA48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;

  if (a19 < 0)
    operator delete(__p);

  if (a25 < 0)
    operator delete(a20);

  _Unwind_Resume(a1);
}

void sub_1BF8FADA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;

  if (a18 < 0)
    operator delete(__p);
  if (a24 < 0)
    operator delete(a19);

  _Unwind_Resume(a1);
}

void sub_1BF8FF99C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,void *a26,void *a27,void *a28,void *a29,uint64_t a30,void *a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,void *a42,uint64_t a43,void *a44)
{
  void *v44;

  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x4B0]);

  STACK[0x2D0] = (unint64_t)&STACK[0x2F0];
  std::vector<CATResult * {__strong}>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x2D0]);
  STACK[0x2F0] = (unint64_t)&STACK[0x310];
  std::vector<CATResult * {__strong}>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x2F0]);
  if (SLOBYTE(STACK[0x347]) < 0)
    operator delete((void *)STACK[0x330]);
  STACK[0x330] = (unint64_t)&STACK[0x348];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x330]);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x360]);
  STACK[0x348] = (unint64_t)&STACK[0x370];
  std::vector<siri::dialogengine::ExecutePatternBase::Stage>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x348]);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x388]);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x398]);

  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x3A8]);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x3B8]);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x3C8]);
  siri::dialogengine::Context::~Context((siri::dialogengine::Context *)&STACK[0x6E0]);
  STACK[0x6E0] = (unint64_t)&STACK[0x3D8];
  std::vector<siri::dialogengine::UpdatableDir>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x6E0]);
  if (SLOBYTE(STACK[0x40F]) < 0)
    operator delete((void *)STACK[0x3F8]);
  if (SLOBYTE(STACK[0x427]) < 0)
    operator delete((void *)STACK[0x410]);
  if (SLOBYTE(STACK[0x43F]) < 0)
    operator delete((void *)STACK[0x428]);

  _Unwind_Resume(a1);
}

id GetPatternLog(void)
{
  unsigned __int8 v0;
  id *v1;
  int v3;

  v1 = (id *)&unk_1EF581000;
  if ((v0 & 1) == 0)
  {
    v1 = (id *)&unk_1EF581000;
    if (v3)
    {
      GetPatternLog(void)::sPatternLog = (uint64_t)os_log_create("com.apple.siri.DialogEngine", "ResponseFramework");
      v1 = (id *)&unk_1EF581000;
    }
  }
  return v1[276];
}

void LogPatternExecutionResult(PatternExecutionResult *a1)
{
  _QWORD *v1;
  void *v2;
  uint64_t p_p;
  void *v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *v8;
  void *v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  _QWORD *v14;
  void *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  _QWORD *v25;
  void *v26;
  BOOL v27;
  void *v28;
  BOOL v29;
  _QWORD *v30;
  _QWORD *v31;
  void *v32;
  _QWORD *v33;
  _QWORD *v34;
  void *v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  void *v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  NSString *v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  NSString *v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  _QWORD *v57;
  _QWORD *v58;
  NSString *v59;
  uint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  _QWORD *v63;
  _QWORD *v64;
  NSString *v65;
  uint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  _QWORD *v69;
  _QWORD *v70;
  void *isa;
  uint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  _QWORD *v75;
  _QWORD *v76;
  void *v77;
  uint64_t v78;
  _QWORD *v79;
  _QWORD *v80;
  _QWORD *v81;
  _QWORD *v82;
  NSString *v83;
  uint64_t v84;
  _QWORD *v85;
  _QWORD *v86;
  _QWORD *v87;
  _QWORD *v88;
  NSString *v89;
  uint64_t v90;
  _QWORD *v91;
  _QWORD *v92;
  _QWORD *v93;
  _QWORD *v94;
  void *v95;
  NSString *v96;
  uint64_t v97;
  _QWORD *v98;
  _QWORD *v99;
  _QWORD *v100;
  _QWORD *v101;
  void *v102;
  NSString *v103;
  uint64_t v104;
  _QWORD *v105;
  _QWORD *v106;
  _QWORD *v107;
  _QWORD *v108;
  void *v109;
  NSString *v110;
  uint64_t v111;
  _QWORD *v112;
  _QWORD *v113;
  _QWORD *v114;
  _QWORD *v115;
  void *v116;
  NSString *v117;
  uint64_t v118;
  _QWORD *v119;
  _QWORD *v120;
  _QWORD *v121;
  _QWORD *v122;
  void *v123;
  NSString *v124;
  uint64_t v125;
  _QWORD *v126;
  _QWORD *v127;
  _QWORD *v128;
  _QWORD *v129;
  void *v130;
  NSString *v131;
  uint64_t v132;
  _QWORD *v133;
  _QWORD *v134;
  _QWORD *v135;
  _QWORD *v136;
  char *v137;
  void **v138;
  uint64_t v139;
  _QWORD *v140;
  _QWORD *v141;
  _QWORD *v142;
  _QWORD *v143;
  _QWORD *v144;
  void *v145;
  void *v146;
  void *v147;
  uint64_t v148;
  _QWORD *v149;
  _QWORD *v150;
  void *v151;
  void *v152;
  uint64_t v153;
  _QWORD *v154;
  _QWORD *v155;
  void *v156;
  void *v157;
  uint64_t v158;
  _QWORD *v159;
  _QWORD *v160;
  _QWORD *v161;
  unint64_t v162;
  char *v163;
  void *v164;
  uint64_t v165;
  _QWORD *v166;
  _QWORD *v167;
  void *v168;
  _QWORD *v169;
  _QWORD *v170;
  void *v171;
  uint64_t v172;
  const char *v173;
  char *v174;
  void *v175;
  uint64_t v176;
  _QWORD *v177;
  _QWORD *v178;
  void *v179;
  void *v180;
  _QWORD *v181;
  void *v182;
  void *v183;
  BOOL v184;
  void *v185;
  void *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t i;
  void *v190;
  _QWORD *v191;
  _QWORD *v192;
  void *v193;
  uint64_t v194;
  _QWORD *v195;
  uint64_t v196;
  id v197;
  uint64_t v198;
  uint64_t v199;
  PatternExecutionResult *v200;
  void *v201;
  void *v202;
  void *v203;
  void *v204;
  void *v205;
  void *v206;
  void *v207;
  void *v208;
  void *v209;
  void *v210;
  id obj;
  id obja;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  void *v217[2];
  unsigned __int8 v218;
  NSString v219[2];
  unsigned __int8 v220;
  NSString v221[2];
  unsigned __int8 v222;
  NSString v223[2];
  unsigned __int8 v224;
  NSString v225[2];
  unsigned __int8 v226;
  NSString v227[2];
  unsigned __int8 v228;
  NSString v229[2];
  unsigned __int8 v230;
  NSString v231[2];
  unsigned __int8 v232;
  NSString v233[2];
  unsigned __int8 v234;
  NSNumber v235;
  uint64_t v236;
  unsigned __int8 v237;
  NSNumber v238;
  uint64_t v239;
  unsigned __int8 v240;
  NSString v241[2];
  unsigned __int8 v242;
  NSString v243[2];
  unsigned __int8 v244;
  NSString v245[2];
  unsigned __int8 v246;
  NSString v247[2];
  unsigned __int8 v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  __int128 v252;
  NSString v253;
  uint64_t v254;
  unsigned __int8 v255;
  __int128 v256;
  __int128 v257;
  __int128 v258;
  __int128 v259;
  void *__p;
  uint64_t v261;
  unsigned __int8 v262;
  _QWORD v263[2];
  _QWORD v264[11];
  char v265;
  uint64_t v266;
  char v267;
  _BYTE v268[128];
  _BYTE v269[128];
  _BYTE v270[128];
  uint64_t v271;

  v271 = *MEMORY[0x1E0C80C00];
  v200 = a1;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v263);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v264, (uint64_t)"PatternExecutionResult...\n", 26);
  if (v200)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v264, (uint64_t)"\n", 1);
    v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v264, (uint64_t)"patternId: ", 11);
    -[PatternExecutionResult patternId](v200, "patternId");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    p_p = (uint64_t)&__p;
    PrintStringOrNil(&__p, v2, 1);
    if ((v262 & 0x80u) == 0)
      v4 = &__p;
    else
      v4 = __p;
    if ((v262 & 0x80u) == 0)
      v5 = v262;
    else
      v5 = v261;
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)v4, v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"\n", 1);
    if ((char)v262 < 0)
      operator delete(__p);

    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v264, (uint64_t)"\n", 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v264, (uint64_t)"meta (count = ", 14);
    -[PatternExecutionResult meta](v200, "meta");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    if (v7)
    {
      -[PatternExecutionResult meta](v200, "meta");
      p_p = objc_claimAutoreleasedReturnValue();
      objc_msgSend((id)p_p, "count");
    }
    v8 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"):\n", 3);
    if (v7)

    -[PatternExecutionResult meta](v200, "meta");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = v9 == 0;

    if (!v10)
    {
      v258 = 0u;
      v259 = 0u;
      v256 = 0u;
      v257 = 0u;
      -[PatternExecutionResult meta](v200, "meta");
      obj = (id)objc_claimAutoreleasedReturnValue();
      v11 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v256, v270, 16);
      if (v11)
      {
        v12 = *(_QWORD *)v257;
        do
        {
          for (p_p = 0; p_p != v11; ++p_p)
          {
            if (*(_QWORD *)v257 != v12)
              objc_enumerationMutation(obj);
            v13 = *(void **)(*((_QWORD *)&v256 + 1) + 8 * p_p);
            v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v264, (uint64_t)"    ", 4);
            PrintStringOrNil(&__p, v13, 1);
            if ((v262 & 0x80u) == 0)
              v15 = &__p;
            else
              v15 = __p;
            if ((v262 & 0x80u) == 0)
              v16 = v262;
            else
              v16 = v261;
            v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
            v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" = ", 3);
            -[PatternExecutionResult meta](v200, "meta");
            v19 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v19, "objectForKeyedSubscript:", v13);
            v20 = (void *)objc_claimAutoreleasedReturnValue();
            PrintStringOrNil(&v253, v20, 1);
            if ((v255 & 0x80u) == 0)
              v21 = &v253;
            else
              v21 = v253;
            if ((v255 & 0x80u) == 0)
              v22 = v255;
            else
              v22 = v254;
            v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)v21, v22);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"\n", 1);
            if ((char)v255 < 0)
              operator delete(v253);

            if ((char)v262 < 0)
              operator delete(__p);
          }
          v11 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v256, v270, 16);
        }
        while (v11);
      }

    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v264, (uint64_t)"\n", 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v264, (uint64_t)"dialog (count = ", 16);
    -[PatternExecutionResult dialog](v200, "dialog");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    if (v24)
    {
      -[PatternExecutionResult dialog](v200, "dialog");
      p_p = objc_claimAutoreleasedReturnValue();
      objc_msgSend((id)p_p, "count");
    }
    v25 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"):\n", 3);
    if (v24)

    -[PatternExecutionResult dialog](v200, "dialog");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    v27 = v26 == 0;

    if (!v27)
    {
      -[PatternExecutionResult dialog](v200, "dialog");
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      v29 = objc_msgSend(v28, "count") == 0;

      if (!v29)
      {
        v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v264, (uint64_t)"    ", 4);
        v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"----", 4);
        LOBYTE(__p) = 10;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)&__p, 1);
      }
      v251 = 0u;
      v252 = 0u;
      v249 = 0u;
      v250 = 0u;
      -[PatternExecutionResult dialog](v200, "dialog");
      v197 = (id)objc_claimAutoreleasedReturnValue();
      v199 = objc_msgSend(v197, "countByEnumeratingWithState:objects:count:", &v249, v269, 16);
      if (v199)
      {
        v198 = *(_QWORD *)v250;
        do
        {
          for (obja = 0; obja != (id)v199; obja = (char *)obja + 1)
          {
            if (*(_QWORD *)v250 != v198)
              objc_enumerationMutation(v197);
            v32 = *(void **)(*((_QWORD *)&v249 + 1) + 8 * (_QWORD)obja);
            v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v264, (uint64_t)"    ", 4);
            v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"dialogId: ", 10);
            objc_msgSend(v32, "dialogId");
            v210 = (void *)objc_claimAutoreleasedReturnValue();
            PrintStringOrNil(&__p, v210, 1);
            if ((v262 & 0x80u) == 0)
              v35 = &__p;
            else
              v35 = __p;
            if ((v262 & 0x80u) == 0)
              v36 = v262;
            else
              v36 = v261;
            v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)v35, v36);
            v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"\n", 1);
            v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)"    ", 4);
            v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)"groupName: ", 11);
            objc_msgSend(v32, "groupName");
            v209 = (void *)objc_claimAutoreleasedReturnValue();
            PrintStringOrNil(&v253, v209, 1);
            if ((v255 & 0x80u) == 0)
              v41 = &v253;
            else
              v41 = v253;
            if ((v255 & 0x80u) == 0)
              v42 = v255;
            else
              v42 = v254;
            v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)v41, v42);
            v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"\n", 1);
            v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)"    ", 4);
            v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)"fullPrint: ", 11);
            objc_msgSend(v32, "fullPrint");
            v208 = (void *)objc_claimAutoreleasedReturnValue();
            PrintStringOrNil(v247, v208, 1);
            if ((v248 & 0x80u) == 0)
              v47 = v247;
            else
              v47 = (NSString *)v247[0];
            if ((v248 & 0x80u) == 0)
              v48 = v248;
            else
              v48 = (uint64_t)v247[1];
            v49 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)v47, v48);
            v50 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)"\n", 1);
            v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)"    ", 4);
            v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)"fullSpeak: ", 11);
            objc_msgSend(v32, "fullSpeak");
            v207 = (void *)objc_claimAutoreleasedReturnValue();
            PrintStringOrNil(v245, v207, 1);
            if ((v246 & 0x80u) == 0)
              v53 = v245;
            else
              v53 = (NSString *)v245[0];
            if ((v246 & 0x80u) == 0)
              v54 = v246;
            else
              v54 = (uint64_t)v245[1];
            v55 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)v53, v54);
            v56 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)"\n", 1);
            v57 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)"    ", 4);
            v58 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)"supportingPrint: ", 17);
            objc_msgSend(v32, "supportingPrint");
            v206 = (void *)objc_claimAutoreleasedReturnValue();
            PrintStringOrNil(v243, v206, 1);
            if ((v244 & 0x80u) == 0)
              v59 = v243;
            else
              v59 = (NSString *)v243[0];
            if ((v244 & 0x80u) == 0)
              v60 = v244;
            else
              v60 = (uint64_t)v243[1];
            v61 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)v59, v60);
            v62 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)"\n", 1);
            v63 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, (uint64_t)"    ", 4);
            v64 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)"supportingSpeak: ", 17);
            objc_msgSend(v32, "supportingSpeak");
            v205 = (void *)objc_claimAutoreleasedReturnValue();
            PrintStringOrNil(v241, v205, 1);
            if ((v242 & 0x80u) == 0)
              v65 = v241;
            else
              v65 = (NSString *)v241[0];
            if ((v242 & 0x80u) == 0)
              v66 = v242;
            else
              v66 = (uint64_t)v241[1];
            v67 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)v65, v66);
            v68 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)"\n", 1);
            v69 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)"    ", 4);
            v70 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)"printOnly: ", 11);
            objc_msgSend(v32, "printOnly");
            v204 = (void *)objc_claimAutoreleasedReturnValue();
            PrintBoolOrNil(&v238, v204);
            if ((v240 & 0x80u) == 0)
              isa = &v238;
            else
              isa = v238.super.super.isa;
            if ((v240 & 0x80u) == 0)
              v72 = v240;
            else
              v72 = v239;
            v73 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70, (uint64_t)isa, v72);
            v74 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)"\n", 1);
            v75 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v74, (uint64_t)"    ", 4);
            v76 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v75, (uint64_t)"spokenOnly: ", 12);
            objc_msgSend(v32, "spokenOnly");
            v203 = (void *)objc_claimAutoreleasedReturnValue();
            PrintBoolOrNil(&v235, v203);
            if ((v237 & 0x80u) == 0)
              v77 = &v235;
            else
              v77 = v235.super.super.isa;
            if ((v237 & 0x80u) == 0)
              v78 = v237;
            else
              v78 = v236;
            v79 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, (uint64_t)v77, v78);
            v80 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v79, (uint64_t)"\n", 1);
            v81 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v80, (uint64_t)"    ", 4);
            v82 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v81, (uint64_t)"unfilteredFullPrint: ", 21);
            objc_msgSend(v32, "unfilteredFullPrint");
            v202 = (void *)objc_claimAutoreleasedReturnValue();
            PrintStringOrNil(v233, v202, 1);
            if ((v234 & 0x80u) == 0)
              v83 = v233;
            else
              v83 = (NSString *)v233[0];
            if ((v234 & 0x80u) == 0)
              v84 = v234;
            else
              v84 = (uint64_t)v233[1];
            v85 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v82, (uint64_t)v83, v84);
            v86 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v85, (uint64_t)"\n", 1);
            v87 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v86, (uint64_t)"    ", 4);
            v88 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v87, (uint64_t)"unfilteredFullSpeak: ", 21);
            objc_msgSend(v32, "unfilteredFullSpeak");
            v201 = (void *)objc_claimAutoreleasedReturnValue();
            PrintStringOrNil(v231, v201, 1);
            if ((v232 & 0x80u) == 0)
              v89 = v231;
            else
              v89 = (NSString *)v231[0];
            if ((v232 & 0x80u) == 0)
              v90 = v232;
            else
              v90 = (uint64_t)v231[1];
            v91 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v88, (uint64_t)v89, v90);
            v92 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v91, (uint64_t)"\n", 1);
            v93 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v92, (uint64_t)"    ", 4);
            v94 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v93, (uint64_t)"unfilteredSupportingPrint: ", 27);
            objc_msgSend(v32, "unfilteredSupportingPrint");
            v95 = (void *)objc_claimAutoreleasedReturnValue();
            PrintStringOrNil(v229, v95, 1);
            if ((v230 & 0x80u) == 0)
              v96 = v229;
            else
              v96 = (NSString *)v229[0];
            if ((v230 & 0x80u) == 0)
              v97 = v230;
            else
              v97 = (uint64_t)v229[1];
            v98 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v94, (uint64_t)v96, v97);
            v99 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v98, (uint64_t)"\n", 1);
            v100 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v99, (uint64_t)"    ", 4);
            v101 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v100, (uint64_t)"unfilteredSupportingSpeak: ", 27);
            objc_msgSend(v32, "unfilteredSupportingSpeak");
            v102 = (void *)objc_claimAutoreleasedReturnValue();
            PrintStringOrNil(v227, v102, 1);
            if ((v228 & 0x80u) == 0)
              v103 = v227;
            else
              v103 = (NSString *)v227[0];
            if ((v228 & 0x80u) == 0)
              v104 = v228;
            else
              v104 = (uint64_t)v227[1];
            v105 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v101, (uint64_t)v103, v104);
            v106 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v105, (uint64_t)"\n", 1);
            v107 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v106, (uint64_t)"    ", 4);
            v108 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v107, (uint64_t)"redactedFullPrint: ", 19);
            objc_msgSend(v32, "redactedFullPrint");
            v109 = (void *)objc_claimAutoreleasedReturnValue();
            PrintStringOrNil(v225, v109, 1);
            if ((v226 & 0x80u) == 0)
              v110 = v225;
            else
              v110 = (NSString *)v225[0];
            if ((v226 & 0x80u) == 0)
              v111 = v226;
            else
              v111 = (uint64_t)v225[1];
            v112 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v108, (uint64_t)v110, v111);
            v113 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v112, (uint64_t)"\n", 1);
            v114 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v113, (uint64_t)"    ", 4);
            v115 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v114, (uint64_t)"redactedFullSpeak: ", 19);
            objc_msgSend(v32, "redactedFullSpeak");
            v116 = (void *)objc_claimAutoreleasedReturnValue();
            PrintStringOrNil(v223, v116, 1);
            if ((v224 & 0x80u) == 0)
              v117 = v223;
            else
              v117 = (NSString *)v223[0];
            if ((v224 & 0x80u) == 0)
              v118 = v224;
            else
              v118 = (uint64_t)v223[1];
            v119 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v115, (uint64_t)v117, v118);
            v120 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v119, (uint64_t)"\n", 1);
            v121 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v120, (uint64_t)"    ", 4);
            v122 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v121, (uint64_t)"redactedSupportingPrint: ", 25);
            objc_msgSend(v32, "redactedSupportingPrint");
            v123 = (void *)objc_claimAutoreleasedReturnValue();
            PrintStringOrNil(v221, v123, 1);
            if ((v222 & 0x80u) == 0)
              v124 = v221;
            else
              v124 = (NSString *)v221[0];
            if ((v222 & 0x80u) == 0)
              v125 = v222;
            else
              v125 = (uint64_t)v221[1];
            v126 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v122, (uint64_t)v124, v125);
            v127 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v126, (uint64_t)"\n", 1);
            v128 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v127, (uint64_t)"    ", 4);
            v129 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v128, (uint64_t)"redactedSupportingSpeak: ", 25);
            objc_msgSend(v32, "redactedSupportingSpeak");
            v130 = (void *)objc_claimAutoreleasedReturnValue();
            PrintStringOrNil(v219, v130, 1);
            if ((v220 & 0x80u) == 0)
              v131 = v219;
            else
              v131 = (NSString *)v219[0];
            if ((v220 & 0x80u) == 0)
              v132 = v220;
            else
              v132 = (uint64_t)v219[1];
            v133 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v129, (uint64_t)v131, v132);
            v134 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v133, (uint64_t)"\n", 1);
            v135 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v134, (uint64_t)"    ", 4);
            v136 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v135, (uint64_t)"isApprovedForGrading: ", 22);
            if (objc_msgSend(v32, "isApprovedForGrading"))
              v137 = "true";
            else
              v137 = "false";
            std::string::basic_string[abi:ne180100]<0>(v217, v137);
            if ((v218 & 0x80u) == 0)
              v138 = v217;
            else
              v138 = (void **)v217[0];
            if ((v218 & 0x80u) == 0)
              v139 = v218;
            else
              v139 = (uint64_t)v217[1];
            v140 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v136, (uint64_t)v138, v139);
            v141 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v140, (uint64_t)"\n", 1);
            v142 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v141, (uint64_t)"    ", 4);
            v143 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v142, (uint64_t)"----", 4);
            v267 = 10;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v143, (uint64_t)&v267, 1);
            if ((char)v218 < 0)
              operator delete(v217[0]);
            if ((char)v220 < 0)
              operator delete(v219[0]);

            if ((char)v222 < 0)
              operator delete(v221[0]);

            if ((char)v224 < 0)
              operator delete(v223[0]);

            if ((char)v226 < 0)
              operator delete(v225[0]);

            if ((char)v228 < 0)
              operator delete(v227[0]);

            if ((char)v230 < 0)
              operator delete(v229[0]);

            if ((char)v232 < 0)
              operator delete(v231[0]);

            if ((char)v234 < 0)
              operator delete(v233[0]);

            if ((char)v237 < 0)
              operator delete(v235.super.super.isa);

            if ((char)v240 < 0)
              operator delete(v238.super.super.isa);

            if ((char)v242 < 0)
              operator delete(v241[0]);

            if ((char)v244 < 0)
              operator delete(v243[0]);

            if ((char)v246 < 0)
              operator delete(v245[0]);

            if ((char)v248 < 0)
              operator delete(v247[0]);

            if ((char)v255 < 0)
              operator delete(v253);

            if ((char)v262 < 0)
              operator delete(__p);

          }
          v199 = objc_msgSend(v197, "countByEnumeratingWithState:objects:count:", &v249, v269, 16);
        }
        while (v199);
      }

    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v264, (uint64_t)"\n", 1);
    v144 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v264, (uint64_t)"visual: ", 8);
    -[PatternExecutionResult visual](v200, "visual");
    v145 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v145, "base64EncodedStringWithOptions:", 0);
    v146 = (void *)objc_claimAutoreleasedReturnValue();
    PrintStringOrNil(&__p, v146, 0);
    if ((v262 & 0x80u) == 0)
      v147 = &__p;
    else
      v147 = __p;
    if ((v262 & 0x80u) == 0)
      v148 = v262;
    else
      v148 = v261;
    v149 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v144, (uint64_t)v147, v148);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v149, (uint64_t)"\n", 1);
    if ((char)v262 < 0)
      operator delete(__p);

    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v264, (uint64_t)"\n", 1);
    v150 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v264, (uint64_t)"responseMode: ", 14);
    -[PatternExecutionResult responseMode](v200, "responseMode");
    v151 = (void *)objc_claimAutoreleasedReturnValue();
    PrintStringOrNil(&__p, v151, 1);
    if ((v262 & 0x80u) == 0)
      v152 = &__p;
    else
      v152 = __p;
    if ((v262 & 0x80u) == 0)
      v153 = v262;
    else
      v153 = v261;
    v154 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v150, (uint64_t)v152, v153);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v154, (uint64_t)"\n", 1);
    if ((char)v262 < 0)
      operator delete(__p);

    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v264, (uint64_t)"\n", 1);
    v155 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v264, (uint64_t)"printSupportingDialog: ", 23);
    -[PatternExecutionResult printSupportingDialog](v200, "printSupportingDialog");
    v156 = (void *)objc_claimAutoreleasedReturnValue();
    PrintBoolOrNil((NSNumber *)&__p, v156);
    if ((v262 & 0x80u) == 0)
      v157 = &__p;
    else
      v157 = __p;
    if ((v262 & 0x80u) == 0)
      v158 = v262;
    else
      v158 = v261;
    v159 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v155, (uint64_t)v157, v158);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v159, (uint64_t)"\n", 1);
    if ((char)v262 < 0)
      operator delete(__p);

    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v264, (uint64_t)"\n", 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v264, (uint64_t)"patternType: ", 13);
    -[PatternExecutionResult patternType](v200, "patternType");
    v160 = (_QWORD *)std::ostream::operator<<();
    v161 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v160, (uint64_t)" (", 2);
    v162 = -[PatternExecutionResult patternType](v200, "patternType");
    if (v162 > 0x12)
      v163 = "UNKNOWN_PATTERN";
    else
      v163 = off_1E792D1B8[v162];
    std::string::basic_string[abi:ne180100]<0>(&__p, v163);
    if ((v262 & 0x80u) == 0)
      v164 = &__p;
    else
      v164 = __p;
    if ((v262 & 0x80u) == 0)
      v165 = v262;
    else
      v165 = v261;
    v166 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v161, (uint64_t)v164, v165);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v166, (uint64_t)")\n", 2);
    if ((char)v262 < 0)
      operator delete(__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v264, (uint64_t)"\n", 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v264, (uint64_t)"visualInfo:\n", 12);
    v167 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v264, (uint64_t)"    ", 4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v167, (uint64_t)"visualLocation: ", 16);
    -[PatternExecutionResult visualInfo](v200, "visualInfo");
    v168 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v168, "visualLocation");
    v169 = (_QWORD *)std::ostream::operator<<();
    v170 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v169, (uint64_t)" (", 2);
    -[PatternExecutionResult visualInfo](v200, "visualInfo");
    v171 = (void *)objc_claimAutoreleasedReturnValue();
    v172 = objc_msgSend(v171, "visualLocation");
    v173 = "Invalid";
    if (!v172)
      v173 = "SnippetSpace";
    if (v172 == 1)
      v174 = "ConversationSpace";
    else
      v174 = (char *)v173;
    std::string::basic_string[abi:ne180100]<0>(&__p, v174);
    if ((v262 & 0x80u) == 0)
      v175 = &__p;
    else
      v175 = __p;
    if ((v262 & 0x80u) == 0)
      v176 = v262;
    else
      v176 = v261;
    v177 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v170, (uint64_t)v175, v176);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v177, (uint64_t)")\n", 2);
    if ((char)v262 < 0)
      operator delete(__p);

    v178 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v264, (uint64_t)"    ", 4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v178, (uint64_t)"sectionIds (count = ", 20);
    -[PatternExecutionResult visualInfo](v200, "visualInfo");
    v179 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v179, "sectionIds");
    v180 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v180, "count");
    v181 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v181, (uint64_t)"):\n", 3);

    -[PatternExecutionResult visualInfo](v200, "visualInfo");
    v182 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v182, "sectionIds");
    v183 = (void *)objc_claimAutoreleasedReturnValue();
    v184 = v183 == 0;

    if (!v184)
    {
      v215 = 0u;
      v216 = 0u;
      v213 = 0u;
      v214 = 0u;
      -[PatternExecutionResult visualInfo](v200, "visualInfo");
      v185 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v185, "sectionIds");
      v186 = (void *)objc_claimAutoreleasedReturnValue();

      v187 = objc_msgSend(v186, "countByEnumeratingWithState:objects:count:", &v213, v268, 16);
      if (v187)
      {
        v188 = *(_QWORD *)v214;
        do
        {
          for (i = 0; i != v187; ++i)
          {
            if (*(_QWORD *)v214 != v188)
              objc_enumerationMutation(v186);
            v190 = *(void **)(*((_QWORD *)&v213 + 1) + 8 * i);
            v191 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v264, (uint64_t)"    ", 4);
            v192 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v191, (uint64_t)"    ", 4);
            PrintStringOrNil(&__p, v190, 1);
            if ((v262 & 0x80u) == 0)
              v193 = &__p;
            else
              v193 = __p;
            if ((v262 & 0x80u) == 0)
              v194 = v262;
            else
              v194 = v261;
            v195 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v192, (uint64_t)v193, v194);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v195, (uint64_t)"\n", 1);
            if ((char)v262 < 0)
              operator delete(__p);
          }
          v187 = objc_msgSend(v186, "countByEnumeratingWithState:objects:count:", &v213, v268, 16);
        }
        while (v187);
      }

    }
  }
  else
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v264, (uint64_t)"nil", 3);
  }
  std::stringbuf::str();
  siri::dialogengine::Log::LogWithLevel((uint64_t)&__p, 0);
  if ((char)v262 < 0)
    operator delete(__p);
  v263[0] = *MEMORY[0x1E0DE4F50];
  v196 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v263 + *(_QWORD *)(v263[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v264[0] = v196;
  v264[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v265 < 0)
    operator delete((void *)v264[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1C3B8D80C](&v266);

}

void sub_1BF902438(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  void *v12;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&STACK[0x2F0]);
  _Unwind_Resume(a1);
}

id NSErrorFromString(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t *v7;
  void *v8;
  uint64_t *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  _QWORD v17[2];
  _QWORD v18[3];

  v18[2] = *MEMORY[0x1E0C80C00];
  if (*((char *)a2 + 23) < 0)
  {
    v3 = a2[1];
    if (v3 == 7)
    {
      if (*(_DWORD *)*a2 != 1667462515 || *(_DWORD *)(*a2 + 3) != 1936942435)
        goto LABEL_17;
      return 0;
    }
  }
  else
  {
    v3 = *((unsigned __int8 *)a2 + 23);
    if ((_DWORD)v3 == 7 && *(_DWORD *)a2 == 1667462515 && *(_DWORD *)((char *)a2 + 3) == 1936942435)
      return 0;
  }
  if (!v3)
    return 0;
LABEL_17:
  if (*((char *)a1 + 23) >= 0)
    v7 = a1;
  else
    v7 = (uint64_t *)*a1;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (*((char *)a2 + 23) >= 0)
    v9 = a2;
  else
    v9 = (uint64_t *)*a2;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v17[0] = *MEMORY[0x1E0CB2D50];
  objc_msgSend(MEMORY[0x1E0CB34D0], "mainBundle");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "localizedStringForKey:value:table:", v8, &stru_1E793AF80, 0);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v18[0] = v12;
  v17[1] = *MEMORY[0x1E0CB2D68];
  objc_msgSend(MEMORY[0x1E0CB34D0], "mainBundle");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "localizedStringForKey:value:table:", v10, &stru_1E793AF80, 0);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v18[1] = v14;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v18, v17, 2);
  v15 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", CFSTR("com.apple.siri.DialogEngine"), 0, v15);
  v16 = (void *)objc_claimAutoreleasedReturnValue();

  return v16;
}

void sub_1BF902B80(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void VariableFromNSDictionary(uint64_t *a1, const std::string *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  id v12;
  void *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23[2];
  uint64_t v24;
  uint64_t v25;
  std::string __p;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  _BYTE v31[128];
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  *a1 = 0;
  a1[1] = 0;
  if (v5)
  {
    std::allocate_shared[abi:ne180100]<siri::dialogengine::VariableObject,std::allocator<siri::dialogengine::VariableObject>,std::string const&,void>(&__p, a2);
    *(_OWORD *)a1 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    v27 = 0u;
    v28 = 0u;
    v29 = 0u;
    v30 = 0u;
    v6 = v5;
    v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v27, v31, 16);
    if (v7)
    {
      v8 = *(_QWORD *)v28;
      do
      {
        v9 = 0;
        do
        {
          if (*(_QWORD *)v28 != v8)
            objc_enumerationMutation(v6);
          v10 = *(void **)(*((_QWORD *)&v27 + 1) + 8 * v9);
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
          {
            v12 = objc_retainAutorelease(v10);
            std::string::basic_string[abi:ne180100]<0>(&__p, (char *)objc_msgSend(v12, "UTF8String"));
            objc_msgSend(v6, "objectForKey:", v12);
            v13 = (void *)objc_claimAutoreleasedReturnValue();
            VariableFromNSObject((uint64_t)&v24, &__p, v13);
            if (v24)
            {
              v14 = *a1;
              v15 = (std::__shared_weak_count *)v25;
              v23[0] = v24;
              v23[1] = v25;
              if (v25)
              {
                v16 = (unint64_t *)(v25 + 8);
                do
                  v17 = __ldxr(v16);
                while (__stxr(v17 + 1, v16));
              }
              siri::dialogengine::VariableObject::AddProperty(v14, v23);
              if (v15)
              {
                p_shared_owners = (unint64_t *)&v15->__shared_owners_;
                do
                  v19 = __ldaxr(p_shared_owners);
                while (__stlxr(v19 - 1, p_shared_owners));
                if (!v19)
                {
                  ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
                  std::__shared_weak_count::__release_weak(v15);
                }
              }
            }
            v20 = (std::__shared_weak_count *)v25;
            if (v25)
            {
              v21 = (unint64_t *)(v25 + 8);
              do
                v22 = __ldaxr(v21);
              while (__stlxr(v22 - 1, v21));
              if (!v22)
              {
                ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
                std::__shared_weak_count::__release_weak(v20);
              }
            }

            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
          }
          else
          {
            siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Pattern parameter dictionary has a non-string key", v11);
          }
          ++v9;
        }
        while (v9 != v7);
        v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v27, v31, 16);
      }
      while (v7);
    }

  }
}

void sub_1BF902E28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  void *v18;
  uint64_t v19;
  void *v20;

  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](v19);
  _Unwind_Resume(a1);
}

uint64_t PatternTypeFromName(uint64_t a1)
{
  uint64_t *p_p;
  uint64_t v4;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *__p;
  _BYTE v28[14];
  char v29;

  siri::dialogengine::StringToLower(a1, (uint64_t)&__p);
  if ((v29 & 0x80000000) == 0)
  {
    p_p = (uint64_t *)&__p;
    switch(v29)
    {
      case 16:
        if (__p != (void *)0x2E6E726574746170 || *(_QWORD *)v28 != 0x746573656C626174)
          goto LABEL_96;
        goto LABEL_15;
      case 17:
        if (__p != (void *)0x2E6E726574746170 || *(_QWORD *)v28 != 0x6573746C75736572 || v28[8] != 116)
          goto LABEL_96;
        goto LABEL_60;
      case 20:
        if (__p != (void *)0x2E6E726574746170
          || *(_QWORD *)v28 != 0x6572656C706D6973
          || *(_DWORD *)&v28[8] != 1953265011)
        {
          goto LABEL_96;
        }
        goto LABEL_69;
      case 21:
        if (__p != (void *)0x2E6E726574746170
          || *(_QWORD *)v28 != 0x7373736563637573
          || *(_QWORD *)&v28[5] != 0x7375746174737373)
        {
          goto LABEL_96;
        }
        goto LABEL_78;
      case 22:
        if (__p != (void *)0x2E6E726574746170
          || *(_QWORD *)v28 != 0x64656C6961746564
          || *(_QWORD *)&v28[6] != 0x746C757365726465)
        {
          goto LABEL_96;
        }
        goto LABEL_87;
      case 23:
        goto LABEL_89;
      default:
        goto LABEL_96;
    }
  }
  switch(*(_QWORD *)v28)
  {
    case 0x10:
      if (*(_QWORD *)__p != 0x2E6E726574746170 || *((_QWORD *)__p + 1) != 0x746573656C626174)
        goto LABEL_96;
LABEL_15:
      v4 = 2;
      break;
    case 0x11:
      if (*(_QWORD *)__p != 0x2E6E726574746170
        || *((_QWORD *)__p + 1) != 0x6573746C75736572
        || *((_BYTE *)__p + 16) != 116)
      {
        goto LABEL_96;
      }
LABEL_60:
      v4 = 1;
      break;
    case 0x14:
      if (*(_QWORD *)__p != 0x2E6E726574746170
        || *((_QWORD *)__p + 1) != 0x6572656C706D6973
        || *((_DWORD *)__p + 4) != 1953265011)
      {
        goto LABEL_96;
      }
LABEL_69:
      v4 = 3;
      break;
    case 0x15:
      if (*(_QWORD *)__p != 0x2E6E726574746170
        || *((_QWORD *)__p + 1) != 0x7373736563637573
        || *(_QWORD *)((char *)__p + 13) != 0x7375746174737373)
      {
        goto LABEL_96;
      }
LABEL_78:
      v4 = 5;
      break;
    case 0x16:
      if (*(_QWORD *)__p != 0x2E6E726574746170
        || *((_QWORD *)__p + 1) != 0x64656C6961746564
        || *(_QWORD *)((char *)__p + 14) != 0x746C757365726465)
      {
        goto LABEL_96;
      }
LABEL_87:
      v4 = 4;
      break;
    case 0x17:
      p_p = (uint64_t *)__p;
LABEL_89:
      v21 = *p_p;
      v22 = p_p[1];
      v23 = *(uint64_t *)((char *)p_p + 15);
      if (v21 != 0x2E6E726574746170 || v22 != 0x656C6C65636E6163 || v23 != 0x7375746174736465)
        goto LABEL_96;
      v4 = 6;
      break;
    default:
LABEL_96:
      if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&__p, "pattern.errorstatus"))
      {
        v4 = 7;
      }
      else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&__p, "pattern.progresssstatus"))
      {
        v4 = 8;
      }
      else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&__p, "pattern.disambiguationclarification"))
      {
        v4 = 9;
      }
      else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&__p, "pattern.openendedclarification"))
      {
        v4 = 10;
      }
      else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&__p, "pattern.yesnoclarification"))
      {
        v4 = 11;
      }
      else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&__p, "pattern.simpledisambiguationclarification"))
      {
        v4 = 12;
      }
      else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&__p, "pattern.detaileddisambiguationclarification"))
      {
        v4 = 13;
      }
      else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&__p, "pattern.multilevelresultset"))
      {
        v4 = 14;
      }
      else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&__p, "prompt.DetailedDisambiguationPrompt"))
      {
        v4 = 15;
      }
      else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&__p, "prompt.OpenEndedPrompt"))
      {
        v4 = 16;
      }
      else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&__p, "prompt.SimpleDisambiguationPrompt"))
      {
        v4 = 17;
      }
      else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&__p, "prompt.YesNoPrompt"))
      {
        v4 = 18;
      }
      else
      {
        v4 = 0;
      }
      break;
  }
  if (v29 < 0)
    operator delete(__p);
  return v4;
}

uint64_t std::__split_buffer<CATResult * {__strong}>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;

  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<SnippetUI::Response_Section>::TypeHandler>(int **this, uint64_t a2)
{
  std::string *v4;
  int v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  const SnippetUI::Response_Section **v13;
  SnippetUI::Response_Section **v14;
  const SnippetUI::Response_Section *v15;
  const SnippetUI::Response_Section *v16;
  SnippetUI::Response_Section *v17;
  google::protobuf::internal::ArenaImpl *v18;
  int v19;
  uint64_t v20;
  SnippetUI::Response_Section **v21;
  const SnippetUI::Response_Section **v22;
  const SnippetUI::Response_Section *v23;
  SnippetUI::Response_Section *v24;
  int v25;
  int *v26;
  char v27;
  std::string v28[2];

  if ((int **)a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1632);
    v4 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
  }
  v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    v6 = *(_QWORD *)(a2 + 16);
    v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)this, *(_DWORD *)(a2 + 8));
    v8 = v7;
    v9 = *this[2];
    v10 = *((int *)this + 2);
    v11 = v9 - v10;
    if ((int)v9 - (int)v10 >= v5)
      v12 = v5;
    else
      v12 = v11;
    if ((int)v12 >= 1)
    {
      v13 = (const SnippetUI::Response_Section **)(v6 + 8);
      v14 = (SnippetUI::Response_Section **)v7;
      do
      {
        v16 = *v13++;
        v15 = v16;
        v17 = *v14++;
        google::protobuf::internal::GenericTypeHandler<SnippetUI::Response_Section>::Merge(v15, v17);
        --v12;
      }
      while (v12);
    }
    if (v11 < v5)
    {
      v18 = (google::protobuf::internal::ArenaImpl *)*this;
      v19 = v10 + v5 - v9;
      v20 = 8 * v9 - 8 * v10;
      v21 = (SnippetUI::Response_Section **)((char *)v8 + v20);
      v22 = (const SnippetUI::Response_Section **)(v20 + v6 + 8);
      do
      {
        v23 = *v22++;
        v24 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Response_Section>(v18);
        google::protobuf::internal::GenericTypeHandler<SnippetUI::Response_Section>::Merge(v23, v24);
        *v21++ = v24;
        --v19;
      }
      while (v19);
    }
    v25 = *((_DWORD *)this + 2) + v5;
    *((_DWORD *)this + 2) = v25;
    v26 = this[2];
    if (*v26 < v25)
      *v26 = v25;
  }
}

void sub_1BF903548(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<SnippetUI::Response_Section>::TypeHandler>(uint64_t a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1538);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1539);
    v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (current_size_): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2 + 8);
}

void sub_1BF90361C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<SnippetUI::Response_Component>::TypeHandler>(int **this, uint64_t a2)
{
  std::string *v4;
  int v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  const SnippetUI::Response_Component **v13;
  SnippetUI::Response_Component **v14;
  const SnippetUI::Response_Component *v15;
  const SnippetUI::Response_Component *v16;
  SnippetUI::Response_Component *v17;
  google::protobuf::internal::ArenaImpl *v18;
  int v19;
  uint64_t v20;
  SnippetUI::Response_Component **v21;
  const SnippetUI::Response_Component **v22;
  const SnippetUI::Response_Component *v23;
  SnippetUI::Response_Component *v24;
  int v25;
  int *v26;
  char v27;
  std::string v28[2];

  if ((int **)a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1632);
    v4 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
  }
  v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    v6 = *(_QWORD *)(a2 + 16);
    v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)this, *(_DWORD *)(a2 + 8));
    v8 = v7;
    v9 = *this[2];
    v10 = *((int *)this + 2);
    v11 = v9 - v10;
    if ((int)v9 - (int)v10 >= v5)
      v12 = v5;
    else
      v12 = v11;
    if ((int)v12 >= 1)
    {
      v13 = (const SnippetUI::Response_Component **)(v6 + 8);
      v14 = (SnippetUI::Response_Component **)v7;
      do
      {
        v16 = *v13++;
        v15 = v16;
        v17 = *v14++;
        google::protobuf::internal::GenericTypeHandler<SnippetUI::Response_Component>::Merge(v15, v17);
        --v12;
      }
      while (v12);
    }
    if (v11 < v5)
    {
      v18 = (google::protobuf::internal::ArenaImpl *)*this;
      v19 = v10 + v5 - v9;
      v20 = 8 * v9 - 8 * v10;
      v21 = (SnippetUI::Response_Component **)((char *)v8 + v20);
      v22 = (const SnippetUI::Response_Component **)(v20 + v6 + 8);
      do
      {
        v23 = *v22++;
        v24 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Response_Component>(v18);
        google::protobuf::internal::GenericTypeHandler<SnippetUI::Response_Component>::Merge(v23, v24);
        *v21++ = v24;
        --v19;
      }
      while (v19);
    }
    v25 = *((_DWORD *)this + 2) + v5;
    *((_DWORD *)this + 2) = v25;
    v26 = this[2];
    if (*v26 < v25)
      *v26 = v25;
  }
}

void sub_1BF903790(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void std::vector<CATResult * {__strong}>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  void *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = (void *)*((_QWORD *)v4 - 1);
        v4 -= 8;

      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void google::protobuf::internal::GenericTypeHandler<SnippetUI::Response_Component>::Merge(const SnippetUI::Response_Component *a1, SnippetUI::Response_Component *a2)
{
  SnippetUI::Response_Component::MergeFrom(a2, a1);
}

void google::protobuf::internal::GenericTypeHandler<SnippetUI::Response_Section>::Merge(const SnippetUI::Response_Section *a1, SnippetUI::Response_Section *a2)
{
  SnippetUI::Response_Section::MergeFrom(a2, a1);
}

void VariableToNSObjectVisitor::~VariableToNSObjectVisitor(id *this)
{

}

{

  JUMPOUT(0x1C3B8D890);
}

void VariableToNSObjectVisitor::Visit(VariableToNSObjectVisitor *this, siri::dialogengine::VariableArray *a2)
{
  void *v4;
  void *v5;
  id v6;
  unint64_t v7;
  uint64_t v8;
  __n128 v9;
  unint64_t *v10;
  unint64_t v11;
  id v12;
  unint64_t *v13;
  unint64_t v14;
  void *v15;
  id v16;
  __n128 v17;
  void (**v18)(VariableToNSObjectVisitor *__hidden);
  id v19;
  id v20;

  v4 = (void *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;

  v5 = (void *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;

  VariableToNSObjectVisitor::GetKeyFromVarName(this, a2);
  v6 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v7 = 0;
  v19 = 0;
  v20 = 0;
  v18 = &off_1E792D118;
  while (1)
  {
    v8 = *((_QWORD *)a2 + 9);
    if (v7 >= (*((_QWORD *)a2 + 10) - v8) >> 4)
      break;
    v9 = *(__n128 *)(v8 + 16 * v7);
    v17 = v9;
    if (v9.n128_u64[1])
    {
      v10 = (unint64_t *)(v9.n128_u64[1] + 8);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
    if (v9.n128_u64[0])
      (*(void (**)(unint64_t, void (***)(VariableToNSObjectVisitor *__hidden), __n128))(*(_QWORD *)v9.n128_u64[0] + 16))(v9.n128_u64[0], &v18, v9);
    v12 = v20;
    objc_msgSend(v6, "addObject:", v12, v17.n128_u64[0]);

    if (v17.n128_u64[1])
    {
      v13 = (unint64_t *)(v17.n128_u64[1] + 8);
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        (*(void (**)(unint64_t))(*(_QWORD *)v17.n128_u64[1] + 16))(v17.n128_u64[1]);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v17.n128_u64[1]);
      }
    }
    ++v7;
  }
  v15 = (void *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = v6;
  v16 = v6;

}

void sub_1BF9039F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, id a13, id a14)
{
  void *v14;

  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void VariableToNSObjectVisitor::Visit(VariableToNSObjectVisitor *this, siri::dialogengine::VariableBoolean *a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;

  v4 = (void *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;

  v5 = (void *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;

  VariableToNSObjectVisitor::GetKeyFromVarName(this, a2);
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", *((unsigned __int8 *)a2 + 66));
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = (void *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = v6;

}

void VariableToNSObjectVisitor::Visit(VariableToNSObjectVisitor *this, siri::dialogengine::VariableNumber *a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;

  v4 = (void *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;

  v5 = (void *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;

  VariableToNSObjectVisitor::GetKeyFromVarName(this, a2);
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", *((double *)a2 + 9));
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = (void *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = v6;

}

void VariableToNSObjectVisitor::Visit(VariableToNSObjectVisitor *this, const void ***a2)
{
  void *v4;
  void *v5;
  id v6;
  _QWORD *v7;
  uint64_t v8;
  id v9;
  id v10;
  _QWORD *v11;
  _QWORD **v12;
  BOOL v13;
  void *v14;
  id v15;
  _QWORD **v16;
  _QWORD *v17[2];
  void (**v18)(VariableToNSObjectVisitor *__hidden);
  id v19;
  id v20;

  v4 = (void *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;

  v5 = (void *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;

  VariableToNSObjectVisitor::GetKeyFromVarName(this, (siri::dialogengine::Variable *)a2);
  v6 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v19 = 0;
  v20 = 0;
  v18 = &off_1E792D118;
  std::map<std::string,std::shared_ptr<siri::dialogengine::Variable>>::map[abi:ne180100]((uint64_t)&v16, a2 + 9);
  v7 = v16;
  if (v16 != v17)
  {
    do
    {
      v8 = v7[7];
      if (v8)
      {
        (*(void (**)(uint64_t, void (***)(VariableToNSObjectVisitor *__hidden)))(*(_QWORD *)v8 + 16))(v8, &v18);
        v9 = v20;
        v10 = v19;
        objc_msgSend(v6, "setObject:forKey:", v9, v10);

      }
      v11 = (_QWORD *)v7[1];
      if (v11)
      {
        do
        {
          v12 = (_QWORD **)v11;
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (_QWORD **)v7[2];
          v13 = *v12 == v7;
          v7 = v12;
        }
        while (!v13);
      }
      v7 = v12;
    }
    while (v12 != v17);
  }
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(v17[0]);
  v14 = (void *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = v6;
  v15 = v6;

}

void sub_1BF903C34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;

  _Unwind_Resume(a1);
}

void VariableToNSObjectVisitor::Visit(VariableToNSObjectVisitor *this, siri::dialogengine::VariableString *a2)
{
  void *v4;
  void *v5;
  void *v6;
  std::string *p_p;
  uint64_t v8;
  void *v9;
  std::string __p;

  v4 = (void *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;

  v5 = (void *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;

  VariableToNSObjectVisitor::GetKeyFromVarName(this, a2);
  v6 = (void *)MEMORY[0x1E0CB3940];
  if (*((char *)a2 + 95) < 0)
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)a2 + 9), *((_QWORD *)a2 + 10));
  else
    __p = *(std::string *)((_BYTE *)a2 + 3);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  objc_msgSend(v6, "stringWithUTF8String:", p_p, *(_OWORD *)&__p.__r_.__value_.__l.__data_, __p.__r_.__value_.__r.__words[2]);
  v8 = objc_claimAutoreleasedReturnValue();
  v9 = (void *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = v8;

  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1BF903D3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void VariableToNSObjectVisitor::GetKeyFromVarName(VariableToNSObjectVisitor *this, siri::dialogengine::Variable *a2)
{
  void *v3;
  std::string *p_p;
  uint64_t v5;
  void *v6;
  std::string __p;

  v3 = (void *)MEMORY[0x1E0CB3940];
  if (*((char *)a2 + 31) < 0)
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)a2 + 1), *((_QWORD *)a2 + 2));
  else
    __p = *(std::string *)((char *)a2 + 8);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  objc_msgSend(v3, "stringWithUTF8String:", p_p, *(_OWORD *)&__p.__r_.__value_.__l.__data_, __p.__r_.__value_.__r.__words[2]);
  v5 = objc_claimAutoreleasedReturnValue();
  v6 = (void *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = v5;

  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1BF903DF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<siri::dialogengine::PatternContext>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E792D178;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<siri::dialogengine::PatternContext>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E792D178;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B8D890);
}

void std::__shared_ptr_emplace<siri::dialogengine::PatternContext>::__on_zero_shared(_QWORD **a1)
{
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 12));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1[10]);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1[7]);
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(a1[4]);
}

_QWORD *std::allocate_shared[abi:ne180100]<siri::dialogengine::VariableObject,std::allocator<siri::dialogengine::VariableObject>,std::string const&,void>(_QWORD *a1, const std::string *a2)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x78uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_1E7936190;
  result = siri::dialogengine::VariableObject::VariableObject(v4 + 3, a2);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void sub_1BF903ED8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void VariableFromNSObject(uint64_t a1, const std::string *a2, void *a3)
{
  id v5;
  char *v6;
  _QWORD *v7;
  __int128 v8;
  id v9;
  char v10;
  _QWORD *v11;
  uint64_t v12;
  double v13;
  double v14;
  __int128 v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  _QWORD v30[2];
  uint64_t v31;
  std::__shared_weak_count *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  void *__p[2];
  char v39;
  _BYTE v40[128];
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v6 = (char *)objc_msgSend(objc_retainAutorelease(v5), "UTF8String");
    v7 = operator new(0x108uLL);
    v7[1] = 0;
    v7[2] = 0;
    *v7 = &off_1E793A548;
    std::string::basic_string[abi:ne180100]<0>(__p, v6);
    siri::dialogengine::VariableString::VariableString((uint64_t)(v7 + 3), a2, (uint64_t)__p);
    if (v39 < 0)
      operator delete(__p[0]);
    *(_QWORD *)&v8 = v7 + 3;
    *((_QWORD *)&v8 + 1) = v7;
    goto LABEL_5;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v9 = v5;
    objc_getClass("__NSCFBoolean");
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      v10 = objc_msgSend(v9, "BOOLValue");
      v11 = operator new(0x60uLL);
      v11[1] = 0;
      v11[2] = 0;
      *v11 = &off_1E793A478;
      v12 = siri::dialogengine::VariableBoolean::VariableBoolean((uint64_t)(v11 + 3), a2, v10);
    }
    else
    {
      objc_msgSend(v9, "doubleValue");
      v14 = v13;
      v11 = operator new(0x68uLL);
      v11[1] = 0;
      v11[2] = 0;
      *v11 = &off_1E793A4E0;
      v12 = siri::dialogengine::VariableNumber::VariableNumber((uint64_t)(v11 + 3), a2, v14);
    }
    *(_QWORD *)&v15 = v12;
    *((_QWORD *)&v15 + 1) = v11;
    *(_OWORD *)a1 = v15;

  }
  else
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      VariableFromNSDictionary(__p, a2, v5);
      v8 = *(_OWORD *)__p;
LABEL_5:
      *(_OWORD *)a1 = v8;
      goto LABEL_13;
    }
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      std::allocate_shared[abi:ne180100]<siri::dialogengine::VariableArray,std::allocator<siri::dialogengine::VariableArray>,std::string const&,void>(&v37, a2);
      v35 = 0u;
      v36 = 0u;
      v33 = 0u;
      v34 = 0u;
      v16 = v5;
      v17 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v33, v40, 16);
      if (v17)
      {
        v18 = *(_QWORD *)v34;
        do
        {
          v19 = 0;
          do
          {
            if (*(_QWORD *)v34 != v18)
              objc_enumerationMutation(v16);
            v20 = *(_QWORD *)(*((_QWORD *)&v33 + 1) + 8 * v19);
            std::string::basic_string[abi:ne180100]<0>(__p, "");
            VariableFromNSObject(&v31, __p, v20);
            if (v39 < 0)
              operator delete(__p[0]);
            if (v31)
            {
              v21 = (_QWORD *)v37;
              v22 = v32;
              v30[0] = v31;
              v30[1] = v32;
              if (v32)
              {
                p_shared_owners = (unint64_t *)&v32->__shared_owners_;
                do
                  v24 = __ldxr(p_shared_owners);
                while (__stxr(v24 + 1, p_shared_owners));
              }
              siri::dialogengine::VariableArray::AddItem(v21, v30);
              if (v22)
              {
                v25 = (unint64_t *)&v22->__shared_owners_;
                do
                  v26 = __ldaxr(v25);
                while (__stlxr(v26 - 1, v25));
                if (!v26)
                {
                  ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
                  std::__shared_weak_count::__release_weak(v22);
                }
              }
            }
            v27 = v32;
            if (v32)
            {
              v28 = (unint64_t *)&v32->__shared_owners_;
              do
                v29 = __ldaxr(v28);
              while (__stlxr(v29 - 1, v28));
              if (!v29)
              {
                ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
                std::__shared_weak_count::__release_weak(v27);
              }
            }
            ++v19;
          }
          while (v19 != v17);
          v17 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v33, v40, 16);
        }
        while (v17);
      }

      v8 = v37;
      goto LABEL_5;
    }
    std::operator+<char>();
    siri::dialogengine::Log::LogWithLevel((uint64_t)__p, 1u);
    if (v39 < 0)
      operator delete(__p[0]);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
  }
LABEL_13:

}

void sub_1BF9042B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  void *v28;

  if (a28 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<siri::dialogengine::VariableArray,std::allocator<siri::dialogengine::VariableArray>,std::string const&,void>(_QWORD *a1, const std::string *a2)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x78uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_1E79361E0;
  result = siri::dialogengine::VariableArray::VariableArray(v4 + 3, a2);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void sub_1BF9043E4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<siri::dialogengine::VariableArray>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E79361E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<siri::dialogengine::VariableArray>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E79361E0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B8D890);
}

uint64_t std::__shared_ptr_emplace<siri::dialogengine::VariableArray>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<siri::dialogengine::VariableNumber>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E793A4E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<siri::dialogengine::VariableNumber>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E793A4E0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B8D890);
}

uint64_t std::__shared_ptr_emplace<siri::dialogengine::VariableNumber>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void PrintStringOrNil(NSString *a1, void *a2, int a3)
{
  id v5;
  std::string *v6;
  __int128 v7;
  std::string *v8;
  __int128 v9;
  std::string v10;
  std::string v11;

  v5 = a2;
  if (v5)
  {
    if (a3)
    {
      std::string::basic_string[abi:ne180100]<0>(&v10, (char *)objc_msgSend(objc_retainAutorelease(v5), "UTF8String"));
      v6 = std::string::insert(&v10, 0, "[");
      v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
      v11.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v11.__r_.__value_.__l.__data_ = v7;
      v6->__r_.__value_.__l.__size_ = 0;
      v6->__r_.__value_.__r.__words[2] = 0;
      v6->__r_.__value_.__r.__words[0] = 0;
      v8 = std::string::append(&v11, "]");
      v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
      a1[2] = (NSString)v8->__r_.__value_.__r.__words[2];
      *(_OWORD *)a1 = v9;
      v8->__r_.__value_.__l.__size_ = 0;
      v8->__r_.__value_.__r.__words[2] = 0;
      v8->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v11.__r_.__value_.__l.__data_);
      if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v10.__r_.__value_.__l.__data_);
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(a1, (char *)objc_msgSend(objc_retainAutorelease(v5), "UTF8String"));
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a1, "nil");
  }

}

void sub_1BF904598(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);

  _Unwind_Resume(a1);
}

void PrintBoolOrNil(NSNumber *a1, void *a2)
{
  id v3;
  char *v4;
  id v5;

  v3 = a2;
  v5 = v3;
  if (v3)
  {
    if (objc_msgSend(v3, "BOOLValue"))
      v4 = "true";
    else
      v4 = "false";
  }
  else
  {
    v4 = "nil";
  }
  std::string::basic_string[abi:ne180100]<0>(a1, v4);

}

void sub_1BF904640(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

id PatternLoader(uint64_t a1)
{
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;
  id v9;
  void (**v10)(id, id, _QWORD);
  id v11;
  id v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;
  void *v20;
  std::string *v21;
  void *v22;
  __int128 *v23;
  std::string::size_type size;
  std::string *v25;
  __int128 v26;
  void *v27;
  size_t v28;
  void *v29;
  int v30;
  char *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  size_t v35;
  void *v36;
  int v37;
  double *v38;
  unint64_t *v39;
  unint64_t v40;
  void *v41;
  unint64_t *v42;
  unint64_t v43;
  size_t v44;
  void *v45;
  int v46;
  unsigned __int8 *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t *v50;
  std::string *v51;
  __int128 v52;
  std::string *v53;
  std::string::size_type v54;
  std::string *v55;
  __int128 v56;
  std::string *v57;
  __int128 v58;
  void *v59;
  std::string *p_s1;
  unint64_t *p_shared_owners;
  std::string *v62;
  void *v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  __int128 *v67;
  __int128 *v68;
  BOOL v69;
  void *v70;
  __int128 *v71;
  std::string *v72;
  void *v73;
  std::string *p_s;
  void *v75;
  __int128 *v76;
  __int128 *v77;
  void *v78;
  __int128 *v79;
  void *v80;
  void *v81;
  std::string *v82;
  void *v83;
  void *v84;
  std::string *v85;
  void *v86;
  void *v87;
  std::string *v88;
  void *v89;
  void *v90;
  std::string *v91;
  void *v92;
  void *v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  __int128 *v97;
  __int128 *v98;
  unint64_t *v99;
  unint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  void *v105;
  id v106;
  id v107;
  void *v108;
  void *v109;
  __n128 v110;
  __n128 v111;
  void *v112[2];
  char v113;
  void *v114[2];
  char v115;
  std::string *v116[3];
  std::string v117;
  std::string v118;
  std::string v119;
  std::string __s1;
  void *lpsrc;
  std::string::size_type v122;
  std::string v123;
  std::string v124;
  std::string v125;
  std::string __s;
  __int128 *v127;
  _QWORD *v128[2];
  void *__p[2];
  char v130;

  v1 = (void *)MEMORY[0x1E0C80A78](a1);
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v8 = v1;
  v9 = v7;
  v10 = v3;
  v11 = (id)objc_opt_new();
  if (v8)
  {
    +[DEExecutor bundleTemplateDir:](DEExecutor, "bundleTemplateDir:", v8);
    v12 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)objc_msgSend(v12, "UTF8String"));
    siri::dialogengine::GetTemplateDirs((uint64_t)__p, +[CATCommonApi UpdatesEnabled:](CATCommonApi, "UpdatesEnabled:", v5), (uint64_t)v116);
    if (v130 < 0)
      operator delete(__p[0]);

    std::string::basic_string[abi:ne180100]<0>(v114, (char *)objc_msgSend(objc_retainAutorelease(v9), "UTF8String"));
    siri::dialogengine::Context::Context((siri::dialogengine::Context *)v112, v116);
    siri::dialogengine::PatternFile::LoadFromId((uint64_t *)v112, (uint64_t)v114, 1, &v111);
    v13 = v111.n128_u64[0];
    if (v111.n128_u64[0])
    {
      v110 = v111;
      if (v111.n128_u64[1])
      {
        v14 = (unint64_t *)(v111.n128_u64[1] + 8);
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
      }
      siri::dialogengine::Context::Context((siri::dialogengine::Context *)__p);
      v16 = (void *)objc_opt_new();
      v17 = (void *)MEMORY[0x1E0CB3940];
      v108 = v16;
      if (*(char *)(v13 + 87) < 0)
        std::string::__init_copy_ctor_external(&v125, *(const std::string::value_type **)(v13 + 64), *(_QWORD *)(v13 + 72));
      else
        v125 = *(std::string *)(v13 + 64);
      if ((v125.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v21 = &v125;
      else
        v21 = (std::string *)v125.__r_.__value_.__r.__words[0];
      objc_msgSend(v17, "stringWithUTF8String:", v21);
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "setPatternId:", v22);

      if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v125.__r_.__value_.__l.__data_);
      if (*(char *)(v13 + 135) < 0)
        std::string::__init_copy_ctor_external(&v125, *(const std::string::value_type **)(v13 + 112), *(_QWORD *)(v13 + 120));
      else
        v125 = *(std::string *)(v13 + 112);
      objc_msgSend(v16, "setPatternType:", PatternTypeFromName((uint64_t)&v125));
      if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v125.__r_.__value_.__l.__data_);
      v109 = (void *)objc_opt_new();
      v105 = v11;
      v106 = v9;
      v107 = v8;
      std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)&v127, (const void ***)(v13 + 160));
      v23 = v127;
      if (v127 != (__int128 *)v128)
      {
        do
        {
          std::pair<std::string const,std::string>::pair[abi:ne180100](&v125, v23 + 2);
          if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v124, v125.__r_.__value_.__l.__data_, v125.__r_.__value_.__l.__size_);
          else
            v124 = v125;
          if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v123, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
          else
            v123 = __s;
          size = HIBYTE(v124.__r_.__value_.__r.__words[2]);
          if ((v124.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            size = v124.__r_.__value_.__l.__size_;
          if (!size)
            goto LABEL_141;
          std::string::basic_string[abi:ne180100]<0>(&__s1, "");
          std::string::basic_string[abi:ne180100]<0>(&v119, "");
          siri::dialogengine::ResolveValue((uint64_t)__p, (uint64_t)&__s, 1, (uint64_t)&__s1, (uint64_t)&v119, (uint64_t *)&lpsrc);
          if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v119.__r_.__value_.__l.__data_);
          if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__s1.__r_.__value_.__l.__data_);
          if (!lpsrc)
          {
            std::operator+<char>();
            v25 = std::string::append(&v119, "'");
            v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
            __s1.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
            *(_OWORD *)&__s1.__r_.__value_.__l.__data_ = v26;
            v25->__r_.__value_.__l.__size_ = 0;
            v25->__r_.__value_.__r.__words[2] = 0;
            v25->__r_.__value_.__r.__words[0] = 0;
            siri::dialogengine::Log::LogWithLevel((uint64_t)&__s1, 3u);
            if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__s1.__r_.__value_.__l.__data_);
            if ((SHIBYTE(v119.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_136;
            v27 = (void *)v119.__r_.__value_.__r.__words[0];
            goto LABEL_116;
          }
          if (*((char *)lpsrc + 55) < 0)
            std::string::__init_copy_ctor_external(&__s1, *((const std::string::value_type **)lpsrc + 4), *((_QWORD *)lpsrc + 5));
          else
            __s1 = *(std::string *)((char *)lpsrc + 32);
          v28 = strlen(siri::dialogengine::TYPE_STRING[0]);
          if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
          {
            if (v28 == __s1.__r_.__value_.__l.__size_)
            {
              if (v28 == -1)
                std::string::__throw_out_of_range[abi:ne180100]();
              v29 = (void *)__s1.__r_.__value_.__r.__words[0];
              v30 = memcmp(__s1.__r_.__value_.__l.__data_, siri::dialogengine::TYPE_STRING[0], v28);
              operator delete(v29);
              if (!v30)
              {
LABEL_59:
                if (lpsrc
                {
                  v32 = (std::__shared_weak_count *)v122;
                  v119.__r_.__value_.__r.__words[0] = (std::string::size_type)v31;
                  v119.__r_.__value_.__l.__size_ = v122;
                  if (v122)
                  {
                    v33 = (unint64_t *)(v122 + 8);
                    do
                      v34 = __ldxr(v33);
                    while (__stxr(v34 + 1, v33));
                  }
                }
                else
                {
                  v32 = 0;
                  v31 = 0;
                  *(_OWORD *)&v119.__r_.__value_.__l.__data_ = 0uLL;
                }
                v59 = (void *)MEMORY[0x1E0CB3940];
                if (v31[95] < 0)
                  std::string::__init_copy_ctor_external(&__s1, *((const std::string::value_type **)v31 + 9), *((_QWORD *)v31 + 10));
                else
                  __s1 = *(std::string *)(v31 + 3);
                if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  p_s1 = &__s1;
                else
                  p_s1 = (std::string *)__s1.__r_.__value_.__r.__words[0];
                objc_msgSend(v59, "stringWithUTF8String:", p_s1, v105);
                v41 = (void *)objc_claimAutoreleasedReturnValue();
                if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
                {
                  operator delete(__s1.__r_.__value_.__l.__data_);
                  if (!v32)
                    goto LABEL_131;
                }
                else if (!v32)
                {
                  goto LABEL_131;
                }
                p_shared_owners = (unint64_t *)&v32->__shared_owners_;
                do
                  v43 = __ldaxr(p_shared_owners);
                while (__stlxr(v43 - 1, p_shared_owners));
                goto LABEL_130;
              }
            }
            else
            {
              operator delete(__s1.__r_.__value_.__l.__data_);
            }
          }
          else if (v28 == HIBYTE(__s1.__r_.__value_.__r.__words[2])
                 && !memcmp(&__s1, siri::dialogengine::TYPE_STRING[0], v28))
          {
            goto LABEL_59;
          }
          if (*((char *)lpsrc + 55) < 0)
            std::string::__init_copy_ctor_external(&__s1, *((const std::string::value_type **)lpsrc + 4), *((_QWORD *)lpsrc + 5));
          else
            __s1 = *(std::string *)((char *)lpsrc + 32);
          v35 = strlen(siri::dialogengine::TYPE_NUMBER[0]);
          if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
          {
            if (v35 == __s1.__r_.__value_.__l.__size_)
            {
              if (v35 == -1)
                std::string::__throw_out_of_range[abi:ne180100]();
              v36 = (void *)__s1.__r_.__value_.__r.__words[0];
              v37 = memcmp(__s1.__r_.__value_.__l.__data_, siri::dialogengine::TYPE_NUMBER[0], v35);
              operator delete(v36);
              if (!v37)
              {
LABEL_76:
                v32 = (std::__shared_weak_count *)v122;
                __s1.__r_.__value_.__r.__words[0] = (std::string::size_type)v38;
                __s1.__r_.__value_.__l.__size_ = v122;
                if (v122)
                {
                  v39 = (unint64_t *)(v122 + 8);
                  do
                    v40 = __ldxr(v39);
                  while (__stxr(v40 + 1, v39));
                }
                objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v38[9], v105);
                v41 = (void *)objc_claimAutoreleasedReturnValue();
                if (!v32)
                  goto LABEL_131;
                v42 = (unint64_t *)&v32->__shared_owners_;
                do
                  v43 = __ldaxr(v42);
                while (__stlxr(v43 - 1, v42));
                goto LABEL_130;
              }
            }
            else
            {
              operator delete(__s1.__r_.__value_.__l.__data_);
            }
          }
          else if (v35 == HIBYTE(__s1.__r_.__value_.__r.__words[2])
                 && !memcmp(&__s1, siri::dialogengine::TYPE_NUMBER[0], v35))
          {
            goto LABEL_76;
          }
          if (*((char *)lpsrc + 55) < 0)
            std::string::__init_copy_ctor_external(&__s1, *((const std::string::value_type **)lpsrc + 4), *((_QWORD *)lpsrc + 5));
          else
            __s1 = *(std::string *)((char *)lpsrc + 32);
          v44 = strlen(siri::dialogengine::TYPE_BOOLEAN);
          if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
          {
            if (v44 != __s1.__r_.__value_.__l.__size_)
            {
              operator delete(__s1.__r_.__value_.__l.__data_);
LABEL_102:
              std::operator+<char>();
              v51 = std::string::append(&v117, "': with value: '");
              v52 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
              v118.__r_.__value_.__r.__words[2] = v51->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v118.__r_.__value_.__l.__data_ = v52;
              v51->__r_.__value_.__l.__size_ = 0;
              v51->__r_.__value_.__r.__words[2] = 0;
              v51->__r_.__value_.__r.__words[0] = 0;
              if ((v123.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v53 = &v123;
              else
                v53 = (std::string *)v123.__r_.__value_.__r.__words[0];
              if ((v123.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v54 = HIBYTE(v123.__r_.__value_.__r.__words[2]);
              else
                v54 = v123.__r_.__value_.__l.__size_;
              v55 = std::string::append(&v118, (const std::string::value_type *)v53, v54);
              v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
              v119.__r_.__value_.__r.__words[2] = v55->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v119.__r_.__value_.__l.__data_ = v56;
              v55->__r_.__value_.__l.__size_ = 0;
              v55->__r_.__value_.__r.__words[2] = 0;
              v55->__r_.__value_.__r.__words[0] = 0;
              v57 = std::string::append(&v119, "'");
              v58 = *(_OWORD *)&v57->__r_.__value_.__l.__data_;
              __s1.__r_.__value_.__r.__words[2] = v57->__r_.__value_.__r.__words[2];
              *(_OWORD *)&__s1.__r_.__value_.__l.__data_ = v58;
              v57->__r_.__value_.__l.__size_ = 0;
              v57->__r_.__value_.__r.__words[2] = 0;
              v57->__r_.__value_.__r.__words[0] = 0;
              siri::dialogengine::Log::LogWithLevel((uint64_t)&__s1, 3u);
              if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__s1.__r_.__value_.__l.__data_);
              if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v119.__r_.__value_.__l.__data_);
              if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v118.__r_.__value_.__l.__data_);
              if ((SHIBYTE(v117.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_136;
              v27 = (void *)v117.__r_.__value_.__r.__words[0];
LABEL_116:
              operator delete(v27);
              goto LABEL_136;
            }
            if (v44 == -1)
              std::string::__throw_out_of_range[abi:ne180100]();
            v45 = (void *)__s1.__r_.__value_.__r.__words[0];
            v46 = memcmp(__s1.__r_.__value_.__l.__data_, siri::dialogengine::TYPE_BOOLEAN, v44);
            operator delete(v45);
            if (v46)
              goto LABEL_102;
          }
          else if (v44 != HIBYTE(__s1.__r_.__value_.__r.__words[2])
                 || memcmp(&__s1, siri::dialogengine::TYPE_BOOLEAN, v44))
          {
            goto LABEL_102;
          }
          v32 = (std::__shared_weak_count *)v122;
          __s1.__r_.__value_.__r.__words[0] = (std::string::size_type)v47;
          __s1.__r_.__value_.__l.__size_ = v122;
          if (v122)
          {
            v48 = (unint64_t *)(v122 + 8);
            do
              v49 = __ldxr(v48);
            while (__stxr(v49 + 1, v48));
          }
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v47[66], v105);
          v41 = (void *)objc_claimAutoreleasedReturnValue();
          if (!v32)
          {
LABEL_131:
            if (!v41)
              goto LABEL_136;
            goto LABEL_132;
          }
          v50 = (unint64_t *)&v32->__shared_owners_;
          do
            v43 = __ldaxr(v50);
          while (__stlxr(v43 - 1, v50));
LABEL_130:
          if (v43)
            goto LABEL_131;
          ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
          std::__shared_weak_count::__release_weak(v32);
          if (!v41)
            goto LABEL_136;
LABEL_132:
          if ((v124.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v62 = &v124;
          else
            v62 = (std::string *)v124.__r_.__value_.__r.__words[0];
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v62);
          v63 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v109, "setObject:forKey:", v41, v63);

LABEL_136:
          v64 = (std::__shared_weak_count *)v122;
          if (v122)
          {
            v65 = (unint64_t *)(v122 + 8);
            do
              v66 = __ldaxr(v65);
            while (__stlxr(v66 - 1, v65));
            if (!v66)
            {
              ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
              std::__shared_weak_count::__release_weak(v64);
            }
          }
LABEL_141:
          if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v123.__r_.__value_.__l.__data_);
          if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v124.__r_.__value_.__l.__data_);
          if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__s.__r_.__value_.__l.__data_);
          if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v125.__r_.__value_.__l.__data_);
          v67 = (__int128 *)*((_QWORD *)v23 + 1);
          if (v67)
          {
            do
            {
              v68 = v67;
              v67 = *(__int128 **)v67;
            }
            while (v67);
          }
          else
          {
            do
            {
              v68 = (__int128 *)*((_QWORD *)v23 + 2);
              v69 = *(_QWORD *)v68 == (_QWORD)v23;
              v23 = v68;
            }
            while (!v69);
          }
          v23 = v68;
        }
        while (v68 != (__int128 *)v128);
      }
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v128[0]);
      objc_msgSend(v108, "setSettings:", v109);
      v70 = (void *)objc_opt_new();
      std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)&v127, (const void ***)(v110.n128_u64[0] + 184));
      v71 = v127;
      if (v127 != (__int128 *)v128)
      {
        do
        {
          std::pair<std::string const,std::string>::pair[abi:ne180100](&v125, v71 + 2);
          if ((v125.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v72 = &v125;
          else
            v72 = (std::string *)v125.__r_.__value_.__r.__words[0];
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v72, v105);
          v73 = (void *)objc_claimAutoreleasedReturnValue();
          if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            p_s = &__s;
          else
            p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", p_s);
          v75 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v70, "setObject:forKey:", v75, v73);

          if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__s.__r_.__value_.__l.__data_);
          if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v125.__r_.__value_.__l.__data_);
          v76 = (__int128 *)*((_QWORD *)v71 + 1);
          if (v76)
          {
            do
            {
              v77 = v76;
              v76 = *(__int128 **)v76;
            }
            while (v76);
          }
          else
          {
            do
            {
              v77 = (__int128 *)*((_QWORD *)v71 + 2);
              v69 = *(_QWORD *)v77 == (_QWORD)v71;
              v71 = v77;
            }
            while (!v69);
          }
          v71 = v77;
        }
        while (v77 != (__int128 *)v128);
      }
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v128[0]);
      objc_msgSend(v108, "setMeta:", v70);
      v78 = (void *)objc_opt_new();
      std::map<std::string,std::shared_ptr<siri::dialogengine::PatternGroup>>::map[abi:ne180100]((uint64_t)&v127, (const void ***)(v110.n128_u64[0] + 208));
      v79 = v127;
      if (v127 != (__int128 *)v128)
      {
        do
        {
          std::pair<std::string const,std::shared_ptr<siri::dialogengine::JSONValue>>::pair[abi:ne180100](&v125, v79 + 2);
          v80 = (void *)objc_opt_new();
          v81 = (void *)MEMORY[0x1E0CB3940];
          if (*(char *)(__s.__r_.__value_.__r.__words[0] + 87) < 0)
            std::string::__init_copy_ctor_external(&v124, *(const std::string::value_type **)(__s.__r_.__value_.__r.__words[0] + 64), *(_QWORD *)(__s.__r_.__value_.__r.__words[0] + 72));
          else
            v124 = *(std::string *)(__s.__r_.__value_.__r.__words[0] + 64);
          if ((v124.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v82 = &v124;
          else
            v82 = (std::string *)v124.__r_.__value_.__r.__words[0];
          objc_msgSend(v81, "stringWithUTF8String:", v82, v105);
          v83 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v80, "setName:", v83);

          if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v124.__r_.__value_.__l.__data_);
          v84 = (void *)MEMORY[0x1E0CB3940];
          if (*(char *)(__s.__r_.__value_.__r.__words[0] + 111) < 0)
            std::string::__init_copy_ctor_external(&v124, *(const std::string::value_type **)(__s.__r_.__value_.__r.__words[0] + 88), *(_QWORD *)(__s.__r_.__value_.__r.__words[0] + 96));
          else
            v124 = *(std::string *)(__s.__r_.__value_.__r.__words[0] + 88);
          if ((v124.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v85 = &v124;
          else
            v85 = (std::string *)v124.__r_.__value_.__r.__words[0];
          objc_msgSend(v84, "stringWithUTF8String:", v85);
          v86 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v80, "setDialogId:", v86);

          if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v124.__r_.__value_.__l.__data_);
          v87 = (void *)MEMORY[0x1E0CB3940];
          if (*(char *)(__s.__r_.__value_.__r.__words[0] + 135) < 0)
            std::string::__init_copy_ctor_external(&v124, *(const std::string::value_type **)(__s.__r_.__value_.__r.__words[0] + 112), *(_QWORD *)(__s.__r_.__value_.__r.__words[0] + 120));
          else
            v124 = *(std::string *)(__s.__r_.__value_.__r.__words[0] + 112);
          if ((v124.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v88 = &v124;
          else
            v88 = (std::string *)v124.__r_.__value_.__r.__words[0];
          objc_msgSend(v87, "stringWithUTF8String:", v88);
          v89 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v80, "setVisualId:", v89);

          if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v124.__r_.__value_.__l.__data_);
          v90 = (void *)MEMORY[0x1E0CB3940];
          if (*(char *)(__s.__r_.__value_.__r.__words[0] + 159) < 0)
            std::string::__init_copy_ctor_external(&v124, *(const std::string::value_type **)(__s.__r_.__value_.__r.__words[0] + 136), *(_QWORD *)(__s.__r_.__value_.__r.__words[0] + 144));
          else
            v124 = *(std::string *)(__s.__r_.__value_.__r.__words[0] + 136);
          if ((v124.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v91 = &v124;
          else
            v91 = (std::string *)v124.__r_.__value_.__r.__words[0];
          objc_msgSend(v90, "stringWithUTF8String:", v91);
          v92 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v80, "setPatternId:", v92);

          if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v124.__r_.__value_.__l.__data_);
          objc_msgSend(v80, "name");
          v93 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v78, "setObject:forKey:", v80, v93);

          v94 = (std::__shared_weak_count *)__s.__r_.__value_.__l.__size_;
          if (__s.__r_.__value_.__l.__size_)
          {
            v95 = (unint64_t *)(__s.__r_.__value_.__l.__size_ + 8);
            do
              v96 = __ldaxr(v95);
            while (__stlxr(v96 - 1, v95));
            if (!v96)
            {
              ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
              std::__shared_weak_count::__release_weak(v94);
            }
          }
          if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v125.__r_.__value_.__l.__data_);
          v97 = (__int128 *)*((_QWORD *)v79 + 1);
          if (v97)
          {
            do
            {
              v98 = v97;
              v97 = *(__int128 **)v97;
            }
            while (v97);
          }
          else
          {
            do
            {
              v98 = (__int128 *)*((_QWORD *)v79 + 2);
              v69 = *(_QWORD *)v98 == (_QWORD)v79;
              v79 = v98;
            }
            while (!v69);
          }
          v79 = v98;
        }
        while (v98 != (__int128 *)v128);
      }
      std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(v128[0]);
      objc_msgSend(v108, "setGroups:", v78);
      v11 = v108;

      siri::dialogengine::Context::~Context((siri::dialogengine::Context *)__p);
      v9 = v106;
      v8 = v107;
      if (v110.n128_u64[1])
      {
        v99 = (unint64_t *)(v110.n128_u64[1] + 8);
        do
          v100 = __ldaxr(v99);
        while (__stlxr(v100 - 1, v99));
        if (!v100)
        {
          (*(void (**)(unint64_t))(*(_QWORD *)v110.n128_u64[1] + 16))(v110.n128_u64[1]);
          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v110.n128_u64[1]);
        }
      }
      v10[2](v10, v11, 0);
    }
    else
    {
      std::operator+<char>();
      std::string::basic_string[abi:ne180100]<0>(&v125, "load-failed");
      NSErrorFromString((uint64_t *)__p, (uint64_t *)&v125);
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      ((void (**)(id, id, void *))v10)[2](v10, v11, v20);

      if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v125.__r_.__value_.__l.__data_);
      if (v130 < 0)
        operator delete(__p[0]);
    }
    v19 = v11;
    v101 = (std::__shared_weak_count *)v111.n128_u64[1];
    if (v111.n128_u64[1])
    {
      v102 = (unint64_t *)(v111.n128_u64[1] + 8);
      do
        v103 = __ldaxr(v102);
      while (__stlxr(v103 - 1, v102));
      if (!v103)
      {
        ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
        std::__shared_weak_count::__release_weak(v101);
      }
    }
    siri::dialogengine::Context::~Context((siri::dialogengine::Context *)v112);
    if (v115 < 0)
      operator delete(v114[0]);
    __p[0] = v116;
    std::vector<siri::dialogengine::UpdatableDir>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "Nil bundle supplied");
    std::string::basic_string[abi:ne180100]<0>(v112, "request-error");
    NSErrorFromString((uint64_t *)__p, (uint64_t *)v112);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    ((void (**)(id, id, void *))v10)[2](v10, v11, v18);

    if (v113 < 0)
      operator delete(v112[0]);
    if (v130 < 0)
      operator delete(__p[0]);
    v19 = v11;
  }

  return v19;
}

void sub_1BF9055C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, void *a19)
{
  void *v19;
  void *v20;
  void *v21;
  void *v22;

  siri::dialogengine::Context::~Context((siri::dialogengine::Context *)&STACK[0xF50]);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  siri::dialogengine::Context::~Context((siri::dialogengine::Context *)&a19);
  if (SLOBYTE(STACK[0xE1F]) < 0)
    operator delete((void *)STACK[0xE08]);
  a19 = &STACK[0xE20];
  std::vector<siri::dialogengine::UpdatableDir>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);

  _Unwind_Resume(a1);
}

void sub_1BF905A04()
{
  JUMPOUT(0x1BF905870);
}

uint64_t siri::dialogengine::DefaultUserSettings(siri::dialogengine *this)
{
  unsigned __int8 v1;
  unint64_t v2;
  _QWORD *v4;
  char v5;
  char **v6;
  char *v7;

  {
    v4 = (_QWORD *)operator new();
    *v4 = 0;
    siri::dialogengine::DefaultUserSettings(void)::flag = (uint64_t)v4;
  }
  v2 = atomic_load((unint64_t *)siri::dialogengine::DefaultUserSettings(void)::flag);
  if (v2 != -1)
  {
    v7 = &v5;
    v6 = &v7;
    std::__call_once((std::once_flag::_State_type *)siri::dialogengine::DefaultUserSettings(void)::flag, &v6, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::DefaultUserSettings(void)::$_0 &&>>);
  }
  return siri::dialogengine::DefaultUserSettings(void)::sDefaultSettings;
}

void sub_1BF905AB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::DefaultUserSettings(void)::$_0 &&>>()
{
  uint64_t v0;
  uint64_t v1;
  const void **v2;
  void *__p[2];
  uint64_t v4;
  void *v5[2];
  uint64_t v6;
  const void *v7[3];
  _QWORD v8[3];
  _QWORD v9[3];
  _QWORD v10[3];
  _QWORD v11[3];
  __int128 v12;
  uint64_t v13;
  _QWORD v14[3];
  __int128 v15;
  uint64_t v16;
  _QWORD v17[3];
  _QWORD v18[3];
  _QWORD v19[3];
  _QWORD v20[3];
  _QWORD v21[3];
  _QWORD v22[4];

  v22[3] = *MEMORY[0x1E0C80C00];
  v0 = operator new();
  std::string::basic_string[abi:ne180100]<0>(v7, "user24HourTimeOverride");
  std::string::basic_string[abi:ne180100]<0>(v8, "");
  std::string::basic_string[abi:ne180100]<0>(v9, "userCalendar");
  std::string::basic_string[abi:ne180100]<0>(v10, "gregorian");
  std::string::basic_string[abi:ne180100]<0>(v5, "true");
  std::string::basic_string[abi:ne180100]<0>(v11, "userShouldPreferNickname");
  v12 = *(_OWORD *)v5;
  v13 = v6;
  v5[1] = 0;
  v6 = 0;
  v5[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "false");
  std::string::basic_string[abi:ne180100]<0>(v14, "alwaysDisplayDialog");
  v15 = *(_OWORD *)__p;
  v16 = v4;
  __p[1] = 0;
  v4 = 0;
  __p[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(v17, "userInputLocale");
  std::string::basic_string[abi:ne180100]<0>(v18, "");
  std::string::basic_string[abi:ne180100]<0>(v19, "userMeasurementUnit");
  std::string::basic_string[abi:ne180100]<0>(v20, "metric");
  std::string::basic_string[abi:ne180100]<0>(v21, "userTemperatureUnit");
  std::string::basic_string[abi:ne180100]<0>(v22, "fahrenheit");
  std::map<std::string,std::string>::map[abi:ne180100](v0, v7, 7);
  siri::dialogengine::DefaultUserSettings(void)::sDefaultSettings = v0;
  v1 = 42;
  do
  {
    v2 = &v7[v1];
    if (SHIBYTE(v7[v1 - 1]) < 0)
      operator delete((void *)*(v2 - 3));
    if (*((char *)v2 - 25) < 0)
      operator delete((void *)*(v2 - 6));
    v1 -= 6;
  }
  while (v1 * 8);
  if (SHIBYTE(v4) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v6) < 0)
    operator delete(v5[0]);
}

void sub_1BF905D04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;

  v24 = 336;
  while (1)
  {
    v25 = v22 + v24;
    if (*(char *)(v22 + v24 - 1) < 0)
      operator delete(*(void **)(v25 - 24));
    if (*(char *)(v25 - 25) < 0)
      operator delete(*(void **)(v25 - 48));
    v24 -= 48;
    if (!v24)
    {
      if (a15 < 0)
        operator delete(__p);
      if (a21 < 0)
        operator delete(a16);
      MEMORY[0x1C3B8D890](v21, 0x1020C4062D53EE8);
      _Unwind_Resume(a1);
    }
  }
}

BOOL siri::dialogengine::IsValidUserSetting(siri::dialogengine *a1)
{
  uint64_t v2;

  v2 = siri::dialogengine::DefaultUserSettings(a1);
  return v2 + 8 != std::__tree<std::string>::find<std::string>(v2, (const void **)a1);
}

void siri::dialogengine::ExtractUserSettings(siri::dialogengine *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  unsigned int *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *String;
  siri::dialogengine *v12;
  uint64_t v13;
  const char *v14;
  void **v15;
  char *v16;
  char *v17;
  const char *v18;
  std::string::size_type size;
  uint64_t *v20;
  const char *v21;
  void **v22;
  std::string *p_str;
  void **v24;
  std::string __str;
  void *__p[2];
  char v27;
  void **v28;

  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = a3 + 8;
  if (a2)
  {
    v5 = siri::dialogengine::DefaultUserSettings(a1);
    if (v5 != a3)
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>(a3, *(__int128 **)v5, (__int128 *)(v5 + 8));
  }
  if (rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::HasMember((unsigned int *)a1, "userSettings"))
  {
    v6 = (unsigned int *)rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::operator[]<char const>((unsigned int *)a1, "userSettings");
    if (*((_WORD *)v6 + 11) == 3)
    {
      v8 = *v6;
      if ((_DWORD)v8)
      {
        v9 = 48 * v8;
        v10 = *((_QWORD *)v6 + 1) + 24;
        do
        {
          String = (char *)rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::GetString(v10 - 24);
          v12 = (siri::dialogengine *)std::string::basic_string[abi:ne180100]<0>(__p, String);
          v13 = siri::dialogengine::DefaultUserSettings(v12);
          if (v13 + 8 == std::__tree<std::string>::find<std::string>(v13, (const void **)__p))
          {
            if (v27 >= 0)
              v15 = __p;
            else
              v15 = (void **)__p[0];
            v16 = "Ignoring unsupported user setting '%s'";
          }
          else
          {
            if ((*(_WORD *)(v10 + 22) & 0x400) != 0)
            {
              v17 = (char *)rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::GetString(v10);
              std::string::basic_string[abi:ne180100]<0>(&__str, v17);
              size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
              if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                size = __str.__r_.__value_.__l.__size_;
              if (size)
              {
                v28 = __p;
                v20 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a3, (const void **)__p, (__int128 **)&v28);
                std::string::operator=((std::string *)(v20 + 7), &__str);
                if (v27 >= 0)
                  v22 = __p;
                else
                  v22 = (void **)__p[0];
                if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  p_str = &__str;
                else
                  p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
                siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"Parsed user setting '%s': '%s'", v21, v22, p_str);
              }
              else
              {
                if (v27 >= 0)
                  v24 = __p;
                else
                  v24 = (void **)__p[0];
                siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Ignoring user setting '%s' with empty string value", v18, v24);
              }
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__str.__r_.__value_.__l.__data_);
              goto LABEL_35;
            }
            if (v27 >= 0)
              v15 = __p;
            else
              v15 = (void **)__p[0];
            v16 = "Value for user setting '%s' is not a string";
          }
          siri::dialogengine::Log::Warn((siri::dialogengine::Log *)v16, v14, v15);
LABEL_35:
          if (v27 < 0)
            operator delete(__p[0]);
          v10 += 48;
          v9 -= 48;
        }
        while (v9);
      }
    }
    else
    {
      siri::dialogengine::Log::Warn((siri::dialogengine::Log *)"Value for key 'userSettings' is not an object", v7);
    }
  }
}

void sub_1BF9060BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  _QWORD **v23;

  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*v23);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>(uint64_t a1, __int128 *a2, __int128 *a3)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  __int128 *v9;
  uint64_t *v10;
  uint64_t **leaf_high;
  __int128 *v12;
  BOOL v13;
  uint64_t *v14;
  uint64_t **v15;
  __int128 *v16;
  __int128 *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;

  if (*(_QWORD *)(a1 + 16))
  {
    v6 = *(uint64_t **)a1;
    v7 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)a1 = a1 + 8;
    *(_QWORD *)(v7 + 16) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    if (v6[1])
      v8 = (uint64_t *)v6[1];
    else
      v8 = v6;
    v19 = a1;
    v20 = v8;
    v21 = v8;
    if (v8)
    {
      v20 = std::__tree<std::string>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        v9 = a2;
        do
        {
          std::string::operator=((std::string *)(v8 + 4), (const std::string *)(v9 + 2));
          std::string::operator=((std::string *)(v8 + 7), (const std::string *)((char *)v9 + 56));
          v10 = v21;
          leaf_high = (uint64_t **)std::__tree<std::string>::__find_leaf_high(a1, &v18, (const void **)v21 + 4);
          std::__tree<std::string>::__insert_node_at((uint64_t **)a1, v18, leaf_high, v10);
          v8 = v20;
          v21 = v20;
          if (v20)
            v20 = std::__tree<std::string>::_DetachedTreeCache::__detach_next((uint64_t)v20);
          v12 = (__int128 *)*((_QWORD *)v9 + 1);
          if (v12)
          {
            do
            {
              a2 = v12;
              v12 = *(__int128 **)v12;
            }
            while (v12);
          }
          else
          {
            do
            {
              a2 = (__int128 *)*((_QWORD *)v9 + 2);
              v13 = *(_QWORD *)a2 == (_QWORD)v9;
              v9 = a2;
            }
            while (!v13);
          }
          if (!v8)
            break;
          v9 = a2;
        }
        while (a2 != a3);
      }
    }
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v19);
  }
  if (a2 != a3)
  {
    do
    {
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__construct_node<std::pair<std::string const,std::string> const&>((uint64_t)&v19, a1, a2 + 2);
      v14 = (uint64_t *)v19;
      v15 = (uint64_t **)std::__tree<std::string>::__find_leaf_high(a1, &v18, (const void **)(v19 + 32));
      std::__tree<std::string>::__insert_node_at((uint64_t **)a1, v18, v15, v14);
      v19 = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)&v19);
      v16 = (__int128 *)*((_QWORD *)a2 + 1);
      if (v16)
      {
        do
        {
          v17 = v16;
          v16 = *(__int128 **)v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          v17 = (__int128 *)*((_QWORD *)a2 + 2);
          v13 = *(_QWORD *)v17 == (_QWORD)a2;
          a2 = v17;
        }
        while (!v13);
      }
      a2 = v17;
    }
    while (v17 != a3);
  }
}

void sub_1BF9062BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*(_QWORD **)(a1 + 16));
  v2 = *(_QWORD **)(a1 + 8);
  if (v2)
  {
    v3 = (_QWORD *)v2[2];
    if (v3)
    {
      do
      {
        v2 = v3;
        v3 = (_QWORD *)v3[2];
      }
      while (v3);
      *(_QWORD *)(a1 + 8) = v2;
    }
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v2);
  }
  return a1;
}

void siri::dialogengine::ExtractUserSettings(siri::dialogengine *a1@<X0>, const char *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  const void *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  siri::dialogengine::VariableObject *v12;
  const char *v13;
  siri::dialogengine *v14;
  const void **v15;
  const void **v16;
  char *v17;
  __int128 v18;
  uint64_t v19;
  const char *v20;
  char *v21;
  std::string *v22;
  std::string *v23;
  std::string::size_type size;
  uint64_t *v25;
  const char *v26;
  std::string *v27;
  std::string *p_str;
  std::string *v29;
  unint64_t *v30;
  unint64_t v31;
  std::string __str;
  std::string v33;
  void *__p;
  const void **v35;
  char v36;
  const void *v37;
  std::__shared_weak_count *v38;
  std::string *v39;

  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = a3 + 8;
  if ((_DWORD)a2)
  {
    v5 = siri::dialogengine::DefaultUserSettings(a1);
    if (v5 != a3)
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>(a3, *(__int128 **)v5, (__int128 *)(v5 + 8));
  }
  v6 = *(_QWORD *)a1;
  if (!v6)
  {
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"ExtractUserSettings received NULL variable argument", a2);
    return;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "userSettings");
  v7 = std::__tree<std::string>::find<std::string>(v6 + 72, (const void **)&__p);
  if (v6 + 80 == v7)
  {
    v8 = 0;
    v9 = 0;
    v37 = 0;
    v38 = 0;
  }
  else
  {
    v9 = *(const void **)(v7 + 56);
    v8 = *(std::__shared_weak_count **)(v7 + 64);
    v37 = v9;
    v38 = v8;
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
    }
  }
  if (v36 < 0)
  {
    operator delete(__p);
    if (!v9)
      goto LABEL_55;
LABEL_16:
    if (v12)
    {
      siri::dialogengine::VariableObject::GetValues(v12, (char **)&__p);
      v15 = (const void **)__p;
      v16 = v35;
      if (__p != v35)
      {
        do
        {
          v17 = (char *)*v15;
          if (*((char *)*v15 + 31) < 0)
          {
            std::string::__init_copy_ctor_external(&v33, *((const std::string::value_type **)v17 + 1), *((_QWORD *)v17 + 2));
          }
          else
          {
            v18 = *(_OWORD *)(v17 + 8);
            v33.__r_.__value_.__r.__words[2] = *((_QWORD *)v17 + 3);
            *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v18;
          }
          v19 = siri::dialogengine::DefaultUserSettings(v14);
          if (v19 + 8 == std::__tree<std::string>::find<std::string>(v19, (const void **)&v33.__r_.__value_.__l.__data_))
          {
            if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v23 = &v33;
            else
              v23 = (std::string *)v33.__r_.__value_.__r.__words[0];
            siri::dialogengine::Log::Warn((siri::dialogengine::Log *)"Ignoring unsupported user setting '%s'", v20, v23);
          }
          else if (*v15
          {
            if (v21[95] < 0)
              std::string::__init_copy_ctor_external(&__str, *((const std::string::value_type **)v21 + 9), *((_QWORD *)v21 + 10));
            else
              __str = *(std::string *)(v21 + 3);
            size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
            if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              size = __str.__r_.__value_.__l.__size_;
            if (size)
            {
              v39 = &v33;
              v25 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a3, (const void **)&v33.__r_.__value_.__l.__data_, (__int128 **)&v39);
              std::string::operator=((std::string *)(v25 + 7), &__str);
              if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v27 = &v33;
              else
                v27 = (std::string *)v33.__r_.__value_.__r.__words[0];
              p_str = &__str;
              if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
              siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"Parsed user setting '%s': '%s'", v26, v27, p_str);
            }
            else
            {
              if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v29 = &v33;
              else
                v29 = (std::string *)v33.__r_.__value_.__r.__words[0];
              siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Ignoring user setting '%s' with empty string value", v20, v29);
            }
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__str.__r_.__value_.__l.__data_);
          }
          else
          {
            if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v22 = &v33;
            else
              v22 = (std::string *)v33.__r_.__value_.__r.__words[0];
            siri::dialogengine::Log::Warn((siri::dialogengine::Log *)"Value for user setting '%s' is not a string", v20, v22);
          }
          if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v33.__r_.__value_.__l.__data_);
          v15 += 2;
        }
        while (v15 != v16);
      }
      v33.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
      std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v33);
    }
    else
    {
      siri::dialogengine::Log::Warn((siri::dialogengine::Log *)"Variable 'userSettings' is not an object", v13);
    }
    goto LABEL_55;
  }
  if (v9)
    goto LABEL_16;
LABEL_55:
  if (v8)
  {
    v30 = (unint64_t *)&v8->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1BF906654(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,char a28)
{
  _QWORD **v28;

  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a28);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*v28);
  _Unwind_Resume(a1);
}

void sub_1BF9067D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_1BF9068A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_1BF906DEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_1BF906EDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1BF906FC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  void *v16;

  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a16);

  _Unwind_Resume(a1);
}

void sub_1BF9070D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;

  if (a17 < 0)
    operator delete(__p);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a10);

  _Unwind_Resume(a1);
}

_QWORD *__assign_helper_atomic_property__1806(_QWORD *a1, uint64_t *a2)
{
  return std::shared_ptr<siri::dialogengine::PatternSchemaUsage>::operator=[abi:ne180100](a1, *a2, a2[1]);
}

_QWORD *__copy_helper_atomic_property__1807(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = a2[1];
  *result = *a2;
  result[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void std::__shared_ptr_emplace<siri::dialogengine::Node>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E792D260;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<siri::dialogengine::Node>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E792D260;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B8D890);
}

uint64_t std::__shared_ptr_emplace<siri::dialogengine::Node>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void siri::dialogengine::File::~File(siri::dialogengine::File *this)
{
  siri::dialogengine::File::~File(this);
  JUMPOUT(0x1C3B8D890);
}

{
  void **v2;

  *(_QWORD *)this = &off_1E793A3A0;
  if (*((_BYTE *)this + 744))
    std::__tree<std::string>::destroy((uint64_t)this + 720, *((char **)this + 91));
  if (*((_BYTE *)this + 712))
    std::__tree<std::string>::destroy((uint64_t)this + 688, *((char **)this + 87));
  if (*((_BYTE *)this + 680) && *((char *)this + 679) < 0)
    operator delete(*((void **)this + 82));
  if (*((char *)this + 639) < 0)
    operator delete(*((void **)this + 77));
  std::__tree<siri::dialogengine::ValidationEntry>::destroy(*((_QWORD **)this + 75));
  std::__tree<siri::dialogengine::ValidationEntry>::destroy(*((_QWORD **)this + 72));
  siri::dialogengine::Group::~Group((siri::dialogengine::File *)((char *)this + 312));
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)this + 296);
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(*((_QWORD **)this + 35));
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)this + 256);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)this + 240);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)this + 224);
  std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::destroy(*((_QWORD **)this + 26));
  v2 = (void **)((char *)this + 176);
  std::vector<siri::dialogengine::Parameter>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 175) < 0)
    operator delete(*((void **)this + 19));
  if (*((char *)this + 151) < 0)
    operator delete(*((void **)this + 16));
  if (*((char *)this + 127) < 0)
    operator delete(*((void **)this + 13));
  if (*((char *)this + 103) < 0)
    operator delete(*((void **)this + 10));
  if (*((char *)this + 79) < 0)
    operator delete(*((void **)this + 7));
  if (*((char *)this + 55) < 0)
    operator delete(*((void **)this + 4));
  *(_QWORD *)this = off_1E793AED8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*((_QWORD **)this + 2));
}

BOOL siri::dialogengine::File::Validate(siri::dialogengine::File *this, siri::dialogengine::Context *a2)
{
  uint64_t v2;
  siri::dialogengine::Context *v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL8 v6;
  char *v7;
  std::string *v8;
  xmlDoc *v9;
  std::string::size_type size;
  std::string *v11;
  xmlDoc *v12;
  int v13;
  int v14;
  std::string *v15;
  int v16;
  xmlDoc *v17;
  std::string::size_type v18;
  int v19;
  int v20;
  std::string *v21;
  int v22;
  xmlDoc *v23;
  siri::dialogengine::ObjectRegistry *v24;
  uint64_t end_high;
  std::__split_buffer<std::string>::pointer begin;
  std::__split_buffer<std::string>::pointer v27;
  int v28;
  unsigned __int8 *v29;
  std::__split_buffer<std::string> *v30;
  std::__split_buffer<std::string>::pointer first;
  std::string *v32;
  __int128 v33;
  int v34;
  const std::string::value_type *v35;
  std::string::size_type v36;
  std::string *v37;
  __int128 v38;
  std::string *v39;
  __int128 v40;
  std::string::size_type v41;
  uint64_t v42;
  std::string::size_type v43;
  std::__split_buffer<std::string>::pointer v44;
  unsigned __int8 *v45;
  std::string *v46;
  void *v47;
  std::string *v48;
  __int128 v49;
  std::string *v50;
  std::string::size_type v51;
  std::string *v52;
  __int128 v53;
  std::string *v54;
  __int128 v55;
  char v56;
  uint64_t v57;
  std::__split_buffer<std::string>::pointer v58;
  std::__split_buffer<std::string>::pointer v59;
  unsigned __int8 *v60;
  std::__split_buffer<std::string> *v61;
  std::string *v62;
  __int128 v63;
  void *v64;
  std::string *v65;
  __int128 v66;
  int v67;
  const std::string::value_type *v68;
  std::string::size_type v69;
  std::string *v70;
  __int128 v71;
  std::string *v72;
  __int128 v73;
  uint64_t v74;
  std::string::size_type v75;
  uint64_t v76;
  int v77;
  unsigned __int8 *v78;
  std::string *p_s1;
  std::string *v80;
  __int128 v81;
  int v82;
  const std::string::value_type *v83;
  std::string::size_type v84;
  std::string *v85;
  __int128 v86;
  std::string *v87;
  __int128 v88;
  int v89;
  const std::string::value_type *v90;
  std::string::size_type v91;
  std::string *v92;
  __int128 v93;
  std::string *v94;
  __int128 v95;
  char v96;
  _BYTE *v97;
  uint64_t v98;
  unsigned __int8 *v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  int v103;
  int v104;
  _QWORD *v105;
  std::string *v106;
  __int128 v107;
  _QWORD *v108;
  _QWORD *v109;
  siri::dialogengine::Context *v110;
  std::string::size_type v111;
  std::string *v112;
  int data;
  int v114;
  BOOL v115;
  int v116;
  std::string::size_type v117;
  uint64_t v118;
  uint64_t v119;
  std::string::size_type v120;
  __int128 v121;
  std::__split_buffer<std::string>::pointer v122;
  std::string::size_type v123;
  std::string::size_type v124;
  _OWORD *v125;
  __int128 v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  std::string *v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  std::string *v134;
  std::string *v135;
  __int128 v136;
  std::string::size_type v137;
  std::string::size_type v138;
  std::string::size_type v139;
  std::string *v140;
  __int128 v141;
  __int128 v142;
  std::string *v143;
  __int128 v144;
  __int128 v145;
  uint64_t v146;
  unint64_t *p_shared_owners;
  unint64_t v148;
  std::string::size_type v149;
  std::string::size_type i;
  uint64_t v151;
  uint64_t v152;
  _OWORD *v153;
  __int128 v154;
  __int128 *v155;
  __int128 v156;
  uint64_t v157;
  char v158;
  std::string::size_type v159;
  std::string::size_type v160;
  int v161;
  void *v162;
  std::string *v163;
  std::string *p_n;
  int v165;
  std::string::size_type v166;
  _OWORD *v167;
  char v168;
  std::string::size_type v169;
  std::string::size_type v170;
  int v171;
  std::string *v172;
  uint64_t v173;
  std::string *v174;
  int v175;
  int v176;
  int v177;
  int v178;
  BOOL v180;
  BOOL v181;
  __int128 v182;
  __int128 v183;
  std::string *v184;
  __int128 v185;
  std::string *v186;
  __int128 v187;
  std::string *v188;
  std::string::size_type v189;
  std::string *v190;
  __int128 v191;
  std::string *v192;
  __int128 v193;
  void *v194;
  std::string *v195;
  __int128 v196;
  std::string *v197;
  __int128 v198;
  std::string *v199;
  std::string::size_type v200;
  std::string *v201;
  __int128 v202;
  std::string *v203;
  __int128 v204;
  std::string *v205;
  std::string::size_type v206;
  std::string *v207;
  __int128 v208;
  std::string *v209;
  __int128 v210;
  std::string *v211;
  std::string::size_type v212;
  std::string *v213;
  __int128 v214;
  std::string *v215;
  __int128 v216;
  std::__shared_weak_count *v217;
  unint64_t *v218;
  unint64_t v219;
  std::string *v220;
  std::string::size_type v221;
  std::string *v222;
  __int128 v223;
  std::string *v224;
  __int128 v225;
  std::string *v226;
  std::string::size_type v227;
  std::string *v228;
  __int128 v229;
  std::string *v230;
  __int128 v231;
  std::string *v232;
  __int128 v233;
  std::string *v234;
  std::string::size_type v235;
  std::string *v236;
  __int128 v237;
  uint64_t v238;
  _QWORD *v239;
  uint64_t v240;
  std::string *v241;
  __int128 v242;
  _QWORD *v243;
  _QWORD *v244;
  uint64_t v245;
  uint64_t v246;
  std::__split_buffer<std::string>::pointer j;
  std::__split_buffer<std::string>::pointer v248;
  const void *v249;
  siri::dialogengine::Dialog *v250;
  siri::dialogengine::Context *v251;
  const char *v252;
  uint64_t *k;
  std::string::size_type v254;
  uint64_t v255;
  std::__split_buffer<std::string>::pointer v256;
  char v257;
  std::string *v258;
  __int128 v259;
  uint64_t v260;
  const char *v261;
  BOOL v262;
  std::string *v263;
  uint64_t v265;
  std::__split_buffer<std::string>::pointer v266;
  std::__split_buffer<std::string>::pointer m;
  std::string::size_type v269;
  _OWORD *v270;
  std::__split_buffer<std::string>::pointer v271;
  std::string::size_type v272;
  char v273;
  std::string::size_type v274;
  std::string *v275;
  uint64_t v276;
  int v277;
  int v278;
  std::__split_buffer<std::string>::pointer v280;
  int v281;
  const void ***SourceLocaleDialogIds;
  const char *v283;
  std::string::size_type v284;
  std::string *v285;
  __int128 v286;
  std::string *v287;
  std::string::size_type v288;
  std::string *v289;
  __int128 v290;
  std::string *v291;
  __int128 v292;
  std::string *v293;
  std::string::size_type v294;
  std::string *v295;
  __int128 v296;
  std::string *v297;
  __int128 v298;
  std::string *v299;
  std::string *v300;
  BOOL v301;
  std::string *v302;
  uint64_t v303;
  uint64_t v304;
  std::string::size_type v305;
  uint64_t v306;
  siri::dialogengine::Context *v307;
  std::string v308;
  std::string v309;
  std::string v310;
  std::string v311;
  std::string v312;
  std::string v313;
  std::string v314;
  std::string v315;
  uint64_t v316;
  std::__shared_weak_count *v317;
  std::string __s1;
  std::string v319[2];
  std::string v320[5];
  std::string v321[2];
  std::string v322[10];
  std::__split_buffer<std::string> v323[12];
  uint64_t v324;
  std::__shared_weak_count *v325;
  std::string v326;
  std::string v327;
  std::string v328;
  std::string __n;
  std::string v330;
  std::string v331;
  std::string v332;
  std::string v333;
  std::string v334;
  std::string v335;
  std::string v336;
  std::string v337;
  std::string v338;
  std::string v339;
  std::string v340;
  std::string v341;
  std::string __p;
  std::string v343;
  std::string v344;
  void *v345;
  uint64_t v346;
  uint64_t v347;
  std::string v348;
  std::string __s;
  std::string v350;
  std::string v351;
  __int128 v352;
  std::string *v353;

  v2 = MEMORY[0x1E0C80A78](this);
  if (!v3)
  {
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Context is null when validating file", 0);
    return 0;
  }
  v4 = (uint64_t)v3;
  v5 = v2;
  siri::dialogengine::Context::Validate(v3);
  siri::dialogengine::RequestInfo::RequestInfo((siri::dialogengine::RequestInfo *)&v345, (const siri::dialogengine::RequestInfo *)(v4 + 8));
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v344, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
  else
    v344 = __s;
  if ((_DWORD)v345 == 1)
    v7 = "CatVisual.dtd";
  else
    v7 = "CatDialog.dtd";
  std::string::basic_string[abi:ne180100]<0>(&v343, v7);
  if (siri::dialogengine::HasCATExtension(&v344, 0))
  {
    if (SHIBYTE(v343.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&__p, v343.__r_.__value_.__l.__data_, v343.__r_.__value_.__l.__size_);
    else
      __p = v343;
    v8 = (v344.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
       ? &v344
       : (std::string *)v344.__r_.__value_.__r.__words[0];
    v9 = xmlParseFile((const char *)v8);
    siri::dialogengine::ValidateXmlDoc((Context *)v4, v9, (uint64_t)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (*(char *)(v5 + 79) < 0)
    std::string::__init_copy_ctor_external(&v341, *(const std::string::value_type **)(v5 + 56), *(_QWORD *)(v5 + 64));
  else
    v341 = *(std::string *)(v5 + 56);
  size = HIBYTE(v341.__r_.__value_.__r.__words[2]);
  if ((v341.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v341.__r_.__value_.__l.__size_;
  if (!size)
    std::string::operator=(&v341, (const std::string *)(v5 + 80));
  if ((siri::dialogengine::HasCATExtension(&v341, 0) & 1) != 0
    || siri::dialogengine::HasVisualCATExtension(&v341, 0))
  {
    if (SHIBYTE(v343.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v340, v343.__r_.__value_.__l.__data_, v343.__r_.__value_.__l.__size_);
    else
      v340 = v343;
    v11 = (v341.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &v341
        : (std::string *)v341.__r_.__value_.__r.__words[0];
    v12 = xmlParseFile((const char *)v11);
    siri::dialogengine::ValidateXmlDoc((Context *)v4, v12, (uint64_t)&v340);
    if (SHIBYTE(v340.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v340.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v348.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v339, v348.__r_.__value_.__l.__data_, v348.__r_.__value_.__l.__size_);
  else
    v339 = v348;
  std::string::basic_string[abi:ne180100]<0>(v323, "<cat");
  v13 = siri::dialogengine::StringContains(&v339.__r_.__value_.__l.__data_, (char *)v323);
  v14 = v13;
  if (SHIBYTE(v323[0].__end_) < 0)
  {
    operator delete(v323[0].__first_);
    if (!v14)
      goto LABEL_53;
  }
  else if (!v13)
  {
    goto LABEL_53;
  }
  if (SHIBYTE(v343.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v338, v343.__r_.__value_.__l.__data_, v343.__r_.__value_.__l.__size_);
  else
    v338 = v343;
  if ((v339.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v15 = &v339;
  else
    v15 = (std::string *)v339.__r_.__value_.__r.__words[0];
  if ((v339.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v16 = HIBYTE(v339.__r_.__value_.__r.__words[2]);
  else
    v16 = v339.__r_.__value_.__r.__words[1];
  v17 = xmlParseMemory((const char *)v15, v16);
  siri::dialogengine::ValidateXmlDoc((Context *)v4, v17, (uint64_t)&v338);
  if (SHIBYTE(v338.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v338.__r_.__value_.__l.__data_);
LABEL_53:
  if (SHIBYTE(v350.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v337, v350.__r_.__value_.__l.__data_, v350.__r_.__value_.__l.__size_);
  else
    v337 = v350;
  v18 = HIBYTE(v337.__r_.__value_.__r.__words[2]);
  if ((v337.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v18 = v337.__r_.__value_.__l.__size_;
  if (!v18)
  {
    if (SHIBYTE(v353) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)v323, (const std::string::value_type *)v352, *((std::string::size_type *)&v352 + 1));
      if ((*((_BYTE *)&v337.__r_.__value_.__s + 23) & 0x80) == 0)
        goto LABEL_62;
    }
    else
    {
      *(_OWORD *)&v323[0].__first_ = v352;
      v323[0].__end_ = v353;
      if ((*((_BYTE *)&v337.__r_.__value_.__s + 23) & 0x80) == 0)
      {
LABEL_62:
        *(_OWORD *)&v337.__r_.__value_.__l.__data_ = *(_OWORD *)&v323[0].__first_;
        v337.__r_.__value_.__r.__words[2] = (std::string::size_type)v323[0].__end_;
        goto LABEL_63;
      }
    }
    operator delete(v337.__r_.__value_.__l.__data_);
    goto LABEL_62;
  }
LABEL_63:
  std::string::basic_string[abi:ne180100]<0>(v323, "<cat");
  v19 = siri::dialogengine::StringContains(&v337.__r_.__value_.__l.__data_, (char *)v323);
  v20 = v19;
  if (SHIBYTE(v323[0].__end_) < 0)
  {
    operator delete(v323[0].__first_);
    if (!v20)
      goto LABEL_78;
  }
  else if (!v19)
  {
    goto LABEL_78;
  }
  if (SHIBYTE(v343.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v336, v343.__r_.__value_.__l.__data_, v343.__r_.__value_.__l.__size_);
  else
    v336 = v343;
  if ((v337.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v21 = &v337;
  else
    v21 = (std::string *)v337.__r_.__value_.__r.__words[0];
  if ((v337.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v22 = HIBYTE(v337.__r_.__value_.__r.__words[2]);
  else
    v22 = v337.__r_.__value_.__r.__words[1];
  v23 = xmlParseMemory((const char *)v21, v22);
  siri::dialogengine::ValidateXmlDoc((Context *)v4, v23, (uint64_t)&v336);
  if (SHIBYTE(v336.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v336.__r_.__value_.__l.__data_);
LABEL_78:
  std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)(v4 + 616));
  siri::dialogengine::ObjectRegistry::Clear(v24);
  if (*(char *)(v5 + 55) < 0)
  {
    if (!*(_QWORD *)(v5 + 40))
      goto LABEL_118;
  }
  else if (!*(_BYTE *)(v5 + 55))
  {
    goto LABEL_118;
  }
  siri::dialogengine::CatPathToId((unsigned __int8 *)(v5 + 32), v323);
  end_high = HIBYTE(v323[0].__end_);
  if (SHIBYTE(v323[0].__end_) >= 0)
    begin = (std::__split_buffer<std::string>::pointer)HIBYTE(v323[0].__end_);
  else
    begin = v323[0].__begin_;
  v27 = (std::__split_buffer<std::string>::pointer)*(unsigned __int8 *)(v5 + 639);
  v28 = (char)v27;
  if ((char)v27 < 0)
    v27 = *(std::__split_buffer<std::string>::pointer *)(v5 + 624);
  if (begin == v27)
  {
    if (v28 >= 0)
      v29 = (unsigned __int8 *)(v5 + 616);
    else
      v29 = *(unsigned __int8 **)(v5 + 616);
    if (SHIBYTE(v323[0].__end_) < 0)
    {
      first = v323[0].__first_;
      if (!memcmp(v323[0].__first_, v29, (size_t)v323[0].__begin_))
      {
LABEL_117:
        operator delete(first);
        goto LABEL_118;
      }
    }
    else
    {
      if (!HIBYTE(v323[0].__end_))
        goto LABEL_118;
      v30 = v323;
      while (LOBYTE(v30->__first_) == *v29)
      {
        v30 = (std::__split_buffer<std::string> *)((char *)v30 + 1);
        ++v29;
        if (!--end_high)
        {
          if ((HIBYTE(v323[0].__end_) & 0x80) == 0)
            goto LABEL_118;
          goto LABEL_116;
        }
      }
    }
  }
  std::operator+<char>();
  v32 = std::string::append(&v333, ") does not match the ID in the CAT file (");
  v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
  v334.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v334.__r_.__value_.__l.__data_ = v33;
  v32->__r_.__value_.__l.__size_ = 0;
  v32->__r_.__value_.__r.__words[2] = 0;
  v32->__r_.__value_.__r.__words[0] = 0;
  v34 = *(char *)(v5 + 639);
  if (v34 >= 0)
    v35 = (const std::string::value_type *)(v5 + 616);
  else
    v35 = *(const std::string::value_type **)(v5 + 616);
  if (v34 >= 0)
    v36 = *(unsigned __int8 *)(v5 + 639);
  else
    v36 = *(_QWORD *)(v5 + 624);
  v37 = std::string::append(&v334, v35, v36);
  v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
  v335.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v335.__r_.__value_.__l.__data_ = v38;
  v37->__r_.__value_.__l.__size_ = 0;
  v37->__r_.__value_.__r.__words[2] = 0;
  v37->__r_.__value_.__r.__words[0] = 0;
  v39 = std::string::append(&v335, ")");
  v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
  __s1.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__s1.__r_.__value_.__l.__data_ = v40;
  v39->__r_.__value_.__l.__size_ = 0;
  v39->__r_.__value_.__r.__words[2] = 0;
  v39->__r_.__value_.__r.__words[0] = 0;
  siri::dialogengine::Context::AddValidationError(v4, (__int128 *)&__s1, 0);
  if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s1.__r_.__value_.__l.__data_);
  if (SHIBYTE(v335.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v335.__r_.__value_.__l.__data_);
  if (SHIBYTE(v334.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v334.__r_.__value_.__l.__data_);
  if (SHIBYTE(v333.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v333.__r_.__value_.__l.__data_);
  if ((HIBYTE(v323[0].__end_) & 0x80) != 0)
  {
LABEL_116:
    first = v323[0].__first_;
    goto LABEL_117;
  }
LABEL_118:
  v41 = HIBYTE(v341.__r_.__value_.__r.__words[2]);
  if ((v341.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v41 = v341.__r_.__value_.__l.__size_;
  if (v41)
  {
    siri::dialogengine::CatPathToId((unsigned __int8 *)&v341, v323);
    if ((_DWORD)v345)
      goto LABEL_161;
    siri::dialogengine::CatPathToId((unsigned __int8 *)(v5 + 32), &__s1);
    if (*(char *)(v5 + 55) < 0)
    {
      if (*(_QWORD *)(v5 + 40))
        goto LABEL_124;
    }
    else if (*(_BYTE *)(v5 + 55))
    {
LABEL_124:
      v42 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
      if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v43 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
      else
        v43 = __s1.__r_.__value_.__l.__size_;
      if (!v43)
      {
LABEL_159:
        if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__s1.__r_.__value_.__l.__data_);
LABEL_161:
        v56 = *(_BYTE *)(v5 + 127);
        if (v56 < 0)
        {
          if (*(_QWORD *)(v5 + 112))
          {
LABEL_163:
            v57 = HIBYTE(v323[0].__end_);
            if (SHIBYTE(v323[0].__end_) >= 0)
              v58 = (std::__split_buffer<std::string>::pointer)HIBYTE(v323[0].__end_);
            else
              v58 = v323[0].__begin_;
            if (v56 >= 0)
              v59 = (std::__split_buffer<std::string>::pointer)*(unsigned __int8 *)(v5 + 127);
            else
              v59 = *(std::__split_buffer<std::string>::pointer *)(v5 + 112);
            if (v58 == v59)
            {
              if (v56 >= 0)
                v60 = (unsigned __int8 *)(v5 + 104);
              else
                v60 = *(unsigned __int8 **)(v5 + 104);
              if ((HIBYTE(v323[0].__end_) & 0x80) != 0)
              {
                if (!memcmp(v323[0].__first_, v60, (size_t)v323[0].__begin_))
                  goto LABEL_200;
              }
              else
              {
                if (!HIBYTE(v323[0].__end_))
                  goto LABEL_200;
                v61 = v323;
                while (LOBYTE(v61->__first_) == *v60)
                {
                  v61 = (std::__split_buffer<std::string> *)((char *)v61 + 1);
                  ++v60;
                  if (!--v57)
                    goto LABEL_200;
                }
              }
            }
            std::operator+<char>();
            v65 = std::string::append(&v333, ") does not match the ID in the CAT file (");
            v66 = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
            v334.__r_.__value_.__r.__words[2] = v65->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v334.__r_.__value_.__l.__data_ = v66;
            v65->__r_.__value_.__l.__size_ = 0;
            v65->__r_.__value_.__r.__words[2] = 0;
            v65->__r_.__value_.__r.__words[0] = 0;
            v67 = *(char *)(v5 + 127);
            if (v67 >= 0)
              v68 = (const std::string::value_type *)(v5 + 104);
            else
              v68 = *(const std::string::value_type **)(v5 + 104);
            if (v67 >= 0)
              v69 = *(unsigned __int8 *)(v5 + 127);
            else
              v69 = *(_QWORD *)(v5 + 112);
            v70 = std::string::append(&v334, v68, v69);
            v71 = *(_OWORD *)&v70->__r_.__value_.__l.__data_;
            v335.__r_.__value_.__r.__words[2] = v70->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v335.__r_.__value_.__l.__data_ = v71;
            v70->__r_.__value_.__l.__size_ = 0;
            v70->__r_.__value_.__r.__words[2] = 0;
            v70->__r_.__value_.__r.__words[0] = 0;
            v72 = std::string::append(&v335, ")");
            v73 = *(_OWORD *)&v72->__r_.__value_.__l.__data_;
            __s1.__r_.__value_.__r.__words[2] = v72->__r_.__value_.__r.__words[2];
            *(_OWORD *)&__s1.__r_.__value_.__l.__data_ = v73;
            v72->__r_.__value_.__l.__size_ = 0;
            v72->__r_.__value_.__r.__words[2] = 0;
            v72->__r_.__value_.__r.__words[0] = 0;
            siri::dialogengine::Context::AddValidationError(v4, (__int128 *)&__s1, 0);
            if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__s1.__r_.__value_.__l.__data_);
            if (SHIBYTE(v335.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v335.__r_.__value_.__l.__data_);
            if (SHIBYTE(v334.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v334.__r_.__value_.__l.__data_);
            if (SHIBYTE(v333.__r_.__value_.__r.__words[2]) < 0)
            {
              v64 = (void *)v333.__r_.__value_.__r.__words[0];
              goto LABEL_199;
            }
            goto LABEL_200;
          }
        }
        else if (*(_BYTE *)(v5 + 127))
        {
          goto LABEL_163;
        }
        std::operator+<char>();
        v62 = std::string::append(&v335, ") does not specify a CAT ID in the <cat> element");
        v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
        __s1.__r_.__value_.__r.__words[2] = v62->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__s1.__r_.__value_.__l.__data_ = v63;
        v62->__r_.__value_.__l.__size_ = 0;
        v62->__r_.__value_.__r.__words[2] = 0;
        v62->__r_.__value_.__r.__words[0] = 0;
        siri::dialogengine::Context::AddValidationError(v4, (__int128 *)&__s1, 0);
        if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__s1.__r_.__value_.__l.__data_);
        if (SHIBYTE(v335.__r_.__value_.__r.__words[2]) < 0)
        {
          v64 = (void *)v335.__r_.__value_.__r.__words[0];
LABEL_199:
          operator delete(v64);
        }
LABEL_200:
        siri::dialogengine::CatLocalePathToLocale(v5 + 56, &v335);
        siri::dialogengine::GetCanonicalLocale(&v335, 0, &__s1);
        if (SHIBYTE(v335.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v335.__r_.__value_.__l.__data_);
        if (*(char *)(v5 + 79) < 0)
        {
          if (!*(_QWORD *)(v5 + 64))
            goto LABEL_246;
        }
        else if (!*(_BYTE *)(v5 + 79))
        {
          goto LABEL_246;
        }
        v74 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
        if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v75 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
        else
          v75 = __s1.__r_.__value_.__l.__size_;
        v76 = *(unsigned __int8 *)(v5 + 151);
        v77 = (char)v76;
        if ((v76 & 0x80u) != 0)
          v76 = *(_QWORD *)(v5 + 136);
        if (v75 == v76)
        {
          if (v77 >= 0)
            v78 = (unsigned __int8 *)(v5 + 128);
          else
            v78 = *(unsigned __int8 **)(v5 + 128);
          if ((*((_BYTE *)&__s1.__r_.__value_.__s + 23) & 0x80) == 0)
          {
            if (*((_BYTE *)&__s1.__r_.__value_.__s + 23))
            {
              p_s1 = &__s1;
              while (p_s1->__r_.__value_.__s.__data_[0] == *v78)
              {
                p_s1 = (std::string *)((char *)p_s1 + 1);
                ++v78;
                if (!--v74)
                  goto LABEL_246;
              }
              goto LABEL_222;
            }
LABEL_246:
            if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__s1.__r_.__value_.__l.__data_);
            if (SHIBYTE(v323[0].__end_) < 0)
              operator delete(v323[0].__first_);
            goto LABEL_250;
          }
          if (!memcmp(__s1.__r_.__value_.__l.__data_, v78, __s1.__r_.__value_.__l.__size_))
            goto LABEL_246;
        }
LABEL_222:
        std::operator+<char>();
        v80 = std::string::append(&v330, "' is invalid or does not match the locale attribute '");
        v81 = *(_OWORD *)&v80->__r_.__value_.__l.__data_;
        v331.__r_.__value_.__r.__words[2] = v80->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v331.__r_.__value_.__l.__data_ = v81;
        v80->__r_.__value_.__l.__size_ = 0;
        v80->__r_.__value_.__r.__words[2] = 0;
        v80->__r_.__value_.__r.__words[0] = 0;
        v82 = *(char *)(v5 + 151);
        if (v82 >= 0)
          v83 = (const std::string::value_type *)(v5 + 128);
        else
          v83 = *(const std::string::value_type **)(v5 + 128);
        if (v82 >= 0)
          v84 = *(unsigned __int8 *)(v5 + 151);
        else
          v84 = *(_QWORD *)(v5 + 136);
        v85 = std::string::append(&v331, v83, v84);
        v86 = *(_OWORD *)&v85->__r_.__value_.__l.__data_;
        v332.__r_.__value_.__r.__words[2] = v85->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v332.__r_.__value_.__l.__data_ = v86;
        v85->__r_.__value_.__l.__size_ = 0;
        v85->__r_.__value_.__r.__words[2] = 0;
        v85->__r_.__value_.__r.__words[0] = 0;
        v87 = std::string::append(&v332, "' declared in the file '");
        v88 = *(_OWORD *)&v87->__r_.__value_.__l.__data_;
        v333.__r_.__value_.__r.__words[2] = v87->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v333.__r_.__value_.__l.__data_ = v88;
        v87->__r_.__value_.__l.__size_ = 0;
        v87->__r_.__value_.__r.__words[2] = 0;
        v87->__r_.__value_.__r.__words[0] = 0;
        v89 = *(char *)(v5 + 79);
        if (v89 >= 0)
          v90 = (const std::string::value_type *)(v5 + 56);
        else
          v90 = *(const std::string::value_type **)(v5 + 56);
        if (v89 >= 0)
          v91 = *(unsigned __int8 *)(v5 + 79);
        else
          v91 = *(_QWORD *)(v5 + 64);
        v92 = std::string::append(&v333, v90, v91);
        v93 = *(_OWORD *)&v92->__r_.__value_.__l.__data_;
        v334.__r_.__value_.__r.__words[2] = v92->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v334.__r_.__value_.__l.__data_ = v93;
        v92->__r_.__value_.__l.__size_ = 0;
        v92->__r_.__value_.__r.__words[2] = 0;
        v92->__r_.__value_.__r.__words[0] = 0;
        v94 = std::string::append(&v334, "'");
        v95 = *(_OWORD *)&v94->__r_.__value_.__l.__data_;
        v335.__r_.__value_.__r.__words[2] = v94->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v335.__r_.__value_.__l.__data_ = v95;
        v94->__r_.__value_.__l.__size_ = 0;
        v94->__r_.__value_.__r.__words[2] = 0;
        v94->__r_.__value_.__r.__words[0] = 0;
        siri::dialogengine::Context::AddValidationWarning(v4, (__int128 *)&v335, 0);
        if (SHIBYTE(v335.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v335.__r_.__value_.__l.__data_);
        if (SHIBYTE(v334.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v334.__r_.__value_.__l.__data_);
        if (SHIBYTE(v333.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v333.__r_.__value_.__l.__data_);
        if (SHIBYTE(v332.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v332.__r_.__value_.__l.__data_);
        if (SHIBYTE(v331.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v331.__r_.__value_.__l.__data_);
        if (SHIBYTE(v330.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v330.__r_.__value_.__l.__data_);
        goto LABEL_246;
      }
      v44 = (std::__split_buffer<std::string>::pointer)HIBYTE(v323[0].__end_);
      if (SHIBYTE(v323[0].__end_) < 0)
        v44 = v323[0].__begin_;
      if ((std::__split_buffer<std::string>::pointer)v43 == v44)
      {
        if (SHIBYTE(v323[0].__end_) >= 0)
          v45 = (unsigned __int8 *)v323;
        else
          v45 = (unsigned __int8 *)v323[0].__first_;
        if ((*((_BYTE *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
        {
          if (!memcmp(__s1.__r_.__value_.__l.__data_, v45, __s1.__r_.__value_.__l.__size_))
            goto LABEL_159;
        }
        else
        {
          if (!*((_BYTE *)&__s1.__r_.__value_.__s + 23))
            goto LABEL_159;
          v46 = &__s1;
          while (v46->__r_.__value_.__s.__data_[0] == *v45)
          {
            v46 = (std::string *)((char *)v46 + 1);
            ++v45;
            if (!--v42)
              goto LABEL_159;
          }
        }
      }
      std::operator+<char>();
      v48 = std::string::append(&v332, ") does not match the filename ID (");
      v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
      v333.__r_.__value_.__r.__words[2] = v48->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v333.__r_.__value_.__l.__data_ = v49;
      v48->__r_.__value_.__l.__size_ = 0;
      v48->__r_.__value_.__r.__words[2] = 0;
      v48->__r_.__value_.__r.__words[0] = 0;
      if ((v341.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v50 = &v341;
      else
        v50 = (std::string *)v341.__r_.__value_.__r.__words[0];
      if ((v341.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v51 = HIBYTE(v341.__r_.__value_.__r.__words[2]);
      else
        v51 = v341.__r_.__value_.__l.__size_;
      v52 = std::string::append(&v333, (const std::string::value_type *)v50, v51);
      v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
      v334.__r_.__value_.__r.__words[2] = v52->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v334.__r_.__value_.__l.__data_ = v53;
      v52->__r_.__value_.__l.__size_ = 0;
      v52->__r_.__value_.__r.__words[2] = 0;
      v52->__r_.__value_.__r.__words[0] = 0;
      v54 = std::string::append(&v334, ")");
      v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
      v335.__r_.__value_.__r.__words[2] = v54->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v335.__r_.__value_.__l.__data_ = v55;
      v54->__r_.__value_.__l.__size_ = 0;
      v54->__r_.__value_.__r.__words[2] = 0;
      v54->__r_.__value_.__r.__words[0] = 0;
      siri::dialogengine::Context::AddValidationError(v4, (__int128 *)&v335, 0);
      if (SHIBYTE(v335.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v335.__r_.__value_.__l.__data_);
      if (SHIBYTE(v334.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v334.__r_.__value_.__l.__data_);
      if (SHIBYTE(v333.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v333.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v332.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_159;
      v47 = (void *)v332.__r_.__value_.__r.__words[0];
LABEL_158:
      operator delete(v47);
      goto LABEL_159;
    }
    std::string::basic_string[abi:ne180100]<0>(&v335, "No params file exists for this CAT file, e.g., _params.cat.xml");
    siri::dialogengine::Context::AddValidationError(v4, (__int128 *)&v335, 0);
    if ((SHIBYTE(v335.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_159;
    v47 = (void *)v335.__r_.__value_.__r.__words[0];
    goto LABEL_158;
  }
LABEL_250:
  v96 = *(_BYTE *)(v5 + 127);
  if (v96 < 0)
  {
    if (!*(_QWORD *)(v5 + 112))
      goto LABEL_279;
  }
  else if (!*(_BYTE *)(v5 + 127))
  {
    goto LABEL_279;
  }
  v97 = *(_BYTE **)(v5 + 104);
  v98 = *(_QWORD *)(v5 + 112);
  if (v96 >= 0)
    v99 = (unsigned __int8 *)(v5 + 104);
  else
    v99 = *(unsigned __int8 **)(v5 + 104);
  if (v96 >= 0)
    v100 = *(unsigned __int8 *)(v5 + 127);
  else
    v100 = *(_QWORD *)(v5 + 112);
  if (!v100)
    goto LABEL_271;
  v101 = 0;
  do
  {
    v102 = *v99++;
    if (v102 == 35)
      ++v101;
    --v100;
  }
  while (v100);
  if (v101 != 1)
    goto LABEL_271;
  if ((*(_BYTE *)(v5 + 127) & 0x80) != 0)
  {
    if (*v97 == 35)
      goto LABEL_271;
LABEL_270:
    if (v97[v98 - 1] != 35)
      goto LABEL_273;
    goto LABEL_271;
  }
  v97 = (_BYTE *)(v5 + 104);
  v98 = *(unsigned __int8 *)(v5 + 127);
  if (*(_QWORD *)(v5 + 104) != 35)
    goto LABEL_270;
LABEL_271:
  std::operator+<char>();
  siri::dialogengine::Context::AddValidationWarning(v4, (__int128 *)v323, 0);
  if (SHIBYTE(v323[0].__end_) < 0)
    operator delete(v323[0].__first_);
LABEL_273:
  std::string::basic_string[abi:ne180100]<0>(v323, ".cat");
  v103 = siri::dialogengine::StringContains((char **)(v5 + 104), (char *)v323);
  v104 = v103;
  if (SHIBYTE(v323[0].__end_) < 0)
  {
    operator delete(v323[0].__first_);
    if (!v104)
      goto LABEL_279;
  }
  else if (!v103)
  {
    goto LABEL_279;
  }
  std::operator+<char>();
  siri::dialogengine::Context::AddValidationError(v4, (__int128 *)v323, 0);
  if (SHIBYTE(v323[0].__end_) < 0)
    operator delete(v323[0].__first_);
LABEL_279:
  v307 = (siri::dialogengine::Context *)v4;
  v105 = *(_QWORD **)(v5 + 200);
  if (v105 != (_QWORD *)(v5 + 208))
  {
    do
    {
      if (v105[9] >= 2uLL && siri::dialogengine::File::IsUniqueMetadataName((uint64_t)(v105 + 4)))
      {
        std::operator+<char>();
        v106 = std::string::append(&__s1, "' has multiple values; This name must have a unique value.");
        v107 = *(_OWORD *)&v106->__r_.__value_.__l.__data_;
        v323[0].__end_ = (std::__split_buffer<std::string>::pointer)v106->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v323[0].__first_ = v107;
        v106->__r_.__value_.__l.__size_ = 0;
        v106->__r_.__value_.__r.__words[2] = 0;
        v106->__r_.__value_.__r.__words[0] = 0;
        siri::dialogengine::Context::AddValidationError((uint64_t)v307, (__int128 *)v323, 0);
        if (SHIBYTE(v323[0].__end_) < 0)
          operator delete(v323[0].__first_);
        if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__s1.__r_.__value_.__l.__data_);
      }
      v108 = (_QWORD *)v105[1];
      if (v108)
      {
        do
        {
          v109 = v108;
          v108 = (_QWORD *)*v108;
        }
        while (v108);
      }
      else
      {
        do
        {
          v109 = (_QWORD *)v105[2];
          v115 = *v109 == (_QWORD)v105;
          v105 = v109;
        }
        while (!v115);
      }
      v105 = v109;
    }
    while (v109 != (_QWORD *)(v5 + 208));
  }
  std::string::basic_string[abi:ne180100]<0>(v323, "readyForLoc");
  siri::dialogengine::File::GetMetadataUnique(v5, (uint64_t)v323, &v335);
  v110 = v307;
  if (SHIBYTE(v323[0].__end_) < 0)
    operator delete(v323[0].__first_);
  v111 = HIBYTE(v335.__r_.__value_.__r.__words[2]);
  if ((v335.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v111 = v335.__r_.__value_.__l.__size_;
  if (v111)
  {
    siri::dialogengine::StringToLower((uint64_t)&v335, (uint64_t)v323);
    if (SHIBYTE(v335.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v335.__r_.__value_.__l.__data_);
    v335.__r_.__value_.__r.__words[2] = (std::string::size_type)v323[0].__end_;
    *(_OWORD *)&v335.__r_.__value_.__l.__data_ = *(_OWORD *)&v323[0].__first_;
    if (SHIBYTE(v323[0].__end_) < 0)
    {
      if (v335.__r_.__value_.__l.__size_ != 4)
      {
        if (v335.__r_.__value_.__l.__size_ == 5)
        {
          v112 = (std::string *)v335.__r_.__value_.__r.__words[0];
LABEL_306:
          data = (int)v112->__r_.__value_.__l.__data_;
          v114 = v112->__r_.__value_.__s.__data_[4];
          v115 = data == 1936482662 && v114 == 101;
          if (v115)
            goto LABEL_317;
        }
LABEL_315:
        std::string::basic_string[abi:ne180100]<0>(v323, "The value for meta name 'readyForLoc' must be either 'true' or 'false'.");
        siri::dialogengine::Context::AddValidationWarning((uint64_t)v307, (__int128 *)v323, 0);
        if (SHIBYTE(v323[0].__end_) < 0)
          operator delete(v323[0].__first_);
        goto LABEL_317;
      }
      v116 = *(_DWORD *)v335.__r_.__value_.__l.__data_;
    }
    else
    {
      if (HIBYTE(v323[0].__end_) != 4)
      {
        if (HIBYTE(v323[0].__end_) == 5)
        {
          v112 = &v335;
          goto LABEL_306;
        }
        goto LABEL_315;
      }
      v116 = (int)v335.__r_.__value_.__l.__data_;
    }
    if (v116 == 1702195828)
      goto LABEL_317;
    goto LABEL_315;
  }
LABEL_317:
  std::string::basic_string[abi:ne180100]<0>(v323, "sourceLocale");
  siri::dialogengine::File::GetMetadataUnique(v5, (uint64_t)v323, &v334);
  if (SHIBYTE(v323[0].__end_) < 0)
    operator delete(v323[0].__first_);
  v117 = HIBYTE(v334.__r_.__value_.__r.__words[2]);
  if ((v334.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v117 = v334.__r_.__value_.__l.__size_;
  if (v117)
  {
    if ((siri::dialogengine::IsValidLocale((uint64_t)&v334) & 1) == 0)
    {
      std::string::basic_string[abi:ne180100]<0>(v323, "The value for meta name 'sourceLocale' must be a valid locale identifier");
      siri::dialogengine::Context::AddValidationWarning((uint64_t)v307, (__int128 *)v323, 0);
      if (SHIBYTE(v323[0].__end_) < 0)
        operator delete(v323[0].__first_);
    }
  }
  v118 = *(_QWORD *)(v5 + 176);
  v119 = *(_QWORD *)(v5 + 184);
  v306 = v5;
  if (v118 != v119)
  {
    v303 = *(_QWORD *)(v5 + 184);
    do
    {
      (*(void (**)(uint64_t, siri::dialogengine::Context *))(*(_QWORD *)v118 + 24))(v118, v110);
      if (*(char *)(v118 + 207) < 0)
        std::string::__init_copy_ctor_external(&v333, *(const std::string::value_type **)(v118 + 184), *(_QWORD *)(v118 + 192));
      else
        v333 = *(std::string *)(v118 + 184);
      v120 = HIBYTE(v333.__r_.__value_.__r.__words[2]);
      if ((v333.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v120 = v333.__r_.__value_.__l.__size_;
      if (!v120)
        goto LABEL_593;
      memset(v323, 0, 24);
      std::vector<siri::dialogengine::UpdatableDir>::__init_with_size[abi:ne180100]<siri::dialogengine::UpdatableDir*,siri::dialogengine::UpdatableDir*>(v323, v346, v347, 0xAAAAAAAAAAAAAAABLL * ((v347 - v346) >> 5));
      v121 = *(_OWORD *)&v323[0].__first_;
      __s1.__r_.__value_.__r.__words[0] = (std::string::size_type)v323;
      std::vector<siri::dialogengine::UpdatableDir>::__destroy_vector::operator()[abi:ne180100]((void ***)&__s1);
      if ((_QWORD)v121 == *((_QWORD *)&v121 + 1))
      {
        std::string::basic_string[abi:ne180100]<0>(v323, "Template directory not supplied, unable to validate valueFromCat param.");
        v110 = v307;
        siri::dialogengine::Context::AddValidationWarning((uint64_t)v307, (__int128 *)v323, v118 + 240);
        if (SHIBYTE(v323[0].__end_) < 0)
          operator delete(v323[0].__first_);
        goto LABEL_593;
      }
      memset(v323, 0, 24);
      std::vector<siri::dialogengine::UpdatableDir>::__init_with_size[abi:ne180100]<siri::dialogengine::UpdatableDir*,siri::dialogengine::UpdatableDir*>(v323, v346, v347, 0xAAAAAAAAAAAAAAABLL * ((v347 - v346) >> 5));
      v110 = v307;
      siri::dialogengine::FindParamsFile((__int128 **)v323, (uint64_t)&v333, (uint64_t)&v332);
      __s1.__r_.__value_.__r.__words[0] = (std::string::size_type)v323;
      std::vector<siri::dialogengine::UpdatableDir>::__destroy_vector::operator()[abi:ne180100]((void ***)&__s1);
      memset(&v331, 0, sizeof(v331));
      if (SHIBYTE(v351.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v323, v351.__r_.__value_.__l.__data_, v351.__r_.__value_.__l.__size_);
      }
      else
      {
        *(_OWORD *)&v323[0].__first_ = *(_OWORD *)&v351.__r_.__value_.__l.__data_;
        v323[0].__end_ = (std::__split_buffer<std::string>::pointer)v351.__r_.__value_.__r.__words[2];
      }
      if (SHIBYTE(v323[0].__end_) < 0)
      {
        v122 = v323[0].__begin_;
        operator delete(v323[0].__first_);
        if (v122)
        {
LABEL_341:
          if (SHIBYTE(v351.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&__s1, v351.__r_.__value_.__l.__data_, v351.__r_.__value_.__l.__size_);
          else
            __s1 = v351;
          v125 = (_OWORD *)v331.__r_.__value_.__l.__size_;
          if (v331.__r_.__value_.__l.__size_ >= v331.__r_.__value_.__r.__words[2])
          {
            v127 = 0xAAAAAAAAAAAAAAABLL
                 * ((uint64_t)(v331.__r_.__value_.__l.__size_ - v331.__r_.__value_.__r.__words[0]) >> 3);
            v128 = v127 + 1;
            if (v127 + 1 > 0xAAAAAAAAAAAAAAALL)
              std::vector<BOOL>::__throw_length_error[abi:ne180100]();
            if (0x5555555555555556
               * ((uint64_t)(v331.__r_.__value_.__r.__words[2] - v331.__r_.__value_.__r.__words[0]) >> 3) > v128)
              v128 = 0x5555555555555556
                   * ((uint64_t)(v331.__r_.__value_.__r.__words[2] - v331.__r_.__value_.__r.__words[0]) >> 3);
            if (0xAAAAAAAAAAAAAAABLL
               * ((uint64_t)(v331.__r_.__value_.__r.__words[2] - v331.__r_.__value_.__r.__words[0]) >> 3) >= 0x555555555555555)
              v129 = 0xAAAAAAAAAAAAAAALL;
            else
              v129 = v128;
            v323[0].__end_cap_.__value_ = (std::allocator<std::string> *)&v331.__r_.__value_.__r.__words[2];
            if (v129)
              v130 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v331.__r_.__value_.__r.__words[2], v129);
            else
              v130 = 0;
            v135 = v130 + v127;
            v323[0].__first_ = v130;
            v323[0].__begin_ = v135;
            v323[0].__end_cap_.__value_ = &v130[v129];
            v136 = *(_OWORD *)&__s1.__r_.__value_.__l.__data_;
            v135->__r_.__value_.__r.__words[2] = __s1.__r_.__value_.__r.__words[2];
            *(_OWORD *)&v135->__r_.__value_.__l.__data_ = v136;
            memset(&__s1, 0, sizeof(__s1));
            v323[0].__end_ = v135 + 1;
            std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)&v331, v323);
            v137 = v331.__r_.__value_.__l.__size_;
            std::__split_buffer<std::string>::~__split_buffer(v323);
            v331.__r_.__value_.__l.__size_ = v137;
            if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__s1.__r_.__value_.__l.__data_);
          }
          else
          {
            v126 = *(_OWORD *)&__s1.__r_.__value_.__l.__data_;
            *(_QWORD *)(v331.__r_.__value_.__l.__size_ + 16) = *((_QWORD *)&__s1.__r_.__value_.__l + 2);
            *v125 = v126;
            v331.__r_.__value_.__l.__size_ = (std::string::size_type)v125 + 24;
          }
          goto LABEL_371;
        }
      }
      else if (HIBYTE(v323[0].__end_))
      {
        goto LABEL_341;
      }
      v123 = v331.__r_.__value_.__l.__size_;
      if (v331.__r_.__value_.__l.__size_ >= v331.__r_.__value_.__r.__words[2])
      {
        v131 = 0xAAAAAAAAAAAAAAABLL
             * ((uint64_t)(v331.__r_.__value_.__l.__size_ - v331.__r_.__value_.__r.__words[0]) >> 3);
        v132 = v131 + 1;
        if (v131 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<BOOL>::__throw_length_error[abi:ne180100]();
        if (0x5555555555555556
           * ((uint64_t)(v331.__r_.__value_.__r.__words[2] - v331.__r_.__value_.__r.__words[0]) >> 3) > v132)
          v132 = 0x5555555555555556
               * ((uint64_t)(v331.__r_.__value_.__r.__words[2] - v331.__r_.__value_.__r.__words[0]) >> 3);
        if (0xAAAAAAAAAAAAAAABLL
           * ((uint64_t)(v331.__r_.__value_.__r.__words[2] - v331.__r_.__value_.__r.__words[0]) >> 3) >= 0x555555555555555)
          v133 = 0xAAAAAAAAAAAAAAALL;
        else
          v133 = v132;
        v323[0].__end_cap_.__value_ = (std::allocator<std::string> *)&v331.__r_.__value_.__r.__words[2];
        if (v133)
          v134 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v331.__r_.__value_.__r.__words[2], v133);
        else
          v134 = 0;
        v323[0].__first_ = v134;
        v323[0].__begin_ = v134 + v131;
        v323[0].__end_ = v323[0].__begin_;
        v323[0].__end_cap_.__value_ = &v134[v133];
        std::string::basic_string[abi:ne180100]<0>(v323[0].__begin_->__r_.__value_.__r.__words, "en");
        ++v323[0].__end_;
        std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)&v331, v323);
        v124 = v331.__r_.__value_.__l.__size_;
        std::__split_buffer<std::string>::~__split_buffer(v323);
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>((_QWORD *)v331.__r_.__value_.__l.__size_, "en");
        v124 = v123 + 24;
      }
      v331.__r_.__value_.__l.__size_ = v124;
LABEL_371:
      memset(v323, 0, 24);
      std::vector<siri::dialogengine::UpdatableDir>::__init_with_size[abi:ne180100]<siri::dialogengine::UpdatableDir*,siri::dialogengine::UpdatableDir*>(v323, v346, v347, 0xAAAAAAAAAAAAAAABLL * ((v347 - v346) >> 5));
      siri::dialogengine::FindLocaleFile((__int128 **)v323, (__int128 **)&v331, (uint64_t)&v333, (uint64_t)&v330);
      __s1.__r_.__value_.__r.__words[0] = (std::string::size_type)v323;
      std::vector<siri::dialogengine::UpdatableDir>::__destroy_vector::operator()[abi:ne180100]((void ***)&__s1);
      v138 = HIBYTE(v330.__r_.__value_.__r.__words[2]);
      if ((v330.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v138 = v330.__r_.__value_.__l.__size_;
      if (v138)
      {
        v139 = HIBYTE(v332.__r_.__value_.__r.__words[2]);
        if ((v332.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v139 = v332.__r_.__value_.__l.__size_;
        if (v139)
        {
          siri::dialogengine::Context::Context((siri::dialogengine::Context *)v323);
          siri::dialogengine::RequestInfo::RequestInfo((siri::dialogengine::RequestInfo *)&__s1);
          if (SHIBYTE(v351.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&__n, v351.__r_.__value_.__l.__data_, v351.__r_.__value_.__l.__size_);
          else
            __n = v351;
          std::string::operator=(v321, &__n);
          if (SHIBYTE(__n.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__n.__r_.__value_.__l.__data_);
          memset(&__n, 0, sizeof(__n));
          std::vector<siri::dialogengine::UpdatableDir>::__init_with_size[abi:ne180100]<siri::dialogengine::UpdatableDir*,siri::dialogengine::UpdatableDir*>(&__n, v346, v347, 0xAAAAAAAAAAAAAAABLL * ((v347 - v346) >> 5));
          std::vector<siri::dialogengine::UpdatableDir>::__assign_with_size[abi:ne180100]<siri::dialogengine::UpdatableDir*,siri::dialogengine::UpdatableDir*>((uint64_t)&__s1.__r_.__value_.__l.__size_, (std::string *)__n.__r_.__value_.__l.__data_, (std::string *)__n.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(__n.__r_.__value_.__l.__size_ - __n.__r_.__value_.__r.__words[0]) >> 5));
          v328.__r_.__value_.__r.__words[0] = (std::string::size_type)&__n;
          std::vector<siri::dialogengine::UpdatableDir>::__destroy_vector::operator()[abi:ne180100]((void ***)&v328);
          std::string::operator=(v320, &v332);
          std::string::operator=(v322, &v330);
          std::string::operator=(v319, &v333);
          siri::dialogengine::Context::SetRequestInfo((uint64_t)v323, (uint64_t)&__s1);
          siri::dialogengine::RequestInfo::~RequestInfo((void **)&__s1.__r_.__value_.__l.__data_);
          if ((siri::dialogengine::Context::Load((siri::dialogengine::Context *)v323) & 1) != 0)
          {
            v146 = v324;
            v316 = v324;
            v317 = v325;
            if (v325)
            {
              p_shared_owners = (unint64_t *)&v325->__shared_owners_;
              do
                v148 = __ldxr(p_shared_owners);
              while (__stxr(v148 + 1, p_shared_owners));
            }
            v304 = v118;
            memset(&__s1, 0, sizeof(__s1));
            std::vector<siri::dialogengine::Parameter>::__init_with_size[abi:ne180100]<siri::dialogengine::Parameter*,siri::dialogengine::Parameter*>(&__s1, *(_QWORD *)(v146 + 176), *(_QWORD *)(v146 + 184), 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(*(_QWORD *)(v146 + 184) - *(_QWORD *)(v146 + 176)) >> 4));
            v149 = __s1.__r_.__value_.__l.__size_;
            v305 = __s1.__r_.__value_.__l.__size_;
            for (i = __s1.__r_.__value_.__r.__words[0]; ; i += 336)
            {
              if (i == v149)
              {
                __n.__r_.__value_.__r.__words[0] = (std::string::size_type)&__s1;
                std::vector<siri::dialogengine::Parameter>::__destroy_vector::operator()[abi:ne180100]((void ***)&__n);
                v217 = v317;
                v5 = v306;
                v110 = v307;
                v119 = v303;
                v118 = v304;
                if (v317)
                {
                  v218 = (unint64_t *)&v317->__shared_owners_;
                  do
                    v219 = __ldaxr(v218);
                  while (__stlxr(v219 - 1, v218));
                  if (!v219)
                  {
                    ((void (*)(std::__shared_weak_count *))v217->__on_zero_shared)(v217);
                    std::__shared_weak_count::__release_weak(v217);
                  }
                }
                goto LABEL_588;
              }
              v152 = *(_QWORD *)(v306 + 176);
              v151 = *(_QWORD *)(v306 + 184);
              if (v152 == v151)
                goto LABEL_539;
              v153 = (_OWORD *)(i + 32);
              while (1)
              {
                if (*(char *)(i + 31) < 0)
                {
                  std::string::__init_copy_ctor_external(&__n, *(const std::string::value_type **)(i + 8), *(_QWORD *)(i + 16));
                }
                else
                {
                  v154 = *(_OWORD *)(i + 8);
                  __n.__r_.__value_.__r.__words[2] = *(_QWORD *)(i + 24);
                  *(_OWORD *)&__n.__r_.__value_.__l.__data_ = v154;
                }
                v155 = (__int128 *)(v152 + 8);
                if (*(char *)(v152 + 31) < 0)
                {
                  std::string::__init_copy_ctor_external(&v328, *(const std::string::value_type **)(v152 + 8), *(_QWORD *)(v152 + 16));
                }
                else
                {
                  v156 = *v155;
                  v328.__r_.__value_.__r.__words[2] = *(_QWORD *)(v152 + 24);
                  *(_OWORD *)&v328.__r_.__value_.__l.__data_ = v156;
                }
                v157 = HIBYTE(__n.__r_.__value_.__r.__words[2]);
                v158 = HIBYTE(__n.__r_.__value_.__r.__words[2]);
                if ((__n.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v159 = HIBYTE(__n.__r_.__value_.__r.__words[2]);
                else
                  v159 = __n.__r_.__value_.__l.__size_;
                v160 = HIBYTE(v328.__r_.__value_.__r.__words[2]);
                v161 = SHIBYTE(v328.__r_.__value_.__r.__words[2]);
                if ((v328.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                  v160 = v328.__r_.__value_.__l.__size_;
                if (v159 != v160)
                  goto LABEL_416;
                v162 = (void *)v328.__r_.__value_.__r.__words[0];
                v163 = (v328.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                     ? &v328
                     : (std::string *)v328.__r_.__value_.__r.__words[0];
                if (SHIBYTE(__n.__r_.__value_.__r.__words[2]) < 0)
                  break;
                if (!*((_BYTE *)&__n.__r_.__value_.__s + 23))
                  goto LABEL_419;
                p_n = &__n;
                while (p_n->__r_.__value_.__s.__data_[0] == v163->__r_.__value_.__s.__data_[0])
                {
                  p_n = (std::string *)((char *)p_n + 1);
                  v163 = (std::string *)((char *)v163 + 1);
                  if (!--v157)
                    goto LABEL_419;
                }
LABEL_416:
                if (v161 < 0)
                {
                  operator delete(v328.__r_.__value_.__l.__data_);
                  if ((*((_BYTE *)&__n.__r_.__value_.__s + 23) & 0x80) != 0)
LABEL_424:
                    operator delete(__n.__r_.__value_.__l.__data_);
                }
                else if (v158 < 0)
                {
                  goto LABEL_424;
                }
LABEL_464:
                v152 += 336;
                if (v152 == v151)
                  goto LABEL_539;
              }
              if (memcmp(__n.__r_.__value_.__l.__data_, v163, __n.__r_.__value_.__l.__size_))
                goto LABEL_416;
LABEL_419:
              v165 = *(unsigned __int8 *)(v152 + 232);
              if (v161 < 0)
              {
                operator delete(v162);
                if ((*((_BYTE *)&__n.__r_.__value_.__s + 23) & 0x80) == 0)
                  goto LABEL_421;
LABEL_426:
                operator delete(__n.__r_.__value_.__l.__data_);
                if (v165)
                  goto LABEL_464;
                goto LABEL_427;
              }
              if (v158 < 0)
                goto LABEL_426;
LABEL_421:
              if (v165)
                goto LABEL_464;
LABEL_427:
              if (*(char *)(v152 + 207) < 0)
                std::string::__init_copy_ctor_external(&__n, *(const std::string::value_type **)(v152 + 184), *(_QWORD *)(v152 + 192));
              else
                __n = *(std::string *)(v152 + 184);
              if ((SHIBYTE(__n.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
                if (*((_BYTE *)&__n.__r_.__value_.__s + 23))
                  goto LABEL_470;
LABEL_434:
                v167 = (_OWORD *)(v152 + 32);
                if (*(char *)(v152 + 55) < 0)
                {
                  std::string::__init_copy_ctor_external(&__n, *(const std::string::value_type **)(v152 + 32), *(_QWORD *)(v152 + 40));
                }
                else
                {
                  *(_OWORD *)&__n.__r_.__value_.__l.__data_ = *v167;
                  __n.__r_.__value_.__r.__words[2] = *(_QWORD *)(v152 + 48);
                }
                if (*(char *)(i + 55) < 0)
                {
                  std::string::__init_copy_ctor_external(&v328, *(const std::string::value_type **)(i + 32), *(_QWORD *)(i + 40));
                }
                else
                {
                  *(_OWORD *)&v328.__r_.__value_.__l.__data_ = *v153;
                  v328.__r_.__value_.__r.__words[2] = *(_QWORD *)(i + 48);
                }
                v168 = HIBYTE(__n.__r_.__value_.__r.__words[2]);
                if ((__n.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v169 = HIBYTE(__n.__r_.__value_.__r.__words[2]);
                else
                  v169 = __n.__r_.__value_.__l.__size_;
                v170 = HIBYTE(v328.__r_.__value_.__r.__words[2]);
                v171 = SHIBYTE(v328.__r_.__value_.__r.__words[2]);
                if ((v328.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                  v170 = v328.__r_.__value_.__l.__size_;
                if (v169 == v170)
                {
                  if ((v328.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v172 = &v328;
                  else
                    v172 = (std::string *)v328.__r_.__value_.__r.__words[0];
                  if (SHIBYTE(__n.__r_.__value_.__r.__words[2]) < 0)
                  {
                    v181 = memcmp(__n.__r_.__value_.__l.__data_, v172, __n.__r_.__value_.__l.__size_) == 0;
                    if (v171 < 0)
                      goto LABEL_462;
                  }
                  else
                  {
                    if (*((_BYTE *)&__n.__r_.__value_.__s + 23))
                    {
                      v173 = HIBYTE(__n.__r_.__value_.__r.__words[2]) - 1;
                      v174 = &__n;
                      do
                      {
                        v176 = v174->__r_.__value_.__s.__data_[0];
                        v174 = (std::string *)((char *)v174 + 1);
                        v175 = v176;
                        v178 = v172->__r_.__value_.__s.__data_[0];
                        v172 = (std::string *)((char *)v172 + 1);
                        v177 = v178;
                        v180 = v173-- != 0;
                        v181 = v175 == v177;
                      }
                      while (v175 == v177 && v180);
                      if ((SHIBYTE(v328.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                        goto LABEL_458;
LABEL_462:
                      operator delete(v328.__r_.__value_.__l.__data_);
                      if ((*((_BYTE *)&__n.__r_.__value_.__s + 23) & 0x80) == 0)
                      {
LABEL_459:
                        if (!v181)
                          goto LABEL_472;
                        goto LABEL_464;
                      }
LABEL_463:
                      operator delete(__n.__r_.__value_.__l.__data_);
                      if (!v181)
                      {
LABEL_472:
                        if (*(char *)(v152 + 31) < 0)
                        {
                          std::string::__init_copy_ctor_external(&v310, *(const std::string::value_type **)(v152 + 8), *(_QWORD *)(v152 + 16));
                        }
                        else
                        {
                          v183 = *v155;
                          v310.__r_.__value_.__r.__words[2] = *(_QWORD *)(v152 + 24);
                          *(_OWORD *)&v310.__r_.__value_.__l.__data_ = v183;
                        }
                        v195 = std::string::insert(&v310, 0, "ValueFromCat Parameter '");
                        v196 = *(_OWORD *)&v195->__r_.__value_.__l.__data_;
                        v311.__r_.__value_.__r.__words[2] = v195->__r_.__value_.__r.__words[2];
                        *(_OWORD *)&v311.__r_.__value_.__l.__data_ = v196;
                        v195->__r_.__value_.__l.__size_ = 0;
                        v195->__r_.__value_.__r.__words[2] = 0;
                        v195->__r_.__value_.__r.__words[0] = 0;
                        v197 = std::string::append(&v311, "' of type '");
                        v198 = *(_OWORD *)&v197->__r_.__value_.__l.__data_;
                        v312.__r_.__value_.__r.__words[2] = v197->__r_.__value_.__r.__words[2];
                        *(_OWORD *)&v312.__r_.__value_.__l.__data_ = v198;
                        v197->__r_.__value_.__l.__size_ = 0;
                        v197->__r_.__value_.__r.__words[2] = 0;
                        v197->__r_.__value_.__r.__words[0] = 0;
                        if (*(char *)(v152 + 55) < 0)
                        {
                          std::string::__init_copy_ctor_external(&v309, *(const std::string::value_type **)(v152 + 32), *(_QWORD *)(v152 + 40));
                        }
                        else
                        {
                          *(_OWORD *)&v309.__r_.__value_.__l.__data_ = *v167;
                          v309.__r_.__value_.__r.__words[2] = *(_QWORD *)(v152 + 48);
                        }
                        if ((v309.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                          v199 = &v309;
                        else
                          v199 = (std::string *)v309.__r_.__value_.__r.__words[0];
                        if ((v309.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                          v200 = HIBYTE(v309.__r_.__value_.__r.__words[2]);
                        else
                          v200 = v309.__r_.__value_.__l.__size_;
                        v201 = std::string::append(&v312, (const std::string::value_type *)v199, v200);
                        v202 = *(_OWORD *)&v201->__r_.__value_.__l.__data_;
                        v313.__r_.__value_.__r.__words[2] = v201->__r_.__value_.__r.__words[2];
                        *(_OWORD *)&v313.__r_.__value_.__l.__data_ = v202;
                        v201->__r_.__value_.__l.__size_ = 0;
                        v201->__r_.__value_.__r.__words[2] = 0;
                        v201->__r_.__value_.__r.__words[0] = 0;
                        v203 = std::string::append(&v313, "' conflicts with parameter in valueFromCat file '");
                        v204 = *(_OWORD *)&v203->__r_.__value_.__l.__data_;
                        v314.__r_.__value_.__r.__words[2] = v203->__r_.__value_.__r.__words[2];
                        *(_OWORD *)&v314.__r_.__value_.__l.__data_ = v204;
                        v203->__r_.__value_.__l.__size_ = 0;
                        v203->__r_.__value_.__r.__words[2] = 0;
                        v203->__r_.__value_.__r.__words[0] = 0;
                        if ((v333.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                          v205 = &v333;
                        else
                          v205 = (std::string *)v333.__r_.__value_.__r.__words[0];
                        if ((v333.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                          v206 = HIBYTE(v333.__r_.__value_.__r.__words[2]);
                        else
                          v206 = v333.__r_.__value_.__l.__size_;
                        v207 = std::string::append(&v314, (const std::string::value_type *)v205, v206);
                        v208 = *(_OWORD *)&v207->__r_.__value_.__l.__data_;
                        v315.__r_.__value_.__r.__words[2] = v207->__r_.__value_.__r.__words[2];
                        *(_OWORD *)&v315.__r_.__value_.__l.__data_ = v208;
                        v207->__r_.__value_.__l.__size_ = 0;
                        v207->__r_.__value_.__r.__words[2] = 0;
                        v207->__r_.__value_.__r.__words[0] = 0;
                        v209 = std::string::append(&v315, "' of type '");
                        v210 = *(_OWORD *)&v209->__r_.__value_.__l.__data_;
                        v327.__r_.__value_.__r.__words[2] = v209->__r_.__value_.__r.__words[2];
                        *(_OWORD *)&v327.__r_.__value_.__l.__data_ = v210;
                        v209->__r_.__value_.__l.__size_ = 0;
                        v209->__r_.__value_.__r.__words[2] = 0;
                        v209->__r_.__value_.__r.__words[0] = 0;
                        if (*(char *)(i + 55) < 0)
                        {
                          std::string::__init_copy_ctor_external(&v308, *(const std::string::value_type **)(i + 32), *(_QWORD *)(i + 40));
                        }
                        else
                        {
                          *(_OWORD *)&v308.__r_.__value_.__l.__data_ = *v153;
                          v308.__r_.__value_.__r.__words[2] = *(_QWORD *)(i + 48);
                        }
                        if ((v308.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                          v211 = &v308;
                        else
                          v211 = (std::string *)v308.__r_.__value_.__r.__words[0];
                        if ((v308.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                          v212 = HIBYTE(v308.__r_.__value_.__r.__words[2]);
                        else
                          v212 = v308.__r_.__value_.__l.__size_;
                        v213 = std::string::append(&v327, (const std::string::value_type *)v211, v212);
                        v214 = *(_OWORD *)&v213->__r_.__value_.__l.__data_;
                        v328.__r_.__value_.__r.__words[2] = v213->__r_.__value_.__r.__words[2];
                        *(_OWORD *)&v328.__r_.__value_.__l.__data_ = v214;
                        v213->__r_.__value_.__l.__size_ = 0;
                        v213->__r_.__value_.__r.__words[2] = 0;
                        v213->__r_.__value_.__r.__words[0] = 0;
                        v215 = std::string::append(&v328, "'.");
                        v216 = *(_OWORD *)&v215->__r_.__value_.__l.__data_;
                        __n.__r_.__value_.__r.__words[2] = v215->__r_.__value_.__r.__words[2];
                        *(_OWORD *)&__n.__r_.__value_.__l.__data_ = v216;
                        v215->__r_.__value_.__l.__size_ = 0;
                        v215->__r_.__value_.__r.__words[2] = 0;
                        v215->__r_.__value_.__r.__words[0] = 0;
                        siri::dialogengine::Context::AddValidationWarning((uint64_t)v307, (__int128 *)&__n, v152 + 240);
                        if (SHIBYTE(__n.__r_.__value_.__r.__words[2]) < 0)
                          operator delete(__n.__r_.__value_.__l.__data_);
                        if (SHIBYTE(v328.__r_.__value_.__r.__words[2]) < 0)
                          operator delete(v328.__r_.__value_.__l.__data_);
                        if (SHIBYTE(v308.__r_.__value_.__r.__words[2]) < 0)
                          operator delete(v308.__r_.__value_.__l.__data_);
                        if (SHIBYTE(v327.__r_.__value_.__r.__words[2]) < 0)
                          operator delete(v327.__r_.__value_.__l.__data_);
                        if (SHIBYTE(v315.__r_.__value_.__r.__words[2]) < 0)
                          operator delete(v315.__r_.__value_.__l.__data_);
                        if (SHIBYTE(v314.__r_.__value_.__r.__words[2]) < 0)
                          operator delete(v314.__r_.__value_.__l.__data_);
                        if (SHIBYTE(v313.__r_.__value_.__r.__words[2]) < 0)
                          operator delete(v313.__r_.__value_.__l.__data_);
                        if (SHIBYTE(v309.__r_.__value_.__r.__words[2]) < 0)
                          operator delete(v309.__r_.__value_.__l.__data_);
                        if (SHIBYTE(v312.__r_.__value_.__r.__words[2]) < 0)
                          operator delete(v312.__r_.__value_.__l.__data_);
                        if (SHIBYTE(v311.__r_.__value_.__r.__words[2]) < 0)
                          operator delete(v311.__r_.__value_.__l.__data_);
                        if (SHIBYTE(v310.__r_.__value_.__r.__words[2]) < 0)
                        {
                          v194 = (void *)v310.__r_.__value_.__r.__words[0];
                          goto LABEL_538;
                        }
                        goto LABEL_539;
                      }
                      goto LABEL_464;
                    }
                    v181 = 1;
                    if (SHIBYTE(v328.__r_.__value_.__r.__words[2]) < 0)
                      goto LABEL_462;
                  }
                }
                else
                {
                  v181 = 0;
                  if (SHIBYTE(v328.__r_.__value_.__r.__words[2]) < 0)
                    goto LABEL_462;
                }
LABEL_458:
                if ((v168 & 0x80) == 0)
                  goto LABEL_459;
                goto LABEL_463;
              }
              v166 = __n.__r_.__value_.__l.__size_;
              operator delete(__n.__r_.__value_.__l.__data_);
              if (!v166)
                goto LABEL_434;
LABEL_470:
              if (*(char *)(v152 + 31) < 0)
              {
                std::string::__init_copy_ctor_external(&v314, *(const std::string::value_type **)(v152 + 8), *(_QWORD *)(v152 + 16));
              }
              else
              {
                v182 = *v155;
                v314.__r_.__value_.__r.__words[2] = *(_QWORD *)(v152 + 24);
                *(_OWORD *)&v314.__r_.__value_.__l.__data_ = v182;
              }
              v184 = std::string::insert(&v314, 0, "ValueFromCat Parameter '");
              v185 = *(_OWORD *)&v184->__r_.__value_.__l.__data_;
              v315.__r_.__value_.__r.__words[2] = v184->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v315.__r_.__value_.__l.__data_ = v185;
              v184->__r_.__value_.__l.__size_ = 0;
              v184->__r_.__value_.__r.__words[2] = 0;
              v184->__r_.__value_.__r.__words[0] = 0;
              v186 = std::string::append(&v315, "' collides with parameter in valueFromCat file '");
              v187 = *(_OWORD *)&v186->__r_.__value_.__l.__data_;
              v327.__r_.__value_.__r.__words[2] = v186->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v327.__r_.__value_.__l.__data_ = v187;
              v186->__r_.__value_.__l.__size_ = 0;
              v186->__r_.__value_.__r.__words[2] = 0;
              v186->__r_.__value_.__r.__words[0] = 0;
              if ((v333.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v188 = &v333;
              else
                v188 = (std::string *)v333.__r_.__value_.__r.__words[0];
              if ((v333.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v189 = HIBYTE(v333.__r_.__value_.__r.__words[2]);
              else
                v189 = v333.__r_.__value_.__l.__size_;
              v190 = std::string::append(&v327, (const std::string::value_type *)v188, v189);
              v191 = *(_OWORD *)&v190->__r_.__value_.__l.__data_;
              v328.__r_.__value_.__r.__words[2] = v190->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v328.__r_.__value_.__l.__data_ = v191;
              v190->__r_.__value_.__l.__size_ = 0;
              v190->__r_.__value_.__r.__words[2] = 0;
              v190->__r_.__value_.__r.__words[0] = 0;
              v192 = std::string::append(&v328, "'.");
              v193 = *(_OWORD *)&v192->__r_.__value_.__l.__data_;
              __n.__r_.__value_.__r.__words[2] = v192->__r_.__value_.__r.__words[2];
              *(_OWORD *)&__n.__r_.__value_.__l.__data_ = v193;
              v192->__r_.__value_.__l.__size_ = 0;
              v192->__r_.__value_.__r.__words[2] = 0;
              v192->__r_.__value_.__r.__words[0] = 0;
              siri::dialogengine::Context::AddValidationWarning((uint64_t)v307, (__int128 *)&__n, v152 + 240);
              if (SHIBYTE(__n.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__n.__r_.__value_.__l.__data_);
              if (SHIBYTE(v328.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v328.__r_.__value_.__l.__data_);
              if (SHIBYTE(v327.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v327.__r_.__value_.__l.__data_);
              if (SHIBYTE(v315.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v315.__r_.__value_.__l.__data_);
              if (SHIBYTE(v314.__r_.__value_.__r.__words[2]) < 0)
              {
                v194 = (void *)v314.__r_.__value_.__r.__words[0];
LABEL_538:
                operator delete(v194);
              }
LABEL_539:
              v149 = v305;
            }
          }
          if (SHIBYTE(v326.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&__s1, v326.__r_.__value_.__l.__data_, v326.__r_.__value_.__l.__size_);
          else
            __s1 = v326;
          std::operator+<char>();
          v232 = std::string::append(&v327, "'. ");
          v233 = *(_OWORD *)&v232->__r_.__value_.__l.__data_;
          v328.__r_.__value_.__r.__words[2] = v232->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v328.__r_.__value_.__l.__data_ = v233;
          v232->__r_.__value_.__l.__size_ = 0;
          v232->__r_.__value_.__r.__words[2] = 0;
          v232->__r_.__value_.__r.__words[0] = 0;
          if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v234 = &__s1;
          else
            v234 = (std::string *)__s1.__r_.__value_.__r.__words[0];
          if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v235 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
          else
            v235 = __s1.__r_.__value_.__l.__size_;
          v236 = std::string::append(&v328, (const std::string::value_type *)v234, v235);
          v237 = *(_OWORD *)&v236->__r_.__value_.__l.__data_;
          __n.__r_.__value_.__r.__words[2] = v236->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__n.__r_.__value_.__l.__data_ = v237;
          v236->__r_.__value_.__l.__size_ = 0;
          v236->__r_.__value_.__r.__words[2] = 0;
          v236->__r_.__value_.__r.__words[0] = 0;
          siri::dialogengine::Context::AddValidationError((uint64_t)v307, (__int128 *)&__n, v118 + 240);
          if (SHIBYTE(__n.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__n.__r_.__value_.__l.__data_);
          if (SHIBYTE(v328.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v328.__r_.__value_.__l.__data_);
          if (SHIBYTE(v327.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v327.__r_.__value_.__l.__data_);
          if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__s1.__r_.__value_.__l.__data_);
LABEL_588:
          siri::dialogengine::Context::~Context((siri::dialogengine::Context *)v323);
          goto LABEL_589;
        }
        std::operator+<char>();
        v143 = std::string::append(&v328, "' referenced by valueFromCat parameter '");
        v144 = *(_OWORD *)&v143->__r_.__value_.__l.__data_;
        __n.__r_.__value_.__r.__words[2] = v143->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__n.__r_.__value_.__l.__data_ = v144;
        v143->__r_.__value_.__l.__size_ = 0;
        v143->__r_.__value_.__r.__words[2] = 0;
        v143->__r_.__value_.__r.__words[0] = 0;
        if (*(char *)(v118 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(&v327, *(const std::string::value_type **)(v118 + 8), *(_QWORD *)(v118 + 16));
        }
        else
        {
          v145 = *(_OWORD *)(v118 + 8);
          v327.__r_.__value_.__r.__words[2] = *(_QWORD *)(v118 + 24);
          *(_OWORD *)&v327.__r_.__value_.__l.__data_ = v145;
        }
        if ((v327.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v226 = &v327;
        else
          v226 = (std::string *)v327.__r_.__value_.__r.__words[0];
        if ((v327.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v227 = HIBYTE(v327.__r_.__value_.__r.__words[2]);
        else
          v227 = v327.__r_.__value_.__l.__size_;
        v228 = std::string::append(&__n, (const std::string::value_type *)v226, v227);
        v229 = *(_OWORD *)&v228->__r_.__value_.__l.__data_;
        __s1.__r_.__value_.__r.__words[2] = v228->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__s1.__r_.__value_.__l.__data_ = v229;
        v228->__r_.__value_.__l.__size_ = 0;
        v228->__r_.__value_.__r.__words[2] = 0;
        v228->__r_.__value_.__r.__words[0] = 0;
        v230 = std::string::append(&__s1, "' has no _params file, so there can be no parameter collisions");
        v231 = *(_OWORD *)&v230->__r_.__value_.__l.__data_;
        v323[0].__end_ = (std::__split_buffer<std::string>::pointer)v230->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v323[0].__first_ = v231;
        v230->__r_.__value_.__l.__size_ = 0;
        v230->__r_.__value_.__r.__words[2] = 0;
        v230->__r_.__value_.__r.__words[0] = 0;
        siri::dialogengine::Log::Debug((siri::dialogengine *)v323);
      }
      else
      {
        std::operator+<char>();
        v140 = std::string::append(&v328, "' referenced by valueFromCat parameter '");
        v141 = *(_OWORD *)&v140->__r_.__value_.__l.__data_;
        __n.__r_.__value_.__r.__words[2] = v140->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__n.__r_.__value_.__l.__data_ = v141;
        v140->__r_.__value_.__l.__size_ = 0;
        v140->__r_.__value_.__r.__words[2] = 0;
        v140->__r_.__value_.__r.__words[0] = 0;
        if (*(char *)(v118 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(&v327, *(const std::string::value_type **)(v118 + 8), *(_QWORD *)(v118 + 16));
        }
        else
        {
          v142 = *(_OWORD *)(v118 + 8);
          v327.__r_.__value_.__r.__words[2] = *(_QWORD *)(v118 + 24);
          *(_OWORD *)&v327.__r_.__value_.__l.__data_ = v142;
        }
        if ((v327.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v220 = &v327;
        else
          v220 = (std::string *)v327.__r_.__value_.__r.__words[0];
        if ((v327.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v221 = HIBYTE(v327.__r_.__value_.__r.__words[2]);
        else
          v221 = v327.__r_.__value_.__l.__size_;
        v222 = std::string::append(&__n, (const std::string::value_type *)v220, v221);
        v223 = *(_OWORD *)&v222->__r_.__value_.__l.__data_;
        __s1.__r_.__value_.__r.__words[2] = v222->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__s1.__r_.__value_.__l.__data_ = v223;
        v222->__r_.__value_.__l.__size_ = 0;
        v222->__r_.__value_.__r.__words[2] = 0;
        v222->__r_.__value_.__r.__words[0] = 0;
        v224 = std::string::append(&__s1, "' was not found");
        v225 = *(_OWORD *)&v224->__r_.__value_.__l.__data_;
        v323[0].__end_ = (std::__split_buffer<std::string>::pointer)v224->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v323[0].__first_ = v225;
        v224->__r_.__value_.__l.__size_ = 0;
        v224->__r_.__value_.__r.__words[2] = 0;
        v224->__r_.__value_.__r.__words[0] = 0;
        siri::dialogengine::Context::AddValidationError((uint64_t)v307, (__int128 *)v323, v118 + 240);
      }
      if (SHIBYTE(v323[0].__end_) < 0)
        operator delete(v323[0].__first_);
      if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__s1.__r_.__value_.__l.__data_);
      if (SHIBYTE(v327.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v327.__r_.__value_.__l.__data_);
      if (SHIBYTE(__n.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__n.__r_.__value_.__l.__data_);
      if (SHIBYTE(v328.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v328.__r_.__value_.__l.__data_);
LABEL_589:
      if (SHIBYTE(v330.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v330.__r_.__value_.__l.__data_);
      v323[0].__first_ = &v331;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v323);
      if (SHIBYTE(v332.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v332.__r_.__value_.__l.__data_);
LABEL_593:
      if (SHIBYTE(v333.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v333.__r_.__value_.__l.__data_);
      v118 += 336;
    }
    while (v118 != v119);
  }
  v238 = *(_QWORD *)(v5 + 224);
  if (v238)
    (*(void (**)(uint64_t, siri::dialogengine::Context *))(*(_QWORD *)v238 + 32))(v238, v110);
  v239 = *(_QWORD **)(v5 + 272);
  if (v239 != (_QWORD *)(v5 + 280))
  {
    do
    {
      (*(void (**)(_QWORD, siri::dialogengine::Context *))(*(_QWORD *)v239[7] + 16))(v239[7], v307);
      if (siri::dialogengine::Condition::HasInfiniteLoop((siri::dialogengine::Condition *)v239[7], v307))
      {
        v240 = v239[7];
        if (*(char *)(v240 + 119) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)v323, *(const std::string::value_type **)(v240 + 96), *(_QWORD *)(v240 + 104));
        }
        else
        {
          *(_OWORD *)&v323[0].__first_ = *(_OWORD *)(v240 + 96);
          v323[0].__end_ = *(std::__split_buffer<std::string>::pointer *)(v240 + 112);
        }
        std::operator+<char>();
        v241 = std::string::append(&v333, "'");
        v242 = *(_OWORD *)&v241->__r_.__value_.__l.__data_;
        __s1.__r_.__value_.__r.__words[2] = v241->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__s1.__r_.__value_.__l.__data_ = v242;
        v241->__r_.__value_.__l.__size_ = 0;
        v241->__r_.__value_.__r.__words[2] = 0;
        v241->__r_.__value_.__r.__words[0] = 0;
        siri::dialogengine::Context::AddValidationError((uint64_t)v307, (__int128 *)&__s1, v239[7]);
        if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__s1.__r_.__value_.__l.__data_);
        if (SHIBYTE(v333.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v333.__r_.__value_.__l.__data_);
        if (SHIBYTE(v323[0].__end_) < 0)
          operator delete(v323[0].__first_);
      }
      v243 = (_QWORD *)v239[1];
      if (v243)
      {
        do
        {
          v244 = v243;
          v243 = (_QWORD *)*v243;
        }
        while (v243);
      }
      else
      {
        do
        {
          v244 = (_QWORD *)v239[2];
          v115 = *v244 == (_QWORD)v239;
          v239 = v244;
        }
        while (!v115);
      }
      v239 = v244;
    }
    while (v244 != (_QWORD *)(v5 + 280));
  }
  siri::dialogengine::GroupPhrases::Validate((siri::dialogengine::GroupPhrases *)(v5 + 312), v307);
  v245 = *(_QWORD *)(v5 + 240);
  if (v245)
    (*(void (**)(uint64_t, siri::dialogengine::Context *))(*(_QWORD *)v245 + 32))(v245, v307);
  v246 = *(_QWORD *)(v5 + 296);
  if (v246)
  {
    memset(v323, 0, 24);
    std::vector<std::shared_ptr<siri::dialogengine::Node>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::Node>*,std::shared_ptr<siri::dialogengine::Node>*>((char *)v323, *(_QWORD **)(v246 + 208), *(_QWORD **)(v246 + 216), (uint64_t)(*(_QWORD *)(v246 + 216) - *(_QWORD *)(v246 + 208)) >> 4);
    v248 = v323[0].__begin_;
    for (j = v323[0].__first_; j != v248; j = (std::__split_buffer<std::string>::pointer)((char *)j + 16))
    {
      v249 = (const void *)j->__r_.__value_.__r.__words[0];
      if (j->__r_.__value_.__r.__words[0])
      {
        {
          std::string::basic_string[abi:ne180100]<0>(&__s1, "Cannot nest grouping elements under the fallback");
          siri::dialogengine::Context::AddValidationError((uint64_t)v307, (__int128 *)&__s1, (uint64_t)v249);
          if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__s1.__r_.__value_.__l.__data_);
        }
        if (v250)
        {
          if (siri::dialogengine::Dialog::HasRequiredVariablesOrPhrases(v250, v251))
          {
            std::string::basic_string[abi:ne180100]<0>(&__s1, "Fallback dialog can only have optional variables or phrases");
            siri::dialogengine::Context::AddValidationError((uint64_t)v307, (__int128 *)&__s1, (uint64_t)v249);
            if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__s1.__r_.__value_.__l.__data_);
          }
        }
      }
    }
    __s1.__r_.__value_.__r.__words[0] = (std::string::size_type)v323;
    std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__s1);
    v5 = v306;
    (*(void (**)(_QWORD, siri::dialogengine::Context *))(**(_QWORD **)(v306 + 296) + 32))(*(_QWORD *)(v306 + 296), v307);
  }
  siri::dialogengine::File::GetDialogs((siri::dialogengine::File *)v5, (uint64_t)&__s1);
  *(_OWORD *)&v333.__r_.__value_.__r.__words[1] = 0uLL;
  v333.__r_.__value_.__r.__words[0] = (std::string::size_type)&v333.__r_.__value_.__l.__size_;
  v254 = __s1.__r_.__value_.__l.__size_;
  for (k = (uint64_t *)__s1.__r_.__value_.__r.__words[0]; k != (uint64_t *)v254; k += 2)
  {
    v255 = *k;
    if (*(char *)(*k + 119) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)v323, *(const std::string::value_type **)(v255 + 96), *(_QWORD *)(v255 + 104));
    }
    else
    {
      *(_OWORD *)&v323[0].__first_ = *(_OWORD *)(v255 + 96);
      v323[0].__end_ = *(std::__split_buffer<std::string>::pointer *)(v255 + 112);
    }
    v256 = (std::__split_buffer<std::string>::pointer)HIBYTE(v323[0].__end_);
    v257 = HIBYTE(v323[0].__end_);
    if (SHIBYTE(v323[0].__end_) < 0)
      v256 = v323[0].__begin_;
    if (v256)
    {
      if (&v333.__r_.__value_.__r.__words[1] != (std::string::size_type *)std::__tree<std::string>::find<std::string>((uint64_t)&v333, (const void **)&v323[0].__first_))
      {
        std::operator+<char>();
        v258 = std::string::append(&v331, "'");
        v259 = *(_OWORD *)&v258->__r_.__value_.__l.__data_;
        v332.__r_.__value_.__r.__words[2] = v258->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v332.__r_.__value_.__l.__data_ = v259;
        v258->__r_.__value_.__l.__size_ = 0;
        v258->__r_.__value_.__r.__words[2] = 0;
        v258->__r_.__value_.__r.__words[0] = 0;
        siri::dialogengine::Context::AddValidationWarning((uint64_t)v307, (__int128 *)&v332, *k);
        if (SHIBYTE(v332.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v332.__r_.__value_.__l.__data_);
        if (SHIBYTE(v331.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v331.__r_.__value_.__l.__data_);
        v5 = v306;
      }
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)&v333, (const void **)&v323[0].__first_, (uint64_t)v323);
      v257 = HIBYTE(v323[0].__end_);
    }
    if (v257 < 0)
      operator delete(v323[0].__first_);
  }
  v260 = (uint64_t)v307;
  if (*(_BYTE *)(v5 + 648) && !(_DWORD)v345)
  {
    std::string::basic_string[abi:ne180100]<0>(&v331, "category");
    siri::dialogengine::File::GetMetadataUnique(v5, (uint64_t)&v331, (std::string *)v323);
    siri::dialogengine::StringToLower((uint64_t)v323, (uint64_t)&v332);
    if (SHIBYTE(v323[0].__end_) < 0)
      operator delete(v323[0].__first_);
    if (SHIBYTE(v331.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v331.__r_.__value_.__l.__data_);
    if (SHIBYTE(v332.__r_.__value_.__r.__words[2]) < 0)
    {
      v263 = (std::string *)v332.__r_.__value_.__r.__words[0];
      if (v332.__r_.__value_.__l.__size_ != 14)
        goto LABEL_667;
      if (*(_QWORD *)v332.__r_.__value_.__l.__data_ != 0x73726F6664657375
        || *(_QWORD *)(v332.__r_.__value_.__r.__words[0] + 6) != 0x74657070696E7372)
      {
        goto LABEL_667;
      }
    }
    else if (SHIBYTE(v332.__r_.__value_.__r.__words[2]) != 14
           || (v332.__r_.__value_.__r.__words[0] == 0x73726F6664657375
             ? (v262 = *(std::string::size_type *)((char *)v332.__r_.__value_.__r.__words + 6) == 0x74657070696E7372)
             : (v262 = 0),
               !v262))
    {
      v263 = &v332;
LABEL_667:
      siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Snippet dialog ID check: Skip because meta category is not 'usedforsnippet' (value: '%s')", v261, v263);
LABEL_668:
      if (SHIBYTE(v332.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v332.__r_.__value_.__l.__data_);
      goto LABEL_670;
    }
    siri::dialogengine::File::GetSourceLocale((siri::dialogengine::File *)v5, &v331);
    v269 = HIBYTE(v331.__r_.__value_.__r.__words[2]);
    if ((v331.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v269 = v331.__r_.__value_.__l.__size_;
    if (!v269)
      MEMORY[0x1C3B8D53C](&v331, "en");
    v270 = (_OWORD *)(v5 + 128);
    if (*(char *)(v5 + 151) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)v323, *(const std::string::value_type **)(v5 + 128), *(_QWORD *)(v5 + 136));
    }
    else
    {
      *(_OWORD *)&v323[0].__first_ = *v270;
      v323[0].__end_ = *(std::__split_buffer<std::string>::pointer *)(v5 + 144);
    }
    if (SHIBYTE(v323[0].__end_) >= 0)
      v271 = (std::__split_buffer<std::string>::pointer)HIBYTE(v323[0].__end_);
    else
      v271 = v323[0].__begin_;
    v272 = HIBYTE(v331.__r_.__value_.__r.__words[2]);
    v273 = HIBYTE(v331.__r_.__value_.__r.__words[2]);
    if ((v331.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v272 = v331.__r_.__value_.__l.__size_;
    if (v271 == (std::__split_buffer<std::string>::pointer)v272)
    {
      v274 = v331.__r_.__value_.__r.__words[0];
      if ((v331.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v275 = &v331;
      else
        v275 = (std::string *)v331.__r_.__value_.__r.__words[0];
      if ((HIBYTE(v323[0].__end_) & 0x80) != 0)
      {
        v280 = v323[0].__first_;
        v281 = memcmp(v323[0].__first_, v275, (size_t)v323[0].__begin_);
        operator delete(v280);
        if (!v281)
        {
          v273 = HIBYTE(v331.__r_.__value_.__r.__words[2]);
          v274 = v331.__r_.__value_.__r.__words[0];
LABEL_766:
          v301 = v273 < 0;
          v302 = &v331;
          if (v301)
            v302 = (std::string *)v274;
          siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Snippet dialog ID check: Skip because locale is source locale ('%s')", (const char *)v275, v302);
LABEL_769:
          if (SHIBYTE(v331.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v331.__r_.__value_.__l.__data_);
          goto LABEL_668;
        }
      }
      else
      {
        if (!HIBYTE(v323[0].__end_))
          goto LABEL_766;
        v276 = 0;
        do
        {
          v277 = *((unsigned __int8 *)&v323[0].__first_ + v276);
          v278 = v275->__r_.__value_.__s.__data_[v276];
        }
        while (v277 == v278 && HIBYTE(v323[0].__end_) - 1 != v276++);
        if (v277 == v278)
          goto LABEL_766;
      }
    }
    else if ((HIBYTE(v323[0].__end_) & 0x80) != 0)
    {
      operator delete(v323[0].__first_);
    }
    SourceLocaleDialogIds = (const void ***)siri::dialogengine::File::GetSourceLocaleDialogIds((siri::dialogengine::File *)v5);
    std::set<std::string>::set[abi:ne180100]((uint64_t *)&v330, SourceLocaleDialogIds);
    if (v330.__r_.__value_.__r.__words[2])
    {
      v323[0].__end_cap_.__value_ = 0;
      v323[0].__end_ = 0;
      v323[0].__first_ = (std::__split_buffer<std::string>::pointer)&off_1E792D2C8;
      v323[0].__begin_ = (std::__split_buffer<std::string>::pointer)&v323[0].__end_;
      (*(void (**)(uint64_t, std::__split_buffer<std::string> *))(*(_QWORD *)v5 + 32))(v5, v323);
      v284 = v330.__r_.__value_.__r.__words[0];
      if ((std::string::size_type *)v330.__r_.__value_.__l.__data_ != &v330.__r_.__value_.__r.__words[1])
      {
        do
        {
          if (&v323[0].__end_ == (std::__split_buffer<std::string>::pointer *)std::__tree<std::string>::find<std::string>((uint64_t)&v323[0].__begin_, (const void **)(v284 + 32)))
          {
            std::operator+<char>();
            v285 = std::string::append(&v313, "' in the source locale file (");
            v286 = *(_OWORD *)&v285->__r_.__value_.__l.__data_;
            v314.__r_.__value_.__r.__words[2] = v285->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v314.__r_.__value_.__l.__data_ = v286;
            v285->__r_.__value_.__l.__size_ = 0;
            v285->__r_.__value_.__r.__words[2] = 0;
            v285->__r_.__value_.__r.__words[0] = 0;
            if ((v331.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v287 = &v331;
            else
              v287 = (std::string *)v331.__r_.__value_.__r.__words[0];
            if ((v331.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v288 = HIBYTE(v331.__r_.__value_.__r.__words[2]);
            else
              v288 = v331.__r_.__value_.__l.__size_;
            v289 = std::string::append(&v314, (const std::string::value_type *)v287, v288);
            v290 = *(_OWORD *)&v289->__r_.__value_.__l.__data_;
            v315.__r_.__value_.__r.__words[2] = v289->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v315.__r_.__value_.__l.__data_ = v290;
            v289->__r_.__value_.__l.__size_ = 0;
            v289->__r_.__value_.__r.__words[2] = 0;
            v289->__r_.__value_.__r.__words[0] = 0;
            v291 = std::string::append(&v315, ") was not found in this locale file (");
            v292 = *(_OWORD *)&v291->__r_.__value_.__l.__data_;
            v327.__r_.__value_.__r.__words[2] = v291->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v327.__r_.__value_.__l.__data_ = v292;
            v291->__r_.__value_.__l.__size_ = 0;
            v291->__r_.__value_.__r.__words[2] = 0;
            v291->__r_.__value_.__r.__words[0] = 0;
            if (*(char *)(v306 + 151) < 0)
            {
              std::string::__init_copy_ctor_external(&v312, *(const std::string::value_type **)(v306 + 128), *(_QWORD *)(v306 + 136));
            }
            else
            {
              *(_OWORD *)&v312.__r_.__value_.__l.__data_ = *v270;
              v312.__r_.__value_.__r.__words[2] = *(_QWORD *)(v5 + 144);
            }
            if ((v312.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v293 = &v312;
            else
              v293 = (std::string *)v312.__r_.__value_.__r.__words[0];
            if ((v312.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v294 = HIBYTE(v312.__r_.__value_.__r.__words[2]);
            else
              v294 = v312.__r_.__value_.__l.__size_;
            v295 = std::string::append(&v327, (const std::string::value_type *)v293, v294);
            v296 = *(_OWORD *)&v295->__r_.__value_.__l.__data_;
            v328.__r_.__value_.__r.__words[2] = v295->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v328.__r_.__value_.__l.__data_ = v296;
            v295->__r_.__value_.__l.__size_ = 0;
            v295->__r_.__value_.__r.__words[2] = 0;
            v295->__r_.__value_.__r.__words[0] = 0;
            v297 = std::string::append(&v328, ")");
            v298 = *(_OWORD *)&v297->__r_.__value_.__l.__data_;
            __n.__r_.__value_.__r.__words[2] = v297->__r_.__value_.__r.__words[2];
            *(_OWORD *)&__n.__r_.__value_.__l.__data_ = v298;
            v297->__r_.__value_.__l.__size_ = 0;
            v297->__r_.__value_.__r.__words[2] = 0;
            v297->__r_.__value_.__r.__words[0] = 0;
            siri::dialogengine::Context::AddValidationWarning((uint64_t)v307, (__int128 *)&__n, 0);
            if (SHIBYTE(__n.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__n.__r_.__value_.__l.__data_);
            if (SHIBYTE(v328.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v328.__r_.__value_.__l.__data_);
            if (SHIBYTE(v312.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v312.__r_.__value_.__l.__data_);
            if (SHIBYTE(v327.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v327.__r_.__value_.__l.__data_);
            if (SHIBYTE(v315.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v315.__r_.__value_.__l.__data_);
            if (SHIBYTE(v314.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v314.__r_.__value_.__l.__data_);
            if (SHIBYTE(v313.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v313.__r_.__value_.__l.__data_);
          }
          v299 = *(std::string **)(v284 + 8);
          if (v299)
          {
            do
            {
              v300 = v299;
              v299 = (std::string *)v299->__r_.__value_.__r.__words[0];
            }
            while (v299);
          }
          else
          {
            do
            {
              v300 = *(std::string **)(v284 + 16);
              v115 = v300->__r_.__value_.__r.__words[0] == v284;
              v284 = (std::string::size_type)v300;
            }
            while (!v115);
          }
          v284 = (std::string::size_type)v300;
        }
        while (v300 != (std::string *)&v330.__r_.__value_.__r.__words[1]);
      }
      v323[0].__first_ = (std::__split_buffer<std::string>::pointer)&off_1E792D2C8;
      std::__tree<std::string>::destroy((uint64_t)&v323[0].__begin_, (char *)v323[0].__end_);
      v5 = v306;
      v260 = (uint64_t)v307;
    }
    else
    {
      siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Snippet dialog ID check: Source locale file has no dialog IDs (perhaps because the file was not found or could not be loaded)", v283);
    }
    std::__tree<std::string>::destroy((uint64_t)&v330, (char *)v330.__r_.__value_.__l.__size_);
    goto LABEL_769;
  }
  siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Snippet dialog ID check: Skip because either mCheckSnippetDialogIds is false or request type is not DIALOG_REQUEST", v252);
LABEL_670:
  v265 = *(_QWORD *)(v5 + 256);
  if (v265)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v265 + 32))(v265, v260);
  memset(v323, 0, 24);
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)v323, *(__int128 **)(v260 + 616), *(__int128 **)(v260 + 624), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v260 + 624) - *(_QWORD *)(v260 + 616)) >> 3));
  v266 = v323[0].__begin_;
  for (m = v323[0].__first_; m != v266; ++m)
  {
    std::operator+<char>();
    siri::dialogengine::Context::AddValidationError(v260, (__int128 *)&v332, 0);
    if (SHIBYTE(v332.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v332.__r_.__value_.__l.__data_);
  }
  v332.__r_.__value_.__r.__words[0] = (std::string::size_type)v323;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v332);
  if (*(_QWORD *)(v5 + 584))
    v6 = 0;
  else
    v6 = *(_QWORD *)(v5 + 608) == 0;
  std::__tree<std::string>::destroy((uint64_t)&v333, (char *)v333.__r_.__value_.__l.__size_);
  v323[0].__first_ = &__s1;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)v323);
  if (SHIBYTE(v334.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v334.__r_.__value_.__l.__data_);
  if (SHIBYTE(v335.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v335.__r_.__value_.__l.__data_);
  if (SHIBYTE(v337.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v337.__r_.__value_.__l.__data_);
  if (SHIBYTE(v339.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v339.__r_.__value_.__l.__data_);
  if (SHIBYTE(v341.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v341.__r_.__value_.__l.__data_);
  if (SHIBYTE(v343.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v343.__r_.__value_.__l.__data_);
  if (SHIBYTE(v344.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v344.__r_.__value_.__l.__data_);
  siri::dialogengine::RequestInfo::~RequestInfo(&v345);
  return v6;
}

void sub_1BF90A134(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57)
{
  std::__tree<std::string>::destroy((uint64_t)&STACK[0x1188], (char *)STACK[0x1190]);
  if (SLOBYTE(STACK[0x11B7]) < 0)
    operator delete((void *)STACK[0x11A0]);
  if (SLOBYTE(STACK[0x11D7]) < 0)
    operator delete((void *)STACK[0x11C0]);
  std::__tree<std::string>::destroy((uint64_t)&STACK[0x11E0], (char *)STACK[0x11E8]);
  STACK[0x11E0] = (unint64_t)&a57;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x11E0]);
  if (SLOBYTE(STACK[0x1217]) < 0)
    operator delete((void *)STACK[0x1200]);
  if (SLOBYTE(STACK[0x1237]) < 0)
    operator delete((void *)STACK[0x1220]);
  if (SLOBYTE(STACK[0x1277]) < 0)
    operator delete((void *)STACK[0x1260]);
  if (SLOBYTE(STACK[0x12B7]) < 0)
    operator delete((void *)STACK[0x12A0]);
  if (SLOBYTE(STACK[0x12F7]) < 0)
    operator delete((void *)STACK[0x12E0]);
  if (SLOBYTE(STACK[0x132F]) < 0)
    operator delete((void *)STACK[0x1318]);
  if (SLOBYTE(STACK[0x1347]) < 0)
    operator delete((void *)STACK[0x1330]);
  siri::dialogengine::RequestInfo::~RequestInfo((void **)&STACK[0x1350]);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::File::Accept(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, a1 + 312);
  v4 = *(_QWORD *)(a1 + 224);
  if (v4)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 16))(v4, a2);
  result = *(_QWORD *)(a1 + 296);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, a2);
  return result;
}

{
  uint64_t v4;
  uint64_t result;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, a1 + 312);
  v4 = *(_QWORD *)(a1 + 224);
  if (v4)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 24))(v4, a2);
  result = *(_QWORD *)(a1 + 296);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 24))(result, a2);
  return result;
}

BOOL siri::dialogengine::File::IsUniqueMetadataName(uint64_t a1)
{
  unsigned __int8 v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v8;
  void *__p[2];
  char v10;
  char v11;
  void **v12;

  if ((v2 & 1) == 0
  {
    v8 = (_QWORD *)operator new();
    *v8 = 0;
    siri::dialogengine::File::IsUniqueMetadataName(std::string const&)::flag = (uint64_t)v8;
  }
  v3 = atomic_load((unint64_t *)siri::dialogengine::File::IsUniqueMetadataName(std::string const&)::flag);
  if (v3 != -1)
  {
    __p[0] = &v11;
    v12 = __p;
    std::__call_once((std::once_flag::_State_type *)siri::dialogengine::File::IsUniqueMetadataName(std::string const&)::flag, &v12, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::File::IsUniqueMetadataName(std::string const&)::$_0 &&>>);
  }
  v4 = siri::dialogengine::File::IsUniqueMetadataName(std::string const&)::sUniqueNames;
  siri::dialogengine::StringToLower(a1, (uint64_t)__p);
  v5 = std::__tree<std::string>::find<std::string>(v4, (const void **)__p);
  v6 = siri::dialogengine::File::IsUniqueMetadataName(std::string const&)::sUniqueNames;
  if (v10 < 0)
    operator delete(__p[0]);
  return v6 + 8 != v5;
}

void sub_1BF90AF84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _Unwind_Resume(a1);
}

void siri::dialogengine::File::GetMetadataUnique(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  const char *v6;
  uint64_t v7;
  const char *v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11[2];
  uint64_t v12;

  if (!siri::dialogengine::File::IsUniqueMetadataName(a2))
  {
    if (*(char *)(a2 + 23) >= 0)
      v7 = a2;
    else
      v7 = *(_QWORD *)a2;
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"GetMetadataUnique() was called with a name that allows multiple values: %s", v6, v7);
  }
  siri::dialogengine::File::GetMetadata(a1, a2, v11);
  if (!v12)
    goto LABEL_14;
  if (v12 != 1)
  {
    if (*(char *)(a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = *(_QWORD *)a2;
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Found %zu values for unique meta name '%s'. Returning empty string.", v8, v12, v10);
LABEL_14:
    std::string::basic_string[abi:ne180100]<0>(a3, "");
    goto LABEL_15;
  }
  if (*(char *)(v11[0] + 55) < 0)
  {
    std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)(v11[0] + 32), *(_QWORD *)(v11[0] + 40));
  }
  else
  {
    v9 = *(_OWORD *)(v11[0] + 32);
    a3->__r_.__value_.__r.__words[2] = *(_QWORD *)(v11[0] + 48);
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v9;
  }
LABEL_15:
  std::__tree<std::string>::destroy((uint64_t)v11, (char *)v11[1]);
}

void sub_1BF90B0A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, char *a13)
{
  std::__tree<std::string>::destroy((uint64_t)&a12, a13);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<siri::dialogengine::Parameter>::__init_with_size[abi:ne180100]<siri::dialogengine::Parameter*,siri::dialogengine::Parameter*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<siri::dialogengine::Parameter>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<siri::dialogengine::Parameter>,siri::dialogengine::Parameter*,siri::dialogengine::Parameter*,siri::dialogengine::Parameter*>(a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1BF90B11C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<siri::dialogengine::Parameter>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void siri::dialogengine::File::GetDialogs(siri::dialogengine::File *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v4 = *((_QWORD *)this + 28);
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 29);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  siri::dialogengine::WalkNodesForDialogs((char **)a2, v4);
  if (v5)
  {
    v8 = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  siri::dialogengine::WalkNodesForDialogs((char **)a2, *((_QWORD *)this + 37));
}

void sub_1BF90B1DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void siri::dialogengine::File::GetSourceLocale(siri::dialogengine::File *this@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  std::string::size_type size;
  std::string __p;
  std::string __str;

  v4 = (std::string *)((char *)this + 656);
  if (!*((_BYTE *)this + 680))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "sourceLocale");
    siri::dialogengine::File::GetMetadataUnique((uint64_t)this, (uint64_t)&__p, &__str);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = __str.__r_.__value_.__l.__size_;
    if (size)
    {
      siri::dialogengine::GetCanonicalLocale(&__str, 0, &__p);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      __str = __p;
      if ((siri::dialogengine::IsValidLocale((uint64_t)&__str) & 1) == 0)
      {
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        {
          *__str.__r_.__value_.__l.__data_ = 0;
          __str.__r_.__value_.__l.__size_ = 0;
        }
        else
        {
          __str.__r_.__value_.__s.__data_[0] = 0;
          *((_BYTE *)&__str.__r_.__value_.__s + 23) = 0;
        }
      }
    }
    if (*((_BYTE *)this + 680))
    {
      std::string::operator=(v4, &__str);
    }
    else
    {
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(v4, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
      else
        *v4 = __str;
      *((_BYTE *)this + 680) = 1;
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (*((char *)this + 679) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 82), *((_QWORD *)this + 83));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    a2->__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  }
}

void sub_1BF90B368(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *siri::dialogengine::File::GetSourceLocaleDialogIds(siri::dialogengine::File *this)
{
  std::string *v2;
  std::string::size_type size;
  std::string::size_type v4;
  std::string::size_type v5;
  char v6;
  std::string::size_type v7;
  std::string *v8;
  uint64_t v9;
  int v10;
  int v11;
  void *v13;
  int v14;
  const char *v15;
  std::string::size_type v16;
  std::string::size_type v17;
  int Files;
  const char *v19;
  std::string *v20;
  _OWORD *v21;
  std::string *v22;
  std::string *v23;
  std::string *p_p;
  std::__shared_weak_count *v25;
  siri::dialogengine::File *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  unint64_t v29;
  std::string *v30;
  std::string *v31;
  std::string *v32;
  std::string *v33;
  std::string *v34;
  const char *v35;
  std::string *v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::string v41;
  uint64_t v42;
  std::string *v43;
  std::string *v44;
  std::string *v45;
  std::string __str;
  std::string __p;
  std::string v48;
  __int128 v49;
  std::string v50;
  std::string **v51;
  char v52;
  std::string v53;
  __int128 v54;

  *(_QWORD *)&v54 = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)this + 712))
    return (std::string *)((char *)this + 688);
  v2 = (std::string *)((char *)this + 720);
  if (*((_BYTE *)this + 744))
    return v2;
  *(_OWORD *)&v41.__r_.__value_.__r.__words[1] = 0uLL;
  v41.__r_.__value_.__r.__words[0] = (std::string::size_type)&v41.__r_.__value_.__l.__size_;
  *((_QWORD *)this + 92) = 0;
  *((_QWORD *)this + 91) = 0;
  *((_QWORD *)this + 90) = (char *)this + 728;
  *((_BYTE *)this + 744) = 1;
  std::__tree<std::string>::destroy((uint64_t)&v41, 0);
  siri::dialogengine::File::GetSourceLocale(this, &v50);
  size = HIBYTE(v50.__r_.__value_.__r.__words[2]);
  if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v50.__r_.__value_.__l.__size_;
  if (!size)
    MEMORY[0x1C3B8D53C](&v50, "en");
  v49 = 0uLL;
  if (*((char *)this + 151) < 0)
    std::string::__init_copy_ctor_external(&v41, *((const std::string::value_type **)this + 16), *((_QWORD *)this + 17));
  else
    v41 = *(std::string *)((char *)this + 128);
  if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v4 = HIBYTE(v41.__r_.__value_.__r.__words[2]);
  else
    v4 = v41.__r_.__value_.__l.__size_;
  v5 = HIBYTE(v50.__r_.__value_.__r.__words[2]);
  v6 = HIBYTE(v50.__r_.__value_.__r.__words[2]);
  if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v5 = v50.__r_.__value_.__l.__size_;
  if (v4 != v5)
  {
    if ((*((_BYTE *)&v41.__r_.__value_.__s + 23) & 0x80) != 0)
      operator delete(v41.__r_.__value_.__l.__data_);
    goto LABEL_33;
  }
  v7 = v50.__r_.__value_.__r.__words[0];
  if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v8 = &v50;
  else
    v8 = (std::string *)v50.__r_.__value_.__r.__words[0];
  if ((*((_BYTE *)&v41.__r_.__value_.__s + 23) & 0x80) == 0)
  {
    if (!*((_BYTE *)&v41.__r_.__value_.__s + 23))
      goto LABEL_93;
    v9 = 0;
    do
    {
      v10 = v41.__r_.__value_.__s.__data_[v9];
      v11 = v8->__r_.__value_.__s.__data_[v9];
    }
    while (v10 == v11 && HIBYTE(v41.__r_.__value_.__r.__words[2]) - 1 != v9++);
    if (v10 == v11)
      goto LABEL_93;
LABEL_33:
    if (*((char *)this + 55) < 0)
      std::string::__init_copy_ctor_external(&v41, *((const std::string::value_type **)this + 4), *((_QWORD *)this + 5));
    else
      v41 = *(std::string *)((char *)this + 32);
    if (*((char *)this + 79) < 0)
      std::string::__init_copy_ctor_external(&__str, *((const std::string::value_type **)this + 7), *((_QWORD *)this + 8));
    else
      __str = *(std::string *)((char *)this + 56);
    siri::dialogengine::DirName(&__str, (uint64_t)&__p);
    if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v53, v50.__r_.__value_.__l.__data_, v50.__r_.__value_.__l.__size_);
    else
      v53 = v50;
    v43 = 0;
    v44 = 0;
    v45 = 0;
    v51 = &v43;
    v52 = 0;
    v43 = (std::string *)operator new(0x18uLL);
    v44 = v43;
    v45 = v43 + 1;
    v44 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v45, (__int128 *)&v53, &v54, v43);
    siri::dialogengine::FindLocaleFile((uint64_t)&__p, (__int128 **)&v43, (uint64_t)&v48);
    v51 = &v43;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v51);
    if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v53.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    v16 = HIBYTE(v48.__r_.__value_.__r.__words[2]);
    if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v16 = v48.__r_.__value_.__l.__size_;
    if (v16)
    {
      _ZNSt3__115allocate_sharedB8ne180100IN4siri12dialogengine7ContextENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_((siri::dialogengine::Context **)&__p);
      v49 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      v17 = __p.__r_.__value_.__r.__words[0];
      Files = siri::dialogengine::Context::LoadFiles((uint64_t)__p.__r_.__value_.__l.__data_, (uint64_t)&v41, (uint64_t)&v48);
      if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v20 = &v50;
      else
        v20 = (std::string *)v50.__r_.__value_.__r.__words[0];
      v21 = (_OWORD *)((char *)this + 104);
      if (Files)
      {
        if (*((char *)this + 127) < 0)
        {
          std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)this + 13), *((_QWORD *)this + 14));
        }
        else
        {
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *v21;
          __p.__r_.__value_.__r.__words[2] = *((_QWORD *)this + 15);
        }
        p_p = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Loaded source locale file (%s) for CAT %s", v19, v20, p_p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        v26 = *(siri::dialogengine::File **)(v17 + 504);
        v25 = *(std::__shared_weak_count **)(v17 + 512);
        if (v25)
        {
          p_shared_owners = (unint64_t *)&v25->__shared_owners_;
          do
            v28 = __ldxr(p_shared_owners);
          while (__stxr(v28 + 1, p_shared_owners));
          do
            v29 = __ldaxr(p_shared_owners);
          while (__stlxr(v29 - 1, p_shared_owners));
          if (!v29)
          {
            ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
        goto LABEL_86;
      }
      if (*((char *)this + 127) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)this + 13), *((_QWORD *)this + 14));
      }
      else
      {
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *v21;
        __p.__r_.__value_.__r.__words[2] = *((_QWORD *)this + 15);
      }
      v30 = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v30 = (std::string *)__p.__r_.__value_.__r.__words[0];
      siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Failed to load source locale file (%s) for CAT %s", v19, v20, v30);
    }
    else
    {
      if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v22 = &v50;
      else
        v22 = (std::string *)v50.__r_.__value_.__r.__words[0];
      if (*((char *)this + 127) < 0)
        std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)this + 13), *((_QWORD *)this + 14));
      else
        __p = *(std::string *)((char *)this + 104);
      v23 = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v23 = (std::string *)__p.__r_.__value_.__r.__words[0];
      siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Source locale file (%s) not found for CAT %s", v15, v22, v23);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v26 = 0;
LABEL_86:
    if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v48.__r_.__value_.__l.__data_);
    if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v41.__r_.__value_.__l.__data_);
    if (!v26)
      goto LABEL_127;
    goto LABEL_104;
  }
  v13 = (void *)v41.__r_.__value_.__r.__words[0];
  v14 = memcmp(v41.__r_.__value_.__l.__data_, v8, v41.__r_.__value_.__l.__size_);
  operator delete(v13);
  if (v14)
    goto LABEL_33;
  v6 = HIBYTE(v50.__r_.__value_.__r.__words[2]);
  v7 = v50.__r_.__value_.__r.__words[0];
LABEL_93:
  if (v6 >= 0)
    v31 = &v50;
  else
    v31 = (std::string *)v7;
  if (*((char *)this + 127) < 0)
    std::string::__init_copy_ctor_external(&v41, *((const std::string::value_type **)this + 13), *((_QWORD *)this + 14));
  else
    v41 = *(std::string *)((char *)this + 104);
  v32 = &v41;
  if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v32 = (std::string *)v41.__r_.__value_.__r.__words[0];
  siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Source locale file (%s) is the current file for CAT %s", (const char *)v8, v31, v32);
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v41.__r_.__value_.__l.__data_);
  v26 = this;
LABEL_104:
  v41.__r_.__value_.__r.__words[2] = 0;
  v42 = 0;
  v41.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E792D2C8;
  v41.__r_.__value_.__l.__size_ = (std::string::size_type)&v41.__r_.__value_.__r.__words[2];
  (*(void (**)(siri::dialogengine::File *, std::string *))(*(_QWORD *)v26 + 32))(v26, &v41);
  if (*((_BYTE *)this + 744))
  {
    if (v2 != (std::string *)&v41.__r_.__value_.__r.__words[1])
      std::__tree<std::string>::__assign_multi<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>((uint64_t *)this + 90, (_QWORD *)v41.__r_.__value_.__l.__size_, &v41.__r_.__value_.__r.__words[2]);
  }
  else
  {
    std::set<std::string>::set[abi:ne180100]((uint64_t *)this + 90, (const void ***)&v41.__r_.__value_.__l.__size_);
    *((_BYTE *)this + 744) = 1;
  }
  if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v33 = &v50;
  else
    v33 = (std::string *)v50.__r_.__value_.__r.__words[0];
  if (*((char *)this + 127) < 0)
    std::string::__init_copy_ctor_external(&v48, *((const std::string::value_type **)this + 13), *((_QWORD *)this + 14));
  else
    v48 = *(std::string *)((char *)this + 104);
  if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v34 = &v48;
  else
    v34 = (std::string *)v48.__r_.__value_.__r.__words[0];
  std::string::basic_string[abi:ne180100]<0>(&__str, ", ");
  siri::dialogengine::StringJoin(v2, (uint64_t)&__str, (uint64_t)&__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v36 = &__p;
  else
    v36 = (std::string *)__p.__r_.__value_.__r.__words[0];
  siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Read dialog IDs from source locale file (%s) for CAT %s: [%s]", v35, v33, v34, v36);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v48.__r_.__value_.__l.__data_);
  v41.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E792D2C8;
  std::__tree<std::string>::destroy((uint64_t)&v41.__r_.__value_.__l.__size_, (char *)v41.__r_.__value_.__r.__words[2]);
LABEL_127:
  v37 = (std::__shared_weak_count *)*((_QWORD *)&v49 + 1);
  if (*((_QWORD *)&v49 + 1))
  {
    v38 = (unint64_t *)(*((_QWORD *)&v49 + 1) + 8);
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v50.__r_.__value_.__l.__data_);
  return v2;
}

void sub_1BF90BA7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  uint64_t v43;

  if (a43 < 0)
    operator delete(__p);
  if (a18 < 0)
    operator delete(a13);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](v43 - 160);
  if (*(char *)(v43 - 113) < 0)
    operator delete(*(void **)(v43 - 136));
  _Unwind_Resume(a1);
}

siri::dialogengine::Context *_ZNSt3__115allocate_sharedB8ne180100IN4siri12dialogengine7ContextENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(siri::dialogengine::Context **a1)
{
  _QWORD *v2;
  siri::dialogengine::Context *result;

  v2 = operator new(0xDD0uLL);
  v2[1] = 0;
  v2[2] = 0;
  *v2 = &off_1E7931FE0;
  result = siri::dialogengine::Context::Context((siri::dialogengine::Context *)(v2 + 3));
  *a1 = result;
  a1[1] = (siri::dialogengine::Context *)v2;
  return result;
}

void sub_1BF90BC24(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<siri::dialogengine::Context>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E7931FE0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<siri::dialogengine::Context>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E7931FE0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B8D890);
}

uint64_t std::__shared_ptr_emplace<siri::dialogengine::Context>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void siri::dialogengine::WalkNodesForDialogs(char **a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  const void *v5;
  void *v6;
  void *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  unint64_t *v13;
  unint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  char *v26;
  __int128 v27;
  int64x2_t v28;
  uint64_t v29;
  void *v30;
  unint64_t *v31;
  unint64_t v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  if (a2)
  {
    v34 = 0;
    v35 = 0;
    v36 = 0;
    std::vector<std::shared_ptr<siri::dialogengine::Node>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::Node>*,std::shared_ptr<siri::dialogengine::Node>*>((char *)&v34, *(_QWORD **)(a2 + 208), *(_QWORD **)(a2 + 216), (uint64_t)(*(_QWORD *)(a2 + 216) - *(_QWORD *)(a2 + 208)) >> 4);
    v3 = v34;
    v4 = v35;
    if (v34 != v35)
    {
      while (1)
      {
        v5 = *(const void **)v3;
        if (!*(_QWORD *)v3)
          goto LABEL_14;
        if (!v6)
          break;
        siri::dialogengine::WalkNodesForDialogs(a1, v6);
LABEL_15:
        v3 += 16;
        if (v3 == v4)
          goto LABEL_47;
      }
      if (v7)
      {
        v8 = *(std::__shared_weak_count **)(v3 + 8);
        *(_QWORD *)&v33 = v7;
        *((_QWORD *)&v33 + 1) = v8;
        if (v8)
        {
          p_shared_owners = (unint64_t *)&v8->__shared_owners_;
          do
            v10 = __ldxr(p_shared_owners);
          while (__stxr(v10 + 1, p_shared_owners));
          v12 = a1[1];
          v11 = (unint64_t)a1[2];
          if ((unint64_t)v12 < v11)
          {
            *(_QWORD *)v12 = v33;
            *((_QWORD *)v12 + 1) = v8;
            v13 = (unint64_t *)&v8->__shared_owners_;
            do
              v14 = __ldxr(v13);
            while (__stxr(v14 + 1, v13));
LABEL_19:
            v15 = v12 + 16;
LABEL_42:
            a1[1] = v15;
            if (v8)
            {
              v31 = (unint64_t *)&v8->__shared_owners_;
              do
                v32 = __ldaxr(v31);
              while (__stlxr(v32 - 1, v31));
              if (!v32)
              {
                ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
                std::__shared_weak_count::__release_weak(v8);
              }
            }
            goto LABEL_15;
          }
        }
        else
        {
          v12 = a1[1];
          v11 = (unint64_t)a1[2];
          if ((unint64_t)v12 < v11)
          {
            *(_QWORD *)v12 = v33;
            *((_QWORD *)v12 + 1) = 0;
            goto LABEL_19;
          }
        }
        v16 = *a1;
        v17 = (v12 - *a1) >> 4;
        v18 = v17 + 1;
        if ((unint64_t)(v17 + 1) >> 60)
          std::vector<BOOL>::__throw_length_error[abi:ne180100]();
        v19 = v11 - (_QWORD)v16;
        if (v19 >> 3 > v18)
          v18 = v19 >> 3;
        if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF0)
          v20 = 0xFFFFFFFFFFFFFFFLL;
        else
          v20 = v18;
        if (v20 >> 60)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v21 = (char *)operator new(16 * v20);
        v22 = &v21[16 * v17];
        v23 = *((_QWORD *)&v33 + 1);
        *(_OWORD *)v22 = v33;
        if (v23)
        {
          v24 = (unint64_t *)(v23 + 8);
          do
            v25 = __ldxr(v24);
          while (__stxr(v25 + 1, v24));
          v16 = *a1;
          v12 = a1[1];
        }
        if (v12 == v16)
        {
          v28 = vdupq_n_s64((unint64_t)v12);
          v26 = &v21[16 * v17];
        }
        else
        {
          v26 = &v21[16 * v17];
          do
          {
            v27 = *((_OWORD *)v12 - 1);
            v12 -= 16;
            *((_OWORD *)v26 - 1) = v27;
            v26 -= 16;
            *(_QWORD *)v12 = 0;
            *((_QWORD *)v12 + 1) = 0;
          }
          while (v12 != v16);
          v28 = *(int64x2_t *)a1;
        }
        v15 = v22 + 16;
        *a1 = v26;
        a1[1] = v22 + 16;
        a1[2] = &v21[16 * v20];
        v29 = v28.i64[1];
        v30 = (void *)v28.i64[0];
        while ((void *)v29 != v30)
          v29 = std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](v29 - 16);
        if (v30)
          operator delete(v30);
        v8 = (std::__shared_weak_count *)*((_QWORD *)&v33 + 1);
        goto LABEL_42;
      }
LABEL_14:
      v33 = 0uLL;
      goto LABEL_15;
    }
LABEL_47:
    *(_QWORD *)&v33 = &v34;
    std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v33);
  }
}

void sub_1BF90BF18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, char a12)
{
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  a9 = (void **)&a12;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<siri::dialogengine::Parameter>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0xC30C30C30C30C4)
    std::vector<BOOL>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<siri::dialogengine::Parameter>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[336 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<siri::dialogengine::Parameter>,siri::dialogengine::Parameter*,siri::dialogengine::Parameter*,siri::dialogengine::Parameter*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  if (a1 != a2)
  {
    v6 = 0;
    do
    {
      siri::dialogengine::Parameter::Parameter((siri::dialogengine::Parameter *)(a3 + v6), (const siri::dialogengine::Parameter *)(a1 + v6));
      v6 += 336;
    }
    while (a1 + v6 != a2);
    a3 += v6;
  }
  return a3;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<siri::dialogengine::Parameter>>(unint64_t a1)
{
  if (a1 >= 0xC30C30C30C30C4)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(336 * a1);
}

void siri::dialogengine::File::GetMetadata(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  void *__p[2];
  char v8;

  v5 = a1 + 200;
  siri::dialogengine::StringToLower(a2, (uint64_t)__p);
  v6 = std::__tree<std::string>::find<std::string>(v5, (const void **)__p);
  if (v8 < 0)
    operator delete(__p[0]);
  if (a1 + 208 == v6)
  {
    a3[2] = 0;
    a3[1] = 0;
    *a3 = (uint64_t)(a3 + 1);
  }
  else
  {
    std::set<std::string>::set[abi:ne180100](a3, (const void ***)(v6 + 56));
  }
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::File::IsUniqueMetadataName(std::string const&)::$_0 &&>>()
{
  uint64_t *v0;
  uint64_t v1;
  void *__p[2];
  char v3;
  void *v4[2];
  char v5;
  void *v6[2];
  char v7;
  void *v8[2];
  char v9;
  void *v10[2];
  char v11;
  const void *v12[3];
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v16[24];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v0 = (uint64_t *)operator new();
  std::string::basic_string[abi:ne180100]<0>(v10, "category");
  siri::dialogengine::StringToLower((uint64_t)v10, (uint64_t)v12);
  std::string::basic_string[abi:ne180100]<0>(v8, "readyForLoc");
  siri::dialogengine::StringToLower((uint64_t)v8, (uint64_t)&v13);
  std::string::basic_string[abi:ne180100]<0>(v6, "sourceLocale");
  siri::dialogengine::StringToLower((uint64_t)v6, (uint64_t)&v14);
  std::string::basic_string[abi:ne180100]<0>(v4, "whitespace");
  siri::dialogengine::StringToLower((uint64_t)v4, (uint64_t)&v15);
  std::string::basic_string[abi:ne180100]<0>(__p, "listenAfterSpeaking");
  siri::dialogengine::StringToLower((uint64_t)__p, (uint64_t)v16);
  std::set<std::string>::set[abi:ne180100](v0, v12, 5);
  v1 = 0;
  siri::dialogengine::File::IsUniqueMetadataName(std::string const&)::sUniqueNames = (uint64_t)v0;
  do
  {
    if ((char)v16[v1 + 23] < 0)
      operator delete(*(void **)&v16[v1]);
    v1 -= 24;
  }
  while (v1 != -120);
  if (v3 < 0)
    operator delete(__p[0]);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  if (v9 < 0)
    operator delete(v8[0]);
  if (v11 < 0)
    operator delete(v10[0]);
}

void sub_1BF90C2B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,char a40)
{
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;

  v43 = 0;
  while (1)
  {
    if (*(char *)(v41 + v43 + 119) < 0)
      operator delete(*(void **)(v41 + v43 + 96));
    v43 -= 24;
    if (v43 == -120)
    {
      if (a15 < 0)
        operator delete(__p);
      if (a21 < 0)
        operator delete(a16);
      if (a27 < 0)
        operator delete(a22);
      if (a33 < 0)
        operator delete(a28);
      if (a39 < 0)
        operator delete(a34);
      MEMORY[0x1C3B8D890](v40, 0x1020C4062D53EE8);
      _Unwind_Resume(a1);
    }
  }
}

void sub_1BF90C3E0()
{
  JUMPOUT(0x1BF90C3C0);
}

void std::__tree<siri::dialogengine::ValidationEntry>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<siri::dialogengine::ValidationEntry>::destroy(*a1);
    std::__tree<siri::dialogengine::ValidationEntry>::destroy(a1[1]);
    (*(void (**)(_QWORD *))a1[4])(a1 + 4);
    operator delete(a1);
  }
}

uint64_t siri::dialogengine::File::File(uint64_t a1, const std::string *a2)
{
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &off_1E793A3A0;
  *(_QWORD *)(a1 + 8) = a1 + 16;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_QWORD *)(a1 + 144) = 0;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 152), "5.0");
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = a1 + 208;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_QWORD *)(a1 + 272) = a1 + 280;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_QWORD *)(a1 + 384) = a1 + 392;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_DWORD *)(a1 + 504) = 1065353216;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_QWORD *)(a1 + 560) = 0;
  *(_QWORD *)(a1 + 312) = &off_1E792BC50;
  *(_QWORD *)(a1 + 368) = 0;
  *(_QWORD *)(a1 + 376) = &unk_1E792BCA8;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_QWORD *)(a1 + 568) = a1 + 576;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_QWORD *)(a1 + 592) = a1 + 600;
  *(_QWORD *)(a1 + 632) = 0;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_BYTE *)(a1 + 648) = 1;
  *(_BYTE *)(a1 + 656) = 0;
  *(_BYTE *)(a1 + 680) = 0;
  *(_BYTE *)(a1 + 688) = 0;
  *(_BYTE *)(a1 + 712) = 0;
  *(_BYTE *)(a1 + 720) = 0;
  *(_BYTE *)(a1 + 744) = 0;
  siri::dialogengine::File::SetLocale(a1, a2);
  return a1;
}

void sub_1BF90C700(_Unwind_Exception *a1, uint64_t a2, void **a3, void **a4, ...)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void **v7;
  uint64_t v8;
  siri::dialogengine::Group *v9;
  uint64_t v10;
  uint64_t v11;
  va_list va;

  va_start(va, a4);
  if (*(_BYTE *)(v4 + 744))
    std::__tree<std::string>::destroy(v11, *(char **)(v4 + 728));
  if (*(_BYTE *)(v4 + 712))
    std::__tree<std::string>::destroy(v10, *(char **)(v4 + 696));
  if (*(_BYTE *)(v4 + 680) && *(char *)(v4 + 679) < 0)
    operator delete(*(void **)(v4 + 656));
  if (*(char *)(v4 + 639) < 0)
    operator delete(*v7);
  std::__tree<siri::dialogengine::ValidationEntry>::destroy(*(_QWORD **)(v4 + 600));
  std::__tree<siri::dialogengine::ValidationEntry>::destroy(*(_QWORD **)(v4 + 576));
  siri::dialogengine::Group::~Group(v9);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](v8);
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(*(_QWORD **)(v4 + 280));
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](a2);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](v6);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](v5);
  std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::destroy(*(_QWORD **)(v4 + 208));
  std::vector<siri::dialogengine::Parameter>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  if (*(char *)(v4 + 175) < 0)
    operator delete(*a3);
  if (*(char *)(v4 + 151) < 0)
    operator delete(*(void **)(v4 + 128));
  if (*(char *)(v4 + 127) < 0)
    operator delete(*(void **)(v4 + 104));
  if (*(char *)(v4 + 103) < 0)
    operator delete(*(void **)(v4 + 80));
  if (*(char *)(v4 + 79) < 0)
    operator delete(*(void **)(v4 + 56));
  if (*(char *)(v4 + 55) < 0)
    operator delete(*a4);
  *(_QWORD *)v4 = off_1E793AED8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*(_QWORD **)(v4 + 16));
  _Unwind_Resume(a1);
}

double siri::dialogengine::File::SetLocale(uint64_t a1, const std::string *a2)
{
  void **v3;
  double result;
  std::string v5;

  siri::dialogengine::GetCanonicalLocale(a2, 0, &v5);
  v3 = (void **)(a1 + 128);
  if (*(char *)(a1 + 151) < 0)
    operator delete(*v3);
  result = *(double *)&v5.__r_.__value_.__l.__data_;
  *(_OWORD *)v3 = *(_OWORD *)&v5.__r_.__value_.__l.__data_;
  *(_QWORD *)(a1 + 144) = *((_QWORD *)&v5.__r_.__value_.__l + 2);
  return result;
}

void siri::dialogengine::File::GetParamsFilename(siri::dialogengine::File *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 55) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 4), *((_QWORD *)this + 5));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 2);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 6);
  }
}

std::string *siri::dialogengine::File::SetParamsFilename(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 32), a2);
}

void siri::dialogengine::File::GetLocaleFilename(siri::dialogengine::File *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 79) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 7), *((_QWORD *)this + 8));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 56);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 9);
  }
}

std::string *siri::dialogengine::File::SetLocaleFilename(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 56), a2);
}

void siri::dialogengine::File::GetVisualFilename(siri::dialogengine::File *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 103) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 10), *((_QWORD *)this + 11));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 5);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 12);
  }
}

std::string *siri::dialogengine::File::SetVisualFilename(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 80), a2);
}

void siri::dialogengine::File::GetId(siri::dialogengine::File *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 127) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 13), *((_QWORD *)this + 14));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 104);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 15);
  }
}

std::string *siri::dialogengine::File::SetId(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 104), a2);
}

void siri::dialogengine::File::GetParamsId(siri::dialogengine::File *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 639) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 77), *((_QWORD *)this + 78));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 616);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 79);
  }
}

std::string *siri::dialogengine::File::SetParamsId(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 616), a2);
}

void siri::dialogengine::File::GetLocale(siri::dialogengine::File *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 151) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 16), *((_QWORD *)this + 17));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 8);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 18);
  }
}

void siri::dialogengine::File::GetFormatVersion(siri::dialogengine::File *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 175) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 19), *((_QWORD *)this + 20));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 152);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 21);
  }
}

std::string *siri::dialogengine::File::SetFormatVersion(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 152), a2);
}

_QWORD *siri::dialogengine::File::GetParameters@<X0>(siri::dialogengine::File *this@<X0>, _QWORD *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return std::vector<siri::dialogengine::Parameter>::__init_with_size[abi:ne180100]<siri::dialogengine::Parameter*,siri::dialogengine::Parameter*>(a2, *((_QWORD *)this + 22), *((_QWORD *)this + 23), 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(*((_QWORD *)this + 23) - *((_QWORD *)this + 22)) >> 4));
}

_QWORD *siri::dialogengine::File::SetParameters(_QWORD *result, uint64_t *a2)
{
  void **v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void (***v11)(_QWORD);
  BOOL v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (***v19)(_QWORD);

  v2 = (void **)(result + 22);
  if (result + 22 != a2)
  {
    v3 = result;
    v5 = *a2;
    v4 = a2[1];
    v6 = 0xCF3CF3CF3CF3CF3DLL * ((v4 - *a2) >> 4);
    v7 = result[24];
    v8 = result[22];
    if (0xCF3CF3CF3CF3CF3DLL * ((v7 - v8) >> 4) < v6)
    {
      if (v8)
      {
        v9 = result[23];
        v10 = (void *)result[22];
        if (v9 != v8)
        {
          v11 = (void (***)(_QWORD))(v9 - 336);
          do
          {
            (**v11)(v11);
            v12 = v11 == (void (***)(_QWORD))v8;
            v11 -= 42;
          }
          while (!v12);
          v10 = *v2;
        }
        v3[23] = v8;
        operator delete(v10);
        v7 = 0;
        *v2 = 0;
        v2[1] = 0;
        v2[2] = 0;
      }
      if (v6 > 0xC30C30C30C30C3)
        std::vector<BOOL>::__throw_length_error[abi:ne180100]();
      v13 = 0xCF3CF3CF3CF3CF3DLL * (v7 >> 4);
      v14 = 2 * v13;
      if (2 * v13 <= v6)
        v14 = v6;
      if (v13 >= 0x61861861861861)
        v15 = 0xC30C30C30C30C3;
      else
        v15 = v14;
      std::vector<siri::dialogengine::Parameter>::__vallocate[abi:ne180100](v2, v15);
      result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<siri::dialogengine::Parameter>,siri::dialogengine::Parameter*,siri::dialogengine::Parameter*,siri::dialogengine::Parameter*>(v5, v4, v3[23]);
LABEL_23:
      v3[23] = result;
      return result;
    }
    v16 = result[23];
    if (0xCF3CF3CF3CF3CF3DLL * ((v16 - v8) >> 4) < v6)
    {
      v17 = v5 + 16 * ((v16 - v8) >> 4);
      if (v16 != v8)
      {
        v18 = 16 * ((v16 - v8) >> 4);
        do
        {
          siri::dialogengine::Parameter::operator=(v8, v5);
          v5 += 336;
          v8 += 336;
          v18 -= 336;
        }
        while (v18);
        v8 = v3[23];
      }
      result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<siri::dialogengine::Parameter>,siri::dialogengine::Parameter*,siri::dialogengine::Parameter*,siri::dialogengine::Parameter*>(v17, v4, v8);
      goto LABEL_23;
    }
    if (v5 != v4)
    {
      do
      {
        result = (_QWORD *)siri::dialogengine::Parameter::operator=(v8, v5);
        v5 += 336;
        v8 += 336;
      }
      while (v5 != v4);
      v16 = v3[23];
    }
    if (v16 != v8)
    {
      v19 = (uint64_t (***)(_QWORD))(v16 - 336);
      do
      {
        result = (_QWORD *)(**v19)(v19);
        v12 = v19 == (uint64_t (***)(_QWORD))v8;
        v19 -= 42;
      }
      while (!v12);
    }
    v3[23] = v8;
  }
  return result;
}

void sub_1BF90CC2C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 184) = v2;
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::Parameter::operator=(uint64_t a1, uint64_t a2)
{
  char v4;

  std::string::operator=((std::string *)(a1 + 8), (const std::string *)(a2 + 8));
  std::string::operator=((std::string *)(a1 + 32), (const std::string *)(a2 + 32));
  std::string::operator=((std::string *)(a1 + 56), (const std::string *)(a2 + 56));
  std::string::operator=((std::string *)(a1 + 80), (const std::string *)(a2 + 80));
  std::string::operator=((std::string *)(a1 + 104), (const std::string *)(a2 + 104));
  std::string::operator=((std::string *)(a1 + 128), (const std::string *)(a2 + 128));
  v4 = *(_BYTE *)(a2 + 154);
  *(_WORD *)(a1 + 152) = *(_WORD *)(a2 + 152);
  *(_BYTE *)(a1 + 154) = v4;
  std::string::operator=((std::string *)(a1 + 160), (const std::string *)(a2 + 160));
  std::string::operator=((std::string *)(a1 + 184), (const std::string *)(a2 + 184));
  std::string::operator=((std::string *)(a1 + 208), (const std::string *)(a2 + 208));
  *(_WORD *)(a1 + 232) = *(_WORD *)(a2 + 232);
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
  std::string::operator=((std::string *)(a1 + 256), (const std::string *)(a2 + 256));
  std::string::operator=((std::string *)(a1 + 280), (const std::string *)(a2 + 280));
  if (a1 != a2)
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>(a1 + 312, *(__int128 **)(a2 + 312), (__int128 *)(a2 + 320));
  return a1;
}

uint64_t siri::dialogengine::File::AddParameter(siri::dialogengine::File *this, const siri::dialogengine::Parameter *a2)
{
  char *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t i;
  uint64_t v18;
  const siri::dialogengine::Parameter *v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  unint64_t v23;
  unint64_t v24;
  _BYTE v25[24];
  char *v26;

  v4 = (char *)this + 192;
  v5 = *((_QWORD *)this + 24);
  v6 = *((_QWORD *)this + 23);
  if (v6 >= v5)
  {
    v9 = *((_QWORD *)this + 22);
    v10 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(v6 - v9) >> 4);
    if (v10 + 1 > 0xC30C30C30C30C3)
      std::vector<BOOL>::__throw_length_error[abi:ne180100]();
    v11 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(v5 - v9) >> 4);
    v12 = 2 * v11;
    if (2 * v11 <= v10 + 1)
      v12 = v10 + 1;
    if (v11 >= 0x61861861861861)
      v13 = 0xC30C30C30C30C3;
    else
      v13 = v12;
    v26 = v4;
    if (v13)
      v13 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<siri::dialogengine::Parameter>>(v13);
    else
      v14 = 0;
    v24 = v13;
    *(_QWORD *)v25 = v13 + 336 * v10;
    *(_QWORD *)&v25[16] = v13 + 336 * v14;
    siri::dialogengine::Parameter::Parameter(*(siri::dialogengine::Parameter **)v25, a2);
    *(_QWORD *)&v25[8] = *(_QWORD *)v25 + 336;
    v16 = *((_QWORD *)this + 22);
    v15 = *((_QWORD *)this + 23);
    for (i = 336; ; i -= 336)
    {
      v18 = *(_QWORD *)v25 + i;
      if (v15 + i - 336 == v16)
        break;
      v19 = (const siri::dialogengine::Parameter *)(v15 + i - 672);
      siri::dialogengine::Parameter::Parameter((siri::dialogengine::Parameter *)(v18 - 672), v19);
    }
    v20 = *((_QWORD *)this + 24);
    v21 = *(_OWORD *)&v25[8];
    v23 = *(_QWORD *)&v25[8];
    v22 = *((_OWORD *)this + 11);
    *((_QWORD *)this + 22) = v18 - 336;
    *(_OWORD *)v25 = v22;
    *(_OWORD *)((char *)this + 184) = v21;
    *(_QWORD *)&v25[16] = v20;
    v24 = v22;
    result = std::__split_buffer<siri::dialogengine::Parameter>::~__split_buffer((uint64_t)&v24);
    v8 = v23;
  }
  else
  {
    result = (uint64_t)siri::dialogengine::Parameter::Parameter(*((siri::dialogengine::Parameter **)this + 23), a2);
    v8 = v6 + 336;
    *((_QWORD *)this + 23) = v6 + 336;
  }
  *((_QWORD *)this + 23) = v8;
  return result;
}

void sub_1BF90CE9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::__split_buffer<siri::dialogengine::Parameter>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<siri::dialogengine::Parameter>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 336;
    (**(void (***)(uint64_t))(i - 336))(i - 336);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t siri::dialogengine::File::GetParameter(uint64_t a1, unsigned __int8 **a2)
{
  uint64_t v2;
  uint64_t i;
  __int128 v5;
  std::string::size_type size;
  unsigned __int8 *v7;
  int v8;
  unsigned __int8 *v9;
  uint64_t v10;
  int v11;
  int v12;
  void *v14;
  int v15;
  std::string __p;

  v2 = *(_QWORD *)(a1 + 176);
  for (i = *(_QWORD *)(a1 + 184); v2 != i; v2 += 336)
  {
    if (*(char *)(v2 + 31) < 0)
    {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v2 + 8), *(_QWORD *)(v2 + 16));
    }
    else
    {
      v5 = *(_OWORD *)(v2 + 8);
      __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(v2 + 24);
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v5;
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    v7 = (unsigned __int8 *)*((unsigned __int8 *)a2 + 23);
    v8 = (char)v7;
    if ((char)v7 < 0)
      v7 = a2[1];
    if ((unsigned __int8 *)size == v7)
    {
      if (v8 >= 0)
        v9 = (unsigned __int8 *)a2;
      else
        v9 = *a2;
      if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
      {
        v14 = (void *)__p.__r_.__value_.__r.__words[0];
        v15 = memcmp(__p.__r_.__value_.__l.__data_, v9, __p.__r_.__value_.__l.__size_);
        operator delete(v14);
        if (!v15)
          return v2;
      }
      else
      {
        if (!*((_BYTE *)&__p.__r_.__value_.__s + 23))
          return v2;
        v10 = 0;
        do
        {
          v11 = __p.__r_.__value_.__s.__data_[v10];
          v12 = v9[v10];
        }
        while (v11 == v12 && HIBYTE(__p.__r_.__value_.__r.__words[2]) - 1 != v10++);
        if (v11 == v12)
          return v2;
      }
    }
    else if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  return 0;
}

void siri::dialogengine::File::GetMetadata(siri::dialogengine::File *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  const void **v3;
  const void ***v4;
  const void **v6;
  const void ***v7;
  BOOL v8;

  *(_QWORD *)(a2 + 8) = 0;
  v2 = a2 + 8;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = a2 + 8;
  v3 = (const void **)*((_QWORD *)this + 25);
  v4 = (const void ***)((char *)this + 208);
  if (v3 != (const void **)((char *)this + 208))
  {
    do
    {
      std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::set<std::string>> const&>((uint64_t **)a2, v2, v3 + 4, (uint64_t)(v3 + 4));
      v6 = (const void **)v3[1];
      if (v6)
      {
        do
        {
          v7 = (const void ***)v6;
          v6 = (const void **)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (const void ***)v3[2];
          v8 = *v7 == v3;
          v3 = (const void **)v7;
        }
        while (!v8);
      }
      v3 = (const void **)v7;
    }
    while (v7 != v4);
  }
}

void sub_1BF90D0E8(_Unwind_Exception *a1)
{
  _QWORD **v1;

  std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::destroy(*v1);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::set<std::string>> const&>(uint64_t **a1, uint64_t a2, const void **a3, uint64_t a4)
{
  uint64_t **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t **v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  char *v18;
  uint64_t *v19;
  _QWORD v20[2];
  char v21;
  uint64_t v22;
  uint64_t v23;

  v8 = a1 + 1;
  if (a1 + 1 != (uint64_t **)a2
    && !std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), a3, (const void **)(a2 + 32)))
  {
    if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), (const void **)(a2 + 32), a3))
    {
      v22 = a2;
      v23 = a2;
      v12 = (uint64_t **)&v22;
      if (a2)
        return;
      goto LABEL_31;
    }
    v12 = (uint64_t **)(a2 + 8);
    v11 = *(uint64_t **)(a2 + 8);
    if (v11)
    {
      v13 = *(_QWORD **)(a2 + 8);
      do
      {
        v14 = (uint64_t)v13;
        v13 = (_QWORD *)*v13;
      }
      while (v13);
    }
    else
    {
      v17 = a2;
      do
      {
        v14 = *(_QWORD *)(v17 + 16);
        v16 = *(_QWORD *)v14 == v17;
        v17 = v14;
      }
      while (!v16);
    }
    if ((uint64_t **)v14 != v8)
    {
      if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), a3, (const void **)(v14 + 32)))
      {
LABEL_29:
        v12 = (uint64_t **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)a1, &v23, a3);
        goto LABEL_30;
      }
      v11 = *v12;
    }
    if (v11)
    {
      v23 = v14;
      v12 = (uint64_t **)v14;
    }
    else
    {
      v23 = a2;
    }
LABEL_30:
    if (*v12)
      return;
    goto LABEL_31;
  }
  if (*a1 != (uint64_t *)a2)
  {
    v9 = *(_QWORD *)a2;
    if (*(_QWORD *)a2)
    {
      do
      {
        v10 = v9;
        v9 = *(_QWORD *)(v9 + 8);
      }
      while (v9);
    }
    else
    {
      v15 = a2;
      do
      {
        v10 = *(_QWORD *)(v15 + 16);
        v16 = *(_QWORD *)v10 == v15;
        v15 = v10;
      }
      while (v16);
    }
    if (std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), (const void **)(v10 + 32), a3))
      goto LABEL_16;
    goto LABEL_29;
  }
  v10 = a2;
LABEL_16:
  if (*(_QWORD *)a2)
  {
    v23 = v10;
    v12 = (uint64_t **)(v10 + 8);
    goto LABEL_30;
  }
  v23 = a2;
  v12 = (uint64_t **)a2;
LABEL_31:
  v18 = (char *)operator new(0x50uLL);
  v19 = (uint64_t *)v18;
  v20[0] = v18;
  v20[1] = v8;
  v21 = 0;
  if (*(char *)(a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v18 + 32), *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
  }
  else
  {
    *((_OWORD *)v18 + 2) = *(_OWORD *)a4;
    *((_QWORD *)v18 + 6) = *(_QWORD *)(a4 + 16);
  }
  std::set<std::string>::set[abi:ne180100](v19 + 7, (const void ***)(a4 + 24));
  v21 = 1;
  std::__tree<std::string>::__insert_node_at(a1, v23, v12, v19);
  v20[0] = 0;
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::set<std::string>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::set<std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)v20);
}

void sub_1BF90D308(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::set<std::string>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::set<std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::set<std::string>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::set<std::string>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::set<std::string>>,0>((uint64_t)v1 + 32);
    operator delete(v1);
  }
}

void siri::dialogengine::File::SetMetadata(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  const void **v8;
  const void **v9;
  const void ***v10;
  BOOL v11;
  _QWORD *v12;
  _QWORD *v13;

  v4 = (_QWORD *)(a1 + 208);
  std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::destroy(*(_QWORD **)(a1 + 208));
  *(v4 - 1) = v4;
  *v4 = 0;
  v4[1] = 0;
  v7 = (_QWORD *)*a2;
  v5 = a2 + 1;
  v6 = v7;
  if (v7 != v5)
  {
    do
    {
      v8 = (const void **)v6[7];
      if (v8 != v6 + 8)
      {
        do
        {
          siri::dialogengine::File::AddMetadata(a1, (uint64_t)(v6 + 4), v8 + 4);
          v9 = (const void **)v8[1];
          if (v9)
          {
            do
            {
              v10 = (const void ***)v9;
              v9 = (const void **)*v9;
            }
            while (v9);
          }
          else
          {
            do
            {
              v10 = (const void ***)v8[2];
              v11 = *v10 == v8;
              v8 = (const void **)v10;
            }
            while (!v11);
          }
          v8 = (const void **)v10;
        }
        while (v10 != v6 + 8);
      }
      v12 = (_QWORD *)v6[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (_QWORD *)v6[2];
          v11 = *v13 == (_QWORD)v6;
          v6 = v13;
        }
        while (!v11);
      }
      v6 = v13;
    }
    while (v13 != v5);
  }
}

void siri::dialogengine::File::AddMetadata(uint64_t a1, uint64_t a2, const void **a3)
{
  uint64_t **v5;
  void **v6;
  char *v7;
  uint64_t **v8;
  uint64_t v9;
  void *__p[2];
  uint64_t v11;
  _QWORD v12[2];
  char v13;
  uint64_t v14;

  v5 = (uint64_t **)(a1 + 200);
  siri::dialogengine::StringToLower(a2, (uint64_t)__p);
  v6 = (void **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)v5, &v14, (const void **)__p);
  v7 = (char *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = (char *)operator new(0x50uLL);
    v12[1] = a1 + 208;
    *((_OWORD *)v7 + 2) = *(_OWORD *)__p;
    v9 = v11;
    __p[0] = 0;
    __p[1] = 0;
    v11 = 0;
    *((_QWORD *)v7 + 8) = 0;
    *((_QWORD *)v7 + 9) = 0;
    *((_QWORD *)v7 + 6) = v9;
    *((_QWORD *)v7 + 7) = v7 + 64;
    v13 = 1;
    std::__tree<std::string>::__insert_node_at(v5, v14, v8, (uint64_t *)v7);
    v12[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::set<std::string>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::set<std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)v12);
  }
  std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)v7 + 7, a3, (uint64_t)a3);
  if (SHIBYTE(v11) < 0)
    operator delete(__p[0]);
}

void sub_1BF90D540(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::File::GetWhitespaceMode(siri::dialogengine::File *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v9;
  void *v12[2];
  char v13;
  std::string v14;
  std::string __p;
  unint64_t *v16;
  unint64_t v17;
  char v18;

  std::string::basic_string[abi:ne180100]<0>(v12, "whitespace");
  siri::dialogengine::File::GetMetadataUnique((uint64_t)this, (uint64_t)v12, &v14);
  siri::dialogengine::StringTrim(" \t\n\r", &v14, &__p);
  siri::dialogengine::StringToLower((uint64_t)&__p, (uint64_t)&v16);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  if (v13 < 0)
    operator delete(v12[0]);
  if (v18 < 0)
  {
    switch(v17)
    {
      case 5uLL:
        if (*(_DWORD *)v16 == 1769108595 && *((_BYTE *)v16 + 4) == 112)
        {
          v9 = 2;
LABEL_46:
          operator delete(v16);
          return v9;
        }
        break;
      case 8uLL:
        if (*v16 == 0x6576726573657270)
        {
          v9 = 3;
          goto LABEL_46;
        }
        break;
      case 0x10uLL:
        v5 = 0x636F6D7072657373;
        v6 = bswap64(*v16);
        if (v6 == 0x636F6D7072657373 && (v5 = 0x656163686C696E65, v6 = bswap64(v16[1]), v6 == 0x656163686C696E65))
        {
          v7 = 0;
        }
        else if (v6 < v5)
        {
          v7 = -1;
        }
        else
        {
          v7 = 1;
        }
        v9 = v7 == 0;
        goto LABEL_46;
    }
    v9 = 0;
    goto LABEL_46;
  }
  if (v18 == 5)
  {
    if ((_DWORD)v16 == 1769108595 && BYTE4(v16) == 112)
      return 2;
    return 0;
  }
  if (v18 == 8)
  {
    if (v16 == (unint64_t *)0x6576726573657270)
      return 3;
    return 0;
  }
  if (v18 != 16)
    return 0;
  v2 = 0x636F6D7072657373;
  v3 = bswap64((unint64_t)v16);
  if (v3 == 0x636F6D7072657373 && (v2 = 0x656163686C696E65, v3 = bswap64(v17), v3 == 0x656163686C696E65))
  {
    v4 = 0;
  }
  else if (v3 < v2)
  {
    v4 = -1;
  }
  else
  {
    v4 = 1;
  }
  return v4 == 0;
}

void sub_1BF90D798(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a14 < 0)
    operator delete(a9);
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::File::GetRoot@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(this + 232);
  *a2 = *(_QWORD *)(this + 224);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

_QWORD *siri::dialogengine::File::SetRoot(uint64_t a1, uint64_t *a2)
{
  return std::shared_ptr<siri::dialogengine::PatternSchemaUsage>::operator=[abi:ne180100]((_QWORD *)(a1 + 224), *a2, a2[1]);
}

uint64_t siri::dialogengine::File::GetVisualRef@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(this + 248);
  *a2 = *(_QWORD *)(this + 240);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

void siri::dialogengine::File::SetVisualRef(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v3 = *a2;
  v2 = a2[1];
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = *(std::__shared_weak_count **)(a1 + 248);
  *(_QWORD *)(a1 + 240) = v3;
  *(_QWORD *)(a1 + 248) = v2;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

uint64_t siri::dialogengine::File::GetVisualResponse@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(this + 264);
  *a2 = *(_QWORD *)(this + 256);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

void siri::dialogengine::File::SetVisualResponse(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v3 = *a2;
  v2 = a2[1];
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = *(std::__shared_weak_count **)(a1 + 264);
  *(_QWORD *)(a1 + 256) = v3;
  *(_QWORD *)(a1 + 264) = v2;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

uint64_t siri::dialogengine::File::GetConditions@<X0>(uint64_t this@<X0>, char **a2@<X8>)
{
  _QWORD *v2;
  _QWORD *v3;
  char *v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  __int128 v17;
  unint64_t *v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  __int128 v23;
  int64x2_t v24;
  char *v25;
  _QWORD *v26;
  _QWORD *v27;
  BOOL v28;
  uint64_t v29;
  int64x2_t v30;
  char *v31;
  _QWORD *v32;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v2 = *(_QWORD **)(this + 272);
  v3 = (_QWORD *)(this + 280);
  if (v2 != (_QWORD *)(this + 280))
  {
    v5 = 0;
    v6 = a2 + 2;
    do
    {
      if ((unint64_t)v5 >= *v6)
      {
        v10 = (v5 - *a2) >> 4;
        if ((unint64_t)(v10 + 1) >> 60)
          std::vector<BOOL>::__throw_length_error[abi:ne180100]();
        v11 = *v6 - (_QWORD)*a2;
        v12 = v11 >> 3;
        if (v11 >> 3 <= (unint64_t)(v10 + 1))
          v12 = v10 + 1;
        if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
          v13 = 0xFFFFFFFFFFFFFFFLL;
        else
          v13 = v12;
        v32 = v6;
        v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>>(v13);
        v16 = &v14[16 * v10];
        v17 = *(_OWORD *)(v2 + 7);
        *(_OWORD *)v16 = v17;
        if (*((_QWORD *)&v17 + 1))
        {
          v18 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
          do
            v19 = __ldxr(v18);
          while (__stxr(v19 + 1, v18));
        }
        v21 = *a2;
        v20 = a2[1];
        if (v20 == *a2)
        {
          v24 = vdupq_n_s64((unint64_t)v20);
          v22 = &v14[16 * v10];
        }
        else
        {
          v22 = &v14[16 * v10];
          do
          {
            v23 = *((_OWORD *)v20 - 1);
            v20 -= 16;
            *((_OWORD *)v22 - 1) = v23;
            v22 -= 16;
            *(_QWORD *)v20 = 0;
            *((_QWORD *)v20 + 1) = 0;
          }
          while (v20 != v21);
          v24 = *(int64x2_t *)a2;
        }
        v5 = v16 + 16;
        *a2 = v22;
        a2[1] = v16 + 16;
        v30 = v24;
        v25 = a2[2];
        a2[2] = &v14[16 * v15];
        v31 = v25;
        v29 = v24.i64[0];
        this = std::__split_buffer<std::shared_ptr<siri::dialogengine::ChunkText>>::~__split_buffer((uint64_t)&v29);
      }
      else
      {
        *(_QWORD *)v5 = v2[7];
        v7 = v2[8];
        *((_QWORD *)v5 + 1) = v7;
        if (v7)
        {
          v8 = (unint64_t *)(v7 + 8);
          do
            v9 = __ldxr(v8);
          while (__stxr(v9 + 1, v8));
        }
        v5 += 16;
      }
      a2[1] = v5;
      v26 = (_QWORD *)v2[1];
      if (v26)
      {
        do
        {
          v27 = v26;
          v26 = (_QWORD *)*v26;
        }
        while (v26);
      }
      else
      {
        do
        {
          v27 = (_QWORD *)v2[2];
          v28 = *v27 == (_QWORD)v2;
          v2 = v27;
        }
        while (!v28);
      }
      v2 = v27;
    }
    while (v27 != v3);
  }
  return this;
}

void sub_1BF90DAF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::File::GetCondition@<X0>(uint64_t a1@<X0>, const void **a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t result;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  result = std::__tree<std::string>::find<std::string>(a1 + 272, a2);
  if (a1 + 280 == result)
  {
    *a3 = 0;
    a3[1] = 0;
  }
  else
  {
    v6 = *(_QWORD *)(result + 64);
    *a3 = *(_QWORD *)(result + 56);
    a3[1] = v6;
    if (v6)
    {
      v7 = (unint64_t *)(v6 + 8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
  }
  return result;
}

void siri::dialogengine::File::SetConditions(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD v12[2];

  v4 = a1 + 280;
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(*(_QWORD **)(a1 + 280));
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 272) = v4;
  v5 = *(_QWORD **)a2;
  v6 = *(_QWORD **)(a2 + 8);
  while (v5 != v6)
  {
    v7 = (std::__shared_weak_count *)v5[1];
    v12[0] = *v5;
    v12[1] = v7;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
    siri::dialogengine::File::AddCondition(a1, (uint64_t)v12);
    if (v7)
    {
      v10 = (unint64_t *)&v7->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v5 += 2;
  }
}

void sub_1BF90DC20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void siri::dialogengine::File::AddCondition(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  std::string *v5;
  std::string::size_type size;
  void **v7;
  void *v8;
  uint64_t **v9;
  std::string::size_type v10;
  uint64_t v11;
  std::string *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::string __p;
  std::string v19;
  uint64_t v20;

  v4 = *(std::string **)a2;
  if (*(char *)(*(_QWORD *)a2 + 119) < 0)
    std::string::__init_copy_ctor_external(&v19, v4[4].__r_.__value_.__l.__data_, v4[4].__r_.__value_.__l.__size_);
  else
    v19 = v4[4];
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
  {
    size = v19.__r_.__value_.__l.__size_;
    operator delete(v19.__r_.__value_.__l.__data_);
    if (size)
      goto LABEL_6;
LABEL_9:
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Condition defined without a name: ignoring it.", (const char *)a2);
    return;
  }
  if (!*((_BYTE *)&v19.__r_.__value_.__s + 23))
    goto LABEL_9;
LABEL_6:
  v5 = *(std::string **)a2;
  if (*(char *)(*(_QWORD *)a2 + 119) < 0)
    std::string::__init_copy_ctor_external(&__p, v5[4].__r_.__value_.__l.__data_, v5[4].__r_.__value_.__l.__size_);
  else
    __p = v5[4];
  v7 = (void **)std::__tree<std::string>::__find_equal<std::string>(a1 + 272, &v20, (const void **)&__p.__r_.__value_.__l.__data_);
  v8 = *v7;
  if (!*v7)
  {
    v9 = (uint64_t **)v7;
    v8 = operator new(0x48uLL);
    v19.__r_.__value_.__l.__size_ = a1 + 280;
    *((_OWORD *)v8 + 2) = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    v10 = __p.__r_.__value_.__r.__words[2];
    memset(&__p, 0, sizeof(__p));
    *((_QWORD *)v8 + 7) = 0;
    *((_QWORD *)v8 + 8) = 0;
    *((_QWORD *)v8 + 6) = v10;
    v19.__r_.__value_.__s.__data_[16] = 1;
    std::__tree<std::string>::__insert_node_at((uint64_t **)(a1 + 272), v20, v9, (uint64_t *)v8);
    v19.__r_.__value_.__r.__words[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v19);
  }
  v12 = *(std::string **)a2;
  v11 = *(_QWORD *)(a2 + 8);
  if (v11)
  {
    v13 = (unint64_t *)(v11 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v15 = (std::__shared_weak_count *)*((_QWORD *)v8 + 8);
  *((_QWORD *)v8 + 7) = v12;
  *((_QWORD *)v8 + 8) = v11;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1BF90DDCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::File::GetPhrases(siri::dialogengine::File *this)
{
  return (uint64_t)this + 312;
}

char *siri::dialogengine::File::GetPhrase(uint64_t a1, unsigned __int8 *a2)
{
  return siri::dialogengine::GroupPhrases::GetPhrase(a1 + 312, a2);
}

void siri::dialogengine::File::SetPhrases(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  _QWORD v11[2];
  uint64_t *v12[3];
  void **v13;

  memset(v12, 0, sizeof(v12));
  siri::dialogengine::Group::SetNodes((int64x2_t *)(a1 + 312), v12);
  v13 = (void **)v12;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100](&v13);
  v4 = *(_QWORD **)a2;
  v5 = *(_QWORD **)(a2 + 8);
  while (v4 != v5)
  {
    v6 = (std::__shared_weak_count *)v4[1];
    v11[0] = *v4;
    v11[1] = v6;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
    siri::dialogengine::File::AddPhrase(a1, v11);
    if (v6)
    {
      v9 = (unint64_t *)&v6->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    v4 += 2;
  }
}

void sub_1BF90DEC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void siri::dialogengine::File::AddPhrase(uint64_t a1, _QWORD *a2)
{
  int64x2_t *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  _QWORD v8[2];

  v2 = (int64x2_t *)(a1 + 312);
  v3 = (std::__shared_weak_count *)a2[1];
  v8[0] = *a2;
  v8[1] = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  siri::dialogengine::Group::AddNode(v2, v8);
  if (v3)
  {
    v6 = (unint64_t *)&v3->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1BF90DF74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::File::GetFallback(siri::dialogengine::File *this)
{
  return *((_QWORD *)this + 37);
}

_QWORD *siri::dialogengine::File::SetFallback(uint64_t a1, uint64_t *a2)
{
  return std::shared_ptr<siri::dialogengine::PatternSchemaUsage>::operator=[abi:ne180100]((_QWORD *)(a1 + 296), *a2, a2[1]);
}

void siri::dialogengine::File::GetTexts(siri::dialogengine::File *this@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  siri::dialogengine::WalkNodesForTexts((char **)a2, (uint64_t)this + 312);
}

void sub_1BF90DFD8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void siri::dialogengine::WalkNodesForTexts(char **a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  const void *v5;
  void *v6;
  void *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  unint64_t *v13;
  unint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  char *v26;
  __int128 v27;
  int64x2_t v28;
  uint64_t v29;
  void *v30;
  unint64_t *v31;
  unint64_t v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  if (a2)
  {
    v34 = 0;
    v35 = 0;
    v36 = 0;
    std::vector<std::shared_ptr<siri::dialogengine::Node>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::Node>*,std::shared_ptr<siri::dialogengine::Node>*>((char *)&v34, *(_QWORD **)(a2 + 208), *(_QWORD **)(a2 + 216), (uint64_t)(*(_QWORD *)(a2 + 216) - *(_QWORD *)(a2 + 208)) >> 4);
    v3 = v34;
    v4 = v35;
    if (v34 != v35)
    {
      while (1)
      {
        v5 = *(const void **)v3;
        if (!*(_QWORD *)v3)
          goto LABEL_14;
        if (!v6)
          break;
        siri::dialogengine::WalkNodesForTexts(a1, v6);
LABEL_15:
        v3 += 16;
        if (v3 == v4)
          goto LABEL_47;
      }
      if (v7)
      {
        v8 = *(std::__shared_weak_count **)(v3 + 8);
        *(_QWORD *)&v33 = v7;
        *((_QWORD *)&v33 + 1) = v8;
        if (v8)
        {
          p_shared_owners = (unint64_t *)&v8->__shared_owners_;
          do
            v10 = __ldxr(p_shared_owners);
          while (__stxr(v10 + 1, p_shared_owners));
          v12 = a1[1];
          v11 = (unint64_t)a1[2];
          if ((unint64_t)v12 < v11)
          {
            *(_QWORD *)v12 = v33;
            *((_QWORD *)v12 + 1) = v8;
            v13 = (unint64_t *)&v8->__shared_owners_;
            do
              v14 = __ldxr(v13);
            while (__stxr(v14 + 1, v13));
LABEL_19:
            v15 = v12 + 16;
LABEL_42:
            a1[1] = v15;
            if (v8)
            {
              v31 = (unint64_t *)&v8->__shared_owners_;
              do
                v32 = __ldaxr(v31);
              while (__stlxr(v32 - 1, v31));
              if (!v32)
              {
                ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
                std::__shared_weak_count::__release_weak(v8);
              }
            }
            goto LABEL_15;
          }
        }
        else
        {
          v12 = a1[1];
          v11 = (unint64_t)a1[2];
          if ((unint64_t)v12 < v11)
          {
            *(_QWORD *)v12 = v33;
            *((_QWORD *)v12 + 1) = 0;
            goto LABEL_19;
          }
        }
        v16 = *a1;
        v17 = (v12 - *a1) >> 4;
        v18 = v17 + 1;
        if ((unint64_t)(v17 + 1) >> 60)
          std::vector<BOOL>::__throw_length_error[abi:ne180100]();
        v19 = v11 - (_QWORD)v16;
        if (v19 >> 3 > v18)
          v18 = v19 >> 3;
        if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF0)
          v20 = 0xFFFFFFFFFFFFFFFLL;
        else
          v20 = v18;
        if (v20 >> 60)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v21 = (char *)operator new(16 * v20);
        v22 = &v21[16 * v17];
        v23 = *((_QWORD *)&v33 + 1);
        *(_OWORD *)v22 = v33;
        if (v23)
        {
          v24 = (unint64_t *)(v23 + 8);
          do
            v25 = __ldxr(v24);
          while (__stxr(v25 + 1, v24));
          v16 = *a1;
          v12 = a1[1];
        }
        if (v12 == v16)
        {
          v28 = vdupq_n_s64((unint64_t)v12);
          v26 = &v21[16 * v17];
        }
        else
        {
          v26 = &v21[16 * v17];
          do
          {
            v27 = *((_OWORD *)v12 - 1);
            v12 -= 16;
            *((_OWORD *)v26 - 1) = v27;
            v26 -= 16;
            *(_QWORD *)v12 = 0;
            *((_QWORD *)v12 + 1) = 0;
          }
          while (v12 != v16);
          v28 = *(int64x2_t *)a1;
        }
        v15 = v22 + 16;
        *a1 = v26;
        a1[1] = v22 + 16;
        a1[2] = &v21[16 * v20];
        v29 = v28.i64[1];
        v30 = (void *)v28.i64[0];
        while ((void *)v29 != v30)
          v29 = std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](v29 - 16);
        if (v30)
          operator delete(v30);
        v8 = (std::__shared_weak_count *)*((_QWORD *)&v33 + 1);
        goto LABEL_42;
      }
LABEL_14:
      v33 = 0uLL;
      goto LABEL_15;
    }
LABEL_47:
    *(_QWORD *)&v33 = &v34;
    std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v33);
  }
}

void sub_1BF90E27C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, char a12)
{
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  a9 = (void **)&a12;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

double siri::dialogengine::File::GetOrCreateId@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, int a4@<W3>, uint64_t a5@<X8>)
{
  double result;
  _OWORD *v11;
  std::string::size_type size;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  std::string __p;
  uint64_t v24;
  std::__shared_weak_count *v25;
  std::string v26;

  std::string::basic_string[abi:ne180100]<0>((_QWORD *)a5, "");
  if (!a2)
    return result;
  if (a4 != 1)
  {
    v11 = (_OWORD *)(a2 + 96);
    if (*(char *)(a2 + 119) < 0)
    {
      std::string::__init_copy_ctor_external(&v26, *(const std::string::value_type **)(a2 + 96), *(_QWORD *)(a2 + 104));
    }
    else
    {
      *(_OWORD *)&v26.__r_.__value_.__l.__data_ = *v11;
      v26.__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 112);
    }
    if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v26.__r_.__value_.__r.__words[2]);
    else
      size = v26.__r_.__value_.__l.__size_;
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v26.__r_.__value_.__l.__data_);
      if (size)
      {
LABEL_11:
        if (*(char *)(a2 + 119) < 0)
        {
          std::string::__init_copy_ctor_external(&v26, *(const std::string::value_type **)(a2 + 96), *(_QWORD *)(a2 + 104));
        }
        else
        {
          *(_OWORD *)&v26.__r_.__value_.__l.__data_ = *v11;
          v26.__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 112);
        }
        if (*(char *)(a5 + 23) < 0)
          operator delete(*(void **)a5);
        *(std::string *)a5 = v26;
        if (siri::dialogengine::StringStartsWith((std::string *)a5, (unsigned __int8 *)(a1 + 104)))
          return result;
        goto LABEL_46;
      }
    }
    else if (size)
    {
      goto LABEL_11;
    }
  }
  v14 = *(_QWORD *)(a1 + 224);
  v13 = *(std::__shared_weak_count **)(a1 + 232);
  v24 = v14;
  v25 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  siri::dialogengine::WalkNodesForDialogId(&v26, v14, (const void *)a2, (const void **)&__p.__r_.__value_.__l.__data_);
  if (*(char *)(a5 + 23) < 0)
    operator delete(*(void **)a5);
  result = *(double *)&v26.__r_.__value_.__l.__data_;
  *(std::string *)a5 = v26;
  *((_BYTE *)&v26.__r_.__value_.__s + 23) = 0;
  v26.__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v13)
  {
    v17 = (unint64_t *)&v13->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (*(_QWORD *)(a1 + 296) == a2)
    MEMORY[0x1C3B8D53C](a5, "fallback");
  v19 = *(unsigned __int8 *)(a5 + 23);
  if ((v19 & 0x80u) != 0)
    v19 = *(_QWORD *)(a5 + 8);
  if (!v19)
  {
    v20 = *(_QWORD *)(a1 + 296);
    std::string::basic_string[abi:ne180100]<0>(&__p, "fallback");
    siri::dialogengine::WalkNodesForDialogId(&v26, v20, (const void *)a2, (const void **)&__p.__r_.__value_.__l.__data_);
    if (*(char *)(a5 + 23) < 0)
      operator delete(*(void **)a5);
    result = *(double *)&v26.__r_.__value_.__l.__data_;
    *(std::string *)a5 = v26;
    *((_BYTE *)&v26.__r_.__value_.__s + 23) = 0;
    v26.__r_.__value_.__s.__data_[0] = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v21 = *(unsigned __int8 *)(a5 + 23);
    if ((v21 & 0x80u) != 0)
      v21 = *(_QWORD *)(a5 + 8);
    if (!v21)
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "phrase");
      siri::dialogengine::WalkNodesForDialogId(&v26, a1 + 312, (const void *)a2, (const void **)&__p.__r_.__value_.__l.__data_);
      if (*(char *)(a5 + 23) < 0)
        operator delete(*(void **)a5);
      result = *(double *)&v26.__r_.__value_.__l.__data_;
      *(std::string *)a5 = v26;
      *((_BYTE *)&v26.__r_.__value_.__s + 23) = 0;
      v26.__r_.__value_.__s.__data_[0] = 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
LABEL_46:
  if (a3 == 1)
  {
    siri::dialogengine::JoinIDs(&__p, a1 + 128, a5);
    siri::dialogengine::JoinIDs(&v26, a1 + 104, (uint64_t)&__p);
    if (*(char *)(a5 + 23) < 0)
      operator delete(*(void **)a5);
    result = *(double *)&v26.__r_.__value_.__l.__data_;
    *(std::string *)a5 = v26;
    *((_BYTE *)&v26.__r_.__value_.__s + 23) = 0;
    v26.__r_.__value_.__s.__data_[0] = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    if (*(char *)(a5 + 23) < 0)
    {
      if (!*(_QWORD *)(a5 + 8))
        return result;
      v22 = *(_BYTE **)a5;
    }
    else
    {
      v22 = (_BYTE *)a5;
      if (!*(_BYTE *)(a5 + 23))
        return result;
    }
    if (*v22 == 35)
    {
      std::string::basic_string(&v26, (const std::string *)a5, 1uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&__p);
      if (*(char *)(a5 + 23) < 0)
        operator delete(*(void **)a5);
      result = *(double *)&v26.__r_.__value_.__l.__data_;
      *(std::string *)a5 = v26;
    }
  }
  return result;
}

void sub_1BF90E63C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v16 + 23) < 0)
    operator delete(*(void **)v16);
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::WalkNodesForDialogId(_QWORD *a1, uint64_t a2, const void *a3, const void **a4)
{
  _QWORD *v4;
  const void **v6;
  const void **v7;
  uint64_t v8;
  char *v9;
  const struct __class_type_info *v10;
  const void *v11;
  int v12;
  void *v13;
  void *v14;
  const struct __class_type_info *v15;
  uint64_t v16;
  const void **v17;
  const void *v18;
  char *v19;
  size_t v20;
  std::string *v21;
  const void *v22;
  const std::string::value_type *v23;
  std::string::size_type v24;
  std::string *v25;
  __int128 v26;
  std::string *v27;
  std::string::size_type v28;
  std::string *v29;
  int v30;
  _BOOL4 v31;
  size_t v32;
  std::string *v33;
  const void *v34;
  const std::string::value_type *v35;
  std::string::size_type v36;
  std::string *v37;
  __int128 v38;
  std::string *v39;
  std::string::size_type size;
  std::string *v41;
  __int128 v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  std::string v48;
  std::string v49;
  std::string v50;
  std::string __p;
  std::string::value_type *v52;
  std::string::size_type v53;
  unsigned __int8 v54;
  const void **v55;
  const void **v56;
  uint64_t v57;

  v4 = a1;
  if (!a2)
  {
    std::string::basic_string[abi:ne180100]<0>(a1, "");
    return;
  }
  v55 = 0;
  v56 = 0;
  v57 = 0;
  std::vector<std::shared_ptr<siri::dialogengine::Node>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::Node>*,std::shared_ptr<siri::dialogengine::Node>*>((char *)&v55, *(_QWORD **)(a2 + 208), *(_QWORD **)(a2 + 216), (uint64_t)(*(_QWORD *)(a2 + 216) - *(_QWORD *)(a2 + 208)) >> 4);
  v7 = v55;
  v6 = v56;
  if (v55 == v56)
  {
LABEL_90:
    v52 = (std::string::value_type *)&v55;
    std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v52);
    std::string::basic_string[abi:ne180100]<0>(v4, "");
    return;
  }
  v8 = 0;
  v44 = 0;
  v45 = 0;
  v43 = 0;
  v9 = "node";
  v46 = v4;
  while (1)
  {
    std::string::basic_string[abi:ne180100]<0>(&v52, v9);
    v11 = *v7;
    if (*v7)
    {
      {
        MEMORY[0x1C3B8D53C](&v52, "dialog");
        v8 = (v8 + 1);
        v12 = v8;
      }
      {
        MEMORY[0x1C3B8D53C](&v52, "text");
        v12 = ++HIDWORD(v45);
      }
      {
        MEMORY[0x1C3B8D53C](&v52, "first");
        v12 = v45 + 1;
        LODWORD(v45) = v45 + 1;
      }
      {
        MEMORY[0x1C3B8D53C](&v52, "random");
        v12 = ++HIDWORD(v44);
      }
      {
        MEMORY[0x1C3B8D53C](&v52, "all");
        v12 = v44 + 1;
        LODWORD(v44) = v44 + 1;
      }
      {
        MEMORY[0x1C3B8D53C](&v52, "switch");
        v12 = ++v43;
      }
      else
      {
        v12 = 0;
      }
      if (v11 == a3)
      {
        if (*((char *)a4 + 23) >= 0)
          v32 = *((unsigned __int8 *)a4 + 23);
        else
          v32 = (size_t)a4[1];
        std::string::basic_string[abi:ne180100]((uint64_t)&v50, v32 + 1);
        if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v33 = &v50;
        else
          v33 = (std::string *)v50.__r_.__value_.__r.__words[0];
        if (v32)
        {
          if (*((char *)a4 + 23) >= 0)
            v34 = a4;
          else
            v34 = *a4;
          memmove(v33, v34, v32);
        }
        *(_WORD *)((char *)&v33->__r_.__value_.__l.__data_ + v32) = 35;
        if ((v54 & 0x80u) == 0)
          v35 = (const std::string::value_type *)&v52;
        else
          v35 = v52;
        if ((v54 & 0x80u) == 0)
          v36 = v54;
        else
          v36 = v53;
        v37 = std::string::append(&v50, v35, v36);
        v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v38;
        v37->__r_.__value_.__l.__size_ = 0;
        v37->__r_.__value_.__r.__words[2] = 0;
        v37->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v49, v12);
        v4 = v46;
        if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v39 = &v49;
        else
          v39 = (std::string *)v49.__r_.__value_.__r.__words[0];
        if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v49.__r_.__value_.__r.__words[2]);
        else
          size = v49.__r_.__value_.__l.__size_;
        v41 = std::string::append(&__p, (const std::string::value_type *)v39, size);
        v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
        v46[2] = *((_QWORD *)&v41->__r_.__value_.__l + 2);
        *(_OWORD *)v46 = v42;
        v41->__r_.__value_.__l.__size_ = 0;
        v41->__r_.__value_.__r.__words[2] = 0;
        v41->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v49.__r_.__value_.__l.__data_);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v50.__r_.__value_.__l.__data_);
LABEL_83:
        v31 = 1;
        goto LABEL_86;
      }
      if (v13)
      {
        v14 = v13;
        v15 = v10;
        v16 = v8;
        v17 = v6;
        v18 = a3;
        v19 = v9;
        if (*((char *)a4 + 23) >= 0)
          v20 = *((unsigned __int8 *)a4 + 23);
        else
          v20 = (size_t)a4[1];
        std::string::basic_string[abi:ne180100]((uint64_t)&v49, v20 + 1);
        if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v21 = &v49;
        else
          v21 = (std::string *)v49.__r_.__value_.__r.__words[0];
        if (v20)
        {
          if (*((char *)a4 + 23) >= 0)
            v22 = a4;
          else
            v22 = *a4;
          memmove(v21, v22, v20);
        }
        *(_WORD *)((char *)&v21->__r_.__value_.__l.__data_ + v20) = 35;
        if ((v54 & 0x80u) == 0)
          v23 = (const std::string::value_type *)&v52;
        else
          v23 = v52;
        if ((v54 & 0x80u) == 0)
          v24 = v54;
        else
          v24 = v53;
        v25 = std::string::append(&v49, v23, v24);
        v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
        v50.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v26;
        v25->__r_.__value_.__l.__size_ = 0;
        v25->__r_.__value_.__r.__words[2] = 0;
        v25->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v48, v12);
        v4 = v46;
        v9 = v19;
        if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v27 = &v48;
        else
          v27 = (std::string *)v48.__r_.__value_.__r.__words[0];
        if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v28 = HIBYTE(v48.__r_.__value_.__r.__words[2]);
        else
          v28 = v48.__r_.__value_.__l.__size_;
        v29 = std::string::append(&v50, (const std::string::value_type *)v27, v28);
        a3 = v18;
        __p = *v29;
        v29->__r_.__value_.__l.__size_ = 0;
        v29->__r_.__value_.__r.__words[2] = 0;
        v29->__r_.__value_.__r.__words[0] = 0;
        siri::dialogengine::WalkNodesForDialogId(v46, v14, v18, &__p);
        v6 = v17;
        v8 = v16;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        v10 = v15;
        if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v48.__r_.__value_.__l.__data_);
        if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v50.__r_.__value_.__l.__data_);
        if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v49.__r_.__value_.__l.__data_);
        v30 = *((char *)v46 + 23);
        if ((v30 & 0x80000000) == 0)
        {
          v31 = v30 != 0;
          goto LABEL_86;
        }
        if (v46[1])
          goto LABEL_83;
        operator delete((void *)*v46);
      }
    }
    v31 = 0;
LABEL_86:
    if ((char)v54 < 0)
      operator delete(v52);
    if (v31)
      break;
    v7 += 2;
    if (v7 == v6)
      goto LABEL_90;
  }
  v52 = (std::string::value_type *)&v55;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v52);
}

void sub_1BF90EC44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  uint64_t v39;

  if (a26 < 0)
    operator delete(__p);
  if (a39 < 0)
    operator delete(a34);
  if (a32 < 0)
    operator delete(a27);
  if (*(char *)(v39 - 113) < 0)
    operator delete(*(void **)(v39 - 136));
  *(_QWORD *)(v39 - 136) = v39 - 112;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v39 - 136));
  _Unwind_Resume(a1);
}

void siri::dialogengine::JoinIDs(std::string *this, uint64_t a2, uint64_t a3)
{
  int v5;
  std::string::size_type v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL4 v10;
  std::string::size_type v11;
  size_t v12;
  std::string *v13;
  const void *v14;
  int v15;
  const std::string::value_type *v16;
  std::string::size_type v17;
  std::string *v18;
  __int128 v19;
  const std::string::value_type *v20;
  void *__p[2];
  char v22;
  std::string v23;

  v5 = *(char *)(a2 + 23);
  v6 = *(_QWORD *)(a2 + 8);
  if (v5 >= 0)
    v7 = *(unsigned __int8 *)(a2 + 23);
  else
    v7 = *(_QWORD *)(a2 + 8);
  v8 = *(unsigned __int8 *)(a3 + 23);
  if (!v7)
  {
    if ((v8 & 0x80) == 0)
    {
      *(_OWORD *)&this->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
      v11 = *(_QWORD *)(a3 + 16);
LABEL_14:
      this->__r_.__value_.__r.__words[2] = v11;
      return;
    }
    v20 = *(const std::string::value_type **)a3;
    v6 = *(_QWORD *)(a3 + 8);
LABEL_42:
    std::string::__init_copy_ctor_external(this, v20, v6);
    return;
  }
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(a3 + 8);
  if (!v8)
  {
    if ((v5 & 0x80000000) == 0)
    {
      *(_OWORD *)&this->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
      v11 = *(_QWORD *)(a2 + 16);
      goto LABEL_14;
    }
    v20 = *(const std::string::value_type **)a2;
    goto LABEL_42;
  }
  std::string::basic_string[abi:ne180100]<0>(&v23, "#");
  if (siri::dialogengine::StringEndsWith((std::string *)a2, (unsigned __int8 *)&v23))
  {
    v10 = 1;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "#");
    v10 = siri::dialogengine::StringStartsWith((std::string *)a3, (unsigned __int8 *)__p);
    if (v22 < 0)
      operator delete(__p[0]);
  }
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v23.__r_.__value_.__l.__data_);
    if (v10)
      goto LABEL_19;
  }
  else if (v10)
  {
LABEL_19:
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a2, (const void **)a3, (uint64_t)this);
    return;
  }
  if (*(char *)(a2 + 23) >= 0)
    v12 = *(unsigned __int8 *)(a2 + 23);
  else
    v12 = *(_QWORD *)(a2 + 8);
  v13 = &v23;
  std::string::basic_string[abi:ne180100]((uint64_t)&v23, v12 + 1);
  if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v13 = (std::string *)v23.__r_.__value_.__r.__words[0];
  if (v12)
  {
    if (*(char *)(a2 + 23) >= 0)
      v14 = (const void *)a2;
    else
      v14 = *(const void **)a2;
    memmove(v13, v14, v12);
  }
  *(_WORD *)((char *)&v13->__r_.__value_.__l.__data_ + v12) = 35;
  v15 = *(char *)(a3 + 23);
  if (v15 >= 0)
    v16 = (const std::string::value_type *)a3;
  else
    v16 = *(const std::string::value_type **)a3;
  if (v15 >= 0)
    v17 = *(unsigned __int8 *)(a3 + 23);
  else
    v17 = *(_QWORD *)(a3 + 8);
  v18 = std::string::append(&v23, v16, v17);
  v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  this->__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)&this->__r_.__value_.__l.__data_ = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
}

void sub_1BF90EF10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::File::AddValidationError(uint64_t a1, __int128 *a2, uint64_t a3)
{
  std::string *v4;
  __int128 v5;
  std::string v6;
  void *__p[2];
  std::string::size_type v8;
  void *v9[10];
  char v10;

  siri::dialogengine::ValidationEntry::ValidationEntry((uint64_t)v9, a2, a3);
  std::__tree<siri::dialogengine::ValidationEntry>::__emplace_unique_key_args<siri::dialogengine::ValidationEntry,siri::dialogengine::ValidationEntry const&>((uint64_t **)(a1 + 568), (uint64_t)v9, (uint64_t)v9);
  siri::dialogengine::ValidationEntry::GetFormattedText((siri::dialogengine::ValidationEntry *)v9, &v6);
  v4 = std::string::insert(&v6, 0, "Validation Error: ");
  v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v8 = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  siri::dialogengine::Log::LogWithLevel((uint64_t)__p, 3u);
  if (SHIBYTE(v8) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  v9[0] = off_1E7930350;
  if (v10 < 0)
    operator delete(v9[8]);
  siri::dialogengine::LineNumberBase::~LineNumberBase(v9);
}

void sub_1BF90F010(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  siri::dialogengine::ValidationEntry::~ValidationEntry(&a22);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<siri::dialogengine::ValidationEntry>::__emplace_unique_key_args<siri::dialogengine::ValidationEntry,siri::dialogengine::ValidationEntry const&>(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t v8;
  uint64_t **v9;
  uint64_t *result;
  std::string *v11;
  uint64_t *v12;
  std::string *v13;
  std::string *v14;
  uint64_t *v15;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v6 = (uint64_t **)v5;
        v8 = (uint64_t)(v5 + 4);
        if (!siri::dialogengine::operator<(a2, (uint64_t)(v5 + 4)))
          break;
        v5 = *v6;
        v9 = v6;
        if (!*v6)
          goto LABEL_9;
      }
      result = (uint64_t *)siri::dialogengine::operator<(v8, a2);
      if (!(_DWORD)result)
        break;
      v9 = v6 + 1;
      v5 = v6[1];
      if (!v5)
        goto LABEL_9;
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_9:
    v11 = (std::string *)operator new(0x78uLL);
    v12 = (uint64_t *)v11;
    v11[1].__r_.__value_.__l.__size_ = (std::string::size_type)&off_1E793AEA8;
    v11[1].__r_.__value_.__r.__words[2] = *(_QWORD *)(a3 + 8);
    if (*(char *)(a3 + 39) < 0)
    {
      std::string::__init_copy_ctor_external(v11 + 2, *(const std::string::value_type **)(a3 + 16), *(_QWORD *)(a3 + 24));
    }
    else
    {
      *(_OWORD *)&v11[2].__r_.__value_.__l.__data_ = *(_OWORD *)(a3 + 16);
      v11[2].__r_.__value_.__r.__words[2] = *(_QWORD *)(a3 + 32);
    }
    v13 = (std::string *)(v12 + 9);
    if (*(char *)(a3 + 63) < 0)
    {
      std::string::__init_copy_ctor_external(v13, *(const std::string::value_type **)(a3 + 40), *(_QWORD *)(a3 + 48));
    }
    else
    {
      *(_OWORD *)&v13->__r_.__value_.__l.__data_ = *(_OWORD *)(a3 + 40);
      v12[11] = *(_QWORD *)(a3 + 56);
    }
    v12[4] = (uint64_t)off_1E7930350;
    v14 = (std::string *)(v12 + 12);
    if (*(char *)(a3 + 87) < 0)
    {
      std::string::__init_copy_ctor_external(v14, *(const std::string::value_type **)(a3 + 64), *(_QWORD *)(a3 + 72));
    }
    else
    {
      *(_OWORD *)&v14->__r_.__value_.__l.__data_ = *(_OWORD *)(a3 + 64);
      v12[14] = *(_QWORD *)(a3 + 80);
    }
    *v12 = 0;
    v12[1] = 0;
    v12[2] = (uint64_t)v6;
    *v9 = v12;
    v15 = (uint64_t *)**a1;
    if (v15)
    {
      *a1 = v15;
      v12 = *v9;
    }
    result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v12);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return result;
}

void sub_1BF90F1DC(_Unwind_Exception *a1)
{
  void *v1;
  void **v2;

  siri::dialogengine::LineNumberBase::~LineNumberBase(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void siri::dialogengine::File::AddValidationWarning(uint64_t a1, __int128 *a2, uint64_t a3)
{
  std::string *v4;
  __int128 v5;
  std::string v6;
  void *__p[2];
  std::string::size_type v8;
  void *v9[10];
  char v10;

  siri::dialogengine::ValidationEntry::ValidationEntry((uint64_t)v9, a2, a3);
  std::__tree<siri::dialogengine::ValidationEntry>::__emplace_unique_key_args<siri::dialogengine::ValidationEntry,siri::dialogengine::ValidationEntry const&>((uint64_t **)(a1 + 592), (uint64_t)v9, (uint64_t)v9);
  siri::dialogengine::ValidationEntry::GetFormattedText((siri::dialogengine::ValidationEntry *)v9, &v6);
  v4 = std::string::insert(&v6, 0, "Validation Warning: ");
  v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v8 = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  siri::dialogengine::Log::LogWithLevel((uint64_t)__p, 1u);
  if (SHIBYTE(v8) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  v9[0] = off_1E7930350;
  if (v10 < 0)
    operator delete(v9[8]);
  siri::dialogengine::LineNumberBase::~LineNumberBase(v9);
}

void sub_1BF90F2DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  siri::dialogengine::ValidationEntry::~ValidationEntry(&a22);
  _Unwind_Resume(a1);
}

uint64_t *siri::dialogengine::File::AddValidationError(uint64_t **this, const siri::dialogengine::ValidationEntry *a2)
{
  return std::__tree<siri::dialogengine::ValidationEntry>::__emplace_unique_key_args<siri::dialogengine::ValidationEntry,siri::dialogengine::ValidationEntry const&>(this + 71, (uint64_t)a2, (uint64_t)a2);
}

uint64_t *siri::dialogengine::File::AddValidationWarning(uint64_t **this, const siri::dialogengine::ValidationEntry *a2)
{
  return std::__tree<siri::dialogengine::ValidationEntry>::__emplace_unique_key_args<siri::dialogengine::ValidationEntry,siri::dialogengine::ValidationEntry const&>(this + 74, (uint64_t)a2, (uint64_t)a2);
}

_QWORD *siri::dialogengine::File::GetValidationErrors@<X0>(siri::dialogengine::File *this@<X0>, _QWORD *a2@<X8>)
{
  return std::vector<siri::dialogengine::ValidationEntry>::vector<std::__tree_const_iterator<siri::dialogengine::ValidationEntry,std::__tree_node<siri::dialogengine::ValidationEntry,void *> *,long>,0>(a2, *((_QWORD **)this + 71), (_QWORD *)this + 72);
}

_QWORD *std::vector<siri::dialogengine::ValidationEntry>::vector<std::__tree_const_iterator<siri::dialogengine::ValidationEntry,std::__tree_node<siri::dialogengine::ValidationEntry,void *> *,long>,0>(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2 != a3)
  {
    v5 = a2;
    v6 = 0;
    v7 = v5;
    do
    {
      v8 = (_QWORD *)v7[1];
      if (v8)
      {
        do
        {
          v9 = v8;
          v8 = (_QWORD *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          v9 = (_QWORD *)v7[2];
          v10 = *v9 == (_QWORD)v7;
          v7 = v9;
        }
        while (!v10);
      }
      ++v6;
      v7 = v9;
    }
    while (v9 != a3);
    std::vector<siri::dialogengine::ValidationEntry>::__vallocate[abi:ne180100](a1, v6);
    v11 = 0;
    v12 = a1[1];
    do
    {
      std::allocator<siri::dialogengine::ValidationEntry>::construct[abi:ne180100]<siri::dialogengine::ValidationEntry,siri::dialogengine::ValidationEntry const&>(v12, (uint64_t)(v5 + 4));
      v13 = (_QWORD *)v5[1];
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (_QWORD *)v5[2];
          v10 = *v14 == (_QWORD)v5;
          v5 = v14;
        }
        while (!v10);
      }
      v12 += 88;
      v11 += 88;
      v5 = v14;
    }
    while (v14 != a3);
    a1[1] = v12;
  }
  return a1;
}

void sub_1BF90F44C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<siri::dialogengine::ValidationEntry>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<siri::dialogengine::ValidationEntry>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  uint64_t v3;
  char *result;

  if (a2 >= 0x2E8BA2E8BA2E8BBLL)
    std::vector<BOOL>::__throw_length_error[abi:ne180100]();
  v3 = 88 * a2;
  result = (char *)operator new(88 * a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[v3];
  return result;
}

void std::allocator<siri::dialogengine::ValidationEntry>::construct[abi:ne180100]<siri::dialogengine::ValidationEntry,siri::dialogengine::ValidationEntry const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  std::string *v6;
  __int128 v7;
  std::string *v8;
  __int128 v9;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = &off_1E793AEA8;
  *(_QWORD *)(a1 + 8) = v4;
  if (*(char *)(a2 + 39) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 16), *(const std::string::value_type **)(a2 + 16), *(_QWORD *)(a2 + 24));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 16) = v5;
  }
  v6 = (std::string *)(a1 + 40);
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)(a2 + 40), *(_QWORD *)(a2 + 48));
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  *(_QWORD *)a1 = off_1E7930350;
  v8 = (std::string *)(a1 + 64);
  if (*(char *)(a2 + 87) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)(a2 + 64), *(_QWORD *)(a2 + 72));
  }
  else
  {
    v9 = *(_OWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
  }
}

void sub_1BF90F5B0(_Unwind_Exception *a1)
{
  void **v1;

  siri::dialogengine::LineNumberBase::~LineNumberBase(v1);
  _Unwind_Resume(a1);
}

_QWORD *siri::dialogengine::File::GetValidationWarnings@<X0>(siri::dialogengine::File *this@<X0>, _QWORD *a2@<X8>)
{
  return std::vector<siri::dialogengine::ValidationEntry>::vector<std::__tree_const_iterator<siri::dialogengine::ValidationEntry,std::__tree_node<siri::dialogengine::ValidationEntry,void *> *,long>,0>(a2, *((_QWORD **)this + 74), (_QWORD *)this + 75);
}

void siri::dialogengine::File::IgnoreVariablesWithoutParameter(siri::dialogengine::File *this, const void ***a2)
{
  char *v3;
  char *v4;
  __int128 v5;
  void **v6;
  void **v7;
  void **v8;
  BOOL v9;
  _QWORD **v10;
  char v11;
  std::string::size_type size;
  _QWORD *v13;
  unint64_t *v14;
  unint64_t v15;
  std::string::size_type v16;
  std::string *v17;
  __int128 v18;
  uint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  __int128 v26;
  unint64_t *v27;
  unint64_t v28;
  _QWORD *v29;
  std::string::size_type v30;
  std::string::size_type v31;
  __int128 v32;
  int64x2_t v33;
  void *v34;
  _QWORD *v35;
  _QWORD **v36;
  std::string v37;
  std::string v38;
  _QWORD **v39;
  _QWORD *v40[2];
  std::string v41;
  char **v42;
  char *v43[2];
  void *__p[6];

  if (a2 && *((_DWORD *)a2 + 2) != 1)
  {
    v43[0] = 0;
    v43[1] = 0;
    v42 = v43;
    memset(__p, 0, 24);
    std::vector<siri::dialogengine::Parameter>::__init_with_size[abi:ne180100]<siri::dialogengine::Parameter*,siri::dialogengine::Parameter*>(__p, *((_QWORD *)this + 22), *((_QWORD *)this + 23), 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(*((_QWORD *)this + 23) - *((_QWORD *)this + 22)) >> 4));
    v3 = (char *)__p[0];
    v4 = (char *)__p[1];
    while (v3 != v4)
    {
      if (v3[31] < 0)
      {
        std::string::__init_copy_ctor_external(&v41, *((const std::string::value_type **)v3 + 1), *((_QWORD *)v3 + 2));
      }
      else
      {
        v5 = *(_OWORD *)(v3 + 8);
        v41.__r_.__value_.__r.__words[2] = *((_QWORD *)v3 + 3);
        *(_OWORD *)&v41.__r_.__value_.__l.__data_ = v5;
      }
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)&v42, (const void **)&v41.__r_.__value_.__l.__data_, (uint64_t)&v41);
      if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v41.__r_.__value_.__l.__data_);
      v3 += 336;
    }
    v41.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
    std::vector<siri::dialogengine::Parameter>::__destroy_vector::operator()[abi:ne180100]((void ***)&v41);
    siri::dialogengine::Context::GetGlobalParameters((siri::dialogengine::Context *)a2, (uint64_t)__p);
    v6 = (void **)__p[0];
    if (__p[0] != &__p[1])
    {
      do
      {
        std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)&v42, (const void **)v6 + 4, (uint64_t)(v6 + 4));
        v7 = (void **)v6[1];
        if (v7)
        {
          do
          {
            v8 = v7;
            v7 = (void **)*v7;
          }
          while (v7);
        }
        else
        {
          do
          {
            v8 = (void **)v6[2];
            v9 = *v8 == v6;
            v6 = v8;
          }
          while (!v9);
        }
        v6 = v8;
      }
      while (v8 != &__p[1]);
    }
    std::__tree<std::__value_type<std::string,siri::dialogengine::Parameter>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::Parameter>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::Parameter>>>::destroy((_QWORD *)__p[1]);
    memset(&v41, 0, sizeof(v41));
    std::map<std::string,std::shared_ptr<siri::dialogengine::Variable>>::map[abi:ne180100]((uint64_t)&v39, a2 + 65);
    v10 = v39;
    if (v39 == v40)
    {
      std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(*v39);
    }
    else
    {
      v11 = 1;
      do
      {
        if (*((char *)v10 + 55) < 0)
          std::string::__init_copy_ctor_external(&v38, (const std::string::value_type *)v10[4], (std::string::size_type)v10[5]);
        else
          v38 = *(std::string *)(v10 + 4);
        if (v43 == (char **)std::__tree<std::string>::find<std::string>((uint64_t)&v42, (const void **)&v38.__r_.__value_.__l.__data_))
        {
          std::operator+<char>();
          v17 = std::string::append(&v37, "' as it is not a defined parameter for this CAT file.");
          v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
          __p[2] = (void *)v17->__r_.__value_.__r.__words[2];
          *(_OWORD *)__p = v18;
          v17->__r_.__value_.__l.__size_ = 0;
          v17->__r_.__value_.__r.__words[2] = 0;
          v17->__r_.__value_.__r.__words[0] = 0;
          siri::dialogengine::Log::LogWithLevel((uint64_t)__p, 1u);
          if (SHIBYTE(__p[2]) < 0)
            operator delete(__p[0]);
          if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v37.__r_.__value_.__l.__data_);
          v11 = 0;
        }
        else
        {
          size = v41.__r_.__value_.__l.__size_;
          if (v41.__r_.__value_.__l.__size_ >= v41.__r_.__value_.__r.__words[2])
          {
            v19 = (uint64_t)(v41.__r_.__value_.__l.__size_ - v41.__r_.__value_.__r.__words[0]) >> 4;
            v20 = v19 + 1;
            if ((unint64_t)(v19 + 1) >> 60)
              std::vector<BOOL>::__throw_length_error[abi:ne180100]();
            v21 = v41.__r_.__value_.__r.__words[2] - v41.__r_.__value_.__r.__words[0];
            if ((uint64_t)(v41.__r_.__value_.__r.__words[2] - v41.__r_.__value_.__r.__words[0]) >> 3 > v20)
              v20 = v21 >> 3;
            if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF0)
              v22 = 0xFFFFFFFFFFFFFFFLL;
            else
              v22 = v20;
            __p[4] = &v41.__r_.__value_.__r.__words[2];
            v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>>(v22);
            v25 = &v23[16 * v19];
            v26 = *(_OWORD *)(v10 + 7);
            *(_OWORD *)v25 = v26;
            if (*((_QWORD *)&v26 + 1))
            {
              v27 = (unint64_t *)(*((_QWORD *)&v26 + 1) + 8);
              do
                v28 = __ldxr(v27);
              while (__stxr(v28 + 1, v27));
            }
            v29 = (_QWORD *)v41.__r_.__value_.__l.__size_;
            v30 = v41.__r_.__value_.__r.__words[0];
            if (v41.__r_.__value_.__l.__size_ == v41.__r_.__value_.__r.__words[0])
            {
              v33 = vdupq_n_s64(v41.__r_.__value_.__l.__size_);
              v31 = (std::string::size_type)&v23[16 * v19];
            }
            else
            {
              v31 = (std::string::size_type)&v23[16 * v19];
              do
              {
                v32 = *((_OWORD *)v29 - 1);
                v29 -= 2;
                *(_OWORD *)(v31 - 16) = v32;
                v31 -= 16;
                *v29 = 0;
                v29[1] = 0;
              }
              while (v29 != (_QWORD *)v30);
              v33 = *(int64x2_t *)&v41.__r_.__value_.__l.__data_;
            }
            v16 = (std::string::size_type)(v25 + 16);
            v41.__r_.__value_.__r.__words[0] = v31;
            v41.__r_.__value_.__l.__size_ = (std::string::size_type)(v25 + 16);
            *(int64x2_t *)&__p[1] = v33;
            v34 = (void *)v41.__r_.__value_.__r.__words[2];
            v41.__r_.__value_.__r.__words[2] = (std::string::size_type)&v23[16 * v24];
            __p[3] = v34;
            __p[0] = (void *)v33.i64[0];
            std::__split_buffer<std::shared_ptr<siri::dialogengine::ChunkText>>::~__split_buffer((uint64_t)__p);
          }
          else
          {
            *(_QWORD *)v41.__r_.__value_.__l.__size_ = v10[7];
            v13 = v10[8];
            *(_QWORD *)(size + 8) = v13;
            if (v13)
            {
              v14 = v13 + 1;
              do
                v15 = __ldxr(v14);
              while (__stxr(v15 + 1, v14));
            }
            v16 = size + 16;
          }
          v41.__r_.__value_.__l.__size_ = v16;
        }
        if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v38.__r_.__value_.__l.__data_);
        v35 = v10[1];
        if (v35)
        {
          do
          {
            v36 = (_QWORD **)v35;
            v35 = (_QWORD *)*v35;
          }
          while (v35);
        }
        else
        {
          do
          {
            v36 = (_QWORD **)v10[2];
            v9 = *v36 == v10;
            v10 = v36;
          }
          while (!v9);
        }
        v10 = v36;
      }
      while (v36 != v40);
      std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(v40[0]);
      if ((v11 & 1) == 0)
        siri::dialogengine::Context::SetVariables((uint64_t)a2, (uint64_t **)&v41);
    }
    __p[0] = &v41;
    std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    std::__tree<std::string>::destroy((uint64_t)&v42, v43[0]);
  }
}

void sub_1BF90F9E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void **__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31,char *a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  __p = &a25;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100](&__p);
  std::__tree<std::string>::destroy((uint64_t)&a31, a32);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,siri::dialogengine::Parameter>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::Parameter>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::Parameter>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,siri::dialogengine::Parameter>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::Parameter>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::Parameter>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,siri::dialogengine::Parameter>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::Parameter>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::Parameter>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,siri::dialogengine::Parameter>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,siri::dialogengine::Parameter>,0>(uint64_t a1)
{
  void **v2;

  v2 = (void **)(a1 + 24);
  *(_QWORD *)(a1 + 328) = off_1E793AED8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*(_QWORD **)(a1 + 344));
  siri::dialogengine::LineNumberBase::~LineNumberBase((void **)(a1 + 264));
  siri::dialogengine::ObjectProperty::~ObjectProperty(v2);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void siri::dialogengine::File::PerformProfanityFiltering(siri::dialogengine::File *this, siri::dialogengine::Context *a2)
{
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  __int128 v19;
  std::string v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  if (a2)
  {
    v23 = 0;
    v24 = 0;
    v25 = 0;
    std::vector<siri::dialogengine::Parameter>::__init_with_size[abi:ne180100]<siri::dialogengine::Parameter*,siri::dialogengine::Parameter*>(&v23, *((_QWORD *)this + 22), *((_QWORD *)this + 23), 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(*((_QWORD *)this + 23) - *((_QWORD *)this + 22)) >> 4));
    v3 = v23;
    v4 = v24;
    while (v3 != v4)
    {
      if (*(_BYTE *)(v3 + 152))
      {
        if (*(char *)(v3 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(&v20, *(const std::string::value_type **)(v3 + 8), *(_QWORD *)(v3 + 16));
        }
        else
        {
          v5 = *(_OWORD *)(v3 + 8);
          v20.__r_.__value_.__r.__words[2] = *(_QWORD *)(v3 + 24);
          *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v5;
        }
        siri::dialogengine::Context::FindVariable(&v21, a2, &v20);
        if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v20.__r_.__value_.__l.__data_);
        v17 = v21;
        v18 = v22;
        if (v22)
        {
          p_shared_owners = (unint64_t *)&v22->__shared_owners_;
          do
            v7 = __ldxr(p_shared_owners);
          while (__stxr(v7 + 1, p_shared_owners));
        }
        siri::dialogengine::RemoveProfanity(a2, (uint64_t)&v17, &v19);
        v8 = (std::__shared_weak_count *)*((_QWORD *)&v19 + 1);
        if (*((_QWORD *)&v19 + 1))
        {
          v9 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
          do
            v10 = __ldaxr(v9);
          while (__stlxr(v10 - 1, v9));
          if (!v10)
          {
            ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
            std::__shared_weak_count::__release_weak(v8);
          }
        }
        v11 = v18;
        if (v18)
        {
          v12 = (unint64_t *)&v18->__shared_owners_;
          do
            v13 = __ldaxr(v12);
          while (__stlxr(v13 - 1, v12));
          if (!v13)
          {
            ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
            std::__shared_weak_count::__release_weak(v11);
          }
        }
        v14 = v22;
        if (v22)
        {
          v15 = (unint64_t *)&v22->__shared_owners_;
          do
            v16 = __ldaxr(v15);
          while (__stlxr(v16 - 1, v15));
          if (!v16)
          {
            ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
            std::__shared_weak_count::__release_weak(v14);
          }
        }
      }
      v3 += 336;
    }
    v20.__r_.__value_.__r.__words[0] = (std::string::size_type)&v23;
    std::vector<siri::dialogengine::Parameter>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
  }
}

void sub_1BF90FD10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,char a21)
{
  __p = &a21;
  std::vector<siri::dialogengine::Parameter>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void siri::dialogengine::File::Expand(siri::dialogengine::File *this@<X0>, siri::dialogengine::Context *a2@<X1>, uint64_t a3@<X2>, unsigned int a4@<W3>, _QWORD *a5@<X8>)
{
  siri::dialogengine::Node *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  siri::dialogengine::Node *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  void **v35;
  char *v36;
  void *String;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::string __p;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  __int16 v49;
  uint64_t v50;
  void *v51[2];
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  void *v55[2];
  char v56;
  _QWORD v57[2];
  _QWORD v58[2];
  uint64_t *v59;
  _QWORD *v60[2];
  uint64_t v61;
  std::__shared_weak_count *v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  std::string v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  unsigned int v68;
  uint64_t v69;

  v69 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)&v65.__r_.__value_.__r.__words[1] = 0uLL;
  v65.__r_.__value_.__r.__words[0] = (std::string::size_type)&v65.__r_.__value_.__l.__size_;
  siri::dialogengine::CreateJSONObjectVal((const void ***)&v65, &v63);
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy((_QWORD *)v65.__r_.__value_.__l.__size_);
  *(_OWORD *)&v65.__r_.__value_.__r.__words[1] = 0uLL;
  v65.__r_.__value_.__r.__words[0] = (std::string::size_type)&v65.__r_.__value_.__l.__size_;
  siri::dialogengine::CreateJSONObjectVal((const void ***)&v65, &v61);
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy((_QWORD *)v65.__r_.__value_.__l.__size_);
  v60[0] = 0;
  v60[1] = 0;
  v59 = (uint64_t *)v60;
  v10 = (siri::dialogengine::Node *)*((_QWORD *)this + 28);
  if (v10)
  {
    siri::dialogengine::Node::GetGlobalId(v10, a2, &__p);
    v11 = *((_QWORD *)this + 28);
    v12 = v64;
    v58[0] = v63;
    v58[1] = v64;
    if (v64)
    {
      p_shared_owners = (unint64_t *)&v64->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
    siri::dialogengine::Group::Expand(v11, a2, v58, (uint64_t)&__p, a3, a4);
    if (v12)
    {
      v15 = (unint64_t *)&v12->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v65, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    else
      v65 = __p;
    v66 = v63;
    v67 = v64;
    if (v64)
    {
      v17 = (unint64_t *)&v64->__shared_owners_;
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<siri::dialogengine::JSONValue>>>(&v59, (const void **)&v65.__r_.__value_.__l.__data_, (uint64_t)&v65);
    v19 = v67;
    if (v67)
    {
      v20 = (unint64_t *)&v67->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v65.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  v22 = (siri::dialogengine::Node *)*((_QWORD *)this + 37);
  if (v22)
  {
    siri::dialogengine::Node::GetGlobalId(v22, a2, &__p);
    v23 = *((_QWORD *)this + 37);
    v24 = v62;
    v57[0] = v61;
    v57[1] = v62;
    if (v62)
    {
      v25 = (unint64_t *)&v62->__shared_owners_;
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
    }
    siri::dialogengine::Group::Expand(v23, a2, v57, (uint64_t)&__p, a3, a4);
    if (v24)
    {
      v27 = (unint64_t *)&v24->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v65, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    else
      v65 = __p;
    v66 = v61;
    v67 = v62;
    if (v62)
    {
      v29 = (unint64_t *)&v62->__shared_owners_;
      do
        v30 = __ldxr(v29);
      while (__stxr(v30 + 1, v29));
    }
    std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<siri::dialogengine::JSONValue>>>(&v59, (const void **)&v65.__r_.__value_.__l.__data_, (uint64_t)&v65);
    v31 = v67;
    if (v67)
    {
      v32 = (unint64_t *)&v67->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v65.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  siri::dialogengine::ConstructJSONString(&v59, v55);
  v34 = rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::GenericDocument((uint64_t)&v65);
  v35 = v55;
  if (v56 < 0)
    v35 = (void **)v55[0];
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v35;
  __p.__r_.__value_.__l.__size_ = (std::string::size_type)v35;
  rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::ParseStream<128u,rapidjson::UTF8<char>,rapidjson::GenericStringStream<rapidjson::UTF8<char>>>(v34, (uint64_t)&__p);
  if (v68)
  {
    if (v68 > 0x11)
      v36 = "Unknown error.";
    else
      v36 = off_1E7931C38[v68];
    std::string::basic_string[abi:ne180100]<0>(&__p, v36);
    std::operator+<char>();
    siri::dialogengine::Log::LogWithLevel((uint64_t)v51, 3u);
    if (SBYTE7(v52) < 0)
      operator delete(v51[0]);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  *(_OWORD *)v51 = 0u;
  v52 = 0u;
  v53 = 0;
  v54 = 256;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v51;
  *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0u;
  v45 = 0u;
  v46 = 0;
  v47 = 512;
  v48 = 324;
  v49 = 0x2000;
  v50 = 4;
  rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::Accept<rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>>((unsigned int *)&v65, (uint64_t *)&__p);
  String = (void *)rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>::GetString((uint64_t *)v51);
  std::string::basic_string[abi:ne180100](a5, String, *((_QWORD *)&v52 + 1) - v52);
  rapidjson::internal::Stack<rapidjson::CrtAllocator>::Destroy((uint64_t)&__p.__r_.__value_.__l.__size_);
  rapidjson::internal::Stack<rapidjson::CrtAllocator>::Destroy((uint64_t)v51);
  rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::~GenericDocument((uint64_t)&v65);
  if (v56 < 0)
    operator delete(v55[0]);
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(v60[0]);
  v38 = v62;
  if (v62)
  {
    v39 = (unint64_t *)&v62->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  v41 = v64;
  if (v64)
  {
    v42 = (unint64_t *)&v64->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
}

void sub_1BF910240(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,char a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,_QWORD *a42,uint64_t a43,char a44)
{
  uint64_t v44;

  if (a15 < 0)
    operator delete(__p);
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(a42);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a44);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](v44 - 192);
  _Unwind_Resume(a1);
}

void siri::dialogengine::File::ExpandAsDAG(siri::dialogengine::Context *a1@<X1>, uint64_t a2@<X0>, uint64_t a3@<X2>, unsigned int a4@<W3>, unsigned int a5@<W4>, uint64_t a6@<X8>)
{
  siri::dialogengine::Node *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  siri::dialogengine::Node *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t *v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  const char *v29;
  unint64_t *v30;
  unint64_t v31;
  std::string::size_type v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  const char *v36;
  unint64_t *v37;
  unint64_t v38;
  std::string::size_type v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  int v45;
  std::string::size_type v46;
  int v47;
  int v48;
  BOOL v49;
  _QWORD *v50;
  _QWORD *v51;
  std::string *v52;
  std::string *v53;
  __int128 *v54;
  std::string *v55;
  __int128 v56;
  std::string *v57;
  uint64_t v58;
  uint64_t v59;
  std::string *v60;
  std::string *v61;
  uint64_t *v62;
  uint64_t *v63;
  std::string *v64;
  uint64_t v65;
  unint64_t v66;
  const void **v67;
  _OWORD *v68;
  unint64_t v69;
  __int128 v70;
  unint64_t *v71;
  unint64_t v72;
  uint64_t v73;
  __int128 v74;
  unint64_t *v75;
  unint64_t v76;
  int v77;
  uint64_t v78;
  _OWORD *v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  char *v83;
  uint64_t v84;
  char *v85;
  _QWORD *v86;
  _QWORD *v87;
  char *v88;
  __int128 v89;
  int64x2_t v90;
  char *v91;
  uint64_t i;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  const void **v96;
  unint64_t v97;
  __int128 v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  std::__shared_weak_count *size;
  unint64_t *v103;
  unint64_t v104;
  void *__p[2];
  char v107;
  __int128 v108;
  void **v109[3];
  __int128 v110;
  const void *v111[2];
  int64x2_t v112;
  char *v113;
  const void *v114[2];
  const void *v115[2];
  uint64_t v116;
  std::string *v117;
  unint64_t v118;
  __int128 v119;
  unint64_t v120;
  const void **v121;
  _QWORD *v122;
  unint64_t v123;
  uint64_t *v124;
  _QWORD *v125[2];
  std::string v126;
  char *v127;
  char **v128;
  std::string v129;
  __int128 v130;
  _QWORD v131[3];
  __int128 v132;
  uint64_t v133;

  v133 = *MEMORY[0x1E0C80C00];
  v125[0] = 0;
  v125[1] = 0;
  v124 = (uint64_t *)v125;
  v11 = *(siri::dialogengine::Node **)(a2 + 224);
  if (v11)
  {
    siri::dialogengine::Node::GetGlobalId(v11, a1, &v126);
    siri::dialogengine::Group::ExpandAsDAG(*(_QWORD *)(a2 + 224), a1, a3, a4, a5, (uint64_t)&v121);
    siri::dialogengine::CreateJSONObjectVal(&v121, (uint64_t *)&v119);
    if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v129, v126.__r_.__value_.__l.__data_, v126.__r_.__value_.__l.__size_);
    else
      v129 = v126;
    v130 = v119;
    v119 = 0uLL;
    std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<siri::dialogengine::JSONValue>>>(&v124, (const void **)&v129.__r_.__value_.__l.__data_, (uint64_t)&v129);
    v12 = (std::__shared_weak_count *)*((_QWORD *)&v130 + 1);
    if (*((_QWORD *)&v130 + 1))
    {
      v13 = (unint64_t *)(*((_QWORD *)&v130 + 1) + 8);
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v129.__r_.__value_.__l.__data_);
    v15 = (std::__shared_weak_count *)*((_QWORD *)&v119 + 1);
    if (*((_QWORD *)&v119 + 1))
    {
      v16 = (unint64_t *)(*((_QWORD *)&v119 + 1) + 8);
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(v122);
    if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v126.__r_.__value_.__l.__data_);
  }
  v18 = *(siri::dialogengine::Node **)(a2 + 296);
  if (v18)
  {
    siri::dialogengine::Node::GetGlobalId(v18, a1, &v126);
    siri::dialogengine::Group::ExpandAsDAG(*(_QWORD *)(a2 + 296), a1, a3, a4, a5, (uint64_t)&v121);
    siri::dialogengine::CreateJSONObjectVal(&v121, (uint64_t *)&v119);
    if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v129, v126.__r_.__value_.__l.__data_, v126.__r_.__value_.__l.__size_);
    else
      v129 = v126;
    v130 = v119;
    v119 = 0uLL;
    std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<siri::dialogengine::JSONValue>>>(&v124, (const void **)&v129.__r_.__value_.__l.__data_, (uint64_t)&v129);
    v19 = (std::__shared_weak_count *)*((_QWORD *)&v130 + 1);
    if (*((_QWORD *)&v130 + 1))
    {
      v20 = (unint64_t *)(*((_QWORD *)&v130 + 1) + 8);
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v129.__r_.__value_.__l.__data_);
    v22 = (std::__shared_weak_count *)*((_QWORD *)&v119 + 1);
    if (*((_QWORD *)&v119 + 1))
    {
      v23 = (unint64_t *)(*((_QWORD *)&v119 + 1) + 8);
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(v122);
    if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v126.__r_.__value_.__l.__data_);
  }
  v121 = 0;
  v122 = 0;
  v123 = 0;
  v119 = 0uLL;
  v120 = 0;
  v116 = 0;
  v117 = 0;
  v118 = 0;
  v25 = v124;
  if (v124 == (uint64_t *)v125)
  {
    *(_QWORD *)(a6 + 16) = 0;
    *(_QWORD *)(a6 + 8) = 0;
    *(_QWORD *)a6 = a6 + 8;
    goto LABEL_166;
  }
  do
  {
    v26 = (std::__shared_weak_count *)v25[8];
    v115[0] = (const void *)v25[7];
    v115[1] = v26;
    if (v26)
    {
      p_shared_owners = (unint64_t *)&v26->__shared_owners_;
      do
        v28 = __ldxr(p_shared_owners);
      while (__stxr(v28 + 1, p_shared_owners));
    }
    siri::dialogengine::GetJSONObjectVal(v115, (const char *)a1, &v129);
    if (v26)
    {
      v30 = (unint64_t *)&v26->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    v32 = v129.__r_.__value_.__r.__words[0];
    if ((std::string::size_type *)v129.__r_.__value_.__l.__data_ != &v129.__r_.__value_.__r.__words[1])
    {
      while (1)
      {
        v33 = *(std::__shared_weak_count **)(v32 + 64);
        v114[0] = *(const void **)(v32 + 56);
        v114[1] = v33;
        if (v33)
        {
          v34 = (unint64_t *)&v33->__shared_owners_;
          do
            v35 = __ldxr(v34);
          while (__stxr(v35 + 1, v34));
        }
        siri::dialogengine::GetJSONObjectVal(v114, v29, &v126);
        if (v33)
        {
          v37 = (unint64_t *)&v33->__shared_owners_;
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 - 1, v37));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
            std::__shared_weak_count::__release_weak(v33);
          }
        }
        v39 = v126.__r_.__value_.__r.__words[0];
        if ((std::string::size_type *)v126.__r_.__value_.__l.__data_ != &v126.__r_.__value_.__r.__words[1])
          break;
LABEL_94:
        std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy((_QWORD *)v126.__r_.__value_.__l.__size_);
        v60 = *(std::string **)(v32 + 8);
        if (v60)
        {
          do
          {
            v61 = v60;
            v60 = (std::string *)v60->__r_.__value_.__r.__words[0];
          }
          while (v60);
        }
        else
        {
          do
          {
            v61 = *(std::string **)(v32 + 16);
            v49 = v61->__r_.__value_.__r.__words[0] == v32;
            v32 = (std::string::size_type)v61;
          }
          while (!v49);
        }
        v32 = (std::string::size_type)v61;
        if (v61 == (std::string *)&v129.__r_.__value_.__r.__words[1])
          goto LABEL_100;
      }
      while (1)
      {
        v40 = *(std::__shared_weak_count **)(v39 + 64);
        v111[0] = *(const void **)(v39 + 56);
        v111[1] = v40;
        if (v40)
        {
          v41 = (unint64_t *)&v40->__shared_owners_;
          do
            v42 = __ldxr(v41);
          while (__stxr(v42 + 1, v41));
        }
        siri::dialogengine::GetJSONArrayVal(v111, v36, (uint64_t)&v112);
        if (v40)
        {
          v43 = (unint64_t *)&v40->__shared_owners_;
          do
            v44 = __ldaxr(v43);
          while (__stlxr(v44 - 1, v43));
          if (!v44)
          {
            ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
            std::__shared_weak_count::__release_weak(v40);
          }
        }
        v45 = *(char *)(v32 + 55);
        if (v45 < 0)
        {
          if (*(_QWORD *)(v32 + 40) != 5)
            goto LABEL_73;
          v46 = *(_QWORD *)(v32 + 32);
        }
        else
        {
          v46 = v32 + 32;
          if (v45 != 5)
            goto LABEL_73;
        }
        v47 = *(_DWORD *)v46;
        v48 = *(unsigned __int8 *)(v46 + 4);
        v49 = v47 == 1634037875 && v48 == 107;
        if (v49)
        {
          v54 = (__int128 *)(v39 + 32);
          v55 = v117;
          if ((unint64_t)v117 >= v118)
          {
            v57 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>(&v116, v54);
          }
          else
          {
            if (*(char *)(v39 + 55) < 0)
            {
              std::string::__init_copy_ctor_external(v117, *(const std::string::value_type **)(v39 + 32), *(_QWORD *)(v39 + 40));
            }
            else
            {
              v56 = *v54;
              v117->__r_.__value_.__r.__words[2] = *(_QWORD *)(v39 + 48);
              *(_OWORD *)&v55->__r_.__value_.__l.__data_ = v56;
            }
            v57 = v55 + 1;
          }
          v117 = v57;
          v58 = *((_QWORD *)&v119 + 1);
          if (*((_QWORD *)&v119 + 1) >= v120)
          {
            v59 = std::vector<std::vector<std::shared_ptr<siri::dialogengine::JSONValue>>>::__push_back_slow_path<std::vector<std::shared_ptr<siri::dialogengine::JSONValue>> const&>((uint64_t *)&v119, &v112);
          }
          else
          {
            **((_QWORD **)&v119 + 1) = 0;
            *(_QWORD *)(v58 + 8) = 0;
            *(_QWORD *)(v58 + 16) = 0;
            std::vector<std::shared_ptr<siri::dialogengine::JSONValue>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::JSONValue>*,std::shared_ptr<siri::dialogengine::JSONValue>*>((char *)v58, v112.i64[0], (_QWORD *)v112.i64[1], (v112.i64[1] - v112.i64[0]) >> 4);
            v59 = v58 + 24;
          }
          *((_QWORD *)&v119 + 1) = v59;
          goto LABEL_77;
        }
LABEL_73:
        v50 = v122;
        if ((unint64_t)v122 >= v123)
        {
          v51 = (_QWORD *)std::vector<std::vector<std::shared_ptr<siri::dialogengine::JSONValue>>>::__push_back_slow_path<std::vector<std::shared_ptr<siri::dialogengine::JSONValue>> const&>((uint64_t *)&v121, &v112);
        }
        else
        {
          *v122 = 0;
          v50[1] = 0;
          v50[2] = 0;
          std::vector<std::shared_ptr<siri::dialogengine::JSONValue>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::JSONValue>*,std::shared_ptr<siri::dialogengine::JSONValue>*>((char *)v50, v112.i64[0], (_QWORD *)v112.i64[1], (v112.i64[1] - v112.i64[0]) >> 4);
          v51 = v50 + 3;
        }
        v122 = v51;
LABEL_77:
        v109[0] = (void **)&v112;
        std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100](v109);
        v52 = *(std::string **)(v39 + 8);
        if (v52)
        {
          do
          {
            v53 = v52;
            v52 = (std::string *)v52->__r_.__value_.__r.__words[0];
          }
          while (v52);
        }
        else
        {
          do
          {
            v53 = *(std::string **)(v39 + 16);
            v49 = v53->__r_.__value_.__r.__words[0] == v39;
            v39 = (std::string::size_type)v53;
          }
          while (!v49);
        }
        v39 = (std::string::size_type)v53;
        if (v53 == (std::string *)&v126.__r_.__value_.__r.__words[1])
          goto LABEL_94;
      }
    }
LABEL_100:
    std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy((_QWORD *)v129.__r_.__value_.__l.__size_);
    v62 = (uint64_t *)v25[1];
    if (v62)
    {
      do
      {
        v63 = v62;
        v62 = (uint64_t *)*v62;
      }
      while (v62);
    }
    else
    {
      do
      {
        v63 = (uint64_t *)v25[2];
        v49 = *v63 == (_QWORD)v25;
        v25 = v63;
      }
      while (!v49);
    }
    v25 = v63;
  }
  while (v63 != (uint64_t *)v125);
  v65 = v116;
  v64 = v117;
  *(_QWORD *)(a6 + 8) = 0;
  *(_QWORD *)(a6 + 16) = 0;
  *(_QWORD *)a6 = a6 + 8;
  if (v64 == (std::string *)v65)
    goto LABEL_166;
  v66 = 0;
  while (2)
  {
    v112 = 0uLL;
    v113 = 0;
    v67 = &v121[3 * v66];
    v68 = *v67;
    if (v67[1] == *v67)
      goto LABEL_148;
    v69 = 0;
    while (2)
    {
      std::string::basic_string[abi:ne180100]<0>(&v129, "print");
      v70 = v68[v69];
      v130 = v70;
      if (*((_QWORD *)&v70 + 1))
      {
        v71 = (unint64_t *)(*((_QWORD *)&v70 + 1) + 8);
        do
          v72 = __ldxr(v71);
        while (__stxr(v72 + 1, v71));
      }
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v119 + 1) - v119) >> 3) <= v66
        || (v73 = *(_QWORD *)(v119 + 24 * v66), v69 >= (*(_QWORD *)(v119 + 24 * v66 + 8) - v73) >> 4))
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        siri::dialogengine::CreateJSONStringVal((uint64_t)__p, (uint64_t *)&v108);
        v77 = 1;
      }
      else
      {
        v74 = *(_OWORD *)(v73 + 16 * v69);
        v108 = v74;
        if (*((_QWORD *)&v74 + 1))
        {
          v75 = (unint64_t *)(*((_QWORD *)&v74 + 1) + 8);
          do
            v76 = __ldxr(v75);
          while (__stxr(v76 + 1, v75));
        }
        v77 = 0;
      }
      std::string::basic_string[abi:ne180100]<0>(v131, "speak");
      v132 = v108;
      v108 = 0uLL;
      std::map<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>::map[abi:ne180100]((uint64_t)v109, (const void **)&v129.__r_.__value_.__l.__data_, 2);
      siri::dialogengine::CreateJSONObjectVal((const void ***)v109, (uint64_t *)&v110);
      v78 = v112.i64[1];
      if (v112.i64[1] >= (unint64_t)v113)
      {
        v80 = (v112.i64[1] - v112.i64[0]) >> 4;
        if ((unint64_t)(v80 + 1) >> 60)
          std::vector<BOOL>::__throw_length_error[abi:ne180100]();
        v81 = (uint64_t)&v113[-v112.i64[0]] >> 3;
        if (v81 <= v80 + 1)
          v81 = v80 + 1;
        if ((unint64_t)&v113[-v112.i64[0]] >= 0x7FFFFFFFFFFFFFF0)
          v82 = 0xFFFFFFFFFFFFFFFLL;
        else
          v82 = v81;
        v128 = &v113;
        v83 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>>(v82);
        v85 = &v83[16 * v80];
        *(_OWORD *)v85 = v110;
        v110 = 0uLL;
        v86 = (_QWORD *)v112.i64[1];
        v87 = (_QWORD *)v112.i64[0];
        if (v112.i64[1] == v112.i64[0])
        {
          v90 = vdupq_n_s64(v112.u64[1]);
          v88 = &v83[16 * v80];
        }
        else
        {
          v88 = &v83[16 * v80];
          do
          {
            v89 = *((_OWORD *)v86 - 1);
            v86 -= 2;
            *((_OWORD *)v88 - 1) = v89;
            v88 -= 16;
            *v86 = 0;
            v86[1] = 0;
          }
          while (v86 != v87);
          v90 = v112;
        }
        v79 = v85 + 16;
        v112.i64[0] = (uint64_t)v88;
        v112.i64[1] = (uint64_t)(v85 + 16);
        *(int64x2_t *)&v126.__r_.__value_.__r.__words[1] = v90;
        v91 = v113;
        v113 = &v83[16 * v84];
        v127 = v91;
        v126.__r_.__value_.__r.__words[0] = v90.i64[0];
        std::__split_buffer<std::shared_ptr<siri::dialogengine::ChunkText>>::~__split_buffer((uint64_t)&v126);
      }
      else
      {
        *(_OWORD *)v112.i64[1] = v110;
        v79 = (_OWORD *)(v78 + 16);
        v110 = 0uLL;
      }
      v112.i64[1] = (uint64_t)v79;
      std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(v109[1]);
      for (i = 0; i != -10; i -= 5)
      {
        std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&v132 + i * 8);
        if (SHIBYTE(v131[i + 2]) < 0)
          operator delete((void *)v131[i]);
      }
      v93 = (std::__shared_weak_count *)*((_QWORD *)&v108 + 1);
      if (!*((_QWORD *)&v108 + 1))
        goto LABEL_142;
      v94 = (unint64_t *)(*((_QWORD *)&v108 + 1) + 8);
      do
        v95 = __ldaxr(v94);
      while (__stlxr(v95 - 1, v94));
      if (!v95)
      {
        ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
        std::__shared_weak_count::__release_weak(v93);
        if (v77)
          goto LABEL_143;
      }
      else
      {
LABEL_142:
        if (v77)
        {
LABEL_143:
          if (v107 < 0)
            operator delete(__p[0]);
        }
      }
      ++v69;
      v96 = &v121[3 * v66];
      v68 = *v96;
      if (v69 < ((_BYTE *)v96[1] - (_BYTE *)*v96) >> 4)
        continue;
      break;
    }
    v65 = v116;
LABEL_148:
    siri::dialogengine::CreateJSONArrayVal(&v112, &v126);
    v97 = v65 + 24 * v66;
    if (*(char *)(v97 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v129, *(const std::string::value_type **)v97, *(_QWORD *)(v97 + 8));
    }
    else
    {
      v98 = *(_OWORD *)v97;
      v129.__r_.__value_.__r.__words[2] = *(_QWORD *)(v97 + 16);
      *(_OWORD *)&v129.__r_.__value_.__l.__data_ = v98;
    }
    v130 = *(_OWORD *)&v126.__r_.__value_.__l.__data_;
    *(_OWORD *)&v126.__r_.__value_.__l.__data_ = 0uLL;
    std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<siri::dialogengine::JSONValue>>>((uint64_t **)a6, (const void **)&v129.__r_.__value_.__l.__data_, (uint64_t)&v129);
    v99 = (std::__shared_weak_count *)*((_QWORD *)&v130 + 1);
    if (*((_QWORD *)&v130 + 1))
    {
      v100 = (unint64_t *)(*((_QWORD *)&v130 + 1) + 8);
      do
        v101 = __ldaxr(v100);
      while (__stlxr(v101 - 1, v100));
      if (!v101)
      {
        ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
        std::__shared_weak_count::__release_weak(v99);
      }
    }
    if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v129.__r_.__value_.__l.__data_);
    size = (std::__shared_weak_count *)v126.__r_.__value_.__l.__size_;
    if (v126.__r_.__value_.__l.__size_)
    {
      v103 = (unint64_t *)(v126.__r_.__value_.__l.__size_ + 8);
      do
        v104 = __ldaxr(v103);
      while (__stlxr(v104 - 1, v103));
      if (!v104)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    v129.__r_.__value_.__r.__words[0] = (std::string::size_type)&v112;
    std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v129);
    ++v66;
    v65 = v116;
    if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)v117 - v116) >> 3) > v66)
      continue;
    break;
  }
LABEL_166:
  v129.__r_.__value_.__r.__words[0] = (std::string::size_type)&v116;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v129);
  v129.__r_.__value_.__r.__words[0] = (std::string::size_type)&v119;
  std::vector<std::vector<std::shared_ptr<siri::dialogengine::JSONValue>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v129);
  v129.__r_.__value_.__r.__words[0] = (std::string::size_type)&v121;
  std::vector<std::vector<std::shared_ptr<siri::dialogengine::JSONValue>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v129);
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(v125[0]);
}

void sub_1BF910DA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,char a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44,_QWORD *a45,uint64_t a46,uint64_t a47,_QWORD *a48)
{
  uint64_t v48;

  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a40);
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(a45);
  if (*(char *)(v48 - 217) < 0)
    operator delete(*(void **)(v48 - 240));
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(a48);
  _Unwind_Resume(a1);
}

char *std::vector<std::shared_ptr<siri::dialogengine::JSONValue>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::JSONValue>*,std::shared_ptr<siri::dialogengine::JSONValue>*>(char *result, _QWORD *a2, _QWORD *a3, unint64_t a4)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  if (a4)
  {
    v6 = result;
    result = std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__vallocate[abi:ne180100](result, a4);
    v7 = (_QWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      *v7 = *a2;
      v8 = a2[1];
      v7[1] = v8;
      if (v8)
      {
        v9 = (unint64_t *)(v8 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      a2 += 2;
      v7 += 2;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_1BF911080(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<std::shared_ptr<siri::dialogengine::JSONValue>>>::__push_back_slow_path<std::vector<std::shared_ptr<siri::dialogengine::JSONValue>> const&>(uint64_t *a1, _QWORD **a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  __int128 v13;
  int64x2_t v14;
  char *v15;
  char *v17;
  int64x2_t v18;
  char *v19;
  _QWORD *v20;

  v2 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v3 = v2 + 1;
  if (v2 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<BOOL>::__throw_length_error[abi:ne180100]();
  if (0x5555555555555556 * ((a1[2] - *a1) >> 3) > v3)
    v3 = 0x5555555555555556 * ((a1[2] - *a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v3;
  v20 = a1 + 2;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v2];
  v17 = v7;
  v18.i64[0] = (uint64_t)v8;
  v18.i64[1] = (uint64_t)v8;
  v19 = &v7[24 * v6];
  *((_QWORD *)v8 + 1) = 0;
  *((_QWORD *)v8 + 2) = 0;
  *(_QWORD *)v8 = 0;
  std::vector<std::shared_ptr<siri::dialogengine::JSONValue>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::JSONValue>*,std::shared_ptr<siri::dialogengine::JSONValue>*>(v8, *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 4);
  v9 = v18.i64[0];
  v10 = v18.i64[1] + 24;
  v18.i64[1] += 24;
  v12 = (_QWORD *)*a1;
  v11 = (_QWORD *)a1[1];
  if (v11 == (_QWORD *)*a1)
  {
    v14 = vdupq_n_s64((unint64_t)v11);
  }
  else
  {
    do
    {
      *(_QWORD *)(v9 - 24) = 0;
      *(_QWORD *)(v9 - 16) = 0;
      v9 -= 24;
      *(_QWORD *)(v9 + 16) = 0;
      v13 = *(_OWORD *)(v11 - 3);
      v11 -= 3;
      *(_OWORD *)v9 = v13;
      *(_QWORD *)(v9 + 16) = v11[2];
      *v11 = 0;
      v11[1] = 0;
      v11[2] = 0;
    }
    while (v11 != v12);
    v14 = *(int64x2_t *)a1;
    v10 = v18.i64[1];
  }
  *a1 = v9;
  a1[1] = v10;
  v18 = v14;
  v15 = (char *)a1[2];
  a1[2] = (uint64_t)v19;
  v19 = v15;
  v17 = (char *)v14.i64[0];
  std::__split_buffer<std::vector<std::shared_ptr<siri::dialogengine::JSONValue>>>::~__split_buffer((uint64_t)&v17);
  return v10;
}

void sub_1BF9111F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<std::shared_ptr<siri::dialogengine::JSONValue>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<std::vector<std::shared_ptr<siri::dialogengine::JSONValue>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        v6 = v4;
        std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__split_buffer<std::vector<std::shared_ptr<siri::dialogengine::JSONValue>>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  void **v4;
  void **v6;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    v4 = (void **)(i - 24);
    *(_QWORD *)(a1 + 16) = v4;
    v6 = v4;
    std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100](&v6);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t siri::dialogengine::File::SetMaxLineNumber(uint64_t this, unint64_t a2)
{
  unint64_t v2;

  v2 = *(_QWORD *)(this + 640);
  if (v2 <= a2)
    v2 = a2;
  *(_QWORD *)(this + 640) = v2;
  return this;
}

uint64_t siri::dialogengine::File::GetMaxLineNumber(siri::dialogengine::File *this)
{
  return *((_QWORD *)this + 80);
}

void siri::dialogengine::File::Execute(siri::dialogengine::File *this@<X0>, const void ***a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  void **v10;
  void **i;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  unint64_t *v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  char *v31;
  __int128 v32;
  int64x2_t v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  void ***v37;
  uint64_t v38;
  __int128 v39;
  void **v40;
  void **v41;
  _BYTE v42[24];
  uint64_t v43;
  uint64_t v44;

  siri::dialogengine::File::IgnoreVariablesWithoutParameter(this, a2);
  siri::dialogengine::File::PerformProfanityFiltering(this, (siri::dialogengine::Context *)a2);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  siri::dialogengine::RequestInfo::RequestInfo((siri::dialogengine::RequestInfo *)v42, (const siri::dialogengine::RequestInfo *)(a2 + 1));
  v6 = *(_DWORD *)v42;
  siri::dialogengine::RequestInfo::~RequestInfo((void **)v42);
  if (v6 == 1)
  {
    v38 = *((_QWORD *)this + 32);
    if (!v38)
      return;
    (*(void (**)(_BYTE *__return_ptr, uint64_t, const void ***))(*(_QWORD *)v38 + 40))(v42, v38, a2);
    std::vector<std::shared_ptr<siri::dialogengine::Node>>::__vdeallocate((void **)a3);
    *(_OWORD *)a3 = *(_OWORD *)v42;
    *(_QWORD *)(a3 + 16) = *(_QWORD *)&v42[16];
    memset(v42, 0, sizeof(v42));
    v40 = (void **)v42;
    v37 = &v40;
    goto LABEL_44;
  }
  if (!v6)
  {
    v8 = *((_QWORD *)this + 28);
    if (v8)
    {
      (*(void (**)(_BYTE *__return_ptr, uint64_t, const void ***))(*(_QWORD *)v8 + 40))(v42, v8, a2);
      std::vector<std::shared_ptr<siri::dialogengine::Node>>::__vdeallocate((void **)a3);
      *(_OWORD *)a3 = *(_OWORD *)v42;
      *(_QWORD *)(a3 + 16) = *(_QWORD *)&v42[16];
      memset(v42, 0, sizeof(v42));
      v40 = (void **)v42;
      std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100](&v40);
    }
    if (*(_QWORD *)a3 == *(_QWORD *)(a3 + 8) && *((_QWORD *)this + 37))
    {
      siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"No selectable dialog found. Trying fallback.", v7);
      (*(void (**)(_BYTE *__return_ptr, _QWORD, const void ***))(**((_QWORD **)this + 37) + 40))(v42, *((_QWORD *)this + 37), a2);
      std::vector<std::shared_ptr<siri::dialogengine::Node>>::__vdeallocate((void **)a3);
      *(_OWORD *)a3 = *(_OWORD *)v42;
      *(_QWORD *)(a3 + 16) = *(_QWORD *)&v42[16];
      memset(v42, 0, sizeof(v42));
      v40 = (void **)v42;
      std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100](&v40);
    }
    v9 = *((_QWORD *)this + 30);
    if (v9)
    {
      (*(void (**)(void ***__return_ptr, uint64_t, const void ***))(*(_QWORD *)v9 + 40))(&v40, v9, a2);
      v10 = v40;
      for (i = v41; v10 != i; v10 += 2)
      {
        v12 = (std::__shared_weak_count *)v10[1];
        *(_QWORD *)&v39 = *v10;
        *((_QWORD *)&v39 + 1) = v12;
        if (v12)
        {
          p_shared_owners = (unint64_t *)&v12->__shared_owners_;
          do
            v14 = __ldxr(p_shared_owners);
          while (__stxr(v14 + 1, p_shared_owners));
          v15 = *(_QWORD **)(a3 + 8);
          v16 = *(_QWORD *)(a3 + 16);
          if ((unint64_t)v15 >= v16)
          {
LABEL_20:
            v20 = ((uint64_t)v15 - *(_QWORD *)a3) >> 4;
            v21 = v20 + 1;
            if ((unint64_t)(v20 + 1) >> 60)
              std::vector<BOOL>::__throw_length_error[abi:ne180100]();
            v22 = v16 - *(_QWORD *)a3;
            if (v22 >> 3 > v21)
              v21 = v22 >> 3;
            if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF0)
              v23 = 0xFFFFFFFFFFFFFFFLL;
            else
              v23 = v21;
            v44 = a3 + 16;
            v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>>(v23);
            v26 = &v24[16 * v20];
            *(_OWORD *)v26 = v39;
            if (*((_QWORD *)&v39 + 1))
            {
              v27 = (unint64_t *)(*((_QWORD *)&v39 + 1) + 8);
              do
                v28 = __ldxr(v27);
              while (__stxr(v28 + 1, v27));
            }
            v30 = *(_QWORD **)a3;
            v29 = *(_QWORD **)(a3 + 8);
            if (v29 == *(_QWORD **)a3)
            {
              v33 = vdupq_n_s64((unint64_t)v29);
              v31 = &v24[16 * v20];
            }
            else
            {
              v31 = &v24[16 * v20];
              do
              {
                v32 = *((_OWORD *)v29 - 1);
                v29 -= 2;
                *((_OWORD *)v31 - 1) = v32;
                v31 -= 16;
                *v29 = 0;
                v29[1] = 0;
              }
              while (v29 != v30);
              v33 = *(int64x2_t *)a3;
            }
            v19 = v26 + 16;
            *(_QWORD *)a3 = v31;
            *(_QWORD *)(a3 + 8) = v26 + 16;
            *(int64x2_t *)&v42[8] = v33;
            v34 = *(_QWORD *)(a3 + 16);
            *(_QWORD *)(a3 + 16) = &v24[16 * v25];
            v43 = v34;
            *(_QWORD *)v42 = v33.i64[0];
            std::__split_buffer<std::shared_ptr<siri::dialogengine::ChunkText>>::~__split_buffer((uint64_t)v42);
            v12 = (std::__shared_weak_count *)*((_QWORD *)&v39 + 1);
            goto LABEL_35;
          }
          *v15 = v39;
          v15[1] = v12;
          v17 = (unint64_t *)&v12->__shared_owners_;
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
        }
        else
        {
          v15 = *(_QWORD **)(a3 + 8);
          v16 = *(_QWORD *)(a3 + 16);
          if ((unint64_t)v15 >= v16)
            goto LABEL_20;
          *v15 = v39;
          v15[1] = 0;
        }
        v19 = v15 + 2;
LABEL_35:
        *(_QWORD *)(a3 + 8) = v19;
        if (v12)
        {
          v35 = (unint64_t *)&v12->__shared_owners_;
          do
            v36 = __ldaxr(v35);
          while (__stlxr(v36 - 1, v35));
          if (!v36)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
      }
      *(_QWORD *)v42 = &v40;
      v37 = (void ***)v42;
LABEL_44:
      std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100](v37);
    }
  }
}

void sub_1BF911640(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void std::vector<std::shared_ptr<siri::dialogengine::Node>>::__vdeallocate(void **a1)
{
  void *v1;
  uint64_t v3;
  void *v4;

  v1 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = v1;
    if ((void *)v3 != v1)
    {
      do
        v3 = std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](v3 - 16);
      while ((void *)v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t siri::dialogengine::File::SetCheckSnippetDialogIds(uint64_t this, char a2)
{
  *(_BYTE *)(this + 648) = a2;
  return this;
}

void siri::dialogengine::File::SetSourceLocaleDialogIds(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;

  v3 = (uint64_t *)(a1 + 688);
  if (*(unsigned __int8 *)(a1 + 712) == *(unsigned __int8 *)(a2 + 24))
  {
    if (v3 != (uint64_t *)a2)
    {
      if (*(_BYTE *)(a1 + 712))
        std::__tree<std::string>::__assign_multi<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>(v3, *(_QWORD **)a2, (_QWORD *)(a2 + 8));
    }
  }
  else if (*(_BYTE *)(a1 + 712))
  {
    std::__tree<std::string>::destroy((uint64_t)v3, *(char **)(a1 + 696));
    *(_BYTE *)(a1 + 712) = 0;
  }
  else
  {
    std::set<std::string>::set[abi:ne180100](v3, (const void ***)a2);
    *(_BYTE *)(a1 + 712) = 1;
  }
}

uint64_t siri::dialogengine::File::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  const void **v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  const void **v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t Parameter;
  const void **v24;
  uint64_t v25;
  const void **v26;
  _QWORD *v27;
  uint64_t v28;
  const void *v29;
  const void *v30;
  int v31;
  const void **v32;
  unsigned __int8 *v33;
  uint64_t v34;
  int v35;
  int v36;
  int v37;
  int v38;
  BOOL v40;
  const void **v41;
  const void **v42;
  BOOL v43;
  _QWORD *v44;
  _QWORD *v45;
  const void **v46;
  const void ***v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  void **p_data;
  std::__shared_weak_count *v54;
  unint64_t *p_shared_owners;
  unint64_t v56;
  uint64_t *v57;
  unint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  std::string::size_type size;
  uint64_t *v64;
  uint64_t v65;
  char *Phrase;
  uint64_t v67;
  uint64_t v69;
  uint64_t v70;
  std::string __p;
  std::string *v72;
  std::__shared_weak_count *v73;
  std::string v74;
  char v75[8];
  _QWORD *v76;
  uint64_t v77;
  std::string v78;

  v2 = *(unsigned __int8 *)(a1 + 127);
  if ((v2 & 0x80u) == 0)
    v3 = *(unsigned __int8 *)(a1 + 127);
  else
    v3 = *(_QWORD *)(a1 + 112);
  v4 = *(unsigned __int8 *)(a2 + 127);
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *(_QWORD *)(a2 + 112);
  if (v3 != v4)
    return 0;
  v8 = (const void **)(a1 + 104);
  if (v5 >= 0)
    v9 = (unsigned __int8 *)(a2 + 104);
  else
    v9 = *(unsigned __int8 **)(a2 + 104);
  if ((v2 & 0x80) != 0)
  {
    if (memcmp(*v8, v9, *(_QWORD *)(a1 + 112)))
      return 0;
  }
  else if (*(_BYTE *)(a1 + 127))
  {
    while (*(unsigned __int8 *)v8 == *v9)
    {
      v8 = (const void **)((char *)v8 + 1);
      ++v9;
      if (!--v2)
        goto LABEL_16;
    }
    return 0;
  }
LABEL_16:
  v10 = *(unsigned __int8 *)(a1 + 151);
  if ((v10 & 0x80u) == 0)
    v11 = *(unsigned __int8 *)(a1 + 151);
  else
    v11 = *(_QWORD *)(a1 + 136);
  v12 = *(unsigned __int8 *)(a2 + 151);
  v13 = (char)v12;
  if ((v12 & 0x80u) != 0)
    v12 = *(_QWORD *)(a2 + 136);
  if (v11 != v12)
    return 0;
  v14 = (const void **)(a1 + 128);
  if (v13 >= 0)
    v15 = (unsigned __int8 *)(a2 + 128);
  else
    v15 = *(unsigned __int8 **)(a2 + 128);
  if ((v10 & 0x80) != 0)
  {
    if (memcmp(*v14, v15, *(_QWORD *)(a1 + 136)))
      return 0;
  }
  else if (*(_BYTE *)(a1 + 151))
  {
    while (*(unsigned __int8 *)v14 == *v15)
    {
      v14 = (const void **)((char *)v14 + 1);
      ++v15;
      if (!--v10)
        goto LABEL_31;
    }
    return 0;
  }
LABEL_31:
  v16 = *(_QWORD *)(a1 + 176);
  v17 = *(_QWORD *)(a1 + 184);
  if (v17 - v16 == *(_QWORD *)(a2 + 184) - *(_QWORD *)(a2 + 176))
  {
    if (v17 != v16)
    {
      v18 = 0;
      v19 = 0;
      while (1)
      {
        v20 = v16 + v18;
        v21 = v16 + v18 + 8;
        if (*(char *)(v20 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(&v78, *(const std::string::value_type **)v21, *(_QWORD *)(v20 + 16));
        }
        else
        {
          v22 = *(_OWORD *)v21;
          v78.__r_.__value_.__r.__words[2] = *(_QWORD *)(v21 + 16);
          *(_OWORD *)&v78.__r_.__value_.__l.__data_ = v22;
        }
        Parameter = siri::dialogengine::File::GetParameter(a2, (unsigned __int8 **)&v78);
        if (!Parameter
          || ((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)Parameter + 16))(Parameter, *(_QWORD *)(a1 + 176) + v18) & 1) == 0)
        {
          break;
        }
        if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v78.__r_.__value_.__l.__data_);
        ++v19;
        v16 = *(_QWORD *)(a1 + 176);
        v18 += 336;
        if (v19 >= 0xCF3CF3CF3CF3CF3DLL * ((*(_QWORD *)(a1 + 184) - v16) >> 4))
          goto LABEL_42;
      }
      if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v78.__r_.__value_.__l.__data_);
      return 0;
    }
LABEL_42:
    if (*(_QWORD *)(a1 + 216) == *(_QWORD *)(a2 + 216))
    {
      v24 = *(const void ***)(a1 + 200);
      if (v24 != (const void **)(a1 + 208))
      {
        do
        {
          v25 = std::__tree<std::string>::find<std::string>(a2 + 200, v24 + 4);
          if (a2 + 208 == v25 || v24[9] != *(const void **)(v25 + 72))
            return 0;
          v26 = (const void **)v24[7];
          if (v26 != v24 + 8)
          {
            v27 = *(_QWORD **)(v25 + 56);
            do
            {
              v28 = *((unsigned __int8 *)v26 + 55);
              if ((v28 & 0x80u) == 0)
                v29 = (const void *)*((unsigned __int8 *)v26 + 55);
              else
                v29 = v26[5];
              v30 = (const void *)*((unsigned __int8 *)v27 + 55);
              v31 = (char)v30;
              if ((char)v30 < 0)
                v30 = (const void *)v27[5];
              if (v29 != v30)
                return 0;
              v32 = v26 + 4;
              if (v31 >= 0)
                v33 = (unsigned __int8 *)(v27 + 4);
              else
                v33 = (unsigned __int8 *)v27[4];
              if ((v28 & 0x80) != 0)
              {
                if (memcmp(*v32, v33, (size_t)v26[5]))
                  return 0;
              }
              else if (*((_BYTE *)v26 + 55))
              {
                v34 = v28 - 1;
                do
                {
                  v36 = *(unsigned __int8 *)v32;
                  v32 = (const void **)((char *)v32 + 1);
                  v35 = v36;
                  v38 = *v33++;
                  v37 = v38;
                  v40 = v34-- != 0;
                }
                while (v35 == v37 && v40);
                if (v35 != v37)
                  return 0;
              }
              v41 = (const void **)v26[1];
              if (v41)
              {
                do
                {
                  v42 = v41;
                  v41 = (const void **)*v41;
                }
                while (v41);
              }
              else
              {
                do
                {
                  v42 = (const void **)v26[2];
                  v43 = *v42 == v26;
                  v26 = v42;
                }
                while (!v43);
              }
              v44 = (_QWORD *)v27[1];
              if (v44)
              {
                do
                {
                  v45 = v44;
                  v44 = (_QWORD *)*v44;
                }
                while (v44);
              }
              else
              {
                do
                {
                  v45 = (_QWORD *)v27[2];
                  v43 = *v45 == (_QWORD)v27;
                  v27 = v45;
                }
                while (!v43);
              }
              v27 = v45;
              v26 = v42;
            }
            while (v42 != v24 + 8);
          }
          v46 = (const void **)v24[1];
          if (v46)
          {
            do
            {
              v47 = (const void ***)v46;
              v46 = (const void **)*v46;
            }
            while (v46);
          }
          else
          {
            do
            {
              v47 = (const void ***)v24[2];
              v43 = *v47 == v24;
              v24 = (const void **)v47;
            }
            while (!v43);
          }
          v24 = (const void **)v47;
        }
        while (v47 != (const void ***)(a1 + 208));
      }
      v48 = *(_QWORD *)(a1 + 224);
      v49 = *(_QWORD *)(a2 + 224);
      if ((v48 != 0) != (v49 == 0) && (!v48 || !v49 || siri::dialogengine::Group::operator==(v48, v49)))
      {
        std::map<std::string,std::shared_ptr<siri::dialogengine::Condition>>::map[abi:ne180100]((uint64_t)&v78, (const void ***)(a1 + 272));
        std::map<std::string,std::shared_ptr<siri::dialogengine::Condition>>::map[abi:ne180100]((uint64_t)v75, (const void ***)(a2 + 272));
        if (v78.__r_.__value_.__r.__words[2] == v77)
        {
          v50 = *(_QWORD **)(a1 + 272);
          if (v50 == (_QWORD *)(a1 + 280))
          {
LABEL_115:
            v61 = *(_QWORD *)(a1 + 296);
            v62 = *(_QWORD *)(a2 + 296);
            if ((v61 != 0) != (v62 == 0) && (!v61 || !v62 || siri::dialogengine::Group::operator==(v61, v62)))
            {
              siri::dialogengine::GroupPhrases::GetPhrases((siri::dialogengine::GroupPhrases *)(a1 + 312), (uint64_t)&v74);
              siri::dialogengine::GroupPhrases::GetPhrases((siri::dialogengine::GroupPhrases *)(a2 + 312), (uint64_t)&v72);
              size = v74.__r_.__value_.__l.__size_;
              v64 = (uint64_t *)v74.__r_.__value_.__r.__words[0];
              if (v74.__r_.__value_.__l.__size_ - v74.__r_.__value_.__r.__words[0] != (char *)v73 - (char *)v72)
                goto LABEL_140;
              while (v64 != (uint64_t *)size)
              {
                v65 = *v64;
                if (*(char *)(*v64 + 255) < 0)
                  std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v65 + 232), *(_QWORD *)(v65 + 240));
                else
                  __p = *(std::string *)(v65 + 232);
                Phrase = siri::dialogengine::GroupPhrases::GetPhrase(a2 + 312, (unsigned __int8 *)&__p);
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__p.__r_.__value_.__l.__data_);
                if (!Phrase || !siri::dialogengine::Group::operator==(*v64, (uint64_t)Phrase))
                  goto LABEL_140;
                v64 += 2;
              }
              v69 = *(_QWORD *)(a1 + 240);
              v70 = *(_QWORD *)(a2 + 240);
              if ((v69 != 0) == (v70 == 0)
                || v69 && v70 && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v69 + 64))(v69) & 1) != 0)
              {
LABEL_140:
                v67 = 0;
              }
              else
              {
                v67 = 1;
              }
              __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v72;
              std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
              v72 = &v74;
              std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v72);
              goto LABEL_135;
            }
          }
          else
          {
            while (1)
            {
              v51 = v50[7];
              if (*(char *)(v51 + 119) < 0)
                std::string::__init_copy_ctor_external(&v74, *(const std::string::value_type **)(v51 + 96), *(_QWORD *)(v51 + 104));
              else
                v74 = *(std::string *)(v51 + 96);
              v52 = std::__tree<std::string>::find<std::string>(a2 + 272, (const void **)&v74.__r_.__value_.__l.__data_);
              if (a2 + 280 == v52)
              {
                p_data = 0;
                v72 = 0;
                v73 = 0;
              }
              else
              {
                p_data = *(void ***)(v52 + 56);
                v54 = *(std::__shared_weak_count **)(v52 + 64);
                v72 = (std::string *)p_data;
                v73 = v54;
                if (v54)
                {
                  p_shared_owners = (unint64_t *)&v54->__shared_owners_;
                  do
                    v56 = __ldxr(p_shared_owners);
                  while (__stxr(v56 + 1, p_shared_owners));
                }
              }
              if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
              {
                operator delete(v74.__r_.__value_.__l.__data_);
                p_data = (void **)&v72->__r_.__value_.__l.__data_;
              }
              if (p_data && (siri::dialogengine::Condition::operator==(v50[7], (uint64_t)p_data) & 1) == 0)
                break;
              if (v73)
              {
                v57 = &v73->__shared_owners_;
                do
                  v58 = __ldaxr((unint64_t *)v57);
                while (__stlxr(v58 - 1, (unint64_t *)v57));
                if (!v58)
                {
                  ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
                  std::__shared_weak_count::__release_weak(v73);
                }
              }
              v59 = (_QWORD *)v50[1];
              if (v59)
              {
                do
                {
                  v60 = v59;
                  v59 = (_QWORD *)*v59;
                }
                while (v59);
              }
              else
              {
                do
                {
                  v60 = (_QWORD *)v50[2];
                  v43 = *v60 == (_QWORD)v50;
                  v50 = v60;
                }
                while (!v43);
              }
              v50 = v60;
              if (v60 == (_QWORD *)(a1 + 280))
                goto LABEL_115;
            }
            std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&v72);
          }
        }
        v67 = 0;
LABEL_135:
        std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(v76);
        std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy((_QWORD *)v78.__r_.__value_.__l.__size_);
        return v67;
      }
    }
  }
  return 0;
}

void sub_1BF911DD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char **__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char *a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,_QWORD *a22,uint64_t a23,void *a24,_QWORD *a25,int a26,__int16 a27,char a28,char a29)
{
  __p = &a15;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  a15 = &a18;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a15);
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(a22);
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(a25);
  _Unwind_Resume(a1);
}

uint64_t std::map<std::string,std::shared_ptr<siri::dialogengine::Condition>>::map[abi:ne180100](uint64_t a1, const void ***a2)
{
  uint64_t **v3;
  const void ***v4;
  const void **v5;
  uint64_t v6;
  uint64_t **v7;
  uint64_t v8;
  BOOL v9;
  uint64_t **v10;
  uint64_t *v11;
  std::string *v12;
  __int128 v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  const void **v17;
  const void ***v18;
  _QWORD v20[2];
  char v21;
  _QWORD *v22;

  *(_QWORD *)(a1 + 8) = 0;
  v3 = (uint64_t **)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  v4 = a2 + 1;
  v5 = *a2;
  if (*a2 != (const void **)(a2 + 1))
  {
    while (1)
    {
      v6 = *(_QWORD *)(a1 + 8);
      if (*(uint64_t ***)a1 == v3)
        break;
      v7 = v3;
      if (v6)
      {
        do
        {
          v8 = v6;
          v6 = *(_QWORD *)(v6 + 8);
        }
        while (v6);
      }
      else
      {
        do
        {
          v8 = (uint64_t)v7[2];
          v9 = *(_QWORD *)v8 == (_QWORD)v7;
          v7 = (uint64_t **)v8;
        }
        while (v9);
      }
      if (std::less<std::string>::operator()[abi:ne180100](a1 + 16, (const void **)(v8 + 32), v5 + 4))
      {
        if (!*v3)
          goto LABEL_9;
LABEL_11:
        v22 = (_QWORD *)v8;
        v10 = (uint64_t **)(v8 + 8);
        goto LABEL_13;
      }
      v10 = (uint64_t **)std::__tree<std::string>::__find_equal<std::string>(a1, &v22, v5 + 4);
LABEL_13:
      if (!*v10)
        goto LABEL_14;
LABEL_21:
      v17 = (const void **)v5[1];
      if (v17)
      {
        do
        {
          v18 = (const void ***)v17;
          v17 = (const void **)*v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          v18 = (const void ***)v5[2];
          v9 = *v18 == v5;
          v5 = (const void **)v18;
        }
        while (!v9);
      }
      v5 = (const void **)v18;
      if (v18 == v4)
        return a1;
    }
    v8 = (uint64_t)v3;
    if (!v6)
    {
LABEL_9:
      v22 = v3;
      v10 = v3;
LABEL_14:
      v11 = (uint64_t *)operator new(0x48uLL);
      v20[0] = v11;
      v20[1] = v3;
      v21 = 0;
      v12 = (std::string *)(v11 + 4);
      if (*((char *)v5 + 55) < 0)
      {
        std::string::__init_copy_ctor_external(v12, (const std::string::value_type *)v5[4], (std::string::size_type)v5[5]);
      }
      else
      {
        v13 = *((_OWORD *)v5 + 2);
        v11[6] = (uint64_t)v5[6];
        *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v13;
      }
      v11[7] = (uint64_t)v5[7];
      v14 = (uint64_t)v5[8];
      v11[8] = v14;
      if (v14)
      {
        v15 = (unint64_t *)(v14 + 8);
        do
          v16 = __ldxr(v15);
        while (__stxr(v16 + 1, v15));
      }
      v21 = 1;
      std::__tree<std::string>::__insert_node_at((uint64_t **)a1, (uint64_t)v22, v10, v11);
      v20[0] = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,void *>>>>::reset[abi:ne180100]((uint64_t)v20);
      goto LABEL_21;
    }
    goto LABEL_11;
  }
  return a1;
}

void sub_1BF91203C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD **v9;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,void *>>>>::reset[abi:ne180100]((uint64_t)&a9);
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(*v9);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::File::operator!=(uint64_t a1, uint64_t a2)
{
  return siri::dialogengine::File::operator==(a1, a2) ^ 1;
}

void siri::dialogengine::ParsePatternBinaryFile(__int128 **a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  void *__p;
  char v5;
  std::string v6;

  siri::dialogengine::FindPatternFile(a1, a2, (uint64_t)&v6);
  if (siri::dialogengine::FileExists((uint64_t *)&v6))
  {
    siri::dialogengine::ParsePatternBinaryFile(&v6, a3);
  }
  else
  {
    std::operator+<char>();
    siri::dialogengine::Log::LogWithLevel((uint64_t)&__p, 3u);
    if (v5 < 0)
      operator delete(__p);
    *a3 = 0;
    a3[1] = 0;
  }
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
}

void sub_1BF912108(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::ParsePatternBinaryFile(std::string *a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v4;
  unsigned __int8 v5;
  int *v6;
  int v7;
  int v8;
  int v9;
  uint64_t v11;
  _QWORD *v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  const std::string *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t **v19;
  uint64_t v20;
  const std::string *v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  int v29;
  std::string **v30;
  std::string *v31;
  std::string *v32;
  std::string **v33;
  std::string *v34;
  std::string *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42[3];
  std::__shared_weak_count *v43;
  _BYTE v44[32];
  int v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t *v51;
  std::string *__str;
  __int128 *v53;
  std::string *v54;
  void *__p[2];
  unsigned __int8 v56;
  char v57;
  std::string v58;

  siri::dialogengine::ParseGzippedFile();
  v4 = v56;
  v5 = v56;
  if ((v56 & 0x80u) != 0)
    v4 = (unint64_t)__p[1];
  if (v4)
  {
    siri::dialogengine::PatternBinary::Pattern::Pattern((siri::dialogengine::PatternBinary::Pattern *)v44);
    if ((google::protobuf::MessageLite::ParseFromString(v44, __p) & 1) == 0)
      goto LABEL_17;
    v6 = (int *)v51;
    v7 = *((char *)v51 + 23);
    if (v7 < 0)
    {
      if (v51[1] != 5)
        goto LABEL_17;
      v6 = (int *)*v51;
    }
    else if (v7 != 5)
    {
      goto LABEL_17;
    }
    v8 = *v6;
    v9 = *((unsigned __int8 *)v6 + 4);
    if (v8 == 1347699024 && v9 == 66)
    {
      v11 = operator new();
      siri::dialogengine::PatternFile::PatternFile((siri::dialogengine::PatternFile *)v11);
      *a2 = v11;
      v12 = (_QWORD *)operator new();
      *v12 = &off_1E792D300;
      v12[1] = 0;
      v12[2] = 0;
      v12[3] = v11;
      a2[1] = (uint64_t)v12;
      std::string::operator=((std::string *)(v11 + 136), __str);
      std::string::operator=((std::string *)(v11 + 88), a1);
      std::string::operator=((std::string *)(v11 + 112), v54);
      if ((v44[16] & 4) != 0)
      {
        if (*((char *)v53 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v58, *(const std::string::value_type **)v53, *((_QWORD *)v53 + 1));
        }
        else
        {
          v13 = *v53;
          v58.__r_.__value_.__r.__words[2] = *((_QWORD *)v53 + 2);
          *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v13;
        }
      }
      else
      {
        siri::dialogengine::CatPathToId((unsigned __int8 *)a1, &v58);
      }
      std::string::operator=((std::string *)(v11 + 64), &v58);
      if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v58.__r_.__value_.__l.__data_);
      if (v46)
        v14 = v46 + 8;
      else
        v14 = 0;
      if (v45)
      {
        v15 = 8 * v45;
        do
        {
          v16 = *(const std::string **)(*(_QWORD *)v14 + 32);
          v58.__r_.__value_.__r.__words[0] = *(_QWORD *)(*(_QWORD *)v14 + 24);
          v17 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v11 + 184), (const void **)v58.__r_.__value_.__l.__data_, (__int128 **)&v58);
          std::string::operator=((std::string *)(v17 + 7), v16);
          v14 += 8;
          v15 -= 8;
        }
        while (v15);
      }
      if (v48)
        v18 = v48 + 8;
      else
        v18 = 0;
      if (v47)
      {
        v19 = (uint64_t **)(v11 + 160);
        v20 = 8 * v47;
        do
        {
          v21 = *(const std::string **)(*(_QWORD *)v18 + 32);
          v58.__r_.__value_.__r.__words[0] = *(_QWORD *)(*(_QWORD *)v18 + 24);
          v22 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v19, (const void **)v58.__r_.__value_.__l.__data_, (__int128 **)&v58);
          std::string::operator=((std::string *)(v22 + 7), v21);
          v18 += 8;
          v20 -= 8;
        }
        while (v20);
      }
      if (v50)
        v23 = (uint64_t *)(v50 + 8);
      else
        v23 = 0;
      if (v49)
      {
        v24 = &v23[v49];
        do
        {
          v25 = *v23;
          v26 = operator new();
          *(_OWORD *)(v26 + 32) = 0u;
          *(_OWORD *)(v26 + 48) = 0u;
          *(_OWORD *)v26 = 0u;
          *(_OWORD *)(v26 + 16) = 0u;
          *(_QWORD *)v26 = &off_1E79309E0;
          *(_OWORD *)(v26 + 64) = 0u;
          *(_OWORD *)(v26 + 80) = 0u;
          *(_OWORD *)(v26 + 96) = 0u;
          *(_OWORD *)(v26 + 112) = 0u;
          *(_OWORD *)(v26 + 128) = 0u;
          *(_OWORD *)(v26 + 144) = 0u;
          *(_OWORD *)(v26 + 160) = 0u;
          *(_OWORD *)(v26 + 176) = 0u;
          *(_OWORD *)(v26 + 192) = 0u;
          v42[2] = v26;
          v27 = (std::__shared_weak_count *)operator new();
          v27->__shared_owners_ = 0;
          p_shared_owners = (unint64_t *)&v27->__shared_owners_;
          v27->__vftable = (std::__shared_weak_count_vtbl *)&off_1E792D378;
          v27->__shared_weak_owners_ = 0;
          v27[1].__vftable = (std::__shared_weak_count_vtbl *)v26;
          v43 = v27;
          std::string::operator=((std::string *)(v26 + 64), *(const std::string **)(v25 + 24));
          std::string::operator=((std::string *)(v26 + 136), *(const std::string **)(v25 + 32));
          v29 = *(_DWORD *)(v25 + 16);
          if ((v29 & 4) != 0)
          {
            v30 = *(std::string ***)(v25 + 40);
            if (!v30)
            {
              v31 = (std::string *)google::protobuf::internal::LogMessage::LogMessage((uint64_t)&v58, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/patterns/PatternBinary.pb.h", 1929);
              v32 = google::protobuf::internal::LogMessage::operator<<(v31, "CHECK failed: !value || dialog_ != nullptr: ");
              google::protobuf::internal::LogFinisher::operator=((int)&v57, (const char **)&v32->__r_.__value_.__l.__data_);
              google::protobuf::internal::LogMessage::~LogMessage((void **)&v58.__r_.__value_.__l.__data_);
              v30 = *(std::string ***)(v25 + 40);
            }
            if (!v30)
              v30 = (std::string **)&siri::dialogengine::PatternBinary::_Component_default_instance_;
            siri::dialogengine::PatternGroup::SetDialogIdWithComponent(v26, v30[6]);
            v29 = *(_DWORD *)(v25 + 16);
          }
          if ((v29 & 8) != 0)
          {
            v33 = *(std::string ***)(v25 + 48);
            if (!v33)
            {
              v34 = (std::string *)google::protobuf::internal::LogMessage::LogMessage((uint64_t)&v58, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/patterns/PatternBinary.pb.h", 1989);
              v35 = google::protobuf::internal::LogMessage::operator<<(v34, "CHECK failed: !value || visual_ != nullptr: ");
              google::protobuf::internal::LogFinisher::operator=((int)&v57, (const char **)&v35->__r_.__value_.__l.__data_);
              google::protobuf::internal::LogMessage::~LogMessage((void **)&v58.__r_.__value_.__l.__data_);
              v33 = *(std::string ***)(v25 + 48);
            }
            if (!v33)
              v33 = (std::string **)&siri::dialogengine::PatternBinary::_Component_default_instance_;
            siri::dialogengine::PatternGroup::SetVisualIdWithComponent(v26, v33[6]);
          }
          v36 = *a2;
          v42[0] = v26;
          v42[1] = (uint64_t)v27;
          do
            v37 = __ldxr(p_shared_owners);
          while (__stxr(v37 + 1, p_shared_owners));
          siri::dialogengine::PatternFile::AddPatternGroup(v36, v42);
          do
            v38 = __ldaxr(p_shared_owners);
          while (__stlxr(v38 - 1, p_shared_owners));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
          v39 = v43;
          if (v43)
          {
            v40 = (unint64_t *)&v43->__shared_owners_;
            do
              v41 = __ldaxr(v40);
            while (__stlxr(v41 - 1, v40));
            if (!v41)
            {
              ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
              std::__shared_weak_count::__release_weak(v39);
            }
          }
          ++v23;
        }
        while (v23 != v24);
      }
LABEL_20:
      siri::dialogengine::PatternBinary::Pattern::~Pattern((siri::dialogengine::PatternBinary::Pattern *)v44);
      if ((v56 & 0x80) == 0)
        return;
      goto LABEL_21;
    }
LABEL_17:
    std::operator+<char>();
    siri::dialogengine::Log::LogWithLevel((uint64_t)&v58, 3u);
    if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v58.__r_.__value_.__l.__data_);
    *a2 = 0;
    a2[1] = 0;
    goto LABEL_20;
  }
  *a2 = 0;
  a2[1] = 0;
  if ((v5 & 0x80) == 0)
    return;
LABEL_21:
  operator delete(__p[0]);
}

void sub_1BF912614(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  uint64_t v34;

  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](v34);
  siri::dialogengine::PatternBinary::Pattern::~Pattern((siri::dialogengine::PatternBinary::Pattern *)&a13);
  if (a34 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<siri::dialogengine::PatternGroup *,std::shared_ptr<siri::dialogengine::PatternGroup>::__shared_ptr_default_delete<siri::dialogengine::PatternGroup,siri::dialogengine::PatternGroup>,std::allocator<siri::dialogengine::PatternGroup>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B8D890);
}

uint64_t std::__shared_ptr_pointer<siri::dialogengine::PatternGroup *,std::shared_ptr<siri::dialogengine::PatternGroup>::__shared_ptr_default_delete<siri::dialogengine::PatternGroup,siri::dialogengine::PatternGroup>,std::allocator<siri::dialogengine::PatternGroup>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<siri::dialogengine::PatternGroup *,std::shared_ptr<siri::dialogengine::PatternGroup>::__shared_ptr_default_delete<siri::dialogengine::PatternGroup,siri::dialogengine::PatternGroup>,std::allocator<siri::dialogengine::PatternGroup>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void siri::dialogengine::PatternGroup::~PatternGroup(void **this)
{
  siri::dialogengine::PatternGroup::~PatternGroup(this);
  JUMPOUT(0x1C3B8D890);
}

{
  *this = &off_1E79309E0;
  if (*((char *)this + 207) < 0)
    operator delete(this[23]);
  if (*((char *)this + 183) < 0)
    operator delete(this[20]);
  if (*((char *)this + 159) < 0)
    operator delete(this[17]);
  if (*((char *)this + 135) < 0)
    operator delete(this[14]);
  if (*((char *)this + 111) < 0)
    operator delete(this[11]);
  if (*((char *)this + 87) < 0)
    operator delete(this[8]);
  siri::dialogengine::LineNumberBase::~LineNumberBase(this);
}

void std::__shared_ptr_pointer<siri::dialogengine::PatternFile *,std::shared_ptr<siri::dialogengine::PatternFile>::__shared_ptr_default_delete<siri::dialogengine::PatternFile,siri::dialogengine::PatternFile>,std::allocator<siri::dialogengine::PatternFile>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B8D890);
}

uint64_t std::__shared_ptr_pointer<siri::dialogengine::PatternFile *,std::shared_ptr<siri::dialogengine::PatternFile>::__shared_ptr_default_delete<siri::dialogengine::PatternFile,siri::dialogengine::PatternFile>,std::allocator<siri::dialogengine::PatternFile>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<siri::dialogengine::PatternFile *,std::shared_ptr<siri::dialogengine::PatternFile>::__shared_ptr_default_delete<siri::dialogengine::PatternFile,siri::dialogengine::PatternFile>,std::allocator<siri::dialogengine::PatternFile>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void siri::dialogengine::GetRequestTimeStamp(siri::dialogengine *this@<X0>, siri::dialogengine::Context *a2@<X1>, _QWORD *a3@<X8>)
{
  double *OptionalNumberParameter;
  double *RequiredNumberParameter;
  char *OptionalStringParameter;
  uint64_t v10;
  int v11;
  std::string v12;
  std::string __p;

  std::string::basic_string[abi:ne180100]<0>(&__p, "utcOffsetSecs");
  OptionalNumberParameter = (double *)siri::dialogengine::GetOptionalNumberParameter((const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "secs");
  RequiredNumberParameter = (double *)siri::dialogengine::GetRequiredNumberParameter((const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "timeZone");
  OptionalStringParameter = (char *)siri::dialogengine::GetOptionalStringParameter((const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (RequiredNumberParameter)
    {
LABEL_7:
      v10 = (uint64_t)RequiredNumberParameter[9];
      if (OptionalNumberParameter)
        goto LABEL_8;
LABEL_12:
      if (!OptionalStringParameter)
      {
        siri::dialogengine::Context::GetCurrentTimeZone(this, &v12);
        v11 = 0;
LABEL_18:
        __p = v12;
        goto LABEL_19;
      }
      v11 = 0;
LABEL_14:
      if (OptionalStringParameter[95] < 0)
        std::string::__init_copy_ctor_external(&v12, *((const std::string::value_type **)OptionalStringParameter + 9), *((_QWORD *)OptionalStringParameter + 10));
      else
        v12 = *(std::string *)(OptionalStringParameter + 3);
      goto LABEL_18;
    }
  }
  else if (RequiredNumberParameter)
  {
    goto LABEL_7;
  }
  v10 = 0x7FFFFFFFFFFFFFFFLL;
  if (!OptionalNumberParameter)
    goto LABEL_12;
LABEL_8:
  v11 = (int)OptionalNumberParameter[9];
  memset(&__p, 0, sizeof(__p));
  if (OptionalStringParameter)
    goto LABEL_14;
LABEL_19:
  siri::dialogengine::GetICUTimeStamp(v10, v11, (uint64_t)&__p, a3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1BF912A60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::GetNowTimeStamp(siri::dialogengine *this@<X0>, siri::dialogengine::Context *a2@<X1>, _QWORD *a3@<X8>)
{
  double *OptionalNumberParameter;
  char *OptionalStringParameter;
  double CurrentTime;
  int v10;
  std::string v11;
  std::string __p;

  std::string::basic_string[abi:ne180100]<0>(&__p, "utcOffsetSecs");
  OptionalNumberParameter = (double *)siri::dialogengine::GetOptionalNumberParameter((const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "timeZone");
  OptionalStringParameter = (char *)siri::dialogengine::GetOptionalStringParameter((const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  CurrentTime = siri::dialogengine::Context::GetCurrentTime(this);
  if (!OptionalNumberParameter)
  {
    if (!OptionalStringParameter)
    {
      siri::dialogengine::Context::GetCurrentTimeZone(this, &v11);
      v10 = 0;
LABEL_14:
      __p = v11;
      goto LABEL_15;
    }
    v10 = 0;
LABEL_10:
    if (OptionalStringParameter[95] < 0)
      std::string::__init_copy_ctor_external(&v11, *((const std::string::value_type **)OptionalStringParameter + 9), *((_QWORD *)OptionalStringParameter + 10));
    else
      v11 = *(std::string *)(OptionalStringParameter + 3);
    goto LABEL_14;
  }
  v10 = (int)OptionalNumberParameter[9];
  memset(&__p, 0, sizeof(__p));
  if (OptionalStringParameter)
    goto LABEL_10;
LABEL_15:
  siri::dialogengine::GetICUTimeStamp((uint64_t)CurrentTime, v10, (uint64_t)&__p, a3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1BF912BD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::GetNonSpecificDateTimePeriodSpeakableString(siri::dialogengine *a1@<X0>, siri::dialogengine::Context *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t IsContainedByDateTimeConstant;
  const siri::dialogengine::TimeStamp *v8;
  uint64_t v9;
  siri::dialogengine *ICUHour24;
  const siri::dialogengine::TimeStamp *v11;
  siri::dialogengine *ICUMinutes;
  siri::dialogengine *v13;
  siri::dialogengine *v14;
  siri::dialogengine *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68[3];
  const void **v69[3];
  uint64_t v70;
  void *v71[2];
  char v72;
  void *__p[2];
  char v74;
  __int128 v75;
  _QWORD v76[3];
  __int128 v77;
  _QWORD v78[3];
  __int128 v79;
  _QWORD v80[3];
  __int128 v81;
  _QWORD v82[3];
  __int128 v83;
  _QWORD v84[3];
  __int128 v85;
  _QWORD v86[3];
  __int128 v87;
  _QWORD v88[3];
  __int128 v89;
  _QWORD v90[3];
  __int128 v91;
  _QWORD v92[3];
  __int128 v93;
  _QWORD v94[3];
  __int128 v95;
  _QWORD v96[3];
  __int128 v97;
  _QWORD v98[3];
  __int128 v99;
  uint64_t v100;

  v100 = *MEMORY[0x1E0C80C00];
  siri::dialogengine::GetRequestTimeStamp(a1, a2, &v70);
  if ((siri::dialogengine::IsContainedByDateTimeConstant(a1, (char *)&v70, 7) & 1) != 0)
    IsContainedByDateTimeConstant = 1;
  else
    IsContainedByDateTimeConstant = siri::dialogengine::IsContainedByDateTimeConstant(a1, (char *)&v70, 8);
  if ((siri::dialogengine::IsContainedByDateTimeConstant(a1, (char *)&v70, 6) & 1) != 0)
    v9 = 1;
  else
    v9 = siri::dialogengine::IsContainedByDateTimeConstant(a1, (char *)&v70, 5);
  ICUHour24 = (siri::dialogengine *)siri::dialogengine::GetICUHour24((siri::dialogengine *)&v70, v8);
  ICUMinutes = (siri::dialogengine *)siri::dialogengine::GetICUMinutes((siri::dialogengine *)&v70, v11);
  siri::dialogengine::CreateJSONBoolVal((siri::dialogengine *)1, v68);
  std::string::basic_string[abi:ne180100]<0>(__p, "isToday");
  v75 = *(_OWORD *)v68;
  *(_OWORD *)v68 = 0uLL;
  siri::dialogengine::CreateJSONBoolVal((siri::dialogengine *)IsContainedByDateTimeConstant, (uint64_t *)&v67);
  std::string::basic_string[abi:ne180100]<0>(v76, "isNight");
  v77 = v67;
  v67 = 0uLL;
  v13 = (siri::dialogengine *)siri::dialogengine::IsContainedByDateTimeConstant(a1, (char *)&v70, 0);
  siri::dialogengine::CreateJSONBoolVal(v13, (uint64_t *)&v66);
  std::string::basic_string[abi:ne180100]<0>(v78, "isEarlyMorning");
  v79 = v66;
  v66 = 0uLL;
  v14 = (siri::dialogengine *)siri::dialogengine::IsContainedByDateTimeConstant(a1, (char *)&v70, 1);
  siri::dialogengine::CreateJSONBoolVal(v14, (uint64_t *)&v65);
  std::string::basic_string[abi:ne180100]<0>(v80, "isMorning");
  v81 = v65;
  v65 = 0uLL;
  v15 = (siri::dialogengine *)siri::dialogengine::IsContainedByDateTimeConstant(a1, (char *)&v70, 4);
  siri::dialogengine::CreateJSONBoolVal(v15, (uint64_t *)&v64);
  std::string::basic_string[abi:ne180100]<0>(v82, "isAfternoon");
  v83 = v64;
  v64 = 0uLL;
  siri::dialogengine::CreateJSONBoolVal((siri::dialogengine *)v9, (uint64_t *)&v63);
  std::string::basic_string[abi:ne180100]<0>(v84, "isEvening");
  v85 = v63;
  v63 = 0uLL;
  siri::dialogengine::CreateJSONBoolVal(0, (uint64_t *)&v62);
  std::string::basic_string[abi:ne180100]<0>(v86, "isNow");
  v87 = v62;
  v62 = 0uLL;
  siri::dialogengine::CreateJSONBoolVal(0, (uint64_t *)&v61);
  std::string::basic_string[abi:ne180100]<0>(v88, "isOvernight");
  v89 = v61;
  v61 = 0uLL;
  siri::dialogengine::CreateJSONBoolVal(0, (uint64_t *)&v60);
  std::string::basic_string[abi:ne180100]<0>(v90, "isTonight");
  v91 = v60;
  v60 = 0uLL;
  siri::dialogengine::CreateJSONStringVal(a3, (uint64_t *)&v59);
  std::string::basic_string[abi:ne180100]<0>(v92, "dateTimeAffix");
  v93 = v59;
  v59 = 0uLL;
  siri::dialogengine::CreateJSONBoolVal(0, (uint64_t *)&v58);
  std::string::basic_string[abi:ne180100]<0>(v94, "isUserDefinedTimePeriod");
  v95 = v58;
  v58 = 0uLL;
  siri::dialogengine::CreateJSONIntVal(ICUHour24, (uint64_t *)&v57);
  std::string::basic_string[abi:ne180100]<0>(v96, "hourOfDay");
  v97 = v57;
  v57 = 0uLL;
  siri::dialogengine::CreateJSONIntVal(ICUMinutes, (uint64_t *)&v56);
  std::string::basic_string[abi:ne180100]<0>(v98, "minute");
  v99 = v56;
  v56 = 0uLL;
  std::map<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>::map[abi:ne180100]((uint64_t)v69, (const void **)__p, 13);
  v16 = 65;
  do
  {
    std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&v71[v16 + 1]);
    if (SHIBYTE(v71[v16]) < 0)
      operator delete(v69[v16 + 2]);
    v16 -= 5;
  }
  while (v16 * 8);
  v17 = (std::__shared_weak_count *)*((_QWORD *)&v56 + 1);
  if (*((_QWORD *)&v56 + 1))
  {
    v18 = (unint64_t *)(*((_QWORD *)&v56 + 1) + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = (std::__shared_weak_count *)*((_QWORD *)&v57 + 1);
  if (*((_QWORD *)&v57 + 1))
  {
    v21 = (unint64_t *)(*((_QWORD *)&v57 + 1) + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v23 = (std::__shared_weak_count *)*((_QWORD *)&v58 + 1);
  if (*((_QWORD *)&v58 + 1))
  {
    v24 = (unint64_t *)(*((_QWORD *)&v58 + 1) + 8);
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v26 = (std::__shared_weak_count *)*((_QWORD *)&v59 + 1);
  if (*((_QWORD *)&v59 + 1))
  {
    v27 = (unint64_t *)(*((_QWORD *)&v59 + 1) + 8);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = (std::__shared_weak_count *)*((_QWORD *)&v60 + 1);
  if (*((_QWORD *)&v60 + 1))
  {
    v30 = (unint64_t *)(*((_QWORD *)&v60 + 1) + 8);
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  v32 = (std::__shared_weak_count *)*((_QWORD *)&v61 + 1);
  if (*((_QWORD *)&v61 + 1))
  {
    v33 = (unint64_t *)(*((_QWORD *)&v61 + 1) + 8);
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  v35 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
  if (*((_QWORD *)&v62 + 1))
  {
    v36 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  v38 = (std::__shared_weak_count *)*((_QWORD *)&v63 + 1);
  if (*((_QWORD *)&v63 + 1))
  {
    v39 = (unint64_t *)(*((_QWORD *)&v63 + 1) + 8);
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  v41 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
  if (*((_QWORD *)&v64 + 1))
  {
    v42 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  v44 = (std::__shared_weak_count *)*((_QWORD *)&v65 + 1);
  if (*((_QWORD *)&v65 + 1))
  {
    v45 = (unint64_t *)(*((_QWORD *)&v65 + 1) + 8);
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  v47 = (std::__shared_weak_count *)*((_QWORD *)&v66 + 1);
  if (*((_QWORD *)&v66 + 1))
  {
    v48 = (unint64_t *)(*((_QWORD *)&v66 + 1) + 8);
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  v50 = (std::__shared_weak_count *)*((_QWORD *)&v67 + 1);
  if (*((_QWORD *)&v67 + 1))
  {
    v51 = (unint64_t *)(*((_QWORD *)&v67 + 1) + 8);
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  v53 = (std::__shared_weak_count *)v68[1];
  if (v68[1])
  {
    v54 = (unint64_t *)(v68[1] + 8);
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "dateTime#getNonSpecificDateTimePeriod");
  siri::dialogengine::ExecuteSharedCat(a1, (uint64_t)__p, v69, a4);
  if (v74 < 0)
    operator delete(__p[0]);
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(v69[1]);
  if (v72 < 0)
    operator delete(v71[0]);
}

void sub_1BF9132F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,char a23,uint64_t a24,char a25,uint64_t a26,char a27,uint64_t a28,char a29,uint64_t a30,char a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,_QWORD *a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,void *__p,uint64_t a47,int a48,__int16 a49,char a50,char a51)
{
  if (a51 < 0)
    operator delete(__p);
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(a37);
  if (a45 < 0)
    operator delete(a40);
  _Unwind_Resume(a1);
}

void siri::dialogengine::GetNonSpecificTimePeriodSpeakableString(siri::dialogengine::Context *a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  const siri::dialogengine::TimeStamp *v8;
  int ICUDifferenceInDays;
  uint64_t IsContainedByDateTimeConstant;
  uint64_t v11;
  siri::dialogengine *v12;
  siri::dialogengine *v13;
  siri::dialogengine *v14;
  siri::dialogengine *v15;
  siri::dialogengine *v16;
  siri::dialogengine *v17;
  siri::dialogengine *v18;
  siri::dialogengine *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  const void **v73[3];
  void *v74[3];
  char v75;
  void *v76[3];
  char v77;
  void *v78[2];
  char v79;
  void *__p[2];
  char v81;
  __int128 v82;
  _QWORD v83[3];
  __int128 v84;
  _QWORD v85[3];
  __int128 v86;
  _QWORD v87[3];
  __int128 v88;
  _QWORD v89[3];
  __int128 v90;
  _QWORD v91[3];
  __int128 v92;
  _QWORD v93[3];
  __int128 v94;
  _QWORD v95[3];
  __int128 v96;
  _QWORD v97[3];
  __int128 v98;
  _QWORD v99[3];
  __int128 v100;
  _QWORD v101[3];
  __int128 v102;
  _QWORD v103[3];
  __int128 v104;
  _QWORD v105[3];
  __int128 v106;
  uint64_t v107;

  v107 = *MEMORY[0x1E0C80C00];
  siri::dialogengine::Context::GetLocaleWithUserCalendar(a1, a2, (uint64_t)v78);
  siri::dialogengine::GetRequestTimeStamp(a1, (siri::dialogengine::Context *)a2, v76);
  siri::dialogengine::GetNowTimeStamp(a1, (siri::dialogengine::Context *)a2, v74);
  ICUDifferenceInDays = siri::dialogengine::GetICUDifferenceInDays((siri::dialogengine *)v74, (const siri::dialogengine::TimeStamp *)v76, v8);
  if ((siri::dialogengine::IsContainedByDateTimeConstant(a1, (char *)v76, 7) & 1) != 0)
    IsContainedByDateTimeConstant = 1;
  else
    IsContainedByDateTimeConstant = siri::dialogengine::IsContainedByDateTimeConstant(a1, (char *)v76, 8);
  if ((siri::dialogengine::IsContainedByDateTimeConstant(a1, (char *)v76, 6) & 1) != 0)
    v11 = 1;
  else
    v11 = siri::dialogengine::IsContainedByDateTimeConstant(a1, (char *)v76, 5);
  siri::dialogengine::CreateJSONBoolVal((siri::dialogengine *)(ICUDifferenceInDays == 0), (uint64_t *)&v72);
  std::string::basic_string[abi:ne180100]<0>(__p, "isToday");
  v82 = v72;
  v72 = 0uLL;
  v12 = (siri::dialogengine *)siri::dialogengine::IsContainedByDateTimeConstant(a1, (char *)v76, 0);
  siri::dialogengine::CreateJSONBoolVal(v12, (uint64_t *)&v71);
  std::string::basic_string[abi:ne180100]<0>(v83, "isEarlyMorning");
  v84 = v71;
  v71 = 0uLL;
  v13 = (siri::dialogengine *)siri::dialogengine::IsContainedByDateTimeConstant(a1, (char *)v76, 1);
  siri::dialogengine::CreateJSONBoolVal(v13, (uint64_t *)&v70);
  std::string::basic_string[abi:ne180100]<0>(v85, "isMorning");
  v86 = v70;
  v70 = 0uLL;
  v14 = (siri::dialogengine *)siri::dialogengine::IsContainedByDateTimeConstant(a1, (char *)v76, 9);
  siri::dialogengine::CreateJSONBoolVal(v14, (uint64_t *)&v69);
  std::string::basic_string[abi:ne180100]<0>(v87, "isBreakfast");
  v88 = v69;
  v69 = 0uLL;
  v15 = (siri::dialogengine *)siri::dialogengine::IsContainedByDateTimeConstant(a1, (char *)v76, 10);
  siri::dialogengine::CreateJSONBoolVal(v15, (uint64_t *)&v68);
  std::string::basic_string[abi:ne180100]<0>(v89, "isBrunch");
  v90 = v68;
  v68 = 0uLL;
  v16 = (siri::dialogengine *)siri::dialogengine::IsContainedByDateTimeConstant(a1, (char *)v76, 11);
  siri::dialogengine::CreateJSONBoolVal(v16, (uint64_t *)&v67);
  std::string::basic_string[abi:ne180100]<0>(v91, "isLunch");
  v92 = v67;
  v67 = 0uLL;
  v17 = (siri::dialogengine *)siri::dialogengine::IsContainedByDateTimeConstant(a1, (char *)v76, 4);
  siri::dialogengine::CreateJSONBoolVal(v17, (uint64_t *)&v66);
  std::string::basic_string[abi:ne180100]<0>(v93, "isAfternoon");
  v94 = v66;
  v66 = 0uLL;
  v18 = (siri::dialogengine *)siri::dialogengine::IsContainedByDateTimeConstant(a1, (char *)v76, 12);
  siri::dialogengine::CreateJSONBoolVal(v18, (uint64_t *)&v65);
  std::string::basic_string[abi:ne180100]<0>(v95, "isDinner");
  v96 = v65;
  v65 = 0uLL;
  siri::dialogengine::CreateJSONBoolVal((siri::dialogengine *)v11, (uint64_t *)&v64);
  std::string::basic_string[abi:ne180100]<0>(v97, "isEvening");
  v98 = v64;
  v64 = 0uLL;
  v19 = (siri::dialogengine *)siri::dialogengine::IsContainedByDateTimeConstant(a1, (char *)v76, 14);
  siri::dialogengine::CreateJSONBoolVal(v19, (uint64_t *)&v63);
  std::string::basic_string[abi:ne180100]<0>(v99, "isBedtime");
  v100 = v63;
  v63 = 0uLL;
  siri::dialogengine::CreateJSONBoolVal((siri::dialogengine *)IsContainedByDateTimeConstant, (uint64_t *)&v62);
  std::string::basic_string[abi:ne180100]<0>(v101, "isNight");
  v102 = v62;
  v62 = 0uLL;
  siri::dialogengine::CreateJSONStringVal(a3, (uint64_t *)&v61);
  std::string::basic_string[abi:ne180100]<0>(v103, "dateTimeAffix");
  v104 = v61;
  v61 = 0uLL;
  siri::dialogengine::CreateJSONBoolVal(0, (uint64_t *)&v60);
  std::string::basic_string[abi:ne180100]<0>(v105, "userDefinedTimePeriod");
  v106 = v60;
  v60 = 0uLL;
  std::map<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>::map[abi:ne180100]((uint64_t)v73, (const void **)__p, 13);
  v20 = 65;
  do
  {
    std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&v78[v20 + 1]);
    if (SHIBYTE(v78[v20]) < 0)
      operator delete(v76[v20 + 2]);
    v20 -= 5;
  }
  while (v20 * 8);
  v21 = (std::__shared_weak_count *)*((_QWORD *)&v60 + 1);
  if (*((_QWORD *)&v60 + 1))
  {
    v22 = (unint64_t *)(*((_QWORD *)&v60 + 1) + 8);
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v24 = (std::__shared_weak_count *)*((_QWORD *)&v61 + 1);
  if (*((_QWORD *)&v61 + 1))
  {
    v25 = (unint64_t *)(*((_QWORD *)&v61 + 1) + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
  if (*((_QWORD *)&v62 + 1))
  {
    v28 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  v30 = (std::__shared_weak_count *)*((_QWORD *)&v63 + 1);
  if (*((_QWORD *)&v63 + 1))
  {
    v31 = (unint64_t *)(*((_QWORD *)&v63 + 1) + 8);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  v33 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
  if (*((_QWORD *)&v64 + 1))
  {
    v34 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  v36 = (std::__shared_weak_count *)*((_QWORD *)&v65 + 1);
  if (*((_QWORD *)&v65 + 1))
  {
    v37 = (unint64_t *)(*((_QWORD *)&v65 + 1) + 8);
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  v39 = (std::__shared_weak_count *)*((_QWORD *)&v66 + 1);
  if (*((_QWORD *)&v66 + 1))
  {
    v40 = (unint64_t *)(*((_QWORD *)&v66 + 1) + 8);
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  v42 = (std::__shared_weak_count *)*((_QWORD *)&v67 + 1);
  if (*((_QWORD *)&v67 + 1))
  {
    v43 = (unint64_t *)(*((_QWORD *)&v67 + 1) + 8);
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  v45 = (std::__shared_weak_count *)*((_QWORD *)&v68 + 1);
  if (*((_QWORD *)&v68 + 1))
  {
    v46 = (unint64_t *)(*((_QWORD *)&v68 + 1) + 8);
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  v48 = (std::__shared_weak_count *)*((_QWORD *)&v69 + 1);
  if (*((_QWORD *)&v69 + 1))
  {
    v49 = (unint64_t *)(*((_QWORD *)&v69 + 1) + 8);
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  v51 = (std::__shared_weak_count *)*((_QWORD *)&v70 + 1);
  if (*((_QWORD *)&v70 + 1))
  {
    v52 = (unint64_t *)(*((_QWORD *)&v70 + 1) + 8);
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
  v54 = (std::__shared_weak_count *)*((_QWORD *)&v71 + 1);
  if (*((_QWORD *)&v71 + 1))
  {
    v55 = (unint64_t *)(*((_QWORD *)&v71 + 1) + 8);
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  v57 = (std::__shared_weak_count *)*((_QWORD *)&v72 + 1);
  if (*((_QWORD *)&v72 + 1))
  {
    v58 = (unint64_t *)(*((_QWORD *)&v72 + 1) + 8);
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "dateTime#getNonSpecificTimePeriod");
  siri::dialogengine::ExecuteSharedCat(a1, (uint64_t)__p, v73, a4);
  if (v81 < 0)
    operator delete(__p[0]);
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(v73[1]);
  if (v75 < 0)
    operator delete(v74[1]);
  if (v77 < 0)
    operator delete(v76[1]);
  if (v79 < 0)
    operator delete(v78[0]);
}

void sub_1BF913C3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,char a23,uint64_t a24,char a25,uint64_t a26,char a27,uint64_t a28,char a29,uint64_t a30,char a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,_QWORD *a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,void *__p,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  if (a63 < 0)
    operator delete(__p);
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(a36);
  if (a44 < 0)
    operator delete(a39);
  if (a51 < 0)
    operator delete(a46);
  if (a57 < 0)
    operator delete(a52);
  _Unwind_Resume(a1);
}

void sub_1BF913E48()
{
  JUMPOUT(0x1BF913D94);
}

uint64_t siri::dialogengine::ShouldUse24HrDisplay(siri::dialogengine *this, siri::dialogengine::Context *a2)
{
  uint64_t IsICU24HourDisplay;
  unsigned int v4;
  BOOL v5;
  int v6;
  int v7;
  unsigned int v8;
  int v9;
  int v10;
  void *v12[2];
  char v13;
  std::string __p[20];
  std::string v15;

  if (!this)
    return 0;
  siri::dialogengine::Context::GetDeviceLocale(this, __p);
  IsICU24HourDisplay = siri::dialogengine::IsICU24HourDisplay(&__p[0].__r_.__value_.__l.__data_);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  siri::dialogengine::RequestInfo::RequestInfo((siri::dialogengine::RequestInfo *)__p, (siri::dialogengine *)((char *)this + 8));
  std::string::basic_string[abi:ne180100]<0>(v12, "user24HourTimeOverride");
  siri::dialogengine::RequestInfo::GetUserSetting((uint64_t)__p, (const void **)v12, &v15);
  if (v13 < 0)
    operator delete(v12[0]);
  siri::dialogengine::RequestInfo::~RequestInfo((void **)&__p[0].__r_.__value_.__l.__data_);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v15.__r_.__value_.__l.__size_ == 4)
    {
      if (*(_DWORD *)v15.__r_.__value_.__l.__data_ == 1919431730)
      {
        IsICU24HourDisplay = 1;
      }
      else
      {
        v4 = bswap32(*(_DWORD *)v15.__r_.__value_.__l.__data_);
        v5 = v4 >= 0x31326872;
        v6 = v4 > 0x31326872;
        v7 = !v5;
        if (v6 == v7)
          IsICU24HourDisplay = 0;
        else
          IsICU24HourDisplay = IsICU24HourDisplay;
      }
    }
    operator delete(v15.__r_.__value_.__l.__data_);
  }
  else if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) == 4)
  {
    if (LODWORD(v15.__r_.__value_.__l.__data_) == 1919431730)
    {
      return 1;
    }
    else
    {
      v8 = bswap32(v15.__r_.__value_.__l.__data_);
      v5 = v8 >= 0x31326872;
      v9 = v8 > 0x31326872;
      v10 = !v5;
      if (v9 == v10)
        return 0;
      else
        return IsICU24HourDisplay;
    }
  }
  return IsICU24HourDisplay;
}

void sub_1BF913F9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  siri::dialogengine::RequestInfo::~RequestInfo(&a15);
  _Unwind_Resume(a1);
}

void sub_1BF9140F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BF914174(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BF9141E8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BF9142C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

std::string *siri::dialogengine::DialogArea::toString(siri::dialogengine::DialogArea *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  return siri::dialogengine::FormatArea(this, (uint64_t)a2, 0);
}

std::string *siri::dialogengine::FormatArea(_QWORD *a1, uint64_t a2, unsigned int a3)
{
  void *RequiredNumberParameter;
  void *v7;
  long double v8;
  char *OptionalStringParameter;
  char *v10;
  std::string *v11;
  void *v12;
  const char *v13;
  unsigned int v14;
  unsigned int data;
  siri::dialogengine *v16;
  double v17;
  double v18;
  unsigned int v19;
  char *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  void *size;
  int v26;
  std::string::size_type v27;
  std::string *p_p;
  std::string *v29;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  const void **v41[3];
  void *v42[2];
  char v43;
  std::string v44;
  char v45;
  double v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  void *v50[2];
  void *v51[2];
  __int128 v52;
  void *v53[2];
  void *v54[2];
  __int128 v55;
  std::string v56;
  std::string __p;
  std::string v58;
  void *v59;
  void *v60[2];
  uint64_t v61;
  char v62;
  std::string v63;
  std::string v64;
  std::string v65;
  __int128 v66;
  uint64_t v67[3];
  __int128 v68;
  uint64_t v69[3];
  __int128 v70;
  uint64_t v71[3];
  __int128 v72;
  uint64_t v73[3];
  __int128 v74;
  uint64_t v75[3];
  __int128 v76;
  uint64_t v77;

  v77 = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(&__p, "value");
  RequiredNumberParameter = siri::dialogengine::GetRequiredNumberParameter((const void **)&__p.__r_.__value_.__l.__data_, a2);
  v7 = RequiredNumberParameter;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v7)
    {
LABEL_3:
      v8 = *((double *)v7 + 9);
      std::string::basic_string[abi:ne180100]<0>(&__p, "units");
      OptionalStringParameter = (char *)siri::dialogengine::GetOptionalStringParameter((const void **)&__p.__r_.__value_.__l.__data_, a2);
      v10 = OptionalStringParameter;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if (v10)
        {
LABEL_5:
          if (v10[95] < 0)
            std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)v10 + 9), *((_QWORD *)v10 + 10));
          else
            __p = *(std::string *)(v10 + 3);
LABEL_15:
          v14 = siri::dialogengine::ParseUnitLabel<siri::dialogengine::Area>((uint64_t)&__p);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          v55 = 0u;
          memset(&v56, 0, sizeof(v56));
          *(_OWORD *)v53 = 0u;
          *(_OWORD *)v54 = 0u;
          *(_OWORD *)v51 = 0u;
          v52 = 0u;
          v49 = 0u;
          *(_OWORD *)v50 = 0u;
          v47 = 0u;
          v48 = 0u;
          if (v14 == -1)
          {
            if (v10)
            {
              if (*(char *)(a2 + 31) < 0)
                std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
              else
                __p = *(std::string *)(a2 + 8);
              v26 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
              v27 = __p.__r_.__value_.__r.__words[0];
              if (v10[95] < 0)
                std::string::__init_copy_ctor_external(&v44, *((const std::string::value_type **)v10 + 9), *((_QWORD *)v10 + 10));
              else
                v44 = *(std::string *)(v10 + 3);
              p_p = &__p;
              if (v26 < 0)
                p_p = (std::string *)v27;
              v29 = &v44;
              if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v29 = (std::string *)v44.__r_.__value_.__r.__words[0];
              siri::dialogengine::Log::Warn((siri::dialogengine::Log *)"Unrecognized 'units' input for variable '%s' of type 'dialog.Area': %s", v13, p_p, v29);
              if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v44.__r_.__value_.__l.__data_);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p.__r_.__value_.__l.__data_);
            }
            std::to_string(&__p, v8);
            siri::dialogengine::SpeakableString::SetString((uint64_t)&v47, (uint64_t)&__p);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            {
              size = (void *)__p.__r_.__value_.__r.__words[0];
              goto LABEL_74;
            }
          }
          else
          {
            siri::dialogengine::GetConvertedUnitInfo<siri::dialogengine::Area>(v8, (uint64_t)a1, a2, (uint64_t)&v44);
            if (LODWORD(v44.__r_.__value_.__l.__data_) == -2)
            {
              data = v14;
            }
            else
            {
              v8 = v46;
              data = v44.__r_.__value_.__l.__data_;
            }
            if (v8 == 0.0)
              v16 = 0;
            else
              v16 = (siri::dialogengine *)(fmod(v8, 1000000.0) == 0.0);
            v17 = round(v8);
            v18 = fmod(v8, 1.0);
            if (fabs(v17) >= 1000.0)
              v19 = a3;
            else
              v19 = a3 & 0xFFFFFFF9;
            if (data > 5)
              v20 = "unit#unknownAreaValue";
            else
              v20 = off_1E792D3E0[data];
            std::string::basic_string[abi:ne180100]<0>(v42, v20);
            siri::dialogengine::CreateJSONBoolVal(0, (uint64_t *)&v40);
            std::string::basic_string[abi:ne180100]<0>(&__p, "abbreviated");
            *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v40;
            v40 = 0uLL;
            siri::dialogengine::CreateJSONBoolVal((siri::dialogengine *)(v19 & 1), (uint64_t *)&v39);
            std::string::basic_string[abi:ne180100]<0>(&v58.__r_.__value_.__r.__words[2], "approximate");
            *(_OWORD *)v60 = v39;
            v39 = 0uLL;
            siri::dialogengine::CreateJSONBoolVal((siri::dialogengine *)((v19 >> 1) & 1), (uint64_t *)&v38);
            std::string::basic_string[abi:ne180100]<0>(&v61, "compactDecimalLong");
            *(_OWORD *)&v63.__r_.__value_.__r.__words[1] = v38;
            v38 = 0uLL;
            siri::dialogengine::CreateJSONBoolVal((siri::dialogengine *)((v19 >> 2) & 1), (uint64_t *)&v37);
            std::string::basic_string[abi:ne180100]<0>(&v64, "compactDecimalShort");
            *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v37;
            v37 = 0uLL;
            siri::dialogengine::CreateJSONBoolVal(v16, (uint64_t *)&v36);
            std::string::basic_string[abi:ne180100]<0>(&v65.__r_.__value_.__r.__words[2], "numberIsMultipleOfMillion");
            v66 = v36;
            v36 = 0uLL;
            siri::dialogengine::CreateJSONDoubleVal(v8, (uint64_t *)&v35);
            std::string::basic_string[abi:ne180100]<0>(v67, "number");
            v68 = v35;
            v35 = 0uLL;
            siri::dialogengine::CreateJSONDoubleVal(v17, (uint64_t *)&v34);
            std::string::basic_string[abi:ne180100]<0>(v69, "numberRounded");
            v70 = v34;
            v34 = 0uLL;
            siri::dialogengine::CreateJSONBoolVal((siri::dialogengine *)1, (uint64_t *)&v33);
            std::string::basic_string[abi:ne180100]<0>(v71, "primaryContent");
            v72 = v33;
            v33 = 0uLL;
            siri::dialogengine::CreateJSONDoubleVal(v18 * 100.0, (uint64_t *)&v32);
            std::string::basic_string[abi:ne180100]<0>(v73, "remainders");
            v74 = v32;
            v32 = 0uLL;
            siri::dialogengine::CreateJSONDoubleVal(v8 - v18, (uint64_t *)&v31);
            std::string::basic_string[abi:ne180100]<0>(v75, "wholeUnits");
            v76 = v31;
            v31 = 0uLL;
            std::map<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>::map[abi:ne180100]((uint64_t)v41, (const void **)&__p.__r_.__value_.__l.__data_, 10);
            v21 = 50;
            do
            {
              std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&v56.__r_.__value_.__r.__words[v21 + 2]);
              if (SHIBYTE(v56.__r_.__value_.__r.__words[v21 + 1]) < 0)
                operator delete(*(void **)((char *)&v55 + v21 * 8 + 8));
              v21 -= 5;
            }
            while (v21 * 8);
            v22 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
            if (*((_QWORD *)&v40 + 1))
            {
              v23 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
              do
                v24 = __ldaxr(v23);
              while (__stlxr(v24 - 1, v23));
              if (!v24)
              {
                ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
                std::__shared_weak_count::__release_weak(v22);
              }
            }
            siri::dialogengine::ExecuteSharedCat(a1, (uint64_t)v42, v41, (uint64_t)&__p);
            std::string::operator=((std::string *)&v47, &__p);
            std::string::operator=((std::string *)((char *)&v48 + 8), &v58);
            std::string::operator=((std::string *)v50, (const std::string *)&v59);
            std::string::operator=((std::string *)&v51[1], (const std::string *)&v60[1]);
            std::string::operator=((std::string *)v53, &v63);
            std::string::operator=((std::string *)&v54[1], &v64);
            std::string::operator=(&v56, &v65);
            if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v65.__r_.__value_.__l.__data_);
            if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v64.__r_.__value_.__l.__data_);
            if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v63.__r_.__value_.__l.__data_);
            if (v62 < 0)
              operator delete(v60[1]);
            if (SHIBYTE(v60[0]) < 0)
              operator delete(v59);
            if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v58.__r_.__value_.__l.__data_);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(v41[1]);
            if (v43 < 0)
              operator delete(v42[0]);
            if (v45 < 0)
            {
              size = (void *)v44.__r_.__value_.__l.__size_;
LABEL_74:
              operator delete(size);
            }
          }
          v11 = (std::string *)operator new();
          std::string::basic_string[abi:ne180100]<0>(&__p, "");
          siri::dialogengine::VariableString::VariableString(v11, &__p, (const siri::dialogengine::SpeakableString *)&v47);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v56.__r_.__value_.__l.__data_);
          if (SHIBYTE(v55) < 0)
            operator delete(v54[1]);
          if (SHIBYTE(v54[0]) < 0)
            operator delete(v53[0]);
          if (SHIBYTE(v52) < 0)
            operator delete(v51[1]);
          if (SHIBYTE(v51[0]) < 0)
            operator delete(v50[0]);
          if (SHIBYTE(v49) < 0)
            operator delete(*((void **)&v48 + 1));
          if (SBYTE7(v48) < 0)
          {
            v12 = (void *)v47;
            goto LABEL_91;
          }
          return v11;
        }
      }
      else if (OptionalStringParameter)
      {
        goto LABEL_5;
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, "");
      goto LABEL_15;
    }
  }
  else if (RequiredNumberParameter)
  {
    goto LABEL_3;
  }
  v11 = (std::string *)operator new();
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::basic_string[abi:ne180100]<0>(&v47, "");
  siri::dialogengine::VariableString::VariableString((uint64_t)v11, &__p, (uint64_t)&v47);
  if (SBYTE7(v48) < 0)
    operator delete((void *)v47);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    v12 = (void *)__p.__r_.__value_.__r.__words[0];
LABEL_91:
    operator delete(v12);
  }
  return v11;
}

void sub_1BF914A78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *__p;
  char a70;

  if (a70 < 0)
    operator delete(__p);
  siri::dialogengine::SpeakableString::~SpeakableString(&a43);
  _Unwind_Resume(a1);
}

std::string *siri::dialogengine::DialogArea::approximate(siri::dialogengine::DialogArea *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  return siri::dialogengine::FormatArea(this, (uint64_t)a2, 1u);
}

std::string *siri::dialogengine::DialogArea::compactDecimalLong(siri::dialogengine::DialogArea *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  return siri::dialogengine::FormatArea(this, (uint64_t)a2, 2u);
}

std::string *siri::dialogengine::DialogArea::compactDecimalShort(siri::dialogengine::DialogArea *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  return siri::dialogengine::FormatArea(this, (uint64_t)a2, 4u);
}

uint64_t siri::dialogengine::DialogArea::units(siri::dialogengine::DialogArea *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  uint64_t v3;
  std::string __p;
  _BYTE v6[8];
  void *v7;
  char v8;

  siri::dialogengine::GetConvertedUnitInfo<siri::dialogengine::Area>(0.0, (uint64_t)this, (uint64_t)a2, (uint64_t)v6);
  v3 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  siri::dialogengine::VariableString::VariableString(v3, &__p, (uint64_t)&v7);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v8 < 0)
    operator delete(v7);
  return v3;
}

void sub_1BF914DB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (a14 < 0)
    operator delete(__p);
  MEMORY[0x1C3B8D890](v21, 0x10B3C40D3060B95);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::DialogArea::value(siri::dialogengine::DialogArea *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  double *RequiredNumberParameter;
  double *v6;
  uint64_t v7;
  void *size;
  std::string __p;
  std::string v11;
  char v12;
  double v13;

  std::string::basic_string[abi:ne180100]<0>(&v11, "value");
  RequiredNumberParameter = (double *)siri::dialogengine::GetRequiredNumberParameter((const void **)&v11.__r_.__value_.__l.__data_, (uint64_t)a2);
  v6 = RequiredNumberParameter;
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v11.__r_.__value_.__l.__data_);
    if (v6)
    {
LABEL_3:
      siri::dialogengine::GetConvertedUnitInfo<siri::dialogengine::Area>(round(v6[9]), (uint64_t)this, (uint64_t)a2, (uint64_t)&v11);
      v7 = operator new();
      std::string::basic_string[abi:ne180100]<0>(&__p, "");
      siri::dialogengine::VariableNumber::VariableNumber(v7, &__p, v13);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (v12 < 0)
      {
        size = (void *)v11.__r_.__value_.__l.__size_;
LABEL_10:
        operator delete(size);
        return v7;
      }
      return v7;
    }
  }
  else if (RequiredNumberParameter)
  {
    goto LABEL_3;
  }
  v7 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&v11, "");
  siri::dialogengine::VariableNumber::VariableNumber(v7, &v11, 0.0);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
  {
    size = (void *)v11.__r_.__value_.__r.__words[0];
    goto LABEL_10;
  }
  return v7;
}

void sub_1BF914F38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, void *a16, int a17, __int16 a18, char a19, char a20,int a21,__int16 a22,char a23,char a24)
{
  uint64_t v24;

  if (a20 < 0)
    operator delete(__p);
  MEMORY[0x1C3B8D890](v24, 0x10B3C4030AE2ACELL);
  _Unwind_Resume(a1);
}

void siri::dialogengine::RegisterMorphunData(uint64_t a1, const std::string *a2, uint64_t a3)
{
  uint64_t v5;
  std::string *v6;
  __int128 v7;
  int v8;
  const std::string::value_type *v9;
  std::string::size_type v10;
  std::string *v11;
  __int128 v12;
  std::string *v13;
  __int128 v14;
  std::string v15;
  void *v16[2];
  std::string::size_type v17;
  std::string v18;
  std::string v19;

  siri::dialogengine::GetCanonicalLocale(a2, 0, &v19);
  v5 = *(unsigned __int8 *)(a3 + 23);
  if ((v5 & 0x80u) != 0)
    v5 = *(_QWORD *)(a3 + 8);
  if (v5)
  {
    memset(&v18, 0, sizeof(v18));
    memset(&v15, 0, sizeof(v15));
    morphun::util::ULocale::ULocale();
    morphun::resources::DataRegistrationService::registerDataPathForLocale();
    morphun::util::ULocale::~ULocale((morphun::util::ULocale *)v16);
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v18.__r_.__value_.__l.__data_);
    std::operator+<char>();
    v6 = std::string::append(&v15, "' from: ");
    v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v18.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    v8 = *(char *)(a3 + 23);
    if (v8 >= 0)
      v9 = (const std::string::value_type *)a3;
    else
      v9 = *(const std::string::value_type **)a3;
    if (v8 >= 0)
      v10 = *(unsigned __int8 *)(a3 + 23);
    else
      v10 = *(_QWORD *)(a3 + 8);
    v11 = std::string::append(&v18, v9, v10);
    v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v17 = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)v16 = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Log::Debug((siri::dialogengine *)v16);
    if (SHIBYTE(v17) < 0)
      operator delete(v16[0]);
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v18.__r_.__value_.__l.__data_);
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v15.__r_.__value_.__l.__data_);
    if (a1)
      *(_BYTE *)(a1 + 928) = 1;
  }
  else
  {
    std::operator+<char>();
    v13 = std::string::append(&v18, "'");
    v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v17 = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)v16 = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Log::LogWithLevel((uint64_t)v16, 1u);
    if (SHIBYTE(v17) < 0)
      operator delete(v16[0]);
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v18.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
}

void sub_1BF9151D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;

  if (a26 < 0)
    operator delete(__p);
  if (*(char *)(v26 - 57) < 0)
    operator delete(*(void **)(v26 - 80));
  if (*(char *)(v26 - 33) < 0)
    operator delete(*(void **)(v26 - 56));
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::RegisterMorphunData(siri::dialogengine *this, siri::dialogengine::Context *a2)
{
  std::string::size_type size;
  char v4;
  const morphun::util::ULocale *v5;
  uint64_t v6;
  char v7;
  siri::dialogengine *v8;
  BOOL UnentitledAppEnvVar;
  const char *v10;
  std::string::size_type v11;
  uint64_t v12;
  std::string __p[11];
  char v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  std::string v28;
  std::string v29;

  memset(&v29, 0, sizeof(v29));
  if (!this || *((_BYTE *)this + 928))
    return;
  siri::dialogengine::Context::GetLocale(this, (const char *)a2, (uint64_t)__p);
  siri::dialogengine::GetCanonicalLocale(__p, 0, &v28);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  size = HIBYTE(v28.__r_.__value_.__r.__words[2]);
  v4 = HIBYTE(v28.__r_.__value_.__r.__words[2]);
  if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v28.__r_.__value_.__l.__size_;
  if (size)
  {
    v26 = 0uLL;
    v27 = 0;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    v18 = 0;
    v19 = 0;
    v20 = 0;
    v15 = 0;
    v16 = 0;
    v17 = 0;
    morphun::util::ULocale::ULocale();
    morphun::resources::DataRegistrationService::getDataPathForLocale((morphun::resources::DataRegistrationService *)__p, v5);
    v26 = v24;
    v27 = v25;
    HIBYTE(v25) = 0;
    LOBYTE(v24) = 0;
    morphun::util::ULocale::~ULocale((morphun::util::ULocale *)__p);
    if (SHIBYTE(v17) < 0)
      operator delete(v15);
    if (SHIBYTE(v20) < 0)
      operator delete(v18);
    if (SHIBYTE(v23) < 0)
      operator delete(v21);
    v6 = HIBYTE(v27);
    v7 = HIBYTE(v27);
    if (v27 < 0)
      v6 = *((_QWORD *)&v26 + 1);
    if (v6)
    {
      std::operator+<char>();
      siri::dialogengine::Log::Debug((siri::dialogengine *)__p);
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p[0].__r_.__value_.__l.__data_);
      *((_BYTE *)this + 928) = 1;
      v7 = HIBYTE(v27);
      goto LABEL_29;
    }
    v8 = siri::dialogengine::RequestInfo::RequestInfo((siri::dialogengine::RequestInfo *)__p, (siri::dialogengine *)((char *)this + 8));
    if ((v14 & 2) != 0)
    {
      siri::dialogengine::RequestInfo::~RequestInfo((void **)&__p[0].__r_.__value_.__l.__data_);
    }
    else
    {
      UnentitledAppEnvVar = siri::dialogengine::GetUnentitledAppEnvVar(v8);
      siri::dialogengine::RequestInfo::~RequestInfo((void **)&__p[0].__r_.__value_.__l.__data_);
      if (!UnentitledAppEnvVar)
      {
        siri::dialogengine::MorphunUpdaterTuriTrial::GetPath((uint64_t *)&v28, __p);
        v29 = __p[0];
        v11 = HIBYTE(__p[0].__r_.__value_.__r.__words[2]);
        if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v11 = v29.__r_.__value_.__l.__size_;
        if (!v11)
        {
          siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Attempting background download of missing locale data using Turi Trial...", v10);
          siri::dialogengine::MorphunUpdaterTuriTrial::Download(v12, (uint64_t *)&v28, 0, 0);
        }
        goto LABEL_28;
      }
    }
    siri::dialogengine::MorphunUpdaterCatutil::GetPath((uint64_t)&v28, __p);
    v29 = __p[0];
LABEL_28:
    siri::dialogengine::RegisterMorphunData((uint64_t)this, &v28, (uint64_t)&v29);
LABEL_29:
    if (v7 < 0)
      operator delete((void *)v26);
    v4 = HIBYTE(v28.__r_.__value_.__r.__words[2]);
  }
  if (v4 < 0)
    operator delete(v28.__r_.__value_.__l.__data_);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
}

void sub_1BF9154E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  char v14;
  uint64_t v15;

  if (v14 < 0)
    operator delete(*(void **)(v15 - 112));
  if (*(char *)(v15 - 65) < 0)
    operator delete(*(void **)(v15 - 88));
  if (*(char *)(v15 - 41) < 0)
    operator delete(*(void **)(v15 - 64));
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::RegisterMorphunData(std::string *a1)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  uint64_t **v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _BOOL4 v8;
  _QWORD *v9;
  siri::dialogengine::Context *v10;
  _QWORD *v11;
  void *v12[26];
  std::string v13[12];
  _BYTE v14[3512];

  if ((v2 & 1) == 0
  {
    v11 = (_QWORD *)operator new();
    v11[2] = 0;
    v11[1] = 0;
    *v11 = v11 + 1;
    siri::dialogengine::RegisterMorphunData(std::string const&)::sRegisteredLocales = (uint64_t)v11;
  }
  if ((v3 & 1) == 0
  {
    __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE4AB8], &siri::dialogengine::RegisterMorphunData(std::string const&)::m, &dword_1BF794000);
  }
  std::mutex::lock(&siri::dialogengine::RegisterMorphunData(std::string const&)::m);
  v4 = (uint64_t **)siri::dialogengine::RegisterMorphunData(std::string const&)::sRegisteredLocales;
  v5 = siri::dialogengine::RegisterMorphunData(std::string const&)::sRegisteredLocales + 8;
  v6 = *(_QWORD **)(siri::dialogengine::RegisterMorphunData(std::string const&)::sRegisteredLocales + 8);
  if (!v6)
    goto LABEL_11;
  v7 = siri::dialogengine::RegisterMorphunData(std::string const&)::sRegisteredLocales + 8;
  do
  {
    v8 = std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(v6 + 4, a1);
    v9 = v6 + 1;
    if (!v8)
    {
      v9 = v6;
      v7 = (uint64_t)v6;
    }
    v6 = (_QWORD *)*v9;
  }
  while (*v9);
  if (v7 == v5
    || std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(a1, (_QWORD *)(v7 + 32))
    || v5 == v7)
  {
LABEL_11:
    std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(v4, a1, (uint64_t)a1);
    siri::dialogengine::Context::Context((siri::dialogengine::Context *)v14);
    siri::dialogengine::RequestInfo::RequestInfo((siri::dialogengine::RequestInfo *)v12);
    std::string::operator=(v13, a1);
    siri::dialogengine::Context::SetRequestInfo((uint64_t)v14, (uint64_t)v12);
    siri::dialogengine::RegisterMorphunData((siri::dialogengine *)v14, v10);
    siri::dialogengine::RequestInfo::~RequestInfo(v12);
    siri::dialogengine::Context::~Context((siri::dialogengine::Context *)v14);
  }
  std::mutex::unlock(&siri::dialogengine::RegisterMorphunData(std::string const&)::m);
}

void sub_1BF915768(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(uint64_t **a1, _QWORD *a2, uint64_t a3)
{
  uint64_t *result;
  uint64_t **v6;
  uint64_t *v7;
  uint64_t v8;

  result = std::__tree<std::string>::__find_equal<std::string>((uint64_t)a1, &v8, a2);
  if (!*result)
  {
    v6 = (uint64_t **)result;
    std::__tree<std::string>::__construct_node<std::string const&>((uint64_t)&v7, (uint64_t)a1, a3);
    return std::__tree<std::string>::__insert_node_at(a1, v8, v6, v7);
  }
  return result;
}

_QWORD *std::__tree<std::string>::__find_equal<std::string>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v7;
  _QWORD *v8;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v7 = v4;
        v8 = v4 + 4;
        if (!std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(a3, v4 + 4))
          break;
        v4 = (_QWORD *)*v7;
        v5 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (!std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(v8, a3))
        break;
      v5 = v7 + 1;
      v4 = (_QWORD *)v7[1];
    }
    while (v4);
  }
  else
  {
    v7 = (_QWORD *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

void std::__tree<std::string>::__construct_node<std::string const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  char *v6;
  std::string *v7;

  v5 = a2 + 8;
  v6 = (char *)operator new(0x38uLL);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = 0;
  v7 = (std::string *)(v6 + 32);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    v7->__r_.__value_.__r.__words[2] = *(_QWORD *)(a3 + 16);
  }
  *(_BYTE *)(a1 + 16) = 1;
}

void sub_1BF915934(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::string,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void siri::dialogengine::PreloadMorphunData(const std::string *a1)
{
  std::string::size_type size;
  char v2;
  unint64_t v3;
  unsigned __int8 v4;
  _BYTE v5[128];
  void *v6[2];
  unsigned __int8 v7;
  std::string v8;

  siri::dialogengine::GetCanonicalLocale(a1, 0, &v8);
  size = HIBYTE(v8.__r_.__value_.__r.__words[2]);
  v2 = HIBYTE(v8.__r_.__value_.__r.__words[2]);
  if ((v8.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v8.__r_.__value_.__l.__size_;
  if (size)
  {
    siri::dialogengine::MorphunUpdaterTuriTrial::GetPath((uint64_t *)&v8, v6);
    v3 = v7;
    v4 = v7;
    if ((v7 & 0x80u) != 0)
      v3 = (unint64_t)v6[1];
    if (v3)
    {
      morphun::util::ULocale::ULocale();
      morphun::resources::DataRegistrationService::registerDataPathForLocale();
      morphun::util::ULocale::~ULocale((morphun::util::ULocale *)v5);
      v4 = v7;
    }
    if ((v4 & 0x80) != 0)
      operator delete(v6[0]);
    v2 = HIBYTE(v8.__r_.__value_.__r.__words[2]);
  }
  if (v2 < 0)
    operator delete(v8.__r_.__value_.__l.__data_);
}

void sub_1BF915A4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  uint64_t v28;

  morphun::util::ULocale::~ULocale((morphun::util::ULocale *)&a28);
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  if (*(char *)(v28 - 41) < 0)
    operator delete(*(void **)(v28 - 64));
  if (*(char *)(v28 - 17) < 0)
    operator delete(*(void **)(v28 - 40));
  _Unwind_Resume(a1);
}

void InitDefaultsscc_info_CustomElement_CustomElement_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/CustomElement.pb.cc", a4);
  SnippetUI::CustomElement::CustomElement((SnippetUI::CustomElement *)&SnippetUI::_CustomElement_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_CustomElement_default_instance_, v4);
  qword_1ED1D50D0 = (uint64_t)&SnippetUI::_CustomCanvas_default_instance_;
}

SnippetUI::CustomElement *SnippetUI::CustomElement::CustomElement(SnippetUI::CustomElement *this)
{
  *(_QWORD *)this = &off_1E792D4F0;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 12) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  if (atomic_load(scc_info_CustomElement_CustomElement_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_CustomElement_CustomElement_2eproto);
  *((_QWORD *)this + 5) = 0;
  return this;
}

void sub_1BF915B88(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t *v2;

  google::protobuf::RepeatedField<int>::~RepeatedField(v1 + 16);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v2);
  _Unwind_Resume(a1);
}

void SnippetUI::CustomElement::~CustomElement(SnippetUI::CustomElement *this)
{
  SnippetUI::CustomElement::~CustomElement(this);
  JUMPOUT(0x1C3B8D890);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_1E792D4F0;
  if (this != (SnippetUI::CustomElement *)&SnippetUI::_CustomElement_default_instance_)
  {
    v2 = *((_QWORD *)this + 5);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  google::protobuf::RepeatedField<int>::~RepeatedField((char *)this + 16);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

SnippetUI::CustomElement *SnippetUI::CustomElement::New(SnippetUI::CustomElement *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::CustomElement>(0);
}

SnippetUI::CustomElement *SnippetUI::CustomElement::New(SnippetUI::CustomElement *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::CustomElement>(a2);
}

void SnippetUI::CustomElement::Clear(SnippetUI::CustomElement *this)
{
  uint64_t v2;
  google::protobuf::internal::InternalMetadataWithArena *v3;
  char v4;

  *((_DWORD *)this + 4) = 0;
  v2 = *((_QWORD *)this + 5);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v4 = *((_BYTE *)this + 8);
  v3 = (SnippetUI::CustomElement *)((char *)this + 8);
  *((_QWORD *)v3 + 4) = 0;
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v3);
}

uint64_t SnippetUI::CustomElement::IsInitialized(SnippetUI::CustomElement *this)
{
  return 1;
}

char *SnippetUI::CustomElement::ByteSizeLong(SnippetUI::CustomElement *this)
{
  _DWORD *v2;
  int v3;
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  const google::protobuf::UnknownFieldSet *v10;
  SnippetUI::CustomCanvas *v11;
  char *v12;

  v2 = (_DWORD *)((char *)this + 16);
  v3 = *((_DWORD *)this + 4);
  if (!v3)
  {
    v5 = 0;
LABEL_11:
    v9 = 0;
    v8 = 0;
    goto LABEL_14;
  }
  v4 = 0;
  v5 = 0;
  do
  {
    v6 = *(_DWORD *)google::protobuf::RepeatedField<int>::Get(v2, v4);
    if (v6 < 0)
      v7 = 10;
    else
      v7 = (9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6;
    v5 += v7;
    ++v4;
  }
  while (v3 != v4);
  if (!v5)
    goto LABEL_11;
  if ((v5 & 0x80000000) != 0)
    v8 = 11;
  else
    v8 = ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6) + 1;
  v9 = v5;
LABEL_14:
  *((_DWORD *)this + 8) = v9;
  v10 = (const google::protobuf::UnknownFieldSet *)(v8 + v5);
  if (this != (SnippetUI::CustomElement *)&SnippetUI::_CustomElement_default_instance_)
  {
    v11 = (SnippetUI::CustomCanvas *)*((_QWORD *)this + 5);
    if (v11)
    {
      v12 = SnippetUI::CustomCanvas::ByteSizeLong(v11);
      v10 = (const google::protobuf::UnknownFieldSet *)&v12[(_QWORD)v10
                                                          + 1
                                                          + ((9 * (__clz(v12 | 1) ^ 0x1F) + 73) >> 6)];
    }
  }
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::CustomElement *)((char *)this + 8), v10, (_DWORD *)this + 12);
  *((_DWORD *)this + 12) = (_DWORD)v10;
  return (char *)v10;
}

uint64_t SnippetUI::CustomElement::GetCachedSize(SnippetUI::CustomElement *this)
{
  return *((unsigned int *)this + 12);
}

google::protobuf::internal *SnippetUI::CustomElement::_InternalParse(SnippetUI::CustomElement *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  google::protobuf::internal *v5;
  uint64_t *v6;
  google::protobuf::internal::ParseContext *v7;
  google::protobuf::internal::ParseContext *v8;
  google::protobuf::internal *TagFallback;
  char *v10;
  BOOL v12;
  char *v13;
  SnippetUI::CustomCanvas *v14;
  int v15;
  google::protobuf::internal *v17;

  v17 = a2;
  v5 = (SnippetUI::CustomElement *)((char *)this + 16);
  v6 = (uint64_t *)((char *)this + 8);
  while (1)
  {
    while (1)
    {
      if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v17, *((_DWORD *)a3 + 23)) & 1) != 0)
        return v17;
      TagFallback = (google::protobuf::internal *)((char *)v17 + 1);
      v10 = (char *)*(unsigned __int8 *)v17;
      if ((*(char *)v17 & 0x80000000) == 0)
        goto LABEL_6;
      v10 = (char *)(v10 + (*(unsigned __int8 *)TagFallback << 7) - 128);
      if ((*(char *)TagFallback & 0x80000000) == 0)
      {
        TagFallback = (google::protobuf::internal *)((char *)v17 + 2);
LABEL_6:
        v17 = TagFallback;
        goto LABEL_7;
      }
      TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v17, v10);
      v17 = TagFallback;
      if (!TagFallback)
        return TagFallback;
LABEL_7:
      if (v10 >> 3 == 2)
        break;
      if (v10 >> 3 != 1 || v10 != 10)
      {
LABEL_12:
        if ((_DWORD)v10)
          v12 = (v10 & 7) == 4;
        else
          v12 = 1;
        if (v12)
        {
          *((_DWORD *)a3 + 20) = (_DWORD)v10 - 1;
          return TagFallback;
        }
        v13 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v10, v6, TagFallback, a3, v8);
        goto LABEL_22;
      }
      v14 = (SnippetUI::CustomCanvas *)*((_QWORD *)this + 5);
      if (!v14)
      {
        v14 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::CustomCanvas>(0);
        *((_QWORD *)this + 5) = v14;
        TagFallback = v17;
      }
      v13 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::CustomCanvas>(a3, v14, TagFallback);
LABEL_22:
      v17 = (google::protobuf::internal *)v13;
      if (!v13)
        return 0;
    }
    if (v10 == 18)
    {
      v13 = google::protobuf::internal::PackedInt32Parser(v5, TagFallback, a3, v7);
      goto LABEL_22;
    }
    if (v10 != 16)
      goto LABEL_12;
    v15 = google::protobuf::internal::ReadVarint(&v17, (const char **)v10);
    if (!v17)
      return 0;
    SnippetUI::ColorElement::_internal_add_idioms((uint64_t)this, v15);
  }
}

const google::protobuf::UnknownFieldSet *SnippetUI::CustomElement::InternalSerializeWithCachedSizesToArray(SnippetUI::CustomElement *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  char *v5;
  SnippetUI::CustomCanvas *v7;
  unsigned int v8;
  char *v9;
  unsigned int v10;
  _BYTE *v11;
  _BYTE *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unint64_t v16;
  std::string *v17;
  _BYTE *v18;
  int *v19;
  int *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _BYTE *v24;
  _BYTE *v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unsigned int v30;
  char v31;
  std::string v32[2];

  v5 = (char *)a2;
  if (this != (SnippetUI::CustomElement *)&SnippetUI::_CustomElement_default_instance_)
  {
    v7 = (SnippetUI::CustomCanvas *)*((_QWORD *)this + 5);
    if (v7)
    {
      if (*(_QWORD *)a3 <= (unint64_t)a2)
      {
        v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
        v7 = (SnippetUI::CustomCanvas *)*((_QWORD *)this + 5);
      }
      *v5 = 10;
      v8 = *((_DWORD *)v7 + 13);
      if (v8 > 0x7F)
      {
        v5[1] = v8 | 0x80;
        v10 = v8 >> 7;
        if (v8 >> 14)
        {
          v11 = v5 + 2;
          do
          {
            v12 = v11;
            *v11++ = v10 | 0x80;
            v13 = v10 >> 7;
            v14 = v10 >> 14;
            v10 >>= 7;
          }
          while (v14);
          v9 = v12 + 2;
          *v11 = v13;
        }
        else
        {
          v5[2] = v10;
          v9 = v5 + 3;
        }
      }
      else
      {
        v5[1] = v8;
        v9 = v5 + 2;
      }
      v5 = (char *)SnippetUI::CustomCanvas::InternalSerializeWithCachedSizesToArray(v7, v9, a3, a4);
    }
  }
  v15 = *((_DWORD *)this + 8);
  if ((int)v15 >= 1)
  {
    v16 = *(_QWORD *)a3;
    if ((unint64_t)v5 >= *(_QWORD *)a3)
    {
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
      v16 = *(_QWORD *)a3;
    }
    if (v16 <= (unint64_t)v5)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v32, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/io/coded_stream.h", 856);
      v17 = google::protobuf::internal::LogMessage::operator<<(v32, "CHECK failed: ptr < end_: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v31, (const char **)&v17->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v32[0].__r_.__value_.__l.__data_);
    }
    *v5 = 18;
    v18 = v5 + 1;
    if (v15 >= 0x80)
    {
      do
      {
        *v18++ = v15 | 0x80;
        v30 = v15 >> 14;
        v15 >>= 7;
      }
      while (v30);
      v5 = v18 - 1;
    }
    v5 += 2;
    *v18 = v15;
    v19 = (int *)*((_QWORD *)this + 3);
    v20 = &v19[*((int *)this + 4)];
    do
    {
      if ((unint64_t)v5 >= *(_QWORD *)a3)
        v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
      v22 = *v19++;
      v21 = v22;
      if (v22 > 0x7F)
      {
        *v5 = v21 | 0x80;
        v23 = v21 >> 7;
        if (v21 >> 14)
        {
          v24 = v5 + 1;
          do
          {
            v25 = v24;
            *v24++ = v23 | 0x80;
            v26 = v23 >> 7;
            v27 = v23 >> 14;
            v23 >>= 7;
          }
          while (v27);
          v5 = v25 + 2;
          *v24 = v26;
        }
        else
        {
          v5[1] = v23;
          v5 += 2;
        }
      }
      else
      {
        *v5++ = v21;
      }
    }
    while (v19 < v20);
  }
  v28 = *((_QWORD *)this + 1);
  if ((v28 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v28 & 0xFFFFFFFFFFFFFFFELL), (const google::protobuf::UnknownFieldSet *)v5, a3, a4);
  return (const google::protobuf::UnknownFieldSet *)v5;
}

void sub_1BF916134(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void SnippetUI::CustomElement::CopyFrom(SnippetUI::CustomElement *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    SnippetUI::CustomElement::Clear(this);
    SnippetUI::CustomElement::MergeFrom(this, a2);
  }
}

void SnippetUI::CustomElement::MergeFrom(SnippetUI::CustomElement *this, const google::protobuf::Message *lpsrc)
{
  std::string *v4;
  const SnippetUI::CustomElement *v5;
  google::protobuf::Message *v6;
  char v7;
  std::string v8[2];

  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/CustomElement.pb.cc", 283);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5)
    SnippetUI::CustomElement::MergeFrom(this, v5);
  else
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
}

void sub_1BF91622C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::CustomElement::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 48) = a2;
  return this;
}

uint64_t SnippetUI::CustomElement::GetMetadata(SnippetUI::CustomElement *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_CustomElement_2eproto);
  return file_level_metadata_CustomElement_2eproto;
}

void *SnippetUI::CustomElement::default_instance(SnippetUI::CustomElement *this)
{
  if (atomic_load(scc_info_CustomElement_CustomElement_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_CustomElement_CustomElement_2eproto);
  return &SnippetUI::_CustomElement_default_instance_;
}

void SnippetUI::CustomElement::MergeFrom(SnippetUI::CustomElement *this, const SnippetUI::CustomElement *a2)
{
  std::string *v4;
  uint64_t v5;
  const SnippetUI::CustomCanvas *v6;
  SnippetUI::CustomCanvas *v7;
  const SnippetUI::CustomCanvas *v8;
  char v9;
  std::string v10[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/CustomElement.pb.cc", 298);
    v4 = google::protobuf::internal::LogMessage::operator<<(v10, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v9, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v10[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::CustomElement *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  google::protobuf::RepeatedField<int>::MergeFrom((int *)this + 4, (int *)a2 + 4);
  if (a2 != (const SnippetUI::CustomElement *)&SnippetUI::_CustomElement_default_instance_)
  {
    v6 = (const SnippetUI::CustomCanvas *)*((_QWORD *)a2 + 5);
    if (v6)
    {
      v7 = (SnippetUI::CustomCanvas *)*((_QWORD *)this + 5);
      if (!v7)
      {
        v7 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::CustomCanvas>(0);
        *((_QWORD *)this + 5) = v7;
        v6 = (const SnippetUI::CustomCanvas *)*((_QWORD *)a2 + 5);
      }
      if (v6)
        v8 = v6;
      else
        v8 = (const SnippetUI::CustomCanvas *)&SnippetUI::_CustomCanvas_default_instance_;
      SnippetUI::CustomCanvas::MergeFrom(v7, v8);
    }
  }
}

void sub_1BF916378(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

char *google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::CustomCanvas>(google::protobuf::internal::EpsCopyInputStream *this, SnippetUI::CustomCanvas *a2, google::protobuf::internal *a3)
{
  int v6;
  const char *v7;
  char *v8;
  char *result;
  int v10;
  int v11;
  int v12;
  BOOL v13;
  int v14;
  int v15;

  v6 = *(char *)a3;
  v7 = (const char *)*(unsigned __int8 *)a3;
  if (v6 < 0)
  {
    result = google::protobuf::internal::ReadSizeFallback(a3, v7);
    if (!result)
      return result;
    v8 = result;
    LODWORD(v7) = v10;
  }
  else
  {
    v8 = (char *)a3 + 1;
  }
  v11 = google::protobuf::internal::EpsCopyInputStream::PushLimit(this, v8, v7);
  v12 = *((_DWORD *)this + 22);
  v13 = __OFSUB__(v12--, 1);
  *((_DWORD *)this + 22) = v12;
  if (v12 < 0 != v13)
    return 0;
  v14 = v11;
  result = (char *)SnippetUI::CustomCanvas::_InternalParse(a2, (google::protobuf::internal *)v8, this);
  if (!result)
    return result;
  ++*((_DWORD *)this + 22);
  if (*((_DWORD *)this + 20))
    return 0;
  v15 = *((_DWORD *)this + 7) + v14;
  *((_DWORD *)this + 7) = v15;
  *(_QWORD *)this = *((_QWORD *)this + 1) + (v15 & (v15 >> 31));
  return result;
}

SnippetUI::CustomElement *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::CustomElement>(google::protobuf::internal::ArenaImpl *this)
{
  SnippetUI::CustomElement *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (SnippetUI::CustomElement *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x38uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::CustomElement>);
    SnippetUI::CustomElement::CustomElement(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (SnippetUI::CustomElement *)operator new();
    SnippetUI::CustomElement::CustomElement(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_1BF9164D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D890](v1, 0x10A1C407499B434);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::CustomElement>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

void SnippetUI::CustomElement::InitAsDefaultInstance(SnippetUI::CustomElement *this)
{
  qword_1ED1D50D0 = (uint64_t)&SnippetUI::_CustomCanvas_default_instance_;
}

uint64_t SnippetUI::CustomElement::_Internal::canvas(SnippetUI::CustomElement::_Internal *this, const SnippetUI::CustomElement *a2)
{
  return *((_QWORD *)this + 5);
}

uint64_t SnippetUI::CustomElement::clear_canvas(SnippetUI::CustomElement *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 5);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 5) = 0;
  return result;
}

SnippetUI::CustomElement *SnippetUI::CustomElement::CustomElement(SnippetUI::CustomElement *this, const SnippetUI::CustomElement *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  uint64_t v5;
  SnippetUI::CustomCanvas *v6;

  *(_QWORD *)this = &off_1E792D4F0;
  *((_QWORD *)this + 1) = 0;
  v4 = (SnippetUI::CustomElement *)((char *)this + 8);
  google::protobuf::RepeatedField<int>::RepeatedField((uint64_t)this + 16, (int *)a2 + 4);
  *((_DWORD *)this + 12) = 0;
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom(v4, (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  v6 = 0;
  if (a2 != (const SnippetUI::CustomElement *)&SnippetUI::_CustomElement_default_instance_ && *((_QWORD *)a2 + 5))
  {
    v6 = (SnippetUI::CustomCanvas *)operator new();
    SnippetUI::CustomCanvas::CustomCanvas(v6, *((const SnippetUI::CustomCanvas **)a2 + 5));
  }
  *((_QWORD *)this + 5) = v6;
  return this;
}

void sub_1BF916670(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  MEMORY[0x1C3B8D890](v3, 0x10A1C404D509FBCLL);
  google::protobuf::RepeatedField<int>::~RepeatedField(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::CustomElement::CopyFrom(SnippetUI::CustomElement *this, const SnippetUI::CustomElement *a2)
{
  if (a2 != this)
  {
    SnippetUI::CustomElement::Clear(this);
    SnippetUI::CustomElement::MergeFrom(this, a2);
  }
}

void SnippetUI::CustomElement::InternalSwap(SnippetUI::CustomElement *this, SnippetUI::CustomElement *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  uint64_t v5;
  google::protobuf::UnknownFieldSet *v6;
  uint64_t v7;
  google::protobuf::UnknownFieldSet *v8;

  v4 = (SnippetUI::CustomElement *)((char *)this + 8);
  v5 = *((_QWORD *)a2 + 1);
  if ((*((_BYTE *)this + 8) & 1) != 0)
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v6 = v8;
      goto LABEL_6;
    }
  }
  else if ((v5 & 1) == 0)
  {
    goto LABEL_7;
  }
  v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
  google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
LABEL_7:
  google::protobuf::RepeatedField<int>::InternalSwap((uint64_t)this + 16, (uint64_t)a2 + 16);
  v7 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v7;
}

void InitDefaultsscc_info_PrimaryHeader_Marquee_PrimaryHeader_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/PrimaryHeader.pb.cc", a4);
  SnippetUI::PrimaryHeader_Marquee::PrimaryHeader_Marquee((SnippetUI::PrimaryHeader_Marquee *)&SnippetUI::_PrimaryHeader_Marquee_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_PrimaryHeader_Marquee_default_instance_, v4);
  qword_1ED1D55E0 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1ED1D55E8 = &SnippetUI::_TextProperty_default_instance_;
  qword_1ED1D55F0 = (uint64_t)&SnippetUI::_ActionProperty_default_instance_;
  unk_1ED1D55F8 = &SnippetUI::_VisualProperty_default_instance_;
}

SnippetUI::PrimaryHeader_Marquee *SnippetUI::PrimaryHeader_Marquee::PrimaryHeader_Marquee(SnippetUI::PrimaryHeader_Marquee *this)
{
  *(_QWORD *)this = &off_1E792D6D0;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 14) = 0;
  if (atomic_load(scc_info_PrimaryHeader_Marquee_PrimaryHeader_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_PrimaryHeader_Marquee_PrimaryHeader_2eproto);
  *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return this;
}

void sub_1BF916850(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::PrimaryHeader_Marquee::~PrimaryHeader_Marquee(SnippetUI::PrimaryHeader_Marquee *this)
{
  SnippetUI::PrimaryHeader_Marquee::~PrimaryHeader_Marquee(this);
  JUMPOUT(0x1C3B8D890);
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)this = &off_1E792D6D0;
  v2 = *((_QWORD *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x1C3B8D890](v2, 0x1012C40EC159624);
  }
  if (this != (SnippetUI::PrimaryHeader_Marquee *)&SnippetUI::_PrimaryHeader_Marquee_default_instance_)
  {
    v4 = *((_QWORD *)this + 3);
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    v5 = *((_QWORD *)this + 4);
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    v6 = *((_QWORD *)this + 5);
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    v7 = *((_QWORD *)this + 6);
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

SnippetUI::PrimaryHeader_Marquee *SnippetUI::PrimaryHeader_Marquee::New(SnippetUI::PrimaryHeader_Marquee *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::PrimaryHeader_Marquee>(0);
}

SnippetUI::PrimaryHeader_Marquee *SnippetUI::PrimaryHeader_Marquee::New(SnippetUI::PrimaryHeader_Marquee *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::PrimaryHeader_Marquee>(a2);
}

void SnippetUI::PrimaryHeader_Marquee::Clear(SnippetUI::PrimaryHeader_Marquee *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  google::protobuf::internal::InternalMetadataWithArena *v7;
  char v8;

  v2 = *((_QWORD *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(_BYTE **)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v2 = 0;
      *(_BYTE *)(v2 + 23) = 0;
    }
  }
  v3 = *((_QWORD *)this + 3);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *((_QWORD *)this + 3) = 0;
  v4 = *((_QWORD *)this + 4);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  *((_QWORD *)this + 4) = 0;
  v5 = *((_QWORD *)this + 5);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *((_QWORD *)this + 5) = 0;
  v6 = *((_QWORD *)this + 6);
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v8 = *((_BYTE *)this + 8);
  v7 = (SnippetUI::PrimaryHeader_Marquee *)((char *)this + 8);
  *((_QWORD *)v7 + 5) = 0;
  if ((v8 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v7);
}

uint64_t SnippetUI::PrimaryHeader_Marquee::IsInitialized(SnippetUI::PrimaryHeader_Marquee *this)
{
  return 1;
}

char *SnippetUI::PrimaryHeader_Marquee::ByteSizeLong(SnippetUI::PrimaryHeader_Marquee *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  const google::protobuf::UnknownFieldSet *v5;
  SnippetUI::TextProperty *v6;
  char *v7;
  SnippetUI::TextProperty *v8;
  char *v9;
  SnippetUI::ActionProperty *v10;
  char *v11;
  SnippetUI::VisualProperty *v12;
  char *v13;

  v2 = *((_QWORD *)this + 2);
  v3 = *(unsigned __int8 *)(v2 + 23);
  if (*(char *)(v2 + 23) < 0)
  {
    if (*(_QWORD *)(v2 + 8))
      goto LABEL_3;
LABEL_7:
    v5 = 0;
    goto LABEL_8;
  }
  if (!*(_BYTE *)(v2 + 23))
    goto LABEL_7;
LABEL_3:
  v4 = *(_QWORD *)(v2 + 8);
  if ((v3 & 0x80u) == 0)
    v4 = v3;
  v5 = (const google::protobuf::UnknownFieldSet *)(v4 + ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_8:
  if (this != (SnippetUI::PrimaryHeader_Marquee *)&SnippetUI::_PrimaryHeader_Marquee_default_instance_)
  {
    v6 = (SnippetUI::TextProperty *)*((_QWORD *)this + 3);
    if (v6)
    {
      v7 = SnippetUI::TextProperty::ByteSizeLong(v6);
      v5 = (const google::protobuf::UnknownFieldSet *)&v7[(_QWORD)v5
                                                        + 1
                                                        + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v8 = (SnippetUI::TextProperty *)*((_QWORD *)this + 4);
    if (v8)
    {
      v9 = SnippetUI::TextProperty::ByteSizeLong(v8);
      v5 = (const google::protobuf::UnknownFieldSet *)&v9[(_QWORD)v5
                                                        + 1
                                                        + ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v10 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 5);
    if (v10)
    {
      v11 = SnippetUI::ActionProperty::ByteSizeLong(v10);
      v5 = (const google::protobuf::UnknownFieldSet *)&v11[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v12 = (SnippetUI::VisualProperty *)*((_QWORD *)this + 6);
    if (v12)
    {
      v13 = SnippetUI::VisualProperty::ByteSizeLong(v12);
      v5 = (const google::protobuf::UnknownFieldSet *)&v13[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v13 | 1) ^ 0x1F) + 73) >> 6)];
    }
  }
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::PrimaryHeader_Marquee *)((char *)this + 8), v5, (_DWORD *)this + 14);
  *((_DWORD *)this + 14) = (_DWORD)v5;
  return (char *)v5;
}

uint64_t SnippetUI::PrimaryHeader_Marquee::GetCachedSize(SnippetUI::PrimaryHeader_Marquee *this)
{
  return *((unsigned int *)this + 14);
}

google::protobuf::internal *SnippetUI::PrimaryHeader_Marquee::_InternalParse(SnippetUI::PrimaryHeader_Marquee *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  std::string **v5;
  uint64_t *v6;
  google::protobuf::internal::ParseContext *v7;
  google::protobuf::internal *TagFallback;
  char *v9;
  SnippetUI::TextProperty *v10;
  char *v11;
  SnippetUI::ActionProperty *v12;
  std::string *v13;
  SnippetUI::VisualProperty *v14;
  BOOL v15;
  google::protobuf::internal *v17;

  v17 = a2;
  v5 = (std::string **)((char *)this + 16);
  v6 = (uint64_t *)((char *)this + 8);
  while (2)
  {
    if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v17, *((_DWORD *)a3 + 23)) & 1) != 0)
      return v17;
    TagFallback = (google::protobuf::internal *)((char *)v17 + 1);
    v9 = (char *)*(unsigned __int8 *)v17;
    if ((*(char *)v17 & 0x80000000) == 0)
      goto LABEL_6;
    v9 = (char *)(v9 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v17 + 2);
LABEL_6:
      v17 = TagFallback;
      goto LABEL_7;
    }
    TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v17, v9);
    v17 = TagFallback;
    if (!TagFallback)
      return TagFallback;
LABEL_7:
    switch(v9 >> 3)
    {
      case 1u:
        if (v9 != 10)
          goto LABEL_28;
        v10 = (SnippetUI::TextProperty *)*((_QWORD *)this + 3);
        if (v10)
          goto LABEL_15;
        v10 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 3) = v10;
        goto LABEL_14;
      case 2u:
        if (v9 != 18)
          goto LABEL_28;
        v10 = (SnippetUI::TextProperty *)*((_QWORD *)this + 4);
        if (!v10)
        {
          v10 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
          *((_QWORD *)this + 4) = v10;
LABEL_14:
          TagFallback = v17;
        }
LABEL_15:
        v11 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::TextProperty>(a3, v10, TagFallback);
        goto LABEL_33;
      case 3u:
        if (v9 != 26)
          goto LABEL_28;
        v12 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 5);
        if (!v12)
        {
          v12 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
          *((_QWORD *)this + 5) = v12;
          TagFallback = v17;
        }
        v11 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::ActionProperty>(a3, v12, TagFallback);
        goto LABEL_33;
      case 4u:
        if (v9 != 34)
          goto LABEL_28;
        v13 = *v5;
        if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v13 = *v5;
          TagFallback = v17;
        }
        v11 = google::protobuf::internal::InlineGreedyStringParserUTF8(v13, (std::string::value_type *)TagFallback, (uint64_t)a3, (google::protobuf::internal *)"SnippetUI.PrimaryHeader_Marquee.component_name");
        goto LABEL_33;
      case 5u:
        if (v9 != 42)
          goto LABEL_28;
        v14 = (SnippetUI::VisualProperty *)*((_QWORD *)this + 6);
        if (!v14)
        {
          v14 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::VisualProperty>(0);
          *((_QWORD *)this + 6) = v14;
          TagFallback = v17;
        }
        v11 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::VisualProperty>(a3, v14, TagFallback);
        goto LABEL_33;
      default:
LABEL_28:
        if ((_DWORD)v9)
          v15 = (v9 & 7) == 4;
        else
          v15 = 1;
        if (v15)
        {
          *((_DWORD *)a3 + 20) = (_DWORD)v9 - 1;
          return TagFallback;
        }
        v11 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v9, v6, TagFallback, a3, v7);
LABEL_33:
        v17 = (google::protobuf::internal *)v11;
        if (v11)
          continue;
        TagFallback = 0;
        break;
    }
    return TagFallback;
  }
}

const google::protobuf::UnknownFieldSet *SnippetUI::PrimaryHeader_Marquee::InternalSerializeWithCachedSizesToArray(SnippetUI::PrimaryHeader_Marquee *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  char *v5;
  SnippetUI::TextProperty *v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  google::protobuf::UnknownFieldSet *v11;
  _BYTE *v12;
  _BYTE *v13;
  unsigned int v14;
  unsigned int v15;
  SnippetUI::TextProperty *v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  google::protobuf::UnknownFieldSet *v20;
  _BYTE *v21;
  _BYTE *v22;
  unsigned int v23;
  unsigned int v24;
  SnippetUI::ActionProperty *v25;
  unsigned int v26;
  google::protobuf::UnknownFieldSet *v27;
  unsigned int v28;
  _BYTE *v29;
  _BYTE *v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t *v33;
  const char *v34;
  SnippetUI::VisualProperty *v35;
  unsigned int v36;
  google::protobuf::UnknownFieldSet *v37;
  unsigned int v38;
  _BYTE *v39;
  _BYTE *v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;

  v5 = (char *)a2;
  if (this == (SnippetUI::PrimaryHeader_Marquee *)&SnippetUI::_PrimaryHeader_Marquee_default_instance_)
    goto LABEL_37;
  v7 = (SnippetUI::TextProperty *)*((_QWORD *)this + 3);
  if (v7)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
    {
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      v7 = (SnippetUI::TextProperty *)*((_QWORD *)this + 3);
    }
    *v5 = 10;
    v8 = *((_DWORD *)v7 + 15);
    if (v8 > 0x7F)
    {
      v5[1] = v8 | 0x80;
      v10 = v8 >> 7;
      if (v8 >> 14)
      {
        v12 = v5 + 2;
        do
        {
          v13 = v12;
          *v12++ = v10 | 0x80;
          v14 = v10 >> 7;
          v15 = v10 >> 14;
          v10 >>= 7;
        }
        while (v15);
        v11 = (google::protobuf::UnknownFieldSet *)(v13 + 2);
        *v12 = v14;
        goto LABEL_13;
      }
      v5[2] = v10;
      v9 = 3;
    }
    else
    {
      v5[1] = v8;
      v9 = 2;
    }
    v11 = (google::protobuf::UnknownFieldSet *)&v5[v9];
LABEL_13:
    v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v7, v11, a3, a4);
  }
  v16 = (SnippetUI::TextProperty *)*((_QWORD *)this + 4);
  if (!v16)
    goto LABEL_26;
  if ((unint64_t)v5 >= *(_QWORD *)a3)
  {
    v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v16 = (SnippetUI::TextProperty *)*((_QWORD *)this + 4);
  }
  *v5 = 18;
  v17 = *((_DWORD *)v16 + 15);
  if (v17 > 0x7F)
  {
    v5[1] = v17 | 0x80;
    v19 = v17 >> 7;
    if (v17 >> 14)
    {
      v21 = v5 + 2;
      do
      {
        v22 = v21;
        *v21++ = v19 | 0x80;
        v23 = v19 >> 7;
        v24 = v19 >> 14;
        v19 >>= 7;
      }
      while (v24);
      v20 = (google::protobuf::UnknownFieldSet *)(v22 + 2);
      *v21 = v23;
      goto LABEL_25;
    }
    v5[2] = v19;
    v18 = 3;
  }
  else
  {
    v5[1] = v17;
    v18 = 2;
  }
  v20 = (google::protobuf::UnknownFieldSet *)&v5[v18];
LABEL_25:
  v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v16, v20, a3, a4);
LABEL_26:
  v25 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 5);
  if (v25)
  {
    if ((unint64_t)v5 >= *(_QWORD *)a3)
    {
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
      v25 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 5);
    }
    *v5 = 26;
    v26 = *((_DWORD *)v25 + 12);
    if (v26 > 0x7F)
    {
      v5[1] = v26 | 0x80;
      v28 = v26 >> 7;
      if (v26 >> 14)
      {
        v29 = v5 + 2;
        do
        {
          v30 = v29;
          *v29++ = v28 | 0x80;
          v31 = v28 >> 7;
          v32 = v28 >> 14;
          v28 >>= 7;
        }
        while (v32);
        v27 = (google::protobuf::UnknownFieldSet *)(v30 + 2);
        *v29 = v31;
      }
      else
      {
        v5[2] = v28;
        v27 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
      }
    }
    else
    {
      v5[1] = v26;
      v27 = (google::protobuf::UnknownFieldSet *)(v5 + 2);
    }
    v5 = (char *)SnippetUI::ActionProperty::InternalSerializeWithCachedSizesToArray(v25, v27, a3, a4);
  }
LABEL_37:
  v33 = (uint64_t *)*((_QWORD *)this + 2);
  if ((*((char *)v33 + 23) & 0x80000000) == 0)
  {
    v34 = (const char *)*((unsigned __int8 *)v33 + 23);
    if (!*((_BYTE *)v33 + 23))
      goto LABEL_43;
    goto LABEL_42;
  }
  v34 = (const char *)v33[1];
  if (v34)
  {
    v33 = (uint64_t *)*v33;
LABEL_42:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String((google::protobuf::internal *)v33, v34, 1, (google::protobuf::internal *)"SnippetUI.PrimaryHeader_Marquee.component_name");
    v5 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 4, *((_QWORD *)this + 2), v5);
  }
LABEL_43:
  if (this != (SnippetUI::PrimaryHeader_Marquee *)&SnippetUI::_PrimaryHeader_Marquee_default_instance_)
  {
    v35 = (SnippetUI::VisualProperty *)*((_QWORD *)this + 6);
    if (v35)
    {
      if ((unint64_t)v5 >= *(_QWORD *)a3)
      {
        v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
        v35 = (SnippetUI::VisualProperty *)*((_QWORD *)this + 6);
      }
      *v5 = 42;
      v36 = *((_DWORD *)v35 + 15);
      if (v36 > 0x7F)
      {
        v5[1] = v36 | 0x80;
        v38 = v36 >> 7;
        if (v36 >> 14)
        {
          v39 = v5 + 2;
          do
          {
            v40 = v39;
            *v39++ = v38 | 0x80;
            v41 = v38 >> 7;
            v42 = v38 >> 14;
            v38 >>= 7;
          }
          while (v42);
          v37 = (google::protobuf::UnknownFieldSet *)(v40 + 2);
          *v39 = v41;
        }
        else
        {
          v5[2] = v38;
          v37 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
        }
      }
      else
      {
        v5[1] = v36;
        v37 = (google::protobuf::UnknownFieldSet *)(v5 + 2);
      }
      v5 = (char *)SnippetUI::VisualProperty::InternalSerializeWithCachedSizesToArray(v35, v37, a3, a4);
    }
  }
  v43 = *((_QWORD *)this + 1);
  if ((v43 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v43 & 0xFFFFFFFFFFFFFFFELL), (const google::protobuf::UnknownFieldSet *)v5, a3, a4);
  else
    return (const google::protobuf::UnknownFieldSet *)v5;
}

void SnippetUI::PrimaryHeader_Marquee::CopyFrom(SnippetUI::PrimaryHeader_Marquee *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    SnippetUI::PrimaryHeader_Marquee::Clear(this);
    SnippetUI::PrimaryHeader_Marquee::MergeFrom(this, a2);
  }
}

void SnippetUI::PrimaryHeader_Marquee::MergeFrom(SnippetUI::PrimaryHeader_Marquee *this, const google::protobuf::Message *lpsrc)
{
  std::string *v4;
  const SnippetUI::PrimaryHeader_Marquee *v5;
  google::protobuf::Message *v6;
  char v7;
  std::string v8[2];

  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/PrimaryHeader.pb.cc", 903);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5)
    SnippetUI::PrimaryHeader_Marquee::MergeFrom(this, v5);
  else
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
}

void sub_1BF91712C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::PrimaryHeader_Marquee::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 56) = a2;
  return this;
}

uint64_t SnippetUI::PrimaryHeader_Marquee::GetMetadata(SnippetUI::PrimaryHeader_Marquee *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_PrimaryHeader_2eproto);
  return qword_1EF5818F8;
}

void InitDefaultsscc_info_PrimaryHeader_Standard_PrimaryHeader_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/PrimaryHeader.pb.cc", a4);
  SnippetUI::PrimaryHeader_Standard::PrimaryHeader_Standard((SnippetUI::PrimaryHeader_Standard *)&SnippetUI::_PrimaryHeader_Standard_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_PrimaryHeader_Standard_default_instance_, v4);
  qword_1ED1D5668 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1ED1D5670 = &SnippetUI::_TextProperty_default_instance_;
  qword_1ED1D5678 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1ED1D5680 = &SnippetUI::_ActionProperty_default_instance_;
}

SnippetUI::PrimaryHeader_Standard *SnippetUI::PrimaryHeader_Standard::PrimaryHeader_Standard(SnippetUI::PrimaryHeader_Standard *this)
{
  *(_QWORD *)this = &off_1E792D610;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 14) = 0;
  if (atomic_load(scc_info_PrimaryHeader_Standard_PrimaryHeader_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_PrimaryHeader_Standard_PrimaryHeader_2eproto);
  *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return this;
}

void sub_1BF917250(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::PrimaryHeader_Standard::~PrimaryHeader_Standard(SnippetUI::PrimaryHeader_Standard *this)
{
  SnippetUI::PrimaryHeader_Standard::~PrimaryHeader_Standard(this);
  JUMPOUT(0x1C3B8D890);
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)this = &off_1E792D610;
  v2 = *((_QWORD *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x1C3B8D890](v2, 0x1012C40EC159624);
  }
  if (this != (SnippetUI::PrimaryHeader_Standard *)&SnippetUI::_PrimaryHeader_Standard_default_instance_)
  {
    v4 = *((_QWORD *)this + 3);
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    v5 = *((_QWORD *)this + 4);
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    v6 = *((_QWORD *)this + 5);
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    v7 = *((_QWORD *)this + 6);
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

SnippetUI::PrimaryHeader_Standard *SnippetUI::PrimaryHeader_Standard::New(SnippetUI::PrimaryHeader_Standard *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::PrimaryHeader_Standard>(0);
}

SnippetUI::PrimaryHeader_Standard *SnippetUI::PrimaryHeader_Standard::New(SnippetUI::PrimaryHeader_Standard *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::PrimaryHeader_Standard>(a2);
}

void SnippetUI::PrimaryHeader_Standard::Clear(SnippetUI::PrimaryHeader_Standard *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  google::protobuf::internal::InternalMetadataWithArena *v7;
  char v8;

  v2 = *((_QWORD *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(_BYTE **)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v2 = 0;
      *(_BYTE *)(v2 + 23) = 0;
    }
  }
  v3 = *((_QWORD *)this + 3);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *((_QWORD *)this + 3) = 0;
  v4 = *((_QWORD *)this + 4);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  *((_QWORD *)this + 4) = 0;
  v5 = *((_QWORD *)this + 5);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *((_QWORD *)this + 5) = 0;
  v6 = *((_QWORD *)this + 6);
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v8 = *((_BYTE *)this + 8);
  v7 = (SnippetUI::PrimaryHeader_Standard *)((char *)this + 8);
  *((_QWORD *)v7 + 5) = 0;
  if ((v8 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v7);
}

uint64_t SnippetUI::PrimaryHeader_Standard::IsInitialized(SnippetUI::PrimaryHeader_Standard *this)
{
  return 1;
}

char *SnippetUI::PrimaryHeader_Standard::ByteSizeLong(SnippetUI::PrimaryHeader_Standard *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  const google::protobuf::UnknownFieldSet *v5;
  SnippetUI::TextProperty *v6;
  char *v7;
  SnippetUI::TextProperty *v8;
  char *v9;
  SnippetUI::TextProperty *v10;
  char *v11;
  SnippetUI::ActionProperty *v12;
  char *v13;

  v2 = *((_QWORD *)this + 2);
  v3 = *(unsigned __int8 *)(v2 + 23);
  if (*(char *)(v2 + 23) < 0)
  {
    if (*(_QWORD *)(v2 + 8))
      goto LABEL_3;
LABEL_7:
    v5 = 0;
    goto LABEL_8;
  }
  if (!*(_BYTE *)(v2 + 23))
    goto LABEL_7;
LABEL_3:
  v4 = *(_QWORD *)(v2 + 8);
  if ((v3 & 0x80u) == 0)
    v4 = v3;
  v5 = (const google::protobuf::UnknownFieldSet *)(v4 + ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_8:
  if (this != (SnippetUI::PrimaryHeader_Standard *)&SnippetUI::_PrimaryHeader_Standard_default_instance_)
  {
    v6 = (SnippetUI::TextProperty *)*((_QWORD *)this + 3);
    if (v6)
    {
      v7 = SnippetUI::TextProperty::ByteSizeLong(v6);
      v5 = (const google::protobuf::UnknownFieldSet *)&v7[(_QWORD)v5
                                                        + 1
                                                        + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v8 = (SnippetUI::TextProperty *)*((_QWORD *)this + 4);
    if (v8)
    {
      v9 = SnippetUI::TextProperty::ByteSizeLong(v8);
      v5 = (const google::protobuf::UnknownFieldSet *)&v9[(_QWORD)v5
                                                        + 1
                                                        + ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v10 = (SnippetUI::TextProperty *)*((_QWORD *)this + 5);
    if (v10)
    {
      v11 = SnippetUI::TextProperty::ByteSizeLong(v10);
      v5 = (const google::protobuf::UnknownFieldSet *)&v11[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v12 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 6);
    if (v12)
    {
      v13 = SnippetUI::ActionProperty::ByteSizeLong(v12);
      v5 = (const google::protobuf::UnknownFieldSet *)&v13[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v13 | 1) ^ 0x1F) + 73) >> 6)];
    }
  }
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::PrimaryHeader_Standard *)((char *)this + 8), v5, (_DWORD *)this + 14);
  *((_DWORD *)this + 14) = (_DWORD)v5;
  return (char *)v5;
}

uint64_t SnippetUI::PrimaryHeader_Standard::GetCachedSize(SnippetUI::PrimaryHeader_Standard *this)
{
  return *((unsigned int *)this + 14);
}

google::protobuf::internal *SnippetUI::PrimaryHeader_Standard::_InternalParse(SnippetUI::PrimaryHeader_Standard *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  std::string **v5;
  uint64_t *v6;
  google::protobuf::internal::ParseContext *v7;
  google::protobuf::internal *TagFallback;
  char *v9;
  SnippetUI::TextProperty *v10;
  char *v11;
  SnippetUI::ActionProperty *v12;
  std::string *v13;
  BOOL v14;
  google::protobuf::internal *v16;

  v16 = a2;
  v5 = (std::string **)((char *)this + 16);
  v6 = (uint64_t *)((char *)this + 8);
  while (2)
  {
    if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v16, *((_DWORD *)a3 + 23)) & 1) != 0)
      return v16;
    TagFallback = (google::protobuf::internal *)((char *)v16 + 1);
    v9 = (char *)*(unsigned __int8 *)v16;
    if ((*(char *)v16 & 0x80000000) == 0)
      goto LABEL_6;
    v9 = (char *)(v9 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v16 + 2);
LABEL_6:
      v16 = TagFallback;
      goto LABEL_7;
    }
    TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v16, v9);
    v16 = TagFallback;
    if (!TagFallback)
      return TagFallback;
LABEL_7:
    switch(v9 >> 3)
    {
      case 1u:
        if (v9 != 10)
          goto LABEL_27;
        v10 = (SnippetUI::TextProperty *)*((_QWORD *)this + 3);
        if (v10)
          goto LABEL_18;
        v10 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 3) = v10;
        goto LABEL_17;
      case 2u:
        if (v9 != 18)
          goto LABEL_27;
        v10 = (SnippetUI::TextProperty *)*((_QWORD *)this + 4);
        if (v10)
          goto LABEL_18;
        v10 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 4) = v10;
        goto LABEL_17;
      case 3u:
        if (v9 != 26)
          goto LABEL_27;
        v10 = (SnippetUI::TextProperty *)*((_QWORD *)this + 5);
        if (v10)
          goto LABEL_18;
        v10 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 5) = v10;
LABEL_17:
        TagFallback = v16;
LABEL_18:
        v11 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::TextProperty>(a3, v10, TagFallback);
        goto LABEL_32;
      case 4u:
        if (v9 != 34)
          goto LABEL_27;
        v12 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 6);
        if (!v12)
        {
          v12 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
          *((_QWORD *)this + 6) = v12;
          TagFallback = v16;
        }
        v11 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::ActionProperty>(a3, v12, TagFallback);
        goto LABEL_32;
      case 5u:
        if (v9 != 42)
          goto LABEL_27;
        v13 = *v5;
        if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v13 = *v5;
          TagFallback = v16;
        }
        v11 = google::protobuf::internal::InlineGreedyStringParserUTF8(v13, (std::string::value_type *)TagFallback, (uint64_t)a3, (google::protobuf::internal *)"SnippetUI.PrimaryHeader_Standard.component_name");
        goto LABEL_32;
      default:
LABEL_27:
        if ((_DWORD)v9)
          v14 = (v9 & 7) == 4;
        else
          v14 = 1;
        if (v14)
        {
          *((_DWORD *)a3 + 20) = (_DWORD)v9 - 1;
          return TagFallback;
        }
        v11 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v9, v6, TagFallback, a3, v7);
LABEL_32:
        v16 = (google::protobuf::internal *)v11;
        if (v11)
          continue;
        TagFallback = 0;
        break;
    }
    return TagFallback;
  }
}

const google::protobuf::UnknownFieldSet *SnippetUI::PrimaryHeader_Standard::InternalSerializeWithCachedSizesToArray(SnippetUI::PrimaryHeader_Standard *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  char *v5;
  SnippetUI::TextProperty *v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  google::protobuf::UnknownFieldSet *v11;
  _BYTE *v12;
  _BYTE *v13;
  unsigned int v14;
  unsigned int v15;
  SnippetUI::TextProperty *v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  google::protobuf::UnknownFieldSet *v20;
  _BYTE *v21;
  _BYTE *v22;
  unsigned int v23;
  unsigned int v24;
  SnippetUI::TextProperty *v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  google::protobuf::UnknownFieldSet *v29;
  _BYTE *v30;
  _BYTE *v31;
  unsigned int v32;
  unsigned int v33;
  SnippetUI::ActionProperty *v34;
  unsigned int v35;
  google::protobuf::UnknownFieldSet *v36;
  unsigned int v37;
  _BYTE *v38;
  _BYTE *v39;
  unsigned int v40;
  unsigned int v41;
  google::protobuf::internal *v42;
  const char *v43;
  uint64_t v44;

  v5 = (char *)a2;
  if (this == (SnippetUI::PrimaryHeader_Standard *)&SnippetUI::_PrimaryHeader_Standard_default_instance_)
    goto LABEL_49;
  v7 = (SnippetUI::TextProperty *)*((_QWORD *)this + 3);
  if (v7)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
    {
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      v7 = (SnippetUI::TextProperty *)*((_QWORD *)this + 3);
    }
    *v5 = 10;
    v8 = *((_DWORD *)v7 + 15);
    if (v8 > 0x7F)
    {
      v5[1] = v8 | 0x80;
      v10 = v8 >> 7;
      if (v8 >> 14)
      {
        v12 = v5 + 2;
        do
        {
          v13 = v12;
          *v12++ = v10 | 0x80;
          v14 = v10 >> 7;
          v15 = v10 >> 14;
          v10 >>= 7;
        }
        while (v15);
        v11 = (google::protobuf::UnknownFieldSet *)(v13 + 2);
        *v12 = v14;
        goto LABEL_13;
      }
      v5[2] = v10;
      v9 = 3;
    }
    else
    {
      v5[1] = v8;
      v9 = 2;
    }
    v11 = (google::protobuf::UnknownFieldSet *)&v5[v9];
LABEL_13:
    v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v7, v11, a3, a4);
  }
  v16 = (SnippetUI::TextProperty *)*((_QWORD *)this + 4);
  if (!v16)
    goto LABEL_26;
  if ((unint64_t)v5 >= *(_QWORD *)a3)
  {
    v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v16 = (SnippetUI::TextProperty *)*((_QWORD *)this + 4);
  }
  *v5 = 18;
  v17 = *((_DWORD *)v16 + 15);
  if (v17 > 0x7F)
  {
    v5[1] = v17 | 0x80;
    v19 = v17 >> 7;
    if (v17 >> 14)
    {
      v21 = v5 + 2;
      do
      {
        v22 = v21;
        *v21++ = v19 | 0x80;
        v23 = v19 >> 7;
        v24 = v19 >> 14;
        v19 >>= 7;
      }
      while (v24);
      v20 = (google::protobuf::UnknownFieldSet *)(v22 + 2);
      *v21 = v23;
      goto LABEL_25;
    }
    v5[2] = v19;
    v18 = 3;
  }
  else
  {
    v5[1] = v17;
    v18 = 2;
  }
  v20 = (google::protobuf::UnknownFieldSet *)&v5[v18];
LABEL_25:
  v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v16, v20, a3, a4);
LABEL_26:
  v25 = (SnippetUI::TextProperty *)*((_QWORD *)this + 5);
  if (!v25)
    goto LABEL_38;
  if ((unint64_t)v5 >= *(_QWORD *)a3)
  {
    v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v25 = (SnippetUI::TextProperty *)*((_QWORD *)this + 5);
  }
  *v5 = 26;
  v26 = *((_DWORD *)v25 + 15);
  if (v26 > 0x7F)
  {
    v5[1] = v26 | 0x80;
    v28 = v26 >> 7;
    if (v26 >> 14)
    {
      v30 = v5 + 2;
      do
      {
        v31 = v30;
        *v30++ = v28 | 0x80;
        v32 = v28 >> 7;
        v33 = v28 >> 14;
        v28 >>= 7;
      }
      while (v33);
      v29 = (google::protobuf::UnknownFieldSet *)(v31 + 2);
      *v30 = v32;
      goto LABEL_37;
    }
    v5[2] = v28;
    v27 = 3;
  }
  else
  {
    v5[1] = v26;
    v27 = 2;
  }
  v29 = (google::protobuf::UnknownFieldSet *)&v5[v27];
LABEL_37:
  v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v25, v29, a3, a4);
LABEL_38:
  v34 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 6);
  if (v34)
  {
    if ((unint64_t)v5 >= *(_QWORD *)a3)
    {
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
      v34 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 6);
    }
    *v5 = 34;
    v35 = *((_DWORD *)v34 + 12);
    if (v35 > 0x7F)
    {
      v5[1] = v35 | 0x80;
      v37 = v35 >> 7;
      if (v35 >> 14)
      {
        v38 = v5 + 2;
        do
        {
          v39 = v38;
          *v38++ = v37 | 0x80;
          v40 = v37 >> 7;
          v41 = v37 >> 14;
          v37 >>= 7;
        }
        while (v41);
        v36 = (google::protobuf::UnknownFieldSet *)(v39 + 2);
        *v38 = v40;
      }
      else
      {
        v5[2] = v37;
        v36 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
      }
    }
    else
    {
      v5[1] = v35;
      v36 = (google::protobuf::UnknownFieldSet *)(v5 + 2);
    }
    v5 = (char *)SnippetUI::ActionProperty::InternalSerializeWithCachedSizesToArray(v34, v36, a3, a4);
  }
LABEL_49:
  v42 = (google::protobuf::internal *)*((_QWORD *)this + 2);
  if (*((char *)v42 + 23) < 0)
  {
    v43 = (const char *)*((_QWORD *)v42 + 1);
    if (!v43)
      goto LABEL_55;
    v42 = *(google::protobuf::internal **)v42;
    goto LABEL_54;
  }
  v43 = (const char *)*((unsigned __int8 *)v42 + 23);
  if (*((_BYTE *)v42 + 23))
  {
LABEL_54:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v42, v43, 1, (google::protobuf::internal *)"SnippetUI.PrimaryHeader_Standard.component_name");
    v5 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 5, *((_QWORD *)this + 2), v5);
  }
LABEL_55:
  v44 = *((_QWORD *)this + 1);
  if ((v44 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v44 & 0xFFFFFFFFFFFFFFFELL), (const google::protobuf::UnknownFieldSet *)v5, a3, a4);
  else
    return (const google::protobuf::UnknownFieldSet *)v5;
}

void SnippetUI::PrimaryHeader_Standard::CopyFrom(SnippetUI::PrimaryHeader_Standard *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    SnippetUI::PrimaryHeader_Standard::Clear(this);
    SnippetUI::PrimaryHeader_Standard::MergeFrom(this, a2);
  }
}

void SnippetUI::PrimaryHeader_Standard::MergeFrom(SnippetUI::PrimaryHeader_Standard *this, const google::protobuf::Message *lpsrc)
{
  std::string *v4;
  const SnippetUI::PrimaryHeader_Standard *v5;
  google::protobuf::Message *v6;
  char v7;
  std::string v8[2];

  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/PrimaryHeader.pb.cc", 507);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5)
    SnippetUI::PrimaryHeader_Standard::MergeFrom(this, v5);
  else
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
}

void sub_1BF917B1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::PrimaryHeader_Standard::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 56) = a2;
  return this;
}

uint64_t SnippetUI::PrimaryHeader_Standard::GetMetadata(SnippetUI::PrimaryHeader_Standard *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_PrimaryHeader_2eproto);
  return file_level_metadata_PrimaryHeader_2eproto;
}

void *SnippetUI::PrimaryHeader_Standard::default_instance(SnippetUI::PrimaryHeader_Standard *this)
{
  if (atomic_load(scc_info_PrimaryHeader_Standard_PrimaryHeader_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_PrimaryHeader_Standard_PrimaryHeader_2eproto);
  return &SnippetUI::_PrimaryHeader_Standard_default_instance_;
}

void SnippetUI::PrimaryHeader_Standard::MergeFrom(SnippetUI::PrimaryHeader_Standard *this, const SnippetUI::PrimaryHeader_Standard *a2)
{
  std::string *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  int **v8;
  int **v9;
  int **v10;
  int **v11;
  int **v12;
  int **v13;
  int **v14;
  int **v15;
  int **v16;
  int **v17;
  int **v18;
  int **v19;
  char v20;
  std::string v21[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v21, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/PrimaryHeader.pb.cc", 522);
    v4 = google::protobuf::internal::LogMessage::operator<<(v21, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v20, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v21[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::PrimaryHeader_Standard *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  v6 = *((_QWORD *)a2 + 2);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(_QWORD *)(v6 + 8))
      goto LABEL_13;
  }
  else if (!*(_BYTE *)(v6 + 23))
  {
    goto LABEL_13;
  }
  v7 = (uint64_t *)*((_QWORD *)this + 2);
  if (v7 != (uint64_t *)v6)
  {
    if (v7 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, v6);
    else
      std::string::operator=(*((std::string **)this + 2), (const std::string *)v6);
  }
LABEL_13:
  if (a2 != (const SnippetUI::PrimaryHeader_Standard *)&SnippetUI::_PrimaryHeader_Standard_default_instance_)
  {
    v8 = (int **)*((_QWORD *)a2 + 3);
    if (v8)
    {
      v9 = (int **)*((_QWORD *)this + 3);
      if (!v9)
      {
        v9 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 3) = v9;
        v8 = (int **)*((_QWORD *)a2 + 3);
      }
      if (v8)
        v10 = v8;
      else
        v10 = (int **)&SnippetUI::_TextProperty_default_instance_;
      SnippetUI::TextProperty::MergeFrom(v9, v10);
    }
    v11 = (int **)*((_QWORD *)a2 + 4);
    if (v11)
    {
      v12 = (int **)*((_QWORD *)this + 4);
      if (!v12)
      {
        v12 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 4) = v12;
        v11 = (int **)*((_QWORD *)a2 + 4);
      }
      if (v11)
        v13 = v11;
      else
        v13 = (int **)&SnippetUI::_TextProperty_default_instance_;
      SnippetUI::TextProperty::MergeFrom(v12, v13);
    }
    v14 = (int **)*((_QWORD *)a2 + 5);
    if (v14)
    {
      v15 = (int **)*((_QWORD *)this + 5);
      if (!v15)
      {
        v15 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 5) = v15;
        v14 = (int **)*((_QWORD *)a2 + 5);
      }
      if (v14)
        v16 = v14;
      else
        v16 = (int **)&SnippetUI::_TextProperty_default_instance_;
      SnippetUI::TextProperty::MergeFrom(v15, v16);
    }
    v17 = (int **)*((_QWORD *)a2 + 6);
    if (v17)
    {
      v18 = (int **)*((_QWORD *)this + 6);
      if (!v18)
      {
        v18 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
        *((_QWORD *)this + 6) = v18;
        v17 = (int **)*((_QWORD *)a2 + 6);
      }
      if (v17)
        v19 = v17;
      else
        v19 = (int **)&SnippetUI::_ActionProperty_default_instance_;
      SnippetUI::ActionProperty::MergeFrom(v18, v19);
    }
  }
}

void sub_1BF917D34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

SnippetUI::PrimaryHeader_Standard *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::PrimaryHeader_Standard>(google::protobuf::internal::ArenaImpl *this)
{
  SnippetUI::PrimaryHeader_Standard *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (SnippetUI::PrimaryHeader_Standard *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x40uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::PrimaryHeader_Standard>);
    SnippetUI::PrimaryHeader_Standard::PrimaryHeader_Standard(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (SnippetUI::PrimaryHeader_Standard *)operator new();
    SnippetUI::PrimaryHeader_Standard::PrimaryHeader_Standard(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_1BF917DD0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D890](v1, 0x10A1C406AB77EA5);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::PrimaryHeader_Standard>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

void InitDefaultsscc_info_PrimaryHeader_Rich_PrimaryHeader_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/PrimaryHeader.pb.cc", a4);
  SnippetUI::PrimaryHeader_Rich::PrimaryHeader_Rich((SnippetUI::PrimaryHeader_Rich *)&SnippetUI::_PrimaryHeader_Rich_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_PrimaryHeader_Rich_default_instance_, v4);
  qword_1ED1D43E0 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1ED1D43E8 = &SnippetUI::_MultilineTextProperty_default_instance_;
  qword_1ED1D43F0 = (uint64_t)&SnippetUI::_MultilineTextProperty_default_instance_;
  unk_1ED1D43F8 = &SnippetUI::_TextProperty_default_instance_;
  qword_1ED1D4400 = (uint64_t)&SnippetUI::_VisualProperty_default_instance_;
  unk_1ED1D4408 = &SnippetUI::_ActionProperty_default_instance_;
}

SnippetUI::PrimaryHeader_Rich *SnippetUI::PrimaryHeader_Rich::PrimaryHeader_Rich(SnippetUI::PrimaryHeader_Rich *this)
{
  *(_QWORD *)this = &off_1E792D790;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 18) = 0;
  if (atomic_load(scc_info_PrimaryHeader_Rich_PrimaryHeader_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_PrimaryHeader_Rich_PrimaryHeader_2eproto);
  *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  return this;
}

void sub_1BF917FC8(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::PrimaryHeader_Rich::~PrimaryHeader_Rich(SnippetUI::PrimaryHeader_Rich *this)
{
  SnippetUI::PrimaryHeader_Rich::~PrimaryHeader_Rich(this);
  JUMPOUT(0x1C3B8D890);
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)this = &off_1E792D790;
  v2 = *((_QWORD *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x1C3B8D890](v2, 0x1012C40EC159624);
  }
  if (this != (SnippetUI::PrimaryHeader_Rich *)&SnippetUI::_PrimaryHeader_Rich_default_instance_)
  {
    v4 = *((_QWORD *)this + 3);
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    v5 = *((_QWORD *)this + 4);
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    v6 = *((_QWORD *)this + 5);
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    v7 = *((_QWORD *)this + 6);
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    v8 = *((_QWORD *)this + 7);
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    v9 = *((_QWORD *)this + 8);
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

SnippetUI::PrimaryHeader_Rich *SnippetUI::PrimaryHeader_Rich::New(SnippetUI::PrimaryHeader_Rich *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::PrimaryHeader_Rich>(0);
}

SnippetUI::PrimaryHeader_Rich *SnippetUI::PrimaryHeader_Rich::New(SnippetUI::PrimaryHeader_Rich *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::PrimaryHeader_Rich>(a2);
}

void SnippetUI::PrimaryHeader_Rich::Clear(SnippetUI::PrimaryHeader_Rich *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  google::protobuf::internal::InternalMetadataWithArena *v9;
  char v10;

  v2 = *((_QWORD *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(_BYTE **)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v2 = 0;
      *(_BYTE *)(v2 + 23) = 0;
    }
  }
  v3 = *((_QWORD *)this + 3);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *((_QWORD *)this + 3) = 0;
  v4 = *((_QWORD *)this + 4);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  *((_QWORD *)this + 4) = 0;
  v5 = *((_QWORD *)this + 5);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *((_QWORD *)this + 5) = 0;
  v6 = *((_QWORD *)this + 6);
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  *((_QWORD *)this + 6) = 0;
  v7 = *((_QWORD *)this + 7);
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  *((_QWORD *)this + 7) = 0;
  v8 = *((_QWORD *)this + 8);
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v10 = *((_BYTE *)this + 8);
  v9 = (SnippetUI::PrimaryHeader_Rich *)((char *)this + 8);
  *((_QWORD *)v9 + 7) = 0;
  if ((v10 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v9);
}

uint64_t SnippetUI::PrimaryHeader_Rich::IsInitialized(SnippetUI::PrimaryHeader_Rich *this)
{
  return 1;
}

char *SnippetUI::PrimaryHeader_Rich::ByteSizeLong(SnippetUI::PrimaryHeader_Rich *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  const google::protobuf::UnknownFieldSet *v5;
  SnippetUI::TextProperty *v6;
  char *v7;
  SnippetUI::MultilineTextProperty *v8;
  char *v9;
  SnippetUI::MultilineTextProperty *v10;
  char *v11;
  SnippetUI::TextProperty *v12;
  char *v13;
  SnippetUI::VisualProperty *v14;
  char *v15;
  SnippetUI::ActionProperty *v16;
  char *v17;

  v2 = *((_QWORD *)this + 2);
  v3 = *(unsigned __int8 *)(v2 + 23);
  if (*(char *)(v2 + 23) < 0)
  {
    if (*(_QWORD *)(v2 + 8))
      goto LABEL_3;
LABEL_7:
    v5 = 0;
    goto LABEL_8;
  }
  if (!*(_BYTE *)(v2 + 23))
    goto LABEL_7;
LABEL_3:
  v4 = *(_QWORD *)(v2 + 8);
  if ((v3 & 0x80u) == 0)
    v4 = v3;
  v5 = (const google::protobuf::UnknownFieldSet *)(v4 + ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_8:
  if (this != (SnippetUI::PrimaryHeader_Rich *)&SnippetUI::_PrimaryHeader_Rich_default_instance_)
  {
    v6 = (SnippetUI::TextProperty *)*((_QWORD *)this + 3);
    if (v6)
    {
      v7 = SnippetUI::TextProperty::ByteSizeLong(v6);
      v5 = (const google::protobuf::UnknownFieldSet *)&v7[(_QWORD)v5
                                                        + 1
                                                        + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v8 = (SnippetUI::MultilineTextProperty *)*((_QWORD *)this + 4);
    if (v8)
    {
      v9 = SnippetUI::MultilineTextProperty::ByteSizeLong(v8);
      v5 = (const google::protobuf::UnknownFieldSet *)&v9[(_QWORD)v5
                                                        + 1
                                                        + ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v10 = (SnippetUI::MultilineTextProperty *)*((_QWORD *)this + 5);
    if (v10)
    {
      v11 = SnippetUI::MultilineTextProperty::ByteSizeLong(v10);
      v5 = (const google::protobuf::UnknownFieldSet *)&v11[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v12 = (SnippetUI::TextProperty *)*((_QWORD *)this + 6);
    if (v12)
    {
      v13 = SnippetUI::TextProperty::ByteSizeLong(v12);
      v5 = (const google::protobuf::UnknownFieldSet *)&v13[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v13 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v14 = (SnippetUI::VisualProperty *)*((_QWORD *)this + 7);
    if (v14)
    {
      v15 = SnippetUI::VisualProperty::ByteSizeLong(v14);
      v5 = (const google::protobuf::UnknownFieldSet *)&v15[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v15 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v16 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 8);
    if (v16)
    {
      v17 = SnippetUI::ActionProperty::ByteSizeLong(v16);
      v5 = (const google::protobuf::UnknownFieldSet *)&v17[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v17 | 1) ^ 0x1F) + 73) >> 6)];
    }
  }
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::PrimaryHeader_Rich *)((char *)this + 8), v5, (_DWORD *)this + 18);
  *((_DWORD *)this + 18) = (_DWORD)v5;
  return (char *)v5;
}

uint64_t SnippetUI::PrimaryHeader_Rich::GetCachedSize(SnippetUI::PrimaryHeader_Rich *this)
{
  return *((unsigned int *)this + 18);
}

google::protobuf::internal *SnippetUI::PrimaryHeader_Rich::_InternalParse(SnippetUI::PrimaryHeader_Rich *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  std::string **v5;
  uint64_t *v6;
  google::protobuf::internal::ParseContext *v7;
  google::protobuf::internal *TagFallback;
  char *v9;
  SnippetUI::TextProperty *v10;
  SnippetUI::MultilineTextProperty *v11;
  char *v12;
  SnippetUI::VisualProperty *v13;
  SnippetUI::ActionProperty *v14;
  std::string *v15;
  BOOL v16;
  google::protobuf::internal *v18;

  v18 = a2;
  v5 = (std::string **)((char *)this + 16);
  v6 = (uint64_t *)((char *)this + 8);
  while (2)
  {
    if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v18, *((_DWORD *)a3 + 23)) & 1) != 0)
      return v18;
    TagFallback = (google::protobuf::internal *)((char *)v18 + 1);
    v9 = (char *)*(unsigned __int8 *)v18;
    if ((*(char *)v18 & 0x80000000) == 0)
      goto LABEL_6;
    v9 = (char *)(v9 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v18 + 2);
LABEL_6:
      v18 = TagFallback;
      goto LABEL_7;
    }
    TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v18, v9);
    v18 = TagFallback;
    if (!TagFallback)
      return TagFallback;
LABEL_7:
    switch(v9 >> 3)
    {
      case 1u:
        if (v9 != 10)
          goto LABEL_38;
        v10 = (SnippetUI::TextProperty *)*((_QWORD *)this + 3);
        if (v10)
          goto LABEL_25;
        v10 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 3) = v10;
        goto LABEL_24;
      case 2u:
        if (v9 != 18)
          goto LABEL_38;
        v11 = (SnippetUI::MultilineTextProperty *)*((_QWORD *)this + 4);
        if (v11)
          goto LABEL_20;
        v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::MultilineTextProperty>(0);
        *((_QWORD *)this + 4) = v11;
        goto LABEL_19;
      case 3u:
        if (v9 != 26)
          goto LABEL_38;
        v11 = (SnippetUI::MultilineTextProperty *)*((_QWORD *)this + 5);
        if (v11)
          goto LABEL_20;
        v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::MultilineTextProperty>(0);
        *((_QWORD *)this + 5) = v11;
LABEL_19:
        TagFallback = v18;
LABEL_20:
        v12 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::MultilineTextProperty>(a3, v11, TagFallback);
        goto LABEL_43;
      case 4u:
        if (v9 != 34)
          goto LABEL_38;
        v10 = (SnippetUI::TextProperty *)*((_QWORD *)this + 6);
        if (!v10)
        {
          v10 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
          *((_QWORD *)this + 6) = v10;
LABEL_24:
          TagFallback = v18;
        }
LABEL_25:
        v12 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::TextProperty>(a3, v10, TagFallback);
        goto LABEL_43;
      case 5u:
        if (v9 != 42)
          goto LABEL_38;
        v13 = (SnippetUI::VisualProperty *)*((_QWORD *)this + 7);
        if (!v13)
        {
          v13 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::VisualProperty>(0);
          *((_QWORD *)this + 7) = v13;
          TagFallback = v18;
        }
        v12 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::VisualProperty>(a3, v13, TagFallback);
        goto LABEL_43;
      case 6u:
        if (v9 != 50)
          goto LABEL_38;
        v14 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 8);
        if (!v14)
        {
          v14 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
          *((_QWORD *)this + 8) = v14;
          TagFallback = v18;
        }
        v12 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::ActionProperty>(a3, v14, TagFallback);
        goto LABEL_43;
      case 7u:
        if (v9 != 58)
          goto LABEL_38;
        v15 = *v5;
        if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v15 = *v5;
          TagFallback = v18;
        }
        v12 = google::protobuf::internal::InlineGreedyStringParserUTF8(v15, (std::string::value_type *)TagFallback, (uint64_t)a3, (google::protobuf::internal *)"SnippetUI.PrimaryHeader_Rich.component_name");
        goto LABEL_43;
      default:
LABEL_38:
        if ((_DWORD)v9)
          v16 = (v9 & 7) == 4;
        else
          v16 = 1;
        if (v16)
        {
          *((_DWORD *)a3 + 20) = (_DWORD)v9 - 1;
          return TagFallback;
        }
        v12 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v9, v6, TagFallback, a3, v7);
LABEL_43:
        v18 = (google::protobuf::internal *)v12;
        if (v12)
          continue;
        TagFallback = 0;
        break;
    }
    return TagFallback;
  }
}

const google::protobuf::UnknownFieldSet *SnippetUI::PrimaryHeader_Rich::InternalSerializeWithCachedSizesToArray(SnippetUI::PrimaryHeader_Rich *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  char *v5;
  SnippetUI::TextProperty *v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  google::protobuf::UnknownFieldSet *v11;
  _BYTE *v12;
  _BYTE *v13;
  unsigned int v14;
  unsigned int v15;
  SnippetUI::MultilineTextProperty *v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  google::protobuf::UnknownFieldSet *v20;
  _BYTE *v21;
  _BYTE *v22;
  unsigned int v23;
  unsigned int v24;
  SnippetUI::MultilineTextProperty *v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  google::protobuf::UnknownFieldSet *v29;
  _BYTE *v30;
  _BYTE *v31;
  unsigned int v32;
  unsigned int v33;
  SnippetUI::TextProperty *v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int v37;
  google::protobuf::UnknownFieldSet *v38;
  _BYTE *v39;
  _BYTE *v40;
  unsigned int v41;
  unsigned int v42;
  SnippetUI::VisualProperty *v43;
  unsigned int v44;
  uint64_t v45;
  unsigned int v46;
  google::protobuf::UnknownFieldSet *v47;
  _BYTE *v48;
  _BYTE *v49;
  unsigned int v50;
  unsigned int v51;
  SnippetUI::ActionProperty *v52;
  unsigned int v53;
  google::protobuf::UnknownFieldSet *v54;
  unsigned int v55;
  _BYTE *v56;
  _BYTE *v57;
  unsigned int v58;
  unsigned int v59;
  google::protobuf::internal *v60;
  const char *v61;
  uint64_t v62;

  v5 = (char *)a2;
  if (this == (SnippetUI::PrimaryHeader_Rich *)&SnippetUI::_PrimaryHeader_Rich_default_instance_)
    goto LABEL_73;
  v7 = (SnippetUI::TextProperty *)*((_QWORD *)this + 3);
  if (v7)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
    {
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      v7 = (SnippetUI::TextProperty *)*((_QWORD *)this + 3);
    }
    *v5 = 10;
    v8 = *((_DWORD *)v7 + 15);
    if (v8 > 0x7F)
    {
      v5[1] = v8 | 0x80;
      v10 = v8 >> 7;
      if (v8 >> 14)
      {
        v12 = v5 + 2;
        do
        {
          v13 = v12;
          *v12++ = v10 | 0x80;
          v14 = v10 >> 7;
          v15 = v10 >> 14;
          v10 >>= 7;
        }
        while (v15);
        v11 = (google::protobuf::UnknownFieldSet *)(v13 + 2);
        *v12 = v14;
        goto LABEL_13;
      }
      v5[2] = v10;
      v9 = 3;
    }
    else
    {
      v5[1] = v8;
      v9 = 2;
    }
    v11 = (google::protobuf::UnknownFieldSet *)&v5[v9];
LABEL_13:
    v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v7, v11, a3, a4);
  }
  v16 = (SnippetUI::MultilineTextProperty *)*((_QWORD *)this + 4);
  if (!v16)
    goto LABEL_26;
  if ((unint64_t)v5 >= *(_QWORD *)a3)
  {
    v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v16 = (SnippetUI::MultilineTextProperty *)*((_QWORD *)this + 4);
  }
  *v5 = 18;
  v17 = *((_DWORD *)v16 + 15);
  if (v17 > 0x7F)
  {
    v5[1] = v17 | 0x80;
    v19 = v17 >> 7;
    if (v17 >> 14)
    {
      v21 = v5 + 2;
      do
      {
        v22 = v21;
        *v21++ = v19 | 0x80;
        v23 = v19 >> 7;
        v24 = v19 >> 14;
        v19 >>= 7;
      }
      while (v24);
      v20 = (google::protobuf::UnknownFieldSet *)(v22 + 2);
      *v21 = v23;
      goto LABEL_25;
    }
    v5[2] = v19;
    v18 = 3;
  }
  else
  {
    v5[1] = v17;
    v18 = 2;
  }
  v20 = (google::protobuf::UnknownFieldSet *)&v5[v18];
LABEL_25:
  v5 = (char *)SnippetUI::MultilineTextProperty::InternalSerializeWithCachedSizesToArray(v16, v20, a3, a4);
LABEL_26:
  v25 = (SnippetUI::MultilineTextProperty *)*((_QWORD *)this + 5);
  if (!v25)
    goto LABEL_38;
  if ((unint64_t)v5 >= *(_QWORD *)a3)
  {
    v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v25 = (SnippetUI::MultilineTextProperty *)*((_QWORD *)this + 5);
  }
  *v5 = 26;
  v26 = *((_DWORD *)v25 + 15);
  if (v26 > 0x7F)
  {
    v5[1] = v26 | 0x80;
    v28 = v26 >> 7;
    if (v26 >> 14)
    {
      v30 = v5 + 2;
      do
      {
        v31 = v30;
        *v30++ = v28 | 0x80;
        v32 = v28 >> 7;
        v33 = v28 >> 14;
        v28 >>= 7;
      }
      while (v33);
      v29 = (google::protobuf::UnknownFieldSet *)(v31 + 2);
      *v30 = v32;
      goto LABEL_37;
    }
    v5[2] = v28;
    v27 = 3;
  }
  else
  {
    v5[1] = v26;
    v27 = 2;
  }
  v29 = (google::protobuf::UnknownFieldSet *)&v5[v27];
LABEL_37:
  v5 = (char *)SnippetUI::MultilineTextProperty::InternalSerializeWithCachedSizesToArray(v25, v29, a3, a4);
LABEL_38:
  v34 = (SnippetUI::TextProperty *)*((_QWORD *)this + 6);
  if (!v34)
    goto LABEL_50;
  if ((unint64_t)v5 >= *(_QWORD *)a3)
  {
    v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v34 = (SnippetUI::TextProperty *)*((_QWORD *)this + 6);
  }
  *v5 = 34;
  v35 = *((_DWORD *)v34 + 15);
  if (v35 > 0x7F)
  {
    v5[1] = v35 | 0x80;
    v37 = v35 >> 7;
    if (v35 >> 14)
    {
      v39 = v5 + 2;
      do
      {
        v40 = v39;
        *v39++ = v37 | 0x80;
        v41 = v37 >> 7;
        v42 = v37 >> 14;
        v37 >>= 7;
      }
      while (v42);
      v38 = (google::protobuf::UnknownFieldSet *)(v40 + 2);
      *v39 = v41;
      goto LABEL_49;
    }
    v5[2] = v37;
    v36 = 3;
  }
  else
  {
    v5[1] = v35;
    v36 = 2;
  }
  v38 = (google::protobuf::UnknownFieldSet *)&v5[v36];
LABEL_49:
  v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v34, v38, a3, a4);
LABEL_50:
  v43 = (SnippetUI::VisualProperty *)*((_QWORD *)this + 7);
  if (!v43)
    goto LABEL_62;
  if ((unint64_t)v5 >= *(_QWORD *)a3)
  {
    v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v43 = (SnippetUI::VisualProperty *)*((_QWORD *)this + 7);
  }
  *v5 = 42;
  v44 = *((_DWORD *)v43 + 15);
  if (v44 > 0x7F)
  {
    v5[1] = v44 | 0x80;
    v46 = v44 >> 7;
    if (v44 >> 14)
    {
      v48 = v5 + 2;
      do
      {
        v49 = v48;
        *v48++ = v46 | 0x80;
        v50 = v46 >> 7;
        v51 = v46 >> 14;
        v46 >>= 7;
      }
      while (v51);
      v47 = (google::protobuf::UnknownFieldSet *)(v49 + 2);
      *v48 = v50;
      goto LABEL_61;
    }
    v5[2] = v46;
    v45 = 3;
  }
  else
  {
    v5[1] = v44;
    v45 = 2;
  }
  v47 = (google::protobuf::UnknownFieldSet *)&v5[v45];
LABEL_61:
  v5 = (char *)SnippetUI::VisualProperty::InternalSerializeWithCachedSizesToArray(v43, v47, a3, a4);
LABEL_62:
  v52 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 8);
  if (v52)
  {
    if ((unint64_t)v5 >= *(_QWORD *)a3)
    {
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
      v52 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 8);
    }
    *v5 = 50;
    v53 = *((_DWORD *)v52 + 12);
    if (v53 > 0x7F)
    {
      v5[1] = v53 | 0x80;
      v55 = v53 >> 7;
      if (v53 >> 14)
      {
        v56 = v5 + 2;
        do
        {
          v57 = v56;
          *v56++ = v55 | 0x80;
          v58 = v55 >> 7;
          v59 = v55 >> 14;
          v55 >>= 7;
        }
        while (v59);
        v54 = (google::protobuf::UnknownFieldSet *)(v57 + 2);
        *v56 = v58;
      }
      else
      {
        v5[2] = v55;
        v54 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
      }
    }
    else
    {
      v5[1] = v53;
      v54 = (google::protobuf::UnknownFieldSet *)(v5 + 2);
    }
    v5 = (char *)SnippetUI::ActionProperty::InternalSerializeWithCachedSizesToArray(v52, v54, a3, a4);
  }
LABEL_73:
  v60 = (google::protobuf::internal *)*((_QWORD *)this + 2);
  if (*((char *)v60 + 23) < 0)
  {
    v61 = (const char *)*((_QWORD *)v60 + 1);
    if (!v61)
      goto LABEL_79;
    v60 = *(google::protobuf::internal **)v60;
    goto LABEL_78;
  }
  v61 = (const char *)*((unsigned __int8 *)v60 + 23);
  if (*((_BYTE *)v60 + 23))
  {
LABEL_78:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v60, v61, 1, (google::protobuf::internal *)"SnippetUI.PrimaryHeader_Rich.component_name");
    v5 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 7, *((_QWORD *)this + 2), v5);
  }
LABEL_79:
  v62 = *((_QWORD *)this + 1);
  if ((v62 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v62 & 0xFFFFFFFFFFFFFFFELL), (const google::protobuf::UnknownFieldSet *)v5, a3, a4);
  else
    return (const google::protobuf::UnknownFieldSet *)v5;
}

void SnippetUI::PrimaryHeader_Rich::CopyFrom(SnippetUI::PrimaryHeader_Rich *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    SnippetUI::PrimaryHeader_Rich::Clear(this);
    SnippetUI::PrimaryHeader_Rich::MergeFrom(this, a2);
  }
}

void SnippetUI::PrimaryHeader_Rich::MergeFrom(SnippetUI::PrimaryHeader_Rich *this, const google::protobuf::Message *lpsrc)
{
  std::string *v4;
  const SnippetUI::PrimaryHeader_Rich *v5;
  google::protobuf::Message *v6;
  char v7;
  std::string v8[2];

  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/PrimaryHeader.pb.cc", 1389);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5)
    SnippetUI::PrimaryHeader_Rich::MergeFrom(this, v5);
  else
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
}

void sub_1BF918AD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::PrimaryHeader_Rich::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 72) = a2;
  return this;
}

uint64_t SnippetUI::PrimaryHeader_Rich::GetMetadata(SnippetUI::PrimaryHeader_Rich *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_PrimaryHeader_2eproto);
  return qword_1EF581908;
}

void *SnippetUI::PrimaryHeader_Rich::default_instance(SnippetUI::PrimaryHeader_Rich *this)
{
  if (atomic_load(scc_info_PrimaryHeader_Rich_PrimaryHeader_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_PrimaryHeader_Rich_PrimaryHeader_2eproto);
  return &SnippetUI::_PrimaryHeader_Rich_default_instance_;
}

void SnippetUI::PrimaryHeader_Rich::MergeFrom(SnippetUI::PrimaryHeader_Rich *this, const SnippetUI::PrimaryHeader_Rich *a2)
{
  std::string *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  int **v8;
  int **v9;
  int **v10;
  int **v11;
  int **v12;
  int **v13;
  int **v14;
  int **v15;
  int **v16;
  int **v17;
  int **v18;
  int **v19;
  int **v20;
  int **v21;
  int **v22;
  int **v23;
  int **v24;
  int **v25;
  char v26;
  std::string v27[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v27, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/PrimaryHeader.pb.cc", 1404);
    v4 = google::protobuf::internal::LogMessage::operator<<(v27, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v26, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v27[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::PrimaryHeader_Rich *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  v6 = *((_QWORD *)a2 + 2);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(_QWORD *)(v6 + 8))
      goto LABEL_13;
  }
  else if (!*(_BYTE *)(v6 + 23))
  {
    goto LABEL_13;
  }
  v7 = (uint64_t *)*((_QWORD *)this + 2);
  if (v7 != (uint64_t *)v6)
  {
    if (v7 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, v6);
    else
      std::string::operator=(*((std::string **)this + 2), (const std::string *)v6);
  }
LABEL_13:
  if (a2 != (const SnippetUI::PrimaryHeader_Rich *)&SnippetUI::_PrimaryHeader_Rich_default_instance_)
  {
    v8 = (int **)*((_QWORD *)a2 + 3);
    if (v8)
    {
      v9 = (int **)*((_QWORD *)this + 3);
      if (!v9)
      {
        v9 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 3) = v9;
        v8 = (int **)*((_QWORD *)a2 + 3);
      }
      if (v8)
        v10 = v8;
      else
        v10 = (int **)&SnippetUI::_TextProperty_default_instance_;
      SnippetUI::TextProperty::MergeFrom(v9, v10);
    }
    v11 = (int **)*((_QWORD *)a2 + 4);
    if (v11)
    {
      v12 = (int **)*((_QWORD *)this + 4);
      if (!v12)
      {
        v12 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::MultilineTextProperty>(0);
        *((_QWORD *)this + 4) = v12;
        v11 = (int **)*((_QWORD *)a2 + 4);
      }
      if (v11)
        v13 = v11;
      else
        v13 = (int **)&SnippetUI::_MultilineTextProperty_default_instance_;
      SnippetUI::MultilineTextProperty::MergeFrom(v12, v13);
    }
    v14 = (int **)*((_QWORD *)a2 + 5);
    if (v14)
    {
      v15 = (int **)*((_QWORD *)this + 5);
      if (!v15)
      {
        v15 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::MultilineTextProperty>(0);
        *((_QWORD *)this + 5) = v15;
        v14 = (int **)*((_QWORD *)a2 + 5);
      }
      if (v14)
        v16 = v14;
      else
        v16 = (int **)&SnippetUI::_MultilineTextProperty_default_instance_;
      SnippetUI::MultilineTextProperty::MergeFrom(v15, v16);
    }
    v17 = (int **)*((_QWORD *)a2 + 6);
    if (v17)
    {
      v18 = (int **)*((_QWORD *)this + 6);
      if (!v18)
      {
        v18 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 6) = v18;
        v17 = (int **)*((_QWORD *)a2 + 6);
      }
      if (v17)
        v19 = v17;
      else
        v19 = (int **)&SnippetUI::_TextProperty_default_instance_;
      SnippetUI::TextProperty::MergeFrom(v18, v19);
    }
    v20 = (int **)*((_QWORD *)a2 + 7);
    if (v20)
    {
      v21 = (int **)*((_QWORD *)this + 7);
      if (!v21)
      {
        v21 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::VisualProperty>(0);
        *((_QWORD *)this + 7) = v21;
        v20 = (int **)*((_QWORD *)a2 + 7);
      }
      if (v20)
        v22 = v20;
      else
        v22 = (int **)&SnippetUI::_VisualProperty_default_instance_;
      SnippetUI::VisualProperty::MergeFrom(v21, v22);
    }
    v23 = (int **)*((_QWORD *)a2 + 8);
    if (v23)
    {
      v24 = (int **)*((_QWORD *)this + 8);
      if (!v24)
      {
        v24 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
        *((_QWORD *)this + 8) = v24;
        v23 = (int **)*((_QWORD *)a2 + 8);
      }
      if (v23)
        v25 = v23;
      else
        v25 = (int **)&SnippetUI::_ActionProperty_default_instance_;
      SnippetUI::ActionProperty::MergeFrom(v24, v25);
    }
  }
}

void sub_1BF918D48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

SnippetUI::PrimaryHeader_Rich *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::PrimaryHeader_Rich>(google::protobuf::internal::ArenaImpl *this)
{
  SnippetUI::PrimaryHeader_Rich *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (SnippetUI::PrimaryHeader_Rich *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x50uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::PrimaryHeader_Rich>);
    SnippetUI::PrimaryHeader_Rich::PrimaryHeader_Rich(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (SnippetUI::PrimaryHeader_Rich *)operator new();
    SnippetUI::PrimaryHeader_Rich::PrimaryHeader_Rich(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_1BF918DE4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D890](v1, 0x10A1C406DED95A8);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::PrimaryHeader_Rich>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

void *SnippetUI::PrimaryHeader_Marquee::default_instance(SnippetUI::PrimaryHeader_Marquee *this)
{
  if (atomic_load(scc_info_PrimaryHeader_Marquee_PrimaryHeader_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_PrimaryHeader_Marquee_PrimaryHeader_2eproto);
  return &SnippetUI::_PrimaryHeader_Marquee_default_instance_;
}

void SnippetUI::PrimaryHeader_Marquee::MergeFrom(SnippetUI::PrimaryHeader_Marquee *this, const SnippetUI::PrimaryHeader_Marquee *a2)
{
  std::string *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  int **v8;
  int **v9;
  int **v10;
  int **v11;
  int **v12;
  int **v13;
  int **v14;
  int **v15;
  int **v16;
  int **v17;
  int **v18;
  int **v19;
  char v20;
  std::string v21[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v21, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/PrimaryHeader.pb.cc", 918);
    v4 = google::protobuf::internal::LogMessage::operator<<(v21, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v20, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v21[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::PrimaryHeader_Marquee *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  v6 = *((_QWORD *)a2 + 2);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(_QWORD *)(v6 + 8))
      goto LABEL_13;
  }
  else if (!*(_BYTE *)(v6 + 23))
  {
    goto LABEL_13;
  }
  v7 = (uint64_t *)*((_QWORD *)this + 2);
  if (v7 != (uint64_t *)v6)
  {
    if (v7 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, v6);
    else
      std::string::operator=(*((std::string **)this + 2), (const std::string *)v6);
  }
LABEL_13:
  if (a2 != (const SnippetUI::PrimaryHeader_Marquee *)&SnippetUI::_PrimaryHeader_Marquee_default_instance_)
  {
    v8 = (int **)*((_QWORD *)a2 + 3);
    if (v8)
    {
      v9 = (int **)*((_QWORD *)this + 3);
      if (!v9)
      {
        v9 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 3) = v9;
        v8 = (int **)*((_QWORD *)a2 + 3);
      }
      if (v8)
        v10 = v8;
      else
        v10 = (int **)&SnippetUI::_TextProperty_default_instance_;
      SnippetUI::TextProperty::MergeFrom(v9, v10);
    }
    v11 = (int **)*((_QWORD *)a2 + 4);
    if (v11)
    {
      v12 = (int **)*((_QWORD *)this + 4);
      if (!v12)
      {
        v12 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 4) = v12;
        v11 = (int **)*((_QWORD *)a2 + 4);
      }
      if (v11)
        v13 = v11;
      else
        v13 = (int **)&SnippetUI::_TextProperty_default_instance_;
      SnippetUI::TextProperty::MergeFrom(v12, v13);
    }
    v14 = (int **)*((_QWORD *)a2 + 5);
    if (v14)
    {
      v15 = (int **)*((_QWORD *)this + 5);
      if (!v15)
      {
        v15 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
        *((_QWORD *)this + 5) = v15;
        v14 = (int **)*((_QWORD *)a2 + 5);
      }
      if (v14)
        v16 = v14;
      else
        v16 = (int **)&SnippetUI::_ActionProperty_default_instance_;
      SnippetUI::ActionProperty::MergeFrom(v15, v16);
    }
    v17 = (int **)*((_QWORD *)a2 + 6);
    if (v17)
    {
      v18 = (int **)*((_QWORD *)this + 6);
      if (!v18)
      {
        v18 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::VisualProperty>(0);
        *((_QWORD *)this + 6) = v18;
        v17 = (int **)*((_QWORD *)a2 + 6);
      }
      if (v17)
        v19 = v17;
      else
        v19 = (int **)&SnippetUI::_VisualProperty_default_instance_;
      SnippetUI::VisualProperty::MergeFrom(v18, v19);
    }
  }
}

void sub_1BF9190E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

SnippetUI::PrimaryHeader_Marquee *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::PrimaryHeader_Marquee>(google::protobuf::internal::ArenaImpl *this)
{
  SnippetUI::PrimaryHeader_Marquee *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (SnippetUI::PrimaryHeader_Marquee *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x40uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::PrimaryHeader_Marquee>);
    SnippetUI::PrimaryHeader_Marquee::PrimaryHeader_Marquee(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (SnippetUI::PrimaryHeader_Marquee *)operator new();
    SnippetUI::PrimaryHeader_Marquee::PrimaryHeader_Marquee(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_1BF919184(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D890](v1, 0x10A1C406AB77EA5);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::PrimaryHeader_Marquee>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

void SnippetUI::PrimaryHeader_Standard::InitAsDefaultInstance(SnippetUI::PrimaryHeader_Standard *this)
{
  qword_1ED1D5668 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1ED1D5670 = &SnippetUI::_TextProperty_default_instance_;
  qword_1ED1D5678 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1ED1D5680 = &SnippetUI::_ActionProperty_default_instance_;
}

uint64_t SnippetUI::PrimaryHeader_Standard::_Internal::text_1(SnippetUI::PrimaryHeader_Standard::_Internal *this, const SnippetUI::PrimaryHeader_Standard *a2)
{
  return *((_QWORD *)this + 3);
}

uint64_t SnippetUI::PrimaryHeader_Standard::_Internal::text_2(SnippetUI::PrimaryHeader_Standard::_Internal *this, const SnippetUI::PrimaryHeader_Standard *a2)
{
  return *((_QWORD *)this + 4);
}

uint64_t SnippetUI::PrimaryHeader_Standard::_Internal::text_3(SnippetUI::PrimaryHeader_Standard::_Internal *this, const SnippetUI::PrimaryHeader_Standard *a2)
{
  return *((_QWORD *)this + 5);
}

uint64_t SnippetUI::PrimaryHeader_Standard::_Internal::action(SnippetUI::PrimaryHeader_Standard::_Internal *this, const SnippetUI::PrimaryHeader_Standard *a2)
{
  return *((_QWORD *)this + 6);
}

uint64_t SnippetUI::PrimaryHeader_Standard::clear_text_1(SnippetUI::PrimaryHeader_Standard *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 3);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 3) = 0;
  return result;
}

uint64_t SnippetUI::PrimaryHeader_Standard::clear_text_2(SnippetUI::PrimaryHeader_Standard *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 4);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 4) = 0;
  return result;
}

uint64_t SnippetUI::PrimaryHeader_Standard::clear_text_3(SnippetUI::PrimaryHeader_Standard *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 5);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 5) = 0;
  return result;
}

uint64_t SnippetUI::PrimaryHeader_Standard::clear_action(SnippetUI::PrimaryHeader_Standard *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 6);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 6) = 0;
  return result;
}

SnippetUI::PrimaryHeader_Standard *SnippetUI::PrimaryHeader_Standard::PrimaryHeader_Standard(SnippetUI::PrimaryHeader_Standard *this, const SnippetUI::PrimaryHeader_Standard *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  SnippetUI::TextProperty *v8;
  SnippetUI::ActionProperty *v9;
  SnippetUI::TextProperty *v10;
  SnippetUI::TextProperty *v11;

  *(_QWORD *)this = &off_1E792D610;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 14) = 0;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::PrimaryHeader_Standard *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  v5 = *((_QWORD *)a2 + 2);
  if (*(char *)(v5 + 23) < 0)
    v6 = *(_QWORD *)(v5 + 8);
  else
    v6 = *(unsigned __int8 *)(v5 + 23);
  if ((uint64_t *)v5 != &google::protobuf::internal::fixed_address_empty_string && v6 != 0)
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, v5);
  if (a2 == (const SnippetUI::PrimaryHeader_Standard *)&SnippetUI::_PrimaryHeader_Standard_default_instance_)
  {
    v9 = 0;
    *((_QWORD *)this + 3) = 0;
    *((_QWORD *)this + 4) = 0;
    *((_QWORD *)this + 5) = 0;
  }
  else
  {
    if (*((_QWORD *)a2 + 3))
    {
      v8 = (SnippetUI::TextProperty *)operator new();
      SnippetUI::TextProperty::TextProperty(v8, *((const SnippetUI::TextProperty **)a2 + 3));
    }
    else
    {
      v8 = 0;
    }
    *((_QWORD *)this + 3) = v8;
    if (*((_QWORD *)a2 + 4))
    {
      v10 = (SnippetUI::TextProperty *)operator new();
      SnippetUI::TextProperty::TextProperty(v10, *((const SnippetUI::TextProperty **)a2 + 4));
    }
    else
    {
      v10 = 0;
    }
    *((_QWORD *)this + 4) = v10;
    if (*((_QWORD *)a2 + 5))
    {
      v11 = (SnippetUI::TextProperty *)operator new();
      SnippetUI::TextProperty::TextProperty(v11, *((const SnippetUI::TextProperty **)a2 + 5));
    }
    else
    {
      v11 = 0;
    }
    *((_QWORD *)this + 5) = v11;
    if (*((_QWORD *)a2 + 6))
    {
      v9 = (SnippetUI::ActionProperty *)operator new();
      SnippetUI::ActionProperty::ActionProperty(v9, *((const SnippetUI::ActionProperty **)a2 + 6));
    }
    else
    {
      v9 = 0;
    }
  }
  *((_QWORD *)this + 6) = v9;
  return this;
}

void sub_1BF919530(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;

  MEMORY[0x1C3B8D890](v2, 0x10A1C40B18DE219);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::PrimaryHeader_Standard::CopyFrom(SnippetUI::PrimaryHeader_Standard *this, const SnippetUI::PrimaryHeader_Standard *a2)
{
  if (a2 != this)
  {
    SnippetUI::PrimaryHeader_Standard::Clear(this);
    SnippetUI::PrimaryHeader_Standard::MergeFrom(this, a2);
  }
}

void SnippetUI::PrimaryHeader_Standard::InternalSwap(SnippetUI::PrimaryHeader_Standard *this, SnippetUI::PrimaryHeader_Standard *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  uint64_t v5;
  google::protobuf::UnknownFieldSet *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  google::protobuf::UnknownFieldSet *v17;

  v4 = (SnippetUI::PrimaryHeader_Standard *)((char *)this + 8);
  v5 = *((_QWORD *)a2 + 1);
  if ((*((_BYTE *)this + 8) & 1) != 0)
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v6 = v17;
      goto LABEL_6;
    }
LABEL_5:
    v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
    google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
    goto LABEL_7;
  }
  if ((v5 & 1) != 0)
    goto LABEL_5;
LABEL_7:
  v7 = (uint64_t *)*((_QWORD *)this + 2);
  v8 = (uint64_t **)((char *)a2 + 16);
  if (v7 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_13;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 2, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v7 = (uint64_t *)*((_QWORD *)this + 2);
  }
  v9 = *v8;
  if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 2, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v9 = *v8;
  }
  v10 = v7[2];
  v11 = *(_OWORD *)v7;
  v12 = v9[2];
  *(_OWORD *)v7 = *(_OWORD *)v9;
  v7[2] = v12;
  *(_OWORD *)v9 = v11;
  v9[2] = v10;
LABEL_13:
  v13 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v13;
  v14 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v14;
  v15 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v15;
  v16 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v16;
}

void SnippetUI::PrimaryHeader_Marquee::InitAsDefaultInstance(SnippetUI::PrimaryHeader_Marquee *this)
{
  qword_1ED1D55E0 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1ED1D55E8 = &SnippetUI::_TextProperty_default_instance_;
  qword_1ED1D55F0 = (uint64_t)&SnippetUI::_ActionProperty_default_instance_;
  unk_1ED1D55F8 = &SnippetUI::_VisualProperty_default_instance_;
}

uint64_t SnippetUI::PrimaryHeader_Marquee::_Internal::text_1(SnippetUI::PrimaryHeader_Marquee::_Internal *this, const SnippetUI::PrimaryHeader_Marquee *a2)
{
  return *((_QWORD *)this + 3);
}

uint64_t SnippetUI::PrimaryHeader_Marquee::_Internal::text_2(SnippetUI::PrimaryHeader_Marquee::_Internal *this, const SnippetUI::PrimaryHeader_Marquee *a2)
{
  return *((_QWORD *)this + 4);
}

uint64_t SnippetUI::PrimaryHeader_Marquee::_Internal::action(SnippetUI::PrimaryHeader_Marquee::_Internal *this, const SnippetUI::PrimaryHeader_Marquee *a2)
{
  return *((_QWORD *)this + 5);
}

uint64_t SnippetUI::PrimaryHeader_Marquee::_Internal::thumbnail(SnippetUI::PrimaryHeader_Marquee::_Internal *this, const SnippetUI::PrimaryHeader_Marquee *a2)
{
  return *((_QWORD *)this + 6);
}

uint64_t SnippetUI::PrimaryHeader_Marquee::clear_text_1(SnippetUI::PrimaryHeader_Marquee *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 3);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 3) = 0;
  return result;
}

uint64_t SnippetUI::PrimaryHeader_Marquee::clear_text_2(SnippetUI::PrimaryHeader_Marquee *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 4);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 4) = 0;
  return result;
}

uint64_t SnippetUI::PrimaryHeader_Marquee::clear_action(SnippetUI::PrimaryHeader_Marquee *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 5);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 5) = 0;
  return result;
}

uint64_t SnippetUI::PrimaryHeader_Marquee::clear_thumbnail(SnippetUI::PrimaryHeader_Marquee *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 6);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 6) = 0;
  return result;
}

SnippetUI::PrimaryHeader_Marquee *SnippetUI::PrimaryHeader_Marquee::PrimaryHeader_Marquee(SnippetUI::PrimaryHeader_Marquee *this, const SnippetUI::PrimaryHeader_Marquee *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  SnippetUI::TextProperty *v8;
  SnippetUI::VisualProperty *v9;
  SnippetUI::TextProperty *v10;
  SnippetUI::ActionProperty *v11;

  *(_QWORD *)this = &off_1E792D6D0;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 14) = 0;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::PrimaryHeader_Marquee *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  v5 = *((_QWORD *)a2 + 2);
  if (*(char *)(v5 + 23) < 0)
    v6 = *(_QWORD *)(v5 + 8);
  else
    v6 = *(unsigned __int8 *)(v5 + 23);
  if ((uint64_t *)v5 != &google::protobuf::internal::fixed_address_empty_string && v6 != 0)
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, v5);
  if (a2 == (const SnippetUI::PrimaryHeader_Marquee *)&SnippetUI::_PrimaryHeader_Marquee_default_instance_)
  {
    v9 = 0;
    *((_QWORD *)this + 3) = 0;
    *((_QWORD *)this + 4) = 0;
    *((_QWORD *)this + 5) = 0;
  }
  else
  {
    if (*((_QWORD *)a2 + 3))
    {
      v8 = (SnippetUI::TextProperty *)operator new();
      SnippetUI::TextProperty::TextProperty(v8, *((const SnippetUI::TextProperty **)a2 + 3));
    }
    else
    {
      v8 = 0;
    }
    *((_QWORD *)this + 3) = v8;
    if (*((_QWORD *)a2 + 4))
    {
      v10 = (SnippetUI::TextProperty *)operator new();
      SnippetUI::TextProperty::TextProperty(v10, *((const SnippetUI::TextProperty **)a2 + 4));
    }
    else
    {
      v10 = 0;
    }
    *((_QWORD *)this + 4) = v10;
    if (*((_QWORD *)a2 + 5))
    {
      v11 = (SnippetUI::ActionProperty *)operator new();
      SnippetUI::ActionProperty::ActionProperty(v11, *((const SnippetUI::ActionProperty **)a2 + 5));
    }
    else
    {
      v11 = 0;
    }
    *((_QWORD *)this + 5) = v11;
    if (*((_QWORD *)a2 + 6))
    {
      v9 = (SnippetUI::VisualProperty *)operator new();
      SnippetUI::VisualProperty::VisualProperty(v9, *((const SnippetUI::VisualProperty **)a2 + 6));
    }
    else
    {
      v9 = 0;
    }
  }
  *((_QWORD *)this + 6) = v9;
  return this;
}

void sub_1BF9199A0(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;

  MEMORY[0x1C3B8D890](v2, 0x10A1C40BEC01B52);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::PrimaryHeader_Marquee::CopyFrom(SnippetUI::PrimaryHeader_Marquee *this, const SnippetUI::PrimaryHeader_Marquee *a2)
{
  if (a2 != this)
  {
    SnippetUI::PrimaryHeader_Marquee::Clear(this);
    SnippetUI::PrimaryHeader_Marquee::MergeFrom(this, a2);
  }
}

void SnippetUI::PrimaryHeader_Marquee::InternalSwap(SnippetUI::PrimaryHeader_Marquee *this, SnippetUI::PrimaryHeader_Marquee *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  uint64_t v5;
  google::protobuf::UnknownFieldSet *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  google::protobuf::UnknownFieldSet *v17;

  v4 = (SnippetUI::PrimaryHeader_Marquee *)((char *)this + 8);
  v5 = *((_QWORD *)a2 + 1);
  if ((*((_BYTE *)this + 8) & 1) != 0)
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v6 = v17;
      goto LABEL_6;
    }
LABEL_5:
    v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
    google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
    goto LABEL_7;
  }
  if ((v5 & 1) != 0)
    goto LABEL_5;
LABEL_7:
  v7 = (uint64_t *)*((_QWORD *)this + 2);
  v8 = (uint64_t **)((char *)a2 + 16);
  if (v7 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_13;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 2, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v7 = (uint64_t *)*((_QWORD *)this + 2);
  }
  v9 = *v8;
  if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 2, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v9 = *v8;
  }
  v10 = v7[2];
  v11 = *(_OWORD *)v7;
  v12 = v9[2];
  *(_OWORD *)v7 = *(_OWORD *)v9;
  v7[2] = v12;
  *(_OWORD *)v9 = v11;
  v9[2] = v10;
LABEL_13:
  v13 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v13;
  v14 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v14;
  v15 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v15;
  v16 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v16;
}

void SnippetUI::PrimaryHeader_Rich::InitAsDefaultInstance(SnippetUI::PrimaryHeader_Rich *this)
{
  qword_1ED1D43E0 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1ED1D43E8 = &SnippetUI::_MultilineTextProperty_default_instance_;
  qword_1ED1D43F0 = (uint64_t)&SnippetUI::_MultilineTextProperty_default_instance_;
  unk_1ED1D43F8 = &SnippetUI::_TextProperty_default_instance_;
  qword_1ED1D4400 = (uint64_t)&SnippetUI::_VisualProperty_default_instance_;
  unk_1ED1D4408 = &SnippetUI::_ActionProperty_default_instance_;
}

uint64_t SnippetUI::PrimaryHeader_Rich::_Internal::text_1(SnippetUI::PrimaryHeader_Rich::_Internal *this, const SnippetUI::PrimaryHeader_Rich *a2)
{
  return *((_QWORD *)this + 3);
}

uint64_t SnippetUI::PrimaryHeader_Rich::_Internal::text_2(SnippetUI::PrimaryHeader_Rich::_Internal *this, const SnippetUI::PrimaryHeader_Rich *a2)
{
  return *((_QWORD *)this + 4);
}

uint64_t SnippetUI::PrimaryHeader_Rich::_Internal::text_3(SnippetUI::PrimaryHeader_Rich::_Internal *this, const SnippetUI::PrimaryHeader_Rich *a2)
{
  return *((_QWORD *)this + 5);
}

uint64_t SnippetUI::PrimaryHeader_Rich::_Internal::text_4(SnippetUI::PrimaryHeader_Rich::_Internal *this, const SnippetUI::PrimaryHeader_Rich *a2)
{
  return *((_QWORD *)this + 6);
}

uint64_t SnippetUI::PrimaryHeader_Rich::_Internal::thumbnail(SnippetUI::PrimaryHeader_Rich::_Internal *this, const SnippetUI::PrimaryHeader_Rich *a2)
{
  return *((_QWORD *)this + 7);
}

uint64_t SnippetUI::PrimaryHeader_Rich::_Internal::action(SnippetUI::PrimaryHeader_Rich::_Internal *this, const SnippetUI::PrimaryHeader_Rich *a2)
{
  return *((_QWORD *)this + 8);
}

uint64_t SnippetUI::PrimaryHeader_Rich::clear_text_1(SnippetUI::PrimaryHeader_Rich *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 3);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 3) = 0;
  return result;
}

uint64_t SnippetUI::PrimaryHeader_Rich::clear_text_2(SnippetUI::PrimaryHeader_Rich *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 4);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 4) = 0;
  return result;
}

uint64_t SnippetUI::PrimaryHeader_Rich::clear_text_3(SnippetUI::PrimaryHeader_Rich *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 5);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 5) = 0;
  return result;
}

uint64_t SnippetUI::PrimaryHeader_Rich::clear_text_4(SnippetUI::PrimaryHeader_Rich *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 6);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 6) = 0;
  return result;
}

uint64_t SnippetUI::PrimaryHeader_Rich::clear_thumbnail(SnippetUI::PrimaryHeader_Rich *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 7);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 7) = 0;
  return result;
}

uint64_t SnippetUI::PrimaryHeader_Rich::clear_action(SnippetUI::PrimaryHeader_Rich *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 8);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 8) = 0;
  return result;
}

SnippetUI::PrimaryHeader_Rich *SnippetUI::PrimaryHeader_Rich::PrimaryHeader_Rich(SnippetUI::PrimaryHeader_Rich *this, const SnippetUI::PrimaryHeader_Rich *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  SnippetUI::TextProperty *v8;
  SnippetUI::ActionProperty *v9;
  SnippetUI::MultilineTextProperty *v10;
  SnippetUI::MultilineTextProperty *v11;
  SnippetUI::TextProperty *v12;
  SnippetUI::VisualProperty *v13;

  *(_QWORD *)this = &off_1E792D790;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 18) = 0;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::PrimaryHeader_Rich *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  v5 = *((_QWORD *)a2 + 2);
  if (*(char *)(v5 + 23) < 0)
    v6 = *(_QWORD *)(v5 + 8);
  else
    v6 = *(unsigned __int8 *)(v5 + 23);
  if ((uint64_t *)v5 != &google::protobuf::internal::fixed_address_empty_string && v6 != 0)
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, v5);
  if (a2 == (const SnippetUI::PrimaryHeader_Rich *)&SnippetUI::_PrimaryHeader_Rich_default_instance_)
  {
    v9 = 0;
    *((_QWORD *)this + 7) = 0;
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 24) = 0u;
  }
  else
  {
    if (*((_QWORD *)a2 + 3))
    {
      v8 = (SnippetUI::TextProperty *)operator new();
      SnippetUI::TextProperty::TextProperty(v8, *((const SnippetUI::TextProperty **)a2 + 3));
    }
    else
    {
      v8 = 0;
    }
    *((_QWORD *)this + 3) = v8;
    if (*((_QWORD *)a2 + 4))
    {
      v10 = (SnippetUI::MultilineTextProperty *)operator new();
      SnippetUI::MultilineTextProperty::MultilineTextProperty(v10, *((const SnippetUI::MultilineTextProperty **)a2 + 4));
    }
    else
    {
      v10 = 0;
    }
    *((_QWORD *)this + 4) = v10;
    if (*((_QWORD *)a2 + 5))
    {
      v11 = (SnippetUI::MultilineTextProperty *)operator new();
      SnippetUI::MultilineTextProperty::MultilineTextProperty(v11, *((const SnippetUI::MultilineTextProperty **)a2 + 5));
    }
    else
    {
      v11 = 0;
    }
    *((_QWORD *)this + 5) = v11;
    if (*((_QWORD *)a2 + 6))
    {
      v12 = (SnippetUI::TextProperty *)operator new();
      SnippetUI::TextProperty::TextProperty(v12, *((const SnippetUI::TextProperty **)a2 + 6));
    }
    else
    {
      v12 = 0;
    }
    *((_QWORD *)this + 6) = v12;
    if (*((_QWORD *)a2 + 7))
    {
      v13 = (SnippetUI::VisualProperty *)operator new();
      SnippetUI::VisualProperty::VisualProperty(v13, *((const SnippetUI::VisualProperty **)a2 + 7));
    }
    else
    {
      v13 = 0;
    }
    *((_QWORD *)this + 7) = v13;
    if (*((_QWORD *)a2 + 8))
    {
      v9 = (SnippetUI::ActionProperty *)operator new();
      SnippetUI::ActionProperty::ActionProperty(v9, *((const SnippetUI::ActionProperty **)a2 + 8));
    }
    else
    {
      v9 = 0;
    }
  }
  *((_QWORD *)this + 8) = v9;
  return this;
}

void sub_1BF919F0C(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;

  MEMORY[0x1C3B8D890](v2, 0x10A1C40B18DE219);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::PrimaryHeader_Rich::CopyFrom(SnippetUI::PrimaryHeader_Rich *this, const SnippetUI::PrimaryHeader_Rich *a2)
{
  if (a2 != this)
  {
    SnippetUI::PrimaryHeader_Rich::Clear(this);
    SnippetUI::PrimaryHeader_Rich::MergeFrom(this, a2);
  }
}

void SnippetUI::PrimaryHeader_Rich::InternalSwap(SnippetUI::PrimaryHeader_Rich *this, SnippetUI::PrimaryHeader_Rich *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  uint64_t v5;
  google::protobuf::UnknownFieldSet *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  google::protobuf::UnknownFieldSet *v19;

  v4 = (SnippetUI::PrimaryHeader_Rich *)((char *)this + 8);
  v5 = *((_QWORD *)a2 + 1);
  if ((*((_BYTE *)this + 8) & 1) != 0)
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v6 = v19;
      goto LABEL_6;
    }
LABEL_5:
    v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
    google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
    goto LABEL_7;
  }
  if ((v5 & 1) != 0)
    goto LABEL_5;
LABEL_7:
  v7 = (uint64_t *)*((_QWORD *)this + 2);
  v8 = (uint64_t **)((char *)a2 + 16);
  if (v7 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_13;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 2, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v7 = (uint64_t *)*((_QWORD *)this + 2);
  }
  v9 = *v8;
  if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 2, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v9 = *v8;
  }
  v10 = v7[2];
  v11 = *(_OWORD *)v7;
  v12 = v9[2];
  *(_OWORD *)v7 = *(_OWORD *)v9;
  v7[2] = v12;
  *(_OWORD *)v9 = v11;
  v9[2] = v10;
LABEL_13:
  v13 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v13;
  v14 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v14;
  v15 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v15;
  v16 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v16;
  v17 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v17;
  v18 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v18;
}

_QWORD *YAML::Parser::Parser(_QWORD *this)
{
  *this = 0;
  this[1] = 0;
  return this;
}

{
  *this = 0;
  this[1] = 0;
  return this;
}

_QWORD *YAML::Parser::Parser(_QWORD *a1, _QWORD *a2)
{
  *a1 = 0;
  a1[1] = 0;
  YAML::Parser::Load((uint64_t)a1, a2);
  return a1;
}

{
  *a1 = 0;
  a1[1] = 0;
  YAML::Parser::Load((uint64_t)a1, a2);
  return a1;
}

void sub_1BF91A12C(_Unwind_Exception *a1)
{
  YAML::Parser *v1;

  YAML::Parser::~Parser(v1);
  _Unwind_Resume(a1);
}

uint64_t *YAML::Parser::Load(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = operator new();
  YAML::Stream::Stream(v4, a2);
  *(_DWORD *)(v4 + 144) = 0;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 128) = 0u;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 168) = 0u;
  *(_OWORD *)(v4 + 184) = 0u;
  *(_OWORD *)(v4 + 200) = 0u;
  *(_OWORD *)(v4 + 216) = 0u;
  *(_OWORD *)(v4 + 232) = 0u;
  *(_OWORD *)(v4 + 248) = 0u;
  *(_QWORD *)(v4 + 312) = 0;
  *(_OWORD *)(v4 + 152) = 0u;
  *(_OWORD *)(v4 + 264) = 0u;
  *(_OWORD *)(v4 + 280) = 0u;
  *(_OWORD *)(v4 + 296) = 0u;
  std::unique_ptr<YAML::Scanner>::reset[abi:ne180100]((YAML::Scanner **)a1, (YAML::Scanner *)v4);
  v5 = operator new();
  *(_BYTE *)v5 = 1;
  *(_QWORD *)(v5 + 4) = 0x200000001;
  *(_QWORD *)(v5 + 32) = 0;
  *(_QWORD *)(v5 + 24) = 0;
  *(_QWORD *)(v5 + 16) = v5 + 24;
  return std::unique_ptr<YAML::Directives>::reset[abi:ne180100]((uint64_t *)(a1 + 8), v5);
}

void sub_1BF91A218(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D890](v1, 0x10F0C409A6F53B6);
  _Unwind_Resume(a1);
}

void YAML::Parser::~Parser(YAML::Parser *this)
{
  std::unique_ptr<YAML::Directives>::reset[abi:ne180100]((uint64_t *)this + 1, 0);
  std::unique_ptr<YAML::Scanner>::reset[abi:ne180100]((YAML::Scanner **)this, 0);
}

{
  std::unique_ptr<YAML::Directives>::reset[abi:ne180100]((uint64_t *)this + 1, 0);
  std::unique_ptr<YAML::Scanner>::reset[abi:ne180100]((YAML::Scanner **)this, 0);
}

uint64_t *std::unique_ptr<YAML::Directives>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*(_QWORD **)(v2 + 24));
    JUMPOUT(0x1C3B8D890);
  }
  return result;
}

YAML::Scanner *std::unique_ptr<YAML::Scanner>::reset[abi:ne180100](YAML::Scanner **a1, YAML::Scanner *a2)
{
  YAML::Scanner *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    YAML::Scanner::~Scanner(result);
    JUMPOUT(0x1C3B8D890);
  }
  return result;
}

void sub_1BF91A324(_Unwind_Exception *a1)
{
  YAML::Parser *v1;

  YAML::Parser::~Parser(v1);
  _Unwind_Resume(a1);
}

BOOL YAML::Parser::operator BOOL(YAML::Scanner **a1)
{
  YAML::Scanner *v1;

  v1 = *a1;
  if (!*a1)
    return 0;
  YAML::Scanner::EnsureTokensInQueue(*a1);
  return *((_QWORD *)v1 + 17) != 0;
}

uint64_t YAML::Parser::HandleNextDocument(YAML::Scanner **a1, uint64_t a2)
{
  YAML::Scanner *v4;
  _OWORD *v5;
  __int128 v7;
  uint64_t v8[2];
  char *v9[4];

  if (!*a1)
    return 0;
  YAML::Parser::ParseDirectives(a1);
  v4 = *a1;
  YAML::Scanner::EnsureTokensInQueue(*a1);
  if (!*((_QWORD *)v4 + 17))
    return 0;
  v7 = *(_OWORD *)a1;
  v5 = (_OWORD *)operator new();
  *v5 = 0u;
  v5[1] = 0u;
  v5[2] = 0u;
  v8[1] = (uint64_t)v9;
  memset(v9, 0, 24);
  v8[0] = (uint64_t)v5;
  YAML::SingleDocParser::HandleDocument((uint64_t)&v7, a2);
  std::__tree<std::string>::destroy(v9[0]);
  std::unique_ptr<YAML::CollectionStack>::reset[abi:ne180100](v8);
  return 1;
}

void sub_1BF91A468(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char *a13)
{
  uint64_t *v13;

  std::__tree<std::string>::destroy(a13);
  std::unique_ptr<YAML::CollectionStack>::reset[abi:ne180100](v13);
  _Unwind_Resume(a1);
}

void YAML::Parser::ParseDirectives(YAML::Scanner **this)
{
  char v2;
  uint64_t *v3;
  YAML::Scanner *v4;
  unint64_t v5;
  const YAML::Token *v6;
  uint64_t v7;

  v2 = 0;
  v3 = (uint64_t *)(this + 1);
  while (1)
  {
    v4 = *this;
    YAML::Scanner::EnsureTokensInQueue(*this);
    if (!*((_QWORD *)v4 + 17))
      break;
    v5 = YAML::Scanner::peek(*this);
    if (*(_DWORD *)(v5 + 4))
      break;
    v6 = (const YAML::Token *)v5;
    if ((v2 & 1) == 0)
    {
      v7 = operator new();
      *(_BYTE *)v7 = 1;
      *(_QWORD *)(v7 + 4) = 0x200000001;
      *(_QWORD *)(v7 + 32) = 0;
      *(_QWORD *)(v7 + 24) = 0;
      *(_QWORD *)(v7 + 16) = v7 + 24;
      std::unique_ptr<YAML::Directives>::reset[abi:ne180100](v3, v7);
    }
    YAML::Parser::HandleDirective((std::string *)this, v6);
    YAML::Scanner::pop(*this);
    v2 = 1;
  }
}

std::string *YAML::Parser::HandleDirective(std::string *this, const YAML::Token *a2)
{
  unsigned __int16 *v2;
  int v3;
  uint64_t v4;
  int v5;
  int v6;

  v2 = (unsigned __int16 *)((char *)a2 + 24);
  if (*((char *)a2 + 47) < 0)
  {
    v4 = *((_QWORD *)a2 + 4);
    if (v4 != 3)
    {
      if (v4 != 4)
        return this;
      v2 = *(unsigned __int16 **)v2;
      goto LABEL_8;
    }
    v2 = *(unsigned __int16 **)v2;
  }
  else
  {
    v3 = *((unsigned __int8 *)a2 + 47);
    if (v3 != 3)
    {
      if (v3 != 4)
        return this;
LABEL_8:
      if (*(_DWORD *)v2 == 1280131417)
        return (std::string *)YAML::Parser::HandleYamlDirective((YAML::Parser *)this, a2);
      return this;
    }
  }
  v5 = *v2;
  v6 = *((unsigned __int8 *)v2 + 2);
  if (v5 == 16724 && v6 == 71)
    return YAML::Parser::HandleTagDirective((YAML::Parser *)this, a2);
  return this;
}

uint64_t YAML::Parser::HandleYamlDirective(YAML::Parser *this, const YAML::Token *a2)
{
  const std::string *v3;
  char *v4;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v9;
  uint64_t v10;
  int v11;
  const std::string::value_type *v12;
  std::string::size_type v13;
  std::string *v14;
  __int128 v15;
  _QWORD *exception;
  _QWORD *v17;
  _QWORD *v18;
  std::string v19;
  __int128 v20;
  std::string::size_type v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE v25[56];
  void *__p;
  char v27;
  uint64_t v28;

  v4 = (char *)a2 + 48;
  v3 = (const std::string *)*((_QWORD *)a2 + 6);
  if (*((_QWORD *)v4 + 1) - (_QWORD)v3 != 24)
  {
    exception = __cxa_allocate_exception(0x38uLL);
    std::string::basic_string[abi:ne180100]<0>(&v22, "YAML directives must have exactly one argument");
    YAML::Exception::Exception((uint64_t)exception, (_DWORD *)a2 + 2, &v22);
    *exception = &off_1E793AF28;
  }
  if (!**((_BYTE **)this + 1))
  {
    v17 = __cxa_allocate_exception(0x38uLL);
    std::string::basic_string[abi:ne180100]<0>(&v22, "repeated YAML directive");
    YAML::Exception::Exception((uint64_t)v17, (_DWORD *)a2 + 2, &v22);
    *v17 = &off_1E793AF28;
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v22, v3);
  MEMORY[0x1C3B8D668](&v22, *((_QWORD *)this + 1) + 4);
  std::istream::get();
  MEMORY[0x1C3B8D668](&v22, *((_QWORD *)this + 1) + 8);
  if ((v25[*(_QWORD *)(v22 - 24)] & 5) != 0 || std::istream::peek() != -1)
  {
    v9 = __cxa_allocate_exception(0x38uLL);
    std::string::basic_string[abi:ne180100]<0>(&v19, "bad YAML version: ");
    v10 = *((_QWORD *)a2 + 6);
    v11 = *(char *)(v10 + 23);
    if (v11 >= 0)
      v12 = (const std::string::value_type *)*((_QWORD *)a2 + 6);
    else
      v12 = *(const std::string::value_type **)v10;
    if (v11 >= 0)
      v13 = *(unsigned __int8 *)(v10 + 23);
    else
      v13 = *(_QWORD *)(v10 + 8);
    v14 = std::string::append(&v19, v12, v13);
    v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v21 = v14->__r_.__value_.__r.__words[2];
    v20 = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    YAML::Exception::Exception((uint64_t)v9, (_DWORD *)a2 + 2, &v20);
    *v9 = &off_1E793AF28;
  }
  v6 = *((_QWORD *)this + 1);
  if (*(int *)(v6 + 4) >= 2)
  {
    v18 = __cxa_allocate_exception(0x38uLL);
    std::string::basic_string[abi:ne180100]<0>(&v20, "YAML major version too large");
    YAML::Exception::Exception((uint64_t)v18, (_DWORD *)a2 + 2, &v20);
    *v18 = &off_1E793AF28;
  }
  *(_BYTE *)v6 = 0;
  *(_QWORD *)&v22 = *MEMORY[0x1E0DE4F50];
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)&v22 + *(_QWORD *)(v22 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v23 = v7;
  v24 = MEMORY[0x1E0DE4FB8] + 16;
  if (v27 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1C3B8D80C](&v28);
}

void sub_1BF91A898(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  void *v27;
  int v28;

  if (a21 < 0)
  {
    operator delete(__p);
    if ((v28 & 1) == 0)
    {
LABEL_6:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a22);
      _Unwind_Resume(a1);
    }
  }
  else if (!v28)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v27);
  goto LABEL_6;
}

std::string *YAML::Parser::HandleTagDirective(YAML::Parser *this, const YAML::Token *a2)
{
  std::string *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  _QWORD *exception;
  _QWORD *v10;
  __int128 v11;

  v3 = (std::string *)*((_QWORD *)a2 + 6);
  if (*((_QWORD *)a2 + 7) - (_QWORD)v3 != 48)
  {
    exception = __cxa_allocate_exception(0x38uLL);
    std::string::basic_string[abi:ne180100]<0>(&v11, "TAG directives must have exactly two arguments");
    YAML::Exception::Exception((uint64_t)exception, (_DWORD *)a2 + 2, &v11);
    *exception = &off_1E793AF28;
  }
  v5 = std::__tree<std::string>::find<std::string>(*((_QWORD *)this + 1) + 16, *((const void ***)a2 + 6));
  v6 = *((_QWORD *)this + 1);
  if (v6 + 24 != v5)
  {
    v10 = __cxa_allocate_exception(0x38uLL);
    std::string::basic_string[abi:ne180100]<0>(&v11, "repeated TAG directive");
    YAML::Exception::Exception((uint64_t)v10, (_DWORD *)a2 + 2, &v11);
    *v10 = &off_1E793AF28;
  }
  *(_QWORD *)&v11 = v3;
  v7 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v6 + 16), (const void **)&v3->__r_.__value_.__l.__data_, (__int128 **)&v11);
  return std::string::operator=((std::string *)(v7 + 7), v3 + 1);
}

void sub_1BF91AA94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  char v16;

  if (a15 < 0)
    operator delete(__p);
  if ((v16 & 1) != 0)
    __cxa_free_exception(v15);
  _Unwind_Resume(exception_object);
}

void YAML::Parser::PrintTokens(YAML::Scanner **a1, _QWORD *a2)
{
  YAML::Scanner *v2;
  unint64_t v5;
  _QWORD *v6;
  int v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  void *p_p;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *__p;
  uint64_t v28;
  unsigned __int8 v29;
  _QWORD v30[3];
  _QWORD v31[3];
  _QWORD v32[3];
  _QWORD v33[3];
  _QWORD v34[3];
  _QWORD v35[3];
  _QWORD v36[3];
  _QWORD v37[3];
  _QWORD v38[3];
  _QWORD v39[3];
  _QWORD v40[3];
  _QWORD v41[3];
  _QWORD v42[3];
  _QWORD v43[3];
  _QWORD v44[3];
  _QWORD v45[3];
  _QWORD v46[3];
  _QWORD v47[3];
  _QWORD v48[3];
  _QWORD v49[5];

  v49[3] = *MEMORY[0x1E0C80C00];
  v2 = *a1;
  if (*a1)
  {
    while (1)
    {
      YAML::Scanner::EnsureTokensInQueue(v2);
      if (!*((_QWORD *)v2 + 17))
        break;
      v5 = YAML::Scanner::peek(*a1);
      std::string::basic_string[abi:ne180100]<0>(v30, "DIRECTIVE");
      std::string::basic_string[abi:ne180100]<0>(v31, "DOC_START");
      std::string::basic_string[abi:ne180100]<0>(v32, "DOC_END");
      std::string::basic_string[abi:ne180100]<0>(v33, "BLOCK_SEQ_START");
      std::string::basic_string[abi:ne180100]<0>(v34, "BLOCK_MAP_START");
      std::string::basic_string[abi:ne180100]<0>(v35, "BLOCK_SEQ_END");
      std::string::basic_string[abi:ne180100]<0>(v36, "BLOCK_MAP_END");
      std::string::basic_string[abi:ne180100]<0>(v37, "BLOCK_ENTRY");
      std::string::basic_string[abi:ne180100]<0>(v38, "FLOW_SEQ_START");
      std::string::basic_string[abi:ne180100]<0>(v39, "FLOW_MAP_START");
      std::string::basic_string[abi:ne180100]<0>(v40, "FLOW_SEQ_END");
      std::string::basic_string[abi:ne180100]<0>(v41, "FLOW_MAP_END");
      std::string::basic_string[abi:ne180100]<0>(v42, "FLOW_MAP_COMPACT");
      std::string::basic_string[abi:ne180100]<0>(v43, "FLOW_ENTRY");
      std::string::basic_string[abi:ne180100]<0>(v44, "KEY");
      std::string::basic_string[abi:ne180100]<0>(v45, "VALUE");
      std::string::basic_string[abi:ne180100]<0>(v46, "ANCHOR");
      std::string::basic_string[abi:ne180100]<0>(v47, "ALIAS");
      std::string::basic_string[abi:ne180100]<0>(v48, "TAG");
      std::string::basic_string[abi:ne180100]<0>(v49, "SCALAR");
      v6 = &v30[3 * *(unsigned int *)(v5 + 4)];
      v7 = *((char *)v6 + 23);
      if (v7 >= 0)
        v8 = &v30[3 * *(unsigned int *)(v5 + 4)];
      else
        v8 = (_QWORD *)*v6;
      if (v7 >= 0)
        v9 = *((unsigned __int8 *)v6 + 23);
      else
        v9 = v6[1];
      v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)v8, v9);
      std::string::basic_string[abi:ne180100]<0>(&__p, ": ");
      if ((v29 & 0x80u) == 0)
        p_p = &__p;
      else
        p_p = __p;
      if ((v29 & 0x80u) == 0)
        v12 = v29;
      else
        v12 = v28;
      v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)p_p, v12);
      v14 = *(char *)(v5 + 47);
      if (v14 >= 0)
        v15 = v5 + 24;
      else
        v15 = *(_QWORD *)(v5 + 24);
      if (v14 >= 0)
        v16 = *(unsigned __int8 *)(v5 + 47);
      else
        v16 = *(_QWORD *)(v5 + 32);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, v15, v16);
      if ((char)v29 < 0)
        operator delete(__p);
      if (*(_QWORD *)(v5 + 56) != *(_QWORD *)(v5 + 48))
      {
        v17 = 0;
        v18 = 0;
        do
        {
          std::string::basic_string[abi:ne180100]<0>(&__p, " ");
          if ((v29 & 0x80u) == 0)
            v19 = &__p;
          else
            v19 = __p;
          if ((v29 & 0x80u) == 0)
            v20 = v29;
          else
            v20 = v28;
          v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)v19, v20);
          v22 = *(_QWORD *)(v5 + 48) + v17;
          v23 = *(char *)(v22 + 23);
          if (v23 >= 0)
            v24 = *(_QWORD *)(v5 + 48) + v17;
          else
            v24 = *(_QWORD *)v22;
          if (v23 >= 0)
            v25 = *(unsigned __int8 *)(v22 + 23);
          else
            v25 = *(_QWORD *)(v22 + 8);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, v24, v25);
          if ((char)v29 < 0)
            operator delete(__p);
          ++v18;
          v17 += 24;
        }
        while (v18 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v5 + 56) - *(_QWORD *)(v5 + 48)) >> 3));
      }
      v26 = 60;
      do
      {
        if (SHIBYTE(v30[v26 - 1]) < 0)
          operator delete(*(void **)((char *)&__p + v26 * 8));
        v26 -= 3;
      }
      while (v26 * 8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"\n", 1);
      YAML::Scanner::pop(*a1);
      v2 = *a1;
    }
  }
}

void sub_1BF91AEE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,char a34)
{
  uint64_t v35;

  v35 = 480;
  while (1)
  {
    if (*(&a34 + v35 - 1) < 0)
      operator delete(*(void **)(&a34 + v35 - 24));
    v35 -= 24;
    if (!v35)
      _Unwind_Resume(exception_object);
  }
}

double siri::dialogengine::RoundToInteger(siri::dialogengine *this, double a2)
{
  return (double)(int)llround(a2);
}

double siri::dialogengine::RoundToNearestTenth(siri::dialogengine *this, double a2)
{
  return round(a2 * 10.0) / 10.0;
}

double siri::dialogengine::RoundToNearestHundredth(siri::dialogengine *this, double a2)
{
  return round(a2 * 100.0) / 100.0;
}

void siri::dialogengine::DialogDuration::years(siri::dialogengine::DialogDuration *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  uint64_t v4;
  uint64_t v5;
  std::string v6;
  std::string v7;
  std::string v8;
  void *__p[2];
  char v10;
  std::string v11;
  std::string v12;

  v4 = siri::dialogengine::GetDurationForRequest(a2, a2, a3) / 31556952;
  std::string::basic_string[abi:ne180100]<0>(__p, "years");
  siri::dialogengine::GetUnitAndAmount((uint64_t)&v11, this, (siri::dialogengine *)v4, (uint64_t)__p, 0);
  if (v10 < 0)
    operator delete(__p[0]);
  v5 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&v8, "");
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v7, v11.__r_.__value_.__l.__data_, v11.__r_.__value_.__l.__size_);
  else
    v7 = v11;
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v6, v12.__r_.__value_.__l.__data_, v12.__r_.__value_.__l.__size_);
  else
    v6 = v12;
  siri::dialogengine::VariableString::VariableString(v5, &v8, &v7, &v6);
}

void sub_1BF91B164(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31)
{
  uint64_t v31;

  if (a21 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  MEMORY[0x1C3B8D890](v31, 0x10B3C40D3060B95);
  siri::dialogengine::SpeakableString::~SpeakableString(&a31);
  _Unwind_Resume(a1);
}

void sub_1BF91B1E0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0)
    operator delete(__p);
  JUMPOUT(0x1BF91B1D8);
}

uint64_t siri::dialogengine::GetDurationForRequest(siri::dialogengine *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  double *RequiredNumberParameter;
  double *v5;
  void *__p[2];
  char v8;

  std::string::basic_string[abi:ne180100]<0>(__p, "secs");
  RequiredNumberParameter = (double *)siri::dialogengine::GetRequiredNumberParameter((const void **)__p, (uint64_t)this);
  v5 = RequiredNumberParameter;
  if (v8 < 0)
  {
    operator delete(__p[0]);
    if (v5)
      return (uint64_t)v5[9];
  }
  else if (RequiredNumberParameter)
  {
    return (uint64_t)v5[9];
  }
  return 0;
}

void sub_1BF91B264(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::GetUnitAndAmount(uint64_t a1, _QWORD *a2, siri::dialogengine *this, uint64_t a4, int a5)
{
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16[3];
  uint64_t *v17[3];
  std::string v18;
  __int128 v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  siri::dialogengine::CreateJSONInt64Val(this, v16);
  if (*(char *)(a4 + 23) < 0)
    std::string::__init_copy_ctor_external(&v18, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
  else
    v18 = *(std::string *)a4;
  v19 = *(_OWORD *)v16;
  *(_OWORD *)v16 = 0uLL;
  std::map<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>::map[abi:ne180100]((uint64_t)v17, (const void **)&v18.__r_.__value_.__l.__data_, 1);
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v19 + 1);
  if (*((_QWORD *)&v19 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
  v13 = (std::__shared_weak_count *)v16[1];
  if (v16[1])
  {
    v14 = (unint64_t *)(v16[1] + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (a5 == 1)
    siri::dialogengine::AddFractionalPeriodParameters(v17, (uint64_t *)a4, (uint64_t)this);
  std::operator+<char>();
  siri::dialogengine::ExecuteSharedCat(a2, (uint64_t)&v18, (const void ***)v17, a1);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(v17[1]);
}

void sub_1BF91B418(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void siri::dialogengine::AddFractionalPeriodParameters(uint64_t **a1, uint64_t *a2, uint64_t a3)
{
  unsigned int v5;
  uint64_t v6;
  BOOL v7;
  _BOOL8 v8;
  int v9;
  _BOOL8 v10;
  int v11;
  BOOL v12;
  BOOL v14;
  uint64_t v16;
  uint64_t v20;
  _OWORD *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  _OWORD *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  _OWORD *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  __int128 v34;
  void *__p[2];
  char v36;
  uint64_t v37;
  uint64_t v38;
  void **v39;

  if (!a3)
    return;
  siri::dialogengine::UnitQuantities::UnitQuantities(__p, a3, 0);
  if ((*((char *)a2 + 23) & 0x80000000) == 0)
  {
    v5 = *((unsigned __int8 *)a2 + 23);
    if (v5 <= 0xD)
    {
      if (v5 != 7)
      {
        if (v5 != 12)
          return;
        goto LABEL_11;
      }
      if (*(_DWORD *)a2 != 1868785011 || *(_DWORD *)((char *)a2 + 3) != 1935961711)
        return;
LABEL_60:
      v20 = v38;
      if (v38 != 30 && v38)
        return;
      v10 = 0;
      v11 = 0;
      goto LABEL_74;
    }
    if (v5 != 14)
    {
      if (v5 != 19)
        return;
      v12 = *a2 == 0x6E694D7372756F68 && a2[1] == 0x6F63655373657475;
      if (!v12 || *(uint64_t *)((char *)a2 + 11) != 0x73646E6F63655373)
        return;
      goto LABEL_40;
    }
    if (*a2 != 0x53736574756E696DLL || *(uint64_t *)((char *)a2 + 6) != 0x73646E6F63655373)
      return;
LABEL_68:
    v16 = v37;
    if (v37 != 30 && v37)
      goto LABEL_71;
    goto LABEL_70;
  }
  v6 = a2[1];
  if (v6 <= 13)
  {
    if (v6 != 7)
    {
      if (v6 != 12)
        return;
      a2 = (uint64_t *)*a2;
LABEL_11:
      v7 = *a2 == 0x6E694D7372756F68 && *((_DWORD *)a2 + 2) == 1936028789;
      if (!v7 || v37 != 30 && v37)
        return;
      v8 = 0;
      v9 = 0;
      v10 = v37 == 30;
      v11 = 1;
      goto LABEL_75;
    }
    if (*(_DWORD *)*a2 != 1868785011 || *(_DWORD *)(*a2 + 3) != 1935961711)
      return;
    goto LABEL_60;
  }
  if (v6 == 14)
  {
    if (*(_QWORD *)*a2 != 0x53736574756E696DLL || *(_QWORD *)(*a2 + 6) != 0x73646E6F63655373)
      return;
    goto LABEL_68;
  }
  if (v6 != 19)
    return;
  v14 = *(_QWORD *)*a2 == 0x6E694D7372756F68 && *(_QWORD *)(*a2 + 8) == 0x6F63655373657475;
  if (!v14 || *(_QWORD *)(*a2 + 11) != 0x73646E6F63655373)
    return;
LABEL_40:
  v16 = v37;
  if (v37 != 30 && v37)
  {
LABEL_71:
    v10 = 0;
    v11 = 0;
    goto LABEL_72;
  }
LABEL_70:
  v10 = v16 == 30;
  v11 = 1;
LABEL_72:
  v20 = v38;
  if (v38 != 30 && v38)
  {
    if ((v11 & 1) == 0)
      return;
    v8 = 0;
    v9 = 0;
    goto LABEL_75;
  }
LABEL_74:
  v8 = v20 == 30;
  v9 = 1;
LABEL_75:
  siri::dialogengine::CreateJSONBoolVal((siri::dialogengine *)1, (uint64_t *)&v34);
  std::string::basic_string[abi:ne180100]<0>(__p, "fractionalUnitsMode");
  v39 = __p;
  v22 = std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)__p, (_OWORD **)&v39);
  std::shared_ptr<siri::dialogengine::JSONValue>::operator=[abi:ne180100]((uint64_t)v22 + 56, &v34);
  if (v36 < 0)
    operator delete(__p[0]);
  v23 = (std::__shared_weak_count *)*((_QWORD *)&v34 + 1);
  if (*((_QWORD *)&v34 + 1))
  {
    v24 = (unint64_t *)(*((_QWORD *)&v34 + 1) + 8);
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  if (v11)
  {
    siri::dialogengine::CreateJSONBoolVal((siri::dialogengine *)v10, (uint64_t *)&v34);
    std::string::basic_string[abi:ne180100]<0>(__p, "hasHalfHour");
    v39 = __p;
    v26 = std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)__p, (_OWORD **)&v39);
    std::shared_ptr<siri::dialogengine::JSONValue>::operator=[abi:ne180100]((uint64_t)v26 + 56, &v34);
    if (v36 < 0)
      operator delete(__p[0]);
    v27 = (std::__shared_weak_count *)*((_QWORD *)&v34 + 1);
    if (*((_QWORD *)&v34 + 1))
    {
      v28 = (unint64_t *)(*((_QWORD *)&v34 + 1) + 8);
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
  }
  if (v9)
  {
    siri::dialogengine::CreateJSONBoolVal((siri::dialogengine *)v8, (uint64_t *)&v34);
    std::string::basic_string[abi:ne180100]<0>(__p, "hasHalfMinute");
    v39 = __p;
    v30 = std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)__p, (_OWORD **)&v39);
    std::shared_ptr<siri::dialogengine::JSONValue>::operator=[abi:ne180100]((uint64_t)v30 + 56, &v34);
    if (v36 < 0)
      operator delete(__p[0]);
    v31 = (std::__shared_weak_count *)*((_QWORD *)&v34 + 1);
    if (*((_QWORD *)&v34 + 1))
    {
      v32 = (unint64_t *)(*((_QWORD *)&v34 + 1) + 8);
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
  }
}

void sub_1BF91B8F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  _Unwind_Resume(a1);
}

_QWORD *siri::dialogengine::UnitQuantities::UnitQuantities(_QWORD *this, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *this = a2;
  this[1] = a2 / 31556952;
  this[2] = a2 % 31556952 / 2629746;
  this[3] = 0;
  v3 = a2 % 31556952 % 2629746;
  if (a3)
  {
    this[3] = v3 / 604800;
    v3 %= 604800;
  }
  v4 = v3 / 86400;
  v5 = v3 % 86400;
  this[4] = v4;
  this[5] = v5 / 3600;
  v5 %= 3600;
  this[6] = v5 / 60;
  this[7] = v5 % 60;
  return this;
}

void siri::dialogengine::DialogDuration::months(siri::dialogengine::DialogDuration *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  uint64_t v4;
  uint64_t v5;
  std::string v6;
  std::string v7;
  std::string v8;
  void *__p[2];
  char v10;
  std::string v11;
  std::string v12;

  v4 = siri::dialogengine::GetDurationForRequest(a2, a2, a3) / 2629746;
  std::string::basic_string[abi:ne180100]<0>(__p, "months");
  siri::dialogengine::GetUnitAndAmount((uint64_t)&v11, this, (siri::dialogengine *)v4, (uint64_t)__p, 0);
  if (v10 < 0)
    operator delete(__p[0]);
  v5 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&v8, "");
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v7, v11.__r_.__value_.__l.__data_, v11.__r_.__value_.__l.__size_);
  else
    v7 = v11;
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v6, v12.__r_.__value_.__l.__data_, v12.__r_.__value_.__l.__size_);
  else
    v6 = v12;
  siri::dialogengine::VariableString::VariableString(v5, &v8, &v7, &v6);
}

void sub_1BF91BC00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31)
{
  uint64_t v31;

  if (a21 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  MEMORY[0x1C3B8D890](v31, 0x10B3C40D3060B95);
  siri::dialogengine::SpeakableString::~SpeakableString(&a31);
  _Unwind_Resume(a1);
}

void sub_1BF91BC7C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0)
    operator delete(__p);
  JUMPOUT(0x1BF91BC74);
}

void siri::dialogengine::DialogDuration::weeks(siri::dialogengine::DialogDuration *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  uint64_t v4;
  uint64_t v5;
  std::string v6;
  std::string v7;
  std::string v8;
  void *__p[2];
  char v10;
  std::string v11;
  std::string v12;

  v4 = siri::dialogengine::GetDurationForRequest(a2, a2, a3) / 604800;
  std::string::basic_string[abi:ne180100]<0>(__p, "weeks");
  siri::dialogengine::GetUnitAndAmount((uint64_t)&v11, this, (siri::dialogengine *)v4, (uint64_t)__p, 0);
  if (v10 < 0)
    operator delete(__p[0]);
  v5 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&v8, "");
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v7, v11.__r_.__value_.__l.__data_, v11.__r_.__value_.__l.__size_);
  else
    v7 = v11;
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v6, v12.__r_.__value_.__l.__data_, v12.__r_.__value_.__l.__size_);
  else
    v6 = v12;
  siri::dialogengine::VariableString::VariableString(v5, &v8, &v7, &v6);
}

void sub_1BF91BE54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31)
{
  uint64_t v31;

  if (a21 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  MEMORY[0x1C3B8D890](v31, 0x10B3C40D3060B95);
  siri::dialogengine::SpeakableString::~SpeakableString(&a31);
  _Unwind_Resume(a1);
}

void sub_1BF91BED0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0)
    operator delete(__p);
  JUMPOUT(0x1BF91BEC8);
}

void siri::dialogengine::DialogDuration::days(siri::dialogengine::DialogDuration *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  uint64_t v4;
  uint64_t v5;
  std::string v6;
  std::string v7;
  std::string v8;
  void *__p[2];
  char v10;
  std::string v11;
  std::string v12;

  v4 = siri::dialogengine::GetDurationForRequest(a2, a2, a3) / 86400;
  std::string::basic_string[abi:ne180100]<0>(__p, "days");
  siri::dialogengine::GetUnitAndAmount((uint64_t)&v11, this, (siri::dialogengine *)v4, (uint64_t)__p, 0);
  if (v10 < 0)
    operator delete(__p[0]);
  v5 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&v8, "");
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v7, v11.__r_.__value_.__l.__data_, v11.__r_.__value_.__l.__size_);
  else
    v7 = v11;
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v6, v12.__r_.__value_.__l.__data_, v12.__r_.__value_.__l.__size_);
  else
    v6 = v12;
  siri::dialogengine::VariableString::VariableString(v5, &v8, &v7, &v6);
}

void sub_1BF91C0A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31)
{
  uint64_t v31;

  if (a21 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  MEMORY[0x1C3B8D890](v31, 0x10B3C40D3060B95);
  siri::dialogengine::SpeakableString::~SpeakableString(&a31);
  _Unwind_Resume(a1);
}

void sub_1BF91C124(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0)
    operator delete(__p);
  JUMPOUT(0x1BF91C11CLL);
}

void siri::dialogengine::DialogDuration::hours(siri::dialogengine::DialogDuration *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  uint64_t v4;
  uint64_t v5;
  std::string v6;
  std::string v7;
  std::string v8;
  void *__p[2];
  char v10;
  std::string v11;
  std::string v12;

  v4 = siri::dialogengine::GetDurationForRequest(a2, a2, a3) / 3600;
  std::string::basic_string[abi:ne180100]<0>(__p, "hours");
  siri::dialogengine::GetUnitAndAmount((uint64_t)&v11, this, (siri::dialogengine *)v4, (uint64_t)__p, 0);
  if (v10 < 0)
    operator delete(__p[0]);
  v5 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&v8, "");
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v7, v11.__r_.__value_.__l.__data_, v11.__r_.__value_.__l.__size_);
  else
    v7 = v11;
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v6, v12.__r_.__value_.__l.__data_, v12.__r_.__value_.__l.__size_);
  else
    v6 = v12;
  siri::dialogengine::VariableString::VariableString(v5, &v8, &v7, &v6);
}

void sub_1BF91C2FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31)
{
  uint64_t v31;

  if (a21 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  MEMORY[0x1C3B8D890](v31, 0x10B3C40D3060B95);
  siri::dialogengine::SpeakableString::~SpeakableString(&a31);
  _Unwind_Resume(a1);
}

void sub_1BF91C378(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0)
    operator delete(__p);
  JUMPOUT(0x1BF91C370);
}

void siri::dialogengine::DialogDuration::minutes(siri::dialogengine::DialogDuration *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  uint64_t v4;
  uint64_t v5;
  std::string v6;
  std::string v7;
  std::string v8;
  void *__p[2];
  char v10;
  std::string v11;
  std::string v12;

  v4 = siri::dialogengine::GetDurationForRequest(a2, a2, a3) / 60;
  std::string::basic_string[abi:ne180100]<0>(__p, "minutes");
  siri::dialogengine::GetUnitAndAmount((uint64_t)&v11, this, (siri::dialogengine *)v4, (uint64_t)__p, 0);
  if (v10 < 0)
    operator delete(__p[0]);
  v5 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&v8, "");
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v7, v11.__r_.__value_.__l.__data_, v11.__r_.__value_.__l.__size_);
  else
    v7 = v11;
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v6, v12.__r_.__value_.__l.__data_, v12.__r_.__value_.__l.__size_);
  else
    v6 = v12;
  siri::dialogengine::VariableString::VariableString(v5, &v8, &v7, &v6);
}

void sub_1BF91C54C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31)
{
  uint64_t v31;

  if (a21 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  MEMORY[0x1C3B8D890](v31, 0x10B3C40D3060B95);
  siri::dialogengine::SpeakableString::~SpeakableString(&a31);
  _Unwind_Resume(a1);
}

void sub_1BF91C5C8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0)
    operator delete(__p);
  JUMPOUT(0x1BF91C5C0);
}

void siri::dialogengine::DialogDuration::seconds(siri::dialogengine::DialogDuration *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  siri::dialogengine *DurationForRequest;
  uint64_t v5;
  std::string __p;
  std::string v7;
  std::string v8;
  std::string v9;
  std::string v10;

  DurationForRequest = (siri::dialogengine *)siri::dialogengine::GetDurationForRequest(a2, a2, a3);
  siri::dialogengine::executeSeconds((uint64_t)&v9, this, DurationForRequest, 0);
  v5 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&v8, "");
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v7, v9.__r_.__value_.__l.__data_, v9.__r_.__value_.__l.__size_);
  else
    v7 = v9;
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v10.__r_.__value_.__l.__data_, v10.__r_.__value_.__l.__size_);
  else
    __p = v10;
  siri::dialogengine::VariableString::VariableString(v5, &v8, &v7, &__p);
}

void sub_1BF91C760(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29)
{
  uint64_t v29;

  if (a21 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  MEMORY[0x1C3B8D890](v29, 0x10B3C40D3060B95);
  siri::dialogengine::SpeakableString::~SpeakableString(&a29);
  _Unwind_Resume(a1);
}

void siri::dialogengine::executeSeconds(uint64_t a1, _QWORD *a2, siri::dialogengine *a3, int a4)
{
  void *__p[2];
  char v9;

  std::string::basic_string[abi:ne180100]<0>(__p, "seconds");
  siri::dialogengine::GetUnitAndAmount(a1, a2, a3, (uint64_t)__p, a4);
  if (v9 < 0)
    operator delete(__p[0]);
}

void sub_1BF91C84C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::DialogDuration::valueInYears(siri::dialogengine::DialogDuration *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  uint64_t DurationForRequest;
  uint64_t v4;
  std::string __p;

  DurationForRequest = siri::dialogengine::GetDurationForRequest(a2, a2, a3);
  v4 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  siri::dialogengine::VariableNumber::VariableNumber(v4, &__p, (double)DurationForRequest / 31556952.0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v4;
}

void sub_1BF91C8F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  MEMORY[0x1C3B8D890](v15, 0x10B3C4030AE2ACELL);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::DialogDuration::valueInMonths(siri::dialogengine::DialogDuration *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  uint64_t DurationForRequest;
  uint64_t v4;
  std::string __p;

  DurationForRequest = siri::dialogengine::GetDurationForRequest(a2, a2, a3);
  v4 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  siri::dialogengine::VariableNumber::VariableNumber(v4, &__p, (double)DurationForRequest / 2629746.0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v4;
}

void sub_1BF91C9B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  MEMORY[0x1C3B8D890](v15, 0x10B3C4030AE2ACELL);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::DialogDuration::valueInWeeks(siri::dialogengine::DialogDuration *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  uint64_t DurationForRequest;
  uint64_t v4;
  std::string __p;

  DurationForRequest = siri::dialogengine::GetDurationForRequest(a2, a2, a3);
  v4 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  siri::dialogengine::VariableNumber::VariableNumber(v4, &__p, (double)DurationForRequest / 604800.0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v4;
}

void sub_1BF91CA78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  MEMORY[0x1C3B8D890](v15, 0x10B3C4030AE2ACELL);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::DialogDuration::valueInDays(siri::dialogengine::DialogDuration *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  uint64_t DurationForRequest;
  uint64_t v4;
  std::string __p;

  DurationForRequest = siri::dialogengine::GetDurationForRequest(a2, a2, a3);
  v4 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  siri::dialogengine::VariableNumber::VariableNumber(v4, &__p, (double)DurationForRequest / 86400.0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v4;
}

void sub_1BF91CB3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  MEMORY[0x1C3B8D890](v15, 0x10B3C4030AE2ACELL);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::DialogDuration::valueInHours(siri::dialogengine::DialogDuration *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  uint64_t DurationForRequest;
  uint64_t v4;
  std::string __p;

  DurationForRequest = siri::dialogengine::GetDurationForRequest(a2, a2, a3);
  v4 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  siri::dialogengine::VariableNumber::VariableNumber(v4, &__p, (double)DurationForRequest / 3600.0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v4;
}

void sub_1BF91CC00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  MEMORY[0x1C3B8D890](v15, 0x10B3C4030AE2ACELL);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::DialogDuration::valueInMinutes(siri::dialogengine::DialogDuration *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  uint64_t DurationForRequest;
  uint64_t v4;
  std::string __p;

  DurationForRequest = siri::dialogengine::GetDurationForRequest(a2, a2, a3);
  v4 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  siri::dialogengine::VariableNumber::VariableNumber(v4, &__p, (double)DurationForRequest / 60.0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v4;
}

void sub_1BF91CCC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  MEMORY[0x1C3B8D890](v15, 0x10B3C4030AE2ACELL);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::DialogDuration::valueInSeconds(siri::dialogengine::DialogDuration *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  uint64_t DurationForRequest;
  uint64_t v4;
  std::string __p;

  DurationForRequest = siri::dialogengine::GetDurationForRequest(a2, a2, a3);
  v4 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  siri::dialogengine::VariableNumber::VariableNumber(v4, &__p, (double)DurationForRequest);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v4;
}

void sub_1BF91CD7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  MEMORY[0x1C3B8D890](v15, 0x10B3C4030AE2ACELL);
  _Unwind_Resume(a1);
}

void siri::dialogengine::DialogDuration::duration(siri::dialogengine::DialogDuration *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  uint64_t DurationForRequest;
  const char *v5;
  siri::dialogengine *v6;
  std::string::size_type size;
  std::string::size_type v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  siri::dialogengine *v13;
  std::string::size_type v14;
  std::string::size_type v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  siri::dialogengine *v20;
  std::string::size_type v21;
  std::string::size_type v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  siri::dialogengine *v27;
  std::string::size_type v28;
  std::string::size_type v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  siri::dialogengine *v34;
  std::string::size_type v35;
  std::string::size_type v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  siri::dialogengine *v41;
  std::string::size_type v42;
  std::string::size_type v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  siri::dialogengine *v48;
  std::string::size_type v49;
  std::string::size_type v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  char *v55;
  std::string::size_type v56;
  uint64_t v57;
  unint64_t v58;
  __int128 *v59;
  __int128 v60;
  __int128 v61;
  const std::string::value_type *v62;
  std::string::size_type v63;
  std::string *v64;
  __int128 v65;
  std::string *v66;
  std::string::size_type v67;
  std::string::size_type v68;
  const std::string::value_type **v69;
  __int128 v70;
  const std::string::value_type *v71;
  std::string::size_type v72;
  std::string *v73;
  __int128 v74;
  std::string *v75;
  std::string::size_type v76;
  void *v77;
  std::string *v78;
  std::string::size_type v79;
  std::string *v80;
  std::string::size_type v81;
  uint64_t v82;
  void *v83[2];
  char v84;
  std::string v85;
  std::string v86;
  void *v87;
  std::string::size_type v88;
  unsigned __int8 v89;
  void *v90[2];
  char v91;
  void *v92[2];
  char v93;
  void *v94[2];
  char v95;
  void *v96[2];
  char v97;
  void *v98[2];
  char v99;
  void *v100[2];
  char v101;
  void *v102[2];
  char v103;
  std::string v104;
  void *v105;
  char v106;
  void *v107;
  char v108;
  void *v109;
  char v110;
  void *v111;
  char v112;
  void *v113;
  char v114;
  void *__p;
  char v116;
  uint64_t v117;
  siri::dialogengine *v118;
  siri::dialogengine *v119;
  siri::dialogengine *v120;
  siri::dialogengine *v121;
  siri::dialogengine *v122;
  siri::dialogengine *v123;
  siri::dialogengine *v124;
  std::string v125;
  std::string v126;
  unint64_t v127;
  std::string::value_type *v128;

  memset(&v125, 0, sizeof(v125));
  DurationForRequest = siri::dialogengine::GetDurationForRequest(a2, a2, a3);
  siri::dialogengine::UnitQuantities::UnitQuantities(&v117, DurationForRequest, 1);
  v6 = v118;
  if (v118)
  {
    std::string::basic_string[abi:ne180100]<0>(v102, "years");
    siri::dialogengine::GetUnitAndAmount((uint64_t)&v104, this, v6, (uint64_t)v102, 0);
    size = v125.__r_.__value_.__l.__size_;
    if (v125.__r_.__value_.__l.__size_ >= v125.__r_.__value_.__r.__words[2])
    {
      v9 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(v125.__r_.__value_.__l.__size_ - v125.__r_.__value_.__r.__words[0]) >> 3);
      if (v9 + 1 > 0x186186186186186)
        std::vector<BOOL>::__throw_length_error[abi:ne180100]();
      v10 = 0x9E79E79E79E79E7ALL
          * ((uint64_t)(v125.__r_.__value_.__r.__words[2] - v125.__r_.__value_.__r.__words[0]) >> 3);
      if (v10 <= v9 + 1)
        v10 = v9 + 1;
      if (0xCF3CF3CF3CF3CF3DLL
         * ((uint64_t)(v125.__r_.__value_.__r.__words[2] - v125.__r_.__value_.__r.__words[0]) >> 3) >= 0xC30C30C30C30C3)
        v11 = 0x186186186186186;
      else
        v11 = v10;
      v128 = &v125.__r_.__value_.__s.__data_[16];
      if (v11)
        v11 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<siri::dialogengine::SpeakableString>>(v11);
      else
        v12 = 0;
      v126.__r_.__value_.__r.__words[0] = v11;
      v126.__r_.__value_.__l.__size_ = v11 + 168 * v9;
      v126.__r_.__value_.__r.__words[2] = v126.__r_.__value_.__l.__size_;
      v127 = v11 + 168 * v12;
      siri::dialogengine::SpeakableString::SpeakableString((std::string *)v126.__r_.__value_.__l.__size_, (const siri::dialogengine::SpeakableString *)&v104);
      v126.__r_.__value_.__r.__words[2] += 168;
      std::vector<siri::dialogengine::SpeakableString>::__swap_out_circular_buffer(&v125, &v126);
      v8 = v125.__r_.__value_.__l.__size_;
      std::__split_buffer<siri::dialogengine::SpeakableString>::~__split_buffer((uint64_t)&v126);
    }
    else
    {
      siri::dialogengine::SpeakableString::SpeakableString((std::string *)v125.__r_.__value_.__l.__size_, (const siri::dialogengine::SpeakableString *)&v104);
      v8 = size + 168;
    }
    v125.__r_.__value_.__l.__size_ = v8;
    if (v116 < 0)
      operator delete(__p);
    if (v114 < 0)
      operator delete(v113);
    if (v112 < 0)
      operator delete(v111);
    if (v110 < 0)
      operator delete(v109);
    if (v108 < 0)
      operator delete(v107);
    if (v106 < 0)
      operator delete(v105);
    if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v104.__r_.__value_.__l.__data_);
    if (v103 < 0)
      operator delete(v102[0]);
  }
  v13 = v119;
  if (v119)
  {
    std::string::basic_string[abi:ne180100]<0>(v100, "months");
    siri::dialogengine::GetUnitAndAmount((uint64_t)&v104, this, v13, (uint64_t)v100, 0);
    v14 = v125.__r_.__value_.__l.__size_;
    if (v125.__r_.__value_.__l.__size_ >= v125.__r_.__value_.__r.__words[2])
    {
      v16 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(v125.__r_.__value_.__l.__size_ - v125.__r_.__value_.__r.__words[0]) >> 3);
      if (v16 + 1 > 0x186186186186186)
        std::vector<BOOL>::__throw_length_error[abi:ne180100]();
      v17 = 0x9E79E79E79E79E7ALL
          * ((uint64_t)(v125.__r_.__value_.__r.__words[2] - v125.__r_.__value_.__r.__words[0]) >> 3);
      if (v17 <= v16 + 1)
        v17 = v16 + 1;
      if (0xCF3CF3CF3CF3CF3DLL
         * ((uint64_t)(v125.__r_.__value_.__r.__words[2] - v125.__r_.__value_.__r.__words[0]) >> 3) >= 0xC30C30C30C30C3)
        v18 = 0x186186186186186;
      else
        v18 = v17;
      v128 = &v125.__r_.__value_.__s.__data_[16];
      if (v18)
        v18 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<siri::dialogengine::SpeakableString>>(v18);
      else
        v19 = 0;
      v126.__r_.__value_.__r.__words[0] = v18;
      v126.__r_.__value_.__l.__size_ = v18 + 168 * v16;
      v126.__r_.__value_.__r.__words[2] = v126.__r_.__value_.__l.__size_;
      v127 = v18 + 168 * v19;
      siri::dialogengine::SpeakableString::SpeakableString((std::string *)v126.__r_.__value_.__l.__size_, (const siri::dialogengine::SpeakableString *)&v104);
      v126.__r_.__value_.__r.__words[2] += 168;
      std::vector<siri::dialogengine::SpeakableString>::__swap_out_circular_buffer(&v125, &v126);
      v15 = v125.__r_.__value_.__l.__size_;
      std::__split_buffer<siri::dialogengine::SpeakableString>::~__split_buffer((uint64_t)&v126);
    }
    else
    {
      siri::dialogengine::SpeakableString::SpeakableString((std::string *)v125.__r_.__value_.__l.__size_, (const siri::dialogengine::SpeakableString *)&v104);
      v15 = v14 + 168;
    }
    v125.__r_.__value_.__l.__size_ = v15;
    if (v116 < 0)
      operator delete(__p);
    if (v114 < 0)
      operator delete(v113);
    if (v112 < 0)
      operator delete(v111);
    if (v110 < 0)
      operator delete(v109);
    if (v108 < 0)
      operator delete(v107);
    if (v106 < 0)
      operator delete(v105);
    if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v104.__r_.__value_.__l.__data_);
    if (v101 < 0)
      operator delete(v100[0]);
  }
  v20 = v120;
  if (v120)
  {
    std::string::basic_string[abi:ne180100]<0>(v98, "weeks");
    siri::dialogengine::GetUnitAndAmount((uint64_t)&v104, this, v20, (uint64_t)v98, 0);
    v21 = v125.__r_.__value_.__l.__size_;
    if (v125.__r_.__value_.__l.__size_ >= v125.__r_.__value_.__r.__words[2])
    {
      v23 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(v125.__r_.__value_.__l.__size_ - v125.__r_.__value_.__r.__words[0]) >> 3);
      if (v23 + 1 > 0x186186186186186)
        std::vector<BOOL>::__throw_length_error[abi:ne180100]();
      v24 = 0x9E79E79E79E79E7ALL
          * ((uint64_t)(v125.__r_.__value_.__r.__words[2] - v125.__r_.__value_.__r.__words[0]) >> 3);
      if (v24 <= v23 + 1)
        v24 = v23 + 1;
      if (0xCF3CF3CF3CF3CF3DLL
         * ((uint64_t)(v125.__r_.__value_.__r.__words[2] - v125.__r_.__value_.__r.__words[0]) >> 3) >= 0xC30C30C30C30C3)
        v25 = 0x186186186186186;
      else
        v25 = v24;
      v128 = &v125.__r_.__value_.__s.__data_[16];
      if (v25)
        v25 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<siri::dialogengine::SpeakableString>>(v25);
      else
        v26 = 0;
      v126.__r_.__value_.__r.__words[0] = v25;
      v126.__r_.__value_.__l.__size_ = v25 + 168 * v23;
      v126.__r_.__value_.__r.__words[2] = v126.__r_.__value_.__l.__size_;
      v127 = v25 + 168 * v26;
      siri::dialogengine::SpeakableString::SpeakableString((std::string *)v126.__r_.__value_.__l.__size_, (const siri::dialogengine::SpeakableString *)&v104);
      v126.__r_.__value_.__r.__words[2] += 168;
      std::vector<siri::dialogengine::SpeakableString>::__swap_out_circular_buffer(&v125, &v126);
      v22 = v125.__r_.__value_.__l.__size_;
      std::__split_buffer<siri::dialogengine::SpeakableString>::~__split_buffer((uint64_t)&v126);
    }
    else
    {
      siri::dialogengine::SpeakableString::SpeakableString((std::string *)v125.__r_.__value_.__l.__size_, (const siri::dialogengine::SpeakableString *)&v104);
      v22 = v21 + 168;
    }
    v125.__r_.__value_.__l.__size_ = v22;
    if (v116 < 0)
      operator delete(__p);
    if (v114 < 0)
      operator delete(v113);
    if (v112 < 0)
      operator delete(v111);
    if (v110 < 0)
      operator delete(v109);
    if (v108 < 0)
      operator delete(v107);
    if (v106 < 0)
      operator delete(v105);
    if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v104.__r_.__value_.__l.__data_);
    if (v99 < 0)
      operator delete(v98[0]);
  }
  v27 = v121;
  if (v121)
  {
    std::string::basic_string[abi:ne180100]<0>(v96, "days");
    siri::dialogengine::GetUnitAndAmount((uint64_t)&v104, this, v27, (uint64_t)v96, 0);
    v28 = v125.__r_.__value_.__l.__size_;
    if (v125.__r_.__value_.__l.__size_ >= v125.__r_.__value_.__r.__words[2])
    {
      v30 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(v125.__r_.__value_.__l.__size_ - v125.__r_.__value_.__r.__words[0]) >> 3);
      if (v30 + 1 > 0x186186186186186)
        std::vector<BOOL>::__throw_length_error[abi:ne180100]();
      v31 = 0x9E79E79E79E79E7ALL
          * ((uint64_t)(v125.__r_.__value_.__r.__words[2] - v125.__r_.__value_.__r.__words[0]) >> 3);
      if (v31 <= v30 + 1)
        v31 = v30 + 1;
      if (0xCF3CF3CF3CF3CF3DLL
         * ((uint64_t)(v125.__r_.__value_.__r.__words[2] - v125.__r_.__value_.__r.__words[0]) >> 3) >= 0xC30C30C30C30C3)
        v32 = 0x186186186186186;
      else
        v32 = v31;
      v128 = &v125.__r_.__value_.__s.__data_[16];
      if (v32)
        v32 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<siri::dialogengine::SpeakableString>>(v32);
      else
        v33 = 0;
      v126.__r_.__value_.__r.__words[0] = v32;
      v126.__r_.__value_.__l.__size_ = v32 + 168 * v30;
      v126.__r_.__value_.__r.__words[2] = v126.__r_.__value_.__l.__size_;
      v127 = v32 + 168 * v33;
      siri::dialogengine::SpeakableString::SpeakableString((std::string *)v126.__r_.__value_.__l.__size_, (const siri::dialogengine::SpeakableString *)&v104);
      v126.__r_.__value_.__r.__words[2] += 168;
      std::vector<siri::dialogengine::SpeakableString>::__swap_out_circular_buffer(&v125, &v126);
      v29 = v125.__r_.__value_.__l.__size_;
      std::__split_buffer<siri::dialogengine::SpeakableString>::~__split_buffer((uint64_t)&v126);
    }
    else
    {
      siri::dialogengine::SpeakableString::SpeakableString((std::string *)v125.__r_.__value_.__l.__size_, (const siri::dialogengine::SpeakableString *)&v104);
      v29 = v28 + 168;
    }
    v125.__r_.__value_.__l.__size_ = v29;
    if (v116 < 0)
      operator delete(__p);
    if (v114 < 0)
      operator delete(v113);
    if (v112 < 0)
      operator delete(v111);
    if (v110 < 0)
      operator delete(v109);
    if (v108 < 0)
      operator delete(v107);
    if (v106 < 0)
      operator delete(v105);
    if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v104.__r_.__value_.__l.__data_);
    if (v97 < 0)
      operator delete(v96[0]);
  }
  v34 = v122;
  if (v122)
  {
    std::string::basic_string[abi:ne180100]<0>(v94, "hours");
    siri::dialogengine::GetUnitAndAmount((uint64_t)&v104, this, v34, (uint64_t)v94, 0);
    v35 = v125.__r_.__value_.__l.__size_;
    if (v125.__r_.__value_.__l.__size_ >= v125.__r_.__value_.__r.__words[2])
    {
      v37 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(v125.__r_.__value_.__l.__size_ - v125.__r_.__value_.__r.__words[0]) >> 3);
      if (v37 + 1 > 0x186186186186186)
        std::vector<BOOL>::__throw_length_error[abi:ne180100]();
      v38 = 0x9E79E79E79E79E7ALL
          * ((uint64_t)(v125.__r_.__value_.__r.__words[2] - v125.__r_.__value_.__r.__words[0]) >> 3);
      if (v38 <= v37 + 1)
        v38 = v37 + 1;
      if (0xCF3CF3CF3CF3CF3DLL
         * ((uint64_t)(v125.__r_.__value_.__r.__words[2] - v125.__r_.__value_.__r.__words[0]) >> 3) >= 0xC30C30C30C30C3)
        v39 = 0x186186186186186;
      else
        v39 = v38;
      v128 = &v125.__r_.__value_.__s.__data_[16];
      if (v39)
        v39 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<siri::dialogengine::SpeakableString>>(v39);
      else
        v40 = 0;
      v126.__r_.__value_.__r.__words[0] = v39;
      v126.__r_.__value_.__l.__size_ = v39 + 168 * v37;
      v126.__r_.__value_.__r.__words[2] = v126.__r_.__value_.__l.__size_;
      v127 = v39 + 168 * v40;
      siri::dialogengine::SpeakableString::SpeakableString((std::string *)v126.__r_.__value_.__l.__size_, (const siri::dialogengine::SpeakableString *)&v104);
      v126.__r_.__value_.__r.__words[2] += 168;
      std::vector<siri::dialogengine::SpeakableString>::__swap_out_circular_buffer(&v125, &v126);
      v36 = v125.__r_.__value_.__l.__size_;
      std::__split_buffer<siri::dialogengine::SpeakableString>::~__split_buffer((uint64_t)&v126);
    }
    else
    {
      siri::dialogengine::SpeakableString::SpeakableString((std::string *)v125.__r_.__value_.__l.__size_, (const siri::dialogengine::SpeakableString *)&v104);
      v36 = v35 + 168;
    }
    v125.__r_.__value_.__l.__size_ = v36;
    if (v116 < 0)
      operator delete(__p);
    if (v114 < 0)
      operator delete(v113);
    if (v112 < 0)
      operator delete(v111);
    if (v110 < 0)
      operator delete(v109);
    if (v108 < 0)
      operator delete(v107);
    if (v106 < 0)
      operator delete(v105);
    if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v104.__r_.__value_.__l.__data_);
    if (v95 < 0)
      operator delete(v94[0]);
  }
  v41 = v123;
  if (v123)
  {
    std::string::basic_string[abi:ne180100]<0>(v92, "minutes");
    siri::dialogengine::GetUnitAndAmount((uint64_t)&v104, this, v41, (uint64_t)v92, 0);
    v42 = v125.__r_.__value_.__l.__size_;
    if (v125.__r_.__value_.__l.__size_ >= v125.__r_.__value_.__r.__words[2])
    {
      v44 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(v125.__r_.__value_.__l.__size_ - v125.__r_.__value_.__r.__words[0]) >> 3);
      if (v44 + 1 > 0x186186186186186)
        std::vector<BOOL>::__throw_length_error[abi:ne180100]();
      v45 = 0x9E79E79E79E79E7ALL
          * ((uint64_t)(v125.__r_.__value_.__r.__words[2] - v125.__r_.__value_.__r.__words[0]) >> 3);
      if (v45 <= v44 + 1)
        v45 = v44 + 1;
      if (0xCF3CF3CF3CF3CF3DLL
         * ((uint64_t)(v125.__r_.__value_.__r.__words[2] - v125.__r_.__value_.__r.__words[0]) >> 3) >= 0xC30C30C30C30C3)
        v46 = 0x186186186186186;
      else
        v46 = v45;
      v128 = &v125.__r_.__value_.__s.__data_[16];
      if (v46)
        v46 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<siri::dialogengine::SpeakableString>>(v46);
      else
        v47 = 0;
      v126.__r_.__value_.__r.__words[0] = v46;
      v126.__r_.__value_.__l.__size_ = v46 + 168 * v44;
      v126.__r_.__value_.__r.__words[2] = v126.__r_.__value_.__l.__size_;
      v127 = v46 + 168 * v47;
      siri::dialogengine::SpeakableString::SpeakableString((std::string *)v126.__r_.__value_.__l.__size_, (const siri::dialogengine::SpeakableString *)&v104);
      v126.__r_.__value_.__r.__words[2] += 168;
      std::vector<siri::dialogengine::SpeakableString>::__swap_out_circular_buffer(&v125, &v126);
      v43 = v125.__r_.__value_.__l.__size_;
      std::__split_buffer<siri::dialogengine::SpeakableString>::~__split_buffer((uint64_t)&v126);
    }
    else
    {
      siri::dialogengine::SpeakableString::SpeakableString((std::string *)v125.__r_.__value_.__l.__size_, (const siri::dialogengine::SpeakableString *)&v104);
      v43 = v42 + 168;
    }
    v125.__r_.__value_.__l.__size_ = v43;
    if (v116 < 0)
      operator delete(__p);
    if (v114 < 0)
      operator delete(v113);
    if (v112 < 0)
      operator delete(v111);
    if (v110 < 0)
      operator delete(v109);
    if (v108 < 0)
      operator delete(v107);
    if (v106 < 0)
      operator delete(v105);
    if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v104.__r_.__value_.__l.__data_);
    if (v93 < 0)
      operator delete(v92[0]);
  }
  v48 = v124;
  if (v124)
  {
    std::string::basic_string[abi:ne180100]<0>(v90, "seconds");
    siri::dialogengine::GetUnitAndAmount((uint64_t)&v104, this, v48, (uint64_t)v90, 0);
    v49 = v125.__r_.__value_.__l.__size_;
    if (v125.__r_.__value_.__l.__size_ >= v125.__r_.__value_.__r.__words[2])
    {
      v51 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(v125.__r_.__value_.__l.__size_ - v125.__r_.__value_.__r.__words[0]) >> 3);
      if (v51 + 1 > 0x186186186186186)
        std::vector<BOOL>::__throw_length_error[abi:ne180100]();
      v52 = 0x9E79E79E79E79E7ALL
          * ((uint64_t)(v125.__r_.__value_.__r.__words[2] - v125.__r_.__value_.__r.__words[0]) >> 3);
      if (v52 <= v51 + 1)
        v52 = v51 + 1;
      if (0xCF3CF3CF3CF3CF3DLL
         * ((uint64_t)(v125.__r_.__value_.__r.__words[2] - v125.__r_.__value_.__r.__words[0]) >> 3) >= 0xC30C30C30C30C3)
        v53 = 0x186186186186186;
      else
        v53 = v52;
      v128 = &v125.__r_.__value_.__s.__data_[16];
      if (v53)
        v53 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<siri::dialogengine::SpeakableString>>(v53);
      else
        v54 = 0;
      v126.__r_.__value_.__r.__words[0] = v53;
      v126.__r_.__value_.__l.__size_ = v53 + 168 * v51;
      v126.__r_.__value_.__r.__words[2] = v126.__r_.__value_.__l.__size_;
      v127 = v53 + 168 * v54;
      siri::dialogengine::SpeakableString::SpeakableString((std::string *)v126.__r_.__value_.__l.__size_, (const siri::dialogengine::SpeakableString *)&v104);
      v126.__r_.__value_.__r.__words[2] += 168;
      std::vector<siri::dialogengine::SpeakableString>::__swap_out_circular_buffer(&v125, &v126);
      v50 = v125.__r_.__value_.__l.__size_;
      std::__split_buffer<siri::dialogengine::SpeakableString>::~__split_buffer((uint64_t)&v126);
    }
    else
    {
      siri::dialogengine::SpeakableString::SpeakableString((std::string *)v125.__r_.__value_.__l.__size_, (const siri::dialogengine::SpeakableString *)&v104);
      v50 = v49 + 168;
    }
    v125.__r_.__value_.__l.__size_ = v50;
    if (v116 < 0)
      operator delete(__p);
    if (v114 < 0)
      operator delete(v113);
    if (v112 < 0)
      operator delete(v111);
    if (v110 < 0)
      operator delete(v109);
    if (v108 < 0)
      operator delete(v107);
    if (v106 < 0)
      operator delete(v105);
    if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v104.__r_.__value_.__l.__data_);
    if (v91 < 0)
      operator delete(v90[0]);
  }
  memset(&v104, 0, sizeof(v104));
  memset(&v126, 0, sizeof(v126));
  siri::dialogengine::Context::GetLocale(this, v5, (uint64_t)&v85);
  siri::dialogengine::GetLocaleLanguage(&v86);
  std::string::basic_string[abi:ne180100]<0>(v83, "ja");
  if (siri::dialogengine::StringsEqual((uint64_t)&v86, (uint64_t)v83))
    v55 = "";
  else
    v55 = ", ";
  std::string::basic_string[abi:ne180100]<0>(&v87, v55);
  if (v84 < 0)
    operator delete(v83[0]);
  if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v86.__r_.__value_.__l.__data_);
  if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v85.__r_.__value_.__l.__data_);
  v56 = v125.__r_.__value_.__r.__words[0];
  if (v125.__r_.__value_.__l.__size_ == v125.__r_.__value_.__r.__words[0])
  {
LABEL_278:
    v82 = operator new();
    std::string::basic_string[abi:ne180100]<0>(&v86, "");
    siri::dialogengine::VariableString::VariableString(v82, &v86, &v104, &v126);
  }
  v57 = 0;
  v58 = 0;
  while (1)
  {
    if (v58)
    {
      v59 = (__int128 *)(v56 + v57);
      if (*((char *)v59 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v85, *(const std::string::value_type **)v59, *((_QWORD *)v59 + 1));
      }
      else
      {
        v60 = *v59;
        v85.__r_.__value_.__r.__words[2] = *((_QWORD *)v59 + 2);
        *(_OWORD *)&v85.__r_.__value_.__l.__data_ = v60;
      }
      if ((v89 & 0x80u) == 0)
        v62 = (const std::string::value_type *)&v87;
      else
        v62 = (const std::string::value_type *)v87;
      if ((v89 & 0x80u) == 0)
        v63 = v89;
      else
        v63 = v88;
      v64 = std::string::insert(&v85, 0, v62, v63);
      v65 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
      v86.__r_.__value_.__r.__words[2] = v64->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v86.__r_.__value_.__l.__data_ = v65;
      v64->__r_.__value_.__l.__size_ = 0;
      v64->__r_.__value_.__r.__words[2] = 0;
      v64->__r_.__value_.__r.__words[0] = 0;
      if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v66 = &v86;
      else
        v66 = (std::string *)v86.__r_.__value_.__r.__words[0];
      if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v67 = HIBYTE(v86.__r_.__value_.__r.__words[2]);
      else
        v67 = v86.__r_.__value_.__l.__size_;
      std::string::append(&v104, (const std::string::value_type *)v66, v67);
      if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v86.__r_.__value_.__l.__data_);
      if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v85.__r_.__value_.__l.__data_);
      v68 = v125.__r_.__value_.__r.__words[0] + v57;
      v69 = (const std::string::value_type **)(v125.__r_.__value_.__r.__words[0] + v57 + 24);
      if (*(char *)(v125.__r_.__value_.__r.__words[0] + v57 + 47) < 0)
      {
        std::string::__init_copy_ctor_external(&v85, *v69, *(_QWORD *)(v68 + 32));
      }
      else
      {
        v70 = *(_OWORD *)v69;
        v85.__r_.__value_.__r.__words[2] = *(_QWORD *)(v68 + 40);
        *(_OWORD *)&v85.__r_.__value_.__l.__data_ = v70;
      }
      if ((v89 & 0x80u) == 0)
        v71 = (const std::string::value_type *)&v87;
      else
        v71 = (const std::string::value_type *)v87;
      if ((v89 & 0x80u) == 0)
        v72 = v89;
      else
        v72 = v88;
      v73 = std::string::insert(&v85, 0, v71, v72);
      v74 = *(_OWORD *)&v73->__r_.__value_.__l.__data_;
      v86.__r_.__value_.__r.__words[2] = v73->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v86.__r_.__value_.__l.__data_ = v74;
      v73->__r_.__value_.__l.__size_ = 0;
      v73->__r_.__value_.__r.__words[2] = 0;
      v73->__r_.__value_.__r.__words[0] = 0;
      if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v75 = &v86;
      else
        v75 = (std::string *)v86.__r_.__value_.__r.__words[0];
      if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v76 = HIBYTE(v86.__r_.__value_.__r.__words[2]);
      else
        v76 = v86.__r_.__value_.__l.__size_;
      std::string::append(&v126, (const std::string::value_type *)v75, v76);
      if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v86.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v85.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_277;
      v77 = (void *)v85.__r_.__value_.__r.__words[0];
    }
    else
    {
      if (*(char *)(v56 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v86, *(const std::string::value_type **)v56, *(_QWORD *)(v56 + 8));
      }
      else
      {
        v61 = *(_OWORD *)v56;
        v86.__r_.__value_.__r.__words[2] = *(_QWORD *)(v56 + 16);
        *(_OWORD *)&v86.__r_.__value_.__l.__data_ = v61;
      }
      if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v78 = &v86;
      else
        v78 = (std::string *)v86.__r_.__value_.__r.__words[0];
      if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v79 = HIBYTE(v86.__r_.__value_.__r.__words[2]);
      else
        v79 = v86.__r_.__value_.__l.__size_;
      std::string::append(&v104, (const std::string::value_type *)v78, v79);
      if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v86.__r_.__value_.__l.__data_);
      if (*(char *)(v125.__r_.__value_.__r.__words[0] + 47) < 0)
        std::string::__init_copy_ctor_external(&v86, *(const std::string::value_type **)(v125.__r_.__value_.__r.__words[0] + 24), *(_QWORD *)(v125.__r_.__value_.__r.__words[0] + 32));
      else
        v86 = *(std::string *)(v125.__r_.__value_.__r.__words[0] + 24);
      if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v80 = &v86;
      else
        v80 = (std::string *)v86.__r_.__value_.__r.__words[0];
      if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v81 = HIBYTE(v86.__r_.__value_.__r.__words[2]);
      else
        v81 = v86.__r_.__value_.__l.__size_;
      std::string::append(&v126, (const std::string::value_type *)v80, v81);
      if ((SHIBYTE(v86.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_277;
      v77 = (void *)v86.__r_.__value_.__r.__words[0];
    }
    operator delete(v77);
LABEL_277:
    ++v58;
    v56 = v125.__r_.__value_.__r.__words[0];
    v57 += 168;
    if (0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(v125.__r_.__value_.__l.__size_ - v125.__r_.__value_.__r.__words[0]) >> 3) <= v58)
      goto LABEL_278;
  }
}

void sub_1BF91DC6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47)
{
  uint64_t v47;
  uint64_t v48;

  *(_QWORD *)(v48 - 104) = v47;
  siri::dialogengine::SpeakableString::~SpeakableString((void **)&a47);
  if (a28 < 0)
    operator delete(__p);
  a47 = v48 - 112;
  std::vector<siri::dialogengine::SpeakableString>::__destroy_vector::operator()[abi:ne180100]((void ***)&a47);
  _Unwind_Resume(a1);
}

std::string *siri::dialogengine::DialogDuration::descriptivePeriod(siri::dialogengine::DialogDuration *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  uint64_t DurationForRequest;
  _QWORD v6[8];

  DurationForRequest = siri::dialogengine::GetDurationForRequest(a2, a2, a3);
  siri::dialogengine::UnitQuantities::UnitQuantities(v6, DurationForRequest, 0);
  return siri::dialogengine::descriptivePeriodInternal(this, (uint64_t)v6, 0);
}

std::string *siri::dialogengine::descriptivePeriodInternal(_QWORD *a1, uint64_t a2, int a3)
{
  uint64_t v6;
  siri::dialogengine *v7;
  siri::dialogengine *v8;
  siri::dialogengine *v9;
  siri::dialogengine *v10;
  siri::dialogengine *v11;
  siri::dialogengine *v12;
  _OWORD *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  _OWORD *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  _OWORD *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  _OWORD *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  _OWORD *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  siri::dialogengine *v40;
  siri::dialogengine *v41;
  _OWORD *v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  _OWORD *v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t i;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  siri::dialogengine *v54;
  uint64_t v55;
  _OWORD *v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  _OWORD *v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  _OWORD *v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  _OWORD *v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  _OWORD *v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  _OWORD *v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  _OWORD *v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  std::string *v84;
  std::string __str;
  std::string v87;
  std::string v88;
  std::string v89;
  std::string v90;
  std::string v91;
  std::string __p;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  std::string v102;
  __int128 v103;
  __int128 v104;
  uint64_t *v105[2];
  char v106;
  uint64_t *v107;
  _QWORD *v108;
  uint64_t v109;
  __int128 v110;
  _QWORD v111[3];
  __int128 v112;
  uint64_t v113;

  v113 = *MEMORY[0x1E0C80C00];
  v101 = 0u;
  memset(&v102, 0, sizeof(v102));
  v99 = 0u;
  v100 = 0u;
  v97 = 0u;
  v98 = 0u;
  v95 = 0u;
  v96 = 0u;
  v93 = 0u;
  v94 = 0u;
  v6 = *(_QWORD *)a2;
  if (*(uint64_t *)a2 < 86400)
  {
    if (v6 < 3600)
    {
      if (v6 < 60)
      {
        siri::dialogengine::executeSeconds((uint64_t)&__str, a1, (siri::dialogengine *)v6, a3);
        std::string::operator=((std::string *)&v93, &__str);
        std::string::operator=((std::string *)((char *)&v94 + 8), &v87);
        std::string::operator=((std::string *)&v96, &v88);
        std::string::operator=((std::string *)((char *)&v97 + 8), &v89);
        std::string::operator=((std::string *)&v99, &v90);
        std::string::operator=((std::string *)((char *)&v100 + 8), &v91);
        std::string::operator=(&v102, &__p);
        goto LABEL_156;
      }
      siri::dialogengine::CreateJSONBoolVal(0, (uint64_t *)&v104);
      std::string::basic_string[abi:ne180100]<0>(&v107, "digitsBasedDisplay");
      v110 = v104;
      v104 = 0uLL;
      std::map<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>::map[abi:ne180100]((uint64_t)v105, (const void **)&v107, 1);
      v34 = (std::__shared_weak_count *)*((_QWORD *)&v110 + 1);
      if (*((_QWORD *)&v110 + 1))
      {
        v35 = (unint64_t *)(*((_QWORD *)&v110 + 1) + 8);
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 - 1, v35));
        if (!v36)
        {
          ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
          std::__shared_weak_count::__release_weak(v34);
        }
      }
      if (SHIBYTE(v109) < 0)
        operator delete(v107);
      v37 = (std::__shared_weak_count *)*((_QWORD *)&v104 + 1);
      if (*((_QWORD *)&v104 + 1))
      {
        v38 = (unint64_t *)(*((_QWORD *)&v104 + 1) + 8);
        do
          v39 = __ldaxr(v38);
        while (__stlxr(v39 - 1, v38));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
          std::__shared_weak_count::__release_weak(v37);
        }
      }
      v40 = *(siri::dialogengine **)(a2 + 48);
      v41 = *(siri::dialogengine **)(a2 + 56);
      if (v40)
      {
        siri::dialogengine::CreateJSONInt64Val(v40, (uint64_t *)&v104);
        std::string::basic_string[abi:ne180100]<0>(&v107, "minutes");
        *(_QWORD *)&v103 = &v107;
        v42 = std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v105, (const void **)&v107, (_OWORD **)&v103);
        std::shared_ptr<siri::dialogengine::JSONValue>::operator=[abi:ne180100]((uint64_t)v42 + 56, &v104);
        if (SHIBYTE(v109) < 0)
          operator delete(v107);
        v43 = (std::__shared_weak_count *)*((_QWORD *)&v104 + 1);
        if (*((_QWORD *)&v104 + 1))
        {
          v44 = (unint64_t *)(*((_QWORD *)&v104 + 1) + 8);
          do
            v45 = __ldaxr(v44);
          while (__stlxr(v45 - 1, v44));
          if (!v45)
          {
            ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
            std::__shared_weak_count::__release_weak(v43);
          }
        }
      }
      if (v41)
      {
        siri::dialogengine::CreateJSONInt64Val(v41, (uint64_t *)&v104);
        std::string::basic_string[abi:ne180100]<0>(&v107, "seconds");
        *(_QWORD *)&v103 = &v107;
        v46 = std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v105, (const void **)&v107, (_OWORD **)&v103);
        std::shared_ptr<siri::dialogengine::JSONValue>::operator=[abi:ne180100]((uint64_t)v46 + 56, &v104);
        if (SHIBYTE(v109) < 0)
          operator delete(v107);
        v47 = (std::__shared_weak_count *)*((_QWORD *)&v104 + 1);
        if (*((_QWORD *)&v104 + 1))
        {
          v48 = (unint64_t *)(*((_QWORD *)&v104 + 1) + 8);
          do
            v49 = __ldaxr(v48);
          while (__stlxr(v49 - 1, v48));
          if (!v49)
          {
            ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
            std::__shared_weak_count::__release_weak(v47);
          }
        }
      }
      if (a3 == 1)
      {
        std::string::basic_string[abi:ne180100]<0>(&v107, "minutesSeconds");
        siri::dialogengine::AddFractionalPeriodParameters(v105, (uint64_t *)&v107, *(_QWORD *)a2);
        if (SHIBYTE(v109) < 0)
          operator delete(v107);
      }
      std::string::basic_string[abi:ne180100]<0>(&v107, "dateTime#minutesSeconds");
      siri::dialogengine::ExecuteSharedCat(a1, (uint64_t)&v107, (const void ***)v105, (uint64_t)&__str);
      if (SHIBYTE(v109) < 0)
        operator delete(v107);
    }
    else
    {
      HIDWORD(v21) = -286331153 * v6;
      LODWORD(v21) = -286331153 * v6;
      if ((v21 >> 2) > 0x4444444)
      {
        v108 = 0;
        v109 = 0;
        v107 = (uint64_t *)&v108;
        siri::dialogengine::CreateJSONInt64Val(*(siri::dialogengine **)(a2 + 40), (uint64_t *)&v104);
        std::string::basic_string[abi:ne180100]<0>(v105, "hours");
        *(_QWORD *)&v103 = v105;
        v22 = std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v107, (const void **)v105, (_OWORD **)&v103);
        std::shared_ptr<siri::dialogengine::JSONValue>::operator=[abi:ne180100]((uint64_t)v22 + 56, &v104);
        if (v106 < 0)
          operator delete(v105[0]);
        v23 = (std::__shared_weak_count *)*((_QWORD *)&v104 + 1);
        if (*((_QWORD *)&v104 + 1))
        {
          v24 = (unint64_t *)(*((_QWORD *)&v104 + 1) + 8);
          do
            v25 = __ldaxr(v24);
          while (__stlxr(v25 - 1, v24));
          if (!v25)
          {
            ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
            std::__shared_weak_count::__release_weak(v23);
          }
        }
        siri::dialogengine::CreateJSONInt64Val(*(siri::dialogengine **)(a2 + 48), (uint64_t *)&v104);
        std::string::basic_string[abi:ne180100]<0>(v105, "minutes");
        *(_QWORD *)&v103 = v105;
        v26 = std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v107, (const void **)v105, (_OWORD **)&v103);
        std::shared_ptr<siri::dialogengine::JSONValue>::operator=[abi:ne180100]((uint64_t)v26 + 56, &v104);
        if (v106 < 0)
          operator delete(v105[0]);
        v27 = (std::__shared_weak_count *)*((_QWORD *)&v104 + 1);
        if (*((_QWORD *)&v104 + 1))
        {
          v28 = (unint64_t *)(*((_QWORD *)&v104 + 1) + 8);
          do
            v29 = __ldaxr(v28);
          while (__stlxr(v29 - 1, v28));
          if (!v29)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        siri::dialogengine::CreateJSONInt64Val(*(siri::dialogengine **)(a2 + 56), (uint64_t *)&v104);
        std::string::basic_string[abi:ne180100]<0>(v105, "seconds");
        *(_QWORD *)&v103 = v105;
        v30 = std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v107, (const void **)v105, (_OWORD **)&v103);
        std::shared_ptr<siri::dialogengine::JSONValue>::operator=[abi:ne180100]((uint64_t)v30 + 56, &v104);
        if (v106 < 0)
          operator delete(v105[0]);
        v31 = (std::__shared_weak_count *)*((_QWORD *)&v104 + 1);
        if (*((_QWORD *)&v104 + 1))
        {
          v32 = (unint64_t *)(*((_QWORD *)&v104 + 1) + 8);
          do
            v33 = __ldaxr(v32);
          while (__stlxr(v33 - 1, v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
            std::__shared_weak_count::__release_weak(v31);
          }
        }
        if (a3 == 1)
        {
          std::string::basic_string[abi:ne180100]<0>(v105, "hoursMinutesSeconds");
          siri::dialogengine::AddFractionalPeriodParameters(&v107, (uint64_t *)v105, *(_QWORD *)a2);
          if (v106 < 0)
            operator delete(v105[0]);
        }
        std::string::basic_string[abi:ne180100]<0>(v105, "dateTime#hoursMinutesSeconds");
        siri::dialogengine::ExecuteSharedCat(a1, (uint64_t)v105, (const void ***)&v107, (uint64_t)&__str);
        if (v106 < 0)
          operator delete(v105[0]);
        goto LABEL_155;
      }
      siri::dialogengine::CreateJSONBoolVal(0, (uint64_t *)&v104);
      std::string::basic_string[abi:ne180100]<0>(&v107, "abbreviated");
      v110 = v104;
      v104 = 0uLL;
      siri::dialogengine::CreateJSONBoolVal(0, (uint64_t *)&v103);
      std::string::basic_string[abi:ne180100]<0>(v111, "approximateHours");
      v112 = v103;
      v103 = 0uLL;
      std::map<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>::map[abi:ne180100]((uint64_t)v105, (const void **)&v107, 2);
      for (i = 0; i != -10; i -= 5)
      {
        std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&v112 + i * 8);
        if (SHIBYTE(v111[i + 2]) < 0)
          operator delete((void *)v111[i]);
      }
      v51 = (std::__shared_weak_count *)*((_QWORD *)&v104 + 1);
      if (*((_QWORD *)&v104 + 1))
      {
        v52 = (unint64_t *)(*((_QWORD *)&v104 + 1) + 8);
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
      v55 = *(_QWORD *)(a2 + 40);
      v54 = *(siri::dialogengine **)(a2 + 48);
      if (v55)
      {
        siri::dialogengine::CreateJSONInt64Val(*(siri::dialogengine **)(a2 + 40), (uint64_t *)&v104);
        std::string::basic_string[abi:ne180100]<0>(&v107, "hours");
        *(_QWORD *)&v103 = &v107;
        v56 = std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v105, (const void **)&v107, (_OWORD **)&v103);
        std::shared_ptr<siri::dialogengine::JSONValue>::operator=[abi:ne180100]((uint64_t)v56 + 56, &v104);
        if (SHIBYTE(v109) < 0)
          operator delete(v107);
        v57 = (std::__shared_weak_count *)*((_QWORD *)&v104 + 1);
        if (*((_QWORD *)&v104 + 1))
        {
          v58 = (unint64_t *)(*((_QWORD *)&v104 + 1) + 8);
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
        siri::dialogengine::CreateJSONInt64Val((siri::dialogengine *)(v55 + 1), (uint64_t *)&v104);
        std::string::basic_string[abi:ne180100]<0>(&v107, "hoursPlusOne");
        *(_QWORD *)&v103 = &v107;
        v60 = std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v105, (const void **)&v107, (_OWORD **)&v103);
        std::shared_ptr<siri::dialogengine::JSONValue>::operator=[abi:ne180100]((uint64_t)v60 + 56, &v104);
        if (SHIBYTE(v109) < 0)
          operator delete(v107);
        v61 = (std::__shared_weak_count *)*((_QWORD *)&v104 + 1);
        if (*((_QWORD *)&v104 + 1))
        {
          v62 = (unint64_t *)(*((_QWORD *)&v104 + 1) + 8);
          do
            v63 = __ldaxr(v62);
          while (__stlxr(v63 - 1, v62));
          if (!v63)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
      }
      if (v54)
      {
        siri::dialogengine::CreateJSONInt64Val(v54, (uint64_t *)&v104);
        std::string::basic_string[abi:ne180100]<0>(&v107, "minutes");
        *(_QWORD *)&v103 = &v107;
        v64 = std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v105, (const void **)&v107, (_OWORD **)&v103);
        std::shared_ptr<siri::dialogengine::JSONValue>::operator=[abi:ne180100]((uint64_t)v64 + 56, &v104);
        if (SHIBYTE(v109) < 0)
          operator delete(v107);
        v65 = (std::__shared_weak_count *)*((_QWORD *)&v104 + 1);
        if (*((_QWORD *)&v104 + 1))
        {
          v66 = (unint64_t *)(*((_QWORD *)&v104 + 1) + 8);
          do
            v67 = __ldaxr(v66);
          while (__stlxr(v67 - 1, v66));
          if (!v67)
          {
            ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
            std::__shared_weak_count::__release_weak(v65);
          }
        }
      }
      if (a3 == 1)
      {
        std::string::basic_string[abi:ne180100]<0>(&v107, "hoursMinutes");
        siri::dialogengine::AddFractionalPeriodParameters(v105, (uint64_t *)&v107, *(_QWORD *)a2);
        if (SHIBYTE(v109) < 0)
          operator delete(v107);
      }
      std::string::basic_string[abi:ne180100]<0>(&v107, "dateTime#hoursMinutes");
      siri::dialogengine::ExecuteSharedCat(a1, (uint64_t)&v107, (const void ***)v105, (uint64_t)&__str);
      if (SHIBYTE(v109) < 0)
        operator delete(v107);
    }
    std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(v105[1]);
    std::string::operator=((std::string *)&v93, &__str);
    std::string::operator=((std::string *)((char *)&v94 + 8), &v87);
    std::string::operator=((std::string *)&v96, &v88);
    std::string::operator=((std::string *)((char *)&v97 + 8), &v89);
    std::string::operator=((std::string *)&v99, &v90);
    std::string::operator=((std::string *)((char *)&v100 + 8), &v91);
    std::string::operator=(&v102, &__p);
    goto LABEL_156;
  }
  v108 = 0;
  v109 = 0;
  v107 = (uint64_t *)&v108;
  v7 = *(siri::dialogengine **)(a2 + 8);
  v8 = *(siri::dialogengine **)(a2 + 16);
  v10 = *(siri::dialogengine **)(a2 + 32);
  v9 = *(siri::dialogengine **)(a2 + 40);
  v12 = *(siri::dialogengine **)(a2 + 48);
  v11 = *(siri::dialogengine **)(a2 + 56);
  if (!v7)
    goto LABEL_9;
  siri::dialogengine::CreateJSONInt64Val(v7, (uint64_t *)&v104);
  std::string::basic_string[abi:ne180100]<0>(v105, "years");
  *(_QWORD *)&v103 = v105;
  v13 = std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v107, (const void **)v105, (_OWORD **)&v103);
  std::shared_ptr<siri::dialogengine::JSONValue>::operator=[abi:ne180100]((uint64_t)v13 + 56, &v104);
  if (v106 < 0)
    operator delete(v105[0]);
  v14 = (std::__shared_weak_count *)*((_QWORD *)&v104 + 1);
  if (!*((_QWORD *)&v104 + 1))
    goto LABEL_9;
  v15 = (unint64_t *)(*((_QWORD *)&v104 + 1) + 8);
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    if (!v8)
      goto LABEL_121;
  }
  else
  {
LABEL_9:
    if (!v8)
      goto LABEL_121;
  }
  siri::dialogengine::CreateJSONInt64Val(v8, (uint64_t *)&v104);
  std::string::basic_string[abi:ne180100]<0>(v105, "months");
  *(_QWORD *)&v103 = v105;
  v17 = std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v107, (const void **)v105, (_OWORD **)&v103);
  std::shared_ptr<siri::dialogengine::JSONValue>::operator=[abi:ne180100]((uint64_t)v17 + 56, &v104);
  if (v106 < 0)
    operator delete(v105[0]);
  v18 = (std::__shared_weak_count *)*((_QWORD *)&v104 + 1);
  if (*((_QWORD *)&v104 + 1))
  {
    v19 = (unint64_t *)(*((_QWORD *)&v104 + 1) + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  if (!v10)
    goto LABEL_128;
LABEL_121:
  siri::dialogengine::CreateJSONInt64Val(v10, (uint64_t *)&v104);
  std::string::basic_string[abi:ne180100]<0>(v105, "days");
  *(_QWORD *)&v103 = v105;
  v68 = std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v107, (const void **)v105, (_OWORD **)&v103);
  std::shared_ptr<siri::dialogengine::JSONValue>::operator=[abi:ne180100]((uint64_t)v68 + 56, &v104);
  if (v106 < 0)
    operator delete(v105[0]);
  v69 = (std::__shared_weak_count *)*((_QWORD *)&v104 + 1);
  if (!*((_QWORD *)&v104 + 1))
    goto LABEL_128;
  v70 = (unint64_t *)(*((_QWORD *)&v104 + 1) + 8);
  do
    v71 = __ldaxr(v70);
  while (__stlxr(v71 - 1, v70));
  if (!v71)
  {
    ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
    std::__shared_weak_count::__release_weak(v69);
    if (!v9)
      goto LABEL_137;
  }
  else
  {
LABEL_128:
    if (!v9)
      goto LABEL_137;
  }
  siri::dialogengine::CreateJSONInt64Val(v9, (uint64_t *)&v104);
  std::string::basic_string[abi:ne180100]<0>(v105, "hours");
  *(_QWORD *)&v103 = v105;
  v72 = std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v107, (const void **)v105, (_OWORD **)&v103);
  std::shared_ptr<siri::dialogengine::JSONValue>::operator=[abi:ne180100]((uint64_t)v72 + 56, &v104);
  if (v106 < 0)
    operator delete(v105[0]);
  v73 = (std::__shared_weak_count *)*((_QWORD *)&v104 + 1);
  if (*((_QWORD *)&v104 + 1))
  {
    v74 = (unint64_t *)(*((_QWORD *)&v104 + 1) + 8);
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
  if (!v12)
    goto LABEL_144;
LABEL_137:
  siri::dialogengine::CreateJSONInt64Val(v12, (uint64_t *)&v104);
  std::string::basic_string[abi:ne180100]<0>(v105, "minutes");
  *(_QWORD *)&v103 = v105;
  v76 = std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v107, (const void **)v105, (_OWORD **)&v103);
  std::shared_ptr<siri::dialogengine::JSONValue>::operator=[abi:ne180100]((uint64_t)v76 + 56, &v104);
  if (v106 < 0)
    operator delete(v105[0]);
  v77 = (std::__shared_weak_count *)*((_QWORD *)&v104 + 1);
  if (!*((_QWORD *)&v104 + 1))
    goto LABEL_144;
  v78 = (unint64_t *)(*((_QWORD *)&v104 + 1) + 8);
  do
    v79 = __ldaxr(v78);
  while (__stlxr(v79 - 1, v78));
  if (!v79)
  {
    ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
    std::__shared_weak_count::__release_weak(v77);
    if (v11)
      goto LABEL_145;
  }
  else
  {
LABEL_144:
    if (v11)
    {
LABEL_145:
      siri::dialogengine::CreateJSONInt64Val(v11, (uint64_t *)&v104);
      std::string::basic_string[abi:ne180100]<0>(v105, "seconds");
      *(_QWORD *)&v103 = v105;
      v80 = std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v107, (const void **)v105, (_OWORD **)&v103);
      std::shared_ptr<siri::dialogengine::JSONValue>::operator=[abi:ne180100]((uint64_t)v80 + 56, &v104);
      if (v106 < 0)
        operator delete(v105[0]);
      v81 = (std::__shared_weak_count *)*((_QWORD *)&v104 + 1);
      if (*((_QWORD *)&v104 + 1))
      {
        v82 = (unint64_t *)(*((_QWORD *)&v104 + 1) + 8);
        do
          v83 = __ldaxr(v82);
        while (__stlxr(v83 - 1, v82));
        if (!v83)
        {
          ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
          std::__shared_weak_count::__release_weak(v81);
        }
      }
    }
  }
  std::string::basic_string[abi:ne180100]<0>(v105, "dateTime#defaultPeriod");
  siri::dialogengine::ExecuteSharedCat(a1, (uint64_t)v105, (const void ***)&v107, (uint64_t)&__str);
  if (v106 < 0)
    operator delete(v105[0]);
LABEL_155:
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(v108);
  std::string::operator=((std::string *)&v93, &__str);
  std::string::operator=((std::string *)((char *)&v94 + 8), &v87);
  std::string::operator=((std::string *)&v96, &v88);
  std::string::operator=((std::string *)((char *)&v97 + 8), &v89);
  std::string::operator=((std::string *)&v99, &v90);
  std::string::operator=((std::string *)((char *)&v100 + 8), &v91);
  std::string::operator=(&v102, &__p);
LABEL_156:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v91.__r_.__value_.__l.__data_);
  if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v90.__r_.__value_.__l.__data_);
  if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v89.__r_.__value_.__l.__data_);
  if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v88.__r_.__value_.__l.__data_);
  if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v87.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v84 = (std::string *)operator new();
  std::string::basic_string[abi:ne180100]<0>(&__str, "");
  siri::dialogengine::VariableString::VariableString(v84, &__str, (const siri::dialogengine::SpeakableString *)&v93);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v102.__r_.__value_.__l.__data_);
  if (SHIBYTE(v101) < 0)
    operator delete(*((void **)&v100 + 1));
  if (SBYTE7(v100) < 0)
    operator delete((void *)v99);
  if (SHIBYTE(v98) < 0)
    operator delete(*((void **)&v97 + 1));
  if (SBYTE7(v97) < 0)
    operator delete((void *)v96);
  if (SHIBYTE(v95) < 0)
    operator delete(*((void **)&v94 + 1));
  if (SBYTE7(v94) < 0)
    operator delete((void *)v93);
  return v84;
}

void sub_1BF91EF2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34)
{
  uint64_t v34;

  if (*(char *)(v34 - 129) < 0)
    operator delete(*(void **)(v34 - 152));
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(*(_QWORD **)(v34 - 168));
  siri::dialogengine::SpeakableString::~SpeakableString(&a34);
  _Unwind_Resume(a1);
}

std::string *siri::dialogengine::DialogDuration::descriptiveApproximateMinutesPeriod(siri::dialogengine::DialogDuration *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  uint64_t DurationForRequest;
  _OWORD v6[4];
  _OWORD v7[3];
  __int128 v8;

  DurationForRequest = siri::dialogengine::GetDurationForRequest(a2, a2, a3);
  siri::dialogengine::UnitQuantities::UnitQuantities(v7, DurationForRequest, 0);
  if (*((uint64_t *)&v8 + 1) >= 1)
  {
    siri::dialogengine::UnitQuantities::UnitQuantities(v6, *(_QWORD *)&v7[0] - *((_QWORD *)&v8 + 1) + 60, 0);
    v7[0] = v6[0];
    v7[1] = v6[1];
    v7[2] = v6[2];
    v8 = v6[3];
  }
  return siri::dialogengine::descriptivePeriodInternal(this, (uint64_t)v7, 0);
}

std::string *siri::dialogengine::DialogDuration::descriptiveFractionalUnitsPeriod(siri::dialogengine::DialogDuration *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  uint64_t DurationForRequest;
  _QWORD v6[8];

  DurationForRequest = siri::dialogengine::GetDurationForRequest(a2, a2, a3);
  siri::dialogengine::UnitQuantities::UnitQuantities(v6, DurationForRequest, 0);
  return siri::dialogengine::descriptivePeriodInternal(this, (uint64_t)v6, 1);
}

void siri::dialogengine::DialogDuration::hoursMinutes(siri::dialogengine::DialogDuration *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  uint64_t DurationForRequest;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *size;
  unint64_t *v9;
  unint64_t v10;
  _OWORD *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _OWORD *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  std::string v20;
  std::string v21;
  std::string v22;
  uint64_t *v23;
  std::string __p;
  void *v25[2];
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  DurationForRequest = siri::dialogengine::GetDurationForRequest(a2, a2, a3);
  siri::dialogengine::CreateJSONBoolVal((siri::dialogengine *)1, (uint64_t *)&v22);
  std::string::basic_string[abi:ne180100]<0>(&__p, "digitsBasedDisplay");
  *(_OWORD *)v25 = *(_OWORD *)&v22.__r_.__value_.__l.__data_;
  *(_OWORD *)&v22.__r_.__value_.__l.__data_ = 0uLL;
  std::map<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>::map[abi:ne180100]((uint64_t)&v23, (const void **)&__p.__r_.__value_.__l.__data_, 1);
  v5 = (std::__shared_weak_count *)v25[1];
  if (v25[1])
  {
    v6 = (unint64_t *)((char *)v25[1] + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  size = (std::__shared_weak_count *)v22.__r_.__value_.__l.__size_;
  if (v22.__r_.__value_.__l.__size_)
  {
    v9 = (unint64_t *)(v22.__r_.__value_.__l.__size_ + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  if ((unint64_t)(DurationForRequest + 3599) >= 0x1C1F)
  {
    siri::dialogengine::CreateJSONInt64Val((siri::dialogengine *)(DurationForRequest / 3600), (uint64_t *)&v22);
    std::string::basic_string[abi:ne180100]<0>(&__p, "hours");
    v21.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
    v11 = std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v23, (const void **)&__p.__r_.__value_.__l.__data_, &v21);
    std::shared_ptr<siri::dialogengine::JSONValue>::operator=[abi:ne180100]((uint64_t)v11 + 56, (__int128 *)&v22);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v12 = (std::__shared_weak_count *)v22.__r_.__value_.__l.__size_;
    if (v22.__r_.__value_.__l.__size_)
    {
      v13 = (unint64_t *)(v22.__r_.__value_.__l.__size_ + 8);
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
  }
  if ((unint64_t)(DurationForRequest % 3600 + 59) >= 0x77)
  {
    siri::dialogengine::CreateJSONInt64Val((siri::dialogengine *)(DurationForRequest % 3600 / 60), (uint64_t *)&v22);
    std::string::basic_string[abi:ne180100]<0>(&__p, "minutes");
    v21.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
    v15 = std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v23, (const void **)&__p.__r_.__value_.__l.__data_, &v21);
    std::shared_ptr<siri::dialogengine::JSONValue>::operator=[abi:ne180100]((uint64_t)v15 + 56, (__int128 *)&v22);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v16 = (std::__shared_weak_count *)v22.__r_.__value_.__l.__size_;
    if (v22.__r_.__value_.__l.__size_)
    {
      v17 = (unint64_t *)(v22.__r_.__value_.__l.__size_ + 8);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&v22, "dateTime#hoursMinutes");
  siri::dialogengine::ExecuteSharedCat(this, (uint64_t)&v22, (const void ***)&v23, (uint64_t)&__p);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
  v19 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&v22, "");
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v21, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&v20, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
LABEL_35:
      siri::dialogengine::VariableString::VariableString(v19, &v22, &v21, &v20);
    }
  }
  else
  {
    v21 = __p;
  }
  v20 = __p;
  goto LABEL_35;
}

void sub_1BF91F644(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,_QWORD *a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  uint64_t v37;

  if (a21 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  MEMORY[0x1C3B8D890](v37, 0x10B3C40D3060B95);
  siri::dialogengine::SpeakableString::~SpeakableString(&a32);
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(a30);
  _Unwind_Resume(a1);
}

void sub_1BF91F720(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  std::pair<std::string const,std::shared_ptr<siri::dialogengine::JSONValue>>::~pair((uint64_t)va1);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  JUMPOUT(0x1BF91F718);
}

void sub_1BF91F740()
{
  JUMPOUT(0x1BF91F718);
}

void siri::dialogengine::DialogDuration::hoursMinutesAbbreviated(siri::dialogengine::DialogDuration *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  uint64_t DurationForRequest;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *size;
  unint64_t *v9;
  unint64_t v10;
  _OWORD *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _OWORD *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  std::string v20;
  std::string v21;
  std::string v22;
  uint64_t *v23;
  std::string __p;
  void *v25[2];
  void *v26[3];
  void *v27[2];
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  DurationForRequest = siri::dialogengine::GetDurationForRequest(a2, a2, a3);
  siri::dialogengine::CreateJSONBoolVal((siri::dialogengine *)1, (uint64_t *)&v22);
  std::string::basic_string[abi:ne180100]<0>(&__p, "digitsBasedDisplay");
  *(_OWORD *)v25 = *(_OWORD *)&v22.__r_.__value_.__l.__data_;
  *(_OWORD *)&v22.__r_.__value_.__l.__data_ = 0uLL;
  siri::dialogengine::CreateJSONBoolVal((siri::dialogengine *)1, (uint64_t *)&v21);
  std::string::basic_string[abi:ne180100]<0>(v26, "abbreviated");
  *(_OWORD *)v27 = *(_OWORD *)&v21.__r_.__value_.__l.__data_;
  *(_OWORD *)&v21.__r_.__value_.__l.__data_ = 0uLL;
  std::map<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>::map[abi:ne180100]((uint64_t)&v23, (const void **)&__p.__r_.__value_.__l.__data_, 2);
  v5 = 0;
  v6 = DurationForRequest % 3600;
  v7 = DurationForRequest % 3600 / 60;
  do
  {
    std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&v27[v5]);
    if (SHIBYTE(v26[v5 + 2]) < 0)
      operator delete(v26[v5]);
    v5 -= 5;
  }
  while (v5 != -10);
  size = (std::__shared_weak_count *)v22.__r_.__value_.__l.__size_;
  if (v22.__r_.__value_.__l.__size_)
  {
    v9 = (unint64_t *)(v22.__r_.__value_.__l.__size_ + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  if ((unint64_t)(DurationForRequest + 3599) >= 0x1C1F)
  {
    siri::dialogengine::CreateJSONInt64Val((siri::dialogengine *)(DurationForRequest / 3600), (uint64_t *)&v22);
    std::string::basic_string[abi:ne180100]<0>(&__p, "hours");
    v21.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
    v11 = std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v23, (const void **)&__p.__r_.__value_.__l.__data_, &v21);
    std::shared_ptr<siri::dialogengine::JSONValue>::operator=[abi:ne180100]((uint64_t)v11 + 56, (__int128 *)&v22);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v12 = (std::__shared_weak_count *)v22.__r_.__value_.__l.__size_;
    if (v22.__r_.__value_.__l.__size_)
    {
      v13 = (unint64_t *)(v22.__r_.__value_.__l.__size_ + 8);
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
  }
  if ((unint64_t)(v6 + 59) >= 0x77)
  {
    siri::dialogengine::CreateJSONInt64Val((siri::dialogengine *)v7, (uint64_t *)&v22);
    std::string::basic_string[abi:ne180100]<0>(&__p, "minutes");
    v21.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
    v15 = std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v23, (const void **)&__p.__r_.__value_.__l.__data_, &v21);
    std::shared_ptr<siri::dialogengine::JSONValue>::operator=[abi:ne180100]((uint64_t)v15 + 56, (__int128 *)&v22);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v16 = (std::__shared_weak_count *)v22.__r_.__value_.__l.__size_;
    if (v22.__r_.__value_.__l.__size_)
    {
      v17 = (unint64_t *)(v22.__r_.__value_.__l.__size_ + 8);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&v22, "dateTime#hoursMinutes");
  siri::dialogengine::ExecuteSharedCat(this, (uint64_t)&v22, (const void ***)&v23, (uint64_t)&__p);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
  v19 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&v22, "");
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v21, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&v20, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
LABEL_32:
      siri::dialogengine::VariableString::VariableString(v19, &v22, &v21, &v20);
    }
  }
  else
  {
    v21 = __p;
  }
  v20 = __p;
  goto LABEL_32;
}

void sub_1BF91FB68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,_QWORD *a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  uint64_t v37;

  if (a21 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  MEMORY[0x1C3B8D890](v37, 0x10B3C40D3060B95);
  siri::dialogengine::SpeakableString::~SpeakableString(&a32);
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(a30);
  _Unwind_Resume(a1);
}

void sub_1BF91FC44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  for (i = 40; i != -40; i -= 40)
    std::pair<std::string const,std::shared_ptr<siri::dialogengine::JSONValue>>::~pair(v4 + i);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  JUMPOUT(0x1BF91FC3CLL);
}

void sub_1BF91FCA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  JUMPOUT(0x1BF91FC3CLL);
}

void sub_1BF91FCB0()
{
  JUMPOUT(0x1BF91FC3CLL);
}

void siri::dialogengine::DialogDuration::adjectivePeriod(siri::dialogengine::DialogDuration *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  siri::dialogengine::GetAdjectivePeriod(this, a2, 0);
}

void siri::dialogengine::GetAdjectivePeriod(_QWORD *a1, siri::dialogengine *this, const siri::dialogengine::VariableObject *a3)
{
  int v3;
  uint64_t DurationForRequest;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _OWORD *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t i;
  std::__shared_weak_count *size;
  unint64_t *v21;
  unint64_t v22;
  _OWORD *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  _OWORD *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  std::string __p;
  __int128 v33;
  __int128 v34;
  std::string v35;
  std::string v36[2];
  void *v37[2];
  void *v38[2];
  __int128 v39;
  void *v40[2];
  void *v41[2];
  __int128 v42;
  std::string v43;
  std::string __str;
  std::string v45;
  void *v46[2];
  __int128 v47;
  uint64_t v48;
  char v49;
  std::string v50;
  std::string v51;
  std::string v52;
  uint64_t v53;

  v3 = (int)a3;
  v53 = *MEMORY[0x1E0C80C00];
  DurationForRequest = siri::dialogengine::GetDurationForRequest(this, this, a3);
  v6 = DurationForRequest;
  v42 = 0u;
  memset(&v43, 0, sizeof(v43));
  *(_OWORD *)v40 = 0u;
  *(_OWORD *)v41 = 0u;
  *(_OWORD *)v38 = 0u;
  v39 = 0u;
  *(_OWORD *)v37 = 0u;
  memset(v36, 0, sizeof(v36));
  if ((unint64_t)(DurationForRequest + 3599) >= 0x1C1F)
  {
    siri::dialogengine::CreateJSONInt64Val((siri::dialogengine *)(DurationForRequest / 3600), (uint64_t *)&__p);
    std::string::basic_string[abi:ne180100]<0>(&__str, "hours");
    *(_OWORD *)&v45.__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
    siri::dialogengine::CreateJSONBoolVal(0, (uint64_t *)&v34);
    std::string::basic_string[abi:ne180100]<0>(&v45.__r_.__value_.__r.__words[2], "abbreviated");
    v47 = v34;
    v34 = 0uLL;
    siri::dialogengine::CreateJSONInt64Val((siri::dialogengine *)(v6 % 3600 / 60), (uint64_t *)&v33);
    std::string::basic_string[abi:ne180100]<0>(&v48, "minutes");
    *(_OWORD *)&v50.__r_.__value_.__r.__words[1] = v33;
    v33 = 0uLL;
    std::map<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>::map[abi:ne180100]((uint64_t)&v35, (const void **)&__str.__r_.__value_.__l.__data_, 3);
    for (i = 0; i != -15; i -= 5)
    {
      std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&v50.__r_.__value_.__r.__words[i + 1]);
      if (SHIBYTE(v50.__r_.__value_.__r.__words[i]) < 0)
        operator delete(*(void **)((char *)&v48 + i * 8));
    }
    size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
    if (__p.__r_.__value_.__l.__size_)
    {
      v21 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "dateTime#hoursMinutesAsAdjective");
    siri::dialogengine::ExecuteSharedCat(a1, (uint64_t)&__p, (const void ***)&v35, (uint64_t)&__str);
    std::string::operator=(v36, &__str);
    std::string::operator=(&v36[1], &v45);
    std::string::operator=((std::string *)v37, (const std::string *)v46);
    std::string::operator=((std::string *)&v38[1], (const std::string *)((char *)&v47 + 8));
    std::string::operator=((std::string *)v40, &v50);
    std::string::operator=((std::string *)&v41[1], &v51);
    std::string::operator=(&v43, &v52);
  }
  else
  {
    siri::dialogengine::CreateJSONBoolVal((siri::dialogengine *)(v3 != 0), (uint64_t *)&__p);
    std::string::basic_string[abi:ne180100]<0>(&__str, "digitsBasedDisplay");
    *(_OWORD *)&v45.__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
    std::map<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>::map[abi:ne180100]((uint64_t)&v35, (const void **)&__str.__r_.__value_.__l.__data_, 1);
    v7 = (std::__shared_weak_count *)v45.__r_.__value_.__l.__size_;
    if (v45.__r_.__value_.__l.__size_)
    {
      v8 = (unint64_t *)(v45.__r_.__value_.__l.__size_ + 8);
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    v10 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
    if (__p.__r_.__value_.__l.__size_)
    {
      v11 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    v13 = v6 % 60;
    v14 = v6 - 60;
    if (v3 == 1 || v14 <= 0xFFFFFFFFFFFFFF88)
    {
      if (v14 <= 0xFFFFFFFFFFFFFF88)
      {
        siri::dialogengine::CreateJSONInt64Val((siri::dialogengine *)(v6 / 60), (uint64_t *)&__p);
        std::string::basic_string[abi:ne180100]<0>(&__str, "minutes");
        *(_QWORD *)&v34 = &__str;
        v23 = std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v35, (const void **)&__str.__r_.__value_.__l.__data_, (_OWORD **)&v34);
        std::shared_ptr<siri::dialogengine::JSONValue>::operator=[abi:ne180100]((uint64_t)v23 + 56, (__int128 *)&__p);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        v24 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
        if (__p.__r_.__value_.__l.__size_)
        {
          v25 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
          do
            v26 = __ldaxr(v25);
          while (__stlxr(v26 - 1, v25));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
      }
      if (v13)
      {
        siri::dialogengine::CreateJSONInt64Val((siri::dialogengine *)v13, (uint64_t *)&__p);
        std::string::basic_string[abi:ne180100]<0>(&__str, "seconds");
        *(_QWORD *)&v34 = &__str;
        v27 = std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v35, (const void **)&__str.__r_.__value_.__l.__data_, (_OWORD **)&v34);
        std::shared_ptr<siri::dialogengine::JSONValue>::operator=[abi:ne180100]((uint64_t)v27 + 56, (__int128 *)&__p);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        v28 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
        if (__p.__r_.__value_.__l.__size_)
        {
          v29 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
          do
            v30 = __ldaxr(v29);
          while (__stlxr(v30 - 1, v29));
          if (!v30)
          {
            ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
            std::__shared_weak_count::__release_weak(v28);
          }
        }
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, "dateTime#minutesSecondsAsAdjective");
      siri::dialogengine::ExecuteSharedCat(a1, (uint64_t)&__p, (const void ***)&v35, (uint64_t)&__str);
      std::string::operator=(v36, &__str);
      std::string::operator=(&v36[1], &v45);
      std::string::operator=((std::string *)v37, (const std::string *)v46);
      std::string::operator=((std::string *)&v38[1], (const std::string *)((char *)&v47 + 8));
      std::string::operator=((std::string *)v40, &v50);
      std::string::operator=((std::string *)&v41[1], &v51);
      std::string::operator=(&v43, &v52);
    }
    else
    {
      if (v13)
      {
        siri::dialogengine::CreateJSONInt64Val((siri::dialogengine *)(v6 % 60), (uint64_t *)&__p);
        std::string::basic_string[abi:ne180100]<0>(&__str, "seconds");
        *(_QWORD *)&v34 = &__str;
        v15 = std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v35, (const void **)&__str.__r_.__value_.__l.__data_, (_OWORD **)&v34);
        std::shared_ptr<siri::dialogengine::JSONValue>::operator=[abi:ne180100]((uint64_t)v15 + 56, (__int128 *)&__p);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        v16 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
        if (__p.__r_.__value_.__l.__size_)
        {
          v17 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
          do
            v18 = __ldaxr(v17);
          while (__stlxr(v18 - 1, v17));
          if (!v18)
          {
            ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
            std::__shared_weak_count::__release_weak(v16);
          }
        }
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, "dateTime#secondsAsAdjective");
      siri::dialogengine::ExecuteSharedCat(a1, (uint64_t)&__p, (const void ***)&v35, (uint64_t)&__str);
      std::string::operator=(v36, &__str);
      std::string::operator=(&v36[1], &v45);
      std::string::operator=((std::string *)v37, (const std::string *)v46);
      std::string::operator=((std::string *)&v38[1], (const std::string *)((char *)&v47 + 8));
      std::string::operator=((std::string *)v40, &v50);
      std::string::operator=((std::string *)&v41[1], &v51);
      std::string::operator=(&v43, &v52);
    }
  }
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v52.__r_.__value_.__l.__data_);
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v51.__r_.__value_.__l.__data_);
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v50.__r_.__value_.__l.__data_);
  if (v49 < 0)
    operator delete(*((void **)&v47 + 1));
  if (SBYTE7(v47) < 0)
    operator delete(v46[0]);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy((_QWORD *)v35.__r_.__value_.__l.__size_);
  v31 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&__str, "");
  if (SHIBYTE(v36[0].__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v35, v36[0].__r_.__value_.__l.__data_, v36[0].__r_.__value_.__l.__size_);
  else
    v35 = v36[0];
  if (SHIBYTE(v36[1].__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v36[1].__r_.__value_.__l.__data_, v36[1].__r_.__value_.__l.__size_);
  else
    __p = v36[1];
  siri::dialogengine::VariableString::VariableString(v31, &__str, &v35, &__p);
}

void sub_1BF9204A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, void *a20,_QWORD *a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27)
{
  uint64_t v27;

  if (*(char *)(v27 - 201) < 0)
    operator delete(*(void **)(v27 - 224));
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(a21);
  siri::dialogengine::SpeakableString::~SpeakableString(&a27);
  _Unwind_Resume(a1);
}

void siri::dialogengine::DialogDuration::adjectivePeriodDigitsBasedDisplay(siri::dialogengine::DialogDuration *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  siri::dialogengine::GetAdjectivePeriod(this, a2, (const siri::dialogengine::VariableObject *)1);
}

void siri::dialogengine::DialogDuration::minutesSeconds(siri::dialogengine::DialogDuration *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  siri::dialogengine::GetMinutesSeconds(this, a2, 0);
}

void siri::dialogengine::GetMinutesSeconds(_QWORD *a1, siri::dialogengine *this, const siri::dialogengine::VariableObject *a3)
{
  int v3;
  uint64_t DurationForRequest;
  std::__shared_weak_count *size;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  siri::dialogengine *v18;
  _OWORD *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  std::string v24;
  std::string v25;
  std::string v26;
  uint64_t *v27;
  std::string __p;
  std::string v29;
  uint64_t v30;

  v3 = (int)a3;
  v30 = *MEMORY[0x1E0C80C00];
  DurationForRequest = siri::dialogengine::GetDurationForRequest(this, this, a3);
  siri::dialogengine::CreateJSONBoolVal((siri::dialogengine *)(v3 != 0), (uint64_t *)&v26);
  std::string::basic_string[abi:ne180100]<0>(&__p, "digitsBasedDisplay");
  *(_OWORD *)&v29.__r_.__value_.__l.__data_ = *(_OWORD *)&v26.__r_.__value_.__l.__data_;
  *(_OWORD *)&v26.__r_.__value_.__l.__data_ = 0uLL;
  std::map<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>::map[abi:ne180100]((uint64_t)&v27, (const void **)&__p.__r_.__value_.__l.__data_, 1);
  size = (std::__shared_weak_count *)v29.__r_.__value_.__l.__size_;
  if (v29.__r_.__value_.__l.__size_)
  {
    v7 = (unint64_t *)(v29.__r_.__value_.__l.__size_ + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  v9 = ((unsigned __int128)(DurationForRequest * (__int128)(uint64_t)0x8888888888888889) >> 64) + DurationForRequest;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v10 = (std::__shared_weak_count *)v26.__r_.__value_.__l.__size_;
  if (v26.__r_.__value_.__l.__size_)
  {
    v11 = (unint64_t *)(v26.__r_.__value_.__l.__size_ + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = (v9 >> 5) + ((unint64_t)v9 >> 63);
  if ((unint64_t)(DurationForRequest + 59) >= 0x77)
  {
    siri::dialogengine::CreateJSONInt64Val((siri::dialogengine *)((v9 >> 5) + ((unint64_t)v9 >> 63)), (uint64_t *)&v26);
    std::string::basic_string[abi:ne180100]<0>(&__p, "minutes");
    v25.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
    v14 = std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v27, (const void **)&__p.__r_.__value_.__l.__data_, &v25);
    std::shared_ptr<siri::dialogengine::JSONValue>::operator=[abi:ne180100]((uint64_t)v14 + 56, (__int128 *)&v26);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v15 = (std::__shared_weak_count *)v26.__r_.__value_.__l.__size_;
    if (v26.__r_.__value_.__l.__size_)
    {
      v16 = (unint64_t *)(v26.__r_.__value_.__l.__size_ + 8);
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
  }
  v18 = (siri::dialogengine *)(DurationForRequest - 60 * v13);
  if (v18)
  {
    siri::dialogengine::CreateJSONInt64Val(v18, (uint64_t *)&v26);
    std::string::basic_string[abi:ne180100]<0>(&__p, "seconds");
    v25.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
    v19 = std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v27, (const void **)&__p.__r_.__value_.__l.__data_, &v25);
    std::shared_ptr<siri::dialogengine::JSONValue>::operator=[abi:ne180100]((uint64_t)v19 + 56, (__int128 *)&v26);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v20 = (std::__shared_weak_count *)v26.__r_.__value_.__l.__size_;
    if (v26.__r_.__value_.__l.__size_)
    {
      v21 = (unint64_t *)(v26.__r_.__value_.__l.__size_ + 8);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&v26, "dateTime#minutesSeconds");
  siri::dialogengine::ExecuteSharedCat(a1, (uint64_t)&v26, (const void ***)&v27, (uint64_t)&__p);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
  v23 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&v26, "");
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v25, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v25 = __p;
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v24, v29.__r_.__value_.__l.__data_, v29.__r_.__value_.__l.__size_);
  else
    v24 = v29;
  siri::dialogengine::VariableString::VariableString(v23, &v26, &v25, &v24);
}

void sub_1BF920A50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,_QWORD *a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  uint64_t v37;

  if (a21 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  MEMORY[0x1C3B8D890](v37, 0x10B3C40D3060B95);
  siri::dialogengine::SpeakableString::~SpeakableString(&a32);
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(a30);
  _Unwind_Resume(a1);
}

void sub_1BF920B2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  std::pair<std::string const,std::shared_ptr<siri::dialogengine::JSONValue>>::~pair((uint64_t)va1);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  JUMPOUT(0x1BF920B24);
}

void sub_1BF920B4C()
{
  JUMPOUT(0x1BF920B24);
}

void siri::dialogengine::DialogDuration::minutesSecondsDigitsBasedDisplay(siri::dialogengine::DialogDuration *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  siri::dialogengine::GetMinutesSeconds(this, a2, (const siri::dialogengine::VariableObject *)1);
}

void InitDefaultsscc_info_BackgroundElement_BackgroundElement_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/BackgroundElement.pb.cc", a4);
  SnippetUI::BackgroundElement::BackgroundElement((SnippetUI::BackgroundElement *)&SnippetUI::_BackgroundElement_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_BackgroundElement_default_instance_, v4);
  qword_1ED1D52D8 = (uint64_t)&SnippetUI::_VisualElement_default_instance_;
}

SnippetUI::BackgroundElement *SnippetUI::BackgroundElement::BackgroundElement(SnippetUI::BackgroundElement *this)
{
  *(_QWORD *)this = &off_1E792D8B8;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 13) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  if (atomic_load(scc_info_BackgroundElement_BackgroundElement_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_BackgroundElement_BackgroundElement_2eproto);
  *((_BYTE *)this + 48) = 0;
  *((_QWORD *)this + 5) = 0;
  return this;
}

void sub_1BF920C28(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t *v2;

  google::protobuf::RepeatedField<int>::~RepeatedField(v1 + 16);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v2);
  _Unwind_Resume(a1);
}

void SnippetUI::BackgroundElement::~BackgroundElement(SnippetUI::BackgroundElement *this)
{
  SnippetUI::BackgroundElement::~BackgroundElement(this);
  JUMPOUT(0x1C3B8D890);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_1E792D8B8;
  if (this != (SnippetUI::BackgroundElement *)&SnippetUI::_BackgroundElement_default_instance_)
  {
    v2 = *((_QWORD *)this + 5);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  google::protobuf::RepeatedField<int>::~RepeatedField((char *)this + 16);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

SnippetUI::BackgroundElement *SnippetUI::BackgroundElement::New(SnippetUI::BackgroundElement *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::BackgroundElement>(0);
}

SnippetUI::BackgroundElement *SnippetUI::BackgroundElement::New(SnippetUI::BackgroundElement *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::BackgroundElement>(a2);
}

void SnippetUI::BackgroundElement::Clear(SnippetUI::BackgroundElement *this)
{
  uint64_t v2;
  char *v3;
  char v4;

  *((_DWORD *)this + 4) = 0;
  v2 = *((_QWORD *)this + 5);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v4 = *((_BYTE *)this + 8);
  v3 = (char *)this + 8;
  *((_QWORD *)v3 + 4) = 0;
  v3[40] = 0;
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoClear((google::protobuf::internal::InternalMetadataWithArena *)v3);
}

uint64_t SnippetUI::BackgroundElement::IsInitialized(SnippetUI::BackgroundElement *this)
{
  return 1;
}

char *SnippetUI::BackgroundElement::ByteSizeLong(SnippetUI::BackgroundElement *this)
{
  _DWORD *v2;
  int v3;
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  SnippetUI::ImageElement **v11;
  char *v12;
  const google::protobuf::UnknownFieldSet *v13;

  v2 = (_DWORD *)((char *)this + 16);
  v3 = *((_DWORD *)this + 4);
  if (!v3)
  {
    v5 = 0;
LABEL_11:
    v9 = 0;
    v8 = 0;
    goto LABEL_14;
  }
  v4 = 0;
  v5 = 0;
  do
  {
    v6 = *(_DWORD *)google::protobuf::RepeatedField<int>::Get(v2, v4);
    if (v6 < 0)
      v7 = 10;
    else
      v7 = (9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6;
    v5 += v7;
    ++v4;
  }
  while (v3 != v4);
  if (!v5)
    goto LABEL_11;
  if ((v5 & 0x80000000) != 0)
    v8 = 11;
  else
    v8 = ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6) + 1;
  v9 = v5;
LABEL_14:
  *((_DWORD *)this + 8) = v9;
  v10 = v8 + v5;
  if (this != (SnippetUI::BackgroundElement *)&SnippetUI::_BackgroundElement_default_instance_)
  {
    v11 = (SnippetUI::ImageElement **)*((_QWORD *)this + 5);
    if (v11)
    {
      v12 = SnippetUI::VisualElement::ByteSizeLong(v11);
      v10 += (uint64_t)&v12[((9 * (__clz(v12 | 1) ^ 0x1F) + 73) >> 6) + 1];
    }
  }
  if (*((_BYTE *)this + 48))
    v13 = (const google::protobuf::UnknownFieldSet *)(v10 + 2);
  else
    v13 = (const google::protobuf::UnknownFieldSet *)v10;
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::BackgroundElement *)((char *)this + 8), v13, (_DWORD *)this + 13);
  *((_DWORD *)this + 13) = (_DWORD)v13;
  return (char *)v13;
}

uint64_t SnippetUI::BackgroundElement::GetCachedSize(SnippetUI::BackgroundElement *this)
{
  return *((unsigned int *)this + 13);
}

google::protobuf::internal *SnippetUI::BackgroundElement::_InternalParse(SnippetUI::BackgroundElement *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  google::protobuf::internal *v5;
  uint64_t *v6;
  google::protobuf::internal::ParseContext *v7;
  google::protobuf::internal::ParseContext *v8;
  google::protobuf::internal *TagFallback;
  char *v10;
  unsigned int v11;
  BOOL v13;
  char *v14;
  google::protobuf::internal *v15;
  unint64_t v16;
  int v17;
  SnippetUI::VisualElement *v18;
  google::protobuf::internal *v19;
  uint64_t v20;
  int v21;
  google::protobuf::internal *v23;

  v23 = a2;
  v5 = (SnippetUI::BackgroundElement *)((char *)this + 16);
  v6 = (uint64_t *)((char *)this + 8);
  while (1)
  {
    while (1)
    {
      while (1)
      {
        if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v23, *((_DWORD *)a3 + 23)) & 1) != 0)return v23;
        TagFallback = (google::protobuf::internal *)((char *)v23 + 1);
        v10 = (char *)*(unsigned __int8 *)v23;
        if ((*(char *)v23 & 0x80000000) == 0)
          goto LABEL_6;
        v10 = (char *)(v10 + (*(unsigned __int8 *)TagFallback << 7) - 128);
        if ((*(char *)TagFallback & 0x80000000) == 0)
        {
          TagFallback = (google::protobuf::internal *)((char *)v23 + 2);
LABEL_6:
          v23 = TagFallback;
          goto LABEL_7;
        }
        TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v23, v10);
        v23 = TagFallback;
        if (!TagFallback)
          return TagFallback;
LABEL_7:
        v11 = v10 >> 3;
        if (v10 >> 3 != 3)
          break;
        if (v10 != 24)
          goto LABEL_13;
        v15 = (google::protobuf::internal *)((char *)TagFallback + 1);
        v16 = *(unsigned __int8 *)TagFallback;
        if (*(char *)TagFallback < 0)
        {
          v17 = *(char *)v15;
          v16 = v16 + (v17 << 7) - 128;
          if ((v17 & 0x80000000) == 0)
          {
            v15 = (google::protobuf::internal *)((char *)TagFallback + 2);
            goto LABEL_22;
          }
          v19 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(TagFallback, v16);
          v23 = v19;
          *((_BYTE *)this + 48) = v20 != 0;
          if (!v19)
            return 0;
        }
        else
        {
LABEL_22:
          v23 = v15;
          *((_BYTE *)this + 48) = v16 != 0;
        }
      }
      if (v11 == 2)
        break;
      if (v11 != 1 || v10 != 10)
      {
LABEL_13:
        if ((_DWORD)v10)
          v13 = (v10 & 7) == 4;
        else
          v13 = 1;
        if (v13)
        {
          *((_DWORD *)a3 + 20) = (_DWORD)v10 - 1;
          return TagFallback;
        }
        v14 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v10, v6, TagFallback, a3, v8);
        goto LABEL_28;
      }
      v18 = (SnippetUI::VisualElement *)*((_QWORD *)this + 5);
      if (!v18)
      {
        v18 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::VisualElement>(0);
        *((_QWORD *)this + 5) = v18;
        TagFallback = v23;
      }
      v14 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::VisualElement>(a3, v18, TagFallback);
LABEL_28:
      v23 = (google::protobuf::internal *)v14;
      if (!v14)
        return 0;
    }
    if (v10 == 18)
    {
      v14 = google::protobuf::internal::PackedInt32Parser(v5, TagFallback, a3, v7);
      goto LABEL_28;
    }
    if (v10 != 16)
      goto LABEL_13;
    v21 = google::protobuf::internal::ReadVarint(&v23, (const char **)v10);
    if (!v23)
      return 0;
    SnippetUI::ColorElement::_internal_add_idioms((uint64_t)this, v21);
  }
}

const google::protobuf::UnknownFieldSet *SnippetUI::BackgroundElement::InternalSerializeWithCachedSizesToArray(SnippetUI::BackgroundElement *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  char *v5;
  SnippetUI::VisualElement *v7;
  unsigned int v8;
  char *v9;
  unsigned int v10;
  _BYTE *v11;
  _BYTE *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unint64_t v16;
  std::string *v17;
  _BYTE *v18;
  int *v19;
  int *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _BYTE *v24;
  _BYTE *v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  unsigned int v31;
  char v32;
  std::string v33[2];

  v5 = (char *)a2;
  if (this != (SnippetUI::BackgroundElement *)&SnippetUI::_BackgroundElement_default_instance_)
  {
    v7 = (SnippetUI::VisualElement *)*((_QWORD *)this + 5);
    if (v7)
    {
      if (*(_QWORD *)a3 <= (unint64_t)a2)
      {
        v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
        v7 = (SnippetUI::VisualElement *)*((_QWORD *)this + 5);
      }
      *v5 = 10;
      v8 = *((_DWORD *)v7 + 6);
      if (v8 > 0x7F)
      {
        v5[1] = v8 | 0x80;
        v10 = v8 >> 7;
        if (v8 >> 14)
        {
          v11 = v5 + 2;
          do
          {
            v12 = v11;
            *v11++ = v10 | 0x80;
            v13 = v10 >> 7;
            v14 = v10 >> 14;
            v10 >>= 7;
          }
          while (v14);
          v9 = v12 + 2;
          *v11 = v13;
        }
        else
        {
          v5[2] = v10;
          v9 = v5 + 3;
        }
      }
      else
      {
        v5[1] = v8;
        v9 = v5 + 2;
      }
      v5 = (char *)SnippetUI::VisualElement::InternalSerializeWithCachedSizesToArray(v7, v9, a3, a4);
    }
  }
  v15 = *((_DWORD *)this + 8);
  if ((int)v15 >= 1)
  {
    v16 = *(_QWORD *)a3;
    if ((unint64_t)v5 >= *(_QWORD *)a3)
    {
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
      v16 = *(_QWORD *)a3;
    }
    if (v16 <= (unint64_t)v5)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v33, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/io/coded_stream.h", 856);
      v17 = google::protobuf::internal::LogMessage::operator<<(v33, "CHECK failed: ptr < end_: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v32, (const char **)&v17->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v33[0].__r_.__value_.__l.__data_);
    }
    *v5 = 18;
    v18 = v5 + 1;
    if (v15 >= 0x80)
    {
      do
      {
        *v18++ = v15 | 0x80;
        v31 = v15 >> 14;
        v15 >>= 7;
      }
      while (v31);
      v5 = v18 - 1;
    }
    v5 += 2;
    *v18 = v15;
    v19 = (int *)*((_QWORD *)this + 3);
    v20 = &v19[*((int *)this + 4)];
    do
    {
      if ((unint64_t)v5 >= *(_QWORD *)a3)
        v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
      v22 = *v19++;
      v21 = v22;
      if (v22 > 0x7F)
      {
        *v5 = v21 | 0x80;
        v23 = v21 >> 7;
        if (v21 >> 14)
        {
          v24 = v5 + 1;
          do
          {
            v25 = v24;
            *v24++ = v23 | 0x80;
            v26 = v23 >> 7;
            v27 = v23 >> 14;
            v23 >>= 7;
          }
          while (v27);
          v5 = v25 + 2;
          *v24 = v26;
        }
        else
        {
          v5[1] = v23;
          v5 += 2;
        }
      }
      else
      {
        *v5++ = v21;
      }
    }
    while (v19 < v20);
  }
  if (*((_BYTE *)this + 48))
  {
    if ((unint64_t)v5 >= *(_QWORD *)a3)
    {
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
      v28 = *((_BYTE *)this + 48);
    }
    else
    {
      v28 = 1;
    }
    *v5 = 24;
    v5[1] = v28;
    v5 += 2;
  }
  v29 = *((_QWORD *)this + 1);
  if ((v29 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v29 & 0xFFFFFFFFFFFFFFFELL), (const google::protobuf::UnknownFieldSet *)v5, a3, a4);
  return (const google::protobuf::UnknownFieldSet *)v5;
}

void sub_1BF921294(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void SnippetUI::BackgroundElement::CopyFrom(SnippetUI::BackgroundElement *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    SnippetUI::BackgroundElement::Clear(this);
    SnippetUI::BackgroundElement::MergeFrom(this, a2);
  }
}

void SnippetUI::BackgroundElement::MergeFrom(SnippetUI::BackgroundElement *this, const google::protobuf::Message *lpsrc)
{
  std::string *v4;
  const SnippetUI::BackgroundElement *v5;
  google::protobuf::Message *v6;
  char v7;
  std::string v8[2];

  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/BackgroundElement.pb.cc", 307);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5)
    SnippetUI::BackgroundElement::MergeFrom(this, v5);
  else
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
}

void sub_1BF92138C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::BackgroundElement::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 52) = a2;
  return this;
}

uint64_t SnippetUI::BackgroundElement::GetMetadata(SnippetUI::BackgroundElement *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_BackgroundElement_2eproto);
  return file_level_metadata_BackgroundElement_2eproto;
}

void *SnippetUI::BackgroundElement::default_instance(SnippetUI::BackgroundElement *this)
{
  if (atomic_load(scc_info_BackgroundElement_BackgroundElement_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_BackgroundElement_BackgroundElement_2eproto);
  return &SnippetUI::_BackgroundElement_default_instance_;
}

void SnippetUI::BackgroundElement::MergeFrom(SnippetUI::BackgroundElement *this, const SnippetUI::BackgroundElement *a2)
{
  std::string *v4;
  uint64_t v5;
  const SnippetUI::VisualElement *v6;
  SnippetUI::VisualElement *v7;
  const SnippetUI::VisualElement *v8;
  char v9;
  std::string v10[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/BackgroundElement.pb.cc", 322);
    v4 = google::protobuf::internal::LogMessage::operator<<(v10, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v9, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v10[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::BackgroundElement *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  google::protobuf::RepeatedField<int>::MergeFrom((int *)this + 4, (int *)a2 + 4);
  if (a2 != (const SnippetUI::BackgroundElement *)&SnippetUI::_BackgroundElement_default_instance_)
  {
    v6 = (const SnippetUI::VisualElement *)*((_QWORD *)a2 + 5);
    if (v6)
    {
      v7 = (SnippetUI::VisualElement *)*((_QWORD *)this + 5);
      if (!v7)
      {
        v7 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::VisualElement>(0);
        *((_QWORD *)this + 5) = v7;
        v6 = (const SnippetUI::VisualElement *)*((_QWORD *)a2 + 5);
      }
      if (v6)
        v8 = v6;
      else
        v8 = (const SnippetUI::VisualElement *)&SnippetUI::_VisualElement_default_instance_;
      SnippetUI::VisualElement::MergeFrom(v7, v8);
    }
  }
  if (*((_BYTE *)a2 + 48))
    *((_BYTE *)this + 48) = 1;
}

void sub_1BF9214E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

char *google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::VisualElement>(google::protobuf::internal::EpsCopyInputStream *this, SnippetUI::VisualElement *a2, google::protobuf::internal *a3)
{
  int v6;
  const char *v7;
  char *v8;
  char *result;
  int v10;
  int v11;
  int v12;
  BOOL v13;
  int v14;
  int v15;

  v6 = *(char *)a3;
  v7 = (const char *)*(unsigned __int8 *)a3;
  if (v6 < 0)
  {
    result = google::protobuf::internal::ReadSizeFallback(a3, v7);
    if (!result)
      return result;
    v8 = result;
    LODWORD(v7) = v10;
  }
  else
  {
    v8 = (char *)a3 + 1;
  }
  v11 = google::protobuf::internal::EpsCopyInputStream::PushLimit(this, v8, v7);
  v12 = *((_DWORD *)this + 22);
  v13 = __OFSUB__(v12--, 1);
  *((_DWORD *)this + 22) = v12;
  if (v12 < 0 != v13)
    return 0;
  v14 = v11;
  result = (char *)SnippetUI::VisualElement::_InternalParse(a2, (google::protobuf::internal *)v8, this);
  if (!result)
    return result;
  ++*((_DWORD *)this + 22);
  if (*((_DWORD *)this + 20))
    return 0;
  v15 = *((_DWORD *)this + 7) + v14;
  *((_DWORD *)this + 7) = v15;
  *(_QWORD *)this = *((_QWORD *)this + 1) + (v15 & (v15 >> 31));
  return result;
}

SnippetUI::BackgroundElement *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::BackgroundElement>(google::protobuf::internal::ArenaImpl *this)
{
  SnippetUI::BackgroundElement *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (SnippetUI::BackgroundElement *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x38uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::BackgroundElement>);
    SnippetUI::BackgroundElement::BackgroundElement(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (SnippetUI::BackgroundElement *)operator new();
    SnippetUI::BackgroundElement::BackgroundElement(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_1BF921648(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D890](v1, 0x10A1C4023CD61A6);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::BackgroundElement>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

void SnippetUI::BackgroundElement::InitAsDefaultInstance(SnippetUI::BackgroundElement *this)
{
  qword_1ED1D52D8 = (uint64_t)&SnippetUI::_VisualElement_default_instance_;
}

uint64_t SnippetUI::BackgroundElement::_Internal::visual(SnippetUI::BackgroundElement::_Internal *this, const SnippetUI::BackgroundElement *a2)
{
  return *((_QWORD *)this + 5);
}

uint64_t SnippetUI::BackgroundElement::clear_visual(SnippetUI::BackgroundElement *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 5);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 5) = 0;
  return result;
}

SnippetUI::BackgroundElement *SnippetUI::BackgroundElement::BackgroundElement(SnippetUI::BackgroundElement *this, const SnippetUI::BackgroundElement *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  uint64_t v5;
  SnippetUI::VisualElement *v6;

  *(_QWORD *)this = &off_1E792D8B8;
  *((_QWORD *)this + 1) = 0;
  v4 = (SnippetUI::BackgroundElement *)((char *)this + 8);
  google::protobuf::RepeatedField<int>::RepeatedField((uint64_t)this + 16, (int *)a2 + 4);
  *((_DWORD *)this + 13) = 0;
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom(v4, (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  v6 = 0;
  if (a2 != (const SnippetUI::BackgroundElement *)&SnippetUI::_BackgroundElement_default_instance_
    && *((_QWORD *)a2 + 5))
  {
    v6 = (SnippetUI::VisualElement *)operator new();
    SnippetUI::VisualElement::VisualElement(v6, *((const SnippetUI::VisualElement **)a2 + 5));
  }
  *((_QWORD *)this + 5) = v6;
  *((_BYTE *)this + 48) = *((_BYTE *)a2 + 48);
  return this;
}

void sub_1BF9217E8(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  MEMORY[0x1C3B8D890](v3, 0x10A1C406A65A86DLL);
  google::protobuf::RepeatedField<int>::~RepeatedField(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::BackgroundElement::CopyFrom(SnippetUI::BackgroundElement *this, const SnippetUI::BackgroundElement *a2)
{
  if (a2 != this)
  {
    SnippetUI::BackgroundElement::Clear(this);
    SnippetUI::BackgroundElement::MergeFrom(this, a2);
  }
}

void SnippetUI::BackgroundElement::InternalSwap(SnippetUI::BackgroundElement *this, SnippetUI::BackgroundElement *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  uint64_t v5;
  google::protobuf::UnknownFieldSet *v6;
  uint64_t v7;
  google::protobuf::UnknownFieldSet *v8;

  v4 = (SnippetUI::BackgroundElement *)((char *)this + 8);
  v5 = *((_QWORD *)a2 + 1);
  if ((*((_BYTE *)this + 8) & 1) != 0)
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v6 = v8;
      goto LABEL_6;
    }
  }
  else if ((v5 & 1) == 0)
  {
    goto LABEL_7;
  }
  v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
  google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
LABEL_7:
  google::protobuf::RepeatedField<int>::InternalSwap((uint64_t)this + 16, (uint64_t)a2 + 16);
  v7 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v7;
  LOBYTE(v7) = *((_BYTE *)this + 48);
  *((_BYTE *)this + 48) = *((_BYTE *)a2 + 48);
  *((_BYTE *)a2 + 48) = v7;
}

void siri::dialogengine::VisualResponse::~VisualResponse(siri::dialogengine::VisualResponse *this)
{
  *(_QWORD *)this = off_1E792D990;
  *((_QWORD *)this + 8) = &unk_1E792D9E8;
  SnippetUI::Response::~Response((siri::dialogengine::VisualResponse *)((char *)this + 208));
  *(_QWORD *)this = off_1E793A6B0;
  *((_QWORD *)this + 8) = &unk_1E793A708;
  if (*((char *)this + 191) < 0)
    operator delete(*((void **)this + 21));
  if (*((char *)this + 167) < 0)
    operator delete(*((void **)this + 18));
  if (*((char *)this + 143) < 0)
    operator delete(*((void **)this + 15));
  if (*((char *)this + 119) < 0)
    operator delete(*((void **)this + 12));
  *((_QWORD *)this + 8) = off_1E793AED8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*((_QWORD **)this + 10));
  siri::dialogengine::LineNumberBase::~LineNumberBase((void **)this);
}

{
  *(_QWORD *)this = off_1E792D990;
  *((_QWORD *)this + 8) = &unk_1E792D9E8;
  SnippetUI::Response::~Response((siri::dialogengine::VisualResponse *)((char *)this + 208));
  *(_QWORD *)this = off_1E793A6B0;
  *((_QWORD *)this + 8) = &unk_1E793A708;
  if (*((char *)this + 191) < 0)
    operator delete(*((void **)this + 21));
  if (*((char *)this + 167) < 0)
    operator delete(*((void **)this + 18));
  if (*((char *)this + 143) < 0)
    operator delete(*((void **)this + 15));
  if (*((char *)this + 119) < 0)
    operator delete(*((void **)this + 12));
  *((_QWORD *)this + 8) = off_1E793AED8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*((_QWORD **)this + 10));
  siri::dialogengine::LineNumberBase::~LineNumberBase((void **)this);
  JUMPOUT(0x1C3B8D890);
}

uint64_t siri::dialogengine::VisualResponse::Validate(siri::dialogengine::VisualResponse *this, siri::dialogengine::Context *a2)
{
  int v4;
  const google::protobuf::Message *v5;
  unint64_t v6;
  unsigned int v7;
  void *__p[2];
  char v10;
  void *v11[2];
  unsigned __int8 v12;

  v4 = siri::dialogengine::Node::Validate(this, a2);
  std::string::basic_string[abi:ne180100]<0>(__p, "response");
  siri::dialogengine::ValidateXmlElementVersion((uint64_t)a2, (uint64_t)__p, v11);
  if (v10 < 0)
    operator delete(__p[0]);
  v6 = v12;
  if ((v12 & 0x80u) != 0)
    v6 = (unint64_t)v11[1];
  if (v6)
  {
    siri::dialogengine::Context::AddValidationError((uint64_t)a2, (__int128 *)v11, (uint64_t)this);
    v4 = 0;
  }
  v7 = siri::dialogengine::ValidateSnippetUIMessage(a2, (siri::dialogengine::VisualResponse *)((char *)this + 208), v5);
  if ((char)v12 < 0)
    operator delete(v11[0]);
  return v4 & v7;
}

void sub_1BF921B08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::VisualResponse::Execute(siri::dialogengine::VisualResponse *this@<X0>, siri::dialogengine::Context *a2@<X1>, _QWORD *a3@<X8>)
{
  _BYTE *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  google::protobuf::Message *v9;
  SnippetUI::Response *v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  _QWORD v15[5];

  v6 = (_BYTE *)operator new();
  siri::dialogengine::VisualResponse::VisualResponse((siri::dialogengine::VisualResponse *)v6, this);
  v7 = (std::__shared_weak_count *)operator new();
  v7->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  v7->__vftable = (std::__shared_weak_count_vtbl *)&off_1E792DA10;
  v7->__shared_weak_owners_ = 0;
  v7[1].__vftable = (std::__shared_weak_count_vtbl *)v6;
  siri::dialogengine::ExpandMessage(a2, (siri::dialogengine::Context *)(v6 + 208), v9);
  siri::dialogengine::FilterVisualResponse(a2, (const siri::dialogengine::Context *)(v6 + 208), v10);
  v6[352] = 0;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  v15[4] = a3 + 2;
  v12 = operator new(0x10uLL);
  *v12 = v6;
  v12[1] = v7;
  v13 = v12 + 2;
  *a3 = v12;
  a3[1] = v12 + 2;
  a3[2] = v12 + 2;
  memset(v15, 0, 32);
  std::__split_buffer<std::shared_ptr<siri::dialogengine::ChunkText>>::~__split_buffer((uint64_t)v15);
  a3[1] = v13;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void sub_1BF921C70(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void **v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, void **);
  v5 = va_arg(va1, _QWORD);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'siri::dialogengine::VisualResponse::~VisualResponse(siri::dialogengine::VisualResponse *this)
{
  void **v2;

  *((_QWORD *)this - 8) = off_1E792D990;
  v2 = (void **)((char *)this - 64);
  *(_QWORD *)this = &unk_1E792D9E8;
  SnippetUI::Response::~Response((siri::dialogengine::VisualResponse *)((char *)this + 144));
  *v2 = off_1E793A6B0;
  *(_QWORD *)this = &unk_1E793A708;
  if (*((char *)this + 127) < 0)
    operator delete(*((void **)this + 13));
  if (*((char *)this + 103) < 0)
    operator delete(*((void **)this + 10));
  if (*((char *)this + 79) < 0)
    operator delete(*((void **)this + 7));
  if (*((char *)this + 55) < 0)
    operator delete(*((void **)this + 4));
  *(_QWORD *)this = off_1E793AED8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*((_QWORD **)this + 2));
  siri::dialogengine::LineNumberBase::~LineNumberBase(v2);
}

{
  siri::dialogengine::VisualResponse::~VisualResponse((siri::dialogengine::VisualResponse *)((char *)this - 64));
}

uint64_t `non-virtual thunk to'siri::dialogengine::VisualResponse::Validate(siri::dialogengine::VisualResponse *this, siri::dialogengine::Context *a2)
{
  return siri::dialogengine::VisualResponse::Validate((siri::dialogengine::VisualResponse *)((char *)this - 64), a2);
}

siri::dialogengine::VisualResponse *siri::dialogengine::VisualResponse::VisualResponse(siri::dialogengine::VisualResponse *this, const siri::dialogengine::VisualResponse *a2)
{
  siri::dialogengine::Node *v4;

  v4 = siri::dialogengine::Node::Node(this, a2);
  *(_QWORD *)v4 = off_1E792D990;
  *((_QWORD *)v4 + 8) = &unk_1E792D9E8;
  SnippetUI::Response::Response((siri::dialogengine::Node *)((char *)v4 + 208), (const siri::dialogengine::VisualResponse *)((char *)a2 + 208));
  return this;
}

void sub_1BF921DD4(_Unwind_Exception *a1)
{
  siri::dialogengine::Node *v1;

  siri::dialogengine::Node::~Node(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<siri::dialogengine::VisualResponse *,std::shared_ptr<siri::dialogengine::VisualResponse>::__shared_ptr_default_delete<siri::dialogengine::VisualResponse,siri::dialogengine::VisualResponse>,std::allocator<siri::dialogengine::VisualResponse>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B8D890);
}

uint64_t std::__shared_ptr_pointer<siri::dialogengine::VisualResponse *,std::shared_ptr<siri::dialogengine::VisualResponse>::__shared_ptr_default_delete<siri::dialogengine::VisualResponse,siri::dialogengine::VisualResponse>,std::allocator<siri::dialogengine::VisualResponse>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<siri::dialogengine::VisualResponse *,std::shared_ptr<siri::dialogengine::VisualResponse>::__shared_ptr_default_delete<siri::dialogengine::VisualResponse,siri::dialogengine::VisualResponse>,std::allocator<siri::dialogengine::VisualResponse>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

siri::dialogengine::VisualResponse *siri::dialogengine::VisualResponse::VisualResponse(siri::dialogengine::VisualResponse *this)
{
  *((_QWORD *)this + 24) = 0;
  *((_QWORD *)this + 25) = 0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 9) = (char *)this + 80;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_DWORD *)this + 48) = 1065353216;
  *(_QWORD *)this = off_1E792D990;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = &unk_1E792D9E8;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  SnippetUI::Response::Response((siri::dialogengine::VisualResponse *)((char *)this + 208));
  return this;
}

void sub_1BF921EDC(_Unwind_Exception *a1)
{
  siri::dialogengine::Node *v1;

  siri::dialogengine::Node::~Node(v1);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::VisualResponse::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL4 v4;
  unsigned __int8 v5;
  size_t v6;
  unint64_t v7;
  int v8;
  void **v9;
  uint64_t v10;
  void **p_s1;
  int v12;
  int v13;
  int v14;
  int v15;
  BOOL v17;
  _BOOL4 v18;
  void *__p[2];
  unsigned __int8 v21;
  void *__s1;
  size_t __n;
  unsigned __int8 v24;

  v4 = siri::dialogengine::Node::operator==(a1, a2);
  google::protobuf::MessageLite::SerializeAsString((google::protobuf::MessageLite *)(a1 + 208), (uint64_t)&__s1);
  google::protobuf::MessageLite::SerializeAsString((google::protobuf::MessageLite *)(a2 + 208), (uint64_t)__p);
  v5 = v24;
  if ((v24 & 0x80u) == 0)
    v6 = v24;
  else
    v6 = __n;
  v7 = v21;
  v8 = (char)v21;
  if ((v21 & 0x80u) != 0)
    v7 = (unint64_t)__p[1];
  if (v6 != v7)
  {
    v18 = 0;
    if (((char)v21 & 0x80000000) == 0)
      goto LABEL_23;
    goto LABEL_26;
  }
  if ((v21 & 0x80u) == 0)
    v9 = __p;
  else
    v9 = (void **)__p[0];
  if ((char)v24 < 0)
  {
    v18 = memcmp(__s1, v9, __n) == 0;
    goto LABEL_22;
  }
  if (v24)
  {
    v10 = v24 - 1;
    p_s1 = &__s1;
    do
    {
      v13 = *(unsigned __int8 *)p_s1;
      p_s1 = (void **)((char *)p_s1 + 1);
      v12 = v13;
      v15 = *(unsigned __int8 *)v9;
      v9 = (void **)((char *)v9 + 1);
      v14 = v15;
      v17 = v10-- != 0;
      v18 = v12 == v14;
    }
    while (v12 == v14 && v17);
LABEL_22:
    if ((v8 & 0x80000000) == 0)
      goto LABEL_23;
LABEL_26:
    operator delete(__p[0]);
    if ((v24 & 0x80) == 0)
      return v4 & v18;
LABEL_27:
    operator delete(__s1);
    return v4 & v18;
  }
  v18 = 1;
  if ((char)v21 < 0)
    goto LABEL_26;
LABEL_23:
  if ((v5 & 0x80) != 0)
    goto LABEL_27;
  return v4 & v18;
}

void sub_1BF922008(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::VisualResponse::operator!=(uint64_t a1, uint64_t a2)
{
  return siri::dialogengine::VisualResponse::operator==(a1, a2) ^ 1;
}

uint64_t siri::dialogengine::VisualResponse::GetResponseMessage(siri::dialogengine::VisualResponse *this)
{
  return (uint64_t)this + 208;
}

uint64_t siri::dialogengine::VisualResponse::SetResponseMessage(uint64_t a1, uint64_t a2)
{
  const char *v2;
  uint64_t v3;

  v3 = google::protobuf::MessageLite::ParseFromString(a1 + 208, a2);
  if ((v3 & 1) == 0)
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Could not parse Visual CAT from array", v2);
  return v3;
}

uint64_t siri::dialogengine::VisualResponse::AddedRequiredVariableOrPhrase(uint64_t this)
{
  *(_BYTE *)(this + 352) = 1;
  return this;
}

void siri::dialogengine::VisualResponse::GetResponseJSON(siri::dialogengine::VisualResponse *this@<X0>, _QWORD *a2@<X8>)
{
  _BYTE v4[8];
  void *__p;
  char v6;
  _BYTE v7[8];
  void *v8;
  char v9;
  int v10;

  google::protobuf::util::Status::Status((uint64_t)v7);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v10 = 0;
  google::protobuf::util::MessageToJsonString((siri::dialogengine::VisualResponse *)((char *)this + 208), (uint64_t)a2, (uint64_t)&v10, (uint64_t)v4);
  google::protobuf::util::Status::operator=((uint64_t)v7, (uint64_t)v4);
  if (v6 < 0)
    operator delete(__p);
  if (v9 < 0)
    operator delete(v8);
}

void sub_1BF922104(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;

  if (a16 < 0)
    operator delete(__p);
  if (*(char *)(v23 + 23) < 0)
    operator delete(*(void **)v23);
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::VisualResponse::GetResponseBase64Protobuf(siri::dialogengine::VisualResponse *this@<X0>, std::string *a2@<X8>)
{
  void *__p[2];
  char v4;

  google::protobuf::MessageLite::SerializeAsString((siri::dialogengine::VisualResponse *)((char *)this + 208), (uint64_t)__p);
  siri::dialogengine::EncodeBase64((uint64_t)__p, a2);
  if (v4 < 0)
    operator delete(__p[0]);
}

void sub_1BF922194(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL siri::dialogengine::VisualResponse::GetResponseBytes@<W0>(siri::dialogengine::VisualResponse *this@<X0>, uint64_t a2@<X8>)
{
  return google::protobuf::MessageLite::SerializeAsString((siri::dialogengine::VisualResponse *)((char *)this + 208), a2);
}

uint64_t siri::dialogengine::GrammarFeature::GrammarFeature(uint64_t a1, int a2, __int128 *a3, const void ***a4, char a5)
{
  __int128 v8;

  *(_DWORD *)a1 = a2;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v8 = *a3;
    *(_QWORD *)(a1 + 24) = *((_QWORD *)a3 + 2);
    *(_OWORD *)(a1 + 8) = v8;
  }
  std::set<std::string>::set[abi:ne180100]((uint64_t *)(a1 + 32), a4);
  *(_BYTE *)(a1 + 56) = a5;
  return a1;
}

void sub_1BF922228(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::GrammarFeature::GrammarFeature(uint64_t a1, int a2, uint64_t a3, _QWORD *a4, char a5)
{
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  BOOL v13;
  void *__p[2];
  char v16;
  std::basic_string<char16_t> v17;

  *(_DWORD *)a1 = a2;
  morphun::util::StringUtils::to_string();
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  *(_QWORD *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 56) = a5;
  v10 = (_QWORD *)*a4;
  v8 = a4 + 1;
  v9 = v10;
  if (v10 != v8)
  {
    do
    {
      if (*((char *)v9 + 55) < 0)
        std::basic_string<char16_t>::__init_copy_ctor_external(&v17, (const std::basic_string<char16_t>::value_type *)v9[4], v9[5]);
      else
        v17 = *(std::basic_string<char16_t> *)(v9 + 4);
      morphun::util::StringUtils::to_string();
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)(a1 + 32), (const void **)__p, (uint64_t)__p);
      if (v16 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v17.__r_.__value_.__l.__data_);
      v11 = (_QWORD *)v9[1];
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (_QWORD *)v9[2];
          v13 = *v12 == (_QWORD)v9;
          v9 = v12;
        }
        while (!v13);
      }
      v9 = v12;
    }
    while (v12 != v8);
  }
  return a1;
}

void sub_1BF922360(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void **v21;
  uint64_t v22;
  uint64_t v23;

  std::__tree<std::string>::destroy(v23, *(char **)(v22 + 40));
  if (*(char *)(v22 + 31) < 0)
    operator delete(*v21);
  _Unwind_Resume(a1);
}

void std::basic_string<char16_t>::__init_copy_ctor_external(std::basic_string<char16_t> *this, const std::basic_string<char16_t>::value_type *__s, std::basic_string<char16_t>::size_type __sz)
{
  std::basic_string<char16_t> *v5;
  std::basic_string<char16_t>::size_type v6;
  std::basic_string<char16_t> *v7;
  uint64_t v8;

  v5 = this;
  if (__sz > 0xA)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v6 = (__sz & 0xFFFFFFFFFFFFFFFCLL) + 4;
    if ((__sz | 3) != 0xB)
      v6 = __sz | 3;
    v7 = (std::basic_string<char16_t> *)std::__allocate_at_least[abi:ne180100]<std::allocator<char16_t>>(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v8 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::basic_string<char16_t>::size_type)v7;
    v5 = v7;
  }
  else
  {
    *((_BYTE *)&this->__r_.__value_.__s + 23) = __sz;
  }
  memmove(v5, __s, 2 * __sz + 2);
}

uint64_t siri::dialogengine::GrammarFeature::GetType(siri::dialogengine::GrammarFeature *this)
{
  return *(unsigned int *)this;
}

void siri::dialogengine::GrammarFeature::GetName(siri::dialogengine::GrammarFeature *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 31) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 1), *((_QWORD *)this + 2));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 8);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 3);
  }
}

uint64_t *siri::dialogengine::GrammarFeature::GetValues@<X0>(const void ***this@<X0>, uint64_t *a2@<X8>)
{
  return std::set<std::string>::set[abi:ne180100](a2, this + 4);
}

uint64_t siri::dialogengine::GrammarFeature::IsUniqueValues(siri::dialogengine::GrammarFeature *this)
{
  return *((unsigned __int8 *)this + 56);
}

__n128 siri::dialogengine::GrammarFeature::GetCanonicalGrammarName@<Q0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  unsigned __int8 v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _BOOL4 v9;
  _QWORD *v10;
  __n128 result;
  const std::string::value_type *v12;
  std::string::size_type v13;
  _QWORD *v14;
  char v15;
  char **v16;
  char *v17;

  if ((v4 & 1) == 0
  {
    v14 = (_QWORD *)operator new();
    *v14 = 0;
    siri::dialogengine::GrammarFeature::GetCanonicalGrammarName(std::string const&)::flag = (uint64_t)v14;
  }
  v5 = atomic_load((unint64_t *)siri::dialogengine::GrammarFeature::GetCanonicalGrammarName(std::string const&)::flag);
  if (v5 != -1)
  {
    v17 = &v15;
    v16 = &v17;
    std::__call_once((std::once_flag::_State_type *)siri::dialogengine::GrammarFeature::GetCanonicalGrammarName(std::string const&)::flag, &v16, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::GrammarFeature::GetCanonicalGrammarName(std::string const&)::$_0 &&>>);
  }
  v6 = siri::dialogengine::GrammarFeature::GetCanonicalGrammarName(std::string const&)::sGrammarNameAliases + 8;
  v7 = *(_QWORD **)(siri::dialogengine::GrammarFeature::GetCanonicalGrammarName(std::string const&)::sGrammarNameAliases
                  + 8);
  if (!v7)
    goto LABEL_11;
  v8 = siri::dialogengine::GrammarFeature::GetCanonicalGrammarName(std::string const&)::sGrammarNameAliases + 8;
  do
  {
    v9 = std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(v7 + 4, (_QWORD *)a1);
    v10 = v7 + 1;
    if (!v9)
    {
      v10 = v7;
      v8 = (uint64_t)v7;
    }
    v7 = (_QWORD *)*v10;
  }
  while (*v10);
  if (v8 == v6
    || std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>((_QWORD *)a1, (_QWORD *)(v8 + 32)))
  {
LABEL_11:
    if ((*(char *)(a1 + 23) & 0x80000000) == 0)
    {
      result = *(__n128 *)a1;
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
      a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 16);
      return result;
    }
    v12 = *(const std::string::value_type **)a1;
    v13 = *(_QWORD *)(a1 + 8);
    goto LABEL_14;
  }
  if (*(char *)(v8 + 79) < 0)
  {
    v12 = *(const std::string::value_type **)(v8 + 56);
    v13 = *(_QWORD *)(v8 + 64);
LABEL_14:
    std::string::__init_copy_ctor_external(a2, v12, v13);
    return result;
  }
  result = *(__n128 *)(v8 + 56);
  a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(v8 + 72);
  *(__n128 *)&a2->__r_.__value_.__l.__data_ = result;
  return result;
}

void sub_1BF9225E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::GrammarFeature::GetCanonicalGrammarName(std::string const&)::$_0 &&>>()
{
  uint64_t v0;
  char *v1;
  uint64_t v2;
  _QWORD v3[2];
  char v4;
  void *v5[2];
  char v6;
  void *__p;
  char v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v0 = operator new();
  std::string::basic_string[abi:ne180100]<0>(v5, "number");
  std::string::basic_string[abi:ne180100]<0>(&__p, "count");
  *(_QWORD *)(v0 + 8) = 0;
  *(_QWORD *)(v0 + 16) = 0;
  *(_QWORD *)v0 = v0 + 8;
  v1 = (char *)operator new(0x50uLL);
  v3[0] = v1;
  v3[1] = v0 + 8;
  std::pair<std::string const,std::string>::pair[abi:ne180100]((std::string *)(v1 + 32), (__int128 *)v5);
  v4 = 1;
  *(_QWORD *)v1 = 0;
  *((_QWORD *)v1 + 1) = 0;
  *((_QWORD *)v1 + 2) = v0 + 8;
  *(_QWORD *)(v0 + 8) = v1;
  v2 = **(_QWORD **)v0;
  if (v2)
  {
    *(_QWORD *)v0 = v2;
    v1 = *(char **)(v0 + 8);
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v0 + 8), (uint64_t *)v1);
  ++*(_QWORD *)(v0 + 16);
  v3[0] = 0;
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v3);
  siri::dialogengine::GrammarFeature::GetCanonicalGrammarName(std::string const&)::sGrammarNameAliases = v0;
  if (v8 < 0)
    operator delete(__p);
  if (v6 < 0)
    operator delete(v5[0]);
}

void sub_1BF922738(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;
  _QWORD **v24;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)&a9);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*v24);
  if (a23 < 0)
    operator delete(__p);
  if (a17 < 0)
    operator delete(a12);
  MEMORY[0x1C3B8D890](v23, 0x1020C4062D53EE8);
  _Unwind_Resume(a1);
}

_QWORD *siri::dialogengine::GrammarFeature::GetFeatures(uint64_t a1)
{
  unsigned __int8 v2;
  unint64_t v3;
  unsigned __int8 v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t **v8;
  uint64_t **v9;
  uint64_t v10;
  _QWORD *v11;
  _BOOL4 v12;
  _QWORD *v13;
  _QWORD *v14;
  std::string *v15;
  uint64_t v16;
  uint64_t *v17;
  char *v18;
  char isUniqueValues;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char *v28;
  char **v29;
  BOOL v30;
  char *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  char *v40;
  char **v41;
  _QWORD *v43;
  void *__p;
  char *v45;
  uint64_t v46;
  void *v47[2];
  uint64_t v48;
  void *v49;
  char *v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  _QWORD *v56;
  uint64_t v57[2];
  char v58;

  if ((v2 & 1) == 0
  {
    v43 = (_QWORD *)operator new();
    *v43 = 0;
    siri::dialogengine::GrammarFeature::GetFeatures(std::string const&)::flag = (uint64_t)v43;
  }
  v3 = atomic_load((unint64_t *)siri::dialogengine::GrammarFeature::GetFeatures(std::string const&)::flag);
  if (v3 != -1)
  {
    v57[0] = (uint64_t)&v49;
    v52 = v57;
    std::__call_once((std::once_flag::_State_type *)siri::dialogengine::GrammarFeature::GetFeatures(std::string const&)::flag, &v52, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::GrammarFeature::GetFeatures(std::string const&)::$_0 &&>>);
  }
  if ((v4 & 1) == 0
  {
    __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE4AB8], &siri::dialogengine::GrammarFeature::GetFeatures(std::string const&)::sFeaturesMutex, &dword_1BF794000);
  }
  std::mutex::lock(&siri::dialogengine::GrammarFeature::GetFeatures(std::string const&)::sFeaturesMutex);
  v5 = siri::dialogengine::GrammarFeature::GetFeatures(std::string const&)::sFeatures;
  v7 = siri::dialogengine::GrammarFeature::GetFeatures(std::string const&)::sFeatures + 8;
  v6 = *(_QWORD **)(siri::dialogengine::GrammarFeature::GetFeatures(std::string const&)::sFeatures + 8);
  v8 = (uint64_t **)(siri::dialogengine::GrammarFeature::GetFeatures(std::string const&)::sFeatures + 8);
  v9 = (uint64_t **)(siri::dialogengine::GrammarFeature::GetFeatures(std::string const&)::sFeatures + 8);
  if (v6)
  {
    v10 = siri::dialogengine::GrammarFeature::GetFeatures(std::string const&)::sFeatures + 8;
    v11 = *(_QWORD **)(siri::dialogengine::GrammarFeature::GetFeatures(std::string const&)::sFeatures + 8);
    do
    {
      v12 = std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(v11 + 4, (_QWORD *)a1);
      v13 = v11 + 1;
      if (!v12)
      {
        v13 = v11;
        v10 = (uint64_t)v11;
      }
      v11 = (_QWORD *)*v13;
    }
    while (*v13);
    if (v10 != v7
      && !std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>((_QWORD *)a1, (_QWORD *)(v10 + 32))
      && v7 != v10)
    {
      v14 = (_QWORD *)(v10 + 56);
      goto LABEL_70;
    }
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v6;
        if (!std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>((_QWORD *)a1, v6 + 4))
          break;
        v6 = (_QWORD *)*v6;
        v9 = v8;
        if (!*v8)
          goto LABEL_19;
      }
      if (!std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(v6 + 4, (_QWORD *)a1))
        break;
      v9 = (uint64_t **)(v6 + 1);
      v6 = (_QWORD *)v6[1];
      if (!v6)
        goto LABEL_19;
    }
  }
  else
  {
LABEL_19:
    v6 = operator new(0x50uLL);
    v57[0] = (uint64_t)v6;
    v57[1] = v7;
    v58 = 0;
    v15 = (std::string *)(v6 + 4);
    if (*(char *)(a1 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v15, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
    }
    else
    {
      *(_OWORD *)&v15->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
      v6[6] = *(_QWORD *)(a1 + 16);
    }
    v6[8] = 0;
    v6[9] = 0;
    v6[7] = 0;
    v58 = 1;
    *v6 = 0;
    v6[1] = 0;
    v6[2] = v8;
    *v9 = v6;
    v16 = **(_QWORD **)v5;
    v17 = v6;
    if (v16)
    {
      *(_QWORD *)v5 = v16;
      v17 = *v9;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v5 + 8), v17);
    ++*(_QWORD *)(v5 + 16);
    v57[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<siri::dialogengine::GrammarFeature>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<siri::dialogengine::GrammarFeature>>,void *>>>>::reset[abi:ne180100](v57);
  }
  v14 = v6 + 7;
  v49 = 0;
  v50 = 0;
  v51 = 0;
  v47[0] = 0;
  v47[1] = 0;
  v48 = 0;
  __p = 0;
  v45 = 0;
  v46 = 0;
  morphun::util::ULocale::ULocale();
  morphun::lang::features::LanguageGrammarFeatures::getLanguageGrammarFeatures();
  morphun::util::ULocale::~ULocale((morphun::util::ULocale *)&v52);
  if (SHIBYTE(v51) < 0)
    operator delete(v49);
  morphun::lang::features::LanguageGrammarFeatures::getCategories((morphun::lang::features::LanguageGrammarFeatures *)v57);
  v18 = (char *)v49;
  if (v49 != &v50)
  {
    do
    {
      morphun::lang::features::LanguageGrammarFeatures_GrammarCategory::getName((morphun::lang::features::LanguageGrammarFeatures_GrammarCategory *)(v18 + 56));
      morphun::lang::features::LanguageGrammarFeatures_GrammarCategory::getValues((morphun::lang::features::LanguageGrammarFeatures_GrammarCategory *)(v18 + 56));
      isUniqueValues = morphun::lang::features::LanguageGrammarFeatures_GrammarCategory::isUniqueValues((morphun::lang::features::LanguageGrammarFeatures_GrammarCategory *)(v18 + 56));
      v21 = v6[8];
      v20 = v6[9];
      if (v21 >= v20)
      {
        v23 = (uint64_t)(v21 - *v14) >> 6;
        if ((unint64_t)(v23 + 1) >> 58)
          std::vector<BOOL>::__throw_length_error[abi:ne180100]();
        v24 = v20 - *v14;
        v25 = v24 >> 5;
        if (v24 >> 5 <= (unint64_t)(v23 + 1))
          v25 = v23 + 1;
        if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFC0)
          v26 = 0x3FFFFFFFFFFFFFFLL;
        else
          v26 = v25;
        v56 = v6 + 9;
        if (v26)
          v26 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<siri::dialogengine::GrammarFeature>>(v26);
        else
          v27 = 0;
        v52 = (uint64_t *)v26;
        v53 = v26 + (v23 << 6);
        v54 = v53;
        v55 = v26 + (v27 << 6);
        siri::dialogengine::GrammarFeature::GrammarFeature(v53, 1, (uint64_t)v47, &__p, isUniqueValues);
        v54 += 64;
        std::vector<siri::dialogengine::GrammarFeature>::__swap_out_circular_buffer(v6 + 7, &v52);
        v22 = v6[8];
        std::__split_buffer<siri::dialogengine::GrammarFeature>::~__split_buffer((uint64_t)&v52);
      }
      else
      {
        siri::dialogengine::GrammarFeature::GrammarFeature(v6[8], 1, (uint64_t)v47, &__p, isUniqueValues);
        v22 = v21 + 64;
        v6[8] = v21 + 64;
      }
      v6[8] = v22;
      std::__tree<std::string>::destroy(v45);
      if (SHIBYTE(v48) < 0)
        operator delete(v47[0]);
      v28 = (char *)*((_QWORD *)v18 + 1);
      if (v28)
      {
        do
        {
          v29 = (char **)v28;
          v28 = *(char **)v28;
        }
        while (v28);
      }
      else
      {
        do
        {
          v29 = (char **)*((_QWORD *)v18 + 2);
          v30 = *v29 == v18;
          v18 = (char *)v29;
        }
        while (!v30);
      }
      v18 = (char *)v29;
    }
    while (v29 != &v50);
  }
  std::__tree<std::__value_type<std::basic_string<char16_t>,morphun::lang::features::LanguageGrammarFeatures_GrammarCategory>,std::__map_value_compare<std::basic_string<char16_t>,std::__value_type<std::basic_string<char16_t>,morphun::lang::features::LanguageGrammarFeatures_GrammarCategory>,std::less<std::basic_string<char16_t>>,true>,std::allocator<std::__value_type<std::basic_string<char16_t>,morphun::lang::features::LanguageGrammarFeatures_GrammarCategory>>>::destroy(v50);
  morphun::lang::features::LanguageGrammarFeatures::getFeatures((morphun::lang::features::LanguageGrammarFeatures *)v57);
  v31 = (char *)v49;
  if (v49 != &v50)
  {
    do
    {
      morphun::lang::features::LanguageGrammarFeatures_GrammarFeatures::getName((morphun::lang::features::LanguageGrammarFeatures_GrammarFeatures *)(v31 + 32));
      v33 = v6[8];
      v32 = v6[9];
      if (v33 >= v32)
      {
        v35 = (uint64_t)(v33 - *v14) >> 6;
        if ((unint64_t)(v35 + 1) >> 58)
          std::vector<BOOL>::__throw_length_error[abi:ne180100]();
        v36 = v32 - *v14;
        v37 = v36 >> 5;
        if (v36 >> 5 <= (unint64_t)(v35 + 1))
          v37 = v35 + 1;
        if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFC0)
          v38 = 0x3FFFFFFFFFFFFFFLL;
        else
          v38 = v37;
        v56 = v6 + 9;
        if (v38)
          v38 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<siri::dialogengine::GrammarFeature>>(v38);
        else
          v39 = 0;
        v52 = (uint64_t *)v38;
        v53 = v38 + (v35 << 6);
        v54 = v53;
        v55 = v38 + (v39 << 6);
        std::allocator<siri::dialogengine::GrammarFeature>::construct[abi:ne180100]<siri::dialogengine::GrammarFeature,siri::dialogengine::GrammarFeature::Type,std::basic_string<char16_t>>(v53, 2, (uint64_t)v47);
        v54 += 64;
        std::vector<siri::dialogengine::GrammarFeature>::__swap_out_circular_buffer(v6 + 7, &v52);
        v34 = v6[8];
        std::__split_buffer<siri::dialogengine::GrammarFeature>::~__split_buffer((uint64_t)&v52);
      }
      else
      {
        std::allocator<siri::dialogengine::GrammarFeature>::construct[abi:ne180100]<siri::dialogengine::GrammarFeature,siri::dialogengine::GrammarFeature::Type,std::basic_string<char16_t>>(v6[8], 2, (uint64_t)v47);
        v34 = v33 + 64;
        v6[8] = v34;
      }
      v6[8] = v34;
      if (SHIBYTE(v48) < 0)
        operator delete(v47[0]);
      v40 = (char *)*((_QWORD *)v31 + 1);
      if (v40)
      {
        do
        {
          v41 = (char **)v40;
          v40 = *(char **)v40;
        }
        while (v40);
      }
      else
      {
        do
        {
          v41 = (char **)*((_QWORD *)v31 + 2);
          v30 = *v41 == v31;
          v31 = (char *)v41;
        }
        while (!v30);
      }
      v31 = (char *)v41;
    }
    while (v41 != &v50);
  }
  std::__tree<morphun::lang::features::LanguageGrammarFeatures_GrammarFeatures>::destroy(v50);
  morphun::lang::features::LanguageGrammarFeatures::~LanguageGrammarFeatures((morphun::lang::features::LanguageGrammarFeatures *)v57);
LABEL_70:
  std::mutex::unlock(&siri::dialogengine::GrammarFeature::GetFeatures(std::string const&)::sFeaturesMutex);
  return v14;
}

void sub_1BF922D6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BF922DA8(void *a1, std::string *a2, std::string *a3, void *a4, uint64_t a5, int a6, __int16 a7, char a8, char a9, char a10, void *a11, uint64_t a12, uint64_t a13, __int128 a14, std::string::size_type a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,__int128 __pa,std::string::size_type a36)
{
  int v36;
  void *v38;
  char *v39;
  std::string *v40;
  __int128 v41;
  std::string *v42;
  __int128 v43;

  v36 = (int)a2;
  morphun::lang::features::LanguageGrammarFeatures::~LanguageGrammarFeatures((morphun::lang::features::LanguageGrammarFeatures *)&__pa);
  if (v36 == 1)
  {
    v38 = __cxa_begin_catch(a1);
    v39 = (char *)(*(uint64_t (**)(void *))(*(_QWORD *)v38 + 16))(v38);
    std::string::basic_string[abi:ne180100]<0>(&a11, v39);
    v40 = std::string::insert((std::string *)&a11, 0, "In GrammarFeature::GetFeatures(const string &locale): morphun::lang::features::LanguageGrammarFeatures::getLanguageGrammarFeatures failed: [");
    v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
    a15 = v40->__r_.__value_.__r.__words[2];
    a14 = v41;
    v40->__r_.__value_.__l.__size_ = 0;
    v40->__r_.__value_.__r.__words[2] = 0;
    v40->__r_.__value_.__r.__words[0] = 0;
    v42 = std::string::append((std::string *)&a14, "]");
    v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
    a36 = v42->__r_.__value_.__r.__words[2];
    __pa = v43;
    v42->__r_.__value_.__l.__size_ = 0;
    v42->__r_.__value_.__r.__words[2] = 0;
    v42->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Log::LogWithLevel((uint64_t)&__pa, 3u);
    if (SHIBYTE(a36) < 0)
      operator delete((void *)__pa);
    if (SHIBYTE(a15) < 0)
      operator delete((void *)a14);
    if (SHIBYTE(a13) < 0)
      operator delete(a11);
    __cxa_end_catch();
    JUMPOUT(0x1BF922CA8);
  }
  JUMPOUT(0x1BF922D94);
}

void sub_1BF922F98(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  if (a46 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a15 < 0)
    operator delete(a10);
  __cxa_end_catch();
  JUMPOUT(0x1BF922D94);
}

_QWORD *std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::GrammarFeature::GetFeatures(std::string const&)::$_0 &&>>()
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  result[2] = 0;
  result[1] = 0;
  *result = result + 1;
  siri::dialogengine::GrammarFeature::GetFeatures(std::string const&)::sFeatures = (uint64_t)result;
  return result;
}

void std::__tree<std::__value_type<std::basic_string<char16_t>,morphun::lang::features::LanguageGrammarFeatures_GrammarCategory>,std::__map_value_compare<std::basic_string<char16_t>,std::__value_type<std::basic_string<char16_t>,morphun::lang::features::LanguageGrammarFeatures_GrammarCategory>,std::less<std::basic_string<char16_t>>,true>,std::allocator<std::__value_type<std::basic_string<char16_t>,morphun::lang::features::LanguageGrammarFeatures_GrammarCategory>>>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::basic_string<char16_t>,morphun::lang::features::LanguageGrammarFeatures_GrammarCategory>,std::__map_value_compare<std::basic_string<char16_t>,std::__value_type<std::basic_string<char16_t>,morphun::lang::features::LanguageGrammarFeatures_GrammarCategory>,std::less<std::basic_string<char16_t>>,true>,std::allocator<std::__value_type<std::basic_string<char16_t>,morphun::lang::features::LanguageGrammarFeatures_GrammarCategory>>>::destroy(*(_QWORD *)a1);
    std::__tree<std::__value_type<std::basic_string<char16_t>,morphun::lang::features::LanguageGrammarFeatures_GrammarCategory>,std::__map_value_compare<std::basic_string<char16_t>,std::__value_type<std::basic_string<char16_t>,morphun::lang::features::LanguageGrammarFeatures_GrammarCategory>,std::less<std::basic_string<char16_t>>,true>,std::allocator<std::__value_type<std::basic_string<char16_t>,morphun::lang::features::LanguageGrammarFeatures_GrammarCategory>>>::destroy(*((_QWORD *)a1 + 1));
    morphun::lang::features::LanguageGrammarFeatures_GrammarCategory::~LanguageGrammarFeatures_GrammarCategory((morphun::lang::features::LanguageGrammarFeatures_GrammarCategory *)(a1 + 56));
    if (a1[55] < 0)
      operator delete(*((void **)a1 + 4));
    operator delete(a1);
  }
}

void std::__tree<morphun::lang::features::LanguageGrammarFeatures_GrammarFeatures>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<morphun::lang::features::LanguageGrammarFeatures_GrammarFeatures>::destroy(*a1);
    std::__tree<morphun::lang::features::LanguageGrammarFeatures_GrammarFeatures>::destroy(a1[1]);
    (*(void (**)(_QWORD *))(a1[4] + 8))(a1 + 4);
    operator delete(a1);
  }
}

void std::allocator<siri::dialogengine::GrammarFeature>::construct[abi:ne180100]<siri::dialogengine::GrammarFeature,siri::dialogengine::GrammarFeature::Type,std::basic_string<char16_t>>(uint64_t a1, int a2, uint64_t a3)
{
  char **v3;
  char *v4[2];

  v4[0] = 0;
  v4[1] = 0;
  v3 = v4;
  siri::dialogengine::GrammarFeature::GrammarFeature(a1, a2, a3, &v3, 1);
  std::__tree<std::string>::destroy(v4[0]);
}

void sub_1BF92310C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char *a11)
{
  std::__tree<std::string>::destroy(a11);
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<siri::dialogengine::GrammarFeature>>(unint64_t a1)
{
  if (a1 >> 58)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(a1 << 6);
}

uint64_t *std::vector<siri::dialogengine::GrammarFeature>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  if (v2 != *result)
  {
    v5 = 0;
    do
    {
      v6 = v4 + v5;
      v7 = v2 + v5;
      *(_DWORD *)(v6 - 64) = *(_DWORD *)(v2 + v5 - 64);
      v8 = *(_OWORD *)(v2 + v5 - 56);
      *(_QWORD *)(v6 - 40) = *(_QWORD *)(v2 + v5 - 40);
      *(_OWORD *)(v6 - 56) = v8;
      *(_QWORD *)(v7 - 48) = 0;
      *(_QWORD *)(v7 - 40) = 0;
      *(_QWORD *)(v7 - 56) = 0;
      *(_QWORD *)(v6 - 32) = *(_QWORD *)(v2 + v5 - 32);
      v9 = (uint64_t *)(v2 + v5 - 24);
      v10 = *v9;
      *(_QWORD *)(v4 + v5 - 24) = *v9;
      v11 = v4 + v5 - 24;
      v12 = *(_QWORD *)(v2 + v5 - 16);
      *(_QWORD *)(v6 - 16) = v12;
      if (v12)
      {
        *(_QWORD *)(v10 + 16) = v11;
        *(_QWORD *)(v7 - 32) = v9;
        *v9 = 0;
        *(_QWORD *)(v2 + v5 - 16) = 0;
      }
      else
      {
        *(_QWORD *)(v6 - 32) = v11;
      }
      *(_BYTE *)(v4 + v5 - 8) = *(_BYTE *)(v2 + v5 - 8);
      v5 -= 64;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  v13 = *result;
  *result = v4;
  a2[1] = v13;
  v14 = result[1];
  result[1] = a2[2];
  a2[2] = v14;
  v15 = result[2];
  result[2] = a2[3];
  a2[3] = v15;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<siri::dialogengine::GrammarFeature>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 64;
    std::allocator<siri::dialogengine::GrammarFeature>::destroy[abi:ne180100](i - 64);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::allocator<siri::dialogengine::GrammarFeature>::destroy[abi:ne180100](uint64_t a1)
{
  std::__tree<std::string>::destroy(a1 + 32, *(char **)(a1 + 40));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<siri::dialogengine::GrammarFeature>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<siri::dialogengine::GrammarFeature>>,void *>>>>::reset[abi:ne180100](uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v1 = *a1;
  *a1 = 0;
  if (v1)
  {
    if (*((_BYTE *)a1 + 16))
    {
      v2 = *(_QWORD *)(v1 + 56);
      if (v2)
      {
        v3 = *(_QWORD *)(v1 + 64);
        v4 = *(void **)(v1 + 56);
        if (v3 != v2)
        {
          do
          {
            v3 -= 64;
            std::allocator<siri::dialogengine::GrammarFeature>::destroy[abi:ne180100](v3);
          }
          while (v3 != v2);
          v4 = *(void **)(v1 + 56);
        }
        *(_QWORD *)(v1 + 64) = v2;
        operator delete(v4);
      }
      if (*(char *)(v1 + 55) < 0)
        operator delete(*(void **)(v1 + 32));
    }
    operator delete((void *)v1);
  }
}

void siri::dialogengine::ParseBinaryFile(uint64_t *a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X8>)
{
  uint64_t v4;
  unint64_t v6;
  unsigned __int8 v7;
  uint64_t (*v8)();
  const char *v9;
  uint64_t *v10;
  int v11;
  char *v12;
  uint64_t *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  siri::dialogengine::File *v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  const siri::dialogengine::CatBinary::node *v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t i;
  uint64_t v32;
  const std::string *v33;
  const std::string *v34;
  int v35;
  std::string *v36;
  std::string::size_type v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  siri::dialogengine **v52;
  siri::dialogengine **v53;
  siri::dialogengine::Node *v54;
  siri::dialogengine::Node *v55;
  std::__shared_weak_count_vtbl *v56;
  std::__shared_weak_count_vtbl *v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  siri::dialogengine *v62;
  const char *v63;
  std::string *v64;
  std::string *v65;
  siri::dialogengine *v66;
  const void *v67;
  const char *v68;
  void *v69;
  uint64_t v70;
  siri::dialogengine **v71;
  siri::dialogengine **v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  siri::dialogengine **v85;
  siri::dialogengine **v86;
  const void *v87;
  const char *v88;
  std::__shared_weak_count_vtbl *v89;
  std::__shared_weak_count_vtbl *v90;
  uint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  __int128 v95;
  std::string::size_type size;
  char v97;
  const char *v98;
  uint64_t v99;
  unint64_t *v100;
  unint64_t v101;
  uint64_t (*v102)();
  std::string *v103;
  std::string *v104;
  __int128 v105;
  uint64_t v106[2];
  uint64_t v107;
  std::__shared_weak_count *v108;
  uint64_t v109[2];
  _QWORD v110[2];
  _QWORD v111[2];
  __int128 v112;
  std::string __p;
  std::string v114;
  std::string v115;
  std::string v116;
  std::string v117;
  std::string v118;
  std::string v119;
  std::string v120;
  std::string v121[2];
  std::string v122;
  char v123;
  char v124;
  char v125;
  std::string v126;
  std::string v127[2];
  void *v128[12];
  __int128 v129;
  uint64_t v130[2];
  _BYTE v131[16];
  int v132;
  int v133;
  uint64_t v134;
  int v135;
  uint64_t v136;
  int v137;
  uint64_t v138;
  int v139;
  uint64_t v140;
  int v141;
  uint64_t v142;
  int v143;
  uint64_t v144;
  uint64_t *v145;
  std::string *__str;
  std::string *v147;
  const std::string *v148;
  __int128 *v149;
  siri::dialogengine *v150;
  void *v151[2];
  unsigned __int8 v152;

  if (!a1)
  {
    v12 = "Context cannot be null, not writing.";
LABEL_14:
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)v12, (const char *)a2);
    *(_QWORD *)a3 = 0;
    *((_QWORD *)a3 + 1) = 0;
    return;
  }
  v4 = *(unsigned __int8 *)(a2 + 23);
  if ((v4 & 0x80u) != 0)
    v4 = *(_QWORD *)(a2 + 8);
  if (!v4)
  {
    v12 = "Filename cannot be empty, not writing.";
    goto LABEL_14;
  }
  siri::dialogengine::ParseGzippedFile();
  v6 = v152;
  v7 = v152;
  if ((v152 & 0x80u) != 0)
    v6 = (unint64_t)v151[1];
  if (v6)
  {
    v8 = google::protobuf::SetLogHandler((uint64_t (*)())siri::dialogengine::ScopedLogHandler::logHandler);
    siri::dialogengine::CatBinary::cat::cat((siri::dialogengine::CatBinary::cat *)v131);
    if ((google::protobuf::MessageLite::ParseFromString(v131, v151) & 1) == 0)
    {
      siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Unable to parse binary CAT file data.", v9);
LABEL_24:
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      goto LABEL_25;
    }
    v10 = v145;
    v11 = *((char *)v145 + 23);
    if (v11 < 0)
    {
      v10 = (uint64_t *)*v145;
      if (v145[1] != 5)
      {
LABEL_23:
        siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Error parsing CAT header, expected '%s', read '%s'", v9, "CATPB", v10);
        goto LABEL_24;
      }
    }
    else if (v11 != 5)
    {
      goto LABEL_23;
    }
    if (*(_DWORD *)v10 != 1347699011 || *((_BYTE *)v10 + 4) != 66)
      goto LABEL_23;
    v14 = a1 + 63;
    v15 = a1[63];
    v16 = (std::__shared_weak_count *)a1[64];
    v102 = v8;
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldxr(p_shared_owners);
      while (__stxr(v18 + 1, p_shared_owners));
      v19 = (unint64_t *)&v16->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
      if (v15)
        goto LABEL_40;
    }
    else if (v15)
    {
      v21 = *v14;
      v129 = (unint64_t)*v14;
      goto LABEL_43;
    }
    v22 = (siri::dialogengine::File *)operator new();
    siri::dialogengine::File::File(v22);
    std::shared_ptr<siri::dialogengine::File>::shared_ptr[abi:ne180100]<siri::dialogengine::File,void>(v130, (uint64_t)v22);
    std::shared_ptr<siri::dialogengine::PatternSchemaUsage>::operator=[abi:ne180100](a1 + 63, v130[0], v130[1]);
    std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)v130);
LABEL_40:
    v21 = a1[63];
    v23 = a1[64];
    *(_QWORD *)&v129 = v21;
    *((_QWORD *)&v129 + 1) = v23;
    if (v23)
    {
      v24 = (unint64_t *)(v23 + 8);
      do
        v25 = __ldxr(v24);
      while (__stxr(v25 + 1, v24));
    }
LABEL_43:
    std::string::operator=((std::string *)(v21 + 152), __str);
    v27 = v132;
    if ((v132 & 4) != 0)
    {
      std::string::operator=((std::string *)(v21 + 104), v147);
      v27 = v132;
    }
    if ((v27 & 8) != 0)
      siri::dialogengine::File::SetLocale(v21, v148);
    if (v134)
      v28 = v134 + 8;
    else
      v28 = 0;
    if (v133)
    {
      v29 = 8 * v133;
      do
      {
        siri::dialogengine::File::AddMetadata(v21, *(_QWORD *)(*(_QWORD *)v28 + 24), *(const void ***)(*(_QWORD *)v28 + 32));
        v28 += 8;
        v29 -= 8;
      }
      while (v29);
    }
    if (v136)
      v30 = (uint64_t *)(v136 + 8);
    else
      v30 = 0;
    if (v135)
    {
      for (i = 8 * v135; i; i -= 8)
      {
        v32 = *v30;
        v33 = *(const std::string **)(*v30 + 24);
        v34 = *(const std::string **)(*v30 + 32);
        std::string::basic_string[abi:ne180100]<0>(&v118, "");
        std::string::basic_string[abi:ne180100]<0>(&v117, "");
        std::string::basic_string[abi:ne180100]<0>(&v116, "");
        std::string::basic_string[abi:ne180100]<0>(&v115, "");
        std::string::basic_string[abi:ne180100]<0>(&v114, "");
        std::string::basic_string[abi:ne180100]<0>(&__p, "");
        siri::dialogengine::Parameter::Parameter((uint64_t)&v119, v33, v34, &v118, &v117, &v116, &v115, &v114, &__p, 1, 0, 0, 1);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v114.__r_.__value_.__l.__data_);
        if (SHIBYTE(v115.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v115.__r_.__value_.__l.__data_);
        if (SHIBYTE(v116.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v116.__r_.__value_.__l.__data_);
        if (SHIBYTE(v117.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v117.__r_.__value_.__l.__data_);
        if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v118.__r_.__value_.__l.__data_);
        std::string::operator=(&v120, *(const std::string **)(v32 + 40));
        std::string::operator=(&v126, *(const std::string **)(v32 + 48));
        std::string::operator=(v121, *(const std::string **)(v32 + 56));
        std::string::operator=(&v122, *(const std::string **)(v32 + 64));
        std::string::operator=(v127, *(const std::string **)(v32 + 72));
        v35 = *(_DWORD *)(v32 + 16);
        if ((v35 & 0x100) != 0)
        {
          v124 = *(_BYTE *)(v32 + 81);
          if ((v35 & 0x80) != 0)
          {
LABEL_77:
            v123 = *(_BYTE *)(v32 + 80);
            if ((v35 & 0x200) == 0)
              goto LABEL_74;
LABEL_73:
            v125 = *(_BYTE *)(v32 + 82);
            goto LABEL_74;
          }
        }
        else if ((v35 & 0x80) != 0)
        {
          goto LABEL_77;
        }
        if ((v35 & 0x200) != 0)
          goto LABEL_73;
LABEL_74:
        siri::dialogengine::File::AddParameter((siri::dialogengine::File *)v21, (const siri::dialogengine::Parameter *)&v119);
        v128[8] = off_1E793AED8;
        std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((_QWORD *)v128[10]);
        siri::dialogengine::LineNumberBase::~LineNumberBase(v128);
        siri::dialogengine::ObjectProperty::~ObjectProperty((void **)&v119.__r_.__value_.__l.__data_);
        ++v30;
      }
    }
    v36 = (std::string *)(v138 + 8);
    if (!v138)
      v36 = 0;
    if (v137)
    {
      v103 = (std::string *)((char *)v36 + 8 * v137);
      while (1)
      {
        v104 = v36;
        v37 = v36->__r_.__value_.__r.__words[0];
        v38 = operator new();
        *(_OWORD *)(v38 + 40) = 0u;
        *(_OWORD *)(v38 + 24) = 0u;
        *(_OWORD *)(v38 + 8) = 0u;
        *(_QWORD *)(v38 + 88) = 0;
        *(_QWORD *)(v38 + 80) = 0;
        *(_QWORD *)(v38 + 72) = v38 + 80;
        *(_QWORD *)v38 = off_1E7939B60;
        *(_OWORD *)(v38 + 96) = 0u;
        *(_QWORD *)(v38 + 56) = 0;
        *(_QWORD *)(v38 + 64) = &unk_1E7939B88;
        *(_OWORD *)(v38 + 112) = 0u;
        *(_OWORD *)(v38 + 128) = 0u;
        *(_OWORD *)(v38 + 144) = 0u;
        *(_QWORD *)(v38 + 160) = 0;
        std::string::operator=((std::string *)(v38 + 96), *(const std::string **)(v37 + 48));
        if ((*(_BYTE *)(v37 + 16) & 2) != 0)
          std::string::operator=((std::string *)(v38 + 120), *(const std::string **)(v37 + 56));
        v39 = *(_QWORD *)(v37 + 40);
        v40 = v39 ? (uint64_t *)(v39 + 8) : 0;
        v41 = *(int *)(v37 + 32);
        if ((_DWORD)v41)
          break;
LABEL_101:
        v48 = v129;
        v111[0] = v38;
        v49 = (std::__shared_weak_count *)operator new();
        v49->__shared_owners_ = 0;
        v50 = (unint64_t *)&v49->__shared_owners_;
        v49->__vftable = (std::__shared_weak_count_vtbl *)&off_1E792DB00;
        v49->__shared_weak_owners_ = 0;
        v49[1].__vftable = (std::__shared_weak_count_vtbl *)v38;
        v111[1] = v49;
        siri::dialogengine::File::AddCondition(v48, (uint64_t)v111);
        do
          v51 = __ldaxr(v50);
        while (__stlxr(v51 - 1, v50));
        if (!v51)
        {
          ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
          std::__shared_weak_count::__release_weak(v49);
        }
        v36 = (std::string *)&v104->__r_.__value_.__r.__words[1];
        if (&v104->__r_.__value_.__r.__words[1] == (std::string::size_type *)v103)
          goto LABEL_106;
      }
      v42 = &v40[v41];
      while (1)
      {
        v43 = *v40;
        if (*(char *)(v38 + 119) < 0)
          std::string::__init_copy_ctor_external(&v119, *(const std::string::value_type **)(v38 + 96), *(_QWORD *)(v38 + 104));
        else
          v119 = *(std::string *)(v38 + 96);
        v44 = siri::dialogengine::ParseConditionEntry((uint64_t *)&v119, v43);
        if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v119.__r_.__value_.__l.__data_);
        if (!v44)
          break;
        *(_QWORD *)&v112 = v44;
        v45 = (std::__shared_weak_count *)operator new();
        v45->__shared_owners_ = 0;
        v46 = (unint64_t *)&v45->__shared_owners_;
        v45->__vftable = (std::__shared_weak_count_vtbl *)&off_1E792DA88;
        v45->__shared_weak_owners_ = 0;
        v45[1].__vftable = (std::__shared_weak_count_vtbl *)v44;
        *((_QWORD *)&v112 + 1) = v45;
        std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::emplace_back<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry> const&>((char **)(v38 + 144), &v112);
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
          std::__shared_weak_count::__release_weak(v45);
        }
        if (++v40 == v42)
          goto LABEL_101;
      }
    }
    else
    {
LABEL_106:
      if (v140)
        v52 = (siri::dialogengine **)(v140 + 8);
      else
        v52 = 0;
      if (v139)
      {
        v53 = &v52[v139];
        while (1)
        {
          v54 = (siri::dialogengine::Node *)siri::dialogengine::ParseNodeMsg(*v52, v26);
          v55 = v54;
          if (!v54)
            break;
          if (!v56)
          {
            siri::dialogengine::Node::GetIdForDebug(v55, (siri::dialogengine::Context *)a1, 0, &v119);
            if ((v119.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v64 = &v119;
            else
              v64 = (std::string *)v119.__r_.__value_.__r.__words[0];
            v8 = v102;
            siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Error: Unexpected node type from phrase '%s'", v63, v64);
            if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v119.__r_.__value_.__l.__data_);
            goto LABEL_152;
          }
          v57 = v56;
          v58 = v129;
          v110[0] = v56;
          v59 = (std::__shared_weak_count *)operator new();
          v59->__shared_owners_ = 0;
          v60 = (unint64_t *)&v59->__shared_owners_;
          v59->__vftable = (std::__shared_weak_count_vtbl *)&off_1E792DB78;
          v59->__shared_weak_owners_ = 0;
          v59[1].__vftable = v57;
          v110[1] = v59;
          siri::dialogengine::File::AddPhrase(v58, v110);
          do
            v61 = __ldaxr(v60);
          while (__stlxr(v61 - 1, v60));
          if (!v61)
          {
            ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
            std::__shared_weak_count::__release_weak(v59);
          }
          if (++v52 == v53)
            goto LABEL_118;
        }
      }
      else
      {
LABEL_118:
        if ((v132 & 0x20) != 0)
        {
          v62 = v150;
          v8 = v102;
          if (!v150)
          {
            google::protobuf::internal::LogMessage::LogMessage((uint64_t)&v119, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/CatBinary.pb.h", 3139);
            v65 = google::protobuf::internal::LogMessage::operator<<(&v119, "CHECK failed: !value || root_ != nullptr: ");
            google::protobuf::internal::LogFinisher::operator=((int)&v118, (const char **)&v65->__r_.__value_.__l.__data_);
            google::protobuf::internal::LogMessage::~LogMessage((void **)&v119.__r_.__value_.__l.__data_);
            v62 = v150;
          }
          if (v62)
            v66 = v62;
          else
            v66 = (siri::dialogengine *)&siri::dialogengine::CatBinary::_node_default_instance_;
          v67 = (const void *)siri::dialogengine::ParseNodeMsg(v66, v26);
          if (!v67
          {
            siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Error: root node has invalid non-Group type", v68);
LABEL_152:
            *(_QWORD *)a3 = 0;
            *((_QWORD *)a3 + 1) = 0;
            v82 = (std::__shared_weak_count *)*((_QWORD *)&v129 + 1);
            if (*((_QWORD *)&v129 + 1))
            {
              v83 = (unint64_t *)(*((_QWORD *)&v129 + 1) + 8);
              do
                v84 = __ldaxr(v83);
              while (__stlxr(v84 - 1, v83));
              if (!v84)
              {
                ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
                std::__shared_weak_count::__release_weak(v82);
              }
            }
LABEL_25:
            siri::dialogengine::CatBinary::cat::~cat((siri::dialogengine::CatBinary::cat *)v131);
            google::protobuf::SetLogHandler(v8);
            if ((v152 & 0x80) == 0)
              return;
            goto LABEL_26;
          }
          v70 = v129;
          std::shared_ptr<siri::dialogengine::Group>::shared_ptr[abi:ne180100]<siri::dialogengine::Group,void>(v109, (uint64_t)v69);
          std::shared_ptr<siri::dialogengine::PatternSchemaUsage>::operator=[abi:ne180100]((_QWORD *)(v70 + 224), v109[0], v109[1]);
          std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)v109);
        }
        if (v142)
          v71 = (siri::dialogengine **)(v142 + 8);
        else
          v71 = 0;
        if (!v141)
        {
LABEL_157:
          if (v144)
            v85 = (siri::dialogengine **)(v144 + 8);
          else
            v85 = 0;
          if (v143)
          {
            v86 = &v85[v143];
            do
            {
              v87 = (const void *)siri::dialogengine::ParseNodeMsg(*v85, v26);
              if (v87
              {
                v90 = v89;
                v91 = v129;
                v106[0] = (uint64_t)v89;
                v92 = (std::__shared_weak_count *)operator new();
                v92->__shared_owners_ = 0;
                v93 = (unint64_t *)&v92->__shared_owners_;
                v92->__vftable = (std::__shared_weak_count_vtbl *)&off_1E792DC68;
                v92->__shared_weak_owners_ = 0;
                v92[1].__vftable = v90;
                v106[1] = (uint64_t)v92;
                siri::dialogengine::File::SetVisualRef(v91, v106);
                do
                  v94 = __ldaxr(v93);
                while (__stlxr(v94 - 1, v93));
                if (!v94)
                {
                  ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
                  std::__shared_weak_count::__release_weak(v92);
                }
              }
              else
              {
                siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Visual ref from node message is null", v88);
              }
              ++v85;
            }
            while (v85 != v86);
          }
          v8 = v102;
          if ((v132 & 0x10) != 0)
          {
            if (*((char *)v149 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(&v119, *(const std::string::value_type **)v149, *((_QWORD *)v149 + 1));
            }
            else
            {
              v95 = *v149;
              v119.__r_.__value_.__r.__words[2] = *((_QWORD *)v149 + 2);
              *(_OWORD *)&v119.__r_.__value_.__l.__data_ = v95;
            }
            size = HIBYTE(v119.__r_.__value_.__r.__words[2]);
            v97 = HIBYTE(v119.__r_.__value_.__r.__words[2]);
            if ((v119.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              size = v119.__r_.__value_.__l.__size_;
            if (size)
            {
              _ZNSt3__115allocate_sharedB8ne180100IN4siri12dialogengine14VisualResponseENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_((siri::dialogengine::VisualResponse **)&v118);
              if ((google::protobuf::MessageLite::ParseFromString(v118.__r_.__value_.__r.__words[0] + 208, &v119) & 1) == 0)
                siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Could not parse Visual CAT from array", v98);
              v99 = v129;
              v105 = *(_OWORD *)&v118.__r_.__value_.__l.__data_;
              if (v118.__r_.__value_.__l.__size_)
              {
                v100 = (unint64_t *)(v118.__r_.__value_.__l.__size_ + 8);
                do
                  v101 = __ldxr(v100);
                while (__stxr(v101 + 1, v100));
              }
              siri::dialogengine::File::SetVisualResponse(v99, (uint64_t *)&v105);
              std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&v105);
              std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&v118);
              v97 = HIBYTE(v119.__r_.__value_.__r.__words[2]);
            }
            if (v97 < 0)
              operator delete(v119.__r_.__value_.__l.__data_);
          }
          *a3 = v129;
          a3 = &v129;
          goto LABEL_152;
        }
        v72 = &v71[v141];
        while (1)
        {
          v73 = siri::dialogengine::ParseNodeMsg(*v71, v26);
          if (!v73)
            break;
          v74 = v129;
          v75 = *(_QWORD *)(v129 + 296);
          if (!v75)
          {
            v75 = operator new();
            *(_OWORD *)(v75 + 40) = 0u;
            *(_OWORD *)(v75 + 24) = 0u;
            *(_OWORD *)(v75 + 8) = 0u;
            *(_QWORD *)(v75 + 88) = 0;
            *(_QWORD *)(v75 + 80) = 0;
            *(_QWORD *)(v75 + 72) = v75 + 80;
            *(_OWORD *)(v75 + 96) = 0u;
            *(_OWORD *)(v75 + 112) = 0u;
            *(_OWORD *)(v75 + 128) = 0u;
            *(_OWORD *)(v75 + 144) = 0u;
            *(_OWORD *)(v75 + 160) = 0u;
            *(_OWORD *)(v75 + 176) = 0u;
            *(_DWORD *)(v75 + 192) = 1065353216;
            *(_OWORD *)(v75 + 200) = 0u;
            *(_OWORD *)(v75 + 216) = 0u;
            *(_OWORD *)(v75 + 232) = 0u;
            *(_QWORD *)(v75 + 248) = 0;
            *(_QWORD *)v75 = &off_1E793A598;
            *(_QWORD *)(v75 + 56) = 0;
            *(_QWORD *)(v75 + 64) = &unk_1E793A5F0;
            std::shared_ptr<siri::dialogengine::Group>::shared_ptr[abi:ne180100]<siri::dialogengine::Group,void>(&v107, v75);
            std::shared_ptr<siri::dialogengine::PatternSchemaUsage>::operator=[abi:ne180100]((_QWORD *)(v74 + 296), v107, (uint64_t)v108);
            v79 = v108;
            if (v108)
            {
              v80 = (unint64_t *)&v108->__shared_owners_;
              do
                v81 = __ldaxr(v80);
              while (__stlxr(v81 - 1, v80));
              if (!v81)
              {
                ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
                std::__shared_weak_count::__release_weak(v79);
              }
            }
          }
          v119.__r_.__value_.__r.__words[0] = v73;
          v76 = (std::__shared_weak_count *)operator new();
          v76->__shared_owners_ = 0;
          v77 = (unint64_t *)&v76->__shared_owners_;
          v76->__vftable = (std::__shared_weak_count_vtbl *)&off_1E792DBF0;
          v76->__shared_weak_owners_ = 0;
          v76[1].__vftable = (std::__shared_weak_count_vtbl *)v73;
          v119.__r_.__value_.__l.__size_ = (std::string::size_type)v76;
          siri::dialogengine::Group::AddNode((int64x2_t *)v75, &v119);
          do
            v78 = __ldaxr(v77);
          while (__stlxr(v78 - 1, v77));
          if (!v78)
          {
            ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
            std::__shared_weak_count::__release_weak(v76);
          }
          if (++v71 == v72)
            goto LABEL_157;
        }
      }
    }
    v8 = v102;
    goto LABEL_152;
  }
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  if ((v7 & 0x80) == 0)
    return;
LABEL_26:
  operator delete(v151[0]);
}

void sub_1BF923F70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t (*a11)())
{
  uint64_t v11;

  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x290]);
  siri::dialogengine::CatBinary::cat::~cat((siri::dialogengine::CatBinary::cat *)&STACK[0x2B8]);
  google::protobuf::SetLogHandler(a11);
  if (*(char *)(v11 - 89) < 0)
    operator delete(*(void **)(v11 - 112));
  _Unwind_Resume(a1);
}

void siri::dialogengine::ScopedLogHandler::logHandler(int a1, const char *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;

  if (a1 == 1)
  {
    if (*((char *)a4 + 23) >= 0)
      v5 = a4;
    else
      v5 = (uint64_t *)*a4;
    siri::dialogengine::Log::Warn((siri::dialogengine::Log *)"%s at %s:%d", a2, v5, a2, a3);
  }
  else if (a1)
  {
    if (*((char *)a4 + 23) >= 0)
      v6 = a4;
    else
      v6 = (uint64_t *)*a4;
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"%s at %s:%d", a2, v6, a2, a3);
  }
  else
  {
    if (*((char *)a4 + 23) >= 0)
      v4 = a4;
    else
      v4 = (uint64_t *)*a4;
    siri::dialogengine::Log::Info((siri::dialogengine::Log *)"%s at %s:%d", a2, v4, a2, a3);
  }
}

uint64_t siri::dialogengine::ParseConditionEntry(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  __int128 v20;

  switch(*(_DWORD *)(a2 + 80))
  {
    case 0:
      v4 = operator new();
      *(_QWORD *)(v4 + 24) = 0;
      *(_QWORD *)(v4 + 16) = 0;
      *(_QWORD *)v4 = &off_1E792B438;
      *(_QWORD *)(v4 + 8) = v4 + 16;
      *(_OWORD *)(v4 + 40) = 0u;
      *(_OWORD *)(v4 + 56) = 0u;
      *(_OWORD *)(v4 + 72) = 0u;
      *(_DWORD *)(v4 + 32) = 0;
      goto LABEL_16;
    case 1:
      v6 = operator new();
      v4 = v6;
      *(_QWORD *)(v6 + 24) = 0;
      *(_QWORD *)(v6 + 16) = 0;
      *(_QWORD *)v6 = &off_1E792B438;
      *(_QWORD *)(v6 + 8) = v6 + 16;
      *(_OWORD *)(v6 + 40) = 0u;
      *(_OWORD *)(v6 + 56) = 0u;
      *(_OWORD *)(v6 + 72) = 0u;
      v7 = 1;
      goto LABEL_10;
    case 2:
      v6 = operator new();
      v4 = v6;
      *(_QWORD *)(v6 + 24) = 0;
      *(_QWORD *)(v6 + 16) = 0;
      *(_QWORD *)v6 = &off_1E792B438;
      *(_QWORD *)(v6 + 8) = v6 + 16;
      *(_OWORD *)(v6 + 40) = 0u;
      *(_OWORD *)(v6 + 56) = 0u;
      *(_OWORD *)(v6 + 72) = 0u;
      v7 = 2;
LABEL_10:
      *(_DWORD *)(v6 + 32) = v7;
      goto LABEL_16;
    case 3:
      v4 = operator new();
      *(_QWORD *)(v4 + 24) = 0;
      *(_QWORD *)(v4 + 16) = 0;
      *(_OWORD *)(v4 + 40) = 0u;
      *(_OWORD *)(v4 + 56) = 0u;
      *(_OWORD *)(v4 + 72) = 0u;
      *(_OWORD *)(v4 + 96) = 0u;
      *(_OWORD *)(v4 + 112) = 0u;
      *(_OWORD *)(v4 + 128) = 0u;
      *(_QWORD *)(v4 + 144) = 0;
      *(_QWORD *)v4 = off_1E792BCD0;
      *(_QWORD *)(v4 + 8) = v4 + 16;
      *(_QWORD *)(v4 + 88) = &unk_1E792BD10;
      *(_OWORD *)(v4 + 152) = 0u;
      *(_OWORD *)(v4 + 168) = 0u;
      *(_OWORD *)(v4 + 184) = 0u;
      *(_OWORD *)(v4 + 200) = 0u;
      *(_QWORD *)(v4 + 216) = 0;
      *(_DWORD *)(v4 + 32) = 3;
      siri::dialogengine::ConditionExpression::SetName(v4, *(const std::string **)(a2 + 48));
      v8 = *(_DWORD *)(a2 + 16);
      if ((v8 & 2) != 0)
      {
        siri::dialogengine::ConditionExpression::SetOperator(v4, *(_QWORD *)(a2 + 56));
        v8 = *(_DWORD *)(a2 + 16);
      }
      if ((v8 & 4) != 0)
        siri::dialogengine::ConditionExpression::SetValue(v4, *(const std::string **)(a2 + 64));
      goto LABEL_16;
    case 4:
      v4 = operator new();
      *(_QWORD *)(v4 + 24) = 0;
      *(_QWORD *)(v4 + 16) = 0;
      *(_OWORD *)(v4 + 40) = 0u;
      *(_OWORD *)(v4 + 56) = 0u;
      *(_OWORD *)(v4 + 72) = 0u;
      *(_OWORD *)(v4 + 96) = 0u;
      *(_OWORD *)(v4 + 112) = 0u;
      *(_OWORD *)(v4 + 128) = 0u;
      *(_QWORD *)(v4 + 144) = 0;
      *(_QWORD *)(v4 + 152) = 0;
      *(_QWORD *)v4 = off_1E792ECF0;
      *(_QWORD *)(v4 + 8) = v4 + 16;
      *(_QWORD *)(v4 + 88) = &unk_1E792ED30;
      *(_QWORD *)(v4 + 160) = 0;
      *(_QWORD *)(v4 + 168) = 0;
      *(_DWORD *)(v4 + 32) = 4;
      siri::dialogengine::ConditionSubCondition::SetName(v4, *(const std::string **)(a2 + 48));
LABEL_16:
      v9 = *(_QWORD *)(a2 + 40);
      if (v9)
        v10 = (_QWORD *)(v9 + 8);
      else
        v10 = 0;
      v11 = *(int *)(a2 + 32);
      if (!(_DWORD)v11)
        goto LABEL_28;
      v12 = &v10[v11];
      break;
    default:
      if (*((char *)a1 + 23) >= 0)
        v5 = a1;
      else
        v5 = (uint64_t *)*a1;
      siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Invalid or missing condition entry type: '%d' on '%s", (const char *)a2, *(unsigned int *)(a2 + 80), v5);
      return 0;
  }
  do
  {
    v13 = siri::dialogengine::ParseConditionEntry(a1, *v10);
    if (!v13)
      return 0;
    v14 = v13;
    *(_QWORD *)&v20 = v13;
    v15 = (_QWORD *)operator new();
    *v15 = &off_1E792DA88;
    v15[1] = 0;
    v15[2] = 0;
    v15[3] = v14;
    *((_QWORD *)&v20 + 1) = v15;
    std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::emplace_back<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry> const&>((char **)(v4 + 64), &v20);
    v16 = (std::__shared_weak_count *)*((_QWORD *)&v20 + 1);
    if (*((_QWORD *)&v20 + 1))
    {
      v17 = (unint64_t *)(*((_QWORD *)&v20 + 1) + 8);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    ++v10;
  }
  while (v10 != v12);
LABEL_28:
  if ((*(_BYTE *)(a2 + 16) & 8) != 0)
    std::string::operator=((std::string *)(v4 + 40), *(const std::string **)(a2 + 72));
  return v4;
}

void sub_1BF924564(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::ParseNodeMsg(siri::dialogengine *this, const siri::dialogengine::CatBinary::node *a2)
{
  uint64_t v3;
  uint64_t v4;
  void (**v5)(siri::dialogengine::GroupAll *__hidden);
  uint64_t v6;
  const char *v7;
  std::string *v8;
  int v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 *v15;
  __int128 v16;
  __int128 *v17;
  __int128 v18;
  uint64_t *v19;
  int v20;
  char *v21;
  const siri::dialogengine::CatBinary::node *v22;
  uint64_t v23;
  siri::dialogengine **v24;
  uint64_t v25;
  siri::dialogengine **v26;
  uint64_t v27;
  std::__shared_weak_count_vtbl *v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  std::string __str;
  std::string v34;
  void *v35;
  char v36;
  void *v37;
  char v38;
  void *v39;
  char v40;
  void *v41;
  char v42;
  void *v43;
  char v44;
  void *__p;
  char v46;
  std::string *v47;

  switch(*((_DWORD *)this + 42))
  {
    case 0:
      v3 = operator new();
      v4 = v3;
      *(_OWORD *)(v3 + 8) = 0u;
      *(_OWORD *)(v3 + 24) = 0u;
      *(_OWORD *)(v3 + 40) = 0u;
      *(_QWORD *)(v3 + 88) = 0;
      *(_QWORD *)(v3 + 80) = 0;
      *(_QWORD *)(v3 + 72) = v3 + 80;
      *(_OWORD *)(v3 + 96) = 0u;
      *(_OWORD *)(v3 + 112) = 0u;
      *(_OWORD *)(v3 + 128) = 0u;
      *(_OWORD *)(v3 + 144) = 0u;
      *(_OWORD *)(v3 + 160) = 0u;
      *(_OWORD *)(v3 + 176) = 0u;
      *(_DWORD *)(v3 + 192) = 1065353216;
      *(_OWORD *)(v3 + 200) = 0u;
      *(_OWORD *)(v3 + 216) = 0u;
      *(_OWORD *)(v3 + 232) = 0u;
      v5 = &off_1E793A598;
      goto LABEL_25;
    case 1:
      v3 = operator new();
      v4 = v3;
      *(_OWORD *)(v3 + 8) = 0u;
      *(_OWORD *)(v3 + 24) = 0u;
      *(_OWORD *)(v3 + 40) = 0u;
      *(_QWORD *)(v3 + 88) = 0;
      *(_QWORD *)(v3 + 80) = 0;
      *(_QWORD *)(v3 + 72) = v3 + 80;
      *(_OWORD *)(v3 + 96) = 0u;
      *(_OWORD *)(v3 + 112) = 0u;
      *(_OWORD *)(v3 + 128) = 0u;
      *(_OWORD *)(v3 + 144) = 0u;
      *(_OWORD *)(v3 + 160) = 0u;
      *(_OWORD *)(v3 + 176) = 0u;
      *(_DWORD *)(v3 + 192) = 1065353216;
      *(_OWORD *)(v3 + 200) = 0u;
      *(_OWORD *)(v3 + 216) = 0u;
      *(_OWORD *)(v3 + 232) = 0u;
      v5 = &off_1E7936638;
      goto LABEL_25;
    case 2:
      v3 = operator new();
      v4 = v3;
      *(_OWORD *)(v3 + 8) = 0u;
      *(_OWORD *)(v3 + 24) = 0u;
      *(_OWORD *)(v3 + 40) = 0u;
      *(_QWORD *)(v3 + 88) = 0;
      *(_QWORD *)(v3 + 80) = 0;
      *(_QWORD *)(v3 + 72) = v3 + 80;
      *(_OWORD *)(v3 + 96) = 0u;
      *(_OWORD *)(v3 + 112) = 0u;
      *(_OWORD *)(v3 + 128) = 0u;
      *(_OWORD *)(v3 + 144) = 0u;
      *(_OWORD *)(v3 + 160) = 0u;
      *(_OWORD *)(v3 + 176) = 0u;
      *(_DWORD *)(v3 + 192) = 1065353216;
      *(_OWORD *)(v3 + 200) = 0u;
      *(_OWORD *)(v3 + 216) = 0u;
      *(_OWORD *)(v3 + 232) = 0u;
      v5 = &off_1E792B838;
LABEL_25:
      *(_QWORD *)v3 = v5;
      *(_QWORD *)(v3 + 56) = 0;
      *(_QWORD *)(v3 + 64) = v5 + 11;
      v6 = v3;
      *(_QWORD *)(v3 + 248) = 0;
      goto LABEL_90;
    case 3:
      v6 = operator new();
      *(_OWORD *)(v6 + 192) = 0u;
      *(_OWORD *)(v6 + 208) = 0u;
      *(_OWORD *)(v6 + 224) = 0u;
      *(_OWORD *)(v6 + 240) = 0u;
      *(_OWORD *)(v6 + 256) = 0u;
      *(_OWORD *)(v6 + 272) = 0u;
      *(_OWORD *)(v6 + 288) = 0u;
      *(_OWORD *)(v6 + 304) = 0u;
      *(_OWORD *)(v6 + 320) = 0u;
      *(_OWORD *)(v6 + 336) = 0u;
      *(_OWORD *)(v6 + 352) = 0u;
      *(_OWORD *)(v6 + 368) = 0u;
      *(_OWORD *)(v6 + 384) = 0u;
      *(_OWORD *)(v6 + 400) = 0u;
      *(_OWORD *)(v6 + 416) = 0u;
      *(_OWORD *)(v6 + 432) = 0u;
      *(_OWORD *)(v6 + 448) = 0u;
      *(_OWORD *)(v6 + 464) = 0u;
      *(_OWORD *)(v6 + 480) = 0u;
      *(_OWORD *)(v6 + 496) = 0u;
      *(_OWORD *)(v6 + 512) = 0u;
      *(_OWORD *)(v6 + 528) = 0u;
      *(_OWORD *)(v6 + 544) = 0u;
      *(_OWORD *)(v6 + 40) = 0u;
      *(_OWORD *)(v6 + 24) = 0u;
      *(_OWORD *)(v6 + 8) = 0u;
      *(_QWORD *)(v6 + 88) = 0;
      *(_QWORD *)(v6 + 80) = 0;
      *(_QWORD *)(v6 + 72) = v6 + 80;
      *(_OWORD *)(v6 + 96) = 0u;
      *(_OWORD *)(v6 + 112) = 0u;
      *(_OWORD *)(v6 + 128) = 0u;
      *(_OWORD *)(v6 + 144) = 0u;
      *(_OWORD *)(v6 + 160) = 0u;
      *(_OWORD *)(v6 + 176) = 0u;
      *(_DWORD *)(v6 + 192) = 1065353216;
      *(_QWORD *)v6 = &off_1E7934AE0;
      *(_QWORD *)(v6 + 56) = 0;
      *(_QWORD *)(v6 + 64) = &unk_1E7934B38;
      *(_OWORD *)(v6 + 552) = 0u;
      *(_OWORD *)(v6 + 568) = 0u;
      *(_OWORD *)(v6 + 584) = 0u;
      *(_DWORD *)(v6 + 544) = 0;
      *(_OWORD *)(v6 + 512) = 0u;
      *(_OWORD *)(v6 + 528) = 0u;
      *(_OWORD *)(v6 + 480) = 0u;
      *(_OWORD *)(v6 + 496) = 0u;
      *(_OWORD *)(v6 + 448) = 0u;
      *(_OWORD *)(v6 + 464) = 0u;
      *(_OWORD *)(v6 + 416) = 0u;
      *(_OWORD *)(v6 + 432) = 0u;
      *(_OWORD *)(v6 + 384) = 0u;
      *(_OWORD *)(v6 + 400) = 0u;
      *(_OWORD *)(v6 + 352) = 0u;
      *(_OWORD *)(v6 + 368) = 0u;
      *(_OWORD *)(v6 + 320) = 0u;
      *(_OWORD *)(v6 + 336) = 0u;
      *(_OWORD *)(v6 + 288) = 0u;
      *(_OWORD *)(v6 + 304) = 0u;
      *(_OWORD *)(v6 + 256) = 0u;
      *(_OWORD *)(v6 + 272) = 0u;
      *(_OWORD *)(v6 + 224) = 0u;
      *(_OWORD *)(v6 + 240) = 0u;
      *(_OWORD *)(v6 + 208) = 0u;
      v9 = *((_DWORD *)this + 4);
      if ((v9 & 0x10) != 0)
      {
        siri::dialogengine::SpeakableString::SpeakableString((uint64_t)&v34, *((_QWORD *)this + 13));
        siri::dialogengine::Dialog::SetFull((siri::dialogengine::Dialog *)v6, &v34);
        if (v46 < 0)
          operator delete(__p);
        if (v44 < 0)
          operator delete(v43);
        if (v42 < 0)
          operator delete(v41);
        if (v40 < 0)
          operator delete(v39);
        if (v38 < 0)
          operator delete(v37);
        if (v36 < 0)
          operator delete(v35);
        if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v34.__r_.__value_.__l.__data_);
        v9 = *((_DWORD *)this + 4);
      }
      if ((v9 & 0x20) != 0)
      {
        siri::dialogengine::SpeakableString::SpeakableString((uint64_t)&v34, *((_QWORD *)this + 14));
        siri::dialogengine::Dialog::SetSupporting((siri::dialogengine::Dialog *)v6, &v34);
        if (v46 < 0)
          operator delete(__p);
        if (v44 < 0)
          operator delete(v43);
        if (v42 < 0)
          operator delete(v41);
        if (v40 < 0)
          operator delete(v39);
        if (v38 < 0)
          operator delete(v37);
        if (v36 < 0)
          operator delete(v35);
        if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v34.__r_.__value_.__l.__data_);
        v9 = *((_DWORD *)this + 4);
      }
      if ((v9 & 0x2000) != 0)
      {
        *(_WORD *)(v6 + 546) = *((unsigned __int8 *)this + 172) | 0x100;
        if ((v9 & 0x4000) == 0)
        {
LABEL_60:
          if ((v9 & 0x400) == 0)
            goto LABEL_61;
          goto LABEL_87;
        }
      }
      else if ((v9 & 0x4000) == 0)
      {
        goto LABEL_60;
      }
      *(_WORD *)(v6 + 544) = *((unsigned __int8 *)this + 173) | 0x100;
      if ((v9 & 0x400) == 0)
      {
LABEL_61:
        if ((v9 & 0x800) == 0)
          goto LABEL_89;
        goto LABEL_88;
      }
LABEL_87:
      std::string::operator=((std::string *)(v6 + 552), *((const std::string **)this + 19));
      if ((*((_DWORD *)this + 4) & 0x800) == 0)
        goto LABEL_89;
LABEL_88:
      std::string::operator=((std::string *)(v6 + 576), *((const std::string **)this + 20));
LABEL_89:
      v4 = 0;
LABEL_90:
      v20 = *((_DWORD *)this + 4);
      if ((v20 & 1) != 0)
      {
        std::string::operator=((std::string *)(v6 + 96), *((const std::string **)this + 9));
        v20 = *((_DWORD *)this + 4);
        if ((v20 & 2) == 0)
        {
LABEL_92:
          if ((v20 & 0x100) == 0)
            goto LABEL_93;
          goto LABEL_99;
        }
      }
      else if ((v20 & 2) == 0)
      {
        goto LABEL_92;
      }
      std::string::operator=((std::string *)(v6 + 120), *((const std::string **)this + 10));
      v20 = *((_DWORD *)this + 4);
      if ((v20 & 0x100) == 0)
      {
LABEL_93:
        if ((v20 & 4) == 0)
          goto LABEL_94;
        goto LABEL_100;
      }
LABEL_99:
      std::string::operator=((std::string *)(v6 + 144), *((const std::string **)this + 17));
      v20 = *((_DWORD *)this + 4);
      if ((v20 & 4) == 0)
      {
LABEL_94:
        if ((v20 & 0x8000) == 0)
          goto LABEL_95;
        goto LABEL_101;
      }
LABEL_100:
      std::string::operator=((std::string *)(v6 + 168), *((const std::string **)this + 11));
      v20 = *((_DWORD *)this + 4);
      if ((v20 & 0x8000) == 0)
      {
LABEL_95:
        if (!v4)
          return v6;
        goto LABEL_102;
      }
LABEL_101:
      *(float *)(v6 + 192) = fmaxf(*((float *)this + 44), 0.0);
      if (!v4)
        return v6;
LABEL_102:
      if ((v20 & 8) != 0)
        std::string::operator=((std::string *)(v4 + 232), *((const std::string **)this + 12));
      if (v21 && (*((_BYTE *)this + 16) & 0x80) != 0)
        std::string::operator=((std::string *)(v21 + 256), *((const std::string **)this + 16));
      v23 = *((_QWORD *)this + 5);
      if (v23)
        v24 = (siri::dialogengine **)(v23 + 8);
      else
        v24 = 0;
      v25 = *((int *)this + 8);
      if ((_DWORD)v25)
      {
        v26 = &v24[v25];
        do
        {
          v27 = siri::dialogengine::ParseNodeMsg(*v24, v22);
          if (v27)
          {
            v28 = (std::__shared_weak_count_vtbl *)v27;
            v34.__r_.__value_.__r.__words[0] = v27;
            v29 = (std::__shared_weak_count *)operator new();
            v29->__shared_owners_ = 0;
            p_shared_owners = (unint64_t *)&v29->__shared_owners_;
            v29->__vftable = (std::__shared_weak_count_vtbl *)&off_1E792DBF0;
            v29->__shared_weak_owners_ = 0;
            v29[1].__vftable = v28;
            v34.__r_.__value_.__l.__size_ = (std::string::size_type)v29;
            siri::dialogengine::Group::AddNode((int64x2_t *)v4, &v34);
            do
              v31 = __ldaxr(p_shared_owners);
            while (__stlxr(v31 - 1, p_shared_owners));
            if (!v31)
            {
              ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
              std::__shared_weak_count::__release_weak(v29);
            }
          }
          ++v24;
        }
        while (v24 != v26);
      }
      return v6;
    case 4:
      v6 = operator new();
      *(_QWORD *)(v6 + 192) = 0;
      *(_QWORD *)(v6 + 200) = 0;
      *(_OWORD *)(v6 + 8) = 0u;
      *(_OWORD *)(v6 + 24) = 0u;
      *(_OWORD *)(v6 + 40) = 0u;
      *(_QWORD *)(v6 + 88) = 0;
      *(_QWORD *)(v6 + 80) = 0;
      *(_QWORD *)(v6 + 72) = v6 + 80;
      *(_OWORD *)(v6 + 96) = 0u;
      *(_OWORD *)(v6 + 112) = 0u;
      *(_OWORD *)(v6 + 128) = 0u;
      *(_OWORD *)(v6 + 144) = 0u;
      *(_OWORD *)(v6 + 160) = 0u;
      *(_OWORD *)(v6 + 176) = 0u;
      *(_DWORD *)(v6 + 192) = 1065353216;
      *(_QWORD *)v6 = off_1E7933D08;
      *(_QWORD *)(v6 + 56) = 0;
      *(_QWORD *)(v6 + 64) = &unk_1E7933D60;
      *(_QWORD *)(v6 + 368) = 0;
      *(_OWORD *)(v6 + 336) = 0u;
      *(_OWORD *)(v6 + 352) = 0u;
      *(_OWORD *)(v6 + 304) = 0u;
      *(_OWORD *)(v6 + 320) = 0u;
      *(_OWORD *)(v6 + 272) = 0u;
      *(_OWORD *)(v6 + 288) = 0u;
      *(_OWORD *)(v6 + 240) = 0u;
      *(_OWORD *)(v6 + 256) = 0u;
      *(_OWORD *)(v6 + 208) = 0u;
      *(_OWORD *)(v6 + 224) = 0u;
      siri::dialogengine::SpeakableString::SpeakableString((uint64_t)&v34, *((_QWORD *)this + 15));
      siri::dialogengine::Text::SetValue((siri::dialogengine::Text *)v6, &v34);
      if (v46 < 0)
        operator delete(__p);
      if (v44 < 0)
        operator delete(v43);
      if (v42 < 0)
        operator delete(v41);
      if (v40 < 0)
        operator delete(v39);
      if (v38 < 0)
        operator delete(v37);
      if (v36 < 0)
        operator delete(v35);
      if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v34.__r_.__value_.__l.__data_);
      goto LABEL_89;
    case 5:
      v4 = operator new();
      *(_OWORD *)(v4 + 8) = 0u;
      *(_OWORD *)(v4 + 24) = 0u;
      *(_OWORD *)(v4 + 40) = 0u;
      *(_QWORD *)(v4 + 80) = 0;
      *(_QWORD *)(v4 + 88) = 0;
      *(_QWORD *)(v4 + 72) = v4 + 80;
      *(_OWORD *)(v4 + 96) = 0u;
      *(_OWORD *)(v4 + 112) = 0u;
      *(_OWORD *)(v4 + 128) = 0u;
      *(_OWORD *)(v4 + 144) = 0u;
      *(_OWORD *)(v4 + 160) = 0u;
      *(_OWORD *)(v4 + 176) = 0u;
      *(_DWORD *)(v4 + 192) = 1065353216;
      *(_OWORD *)(v4 + 200) = 0u;
      *(_OWORD *)(v4 + 216) = 0u;
      *(_OWORD *)(v4 + 232) = 0u;
      *(_QWORD *)v4 = off_1E7939488;
      *(_QWORD *)(v4 + 56) = 0;
      *(_QWORD *)(v4 + 64) = &unk_1E79394E0;
      *(_QWORD *)(v4 + 248) = 0;
      *(_QWORD *)(v4 + 256) = 0;
      v6 = v4;
      *(_QWORD *)(v4 + 264) = 0;
      *(_QWORD *)(v4 + 272) = 0;
      goto LABEL_90;
    case 6:
      v6 = operator new();
      *(_QWORD *)(v6 + 192) = 0;
      *(_QWORD *)(v6 + 200) = 0;
      *(_OWORD *)(v6 + 8) = 0u;
      *(_OWORD *)(v6 + 24) = 0u;
      *(_OWORD *)(v6 + 40) = 0u;
      *(_QWORD *)(v6 + 88) = 0;
      *(_QWORD *)(v6 + 80) = 0;
      *(_QWORD *)(v6 + 72) = v6 + 80;
      *(_OWORD *)(v6 + 96) = 0u;
      *(_OWORD *)(v6 + 112) = 0u;
      *(_OWORD *)(v6 + 128) = 0u;
      *(_OWORD *)(v6 + 144) = 0u;
      *(_OWORD *)(v6 + 160) = 0u;
      *(_OWORD *)(v6 + 176) = 0u;
      *(_DWORD *)(v6 + 192) = 1065353216;
      *(_QWORD *)v6 = &off_1E792BE70;
      *(_QWORD *)(v6 + 56) = 0;
      *(_QWORD *)(v6 + 64) = &unk_1E792BED8;
      *(_QWORD *)(v6 + 216) = 0;
      *(_QWORD *)(v6 + 208) = v6 + 216;
      *(_QWORD *)(v6 + 224) = 0;
      v10 = *((_QWORD *)this + 8);
      if (v10)
        v11 = (uint64_t *)(v10 + 8);
      else
        v11 = 0;
      v12 = *((int *)this + 14);
      if ((_DWORD)v12)
      {
        v13 = 8 * v12;
        do
        {
          v14 = *v11;
          if ((*(_BYTE *)(*v11 + 16) & 1) != 0)
          {
            v15 = *(__int128 **)(v14 + 24);
            if (*((char *)v15 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(&v34, *(const std::string::value_type **)v15, *((_QWORD *)v15 + 1));
            }
            else
            {
              v16 = *v15;
              v34.__r_.__value_.__r.__words[2] = *((_QWORD *)v15 + 2);
              *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v16;
            }
          }
          else
          {
            std::string::basic_string[abi:ne180100]<0>(&v34, "");
          }
          if ((*(_BYTE *)(v14 + 16) & 2) != 0)
          {
            v17 = *(__int128 **)(v14 + 32);
            if (*((char *)v17 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)v17, *((_QWORD *)v17 + 1));
            }
            else
            {
              v18 = *v17;
              __str.__r_.__value_.__r.__words[2] = *((_QWORD *)v17 + 2);
              *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v18;
            }
          }
          else
          {
            std::string::basic_string[abi:ne180100]<0>(&__str, "");
          }
          v47 = &v34;
          v19 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v6 + 208), (const void **)&v34.__r_.__value_.__l.__data_, (__int128 **)&v47);
          std::string::operator=((std::string *)(v19 + 7), &__str);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__str.__r_.__value_.__l.__data_);
          if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v34.__r_.__value_.__l.__data_);
          ++v11;
          v13 -= 8;
        }
        while (v13);
      }
      goto LABEL_89;
    default:
      std::string::basic_string[abi:ne180100]<0>(&v34, "siri.dialogengine.CatBinary.node");
      if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v8 = &v34;
      else
        v8 = (std::string *)v34.__r_.__value_.__r.__words[0];
      siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Unrecognized group node type '%s'", v7, v8);
      if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v34.__r_.__value_.__l.__data_);
      return 0;
  }
}

void sub_1BF924E60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  siri::dialogengine::SpeakableString::~SpeakableString(&__p);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<siri::dialogengine::Group>::shared_ptr[abi:ne180100]<siri::dialogengine::Group,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E792DB78;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_1BF924F2C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

siri::dialogengine::VisualResponse *_ZNSt3__115allocate_sharedB8ne180100IN4siri12dialogengine14VisualResponseENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(siri::dialogengine::VisualResponse **a1)
{
  _QWORD *v2;
  siri::dialogengine::VisualResponse *result;

  v2 = operator new(0x180uLL);
  v2[1] = 0;
  v2[2] = 0;
  *v2 = &off_1E7933DD8;
  result = siri::dialogengine::VisualResponse::VisualResponse((siri::dialogengine::VisualResponse *)(v2 + 3));
  *a1 = result;
  a1[1] = (siri::dialogengine::VisualResponse *)v2;
  return result;
}

void sub_1BF924F8C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<siri::dialogengine::VisualResponse>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E7933DD8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<siri::dialogengine::VisualResponse>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E7933DD8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B8D890);
}

uint64_t std::__shared_ptr_emplace<siri::dialogengine::VisualResponse>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_pointer<siri::dialogengine::Node *,std::shared_ptr<siri::dialogengine::Node>::__shared_ptr_default_delete<siri::dialogengine::Node,siri::dialogengine::Node>,std::allocator<siri::dialogengine::Node>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B8D890);
}

uint64_t std::__shared_ptr_pointer<siri::dialogengine::Node *,std::shared_ptr<siri::dialogengine::Node>::__shared_ptr_default_delete<siri::dialogengine::Node,siri::dialogengine::Node>,std::allocator<siri::dialogengine::Node>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<siri::dialogengine::Node *,std::shared_ptr<siri::dialogengine::Node>::__shared_ptr_default_delete<siri::dialogengine::Node,siri::dialogengine::Node>,std::allocator<siri::dialogengine::Node>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__shared_ptr_pointer<siri::dialogengine::Group *,std::shared_ptr<siri::dialogengine::Group>::__shared_ptr_default_delete<siri::dialogengine::Group,siri::dialogengine::Group>,std::allocator<siri::dialogengine::Group>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B8D890);
}

uint64_t std::__shared_ptr_pointer<siri::dialogengine::Group *,std::shared_ptr<siri::dialogengine::Group>::__shared_ptr_default_delete<siri::dialogengine::Group,siri::dialogengine::Group>,std::allocator<siri::dialogengine::Group>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<siri::dialogengine::Group *,std::shared_ptr<siri::dialogengine::Group>::__shared_ptr_default_delete<siri::dialogengine::Group,siri::dialogengine::Group>,std::allocator<siri::dialogengine::Group>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_1BF9251F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;

  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_1BF9252EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_1BF925444(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, char a18)
{
  void *v18;
  void *v19;

  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  if (a15 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void siri::dialogengine::GetOption(_QWORD *a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  size_t v12;
  unint64_t v13;
  void **v14;
  void **p_s1;
  _BOOL4 v16;
  uint64_t v17;
  __int128 v18;
  void *__s1;
  size_t __n;
  unsigned __int8 v21;
  void *__p[2];
  unsigned __int8 v23;

  siri::dialogengine::StringToLower(a2, (uint64_t)__p);
  v5 = a1[1] - *a1;
  if (!v5)
  {
LABEL_26:
    std::string::basic_string[abi:ne180100]<0>(a3, "");
    goto LABEL_27;
  }
  v6 = 0;
  v7 = v5 / 24;
  v8 = v7 - 1;
  if (v7 <= 1)
    v9 = 1;
  else
    v9 = v7;
  while (1)
  {
    siri::dialogengine::StringToLower(*a1 + 24 * v6, (uint64_t)&__s1);
    v10 = v21;
    v11 = v21;
    if ((v21 & 0x80u) == 0)
      v12 = v21;
    else
      v12 = __n;
    v13 = v23;
    if ((v23 & 0x80u) != 0)
      v13 = (unint64_t)__p[1];
    if (v12 == v13)
    {
      v14 = (v23 & 0x80u) == 0 ? __p : (void **)__p[0];
      if ((v21 & 0x80) != 0)
      {
        v16 = memcmp(__s1, v14, __n) == 0;
      }
      else
      {
        if (v21)
        {
          p_s1 = &__s1;
          while (*(unsigned __int8 *)p_s1 == *(unsigned __int8 *)v14)
          {
            p_s1 = (void **)((char *)p_s1 + 1);
            v14 = (void **)((char *)v14 + 1);
            if (!--v10)
              goto LABEL_19;
          }
          goto LABEL_23;
        }
LABEL_19:
        v16 = 1;
      }
      if (v6 < v8 && v16)
        break;
    }
LABEL_23:
    if ((v11 & 0x80) != 0)
      operator delete(__s1);
    if (++v6 == v9)
      goto LABEL_26;
  }
  v17 = *a1 + 24 * v6;
  if (*(char *)(v17 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)(v17 + 24), *(_QWORD *)(v17 + 32));
    if ((v21 & 0x80) != 0)
      goto LABEL_34;
  }
  else
  {
    v18 = *(_OWORD *)(v17 + 24);
    a3->__r_.__value_.__r.__words[2] = *(_QWORD *)(v17 + 40);
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v18;
    if ((v11 & 0x80) != 0)
LABEL_34:
      operator delete(__s1);
  }
LABEL_27:
  if ((char)v23 < 0)
    operator delete(__p[0]);
}

void sub_1BF92584C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::GetMultipleOptions(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::string::size_type size;
  unint64_t v12;
  void **v13;
  std::string *p_s1;
  int v15;
  uint64_t v16;
  int v17;
  _BOOL4 v18;
  BOOL v19;
  BOOL v20;
  __int128 *v21;
  unint64_t v22;
  uint64_t v23;
  void *__p[2];
  char v25;
  std::string __s1;
  void *v27[2];
  unsigned __int8 v28;

  siri::dialogengine::StringToLower(a2, (uint64_t)v27);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v5 = a1[1] - *a1;
  if (v5)
  {
    v6 = 0;
    v7 = 0;
    v8 = v5 / 24;
    if (v8 <= 1)
      v9 = 1;
    else
      v9 = v8;
    while (1)
    {
      siri::dialogengine::StringToLower(*a1 + 24 * v6, (uint64_t)&__s1);
      v10 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
      if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
      else
        size = __s1.__r_.__value_.__l.__size_;
      v12 = v28;
      if ((v28 & 0x80u) != 0)
        v12 = (unint64_t)v27[1];
      if (size == v12)
      {
        if ((v28 & 0x80u) == 0)
          v13 = v27;
        else
          v13 = (void **)v27[0];
        if ((*((_BYTE *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
        {
          v17 = memcmp(__s1.__r_.__value_.__l.__data_, v13, __s1.__r_.__value_.__l.__size_);
          v18 = v17 == 0;
          v16 = v18 | v7;
          v15 = 4 * v18;
          if (!v17 || ((v7 ^ 1) & 1) != 0)
            goto LABEL_33;
LABEL_24:
          std::string::basic_string[abi:ne180100]<0>(__p, "-");
          v19 = siri::dialogengine::StringStartsWith(&__s1, (unsigned __int8 *)__p);
          v20 = v19;
          if (v25 < 0)
          {
            operator delete(__p[0]);
            if (!v20)
              goto LABEL_28;
LABEL_26:
            v15 = 2;
          }
          else
          {
            if (v19)
              goto LABEL_26;
LABEL_28:
            v21 = (__int128 *)(*a1 + 24 * v6);
            v22 = a3[1];
            if (v22 >= a3[2])
            {
              v23 = std::vector<std::string>::__push_back_slow_path<std::string const&>(a3, v21);
            }
            else
            {
              std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)a3, v21);
              v23 = v22 + 24;
            }
            v15 = 0;
            a3[1] = v23;
          }
          v16 = v7;
          goto LABEL_33;
        }
        if (!*((_BYTE *)&__s1.__r_.__value_.__s + 23))
        {
LABEL_19:
          v15 = 4;
          v16 = 1;
          goto LABEL_33;
        }
        p_s1 = &__s1;
        while (p_s1->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v13)
        {
          p_s1 = (std::string *)((char *)p_s1 + 1);
          v13 = (void **)((char *)v13 + 1);
          if (!--v10)
            goto LABEL_19;
        }
      }
      if ((v7 & 1) != 0)
        goto LABEL_24;
      v16 = 0;
      v15 = 0;
LABEL_33:
      if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__s1.__r_.__value_.__l.__data_);
      if ((v15 | 4) == 4)
      {
        ++v6;
        v7 = v16;
        if (v6 != v9)
          continue;
      }
      break;
    }
  }
  if ((char)v28 < 0)
    operator delete(v27[0]);
}

void sub_1BF925A8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0)
    operator delete(__p);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::OptionExists(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  size_t v5;
  unint64_t v6;
  void **v7;
  uint64_t v8;
  int v9;
  int v10;
  void *v12;
  int v13;
  uint64_t v14;
  void *__p;
  size_t __n;
  unsigned __int8 v18;
  void *v19[2];
  unsigned __int8 v20;

  siri::dialogengine::StringToLower(a2, (uint64_t)v19);
  v3 = *a1;
  if (a1[1] == *a1)
  {
LABEL_26:
    v14 = 0;
    goto LABEL_28;
  }
  v4 = 0;
  while (1)
  {
    siri::dialogengine::StringToLower(v3 + 24 * v4, (uint64_t)&__p);
    if ((v18 & 0x80u) == 0)
      v5 = v18;
    else
      v5 = __n;
    v6 = v20;
    if ((v20 & 0x80u) != 0)
      v6 = (unint64_t)v19[1];
    if (v5 != v6)
    {
      if ((v18 & 0x80) != 0)
        operator delete(__p);
      goto LABEL_25;
    }
    v7 = (v20 & 0x80u) == 0 ? v19 : (void **)v19[0];
    if ((v18 & 0x80) == 0)
      break;
    v12 = __p;
    v13 = memcmp(__p, v7, __n);
    operator delete(v12);
    if (!v13)
      goto LABEL_27;
LABEL_25:
    ++v4;
    v3 = *a1;
    if (v4 >= 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3))
      goto LABEL_26;
  }
  if (v18)
  {
    v8 = 0;
    do
    {
      v9 = *((unsigned __int8 *)&__p + v8);
      v10 = *((unsigned __int8 *)v7 + v8);
    }
    while (v9 == v10 && v18 - 1 != v8++);
    if (v9 != v10)
      goto LABEL_25;
  }
LABEL_27:
  v14 = 1;
LABEL_28:
  if ((char)v20 < 0)
    operator delete(v19[0]);
  return v14;
}

void sub_1BF925C38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL siri::dialogengine::PopOption(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  size_t v5;
  unint64_t v6;
  void **v7;
  uint64_t v8;
  void *v9;
  int v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  void *v15[2];
  unsigned __int8 v16;
  void *__p;
  size_t __n;
  unsigned __int8 v19;

  if (!a1)
    return 0;
  siri::dialogengine::StringToLower(a2, (uint64_t)v15);
  v3 = *a1;
  v4 = a1[1];
  if (*a1 == v4)
    goto LABEL_23;
  do
  {
    siri::dialogengine::StringToLower(v3, (uint64_t)&__p);
    if ((v19 & 0x80u) == 0)
      v5 = v19;
    else
      v5 = __n;
    v6 = v16;
    if ((v16 & 0x80u) != 0)
      v6 = (unint64_t)v15[1];
    if (v5 != v6)
      goto LABEL_18;
    if ((v16 & 0x80u) == 0)
      v7 = v15;
    else
      v7 = (void **)v15[0];
    if ((v19 & 0x80) == 0)
    {
      if (!v19)
        goto LABEL_23;
      v8 = 0;
      while (*((unsigned __int8 *)&__p + v8) == *((unsigned __int8 *)v7 + v8))
      {
        if (v19 == ++v8)
          goto LABEL_23;
      }
LABEL_18:
      if ((v19 & 0x80) != 0)
        operator delete(__p);
      goto LABEL_21;
    }
    v9 = __p;
    v10 = memcmp(__p, v7, __n);
    operator delete(v9);
    if (!v10)
      goto LABEL_23;
LABEL_21:
    v3 += 24;
  }
  while (v3 != v4);
  v3 = v4;
LABEL_23:
  v11 = a1[1];
  v12 = v3 != v11;
  if (v3 != v11)
  {
    if (v3 + 24 != v11)
    {
      do
      {
        if (*(char *)(v3 + 23) < 0)
          operator delete(*(void **)v3);
        *(_OWORD *)v3 = *(_OWORD *)(v3 + 24);
        *(_QWORD *)(v3 + 16) = *(_QWORD *)(v3 + 40);
        *(_BYTE *)(v3 + 47) = 0;
        v13 = v3 + 48;
        *(_BYTE *)(v3 + 24) = 0;
        v3 += 24;
      }
      while (v13 != v11);
      v11 = a1[1];
    }
    while (v11 != v3)
    {
      if (*(char *)(v11 - 1) < 0)
        operator delete(*(void **)(v11 - 24));
      v11 -= 24;
    }
    a1[1] = v3;
  }
  if ((char)v16 < 0)
    operator delete(v15[0]);
  return v12;
}

void sub_1BF925DFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::PopStringOptions(std::vector<std::string> *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  std::vector<std::string>::pointer begin;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  size_t v10;
  unint64_t v11;
  int v12;
  void **v13;
  uint64_t v14;
  void **p_s1;
  int v16;
  int v17;
  int v18;
  int v19;
  BOOL v21;
  _BOOL4 v22;
  __int128 *v23;
  unint64_t v24;
  uint64_t v25;
  std::string *v26;
  std::string *v27;
  __int128 v28;
  __int128 *v29;
  void *__p[2];
  unsigned __int8 v31;
  std::string *v32;
  std::string *v33;
  unint64_t v34;
  void *__s1;
  size_t __n;
  unsigned __int8 v37;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if (a1)
  {
    siri::dialogengine::StringToLower(a2, (uint64_t)&__s1);
    v32 = 0;
    v33 = 0;
    v34 = 0;
    begin = a1->__begin_;
    v6 = (char *)a1->__end_ - (char *)a1->__begin_;
    if (v6)
    {
      v7 = 0;
      v8 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 3);
      while (1)
      {
        v9 = v7 + 1;
        if (v7 + 1 >= v8)
        {
LABEL_31:
          v26 = &begin[v7];
          v27 = v33;
          if ((unint64_t)v33 >= v34)
          {
            v29 = (__int128 *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v32, (__int128 *)v26);
          }
          else
          {
            if (SHIBYTE(v26->__r_.__value_.__r.__words[2]) < 0)
            {
              std::string::__init_copy_ctor_external(v33, v26->__r_.__value_.__l.__data_, v26->__r_.__value_.__l.__size_);
            }
            else
            {
              v28 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
              v33->__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v27->__r_.__value_.__l.__data_ = v28;
            }
            v29 = (__int128 *)&v27[1];
          }
          v33 = (std::string *)v29;
          v7 = v9;
          goto LABEL_40;
        }
        siri::dialogengine::StringToLower((uint64_t)&begin[v7], (uint64_t)__p);
        if ((v37 & 0x80u) == 0)
          v10 = v37;
        else
          v10 = __n;
        v11 = v31;
        v12 = (char)v31;
        if ((v31 & 0x80u) != 0)
          v11 = (unint64_t)__p[1];
        if (v10 != v11)
          break;
        if ((v31 & 0x80u) == 0)
          v13 = __p;
        else
          v13 = (void **)__p[0];
        if ((v37 & 0x80) != 0)
        {
          v22 = memcmp(__s1, v13, __n) == 0;
LABEL_26:
          if ((v12 & 0x80000000) == 0)
            goto LABEL_28;
LABEL_27:
          operator delete(__p[0]);
          goto LABEL_28;
        }
        if (v37)
        {
          v14 = v37 - 1;
          p_s1 = &__s1;
          do
          {
            v17 = *(unsigned __int8 *)p_s1;
            p_s1 = (void **)((char *)p_s1 + 1);
            v16 = v17;
            v19 = *(unsigned __int8 *)v13;
            v13 = (void **)((char *)v13 + 1);
            v18 = v19;
            v21 = v14-- != 0;
            v22 = v16 == v18;
          }
          while (v16 == v18 && v21);
          goto LABEL_26;
        }
        v22 = 1;
        if ((char)v31 < 0)
          goto LABEL_27;
LABEL_28:
        begin = a1->__begin_;
        if (!v22)
          goto LABEL_31;
        v23 = (__int128 *)&begin[v9];
        v24 = a3[1];
        if (v24 >= a3[2])
        {
          v25 = std::vector<std::string>::__push_back_slow_path<std::string const&>(a3, v23);
        }
        else
        {
          std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)a3, v23);
          v25 = v24 + 24;
        }
        a3[1] = v25;
        v7 += 2;
LABEL_40:
        begin = a1->__begin_;
        v8 = 0xAAAAAAAAAAAAAAABLL * (((char *)a1->__end_ - (char *)a1->__begin_) >> 3);
        if (v7 >= v8)
          goto LABEL_44;
      }
      v22 = 0;
      if (((char)v31 & 0x80000000) == 0)
        goto LABEL_28;
      goto LABEL_27;
    }
LABEL_44:
    if (&v32 != (std::string **)a1)
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(a1, v32, (__int128 *)v33, 0xAAAAAAAAAAAAAAABLL * (((char *)v33 - (char *)v32) >> 3));
    __p[0] = &v32;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    if ((char)v37 < 0)
      operator delete(__s1);
  }
}

void sub_1BF926058(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char *a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  a10 = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  if (a21 < 0)
    operator delete(__p);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void siri::dialogengine::PopStringOption(std::vector<std::string> *a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  void **v7;

  siri::dialogengine::PopStringOptions(a1, a2, &v5);
  if (v6 == v5)
  {
    std::string::basic_string[abi:ne180100]<0>(a3, "");
  }
  else if (*(char *)(v6 - 1) < 0)
  {
    std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)(v6 - 24), *(_QWORD *)(v6 - 16));
  }
  else
  {
    v4 = *(_OWORD *)(v6 - 24);
    a3->__r_.__value_.__r.__words[2] = *(_QWORD *)(v6 - 8);
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v4;
  }
  v7 = (void **)&v5;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v7);
}

void sub_1BF926134(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void siri::dialogengine::PopStringSetOption(std::vector<std::string> *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void **p_data;
  std::string::size_type size;
  unint64_t v8;
  void **v9;
  uint64_t v10;
  int v11;
  int v12;
  void *v14;
  int v15;
  std::vector<std::string>::pointer end;
  const void **v17;
  const void **v18;
  char **v19;
  char *v20[2];
  _QWORD v21[3];
  std::string __s1;
  void *__p[2];
  unsigned __int8 v24;

  if (a1)
  {
    siri::dialogengine::StringToLower(a2, (uint64_t)__p);
    p_data = (void **)&a1->__end_->__r_.__value_.__l.__data_;
    if ((void **)a1->__begin_ != p_data)
    {
      while (1)
      {
        siri::dialogengine::StringToLower((uint64_t)(p_data - 3), (uint64_t)&__s1);
        if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
        else
          size = __s1.__r_.__value_.__l.__size_;
        v8 = v24;
        if ((v24 & 0x80u) != 0)
          v8 = (unint64_t)__p[1];
        if (size != v8)
          break;
        if ((v24 & 0x80u) == 0)
          v9 = __p;
        else
          v9 = (void **)__p[0];
        if ((*((_BYTE *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
        {
          v14 = (void *)__s1.__r_.__value_.__r.__words[0];
          v15 = memcmp(__s1.__r_.__value_.__l.__data_, v9, __s1.__r_.__value_.__l.__size_);
          operator delete(v14);
          if (v15)
            goto LABEL_30;
        }
        else if (*((_BYTE *)&__s1.__r_.__value_.__s + 23))
        {
          v10 = 0;
          do
          {
            v11 = __s1.__r_.__value_.__s.__data_[v10];
            v12 = *((unsigned __int8 *)v9 + v10);
          }
          while (v11 == v12 && HIBYTE(__s1.__r_.__value_.__r.__words[2]) - 1 != v10++);
          if (v11 != v12)
            goto LABEL_30;
        }
        end = a1->__end_;
        p_data = (void **)&end[-1].__r_.__value_.__l.__data_;
        if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0)
          operator delete(*p_data);
        a1->__end_ = (std::vector<std::string>::pointer)p_data;
        if ((void **)a1->__begin_ == p_data)
          goto LABEL_30;
      }
      if ((*((_BYTE *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
        operator delete(__s1.__r_.__value_.__l.__data_);
    }
LABEL_30:
    if ((siri::dialogengine::OptionExists((uint64_t *)a1, a2) & 1) != 0)
    {
      siri::dialogengine::PopStringOption(a1, a2, &__s1);
      siri::dialogengine::StringSplit((unsigned __int8 *)&__s1, ", ", v21);
      v17 = (const void **)v21[0];
      v18 = (const void **)v21[1];
      v20[0] = 0;
      v20[1] = 0;
      v19 = v20;
      while (v17 != v18)
      {
        std::__tree<std::string>::__emplace_hint_unique_key_args<std::string,std::string const&>((uint64_t *)&v19, (uint64_t)v20, v17, (uint64_t)v17);
        v17 += 3;
      }
      std::set<std::string>::set[abi:ne180100]((uint64_t *)a3, (const void ***)&v19);
      *(_BYTE *)(a3 + 24) = 1;
      std::__tree<std::string>::destroy((uint64_t)&v19, v20[0]);
      v19 = (char **)v21;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v19);
      if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__s1.__r_.__value_.__l.__data_);
    }
    else
    {
      *(_BYTE *)a3 = 0;
      *(_BYTE *)(a3 + 24) = 0;
    }
    if ((char)v24 < 0)
      operator delete(__p[0]);
  }
  else
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 24) = 0;
  }
}

void sub_1BF92635C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *a9, char *a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  std::__tree<std::string>::destroy((uint64_t)&a9, a10);
  a9 = &a12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (a20 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  _Unwind_Resume(a1);
}

void siri::dialogengine::GetExecutableName(uint64_t *a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v3;

  v3 = *a1;
  if (v3 == a1[1])
    std::string::basic_string[abi:ne180100]<0>(a2, "");
  else
    siri::dialogengine::BaseName(v3, a2);
}

uint64_t YAML::operator<<(uint64_t a1, const YAML::Node *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v7;
  std::__shared_weak_count *v8;
  _QWORD *v9;
  _QWORD v10[2];
  _OWORD v11[3];

  v10[0] = &off_1E792DCE0;
  v10[1] = a1;
  memset(v11, 0, sizeof(v11));
  YAML::NodeEvents::NodeEvents((YAML::NodeEvents *)&v7, a2);
  YAML::NodeEvents::Emit((YAML::NodeEvents *)&v7, (uint64_t)v10);
  std::__tree<std::__value_type<YAML::detail::node_ref const*,int>,std::__map_value_compare<YAML::detail::node_ref const*,std::__value_type<YAML::detail::node_ref const*,int>,std::less<YAML::detail::node_ref const*>,true>,std::allocator<std::__value_type<YAML::detail::node_ref const*,int>>>::destroy(v9);
  v3 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v10[0] = &off_1E792DCE0;
  std::deque<YAML::EmitFromEvents::State::value>::~deque[abi:ne180100]((uint64_t)v11);
  return a1;
}

{
  _BYTE v5[72];

  YAML::Emitter::Emitter((uint64_t)v5, a1);
  YAML::operator<<((uint64_t)v5, a2);
  YAML::Emitter::~Emitter((YAML::Emitter *)v5);
  return a1;
}

void sub_1BF926498(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _QWORD *a13)
{
  uint64_t v13;

  std::__tree<std::__value_type<YAML::detail::node_ref const*,int>,std::__map_value_compare<YAML::detail::node_ref const*,std::__value_type<YAML::detail::node_ref const*,int>,std::less<YAML::detail::node_ref const*>,true>,std::allocator<std::__value_type<YAML::detail::node_ref const*,int>>>::destroy(a13);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::deque<YAML::EmitFromEvents::State::value>::~deque[abi:ne180100](v13);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<YAML::detail::node_ref const*,int>,std::__map_value_compare<YAML::detail::node_ref const*,std::__value_type<YAML::detail::node_ref const*,int>,std::less<YAML::detail::node_ref const*>,true>,std::allocator<std::__value_type<YAML::detail::node_ref const*,int>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<YAML::detail::node_ref const*,int>,std::__map_value_compare<YAML::detail::node_ref const*,std::__value_type<YAML::detail::node_ref const*,int>,std::less<YAML::detail::node_ref const*>,true>,std::allocator<std::__value_type<YAML::detail::node_ref const*,int>>>::destroy(*a1);
    std::__tree<std::__value_type<YAML::detail::node_ref const*,int>,std::__map_value_compare<YAML::detail::node_ref const*,std::__value_type<YAML::detail::node_ref const*,int>,std::less<YAML::detail::node_ref const*>,true>,std::allocator<std::__value_type<YAML::detail::node_ref const*,int>>>::destroy(a1[1]);
    operator delete(a1);
  }
}

void sub_1BF92654C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  YAML::Emitter::~Emitter((YAML::Emitter *)va);
  _Unwind_Resume(a1);
}

void YAML::Dump(YAML *this@<X0>, _QWORD *a2@<X8>)
{
  char *v5;
  _BYTE v6[8];
  char *__s;
  uint64_t v8;
  uint64_t v9;

  YAML::Emitter::Emitter((YAML::Emitter *)v6);
  YAML::operator<<((uint64_t)v6, this);
  if (v8)
  {
    v5 = 0;
  }
  else
  {
    __s[v9] = 0;
    v5 = __s;
  }
  std::string::basic_string[abi:ne180100]<0>(a2, v5);
  YAML::Emitter::~Emitter((YAML::Emitter *)v6);
}

void sub_1BF9265CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  YAML::Emitter::~Emitter((YAML::Emitter *)va);
  _Unwind_Resume(a1);
}

std::string *siri::dialogengine::TestResult::TestResult(std::string *this, const siri::dialogengine::TestCase *a2)
{
  std::string *v3;
  uint64_t v4;

  v3 = siri::dialogengine::TestCase::TestCase(this, a2);
  LODWORD(v3[10].__r_.__value_.__r.__words[2]) = 0;
  v3[11].__r_.__value_.__l.__size_ = 0;
  v3[11].__r_.__value_.__r.__words[2] = 0;
  v3[11].__r_.__value_.__r.__words[0] = 0;
  v4 = operator new();
  *(_QWORD *)(v4 + 104) = 0;
  *(_OWORD *)v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_QWORD *)(v4 + 96) = v4 + 104;
  *(_QWORD *)(v4 + 112) = 0;
  *(_QWORD *)(v4 + 120) = 0;
  *(_QWORD *)(v4 + 128) = 0;
  *(_QWORD *)(v4 + 136) = 0;
  this[12].__r_.__value_.__r.__words[0] = v4;
  return this;
}

void sub_1BF92665C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  void **v10;
  void **v11;
  void **v12;

  v12 = v11;
  a10 = v12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a10);
  siri::dialogengine::TestCase::~TestCase(v10);
  _Unwind_Resume(a1);
}

std::string *siri::dialogengine::TestCase::TestCase(std::string *this, const siri::dialogengine::TestCase *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int16 v12;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v5 = *(_OWORD *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v5;
  }
  if (*((char *)a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(this + 2, *((const std::string::value_type **)a2 + 6), *((_QWORD *)a2 + 7));
  }
  else
  {
    v6 = *((_OWORD *)a2 + 3);
    this[2].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 8);
    *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = v6;
  }
  if (*((char *)a2 + 95) < 0)
  {
    std::string::__init_copy_ctor_external(this + 3, *((const std::string::value_type **)a2 + 9), *((_QWORD *)a2 + 10));
  }
  else
  {
    v7 = *(_OWORD *)((char *)a2 + 72);
    this[3].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 11);
    *(_OWORD *)&this[3].__r_.__value_.__l.__data_ = v7;
  }
  if (*((char *)a2 + 119) < 0)
  {
    std::string::__init_copy_ctor_external(this + 4, *((const std::string::value_type **)a2 + 12), *((_QWORD *)a2 + 13));
  }
  else
  {
    v8 = *((_OWORD *)a2 + 6);
    this[4].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 14);
    *(_OWORD *)&this[4].__r_.__value_.__l.__data_ = v8;
  }
  this[5].__r_.__value_.__s.__data_[0] = *((_BYTE *)a2 + 120);
  if (*((char *)a2 + 151) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 128), *((const std::string::value_type **)a2 + 16), *((_QWORD *)a2 + 17));
  }
  else
  {
    v9 = *((_OWORD *)a2 + 8);
    this[6].__r_.__value_.__r.__words[0] = *((_QWORD *)a2 + 18);
    *(_OWORD *)&this[5].__r_.__value_.__r.__words[1] = v9;
  }
  if (*((char *)a2 + 175) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 152), *((const std::string::value_type **)a2 + 19), *((_QWORD *)a2 + 20));
  }
  else
  {
    v10 = *(_OWORD *)((char *)a2 + 152);
    this[7].__r_.__value_.__r.__words[0] = *((_QWORD *)a2 + 21);
    *(_OWORD *)&this[6].__r_.__value_.__r.__words[1] = v10;
  }
  if (*((char *)a2 + 199) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 176), *((const std::string::value_type **)a2 + 22), *((_QWORD *)a2 + 23));
  }
  else
  {
    v11 = *((_OWORD *)a2 + 11);
    this[8].__r_.__value_.__r.__words[0] = *((_QWORD *)a2 + 24);
    *(_OWORD *)&this[7].__r_.__value_.__r.__words[1] = v11;
  }
  this[8].__r_.__value_.__l.__size_ = 0;
  this[8].__r_.__value_.__r.__words[2] = 0;
  this[9].__r_.__value_.__r.__words[0] = 0;
  std::vector<std::shared_ptr<siri::dialogengine::Condition>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::Condition>*,std::shared_ptr<siri::dialogengine::Condition>*>(&this[8].__r_.__value_.__l.__size_, *((_QWORD **)a2 + 25), *((_QWORD **)a2 + 26), (uint64_t)(*((_QWORD *)a2 + 26) - *((_QWORD *)a2 + 25)) >> 4);
  v12 = *((_WORD *)a2 + 112);
  this[9].__r_.__value_.__r.__words[2] = 0;
  LOWORD(this[9].__r_.__value_.__r.__words[1]) = v12;
  this[10].__r_.__value_.__r.__words[0] = 0;
  this[10].__r_.__value_.__l.__size_ = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)((char *)this + 232), *((__int128 **)a2 + 29), *((__int128 **)a2 + 30), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 30) - *((_QWORD *)a2 + 29)) >> 3));
  return this;
}

void sub_1BF92689C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  void **v11;
  void **v12;
  void **v13;
  void **v14;
  void **v15;
  void **v16;

  if (*(char *)(v10 + 175) < 0)
    operator delete(*v16);
  if (*(char *)(v10 + 151) < 0)
    operator delete(*v15);
  if (*(char *)(v10 + 119) < 0)
    operator delete(*v14);
  if (*(char *)(v10 + 95) < 0)
    operator delete(*v13);
  if (*(char *)(v10 + 71) < 0)
    operator delete(*v12);
  if (*(char *)(v10 + 47) < 0)
    operator delete(*v11);
  if (*(char *)(v10 + 23) < 0)
    operator delete(*(void **)v10);
  _Unwind_Resume(exception_object);
}

std::string *siri::dialogengine::TestResult::GetTestCase@<X0>(siri::dialogengine::TestResult *this@<X0>, std::string *a2@<X8>)
{
  return siri::dialogengine::TestCase::TestCase(a2, this);
}

uint64_t siri::dialogengine::TestResult::SetStatus(uint64_t result, int a2)
{
  *(_DWORD *)(result + 256) = a2;
  return result;
}

uint64_t siri::dialogengine::TestResult::GetStatus(siri::dialogengine::TestResult *this)
{
  return *((unsigned int *)this + 64);
}

_QWORD *siri::dialogengine::TestResult::GetStatusAsString@<X0>(siri::dialogengine::TestResult *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  char *v5;

  v4 = *((unsigned int *)this + 64);
  if (v4 > 3)
    v5 = "???";
  else
    v5 = off_1E792DD40[v4];
  return std::string::basic_string[abi:ne180100]<0>(a2, v5);
}

uint64_t siri::dialogengine::TestResult::AddNote(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;

  v2 = *(unsigned __int8 *)(a2 + 23);
  if ((v2 & 0x80u) != 0)
    v2 = *(_QWORD *)(a2 + 8);
  if (v2)
  {
    v3 = result;
    v4 = (uint64_t *)(result + 264);
    v5 = *(_QWORD *)(v3 + 272);
    if (v5 >= *(_QWORD *)(v3 + 280))
    {
      result = std::vector<std::string>::__push_back_slow_path<std::string const&>(v4, (__int128 *)a2);
    }
    else
    {
      std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v4, (__int128 *)a2);
      result = v5 + 24;
    }
    *(_QWORD *)(v3 + 272) = result;
  }
  return result;
}

std::string *siri::dialogengine::TestResult::GetNotes@<X0>(__int128 **this@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(a2, this[33], this[34], 0xAAAAAAAAAAAAAAABLL * (((char *)this[34] - (char *)this[33]) >> 3));
}

std::string **siri::dialogengine::TestResult::SetExecutionResult(std::string **this, const std::string **a2)
{
  return siri::dialogengine::CATExecutionResult::operator=(this + 36, a2);
}

siri::dialogengine::CATExecutionResult *siri::dialogengine::TestResult::GetExecutionResult@<X0>(siri::dialogengine::TestResult *this@<X0>, siri::dialogengine::CATExecutionResult *a2@<X8>)
{
  return siri::dialogengine::CATExecutionResult::CATExecutionResult(a2, (siri::dialogengine::TestResult *)((char *)this + 288));
}

_QWORD *siri::dialogengine::TestResults::TestResults(_QWORD *result, uint64_t a2)
{
  *result = a2;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  return result;
}

{
  *result = a2;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  return result;
}

uint64_t siri::dialogengine::TestResults::AddResult(siri::dialogengine::TestResults *this, const siri::dialogengine::TestResult *a2)
{
  char *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64x2_t v19;
  unint64_t v20;
  unint64_t v21;
  int64x2_t v22;
  unint64_t v23;
  char *v24;

  v4 = (char *)this + 24;
  v5 = *((_QWORD *)this + 3);
  v6 = *((_QWORD *)this + 2);
  if (v6 >= v5)
  {
    v9 = *((_QWORD *)this + 1);
    v10 = 0x14C1BACF914C1BADLL * ((uint64_t)(v6 - v9) >> 3);
    if ((unint64_t)(v10 + 1) > 0xDD67C8A60DD67CLL)
      std::vector<BOOL>::__throw_length_error[abi:ne180100]();
    v11 = 0x14C1BACF914C1BADLL * ((uint64_t)(v5 - v9) >> 3);
    v12 = 2 * v11;
    if (2 * v11 <= v10 + 1)
      v12 = v10 + 1;
    if (v11 >= 0x6EB3E45306EB3ELL)
      v13 = 0xDD67C8A60DD67CLL;
    else
      v13 = v12;
    v24 = v4;
    if (v13)
      v13 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<siri::dialogengine::TestResult>>(v13);
    else
      v14 = 0;
    v21 = v13;
    v22.i64[0] = v13 + 296 * v10;
    v23 = v13 + 296 * v14;
    std::allocator<siri::dialogengine::TestResult>::construct[abi:ne180100]<siri::dialogengine::TestResult,siri::dialogengine::TestResult const&>((std::string *)v22.i64[0], (uint64_t)a2);
    v15 = v22.i64[0];
    v8 = v22.i64[0] + 296;
    v22.i64[1] = v22.i64[0] + 296;
    v17 = *((_QWORD *)this + 1);
    v16 = *((_QWORD *)this + 2);
    if (v16 == v17)
    {
      v19 = vdupq_n_s64(v16);
    }
    else
    {
      v18 = 0;
      do
      {
        std::allocator<siri::dialogengine::TestResult>::construct[abi:ne180100]<siri::dialogengine::TestResult,siri::dialogengine::TestResult const&>((std::string *)(v22.i64[0] + v18 - 296), v16 + v18 - 296);
        v18 -= 296;
      }
      while (v16 + v18 != v17);
      v15 = v22.i64[0] + v18;
      v19 = *(int64x2_t *)((char *)this + 8);
      v8 = v22.i64[1];
    }
    *((_QWORD *)this + 1) = v15;
    *((_QWORD *)this + 2) = v8;
    v22 = v19;
    v20 = *((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = v23;
    v23 = v20;
    v21 = v19.i64[0];
    result = std::__split_buffer<siri::dialogengine::TestResult>::~__split_buffer((uint64_t)&v21);
  }
  else
  {
    result = (uint64_t)std::allocator<siri::dialogengine::TestResult>::construct[abi:ne180100]<siri::dialogengine::TestResult,siri::dialogengine::TestResult const&>(*((std::string **)this + 2), (uint64_t)a2);
    v8 = v6 + 296;
    *((_QWORD *)this + 2) = v6 + 296;
  }
  *((_QWORD *)this + 2) = v8;
  return result;
}

void sub_1BF926BF4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<siri::dialogengine::TestResult>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

siri::dialogengine::CATExecutionResult *std::allocator<siri::dialogengine::TestResult>::construct[abi:ne180100]<siri::dialogengine::TestResult,siri::dialogengine::TestResult const&>(std::string *a1, uint64_t a2)
{
  std::string *v4;

  v4 = siri::dialogengine::TestCase::TestCase(a1, (const siri::dialogengine::TestCase *)a2);
  LODWORD(v4[10].__r_.__value_.__r.__words[2]) = *(_DWORD *)(a2 + 256);
  v4[11].__r_.__value_.__l.__size_ = 0;
  v4[11].__r_.__value_.__r.__words[2] = 0;
  v4[11].__r_.__value_.__r.__words[0] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v4 + 11, *(__int128 **)(a2 + 264), *(__int128 **)(a2 + 272), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 272) - *(_QWORD *)(a2 + 264)) >> 3));
  return siri::dialogengine::CATExecutionResult::CATExecutionResult((siri::dialogengine::CATExecutionResult *)&a1[12], (const siri::dialogengine::CATExecutionResult *)(a2 + 288));
}

void sub_1BF926CAC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void **v2;
  va_list va;

  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  siri::dialogengine::TestCase::~TestCase(v2);
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<siri::dialogengine::TestResult>>(unint64_t a1)
{
  if (a1 >= 0xDD67C8A60DD67DLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(296 * a1);
}

uint64_t std::__split_buffer<siri::dialogengine::TestResult>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 296;
    std::allocator<siri::dialogengine::TestResult>::destroy[abi:ne180100]((void **)(i - 296));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::allocator<siri::dialogengine::TestResult>::destroy[abi:ne180100](void **a1)
{
  void **v2;

  siri::dialogengine::CATExecutionResult::~CATExecutionResult((siri::dialogengine::CATExecutionResult *)(a1 + 36));
  v2 = a1 + 33;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  siri::dialogengine::TestCase::~TestCase(a1);
}

siri::dialogengine::CATExecutionResult *siri::dialogengine::TestResults::GetResults@<X0>(siri::dialogengine::CATExecutionResult *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v3 = *((_QWORD *)this + 1);
  v4 = *((_QWORD *)this + 2);
  if (v4 != v3)
  {
    v5 = 0x14C1BACF914C1BADLL * ((v4 - v3) >> 3);
    if (v5 >= 0xDD67C8A60DD67DLL)
      std::vector<BOOL>::__throw_length_error[abi:ne180100]();
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<siri::dialogengine::TestResult>>(v5);
    v7 = 0;
    *a2 = v6;
    a2[1] = v6;
    a2[2] = &v6[296 * v8];
    do
    {
      v9 = &v6[v7];
      siri::dialogengine::TestCase::TestCase((std::string *)&v6[v7], (const siri::dialogengine::TestCase *)(v3 + v7));
      *((_DWORD *)v9 + 64) = *(_DWORD *)(v3 + v7 + 256);
      *((_QWORD *)v9 + 34) = 0;
      *((_QWORD *)v9 + 35) = 0;
      *((_QWORD *)v9 + 33) = 0;
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)&v6[v7 + 264], *(__int128 **)(v3 + v7 + 264), *(__int128 **)(v3 + v7 + 272), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v3 + v7 + 272) - *(_QWORD *)(v3 + v7 + 264)) >> 3));
      this = siri::dialogengine::CATExecutionResult::CATExecutionResult((siri::dialogengine::CATExecutionResult *)&v6[v7 + 288], (const siri::dialogengine::CATExecutionResult *)(v3 + v7 + 288));
      v7 += 296;
    }
    while (v3 + v7 != v4);
    a2[1] = &v6[v7];
  }
  return this;
}

void sub_1BF926ED4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<siri::dialogengine::TestResult>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void std::vector<siri::dialogengine::TestResult>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 37;
        std::allocator<siri::dialogengine::TestResult>::destroy[abi:ne180100](v4);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t siri::dialogengine::TestResults::GetCountByStatus(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  if (v2 == v3)
    return 0;
  LODWORD(result) = 0;
  do
  {
    if (*(_DWORD *)(v2 + 256) == a2)
      result = (result + 1);
    else
      result = result;
    v2 += 296;
  }
  while (v2 != v3);
  return result;
}

uint64_t siri::dialogengine::TestResults::SummarizeToStdout(siri::dialogengine::TestResults *this)
{
  uint64_t v2;
  std::string::size_type i;
  std::string::size_type size;
  __int128 v5;
  std::string *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  std::string::size_type v10;
  char *v11;
  __int128 v12;
  std::string::size_type j;
  std::string::size_type v14;
  __int128 v15;
  int v16;
  void **v17;
  int v18;
  std::string::size_type v19;
  std::string *v20;
  void **v21;
  std::string *p_p;
  std::string *v23;
  int v24;
  void **v25;
  int v26;
  std::string::size_type v27;
  std::string *v28;
  void **v29;
  std::string *v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  siri::dialogengine::TestResults *v39;
  uint64_t v40;
  std::string __p;
  std::string v42;
  std::string v43;
  void *v44[2];
  char v45;
  std::string v46;
  std::string v47;
  std::string v48;

  v2 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    memset(&v46, 0, sizeof(v46));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v46, *(__int128 **)(v2 + 32), *(__int128 **)(v2 + 40), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v2 + 40) - *(_QWORD *)(v2 + 32)) >> 3));
    size = v46.__r_.__value_.__l.__size_;
    for (i = v46.__r_.__value_.__r.__words[0]; i != size; i += 24)
    {
      if (*(char *)(i + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v48, *(const std::string::value_type **)i, *(_QWORD *)(i + 8));
      }
      else
      {
        v5 = *(_OWORD *)i;
        v48.__r_.__value_.__r.__words[2] = *(_QWORD *)(i + 16);
        *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v5;
      }
      if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v6 = &v48;
      else
        v6 = (std::string *)v48.__r_.__value_.__r.__words[0];
      puts((const char *)v6);
      if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v48.__r_.__value_.__l.__data_);
    }
    v48.__r_.__value_.__r.__words[0] = (std::string::size_type)&v46;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v48);
  }
  v7 = *((_QWORD *)this + 1);
  v40 = *((_QWORD *)this + 2);
  if (v7 == v40)
    goto LABEL_79;
  v39 = this;
  do
  {
    siri::dialogengine::TestCase::TestCase(&v46, (const siri::dialogengine::TestCase *)v7);
    v8 = *(unsigned int *)(v7 + 256);
    v9 = "???";
    if (v8 <= 3)
      v9 = off_1E792DD40[v8];
    std::string::basic_string[abi:ne180100]<0>(&v48, v9);
    if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v43, v47.__r_.__value_.__l.__data_, v47.__r_.__value_.__l.__size_);
    else
      v43 = v47;
    v10 = HIBYTE(v43.__r_.__value_.__r.__words[2]);
    if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v10 = v43.__r_.__value_.__l.__size_;
    if (v10)
      v11 = "Pattern";
    else
      v11 = "CAT";
    std::string::basic_string[abi:ne180100]<0>(v44, v11);
    if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v43.__r_.__value_.__l.__data_);
    memset(&v43, 0, sizeof(v43));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v43, *(__int128 **)(v7 + 264), *(__int128 **)(v7 + 272), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v7 + 272) - *(_QWORD *)(v7 + 264)) >> 3));
    v12 = *(_OWORD *)&v43.__r_.__value_.__l.__data_;
    v42.__r_.__value_.__r.__words[0] = (std::string::size_type)&v43;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v42);
    if ((_QWORD)v12 == *((_QWORD *)&v12 + 1))
    {
      v24 = v45;
      v25 = (void **)v44[0];
      v26 = SHIBYTE(v48.__r_.__value_.__r.__words[2]);
      v27 = v48.__r_.__value_.__r.__words[0];
      siri::dialogengine::TestCase::ToString((siri::dialogengine::TestCase *)&v46, &v43);
      if (v26 >= 0)
        v28 = &v48;
      else
        v28 = (std::string *)v27;
      if (v24 >= 0)
        v29 = v44;
      else
        v29 = v25;
      if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v30 = &v43;
      else
        v30 = (std::string *)v43.__r_.__value_.__r.__words[0];
      printf("%s Test %s: %s\n", (const char *)v29, (const char *)v28, (const char *)v30);
      if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v43.__r_.__value_.__l.__data_);
    }
    else
    {
      memset(&v43, 0, sizeof(v43));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v43, *(__int128 **)(v7 + 264), *(__int128 **)(v7 + 272), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v7 + 272) - *(_QWORD *)(v7 + 264)) >> 3));
      v14 = v43.__r_.__value_.__l.__size_;
      for (j = v43.__r_.__value_.__r.__words[0]; j != v14; j += 24)
      {
        if (*(char *)(j + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v42, *(const std::string::value_type **)j, *(_QWORD *)(j + 8));
        }
        else
        {
          v15 = *(_OWORD *)j;
          v42.__r_.__value_.__r.__words[2] = *(_QWORD *)(j + 16);
          *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v15;
        }
        v16 = v45;
        v17 = (void **)v44[0];
        v18 = SHIBYTE(v48.__r_.__value_.__r.__words[2]);
        v19 = v48.__r_.__value_.__r.__words[0];
        siri::dialogengine::TestCase::ToString((siri::dialogengine::TestCase *)&v46, &__p);
        if (v18 >= 0)
          v20 = &v48;
        else
          v20 = (std::string *)v19;
        if (v16 >= 0)
          v21 = v44;
        else
          v21 = v17;
        p_p = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        v23 = &v42;
        if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v23 = (std::string *)v42.__r_.__value_.__r.__words[0];
        printf("%s Test %s: %s: %s\n", (const char *)v21, (const char *)v20, (const char *)p_p, (const char *)v23);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v42.__r_.__value_.__l.__data_);
      }
      v42.__r_.__value_.__r.__words[0] = (std::string::size_type)&v43;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v42);
    }
    if (v45 < 0)
      operator delete(v44[0]);
    if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v48.__r_.__value_.__l.__data_);
    siri::dialogengine::TestCase::~TestCase((void **)&v46.__r_.__value_.__l.__data_);
    v7 += 296;
  }
  while (v7 != v40);
  v31 = *((_QWORD *)v39 + 1);
  v32 = *((_QWORD *)v39 + 2);
  if (v31 == v32)
  {
LABEL_79:
    v35 = 0;
    v33 = 0;
    v37 = 0;
  }
  else
  {
    v33 = 0;
    v34 = *((_QWORD *)v39 + 1);
    do
    {
      if (*(_DWORD *)(v34 + 256) == 1)
        ++v33;
      v34 += 296;
    }
    while (v34 != v32);
    v35 = 0;
    v36 = *((_QWORD *)v39 + 1);
    do
    {
      if (*(_DWORD *)(v36 + 256) == 2)
        ++v35;
      v36 += 296;
    }
    while (v36 != v32);
    v37 = 0;
    do
    {
      if (*(_DWORD *)(v31 + 256) == 3)
        ++v37;
      v31 += 296;
    }
    while (v31 != v32);
  }
  return printf("%d passed, %d failed, %d skipped\n", v33, v35, v37);
}

void sub_1BF9273FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,char a38)
{
  uint64_t v38;

  *(_QWORD *)(v38 - 112) = &a38;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v38 - 112));
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::TestResults::SaveAsJson(uint64_t a1, std::string *a2)
{
  uint64_t v4;
  unint64_t i;
  std::string *v6;
  unsigned int v7;
  std::string::size_type size;
  std::string *v9;
  unsigned int v10;
  std::string::size_type v11;
  std::string *v12;
  unsigned int v13;
  void **v14;
  std::string::size_type v15;
  std::string *v16;
  __int128 v17;
  std::string *v18;
  unsigned int v19;
  uint64_t v20;
  char *v21;
  std::string *v22;
  unsigned int v23;
  uint64_t v24;
  __int128 v25;
  std::string::size_type j;
  std::string::size_type v27;
  const char *v28;
  unsigned int v29;
  std::string::size_type k;
  std::string::size_type v31;
  __int128 *v32;
  __int128 v33;
  const char *v34;
  unsigned int v35;
  __int128 *v36;
  const char *v37;
  unsigned int v38;
  __int128 *v39;
  const char *v40;
  unsigned int v41;
  __int128 *v42;
  const char *v43;
  unsigned int v44;
  __int128 *v45;
  const char *v46;
  unsigned int v47;
  std::string::size_type v48;
  std::string *v49;
  unsigned int v50;
  char *String;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  std::string *v55;
  std::string::size_type v56;
  std::string *v57;
  __int128 v58;
  std::string *v59;
  std::string *p_p;
  uint64_t v61;
  std::string *v63;
  std::string v64;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  __int16 v69;
  uint64_t v70;
  _BYTE v71[32];
  uint64_t v72;
  uint64_t v73;
  std::string v74;
  std::string v75;
  std::string v76;
  std::string __p;
  void *v78[2];
  unsigned __int8 v79;
  _OWORD *v80;
  _BYTE v81[32];
  uint64_t v82;
  uint64_t v83;
  int v84;
  __int16 v85;
  uint64_t v86;
  _OWORD v87[2];
  uint64_t v88;
  uint64_t v89;
  std::string v90;
  std::string v91;
  std::string v92;
  std::string __s;
  std::string v94;
  std::string v95;
  uint64_t v96;

  v96 = *MEMORY[0x1E0C80C00];
  memset(v87, 0, sizeof(v87));
  v88 = 0;
  v89 = 256;
  memset(v81, 0, sizeof(v81));
  v80 = v87;
  v82 = 0;
  v83 = 512;
  v84 = 324;
  v85 = 0x2000;
  v86 = 4;
  rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::StartObject((uint64_t)&v80);
  rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix((uint64_t)&v80, 5);
  rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString((uint64_t *)&v80, (uint64_t)"results", 7u);
  rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::StartArray((uint64_t)&v80);
  v63 = a2;
  std::string::basic_string[abi:ne180100]<0>(v78, "INPUT_JSON_OBJECT_");
  v4 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)(a1 + 16) != v4)
  {
    for (i = 0; 0x14C1BACF914C1BADLL * ((*(_QWORD *)(a1 + 16) - v4) >> 3) > i; ++i)
    {
      siri::dialogengine::TestCase::TestCase(&v90, (const siri::dialogengine::TestCase *)(v4 + 296 * i));
      siri::dialogengine::CATExecutionResult::CATExecutionResult((siri::dialogengine::CATExecutionResult *)&__p, (const siri::dialogengine::CATExecutionResult *)(v4 + 296 * i + 288));
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::StartObject((uint64_t)&v80);
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix((uint64_t)&v80, 5);
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString((uint64_t *)&v80, (uint64_t)"name", 4u);
      if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v64, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
      else
        v64 = __s;
      if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v6 = &v64;
      else
        v6 = (std::string *)v64.__r_.__value_.__r.__words[0];
      v7 = strlen((const char *)v6);
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::String((uint64_t *)&v80, (uint64_t)v6, v7);
      if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v64.__r_.__value_.__l.__data_);
      if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v64, v94.__r_.__value_.__l.__data_, v94.__r_.__value_.__l.__size_);
      else
        v64 = v94;
      if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
      {
        size = v64.__r_.__value_.__l.__size_;
        operator delete(v64.__r_.__value_.__l.__data_);
        if (!size)
          goto LABEL_26;
      }
      else if (!*((_BYTE *)&v64.__r_.__value_.__s + 23))
      {
        goto LABEL_26;
      }
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix((uint64_t)&v80, 5);
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString((uint64_t *)&v80, (uint64_t)"description", 0xBu);
      if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v64, v94.__r_.__value_.__l.__data_, v94.__r_.__value_.__l.__size_);
      else
        v64 = v94;
      if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v9 = &v64;
      else
        v9 = (std::string *)v64.__r_.__value_.__r.__words[0];
      v10 = strlen((const char *)v9);
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::String((uint64_t *)&v80, (uint64_t)v9, v10);
      if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v64.__r_.__value_.__l.__data_);
LABEL_26:
      if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v64, v92.__r_.__value_.__l.__data_, v92.__r_.__value_.__l.__size_);
      else
        v64 = v92;
      if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
      {
        v11 = v64.__r_.__value_.__l.__size_;
        operator delete(v64.__r_.__value_.__l.__data_);
        if (v11)
        {
LABEL_31:
          rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix((uint64_t)&v80, 5);
          rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString((uint64_t *)&v80, (uint64_t)"patternId", 9u);
          if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v64, v92.__r_.__value_.__l.__data_, v92.__r_.__value_.__l.__size_);
          else
            v64 = v92;
          if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v12 = &v64;
          else
            v12 = (std::string *)v64.__r_.__value_.__r.__words[0];
          goto LABEL_44;
        }
      }
      else if (*((_BYTE *)&v64.__r_.__value_.__s + 23))
      {
        goto LABEL_31;
      }
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix((uint64_t)&v80, 5);
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString((uint64_t *)&v80, (uint64_t)"catId", 5u);
      if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v64, v91.__r_.__value_.__l.__data_, v91.__r_.__value_.__l.__size_);
      else
        v64 = v91;
      if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v12 = &v64;
      else
        v12 = (std::string *)v64.__r_.__value_.__r.__words[0];
LABEL_44:
      v13 = strlen((const char *)v12);
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::String((uint64_t *)&v80, (uint64_t)v12, v13);
      if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v64.__r_.__value_.__l.__data_);
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix((uint64_t)&v80, 5);
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString((uint64_t *)&v80, (uint64_t)"inputs", 6u);
      std::to_string((std::string *)v71, i);
      if ((v79 & 0x80u) == 0)
        v14 = v78;
      else
        v14 = (void **)v78[0];
      if ((v79 & 0x80u) == 0)
        v15 = v79;
      else
        v15 = (std::string::size_type)v78[1];
      v16 = std::string::insert((std::string *)v71, 0, (const std::string::value_type *)v14, v15);
      v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
      v64.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v17;
      v16->__r_.__value_.__l.__size_ = 0;
      v16->__r_.__value_.__r.__words[2] = 0;
      v16->__r_.__value_.__r.__words[0] = 0;
      if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v18 = &v64;
      else
        v18 = (std::string *)v64.__r_.__value_.__r.__words[0];
      v19 = strlen((const char *)v18);
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::String((uint64_t *)&v80, (uint64_t)v18, v19);
      if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v64.__r_.__value_.__l.__data_);
      if ((v71[23] & 0x80000000) != 0)
        operator delete(*(void **)v71);
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix((uint64_t)&v80, 5);
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString((uint64_t *)&v80, (uint64_t)"status", 6u);
      v20 = *(unsigned int *)(v4 + 296 * i + 256);
      v21 = "???";
      if (v20 <= 3)
        v21 = off_1E792DD40[v20];
      std::string::basic_string[abi:ne180100]<0>(&v64, v21);
      if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v22 = &v64;
      else
        v22 = (std::string *)v64.__r_.__value_.__r.__words[0];
      v23 = strlen((const char *)v22);
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::String((uint64_t *)&v80, (uint64_t)v22, v23);
      if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v64.__r_.__value_.__l.__data_);
      v24 = v4 + 296 * i;
      memset(&v64, 0, sizeof(v64));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v64, *(__int128 **)(v24 + 264), *(__int128 **)(v24 + 272), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v24 + 272) - *(_QWORD *)(v24 + 264)) >> 3));
      v25 = *(_OWORD *)&v64.__r_.__value_.__l.__data_;
      *(_QWORD *)v71 = &v64;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v71);
      if ((_QWORD)v25 != *((_QWORD *)&v25 + 1))
      {
        rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix((uint64_t)&v80, 5);
        rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString((uint64_t *)&v80, (uint64_t)"notes", 5u);
        rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::StartArray((uint64_t)&v80);
        memset(&v64, 0, sizeof(v64));
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v64, *(__int128 **)(v24 + 264), *(__int128 **)(v24 + 272), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v24 + 272) - *(_QWORD *)(v24 + 264)) >> 3));
        v27 = v64.__r_.__value_.__l.__size_;
        for (j = v64.__r_.__value_.__r.__words[0]; j != v27; j += 24)
        {
          v28 = (const char *)j;
          if (*(char *)(j + 23) < 0)
            v28 = *(const char **)j;
          v29 = strlen(v28);
          rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::String((uint64_t *)&v80, (uint64_t)v28, v29);
        }
        *(_QWORD *)v71 = &v64;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v71);
        rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::EndArray((uint64_t)&v80);
      }
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix((uint64_t)&v80, 5);
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString((uint64_t *)&v80, (uint64_t)"dialog", 6u);
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::StartArray((uint64_t)&v80);
      memset(&v64, 0, sizeof(v64));
      std::vector<siri::dialogengine::CATExecutionDialogResult>::__init_with_size[abi:ne180100]<siri::dialogengine::CATExecutionDialogResult*,siri::dialogengine::CATExecutionDialogResult*>(&v64, *(_QWORD *)(__p.__r_.__value_.__r.__words[0] + 72), *(_QWORD *)(__p.__r_.__value_.__r.__words[0] + 80), (uint64_t)(*(_QWORD *)(__p.__r_.__value_.__r.__words[0] + 80) - *(_QWORD *)(__p.__r_.__value_.__r.__words[0] + 72)) >> 3);
      v31 = v64.__r_.__value_.__l.__size_;
      for (k = v64.__r_.__value_.__r.__words[0]; k != v31; k += 8)
      {
        rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::StartObject((uint64_t)&v80);
        rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix((uint64_t)&v80, 5);
        rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString((uint64_t *)&v80, (uint64_t)"dialogId", 8u);
        v32 = *(__int128 **)k;
        if (*(char *)(*(_QWORD *)k + 23) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)v71, *(const std::string::value_type **)v32, *((_QWORD *)v32 + 1));
        }
        else
        {
          v33 = *v32;
          *(_QWORD *)&v71[16] = *((_QWORD *)v32 + 2);
          *(_OWORD *)v71 = v33;
        }
        if (v71[23] >= 0)
          v34 = v71;
        else
          v34 = *(const char **)v71;
        v35 = strlen(v34);
        rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::String((uint64_t *)&v80, (uint64_t)v34, v35);
        if ((v71[23] & 0x80000000) != 0)
          operator delete(*(void **)v71);
        rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix((uint64_t)&v80, 5);
        rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString((uint64_t *)&v80, (uint64_t)"fullPrint", 9u);
        v36 = *(__int128 **)k;
        if (*(char *)(*(_QWORD *)k + 71) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)v71, *((const std::string::value_type **)v36 + 6), *((_QWORD *)v36 + 7));
        }
        else
        {
          *(_OWORD *)v71 = v36[3];
          *(_QWORD *)&v71[16] = *((_QWORD *)v36 + 8);
        }
        if (v71[23] >= 0)
          v37 = v71;
        else
          v37 = *(const char **)v71;
        v38 = strlen(v37);
        rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::String((uint64_t *)&v80, (uint64_t)v37, v38);
        if ((v71[23] & 0x80000000) != 0)
          operator delete(*(void **)v71);
        rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix((uint64_t)&v80, 5);
        rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString((uint64_t *)&v80, (uint64_t)"fullSpeak", 9u);
        v39 = *(__int128 **)k;
        if (*(char *)(*(_QWORD *)k + 95) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)v71, *((const std::string::value_type **)v39 + 9), *((_QWORD *)v39 + 10));
        }
        else
        {
          *(_OWORD *)v71 = *(__int128 *)((char *)v39 + 72);
          *(_QWORD *)&v71[16] = *((_QWORD *)v39 + 11);
        }
        if (v71[23] >= 0)
          v40 = v71;
        else
          v40 = *(const char **)v71;
        v41 = strlen(v40);
        rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::String((uint64_t *)&v80, (uint64_t)v40, v41);
        if ((v71[23] & 0x80000000) != 0)
          operator delete(*(void **)v71);
        rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix((uint64_t)&v80, 5);
        rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString((uint64_t *)&v80, (uint64_t)"supportingPrint", 0xFu);
        v42 = *(__int128 **)k;
        if (*(char *)(*(_QWORD *)k + 119) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)v71, *((const std::string::value_type **)v42 + 12), *((_QWORD *)v42 + 13));
        }
        else
        {
          *(_OWORD *)v71 = v42[6];
          *(_QWORD *)&v71[16] = *((_QWORD *)v42 + 14);
        }
        if (v71[23] >= 0)
          v43 = v71;
        else
          v43 = *(const char **)v71;
        v44 = strlen(v43);
        rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::String((uint64_t *)&v80, (uint64_t)v43, v44);
        if ((v71[23] & 0x80000000) != 0)
          operator delete(*(void **)v71);
        rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix((uint64_t)&v80, 5);
        rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString((uint64_t *)&v80, (uint64_t)"supportingSpeak", 0xFu);
        v45 = *(__int128 **)k;
        if (*(char *)(*(_QWORD *)k + 143) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)v71, *((const std::string::value_type **)v45 + 15), *((_QWORD *)v45 + 16));
        }
        else
        {
          *(_OWORD *)v71 = *(__int128 *)((char *)v45 + 120);
          *(_QWORD *)&v71[16] = *((_QWORD *)v45 + 17);
        }
        if (v71[23] >= 0)
          v46 = v71;
        else
          v46 = *(const char **)v71;
        v47 = strlen(v46);
        rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::String((uint64_t *)&v80, (uint64_t)v46, v47);
        if ((v71[23] & 0x80000000) != 0)
          operator delete(*(void **)v71);
        rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::EndObject((uint64_t)&v80);
      }
      *(_QWORD *)v71 = &v64;
      std::vector<siri::dialogengine::CATExecutionDialogResult>::__destroy_vector::operator()[abi:ne180100]((void ***)v71);
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::EndArray((uint64_t)&v80);
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix((uint64_t)&v80, 5);
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString((uint64_t *)&v80, (uint64_t)"visual", 6u);
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::StartObject((uint64_t)&v80);
      if (*(char *)(__p.__r_.__value_.__r.__words[0] + 143) < 0)
        std::string::__init_copy_ctor_external(&v64, *(const std::string::value_type **)(__p.__r_.__value_.__r.__words[0] + 120), *(_QWORD *)(__p.__r_.__value_.__r.__words[0] + 128));
      else
        v64 = *(std::string *)(__p.__r_.__value_.__r.__words[0] + 120);
      if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
      {
        v48 = v64.__r_.__value_.__l.__size_;
        operator delete(v64.__r_.__value_.__l.__data_);
        if (v48)
        {
LABEL_123:
          rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix((uint64_t)&v80, 5);
          rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString((uint64_t *)&v80, (uint64_t)"data", 4u);
          if (*(char *)(__p.__r_.__value_.__r.__words[0] + 143) < 0)
            std::string::__init_copy_ctor_external(&v64, *(const std::string::value_type **)(__p.__r_.__value_.__r.__words[0] + 120), *(_QWORD *)(__p.__r_.__value_.__r.__words[0] + 128));
          else
            v64 = *(std::string *)(__p.__r_.__value_.__r.__words[0] + 120);
          if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v49 = &v64;
          else
            v49 = (std::string *)v64.__r_.__value_.__r.__words[0];
          v50 = strlen((const char *)v49);
          rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::String((uint64_t *)&v80, (uint64_t)v49, v50);
          if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v64.__r_.__value_.__l.__data_);
        }
      }
      else if (*((_BYTE *)&v64.__r_.__value_.__s + 23))
      {
        goto LABEL_123;
      }
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::EndObject((uint64_t)&v80);
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::EndObject((uint64_t)&v80);
      siri::dialogengine::CATExecutionResult::~CATExecutionResult((siri::dialogengine::CATExecutionResult *)&__p);
      siri::dialogengine::TestCase::~TestCase((void **)&v90.__r_.__value_.__l.__data_);
      v4 = *(_QWORD *)(a1 + 8);
    }
  }
  rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::EndArray((uint64_t)&v80);
  rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::EndObject((uint64_t)&v80);
  String = (char *)rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>::GetString((uint64_t *)v87);
  std::string::basic_string[abi:ne180100]<0>(&__p, String);
  v52 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)(a1 + 16) != v52)
  {
    v53 = 0;
    v54 = 0;
    do
    {
      siri::dialogengine::TestCase::TestCase(&v90, (const siri::dialogengine::TestCase *)(v52 + v53));
      if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v64, v95.__r_.__value_.__l.__data_, v95.__r_.__value_.__l.__size_);
      else
        v64 = v95;
      siri::dialogengine::TestCase::~TestCase((void **)&v90.__r_.__value_.__l.__data_);
      std::operator+<char>();
      std::to_string(&v74, v54);
      if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v55 = &v74;
      else
        v55 = (std::string *)v74.__r_.__value_.__r.__words[0];
      if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v56 = HIBYTE(v74.__r_.__value_.__r.__words[2]);
      else
        v56 = v74.__r_.__value_.__l.__size_;
      v57 = std::string::append(&v75, (const std::string::value_type *)v55, v56);
      v58 = *(_OWORD *)&v57->__r_.__value_.__l.__data_;
      v76.__r_.__value_.__r.__words[2] = v57->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v76.__r_.__value_.__l.__data_ = v58;
      v57->__r_.__value_.__l.__size_ = 0;
      v57->__r_.__value_.__r.__words[2] = 0;
      v57->__r_.__value_.__r.__words[0] = 0;
      v59 = std::string::append(&v76, "\"");
      *(std::string *)v71 = *v59;
      v59->__r_.__value_.__l.__size_ = 0;
      v59->__r_.__value_.__r.__words[2] = 0;
      v59->__r_.__value_.__r.__words[0] = 0;
      siri::dialogengine::StringReplace((uint64_t)&__p, v71, (uint64_t)&v64, 0, &v90);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      __p = v90;
      *((_BYTE *)&v90.__r_.__value_.__s + 23) = 0;
      v90.__r_.__value_.__s.__data_[0] = 0;
      if ((v71[23] & 0x80000000) != 0)
        operator delete(*(void **)v71);
      if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v76.__r_.__value_.__l.__data_);
      if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v74.__r_.__value_.__l.__data_);
      if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v75.__r_.__value_.__l.__data_);
      if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v64.__r_.__value_.__l.__data_);
      ++v54;
      v52 = *(_QWORD *)(a1 + 8);
      v53 += 296;
    }
    while (0x14C1BACF914C1BADLL * ((*(_QWORD *)(a1 + 16) - v52) >> 3) > v54);
  }
  rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::GenericDocument((uint64_t)&v90);
  p_p = &__p;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  v64.__r_.__value_.__r.__words[0] = (std::string::size_type)p_p;
  v64.__r_.__value_.__l.__size_ = (std::string::size_type)p_p;
  rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::ParseStream<128u,rapidjson::UTF8<char>,rapidjson::GenericStringStream<rapidjson::UTF8<char>>>((uint64_t)&v90, (uint64_t)&v64);
  memset(v71, 0, sizeof(v71));
  v72 = 0;
  v73 = 256;
  v64.__r_.__value_.__r.__words[0] = (std::string::size_type)v71;
  *(_OWORD *)&v64.__r_.__value_.__r.__words[1] = 0u;
  v65 = 0u;
  v66 = 0;
  v67 = 512;
  v68 = 324;
  v69 = 0x2000;
  v70 = 4;
  rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::Accept<rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>>((unsigned int *)&v90, (uint64_t *)&v64);
  v61 = rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>::GetString((uint64_t *)v71);
  MEMORY[0x1C3B8D53C](&__p, v61);
  siri::dialogengine::WriteFileFromString(v63, (uint64_t)&__p);
  rapidjson::internal::Stack<rapidjson::CrtAllocator>::Destroy((uint64_t)&v64.__r_.__value_.__l.__size_);
  rapidjson::internal::Stack<rapidjson::CrtAllocator>::Destroy((uint64_t)v71);
  rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::~GenericDocument((uint64_t)&v90);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if ((char)v79 < 0)
    operator delete(v78[0]);
  rapidjson::internal::Stack<rapidjson::CrtAllocator>::Destroy((uint64_t)v81);
  return rapidjson::internal::Stack<rapidjson::CrtAllocator>::Destroy((uint64_t)v87);
}

void sub_1BF92823C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a65;
  char a72;

  rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::~GenericDocument((uint64_t)&a72);
  if (a48 < 0)
    operator delete(__p);
  if (a55 < 0)
    operator delete(a50);
  rapidjson::internal::Stack<rapidjson::CrtAllocator>::Destroy(a11);
  rapidjson::internal::Stack<rapidjson::CrtAllocator>::Destroy((uint64_t)&a65);
  _Unwind_Resume(a1);
}

void std::vector<siri::dialogengine::CATExecutionDialogResult>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = v2;
    if (v4 != v2)
    {
      do
        siri::dialogengine::CATExecutionDialogResult::~CATExecutionDialogResult((siri::dialogengine::CATExecutionDialogResult *)(v4 - 8));
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void InitDefaultsscc_info_SummaryItem_Button_SummaryItem_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/SummaryItem.pb.cc", a4);
  SnippetUI::SummaryItem_Button::SummaryItem_Button((SnippetUI::SummaryItem_Button *)&SnippetUI::_SummaryItem_Button_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_SummaryItem_Button_default_instance_, v4);
  qword_1ED1D44B0 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1ED1D44B8 = &SnippetUI::_Button_default_instance_;
  qword_1ED1D44C0 = (uint64_t)&SnippetUI::_Button_default_instance_;
  unk_1ED1D44C8 = &SnippetUI::_Button_default_instance_;
  qword_1ED1D44D0 = (uint64_t)&SnippetUI::_MultilineTextProperty_default_instance_;
  unk_1ED1D44D8 = &SnippetUI::_MultilineTextProperty_default_instance_;
  qword_1ED1D44E0 = (uint64_t)&SnippetUI::_VisualProperty_default_instance_;
  qword_1ED1D44E8 = (uint64_t)&SnippetUI::_ActionProperty_default_instance_;
  unk_1ED1D44F0 = &SnippetUI::_TextProperty_default_instance_;
}

SnippetUI::SummaryItem_Button *SnippetUI::SummaryItem_Button::SummaryItem_Button(SnippetUI::SummaryItem_Button *this)
{
  *(_QWORD *)this = &off_1E792E530;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 26) = 0;
  if (atomic_load(scc_info_SummaryItem_Button_SummaryItem_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_SummaryItem_Button_SummaryItem_2eproto);
  *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_QWORD *)this + 12) = 0;
  return this;
}

void sub_1BF9285D4(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::SummaryItem_Button::~SummaryItem_Button(SnippetUI::SummaryItem_Button *this)
{
  SnippetUI::SummaryItem_Button::~SummaryItem_Button(this);
  JUMPOUT(0x1C3B8D890);
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)this = &off_1E792E530;
  v2 = *((_QWORD *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x1C3B8D890](v2, 0x1012C40EC159624);
  }
  v4 = *((_QWORD *)this + 3);
  if ((uint64_t *)v4 != &google::protobuf::internal::fixed_address_empty_string && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0)
      operator delete(*(void **)v4);
    MEMORY[0x1C3B8D890](v4, 0x1012C40EC159624);
  }
  if (this != (SnippetUI::SummaryItem_Button *)&SnippetUI::_SummaryItem_Button_default_instance_)
  {
    v6 = *((_QWORD *)this + 4);
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    v7 = *((_QWORD *)this + 5);
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    v8 = *((_QWORD *)this + 6);
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    v9 = *((_QWORD *)this + 7);
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    v10 = *((_QWORD *)this + 8);
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    v11 = *((_QWORD *)this + 9);
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = *((_QWORD *)this + 10);
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    v13 = *((_QWORD *)this + 11);
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    v14 = *((_QWORD *)this + 12);
    if (v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

SnippetUI::SummaryItem_Button *SnippetUI::SummaryItem_Button::New(SnippetUI::SummaryItem_Button *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::SummaryItem_Button>(0);
}

SnippetUI::SummaryItem_Button *SnippetUI::SummaryItem_Button::New(SnippetUI::SummaryItem_Button *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::SummaryItem_Button>(a2);
}

void SnippetUI::SummaryItem_Button::Clear(SnippetUI::SummaryItem_Button *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  google::protobuf::internal::InternalMetadataWithArena *v13;
  char v14;

  v2 = *((_QWORD *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(_BYTE **)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v2 = 0;
      *(_BYTE *)(v2 + 23) = 0;
    }
  }
  v3 = *((_QWORD *)this + 3);
  if ((uint64_t *)v3 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v3 + 23) < 0)
    {
      **(_BYTE **)v3 = 0;
      *(_QWORD *)(v3 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v3 = 0;
      *(_BYTE *)(v3 + 23) = 0;
    }
  }
  v4 = *((_QWORD *)this + 4);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  *((_QWORD *)this + 4) = 0;
  v5 = *((_QWORD *)this + 5);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *((_QWORD *)this + 5) = 0;
  v6 = *((_QWORD *)this + 6);
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  *((_QWORD *)this + 6) = 0;
  v7 = *((_QWORD *)this + 7);
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  *((_QWORD *)this + 7) = 0;
  v8 = *((_QWORD *)this + 8);
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  *((_QWORD *)this + 8) = 0;
  v9 = *((_QWORD *)this + 9);
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  *((_QWORD *)this + 9) = 0;
  v10 = *((_QWORD *)this + 10);
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  *((_QWORD *)this + 10) = 0;
  v11 = *((_QWORD *)this + 11);
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  *((_QWORD *)this + 11) = 0;
  v12 = *((_QWORD *)this + 12);
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  v14 = *((_BYTE *)this + 8);
  v13 = (SnippetUI::SummaryItem_Button *)((char *)this + 8);
  *((_QWORD *)v13 + 11) = 0;
  if ((v14 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v13);
}

uint64_t SnippetUI::SummaryItem_Button::IsInitialized(SnippetUI::SummaryItem_Button *this)
{
  return 1;
}

char *SnippetUI::SummaryItem_Button::ByteSizeLong(SnippetUI::SummaryItem_Button *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  const google::protobuf::UnknownFieldSet *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  SnippetUI::TextProperty *v9;
  char *v10;
  SnippetUI::Button *v11;
  char *v12;
  SnippetUI::Button *v13;
  char *v14;
  SnippetUI::Button *v15;
  char *v16;
  SnippetUI::MultilineTextProperty *v17;
  char *v18;
  SnippetUI::MultilineTextProperty *v19;
  char *v20;
  SnippetUI::VisualProperty *v21;
  char *v22;
  SnippetUI::ActionProperty *v23;
  char *v24;
  SnippetUI::TextProperty *v25;
  char *v26;

  v2 = *((_QWORD *)this + 2);
  v3 = *(unsigned __int8 *)(v2 + 23);
  if (*(char *)(v2 + 23) < 0)
  {
    if (*(_QWORD *)(v2 + 8))
      goto LABEL_3;
LABEL_7:
    v5 = 0;
    goto LABEL_8;
  }
  if (!*(_BYTE *)(v2 + 23))
    goto LABEL_7;
LABEL_3:
  v4 = *(_QWORD *)(v2 + 8);
  if ((v3 & 0x80u) == 0)
    v4 = v3;
  v5 = (const google::protobuf::UnknownFieldSet *)(v4 + ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_8:
  v6 = *((_QWORD *)this + 3);
  v7 = *(unsigned __int8 *)(v6 + 23);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(_QWORD *)(v6 + 8))
      goto LABEL_13;
  }
  else if (!*(_BYTE *)(v6 + 23))
  {
    goto LABEL_13;
  }
  v8 = *(_QWORD *)(v6 + 8);
  if ((v7 & 0x80u) == 0)
    v8 = v7;
  v5 = (const google::protobuf::UnknownFieldSet *)((char *)v5 + v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_13:
  if (this != (SnippetUI::SummaryItem_Button *)&SnippetUI::_SummaryItem_Button_default_instance_)
  {
    v9 = (SnippetUI::TextProperty *)*((_QWORD *)this + 4);
    if (v9)
    {
      v10 = SnippetUI::TextProperty::ByteSizeLong(v9);
      v5 = (const google::protobuf::UnknownFieldSet *)&v10[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v11 = (SnippetUI::Button *)*((_QWORD *)this + 5);
    if (v11)
    {
      v12 = SnippetUI::Button::ByteSizeLong(v11);
      v5 = (const google::protobuf::UnknownFieldSet *)&v12[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v12 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v13 = (SnippetUI::Button *)*((_QWORD *)this + 6);
    if (v13)
    {
      v14 = SnippetUI::Button::ByteSizeLong(v13);
      v5 = (const google::protobuf::UnknownFieldSet *)&v14[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v14 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v15 = (SnippetUI::Button *)*((_QWORD *)this + 7);
    if (v15)
    {
      v16 = SnippetUI::Button::ByteSizeLong(v15);
      v5 = (const google::protobuf::UnknownFieldSet *)&v16[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v16 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v17 = (SnippetUI::MultilineTextProperty *)*((_QWORD *)this + 8);
    if (v17)
    {
      v18 = SnippetUI::MultilineTextProperty::ByteSizeLong(v17);
      v5 = (const google::protobuf::UnknownFieldSet *)&v18[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v18 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v19 = (SnippetUI::MultilineTextProperty *)*((_QWORD *)this + 9);
    if (v19)
    {
      v20 = SnippetUI::MultilineTextProperty::ByteSizeLong(v19);
      v5 = (const google::protobuf::UnknownFieldSet *)&v20[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v20 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v21 = (SnippetUI::VisualProperty *)*((_QWORD *)this + 10);
    if (v21)
    {
      v22 = SnippetUI::VisualProperty::ByteSizeLong(v21);
      v5 = (const google::protobuf::UnknownFieldSet *)&v22[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v22 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v23 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 11);
    if (v23)
    {
      v24 = SnippetUI::ActionProperty::ByteSizeLong(v23);
      v5 = (const google::protobuf::UnknownFieldSet *)&v24[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v24 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v25 = (SnippetUI::TextProperty *)*((_QWORD *)this + 12);
    if (v25)
    {
      v26 = SnippetUI::TextProperty::ByteSizeLong(v25);
      v5 = (const google::protobuf::UnknownFieldSet *)&v26[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v26 | 1) ^ 0x1F) + 73) >> 6)];
    }
  }
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::SummaryItem_Button *)((char *)this + 8), v5, (_DWORD *)this + 26);
  *((_DWORD *)this + 26) = (_DWORD)v5;
  return (char *)v5;
}

uint64_t SnippetUI::SummaryItem_Button::GetCachedSize(SnippetUI::SummaryItem_Button *this)
{
  return *((unsigned int *)this + 26);
}

google::protobuf::internal *SnippetUI::SummaryItem_Button::_InternalParse(SnippetUI::SummaryItem_Button *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  std::string **v5;
  std::string **v6;
  uint64_t *v7;
  google::protobuf::internal::ParseContext *v8;
  google::protobuf::internal *TagFallback;
  char *v10;
  SnippetUI::TextProperty *v11;
  SnippetUI::Button *v12;
  char *v13;
  SnippetUI::MultilineTextProperty *v14;
  SnippetUI::VisualProperty *v15;
  SnippetUI::ActionProperty *v16;
  std::string *v17;
  std::string::value_type *v18;
  google::protobuf::internal::ParseContext *v19;
  char *v20;
  BOOL v21;
  google::protobuf::internal *v23;

  v23 = a2;
  v5 = (std::string **)((char *)this + 24);
  v6 = (std::string **)((char *)this + 16);
  v7 = (uint64_t *)((char *)this + 8);
  while (2)
  {
    if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v23, *((_DWORD *)a3 + 23)) & 1) != 0)
      return v23;
    TagFallback = (google::protobuf::internal *)((char *)v23 + 1);
    v10 = (char *)*(unsigned __int8 *)v23;
    if ((*(char *)v23 & 0x80000000) == 0)
      goto LABEL_6;
    v10 = (char *)(v10 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v23 + 2);
LABEL_6:
      v23 = TagFallback;
      goto LABEL_7;
    }
    TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v23, v10);
    v23 = TagFallback;
    if (!TagFallback)
      return TagFallback;
LABEL_7:
    switch(v10 >> 3)
    {
      case 1u:
        if (v10 != 10)
          goto LABEL_54;
        v11 = (SnippetUI::TextProperty *)*((_QWORD *)this + 4);
        if (v11)
          goto LABEL_53;
        v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 4) = v11;
        goto LABEL_52;
      case 2u:
        if (v10 != 18)
          goto LABEL_54;
        v12 = (SnippetUI::Button *)*((_QWORD *)this + 5);
        if (v12)
          goto LABEL_23;
        v12 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Button>(0);
        *((_QWORD *)this + 5) = v12;
        goto LABEL_22;
      case 3u:
        if (v10 != 26)
          goto LABEL_54;
        v12 = (SnippetUI::Button *)*((_QWORD *)this + 6);
        if (v12)
          goto LABEL_23;
        v12 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Button>(0);
        *((_QWORD *)this + 6) = v12;
        goto LABEL_22;
      case 4u:
        if (v10 != 34)
          goto LABEL_54;
        v12 = (SnippetUI::Button *)*((_QWORD *)this + 7);
        if (v12)
          goto LABEL_23;
        v12 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Button>(0);
        *((_QWORD *)this + 7) = v12;
LABEL_22:
        TagFallback = v23;
LABEL_23:
        v13 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::Button>(a3, v12, TagFallback);
        goto LABEL_59;
      case 5u:
        if (v10 != 42)
          goto LABEL_54;
        v14 = (SnippetUI::MultilineTextProperty *)*((_QWORD *)this + 8);
        if (v14)
          goto LABEL_31;
        v14 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::MultilineTextProperty>(0);
        *((_QWORD *)this + 8) = v14;
        goto LABEL_30;
      case 6u:
        if (v10 != 50)
          goto LABEL_54;
        v14 = (SnippetUI::MultilineTextProperty *)*((_QWORD *)this + 9);
        if (v14)
          goto LABEL_31;
        v14 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::MultilineTextProperty>(0);
        *((_QWORD *)this + 9) = v14;
LABEL_30:
        TagFallback = v23;
LABEL_31:
        v13 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::MultilineTextProperty>(a3, v14, TagFallback);
        goto LABEL_59;
      case 7u:
        if (v10 != 58)
          goto LABEL_54;
        v15 = (SnippetUI::VisualProperty *)*((_QWORD *)this + 10);
        if (!v15)
        {
          v15 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::VisualProperty>(0);
          *((_QWORD *)this + 10) = v15;
          TagFallback = v23;
        }
        v13 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::VisualProperty>(a3, v15, TagFallback);
        goto LABEL_59;
      case 8u:
        if (v10 != 66)
          goto LABEL_54;
        v16 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 11);
        if (!v16)
        {
          v16 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
          *((_QWORD *)this + 11) = v16;
          TagFallback = v23;
        }
        v13 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::ActionProperty>(a3, v16, TagFallback);
        goto LABEL_59;
      case 9u:
        if (v10 != 74)
          goto LABEL_54;
        v17 = *v6;
        if (*v6 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v6, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v17 = *v6;
          TagFallback = v23;
        }
        v18 = (std::string::value_type *)TagFallback;
        v19 = a3;
        v20 = "SnippetUI.SummaryItem_Button.component_name";
        goto LABEL_48;
      case 0xAu:
        if (v10 != 82)
          goto LABEL_54;
        v17 = *v5;
        if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v17 = *v5;
          TagFallback = v23;
        }
        v18 = (std::string::value_type *)TagFallback;
        v19 = a3;
        v20 = "SnippetUI.SummaryItem_Button.link_identifier";
LABEL_48:
        v13 = google::protobuf::internal::InlineGreedyStringParserUTF8(v17, v18, (uint64_t)v19, (google::protobuf::internal *)v20);
        goto LABEL_59;
      case 0xBu:
        if (v10 != 90)
          goto LABEL_54;
        v11 = (SnippetUI::TextProperty *)*((_QWORD *)this + 12);
        if (!v11)
        {
          v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
          *((_QWORD *)this + 12) = v11;
LABEL_52:
          TagFallback = v23;
        }
LABEL_53:
        v13 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::TextProperty>(a3, v11, TagFallback);
        goto LABEL_59;
      default:
LABEL_54:
        if ((_DWORD)v10)
          v21 = (v10 & 7) == 4;
        else
          v21 = 1;
        if (v21)
        {
          *((_DWORD *)a3 + 20) = (_DWORD)v10 - 1;
          return TagFallback;
        }
        v13 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v10, v7, TagFallback, a3, v8);
LABEL_59:
        v23 = (google::protobuf::internal *)v13;
        if (v13)
          continue;
        TagFallback = 0;
        break;
    }
    return TagFallback;
  }
}

const google::protobuf::UnknownFieldSet *SnippetUI::SummaryItem_Button::InternalSerializeWithCachedSizesToArray(SnippetUI::SummaryItem_Button *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  char *v5;
  SnippetUI::TextProperty *v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  google::protobuf::UnknownFieldSet *v11;
  _BYTE *v12;
  _BYTE *v13;
  unsigned int v14;
  unsigned int v15;
  SnippetUI::Button *v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  google::protobuf::UnknownFieldSet *v20;
  _BYTE *v21;
  _BYTE *v22;
  unsigned int v23;
  unsigned int v24;
  SnippetUI::Button *v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  google::protobuf::UnknownFieldSet *v29;
  _BYTE *v30;
  _BYTE *v31;
  unsigned int v32;
  unsigned int v33;
  SnippetUI::Button *v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int v37;
  google::protobuf::UnknownFieldSet *v38;
  _BYTE *v39;
  _BYTE *v40;
  unsigned int v41;
  unsigned int v42;
  SnippetUI::MultilineTextProperty *v43;
  unsigned int v44;
  uint64_t v45;
  unsigned int v46;
  google::protobuf::UnknownFieldSet *v47;
  _BYTE *v48;
  _BYTE *v49;
  unsigned int v50;
  unsigned int v51;
  SnippetUI::MultilineTextProperty *v52;
  unsigned int v53;
  uint64_t v54;
  unsigned int v55;
  google::protobuf::UnknownFieldSet *v56;
  _BYTE *v57;
  _BYTE *v58;
  unsigned int v59;
  unsigned int v60;
  SnippetUI::VisualProperty *v61;
  unsigned int v62;
  uint64_t v63;
  unsigned int v64;
  google::protobuf::UnknownFieldSet *v65;
  _BYTE *v66;
  _BYTE *v67;
  unsigned int v68;
  unsigned int v69;
  SnippetUI::ActionProperty *v70;
  unsigned int v71;
  google::protobuf::UnknownFieldSet *v72;
  unsigned int v73;
  _BYTE *v74;
  _BYTE *v75;
  unsigned int v76;
  unsigned int v77;
  google::protobuf::internal *v78;
  const char *v79;
  uint64_t *v80;
  const char *v81;
  SnippetUI::TextProperty *v82;
  unsigned int v83;
  google::protobuf::UnknownFieldSet *v84;
  unsigned int v85;
  _BYTE *v86;
  _BYTE *v87;
  unsigned int v88;
  unsigned int v89;
  uint64_t v90;

  v5 = (char *)a2;
  if (this == (SnippetUI::SummaryItem_Button *)&SnippetUI::_SummaryItem_Button_default_instance_)
    goto LABEL_97;
  v7 = (SnippetUI::TextProperty *)*((_QWORD *)this + 4);
  if (v7)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
    {
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      v7 = (SnippetUI::TextProperty *)*((_QWORD *)this + 4);
    }
    *v5 = 10;
    v8 = *((_DWORD *)v7 + 15);
    if (v8 > 0x7F)
    {
      v5[1] = v8 | 0x80;
      v10 = v8 >> 7;
      if (v8 >> 14)
      {
        v12 = v5 + 2;
        do
        {
          v13 = v12;
          *v12++ = v10 | 0x80;
          v14 = v10 >> 7;
          v15 = v10 >> 14;
          v10 >>= 7;
        }
        while (v15);
        v11 = (google::protobuf::UnknownFieldSet *)(v13 + 2);
        *v12 = v14;
        goto LABEL_13;
      }
      v5[2] = v10;
      v9 = 3;
    }
    else
    {
      v5[1] = v8;
      v9 = 2;
    }
    v11 = (google::protobuf::UnknownFieldSet *)&v5[v9];
LABEL_13:
    v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v7, v11, a3, a4);
  }
  v16 = (SnippetUI::Button *)*((_QWORD *)this + 5);
  if (!v16)
    goto LABEL_26;
  if ((unint64_t)v5 >= *(_QWORD *)a3)
  {
    v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v16 = (SnippetUI::Button *)*((_QWORD *)this + 5);
  }
  *v5 = 18;
  v17 = *((_DWORD *)v16 + 17);
  if (v17 > 0x7F)
  {
    v5[1] = v17 | 0x80;
    v19 = v17 >> 7;
    if (v17 >> 14)
    {
      v21 = v5 + 2;
      do
      {
        v22 = v21;
        *v21++ = v19 | 0x80;
        v23 = v19 >> 7;
        v24 = v19 >> 14;
        v19 >>= 7;
      }
      while (v24);
      v20 = (google::protobuf::UnknownFieldSet *)(v22 + 2);
      *v21 = v23;
      goto LABEL_25;
    }
    v5[2] = v19;
    v18 = 3;
  }
  else
  {
    v5[1] = v17;
    v18 = 2;
  }
  v20 = (google::protobuf::UnknownFieldSet *)&v5[v18];
LABEL_25:
  v5 = (char *)SnippetUI::Button::InternalSerializeWithCachedSizesToArray(v16, v20, a3, a4);
LABEL_26:
  v25 = (SnippetUI::Button *)*((_QWORD *)this + 6);
  if (!v25)
    goto LABEL_38;
  if ((unint64_t)v5 >= *(_QWORD *)a3)
  {
    v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v25 = (SnippetUI::Button *)*((_QWORD *)this + 6);
  }
  *v5 = 26;
  v26 = *((_DWORD *)v25 + 17);
  if (v26 > 0x7F)
  {
    v5[1] = v26 | 0x80;
    v28 = v26 >> 7;
    if (v26 >> 14)
    {
      v30 = v5 + 2;
      do
      {
        v31 = v30;
        *v30++ = v28 | 0x80;
        v32 = v28 >> 7;
        v33 = v28 >> 14;
        v28 >>= 7;
      }
      while (v33);
      v29 = (google::protobuf::UnknownFieldSet *)(v31 + 2);
      *v30 = v32;
      goto LABEL_37;
    }
    v5[2] = v28;
    v27 = 3;
  }
  else
  {
    v5[1] = v26;
    v27 = 2;
  }
  v29 = (google::protobuf::UnknownFieldSet *)&v5[v27];
LABEL_37:
  v5 = (char *)SnippetUI::Button::InternalSerializeWithCachedSizesToArray(v25, v29, a3, a4);
LABEL_38:
  v34 = (SnippetUI::Button *)*((_QWORD *)this + 7);
  if (!v34)
    goto LABEL_50;
  if ((unint64_t)v5 >= *(_QWORD *)a3)
  {
    v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v34 = (SnippetUI::Button *)*((_QWORD *)this + 7);
  }
  *v5 = 34;
  v35 = *((_DWORD *)v34 + 17);
  if (v35 > 0x7F)
  {
    v5[1] = v35 | 0x80;
    v37 = v35 >> 7;
    if (v35 >> 14)
    {
      v39 = v5 + 2;
      do
      {
        v40 = v39;
        *v39++ = v37 | 0x80;
        v41 = v37 >> 7;
        v42 = v37 >> 14;
        v37 >>= 7;
      }
      while (v42);
      v38 = (google::protobuf::UnknownFieldSet *)(v40 + 2);
      *v39 = v41;
      goto LABEL_49;
    }
    v5[2] = v37;
    v36 = 3;
  }
  else
  {
    v5[1] = v35;
    v36 = 2;
  }
  v38 = (google::protobuf::UnknownFieldSet *)&v5[v36];
LABEL_49:
  v5 = (char *)SnippetUI::Button::InternalSerializeWithCachedSizesToArray(v34, v38, a3, a4);
LABEL_50:
  v43 = (SnippetUI::MultilineTextProperty *)*((_QWORD *)this + 8);
  if (!v43)
    goto LABEL_62;
  if ((unint64_t)v5 >= *(_QWORD *)a3)
  {
    v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v43 = (SnippetUI::MultilineTextProperty *)*((_QWORD *)this + 8);
  }
  *v5 = 42;
  v44 = *((_DWORD *)v43 + 15);
  if (v44 > 0x7F)
  {
    v5[1] = v44 | 0x80;
    v46 = v44 >> 7;
    if (v44 >> 14)
    {
      v48 = v5 + 2;
      do
      {
        v49 = v48;
        *v48++ = v46 | 0x80;
        v50 = v46 >> 7;
        v51 = v46 >> 14;
        v46 >>= 7;
      }
      while (v51);
      v47 = (google::protobuf::UnknownFieldSet *)(v49 + 2);
      *v48 = v50;
      goto LABEL_61;
    }
    v5[2] = v46;
    v45 = 3;
  }
  else
  {
    v5[1] = v44;
    v45 = 2;
  }
  v47 = (google::protobuf::UnknownFieldSet *)&v5[v45];
LABEL_61:
  v5 = (char *)SnippetUI::MultilineTextProperty::InternalSerializeWithCachedSizesToArray(v43, v47, a3, a4);
LABEL_62:
  v52 = (SnippetUI::MultilineTextProperty *)*((_QWORD *)this + 9);
  if (!v52)
    goto LABEL_74;
  if ((unint64_t)v5 >= *(_QWORD *)a3)
  {
    v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v52 = (SnippetUI::MultilineTextProperty *)*((_QWORD *)this + 9);
  }
  *v5 = 50;
  v53 = *((_DWORD *)v52 + 15);
  if (v53 > 0x7F)
  {
    v5[1] = v53 | 0x80;
    v55 = v53 >> 7;
    if (v53 >> 14)
    {
      v57 = v5 + 2;
      do
      {
        v58 = v57;
        *v57++ = v55 | 0x80;
        v59 = v55 >> 7;
        v60 = v55 >> 14;
        v55 >>= 7;
      }
      while (v60);
      v56 = (google::protobuf::UnknownFieldSet *)(v58 + 2);
      *v57 = v59;
      goto LABEL_73;
    }
    v5[2] = v55;
    v54 = 3;
  }
  else
  {
    v5[1] = v53;
    v54 = 2;
  }
  v56 = (google::protobuf::UnknownFieldSet *)&v5[v54];
LABEL_73:
  v5 = (char *)SnippetUI::MultilineTextProperty::InternalSerializeWithCachedSizesToArray(v52, v56, a3, a4);
LABEL_74:
  v61 = (SnippetUI::VisualProperty *)*((_QWORD *)this + 10);
  if (!v61)
    goto LABEL_86;
  if ((unint64_t)v5 >= *(_QWORD *)a3)
  {
    v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v61 = (SnippetUI::VisualProperty *)*((_QWORD *)this + 10);
  }
  *v5 = 58;
  v62 = *((_DWORD *)v61 + 15);
  if (v62 > 0x7F)
  {
    v5[1] = v62 | 0x80;
    v64 = v62 >> 7;
    if (v62 >> 14)
    {
      v66 = v5 + 2;
      do
      {
        v67 = v66;
        *v66++ = v64 | 0x80;
        v68 = v64 >> 7;
        v69 = v64 >> 14;
        v64 >>= 7;
      }
      while (v69);
      v65 = (google::protobuf::UnknownFieldSet *)(v67 + 2);
      *v66 = v68;
      goto LABEL_85;
    }
    v5[2] = v64;
    v63 = 3;
  }
  else
  {
    v5[1] = v62;
    v63 = 2;
  }
  v65 = (google::protobuf::UnknownFieldSet *)&v5[v63];
LABEL_85:
  v5 = (char *)SnippetUI::VisualProperty::InternalSerializeWithCachedSizesToArray(v61, v65, a3, a4);
LABEL_86:
  v70 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 11);
  if (v70)
  {
    if ((unint64_t)v5 >= *(_QWORD *)a3)
    {
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
      v70 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 11);
    }
    *v5 = 66;
    v71 = *((_DWORD *)v70 + 12);
    if (v71 > 0x7F)
    {
      v5[1] = v71 | 0x80;
      v73 = v71 >> 7;
      if (v71 >> 14)
      {
        v74 = v5 + 2;
        do
        {
          v75 = v74;
          *v74++ = v73 | 0x80;
          v76 = v73 >> 7;
          v77 = v73 >> 14;
          v73 >>= 7;
        }
        while (v77);
        v72 = (google::protobuf::UnknownFieldSet *)(v75 + 2);
        *v74 = v76;
      }
      else
      {
        v5[2] = v73;
        v72 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
      }
    }
    else
    {
      v5[1] = v71;
      v72 = (google::protobuf::UnknownFieldSet *)(v5 + 2);
    }
    v5 = (char *)SnippetUI::ActionProperty::InternalSerializeWithCachedSizesToArray(v70, v72, a3, a4);
  }
LABEL_97:
  v78 = (google::protobuf::internal *)*((_QWORD *)this + 2);
  if (*((char *)v78 + 23) < 0)
  {
    v79 = (const char *)*((_QWORD *)v78 + 1);
    if (!v79)
      goto LABEL_103;
    v78 = *(google::protobuf::internal **)v78;
    goto LABEL_102;
  }
  v79 = (const char *)*((unsigned __int8 *)v78 + 23);
  if (*((_BYTE *)v78 + 23))
  {
LABEL_102:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v78, v79, 1, (google::protobuf::internal *)"SnippetUI.SummaryItem_Button.component_name");
    v5 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 9, *((_QWORD *)this + 2), v5);
  }
LABEL_103:
  v80 = (uint64_t *)*((_QWORD *)this + 3);
  if ((*((char *)v80 + 23) & 0x80000000) == 0)
  {
    v81 = (const char *)*((unsigned __int8 *)v80 + 23);
    if (!*((_BYTE *)v80 + 23))
      goto LABEL_109;
    goto LABEL_108;
  }
  v81 = (const char *)v80[1];
  if (v81)
  {
    v80 = (uint64_t *)*v80;
LABEL_108:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String((google::protobuf::internal *)v80, v81, 1, (google::protobuf::internal *)"SnippetUI.SummaryItem_Button.link_identifier");
    v5 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 10, *((_QWORD *)this + 3), v5);
  }
LABEL_109:
  if (this != (SnippetUI::SummaryItem_Button *)&SnippetUI::_SummaryItem_Button_default_instance_)
  {
    v82 = (SnippetUI::TextProperty *)*((_QWORD *)this + 12);
    if (v82)
    {
      if ((unint64_t)v5 >= *(_QWORD *)a3)
      {
        v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
        v82 = (SnippetUI::TextProperty *)*((_QWORD *)this + 12);
      }
      *v5 = 90;
      v83 = *((_DWORD *)v82 + 15);
      if (v83 > 0x7F)
      {
        v5[1] = v83 | 0x80;
        v85 = v83 >> 7;
        if (v83 >> 14)
        {
          v86 = v5 + 2;
          do
          {
            v87 = v86;
            *v86++ = v85 | 0x80;
            v88 = v85 >> 7;
            v89 = v85 >> 14;
            v85 >>= 7;
          }
          while (v89);
          v84 = (google::protobuf::UnknownFieldSet *)(v87 + 2);
          *v86 = v88;
        }
        else
        {
          v5[2] = v85;
          v84 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
        }
      }
      else
      {
        v5[1] = v83;
        v84 = (google::protobuf::UnknownFieldSet *)(v5 + 2);
      }
      v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v82, v84, a3, a4);
    }
  }
  v90 = *((_QWORD *)this + 1);
  if ((v90 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v90 & 0xFFFFFFFFFFFFFFFELL), (const google::protobuf::UnknownFieldSet *)v5, a3, a4);
  else
    return (const google::protobuf::UnknownFieldSet *)v5;
}

void SnippetUI::SummaryItem_Button::CopyFrom(SnippetUI::SummaryItem_Button *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    SnippetUI::SummaryItem_Button::Clear(this);
    SnippetUI::SummaryItem_Button::MergeFrom(this, a2);
  }
}

void SnippetUI::SummaryItem_Button::MergeFrom(SnippetUI::SummaryItem_Button *this, const google::protobuf::Message *lpsrc)
{
  std::string *v4;
  const SnippetUI::SummaryItem_Button *v5;
  google::protobuf::Message *v6;
  char v7;
  std::string v8[2];

  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/SummaryItem.pb.cc", 7164);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5)
    SnippetUI::SummaryItem_Button::MergeFrom(this, v5);
  else
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
}

void sub_1BF929548(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::SummaryItem_Button::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 104) = a2;
  return this;
}

uint64_t SnippetUI::SummaryItem_Button::GetMetadata(SnippetUI::SummaryItem_Button *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_SummaryItem_2eproto);
  return qword_1EF581A00;
}

void InitDefaultsscc_info_SummaryItem_Text_SummaryItem_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/SummaryItem.pb.cc", a4);
  SnippetUI::SummaryItem_Text::SummaryItem_Text((SnippetUI::SummaryItem_Text *)&SnippetUI::_SummaryItem_Text_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_SummaryItem_Text_default_instance_, v4);
  qword_1ED1D5248 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1ED1D5250 = &SnippetUI::_TextProperty_default_instance_;
  qword_1ED1D5268 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1ED1D5270 = &SnippetUI::_TextProperty_default_instance_;
  qword_1ED1D5258 = (uint64_t)&SnippetUI::_MultilineTextProperty_default_instance_;
  unk_1ED1D5260 = &SnippetUI::_ActionProperty_default_instance_;
}

SnippetUI::SummaryItem_Text *SnippetUI::SummaryItem_Text::SummaryItem_Text(SnippetUI::SummaryItem_Text *this)
{
  *(_QWORD *)this = &off_1E792DFF0;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 20) = 0;
  if (atomic_load(scc_info_SummaryItem_Text_SummaryItem_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_SummaryItem_Text_SummaryItem_2eproto);
  *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  return this;
}

void sub_1BF929678(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::SummaryItem_Text::~SummaryItem_Text(SnippetUI::SummaryItem_Text *this)
{
  SnippetUI::SummaryItem_Text::~SummaryItem_Text(this);
  JUMPOUT(0x1C3B8D890);
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)this = &off_1E792DFF0;
  v2 = *((_QWORD *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x1C3B8D890](v2, 0x1012C40EC159624);
  }
  v4 = *((_QWORD *)this + 3);
  if ((uint64_t *)v4 != &google::protobuf::internal::fixed_address_empty_string && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0)
      operator delete(*(void **)v4);
    MEMORY[0x1C3B8D890](v4, 0x1012C40EC159624);
  }
  if (this != (SnippetUI::SummaryItem_Text *)&SnippetUI::_SummaryItem_Text_default_instance_)
  {
    v6 = *((_QWORD *)this + 4);
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    v7 = *((_QWORD *)this + 5);
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    v8 = *((_QWORD *)this + 6);
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    v9 = *((_QWORD *)this + 7);
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    v10 = *((_QWORD *)this + 8);
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    v11 = *((_QWORD *)this + 9);
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

SnippetUI::SummaryItem_Text *SnippetUI::SummaryItem_Text::New(SnippetUI::SummaryItem_Text *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::SummaryItem_Text>(0);
}

SnippetUI::SummaryItem_Text *SnippetUI::SummaryItem_Text::New(SnippetUI::SummaryItem_Text *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::SummaryItem_Text>(a2);
}

void SnippetUI::SummaryItem_Text::Clear(SnippetUI::SummaryItem_Text *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  google::protobuf::internal::InternalMetadataWithArena *v10;
  char v11;

  v2 = *((_QWORD *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(_BYTE **)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v2 = 0;
      *(_BYTE *)(v2 + 23) = 0;
    }
  }
  v3 = *((_QWORD *)this + 3);
  if ((uint64_t *)v3 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v3 + 23) < 0)
    {
      **(_BYTE **)v3 = 0;
      *(_QWORD *)(v3 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v3 = 0;
      *(_BYTE *)(v3 + 23) = 0;
    }
  }
  v4 = *((_QWORD *)this + 4);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  *((_QWORD *)this + 4) = 0;
  v5 = *((_QWORD *)this + 5);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *((_QWORD *)this + 5) = 0;
  v6 = *((_QWORD *)this + 6);
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  *((_QWORD *)this + 6) = 0;
  v7 = *((_QWORD *)this + 7);
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  *((_QWORD *)this + 7) = 0;
  v8 = *((_QWORD *)this + 8);
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  *((_QWORD *)this + 8) = 0;
  v9 = *((_QWORD *)this + 9);
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v11 = *((_BYTE *)this + 8);
  v10 = (SnippetUI::SummaryItem_Text *)((char *)this + 8);
  *((_QWORD *)v10 + 8) = 0;
  if ((v11 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v10);
}

uint64_t SnippetUI::SummaryItem_Text::IsInitialized(SnippetUI::SummaryItem_Text *this)
{
  return 1;
}

char *SnippetUI::SummaryItem_Text::ByteSizeLong(SnippetUI::SummaryItem_Text *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  const google::protobuf::UnknownFieldSet *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  SnippetUI::TextProperty *v9;
  char *v10;
  SnippetUI::TextProperty *v11;
  char *v12;
  SnippetUI::MultilineTextProperty *v13;
  char *v14;
  SnippetUI::ActionProperty *v15;
  char *v16;
  SnippetUI::TextProperty *v17;
  char *v18;
  SnippetUI::TextProperty *v19;
  char *v20;

  v2 = *((_QWORD *)this + 2);
  v3 = *(unsigned __int8 *)(v2 + 23);
  if (*(char *)(v2 + 23) < 0)
  {
    if (*(_QWORD *)(v2 + 8))
      goto LABEL_3;
LABEL_7:
    v5 = 0;
    goto LABEL_8;
  }
  if (!*(_BYTE *)(v2 + 23))
    goto LABEL_7;
LABEL_3:
  v4 = *(_QWORD *)(v2 + 8);
  if ((v3 & 0x80u) == 0)
    v4 = v3;
  v5 = (const google::protobuf::UnknownFieldSet *)(v4 + ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_8:
  v6 = *((_QWORD *)this + 3);
  v7 = *(unsigned __int8 *)(v6 + 23);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(_QWORD *)(v6 + 8))
      goto LABEL_13;
  }
  else if (!*(_BYTE *)(v6 + 23))
  {
    goto LABEL_13;
  }
  v8 = *(_QWORD *)(v6 + 8);
  if ((v7 & 0x80u) == 0)
    v8 = v7;
  v5 = (const google::protobuf::UnknownFieldSet *)((char *)v5 + v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_13:
  if (this != (SnippetUI::SummaryItem_Text *)&SnippetUI::_SummaryItem_Text_default_instance_)
  {
    v9 = (SnippetUI::TextProperty *)*((_QWORD *)this + 4);
    if (v9)
    {
      v10 = SnippetUI::TextProperty::ByteSizeLong(v9);
      v5 = (const google::protobuf::UnknownFieldSet *)&v10[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v11 = (SnippetUI::TextProperty *)*((_QWORD *)this + 5);
    if (v11)
    {
      v12 = SnippetUI::TextProperty::ByteSizeLong(v11);
      v5 = (const google::protobuf::UnknownFieldSet *)&v12[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v12 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v13 = (SnippetUI::MultilineTextProperty *)*((_QWORD *)this + 6);
    if (v13)
    {
      v14 = SnippetUI::MultilineTextProperty::ByteSizeLong(v13);
      v5 = (const google::protobuf::UnknownFieldSet *)&v14[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v14 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v15 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 7);
    if (v15)
    {
      v16 = SnippetUI::ActionProperty::ByteSizeLong(v15);
      v5 = (const google::protobuf::UnknownFieldSet *)&v16[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v16 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v17 = (SnippetUI::TextProperty *)*((_QWORD *)this + 8);
    if (v17)
    {
      v18 = SnippetUI::TextProperty::ByteSizeLong(v17);
      v5 = (const google::protobuf::UnknownFieldSet *)&v18[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v18 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v19 = (SnippetUI::TextProperty *)*((_QWORD *)this + 9);
    if (v19)
    {
      v20 = SnippetUI::TextProperty::ByteSizeLong(v19);
      v5 = (const google::protobuf::UnknownFieldSet *)&v20[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v20 | 1) ^ 0x1F) + 73) >> 6)];
    }
  }
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::SummaryItem_Text *)((char *)this + 8), v5, (_DWORD *)this + 20);
  *((_DWORD *)this + 20) = (_DWORD)v5;
  return (char *)v5;
}

uint64_t SnippetUI::SummaryItem_Text::GetCachedSize(SnippetUI::SummaryItem_Text *this)
{
  return *((unsigned int *)this + 20);
}

google::protobuf::internal *SnippetUI::SummaryItem_Text::_InternalParse(SnippetUI::SummaryItem_Text *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  std::string **v5;
  std::string **v6;
  uint64_t *v7;
  google::protobuf::internal::ParseContext *v8;
  google::protobuf::internal *TagFallback;
  char *v10;
  SnippetUI::TextProperty *v11;
  SnippetUI::MultilineTextProperty *v12;
  char *v13;
  SnippetUI::ActionProperty *v14;
  std::string *v15;
  std::string::value_type *v16;
  google::protobuf::internal::ParseContext *v17;
  char *v18;
  BOOL v19;
  google::protobuf::internal *v21;

  v21 = a2;
  v5 = (std::string **)((char *)this + 24);
  v6 = (std::string **)((char *)this + 16);
  v7 = (uint64_t *)((char *)this + 8);
  while (2)
  {
    if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v21, *((_DWORD *)a3 + 23)) & 1) != 0)
      return v21;
    TagFallback = (google::protobuf::internal *)((char *)v21 + 1);
    v10 = (char *)*(unsigned __int8 *)v21;
    if ((*(char *)v21 & 0x80000000) == 0)
      goto LABEL_6;
    v10 = (char *)(v10 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v21 + 2);
LABEL_6:
      v21 = TagFallback;
      goto LABEL_7;
    }
    TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v21, v10);
    v21 = TagFallback;
    if (!TagFallback)
      return TagFallback;
LABEL_7:
    switch(v10 >> 3)
    {
      case 1u:
        if (v10 != 10)
          goto LABEL_41;
        v11 = (SnippetUI::TextProperty *)*((_QWORD *)this + 4);
        if (v11)
          goto LABEL_35;
        v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 4) = v11;
        goto LABEL_34;
      case 2u:
        if (v10 != 18)
          goto LABEL_41;
        v11 = (SnippetUI::TextProperty *)*((_QWORD *)this + 5);
        if (v11)
          goto LABEL_35;
        v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 5) = v11;
        goto LABEL_34;
      case 3u:
        if (v10 != 26)
          goto LABEL_41;
        v12 = (SnippetUI::MultilineTextProperty *)*((_QWORD *)this + 6);
        if (!v12)
        {
          v12 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::MultilineTextProperty>(0);
          *((_QWORD *)this + 6) = v12;
          TagFallback = v21;
        }
        v13 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::MultilineTextProperty>(a3, v12, TagFallback);
        goto LABEL_46;
      case 4u:
        if (v10 != 34)
          goto LABEL_41;
        v14 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 7);
        if (!v14)
        {
          v14 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
          *((_QWORD *)this + 7) = v14;
          TagFallback = v21;
        }
        v13 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::ActionProperty>(a3, v14, TagFallback);
        goto LABEL_46;
      case 5u:
        if (v10 != 42)
          goto LABEL_41;
        v15 = *v6;
        if (*v6 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v6, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v15 = *v6;
          TagFallback = v21;
        }
        v16 = (std::string::value_type *)TagFallback;
        v17 = a3;
        v18 = "SnippetUI.SummaryItem_Text.component_name";
        goto LABEL_40;
      case 6u:
        if (v10 != 50)
          goto LABEL_41;
        v11 = (SnippetUI::TextProperty *)*((_QWORD *)this + 8);
        if (v11)
          goto LABEL_35;
        v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 8) = v11;
        goto LABEL_34;
      case 7u:
        if (v10 != 58)
          goto LABEL_41;
        v11 = (SnippetUI::TextProperty *)*((_QWORD *)this + 9);
        if (v11)
          goto LABEL_35;
        v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 9) = v11;
LABEL_34:
        TagFallback = v21;
LABEL_35:
        v13 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::TextProperty>(a3, v11, TagFallback);
        goto LABEL_46;
      case 8u:
        if (v10 != 66)
          goto LABEL_41;
        v15 = *v5;
        if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v15 = *v5;
          TagFallback = v21;
        }
        v16 = (std::string::value_type *)TagFallback;
        v17 = a3;
        v18 = "SnippetUI.SummaryItem_Text.link_identifier";
LABEL_40:
        v13 = google::protobuf::internal::InlineGreedyStringParserUTF8(v15, v16, (uint64_t)v17, (google::protobuf::internal *)v18);
        goto LABEL_46;
      default:
LABEL_41:
        if ((_DWORD)v10)
          v19 = (v10 & 7) == 4;
        else
          v19 = 1;
        if (v19)
        {
          *((_DWORD *)a3 + 20) = (_DWORD)v10 - 1;
          return TagFallback;
        }
        v13 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v10, v7, TagFallback, a3, v8);
LABEL_46:
        v21 = (google::protobuf::internal *)v13;
        if (v13)
          continue;
        TagFallback = 0;
        break;
    }
    return TagFallback;
  }
}

const google::protobuf::UnknownFieldSet *SnippetUI::SummaryItem_Text::InternalSerializeWithCachedSizesToArray(SnippetUI::SummaryItem_Text *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  char *v5;
  SnippetUI::TextProperty *v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  google::protobuf::UnknownFieldSet *v11;
  _BYTE *v12;
  _BYTE *v13;
  unsigned int v14;
  unsigned int v15;
  SnippetUI::TextProperty *v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  google::protobuf::UnknownFieldSet *v20;
  _BYTE *v21;
  _BYTE *v22;
  unsigned int v23;
  unsigned int v24;
  SnippetUI::MultilineTextProperty *v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  google::protobuf::UnknownFieldSet *v29;
  _BYTE *v30;
  _BYTE *v31;
  unsigned int v32;
  unsigned int v33;
  SnippetUI::ActionProperty *v34;
  unsigned int v35;
  google::protobuf::UnknownFieldSet *v36;
  unsigned int v37;
  _BYTE *v38;
  _BYTE *v39;
  unsigned int v40;
  unsigned int v41;
  google::protobuf::internal *v42;
  const char *v43;
  SnippetUI::TextProperty *v44;
  unsigned int v45;
  uint64_t v46;
  unsigned int v47;
  google::protobuf::UnknownFieldSet *v48;
  _BYTE *v49;
  _BYTE *v50;
  unsigned int v51;
  unsigned int v52;
  SnippetUI::TextProperty *v53;
  unsigned int v54;
  google::protobuf::UnknownFieldSet *v55;
  unsigned int v56;
  _BYTE *v57;
  _BYTE *v58;
  unsigned int v59;
  unsigned int v60;
  google::protobuf::internal *v61;
  const char *v62;
  uint64_t v63;

  v5 = (char *)a2;
  if (this == (SnippetUI::SummaryItem_Text *)&SnippetUI::_SummaryItem_Text_default_instance_)
    goto LABEL_49;
  v7 = (SnippetUI::TextProperty *)*((_QWORD *)this + 4);
  if (v7)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
    {
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      v7 = (SnippetUI::TextProperty *)*((_QWORD *)this + 4);
    }
    *v5 = 10;
    v8 = *((_DWORD *)v7 + 15);
    if (v8 > 0x7F)
    {
      v5[1] = v8 | 0x80;
      v10 = v8 >> 7;
      if (v8 >> 14)
      {
        v12 = v5 + 2;
        do
        {
          v13 = v12;
          *v12++ = v10 | 0x80;
          v14 = v10 >> 7;
          v15 = v10 >> 14;
          v10 >>= 7;
        }
        while (v15);
        v11 = (google::protobuf::UnknownFieldSet *)(v13 + 2);
        *v12 = v14;
        goto LABEL_13;
      }
      v5[2] = v10;
      v9 = 3;
    }
    else
    {
      v5[1] = v8;
      v9 = 2;
    }
    v11 = (google::protobuf::UnknownFieldSet *)&v5[v9];
LABEL_13:
    v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v7, v11, a3, a4);
  }
  v16 = (SnippetUI::TextProperty *)*((_QWORD *)this + 5);
  if (!v16)
    goto LABEL_26;
  if ((unint64_t)v5 >= *(_QWORD *)a3)
  {
    v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v16 = (SnippetUI::TextProperty *)*((_QWORD *)this + 5);
  }
  *v5 = 18;
  v17 = *((_DWORD *)v16 + 15);
  if (v17 > 0x7F)
  {
    v5[1] = v17 | 0x80;
    v19 = v17 >> 7;
    if (v17 >> 14)
    {
      v21 = v5 + 2;
      do
      {
        v22 = v21;
        *v21++ = v19 | 0x80;
        v23 = v19 >> 7;
        v24 = v19 >> 14;
        v19 >>= 7;
      }
      while (v24);
      v20 = (google::protobuf::UnknownFieldSet *)(v22 + 2);
      *v21 = v23;
      goto LABEL_25;
    }
    v5[2] = v19;
    v18 = 3;
  }
  else
  {
    v5[1] = v17;
    v18 = 2;
  }
  v20 = (google::protobuf::UnknownFieldSet *)&v5[v18];
LABEL_25:
  v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v16, v20, a3, a4);
LABEL_26:
  v25 = (SnippetUI::MultilineTextProperty *)*((_QWORD *)this + 6);
  if (!v25)
    goto LABEL_38;
  if ((unint64_t)v5 >= *(_QWORD *)a3)
  {
    v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v25 = (SnippetUI::MultilineTextProperty *)*((_QWORD *)this + 6);
  }
  *v5 = 26;
  v26 = *((_DWORD *)v25 + 15);
  if (v26 > 0x7F)
  {
    v5[1] = v26 | 0x80;
    v28 = v26 >> 7;
    if (v26 >> 14)
    {
      v30 = v5 + 2;
      do
      {
        v31 = v30;
        *v30++ = v28 | 0x80;
        v32 = v28 >> 7;
        v33 = v28 >> 14;
        v28 >>= 7;
      }
      while (v33);
      v29 = (google::protobuf::UnknownFieldSet *)(v31 + 2);
      *v30 = v32;
      goto LABEL_37;
    }
    v5[2] = v28;
    v27 = 3;
  }
  else
  {
    v5[1] = v26;
    v27 = 2;
  }
  v29 = (google::protobuf::UnknownFieldSet *)&v5[v27];
LABEL_37:
  v5 = (char *)SnippetUI::MultilineTextProperty::InternalSerializeWithCachedSizesToArray(v25, v29, a3, a4);
LABEL_38:
  v34 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 7);
  if (v34)
  {
    if ((unint64_t)v5 >= *(_QWORD *)a3)
    {
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
      v34 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 7);
    }
    *v5 = 34;
    v35 = *((_DWORD *)v34 + 12);
    if (v35 > 0x7F)
    {
      v5[1] = v35 | 0x80;
      v37 = v35 >> 7;
      if (v35 >> 14)
      {
        v38 = v5 + 2;
        do
        {
          v39 = v38;
          *v38++ = v37 | 0x80;
          v40 = v37 >> 7;
          v41 = v37 >> 14;
          v37 >>= 7;
        }
        while (v41);
        v36 = (google::protobuf::UnknownFieldSet *)(v39 + 2);
        *v38 = v40;
      }
      else
      {
        v5[2] = v37;
        v36 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
      }
    }
    else
    {
      v5[1] = v35;
      v36 = (google::protobuf::UnknownFieldSet *)(v5 + 2);
    }
    v5 = (char *)SnippetUI::ActionProperty::InternalSerializeWithCachedSizesToArray(v34, v36, a3, a4);
  }
LABEL_49:
  v42 = (google::protobuf::internal *)*((_QWORD *)this + 2);
  if (*((char *)v42 + 23) < 0)
  {
    v43 = (const char *)*((_QWORD *)v42 + 1);
    if (!v43)
      goto LABEL_55;
    v42 = *(google::protobuf::internal **)v42;
    goto LABEL_54;
  }
  v43 = (const char *)*((unsigned __int8 *)v42 + 23);
  if (*((_BYTE *)v42 + 23))
  {
LABEL_54:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v42, v43, 1, (google::protobuf::internal *)"SnippetUI.SummaryItem_Text.component_name");
    v5 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 5, *((_QWORD *)this + 2), v5);
  }
LABEL_55:
  if (this == (SnippetUI::SummaryItem_Text *)&SnippetUI::_SummaryItem_Text_default_instance_)
    goto LABEL_79;
  v44 = (SnippetUI::TextProperty *)*((_QWORD *)this + 8);
  if (v44)
  {
    if ((unint64_t)v5 >= *(_QWORD *)a3)
    {
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
      v44 = (SnippetUI::TextProperty *)*((_QWORD *)this + 8);
    }
    *v5 = 50;
    v45 = *((_DWORD *)v44 + 15);
    if (v45 > 0x7F)
    {
      v5[1] = v45 | 0x80;
      v47 = v45 >> 7;
      if (v45 >> 14)
      {
        v49 = v5 + 2;
        do
        {
          v50 = v49;
          *v49++ = v47 | 0x80;
          v51 = v47 >> 7;
          v52 = v47 >> 14;
          v47 >>= 7;
        }
        while (v52);
        v48 = (google::protobuf::UnknownFieldSet *)(v50 + 2);
        *v49 = v51;
        goto LABEL_67;
      }
      v5[2] = v47;
      v46 = 3;
    }
    else
    {
      v5[1] = v45;
      v46 = 2;
    }
    v48 = (google::protobuf::UnknownFieldSet *)&v5[v46];
LABEL_67:
    v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v44, v48, a3, a4);
  }
  v53 = (SnippetUI::TextProperty *)*((_QWORD *)this + 9);
  if (v53)
  {
    if ((unint64_t)v5 >= *(_QWORD *)a3)
    {
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
      v53 = (SnippetUI::TextProperty *)*((_QWORD *)this + 9);
    }
    *v5 = 58;
    v54 = *((_DWORD *)v53 + 15);
    if (v54 > 0x7F)
    {
      v5[1] = v54 | 0x80;
      v56 = v54 >> 7;
      if (v54 >> 14)
      {
        v57 = v5 + 2;
        do
        {
          v58 = v57;
          *v57++ = v56 | 0x80;
          v59 = v56 >> 7;
          v60 = v56 >> 14;
          v56 >>= 7;
        }
        while (v60);
        v55 = (google::protobuf::UnknownFieldSet *)(v58 + 2);
        *v57 = v59;
      }
      else
      {
        v5[2] = v56;
        v55 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
      }
    }
    else
    {
      v5[1] = v54;
      v55 = (google::protobuf::UnknownFieldSet *)(v5 + 2);
    }
    v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v53, v55, a3, a4);
  }
LABEL_79:
  v61 = (google::protobuf::internal *)*((_QWORD *)this + 3);
  if (*((char *)v61 + 23) < 0)
  {
    v62 = (const char *)*((_QWORD *)v61 + 1);
    if (!v62)
      goto LABEL_85;
    v61 = *(google::protobuf::internal **)v61;
    goto LABEL_84;
  }
  v62 = (const char *)*((unsigned __int8 *)v61 + 23);
  if (*((_BYTE *)v61 + 23))
  {
LABEL_84:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v61, v62, 1, (google::protobuf::internal *)"SnippetUI.SummaryItem_Text.link_identifier");
    v5 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 8, *((_QWORD *)this + 3), v5);
  }
LABEL_85:
  v63 = *((_QWORD *)this + 1);
  if ((v63 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v63 & 0xFFFFFFFFFFFFFFFELL), (const google::protobuf::UnknownFieldSet *)v5, a3, a4);
  else
    return (const google::protobuf::UnknownFieldSet *)v5;
}

void SnippetUI::SummaryItem_Text::CopyFrom(SnippetUI::SummaryItem_Text *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    SnippetUI::SummaryItem_Text::Clear(this);
    SnippetUI::SummaryItem_Text::MergeFrom(this, a2);
  }
}

void SnippetUI::SummaryItem_Text::MergeFrom(SnippetUI::SummaryItem_Text *this, const google::protobuf::Message *lpsrc)
{
  std::string *v4;
  const SnippetUI::SummaryItem_Text *v5;
  google::protobuf::Message *v6;
  char v7;
  std::string v8[2];

  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/SummaryItem.pb.cc", 2381);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5)
    SnippetUI::SummaryItem_Text::MergeFrom(this, v5);
  else
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
}

void sub_1BF92A298(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::SummaryItem_Text::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 80) = a2;
  return this;
}

uint64_t SnippetUI::SummaryItem_Text::GetMetadata(SnippetUI::SummaryItem_Text *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_SummaryItem_2eproto);
  return qword_1EF581990;
}

void *SnippetUI::SummaryItem_Text::default_instance(SnippetUI::SummaryItem_Text *this)
{
  if (atomic_load(scc_info_SummaryItem_Text_SummaryItem_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_SummaryItem_Text_SummaryItem_2eproto);
  return &SnippetUI::_SummaryItem_Text_default_instance_;
}

void SnippetUI::SummaryItem_Text::MergeFrom(SnippetUI::SummaryItem_Text *this, const SnippetUI::SummaryItem_Text *a2)
{
  std::string *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  int **v10;
  int **v11;
  int **v12;
  int **v13;
  int **v14;
  int **v15;
  int **v16;
  int **v17;
  int **v18;
  int **v19;
  int **v20;
  int **v21;
  int **v22;
  int **v23;
  int **v24;
  int **v25;
  int **v26;
  int **v27;
  char v28;
  std::string v29[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v29, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/SummaryItem.pb.cc", 2396);
    v4 = google::protobuf::internal::LogMessage::operator<<(v29, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v28, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v29[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::SummaryItem_Text *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  v6 = *((_QWORD *)a2 + 2);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(_QWORD *)(v6 + 8))
      goto LABEL_13;
  }
  else if (!*(_BYTE *)(v6 + 23))
  {
    goto LABEL_13;
  }
  v7 = (uint64_t *)*((_QWORD *)this + 2);
  if (v7 != (uint64_t *)v6)
  {
    if (v7 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, v6);
    else
      std::string::operator=(*((std::string **)this + 2), (const std::string *)v6);
  }
LABEL_13:
  v8 = *((_QWORD *)a2 + 3);
  if (*(char *)(v8 + 23) < 0)
  {
    if (!*(_QWORD *)(v8 + 8))
      goto LABEL_21;
  }
  else if (!*(_BYTE *)(v8 + 23))
  {
    goto LABEL_21;
  }
  v9 = (uint64_t *)*((_QWORD *)this + 3);
  if (v9 != (uint64_t *)v8)
  {
    if (v9 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 3, v8);
    else
      std::string::operator=(*((std::string **)this + 3), (const std::string *)v8);
  }
LABEL_21:
  if (a2 != (const SnippetUI::SummaryItem_Text *)&SnippetUI::_SummaryItem_Text_default_instance_)
  {
    v10 = (int **)*((_QWORD *)a2 + 4);
    if (v10)
    {
      v11 = (int **)*((_QWORD *)this + 4);
      if (!v11)
      {
        v11 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 4) = v11;
        v10 = (int **)*((_QWORD *)a2 + 4);
      }
      if (v10)
        v12 = v10;
      else
        v12 = (int **)&SnippetUI::_TextProperty_default_instance_;
      SnippetUI::TextProperty::MergeFrom(v11, v12);
    }
    v13 = (int **)*((_QWORD *)a2 + 5);
    if (v13)
    {
      v14 = (int **)*((_QWORD *)this + 5);
      if (!v14)
      {
        v14 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 5) = v14;
        v13 = (int **)*((_QWORD *)a2 + 5);
      }
      if (v13)
        v15 = v13;
      else
        v15 = (int **)&SnippetUI::_TextProperty_default_instance_;
      SnippetUI::TextProperty::MergeFrom(v14, v15);
    }
    v16 = (int **)*((_QWORD *)a2 + 6);
    if (v16)
    {
      v17 = (int **)*((_QWORD *)this + 6);
      if (!v17)
      {
        v17 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::MultilineTextProperty>(0);
        *((_QWORD *)this + 6) = v17;
        v16 = (int **)*((_QWORD *)a2 + 6);
      }
      if (v16)
        v18 = v16;
      else
        v18 = (int **)&SnippetUI::_MultilineTextProperty_default_instance_;
      SnippetUI::MultilineTextProperty::MergeFrom(v17, v18);
    }
    v19 = (int **)*((_QWORD *)a2 + 7);
    if (v19)
    {
      v20 = (int **)*((_QWORD *)this + 7);
      if (!v20)
      {
        v20 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
        *((_QWORD *)this + 7) = v20;
        v19 = (int **)*((_QWORD *)a2 + 7);
      }
      if (v19)
        v21 = v19;
      else
        v21 = (int **)&SnippetUI::_ActionProperty_default_instance_;
      SnippetUI::ActionProperty::MergeFrom(v20, v21);
    }
    v22 = (int **)*((_QWORD *)a2 + 8);
    if (v22)
    {
      v23 = (int **)*((_QWORD *)this + 8);
      if (!v23)
      {
        v23 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 8) = v23;
        v22 = (int **)*((_QWORD *)a2 + 8);
      }
      if (v22)
        v24 = v22;
      else
        v24 = (int **)&SnippetUI::_TextProperty_default_instance_;
      SnippetUI::TextProperty::MergeFrom(v23, v24);
    }
    v25 = (int **)*((_QWORD *)a2 + 9);
    if (v25)
    {
      v26 = (int **)*((_QWORD *)this + 9);
      if (!v26)
      {
        v26 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 9) = v26;
        v25 = (int **)*((_QWORD *)a2 + 9);
      }
      if (v25)
        v27 = v25;
      else
        v27 = (int **)&SnippetUI::_TextProperty_default_instance_;
      SnippetUI::TextProperty::MergeFrom(v26, v27);
    }
  }
}

void sub_1BF92A558(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

SnippetUI::SummaryItem_Text *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::SummaryItem_Text>(google::protobuf::internal::ArenaImpl *this)
{
  SnippetUI::SummaryItem_Text *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (SnippetUI::SummaryItem_Text *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x58uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::SummaryItem_Text>);
    SnippetUI::SummaryItem_Text::SummaryItem_Text(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (SnippetUI::SummaryItem_Text *)operator new();
    SnippetUI::SummaryItem_Text::SummaryItem_Text(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_1BF92A5F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D890](v1, 0x10A1C401DBA19FDLL);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::SummaryItem_Text>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

void InitDefaultsscc_info_SummaryItem_SwitchV2_SummaryItem_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/SummaryItem.pb.cc", a4);
  SnippetUI::SummaryItem_SwitchV2::SummaryItem_SwitchV2((SnippetUI::SummaryItem_SwitchV2 *)&SnippetUI::_SummaryItem_SwitchV2_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_SummaryItem_SwitchV2_default_instance_, v4);
  qword_1EF584568 = (uint64_t)&SnippetUI::_Switch_default_instance_;
  unk_1EF584570 = &SnippetUI::_TextProperty_default_instance_;
  qword_1EF584578 = (uint64_t)&SnippetUI::_MultilineTextProperty_default_instance_;
  unk_1EF584580 = &SnippetUI::_MultilineTextProperty_default_instance_;
  qword_1EF584590 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1EF584598 = &SnippetUI::_VisualProperty_default_instance_;
  qword_1EF584588 = (uint64_t)&SnippetUI::_ActionProperty_default_instance_;
}

SnippetUI::SummaryItem_SwitchV2 *SnippetUI::SummaryItem_SwitchV2::SummaryItem_SwitchV2(SnippetUI::SummaryItem_SwitchV2 *this)
{
  *(_QWORD *)this = &off_1E792E770;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 22) = 0;
  if (atomic_load(scc_info_SummaryItem_SwitchV2_SummaryItem_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_SummaryItem_SwitchV2_SummaryItem_2eproto);
  *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_QWORD *)this + 10) = 0;
  return this;
}

void sub_1BF92A860(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::SummaryItem_SwitchV2::~SummaryItem_SwitchV2(SnippetUI::SummaryItem_SwitchV2 *this)
{
  SnippetUI::SummaryItem_SwitchV2::~SummaryItem_SwitchV2(this);
  JUMPOUT(0x1C3B8D890);
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)this = &off_1E792E770;
  v2 = *((_QWORD *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x1C3B8D890](v2, 0x1012C40EC159624);
  }
  v4 = *((_QWORD *)this + 3);
  if ((uint64_t *)v4 != &google::protobuf::internal::fixed_address_empty_string && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0)
      operator delete(*(void **)v4);
    MEMORY[0x1C3B8D890](v4, 0x1012C40EC159624);
  }
  if (this != (SnippetUI::SummaryItem_SwitchV2 *)&SnippetUI::_SummaryItem_SwitchV2_default_instance_)
  {
    v6 = *((_QWORD *)this + 4);
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    v7 = *((_QWORD *)this + 5);
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    v8 = *((_QWORD *)this + 6);
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    v9 = *((_QWORD *)this + 7);
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    v10 = *((_QWORD *)this + 8);
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    v11 = *((_QWORD *)this + 9);
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = *((_QWORD *)this + 10);
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

SnippetUI::SummaryItem_SwitchV2 *SnippetUI::SummaryItem_SwitchV2::New(SnippetUI::SummaryItem_SwitchV2 *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::SummaryItem_SwitchV2>(0);
}

SnippetUI::SummaryItem_SwitchV2 *SnippetUI::SummaryItem_SwitchV2::New(SnippetUI::SummaryItem_SwitchV2 *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::SummaryItem_SwitchV2>(a2);
}

void SnippetUI::SummaryItem_SwitchV2::Clear(SnippetUI::SummaryItem_SwitchV2 *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  google::protobuf::internal::InternalMetadataWithArena *v11;
  char v12;

  v2 = *((_QWORD *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(_BYTE **)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v2 = 0;
      *(_BYTE *)(v2 + 23) = 0;
    }
  }
  v3 = *((_QWORD *)this + 3);
  if ((uint64_t *)v3 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v3 + 23) < 0)
    {
      **(_BYTE **)v3 = 0;
      *(_QWORD *)(v3 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v3 = 0;
      *(_BYTE *)(v3 + 23) = 0;
    }
  }
  v4 = *((_QWORD *)this + 4);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  *((_QWORD *)this + 4) = 0;
  v5 = *((_QWORD *)this + 5);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *((_QWORD *)this + 5) = 0;
  v6 = *((_QWORD *)this + 6);
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  *((_QWORD *)this + 6) = 0;
  v7 = *((_QWORD *)this + 7);
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  *((_QWORD *)this + 7) = 0;
  v8 = *((_QWORD *)this + 8);
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  *((_QWORD *)this + 8) = 0;
  v9 = *((_QWORD *)this + 9);
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  *((_QWORD *)this + 9) = 0;
  v10 = *((_QWORD *)this + 10);
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  v12 = *((_BYTE *)this + 8);
  v11 = (SnippetUI::SummaryItem_SwitchV2 *)((char *)this + 8);
  *((_QWORD *)v11 + 9) = 0;
  if ((v12 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v11);
}

uint64_t SnippetUI::SummaryItem_SwitchV2::IsInitialized(SnippetUI::SummaryItem_SwitchV2 *this)
{
  return 1;
}

char *SnippetUI::SummaryItem_SwitchV2::ByteSizeLong(SnippetUI::SummaryItem_SwitchV2 *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  const google::protobuf::UnknownFieldSet *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  SnippetUI::Switch *v9;
  char *v10;
  SnippetUI::TextProperty *v11;
  char *v12;
  SnippetUI::MultilineTextProperty *v13;
  char *v14;
  SnippetUI::MultilineTextProperty *v15;
  char *v16;
  SnippetUI::ActionProperty *v17;
  char *v18;
  SnippetUI::TextProperty *v19;
  char *v20;
  SnippetUI::VisualProperty *v21;
  char *v22;

  v2 = *((_QWORD *)this + 2);
  v3 = *(unsigned __int8 *)(v2 + 23);
  if (*(char *)(v2 + 23) < 0)
  {
    if (*(_QWORD *)(v2 + 8))
      goto LABEL_3;
LABEL_7:
    v5 = 0;
    goto LABEL_8;
  }
  if (!*(_BYTE *)(v2 + 23))
    goto LABEL_7;
LABEL_3:
  v4 = *(_QWORD *)(v2 + 8);
  if ((v3 & 0x80u) == 0)
    v4 = v3;
  v5 = (const google::protobuf::UnknownFieldSet *)(v4 + ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_8:
  v6 = *((_QWORD *)this + 3);
  v7 = *(unsigned __int8 *)(v6 + 23);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(_QWORD *)(v6 + 8))
      goto LABEL_13;
  }
  else if (!*(_BYTE *)(v6 + 23))
  {
    goto LABEL_13;
  }
  v8 = *(_QWORD *)(v6 + 8);
  if ((v7 & 0x80u) == 0)
    v8 = v7;
  v5 = (const google::protobuf::UnknownFieldSet *)((char *)v5 + v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_13:
  if (this != (SnippetUI::SummaryItem_SwitchV2 *)&SnippetUI::_SummaryItem_SwitchV2_default_instance_)
  {
    v9 = (SnippetUI::Switch *)*((_QWORD *)this + 4);
    if (v9)
    {
      v10 = SnippetUI::Switch::ByteSizeLong(v9);
      v5 = (const google::protobuf::UnknownFieldSet *)&v10[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v11 = (SnippetUI::TextProperty *)*((_QWORD *)this + 5);
    if (v11)
    {
      v12 = SnippetUI::TextProperty::ByteSizeLong(v11);
      v5 = (const google::protobuf::UnknownFieldSet *)&v12[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v12 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v13 = (SnippetUI::MultilineTextProperty *)*((_QWORD *)this + 6);
    if (v13)
    {
      v14 = SnippetUI::MultilineTextProperty::ByteSizeLong(v13);
      v5 = (const google::protobuf::UnknownFieldSet *)&v14[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v14 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v15 = (SnippetUI::MultilineTextProperty *)*((_QWORD *)this + 7);
    if (v15)
    {
      v16 = SnippetUI::MultilineTextProperty::ByteSizeLong(v15);
      v5 = (const google::protobuf::UnknownFieldSet *)&v16[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v16 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v17 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 8);
    if (v17)
    {
      v18 = SnippetUI::ActionProperty::ByteSizeLong(v17);
      v5 = (const google::protobuf::UnknownFieldSet *)&v18[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v18 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v19 = (SnippetUI::TextProperty *)*((_QWORD *)this + 9);
    if (v19)
    {
      v20 = SnippetUI::TextProperty::ByteSizeLong(v19);
      v5 = (const google::protobuf::UnknownFieldSet *)&v20[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v20 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v21 = (SnippetUI::VisualProperty *)*((_QWORD *)this + 10);
    if (v21)
    {
      v22 = SnippetUI::VisualProperty::ByteSizeLong(v21);
      v5 = (const google::protobuf::UnknownFieldSet *)&v22[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v22 | 1) ^ 0x1F) + 73) >> 6)];
    }
  }
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::SummaryItem_SwitchV2 *)((char *)this + 8), v5, (_DWORD *)this + 22);
  *((_DWORD *)this + 22) = (_DWORD)v5;
  return (char *)v5;
}

uint64_t SnippetUI::SummaryItem_SwitchV2::GetCachedSize(SnippetUI::SummaryItem_SwitchV2 *this)
{
  return *((unsigned int *)this + 22);
}

google::protobuf::internal *SnippetUI::SummaryItem_SwitchV2::_InternalParse(SnippetUI::SummaryItem_SwitchV2 *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  std::string **v5;
  std::string **v6;
  uint64_t *v7;
  google::protobuf::internal::ParseContext *v8;
  google::protobuf::internal *TagFallback;
  char *v10;
  SnippetUI::Switch *v11;
  char *v12;
  SnippetUI::TextProperty *v13;
  SnippetUI::MultilineTextProperty *v14;
  SnippetUI::ActionProperty *v15;
  std::string *v16;
  std::string::value_type *v17;
  google::protobuf::internal::ParseContext *v18;
  char *v19;
  SnippetUI::VisualProperty *v20;
  BOOL v21;
  google::protobuf::internal *v23;

  v23 = a2;
  v5 = (std::string **)((char *)this + 24);
  v6 = (std::string **)((char *)this + 16);
  v7 = (uint64_t *)((char *)this + 8);
  while (2)
  {
    if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v23, *((_DWORD *)a3 + 23)) & 1) != 0)
      return v23;
    TagFallback = (google::protobuf::internal *)((char *)v23 + 1);
    v10 = (char *)*(unsigned __int8 *)v23;
    if ((*(char *)v23 & 0x80000000) == 0)
      goto LABEL_6;
    v10 = (char *)(v10 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v23 + 2);
LABEL_6:
      v23 = TagFallback;
      goto LABEL_7;
    }
    TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v23, v10);
    v23 = TagFallback;
    if (!TagFallback)
      return TagFallback;
LABEL_7:
    switch(v10 >> 3)
    {
      case 1u:
        if (v10 != 10)
          goto LABEL_47;
        v11 = (SnippetUI::Switch *)*((_QWORD *)this + 4);
        if (!v11)
        {
          v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Switch>(0);
          *((_QWORD *)this + 4) = v11;
          TagFallback = v23;
        }
        v12 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::Switch>(a3, v11, TagFallback);
        goto LABEL_52;
      case 2u:
        if (v10 != 18)
          goto LABEL_47;
        v13 = (SnippetUI::TextProperty *)*((_QWORD *)this + 5);
        if (v13)
          goto LABEL_42;
        v13 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 5) = v13;
        goto LABEL_41;
      case 3u:
        if (v10 != 26)
          goto LABEL_47;
        v14 = (SnippetUI::MultilineTextProperty *)*((_QWORD *)this + 6);
        if (v14)
          goto LABEL_24;
        v14 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::MultilineTextProperty>(0);
        *((_QWORD *)this + 6) = v14;
        goto LABEL_23;
      case 4u:
        if (v10 != 34)
          goto LABEL_47;
        v14 = (SnippetUI::MultilineTextProperty *)*((_QWORD *)this + 7);
        if (v14)
          goto LABEL_24;
        v14 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::MultilineTextProperty>(0);
        *((_QWORD *)this + 7) = v14;
LABEL_23:
        TagFallback = v23;
LABEL_24:
        v12 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::MultilineTextProperty>(a3, v14, TagFallback);
        goto LABEL_52;
      case 5u:
        if (v10 != 42)
          goto LABEL_47;
        v15 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 8);
        if (!v15)
        {
          v15 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
          *((_QWORD *)this + 8) = v15;
          TagFallback = v23;
        }
        v12 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::ActionProperty>(a3, v15, TagFallback);
        goto LABEL_52;
      case 6u:
        if (v10 != 50)
          goto LABEL_47;
        v16 = *v6;
        if (*v6 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v6, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v16 = *v6;
          TagFallback = v23;
        }
        v17 = (std::string::value_type *)TagFallback;
        v18 = a3;
        v19 = "SnippetUI.SummaryItem_SwitchV2.component_name";
        goto LABEL_37;
      case 7u:
        if (v10 != 58)
          goto LABEL_47;
        v16 = *v5;
        if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v16 = *v5;
          TagFallback = v23;
        }
        v17 = (std::string::value_type *)TagFallback;
        v18 = a3;
        v19 = "SnippetUI.SummaryItem_SwitchV2.link_identifier";
LABEL_37:
        v12 = google::protobuf::internal::InlineGreedyStringParserUTF8(v16, v17, (uint64_t)v18, (google::protobuf::internal *)v19);
        goto LABEL_52;
      case 8u:
        if (v10 != 66)
          goto LABEL_47;
        v13 = (SnippetUI::TextProperty *)*((_QWORD *)this + 9);
        if (!v13)
        {
          v13 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
          *((_QWORD *)this + 9) = v13;
LABEL_41:
          TagFallback = v23;
        }
LABEL_42:
        v12 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::TextProperty>(a3, v13, TagFallback);
        goto LABEL_52;
      case 9u:
        if (v10 != 74)
          goto LABEL_47;
        v20 = (SnippetUI::VisualProperty *)*((_QWORD *)this + 10);
        if (!v20)
        {
          v20 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::VisualProperty>(0);
          *((_QWORD *)this + 10) = v20;
          TagFallback = v23;
        }
        v12 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::VisualProperty>(a3, v20, TagFallback);
        goto LABEL_52;
      default:
LABEL_47:
        if ((_DWORD)v10)
          v21 = (v10 & 7) == 4;
        else
          v21 = 1;
        if (v21)
        {
          *((_DWORD *)a3 + 20) = (_DWORD)v10 - 1;
          return TagFallback;
        }
        v12 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v10, v7, TagFallback, a3, v8);
LABEL_52:
        v23 = (google::protobuf::internal *)v12;
        if (v12)
          continue;
        TagFallback = 0;
        break;
    }
    return TagFallback;
  }
}

const google::protobuf::UnknownFieldSet *SnippetUI::SummaryItem_SwitchV2::InternalSerializeWithCachedSizesToArray(SnippetUI::SummaryItem_SwitchV2 *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  char *v5;
  SnippetUI::Switch *v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  char *v11;
  _BYTE *v12;
  _BYTE *v13;
  unsigned int v14;
  unsigned int v15;
  SnippetUI::TextProperty *v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  google::protobuf::UnknownFieldSet *v20;
  _BYTE *v21;
  _BYTE *v22;
  unsigned int v23;
  unsigned int v24;
  SnippetUI::MultilineTextProperty *v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  google::protobuf::UnknownFieldSet *v29;
  _BYTE *v30;
  _BYTE *v31;
  unsigned int v32;
  unsigned int v33;
  SnippetUI::MultilineTextProperty *v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int v37;
  google::protobuf::UnknownFieldSet *v38;
  _BYTE *v39;
  _BYTE *v40;
  unsigned int v41;
  unsigned int v42;
  SnippetUI::ActionProperty *v43;
  unsigned int v44;
  google::protobuf::UnknownFieldSet *v45;
  unsigned int v46;
  _BYTE *v47;
  _BYTE *v48;
  unsigned int v49;
  unsigned int v50;
  google::protobuf::internal *v51;
  const char *v52;
  google::protobuf::internal *v53;
  const char *v54;
  SnippetUI::TextProperty *v55;
  unsigned int v56;
  uint64_t v57;
  unsigned int v58;
  google::protobuf::UnknownFieldSet *v59;
  _BYTE *v60;
  _BYTE *v61;
  unsigned int v62;
  unsigned int v63;
  SnippetUI::VisualProperty *v64;
  unsigned int v65;
  google::protobuf::UnknownFieldSet *v66;
  unsigned int v67;
  _BYTE *v68;
  _BYTE *v69;
  unsigned int v70;
  unsigned int v71;
  uint64_t v72;

  v5 = (char *)a2;
  if (this == (SnippetUI::SummaryItem_SwitchV2 *)&SnippetUI::_SummaryItem_SwitchV2_default_instance_)
    goto LABEL_61;
  v7 = (SnippetUI::Switch *)*((_QWORD *)this + 4);
  if (v7)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
    {
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      v7 = (SnippetUI::Switch *)*((_QWORD *)this + 4);
    }
    *v5 = 10;
    v8 = *((_DWORD *)v7 + 13);
    if (v8 > 0x7F)
    {
      v5[1] = v8 | 0x80;
      v10 = v8 >> 7;
      if (v8 >> 14)
      {
        v12 = v5 + 2;
        do
        {
          v13 = v12;
          *v12++ = v10 | 0x80;
          v14 = v10 >> 7;
          v15 = v10 >> 14;
          v10 >>= 7;
        }
        while (v15);
        v11 = v13 + 2;
        *v12 = v14;
        goto LABEL_13;
      }
      v5[2] = v10;
      v9 = 3;
    }
    else
    {
      v5[1] = v8;
      v9 = 2;
    }
    v11 = &v5[v9];
LABEL_13:
    v5 = (char *)SnippetUI::Switch::InternalSerializeWithCachedSizesToArray(v7, v11, a3, a4);
  }
  v16 = (SnippetUI::TextProperty *)*((_QWORD *)this + 5);
  if (!v16)
    goto LABEL_26;
  if ((unint64_t)v5 >= *(_QWORD *)a3)
  {
    v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v16 = (SnippetUI::TextProperty *)*((_QWORD *)this + 5);
  }
  *v5 = 18;
  v17 = *((_DWORD *)v16 + 15);
  if (v17 > 0x7F)
  {
    v5[1] = v17 | 0x80;
    v19 = v17 >> 7;
    if (v17 >> 14)
    {
      v21 = v5 + 2;
      do
      {
        v22 = v21;
        *v21++ = v19 | 0x80;
        v23 = v19 >> 7;
        v24 = v19 >> 14;
        v19 >>= 7;
      }
      while (v24);
      v20 = (google::protobuf::UnknownFieldSet *)(v22 + 2);
      *v21 = v23;
      goto LABEL_25;
    }
    v5[2] = v19;
    v18 = 3;
  }
  else
  {
    v5[1] = v17;
    v18 = 2;
  }
  v20 = (google::protobuf::UnknownFieldSet *)&v5[v18];
LABEL_25:
  v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v16, v20, a3, a4);
LABEL_26:
  v25 = (SnippetUI::MultilineTextProperty *)*((_QWORD *)this + 6);
  if (!v25)
    goto LABEL_38;
  if ((unint64_t)v5 >= *(_QWORD *)a3)
  {
    v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v25 = (SnippetUI::MultilineTextProperty *)*((_QWORD *)this + 6);
  }
  *v5 = 26;
  v26 = *((_DWORD *)v25 + 15);
  if (v26 > 0x7F)
  {
    v5[1] = v26 | 0x80;
    v28 = v26 >> 7;
    if (v26 >> 14)
    {
      v30 = v5 + 2;
      do
      {
        v31 = v30;
        *v30++ = v28 | 0x80;
        v32 = v28 >> 7;
        v33 = v28 >> 14;
        v28 >>= 7;
      }
      while (v33);
      v29 = (google::protobuf::UnknownFieldSet *)(v31 + 2);
      *v30 = v32;
      goto LABEL_37;
    }
    v5[2] = v28;
    v27 = 3;
  }
  else
  {
    v5[1] = v26;
    v27 = 2;
  }
  v29 = (google::protobuf::UnknownFieldSet *)&v5[v27];
LABEL_37:
  v5 = (char *)SnippetUI::MultilineTextProperty::InternalSerializeWithCachedSizesToArray(v25, v29, a3, a4);
LABEL_38:
  v34 = (SnippetUI::MultilineTextProperty *)*((_QWORD *)this + 7);
  if (!v34)
    goto LABEL_50;
  if ((unint64_t)v5 >= *(_QWORD *)a3)
  {
    v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v34 = (SnippetUI::MultilineTextProperty *)*((_QWORD *)this + 7);
  }
  *v5 = 34;
  v35 = *((_DWORD *)v34 + 15);
  if (v35 > 0x7F)
  {
    v5[1] = v35 | 0x80;
    v37 = v35 >> 7;
    if (v35 >> 14)
    {
      v39 = v5 + 2;
      do
      {
        v40 = v39;
        *v39++ = v37 | 0x80;
        v41 = v37 >> 7;
        v42 = v37 >> 14;
        v37 >>= 7;
      }
      while (v42);
      v38 = (google::protobuf::UnknownFieldSet *)(v40 + 2);
      *v39 = v41;
      goto LABEL_49;
    }
    v5[2] = v37;
    v36 = 3;
  }
  else
  {
    v5[1] = v35;
    v36 = 2;
  }
  v38 = (google::protobuf::UnknownFieldSet *)&v5[v36];
LABEL_49:
  v5 = (char *)SnippetUI::MultilineTextProperty::InternalSerializeWithCachedSizesToArray(v34, v38, a3, a4);
LABEL_50:
  v43 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 8);
  if (v43)
  {
    if ((unint64_t)v5 >= *(_QWORD *)a3)
    {
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
      v43 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 8);
    }
    *v5 = 42;
    v44 = *((_DWORD *)v43 + 12);
    if (v44 > 0x7F)
    {
      v5[1] = v44 | 0x80;
      v46 = v44 >> 7;
      if (v44 >> 14)
      {
        v47 = v5 + 2;
        do
        {
          v48 = v47;
          *v47++ = v46 | 0x80;
          v49 = v46 >> 7;
          v50 = v46 >> 14;
          v46 >>= 7;
        }
        while (v50);
        v45 = (google::protobuf::UnknownFieldSet *)(v48 + 2);
        *v47 = v49;
      }
      else
      {
        v5[2] = v46;
        v45 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
      }
    }
    else
    {
      v5[1] = v44;
      v45 = (google::protobuf::UnknownFieldSet *)(v5 + 2);
    }
    v5 = (char *)SnippetUI::ActionProperty::InternalSerializeWithCachedSizesToArray(v43, v45, a3, a4);
  }
LABEL_61:
  v51 = (google::protobuf::internal *)*((_QWORD *)this + 2);
  if (*((char *)v51 + 23) < 0)
  {
    v52 = (const char *)*((_QWORD *)v51 + 1);
    if (!v52)
      goto LABEL_67;
    v51 = *(google::protobuf::internal **)v51;
    goto LABEL_66;
  }
  v52 = (const char *)*((unsigned __int8 *)v51 + 23);
  if (*((_BYTE *)v51 + 23))
  {
LABEL_66:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v51, v52, 1, (google::protobuf::internal *)"SnippetUI.SummaryItem_SwitchV2.component_name");
    v5 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 6, *((_QWORD *)this + 2), v5);
  }
LABEL_67:
  v53 = (google::protobuf::internal *)*((_QWORD *)this + 3);
  if (*((char *)v53 + 23) < 0)
  {
    v54 = (const char *)*((_QWORD *)v53 + 1);
    if (!v54)
      goto LABEL_73;
    v53 = *(google::protobuf::internal **)v53;
    goto LABEL_72;
  }
  v54 = (const char *)*((unsigned __int8 *)v53 + 23);
  if (*((_BYTE *)v53 + 23))
  {
LABEL_72:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v53, v54, 1, (google::protobuf::internal *)"SnippetUI.SummaryItem_SwitchV2.link_identifier");
    v5 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 7, *((_QWORD *)this + 3), v5);
  }
LABEL_73:
  if (this == (SnippetUI::SummaryItem_SwitchV2 *)&SnippetUI::_SummaryItem_SwitchV2_default_instance_)
    goto LABEL_97;
  v55 = (SnippetUI::TextProperty *)*((_QWORD *)this + 9);
  if (v55)
  {
    if ((unint64_t)v5 >= *(_QWORD *)a3)
    {
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
      v55 = (SnippetUI::TextProperty *)*((_QWORD *)this + 9);
    }
    *v5 = 66;
    v56 = *((_DWORD *)v55 + 15);
    if (v56 > 0x7F)
    {
      v5[1] = v56 | 0x80;
      v58 = v56 >> 7;
      if (v56 >> 14)
      {
        v60 = v5 + 2;
        do
        {
          v61 = v60;
          *v60++ = v58 | 0x80;
          v62 = v58 >> 7;
          v63 = v58 >> 14;
          v58 >>= 7;
        }
        while (v63);
        v59 = (google::protobuf::UnknownFieldSet *)(v61 + 2);
        *v60 = v62;
        goto LABEL_85;
      }
      v5[2] = v58;
      v57 = 3;
    }
    else
    {
      v5[1] = v56;
      v57 = 2;
    }
    v59 = (google::protobuf::UnknownFieldSet *)&v5[v57];
LABEL_85:
    v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v55, v59, a3, a4);
  }
  v64 = (SnippetUI::VisualProperty *)*((_QWORD *)this + 10);
  if (v64)
  {
    if ((unint64_t)v5 >= *(_QWORD *)a3)
    {
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
      v64 = (SnippetUI::VisualProperty *)*((_QWORD *)this + 10);
    }
    *v5 = 74;
    v65 = *((_DWORD *)v64 + 15);
    if (v65 > 0x7F)
    {
      v5[1] = v65 | 0x80;
      v67 = v65 >> 7;
      if (v65 >> 14)
      {
        v68 = v5 + 2;
        do
        {
          v69 = v68;
          *v68++ = v67 | 0x80;
          v70 = v67 >> 7;
          v71 = v67 >> 14;
          v67 >>= 7;
        }
        while (v71);
        v66 = (google::protobuf::UnknownFieldSet *)(v69 + 2);
        *v68 = v70;
      }
      else
      {
        v5[2] = v67;
        v66 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
      }
    }
    else
    {
      v5[1] = v65;
      v66 = (google::protobuf::UnknownFieldSet *)(v5 + 2);
    }
    v5 = (char *)SnippetUI::VisualProperty::InternalSerializeWithCachedSizesToArray(v64, v66, a3, a4);
  }
LABEL_97:
  v72 = *((_QWORD *)this + 1);
  if ((v72 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v72 & 0xFFFFFFFFFFFFFFFELL), (const google::protobuf::UnknownFieldSet *)v5, a3, a4);
  else
    return (const google::protobuf::UnknownFieldSet *)v5;
}

void SnippetUI::SummaryItem_SwitchV2::CopyFrom(SnippetUI::SummaryItem_SwitchV2 *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    SnippetUI::SummaryItem_SwitchV2::Clear(this);
    SnippetUI::SummaryItem_SwitchV2::MergeFrom(this, a2);
  }
}

void SnippetUI::SummaryItem_SwitchV2::MergeFrom(SnippetUI::SummaryItem_SwitchV2 *this, const google::protobuf::Message *lpsrc)
{
  std::string *v4;
  const SnippetUI::SummaryItem_SwitchV2 *v5;
  google::protobuf::Message *v6;
  char v7;
  std::string v8[2];

  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/SummaryItem.pb.cc", 8897);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5)
    SnippetUI::SummaryItem_SwitchV2::MergeFrom(this, v5);
  else
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
}

void sub_1BF92B5AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::SummaryItem_SwitchV2::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 88) = a2;
  return this;
}

uint64_t SnippetUI::SummaryItem_SwitchV2::GetMetadata(SnippetUI::SummaryItem_SwitchV2 *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_SummaryItem_2eproto);
  return qword_1EF581A30;
}

void *SnippetUI::SummaryItem_SwitchV2::default_instance(SnippetUI::SummaryItem_SwitchV2 *this)
{
  if (atomic_load(scc_info_SummaryItem_SwitchV2_SummaryItem_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_SummaryItem_SwitchV2_SummaryItem_2eproto);
  return &SnippetUI::_SummaryItem_SwitchV2_default_instance_;
}

void SnippetUI::SummaryItem_SwitchV2::MergeFrom(SnippetUI::SummaryItem_SwitchV2 *this, const SnippetUI::SummaryItem_SwitchV2 *a2)
{
  std::string *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  const SnippetUI::Switch *v10;
  SnippetUI::Switch *v11;
  const SnippetUI::Switch *v12;
  int **v13;
  int **v14;
  int **v15;
  int **v16;
  int **v17;
  int **v18;
  int **v19;
  int **v20;
  int **v21;
  int **v22;
  int **v23;
  int **v24;
  int **v25;
  int **v26;
  int **v27;
  int **v28;
  int **v29;
  int **v30;
  char v31;
  std::string v32[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v32, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/SummaryItem.pb.cc", 8912);
    v4 = google::protobuf::internal::LogMessage::operator<<(v32, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v31, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v32[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::SummaryItem_SwitchV2 *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  v6 = *((_QWORD *)a2 + 2);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(_QWORD *)(v6 + 8))
      goto LABEL_13;
  }
  else if (!*(_BYTE *)(v6 + 23))
  {
    goto LABEL_13;
  }
  v7 = (uint64_t *)*((_QWORD *)this + 2);
  if (v7 != (uint64_t *)v6)
  {
    if (v7 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, v6);
    else
      std::string::operator=(*((std::string **)this + 2), (const std::string *)v6);
  }
LABEL_13:
  v8 = *((_QWORD *)a2 + 3);
  if (*(char *)(v8 + 23) < 0)
  {
    if (!*(_QWORD *)(v8 + 8))
      goto LABEL_21;
  }
  else if (!*(_BYTE *)(v8 + 23))
  {
    goto LABEL_21;
  }
  v9 = (uint64_t *)*((_QWORD *)this + 3);
  if (v9 != (uint64_t *)v8)
  {
    if (v9 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 3, v8);
    else
      std::string::operator=(*((std::string **)this + 3), (const std::string *)v8);
  }
LABEL_21:
  if (a2 != (const SnippetUI::SummaryItem_SwitchV2 *)&SnippetUI::_SummaryItem_SwitchV2_default_instance_)
  {
    v10 = (const SnippetUI::Switch *)*((_QWORD *)a2 + 4);
    if (v10)
    {
      v11 = (SnippetUI::Switch *)*((_QWORD *)this + 4);
      if (!v11)
      {
        v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Switch>(0);
        *((_QWORD *)this + 4) = v11;
        v10 = (const SnippetUI::Switch *)*((_QWORD *)a2 + 4);
      }
      if (v10)
        v12 = v10;
      else
        v12 = (const SnippetUI::Switch *)&SnippetUI::_Switch_default_instance_;
      SnippetUI::Switch::MergeFrom(v11, v12);
    }
    v13 = (int **)*((_QWORD *)a2 + 5);
    if (v13)
    {
      v14 = (int **)*((_QWORD *)this + 5);
      if (!v14)
      {
        v14 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 5) = v14;
        v13 = (int **)*((_QWORD *)a2 + 5);
      }
      if (v13)
        v15 = v13;
      else
        v15 = (int **)&SnippetUI::_TextProperty_default_instance_;
      SnippetUI::TextProperty::MergeFrom(v14, v15);
    }
    v16 = (int **)*((_QWORD *)a2 + 6);
    if (v16)
    {
      v17 = (int **)*((_QWORD *)this + 6);
      if (!v17)
      {
        v17 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::MultilineTextProperty>(0);
        *((_QWORD *)this + 6) = v17;
        v16 = (int **)*((_QWORD *)a2 + 6);
      }
      if (v16)
        v18 = v16;
      else
        v18 = (int **)&SnippetUI::_MultilineTextProperty_default_instance_;
      SnippetUI::MultilineTextProperty::MergeFrom(v17, v18);
    }
    v19 = (int **)*((_QWORD *)a2 + 7);
    if (v19)
    {
      v20 = (int **)*((_QWORD *)this + 7);
      if (!v20)
      {
        v20 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::MultilineTextProperty>(0);
        *((_QWORD *)this + 7) = v20;
        v19 = (int **)*((_QWORD *)a2 + 7);
      }
      if (v19)
        v21 = v19;
      else
        v21 = (int **)&SnippetUI::_MultilineTextProperty_default_instance_;
      SnippetUI::MultilineTextProperty::MergeFrom(v20, v21);
    }
    v22 = (int **)*((_QWORD *)a2 + 8);
    if (v22)
    {
      v23 = (int **)*((_QWORD *)this + 8);
      if (!v23)
      {
        v23 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
        *((_QWORD *)this + 8) = v23;
        v22 = (int **)*((_QWORD *)a2 + 8);
      }
      if (v22)
        v24 = v22;
      else
        v24 = (int **)&SnippetUI::_ActionProperty_default_instance_;
      SnippetUI::ActionProperty::MergeFrom(v23, v24);
    }
    v25 = (int **)*((_QWORD *)a2 + 9);
    if (v25)
    {
      v26 = (int **)*((_QWORD *)this + 9);
      if (!v26)
      {
        v26 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 9) = v26;
        v25 = (int **)*((_QWORD *)a2 + 9);
      }
      if (v25)
        v27 = v25;
      else
        v27 = (int **)&SnippetUI::_TextProperty_default_instance_;
      SnippetUI::TextProperty::MergeFrom(v26, v27);
    }
    v28 = (int **)*((_QWORD *)a2 + 10);
    if (v28)
    {
      v29 = (int **)*((_QWORD *)this + 10);
      if (!v29)
      {
        v29 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::VisualProperty>(0);
        *((_QWORD *)this + 10) = v29;
        v28 = (int **)*((_QWORD *)a2 + 10);
      }
      if (v28)
        v30 = v28;
      else
        v30 = (int **)&SnippetUI::_VisualProperty_default_instance_;
      SnippetUI::VisualProperty::MergeFrom(v29, v30);
    }
  }
}

void sub_1BF92B8A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

char *google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::Switch>(google::protobuf::internal::EpsCopyInputStream *this, SnippetUI::Switch *a2, google::protobuf::internal *a3)
{
  int v6;
  const char *v7;
  char *v8;
  char *result;
  int v10;
  int v11;
  int v12;
  BOOL v13;
  int v14;
  int v15;

  v6 = *(char *)a3;
  v7 = (const char *)*(unsigned __int8 *)a3;
  if (v6 < 0)
  {
    result = google::protobuf::internal::ReadSizeFallback(a3, v7);
    if (!result)
      return result;
    v8 = result;
    LODWORD(v7) = v10;
  }
  else
  {
    v8 = (char *)a3 + 1;
  }
  v11 = google::protobuf::internal::EpsCopyInputStream::PushLimit(this, v8, v7);
  v12 = *((_DWORD *)this + 22);
  v13 = __OFSUB__(v12--, 1);
  *((_DWORD *)this + 22) = v12;
  if (v12 < 0 != v13)
    return 0;
  v14 = v11;
  result = (char *)SnippetUI::Switch::_InternalParse(a2, (google::protobuf::internal *)v8, this);
  if (!result)
    return result;
  ++*((_DWORD *)this + 22);
  if (*((_DWORD *)this + 20))
    return 0;
  v15 = *((_DWORD *)this + 7) + v14;
  *((_DWORD *)this + 7) = v15;
  *(_QWORD *)this = *((_QWORD *)this + 1) + (v15 & (v15 >> 31));
  return result;
}

SnippetUI::SummaryItem_SwitchV2 *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::SummaryItem_SwitchV2>(google::protobuf::internal::ArenaImpl *this)
{
  SnippetUI::SummaryItem_SwitchV2 *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (SnippetUI::SummaryItem_SwitchV2 *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x60uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::SummaryItem_SwitchV2>);
    SnippetUI::SummaryItem_SwitchV2::SummaryItem_SwitchV2(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (SnippetUI::SummaryItem_SwitchV2 *)operator new();
    SnippetUI::SummaryItem_SwitchV2::SummaryItem_SwitchV2(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_1BF92BA04(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D890](v1, 0x10A1C404A70EBA6);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::SummaryItem_SwitchV2>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

void InitDefaultsscc_info_SummaryItem_Switch_SummaryItem_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/SummaryItem.pb.cc", a4);
  SnippetUI::SummaryItem_Switch::SummaryItem_Switch((SnippetUI::SummaryItem_Switch *)&SnippetUI::_SummaryItem_Switch_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_SummaryItem_Switch_default_instance_, v4);
  qword_1ED1D4590 = (uint64_t)&SnippetUI::_Switch_default_instance_;
  unk_1ED1D4598 = &SnippetUI::_TextProperty_default_instance_;
  qword_1ED1D45A0 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1ED1D45A8 = &SnippetUI::_MultilineTextProperty_default_instance_;
  qword_1ED1D45B8 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1ED1D45C0 = &SnippetUI::_VisualProperty_default_instance_;
  qword_1ED1D45B0 = (uint64_t)&SnippetUI::_ActionProperty_default_instance_;
}

SnippetUI::SummaryItem_Switch *SnippetUI::SummaryItem_Switch::SummaryItem_Switch(SnippetUI::SummaryItem_Switch *this)
{
  *(_QWORD *)this = &off_1E792E6B0;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 22) = 0;
  if (atomic_load(scc_info_SummaryItem_Switch_SummaryItem_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_SummaryItem_Switch_SummaryItem_2eproto);
  *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_QWORD *)this + 10) = 0;
  return this;
}

void sub_1BF92BC84(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::SummaryItem_Switch::~SummaryItem_Switch(SnippetUI::SummaryItem_Switch *this)
{
  SnippetUI::SummaryItem_Switch::~SummaryItem_Switch(this);
  JUMPOUT(0x1C3B8D890);
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)this = &off_1E792E6B0;
  v2 = *((_QWORD *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x1C3B8D890](v2, 0x1012C40EC159624);
  }
  v4 = *((_QWORD *)this + 3);
  if ((uint64_t *)v4 != &google::protobuf::internal::fixed_address_empty_string && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0)
      operator delete(*(void **)v4);
    MEMORY[0x1C3B8D890](v4, 0x1012C40EC159624);
  }
  if (this != (SnippetUI::SummaryItem_Switch *)&SnippetUI::_SummaryItem_Switch_default_instance_)
  {
    v6 = *((_QWORD *)this + 4);
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    v7 = *((_QWORD *)this + 5);
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    v8 = *((_QWORD *)this + 6);
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    v9 = *((_QWORD *)this + 7);
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    v10 = *((_QWORD *)this + 8);
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    v11 = *((_QWORD *)this + 9);
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = *((_QWORD *)this + 10);
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

SnippetUI::SummaryItem_Switch *SnippetUI::SummaryItem_Switch::New(SnippetUI::SummaryItem_Switch *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::SummaryItem_Switch>(0);
}

SnippetUI::SummaryItem_Switch *SnippetUI::SummaryItem_Switch::New(SnippetUI::SummaryItem_Switch *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::SummaryItem_Switch>(a2);
}

void SnippetUI::SummaryItem_Switch::Clear(SnippetUI::SummaryItem_Switch *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  google::protobuf::internal::InternalMetadataWithArena *v11;
  char v12;

  v2 = *((_QWORD *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(_BYTE **)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v2 = 0;
      *(_BYTE *)(v2 + 23) = 0;
    }
  }
  v3 = *((_QWORD *)this + 3);
  if ((uint64_t *)v3 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v3 + 23) < 0)
    {
      **(_BYTE **)v3 = 0;
      *(_QWORD *)(v3 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v3 = 0;
      *(_BYTE *)(v3 + 23) = 0;
    }
  }
  v4 = *((_QWORD *)this + 4);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  *((_QWORD *)this + 4) = 0;
  v5 = *((_QWORD *)this + 5);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *((_QWORD *)this + 5) = 0;
  v6 = *((_QWORD *)this + 6);
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  *((_QWORD *)this + 6) = 0;
  v7 = *((_QWORD *)this + 7);
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  *((_QWORD *)this + 7) = 0;
  v8 = *((_QWORD *)this + 8);
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  *((_QWORD *)this + 8) = 0;
  v9 = *((_QWORD *)this + 9);
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  *((_QWORD *)this + 9) = 0;
  v10 = *((_QWORD *)this + 10);
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  v12 = *((_BYTE *)this + 8);
  v11 = (SnippetUI::SummaryItem_Switch *)((char *)this + 8);
  *((_QWORD *)v11 + 9) = 0;
  if ((v12 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v11);
}

uint64_t SnippetUI::SummaryItem_Switch::IsInitialized(SnippetUI::SummaryItem_Switch *this)
{
  return 1;
}

char *SnippetUI::SummaryItem_Switch::ByteSizeLong(SnippetUI::SummaryItem_Switch *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  const google::protobuf::UnknownFieldSet *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  SnippetUI::Switch *v9;
  char *v10;
  SnippetUI::TextProperty *v11;
  char *v12;
  SnippetUI::TextProperty *v13;
  char *v14;
  SnippetUI::MultilineTextProperty *v15;
  char *v16;
  SnippetUI::ActionProperty *v17;
  char *v18;
  SnippetUI::TextProperty *v19;
  char *v20;
  SnippetUI::VisualProperty *v21;
  char *v22;

  v2 = *((_QWORD *)this + 2);
  v3 = *(unsigned __int8 *)(v2 + 23);
  if (*(char *)(v2 + 23) < 0)
  {
    if (*(_QWORD *)(v2 + 8))
      goto LABEL_3;
LABEL_7:
    v5 = 0;
    goto LABEL_8;
  }
  if (!*(_BYTE *)(v2 + 23))
    goto LABEL_7;
LABEL_3:
  v4 = *(_QWORD *)(v2 + 8);
  if ((v3 & 0x80u) == 0)
    v4 = v3;
  v5 = (const google::protobuf::UnknownFieldSet *)(v4 + ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_8:
  v6 = *((_QWORD *)this + 3);
  v7 = *(unsigned __int8 *)(v6 + 23);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(_QWORD *)(v6 + 8))
      goto LABEL_13;
  }
  else if (!*(_BYTE *)(v6 + 23))
  {
    goto LABEL_13;
  }
  v8 = *(_QWORD *)(v6 + 8);
  if ((v7 & 0x80u) == 0)
    v8 = v7;
  v5 = (const google::protobuf::UnknownFieldSet *)((char *)v5 + v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_13:
  if (this != (SnippetUI::SummaryItem_Switch *)&SnippetUI::_SummaryItem_Switch_default_instance_)
  {
    v9 = (SnippetUI::Switch *)*((_QWORD *)this + 4);
    if (v9)
    {
      v10 = SnippetUI::Switch::ByteSizeLong(v9);
      v5 = (const google::protobuf::UnknownFieldSet *)&v10[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v11 = (SnippetUI::TextProperty *)*((_QWORD *)this + 5);
    if (v11)
    {
      v12 = SnippetUI::TextProperty::ByteSizeLong(v11);
      v5 = (const google::protobuf::UnknownFieldSet *)&v12[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v12 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v13 = (SnippetUI::TextProperty *)*((_QWORD *)this + 6);
    if (v13)
    {
      v14 = SnippetUI::TextProperty::ByteSizeLong(v13);
      v5 = (const google::protobuf::UnknownFieldSet *)&v14[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v14 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v15 = (SnippetUI::MultilineTextProperty *)*((_QWORD *)this + 7);
    if (v15)
    {
      v16 = SnippetUI::MultilineTextProperty::ByteSizeLong(v15);
      v5 = (const google::protobuf::UnknownFieldSet *)&v16[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v16 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v17 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 8);
    if (v17)
    {
      v18 = SnippetUI::ActionProperty::ByteSizeLong(v17);
      v5 = (const google::protobuf::UnknownFieldSet *)&v18[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v18 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v19 = (SnippetUI::TextProperty *)*((_QWORD *)this + 9);
    if (v19)
    {
      v20 = SnippetUI::TextProperty::ByteSizeLong(v19);
      v5 = (const google::protobuf::UnknownFieldSet *)&v20[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v20 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v21 = (SnippetUI::VisualProperty *)*((_QWORD *)this + 10);
    if (v21)
    {
      v22 = SnippetUI::VisualProperty::ByteSizeLong(v21);
      v5 = (const google::protobuf::UnknownFieldSet *)&v22[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v22 | 1) ^ 0x1F) + 73) >> 6)];
    }
  }
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::SummaryItem_Switch *)((char *)this + 8), v5, (_DWORD *)this + 22);
  *((_DWORD *)this + 22) = (_DWORD)v5;
  return (char *)v5;
}

uint64_t SnippetUI::SummaryItem_Switch::GetCachedSize(SnippetUI::SummaryItem_Switch *this)
{
  return *((unsigned int *)this + 22);
}

google::protobuf::internal *SnippetUI::SummaryItem_Switch::_InternalParse(SnippetUI::SummaryItem_Switch *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  std::string **v5;
  std::string **v6;
  uint64_t *v7;
  google::protobuf::internal::ParseContext *v8;
  google::protobuf::internal *TagFallback;
  char *v10;
  SnippetUI::Switch *v11;
  char *v12;
  SnippetUI::TextProperty *v13;
  SnippetUI::MultilineTextProperty *v14;
  SnippetUI::ActionProperty *v15;
  std::string *v16;
  std::string::value_type *v17;
  google::protobuf::internal::ParseContext *v18;
  char *v19;
  SnippetUI::VisualProperty *v20;
  BOOL v21;
  google::protobuf::internal *v23;

  v23 = a2;
  v5 = (std::string **)((char *)this + 24);
  v6 = (std::string **)((char *)this + 16);
  v7 = (uint64_t *)((char *)this + 8);
  while (2)
  {
    if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v23, *((_DWORD *)a3 + 23)) & 1) != 0)
      return v23;
    TagFallback = (google::protobuf::internal *)((char *)v23 + 1);
    v10 = (char *)*(unsigned __int8 *)v23;
    if ((*(char *)v23 & 0x80000000) == 0)
      goto LABEL_6;
    v10 = (char *)(v10 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v23 + 2);
LABEL_6:
      v23 = TagFallback;
      goto LABEL_7;
    }
    TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v23, v10);
    v23 = TagFallback;
    if (!TagFallback)
      return TagFallback;
LABEL_7:
    switch(v10 >> 3)
    {
      case 1u:
        if (v10 != 10)
          goto LABEL_46;
        v11 = (SnippetUI::Switch *)*((_QWORD *)this + 4);
        if (!v11)
        {
          v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Switch>(0);
          *((_QWORD *)this + 4) = v11;
          TagFallback = v23;
        }
        v12 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::Switch>(a3, v11, TagFallback);
        goto LABEL_51;
      case 2u:
        if (v10 != 18)
          goto LABEL_46;
        v13 = (SnippetUI::TextProperty *)*((_QWORD *)this + 5);
        if (v13)
          goto LABEL_41;
        v13 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 5) = v13;
        goto LABEL_40;
      case 3u:
        if (v10 != 26)
          goto LABEL_46;
        v13 = (SnippetUI::TextProperty *)*((_QWORD *)this + 6);
        if (v13)
          goto LABEL_41;
        v13 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 6) = v13;
        goto LABEL_40;
      case 4u:
        if (v10 != 34)
          goto LABEL_46;
        v14 = (SnippetUI::MultilineTextProperty *)*((_QWORD *)this + 7);
        if (!v14)
        {
          v14 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::MultilineTextProperty>(0);
          *((_QWORD *)this + 7) = v14;
          TagFallback = v23;
        }
        v12 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::MultilineTextProperty>(a3, v14, TagFallback);
        goto LABEL_51;
      case 5u:
        if (v10 != 42)
          goto LABEL_46;
        v15 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 8);
        if (!v15)
        {
          v15 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
          *((_QWORD *)this + 8) = v15;
          TagFallback = v23;
        }
        v12 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::ActionProperty>(a3, v15, TagFallback);
        goto LABEL_51;
      case 6u:
        if (v10 != 50)
          goto LABEL_46;
        v16 = *v6;
        if (*v6 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v6, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v16 = *v6;
          TagFallback = v23;
        }
        v17 = (std::string::value_type *)TagFallback;
        v18 = a3;
        v19 = "SnippetUI.SummaryItem_Switch.component_name";
        goto LABEL_36;
      case 7u:
        if (v10 != 58)
          goto LABEL_46;
        v16 = *v5;
        if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v16 = *v5;
          TagFallback = v23;
        }
        v17 = (std::string::value_type *)TagFallback;
        v18 = a3;
        v19 = "SnippetUI.SummaryItem_Switch.link_identifier";
LABEL_36:
        v12 = google::protobuf::internal::InlineGreedyStringParserUTF8(v16, v17, (uint64_t)v18, (google::protobuf::internal *)v19);
        goto LABEL_51;
      case 8u:
        if (v10 != 66)
          goto LABEL_46;
        v13 = (SnippetUI::TextProperty *)*((_QWORD *)this + 9);
        if (v13)
          goto LABEL_41;
        v13 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 9) = v13;
LABEL_40:
        TagFallback = v23;
LABEL_41:
        v12 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::TextProperty>(a3, v13, TagFallback);
        goto LABEL_51;
      case 9u:
        if (v10 != 74)
          goto LABEL_46;
        v20 = (SnippetUI::VisualProperty *)*((_QWORD *)this + 10);
        if (!v20)
        {
          v20 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::VisualProperty>(0);
          *((_QWORD *)this + 10) = v20;
          TagFallback = v23;
        }
        v12 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::VisualProperty>(a3, v20, TagFallback);
        goto LABEL_51;
      default:
LABEL_46:
        if ((_DWORD)v10)
          v21 = (v10 & 7) == 4;
        else
          v21 = 1;
        if (v21)
        {
          *((_DWORD *)a3 + 20) = (_DWORD)v10 - 1;
          return TagFallback;
        }
        v12 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v10, v7, TagFallback, a3, v8);
LABEL_51:
        v23 = (google::protobuf::internal *)v12;
        if (v12)
          continue;
        TagFallback = 0;
        break;
    }
    return TagFallback;
  }
}

const google::protobuf::UnknownFieldSet *SnippetUI::SummaryItem_Switch::InternalSerializeWithCachedSizesToArray(SnippetUI::SummaryItem_Switch *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  char *v5;
  SnippetUI::Switch *v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  char *v11;
  _BYTE *v12;
  _BYTE *v13;
  unsigned int v14;
  unsigned int v15;
  SnippetUI::TextProperty *v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  google::protobuf::UnknownFieldSet *v20;
  _BYTE *v21;
  _BYTE *v22;
  unsigned int v23;
  unsigned int v24;
  SnippetUI::TextProperty *v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  google::protobuf::UnknownFieldSet *v29;
  _BYTE *v30;
  _BYTE *v31;
  unsigned int v32;
  unsigned int v33;
  SnippetUI::MultilineTextProperty *v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int v37;
  google::protobuf::UnknownFieldSet *v38;
  _BYTE *v39;
  _BYTE *v40;
  unsigned int v41;
  unsigned int v42;
  SnippetUI::ActionProperty *v43;
  unsigned int v44;
  google::protobuf::UnknownFieldSet *v45;
  unsigned int v46;
  _BYTE *v47;
  _BYTE *v48;
  unsigned int v49;
  unsigned int v50;
  google::protobuf::internal *v51;
  const char *v52;
  google::protobuf::internal *v53;
  const char *v54;
  SnippetUI::TextProperty *v55;
  unsigned int v56;
  uint64_t v57;
  unsigned int v58;
  google::protobuf::UnknownFieldSet *v59;
  _BYTE *v60;
  _BYTE *v61;
  unsigned int v62;
  unsigned int v63;
  SnippetUI::VisualProperty *v64;
  unsigned int v65;
  google::protobuf::UnknownFieldSet *v66;
  unsigned int v67;
  _BYTE *v68;
  _BYTE *v69;
  unsigned int v70;
  unsigned int v71;
  uint64_t v72;

  v5 = (char *)a2;
  if (this == (SnippetUI::SummaryItem_Switch *)&SnippetUI::_SummaryItem_Switch_default_instance_)
    goto LABEL_61;
  v7 = (SnippetUI::Switch *)*((_QWORD *)this + 4);
  if (v7)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
    {
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      v7 = (SnippetUI::Switch *)*((_QWORD *)this + 4);
    }
    *v5 = 10;
    v8 = *((_DWORD *)v7 + 13);
    if (v8 > 0x7F)
    {
      v5[1] = v8 | 0x80;
      v10 = v8 >> 7;
      if (v8 >> 14)
      {
        v12 = v5 + 2;
        do
        {
          v13 = v12;
          *v12++ = v10 | 0x80;
          v14 = v10 >> 7;
          v15 = v10 >> 14;
          v10 >>= 7;
        }
        while (v15);
        v11 = v13 + 2;
        *v12 = v14;
        goto LABEL_13;
      }
      v5[2] = v10;
      v9 = 3;
    }
    else
    {
      v5[1] = v8;
      v9 = 2;
    }
    v11 = &v5[v9];
LABEL_13:
    v5 = (char *)SnippetUI::Switch::InternalSerializeWithCachedSizesToArray(v7, v11, a3, a4);
  }
  v16 = (SnippetUI::TextProperty *)*((_QWORD *)this + 5);
  if (!v16)
    goto LABEL_26;
  if ((unint64_t)v5 >= *(_QWORD *)a3)
  {
    v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v16 = (SnippetUI::TextProperty *)*((_QWORD *)this + 5);
  }
  *v5 = 18;
  v17 = *((_DWORD *)v16 + 15);
  if (v17 > 0x7F)
  {
    v5[1] = v17 | 0x80;
    v19 = v17 >> 7;
    if (v17 >> 14)
    {
      v21 = v5 + 2;
      do
      {
        v22 = v21;
        *v21++ = v19 | 0x80;
        v23 = v19 >> 7;
        v24 = v19 >> 14;
        v19 >>= 7;
      }
      while (v24);
      v20 = (google::protobuf::UnknownFieldSet *)(v22 + 2);
      *v21 = v23;
      goto LABEL_25;
    }
    v5[2] = v19;
    v18 = 3;
  }
  else
  {
    v5[1] = v17;
    v18 = 2;
  }
  v20 = (google::protobuf::UnknownFieldSet *)&v5[v18];
LABEL_25:
  v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v16, v20, a3, a4);
LABEL_26:
  v25 = (SnippetUI::TextProperty *)*((_QWORD *)this + 6);
  if (!v25)
    goto LABEL_38;
  if ((unint64_t)v5 >= *(_QWORD *)a3)
  {
    v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v25 = (SnippetUI::TextProperty *)*((_QWORD *)this + 6);
  }
  *v5 = 26;
  v26 = *((_DWORD *)v25 + 15);
  if (v26 > 0x7F)
  {
    v5[1] = v26 | 0x80;
    v28 = v26 >> 7;
    if (v26 >> 14)
    {
      v30 = v5 + 2;
      do
      {
        v31 = v30;
        *v30++ = v28 | 0x80;
        v32 = v28 >> 7;
        v33 = v28 >> 14;
        v28 >>= 7;
      }
      while (v33);
      v29 = (google::protobuf::UnknownFieldSet *)(v31 + 2);
      *v30 = v32;
      goto LABEL_37;
    }
    v5[2] = v28;
    v27 = 3;
  }
  else
  {
    v5[1] = v26;
    v27 = 2;
  }
  v29 = (google::protobuf::UnknownFieldSet *)&v5[v27];
LABEL_37:
  v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v25, v29, a3, a4);
LABEL_38:
  v34 = (SnippetUI::MultilineTextProperty *)*((_QWORD *)this + 7);
  if (!v34)
    goto LABEL_50;
  if ((unint64_t)v5 >= *(_QWORD *)a3)
  {
    v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v34 = (SnippetUI::MultilineTextProperty *)*((_QWORD *)this + 7);
  }
  *v5 = 34;
  v35 = *((_DWORD *)v34 + 15);
  if (v35 > 0x7F)
  {
    v5[1] = v35 | 0x80;
    v37 = v35 >> 7;
    if (v35 >> 14)
    {
      v39 = v5 + 2;
      do
      {
        v40 = v39;
        *v39++ = v37 | 0x80;
        v41 = v37 >> 7;
        v42 = v37 >> 14;
        v37 >>= 7;
      }
      while (v42);
      v38 = (google::protobuf::UnknownFieldSet *)(v40 + 2);
      *v39 = v41;
      goto LABEL_49;
    }
    v5[2] = v37;
    v36 = 3;
  }
  else
  {
    v5[1] = v35;
    v36 = 2;
  }
  v38 = (google::protobuf::UnknownFieldSet *)&v5[v36];
LABEL_49:
  v5 = (char *)SnippetUI::MultilineTextProperty::InternalSerializeWithCachedSizesToArray(v34, v38, a3, a4);
LABEL_50:
  v43 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 8);
  if (v43)
  {
    if ((unint64_t)v5 >= *(_QWORD *)a3)
    {
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
      v43 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 8);
    }
    *v5 = 42;
    v44 = *((_DWORD *)v43 + 12);
    if (v44 > 0x7F)
    {
      v5[1] = v44 | 0x80;
      v46 = v44 >> 7;
      if (v44 >> 14)
      {
        v47 = v5 + 2;
        do
        {
          v48 = v47;
          *v47++ = v46 | 0x80;
          v49 = v46 >> 7;
          v50 = v46 >> 14;
          v46 >>= 7;
        }
        while (v50);
        v45 = (google::protobuf::UnknownFieldSet *)(v48 + 2);
        *v47 = v49;
      }
      else
      {
        v5[2] = v46;
        v45 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
      }
    }
    else
    {
      v5[1] = v44;
      v45 = (google::protobuf::UnknownFieldSet *)(v5 + 2);
    }
    v5 = (char *)SnippetUI::ActionProperty::InternalSerializeWithCachedSizesToArray(v43, v45, a3, a4);
  }
LABEL_61:
  v51 = (google::protobuf::internal *)*((_QWORD *)this + 2);
  if (*((char *)v51 + 23) < 0)
  {
    v52 = (const char *)*((_QWORD *)v51 + 1);
    if (!v52)
      goto LABEL_67;
    v51 = *(google::protobuf::internal **)v51;
    goto LABEL_66;
  }
  v52 = (const char *)*((unsigned __int8 *)v51 + 23);
  if (*((_BYTE *)v51 + 23))
  {
LABEL_66:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v51, v52, 1, (google::protobuf::internal *)"SnippetUI.SummaryItem_Switch.component_name");
    v5 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 6, *((_QWORD *)this + 2), v5);
  }
LABEL_67:
  v53 = (google::protobuf::internal *)*((_QWORD *)this + 3);
  if (*((char *)v53 + 23) < 0)
  {
    v54 = (const char *)*((_QWORD *)v53 + 1);
    if (!v54)
      goto LABEL_73;
    v53 = *(google::protobuf::internal **)v53;
    goto LABEL_72;
  }
  v54 = (const char *)*((unsigned __int8 *)v53 + 23);
  if (*((_BYTE *)v53 + 23))
  {
LABEL_72:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v53, v54, 1, (google::protobuf::internal *)"SnippetUI.SummaryItem_Switch.link_identifier");
    v5 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 7, *((_QWORD *)this + 3), v5);
  }
LABEL_73:
  if (this == (SnippetUI::SummaryItem_Switch *)&SnippetUI::_SummaryItem_Switch_default_instance_)
    goto LABEL_97;
  v55 = (SnippetUI::TextProperty *)*((_QWORD *)this + 9);
  if (v55)
  {
    if ((unint64_t)v5 >= *(_QWORD *)a3)
    {
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
      v55 = (SnippetUI::TextProperty *)*((_QWORD *)this + 9);
    }
    *v5 = 66;
    v56 = *((_DWORD *)v55 + 15);
    if (v56 > 0x7F)
    {
      v5[1] = v56 | 0x80;
      v58 = v56 >> 7;
      if (v56 >> 14)
      {
        v60 = v5 + 2;
        do
        {
          v61 = v60;
          *v60++ = v58 | 0x80;
          v62 = v58 >> 7;
          v63 = v58 >> 14;
          v58 >>= 7;
        }
        while (v63);
        v59 = (google::protobuf::UnknownFieldSet *)(v61 + 2);
        *v60 = v62;
        goto LABEL_85;
      }
      v5[2] = v58;
      v57 = 3;
    }
    else
    {
      v5[1] = v56;
      v57 = 2;
    }
    v59 = (google::protobuf::UnknownFieldSet *)&v5[v57];
LABEL_85:
    v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v55, v59, a3, a4);
  }
  v64 = (SnippetUI::VisualProperty *)*((_QWORD *)this + 10);
  if (v64)
  {
    if ((unint64_t)v5 >= *(_QWORD *)a3)
    {
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
      v64 = (SnippetUI::VisualProperty *)*((_QWORD *)this + 10);
    }
    *v5 = 74;
    v65 = *((_DWORD *)v64 + 15);
    if (v65 > 0x7F)
    {
      v5[1] = v65 | 0x80;
      v67 = v65 >> 7;
      if (v65 >> 14)
      {
        v68 = v5 + 2;
        do
        {
          v69 = v68;
          *v68++ = v67 | 0x80;
          v70 = v67 >> 7;
          v71 = v67 >> 14;
          v67 >>= 7;
        }
        while (v71);
        v66 = (google::protobuf::UnknownFieldSet *)(v69 + 2);
        *v68 = v70;
      }
      else
      {
        v5[2] = v67;
        v66 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
      }
    }
    else
    {
      v5[1] = v65;
      v66 = (google::protobuf::UnknownFieldSet *)(v5 + 2);
    }
    v5 = (char *)SnippetUI::VisualProperty::InternalSerializeWithCachedSizesToArray(v64, v66, a3, a4);
  }
LABEL_97:
  v72 = *((_QWORD *)this + 1);
  if ((v72 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v72 & 0xFFFFFFFFFFFFFFFELL), (const google::protobuf::UnknownFieldSet *)v5, a3, a4);
  else
    return (const google::protobuf::UnknownFieldSet *)v5;
}

void SnippetUI::SummaryItem_Switch::CopyFrom(SnippetUI::SummaryItem_Switch *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    SnippetUI::SummaryItem_Switch::Clear(this);
    SnippetUI::SummaryItem_Switch::MergeFrom(this, a2);
  }
}

void SnippetUI::SummaryItem_Switch::MergeFrom(SnippetUI::SummaryItem_Switch *this, const google::protobuf::Message *lpsrc)
{
  std::string *v4;
  const SnippetUI::SummaryItem_Switch *v5;
  google::protobuf::Message *v6;
  char v7;
  std::string v8[2];

  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/SummaryItem.pb.cc", 8317);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5)
    SnippetUI::SummaryItem_Switch::MergeFrom(this, v5);
  else
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
}

void sub_1BF92C9D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::SummaryItem_Switch::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 88) = a2;
  return this;
}

uint64_t SnippetUI::SummaryItem_Switch::GetMetadata(SnippetUI::SummaryItem_Switch *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_SummaryItem_2eproto);
  return qword_1EF581A20;
}

void *SnippetUI::SummaryItem_Switch::default_instance(SnippetUI::SummaryItem_Switch *this)
{
  if (atomic_load(scc_info_SummaryItem_Switch_SummaryItem_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_SummaryItem_Switch_SummaryItem_2eproto);
  return &SnippetUI::_SummaryItem_Switch_default_instance_;
}

void SnippetUI::SummaryItem_Switch::MergeFrom(SnippetUI::SummaryItem_Switch *this, const SnippetUI::SummaryItem_Switch *a2)
{
  std::string *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  const SnippetUI::Switch *v10;
  SnippetUI::Switch *v11;
  const SnippetUI::Switch *v12;
  int **v13;
  int **v14;
  int **v15;
  int **v16;
  int **v17;
  int **v18;
  int **v19;
  int **v20;
  int **v21;
  int **v22;
  int **v23;
  int **v24;
  int **v25;
  int **v26;
  int **v27;
  int **v28;
  int **v29;
  int **v30;
  char v31;
  std::string v32[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v32, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/SummaryItem.pb.cc", 8332);
    v4 = google::protobuf::internal::LogMessage::operator<<(v32, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v31, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v32[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::SummaryItem_Switch *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  v6 = *((_QWORD *)a2 + 2);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(_QWORD *)(v6 + 8))
      goto LABEL_13;
  }
  else if (!*(_BYTE *)(v6 + 23))
  {
    goto LABEL_13;
  }
  v7 = (uint64_t *)*((_QWORD *)this + 2);
  if (v7 != (uint64_t *)v6)
  {
    if (v7 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, v6);
    else
      std::string::operator=(*((std::string **)this + 2), (const std::string *)v6);
  }
LABEL_13:
  v8 = *((_QWORD *)a2 + 3);
  if (*(char *)(v8 + 23) < 0)
  {
    if (!*(_QWORD *)(v8 + 8))
      goto LABEL_21;
  }
  else if (!*(_BYTE *)(v8 + 23))
  {
    goto LABEL_21;
  }
  v9 = (uint64_t *)*((_QWORD *)this + 3);
  if (v9 != (uint64_t *)v8)
  {
    if (v9 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 3, v8);
    else
      std::string::operator=(*((std::string **)this + 3), (const std::string *)v8);
  }
LABEL_21:
  if (a2 != (const SnippetUI::SummaryItem_Switch *)&SnippetUI::_SummaryItem_Switch_default_instance_)
  {
    v10 = (const SnippetUI::Switch *)*((_QWORD *)a2 + 4);
    if (v10)
    {
      v11 = (SnippetUI::Switch *)*((_QWORD *)this + 4);
      if (!v11)
      {
        v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Switch>(0);
        *((_QWORD *)this + 4) = v11;
        v10 = (const SnippetUI::Switch *)*((_QWORD *)a2 + 4);
      }
      if (v10)
        v12 = v10;
      else
        v12 = (const SnippetUI::Switch *)&SnippetUI::_Switch_default_instance_;
      SnippetUI::Switch::MergeFrom(v11, v12);
    }
    v13 = (int **)*((_QWORD *)a2 + 5);
    if (v13)
    {
      v14 = (int **)*((_QWORD *)this + 5);
      if (!v14)
      {
        v14 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 5) = v14;
        v13 = (int **)*((_QWORD *)a2 + 5);
      }
      if (v13)
        v15 = v13;
      else
        v15 = (int **)&SnippetUI::_TextProperty_default_instance_;
      SnippetUI::TextProperty::MergeFrom(v14, v15);
    }
    v16 = (int **)*((_QWORD *)a2 + 6);
    if (v16)
    {
      v17 = (int **)*((_QWORD *)this + 6);
      if (!v17)
      {
        v17 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 6) = v17;
        v16 = (int **)*((_QWORD *)a2 + 6);
      }
      if (v16)
        v18 = v16;
      else
        v18 = (int **)&SnippetUI::_TextProperty_default_instance_;
      SnippetUI::TextProperty::MergeFrom(v17, v18);
    }
    v19 = (int **)*((_QWORD *)a2 + 7);
    if (v19)
    {
      v20 = (int **)*((_QWORD *)this + 7);
      if (!v20)
      {
        v20 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::MultilineTextProperty>(0);
        *((_QWORD *)this + 7) = v20;
        v19 = (int **)*((_QWORD *)a2 + 7);
      }
      if (v19)
        v21 = v19;
      else
        v21 = (int **)&SnippetUI::_MultilineTextProperty_default_instance_;
      SnippetUI::MultilineTextProperty::MergeFrom(v20, v21);
    }
    v22 = (int **)*((_QWORD *)a2 + 8);
    if (v22)
    {
      v23 = (int **)*((_QWORD *)this + 8);
      if (!v23)
      {
        v23 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
        *((_QWORD *)this + 8) = v23;
        v22 = (int **)*((_QWORD *)a2 + 8);
      }
      if (v22)
        v24 = v22;
      else
        v24 = (int **)&SnippetUI::_ActionProperty_default_instance_;
      SnippetUI::ActionProperty::MergeFrom(v23, v24);
    }
    v25 = (int **)*((_QWORD *)a2 + 9);
    if (v25)
    {
      v26 = (int **)*((_QWORD *)this + 9);
      if (!v26)
      {
        v26 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 9) = v26;
        v25 = (int **)*((_QWORD *)a2 + 9);
      }
      if (v25)
        v27 = v25;
      else
        v27 = (int **)&SnippetUI::_TextProperty_default_instance_;
      SnippetUI::TextProperty::MergeFrom(v26, v27);
    }
    v28 = (int **)*((_QWORD *)a2 + 10);
    if (v28)
    {
      v29 = (int **)*((_QWORD *)this + 10);
      if (!v29)
      {
        v29 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::VisualProperty>(0);
        *((_QWORD *)this + 10) = v29;
        v28 = (int **)*((_QWORD *)a2 + 10);
      }
      if (v28)
        v30 = v28;
      else
        v30 = (int **)&SnippetUI::_VisualProperty_default_instance_;
      SnippetUI::VisualProperty::MergeFrom(v29, v30);
    }
  }
}

void sub_1BF92CCC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

SnippetUI::SummaryItem_Switch *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::SummaryItem_Switch>(google::protobuf::internal::ArenaImpl *this)
{
  SnippetUI::SummaryItem_Switch *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (SnippetUI::SummaryItem_Switch *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x60uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::SummaryItem_Switch>);
    SnippetUI::SummaryItem_Switch::SummaryItem_Switch(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (SnippetUI::SummaryItem_Switch *)operator new();
    SnippetUI::SummaryItem_Switch::SummaryItem_Switch(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_1BF92CD64(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D890](v1, 0x10A1C404A70EBA6);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::SummaryItem_Switch>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

void InitDefaultsscc_info_SummaryItem_Standard_SummaryItem_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/SummaryItem.pb.cc", a4);
  SnippetUI::SummaryItem_Standard::SummaryItem_Standard((SnippetUI::SummaryItem_Standard *)&SnippetUI::_SummaryItem_Standard_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_SummaryItem_Standard_default_instance_, v4);
  qword_1ED1D5550 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1ED1D5558 = &SnippetUI::_MultilineTextProperty_default_instance_;
  qword_1ED1D5560 = (uint64_t)&SnippetUI::_MultilineTextProperty_default_instance_;
  unk_1ED1D5568 = &SnippetUI::_VisualProperty_default_instance_;
  qword_1ED1D5570 = (uint64_t)&SnippetUI::_ActionProperty_default_instance_;
  unk_1ED1D5578 = &SnippetUI::_TextProperty_default_instance_;
}

SnippetUI::SummaryItem_Standard *SnippetUI::SummaryItem_Standard::SummaryItem_Standard(SnippetUI::SummaryItem_Standard *this)
{
  *(_QWORD *)this = &off_1E792DE70;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 20) = 0;
  if (atomic_load(scc_info_SummaryItem_Standard_SummaryItem_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_SummaryItem_Standard_SummaryItem_2eproto);
  *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  return this;
}

void sub_1BF92CFD4(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::SummaryItem_Standard::~SummaryItem_Standard(SnippetUI::SummaryItem_Standard *this)
{
  SnippetUI::SummaryItem_Standard::~SummaryItem_Standard(this);
  JUMPOUT(0x1C3B8D890);
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)this = &off_1E792DE70;
  v2 = *((_QWORD *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x1C3B8D890](v2, 0x1012C40EC159624);
  }
  v4 = *((_QWORD *)this + 3);
  if ((uint64_t *)v4 != &google::protobuf::internal::fixed_address_empty_string && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0)
      operator delete(*(void **)v4);
    MEMORY[0x1C3B8D890](v4, 0x1012C40EC159624);
  }
  if (this != (SnippetUI::SummaryItem_Standard *)&SnippetUI::_SummaryItem_Standard_default_instance_)
  {
    v6 = *((_QWORD *)this + 4);
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    v7 = *((_QWORD *)this + 5);
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    v8 = *((_QWORD *)this + 6);
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    v9 = *((_QWORD *)this + 7);
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    v10 = *((_QWORD *)this + 8);
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    v11 = *((_QWORD *)this + 9);
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

SnippetUI::SummaryItem_Standard *SnippetUI::SummaryItem_Standard::New(SnippetUI::SummaryItem_Standard *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::SummaryItem_Standard>(0);
}

SnippetUI::SummaryItem_Standard *SnippetUI::SummaryItem_Standard::New(SnippetUI::SummaryItem_Standard *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::SummaryItem_Standard>(a2);
}

void SnippetUI::SummaryItem_Standard::Clear(SnippetUI::SummaryItem_Standard *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  google::protobuf::internal::InternalMetadataWithArena *v10;
  char v11;

  v2 = *((_QWORD *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(_BYTE **)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v2 = 0;
      *(_BYTE *)(v2 + 23) = 0;
    }
  }
  v3 = *((_QWORD *)this + 3);
  if ((uint64_t *)v3 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v3 + 23) < 0)
    {
      **(_BYTE **)v3 = 0;
      *(_QWORD *)(v3 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v3 = 0;
      *(_BYTE *)(v3 + 23) = 0;
    }
  }
  v4 = *((_QWORD *)this + 4);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  *((_QWORD *)this + 4) = 0;
  v5 = *((_QWORD *)this + 5);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *((_QWORD *)this + 5) = 0;
  v6 = *((_QWORD *)this + 6);
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  *((_QWORD *)this + 6) = 0;
  v7 = *((_QWORD *)this + 7);
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  *((_QWORD *)this + 7) = 0;
  v8 = *((_QWORD *)this + 8);
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  *((_QWORD *)this + 8) = 0;
  v9 = *((_QWORD *)this + 9);
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v11 = *((_BYTE *)this + 8);
  v10 = (SnippetUI::SummaryItem_Standard *)((char *)this + 8);
  *((_QWORD *)v10 + 8) = 0;
  if ((v11 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v10);
}

uint64_t SnippetUI::SummaryItem_Standard::IsInitialized(SnippetUI::SummaryItem_Standard *this)
{
  return 1;
}

char *SnippetUI::SummaryItem_Standard::ByteSizeLong(SnippetUI::SummaryItem_Standard *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  const google::protobuf::UnknownFieldSet *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  SnippetUI::TextProperty *v9;
  char *v10;
  SnippetUI::MultilineTextProperty *v11;
  char *v12;
  SnippetUI::MultilineTextProperty *v13;
  char *v14;
  SnippetUI::VisualProperty *v15;
  char *v16;
  SnippetUI::ActionProperty *v17;
  char *v18;
  SnippetUI::TextProperty *v19;
  char *v20;

  v2 = *((_QWORD *)this + 2);
  v3 = *(unsigned __int8 *)(v2 + 23);
  if (*(char *)(v2 + 23) < 0)
  {
    if (*(_QWORD *)(v2 + 8))
      goto LABEL_3;
LABEL_7:
    v5 = 0;
    goto LABEL_8;
  }
  if (!*(_BYTE *)(v2 + 23))
    goto LABEL_7;
LABEL_3:
  v4 = *(_QWORD *)(v2 + 8);
  if ((v3 & 0x80u) == 0)
    v4 = v3;
  v5 = (const google::protobuf::UnknownFieldSet *)(v4 + ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_8:
  v6 = *((_QWORD *)this + 3);
  v7 = *(unsigned __int8 *)(v6 + 23);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(_QWORD *)(v6 + 8))
      goto LABEL_13;
  }
  else if (!*(_BYTE *)(v6 + 23))
  {
    goto LABEL_13;
  }
  v8 = *(_QWORD *)(v6 + 8);
  if ((v7 & 0x80u) == 0)
    v8 = v7;
  v5 = (const google::protobuf::UnknownFieldSet *)((char *)v5 + v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_13:
  if (this != (SnippetUI::SummaryItem_Standard *)&SnippetUI::_SummaryItem_Standard_default_instance_)
  {
    v9 = (SnippetUI::TextProperty *)*((_QWORD *)this + 4);
    if (v9)
    {
      v10 = SnippetUI::TextProperty::ByteSizeLong(v9);
      v5 = (const google::protobuf::UnknownFieldSet *)&v10[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v11 = (SnippetUI::MultilineTextProperty *)*((_QWORD *)this + 5);
    if (v11)
    {
      v12 = SnippetUI::MultilineTextProperty::ByteSizeLong(v11);
      v5 = (const google::protobuf::UnknownFieldSet *)&v12[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v12 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v13 = (SnippetUI::MultilineTextProperty *)*((_QWORD *)this + 6);
    if (v13)
    {
      v14 = SnippetUI::MultilineTextProperty::ByteSizeLong(v13);
      v5 = (const google::protobuf::UnknownFieldSet *)&v14[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v14 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v15 = (SnippetUI::VisualProperty *)*((_QWORD *)this + 7);
    if (v15)
    {
      v16 = SnippetUI::VisualProperty::ByteSizeLong(v15);
      v5 = (const google::protobuf::UnknownFieldSet *)&v16[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v16 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v17 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 8);
    if (v17)
    {
      v18 = SnippetUI::ActionProperty::ByteSizeLong(v17);
      v5 = (const google::protobuf::UnknownFieldSet *)&v18[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v18 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v19 = (SnippetUI::TextProperty *)*((_QWORD *)this + 9);
    if (v19)
    {
      v20 = SnippetUI::TextProperty::ByteSizeLong(v19);
      v5 = (const google::protobuf::UnknownFieldSet *)&v20[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v20 | 1) ^ 0x1F) + 73) >> 6)];
    }
  }
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::SummaryItem_Standard *)((char *)this + 8), v5, (_DWORD *)this + 20);
  *((_DWORD *)this + 20) = (_DWORD)v5;
  return (char *)v5;
}

uint64_t SnippetUI::SummaryItem_Standard::GetCachedSize(SnippetUI::SummaryItem_Standard *this)
{
  return *((unsigned int *)this + 20);
}

google::protobuf::internal *SnippetUI::SummaryItem_Standard::_InternalParse(SnippetUI::SummaryItem_Standard *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  std::string **v5;
  std::string **v6;
  uint64_t *v7;
  google::protobuf::internal::ParseContext *v8;
  google::protobuf::internal *TagFallback;
  char *v10;
  SnippetUI::TextProperty *v11;
  SnippetUI::MultilineTextProperty *v12;
  char *v13;
  SnippetUI::VisualProperty *v14;
  SnippetUI::ActionProperty *v15;
  std::string *v16;
  std::string::value_type *v17;
  google::protobuf::internal::ParseContext *v18;
  char *v19;
  BOOL v20;
  google::protobuf::internal *v22;

  v22 = a2;
  v5 = (std::string **)((char *)this + 24);
  v6 = (std::string **)((char *)this + 16);
  v7 = (uint64_t *)((char *)this + 8);
  while (2)
  {
    if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v22, *((_DWORD *)a3 + 23)) & 1) != 0)
      return v22;
    TagFallback = (google::protobuf::internal *)((char *)v22 + 1);
    v10 = (char *)*(unsigned __int8 *)v22;
    if ((*(char *)v22 & 0x80000000) == 0)
      goto LABEL_6;
    v10 = (char *)(v10 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v22 + 2);
LABEL_6:
      v22 = TagFallback;
      goto LABEL_7;
    }
    TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v22, v10);
    v22 = TagFallback;
    if (!TagFallback)
      return TagFallback;
LABEL_7:
    switch(v10 >> 3)
    {
      case 1u:
        if (v10 != 10)
          goto LABEL_43;
        v11 = (SnippetUI::TextProperty *)*((_QWORD *)this + 4);
        if (v11)
          goto LABEL_33;
        v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 4) = v11;
        goto LABEL_32;
      case 2u:
        if (v10 != 18)
          goto LABEL_43;
        v12 = (SnippetUI::MultilineTextProperty *)*((_QWORD *)this + 5);
        if (v12)
          goto LABEL_20;
        v12 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::MultilineTextProperty>(0);
        *((_QWORD *)this + 5) = v12;
        goto LABEL_19;
      case 3u:
        if (v10 != 26)
          goto LABEL_43;
        v12 = (SnippetUI::MultilineTextProperty *)*((_QWORD *)this + 6);
        if (v12)
          goto LABEL_20;
        v12 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::MultilineTextProperty>(0);
        *((_QWORD *)this + 6) = v12;
LABEL_19:
        TagFallback = v22;
LABEL_20:
        v13 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::MultilineTextProperty>(a3, v12, TagFallback);
        goto LABEL_48;
      case 4u:
        if (v10 != 34)
          goto LABEL_43;
        v14 = (SnippetUI::VisualProperty *)*((_QWORD *)this + 7);
        if (!v14)
        {
          v14 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::VisualProperty>(0);
          *((_QWORD *)this + 7) = v14;
          TagFallback = v22;
        }
        v13 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::VisualProperty>(a3, v14, TagFallback);
        goto LABEL_48;
      case 5u:
        if (v10 != 42)
          goto LABEL_43;
        v15 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 8);
        if (!v15)
        {
          v15 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
          *((_QWORD *)this + 8) = v15;
          TagFallback = v22;
        }
        v13 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::ActionProperty>(a3, v15, TagFallback);
        goto LABEL_48;
      case 6u:
        if (v10 != 50)
          goto LABEL_43;
        v11 = (SnippetUI::TextProperty *)*((_QWORD *)this + 9);
        if (!v11)
        {
          v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
          *((_QWORD *)this + 9) = v11;
LABEL_32:
          TagFallback = v22;
        }
LABEL_33:
        v13 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::TextProperty>(a3, v11, TagFallback);
        goto LABEL_48;
      case 7u:
        if (v10 != 58)
          goto LABEL_43;
        v16 = *v6;
        if (*v6 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v6, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v16 = *v6;
          TagFallback = v22;
        }
        v17 = (std::string::value_type *)TagFallback;
        v18 = a3;
        v19 = "SnippetUI.SummaryItem_Standard.component_name";
        goto LABEL_42;
      case 8u:
        if (v10 != 66)
          goto LABEL_43;
        v16 = *v5;
        if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v16 = *v5;
          TagFallback = v22;
        }
        v17 = (std::string::value_type *)TagFallback;
        v18 = a3;
        v19 = "SnippetUI.SummaryItem_Standard.link_identifier";
LABEL_42:
        v13 = google::protobuf::internal::InlineGreedyStringParserUTF8(v16, v17, (uint64_t)v18, (google::protobuf::internal *)v19);
        goto LABEL_48;
      default:
LABEL_43:
        if ((_DWORD)v10)
          v20 = (v10 & 7) == 4;
        else
          v20 = 1;
        if (v20)
        {
          *((_DWORD *)a3 + 20) = (_DWORD)v10 - 1;
          return TagFallback;
        }
        v13 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v10, v7, TagFallback, a3, v8);
LABEL_48:
        v22 = (google::protobuf::internal *)v13;
        if (v13)
          continue;
        TagFallback = 0;
        break;
    }
    return TagFallback;
  }
}

const google::protobuf::UnknownFieldSet *SnippetUI::SummaryItem_Standard::InternalSerializeWithCachedSizesToArray(SnippetUI::SummaryItem_Standard *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  char *v5;
  SnippetUI::TextProperty *v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  google::protobuf::UnknownFieldSet *v11;
  _BYTE *v12;
  _BYTE *v13;
  unsigned int v14;
  unsigned int v15;
  SnippetUI::MultilineTextProperty *v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  google::protobuf::UnknownFieldSet *v20;
  _BYTE *v21;
  _BYTE *v22;
  unsigned int v23;
  unsigned int v24;
  SnippetUI::MultilineTextProperty *v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  google::protobuf::UnknownFieldSet *v29;
  _BYTE *v30;
  _BYTE *v31;
  unsigned int v32;
  unsigned int v33;
  SnippetUI::VisualProperty *v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int v37;
  google::protobuf::UnknownFieldSet *v38;
  _BYTE *v39;
  _BYTE *v40;
  unsigned int v41;
  unsigned int v42;
  SnippetUI::ActionProperty *v43;
  unsigned int v44;
  uint64_t v45;
  unsigned int v46;
  google::protobuf::UnknownFieldSet *v47;
  _BYTE *v48;
  _BYTE *v49;
  unsigned int v50;
  unsigned int v51;
  SnippetUI::TextProperty *v52;
  unsigned int v53;
  google::protobuf::UnknownFieldSet *v54;
  unsigned int v55;
  _BYTE *v56;
  _BYTE *v57;
  unsigned int v58;
  unsigned int v59;
  google::protobuf::internal *v60;
  const char *v61;
  google::protobuf::internal *v62;
  const char *v63;
  uint64_t v64;

  v5 = (char *)a2;
  if (this == (SnippetUI::SummaryItem_Standard *)&SnippetUI::_SummaryItem_Standard_default_instance_)
    goto LABEL_73;
  v7 = (SnippetUI::TextProperty *)*((_QWORD *)this + 4);
  if (v7)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
    {
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      v7 = (SnippetUI::TextProperty *)*((_QWORD *)this + 4);
    }
    *v5 = 10;
    v8 = *((_DWORD *)v7 + 15);
    if (v8 > 0x7F)
    {
      v5[1] = v8 | 0x80;
      v10 = v8 >> 7;
      if (v8 >> 14)
      {
        v12 = v5 + 2;
        do
        {
          v13 = v12;
          *v12++ = v10 | 0x80;
          v14 = v10 >> 7;
          v15 = v10 >> 14;
          v10 >>= 7;
        }
        while (v15);
        v11 = (google::protobuf::UnknownFieldSet *)(v13 + 2);
        *v12 = v14;
        goto LABEL_13;
      }
      v5[2] = v10;
      v9 = 3;
    }
    else
    {
      v5[1] = v8;
      v9 = 2;
    }
    v11 = (google::protobuf::UnknownFieldSet *)&v5[v9];
LABEL_13:
    v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v7, v11, a3, a4);
  }
  v16 = (SnippetUI::MultilineTextProperty *)*((_QWORD *)this + 5);
  if (!v16)
    goto LABEL_26;
  if ((unint64_t)v5 >= *(_QWORD *)a3)
  {
    v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v16 = (SnippetUI::MultilineTextProperty *)*((_QWORD *)this + 5);
  }
  *v5 = 18;
  v17 = *((_DWORD *)v16 + 15);
  if (v17 > 0x7F)
  {
    v5[1] = v17 | 0x80;
    v19 = v17 >> 7;
    if (v17 >> 14)
    {
      v21 = v5 + 2;
      do
      {
        v22 = v21;
        *v21++ = v19 | 0x80;
        v23 = v19 >> 7;
        v24 = v19 >> 14;
        v19 >>= 7;
      }
      while (v24);
      v20 = (google::protobuf::UnknownFieldSet *)(v22 + 2);
      *v21 = v23;
      goto LABEL_25;
    }
    v5[2] = v19;
    v18 = 3;
  }
  else
  {
    v5[1] = v17;
    v18 = 2;
  }
  v20 = (google::protobuf::UnknownFieldSet *)&v5[v18];
LABEL_25:
  v5 = (char *)SnippetUI::MultilineTextProperty::InternalSerializeWithCachedSizesToArray(v16, v20, a3, a4);
LABEL_26:
  v25 = (SnippetUI::MultilineTextProperty *)*((_QWORD *)this + 6);
  if (!v25)
    goto LABEL_38;
  if ((unint64_t)v5 >= *(_QWORD *)a3)
  {
    v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v25 = (SnippetUI::MultilineTextProperty *)*((_QWORD *)this + 6);
  }
  *v5 = 26;
  v26 = *((_DWORD *)v25 + 15);
  if (v26 > 0x7F)
  {
    v5[1] = v26 | 0x80;
    v28 = v26 >> 7;
    if (v26 >> 14)
    {
      v30 = v5 + 2;
      do
      {
        v31 = v30;
        *v30++ = v28 | 0x80;
        v32 = v28 >> 7;
        v33 = v28 >> 14;
        v28 >>= 7;
      }
      while (v33);
      v29 = (google::protobuf::UnknownFieldSet *)(v31 + 2);
      *v30 = v32;
      goto LABEL_37;
    }
    v5[2] = v28;
    v27 = 3;
  }
  else
  {
    v5[1] = v26;
    v27 = 2;
  }
  v29 = (google::protobuf::UnknownFieldSet *)&v5[v27];
LABEL_37:
  v5 = (char *)SnippetUI::MultilineTextProperty::InternalSerializeWithCachedSizesToArray(v25, v29, a3, a4);
LABEL_38:
  v34 = (SnippetUI::VisualProperty *)*((_QWORD *)this + 7);
  if (!v34)
    goto LABEL_50;
  if ((unint64_t)v5 >= *(_QWORD *)a3)
  {
    v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v34 = (SnippetUI::VisualProperty *)*((_QWORD *)this + 7);
  }
  *v5 = 34;
  v35 = *((_DWORD *)v34 + 15);
  if (v35 > 0x7F)
  {
    v5[1] = v35 | 0x80;
    v37 = v35 >> 7;
    if (v35 >> 14)
    {
      v39 = v5 + 2;
      do
      {
        v40 = v39;
        *v39++ = v37 | 0x80;
        v41 = v37 >> 7;
        v42 = v37 >> 14;
        v37 >>= 7;
      }
      while (v42);
      v38 = (google::protobuf::UnknownFieldSet *)(v40 + 2);
      *v39 = v41;
      goto LABEL_49;
    }
    v5[2] = v37;
    v36 = 3;
  }
  else
  {
    v5[1] = v35;
    v36 = 2;
  }
  v38 = (google::protobuf::UnknownFieldSet *)&v5[v36];
LABEL_49:
  v5 = (char *)SnippetUI::VisualProperty::InternalSerializeWithCachedSizesToArray(v34, v38, a3, a4);
LABEL_50:
  v43 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 8);
  if (!v43)
    goto LABEL_62;
  if ((unint64_t)v5 >= *(_QWORD *)a3)
  {
    v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v43 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 8);
  }
  *v5 = 42;
  v44 = *((_DWORD *)v43 + 12);
  if (v44 > 0x7F)
  {
    v5[1] = v44 | 0x80;
    v46 = v44 >> 7;
    if (v44 >> 14)
    {
      v48 = v5 + 2;
      do
      {
        v49 = v48;
        *v48++ = v46 | 0x80;
        v50 = v46 >> 7;
        v51 = v46 >> 14;
        v46 >>= 7;
      }
      while (v51);
      v47 = (google::protobuf::UnknownFieldSet *)(v49 + 2);
      *v48 = v50;
      goto LABEL_61;
    }
    v5[2] = v46;
    v45 = 3;
  }
  else
  {
    v5[1] = v44;
    v45 = 2;
  }
  v47 = (google::protobuf::UnknownFieldSet *)&v5[v45];
LABEL_61:
  v5 = (char *)SnippetUI::ActionProperty::InternalSerializeWithCachedSizesToArray(v43, v47, a3, a4);
LABEL_62:
  v52 = (SnippetUI::TextProperty *)*((_QWORD *)this + 9);
  if (v52)
  {
    if ((unint64_t)v5 >= *(_QWORD *)a3)
    {
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
      v52 = (SnippetUI::TextProperty *)*((_QWORD *)this + 9);
    }
    *v5 = 50;
    v53 = *((_DWORD *)v52 + 15);
    if (v53 > 0x7F)
    {
      v5[1] = v53 | 0x80;
      v55 = v53 >> 7;
      if (v53 >> 14)
      {
        v56 = v5 + 2;
        do
        {
          v57 = v56;
          *v56++ = v55 | 0x80;
          v58 = v55 >> 7;
          v59 = v55 >> 14;
          v55 >>= 7;
        }
        while (v59);
        v54 = (google::protobuf::UnknownFieldSet *)(v57 + 2);
        *v56 = v58;
      }
      else
      {
        v5[2] = v55;
        v54 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
      }
    }
    else
    {
      v5[1] = v53;
      v54 = (google::protobuf::UnknownFieldSet *)(v5 + 2);
    }
    v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v52, v54, a3, a4);
  }
LABEL_73:
  v60 = (google::protobuf::internal *)*((_QWORD *)this + 2);
  if (*((char *)v60 + 23) < 0)
  {
    v61 = (const char *)*((_QWORD *)v60 + 1);
    if (!v61)
      goto LABEL_79;
    v60 = *(google::protobuf::internal **)v60;
    goto LABEL_78;
  }
  v61 = (const char *)*((unsigned __int8 *)v60 + 23);
  if (*((_BYTE *)v60 + 23))
  {
LABEL_78:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v60, v61, 1, (google::protobuf::internal *)"SnippetUI.SummaryItem_Standard.component_name");
    v5 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 7, *((_QWORD *)this + 2), v5);
  }
LABEL_79:
  v62 = (google::protobuf::internal *)*((_QWORD *)this + 3);
  if (*((char *)v62 + 23) < 0)
  {
    v63 = (const char *)*((_QWORD *)v62 + 1);
    if (!v63)
      goto LABEL_85;
    v62 = *(google::protobuf::internal **)v62;
    goto LABEL_84;
  }
  v63 = (const char *)*((unsigned __int8 *)v62 + 23);
  if (*((_BYTE *)v62 + 23))
  {
LABEL_84:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v62, v63, 1, (google::protobuf::internal *)"SnippetUI.SummaryItem_Standard.link_identifier");
    v5 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 8, *((_QWORD *)this + 3), v5);
  }
LABEL_85:
  v64 = *((_QWORD *)this + 1);
  if ((v64 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v64 & 0xFFFFFFFFFFFFFFFELL), (const google::protobuf::UnknownFieldSet *)v5, a3, a4);
  else
    return (const google::protobuf::UnknownFieldSet *)v5;
}

void SnippetUI::SummaryItem_Standard::CopyFrom(SnippetUI::SummaryItem_Standard *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    SnippetUI::SummaryItem_Standard::Clear(this);
    SnippetUI::SummaryItem_Standard::MergeFrom(this, a2);
  }
}

void SnippetUI::SummaryItem_Standard::MergeFrom(SnippetUI::SummaryItem_Standard *this, const google::protobuf::Message *lpsrc)
{
  std::string *v4;
  const SnippetUI::SummaryItem_Standard *v5;
  google::protobuf::Message *v6;
  char v7;
  std::string v8[2];

  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/SummaryItem.pb.cc", 1172);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5)
    SnippetUI::SummaryItem_Standard::MergeFrom(this, v5);
  else
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
}

void sub_1BF92DBFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::SummaryItem_Standard::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 80) = a2;
  return this;
}

uint64_t SnippetUI::SummaryItem_Standard::GetMetadata(SnippetUI::SummaryItem_Standard *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_SummaryItem_2eproto);
  return file_level_metadata_SummaryItem_2eproto;
}

void *SnippetUI::SummaryItem_Standard::default_instance(SnippetUI::SummaryItem_Standard *this)
{
  if (atomic_load(scc_info_SummaryItem_Standard_SummaryItem_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_SummaryItem_Standard_SummaryItem_2eproto);
  return &SnippetUI::_SummaryItem_Standard_default_instance_;
}

void SnippetUI::SummaryItem_Standard::MergeFrom(SnippetUI::SummaryItem_Standard *this, const SnippetUI::SummaryItem_Standard *a2)
{
  std::string *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  int **v10;
  int **v11;
  int **v12;
  int **v13;
  int **v14;
  int **v15;
  int **v16;
  int **v17;
  int **v18;
  int **v19;
  int **v20;
  int **v21;
  int **v22;
  int **v23;
  int **v24;
  int **v25;
  int **v26;
  int **v27;
  char v28;
  std::string v29[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v29, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/SummaryItem.pb.cc", 1187);
    v4 = google::protobuf::internal::LogMessage::operator<<(v29, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v28, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v29[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::SummaryItem_Standard *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  v6 = *((_QWORD *)a2 + 2);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(_QWORD *)(v6 + 8))
      goto LABEL_13;
  }
  else if (!*(_BYTE *)(v6 + 23))
  {
    goto LABEL_13;
  }
  v7 = (uint64_t *)*((_QWORD *)this + 2);
  if (v7 != (uint64_t *)v6)
  {
    if (v7 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, v6);
    else
      std::string::operator=(*((std::string **)this + 2), (const std::string *)v6);
  }
LABEL_13:
  v8 = *((_QWORD *)a2 + 3);
  if (*(char *)(v8 + 23) < 0)
  {
    if (!*(_QWORD *)(v8 + 8))
      goto LABEL_21;
  }
  else if (!*(_BYTE *)(v8 + 23))
  {
    goto LABEL_21;
  }
  v9 = (uint64_t *)*((_QWORD *)this + 3);
  if (v9 != (uint64_t *)v8)
  {
    if (v9 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 3, v8);
    else
      std::string::operator=(*((std::string **)this + 3), (const std::string *)v8);
  }
LABEL_21:
  if (a2 != (const SnippetUI::SummaryItem_Standard *)&SnippetUI::_SummaryItem_Standard_default_instance_)
  {
    v10 = (int **)*((_QWORD *)a2 + 4);
    if (v10)
    {
      v11 = (int **)*((_QWORD *)this + 4);
      if (!v11)
      {
        v11 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 4) = v11;
        v10 = (int **)*((_QWORD *)a2 + 4);
      }
      if (v10)
        v12 = v10;
      else
        v12 = (int **)&SnippetUI::_TextProperty_default_instance_;
      SnippetUI::TextProperty::MergeFrom(v11, v12);
    }
    v13 = (int **)*((_QWORD *)a2 + 5);
    if (v13)
    {
      v14 = (int **)*((_QWORD *)this + 5);
      if (!v14)
      {
        v14 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::MultilineTextProperty>(0);
        *((_QWORD *)this + 5) = v14;
        v13 = (int **)*((_QWORD *)a2 + 5);
      }
      if (v13)
        v15 = v13;
      else
        v15 = (int **)&SnippetUI::_MultilineTextProperty_default_instance_;
      SnippetUI::MultilineTextProperty::MergeFrom(v14, v15);
    }
    v16 = (int **)*((_QWORD *)a2 + 6);
    if (v16)
    {
      v17 = (int **)*((_QWORD *)this + 6);
      if (!v17)
      {
        v17 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::MultilineTextProperty>(0);
        *((_QWORD *)this + 6) = v17;
        v16 = (int **)*((_QWORD *)a2 + 6);
      }
      if (v16)
        v18 = v16;
      else
        v18 = (int **)&SnippetUI::_MultilineTextProperty_default_instance_;
      SnippetUI::MultilineTextProperty::MergeFrom(v17, v18);
    }
    v19 = (int **)*((_QWORD *)a2 + 7);
    if (v19)
    {
      v20 = (int **)*((_QWORD *)this + 7);
      if (!v20)
      {
        v20 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::VisualProperty>(0);
        *((_QWORD *)this + 7) = v20;
        v19 = (int **)*((_QWORD *)a2 + 7);
      }
      if (v19)
        v21 = v19;
      else
        v21 = (int **)&SnippetUI::_VisualProperty_default_instance_;
      SnippetUI::VisualProperty::MergeFrom(v20, v21);
    }
    v22 = (int **)*((_QWORD *)a2 + 8);
    if (v22)
    {
      v23 = (int **)*((_QWORD *)this + 8);
      if (!v23)
      {
        v23 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
        *((_QWORD *)this + 8) = v23;
        v22 = (int **)*((_QWORD *)a2 + 8);
      }
      if (v22)
        v24 = v22;
      else
        v24 = (int **)&SnippetUI::_ActionProperty_default_instance_;
      SnippetUI::ActionProperty::MergeFrom(v23, v24);
    }
    v25 = (int **)*((_QWORD *)a2 + 9);
    if (v25)
    {
      v26 = (int **)*((_QWORD *)this + 9);
      if (!v26)
      {
        v26 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 9) = v26;
        v25 = (int **)*((_QWORD *)a2 + 9);
      }
      if (v25)
        v27 = v25;
      else
        v27 = (int **)&SnippetUI::_TextProperty_default_instance_;
      SnippetUI::TextProperty::MergeFrom(v26, v27);
    }
  }
}

void sub_1BF92DEC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

SnippetUI::SummaryItem_Standard *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::SummaryItem_Standard>(google::protobuf::internal::ArenaImpl *this)
{
  SnippetUI::SummaryItem_Standard *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (SnippetUI::SummaryItem_Standard *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x58uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::SummaryItem_Standard>);
    SnippetUI::SummaryItem_Standard::SummaryItem_Standard(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (SnippetUI::SummaryItem_Standard *)operator new();
    SnippetUI::SummaryItem_Standard::SummaryItem_Standard(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_1BF92DF60(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D890](v1, 0x10A1C401DBA19FDLL);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::SummaryItem_Standard>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

void InitDefaultsscc_info_SummaryItem_ShortNumber_SummaryItem_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/SummaryItem.pb.cc", a4);
  SnippetUI::SummaryItem_ShortNumber::SummaryItem_ShortNumber((SnippetUI::SummaryItem_ShortNumber *)&SnippetUI::_SummaryItem_ShortNumber_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_SummaryItem_ShortNumber_default_instance_, v4);
  qword_1ED1D56C8 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1ED1D56D0 = &SnippetUI::_TextProperty_default_instance_;
  qword_1ED1D56D8 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1ED1D56E0 = &SnippetUI::_MultilineTextProperty_default_instance_;
  qword_1ED1D56E8 = (uint64_t)&SnippetUI::_MultilineTextProperty_default_instance_;
  unk_1ED1D56F0 = &SnippetUI::_VisualProperty_default_instance_;
  qword_1ED1D56F8 = (uint64_t)&SnippetUI::_ActionProperty_default_instance_;
  unk_1ED1D5700 = &SnippetUI::_TextProperty_default_instance_;
  qword_1ED1D5708 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
}

SnippetUI::SummaryItem_ShortNumber *SnippetUI::SummaryItem_ShortNumber::SummaryItem_ShortNumber(SnippetUI::SummaryItem_ShortNumber *this)
{
  *(_QWORD *)this = &off_1E792DF30;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 26) = 0;
  if (atomic_load(scc_info_SummaryItem_ShortNumber_SummaryItem_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_SummaryItem_ShortNumber_SummaryItem_2eproto);
  *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_QWORD *)this + 12) = 0;
  return this;
}

void sub_1BF92E1C8(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::SummaryItem_ShortNumber::~SummaryItem_ShortNumber(SnippetUI::SummaryItem_ShortNumber *this)
{
  SnippetUI::SummaryItem_ShortNumber::~SummaryItem_ShortNumber(this);
  JUMPOUT(0x1C3B8D890);
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)this = &off_1E792DF30;
  v2 = *((_QWORD *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x1C3B8D890](v2, 0x1012C40EC159624);
  }
  v4 = *((_QWORD *)this + 3);
  if ((uint64_t *)v4 != &google::protobuf::internal::fixed_address_empty_string && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0)
      operator delete(*(void **)v4);
    MEMORY[0x1C3B8D890](v4, 0x1012C40EC159624);
  }
  if (this != (SnippetUI::SummaryItem_ShortNumber *)&SnippetUI::_SummaryItem_ShortNumber_default_instance_)
  {
    v6 = *((_QWORD *)this + 4);
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    v7 = *((_QWORD *)this + 5);
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    v8 = *((_QWORD *)this + 6);
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    v9 = *((_QWORD *)this + 7);
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    v10 = *((_QWORD *)this + 8);
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    v11 = *((_QWORD *)this + 9);
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = *((_QWORD *)this + 10);
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    v13 = *((_QWORD *)this + 11);
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    v14 = *((_QWORD *)this + 12);
    if (v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

SnippetUI::SummaryItem_ShortNumber *SnippetUI::SummaryItem_ShortNumber::New(SnippetUI::SummaryItem_ShortNumber *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::SummaryItem_ShortNumber>(0);
}

SnippetUI::SummaryItem_ShortNumber *SnippetUI::SummaryItem_ShortNumber::New(SnippetUI::SummaryItem_ShortNumber *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::SummaryItem_ShortNumber>(a2);
}

void SnippetUI::SummaryItem_ShortNumber::Clear(SnippetUI::SummaryItem_ShortNumber *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  google::protobuf::internal::InternalMetadataWithArena *v13;
  char v14;

  v2 = *((_QWORD *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(_BYTE **)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v2 = 0;
      *(_BYTE *)(v2 + 23) = 0;
    }
  }
  v3 = *((_QWORD *)this + 3);
  if ((uint64_t *)v3 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v3 + 23) < 0)
    {
      **(_BYTE **)v3 = 0;
      *(_QWORD *)(v3 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v3 = 0;
      *(_BYTE *)(v3 + 23) = 0;
    }
  }
  v4 = *((_QWORD *)this + 4);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  *((_QWORD *)this + 4) = 0;
  v5 = *((_QWORD *)this + 5);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *((_QWORD *)this + 5) = 0;
  v6 = *((_QWORD *)this + 6);
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  *((_QWORD *)this + 6) = 0;
  v7 = *((_QWORD *)this + 7);
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  *((_QWORD *)this + 7) = 0;
  v8 = *((_QWORD *)this + 8);
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  *((_QWORD *)this + 8) = 0;
  v9 = *((_QWORD *)this + 9);
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  *((_QWORD *)this + 9) = 0;
  v10 = *((_QWORD *)this + 10);
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  *((_QWORD *)this + 10) = 0;
  v11 = *((_QWORD *)this + 11);
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  *((_QWORD *)this + 11) = 0;
  v12 = *((_QWORD *)this + 12);
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  v14 = *((_BYTE *)this + 8);
  v13 = (SnippetUI::SummaryItem_ShortNumber *)((char *)this + 8);
  *((_QWORD *)v13 + 11) = 0;
  if ((v14 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v13);
}

uint64_t SnippetUI::SummaryItem_ShortNumber::IsInitialized(SnippetUI::SummaryItem_ShortNumber *this)
{
  return 1;
}

char *SnippetUI::SummaryItem_ShortNumber::ByteSizeLong(SnippetUI::SummaryItem_ShortNumber *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  const google::protobuf::UnknownFieldSet *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  SnippetUI::TextProperty *v9;
  char *v10;
  SnippetUI::TextProperty *v11;
  char *v12;
  SnippetUI::TextProperty *v13;
  char *v14;
  SnippetUI::MultilineTextProperty *v15;
  char *v16;
  SnippetUI::MultilineTextProperty *v17;
  char *v18;
  SnippetUI::VisualProperty *v19;
  char *v20;
  SnippetUI::ActionProperty *v21;
  char *v22;
  SnippetUI::TextProperty *v23;
  char *v24;
  SnippetUI::TextProperty *v25;
  char *v26;

  v2 = *((_QWORD *)this + 2);
  v3 = *(unsigned __int8 *)(v2 + 23);
  if (*(char *)(v2 + 23) < 0)
  {
    if (*(_QWORD *)(v2 + 8))
      goto LABEL_3;
LABEL_7:
    v5 = 0;
    goto LABEL_8;
  }
  if (!*(_BYTE *)(v2 + 23))
    goto LABEL_7;
LABEL_3:
  v4 = *(_QWORD *)(v2 + 8);
  if ((v3 & 0x80u) == 0)
    v4 = v3;
  v5 = (const google::protobuf::UnknownFieldSet *)(v4 + ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_8:
  v6 = *((_QWORD *)this + 3);
  v7 = *(unsigned __int8 *)(v6 + 23);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(_QWORD *)(v6 + 8))
      goto LABEL_13;
  }
  else if (!*(_BYTE *)(v6 + 23))
  {
    goto LABEL_13;
  }
  v8 = *(_QWORD *)(v6 + 8);
  if ((v7 & 0x80u) == 0)
    v8 = v7;
  v5 = (const google::protobuf::UnknownFieldSet *)((char *)v5 + v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_13:
  if (this != (SnippetUI::SummaryItem_ShortNumber *)&SnippetUI::_SummaryItem_ShortNumber_default_instance_)
  {
    v9 = (SnippetUI::TextProperty *)*((_QWORD *)this + 4);
    if (v9)
    {
      v10 = SnippetUI::TextProperty::ByteSizeLong(v9);
      v5 = (const google::protobuf::UnknownFieldSet *)&v10[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v11 = (SnippetUI::TextProperty *)*((_QWORD *)this + 5);
    if (v11)
    {
      v12 = SnippetUI::TextProperty::ByteSizeLong(v11);
      v5 = (const google::protobuf::UnknownFieldSet *)&v12[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v12 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v13 = (SnippetUI::TextProperty *)*((_QWORD *)this + 6);
    if (v13)
    {
      v14 = SnippetUI::TextProperty::ByteSizeLong(v13);
      v5 = (const google::protobuf::UnknownFieldSet *)&v14[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v14 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v15 = (SnippetUI::MultilineTextProperty *)*((_QWORD *)this + 7);
    if (v15)
    {
      v16 = SnippetUI::MultilineTextProperty::ByteSizeLong(v15);
      v5 = (const google::protobuf::UnknownFieldSet *)&v16[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v16 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v17 = (SnippetUI::MultilineTextProperty *)*((_QWORD *)this + 8);
    if (v17)
    {
      v18 = SnippetUI::MultilineTextProperty::ByteSizeLong(v17);
      v5 = (const google::protobuf::UnknownFieldSet *)&v18[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v18 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v19 = (SnippetUI::VisualProperty *)*((_QWORD *)this + 9);
    if (v19)
    {
      v20 = SnippetUI::VisualProperty::ByteSizeLong(v19);
      v5 = (const google::protobuf::UnknownFieldSet *)&v20[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v20 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v21 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 10);
    if (v21)
    {
      v22 = SnippetUI::ActionProperty::ByteSizeLong(v21);
      v5 = (const google::protobuf::UnknownFieldSet *)&v22[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v22 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v23 = (SnippetUI::TextProperty *)*((_QWORD *)this + 11);
    if (v23)
    {
      v24 = SnippetUI::TextProperty::ByteSizeLong(v23);
      v5 = (const google::protobuf::UnknownFieldSet *)&v24[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v24 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v25 = (SnippetUI::TextProperty *)*((_QWORD *)this + 12);
    if (v25)
    {
      v26 = SnippetUI::TextProperty::ByteSizeLong(v25);
      v5 = (const google::protobuf::UnknownFieldSet *)&v26[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v26 | 1) ^ 0x1F) + 73) >> 6)];
    }
  }
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::SummaryItem_ShortNumber *)((char *)this + 8), v5, (_DWORD *)this + 26);
  *((_DWORD *)this + 26) = (_DWORD)v5;
  return (char *)v5;
}

uint64_t SnippetUI::SummaryItem_ShortNumber::GetCachedSize(SnippetUI::SummaryItem_ShortNumber *this)
{
  return *((unsigned int *)this + 26);
}

google::protobuf::internal *SnippetUI::SummaryItem_ShortNumber::_InternalParse(SnippetUI::SummaryItem_ShortNumber *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  std::string **v5;
  std::string **v6;
  uint64_t *v7;
  google::protobuf::internal::ParseContext *v8;
  google::protobuf::internal *TagFallback;
  char *v10;
  SnippetUI::TextProperty *v11;
  SnippetUI::MultilineTextProperty *v12;
  char *v13;
  SnippetUI::VisualProperty *v14;
  SnippetUI::ActionProperty *v15;
  std::string *v16;
  std::string::value_type *v17;
  google::protobuf::internal::ParseContext *v18;
  char *v19;
  BOOL v20;
  google::protobuf::internal *v22;

  v22 = a2;
  v5 = (std::string **)((char *)this + 24);
  v6 = (std::string **)((char *)this + 16);
  v7 = (uint64_t *)((char *)this + 8);
  while (2)
  {
    if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v22, *((_DWORD *)a3 + 23)) & 1) != 0)
      return v22;
    TagFallback = (google::protobuf::internal *)((char *)v22 + 1);
    v10 = (char *)*(unsigned __int8 *)v22;
    if ((*(char *)v22 & 0x80000000) == 0)
      goto LABEL_6;
    v10 = (char *)(v10 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v22 + 2);
LABEL_6:
      v22 = TagFallback;
      goto LABEL_7;
    }
    TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v22, v10);
    v22 = TagFallback;
    if (!TagFallback)
      return TagFallback;
LABEL_7:
    switch(v10 >> 3)
    {
      case 1u:
        if (v10 != 10)
          goto LABEL_54;
        v11 = (SnippetUI::TextProperty *)*((_QWORD *)this + 4);
        if (v11)
          goto LABEL_51;
        v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 4) = v11;
        goto LABEL_50;
      case 2u:
        if (v10 != 18)
          goto LABEL_54;
        v11 = (SnippetUI::TextProperty *)*((_QWORD *)this + 5);
        if (v11)
          goto LABEL_51;
        v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 5) = v11;
        goto LABEL_50;
      case 3u:
        if (v10 != 26)
          goto LABEL_54;
        v11 = (SnippetUI::TextProperty *)*((_QWORD *)this + 6);
        if (v11)
          goto LABEL_51;
        v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 6) = v11;
        goto LABEL_50;
      case 4u:
        if (v10 != 34)
          goto LABEL_54;
        v12 = (SnippetUI::MultilineTextProperty *)*((_QWORD *)this + 7);
        if (v12)
          goto LABEL_26;
        v12 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::MultilineTextProperty>(0);
        *((_QWORD *)this + 7) = v12;
        goto LABEL_25;
      case 5u:
        if (v10 != 42)
          goto LABEL_54;
        v12 = (SnippetUI::MultilineTextProperty *)*((_QWORD *)this + 8);
        if (v12)
          goto LABEL_26;
        v12 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::MultilineTextProperty>(0);
        *((_QWORD *)this + 8) = v12;
LABEL_25:
        TagFallback = v22;
LABEL_26:
        v13 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::MultilineTextProperty>(a3, v12, TagFallback);
        goto LABEL_52;
      case 6u:
        if (v10 != 50)
          goto LABEL_54;
        v14 = (SnippetUI::VisualProperty *)*((_QWORD *)this + 9);
        if (!v14)
        {
          v14 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::VisualProperty>(0);
          *((_QWORD *)this + 9) = v14;
          TagFallback = v22;
        }
        v13 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::VisualProperty>(a3, v14, TagFallback);
        goto LABEL_52;
      case 7u:
        if (v10 != 58)
          goto LABEL_54;
        v15 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 10);
        if (!v15)
        {
          v15 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
          *((_QWORD *)this + 10) = v15;
          TagFallback = v22;
        }
        v13 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::ActionProperty>(a3, v15, TagFallback);
        goto LABEL_52;
      case 8u:
        if (v10 != 66)
          goto LABEL_54;
        v16 = *v6;
        if (*v6 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v6, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v16 = *v6;
          TagFallback = v22;
        }
        v17 = (std::string::value_type *)TagFallback;
        v18 = a3;
        v19 = "SnippetUI.SummaryItem_ShortNumber.component_name";
        goto LABEL_46;
      case 9u:
        if (v10 != 74)
          goto LABEL_54;
        v11 = (SnippetUI::TextProperty *)*((_QWORD *)this + 11);
        if (v11)
          goto LABEL_51;
        v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 11) = v11;
        goto LABEL_50;
      case 0xAu:
        if (v10 != 82)
          goto LABEL_54;
        v16 = *v5;
        if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v16 = *v5;
          TagFallback = v22;
        }
        v17 = (std::string::value_type *)TagFallback;
        v18 = a3;
        v19 = "SnippetUI.SummaryItem_ShortNumber.link_identifier";
LABEL_46:
        v13 = google::protobuf::internal::InlineGreedyStringParserUTF8(v16, v17, (uint64_t)v18, (google::protobuf::internal *)v19);
        goto LABEL_52;
      case 0xBu:
        if (v10 != 90)
          goto LABEL_54;
        v11 = (SnippetUI::TextProperty *)*((_QWORD *)this + 12);
        if (v11)
          goto LABEL_51;
        v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 12) = v11;
LABEL_50:
        TagFallback = v22;
LABEL_51:
        v13 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::TextProperty>(a3, v11, TagFallback);
        goto LABEL_52;
      default:
LABEL_54:
        if ((_DWORD)v10)
          v20 = (v10 & 7) == 4;
        else
          v20 = 1;
        if (v20)
        {
          *((_DWORD *)a3 + 20) = (_DWORD)v10 - 1;
          return TagFallback;
        }
        v13 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v10, v7, TagFallback, a3, v8);
LABEL_52:
        v22 = (google::protobuf::internal *)v13;
        if (v13)
          continue;
        TagFallback = 0;
        break;
    }
    return TagFallback;
  }
}

const google::protobuf::UnknownFieldSet *SnippetUI::SummaryItem_ShortNumber::InternalSerializeWithCachedSizesToArray(SnippetUI::SummaryItem_ShortNumber *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  char *v5;
  SnippetUI::TextProperty *v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  google::protobuf::UnknownFieldSet *v11;
  _BYTE *v12;
  _BYTE *v13;
  unsigned int v14;
  unsigned int v15;
  SnippetUI::TextProperty *v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  google::protobuf::UnknownFieldSet *v20;
  _BYTE *v21;
  _BYTE *v22;
  unsigned int v23;
  unsigned int v24;
  SnippetUI::TextProperty *v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  google::protobuf::UnknownFieldSet *v29;
  _BYTE *v30;
  _BYTE *v31;
  unsigned int v32;
  unsigned int v33;
  SnippetUI::MultilineTextProperty *v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int v37;
  google::protobuf::UnknownFieldSet *v38;
  _BYTE *v39;
  _BYTE *v40;
  unsigned int v41;
  unsigned int v42;
  SnippetUI::MultilineTextProperty *v43;
  unsigned int v44;
  uint64_t v45;
  unsigned int v46;
  google::protobuf::UnknownFieldSet *v47;
  _BYTE *v48;
  _BYTE *v49;
  unsigned int v50;
  unsigned int v51;
  SnippetUI::VisualProperty *v52;
  unsigned int v53;
  uint64_t v54;
  unsigned int v55;
  google::protobuf::UnknownFieldSet *v56;
  _BYTE *v57;
  _BYTE *v58;
  unsigned int v59;
  unsigned int v60;
  SnippetUI::ActionProperty *v61;
  unsigned int v62;
  google::protobuf::UnknownFieldSet *v63;
  unsigned int v64;
  _BYTE *v65;
  _BYTE *v66;
  unsigned int v67;
  unsigned int v68;
  uint64_t *v69;
  const char *v70;
  SnippetUI::TextProperty *v71;
  unsigned int v72;
  google::protobuf::UnknownFieldSet *v73;
  unsigned int v74;
  _BYTE *v75;
  _BYTE *v76;
  unsigned int v77;
  unsigned int v78;
  uint64_t *v79;
  const char *v80;
  SnippetUI::TextProperty *v81;
  unsigned int v82;
  google::protobuf::UnknownFieldSet *v83;
  unsigned int v84;
  _BYTE *v85;
  _BYTE *v86;
  unsigned int v87;
  unsigned int v88;
  uint64_t v89;

  v5 = (char *)a2;
  if (this == (SnippetUI::SummaryItem_ShortNumber *)&SnippetUI::_SummaryItem_ShortNumber_default_instance_)
    goto LABEL_85;
  v7 = (SnippetUI::TextProperty *)*((_QWORD *)this + 4);
  if (v7)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
    {
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      v7 = (SnippetUI::TextProperty *)*((_QWORD *)this + 4);
    }
    *v5 = 10;
    v8 = *((_DWORD *)v7 + 15);
    if (v8 > 0x7F)
    {
      v5[1] = v8 | 0x80;
      v10 = v8 >> 7;
      if (v8 >> 14)
      {
        v12 = v5 + 2;
        do
        {
          v13 = v12;
          *v12++ = v10 | 0x80;
          v14 = v10 >> 7;
          v15 = v10 >> 14;
          v10 >>= 7;
        }
        while (v15);
        v11 = (google::protobuf::UnknownFieldSet *)(v13 + 2);
        *v12 = v14;
        goto LABEL_13;
      }
      v5[2] = v10;
      v9 = 3;
    }
    else
    {
      v5[1] = v8;
      v9 = 2;
    }
    v11 = (google::protobuf::UnknownFieldSet *)&v5[v9];
LABEL_13:
    v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v7, v11, a3, a4);
  }
  v16 = (SnippetUI::TextProperty *)*((_QWORD *)this + 5);
  if (!v16)
    goto LABEL_26;
  if ((unint64_t)v5 >= *(_QWORD *)a3)
  {
    v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v16 = (SnippetUI::TextProperty *)*((_QWORD *)this + 5);
  }
  *v5 = 18;
  v17 = *((_DWORD *)v16 + 15);
  if (v17 > 0x7F)
  {
    v5[1] = v17 | 0x80;
    v19 = v17 >> 7;
    if (v17 >> 14)
    {
      v21 = v5 + 2;
      do
      {
        v22 = v21;
        *v21++ = v19 | 0x80;
        v23 = v19 >> 7;
        v24 = v19 >> 14;
        v19 >>= 7;
      }
      while (v24);
      v20 = (google::protobuf::UnknownFieldSet *)(v22 + 2);
      *v21 = v23;
      goto LABEL_25;
    }
    v5[2] = v19;
    v18 = 3;
  }
  else
  {
    v5[1] = v17;
    v18 = 2;
  }
  v20 = (google::protobuf::UnknownFieldSet *)&v5[v18];
LABEL_25:
  v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v16, v20, a3, a4);
LABEL_26:
  v25 = (SnippetUI::TextProperty *)*((_QWORD *)this + 6);
  if (!v25)
    goto LABEL_38;
  if ((unint64_t)v5 >= *(_QWORD *)a3)
  {
    v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v25 = (SnippetUI::TextProperty *)*((_QWORD *)this + 6);
  }
  *v5 = 26;
  v26 = *((_DWORD *)v25 + 15);
  if (v26 > 0x7F)
  {
    v5[1] = v26 | 0x80;
    v28 = v26 >> 7;
    if (v26 >> 14)
    {
      v30 = v5 + 2;
      do
      {
        v31 = v30;
        *v30++ = v28 | 0x80;
        v32 = v28 >> 7;
        v33 = v28 >> 14;
        v28 >>= 7;
      }
      while (v33);
      v29 = (google::protobuf::UnknownFieldSet *)(v31 + 2);
      *v30 = v32;
      goto LABEL_37;
    }
    v5[2] = v28;
    v27 = 3;
  }
  else
  {
    v5[1] = v26;
    v27 = 2;
  }
  v29 = (google::protobuf::UnknownFieldSet *)&v5[v27];
LABEL_37:
  v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v25, v29, a3, a4);
LABEL_38:
  v34 = (SnippetUI::MultilineTextProperty *)*((_QWORD *)this + 7);
  if (!v34)
    goto LABEL_50;
  if ((unint64_t)v5 >= *(_QWORD *)a3)
  {
    v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v34 = (SnippetUI::MultilineTextProperty *)*((_QWORD *)this + 7);
  }
  *v5 = 34;
  v35 = *((_DWORD *)v34 + 15);
  if (v35 > 0x7F)
  {
    v5[1] = v35 | 0x80;
    v37 = v35 >> 7;
    if (v35 >> 14)
    {
      v39 = v5 + 2;
      do
      {
        v40 = v39;
        *v39++ = v37 | 0x80;
        v41 = v37 >> 7;
        v42 = v37 >> 14;
        v37 >>= 7;
      }
      while (v42);
      v38 = (google::protobuf::UnknownFieldSet *)(v40 + 2);
      *v39 = v41;
      goto LABEL_49;
    }
    v5[2] = v37;
    v36 = 3;
  }
  else
  {
    v5[1] = v35;
    v36 = 2;
  }
  v38 = (google::protobuf::UnknownFieldSet *)&v5[v36];
LABEL_49:
  v5 = (char *)SnippetUI::MultilineTextProperty::InternalSerializeWithCachedSizesToArray(v34, v38, a3, a4);
LABEL_50:
  v43 = (SnippetUI::MultilineTextProperty *)*((_QWORD *)this + 8);
  if (!v43)
    goto LABEL_62;
  if ((unint64_t)v5 >= *(_QWORD *)a3)
  {
    v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v43 = (SnippetUI::MultilineTextProperty *)*((_QWORD *)this + 8);
  }
  *v5 = 42;
  v44 = *((_DWORD *)v43 + 15);
  if (v44 > 0x7F)
  {
    v5[1] = v44 | 0x80;
    v46 = v44 >> 7;
    if (v44 >> 14)
    {
      v48 = v5 + 2;
      do
      {
        v49 = v48;
        *v48++ = v46 | 0x80;
        v50 = v46 >> 7;
        v51 = v46 >> 14;
        v46 >>= 7;
      }
      while (v51);
      v47 = (google::protobuf::UnknownFieldSet *)(v49 + 2);
      *v48 = v50;
      goto LABEL_61;
    }
    v5[2] = v46;
    v45 = 3;
  }
  else
  {
    v5[1] = v44;
    v45 = 2;
  }
  v47 = (google::protobuf::UnknownFieldSet *)&v5[v45];
LABEL_61:
  v5 = (char *)SnippetUI::MultilineTextProperty::InternalSerializeWithCachedSizesToArray(v43, v47, a3, a4);
LABEL_62:
  v52 = (SnippetUI::VisualProperty *)*((_QWORD *)this + 9);
  if (!v52)
    goto LABEL_74;
  if ((unint64_t)v5 >= *(_QWORD *)a3)
  {
    v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v52 = (SnippetUI::VisualProperty *)*((_QWORD *)this + 9);
  }
  *v5 = 50;
  v53 = *((_DWORD *)v52 + 15);
  if (v53 > 0x7F)
  {
    v5[1] = v53 | 0x80;
    v55 = v53 >> 7;
    if (v53 >> 14)
    {
      v57 = v5 + 2;
      do
      {
        v58 = v57;
        *v57++ = v55 | 0x80;
        v59 = v55 >> 7;
        v60 = v55 >> 14;
        v55 >>= 7;
      }
      while (v60);
      v56 = (google::protobuf::UnknownFieldSet *)(v58 + 2);
      *v57 = v59;
      goto LABEL_73;
    }
    v5[2] = v55;
    v54 = 3;
  }
  else
  {
    v5[1] = v53;
    v54 = 2;
  }
  v56 = (google::protobuf::UnknownFieldSet *)&v5[v54];
LABEL_73:
  v5 = (char *)SnippetUI::VisualProperty::InternalSerializeWithCachedSizesToArray(v52, v56, a3, a4);
LABEL_74:
  v61 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 10);
  if (v61)
  {
    if ((unint64_t)v5 >= *(_QWORD *)a3)
    {
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
      v61 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 10);
    }
    *v5 = 58;
    v62 = *((_DWORD *)v61 + 12);
    if (v62 > 0x7F)
    {
      v5[1] = v62 | 0x80;
      v64 = v62 >> 7;
      if (v62 >> 14)
      {
        v65 = v5 + 2;
        do
        {
          v66 = v65;
          *v65++ = v64 | 0x80;
          v67 = v64 >> 7;
          v68 = v64 >> 14;
          v64 >>= 7;
        }
        while (v68);
        v63 = (google::protobuf::UnknownFieldSet *)(v66 + 2);
        *v65 = v67;
      }
      else
      {
        v5[2] = v64;
        v63 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
      }
    }
    else
    {
      v5[1] = v62;
      v63 = (google::protobuf::UnknownFieldSet *)(v5 + 2);
    }
    v5 = (char *)SnippetUI::ActionProperty::InternalSerializeWithCachedSizesToArray(v61, v63, a3, a4);
  }
LABEL_85:
  v69 = (uint64_t *)*((_QWORD *)this + 2);
  if ((*((char *)v69 + 23) & 0x80000000) == 0)
  {
    v70 = (const char *)*((unsigned __int8 *)v69 + 23);
    if (!*((_BYTE *)v69 + 23))
      goto LABEL_91;
    goto LABEL_90;
  }
  v70 = (const char *)v69[1];
  if (v70)
  {
    v69 = (uint64_t *)*v69;
LABEL_90:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String((google::protobuf::internal *)v69, v70, 1, (google::protobuf::internal *)"SnippetUI.SummaryItem_ShortNumber.component_name");
    v5 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 8, *((_QWORD *)this + 2), v5);
  }
LABEL_91:
  if (this != (SnippetUI::SummaryItem_ShortNumber *)&SnippetUI::_SummaryItem_ShortNumber_default_instance_)
  {
    v71 = (SnippetUI::TextProperty *)*((_QWORD *)this + 11);
    if (v71)
    {
      if ((unint64_t)v5 >= *(_QWORD *)a3)
      {
        v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
        v71 = (SnippetUI::TextProperty *)*((_QWORD *)this + 11);
      }
      *v5 = 74;
      v72 = *((_DWORD *)v71 + 15);
      if (v72 > 0x7F)
      {
        v5[1] = v72 | 0x80;
        v74 = v72 >> 7;
        if (v72 >> 14)
        {
          v75 = v5 + 2;
          do
          {
            v76 = v75;
            *v75++ = v74 | 0x80;
            v77 = v74 >> 7;
            v78 = v74 >> 14;
            v74 >>= 7;
          }
          while (v78);
          v73 = (google::protobuf::UnknownFieldSet *)(v76 + 2);
          *v75 = v77;
        }
        else
        {
          v5[2] = v74;
          v73 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
        }
      }
      else
      {
        v5[1] = v72;
        v73 = (google::protobuf::UnknownFieldSet *)(v5 + 2);
      }
      v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v71, v73, a3, a4);
    }
  }
  v79 = (uint64_t *)*((_QWORD *)this + 3);
  if ((*((char *)v79 + 23) & 0x80000000) == 0)
  {
    v80 = (const char *)*((unsigned __int8 *)v79 + 23);
    if (!*((_BYTE *)v79 + 23))
      goto LABEL_109;
    goto LABEL_108;
  }
  v80 = (const char *)v79[1];
  if (v80)
  {
    v79 = (uint64_t *)*v79;
LABEL_108:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String((google::protobuf::internal *)v79, v80, 1, (google::protobuf::internal *)"SnippetUI.SummaryItem_ShortNumber.link_identifier");
    v5 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 10, *((_QWORD *)this + 3), v5);
  }
LABEL_109:
  if (this != (SnippetUI::SummaryItem_ShortNumber *)&SnippetUI::_SummaryItem_ShortNumber_default_instance_)
  {
    v81 = (SnippetUI::TextProperty *)*((_QWORD *)this + 12);
    if (v81)
    {
      if ((unint64_t)v5 >= *(_QWORD *)a3)
      {
        v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
        v81 = (SnippetUI::TextProperty *)*((_QWORD *)this + 12);
      }
      *v5 = 90;
      v82 = *((_DWORD *)v81 + 15);
      if (v82 > 0x7F)
      {
        v5[1] = v82 | 0x80;
        v84 = v82 >> 7;
        if (v82 >> 14)
        {
          v85 = v5 + 2;
          do
          {
            v86 = v85;
            *v85++ = v84 | 0x80;
            v87 = v84 >> 7;
            v88 = v84 >> 14;
            v84 >>= 7;
          }
          while (v88);
          v83 = (google::protobuf::UnknownFieldSet *)(v86 + 2);
          *v85 = v87;
        }
        else
        {
          v5[2] = v84;
          v83 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
        }
      }
      else
      {
        v5[1] = v82;
        v83 = (google::protobuf::UnknownFieldSet *)(v5 + 2);
      }
      v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v81, v83, a3, a4);
    }
  }
  v89 = *((_QWORD *)this + 1);
  if ((v89 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v89 & 0xFFFFFFFFFFFFFFFELL), (const google::protobuf::UnknownFieldSet *)v5, a3, a4);
  else
    return (const google::protobuf::UnknownFieldSet *)v5;
}

void SnippetUI::SummaryItem_ShortNumber::CopyFrom(SnippetUI::SummaryItem_ShortNumber *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    SnippetUI::SummaryItem_ShortNumber::Clear(this);
    SnippetUI::SummaryItem_ShortNumber::MergeFrom(this, a2);
  }
}

void SnippetUI::SummaryItem_ShortNumber::MergeFrom(SnippetUI::SummaryItem_ShortNumber *this, const google::protobuf::Message *lpsrc)
{
  std::string *v4;
  const SnippetUI::SummaryItem_ShortNumber *v5;
  google::protobuf::Message *v6;
  char v7;
  std::string v8[2];

  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/SummaryItem.pb.cc", 1838);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5)
    SnippetUI::SummaryItem_ShortNumber::MergeFrom(this, v5);
  else
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
}

void sub_1BF92F138(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::SummaryItem_ShortNumber::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 104) = a2;
  return this;
}

uint64_t SnippetUI::SummaryItem_ShortNumber::GetMetadata(SnippetUI::SummaryItem_ShortNumber *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_SummaryItem_2eproto);
  return qword_1EF581980;
}

void *SnippetUI::SummaryItem_ShortNumber::default_instance(SnippetUI::SummaryItem_ShortNumber *this)
{
  if (atomic_load(scc_info_SummaryItem_ShortNumber_SummaryItem_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_SummaryItem_ShortNumber_SummaryItem_2eproto);
  return &SnippetUI::_SummaryItem_ShortNumber_default_instance_;
}

void SnippetUI::SummaryItem_ShortNumber::MergeFrom(SnippetUI::SummaryItem_ShortNumber *this, const SnippetUI::SummaryItem_ShortNumber *a2)
{
  std::string *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  int **v10;
  int **v11;
  int **v12;
  int **v13;
  int **v14;
  int **v15;
  int **v16;
  int **v17;
  int **v18;
  int **v19;
  int **v20;
  int **v21;
  int **v22;
  int **v23;
  int **v24;
  int **v25;
  int **v26;
  int **v27;
  int **v28;
  int **v29;
  int **v30;
  int **v31;
  int **v32;
  int **v33;
  int **v34;
  int **v35;
  int **v36;
  char v37;
  std::string v38[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v38, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/SummaryItem.pb.cc", 1853);
    v4 = google::protobuf::internal::LogMessage::operator<<(v38, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v37, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v38[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::SummaryItem_ShortNumber *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  v6 = *((_QWORD *)a2 + 2);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(_QWORD *)(v6 + 8))
      goto LABEL_13;
  }
  else if (!*(_BYTE *)(v6 + 23))
  {
    goto LABEL_13;
  }
  v7 = (uint64_t *)*((_QWORD *)this + 2);
  if (v7 != (uint64_t *)v6)
  {
    if (v7 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, v6);
    else
      std::string::operator=(*((std::string **)this + 2), (const std::string *)v6);
  }
LABEL_13:
  v8 = *((_QWORD *)a2 + 3);
  if (*(char *)(v8 + 23) < 0)
  {
    if (!*(_QWORD *)(v8 + 8))
      goto LABEL_21;
  }
  else if (!*(_BYTE *)(v8 + 23))
  {
    goto LABEL_21;
  }
  v9 = (uint64_t *)*((_QWORD *)this + 3);
  if (v9 != (uint64_t *)v8)
  {
    if (v9 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 3, v8);
    else
      std::string::operator=(*((std::string **)this + 3), (const std::string *)v8);
  }
LABEL_21:
  if (a2 != (const SnippetUI::SummaryItem_ShortNumber *)&SnippetUI::_SummaryItem_ShortNumber_default_instance_)
  {
    v10 = (int **)*((_QWORD *)a2 + 4);
    if (v10)
    {
      v11 = (int **)*((_QWORD *)this + 4);
      if (!v11)
      {
        v11 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 4) = v11;
        v10 = (int **)*((_QWORD *)a2 + 4);
      }
      if (v10)
        v12 = v10;
      else
        v12 = (int **)&SnippetUI::_TextProperty_default_instance_;
      SnippetUI::TextProperty::MergeFrom(v11, v12);
    }
    v13 = (int **)*((_QWORD *)a2 + 5);
    if (v13)
    {
      v14 = (int **)*((_QWORD *)this + 5);
      if (!v14)
      {
        v14 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 5) = v14;
        v13 = (int **)*((_QWORD *)a2 + 5);
      }
      if (v13)
        v15 = v13;
      else
        v15 = (int **)&SnippetUI::_TextProperty_default_instance_;
      SnippetUI::TextProperty::MergeFrom(v14, v15);
    }
    v16 = (int **)*((_QWORD *)a2 + 6);
    if (v16)
    {
      v17 = (int **)*((_QWORD *)this + 6);
      if (!v17)
      {
        v17 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 6) = v17;
        v16 = (int **)*((_QWORD *)a2 + 6);
      }
      if (v16)
        v18 = v16;
      else
        v18 = (int **)&SnippetUI::_TextProperty_default_instance_;
      SnippetUI::TextProperty::MergeFrom(v17, v18);
    }
    v19 = (int **)*((_QWORD *)a2 + 7);
    if (v19)
    {
      v20 = (int **)*((_QWORD *)this + 7);
      if (!v20)
      {
        v20 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::MultilineTextProperty>(0);
        *((_QWORD *)this + 7) = v20;
        v19 = (int **)*((_QWORD *)a2 + 7);
      }
      if (v19)
        v21 = v19;
      else
        v21 = (int **)&SnippetUI::_MultilineTextProperty_default_instance_;
      SnippetUI::MultilineTextProperty::MergeFrom(v20, v21);
    }
    v22 = (int **)*((_QWORD *)a2 + 8);
    if (v22)
    {
      v23 = (int **)*((_QWORD *)this + 8);
      if (!v23)
      {
        v23 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::MultilineTextProperty>(0);
        *((_QWORD *)this + 8) = v23;
        v22 = (int **)*((_QWORD *)a2 + 8);
      }
      if (v22)
        v24 = v22;
      else
        v24 = (int **)&SnippetUI::_MultilineTextProperty_default_instance_;
      SnippetUI::MultilineTextProperty::MergeFrom(v23, v24);
    }
    v25 = (int **)*((_QWORD *)a2 + 9);
    if (v25)
    {
      v26 = (int **)*((_QWORD *)this + 9);
      if (!v26)
      {
        v26 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::VisualProperty>(0);
        *((_QWORD *)this + 9) = v26;
        v25 = (int **)*((_QWORD *)a2 + 9);
      }
      if (v25)
        v27 = v25;
      else
        v27 = (int **)&SnippetUI::_VisualProperty_default_instance_;
      SnippetUI::VisualProperty::MergeFrom(v26, v27);
    }
    v28 = (int **)*((_QWORD *)a2 + 10);
    if (v28)
    {
      v29 = (int **)*((_QWORD *)this + 10);
      if (!v29)
      {
        v29 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
        *((_QWORD *)this + 10) = v29;
        v28 = (int **)*((_QWORD *)a2 + 10);
      }
      if (v28)
        v30 = v28;
      else
        v30 = (int **)&SnippetUI::_ActionProperty_default_instance_;
      SnippetUI::ActionProperty::MergeFrom(v29, v30);
    }
    v31 = (int **)*((_QWORD *)a2 + 11);
    if (v31)
    {
      v32 = (int **)*((_QWORD *)this + 11);
      if (!v32)
      {
        v32 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 11) = v32;
        v31 = (int **)*((_QWORD *)a2 + 11);
      }
      if (v31)
        v33 = v31;
      else
        v33 = (int **)&SnippetUI::_TextProperty_default_instance_;
      SnippetUI::TextProperty::MergeFrom(v32, v33);
    }
    v34 = (int **)*((_QWORD *)a2 + 12);
    if (v34)
    {
      v35 = (int **)*((_QWORD *)this + 12);
      if (!v35)
      {
        v35 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 12) = v35;
        v34 = (int **)*((_QWORD *)a2 + 12);
      }
      if (v34)
        v36 = v34;
      else
        v36 = (int **)&SnippetUI::_TextProperty_default_instance_;
      SnippetUI::TextProperty::MergeFrom(v35, v36);
    }
  }
}

void sub_1BF92F478(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

SnippetUI::SummaryItem_ShortNumber *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::SummaryItem_ShortNumber>(google::protobuf::internal::ArenaImpl *this)
{
  SnippetUI::SummaryItem_ShortNumber *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (SnippetUI::SummaryItem_ShortNumber *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x70uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::SummaryItem_ShortNumber>);
    SnippetUI::SummaryItem_ShortNumber::SummaryItem_ShortNumber(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (SnippetUI::SummaryItem_ShortNumber *)operator new();
    SnippetUI::SummaryItem_ShortNumber::SummaryItem_ShortNumber(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_1BF92F514(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D890](v1, 0x10A1C40B27C08C4);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::SummaryItem_ShortNumber>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

void InitDefaultsscc_info_SummaryItem_Player_SummaryItem_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/SummaryItem.pb.cc", a4);
  SnippetUI::SummaryItem_Player::SummaryItem_Player((SnippetUI::SummaryItem_Player *)&SnippetUI::_SummaryItem_Player_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_SummaryItem_Player_default_instance_, v4);
  qword_1ED1D4538 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1ED1D4540 = &SnippetUI::_MultilineTextProperty_default_instance_;
  qword_1ED1D4548 = (uint64_t)&SnippetUI::_MultilineTextProperty_default_instance_;
  unk_1ED1D4550 = &SnippetUI::_TextProperty_default_instance_;
  qword_1ED1D4558 = (uint64_t)&SnippetUI::_VisualProperty_default_instance_;
  unk_1ED1D4560 = &SnippetUI::_ActionProperty_default_instance_;
}

SnippetUI::SummaryItem_Player *SnippetUI::SummaryItem_Player::SummaryItem_Player(SnippetUI::SummaryItem_Player *this)
{
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_QWORD *)this = &off_1E792E5F0;
  *((_DWORD *)this + 26) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  if (atomic_load(scc_info_SummaryItem_Player_SummaryItem_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_SummaryItem_Player_SummaryItem_2eproto);
  *((_QWORD *)this + 5) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 6) = &google::protobuf::internal::fixed_address_empty_string;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  return this;
}

void sub_1BF92F7C0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t *v2;

  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((google::protobuf::internal::RepeatedPtrFieldBase *)(v1 + 16));
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v2);
  _Unwind_Resume(a1);
}

void SnippetUI::SummaryItem_Player::~SummaryItem_Player(SnippetUI::SummaryItem_Player *this)
{
  SnippetUI::SummaryItem_Player::~SummaryItem_Player(this);
  JUMPOUT(0x1C3B8D890);
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)this = &off_1E792E5F0;
  v2 = *((_QWORD *)this + 5);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x1C3B8D890](v2, 0x1012C40EC159624);
  }
  v4 = *((_QWORD *)this + 6);
  if ((uint64_t *)v4 != &google::protobuf::internal::fixed_address_empty_string && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0)
      operator delete(*(void **)v4);
    MEMORY[0x1C3B8D890](v4, 0x1012C40EC159624);
  }
  if (this != (SnippetUI::SummaryItem_Player *)&SnippetUI::_SummaryItem_Player_default_instance_)
  {
    v6 = *((_QWORD *)this + 7);
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    v7 = *((_QWORD *)this + 8);
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    v8 = *((_QWORD *)this + 9);
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    v9 = *((_QWORD *)this + 10);
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    v10 = *((_QWORD *)this + 11);
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    v11 = *((_QWORD *)this + 12);
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((SnippetUI::SummaryItem_Player *)((char *)this + 16));
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

SnippetUI::SummaryItem_Player *SnippetUI::SummaryItem_Player::New(SnippetUI::SummaryItem_Player *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::SummaryItem_Player>(0);
}

SnippetUI::SummaryItem_Player *SnippetUI::SummaryItem_Player::New(SnippetUI::SummaryItem_Player *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::SummaryItem_Player>(a2);
}

void SnippetUI::SummaryItem_Player::Clear(SnippetUI::SummaryItem_Player *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  google::protobuf::internal::InternalMetadataWithArena *v10;
  char v11;

  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::Player>::TypeHandler>((uint64_t)this + 16);
  v2 = *((_QWORD *)this + 5);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(_BYTE **)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v2 = 0;
      *(_BYTE *)(v2 + 23) = 0;
    }
  }
  v3 = *((_QWORD *)this + 6);
  if ((uint64_t *)v3 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v3 + 23) < 0)
    {
      **(_BYTE **)v3 = 0;
      *(_QWORD *)(v3 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v3 = 0;
      *(_BYTE *)(v3 + 23) = 0;
    }
  }
  v4 = *((_QWORD *)this + 7);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  *((_QWORD *)this + 7) = 0;
  v5 = *((_QWORD *)this + 8);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *((_QWORD *)this + 8) = 0;
  v6 = *((_QWORD *)this + 9);
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  *((_QWORD *)this + 9) = 0;
  v7 = *((_QWORD *)this + 10);
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  *((_QWORD *)this + 10) = 0;
  v8 = *((_QWORD *)this + 11);
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  *((_QWORD *)this + 11) = 0;
  v9 = *((_QWORD *)this + 12);
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v11 = *((_BYTE *)this + 8);
  v10 = (SnippetUI::SummaryItem_Player *)((char *)this + 8);
  *((_QWORD *)v10 + 11) = 0;
  if ((v11 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v10);
}

uint64_t SnippetUI::SummaryItem_Player::IsInitialized(SnippetUI::SummaryItem_Player *this)
{
  return 1;
}

char *SnippetUI::SummaryItem_Player::ByteSizeLong(SnippetUI::SummaryItem_Player *this)
{
  const google::protobuf::UnknownFieldSet *v2;
  uint64_t v3;
  SnippetUI::Player **v4;
  uint64_t v5;
  SnippetUI::Player *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  SnippetUI::TextProperty *v14;
  char *v15;
  SnippetUI::MultilineTextProperty *v16;
  char *v17;
  SnippetUI::MultilineTextProperty *v18;
  char *v19;
  SnippetUI::TextProperty *v20;
  char *v21;
  SnippetUI::VisualProperty *v22;
  char *v23;
  SnippetUI::ActionProperty *v24;
  char *v25;

  v2 = (const google::protobuf::UnknownFieldSet *)*((int *)this + 6);
  v3 = *((_QWORD *)this + 4);
  if (v3)
    v4 = (SnippetUI::Player **)(v3 + 8);
  else
    v4 = 0;
  if ((_DWORD)v2)
  {
    v5 = 8 * (_QWORD)v2;
    do
    {
      v6 = *v4++;
      v7 = SnippetUI::Player::ByteSizeLong(v6);
      v2 = (const google::protobuf::UnknownFieldSet *)((char *)v2
                                                     + (_QWORD)v7
                                                     + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6));
      v5 -= 8;
    }
    while (v5);
  }
  else
  {
    v2 = 0;
  }
  v8 = *((_QWORD *)this + 5);
  v9 = *(unsigned __int8 *)(v8 + 23);
  if (*(char *)(v8 + 23) < 0)
  {
    if (!*(_QWORD *)(v8 + 8))
      goto LABEL_14;
  }
  else if (!*(_BYTE *)(v8 + 23))
  {
    goto LABEL_14;
  }
  v10 = *(_QWORD *)(v8 + 8);
  if ((v9 & 0x80u) == 0)
    v10 = v9;
  v2 = (const google::protobuf::UnknownFieldSet *)((char *)v2 + v10 + ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_14:
  v11 = *((_QWORD *)this + 6);
  v12 = *(unsigned __int8 *)(v11 + 23);
  if (*(char *)(v11 + 23) < 0)
  {
    if (!*(_QWORD *)(v11 + 8))
      goto LABEL_19;
  }
  else if (!*(_BYTE *)(v11 + 23))
  {
    goto LABEL_19;
  }
  v13 = *(_QWORD *)(v11 + 8);
  if ((v12 & 0x80u) == 0)
    v13 = v12;
  v2 = (const google::protobuf::UnknownFieldSet *)((char *)v2 + v13 + ((9 * (__clz(v13 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_19:
  if (this != (SnippetUI::SummaryItem_Player *)&SnippetUI::_SummaryItem_Player_default_instance_)
  {
    v14 = (SnippetUI::TextProperty *)*((_QWORD *)this + 7);
    if (v14)
    {
      v15 = SnippetUI::TextProperty::ByteSizeLong(v14);
      v2 = (const google::protobuf::UnknownFieldSet *)&v15[(_QWORD)v2
                                                         + 1
                                                         + ((9 * (__clz(v15 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v16 = (SnippetUI::MultilineTextProperty *)*((_QWORD *)this + 8);
    if (v16)
    {
      v17 = SnippetUI::MultilineTextProperty::ByteSizeLong(v16);
      v2 = (const google::protobuf::UnknownFieldSet *)&v17[(_QWORD)v2
                                                         + 1
                                                         + ((9 * (__clz(v17 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v18 = (SnippetUI::MultilineTextProperty *)*((_QWORD *)this + 9);
    if (v18)
    {
      v19 = SnippetUI::MultilineTextProperty::ByteSizeLong(v18);
      v2 = (const google::protobuf::UnknownFieldSet *)&v19[(_QWORD)v2
                                                         + 1
                                                         + ((9 * (__clz(v19 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v20 = (SnippetUI::TextProperty *)*((_QWORD *)this + 10);
    if (v20)
    {
      v21 = SnippetUI::TextProperty::ByteSizeLong(v20);
      v2 = (const google::protobuf::UnknownFieldSet *)&v21[(_QWORD)v2
                                                         + 1
                                                         + ((9 * (__clz(v21 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v22 = (SnippetUI::VisualProperty *)*((_QWORD *)this + 11);
    if (v22)
    {
      v23 = SnippetUI::VisualProperty::ByteSizeLong(v22);
      v2 = (const google::protobuf::UnknownFieldSet *)&v23[(_QWORD)v2
                                                         + 1
                                                         + ((9 * (__clz(v23 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v24 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 12);
    if (v24)
    {
      v25 = SnippetUI::ActionProperty::ByteSizeLong(v24);
      v2 = (const google::protobuf::UnknownFieldSet *)&v25[(_QWORD)v2
                                                         + 1
                                                         + ((9 * (__clz(v25 | 1) ^ 0x1F) + 73) >> 6)];
    }
  }
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::SummaryItem_Player *)((char *)this + 8), v2, (_DWORD *)this + 26);
  *((_DWORD *)this + 26) = (_DWORD)v2;
  return (char *)v2;
}

uint64_t SnippetUI::SummaryItem_Player::GetCachedSize(SnippetUI::SummaryItem_Player *this)
{
  return *((unsigned int *)this + 26);
}

google::protobuf::internal *SnippetUI::SummaryItem_Player::_InternalParse(SnippetUI::SummaryItem_Player *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  std::string **v5;
  std::string **v6;
  unsigned int *v7;
  uint64_t *v8;
  google::protobuf::internal::ParseContext *v9;
  google::protobuf::internal *TagFallback;
  char *v11;
  char *v12;
  google::protobuf::internal *v13;
  int *v14;
  uint64_t v15;
  int v16;
  SnippetUI::Player *v17;
  uint64_t v18;
  uint64_t v19;
  SnippetUI::TextProperty *v20;
  SnippetUI::MultilineTextProperty *v21;
  char *v22;
  SnippetUI::VisualProperty *v23;
  SnippetUI::ActionProperty *v24;
  std::string *v25;
  std::string::value_type *v26;
  google::protobuf::internal::ParseContext *v27;
  char *v28;
  BOOL v29;
  google::protobuf::internal *v31;

  v31 = a2;
  v5 = (std::string **)((char *)this + 48);
  v6 = (std::string **)((char *)this + 40);
  v7 = (unsigned int *)((char *)this + 16);
  v8 = (uint64_t *)((char *)this + 8);
LABEL_2:
  while (2)
  {
    if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v31, *((_DWORD *)a3 + 23)) & 1) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v31 + 1);
      v11 = (char *)*(unsigned __int8 *)v31;
      if (*(char *)v31 < 0)
      {
        v11 = (char *)(v11 + (*(unsigned __int8 *)TagFallback << 7) - 128);
        if (*(char *)TagFallback < 0)
        {
          TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v31, v11);
          v31 = TagFallback;
          if (!TagFallback)
            return TagFallback;
LABEL_7:
          switch(v11 >> 3)
          {
            case 1u:
              if (v11 != 10)
                goto LABEL_56;
              v12 = (char *)TagFallback - 1;
              break;
            case 2u:
              if (v11 != 18)
                goto LABEL_56;
              v20 = (SnippetUI::TextProperty *)*((_QWORD *)this + 7);
              if (v20)
                goto LABEL_38;
              v20 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
              *((_QWORD *)this + 7) = v20;
              goto LABEL_37;
            case 3u:
              if (v11 != 26)
                goto LABEL_56;
              v21 = (SnippetUI::MultilineTextProperty *)*((_QWORD *)this + 8);
              if (v21)
                goto LABEL_33;
              v21 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::MultilineTextProperty>(0);
              *((_QWORD *)this + 8) = v21;
              goto LABEL_32;
            case 4u:
              if (v11 != 34)
                goto LABEL_56;
              v21 = (SnippetUI::MultilineTextProperty *)*((_QWORD *)this + 9);
              if (v21)
                goto LABEL_33;
              v21 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::MultilineTextProperty>(0);
              *((_QWORD *)this + 9) = v21;
LABEL_32:
              TagFallback = v31;
LABEL_33:
              v22 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::MultilineTextProperty>(a3, v21, TagFallback);
              goto LABEL_61;
            case 5u:
              if (v11 != 42)
                goto LABEL_56;
              v20 = (SnippetUI::TextProperty *)*((_QWORD *)this + 10);
              if (v20)
                goto LABEL_38;
              v20 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
              *((_QWORD *)this + 10) = v20;
LABEL_37:
              TagFallback = v31;
LABEL_38:
              v22 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::TextProperty>(a3, v20, TagFallback);
              goto LABEL_61;
            case 6u:
              if (v11 != 50)
                goto LABEL_56;
              v23 = (SnippetUI::VisualProperty *)*((_QWORD *)this + 11);
              if (!v23)
              {
                v23 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::VisualProperty>(0);
                *((_QWORD *)this + 11) = v23;
                TagFallback = v31;
              }
              v22 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::VisualProperty>(a3, v23, TagFallback);
              goto LABEL_61;
            case 7u:
              if (v11 != 58)
                goto LABEL_56;
              v24 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 12);
              if (!v24)
              {
                v24 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
                *((_QWORD *)this + 12) = v24;
                TagFallback = v31;
              }
              v22 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::ActionProperty>(a3, v24, TagFallback);
              goto LABEL_61;
            case 8u:
              if (v11 != 66)
                goto LABEL_56;
              v25 = *v6;
              if (*v6 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
              {
                google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v6, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
                v25 = *v6;
                TagFallback = v31;
              }
              v26 = (std::string::value_type *)TagFallback;
              v27 = a3;
              v28 = "SnippetUI.SummaryItem_Player.component_name";
              goto LABEL_55;
            case 9u:
              if (v11 != 74)
                goto LABEL_56;
              v25 = *v5;
              if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
              {
                google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
                v25 = *v5;
                TagFallback = v31;
              }
              v26 = (std::string::value_type *)TagFallback;
              v27 = a3;
              v28 = "SnippetUI.SummaryItem_Player.link_identifier";
LABEL_55:
              v22 = google::protobuf::internal::InlineGreedyStringParserUTF8(v25, v26, (uint64_t)v27, (google::protobuf::internal *)v28);
              goto LABEL_61;
            default:
LABEL_56:
              if ((_DWORD)v11)
                v29 = (v11 & 7) == 4;
              else
                v29 = 1;
              if (v29)
              {
                *((_DWORD *)a3 + 20) = (_DWORD)v11 - 1;
                return TagFallback;
              }
              v22 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v11, v8, TagFallback, a3, v9);
LABEL_61:
              v31 = (google::protobuf::internal *)v22;
              if (v22)
                continue;
              return 0;
          }
          while (1)
          {
            v13 = (google::protobuf::internal *)(v12 + 1);
            v31 = (google::protobuf::internal *)(v12 + 1);
            v14 = (int *)*((_QWORD *)this + 4);
            if (!v14)
              break;
            v15 = *((int *)this + 6);
            v16 = *v14;
            if ((int)v15 >= *v14)
            {
              if (v16 == *((_DWORD *)this + 7))
              {
LABEL_15:
                google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v7, v16 + 1);
                v14 = (int *)*((_QWORD *)this + 4);
                v16 = *v14;
              }
              *v14 = v16 + 1;
              v17 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Player>(*((google::protobuf::internal::ArenaImpl **)this
                                                                                   + 2));
              v18 = *((_QWORD *)this + 4);
              v19 = *((int *)this + 6);
              *((_DWORD *)this + 6) = v19 + 1;
              *(_QWORD *)(v18 + 8 * v19 + 8) = v17;
              v13 = v31;
              goto LABEL_17;
            }
            *((_DWORD *)this + 6) = v15 + 1;
            v17 = *(SnippetUI::Player **)&v14[2 * v15 + 2];
LABEL_17:
            v12 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::Player>(a3, v17, v13);
            v31 = (google::protobuf::internal *)v12;
            if (!v12)
              return 0;
            if (*(_QWORD *)a3 <= (unint64_t)v12 || *v12 != 10)
              goto LABEL_2;
          }
          v16 = *((_DWORD *)this + 7);
          goto LABEL_15;
        }
        TagFallback = (google::protobuf::internal *)((char *)v31 + 2);
      }
      v31 = TagFallback;
      goto LABEL_7;
    }
    return v31;
  }
}

const google::protobuf::UnknownFieldSet *SnippetUI::SummaryItem_Player::InternalSerializeWithCachedSizesToArray(SnippetUI::SummaryItem_Player *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  int v7;
  int i;
  SnippetUI::Player *v9;
  google::protobuf::io::EpsCopyOutputStream *v10;
  unsigned int v11;
  google::protobuf::UnknownFieldSet *v12;
  unsigned int v13;
  _BYTE *v14;
  _BYTE *v15;
  unsigned int v16;
  unsigned int v17;
  SnippetUI::TextProperty *v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  google::protobuf::UnknownFieldSet *v22;
  _BYTE *v23;
  _BYTE *v24;
  unsigned int v25;
  unsigned int v26;
  SnippetUI::MultilineTextProperty *v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int v30;
  google::protobuf::UnknownFieldSet *v31;
  _BYTE *v32;
  _BYTE *v33;
  unsigned int v34;
  unsigned int v35;
  SnippetUI::MultilineTextProperty *v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int v39;
  google::protobuf::UnknownFieldSet *v40;
  _BYTE *v41;
  _BYTE *v42;
  unsigned int v43;
  unsigned int v44;
  SnippetUI::TextProperty *v45;
  unsigned int v46;
  uint64_t v47;
  unsigned int v48;
  google::protobuf::UnknownFieldSet *v49;
  _BYTE *v50;
  _BYTE *v51;
  unsigned int v52;
  unsigned int v53;
  SnippetUI::VisualProperty *v54;
  unsigned int v55;
  uint64_t v56;
  unsigned int v57;
  google::protobuf::UnknownFieldSet *v58;
  _BYTE *v59;
  _BYTE *v60;
  unsigned int v61;
  unsigned int v62;
  SnippetUI::ActionProperty *v63;
  unsigned int v64;
  google::protobuf::UnknownFieldSet *v65;
  unsigned int v66;
  _BYTE *v67;
  _BYTE *v68;
  unsigned int v69;
  unsigned int v70;
  google::protobuf::internal *v71;
  const char *v72;
  google::protobuf::internal *v73;
  const char *v74;
  uint64_t v75;

  v7 = *((_DWORD *)this + 6);
  if (v7)
  {
    for (i = 0; i != v7; ++i)
    {
      if ((unint64_t)a2 >= *(_QWORD *)a3)
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      v9 = (SnippetUI::Player *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<SnippetUI::Player>::TypeHandler>((uint64_t)this + 16, i);
      *(_BYTE *)a2 = 10;
      v11 = *((_DWORD *)v9 + 14);
      if (v11 > 0x7F)
      {
        *((_BYTE *)a2 + 1) = v11 | 0x80;
        v13 = v11 >> 7;
        if (v11 >> 14)
        {
          v14 = (char *)a2 + 2;
          do
          {
            v15 = v14;
            *v14++ = v13 | 0x80;
            v16 = v13 >> 7;
            v17 = v13 >> 14;
            v13 >>= 7;
          }
          while (v17);
          v12 = (google::protobuf::UnknownFieldSet *)(v15 + 2);
          *v14 = v16;
        }
        else
        {
          *((_BYTE *)a2 + 2) = v13;
          v12 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 3);
        }
      }
      else
      {
        *((_BYTE *)a2 + 1) = v11;
        v12 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 2);
      }
      a2 = SnippetUI::Player::InternalSerializeWithCachedSizesToArray(v9, v12, a3, v10);
    }
  }
  if (this != (SnippetUI::SummaryItem_Player *)&SnippetUI::_SummaryItem_Player_default_instance_)
  {
    v18 = (SnippetUI::TextProperty *)*((_QWORD *)this + 7);
    if (!v18)
      goto LABEL_26;
    if ((unint64_t)a2 >= *(_QWORD *)a3)
    {
      a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      v18 = (SnippetUI::TextProperty *)*((_QWORD *)this + 7);
    }
    *(_BYTE *)a2 = 18;
    v19 = *((_DWORD *)v18 + 15);
    if (v19 > 0x7F)
    {
      *((_BYTE *)a2 + 1) = v19 | 0x80;
      v21 = v19 >> 7;
      if (v19 >> 14)
      {
        v23 = (char *)a2 + 2;
        do
        {
          v24 = v23;
          *v23++ = v21 | 0x80;
          v25 = v21 >> 7;
          v26 = v21 >> 14;
          v21 >>= 7;
        }
        while (v26);
        v22 = (google::protobuf::UnknownFieldSet *)(v24 + 2);
        *v23 = v25;
        goto LABEL_25;
      }
      *((_BYTE *)a2 + 2) = v21;
      v20 = 3;
    }
    else
    {
      *((_BYTE *)a2 + 1) = v19;
      v20 = 2;
    }
    v22 = (google::protobuf::UnknownFieldSet *)((char *)a2 + v20);
LABEL_25:
    a2 = SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v18, v22, a3, a4);
LABEL_26:
    v27 = (SnippetUI::MultilineTextProperty *)*((_QWORD *)this + 8);
    if (!v27)
      goto LABEL_38;
    if ((unint64_t)a2 >= *(_QWORD *)a3)
    {
      a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      v27 = (SnippetUI::MultilineTextProperty *)*((_QWORD *)this + 8);
    }
    *(_BYTE *)a2 = 26;
    v28 = *((_DWORD *)v27 + 15);
    if (v28 > 0x7F)
    {
      *((_BYTE *)a2 + 1) = v28 | 0x80;
      v30 = v28 >> 7;
      if (v28 >> 14)
      {
        v32 = (char *)a2 + 2;
        do
        {
          v33 = v32;
          *v32++ = v30 | 0x80;
          v34 = v30 >> 7;
          v35 = v30 >> 14;
          v30 >>= 7;
        }
        while (v35);
        v31 = (google::protobuf::UnknownFieldSet *)(v33 + 2);
        *v32 = v34;
        goto LABEL_37;
      }
      *((_BYTE *)a2 + 2) = v30;
      v29 = 3;
    }
    else
    {
      *((_BYTE *)a2 + 1) = v28;
      v29 = 2;
    }
    v31 = (google::protobuf::UnknownFieldSet *)((char *)a2 + v29);
LABEL_37:
    a2 = SnippetUI::MultilineTextProperty::InternalSerializeWithCachedSizesToArray(v27, v31, a3, a4);
LABEL_38:
    v36 = (SnippetUI::MultilineTextProperty *)*((_QWORD *)this + 9);
    if (!v36)
      goto LABEL_50;
    if ((unint64_t)a2 >= *(_QWORD *)a3)
    {
      a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      v36 = (SnippetUI::MultilineTextProperty *)*((_QWORD *)this + 9);
    }
    *(_BYTE *)a2 = 34;
    v37 = *((_DWORD *)v36 + 15);
    if (v37 > 0x7F)
    {
      *((_BYTE *)a2 + 1) = v37 | 0x80;
      v39 = v37 >> 7;
      if (v37 >> 14)
      {
        v41 = (char *)a2 + 2;
        do
        {
          v42 = v41;
          *v41++ = v39 | 0x80;
          v43 = v39 >> 7;
          v44 = v39 >> 14;
          v39 >>= 7;
        }
        while (v44);
        v40 = (google::protobuf::UnknownFieldSet *)(v42 + 2);
        *v41 = v43;
        goto LABEL_49;
      }
      *((_BYTE *)a2 + 2) = v39;
      v38 = 3;
    }
    else
    {
      *((_BYTE *)a2 + 1) = v37;
      v38 = 2;
    }
    v40 = (google::protobuf::UnknownFieldSet *)((char *)a2 + v38);
LABEL_49:
    a2 = SnippetUI::MultilineTextProperty::InternalSerializeWithCachedSizesToArray(v36, v40, a3, a4);
LABEL_50:
    v45 = (SnippetUI::TextProperty *)*((_QWORD *)this + 10);
    if (!v45)
      goto LABEL_62;
    if ((unint64_t)a2 >= *(_QWORD *)a3)
    {
      a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      v45 = (SnippetUI::TextProperty *)*((_QWORD *)this + 10);
    }
    *(_BYTE *)a2 = 42;
    v46 = *((_DWORD *)v45 + 15);
    if (v46 > 0x7F)
    {
      *((_BYTE *)a2 + 1) = v46 | 0x80;
      v48 = v46 >> 7;
      if (v46 >> 14)
      {
        v50 = (char *)a2 + 2;
        do
        {
          v51 = v50;
          *v50++ = v48 | 0x80;
          v52 = v48 >> 7;
          v53 = v48 >> 14;
          v48 >>= 7;
        }
        while (v53);
        v49 = (google::protobuf::UnknownFieldSet *)(v51 + 2);
        *v50 = v52;
        goto LABEL_61;
      }
      *((_BYTE *)a2 + 2) = v48;
      v47 = 3;
    }
    else
    {
      *((_BYTE *)a2 + 1) = v46;
      v47 = 2;
    }
    v49 = (google::protobuf::UnknownFieldSet *)((char *)a2 + v47);
LABEL_61:
    a2 = SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v45, v49, a3, a4);
LABEL_62:
    v54 = (SnippetUI::VisualProperty *)*((_QWORD *)this + 11);
    if (!v54)
      goto LABEL_74;
    if ((unint64_t)a2 >= *(_QWORD *)a3)
    {
      a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      v54 = (SnippetUI::VisualProperty *)*((_QWORD *)this + 11);
    }
    *(_BYTE *)a2 = 50;
    v55 = *((_DWORD *)v54 + 15);
    if (v55 > 0x7F)
    {
      *((_BYTE *)a2 + 1) = v55 | 0x80;
      v57 = v55 >> 7;
      if (v55 >> 14)
      {
        v59 = (char *)a2 + 2;
        do
        {
          v60 = v59;
          *v59++ = v57 | 0x80;
          v61 = v57 >> 7;
          v62 = v57 >> 14;
          v57 >>= 7;
        }
        while (v62);
        v58 = (google::protobuf::UnknownFieldSet *)(v60 + 2);
        *v59 = v61;
        goto LABEL_73;
      }
      *((_BYTE *)a2 + 2) = v57;
      v56 = 3;
    }
    else
    {
      *((_BYTE *)a2 + 1) = v55;
      v56 = 2;
    }
    v58 = (google::protobuf::UnknownFieldSet *)((char *)a2 + v56);
LABEL_73:
    a2 = SnippetUI::VisualProperty::InternalSerializeWithCachedSizesToArray(v54, v58, a3, a4);
LABEL_74:
    v63 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 12);
    if (v63)
    {
      if ((unint64_t)a2 >= *(_QWORD *)a3)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
        v63 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 12);
      }
      *(_BYTE *)a2 = 58;
      v64 = *((_DWORD *)v63 + 12);
      if (v64 > 0x7F)
      {
        *((_BYTE *)a2 + 1) = v64 | 0x80;
        v66 = v64 >> 7;
        if (v64 >> 14)
        {
          v67 = (char *)a2 + 2;
          do
          {
            v68 = v67;
            *v67++ = v66 | 0x80;
            v69 = v66 >> 7;
            v70 = v66 >> 14;
            v66 >>= 7;
          }
          while (v70);
          v65 = (google::protobuf::UnknownFieldSet *)(v68 + 2);
          *v67 = v69;
        }
        else
        {
          *((_BYTE *)a2 + 2) = v66;
          v65 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 3);
        }
      }
      else
      {
        *((_BYTE *)a2 + 1) = v64;
        v65 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 2);
      }
      a2 = SnippetUI::ActionProperty::InternalSerializeWithCachedSizesToArray(v63, v65, a3, a4);
    }
  }
  v71 = (google::protobuf::internal *)*((_QWORD *)this + 5);
  if (*((char *)v71 + 23) < 0)
  {
    v72 = (const char *)*((_QWORD *)v71 + 1);
    if (!v72)
      goto LABEL_91;
    v71 = *(google::protobuf::internal **)v71;
    goto LABEL_90;
  }
  v72 = (const char *)*((unsigned __int8 *)v71 + 23);
  if (*((_BYTE *)v71 + 23))
  {
LABEL_90:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v71, v72, 1, (google::protobuf::internal *)"SnippetUI.SummaryItem_Player.component_name");
    a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 8, *((_QWORD *)this + 5), (char *)a2);
  }
LABEL_91:
  v73 = (google::protobuf::internal *)*((_QWORD *)this + 6);
  if (*((char *)v73 + 23) < 0)
  {
    v74 = (const char *)*((_QWORD *)v73 + 1);
    if (!v74)
      goto LABEL_97;
    v73 = *(google::protobuf::internal **)v73;
    goto LABEL_96;
  }
  v74 = (const char *)*((unsigned __int8 *)v73 + 23);
  if (*((_BYTE *)v73 + 23))
  {
LABEL_96:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v73, v74, 1, (google::protobuf::internal *)"SnippetUI.SummaryItem_Player.link_identifier");
    a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 9, *((_QWORD *)this + 6), (char *)a2);
  }
LABEL_97:
  v75 = *((_QWORD *)this + 1);
  if ((v75 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v75 & 0xFFFFFFFFFFFFFFFELL), a2, a3, a4);
  else
    return a2;
}

void SnippetUI::SummaryItem_Player::CopyFrom(SnippetUI::SummaryItem_Player *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    SnippetUI::SummaryItem_Player::Clear(this);
    SnippetUI::SummaryItem_Player::MergeFrom(this, a2);
  }
}

void SnippetUI::SummaryItem_Player::MergeFrom(SnippetUI::SummaryItem_Player *this, const google::protobuf::Message *lpsrc)
{
  std::string *v4;
  const SnippetUI::SummaryItem_Player *v5;
  google::protobuf::Message *v6;
  char v7;
  std::string v8[2];

  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/SummaryItem.pb.cc", 7739);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5)
    SnippetUI::SummaryItem_Player::MergeFrom(this, v5);
  else
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
}

void sub_1BF9305FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::SummaryItem_Player::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 104) = a2;
  return this;
}

uint64_t SnippetUI::SummaryItem_Player::GetMetadata(SnippetUI::SummaryItem_Player *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_SummaryItem_2eproto);
  return qword_1EF581A10;
}

void *SnippetUI::SummaryItem_Player::default_instance(SnippetUI::SummaryItem_Player *this)
{
  if (atomic_load(scc_info_SummaryItem_Player_SummaryItem_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_SummaryItem_Player_SummaryItem_2eproto);
  return &SnippetUI::_SummaryItem_Player_default_instance_;
}

void SnippetUI::SummaryItem_Player::MergeFrom(SnippetUI::SummaryItem_Player *this, const SnippetUI::SummaryItem_Player *a2)
{
  std::string *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  int **v10;
  int **v11;
  int **v12;
  int **v13;
  int **v14;
  int **v15;
  int **v16;
  int **v17;
  int **v18;
  int **v19;
  int **v20;
  int **v21;
  int **v22;
  int **v23;
  int **v24;
  int **v25;
  int **v26;
  int **v27;
  char v28;
  std::string v29[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v29, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/SummaryItem.pb.cc", 7754);
    v4 = google::protobuf::internal::LogMessage::operator<<(v29, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v28, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v29[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::SummaryItem_Player *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<SnippetUI::Player>::TypeHandler>((int **)this + 2, (uint64_t)a2 + 16);
  v6 = *((_QWORD *)a2 + 5);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(_QWORD *)(v6 + 8))
      goto LABEL_13;
  }
  else if (!*(_BYTE *)(v6 + 23))
  {
    goto LABEL_13;
  }
  v7 = (uint64_t *)*((_QWORD *)this + 5);
  if (v7 != (uint64_t *)v6)
  {
    if (v7 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 5, v6);
    else
      std::string::operator=(*((std::string **)this + 5), (const std::string *)v6);
  }
LABEL_13:
  v8 = *((_QWORD *)a2 + 6);
  if (*(char *)(v8 + 23) < 0)
  {
    if (!*(_QWORD *)(v8 + 8))
      goto LABEL_21;
  }
  else if (!*(_BYTE *)(v8 + 23))
  {
    goto LABEL_21;
  }
  v9 = (uint64_t *)*((_QWORD *)this + 6);
  if (v9 != (uint64_t *)v8)
  {
    if (v9 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 6, v8);
    else
      std::string::operator=(*((std::string **)this + 6), (const std::string *)v8);
  }
LABEL_21:
  if (a2 != (const SnippetUI::SummaryItem_Player *)&SnippetUI::_SummaryItem_Player_default_instance_)
  {
    v10 = (int **)*((_QWORD *)a2 + 7);
    if (v10)
    {
      v11 = (int **)*((_QWORD *)this + 7);
      if (!v11)
      {
        v11 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 7) = v11;
        v10 = (int **)*((_QWORD *)a2 + 7);
      }
      if (v10)
        v12 = v10;
      else
        v12 = (int **)&SnippetUI::_TextProperty_default_instance_;
      SnippetUI::TextProperty::MergeFrom(v11, v12);
    }
    v13 = (int **)*((_QWORD *)a2 + 8);
    if (v13)
    {
      v14 = (int **)*((_QWORD *)this + 8);
      if (!v14)
      {
        v14 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::MultilineTextProperty>(0);
        *((_QWORD *)this + 8) = v14;
        v13 = (int **)*((_QWORD *)a2 + 8);
      }
      if (v13)
        v15 = v13;
      else
        v15 = (int **)&SnippetUI::_MultilineTextProperty_default_instance_;
      SnippetUI::MultilineTextProperty::MergeFrom(v14, v15);
    }
    v16 = (int **)*((_QWORD *)a2 + 9);
    if (v16)
    {
      v17 = (int **)*((_QWORD *)this + 9);
      if (!v17)
      {
        v17 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::MultilineTextProperty>(0);
        *((_QWORD *)this + 9) = v17;
        v16 = (int **)*((_QWORD *)a2 + 9);
      }
      if (v16)
        v18 = v16;
      else
        v18 = (int **)&SnippetUI::_MultilineTextProperty_default_instance_;
      SnippetUI::MultilineTextProperty::MergeFrom(v17, v18);
    }
    v19 = (int **)*((_QWORD *)a2 + 10);
    if (v19)
    {
      v20 = (int **)*((_QWORD *)this + 10);
      if (!v20)
      {
        v20 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 10) = v20;
        v19 = (int **)*((_QWORD *)a2 + 10);
      }
      if (v19)
        v21 = v19;
      else
        v21 = (int **)&SnippetUI::_TextProperty_default_instance_;
      SnippetUI::TextProperty::MergeFrom(v20, v21);
    }
    v22 = (int **)*((_QWORD *)a2 + 11);
    if (v22)
    {
      v23 = (int **)*((_QWORD *)this + 11);
      if (!v23)
      {
        v23 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::VisualProperty>(0);
        *((_QWORD *)this + 11) = v23;
        v22 = (int **)*((_QWORD *)a2 + 11);
      }
      if (v22)
        v24 = v22;
      else
        v24 = (int **)&SnippetUI::_VisualProperty_default_instance_;
      SnippetUI::VisualProperty::MergeFrom(v23, v24);
    }
    v25 = (int **)*((_QWORD *)a2 + 12);
    if (v25)
    {
      v26 = (int **)*((_QWORD *)this + 12);
      if (!v26)
      {
        v26 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
        *((_QWORD *)this + 12) = v26;
        v25 = (int **)*((_QWORD *)a2 + 12);
      }
      if (v25)
        v27 = v25;
      else
        v27 = (int **)&SnippetUI::_ActionProperty_default_instance_;
      SnippetUI::ActionProperty::MergeFrom(v26, v27);
    }
  }
}

void sub_1BF9308D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<SnippetUI::Player>::TypeHandler>(int **this, uint64_t a2)
{
  std::string *v4;
  int v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  const SnippetUI::Player **v13;
  SnippetUI::Player **v14;
  const SnippetUI::Player *v15;
  const SnippetUI::Player *v16;
  SnippetUI::Player *v17;
  google::protobuf::internal::ArenaImpl *v18;
  int v19;
  uint64_t v20;
  SnippetUI::Player **v21;
  const SnippetUI::Player **v22;
  const SnippetUI::Player *v23;
  SnippetUI::Player *v24;
  int v25;
  int *v26;
  char v27;
  std::string v28[2];

  if ((int **)a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1632);
    v4 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
  }
  v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    v6 = *(_QWORD *)(a2 + 16);
    v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)this, *(_DWORD *)(a2 + 8));
    v8 = v7;
    v9 = *this[2];
    v10 = *((int *)this + 2);
    v11 = v9 - v10;
    if ((int)v9 - (int)v10 >= v5)
      v12 = v5;
    else
      v12 = v11;
    if ((int)v12 >= 1)
    {
      v13 = (const SnippetUI::Player **)(v6 + 8);
      v14 = (SnippetUI::Player **)v7;
      do
      {
        v16 = *v13++;
        v15 = v16;
        v17 = *v14++;
        google::protobuf::internal::GenericTypeHandler<SnippetUI::Player>::Merge(v15, v17);
        --v12;
      }
      while (v12);
    }
    if (v11 < v5)
    {
      v18 = (google::protobuf::internal::ArenaImpl *)*this;
      v19 = v10 + v5 - v9;
      v20 = 8 * v9 - 8 * v10;
      v21 = (SnippetUI::Player **)((char *)v8 + v20);
      v22 = (const SnippetUI::Player **)(v20 + v6 + 8);
      do
      {
        v23 = *v22++;
        v24 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Player>(v18);
        google::protobuf::internal::GenericTypeHandler<SnippetUI::Player>::Merge(v23, v24);
        *v21++ = v24;
        --v19;
      }
      while (v19);
    }
    v25 = *((_DWORD *)this + 2) + v5;
    *((_DWORD *)this + 2) = v25;
    v26 = this[2];
    if (*v26 < v25)
      *v26 = v25;
  }
}

void sub_1BF930A3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::GenericTypeHandler<SnippetUI::Player>::Merge(const SnippetUI::Player *a1, SnippetUI::Player *a2)
{
  SnippetUI::Player::MergeFrom(a2, a1);
}

uint64_t google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<SnippetUI::Player>::TypeHandler>(uint64_t a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1538);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1539);
    v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (current_size_): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2 + 8);
}

void sub_1BF930B20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

char *google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::Player>(google::protobuf::internal::EpsCopyInputStream *this, SnippetUI::Player *a2, google::protobuf::internal *a3)
{
  int v6;
  const char *v7;
  char *v8;
  char *result;
  int v10;
  int v11;
  int v12;
  BOOL v13;
  int v14;
  int v15;

  v6 = *(char *)a3;
  v7 = (const char *)*(unsigned __int8 *)a3;
  if (v6 < 0)
  {
    result = google::protobuf::internal::ReadSizeFallback(a3, v7);
    if (!result)
      return result;
    v8 = result;
    LODWORD(v7) = v10;
  }
  else
  {
    v8 = (char *)a3 + 1;
  }
  v11 = google::protobuf::internal::EpsCopyInputStream::PushLimit(this, v8, v7);
  v12 = *((_DWORD *)this + 22);
  v13 = __OFSUB__(v12--, 1);
  *((_DWORD *)this + 22) = v12;
  if (v12 < 0 != v13)
    return 0;
  v14 = v11;
  result = (char *)SnippetUI::Player::_InternalParse(a2, (google::protobuf::internal *)v8, this);
  if (!result)
    return result;
  ++*((_DWORD *)this + 22);
  if (*((_DWORD *)this + 20))
    return 0;
  v15 = *((_DWORD *)this + 7) + v14;
  *((_DWORD *)this + 7) = v15;
  *(_QWORD *)this = *((_QWORD *)this + 1) + (v15 & (v15 >> 31));
  return result;
}

void google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::Player>::TypeHandler>(uint64_t a1)
{
  uint64_t v1;
  SnippetUI::Player **v3;
  SnippetUI::Player *v4;
  std::string *v5;
  char v6;
  std::string v7[2];

  v1 = *(unsigned int *)(a1 + 8);
  if ((v1 & 0x80000000) != 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1613);
    v5 = google::protobuf::internal::LogMessage::operator<<(v7, "CHECK failed: (n) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v6, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v7[0].__r_.__value_.__l.__data_);
  }
  else if ((_DWORD)v1)
  {
    v3 = (SnippetUI::Player **)(*(_QWORD *)(a1 + 16) + 8);
    do
    {
      v4 = *v3++;
      SnippetUI::Player::Clear(v4);
      --v1;
    }
    while (v1);
    *(_DWORD *)(a1 + 8) = 0;
  }
}

void sub_1BF930C98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

SnippetUI::SummaryItem_Player *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::SummaryItem_Player>(google::protobuf::internal::ArenaImpl *this)
{
  SnippetUI::SummaryItem_Player *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (SnippetUI::SummaryItem_Player *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x70uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::SummaryItem_Player>);
    SnippetUI::SummaryItem_Player::SummaryItem_Player(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (SnippetUI::SummaryItem_Player *)operator new();
    SnippetUI::SummaryItem_Player::SummaryItem_Player(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_1BF930D34(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D890](v1, 0x10A1C40BDA5CB28);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::SummaryItem_Player>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

void InitDefaultsscc_info_SummaryItem_PairV2_SummaryItem_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/SummaryItem.pb.cc", a4);
  SnippetUI::SummaryItem_PairV2::SummaryItem_PairV2((SnippetUI::SummaryItem_PairV2 *)&SnippetUI::_SummaryItem_PairV2_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_SummaryItem_PairV2_default_instance_, v4);
  qword_1EF584350 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1EF584358 = &SnippetUI::_TextProperty_default_instance_;
  qword_1EF584360 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1EF584368 = &SnippetUI::_VisualProperty_default_instance_;
  qword_1EF584370 = (uint64_t)&SnippetUI::_VisualProperty_default_instance_;
  unk_1EF584378 = &SnippetUI::_ActionProperty_default_instance_;
}

SnippetUI::SummaryItem_PairV2 *SnippetUI::SummaryItem_PairV2::SummaryItem_PairV2(SnippetUI::SummaryItem_PairV2 *this)
{
  *(_QWORD *)this = &off_1E792E2F0;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 20) = 0;
  if (atomic_load(scc_info_SummaryItem_PairV2_SummaryItem_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_SummaryItem_PairV2_SummaryItem_2eproto);
  *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  return this;
}

void sub_1BF930F90(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::SummaryItem_PairV2::~SummaryItem_PairV2(SnippetUI::SummaryItem_PairV2 *this)
{
  SnippetUI::SummaryItem_PairV2::~SummaryItem_PairV2(this);
  JUMPOUT(0x1C3B8D890);
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)this = &off_1E792E2F0;
  v2 = *((_QWORD *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x1C3B8D890](v2, 0x1012C40EC159624);
  }
  v4 = *((_QWORD *)this + 3);
  if ((uint64_t *)v4 != &google::protobuf::internal::fixed_address_empty_string && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0)
      operator delete(*(void **)v4);
    MEMORY[0x1C3B8D890](v4, 0x1012C40EC159624);
  }
  if (this != (SnippetUI::SummaryItem_PairV2 *)&SnippetUI::_SummaryItem_PairV2_default_instance_)
  {
    v6 = *((_QWORD *)this + 4);
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    v7 = *((_QWORD *)this + 5);
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    v8 = *((_QWORD *)this + 6);
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    v9 = *((_QWORD *)this + 7);
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    v10 = *((_QWORD *)this + 8);
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    v11 = *((_QWORD *)this + 9);
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

SnippetUI::SummaryItem_PairV2 *SnippetUI::SummaryItem_PairV2::New(SnippetUI::SummaryItem_PairV2 *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::SummaryItem_PairV2>(0);
}

SnippetUI::SummaryItem_PairV2 *SnippetUI::SummaryItem_PairV2::New(SnippetUI::SummaryItem_PairV2 *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::SummaryItem_PairV2>(a2);
}

void SnippetUI::SummaryItem_PairV2::Clear(SnippetUI::SummaryItem_PairV2 *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  google::protobuf::internal::InternalMetadataWithArena *v10;
  char v11;

  v2 = *((_QWORD *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(_BYTE **)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v2 = 0;
      *(_BYTE *)(v2 + 23) = 0;
    }
  }
  v3 = *((_QWORD *)this + 3);
  if ((uint64_t *)v3 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v3 + 23) < 0)
    {
      **(_BYTE **)v3 = 0;
      *(_QWORD *)(v3 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v3 = 0;
      *(_BYTE *)(v3 + 23) = 0;
    }
  }
  v4 = *((_QWORD *)this + 4);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  *((_QWORD *)this + 4) = 0;
  v5 = *((_QWORD *)this + 5);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *((_QWORD *)this + 5) = 0;
  v6 = *((_QWORD *)this + 6);
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  *((_QWORD *)this + 6) = 0;
  v7 = *((_QWORD *)this + 7);
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  *((_QWORD *)this + 7) = 0;
  v8 = *((_QWORD *)this + 8);
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  *((_QWORD *)this + 8) = 0;
  v9 = *((_QWORD *)this + 9);
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v11 = *((_BYTE *)this + 8);
  v10 = (SnippetUI::SummaryItem_PairV2 *)((char *)this + 8);
  *((_QWORD *)v10 + 8) = 0;
  if ((v11 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v10);
}

uint64_t SnippetUI::SummaryItem_PairV2::IsInitialized(SnippetUI::SummaryItem_PairV2 *this)
{
  return 1;
}

char *SnippetUI::SummaryItem_PairV2::ByteSizeLong(SnippetUI::SummaryItem_PairV2 *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  const google::protobuf::UnknownFieldSet *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  SnippetUI::TextProperty *v9;
  char *v10;
  SnippetUI::TextProperty *v11;
  char *v12;
  SnippetUI::TextProperty *v13;
  char *v14;
  SnippetUI::VisualProperty *v15;
  char *v16;
  SnippetUI::VisualProperty *v17;
  char *v18;
  SnippetUI::ActionProperty *v19;
  char *v20;

  v2 = *((_QWORD *)this + 2);
  v3 = *(unsigned __int8 *)(v2 + 23);
  if (*(char *)(v2 + 23) < 0)
  {
    if (*(_QWORD *)(v2 + 8))
      goto LABEL_3;
LABEL_7:
    v5 = 0;
    goto LABEL_8;
  }
  if (!*(_BYTE *)(v2 + 23))
    goto LABEL_7;
LABEL_3:
  v4 = *(_QWORD *)(v2 + 8);
  if ((v3 & 0x80u) == 0)
    v4 = v3;
  v5 = (const google::protobuf::UnknownFieldSet *)(v4 + ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_8:
  v6 = *((_QWORD *)this + 3);
  v7 = *(unsigned __int8 *)(v6 + 23);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(_QWORD *)(v6 + 8))
      goto LABEL_13;
  }
  else if (!*(_BYTE *)(v6 + 23))
  {
    goto LABEL_13;
  }
  v8 = *(_QWORD *)(v6 + 8);
  if ((v7 & 0x80u) == 0)
    v8 = v7;
  v5 = (const google::protobuf::UnknownFieldSet *)((char *)v5 + v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_13:
  if (this != (SnippetUI::SummaryItem_PairV2 *)&SnippetUI::_SummaryItem_PairV2_default_instance_)
  {
    v9 = (SnippetUI::TextProperty *)*((_QWORD *)this + 4);
    if (v9)
    {
      v10 = SnippetUI::TextProperty::ByteSizeLong(v9);
      v5 = (const google::protobuf::UnknownFieldSet *)&v10[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v11 = (SnippetUI::TextProperty *)*((_QWORD *)this + 5);
    if (v11)
    {
      v12 = SnippetUI::TextProperty::ByteSizeLong(v11);
      v5 = (const google::protobuf::UnknownFieldSet *)&v12[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v12 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v13 = (SnippetUI::TextProperty *)*((_QWORD *)this + 6);
    if (v13)
    {
      v14 = SnippetUI::TextProperty::ByteSizeLong(v13);
      v5 = (const google::protobuf::UnknownFieldSet *)&v14[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v14 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v15 = (SnippetUI::VisualProperty *)*((_QWORD *)this + 7);
    if (v15)
    {
      v16 = SnippetUI::VisualProperty::ByteSizeLong(v15);
      v5 = (const google::protobuf::UnknownFieldSet *)&v16[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v16 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v17 = (SnippetUI::VisualProperty *)*((_QWORD *)this + 8);
    if (v17)
    {
      v18 = SnippetUI::VisualProperty::ByteSizeLong(v17);
      v5 = (const google::protobuf::UnknownFieldSet *)&v18[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v18 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v19 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 9);
    if (v19)
    {
      v20 = SnippetUI::ActionProperty::ByteSizeLong(v19);
      v5 = (const google::protobuf::UnknownFieldSet *)&v20[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v20 | 1) ^ 0x1F) + 73) >> 6)];
    }
  }
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::SummaryItem_PairV2 *)((char *)this + 8), v5, (_DWORD *)this + 20);
  *((_DWORD *)this + 20) = (_DWORD)v5;
  return (char *)v5;
}

uint64_t SnippetUI::SummaryItem_PairV2::GetCachedSize(SnippetUI::SummaryItem_PairV2 *this)
{
  return *((unsigned int *)this + 20);
}

google::protobuf::internal *SnippetUI::SummaryItem_PairV2::_InternalParse(SnippetUI::SummaryItem_PairV2 *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  std::string **v5;
  std::string **v6;
  uint64_t *v7;
  google::protobuf::internal::ParseContext *v8;
  google::protobuf::internal *TagFallback;
  char *v10;
  SnippetUI::TextProperty *v11;
  char *v12;
  SnippetUI::VisualProperty *v13;
  SnippetUI::ActionProperty *v14;
  std::string *v15;
  std::string::value_type *v16;
  google::protobuf::internal::ParseContext *v17;
  char *v18;
  BOOL v19;
  google::protobuf::internal *v21;

  v21 = a2;
  v5 = (std::string **)((char *)this + 24);
  v6 = (std::string **)((char *)this + 16);
  v7 = (uint64_t *)((char *)this + 8);
  while (2)
  {
    if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v21, *((_DWORD *)a3 + 23)) & 1) != 0)
      return v21;
    TagFallback = (google::protobuf::internal *)((char *)v21 + 1);
    v10 = (char *)*(unsigned __int8 *)v21;
    if ((*(char *)v21 & 0x80000000) == 0)
      goto LABEL_6;
    v10 = (char *)(v10 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v21 + 2);
LABEL_6:
      v21 = TagFallback;
      goto LABEL_7;
    }
    TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v21, v10);
    v21 = TagFallback;
    if (!TagFallback)
      return TagFallback;
LABEL_7:
    switch(v10 >> 3)
    {
      case 1u:
        if (v10 != 10)
          goto LABEL_42;
        v11 = (SnippetUI::TextProperty *)*((_QWORD *)this + 4);
        if (v11)
          goto LABEL_20;
        v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 4) = v11;
        goto LABEL_19;
      case 2u:
        if (v10 != 18)
          goto LABEL_42;
        v11 = (SnippetUI::TextProperty *)*((_QWORD *)this + 5);
        if (v11)
          goto LABEL_20;
        v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 5) = v11;
        goto LABEL_19;
      case 3u:
        if (v10 != 26)
          goto LABEL_42;
        v11 = (SnippetUI::TextProperty *)*((_QWORD *)this + 6);
        if (v11)
          goto LABEL_20;
        v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 6) = v11;
LABEL_19:
        TagFallback = v21;
LABEL_20:
        v12 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::TextProperty>(a3, v11, TagFallback);
        goto LABEL_47;
      case 4u:
        if (v10 != 34)
          goto LABEL_42;
        v13 = (SnippetUI::VisualProperty *)*((_QWORD *)this + 7);
        if (v13)
          goto LABEL_28;
        v13 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::VisualProperty>(0);
        *((_QWORD *)this + 7) = v13;
        goto LABEL_27;
      case 5u:
        if (v10 != 42)
          goto LABEL_42;
        v13 = (SnippetUI::VisualProperty *)*((_QWORD *)this + 8);
        if (v13)
          goto LABEL_28;
        v13 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::VisualProperty>(0);
        *((_QWORD *)this + 8) = v13;
LABEL_27:
        TagFallback = v21;
LABEL_28:
        v12 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::VisualProperty>(a3, v13, TagFallback);
        goto LABEL_47;
      case 6u:
        if (v10 != 50)
          goto LABEL_42;
        v14 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 9);
        if (!v14)
        {
          v14 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
          *((_QWORD *)this + 9) = v14;
          TagFallback = v21;
        }
        v12 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::ActionProperty>(a3, v14, TagFallback);
        goto LABEL_47;
      case 7u:
        if (v10 != 58)
          goto LABEL_42;
        v15 = *v6;
        if (*v6 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v6, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v15 = *v6;
          TagFallback = v21;
        }
        v16 = (std::string::value_type *)TagFallback;
        v17 = a3;
        v18 = "SnippetUI.SummaryItem_PairV2.component_name";
        goto LABEL_41;
      case 8u:
        if (v10 != 66)
          goto LABEL_42;
        v15 = *v5;
        if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v15 = *v5;
          TagFallback = v21;
        }
        v16 = (std::string::value_type *)TagFallback;
        v17 = a3;
        v18 = "SnippetUI.SummaryItem_PairV2.link_identifier";
LABEL_41:
        v12 = google::protobuf::internal::InlineGreedyStringParserUTF8(v15, v16, (uint64_t)v17, (google::protobuf::internal *)v18);
        goto LABEL_47;
      default:
LABEL_42:
        if ((_DWORD)v10)
          v19 = (v10 & 7) == 4;
        else
          v19 = 1;
        if (v19)
        {
          *((_DWORD *)a3 + 20) = (_DWORD)v10 - 1;
          return TagFallback;
        }
        v12 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v10, v7, TagFallback, a3, v8);
LABEL_47:
        v21 = (google::protobuf::internal *)v12;
        if (v12)
          continue;
        TagFallback = 0;
        break;
    }
    return TagFallback;
  }
}

const google::protobuf::UnknownFieldSet *SnippetUI::SummaryItem_PairV2::InternalSerializeWithCachedSizesToArray(SnippetUI::SummaryItem_PairV2 *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  char *v5;
  SnippetUI::TextProperty *v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  google::protobuf::UnknownFieldSet *v11;
  _BYTE *v12;
  _BYTE *v13;
  unsigned int v14;
  unsigned int v15;
  SnippetUI::TextProperty *v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  google::protobuf::UnknownFieldSet *v20;
  _BYTE *v21;
  _BYTE *v22;
  unsigned int v23;
  unsigned int v24;
  SnippetUI::TextProperty *v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  google::protobuf::UnknownFieldSet *v29;
  _BYTE *v30;
  _BYTE *v31;
  unsigned int v32;
  unsigned int v33;
  SnippetUI::VisualProperty *v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int v37;
  google::protobuf::UnknownFieldSet *v38;
  _BYTE *v39;
  _BYTE *v40;
  unsigned int v41;
  unsigned int v42;
  SnippetUI::VisualProperty *v43;
  unsigned int v44;
  uint64_t v45;
  unsigned int v46;
  google::protobuf::UnknownFieldSet *v47;
  _BYTE *v48;
  _BYTE *v49;
  unsigned int v50;
  unsigned int v51;
  SnippetUI::ActionProperty *v52;
  unsigned int v53;
  google::protobuf::UnknownFieldSet *v54;
  unsigned int v55;
  _BYTE *v56;
  _BYTE *v57;
  unsigned int v58;
  unsigned int v59;
  google::protobuf::internal *v60;
  const char *v61;
  google::protobuf::internal *v62;
  const char *v63;
  uint64_t v64;

  v5 = (char *)a2;
  if (this == (SnippetUI::SummaryItem_PairV2 *)&SnippetUI::_SummaryItem_PairV2_default_instance_)
    goto LABEL_73;
  v7 = (SnippetUI::TextProperty *)*((_QWORD *)this + 4);
  if (v7)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
    {
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      v7 = (SnippetUI::TextProperty *)*((_QWORD *)this + 4);
    }
    *v5 = 10;
    v8 = *((_DWORD *)v7 + 15);
    if (v8 > 0x7F)
    {
      v5[1] = v8 | 0x80;
      v10 = v8 >> 7;
      if (v8 >> 14)
      {
        v12 = v5 + 2;
        do
        {
          v13 = v12;
          *v12++ = v10 | 0x80;
          v14 = v10 >> 7;
          v15 = v10 >> 14;
          v10 >>= 7;
        }
        while (v15);
        v11 = (google::protobuf::UnknownFieldSet *)(v13 + 2);
        *v12 = v14;
        goto LABEL_13;
      }
      v5[2] = v10;
      v9 = 3;
    }
    else
    {
      v5[1] = v8;
      v9 = 2;
    }
    v11 = (google::protobuf::UnknownFieldSet *)&v5[v9];
LABEL_13:
    v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v7, v11, a3, a4);
  }
  v16 = (SnippetUI::TextProperty *)*((_QWORD *)this + 5);
  if (!v16)
    goto LABEL_26;
  if ((unint64_t)v5 >= *(_QWORD *)a3)
  {
    v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v16 = (SnippetUI::TextProperty *)*((_QWORD *)this + 5);
  }
  *v5 = 18;
  v17 = *((_DWORD *)v16 + 15);
  if (v17 > 0x7F)
  {
    v5[1] = v17 | 0x80;
    v19 = v17 >> 7;
    if (v17 >> 14)
    {
      v21 = v5 + 2;
      do
      {
        v22 = v21;
        *v21++ = v19 | 0x80;
        v23 = v19 >> 7;
        v24 = v19 >> 14;
        v19 >>= 7;
      }
      while (v24);
      v20 = (google::protobuf::UnknownFieldSet *)(v22 + 2);
      *v21 = v23;
      goto LABEL_25;
    }
    v5[2] = v19;
    v18 = 3;
  }
  else
  {
    v5[1] = v17;
    v18 = 2;
  }
  v20 = (google::protobuf::UnknownFieldSet *)&v5[v18];
LABEL_25:
  v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v16, v20, a3, a4);
LABEL_26:
  v25 = (SnippetUI::TextProperty *)*((_QWORD *)this + 6);
  if (!v25)
    goto LABEL_38;
  if ((unint64_t)v5 >= *(_QWORD *)a3)
  {
    v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v25 = (SnippetUI::TextProperty *)*((_QWORD *)this + 6);
  }
  *v5 = 26;
  v26 = *((_DWORD *)v25 + 15);
  if (v26 > 0x7F)
  {
    v5[1] = v26 | 0x80;
    v28 = v26 >> 7;
    if (v26 >> 14)
    {
      v30 = v5 + 2;
      do
      {
        v31 = v30;
        *v30++ = v28 | 0x80;
        v32 = v28 >> 7;
        v33 = v28 >> 14;
        v28 >>= 7;
      }
      while (v33);
      v29 = (google::protobuf::UnknownFieldSet *)(v31 + 2);
      *v30 = v32;
      goto LABEL_37;
    }
    v5[2] = v28;
    v27 = 3;
  }
  else
  {
    v5[1] = v26;
    v27 = 2;
  }
  v29 = (google::protobuf::UnknownFieldSet *)&v5[v27];
LABEL_37:
  v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v25, v29, a3, a4);
LABEL_38:
  v34 = (SnippetUI::VisualProperty *)*((_QWORD *)this + 7);
  if (!v34)
    goto LABEL_50;
  if ((unint64_t)v5 >= *(_QWORD *)a3)
  {
    v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v34 = (SnippetUI::VisualProperty *)*((_QWORD *)this + 7);
  }
  *v5 = 34;
  v35 = *((_DWORD *)v34 + 15);
  if (v35 > 0x7F)
  {
    v5[1] = v35 | 0x80;
    v37 = v35 >> 7;
    if (v35 >> 14)
    {
      v39 = v5 + 2;
      do
      {
        v40 = v39;
        *v39++ = v37 | 0x80;
        v41 = v37 >> 7;
        v42 = v37 >> 14;
        v37 >>= 7;
      }
      while (v42);
      v38 = (google::protobuf::UnknownFieldSet *)(v40 + 2);
      *v39 = v41;
      goto LABEL_49;
    }
    v5[2] = v37;
    v36 = 3;
  }
  else
  {
    v5[1] = v35;
    v36 = 2;
  }
  v38 = (google::protobuf::UnknownFieldSet *)&v5[v36];
LABEL_49:
  v5 = (char *)SnippetUI::VisualProperty::InternalSerializeWithCachedSizesToArray(v34, v38, a3, a4);
LABEL_50:
  v43 = (SnippetUI::VisualProperty *)*((_QWORD *)this + 8);
  if (!v43)
    goto LABEL_62;
  if ((unint64_t)v5 >= *(_QWORD *)a3)
  {
    v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v43 = (SnippetUI::VisualProperty *)*((_QWORD *)this + 8);
  }
  *v5 = 42;
  v44 = *((_DWORD *)v43 + 15);
  if (v44 > 0x7F)
  {
    v5[1] = v44 | 0x80;
    v46 = v44 >> 7;
    if (v44 >> 14)
    {
      v48 = v5 + 2;
      do
      {
        v49 = v48;
        *v48++ = v46 | 0x80;
        v50 = v46 >> 7;
        v51 = v46 >> 14;
        v46 >>= 7;
      }
      while (v51);
      v47 = (google::protobuf::UnknownFieldSet *)(v49 + 2);
      *v48 = v50;
      goto LABEL_61;
    }
    v5[2] = v46;
    v45 = 3;
  }
  else
  {
    v5[1] = v44;
    v45 = 2;
  }
  v47 = (google::protobuf::UnknownFieldSet *)&v5[v45];
LABEL_61:
  v5 = (char *)SnippetUI::VisualProperty::InternalSerializeWithCachedSizesToArray(v43, v47, a3, a4);
LABEL_62:
  v52 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 9);
  if (v52)
  {
    if ((unint64_t)v5 >= *(_QWORD *)a3)
    {
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
      v52 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 9);
    }
    *v5 = 50;
    v53 = *((_DWORD *)v52 + 12);
    if (v53 > 0x7F)
    {
      v5[1] = v53 | 0x80;
      v55 = v53 >> 7;
      if (v53 >> 14)
      {
        v56 = v5 + 2;
        do
        {
          v57 = v56;
          *v56++ = v55 | 0x80;
          v58 = v55 >> 7;
          v59 = v55 >> 14;
          v55 >>= 7;
        }
        while (v59);
        v54 = (google::protobuf::UnknownFieldSet *)(v57 + 2);
        *v56 = v58;
      }
      else
      {
        v5[2] = v55;
        v54 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
      }
    }
    else
    {
      v5[1] = v53;
      v54 = (google::protobuf::UnknownFieldSet *)(v5 + 2);
    }
    v5 = (char *)SnippetUI::ActionProperty::InternalSerializeWithCachedSizesToArray(v52, v54, a3, a4);
  }
LABEL_73:
  v60 = (google::protobuf::internal *)*((_QWORD *)this + 2);
  if (*((char *)v60 + 23) < 0)
  {
    v61 = (const char *)*((_QWORD *)v60 + 1);
    if (!v61)
      goto LABEL_79;
    v60 = *(google::protobuf::internal **)v60;
    goto LABEL_78;
  }
  v61 = (const char *)*((unsigned __int8 *)v60 + 23);
  if (*((_BYTE *)v60 + 23))
  {
LABEL_78:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v60, v61, 1, (google::protobuf::internal *)"SnippetUI.SummaryItem_PairV2.component_name");
    v5 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 7, *((_QWORD *)this + 2), v5);
  }
LABEL_79:
  v62 = (google::protobuf::internal *)*((_QWORD *)this + 3);
  if (*((char *)v62 + 23) < 0)
  {
    v63 = (const char *)*((_QWORD *)v62 + 1);
    if (!v63)
      goto LABEL_85;
    v62 = *(google::protobuf::internal **)v62;
    goto LABEL_84;
  }
  v63 = (const char *)*((unsigned __int8 *)v62 + 23);
  if (*((_BYTE *)v62 + 23))
  {
LABEL_84:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v62, v63, 1, (google::protobuf::internal *)"SnippetUI.SummaryItem_PairV2.link_identifier");
    v5 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 8, *((_QWORD *)this + 3), v5);
  }
LABEL_85:
  v64 = *((_QWORD *)this + 1);
  if ((v64 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v64 & 0xFFFFFFFFFFFFFFFELL), (const google::protobuf::UnknownFieldSet *)v5, a3, a4);
  else
    return (const google::protobuf::UnknownFieldSet *)v5;
}

void SnippetUI::SummaryItem_PairV2::CopyFrom(SnippetUI::SummaryItem_PairV2 *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    SnippetUI::SummaryItem_PairV2::Clear(this);
    SnippetUI::SummaryItem_PairV2::MergeFrom(this, a2);
  }
}

void SnippetUI::SummaryItem_PairV2::MergeFrom(SnippetUI::SummaryItem_PairV2 *this, const google::protobuf::Message *lpsrc)
{
  std::string *v4;
  const SnippetUI::SummaryItem_PairV2 *v5;
  google::protobuf::Message *v6;
  char v7;
  std::string v8[2];

  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/SummaryItem.pb.cc", 4848);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5)
    SnippetUI::SummaryItem_PairV2::MergeFrom(this, v5);
  else
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
}

void sub_1BF931BAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::SummaryItem_PairV2::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 80) = a2;
  return this;
}

uint64_t SnippetUI::SummaryItem_PairV2::GetMetadata(SnippetUI::SummaryItem_PairV2 *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_SummaryItem_2eproto);
  return qword_1EF5819D0;
}

void *SnippetUI::SummaryItem_PairV2::default_instance(SnippetUI::SummaryItem_PairV2 *this)
{
  if (atomic_load(scc_info_SummaryItem_PairV2_SummaryItem_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_SummaryItem_PairV2_SummaryItem_2eproto);
  return &SnippetUI::_SummaryItem_PairV2_default_instance_;
}

void SnippetUI::SummaryItem_PairV2::MergeFrom(SnippetUI::SummaryItem_PairV2 *this, const SnippetUI::SummaryItem_PairV2 *a2)
{
  std::string *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  int **v10;
  int **v11;
  int **v12;
  int **v13;
  int **v14;
  int **v15;
  int **v16;
  int **v17;
  int **v18;
  int **v19;
  int **v20;
  int **v21;
  int **v22;
  int **v23;
  int **v24;
  int **v25;
  int **v26;
  int **v27;
  char v28;
  std::string v29[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v29, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/SummaryItem.pb.cc", 4863);
    v4 = google::protobuf::internal::LogMessage::operator<<(v29, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v28, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v29[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::SummaryItem_PairV2 *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  v6 = *((_QWORD *)a2 + 2);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(_QWORD *)(v6 + 8))
      goto LABEL_13;
  }
  else if (!*(_BYTE *)(v6 + 23))
  {
    goto LABEL_13;
  }
  v7 = (uint64_t *)*((_QWORD *)this + 2);
  if (v7 != (uint64_t *)v6)
  {
    if (v7 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, v6);
    else
      std::string::operator=(*((std::string **)this + 2), (const std::string *)v6);
  }
LABEL_13:
  v8 = *((_QWORD *)a2 + 3);
  if (*(char *)(v8 + 23) < 0)
  {
    if (!*(_QWORD *)(v8 + 8))
      goto LABEL_21;
  }
  else if (!*(_BYTE *)(v8 + 23))
  {
    goto LABEL_21;
  }
  v9 = (uint64_t *)*((_QWORD *)this + 3);
  if (v9 != (uint64_t *)v8)
  {
    if (v9 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 3, v8);
    else
      std::string::operator=(*((std::string **)this + 3), (const std::string *)v8);
  }
LABEL_21:
  if (a2 != (const SnippetUI::SummaryItem_PairV2 *)&SnippetUI::_SummaryItem_PairV2_default_instance_)
  {
    v10 = (int **)*((_QWORD *)a2 + 4);
    if (v10)
    {
      v11 = (int **)*((_QWORD *)this + 4);
      if (!v11)
      {
        v11 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 4) = v11;
        v10 = (int **)*((_QWORD *)a2 + 4);
      }
      if (v10)
        v12 = v10;
      else
        v12 = (int **)&SnippetUI::_TextProperty_default_instance_;
      SnippetUI::TextProperty::MergeFrom(v11, v12);
    }
    v13 = (int **)*((_QWORD *)a2 + 5);
    if (v13)
    {
      v14 = (int **)*((_QWORD *)this + 5);
      if (!v14)
      {
        v14 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 5) = v14;
        v13 = (int **)*((_QWORD *)a2 + 5);
      }
      if (v13)
        v15 = v13;
      else
        v15 = (int **)&SnippetUI::_TextProperty_default_instance_;
      SnippetUI::TextProperty::MergeFrom(v14, v15);
    }
    v16 = (int **)*((_QWORD *)a2 + 6);
    if (v16)
    {
      v17 = (int **)*((_QWORD *)this + 6);
      if (!v17)
      {
        v17 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 6) = v17;
        v16 = (int **)*((_QWORD *)a2 + 6);
      }
      if (v16)
        v18 = v16;
      else
        v18 = (int **)&SnippetUI::_TextProperty_default_instance_;
      SnippetUI::TextProperty::MergeFrom(v17, v18);
    }
    v19 = (int **)*((_QWORD *)a2 + 7);
    if (v19)
    {
      v20 = (int **)*((_QWORD *)this + 7);
      if (!v20)
      {
        v20 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::VisualProperty>(0);
        *((_QWORD *)this + 7) = v20;
        v19 = (int **)*((_QWORD *)a2 + 7);
      }
      if (v19)
        v21 = v19;
      else
        v21 = (int **)&SnippetUI::_VisualProperty_default_instance_;
      SnippetUI::VisualProperty::MergeFrom(v20, v21);
    }
    v22 = (int **)*((_QWORD *)a2 + 8);
    if (v22)
    {
      v23 = (int **)*((_QWORD *)this + 8);
      if (!v23)
      {
        v23 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::VisualProperty>(0);
        *((_QWORD *)this + 8) = v23;
        v22 = (int **)*((_QWORD *)a2 + 8);
      }
      if (v22)
        v24 = v22;
      else
        v24 = (int **)&SnippetUI::_VisualProperty_default_instance_;
      SnippetUI::VisualProperty::MergeFrom(v23, v24);
    }
    v25 = (int **)*((_QWORD *)a2 + 9);
    if (v25)
    {
      v26 = (int **)*((_QWORD *)this + 9);
      if (!v26)
      {
        v26 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
        *((_QWORD *)this + 9) = v26;
        v25 = (int **)*((_QWORD *)a2 + 9);
      }
      if (v25)
        v27 = v25;
      else
        v27 = (int **)&SnippetUI::_ActionProperty_default_instance_;
      SnippetUI::ActionProperty::MergeFrom(v26, v27);
    }
  }
}

void sub_1BF931E6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

SnippetUI::SummaryItem_PairV2 *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::SummaryItem_PairV2>(google::protobuf::internal::ArenaImpl *this)
{
  SnippetUI::SummaryItem_PairV2 *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (SnippetUI::SummaryItem_PairV2 *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x58uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::SummaryItem_PairV2>);
    SnippetUI::SummaryItem_PairV2::SummaryItem_PairV2(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (SnippetUI::SummaryItem_PairV2 *)operator new();
    SnippetUI::SummaryItem_PairV2::SummaryItem_PairV2(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_1BF931F08(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D890](v1, 0x10A1C401DBA19FDLL);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::SummaryItem_PairV2>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

void InitDefaultsscc_info_SummaryItem_PairNumberV2_SummaryItem_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/SummaryItem.pb.cc", a4);
  SnippetUI::SummaryItem_PairNumberV2::SummaryItem_PairNumberV2((SnippetUI::SummaryItem_PairNumberV2 *)&SnippetUI::_SummaryItem_PairNumberV2_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_SummaryItem_PairNumberV2_default_instance_, v4);
  qword_1EF5843A8 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1EF5843B0 = &SnippetUI::_TextProperty_default_instance_;
  qword_1EF5843B8 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1EF5843C0 = &SnippetUI::_TextProperty_default_instance_;
  qword_1EF5843C8 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1EF5843D0 = &SnippetUI::_TextProperty_default_instance_;
  qword_1EF5843D8 = (uint64_t)&SnippetUI::_MultilineTextProperty_default_instance_;
  unk_1EF5843E0 = &SnippetUI::_VisualProperty_default_instance_;
  qword_1EF5843E8 = (uint64_t)&SnippetUI::_VisualProperty_default_instance_;
  unk_1EF5843F0 = &SnippetUI::_ActionProperty_default_instance_;
}

SnippetUI::SummaryItem_PairNumberV2 *SnippetUI::SummaryItem_PairNumberV2::SummaryItem_PairNumberV2(SnippetUI::SummaryItem_PairNumberV2 *this)
{
  *(_QWORD *)this = &off_1E792E470;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 28) = 0;
  if (atomic_load(scc_info_SummaryItem_PairNumberV2_SummaryItem_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_SummaryItem_PairNumberV2_SummaryItem_2eproto);
  *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  return this;
}

void sub_1BF932170(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::SummaryItem_PairNumberV2::~SummaryItem_PairNumberV2(SnippetUI::SummaryItem_PairNumberV2 *this)
{
  SnippetUI::SummaryItem_PairNumberV2::~SummaryItem_PairNumberV2(this);
  JUMPOUT(0x1C3B8D890);
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *(_QWORD *)this = &off_1E792E470;
  v2 = *((_QWORD *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x1C3B8D890](v2, 0x1012C40EC159624);
  }
  v4 = *((_QWORD *)this + 3);
  if ((uint64_t *)v4 != &google::protobuf::internal::fixed_address_empty_string && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0)
      operator delete(*(void **)v4);
    MEMORY[0x1C3B8D890](v4, 0x1012C40EC159624);
  }
  if (this != (SnippetUI::SummaryItem_PairNumberV2 *)&SnippetUI::_SummaryItem_PairNumberV2_default_instance_)
  {
    v6 = *((_QWORD *)this + 4);
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    v7 = *((_QWORD *)this + 5);
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    v8 = *((_QWORD *)this + 6);
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    v9 = *((_QWORD *)this + 7);
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    v10 = *((_QWORD *)this + 8);
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    v11 = *((_QWORD *)this + 9);
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = *((_QWORD *)this + 10);
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    v13 = *((_QWORD *)this + 11);
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    v14 = *((_QWORD *)this + 12);
    if (v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    v15 = *((_QWORD *)this + 13);
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

SnippetUI::SummaryItem_PairNumberV2 *SnippetUI::SummaryItem_PairNumberV2::New(SnippetUI::SummaryItem_PairNumberV2 *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::SummaryItem_PairNumberV2>(0);
}

SnippetUI::SummaryItem_PairNumberV2 *SnippetUI::SummaryItem_PairNumberV2::New(SnippetUI::SummaryItem_PairNumberV2 *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::SummaryItem_PairNumberV2>(a2);
}

void SnippetUI::SummaryItem_PairNumberV2::Clear(SnippetUI::SummaryItem_PairNumberV2 *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  google::protobuf::internal::InternalMetadataWithArena *v14;
  char v15;

  v2 = *((_QWORD *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(_BYTE **)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v2 = 0;
      *(_BYTE *)(v2 + 23) = 0;
    }
  }
  v3 = *((_QWORD *)this + 3);
  if ((uint64_t *)v3 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v3 + 23) < 0)
    {
      **(_BYTE **)v3 = 0;
      *(_QWORD *)(v3 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v3 = 0;
      *(_BYTE *)(v3 + 23) = 0;
    }
  }
  v4 = *((_QWORD *)this + 4);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  *((_QWORD *)this + 4) = 0;
  v5 = *((_QWORD *)this + 5);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *((_QWORD *)this + 5) = 0;
  v6 = *((_QWORD *)this + 6);
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  *((_QWORD *)this + 6) = 0;
  v7 = *((_QWORD *)this + 7);
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  *((_QWORD *)this + 7) = 0;
  v8 = *((_QWORD *)this + 8);
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  *((_QWORD *)this + 8) = 0;
  v9 = *((_QWORD *)this + 9);
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  *((_QWORD *)this + 9) = 0;
  v10 = *((_QWORD *)this + 10);
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  *((_QWORD *)this + 10) = 0;
  v11 = *((_QWORD *)this + 11);
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  *((_QWORD *)this + 11) = 0;
  v12 = *((_QWORD *)this + 12);
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  *((_QWORD *)this + 12) = 0;
  v13 = *((_QWORD *)this + 13);
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15 = *((_BYTE *)this + 8);
  v14 = (SnippetUI::SummaryItem_PairNumberV2 *)((char *)this + 8);
  *((_QWORD *)v14 + 12) = 0;
  if ((v15 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v14);
}

uint64_t SnippetUI::SummaryItem_PairNumberV2::IsInitialized(SnippetUI::SummaryItem_PairNumberV2 *this)
{
  return 1;
}

char *SnippetUI::SummaryItem_PairNumberV2::ByteSizeLong(SnippetUI::SummaryItem_PairNumberV2 *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  const google::protobuf::UnknownFieldSet *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  SnippetUI::TextProperty *v9;
  char *v10;
  SnippetUI::TextProperty *v11;
  char *v12;
  SnippetUI::TextProperty *v13;
  char *v14;
  SnippetUI::TextProperty *v15;
  char *v16;
  SnippetUI::TextProperty *v17;
  char *v18;
  SnippetUI::TextProperty *v19;
  char *v20;
  SnippetUI::MultilineTextProperty *v21;
  char *v22;
  SnippetUI::VisualProperty *v23;
  char *v24;
  SnippetUI::VisualProperty *v25;
  char *v26;
  SnippetUI::ActionProperty *v27;
  char *v28;

  v2 = *((_QWORD *)this + 2);
  v3 = *(unsigned __int8 *)(v2 + 23);
  if (*(char *)(v2 + 23) < 0)
  {
    if (*(_QWORD *)(v2 + 8))
      goto LABEL_3;
LABEL_7:
    v5 = 0;
    goto LABEL_8;
  }
  if (!*(_BYTE *)(v2 + 23))
    goto LABEL_7;
LABEL_3:
  v4 = *(_QWORD *)(v2 + 8);
  if ((v3 & 0x80u) == 0)
    v4 = v3;
  v5 = (const google::protobuf::UnknownFieldSet *)(v4 + ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_8:
  v6 = *((_QWORD *)this + 3);
  v7 = *(unsigned __int8 *)(v6 + 23);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(_QWORD *)(v6 + 8))
      goto LABEL_13;
  }
  else if (!*(_BYTE *)(v6 + 23))
  {
    goto LABEL_13;
  }
  v8 = *(_QWORD *)(v6 + 8);
  if ((v7 & 0x80u) == 0)
    v8 = v7;
  v5 = (const google::protobuf::UnknownFieldSet *)((char *)v5 + v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 2);
LABEL_13:
  if (this != (SnippetUI::SummaryItem_PairNumberV2 *)&SnippetUI::_SummaryItem_PairNumberV2_default_instance_)
  {
    v9 = (SnippetUI::TextProperty *)*((_QWORD *)this + 4);
    if (v9)
    {
      v10 = SnippetUI::TextProperty::ByteSizeLong(v9);
      v5 = (const google::protobuf::UnknownFieldSet *)&v10[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v11 = (SnippetUI::TextProperty *)*((_QWORD *)this + 5);
    if (v11)
    {
      v12 = SnippetUI::TextProperty::ByteSizeLong(v11);
      v5 = (const google::protobuf::UnknownFieldSet *)&v12[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v12 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v13 = (SnippetUI::TextProperty *)*((_QWORD *)this + 6);
    if (v13)
    {
      v14 = SnippetUI::TextProperty::ByteSizeLong(v13);
      v5 = (const google::protobuf::UnknownFieldSet *)&v14[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v14 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v15 = (SnippetUI::TextProperty *)*((_QWORD *)this + 7);
    if (v15)
    {
      v16 = SnippetUI::TextProperty::ByteSizeLong(v15);
      v5 = (const google::protobuf::UnknownFieldSet *)&v16[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v16 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v17 = (SnippetUI::TextProperty *)*((_QWORD *)this + 8);
    if (v17)
    {
      v18 = SnippetUI::TextProperty::ByteSizeLong(v17);
      v5 = (const google::protobuf::UnknownFieldSet *)&v18[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v18 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v19 = (SnippetUI::TextProperty *)*((_QWORD *)this + 9);
    if (v19)
    {
      v20 = SnippetUI::TextProperty::ByteSizeLong(v19);
      v5 = (const google::protobuf::UnknownFieldSet *)&v20[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v20 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v21 = (SnippetUI::MultilineTextProperty *)*((_QWORD *)this + 10);
    if (v21)
    {
      v22 = SnippetUI::MultilineTextProperty::ByteSizeLong(v21);
      v5 = (const google::protobuf::UnknownFieldSet *)&v22[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v22 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v23 = (SnippetUI::VisualProperty *)*((_QWORD *)this + 11);
    if (v23)
    {
      v24 = SnippetUI::VisualProperty::ByteSizeLong(v23);
      v5 = (const google::protobuf::UnknownFieldSet *)&v24[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v24 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v25 = (SnippetUI::VisualProperty *)*((_QWORD *)this + 12);
    if (v25)
    {
      v26 = SnippetUI::VisualProperty::ByteSizeLong(v25);
      v5 = (const google::protobuf::UnknownFieldSet *)&v26[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v26 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v27 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 13);
    if (v27)
    {
      v28 = SnippetUI::ActionProperty::ByteSizeLong(v27);
      v5 = (const google::protobuf::UnknownFieldSet *)&v28[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v28 | 1) ^ 0x1F) + 73) >> 6)];
    }
  }
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::SummaryItem_PairNumberV2 *)((char *)this + 8), v5, (_DWORD *)this + 28);
  *((_DWORD *)this + 28) = (_DWORD)v5;
  return (char *)v5;
}

uint64_t SnippetUI::SummaryItem_PairNumberV2::GetCachedSize(SnippetUI::SummaryItem_PairNumberV2 *this)
{
  return *((unsigned int *)this + 28);
}

google::protobuf::internal *SnippetUI::SummaryItem_PairNumberV2::_InternalParse(SnippetUI::SummaryItem_PairNumberV2 *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  std::string **v5;
  std::string **v6;
  uint64_t *v7;
  google::protobuf::internal::ParseContext *v8;
  google::protobuf::internal *TagFallback;
  char *v10;
  SnippetUI::TextProperty *v11;
  char *v12;
  SnippetUI::MultilineTextProperty *v13;
  SnippetUI::VisualProperty *v14;
  SnippetUI::ActionProperty *v15;
  std::string *v16;
  std::string::value_type *v17;
  google::protobuf::internal::ParseContext *v18;
  char *v19;
  BOOL v20;
  google::protobuf::internal *v22;

  v22 = a2;
  v5 = (std::string **)((char *)this + 24);
  v6 = (std::string **)((char *)this + 16);
  v7 = (uint64_t *)((char *)this + 8);
  while (2)
  {
    if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v22, *((_DWORD *)a3 + 23)) & 1) != 0)
      return v22;
    TagFallback = (google::protobuf::internal *)((char *)v22 + 1);
    v10 = (char *)*(unsigned __int8 *)v22;
    if ((*(char *)v22 & 0x80000000) == 0)
      goto LABEL_6;
    v10 = (char *)(v10 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v22 + 2);
LABEL_6:
      v22 = TagFallback;
      goto LABEL_7;
    }
    TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v22, v10);
    v22 = TagFallback;
    if (!TagFallback)
      return TagFallback;
LABEL_7:
    switch(v10 >> 3)
    {
      case 1u:
        if (v10 != 10)
          goto LABEL_55;
        v11 = (SnippetUI::TextProperty *)*((_QWORD *)this + 4);
        if (v11)
          goto LABEL_29;
        v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 4) = v11;
        goto LABEL_28;
      case 2u:
        if (v10 != 18)
          goto LABEL_55;
        v11 = (SnippetUI::TextProperty *)*((_QWORD *)this + 5);
        if (v11)
          goto LABEL_29;
        v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 5) = v11;
        goto LABEL_28;
      case 3u:
        if (v10 != 26)
          goto LABEL_55;
        v11 = (SnippetUI::TextProperty *)*((_QWORD *)this + 6);
        if (v11)
          goto LABEL_29;
        v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 6) = v11;
        goto LABEL_28;
      case 4u:
        if (v10 != 34)
          goto LABEL_55;
        v11 = (SnippetUI::TextProperty *)*((_QWORD *)this + 7);
        if (v11)
          goto LABEL_29;
        v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 7) = v11;
        goto LABEL_28;
      case 5u:
        if (v10 != 42)
          goto LABEL_55;
        v11 = (SnippetUI::TextProperty *)*((_QWORD *)this + 8);
        if (v11)
          goto LABEL_29;
        v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 8) = v11;
        goto LABEL_28;
      case 6u:
        if (v10 != 50)
          goto LABEL_55;
        v11 = (SnippetUI::TextProperty *)*((_QWORD *)this + 9);
        if (v11)
          goto LABEL_29;
        v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 9) = v11;
LABEL_28:
        TagFallback = v22;
LABEL_29:
        v12 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::TextProperty>(a3, v11, TagFallback);
        goto LABEL_60;
      case 7u:
        if (v10 != 58)
          goto LABEL_55;
        v13 = (SnippetUI::MultilineTextProperty *)*((_QWORD *)this + 10);
        if (!v13)
        {
          v13 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::MultilineTextProperty>(0);
          *((_QWORD *)this + 10) = v13;
          TagFallback = v22;
        }
        v12 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::MultilineTextProperty>(a3, v13, TagFallback);
        goto LABEL_60;
      case 8u:
        if (v10 != 66)
          goto LABEL_55;
        v14 = (SnippetUI::VisualProperty *)*((_QWORD *)this + 11);
        if (v14)
          goto LABEL_41;
        v14 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::VisualProperty>(0);
        *((_QWORD *)this + 11) = v14;
        goto LABEL_40;
      case 9u:
        if (v10 != 74)
          goto LABEL_55;
        v14 = (SnippetUI::VisualProperty *)*((_QWORD *)this + 12);
        if (v14)
          goto LABEL_41;
        v14 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::VisualProperty>(0);
        *((_QWORD *)this + 12) = v14;
LABEL_40:
        TagFallback = v22;
LABEL_41:
        v12 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::VisualProperty>(a3, v14, TagFallback);
        goto LABEL_60;
      case 0xEu:
        if (v10 != 114)
          goto LABEL_55;
        v15 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 13);
        if (!v15)
        {
          v15 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
          *((_QWORD *)this + 13) = v15;
          TagFallback = v22;
        }
        v12 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::ActionProperty>(a3, v15, TagFallback);
        goto LABEL_60;
      case 0xFu:
        if (v10 != 122)
          goto LABEL_55;
        v16 = *v6;
        if (*v6 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v6, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v16 = *v6;
          TagFallback = v22;
        }
        v17 = (std::string::value_type *)TagFallback;
        v18 = a3;
        v19 = "SnippetUI.SummaryItem_PairNumberV2.component_name";
        goto LABEL_54;
      case 0x10u:
        if (v10 != 130)
          goto LABEL_55;
        v16 = *v5;
        if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v16 = *v5;
          TagFallback = v22;
        }
        v17 = (std::string::value_type *)TagFallback;
        v18 = a3;
        v19 = "SnippetUI.SummaryItem_PairNumberV2.link_identifier";
LABEL_54:
        v12 = google::protobuf::internal::InlineGreedyStringParserUTF8(v16, v17, (uint64_t)v18, (google::protobuf::internal *)v19);
        goto LABEL_60;
      default:
LABEL_55:
        if ((_DWORD)v10)
          v20 = (v10 & 7) == 4;
        else
          v20 = 1;
        if (v20)
        {
          *((_DWORD *)a3 + 20) = (_DWORD)v10 - 1;
          return TagFallback;
        }
        v12 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v10, v7, TagFallback, a3, v8);
LABEL_60:
        v22 = (google::protobuf::internal *)v12;
        if (v12)
          continue;
        TagFallback = 0;
        break;
    }
    return TagFallback;
  }
}

const google::protobuf::UnknownFieldSet *SnippetUI::SummaryItem_PairNumberV2::InternalSerializeWithCachedSizesToArray(SnippetUI::SummaryItem_PairNumberV2 *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  char *v5;
  SnippetUI::TextProperty *v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  google::protobuf::UnknownFieldSet *v11;
  _BYTE *v12;
  _BYTE *v13;
  unsigned int v14;
  unsigned int v15;
  SnippetUI::TextProperty *v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  google::protobuf::UnknownFieldSet *v20;
  _BYTE *v21;
  _BYTE *v22;
  unsigned int v23;
  unsigned int v24;
  SnippetUI::TextProperty *v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  google::protobuf::UnknownFieldSet *v29;
  _BYTE *v30;
  _BYTE *v31;
  unsigned int v32;
  unsigned int v33;
  SnippetUI::TextProperty *v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int v37;
  google::protobuf::UnknownFieldSet *v38;
  _BYTE *v39;
  _BYTE *v40;
  unsigned int v41;
  unsigned int v42;
  SnippetUI::TextProperty *v43;
  unsigned int v44;
  uint64_t v45;
  unsigned int v46;
  google::protobuf::UnknownFieldSet *v47;
  _BYTE *v48;
  _BYTE *v49;
  unsigned int v50;
  unsigned int v51;
  SnippetUI::TextProperty *v52;
  unsigned int v53;
  uint64_t v54;
  unsigned int v55;
  google::protobuf::UnknownFieldSet *v56;
  _BYTE *v57;
  _BYTE *v58;
  unsigned int v59;
  unsigned int v60;
  SnippetUI::MultilineTextProperty *v61;
  unsigned int v62;
  uint64_t v63;
  unsigned int v64;
  google::protobuf::UnknownFieldSet *v65;
  _BYTE *v66;
  _BYTE *v67;
  unsigned int v68;
  unsigned int v69;
  SnippetUI::VisualProperty *v70;
  unsigned int v71;
  uint64_t v72;
  unsigned int v73;
  google::protobuf::UnknownFieldSet *v74;
  _BYTE *v75;
  _BYTE *v76;
  unsigned int v77;
  unsigned int v78;
  SnippetUI::VisualProperty *v79;
  unsigned int v80;
  uint64_t v81;
  unsigned int v82;
  google::protobuf::UnknownFieldSet *v83;
  _BYTE *v84;
  _BYTE *v85;
  unsigned int v86;
  unsigned int v87;
  SnippetUI::ActionProperty *v88;
  unsigned int v89;
  google::protobuf::UnknownFieldSet *v90;
  unsigned int v91;
  _BYTE *v92;
  _BYTE *v93;
  unsigned int v94;
  unsigned int v95;
  google::protobuf::internal *v96;
  const char *v97;
  google::protobuf::internal *v98;
  const char *v99;
  uint64_t v100;

  v5 = (char *)a2;
  if (this == (SnippetUI::SummaryItem_PairNumberV2 *)&SnippetUI::_SummaryItem_PairNumberV2_default_instance_)
    goto LABEL_121;
  v7 = (SnippetUI::TextProperty *)*((_QWORD *)this + 4);
  if (v7)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
    {
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      v7 = (SnippetUI::TextProperty *)*((_QWORD *)this + 4);
    }
    *v5 = 10;
    v8 = *((_DWORD *)v7 + 15);
    if (v8 > 0x7F)
    {
      v5[1] = v8 | 0x80;
      v10 = v8 >> 7;
      if (v8 >> 14)
      {
        v12 = v5 + 2;
        do
        {
          v13 = v12;
          *v12++ = v10 | 0x80;
          v14 = v10 >> 7;
          v15 = v10 >> 14;
          v10 >>= 7;
        }
        while (v15);
        v11 = (google::protobuf::UnknownFieldSet *)(v13 + 2);
        *v12 = v14;
        goto LABEL_13;
      }
      v5[2] = v10;
      v9 = 3;
    }
    else
    {
      v5[1] = v8;
      v9 = 2;
    }
    v11 = (google::protobuf::UnknownFieldSet *)&v5[v9];
LABEL_13:
    v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v7, v11, a3, a4);
  }
  v16 = (SnippetUI::TextProperty *)*((_QWORD *)this + 5);
  if (!v16)
    goto LABEL_26;
  if ((unint64_t)v5 >= *(_QWORD *)a3)
  {
    v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v16 = (SnippetUI::TextProperty *)*((_QWORD *)this + 5);
  }
  *v5 = 18;
  v17 = *((_DWORD *)v16 + 15);
  if (v17 > 0x7F)
  {
    v5[1] = v17 | 0x80;
    v19 = v17 >> 7;
    if (v17 >> 14)
    {
      v21 = v5 + 2;
      do
      {
        v22 = v21;
        *v21++ = v19 | 0x80;
        v23 = v19 >> 7;
        v24 = v19 >> 14;
        v19 >>= 7;
      }
      while (v24);
      v20 = (google::protobuf::UnknownFieldSet *)(v22 + 2);
      *v21 = v23;
      goto LABEL_25;
    }
    v5[2] = v19;
    v18 = 3;
  }
  else
  {
    v5[1] = v17;
    v18 = 2;
  }
  v20 = (google::protobuf::UnknownFieldSet *)&v5[v18];
LABEL_25:
  v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v16, v20, a3, a4);
LABEL_26:
  v25 = (SnippetUI::TextProperty *)*((_QWORD *)this + 6);
  if (!v25)
    goto LABEL_38;
  if ((unint64_t)v5 >= *(_QWORD *)a3)
  {
    v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v25 = (SnippetUI::TextProperty *)*((_QWORD *)this + 6);
  }
  *v5 = 26;
  v26 = *((_DWORD *)v25 + 15);
  if (v26 > 0x7F)
  {
    v5[1] = v26 | 0x80;
    v28 = v26 >> 7;
    if (v26 >> 14)
    {
      v30 = v5 + 2;
      do
      {
        v31 = v30;
        *v30++ = v28 | 0x80;
        v32 = v28 >> 7;
        v33 = v28 >> 14;
        v28 >>= 7;
      }
      while (v33);
      v29 = (google::protobuf::UnknownFieldSet *)(v31 + 2);
      *v30 = v32;
      goto LABEL_37;
    }
    v5[2] = v28;
    v27 = 3;
  }
  else
  {
    v5[1] = v26;
    v27 = 2;
  }
  v29 = (google::protobuf::UnknownFieldSet *)&v5[v27];
LABEL_37:
  v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v25, v29, a3, a4);
LABEL_38:
  v34 = (SnippetUI::TextProperty *)*((_QWORD *)this + 7);
  if (!v34)
    goto LABEL_50;
  if ((unint64_t)v5 >= *(_QWORD *)a3)
  {
    v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v34 = (SnippetUI::TextProperty *)*((_QWORD *)this + 7);
  }
  *v5 = 34;
  v35 = *((_DWORD *)v34 + 15);
  if (v35 > 0x7F)
  {
    v5[1] = v35 | 0x80;
    v37 = v35 >> 7;
    if (v35 >> 14)
    {
      v39 = v5 + 2;
      do
      {
        v40 = v39;
        *v39++ = v37 | 0x80;
        v41 = v37 >> 7;
        v42 = v37 >> 14;
        v37 >>= 7;
      }
      while (v42);
      v38 = (google::protobuf::UnknownFieldSet *)(v40 + 2);
      *v39 = v41;
      goto LABEL_49;
    }
    v5[2] = v37;
    v36 = 3;
  }
  else
  {
    v5[1] = v35;
    v36 = 2;
  }
  v38 = (google::protobuf::UnknownFieldSet *)&v5[v36];
LABEL_49:
  v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v34, v38, a3, a4);
LABEL_50:
  v43 = (SnippetUI::TextProperty *)*((_QWORD *)this + 8);
  if (!v43)
    goto LABEL_62;
  if ((unint64_t)v5 >= *(_QWORD *)a3)
  {
    v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v43 = (SnippetUI::TextProperty *)*((_QWORD *)this + 8);
  }
  *v5 = 42;
  v44 = *((_DWORD *)v43 + 15);
  if (v44 > 0x7F)
  {
    v5[1] = v44 | 0x80;
    v46 = v44 >> 7;
    if (v44 >> 14)
    {
      v48 = v5 + 2;
      do
      {
        v49 = v48;
        *v48++ = v46 | 0x80;
        v50 = v46 >> 7;
        v51 = v46 >> 14;
        v46 >>= 7;
      }
      while (v51);
      v47 = (google::protobuf::UnknownFieldSet *)(v49 + 2);
      *v48 = v50;
      goto LABEL_61;
    }
    v5[2] = v46;
    v45 = 3;
  }
  else
  {
    v5[1] = v44;
    v45 = 2;
  }
  v47 = (google::protobuf::UnknownFieldSet *)&v5[v45];
LABEL_61:
  v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v43, v47, a3, a4);
LABEL_62:
  v52 = (SnippetUI::TextProperty *)*((_QWORD *)this + 9);
  if (!v52)
    goto LABEL_74;
  if ((unint64_t)v5 >= *(_QWORD *)a3)
  {
    v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v52 = (SnippetUI::TextProperty *)*((_QWORD *)this + 9);
  }
  *v5 = 50;
  v53 = *((_DWORD *)v52 + 15);
  if (v53 > 0x7F)
  {
    v5[1] = v53 | 0x80;
    v55 = v53 >> 7;
    if (v53 >> 14)
    {
      v57 = v5 + 2;
      do
      {
        v58 = v57;
        *v57++ = v55 | 0x80;
        v59 = v55 >> 7;
        v60 = v55 >> 14;
        v55 >>= 7;
      }
      while (v60);
      v56 = (google::protobuf::UnknownFieldSet *)(v58 + 2);
      *v57 = v59;
      goto LABEL_73;
    }
    v5[2] = v55;
    v54 = 3;
  }
  else
  {
    v5[1] = v53;
    v54 = 2;
  }
  v56 = (google::protobuf::UnknownFieldSet *)&v5[v54];
LABEL_73:
  v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v52, v56, a3, a4);
LABEL_74:
  v61 = (SnippetUI::MultilineTextProperty *)*((_QWORD *)this + 10);
  if (!v61)
    goto LABEL_86;
  if ((unint64_t)v5 >= *(_QWORD *)a3)
  {
    v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v61 = (SnippetUI::MultilineTextProperty *)*((_QWORD *)this + 10);
  }
  *v5 = 58;
  v62 = *((_DWORD *)v61 + 15);
  if (v62 > 0x7F)
  {
    v5[1] = v62 | 0x80;
    v64 = v62 >> 7;
    if (v62 >> 14)
    {
      v66 = v5 + 2;
      do
      {
        v67 = v66;
        *v66++ = v64 | 0x80;
        v68 = v64 >> 7;
        v69 = v64 >> 14;
        v64 >>= 7;
      }
      while (v69);
      v65 = (google::protobuf::UnknownFieldSet *)(v67 + 2);
      *v66 = v68;
      goto LABEL_85;
    }
    v5[2] = v64;
    v63 = 3;
  }
  else
  {
    v5[1] = v62;
    v63 = 2;
  }
  v65 = (google::protobuf::UnknownFieldSet *)&v5[v63];
LABEL_85:
  v5 = (char *)SnippetUI::MultilineTextProperty::InternalSerializeWithCachedSizesToArray(v61, v65, a3, a4);
LABEL_86:
  v70 = (SnippetUI::VisualProperty *)*((_QWORD *)this + 11);
  if (!v70)
    goto LABEL_98;
  if ((unint64_t)v5 >= *(_QWORD *)a3)
  {
    v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v70 = (SnippetUI::VisualProperty *)*((_QWORD *)this + 11);
  }
  *v5 = 66;
  v71 = *((_DWORD *)v70 + 15);
  if (v71 > 0x7F)
  {
    v5[1] = v71 | 0x80;
    v73 = v71 >> 7;
    if (v71 >> 14)
    {
      v75 = v5 + 2;
      do
      {
        v76 = v75;
        *v75++ = v73 | 0x80;
        v77 = v73 >> 7;
        v78 = v73 >> 14;
        v73 >>= 7;
      }
      while (v78);
      v74 = (google::protobuf::UnknownFieldSet *)(v76 + 2);
      *v75 = v77;
      goto LABEL_97;
    }
    v5[2] = v73;
    v72 = 3;
  }
  else
  {
    v5[1] = v71;
    v72 = 2;
  }
  v74 = (google::protobuf::UnknownFieldSet *)&v5[v72];
LABEL_97:
  v5 = (char *)SnippetUI::VisualProperty::InternalSerializeWithCachedSizesToArray(v70, v74, a3, a4);
LABEL_98:
  v79 = (SnippetUI::VisualProperty *)*((_QWORD *)this + 12);
  if (!v79)
    goto LABEL_110;
  if ((unint64_t)v5 >= *(_QWORD *)a3)
  {
    v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v79 = (SnippetUI::VisualProperty *)*((_QWORD *)this + 12);
  }
  *v5 = 74;
  v80 = *((_DWORD *)v79 + 15);
  if (v80 > 0x7F)
  {
    v5[1] = v80 | 0x80;
    v82 = v80 >> 7;
    if (v80 >> 14)
    {
      v84 = v5 + 2;
      do
      {
        v85 = v84;
        *v84++ = v82 | 0x80;
        v86 = v82 >> 7;
        v87 = v82 >> 14;
        v82 >>= 7;
      }
      while (v87);
      v83 = (google::protobuf::UnknownFieldSet *)(v85 + 2);
      *v84 = v86;
      goto LABEL_109;
    }
    v5[2] = v82;
    v81 = 3;
  }
  else
  {
    v5[1] = v80;
    v81 = 2;
  }
  v83 = (google::protobuf::UnknownFieldSet *)&v5[v81];
LABEL_109:
  v5 = (char *)SnippetUI::VisualProperty::InternalSerializeWithCachedSizesToArray(v79, v83, a3, a4);
LABEL_110:
  v88 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 13);
  if (v88)
  {
    if ((unint64_t)v5 >= *(_QWORD *)a3)
    {
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
      v88 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 13);
    }
    *v5 = 114;
    v89 = *((_DWORD *)v88 + 12);
    if (v89 > 0x7F)
    {
      v5[1] = v89 | 0x80;
      v91 = v89 >> 7;
      if (v89 >> 14)
      {
        v92 = v5 + 2;
        do
        {
          v93 = v92;
          *v92++ = v91 | 0x80;
          v94 = v91 >> 7;
          v95 = v91 >> 14;
          v91 >>= 7;
        }
        while (v95);
        v90 = (google::protobuf::UnknownFieldSet *)(v93 + 2);
        *v92 = v94;
      }
      else
      {
        v5[2] = v91;
        v90 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
      }
    }
    else
    {
      v5[1] = v89;
      v90 = (google::protobuf::UnknownFieldSet *)(v5 + 2);
    }
    v5 = (char *)SnippetUI::ActionProperty::InternalSerializeWithCachedSizesToArray(v88, v90, a3, a4);
  }
LABEL_121:
  v96 = (google::protobuf::internal *)*((_QWORD *)this + 2);
  if (*((char *)v96 + 23) < 0)
  {
    v97 = (const char *)*((_QWORD *)v96 + 1);
    if (!v97)
      goto LABEL_127;
    v96 = *(google::protobuf::internal **)v96;
    goto LABEL_126;
  }
  v97 = (const char *)*((unsigned __int8 *)v96 + 23);
  if (*((_BYTE *)v96 + 23))
  {
LABEL_126:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v96, v97, 1, (google::protobuf::internal *)"SnippetUI.SummaryItem_PairNumberV2.component_name");
    v5 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 15, *((_QWORD *)this + 2), v5);
  }
LABEL_127:
  v98 = (google::protobuf::internal *)*((_QWORD *)this + 3);
  if (*((char *)v98 + 23) < 0)
  {
    v99 = (const char *)*((_QWORD *)v98 + 1);
    if (!v99)
      goto LABEL_133;
    v98 = *(google::protobuf::internal **)v98;
    goto LABEL_132;
  }
  v99 = (const char *)*((unsigned __int8 *)v98 + 23);
  if (*((_BYTE *)v98 + 23))
  {
LABEL_132:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v98, v99, 1, (google::protobuf::internal *)"SnippetUI.SummaryItem_PairNumberV2.link_identifier");
    v5 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 16, *((_QWORD *)this + 3), v5);
  }
LABEL_133:
  v100 = *((_QWORD *)this + 1);
  if ((v100 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v100 & 0xFFFFFFFFFFFFFFFELL), (const google::protobuf::UnknownFieldSet *)v5, a3, a4);
  else
    return (const google::protobuf::UnknownFieldSet *)v5;
}

void SnippetUI::SummaryItem_PairNumberV2::CopyFrom(SnippetUI::SummaryItem_PairNumberV2 *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    SnippetUI::SummaryItem_PairNumberV2::Clear(this);
    SnippetUI::SummaryItem_PairNumberV2::MergeFrom(this, a2);
  }
}

void SnippetUI::SummaryItem_PairNumberV2::MergeFrom(SnippetUI::SummaryItem_PairNumberV2 *this, const google::protobuf::Message *lpsrc)
{
  std::string *v4;
  const SnippetUI::SummaryItem_PairNumberV2 *v5;
  google::protobuf::Message *v6;
  char v7;
  std::string v8[2];

  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/SummaryItem.pb.cc", 6482);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5)
    SnippetUI::SummaryItem_PairNumberV2::MergeFrom(this, v5);
  else
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
}

void sub_1BF9331E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::SummaryItem_PairNumberV2::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 112) = a2;
  return this;
}

uint64_t SnippetUI::SummaryItem_PairNumberV2::GetMetadata(SnippetUI::SummaryItem_PairNumberV2 *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_SummaryItem_2eproto);
  return qword_1EF5819F0;
}

void *SnippetUI::SummaryItem_PairNumberV2::default_instance(SnippetUI::SummaryItem_PairNumberV2 *this)
{
  if (atomic_load(scc_info_SummaryItem_PairNumberV2_SummaryItem_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_SummaryItem_PairNumberV2_SummaryItem_2eproto);
  return &SnippetUI::_SummaryItem_PairNumberV2_default_instance_;
}

void SnippetUI::SummaryItem_PairNumberV2::MergeFrom(SnippetUI::SummaryItem_PairNumberV2 *this, const SnippetUI::SummaryItem_PairNumberV2 *a2)
{
  std::string *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  int **v10;
  int **v11;
  int **v12;
  int **v13;
  int **v14;
  int **v15;
  int **v16;
  int **v17;
  int **v18;
  int **v19;
  int **v20;
  int **v21;
  int **v22;
  int **v23;
  int **v24;
  int **v25;
  int **v26;
  int **v27;
  int **v28;
  int **v29;
  int **v30;
  int **v31;
  int **v32;
  int **v33;
  int **v34;
  int **v35;
  int **v36;
  int **v37;
  int **v38;
  int **v39;
  char v40;
  std::string v41[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v41, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/SummaryItem.pb.cc", 6497);
    v4 = google::protobuf::internal::LogMessage::operator<<(v41, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v40, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v41[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::SummaryItem_PairNumberV2 *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  v6 = *((_QWORD *)a2 + 2);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(_QWORD *)(v6 + 8))
      goto LABEL_13;
  }
  else if (!*(_BYTE *)(v6 + 23))
  {
    goto LABEL_13;
  }
  v7 = (uint64_t *)*((_QWORD *)this + 2);
  if (v7 != (uint64_t *)v6)
  {
    if (v7 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, v6);
    else
      std::string::operator=(*((std::string **)this + 2), (const std::string *)v6);
  }
LABEL_13:
  v8 = *((_QWORD *)a2 + 3);
  if (*(char *)(v8 + 23) < 0)
  {
    if (!*(_QWORD *)(v8 + 8))
      goto LABEL_21;
  }
  else if (!*(_BYTE *)(v8 + 23))
  {
    goto LABEL_21;
  }
  v9 = (uint64_t *)*((_QWORD *)this + 3);
  if (v9 != (uint64_t *)v8)
  {
    if (v9 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 3, v8);
    else
      std::string::operator=(*((std::string **)this + 3), (const std::string *)v8);
  }
LABEL_21:
  if (a2 != (const SnippetUI::SummaryItem_PairNumberV2 *)&SnippetUI::_SummaryItem_PairNumberV2_default_instance_)
  {
    v10 = (int **)*((_QWORD *)a2 + 4);
    if (v10)
    {
      v11 = (int **)*((_QWORD *)this + 4);
      if (!v11)
      {
        v11 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 4) = v11;
        v10 = (int **)*((_QWORD *)a2 + 4);
      }
      if (v10)
        v12 = v10;
      else
        v12 = (int **)&SnippetUI::_TextProperty_default_instance_;
      SnippetUI::TextProperty::MergeFrom(v11, v12);
    }
    v13 = (int **)*((_QWORD *)a2 + 5);
    if (v13)
    {
      v14 = (int **)*((_QWORD *)this + 5);
      if (!v14)
      {
        v14 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 5) = v14;
        v13 = (int **)*((_QWORD *)a2 + 5);
      }
      if (v13)
        v15 = v13;
      else
        v15 = (int **)&SnippetUI::_TextProperty_default_instance_;
      SnippetUI::TextProperty::MergeFrom(v14, v15);
    }
    v16 = (int **)*((_QWORD *)a2 + 6);
    if (v16)
    {
      v17 = (int **)*((_QWORD *)this + 6);
      if (!v17)
      {
        v17 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 6) = v17;
        v16 = (int **)*((_QWORD *)a2 + 6);
      }
      if (v16)
        v18 = v16;
      else
        v18 = (int **)&SnippetUI::_TextProperty_default_instance_;
      SnippetUI::TextProperty::MergeFrom(v17, v18);
    }
    v19 = (int **)*((_QWORD *)a2 + 7);
    if (v19)
    {
      v20 = (int **)*((_QWORD *)this + 7);
      if (!v20)
      {
        v20 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 7) = v20;
        v19 = (int **)*((_QWORD *)a2 + 7);
      }
      if (v19)
        v21 = v19;
      else
        v21 = (int **)&SnippetUI::_TextProperty_default_instance_;
      SnippetUI::TextProperty::MergeFrom(v20, v21);
    }
    v22 = (int **)*((_QWORD *)a2 + 8);
    if (v22)
    {
      v23 = (int **)*((_QWORD *)this + 8);
      if (!v23)
      {
        v23 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 8) = v23;
        v22 = (int **)*((_QWORD *)a2 + 8);
      }
      if (v22)
        v24 = v22;
      else
        v24 = (int **)&SnippetUI::_TextProperty_default_instance_;
      SnippetUI::TextProperty::MergeFrom(v23, v24);
    }
    v25 = (int **)*((_QWORD *)a2 + 9);
    if (v25)
    {
      v26 = (int **)*((_QWORD *)this + 9);
      if (!v26)
      {
        v26 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 9) = v26;
        v25 = (int **)*((_QWORD *)a2 + 9);
      }
      if (v25)
        v27 = v25;
      else
        v27 = (int **)&SnippetUI::_TextProperty_default_instance_;
      SnippetUI::TextProperty::MergeFrom(v26, v27);
    }
    v28 = (int **)*((_QWORD *)a2 + 10);
    if (v28)
    {
      v29 = (int **)*((_QWORD *)this + 10);
      if (!v29)
      {
        v29 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::MultilineTextProperty>(0);
        *((_QWORD *)this + 10) = v29;
        v28 = (int **)*((_QWORD *)a2 + 10);
      }
      if (v28)
        v30 = v28;
      else
        v30 = (int **)&SnippetUI::_MultilineTextProperty_default_instance_;
      SnippetUI::MultilineTextProperty::MergeFrom(v29, v30);
    }
    v31 = (int **)*((_QWORD *)a2 + 11);
    if (v31)
    {
      v32 = (int **)*((_QWORD *)this + 11);
      if (!v32)
      {
        v32 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::VisualProperty>(0);
        *((_QWORD *)this + 11) = v32;
        v31 = (int **)*((_QWORD *)a2 + 11);
      }
      if (v31)
        v33 = v31;
      else
        v33 = (int **)&SnippetUI::_VisualProperty_default_instance_;
      SnippetUI::VisualProperty::MergeFrom(v32, v33);
    }
    v34 = (int **)*((_QWORD *)a2 + 12);
    if (v34)
    {
      v35 = (int **)*((_QWORD *)this + 12);
      if (!v35)
      {
        v35 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::VisualProperty>(0);
        *((_QWORD *)this + 12) = v35;
        v34 = (int **)*((_QWORD *)a2 + 12);
      }
      if (v34)
        v36 = v34;
      else
        v36 = (int **)&SnippetUI::_VisualProperty_default_instance_;
      SnippetUI::VisualProperty::MergeFrom(v35, v36);
    }
    v37 = (int **)*((_QWORD *)a2 + 13);
    if (v37)
    {
      v38 = (int **)*((_QWORD *)this + 13);
      if (!v38)
      {
        v38 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
        *((_QWORD *)this + 13) = v38;
        v37 = (int **)*((_QWORD *)a2 + 13);
      }
      if (v37)
        v39 = v37;
      else
        v39 = (int **)&SnippetUI::_ActionProperty_default_instance_;
      SnippetUI::ActionProperty::MergeFrom(v38, v39);
    }
  }
}

void sub_1BF933550(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

SnippetUI::SummaryItem_PairNumberV2 *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::SummaryItem_PairNumberV2>(google::protobuf::internal::ArenaImpl *this)
{
  SnippetUI::SummaryItem_PairNumberV2 *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (SnippetUI::SummaryItem_PairNumberV2 *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x78uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::SummaryItem_PairNumberV2>);
    SnippetUI::SummaryItem_PairNumberV2::SummaryItem_PairNumberV2(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (SnippetUI::SummaryItem_PairNumberV2 *)operator new();
    SnippetUI::SummaryItem_PairNumberV2::SummaryItem_PairNumberV2(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_1BF9335EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D890](v1, 0x10A1C40E3061A4BLL);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::SummaryItem_PairNumberV2>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

void InitDefaultsscc_info_SummaryItem_PairNumber_SummaryItem_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/SummaryItem.pb.cc", a4);
  SnippetUI::SummaryItem_PairNumber::SummaryItem_PairNumber((SnippetUI::SummaryItem_PairNumber *)&SnippetUI::_SummaryItem_PairNumber_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_SummaryItem_PairNumber_default_instance_, v4);
  qword_1ED1D47A8 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1ED1D47B0 = &SnippetUI::_TextProperty_default_instance_;
  qword_1ED1D47B8 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1ED1D47C0 = &SnippetUI::_TextProperty_default_instance_;
  qword_1ED1D47C8 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1ED1D47D0 = &SnippetUI::_TextProperty_default_instance_;
  qword_1ED1D47D8 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1ED1D47E0 = &SnippetUI::_TextProperty_default_instance_;
  qword_1ED1D47E8 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1ED1D47F0 = &SnippetUI::_TextProperty_default_instance_;
  qword_1ED1D47F8 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1ED1D4800 = &SnippetUI::_VisualProperty_default_instance_;
  qword_1ED1D4808 = (uint64_t)&SnippetUI::_VisualProperty_default_instance_;
  unk_1ED1D4810 = &SnippetUI::_ActionProperty_default_instance_;
}

SnippetUI::SummaryItem_PairNumber *SnippetUI::SummaryItem_PairNumber::SummaryItem_PairNumber(SnippetUI::SummaryItem_PairNumber *this)
{
  *(_QWORD *)this = &off_1E792E3B0;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 36) = 0;
  if (atomic_load(scc_info_SummaryItem_PairNumber_SummaryItem_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_SummaryItem_PairNumber_SummaryItem_2eproto);
  *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  return this;
}

void sub_1BF9338A8(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::SummaryItem_PairNumber::~SummaryItem_PairNumber(SnippetUI::SummaryItem_PairNumber *this)
{
  SnippetUI::SummaryItem_PairNumber::~SummaryItem_PairNumber(this);
  JUMPOUT(0x1C3B8D890);
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  *(_QWORD *)this = &off_1E792E3B0;
  v2 = *((_QWORD *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x1C3B8D890](v2, 0x1012C40EC159624);
  }
  v4 = *((_QWORD *)this + 3);
  if ((uint64_t *)v4 != &google::protobuf::internal::fixed_address_empty_string && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0)
      operator delete(*(void **)v4);
    MEMORY[0x1C3B8D890](v4, 0x1012C40EC159624);
  }
  if (this != (SnippetUI::SummaryItem_PairNumber *)&SnippetUI::_SummaryItem_PairNumber_default_instance_)
  {
    v6 = *((_QWORD *)this + 4);
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    v7 = *((_QWORD *)this + 5);
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    v8 = *((_QWORD *)this + 6);
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    v9 = *((_QWORD *)this + 7);
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    v10 = *((_QWORD *)this + 8);
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    v11 = *((_QWORD *)this + 9);
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = *((_QWORD *)this + 10);
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    v13 = *((_QWORD *)this + 11);
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    v14 = *((_QWORD *)this + 12);
    if (v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    v15 = *((_QWORD *)this + 13);
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    v16 = *((_QWORD *)this + 14);
    if (v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    v17 = *((_QWORD *)this + 15);
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
    v18 = *((_QWORD *)this + 16);
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
    v19 = *((_QWORD *)this + 17);
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

SnippetUI::SummaryItem_PairNumber *SnippetUI::SummaryItem_PairNumber::New(SnippetUI::SummaryItem_PairNumber *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::SummaryItem_PairNumber>(0);
}

SnippetUI::SummaryItem_PairNumber *SnippetUI::SummaryItem_PairNumber::New(SnippetUI::SummaryItem_PairNumber *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::SummaryItem_PairNumber>(a2);
}

void SnippetUI::SummaryItem_PairNumber::Clear(SnippetUI::SummaryItem_PairNumber *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  google::protobuf::internal::InternalMetadataWithArena *v18;
  char v19;

  v2 = *((_QWORD *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(_BYTE **)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v2 = 0;
      *(_BYTE *)(v2 + 23) = 0;
    }
  }
  v3 = *((_QWORD *)this + 3);
  if ((uint64_t *)v3 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v3 + 23) < 0)
    {
      **(_BYTE **)v3 = 0;
      *(_QWORD *)(v3 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v3 = 0;
      *(_BYTE *)(v3 + 23) = 0;
    }
  }
  v4 = *((_QWORD *)this + 4);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  *((_QWORD *)this + 4) = 0;
  v5 = *((_QWORD *)this + 5);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *((_QWORD *)this + 5) = 0;
  v6 = *((_QWORD *)this + 6);
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  *((_QWORD *)this + 6) = 0;
  v7 = *((_QWORD *)this + 7);
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  *((_QWORD *)this + 7) = 0;
  v8 = *((_QWORD *)this + 8);
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  *((_QWORD *)this + 8) = 0;
  v9 = *((_QWORD *)this + 9);
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  *((_QWORD *)this + 9) = 0;
  v10 = *((_QWORD *)this + 10);
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  *((_QWORD *)this + 10) = 0;
  v11 = *((_QWORD *)this + 11);
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  *((_QWORD *)this + 11) = 0;
  v12 = *((_QWORD *)this + 12);
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  *((_QWORD *)this + 12) = 0;
  v13 = *((_QWORD *)this + 13);
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  *((_QWORD *)this + 13) = 0;
  v14 = *((_QWORD *)this + 14);
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  *((_QWORD *)this + 14) = 0;
  v15 = *((_QWORD *)this + 15);
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  *((_QWORD *)this + 15) = 0;
  v16 = *((_QWORD *)this + 16);
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  *((_QWORD *)this + 16) = 0;
  v17 = *((_QWORD *)this + 17);
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v19 = *((_BYTE *)this + 8);
  v18 = (SnippetUI::SummaryItem_PairNumber *)((char *)this + 8);
  *((_QWORD *)v18 + 16) = 0;
  if ((v19 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v18);
}

uint64_t SnippetUI::SummaryItem_PairNumber::IsInitialized(SnippetUI::SummaryItem_PairNumber *this)
{
  return 1;
}

char *SnippetUI::SummaryItem_PairNumber::ByteSizeLong(SnippetUI::SummaryItem_PairNumber *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  const google::protobuf::UnknownFieldSet *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  SnippetUI::TextProperty *v9;
  char *v10;
  SnippetUI::TextProperty *v11;
  char *v12;
  SnippetUI::TextProperty *v13;
  char *v14;
  SnippetUI::TextProperty *v15;
  char *v16;
  SnippetUI::TextProperty *v17;
  char *v18;
  SnippetUI::TextProperty *v19;
  char *v20;
  SnippetUI::TextProperty *v21;
  char *v22;
  SnippetUI::TextProperty *v23;
  char *v24;
  SnippetUI::TextProperty *v25;
  char *v26;
  SnippetUI::TextProperty *v27;
  char *v28;
  SnippetUI::TextProperty *v29;
  char *v30;
  SnippetUI::VisualProperty *v31;
  char *v32;
  SnippetUI::VisualProperty *v33;
  char *v34;
  SnippetUI::ActionProperty *v35;
  char *v36;

  v2 = *((_QWORD *)this + 2);
  v3 = *(unsigned __int8 *)(v2 + 23);
  if (*(char *)(v2 + 23) < 0)
  {
    if (*(_QWORD *)(v2 + 8))
      goto LABEL_3;
LABEL_7:
    v5 = 0;
    goto LABEL_8;
  }
  if (!*(_BYTE *)(v2 + 23))
    goto LABEL_7;
LABEL_3:
  v4 = *(_QWORD *)(v2 + 8);
  if ((v3 & 0x80u) == 0)
    v4 = v3;
  v5 = (const google::protobuf::UnknownFieldSet *)(v4 + ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_8:
  v6 = *((_QWORD *)this + 3);
  v7 = *(unsigned __int8 *)(v6 + 23);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(_QWORD *)(v6 + 8))
      goto LABEL_13;
  }
  else if (!*(_BYTE *)(v6 + 23))
  {
    goto LABEL_13;
  }
  v8 = *(_QWORD *)(v6 + 8);
  if ((v7 & 0x80u) == 0)
    v8 = v7;
  v5 = (const google::protobuf::UnknownFieldSet *)((char *)v5 + v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 2);
LABEL_13:
  if (this != (SnippetUI::SummaryItem_PairNumber *)&SnippetUI::_SummaryItem_PairNumber_default_instance_)
  {
    v9 = (SnippetUI::TextProperty *)*((_QWORD *)this + 4);
    if (v9)
    {
      v10 = SnippetUI::TextProperty::ByteSizeLong(v9);
      v5 = (const google::protobuf::UnknownFieldSet *)&v10[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v11 = (SnippetUI::TextProperty *)*((_QWORD *)this + 5);
    if (v11)
    {
      v12 = SnippetUI::TextProperty::ByteSizeLong(v11);
      v5 = (const google::protobuf::UnknownFieldSet *)&v12[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v12 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v13 = (SnippetUI::TextProperty *)*((_QWORD *)this + 6);
    if (v13)
    {
      v14 = SnippetUI::TextProperty::ByteSizeLong(v13);
      v5 = (const google::protobuf::UnknownFieldSet *)&v14[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v14 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v15 = (SnippetUI::TextProperty *)*((_QWORD *)this + 7);
    if (v15)
    {
      v16 = SnippetUI::TextProperty::ByteSizeLong(v15);
      v5 = (const google::protobuf::UnknownFieldSet *)&v16[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v16 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v17 = (SnippetUI::TextProperty *)*((_QWORD *)this + 8);
    if (v17)
    {
      v18 = SnippetUI::TextProperty::ByteSizeLong(v17);
      v5 = (const google::protobuf::UnknownFieldSet *)&v18[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v18 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v19 = (SnippetUI::TextProperty *)*((_QWORD *)this + 9);
    if (v19)
    {
      v20 = SnippetUI::TextProperty::ByteSizeLong(v19);
      v5 = (const google::protobuf::UnknownFieldSet *)&v20[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v20 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v21 = (SnippetUI::TextProperty *)*((_QWORD *)this + 10);
    if (v21)
    {
      v22 = SnippetUI::TextProperty::ByteSizeLong(v21);
      v5 = (const google::protobuf::UnknownFieldSet *)&v22[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v22 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v23 = (SnippetUI::TextProperty *)*((_QWORD *)this + 11);
    if (v23)
    {
      v24 = SnippetUI::TextProperty::ByteSizeLong(v23);
      v5 = (const google::protobuf::UnknownFieldSet *)&v24[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v24 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v25 = (SnippetUI::TextProperty *)*((_QWORD *)this + 12);
    if (v25)
    {
      v26 = SnippetUI::TextProperty::ByteSizeLong(v25);
      v5 = (const google::protobuf::UnknownFieldSet *)&v26[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v26 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v27 = (SnippetUI::TextProperty *)*((_QWORD *)this + 13);
    if (v27)
    {
      v28 = SnippetUI::TextProperty::ByteSizeLong(v27);
      v5 = (const google::protobuf::UnknownFieldSet *)&v28[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v28 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v29 = (SnippetUI::TextProperty *)*((_QWORD *)this + 14);
    if (v29)
    {
      v30 = SnippetUI::TextProperty::ByteSizeLong(v29);
      v5 = (const google::protobuf::UnknownFieldSet *)&v30[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v30 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v31 = (SnippetUI::VisualProperty *)*((_QWORD *)this + 15);
    if (v31)
    {
      v32 = SnippetUI::VisualProperty::ByteSizeLong(v31);
      v5 = (const google::protobuf::UnknownFieldSet *)&v32[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v32 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v33 = (SnippetUI::VisualProperty *)*((_QWORD *)this + 16);
    if (v33)
    {
      v34 = SnippetUI::VisualProperty::ByteSizeLong(v33);
      v5 = (const google::protobuf::UnknownFieldSet *)&v34[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v34 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v35 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 17);
    if (v35)
    {
      v36 = SnippetUI::ActionProperty::ByteSizeLong(v35);
      v5 = (const google::protobuf::UnknownFieldSet *)&v36[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v36 | 1) ^ 0x1F) + 73) >> 6)];
    }
  }
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::SummaryItem_PairNumber *)((char *)this + 8), v5, (_DWORD *)this + 36);
  *((_DWORD *)this + 36) = (_DWORD)v5;
  return (char *)v5;
}

uint64_t SnippetUI::SummaryItem_PairNumber::GetCachedSize(SnippetUI::SummaryItem_PairNumber *this)
{
  return *((unsigned int *)this + 36);
}

google::protobuf::internal *SnippetUI::SummaryItem_PairNumber::_InternalParse(SnippetUI::SummaryItem_PairNumber *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  std::string **v5;
  std::string **v6;
  uint64_t *v7;
  google::protobuf::internal::ParseContext *v8;
  google::protobuf::internal *TagFallback;
  char *v10;
  SnippetUI::TextProperty *v11;
  char *v12;
  SnippetUI::VisualProperty *v13;
  SnippetUI::ActionProperty *v14;
  std::string *v15;
  std::string::value_type *v16;
  google::protobuf::internal::ParseContext *v17;
  char *v18;
  BOOL v19;
  google::protobuf::internal *v21;

  v21 = a2;
  v5 = (std::string **)((char *)this + 24);
  v6 = (std::string **)((char *)this + 16);
  v7 = (uint64_t *)((char *)this + 8);
  while (2)
  {
    if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v21, *((_DWORD *)a3 + 23)) & 1) != 0)
      return v21;
    TagFallback = (google::protobuf::internal *)((char *)v21 + 1);
    v10 = (char *)*(unsigned __int8 *)v21;
    if ((*(char *)v21 & 0x80000000) == 0)
      goto LABEL_6;
    v10 = (char *)(v10 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v21 + 2);
LABEL_6:
      v21 = TagFallback;
      goto LABEL_7;
    }
    TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v21, v10);
    v21 = TagFallback;
    if (!TagFallback)
      return TagFallback;
LABEL_7:
    switch(v10 >> 3)
    {
      case 1u:
        if (v10 != 10)
          goto LABEL_68;
        v11 = (SnippetUI::TextProperty *)*((_QWORD *)this + 4);
        if (v11)
          goto LABEL_44;
        v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 4) = v11;
        goto LABEL_43;
      case 2u:
        if (v10 != 18)
          goto LABEL_68;
        v11 = (SnippetUI::TextProperty *)*((_QWORD *)this + 5);
        if (v11)
          goto LABEL_44;
        v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 5) = v11;
        goto LABEL_43;
      case 3u:
        if (v10 != 26)
          goto LABEL_68;
        v11 = (SnippetUI::TextProperty *)*((_QWORD *)this + 6);
        if (v11)
          goto LABEL_44;
        v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 6) = v11;
        goto LABEL_43;
      case 4u:
        if (v10 != 34)
          goto LABEL_68;
        v11 = (SnippetUI::TextProperty *)*((_QWORD *)this + 7);
        if (v11)
          goto LABEL_44;
        v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 7) = v11;
        goto LABEL_43;
      case 5u:
        if (v10 != 42)
          goto LABEL_68;
        v11 = (SnippetUI::TextProperty *)*((_QWORD *)this + 8);
        if (v11)
          goto LABEL_44;
        v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 8) = v11;
        goto LABEL_43;
      case 6u:
        if (v10 != 50)
          goto LABEL_68;
        v11 = (SnippetUI::TextProperty *)*((_QWORD *)this + 9);
        if (v11)
          goto LABEL_44;
        v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 9) = v11;
        goto LABEL_43;
      case 7u:
        if (v10 != 58)
          goto LABEL_68;
        v11 = (SnippetUI::TextProperty *)*((_QWORD *)this + 10);
        if (v11)
          goto LABEL_44;
        v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 10) = v11;
        goto LABEL_43;
      case 8u:
        if (v10 != 66)
          goto LABEL_68;
        v11 = (SnippetUI::TextProperty *)*((_QWORD *)this + 11);
        if (v11)
          goto LABEL_44;
        v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 11) = v11;
        goto LABEL_43;
      case 9u:
        if (v10 != 74)
          goto LABEL_68;
        v11 = (SnippetUI::TextProperty *)*((_QWORD *)this + 12);
        if (v11)
          goto LABEL_44;
        v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 12) = v11;
        goto LABEL_43;
      case 0xAu:
        if (v10 != 82)
          goto LABEL_68;
        v11 = (SnippetUI::TextProperty *)*((_QWORD *)this + 13);
        if (v11)
          goto LABEL_44;
        v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 13) = v11;
        goto LABEL_43;
      case 0xBu:
        if (v10 != 90)
          goto LABEL_68;
        v11 = (SnippetUI::TextProperty *)*((_QWORD *)this + 14);
        if (v11)
          goto LABEL_44;
        v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 14) = v11;
LABEL_43:
        TagFallback = v21;
LABEL_44:
        v12 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::TextProperty>(a3, v11, TagFallback);
        goto LABEL_45;
      case 0xCu:
        if (v10 != 98)
          goto LABEL_68;
        v13 = (SnippetUI::VisualProperty *)*((_QWORD *)this + 15);
        if (v13)
          goto LABEL_54;
        v13 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::VisualProperty>(0);
        *((_QWORD *)this + 15) = v13;
        goto LABEL_53;
      case 0xDu:
        if (v10 != 106)
          goto LABEL_68;
        v13 = (SnippetUI::VisualProperty *)*((_QWORD *)this + 16);
        if (v13)
          goto LABEL_54;
        v13 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::VisualProperty>(0);
        *((_QWORD *)this + 16) = v13;
LABEL_53:
        TagFallback = v21;
LABEL_54:
        v12 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::VisualProperty>(a3, v13, TagFallback);
        goto LABEL_45;
      case 0xEu:
        if (v10 != 114)
          goto LABEL_68;
        v14 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 17);
        if (!v14)
        {
          v14 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
          *((_QWORD *)this + 17) = v14;
          TagFallback = v21;
        }
        v12 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::ActionProperty>(a3, v14, TagFallback);
        goto LABEL_45;
      case 0xFu:
        if (v10 != 122)
          goto LABEL_68;
        v15 = *v6;
        if (*v6 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v6, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v15 = *v6;
          TagFallback = v21;
        }
        v16 = (std::string::value_type *)TagFallback;
        v17 = a3;
        v18 = "SnippetUI.SummaryItem_PairNumber.component_name";
        goto LABEL_67;
      case 0x10u:
        if (v10 != 130)
          goto LABEL_68;
        v15 = *v5;
        if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v15 = *v5;
          TagFallback = v21;
        }
        v16 = (std::string::value_type *)TagFallback;
        v17 = a3;
        v18 = "SnippetUI.SummaryItem_PairNumber.link_identifier";
LABEL_67:
        v12 = google::protobuf::internal::InlineGreedyStringParserUTF8(v15, v16, (uint64_t)v17, (google::protobuf::internal *)v18);
        goto LABEL_45;
      default:
LABEL_68:
        if ((_DWORD)v10)
          v19 = (v10 & 7) == 4;
        else
          v19 = 1;
        if (v19)
        {
          *((_DWORD *)a3 + 20) = (_DWORD)v10 - 1;
          return TagFallback;
        }
        v12 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v10, v7, TagFallback, a3, v8);
LABEL_45:
        v21 = (google::protobuf::internal *)v12;
        if (v12)
          continue;
        TagFallback = 0;
        break;
    }
    return TagFallback;
  }
}

const google::protobuf::UnknownFieldSet *SnippetUI::SummaryItem_PairNumber::InternalSerializeWithCachedSizesToArray(SnippetUI::SummaryItem_PairNumber *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  char *v5;
  SnippetUI::TextProperty *v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  google::protobuf::UnknownFieldSet *v11;
  _BYTE *v12;
  _BYTE *v13;
  unsigned int v14;
  unsigned int v15;
  SnippetUI::TextProperty *v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  google::protobuf::UnknownFieldSet *v20;
  _BYTE *v21;
  _BYTE *v22;
  unsigned int v23;
  unsigned int v24;
  SnippetUI::TextProperty *v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  google::protobuf::UnknownFieldSet *v29;
  _BYTE *v30;
  _BYTE *v31;
  unsigned int v32;
  unsigned int v33;
  SnippetUI::TextProperty *v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int v37;
  google::protobuf::UnknownFieldSet *v38;
  _BYTE *v39;
  _BYTE *v40;
  unsigned int v41;
  unsigned int v42;
  SnippetUI::TextProperty *v43;
  unsigned int v44;
  uint64_t v45;
  unsigned int v46;
  google::protobuf::UnknownFieldSet *v47;
  _BYTE *v48;
  _BYTE *v49;
  unsigned int v50;
  unsigned int v51;
  SnippetUI::TextProperty *v52;
  unsigned int v53;
  uint64_t v54;
  unsigned int v55;
  google::protobuf::UnknownFieldSet *v56;
  _BYTE *v57;
  _BYTE *v58;
  unsigned int v59;
  unsigned int v60;
  SnippetUI::TextProperty *v61;
  unsigned int v62;
  uint64_t v63;
  unsigned int v64;
  google::protobuf::UnknownFieldSet *v65;
  _BYTE *v66;
  _BYTE *v67;
  unsigned int v68;
  unsigned int v69;
  SnippetUI::TextProperty *v70;
  unsigned int v71;
  uint64_t v72;
  unsigned int v73;
  google::protobuf::UnknownFieldSet *v74;
  _BYTE *v75;
  _BYTE *v76;
  unsigned int v77;
  unsigned int v78;
  SnippetUI::TextProperty *v79;
  unsigned int v80;
  uint64_t v81;
  unsigned int v82;
  google::protobuf::UnknownFieldSet *v83;
  _BYTE *v84;
  _BYTE *v85;
  unsigned int v86;
  unsigned int v87;
  SnippetUI::TextProperty *v88;
  unsigned int v89;
  uint64_t v90;
  unsigned int v91;
  google::protobuf::UnknownFieldSet *v92;
  _BYTE *v93;
  _BYTE *v94;
  unsigned int v95;
  unsigned int v96;
  SnippetUI::TextProperty *v97;
  unsigned int v98;
  uint64_t v99;
  unsigned int v100;
  google::protobuf::UnknownFieldSet *v101;
  _BYTE *v102;
  _BYTE *v103;
  unsigned int v104;
  unsigned int v105;
  SnippetUI::VisualProperty *v106;
  unsigned int v107;
  uint64_t v108;
  unsigned int v109;
  google::protobuf::UnknownFieldSet *v110;
  _BYTE *v111;
  _BYTE *v112;
  unsigned int v113;
  unsigned int v114;
  SnippetUI::VisualProperty *v115;
  unsigned int v116;
  uint64_t v117;
  unsigned int v118;
  google::protobuf::UnknownFieldSet *v119;
  _BYTE *v120;
  _BYTE *v121;
  unsigned int v122;
  unsigned int v123;
  SnippetUI::ActionProperty *v124;
  unsigned int v125;
  google::protobuf::UnknownFieldSet *v126;
  unsigned int v127;
  _BYTE *v128;
  _BYTE *v129;
  unsigned int v130;
  unsigned int v131;
  google::protobuf::internal *v132;
  const char *v133;
  google::protobuf::internal *v134;
  const char *v135;
  uint64_t v136;

  v5 = (char *)a2;
  if (this == (SnippetUI::SummaryItem_PairNumber *)&SnippetUI::_SummaryItem_PairNumber_default_instance_)
    goto LABEL_169;
  v7 = (SnippetUI::TextProperty *)*((_QWORD *)this + 4);
  if (v7)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
    {
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      v7 = (SnippetUI::TextProperty *)*((_QWORD *)this + 4);
    }
    *v5 = 10;
    v8 = *((_DWORD *)v7 + 15);
    if (v8 > 0x7F)
    {
      v5[1] = v8 | 0x80;
      v10 = v8 >> 7;
      if (v8 >> 14)
      {
        v12 = v5 + 2;
        do
        {
          v13 = v12;
          *v12++ = v10 | 0x80;
          v14 = v10 >> 7;
          v15 = v10 >> 14;
          v10 >>= 7;
        }
        while (v15);
        v11 = (google::protobuf::UnknownFieldSet *)(v13 + 2);
        *v12 = v14;
        goto LABEL_13;
      }
      v5[2] = v10;
      v9 = 3;
    }
    else
    {
      v5[1] = v8;
      v9 = 2;
    }
    v11 = (google::protobuf::UnknownFieldSet *)&v5[v9];
LABEL_13:
    v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v7, v11, a3, a4);
  }
  v16 = (SnippetUI::TextProperty *)*((_QWORD *)this + 5);
  if (!v16)
    goto LABEL_26;
  if ((unint64_t)v5 >= *(_QWORD *)a3)
  {
    v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v16 = (SnippetUI::TextProperty *)*((_QWORD *)this + 5);
  }
  *v5 = 18;
  v17 = *((_DWORD *)v16 + 15);
  if (v17 > 0x7F)
  {
    v5[1] = v17 | 0x80;
    v19 = v17 >> 7;
    if (v17 >> 14)
    {
      v21 = v5 + 2;
      do
      {
        v22 = v21;
        *v21++ = v19 | 0x80;
        v23 = v19 >> 7;
        v24 = v19 >> 14;
        v19 >>= 7;
      }
      while (v24);
      v20 = (google::protobuf::UnknownFieldSet *)(v22 + 2);
      *v21 = v23;
      goto LABEL_25;
    }
    v5[2] = v19;
    v18 = 3;
  }
  else
  {
    v5[1] = v17;
    v18 = 2;
  }
  v20 = (google::protobuf::UnknownFieldSet *)&v5[v18];
LABEL_25:
  v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v16, v20, a3, a4);
LABEL_26:
  v25 = (SnippetUI::TextProperty *)*((_QWORD *)this + 6);
  if (!v25)
    goto LABEL_38;
  if ((unint64_t)v5 >= *(_QWORD *)a3)
  {
    v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v25 = (SnippetUI::TextProperty *)*((_QWORD *)this + 6);
  }
  *v5 = 26;
  v26 = *((_DWORD *)v25 + 15);
  if (v26 > 0x7F)
  {
    v5[1] = v26 | 0x80;
    v28 = v26 >> 7;
    if (v26 >> 14)
    {
      v30 = v5 + 2;
      do
      {
        v31 = v30;
        *v30++ = v28 | 0x80;
        v32 = v28 >> 7;
        v33 = v28 >> 14;
        v28 >>= 7;
      }
      while (v33);
      v29 = (google::protobuf::UnknownFieldSet *)(v31 + 2);
      *v30 = v32;
      goto LABEL_37;
    }
    v5[2] = v28;
    v27 = 3;
  }
  else
  {
    v5[1] = v26;
    v27 = 2;
  }
  v29 = (google::protobuf::UnknownFieldSet *)&v5[v27];
LABEL_37:
  v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v25, v29, a3, a4);
LABEL_38:
  v34 = (SnippetUI::TextProperty *)*((_QWORD *)this + 7);
  if (!v34)
    goto LABEL_50;
  if ((unint64_t)v5 >= *(_QWORD *)a3)
  {
    v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v34 = (SnippetUI::TextProperty *)*((_QWORD *)this + 7);
  }
  *v5 = 34;
  v35 = *((_DWORD *)v34 + 15);
  if (v35 > 0x7F)
  {
    v5[1] = v35 | 0x80;
    v37 = v35 >> 7;
    if (v35 >> 14)
    {
      v39 = v5 + 2;
      do
      {
        v40 = v39;
        *v39++ = v37 | 0x80;
        v41 = v37 >> 7;
        v42 = v37 >> 14;
        v37 >>= 7;
      }
      while (v42);
      v38 = (google::protobuf::UnknownFieldSet *)(v40 + 2);
      *v39 = v41;
      goto LABEL_49;
    }
    v5[2] = v37;
    v36 = 3;
  }
  else
  {
    v5[1] = v35;
    v36 = 2;
  }
  v38 = (google::protobuf::UnknownFieldSet *)&v5[v36];
LABEL_49:
  v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v34, v38, a3, a4);
LABEL_50:
  v43 = (SnippetUI::TextProperty *)*((_QWORD *)this + 8);
  if (!v43)
    goto LABEL_62;
  if ((unint64_t)v5 >= *(_QWORD *)a3)
  {
    v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v43 = (SnippetUI::TextProperty *)*((_QWORD *)this + 8);
  }
  *v5 = 42;
  v44 = *((_DWORD *)v43 + 15);
  if (v44 > 0x7F)
  {
    v5[1] = v44 | 0x80;
    v46 = v44 >> 7;
    if (v44 >> 14)
    {
      v48 = v5 + 2;
      do
      {
        v49 = v48;
        *v48++ = v46 | 0x80;
        v50 = v46 >> 7;
        v51 = v46 >> 14;
        v46 >>= 7;
      }
      while (v51);
      v47 = (google::protobuf::UnknownFieldSet *)(v49 + 2);
      *v48 = v50;
      goto LABEL_61;
    }
    v5[2] = v46;
    v45 = 3;
  }
  else
  {
    v5[1] = v44;
    v45 = 2;
  }
  v47 = (google::protobuf::UnknownFieldSet *)&v5[v45];
LABEL_61:
  v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v43, v47, a3, a4);
LABEL_62:
  v52 = (SnippetUI::TextProperty *)*((_QWORD *)this + 9);
  if (!v52)
    goto LABEL_74;
  if ((unint64_t)v5 >= *(_QWORD *)a3)
  {
    v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v52 = (SnippetUI::TextProperty *)*((_QWORD *)this + 9);
  }
  *v5 = 50;
  v53 = *((_DWORD *)v52 + 15);
  if (v53 > 0x7F)
  {
    v5[1] = v53 | 0x80;
    v55 = v53 >> 7;
    if (v53 >> 14)
    {
      v57 = v5 + 2;
      do
      {
        v58 = v57;
        *v57++ = v55 | 0x80;
        v59 = v55 >> 7;
        v60 = v55 >> 14;
        v55 >>= 7;
      }
      while (v60);
      v56 = (google::protobuf::UnknownFieldSet *)(v58 + 2);
      *v57 = v59;
      goto LABEL_73;
    }
    v5[2] = v55;
    v54 = 3;
  }
  else
  {
    v5[1] = v53;
    v54 = 2;
  }
  v56 = (google::protobuf::UnknownFieldSet *)&v5[v54];
LABEL_73:
  v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v52, v56, a3, a4);
LABEL_74:
  v61 = (SnippetUI::TextProperty *)*((_QWORD *)this + 10);
  if (!v61)
    goto LABEL_86;
  if ((unint64_t)v5 >= *(_QWORD *)a3)
  {
    v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v61 = (SnippetUI::TextProperty *)*((_QWORD *)this + 10);
  }
  *v5 = 58;
  v62 = *((_DWORD *)v61 + 15);
  if (v62 > 0x7F)
  {
    v5[1] = v62 | 0x80;
    v64 = v62 >> 7;
    if (v62 >> 14)
    {
      v66 = v5 + 2;
      do
      {
        v67 = v66;
        *v66++ = v64 | 0x80;
        v68 = v64 >> 7;
        v69 = v64 >> 14;
        v64 >>= 7;
      }
      while (v69);
      v65 = (google::protobuf::UnknownFieldSet *)(v67 + 2);
      *v66 = v68;
      goto LABEL_85;
    }
    v5[2] = v64;
    v63 = 3;
  }
  else
  {
    v5[1] = v62;
    v63 = 2;
  }
  v65 = (google::protobuf::UnknownFieldSet *)&v5[v63];
LABEL_85:
  v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v61, v65, a3, a4);
LABEL_86:
  v70 = (SnippetUI::TextProperty *)*((_QWORD *)this + 11);
  if (!v70)
    goto LABEL_98;
  if ((unint64_t)v5 >= *(_QWORD *)a3)
  {
    v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v70 = (SnippetUI::TextProperty *)*((_QWORD *)this + 11);
  }
  *v5 = 66;
  v71 = *((_DWORD *)v70 + 15);
  if (v71 > 0x7F)
  {
    v5[1] = v71 | 0x80;
    v73 = v71 >> 7;
    if (v71 >> 14)
    {
      v75 = v5 + 2;
      do
      {
        v76 = v75;
        *v75++ = v73 | 0x80;
        v77 = v73 >> 7;
        v78 = v73 >> 14;
        v73 >>= 7;
      }
      while (v78);
      v74 = (google::protobuf::UnknownFieldSet *)(v76 + 2);
      *v75 = v77;
      goto LABEL_97;
    }
    v5[2] = v73;
    v72 = 3;
  }
  else
  {
    v5[1] = v71;
    v72 = 2;
  }
  v74 = (google::protobuf::UnknownFieldSet *)&v5[v72];
LABEL_97:
  v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v70, v74, a3, a4);
LABEL_98:
  v79 = (SnippetUI::TextProperty *)*((_QWORD *)this + 12);
  if (!v79)
    goto LABEL_110;
  if ((unint64_t)v5 >= *(_QWORD *)a3)
  {
    v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v79 = (SnippetUI::TextProperty *)*((_QWORD *)this + 12);
  }
  *v5 = 74;
  v80 = *((_DWORD *)v79 + 15);
  if (v80 > 0x7F)
  {
    v5[1] = v80 | 0x80;
    v82 = v80 >> 7;
    if (v80 >> 14)
    {
      v84 = v5 + 2;
      do
      {
        v85 = v84;
        *v84++ = v82 | 0x80;
        v86 = v82 >> 7;
        v87 = v82 >> 14;
        v82 >>= 7;
      }
      while (v87);
      v83 = (google::protobuf::UnknownFieldSet *)(v85 + 2);
      *v84 = v86;
      goto LABEL_109;
    }
    v5[2] = v82;
    v81 = 3;
  }
  else
  {
    v5[1] = v80;
    v81 = 2;
  }
  v83 = (google::protobuf::UnknownFieldSet *)&v5[v81];
LABEL_109:
  v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v79, v83, a3, a4);
LABEL_110:
  v88 = (SnippetUI::TextProperty *)*((_QWORD *)this + 13);
  if (!v88)
    goto LABEL_122;
  if ((unint64_t)v5 >= *(_QWORD *)a3)
  {
    v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v88 = (SnippetUI::TextProperty *)*((_QWORD *)this + 13);
  }
  *v5 = 82;
  v89 = *((_DWORD *)v88 + 15);
  if (v89 > 0x7F)
  {
    v5[1] = v89 | 0x80;
    v91 = v89 >> 7;
    if (v89 >> 14)
    {
      v93 = v5 + 2;
      do
      {
        v94 = v93;
        *v93++ = v91 | 0x80;
        v95 = v91 >> 7;
        v96 = v91 >> 14;
        v91 >>= 7;
      }
      while (v96);
      v92 = (google::protobuf::UnknownFieldSet *)(v94 + 2);
      *v93 = v95;
      goto LABEL_121;
    }
    v5[2] = v91;
    v90 = 3;
  }
  else
  {
    v5[1] = v89;
    v90 = 2;
  }
  v92 = (google::protobuf::UnknownFieldSet *)&v5[v90];
LABEL_121:
  v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v88, v92, a3, a4);
LABEL_122:
  v97 = (SnippetUI::TextProperty *)*((_QWORD *)this + 14);
  if (!v97)
    goto LABEL_134;
  if ((unint64_t)v5 >= *(_QWORD *)a3)
  {
    v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v97 = (SnippetUI::TextProperty *)*((_QWORD *)this + 14);
  }
  *v5 = 90;
  v98 = *((_DWORD *)v97 + 15);
  if (v98 > 0x7F)
  {
    v5[1] = v98 | 0x80;
    v100 = v98 >> 7;
    if (v98 >> 14)
    {
      v102 = v5 + 2;
      do
      {
        v103 = v102;
        *v102++ = v100 | 0x80;
        v104 = v100 >> 7;
        v105 = v100 >> 14;
        v100 >>= 7;
      }
      while (v105);
      v101 = (google::protobuf::UnknownFieldSet *)(v103 + 2);
      *v102 = v104;
      goto LABEL_133;
    }
    v5[2] = v100;
    v99 = 3;
  }
  else
  {
    v5[1] = v98;
    v99 = 2;
  }
  v101 = (google::protobuf::UnknownFieldSet *)&v5[v99];
LABEL_133:
  v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v97, v101, a3, a4);
LABEL_134:
  v106 = (SnippetUI::VisualProperty *)*((_QWORD *)this + 15);
  if (!v106)
    goto LABEL_146;
  if ((unint64_t)v5 >= *(_QWORD *)a3)
  {
    v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v106 = (SnippetUI::VisualProperty *)*((_QWORD *)this + 15);
  }
  *v5 = 98;
  v107 = *((_DWORD *)v106 + 15);
  if (v107 > 0x7F)
  {
    v5[1] = v107 | 0x80;
    v109 = v107 >> 7;
    if (v107 >> 14)
    {
      v111 = v5 + 2;
      do
      {
        v112 = v111;
        *v111++ = v109 | 0x80;
        v113 = v109 >> 7;
        v114 = v109 >> 14;
        v109 >>= 7;
      }
      while (v114);
      v110 = (google::protobuf::UnknownFieldSet *)(v112 + 2);
      *v111 = v113;
      goto LABEL_145;
    }
    v5[2] = v109;
    v108 = 3;
  }
  else
  {
    v5[1] = v107;
    v108 = 2;
  }
  v110 = (google::protobuf::UnknownFieldSet *)&v5[v108];
LABEL_145:
  v5 = (char *)SnippetUI::VisualProperty::InternalSerializeWithCachedSizesToArray(v106, v110, a3, a4);
LABEL_146:
  v115 = (SnippetUI::VisualProperty *)*((_QWORD *)this + 16);
  if (!v115)
    goto LABEL_158;
  if ((unint64_t)v5 >= *(_QWORD *)a3)
  {
    v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v115 = (SnippetUI::VisualProperty *)*((_QWORD *)this + 16);
  }
  *v5 = 106;
  v116 = *((_DWORD *)v115 + 15);
  if (v116 > 0x7F)
  {
    v5[1] = v116 | 0x80;
    v118 = v116 >> 7;
    if (v116 >> 14)
    {
      v120 = v5 + 2;
      do
      {
        v121 = v120;
        *v120++ = v118 | 0x80;
        v122 = v118 >> 7;
        v123 = v118 >> 14;
        v118 >>= 7;
      }
      while (v123);
      v119 = (google::protobuf::UnknownFieldSet *)(v121 + 2);
      *v120 = v122;
      goto LABEL_157;
    }
    v5[2] = v118;
    v117 = 3;
  }
  else
  {
    v5[1] = v116;
    v117 = 2;
  }
  v119 = (google::protobuf::UnknownFieldSet *)&v5[v117];
LABEL_157:
  v5 = (char *)SnippetUI::VisualProperty::InternalSerializeWithCachedSizesToArray(v115, v119, a3, a4);
LABEL_158:
  v124 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 17);
  if (v124)
  {
    if ((unint64_t)v5 >= *(_QWORD *)a3)
    {
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
      v124 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 17);
    }
    *v5 = 114;
    v125 = *((_DWORD *)v124 + 12);
    if (v125 > 0x7F)
    {
      v5[1] = v125 | 0x80;
      v127 = v125 >> 7;
      if (v125 >> 14)
      {
        v128 = v5 + 2;
        do
        {
          v129 = v128;
          *v128++ = v127 | 0x80;
          v130 = v127 >> 7;
          v131 = v127 >> 14;
          v127 >>= 7;
        }
        while (v131);
        v126 = (google::protobuf::UnknownFieldSet *)(v129 + 2);
        *v128 = v130;
      }
      else
      {
        v5[2] = v127;
        v126 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
      }
    }
    else
    {
      v5[1] = v125;
      v126 = (google::protobuf::UnknownFieldSet *)(v5 + 2);
    }
    v5 = (char *)SnippetUI::ActionProperty::InternalSerializeWithCachedSizesToArray(v124, v126, a3, a4);
  }
LABEL_169:
  v132 = (google::protobuf::internal *)*((_QWORD *)this + 2);
  if (*((char *)v132 + 23) < 0)
  {
    v133 = (const char *)*((_QWORD *)v132 + 1);
    if (!v133)
      goto LABEL_175;
    v132 = *(google::protobuf::internal **)v132;
    goto LABEL_174;
  }
  v133 = (const char *)*((unsigned __int8 *)v132 + 23);
  if (*((_BYTE *)v132 + 23))
  {
LABEL_174:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v132, v133, 1, (google::protobuf::internal *)"SnippetUI.SummaryItem_PairNumber.component_name");
    v5 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 15, *((_QWORD *)this + 2), v5);
  }
LABEL_175:
  v134 = (google::protobuf::internal *)*((_QWORD *)this + 3);
  if (*((char *)v134 + 23) < 0)
  {
    v135 = (const char *)*((_QWORD *)v134 + 1);
    if (!v135)
      goto LABEL_181;
    v134 = *(google::protobuf::internal **)v134;
    goto LABEL_180;
  }
  v135 = (const char *)*((unsigned __int8 *)v134 + 23);
  if (*((_BYTE *)v134 + 23))
  {
LABEL_180:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v134, v135, 1, (google::protobuf::internal *)"SnippetUI.SummaryItem_PairNumber.link_identifier");
    v5 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 16, *((_QWORD *)this + 3), v5);
  }
LABEL_181:
  v136 = *((_QWORD *)this + 1);
  if ((v136 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v136 & 0xFFFFFFFFFFFFFFFELL), (const google::protobuf::UnknownFieldSet *)v5, a3, a4);
  else
    return (const google::protobuf::UnknownFieldSet *)v5;
}

void SnippetUI::SummaryItem_PairNumber::CopyFrom(SnippetUI::SummaryItem_PairNumber *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    SnippetUI::SummaryItem_PairNumber::Clear(this);
    SnippetUI::SummaryItem_PairNumber::MergeFrom(this, a2);
  }
}

void SnippetUI::SummaryItem_PairNumber::MergeFrom(SnippetUI::SummaryItem_PairNumber *this, const google::protobuf::Message *lpsrc)
{
  std::string *v4;
  const SnippetUI::SummaryItem_PairNumber *v5;
  google::protobuf::Message *v6;
  char v7;
  std::string v8[2];

  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/SummaryItem.pb.cc", 5739);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5)
    SnippetUI::SummaryItem_PairNumber::MergeFrom(this, v5);
  else
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
}

void sub_1BF934D68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::SummaryItem_PairNumber::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 144) = a2;
  return this;
}

uint64_t SnippetUI::SummaryItem_PairNumber::GetMetadata(SnippetUI::SummaryItem_PairNumber *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_SummaryItem_2eproto);
  return qword_1EF5819E0;
}

void *SnippetUI::SummaryItem_PairNumber::default_instance(SnippetUI::SummaryItem_PairNumber *this)
{
  if (atomic_load(scc_info_SummaryItem_PairNumber_SummaryItem_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_SummaryItem_PairNumber_SummaryItem_2eproto);
  return &SnippetUI::_SummaryItem_PairNumber_default_instance_;
}

void SnippetUI::SummaryItem_PairNumber::MergeFrom(SnippetUI::SummaryItem_PairNumber *this, const SnippetUI::SummaryItem_PairNumber *a2)
{
  std::string *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  int **v10;
  int **v11;
  int **v12;
  int **v13;
  int **v14;
  int **v15;
  int **v16;
  int **v17;
  int **v18;
  int **v19;
  int **v20;
  int **v21;
  int **v22;
  int **v23;
  int **v24;
  int **v25;
  int **v26;
  int **v27;
  int **v28;
  int **v29;
  int **v30;
  int **v31;
  int **v32;
  int **v33;
  int **v34;
  int **v35;
  int **v36;
  int **v37;
  int **v38;
  int **v39;
  int **v40;
  int **v41;
  int **v42;
  int **v43;
  int **v44;
  int **v45;
  int **v46;
  int **v47;
  int **v48;
  int **v49;
  int **v50;
  int **v51;
  char v52;
  std::string v53[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v53, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/SummaryItem.pb.cc", 5754);
    v4 = google::protobuf::internal::LogMessage::operator<<(v53, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v52, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v53[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::SummaryItem_PairNumber *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  v6 = *((_QWORD *)a2 + 2);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(_QWORD *)(v6 + 8))
      goto LABEL_13;
  }
  else if (!*(_BYTE *)(v6 + 23))
  {
    goto LABEL_13;
  }
  v7 = (uint64_t *)*((_QWORD *)this + 2);
  if (v7 != (uint64_t *)v6)
  {
    if (v7 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, v6);
    else
      std::string::operator=(*((std::string **)this + 2), (const std::string *)v6);
  }
LABEL_13:
  v8 = *((_QWORD *)a2 + 3);
  if (*(char *)(v8 + 23) < 0)
  {
    if (!*(_QWORD *)(v8 + 8))
      goto LABEL_21;
  }
  else if (!*(_BYTE *)(v8 + 23))
  {
    goto LABEL_21;
  }
  v9 = (uint64_t *)*((_QWORD *)this + 3);
  if (v9 != (uint64_t *)v8)
  {
    if (v9 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 3, v8);
    else
      std::string::operator=(*((std::string **)this + 3), (const std::string *)v8);
  }
LABEL_21:
  if (a2 != (const SnippetUI::SummaryItem_PairNumber *)&SnippetUI::_SummaryItem_PairNumber_default_instance_)
  {
    v10 = (int **)*((_QWORD *)a2 + 4);
    if (v10)
    {
      v11 = (int **)*((_QWORD *)this + 4);
      if (!v11)
      {
        v11 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 4) = v11;
        v10 = (int **)*((_QWORD *)a2 + 4);
      }
      if (v10)
        v12 = v10;
      else
        v12 = (int **)&SnippetUI::_TextProperty_default_instance_;
      SnippetUI::TextProperty::MergeFrom(v11, v12);
    }
    v13 = (int **)*((_QWORD *)a2 + 5);
    if (v13)
    {
      v14 = (int **)*((_QWORD *)this + 5);
      if (!v14)
      {
        v14 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 5) = v14;
        v13 = (int **)*((_QWORD *)a2 + 5);
      }
      if (v13)
        v15 = v13;
      else
        v15 = (int **)&SnippetUI::_TextProperty_default_instance_;
      SnippetUI::TextProperty::MergeFrom(v14, v15);
    }
    v16 = (int **)*((_QWORD *)a2 + 6);
    if (v16)
    {
      v17 = (int **)*((_QWORD *)this + 6);
      if (!v17)
      {
        v17 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 6) = v17;
        v16 = (int **)*((_QWORD *)a2 + 6);
      }
      if (v16)
        v18 = v16;
      else
        v18 = (int **)&SnippetUI::_TextProperty_default_instance_;
      SnippetUI::TextProperty::MergeFrom(v17, v18);
    }
    v19 = (int **)*((_QWORD *)a2 + 7);
    if (v19)
    {
      v20 = (int **)*((_QWORD *)this + 7);
      if (!v20)
      {
        v20 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 7) = v20;
        v19 = (int **)*((_QWORD *)a2 + 7);
      }
      if (v19)
        v21 = v19;
      else
        v21 = (int **)&SnippetUI::_TextProperty_default_instance_;
      SnippetUI::TextProperty::MergeFrom(v20, v21);
    }
    v22 = (int **)*((_QWORD *)a2 + 8);
    if (v22)
    {
      v23 = (int **)*((_QWORD *)this + 8);
      if (!v23)
      {
        v23 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 8) = v23;
        v22 = (int **)*((_QWORD *)a2 + 8);
      }
      if (v22)
        v24 = v22;
      else
        v24 = (int **)&SnippetUI::_TextProperty_default_instance_;
      SnippetUI::TextProperty::MergeFrom(v23, v24);
    }
    v25 = (int **)*((_QWORD *)a2 + 9);
    if (v25)
    {
      v26 = (int **)*((_QWORD *)this + 9);
      if (!v26)
      {
        v26 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 9) = v26;
        v25 = (int **)*((_QWORD *)a2 + 9);
      }
      if (v25)
        v27 = v25;
      else
        v27 = (int **)&SnippetUI::_TextProperty_default_instance_;
      SnippetUI::TextProperty::MergeFrom(v26, v27);
    }
    v28 = (int **)*((_QWORD *)a2 + 10);
    if (v28)
    {
      v29 = (int **)*((_QWORD *)this + 10);
      if (!v29)
      {
        v29 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 10) = v29;
        v28 = (int **)*((_QWORD *)a2 + 10);
      }
      if (v28)
        v30 = v28;
      else
        v30 = (int **)&SnippetUI::_TextProperty_default_instance_;
      SnippetUI::TextProperty::MergeFrom(v29, v30);
    }
    v31 = (int **)*((_QWORD *)a2 + 11);
    if (v31)
    {
      v32 = (int **)*((_QWORD *)this + 11);
      if (!v32)
      {
        v32 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 11) = v32;
        v31 = (int **)*((_QWORD *)a2 + 11);
      }
      if (v31)
        v33 = v31;
      else
        v33 = (int **)&SnippetUI::_TextProperty_default_instance_;
      SnippetUI::TextProperty::MergeFrom(v32, v33);
    }
    v34 = (int **)*((_QWORD *)a2 + 12);
    if (v34)
    {
      v35 = (int **)*((_QWORD *)this + 12);
      if (!v35)
      {
        v35 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 12) = v35;
        v34 = (int **)*((_QWORD *)a2 + 12);
      }
      if (v34)
        v36 = v34;
      else
        v36 = (int **)&SnippetUI::_TextProperty_default_instance_;
      SnippetUI::TextProperty::MergeFrom(v35, v36);
    }
    v37 = (int **)*((_QWORD *)a2 + 13);
    if (v37)
    {
      v38 = (int **)*((_QWORD *)this + 13);
      if (!v38)
      {
        v38 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 13) = v38;
        v37 = (int **)*((_QWORD *)a2 + 13);
      }
      if (v37)
        v39 = v37;
      else
        v39 = (int **)&SnippetUI::_TextProperty_default_instance_;
      SnippetUI::TextProperty::MergeFrom(v38, v39);
    }
    v40 = (int **)*((_QWORD *)a2 + 14);
    if (v40)
    {
      v41 = (int **)*((_QWORD *)this + 14);
      if (!v41)
      {
        v41 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 14) = v41;
        v40 = (int **)*((_QWORD *)a2 + 14);
      }
      if (v40)
        v42 = v40;
      else
        v42 = (int **)&SnippetUI::_TextProperty_default_instance_;
      SnippetUI::TextProperty::MergeFrom(v41, v42);
    }
    v43 = (int **)*((_QWORD *)a2 + 15);
    if (v43)
    {
      v44 = (int **)*((_QWORD *)this + 15);
      if (!v44)
      {
        v44 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::VisualProperty>(0);
        *((_QWORD *)this + 15) = v44;
        v43 = (int **)*((_QWORD *)a2 + 15);
      }
      if (v43)
        v45 = v43;
      else
        v45 = (int **)&SnippetUI::_VisualProperty_default_instance_;
      SnippetUI::VisualProperty::MergeFrom(v44, v45);
    }
    v46 = (int **)*((_QWORD *)a2 + 16);
    if (v46)
    {
      v47 = (int **)*((_QWORD *)this + 16);
      if (!v47)
      {
        v47 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::VisualProperty>(0);
        *((_QWORD *)this + 16) = v47;
        v46 = (int **)*((_QWORD *)a2 + 16);
      }
      if (v46)
        v48 = v46;
      else
        v48 = (int **)&SnippetUI::_VisualProperty_default_instance_;
      SnippetUI::VisualProperty::MergeFrom(v47, v48);
    }
    v49 = (int **)*((_QWORD *)a2 + 17);
    if (v49)
    {
      v50 = (int **)*((_QWORD *)this + 17);
      if (!v50)
      {
        v50 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
        *((_QWORD *)this + 17) = v50;
        v49 = (int **)*((_QWORD *)a2 + 17);
      }
      if (v49)
        v51 = v49;
      else
        v51 = (int **)&SnippetUI::_ActionProperty_default_instance_;
      SnippetUI::ActionProperty::MergeFrom(v50, v51);
    }
  }
}

void sub_1BF935168(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

SnippetUI::SummaryItem_PairNumber *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::SummaryItem_PairNumber>(google::protobuf::internal::ArenaImpl *this)
{
  SnippetUI::SummaryItem_PairNumber *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (SnippetUI::SummaryItem_PairNumber *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x98uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::SummaryItem_PairNumber>);
    SnippetUI::SummaryItem_PairNumber::SummaryItem_PairNumber(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (SnippetUI::SummaryItem_PairNumber *)operator new();
    SnippetUI::SummaryItem_PairNumber::SummaryItem_PairNumber(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_1BF935204(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D890](v1, 0x10A1C406288CECBLL);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::SummaryItem_PairNumber>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

void InitDefaultsscc_info_SummaryItem_Pair_SummaryItem_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/SummaryItem.pb.cc", a4);
  SnippetUI::SummaryItem_Pair::SummaryItem_Pair((SnippetUI::SummaryItem_Pair *)&SnippetUI::_SummaryItem_Pair_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_SummaryItem_Pair_default_instance_, v4);
  qword_1ED1D41E8 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1ED1D41F0 = &SnippetUI::_TextProperty_default_instance_;
  qword_1ED1D41F8 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1ED1D4200 = &SnippetUI::_TextProperty_default_instance_;
  qword_1ED1D4208 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1ED1D4210 = &SnippetUI::_TextProperty_default_instance_;
  qword_1ED1D4218 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1ED1D4220 = &SnippetUI::_TextProperty_default_instance_;
  qword_1ED1D4228 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1ED1D4230 = &SnippetUI::_TextProperty_default_instance_;
  qword_1ED1D4238 = (uint64_t)&SnippetUI::_VisualProperty_default_instance_;
  unk_1ED1D4240 = &SnippetUI::_VisualProperty_default_instance_;
  qword_1ED1D4248 = (uint64_t)&SnippetUI::_ActionProperty_default_instance_;
}

SnippetUI::SummaryItem_Pair *SnippetUI::SummaryItem_Pair::SummaryItem_Pair(SnippetUI::SummaryItem_Pair *this)
{
  *(_QWORD *)this = &off_1E792E230;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 34) = 0;
  if (atomic_load(scc_info_SummaryItem_Pair_SummaryItem_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_SummaryItem_Pair_SummaryItem_2eproto);
  *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_QWORD *)this + 16) = 0;
  return this;
}

void sub_1BF935510(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::SummaryItem_Pair::~SummaryItem_Pair(SnippetUI::SummaryItem_Pair *this)
{
  SnippetUI::SummaryItem_Pair::~SummaryItem_Pair(this);
  JUMPOUT(0x1C3B8D890);
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  *(_QWORD *)this = &off_1E792E230;
  v2 = *((_QWORD *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x1C3B8D890](v2, 0x1012C40EC159624);
  }
  v4 = *((_QWORD *)this + 3);
  if ((uint64_t *)v4 != &google::protobuf::internal::fixed_address_empty_string && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0)
      operator delete(*(void **)v4);
    MEMORY[0x1C3B8D890](v4, 0x1012C40EC159624);
  }
  if (this != (SnippetUI::SummaryItem_Pair *)&SnippetUI::_SummaryItem_Pair_default_instance_)
  {
    v6 = *((_QWORD *)this + 4);
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    v7 = *((_QWORD *)this + 5);
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    v8 = *((_QWORD *)this + 6);
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    v9 = *((_QWORD *)this + 7);
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    v10 = *((_QWORD *)this + 8);
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    v11 = *((_QWORD *)this + 9);
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = *((_QWORD *)this + 10);
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    v13 = *((_QWORD *)this + 11);
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    v14 = *((_QWORD *)this + 12);
    if (v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    v15 = *((_QWORD *)this + 13);
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    v16 = *((_QWORD *)this + 14);
    if (v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    v17 = *((_QWORD *)this + 15);
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
    v18 = *((_QWORD *)this + 16);
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

SnippetUI::SummaryItem_Pair *SnippetUI::SummaryItem_Pair::New(SnippetUI::SummaryItem_Pair *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::SummaryItem_Pair>(0);
}

SnippetUI::SummaryItem_Pair *SnippetUI::SummaryItem_Pair::New(SnippetUI::SummaryItem_Pair *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::SummaryItem_Pair>(a2);
}

void SnippetUI::SummaryItem_Pair::Clear(SnippetUI::SummaryItem_Pair *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  google::protobuf::internal::InternalMetadataWithArena *v17;
  char v18;

  v2 = *((_QWORD *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(_BYTE **)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v2 = 0;
      *(_BYTE *)(v2 + 23) = 0;
    }
  }
  v3 = *((_QWORD *)this + 3);
  if ((uint64_t *)v3 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v3 + 23) < 0)
    {
      **(_BYTE **)v3 = 0;
      *(_QWORD *)(v3 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v3 = 0;
      *(_BYTE *)(v3 + 23) = 0;
    }
  }
  v4 = *((_QWORD *)this + 4);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  *((_QWORD *)this + 4) = 0;
  v5 = *((_QWORD *)this + 5);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *((_QWORD *)this + 5) = 0;
  v6 = *((_QWORD *)this + 6);
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  *((_QWORD *)this + 6) = 0;
  v7 = *((_QWORD *)this + 7);
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  *((_QWORD *)this + 7) = 0;
  v8 = *((_QWORD *)this + 8);
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  *((_QWORD *)this + 8) = 0;
  v9 = *((_QWORD *)this + 9);
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  *((_QWORD *)this + 9) = 0;
  v10 = *((_QWORD *)this + 10);
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  *((_QWORD *)this + 10) = 0;
  v11 = *((_QWORD *)this + 11);
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  *((_QWORD *)this + 11) = 0;
  v12 = *((_QWORD *)this + 12);
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  *((_QWORD *)this + 12) = 0;
  v13 = *((_QWORD *)this + 13);
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  *((_QWORD *)this + 13) = 0;
  v14 = *((_QWORD *)this + 14);
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  *((_QWORD *)this + 14) = 0;
  v15 = *((_QWORD *)this + 15);
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  *((_QWORD *)this + 15) = 0;
  v16 = *((_QWORD *)this + 16);
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  v18 = *((_BYTE *)this + 8);
  v17 = (SnippetUI::SummaryItem_Pair *)((char *)this + 8);
  *((_QWORD *)v17 + 15) = 0;
  if ((v18 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v17);
}

uint64_t SnippetUI::SummaryItem_Pair::IsInitialized(SnippetUI::SummaryItem_Pair *this)
{
  return 1;
}

char *SnippetUI::SummaryItem_Pair::ByteSizeLong(SnippetUI::SummaryItem_Pair *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  const google::protobuf::UnknownFieldSet *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  SnippetUI::TextProperty *v9;
  char *v10;
  SnippetUI::TextProperty *v11;
  char *v12;
  SnippetUI::TextProperty *v13;
  char *v14;
  SnippetUI::TextProperty *v15;
  char *v16;
  SnippetUI::TextProperty *v17;
  char *v18;
  SnippetUI::TextProperty *v19;
  char *v20;
  SnippetUI::TextProperty *v21;
  char *v22;
  SnippetUI::TextProperty *v23;
  char *v24;
  SnippetUI::TextProperty *v25;
  char *v26;
  SnippetUI::TextProperty *v27;
  char *v28;
  SnippetUI::VisualProperty *v29;
  char *v30;
  SnippetUI::VisualProperty *v31;
  char *v32;
  SnippetUI::ActionProperty *v33;
  char *v34;

  v2 = *((_QWORD *)this + 2);
  v3 = *(unsigned __int8 *)(v2 + 23);
  if (*(char *)(v2 + 23) < 0)
  {
    if (*(_QWORD *)(v2 + 8))
      goto LABEL_3;
LABEL_7:
    v5 = 0;
    goto LABEL_8;
  }
  if (!*(_BYTE *)(v2 + 23))
    goto LABEL_7;
LABEL_3:
  v4 = *(_QWORD *)(v2 + 8);
  if ((v3 & 0x80u) == 0)
    v4 = v3;
  v5 = (const google::protobuf::UnknownFieldSet *)(v4 + ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_8:
  v6 = *((_QWORD *)this + 3);
  v7 = *(unsigned __int8 *)(v6 + 23);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(_QWORD *)(v6 + 8))
      goto LABEL_13;
  }
  else if (!*(_BYTE *)(v6 + 23))
  {
    goto LABEL_13;
  }
  v8 = *(_QWORD *)(v6 + 8);
  if ((v7 & 0x80u) == 0)
    v8 = v7;
  v5 = (const google::protobuf::UnknownFieldSet *)((char *)v5 + v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_13:
  if (this != (SnippetUI::SummaryItem_Pair *)&SnippetUI::_SummaryItem_Pair_default_instance_)
  {
    v9 = (SnippetUI::TextProperty *)*((_QWORD *)this + 4);
    if (v9)
    {
      v10 = SnippetUI::TextProperty::ByteSizeLong(v9);
      v5 = (const google::protobuf::UnknownFieldSet *)&v10[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v11 = (SnippetUI::TextProperty *)*((_QWORD *)this + 5);
    if (v11)
    {
      v12 = SnippetUI::TextProperty::ByteSizeLong(v11);
      v5 = (const google::protobuf::UnknownFieldSet *)&v12[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v12 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v13 = (SnippetUI::TextProperty *)*((_QWORD *)this + 6);
    if (v13)
    {
      v14 = SnippetUI::TextProperty::ByteSizeLong(v13);
      v5 = (const google::protobuf::UnknownFieldSet *)&v14[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v14 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v15 = (SnippetUI::TextProperty *)*((_QWORD *)this + 7);
    if (v15)
    {
      v16 = SnippetUI::TextProperty::ByteSizeLong(v15);
      v5 = (const google::protobuf::UnknownFieldSet *)&v16[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v16 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v17 = (SnippetUI::TextProperty *)*((_QWORD *)this + 8);
    if (v17)
    {
      v18 = SnippetUI::TextProperty::ByteSizeLong(v17);
      v5 = (const google::protobuf::UnknownFieldSet *)&v18[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v18 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v19 = (SnippetUI::TextProperty *)*((_QWORD *)this + 9);
    if (v19)
    {
      v20 = SnippetUI::TextProperty::ByteSizeLong(v19);
      v5 = (const google::protobuf::UnknownFieldSet *)&v20[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v20 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v21 = (SnippetUI::TextProperty *)*((_QWORD *)this + 10);
    if (v21)
    {
      v22 = SnippetUI::TextProperty::ByteSizeLong(v21);
      v5 = (const google::protobuf::UnknownFieldSet *)&v22[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v22 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v23 = (SnippetUI::TextProperty *)*((_QWORD *)this + 11);
    if (v23)
    {
      v24 = SnippetUI::TextProperty::ByteSizeLong(v23);
      v5 = (const google::protobuf::UnknownFieldSet *)&v24[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v24 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v25 = (SnippetUI::TextProperty *)*((_QWORD *)this + 12);
    if (v25)
    {
      v26 = SnippetUI::TextProperty::ByteSizeLong(v25);
      v5 = (const google::protobuf::UnknownFieldSet *)&v26[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v26 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v27 = (SnippetUI::TextProperty *)*((_QWORD *)this + 13);
    if (v27)
    {
      v28 = SnippetUI::TextProperty::ByteSizeLong(v27);
      v5 = (const google::protobuf::UnknownFieldSet *)&v28[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v28 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v29 = (SnippetUI::VisualProperty *)*((_QWORD *)this + 14);
    if (v29)
    {
      v30 = SnippetUI::VisualProperty::ByteSizeLong(v29);
      v5 = (const google::protobuf::UnknownFieldSet *)&v30[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v30 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v31 = (SnippetUI::VisualProperty *)*((_QWORD *)this + 15);
    if (v31)
    {
      v32 = SnippetUI::VisualProperty::ByteSizeLong(v31);
      v5 = (const google::protobuf::UnknownFieldSet *)&v32[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v32 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v33 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 16);
    if (v33)
    {
      v34 = SnippetUI::ActionProperty::ByteSizeLong(v33);
      v5 = (const google::protobuf::UnknownFieldSet *)&v34[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v34 | 1) ^ 0x1F) + 73) >> 6)];
    }
  }
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::SummaryItem_Pair *)((char *)this + 8), v5, (_DWORD *)this + 34);
  *((_DWORD *)this + 34) = (_DWORD)v5;
  return (char *)v5;
}

uint64_t SnippetUI::SummaryItem_Pair::GetCachedSize(SnippetUI::SummaryItem_Pair *this)
{
  return *((unsigned int *)this + 34);
}

google::protobuf::internal *SnippetUI::SummaryItem_Pair::_InternalParse(SnippetUI::SummaryItem_Pair *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  std::string **v5;
  std::string **v6;
  uint64_t *v7;
  google::protobuf::internal::ParseContext *v8;
  google::protobuf::internal *TagFallback;
  char *v10;
  SnippetUI::TextProperty *v11;
  char *v12;
  SnippetUI::VisualProperty *v13;
  SnippetUI::ActionProperty *v14;
  std::string *v15;
  std::string::value_type *v16;
  google::protobuf::internal::ParseContext *v17;
  char *v18;
  BOOL v19;
  google::protobuf::internal *v21;

  v21 = a2;
  v5 = (std::string **)((char *)this + 24);
  v6 = (std::string **)((char *)this + 16);
  v7 = (uint64_t *)((char *)this + 8);
  while (2)
  {
    if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v21, *((_DWORD *)a3 + 23)) & 1) != 0)
      return v21;
    TagFallback = (google::protobuf::internal *)((char *)v21 + 1);
    v10 = (char *)*(unsigned __int8 *)v21;
    if ((*(char *)v21 & 0x80000000) == 0)
      goto LABEL_6;
    v10 = (char *)(v10 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v21 + 2);
LABEL_6:
      v21 = TagFallback;
      goto LABEL_7;
    }
    TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v21, v10);
    v21 = TagFallback;
    if (!TagFallback)
      return TagFallback;
LABEL_7:
    switch(v10 >> 3)
    {
      case 1u:
        if (v10 != 10)
          goto LABEL_65;
        v11 = (SnippetUI::TextProperty *)*((_QWORD *)this + 4);
        if (v11)
          goto LABEL_41;
        v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 4) = v11;
        goto LABEL_40;
      case 2u:
        if (v10 != 18)
          goto LABEL_65;
        v11 = (SnippetUI::TextProperty *)*((_QWORD *)this + 5);
        if (v11)
          goto LABEL_41;
        v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 5) = v11;
        goto LABEL_40;
      case 3u:
        if (v10 != 26)
          goto LABEL_65;
        v11 = (SnippetUI::TextProperty *)*((_QWORD *)this + 6);
        if (v11)
          goto LABEL_41;
        v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 6) = v11;
        goto LABEL_40;
      case 4u:
        if (v10 != 34)
          goto LABEL_65;
        v11 = (SnippetUI::TextProperty *)*((_QWORD *)this + 7);
        if (v11)
          goto LABEL_41;
        v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 7) = v11;
        goto LABEL_40;
      case 5u:
        if (v10 != 42)
          goto LABEL_65;
        v11 = (SnippetUI::TextProperty *)*((_QWORD *)this + 8);
        if (v11)
          goto LABEL_41;
        v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 8) = v11;
        goto LABEL_40;
      case 6u:
        if (v10 != 50)
          goto LABEL_65;
        v11 = (SnippetUI::TextProperty *)*((_QWORD *)this + 9);
        if (v11)
          goto LABEL_41;
        v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 9) = v11;
        goto LABEL_40;
      case 7u:
        if (v10 != 58)
          goto LABEL_65;
        v11 = (SnippetUI::TextProperty *)*((_QWORD *)this + 10);
        if (v11)
          goto LABEL_41;
        v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 10) = v11;
        goto LABEL_40;
      case 8u:
        if (v10 != 66)
          goto LABEL_65;
        v11 = (SnippetUI::TextProperty *)*((_QWORD *)this + 11);
        if (v11)
          goto LABEL_41;
        v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 11) = v11;
        goto LABEL_40;
      case 9u:
        if (v10 != 74)
          goto LABEL_65;
        v11 = (SnippetUI::TextProperty *)*((_QWORD *)this + 12);
        if (v11)
          goto LABEL_41;
        v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 12) = v11;
        goto LABEL_40;
      case 0xAu:
        if (v10 != 82)
          goto LABEL_65;
        v11 = (SnippetUI::TextProperty *)*((_QWORD *)this + 13);
        if (v11)
          goto LABEL_41;
        v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 13) = v11;
LABEL_40:
        TagFallback = v21;
LABEL_41:
        v12 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::TextProperty>(a3, v11, TagFallback);
        goto LABEL_42;
      case 0xBu:
        if (v10 != 90)
          goto LABEL_65;
        v13 = (SnippetUI::VisualProperty *)*((_QWORD *)this + 14);
        if (v13)
          goto LABEL_51;
        v13 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::VisualProperty>(0);
        *((_QWORD *)this + 14) = v13;
        goto LABEL_50;
      case 0xCu:
        if (v10 != 98)
          goto LABEL_65;
        v13 = (SnippetUI::VisualProperty *)*((_QWORD *)this + 15);
        if (v13)
          goto LABEL_51;
        v13 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::VisualProperty>(0);
        *((_QWORD *)this + 15) = v13;
LABEL_50:
        TagFallback = v21;
LABEL_51:
        v12 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::VisualProperty>(a3, v13, TagFallback);
        goto LABEL_42;
      case 0xDu:
        if (v10 != 106)
          goto LABEL_65;
        v14 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 16);
        if (!v14)
        {
          v14 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
          *((_QWORD *)this + 16) = v14;
          TagFallback = v21;
        }
        v12 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::ActionProperty>(a3, v14, TagFallback);
        goto LABEL_42;
      case 0xEu:
        if (v10 != 114)
          goto LABEL_65;
        v15 = *v6;
        if (*v6 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v6, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v15 = *v6;
          TagFallback = v21;
        }
        v16 = (std::string::value_type *)TagFallback;
        v17 = a3;
        v18 = "SnippetUI.SummaryItem_Pair.component_name";
        goto LABEL_64;
      case 0xFu:
        if (v10 != 122)
          goto LABEL_65;
        v15 = *v5;
        if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v15 = *v5;
          TagFallback = v21;
        }
        v16 = (std::string::value_type *)TagFallback;
        v17 = a3;
        v18 = "SnippetUI.SummaryItem_Pair.link_identifier";
LABEL_64:
        v12 = google::protobuf::internal::InlineGreedyStringParserUTF8(v15, v16, (uint64_t)v17, (google::protobuf::internal *)v18);
        goto LABEL_42;
      default:
LABEL_65:
        if ((_DWORD)v10)
          v19 = (v10 & 7) == 4;
        else
          v19 = 1;
        if (v19)
        {
          *((_DWORD *)a3 + 20) = (_DWORD)v10 - 1;
          return TagFallback;
        }
        v12 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v10, v7, TagFallback, a3, v8);
LABEL_42:
        v21 = (google::protobuf::internal *)v12;
        if (v12)
          continue;
        TagFallback = 0;
        break;
    }
    return TagFallback;
  }
}

const google::protobuf::UnknownFieldSet *SnippetUI::SummaryItem_Pair::InternalSerializeWithCachedSizesToArray(SnippetUI::SummaryItem_Pair *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  char *v5;
  SnippetUI::TextProperty *v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  google::protobuf::UnknownFieldSet *v11;
  _BYTE *v12;
  _BYTE *v13;
  unsigned int v14;
  unsigned int v15;
  SnippetUI::TextProperty *v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  google::protobuf::UnknownFieldSet *v20;
  _BYTE *v21;
  _BYTE *v22;
  unsigned int v23;
  unsigned int v24;
  SnippetUI::TextProperty *v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  google::protobuf::UnknownFieldSet *v29;
  _BYTE *v30;
  _BYTE *v31;
  unsigned int v32;
  unsigned int v33;
  SnippetUI::TextProperty *v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int v37;
  google::protobuf::UnknownFieldSet *v38;
  _BYTE *v39;
  _BYTE *v40;
  unsigned int v41;
  unsigned int v42;
  SnippetUI::TextProperty *v43;
  unsigned int v44;
  uint64_t v45;
  unsigned int v46;
  google::protobuf::UnknownFieldSet *v47;
  _BYTE *v48;
  _BYTE *v49;
  unsigned int v50;
  unsigned int v51;
  SnippetUI::TextProperty *v52;
  unsigned int v53;
  uint64_t v54;
  unsigned int v55;
  google::protobuf::UnknownFieldSet *v56;
  _BYTE *v57;
  _BYTE *v58;
  unsigned int v59;
  unsigned int v60;
  SnippetUI::TextProperty *v61;
  unsigned int v62;
  uint64_t v63;
  unsigned int v64;
  google::protobuf::UnknownFieldSet *v65;
  _BYTE *v66;
  _BYTE *v67;
  unsigned int v68;
  unsigned int v69;
  SnippetUI::TextProperty *v70;
  unsigned int v71;
  uint64_t v72;
  unsigned int v73;
  google::protobuf::UnknownFieldSet *v74;
  _BYTE *v75;
  _BYTE *v76;
  unsigned int v77;
  unsigned int v78;
  SnippetUI::TextProperty *v79;
  unsigned int v80;
  uint64_t v81;
  unsigned int v82;
  google::protobuf::UnknownFieldSet *v83;
  _BYTE *v84;
  _BYTE *v85;
  unsigned int v86;
  unsigned int v87;
  SnippetUI::TextProperty *v88;
  unsigned int v89;
  uint64_t v90;
  unsigned int v91;
  google::protobuf::UnknownFieldSet *v92;
  _BYTE *v93;
  _BYTE *v94;
  unsigned int v95;
  unsigned int v96;
  SnippetUI::VisualProperty *v97;
  unsigned int v98;
  uint64_t v99;
  unsigned int v100;
  google::protobuf::UnknownFieldSet *v101;
  _BYTE *v102;
  _BYTE *v103;
  unsigned int v104;
  unsigned int v105;
  SnippetUI::VisualProperty *v106;
  unsigned int v107;
  uint64_t v108;
  unsigned int v109;
  google::protobuf::UnknownFieldSet *v110;
  _BYTE *v111;
  _BYTE *v112;
  unsigned int v113;
  unsigned int v114;
  SnippetUI::ActionProperty *v115;
  unsigned int v116;
  google::protobuf::UnknownFieldSet *v117;
  unsigned int v118;
  _BYTE *v119;
  _BYTE *v120;
  unsigned int v121;
  unsigned int v122;
  google::protobuf::internal *v123;
  const char *v124;
  google::protobuf::internal *v125;
  const char *v126;
  uint64_t v127;

  v5 = (char *)a2;
  if (this == (SnippetUI::SummaryItem_Pair *)&SnippetUI::_SummaryItem_Pair_default_instance_)
    goto LABEL_157;
  v7 = (SnippetUI::TextProperty *)*((_QWORD *)this + 4);
  if (v7)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
    {
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      v7 = (SnippetUI::TextProperty *)*((_QWORD *)this + 4);
    }
    *v5 = 10;
    v8 = *((_DWORD *)v7 + 15);
    if (v8 > 0x7F)
    {
      v5[1] = v8 | 0x80;
      v10 = v8 >> 7;
      if (v8 >> 14)
      {
        v12 = v5 + 2;
        do
        {
          v13 = v12;
          *v12++ = v10 | 0x80;
          v14 = v10 >> 7;
          v15 = v10 >> 14;
          v10 >>= 7;
        }
        while (v15);
        v11 = (google::protobuf::UnknownFieldSet *)(v13 + 2);
        *v12 = v14;
        goto LABEL_13;
      }
      v5[2] = v10;
      v9 = 3;
    }
    else
    {
      v5[1] = v8;
      v9 = 2;
    }
    v11 = (google::protobuf::UnknownFieldSet *)&v5[v9];
LABEL_13:
    v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v7, v11, a3, a4);
  }
  v16 = (SnippetUI::TextProperty *)*((_QWORD *)this + 5);
  if (!v16)
    goto LABEL_26;
  if ((unint64_t)v5 >= *(_QWORD *)a3)
  {
    v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v16 = (SnippetUI::TextProperty *)*((_QWORD *)this + 5);
  }
  *v5 = 18;
  v17 = *((_DWORD *)v16 + 15);
  if (v17 > 0x7F)
  {
    v5[1] = v17 | 0x80;
    v19 = v17 >> 7;
    if (v17 >> 14)
    {
      v21 = v5 + 2;
      do
      {
        v22 = v21;
        *v21++ = v19 | 0x80;
        v23 = v19 >> 7;
        v24 = v19 >> 14;
        v19 >>= 7;
      }
      while (v24);
      v20 = (google::protobuf::UnknownFieldSet *)(v22 + 2);
      *v21 = v23;
      goto LABEL_25;
    }
    v5[2] = v19;
    v18 = 3;
  }
  else
  {
    v5[1] = v17;
    v18 = 2;
  }
  v20 = (google::protobuf::UnknownFieldSet *)&v5[v18];
LABEL_25:
  v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v16, v20, a3, a4);
LABEL_26:
  v25 = (SnippetUI::TextProperty *)*((_QWORD *)this + 6);
  if (!v25)
    goto LABEL_38;
  if ((unint64_t)v5 >= *(_QWORD *)a3)
  {
    v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v25 = (SnippetUI::TextProperty *)*((_QWORD *)this + 6);
  }
  *v5 = 26;
  v26 = *((_DWORD *)v25 + 15);
  if (v26 > 0x7F)
  {
    v5[1] = v26 | 0x80;
    v28 = v26 >> 7;
    if (v26 >> 14)
    {
      v30 = v5 + 2;
      do
      {
        v31 = v30;
        *v30++ = v28 | 0x80;
        v32 = v28 >> 7;
        v33 = v28 >> 14;
        v28 >>= 7;
      }
      while (v33);
      v29 = (google::protobuf::UnknownFieldSet *)(v31 + 2);
      *v30 = v32;
      goto LABEL_37;
    }
    v5[2] = v28;
    v27 = 3;
  }
  else
  {
    v5[1] = v26;
    v27 = 2;
  }
  v29 = (google::protobuf::UnknownFieldSet *)&v5[v27];
LABEL_37:
  v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v25, v29, a3, a4);
LABEL_38:
  v34 = (SnippetUI::TextProperty *)*((_QWORD *)this + 7);
  if (!v34)
    goto LABEL_50;
  if ((unint64_t)v5 >= *(_QWORD *)a3)
  {
    v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v34 = (SnippetUI::TextProperty *)*((_QWORD *)this + 7);
  }
  *v5 = 34;
  v35 = *((_DWORD *)v34 + 15);
  if (v35 > 0x7F)
  {
    v5[1] = v35 | 0x80;
    v37 = v35 >> 7;
    if (v35 >> 14)
    {
      v39 = v5 + 2;
      do
      {
        v40 = v39;
        *v39++ = v37 | 0x80;
        v41 = v37 >> 7;
        v42 = v37 >> 14;
        v37 >>= 7;
      }
      while (v42);
      v38 = (google::protobuf::UnknownFieldSet *)(v40 + 2);
      *v39 = v41;
      goto LABEL_49;
    }
    v5[2] = v37;
    v36 = 3;
  }
  else
  {
    v5[1] = v35;
    v36 = 2;
  }
  v38 = (google::protobuf::UnknownFieldSet *)&v5[v36];
LABEL_49:
  v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v34, v38, a3, a4);
LABEL_50:
  v43 = (SnippetUI::TextProperty *)*((_QWORD *)this + 8);
  if (!v43)
    goto LABEL_62;
  if ((unint64_t)v5 >= *(_QWORD *)a3)
  {
    v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v43 = (SnippetUI::TextProperty *)*((_QWORD *)this + 8);
  }
  *v5 = 42;
  v44 = *((_DWORD *)v43 + 15);
  if (v44 > 0x7F)
  {
    v5[1] = v44 | 0x80;
    v46 = v44 >> 7;
    if (v44 >> 14)
    {
      v48 = v5 + 2;
      do
      {
        v49 = v48;
        *v48++ = v46 | 0x80;
        v50 = v46 >> 7;
        v51 = v46 >> 14;
        v46 >>= 7;
      }
      while (v51);
      v47 = (google::protobuf::UnknownFieldSet *)(v49 + 2);
      *v48 = v50;
      goto LABEL_61;
    }
    v5[2] = v46;
    v45 = 3;
  }
  else
  {
    v5[1] = v44;
    v45 = 2;
  }
  v47 = (google::protobuf::UnknownFieldSet *)&v5[v45];
LABEL_61:
  v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v43, v47, a3, a4);
LABEL_62:
  v52 = (SnippetUI::TextProperty *)*((_QWORD *)this + 9);
  if (!v52)
    goto LABEL_74;
  if ((unint64_t)v5 >= *(_QWORD *)a3)
  {
    v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v52 = (SnippetUI::TextProperty *)*((_QWORD *)this + 9);
  }
  *v5 = 50;
  v53 = *((_DWORD *)v52 + 15);
  if (v53 > 0x7F)
  {
    v5[1] = v53 | 0x80;
    v55 = v53 >> 7;
    if (v53 >> 14)
    {
      v57 = v5 + 2;
      do
      {
        v58 = v57;
        *v57++ = v55 | 0x80;
        v59 = v55 >> 7;
        v60 = v55 >> 14;
        v55 >>= 7;
      }
      while (v60);
      v56 = (google::protobuf::UnknownFieldSet *)(v58 + 2);
      *v57 = v59;
      goto LABEL_73;
    }
    v5[2] = v55;
    v54 = 3;
  }
  else
  {
    v5[1] = v53;
    v54 = 2;
  }
  v56 = (google::protobuf::UnknownFieldSet *)&v5[v54];
LABEL_73:
  v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v52, v56, a3, a4);
LABEL_74:
  v61 = (SnippetUI::TextProperty *)*((_QWORD *)this + 10);
  if (!v61)
    goto LABEL_86;
  if ((unint64_t)v5 >= *(_QWORD *)a3)
  {
    v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v61 = (SnippetUI::TextProperty *)*((_QWORD *)this + 10);
  }
  *v5 = 58;
  v62 = *((_DWORD *)v61 + 15);
  if (v62 > 0x7F)
  {
    v5[1] = v62 | 0x80;
    v64 = v62 >> 7;
    if (v62 >> 14)
    {
      v66 = v5 + 2;
      do
      {
        v67 = v66;
        *v66++ = v64 | 0x80;
        v68 = v64 >> 7;
        v69 = v64 >> 14;
        v64 >>= 7;
      }
      while (v69);
      v65 = (google::protobuf::UnknownFieldSet *)(v67 + 2);
      *v66 = v68;
      goto LABEL_85;
    }
    v5[2] = v64;
    v63 = 3;
  }
  else
  {
    v5[1] = v62;
    v63 = 2;
  }
  v65 = (google::protobuf::UnknownFieldSet *)&v5[v63];
LABEL_85:
  v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v61, v65, a3, a4);
LABEL_86:
  v70 = (SnippetUI::TextProperty *)*((_QWORD *)this + 11);
  if (!v70)
    goto LABEL_98;
  if ((unint64_t)v5 >= *(_QWORD *)a3)
  {
    v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v70 = (SnippetUI::TextProperty *)*((_QWORD *)this + 11);
  }
  *v5 = 66;
  v71 = *((_DWORD *)v70 + 15);
  if (v71 > 0x7F)
  {
    v5[1] = v71 | 0x80;
    v73 = v71 >> 7;
    if (v71 >> 14)
    {
      v75 = v5 + 2;
      do
      {
        v76 = v75;
        *v75++ = v73 | 0x80;
        v77 = v73 >> 7;
        v78 = v73 >> 14;
        v73 >>= 7;
      }
      while (v78);
      v74 = (google::protobuf::UnknownFieldSet *)(v76 + 2);
      *v75 = v77;
      goto LABEL_97;
    }
    v5[2] = v73;
    v72 = 3;
  }
  else
  {
    v5[1] = v71;
    v72 = 2;
  }
  v74 = (google::protobuf::UnknownFieldSet *)&v5[v72];
LABEL_97:
  v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v70, v74, a3, a4);
LABEL_98:
  v79 = (SnippetUI::TextProperty *)*((_QWORD *)this + 12);
  if (!v79)
    goto LABEL_110;
  if ((unint64_t)v5 >= *(_QWORD *)a3)
  {
    v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v79 = (SnippetUI::TextProperty *)*((_QWORD *)this + 12);
  }
  *v5 = 74;
  v80 = *((_DWORD *)v79 + 15);
  if (v80 > 0x7F)
  {
    v5[1] = v80 | 0x80;
    v82 = v80 >> 7;
    if (v80 >> 14)
    {
      v84 = v5 + 2;
      do
      {
        v85 = v84;
        *v84++ = v82 | 0x80;
        v86 = v82 >> 7;
        v87 = v82 >> 14;
        v82 >>= 7;
      }
      while (v87);
      v83 = (google::protobuf::UnknownFieldSet *)(v85 + 2);
      *v84 = v86;
      goto LABEL_109;
    }
    v5[2] = v82;
    v81 = 3;
  }
  else
  {
    v5[1] = v80;
    v81 = 2;
  }
  v83 = (google::protobuf::UnknownFieldSet *)&v5[v81];
LABEL_109:
  v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v79, v83, a3, a4);
LABEL_110:
  v88 = (SnippetUI::TextProperty *)*((_QWORD *)this + 13);
  if (!v88)
    goto LABEL_122;
  if ((unint64_t)v5 >= *(_QWORD *)a3)
  {
    v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v88 = (SnippetUI::TextProperty *)*((_QWORD *)this + 13);
  }
  *v5 = 82;
  v89 = *((_DWORD *)v88 + 15);
  if (v89 > 0x7F)
  {
    v5[1] = v89 | 0x80;
    v91 = v89 >> 7;
    if (v89 >> 14)
    {
      v93 = v5 + 2;
      do
      {
        v94 = v93;
        *v93++ = v91 | 0x80;
        v95 = v91 >> 7;
        v96 = v91 >> 14;
        v91 >>= 7;
      }
      while (v96);
      v92 = (google::protobuf::UnknownFieldSet *)(v94 + 2);
      *v93 = v95;
      goto LABEL_121;
    }
    v5[2] = v91;
    v90 = 3;
  }
  else
  {
    v5[1] = v89;
    v90 = 2;
  }
  v92 = (google::protobuf::UnknownFieldSet *)&v5[v90];
LABEL_121:
  v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v88, v92, a3, a4);
LABEL_122:
  v97 = (SnippetUI::VisualProperty *)*((_QWORD *)this + 14);
  if (!v97)
    goto LABEL_134;
  if ((unint64_t)v5 >= *(_QWORD *)a3)
  {
    v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v97 = (SnippetUI::VisualProperty *)*((_QWORD *)this + 14);
  }
  *v5 = 90;
  v98 = *((_DWORD *)v97 + 15);
  if (v98 > 0x7F)
  {
    v5[1] = v98 | 0x80;
    v100 = v98 >> 7;
    if (v98 >> 14)
    {
      v102 = v5 + 2;
      do
      {
        v103 = v102;
        *v102++ = v100 | 0x80;
        v104 = v100 >> 7;
        v105 = v100 >> 14;
        v100 >>= 7;
      }
      while (v105);
      v101 = (google::protobuf::UnknownFieldSet *)(v103 + 2);
      *v102 = v104;
      goto LABEL_133;
    }
    v5[2] = v100;
    v99 = 3;
  }
  else
  {
    v5[1] = v98;
    v99 = 2;
  }
  v101 = (google::protobuf::UnknownFieldSet *)&v5[v99];
LABEL_133:
  v5 = (char *)SnippetUI::VisualProperty::InternalSerializeWithCachedSizesToArray(v97, v101, a3, a4);
LABEL_134:
  v106 = (SnippetUI::VisualProperty *)*((_QWORD *)this + 15);
  if (!v106)
    goto LABEL_146;
  if ((unint64_t)v5 >= *(_QWORD *)a3)
  {
    v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v106 = (SnippetUI::VisualProperty *)*((_QWORD *)this + 15);
  }
  *v5 = 98;
  v107 = *((_DWORD *)v106 + 15);
  if (v107 > 0x7F)
  {
    v5[1] = v107 | 0x80;
    v109 = v107 >> 7;
    if (v107 >> 14)
    {
      v111 = v5 + 2;
      do
      {
        v112 = v111;
        *v111++ = v109 | 0x80;
        v113 = v109 >> 7;
        v114 = v109 >> 14;
        v109 >>= 7;
      }
      while (v114);
      v110 = (google::protobuf::UnknownFieldSet *)(v112 + 2);
      *v111 = v113;
      goto LABEL_145;
    }
    v5[2] = v109;
    v108 = 3;
  }
  else
  {
    v5[1] = v107;
    v108 = 2;
  }
  v110 = (google::protobuf::UnknownFieldSet *)&v5[v108];
LABEL_145:
  v5 = (char *)SnippetUI::VisualProperty::InternalSerializeWithCachedSizesToArray(v106, v110, a3, a4);
LABEL_146:
  v115 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 16);
  if (v115)
  {
    if ((unint64_t)v5 >= *(_QWORD *)a3)
    {
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
      v115 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 16);
    }
    *v5 = 106;
    v116 = *((_DWORD *)v115 + 12);
    if (v116 > 0x7F)
    {
      v5[1] = v116 | 0x80;
      v118 = v116 >> 7;
      if (v116 >> 14)
      {
        v119 = v5 + 2;
        do
        {
          v120 = v119;
          *v119++ = v118 | 0x80;
          v121 = v118 >> 7;
          v122 = v118 >> 14;
          v118 >>= 7;
        }
        while (v122);
        v117 = (google::protobuf::UnknownFieldSet *)(v120 + 2);
        *v119 = v121;
      }
      else
      {
        v5[2] = v118;
        v117 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
      }
    }
    else
    {
      v5[1] = v116;
      v117 = (google::protobuf::UnknownFieldSet *)(v5 + 2);
    }
    v5 = (char *)SnippetUI::ActionProperty::InternalSerializeWithCachedSizesToArray(v115, v117, a3, a4);
  }
LABEL_157:
  v123 = (google::protobuf::internal *)*((_QWORD *)this + 2);
  if (*((char *)v123 + 23) < 0)
  {
    v124 = (const char *)*((_QWORD *)v123 + 1);
    if (!v124)
      goto LABEL_163;
    v123 = *(google::protobuf::internal **)v123;
    goto LABEL_162;
  }
  v124 = (const char *)*((unsigned __int8 *)v123 + 23);
  if (*((_BYTE *)v123 + 23))
  {
LABEL_162:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v123, v124, 1, (google::protobuf::internal *)"SnippetUI.SummaryItem_Pair.component_name");
    v5 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 14, *((_QWORD *)this + 2), v5);
  }
LABEL_163:
  v125 = (google::protobuf::internal *)*((_QWORD *)this + 3);
  if (*((char *)v125 + 23) < 0)
  {
    v126 = (const char *)*((_QWORD *)v125 + 1);
    if (!v126)
      goto LABEL_169;
    v125 = *(google::protobuf::internal **)v125;
    goto LABEL_168;
  }
  v126 = (const char *)*((unsigned __int8 *)v125 + 23);
  if (*((_BYTE *)v125 + 23))
  {
LABEL_168:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v125, v126, 1, (google::protobuf::internal *)"SnippetUI.SummaryItem_Pair.link_identifier");
    v5 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 15, *((_QWORD *)this + 3), v5);
  }
LABEL_169:
  v127 = *((_QWORD *)this + 1);
  if ((v127 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v127 & 0xFFFFFFFFFFFFFFFELL), (const google::protobuf::UnknownFieldSet *)v5, a3, a4);
  else
    return (const google::protobuf::UnknownFieldSet *)v5;
}

void SnippetUI::SummaryItem_Pair::CopyFrom(SnippetUI::SummaryItem_Pair *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    SnippetUI::SummaryItem_Pair::Clear(this);
    SnippetUI::SummaryItem_Pair::MergeFrom(this, a2);
  }
}

void SnippetUI::SummaryItem_Pair::MergeFrom(SnippetUI::SummaryItem_Pair *this, const google::protobuf::Message *lpsrc)
{
  std::string *v4;
  const SnippetUI::SummaryItem_Pair *v5;
  google::protobuf::Message *v6;
  char v7;
  std::string v8[2];

  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/SummaryItem.pb.cc", 4289);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5)
    SnippetUI::SummaryItem_Pair::MergeFrom(this, v5);
  else
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
}

void sub_1BF9368BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::SummaryItem_Pair::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 136) = a2;
  return this;
}

uint64_t SnippetUI::SummaryItem_Pair::GetMetadata(SnippetUI::SummaryItem_Pair *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_SummaryItem_2eproto);
  return qword_1EF5819C0;
}

void *SnippetUI::SummaryItem_Pair::default_instance(SnippetUI::SummaryItem_Pair *this)
{
  if (atomic_load(scc_info_SummaryItem_Pair_SummaryItem_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_SummaryItem_Pair_SummaryItem_2eproto);
  return &SnippetUI::_SummaryItem_Pair_default_instance_;
}

void SnippetUI::SummaryItem_Pair::MergeFrom(SnippetUI::SummaryItem_Pair *this, const SnippetUI::SummaryItem_Pair *a2)
{
  std::string *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  int **v10;
  int **v11;
  int **v12;
  int **v13;
  int **v14;
  int **v15;
  int **v16;
  int **v17;
  int **v18;
  int **v19;
  int **v20;
  int **v21;
  int **v22;
  int **v23;
  int **v24;
  int **v25;
  int **v26;
  int **v27;
  int **v28;
  int **v29;
  int **v30;
  int **v31;
  int **v32;
  int **v33;
  int **v34;
  int **v35;
  int **v36;
  int **v37;
  int **v38;
  int **v39;
  int **v40;
  int **v41;
  int **v42;
  int **v43;
  int **v44;
  int **v45;
  int **v46;
  int **v47;
  int **v48;
  char v49;
  std::string v50[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v50, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/SummaryItem.pb.cc", 4304);
    v4 = google::protobuf::internal::LogMessage::operator<<(v50, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v49, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v50[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::SummaryItem_Pair *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  v6 = *((_QWORD *)a2 + 2);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(_QWORD *)(v6 + 8))
      goto LABEL_13;
  }
  else if (!*(_BYTE *)(v6 + 23))
  {
    goto LABEL_13;
  }
  v7 = (uint64_t *)*((_QWORD *)this + 2);
  if (v7 != (uint64_t *)v6)
  {
    if (v7 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, v6);
    else
      std::string::operator=(*((std::string **)this + 2), (const std::string *)v6);
  }
LABEL_13:
  v8 = *((_QWORD *)a2 + 3);
  if (*(char *)(v8 + 23) < 0)
  {
    if (!*(_QWORD *)(v8 + 8))
      goto LABEL_21;
  }
  else if (!*(_BYTE *)(v8 + 23))
  {
    goto LABEL_21;
  }
  v9 = (uint64_t *)*((_QWORD *)this + 3);
  if (v9 != (uint64_t *)v8)
  {
    if (v9 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 3, v8);
    else
      std::string::operator=(*((std::string **)this + 3), (const std::string *)v8);
  }
LABEL_21:
  if (a2 != (const SnippetUI::SummaryItem_Pair *)&SnippetUI::_SummaryItem_Pair_default_instance_)
  {
    v10 = (int **)*((_QWORD *)a2 + 4);
    if (v10)
    {
      v11 = (int **)*((_QWORD *)this + 4);
      if (!v11)
      {
        v11 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 4) = v11;
        v10 = (int **)*((_QWORD *)a2 + 4);
      }
      if (v10)
        v12 = v10;
      else
        v12 = (int **)&SnippetUI::_TextProperty_default_instance_;
      SnippetUI::TextProperty::MergeFrom(v11, v12);
    }
    v13 = (int **)*((_QWORD *)a2 + 5);
    if (v13)
    {
      v14 = (int **)*((_QWORD *)this + 5);
      if (!v14)
      {
        v14 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 5) = v14;
        v13 = (int **)*((_QWORD *)a2 + 5);
      }
      if (v13)
        v15 = v13;
      else
        v15 = (int **)&SnippetUI::_TextProperty_default_instance_;
      SnippetUI::TextProperty::MergeFrom(v14, v15);
    }
    v16 = (int **)*((_QWORD *)a2 + 6);
    if (v16)
    {
      v17 = (int **)*((_QWORD *)this + 6);
      if (!v17)
      {
        v17 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 6) = v17;
        v16 = (int **)*((_QWORD *)a2 + 6);
      }
      if (v16)
        v18 = v16;
      else
        v18 = (int **)&SnippetUI::_TextProperty_default_instance_;
      SnippetUI::TextProperty::MergeFrom(v17, v18);
    }
    v19 = (int **)*((_QWORD *)a2 + 7);
    if (v19)
    {
      v20 = (int **)*((_QWORD *)this + 7);
      if (!v20)
      {
        v20 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 7) = v20;
        v19 = (int **)*((_QWORD *)a2 + 7);
      }
      if (v19)
        v21 = v19;
      else
        v21 = (int **)&SnippetUI::_TextProperty_default_instance_;
      SnippetUI::TextProperty::MergeFrom(v20, v21);
    }
    v22 = (int **)*((_QWORD *)a2 + 8);
    if (v22)
    {
      v23 = (int **)*((_QWORD *)this + 8);
      if (!v23)
      {
        v23 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 8) = v23;
        v22 = (int **)*((_QWORD *)a2 + 8);
      }
      if (v22)
        v24 = v22;
      else
        v24 = (int **)&SnippetUI::_TextProperty_default_instance_;
      SnippetUI::TextProperty::MergeFrom(v23, v24);
    }
    v25 = (int **)*((_QWORD *)a2 + 9);
    if (v25)
    {
      v26 = (int **)*((_QWORD *)this + 9);
      if (!v26)
      {
        v26 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 9) = v26;
        v25 = (int **)*((_QWORD *)a2 + 9);
      }
      if (v25)
        v27 = v25;
      else
        v27 = (int **)&SnippetUI::_TextProperty_default_instance_;
      SnippetUI::TextProperty::MergeFrom(v26, v27);
    }
    v28 = (int **)*((_QWORD *)a2 + 10);
    if (v28)
    {
      v29 = (int **)*((_QWORD *)this + 10);
      if (!v29)
      {
        v29 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 10) = v29;
        v28 = (int **)*((_QWORD *)a2 + 10);
      }
      if (v28)
        v30 = v28;
      else
        v30 = (int **)&SnippetUI::_TextProperty_default_instance_;
      SnippetUI::TextProperty::MergeFrom(v29, v30);
    }
    v31 = (int **)*((_QWORD *)a2 + 11);
    if (v31)
    {
      v32 = (int **)*((_QWORD *)this + 11);
      if (!v32)
      {
        v32 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 11) = v32;
        v31 = (int **)*((_QWORD *)a2 + 11);
      }
      if (v31)
        v33 = v31;
      else
        v33 = (int **)&SnippetUI::_TextProperty_default_instance_;
      SnippetUI::TextProperty::MergeFrom(v32, v33);
    }
    v34 = (int **)*((_QWORD *)a2 + 12);
    if (v34)
    {
      v35 = (int **)*((_QWORD *)this + 12);
      if (!v35)
      {
        v35 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 12) = v35;
        v34 = (int **)*((_QWORD *)a2 + 12);
      }
      if (v34)
        v36 = v34;
      else
        v36 = (int **)&SnippetUI::_TextProperty_default_instance_;
      SnippetUI::TextProperty::MergeFrom(v35, v36);
    }
    v37 = (int **)*((_QWORD *)a2 + 13);
    if (v37)
    {
      v38 = (int **)*((_QWORD *)this + 13);
      if (!v38)
      {
        v38 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 13) = v38;
        v37 = (int **)*((_QWORD *)a2 + 13);
      }
      if (v37)
        v39 = v37;
      else
        v39 = (int **)&SnippetUI::_TextProperty_default_instance_;
      SnippetUI::TextProperty::MergeFrom(v38, v39);
    }
    v40 = (int **)*((_QWORD *)a2 + 14);
    if (v40)
    {
      v41 = (int **)*((_QWORD *)this + 14);
      if (!v41)
      {
        v41 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::VisualProperty>(0);
        *((_QWORD *)this + 14) = v41;
        v40 = (int **)*((_QWORD *)a2 + 14);
      }
      if (v40)
        v42 = v40;
      else
        v42 = (int **)&SnippetUI::_VisualProperty_default_instance_;
      SnippetUI::VisualProperty::MergeFrom(v41, v42);
    }
    v43 = (int **)*((_QWORD *)a2 + 15);
    if (v43)
    {
      v44 = (int **)*((_QWORD *)this + 15);
      if (!v44)
      {
        v44 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::VisualProperty>(0);
        *((_QWORD *)this + 15) = v44;
        v43 = (int **)*((_QWORD *)a2 + 15);
      }
      if (v43)
        v45 = v43;
      else
        v45 = (int **)&SnippetUI::_VisualProperty_default_instance_;
      SnippetUI::VisualProperty::MergeFrom(v44, v45);
    }
    v46 = (int **)*((_QWORD *)a2 + 16);
    if (v46)
    {
      v47 = (int **)*((_QWORD *)this + 16);
      if (!v47)
      {
        v47 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
        *((_QWORD *)this + 16) = v47;
        v46 = (int **)*((_QWORD *)a2 + 16);
      }
      if (v46)
        v48 = v46;
      else
        v48 = (int **)&SnippetUI::_ActionProperty_default_instance_;
      SnippetUI::ActionProperty::MergeFrom(v47, v48);
    }
  }
}

void sub_1BF936C94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

SnippetUI::SummaryItem_Pair *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::SummaryItem_Pair>(google::protobuf::internal::ArenaImpl *this)
{
  SnippetUI::SummaryItem_Pair *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (SnippetUI::SummaryItem_Pair *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x90uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::SummaryItem_Pair>);
    SnippetUI::SummaryItem_Pair::SummaryItem_Pair(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (SnippetUI::SummaryItem_Pair *)operator new();
    SnippetUI::SummaryItem_Pair::SummaryItem_Pair(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_1BF936D30(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D890](v1, 0x10A1C405455452ELL);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::SummaryItem_Pair>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

void InitDefaultsscc_info_SummaryItem_LargeText_SummaryItem_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/SummaryItem.pb.cc", a4);
  SnippetUI::SummaryItem_LargeText::SummaryItem_LargeText((SnippetUI::SummaryItem_LargeText *)&SnippetUI::_SummaryItem_LargeText_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_SummaryItem_LargeText_default_instance_, v4);
  qword_1ED1D5628 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1ED1D5630 = &SnippetUI::_MultilineTextProperty_default_instance_;
  qword_1ED1D5638 = (uint64_t)&SnippetUI::_MultilineTextProperty_default_instance_;
  unk_1ED1D5640 = &SnippetUI::_ActionProperty_default_instance_;
}

SnippetUI::SummaryItem_LargeText *SnippetUI::SummaryItem_LargeText::SummaryItem_LargeText(SnippetUI::SummaryItem_LargeText *this)
{
  *(_QWORD *)this = &off_1E792E0B0;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 16) = 0;
  if (atomic_load(scc_info_SummaryItem_LargeText_SummaryItem_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_SummaryItem_LargeText_SummaryItem_2eproto);
  *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  return this;
}

void sub_1BF937008(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::SummaryItem_LargeText::~SummaryItem_LargeText(SnippetUI::SummaryItem_LargeText *this)
{
  SnippetUI::SummaryItem_LargeText::~SummaryItem_LargeText(this);
  JUMPOUT(0x1C3B8D890);
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)this = &off_1E792E0B0;
  v2 = *((_QWORD *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x1C3B8D890](v2, 0x1012C40EC159624);
  }
  v4 = *((_QWORD *)this + 3);
  if ((uint64_t *)v4 != &google::protobuf::internal::fixed_address_empty_string && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0)
      operator delete(*(void **)v4);
    MEMORY[0x1C3B8D890](v4, 0x1012C40EC159624);
  }
  if (this != (SnippetUI::SummaryItem_LargeText *)&SnippetUI::_SummaryItem_LargeText_default_instance_)
  {
    v6 = *((_QWORD *)this + 4);
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    v7 = *((_QWORD *)this + 5);
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    v8 = *((_QWORD *)this + 6);
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    v9 = *((_QWORD *)this + 7);
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

SnippetUI::SummaryItem_LargeText *SnippetUI::SummaryItem_LargeText::New(SnippetUI::SummaryItem_LargeText *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::SummaryItem_LargeText>(0);
}

SnippetUI::SummaryItem_LargeText *SnippetUI::SummaryItem_LargeText::New(SnippetUI::SummaryItem_LargeText *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::SummaryItem_LargeText>(a2);
}

void SnippetUI::SummaryItem_LargeText::Clear(SnippetUI::SummaryItem_LargeText *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  google::protobuf::internal::InternalMetadataWithArena *v8;
  char v9;

  v2 = *((_QWORD *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(_BYTE **)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v2 = 0;
      *(_BYTE *)(v2 + 23) = 0;
    }
  }
  v3 = *((_QWORD *)this + 3);
  if ((uint64_t *)v3 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v3 + 23) < 0)
    {
      **(_BYTE **)v3 = 0;
      *(_QWORD *)(v3 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v3 = 0;
      *(_BYTE *)(v3 + 23) = 0;
    }
  }
  v4 = *((_QWORD *)this + 4);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  *((_QWORD *)this + 4) = 0;
  v5 = *((_QWORD *)this + 5);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *((_QWORD *)this + 5) = 0;
  v6 = *((_QWORD *)this + 6);
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  *((_QWORD *)this + 6) = 0;
  v7 = *((_QWORD *)this + 7);
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v9 = *((_BYTE *)this + 8);
  v8 = (SnippetUI::SummaryItem_LargeText *)((char *)this + 8);
  *((_QWORD *)v8 + 6) = 0;
  if ((v9 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v8);
}

uint64_t SnippetUI::SummaryItem_LargeText::IsInitialized(SnippetUI::SummaryItem_LargeText *this)
{
  return 1;
}

char *SnippetUI::SummaryItem_LargeText::ByteSizeLong(SnippetUI::SummaryItem_LargeText *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  const google::protobuf::UnknownFieldSet *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  SnippetUI::TextProperty *v9;
  char *v10;
  SnippetUI::MultilineTextProperty *v11;
  char *v12;
  SnippetUI::MultilineTextProperty *v13;
  char *v14;
  SnippetUI::ActionProperty *v15;
  char *v16;

  v2 = *((_QWORD *)this + 2);
  v3 = *(unsigned __int8 *)(v2 + 23);
  if (*(char *)(v2 + 23) < 0)
  {
    if (*(_QWORD *)(v2 + 8))
      goto LABEL_3;
LABEL_7:
    v5 = 0;
    goto LABEL_8;
  }
  if (!*(_BYTE *)(v2 + 23))
    goto LABEL_7;
LABEL_3:
  v4 = *(_QWORD *)(v2 + 8);
  if ((v3 & 0x80u) == 0)
    v4 = v3;
  v5 = (const google::protobuf::UnknownFieldSet *)(v4 + ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_8:
  v6 = *((_QWORD *)this + 3);
  v7 = *(unsigned __int8 *)(v6 + 23);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(_QWORD *)(v6 + 8))
      goto LABEL_13;
  }
  else if (!*(_BYTE *)(v6 + 23))
  {
    goto LABEL_13;
  }
  v8 = *(_QWORD *)(v6 + 8);
  if ((v7 & 0x80u) == 0)
    v8 = v7;
  v5 = (const google::protobuf::UnknownFieldSet *)((char *)v5 + v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_13:
  if (this != (SnippetUI::SummaryItem_LargeText *)&SnippetUI::_SummaryItem_LargeText_default_instance_)
  {
    v9 = (SnippetUI::TextProperty *)*((_QWORD *)this + 4);
    if (v9)
    {
      v10 = SnippetUI::TextProperty::ByteSizeLong(v9);
      v5 = (const google::protobuf::UnknownFieldSet *)&v10[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v11 = (SnippetUI::MultilineTextProperty *)*((_QWORD *)this + 5);
    if (v11)
    {
      v12 = SnippetUI::MultilineTextProperty::ByteSizeLong(v11);
      v5 = (const google::protobuf::UnknownFieldSet *)&v12[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v12 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v13 = (SnippetUI::MultilineTextProperty *)*((_QWORD *)this + 6);
    if (v13)
    {
      v14 = SnippetUI::MultilineTextProperty::ByteSizeLong(v13);
      v5 = (const google::protobuf::UnknownFieldSet *)&v14[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v14 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v15 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 7);
    if (v15)
    {
      v16 = SnippetUI::ActionProperty::ByteSizeLong(v15);
      v5 = (const google::protobuf::UnknownFieldSet *)&v16[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v16 | 1) ^ 0x1F) + 73) >> 6)];
    }
  }
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::SummaryItem_LargeText *)((char *)this + 8), v5, (_DWORD *)this + 16);
  *((_DWORD *)this + 16) = (_DWORD)v5;
  return (char *)v5;
}

uint64_t SnippetUI::SummaryItem_LargeText::GetCachedSize(SnippetUI::SummaryItem_LargeText *this)
{
  return *((unsigned int *)this + 16);
}

google::protobuf::internal *SnippetUI::SummaryItem_LargeText::_InternalParse(SnippetUI::SummaryItem_LargeText *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  std::string **v5;
  std::string **v6;
  uint64_t *v7;
  google::protobuf::internal::ParseContext *v8;
  google::protobuf::internal *TagFallback;
  char *v10;
  SnippetUI::TextProperty *v11;
  char *v12;
  SnippetUI::MultilineTextProperty *v13;
  SnippetUI::ActionProperty *v14;
  std::string *v15;
  std::string::value_type *v16;
  google::protobuf::internal::ParseContext *v17;
  char *v18;
  BOOL v19;
  google::protobuf::internal *v21;

  v21 = a2;
  v5 = (std::string **)((char *)this + 24);
  v6 = (std::string **)((char *)this + 16);
  v7 = (uint64_t *)((char *)this + 8);
  while (2)
  {
    if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v21, *((_DWORD *)a3 + 23)) & 1) != 0)
      return v21;
    TagFallback = (google::protobuf::internal *)((char *)v21 + 1);
    v10 = (char *)*(unsigned __int8 *)v21;
    if ((*(char *)v21 & 0x80000000) == 0)
      goto LABEL_6;
    v10 = (char *)(v10 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v21 + 2);
LABEL_6:
      v21 = TagFallback;
      goto LABEL_7;
    }
    TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v21, v10);
    v21 = TagFallback;
    if (!TagFallback)
      return TagFallback;
LABEL_7:
    switch(v10 >> 3)
    {
      case 1u:
        if (v10 != 10)
          goto LABEL_33;
        v11 = (SnippetUI::TextProperty *)*((_QWORD *)this + 4);
        if (!v11)
        {
          v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
          *((_QWORD *)this + 4) = v11;
          TagFallback = v21;
        }
        v12 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::TextProperty>(a3, v11, TagFallback);
        goto LABEL_38;
      case 2u:
        if (v10 != 18)
          goto LABEL_33;
        v13 = (SnippetUI::MultilineTextProperty *)*((_QWORD *)this + 5);
        if (v13)
          goto LABEL_19;
        v13 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::MultilineTextProperty>(0);
        *((_QWORD *)this + 5) = v13;
        goto LABEL_18;
      case 3u:
        if (v10 != 26)
          goto LABEL_33;
        v13 = (SnippetUI::MultilineTextProperty *)*((_QWORD *)this + 6);
        if (v13)
          goto LABEL_19;
        v13 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::MultilineTextProperty>(0);
        *((_QWORD *)this + 6) = v13;
LABEL_18:
        TagFallback = v21;
LABEL_19:
        v12 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::MultilineTextProperty>(a3, v13, TagFallback);
        goto LABEL_38;
      case 4u:
        if (v10 != 34)
          goto LABEL_33;
        v14 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 7);
        if (!v14)
        {
          v14 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
          *((_QWORD *)this + 7) = v14;
          TagFallback = v21;
        }
        v12 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::ActionProperty>(a3, v14, TagFallback);
        goto LABEL_38;
      case 5u:
        if (v10 != 42)
          goto LABEL_33;
        v15 = *v6;
        if (*v6 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v6, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v15 = *v6;
          TagFallback = v21;
        }
        v16 = (std::string::value_type *)TagFallback;
        v17 = a3;
        v18 = "SnippetUI.SummaryItem_LargeText.component_name";
        goto LABEL_32;
      case 6u:
        if (v10 != 50)
          goto LABEL_33;
        v15 = *v5;
        if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v15 = *v5;
          TagFallback = v21;
        }
        v16 = (std::string::value_type *)TagFallback;
        v17 = a3;
        v18 = "SnippetUI.SummaryItem_LargeText.link_identifier";
LABEL_32:
        v12 = google::protobuf::internal::InlineGreedyStringParserUTF8(v15, v16, (uint64_t)v17, (google::protobuf::internal *)v18);
        goto LABEL_38;
      default:
LABEL_33:
        if ((_DWORD)v10)
          v19 = (v10 & 7) == 4;
        else
          v19 = 1;
        if (v19)
        {
          *((_DWORD *)a3 + 20) = (_DWORD)v10 - 1;
          return TagFallback;
        }
        v12 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v10, v7, TagFallback, a3, v8);
LABEL_38:
        v21 = (google::protobuf::internal *)v12;
        if (v12)
          continue;
        TagFallback = 0;
        break;
    }
    return TagFallback;
  }
}

const google::protobuf::UnknownFieldSet *SnippetUI::SummaryItem_LargeText::InternalSerializeWithCachedSizesToArray(SnippetUI::SummaryItem_LargeText *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  char *v5;
  SnippetUI::TextProperty *v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  google::protobuf::UnknownFieldSet *v11;
  _BYTE *v12;
  _BYTE *v13;
  unsigned int v14;
  unsigned int v15;
  SnippetUI::MultilineTextProperty *v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  google::protobuf::UnknownFieldSet *v20;
  _BYTE *v21;
  _BYTE *v22;
  unsigned int v23;
  unsigned int v24;
  SnippetUI::MultilineTextProperty *v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  google::protobuf::UnknownFieldSet *v29;
  _BYTE *v30;
  _BYTE *v31;
  unsigned int v32;
  unsigned int v33;
  SnippetUI::ActionProperty *v34;
  unsigned int v35;
  google::protobuf::UnknownFieldSet *v36;
  unsigned int v37;
  _BYTE *v38;
  _BYTE *v39;
  unsigned int v40;
  unsigned int v41;
  google::protobuf::internal *v42;
  const char *v43;
  google::protobuf::internal *v44;
  const char *v45;
  uint64_t v46;

  v5 = (char *)a2;
  if (this == (SnippetUI::SummaryItem_LargeText *)&SnippetUI::_SummaryItem_LargeText_default_instance_)
    goto LABEL_49;
  v7 = (SnippetUI::TextProperty *)*((_QWORD *)this + 4);
  if (v7)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
    {
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      v7 = (SnippetUI::TextProperty *)*((_QWORD *)this + 4);
    }
    *v5 = 10;
    v8 = *((_DWORD *)v7 + 15);
    if (v8 > 0x7F)
    {
      v5[1] = v8 | 0x80;
      v10 = v8 >> 7;
      if (v8 >> 14)
      {
        v12 = v5 + 2;
        do
        {
          v13 = v12;
          *v12++ = v10 | 0x80;
          v14 = v10 >> 7;
          v15 = v10 >> 14;
          v10 >>= 7;
        }
        while (v15);
        v11 = (google::protobuf::UnknownFieldSet *)(v13 + 2);
        *v12 = v14;
        goto LABEL_13;
      }
      v5[2] = v10;
      v9 = 3;
    }
    else
    {
      v5[1] = v8;
      v9 = 2;
    }
    v11 = (google::protobuf::UnknownFieldSet *)&v5[v9];
LABEL_13:
    v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v7, v11, a3, a4);
  }
  v16 = (SnippetUI::MultilineTextProperty *)*((_QWORD *)this + 5);
  if (!v16)
    goto LABEL_26;
  if ((unint64_t)v5 >= *(_QWORD *)a3)
  {
    v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v16 = (SnippetUI::MultilineTextProperty *)*((_QWORD *)this + 5);
  }
  *v5 = 18;
  v17 = *((_DWORD *)v16 + 15);
  if (v17 > 0x7F)
  {
    v5[1] = v17 | 0x80;
    v19 = v17 >> 7;
    if (v17 >> 14)
    {
      v21 = v5 + 2;
      do
      {
        v22 = v21;
        *v21++ = v19 | 0x80;
        v23 = v19 >> 7;
        v24 = v19 >> 14;
        v19 >>= 7;
      }
      while (v24);
      v20 = (google::protobuf::UnknownFieldSet *)(v22 + 2);
      *v21 = v23;
      goto LABEL_25;
    }
    v5[2] = v19;
    v18 = 3;
  }
  else
  {
    v5[1] = v17;
    v18 = 2;
  }
  v20 = (google::protobuf::UnknownFieldSet *)&v5[v18];
LABEL_25:
  v5 = (char *)SnippetUI::MultilineTextProperty::InternalSerializeWithCachedSizesToArray(v16, v20, a3, a4);
LABEL_26:
  v25 = (SnippetUI::MultilineTextProperty *)*((_QWORD *)this + 6);
  if (!v25)
    goto LABEL_38;
  if ((unint64_t)v5 >= *(_QWORD *)a3)
  {
    v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v25 = (SnippetUI::MultilineTextProperty *)*((_QWORD *)this + 6);
  }
  *v5 = 26;
  v26 = *((_DWORD *)v25 + 15);
  if (v26 > 0x7F)
  {
    v5[1] = v26 | 0x80;
    v28 = v26 >> 7;
    if (v26 >> 14)
    {
      v30 = v5 + 2;
      do
      {
        v31 = v30;
        *v30++ = v28 | 0x80;
        v32 = v28 >> 7;
        v33 = v28 >> 14;
        v28 >>= 7;
      }
      while (v33);
      v29 = (google::protobuf::UnknownFieldSet *)(v31 + 2);
      *v30 = v32;
      goto LABEL_37;
    }
    v5[2] = v28;
    v27 = 3;
  }
  else
  {
    v5[1] = v26;
    v27 = 2;
  }
  v29 = (google::protobuf::UnknownFieldSet *)&v5[v27];
LABEL_37:
  v5 = (char *)SnippetUI::MultilineTextProperty::InternalSerializeWithCachedSizesToArray(v25, v29, a3, a4);
LABEL_38:
  v34 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 7);
  if (v34)
  {
    if ((unint64_t)v5 >= *(_QWORD *)a3)
    {
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
      v34 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 7);
    }
    *v5 = 34;
    v35 = *((_DWORD *)v34 + 12);
    if (v35 > 0x7F)
    {
      v5[1] = v35 | 0x80;
      v37 = v35 >> 7;
      if (v35 >> 14)
      {
        v38 = v5 + 2;
        do
        {
          v39 = v38;
          *v38++ = v37 | 0x80;
          v40 = v37 >> 7;
          v41 = v37 >> 14;
          v37 >>= 7;
        }
        while (v41);
        v36 = (google::protobuf::UnknownFieldSet *)(v39 + 2);
        *v38 = v40;
      }
      else
      {
        v5[2] = v37;
        v36 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
      }
    }
    else
    {
      v5[1] = v35;
      v36 = (google::protobuf::UnknownFieldSet *)(v5 + 2);
    }
    v5 = (char *)SnippetUI::ActionProperty::InternalSerializeWithCachedSizesToArray(v34, v36, a3, a4);
  }
LABEL_49:
  v42 = (google::protobuf::internal *)*((_QWORD *)this + 2);
  if (*((char *)v42 + 23) < 0)
  {
    v43 = (const char *)*((_QWORD *)v42 + 1);
    if (!v43)
      goto LABEL_55;
    v42 = *(google::protobuf::internal **)v42;
    goto LABEL_54;
  }
  v43 = (const char *)*((unsigned __int8 *)v42 + 23);
  if (*((_BYTE *)v42 + 23))
  {
LABEL_54:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v42, v43, 1, (google::protobuf::internal *)"SnippetUI.SummaryItem_LargeText.component_name");
    v5 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 5, *((_QWORD *)this + 2), v5);
  }
LABEL_55:
  v44 = (google::protobuf::internal *)*((_QWORD *)this + 3);
  if (*((char *)v44 + 23) < 0)
  {
    v45 = (const char *)*((_QWORD *)v44 + 1);
    if (!v45)
      goto LABEL_61;
    v44 = *(google::protobuf::internal **)v44;
    goto LABEL_60;
  }
  v45 = (const char *)*((unsigned __int8 *)v44 + 23);
  if (*((_BYTE *)v44 + 23))
  {
LABEL_60:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v44, v45, 1, (google::protobuf::internal *)"SnippetUI.SummaryItem_LargeText.link_identifier");
    v5 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 6, *((_QWORD *)this + 3), v5);
  }
LABEL_61:
  v46 = *((_QWORD *)this + 1);
  if ((v46 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v46 & 0xFFFFFFFFFFFFFFFELL), (const google::protobuf::UnknownFieldSet *)v5, a3, a4);
  else
    return (const google::protobuf::UnknownFieldSet *)v5;
}

void SnippetUI::SummaryItem_LargeText::CopyFrom(SnippetUI::SummaryItem_LargeText *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    SnippetUI::SummaryItem_LargeText::Clear(this);
    SnippetUI::SummaryItem_LargeText::MergeFrom(this, a2);
  }
}

void SnippetUI::SummaryItem_LargeText::MergeFrom(SnippetUI::SummaryItem_LargeText *this, const google::protobuf::Message *lpsrc)
{
  std::string *v4;
  const SnippetUI::SummaryItem_LargeText *v5;
  google::protobuf::Message *v6;
  char v7;
  std::string v8[2];

  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/SummaryItem.pb.cc", 2822);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5)
    SnippetUI::SummaryItem_LargeText::MergeFrom(this, v5);
  else
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
}

void sub_1BF937A00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::SummaryItem_LargeText::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 64) = a2;
  return this;
}

uint64_t SnippetUI::SummaryItem_LargeText::GetMetadata(SnippetUI::SummaryItem_LargeText *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_SummaryItem_2eproto);
  return qword_1EF5819A0;
}

void *SnippetUI::SummaryItem_LargeText::default_instance(SnippetUI::SummaryItem_LargeText *this)
{
  if (atomic_load(scc_info_SummaryItem_LargeText_SummaryItem_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_SummaryItem_LargeText_SummaryItem_2eproto);
  return &SnippetUI::_SummaryItem_LargeText_default_instance_;
}

void SnippetUI::SummaryItem_LargeText::MergeFrom(SnippetUI::SummaryItem_LargeText *this, const SnippetUI::SummaryItem_LargeText *a2)
{
  std::string *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  int **v10;
  int **v11;
  int **v12;
  int **v13;
  int **v14;
  int **v15;
  int **v16;
  int **v17;
  int **v18;
  int **v19;
  int **v20;
  int **v21;
  char v22;
  std::string v23[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v23, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/SummaryItem.pb.cc", 2837);
    v4 = google::protobuf::internal::LogMessage::operator<<(v23, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v22, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v23[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::SummaryItem_LargeText *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  v6 = *((_QWORD *)a2 + 2);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(_QWORD *)(v6 + 8))
      goto LABEL_13;
  }
  else if (!*(_BYTE *)(v6 + 23))
  {
    goto LABEL_13;
  }
  v7 = (uint64_t *)*((_QWORD *)this + 2);
  if (v7 != (uint64_t *)v6)
  {
    if (v7 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, v6);
    else
      std::string::operator=(*((std::string **)this + 2), (const std::string *)v6);
  }
LABEL_13:
  v8 = *((_QWORD *)a2 + 3);
  if (*(char *)(v8 + 23) < 0)
  {
    if (!*(_QWORD *)(v8 + 8))
      goto LABEL_21;
  }
  else if (!*(_BYTE *)(v8 + 23))
  {
    goto LABEL_21;
  }
  v9 = (uint64_t *)*((_QWORD *)this + 3);
  if (v9 != (uint64_t *)v8)
  {
    if (v9 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 3, v8);
    else
      std::string::operator=(*((std::string **)this + 3), (const std::string *)v8);
  }
LABEL_21:
  if (a2 != (const SnippetUI::SummaryItem_LargeText *)&SnippetUI::_SummaryItem_LargeText_default_instance_)
  {
    v10 = (int **)*((_QWORD *)a2 + 4);
    if (v10)
    {
      v11 = (int **)*((_QWORD *)this + 4);
      if (!v11)
      {
        v11 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 4) = v11;
        v10 = (int **)*((_QWORD *)a2 + 4);
      }
      if (v10)
        v12 = v10;
      else
        v12 = (int **)&SnippetUI::_TextProperty_default_instance_;
      SnippetUI::TextProperty::MergeFrom(v11, v12);
    }
    v13 = (int **)*((_QWORD *)a2 + 5);
    if (v13)
    {
      v14 = (int **)*((_QWORD *)this + 5);
      if (!v14)
      {
        v14 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::MultilineTextProperty>(0);
        *((_QWORD *)this + 5) = v14;
        v13 = (int **)*((_QWORD *)a2 + 5);
      }
      if (v13)
        v15 = v13;
      else
        v15 = (int **)&SnippetUI::_MultilineTextProperty_default_instance_;
      SnippetUI::MultilineTextProperty::MergeFrom(v14, v15);
    }
    v16 = (int **)*((_QWORD *)a2 + 6);
    if (v16)
    {
      v17 = (int **)*((_QWORD *)this + 6);
      if (!v17)
      {
        v17 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::MultilineTextProperty>(0);
        *((_QWORD *)this + 6) = v17;
        v16 = (int **)*((_QWORD *)a2 + 6);
      }
      if (v16)
        v18 = v16;
      else
        v18 = (int **)&SnippetUI::_MultilineTextProperty_default_instance_;
      SnippetUI::MultilineTextProperty::MergeFrom(v17, v18);
    }
    v19 = (int **)*((_QWORD *)a2 + 7);
    if (v19)
    {
      v20 = (int **)*((_QWORD *)this + 7);
      if (!v20)
      {
        v20 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
        *((_QWORD *)this + 7) = v20;
        v19 = (int **)*((_QWORD *)a2 + 7);
      }
      if (v19)
        v21 = v19;
      else
        v21 = (int **)&SnippetUI::_ActionProperty_default_instance_;
      SnippetUI::ActionProperty::MergeFrom(v20, v21);
    }
  }
}

void sub_1BF937C70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

SnippetUI::SummaryItem_LargeText *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::SummaryItem_LargeText>(google::protobuf::internal::ArenaImpl *this)
{
  SnippetUI::SummaryItem_LargeText *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (SnippetUI::SummaryItem_LargeText *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x48uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::SummaryItem_LargeText>);
    SnippetUI::SummaryItem_LargeText::SummaryItem_LargeText(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (SnippetUI::SummaryItem_LargeText *)operator new();
    SnippetUI::SummaryItem_LargeText::SummaryItem_LargeText(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_1BF937D0C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D890](v1, 0x10A1C4025EBE0BELL);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::SummaryItem_LargeText>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

void InitDefaultsscc_info_SummaryItem_DetailedText_SummaryItem_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/SummaryItem.pb.cc", a4);
  SnippetUI::SummaryItem_DetailedText::SummaryItem_DetailedText((SnippetUI::SummaryItem_DetailedText *)&SnippetUI::_SummaryItem_DetailedText_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_SummaryItem_DetailedText_default_instance_, v4);
  qword_1ED1D4C50 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1ED1D4C58 = &SnippetUI::_TextProperty_default_instance_;
  qword_1ED1D4C60 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1ED1D4C68 = &SnippetUI::_TextProperty_default_instance_;
  qword_1ED1D4C70 = (uint64_t)&SnippetUI::_MultilineTextProperty_default_instance_;
  unk_1ED1D4C78 = &SnippetUI::_VisualProperty_default_instance_;
  qword_1ED1D4C80 = (uint64_t)&SnippetUI::_ActionProperty_default_instance_;
  unk_1ED1D4C88 = &SnippetUI::_TextProperty_default_instance_;
}

SnippetUI::SummaryItem_DetailedText *SnippetUI::SummaryItem_DetailedText::SummaryItem_DetailedText(SnippetUI::SummaryItem_DetailedText *this)
{
  *(_QWORD *)this = &off_1E792E170;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 24) = 0;
  if (atomic_load(scc_info_SummaryItem_DetailedText_SummaryItem_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_SummaryItem_DetailedText_SummaryItem_2eproto);
  *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  return this;
}

void sub_1BF937F44(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::SummaryItem_DetailedText::~SummaryItem_DetailedText(SnippetUI::SummaryItem_DetailedText *this)
{
  SnippetUI::SummaryItem_DetailedText::~SummaryItem_DetailedText(this);
  JUMPOUT(0x1C3B8D890);
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)this = &off_1E792E170;
  v2 = *((_QWORD *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x1C3B8D890](v2, 0x1012C40EC159624);
  }
  v4 = *((_QWORD *)this + 3);
  if ((uint64_t *)v4 != &google::protobuf::internal::fixed_address_empty_string && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0)
      operator delete(*(void **)v4);
    MEMORY[0x1C3B8D890](v4, 0x1012C40EC159624);
  }
  if (this != (SnippetUI::SummaryItem_DetailedText *)&SnippetUI::_SummaryItem_DetailedText_default_instance_)
  {
    v6 = *((_QWORD *)this + 4);
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    v7 = *((_QWORD *)this + 5);
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    v8 = *((_QWORD *)this + 6);
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    v9 = *((_QWORD *)this + 7);
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    v10 = *((_QWORD *)this + 8);
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    v11 = *((_QWORD *)this + 9);
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = *((_QWORD *)this + 10);
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    v13 = *((_QWORD *)this + 11);
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

SnippetUI::SummaryItem_DetailedText *SnippetUI::SummaryItem_DetailedText::New(SnippetUI::SummaryItem_DetailedText *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::SummaryItem_DetailedText>(0);
}

SnippetUI::SummaryItem_DetailedText *SnippetUI::SummaryItem_DetailedText::New(SnippetUI::SummaryItem_DetailedText *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::SummaryItem_DetailedText>(a2);
}

void SnippetUI::SummaryItem_DetailedText::Clear(SnippetUI::SummaryItem_DetailedText *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  google::protobuf::internal::InternalMetadataWithArena *v12;
  char v13;

  v2 = *((_QWORD *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(_BYTE **)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v2 = 0;
      *(_BYTE *)(v2 + 23) = 0;
    }
  }
  v3 = *((_QWORD *)this + 3);
  if ((uint64_t *)v3 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v3 + 23) < 0)
    {
      **(_BYTE **)v3 = 0;
      *(_QWORD *)(v3 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v3 = 0;
      *(_BYTE *)(v3 + 23) = 0;
    }
  }
  v4 = *((_QWORD *)this + 4);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  *((_QWORD *)this + 4) = 0;
  v5 = *((_QWORD *)this + 5);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *((_QWORD *)this + 5) = 0;
  v6 = *((_QWORD *)this + 6);
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  *((_QWORD *)this + 6) = 0;
  v7 = *((_QWORD *)this + 7);
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  *((_QWORD *)this + 7) = 0;
  v8 = *((_QWORD *)this + 8);
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  *((_QWORD *)this + 8) = 0;
  v9 = *((_QWORD *)this + 9);
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  *((_QWORD *)this + 9) = 0;
  v10 = *((_QWORD *)this + 10);
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  *((_QWORD *)this + 10) = 0;
  v11 = *((_QWORD *)this + 11);
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v13 = *((_BYTE *)this + 8);
  v12 = (SnippetUI::SummaryItem_DetailedText *)((char *)this + 8);
  *((_QWORD *)v12 + 10) = 0;
  if ((v13 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v12);
}

uint64_t SnippetUI::SummaryItem_DetailedText::IsInitialized(SnippetUI::SummaryItem_DetailedText *this)
{
  return 1;
}

char *SnippetUI::SummaryItem_DetailedText::ByteSizeLong(SnippetUI::SummaryItem_DetailedText *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  const google::protobuf::UnknownFieldSet *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  SnippetUI::TextProperty *v9;
  char *v10;
  SnippetUI::TextProperty *v11;
  char *v12;
  SnippetUI::TextProperty *v13;
  char *v14;
  SnippetUI::TextProperty *v15;
  char *v16;
  SnippetUI::MultilineTextProperty *v17;
  char *v18;
  SnippetUI::VisualProperty *v19;
  char *v20;
  SnippetUI::ActionProperty *v21;
  char *v22;
  SnippetUI::TextProperty *v23;
  char *v24;

  v2 = *((_QWORD *)this + 2);
  v3 = *(unsigned __int8 *)(v2 + 23);
  if (*(char *)(v2 + 23) < 0)
  {
    if (*(_QWORD *)(v2 + 8))
      goto LABEL_3;
LABEL_7:
    v5 = 0;
    goto LABEL_8;
  }
  if (!*(_BYTE *)(v2 + 23))
    goto LABEL_7;
LABEL_3:
  v4 = *(_QWORD *)(v2 + 8);
  if ((v3 & 0x80u) == 0)
    v4 = v3;
  v5 = (const google::protobuf::UnknownFieldSet *)(v4 + ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_8:
  v6 = *((_QWORD *)this + 3);
  v7 = *(unsigned __int8 *)(v6 + 23);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(_QWORD *)(v6 + 8))
      goto LABEL_13;
  }
  else if (!*(_BYTE *)(v6 + 23))
  {
    goto LABEL_13;
  }
  v8 = *(_QWORD *)(v6 + 8);
  if ((v7 & 0x80u) == 0)
    v8 = v7;
  v5 = (const google::protobuf::UnknownFieldSet *)((char *)v5 + v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_13:
  if (this != (SnippetUI::SummaryItem_DetailedText *)&SnippetUI::_SummaryItem_DetailedText_default_instance_)
  {
    v9 = (SnippetUI::TextProperty *)*((_QWORD *)this + 4);
    if (v9)
    {
      v10 = SnippetUI::TextProperty::ByteSizeLong(v9);
      v5 = (const google::protobuf::UnknownFieldSet *)&v10[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v11 = (SnippetUI::TextProperty *)*((_QWORD *)this + 5);
    if (v11)
    {
      v12 = SnippetUI::TextProperty::ByteSizeLong(v11);
      v5 = (const google::protobuf::UnknownFieldSet *)&v12[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v12 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v13 = (SnippetUI::TextProperty *)*((_QWORD *)this + 6);
    if (v13)
    {
      v14 = SnippetUI::TextProperty::ByteSizeLong(v13);
      v5 = (const google::protobuf::UnknownFieldSet *)&v14[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v14 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v15 = (SnippetUI::TextProperty *)*((_QWORD *)this + 7);
    if (v15)
    {
      v16 = SnippetUI::TextProperty::ByteSizeLong(v15);
      v5 = (const google::protobuf::UnknownFieldSet *)&v16[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v16 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v17 = (SnippetUI::MultilineTextProperty *)*((_QWORD *)this + 8);
    if (v17)
    {
      v18 = SnippetUI::MultilineTextProperty::ByteSizeLong(v17);
      v5 = (const google::protobuf::UnknownFieldSet *)&v18[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v18 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v19 = (SnippetUI::VisualProperty *)*((_QWORD *)this + 9);
    if (v19)
    {
      v20 = SnippetUI::VisualProperty::ByteSizeLong(v19);
      v5 = (const google::protobuf::UnknownFieldSet *)&v20[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v20 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v21 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 10);
    if (v21)
    {
      v22 = SnippetUI::ActionProperty::ByteSizeLong(v21);
      v5 = (const google::protobuf::UnknownFieldSet *)&v22[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v22 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v23 = (SnippetUI::TextProperty *)*((_QWORD *)this + 11);
    if (v23)
    {
      v24 = SnippetUI::TextProperty::ByteSizeLong(v23);
      v5 = (const google::protobuf::UnknownFieldSet *)&v24[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v24 | 1) ^ 0x1F) + 73) >> 6)];
    }
  }
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::SummaryItem_DetailedText *)((char *)this + 8), v5, (_DWORD *)this + 24);
  *((_DWORD *)this + 24) = (_DWORD)v5;
  return (char *)v5;
}

uint64_t SnippetUI::SummaryItem_DetailedText::GetCachedSize(SnippetUI::SummaryItem_DetailedText *this)
{
  return *((unsigned int *)this + 24);
}

google::protobuf::internal *SnippetUI::SummaryItem_DetailedText::_InternalParse(SnippetUI::SummaryItem_DetailedText *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  std::string **v5;
  std::string **v6;
  uint64_t *v7;
  google::protobuf::internal::ParseContext *v8;
  google::protobuf::internal *TagFallback;
  char *v10;
  SnippetUI::TextProperty *v11;
  SnippetUI::MultilineTextProperty *v12;
  char *v13;
  SnippetUI::VisualProperty *v14;
  SnippetUI::ActionProperty *v15;
  std::string *v16;
  std::string::value_type *v17;
  google::protobuf::internal::ParseContext *v18;
  char *v19;
  BOOL v20;
  google::protobuf::internal *v22;

  v22 = a2;
  v5 = (std::string **)((char *)this + 24);
  v6 = (std::string **)((char *)this + 16);
  v7 = (uint64_t *)((char *)this + 8);
  while (2)
  {
    if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v22, *((_DWORD *)a3 + 23)) & 1) != 0)
      return v22;
    TagFallback = (google::protobuf::internal *)((char *)v22 + 1);
    v10 = (char *)*(unsigned __int8 *)v22;
    if ((*(char *)v22 & 0x80000000) == 0)
      goto LABEL_6;
    v10 = (char *)(v10 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v22 + 2);
LABEL_6:
      v22 = TagFallback;
      goto LABEL_7;
    }
    TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v22, v10);
    v22 = TagFallback;
    if (!TagFallback)
      return TagFallback;
LABEL_7:
    switch(v10 >> 3)
    {
      case 1u:
        if (v10 != 10)
          goto LABEL_48;
        v11 = (SnippetUI::TextProperty *)*((_QWORD *)this + 4);
        if (v11)
          goto LABEL_42;
        v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 4) = v11;
        goto LABEL_41;
      case 2u:
        if (v10 != 18)
          goto LABEL_48;
        v11 = (SnippetUI::TextProperty *)*((_QWORD *)this + 5);
        if (v11)
          goto LABEL_42;
        v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 5) = v11;
        goto LABEL_41;
      case 3u:
        if (v10 != 26)
          goto LABEL_48;
        v11 = (SnippetUI::TextProperty *)*((_QWORD *)this + 6);
        if (v11)
          goto LABEL_42;
        v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 6) = v11;
        goto LABEL_41;
      case 4u:
        if (v10 != 34)
          goto LABEL_48;
        v11 = (SnippetUI::TextProperty *)*((_QWORD *)this + 7);
        if (v11)
          goto LABEL_42;
        v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 7) = v11;
        goto LABEL_41;
      case 5u:
        if (v10 != 42)
          goto LABEL_48;
        v12 = (SnippetUI::MultilineTextProperty *)*((_QWORD *)this + 8);
        if (!v12)
        {
          v12 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::MultilineTextProperty>(0);
          *((_QWORD *)this + 8) = v12;
          TagFallback = v22;
        }
        v13 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::MultilineTextProperty>(a3, v12, TagFallback);
        goto LABEL_53;
      case 6u:
        if (v10 != 50)
          goto LABEL_48;
        v14 = (SnippetUI::VisualProperty *)*((_QWORD *)this + 9);
        if (!v14)
        {
          v14 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::VisualProperty>(0);
          *((_QWORD *)this + 9) = v14;
          TagFallback = v22;
        }
        v13 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::VisualProperty>(a3, v14, TagFallback);
        goto LABEL_53;
      case 7u:
        if (v10 != 58)
          goto LABEL_48;
        v15 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 10);
        if (!v15)
        {
          v15 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
          *((_QWORD *)this + 10) = v15;
          TagFallback = v22;
        }
        v13 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::ActionProperty>(a3, v15, TagFallback);
        goto LABEL_53;
      case 8u:
        if (v10 != 66)
          goto LABEL_48;
        v16 = *v6;
        if (*v6 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v6, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v16 = *v6;
          TagFallback = v22;
        }
        v17 = (std::string::value_type *)TagFallback;
        v18 = a3;
        v19 = "SnippetUI.SummaryItem_DetailedText.component_name";
        goto LABEL_47;
      case 9u:
        if (v10 != 74)
          goto LABEL_48;
        v11 = (SnippetUI::TextProperty *)*((_QWORD *)this + 11);
        if (v11)
          goto LABEL_42;
        v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 11) = v11;
LABEL_41:
        TagFallback = v22;
LABEL_42:
        v13 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::TextProperty>(a3, v11, TagFallback);
        goto LABEL_53;
      case 0xAu:
        if (v10 != 82)
          goto LABEL_48;
        v16 = *v5;
        if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v16 = *v5;
          TagFallback = v22;
        }
        v17 = (std::string::value_type *)TagFallback;
        v18 = a3;
        v19 = "SnippetUI.SummaryItem_DetailedText.link_identifier";
LABEL_47:
        v13 = google::protobuf::internal::InlineGreedyStringParserUTF8(v16, v17, (uint64_t)v18, (google::protobuf::internal *)v19);
        goto LABEL_53;
      default:
LABEL_48:
        if ((_DWORD)v10)
          v20 = (v10 & 7) == 4;
        else
          v20 = 1;
        if (v20)
        {
          *((_DWORD *)a3 + 20) = (_DWORD)v10 - 1;
          return TagFallback;
        }
        v13 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v10, v7, TagFallback, a3, v8);
LABEL_53:
        v22 = (google::protobuf::internal *)v13;
        if (v13)
          continue;
        TagFallback = 0;
        break;
    }
    return TagFallback;
  }
}

const google::protobuf::UnknownFieldSet *SnippetUI::SummaryItem_DetailedText::InternalSerializeWithCachedSizesToArray(SnippetUI::SummaryItem_DetailedText *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  char *v5;
  SnippetUI::TextProperty *v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  google::protobuf::UnknownFieldSet *v11;
  _BYTE *v12;
  _BYTE *v13;
  unsigned int v14;
  unsigned int v15;
  SnippetUI::TextProperty *v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  google::protobuf::UnknownFieldSet *v20;
  _BYTE *v21;
  _BYTE *v22;
  unsigned int v23;
  unsigned int v24;
  SnippetUI::TextProperty *v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  google::protobuf::UnknownFieldSet *v29;
  _BYTE *v30;
  _BYTE *v31;
  unsigned int v32;
  unsigned int v33;
  SnippetUI::TextProperty *v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int v37;
  google::protobuf::UnknownFieldSet *v38;
  _BYTE *v39;
  _BYTE *v40;
  unsigned int v41;
  unsigned int v42;
  SnippetUI::MultilineTextProperty *v43;
  unsigned int v44;
  uint64_t v45;
  unsigned int v46;
  google::protobuf::UnknownFieldSet *v47;
  _BYTE *v48;
  _BYTE *v49;
  unsigned int v50;
  unsigned int v51;
  SnippetUI::VisualProperty *v52;
  unsigned int v53;
  uint64_t v54;
  unsigned int v55;
  google::protobuf::UnknownFieldSet *v56;
  _BYTE *v57;
  _BYTE *v58;
  unsigned int v59;
  unsigned int v60;
  SnippetUI::ActionProperty *v61;
  unsigned int v62;
  google::protobuf::UnknownFieldSet *v63;
  unsigned int v64;
  _BYTE *v65;
  _BYTE *v66;
  unsigned int v67;
  unsigned int v68;
  uint64_t *v69;
  const char *v70;
  SnippetUI::TextProperty *v71;
  unsigned int v72;
  google::protobuf::UnknownFieldSet *v73;
  unsigned int v74;
  _BYTE *v75;
  _BYTE *v76;
  unsigned int v77;
  unsigned int v78;
  google::protobuf::internal *v79;
  const char *v80;
  uint64_t v81;

  v5 = (char *)a2;
  if (this == (SnippetUI::SummaryItem_DetailedText *)&SnippetUI::_SummaryItem_DetailedText_default_instance_)
    goto LABEL_85;
  v7 = (SnippetUI::TextProperty *)*((_QWORD *)this + 4);
  if (v7)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
    {
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      v7 = (SnippetUI::TextProperty *)*((_QWORD *)this + 4);
    }
    *v5 = 10;
    v8 = *((_DWORD *)v7 + 15);
    if (v8 > 0x7F)
    {
      v5[1] = v8 | 0x80;
      v10 = v8 >> 7;
      if (v8 >> 14)
      {
        v12 = v5 + 2;
        do
        {
          v13 = v12;
          *v12++ = v10 | 0x80;
          v14 = v10 >> 7;
          v15 = v10 >> 14;
          v10 >>= 7;
        }
        while (v15);
        v11 = (google::protobuf::UnknownFieldSet *)(v13 + 2);
        *v12 = v14;
        goto LABEL_13;
      }
      v5[2] = v10;
      v9 = 3;
    }
    else
    {
      v5[1] = v8;
      v9 = 2;
    }
    v11 = (google::protobuf::UnknownFieldSet *)&v5[v9];
LABEL_13:
    v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v7, v11, a3, a4);
  }
  v16 = (SnippetUI::TextProperty *)*((_QWORD *)this + 5);
  if (!v16)
    goto LABEL_26;
  if ((unint64_t)v5 >= *(_QWORD *)a3)
  {
    v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v16 = (SnippetUI::TextProperty *)*((_QWORD *)this + 5);
  }
  *v5 = 18;
  v17 = *((_DWORD *)v16 + 15);
  if (v17 > 0x7F)
  {
    v5[1] = v17 | 0x80;
    v19 = v17 >> 7;
    if (v17 >> 14)
    {
      v21 = v5 + 2;
      do
      {
        v22 = v21;
        *v21++ = v19 | 0x80;
        v23 = v19 >> 7;
        v24 = v19 >> 14;
        v19 >>= 7;
      }
      while (v24);
      v20 = (google::protobuf::UnknownFieldSet *)(v22 + 2);
      *v21 = v23;
      goto LABEL_25;
    }
    v5[2] = v19;
    v18 = 3;
  }
  else
  {
    v5[1] = v17;
    v18 = 2;
  }
  v20 = (google::protobuf::UnknownFieldSet *)&v5[v18];
LABEL_25:
  v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v16, v20, a3, a4);
LABEL_26:
  v25 = (SnippetUI::TextProperty *)*((_QWORD *)this + 6);
  if (!v25)
    goto LABEL_38;
  if ((unint64_t)v5 >= *(_QWORD *)a3)
  {
    v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v25 = (SnippetUI::TextProperty *)*((_QWORD *)this + 6);
  }
  *v5 = 26;
  v26 = *((_DWORD *)v25 + 15);
  if (v26 > 0x7F)
  {
    v5[1] = v26 | 0x80;
    v28 = v26 >> 7;
    if (v26 >> 14)
    {
      v30 = v5 + 2;
      do
      {
        v31 = v30;
        *v30++ = v28 | 0x80;
        v32 = v28 >> 7;
        v33 = v28 >> 14;
        v28 >>= 7;
      }
      while (v33);
      v29 = (google::protobuf::UnknownFieldSet *)(v31 + 2);
      *v30 = v32;
      goto LABEL_37;
    }
    v5[2] = v28;
    v27 = 3;
  }
  else
  {
    v5[1] = v26;
    v27 = 2;
  }
  v29 = (google::protobuf::UnknownFieldSet *)&v5[v27];
LABEL_37:
  v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v25, v29, a3, a4);
LABEL_38:
  v34 = (SnippetUI::TextProperty *)*((_QWORD *)this + 7);
  if (!v34)
    goto LABEL_50;
  if ((unint64_t)v5 >= *(_QWORD *)a3)
  {
    v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v34 = (SnippetUI::TextProperty *)*((_QWORD *)this + 7);
  }
  *v5 = 34;
  v35 = *((_DWORD *)v34 + 15);
  if (v35 > 0x7F)
  {
    v5[1] = v35 | 0x80;
    v37 = v35 >> 7;
    if (v35 >> 14)
    {
      v39 = v5 + 2;
      do
      {
        v40 = v39;
        *v39++ = v37 | 0x80;
        v41 = v37 >> 7;
        v42 = v37 >> 14;
        v37 >>= 7;
      }
      while (v42);
      v38 = (google::protobuf::UnknownFieldSet *)(v40 + 2);
      *v39 = v41;
      goto LABEL_49;
    }
    v5[2] = v37;
    v36 = 3;
  }
  else
  {
    v5[1] = v35;
    v36 = 2;
  }
  v38 = (google::protobuf::UnknownFieldSet *)&v5[v36];
LABEL_49:
  v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v34, v38, a3, a4);
LABEL_50:
  v43 = (SnippetUI::MultilineTextProperty *)*((_QWORD *)this + 8);
  if (!v43)
    goto LABEL_62;
  if ((unint64_t)v5 >= *(_QWORD *)a3)
  {
    v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v43 = (SnippetUI::MultilineTextProperty *)*((_QWORD *)this + 8);
  }
  *v5 = 42;
  v44 = *((_DWORD *)v43 + 15);
  if (v44 > 0x7F)
  {
    v5[1] = v44 | 0x80;
    v46 = v44 >> 7;
    if (v44 >> 14)
    {
      v48 = v5 + 2;
      do
      {
        v49 = v48;
        *v48++ = v46 | 0x80;
        v50 = v46 >> 7;
        v51 = v46 >> 14;
        v46 >>= 7;
      }
      while (v51);
      v47 = (google::protobuf::UnknownFieldSet *)(v49 + 2);
      *v48 = v50;
      goto LABEL_61;
    }
    v5[2] = v46;
    v45 = 3;
  }
  else
  {
    v5[1] = v44;
    v45 = 2;
  }
  v47 = (google::protobuf::UnknownFieldSet *)&v5[v45];
LABEL_61:
  v5 = (char *)SnippetUI::MultilineTextProperty::InternalSerializeWithCachedSizesToArray(v43, v47, a3, a4);
LABEL_62:
  v52 = (SnippetUI::VisualProperty *)*((_QWORD *)this + 9);
  if (!v52)
    goto LABEL_74;
  if ((unint64_t)v5 >= *(_QWORD *)a3)
  {
    v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v52 = (SnippetUI::VisualProperty *)*((_QWORD *)this + 9);
  }
  *v5 = 50;
  v53 = *((_DWORD *)v52 + 15);
  if (v53 > 0x7F)
  {
    v5[1] = v53 | 0x80;
    v55 = v53 >> 7;
    if (v53 >> 14)
    {
      v57 = v5 + 2;
      do
      {
        v58 = v57;
        *v57++ = v55 | 0x80;
        v59 = v55 >> 7;
        v60 = v55 >> 14;
        v55 >>= 7;
      }
      while (v60);
      v56 = (google::protobuf::UnknownFieldSet *)(v58 + 2);
      *v57 = v59;
      goto LABEL_73;
    }
    v5[2] = v55;
    v54 = 3;
  }
  else
  {
    v5[1] = v53;
    v54 = 2;
  }
  v56 = (google::protobuf::UnknownFieldSet *)&v5[v54];
LABEL_73:
  v5 = (char *)SnippetUI::VisualProperty::InternalSerializeWithCachedSizesToArray(v52, v56, a3, a4);
LABEL_74:
  v61 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 10);
  if (v61)
  {
    if ((unint64_t)v5 >= *(_QWORD *)a3)
    {
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
      v61 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 10);
    }
    *v5 = 58;
    v62 = *((_DWORD *)v61 + 12);
    if (v62 > 0x7F)
    {
      v5[1] = v62 | 0x80;
      v64 = v62 >> 7;
      if (v62 >> 14)
      {
        v65 = v5 + 2;
        do
        {
          v66 = v65;
          *v65++ = v64 | 0x80;
          v67 = v64 >> 7;
          v68 = v64 >> 14;
          v64 >>= 7;
        }
        while (v68);
        v63 = (google::protobuf::UnknownFieldSet *)(v66 + 2);
        *v65 = v67;
      }
      else
      {
        v5[2] = v64;
        v63 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
      }
    }
    else
    {
      v5[1] = v62;
      v63 = (google::protobuf::UnknownFieldSet *)(v5 + 2);
    }
    v5 = (char *)SnippetUI::ActionProperty::InternalSerializeWithCachedSizesToArray(v61, v63, a3, a4);
  }
LABEL_85:
  v69 = (uint64_t *)*((_QWORD *)this + 2);
  if ((*((char *)v69 + 23) & 0x80000000) == 0)
  {
    v70 = (const char *)*((unsigned __int8 *)v69 + 23);
    if (!*((_BYTE *)v69 + 23))
      goto LABEL_91;
    goto LABEL_90;
  }
  v70 = (const char *)v69[1];
  if (v70)
  {
    v69 = (uint64_t *)*v69;
LABEL_90:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String((google::protobuf::internal *)v69, v70, 1, (google::protobuf::internal *)"SnippetUI.SummaryItem_DetailedText.component_name");
    v5 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 8, *((_QWORD *)this + 2), v5);
  }
LABEL_91:
  if (this != (SnippetUI::SummaryItem_DetailedText *)&SnippetUI::_SummaryItem_DetailedText_default_instance_)
  {
    v71 = (SnippetUI::TextProperty *)*((_QWORD *)this + 11);
    if (v71)
    {
      if ((unint64_t)v5 >= *(_QWORD *)a3)
      {
        v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
        v71 = (SnippetUI::TextProperty *)*((_QWORD *)this + 11);
      }
      *v5 = 74;
      v72 = *((_DWORD *)v71 + 15);
      if (v72 > 0x7F)
      {
        v5[1] = v72 | 0x80;
        v74 = v72 >> 7;
        if (v72 >> 14)
        {
          v75 = v5 + 2;
          do
          {
            v76 = v75;
            *v75++ = v74 | 0x80;
            v77 = v74 >> 7;
            v78 = v74 >> 14;
            v74 >>= 7;
          }
          while (v78);
          v73 = (google::protobuf::UnknownFieldSet *)(v76 + 2);
          *v75 = v77;
        }
        else
        {
          v5[2] = v74;
          v73 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
        }
      }
      else
      {
        v5[1] = v72;
        v73 = (google::protobuf::UnknownFieldSet *)(v5 + 2);
      }
      v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v71, v73, a3, a4);
    }
  }
  v79 = (google::protobuf::internal *)*((_QWORD *)this + 3);
  if (*((char *)v79 + 23) < 0)
  {
    v80 = (const char *)*((_QWORD *)v79 + 1);
    if (!v80)
      goto LABEL_109;
    v79 = *(google::protobuf::internal **)v79;
    goto LABEL_108;
  }
  v80 = (const char *)*((unsigned __int8 *)v79 + 23);
  if (*((_BYTE *)v79 + 23))
  {
LABEL_108:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v79, v80, 1, (google::protobuf::internal *)"SnippetUI.SummaryItem_DetailedText.link_identifier");
    v5 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 10, *((_QWORD *)this + 3), v5);
  }
LABEL_109:
  v81 = *((_QWORD *)this + 1);
  if ((v81 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v81 & 0xFFFFFFFFFFFFFFFELL), (const google::protobuf::UnknownFieldSet *)v5, a3, a4);
  else
    return (const google::protobuf::UnknownFieldSet *)v5;
}

void SnippetUI::SummaryItem_DetailedText::CopyFrom(SnippetUI::SummaryItem_DetailedText *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    SnippetUI::SummaryItem_DetailedText::Clear(this);
    SnippetUI::SummaryItem_DetailedText::MergeFrom(this, a2);
  }
}

void SnippetUI::SummaryItem_DetailedText::MergeFrom(SnippetUI::SummaryItem_DetailedText *this, const google::protobuf::Message *lpsrc)
{
  std::string *v4;
  const SnippetUI::SummaryItem_DetailedText *v5;
  google::protobuf::Message *v6;
  char v7;
  std::string v8[2];

  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/SummaryItem.pb.cc", 3435);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5)
    SnippetUI::SummaryItem_DetailedText::MergeFrom(this, v5);
  else
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
}

void sub_1BF938D98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::SummaryItem_DetailedText::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 96) = a2;
  return this;
}

uint64_t SnippetUI::SummaryItem_DetailedText::GetMetadata(SnippetUI::SummaryItem_DetailedText *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_SummaryItem_2eproto);
  return qword_1EF5819B0;
}

void *SnippetUI::SummaryItem_DetailedText::default_instance(SnippetUI::SummaryItem_DetailedText *this)
{
  if (atomic_load(scc_info_SummaryItem_DetailedText_SummaryItem_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_SummaryItem_DetailedText_SummaryItem_2eproto);
  return &SnippetUI::_SummaryItem_DetailedText_default_instance_;
}

void SnippetUI::SummaryItem_DetailedText::MergeFrom(SnippetUI::SummaryItem_DetailedText *this, const SnippetUI::SummaryItem_DetailedText *a2)
{
  std::string *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  int **v10;
  int **v11;
  int **v12;
  int **v13;
  int **v14;
  int **v15;
  int **v16;
  int **v17;
  int **v18;
  int **v19;
  int **v20;
  int **v21;
  int **v22;
  int **v23;
  int **v24;
  int **v25;
  int **v26;
  int **v27;
  int **v28;
  int **v29;
  int **v30;
  int **v31;
  int **v32;
  int **v33;
  char v34;
  std::string v35[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v35, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/SummaryItem.pb.cc", 3450);
    v4 = google::protobuf::internal::LogMessage::operator<<(v35, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v34, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v35[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::SummaryItem_DetailedText *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  v6 = *((_QWORD *)a2 + 2);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(_QWORD *)(v6 + 8))
      goto LABEL_13;
  }
  else if (!*(_BYTE *)(v6 + 23))
  {
    goto LABEL_13;
  }
  v7 = (uint64_t *)*((_QWORD *)this + 2);
  if (v7 != (uint64_t *)v6)
  {
    if (v7 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, v6);
    else
      std::string::operator=(*((std::string **)this + 2), (const std::string *)v6);
  }
LABEL_13:
  v8 = *((_QWORD *)a2 + 3);
  if (*(char *)(v8 + 23) < 0)
  {
    if (!*(_QWORD *)(v8 + 8))
      goto LABEL_21;
  }
  else if (!*(_BYTE *)(v8 + 23))
  {
    goto LABEL_21;
  }
  v9 = (uint64_t *)*((_QWORD *)this + 3);
  if (v9 != (uint64_t *)v8)
  {
    if (v9 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 3, v8);
    else
      std::string::operator=(*((std::string **)this + 3), (const std::string *)v8);
  }
LABEL_21:
  if (a2 != (const SnippetUI::SummaryItem_DetailedText *)&SnippetUI::_SummaryItem_DetailedText_default_instance_)
  {
    v10 = (int **)*((_QWORD *)a2 + 4);
    if (v10)
    {
      v11 = (int **)*((_QWORD *)this + 4);
      if (!v11)
      {
        v11 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 4) = v11;
        v10 = (int **)*((_QWORD *)a2 + 4);
      }
      if (v10)
        v12 = v10;
      else
        v12 = (int **)&SnippetUI::_TextProperty_default_instance_;
      SnippetUI::TextProperty::MergeFrom(v11, v12);
    }
    v13 = (int **)*((_QWORD *)a2 + 5);
    if (v13)
    {
      v14 = (int **)*((_QWORD *)this + 5);
      if (!v14)
      {
        v14 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 5) = v14;
        v13 = (int **)*((_QWORD *)a2 + 5);
      }
      if (v13)
        v15 = v13;
      else
        v15 = (int **)&SnippetUI::_TextProperty_default_instance_;
      SnippetUI::TextProperty::MergeFrom(v14, v15);
    }
    v16 = (int **)*((_QWORD *)a2 + 6);
    if (v16)
    {
      v17 = (int **)*((_QWORD *)this + 6);
      if (!v17)
      {
        v17 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 6) = v17;
        v16 = (int **)*((_QWORD *)a2 + 6);
      }
      if (v16)
        v18 = v16;
      else
        v18 = (int **)&SnippetUI::_TextProperty_default_instance_;
      SnippetUI::TextProperty::MergeFrom(v17, v18);
    }
    v19 = (int **)*((_QWORD *)a2 + 7);
    if (v19)
    {
      v20 = (int **)*((_QWORD *)this + 7);
      if (!v20)
      {
        v20 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 7) = v20;
        v19 = (int **)*((_QWORD *)a2 + 7);
      }
      if (v19)
        v21 = v19;
      else
        v21 = (int **)&SnippetUI::_TextProperty_default_instance_;
      SnippetUI::TextProperty::MergeFrom(v20, v21);
    }
    v22 = (int **)*((_QWORD *)a2 + 8);
    if (v22)
    {
      v23 = (int **)*((_QWORD *)this + 8);
      if (!v23)
      {
        v23 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::MultilineTextProperty>(0);
        *((_QWORD *)this + 8) = v23;
        v22 = (int **)*((_QWORD *)a2 + 8);
      }
      if (v22)
        v24 = v22;
      else
        v24 = (int **)&SnippetUI::_MultilineTextProperty_default_instance_;
      SnippetUI::MultilineTextProperty::MergeFrom(v23, v24);
    }
    v25 = (int **)*((_QWORD *)a2 + 9);
    if (v25)
    {
      v26 = (int **)*((_QWORD *)this + 9);
      if (!v26)
      {
        v26 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::VisualProperty>(0);
        *((_QWORD *)this + 9) = v26;
        v25 = (int **)*((_QWORD *)a2 + 9);
      }
      if (v25)
        v27 = v25;
      else
        v27 = (int **)&SnippetUI::_VisualProperty_default_instance_;
      SnippetUI::VisualProperty::MergeFrom(v26, v27);
    }
    v28 = (int **)*((_QWORD *)a2 + 10);
    if (v28)
    {
      v29 = (int **)*((_QWORD *)this + 10);
      if (!v29)
      {
        v29 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
        *((_QWORD *)this + 10) = v29;
        v28 = (int **)*((_QWORD *)a2 + 10);
      }
      if (v28)
        v30 = v28;
      else
        v30 = (int **)&SnippetUI::_ActionProperty_default_instance_;
      SnippetUI::ActionProperty::MergeFrom(v29, v30);
    }
    v31 = (int **)*((_QWORD *)a2 + 11);
    if (v31)
    {
      v32 = (int **)*((_QWORD *)this + 11);
      if (!v32)
      {
        v32 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 11) = v32;
        v31 = (int **)*((_QWORD *)a2 + 11);
      }
      if (v31)
        v33 = v31;
      else
        v33 = (int **)&SnippetUI::_TextProperty_default_instance_;
      SnippetUI::TextProperty::MergeFrom(v32, v33);
    }
  }
}

void sub_1BF9390B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

SnippetUI::SummaryItem_DetailedText *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::SummaryItem_DetailedText>(google::protobuf::internal::ArenaImpl *this)
{
  SnippetUI::SummaryItem_DetailedText *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (SnippetUI::SummaryItem_DetailedText *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x68uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::SummaryItem_DetailedText>);
    SnippetUI::SummaryItem_DetailedText::SummaryItem_DetailedText(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (SnippetUI::SummaryItem_DetailedText *)operator new();
    SnippetUI::SummaryItem_DetailedText::SummaryItem_DetailedText(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_1BF93914C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D890](v1, 0x10A1C408A0BA939);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::SummaryItem_DetailedText>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

void *SnippetUI::SummaryItem_Button::default_instance(SnippetUI::SummaryItem_Button *this)
{
  if (atomic_load(scc_info_SummaryItem_Button_SummaryItem_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_SummaryItem_Button_SummaryItem_2eproto);
  return &SnippetUI::_SummaryItem_Button_default_instance_;
}

void SnippetUI::SummaryItem_Button::MergeFrom(SnippetUI::SummaryItem_Button *this, const SnippetUI::SummaryItem_Button *a2)
{
  std::string *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  int **v10;
  int **v11;
  int **v12;
  const SnippetUI::Button *v13;
  SnippetUI::Button *v14;
  const SnippetUI::Button *v15;
  const SnippetUI::Button *v16;
  SnippetUI::Button *v17;
  const SnippetUI::Button *v18;
  const SnippetUI::Button *v19;
  SnippetUI::Button *v20;
  const SnippetUI::Button *v21;
  int **v22;
  int **v23;
  int **v24;
  int **v25;
  int **v26;
  int **v27;
  int **v28;
  int **v29;
  int **v30;
  int **v31;
  int **v32;
  int **v33;
  int **v34;
  int **v35;
  int **v36;
  char v37;
  std::string v38[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v38, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/SummaryItem.pb.cc", 7179);
    v4 = google::protobuf::internal::LogMessage::operator<<(v38, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v37, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v38[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::SummaryItem_Button *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  v6 = *((_QWORD *)a2 + 2);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(_QWORD *)(v6 + 8))
      goto LABEL_13;
  }
  else if (!*(_BYTE *)(v6 + 23))
  {
    goto LABEL_13;
  }
  v7 = (uint64_t *)*((_QWORD *)this + 2);
  if (v7 != (uint64_t *)v6)
  {
    if (v7 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, v6);
    else
      std::string::operator=(*((std::string **)this + 2), (const std::string *)v6);
  }
LABEL_13:
  v8 = *((_QWORD *)a2 + 3);
  if (*(char *)(v8 + 23) < 0)
  {
    if (!*(_QWORD *)(v8 + 8))
      goto LABEL_21;
  }
  else if (!*(_BYTE *)(v8 + 23))
  {
    goto LABEL_21;
  }
  v9 = (uint64_t *)*((_QWORD *)this + 3);
  if (v9 != (uint64_t *)v8)
  {
    if (v9 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 3, v8);
    else
      std::string::operator=(*((std::string **)this + 3), (const std::string *)v8);
  }
LABEL_21:
  if (a2 != (const SnippetUI::SummaryItem_Button *)&SnippetUI::_SummaryItem_Button_default_instance_)
  {
    v10 = (int **)*((_QWORD *)a2 + 4);
    if (v10)
    {
      v11 = (int **)*((_QWORD *)this + 4);
      if (!v11)
      {
        v11 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 4) = v11;
        v10 = (int **)*((_QWORD *)a2 + 4);
      }
      if (v10)
        v12 = v10;
      else
        v12 = (int **)&SnippetUI::_TextProperty_default_instance_;
      SnippetUI::TextProperty::MergeFrom(v11, v12);
    }
    v13 = (const SnippetUI::Button *)*((_QWORD *)a2 + 5);
    if (v13)
    {
      v14 = (SnippetUI::Button *)*((_QWORD *)this + 5);
      if (!v14)
      {
        v14 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Button>(0);
        *((_QWORD *)this + 5) = v14;
        v13 = (const SnippetUI::Button *)*((_QWORD *)a2 + 5);
      }
      if (v13)
        v15 = v13;
      else
        v15 = (const SnippetUI::Button *)&SnippetUI::_Button_default_instance_;
      SnippetUI::Button::MergeFrom(v14, v15);
    }
    v16 = (const SnippetUI::Button *)*((_QWORD *)a2 + 6);
    if (v16)
    {
      v17 = (SnippetUI::Button *)*((_QWORD *)this + 6);
      if (!v17)
      {
        v17 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Button>(0);
        *((_QWORD *)this + 6) = v17;
        v16 = (const SnippetUI::Button *)*((_QWORD *)a2 + 6);
      }
      if (v16)
        v18 = v16;
      else
        v18 = (const SnippetUI::Button *)&SnippetUI::_Button_default_instance_;
      SnippetUI::Button::MergeFrom(v17, v18);
    }
    v19 = (const SnippetUI::Button *)*((_QWORD *)a2 + 7);
    if (v19)
    {
      v20 = (SnippetUI::Button *)*((_QWORD *)this + 7);
      if (!v20)
      {
        v20 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Button>(0);
        *((_QWORD *)this + 7) = v20;
        v19 = (const SnippetUI::Button *)*((_QWORD *)a2 + 7);
      }
      if (v19)
        v21 = v19;
      else
        v21 = (const SnippetUI::Button *)&SnippetUI::_Button_default_instance_;
      SnippetUI::Button::MergeFrom(v20, v21);
    }
    v22 = (int **)*((_QWORD *)a2 + 8);
    if (v22)
    {
      v23 = (int **)*((_QWORD *)this + 8);
      if (!v23)
      {
        v23 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::MultilineTextProperty>(0);
        *((_QWORD *)this + 8) = v23;
        v22 = (int **)*((_QWORD *)a2 + 8);
      }
      if (v22)
        v24 = v22;
      else
        v24 = (int **)&SnippetUI::_MultilineTextProperty_default_instance_;
      SnippetUI::MultilineTextProperty::MergeFrom(v23, v24);
    }
    v25 = (int **)*((_QWORD *)a2 + 9);
    if (v25)
    {
      v26 = (int **)*((_QWORD *)this + 9);
      if (!v26)
      {
        v26 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::MultilineTextProperty>(0);
        *((_QWORD *)this + 9) = v26;
        v25 = (int **)*((_QWORD *)a2 + 9);
      }
      if (v25)
        v27 = v25;
      else
        v27 = (int **)&SnippetUI::_MultilineTextProperty_default_instance_;
      SnippetUI::MultilineTextProperty::MergeFrom(v26, v27);
    }
    v28 = (int **)*((_QWORD *)a2 + 10);
    if (v28)
    {
      v29 = (int **)*((_QWORD *)this + 10);
      if (!v29)
      {
        v29 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::VisualProperty>(0);
        *((_QWORD *)this + 10) = v29;
        v28 = (int **)*((_QWORD *)a2 + 10);
      }
      if (v28)
        v30 = v28;
      else
        v30 = (int **)&SnippetUI::_VisualProperty_default_instance_;
      SnippetUI::VisualProperty::MergeFrom(v29, v30);
    }
    v31 = (int **)*((_QWORD *)a2 + 11);
    if (v31)
    {
      v32 = (int **)*((_QWORD *)this + 11);
      if (!v32)
      {
        v32 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
        *((_QWORD *)this + 11) = v32;
        v31 = (int **)*((_QWORD *)a2 + 11);
      }
      if (v31)
        v33 = v31;
      else
        v33 = (int **)&SnippetUI::_ActionProperty_default_instance_;
      SnippetUI::ActionProperty::MergeFrom(v32, v33);
    }
    v34 = (int **)*((_QWORD *)a2 + 12);
    if (v34)
    {
      v35 = (int **)*((_QWORD *)this + 12);
      if (!v35)
      {
        v35 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 12) = v35;
        v34 = (int **)*((_QWORD *)a2 + 12);
      }
      if (v34)
        v36 = v34;
      else
        v36 = (int **)&SnippetUI::_TextProperty_default_instance_;
      SnippetUI::TextProperty::MergeFrom(v35, v36);
    }
  }
}

void sub_1BF9395E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

SnippetUI::SummaryItem_Button *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::SummaryItem_Button>(google::protobuf::internal::ArenaImpl *this)
{
  SnippetUI::SummaryItem_Button *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (SnippetUI::SummaryItem_Button *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x70uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::SummaryItem_Button>);
    SnippetUI::SummaryItem_Button::SummaryItem_Button(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (SnippetUI::SummaryItem_Button *)operator new();
    SnippetUI::SummaryItem_Button::SummaryItem_Button(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_1BF93967C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D890](v1, 0x10A1C40B27C08C4);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::SummaryItem_Button>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

void SnippetUI::SummaryItem_Standard::InitAsDefaultInstance(SnippetUI::SummaryItem_Standard *this)
{
  qword_1ED1D5550 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1ED1D5558 = &SnippetUI::_MultilineTextProperty_default_instance_;
  qword_1ED1D5560 = (uint64_t)&SnippetUI::_MultilineTextProperty_default_instance_;
  unk_1ED1D5568 = &SnippetUI::_VisualProperty_default_instance_;
  qword_1ED1D5570 = (uint64_t)&SnippetUI::_ActionProperty_default_instance_;
  unk_1ED1D5578 = &SnippetUI::_TextProperty_default_instance_;
}

uint64_t SnippetUI::SummaryItem_Standard::_Internal::text_1(SnippetUI::SummaryItem_Standard::_Internal *this, const SnippetUI::SummaryItem_Standard *a2)
{
  return *((_QWORD *)this + 4);
}

uint64_t SnippetUI::SummaryItem_Standard::_Internal::text_2(SnippetUI::SummaryItem_Standard::_Internal *this, const SnippetUI::SummaryItem_Standard *a2)
{
  return *((_QWORD *)this + 5);
}

uint64_t SnippetUI::SummaryItem_Standard::_Internal::text_3(SnippetUI::SummaryItem_Standard::_Internal *this, const SnippetUI::SummaryItem_Standard *a2)
{
  return *((_QWORD *)this + 6);
}

uint64_t SnippetUI::SummaryItem_Standard::_Internal::thumbnail(SnippetUI::SummaryItem_Standard::_Internal *this, const SnippetUI::SummaryItem_Standard *a2)
{
  return *((_QWORD *)this + 7);
}

uint64_t SnippetUI::SummaryItem_Standard::_Internal::action(SnippetUI::SummaryItem_Standard::_Internal *this, const SnippetUI::SummaryItem_Standard *a2)
{
  return *((_QWORD *)this + 8);
}

uint64_t SnippetUI::SummaryItem_Standard::_Internal::text_4(SnippetUI::SummaryItem_Standard::_Internal *this, const SnippetUI::SummaryItem_Standard *a2)
{
  return *((_QWORD *)this + 9);
}

uint64_t SnippetUI::SummaryItem_Standard::clear_text_1(SnippetUI::SummaryItem_Standard *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 4);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 4) = 0;
  return result;
}

uint64_t SnippetUI::SummaryItem_Standard::clear_text_2(SnippetUI::SummaryItem_Standard *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 5);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 5) = 0;
  return result;
}

uint64_t SnippetUI::SummaryItem_Standard::clear_text_3(SnippetUI::SummaryItem_Standard *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 6);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 6) = 0;
  return result;
}

uint64_t SnippetUI::SummaryItem_Standard::clear_thumbnail(SnippetUI::SummaryItem_Standard *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 7);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 7) = 0;
  return result;
}

uint64_t SnippetUI::SummaryItem_Standard::clear_action(SnippetUI::SummaryItem_Standard *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 8);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 8) = 0;
  return result;
}

uint64_t SnippetUI::SummaryItem_Standard::clear_text_4(SnippetUI::SummaryItem_Standard *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 9);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 9) = 0;
  return result;
}

SnippetUI::SummaryItem_Standard *SnippetUI::SummaryItem_Standard::SummaryItem_Standard(SnippetUI::SummaryItem_Standard *this, const SnippetUI::SummaryItem_Standard *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  SnippetUI::TextProperty *v10;
  SnippetUI::TextProperty *v11;
  SnippetUI::MultilineTextProperty *v12;
  SnippetUI::MultilineTextProperty *v13;
  SnippetUI::VisualProperty *v14;
  SnippetUI::ActionProperty *v15;

  *(_QWORD *)this = &off_1E792DE70;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 20) = 0;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::SummaryItem_Standard *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  v5 = *((_QWORD *)a2 + 2);
  if (*(char *)(v5 + 23) < 0)
    v6 = *(_QWORD *)(v5 + 8);
  else
    v6 = *(unsigned __int8 *)(v5 + 23);
  if ((uint64_t *)v5 != &google::protobuf::internal::fixed_address_empty_string && v6 != 0)
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, v5);
  *((_QWORD *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  v8 = *((_QWORD *)a2 + 3);
  if (*(char *)(v8 + 23) < 0)
    v9 = *(_QWORD *)(v8 + 8);
  else
    v9 = *(unsigned __int8 *)(v8 + 23);
  if ((uint64_t *)v8 != &google::protobuf::internal::fixed_address_empty_string && v9)
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 3, v8);
  if (a2 == (const SnippetUI::SummaryItem_Standard *)&SnippetUI::_SummaryItem_Standard_default_instance_)
  {
    v11 = 0;
    *((_QWORD *)this + 8) = 0;
    *((_OWORD *)this + 2) = 0u;
    *((_OWORD *)this + 3) = 0u;
  }
  else
  {
    if (*((_QWORD *)a2 + 4))
    {
      v10 = (SnippetUI::TextProperty *)operator new();
      SnippetUI::TextProperty::TextProperty(v10, *((const SnippetUI::TextProperty **)a2 + 4));
    }
    else
    {
      v10 = 0;
    }
    *((_QWORD *)this + 4) = v10;
    if (*((_QWORD *)a2 + 5))
    {
      v12 = (SnippetUI::MultilineTextProperty *)operator new();
      SnippetUI::MultilineTextProperty::MultilineTextProperty(v12, *((const SnippetUI::MultilineTextProperty **)a2 + 5));
    }
    else
    {
      v12 = 0;
    }
    *((_QWORD *)this + 5) = v12;
    if (*((_QWORD *)a2 + 6))
    {
      v13 = (SnippetUI::MultilineTextProperty *)operator new();
      SnippetUI::MultilineTextProperty::MultilineTextProperty(v13, *((const SnippetUI::MultilineTextProperty **)a2 + 6));
    }
    else
    {
      v13 = 0;
    }
    *((_QWORD *)this + 6) = v13;
    if (*((_QWORD *)a2 + 7))
    {
      v14 = (SnippetUI::VisualProperty *)operator new();
      SnippetUI::VisualProperty::VisualProperty(v14, *((const SnippetUI::VisualProperty **)a2 + 7));
    }
    else
    {
      v14 = 0;
    }
    *((_QWORD *)this + 7) = v14;
    if (*((_QWORD *)a2 + 8))
    {
      v15 = (SnippetUI::ActionProperty *)operator new();
      SnippetUI::ActionProperty::ActionProperty(v15, *((const SnippetUI::ActionProperty **)a2 + 8));
    }
    else
    {
      v15 = 0;
    }
    *((_QWORD *)this + 8) = v15;
    if (*((_QWORD *)a2 + 9))
    {
      v11 = (SnippetUI::TextProperty *)operator new();
      SnippetUI::TextProperty::TextProperty(v11, *((const SnippetUI::TextProperty **)a2 + 9));
    }
    else
    {
      v11 = 0;
    }
  }
  *((_QWORD *)this + 9) = v11;
  return this;
}

void sub_1BF939BFC(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;

  MEMORY[0x1C3B8D890](v2, 0x10A1C40BEC01B52);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::SummaryItem_Standard::CopyFrom(SnippetUI::SummaryItem_Standard *this, const SnippetUI::SummaryItem_Standard *a2)
{
  if (a2 != this)
  {
    SnippetUI::SummaryItem_Standard::Clear(this);
    SnippetUI::SummaryItem_Standard::MergeFrom(this, a2);
  }
}

void SnippetUI::SummaryItem_Standard::InternalSwap(SnippetUI::SummaryItem_Standard *this, SnippetUI::SummaryItem_Standard *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  uint64_t v5;
  google::protobuf::UnknownFieldSet *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  google::protobuf::UnknownFieldSet *v25;

  v4 = (SnippetUI::SummaryItem_Standard *)((char *)this + 8);
  v5 = *((_QWORD *)a2 + 1);
  if ((*((_BYTE *)this + 8) & 1) != 0)
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v6 = v25;
      goto LABEL_6;
    }
LABEL_5:
    v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
    google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
    goto LABEL_7;
  }
  if ((v5 & 1) != 0)
    goto LABEL_5;
LABEL_7:
  v7 = (uint64_t *)*((_QWORD *)this + 2);
  v8 = (uint64_t **)((char *)a2 + 16);
  if (v7 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_13;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 2, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v7 = (uint64_t *)*((_QWORD *)this + 2);
  }
  v9 = *v8;
  if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 2, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v9 = *v8;
  }
  v10 = v7[2];
  v11 = *(_OWORD *)v7;
  v12 = v9[2];
  *(_OWORD *)v7 = *(_OWORD *)v9;
  v7[2] = v12;
  *(_OWORD *)v9 = v11;
  v9[2] = v10;
LABEL_13:
  v13 = (uint64_t *)*((_QWORD *)this + 3);
  v14 = (uint64_t **)((char *)a2 + 24);
  if (v13 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_19;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 3, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v13 = (uint64_t *)*((_QWORD *)this + 3);
  }
  v15 = *v14;
  if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 3, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v15 = *v14;
  }
  v16 = v13[2];
  v17 = *(_OWORD *)v13;
  v18 = v15[2];
  *(_OWORD *)v13 = *(_OWORD *)v15;
  v13[2] = v18;
  *(_OWORD *)v15 = v17;
  v15[2] = v16;
LABEL_19:
  v19 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v19;
  v20 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v20;
  v21 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v21;
  v22 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v22;
  v23 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v23;
  v24 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v24;
}

void SnippetUI::SummaryItem_ShortNumber::InitAsDefaultInstance(SnippetUI::SummaryItem_ShortNumber *this)
{
  qword_1ED1D56C8 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1ED1D56D0 = &SnippetUI::_TextProperty_default_instance_;
  qword_1ED1D56D8 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1ED1D56E0 = &SnippetUI::_MultilineTextProperty_default_instance_;
  qword_1ED1D56E8 = (uint64_t)&SnippetUI::_MultilineTextProperty_default_instance_;
  unk_1ED1D56F0 = &SnippetUI::_VisualProperty_default_instance_;
  qword_1ED1D56F8 = (uint64_t)&SnippetUI::_ActionProperty_default_instance_;
  unk_1ED1D5700 = &SnippetUI::_TextProperty_default_instance_;
  qword_1ED1D5708 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
}

uint64_t SnippetUI::SummaryItem_ShortNumber::_Internal::number(SnippetUI::SummaryItem_ShortNumber::_Internal *this, const SnippetUI::SummaryItem_ShortNumber *a2)
{
  return *((_QWORD *)this + 4);
}

uint64_t SnippetUI::SummaryItem_ShortNumber::_Internal::text_2(SnippetUI::SummaryItem_ShortNumber::_Internal *this, const SnippetUI::SummaryItem_ShortNumber *a2)
{
  return *((_QWORD *)this + 5);
}

uint64_t SnippetUI::SummaryItem_ShortNumber::_Internal::text_1(SnippetUI::SummaryItem_ShortNumber::_Internal *this, const SnippetUI::SummaryItem_ShortNumber *a2)
{
  return *((_QWORD *)this + 6);
}

uint64_t SnippetUI::SummaryItem_ShortNumber::_Internal::text_3(SnippetUI::SummaryItem_ShortNumber::_Internal *this, const SnippetUI::SummaryItem_ShortNumber *a2)
{
  return *((_QWORD *)this + 7);
}

uint64_t SnippetUI::SummaryItem_ShortNumber::_Internal::text_4(SnippetUI::SummaryItem_ShortNumber::_Internal *this, const SnippetUI::SummaryItem_ShortNumber *a2)
{
  return *((_QWORD *)this + 8);
}

uint64_t SnippetUI::SummaryItem_ShortNumber::_Internal::text_5(SnippetUI::SummaryItem_ShortNumber::_Internal *this, const SnippetUI::SummaryItem_ShortNumber *a2)
{
  return *((_QWORD *)this + 11);
}

uint64_t SnippetUI::SummaryItem_ShortNumber::_Internal::thumbnail(SnippetUI::SummaryItem_ShortNumber::_Internal *this, const SnippetUI::SummaryItem_ShortNumber *a2)
{
  return *((_QWORD *)this + 9);
}

uint64_t SnippetUI::SummaryItem_ShortNumber::_Internal::action(SnippetUI::SummaryItem_ShortNumber::_Internal *this, const SnippetUI::SummaryItem_ShortNumber *a2)
{
  return *((_QWORD *)this + 10);
}

uint64_t SnippetUI::SummaryItem_ShortNumber::_Internal::text_6(SnippetUI::SummaryItem_ShortNumber::_Internal *this, const SnippetUI::SummaryItem_ShortNumber *a2)
{
  return *((_QWORD *)this + 12);
}

uint64_t SnippetUI::SummaryItem_ShortNumber::clear_number(SnippetUI::SummaryItem_ShortNumber *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 4);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 4) = 0;
  return result;
}

uint64_t SnippetUI::SummaryItem_ShortNumber::clear_text_2(SnippetUI::SummaryItem_ShortNumber *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 5);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 5) = 0;
  return result;
}

uint64_t SnippetUI::SummaryItem_ShortNumber::clear_text_1(SnippetUI::SummaryItem_ShortNumber *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 6);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 6) = 0;
  return result;
}

uint64_t SnippetUI::SummaryItem_ShortNumber::clear_text_3(SnippetUI::SummaryItem_ShortNumber *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 7);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 7) = 0;
  return result;
}

uint64_t SnippetUI::SummaryItem_ShortNumber::clear_text_4(SnippetUI::SummaryItem_ShortNumber *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 8);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 8) = 0;
  return result;
}

uint64_t SnippetUI::SummaryItem_ShortNumber::clear_text_5(SnippetUI::SummaryItem_ShortNumber *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 11);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 11) = 0;
  return result;
}

uint64_t SnippetUI::SummaryItem_ShortNumber::clear_thumbnail(SnippetUI::SummaryItem_ShortNumber *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 9);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 9) = 0;
  return result;
}

uint64_t SnippetUI::SummaryItem_ShortNumber::clear_action(SnippetUI::SummaryItem_ShortNumber *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 10);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 10) = 0;
  return result;
}

uint64_t SnippetUI::SummaryItem_ShortNumber::clear_text_6(SnippetUI::SummaryItem_ShortNumber *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 12);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 12) = 0;
  return result;
}

SnippetUI::SummaryItem_ShortNumber *SnippetUI::SummaryItem_ShortNumber::SummaryItem_ShortNumber(SnippetUI::SummaryItem_ShortNumber *this, const SnippetUI::SummaryItem_ShortNumber *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  SnippetUI::TextProperty *v10;
  SnippetUI::TextProperty *v11;
  SnippetUI::TextProperty *v12;
  SnippetUI::TextProperty *v13;
  SnippetUI::MultilineTextProperty *v14;
  SnippetUI::MultilineTextProperty *v15;
  SnippetUI::VisualProperty *v16;
  SnippetUI::ActionProperty *v17;
  SnippetUI::TextProperty *v18;

  *(_QWORD *)this = &off_1E792DF30;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 26) = 0;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::SummaryItem_ShortNumber *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  v5 = *((_QWORD *)a2 + 2);
  if (*(char *)(v5 + 23) < 0)
    v6 = *(_QWORD *)(v5 + 8);
  else
    v6 = *(unsigned __int8 *)(v5 + 23);
  if ((uint64_t *)v5 != &google::protobuf::internal::fixed_address_empty_string && v6 != 0)
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, v5);
  *((_QWORD *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  v8 = *((_QWORD *)a2 + 3);
  if (*(char *)(v8 + 23) < 0)
    v9 = *(_QWORD *)(v8 + 8);
  else
    v9 = *(unsigned __int8 *)(v8 + 23);
  if ((uint64_t *)v8 != &google::protobuf::internal::fixed_address_empty_string && v9)
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 3, v8);
  if (a2 == (const SnippetUI::SummaryItem_ShortNumber *)&SnippetUI::_SummaryItem_ShortNumber_default_instance_)
  {
    v11 = 0;
    *((_OWORD *)this + 4) = 0u;
    *((_OWORD *)this + 5) = 0u;
    *((_OWORD *)this + 2) = 0u;
    *((_OWORD *)this + 3) = 0u;
  }
  else
  {
    if (*((_QWORD *)a2 + 4))
    {
      v10 = (SnippetUI::TextProperty *)operator new();
      SnippetUI::TextProperty::TextProperty(v10, *((const SnippetUI::TextProperty **)a2 + 4));
    }
    else
    {
      v10 = 0;
    }
    *((_QWORD *)this + 4) = v10;
    if (*((_QWORD *)a2 + 5))
    {
      v12 = (SnippetUI::TextProperty *)operator new();
      SnippetUI::TextProperty::TextProperty(v12, *((const SnippetUI::TextProperty **)a2 + 5));
    }
    else
    {
      v12 = 0;
    }
    *((_QWORD *)this + 5) = v12;
    if (*((_QWORD *)a2 + 6))
    {
      v13 = (SnippetUI::TextProperty *)operator new();
      SnippetUI::TextProperty::TextProperty(v13, *((const SnippetUI::TextProperty **)a2 + 6));
    }
    else
    {
      v13 = 0;
    }
    *((_QWORD *)this + 6) = v13;
    if (*((_QWORD *)a2 + 7))
    {
      v14 = (SnippetUI::MultilineTextProperty *)operator new();
      SnippetUI::MultilineTextProperty::MultilineTextProperty(v14, *((const SnippetUI::MultilineTextProperty **)a2 + 7));
    }
    else
    {
      v14 = 0;
    }
    *((_QWORD *)this + 7) = v14;
    if (*((_QWORD *)a2 + 8))
    {
      v15 = (SnippetUI::MultilineTextProperty *)operator new();
      SnippetUI::MultilineTextProperty::MultilineTextProperty(v15, *((const SnippetUI::MultilineTextProperty **)a2 + 8));
    }
    else
    {
      v15 = 0;
    }
    *((_QWORD *)this + 8) = v15;
    if (*((_QWORD *)a2 + 9))
    {
      v16 = (SnippetUI::VisualProperty *)operator new();
      SnippetUI::VisualProperty::VisualProperty(v16, *((const SnippetUI::VisualProperty **)a2 + 9));
    }
    else
    {
      v16 = 0;
    }
    *((_QWORD *)this + 9) = v16;
    if (*((_QWORD *)a2 + 10))
    {
      v17 = (SnippetUI::ActionProperty *)operator new();
      SnippetUI::ActionProperty::ActionProperty(v17, *((const SnippetUI::ActionProperty **)a2 + 10));
    }
    else
    {
      v17 = 0;
    }
    *((_QWORD *)this + 10) = v17;
    if (*((_QWORD *)a2 + 11))
    {
      v18 = (SnippetUI::TextProperty *)operator new();
      SnippetUI::TextProperty::TextProperty(v18, *((const SnippetUI::TextProperty **)a2 + 11));
    }
    else
    {
      v18 = 0;
    }
    *((_QWORD *)this + 11) = v18;
    if (*((_QWORD *)a2 + 12))
    {
      v11 = (SnippetUI::TextProperty *)operator new();
      SnippetUI::TextProperty::TextProperty(v11, *((const SnippetUI::TextProperty **)a2 + 12));
    }
    else
    {
      v11 = 0;
    }
  }
  *((_QWORD *)this + 12) = v11;
  return this;
}

void sub_1BF93A39C(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;

  MEMORY[0x1C3B8D890](v2, 0x10A1C40BEC01B52);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::SummaryItem_ShortNumber::CopyFrom(SnippetUI::SummaryItem_ShortNumber *this, const SnippetUI::SummaryItem_ShortNumber *a2)
{
  if (a2 != this)
  {
    SnippetUI::SummaryItem_ShortNumber::Clear(this);
    SnippetUI::SummaryItem_ShortNumber::MergeFrom(this, a2);
  }
}

void SnippetUI::SummaryItem_ShortNumber::InternalSwap(SnippetUI::SummaryItem_ShortNumber *this, SnippetUI::SummaryItem_ShortNumber *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  uint64_t v5;
  google::protobuf::UnknownFieldSet *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  google::protobuf::UnknownFieldSet *v28;

  v4 = (SnippetUI::SummaryItem_ShortNumber *)((char *)this + 8);
  v5 = *((_QWORD *)a2 + 1);
  if ((*((_BYTE *)this + 8) & 1) != 0)
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v6 = v28;
      goto LABEL_6;
    }
LABEL_5:
    v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
    google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
    goto LABEL_7;
  }
  if ((v5 & 1) != 0)
    goto LABEL_5;
LABEL_7:
  v7 = (uint64_t *)*((_QWORD *)this + 2);
  v8 = (uint64_t **)((char *)a2 + 16);
  if (v7 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_13;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 2, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v7 = (uint64_t *)*((_QWORD *)this + 2);
  }
  v9 = *v8;
  if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 2, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v9 = *v8;
  }
  v10 = v7[2];
  v11 = *(_OWORD *)v7;
  v12 = v9[2];
  *(_OWORD *)v7 = *(_OWORD *)v9;
  v7[2] = v12;
  *(_OWORD *)v9 = v11;
  v9[2] = v10;
LABEL_13:
  v13 = (uint64_t *)*((_QWORD *)this + 3);
  v14 = (uint64_t **)((char *)a2 + 24);
  if (v13 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_19;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 3, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v13 = (uint64_t *)*((_QWORD *)this + 3);
  }
  v15 = *v14;
  if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 3, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v15 = *v14;
  }
  v16 = v13[2];
  v17 = *(_OWORD *)v13;
  v18 = v15[2];
  *(_OWORD *)v13 = *(_OWORD *)v15;
  v13[2] = v18;
  *(_OWORD *)v15 = v17;
  v15[2] = v16;
LABEL_19:
  v19 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v19;
  v20 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v20;
  v21 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v21;
  v22 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v22;
  v23 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v23;
  v24 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v24;
  v25 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v25;
  v26 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = *((_QWORD *)a2 + 11);
  *((_QWORD *)a2 + 11) = v26;
  v27 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = *((_QWORD *)a2 + 12);
  *((_QWORD *)a2 + 12) = v27;
}

void SnippetUI::SummaryItem_Text::InitAsDefaultInstance(SnippetUI::SummaryItem_Text *this)
{
  qword_1ED1D5248 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1ED1D5250 = &SnippetUI::_TextProperty_default_instance_;
  qword_1ED1D5268 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1ED1D5270 = &SnippetUI::_TextProperty_default_instance_;
  qword_1ED1D5258 = (uint64_t)&SnippetUI::_MultilineTextProperty_default_instance_;
  unk_1ED1D5260 = &SnippetUI::_ActionProperty_default_instance_;
}

uint64_t SnippetUI::SummaryItem_Text::_Internal::text_2(SnippetUI::SummaryItem_Text::_Internal *this, const SnippetUI::SummaryItem_Text *a2)
{
  return *((_QWORD *)this + 4);
}

uint64_t SnippetUI::SummaryItem_Text::_Internal::text_1(SnippetUI::SummaryItem_Text::_Internal *this, const SnippetUI::SummaryItem_Text *a2)
{
  return *((_QWORD *)this + 5);
}

uint64_t SnippetUI::SummaryItem_Text::_Internal::text_3(SnippetUI::SummaryItem_Text::_Internal *this, const SnippetUI::SummaryItem_Text *a2)
{
  return *((_QWORD *)this + 6);
}

uint64_t SnippetUI::SummaryItem_Text::_Internal::text_4(SnippetUI::SummaryItem_Text::_Internal *this, const SnippetUI::SummaryItem_Text *a2)
{
  return *((_QWORD *)this + 8);
}

uint64_t SnippetUI::SummaryItem_Text::_Internal::text_5(SnippetUI::SummaryItem_Text::_Internal *this, const SnippetUI::SummaryItem_Text *a2)
{
  return *((_QWORD *)this + 9);
}

uint64_t SnippetUI::SummaryItem_Text::_Internal::action(SnippetUI::SummaryItem_Text::_Internal *this, const SnippetUI::SummaryItem_Text *a2)
{
  return *((_QWORD *)this + 7);
}

uint64_t SnippetUI::SummaryItem_Text::clear_text_2(SnippetUI::SummaryItem_Text *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 4);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 4) = 0;
  return result;
}

uint64_t SnippetUI::SummaryItem_Text::clear_text_1(SnippetUI::SummaryItem_Text *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 5);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 5) = 0;
  return result;
}

uint64_t SnippetUI::SummaryItem_Text::clear_text_3(SnippetUI::SummaryItem_Text *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 6);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 6) = 0;
  return result;
}

uint64_t SnippetUI::SummaryItem_Text::clear_text_4(SnippetUI::SummaryItem_Text *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 8);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 8) = 0;
  return result;
}

uint64_t SnippetUI::SummaryItem_Text::clear_text_5(SnippetUI::SummaryItem_Text *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 9);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 9) = 0;
  return result;
}

uint64_t SnippetUI::SummaryItem_Text::clear_action(SnippetUI::SummaryItem_Text *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 7);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 7) = 0;
  return result;
}

SnippetUI::SummaryItem_Text *SnippetUI::SummaryItem_Text::SummaryItem_Text(SnippetUI::SummaryItem_Text *this, const SnippetUI::SummaryItem_Text *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  SnippetUI::TextProperty *v10;
  SnippetUI::TextProperty *v11;
  SnippetUI::TextProperty *v12;
  SnippetUI::MultilineTextProperty *v13;
  SnippetUI::ActionProperty *v14;
  SnippetUI::TextProperty *v15;

  *(_QWORD *)this = &off_1E792DFF0;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 20) = 0;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::SummaryItem_Text *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  v5 = *((_QWORD *)a2 + 2);
  if (*(char *)(v5 + 23) < 0)
    v6 = *(_QWORD *)(v5 + 8);
  else
    v6 = *(unsigned __int8 *)(v5 + 23);
  if ((uint64_t *)v5 != &google::protobuf::internal::fixed_address_empty_string && v6 != 0)
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, v5);
  *((_QWORD *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  v8 = *((_QWORD *)a2 + 3);
  if (*(char *)(v8 + 23) < 0)
    v9 = *(_QWORD *)(v8 + 8);
  else
    v9 = *(unsigned __int8 *)(v8 + 23);
  if ((uint64_t *)v8 != &google::protobuf::internal::fixed_address_empty_string && v9)
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 3, v8);
  if (a2 == (const SnippetUI::SummaryItem_Text *)&SnippetUI::_SummaryItem_Text_default_instance_)
  {
    v11 = 0;
    *((_QWORD *)this + 8) = 0;
    *((_OWORD *)this + 2) = 0u;
    *((_OWORD *)this + 3) = 0u;
  }
  else
  {
    if (*((_QWORD *)a2 + 4))
    {
      v10 = (SnippetUI::TextProperty *)operator new();
      SnippetUI::TextProperty::TextProperty(v10, *((const SnippetUI::TextProperty **)a2 + 4));
    }
    else
    {
      v10 = 0;
    }
    *((_QWORD *)this + 4) = v10;
    if (*((_QWORD *)a2 + 5))
    {
      v12 = (SnippetUI::TextProperty *)operator new();
      SnippetUI::TextProperty::TextProperty(v12, *((const SnippetUI::TextProperty **)a2 + 5));
    }
    else
    {
      v12 = 0;
    }
    *((_QWORD *)this + 5) = v12;
    if (*((_QWORD *)a2 + 6))
    {
      v13 = (SnippetUI::MultilineTextProperty *)operator new();
      SnippetUI::MultilineTextProperty::MultilineTextProperty(v13, *((const SnippetUI::MultilineTextProperty **)a2 + 6));
    }
    else
    {
      v13 = 0;
    }
    *((_QWORD *)this + 6) = v13;
    if (*((_QWORD *)a2 + 7))
    {
      v14 = (SnippetUI::ActionProperty *)operator new();
      SnippetUI::ActionProperty::ActionProperty(v14, *((const SnippetUI::ActionProperty **)a2 + 7));
    }
    else
    {
      v14 = 0;
    }
    *((_QWORD *)this + 7) = v14;
    if (*((_QWORD *)a2 + 8))
    {
      v15 = (SnippetUI::TextProperty *)operator new();
      SnippetUI::TextProperty::TextProperty(v15, *((const SnippetUI::TextProperty **)a2 + 8));
    }
    else
    {
      v15 = 0;
    }
    *((_QWORD *)this + 8) = v15;
    if (*((_QWORD *)a2 + 9))
    {
      v11 = (SnippetUI::TextProperty *)operator new();
      SnippetUI::TextProperty::TextProperty(v11, *((const SnippetUI::TextProperty **)a2 + 9));
    }
    else
    {
      v11 = 0;
    }
  }
  *((_QWORD *)this + 9) = v11;
  return this;
}

void sub_1BF93AA0C(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;

  MEMORY[0x1C3B8D890](v2, 0x10A1C40BEC01B52);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::SummaryItem_Text::CopyFrom(SnippetUI::SummaryItem_Text *this, const SnippetUI::SummaryItem_Text *a2)
{
  if (a2 != this)
  {
    SnippetUI::SummaryItem_Text::Clear(this);
    SnippetUI::SummaryItem_Text::MergeFrom(this, a2);
  }
}

void SnippetUI::SummaryItem_Text::InternalSwap(SnippetUI::SummaryItem_Text *this, SnippetUI::SummaryItem_Text *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  uint64_t v5;
  google::protobuf::UnknownFieldSet *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  google::protobuf::UnknownFieldSet *v25;

  v4 = (SnippetUI::SummaryItem_Text *)((char *)this + 8);
  v5 = *((_QWORD *)a2 + 1);
  if ((*((_BYTE *)this + 8) & 1) != 0)
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v6 = v25;
      goto LABEL_6;
    }
LABEL_5:
    v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
    google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
    goto LABEL_7;
  }
  if ((v5 & 1) != 0)
    goto LABEL_5;
LABEL_7:
  v7 = (uint64_t *)*((_QWORD *)this + 2);
  v8 = (uint64_t **)((char *)a2 + 16);
  if (v7 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_13;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 2, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v7 = (uint64_t *)*((_QWORD *)this + 2);
  }
  v9 = *v8;
  if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 2, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v9 = *v8;
  }
  v10 = v7[2];
  v11 = *(_OWORD *)v7;
  v12 = v9[2];
  *(_OWORD *)v7 = *(_OWORD *)v9;
  v7[2] = v12;
  *(_OWORD *)v9 = v11;
  v9[2] = v10;
LABEL_13:
  v13 = (uint64_t *)*((_QWORD *)this + 3);
  v14 = (uint64_t **)((char *)a2 + 24);
  if (v13 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_19;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 3, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v13 = (uint64_t *)*((_QWORD *)this + 3);
  }
  v15 = *v14;
  if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 3, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v15 = *v14;
  }
  v16 = v13[2];
  v17 = *(_OWORD *)v13;
  v18 = v15[2];
  *(_OWORD *)v13 = *(_OWORD *)v15;
  v13[2] = v18;
  *(_OWORD *)v15 = v17;
  v15[2] = v16;
LABEL_19:
  v19 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v19;
  v20 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v20;
  v21 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v21;
  v22 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v22;
  v23 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v23;
  v24 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v24;
}

void SnippetUI::SummaryItem_LargeText::InitAsDefaultInstance(SnippetUI::SummaryItem_LargeText *this)
{
  qword_1ED1D5628 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1ED1D5630 = &SnippetUI::_MultilineTextProperty_default_instance_;
  qword_1ED1D5638 = (uint64_t)&SnippetUI::_MultilineTextProperty_default_instance_;
  unk_1ED1D5640 = &SnippetUI::_ActionProperty_default_instance_;
}

uint64_t SnippetUI::SummaryItem_LargeText::_Internal::text_1(SnippetUI::SummaryItem_LargeText::_Internal *this, const SnippetUI::SummaryItem_LargeText *a2)
{
  return *((_QWORD *)this + 4);
}

uint64_t SnippetUI::SummaryItem_LargeText::_Internal::text_2(SnippetUI::SummaryItem_LargeText::_Internal *this, const SnippetUI::SummaryItem_LargeText *a2)
{
  return *((_QWORD *)this + 5);
}

uint64_t SnippetUI::SummaryItem_LargeText::_Internal::text_3(SnippetUI::SummaryItem_LargeText::_Internal *this, const SnippetUI::SummaryItem_LargeText *a2)
{
  return *((_QWORD *)this + 6);
}

uint64_t SnippetUI::SummaryItem_LargeText::_Internal::action(SnippetUI::SummaryItem_LargeText::_Internal *this, const SnippetUI::SummaryItem_LargeText *a2)
{
  return *((_QWORD *)this + 7);
}

uint64_t SnippetUI::SummaryItem_LargeText::clear_text_1(SnippetUI::SummaryItem_LargeText *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 4);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 4) = 0;
  return result;
}

uint64_t SnippetUI::SummaryItem_LargeText::clear_text_2(SnippetUI::SummaryItem_LargeText *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 5);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 5) = 0;
  return result;
}

uint64_t SnippetUI::SummaryItem_LargeText::clear_text_3(SnippetUI::SummaryItem_LargeText *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 6);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 6) = 0;
  return result;
}

uint64_t SnippetUI::SummaryItem_LargeText::clear_action(SnippetUI::SummaryItem_LargeText *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 7);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 7) = 0;
  return result;
}

SnippetUI::SummaryItem_LargeText *SnippetUI::SummaryItem_LargeText::SummaryItem_LargeText(SnippetUI::SummaryItem_LargeText *this, const SnippetUI::SummaryItem_LargeText *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  SnippetUI::TextProperty *v10;
  SnippetUI::ActionProperty *v11;
  SnippetUI::MultilineTextProperty *v12;
  SnippetUI::MultilineTextProperty *v13;

  *(_QWORD *)this = &off_1E792E0B0;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 16) = 0;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::SummaryItem_LargeText *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  v5 = *((_QWORD *)a2 + 2);
  if (*(char *)(v5 + 23) < 0)
    v6 = *(_QWORD *)(v5 + 8);
  else
    v6 = *(unsigned __int8 *)(v5 + 23);
  if ((uint64_t *)v5 != &google::protobuf::internal::fixed_address_empty_string && v6 != 0)
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, v5);
  *((_QWORD *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  v8 = *((_QWORD *)a2 + 3);
  if (*(char *)(v8 + 23) < 0)
    v9 = *(_QWORD *)(v8 + 8);
  else
    v9 = *(unsigned __int8 *)(v8 + 23);
  if ((uint64_t *)v8 != &google::protobuf::internal::fixed_address_empty_string && v9)
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 3, v8);
  if (a2 == (const SnippetUI::SummaryItem_LargeText *)&SnippetUI::_SummaryItem_LargeText_default_instance_)
  {
    v11 = 0;
    *((_QWORD *)this + 4) = 0;
    *((_QWORD *)this + 5) = 0;
    *((_QWORD *)this + 6) = 0;
  }
  else
  {
    if (*((_QWORD *)a2 + 4))
    {
      v10 = (SnippetUI::TextProperty *)operator new();
      SnippetUI::TextProperty::TextProperty(v10, *((const SnippetUI::TextProperty **)a2 + 4));
    }
    else
    {
      v10 = 0;
    }
    *((_QWORD *)this + 4) = v10;
    if (*((_QWORD *)a2 + 5))
    {
      v12 = (SnippetUI::MultilineTextProperty *)operator new();
      SnippetUI::MultilineTextProperty::MultilineTextProperty(v12, *((const SnippetUI::MultilineTextProperty **)a2 + 5));
    }
    else
    {
      v12 = 0;
    }
    *((_QWORD *)this + 5) = v12;
    if (*((_QWORD *)a2 + 6))
    {
      v13 = (SnippetUI::MultilineTextProperty *)operator new();
      SnippetUI::MultilineTextProperty::MultilineTextProperty(v13, *((const SnippetUI::MultilineTextProperty **)a2 + 6));
    }
    else
    {
      v13 = 0;
    }
    *((_QWORD *)this + 6) = v13;
    if (*((_QWORD *)a2 + 7))
    {
      v11 = (SnippetUI::ActionProperty *)operator new();
      SnippetUI::ActionProperty::ActionProperty(v11, *((const SnippetUI::ActionProperty **)a2 + 7));
    }
    else
    {
      v11 = 0;
    }
  }
  *((_QWORD *)this + 7) = v11;
  return this;
}

void sub_1BF93AF50(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;

  MEMORY[0x1C3B8D890](v2, 0x10A1C40B18DE219);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::SummaryItem_LargeText::CopyFrom(SnippetUI::SummaryItem_LargeText *this, const SnippetUI::SummaryItem_LargeText *a2)
{
  if (a2 != this)
  {
    SnippetUI::SummaryItem_LargeText::Clear(this);
    SnippetUI::SummaryItem_LargeText::MergeFrom(this, a2);
  }
}

void SnippetUI::SummaryItem_LargeText::InternalSwap(SnippetUI::SummaryItem_LargeText *this, SnippetUI::SummaryItem_LargeText *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  uint64_t v5;
  google::protobuf::UnknownFieldSet *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  google::protobuf::UnknownFieldSet *v23;

  v4 = (SnippetUI::SummaryItem_LargeText *)((char *)this + 8);
  v5 = *((_QWORD *)a2 + 1);
  if ((*((_BYTE *)this + 8) & 1) != 0)
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v6 = v23;
      goto LABEL_6;
    }
LABEL_5:
    v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
    google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
    goto LABEL_7;
  }
  if ((v5 & 1) != 0)
    goto LABEL_5;
LABEL_7:
  v7 = (uint64_t *)*((_QWORD *)this + 2);
  v8 = (uint64_t **)((char *)a2 + 16);
  if (v7 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_13;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 2, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v7 = (uint64_t *)*((_QWORD *)this + 2);
  }
  v9 = *v8;
  if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 2, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v9 = *v8;
  }
  v10 = v7[2];
  v11 = *(_OWORD *)v7;
  v12 = v9[2];
  *(_OWORD *)v7 = *(_OWORD *)v9;
  v7[2] = v12;
  *(_OWORD *)v9 = v11;
  v9[2] = v10;
LABEL_13:
  v13 = (uint64_t *)*((_QWORD *)this + 3);
  v14 = (uint64_t **)((char *)a2 + 24);
  if (v13 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_19;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 3, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v13 = (uint64_t *)*((_QWORD *)this + 3);
  }
  v15 = *v14;
  if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 3, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v15 = *v14;
  }
  v16 = v13[2];
  v17 = *(_OWORD *)v13;
  v18 = v15[2];
  *(_OWORD *)v13 = *(_OWORD *)v15;
  v13[2] = v18;
  *(_OWORD *)v15 = v17;
  v15[2] = v16;
LABEL_19:
  v19 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v19;
  v20 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v20;
  v21 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v21;
  v22 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v22;
}

void SnippetUI::SummaryItem_DetailedText::InitAsDefaultInstance(SnippetUI::SummaryItem_DetailedText *this)
{
  qword_1ED1D4C50 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1ED1D4C58 = &SnippetUI::_TextProperty_default_instance_;
  qword_1ED1D4C60 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1ED1D4C68 = &SnippetUI::_TextProperty_default_instance_;
  qword_1ED1D4C70 = (uint64_t)&SnippetUI::_MultilineTextProperty_default_instance_;
  unk_1ED1D4C78 = &SnippetUI::_VisualProperty_default_instance_;
  qword_1ED1D4C80 = (uint64_t)&SnippetUI::_ActionProperty_default_instance_;
  unk_1ED1D4C88 = &SnippetUI::_TextProperty_default_instance_;
}

uint64_t SnippetUI::SummaryItem_DetailedText::_Internal::text_1(SnippetUI::SummaryItem_DetailedText::_Internal *this, const SnippetUI::SummaryItem_DetailedText *a2)
{
  return *((_QWORD *)this + 4);
}

uint64_t SnippetUI::SummaryItem_DetailedText::_Internal::text_3(SnippetUI::SummaryItem_DetailedText::_Internal *this, const SnippetUI::SummaryItem_DetailedText *a2)
{
  return *((_QWORD *)this + 5);
}

uint64_t SnippetUI::SummaryItem_DetailedText::_Internal::text_2(SnippetUI::SummaryItem_DetailedText::_Internal *this, const SnippetUI::SummaryItem_DetailedText *a2)
{
  return *((_QWORD *)this + 6);
}

uint64_t SnippetUI::SummaryItem_DetailedText::_Internal::text_4(SnippetUI::SummaryItem_DetailedText::_Internal *this, const SnippetUI::SummaryItem_DetailedText *a2)
{
  return *((_QWORD *)this + 7);
}

uint64_t SnippetUI::SummaryItem_DetailedText::_Internal::text_5(SnippetUI::SummaryItem_DetailedText::_Internal *this, const SnippetUI::SummaryItem_DetailedText *a2)
{
  return *((_QWORD *)this + 8);
}

uint64_t SnippetUI::SummaryItem_DetailedText::_Internal::text_6(SnippetUI::SummaryItem_DetailedText::_Internal *this, const SnippetUI::SummaryItem_DetailedText *a2)
{
  return *((_QWORD *)this + 11);
}

uint64_t SnippetUI::SummaryItem_DetailedText::_Internal::thumbnail(SnippetUI::SummaryItem_DetailedText::_Internal *this, const SnippetUI::SummaryItem_DetailedText *a2)
{
  return *((_QWORD *)this + 9);
}

uint64_t SnippetUI::SummaryItem_DetailedText::_Internal::action(SnippetUI::SummaryItem_DetailedText::_Internal *this, const SnippetUI::SummaryItem_DetailedText *a2)
{
  return *((_QWORD *)this + 10);
}

uint64_t SnippetUI::SummaryItem_DetailedText::clear_text_1(SnippetUI::SummaryItem_DetailedText *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 4);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 4) = 0;
  return result;
}

uint64_t SnippetUI::SummaryItem_DetailedText::clear_text_3(SnippetUI::SummaryItem_DetailedText *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 5);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 5) = 0;
  return result;
}

uint64_t SnippetUI::SummaryItem_DetailedText::clear_text_2(SnippetUI::SummaryItem_DetailedText *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 6);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 6) = 0;
  return result;
}

uint64_t SnippetUI::SummaryItem_DetailedText::clear_text_4(SnippetUI::SummaryItem_DetailedText *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 7);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 7) = 0;
  return result;
}

uint64_t SnippetUI::SummaryItem_DetailedText::clear_text_5(SnippetUI::SummaryItem_DetailedText *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 8);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 8) = 0;
  return result;
}

uint64_t SnippetUI::SummaryItem_DetailedText::clear_text_6(SnippetUI::SummaryItem_DetailedText *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 11);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 11) = 0;
  return result;
}

uint64_t SnippetUI::SummaryItem_DetailedText::clear_thumbnail(SnippetUI::SummaryItem_DetailedText *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 9);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 9) = 0;
  return result;
}

uint64_t SnippetUI::SummaryItem_DetailedText::clear_action(SnippetUI::SummaryItem_DetailedText *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 10);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 10) = 0;
  return result;
}

SnippetUI::SummaryItem_DetailedText *SnippetUI::SummaryItem_DetailedText::SummaryItem_DetailedText(SnippetUI::SummaryItem_DetailedText *this, const SnippetUI::SummaryItem_DetailedText *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  SnippetUI::TextProperty *v10;
  SnippetUI::TextProperty *v11;
  SnippetUI::TextProperty *v12;
  SnippetUI::TextProperty *v13;
  SnippetUI::TextProperty *v14;
  SnippetUI::MultilineTextProperty *v15;
  SnippetUI::VisualProperty *v16;
  SnippetUI::ActionProperty *v17;

  *(_QWORD *)this = &off_1E792E170;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 24) = 0;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::SummaryItem_DetailedText *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  v5 = *((_QWORD *)a2 + 2);
  if (*(char *)(v5 + 23) < 0)
    v6 = *(_QWORD *)(v5 + 8);
  else
    v6 = *(unsigned __int8 *)(v5 + 23);
  if ((uint64_t *)v5 != &google::protobuf::internal::fixed_address_empty_string && v6 != 0)
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, v5);
  *((_QWORD *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  v8 = *((_QWORD *)a2 + 3);
  if (*(char *)(v8 + 23) < 0)
    v9 = *(_QWORD *)(v8 + 8);
  else
    v9 = *(unsigned __int8 *)(v8 + 23);
  if ((uint64_t *)v8 != &google::protobuf::internal::fixed_address_empty_string && v9)
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 3, v8);
  if (a2 == (const SnippetUI::SummaryItem_DetailedText *)&SnippetUI::_SummaryItem_DetailedText_default_instance_)
  {
    v11 = 0;
    *((_QWORD *)this + 10) = 0;
    *((_OWORD *)this + 3) = 0u;
    *((_OWORD *)this + 4) = 0u;
    *((_OWORD *)this + 2) = 0u;
  }
  else
  {
    if (*((_QWORD *)a2 + 4))
    {
      v10 = (SnippetUI::TextProperty *)operator new();
      SnippetUI::TextProperty::TextProperty(v10, *((const SnippetUI::TextProperty **)a2 + 4));
    }
    else
    {
      v10 = 0;
    }
    *((_QWORD *)this + 4) = v10;
    if (*((_QWORD *)a2 + 5))
    {
      v12 = (SnippetUI::TextProperty *)operator new();
      SnippetUI::TextProperty::TextProperty(v12, *((const SnippetUI::TextProperty **)a2 + 5));
    }
    else
    {
      v12 = 0;
    }
    *((_QWORD *)this + 5) = v12;
    if (*((_QWORD *)a2 + 6))
    {
      v13 = (SnippetUI::TextProperty *)operator new();
      SnippetUI::TextProperty::TextProperty(v13, *((const SnippetUI::TextProperty **)a2 + 6));
    }
    else
    {
      v13 = 0;
    }
    *((_QWORD *)this + 6) = v13;
    if (*((_QWORD *)a2 + 7))
    {
      v14 = (SnippetUI::TextProperty *)operator new();
      SnippetUI::TextProperty::TextProperty(v14, *((const SnippetUI::TextProperty **)a2 + 7));
    }
    else
    {
      v14 = 0;
    }
    *((_QWORD *)this + 7) = v14;
    if (*((_QWORD *)a2 + 8))
    {
      v15 = (SnippetUI::MultilineTextProperty *)operator new();
      SnippetUI::MultilineTextProperty::MultilineTextProperty(v15, *((const SnippetUI::MultilineTextProperty **)a2 + 8));
    }
    else
    {
      v15 = 0;
    }
    *((_QWORD *)this + 8) = v15;
    if (*((_QWORD *)a2 + 9))
    {
      v16 = (SnippetUI::VisualProperty *)operator new();
      SnippetUI::VisualProperty::VisualProperty(v16, *((const SnippetUI::VisualProperty **)a2 + 9));
    }
    else
    {
      v16 = 0;
    }
    *((_QWORD *)this + 9) = v16;
    if (*((_QWORD *)a2 + 10))
    {
      v17 = (SnippetUI::ActionProperty *)operator new();
      SnippetUI::ActionProperty::ActionProperty(v17, *((const SnippetUI::ActionProperty **)a2 + 10));
    }
    else
    {
      v17 = 0;
    }
    *((_QWORD *)this + 10) = v17;
    if (*((_QWORD *)a2 + 11))
    {
      v11 = (SnippetUI::TextProperty *)operator new();
      SnippetUI::TextProperty::TextProperty(v11, *((const SnippetUI::TextProperty **)a2 + 11));
    }
    else
    {
      v11 = 0;
    }
  }
  *((_QWORD *)this + 11) = v11;
  return this;
}

void sub_1BF93B654(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;

  MEMORY[0x1C3B8D890](v2, 0x10A1C40BEC01B52);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::SummaryItem_DetailedText::CopyFrom(SnippetUI::SummaryItem_DetailedText *this, const SnippetUI::SummaryItem_DetailedText *a2)
{
  if (a2 != this)
  {
    SnippetUI::SummaryItem_DetailedText::Clear(this);
    SnippetUI::SummaryItem_DetailedText::MergeFrom(this, a2);
  }
}

void SnippetUI::SummaryItem_DetailedText::InternalSwap(SnippetUI::SummaryItem_DetailedText *this, SnippetUI::SummaryItem_DetailedText *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  uint64_t v5;
  google::protobuf::UnknownFieldSet *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  google::protobuf::UnknownFieldSet *v27;

  v4 = (SnippetUI::SummaryItem_DetailedText *)((char *)this + 8);
  v5 = *((_QWORD *)a2 + 1);
  if ((*((_BYTE *)this + 8) & 1) != 0)
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v6 = v27;
      goto LABEL_6;
    }
LABEL_5:
    v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
    google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
    goto LABEL_7;
  }
  if ((v5 & 1) != 0)
    goto LABEL_5;
LABEL_7:
  v7 = (uint64_t *)*((_QWORD *)this + 2);
  v8 = (uint64_t **)((char *)a2 + 16);
  if (v7 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_13;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 2, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v7 = (uint64_t *)*((_QWORD *)this + 2);
  }
  v9 = *v8;
  if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 2, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v9 = *v8;
  }
  v10 = v7[2];
  v11 = *(_OWORD *)v7;
  v12 = v9[2];
  *(_OWORD *)v7 = *(_OWORD *)v9;
  v7[2] = v12;
  *(_OWORD *)v9 = v11;
  v9[2] = v10;
LABEL_13:
  v13 = (uint64_t *)*((_QWORD *)this + 3);
  v14 = (uint64_t **)((char *)a2 + 24);
  if (v13 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_19;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 3, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v13 = (uint64_t *)*((_QWORD *)this + 3);
  }
  v15 = *v14;
  if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 3, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v15 = *v14;
  }
  v16 = v13[2];
  v17 = *(_OWORD *)v13;
  v18 = v15[2];
  *(_OWORD *)v13 = *(_OWORD *)v15;
  v13[2] = v18;
  *(_OWORD *)v15 = v17;
  v15[2] = v16;
LABEL_19:
  v19 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v19;
  v20 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v20;
  v21 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v21;
  v22 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v22;
  v23 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v23;
  v24 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v24;
  v25 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v25;
  v26 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = *((_QWORD *)a2 + 11);
  *((_QWORD *)a2 + 11) = v26;
}

void SnippetUI::SummaryItem_Pair::InitAsDefaultInstance(SnippetUI::SummaryItem_Pair *this)
{
  qword_1ED1D41E8 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1ED1D41F0 = &SnippetUI::_TextProperty_default_instance_;
  qword_1ED1D41F8 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1ED1D4200 = &SnippetUI::_TextProperty_default_instance_;
  qword_1ED1D4208 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1ED1D4210 = &SnippetUI::_TextProperty_default_instance_;
  qword_1ED1D4218 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1ED1D4220 = &SnippetUI::_TextProperty_default_instance_;
  qword_1ED1D4228 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1ED1D4230 = &SnippetUI::_TextProperty_default_instance_;
  qword_1ED1D4238 = (uint64_t)&SnippetUI::_VisualProperty_default_instance_;
  unk_1ED1D4240 = &SnippetUI::_VisualProperty_default_instance_;
  qword_1ED1D4248 = (uint64_t)&SnippetUI::_ActionProperty_default_instance_;
}

uint64_t SnippetUI::SummaryItem_Pair::_Internal::text_4(SnippetUI::SummaryItem_Pair::_Internal *this, const SnippetUI::SummaryItem_Pair *a2)
{
  return *((_QWORD *)this + 4);
}

uint64_t SnippetUI::SummaryItem_Pair::_Internal::text_6(SnippetUI::SummaryItem_Pair::_Internal *this, const SnippetUI::SummaryItem_Pair *a2)
{
  return *((_QWORD *)this + 5);
}

uint64_t SnippetUI::SummaryItem_Pair::_Internal::text_1(SnippetUI::SummaryItem_Pair::_Internal *this, const SnippetUI::SummaryItem_Pair *a2)
{
  return *((_QWORD *)this + 6);
}

uint64_t SnippetUI::SummaryItem_Pair::_Internal::text_2(SnippetUI::SummaryItem_Pair::_Internal *this, const SnippetUI::SummaryItem_Pair *a2)
{
  return *((_QWORD *)this + 7);
}

uint64_t SnippetUI::SummaryItem_Pair::_Internal::text_3(SnippetUI::SummaryItem_Pair::_Internal *this, const SnippetUI::SummaryItem_Pair *a2)
{
  return *((_QWORD *)this + 8);
}

uint64_t SnippetUI::SummaryItem_Pair::_Internal::text_5(SnippetUI::SummaryItem_Pair::_Internal *this, const SnippetUI::SummaryItem_Pair *a2)
{
  return *((_QWORD *)this + 9);
}

uint64_t SnippetUI::SummaryItem_Pair::_Internal::text_7(SnippetUI::SummaryItem_Pair::_Internal *this, const SnippetUI::SummaryItem_Pair *a2)
{
  return *((_QWORD *)this + 10);
}

uint64_t SnippetUI::SummaryItem_Pair::_Internal::text_8(SnippetUI::SummaryItem_Pair::_Internal *this, const SnippetUI::SummaryItem_Pair *a2)
{
  return *((_QWORD *)this + 11);
}

uint64_t SnippetUI::SummaryItem_Pair::_Internal::text_9(SnippetUI::SummaryItem_Pair::_Internal *this, const SnippetUI::SummaryItem_Pair *a2)
{
  return *((_QWORD *)this + 12);
}

uint64_t SnippetUI::SummaryItem_Pair::_Internal::text_10(SnippetUI::SummaryItem_Pair::_Internal *this, const SnippetUI::SummaryItem_Pair *a2)
{
  return *((_QWORD *)this + 13);
}

uint64_t SnippetUI::SummaryItem_Pair::_Internal::thumbnail_1(SnippetUI::SummaryItem_Pair::_Internal *this, const SnippetUI::SummaryItem_Pair *a2)
{
  return *((_QWORD *)this + 14);
}

uint64_t SnippetUI::SummaryItem_Pair::_Internal::thumbnail_2(SnippetUI::SummaryItem_Pair::_Internal *this, const SnippetUI::SummaryItem_Pair *a2)
{
  return *((_QWORD *)this + 15);
}

uint64_t SnippetUI::SummaryItem_Pair::_Internal::action(SnippetUI::SummaryItem_Pair::_Internal *this, const SnippetUI::SummaryItem_Pair *a2)
{
  return *((_QWORD *)this + 16);
}

uint64_t SnippetUI::SummaryItem_Pair::clear_text_4(SnippetUI::SummaryItem_Pair *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 4);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 4) = 0;
  return result;
}

uint64_t SnippetUI::SummaryItem_Pair::clear_text_6(SnippetUI::SummaryItem_Pair *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 5);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 5) = 0;
  return result;
}

uint64_t SnippetUI::SummaryItem_Pair::clear_text_1(SnippetUI::SummaryItem_Pair *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 6);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 6) = 0;
  return result;
}

uint64_t SnippetUI::SummaryItem_Pair::clear_text_2(SnippetUI::SummaryItem_Pair *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 7);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 7) = 0;
  return result;
}

uint64_t SnippetUI::SummaryItem_Pair::clear_text_3(SnippetUI::SummaryItem_Pair *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 8);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 8) = 0;
  return result;
}

uint64_t SnippetUI::SummaryItem_Pair::clear_text_5(SnippetUI::SummaryItem_Pair *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 9);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 9) = 0;
  return result;
}

uint64_t SnippetUI::SummaryItem_Pair::clear_text_7(SnippetUI::SummaryItem_Pair *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 10);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 10) = 0;
  return result;
}

uint64_t SnippetUI::SummaryItem_Pair::clear_text_8(SnippetUI::SummaryItem_Pair *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 11);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 11) = 0;
  return result;
}

uint64_t SnippetUI::SummaryItem_Pair::clear_text_9(SnippetUI::SummaryItem_Pair *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 12);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 12) = 0;
  return result;
}

uint64_t SnippetUI::SummaryItem_Pair::clear_text_10(SnippetUI::SummaryItem_Pair *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 13);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 13) = 0;
  return result;
}

uint64_t SnippetUI::SummaryItem_Pair::clear_thumbnail_1(SnippetUI::SummaryItem_Pair *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 14);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 14) = 0;
  return result;
}

uint64_t SnippetUI::SummaryItem_Pair::clear_thumbnail_2(SnippetUI::SummaryItem_Pair *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 15);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 15) = 0;
  return result;
}

uint64_t SnippetUI::SummaryItem_Pair::clear_action(SnippetUI::SummaryItem_Pair *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 16);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 16) = 0;
  return result;
}

SnippetUI::SummaryItem_Pair *SnippetUI::SummaryItem_Pair::SummaryItem_Pair(SnippetUI::SummaryItem_Pair *this, const SnippetUI::SummaryItem_Pair *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  SnippetUI::TextProperty *v10;
  SnippetUI::ActionProperty *v11;
  SnippetUI::TextProperty *v12;
  SnippetUI::TextProperty *v13;
  SnippetUI::TextProperty *v14;
  SnippetUI::TextProperty *v15;
  SnippetUI::TextProperty *v16;
  SnippetUI::TextProperty *v17;
  SnippetUI::TextProperty *v18;
  SnippetUI::TextProperty *v19;
  SnippetUI::TextProperty *v20;
  SnippetUI::VisualProperty *v21;
  SnippetUI::VisualProperty *v22;

  *(_QWORD *)this = &off_1E792E230;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 34) = 0;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::SummaryItem_Pair *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  v5 = *((_QWORD *)a2 + 2);
  if (*(char *)(v5 + 23) < 0)
    v6 = *(_QWORD *)(v5 + 8);
  else
    v6 = *(unsigned __int8 *)(v5 + 23);
  if ((uint64_t *)v5 != &google::protobuf::internal::fixed_address_empty_string && v6 != 0)
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, v5);
  *((_QWORD *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  v8 = *((_QWORD *)a2 + 3);
  if (*(char *)(v8 + 23) < 0)
    v9 = *(_QWORD *)(v8 + 8);
  else
    v9 = *(unsigned __int8 *)(v8 + 23);
  if ((uint64_t *)v8 != &google::protobuf::internal::fixed_address_empty_string && v9)
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 3, v8);
  if (a2 == (const SnippetUI::SummaryItem_Pair *)&SnippetUI::_SummaryItem_Pair_default_instance_)
  {
    v11 = 0;
    *((_OWORD *)this + 6) = 0u;
    *((_OWORD *)this + 7) = 0u;
    *((_OWORD *)this + 4) = 0u;
    *((_OWORD *)this + 5) = 0u;
    *((_OWORD *)this + 2) = 0u;
    *((_OWORD *)this + 3) = 0u;
  }
  else
  {
    if (*((_QWORD *)a2 + 4))
    {
      v10 = (SnippetUI::TextProperty *)operator new();
      SnippetUI::TextProperty::TextProperty(v10, *((const SnippetUI::TextProperty **)a2 + 4));
    }
    else
    {
      v10 = 0;
    }
    *((_QWORD *)this + 4) = v10;
    if (*((_QWORD *)a2 + 5))
    {
      v12 = (SnippetUI::TextProperty *)operator new();
      SnippetUI::TextProperty::TextProperty(v12, *((const SnippetUI::TextProperty **)a2 + 5));
    }
    else
    {
      v12 = 0;
    }
    *((_QWORD *)this + 5) = v12;
    if (*((_QWORD *)a2 + 6))
    {
      v13 = (SnippetUI::TextProperty *)operator new();
      SnippetUI::TextProperty::TextProperty(v13, *((const SnippetUI::TextProperty **)a2 + 6));
    }
    else
    {
      v13 = 0;
    }
    *((_QWORD *)this + 6) = v13;
    if (*((_QWORD *)a2 + 7))
    {
      v14 = (SnippetUI::TextProperty *)operator new();
      SnippetUI::TextProperty::TextProperty(v14, *((const SnippetUI::TextProperty **)a2 + 7));
    }
    else
    {
      v14 = 0;
    }
    *((_QWORD *)this + 7) = v14;
    if (*((_QWORD *)a2 + 8))
    {
      v15 = (SnippetUI::TextProperty *)operator new();
      SnippetUI::TextProperty::TextProperty(v15, *((const SnippetUI::TextProperty **)a2 + 8));
    }
    else
    {
      v15 = 0;
    }
    *((_QWORD *)this + 8) = v15;
    if (*((_QWORD *)a2 + 9))
    {
      v16 = (SnippetUI::TextProperty *)operator new();
      SnippetUI::TextProperty::TextProperty(v16, *((const SnippetUI::TextProperty **)a2 + 9));
    }
    else
    {
      v16 = 0;
    }
    *((_QWORD *)this + 9) = v16;
    if (*((_QWORD *)a2 + 10))
    {
      v17 = (SnippetUI::TextProperty *)operator new();
      SnippetUI::TextProperty::TextProperty(v17, *((const SnippetUI::TextProperty **)a2 + 10));
    }
    else
    {
      v17 = 0;
    }
    *((_QWORD *)this + 10) = v17;
    if (*((_QWORD *)a2 + 11))
    {
      v18 = (SnippetUI::TextProperty *)operator new();
      SnippetUI::TextProperty::TextProperty(v18, *((const SnippetUI::TextProperty **)a2 + 11));
    }
    else
    {
      v18 = 0;
    }
    *((_QWORD *)this + 11) = v18;
    if (*((_QWORD *)a2 + 12))
    {
      v19 = (SnippetUI::TextProperty *)operator new();
      SnippetUI::TextProperty::TextProperty(v19, *((const SnippetUI::TextProperty **)a2 + 12));
    }
    else
    {
      v19 = 0;
    }
    *((_QWORD *)this + 12) = v19;
    if (*((_QWORD *)a2 + 13))
    {
      v20 = (SnippetUI::TextProperty *)operator new();
      SnippetUI::TextProperty::TextProperty(v20, *((const SnippetUI::TextProperty **)a2 + 13));
    }
    else
    {
      v20 = 0;
    }
    *((_QWORD *)this + 13) = v20;
    if (*((_QWORD *)a2 + 14))
    {
      v21 = (SnippetUI::VisualProperty *)operator new();
      SnippetUI::VisualProperty::VisualProperty(v21, *((const SnippetUI::VisualProperty **)a2 + 14));
    }
    else
    {
      v21 = 0;
    }
    *((_QWORD *)this + 14) = v21;
    if (*((_QWORD *)a2 + 15))
    {
      v22 = (SnippetUI::VisualProperty *)operator new();
      SnippetUI::VisualProperty::VisualProperty(v22, *((const SnippetUI::VisualProperty **)a2 + 15));
    }
    else
    {
      v22 = 0;
    }
    *((_QWORD *)this + 15) = v22;
    if (*((_QWORD *)a2 + 16))
    {
      v11 = (SnippetUI::ActionProperty *)operator new();
      SnippetUI::ActionProperty::ActionProperty(v11, *((const SnippetUI::ActionProperty **)a2 + 16));
    }
    else
    {
      v11 = 0;
    }
  }
  *((_QWORD *)this + 16) = v11;
  return this;
}

void sub_1BF93BFF0(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;

  MEMORY[0x1C3B8D890](v2, 0x10A1C40B18DE219);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::SummaryItem_Pair::CopyFrom(SnippetUI::SummaryItem_Pair *this, const SnippetUI::SummaryItem_Pair *a2)
{
  if (a2 != this)
  {
    SnippetUI::SummaryItem_Pair::Clear(this);
    SnippetUI::SummaryItem_Pair::MergeFrom(this, a2);
  }
}

void SnippetUI::SummaryItem_Pair::InternalSwap(SnippetUI::SummaryItem_Pair *this, SnippetUI::SummaryItem_Pair *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  uint64_t v5;
  google::protobuf::UnknownFieldSet *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  google::protobuf::UnknownFieldSet *v32;

  v4 = (SnippetUI::SummaryItem_Pair *)((char *)this + 8);
  v5 = *((_QWORD *)a2 + 1);
  if ((*((_BYTE *)this + 8) & 1) != 0)
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v6 = v32;
      goto LABEL_6;
    }
LABEL_5:
    v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
    google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
    goto LABEL_7;
  }
  if ((v5 & 1) != 0)
    goto LABEL_5;
LABEL_7:
  v7 = (uint64_t *)*((_QWORD *)this + 2);
  v8 = (uint64_t **)((char *)a2 + 16);
  if (v7 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_13;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 2, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v7 = (uint64_t *)*((_QWORD *)this + 2);
  }
  v9 = *v8;
  if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 2, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v9 = *v8;
  }
  v10 = v7[2];
  v11 = *(_OWORD *)v7;
  v12 = v9[2];
  *(_OWORD *)v7 = *(_OWORD *)v9;
  v7[2] = v12;
  *(_OWORD *)v9 = v11;
  v9[2] = v10;
LABEL_13:
  v13 = (uint64_t *)*((_QWORD *)this + 3);
  v14 = (uint64_t **)((char *)a2 + 24);
  if (v13 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_19;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 3, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v13 = (uint64_t *)*((_QWORD *)this + 3);
  }
  v15 = *v14;
  if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 3, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v15 = *v14;
  }
  v16 = v13[2];
  v17 = *(_OWORD *)v13;
  v18 = v15[2];
  *(_OWORD *)v13 = *(_OWORD *)v15;
  v13[2] = v18;
  *(_OWORD *)v15 = v17;
  v15[2] = v16;
LABEL_19:
  v19 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v19;
  v20 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v20;
  v21 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v21;
  v22 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v22;
  v23 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v23;
  v24 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v24;
  v25 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v25;
  v26 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = *((_QWORD *)a2 + 11);
  *((_QWORD *)a2 + 11) = v26;
  v27 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = *((_QWORD *)a2 + 12);
  *((_QWORD *)a2 + 12) = v27;
  v28 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = *((_QWORD *)a2 + 13);
  *((_QWORD *)a2 + 13) = v28;
  v29 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = *((_QWORD *)a2 + 14);
  *((_QWORD *)a2 + 14) = v29;
  v30 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = *((_QWORD *)a2 + 15);
  *((_QWORD *)a2 + 15) = v30;
  v31 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = *((_QWORD *)a2 + 16);
  *((_QWORD *)a2 + 16) = v31;
}

void SnippetUI::SummaryItem_PairV2::InitAsDefaultInstance(SnippetUI::SummaryItem_PairV2 *this)
{
  qword_1EF584350 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1EF584358 = &SnippetUI::_TextProperty_default_instance_;
  qword_1EF584360 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1EF584368 = &SnippetUI::_VisualProperty_default_instance_;
  qword_1EF584370 = (uint64_t)&SnippetUI::_VisualProperty_default_instance_;
  unk_1EF584378 = &SnippetUI::_ActionProperty_default_instance_;
}

uint64_t SnippetUI::SummaryItem_PairV2::_Internal::text_1(SnippetUI::SummaryItem_PairV2::_Internal *this, const SnippetUI::SummaryItem_PairV2 *a2)
{
  return *((_QWORD *)this + 4);
}

uint64_t SnippetUI::SummaryItem_PairV2::_Internal::thumbnail_1(SnippetUI::SummaryItem_PairV2::_Internal *this, const SnippetUI::SummaryItem_PairV2 *a2)
{
  return *((_QWORD *)this + 7);
}

uint64_t SnippetUI::SummaryItem_PairV2::_Internal::thumbnail_2(SnippetUI::SummaryItem_PairV2::_Internal *this, const SnippetUI::SummaryItem_PairV2 *a2)
{
  return *((_QWORD *)this + 8);
}

uint64_t SnippetUI::SummaryItem_PairV2::_Internal::text_2(SnippetUI::SummaryItem_PairV2::_Internal *this, const SnippetUI::SummaryItem_PairV2 *a2)
{
  return *((_QWORD *)this + 5);
}

uint64_t SnippetUI::SummaryItem_PairV2::_Internal::text_3(SnippetUI::SummaryItem_PairV2::_Internal *this, const SnippetUI::SummaryItem_PairV2 *a2)
{
  return *((_QWORD *)this + 6);
}

uint64_t SnippetUI::SummaryItem_PairV2::_Internal::action(SnippetUI::SummaryItem_PairV2::_Internal *this, const SnippetUI::SummaryItem_PairV2 *a2)
{
  return *((_QWORD *)this + 9);
}

uint64_t SnippetUI::SummaryItem_PairV2::clear_text_1(SnippetUI::SummaryItem_PairV2 *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 4);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 4) = 0;
  return result;
}

uint64_t SnippetUI::SummaryItem_PairV2::clear_thumbnail_1(SnippetUI::SummaryItem_PairV2 *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 7);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 7) = 0;
  return result;
}

uint64_t SnippetUI::SummaryItem_PairV2::clear_thumbnail_2(SnippetUI::SummaryItem_PairV2 *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 8);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 8) = 0;
  return result;
}

uint64_t SnippetUI::SummaryItem_PairV2::clear_text_2(SnippetUI::SummaryItem_PairV2 *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 5);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 5) = 0;
  return result;
}

uint64_t SnippetUI::SummaryItem_PairV2::clear_text_3(SnippetUI::SummaryItem_PairV2 *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 6);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 6) = 0;
  return result;
}

uint64_t SnippetUI::SummaryItem_PairV2::clear_action(SnippetUI::SummaryItem_PairV2 *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 9);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 9) = 0;
  return result;
}

SnippetUI::SummaryItem_PairV2 *SnippetUI::SummaryItem_PairV2::SummaryItem_PairV2(SnippetUI::SummaryItem_PairV2 *this, const SnippetUI::SummaryItem_PairV2 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  SnippetUI::TextProperty *v10;
  SnippetUI::ActionProperty *v11;
  SnippetUI::TextProperty *v12;
  SnippetUI::TextProperty *v13;
  SnippetUI::VisualProperty *v14;
  SnippetUI::VisualProperty *v15;

  *(_QWORD *)this = &off_1E792E2F0;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 20) = 0;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::SummaryItem_PairV2 *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  v5 = *((_QWORD *)a2 + 2);
  if (*(char *)(v5 + 23) < 0)
    v6 = *(_QWORD *)(v5 + 8);
  else
    v6 = *(unsigned __int8 *)(v5 + 23);
  if ((uint64_t *)v5 != &google::protobuf::internal::fixed_address_empty_string && v6 != 0)
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, v5);
  *((_QWORD *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  v8 = *((_QWORD *)a2 + 3);
  if (*(char *)(v8 + 23) < 0)
    v9 = *(_QWORD *)(v8 + 8);
  else
    v9 = *(unsigned __int8 *)(v8 + 23);
  if ((uint64_t *)v8 != &google::protobuf::internal::fixed_address_empty_string && v9)
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 3, v8);
  if (a2 == (const SnippetUI::SummaryItem_PairV2 *)&SnippetUI::_SummaryItem_PairV2_default_instance_)
  {
    v11 = 0;
    *((_QWORD *)this + 8) = 0;
    *((_OWORD *)this + 2) = 0u;
    *((_OWORD *)this + 3) = 0u;
  }
  else
  {
    if (*((_QWORD *)a2 + 4))
    {
      v10 = (SnippetUI::TextProperty *)operator new();
      SnippetUI::TextProperty::TextProperty(v10, *((const SnippetUI::TextProperty **)a2 + 4));
    }
    else
    {
      v10 = 0;
    }
    *((_QWORD *)this + 4) = v10;
    if (*((_QWORD *)a2 + 5))
    {
      v12 = (SnippetUI::TextProperty *)operator new();
      SnippetUI::TextProperty::TextProperty(v12, *((const SnippetUI::TextProperty **)a2 + 5));
    }
    else
    {
      v12 = 0;
    }
    *((_QWORD *)this + 5) = v12;
    if (*((_QWORD *)a2 + 6))
    {
      v13 = (SnippetUI::TextProperty *)operator new();
      SnippetUI::TextProperty::TextProperty(v13, *((const SnippetUI::TextProperty **)a2 + 6));
    }
    else
    {
      v13 = 0;
    }
    *((_QWORD *)this + 6) = v13;
    if (*((_QWORD *)a2 + 7))
    {
      v14 = (SnippetUI::VisualProperty *)operator new();
      SnippetUI::VisualProperty::VisualProperty(v14, *((const SnippetUI::VisualProperty **)a2 + 7));
    }
    else
    {
      v14 = 0;
    }
    *((_QWORD *)this + 7) = v14;
    if (*((_QWORD *)a2 + 8))
    {
      v15 = (SnippetUI::VisualProperty *)operator new();
      SnippetUI::VisualProperty::VisualProperty(v15, *((const SnippetUI::VisualProperty **)a2 + 8));
    }
    else
    {
      v15 = 0;
    }
    *((_QWORD *)this + 8) = v15;
    if (*((_QWORD *)a2 + 9))
    {
      v11 = (SnippetUI::ActionProperty *)operator new();
      SnippetUI::ActionProperty::ActionProperty(v11, *((const SnippetUI::ActionProperty **)a2 + 9));
    }
    else
    {
      v11 = 0;
    }
  }
  *((_QWORD *)this + 9) = v11;
  return this;
}

void sub_1BF93C6B0(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;

  MEMORY[0x1C3B8D890](v2, 0x10A1C40B18DE219);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::SummaryItem_PairV2::CopyFrom(SnippetUI::SummaryItem_PairV2 *this, const SnippetUI::SummaryItem_PairV2 *a2)
{
  if (a2 != this)
  {
    SnippetUI::SummaryItem_PairV2::Clear(this);
    SnippetUI::SummaryItem_PairV2::MergeFrom(this, a2);
  }
}

void SnippetUI::SummaryItem_PairV2::InternalSwap(SnippetUI::SummaryItem_PairV2 *this, SnippetUI::SummaryItem_PairV2 *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  uint64_t v5;
  google::protobuf::UnknownFieldSet *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  google::protobuf::UnknownFieldSet *v25;

  v4 = (SnippetUI::SummaryItem_PairV2 *)((char *)this + 8);
  v5 = *((_QWORD *)a2 + 1);
  if ((*((_BYTE *)this + 8) & 1) != 0)
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v6 = v25;
      goto LABEL_6;
    }
LABEL_5:
    v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
    google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
    goto LABEL_7;
  }
  if ((v5 & 1) != 0)
    goto LABEL_5;
LABEL_7:
  v7 = (uint64_t *)*((_QWORD *)this + 2);
  v8 = (uint64_t **)((char *)a2 + 16);
  if (v7 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_13;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 2, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v7 = (uint64_t *)*((_QWORD *)this + 2);
  }
  v9 = *v8;
  if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 2, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v9 = *v8;
  }
  v10 = v7[2];
  v11 = *(_OWORD *)v7;
  v12 = v9[2];
  *(_OWORD *)v7 = *(_OWORD *)v9;
  v7[2] = v12;
  *(_OWORD *)v9 = v11;
  v9[2] = v10;
LABEL_13:
  v13 = (uint64_t *)*((_QWORD *)this + 3);
  v14 = (uint64_t **)((char *)a2 + 24);
  if (v13 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_19;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 3, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v13 = (uint64_t *)*((_QWORD *)this + 3);
  }
  v15 = *v14;
  if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 3, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v15 = *v14;
  }
  v16 = v13[2];
  v17 = *(_OWORD *)v13;
  v18 = v15[2];
  *(_OWORD *)v13 = *(_OWORD *)v15;
  v13[2] = v18;
  *(_OWORD *)v15 = v17;
  v15[2] = v16;
LABEL_19:
  v19 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v19;
  v20 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v20;
  v21 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v21;
  v22 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v22;
  v23 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v23;
  v24 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v24;
}

void SnippetUI::SummaryItem_PairNumber::InitAsDefaultInstance(SnippetUI::SummaryItem_PairNumber *this)
{
  qword_1ED1D47A8 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1ED1D47B0 = &SnippetUI::_TextProperty_default_instance_;
  qword_1ED1D47B8 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1ED1D47C0 = &SnippetUI::_TextProperty_default_instance_;
  qword_1ED1D47C8 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1ED1D47D0 = &SnippetUI::_TextProperty_default_instance_;
  qword_1ED1D47D8 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1ED1D47E0 = &SnippetUI::_TextProperty_default_instance_;
  qword_1ED1D47E8 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1ED1D47F0 = &SnippetUI::_TextProperty_default_instance_;
  qword_1ED1D47F8 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1ED1D4800 = &SnippetUI::_VisualProperty_default_instance_;
  qword_1ED1D4808 = (uint64_t)&SnippetUI::_VisualProperty_default_instance_;
  unk_1ED1D4810 = &SnippetUI::_ActionProperty_default_instance_;
}

uint64_t SnippetUI::SummaryItem_PairNumber::_Internal::number_1(SnippetUI::SummaryItem_PairNumber::_Internal *this, const SnippetUI::SummaryItem_PairNumber *a2)
{
  return *((_QWORD *)this + 4);
}

uint64_t SnippetUI::SummaryItem_PairNumber::_Internal::number_2(SnippetUI::SummaryItem_PairNumber::_Internal *this, const SnippetUI::SummaryItem_PairNumber *a2)
{
  return *((_QWORD *)this + 5);
}

uint64_t SnippetUI::SummaryItem_PairNumber::_Internal::text_1(SnippetUI::SummaryItem_PairNumber::_Internal *this, const SnippetUI::SummaryItem_PairNumber *a2)
{
  return *((_QWORD *)this + 6);
}

uint64_t SnippetUI::SummaryItem_PairNumber::_Internal::text_2(SnippetUI::SummaryItem_PairNumber::_Internal *this, const SnippetUI::SummaryItem_PairNumber *a2)
{
  return *((_QWORD *)this + 7);
}

uint64_t SnippetUI::SummaryItem_PairNumber::_Internal::text_3(SnippetUI::SummaryItem_PairNumber::_Internal *this, const SnippetUI::SummaryItem_PairNumber *a2)
{
  return *((_QWORD *)this + 8);
}

uint64_t SnippetUI::SummaryItem_PairNumber::_Internal::text_4(SnippetUI::SummaryItem_PairNumber::_Internal *this, const SnippetUI::SummaryItem_PairNumber *a2)
{
  return *((_QWORD *)this + 9);
}

uint64_t SnippetUI::SummaryItem_PairNumber::_Internal::text_5(SnippetUI::SummaryItem_PairNumber::_Internal *this, const SnippetUI::SummaryItem_PairNumber *a2)
{
  return *((_QWORD *)this + 10);
}

uint64_t SnippetUI::SummaryItem_PairNumber::_Internal::text_6(SnippetUI::SummaryItem_PairNumber::_Internal *this, const SnippetUI::SummaryItem_PairNumber *a2)
{
  return *((_QWORD *)this + 11);
}

uint64_t SnippetUI::SummaryItem_PairNumber::_Internal::text_7(SnippetUI::SummaryItem_PairNumber::_Internal *this, const SnippetUI::SummaryItem_PairNumber *a2)
{
  return *((_QWORD *)this + 12);
}

uint64_t SnippetUI::SummaryItem_PairNumber::_Internal::text_8(SnippetUI::SummaryItem_PairNumber::_Internal *this, const SnippetUI::SummaryItem_PairNumber *a2)
{
  return *((_QWORD *)this + 13);
}

uint64_t SnippetUI::SummaryItem_PairNumber::_Internal::text_9(SnippetUI::SummaryItem_PairNumber::_Internal *this, const SnippetUI::SummaryItem_PairNumber *a2)
{
  return *((_QWORD *)this + 14);
}

uint64_t SnippetUI::SummaryItem_PairNumber::_Internal::thumbnail_1(SnippetUI::SummaryItem_PairNumber::_Internal *this, const SnippetUI::SummaryItem_PairNumber *a2)
{
  return *((_QWORD *)this + 15);
}

uint64_t SnippetUI::SummaryItem_PairNumber::_Internal::thumbnail_2(SnippetUI::SummaryItem_PairNumber::_Internal *this, const SnippetUI::SummaryItem_PairNumber *a2)
{
  return *((_QWORD *)this + 16);
}

uint64_t SnippetUI::SummaryItem_PairNumber::_Internal::action(SnippetUI::SummaryItem_PairNumber::_Internal *this, const SnippetUI::SummaryItem_PairNumber *a2)
{
  return *((_QWORD *)this + 17);
}

uint64_t SnippetUI::SummaryItem_PairNumber::clear_number_1(SnippetUI::SummaryItem_PairNumber *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 4);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 4) = 0;
  return result;
}

uint64_t SnippetUI::SummaryItem_PairNumber::clear_number_2(SnippetUI::SummaryItem_PairNumber *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 5);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 5) = 0;
  return result;
}

uint64_t SnippetUI::SummaryItem_PairNumber::clear_text_1(SnippetUI::SummaryItem_PairNumber *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 6);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 6) = 0;
  return result;
}

uint64_t SnippetUI::SummaryItem_PairNumber::clear_text_2(SnippetUI::SummaryItem_PairNumber *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 7);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 7) = 0;
  return result;
}

uint64_t SnippetUI::SummaryItem_PairNumber::clear_text_3(SnippetUI::SummaryItem_PairNumber *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 8);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 8) = 0;
  return result;
}

uint64_t SnippetUI::SummaryItem_PairNumber::clear_text_4(SnippetUI::SummaryItem_PairNumber *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 9);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 9) = 0;
  return result;
}

uint64_t SnippetUI::SummaryItem_PairNumber::clear_text_5(SnippetUI::SummaryItem_PairNumber *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 10);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 10) = 0;
  return result;
}

uint64_t SnippetUI::SummaryItem_PairNumber::clear_text_6(SnippetUI::SummaryItem_PairNumber *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 11);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 11) = 0;
  return result;
}

uint64_t SnippetUI::SummaryItem_PairNumber::clear_text_7(SnippetUI::SummaryItem_PairNumber *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 12);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 12) = 0;
  return result;
}

uint64_t SnippetUI::SummaryItem_PairNumber::clear_text_8(SnippetUI::SummaryItem_PairNumber *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 13);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 13) = 0;
  return result;
}

uint64_t SnippetUI::SummaryItem_PairNumber::clear_text_9(SnippetUI::SummaryItem_PairNumber *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 14);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 14) = 0;
  return result;
}

uint64_t SnippetUI::SummaryItem_PairNumber::clear_thumbnail_1(SnippetUI::SummaryItem_PairNumber *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 15);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 15) = 0;
  return result;
}

uint64_t SnippetUI::SummaryItem_PairNumber::clear_thumbnail_2(SnippetUI::SummaryItem_PairNumber *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 16);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 16) = 0;
  return result;
}

uint64_t SnippetUI::SummaryItem_PairNumber::clear_action(SnippetUI::SummaryItem_PairNumber *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 17);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 17) = 0;
  return result;
}

SnippetUI::SummaryItem_PairNumber *SnippetUI::SummaryItem_PairNumber::SummaryItem_PairNumber(SnippetUI::SummaryItem_PairNumber *this, const SnippetUI::SummaryItem_PairNumber *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  SnippetUI::TextProperty *v10;
  SnippetUI::ActionProperty *v11;
  SnippetUI::TextProperty *v12;
  SnippetUI::TextProperty *v13;
  SnippetUI::TextProperty *v14;
  SnippetUI::TextProperty *v15;
  SnippetUI::TextProperty *v16;
  SnippetUI::TextProperty *v17;
  SnippetUI::TextProperty *v18;
  SnippetUI::TextProperty *v19;
  SnippetUI::TextProperty *v20;
  SnippetUI::TextProperty *v21;
  SnippetUI::VisualProperty *v22;
  SnippetUI::VisualProperty *v23;

  *(_QWORD *)this = &off_1E792E3B0;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 36) = 0;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::SummaryItem_PairNumber *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  v5 = *((_QWORD *)a2 + 2);
  if (*(char *)(v5 + 23) < 0)
    v6 = *(_QWORD *)(v5 + 8);
  else
    v6 = *(unsigned __int8 *)(v5 + 23);
  if ((uint64_t *)v5 != &google::protobuf::internal::fixed_address_empty_string && v6 != 0)
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, v5);
  *((_QWORD *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  v8 = *((_QWORD *)a2 + 3);
  if (*(char *)(v8 + 23) < 0)
    v9 = *(_QWORD *)(v8 + 8);
  else
    v9 = *(unsigned __int8 *)(v8 + 23);
  if ((uint64_t *)v8 != &google::protobuf::internal::fixed_address_empty_string && v9)
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 3, v8);
  if (a2 == (const SnippetUI::SummaryItem_PairNumber *)&SnippetUI::_SummaryItem_PairNumber_default_instance_)
  {
    v11 = 0;
    *((_QWORD *)this + 16) = 0;
    *((_OWORD *)this + 6) = 0u;
    *((_OWORD *)this + 7) = 0u;
    *((_OWORD *)this + 4) = 0u;
    *((_OWORD *)this + 5) = 0u;
    *((_OWORD *)this + 2) = 0u;
    *((_OWORD *)this + 3) = 0u;
  }
  else
  {
    if (*((_QWORD *)a2 + 4))
    {
      v10 = (SnippetUI::TextProperty *)operator new();
      SnippetUI::TextProperty::TextProperty(v10, *((const SnippetUI::TextProperty **)a2 + 4));
    }
    else
    {
      v10 = 0;
    }
    *((_QWORD *)this + 4) = v10;
    if (*((_QWORD *)a2 + 5))
    {
      v12 = (SnippetUI::TextProperty *)operator new();
      SnippetUI::TextProperty::TextProperty(v12, *((const SnippetUI::TextProperty **)a2 + 5));
    }
    else
    {
      v12 = 0;
    }
    *((_QWORD *)this + 5) = v12;
    if (*((_QWORD *)a2 + 6))
    {
      v13 = (SnippetUI::TextProperty *)operator new();
      SnippetUI::TextProperty::TextProperty(v13, *((const SnippetUI::TextProperty **)a2 + 6));
    }
    else
    {
      v13 = 0;
    }
    *((_QWORD *)this + 6) = v13;
    if (*((_QWORD *)a2 + 7))
    {
      v14 = (SnippetUI::TextProperty *)operator new();
      SnippetUI::TextProperty::TextProperty(v14, *((const SnippetUI::TextProperty **)a2 + 7));
    }
    else
    {
      v14 = 0;
    }
    *((_QWORD *)this + 7) = v14;
    if (*((_QWORD *)a2 + 8))
    {
      v15 = (SnippetUI::TextProperty *)operator new();
      SnippetUI::TextProperty::TextProperty(v15, *((const SnippetUI::TextProperty **)a2 + 8));
    }
    else
    {
      v15 = 0;
    }
    *((_QWORD *)this + 8) = v15;
    if (*((_QWORD *)a2 + 9))
    {
      v16 = (SnippetUI::TextProperty *)operator new();
      SnippetUI::TextProperty::TextProperty(v16, *((const SnippetUI::TextProperty **)a2 + 9));
    }
    else
    {
      v16 = 0;
    }
    *((_QWORD *)this + 9) = v16;
    if (*((_QWORD *)a2 + 10))
    {
      v17 = (SnippetUI::TextProperty *)operator new();
      SnippetUI::TextProperty::TextProperty(v17, *((const SnippetUI::TextProperty **)a2 + 10));
    }
    else
    {
      v17 = 0;
    }
    *((_QWORD *)this + 10) = v17;
    if (*((_QWORD *)a2 + 11))
    {
      v18 = (SnippetUI::TextProperty *)operator new();
      SnippetUI::TextProperty::TextProperty(v18, *((const SnippetUI::TextProperty **)a2 + 11));
    }
    else
    {
      v18 = 0;
    }
    *((_QWORD *)this + 11) = v18;
    if (*((_QWORD *)a2 + 12))
    {
      v19 = (SnippetUI::TextProperty *)operator new();
      SnippetUI::TextProperty::TextProperty(v19, *((const SnippetUI::TextProperty **)a2 + 12));
    }
    else
    {
      v19 = 0;
    }
    *((_QWORD *)this + 12) = v19;
    if (*((_QWORD *)a2 + 13))
    {
      v20 = (SnippetUI::TextProperty *)operator new();
      SnippetUI::TextProperty::TextProperty(v20, *((const SnippetUI::TextProperty **)a2 + 13));
    }
    else
    {
      v20 = 0;
    }
    *((_QWORD *)this + 13) = v20;
    if (*((_QWORD *)a2 + 14))
    {
      v21 = (SnippetUI::TextProperty *)operator new();
      SnippetUI::TextProperty::TextProperty(v21, *((const SnippetUI::TextProperty **)a2 + 14));
    }
    else
    {
      v21 = 0;
    }
    *((_QWORD *)this + 14) = v21;
    if (*((_QWORD *)a2 + 15))
    {
      v22 = (SnippetUI::VisualProperty *)operator new();
      SnippetUI::VisualProperty::VisualProperty(v22, *((const SnippetUI::VisualProperty **)a2 + 15));
    }
    else
    {
      v22 = 0;
    }
    *((_QWORD *)this + 15) = v22;
    if (*((_QWORD *)a2 + 16))
    {
      v23 = (SnippetUI::VisualProperty *)operator new();
      SnippetUI::VisualProperty::VisualProperty(v23, *((const SnippetUI::VisualProperty **)a2 + 16));
    }
    else
    {
      v23 = 0;
    }
    *((_QWORD *)this + 16) = v23;
    if (*((_QWORD *)a2 + 17))
    {
      v11 = (SnippetUI::ActionProperty *)operator new();
      SnippetUI::ActionProperty::ActionProperty(v11, *((const SnippetUI::ActionProperty **)a2 + 17));
    }
    else
    {
      v11 = 0;
    }
  }
  *((_QWORD *)this + 17) = v11;
  return this;
}

void sub_1BF93D09C(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;

  MEMORY[0x1C3B8D890](v2, 0x10A1C40B18DE219);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::SummaryItem_PairNumber::CopyFrom(SnippetUI::SummaryItem_PairNumber *this, const SnippetUI::SummaryItem_PairNumber *a2)
{
  if (a2 != this)
  {
    SnippetUI::SummaryItem_PairNumber::Clear(this);
    SnippetUI::SummaryItem_PairNumber::MergeFrom(this, a2);
  }
}

void SnippetUI::SummaryItem_PairNumber::InternalSwap(SnippetUI::SummaryItem_PairNumber *this, SnippetUI::SummaryItem_PairNumber *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  uint64_t v5;
  google::protobuf::UnknownFieldSet *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  google::protobuf::UnknownFieldSet *v33;

  v4 = (SnippetUI::SummaryItem_PairNumber *)((char *)this + 8);
  v5 = *((_QWORD *)a2 + 1);
  if ((*((_BYTE *)this + 8) & 1) != 0)
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v6 = v33;
      goto LABEL_6;
    }
LABEL_5:
    v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
    google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
    goto LABEL_7;
  }
  if ((v5 & 1) != 0)
    goto LABEL_5;
LABEL_7:
  v7 = (uint64_t *)*((_QWORD *)this + 2);
  v8 = (uint64_t **)((char *)a2 + 16);
  if (v7 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_13;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 2, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v7 = (uint64_t *)*((_QWORD *)this + 2);
  }
  v9 = *v8;
  if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 2, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v9 = *v8;
  }
  v10 = v7[2];
  v11 = *(_OWORD *)v7;
  v12 = v9[2];
  *(_OWORD *)v7 = *(_OWORD *)v9;
  v7[2] = v12;
  *(_OWORD *)v9 = v11;
  v9[2] = v10;
LABEL_13:
  v13 = (uint64_t *)*((_QWORD *)this + 3);
  v14 = (uint64_t **)((char *)a2 + 24);
  if (v13 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_19;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 3, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v13 = (uint64_t *)*((_QWORD *)this + 3);
  }
  v15 = *v14;
  if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 3, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v15 = *v14;
  }
  v16 = v13[2];
  v17 = *(_OWORD *)v13;
  v18 = v15[2];
  *(_OWORD *)v13 = *(_OWORD *)v15;
  v13[2] = v18;
  *(_OWORD *)v15 = v17;
  v15[2] = v16;
LABEL_19:
  v19 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v19;
  v20 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v20;
  v21 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v21;
  v22 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v22;
  v23 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v23;
  v24 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v24;
  v25 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v25;
  v26 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = *((_QWORD *)a2 + 11);
  *((_QWORD *)a2 + 11) = v26;
  v27 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = *((_QWORD *)a2 + 12);
  *((_QWORD *)a2 + 12) = v27;
  v28 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = *((_QWORD *)a2 + 13);
  *((_QWORD *)a2 + 13) = v28;
  v29 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = *((_QWORD *)a2 + 14);
  *((_QWORD *)a2 + 14) = v29;
  v30 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = *((_QWORD *)a2 + 15);
  *((_QWORD *)a2 + 15) = v30;
  v31 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = *((_QWORD *)a2 + 16);
  *((_QWORD *)a2 + 16) = v31;
  v32 = *((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = *((_QWORD *)a2 + 17);
  *((_QWORD *)a2 + 17) = v32;
}

void SnippetUI::SummaryItem_PairNumberV2::InitAsDefaultInstance(SnippetUI::SummaryItem_PairNumberV2 *this)
{
  qword_1EF5843A8 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1EF5843B0 = &SnippetUI::_TextProperty_default_instance_;
  qword_1EF5843B8 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1EF5843C0 = &SnippetUI::_TextProperty_default_instance_;
  qword_1EF5843C8 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1EF5843D0 = &SnippetUI::_TextProperty_default_instance_;
  qword_1EF5843D8 = (uint64_t)&SnippetUI::_MultilineTextProperty_default_instance_;
  unk_1EF5843E0 = &SnippetUI::_VisualProperty_default_instance_;
  qword_1EF5843E8 = (uint64_t)&SnippetUI::_VisualProperty_default_instance_;
  unk_1EF5843F0 = &SnippetUI::_ActionProperty_default_instance_;
}

uint64_t SnippetUI::SummaryItem_PairNumberV2::_Internal::number_1(SnippetUI::SummaryItem_PairNumberV2::_Internal *this, const SnippetUI::SummaryItem_PairNumberV2 *a2)
{
  return *((_QWORD *)this + 4);
}

uint64_t SnippetUI::SummaryItem_PairNumberV2::_Internal::number_2(SnippetUI::SummaryItem_PairNumberV2::_Internal *this, const SnippetUI::SummaryItem_PairNumberV2 *a2)
{
  return *((_QWORD *)this + 5);
}

uint64_t SnippetUI::SummaryItem_PairNumberV2::_Internal::text_1(SnippetUI::SummaryItem_PairNumberV2::_Internal *this, const SnippetUI::SummaryItem_PairNumberV2 *a2)
{
  return *((_QWORD *)this + 6);
}

uint64_t SnippetUI::SummaryItem_PairNumberV2::_Internal::text_2(SnippetUI::SummaryItem_PairNumberV2::_Internal *this, const SnippetUI::SummaryItem_PairNumberV2 *a2)
{
  return *((_QWORD *)this + 7);
}

uint64_t SnippetUI::SummaryItem_PairNumberV2::_Internal::text_3(SnippetUI::SummaryItem_PairNumberV2::_Internal *this, const SnippetUI::SummaryItem_PairNumberV2 *a2)
{
  return *((_QWORD *)this + 8);
}

uint64_t SnippetUI::SummaryItem_PairNumberV2::_Internal::text_4(SnippetUI::SummaryItem_PairNumberV2::_Internal *this, const SnippetUI::SummaryItem_PairNumberV2 *a2)
{
  return *((_QWORD *)this + 9);
}

uint64_t SnippetUI::SummaryItem_PairNumberV2::_Internal::text_5(SnippetUI::SummaryItem_PairNumberV2::_Internal *this, const SnippetUI::SummaryItem_PairNumberV2 *a2)
{
  return *((_QWORD *)this + 10);
}

uint64_t SnippetUI::SummaryItem_PairNumberV2::_Internal::thumbnail_1(SnippetUI::SummaryItem_PairNumberV2::_Internal *this, const SnippetUI::SummaryItem_PairNumberV2 *a2)
{
  return *((_QWORD *)this + 11);
}

uint64_t SnippetUI::SummaryItem_PairNumberV2::_Internal::thumbnail_2(SnippetUI::SummaryItem_PairNumberV2::_Internal *this, const SnippetUI::SummaryItem_PairNumberV2 *a2)
{
  return *((_QWORD *)this + 12);
}

uint64_t SnippetUI::SummaryItem_PairNumberV2::_Internal::action(SnippetUI::SummaryItem_PairNumberV2::_Internal *this, const SnippetUI::SummaryItem_PairNumberV2 *a2)
{
  return *((_QWORD *)this + 13);
}

uint64_t SnippetUI::SummaryItem_PairNumberV2::clear_number_1(SnippetUI::SummaryItem_PairNumberV2 *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 4);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 4) = 0;
  return result;
}

uint64_t SnippetUI::SummaryItem_PairNumberV2::clear_number_2(SnippetUI::SummaryItem_PairNumberV2 *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 5);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 5) = 0;
  return result;
}

uint64_t SnippetUI::SummaryItem_PairNumberV2::clear_text_1(SnippetUI::SummaryItem_PairNumberV2 *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 6);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 6) = 0;
  return result;
}

uint64_t SnippetUI::SummaryItem_PairNumberV2::clear_text_2(SnippetUI::SummaryItem_PairNumberV2 *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 7);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 7) = 0;
  return result;
}

uint64_t SnippetUI::SummaryItem_PairNumberV2::clear_text_3(SnippetUI::SummaryItem_PairNumberV2 *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 8);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 8) = 0;
  return result;
}

uint64_t SnippetUI::SummaryItem_PairNumberV2::clear_text_4(SnippetUI::SummaryItem_PairNumberV2 *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 9);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 9) = 0;
  return result;
}

uint64_t SnippetUI::SummaryItem_PairNumberV2::clear_text_5(SnippetUI::SummaryItem_PairNumberV2 *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 10);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 10) = 0;
  return result;
}

uint64_t SnippetUI::SummaryItem_PairNumberV2::clear_thumbnail_1(SnippetUI::SummaryItem_PairNumberV2 *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 11);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 11) = 0;
  return result;
}

uint64_t SnippetUI::SummaryItem_PairNumberV2::clear_thumbnail_2(SnippetUI::SummaryItem_PairNumberV2 *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 12);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 12) = 0;
  return result;
}

uint64_t SnippetUI::SummaryItem_PairNumberV2::clear_action(SnippetUI::SummaryItem_PairNumberV2 *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 13);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 13) = 0;
  return result;
}

SnippetUI::SummaryItem_PairNumberV2 *SnippetUI::SummaryItem_PairNumberV2::SummaryItem_PairNumberV2(SnippetUI::SummaryItem_PairNumberV2 *this, const SnippetUI::SummaryItem_PairNumberV2 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  SnippetUI::TextProperty *v10;
  SnippetUI::ActionProperty *v11;
  SnippetUI::TextProperty *v12;
  SnippetUI::TextProperty *v13;
  SnippetUI::TextProperty *v14;
  SnippetUI::TextProperty *v15;
  SnippetUI::TextProperty *v16;
  SnippetUI::MultilineTextProperty *v17;
  SnippetUI::VisualProperty *v18;
  SnippetUI::VisualProperty *v19;

  *(_QWORD *)this = &off_1E792E470;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 28) = 0;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::SummaryItem_PairNumberV2 *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  v5 = *((_QWORD *)a2 + 2);
  if (*(char *)(v5 + 23) < 0)
    v6 = *(_QWORD *)(v5 + 8);
  else
    v6 = *(unsigned __int8 *)(v5 + 23);
  if ((uint64_t *)v5 != &google::protobuf::internal::fixed_address_empty_string && v6 != 0)
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, v5);
  *((_QWORD *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  v8 = *((_QWORD *)a2 + 3);
  if (*(char *)(v8 + 23) < 0)
    v9 = *(_QWORD *)(v8 + 8);
  else
    v9 = *(unsigned __int8 *)(v8 + 23);
  if ((uint64_t *)v8 != &google::protobuf::internal::fixed_address_empty_string && v9)
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 3, v8);
  if (a2 == (const SnippetUI::SummaryItem_PairNumberV2 *)&SnippetUI::_SummaryItem_PairNumberV2_default_instance_)
  {
    v11 = 0;
    *((_QWORD *)this + 12) = 0;
    *((_OWORD *)this + 4) = 0u;
    *((_OWORD *)this + 5) = 0u;
    *((_OWORD *)this + 2) = 0u;
    *((_OWORD *)this + 3) = 0u;
  }
  else
  {
    if (*((_QWORD *)a2 + 4))
    {
      v10 = (SnippetUI::TextProperty *)operator new();
      SnippetUI::TextProperty::TextProperty(v10, *((const SnippetUI::TextProperty **)a2 + 4));
    }
    else
    {
      v10 = 0;
    }
    *((_QWORD *)this + 4) = v10;
    if (*((_QWORD *)a2 + 5))
    {
      v12 = (SnippetUI::TextProperty *)operator new();
      SnippetUI::TextProperty::TextProperty(v12, *((const SnippetUI::TextProperty **)a2 + 5));
    }
    else
    {
      v12 = 0;
    }
    *((_QWORD *)this + 5) = v12;
    if (*((_QWORD *)a2 + 6))
    {
      v13 = (SnippetUI::TextProperty *)operator new();
      SnippetUI::TextProperty::TextProperty(v13, *((const SnippetUI::TextProperty **)a2 + 6));
    }
    else
    {
      v13 = 0;
    }
    *((_QWORD *)this + 6) = v13;
    if (*((_QWORD *)a2 + 7))
    {
      v14 = (SnippetUI::TextProperty *)operator new();
      SnippetUI::TextProperty::TextProperty(v14, *((const SnippetUI::TextProperty **)a2 + 7));
    }
    else
    {
      v14 = 0;
    }
    *((_QWORD *)this + 7) = v14;
    if (*((_QWORD *)a2 + 8))
    {
      v15 = (SnippetUI::TextProperty *)operator new();
      SnippetUI::TextProperty::TextProperty(v15, *((const SnippetUI::TextProperty **)a2 + 8));
    }
    else
    {
      v15 = 0;
    }
    *((_QWORD *)this + 8) = v15;
    if (*((_QWORD *)a2 + 9))
    {
      v16 = (SnippetUI::TextProperty *)operator new();
      SnippetUI::TextProperty::TextProperty(v16, *((const SnippetUI::TextProperty **)a2 + 9));
    }
    else
    {
      v16 = 0;
    }
    *((_QWORD *)this + 9) = v16;
    if (*((_QWORD *)a2 + 10))
    {
      v17 = (SnippetUI::MultilineTextProperty *)operator new();
      SnippetUI::MultilineTextProperty::MultilineTextProperty(v17, *((const SnippetUI::MultilineTextProperty **)a2 + 10));
    }
    else
    {
      v17 = 0;
    }
    *((_QWORD *)this + 10) = v17;
    if (*((_QWORD *)a2 + 11))
    {
      v18 = (SnippetUI::VisualProperty *)operator new();
      SnippetUI::VisualProperty::VisualProperty(v18, *((const SnippetUI::VisualProperty **)a2 + 11));
    }
    else
    {
      v18 = 0;
    }
    *((_QWORD *)this + 11) = v18;
    if (*((_QWORD *)a2 + 12))
    {
      v19 = (SnippetUI::VisualProperty *)operator new();
      SnippetUI::VisualProperty::VisualProperty(v19, *((const SnippetUI::VisualProperty **)a2 + 12));
    }
    else
    {
      v19 = 0;
    }
    *((_QWORD *)this + 12) = v19;
    if (*((_QWORD *)a2 + 13))
    {
      v11 = (SnippetUI::ActionProperty *)operator new();
      SnippetUI::ActionProperty::ActionProperty(v11, *((const SnippetUI::ActionProperty **)a2 + 13));
    }
    else
    {
      v11 = 0;
    }
  }
  *((_QWORD *)this + 13) = v11;
  return this;
}

void sub_1BF93D954(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;

  MEMORY[0x1C3B8D890](v2, 0x10A1C40B18DE219);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::SummaryItem_PairNumberV2::CopyFrom(SnippetUI::SummaryItem_PairNumberV2 *this, const SnippetUI::SummaryItem_PairNumberV2 *a2)
{
  if (a2 != this)
  {
    SnippetUI::SummaryItem_PairNumberV2::Clear(this);
    SnippetUI::SummaryItem_PairNumberV2::MergeFrom(this, a2);
  }
}

void SnippetUI::SummaryItem_PairNumberV2::InternalSwap(SnippetUI::SummaryItem_PairNumberV2 *this, SnippetUI::SummaryItem_PairNumberV2 *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  uint64_t v5;
  google::protobuf::UnknownFieldSet *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  google::protobuf::UnknownFieldSet *v29;

  v4 = (SnippetUI::SummaryItem_PairNumberV2 *)((char *)this + 8);
  v5 = *((_QWORD *)a2 + 1);
  if ((*((_BYTE *)this + 8) & 1) != 0)
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v6 = v29;
      goto LABEL_6;
    }
LABEL_5:
    v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
    google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
    goto LABEL_7;
  }
  if ((v5 & 1) != 0)
    goto LABEL_5;
LABEL_7:
  v7 = (uint64_t *)*((_QWORD *)this + 2);
  v8 = (uint64_t **)((char *)a2 + 16);
  if (v7 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_13;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 2, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v7 = (uint64_t *)*((_QWORD *)this + 2);
  }
  v9 = *v8;
  if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 2, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v9 = *v8;
  }
  v10 = v7[2];
  v11 = *(_OWORD *)v7;
  v12 = v9[2];
  *(_OWORD *)v7 = *(_OWORD *)v9;
  v7[2] = v12;
  *(_OWORD *)v9 = v11;
  v9[2] = v10;
LABEL_13:
  v13 = (uint64_t *)*((_QWORD *)this + 3);
  v14 = (uint64_t **)((char *)a2 + 24);
  if (v13 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_19;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 3, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v13 = (uint64_t *)*((_QWORD *)this + 3);
  }
  v15 = *v14;
  if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 3, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v15 = *v14;
  }
  v16 = v13[2];
  v17 = *(_OWORD *)v13;
  v18 = v15[2];
  *(_OWORD *)v13 = *(_OWORD *)v15;
  v13[2] = v18;
  *(_OWORD *)v15 = v17;
  v15[2] = v16;
LABEL_19:
  v19 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v19;
  v20 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v20;
  v21 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v21;
  v22 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v22;
  v23 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v23;
  v24 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v24;
  v25 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v25;
  v26 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = *((_QWORD *)a2 + 11);
  *((_QWORD *)a2 + 11) = v26;
  v27 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = *((_QWORD *)a2 + 12);
  *((_QWORD *)a2 + 12) = v27;
  v28 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = *((_QWORD *)a2 + 13);
  *((_QWORD *)a2 + 13) = v28;
}

void SnippetUI::SummaryItem_Button::InitAsDefaultInstance(SnippetUI::SummaryItem_Button *this)
{
  qword_1ED1D44B0 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1ED1D44B8 = &SnippetUI::_Button_default_instance_;
  qword_1ED1D44C0 = (uint64_t)&SnippetUI::_Button_default_instance_;
  unk_1ED1D44C8 = &SnippetUI::_Button_default_instance_;
  qword_1ED1D44D0 = (uint64_t)&SnippetUI::_MultilineTextProperty_default_instance_;
  unk_1ED1D44D8 = &SnippetUI::_MultilineTextProperty_default_instance_;
  qword_1ED1D44E0 = (uint64_t)&SnippetUI::_VisualProperty_default_instance_;
  qword_1ED1D44E8 = (uint64_t)&SnippetUI::_ActionProperty_default_instance_;
  unk_1ED1D44F0 = &SnippetUI::_TextProperty_default_instance_;
}

uint64_t SnippetUI::SummaryItem_Button::_Internal::text_1(SnippetUI::SummaryItem_Button::_Internal *this, const SnippetUI::SummaryItem_Button *a2)
{
  return *((_QWORD *)this + 4);
}

uint64_t SnippetUI::SummaryItem_Button::_Internal::button_1(SnippetUI::SummaryItem_Button::_Internal *this, const SnippetUI::SummaryItem_Button *a2)
{
  return *((_QWORD *)this + 5);
}

uint64_t SnippetUI::SummaryItem_Button::_Internal::button_2(SnippetUI::SummaryItem_Button::_Internal *this, const SnippetUI::SummaryItem_Button *a2)
{
  return *((_QWORD *)this + 6);
}

uint64_t SnippetUI::SummaryItem_Button::_Internal::button_3(SnippetUI::SummaryItem_Button::_Internal *this, const SnippetUI::SummaryItem_Button *a2)
{
  return *((_QWORD *)this + 7);
}

uint64_t SnippetUI::SummaryItem_Button::_Internal::text_2(SnippetUI::SummaryItem_Button::_Internal *this, const SnippetUI::SummaryItem_Button *a2)
{
  return *((_QWORD *)this + 8);
}

uint64_t SnippetUI::SummaryItem_Button::_Internal::text_3(SnippetUI::SummaryItem_Button::_Internal *this, const SnippetUI::SummaryItem_Button *a2)
{
  return *((_QWORD *)this + 9);
}

uint64_t SnippetUI::SummaryItem_Button::_Internal::text_4(SnippetUI::SummaryItem_Button::_Internal *this, const SnippetUI::SummaryItem_Button *a2)
{
  return *((_QWORD *)this + 12);
}

uint64_t SnippetUI::SummaryItem_Button::_Internal::thumbnail(SnippetUI::SummaryItem_Button::_Internal *this, const SnippetUI::SummaryItem_Button *a2)
{
  return *((_QWORD *)this + 10);
}

uint64_t SnippetUI::SummaryItem_Button::_Internal::action(SnippetUI::SummaryItem_Button::_Internal *this, const SnippetUI::SummaryItem_Button *a2)
{
  return *((_QWORD *)this + 11);
}

uint64_t SnippetUI::SummaryItem_Button::clear_text_1(SnippetUI::SummaryItem_Button *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 4);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 4) = 0;
  return result;
}

uint64_t SnippetUI::SummaryItem_Button::clear_button_1(SnippetUI::SummaryItem_Button *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 5);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 5) = 0;
  return result;
}

uint64_t SnippetUI::SummaryItem_Button::clear_button_2(SnippetUI::SummaryItem_Button *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 6);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 6) = 0;
  return result;
}

uint64_t SnippetUI::SummaryItem_Button::clear_button_3(SnippetUI::SummaryItem_Button *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 7);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 7) = 0;
  return result;
}

uint64_t SnippetUI::SummaryItem_Button::clear_text_2(SnippetUI::SummaryItem_Button *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 8);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 8) = 0;
  return result;
}

uint64_t SnippetUI::SummaryItem_Button::clear_text_3(SnippetUI::SummaryItem_Button *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 9);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 9) = 0;
  return result;
}

uint64_t SnippetUI::SummaryItem_Button::clear_text_4(SnippetUI::SummaryItem_Button *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 12);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 12) = 0;
  return result;
}

uint64_t SnippetUI::SummaryItem_Button::clear_thumbnail(SnippetUI::SummaryItem_Button *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 10);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 10) = 0;
  return result;
}

uint64_t SnippetUI::SummaryItem_Button::clear_action(SnippetUI::SummaryItem_Button *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 11);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 11) = 0;
  return result;
}

SnippetUI::SummaryItem_Button *SnippetUI::SummaryItem_Button::SummaryItem_Button(SnippetUI::SummaryItem_Button *this, const SnippetUI::SummaryItem_Button *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  SnippetUI::TextProperty *v10;
  SnippetUI::TextProperty *v11;
  SnippetUI::Button *v12;
  SnippetUI::Button *v13;
  SnippetUI::Button *v14;
  SnippetUI::MultilineTextProperty *v15;
  SnippetUI::MultilineTextProperty *v16;
  SnippetUI::VisualProperty *v17;
  SnippetUI::ActionProperty *v18;

  *(_QWORD *)this = &off_1E792E530;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 26) = 0;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::SummaryItem_Button *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  v5 = *((_QWORD *)a2 + 2);
  if (*(char *)(v5 + 23) < 0)
    v6 = *(_QWORD *)(v5 + 8);
  else
    v6 = *(unsigned __int8 *)(v5 + 23);
  if ((uint64_t *)v5 != &google::protobuf::internal::fixed_address_empty_string && v6 != 0)
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, v5);
  *((_QWORD *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  v8 = *((_QWORD *)a2 + 3);
  if (*(char *)(v8 + 23) < 0)
    v9 = *(_QWORD *)(v8 + 8);
  else
    v9 = *(unsigned __int8 *)(v8 + 23);
  if ((uint64_t *)v8 != &google::protobuf::internal::fixed_address_empty_string && v9)
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 3, v8);
  if (a2 == (const SnippetUI::SummaryItem_Button *)&SnippetUI::_SummaryItem_Button_default_instance_)
  {
    v11 = 0;
    *((_OWORD *)this + 4) = 0u;
    *((_OWORD *)this + 5) = 0u;
    *((_OWORD *)this + 2) = 0u;
    *((_OWORD *)this + 3) = 0u;
  }
  else
  {
    if (*((_QWORD *)a2 + 4))
    {
      v10 = (SnippetUI::TextProperty *)operator new();
      SnippetUI::TextProperty::TextProperty(v10, *((const SnippetUI::TextProperty **)a2 + 4));
    }
    else
    {
      v10 = 0;
    }
    *((_QWORD *)this + 4) = v10;
    if (*((_QWORD *)a2 + 5))
    {
      v12 = (SnippetUI::Button *)operator new();
      SnippetUI::Button::Button(v12, *((const SnippetUI::Button **)a2 + 5));
    }
    else
    {
      v12 = 0;
    }
    *((_QWORD *)this + 5) = v12;
    if (*((_QWORD *)a2 + 6))
    {
      v13 = (SnippetUI::Button *)operator new();
      SnippetUI::Button::Button(v13, *((const SnippetUI::Button **)a2 + 6));
    }
    else
    {
      v13 = 0;
    }
    *((_QWORD *)this + 6) = v13;
    if (*((_QWORD *)a2 + 7))
    {
      v14 = (SnippetUI::Button *)operator new();
      SnippetUI::Button::Button(v14, *((const SnippetUI::Button **)a2 + 7));
    }
    else
    {
      v14 = 0;
    }
    *((_QWORD *)this + 7) = v14;
    if (*((_QWORD *)a2 + 8))
    {
      v15 = (SnippetUI::MultilineTextProperty *)operator new();
      SnippetUI::MultilineTextProperty::MultilineTextProperty(v15, *((const SnippetUI::MultilineTextProperty **)a2 + 8));
    }
    else
    {
      v15 = 0;
    }
    *((_QWORD *)this + 8) = v15;
    if (*((_QWORD *)a2 + 9))
    {
      v16 = (SnippetUI::MultilineTextProperty *)operator new();
      SnippetUI::MultilineTextProperty::MultilineTextProperty(v16, *((const SnippetUI::MultilineTextProperty **)a2 + 9));
    }
    else
    {
      v16 = 0;
    }
    *((_QWORD *)this + 9) = v16;
    if (*((_QWORD *)a2 + 10))
    {
      v17 = (SnippetUI::VisualProperty *)operator new();
      SnippetUI::VisualProperty::VisualProperty(v17, *((const SnippetUI::VisualProperty **)a2 + 10));
    }
    else
    {
      v17 = 0;
    }
    *((_QWORD *)this + 10) = v17;
    if (*((_QWORD *)a2 + 11))
    {
      v18 = (SnippetUI::ActionProperty *)operator new();
      SnippetUI::ActionProperty::ActionProperty(v18, *((const SnippetUI::ActionProperty **)a2 + 11));
    }
    else
    {
      v18 = 0;
    }
    *((_QWORD *)this + 11) = v18;
    if (*((_QWORD *)a2 + 12))
    {
      v11 = (SnippetUI::TextProperty *)operator new();
      SnippetUI::TextProperty::TextProperty(v11, *((const SnippetUI::TextProperty **)a2 + 12));
    }
    else
    {
      v11 = 0;
    }
  }
  *((_QWORD *)this + 12) = v11;
  return this;
}

void sub_1BF93E14C(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;

  MEMORY[0x1C3B8D890](v2, 0x10A1C40BEC01B52);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::SummaryItem_Button::CopyFrom(SnippetUI::SummaryItem_Button *this, const SnippetUI::SummaryItem_Button *a2)
{
  if (a2 != this)
  {
    SnippetUI::SummaryItem_Button::Clear(this);
    SnippetUI::SummaryItem_Button::MergeFrom(this, a2);
  }
}

void SnippetUI::SummaryItem_Button::InternalSwap(SnippetUI::SummaryItem_Button *this, SnippetUI::SummaryItem_Button *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  uint64_t v5;
  google::protobuf::UnknownFieldSet *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  google::protobuf::UnknownFieldSet *v28;

  v4 = (SnippetUI::SummaryItem_Button *)((char *)this + 8);
  v5 = *((_QWORD *)a2 + 1);
  if ((*((_BYTE *)this + 8) & 1) != 0)
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v6 = v28;
      goto LABEL_6;
    }
LABEL_5:
    v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
    google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
    goto LABEL_7;
  }
  if ((v5 & 1) != 0)
    goto LABEL_5;
LABEL_7:
  v7 = (uint64_t *)*((_QWORD *)this + 2);
  v8 = (uint64_t **)((char *)a2 + 16);
  if (v7 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_13;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 2, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v7 = (uint64_t *)*((_QWORD *)this + 2);
  }
  v9 = *v8;
  if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 2, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v9 = *v8;
  }
  v10 = v7[2];
  v11 = *(_OWORD *)v7;
  v12 = v9[2];
  *(_OWORD *)v7 = *(_OWORD *)v9;
  v7[2] = v12;
  *(_OWORD *)v9 = v11;
  v9[2] = v10;
LABEL_13:
  v13 = (uint64_t *)*((_QWORD *)this + 3);
  v14 = (uint64_t **)((char *)a2 + 24);
  if (v13 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_19;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 3, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v13 = (uint64_t *)*((_QWORD *)this + 3);
  }
  v15 = *v14;
  if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 3, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v15 = *v14;
  }
  v16 = v13[2];
  v17 = *(_OWORD *)v13;
  v18 = v15[2];
  *(_OWORD *)v13 = *(_OWORD *)v15;
  v13[2] = v18;
  *(_OWORD *)v15 = v17;
  v15[2] = v16;
LABEL_19:
  v19 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v19;
  v20 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v20;
  v21 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v21;
  v22 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v22;
  v23 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v23;
  v24 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v24;
  v25 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v25;
  v26 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = *((_QWORD *)a2 + 11);
  *((_QWORD *)a2 + 11) = v26;
  v27 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = *((_QWORD *)a2 + 12);
  *((_QWORD *)a2 + 12) = v27;
}

void SnippetUI::SummaryItem_Player::InitAsDefaultInstance(SnippetUI::SummaryItem_Player *this)
{
  qword_1ED1D4538 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1ED1D4540 = &SnippetUI::_MultilineTextProperty_default_instance_;
  qword_1ED1D4548 = (uint64_t)&SnippetUI::_MultilineTextProperty_default_instance_;
  unk_1ED1D4550 = &SnippetUI::_TextProperty_default_instance_;
  qword_1ED1D4558 = (uint64_t)&SnippetUI::_VisualProperty_default_instance_;
  unk_1ED1D4560 = &SnippetUI::_ActionProperty_default_instance_;
}

uint64_t SnippetUI::SummaryItem_Player::_Internal::text_1(SnippetUI::SummaryItem_Player::_Internal *this, const SnippetUI::SummaryItem_Player *a2)
{
  return *((_QWORD *)this + 7);
}

uint64_t SnippetUI::SummaryItem_Player::_Internal::text_2(SnippetUI::SummaryItem_Player::_Internal *this, const SnippetUI::SummaryItem_Player *a2)
{
  return *((_QWORD *)this + 8);
}

uint64_t SnippetUI::SummaryItem_Player::_Internal::text_3(SnippetUI::SummaryItem_Player::_Internal *this, const SnippetUI::SummaryItem_Player *a2)
{
  return *((_QWORD *)this + 9);
}

uint64_t SnippetUI::SummaryItem_Player::_Internal::text_4(SnippetUI::SummaryItem_Player::_Internal *this, const SnippetUI::SummaryItem_Player *a2)
{
  return *((_QWORD *)this + 10);
}

uint64_t SnippetUI::SummaryItem_Player::_Internal::thumbnail(SnippetUI::SummaryItem_Player::_Internal *this, const SnippetUI::SummaryItem_Player *a2)
{
  return *((_QWORD *)this + 11);
}

uint64_t SnippetUI::SummaryItem_Player::_Internal::action(SnippetUI::SummaryItem_Player::_Internal *this, const SnippetUI::SummaryItem_Player *a2)
{
  return *((_QWORD *)this + 12);
}

void SnippetUI::SummaryItem_Player::clear_player(SnippetUI::SummaryItem_Player *this)
{
  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::Player>::TypeHandler>((uint64_t)this + 16);
}

uint64_t SnippetUI::SummaryItem_Player::clear_text_1(SnippetUI::SummaryItem_Player *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 7);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 7) = 0;
  return result;
}

uint64_t SnippetUI::SummaryItem_Player::clear_text_2(SnippetUI::SummaryItem_Player *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 8);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 8) = 0;
  return result;
}

uint64_t SnippetUI::SummaryItem_Player::clear_text_3(SnippetUI::SummaryItem_Player *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 9);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 9) = 0;
  return result;
}

uint64_t SnippetUI::SummaryItem_Player::clear_text_4(SnippetUI::SummaryItem_Player *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 10);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 10) = 0;
  return result;
}

uint64_t SnippetUI::SummaryItem_Player::clear_thumbnail(SnippetUI::SummaryItem_Player *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 11);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 11) = 0;
  return result;
}

uint64_t SnippetUI::SummaryItem_Player::clear_action(SnippetUI::SummaryItem_Player *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 12);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 12) = 0;
  return result;
}

SnippetUI::SummaryItem_Player *SnippetUI::SummaryItem_Player::SummaryItem_Player(SnippetUI::SummaryItem_Player *this, const SnippetUI::SummaryItem_Player *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  SnippetUI::TextProperty *v11;
  SnippetUI::ActionProperty *v12;
  SnippetUI::MultilineTextProperty *v13;
  SnippetUI::MultilineTextProperty *v14;
  SnippetUI::TextProperty *v15;
  SnippetUI::VisualProperty *v16;

  *(_QWORD *)this = &off_1E792E5F0;
  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (SnippetUI::SummaryItem_Player *)((char *)this + 8);
  *(_OWORD *)((char *)this + 24) = 0u;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<SnippetUI::Player>::TypeHandler>((int **)this + 2, (uint64_t)a2 + 16);
  *((_DWORD *)this + 26) = 0;
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom(v4, (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  *((_QWORD *)this + 5) = &google::protobuf::internal::fixed_address_empty_string;
  v6 = *((_QWORD *)a2 + 5);
  if (*(char *)(v6 + 23) < 0)
    v7 = *(_QWORD *)(v6 + 8);
  else
    v7 = *(unsigned __int8 *)(v6 + 23);
  if ((uint64_t *)v6 != &google::protobuf::internal::fixed_address_empty_string && v7 != 0)
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 5, v6);
  *((_QWORD *)this + 6) = &google::protobuf::internal::fixed_address_empty_string;
  v9 = *((_QWORD *)a2 + 6);
  if (*(char *)(v9 + 23) < 0)
    v10 = *(_QWORD *)(v9 + 8);
  else
    v10 = *(unsigned __int8 *)(v9 + 23);
  if ((uint64_t *)v9 != &google::protobuf::internal::fixed_address_empty_string && v10)
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 6, v9);
  if (a2 == (const SnippetUI::SummaryItem_Player *)&SnippetUI::_SummaryItem_Player_default_instance_)
  {
    v12 = 0;
    *((_QWORD *)this + 11) = 0;
    *(_OWORD *)((char *)this + 72) = 0u;
    *(_OWORD *)((char *)this + 56) = 0u;
  }
  else
  {
    if (*((_QWORD *)a2 + 7))
    {
      v11 = (SnippetUI::TextProperty *)operator new();
      SnippetUI::TextProperty::TextProperty(v11, *((const SnippetUI::TextProperty **)a2 + 7));
    }
    else
    {
      v11 = 0;
    }
    *((_QWORD *)this + 7) = v11;
    if (*((_QWORD *)a2 + 8))
    {
      v13 = (SnippetUI::MultilineTextProperty *)operator new();
      SnippetUI::MultilineTextProperty::MultilineTextProperty(v13, *((const SnippetUI::MultilineTextProperty **)a2 + 8));
    }
    else
    {
      v13 = 0;
    }
    *((_QWORD *)this + 8) = v13;
    if (*((_QWORD *)a2 + 9))
    {
      v14 = (SnippetUI::MultilineTextProperty *)operator new();
      SnippetUI::MultilineTextProperty::MultilineTextProperty(v14, *((const SnippetUI::MultilineTextProperty **)a2 + 9));
    }
    else
    {
      v14 = 0;
    }
    *((_QWORD *)this + 9) = v14;
    if (*((_QWORD *)a2 + 10))
    {
      v15 = (SnippetUI::TextProperty *)operator new();
      SnippetUI::TextProperty::TextProperty(v15, *((const SnippetUI::TextProperty **)a2 + 10));
    }
    else
    {
      v15 = 0;
    }
    *((_QWORD *)this + 10) = v15;
    if (*((_QWORD *)a2 + 11))
    {
      v16 = (SnippetUI::VisualProperty *)operator new();
      SnippetUI::VisualProperty::VisualProperty(v16, *((const SnippetUI::VisualProperty **)a2 + 11));
    }
    else
    {
      v16 = 0;
    }
    *((_QWORD *)this + 11) = v16;
    if (*((_QWORD *)a2 + 12))
    {
      v12 = (SnippetUI::ActionProperty *)operator new();
      SnippetUI::ActionProperty::ActionProperty(v12, *((const SnippetUI::ActionProperty **)a2 + 12));
    }
    else
    {
      v12 = 0;
    }
  }
  *((_QWORD *)this + 12) = v12;
  return this;
}

void sub_1BF93E800(_Unwind_Exception *a1)
{
  uint64_t *v1;
  google::protobuf::internal::RepeatedPtrFieldBase *v2;
  uint64_t v3;

  MEMORY[0x1C3B8D890](v3, 0x10A1C40B18DE219);
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::SummaryItem_Player::CopyFrom(SnippetUI::SummaryItem_Player *this, const SnippetUI::SummaryItem_Player *a2)
{
  if (a2 != this)
  {
    SnippetUI::SummaryItem_Player::Clear(this);
    SnippetUI::SummaryItem_Player::MergeFrom(this, a2);
  }
}

void SnippetUI::SummaryItem_Player::InternalSwap(SnippetUI::SummaryItem_Player *this, SnippetUI::SummaryItem_Player *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  uint64_t v5;
  google::protobuf::UnknownFieldSet *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  google::protobuf::UnknownFieldSet *v25;

  v4 = (SnippetUI::SummaryItem_Player *)((char *)this + 8);
  v5 = *((_QWORD *)a2 + 1);
  if ((*((_BYTE *)this + 8) & 1) != 0)
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v6 = v25;
      goto LABEL_6;
    }
LABEL_5:
    v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
    google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
    goto LABEL_7;
  }
  if ((v5 & 1) != 0)
    goto LABEL_5;
LABEL_7:
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((SnippetUI::SummaryItem_Player *)((char *)this + 16), (SnippetUI::SummaryItem_Player *)((char *)a2 + 16));
  v7 = (uint64_t *)*((_QWORD *)this + 5);
  v8 = (uint64_t **)((char *)a2 + 40);
  if (v7 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_13;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 5, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v7 = (uint64_t *)*((_QWORD *)this + 5);
  }
  v9 = *v8;
  if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 5, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v9 = *v8;
  }
  v10 = v7[2];
  v11 = *(_OWORD *)v7;
  v12 = v9[2];
  *(_OWORD *)v7 = *(_OWORD *)v9;
  v7[2] = v12;
  *(_OWORD *)v9 = v11;
  v9[2] = v10;
LABEL_13:
  v13 = (uint64_t *)*((_QWORD *)this + 6);
  v14 = (uint64_t **)((char *)a2 + 48);
  if (v13 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_19;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 6, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v13 = (uint64_t *)*((_QWORD *)this + 6);
  }
  v15 = *v14;
  if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 6, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v15 = *v14;
  }
  v16 = v13[2];
  v17 = *(_OWORD *)v13;
  v18 = v15[2];
  *(_OWORD *)v13 = *(_OWORD *)v15;
  v13[2] = v18;
  *(_OWORD *)v15 = v17;
  v15[2] = v16;
LABEL_19:
  v19 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v19;
  v20 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v20;
  v21 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v21;
  v22 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v22;
  v23 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = *((_QWORD *)a2 + 11);
  *((_QWORD *)a2 + 11) = v23;
  v24 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = *((_QWORD *)a2 + 12);
  *((_QWORD *)a2 + 12) = v24;
}

void SnippetUI::SummaryItem_Switch::InitAsDefaultInstance(SnippetUI::SummaryItem_Switch *this)
{
  qword_1ED1D4590 = (uint64_t)&SnippetUI::_Switch_default_instance_;
  unk_1ED1D4598 = &SnippetUI::_TextProperty_default_instance_;
  qword_1ED1D45A0 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1ED1D45A8 = &SnippetUI::_MultilineTextProperty_default_instance_;
  qword_1ED1D45B8 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1ED1D45C0 = &SnippetUI::_VisualProperty_default_instance_;
  qword_1ED1D45B0 = (uint64_t)&SnippetUI::_ActionProperty_default_instance_;
}

uint64_t SnippetUI::SummaryItem_Switch::_Internal::switch_(SnippetUI::SummaryItem_Switch::_Internal *this, const SnippetUI::SummaryItem_Switch *a2)
{
  return *((_QWORD *)this + 4);
}

uint64_t SnippetUI::SummaryItem_Switch::_Internal::text_1(SnippetUI::SummaryItem_Switch::_Internal *this, const SnippetUI::SummaryItem_Switch *a2)
{
  return *((_QWORD *)this + 5);
}

uint64_t SnippetUI::SummaryItem_Switch::_Internal::text_2(SnippetUI::SummaryItem_Switch::_Internal *this, const SnippetUI::SummaryItem_Switch *a2)
{
  return *((_QWORD *)this + 6);
}

uint64_t SnippetUI::SummaryItem_Switch::_Internal::text_3(SnippetUI::SummaryItem_Switch::_Internal *this, const SnippetUI::SummaryItem_Switch *a2)
{
  return *((_QWORD *)this + 7);
}

uint64_t SnippetUI::SummaryItem_Switch::_Internal::text_4(SnippetUI::SummaryItem_Switch::_Internal *this, const SnippetUI::SummaryItem_Switch *a2)
{
  return *((_QWORD *)this + 9);
}

uint64_t SnippetUI::SummaryItem_Switch::_Internal::thumbnail(SnippetUI::SummaryItem_Switch::_Internal *this, const SnippetUI::SummaryItem_Switch *a2)
{
  return *((_QWORD *)this + 10);
}

uint64_t SnippetUI::SummaryItem_Switch::_Internal::action(SnippetUI::SummaryItem_Switch::_Internal *this, const SnippetUI::SummaryItem_Switch *a2)
{
  return *((_QWORD *)this + 8);
}

uint64_t SnippetUI::SummaryItem_Switch::clear_switch_(SnippetUI::SummaryItem_Switch *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 4);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 4) = 0;
  return result;
}

uint64_t SnippetUI::SummaryItem_Switch::clear_text_1(SnippetUI::SummaryItem_Switch *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 5);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 5) = 0;
  return result;
}

uint64_t SnippetUI::SummaryItem_Switch::clear_text_2(SnippetUI::SummaryItem_Switch *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 6);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 6) = 0;
  return result;
}

uint64_t SnippetUI::SummaryItem_Switch::clear_text_3(SnippetUI::SummaryItem_Switch *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 7);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 7) = 0;
  return result;
}

uint64_t SnippetUI::SummaryItem_Switch::clear_text_4(SnippetUI::SummaryItem_Switch *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 9);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 9) = 0;
  return result;
}

uint64_t SnippetUI::SummaryItem_Switch::clear_thumbnail(SnippetUI::SummaryItem_Switch *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 10);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 10) = 0;
  return result;
}

uint64_t SnippetUI::SummaryItem_Switch::clear_action(SnippetUI::SummaryItem_Switch *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 8);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 8) = 0;
  return result;
}

SnippetUI::SummaryItem_Switch *SnippetUI::SummaryItem_Switch::SummaryItem_Switch(SnippetUI::SummaryItem_Switch *this, const SnippetUI::SummaryItem_Switch *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  SnippetUI::Switch *v10;
  SnippetUI::VisualProperty *v11;
  SnippetUI::TextProperty *v12;
  SnippetUI::TextProperty *v13;
  SnippetUI::MultilineTextProperty *v14;
  SnippetUI::ActionProperty *v15;
  SnippetUI::TextProperty *v16;

  *(_QWORD *)this = &off_1E792E6B0;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 22) = 0;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::SummaryItem_Switch *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  v5 = *((_QWORD *)a2 + 2);
  if (*(char *)(v5 + 23) < 0)
    v6 = *(_QWORD *)(v5 + 8);
  else
    v6 = *(unsigned __int8 *)(v5 + 23);
  if ((uint64_t *)v5 != &google::protobuf::internal::fixed_address_empty_string && v6 != 0)
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, v5);
  *((_QWORD *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  v8 = *((_QWORD *)a2 + 3);
  if (*(char *)(v8 + 23) < 0)
    v9 = *(_QWORD *)(v8 + 8);
  else
    v9 = *(unsigned __int8 *)(v8 + 23);
  if ((uint64_t *)v8 != &google::protobuf::internal::fixed_address_empty_string && v9)
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 3, v8);
  if (a2 == (const SnippetUI::SummaryItem_Switch *)&SnippetUI::_SummaryItem_Switch_default_instance_)
  {
    v11 = 0;
    *((_OWORD *)this + 3) = 0u;
    *((_OWORD *)this + 4) = 0u;
    *((_OWORD *)this + 2) = 0u;
  }
  else
  {
    if (*((_QWORD *)a2 + 4))
    {
      v10 = (SnippetUI::Switch *)operator new();
      SnippetUI::Switch::Switch(v10, *((const SnippetUI::Switch **)a2 + 4));
    }
    else
    {
      v10 = 0;
    }
    *((_QWORD *)this + 4) = v10;
    if (*((_QWORD *)a2 + 5))
    {
      v12 = (SnippetUI::TextProperty *)operator new();
      SnippetUI::TextProperty::TextProperty(v12, *((const SnippetUI::TextProperty **)a2 + 5));
    }
    else
    {
      v12 = 0;
    }
    *((_QWORD *)this + 5) = v12;
    if (*((_QWORD *)a2 + 6))
    {
      v13 = (SnippetUI::TextProperty *)operator new();
      SnippetUI::TextProperty::TextProperty(v13, *((const SnippetUI::TextProperty **)a2 + 6));
    }
    else
    {
      v13 = 0;
    }
    *((_QWORD *)this + 6) = v13;
    if (*((_QWORD *)a2 + 7))
    {
      v14 = (SnippetUI::MultilineTextProperty *)operator new();
      SnippetUI::MultilineTextProperty::MultilineTextProperty(v14, *((const SnippetUI::MultilineTextProperty **)a2 + 7));
    }
    else
    {
      v14 = 0;
    }
    *((_QWORD *)this + 7) = v14;
    if (*((_QWORD *)a2 + 8))
    {
      v15 = (SnippetUI::ActionProperty *)operator new();
      SnippetUI::ActionProperty::ActionProperty(v15, *((const SnippetUI::ActionProperty **)a2 + 8));
    }
    else
    {
      v15 = 0;
    }
    *((_QWORD *)this + 8) = v15;
    if (*((_QWORD *)a2 + 9))
    {
      v16 = (SnippetUI::TextProperty *)operator new();
      SnippetUI::TextProperty::TextProperty(v16, *((const SnippetUI::TextProperty **)a2 + 9));
    }
    else
    {
      v16 = 0;
    }
    *((_QWORD *)this + 9) = v16;
    if (*((_QWORD *)a2 + 10))
    {
      v11 = (SnippetUI::VisualProperty *)operator new();
      SnippetUI::VisualProperty::VisualProperty(v11, *((const SnippetUI::VisualProperty **)a2 + 10));
    }
    else
    {
      v11 = 0;
    }
  }
  *((_QWORD *)this + 10) = v11;
  return this;
}

void sub_1BF93EEE0(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;

  MEMORY[0x1C3B8D890](v2, 0x10A1C40BEC01B52);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::SummaryItem_Switch::CopyFrom(SnippetUI::SummaryItem_Switch *this, const SnippetUI::SummaryItem_Switch *a2)
{
  if (a2 != this)
  {
    SnippetUI::SummaryItem_Switch::Clear(this);
    SnippetUI::SummaryItem_Switch::MergeFrom(this, a2);
  }
}

void SnippetUI::SummaryItem_Switch::InternalSwap(SnippetUI::SummaryItem_Switch *this, SnippetUI::SummaryItem_Switch *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  uint64_t v5;
  google::protobuf::UnknownFieldSet *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  google::protobuf::UnknownFieldSet *v26;

  v4 = (SnippetUI::SummaryItem_Switch *)((char *)this + 8);
  v5 = *((_QWORD *)a2 + 1);
  if ((*((_BYTE *)this + 8) & 1) != 0)
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v6 = v26;
      goto LABEL_6;
    }
LABEL_5:
    v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
    google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
    goto LABEL_7;
  }
  if ((v5 & 1) != 0)
    goto LABEL_5;
LABEL_7:
  v7 = (uint64_t *)*((_QWORD *)this + 2);
  v8 = (uint64_t **)((char *)a2 + 16);
  if (v7 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_13;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 2, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v7 = (uint64_t *)*((_QWORD *)this + 2);
  }
  v9 = *v8;
  if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 2, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v9 = *v8;
  }
  v10 = v7[2];
  v11 = *(_OWORD *)v7;
  v12 = v9[2];
  *(_OWORD *)v7 = *(_OWORD *)v9;
  v7[2] = v12;
  *(_OWORD *)v9 = v11;
  v9[2] = v10;
LABEL_13:
  v13 = (uint64_t *)*((_QWORD *)this + 3);
  v14 = (uint64_t **)((char *)a2 + 24);
  if (v13 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_19;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 3, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v13 = (uint64_t *)*((_QWORD *)this + 3);
  }
  v15 = *v14;
  if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 3, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v15 = *v14;
  }
  v16 = v13[2];
  v17 = *(_OWORD *)v13;
  v18 = v15[2];
  *(_OWORD *)v13 = *(_OWORD *)v15;
  v13[2] = v18;
  *(_OWORD *)v15 = v17;
  v15[2] = v16;
LABEL_19:
  v19 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v19;
  v20 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v20;
  v21 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v21;
  v22 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v22;
  v23 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v23;
  v24 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v24;
  v25 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v25;
}

void SnippetUI::SummaryItem_SwitchV2::InitAsDefaultInstance(SnippetUI::SummaryItem_SwitchV2 *this)
{
  qword_1EF584568 = (uint64_t)&SnippetUI::_Switch_default_instance_;
  unk_1EF584570 = &SnippetUI::_TextProperty_default_instance_;
  qword_1EF584578 = (uint64_t)&SnippetUI::_MultilineTextProperty_default_instance_;
  unk_1EF584580 = &SnippetUI::_MultilineTextProperty_default_instance_;
  qword_1EF584590 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1EF584598 = &SnippetUI::_VisualProperty_default_instance_;
  qword_1EF584588 = (uint64_t)&SnippetUI::_ActionProperty_default_instance_;
}

uint64_t SnippetUI::SummaryItem_SwitchV2::_Internal::switch_(SnippetUI::SummaryItem_SwitchV2::_Internal *this, const SnippetUI::SummaryItem_SwitchV2 *a2)
{
  return *((_QWORD *)this + 4);
}

uint64_t SnippetUI::SummaryItem_SwitchV2::_Internal::text_1(SnippetUI::SummaryItem_SwitchV2::_Internal *this, const SnippetUI::SummaryItem_SwitchV2 *a2)
{
  return *((_QWORD *)this + 5);
}

uint64_t SnippetUI::SummaryItem_SwitchV2::_Internal::text_2(SnippetUI::SummaryItem_SwitchV2::_Internal *this, const SnippetUI::SummaryItem_SwitchV2 *a2)
{
  return *((_QWORD *)this + 6);
}

uint64_t SnippetUI::SummaryItem_SwitchV2::_Internal::text_3(SnippetUI::SummaryItem_SwitchV2::_Internal *this, const SnippetUI::SummaryItem_SwitchV2 *a2)
{
  return *((_QWORD *)this + 7);
}

uint64_t SnippetUI::SummaryItem_SwitchV2::_Internal::text_4(SnippetUI::SummaryItem_SwitchV2::_Internal *this, const SnippetUI::SummaryItem_SwitchV2 *a2)
{
  return *((_QWORD *)this + 9);
}

uint64_t SnippetUI::SummaryItem_SwitchV2::_Internal::thumbnail(SnippetUI::SummaryItem_SwitchV2::_Internal *this, const SnippetUI::SummaryItem_SwitchV2 *a2)
{
  return *((_QWORD *)this + 10);
}

uint64_t SnippetUI::SummaryItem_SwitchV2::_Internal::action(SnippetUI::SummaryItem_SwitchV2::_Internal *this, const SnippetUI::SummaryItem_SwitchV2 *a2)
{
  return *((_QWORD *)this + 8);
}

uint64_t SnippetUI::SummaryItem_SwitchV2::clear_switch_(SnippetUI::SummaryItem_SwitchV2 *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 4);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 4) = 0;
  return result;
}

uint64_t SnippetUI::SummaryItem_SwitchV2::clear_text_1(SnippetUI::SummaryItem_SwitchV2 *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 5);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 5) = 0;
  return result;
}

uint64_t SnippetUI::SummaryItem_SwitchV2::clear_text_2(SnippetUI::SummaryItem_SwitchV2 *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 6);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 6) = 0;
  return result;
}

uint64_t SnippetUI::SummaryItem_SwitchV2::clear_text_3(SnippetUI::SummaryItem_SwitchV2 *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 7);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 7) = 0;
  return result;
}

uint64_t SnippetUI::SummaryItem_SwitchV2::clear_text_4(SnippetUI::SummaryItem_SwitchV2 *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 9);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 9) = 0;
  return result;
}

uint64_t SnippetUI::SummaryItem_SwitchV2::clear_thumbnail(SnippetUI::SummaryItem_SwitchV2 *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 10);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 10) = 0;
  return result;
}

uint64_t SnippetUI::SummaryItem_SwitchV2::clear_action(SnippetUI::SummaryItem_SwitchV2 *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 8);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 8) = 0;
  return result;
}

SnippetUI::SummaryItem_SwitchV2 *SnippetUI::SummaryItem_SwitchV2::SummaryItem_SwitchV2(SnippetUI::SummaryItem_SwitchV2 *this, const SnippetUI::SummaryItem_SwitchV2 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  SnippetUI::Switch *v10;
  SnippetUI::VisualProperty *v11;
  SnippetUI::TextProperty *v12;
  SnippetUI::MultilineTextProperty *v13;
  SnippetUI::MultilineTextProperty *v14;
  SnippetUI::ActionProperty *v15;
  SnippetUI::TextProperty *v16;

  *(_QWORD *)this = &off_1E792E770;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 22) = 0;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::SummaryItem_SwitchV2 *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  v5 = *((_QWORD *)a2 + 2);
  if (*(char *)(v5 + 23) < 0)
    v6 = *(_QWORD *)(v5 + 8);
  else
    v6 = *(unsigned __int8 *)(v5 + 23);
  if ((uint64_t *)v5 != &google::protobuf::internal::fixed_address_empty_string && v6 != 0)
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, v5);
  *((_QWORD *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  v8 = *((_QWORD *)a2 + 3);
  if (*(char *)(v8 + 23) < 0)
    v9 = *(_QWORD *)(v8 + 8);
  else
    v9 = *(unsigned __int8 *)(v8 + 23);
  if ((uint64_t *)v8 != &google::protobuf::internal::fixed_address_empty_string && v9)
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 3, v8);
  if (a2 == (const SnippetUI::SummaryItem_SwitchV2 *)&SnippetUI::_SummaryItem_SwitchV2_default_instance_)
  {
    v11 = 0;
    *((_OWORD *)this + 3) = 0u;
    *((_OWORD *)this + 4) = 0u;
    *((_OWORD *)this + 2) = 0u;
  }
  else
  {
    if (*((_QWORD *)a2 + 4))
    {
      v10 = (SnippetUI::Switch *)operator new();
      SnippetUI::Switch::Switch(v10, *((const SnippetUI::Switch **)a2 + 4));
    }
    else
    {
      v10 = 0;
    }
    *((_QWORD *)this + 4) = v10;
    if (*((_QWORD *)a2 + 5))
    {
      v12 = (SnippetUI::TextProperty *)operator new();
      SnippetUI::TextProperty::TextProperty(v12, *((const SnippetUI::TextProperty **)a2 + 5));
    }
    else
    {
      v12 = 0;
    }
    *((_QWORD *)this + 5) = v12;
    if (*((_QWORD *)a2 + 6))
    {
      v13 = (SnippetUI::MultilineTextProperty *)operator new();
      SnippetUI::MultilineTextProperty::MultilineTextProperty(v13, *((const SnippetUI::MultilineTextProperty **)a2 + 6));
    }
    else
    {
      v13 = 0;
    }
    *((_QWORD *)this + 6) = v13;
    if (*((_QWORD *)a2 + 7))
    {
      v14 = (SnippetUI::MultilineTextProperty *)operator new();
      SnippetUI::MultilineTextProperty::MultilineTextProperty(v14, *((const SnippetUI::MultilineTextProperty **)a2 + 7));
    }
    else
    {
      v14 = 0;
    }
    *((_QWORD *)this + 7) = v14;
    if (*((_QWORD *)a2 + 8))
    {
      v15 = (SnippetUI::ActionProperty *)operator new();
      SnippetUI::ActionProperty::ActionProperty(v15, *((const SnippetUI::ActionProperty **)a2 + 8));
    }
    else
    {
      v15 = 0;
    }
    *((_QWORD *)this + 8) = v15;
    if (*((_QWORD *)a2 + 9))
    {
      v16 = (SnippetUI::TextProperty *)operator new();
      SnippetUI::TextProperty::TextProperty(v16, *((const SnippetUI::TextProperty **)a2 + 9));
    }
    else
    {
      v16 = 0;
    }
    *((_QWORD *)this + 9) = v16;
    if (*((_QWORD *)a2 + 10))
    {
      v11 = (SnippetUI::VisualProperty *)operator new();
      SnippetUI::VisualProperty::VisualProperty(v11, *((const SnippetUI::VisualProperty **)a2 + 10));
    }
    else
    {
      v11 = 0;
    }
  }
  *((_QWORD *)this + 10) = v11;
  return this;
}

void sub_1BF93F5C0(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;

  MEMORY[0x1C3B8D890](v2, 0x10A1C40BEC01B52);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::SummaryItem_SwitchV2::CopyFrom(SnippetUI::SummaryItem_SwitchV2 *this, const SnippetUI::SummaryItem_SwitchV2 *a2)
{
  if (a2 != this)
  {
    SnippetUI::SummaryItem_SwitchV2::Clear(this);
    SnippetUI::SummaryItem_SwitchV2::MergeFrom(this, a2);
  }
}

void SnippetUI::SummaryItem_SwitchV2::InternalSwap(SnippetUI::SummaryItem_SwitchV2 *this, SnippetUI::SummaryItem_SwitchV2 *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  uint64_t v5;
  google::protobuf::UnknownFieldSet *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  google::protobuf::UnknownFieldSet *v26;

  v4 = (SnippetUI::SummaryItem_SwitchV2 *)((char *)this + 8);
  v5 = *((_QWORD *)a2 + 1);
  if ((*((_BYTE *)this + 8) & 1) != 0)
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v6 = v26;
      goto LABEL_6;
    }
LABEL_5:
    v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
    google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
    goto LABEL_7;
  }
  if ((v5 & 1) != 0)
    goto LABEL_5;
LABEL_7:
  v7 = (uint64_t *)*((_QWORD *)this + 2);
  v8 = (uint64_t **)((char *)a2 + 16);
  if (v7 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_13;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 2, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v7 = (uint64_t *)*((_QWORD *)this + 2);
  }
  v9 = *v8;
  if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 2, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v9 = *v8;
  }
  v10 = v7[2];
  v11 = *(_OWORD *)v7;
  v12 = v9[2];
  *(_OWORD *)v7 = *(_OWORD *)v9;
  v7[2] = v12;
  *(_OWORD *)v9 = v11;
  v9[2] = v10;
LABEL_13:
  v13 = (uint64_t *)*((_QWORD *)this + 3);
  v14 = (uint64_t **)((char *)a2 + 24);
  if (v13 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_19;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 3, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v13 = (uint64_t *)*((_QWORD *)this + 3);
  }
  v15 = *v14;
  if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 3, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v15 = *v14;
  }
  v16 = v13[2];
  v17 = *(_OWORD *)v13;
  v18 = v15[2];
  *(_OWORD *)v13 = *(_OWORD *)v15;
  v13[2] = v18;
  *(_OWORD *)v15 = v17;
  v15[2] = v16;
LABEL_19:
  v19 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v19;
  v20 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v20;
  v21 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v21;
  v22 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v22;
  v23 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v23;
  v24 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v24;
  v25 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v25;
}

void sub_1BF93F8E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_1BF93F9B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_1BF93FAB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *__assign_helper_atomic_property__2332(_QWORD *a1, uint64_t *a2)
{
  return std::shared_ptr<siri::dialogengine::PatternSchemaUsage>::operator=[abi:ne180100](a1, *a2, a2[1]);
}

_QWORD *__copy_helper_atomic_property__2333(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = a2[1];
  *result = *a2;
  result[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

double _ZNSt3__115allocate_sharedB8ne180100IN4siri12dialogengine14PatternSettingENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(_QWORD *a1)
{
  char *v2;
  double result;

  v2 = (char *)operator new(0x180uLL);
  result = 0.0;
  *(_OWORD *)(v2 + 8) = 0u;
  *(_QWORD *)v2 = &off_1E7931780;
  *((_OWORD *)v2 + 11) = 0u;
  *((_OWORD *)v2 + 12) = 0u;
  *(_WORD *)(v2 + 177) = 257;
  *((_QWORD *)v2 + 3) = off_1E7931888;
  *((_QWORD *)v2 + 42) = v2 + 344;
  *((_QWORD *)v2 + 32) = 0;
  *((_OWORD *)v2 + 13) = 0u;
  *((_OWORD *)v2 + 14) = 0u;
  *((_OWORD *)v2 + 15) = 0u;
  *((_OWORD *)v2 + 2) = 0u;
  *((_OWORD *)v2 + 3) = 0u;
  *((_OWORD *)v2 + 4) = 0u;
  *((_OWORD *)v2 + 5) = 0u;
  *((_OWORD *)v2 + 6) = 0u;
  *((_OWORD *)v2 + 7) = 0u;
  *((_OWORD *)v2 + 8) = 0u;
  *((_OWORD *)v2 + 9) = 0u;
  *((_OWORD *)v2 + 10) = 0u;
  *(_OWORD *)(v2 + 242) = 0u;
  *(_OWORD *)(v2 + 184) = 0u;
  *(_OWORD *)(v2 + 200) = 0u;
  *(_OWORD *)(v2 + 216) = 0u;
  *(_OWORD *)(v2 + 232) = 0u;
  *((_OWORD *)v2 + 18) = 0u;
  *((_OWORD *)v2 + 19) = 0u;
  *((_OWORD *)v2 + 17) = 0u;
  *((_QWORD *)v2 + 33) = &unk_1E79318B8;
  *((_QWORD *)v2 + 40) = 0;
  *((_QWORD *)v2 + 41) = &unk_1E79318D8;
  *((_QWORD *)v2 + 47) = 0;
  *(_OWORD *)(v2 + 344) = 0u;
  *(_OWORD *)(v2 + 360) = 0u;
  *a1 = v2 + 24;
  a1[1] = v2;
  return result;
}

void std::__shared_ptr_emplace<siri::dialogengine::PatternSetting>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E7931780;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<siri::dialogengine::PatternSetting>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E7931780;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B8D890);
}

uint64_t std::__shared_ptr_emplace<siri::dialogengine::PatternSetting>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

unint64_t siri::dialogengine::ParameterCollection::ParameterHash::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  std::string __p;
  char v6;

  v2 = *a2;
  if (*a2)
  {
    if (*(char *)(v2 + 55) < 0)
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v2 + 32), *(_QWORD *)(v2 + 40));
    else
      __p = *(std::string *)(v2 + 32);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
  }
  v3 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)&v6, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v3;
}

uint64_t siri::dialogengine::ParameterCollection::ParameterEqual::operator()(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  _BOOL8 v5;
  char v7;
  std::string::size_type size;
  std::string::size_type v9;
  int v10;
  std::string *p_p;
  uint64_t v12;
  std::string *v13;
  int v14;
  int v15;
  int v16;
  int v17;
  BOOL v19;
  std::string __p;
  std::string v22;

  v3 = *a2;
  v4 = *a3;
  if (*a2)
  {
    if (v4)
    {
      if (*(char *)(v3 + 55) < 0)
      {
        std::string::__init_copy_ctor_external(&v22, *(const std::string::value_type **)(v3 + 32), *(_QWORD *)(v3 + 40));
        v4 = *a3;
      }
      else
      {
        v22 = *(std::string *)(v3 + 32);
      }
      if (*(char *)(v4 + 55) < 0)
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v4 + 32), *(_QWORD *)(v4 + 40));
      else
        __p = *(std::string *)(v4 + 32);
      v7 = HIBYTE(v22.__r_.__value_.__r.__words[2]);
      if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v22.__r_.__value_.__r.__words[2]);
      else
        size = v22.__r_.__value_.__l.__size_;
      v9 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      v10 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v9 = __p.__r_.__value_.__l.__size_;
      if (size != v9)
      {
        v5 = 0;
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_34;
        goto LABEL_37;
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
      {
        v5 = memcmp(v22.__r_.__value_.__l.__data_, p_p, v22.__r_.__value_.__l.__size_) == 0;
      }
      else
      {
        if (!*((_BYTE *)&v22.__r_.__value_.__s + 23))
        {
          v5 = 1;
          if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_34:
            if ((v7 & 0x80) == 0)
              return v5;
LABEL_38:
            operator delete(v22.__r_.__value_.__l.__data_);
            return v5;
          }
LABEL_37:
          operator delete(__p.__r_.__value_.__l.__data_);
          if ((*((_BYTE *)&v22.__r_.__value_.__s + 23) & 0x80) == 0)
            return v5;
          goto LABEL_38;
        }
        v12 = HIBYTE(v22.__r_.__value_.__r.__words[2]) - 1;
        v13 = &v22;
        do
        {
          v15 = v13->__r_.__value_.__s.__data_[0];
          v13 = (std::string *)((char *)v13 + 1);
          v14 = v15;
          v17 = p_p->__r_.__value_.__s.__data_[0];
          p_p = (std::string *)((char *)p_p + 1);
          v16 = v17;
          v19 = v12-- != 0;
          v5 = v14 == v16;
        }
        while (v14 == v16 && v19);
      }
      if ((v10 & 0x80000000) == 0)
        goto LABEL_34;
      goto LABEL_37;
    }
  }
  else if (!v4)
  {
    return 1;
  }
  return 0;
}

void sub_1BF93FE58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::ParameterCollection::AddParameter(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  __int128 v5;
  std::string::size_type size;
  uint64_t v7;
  __int128 v8;
  void **v9;
  char *v10;
  uint64_t **v11;
  char v12;
  std::string __p;
  std::string v14;
  uint64_t v15;

  v2 = *a2;
  if (*a2)
  {
    if (*(char *)(v2 + 31) < 0)
    {
      std::string::__init_copy_ctor_external(&v14, *(const std::string::value_type **)(v2 + 8), *(_QWORD *)(v2 + 16));
    }
    else
    {
      v5 = *(_OWORD *)(v2 + 8);
      v14.__r_.__value_.__r.__words[2] = *(_QWORD *)(v2 + 24);
      *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v5;
    }
    if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v14.__r_.__value_.__r.__words[2]);
    else
      size = v14.__r_.__value_.__l.__size_;
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v14.__r_.__value_.__l.__data_);
      if (!size)
        return;
    }
    else if (!size)
    {
      return;
    }
    v7 = *a2;
    if (*(char *)(*a2 + 31) < 0)
    {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v7 + 8), *(_QWORD *)(v7 + 16));
    }
    else
    {
      v8 = *(_OWORD *)(v7 + 8);
      __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(v7 + 24);
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v8;
    }
    v9 = (void **)std::__tree<std::string>::__find_equal<std::string>(a1, &v15, &__p);
    v10 = (char *)*v9;
    if (!*v9)
    {
      v11 = (uint64_t **)v9;
      v10 = (char *)operator new(0x60uLL);
      v14.__r_.__value_.__l.__size_ = a1 + 8;
      *(std::string *)(v10 + 32) = __p;
      memset(&__p, 0, sizeof(__p));
      *(_OWORD *)(v10 + 56) = 0u;
      *(_OWORD *)(v10 + 72) = 0u;
      *((_DWORD *)v10 + 22) = 1065353216;
      v14.__r_.__value_.__s.__data_[16] = 1;
      std::__tree<std::string>::__insert_node_at((uint64_t **)a1, v15, v11, (uint64_t *)v10);
      v14.__r_.__value_.__r.__words[0] = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::unordered_set<std::shared_ptr<siri::dialogengine::Parameter>,siri::dialogengine::ParameterCollection::ParameterHash,siri::dialogengine::ParameterCollection::ParameterEqual,std::allocator<std::shared_ptr<siri::dialogengine::Parameter>>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::unordered_set<std::shared_ptr<siri::dialogengine::Parameter>,siri::dialogengine::ParameterCollection::ParameterHash,siri::dialogengine::ParameterCollection::ParameterEqual,std::allocator<std::shared_ptr<siri::dialogengine::Parameter>>>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v14);
    }
    v12 = std::__hash_table<std::shared_ptr<siri::dialogengine::Parameter>,siri::dialogengine::ParameterCollection::ParameterHash,siri::dialogengine::ParameterCollection::ParameterEqual,std::allocator<std::shared_ptr<siri::dialogengine::Parameter>>>::__emplace_unique_key_args<std::shared_ptr<siri::dialogengine::Parameter>,std::shared_ptr<siri::dialogengine::Parameter> const&>((uint64_t)(v10 + 56), a2, a2);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v12)
      *(_BYTE *)(a1 + 24) = 1;
  }
}

void sub_1BF93FFE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__hash_table<std::shared_ptr<siri::dialogengine::Parameter>,siri::dialogengine::ParameterCollection::ParameterHash,siri::dialogengine::ParameterCollection::ParameterEqual,std::allocator<std::shared_ptr<siri::dialogengine::Parameter>>>::__emplace_unique_key_args<std::shared_ptr<siri::dialogengine::Parameter>,std::shared_ptr<siri::dialogengine::Parameter> const&>(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  _QWORD v30[2];
  char v31;

  v7 = siri::dialogengine::ParameterCollection::ParameterHash::operator()(a1, a2);
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v9)
        v3 = v7 % v9;
    }
    else
    {
      v3 = (v9 - 1) & v7;
    }
    v12 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v12)
    {
      v13 = (_QWORD *)*v12;
      if (*v12)
      {
        do
        {
          v14 = v13[1];
          if (v14 == v8)
          {
            v7 = siri::dialogengine::ParameterCollection::ParameterEqual::operator()(v7, v13 + 2, a2);
            if ((v7 & 1) != 0)
              return 0;
          }
          else
          {
            if (v11 > 1)
            {
              if (v14 >= v9)
                v14 %= v9;
            }
            else
            {
              v14 &= v9 - 1;
            }
            if (v14 != v3)
              break;
          }
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
    }
  }
  v15 = (_QWORD *)(a1 + 16);
  v16 = operator new(0x20uLL);
  v30[0] = v16;
  v30[1] = a1 + 16;
  *v16 = 0;
  v16[1] = v8;
  v17 = a3[1];
  v16[2] = *a3;
  v16[3] = v17;
  if (v17)
  {
    v18 = (unint64_t *)(v17 + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  v31 = 1;
  v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v21 = *(float *)(a1 + 32);
  if (!v9 || (float)(v21 * (float)v9) < v20)
  {
    v22 = 1;
    if (v9 >= 3)
      v22 = (v9 & (v9 - 1)) != 0;
    v23 = v22 | (2 * v9);
    v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24)
      v25 = v24;
    else
      v25 = v23;
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v26 = *(_QWORD *)a1;
  v27 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v27)
  {
    *v16 = *v27;
LABEL_41:
    *v27 = v16;
    goto LABEL_42;
  }
  *v16 = *v15;
  *v15 = v16;
  *(_QWORD *)(v26 + 8 * v3) = v15;
  if (*v16)
  {
    v28 = *(_QWORD *)(*v16 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v28 >= v9)
        v28 %= v9;
    }
    else
    {
      v28 &= v9 - 1;
    }
    v27 = (_QWORD *)(*(_QWORD *)a1 + 8 * v28);
    goto LABEL_41;
  }
LABEL_42:
  v30[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::shared_ptr<siri::dialogengine::Parameter>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::shared_ptr<siri::dialogengine::Parameter>,void *>>>>::reset[abi:ne180100]((uint64_t)v30);
  return 1;
}

void sub_1BF940254(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::shared_ptr<siri::dialogengine::Parameter>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::shared_ptr<siri::dialogengine::Parameter>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::shared_ptr<siri::dialogengine::Parameter>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::shared_ptr<siri::dialogengine::Parameter>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)v1 + 16);
    operator delete(v1);
  }
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::unordered_set<std::shared_ptr<siri::dialogengine::Parameter>,siri::dialogengine::ParameterCollection::ParameterHash,siri::dialogengine::ParameterCollection::ParameterEqual,std::allocator<std::shared_ptr<siri::dialogengine::Parameter>>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::unordered_set<std::shared_ptr<siri::dialogengine::Parameter>,siri::dialogengine::ParameterCollection::ParameterHash,siri::dialogengine::ParameterCollection::ParameterEqual,std::allocator<std::shared_ptr<siri::dialogengine::Parameter>>>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unordered_set<std::shared_ptr<siri::dialogengine::Parameter>,siri::dialogengine::ParameterCollection::ParameterHash,siri::dialogengine::ParameterCollection::ParameterEqual,std::allocator<std::shared_ptr<siri::dialogengine::Parameter>>>>,0>((uint64_t)v1 + 32);
    operator delete(v1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unordered_set<std::shared_ptr<siri::dialogengine::Parameter>,siri::dialogengine::ParameterCollection::ParameterHash,siri::dialogengine::ParameterCollection::ParameterEqual,std::allocator<std::shared_ptr<siri::dialogengine::Parameter>>>>,0>(uint64_t a1)
{
  std::__hash_table<std::shared_ptr<siri::dialogengine::Parameter>,siri::dialogengine::ParameterCollection::ParameterHash,siri::dialogengine::ParameterCollection::ParameterEqual,std::allocator<std::shared_ptr<siri::dialogengine::Parameter>>>::~__hash_table(a1 + 24);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t std::__hash_table<std::shared_ptr<siri::dialogengine::Parameter>,siri::dialogengine::ParameterCollection::ParameterHash,siri::dialogengine::ParameterCollection::ParameterEqual,std::allocator<std::shared_ptr<siri::dialogengine::Parameter>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::shared_ptr<siri::dialogengine::Parameter>,siri::dialogengine::ParameterCollection::ParameterHash,siri::dialogengine::ParameterCollection::ParameterEqual,std::allocator<std::shared_ptr<siri::dialogengine::Parameter>>>::__deallocate_node(*(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::shared_ptr<siri::dialogengine::Parameter>,siri::dialogengine::ParameterCollection::ParameterHash,siri::dialogengine::ParameterCollection::ParameterEqual,std::allocator<std::shared_ptr<siri::dialogengine::Parameter>>>::__deallocate_node(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  if (a1)
  {
    v1 = a1;
    do
    {
      v2 = (_QWORD *)*v1;
      std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)(v1 + 2));
      operator delete(v1);
      v1 = v2;
    }
    while (v2);
  }
}

void siri::dialogengine::ParameterCollection::RemoveParameter(uint64_t a1, _QWORD *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v6;
  _QWORD *v7;
  _BOOL4 v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  BOOL v13;

  v3 = (uint64_t *)(a1 + 8);
  v2 = *(uint64_t **)(a1 + 8);
  if (v2)
  {
    v6 = (uint64_t *)(a1 + 8);
    v7 = *(_QWORD **)(a1 + 8);
    do
    {
      v8 = std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(v7 + 4, a2);
      v9 = v7 + 1;
      if (!v8)
      {
        v9 = v7;
        v6 = v7;
      }
      v7 = (_QWORD *)*v9;
    }
    while (*v9);
    if (v6 != v3 && !std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(a2, v6 + 4))
    {
      v10 = (uint64_t *)v6[1];
      if (v10)
      {
        do
        {
          v11 = v10;
          v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
      else
      {
        v12 = v6;
        do
        {
          v11 = (uint64_t *)v12[2];
          v13 = *v11 == (_QWORD)v12;
          v12 = v11;
        }
        while (!v13);
      }
      if (*(uint64_t **)a1 == v6)
        *(_QWORD *)a1 = v11;
      --*(_QWORD *)(a1 + 16);
      std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v2, v6);
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unordered_set<std::shared_ptr<siri::dialogengine::Parameter>,siri::dialogengine::ParameterCollection::ParameterHash,siri::dialogengine::ParameterCollection::ParameterEqual,std::allocator<std::shared_ptr<siri::dialogengine::Parameter>>>>,0>((uint64_t)(v6 + 4));
      operator delete(v6);
      *(_BYTE *)(a1 + 24) = 1;
    }
  }
}

uint64_t *siri::dialogengine::ParameterCollection::GetNames@<X0>(uint64_t *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  _QWORD *v3;
  uint64_t *v5;
  uint64_t *v6;
  BOOL v7;

  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = a2 + 8;
  v2 = this + 1;
  v3 = (_QWORD *)*this;
  if ((uint64_t *)*this != this + 1)
  {
    do
    {
      this = std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)a2, v3 + 4, (uint64_t)(v3 + 4));
      v5 = (uint64_t *)v3[1];
      if (v5)
      {
        do
        {
          v6 = v5;
          v5 = (uint64_t *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v6 = (uint64_t *)v3[2];
          v7 = *v6 == (_QWORD)v3;
          v3 = v6;
        }
        while (!v7);
      }
      v3 = v6;
    }
    while (v6 != v2);
  }
  return this;
}

void sub_1BF940520(_Unwind_Exception *a1)
{
  char **v1;

  std::__tree<std::string>::destroy(*v1);
  _Unwind_Resume(a1);
}

void siri::dialogengine::ParameterCollection::GetParameters(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v7;
  _BOOL4 v8;
  _QWORD *v9;
  _QWORD *i;

  v4 = (_QWORD *)(a1 + 8);
  v5 = *(_QWORD **)(a1 + 8);
  if (!v5)
    goto LABEL_8;
  v7 = (_QWORD *)(a1 + 8);
  do
  {
    v8 = std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(v5 + 4, a2);
    v9 = v5 + 1;
    if (!v8)
    {
      v9 = v5;
      v7 = v5;
    }
    v5 = (_QWORD *)*v9;
  }
  while (*v9);
  if (v7 == v4 || std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(a2, v7 + 4))
  {
LABEL_8:
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_DWORD *)(a3 + 32) = 1065353216;
  }
  else
  {
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_DWORD *)(a3 + 32) = *((_DWORD *)v7 + 22);
    for (i = (_QWORD *)v7[9]; i; i = (_QWORD *)*i)
      std::__hash_table<std::shared_ptr<siri::dialogengine::Parameter>,siri::dialogengine::ParameterCollection::ParameterHash,siri::dialogengine::ParameterCollection::ParameterEqual,std::allocator<std::shared_ptr<siri::dialogengine::Parameter>>>::__emplace_unique_key_args<std::shared_ptr<siri::dialogengine::Parameter>,std::shared_ptr<siri::dialogengine::Parameter> const&>(a3, i + 2, i + 2);
  }
}

void sub_1BF940600(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::shared_ptr<siri::dialogengine::Parameter>,siri::dialogengine::ParameterCollection::ParameterHash,siri::dialogengine::ParameterCollection::ParameterEqual,std::allocator<std::shared_ptr<siri::dialogengine::Parameter>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void siri::dialogengine::ParameterCollection::GetUniqueParameters(uint64_t **this@<X0>, siri::dialogengine::Context *a2@<X1>, uint64_t **a3@<X8>)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t **v10;
  uint64_t **v11;
  uint64_t *v12;
  _QWORD *v13;
  _QWORD *v14;
  std::string *v15;
  __int128 v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  BOOL v21;
  _QWORD v22[2];
  char v23;

  siri::dialogengine::ParameterCollection::Consolidate(this, a2);
  a3[1] = 0;
  v5 = a3 + 1;
  a3[2] = 0;
  *a3 = (uint64_t *)(a3 + 1);
  v8 = *this;
  v6 = (uint64_t *)(this + 1);
  v7 = v8;
  if (v8 != v6)
  {
    do
    {
      if (v7[10])
      {
        v9 = v7[9];
        v10 = a3 + 1;
        v11 = a3 + 1;
        if (*v5)
        {
          v12 = *v5;
          while (1)
          {
            while (1)
            {
              v10 = (uint64_t **)v12;
              v13 = v12 + 4;
              if (!std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(v7 + 4, v12 + 4))
                break;
              v12 = *v10;
              v11 = v10;
              if (!*v10)
                goto LABEL_10;
            }
            if (!std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(v13, v7 + 4))
              break;
            v11 = v10 + 1;
            v12 = v10[1];
            if (!v12)
              goto LABEL_10;
          }
          v14 = v10;
        }
        else
        {
LABEL_10:
          v14 = operator new(0x48uLL);
          v22[0] = v14;
          v22[1] = a3 + 1;
          v23 = 0;
          v15 = (std::string *)(v14 + 4);
          if (*((char *)v7 + 55) < 0)
          {
            std::string::__init_copy_ctor_external(v15, (const std::string::value_type *)v7[4], v7[5]);
          }
          else
          {
            v16 = *((_OWORD *)v7 + 2);
            v14[6] = v7[6];
            *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v16;
          }
          v14[7] = 0;
          v14[8] = 0;
          v23 = 1;
          *v14 = 0;
          v14[1] = 0;
          v14[2] = v10;
          *v11 = v14;
          v17 = (uint64_t *)**a3;
          v18 = v14;
          if (v17)
          {
            *a3 = v17;
            v18 = *v11;
          }
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a3[1], v18);
          a3[2] = (uint64_t *)((char *)a3[2] + 1);
          v22[0] = 0;
          std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,void *>>>>::reset[abi:ne180100]((uint64_t)v22);
        }
        std::shared_ptr<siri::dialogengine::PatternSchemaUsage>::operator=[abi:ne180100](v14 + 7, *(_QWORD *)(v9 + 16), *(_QWORD *)(v9 + 24));
      }
      v19 = (uint64_t *)v7[1];
      if (v19)
      {
        do
        {
          v20 = v19;
          v19 = (uint64_t *)*v19;
        }
        while (v19);
      }
      else
      {
        do
        {
          v20 = (uint64_t *)v7[2];
          v21 = *v20 == (_QWORD)v7;
          v7 = v20;
        }
        while (!v21);
      }
      v7 = v20;
    }
    while (v20 != v6);
  }
}

void sub_1BF9407C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  _QWORD **v2;
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(*v2);
  _Unwind_Resume(a1);
}

void siri::dialogengine::ParameterCollection::Consolidate(uint64_t **this, siri::dialogengine::Context *a2)
{
  uint64_t *v3;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char IsTypeAnExtensionOfBaseType;
  uint64_t v11;
  uint64_t v12;
  std::string *v13;
  std::string *v14;
  char *v15;
  void *v16;
  uint64_t *v17;
  uint64_t *v18;
  BOOL v19;
  uint64_t *v20;
  void *__p[2];
  __int128 v22;
  int v23;
  std::string v24;
  std::string v25;

  if (*((_BYTE *)this + 24))
  {
    v3 = *this;
    v20 = (uint64_t *)(this + 1);
    if (*this != (uint64_t *)(this + 1))
    {
      do
      {
        *(_OWORD *)__p = 0u;
        v22 = 0u;
        v23 = 1065353216;
        v5 = (_QWORD *)v3[9];
        v6 = v5;
        if (v5)
        {
          while (1)
          {
            v7 = v6 + 2;
            if (v5)
            {
              while (1)
              {
                v8 = v5[2];
                if (*(char *)(v8 + 55) < 0)
                  std::string::__init_copy_ctor_external(&v25, *(const std::string::value_type **)(v8 + 32), *(_QWORD *)(v8 + 40));
                else
                  v25 = *(std::string *)(v8 + 32);
                v9 = *v7;
                if (*(char *)(*v7 + 55) < 0)
                  std::string::__init_copy_ctor_external(&v24, *(const std::string::value_type **)(v9 + 32), *(_QWORD *)(v9 + 40));
                else
                  v24 = *(std::string *)(v9 + 32);
                IsTypeAnExtensionOfBaseType = siri::dialogengine::IsTypeAnExtensionOfBaseType((uint64_t)&v25, (unsigned __int8 *)&v24, (uint64_t)a2);
                if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v24.__r_.__value_.__l.__data_);
                if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v25.__r_.__value_.__l.__data_);
                if ((IsTypeAnExtensionOfBaseType & 1) != 0)
                  break;
                v5 = (_QWORD *)*v5;
                if (!v5)
                  goto LABEL_17;
              }
              v12 = *v7;
              if (*(char *)(*v7 + 55) < 0)
                std::string::__init_copy_ctor_external(&v25, *(const std::string::value_type **)(v12 + 32), *(_QWORD *)(v12 + 40));
              else
                v25 = *(std::string *)(v12 + 32);
              if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v14 = &v25;
              else
                v14 = (std::string *)v25.__r_.__value_.__r.__words[0];
              siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"Parameter type '%s' is the base of another type; Excluding it",
                (const char *)a2,
                v14);
              if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v25.__r_.__value_.__l.__data_);
            }
            else
            {
LABEL_17:
              v11 = *v7;
              if (*(char *)(*v7 + 55) < 0)
                std::string::__init_copy_ctor_external(&v25, *(const std::string::value_type **)(v11 + 32), *(_QWORD *)(v11 + 40));
              else
                v25 = *(std::string *)(v11 + 32);
              if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v13 = &v25;
              else
                v13 = (std::string *)v25.__r_.__value_.__r.__words[0];
              siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"Parameter type '%s' is not the base of any other type; Including it",
                (const char *)a2,
                v13);
              if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v25.__r_.__value_.__l.__data_);
              std::__hash_table<std::shared_ptr<siri::dialogengine::Parameter>,siri::dialogengine::ParameterCollection::ParameterHash,siri::dialogengine::ParameterCollection::ParameterEqual,std::allocator<std::shared_ptr<siri::dialogengine::Parameter>>>::__emplace_unique_key_args<std::shared_ptr<siri::dialogengine::Parameter>,std::shared_ptr<siri::dialogengine::Parameter> const&>((uint64_t)__p, v6 + 2, v6 + 2);
            }
            v6 = (_QWORD *)*v6;
            if (!v6)
              break;
            v5 = (_QWORD *)v3[9];
          }
        }
        v25.__r_.__value_.__r.__words[0] = (std::string::size_type)(v3 + 4);
        v15 = std::__tree<std::__value_type<std::string,std::unordered_set<std::shared_ptr<siri::dialogengine::Parameter>,siri::dialogengine::ParameterCollection::ParameterHash,siri::dialogengine::ParameterCollection::ParameterEqual,std::allocator<std::shared_ptr<siri::dialogengine::Parameter>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unordered_set<std::shared_ptr<siri::dialogengine::Parameter>,siri::dialogengine::ParameterCollection::ParameterHash,siri::dialogengine::ParameterCollection::ParameterEqual,std::allocator<std::shared_ptr<siri::dialogengine::Parameter>>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,std::unordered_set<std::shared_ptr<siri::dialogengine::Parameter>,siri::dialogengine::ParameterCollection::ParameterHash,siri::dialogengine::ParameterCollection::ParameterEqual,std::allocator<std::shared_ptr<siri::dialogengine::Parameter>>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(this, v3 + 4, (__int128 **)&v25);
        if (v15 + 56 != (char *)__p)
        {
          *((_DWORD *)v15 + 22) = v23;
          std::__hash_table<std::shared_ptr<siri::dialogengine::Parameter>,siri::dialogengine::ParameterCollection::ParameterHash,siri::dialogengine::ParameterCollection::ParameterEqual,std::allocator<std::shared_ptr<siri::dialogengine::Parameter>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::shared_ptr<siri::dialogengine::Parameter>,void *> *>>((_QWORD *)v15 + 7, (_QWORD *)v22);
        }
        std::__hash_table<std::shared_ptr<siri::dialogengine::Parameter>,siri::dialogengine::ParameterCollection::ParameterHash,siri::dialogengine::ParameterCollection::ParameterEqual,std::allocator<std::shared_ptr<siri::dialogengine::Parameter>>>::__deallocate_node((_QWORD *)v22);
        v16 = __p[0];
        __p[0] = 0;
        if (v16)
          operator delete(v16);
        v17 = (uint64_t *)v3[1];
        if (v17)
        {
          do
          {
            v18 = v17;
            v17 = (uint64_t *)*v17;
          }
          while (v17);
        }
        else
        {
          do
          {
            v18 = (uint64_t *)v3[2];
            v19 = *v18 == (_QWORD)v3;
            v3 = v18;
          }
          while (!v19);
        }
        v3 = v18;
      }
      while (v18 != v20);
    }
    *((_BYTE *)this + 24) = 0;
  }
}

void sub_1BF940A80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  std::__hash_table<std::shared_ptr<siri::dialogengine::Parameter>,siri::dialogengine::ParameterCollection::ParameterHash,siri::dialogengine::ParameterCollection::ParameterEqual,std::allocator<std::shared_ptr<siri::dialogengine::Parameter>>>::~__hash_table((uint64_t)&a11);
  _Unwind_Resume(a1);
}

char *std::__tree<std::__value_type<std::string,std::unordered_set<std::shared_ptr<siri::dialogengine::Parameter>,siri::dialogengine::ParameterCollection::ParameterHash,siri::dialogengine::ParameterCollection::ParameterEqual,std::allocator<std::shared_ptr<siri::dialogengine::Parameter>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unordered_set<std::shared_ptr<siri::dialogengine::Parameter>,siri::dialogengine::ParameterCollection::ParameterHash,siri::dialogengine::ParameterCollection::ParameterEqual,std::allocator<std::shared_ptr<siri::dialogengine::Parameter>>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,std::unordered_set<std::shared_ptr<siri::dialogengine::Parameter>,siri::dialogengine::ParameterCollection::ParameterHash,siri::dialogengine::ParameterCollection::ParameterEqual,std::allocator<std::shared_ptr<siri::dialogengine::Parameter>>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, _QWORD *a2, __int128 **a3)
{
  void **v5;
  char *v6;
  uint64_t **v7;
  std::string *v8;
  __int128 *v9;
  __int128 v10;
  _QWORD v12[2];
  char v13;
  uint64_t v14;

  v5 = (void **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)a1, &v14, a2);
  v6 = (char *)*v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = (char *)operator new(0x60uLL);
    v12[0] = v6;
    v12[1] = a1 + 1;
    v13 = 0;
    v8 = (std::string *)(v6 + 32);
    v9 = *a3;
    if (*((char *)*a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)v9, *((_QWORD *)v9 + 1));
    }
    else
    {
      v10 = *v9;
      *((_QWORD *)v6 + 6) = *((_QWORD *)v9 + 2);
      *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v10;
    }
    *(_OWORD *)(v6 + 72) = 0u;
    *(_OWORD *)(v6 + 56) = 0u;
    *((_DWORD *)v6 + 22) = 1065353216;
    v13 = 1;
    std::__tree<std::string>::__insert_node_at(a1, v14, v7, (uint64_t *)v6);
    v12[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::unordered_set<std::shared_ptr<siri::dialogengine::Parameter>,siri::dialogengine::ParameterCollection::ParameterHash,siri::dialogengine::ParameterCollection::ParameterEqual,std::allocator<std::shared_ptr<siri::dialogengine::Parameter>>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::unordered_set<std::shared_ptr<siri::dialogengine::Parameter>,siri::dialogengine::ParameterCollection::ParameterHash,siri::dialogengine::ParameterCollection::ParameterEqual,std::allocator<std::shared_ptr<siri::dialogengine::Parameter>>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v12);
  }
  return v6;
}

void sub_1BF940BA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::unordered_set<std::shared_ptr<siri::dialogengine::Parameter>,siri::dialogengine::ParameterCollection::ParameterHash,siri::dialogengine::ParameterCollection::ParameterEqual,std::allocator<std::shared_ptr<siri::dialogengine::Parameter>>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::unordered_set<std::shared_ptr<siri::dialogengine::Parameter>,siri::dialogengine::ParameterCollection::ParameterHash,siri::dialogengine::ParameterCollection::ParameterEqual,std::allocator<std::shared_ptr<siri::dialogengine::Parameter>>>>,void *>>>>::reset[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::shared_ptr<siri::dialogengine::Parameter>,siri::dialogengine::ParameterCollection::ParameterHash,siri::dialogengine::ParameterCollection::ParameterEqual,std::allocator<std::shared_ptr<siri::dialogengine::Parameter>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::shared_ptr<siri::dialogengine::Parameter>,void *> *>>(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t i;
  _QWORD *v6;
  BOOL v7;
  _QWORD *v8;
  BOOL v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD v15[2];
  char v16;

  v2 = a2;
  v4 = a1[1];
  if (v4)
  {
    for (i = 0; i != v4; ++i)
      *(_QWORD *)(*a1 + 8 * i) = 0;
    v6 = (_QWORD *)a1[2];
    a1[2] = 0;
    a1[3] = 0;
    if (v6)
      v7 = a2 == 0;
    else
      v7 = 1;
    if (v7)
    {
      v8 = v6;
    }
    else
    {
      do
      {
        std::shared_ptr<siri::dialogengine::PatternSchemaUsage>::operator=[abi:ne180100](v6 + 2, v2[2], v2[3]);
        v8 = (_QWORD *)*v6;
        std::__hash_table<std::shared_ptr<siri::dialogengine::Parameter>,siri::dialogengine::ParameterCollection::ParameterHash,siri::dialogengine::ParameterCollection::ParameterEqual,std::allocator<std::shared_ptr<siri::dialogengine::Parameter>>>::__node_insert_multi((uint64_t)a1, v6);
        v2 = (_QWORD *)*v2;
        if (v8)
          v9 = v2 == 0;
        else
          v9 = 1;
        v6 = v8;
      }
      while (!v9);
    }
    std::__hash_table<std::shared_ptr<siri::dialogengine::Parameter>,siri::dialogengine::ParameterCollection::ParameterHash,siri::dialogengine::ParameterCollection::ParameterEqual,std::allocator<std::shared_ptr<siri::dialogengine::Parameter>>>::__deallocate_node(v8);
  }
  for (; v2; v2 = (_QWORD *)*v2)
  {
    v10 = operator new(0x20uLL);
    v11 = v10;
    v15[0] = v10;
    v15[1] = a1 + 2;
    *v10 = 0;
    v10[1] = 0;
    v10[2] = v2[2];
    v12 = v2[3];
    v10[3] = v12;
    if (v12)
    {
      v13 = (unint64_t *)(v12 + 8);
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
    v16 = 1;
    v10[1] = siri::dialogengine::ParameterCollection::ParameterHash::operator()((uint64_t)v10, v10 + 2);
    std::__hash_table<std::shared_ptr<siri::dialogengine::Parameter>,siri::dialogengine::ParameterCollection::ParameterHash,siri::dialogengine::ParameterCollection::ParameterEqual,std::allocator<std::shared_ptr<siri::dialogengine::Parameter>>>::__node_insert_multi((uint64_t)a1, v11);
    v15[0] = 0;
    std::unique_ptr<std::__hash_node<std::shared_ptr<siri::dialogengine::Parameter>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::shared_ptr<siri::dialogengine::Parameter>,void *>>>>::reset[abi:ne180100]((uint64_t)v15);
  }
}

void sub_1BF940CE0(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  std::__hash_table<std::shared_ptr<siri::dialogengine::Parameter>,siri::dialogengine::ParameterCollection::ParameterHash,siri::dialogengine::ParameterCollection::ParameterEqual,std::allocator<std::shared_ptr<siri::dialogengine::Parameter>>>::__deallocate_node(v1);
  __cxa_rethrow();
}

void sub_1BF940CF4(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__hash_table<std::shared_ptr<siri::dialogengine::Parameter>,siri::dialogengine::ParameterCollection::ParameterHash,siri::dialogengine::ParameterCollection::ParameterEqual,std::allocator<std::shared_ptr<siri::dialogengine::Parameter>>>::__node_insert_multi(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t *v4;
  unint64_t prime;
  unint64_t v6;
  unint64_t v7;
  float v8;
  float v9;
  _BOOL8 v10;
  unint64_t v11;
  unint64_t v12;
  size_t v13;
  void *v14;
  uint64_t v15;
  _QWORD *v16;
  size_t v17;
  uint8x8_t v18;
  unint64_t v19;
  uint8x8_t v20;
  uint64_t v21;
  _QWORD *v22;
  size_t v23;
  size_t v24;
  _QWORD *v25;
  unint64_t v26;
  size_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint8x8_t v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  int v35;
  unint64_t v36;
  unint64_t v37;
  uint8x8_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t *v42;
  _QWORD *v43;

  v2 = a2;
  v4 = a2 + 2;
  prime = siri::dialogengine::ParameterCollection::ParameterHash::operator()(a1, a2 + 2);
  v6 = prime;
  v2[1] = prime;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v9 = *(float *)(a1 + 32);
  if (!v7 || (float)(v9 * (float)v7) < v8)
  {
    v10 = 1;
    if (v7 >= 3)
      v10 = (v7 & (v7 - 1)) != 0;
    v11 = v10 | (2 * v7);
    v12 = vcvtps_u32_f32(v8 / v9);
    if (v11 <= v12)
      v13 = v12;
    else
      v13 = v11;
    if (v13 == 1)
    {
      v13 = 2;
    }
    else if ((v13 & (v13 - 1)) != 0)
    {
      prime = std::__next_prime(v13);
      v13 = prime;
      v7 = *(_QWORD *)(a1 + 8);
    }
    v42 = v4;
    v43 = v2;
    if (v13 > v7)
    {
LABEL_13:
      if (v13 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v14 = operator new(8 * v13);
      prime = *(_QWORD *)a1;
      *(_QWORD *)a1 = v14;
      if (prime)
        operator delete((void *)prime);
      v15 = 0;
      *(_QWORD *)(a1 + 8) = v13;
      do
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v15++) = 0;
      while (v13 != v15);
      v16 = *(_QWORD **)(a1 + 16);
      if (v16)
      {
        v17 = v16[1];
        v18 = (uint8x8_t)vcnt_s8((int8x8_t)v13);
        v18.i16[0] = vaddlv_u8(v18);
        v19 = v18.u32[0];
        if (v18.u32[0] > 1uLL)
        {
          if (v17 >= v13)
            v17 %= v13;
        }
        else
        {
          v17 &= v13 - 1;
        }
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v17) = a1 + 16;
        v22 = (_QWORD *)*v16;
        if (*v16)
        {
          v23 = v13 - 1;
          v41 = v18.u32[0];
          do
          {
            v24 = v22[1];
            if (v19 > 1)
            {
              if (v24 >= v13)
                v24 %= v13;
            }
            else
            {
              v24 &= v23;
            }
            if (v24 == v17)
            {
              v16 = v22;
            }
            else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v24))
            {
              v25 = (_QWORD *)*v22;
              if (*v22)
              {
                v26 = v6;
                v27 = v23;
                v28 = v22;
                while (1)
                {
                  prime = siri::dialogengine::ParameterCollection::ParameterEqual::operator()(prime, v22 + 2, v25 + 2);
                  v29 = (_QWORD *)*v28;
                  if (!(_DWORD)prime)
                    break;
                  v25 = (_QWORD *)*v29;
                  v28 = (_QWORD *)*v28;
                  if (!*v29)
                    goto LABEL_46;
                }
                v25 = (_QWORD *)*v28;
                v29 = v28;
LABEL_46:
                v23 = v27;
                v6 = v26;
                v19 = v41;
              }
              else
              {
                v29 = v22;
              }
              *v16 = v25;
              *v29 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v24);
              **(_QWORD **)(*(_QWORD *)a1 + 8 * v24) = v22;
            }
            else
            {
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v16;
              v16 = v22;
              v17 = v24;
            }
            v22 = (_QWORD *)*v16;
          }
          while (*v16);
        }
      }
      goto LABEL_58;
    }
    if (v13 < v7)
    {
      prime = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (v20 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v20.i16[0] = vaddlv_u8(v20), v20.u32[0] > 1uLL))
      {
        prime = std::__next_prime(prime);
      }
      else
      {
        v21 = 1 << -(char)__clz(prime - 1);
        if (prime >= 2)
          prime = v21;
      }
      if (v13 <= prime)
        v13 = prime;
      if (v13 < v7)
      {
        if (v13)
          goto LABEL_13;
        prime = *(_QWORD *)a1;
        *(_QWORD *)a1 = 0;
        if (prime)
          operator delete((void *)prime);
        *(_QWORD *)(a1 + 8) = 0;
      }
    }
LABEL_58:
    v7 = *(_QWORD *)(a1 + 8);
    v4 = v42;
    v2 = v43;
  }
  v30 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
  v30.i16[0] = vaddlv_u8(v30);
  v31 = v30.u32[0];
  if (v30.u32[0] > 1uLL)
  {
    v32 = v6;
    if (v7 <= v6)
      v32 = v6 % v7;
  }
  else
  {
    v32 = (v7 - 1) & v6;
  }
  v33 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v32);
  if (v33)
  {
    v34 = (_QWORD *)*v33;
    if (*v33)
    {
      v35 = 0;
      do
      {
        v36 = v34[1];
        if (v31 > 1)
        {
          v37 = v34[1];
          if (v36 >= v7)
            v37 = v36 % v7;
        }
        else
        {
          v37 = v36 & (v7 - 1);
        }
        if (v37 != v32)
          break;
        prime = v36 == v6
              ? siri::dialogengine::ParameterCollection::ParameterEqual::operator()(prime, v34 + 2, v4)
              : 0;
        if ((v35 & (prime ^ 1) & 1) != 0)
          break;
        v35 |= prime;
        v33 = (_QWORD *)*v33;
        v34 = (_QWORD *)*v33;
      }
      while (*v33);
      v7 = *(_QWORD *)(a1 + 8);
      v38 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
      v38.i16[0] = vaddlv_u8(v38);
      v31 = v38.u32[0];
    }
  }
  v39 = v2[1];
  if (v31 > 1)
  {
    if (v39 >= v7)
      v39 %= v7;
  }
  else
  {
    v39 &= v7 - 1;
  }
  if (!v33)
  {
    *v2 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v2;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v39) = a1 + 16;
    if (!*v2)
      goto LABEL_95;
    v40 = *(_QWORD *)(*v2 + 8);
    if (v31 > 1)
    {
      if (v40 >= v7)
        v40 %= v7;
    }
    else
    {
      v40 &= v7 - 1;
    }
LABEL_94:
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v40) = v2;
    goto LABEL_95;
  }
  *v2 = *v33;
  *v33 = v2;
  if (*v2)
  {
    v40 = *(_QWORD *)(*v2 + 8);
    if (v31 > 1)
    {
      if (v40 >= v7)
        v40 %= v7;
    }
    else
    {
      v40 &= v7 - 1;
    }
    if (v40 != v39)
      goto LABEL_94;
  }
LABEL_95:
  ++*(_QWORD *)(a1 + 24);
}

void siri::dialogengine::ParameterCollection::GetConflictingParameters(uint64_t **this@<X0>, siri::dialogengine::Context *a2@<X1>, uint64_t **a3@<X8>)
{
  unint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  unint64_t v14;
  unsigned __int8 **v15;
  unsigned __int8 *i;
  unint64_t v17;
  char *v18;
  float v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  char *v27;
  uint64_t *v28;
  uint64_t *v29;
  BOOL v30;
  uint64_t **v31;
  char *v32;
  std::string v33;
  __int128 v34;
  __int128 v35;
  float v36;
  __int128 *v37[2];
  char v38;

  siri::dialogengine::ParameterCollection::Consolidate(this, a2);
  a3[1] = 0;
  a3[2] = 0;
  v31 = a3;
  *a3 = (uint64_t *)(a3 + 1);
  v7 = *this;
  v5 = (unint64_t)(this + 1);
  v6 = v7;
  if (v7 == (uint64_t *)v5)
    return;
  v32 = (char *)v5;
  do
  {
    if ((unint64_t)v6[10] < 2)
      goto LABEL_53;
    v34 = 0u;
    v35 = 0u;
    v36 = 1.0;
    v8 = (_QWORD *)v6[9];
    if (!v8)
      goto LABEL_52;
    do
    {
      v9 = v8[2];
      if (*(char *)(v9 + 55) < 0)
        std::string::__init_copy_ctor_external(&v33, *(const std::string::value_type **)(v9 + 32), *(_QWORD *)(v9 + 40));
      else
        v33 = *(std::string *)(v9 + 32);
      v10 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)&v35 + 8, (uint64_t)&v33);
      v11 = v10;
      v12 = *((_QWORD *)&v34 + 1);
      if (*((_QWORD *)&v34 + 1))
      {
        v13 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v34 + 8));
        v13.i16[0] = vaddlv_u8(v13);
        v14 = v13.u32[0];
        if (v13.u32[0] > 1uLL)
        {
          v5 = v10;
          if (v10 >= *((_QWORD *)&v34 + 1))
            v5 = v10 % *((_QWORD *)&v34 + 1);
        }
        else
        {
          v5 = (*((_QWORD *)&v34 + 1) - 1) & v10;
        }
        v15 = *(unsigned __int8 ***)(v34 + 8 * v5);
        if (v15)
        {
          for (i = *v15; i; i = *(unsigned __int8 **)i)
          {
            v17 = *((_QWORD *)i + 1);
            if (v17 == v11)
            {
              if ((std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)&v36, i + 16, (unsigned __int8 *)&v33) & 1) != 0)
                goto LABEL_46;
            }
            else
            {
              if (v14 > 1)
              {
                if (v17 >= v12)
                  v17 %= v12;
              }
              else
              {
                v17 &= v12 - 1;
              }
              if (v17 != v5)
                break;
            }
          }
        }
      }
      v18 = (char *)operator new(0x28uLL);
      v37[1] = &v35;
      *(_QWORD *)v18 = 0;
      *((_QWORD *)v18 + 1) = v11;
      *(std::string *)(v18 + 16) = v33;
      memset(&v33, 0, sizeof(v33));
      v38 = 1;
      v19 = (float)(unint64_t)(*((_QWORD *)&v35 + 1) + 1);
      if (!v12 || (float)(v36 * (float)v12) < v19)
      {
        v20 = (v12 & (v12 - 1)) != 0;
        if (v12 < 3)
          v20 = 1;
        v21 = v20 | (2 * v12);
        v22 = vcvtps_u32_f32(v19 / v36);
        if (v21 <= v22)
          v23 = v22;
        else
          v23 = v21;
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>((uint64_t)&v34, v23);
        v12 = *((_QWORD *)&v34 + 1);
        if ((*((_QWORD *)&v34 + 1) & (*((_QWORD *)&v34 + 1) - 1)) != 0)
        {
          if (v11 >= *((_QWORD *)&v34 + 1))
            v5 = v11 % *((_QWORD *)&v34 + 1);
          else
            v5 = v11;
        }
        else
        {
          v5 = (*((_QWORD *)&v34 + 1) - 1) & v11;
        }
      }
      v24 = v34;
      v25 = *(_QWORD **)(v34 + 8 * v5);
      if (v25)
      {
        *(_QWORD *)v18 = *v25;
LABEL_44:
        *v25 = v18;
        goto LABEL_45;
      }
      *(_QWORD *)v18 = v35;
      *(_QWORD *)&v35 = v18;
      *(_QWORD *)(v24 + 8 * v5) = &v35;
      if (*(_QWORD *)v18)
      {
        v26 = *(_QWORD *)(*(_QWORD *)v18 + 8);
        if ((v12 & (v12 - 1)) != 0)
        {
          if (v26 >= v12)
            v26 %= v12;
        }
        else
        {
          v26 &= v12 - 1;
        }
        v25 = (_QWORD *)(v34 + 8 * v26);
        goto LABEL_44;
      }
LABEL_45:
      ++*((_QWORD *)&v35 + 1);
LABEL_46:
      if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v33.__r_.__value_.__l.__data_);
      v8 = (_QWORD *)*v8;
    }
    while (v8);
    if (*((_QWORD *)&v35 + 1) > 1uLL)
    {
      v37[0] = (__int128 *)(v6 + 4);
      v27 = std::__tree<std::__value_type<std::string,std::unordered_set<std::shared_ptr<siri::dialogengine::Parameter>,siri::dialogengine::ParameterCollection::ParameterHash,siri::dialogengine::ParameterCollection::ParameterEqual,std::allocator<std::shared_ptr<siri::dialogengine::Parameter>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unordered_set<std::shared_ptr<siri::dialogengine::Parameter>,siri::dialogengine::ParameterCollection::ParameterHash,siri::dialogengine::ParameterCollection::ParameterEqual,std::allocator<std::shared_ptr<siri::dialogengine::Parameter>>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,std::unordered_set<std::shared_ptr<siri::dialogengine::Parameter>,siri::dialogengine::ParameterCollection::ParameterHash,siri::dialogengine::ParameterCollection::ParameterEqual,std::allocator<std::shared_ptr<siri::dialogengine::Parameter>>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v31, v6 + 4, v37);
      if (v6 != (uint64_t *)v27)
      {
        *((_DWORD *)v27 + 22) = *((_DWORD *)v6 + 22);
        std::__hash_table<std::shared_ptr<siri::dialogengine::Parameter>,siri::dialogengine::ParameterCollection::ParameterHash,siri::dialogengine::ParameterCollection::ParameterEqual,std::allocator<std::shared_ptr<siri::dialogengine::Parameter>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::shared_ptr<siri::dialogengine::Parameter>,void *> *>>((_QWORD *)v27 + 7, (_QWORD *)v6[9]);
      }
    }
LABEL_52:
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v34);
    v5 = (unint64_t)v32;
LABEL_53:
    v28 = (uint64_t *)v6[1];
    if (v28)
    {
      do
      {
        v29 = v28;
        v28 = (uint64_t *)*v28;
      }
      while (v28);
    }
    else
    {
      do
      {
        v29 = (uint64_t *)v6[2];
        v30 = *v29 == (_QWORD)v6;
        v6 = v29;
      }
      while (!v30);
    }
    v6 = v29;
  }
  while (v29 != (uint64_t *)v5);
}

void sub_1BF94150C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, _QWORD **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,char a22)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&a22);
  std::__tree<std::__value_type<std::string,std::unordered_set<std::shared_ptr<siri::dialogengine::Parameter>,siri::dialogengine::ParameterCollection::ParameterHash,siri::dialogengine::ParameterCollection::ParameterEqual,std::allocator<std::shared_ptr<siri::dialogengine::Parameter>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unordered_set<std::shared_ptr<siri::dialogengine::Parameter>,siri::dialogengine::ParameterCollection::ParameterHash,siri::dialogengine::ParameterCollection::ParameterEqual,std::allocator<std::shared_ptr<siri::dialogengine::Parameter>>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,std::unordered_set<std::shared_ptr<siri::dialogengine::Parameter>,siri::dialogengine::ParameterCollection::ParameterHash,siri::dialogengine::ParameterCollection::ParameterEqual,std::allocator<std::shared_ptr<siri::dialogengine::Parameter>>>>>>::destroy(*a10);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,std::unordered_set<std::shared_ptr<siri::dialogengine::Parameter>,siri::dialogengine::ParameterCollection::ParameterHash,siri::dialogengine::ParameterCollection::ParameterEqual,std::allocator<std::shared_ptr<siri::dialogengine::Parameter>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unordered_set<std::shared_ptr<siri::dialogengine::Parameter>,siri::dialogengine::ParameterCollection::ParameterHash,siri::dialogengine::ParameterCollection::ParameterEqual,std::allocator<std::shared_ptr<siri::dialogengine::Parameter>>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,std::unordered_set<std::shared_ptr<siri::dialogengine::Parameter>,siri::dialogengine::ParameterCollection::ParameterHash,siri::dialogengine::ParameterCollection::ParameterEqual,std::allocator<std::shared_ptr<siri::dialogengine::Parameter>>>>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::unordered_set<std::shared_ptr<siri::dialogengine::Parameter>,siri::dialogengine::ParameterCollection::ParameterHash,siri::dialogengine::ParameterCollection::ParameterEqual,std::allocator<std::shared_ptr<siri::dialogengine::Parameter>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unordered_set<std::shared_ptr<siri::dialogengine::Parameter>,siri::dialogengine::ParameterCollection::ParameterHash,siri::dialogengine::ParameterCollection::ParameterEqual,std::allocator<std::shared_ptr<siri::dialogengine::Parameter>>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,std::unordered_set<std::shared_ptr<siri::dialogengine::Parameter>,siri::dialogengine::ParameterCollection::ParameterHash,siri::dialogengine::ParameterCollection::ParameterEqual,std::allocator<std::shared_ptr<siri::dialogengine::Parameter>>>>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,std::unordered_set<std::shared_ptr<siri::dialogengine::Parameter>,siri::dialogengine::ParameterCollection::ParameterHash,siri::dialogengine::ParameterCollection::ParameterEqual,std::allocator<std::shared_ptr<siri::dialogengine::Parameter>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unordered_set<std::shared_ptr<siri::dialogengine::Parameter>,siri::dialogengine::ParameterCollection::ParameterHash,siri::dialogengine::ParameterCollection::ParameterEqual,std::allocator<std::shared_ptr<siri::dialogengine::Parameter>>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,std::unordered_set<std::shared_ptr<siri::dialogengine::Parameter>,siri::dialogengine::ParameterCollection::ParameterHash,siri::dialogengine::ParameterCollection::ParameterEqual,std::allocator<std::shared_ptr<siri::dialogengine::Parameter>>>>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unordered_set<std::shared_ptr<siri::dialogengine::Parameter>,siri::dialogengine::ParameterCollection::ParameterHash,siri::dialogengine::ParameterCollection::ParameterEqual,std::allocator<std::shared_ptr<siri::dialogengine::Parameter>>>>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void InitDefaultsscc_info_Visualization_Chart_Visualization_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Visualization.pb.cc", a4);
  SnippetUI::Visualization_Chart::Visualization_Chart((SnippetUI::Visualization_Chart *)&SnippetUI::_Visualization_Chart_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_Visualization_Chart_default_instance_, v4);
  qword_1ED1D4650 = (uint64_t)&SnippetUI::_VisualProperty_default_instance_;
  unk_1ED1D4658 = &SnippetUI::_TextProperty_default_instance_;
  qword_1ED1D4660 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1ED1D4668 = &SnippetUI::_ActionProperty_default_instance_;
}

SnippetUI::Visualization_Chart *SnippetUI::Visualization_Chart::Visualization_Chart(SnippetUI::Visualization_Chart *this)
{
  *(_QWORD *)this = &off_1E792E9B0;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 16) = 0;
  if (atomic_load(scc_info_Visualization_Chart_Visualization_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Visualization_Chart_Visualization_2eproto);
  *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  return this;
}

void sub_1BF941680(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::Visualization_Chart::~Visualization_Chart(SnippetUI::Visualization_Chart *this)
{
  SnippetUI::Visualization_Chart::~Visualization_Chart(this);
  JUMPOUT(0x1C3B8D890);
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)this = &off_1E792E9B0;
  v2 = *((_QWORD *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x1C3B8D890](v2, 0x1012C40EC159624);
  }
  v4 = *((_QWORD *)this + 3);
  if ((uint64_t *)v4 != &google::protobuf::internal::fixed_address_empty_string && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0)
      operator delete(*(void **)v4);
    MEMORY[0x1C3B8D890](v4, 0x1012C40EC159624);
  }
  if (this != (SnippetUI::Visualization_Chart *)&SnippetUI::_Visualization_Chart_default_instance_)
  {
    v6 = *((_QWORD *)this + 4);
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    v7 = *((_QWORD *)this + 5);
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    v8 = *((_QWORD *)this + 6);
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    v9 = *((_QWORD *)this + 7);
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

SnippetUI::Visualization_Chart *SnippetUI::Visualization_Chart::New(SnippetUI::Visualization_Chart *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Visualization_Chart>(0);
}

SnippetUI::Visualization_Chart *SnippetUI::Visualization_Chart::New(SnippetUI::Visualization_Chart *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Visualization_Chart>(a2);
}

void SnippetUI::Visualization_Chart::Clear(SnippetUI::Visualization_Chart *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  google::protobuf::internal::InternalMetadataWithArena *v8;
  char v9;

  v2 = *((_QWORD *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(_BYTE **)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v2 = 0;
      *(_BYTE *)(v2 + 23) = 0;
    }
  }
  v3 = *((_QWORD *)this + 3);
  if ((uint64_t *)v3 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v3 + 23) < 0)
    {
      **(_BYTE **)v3 = 0;
      *(_QWORD *)(v3 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v3 = 0;
      *(_BYTE *)(v3 + 23) = 0;
    }
  }
  v4 = *((_QWORD *)this + 4);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  *((_QWORD *)this + 4) = 0;
  v5 = *((_QWORD *)this + 5);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *((_QWORD *)this + 5) = 0;
  v6 = *((_QWORD *)this + 6);
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  *((_QWORD *)this + 6) = 0;
  v7 = *((_QWORD *)this + 7);
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v9 = *((_BYTE *)this + 8);
  v8 = (SnippetUI::Visualization_Chart *)((char *)this + 8);
  *((_QWORD *)v8 + 6) = 0;
  if ((v9 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v8);
}

uint64_t SnippetUI::Visualization_Chart::IsInitialized(SnippetUI::Visualization_Chart *this)
{
  return 1;
}

char *SnippetUI::Visualization_Chart::ByteSizeLong(SnippetUI::Visualization_Chart *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  const google::protobuf::UnknownFieldSet *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  SnippetUI::VisualProperty *v9;
  char *v10;
  SnippetUI::TextProperty *v11;
  char *v12;
  SnippetUI::TextProperty *v13;
  char *v14;
  SnippetUI::ActionProperty *v15;
  char *v16;

  v2 = *((_QWORD *)this + 2);
  v3 = *(unsigned __int8 *)(v2 + 23);
  if (*(char *)(v2 + 23) < 0)
  {
    if (*(_QWORD *)(v2 + 8))
      goto LABEL_3;
LABEL_7:
    v5 = 0;
    goto LABEL_8;
  }
  if (!*(_BYTE *)(v2 + 23))
    goto LABEL_7;
LABEL_3:
  v4 = *(_QWORD *)(v2 + 8);
  if ((v3 & 0x80u) == 0)
    v4 = v3;
  v5 = (const google::protobuf::UnknownFieldSet *)(v4 + ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_8:
  v6 = *((_QWORD *)this + 3);
  v7 = *(unsigned __int8 *)(v6 + 23);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(_QWORD *)(v6 + 8))
      goto LABEL_13;
  }
  else if (!*(_BYTE *)(v6 + 23))
  {
    goto LABEL_13;
  }
  v8 = *(_QWORD *)(v6 + 8);
  if ((v7 & 0x80u) == 0)
    v8 = v7;
  v5 = (const google::protobuf::UnknownFieldSet *)((char *)v5 + v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_13:
  if (this != (SnippetUI::Visualization_Chart *)&SnippetUI::_Visualization_Chart_default_instance_)
  {
    v9 = (SnippetUI::VisualProperty *)*((_QWORD *)this + 4);
    if (v9)
    {
      v10 = SnippetUI::VisualProperty::ByteSizeLong(v9);
      v5 = (const google::protobuf::UnknownFieldSet *)&v10[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v11 = (SnippetUI::TextProperty *)*((_QWORD *)this + 5);
    if (v11)
    {
      v12 = SnippetUI::TextProperty::ByteSizeLong(v11);
      v5 = (const google::protobuf::UnknownFieldSet *)&v12[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v12 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v13 = (SnippetUI::TextProperty *)*((_QWORD *)this + 6);
    if (v13)
    {
      v14 = SnippetUI::TextProperty::ByteSizeLong(v13);
      v5 = (const google::protobuf::UnknownFieldSet *)&v14[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v14 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v15 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 7);
    if (v15)
    {
      v16 = SnippetUI::ActionProperty::ByteSizeLong(v15);
      v5 = (const google::protobuf::UnknownFieldSet *)&v16[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v16 | 1) ^ 0x1F) + 73) >> 6)];
    }
  }
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::Visualization_Chart *)((char *)this + 8), v5, (_DWORD *)this + 16);
  *((_DWORD *)this + 16) = (_DWORD)v5;
  return (char *)v5;
}

uint64_t SnippetUI::Visualization_Chart::GetCachedSize(SnippetUI::Visualization_Chart *this)
{
  return *((unsigned int *)this + 16);
}

google::protobuf::internal *SnippetUI::Visualization_Chart::_InternalParse(SnippetUI::Visualization_Chart *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  std::string **v5;
  std::string **v6;
  uint64_t *v7;
  google::protobuf::internal::ParseContext *v8;
  google::protobuf::internal *TagFallback;
  char *v10;
  SnippetUI::VisualProperty *v11;
  char *v12;
  SnippetUI::TextProperty *v13;
  SnippetUI::ActionProperty *v14;
  std::string *v15;
  std::string::value_type *v16;
  google::protobuf::internal::ParseContext *v17;
  char *v18;
  BOOL v19;
  google::protobuf::internal *v21;

  v21 = a2;
  v5 = (std::string **)((char *)this + 24);
  v6 = (std::string **)((char *)this + 16);
  v7 = (uint64_t *)((char *)this + 8);
  while (2)
  {
    if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v21, *((_DWORD *)a3 + 23)) & 1) != 0)
      return v21;
    TagFallback = (google::protobuf::internal *)((char *)v21 + 1);
    v10 = (char *)*(unsigned __int8 *)v21;
    if ((*(char *)v21 & 0x80000000) == 0)
      goto LABEL_6;
    v10 = (char *)(v10 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v21 + 2);
LABEL_6:
      v21 = TagFallback;
      goto LABEL_7;
    }
    TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v21, v10);
    v21 = TagFallback;
    if (!TagFallback)
      return TagFallback;
LABEL_7:
    switch(v10 >> 3)
    {
      case 1u:
        if (v10 != 10)
          goto LABEL_33;
        v11 = (SnippetUI::VisualProperty *)*((_QWORD *)this + 4);
        if (!v11)
        {
          v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::VisualProperty>(0);
          *((_QWORD *)this + 4) = v11;
          TagFallback = v21;
        }
        v12 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::VisualProperty>(a3, v11, TagFallback);
        goto LABEL_38;
      case 2u:
        if (v10 != 18)
          goto LABEL_33;
        v13 = (SnippetUI::TextProperty *)*((_QWORD *)this + 5);
        if (v13)
          goto LABEL_19;
        v13 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 5) = v13;
        goto LABEL_18;
      case 3u:
        if (v10 != 26)
          goto LABEL_33;
        v13 = (SnippetUI::TextProperty *)*((_QWORD *)this + 6);
        if (v13)
          goto LABEL_19;
        v13 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 6) = v13;
LABEL_18:
        TagFallback = v21;
LABEL_19:
        v12 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::TextProperty>(a3, v13, TagFallback);
        goto LABEL_38;
      case 4u:
        if (v10 != 34)
          goto LABEL_33;
        v14 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 7);
        if (!v14)
        {
          v14 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
          *((_QWORD *)this + 7) = v14;
          TagFallback = v21;
        }
        v12 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::ActionProperty>(a3, v14, TagFallback);
        goto LABEL_38;
      case 5u:
        if (v10 != 42)
          goto LABEL_33;
        v15 = *v6;
        if (*v6 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v6, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v15 = *v6;
          TagFallback = v21;
        }
        v16 = (std::string::value_type *)TagFallback;
        v17 = a3;
        v18 = "SnippetUI.Visualization_Chart.component_name";
        goto LABEL_32;
      case 6u:
        if (v10 != 50)
          goto LABEL_33;
        v15 = *v5;
        if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v15 = *v5;
          TagFallback = v21;
        }
        v16 = (std::string::value_type *)TagFallback;
        v17 = a3;
        v18 = "SnippetUI.Visualization_Chart.link_identifier";
LABEL_32:
        v12 = google::protobuf::internal::InlineGreedyStringParserUTF8(v15, v16, (uint64_t)v17, (google::protobuf::internal *)v18);
        goto LABEL_38;
      default:
LABEL_33:
        if ((_DWORD)v10)
          v19 = (v10 & 7) == 4;
        else
          v19 = 1;
        if (v19)
        {
          *((_DWORD *)a3 + 20) = (_DWORD)v10 - 1;
          return TagFallback;
        }
        v12 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v10, v7, TagFallback, a3, v8);
LABEL_38:
        v21 = (google::protobuf::internal *)v12;
        if (v12)
          continue;
        TagFallback = 0;
        break;
    }
    return TagFallback;
  }
}

const google::protobuf::UnknownFieldSet *SnippetUI::Visualization_Chart::InternalSerializeWithCachedSizesToArray(SnippetUI::Visualization_Chart *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  char *v5;
  SnippetUI::VisualProperty *v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  google::protobuf::UnknownFieldSet *v11;
  _BYTE *v12;
  _BYTE *v13;
  unsigned int v14;
  unsigned int v15;
  SnippetUI::TextProperty *v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  google::protobuf::UnknownFieldSet *v20;
  _BYTE *v21;
  _BYTE *v22;
  unsigned int v23;
  unsigned int v24;
  SnippetUI::TextProperty *v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  google::protobuf::UnknownFieldSet *v29;
  _BYTE *v30;
  _BYTE *v31;
  unsigned int v32;
  unsigned int v33;
  SnippetUI::ActionProperty *v34;
  unsigned int v35;
  google::protobuf::UnknownFieldSet *v36;
  unsigned int v37;
  _BYTE *v38;
  _BYTE *v39;
  unsigned int v40;
  unsigned int v41;
  google::protobuf::internal *v42;
  const char *v43;
  google::protobuf::internal *v44;
  const char *v45;
  uint64_t v46;

  v5 = (char *)a2;
  if (this == (SnippetUI::Visualization_Chart *)&SnippetUI::_Visualization_Chart_default_instance_)
    goto LABEL_49;
  v7 = (SnippetUI::VisualProperty *)*((_QWORD *)this + 4);
  if (v7)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
    {
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      v7 = (SnippetUI::VisualProperty *)*((_QWORD *)this + 4);
    }
    *v5 = 10;
    v8 = *((_DWORD *)v7 + 15);
    if (v8 > 0x7F)
    {
      v5[1] = v8 | 0x80;
      v10 = v8 >> 7;
      if (v8 >> 14)
      {
        v12 = v5 + 2;
        do
        {
          v13 = v12;
          *v12++ = v10 | 0x80;
          v14 = v10 >> 7;
          v15 = v10 >> 14;
          v10 >>= 7;
        }
        while (v15);
        v11 = (google::protobuf::UnknownFieldSet *)(v13 + 2);
        *v12 = v14;
        goto LABEL_13;
      }
      v5[2] = v10;
      v9 = 3;
    }
    else
    {
      v5[1] = v8;
      v9 = 2;
    }
    v11 = (google::protobuf::UnknownFieldSet *)&v5[v9];
LABEL_13:
    v5 = (char *)SnippetUI::VisualProperty::InternalSerializeWithCachedSizesToArray(v7, v11, a3, a4);
  }
  v16 = (SnippetUI::TextProperty *)*((_QWORD *)this + 5);
  if (!v16)
    goto LABEL_26;
  if ((unint64_t)v5 >= *(_QWORD *)a3)
  {
    v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v16 = (SnippetUI::TextProperty *)*((_QWORD *)this + 5);
  }
  *v5 = 18;
  v17 = *((_DWORD *)v16 + 15);
  if (v17 > 0x7F)
  {
    v5[1] = v17 | 0x80;
    v19 = v17 >> 7;
    if (v17 >> 14)
    {
      v21 = v5 + 2;
      do
      {
        v22 = v21;
        *v21++ = v19 | 0x80;
        v23 = v19 >> 7;
        v24 = v19 >> 14;
        v19 >>= 7;
      }
      while (v24);
      v20 = (google::protobuf::UnknownFieldSet *)(v22 + 2);
      *v21 = v23;
      goto LABEL_25;
    }
    v5[2] = v19;
    v18 = 3;
  }
  else
  {
    v5[1] = v17;
    v18 = 2;
  }
  v20 = (google::protobuf::UnknownFieldSet *)&v5[v18];
LABEL_25:
  v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v16, v20, a3, a4);
LABEL_26:
  v25 = (SnippetUI::TextProperty *)*((_QWORD *)this + 6);
  if (!v25)
    goto LABEL_38;
  if ((unint64_t)v5 >= *(_QWORD *)a3)
  {
    v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v25 = (SnippetUI::TextProperty *)*((_QWORD *)this + 6);
  }
  *v5 = 26;
  v26 = *((_DWORD *)v25 + 15);
  if (v26 > 0x7F)
  {
    v5[1] = v26 | 0x80;
    v28 = v26 >> 7;
    if (v26 >> 14)
    {
      v30 = v5 + 2;
      do
      {
        v31 = v30;
        *v30++ = v28 | 0x80;
        v32 = v28 >> 7;
        v33 = v28 >> 14;
        v28 >>= 7;
      }
      while (v33);
      v29 = (google::protobuf::UnknownFieldSet *)(v31 + 2);
      *v30 = v32;
      goto LABEL_37;
    }
    v5[2] = v28;
    v27 = 3;
  }
  else
  {
    v5[1] = v26;
    v27 = 2;
  }
  v29 = (google::protobuf::UnknownFieldSet *)&v5[v27];
LABEL_37:
  v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v25, v29, a3, a4);
LABEL_38:
  v34 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 7);
  if (v34)
  {
    if ((unint64_t)v5 >= *(_QWORD *)a3)
    {
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
      v34 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 7);
    }
    *v5 = 34;
    v35 = *((_DWORD *)v34 + 12);
    if (v35 > 0x7F)
    {
      v5[1] = v35 | 0x80;
      v37 = v35 >> 7;
      if (v35 >> 14)
      {
        v38 = v5 + 2;
        do
        {
          v39 = v38;
          *v38++ = v37 | 0x80;
          v40 = v37 >> 7;
          v41 = v37 >> 14;
          v37 >>= 7;
        }
        while (v41);
        v36 = (google::protobuf::UnknownFieldSet *)(v39 + 2);
        *v38 = v40;
      }
      else
      {
        v5[2] = v37;
        v36 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
      }
    }
    else
    {
      v5[1] = v35;
      v36 = (google::protobuf::UnknownFieldSet *)(v5 + 2);
    }
    v5 = (char *)SnippetUI::ActionProperty::InternalSerializeWithCachedSizesToArray(v34, v36, a3, a4);
  }
LABEL_49:
  v42 = (google::protobuf::internal *)*((_QWORD *)this + 2);
  if (*((char *)v42 + 23) < 0)
  {
    v43 = (const char *)*((_QWORD *)v42 + 1);
    if (!v43)
      goto LABEL_55;
    v42 = *(google::protobuf::internal **)v42;
    goto LABEL_54;
  }
  v43 = (const char *)*((unsigned __int8 *)v42 + 23);
  if (*((_BYTE *)v42 + 23))
  {
LABEL_54:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v42, v43, 1, (google::protobuf::internal *)"SnippetUI.Visualization_Chart.component_name");
    v5 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 5, *((_QWORD *)this + 2), v5);
  }
LABEL_55:
  v44 = (google::protobuf::internal *)*((_QWORD *)this + 3);
  if (*((char *)v44 + 23) < 0)
  {
    v45 = (const char *)*((_QWORD *)v44 + 1);
    if (!v45)
      goto LABEL_61;
    v44 = *(google::protobuf::internal **)v44;
    goto LABEL_60;
  }
  v45 = (const char *)*((unsigned __int8 *)v44 + 23);
  if (*((_BYTE *)v44 + 23))
  {
LABEL_60:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v44, v45, 1, (google::protobuf::internal *)"SnippetUI.Visualization_Chart.link_identifier");
    v5 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 6, *((_QWORD *)this + 3), v5);
  }
LABEL_61:
  v46 = *((_QWORD *)this + 1);
  if ((v46 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v46 & 0xFFFFFFFFFFFFFFFELL), (const google::protobuf::UnknownFieldSet *)v5, a3, a4);
  else
    return (const google::protobuf::UnknownFieldSet *)v5;
}

void SnippetUI::Visualization_Chart::CopyFrom(SnippetUI::Visualization_Chart *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    SnippetUI::Visualization_Chart::Clear(this);
    SnippetUI::Visualization_Chart::MergeFrom(this, a2);
  }
}

void SnippetUI::Visualization_Chart::MergeFrom(SnippetUI::Visualization_Chart *this, const google::protobuf::Message *lpsrc)
{
  std::string *v4;
  const SnippetUI::Visualization_Chart *v5;
  google::protobuf::Message *v6;
  char v7;
  std::string v8[2];

  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Visualization.pb.cc", 538);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5)
    SnippetUI::Visualization_Chart::MergeFrom(this, v5);
  else
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
}

void sub_1BF942078(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::Visualization_Chart::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 64) = a2;
  return this;
}

uint64_t SnippetUI::Visualization_Chart::GetMetadata(SnippetUI::Visualization_Chart *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_Visualization_2eproto);
  return file_level_metadata_Visualization_2eproto;
}

void InitDefaultsscc_info_Visualization_Map_Visualization_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Visualization.pb.cc", a4);
  SnippetUI::Visualization_Map::Visualization_Map((SnippetUI::Visualization_Map *)&SnippetUI::_Visualization_Map_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_Visualization_Map_default_instance_, v4);
  qword_1ED1D4358 = (uint64_t)&SnippetUI::_VisualProperty_default_instance_;
  unk_1ED1D4360 = &SnippetUI::_TextProperty_default_instance_;
  qword_1ED1D4368 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1ED1D4370 = &SnippetUI::_ActionProperty_default_instance_;
}

SnippetUI::Visualization_Map *SnippetUI::Visualization_Map::Visualization_Map(SnippetUI::Visualization_Map *this)
{
  *(_QWORD *)this = &off_1E792EB30;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 16) = 0;
  if (atomic_load(scc_info_Visualization_Map_Visualization_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Visualization_Map_Visualization_2eproto);
  *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  return this;
}

void sub_1BF9421A0(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::Visualization_Map::~Visualization_Map(SnippetUI::Visualization_Map *this)
{
  SnippetUI::Visualization_Map::~Visualization_Map(this);
  JUMPOUT(0x1C3B8D890);
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)this = &off_1E792EB30;
  v2 = *((_QWORD *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x1C3B8D890](v2, 0x1012C40EC159624);
  }
  v4 = *((_QWORD *)this + 3);
  if ((uint64_t *)v4 != &google::protobuf::internal::fixed_address_empty_string && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0)
      operator delete(*(void **)v4);
    MEMORY[0x1C3B8D890](v4, 0x1012C40EC159624);
  }
  if (this != (SnippetUI::Visualization_Map *)&SnippetUI::_Visualization_Map_default_instance_)
  {
    v6 = *((_QWORD *)this + 4);
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    v7 = *((_QWORD *)this + 5);
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    v8 = *((_QWORD *)this + 6);
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    v9 = *((_QWORD *)this + 7);
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

SnippetUI::Visualization_Map *SnippetUI::Visualization_Map::New(SnippetUI::Visualization_Map *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Visualization_Map>(0);
}

SnippetUI::Visualization_Map *SnippetUI::Visualization_Map::New(SnippetUI::Visualization_Map *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Visualization_Map>(a2);
}

void SnippetUI::Visualization_Map::Clear(SnippetUI::Visualization_Map *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  google::protobuf::internal::InternalMetadataWithArena *v8;
  char v9;

  v2 = *((_QWORD *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(_BYTE **)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v2 = 0;
      *(_BYTE *)(v2 + 23) = 0;
    }
  }
  v3 = *((_QWORD *)this + 3);
  if ((uint64_t *)v3 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v3 + 23) < 0)
    {
      **(_BYTE **)v3 = 0;
      *(_QWORD *)(v3 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v3 = 0;
      *(_BYTE *)(v3 + 23) = 0;
    }
  }
  v4 = *((_QWORD *)this + 4);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  *((_QWORD *)this + 4) = 0;
  v5 = *((_QWORD *)this + 5);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *((_QWORD *)this + 5) = 0;
  v6 = *((_QWORD *)this + 6);
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  *((_QWORD *)this + 6) = 0;
  v7 = *((_QWORD *)this + 7);
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v9 = *((_BYTE *)this + 8);
  v8 = (SnippetUI::Visualization_Map *)((char *)this + 8);
  *((_QWORD *)v8 + 6) = 0;
  if ((v9 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v8);
}

uint64_t SnippetUI::Visualization_Map::IsInitialized(SnippetUI::Visualization_Map *this)
{
  return 1;
}

char *SnippetUI::Visualization_Map::ByteSizeLong(SnippetUI::Visualization_Map *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  const google::protobuf::UnknownFieldSet *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  SnippetUI::VisualProperty *v9;
  char *v10;
  SnippetUI::TextProperty *v11;
  char *v12;
  SnippetUI::TextProperty *v13;
  char *v14;
  SnippetUI::ActionProperty *v15;
  char *v16;

  v2 = *((_QWORD *)this + 2);
  v3 = *(unsigned __int8 *)(v2 + 23);
  if (*(char *)(v2 + 23) < 0)
  {
    if (*(_QWORD *)(v2 + 8))
      goto LABEL_3;
LABEL_7:
    v5 = 0;
    goto LABEL_8;
  }
  if (!*(_BYTE *)(v2 + 23))
    goto LABEL_7;
LABEL_3:
  v4 = *(_QWORD *)(v2 + 8);
  if ((v3 & 0x80u) == 0)
    v4 = v3;
  v5 = (const google::protobuf::UnknownFieldSet *)(v4 + ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_8:
  v6 = *((_QWORD *)this + 3);
  v7 = *(unsigned __int8 *)(v6 + 23);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(_QWORD *)(v6 + 8))
      goto LABEL_13;
  }
  else if (!*(_BYTE *)(v6 + 23))
  {
    goto LABEL_13;
  }
  v8 = *(_QWORD *)(v6 + 8);
  if ((v7 & 0x80u) == 0)
    v8 = v7;
  v5 = (const google::protobuf::UnknownFieldSet *)((char *)v5 + v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_13:
  if (this != (SnippetUI::Visualization_Map *)&SnippetUI::_Visualization_Map_default_instance_)
  {
    v9 = (SnippetUI::VisualProperty *)*((_QWORD *)this + 4);
    if (v9)
    {
      v10 = SnippetUI::VisualProperty::ByteSizeLong(v9);
      v5 = (const google::protobuf::UnknownFieldSet *)&v10[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v11 = (SnippetUI::TextProperty *)*((_QWORD *)this + 5);
    if (v11)
    {
      v12 = SnippetUI::TextProperty::ByteSizeLong(v11);
      v5 = (const google::protobuf::UnknownFieldSet *)&v12[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v12 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v13 = (SnippetUI::TextProperty *)*((_QWORD *)this + 6);
    if (v13)
    {
      v14 = SnippetUI::TextProperty::ByteSizeLong(v13);
      v5 = (const google::protobuf::UnknownFieldSet *)&v14[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v14 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v15 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 7);
    if (v15)
    {
      v16 = SnippetUI::ActionProperty::ByteSizeLong(v15);
      v5 = (const google::protobuf::UnknownFieldSet *)&v16[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v16 | 1) ^ 0x1F) + 73) >> 6)];
    }
  }
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::Visualization_Map *)((char *)this + 8), v5, (_DWORD *)this + 16);
  *((_DWORD *)this + 16) = (_DWORD)v5;
  return (char *)v5;
}

uint64_t SnippetUI::Visualization_Map::GetCachedSize(SnippetUI::Visualization_Map *this)
{
  return *((unsigned int *)this + 16);
}

google::protobuf::internal *SnippetUI::Visualization_Map::_InternalParse(SnippetUI::Visualization_Map *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  std::string **v5;
  std::string **v6;
  uint64_t *v7;
  google::protobuf::internal::ParseContext *v8;
  google::protobuf::internal *TagFallback;
  char *v10;
  SnippetUI::VisualProperty *v11;
  char *v12;
  SnippetUI::TextProperty *v13;
  SnippetUI::ActionProperty *v14;
  std::string *v15;
  std::string::value_type *v16;
  google::protobuf::internal::ParseContext *v17;
  char *v18;
  BOOL v19;
  google::protobuf::internal *v21;

  v21 = a2;
  v5 = (std::string **)((char *)this + 24);
  v6 = (std::string **)((char *)this + 16);
  v7 = (uint64_t *)((char *)this + 8);
  while (2)
  {
    if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v21, *((_DWORD *)a3 + 23)) & 1) != 0)
      return v21;
    TagFallback = (google::protobuf::internal *)((char *)v21 + 1);
    v10 = (char *)*(unsigned __int8 *)v21;
    if ((*(char *)v21 & 0x80000000) == 0)
      goto LABEL_6;
    v10 = (char *)(v10 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v21 + 2);
LABEL_6:
      v21 = TagFallback;
      goto LABEL_7;
    }
    TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v21, v10);
    v21 = TagFallback;
    if (!TagFallback)
      return TagFallback;
LABEL_7:
    switch(v10 >> 3)
    {
      case 1u:
        if (v10 != 10)
          goto LABEL_33;
        v11 = (SnippetUI::VisualProperty *)*((_QWORD *)this + 4);
        if (!v11)
        {
          v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::VisualProperty>(0);
          *((_QWORD *)this + 4) = v11;
          TagFallback = v21;
        }
        v12 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::VisualProperty>(a3, v11, TagFallback);
        goto LABEL_38;
      case 2u:
        if (v10 != 18)
          goto LABEL_33;
        v13 = (SnippetUI::TextProperty *)*((_QWORD *)this + 5);
        if (v13)
          goto LABEL_19;
        v13 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 5) = v13;
        goto LABEL_18;
      case 3u:
        if (v10 != 26)
          goto LABEL_33;
        v13 = (SnippetUI::TextProperty *)*((_QWORD *)this + 6);
        if (v13)
          goto LABEL_19;
        v13 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 6) = v13;
LABEL_18:
        TagFallback = v21;
LABEL_19:
        v12 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::TextProperty>(a3, v13, TagFallback);
        goto LABEL_38;
      case 4u:
        if (v10 != 34)
          goto LABEL_33;
        v14 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 7);
        if (!v14)
        {
          v14 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
          *((_QWORD *)this + 7) = v14;
          TagFallback = v21;
        }
        v12 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::ActionProperty>(a3, v14, TagFallback);
        goto LABEL_38;
      case 5u:
        if (v10 != 42)
          goto LABEL_33;
        v15 = *v6;
        if (*v6 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v6, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v15 = *v6;
          TagFallback = v21;
        }
        v16 = (std::string::value_type *)TagFallback;
        v17 = a3;
        v18 = "SnippetUI.Visualization_Map.component_name";
        goto LABEL_32;
      case 6u:
        if (v10 != 50)
          goto LABEL_33;
        v15 = *v5;
        if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v15 = *v5;
          TagFallback = v21;
        }
        v16 = (std::string::value_type *)TagFallback;
        v17 = a3;
        v18 = "SnippetUI.Visualization_Map.link_identifier";
LABEL_32:
        v12 = google::protobuf::internal::InlineGreedyStringParserUTF8(v15, v16, (uint64_t)v17, (google::protobuf::internal *)v18);
        goto LABEL_38;
      default:
LABEL_33:
        if ((_DWORD)v10)
          v19 = (v10 & 7) == 4;
        else
          v19 = 1;
        if (v19)
        {
          *((_DWORD *)a3 + 20) = (_DWORD)v10 - 1;
          return TagFallback;
        }
        v12 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v10, v7, TagFallback, a3, v8);
LABEL_38:
        v21 = (google::protobuf::internal *)v12;
        if (v12)
          continue;
        TagFallback = 0;
        break;
    }
    return TagFallback;
  }
}

const google::protobuf::UnknownFieldSet *SnippetUI::Visualization_Map::InternalSerializeWithCachedSizesToArray(SnippetUI::Visualization_Map *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  char *v5;
  SnippetUI::VisualProperty *v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  google::protobuf::UnknownFieldSet *v11;
  _BYTE *v12;
  _BYTE *v13;
  unsigned int v14;
  unsigned int v15;
  SnippetUI::TextProperty *v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  google::protobuf::UnknownFieldSet *v20;
  _BYTE *v21;
  _BYTE *v22;
  unsigned int v23;
  unsigned int v24;
  SnippetUI::TextProperty *v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  google::protobuf::UnknownFieldSet *v29;
  _BYTE *v30;
  _BYTE *v31;
  unsigned int v32;
  unsigned int v33;
  SnippetUI::ActionProperty *v34;
  unsigned int v35;
  google::protobuf::UnknownFieldSet *v36;
  unsigned int v37;
  _BYTE *v38;
  _BYTE *v39;
  unsigned int v40;
  unsigned int v41;
  google::protobuf::internal *v42;
  const char *v43;
  google::protobuf::internal *v44;
  const char *v45;
  uint64_t v46;

  v5 = (char *)a2;
  if (this == (SnippetUI::Visualization_Map *)&SnippetUI::_Visualization_Map_default_instance_)
    goto LABEL_49;
  v7 = (SnippetUI::VisualProperty *)*((_QWORD *)this + 4);
  if (v7)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
    {
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      v7 = (SnippetUI::VisualProperty *)*((_QWORD *)this + 4);
    }
    *v5 = 10;
    v8 = *((_DWORD *)v7 + 15);
    if (v8 > 0x7F)
    {
      v5[1] = v8 | 0x80;
      v10 = v8 >> 7;
      if (v8 >> 14)
      {
        v12 = v5 + 2;
        do
        {
          v13 = v12;
          *v12++ = v10 | 0x80;
          v14 = v10 >> 7;
          v15 = v10 >> 14;
          v10 >>= 7;
        }
        while (v15);
        v11 = (google::protobuf::UnknownFieldSet *)(v13 + 2);
        *v12 = v14;
        goto LABEL_13;
      }
      v5[2] = v10;
      v9 = 3;
    }
    else
    {
      v5[1] = v8;
      v9 = 2;
    }
    v11 = (google::protobuf::UnknownFieldSet *)&v5[v9];
LABEL_13:
    v5 = (char *)SnippetUI::VisualProperty::InternalSerializeWithCachedSizesToArray(v7, v11, a3, a4);
  }
  v16 = (SnippetUI::TextProperty *)*((_QWORD *)this + 5);
  if (!v16)
    goto LABEL_26;
  if ((unint64_t)v5 >= *(_QWORD *)a3)
  {
    v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v16 = (SnippetUI::TextProperty *)*((_QWORD *)this + 5);
  }
  *v5 = 18;
  v17 = *((_DWORD *)v16 + 15);
  if (v17 > 0x7F)
  {
    v5[1] = v17 | 0x80;
    v19 = v17 >> 7;
    if (v17 >> 14)
    {
      v21 = v5 + 2;
      do
      {
        v22 = v21;
        *v21++ = v19 | 0x80;
        v23 = v19 >> 7;
        v24 = v19 >> 14;
        v19 >>= 7;
      }
      while (v24);
      v20 = (google::protobuf::UnknownFieldSet *)(v22 + 2);
      *v21 = v23;
      goto LABEL_25;
    }
    v5[2] = v19;
    v18 = 3;
  }
  else
  {
    v5[1] = v17;
    v18 = 2;
  }
  v20 = (google::protobuf::UnknownFieldSet *)&v5[v18];
LABEL_25:
  v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v16, v20, a3, a4);
LABEL_26:
  v25 = (SnippetUI::TextProperty *)*((_QWORD *)this + 6);
  if (!v25)
    goto LABEL_38;
  if ((unint64_t)v5 >= *(_QWORD *)a3)
  {
    v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v25 = (SnippetUI::TextProperty *)*((_QWORD *)this + 6);
  }
  *v5 = 26;
  v26 = *((_DWORD *)v25 + 15);
  if (v26 > 0x7F)
  {
    v5[1] = v26 | 0x80;
    v28 = v26 >> 7;
    if (v26 >> 14)
    {
      v30 = v5 + 2;
      do
      {
        v31 = v30;
        *v30++ = v28 | 0x80;
        v32 = v28 >> 7;
        v33 = v28 >> 14;
        v28 >>= 7;
      }
      while (v33);
      v29 = (google::protobuf::UnknownFieldSet *)(v31 + 2);
      *v30 = v32;
      goto LABEL_37;
    }
    v5[2] = v28;
    v27 = 3;
  }
  else
  {
    v5[1] = v26;
    v27 = 2;
  }
  v29 = (google::protobuf::UnknownFieldSet *)&v5[v27];
LABEL_37:
  v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v25, v29, a3, a4);
LABEL_38:
  v34 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 7);
  if (v34)
  {
    if ((unint64_t)v5 >= *(_QWORD *)a3)
    {
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
      v34 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 7);
    }
    *v5 = 34;
    v35 = *((_DWORD *)v34 + 12);
    if (v35 > 0x7F)
    {
      v5[1] = v35 | 0x80;
      v37 = v35 >> 7;
      if (v35 >> 14)
      {
        v38 = v5 + 2;
        do
        {
          v39 = v38;
          *v38++ = v37 | 0x80;
          v40 = v37 >> 7;
          v41 = v37 >> 14;
          v37 >>= 7;
        }
        while (v41);
        v36 = (google::protobuf::UnknownFieldSet *)(v39 + 2);
        *v38 = v40;
      }
      else
      {
        v5[2] = v37;
        v36 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
      }
    }
    else
    {
      v5[1] = v35;
      v36 = (google::protobuf::UnknownFieldSet *)(v5 + 2);
    }
    v5 = (char *)SnippetUI::ActionProperty::InternalSerializeWithCachedSizesToArray(v34, v36, a3, a4);
  }
LABEL_49:
  v42 = (google::protobuf::internal *)*((_QWORD *)this + 2);
  if (*((char *)v42 + 23) < 0)
  {
    v43 = (const char *)*((_QWORD *)v42 + 1);
    if (!v43)
      goto LABEL_55;
    v42 = *(google::protobuf::internal **)v42;
    goto LABEL_54;
  }
  v43 = (const char *)*((unsigned __int8 *)v42 + 23);
  if (*((_BYTE *)v42 + 23))
  {
LABEL_54:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v42, v43, 1, (google::protobuf::internal *)"SnippetUI.Visualization_Map.component_name");
    v5 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 5, *((_QWORD *)this + 2), v5);
  }
LABEL_55:
  v44 = (google::protobuf::internal *)*((_QWORD *)this + 3);
  if (*((char *)v44 + 23) < 0)
  {
    v45 = (const char *)*((_QWORD *)v44 + 1);
    if (!v45)
      goto LABEL_61;
    v44 = *(google::protobuf::internal **)v44;
    goto LABEL_60;
  }
  v45 = (const char *)*((unsigned __int8 *)v44 + 23);
  if (*((_BYTE *)v44 + 23))
  {
LABEL_60:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v44, v45, 1, (google::protobuf::internal *)"SnippetUI.Visualization_Map.link_identifier");
    v5 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 6, *((_QWORD *)this + 3), v5);
  }
LABEL_61:
  v46 = *((_QWORD *)this + 1);
  if ((v46 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v46 & 0xFFFFFFFFFFFFFFFELL), (const google::protobuf::UnknownFieldSet *)v5, a3, a4);
  else
    return (const google::protobuf::UnknownFieldSet *)v5;
}

void SnippetUI::Visualization_Map::CopyFrom(SnippetUI::Visualization_Map *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    SnippetUI::Visualization_Map::Clear(this);
    SnippetUI::Visualization_Map::MergeFrom(this, a2);
  }
}

void SnippetUI::Visualization_Map::MergeFrom(SnippetUI::Visualization_Map *this, const google::protobuf::Message *lpsrc)
{
  std::string *v4;
  const SnippetUI::Visualization_Map *v5;
  google::protobuf::Message *v6;
  char v7;
  std::string v8[2];

  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Visualization.pb.cc", 1404);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5)
    SnippetUI::Visualization_Map::MergeFrom(this, v5);
  else
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
}

void sub_1BF942B98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::Visualization_Map::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 64) = a2;
  return this;
}

uint64_t SnippetUI::Visualization_Map::GetMetadata(SnippetUI::Visualization_Map *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_Visualization_2eproto);
  return qword_1EF581A68;
}

void *SnippetUI::Visualization_Map::default_instance(SnippetUI::Visualization_Map *this)
{
  if (atomic_load(scc_info_Visualization_Map_Visualization_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Visualization_Map_Visualization_2eproto);
  return &SnippetUI::_Visualization_Map_default_instance_;
}

void SnippetUI::Visualization_Map::MergeFrom(SnippetUI::Visualization_Map *this, const SnippetUI::Visualization_Map *a2)
{
  std::string *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  int **v10;
  int **v11;
  int **v12;
  int **v13;
  int **v14;
  int **v15;
  int **v16;
  int **v17;
  int **v18;
  int **v19;
  int **v20;
  int **v21;
  char v22;
  std::string v23[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v23, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Visualization.pb.cc", 1419);
    v4 = google::protobuf::internal::LogMessage::operator<<(v23, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v22, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v23[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::Visualization_Map *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  v6 = *((_QWORD *)a2 + 2);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(_QWORD *)(v6 + 8))
      goto LABEL_13;
  }
  else if (!*(_BYTE *)(v6 + 23))
  {
    goto LABEL_13;
  }
  v7 = (uint64_t *)*((_QWORD *)this + 2);
  if (v7 != (uint64_t *)v6)
  {
    if (v7 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, v6);
    else
      std::string::operator=(*((std::string **)this + 2), (const std::string *)v6);
  }
LABEL_13:
  v8 = *((_QWORD *)a2 + 3);
  if (*(char *)(v8 + 23) < 0)
  {
    if (!*(_QWORD *)(v8 + 8))
      goto LABEL_21;
  }
  else if (!*(_BYTE *)(v8 + 23))
  {
    goto LABEL_21;
  }
  v9 = (uint64_t *)*((_QWORD *)this + 3);
  if (v9 != (uint64_t *)v8)
  {
    if (v9 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 3, v8);
    else
      std::string::operator=(*((std::string **)this + 3), (const std::string *)v8);
  }
LABEL_21:
  if (a2 != (const SnippetUI::Visualization_Map *)&SnippetUI::_Visualization_Map_default_instance_)
  {
    v10 = (int **)*((_QWORD *)a2 + 4);
    if (v10)
    {
      v11 = (int **)*((_QWORD *)this + 4);
      if (!v11)
      {
        v11 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::VisualProperty>(0);
        *((_QWORD *)this + 4) = v11;
        v10 = (int **)*((_QWORD *)a2 + 4);
      }
      if (v10)
        v12 = v10;
      else
        v12 = (int **)&SnippetUI::_VisualProperty_default_instance_;
      SnippetUI::VisualProperty::MergeFrom(v11, v12);
    }
    v13 = (int **)*((_QWORD *)a2 + 5);
    if (v13)
    {
      v14 = (int **)*((_QWORD *)this + 5);
      if (!v14)
      {
        v14 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 5) = v14;
        v13 = (int **)*((_QWORD *)a2 + 5);
      }
      if (v13)
        v15 = v13;
      else
        v15 = (int **)&SnippetUI::_TextProperty_default_instance_;
      SnippetUI::TextProperty::MergeFrom(v14, v15);
    }
    v16 = (int **)*((_QWORD *)a2 + 6);
    if (v16)
    {
      v17 = (int **)*((_QWORD *)this + 6);
      if (!v17)
      {
        v17 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 6) = v17;
        v16 = (int **)*((_QWORD *)a2 + 6);
      }
      if (v16)
        v18 = v16;
      else
        v18 = (int **)&SnippetUI::_TextProperty_default_instance_;
      SnippetUI::TextProperty::MergeFrom(v17, v18);
    }
    v19 = (int **)*((_QWORD *)a2 + 7);
    if (v19)
    {
      v20 = (int **)*((_QWORD *)this + 7);
      if (!v20)
      {
        v20 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
        *((_QWORD *)this + 7) = v20;
        v19 = (int **)*((_QWORD *)a2 + 7);
      }
      if (v19)
        v21 = v19;
      else
        v21 = (int **)&SnippetUI::_ActionProperty_default_instance_;
      SnippetUI::ActionProperty::MergeFrom(v20, v21);
    }
  }
}

void sub_1BF942E08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

SnippetUI::Visualization_Map *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Visualization_Map>(google::protobuf::internal::ArenaImpl *this)
{
  SnippetUI::Visualization_Map *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (SnippetUI::Visualization_Map *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x48uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::Visualization_Map>);
    SnippetUI::Visualization_Map::Visualization_Map(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (SnippetUI::Visualization_Map *)operator new();
    SnippetUI::Visualization_Map::Visualization_Map(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_1BF942EA4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D890](v1, 0x10A1C4025EBE0BELL);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::Visualization_Map>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

void InitDefaultsscc_info_Visualization_Image_Visualization_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Visualization.pb.cc", a4);
  SnippetUI::Visualization_Image::Visualization_Image((SnippetUI::Visualization_Image *)&SnippetUI::_Visualization_Image_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_Visualization_Image_default_instance_, v4);
  qword_1ED1D4698 = (uint64_t)&SnippetUI::_VisualProperty_default_instance_;
  unk_1ED1D46A0 = &SnippetUI::_TextProperty_default_instance_;
  qword_1ED1D46A8 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1ED1D46B0 = &SnippetUI::_ActionProperty_default_instance_;
}

SnippetUI::Visualization_Image *SnippetUI::Visualization_Image::Visualization_Image(SnippetUI::Visualization_Image *this)
{
  *(_QWORD *)this = &off_1E792EA70;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 16) = 0;
  if (atomic_load(scc_info_Visualization_Image_Visualization_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Visualization_Image_Visualization_2eproto);
  *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  return this;
}

void sub_1BF9430C8(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::Visualization_Image::~Visualization_Image(SnippetUI::Visualization_Image *this)
{
  SnippetUI::Visualization_Image::~Visualization_Image(this);
  JUMPOUT(0x1C3B8D890);
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)this = &off_1E792EA70;
  v2 = *((_QWORD *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x1C3B8D890](v2, 0x1012C40EC159624);
  }
  v4 = *((_QWORD *)this + 3);
  if ((uint64_t *)v4 != &google::protobuf::internal::fixed_address_empty_string && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0)
      operator delete(*(void **)v4);
    MEMORY[0x1C3B8D890](v4, 0x1012C40EC159624);
  }
  if (this != (SnippetUI::Visualization_Image *)&SnippetUI::_Visualization_Image_default_instance_)
  {
    v6 = *((_QWORD *)this + 4);
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    v7 = *((_QWORD *)this + 5);
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    v8 = *((_QWORD *)this + 6);
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    v9 = *((_QWORD *)this + 7);
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

SnippetUI::Visualization_Image *SnippetUI::Visualization_Image::New(SnippetUI::Visualization_Image *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Visualization_Image>(0);
}

SnippetUI::Visualization_Image *SnippetUI::Visualization_Image::New(SnippetUI::Visualization_Image *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Visualization_Image>(a2);
}

void SnippetUI::Visualization_Image::Clear(SnippetUI::Visualization_Image *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  google::protobuf::internal::InternalMetadataWithArena *v8;
  char v9;

  v2 = *((_QWORD *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(_BYTE **)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v2 = 0;
      *(_BYTE *)(v2 + 23) = 0;
    }
  }
  v3 = *((_QWORD *)this + 3);
  if ((uint64_t *)v3 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v3 + 23) < 0)
    {
      **(_BYTE **)v3 = 0;
      *(_QWORD *)(v3 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v3 = 0;
      *(_BYTE *)(v3 + 23) = 0;
    }
  }
  v4 = *((_QWORD *)this + 4);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  *((_QWORD *)this + 4) = 0;
  v5 = *((_QWORD *)this + 5);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *((_QWORD *)this + 5) = 0;
  v6 = *((_QWORD *)this + 6);
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  *((_QWORD *)this + 6) = 0;
  v7 = *((_QWORD *)this + 7);
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v9 = *((_BYTE *)this + 8);
  v8 = (SnippetUI::Visualization_Image *)((char *)this + 8);
  *((_QWORD *)v8 + 6) = 0;
  if ((v9 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v8);
}

uint64_t SnippetUI::Visualization_Image::IsInitialized(SnippetUI::Visualization_Image *this)
{
  return 1;
}

char *SnippetUI::Visualization_Image::ByteSizeLong(SnippetUI::Visualization_Image *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  const google::protobuf::UnknownFieldSet *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  SnippetUI::VisualProperty *v9;
  char *v10;
  SnippetUI::TextProperty *v11;
  char *v12;
  SnippetUI::TextProperty *v13;
  char *v14;
  SnippetUI::ActionProperty *v15;
  char *v16;

  v2 = *((_QWORD *)this + 2);
  v3 = *(unsigned __int8 *)(v2 + 23);
  if (*(char *)(v2 + 23) < 0)
  {
    if (*(_QWORD *)(v2 + 8))
      goto LABEL_3;
LABEL_7:
    v5 = 0;
    goto LABEL_8;
  }
  if (!*(_BYTE *)(v2 + 23))
    goto LABEL_7;
LABEL_3:
  v4 = *(_QWORD *)(v2 + 8);
  if ((v3 & 0x80u) == 0)
    v4 = v3;
  v5 = (const google::protobuf::UnknownFieldSet *)(v4 + ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_8:
  v6 = *((_QWORD *)this + 3);
  v7 = *(unsigned __int8 *)(v6 + 23);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(_QWORD *)(v6 + 8))
      goto LABEL_13;
  }
  else if (!*(_BYTE *)(v6 + 23))
  {
    goto LABEL_13;
  }
  v8 = *(_QWORD *)(v6 + 8);
  if ((v7 & 0x80u) == 0)
    v8 = v7;
  v5 = (const google::protobuf::UnknownFieldSet *)((char *)v5 + v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_13:
  if (this != (SnippetUI::Visualization_Image *)&SnippetUI::_Visualization_Image_default_instance_)
  {
    v9 = (SnippetUI::VisualProperty *)*((_QWORD *)this + 4);
    if (v9)
    {
      v10 = SnippetUI::VisualProperty::ByteSizeLong(v9);
      v5 = (const google::protobuf::UnknownFieldSet *)&v10[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v11 = (SnippetUI::TextProperty *)*((_QWORD *)this + 5);
    if (v11)
    {
      v12 = SnippetUI::TextProperty::ByteSizeLong(v11);
      v5 = (const google::protobuf::UnknownFieldSet *)&v12[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v12 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v13 = (SnippetUI::TextProperty *)*((_QWORD *)this + 6);
    if (v13)
    {
      v14 = SnippetUI::TextProperty::ByteSizeLong(v13);
      v5 = (const google::protobuf::UnknownFieldSet *)&v14[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v14 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v15 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 7);
    if (v15)
    {
      v16 = SnippetUI::ActionProperty::ByteSizeLong(v15);
      v5 = (const google::protobuf::UnknownFieldSet *)&v16[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v16 | 1) ^ 0x1F) + 73) >> 6)];
    }
  }
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::Visualization_Image *)((char *)this + 8), v5, (_DWORD *)this + 16);
  *((_DWORD *)this + 16) = (_DWORD)v5;
  return (char *)v5;
}

uint64_t SnippetUI::Visualization_Image::GetCachedSize(SnippetUI::Visualization_Image *this)
{
  return *((unsigned int *)this + 16);
}

google::protobuf::internal *SnippetUI::Visualization_Image::_InternalParse(SnippetUI::Visualization_Image *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  std::string **v5;
  std::string **v6;
  uint64_t *v7;
  google::protobuf::internal::ParseContext *v8;
  google::protobuf::internal *TagFallback;
  char *v10;
  SnippetUI::VisualProperty *v11;
  char *v12;
  SnippetUI::TextProperty *v13;
  SnippetUI::ActionProperty *v14;
  std::string *v15;
  std::string::value_type *v16;
  google::protobuf::internal::ParseContext *v17;
  char *v18;
  BOOL v19;
  google::protobuf::internal *v21;

  v21 = a2;
  v5 = (std::string **)((char *)this + 24);
  v6 = (std::string **)((char *)this + 16);
  v7 = (uint64_t *)((char *)this + 8);
  while (2)
  {
    if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v21, *((_DWORD *)a3 + 23)) & 1) != 0)
      return v21;
    TagFallback = (google::protobuf::internal *)((char *)v21 + 1);
    v10 = (char *)*(unsigned __int8 *)v21;
    if ((*(char *)v21 & 0x80000000) == 0)
      goto LABEL_6;
    v10 = (char *)(v10 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v21 + 2);
LABEL_6:
      v21 = TagFallback;
      goto LABEL_7;
    }
    TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v21, v10);
    v21 = TagFallback;
    if (!TagFallback)
      return TagFallback;
LABEL_7:
    switch(v10 >> 3)
    {
      case 1u:
        if (v10 != 10)
          goto LABEL_33;
        v11 = (SnippetUI::VisualProperty *)*((_QWORD *)this + 4);
        if (!v11)
        {
          v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::VisualProperty>(0);
          *((_QWORD *)this + 4) = v11;
          TagFallback = v21;
        }
        v12 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::VisualProperty>(a3, v11, TagFallback);
        goto LABEL_38;
      case 2u:
        if (v10 != 18)
          goto LABEL_33;
        v13 = (SnippetUI::TextProperty *)*((_QWORD *)this + 5);
        if (v13)
          goto LABEL_19;
        v13 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 5) = v13;
        goto LABEL_18;
      case 3u:
        if (v10 != 26)
          goto LABEL_33;
        v13 = (SnippetUI::TextProperty *)*((_QWORD *)this + 6);
        if (v13)
          goto LABEL_19;
        v13 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 6) = v13;
LABEL_18:
        TagFallback = v21;
LABEL_19:
        v12 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::TextProperty>(a3, v13, TagFallback);
        goto LABEL_38;
      case 4u:
        if (v10 != 34)
          goto LABEL_33;
        v14 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 7);
        if (!v14)
        {
          v14 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
          *((_QWORD *)this + 7) = v14;
          TagFallback = v21;
        }
        v12 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::ActionProperty>(a3, v14, TagFallback);
        goto LABEL_38;
      case 5u:
        if (v10 != 42)
          goto LABEL_33;
        v15 = *v6;
        if (*v6 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v6, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v15 = *v6;
          TagFallback = v21;
        }
        v16 = (std::string::value_type *)TagFallback;
        v17 = a3;
        v18 = "SnippetUI.Visualization_Image.component_name";
        goto LABEL_32;
      case 6u:
        if (v10 != 50)
          goto LABEL_33;
        v15 = *v5;
        if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v15 = *v5;
          TagFallback = v21;
        }
        v16 = (std::string::value_type *)TagFallback;
        v17 = a3;
        v18 = "SnippetUI.Visualization_Image.link_identifier";
LABEL_32:
        v12 = google::protobuf::internal::InlineGreedyStringParserUTF8(v15, v16, (uint64_t)v17, (google::protobuf::internal *)v18);
        goto LABEL_38;
      default:
LABEL_33:
        if ((_DWORD)v10)
          v19 = (v10 & 7) == 4;
        else
          v19 = 1;
        if (v19)
        {
          *((_DWORD *)a3 + 20) = (_DWORD)v10 - 1;
          return TagFallback;
        }
        v12 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v10, v7, TagFallback, a3, v8);
LABEL_38:
        v21 = (google::protobuf::internal *)v12;
        if (v12)
          continue;
        TagFallback = 0;
        break;
    }
    return TagFallback;
  }
}

