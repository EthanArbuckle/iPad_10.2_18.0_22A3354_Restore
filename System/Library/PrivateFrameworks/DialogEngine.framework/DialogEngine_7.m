void sub_1BFB3EA2C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + 24672;
  v4 = -24720;
  do
  {
    v3 = std::pair<std::string const,std::string>::~pair(v3) - 48;
    v4 += 48;
  }
  while (v4);
  _Unwind_Resume(a1);
}

_QWORD *siri::dialogengine::GetProfanityFilter_it(siri::dialogengine *this)
{
  _QWORD *v1;
  unsigned __int8 v2;
  uint64_t i;
  _QWORD v5[6];
  _QWORD v6[6];
  _QWORD v7[6];
  _QWORD v8[6];
  _QWORD v9[6];
  _QWORD v10[6];
  _QWORD v11[6];
  _QWORD v12[6];
  _QWORD v13[6];
  _QWORD v14[6];
  _QWORD v15[6];
  _QWORD v16[6];
  _QWORD v17[6];
  _QWORD v18[6];
  _QWORD v19[6];
  _QWORD v20[6];
  _QWORD v21[6];
  _QWORD v22[6];
  _QWORD v23[6];
  _QWORD v24[6];
  _QWORD v25[6];
  _QWORD v26[6];
  _QWORD v27[6];
  _QWORD v28[6];
  _QWORD v29[6];
  _QWORD v30[6];
  _QWORD v31[6];
  _QWORD v32[6];
  _QWORD v33[6];
  _QWORD v34[6];
  _QWORD v35[6];
  _QWORD v36[6];
  _QWORD v37[6];
  _QWORD v38[6];
  _QWORD v39[6];
  _QWORD v40[6];
  _QWORD v41[6];
  _QWORD v42[6];
  _QWORD v43[6];
  _QWORD v44[6];
  _QWORD v45[6];
  _QWORD v46[6];
  _QWORD v47[6];
  _QWORD v48[6];
  _QWORD v49[6];
  _QWORD v50[6];
  _QWORD v51[6];
  _QWORD v52[6];
  _QWORD v53[6];
  _QWORD v54[6];
  _QWORD v55[6];
  _QWORD v56[6];
  _QWORD v57[6];
  _QWORD v58[6];
  _QWORD v59[6];
  _QWORD v60[6];
  _QWORD v61[6];
  _QWORD v62[6];
  _QWORD v63[6];
  _QWORD v64[6];
  _QWORD v65[6];
  _QWORD v66[6];
  _QWORD v67[6];
  _QWORD v68[6];
  _QWORD v69[6];
  _QWORD v70[6];
  _QWORD v71[6];
  _QWORD v72[6];
  _QWORD v73[6];
  _QWORD v74[6];
  _QWORD v75[6];
  _QWORD v76[6];
  _QWORD v77[6];
  _QWORD v78[6];
  _QWORD v79[6];
  _QWORD v80[6];
  _QWORD v81[6];
  _QWORD v82[6];
  _QWORD v83[6];
  _QWORD v84[6];
  _QWORD v85[6];
  _QWORD v86[6];
  _QWORD v87[6];
  _QWORD v88[6];
  _QWORD v89[6];
  _QWORD v90[6];
  _QWORD v91[6];
  _QWORD v92[6];
  _QWORD v93[6];
  _QWORD v94[6];
  _QWORD v95[6];
  _QWORD v96[6];
  _QWORD v97[6];
  _QWORD v98[6];
  _QWORD v99[6];
  _QWORD v100[6];
  _QWORD v101[6];
  _QWORD v102[6];
  _QWORD v103[6];
  _QWORD v104[6];
  _QWORD v105[6];
  _QWORD v106[6];
  _QWORD v107[6];
  _QWORD v108[6];
  _QWORD v109[6];
  _QWORD v110[6];
  _QWORD v111[6];
  _QWORD v112[6];
  _QWORD v113[6];
  _QWORD v114[6];
  _QWORD v115[6];
  _QWORD v116[6];
  _QWORD v117[6];
  _QWORD v118[6];
  _QWORD v119[6];
  _QWORD v120[6];
  _QWORD v121[6];
  _QWORD v122[6];
  _QWORD v123[6];
  _QWORD v124[6];
  _QWORD v125[6];
  _QWORD v126[6];
  _QWORD v127[6];
  _QWORD v128[6];
  _QWORD v129[6];
  _QWORD v130[6];
  _QWORD v131[6];
  _QWORD v132[6];
  _QWORD v133[6];
  _QWORD v134[6];
  _QWORD v135[6];
  _QWORD v136[6];
  _QWORD v137[6];
  _QWORD v138[6];
  _QWORD v139[6];
  _QWORD v140[6];
  _QWORD v141[6];
  _QWORD v142[6];
  _QWORD v143[6];
  _QWORD v144[6];
  _QWORD v145[6];
  _QWORD v146[6];
  _QWORD v147[6];
  _QWORD v148[6];
  _QWORD v149[6];
  _QWORD v150[6];
  _QWORD v151[6];
  _QWORD v152[6];
  _QWORD v153[6];
  _QWORD v154[6];
  _QWORD v155[6];
  _QWORD v156[6];
  _QWORD v157[6];
  _QWORD v158[6];
  _QWORD v159[6];
  _QWORD v160[6];
  _QWORD v161[6];
  _QWORD v162[6];
  _QWORD v163[6];
  _QWORD v164[6];
  _QWORD v165[6];
  _QWORD v166[6];
  _QWORD v167[6];
  _QWORD v168[6];
  _QWORD v169[6];
  _QWORD v170[6];
  _QWORD v171[6];
  _QWORD v172[6];
  _QWORD v173[6];
  _QWORD v174[6];
  _QWORD v175[6];
  _QWORD v176[6];
  _QWORD v177[6];
  _QWORD v178[6];
  _QWORD v179[6];
  _QWORD v180[6];
  _QWORD v181[6];
  _QWORD v182[6];
  _QWORD v183[6];
  _QWORD v184[6];
  _QWORD v185[6];
  _QWORD v186[6];
  _QWORD v187[6];
  _QWORD v188[6];
  _QWORD v189[6];
  _QWORD v190[6];
  _QWORD v191[6];
  _QWORD v192[6];
  _QWORD v193[6];
  _QWORD v194[6];
  _QWORD v195[6];
  _QWORD v196[6];
  _QWORD v197[6];
  _QWORD v198[6];
  _QWORD v199[6];
  _QWORD v200[6];
  _QWORD v201[6];
  _QWORD v202[6];
  _QWORD v203[6];
  _QWORD v204[6];
  _QWORD v205[6];
  _QWORD v206[6];
  _QWORD v207[6];
  _QWORD v208[6];
  _QWORD v209[6];
  _QWORD v210[6];
  _QWORD v211[6];
  _QWORD v212[6];
  _QWORD v213[6];
  _QWORD v214[6];
  _QWORD v215[6];
  _QWORD v216[6];
  _QWORD v217[6];
  _QWORD v218[6];
  _QWORD v219[6];
  _QWORD v220[6];
  _QWORD v221[6];
  _QWORD v222[6];
  _QWORD v223[6];
  _QWORD v224[6];
  _QWORD v225[6];
  _QWORD v226[6];
  _QWORD v227[6];
  _QWORD v228[6];
  _QWORD v229[6];
  _QWORD v230[6];
  _QWORD v231[6];
  _QWORD v232[6];
  _QWORD v233[6];
  _QWORD v234[6];
  _QWORD v235[6];
  _QWORD v236[6];
  _QWORD v237[6];
  _QWORD v238[6];
  _QWORD v239[6];
  _QWORD v240[6];
  _QWORD v241[6];
  _QWORD v242[6];
  _QWORD v243[6];
  _QWORD v244[6];
  _QWORD v245[6];
  _QWORD v246[6];
  _QWORD v247[6];
  _QWORD v248[6];
  _QWORD v249[6];
  _QWORD v250[6];
  _QWORD v251[6];
  _QWORD v252[6];
  _QWORD v253[6];
  _QWORD v254[6];
  _QWORD v255[6];
  _QWORD v256[6];
  _QWORD v257[6];
  _QWORD v258[6];
  _QWORD v259[6];
  _QWORD v260[6];
  _QWORD v261[6];
  _QWORD v262[6];
  _QWORD v263[6];
  _QWORD v264[6];
  _QWORD v265[6];
  _QWORD v266[6];
  _QWORD v267[6];
  _QWORD v268[6];
  _QWORD v269[6];
  _QWORD v270[6];
  _QWORD v271[6];
  _QWORD v272[6];
  _QWORD v273[6];
  _QWORD v274[6];
  _QWORD v275[6];
  _QWORD v276[6];
  _QWORD v277[6];
  _QWORD v278[6];
  _QWORD v279[6];
  _QWORD v280[6];
  _QWORD v281[6];
  _QWORD v282[6];
  _QWORD v283[6];
  _QWORD v284[6];
  _QWORD v285[6];
  _QWORD v286[6];
  _QWORD v287[6];
  _QWORD v288[6];
  _QWORD v289[6];
  _QWORD v290[6];
  _QWORD v291[6];
  _QWORD v292[6];
  _QWORD v293[6];
  _QWORD v294[6];
  _QWORD v295[6];
  _QWORD v296[6];
  _QWORD v297[6];
  _QWORD v298[6];
  _QWORD v299[6];
  _QWORD v300[6];
  _QWORD v301[6];
  _QWORD v302[6];
  _QWORD v303[6];
  _QWORD v304[6];
  _QWORD v305[6];
  _QWORD v306[6];
  _QWORD v307[6];
  _QWORD v308[6];
  _QWORD v309[6];
  _QWORD v310[6];
  _QWORD v311[6];
  _QWORD v312[6];
  _QWORD v313[6];
  _QWORD v314[6];
  _QWORD v315[6];
  _QWORD v316[6];
  _QWORD v317[6];
  _QWORD v318[6];
  _QWORD v319[6];
  _QWORD v320[6];
  _QWORD v321[6];
  _QWORD v322[6];
  _QWORD v323[6];
  _QWORD v324[6];
  _QWORD v325[6];
  _QWORD v326[6];
  _QWORD v327[6];
  _QWORD v328[6];
  _QWORD v329[6];
  _QWORD v330[6];
  _QWORD v331[6];
  _QWORD v332[6];
  _QWORD v333[6];
  _QWORD v334[6];
  _QWORD v335[6];
  _QWORD v336[6];
  _QWORD v337[6];
  _QWORD v338[6];
  _QWORD v339[6];
  _QWORD v340[6];
  _QWORD v341[6];
  _QWORD v342[6];
  _QWORD v343[6];
  _QWORD v344[6];
  _QWORD v345[6];
  _QWORD v346[6];
  _QWORD v347[6];
  _QWORD v348[6];
  _QWORD v349[6];
  _QWORD v350[6];
  _QWORD v351[6];
  _QWORD v352[6];
  _QWORD v353[6];
  _QWORD v354[6];
  _QWORD v355[6];
  _QWORD v356[6];
  _QWORD v357[6];
  _QWORD v358[6];
  _QWORD v359[6];
  _QWORD v360[6];
  _QWORD v361[6];
  _QWORD v362[6];
  _QWORD v363[6];
  _QWORD v364[6];
  _QWORD v365[6];
  _QWORD v366[6];
  _QWORD v367[6];
  _QWORD v368[6];
  _QWORD v369[6];
  _QWORD v370[6];
  _QWORD v371[6];
  _QWORD v372[6];
  _QWORD v373[6];
  _QWORD v374[6];
  _QWORD v375[6];
  _QWORD v376[6];
  _QWORD v377[6];
  _QWORD v378[6];
  _QWORD v379[6];
  _QWORD v380[6];
  _QWORD v381[6];
  _QWORD v382[6];
  _QWORD v383[6];
  _QWORD v384[6];
  _QWORD v385[6];
  _QWORD v386[6];
  _QWORD v387[6];
  _QWORD v388[6];
  _QWORD v389[6];
  _QWORD v390[6];
  _QWORD v391[6];
  _QWORD v392[6];
  _QWORD v393[6];
  _QWORD v394[6];
  _QWORD v395[6];
  _QWORD v396[6];
  _QWORD v397[6];
  _QWORD v398[6];
  _QWORD v399[6];
  _QWORD v400[6];
  _QWORD v401[6];
  _QWORD v402[6];
  _QWORD v403[6];
  _QWORD v404[6];
  _QWORD v405[6];
  _QWORD v406[6];
  _QWORD v407[6];
  _QWORD v408[6];
  _QWORD v409[6];
  _QWORD v410[6];
  _QWORD v411[6];
  _QWORD v412[6];
  _QWORD v413[6];
  _QWORD v414[6];
  _QWORD v415[6];
  _QWORD v416[6];
  _QWORD v417[6];
  _QWORD v418[6];
  _QWORD v419[6];
  _QWORD v420[6];
  _QWORD v421[6];
  _QWORD v422[6];
  _QWORD v423[6];
  _QWORD v424[6];
  _QWORD v425[6];
  _QWORD v426[6];
  _QWORD v427[6];
  _QWORD v428[6];
  _QWORD v429[6];
  _QWORD v430[6];
  _QWORD v431[6];
  _QWORD v432[6];
  _QWORD v433[6];
  _QWORD v434[6];
  _QWORD v435[6];
  _QWORD v436[6];
  _QWORD v437[6];
  _QWORD v438[6];
  _QWORD v439[6];
  _QWORD v440[6];
  _QWORD v441[6];
  _QWORD v442[6];
  _QWORD v443[6];
  _QWORD v444[6];
  _QWORD v445[6];
  _QWORD v446[6];
  _QWORD v447[6];
  _QWORD v448[6];
  _QWORD v449[6];
  _QWORD v450[6];
  _QWORD v451[6];
  _QWORD v452[6];
  _QWORD v453[6];
  _QWORD v454[6];
  _QWORD v455[6];
  _QWORD v456[6];
  _QWORD v457[6];
  _QWORD v458[6];
  _QWORD v459[6];
  _QWORD v460[6];
  _QWORD v461[6];
  _QWORD v462[6];
  _QWORD v463[6];
  _QWORD v464[6];
  _QWORD v465[6];
  _QWORD v466[6];
  _QWORD v467[6];
  _QWORD v468[6];
  _QWORD v469[6];
  _QWORD v470[6];
  _QWORD v471[6];
  _QWORD v472[6];
  _QWORD v473[6];
  _QWORD v474[6];
  _QWORD v475[6];
  _QWORD v476[6];
  _QWORD v477[6];
  _QWORD v478[6];
  _QWORD v479[6];
  _QWORD v480[6];
  _QWORD v481[6];
  _QWORD v482[6];
  _QWORD v483[6];
  _QWORD v484[6];
  _QWORD v485[6];
  _QWORD v486[6];
  _QWORD v487[6];
  _QWORD v488[6];
  _QWORD v489[6];
  _QWORD v490[6];
  _QWORD v491[6];
  _QWORD v492[6];
  _QWORD v493[6];
  _QWORD v494[6];
  _QWORD v495[6];
  _QWORD v496[6];
  _QWORD v497[6];
  _QWORD v498[6];
  _QWORD v499[6];
  _QWORD v500[6];
  _QWORD v501[6];
  _QWORD v502[6];
  _QWORD v503[6];
  _QWORD v504[6];
  _QWORD v505[6];
  _QWORD v506[6];
  _QWORD v507[6];
  _QWORD v508[6];
  _QWORD v509[6];
  _QWORD v510[6];
  _QWORD v511[6];
  _QWORD v512[6];
  _QWORD v513[6];
  _QWORD v514[6];
  _QWORD v515[6];
  _QWORD v516[6];
  _QWORD v517[6];
  _QWORD v518[6];
  _QWORD v519[6];
  _QWORD v520[6];
  _QWORD v521[6];
  _QWORD v522[6];
  _QWORD v523[6];
  _QWORD v524[6];
  _QWORD v525[6];
  _QWORD v526[6];
  _QWORD v527[6];
  _QWORD v528[6];
  _QWORD v529[6];
  _QWORD v530[6];
  _QWORD v531[6];
  _QWORD v532[6];
  _QWORD v533[6];
  _QWORD v534[6];
  _QWORD v535[6];
  _QWORD v536[6];
  _QWORD v537[6];
  _QWORD v538[6];
  _QWORD v539[6];
  _QWORD v540[6];
  _QWORD v541[6];
  _QWORD v542[6];
  _QWORD v543[6];
  _QWORD v544[6];
  _QWORD v545[6];
  _QWORD v546[6];
  _QWORD v547[6];
  _QWORD v548[6];
  _QWORD v549[6];
  _QWORD v550[6];
  _QWORD v551[6];
  _QWORD v552[6];
  _QWORD v553[6];
  _QWORD v554[6];
  _QWORD v555[6];
  _QWORD v556[6];
  _QWORD v557[6];
  _QWORD v558[6];
  _QWORD v559[6];
  _QWORD v560[6];
  _QWORD v561[6];
  _QWORD v562[6];
  _QWORD v563[6];
  _QWORD v564[6];
  _QWORD v565[6];
  _QWORD v566[6];
  _QWORD v567[6];
  _QWORD v568[6];
  _QWORD v569[6];
  _QWORD v570[6];
  _QWORD v571[6];
  _QWORD v572[6];
  _QWORD v573[6];
  _QWORD v574[6];
  _QWORD v575[6];
  _QWORD v576[6];
  _QWORD v577[6];
  _QWORD v578[6];
  _QWORD v579[6];
  _QWORD v580[6];
  _QWORD v581[6];
  _QWORD v582[6];
  _QWORD v583[6];
  _QWORD v584[6];
  _QWORD v585[6];
  _QWORD v586[6];
  _QWORD v587[6];
  _QWORD v588[6];
  _QWORD v589[6];
  _QWORD v590[6];
  _QWORD v591[6];
  _QWORD v592[6];
  _QWORD v593[6];
  _QWORD v594[6];
  _QWORD v595[6];
  _QWORD v596[6];
  _QWORD v597[6];
  _QWORD v598[6];
  _QWORD v599[6];
  _QWORD v600[6];
  _QWORD v601[6];
  _QWORD v602[6];
  _QWORD v603[6];
  _QWORD v604[6];
  _QWORD v605[6];
  _QWORD v606[6];
  _QWORD v607[6];
  _QWORD v608[6];
  _QWORD v609[6];
  _QWORD v610[6];
  _QWORD v611[6];
  _QWORD v612[6];
  _QWORD v613[6];
  _QWORD v614[6];
  _QWORD v615[6];
  _QWORD v616[6];
  _QWORD v617[6];
  _QWORD v618[6];
  _QWORD v619[6];
  _QWORD v620[6];
  _QWORD v621[7];

  v1 = (_QWORD *)MEMORY[0x1E0C80A78](this);
  v621[6] = *MEMORY[0x1E0C80C00];
  if ((v2 & 1) == 0
  {
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v5, "zoccolavo", "z*******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v6, "zoccolavi", "z*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v7, "zoccolavate", "z*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v8, "zoccolavano", "z*********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v9, "zoccolavamo", "z*********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v10, "zoccolava", "z*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v11, "zoccolature", "z*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v12, "zoccolatura", "z*********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v13, "zoccolato", "z*******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v14, "zoccolati", "z*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v15, "zoccolate", "z*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v16, "zoccolata", "z*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v17, "zoccolasti", "z********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v18, "zoccolaste", "z********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v19, "zoccolassimo", "z**********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v20, "zoccolassi", "z********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v21, "zoccolassero", "z**********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v22, "zoccolasse", "z********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v23, "zoccolarono", "z*********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v24, "zoccolare", "z*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v25, "zoccolar", "z******r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v26, "zoccolanti", "z********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v27, "zoccolante", "z********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v28, "zoccolano", "z*******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v29, "zoccolando", "z********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v30, "zoccolammo", "z********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v31, "zoccolaio", "z*******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v32, "zoccolai", "z******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v33, "zoccola", "z*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v34, "zizze", "z***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v35, "zizza", "z***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v36, "zinne", "z***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v37, "zinna", "z***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v38, "vaffanculo", "v********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v39, "trombò", "t****ò");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v40, "trombino", "t******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v41, "trombiate", "t*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v42, "trombiamo", "t*******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v43, "tromberò", "t******ò");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v44, "tromberà", "t******à");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v45, "tromberete", "t********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v46, "tromberesti", "t*********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v47, "trombereste", "t*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v48, "tromberemo", "t********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v49, "tromberemmo", "t*********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v50, "tromberei", "t*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v51, "tromberebbero", "t***********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v52, "tromberebbe", "t*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v53, "tromberanno", "t*********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v54, "tromberai", "t*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v55, "trombavo", "t******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v56, "trombavi", "t******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v57, "trombavate", "t********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v58, "trombavano", "t********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v59, "trombavamo", "t********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v60, "trombava", "t******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v61, "trombato", "t******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v62, "trombati", "t******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v63, "trombate", "t******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v64, "trombata", "t******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v65, "trombasti", "t*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v66, "trombaste", "t*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v67, "trombassimo", "t*********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v68, "trombassi", "t*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v69, "trombassero", "t*********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v70, "trombasse", "t*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v71, "trombarono", "t********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v72, "trombare", "t******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v73, "trombar", "t*****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v74, "trombanti", "t*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v75, "trombante", "t*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v76, "trombano", "t******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v77, "trombando", "t*******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v78, "trombammo", "t*******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v79, "trombai", "t*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v80, "troioni", "t*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v81, "troione", "t*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v82, "troiona", "t*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v83, "troiaio", "t*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v84, "troiai", "t****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v85, "troia", "t***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v86, "travoni", "t*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v87, "travone", "t*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v88, "terroni", "t*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v89, "terrone", "t*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v90, "terrona", "t*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v91, "succhiacazzo", "s**********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v92, "succhiacazzi", "s**********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v93, "stronzo", "s*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v94, "stronzi", "s*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v95, "stronza", "s*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v96, "sputtanò", "s******ò");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v97, "sputtano", "s******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v98, "sputtanino", "s********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v99, "sputtaniate", "s*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v100, "sputtaniamo", "s*********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v101, "sputtani", "s******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v102, "sputtanerò", "s********ò");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v103, "sputtanerà", "s********à");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v104, "sputtanerete", "s**********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v105, "sputtaneresti", "s***********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v106, "sputtanereste", "s***********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v107, "sputtaneremo", "s**********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v108, "sputtaneremmo", "s***********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v109, "sputtanerei", "s*********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[16],0>(v110, "sputtanerebbero", "s*************o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v111, "sputtanerebbe", "s***********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v112, "sputtaneranno", "s***********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v113, "sputtanerai", "s*********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v114, "sputtanavo", "s********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v115, "sputtanavi", "s********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v116, "sputtanavate", "s**********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v117, "sputtanavano", "s**********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v118, "sputtanavamo", "s**********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v119, "sputtanava", "s********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v120, "sputtanato", "s********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v121, "sputtanati", "s********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v122, "sputtanate", "s********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v123, "sputtanata", "s********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v124, "sputtanasti", "s*********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v125, "sputtanaste", "s*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v126, "sputtanassimo", "s***********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v127, "sputtanassi", "s*********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v128, "sputtanassero", "s***********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v129, "sputtanasse", "s*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v130, "sputtanarono", "s**********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v131, "sputtanare", "s********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v132, "sputtanar", "s*******r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v133, "sputtananti", "s*********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v134, "sputtanante", "s*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v135, "sputtanano", "s********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v136, "sputtanando", "s*********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v137, "sputtanammo", "s*********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v138, "sputtanai", "s*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v139, "sputtana", "s******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v140, "sporco negro", "s**********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v141, "sporca negra", "s**********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v142, "scoreggiai", "s********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v143, "scoreggia", "s*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v144, "scoreggi", "s******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v145, "scoreggerò", "s********ò");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v146, "scoreggerà", "s********à");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v147, "scoreggerete", "s**********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v148, "scoreggeresti", "s***********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v149, "scoreggereste", "s***********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v150, "scoreggeremo", "s**********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v151, "scoreggeremmo", "s***********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v152, "scoreggerei", "s*********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[16],0>(v153, "scoreggerebbero", "s*************o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v154, "scoreggerebbe", "s***********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v155, "scoreggeranno", "s***********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v156, "scoreggerai", "s*********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v157, "scoregge", "s******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v158, "scopata", "s*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v159, "scopalo", "s*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v160, "scopale", "s*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v161, "scopala", "s*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v162, "scazzavi", "s******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v163, "scazzatone", "s********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v164, "scazzati", "s******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v165, "scazzatevi", "s********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v166, "scazzatemi", "s********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v167, "scazzarvi", "s*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v168, "scazzarti", "s*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v169, "scazzarsi", "s*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v170, "scazzarmi", "s*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v171, "scassacazzo", "s*********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v172, "sborro", "s****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v173, "sborrino", "s******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v174, "sborriate", "s*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v175, "sborriamo", "s*******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v176, "sborri", "s****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v177, "sborrerete", "s********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v178, "sborreresti", "s*********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v179, "sborrereste", "s*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v180, "sborreremo", "s********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v181, "sborreremmo", "s*********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v182, "sborrerei", "s*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v183, "sborrerebbero", "s***********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v184, "sborrerebbe", "s*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v185, "sborreranno", "s*********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v186, "sborrerai", "s*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v187, "sborrer", "s*****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v188, "sborre", "s****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v189, "sborravo", "s******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v190, "sborravi", "s******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v191, "sborravate", "s********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v192, "sborravano", "s********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v193, "sborravamo", "s********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v194, "sborrava", "s******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v195, "sborrato", "s******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v196, "sborrati", "s******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v197, "sborrate", "s******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v198, "sborrata", "s******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v199, "sborrasti", "s*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v200, "sborraste", "s*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v201, "sborrassimo", "s*********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v202, "sborrassi", "s*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v203, "sborrassero", "s*********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v204, "sborrasse", "s*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v205, "sborrarti", "s*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v206, "sborrarono", "s********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v207, "sborrare", "s******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v208, "sborrarci", "s*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v209, "sborranti", "s*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v210, "sborrante", "s*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v211, "sborrano", "s******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v212, "sborrando", "s*******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v213, "sborrammo", "s*******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v214, "sborrai", "s*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v215, "sborra", "s****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v216, "sborr", "s***r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v217, "rottoinculo", "r*********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v218, "rottinculo", "r********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v219, "rompipalle", "r********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v220, "rompicazzo", "r********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v221, "rincoglionì", "r*********ì");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v222, "rincoglionivo", "r***********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v223, "rincoglionivi", "r***********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[16],0>(v224, "rincoglionivate", "r*************e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[16],0>(v225, "rincoglionivano", "r*************o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[16],0>(v226, "rincoglionivamo", "r*************o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v227, "rincoglioniva", "r***********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v228, "rincoglionito", "r***********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v229, "rincoglioniti", "r***********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v230, "rincoglionite", "r***********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v231, "rincoglionita", "r***********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v232, "rincoglionisti", "r************i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v233, "rincoglioniste", "r************e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[17],0>(v234, "rincoglionissimo", "r**************o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v235, "rincoglionissi", "r************i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[17],0>(v236, "rincoglionissero", "r**************o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v237, "rincoglionisse", "r************e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[17],0>(v238, "rincoglioniscono", "r**************o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v239, "rincoglionisco", "r************o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v240, "rincoglionisci", "r************i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v241, "rincoglionisce", "r************e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[17],0>(v242, "rincoglioniscano", "r**************o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v243, "rincoglionisca", "r************a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v244, "rincoglionirò", "r***********ò");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v245, "rincoglionirà", "r***********à");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[16],0>(v246, "rincoglionirono", "r*************o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[16],0>(v247, "rincoglionirete", "r*************e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[17],0>(v248, "rincoglioniresti", "r**************i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[17],0>(v249, "rincoglionireste", "r**************e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[16],0>(v250, "rincoglioniremo", "r*************o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[17],0>(v251, "rincoglioniremmo", "r**************o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v252, "rincoglionirei", "r************i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[19],0>(v253, "rincoglionirebbero", "r****************o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[17],0>(v254, "rincoglionirebbe", "r**************e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v255, "rincoglionire", "r***********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[17],0>(v256, "rincoglioniranno", "r**************o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v257, "rincoglionirai", "r************i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v258, "rincoglionir", "r**********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v259, "rincoglionimmo", "r************o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v260, "rincoglionii", "r**********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v261, "rincoglioniate", "r************e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v262, "rincoglioniamo", "r************o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v263, "rincoglionenti", "r************i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v264, "rincoglionente", "r************e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v265, "rincoglionendo", "r************o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v266, "puttane", "p*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v267, "puttana", "p*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v268, "pompino", "p*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v269, "pisciò", "p****ò");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v270, "piscio", "p****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v271, "piscino", "p*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v272, "pisciavo", "p******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v273, "pisciavi", "p******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v274, "pisciavate", "p********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v275, "pisciavano", "p********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v276, "pisciavamo", "p********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v277, "pisciava", "p******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v278, "pisciatoio", "p********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v279, "pisciatoi", "p*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v280, "pisciato", "p******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v281, "pisciate", "p******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v282, "pisciata", "p******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v283, "pisciasti", "p*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v284, "pisciaste", "p*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v285, "pisciassimo", "p*********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v286, "pisciassi", "p*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v287, "pisciassero", "p*********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v288, "pisciasse", "p*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v289, "pisciarono", "p********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v290, "pisciare", "p******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v291, "pisciar", "p*****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v292, "piscianti", "p*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v293, "pisciante", "p*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v294, "pisciano", "p******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v295, "pisciando", "p*******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v296, "pisciamo", "p******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v297, "pisciammo", "p*******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v298, "pisciai", "p*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v299, "piscia", "p****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v300, "pisci", "p***i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v301, "piscerò", "p*****ò");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v302, "piscerà", "p*****à");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v303, "piscerete", "p*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v304, "pisceresti", "p********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v305, "piscereste", "p********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v306, "pisceremo", "p*******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v307, "pisceremmo", "p********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v308, "piscerei", "p******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v309, "piscerebbero", "p**********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v310, "piscerebbe", "p********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v311, "pisceranno", "p********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v312, "piscerai", "p******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v313, "pisce", "p***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v314, "pecorine", "p******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v315, "pecorina", "p******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v316, "negro", "n***o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v317, "negra", "n***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v318, "mortacci", "m******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v319, "minchionò", "m*******ò");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v320, "minchiono", "m*******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v321, "minchionino", "m*********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v322, "minchioniate", "m**********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v323, "minchioniamo", "m**********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v324, "minchioni", "m*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v325, "minchionerò", "m*********ò");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v326, "minchionerà", "m*********à");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v327, "minchionerete", "m***********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v328, "minchioneresti", "m************i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v329, "minchionereste", "m************e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v330, "minchioneremo", "m***********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v331, "minchioneremmo", "m************o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v332, "minchionerei", "m**********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[17],0>(v333, "minchionerebbero", "m**************o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v334, "minchionerebbe", "m************e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v335, "minchioneranno", "m************o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v336, "minchionerai", "m**********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v337, "minchione", "m*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v338, "minchionavo", "m*********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v339, "minchionavi", "m*********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v340, "minchionavate", "m***********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v341, "minchionavano", "m***********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v342, "minchionavamo", "m***********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v343, "minchionava", "m*********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v344, "minchionato", "m*********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v345, "minchionati", "m*********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v346, "minchionate", "m*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v347, "minchionata", "m*********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v348, "minchionasti", "m**********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v349, "minchionaste", "m**********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v350, "minchionassimo", "m************o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v351, "minchionassi", "m**********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v352, "minchionassero", "m************o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v353, "minchionasse", "m**********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v354, "minchionarono", "m***********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v355, "minchionare", "m*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v356, "minchionar", "m********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v357, "minchionanti", "m**********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v358, "minchionante", "m**********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v359, "minchionano", "m*********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v360, "minchionando", "m**********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v361, "minchionammo", "m**********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v362, "minchionai", "m********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v363, "minchionaggini", "m************i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v364, "minchionaggine", "m************e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v365, "minchiona", "m*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v366, "minchiata", "m*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v367, "minchia", "m*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v368, "mignotte", "m******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v369, "mignotta", "m******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v370, "merdoso", "m*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v371, "merdosissimo", "m**********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v372, "merdosissimi", "m**********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v373, "merdosissime", "m**********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v374, "merdosissima", "m**********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v375, "merdosamente", "m**********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v376, "merdosa", "m*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v377, "merde", "m***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v378, "merdaccia", "m*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v379, "merda", "m***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v380, "magnaccia", "m*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v381, "inculerà", "i******à");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v382, "inculerei", "i*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v383, "inculato", "i******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v384, "inculata", "i******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v385, "inculare", "i******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v386, "incazzò", "i*****ò");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v387, "incazzo", "i*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v388, "incazzino", "i*******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v389, "incazziate", "i********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v390, "incazziamoci", "i**********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v391, "incazziamo", "i********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v392, "incazzi", "i*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v393, "incazzerò", "i*******ò");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v394, "incazzerà", "i*******à");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v395, "incazzerete", "i*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v396, "incazzeresti", "i**********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v397, "incazzereste", "i**********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v398, "incazzeremo", "i*********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v399, "incazzeremmo", "i**********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v400, "incazzerei", "i********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v401, "incazzerebbero", "i************o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v402, "incazzerebbe", "i**********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v403, "incazzeranno", "i**********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v404, "incazzerai", "i********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v405, "incazzer", "i******r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v406, "incazzavo", "i*******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v407, "incazzavi", "i*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v408, "incazzavate", "i*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v409, "incazzavano", "i*********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v410, "incazzavamo", "i*********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v411, "incazzava", "i*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v412, "incazzato", "i*******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v413, "incazzatici", "i*********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v414, "incazzati", "i*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v415, "incazzatevi", "i*********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v416, "incazzatemi", "i*********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v417, "incazzate", "i*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v418, "incazzata", "i*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v419, "incazzasti", "i********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v420, "incazzaste", "i********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v421, "incazzassimo", "i**********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v422, "incazzassi", "i********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v423, "incazzassero", "i**********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v424, "incazzasse", "i********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v425, "incazzarvi", "i********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v426, "incazzarti", "i********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v427, "incazzarsi", "i********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v428, "incazzarono", "i*********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v429, "incazzarmi", "i********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v430, "incazzare", "i*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v431, "incazzarci", "i********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v432, "incazzar", "i******r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v433, "incazzanti", "i********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v434, "incazzante", "i********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v435, "incazzano", "i*******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v436, "incazzandovi", "i**********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v437, "incazzandoti", "i**********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v438, "incazzandomi", "i**********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v439, "incazzandoci", "i**********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v440, "incazzando", "i********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v441, "incazzammo", "i********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v442, "incazzai", "i******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v443, "incazza", "i*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v444, "incazz", "i****z");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v445, "frocio", "f****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v446, "froci", "f***i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v447, "fottuto", "f*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v448, "fottiti", "f*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v449, "fottere", "f*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v450, "fotter", "f****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v451, "figa", "f**a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v452, "fica", "f**a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[14],0>(v453, "fatti una sega", "f***********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[14],0>(v454, "farti una sega", "f***********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[14],0>(v455, "farsi una sega", "f***********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[14],0>(v456, "farci una sega", "f***********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v457, "fanculo", "f*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v458, "fancazzisti", "f*********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v459, "fancazziste", "f*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v460, "fancazzista", "f*********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[14],0>(v461, "fammi una sega", "f***********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v462, "ditalino", "d******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v463, "ditalini", "d******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v464, "culo", "c**o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v465, "culi", "c**i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v466, "culattoni", "c*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v467, "culattone", "c*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v468, "cornuto", "c*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v469, "coglioni", "c******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v470, "coglione", "c******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v471, "chiavò", "c****ò");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v472, "chiavo", "c****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v473, "chiavino", "c******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v474, "chiaviate", "c*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v475, "chiaviamo", "c*******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v476, "chiaverò", "c******ò");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v477, "chiaverà", "c******à");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v478, "chiaverete", "c********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v479, "chiaveresti", "c*********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v480, "chiavereste", "c*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v481, "chiaveremo", "c********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v482, "chiaveremmo", "c*********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v483, "chiaverei", "c*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v484, "chiaverebbero", "c***********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v485, "chiaverebbe", "c*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v486, "chiaveranno", "c*********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v487, "chiaverai", "c*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v488, "chiavavo", "c******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v489, "chiavavi", "c******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v490, "chiavavate", "c********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v491, "chiavavano", "c********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v492, "chiavavamo", "c********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v493, "chiavava", "c******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v494, "chiavato", "c******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v495, "chiavati", "c******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v496, "chiavate", "c******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v497, "chiavata", "c******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v498, "chiavasti", "c*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v499, "chiavaste", "c*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v500, "chiavassimo", "c*********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v501, "chiavassi", "c*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v502, "chiavassero", "c*********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v503, "chiavasse", "c*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v504, "chiavarono", "c********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v505, "chiavare", "c******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v506, "chiavar", "c*****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v507, "chiavanti", "c*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v508, "chiavante", "c*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v509, "chiavano", "c******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v510, "chiavando", "c*******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v511, "chiavammo", "c*******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v512, "chiavai", "c*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v513, "chiava", "c****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v514, "checche", "c*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v515, "checca", "c****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v516, "cesso", "c***o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v517, "cazzuto", "c*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v518, "cazzuti", "c*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v519, "cazzute", "c*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v520, "cazzuta", "c*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v521, "cazzoni", "c*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v522, "cazzone", "c*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v523, "cazzo", "c***o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v524, "cazziatoni", "c********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v525, "cazziatone", "c********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v526, "cazzi", "c***i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v527, "cazzate", "c*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v528, "cazzata", "c*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v529, "cazza", "c***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v530, "cagò", "c**ò");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v531, "cago", "c**o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v532, "caghino", "c*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v533, "caghiate", "c******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v534, "caghiamo", "c******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v535, "caghi", "c***i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v536, "cagherò", "c*****ò");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v537, "cagherà", "c*****à");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v538, "cagherete", "c*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v539, "cagheresti", "c********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v540, "caghereste", "c********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v541, "cagheremo", "c*******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v542, "cagheremmo", "c********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v543, "cagherei", "c******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v544, "cagherebbero", "c**********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v545, "cagherebbe", "c********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v546, "cagheranno", "c********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v547, "cagherai", "c******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v548, "cagavo", "c****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v549, "cagavi", "c****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v550, "cagavate", "c******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v551, "cagavano", "c******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v552, "cagavamo", "c******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v553, "cagava", "c****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v554, "cagato", "c****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v555, "cagati", "c****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v556, "cagate", "c****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v557, "cagata", "c****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v558, "cagasti", "c*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v559, "cagaste", "c*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v560, "cagassimo", "c*******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v561, "cagassi", "c*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v562, "cagassero", "c*******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v563, "cagasse", "c*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v564, "cagarono", "c******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v565, "cagare", "c****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v566, "cagar", "c***r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v567, "caganti", "c*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v568, "cagante", "c*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v569, "cagano", "c****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v570, "cagando", "c*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v571, "cagammo", "c*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v572, "cagai", "c***i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v573, "cagacazzo", "c*******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v574, "caga", "c**a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v575, "cacò", "c**ò");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v576, "cachino", "c*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v577, "cachiate", "c******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v578, "cachiamo", "c******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v579, "cacherò", "c*****ò");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v580, "cacherà", "c*****à");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v581, "cacherete", "c*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v582, "cacheresti", "c********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v583, "cachereste", "c********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v584, "cacheremo", "c*******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v585, "cacheremmo", "c********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v586, "cacherei", "c******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v587, "cacherebbero", "c**********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v588, "cacherebbe", "c********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v589, "cacheranno", "c********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v590, "cacherai", "c******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v591, "cacca", "c***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v592, "cacavo", "c****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v593, "cacavi", "c****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v594, "cacavate", "c******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v595, "cacavano", "c******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v596, "cacavamo", "c******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v597, "cacava", "c****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v598, "cacatoio", "c******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v599, "cacatoi", "c*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v600, "cacato", "c****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v601, "cacati", "c****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v602, "cacate", "c****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v603, "cacata", "c****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v604, "cacasti", "c*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v605, "cacaste", "c*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v606, "cacassimo", "c*******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v607, "cacassi", "c*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v608, "cacassero", "c*******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v609, "cacasse", "c*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v610, "cacarono", "c******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v611, "cacare", "c****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v612, "cacar", "c***r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v613, "cacanti", "c*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v614, "cacante", "c*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v615, "cacano", "c****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v616, "cacando", "c*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v617, "cacammo", "c*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v618, "cacai", "c***i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v619, "cacacazzo", "c*******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v620, "bastardo", "b******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v621, "bastarda", "b******a");
    std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](&siri::dialogengine::GetProfanityFilter_it(void)::sProfanityData_it, (uint64_t)v5, 0x269uLL);
    for (i = 0; i != -3702; i -= 6)
      std::pair<std::string const,std::string>::~pair((uint64_t)&v621[i]);
    __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], &siri::dialogengine::GetProfanityFilter_it(void)::sProfanityData_it, &dword_1BF794000);
  }
  *v1 = 0;
  v1[1] = 0;
  v1[2] = 0;
  return std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(v1, siri::dialogengine::GetProfanityFilter_it(void)::sProfanityData_it, *(uint64_t *)algn_1EF582DB0, 0xAAAAAAAAAAAAAAABLL* ((*(_QWORD *)algn_1EF582DB0 - siri::dialogengine::GetProfanityFilter_it(void)::sProfanityData_it) >> 4));
}

void sub_1BFB43C50(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + 29568;
  v4 = -29616;
  do
  {
    v3 = std::pair<std::string const,std::string>::~pair(v3) - 48;
    v4 += 48;
  }
  while (v4);
  _Unwind_Resume(a1);
}

_QWORD *siri::dialogengine::GetProfanityFilter_ca(siri::dialogengine *this)
{
  unsigned __int8 v2;
  uint64_t i;
  _QWORD v5[6];
  _QWORD v6[6];
  _QWORD v7[6];
  _QWORD v8[6];
  _QWORD v9[6];
  _QWORD v10[6];
  _QWORD v11[6];
  _QWORD v12[6];
  _QWORD v13[6];
  _QWORD v14[6];
  _QWORD v15[6];
  _QWORD v16[6];
  _QWORD v17[6];
  _QWORD v18[6];
  _QWORD v19[6];
  _QWORD v20[6];
  _QWORD v21[6];
  _QWORD v22[6];
  _QWORD v23[6];
  _QWORD v24[6];
  _QWORD v25[6];
  _QWORD v26[6];
  _QWORD v27[6];
  _QWORD v28[6];
  _QWORD v29[6];
  _QWORD v30[6];
  _QWORD v31[6];
  _QWORD v32[6];
  _QWORD v33[6];
  _QWORD v34[6];
  _QWORD v35[6];
  _QWORD v36[6];
  _QWORD v37[6];
  _QWORD v38[6];
  _QWORD v39[6];
  _QWORD v40[6];
  _QWORD v41[6];
  _QWORD v42[6];
  _QWORD v43[6];
  _QWORD v44[6];
  _QWORD v45[6];
  _QWORD v46[6];
  _QWORD v47[6];
  _QWORD v48[6];
  _QWORD v49[6];
  _QWORD v50[6];
  _QWORD v51[6];
  _QWORD v52[6];
  _QWORD v53[6];
  _QWORD v54[6];
  _QWORD v55[6];
  _QWORD v56[6];
  _QWORD v57[6];
  _QWORD v58[6];
  _QWORD v59[6];
  _QWORD v60[6];
  _QWORD v61[6];
  _QWORD v62[6];
  _QWORD v63[6];
  _QWORD v64[6];
  _QWORD v65[6];
  _QWORD v66[6];
  _QWORD v67[6];
  _QWORD v68[6];
  _QWORD v69[6];
  _QWORD v70[6];
  _QWORD v71[6];
  _QWORD v72[6];
  _QWORD v73[6];
  _QWORD v74[6];
  _QWORD v75[6];
  _QWORD v76[6];
  _QWORD v77[6];
  _QWORD v78[6];
  _QWORD v79[6];
  _QWORD v80[6];
  _QWORD v81[6];
  _QWORD v82[6];
  _QWORD v83[6];
  _QWORD v84[6];
  _QWORD v85[7];

  v85[6] = *MEMORY[0x1E0C80C00];
  if ((v2 & 1) == 0
  {
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v5, "xoxo", "x**o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v6, "tortilleres", "t*********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v7, "torrapebrots", "t**********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v8, "tonto", "t***o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v9, "tonta", "t***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v10, "superxarnegu", "s**********u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v11, "subnormal", "s*******l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v12, "reputíssima", "r*********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v13, "rehòstia", "r******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v14, "recony", "r****y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[18],0>(v15, "recontraputíssima", "r***************a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v16, "recollons", "r*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v17, "putu", "p**u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v18, "putot", "p***t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v19, "puto", "p**o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v20, "putiferi", "p******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v21, "puteta", "p****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v22, "puteria", "p*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v23, "putejat", "p*****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v24, "putejar", "p*****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v25, "putejant", "p******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v26, "putassa", "p*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v27, "putada", "p****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v28, "puta", "p**a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v29, "porca", "p***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v30, "polla", "p***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v31, "poca-vergonya", "p***********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v32, "poca-solta", "p********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v33, "pardala", "p*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v34, "pardal", "p****l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v35, "panoli", "p****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v36, "pakis", "p***s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v37, "pècora", "p****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v38, "negrates", "n******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v39, "negrata", "n*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v40, "merdos", "m****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v41, "merda", "m***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v42, "megapolla", "m*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v43, "maricons", "m******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v44, "mariconades", "m*********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v45, "maricóna", "m******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v46, "maricón", "m*****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v47, "malparits", "m*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v48, "malparit", "m******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v49, "malparides", "m********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v50, "malparida", "m*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v51, "malfollades", "m*********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v52, "malcarat", "m******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v53, "malcarada", "m*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v54, "llepaculs", "l*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v55, "jilipolles", "j********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v56, "imbècil", "i*****l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v57, "idiota", "i****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v58, "gitanada", "g******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v59, "gilipollisme", "g**********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v60, "gilipolles", "g********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v61, "gilipolla", "g*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v62, "garrepa", "g*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v63, "filldeputisme", "f***********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v64, "esconyat", "e******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v65, "esconyar", "e******r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v66, "descollono", "d********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v67, "descollonar", "d*********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v68, "conyàs", "c****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v69, "cony", "c**y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v70, "collons", "c*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v71, "collonades", "c********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v72, "colló", "c***ó");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v73, "catalufo", "c******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v74, "catalufes", "c*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v75, "cagondéu", "c******u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v76, "cabrons", "c*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v77, "cabrones", "c******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v78, "cabrona", "c*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v79, "cabronàs", "c******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v80, "cabró", "c***ó");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v81, "botiflera", "b*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v82, "botifler", "b******r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v83, "borinota", "b******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v84, "borinot", "b*****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v85, "bleda", "b***a");
    std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](&siri::dialogengine::GetProfanityFilter_ca(void)::sProfanityData_ca, (uint64_t)v5, 0x51uLL);
    for (i = 480; i != -6; i -= 6)
      std::pair<std::string const,std::string>::~pair((uint64_t)&v5[i]);
    __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], &siri::dialogengine::GetProfanityFilter_ca(void)::sProfanityData_ca, &dword_1BF794000);
  }
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  return std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(this, siri::dialogengine::GetProfanityFilter_ca(void)::sProfanityData_ca, *(uint64_t *)algn_1EF582DD0, 0xAAAAAAAAAAAAAAABLL* ((*(_QWORD *)algn_1EF582DD0 - siri::dialogengine::GetProfanityFilter_ca(void)::sProfanityData_ca) >> 4));
}

void sub_1BFB44734(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t i;

  for (i = 3840; i != -48; i -= 48)
    std::pair<std::string const,std::string>::~pair(v1 + i);
  _Unwind_Resume(a1);
}

_QWORD *siri::dialogengine::GetProfanityFilter_cs(siri::dialogengine *this)
{
  _QWORD *v1;
  unsigned __int8 v2;
  uint64_t i;
  _QWORD v5[6];
  _QWORD v6[6];
  _QWORD v7[6];
  _QWORD v8[6];
  _QWORD v9[6];
  _QWORD v10[6];
  _QWORD v11[6];
  _QWORD v12[6];
  _QWORD v13[6];
  _QWORD v14[6];
  _QWORD v15[6];
  _QWORD v16[6];
  _QWORD v17[6];
  _QWORD v18[6];
  _QWORD v19[6];
  _QWORD v20[6];
  _QWORD v21[6];
  _QWORD v22[6];
  _QWORD v23[6];
  _QWORD v24[6];
  _QWORD v25[6];
  _QWORD v26[6];
  _QWORD v27[6];
  _QWORD v28[6];
  _QWORD v29[6];
  _QWORD v30[6];
  _QWORD v31[6];
  _QWORD v32[6];
  _QWORD v33[6];
  _QWORD v34[6];
  _QWORD v35[6];
  _QWORD v36[6];
  _QWORD v37[6];
  _QWORD v38[6];
  _QWORD v39[6];
  _QWORD v40[6];
  _QWORD v41[6];
  _QWORD v42[6];
  _QWORD v43[6];
  _QWORD v44[6];
  _QWORD v45[6];
  _QWORD v46[6];
  _QWORD v47[6];
  _QWORD v48[6];
  _QWORD v49[6];
  _QWORD v50[6];
  _QWORD v51[6];
  _QWORD v52[6];
  _QWORD v53[6];
  _QWORD v54[6];
  _QWORD v55[6];
  _QWORD v56[6];
  _QWORD v57[6];
  _QWORD v58[6];
  _QWORD v59[6];
  _QWORD v60[6];
  _QWORD v61[6];
  _QWORD v62[6];
  _QWORD v63[6];
  _QWORD v64[6];
  _QWORD v65[6];
  _QWORD v66[6];
  _QWORD v67[6];
  _QWORD v68[6];
  _QWORD v69[6];
  _QWORD v70[6];
  _QWORD v71[6];
  _QWORD v72[6];
  _QWORD v73[6];
  _QWORD v74[6];
  _QWORD v75[6];
  _QWORD v76[6];
  _QWORD v77[6];
  _QWORD v78[6];
  _QWORD v79[6];
  _QWORD v80[6];
  _QWORD v81[6];
  _QWORD v82[6];
  _QWORD v83[6];
  _QWORD v84[6];
  _QWORD v85[6];
  _QWORD v86[6];
  _QWORD v87[6];
  _QWORD v88[6];
  _QWORD v89[6];
  _QWORD v90[6];
  _QWORD v91[6];
  _QWORD v92[6];
  _QWORD v93[6];
  _QWORD v94[6];
  _QWORD v95[6];
  _QWORD v96[6];
  _QWORD v97[6];
  _QWORD v98[6];
  _QWORD v99[6];
  _QWORD v100[6];
  _QWORD v101[6];
  _QWORD v102[6];
  _QWORD v103[6];
  _QWORD v104[6];
  _QWORD v105[6];
  _QWORD v106[6];
  _QWORD v107[6];
  _QWORD v108[6];
  _QWORD v109[6];
  _QWORD v110[6];
  _QWORD v111[6];
  _QWORD v112[6];
  _QWORD v113[6];
  _QWORD v114[6];
  _QWORD v115[6];
  _QWORD v116[6];
  _QWORD v117[6];
  _QWORD v118[6];
  _QWORD v119[6];
  _QWORD v120[6];
  _QWORD v121[6];
  _QWORD v122[6];
  _QWORD v123[6];
  _QWORD v124[6];
  _QWORD v125[6];
  _QWORD v126[6];
  _QWORD v127[6];
  _QWORD v128[6];
  _QWORD v129[6];
  _QWORD v130[6];
  _QWORD v131[6];
  _QWORD v132[6];
  _QWORD v133[6];
  _QWORD v134[6];
  _QWORD v135[6];
  _QWORD v136[6];
  _QWORD v137[6];
  _QWORD v138[6];
  _QWORD v139[6];
  _QWORD v140[6];
  _QWORD v141[6];
  _QWORD v142[6];
  _QWORD v143[6];
  _QWORD v144[6];
  _QWORD v145[6];
  _QWORD v146[6];
  _QWORD v147[6];
  _QWORD v148[6];
  _QWORD v149[6];
  _QWORD v150[6];
  _QWORD v151[6];
  _QWORD v152[6];
  _QWORD v153[6];
  _QWORD v154[6];
  _QWORD v155[6];
  _QWORD v156[6];
  _QWORD v157[6];
  _QWORD v158[6];
  _QWORD v159[6];
  _QWORD v160[6];
  _QWORD v161[6];
  _QWORD v162[6];
  _QWORD v163[6];
  _QWORD v164[6];
  _QWORD v165[6];
  _QWORD v166[6];
  _QWORD v167[6];
  _QWORD v168[6];
  _QWORD v169[6];
  _QWORD v170[6];
  _QWORD v171[6];
  _QWORD v172[6];
  _QWORD v173[6];
  _QWORD v174[6];
  _QWORD v175[6];
  _QWORD v176[6];
  _QWORD v177[6];
  _QWORD v178[6];
  _QWORD v179[6];
  _QWORD v180[6];
  _QWORD v181[6];
  _QWORD v182[6];
  _QWORD v183[6];
  _QWORD v184[6];
  _QWORD v185[6];
  _QWORD v186[6];
  _QWORD v187[6];
  _QWORD v188[6];
  _QWORD v189[6];
  _QWORD v190[6];
  _QWORD v191[6];
  _QWORD v192[6];
  _QWORD v193[6];
  _QWORD v194[6];
  _QWORD v195[6];
  _QWORD v196[6];
  _QWORD v197[6];
  _QWORD v198[6];
  _QWORD v199[6];
  _QWORD v200[6];
  _QWORD v201[6];
  _QWORD v202[6];
  _QWORD v203[6];
  _QWORD v204[6];
  _QWORD v205[6];
  _QWORD v206[6];
  _QWORD v207[6];
  _QWORD v208[6];
  _QWORD v209[6];
  _QWORD v210[6];
  _QWORD v211[6];
  _QWORD v212[6];
  _QWORD v213[6];
  _QWORD v214[6];
  _QWORD v215[6];
  _QWORD v216[6];
  _QWORD v217[6];
  _QWORD v218[6];
  _QWORD v219[6];
  _QWORD v220[6];
  _QWORD v221[6];
  _QWORD v222[6];
  _QWORD v223[6];
  _QWORD v224[7];

  v1 = (_QWORD *)MEMORY[0x1E0C80A78](this);
  v224[6] = *MEMORY[0x1E0C80C00];
  if ((v2 & 1) == 0
  {
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v5, "šulina", "š****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v6, "šukat", "š***t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v7, "šoustají", "š******í");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[15],0>(v8, "řiťolezectví", "ř**********í");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[13],0>(v9, "řiťlezkové", "ř********é");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v10, "řitě", "ř**ě");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v11, "řití", "ř**í");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v12, "řitního", "ř*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v13, "čuráci", "č****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[16],0>(v14, "černoprdelníky", "č************y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[16],0>(v15, "černoprdelníka", "č************a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v16, "zmrdu", "z***u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v17, "zmrdi", "z***i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v18, "zmrde", "z***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v19, "zkurví", "z****í");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v20, "zkurvená", "z******á");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v21, "zkurvenou", "z*******u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v22, "zkurvenej", "z*******j");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v23, "zesrat", "z****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v24, "zblitky", "z*****y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v25, "zblblý", "z****ý");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v26, "zblblíků", "z******ů");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v27, "zblblíci", "z******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v28, "zblblá", "z****á");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v29, "zasraný", "z*****ý");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v30, "zasraném", "z******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v31, "zasranou", "z******u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[11],0>(v32, "vyčůránků", "v*******ů");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[10],0>(v33, "vyčůraný", "v******ý");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[13],0>(v34, "vyčuraností", "v*********í");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v35, "vysrat", "v****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v36, "vyserte", "v*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v37, "vyser", "v***r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v38, "vyprdnou", "v******u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v39, "vypatlanců", "v********ů");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v40, "vyjebávat", "v*******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v41, "vyfakoval", "v*******l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[13],0>(v42, "vychcánkové", "v*********é");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v43, "vychcané", "v******é");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v44, "vychcanosti", "v*********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v45, "vychcanost", "v********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v46, "vožraly", "v*****y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v47, "vožralej", "v******j");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v48, "vojebe", "v****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v49, "ultrahovadech", "u***********h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v50, "tupounu", "t*****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v51, "tupounku", "t******u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v52, "trotlovsky", "t********y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v53, "trotla", "t****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v54, "teploušská", "t********á");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v55, "teplouš", "t*****š");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[9],0>(v56, "sračkách", "s******h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v57, "sračky", "s****y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v58, "socky", "s***y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v59, "sockou", "s****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v60, "socka", "s***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v61, "shit", "s**t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v62, "seru", "s**u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v63, "serou", "s***u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v64, "sereš", "s***š");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v65, "sereme", "s****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v66, "sere", "s**e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v67, "ser", "s*r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v68, "senzidebila", "s*********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v69, "rozumprdi", "r*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v70, "rozesralo", "r*******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v71, "rozesere", "r******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v72, "retarde", "r*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v73, "retard", "r****d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[12],0>(v74, "přiožralých", "p*********h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[11],0>(v75, "přiblblých", "p********h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v76, "přiblblý", "p******ý");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[12],0>(v77, "přiblblíkem", "p*********m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[11],0>(v78, "přiblblíka", "p********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v79, "přiblblé", "p******é");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v80, "přiblblou", "p*******u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[9],0>(v81, "přečůrat", "p******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[10],0>(v82, "přečuráme", "p*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[13],0>(v83, "přechcávání", "p*********í");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v84, "píči", "p**i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v85, "píča", "p**a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v86, "průseru", "p*****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v87, "průserem", "p******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v88, "průser", "p****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v89, "prďolu", "p****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v90, "prdi", "p**i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v91, "prdelky", "p*****y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v92, "prdeli", "p****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v93, "prdele", "p****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v94, "prdel", "p***l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v95, "prde", "p**e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v96, "prcičky", "p*****y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v97, "posrat", "p****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v98, "posraných", "p*******h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v99, "posraný", "p*****ý");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v100, "posrali", "p*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v101, "posral", "p****l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v102, "poserů", "p****ů");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v103, "poseru", "p****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v104, "poserou", "p*****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v105, "poser", "p***r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v106, "pičovina", "p******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v107, "pička", "p***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v108, "pindíka", "p*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v109, "pakem", "p***m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v110, "pablbek", "p*****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v111, "ožralý", "o****ý");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v112, "ožerou", "o****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v113, "ošoustat", "o******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v114, "osrati", "o****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v115, "ojebávat", "o******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v116, "nepochčijou", "n*********u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[13],0>(v117, "nepochčiješ", "n*********š");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v118, "nechcačky", "n*******y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v119, "nasrání", "n*****í");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v120, "nasrat", "n****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v121, "nasraný", "n*****ý");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v122, "nasral", "n****l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v123, "naserete", "n******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v124, "naser", "n***r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v125, "mrdákov", "m*****v");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v126, "mrdkou", "m****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v127, "mrdka", "m***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v128, "mrdat", "m***t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v129, "mamrdi", "m****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v130, "magora", "m****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v131, "lesbicky", "l******y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v132, "kurvy", "k***y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v133, "kurvou", "k****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v134, "kurvo", "k***o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v135, "kurva", "k***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v136, "kuruovců", "k******ů");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v137, "kurevsky", "k******y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v138, "kurev", "k***v");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v139, "kundy", "k***y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v140, "krávovina", "k*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v141, "kreténi", "k*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v142, "kravině", "k*****ě");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v143, "kravinami", "k*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v144, "kravina", "k*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v145, "kravin", "k****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v146, "kokoty", "k****y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v147, "kokotský", "k******ý");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v148, "kokotiny", "k******y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v149, "kokotek", "k*****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v150, "kokote", "k****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v151, "kokot", "k***t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v152, "jebne", "j***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v153, "hovno", "h***o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v154, "hovna", "h***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v155, "hoven", "h***n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[9],0>(v156, "homoušům", "h******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v157, "heteráci", "h******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v158, "hajzlů", "h****ů");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v159, "hajzlu", "h****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v160, "hajzlpapír", "h********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v161, "hajzlové", "h******é");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v162, "hajzle", "h****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v163, "fuck", "f**k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v164, "frnda", "f***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(v165, "feťáků", "f****ů");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v166, "feťáky", "f****y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v167, "feťáci", "f****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(v168, "feťačka", "f*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(v169, "feťačce", "f*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(v170, "děvkách", "d*****h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v171, "děvky", "d***y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v172, "děvkař", "d****ř");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v173, "děvka", "d***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v174, "dementů", "d*****ů");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v175, "dementy", "d*****y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v176, "dementem", "d******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v177, "demente", "d*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v178, "dementat", "d******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v179, "dementa", "d*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v180, "dement", "d****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v181, "debílek", "d*****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v182, "debile", "d****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(v183, "cigošům", "c*****m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v184, "cigoše", "c****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v185, "cigoš", "c***š");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v186, "chčijou", "c*****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v187, "chcačky", "c*****y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v188, "chcanky", "c*****y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v189, "buzioblečku", "b*********u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v190, "buziku", "b****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v191, "buzerantů", "b*******ů");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v192, "buzerant", "b******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v193, "blbů", "b**ů");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v194, "blbý", "b**ý");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v195, "blbínku", "b*****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v196, "blbí", "b**í");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v197, "blbého", "b****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v198, "blbé", "b**é");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v199, "blbá", "b**á");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v200, "blby", "b**y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v201, "blbu", "b**u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v202, "blbovi", "b****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v203, "blboučtí", "b******í");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v204, "blbouny", "b*****y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v205, "blbou", "b***u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v206, "blbostí", "b*****í");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v207, "blbosti", "b*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v208, "blbost", "b****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v209, "blbnout", "b*****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v210, "blbne", "b***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v211, "blbka", "b***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v212, "blbino", "b****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v213, "blbi", "b**i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v214, "blbečky", "b*****y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v215, "blbečku", "b*****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v216, "blbečkové", "b*******é");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v217, "blbečci", "b*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v218, "blbejch", "b*****h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v219, "blbe", "b**e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v220, "blbců", "b***ů");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v221, "blbci", "b***i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v222, "blbce", "b***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v223, "blba", "b**a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v224, "blb", "b*b");
    std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](&siri::dialogengine::GetProfanityFilter_cs(void)::sProfanityData_cs, (uint64_t)v5, 0xDCuLL);
    for (i = 0; i != -1320; i -= 6)
      std::pair<std::string const,std::string>::~pair((uint64_t)&v224[i]);
    __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], &siri::dialogengine::GetProfanityFilter_cs(void)::sProfanityData_cs, &dword_1BF794000);
  }
  *v1 = 0;
  v1[1] = 0;
  v1[2] = 0;
  return std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(v1, siri::dialogengine::GetProfanityFilter_cs(void)::sProfanityData_cs, *(uint64_t *)algn_1EF582DF0, 0xAAAAAAAAAAAAAAABLL* ((*(_QWORD *)algn_1EF582DF0 - siri::dialogengine::GetProfanityFilter_cs(void)::sProfanityData_cs) >> 4));
}

void sub_1BFB464A0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + 10512;
  v4 = -10560;
  do
  {
    v3 = std::pair<std::string const,std::string>::~pair(v3) - 48;
    v4 += 48;
  }
  while (v4);
  _Unwind_Resume(a1);
}

_QWORD *siri::dialogengine::GetProfanityFilter_ru(siri::dialogengine *this)
{
  _QWORD *v1;
  unsigned __int8 v2;
  uint64_t i;
  _QWORD v5[6];
  _QWORD v6[6];
  _QWORD v7[6];
  _QWORD v8[6];
  _QWORD v9[6];
  _QWORD v10[6];
  _QWORD v11[6];
  _QWORD v12[6];
  _QWORD v13[6];
  _QWORD v14[6];
  _QWORD v15[6];
  _QWORD v16[6];
  _QWORD v17[6];
  _QWORD v18[6];
  _QWORD v19[6];
  _QWORD v20[6];
  _QWORD v21[6];
  _QWORD v22[6];
  _QWORD v23[6];
  _QWORD v24[6];
  _QWORD v25[6];
  _QWORD v26[6];
  _QWORD v27[6];
  _QWORD v28[6];
  _QWORD v29[6];
  _QWORD v30[6];
  _QWORD v31[6];
  _QWORD v32[6];
  _QWORD v33[6];
  _QWORD v34[6];
  _QWORD v35[6];
  _QWORD v36[6];
  _QWORD v37[6];
  _QWORD v38[6];
  _QWORD v39[6];
  _QWORD v40[6];
  _QWORD v41[6];
  _QWORD v42[6];
  _QWORD v43[6];
  _QWORD v44[6];
  _QWORD v45[6];
  _QWORD v46[6];
  _QWORD v47[6];
  _QWORD v48[6];
  _QWORD v49[6];
  _QWORD v50[6];
  _QWORD v51[6];
  _QWORD v52[6];
  _QWORD v53[6];
  _QWORD v54[6];
  _QWORD v55[6];
  _QWORD v56[6];
  _QWORD v57[6];
  _QWORD v58[6];
  _QWORD v59[6];
  _QWORD v60[6];
  _QWORD v61[6];
  _QWORD v62[6];
  _QWORD v63[6];
  _QWORD v64[6];
  _QWORD v65[6];
  _QWORD v66[6];
  _QWORD v67[6];
  _QWORD v68[6];
  _QWORD v69[6];
  _QWORD v70[6];
  _QWORD v71[6];
  _QWORD v72[6];
  _QWORD v73[6];
  _QWORD v74[6];
  _QWORD v75[6];
  _QWORD v76[6];
  _QWORD v77[6];
  _QWORD v78[6];
  _QWORD v79[6];
  _QWORD v80[6];
  _QWORD v81[6];
  _QWORD v82[6];
  _QWORD v83[6];
  _QWORD v84[6];
  _QWORD v85[6];
  _QWORD v86[6];
  _QWORD v87[6];
  _QWORD v88[6];
  _QWORD v89[6];
  _QWORD v90[6];
  _QWORD v91[6];
  _QWORD v92[6];
  _QWORD v93[6];
  _QWORD v94[6];
  _QWORD v95[6];
  _QWORD v96[6];
  _QWORD v97[6];
  _QWORD v98[6];
  _QWORD v99[6];
  _QWORD v100[6];
  _QWORD v101[6];
  _QWORD v102[6];
  _QWORD v103[6];
  _QWORD v104[6];
  _QWORD v105[6];
  _QWORD v106[6];
  _QWORD v107[6];
  _QWORD v108[6];
  _QWORD v109[6];
  _QWORD v110[6];
  _QWORD v111[6];
  _QWORD v112[6];
  _QWORD v113[6];
  _QWORD v114[6];
  _QWORD v115[6];
  _QWORD v116[6];
  _QWORD v117[6];
  _QWORD v118[6];
  _QWORD v119[6];
  _QWORD v120[6];
  _QWORD v121[6];
  _QWORD v122[6];
  _QWORD v123[6];
  _QWORD v124[6];
  _QWORD v125[6];
  _QWORD v126[6];
  _QWORD v127[6];
  _QWORD v128[6];
  _QWORD v129[6];
  _QWORD v130[6];
  _QWORD v131[6];
  _QWORD v132[6];
  _QWORD v133[6];
  _QWORD v134[6];
  _QWORD v135[6];
  _QWORD v136[6];
  _QWORD v137[6];
  _QWORD v138[6];
  _QWORD v139[6];
  _QWORD v140[6];
  _QWORD v141[6];
  _QWORD v142[6];
  _QWORD v143[6];
  _QWORD v144[6];
  _QWORD v145[6];
  _QWORD v146[6];
  _QWORD v147[6];
  _QWORD v148[6];
  _QWORD v149[6];
  _QWORD v150[6];
  _QWORD v151[6];
  _QWORD v152[6];
  _QWORD v153[6];
  _QWORD v154[6];
  _QWORD v155[6];
  _QWORD v156[6];
  _QWORD v157[6];
  _QWORD v158[6];
  _QWORD v159[6];
  _QWORD v160[6];
  _QWORD v161[6];
  _QWORD v162[6];
  _QWORD v163[6];
  _QWORD v164[6];
  _QWORD v165[6];
  _QWORD v166[6];
  _QWORD v167[6];
  _QWORD v168[6];
  _QWORD v169[6];
  _QWORD v170[6];
  _QWORD v171[6];
  _QWORD v172[6];
  _QWORD v173[6];
  _QWORD v174[6];
  _QWORD v175[6];
  _QWORD v176[6];
  _QWORD v177[6];
  _QWORD v178[6];
  _QWORD v179[6];
  _QWORD v180[6];
  _QWORD v181[6];
  _QWORD v182[6];
  _QWORD v183[6];
  _QWORD v184[6];
  _QWORD v185[6];
  _QWORD v186[6];
  _QWORD v187[6];
  _QWORD v188[6];
  _QWORD v189[6];
  _QWORD v190[6];
  _QWORD v191[6];
  _QWORD v192[6];
  _QWORD v193[6];
  _QWORD v194[6];
  _QWORD v195[6];
  _QWORD v196[6];
  _QWORD v197[6];
  _QWORD v198[6];
  _QWORD v199[6];
  _QWORD v200[6];
  _QWORD v201[6];
  _QWORD v202[6];
  _QWORD v203[6];
  _QWORD v204[6];
  _QWORD v205[6];
  _QWORD v206[6];
  _QWORD v207[6];
  _QWORD v208[6];
  _QWORD v209[6];
  _QWORD v210[6];
  _QWORD v211[6];
  _QWORD v212[6];
  _QWORD v213[6];
  _QWORD v214[6];
  _QWORD v215[6];
  _QWORD v216[6];
  _QWORD v217[6];
  _QWORD v218[6];
  _QWORD v219[6];
  _QWORD v220[6];
  _QWORD v221[6];
  _QWORD v222[6];
  _QWORD v223[6];
  _QWORD v224[6];
  _QWORD v225[6];
  _QWORD v226[6];
  _QWORD v227[6];
  _QWORD v228[6];
  _QWORD v229[6];
  _QWORD v230[6];
  _QWORD v231[6];
  _QWORD v232[6];
  _QWORD v233[6];
  _QWORD v234[6];
  _QWORD v235[6];
  _QWORD v236[6];
  _QWORD v237[6];
  _QWORD v238[6];
  _QWORD v239[6];
  _QWORD v240[6];
  _QWORD v241[6];
  _QWORD v242[6];
  _QWORD v243[6];
  _QWORD v244[6];
  _QWORD v245[6];
  _QWORD v246[6];
  _QWORD v247[6];
  _QWORD v248[6];
  _QWORD v249[6];
  _QWORD v250[6];
  _QWORD v251[6];
  _QWORD v252[6];
  _QWORD v253[6];
  _QWORD v254[6];
  _QWORD v255[6];
  _QWORD v256[6];
  _QWORD v257[6];
  _QWORD v258[6];
  _QWORD v259[6];
  _QWORD v260[6];
  _QWORD v261[6];
  _QWORD v262[6];
  _QWORD v263[6];
  _QWORD v264[6];
  _QWORD v265[6];
  _QWORD v266[6];
  _QWORD v267[6];
  _QWORD v268[6];
  _QWORD v269[6];
  _QWORD v270[6];
  _QWORD v271[6];
  _QWORD v272[6];
  _QWORD v273[6];
  _QWORD v274[6];
  _QWORD v275[6];
  _QWORD v276[6];
  _QWORD v277[6];
  _QWORD v278[6];
  _QWORD v279[6];
  _QWORD v280[6];
  _QWORD v281[6];
  _QWORD v282[6];
  _QWORD v283[6];
  _QWORD v284[6];
  _QWORD v285[6];
  _QWORD v286[6];
  _QWORD v287[6];
  _QWORD v288[6];
  _QWORD v289[6];
  _QWORD v290[6];
  _QWORD v291[6];
  _QWORD v292[6];
  _QWORD v293[6];
  _QWORD v294[6];
  _QWORD v295[6];
  _QWORD v296[6];
  _QWORD v297[6];
  _QWORD v298[6];
  _QWORD v299[6];
  _QWORD v300[6];
  _QWORD v301[6];
  _QWORD v302[6];
  _QWORD v303[6];
  _QWORD v304[6];
  _QWORD v305[6];
  _QWORD v306[6];
  _QWORD v307[6];
  _QWORD v308[6];
  _QWORD v309[6];
  _QWORD v310[6];
  _QWORD v311[6];
  _QWORD v312[6];
  _QWORD v313[6];
  _QWORD v314[6];
  _QWORD v315[6];
  _QWORD v316[6];
  _QWORD v317[6];
  _QWORD v318[6];
  _QWORD v319[6];
  _QWORD v320[6];
  _QWORD v321[6];
  _QWORD v322[6];
  _QWORD v323[6];
  _QWORD v324[6];
  _QWORD v325[6];
  _QWORD v326[6];
  _QWORD v327[6];
  _QWORD v328[6];
  _QWORD v329[6];
  _QWORD v330[6];
  _QWORD v331[6];
  _QWORD v332[6];
  _QWORD v333[6];
  _QWORD v334[6];
  _QWORD v335[6];
  _QWORD v336[6];
  _QWORD v337[6];
  _QWORD v338[6];
  _QWORD v339[6];
  _QWORD v340[6];
  _QWORD v341[6];
  _QWORD v342[6];
  _QWORD v343[6];
  _QWORD v344[6];
  _QWORD v345[6];
  _QWORD v346[6];
  _QWORD v347[6];
  _QWORD v348[6];
  _QWORD v349[6];
  _QWORD v350[6];
  _QWORD v351[6];
  _QWORD v352[6];
  _QWORD v353[6];
  _QWORD v354[6];
  _QWORD v355[6];
  _QWORD v356[6];
  _QWORD v357[6];
  _QWORD v358[6];
  _QWORD v359[6];
  _QWORD v360[6];
  _QWORD v361[6];
  _QWORD v362[6];
  _QWORD v363[6];
  _QWORD v364[6];
  _QWORD v365[6];
  _QWORD v366[6];
  _QWORD v367[6];
  _QWORD v368[6];
  _QWORD v369[6];
  _QWORD v370[6];
  _QWORD v371[6];
  _QWORD v372[6];
  _QWORD v373[6];
  _QWORD v374[6];
  _QWORD v375[6];
  _QWORD v376[6];
  _QWORD v377[6];
  _QWORD v378[6];
  _QWORD v379[6];
  _QWORD v380[6];
  _QWORD v381[6];
  _QWORD v382[6];
  _QWORD v383[6];
  _QWORD v384[6];
  _QWORD v385[6];
  _QWORD v386[6];
  _QWORD v387[6];
  _QWORD v388[6];
  _QWORD v389[6];
  _QWORD v390[6];
  _QWORD v391[6];
  _QWORD v392[6];
  _QWORD v393[6];
  _QWORD v394[6];
  _QWORD v395[6];
  _QWORD v396[6];
  _QWORD v397[6];
  _QWORD v398[6];
  _QWORD v399[6];
  _QWORD v400[6];
  _QWORD v401[6];
  _QWORD v402[6];
  _QWORD v403[6];
  _QWORD v404[6];
  _QWORD v405[6];
  _QWORD v406[6];
  _QWORD v407[6];
  _QWORD v408[6];
  _QWORD v409[6];
  _QWORD v410[6];
  _QWORD v411[6];
  _QWORD v412[6];
  _QWORD v413[6];
  _QWORD v414[6];
  _QWORD v415[6];
  _QWORD v416[6];
  _QWORD v417[6];
  _QWORD v418[6];
  _QWORD v419[6];
  _QWORD v420[6];
  _QWORD v421[6];
  _QWORD v422[6];
  _QWORD v423[6];
  _QWORD v424[6];
  _QWORD v425[6];
  _QWORD v426[6];
  _QWORD v427[6];
  _QWORD v428[6];
  _QWORD v429[6];
  _QWORD v430[6];
  _QWORD v431[6];
  _QWORD v432[6];
  _QWORD v433[6];
  _QWORD v434[6];
  _QWORD v435[6];
  _QWORD v436[6];
  _QWORD v437[6];
  _QWORD v438[6];
  _QWORD v439[6];
  _QWORD v440[6];
  _QWORD v441[6];
  _QWORD v442[6];
  _QWORD v443[6];
  _QWORD v444[6];
  _QWORD v445[6];
  _QWORD v446[6];
  _QWORD v447[6];
  _QWORD v448[6];
  _QWORD v449[6];
  _QWORD v450[6];
  _QWORD v451[6];
  _QWORD v452[6];
  _QWORD v453[6];
  _QWORD v454[6];
  _QWORD v455[6];
  _QWORD v456[6];
  _QWORD v457[6];
  _QWORD v458[6];
  _QWORD v459[6];
  _QWORD v460[6];
  _QWORD v461[6];
  _QWORD v462[6];
  _QWORD v463[6];
  _QWORD v464[6];
  _QWORD v465[6];
  _QWORD v466[6];
  _QWORD v467[6];
  _QWORD v468[6];
  _QWORD v469[6];
  _QWORD v470[6];
  _QWORD v471[6];
  _QWORD v472[6];
  _QWORD v473[6];
  _QWORD v474[6];
  _QWORD v475[6];
  _QWORD v476[6];
  _QWORD v477[6];
  _QWORD v478[6];
  _QWORD v479[6];
  _QWORD v480[6];
  _QWORD v481[6];
  _QWORD v482[6];
  _QWORD v483[6];
  _QWORD v484[6];
  _QWORD v485[6];
  _QWORD v486[6];
  _QWORD v487[6];
  _QWORD v488[6];
  _QWORD v489[6];
  _QWORD v490[6];
  _QWORD v491[6];
  _QWORD v492[6];
  _QWORD v493[6];
  _QWORD v494[6];
  _QWORD v495[6];
  _QWORD v496[6];
  _QWORD v497[6];
  _QWORD v498[6];
  _QWORD v499[6];
  _QWORD v500[6];
  _QWORD v501[6];
  _QWORD v502[6];
  _QWORD v503[6];
  _QWORD v504[6];
  _QWORD v505[6];
  _QWORD v506[6];
  _QWORD v507[6];
  _QWORD v508[6];
  _QWORD v509[6];
  _QWORD v510[6];
  _QWORD v511[6];
  _QWORD v512[6];
  _QWORD v513[6];
  _QWORD v514[6];
  _QWORD v515[6];
  _QWORD v516[6];
  _QWORD v517[6];
  _QWORD v518[6];
  _QWORD v519[6];
  _QWORD v520[6];
  _QWORD v521[6];
  _QWORD v522[6];
  _QWORD v523[6];
  _QWORD v524[6];
  _QWORD v525[6];
  _QWORD v526[6];
  _QWORD v527[6];
  _QWORD v528[6];
  _QWORD v529[6];
  _QWORD v530[6];
  _QWORD v531[6];
  _QWORD v532[6];
  _QWORD v533[6];
  _QWORD v534[6];
  _QWORD v535[6];
  _QWORD v536[6];
  _QWORD v537[6];
  _QWORD v538[6];
  _QWORD v539[6];
  _QWORD v540[6];
  _QWORD v541[6];
  _QWORD v542[6];
  _QWORD v543[6];
  _QWORD v544[6];
  _QWORD v545[6];
  _QWORD v546[6];
  _QWORD v547[6];
  _QWORD v548[6];
  _QWORD v549[6];
  _QWORD v550[6];
  _QWORD v551[6];
  _QWORD v552[6];
  _QWORD v553[6];
  _QWORD v554[6];
  _QWORD v555[6];
  _QWORD v556[6];
  _QWORD v557[6];
  _QWORD v558[6];
  _QWORD v559[6];
  _QWORD v560[6];
  _QWORD v561[6];
  _QWORD v562[6];
  _QWORD v563[6];
  _QWORD v564[6];
  _QWORD v565[6];
  _QWORD v566[6];
  _QWORD v567[6];
  _QWORD v568[6];
  _QWORD v569[6];
  _QWORD v570[6];
  _QWORD v571[6];
  _QWORD v572[6];
  _QWORD v573[6];
  _QWORD v574[6];
  _QWORD v575[6];
  _QWORD v576[6];
  _QWORD v577[6];
  _QWORD v578[6];
  _QWORD v579[6];
  _QWORD v580[6];
  _QWORD v581[6];
  _QWORD v582[6];
  _QWORD v583[6];
  _QWORD v584[6];
  _QWORD v585[6];
  _QWORD v586[6];
  _QWORD v587[6];
  _QWORD v588[6];
  _QWORD v589[6];
  _QWORD v590[6];
  _QWORD v591[6];
  _QWORD v592[6];
  _QWORD v593[6];
  _QWORD v594[6];
  _QWORD v595[6];
  _QWORD v596[6];
  _QWORD v597[6];
  _QWORD v598[6];
  _QWORD v599[6];
  _QWORD v600[6];
  _QWORD v601[6];
  _QWORD v602[6];
  _QWORD v603[6];
  _QWORD v604[6];
  _QWORD v605[6];
  _QWORD v606[6];
  _QWORD v607[6];
  _QWORD v608[6];
  _QWORD v609[6];
  _QWORD v610[6];
  _QWORD v611[6];
  _QWORD v612[6];
  _QWORD v613[6];
  _QWORD v614[6];
  _QWORD v615[6];
  _QWORD v616[6];
  _QWORD v617[6];
  _QWORD v618[6];
  _QWORD v619[6];
  _QWORD v620[6];
  _QWORD v621[6];
  _QWORD v622[6];
  _QWORD v623[6];
  _QWORD v624[6];
  _QWORD v625[6];
  _QWORD v626[6];
  _QWORD v627[6];
  _QWORD v628[6];
  _QWORD v629[6];
  _QWORD v630[6];
  _QWORD v631[6];
  _QWORD v632[6];
  _QWORD v633[6];
  _QWORD v634[6];
  _QWORD v635[6];
  _QWORD v636[6];
  _QWORD v637[6];
  _QWORD v638[6];
  _QWORD v639[6];
  _QWORD v640[6];
  _QWORD v641[6];
  _QWORD v642[6];
  _QWORD v643[6];
  _QWORD v644[6];
  _QWORD v645[6];
  _QWORD v646[6];
  _QWORD v647[6];
  _QWORD v648[6];
  _QWORD v649[6];
  _QWORD v650[6];
  _QWORD v651[6];
  _QWORD v652[6];
  _QWORD v653[6];
  _QWORD v654[6];
  _QWORD v655[6];
  _QWORD v656[6];
  _QWORD v657[6];
  _QWORD v658[6];
  _QWORD v659[6];
  _QWORD v660[6];
  _QWORD v661[6];
  _QWORD v662[6];
  _QWORD v663[6];
  _QWORD v664[6];
  _QWORD v665[6];
  _QWORD v666[6];
  _QWORD v667[6];
  _QWORD v668[6];
  _QWORD v669[6];
  _QWORD v670[6];
  _QWORD v671[6];
  _QWORD v672[6];
  _QWORD v673[6];
  _QWORD v674[6];
  _QWORD v675[6];
  _QWORD v676[6];
  _QWORD v677[6];
  _QWORD v678[6];
  _QWORD v679[6];
  _QWORD v680[6];
  _QWORD v681[6];
  _QWORD v682[6];
  _QWORD v683[6];
  _QWORD v684[6];
  _QWORD v685[6];
  _QWORD v686[6];
  _QWORD v687[6];
  _QWORD v688[6];
  _QWORD v689[6];
  _QWORD v690[6];
  _QWORD v691[6];
  _QWORD v692[6];
  _QWORD v693[6];
  _QWORD v694[6];
  _QWORD v695[6];
  _QWORD v696[6];
  _QWORD v697[6];
  _QWORD v698[6];
  _QWORD v699[6];
  _QWORD v700[6];
  _QWORD v701[6];
  _QWORD v702[6];
  _QWORD v703[6];
  _QWORD v704[6];
  _QWORD v705[6];
  _QWORD v706[6];
  _QWORD v707[6];
  _QWORD v708[6];
  _QWORD v709[6];
  _QWORD v710[6];
  _QWORD v711[6];
  _QWORD v712[6];
  _QWORD v713[6];
  _QWORD v714[6];
  _QWORD v715[6];
  _QWORD v716[6];
  _QWORD v717[6];
  _QWORD v718[6];
  _QWORD v719[6];
  _QWORD v720[6];
  _QWORD v721[6];
  _QWORD v722[6];
  _QWORD v723[6];
  _QWORD v724[6];
  _QWORD v725[6];
  _QWORD v726[6];
  _QWORD v727[6];
  _QWORD v728[6];
  _QWORD v729[6];
  _QWORD v730[6];
  _QWORD v731[6];
  _QWORD v732[6];
  _QWORD v733[6];
  _QWORD v734[6];
  _QWORD v735[6];
  _QWORD v736[6];
  _QWORD v737[6];
  _QWORD v738[6];
  _QWORD v739[6];
  _QWORD v740[6];
  _QWORD v741[6];
  _QWORD v742[6];
  _QWORD v743[6];
  _QWORD v744[6];
  _QWORD v745[6];
  _QWORD v746[6];
  _QWORD v747[6];
  _QWORD v748[6];
  _QWORD v749[6];
  _QWORD v750[6];
  _QWORD v751[6];
  _QWORD v752[6];
  _QWORD v753[6];
  _QWORD v754[6];
  _QWORD v755[6];
  _QWORD v756[6];
  _QWORD v757[6];
  _QWORD v758[6];
  _QWORD v759[6];
  _QWORD v760[6];
  _QWORD v761[6];
  _QWORD v762[6];
  _QWORD v763[6];
  _QWORD v764[6];
  _QWORD v765[6];
  _QWORD v766[6];
  _QWORD v767[6];
  _QWORD v768[6];
  _QWORD v769[6];
  _QWORD v770[6];
  _QWORD v771[6];
  _QWORD v772[6];
  _QWORD v773[6];
  _QWORD v774[6];
  _QWORD v775[6];
  _QWORD v776[6];
  _QWORD v777[6];
  _QWORD v778[6];
  _QWORD v779[6];
  _QWORD v780[6];
  _QWORD v781[6];
  _QWORD v782[6];
  _QWORD v783[6];
  _QWORD v784[6];
  _QWORD v785[6];
  _QWORD v786[6];
  _QWORD v787[6];
  _QWORD v788[6];
  _QWORD v789[6];
  _QWORD v790[6];
  _QWORD v791[6];
  _QWORD v792[6];
  _QWORD v793[6];
  _QWORD v794[6];
  _QWORD v795[6];
  _QWORD v796[6];
  _QWORD v797[6];
  _QWORD v798[6];
  _QWORD v799[6];
  _QWORD v800[6];
  _QWORD v801[6];
  _QWORD v802[6];
  _QWORD v803[6];
  _QWORD v804[6];
  _QWORD v805[6];
  _QWORD v806[6];
  _QWORD v807[6];
  _QWORD v808[6];
  _QWORD v809[6];
  _QWORD v810[6];
  _QWORD v811[6];
  _QWORD v812[6];
  _QWORD v813[6];
  _QWORD v814[6];
  _QWORD v815[6];
  _QWORD v816[6];
  _QWORD v817[6];
  _QWORD v818[6];
  _QWORD v819[6];
  _QWORD v820[6];
  _QWORD v821[6];
  _QWORD v822[6];
  _QWORD v823[6];
  _QWORD v824[6];
  _QWORD v825[6];
  _QWORD v826[6];
  _QWORD v827[6];
  _QWORD v828[6];
  _QWORD v829[6];
  _QWORD v830[6];
  _QWORD v831[6];
  _QWORD v832[6];
  _QWORD v833[6];
  _QWORD v834[6];
  _QWORD v835[6];
  _QWORD v836[6];
  _QWORD v837[6];
  _QWORD v838[6];
  _QWORD v839[6];
  _QWORD v840[6];
  _QWORD v841[6];
  _QWORD v842[6];
  _QWORD v843[6];
  _QWORD v844[6];
  _QWORD v845[6];
  _QWORD v846[6];
  _QWORD v847[6];
  _QWORD v848[6];
  _QWORD v849[6];
  _QWORD v850[6];
  _QWORD v851[6];
  _QWORD v852[6];
  _QWORD v853[6];
  _QWORD v854[6];
  _QWORD v855[6];
  _QWORD v856[6];
  _QWORD v857[6];
  _QWORD v858[6];
  _QWORD v859[6];
  _QWORD v860[6];
  _QWORD v861[6];
  _QWORD v862[6];
  _QWORD v863[6];
  _QWORD v864[6];
  _QWORD v865[6];
  _QWORD v866[6];
  _QWORD v867[6];
  _QWORD v868[6];
  _QWORD v869[6];
  _QWORD v870[6];
  _QWORD v871[6];
  _QWORD v872[6];
  _QWORD v873[6];
  _QWORD v874[6];
  _QWORD v875[6];
  _QWORD v876[6];
  _QWORD v877[6];
  _QWORD v878[6];
  _QWORD v879[6];
  _QWORD v880[6];
  _QWORD v881[6];
  _QWORD v882[6];
  _QWORD v883[6];
  _QWORD v884[6];
  _QWORD v885[6];
  _QWORD v886[6];
  _QWORD v887[6];
  _QWORD v888[6];
  _QWORD v889[6];
  _QWORD v890[6];
  _QWORD v891[6];
  _QWORD v892[6];
  _QWORD v893[6];
  _QWORD v894[6];
  _QWORD v895[6];
  _QWORD v896[6];
  _QWORD v897[6];
  _QWORD v898[6];
  _QWORD v899[6];
  _QWORD v900[6];
  _QWORD v901[6];
  _QWORD v902[6];
  _QWORD v903[6];
  _QWORD v904[6];
  _QWORD v905[6];
  _QWORD v906[6];
  _QWORD v907[6];
  _QWORD v908[6];
  _QWORD v909[6];
  _QWORD v910[6];
  _QWORD v911[6];
  _QWORD v912[6];
  _QWORD v913[6];
  _QWORD v914[6];
  _QWORD v915[6];
  _QWORD v916[6];
  _QWORD v917[6];
  _QWORD v918[6];
  _QWORD v919[6];
  _QWORD v920[6];
  _QWORD v921[6];
  _QWORD v922[6];
  _QWORD v923[6];
  _QWORD v924[6];
  _QWORD v925[6];
  _QWORD v926[6];
  _QWORD v927[6];
  _QWORD v928[6];
  _QWORD v929[6];
  _QWORD v930[6];
  _QWORD v931[6];
  _QWORD v932[6];
  _QWORD v933[6];
  _QWORD v934[6];
  _QWORD v935[6];
  _QWORD v936[6];
  _QWORD v937[6];
  _QWORD v938[6];
  _QWORD v939[6];
  _QWORD v940[6];
  _QWORD v941[6];
  _QWORD v942[6];
  _QWORD v943[6];
  _QWORD v944[6];
  _QWORD v945[6];
  _QWORD v946[6];
  _QWORD v947[6];
  _QWORD v948[6];
  _QWORD v949[6];
  _QWORD v950[6];
  _QWORD v951[6];
  _QWORD v952[6];
  _QWORD v953[6];
  _QWORD v954[6];
  _QWORD v955[6];
  _QWORD v956[6];
  _QWORD v957[6];
  _QWORD v958[6];
  _QWORD v959[6];
  _QWORD v960[6];
  _QWORD v961[6];
  _QWORD v962[6];
  _QWORD v963[6];
  _QWORD v964[6];
  _QWORD v965[6];
  _QWORD v966[6];
  _QWORD v967[6];
  _QWORD v968[6];
  _QWORD v969[6];
  _QWORD v970[6];
  _QWORD v971[6];
  _QWORD v972[6];
  _QWORD v973[6];
  _QWORD v974[6];
  _QWORD v975[6];
  _QWORD v976[6];
  _QWORD v977[6];
  _QWORD v978[6];
  _QWORD v979[6];
  _QWORD v980[6];
  _QWORD v981[6];
  _QWORD v982[6];
  _QWORD v983[6];
  _QWORD v984[6];
  _QWORD v985[6];
  _QWORD v986[6];
  _QWORD v987[6];
  _QWORD v988[6];
  _QWORD v989[6];
  _QWORD v990[6];
  _QWORD v991[6];
  _QWORD v992[6];
  _QWORD v993[6];
  _QWORD v994[6];
  _QWORD v995[6];
  _QWORD v996[6];
  _QWORD v997[6];
  _QWORD v998[6];
  _QWORD v999[6];
  _QWORD v1000[6];
  _QWORD v1001[6];
  _QWORD v1002[6];
  _QWORD v1003[6];
  _QWORD v1004[6];
  _QWORD v1005[6];
  _QWORD v1006[6];
  _QWORD v1007[6];
  _QWORD v1008[6];
  _QWORD v1009[6];
  _QWORD v1010[6];
  _QWORD v1011[6];
  _QWORD v1012[6];
  _QWORD v1013[6];
  _QWORD v1014[6];
  _QWORD v1015[6];
  _QWORD v1016[6];
  _QWORD v1017[6];
  _QWORD v1018[6];
  _QWORD v1019[6];
  _QWORD v1020[6];
  _QWORD v1021[6];
  _QWORD v1022[6];
  _QWORD v1023[6];
  _QWORD v1024[6];
  _QWORD v1025[6];
  _QWORD v1026[6];
  _QWORD v1027[6];
  _QWORD v1028[6];
  _QWORD v1029[6];
  _QWORD v1030[6];
  _QWORD v1031[6];
  _QWORD v1032[6];
  _QWORD v1033[6];
  _QWORD v1034[6];
  _QWORD v1035[6];
  _QWORD v1036[6];
  _QWORD v1037[6];
  _QWORD v1038[6];
  _QWORD v1039[6];
  _QWORD v1040[6];
  _QWORD v1041[6];
  _QWORD v1042[6];
  _QWORD v1043[6];
  _QWORD v1044[6];
  _QWORD v1045[6];
  _QWORD v1046[6];
  _QWORD v1047[6];
  _QWORD v1048[6];
  _QWORD v1049[6];
  _QWORD v1050[6];
  _QWORD v1051[6];
  _QWORD v1052[6];
  _QWORD v1053[6];
  _QWORD v1054[6];
  _QWORD v1055[6];
  _QWORD v1056[6];
  _QWORD v1057[6];
  _QWORD v1058[6];
  _QWORD v1059[6];
  _QWORD v1060[6];
  _QWORD v1061[6];
  _QWORD v1062[6];
  _QWORD v1063[6];
  _QWORD v1064[6];
  _QWORD v1065[6];
  _QWORD v1066[6];
  _QWORD v1067[6];
  _QWORD v1068[6];
  _QWORD v1069[6];
  _QWORD v1070[6];
  _QWORD v1071[6];
  _QWORD v1072[6];
  _QWORD v1073[6];
  _QWORD v1074[6];
  _QWORD v1075[6];
  _QWORD v1076[6];
  _QWORD v1077[6];
  _QWORD v1078[6];
  _QWORD v1079[6];
  _QWORD v1080[6];
  _QWORD v1081[6];
  _QWORD v1082[6];
  _QWORD v1083[6];
  _QWORD v1084[6];
  _QWORD v1085[6];
  _QWORD v1086[6];
  _QWORD v1087[6];
  _QWORD v1088[6];
  _QWORD v1089[6];
  _QWORD v1090[6];
  _QWORD v1091[6];
  _QWORD v1092[6];
  _QWORD v1093[6];
  _QWORD v1094[6];
  _QWORD v1095[6];
  _QWORD v1096[6];
  _QWORD v1097[6];
  _QWORD v1098[6];
  _QWORD v1099[6];
  _QWORD v1100[6];
  _QWORD v1101[6];
  _QWORD v1102[6];
  _QWORD v1103[6];
  _QWORD v1104[6];
  _QWORD v1105[6];
  _QWORD v1106[6];
  _QWORD v1107[6];
  _QWORD v1108[6];
  _QWORD v1109[6];
  _QWORD v1110[6];
  _QWORD v1111[6];
  _QWORD v1112[6];
  _QWORD v1113[6];
  _QWORD v1114[6];
  _QWORD v1115[6];
  _QWORD v1116[6];
  _QWORD v1117[6];
  _QWORD v1118[6];
  _QWORD v1119[6];
  _QWORD v1120[6];
  _QWORD v1121[6];
  _QWORD v1122[6];
  _QWORD v1123[6];
  _QWORD v1124[6];
  _QWORD v1125[6];
  _QWORD v1126[6];
  _QWORD v1127[6];
  _QWORD v1128[6];
  _QWORD v1129[6];
  _QWORD v1130[6];
  _QWORD v1131[6];
  _QWORD v1132[6];
  _QWORD v1133[6];
  _QWORD v1134[6];
  _QWORD v1135[6];
  _QWORD v1136[6];
  _QWORD v1137[6];
  _QWORD v1138[6];
  _QWORD v1139[6];
  _QWORD v1140[6];
  _QWORD v1141[6];
  _QWORD v1142[6];
  _QWORD v1143[6];
  _QWORD v1144[6];
  _QWORD v1145[6];
  _QWORD v1146[6];
  _QWORD v1147[6];
  _QWORD v1148[6];
  _QWORD v1149[6];
  _QWORD v1150[6];
  _QWORD v1151[6];
  _QWORD v1152[6];
  _QWORD v1153[6];
  _QWORD v1154[6];
  _QWORD v1155[6];
  _QWORD v1156[6];
  _QWORD v1157[6];
  _QWORD v1158[6];
  _QWORD v1159[6];
  _QWORD v1160[6];
  _QWORD v1161[6];
  _QWORD v1162[6];
  _QWORD v1163[6];
  _QWORD v1164[6];
  _QWORD v1165[6];
  _QWORD v1166[6];
  _QWORD v1167[6];
  _QWORD v1168[6];
  _QWORD v1169[6];
  _QWORD v1170[6];
  _QWORD v1171[6];
  _QWORD v1172[6];
  _QWORD v1173[6];
  _QWORD v1174[6];
  _QWORD v1175[6];
  _QWORD v1176[6];
  _QWORD v1177[6];
  _QWORD v1178[6];
  _QWORD v1179[6];
  _QWORD v1180[6];
  _QWORD v1181[6];
  _QWORD v1182[6];
  _QWORD v1183[6];
  _QWORD v1184[6];
  _QWORD v1185[6];
  _QWORD v1186[6];
  _QWORD v1187[6];
  _QWORD v1188[6];
  _QWORD v1189[6];
  _QWORD v1190[6];
  _QWORD v1191[6];
  _QWORD v1192[6];
  _QWORD v1193[6];
  _QWORD v1194[6];
  _QWORD v1195[6];
  _QWORD v1196[6];
  _QWORD v1197[6];
  _QWORD v1198[6];
  _QWORD v1199[6];
  _QWORD v1200[6];
  _QWORD v1201[6];
  _QWORD v1202[6];
  _QWORD v1203[6];
  _QWORD v1204[6];
  _QWORD v1205[6];
  _QWORD v1206[6];
  _QWORD v1207[6];
  _QWORD v1208[6];
  _QWORD v1209[6];
  _QWORD v1210[6];
  _QWORD v1211[6];
  _QWORD v1212[6];
  _QWORD v1213[6];
  _QWORD v1214[7];

  v1 = (_QWORD *)MEMORY[0x1E0C80A78](this);
  v1214[6] = *MEMORY[0x1E0C80C00];
  if ((v2 & 1) == 0
  {
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v5, "ёбля", "ё**я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v6, "ёбат", "ё**т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v7, "ёбарь", "ё***ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v8, "ёбаный", "ё****й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v9, "ёбаную", "ё****ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v10, "ёбанный", "ё*****й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v11, "ёбаная", "ё****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v12, "ёбан", "ё**н");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v13, "шлюха", "ш***а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v14, "хуёвый", "х****й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v15, "хуёвое", "х****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v16, "хуёвая", "х****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v17, "хуя", "х*я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v18, "хуйям", "х***м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v19, "хуйчик", "х****к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v20, "хуйцы", "х***ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v21, "хуйцу", "х***у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v22, "хуйцом", "х****м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v23, "хуйцов", "х****в");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v24, "хуйцо", "х***о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v25, "хуйце", "х***е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v26, "хуйцах", "х****х");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v27, "хуйцам", "х****м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v28, "хуйца", "х***а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v29, "хуйхуй", "х****й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v30, "хуйхаа", "х****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v31, "хуйфон", "х****н");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v32, "хуйтэн", "х****н");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v33, "хуйты", "х***ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v34, "хуйту", "х***у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v35, "хуйто", "х***о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v36, "хуйте", "х***е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v37, "хуйтам", "х****м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v38, "хуйта", "х***а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v39, "хуйски", "х****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v40, "хуйрик", "х****к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v41, "хуйота", "х****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v42, "хуйовый", "х*****й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v43, "хуйовые", "х*****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v44, "хуйовое", "х*****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v45, "хуйово", "х****о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v46, "хуйовая", "х*****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v47, "хуйова", "х****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v48, "хуйнёт", "х****т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v49, "хуйнём", "х****м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v50, "хуйнёй", "х****й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v51, "хуйняя", "х****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v52, "хуйняшка", "х******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v53, "хуйнях", "х****х");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v54, "хуйняс", "х****с");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v55, "хуйняно", "х*****о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v56, "хуйняне", "х*****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v57, "хуйнями", "х*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v58, "хуйняи", "х****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v59, "хуйняв", "х****в");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v60, "хуйняа", "х****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v61, "хуйня", "х***я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v62, "хуйнюя", "х****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v63, "хуйнюю", "х****ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v64, "хуйнюшку", "х******у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v65, "хуйнюшки", "х******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v66, "хуйнюшка", "х******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v67, "хуйнюша", "х*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v68, "хуйнюну", "х*****у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v69, "хуйню", "х***ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v70, "хуйнуть", "х*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v71, "хуйнулся", "х******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v72, "хуйнуло", "х*****о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v73, "хуйнули", "х*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v74, "хуйнула", "х*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v75, "хуйнул", "х****л");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v76, "хуйну", "х***у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v77, "хуйной", "х****й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v78, "хуйно", "х***о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v79, "хуйнища", "х*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v80, "хуйните", "х*****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v81, "хуйни", "х***и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v82, "хуйнеё", "х****ё");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v83, "хуйнею", "х****ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v84, "хуйнет", "х****т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v85, "хуйнем", "х****м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v86, "хуйней", "х****й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v87, "хуйнее", "х****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v88, "хуйне", "х***е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v89, "хуйная", "х****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v90, "хуйнаны", "х*****ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v91, "хуйнана", "х*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v92, "хуйна", "х***а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v93, "хуйль", "х***ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v94, "хуйлыга", "х*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v95, "хуйлы", "х***ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v96, "хуйлу", "х***у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v97, "хуйлоша", "х*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v98, "хуйлом", "х****м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v99, "хуйло", "х***о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v100, "хуйлище", "х*****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v101, "хуйлион", "х*****н");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v102, "хуйли", "х***и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v103, "хуйле", "х***е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v104, "хуйланы", "х*****ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v105, "хуйлана", "х*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v106, "хуйлан", "х****н");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v107, "хуйла", "х***а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v108, "хуйком", "х****м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v109, "хуйки", "х***и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v110, "хуйка", "х***а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v111, "хуйи", "х**и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v112, "хуйево", "х****о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v113, "хуйда", "х***а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v114, "хуйво", "х***о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v115, "хуйвей", "х****й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[11],0>(v116, "хуй-чего", "х******о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v117, "хуй", "х*й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v118, "хуисос", "х****с");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v119, "хуилы", "х***ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v120, "хуилу", "х***у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v121, "хуило", "х***о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v122, "хуесос", "х****с");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v123, "хуевый", "х****й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v124, "хуевое", "х****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v125, "хуевая", "х****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v126, "хуебля", "х****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v127, "хитровыебанный", "х************й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v128, "хер", "х*р");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v129, "уёбок", "у***к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v130, "уёбище", "у****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v131, "упиздить", "у******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v132, "уебок", "у***к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v133, "уебище", "у****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v134, "уебать", "у****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v135, "уебаны", "у****ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v136, "уебан", "у***н");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v137, "трахнуть", "т******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v138, "трахаёб", "т*****б");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v139, "трахать", "т*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v140, "трахатель", "т*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v141, "трахаеб", "т*****б");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[9],0>(v142, "трахае6", "т*****6");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v143, "съебаться", "с*******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v144, "съебать", "с*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v145, "сука", "с**а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v146, "страхопиздище", "с***********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v147, "спиздиться", "с********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v148, "спиздить", "с******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v149, "спиздит", "с*****т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v150, "спиздили", "с******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v151, "спиздила", "с******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v152, "спиздил", "с*****л");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v153, "спиздеть", "с******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v154, "спиздел", "с*****л");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v155, "распиздяйство", "р***********о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v156, "распиздяйка", "р*********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v157, "распиздяй", "р*******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v158, "распиздон", "р*******н");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v159, "распиздеться", "р**********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v160, "распиздай", "р*******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v161, "разёбанный", "р********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v162, "разъебаться", "р*********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v163, "разъебать", "р*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v164, "разебанный", "р********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v165, "пропиздячить", "п**********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v166, "пропиздить", "п********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v167, "пропиздеть", "п********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v168, "пропизделся", "п*********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v169, "проебаться", "п********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v170, "проебать", "п******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v171, "проебанка", "п*******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v172, "проблядь", "п******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v173, "припиздюлина", "п**********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v174, "припизднутый", "п**********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v175, "припиздить", "п********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v176, "припиздень", "п********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v177, "приебаться", "п********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v178, "похуй", "п***й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v179, "потрахаться", "п*********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v180, "попиздовать", "п*********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v181, "попиздили", "п*******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v182, "попизди", "п*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v183, "попиздеть", "п*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v184, "попиздели", "п*******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v185, "поебать", "п*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v186, "подъебать", "п*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v187, "пиздёшь", "п*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v188, "пиздёш", "п****ш");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v189, "пиздёныш", "п******ш");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v190, "пиздёнку", "п******у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v191, "пиздёнкой", "п*******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v192, "пиздёнки", "п******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v193, "пиздёнке", "п******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v194, "пиздёнка", "п******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v195, "пиздёжь", "п*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v196, "пиздёжи", "п*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v197, "пиздёжа", "п*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v198, "пиздёж", "п****ж");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v199, "пиздящих", "п******х");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v200, "пиздящим", "п******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v201, "пиздящий", "п******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v202, "пиздящие", "п******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v203, "пиздящее", "п******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v204, "пиздящая", "п******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v205, "пиздяшек", "п******к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v206, "пиздячу", "п*****у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v207, "пиздячку", "п******у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v208, "пиздячки", "п******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v209, "пиздячить", "п*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v210, "пиздячит", "п******т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v211, "пиздячил", "п******л");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v212, "пиздячик", "п******к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v213, "пиздячек", "п******к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v214, "пиздячат", "п******т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v215, "пиздяться", "п*******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v216, "пиздять", "п*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v217, "пиздятся", "п******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v218, "пиздятну", "п******у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v219, "пиздятины", "п*******ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v220, "пиздятиной", "п********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v221, "пиздятинки", "п********и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v222, "пиздятинка", "п********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v223, "пиздятина", "п*******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v224, "пиздят", "п****т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v225, "пиздярить", "п*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v226, "пиздянок", "п******к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v227, "пиздян", "п****н");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v228, "пиздяк", "п****к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v229, "пиздяй", "п****й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v230, "пиздя", "п***я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v231, "пиздюшонок", "п********к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v232, "пиздюшок", "п******к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v233, "пиздюшня", "п******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v234, "пиздюшный", "п*******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v235, "пиздюшник", "п*******к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v236, "пиздюшку", "п******у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v237, "пиздюшкой", "п*******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v238, "пиздюшки", "п******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v239, "пиздюшке", "п******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v240, "пиздюшка", "п******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v241, "пиздюшечка", "п********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v242, "пиздюшек", "п******к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v243, "пиздюша", "п*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v244, "пиздючье", "п******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v245, "пиздючку", "п******у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v246, "пиздючкой", "п*******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v247, "пиздючки", "п******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v248, "пиздючка", "п******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v249, "пиздючий", "п******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v250, "пиздючие", "п******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v251, "пиздючек", "п******к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v252, "пиздюху", "п*****у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v253, "пиздюхой", "п******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v254, "пиздюхи", "п*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v255, "пиздюхе", "п*****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v256, "пиздюхать", "п*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v257, "пиздюха", "п*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v258, "пиздюрить", "п*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v259, "пиздюляшек", "п********к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v260, "пиздюлях", "п******х");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v261, "пиздюляторов", "п**********в");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v262, "пиздюлями", "п*******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v263, "пиздюлям", "п******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v264, "пиздюля", "п*****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v265, "пиздюлю", "п*****ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v266, "пиздюльки", "п*******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v267, "пиздюлька", "п*******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v268, "пиздюль", "п*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v269, "пиздюлины", "п*******ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v270, "пиздюлину", "п*******у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v271, "пиздюлинку", "п********у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v272, "пиздюлинки", "п********и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v273, "пиздюлинка", "п********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v274, "пиздюлине", "п*******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v275, "пиздюлинами", "п*********и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v276, "пиздюлина", "п*******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v277, "пиздюлин", "п******н");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v278, "пиздюликов", "п********в");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v279, "пиздюли", "п*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v280, "пиздюлек", "п******к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v281, "пиздюлей", "п******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v282, "пиздюлеи", "п******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v283, "пиздюлеей", "п*******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v284, "пиздюку", "п*****у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v285, "пиздюком", "п******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v286, "пиздюков", "п******в");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v287, "пиздюки", "п*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v288, "пиздюками", "п*******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v289, "пиздюкам", "п******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v290, "пиздюка", "п*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v291, "пиздюк", "п****к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v292, "пиздюдей", "п******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v293, "пиздюга", "п*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v294, "пиздю", "п***ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v295, "пиздэйшн", "п******н");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v296, "пиздэйшен", "п*******н");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v297, "пиздь", "п***ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v298, "пиздыя", "п****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v299, "пиздыц", "п****ц");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v300, "пиздытый", "п******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v301, "пиздык", "п****к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v302, "пизды", "п***ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v303, "пиздца", "п****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v304, "пиздуя", "п****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v305, "пиздуют", "п*****т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v306, "пиздую", "п****ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v307, "пиздушку", "п******у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v308, "пиздушка", "п******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v309, "пиздуц", "п****ц");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v310, "пиздуховные", "п*********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v311, "пиздуу", "п****у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v312, "пиздунья", "п******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v313, "пиздуны", "п*****ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v314, "пиздуном", "п******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v315, "пиздунов", "п******в");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v316, "пиздуна", "п*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v317, "пиздун", "п****н");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v318, "пиздуля", "п*****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v319, "пиздулей", "п******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v320, "пиздула", "п*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v321, "пиздуйте", "п******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v322, "пиздуйка", "п******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v323, "пиздуй", "п****й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v324, "пиздуешь", "п******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v325, "пиздуете", "п******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v326, "пиздует", "п*****т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v327, "пиздуем", "п*****м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v328, "пизду", "п***у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v329, "пиздтый", "п*****й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v330, "пиздрячить", "п********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v331, "пиздруй", "п*****й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v332, "пиздравляю", "п********ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v333, "пиздою", "п****ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v334, "пиздошу", "п*****у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v335, "пиздошить", "п*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v336, "пиздошит", "п******т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v337, "пиздохаю", "п******ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v338, "пиздохаханьки", "п***********и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v339, "пиздохать", "п*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v340, "пиздохай", "п******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v341, "пиздоу", "п****у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v342, "пиздоты", "п*****ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v343, "пиздотина", "п*******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v344, "пиздота", "п*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v345, "пиздося", "п*****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v346, "пиздосья", "п******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v347, "пиздострадашки", "п************и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v348, "пиздострадашек", "п************к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[31],char const(&)[18],0>(v349, "пиздострадатель", "п*************ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[31],char const(&)[18],0>(v350, "пиздостраданиях", "п*************х");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[33],char const(&)[19],0>(v351, "пиздостраданиями", "п**************и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[31],char const(&)[18],0>(v352, "пиздостраданиям", "п*************м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v353, "пиздострадания", "п************я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v354, "пиздостраданий", "п************й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v355, "пиздострадание", "п************е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[39],char const(&)[22],0>(v356, "пиздострадальческий", "п*****************й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[39],char const(&)[22],0>(v357, "пиздострадальческие", "п*****************е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[31],char const(&)[18],0>(v358, "пиздострадальцы", "п*************ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[33],char const(&)[19],0>(v359, "пиздострадальцам", "п**************м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[31],char const(&)[18],0>(v360, "пиздострадалицы", "п*************ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v361, "пиздострадалец", "п************ц");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v362, "пиздосс", "п*****с");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v363, "пиздосов", "п******в");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v364, "пиздосина", "п*******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v365, "пиздосики", "п*******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v366, "пиздосик", "п******к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v367, "пиздоси", "п*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v368, "пиздосей", "п******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v369, "пиздоса", "п*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v370, "пиздос", "п****с");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v371, "пиздорукий", "п********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v372, "пиздорукая", "п********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v373, "пиздорич", "п******ч");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v374, "пиздорить", "п*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v375, "пиздорез", "п******з");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v376, "пиздорванки", "п*********и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v377, "пиздорванка", "п*********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v378, "пиздорванец", "п*********ц");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v379, "пиздор", "п****р");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v380, "пиздопроёбина", "п***********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v381, "пиздопроушина", "п***********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v382, "пиздопротивный", "п************й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v383, "пиздопроебины", "п***********ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v384, "пиздопроебина", "п***********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v385, "пиздоос", "п*****с");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v386, "пиздонуть", "п*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v387, "пиздонутые", "п********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v388, "пиздони", "п*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v389, "пиздон", "п****н");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v390, "пиздолить", "п*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v391, "пиздолизы", "п*******ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v392, "пиздолизом", "п********м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v393, "пиздолизов", "п********в");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v394, "пиздолизка", "п********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v395, "пиздолизами", "п*********и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v396, "пиздолиза", "п*******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v397, "пиздолиз", "п******з");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v398, "пиздолет", "п******т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v399, "пиздокрылая", "п*********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v400, "пиздокрыл", "п*******л");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v401, "пиздок", "п****к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v402, "пиздой", "п****й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v403, "пиздоеб", "п*****б");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v404, "пиздодень", "п*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v405, "пиздодельный", "п**********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v406, "пиздодельные", "п**********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v407, "пиздодельная", "п**********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v408, "пиздоглазых", "п*********х");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v409, "пиздоглазыми", "п**********и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v410, "пиздоглазый", "п*********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v411, "пиздоглазые", "п*********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v412, "пиздоглазой", "п*********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v413, "пиздоглазое", "п*********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v414, "пиздоглазие", "п*********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v415, "пиздоглазая", "п*********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v416, "пиздоглаз", "п*******з");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v417, "пиздоган", "п******н");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v418, "пиздоворот", "п********т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v419, "пиздовать", "п*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v420, "пиздоватый", "п********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v421, "пиздоватые", "п********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v422, "пиздоватой", "п********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v423, "пиздоватое", "п********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v424, "пиздоватая", "п********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v425, "пиздовали", "п*******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v426, "пиздовала", "п*******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v427, "пиздовал", "п******л");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v428, "пиздов", "п****в");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v429, "пиздобратия", "п*********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v430, "пиздобратию", "п*********ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v431, "пиздобратии", "п*********и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v432, "пиздобольством", "п************м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v433, "пиздобольство", "п***********о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v434, "пиздобольства", "п***********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v435, "пиздоболы", "п*******ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v436, "пиздоболом", "п********м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v437, "пиздоболов", "п********в");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v438, "пиздоболкой", "п*********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v439, "пиздоболка", "п********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v440, "пиздоболия", "п********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v441, "пиздоболию", "п********ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v442, "пиздоболить", "п*********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v443, "пиздоболии", "п********и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v444, "пиздоболие", "п********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v445, "пиздоболами", "п*********и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v446, "пиздобола", "п*******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v447, "пиздобол", "п******л");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v448, "пиздоблядство", "п***********о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v449, "пиздоблядский", "п***********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v450, "пиздоблядская", "п***********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v451, "пиздоблядина", "п**********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v452, "пиздо", "п***о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v453, "пизднц", "п****ц");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v454, "пиздлявых", "п*******х");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v455, "пиздлявый", "п*******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v456, "пиздлявые", "п*******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v457, "пиздлявой", "п*******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v458, "пиздлявая", "п*******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v459, "пиздлом", "п*****м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v460, "пиздло", "п****о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v461, "пиздливых", "п*******х");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v462, "пиздливым", "п*******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v463, "пиздливый", "п*******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v464, "пиздливые", "п*******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v465, "пиздливы", "п******ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v466, "пиздливое", "п*******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v467, "пиздливая", "п*******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v468, "пиздлив", "п*****в");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v469, "пиздия", "п****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v470, "пиздиют", "п*****т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v471, "пиздию", "п****ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v472, "пиздищи", "п*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v473, "пиздище", "п*****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v474, "пиздища", "п*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v475, "пиздишься", "п*******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v476, "пиздишь", "п*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v477, "пиздиш", "п****ш");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v478, "пиздица", "п*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v479, "пиздиц", "п****ц");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v480, "пиздиться", "п*******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v481, "пиздить", "п*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v482, "пиздится", "п******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v483, "пиздити", "п*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v484, "пиздитесь", "п*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v485, "пиздите", "п*****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v486, "пиздит", "п****т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v487, "пиздис", "п****с");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v488, "пиздиной", "п******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v489, "пиздинг", "п*****г");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v490, "пиздина", "п*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v491, "пиздимся", "п******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v492, "пиздим", "п****м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v493, "пиздился", "п******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v494, "пиздилок", "п******к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v495, "пиздилово", "п*******о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v496, "пиздиловки", "п********и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v497, "пиздиловка", "п********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v498, "пиздилку", "п******у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v499, "пиздилки", "п******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v500, "пиздилка", "п******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v501, "пиздились", "п*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v502, "пиздили", "п*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v503, "пиздилась", "п*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v504, "пиздила", "п*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v505, "пиздил", "п****л");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v506, "пиздикулус", "п********с");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v507, "пиздика", "п*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v508, "пиздий", "п****й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v509, "пиздиишь", "п******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v510, "пиздии", "п****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v511, "пиздиет", "п*****т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v512, "пизди", "п***и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v513, "пизджу", "п****у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v514, "пиздешь", "п*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v515, "пиздешн", "п*****н");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v516, "пиздеш", "п****ш");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v517, "пиздечик", "п******к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v518, "пиздеця", "п*****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v519, "пиздецю", "п*****ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v520, "пиздець", "п*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v521, "пиздецы", "п*****ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v522, "пиздецъ", "п*****ъ");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v523, "пиздецхочу", "п********у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v524, "пиздецу", "п*****у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v525, "пиздецты", "п******ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v526, "пиздецсижу", "п********у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v527, "пиздецс", "п*****с");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v528, "пиздецпо", "п******о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v529, "пиздецочек", "п********к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v530, "пиздецом", "п******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v531, "пиздецок", "п******к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v532, "пиздецовых", "п********х");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v533, "пиздецовым", "п********м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v534, "пиздецовый", "п********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v535, "пиздецовые", "п********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v536, "пиздецовую", "п********ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v537, "пиздецовский", "п**********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v538, "пиздецовость", "п**********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v539, "пиздецовой", "п********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v540, "пиздецовое", "п********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v541, "пиздецово", "п*******о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v542, "пиздецович", "п********ч");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v543, "пиздецовее", "п********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v544, "пиздецовая", "п********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v545, "пиздецов", "п******в");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v546, "пиздецный", "п*******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v547, "пиздецнадо", "п********о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v548, "пиздецмне", "п*******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v549, "пиздецменя", "п********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v550, "пиздецкой", "п*******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v551, "пиздецкое", "п*******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v552, "пиздецкого", "п********о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v553, "пиздецко", "п******о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v554, "пиздецких", "п*******х");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v555, "пиздецким", "п*******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v556, "пиздецкий", "п*******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v557, "пиздецкие", "п*******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v558, "пиздецки", "п******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v559, "пиздецкая", "п*******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v560, "пиздеци", "п*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v561, "пиздецесли", "п********и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v562, "пиздеце", "п*****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v563, "пиздецдаже", "п********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v564, "пиздецда", "п******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v565, "пиздецв", "п*****в");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v566, "пиздецахах", "п********х");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v567, "пиздецах", "п******х");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v568, "пиздецами", "п*******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v569, "пиздецам", "п******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v570, "пиздеца", "п*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v571, "пиздец", "п****ц");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v572, "пиздеуц", "п*****ц");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v573, "пиздеться", "п*******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v574, "пиздеть", "п*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v575, "пиздетц", "п*****ц");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v576, "пиздетски", "п*******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v577, "пиздетс", "п*****с");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v578, "пиздет", "п****т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v579, "пиздесь", "п*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v580, "пиздес", "п****с");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v581, "пиздень", "п*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v582, "пизденышь", "п*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v583, "пизденыши", "п*******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v584, "пизденыш", "п******ш");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v585, "пизденочка", "п********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v586, "пизденок", "п******к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v587, "пизденку", "п******у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v588, "пизденкой", "п*******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v589, "пизденки", "п******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v590, "пизденке", "п******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v591, "пизденка", "п******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v592, "пиздени", "п*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v593, "пиздельники", "п*********и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v594, "пиздельник", "п********к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v595, "пизделся", "п******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v596, "пизделово", "п*******о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v597, "пизделовка", "п********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v598, "пиздело", "п*****о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v599, "пизделку", "п******у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v600, "пизделки", "п******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v601, "пизделка", "п******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v602, "пизделись", "п*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v603, "пиздели", "п*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v604, "пизделей", "п******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v605, "пиздела", "п*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v606, "пиздел", "п****л");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v607, "пиздек", "п****к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v608, "пиздейшн", "п******н");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v609, "пиздейшин", "п*******н");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v610, "пиздейшен", "п*******н");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v611, "пиздейц", "п*****ц");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v612, "пиздейро", "п******о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v613, "пиздей", "п****й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v614, "пиздез", "п****з");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v615, "пиздежь", "п*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v616, "пиздежу", "п*****у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v617, "пиздежом", "п******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v618, "пиздежи", "п*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v619, "пиздежем", "п******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v620, "пиздеже", "п*****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v621, "пиздежа", "п*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v622, "пиздеж", "п****ж");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v623, "пиздеецц", "п******ц");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v624, "пиздеец", "п*****ц");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v625, "пизде", "п***е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v626, "пиздая", "п****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v627, "пиздаче", "п*****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v628, "пиздач", "п****ч");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v629, "пиздация", "п******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v630, "пиздахаханьки", "п***********и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v631, "пиздахана", "п*******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v632, "пиздаускас", "п********с");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v633, "пиздать", "п*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v634, "пиздатыый", "п*******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v635, "пиздатых", "п******х");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v636, "пиздатыми", "п*******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v637, "пиздатым", "п******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v638, "пиздатый", "п******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v639, "пиздатые", "п******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v640, "пиздаты", "п*****ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v641, "пиздатую", "п******ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v642, "пиздатостью", "п*********ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v643, "пиздатость", "п********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v644, "пиздатости", "п********и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v645, "пиздатоо", "п******о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v646, "пиздатому", "п*******у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v647, "пиздатом", "п******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v648, "пиздатой", "п******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v649, "пиздатое", "п******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v650, "пиздатого", "п*******о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v651, "пиздато", "п*****о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v652, "пиздатни", "п******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v653, "пиздатий", "п******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v654, "пиздатенькое", "п**********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v655, "пиздатенького", "п***********о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v656, "пиздатенько", "п*********о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v657, "пиздатеньких", "п**********х");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v658, "пиздатенький", "п**********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v659, "пиздатенькие", "п**********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v660, "пиздатенькая", "п**********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v661, "пиздатейший", "п*********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v662, "пиздатейшие", "п*********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v663, "пиздатейшее", "п*********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v664, "пиздатейше", "п********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v665, "пиздатейшая", "п*********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v666, "пиздатей", "п******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v667, "пиздатее", "п******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v668, "пиздатая", "п******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v669, "пиздата", "п*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v670, "пиздат", "п****т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v671, "пиздастрадашки", "п************и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v672, "пиздастрадания", "п************я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v673, "пиздастраданий", "п************й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v674, "пиздастрадалец", "п************ц");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v675, "пиздас", "п****с");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v676, "пиздарулю", "п*******ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v677, "пиздарики", "п*******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v678, "пиздари", "п*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v679, "пиздарез", "п******з");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v680, "пиздарваньчик", "п***********к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v681, "пиздапроёбина", "п***********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v682, "пиздапроебины", "п***********ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v683, "пиздапроебина", "п***********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v684, "пиздапизда", "п********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v685, "пизданёшь", "п*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v686, "пизданётся", "п********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v687, "пизданёт", "п******т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v688, "пизданём", "п******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v689, "пиздануца", "п*******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v690, "пиздануться", "п*********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v691, "пиздануть", "п*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v692, "пизданутых", "п********х");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v693, "пизданутыми", "п*********и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v694, "пизданутым", "п********м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v695, "пизданутый", "п********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v696, "пизданутые", "п********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v697, "пизданутую", "п********ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v698, "пизданутся", "п********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v699, "пизданутость", "п**********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v700, "пизданутости", "п**********и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v701, "пизданутой", "п********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v702, "пизданутое", "п********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v703, "пизданутого", "п*********о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v704, "пизданутей", "п********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v705, "пизданутая", "п********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v706, "пизданут", "п******т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v707, "пизданусь", "п*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v708, "пизданулся", "п********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v709, "пизданулось", "п*********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v710, "пиздануло", "п*******о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v711, "пизданулись", "п*********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v712, "пизданули", "п*******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v713, "пизданулась", "п*********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v714, "пизданула", "п*******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v715, "пизданул", "п******л");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v716, "пиздану", "п*****у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v717, "пизданога", "п*******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v718, "пиздано", "п*****о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v719, "пизданите", "п*******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v720, "пизданись", "п*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v721, "пиздани", "п*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v722, "пизданешься", "п*********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v723, "пизданешь", "п*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v724, "пизданется", "п********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v725, "пизданете", "п*******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v726, "пизданет", "п******т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v727, "пизданем", "п******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v728, "пиздами", "п*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v729, "пиздамба", "п******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v730, "пиздам", "п****м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v731, "пиздализ", "п******з");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v732, "пиздакшионер", "п**********р");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v733, "пиздак", "п****к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v734, "пиздаебы", "п******ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v735, "пиздаебина", "п********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v736, "пиздаеб", "п*****б");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v737, "пиздаджигурда", "п***********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v738, "пиздадельный", "п**********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v739, "пиздадельные", "п**********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v740, "пиздадельная", "п**********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v741, "пиздада", "п*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v742, "пиздаган", "п******н");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v743, "пиздавать", "п*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v744, "пиздаватый", "п********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v745, "пиздаватые", "п********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v746, "пиздаболят", "п********т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v747, "пиздаболю", "п*******ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v748, "пиздабольству", "п***********у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v749, "пиздабольством", "п************м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v750, "пиздабольство", "п***********о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v751, "пиздабольстве", "п***********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v752, "пиздабольства", "п***********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v753, "пиздабольный", "п**********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v754, "пиздабольная", "п**********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v755, "пиздаболь", "п*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v756, "пиздаболы", "п*******ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v757, "пиздаболу", "п*******у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v758, "пиздаболом", "п********м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v759, "пиздаболок", "п********к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v760, "пиздаболов", "п********в");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v761, "пиздаболку", "п********у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v762, "пиздаболкой", "п*********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v763, "пиздаболки", "п********и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v764, "пиздаболке", "п********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v765, "пиздаболками", "п**********и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v766, "пиздаболка", "п********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v767, "пиздаболия", "п********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v768, "пиздаболию", "п********ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v769, "пиздаболище", "п*********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v770, "пиздаболишь", "п*********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v771, "пиздаболить", "п*********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v772, "пиздаболит", "п********т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v773, "пиздаболина", "п*********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v774, "пиздаболии", "п********и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v775, "пиздаболией", "п*********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v776, "пиздаболие", "п********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v777, "пиздаболами", "п*********и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v778, "пиздаболам", "п********м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v779, "пиздабола", "п*******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v780, "пиздабол", "п******л");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v781, "пиздаатыый", "п********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v782, "пизда", "п***а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v783, "пизд", "п**д");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v784, "пидораска", "п*******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v785, "пидорасина", "п********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v786, "пидорас", "п*****с");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v787, "пидор", "п***р");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v788, "педрило", "п*****о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v789, "педрила", "п*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v790, "педик", "п***к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v791, "педерастина", "п*********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v792, "педераст", "п******т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v793, "охуительный", "о*********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v794, "охуительное", "о*********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v795, "охуительная", "о*********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v796, "охуеть", "о****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[14],0>(v797, "охуенный", "о*********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[14],0>(v798, "охуенное", "о*********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[14],0>(v799, "охуенная", "о*********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v800, "охуел", "о***л");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v801, "отъебаться", "о********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v802, "отпиздячить", "о*********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v803, "отпиздить", "о*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v804, "остопиздить", "о*********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v805, "остопиздеть", "о*********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[31],char const(&)[18],0>(v806, "опиздинительный", "о*************й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[31],char const(&)[18],0>(v807, "опиздинительное", "о*************е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[31],char const(&)[18],0>(v808, "опиздинительная", "о*************я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v809, "опизденивающе", "о***********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v810, "опизде", "о****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v811, "однохуйственно", "о************о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v812, "обьебать", "о******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v813, "объебать", "о******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v814, "нихуя", "н***я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v815, "нехуйственно", "н**********о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v816, "нехуй", "н***й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v817, "нахуйник", "н******к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v818, "нахуй", "н***й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v819, "настопиздить", "н**********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v820, "настоебать", "н********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v821, "напиздить", "н*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v822, "напиздили", "н*******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v823, "напиздело", "н*******о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v824, "напиздели", "н*******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v825, "напиздел", "н******л");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v826, "наебать", "н*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v827, "мудачка", "м*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v828, "мудак", "м***к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v829, "манда", "м***а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v830, "испиздить", "и*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v831, "злоебучий", "з*******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v832, "злоебучее", "з*******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v833, "злоебучая", "з*******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v834, "заёбанный", "з*******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v835, "затрахивать", "з*********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v836, "затрахать", "з*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v837, "затрахали", "з*******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v838, "затрахала", "з*******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v839, "запиздячить", "з*********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v840, "запиздеть", "з*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v841, "залупа", "з****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v842, "заебись", "з*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v843, "заебаться", "з*******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v844, "заебать", "з*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v845, "заебатый", "з******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v846, "заебатая", "з******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v847, "заебанец", "з******ц");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v848, "заебало", "з*****о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v849, "заебали", "з*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v850, "заебала", "з*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v851, "заебал", "з****л");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[12],0>(v852, "заeбанный", "з*******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v853, "ебучий", "е****й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v854, "ебучее", "е****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v855, "ебучая", "е****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v856, "ебля", "е**я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v857, "ебло", "е**о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v858, "ебланка\n", "е*****\n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v859, "еблан\n", "е***\n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v860, "ебатюшки", "е******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v861, "ебатьялох", "е*******х");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v862, "ебатья", "е****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v863, "ебатьты", "е*****ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[30],char const(&)[18],0>(v864, "ебаться-сраться", "е*************я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v865, "ебаться", "е*****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v866, "ебатьколотить", "е***********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[15],0>(v867, "ебать-копать", "е**********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[28],char const(&)[17],0>(v868, "ебать-колотить", "е************ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v869, "ебать", "е***ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v870, "ебаты", "е***ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v871, "ебату", "е***у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v872, "ебатся", "е****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v873, "ебатория", "е******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v874, "ебаторию", "е******ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v875, "ебаторий", "е******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v876, "ебатня", "е****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v877, "ебатню", "е****ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v878, "ебатика", "е*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v879, "ебати", "е***и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v880, "ебатень", "е*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v881, "ебате", "е***е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v882, "ебата", "е***а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v883, "ебат", "е**т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v884, "ебарь", "е***ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v885, "ебанёшься", "е*******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v886, "ебанёшь", "е*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v887, "ебанётся", "е******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v888, "ебанёте", "е*****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v889, "ебанёт", "е****т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v890, "ебанём", "е****м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v891, "ебанята", "е*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v892, "ебаням", "е****м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v893, "ебаня", "е***я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v894, "ебаньтяй", "е******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v895, "ебанькоо", "е******о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v896, "ебаньком", "е******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v897, "ебанько", "е*****о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v898, "ебаньки", "е*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v899, "ебань", "е***ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v900, "ебаныый", "е*****й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v901, "ебаных", "е****х");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v902, "ебанырот", "е******т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v903, "ебаными", "е*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v904, "ебаным", "е****м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v905, "ебаныйрот", "е*******т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v906, "ебаныйврот", "е********т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v907, "ебаный", "е****й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v908, "ебаныи", "е****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v909, "ебаные", "е****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v910, "ебаныврот", "е*******т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v911, "ебаны", "е***ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v912, "ебаную", "е****ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v913, "ебанушку", "е******у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v914, "ебанушкой", "е*******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v915, "ебанушки", "е******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v916, "ебанушками", "е********и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v917, "ебанушкам", "е*******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v918, "ебанушка", "е******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v919, "ебанушек", "е******к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v920, "ебануцца", "е******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v921, "ебануцо", "е*****о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v922, "ебануца", "е*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v923, "ебануха", "е*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v924, "ебанууться", "е********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v925, "ебануутая", "е*******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v926, "ебанутьсяя", "е********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v927, "ебануться", "е*******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v928, "ебануть", "е*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v929, "ебанутых", "е******х");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v930, "ебанутыми", "е*******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v931, "ебанутым", "е******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v932, "ебанутый", "е******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v933, "ебанутые", "е******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v934, "ебануты", "е*****ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v935, "ебанутую", "е******ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v936, "ебанутся", "е******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v937, "ебанутством", "е*********м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v938, "ебанутство", "е********о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v939, "ебанутства", "е********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v940, "ебанутсво", "е*******о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v941, "ебанутось", "е*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v942, "ебанутостью", "е*********ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v943, "ебанутость", "е********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v944, "ебанутости", "е********и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v945, "ебанутостей", "е*********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v946, "ебанутому", "е*******у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v947, "ебанутом", "е******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v948, "ебанутой", "е******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v949, "ебанутое", "е******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v950, "ебанутого", "е*******о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v951, "ебануто", "е*****о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v952, "ебанутки", "е******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v953, "ебанутка", "е******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v954, "ебанутики", "е*******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v955, "ебанутика", "е*******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v956, "ебанутик", "е******к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v957, "ебанутий", "е******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v958, "ебанутейший", "е*********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v959, "ебанутейшие", "е*********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v960, "ебанутейшая", "е*********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v961, "ебанутей", "е******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v962, "ебанутее", "е******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v963, "ебануте", "е*****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v964, "ебанутаяя", "е*******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v965, "ебанутая", "е******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v966, "ебанутаая", "е*******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v967, "ебанутаЯ", "е******Я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v968, "ебанута", "е*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v969, "ебанут", "е****т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v970, "ебанусь", "е*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v971, "ебанулся", "е******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v972, "ебанулсь", "е******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v973, "ебанулсо", "е******о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v974, "ебанулс", "е*****с");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v975, "ебанулось", "е*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v976, "ебануло", "е*****о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v977, "ебанулисья", "е********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v978, "ебанулись", "е*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v979, "ебанули", "е*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v980, "ебанулась", "е*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v981, "ебанула", "е*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v982, "ебанул", "е****л");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v983, "ебануй", "е****й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v984, "ебану", "е***у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v985, "ебантяями", "е*******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v986, "ебантяям", "е******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v987, "ебантяя", "е*****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v988, "ебантяйство", "е*********о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v989, "ебантяйства", "е*********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v990, "ебантяйское", "е*********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v991, "ебантяйские", "е*********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v992, "ебантяйки", "е*******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v993, "ебантяйка", "е*******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v994, "ебантяй", "е*****й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v995, "ебантяи", "е*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v996, "ебантяем", "е******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v997, "ебантяев", "е******в");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v998, "ебантизм", "е******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v999, "ебантеи", "е*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1000, "ебанство", "е******о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1001, "ебанско", "е*****о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1002, "ебанский", "е******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1003, "ебанрот", "е*****т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1004, "ебаноё", "е****ё");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1005, "ебаному", "е*****у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1006, "ебаном", "е****м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1007, "ебанок", "е****к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1008, "ебаной", "е****й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1009, "ебаное", "е****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1010, "ебаного", "е*****о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1011, "ебановрот", "е*******т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1012, "ебанов", "е****в");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1013, "ебано", "е***о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1014, "ебанных", "е*****х");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1015, "ебанными", "е******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1016, "ебанным", "е*****м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v1017, "ебанныйврот", "е*********т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1018, "ебанный", "е*****й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1019, "ебанныи", "е*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1020, "ебанные", "е*****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1021, "ебанную", "е*****ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1022, "ебаннутых", "е*******х");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1023, "ебаннутый", "е*******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1024, "ебаннутые", "е*******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1025, "ебаннутой", "е*******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1026, "ебаннутое", "е*******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1027, "ебаннутого", "е********о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1028, "ебаннутая", "е*******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1029, "ебанному", "е******у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1030, "ебанном", "е*****м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1031, "ебанной", "е*****й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1032, "ебанное", "е*****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1033, "ебанного", "е******о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1034, "ебанно", "е****о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1035, "ебанная", "е*****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1036, "ебанная", "е*****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1037, "ебанна", "е****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1038, "ебанка", "е****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1039, "ебания", "е****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v1040, "ебанический", "е*********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v1041, "ебанические", "е*********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1042, "ебанически", "е********и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1043, "ебанитовая", "е********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1044, "ебанитесь", "е*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1045, "ебаните", "е*****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1046, "ебанись", "е*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v1047, "ебанистической", "е************й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v1048, "ебанистический", "е************й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v1049, "ебанистические", "е************е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v1050, "ебанистически", "е***********и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v1051, "ебанистическая", "е************я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1052, "ебанистика", "е********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1053, "ебанины", "е*****ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1054, "ебанина", "е*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1055, "ебаний", "е****й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1056, "ебании", "е****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1057, "ебанизмом", "е*******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1058, "ебанизма", "е******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1059, "ебанизм", "е*****м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1060, "ебание", "е****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1061, "ебанешься", "е*******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1062, "ебанешь", "е*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1063, "ебанешся", "е******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1064, "ебанется", "е******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1065, "ебанете", "е*****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1066, "ебанет", "е****т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1067, "ебаненько", "е*******о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1068, "ебаненький", "е********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1069, "ебанемся", "е******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1070, "ебанем", "е****м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1071, "ебанейший", "е*******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1072, "ебаней", "е****й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1073, "ебанее", "е****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1074, "ебанврот", "е******т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1075, "ебанаяя", "е*****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1076, "ебаная", "е****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1077, "ебаная", "е****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1078, "ебанашку", "е******у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1079, "ебанашкой", "е*******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1080, "ебанашки", "е******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1081, "ебанашке", "е******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1082, "ебанашками", "е********и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1083, "ебанашкам", "е*******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1084, "ебанашка", "е******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1085, "ебанаши", "е*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1086, "ебанашечка", "е********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1087, "ебанашек", "е******к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1088, "ебанафт", "е*****т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1089, "ебанатый", "е******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1090, "ебанаты", "е*****ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1091, "ебанату", "е*****у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1092, "ебанатство", "е********о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1093, "ебанатства", "е********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1094, "ебанатской", "е********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1095, "ебанатский", "е********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1096, "ебанатские", "е********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1097, "ебанатская", "е********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1098, "ебанаторы", "е*******ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1099, "ебанатор", "е******р");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1100, "ебанатом", "е******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1101, "ебанатов", "е******в");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1102, "ебанатки", "е******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1103, "ебанатка", "е******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1104, "ебанатиков", "е********в");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1105, "ебанатики", "е*******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1106, "ебанатик", "е******к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1107, "ебанатизм", "е*******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1108, "ебанатами", "е*******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1109, "ебанатам", "е******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1110, "ебаната", "е*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1111, "ебанат", "е****т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1112, "ебанарь", "е*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1113, "ебанарот", "е******т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1114, "ебанан", "е****н");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1115, "ебанами", "е*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1116, "ебанамать", "е*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1117, "ебанай", "е****й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1118, "ебанавты", "е******ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1119, "ебанавт", "е*****т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1120, "ебана", "е***а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1121, "ебан", "е**н");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1122, "ебало", "е***о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1123, "ебали", "е***и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1124, "ебала", "е***а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1125, "ебал", "е**л");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v1126, "еб твою мать", "е*********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v1127, "допиздеться", "д*********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1128, "долбоёб", "д*****б");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1129, "долбоеб", "д*****б");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1130, "доебаться", "д*******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[11],0>(v1131, "до-пизды", "д******ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1132, "гребаных", "г******х");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1133, "гребаную", "г******ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1134, "гребаного", "г*******о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1135, "гребанные", "г*******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1136, "гребанную", "г*******ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v1137, "выёбываются", "в*********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[14],0>(v1138, "выёбываюсь", "в*********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[15],0>(v1139, "выёбываться", "в**********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1140, "выёбывайся", "в********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[16],0>(v1141, "выёбываешься", "в***********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[15],0>(v1142, "выёбывается", "в**********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v1143, "выёбывается", "в*********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1144, "выпиздить", "в*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v1145, "выпиздеться", "в*********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1146, "выебут", "в****т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1147, "выебу", "в***у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1148, "выебешь", "в*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1149, "выебет", "в****т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1150, "выебать", "в*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1151, "выблядыш", "в******ш");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1152, "выблядок", "в******к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1153, "въебаться", "в*******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1154, "въебать", "в*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1155, "впиздячить", "в********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1156, "бляха", "б***а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1157, "блять", "б***ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1158, "блятство", "б******о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1159, "блятский", "б******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1160, "блятская", "б******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1161, "блянадо", "б*****о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1162, "бляменя", "б*****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1163, "блямба", "б****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1164, "блямб", "б***б");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1165, "блякаешь", "б******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1166, "блядях", "б****х");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1167, "блядями", "б*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1168, "блядюга", "б*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1169, "блядьми", "б*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1170, "блядь", "б***ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1171, "блядуют", "б*****т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1172, "блядушки", "б******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1173, "блядунья", "б******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1174, "блядуны", "б*****ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1175, "блядун", "б****н");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1176, "блядуешь", "б******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1177, "блядует", "б*****т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1178, "блядству", "б******у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v1179, "блядствовать", "б**********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1180, "блядство", "б******о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1181, "блядстве", "б******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1182, "блядства", "б******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1183, "блядскую", "б******ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1184, "блядском", "б******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1185, "блядской", "б******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1186, "блядское", "б******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1187, "блядско", "б*****о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1188, "блядских", "б******х");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1189, "блядским", "б******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1190, "блядский", "б******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1191, "блядские", "б******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1192, "блядски", "б*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1193, "блядская", "б******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1194, "блядота", "б*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1195, "блядовать", "б*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1196, "блядки", "б****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1197, "блядках", "б*****х");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1198, "блядищи", "б*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1199, "блядище", "б*****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1200, "блядища", "б*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1201, "блядины", "б*****ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1202, "блядину", "б*****у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1203, "блядиной", "б******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1204, "блядинка", "б******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1205, "блядине", "б*****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1206, "блядина", "б*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1207, "бляди", "б***и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1208, "бляд", "б**д");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1209, "блябуду", "б*****у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1210, "блябу", "б***у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v1211, "бля", "б*я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1212, "ахуй", "а**й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v1213, "архипиздрит", "а*********т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[8],0>(v1214, "eбаный", "e****й");
    std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](&siri::dialogengine::GetProfanityFilter_ru(void)::sProfanityData_ru, (uint64_t)v5, 0x4BAuLL);
    for (i = 0; i != -7260; i -= 6)
      std::pair<std::string const,std::string>::~pair((uint64_t)&v1214[i]);
    __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], &siri::dialogengine::GetProfanityFilter_ru(void)::sProfanityData_ru, &dword_1BF794000);
  }
  *v1 = 0;
  v1[1] = 0;
  v1[2] = 0;
  return std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(v1, siri::dialogengine::GetProfanityFilter_ru(void)::sProfanityData_ru, *(uint64_t *)algn_1EF582E10, 0xAAAAAAAAAAAAAAABLL* ((*(_QWORD *)algn_1EF582E10 - siri::dialogengine::GetProfanityFilter_ru(void)::sProfanityData_ru) >> 4));
}

void sub_1BFB5057C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + 58032;
  v4 = -58080;
  do
  {
    v3 = std::pair<std::string const,std::string>::~pair(v3) - 48;
    v4 += 48;
  }
  while (v4);
  _Unwind_Resume(a1);
}

_QWORD *siri::dialogengine::GetProfanityFilter_ro(siri::dialogengine *this)
{
  _QWORD *v1;
  unsigned __int8 v2;
  uint64_t i;
  _QWORD v5[6];
  _QWORD v6[6];
  _QWORD v7[6];
  _QWORD v8[6];
  _QWORD v9[6];
  _QWORD v10[6];
  _QWORD v11[6];
  _QWORD v12[6];
  _QWORD v13[6];
  _QWORD v14[6];
  _QWORD v15[6];
  _QWORD v16[6];
  _QWORD v17[6];
  _QWORD v18[6];
  _QWORD v19[6];
  _QWORD v20[6];
  _QWORD v21[6];
  _QWORD v22[6];
  _QWORD v23[6];
  _QWORD v24[6];
  _QWORD v25[6];
  _QWORD v26[6];
  _QWORD v27[6];
  _QWORD v28[6];
  _QWORD v29[6];
  _QWORD v30[6];
  _QWORD v31[6];
  _QWORD v32[6];
  _QWORD v33[6];
  _QWORD v34[6];
  _QWORD v35[6];
  _QWORD v36[6];
  _QWORD v37[6];
  _QWORD v38[6];
  _QWORD v39[6];
  _QWORD v40[6];
  _QWORD v41[6];
  _QWORD v42[6];
  _QWORD v43[6];
  _QWORD v44[6];
  _QWORD v45[6];
  _QWORD v46[6];
  _QWORD v47[6];
  _QWORD v48[6];
  _QWORD v49[6];
  _QWORD v50[6];
  _QWORD v51[6];
  _QWORD v52[6];
  _QWORD v53[6];
  _QWORD v54[6];
  _QWORD v55[6];
  _QWORD v56[6];
  _QWORD v57[6];
  _QWORD v58[6];
  _QWORD v59[6];
  _QWORD v60[6];
  _QWORD v61[6];
  _QWORD v62[6];
  _QWORD v63[6];
  _QWORD v64[6];
  _QWORD v65[6];
  _QWORD v66[6];
  _QWORD v67[6];
  _QWORD v68[6];
  _QWORD v69[6];
  _QWORD v70[6];
  _QWORD v71[6];
  _QWORD v72[6];
  _QWORD v73[6];
  _QWORD v74[6];
  _QWORD v75[6];
  _QWORD v76[6];
  _QWORD v77[6];
  _QWORD v78[6];
  _QWORD v79[6];
  _QWORD v80[6];
  _QWORD v81[6];
  _QWORD v82[6];
  _QWORD v83[6];
  _QWORD v84[6];
  _QWORD v85[6];
  _QWORD v86[6];
  _QWORD v87[6];
  _QWORD v88[6];
  _QWORD v89[6];
  _QWORD v90[6];
  _QWORD v91[6];
  _QWORD v92[6];
  _QWORD v93[6];
  _QWORD v94[6];
  _QWORD v95[6];
  _QWORD v96[6];
  _QWORD v97[6];
  _QWORD v98[6];
  _QWORD v99[6];
  _QWORD v100[6];
  _QWORD v101[6];
  _QWORD v102[6];
  _QWORD v103[6];
  _QWORD v104[6];
  _QWORD v105[6];
  _QWORD v106[6];
  _QWORD v107[6];
  _QWORD v108[6];
  _QWORD v109[6];
  _QWORD v110[6];
  _QWORD v111[6];
  _QWORD v112[6];
  _QWORD v113[6];
  _QWORD v114[6];
  _QWORD v115[6];
  _QWORD v116[6];
  _QWORD v117[6];
  _QWORD v118[6];
  _QWORD v119[6];
  _QWORD v120[6];
  _QWORD v121[6];
  _QWORD v122[6];
  _QWORD v123[6];
  _QWORD v124[6];
  _QWORD v125[6];
  _QWORD v126[6];
  _QWORD v127[6];
  _QWORD v128[6];
  _QWORD v129[6];
  _QWORD v130[6];
  _QWORD v131[6];
  _QWORD v132[6];
  _QWORD v133[6];
  _QWORD v134[6];
  _QWORD v135[6];
  _QWORD v136[6];
  _QWORD v137[6];
  _QWORD v138[6];
  _QWORD v139[6];
  _QWORD v140[6];
  _QWORD v141[6];
  _QWORD v142[6];
  _QWORD v143[6];
  _QWORD v144[6];
  _QWORD v145[6];
  _QWORD v146[6];
  _QWORD v147[6];
  _QWORD v148[6];
  _QWORD v149[6];
  _QWORD v150[6];
  _QWORD v151[6];
  _QWORD v152[6];
  _QWORD v153[6];
  _QWORD v154[6];
  _QWORD v155[6];
  _QWORD v156[6];
  _QWORD v157[6];
  _QWORD v158[6];
  _QWORD v159[6];
  _QWORD v160[6];
  _QWORD v161[6];
  _QWORD v162[6];
  _QWORD v163[6];
  _QWORD v164[6];
  _QWORD v165[6];
  _QWORD v166[6];
  _QWORD v167[6];
  _QWORD v168[6];
  _QWORD v169[6];
  _QWORD v170[6];
  _QWORD v171[6];
  _QWORD v172[6];
  _QWORD v173[6];
  _QWORD v174[6];
  _QWORD v175[6];
  _QWORD v176[6];
  _QWORD v177[6];
  _QWORD v178[6];
  _QWORD v179[6];
  _QWORD v180[6];
  _QWORD v181[6];
  _QWORD v182[6];
  _QWORD v183[6];
  _QWORD v184[6];
  _QWORD v185[6];
  _QWORD v186[6];
  _QWORD v187[6];
  _QWORD v188[6];
  _QWORD v189[6];
  _QWORD v190[6];
  _QWORD v191[6];
  _QWORD v192[6];
  _QWORD v193[6];
  _QWORD v194[6];
  _QWORD v195[6];
  _QWORD v196[6];
  _QWORD v197[6];
  _QWORD v198[6];
  _QWORD v199[6];
  _QWORD v200[6];
  _QWORD v201[6];
  _QWORD v202[6];
  _QWORD v203[6];
  _QWORD v204[6];
  _QWORD v205[6];
  _QWORD v206[6];
  _QWORD v207[6];
  _QWORD v208[6];
  _QWORD v209[6];
  _QWORD v210[6];
  _QWORD v211[6];
  _QWORD v212[6];
  _QWORD v213[6];
  _QWORD v214[6];
  _QWORD v215[6];
  _QWORD v216[6];
  _QWORD v217[6];
  _QWORD v218[6];
  _QWORD v219[6];
  _QWORD v220[6];
  _QWORD v221[6];
  _QWORD v222[6];
  _QWORD v223[6];
  _QWORD v224[6];
  _QWORD v225[6];
  _QWORD v226[6];
  _QWORD v227[6];
  _QWORD v228[6];
  _QWORD v229[6];
  _QWORD v230[6];
  _QWORD v231[6];
  _QWORD v232[6];
  _QWORD v233[6];
  _QWORD v234[6];
  _QWORD v235[6];
  _QWORD v236[6];
  _QWORD v237[6];
  _QWORD v238[6];
  _QWORD v239[6];
  _QWORD v240[6];
  _QWORD v241[6];
  _QWORD v242[6];
  _QWORD v243[6];
  _QWORD v244[6];
  _QWORD v245[6];
  _QWORD v246[6];
  _QWORD v247[6];
  _QWORD v248[6];
  _QWORD v249[6];
  _QWORD v250[6];
  _QWORD v251[6];
  _QWORD v252[6];
  _QWORD v253[6];
  _QWORD v254[6];
  _QWORD v255[6];
  _QWORD v256[6];
  _QWORD v257[6];
  _QWORD v258[6];
  _QWORD v259[6];
  _QWORD v260[6];
  _QWORD v261[6];
  _QWORD v262[6];
  _QWORD v263[6];
  _QWORD v264[6];
  _QWORD v265[6];
  _QWORD v266[6];
  _QWORD v267[6];
  _QWORD v268[6];
  _QWORD v269[6];
  _QWORD v270[6];
  _QWORD v271[6];
  _QWORD v272[6];
  _QWORD v273[6];
  _QWORD v274[6];
  _QWORD v275[6];
  _QWORD v276[6];
  _QWORD v277[6];
  _QWORD v278[6];
  _QWORD v279[6];
  _QWORD v280[6];
  _QWORD v281[6];
  _QWORD v282[6];
  _QWORD v283[6];
  _QWORD v284[6];
  _QWORD v285[6];
  _QWORD v286[6];
  _QWORD v287[6];
  _QWORD v288[6];
  _QWORD v289[6];
  _QWORD v290[6];
  _QWORD v291[6];
  _QWORD v292[6];
  _QWORD v293[6];
  _QWORD v294[6];
  _QWORD v295[6];
  _QWORD v296[6];
  _QWORD v297[7];

  v1 = (_QWORD *)MEMORY[0x1E0C80A78](this);
  v297[6] = *MEMORY[0x1E0C80C00];
  if ((v2 & 1) == 0
  {
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[9],0>(v5, "﻿cACI", "﻿*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[13],0>(v6, "şobolanule", "ş**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[9],0>(v7, "youporn", "y*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[9],0>(v8, "youjizz", "y*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[9],0>(v9, "xvideos", "x*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[6],0>(v10, "xnxx", "x****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[12],0>(v11, "unguroiule", "u**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[12],0>(v12, "unguroilor", "u**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v13, "târfelor", "t********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v14, "târfele", "t*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v15, "târfa", "t*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v16, "tâmpitule", "t*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v17, "tâmpito", "t*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[12],0>(v18, "tuciuriule", "t**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[14],0>(v19, "trogloditule", "t************");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v20, "suge-mi-ai", "s********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v21, "suge-m-ai", "s*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[10],0>(v22, "suge-i-o", "s********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[14],0>(v23, "sifiliticule", "s************");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[6],0>(v24, "shit", "s****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[7],0>(v25, "sextv", "s*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[9],0>(v26, "sextube", "s*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[9],0>(v27, "sexfree", "s*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[8],0>(v28, "sexbot", "s******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[12],0>(v29, "retarzilor", "r**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[10],0>(v30, "retarzii", "r********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[11],0>(v31, "retardule", "r*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[12],0>(v32, "retardelor", "r**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[13],0>(v33, "retardatule", "r***********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[10],0>(v34, "ratatule", "r********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[8],0>(v35, "ratato", "r******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v36, "rahaţilor", "r*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[13],0>(v37, "putrezitule", "p***********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[13],0>(v38, "putregaiule", "p***********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[10],0>(v39, "putoareo", "p********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v40, "pulă", "p****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[9],0>(v41, "pulimii", "p*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[9],0>(v42, "pulimea", "p*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[8],0>(v43, "pulime", "p******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[7],0>(v44, "pulii", "p*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[14],0>(v45, "pulifriciule", "p************");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[11],0>(v46, "pulifrici", "p*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[8],0>(v47, "pulice", "p******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[8],0>(v48, "pulica", "p******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[9],0>(v49, "pulelor", "p*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[7],0>(v50, "pulea", "p*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[6],0>(v51, "pule", "p****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[8],0>(v52, "pula-n", "p******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[6],0>(v53, "pula", "p****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[10],0>(v54, "prostane", "p********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[14],0>(v55, "prostanacule", "p************");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[9],0>(v56, "proasto", "p*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[12],0>(v57, "proastelor", "p**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[10],0>(v58, "porntube", "p********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[7],0>(v59, "porno", "p*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[9],0>(v60, "pornhub", "p*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[6],0>(v61, "porn", "p****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[9],0>(v62, "porcule", "p*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[10],0>(v63, "poponaut", "p********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[13],0>(v64, "poponarilor", "p***********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[11],0>(v65, "poponarii", "p*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[10],0>(v66, "poponari", "p********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[9],0>(v67, "poponar", "p*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v68, "pișe", "p****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v69, "pișa-m-aș", "p*******ș");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v70, "piţipoancelor", "p*************");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v71, "pişăm", "p*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v72, "pişi", "p****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v73, "pişe", "p****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v74, "pişatul", "p*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v75, "pişat", "p*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v76, "piş", "p***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v77, "pizdă", "p***ă");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[11],0>(v78, "pizdulici", "p*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[12],0>(v79, "pizdologii", "p**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[9],0>(v80, "pizdita", "p*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[8],0>(v81, "pizdit", "p******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[11],0>(v82, "pizdilici", "p*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[9],0>(v83, "pizdele", "p*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v84, "pizdeală", "p********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[7],0>(v85, "pizda", "p*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[12],0>(v86, "parazitule", "p**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[10],0>(v87, "pANARAME", "p********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v88, "onaniști", "o******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v89, "onanist", "o*****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[14],0>(v90, "oligofrenule", "o************");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[15],0>(v91, "oligofrenilor", "o*************");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v92, "nesimţitule", "n***********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[10],0>(v93, "nefutute", "n********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v94, "naşpetule", "n*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[11],0>(v95, "mătărânga", "m*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v96, "mă-tii", "m******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v97, "mă-ta", "m*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v98, "mă-sii", "m******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[10],0>(v99, "muistule", "m********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[9],0>(v100, "muistul", "m*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[10],0>(v101, "muistele", "m********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[6],0>(v102, "muie", "m****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[7],0>(v103, "muian", "m*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[6],0>(v104, "muia", "m****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[9],0>(v105, "mucifer", "m*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[12],0>(v106, "milfhunter", "m**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[6],0>(v107, "milf", "m****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[6],0>(v108, "mUlE", "m****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[6],0>(v109, "mILF", "m****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v110, "linge-mi-ai", "l*********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v111, "linge-m-ai", "l********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v112, "lindic", "l****c");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[12],0>(v113, "limbricule", "l**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[12],0>(v114, "limbistule", "l**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[14],0>(v115, "limbincurism", "l************");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[15],0>(v116, "lepădăturilor", "l*************");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v117, "labă", "l**ă");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[11],0>(v118, "labagiule", "l*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v119, "labagiu", "l*****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[12],0>(v120, "labagiilor", "l**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v121, "labagii", "l*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[9],0>(v122, "jizzhut", "j*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[11],0>(v123, "jigodiile", "j*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v124, "jidănesc", "j********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[11],0>(v125, "jidanului", "j*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[11],0>(v126, "jidanilor", "j*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[8],0>(v127, "jidani", "j******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[9],0>(v128, "jidanca", "j*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[7],0>(v129, "jidan", "j*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[8],0>(v130, "jegule", "j******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[10],0>(v131, "jegosule", "j********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[10],0>(v132, "javrelor", "j********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v133, "japiță", "j****ă");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[11],0>(v134, "infectule", "i*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[10],0>(v135, "imbecilo", "i********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[10],0>(v136, "idiotule", "i********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[9],0>(v137, "idioato", "i*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[12],0>(v138, "hardcorsex", "h**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[16],0>(v139, "handicapaţilor", "h**************");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[15],0>(v140, "handicapatule", "h*************");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[13],0>(v141, "handicapato", "h***********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[10],0>(v142, "hairysex", "h********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v143, "găozari", "g*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v144, "găozar", "g****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v145, "găoaza", "g****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[11],0>(v146, "guramasii", "g*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[10],0>(v147, "gunoiule", "g********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[9],0>(v148, "garoiul", "g*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v149, "fuţi", "f****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v150, "futuţii", "f*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v151, "futută", "f******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[9],0>(v152, "fututul", "f*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[8],0>(v153, "futute", "f******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[9],0>(v154, "futut-o", "f*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[7],0>(v155, "futut", "f*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[7],0>(v156, "futui", "f*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v157, "futu-ţi", "f*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v158, "futu-vă", "f*****ă");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[9],0>(v159, "futu-te", "f*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v160, "futu-m-aș", "f*******ș");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[8],0>(v161, "futu-l", "f******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[8],0>(v162, "futu-i", "f******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[7],0>(v163, "futem", "f*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[8],0>(v164, "futeau", "f******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[6],0>(v165, "fute", "f****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[10],0>(v166, "futaiuri", "f********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[5],0>(v167, "fut", "f***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[7],0>(v168, "fucks", "f*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[6],0>(v169, "fuck", "f****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[12],0>(v170, "fraierilor", "f**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[9],0>(v171, "fraiere", "f*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[12],0>(v172, "fascistule", "f**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[11],0>(v173, "escrocule", "e*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v174, "dumnezăii", "d*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[12],0>(v175, "dobitocule", "d**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[11],0>(v176, "dobitocii", "d*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[10],0>(v177, "dobitoci", "d********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[9],0>(v178, "dobitoc", "d*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[11],0>(v179, "căcănărie", "c*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[11],0>(v180, "căcănăria", "c*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v181, "căcănarul", "c*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v182, "căcănare", "c********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v183, "căcănar", "c*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[11],0>(v184, "căcăcioşi", "c*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v185, "căcăcios", "c********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[12],0>(v186, "căcăcioasă", "c**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v187, "căcăcioase", "c**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v188, "căcaţii", "c*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v189, "căcaţi", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v190, "căcaturile", "c**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v191, "căcatul", "c*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v192, "căcata", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v193, "căcat", "c*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v194, "căcarea", "c*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v195, "căcam", "c*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[10],0>(v196, "cârnăţar", "c********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v197, "curvă", "c*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v198, "curvuştine", "c**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[7],0>(v199, "curvo", "c*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v200, "curviştinele", "c************");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[9],0>(v201, "curveta", "c*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[8],0>(v202, "curvet", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[9],0>(v203, "curvesc", "c*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[9],0>(v204, "curvele", "c*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[8],0>(v205, "curvei", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v206, "curvească", "c*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[7],0>(v207, "curve", "c*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[11],0>(v208, "curvarule", "c*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[10],0>(v209, "curvarul", "c********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[9],0>(v210, "curvari", "c*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[8],0>(v211, "curvar", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[7],0>(v212, "curva", "c*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v213, "curva", "c***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[11],0>(v214, "cururilor", "c*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[10],0>(v215, "cururile", "c********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[8],0>(v216, "cururi", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[9],0>(v217, "curului", "c*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[8],0>(v218, "curu-n", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[6],0>(v219, "curu", "c****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[9],0>(v220, "curista", "c*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[5],0>(v221, "cur", "c***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[6],0>(v222, "cunt", "c****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[9],0>(v223, "cumshot", "c*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[11],0>(v224, "cretinule", "c*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[13],0>(v225, "cretinoiule", "c***********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[9],0>(v226, "cretino", "c*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[15],0>(v227, "cretinizatule", "c*************");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[13],0>(v228, "cretinelule", "c***********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v229, "coițe", "c***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[7],0>(v230, "coiul", "c*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[5],0>(v231, "coi", "c***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[12],0>(v232, "cocalarule", "c**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[8],0>(v233, "coardo", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[10],0>(v234, "coaielor", "c********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[9],0>(v235, "coaiele", "c*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[7],0>(v236, "coaie", "c*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[15],0>(v237, "ciumpalacului", "c*************");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[15],0>(v238, "ciumpalacilor", "c*************");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[13],0>(v239, "cioropinile", "c***********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[11],0>(v240, "cioroiule", "c*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[10],0>(v241, "ciochist", "c********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v242, "cacă", "c****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[6],0>(v243, "cace", "c****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[7],0>(v244, "cacau", "c*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[6],0>(v245, "caca", "c****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[5],0>(v246, "cac", "c***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v247, "băşimea", "b*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[12],0>(v248, "băga-ți-aș", "b********ș");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[11],0>(v249, "băga-ți-ai", "b********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[12],0>(v250, "bulangiule", "b**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[11],0>(v251, "bulangiul", "b*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[10],0>(v252, "bulangiu", "b********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[11],0>(v253, "bulangist", "b*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[14],0>(v254, "bulangioaica", "b************");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[13],0>(v255, "bulangiilor", "b***********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[11],0>(v256, "bulangiii", "b*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[10],0>(v257, "bulangii", "b********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v258, "buci", "b**i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[12],0>(v259, "bozgorului", "b**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[10],0>(v260, "bozgorul", "b********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[12],0>(v261, "bozgoroica", "b**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[13],0>(v262, "bozgoroaice", "b***********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[13],0>(v263, "bozgoroaica", "b***********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[11],0>(v264, "bozgorime", "b*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[9],0>(v265, "bozgori", "b*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[11],0>(v266, "bozgoresc", "b*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[10],0>(v267, "bozgorel", "b********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[10],0>(v268, "bozgorei", "b********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[8],0>(v269, "bozgor", "b******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[12],0>(v270, "bouleanule", "b**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[7],0>(v271, "boule", "b*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[14],0>(v272, "boschetarule", "b************");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v273, "borâţi", "b******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[13],0>(v274, "borfotinele", "b***********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v275, "borfelină", "b*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[11],0>(v276, "borfelina", "b*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[10],0>(v277, "bijboaca", "b********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[10],0>(v278, "belitule", "b********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[8],0>(v279, "belite", "b******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[9],0>(v280, "belit-o", "b*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[7],0>(v281, "belim", "b*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v282, "belești", "b*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v283, "bagabonți", "b*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v284, "bagabonţii", "b**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[12],0>(v285, "bagabontul", "b**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[10],0>(v286, "bagabont", "b********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[12],0>(v287, "bagaboante", "b**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[12],0>(v288, "bagaboanta", "b**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[11],0>(v289, "babuinule", "b*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[9],0>(v290, "babuino", "b*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[12],0>(v291, "avortonule", "a**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[12],0>(v292, "aurolacule", "a**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[9],0>(v293, "ampulea", "a*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v294, "alcooliştilor", "a*************");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[13],0>(v295, "alcoolicule", "a***********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[12],0>(v296, "agaricilor", "a**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[9],0>(v297, "agarici", "a*******");
    std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](&siri::dialogengine::GetProfanityFilter_ro(void)::sProfanityData_ro, (uint64_t)v5, 0x125uLL);
    for (i = 0; i != -1758; i -= 6)
      std::pair<std::string const,std::string>::~pair((uint64_t)&v297[i]);
    __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], &siri::dialogengine::GetProfanityFilter_ro(void)::sProfanityData_ro, &dword_1BF794000);
  }
  *v1 = 0;
  v1[1] = 0;
  v1[2] = 0;
  return std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(v1, siri::dialogengine::GetProfanityFilter_ro(void)::sProfanityData_ro, *(uint64_t *)algn_1EF582E30, 0xAAAAAAAAAAAAAAABLL* ((*(_QWORD *)algn_1EF582E30 - siri::dialogengine::GetProfanityFilter_ro(void)::sProfanityData_ro) >> 4));
}

void sub_1BFB52C9C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + 14016;
  v4 = -14064;
  do
  {
    v3 = std::pair<std::string const,std::string>::~pair(v3) - 48;
    v4 += 48;
  }
  while (v4);
  _Unwind_Resume(a1);
}

_QWORD *siri::dialogengine::GetProfanityFilter_pt(siri::dialogengine *this)
{
  _QWORD *v1;
  unsigned __int8 v2;
  uint64_t i;
  _QWORD v5[6];
  _QWORD v6[6];
  _QWORD v7[6];
  _QWORD v8[6];
  _QWORD v9[6];
  _QWORD v10[6];
  _QWORD v11[6];
  _QWORD v12[6];
  _QWORD v13[6];
  _QWORD v14[6];
  _QWORD v15[6];
  _QWORD v16[6];
  _QWORD v17[6];
  _QWORD v18[6];
  _QWORD v19[6];
  _QWORD v20[6];
  _QWORD v21[6];
  _QWORD v22[6];
  _QWORD v23[6];
  _QWORD v24[6];
  _QWORD v25[6];
  _QWORD v26[6];
  _QWORD v27[6];
  _QWORD v28[6];
  _QWORD v29[6];
  _QWORD v30[6];
  _QWORD v31[6];
  _QWORD v32[6];
  _QWORD v33[6];
  _QWORD v34[6];
  _QWORD v35[6];
  _QWORD v36[6];
  _QWORD v37[6];
  _QWORD v38[6];
  _QWORD v39[6];
  _QWORD v40[6];
  _QWORD v41[6];
  _QWORD v42[6];
  _QWORD v43[6];
  _QWORD v44[6];
  _QWORD v45[6];
  _QWORD v46[6];
  _QWORD v47[6];
  _QWORD v48[6];
  _QWORD v49[6];
  _QWORD v50[6];
  _QWORD v51[6];
  _QWORD v52[6];
  _QWORD v53[6];
  _QWORD v54[6];
  _QWORD v55[6];
  _QWORD v56[6];
  _QWORD v57[6];
  _QWORD v58[6];
  _QWORD v59[6];
  _QWORD v60[6];
  _QWORD v61[6];
  _QWORD v62[6];
  _QWORD v63[6];
  _QWORD v64[6];
  _QWORD v65[6];
  _QWORD v66[6];
  _QWORD v67[6];
  _QWORD v68[6];
  _QWORD v69[6];
  _QWORD v70[6];
  _QWORD v71[6];
  _QWORD v72[6];
  _QWORD v73[6];
  _QWORD v74[6];
  _QWORD v75[6];
  _QWORD v76[6];
  _QWORD v77[6];
  _QWORD v78[6];
  _QWORD v79[6];
  _QWORD v80[6];
  _QWORD v81[6];
  _QWORD v82[6];
  _QWORD v83[6];
  _QWORD v84[6];
  _QWORD v85[6];
  _QWORD v86[6];
  _QWORD v87[6];
  _QWORD v88[6];
  _QWORD v89[6];
  _QWORD v90[6];
  _QWORD v91[6];
  _QWORD v92[6];
  _QWORD v93[6];
  _QWORD v94[6];
  _QWORD v95[6];
  _QWORD v96[6];
  _QWORD v97[6];
  _QWORD v98[6];
  _QWORD v99[6];
  _QWORD v100[6];
  _QWORD v101[6];
  _QWORD v102[6];
  _QWORD v103[6];
  _QWORD v104[6];
  _QWORD v105[6];
  _QWORD v106[6];
  _QWORD v107[6];
  _QWORD v108[6];
  _QWORD v109[6];
  _QWORD v110[6];
  _QWORD v111[6];
  _QWORD v112[6];
  _QWORD v113[6];
  _QWORD v114[6];
  _QWORD v115[6];
  _QWORD v116[6];
  _QWORD v117[6];
  _QWORD v118[6];
  _QWORD v119[6];
  _QWORD v120[6];
  _QWORD v121[6];
  _QWORD v122[6];
  _QWORD v123[6];
  _QWORD v124[7];

  v1 = (_QWORD *)MEMORY[0x1E0C80A78](this);
  v124[6] = *MEMORY[0x1E0C80C00];
  if ((v2 & 1) == 0
  {
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v5, "xoxotão", "x*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v6, "xoxotinha", "x*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v7, "xoxota", "x****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v8, "xotão", "x***o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v9, "xotinha", "x*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v10, "xota", "x**a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v11, "xochota", "x*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v12, "xibiu", "x***u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v13, "xexeca", "x****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v14, "xerereca", "x******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v15, "xeca", "x**a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v16, "xavasca", "x*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v17, "xaninha", "x*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v18, "xana", "x**a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v19, "toba", "t**a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v20, "tetão", "t***o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v21, "tetinha", "t*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v22, "teta", "t**a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v23, "tesão", "t***o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v24, "tesudo", "t****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v25, "tesuda", "t****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v26, "tesao", "t***o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v27, "suruba", "s****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v28, "siririca", "s******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v29, "putona", "p****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v30, "puto", "p**o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v31, "putana", "p****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v32, "putamerda", "p*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v33, "puta", "p**a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v34, "punhetão", "p******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v35, "punhetas", "p******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v36, "punhetao", "p******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v37, "punheta", "p*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v38, "prexereca", "p*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v39, "prexeca", "p*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v40, "precheca", "p******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v41, "pixirica", "p******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v42, "piroco", "p****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v43, "picão", "p***o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v44, "picao", "p***o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v45, "pexereca", "p******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v46, "olhota", "o****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v47, "merdoso", "m*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v48, "merdas", "m****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v49, "merda", "m***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v50, "machorra", "m******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v51, "iscroto", "i*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v52, "iscrota", "i*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v53, "furnicar", "f******r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v54, "furnica", "f*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(v55, "fudeção", "f*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v56, "fudendo", "f*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v57, "fudecao", "f*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v58, "fornica", "f*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v59, "fodida", "f****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v60, "foder", "f***r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v61, "fodelança", "f*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v62, "fodedor", "f*****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v63, "fode", "f**e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v64, "fodao", "f***o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(v65, "felação", "f*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v66, "felacao", "f*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v67, "esporrear", "e*******r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v68, "esporrar", "e******r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v69, "esporrado", "e*******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v70, "esporrada", "e*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v71, "escrota", "e*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v72, "enrabar", "e*****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v73, "enrabada", "e******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v74, "desgraçado", "d********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v75, "desgraçada", "d********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v76, "cuzão", "c***o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v77, "cuzudo", "c****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v78, "cuzuda", "c****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v79, "cuzinho", "c*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v80, "cuzao", "c***o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v81, "currar", "c****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v82, "currada", "c*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v83, "curalho", "c*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v84, "culhões", "c*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v85, "culhão", "c****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v86, "culhao", "c****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v87, "cu", "c*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v88, "colhão", "c****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v89, "ciririca", "c******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v90, "chota", "c***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v91, "chochota", "c******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v92, "chibumbo", "c******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v93, "chibumba", "c******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v94, "chereca", "c*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v95, "checheca", "c******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v96, "chana", "c***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v97, "caralhão", "c******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v98, "caralhudo", "c*******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v99, "caralho", "c*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v100, "cagão", "c***o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v101, "cagalhão", "c******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v102, "cagado", "c****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(v103, "cabação", "c*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v104, "cabaçudo", "c******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v105, "cabaçuda", "c******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v106, "cabaço", "c****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v107, "buça", "b**a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v108, "busseta", "b*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v109, "bucetão", "b*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v110, "bucetinha", "b*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v111, "buceta", "b****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v112, "brioco", "b****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v113, "bosteiro", "b******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v114, "bosta", "b***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v115, "bolcat", "b****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v116, "bolagato", "b******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v117, "boiola", "b****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v118, "bixa", "b**a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v119, "bimbar", "b****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v120, "bimbada", "b*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v121, "bilau", "b***u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v122, "bicha", "b***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v123, "bastardo", "b******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v124, "baitola", "b*****a");
    std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](&siri::dialogengine::GetProfanityFilter_pt(void)::sProfanityData_pt, (uint64_t)v5, 0x78uLL);
    for (i = 0; i != -720; i -= 6)
      std::pair<std::string const,std::string>::~pair((uint64_t)&v124[i]);
    __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], &siri::dialogengine::GetProfanityFilter_pt(void)::sProfanityData_pt, &dword_1BF794000);
  }
  *v1 = 0;
  v1[1] = 0;
  v1[2] = 0;
  return std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(v1, siri::dialogengine::GetProfanityFilter_pt(void)::sProfanityData_pt, *(uint64_t *)algn_1EF582E50, 0xAAAAAAAAAAAAAAABLL* ((*(_QWORD *)algn_1EF582E50 - siri::dialogengine::GetProfanityFilter_pt(void)::sProfanityData_pt) >> 4));
}

void sub_1BFB53CC4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + 5712;
  v4 = -5760;
  do
  {
    v3 = std::pair<std::string const,std::string>::~pair(v3) - 48;
    v4 += 48;
  }
  while (v4);
  _Unwind_Resume(a1);
}

_QWORD *siri::dialogengine::GetProfanityFilter_uk(siri::dialogengine *this)
{
  _QWORD *v1;
  unsigned __int8 v2;
  uint64_t i;
  _QWORD v5[6];
  _QWORD v6[6];
  _QWORD v7[6];
  _QWORD v8[6];
  _QWORD v9[6];
  _QWORD v10[6];
  _QWORD v11[6];
  _QWORD v12[6];
  _QWORD v13[6];
  _QWORD v14[6];
  _QWORD v15[6];
  _QWORD v16[6];
  _QWORD v17[6];
  _QWORD v18[6];
  _QWORD v19[6];
  _QWORD v20[6];
  _QWORD v21[6];
  _QWORD v22[6];
  _QWORD v23[6];
  _QWORD v24[6];
  _QWORD v25[6];
  _QWORD v26[6];
  _QWORD v27[6];
  _QWORD v28[6];
  _QWORD v29[6];
  _QWORD v30[6];
  _QWORD v31[6];
  _QWORD v32[6];
  _QWORD v33[6];
  _QWORD v34[6];
  _QWORD v35[6];
  _QWORD v36[6];
  _QWORD v37[6];
  _QWORD v38[6];
  _QWORD v39[6];
  _QWORD v40[6];
  _QWORD v41[6];
  _QWORD v42[6];
  _QWORD v43[6];
  _QWORD v44[6];
  _QWORD v45[6];
  _QWORD v46[6];
  _QWORD v47[6];
  _QWORD v48[6];
  _QWORD v49[6];
  _QWORD v50[6];
  _QWORD v51[6];
  _QWORD v52[6];
  _QWORD v53[6];
  _QWORD v54[6];
  _QWORD v55[6];
  _QWORD v56[6];
  _QWORD v57[6];
  _QWORD v58[6];
  _QWORD v59[6];
  _QWORD v60[6];
  _QWORD v61[6];
  _QWORD v62[6];
  _QWORD v63[6];
  _QWORD v64[6];
  _QWORD v65[6];
  _QWORD v66[6];
  _QWORD v67[6];
  _QWORD v68[6];
  _QWORD v69[6];
  _QWORD v70[6];
  _QWORD v71[6];
  _QWORD v72[6];
  _QWORD v73[6];
  _QWORD v74[6];
  _QWORD v75[6];
  _QWORD v76[6];
  _QWORD v77[6];
  _QWORD v78[6];
  _QWORD v79[6];
  _QWORD v80[6];
  _QWORD v81[6];
  _QWORD v82[6];
  _QWORD v83[6];
  _QWORD v84[6];
  _QWORD v85[6];
  _QWORD v86[6];
  _QWORD v87[6];
  _QWORD v88[6];
  _QWORD v89[6];
  _QWORD v90[6];
  _QWORD v91[6];
  _QWORD v92[6];
  _QWORD v93[6];
  _QWORD v94[6];
  _QWORD v95[6];
  _QWORD v96[6];
  _QWORD v97[6];
  _QWORD v98[6];
  _QWORD v99[6];
  _QWORD v100[6];
  _QWORD v101[6];
  _QWORD v102[6];
  _QWORD v103[6];
  _QWORD v104[6];
  _QWORD v105[6];
  _QWORD v106[6];
  _QWORD v107[6];
  _QWORD v108[6];
  _QWORD v109[6];
  _QWORD v110[6];
  _QWORD v111[6];
  _QWORD v112[6];
  _QWORD v113[6];
  _QWORD v114[6];
  _QWORD v115[6];
  _QWORD v116[6];
  _QWORD v117[6];
  _QWORD v118[6];
  _QWORD v119[6];
  _QWORD v120[6];
  _QWORD v121[6];
  _QWORD v122[6];
  _QWORD v123[6];
  _QWORD v124[6];
  _QWORD v125[6];
  _QWORD v126[6];
  _QWORD v127[6];
  _QWORD v128[6];
  _QWORD v129[6];
  _QWORD v130[6];
  _QWORD v131[6];
  _QWORD v132[6];
  _QWORD v133[6];
  _QWORD v134[6];
  _QWORD v135[6];
  _QWORD v136[6];
  _QWORD v137[6];
  _QWORD v138[6];
  _QWORD v139[6];
  _QWORD v140[6];
  _QWORD v141[6];
  _QWORD v142[6];
  _QWORD v143[6];
  _QWORD v144[6];
  _QWORD v145[6];
  _QWORD v146[6];
  _QWORD v147[6];
  _QWORD v148[6];
  _QWORD v149[6];
  _QWORD v150[6];
  _QWORD v151[6];
  _QWORD v152[6];
  _QWORD v153[6];
  _QWORD v154[6];
  _QWORD v155[6];
  _QWORD v156[6];
  _QWORD v157[6];
  _QWORD v158[6];
  _QWORD v159[6];
  _QWORD v160[6];
  _QWORD v161[6];
  _QWORD v162[6];
  _QWORD v163[6];
  _QWORD v164[6];
  _QWORD v165[6];
  _QWORD v166[6];
  _QWORD v167[6];
  _QWORD v168[6];
  _QWORD v169[6];
  _QWORD v170[6];
  _QWORD v171[6];
  _QWORD v172[6];
  _QWORD v173[6];
  _QWORD v174[6];
  _QWORD v175[6];
  _QWORD v176[6];
  _QWORD v177[6];
  _QWORD v178[6];
  _QWORD v179[6];
  _QWORD v180[6];
  _QWORD v181[6];
  _QWORD v182[6];
  _QWORD v183[6];
  _QWORD v184[6];
  _QWORD v185[6];
  _QWORD v186[6];
  _QWORD v187[6];
  _QWORD v188[6];
  _QWORD v189[6];
  _QWORD v190[6];
  _QWORD v191[6];
  _QWORD v192[6];
  _QWORD v193[6];
  _QWORD v194[6];
  _QWORD v195[6];
  _QWORD v196[6];
  _QWORD v197[6];
  _QWORD v198[6];
  _QWORD v199[6];
  _QWORD v200[6];
  _QWORD v201[6];
  _QWORD v202[6];
  _QWORD v203[6];
  _QWORD v204[6];
  _QWORD v205[6];
  _QWORD v206[6];
  _QWORD v207[6];
  _QWORD v208[6];
  _QWORD v209[6];
  _QWORD v210[6];
  _QWORD v211[6];
  _QWORD v212[6];
  _QWORD v213[6];
  _QWORD v214[6];
  _QWORD v215[6];
  _QWORD v216[6];
  _QWORD v217[6];
  _QWORD v218[6];
  _QWORD v219[6];
  _QWORD v220[6];
  _QWORD v221[6];
  _QWORD v222[6];
  _QWORD v223[6];
  _QWORD v224[6];
  _QWORD v225[6];
  _QWORD v226[6];
  _QWORD v227[6];
  _QWORD v228[6];
  _QWORD v229[6];
  _QWORD v230[6];
  _QWORD v231[6];
  _QWORD v232[6];
  _QWORD v233[6];
  _QWORD v234[6];
  _QWORD v235[6];
  _QWORD v236[6];
  _QWORD v237[6];
  _QWORD v238[6];
  _QWORD v239[6];
  _QWORD v240[6];
  _QWORD v241[6];
  _QWORD v242[6];
  _QWORD v243[6];
  _QWORD v244[6];
  _QWORD v245[6];
  _QWORD v246[6];
  _QWORD v247[6];
  _QWORD v248[6];
  _QWORD v249[6];
  _QWORD v250[6];
  _QWORD v251[6];
  _QWORD v252[6];
  _QWORD v253[6];
  _QWORD v254[6];
  _QWORD v255[6];
  _QWORD v256[6];
  _QWORD v257[6];
  _QWORD v258[6];
  _QWORD v259[6];
  _QWORD v260[6];
  _QWORD v261[6];
  _QWORD v262[6];
  _QWORD v263[6];
  _QWORD v264[6];
  _QWORD v265[6];
  _QWORD v266[6];
  _QWORD v267[6];
  _QWORD v268[6];
  _QWORD v269[6];
  _QWORD v270[6];
  _QWORD v271[6];
  _QWORD v272[6];
  _QWORD v273[6];
  _QWORD v274[6];
  _QWORD v275[6];
  _QWORD v276[6];
  _QWORD v277[6];
  _QWORD v278[6];
  _QWORD v279[6];
  _QWORD v280[6];
  _QWORD v281[6];
  _QWORD v282[6];
  _QWORD v283[6];
  _QWORD v284[6];
  _QWORD v285[6];
  _QWORD v286[6];
  _QWORD v287[6];
  _QWORD v288[6];
  _QWORD v289[6];
  _QWORD v290[6];
  _QWORD v291[6];
  _QWORD v292[6];
  _QWORD v293[6];
  _QWORD v294[6];
  _QWORD v295[6];
  _QWORD v296[6];
  _QWORD v297[6];
  _QWORD v298[6];
  _QWORD v299[6];
  _QWORD v300[6];
  _QWORD v301[6];
  _QWORD v302[6];
  _QWORD v303[6];
  _QWORD v304[6];
  _QWORD v305[6];
  _QWORD v306[6];
  _QWORD v307[6];
  _QWORD v308[6];
  _QWORD v309[6];
  _QWORD v310[6];
  _QWORD v311[6];
  _QWORD v312[6];
  _QWORD v313[6];
  _QWORD v314[6];
  _QWORD v315[6];
  _QWORD v316[6];
  _QWORD v317[6];
  _QWORD v318[6];
  _QWORD v319[6];
  _QWORD v320[6];
  _QWORD v321[6];
  _QWORD v322[6];
  _QWORD v323[6];
  _QWORD v324[6];
  _QWORD v325[6];
  _QWORD v326[6];
  _QWORD v327[6];
  _QWORD v328[6];
  _QWORD v329[6];
  _QWORD v330[6];
  _QWORD v331[6];
  _QWORD v332[6];
  _QWORD v333[6];
  _QWORD v334[6];
  _QWORD v335[6];
  _QWORD v336[6];
  _QWORD v337[6];
  _QWORD v338[6];
  _QWORD v339[6];
  _QWORD v340[6];
  _QWORD v341[6];
  _QWORD v342[6];
  _QWORD v343[6];
  _QWORD v344[6];
  _QWORD v345[6];
  _QWORD v346[6];
  _QWORD v347[6];
  _QWORD v348[6];
  _QWORD v349[6];
  _QWORD v350[6];
  _QWORD v351[6];
  _QWORD v352[6];
  _QWORD v353[6];
  _QWORD v354[6];
  _QWORD v355[6];
  _QWORD v356[6];
  _QWORD v357[6];
  _QWORD v358[6];
  _QWORD v359[6];
  _QWORD v360[6];
  _QWORD v361[6];
  _QWORD v362[6];
  _QWORD v363[6];
  _QWORD v364[6];
  _QWORD v365[6];
  _QWORD v366[6];
  _QWORD v367[6];
  _QWORD v368[6];
  _QWORD v369[6];
  _QWORD v370[6];
  _QWORD v371[6];
  _QWORD v372[6];
  _QWORD v373[6];
  _QWORD v374[6];
  _QWORD v375[6];
  _QWORD v376[6];
  _QWORD v377[6];
  _QWORD v378[6];
  _QWORD v379[6];
  _QWORD v380[6];
  _QWORD v381[6];
  _QWORD v382[6];
  _QWORD v383[6];
  _QWORD v384[6];
  _QWORD v385[6];
  _QWORD v386[6];
  _QWORD v387[6];
  _QWORD v388[6];
  _QWORD v389[6];
  _QWORD v390[6];
  _QWORD v391[6];
  _QWORD v392[6];
  _QWORD v393[6];
  _QWORD v394[6];
  _QWORD v395[6];
  _QWORD v396[6];
  _QWORD v397[6];
  _QWORD v398[6];
  _QWORD v399[6];
  _QWORD v400[6];
  _QWORD v401[6];
  _QWORD v402[6];
  _QWORD v403[6];
  _QWORD v404[6];
  _QWORD v405[6];
  _QWORD v406[6];
  _QWORD v407[6];
  _QWORD v408[6];
  _QWORD v409[6];
  _QWORD v410[6];
  _QWORD v411[6];
  _QWORD v412[6];
  _QWORD v413[6];
  _QWORD v414[6];
  _QWORD v415[6];
  _QWORD v416[6];
  _QWORD v417[6];
  _QWORD v418[6];
  _QWORD v419[6];
  _QWORD v420[6];
  _QWORD v421[6];
  _QWORD v422[6];
  _QWORD v423[6];
  _QWORD v424[6];
  _QWORD v425[6];
  _QWORD v426[6];
  _QWORD v427[6];
  _QWORD v428[6];
  _QWORD v429[6];
  _QWORD v430[6];
  _QWORD v431[6];
  _QWORD v432[6];
  _QWORD v433[6];
  _QWORD v434[6];
  _QWORD v435[6];
  _QWORD v436[6];
  _QWORD v437[6];
  _QWORD v438[6];
  _QWORD v439[6];
  _QWORD v440[6];
  _QWORD v441[6];
  _QWORD v442[6];
  _QWORD v443[6];
  _QWORD v444[6];
  _QWORD v445[6];
  _QWORD v446[6];
  _QWORD v447[6];
  _QWORD v448[6];
  _QWORD v449[6];
  _QWORD v450[6];
  _QWORD v451[6];
  _QWORD v452[6];
  _QWORD v453[6];
  _QWORD v454[6];
  _QWORD v455[6];
  _QWORD v456[6];
  _QWORD v457[6];
  _QWORD v458[6];
  _QWORD v459[6];
  _QWORD v460[6];
  _QWORD v461[6];
  _QWORD v462[6];
  _QWORD v463[6];
  _QWORD v464[6];
  _QWORD v465[6];
  _QWORD v466[6];
  _QWORD v467[6];
  _QWORD v468[6];
  _QWORD v469[6];
  _QWORD v470[6];
  _QWORD v471[6];
  _QWORD v472[6];
  _QWORD v473[6];
  _QWORD v474[6];
  _QWORD v475[6];
  _QWORD v476[6];
  _QWORD v477[6];
  _QWORD v478[6];
  _QWORD v479[6];
  _QWORD v480[6];
  _QWORD v481[6];
  _QWORD v482[6];
  _QWORD v483[6];
  _QWORD v484[6];
  _QWORD v485[6];
  _QWORD v486[6];
  _QWORD v487[6];
  _QWORD v488[6];
  _QWORD v489[6];
  _QWORD v490[6];
  _QWORD v491[6];
  _QWORD v492[6];
  _QWORD v493[6];
  _QWORD v494[6];
  _QWORD v495[6];
  _QWORD v496[6];
  _QWORD v497[6];
  _QWORD v498[6];
  _QWORD v499[6];
  _QWORD v500[6];
  _QWORD v501[6];
  _QWORD v502[6];
  _QWORD v503[6];
  _QWORD v504[6];
  _QWORD v505[6];
  _QWORD v506[6];
  _QWORD v507[6];
  _QWORD v508[6];
  _QWORD v509[6];
  _QWORD v510[6];
  _QWORD v511[6];
  _QWORD v512[6];
  _QWORD v513[6];
  _QWORD v514[6];
  _QWORD v515[6];
  _QWORD v516[6];
  _QWORD v517[6];
  _QWORD v518[6];
  _QWORD v519[6];
  _QWORD v520[6];
  _QWORD v521[6];
  _QWORD v522[6];
  _QWORD v523[6];
  _QWORD v524[6];
  _QWORD v525[6];
  _QWORD v526[6];
  _QWORD v527[6];
  _QWORD v528[6];
  _QWORD v529[6];
  _QWORD v530[6];
  _QWORD v531[6];
  _QWORD v532[6];
  _QWORD v533[6];
  _QWORD v534[6];
  _QWORD v535[6];
  _QWORD v536[6];
  _QWORD v537[6];
  _QWORD v538[6];
  _QWORD v539[6];
  _QWORD v540[6];
  _QWORD v541[6];
  _QWORD v542[6];
  _QWORD v543[6];
  _QWORD v544[6];
  _QWORD v545[6];
  _QWORD v546[6];
  _QWORD v547[6];
  _QWORD v548[6];
  _QWORD v549[6];
  _QWORD v550[6];
  _QWORD v551[6];
  _QWORD v552[6];
  _QWORD v553[6];
  _QWORD v554[6];
  _QWORD v555[6];
  _QWORD v556[6];
  _QWORD v557[6];
  _QWORD v558[6];
  _QWORD v559[6];
  _QWORD v560[6];
  _QWORD v561[6];
  _QWORD v562[6];
  _QWORD v563[6];
  _QWORD v564[6];
  _QWORD v565[6];
  _QWORD v566[6];
  _QWORD v567[6];
  _QWORD v568[6];
  _QWORD v569[6];
  _QWORD v570[6];
  _QWORD v571[6];
  _QWORD v572[6];
  _QWORD v573[6];
  _QWORD v574[6];
  _QWORD v575[6];
  _QWORD v576[6];
  _QWORD v577[6];
  _QWORD v578[6];
  _QWORD v579[6];
  _QWORD v580[6];
  _QWORD v581[6];
  _QWORD v582[6];
  _QWORD v583[6];
  _QWORD v584[6];
  _QWORD v585[6];
  _QWORD v586[6];
  _QWORD v587[6];
  _QWORD v588[6];
  _QWORD v589[6];
  _QWORD v590[6];
  _QWORD v591[6];
  _QWORD v592[6];
  _QWORD v593[6];
  _QWORD v594[6];
  _QWORD v595[6];
  _QWORD v596[6];
  _QWORD v597[6];
  _QWORD v598[6];
  _QWORD v599[6];
  _QWORD v600[6];
  _QWORD v601[6];
  _QWORD v602[6];
  _QWORD v603[6];
  _QWORD v604[6];
  _QWORD v605[6];
  _QWORD v606[6];
  _QWORD v607[6];
  _QWORD v608[6];
  _QWORD v609[6];
  _QWORD v610[6];
  _QWORD v611[6];
  _QWORD v612[6];
  _QWORD v613[6];
  _QWORD v614[6];
  _QWORD v615[6];
  _QWORD v616[6];
  _QWORD v617[6];
  _QWORD v618[6];
  _QWORD v619[6];
  _QWORD v620[6];
  _QWORD v621[6];
  _QWORD v622[6];
  _QWORD v623[6];
  _QWORD v624[6];
  _QWORD v625[6];
  _QWORD v626[6];
  _QWORD v627[6];
  _QWORD v628[6];
  _QWORD v629[6];
  _QWORD v630[6];
  _QWORD v631[6];
  _QWORD v632[6];
  _QWORD v633[6];
  _QWORD v634[6];
  _QWORD v635[6];
  _QWORD v636[6];
  _QWORD v637[6];
  _QWORD v638[6];
  _QWORD v639[6];
  _QWORD v640[6];
  _QWORD v641[6];
  _QWORD v642[6];
  _QWORD v643[6];
  _QWORD v644[6];
  _QWORD v645[6];
  _QWORD v646[6];
  _QWORD v647[6];
  _QWORD v648[6];
  _QWORD v649[6];
  _QWORD v650[6];
  _QWORD v651[6];
  _QWORD v652[6];
  _QWORD v653[6];
  _QWORD v654[6];
  _QWORD v655[6];
  _QWORD v656[6];
  _QWORD v657[6];
  _QWORD v658[6];
  _QWORD v659[6];
  _QWORD v660[6];
  _QWORD v661[6];
  _QWORD v662[6];
  _QWORD v663[6];
  _QWORD v664[6];
  _QWORD v665[6];
  _QWORD v666[6];
  _QWORD v667[6];
  _QWORD v668[6];
  _QWORD v669[6];
  _QWORD v670[6];
  _QWORD v671[6];
  _QWORD v672[6];
  _QWORD v673[6];
  _QWORD v674[6];
  _QWORD v675[6];
  _QWORD v676[6];
  _QWORD v677[6];
  _QWORD v678[6];
  _QWORD v679[6];
  _QWORD v680[6];
  _QWORD v681[6];
  _QWORD v682[6];
  _QWORD v683[6];
  _QWORD v684[6];
  _QWORD v685[6];
  _QWORD v686[6];
  _QWORD v687[6];
  _QWORD v688[6];
  _QWORD v689[6];
  _QWORD v690[6];
  _QWORD v691[6];
  _QWORD v692[6];
  _QWORD v693[6];
  _QWORD v694[6];
  _QWORD v695[6];
  _QWORD v696[6];
  _QWORD v697[6];
  _QWORD v698[6];
  _QWORD v699[6];
  _QWORD v700[6];
  _QWORD v701[6];
  _QWORD v702[6];
  _QWORD v703[6];
  _QWORD v704[6];
  _QWORD v705[6];
  _QWORD v706[6];
  _QWORD v707[6];
  _QWORD v708[6];
  _QWORD v709[6];
  _QWORD v710[6];
  _QWORD v711[6];
  _QWORD v712[6];
  _QWORD v713[6];
  _QWORD v714[6];
  _QWORD v715[6];
  _QWORD v716[6];
  _QWORD v717[6];
  _QWORD v718[6];
  _QWORD v719[6];
  _QWORD v720[6];
  _QWORD v721[6];
  _QWORD v722[6];
  _QWORD v723[6];
  _QWORD v724[6];
  _QWORD v725[6];
  _QWORD v726[6];
  _QWORD v727[6];
  _QWORD v728[6];
  _QWORD v729[6];
  _QWORD v730[6];
  _QWORD v731[6];
  _QWORD v732[6];
  _QWORD v733[6];
  _QWORD v734[6];
  _QWORD v735[6];
  _QWORD v736[6];
  _QWORD v737[6];
  _QWORD v738[6];
  _QWORD v739[6];
  _QWORD v740[6];
  _QWORD v741[6];
  _QWORD v742[6];
  _QWORD v743[6];
  _QWORD v744[6];
  _QWORD v745[6];
  _QWORD v746[6];
  _QWORD v747[6];
  _QWORD v748[6];
  _QWORD v749[6];
  _QWORD v750[6];
  _QWORD v751[6];
  _QWORD v752[6];
  _QWORD v753[6];
  _QWORD v754[6];
  _QWORD v755[6];
  _QWORD v756[6];
  _QWORD v757[6];
  _QWORD v758[6];
  _QWORD v759[6];
  _QWORD v760[6];
  _QWORD v761[6];
  _QWORD v762[6];
  _QWORD v763[6];
  _QWORD v764[6];
  _QWORD v765[6];
  _QWORD v766[6];
  _QWORD v767[6];
  _QWORD v768[6];
  _QWORD v769[6];
  _QWORD v770[6];
  _QWORD v771[6];
  _QWORD v772[6];
  _QWORD v773[6];
  _QWORD v774[6];
  _QWORD v775[6];
  _QWORD v776[6];
  _QWORD v777[6];
  _QWORD v778[6];
  _QWORD v779[6];
  _QWORD v780[6];
  _QWORD v781[6];
  _QWORD v782[6];
  _QWORD v783[6];
  _QWORD v784[6];
  _QWORD v785[6];
  _QWORD v786[6];
  _QWORD v787[6];
  _QWORD v788[6];
  _QWORD v789[6];
  _QWORD v790[6];
  _QWORD v791[6];
  _QWORD v792[6];
  _QWORD v793[6];
  _QWORD v794[6];
  _QWORD v795[6];
  _QWORD v796[6];
  _QWORD v797[6];
  _QWORD v798[6];
  _QWORD v799[6];
  _QWORD v800[6];
  _QWORD v801[6];
  _QWORD v802[6];
  _QWORD v803[6];
  _QWORD v804[6];
  _QWORD v805[6];
  _QWORD v806[6];
  _QWORD v807[6];
  _QWORD v808[6];
  _QWORD v809[6];
  _QWORD v810[6];
  _QWORD v811[6];
  _QWORD v812[6];
  _QWORD v813[6];
  _QWORD v814[6];
  _QWORD v815[6];
  _QWORD v816[6];
  _QWORD v817[6];
  _QWORD v818[6];
  _QWORD v819[6];
  _QWORD v820[6];
  _QWORD v821[6];
  _QWORD v822[6];
  _QWORD v823[6];
  _QWORD v824[6];
  _QWORD v825[6];
  _QWORD v826[6];
  _QWORD v827[6];
  _QWORD v828[6];
  _QWORD v829[6];
  _QWORD v830[6];
  _QWORD v831[6];
  _QWORD v832[6];
  _QWORD v833[6];
  _QWORD v834[6];
  _QWORD v835[6];
  _QWORD v836[6];
  _QWORD v837[6];
  _QWORD v838[6];
  _QWORD v839[6];
  _QWORD v840[6];
  _QWORD v841[6];
  _QWORD v842[6];
  _QWORD v843[6];
  _QWORD v844[6];
  _QWORD v845[6];
  _QWORD v846[6];
  _QWORD v847[6];
  _QWORD v848[6];
  _QWORD v849[6];
  _QWORD v850[6];
  _QWORD v851[6];
  _QWORD v852[6];
  _QWORD v853[6];
  _QWORD v854[6];
  _QWORD v855[6];
  _QWORD v856[6];
  _QWORD v857[6];
  _QWORD v858[6];
  _QWORD v859[6];
  _QWORD v860[6];
  _QWORD v861[6];
  _QWORD v862[6];
  _QWORD v863[6];
  _QWORD v864[6];
  _QWORD v865[6];
  _QWORD v866[6];
  _QWORD v867[6];
  _QWORD v868[6];
  _QWORD v869[6];
  _QWORD v870[6];
  _QWORD v871[6];
  _QWORD v872[6];
  _QWORD v873[6];
  _QWORD v874[6];
  _QWORD v875[6];
  _QWORD v876[6];
  _QWORD v877[6];
  _QWORD v878[6];
  _QWORD v879[6];
  _QWORD v880[6];
  _QWORD v881[6];
  _QWORD v882[6];
  _QWORD v883[6];
  _QWORD v884[6];
  _QWORD v885[6];
  _QWORD v886[6];
  _QWORD v887[6];
  _QWORD v888[6];
  _QWORD v889[6];
  _QWORD v890[6];
  _QWORD v891[6];
  _QWORD v892[6];
  _QWORD v893[6];
  _QWORD v894[6];
  _QWORD v895[6];
  _QWORD v896[6];
  _QWORD v897[6];
  _QWORD v898[6];
  _QWORD v899[6];
  _QWORD v900[6];
  _QWORD v901[6];
  _QWORD v902[6];
  _QWORD v903[6];
  _QWORD v904[6];
  _QWORD v905[6];
  _QWORD v906[6];
  _QWORD v907[6];
  _QWORD v908[6];
  _QWORD v909[6];
  _QWORD v910[6];
  _QWORD v911[6];
  _QWORD v912[6];
  _QWORD v913[6];
  _QWORD v914[6];
  _QWORD v915[6];
  _QWORD v916[6];
  _QWORD v917[6];
  _QWORD v918[6];
  _QWORD v919[6];
  _QWORD v920[6];
  _QWORD v921[6];
  _QWORD v922[6];
  _QWORD v923[6];
  _QWORD v924[6];
  _QWORD v925[6];
  _QWORD v926[6];
  _QWORD v927[6];
  _QWORD v928[6];
  _QWORD v929[6];
  _QWORD v930[6];
  _QWORD v931[6];
  _QWORD v932[6];
  _QWORD v933[6];
  _QWORD v934[6];
  _QWORD v935[6];
  _QWORD v936[6];
  _QWORD v937[6];
  _QWORD v938[6];
  _QWORD v939[6];
  _QWORD v940[6];
  _QWORD v941[6];
  _QWORD v942[6];
  _QWORD v943[6];
  _QWORD v944[6];
  _QWORD v945[6];
  _QWORD v946[6];
  _QWORD v947[6];
  _QWORD v948[6];
  _QWORD v949[6];
  _QWORD v950[6];
  _QWORD v951[6];
  _QWORD v952[6];
  _QWORD v953[6];
  _QWORD v954[6];
  _QWORD v955[6];
  _QWORD v956[6];
  _QWORD v957[6];
  _QWORD v958[6];
  _QWORD v959[6];
  _QWORD v960[6];
  _QWORD v961[6];
  _QWORD v962[6];
  _QWORD v963[6];
  _QWORD v964[6];
  _QWORD v965[6];
  _QWORD v966[6];
  _QWORD v967[6];
  _QWORD v968[6];
  _QWORD v969[6];
  _QWORD v970[6];
  _QWORD v971[6];
  _QWORD v972[6];
  _QWORD v973[6];
  _QWORD v974[6];
  _QWORD v975[6];
  _QWORD v976[6];
  _QWORD v977[6];
  _QWORD v978[6];
  _QWORD v979[6];
  _QWORD v980[6];
  _QWORD v981[6];
  _QWORD v982[6];
  _QWORD v983[6];
  _QWORD v984[6];
  _QWORD v985[6];
  _QWORD v986[6];
  _QWORD v987[6];
  _QWORD v988[6];
  _QWORD v989[6];
  _QWORD v990[6];
  _QWORD v991[6];
  _QWORD v992[6];
  _QWORD v993[6];
  _QWORD v994[6];
  _QWORD v995[6];
  _QWORD v996[6];
  _QWORD v997[6];
  _QWORD v998[6];
  _QWORD v999[6];
  _QWORD v1000[6];
  _QWORD v1001[6];
  _QWORD v1002[6];
  _QWORD v1003[6];
  _QWORD v1004[6];
  _QWORD v1005[6];
  _QWORD v1006[6];
  _QWORD v1007[6];
  _QWORD v1008[6];
  _QWORD v1009[6];
  _QWORD v1010[6];
  _QWORD v1011[6];
  _QWORD v1012[6];
  _QWORD v1013[6];
  _QWORD v1014[6];
  _QWORD v1015[6];
  _QWORD v1016[6];
  _QWORD v1017[6];
  _QWORD v1018[6];
  _QWORD v1019[6];
  _QWORD v1020[6];
  _QWORD v1021[6];
  _QWORD v1022[6];
  _QWORD v1023[6];
  _QWORD v1024[6];
  _QWORD v1025[6];
  _QWORD v1026[6];
  _QWORD v1027[6];
  _QWORD v1028[6];
  _QWORD v1029[6];
  _QWORD v1030[6];
  _QWORD v1031[6];
  _QWORD v1032[6];
  _QWORD v1033[6];
  _QWORD v1034[6];
  _QWORD v1035[6];
  _QWORD v1036[6];
  _QWORD v1037[6];
  _QWORD v1038[6];
  _QWORD v1039[6];
  _QWORD v1040[6];
  _QWORD v1041[6];
  _QWORD v1042[6];
  _QWORD v1043[6];
  _QWORD v1044[6];
  _QWORD v1045[6];
  _QWORD v1046[6];
  _QWORD v1047[6];
  _QWORD v1048[6];
  _QWORD v1049[6];
  _QWORD v1050[6];
  _QWORD v1051[6];
  _QWORD v1052[6];
  _QWORD v1053[6];
  _QWORD v1054[6];
  _QWORD v1055[6];
  _QWORD v1056[6];
  _QWORD v1057[6];
  _QWORD v1058[6];
  _QWORD v1059[6];
  _QWORD v1060[6];
  _QWORD v1061[6];
  _QWORD v1062[6];
  _QWORD v1063[6];
  _QWORD v1064[6];
  _QWORD v1065[6];
  _QWORD v1066[6];
  _QWORD v1067[6];
  _QWORD v1068[6];
  _QWORD v1069[6];
  _QWORD v1070[6];
  _QWORD v1071[6];
  _QWORD v1072[6];
  _QWORD v1073[6];
  _QWORD v1074[6];
  _QWORD v1075[6];
  _QWORD v1076[6];
  _QWORD v1077[6];
  _QWORD v1078[6];
  _QWORD v1079[6];
  _QWORD v1080[6];
  _QWORD v1081[6];
  _QWORD v1082[6];
  _QWORD v1083[6];
  _QWORD v1084[6];
  _QWORD v1085[6];
  _QWORD v1086[6];
  _QWORD v1087[6];
  _QWORD v1088[6];
  _QWORD v1089[6];
  _QWORD v1090[6];
  _QWORD v1091[6];
  _QWORD v1092[6];
  _QWORD v1093[6];
  _QWORD v1094[6];
  _QWORD v1095[6];
  _QWORD v1096[6];
  _QWORD v1097[6];
  _QWORD v1098[6];
  _QWORD v1099[6];
  _QWORD v1100[6];
  _QWORD v1101[6];
  _QWORD v1102[6];
  _QWORD v1103[6];
  _QWORD v1104[6];
  _QWORD v1105[6];
  _QWORD v1106[6];
  _QWORD v1107[6];
  _QWORD v1108[6];
  _QWORD v1109[6];
  _QWORD v1110[6];
  _QWORD v1111[6];
  _QWORD v1112[6];
  _QWORD v1113[6];
  _QWORD v1114[6];
  _QWORD v1115[6];
  _QWORD v1116[6];
  _QWORD v1117[6];
  _QWORD v1118[6];
  _QWORD v1119[6];
  _QWORD v1120[6];
  _QWORD v1121[6];
  _QWORD v1122[6];
  _QWORD v1123[6];
  _QWORD v1124[6];
  _QWORD v1125[6];
  _QWORD v1126[6];
  _QWORD v1127[6];
  _QWORD v1128[6];
  _QWORD v1129[6];
  _QWORD v1130[6];
  _QWORD v1131[6];
  _QWORD v1132[6];
  _QWORD v1133[6];
  _QWORD v1134[6];
  _QWORD v1135[6];
  _QWORD v1136[6];
  _QWORD v1137[6];
  _QWORD v1138[6];
  _QWORD v1139[6];
  _QWORD v1140[6];
  _QWORD v1141[6];
  _QWORD v1142[6];
  _QWORD v1143[6];
  _QWORD v1144[6];
  _QWORD v1145[6];
  _QWORD v1146[6];
  _QWORD v1147[6];
  _QWORD v1148[6];
  _QWORD v1149[6];
  _QWORD v1150[6];
  _QWORD v1151[6];
  _QWORD v1152[6];
  _QWORD v1153[6];
  _QWORD v1154[7];

  v1 = (_QWORD *)MEMORY[0x1E0C80A78](this);
  v1154[6] = *MEMORY[0x1E0C80C00];
  if ((v2 & 1) == 0
  {
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v5, "їбе", "ї*е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v6, "ёбля", "ё**я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v7, "ёбат", "ё**т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v8, "ёбарь", "ё***ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v9, "ёбаный", "ё****й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v10, "ёбаную", "ё****ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v11, "ёбанный", "ё*****й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v12, "ёбаная", "ё****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v13, "ёбан", "ё**н");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v14, "хєр", "х*р");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v15, "хуйям", "х***м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v16, "хуйчик", "х****к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v17, "хуйцы", "х***ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v18, "хуйцу", "х***у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v19, "хуйцом", "х****м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v20, "хуйцов", "х****в");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v21, "хуйцо", "х***о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v22, "хуйце", "х***е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v23, "хуйцах", "х****х");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v24, "хуйцам", "х****м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v25, "хуйца", "х***а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v26, "хуйхуй", "х****й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v27, "хуйхаа", "х****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v28, "хуйфон", "х****н");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v29, "хуйтэн", "х****н");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v30, "хуйты", "х***ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v31, "хуйту", "х***у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v32, "хуйто", "х***о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v33, "хуйте", "х***е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v34, "хуйтам", "х****м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v35, "хуйта", "х***а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v36, "хуйски", "х****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v37, "хуйрик", "х****к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v38, "хуйота", "х****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v39, "хуйовый", "х*****й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v40, "хуйовые", "х*****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v41, "хуйовое", "х*****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v42, "хуйово", "х****о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v43, "хуйовая", "х*****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v44, "хуйова", "х****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v45, "хуйнёт", "х****т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v46, "хуйнём", "х****м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v47, "хуйнёй", "х****й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v48, "хуйняя", "х****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v49, "хуйняшка", "х******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v50, "хуйнях", "х****х");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v51, "хуйняс", "х****с");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v52, "хуйняно", "х*****о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v53, "хуйняне", "х*****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v54, "хуйнями", "х*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v55, "хуйняи", "х****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v56, "хуйняв", "х****в");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v57, "хуйняа", "х****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v58, "хуйня", "х***я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v59, "хуйнюя", "х****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v60, "хуйнюю", "х****ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v61, "хуйнюшку", "х******у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v62, "хуйнюшки", "х******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v63, "хуйнюшка", "х******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v64, "хуйнюша", "х*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v65, "хуйнюну", "х*****у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v66, "хуйню", "х***ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v67, "хуйнуть", "х*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v68, "хуйнулся", "х******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v69, "хуйнуло", "х*****о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v70, "хуйнули", "х*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v71, "хуйнула", "х*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v72, "хуйнул", "х****л");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v73, "хуйну", "х***у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v74, "хуйной", "х****й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v75, "хуйно", "х***о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v76, "хуйнища", "х*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v77, "хуйните", "х*****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v78, "хуйни", "х***и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v79, "хуйнеё", "х****ё");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v80, "хуйнею", "х****ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v81, "хуйнет", "х****т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v82, "хуйнем", "х****м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v83, "хуйней", "х****й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v84, "хуйнее", "х****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v85, "хуйне", "х***е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v86, "хуйная", "х****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v87, "хуйнаны", "х*****ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v88, "хуйнана", "х*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v89, "хуйна", "х***а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v90, "хуйль", "х***ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v91, "хуйлыга", "х*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v92, "хуйлы", "х***ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v93, "хуйлу", "х***у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v94, "хуйлоша", "х*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v95, "хуйлом", "х****м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v96, "хуйло", "х***о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v97, "хуйлище", "х*****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v98, "хуйлион", "х*****н");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v99, "хуйли", "х***и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v100, "хуйле", "х***е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v101, "хуйланы", "х*****ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v102, "хуйлана", "х*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v103, "хуйлан", "х****н");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v104, "хуйла", "х***а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v105, "хуйком", "х****м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v106, "хуйки", "х***и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v107, "хуйка", "х***а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v108, "хуйи", "х**и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v109, "хуйево", "х****о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v110, "хуйда", "х***а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v111, "хуйво", "х***о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v112, "хуйвей", "х****й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[11],0>(v113, "хуй-чего", "х******о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v114, "хуй", "х*й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v115, "хуебля", "х****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v116, "хитровыебанный", "х************й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v117, "хер", "х*р");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v118, "уродів", "у****в");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v119, "упиздить", "у******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v120, "уебать", "у****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v121, "уебаны", "у****ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v122, "уебан", "у***н");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v123, "трахнуть", "т******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v124, "трахаёб", "т*****б");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v125, "трахать", "т*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v126, "трахатель", "т*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v127, "трахаеб", "т*****б");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[9],0>(v128, "трахае6", "т*****6");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v129, "съебаться", "с*******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v130, "съебать", "с*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v131, "страхопиздище", "с***********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v132, "сраці", "с***і");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v133, "сракою", "с****ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v134, "спиздиться", "с********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v135, "спиздить", "с******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v136, "спиздит", "с*****т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v137, "спиздили", "с******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v138, "спиздила", "с******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v139, "спиздил", "с*****л");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v140, "спиздеть", "с******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v141, "спиздел", "с*****л");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v142, "распиздяйство", "р***********о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v143, "распиздяйка", "р*********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v144, "распиздяй", "р*******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v145, "распиздон", "р*******н");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v146, "распиздеться", "р**********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v147, "распиздай", "р*******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v148, "разёбанный", "р********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v149, "разъебаться", "р*********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v150, "разъебать", "р*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v151, "разебанный", "р********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v152, "підрахуйство", "п**********о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v153, "підарас", "п*****с");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v154, "пропиздячить", "п**********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v155, "пропиздить", "п********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v156, "пропиздеть", "п********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v157, "пропизделся", "п*********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v158, "проебаться", "п********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v159, "проебать", "п******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v160, "проебанка", "п*******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v161, "проблядь", "п******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v162, "припиздюлина", "п**********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v163, "припизднутый", "п**********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v164, "припиздить", "п********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v165, "припиздень", "п********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v166, "приебаться", "п********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v167, "придурок", "п******к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v168, "похуй", "п***й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v169, "потрахаться", "п*********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v170, "попиздовать", "п*********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v171, "попиздили", "п*******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v172, "попиздеть", "п*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v173, "попиздели", "п*******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v174, "поебать", "п*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v175, "подъебать", "п*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v176, "пиздёшь", "п*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v177, "пиздёш", "п****ш");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v178, "пиздёныш", "п******ш");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v179, "пиздёнку", "п******у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v180, "пиздёнкой", "п*******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v181, "пиздёнки", "п******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v182, "пиздёнке", "п******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v183, "пиздёнка", "п******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v184, "пиздёжь", "п*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v185, "пиздёжи", "п*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v186, "пиздёжа", "п*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v187, "пиздёж", "п****ж");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v188, "пиздящих", "п******х");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v189, "пиздящим", "п******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v190, "пиздящий", "п******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v191, "пиздящие", "п******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v192, "пиздящее", "п******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v193, "пиздящая", "п******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v194, "пиздяшек", "п******к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v195, "пиздячу", "п*****у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v196, "пиздячку", "п******у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v197, "пиздячки", "п******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v198, "пиздячить", "п*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v199, "пиздячит", "п******т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v200, "пиздячил", "п******л");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v201, "пиздячик", "п******к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v202, "пиздячек", "п******к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v203, "пиздячат", "п******т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v204, "пиздяться", "п*******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v205, "пиздять", "п*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v206, "пиздятся", "п******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v207, "пиздятну", "п******у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v208, "пиздятины", "п*******ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v209, "пиздятиной", "п********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v210, "пиздятинки", "п********и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v211, "пиздятинка", "п********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v212, "пиздятина", "п*******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v213, "пиздят", "п****т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v214, "пиздярить", "п*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v215, "пиздянок", "п******к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v216, "пиздян", "п****н");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v217, "пиздяк", "п****к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v218, "пиздяй", "п****й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v219, "пиздя", "п***я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v220, "пиздюшонок", "п********к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v221, "пиздюшок", "п******к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v222, "пиздюшня", "п******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v223, "пиздюшный", "п*******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v224, "пиздюшник", "п*******к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v225, "пиздюшку", "п******у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v226, "пиздюшкой", "п*******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v227, "пиздюшки", "п******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v228, "пиздюшке", "п******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v229, "пиздюшка", "п******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v230, "пиздюшечка", "п********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v231, "пиздюшек", "п******к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v232, "пиздюша", "п*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v233, "пиздючье", "п******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v234, "пиздючку", "п******у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v235, "пиздючкой", "п*******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v236, "пиздючки", "п******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v237, "пиздючка", "п******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v238, "пиздючий", "п******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v239, "пиздючие", "п******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v240, "пиздючек", "п******к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v241, "пиздюху", "п*****у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v242, "пиздюхой", "п******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v243, "пиздюхи", "п*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v244, "пиздюхе", "п*****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v245, "пиздюхать", "п*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v246, "пиздюха", "п*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v247, "пиздюрить", "п*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v248, "пиздюляшек", "п********к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v249, "пиздюлях", "п******х");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v250, "пиздюляторов", "п**********в");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v251, "пиздюлями", "п*******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v252, "пиздюлям", "п******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v253, "пиздюля", "п*****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v254, "пиздюлю", "п*****ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v255, "пиздюльки", "п*******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v256, "пиздюлька", "п*******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v257, "пиздюль", "п*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v258, "пиздюлины", "п*******ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v259, "пиздюлину", "п*******у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v260, "пиздюлинку", "п********у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v261, "пиздюлинки", "п********и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v262, "пиздюлинка", "п********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v263, "пиздюлине", "п*******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v264, "пиздюлинами", "п*********и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v265, "пиздюлина", "п*******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v266, "пиздюлин", "п******н");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v267, "пиздюликов", "п********в");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v268, "пиздюли", "п*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v269, "пиздюлек", "п******к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v270, "пиздюлей", "п******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v271, "пиздюлеи", "п******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v272, "пиздюлеей", "п*******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v273, "пиздюку", "п*****у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v274, "пиздюком", "п******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v275, "пиздюков", "п******в");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v276, "пиздюки", "п*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v277, "пиздюками", "п*******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v278, "пиздюкам", "п******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v279, "пиздюка", "п*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v280, "пиздюк", "п****к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v281, "пиздюдей", "п******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v282, "пиздюга", "п*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v283, "пиздю", "п***ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v284, "пиздэйшн", "п******н");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v285, "пиздэйшен", "п*******н");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v286, "пиздь", "п***ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v287, "пиздыя", "п****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v288, "пиздыц", "п****ц");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v289, "пиздытый", "п******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v290, "пиздык", "п****к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v291, "пизды", "п***ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v292, "пиздца", "п****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v293, "пиздуя", "п****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v294, "пиздуют", "п*****т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v295, "пиздую", "п****ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v296, "пиздушку", "п******у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v297, "пиздушка", "п******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v298, "пиздуц", "п****ц");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v299, "пиздуховные", "п*********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v300, "пиздуу", "п****у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v301, "пиздунья", "п******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v302, "пиздуны", "п*****ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v303, "пиздуном", "п******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v304, "пиздунов", "п******в");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v305, "пиздуна", "п*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v306, "пиздун", "п****н");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v307, "пиздуля", "п*****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v308, "пиздулей", "п******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v309, "пиздула", "п*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v310, "пиздуйте", "п******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v311, "пиздуйка", "п******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v312, "пиздуй", "п****й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v313, "пиздуешь", "п******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v314, "пиздуете", "п******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v315, "пиздует", "п*****т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v316, "пиздуем", "п*****м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v317, "пизду", "п***у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v318, "пиздтый", "п*****й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v319, "пиздрячить", "п********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v320, "пиздруй", "п*****й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v321, "пиздравляю", "п********ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v322, "пиздою", "п****ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v323, "пиздошу", "п*****у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v324, "пиздошить", "п*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v325, "пиздошит", "п******т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v326, "пиздохаю", "п******ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v327, "пиздохаханьки", "п***********и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v328, "пиздохать", "п*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v329, "пиздохай", "п******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v330, "пиздоу", "п****у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v331, "пиздоты", "п*****ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v332, "пиздотина", "п*******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v333, "пиздота", "п*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v334, "пиздося", "п*****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v335, "пиздосья", "п******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v336, "пиздострадашки", "п************и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v337, "пиздострадашек", "п************к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[31],char const(&)[18],0>(v338, "пиздострадатель", "п*************ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[31],char const(&)[18],0>(v339, "пиздостраданиях", "п*************х");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[33],char const(&)[19],0>(v340, "пиздостраданиями", "п**************и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[31],char const(&)[18],0>(v341, "пиздостраданиям", "п*************м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v342, "пиздострадания", "п************я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v343, "пиздостраданий", "п************й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v344, "пиздострадание", "п************е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[39],char const(&)[22],0>(v345, "пиздострадальческий", "п*****************й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[39],char const(&)[22],0>(v346, "пиздострадальческие", "п*****************е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[31],char const(&)[18],0>(v347, "пиздострадальцы", "п*************ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[33],char const(&)[19],0>(v348, "пиздострадальцам", "п**************м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[31],char const(&)[18],0>(v349, "пиздострадалицы", "п*************ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v350, "пиздострадалец", "п************ц");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v351, "пиздосс", "п*****с");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v352, "пиздосов", "п******в");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v353, "пиздосина", "п*******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v354, "пиздосики", "п*******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v355, "пиздосик", "п******к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v356, "пиздоси", "п*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v357, "пиздосей", "п******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v358, "пиздоса", "п*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v359, "пиздос", "п****с");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v360, "пиздорукий", "п********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v361, "пиздорукая", "п********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v362, "пиздорич", "п******ч");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v363, "пиздорить", "п*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v364, "пиздорез", "п******з");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v365, "пиздорванки", "п*********и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v366, "пиздорванка", "п*********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v367, "пиздорванец", "п*********ц");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v368, "пиздор", "п****р");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v369, "пиздопроёбина", "п***********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v370, "пиздопроушина", "п***********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v371, "пиздопротивный", "п************й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v372, "пиздопроебины", "п***********ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v373, "пиздопроебина", "п***********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v374, "пиздоос", "п*****с");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v375, "пиздонуть", "п*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v376, "пиздонутые", "п********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v377, "пиздони", "п*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v378, "пиздон", "п****н");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v379, "пиздолить", "п*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v380, "пиздолизы", "п*******ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v381, "пиздолизом", "п********м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v382, "пиздолизов", "п********в");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v383, "пиздолизка", "п********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v384, "пиздолизами", "п*********и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v385, "пиздолиза", "п*******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v386, "пиздолиз", "п******з");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v387, "пиздолет", "п******т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v388, "пиздокрылая", "п*********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v389, "пиздокрыл", "п*******л");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v390, "пиздок", "п****к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v391, "пиздой", "п****й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v392, "пиздоеб", "п*****б");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v393, "пиздодень", "п*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v394, "пиздодельный", "п**********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v395, "пиздодельные", "п**********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v396, "пиздодельная", "п**********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v397, "пиздоглазых", "п*********х");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v398, "пиздоглазыми", "п**********и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v399, "пиздоглазый", "п*********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v400, "пиздоглазые", "п*********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v401, "пиздоглазой", "п*********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v402, "пиздоглазое", "п*********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v403, "пиздоглазие", "п*********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v404, "пиздоглазая", "п*********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v405, "пиздоглаз", "п*******з");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v406, "пиздоган", "п******н");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v407, "пиздоворот", "п********т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v408, "пиздовать", "п*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v409, "пиздоватый", "п********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v410, "пиздоватые", "п********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v411, "пиздоватой", "п********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v412, "пиздоватое", "п********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v413, "пиздоватая", "п********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v414, "пиздовали", "п*******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v415, "пиздовала", "п*******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v416, "пиздовал", "п******л");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v417, "пиздов", "п****в");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v418, "пиздобратия", "п*********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v419, "пиздобратию", "п*********ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v420, "пиздобратии", "п*********и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v421, "пиздобольством", "п************м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v422, "пиздобольство", "п***********о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v423, "пиздобольства", "п***********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v424, "пиздоболы", "п*******ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v425, "пиздоболом", "п********м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v426, "пиздоболов", "п********в");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v427, "пиздоболкой", "п*********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v428, "пиздоболка", "п********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v429, "пиздоболия", "п********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v430, "пиздоболию", "п********ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v431, "пиздоболить", "п*********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v432, "пиздоболии", "п********и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v433, "пиздоболие", "п********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v434, "пиздоболами", "п*********и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v435, "пиздобола", "п*******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v436, "пиздобол", "п******л");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v437, "пиздоблядство", "п***********о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v438, "пиздоблядский", "п***********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v439, "пиздоблядская", "п***********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v440, "пиздоблядина", "п**********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v441, "пиздо", "п***о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v442, "пизднц", "п****ц");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v443, "пиздлявых", "п*******х");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v444, "пиздлявый", "п*******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v445, "пиздлявые", "п*******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v446, "пиздлявой", "п*******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v447, "пиздлявая", "п*******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v448, "пиздлом", "п*****м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v449, "пиздло", "п****о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v450, "пиздливых", "п*******х");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v451, "пиздливым", "п*******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v452, "пиздливый", "п*******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v453, "пиздливые", "п*******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v454, "пиздливы", "п******ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v455, "пиздливое", "п*******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v456, "пиздливая", "п*******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v457, "пиздлив", "п*****в");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v458, "пиздия", "п****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v459, "пиздиют", "п*****т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v460, "пиздию", "п****ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v461, "пиздищи", "п*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v462, "пиздище", "п*****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v463, "пиздища", "п*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v464, "пиздишься", "п*******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v465, "пиздишь", "п*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v466, "пиздиш", "п****ш");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v467, "пиздица", "п*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v468, "пиздиц", "п****ц");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v469, "пиздиться", "п*******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v470, "пиздить", "п*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v471, "пиздится", "п******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v472, "пиздити", "п*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v473, "пиздитесь", "п*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v474, "пиздите", "п*****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v475, "пиздит", "п****т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v476, "пиздис", "п****с");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v477, "пиздиной", "п******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v478, "пиздинг", "п*****г");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v479, "пиздина", "п*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v480, "пиздимся", "п******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v481, "пиздим", "п****м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v482, "пиздился", "п******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v483, "пиздилок", "п******к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v484, "пиздилово", "п*******о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v485, "пиздиловки", "п********и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v486, "пиздиловка", "п********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v487, "пиздилку", "п******у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v488, "пиздилки", "п******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v489, "пиздилка", "п******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v490, "пиздились", "п*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v491, "пиздили", "п*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v492, "пиздилась", "п*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v493, "пиздила", "п*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v494, "пиздил", "п****л");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v495, "пиздикулус", "п********с");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v496, "пиздика", "п*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v497, "пиздий", "п****й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v498, "пиздиишь", "п******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v499, "пиздии", "п****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v500, "пиздиет", "п*****т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v501, "пизди", "п***и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v502, "пизджу", "п****у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v503, "пиздешь", "п*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v504, "пиздешн", "п*****н");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v505, "пиздеш", "п****ш");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v506, "пиздечик", "п******к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v507, "пиздеця", "п*****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v508, "пиздецю", "п*****ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v509, "пиздець", "п*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v510, "пиздецы", "п*****ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v511, "пиздецъ", "п*****ъ");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v512, "пиздецхочу", "п********у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v513, "пиздецу", "п*****у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v514, "пиздецты", "п******ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v515, "пиздецсижу", "п********у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v516, "пиздецс", "п*****с");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v517, "пиздецпо", "п******о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v518, "пиздецочек", "п********к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v519, "пиздецом", "п******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v520, "пиздецок", "п******к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v521, "пиздецовых", "п********х");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v522, "пиздецовым", "п********м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v523, "пиздецовый", "п********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v524, "пиздецовые", "п********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v525, "пиздецовую", "п********ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v526, "пиздецовский", "п**********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v527, "пиздецовость", "п**********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v528, "пиздецовой", "п********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v529, "пиздецовое", "п********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v530, "пиздецово", "п*******о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v531, "пиздецович", "п********ч");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v532, "пиздецовее", "п********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v533, "пиздецовая", "п********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v534, "пиздецов", "п******в");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v535, "пиздецный", "п*******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v536, "пиздецнадо", "п********о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v537, "пиздецмне", "п*******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v538, "пиздецменя", "п********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v539, "пиздецкой", "п*******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v540, "пиздецкое", "п*******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v541, "пиздецкого", "п********о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v542, "пиздецко", "п******о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v543, "пиздецких", "п*******х");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v544, "пиздецким", "п*******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v545, "пиздецкий", "п*******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v546, "пиздецкие", "п*******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v547, "пиздецки", "п******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v548, "пиздецкая", "п*******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v549, "пиздеци", "п*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v550, "пиздецесли", "п********и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v551, "пиздеце", "п*****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v552, "пиздецдаже", "п********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v553, "пиздецда", "п******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v554, "пиздецв", "п*****в");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v555, "пиздецахах", "п********х");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v556, "пиздецах", "п******х");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v557, "пиздецами", "п*******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v558, "пиздецам", "п******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v559, "пиздеца", "п*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v560, "пиздец", "п****ц");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v561, "пиздеуц", "п*****ц");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v562, "пиздеться", "п*******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v563, "пиздеть", "п*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v564, "пиздетц", "п*****ц");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v565, "пиздетски", "п*******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v566, "пиздетс", "п*****с");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v567, "пиздет", "п****т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v568, "пиздесь", "п*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v569, "пиздес", "п****с");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v570, "пиздень", "п*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v571, "пизденышь", "п*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v572, "пизденыши", "п*******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v573, "пизденыш", "п******ш");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v574, "пизденочка", "п********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v575, "пизденок", "п******к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v576, "пизденку", "п******у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v577, "пизденкой", "п*******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v578, "пизденки", "п******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v579, "пизденке", "п******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v580, "пизденка", "п******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v581, "пиздени", "п*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v582, "пиздельники", "п*********и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v583, "пиздельник", "п********к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v584, "пизделся", "п******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v585, "пизделово", "п*******о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v586, "пизделовка", "п********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v587, "пиздело", "п*****о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v588, "пизделку", "п******у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v589, "пизделки", "п******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v590, "пизделка", "п******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v591, "пизделись", "п*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v592, "пиздели", "п*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v593, "пизделей", "п******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v594, "пиздела", "п*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v595, "пиздел", "п****л");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v596, "пиздек", "п****к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v597, "пиздейшн", "п******н");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v598, "пиздейшин", "п*******н");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v599, "пиздейшен", "п*******н");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v600, "пиздейц", "п*****ц");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v601, "пиздейро", "п******о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v602, "пиздей", "п****й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v603, "пиздез", "п****з");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v604, "пиздежь", "п*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v605, "пиздежу", "п*****у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v606, "пиздежом", "п******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v607, "пиздежи", "п*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v608, "пиздежем", "п******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v609, "пиздеже", "п*****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v610, "пиздежа", "п*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v611, "пиздеж", "п****ж");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v612, "пиздеецц", "п******ц");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v613, "пиздеец", "п*****ц");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v614, "пизде", "п***е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v615, "пиздая", "п****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v616, "пиздаче", "п*****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v617, "пиздач", "п****ч");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v618, "пиздация", "п******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v619, "пиздахаханьки", "п***********и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v620, "пиздахана", "п*******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v621, "пиздаускас", "п********с");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v622, "пиздать", "п*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v623, "пиздатыый", "п*******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v624, "пиздатых", "п******х");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v625, "пиздатыми", "п*******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v626, "пиздатым", "п******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v627, "пиздатый", "п******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v628, "пиздатые", "п******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v629, "пиздаты", "п*****ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v630, "пиздатую", "п******ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v631, "пиздатостью", "п*********ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v632, "пиздатость", "п********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v633, "пиздатости", "п********и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v634, "пиздатоо", "п******о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v635, "пиздатому", "п*******у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v636, "пиздатом", "п******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v637, "пиздатой", "п******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v638, "пиздатое", "п******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v639, "пиздатого", "п*******о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v640, "пиздато", "п*****о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v641, "пиздатни", "п******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v642, "пиздатий", "п******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v643, "пиздатенькое", "п**********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v644, "пиздатенького", "п***********о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v645, "пиздатенько", "п*********о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v646, "пиздатеньких", "п**********х");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v647, "пиздатенький", "п**********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v648, "пиздатенькие", "п**********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v649, "пиздатенькая", "п**********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v650, "пиздатейший", "п*********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v651, "пиздатейшие", "п*********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v652, "пиздатейшее", "п*********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v653, "пиздатейше", "п********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v654, "пиздатейшая", "п*********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v655, "пиздатей", "п******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v656, "пиздатее", "п******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v657, "пиздатая", "п******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v658, "пиздата", "п*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v659, "пиздат", "п****т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v660, "пиздастрадашки", "п************и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v661, "пиздастрадания", "п************я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v662, "пиздастраданий", "п************й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v663, "пиздастрадалец", "п************ц");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v664, "пиздас", "п****с");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v665, "пиздарулю", "п*******ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v666, "пиздарики", "п*******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v667, "пиздари", "п*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v668, "пиздарез", "п******з");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v669, "пиздарваньчик", "п***********к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v670, "пиздапроёбина", "п***********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v671, "пиздапроебины", "п***********ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v672, "пиздапроебина", "п***********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v673, "пиздапизда", "п********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v674, "пизданёшь", "п*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v675, "пизданётся", "п********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v676, "пизданёт", "п******т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v677, "пизданём", "п******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v678, "пиздануца", "п*******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v679, "пиздануться", "п*********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v680, "пиздануть", "п*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v681, "пизданутых", "п********х");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v682, "пизданутыми", "п*********и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v683, "пизданутым", "п********м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v684, "пизданутый", "п********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v685, "пизданутые", "п********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v686, "пизданутую", "п********ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v687, "пизданутся", "п********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v688, "пизданутость", "п**********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v689, "пизданутости", "п**********и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v690, "пизданутой", "п********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v691, "пизданутое", "п********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v692, "пизданутого", "п*********о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v693, "пизданутей", "п********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v694, "пизданутая", "п********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v695, "пизданут", "п******т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v696, "пизданусь", "п*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v697, "пизданулся", "п********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v698, "пизданулось", "п*********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v699, "пиздануло", "п*******о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v700, "пизданулись", "п*********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v701, "пизданули", "п*******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v702, "пизданулась", "п*********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v703, "пизданула", "п*******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v704, "пизданул", "п******л");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v705, "пиздану", "п*****у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v706, "пизданога", "п*******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v707, "пиздано", "п*****о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v708, "пизданите", "п*******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v709, "пизданись", "п*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v710, "пиздани", "п*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v711, "пизданешься", "п*********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v712, "пизданешь", "п*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v713, "пизданется", "п********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v714, "пизданете", "п*******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v715, "пизданет", "п******т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v716, "пизданем", "п******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v717, "пиздами", "п*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v718, "пиздамба", "п******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v719, "пиздам", "п****м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v720, "пиздализ", "п******з");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v721, "пиздакшионер", "п**********р");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v722, "пиздак", "п****к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v723, "пиздаебы", "п******ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v724, "пиздаебина", "п********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v725, "пиздаеб", "п*****б");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v726, "пиздаджигурда", "п***********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v727, "пиздадельный", "п**********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v728, "пиздадельные", "п**********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v729, "пиздадельная", "п**********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v730, "пиздада", "п*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v731, "пиздаган", "п******н");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v732, "пиздавать", "п*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v733, "пиздаватый", "п********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v734, "пиздаватые", "п********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v735, "пиздаболят", "п********т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v736, "пиздаболю", "п*******ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v737, "пиздабольству", "п***********у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v738, "пиздабольством", "п************м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v739, "пиздабольство", "п***********о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v740, "пиздабольстве", "п***********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v741, "пиздабольства", "п***********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v742, "пиздабольный", "п**********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v743, "пиздабольная", "п**********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v744, "пиздаболь", "п*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v745, "пиздаболы", "п*******ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v746, "пиздаболу", "п*******у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v747, "пиздаболом", "п********м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v748, "пиздаболок", "п********к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v749, "пиздаболов", "п********в");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v750, "пиздаболку", "п********у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v751, "пиздаболкой", "п*********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v752, "пиздаболки", "п********и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v753, "пиздаболке", "п********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v754, "пиздаболками", "п**********и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v755, "пиздаболка", "п********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v756, "пиздаболия", "п********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v757, "пиздаболию", "п********ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v758, "пиздаболище", "п*********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v759, "пиздаболишь", "п*********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v760, "пиздаболить", "п*********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v761, "пиздаболит", "п********т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v762, "пиздаболина", "п*********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v763, "пиздаболии", "п********и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v764, "пиздаболией", "п*********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v765, "пиздаболие", "п********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v766, "пиздаболами", "п*********и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v767, "пиздаболам", "п********м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v768, "пиздабола", "п*******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v769, "пиздабол", "п******л");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v770, "пиздаатыый", "п********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v771, "пизда", "п***а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v772, "пизд", "п**д");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v773, "отъебаться", "о********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v774, "отпиздячить", "о*********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v775, "отпиздить", "о*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v776, "остопиздить", "о*********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v777, "остопиздеть", "о*********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v778, "опизденивающе", "о***********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v779, "опизде", "о****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v780, "однохуйственно", "о************о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v781, "обьебать", "о******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v782, "объебать", "о******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v783, "нехуйственно", "н**********о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v784, "нехуй", "н***й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v785, "нахуйник", "н******к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v786, "нахуй", "н***й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v787, "настопиздить", "н**********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v788, "настоебать", "н********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v789, "напиздить", "н*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v790, "напиздили", "н*******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v791, "напиздело", "н*******о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v792, "напиздели", "н*******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v793, "напиздел", "н******л");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v794, "наебать", "н*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v795, "мінет", "м***т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v796, "мудаків", "м*****в");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v797, "манда", "м***а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v798, "лохотроном", "л********м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v799, "лохами", "л****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v800, "испиздить", "и*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v801, "заёбанный", "з*******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v802, "затрахивать", "з*********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v803, "затрахать", "з*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v804, "затрахали", "з*******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v805, "затрахала", "з*******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v806, "запиздячить", "з*********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v807, "запиздеть", "з*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v808, "залупа", "з****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v809, "заебаться", "з*******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v810, "заебать", "з*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v811, "заебатый", "з******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v812, "заебатая", "з******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v813, "заебанец", "з******ц");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[12],0>(v814, "заeбанный", "з*******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v815, "ебля", "е**я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v816, "ебатюшки", "е******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v817, "ебатьялох", "е*******х");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v818, "ебатья", "е****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v819, "ебатьты", "е*****ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[30],char const(&)[18],0>(v820, "ебаться-сраться", "е*************я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v821, "ебаться", "е*****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v822, "ебатьколотить", "е***********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[15],0>(v823, "ебать-копать", "е**********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[28],char const(&)[17],0>(v824, "ебать-колотить", "е************ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v825, "ебать", "е***ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v826, "ебаты", "е***ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v827, "ебату", "е***у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v828, "ебатся", "е****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v829, "ебатория", "е******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v830, "ебаторию", "е******ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v831, "ебаторий", "е******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v832, "ебатня", "е****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v833, "ебатню", "е****ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v834, "ебатика", "е*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v835, "ебати", "е***и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v836, "ебатень", "е*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v837, "ебате", "е***е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v838, "ебата", "е***а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v839, "ебат", "е**т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v840, "ебарь", "е***ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v841, "ебанёшься", "е*******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v842, "ебанёшь", "е*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v843, "ебанётся", "е******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v844, "ебанёте", "е*****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v845, "ебанёт", "е****т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v846, "ебанём", "е****м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v847, "ебанята", "е*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v848, "ебаням", "е****м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v849, "ебаня", "е***я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v850, "ебаньтяй", "е******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v851, "ебанькоо", "е******о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v852, "ебаньком", "е******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v853, "ебанько", "е*****о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v854, "ебаньки", "е*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v855, "ебань", "е***ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v856, "ебаныый", "е*****й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v857, "ебаных", "е****х");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v858, "ебанырот", "е******т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v859, "ебаными", "е*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v860, "ебаным", "е****м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v861, "ебаныйрот", "е*******т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v862, "ебаныйврот", "е********т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v863, "ебаный", "е****й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v864, "ебаныи", "е****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v865, "ебаные", "е****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v866, "ебаныврот", "е*******т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v867, "ебаны", "е***ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v868, "ебаную", "е****ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v869, "ебанушку", "е******у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v870, "ебанушкой", "е*******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v871, "ебанушки", "е******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v872, "ебанушками", "е********и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v873, "ебанушкам", "е*******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v874, "ебанушка", "е******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v875, "ебанушек", "е******к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v876, "ебануцца", "е******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v877, "ебануцо", "е*****о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v878, "ебануца", "е*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v879, "ебануха", "е*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v880, "ебанууться", "е********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v881, "ебануутая", "е*******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v882, "ебанутьсяя", "е********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v883, "ебануться", "е*******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v884, "ебануть", "е*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v885, "ебанутых", "е******х");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v886, "ебанутыми", "е*******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v887, "ебанутым", "е******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v888, "ебанутый", "е******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v889, "ебанутые", "е******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v890, "ебануты", "е*****ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v891, "ебанутую", "е******ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v892, "ебанутся", "е******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v893, "ебанутством", "е*********м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v894, "ебанутство", "е********о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v895, "ебанутства", "е********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v896, "ебанутсво", "е*******о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v897, "ебанутось", "е*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v898, "ебанутостью", "е*********ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v899, "ебанутость", "е********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v900, "ебанутости", "е********и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v901, "ебанутостей", "е*********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v902, "ебанутому", "е*******у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v903, "ебанутом", "е******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v904, "ебанутой", "е******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v905, "ебанутое", "е******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v906, "ебанутого", "е*******о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v907, "ебануто", "е*****о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v908, "ебанутки", "е******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v909, "ебанутка", "е******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v910, "ебанутики", "е*******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v911, "ебанутика", "е*******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v912, "ебанутик", "е******к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v913, "ебанутий", "е******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v914, "ебанутейший", "е*********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v915, "ебанутейшие", "е*********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v916, "ебанутейшая", "е*********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v917, "ебанутей", "е******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v918, "ебанутее", "е******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v919, "ебануте", "е*****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v920, "ебанутаяя", "е*******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v921, "ебанутая", "е******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v922, "ебанутаая", "е*******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v923, "ебанутаЯ", "е******Я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v924, "ебанута", "е*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v925, "ебанут", "е****т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v926, "ебанусь", "е*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v927, "ебанулся", "е******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v928, "ебанулсь", "е******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v929, "ебанулсо", "е******о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v930, "ебанулс", "е*****с");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v931, "ебанулось", "е*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v932, "ебануло", "е*****о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v933, "ебанулисья", "е********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v934, "ебанулись", "е*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v935, "ебанули", "е*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v936, "ебанулась", "е*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v937, "ебанула", "е*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v938, "ебанул", "е****л");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v939, "ебануй", "е****й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v940, "ебану", "е***у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v941, "ебантяями", "е*******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v942, "ебантяям", "е******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v943, "ебантяя", "е*****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v944, "ебантяйство", "е*********о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v945, "ебантяйства", "е*********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v946, "ебантяйское", "е*********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v947, "ебантяйские", "е*********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v948, "ебантяйки", "е*******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v949, "ебантяйка", "е*******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v950, "ебантяй", "е*****й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v951, "ебантяи", "е*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v952, "ебантяем", "е******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v953, "ебантяев", "е******в");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v954, "ебантизм", "е******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v955, "ебантеи", "е*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v956, "ебанство", "е******о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v957, "ебанско", "е*****о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v958, "ебанский", "е******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v959, "ебанрот", "е*****т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v960, "ебаноё", "е****ё");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v961, "ебаному", "е*****у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v962, "ебаном", "е****м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v963, "ебанок", "е****к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v964, "ебаной", "е****й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v965, "ебаное", "е****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v966, "ебаного", "е*****о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v967, "ебановрот", "е*******т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v968, "ебанов", "е****в");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v969, "ебано", "е***о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v970, "ебанных", "е*****х");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v971, "ебанными", "е******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v972, "ебанным", "е*****м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v973, "ебанныйврот", "е*********т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v974, "ебанный", "е*****й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v975, "ебанныи", "е*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v976, "ебанные", "е*****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v977, "ебанную", "е*****ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v978, "ебаннутых", "е*******х");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v979, "ебаннутый", "е*******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v980, "ебаннутые", "е*******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v981, "ебаннутой", "е*******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v982, "ебаннутое", "е*******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v983, "ебаннутого", "е********о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v984, "ебаннутая", "е*******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v985, "ебанному", "е******у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v986, "ебанном", "е*****м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v987, "ебанной", "е*****й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v988, "ебанное", "е*****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v989, "ебанного", "е******о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v990, "ебанно", "е****о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v991, "ебанная", "е*****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v992, "ебанна", "е****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v993, "ебанка", "е****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v994, "ебания", "е****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v995, "ебанический", "е*********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v996, "ебанические", "е*********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v997, "ебанически", "е********и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v998, "ебанитовая", "е********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v999, "ебанитесь", "е*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1000, "ебаните", "е*****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1001, "ебанись", "е*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v1002, "ебанистической", "е************й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v1003, "ебанистический", "е************й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v1004, "ебанистические", "е************е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v1005, "ебанистически", "е***********и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v1006, "ебанистическая", "е************я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1007, "ебанистика", "е********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1008, "ебанины", "е*****ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1009, "ебанина", "е*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1010, "ебаний", "е****й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1011, "ебании", "е****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1012, "ебанизмом", "е*******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1013, "ебанизма", "е******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1014, "ебанизм", "е*****м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1015, "ебание", "е****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1016, "ебанешься", "е*******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1017, "ебанешь", "е*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1018, "ебанешся", "е******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1019, "ебанется", "е******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1020, "ебанете", "е*****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1021, "ебанет", "е****т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1022, "ебаненько", "е*******о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1023, "ебаненький", "е********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1024, "ебанемся", "е******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1025, "ебанем", "е****м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1026, "ебанейший", "е*******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1027, "ебаней", "е****й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1028, "ебанее", "е****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1029, "ебанврот", "е******т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1030, "ебанаяя", "е*****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1031, "ебаная", "е****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1032, "ебанашку", "е******у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1033, "ебанашкой", "е*******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1034, "ебанашки", "е******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1035, "ебанашке", "е******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1036, "ебанашками", "е********и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1037, "ебанашкам", "е*******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1038, "ебанашка", "е******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1039, "ебанаши", "е*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1040, "ебанашечка", "е********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1041, "ебанашек", "е******к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1042, "ебанафт", "е*****т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1043, "ебанатый", "е******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1044, "ебанаты", "е*****ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1045, "ебанату", "е*****у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1046, "ебанатство", "е********о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1047, "ебанатства", "е********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1048, "ебанатской", "е********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1049, "ебанатский", "е********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1050, "ебанатские", "е********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1051, "ебанатская", "е********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1052, "ебанаторы", "е*******ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1053, "ебанатор", "е******р");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1054, "ебанатом", "е******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1055, "ебанатов", "е******в");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1056, "ебанатки", "е******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1057, "ебанатка", "е******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1058, "ебанатиков", "е********в");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1059, "ебанатики", "е*******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1060, "ебанатик", "е******к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1061, "ебанатизм", "е*******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1062, "ебанатами", "е*******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1063, "ебанатам", "е******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1064, "ебаната", "е*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1065, "ебанат", "е****т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1066, "ебанарь", "е*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1067, "ебанарот", "е******т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1068, "ебанан", "е****н");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1069, "ебанами", "е*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1070, "ебанамать", "е*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1071, "ебанай", "е****й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1072, "ебанавты", "е******ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1073, "ебанавт", "е*****т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1074, "ебанаая", "е*****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1075, "ебана", "е***а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1076, "ебан", "е**н");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1077, "дрочити", "д*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v1078, "допиздеться", "д*********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1079, "доебаться", "д*******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[11],0>(v1080, "до-пизды", "д******ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1081, "гівнюк", "г****к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1082, "гівно", "г***о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1083, "гребаных", "г******х");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1084, "гребаную", "г******ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1085, "гребаного", "г*******о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1086, "гребанные", "г*******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1087, "гребанную", "г*******ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1088, "выпиздить", "в*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v1089, "выпиздеться", "в*********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1090, "выебать", "в*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1091, "выблядыш", "в******ш");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1092, "выблядок", "в******к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1093, "въебаться", "в*******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1094, "въебать", "в*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1095, "всратися", "в******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1096, "всрались", "в******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1097, "впиздячить", "в********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1098, "блять", "б***ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1099, "блятство", "б******о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1100, "блятский", "б******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1101, "блятская", "б******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1102, "блянадо", "б*****о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1103, "бляменя", "б*****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1104, "блямба", "б****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1105, "блямб", "б***б");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1106, "блякаешь", "б******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1107, "блядях", "б****х");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1108, "блядями", "б*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1109, "блядюга", "б*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1110, "блядьми", "б*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1111, "блядь", "б***ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1112, "блядуют", "б*****т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1113, "блядушки", "б******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1114, "блядунья", "б******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1115, "блядуны", "б*****ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1116, "блядун", "б****н");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1117, "блядуешь", "б******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1118, "блядует", "б*****т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1119, "блядству", "б******у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v1120, "блядствовать", "б**********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1121, "блядство", "б******о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1122, "блядстве", "б******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1123, "блядства", "б******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1124, "блядскую", "б******ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1125, "блядском", "б******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1126, "блядской", "б******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1127, "блядское", "б******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1128, "блядско", "б*****о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1129, "блядских", "б******х");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1130, "блядским", "б******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1131, "блядский", "б******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1132, "блядские", "б******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1133, "блядски", "б*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1134, "блядская", "б******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1135, "блядота", "б*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1136, "блядовать", "б*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1137, "блядки", "б****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1138, "блядках", "б*****х");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1139, "блядищи", "б*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1140, "блядище", "б*****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1141, "блядища", "б*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1142, "блядины", "б*****ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1143, "блядину", "б*****у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1144, "блядиной", "б******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1145, "блядинка", "б******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1146, "блядине", "б*****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1147, "блядина", "б*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1148, "бляди", "б***и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1149, "бляд", "б**д");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1150, "блябуду", "б*****у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1151, "блябу", "б***у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1152, "ахуй", "а**й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v1153, "архипиздрит", "а*********т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[8],0>(v1154, "eбаный", "e****й");
    std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](&siri::dialogengine::GetProfanityFilter_uk(void)::sProfanityData_uk, (uint64_t)v5, 0x47EuLL);
    for (i = 0; i != -6900; i -= 6)
      std::pair<std::string const,std::string>::~pair((uint64_t)&v1154[i]);
    __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], &siri::dialogengine::GetProfanityFilter_uk(void)::sProfanityData_uk, &dword_1BF794000);
  }
  *v1 = 0;
  v1[1] = 0;
  v1[2] = 0;
  return std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(v1, siri::dialogengine::GetProfanityFilter_uk(void)::sProfanityData_uk, *(uint64_t *)algn_1EF582E70, 0xAAAAAAAAAAAAAAABLL* ((*(_QWORD *)algn_1EF582E70 - siri::dialogengine::GetProfanityFilter_uk(void)::sProfanityData_uk) >> 4));
}

void sub_1BFB5D5A8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + 55152;
  v4 = -55200;
  do
  {
    v3 = std::pair<std::string const,std::string>::~pair(v3) - 48;
    v4 += 48;
  }
  while (v4);
  _Unwind_Resume(a1);
}

_QWORD *siri::dialogengine::GetProfanityFilter_ar(siri::dialogengine *this)
{
  _QWORD *v1;
  unsigned __int8 v2;
  uint64_t i;
  _QWORD v5[6];
  _QWORD v6[6];
  _QWORD v7[6];
  _QWORD v8[6];
  _QWORD v9[6];
  _QWORD v10[6];
  _QWORD v11[6];
  _QWORD v12[6];
  _QWORD v13[6];
  _QWORD v14[6];
  _QWORD v15[6];
  _QWORD v16[6];
  _QWORD v17[6];
  _QWORD v18[6];
  _QWORD v19[6];
  _QWORD v20[6];
  _QWORD v21[6];
  _QWORD v22[6];
  _QWORD v23[6];
  _QWORD v24[6];
  _QWORD v25[6];
  _QWORD v26[6];
  _QWORD v27[6];
  _QWORD v28[6];
  _QWORD v29[6];
  _QWORD v30[6];
  _QWORD v31[6];
  _QWORD v32[6];
  _QWORD v33[6];
  _QWORD v34[6];
  _QWORD v35[6];
  _QWORD v36[6];
  _QWORD v37[6];
  _QWORD v38[6];
  _QWORD v39[6];
  _QWORD v40[6];
  _QWORD v41[6];
  _QWORD v42[6];
  _QWORD v43[6];
  _QWORD v44[6];
  _QWORD v45[6];
  _QWORD v46[6];
  _QWORD v47[6];
  _QWORD v48[6];
  _QWORD v49[6];
  _QWORD v50[6];
  _QWORD v51[6];
  _QWORD v52[6];
  _QWORD v53[6];
  _QWORD v54[6];
  _QWORD v55[6];
  _QWORD v56[6];
  _QWORD v57[6];
  _QWORD v58[6];
  _QWORD v59[6];
  _QWORD v60[6];
  _QWORD v61[6];
  _QWORD v62[6];
  _QWORD v63[6];
  _QWORD v64[6];
  _QWORD v65[6];
  _QWORD v66[6];
  _QWORD v67[6];
  _QWORD v68[6];
  _QWORD v69[6];
  _QWORD v70[6];
  _QWORD v71[6];
  _QWORD v72[6];
  _QWORD v73[6];
  _QWORD v74[6];
  _QWORD v75[6];
  _QWORD v76[6];
  _QWORD v77[6];
  _QWORD v78[6];
  _QWORD v79[6];
  _QWORD v80[6];
  _QWORD v81[6];
  _QWORD v82[6];
  _QWORD v83[6];
  _QWORD v84[6];
  _QWORD v85[6];
  _QWORD v86[6];
  _QWORD v87[6];
  _QWORD v88[6];
  _QWORD v89[6];
  _QWORD v90[6];
  _QWORD v91[6];
  _QWORD v92[6];
  _QWORD v93[6];
  _QWORD v94[6];
  _QWORD v95[6];
  _QWORD v96[6];
  _QWORD v97[6];
  _QWORD v98[6];
  _QWORD v99[6];
  _QWORD v100[6];
  _QWORD v101[6];
  _QWORD v102[6];
  _QWORD v103[6];
  _QWORD v104[6];
  _QWORD v105[6];
  _QWORD v106[6];
  _QWORD v107[6];
  _QWORD v108[6];
  _QWORD v109[6];
  _QWORD v110[6];
  _QWORD v111[6];
  _QWORD v112[6];
  _QWORD v113[6];
  _QWORD v114[6];
  _QWORD v115[6];
  _QWORD v116[6];
  _QWORD v117[6];
  _QWORD v118[6];
  _QWORD v119[6];
  _QWORD v120[6];
  _QWORD v121[6];
  _QWORD v122[6];
  _QWORD v123[6];
  _QWORD v124[6];
  _QWORD v125[6];
  _QWORD v126[6];
  _QWORD v127[6];
  _QWORD v128[6];
  _QWORD v129[6];
  _QWORD v130[6];
  _QWORD v131[6];
  _QWORD v132[6];
  _QWORD v133[6];
  _QWORD v134[6];
  _QWORD v135[6];
  _QWORD v136[6];
  _QWORD v137[6];
  _QWORD v138[6];
  _QWORD v139[6];
  _QWORD v140[6];
  _QWORD v141[6];
  _QWORD v142[6];
  _QWORD v143[6];
  _QWORD v144[6];
  _QWORD v145[6];
  _QWORD v146[6];
  _QWORD v147[6];
  _QWORD v148[6];
  _QWORD v149[6];
  _QWORD v150[6];
  _QWORD v151[6];
  _QWORD v152[6];
  _QWORD v153[6];
  _QWORD v154[6];
  _QWORD v155[6];
  _QWORD v156[6];
  _QWORD v157[6];
  _QWORD v158[6];
  _QWORD v159[6];
  _QWORD v160[6];
  _QWORD v161[6];
  _QWORD v162[6];
  _QWORD v163[6];
  _QWORD v164[6];
  _QWORD v165[6];
  _QWORD v166[6];
  _QWORD v167[6];
  _QWORD v168[6];
  _QWORD v169[6];
  _QWORD v170[6];
  _QWORD v171[6];
  _QWORD v172[6];
  _QWORD v173[6];
  _QWORD v174[6];
  _QWORD v175[6];
  _QWORD v176[6];
  _QWORD v177[6];
  _QWORD v178[6];
  _QWORD v179[6];
  _QWORD v180[6];
  _QWORD v181[6];
  _QWORD v182[6];
  _QWORD v183[6];
  _QWORD v184[6];
  _QWORD v185[6];
  _QWORD v186[6];
  _QWORD v187[6];
  _QWORD v188[6];
  _QWORD v189[6];
  _QWORD v190[6];
  _QWORD v191[6];
  _QWORD v192[6];
  _QWORD v193[6];
  _QWORD v194[6];
  _QWORD v195[6];
  _QWORD v196[6];
  _QWORD v197[6];
  _QWORD v198[6];
  _QWORD v199[6];
  _QWORD v200[6];
  _QWORD v201[6];
  _QWORD v202[6];
  _QWORD v203[6];
  _QWORD v204[6];
  _QWORD v205[6];
  _QWORD v206[6];
  _QWORD v207[6];
  _QWORD v208[6];
  _QWORD v209[6];
  _QWORD v210[6];
  _QWORD v211[6];
  _QWORD v212[6];
  _QWORD v213[6];
  _QWORD v214[6];
  _QWORD v215[6];
  _QWORD v216[6];
  _QWORD v217[6];
  _QWORD v218[6];
  _QWORD v219[6];
  _QWORD v220[6];
  _QWORD v221[6];
  _QWORD v222[6];
  _QWORD v223[6];
  _QWORD v224[6];
  _QWORD v225[6];
  _QWORD v226[6];
  _QWORD v227[6];
  _QWORD v228[6];
  _QWORD v229[6];
  _QWORD v230[6];
  _QWORD v231[6];
  _QWORD v232[6];
  _QWORD v233[6];
  _QWORD v234[6];
  _QWORD v235[6];
  _QWORD v236[6];
  _QWORD v237[6];
  _QWORD v238[6];
  _QWORD v239[6];
  _QWORD v240[6];
  _QWORD v241[6];
  _QWORD v242[6];
  _QWORD v243[6];
  _QWORD v244[6];
  _QWORD v245[6];
  _QWORD v246[6];
  _QWORD v247[6];
  _QWORD v248[6];
  _QWORD v249[6];
  _QWORD v250[6];
  _QWORD v251[6];
  _QWORD v252[6];
  _QWORD v253[6];
  _QWORD v254[6];
  _QWORD v255[6];
  _QWORD v256[6];
  _QWORD v257[6];
  _QWORD v258[6];
  _QWORD v259[6];
  _QWORD v260[6];
  _QWORD v261[6];
  _QWORD v262[6];
  _QWORD v263[6];
  _QWORD v264[6];
  _QWORD v265[6];
  _QWORD v266[6];
  _QWORD v267[6];
  _QWORD v268[6];
  _QWORD v269[6];
  _QWORD v270[6];
  _QWORD v271[6];
  _QWORD v272[6];
  _QWORD v273[6];
  _QWORD v274[6];
  _QWORD v275[6];
  _QWORD v276[6];
  _QWORD v277[6];
  _QWORD v278[6];
  _QWORD v279[6];
  _QWORD v280[6];
  _QWORD v281[6];
  _QWORD v282[6];
  _QWORD v283[6];
  _QWORD v284[6];
  _QWORD v285[6];
  _QWORD v286[6];
  _QWORD v287[6];
  _QWORD v288[6];
  _QWORD v289[6];
  _QWORD v290[6];
  _QWORD v291[6];
  _QWORD v292[6];
  _QWORD v293[6];
  _QWORD v294[6];
  _QWORD v295[6];
  _QWORD v296[6];
  _QWORD v297[6];
  _QWORD v298[6];
  _QWORD v299[6];
  _QWORD v300[6];
  _QWORD v301[6];
  _QWORD v302[6];
  _QWORD v303[6];
  _QWORD v304[6];
  _QWORD v305[6];
  _QWORD v306[6];
  _QWORD v307[6];
  _QWORD v308[6];
  _QWORD v309[6];
  _QWORD v310[6];
  _QWORD v311[6];
  _QWORD v312[6];
  _QWORD v313[6];
  _QWORD v314[6];
  _QWORD v315[6];
  _QWORD v316[6];
  _QWORD v317[6];
  _QWORD v318[6];
  _QWORD v319[6];
  _QWORD v320[6];
  _QWORD v321[6];
  _QWORD v322[6];
  _QWORD v323[6];
  _QWORD v324[6];
  _QWORD v325[6];
  _QWORD v326[6];
  _QWORD v327[6];
  _QWORD v328[6];
  _QWORD v329[6];
  _QWORD v330[6];
  _QWORD v331[6];
  _QWORD v332[6];
  _QWORD v333[6];
  _QWORD v334[6];
  _QWORD v335[6];
  _QWORD v336[6];
  _QWORD v337[6];
  _QWORD v338[6];
  _QWORD v339[6];
  _QWORD v340[6];
  _QWORD v341[6];
  _QWORD v342[6];
  _QWORD v343[6];
  _QWORD v344[6];
  _QWORD v345[6];
  _QWORD v346[6];
  _QWORD v347[6];
  _QWORD v348[6];
  _QWORD v349[6];
  _QWORD v350[6];
  _QWORD v351[6];
  _QWORD v352[6];
  _QWORD v353[6];
  _QWORD v354[6];
  _QWORD v355[6];
  _QWORD v356[6];
  _QWORD v357[6];
  _QWORD v358[6];
  _QWORD v359[6];
  _QWORD v360[6];
  _QWORD v361[6];
  _QWORD v362[6];
  _QWORD v363[6];
  _QWORD v364[6];
  _QWORD v365[6];
  _QWORD v366[6];
  _QWORD v367[6];
  _QWORD v368[6];
  _QWORD v369[6];
  _QWORD v370[6];
  _QWORD v371[6];
  _QWORD v372[6];
  _QWORD v373[6];
  _QWORD v374[6];
  _QWORD v375[6];
  _QWORD v376[6];
  _QWORD v377[6];
  _QWORD v378[6];
  _QWORD v379[6];
  _QWORD v380[6];
  _QWORD v381[6];
  _QWORD v382[6];
  _QWORD v383[6];
  _QWORD v384[6];
  _QWORD v385[6];
  _QWORD v386[6];
  _QWORD v387[6];
  _QWORD v388[6];
  _QWORD v389[6];
  _QWORD v390[6];
  _QWORD v391[6];
  _QWORD v392[6];
  _QWORD v393[6];
  _QWORD v394[6];
  _QWORD v395[6];
  _QWORD v396[6];
  _QWORD v397[6];
  _QWORD v398[6];
  _QWORD v399[6];
  _QWORD v400[6];
  _QWORD v401[6];
  _QWORD v402[6];
  _QWORD v403[6];
  _QWORD v404[6];
  _QWORD v405[6];
  _QWORD v406[6];
  _QWORD v407[6];
  _QWORD v408[6];
  _QWORD v409[6];
  _QWORD v410[6];
  _QWORD v411[6];
  _QWORD v412[6];
  _QWORD v413[6];
  _QWORD v414[6];
  _QWORD v415[6];
  _QWORD v416[6];
  _QWORD v417[6];
  _QWORD v418[6];
  _QWORD v419[6];
  _QWORD v420[6];
  _QWORD v421[6];
  _QWORD v422[6];
  _QWORD v423[6];
  _QWORD v424[6];
  _QWORD v425[6];
  _QWORD v426[6];
  _QWORD v427[6];
  _QWORD v428[6];
  _QWORD v429[6];
  _QWORD v430[6];
  _QWORD v431[6];
  _QWORD v432[6];
  _QWORD v433[6];
  _QWORD v434[6];
  _QWORD v435[6];
  _QWORD v436[6];
  _QWORD v437[6];
  _QWORD v438[6];
  _QWORD v439[6];
  _QWORD v440[6];
  _QWORD v441[6];
  _QWORD v442[6];
  _QWORD v443[6];
  _QWORD v444[6];
  _QWORD v445[6];
  _QWORD v446[6];
  _QWORD v447[6];
  _QWORD v448[6];
  _QWORD v449[6];
  _QWORD v450[6];
  _QWORD v451[6];
  _QWORD v452[6];
  _QWORD v453[6];
  _QWORD v454[6];
  _QWORD v455[6];
  _QWORD v456[6];
  _QWORD v457[6];
  _QWORD v458[6];
  _QWORD v459[6];
  _QWORD v460[6];
  _QWORD v461[6];
  _QWORD v462[6];
  _QWORD v463[6];
  _QWORD v464[6];
  _QWORD v465[6];
  _QWORD v466[6];
  _QWORD v467[6];
  _QWORD v468[6];
  _QWORD v469[6];
  _QWORD v470[6];
  _QWORD v471[6];
  _QWORD v472[6];
  _QWORD v473[6];
  _QWORD v474[6];
  _QWORD v475[6];
  _QWORD v476[6];
  _QWORD v477[6];
  _QWORD v478[6];
  _QWORD v479[6];
  _QWORD v480[6];
  _QWORD v481[6];
  _QWORD v482[6];
  _QWORD v483[6];
  _QWORD v484[6];
  _QWORD v485[6];
  _QWORD v486[6];
  _QWORD v487[6];
  _QWORD v488[6];
  _QWORD v489[6];
  _QWORD v490[6];
  _QWORD v491[6];
  _QWORD v492[6];
  _QWORD v493[6];
  _QWORD v494[6];
  _QWORD v495[6];
  _QWORD v496[6];
  _QWORD v497[6];
  _QWORD v498[6];
  _QWORD v499[6];
  _QWORD v500[6];
  _QWORD v501[6];
  _QWORD v502[6];
  _QWORD v503[6];
  _QWORD v504[6];
  _QWORD v505[6];
  _QWORD v506[6];
  _QWORD v507[6];
  _QWORD v508[6];
  _QWORD v509[6];
  _QWORD v510[6];
  _QWORD v511[6];
  _QWORD v512[6];
  _QWORD v513[6];
  _QWORD v514[6];
  _QWORD v515[6];
  _QWORD v516[6];
  _QWORD v517[6];
  _QWORD v518[6];
  _QWORD v519[6];
  _QWORD v520[6];
  _QWORD v521[6];
  _QWORD v522[6];
  _QWORD v523[6];
  _QWORD v524[6];
  _QWORD v525[6];
  _QWORD v526[6];
  _QWORD v527[6];
  _QWORD v528[6];
  _QWORD v529[6];
  _QWORD v530[6];
  _QWORD v531[6];
  _QWORD v532[6];
  _QWORD v533[6];
  _QWORD v534[6];
  _QWORD v535[6];
  _QWORD v536[6];
  _QWORD v537[6];
  _QWORD v538[6];
  _QWORD v539[6];
  _QWORD v540[6];
  _QWORD v541[6];
  _QWORD v542[6];
  _QWORD v543[6];
  _QWORD v544[6];
  _QWORD v545[6];
  _QWORD v546[6];
  _QWORD v547[6];
  _QWORD v548[6];
  _QWORD v549[6];
  _QWORD v550[6];
  _QWORD v551[6];
  _QWORD v552[6];
  _QWORD v553[6];
  _QWORD v554[6];
  _QWORD v555[6];
  _QWORD v556[6];
  _QWORD v557[6];
  _QWORD v558[6];
  _QWORD v559[6];
  _QWORD v560[6];
  _QWORD v561[6];
  _QWORD v562[6];
  _QWORD v563[6];
  _QWORD v564[6];
  _QWORD v565[6];
  _QWORD v566[6];
  _QWORD v567[6];
  _QWORD v568[6];
  _QWORD v569[6];
  _QWORD v570[6];
  _QWORD v571[6];
  _QWORD v572[6];
  _QWORD v573[6];
  _QWORD v574[6];
  _QWORD v575[6];
  _QWORD v576[6];
  _QWORD v577[6];
  _QWORD v578[6];
  _QWORD v579[6];
  _QWORD v580[6];
  _QWORD v581[6];
  _QWORD v582[6];
  _QWORD v583[6];
  _QWORD v584[6];
  _QWORD v585[6];
  _QWORD v586[6];
  _QWORD v587[6];
  _QWORD v588[6];
  _QWORD v589[6];
  _QWORD v590[6];
  _QWORD v591[6];
  _QWORD v592[6];
  _QWORD v593[6];
  _QWORD v594[6];
  _QWORD v595[6];
  _QWORD v596[6];
  _QWORD v597[6];
  _QWORD v598[6];
  _QWORD v599[6];
  _QWORD v600[6];
  _QWORD v601[6];
  _QWORD v602[6];
  _QWORD v603[6];
  _QWORD v604[6];
  _QWORD v605[6];
  _QWORD v606[6];
  _QWORD v607[6];
  _QWORD v608[6];
  _QWORD v609[6];
  _QWORD v610[6];
  _QWORD v611[6];
  _QWORD v612[6];
  _QWORD v613[6];
  _QWORD v614[6];
  _QWORD v615[6];
  _QWORD v616[6];
  _QWORD v617[6];
  _QWORD v618[6];
  _QWORD v619[6];
  _QWORD v620[6];
  _QWORD v621[6];
  _QWORD v622[6];
  _QWORD v623[6];
  _QWORD v624[6];
  _QWORD v625[6];
  _QWORD v626[6];
  _QWORD v627[6];
  _QWORD v628[6];
  _QWORD v629[6];
  _QWORD v630[6];
  _QWORD v631[6];
  _QWORD v632[6];
  _QWORD v633[6];
  _QWORD v634[6];
  _QWORD v635[6];
  _QWORD v636[6];
  _QWORD v637[6];
  _QWORD v638[6];
  _QWORD v639[6];
  _QWORD v640[6];
  _QWORD v641[6];
  _QWORD v642[6];
  _QWORD v643[6];
  _QWORD v644[6];
  _QWORD v645[6];
  _QWORD v646[6];
  _QWORD v647[6];
  _QWORD v648[6];
  _QWORD v649[6];
  _QWORD v650[6];
  _QWORD v651[6];
  _QWORD v652[6];
  _QWORD v653[6];
  _QWORD v654[6];
  _QWORD v655[6];
  _QWORD v656[6];
  _QWORD v657[6];
  _QWORD v658[6];
  _QWORD v659[6];
  _QWORD v660[6];
  _QWORD v661[6];
  _QWORD v662[6];
  _QWORD v663[6];
  _QWORD v664[6];
  _QWORD v665[6];
  _QWORD v666[6];
  _QWORD v667[6];
  _QWORD v668[6];
  _QWORD v669[6];
  _QWORD v670[6];
  _QWORD v671[6];
  _QWORD v672[6];
  _QWORD v673[6];
  _QWORD v674[6];
  _QWORD v675[6];
  _QWORD v676[6];
  _QWORD v677[6];
  _QWORD v678[6];
  _QWORD v679[6];
  _QWORD v680[6];
  _QWORD v681[6];
  _QWORD v682[6];
  _QWORD v683[6];
  _QWORD v684[6];
  _QWORD v685[6];
  _QWORD v686[6];
  _QWORD v687[6];
  _QWORD v688[6];
  _QWORD v689[6];
  _QWORD v690[6];
  _QWORD v691[6];
  _QWORD v692[6];
  _QWORD v693[6];
  _QWORD v694[6];
  _QWORD v695[6];
  _QWORD v696[6];
  _QWORD v697[6];
  _QWORD v698[6];
  _QWORD v699[6];
  _QWORD v700[6];
  _QWORD v701[6];
  _QWORD v702[6];
  _QWORD v703[6];
  _QWORD v704[6];
  _QWORD v705[6];
  _QWORD v706[6];
  _QWORD v707[6];
  _QWORD v708[6];
  _QWORD v709[6];
  _QWORD v710[6];
  _QWORD v711[6];
  _QWORD v712[6];
  _QWORD v713[6];
  _QWORD v714[6];
  _QWORD v715[6];
  _QWORD v716[6];
  _QWORD v717[6];
  _QWORD v718[6];
  _QWORD v719[6];
  _QWORD v720[6];
  _QWORD v721[6];
  _QWORD v722[6];
  _QWORD v723[6];
  _QWORD v724[6];
  _QWORD v725[6];
  _QWORD v726[6];
  _QWORD v727[6];
  _QWORD v728[6];
  _QWORD v729[6];
  _QWORD v730[6];
  _QWORD v731[6];
  _QWORD v732[6];
  _QWORD v733[6];
  _QWORD v734[6];
  _QWORD v735[6];
  _QWORD v736[6];
  _QWORD v737[6];
  _QWORD v738[6];
  _QWORD v739[6];
  _QWORD v740[6];
  _QWORD v741[6];
  _QWORD v742[6];
  _QWORD v743[6];
  _QWORD v744[6];
  _QWORD v745[6];
  _QWORD v746[6];
  _QWORD v747[6];
  _QWORD v748[6];
  _QWORD v749[6];
  _QWORD v750[6];
  _QWORD v751[6];
  _QWORD v752[6];
  _QWORD v753[6];
  _QWORD v754[6];
  _QWORD v755[6];
  _QWORD v756[6];
  _QWORD v757[6];
  _QWORD v758[6];
  _QWORD v759[6];
  _QWORD v760[6];
  _QWORD v761[6];
  _QWORD v762[6];
  _QWORD v763[6];
  _QWORD v764[6];
  _QWORD v765[6];
  _QWORD v766[6];
  _QWORD v767[6];
  _QWORD v768[6];
  _QWORD v769[6];
  _QWORD v770[6];
  _QWORD v771[6];
  _QWORD v772[6];
  _QWORD v773[6];
  _QWORD v774[6];
  _QWORD v775[6];
  _QWORD v776[6];
  _QWORD v777[6];
  _QWORD v778[6];
  _QWORD v779[6];
  _QWORD v780[6];
  _QWORD v781[6];
  _QWORD v782[6];
  _QWORD v783[6];
  _QWORD v784[6];
  _QWORD v785[6];
  _QWORD v786[6];
  _QWORD v787[6];
  _QWORD v788[6];
  _QWORD v789[6];
  _QWORD v790[6];
  _QWORD v791[6];
  _QWORD v792[6];
  _QWORD v793[6];
  _QWORD v794[6];
  _QWORD v795[6];
  _QWORD v796[6];
  _QWORD v797[6];
  _QWORD v798[6];
  _QWORD v799[6];
  _QWORD v800[6];
  _QWORD v801[6];
  _QWORD v802[6];
  _QWORD v803[6];
  _QWORD v804[6];
  _QWORD v805[6];
  _QWORD v806[6];
  _QWORD v807[6];
  _QWORD v808[6];
  _QWORD v809[6];
  _QWORD v810[6];
  _QWORD v811[6];
  _QWORD v812[6];
  _QWORD v813[6];
  _QWORD v814[6];
  _QWORD v815[6];
  _QWORD v816[6];
  _QWORD v817[6];
  _QWORD v818[6];
  _QWORD v819[6];
  _QWORD v820[6];
  _QWORD v821[6];
  _QWORD v822[6];
  _QWORD v823[6];
  _QWORD v824[6];
  _QWORD v825[6];
  _QWORD v826[6];
  _QWORD v827[6];
  _QWORD v828[6];
  _QWORD v829[6];
  _QWORD v830[6];
  _QWORD v831[6];
  _QWORD v832[6];
  _QWORD v833[6];
  _QWORD v834[6];
  _QWORD v835[6];
  _QWORD v836[6];
  _QWORD v837[6];
  _QWORD v838[6];
  _QWORD v839[6];
  _QWORD v840[6];
  _QWORD v841[6];
  _QWORD v842[6];
  _QWORD v843[6];
  _QWORD v844[6];
  _QWORD v845[6];
  _QWORD v846[6];
  _QWORD v847[6];
  _QWORD v848[6];
  _QWORD v849[6];
  _QWORD v850[6];
  _QWORD v851[6];
  _QWORD v852[6];
  _QWORD v853[6];
  _QWORD v854[6];
  _QWORD v855[6];
  _QWORD v856[6];
  _QWORD v857[6];
  _QWORD v858[6];
  _QWORD v859[6];
  _QWORD v860[6];
  _QWORD v861[6];
  _QWORD v862[6];
  _QWORD v863[6];
  _QWORD v864[6];
  _QWORD v865[6];
  _QWORD v866[6];
  _QWORD v867[6];
  _QWORD v868[6];
  _QWORD v869[6];
  _QWORD v870[6];
  _QWORD v871[6];
  _QWORD v872[6];
  _QWORD v873[6];
  _QWORD v874[6];
  _QWORD v875[6];
  _QWORD v876[6];
  _QWORD v877[6];
  _QWORD v878[6];
  _QWORD v879[6];
  _QWORD v880[6];
  _QWORD v881[6];
  _QWORD v882[6];
  _QWORD v883[6];
  _QWORD v884[6];
  _QWORD v885[6];
  _QWORD v886[6];
  _QWORD v887[6];
  _QWORD v888[6];
  _QWORD v889[6];
  _QWORD v890[6];
  _QWORD v891[6];
  _QWORD v892[6];
  _QWORD v893[6];
  _QWORD v894[6];
  _QWORD v895[6];
  _QWORD v896[6];
  _QWORD v897[6];
  _QWORD v898[6];
  _QWORD v899[6];
  _QWORD v900[6];
  _QWORD v901[6];
  _QWORD v902[6];
  _QWORD v903[6];
  _QWORD v904[6];
  _QWORD v905[6];
  _QWORD v906[6];
  _QWORD v907[6];
  _QWORD v908[6];
  _QWORD v909[6];
  _QWORD v910[6];
  _QWORD v911[6];
  _QWORD v912[6];
  _QWORD v913[6];
  _QWORD v914[6];
  _QWORD v915[6];
  _QWORD v916[6];
  _QWORD v917[6];
  _QWORD v918[6];
  _QWORD v919[6];
  _QWORD v920[6];
  _QWORD v921[6];
  _QWORD v922[6];
  _QWORD v923[6];
  _QWORD v924[6];
  _QWORD v925[6];
  _QWORD v926[6];
  _QWORD v927[6];
  _QWORD v928[6];
  _QWORD v929[6];
  _QWORD v930[6];
  _QWORD v931[6];
  _QWORD v932[6];
  _QWORD v933[6];
  _QWORD v934[6];
  _QWORD v935[6];
  _QWORD v936[6];
  _QWORD v937[6];
  _QWORD v938[6];
  _QWORD v939[6];
  _QWORD v940[6];
  _QWORD v941[6];
  _QWORD v942[6];
  _QWORD v943[6];
  _QWORD v944[6];
  _QWORD v945[6];
  _QWORD v946[6];
  _QWORD v947[6];
  _QWORD v948[6];
  _QWORD v949[6];
  _QWORD v950[6];
  _QWORD v951[6];
  _QWORD v952[6];
  _QWORD v953[6];
  _QWORD v954[6];
  _QWORD v955[6];
  _QWORD v956[6];
  _QWORD v957[6];
  _QWORD v958[6];
  _QWORD v959[6];
  _QWORD v960[6];
  _QWORD v961[6];
  _QWORD v962[6];
  _QWORD v963[6];
  _QWORD v964[6];
  _QWORD v965[6];
  _QWORD v966[6];
  _QWORD v967[6];
  _QWORD v968[6];
  _QWORD v969[6];
  _QWORD v970[6];
  _QWORD v971[6];
  _QWORD v972[6];
  _QWORD v973[6];
  _QWORD v974[6];
  _QWORD v975[6];
  _QWORD v976[6];
  _QWORD v977[6];
  _QWORD v978[6];
  _QWORD v979[6];
  _QWORD v980[6];
  _QWORD v981[6];
  _QWORD v982[6];
  _QWORD v983[6];
  _QWORD v984[6];
  _QWORD v985[6];
  _QWORD v986[6];
  _QWORD v987[6];
  _QWORD v988[6];
  _QWORD v989[6];
  _QWORD v990[6];
  _QWORD v991[6];
  _QWORD v992[6];
  _QWORD v993[6];
  _QWORD v994[6];
  _QWORD v995[6];
  _QWORD v996[6];
  _QWORD v997[6];
  _QWORD v998[6];
  _QWORD v999[6];
  _QWORD v1000[6];
  _QWORD v1001[6];
  _QWORD v1002[6];
  _QWORD v1003[6];
  _QWORD v1004[6];
  _QWORD v1005[6];
  _QWORD v1006[6];
  _QWORD v1007[6];
  _QWORD v1008[6];
  _QWORD v1009[6];
  _QWORD v1010[6];
  _QWORD v1011[6];
  _QWORD v1012[6];
  _QWORD v1013[6];
  _QWORD v1014[6];
  _QWORD v1015[6];
  _QWORD v1016[6];
  _QWORD v1017[6];
  _QWORD v1018[6];
  _QWORD v1019[6];
  _QWORD v1020[6];
  _QWORD v1021[6];
  _QWORD v1022[6];
  _QWORD v1023[6];
  _QWORD v1024[6];
  _QWORD v1025[6];
  _QWORD v1026[6];
  _QWORD v1027[6];
  _QWORD v1028[6];
  _QWORD v1029[6];
  _QWORD v1030[6];
  _QWORD v1031[6];
  _QWORD v1032[6];
  _QWORD v1033[6];
  _QWORD v1034[6];
  _QWORD v1035[6];
  _QWORD v1036[6];
  _QWORD v1037[6];
  _QWORD v1038[6];
  _QWORD v1039[6];
  _QWORD v1040[6];
  _QWORD v1041[6];
  _QWORD v1042[6];
  _QWORD v1043[6];
  _QWORD v1044[6];
  _QWORD v1045[6];
  _QWORD v1046[6];
  _QWORD v1047[6];
  _QWORD v1048[6];
  _QWORD v1049[6];
  _QWORD v1050[6];
  _QWORD v1051[6];
  _QWORD v1052[6];
  _QWORD v1053[6];
  _QWORD v1054[6];
  _QWORD v1055[6];
  _QWORD v1056[6];
  _QWORD v1057[6];
  _QWORD v1058[6];
  _QWORD v1059[6];
  _QWORD v1060[6];
  _QWORD v1061[6];
  _QWORD v1062[6];
  _QWORD v1063[6];
  _QWORD v1064[6];
  _QWORD v1065[6];
  _QWORD v1066[6];
  _QWORD v1067[6];
  _QWORD v1068[6];
  _QWORD v1069[6];
  _QWORD v1070[6];
  _QWORD v1071[6];
  _QWORD v1072[6];
  _QWORD v1073[6];
  _QWORD v1074[6];
  _QWORD v1075[6];
  _QWORD v1076[6];
  _QWORD v1077[6];
  _QWORD v1078[6];
  _QWORD v1079[6];
  _QWORD v1080[6];
  _QWORD v1081[6];
  _QWORD v1082[6];
  _QWORD v1083[6];
  _QWORD v1084[6];
  _QWORD v1085[6];
  _QWORD v1086[6];
  _QWORD v1087[6];
  _QWORD v1088[6];
  _QWORD v1089[6];
  _QWORD v1090[6];
  _QWORD v1091[6];
  _QWORD v1092[6];
  _QWORD v1093[6];
  _QWORD v1094[6];
  _QWORD v1095[6];
  _QWORD v1096[6];
  _QWORD v1097[6];
  _QWORD v1098[6];
  _QWORD v1099[6];
  _QWORD v1100[6];
  _QWORD v1101[6];
  _QWORD v1102[6];
  _QWORD v1103[6];
  _QWORD v1104[6];
  _QWORD v1105[6];
  _QWORD v1106[6];
  _QWORD v1107[6];
  _QWORD v1108[6];
  _QWORD v1109[6];
  _QWORD v1110[6];
  _QWORD v1111[6];
  _QWORD v1112[6];
  _QWORD v1113[6];
  _QWORD v1114[6];
  _QWORD v1115[6];
  _QWORD v1116[6];
  _QWORD v1117[6];
  _QWORD v1118[6];
  _QWORD v1119[6];
  _QWORD v1120[6];
  _QWORD v1121[6];
  _QWORD v1122[6];
  _QWORD v1123[6];
  _QWORD v1124[6];
  _QWORD v1125[6];
  _QWORD v1126[6];
  _QWORD v1127[6];
  _QWORD v1128[6];
  _QWORD v1129[6];
  _QWORD v1130[6];
  _QWORD v1131[6];
  _QWORD v1132[6];
  _QWORD v1133[6];
  _QWORD v1134[6];
  _QWORD v1135[6];
  _QWORD v1136[6];
  _QWORD v1137[6];
  _QWORD v1138[6];
  _QWORD v1139[6];
  _QWORD v1140[6];
  _QWORD v1141[6];
  _QWORD v1142[6];
  _QWORD v1143[6];
  _QWORD v1144[6];
  _QWORD v1145[6];
  _QWORD v1146[6];
  _QWORD v1147[6];
  _QWORD v1148[6];
  _QWORD v1149[6];
  _QWORD v1150[6];
  _QWORD v1151[6];
  _QWORD v1152[6];
  _QWORD v1153[6];
  _QWORD v1154[6];
  _QWORD v1155[6];
  _QWORD v1156[6];
  _QWORD v1157[6];
  _QWORD v1158[6];
  _QWORD v1159[6];
  _QWORD v1160[6];
  _QWORD v1161[6];
  _QWORD v1162[6];
  _QWORD v1163[6];
  _QWORD v1164[6];
  _QWORD v1165[6];
  _QWORD v1166[6];
  _QWORD v1167[6];
  _QWORD v1168[6];
  _QWORD v1169[6];
  _QWORD v1170[6];
  _QWORD v1171[6];
  _QWORD v1172[6];
  _QWORD v1173[6];
  _QWORD v1174[6];
  _QWORD v1175[6];
  _QWORD v1176[6];
  _QWORD v1177[6];
  _QWORD v1178[6];
  _QWORD v1179[6];
  _QWORD v1180[6];
  _QWORD v1181[6];
  _QWORD v1182[6];
  _QWORD v1183[6];
  _QWORD v1184[6];
  _QWORD v1185[6];
  _QWORD v1186[6];
  _QWORD v1187[6];
  _QWORD v1188[6];
  _QWORD v1189[6];
  _QWORD v1190[6];
  _QWORD v1191[6];
  _QWORD v1192[6];
  _QWORD v1193[6];
  _QWORD v1194[6];
  _QWORD v1195[6];
  _QWORD v1196[6];
  _QWORD v1197[6];
  _QWORD v1198[6];
  _QWORD v1199[6];
  _QWORD v1200[6];
  _QWORD v1201[6];
  _QWORD v1202[6];
  _QWORD v1203[6];
  _QWORD v1204[6];
  _QWORD v1205[6];
  _QWORD v1206[6];
  _QWORD v1207[6];
  _QWORD v1208[6];
  _QWORD v1209[6];
  _QWORD v1210[6];
  _QWORD v1211[6];
  _QWORD v1212[6];
  _QWORD v1213[6];
  _QWORD v1214[6];
  _QWORD v1215[6];
  _QWORD v1216[6];
  _QWORD v1217[6];
  _QWORD v1218[6];
  _QWORD v1219[6];
  _QWORD v1220[6];
  _QWORD v1221[6];
  _QWORD v1222[6];
  _QWORD v1223[6];
  _QWORD v1224[6];
  _QWORD v1225[6];
  _QWORD v1226[6];
  _QWORD v1227[6];
  _QWORD v1228[6];
  _QWORD v1229[6];
  _QWORD v1230[6];
  _QWORD v1231[6];
  _QWORD v1232[6];
  _QWORD v1233[6];
  _QWORD v1234[6];
  _QWORD v1235[6];
  _QWORD v1236[6];
  _QWORD v1237[6];
  _QWORD v1238[6];
  _QWORD v1239[6];
  _QWORD v1240[6];
  _QWORD v1241[6];
  _QWORD v1242[6];
  _QWORD v1243[6];
  _QWORD v1244[6];
  _QWORD v1245[6];
  _QWORD v1246[6];
  _QWORD v1247[6];
  _QWORD v1248[6];
  _QWORD v1249[6];
  _QWORD v1250[6];
  _QWORD v1251[6];
  _QWORD v1252[6];
  _QWORD v1253[6];
  _QWORD v1254[6];
  _QWORD v1255[6];
  _QWORD v1256[6];
  _QWORD v1257[6];
  _QWORD v1258[6];
  _QWORD v1259[6];
  _QWORD v1260[6];
  _QWORD v1261[6];
  _QWORD v1262[6];
  _QWORD v1263[6];
  _QWORD v1264[6];
  _QWORD v1265[6];
  _QWORD v1266[6];
  _QWORD v1267[6];
  _QWORD v1268[6];
  _QWORD v1269[6];
  _QWORD v1270[6];
  _QWORD v1271[6];
  _QWORD v1272[6];
  _QWORD v1273[6];
  _QWORD v1274[6];
  _QWORD v1275[6];
  _QWORD v1276[6];
  _QWORD v1277[6];
  _QWORD v1278[6];
  _QWORD v1279[6];
  _QWORD v1280[6];
  _QWORD v1281[6];
  _QWORD v1282[6];
  _QWORD v1283[6];
  _QWORD v1284[6];
  _QWORD v1285[6];
  _QWORD v1286[6];
  _QWORD v1287[6];
  _QWORD v1288[6];
  _QWORD v1289[6];
  _QWORD v1290[6];
  _QWORD v1291[6];
  _QWORD v1292[6];
  _QWORD v1293[6];
  _QWORD v1294[6];
  _QWORD v1295[6];
  _QWORD v1296[6];
  _QWORD v1297[6];
  _QWORD v1298[6];
  _QWORD v1299[6];
  _QWORD v1300[6];
  _QWORD v1301[6];
  _QWORD v1302[6];
  _QWORD v1303[6];
  _QWORD v1304[6];
  _QWORD v1305[6];
  _QWORD v1306[6];
  _QWORD v1307[6];
  _QWORD v1308[6];
  _QWORD v1309[6];
  _QWORD v1310[6];
  _QWORD v1311[6];
  _QWORD v1312[6];
  _QWORD v1313[6];
  _QWORD v1314[6];
  _QWORD v1315[6];
  _QWORD v1316[6];
  _QWORD v1317[6];
  _QWORD v1318[6];
  _QWORD v1319[6];
  _QWORD v1320[6];
  _QWORD v1321[6];
  _QWORD v1322[6];
  _QWORD v1323[6];
  _QWORD v1324[6];
  _QWORD v1325[6];
  _QWORD v1326[6];
  _QWORD v1327[6];
  _QWORD v1328[6];
  _QWORD v1329[6];
  _QWORD v1330[6];
  _QWORD v1331[6];
  _QWORD v1332[6];
  _QWORD v1333[6];
  _QWORD v1334[6];
  _QWORD v1335[6];
  _QWORD v1336[6];
  _QWORD v1337[6];
  _QWORD v1338[6];
  _QWORD v1339[6];
  _QWORD v1340[6];
  _QWORD v1341[6];
  _QWORD v1342[6];
  _QWORD v1343[6];
  _QWORD v1344[6];
  _QWORD v1345[6];
  _QWORD v1346[6];
  _QWORD v1347[6];
  _QWORD v1348[6];
  _QWORD v1349[6];
  _QWORD v1350[6];
  _QWORD v1351[6];
  _QWORD v1352[6];
  _QWORD v1353[6];
  _QWORD v1354[6];
  _QWORD v1355[6];
  _QWORD v1356[6];
  _QWORD v1357[6];
  _QWORD v1358[6];
  _QWORD v1359[6];
  _QWORD v1360[6];
  _QWORD v1361[6];
  _QWORD v1362[6];
  _QWORD v1363[6];
  _QWORD v1364[6];
  _QWORD v1365[6];
  _QWORD v1366[6];
  _QWORD v1367[6];
  _QWORD v1368[6];
  _QWORD v1369[6];
  _QWORD v1370[6];
  _QWORD v1371[6];
  _QWORD v1372[6];
  _QWORD v1373[6];
  _QWORD v1374[6];
  _QWORD v1375[6];
  _QWORD v1376[6];
  _QWORD v1377[6];
  _QWORD v1378[6];
  _QWORD v1379[6];
  _QWORD v1380[6];
  _QWORD v1381[6];
  _QWORD v1382[6];
  _QWORD v1383[6];
  _QWORD v1384[6];
  _QWORD v1385[6];
  _QWORD v1386[6];
  _QWORD v1387[6];
  _QWORD v1388[6];
  _QWORD v1389[6];
  _QWORD v1390[6];
  _QWORD v1391[6];
  _QWORD v1392[6];
  _QWORD v1393[6];
  _QWORD v1394[6];
  _QWORD v1395[6];
  _QWORD v1396[6];
  _QWORD v1397[6];
  _QWORD v1398[6];
  _QWORD v1399[6];
  _QWORD v1400[6];
  _QWORD v1401[6];
  _QWORD v1402[6];
  _QWORD v1403[6];
  _QWORD v1404[6];
  _QWORD v1405[6];
  _QWORD v1406[6];
  _QWORD v1407[6];
  _QWORD v1408[6];
  _QWORD v1409[6];
  _QWORD v1410[6];
  _QWORD v1411[6];
  _QWORD v1412[6];
  _QWORD v1413[6];
  _QWORD v1414[6];
  _QWORD v1415[6];
  _QWORD v1416[6];
  _QWORD v1417[6];
  _QWORD v1418[6];
  _QWORD v1419[6];
  _QWORD v1420[6];
  _QWORD v1421[6];
  _QWORD v1422[6];
  _QWORD v1423[6];
  _QWORD v1424[6];
  _QWORD v1425[6];
  _QWORD v1426[6];
  _QWORD v1427[6];
  _QWORD v1428[6];
  _QWORD v1429[6];
  _QWORD v1430[6];
  _QWORD v1431[6];
  _QWORD v1432[6];
  _QWORD v1433[6];
  _QWORD v1434[6];
  _QWORD v1435[6];
  _QWORD v1436[6];
  _QWORD v1437[6];
  _QWORD v1438[6];
  _QWORD v1439[6];
  _QWORD v1440[6];
  _QWORD v1441[6];
  _QWORD v1442[6];
  _QWORD v1443[6];
  _QWORD v1444[6];
  _QWORD v1445[6];
  _QWORD v1446[6];
  _QWORD v1447[6];
  _QWORD v1448[6];
  _QWORD v1449[6];
  _QWORD v1450[6];
  _QWORD v1451[6];
  _QWORD v1452[6];
  _QWORD v1453[6];
  _QWORD v1454[6];
  _QWORD v1455[6];
  _QWORD v1456[6];
  _QWORD v1457[6];
  _QWORD v1458[6];
  _QWORD v1459[6];
  _QWORD v1460[6];
  _QWORD v1461[6];
  _QWORD v1462[6];
  _QWORD v1463[6];
  _QWORD v1464[6];
  _QWORD v1465[6];
  _QWORD v1466[6];
  _QWORD v1467[6];
  _QWORD v1468[6];
  _QWORD v1469[6];
  _QWORD v1470[6];
  _QWORD v1471[6];
  _QWORD v1472[6];
  _QWORD v1473[6];
  _QWORD v1474[6];
  _QWORD v1475[6];
  _QWORD v1476[6];
  _QWORD v1477[6];
  _QWORD v1478[6];
  _QWORD v1479[6];
  _QWORD v1480[6];
  _QWORD v1481[6];
  _QWORD v1482[6];
  _QWORD v1483[6];
  _QWORD v1484[6];
  _QWORD v1485[6];
  _QWORD v1486[6];
  _QWORD v1487[6];
  _QWORD v1488[6];
  _QWORD v1489[6];
  _QWORD v1490[6];
  _QWORD v1491[6];
  _QWORD v1492[6];
  _QWORD v1493[6];
  _QWORD v1494[6];
  _QWORD v1495[6];
  _QWORD v1496[6];
  _QWORD v1497[6];
  _QWORD v1498[6];
  _QWORD v1499[6];
  _QWORD v1500[6];
  _QWORD v1501[6];
  _QWORD v1502[6];
  _QWORD v1503[6];
  _QWORD v1504[6];
  _QWORD v1505[6];
  _QWORD v1506[6];
  _QWORD v1507[6];
  _QWORD v1508[6];
  _QWORD v1509[6];
  _QWORD v1510[6];
  _QWORD v1511[6];
  _QWORD v1512[6];
  _QWORD v1513[6];
  _QWORD v1514[6];
  _QWORD v1515[6];
  _QWORD v1516[6];
  _QWORD v1517[6];
  _QWORD v1518[6];
  _QWORD v1519[6];
  _QWORD v1520[6];
  _QWORD v1521[6];
  _QWORD v1522[6];
  _QWORD v1523[6];
  _QWORD v1524[6];
  _QWORD v1525[6];
  _QWORD v1526[6];
  _QWORD v1527[6];
  _QWORD v1528[6];
  _QWORD v1529[6];
  _QWORD v1530[6];
  _QWORD v1531[6];
  _QWORD v1532[6];
  _QWORD v1533[6];
  _QWORD v1534[6];
  _QWORD v1535[6];
  _QWORD v1536[6];
  _QWORD v1537[6];
  _QWORD v1538[6];
  _QWORD v1539[6];
  _QWORD v1540[6];
  _QWORD v1541[6];
  _QWORD v1542[6];
  _QWORD v1543[6];
  _QWORD v1544[6];
  _QWORD v1545[6];
  _QWORD v1546[6];
  _QWORD v1547[6];
  _QWORD v1548[6];
  _QWORD v1549[6];
  _QWORD v1550[6];
  _QWORD v1551[6];
  _QWORD v1552[6];
  _QWORD v1553[6];
  _QWORD v1554[6];
  _QWORD v1555[6];
  _QWORD v1556[6];
  _QWORD v1557[6];
  _QWORD v1558[6];
  _QWORD v1559[6];
  _QWORD v1560[6];
  _QWORD v1561[6];
  _QWORD v1562[6];
  _QWORD v1563[6];
  _QWORD v1564[6];
  _QWORD v1565[6];
  _QWORD v1566[6];
  _QWORD v1567[6];
  _QWORD v1568[6];
  _QWORD v1569[6];
  _QWORD v1570[6];
  _QWORD v1571[6];
  _QWORD v1572[6];
  _QWORD v1573[6];
  _QWORD v1574[6];
  _QWORD v1575[6];
  _QWORD v1576[6];
  _QWORD v1577[6];
  _QWORD v1578[6];
  _QWORD v1579[6];
  _QWORD v1580[6];
  _QWORD v1581[6];
  _QWORD v1582[6];
  _QWORD v1583[6];
  _QWORD v1584[6];
  _QWORD v1585[6];
  _QWORD v1586[6];
  _QWORD v1587[6];
  _QWORD v1588[6];
  _QWORD v1589[6];
  _QWORD v1590[6];
  _QWORD v1591[6];
  _QWORD v1592[6];
  _QWORD v1593[6];
  _QWORD v1594[6];
  _QWORD v1595[6];
  _QWORD v1596[6];
  _QWORD v1597[6];
  _QWORD v1598[6];
  _QWORD v1599[6];
  _QWORD v1600[6];
  _QWORD v1601[6];
  _QWORD v1602[6];
  _QWORD v1603[6];
  _QWORD v1604[6];
  _QWORD v1605[6];
  _QWORD v1606[6];
  _QWORD v1607[6];
  _QWORD v1608[6];
  _QWORD v1609[6];
  _QWORD v1610[6];
  _QWORD v1611[6];
  _QWORD v1612[6];
  _QWORD v1613[6];
  _QWORD v1614[6];
  _QWORD v1615[6];
  _QWORD v1616[6];
  _QWORD v1617[6];
  _QWORD v1618[6];
  _QWORD v1619[6];
  _QWORD v1620[6];
  _QWORD v1621[6];
  _QWORD v1622[6];
  _QWORD v1623[6];
  _QWORD v1624[6];
  _QWORD v1625[6];
  _QWORD v1626[6];
  _QWORD v1627[6];
  _QWORD v1628[6];
  _QWORD v1629[6];
  _QWORD v1630[6];
  _QWORD v1631[6];
  _QWORD v1632[6];
  _QWORD v1633[6];
  _QWORD v1634[6];
  _QWORD v1635[6];
  _QWORD v1636[6];
  _QWORD v1637[6];
  _QWORD v1638[6];
  _QWORD v1639[6];
  _QWORD v1640[6];
  _QWORD v1641[6];
  _QWORD v1642[6];
  _QWORD v1643[6];
  _QWORD v1644[6];
  _QWORD v1645[6];
  _QWORD v1646[6];
  _QWORD v1647[6];
  _QWORD v1648[6];
  _QWORD v1649[6];
  _QWORD v1650[6];
  _QWORD v1651[6];
  _QWORD v1652[6];
  _QWORD v1653[6];
  _QWORD v1654[6];
  _QWORD v1655[6];
  _QWORD v1656[6];
  _QWORD v1657[6];
  _QWORD v1658[6];
  _QWORD v1659[6];
  _QWORD v1660[6];
  _QWORD v1661[6];
  _QWORD v1662[6];
  _QWORD v1663[6];
  _QWORD v1664[6];
  _QWORD v1665[6];
  _QWORD v1666[6];
  _QWORD v1667[6];
  _QWORD v1668[6];
  _QWORD v1669[6];
  _QWORD v1670[6];
  _QWORD v1671[6];
  _QWORD v1672[6];
  _QWORD v1673[6];
  _QWORD v1674[6];
  _QWORD v1675[6];
  _QWORD v1676[6];
  _QWORD v1677[6];
  _QWORD v1678[6];
  _QWORD v1679[6];
  _QWORD v1680[6];
  _QWORD v1681[6];
  _QWORD v1682[6];
  _QWORD v1683[6];
  _QWORD v1684[6];
  _QWORD v1685[6];
  _QWORD v1686[6];
  _QWORD v1687[6];
  _QWORD v1688[6];
  _QWORD v1689[6];
  _QWORD v1690[6];
  _QWORD v1691[6];
  _QWORD v1692[6];
  _QWORD v1693[6];
  _QWORD v1694[6];
  _QWORD v1695[6];
  _QWORD v1696[6];
  _QWORD v1697[6];
  _QWORD v1698[6];
  _QWORD v1699[6];
  _QWORD v1700[6];
  _QWORD v1701[6];
  _QWORD v1702[6];
  _QWORD v1703[6];
  _QWORD v1704[6];
  _QWORD v1705[6];
  _QWORD v1706[6];
  _QWORD v1707[6];
  _QWORD v1708[6];
  _QWORD v1709[6];
  _QWORD v1710[6];
  _QWORD v1711[6];
  _QWORD v1712[6];
  _QWORD v1713[6];
  _QWORD v1714[6];
  _QWORD v1715[6];
  _QWORD v1716[6];
  _QWORD v1717[6];
  _QWORD v1718[6];
  _QWORD v1719[6];
  _QWORD v1720[6];
  _QWORD v1721[6];
  _QWORD v1722[6];
  _QWORD v1723[6];
  _QWORD v1724[6];
  _QWORD v1725[6];
  _QWORD v1726[6];
  _QWORD v1727[6];
  _QWORD v1728[6];
  _QWORD v1729[6];
  _QWORD v1730[6];
  _QWORD v1731[6];
  _QWORD v1732[6];
  _QWORD v1733[6];
  _QWORD v1734[6];
  _QWORD v1735[6];
  _QWORD v1736[6];
  _QWORD v1737[6];
  _QWORD v1738[6];
  _QWORD v1739[6];
  _QWORD v1740[6];
  _QWORD v1741[6];
  _QWORD v1742[6];
  _QWORD v1743[6];
  _QWORD v1744[6];
  _QWORD v1745[6];
  _QWORD v1746[6];
  _QWORD v1747[6];
  _QWORD v1748[6];
  _QWORD v1749[6];
  _QWORD v1750[6];
  _QWORD v1751[6];
  _QWORD v1752[6];
  _QWORD v1753[6];
  _QWORD v1754[6];
  _QWORD v1755[6];
  _QWORD v1756[6];
  _QWORD v1757[6];
  _QWORD v1758[6];
  _QWORD v1759[6];
  _QWORD v1760[6];
  _QWORD v1761[6];
  _QWORD v1762[6];
  _QWORD v1763[6];
  _QWORD v1764[6];
  _QWORD v1765[6];
  _QWORD v1766[6];
  _QWORD v1767[6];
  _QWORD v1768[6];
  _QWORD v1769[6];
  _QWORD v1770[6];
  _QWORD v1771[6];
  _QWORD v1772[6];
  _QWORD v1773[6];
  _QWORD v1774[6];
  _QWORD v1775[6];
  _QWORD v1776[6];
  _QWORD v1777[6];
  _QWORD v1778[6];
  _QWORD v1779[6];
  _QWORD v1780[6];
  _QWORD v1781[6];
  _QWORD v1782[6];
  _QWORD v1783[6];
  _QWORD v1784[6];
  _QWORD v1785[6];
  _QWORD v1786[6];
  _QWORD v1787[6];
  _QWORD v1788[6];
  _QWORD v1789[6];
  _QWORD v1790[6];
  _QWORD v1791[6];
  _QWORD v1792[6];
  _QWORD v1793[6];
  _QWORD v1794[6];
  _QWORD v1795[6];
  _QWORD v1796[6];
  _QWORD v1797[6];
  _QWORD v1798[6];
  _QWORD v1799[6];
  _QWORD v1800[6];
  _QWORD v1801[6];
  _QWORD v1802[6];
  _QWORD v1803[6];
  _QWORD v1804[6];
  _QWORD v1805[6];
  _QWORD v1806[6];
  _QWORD v1807[6];
  _QWORD v1808[6];
  _QWORD v1809[7];

  v1 = (_QWORD *)MEMORY[0x1E0C80A78](this);
  v1809[6] = *MEMORY[0x1E0C80C00];
  if ((v2 & 1) == 0
  {
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v5, "\u200Fينتاك", "ي***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v6, "\u200Fوللكسكوس", "و******س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v7, "\u200Fوللكساس", "و*****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v8, "\u200Fوللكس", "و***س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v9, "\u200Fوللشرموطة", "و*******ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v10, "\u200Fوللشرموطات", "و********ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v11, "\u200Fوللزوب", "و****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v12, "\u200Fوللزباب", "و*****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v13, "\u200Fوللزب", "و***ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v14, "\u200Fوللخروات", "و******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v15, "\u200Fوللخرة", "و****ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v16, "\u200Fولكسي", "و***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v17, "\u200Fولكسهن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v18, "\u200Fولكسهم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v19, "\u200Fولكسها", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v20, "\u200Fولكسه", "و***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v21, "\u200Fولكسنا", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v22, "\u200Fولكسكوسي", "و******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v23, "\u200Fولكسكوسهن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v24, "\u200Fولكسكوسهم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v25, "\u200Fولكسكوسها", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v26, "\u200Fولكسكوسه", "و******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v27, "\u200Fولكسكوسنا", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v28, "\u200Fولكسكوسكن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v29, "\u200Fولكسكوسكم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v30, "\u200Fولكسكوسك", "و******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v31, "\u200Fولكسكوس", "و*****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v32, "\u200Fولكسكن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v33, "\u200Fولكسكم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v34, "\u200Fولكسك", "و***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v35, "\u200Fولكساسي", "و*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v36, "\u200Fولكساسهن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v37, "\u200Fولكساسهم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v38, "\u200Fولكساسها", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v39, "\u200Fولكساسه", "و*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v40, "\u200Fولكساسنا", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v41, "\u200Fولكساسكن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v42, "\u200Fولكساسكم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v43, "\u200Fولكساسك", "و*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v44, "\u200Fولكساس", "و****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v45, "\u200Fولكس", "و**س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v46, "\u200Fولشرموطتي", "و*******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v47, "\u200Fولشرموطتهن", "و********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v48, "\u200Fولشرموطتهم", "و********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v49, "\u200Fولشرموطتها", "و********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v50, "\u200Fولشرموطته", "و*******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v51, "\u200Fولشرموطتنا", "و********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v52, "\u200Fولشرموطتكن", "و********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v53, "\u200Fولشرموطتكم", "و********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v54, "\u200Fولشرموطتك", "و*******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v55, "\u200Fولشرموطة", "و******ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v56, "\u200Fولشرموطاتي", "و********ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[26],char const(&)[14],0>(v57, "\u200Fولشرموطاتهن", "و*********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[26],char const(&)[14],0>(v58, "\u200Fولشرموطاتهم", "و*********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[26],char const(&)[14],0>(v59, "\u200Fولشرموطاتها", "و*********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v60, "\u200Fولشرموطاته", "و********ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[26],char const(&)[14],0>(v61, "\u200Fولشرموطاتنا", "و*********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[26],char const(&)[14],0>(v62, "\u200Fولشرموطاتكن", "و*********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[26],char const(&)[14],0>(v63, "\u200Fولشرموطاتكم", "و*********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v64, "\u200Fولشرموطاتك", "و********ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v65, "\u200Fولشرموطات", "و*******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v66, "\u200Fولزوبي", "و****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v67, "\u200Fولزوبهن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v68, "\u200Fولزوبهم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v69, "\u200Fولزوبها", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v70, "\u200Fولزوبه", "و****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v71, "\u200Fولزوبنا", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v72, "\u200Fولزوبكن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v73, "\u200Fولزوبكم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v74, "\u200Fولزوبك", "و****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v75, "\u200Fولزوب", "و***ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v76, "\u200Fولزبي", "و***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v77, "\u200Fولزبهن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v78, "\u200Fولزبهم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v79, "\u200Fولزبها", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v80, "\u200Fولزبه", "و***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v81, "\u200Fولزبنا", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v82, "\u200Fولزبكن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v83, "\u200Fولزبكم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v84, "\u200Fولزبك", "و***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v85, "\u200Fولزبابي", "و*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v86, "\u200Fولزبابهن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v87, "\u200Fولزبابهم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v88, "\u200Fولزبابها", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v89, "\u200Fولزبابه", "و*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v90, "\u200Fولزبابنا", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v91, "\u200Fولزبابكن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v92, "\u200Fولزبابكم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v93, "\u200Fولزبابك", "و*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v94, "\u200Fولزباب", "و****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v95, "\u200Fولزب", "و**ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v96, "\u200Fولخرواتي", "و******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v97, "\u200Fولخرواتهن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v98, "\u200Fولخرواتهم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v99, "\u200Fولخرواتها", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v100, "\u200Fولخرواته", "و******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v101, "\u200Fولخرواتنا", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v102, "\u200Fولخرواتكن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v103, "\u200Fولخرواتكم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v104, "\u200Fولخرواتك", "و******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v105, "\u200Fولخروات", "و*****ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v106, "\u200Fولخرتي", "و****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v107, "\u200Fولخرتهن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v108, "\u200Fولخرتهم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v109, "\u200Fولخرتها", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v110, "\u200Fولخرته", "و****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v111, "\u200Fولخرتنا", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v112, "\u200Fولخرتكن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v113, "\u200Fولخرتكم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v114, "\u200Fولخرتك", "و****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v115, "\u200Fولخرة", "و***ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v116, "\u200Fوككسي", "و***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v117, "\u200Fوككسهن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v118, "\u200Fوككسهم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v119, "\u200Fوككسها", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v120, "\u200Fوككسه", "و***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v121, "\u200Fوككسنا", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v122, "\u200Fوككسكوسي", "و******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v123, "\u200Fوككسكوسهن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v124, "\u200Fوككسكوسهم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v125, "\u200Fوككسكوسها", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v126, "\u200Fوككسكوسه", "و******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v127, "\u200Fوككسكوسنا", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v128, "\u200Fوككسكوسكن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v129, "\u200Fوككسكوسكم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v130, "\u200Fوككسكوسك", "و******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v131, "\u200Fوككسكوس", "و*****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v132, "\u200Fوككسكن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v133, "\u200Fوككسكم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v134, "\u200Fوككسك", "و***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v135, "\u200Fوككساسي", "و*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v136, "\u200Fوككساسهن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v137, "\u200Fوككساسهم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v138, "\u200Fوككساسها", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v139, "\u200Fوككساسه", "و*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v140, "\u200Fوككساسنا", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v141, "\u200Fوككساسكن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v142, "\u200Fوككساسكم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v143, "\u200Fوككساسك", "و*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v144, "\u200Fوككساس", "و****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v145, "\u200Fوككس", "و**س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v146, "\u200Fوكشرموطتي", "و*******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v147, "\u200Fوكشرموطتهن", "و********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v148, "\u200Fوكشرموطتهم", "و********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v149, "\u200Fوكشرموطتها", "و********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v150, "\u200Fوكشرموطته", "و*******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v151, "\u200Fوكشرموطتنا", "و********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v152, "\u200Fوكشرموطتكن", "و********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v153, "\u200Fوكشرموطتكم", "و********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v154, "\u200Fوكشرموطتك", "و*******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v155, "\u200Fوكشرموطة", "و******ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v156, "\u200Fوكشرموطاتي", "و********ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[26],char const(&)[14],0>(v157, "\u200Fوكشرموطاتهن", "و*********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[26],char const(&)[14],0>(v158, "\u200Fوكشرموطاتهم", "و*********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[26],char const(&)[14],0>(v159, "\u200Fوكشرموطاتها", "و*********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v160, "\u200Fوكشرموطاته", "و********ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[26],char const(&)[14],0>(v161, "\u200Fوكشرموطاتنا", "و*********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[26],char const(&)[14],0>(v162, "\u200Fوكشرموطاتكن", "و*********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[26],char const(&)[14],0>(v163, "\u200Fوكشرموطاتكم", "و*********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v164, "\u200Fوكشرموطاتك", "و********ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v165, "\u200Fوكشرموطات", "و*******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v166, "\u200Fوكسي", "و**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v167, "\u200Fوكسهن", "و***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v168, "\u200Fوكسهم", "و***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v169, "\u200Fوكسها", "و***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v170, "\u200Fوكسه", "و**ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v171, "\u200Fوكسنا", "و***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v172, "\u200Fوكسكوسي", "و*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v173, "\u200Fوكسكوسهن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v174, "\u200Fوكسكوسهم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v175, "\u200Fوكسكوسها", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v176, "\u200Fوكسكوسه", "و*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v177, "\u200Fوكسكوسنا", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v178, "\u200Fوكسكوسكن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v179, "\u200Fوكسكوسكم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v180, "\u200Fوكسكوسك", "و*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v181, "\u200Fوكسكوس", "و****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v182, "\u200Fوكسكن", "و***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v183, "\u200Fوكسكم", "و***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v184, "\u200Fوكسك", "و**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v185, "\u200Fوكساسي", "و****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v186, "\u200Fوكساسهن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v187, "\u200Fوكساسهم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v188, "\u200Fوكساسها", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v189, "\u200Fوكساسه", "و****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v190, "\u200Fوكساسنا", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v191, "\u200Fوكساسكن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v192, "\u200Fوكساسكم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v193, "\u200Fوكساسك", "و****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v194, "\u200Fوكساس", "و***س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v195, "\u200Fوكس", "و*س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v196, "\u200Fوكزوبي", "و****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v197, "\u200Fوكزوبهن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v198, "\u200Fوكزوبهم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v199, "\u200Fوكزوبها", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v200, "\u200Fوكزوبه", "و****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v201, "\u200Fوكزوبنا", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v202, "\u200Fوكزوبكن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v203, "\u200Fوكزوبكم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v204, "\u200Fوكزوبك", "و****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v205, "\u200Fوكزوب", "و***ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v206, "\u200Fوكزبي", "و***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v207, "\u200Fوكزبهن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v208, "\u200Fوكزبهم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v209, "\u200Fوكزبها", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v210, "\u200Fوكزبه", "و***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v211, "\u200Fوكزبنا", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v212, "\u200Fوكزبكن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v213, "\u200Fوكزبكم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v214, "\u200Fوكزبك", "و***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v215, "\u200Fوكزبابي", "و*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v216, "\u200Fوكزبابهن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v217, "\u200Fوكزبابهم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v218, "\u200Fوكزبابها", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v219, "\u200Fوكزبابه", "و*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v220, "\u200Fوكزبابنا", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v221, "\u200Fوكزبابكن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v222, "\u200Fوكزبابكم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v223, "\u200Fوكزبابك", "و*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v224, "\u200Fوكزباب", "و****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v225, "\u200Fوكزب", "و**ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v226, "\u200Fوكخرواتي", "و******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v227, "\u200Fوكخرواتهن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v228, "\u200Fوكخرواتهم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v229, "\u200Fوكخرواتها", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v230, "\u200Fوكخرواته", "و******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v231, "\u200Fوكخرواتنا", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v232, "\u200Fوكخرواتكن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v233, "\u200Fوكخرواتكم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v234, "\u200Fوكخرواتك", "و******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v235, "\u200Fوكخروات", "و*****ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v236, "\u200Fوكخرتهن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v237, "\u200Fوكخرتهم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v238, "\u200Fوكخرتها", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v239, "\u200Fوكخرتنا", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v240, "\u200Fوكخرتكن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v241, "\u200Fوكخرتكم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v242, "\u200Fوكخرة", "و***ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v243, "\u200Fوكالكسكوس", "و*******س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v244, "\u200Fوكالكساس", "و******س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v245, "\u200Fوكالكس", "و****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v246, "\u200Fوكالشرموطة", "و********ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[26],char const(&)[14],0>(v247, "\u200Fوكالشرموطات", "و*********ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v248, "\u200Fوكالزوب", "و*****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v249, "\u200Fوكالزباب", "و******ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v250, "\u200Fوكالزب", "و****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v251, "\u200Fوكالخروات", "و*******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v252, "\u200Fوكالخرة", "و*****ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v253, "\u200Fوشرموطتي", "و******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v254, "\u200Fوشرموطتهن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v255, "\u200Fوشرموطتهم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v256, "\u200Fوشرموطتها", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v257, "\u200Fوشرموطته", "و******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v258, "\u200Fوشرموطتنا", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v259, "\u200Fوشرموطتكن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v260, "\u200Fوشرموطتكم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v261, "\u200Fوشرموطتك", "و******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v262, "\u200Fوشرموطة", "و*****ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v263, "\u200Fوشرموطاتي", "و*******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v264, "\u200Fوشرموطاتهن", "و********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v265, "\u200Fوشرموطاتهم", "و********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v266, "\u200Fوشرموطاتها", "و********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v267, "\u200Fوشرموطاته", "و*******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v268, "\u200Fوشرموطاتنا", "و********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v269, "\u200Fوشرموطاتكن", "و********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v270, "\u200Fوشرموطاتكم", "و********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v271, "\u200Fوشرموطاتك", "و*******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v272, "\u200Fوشرموطات", "و******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v273, "\u200Fوزوبي", "و***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v274, "\u200Fوزوبهن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v275, "\u200Fوزوبهم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v276, "\u200Fوزوبها", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v277, "\u200Fوزوبه", "و***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v278, "\u200Fوزوبنا", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v279, "\u200Fوزوبكن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v280, "\u200Fوزوبكم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v281, "\u200Fوزوبك", "و***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v282, "\u200Fوزوب", "و**ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v283, "\u200Fوزبي", "و**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v284, "\u200Fوزبهن", "و***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v285, "\u200Fوزبهم", "و***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v286, "\u200Fوزبها", "و***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v287, "\u200Fوزبه", "و**ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v288, "\u200Fوزبنا", "و***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v289, "\u200Fوزبكن", "و***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v290, "\u200Fوزبكم", "و***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v291, "\u200Fوزبك", "و**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v292, "\u200Fوزبابي", "و****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v293, "\u200Fوزبابهن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v294, "\u200Fوزبابهم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v295, "\u200Fوزبابها", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v296, "\u200Fوزبابه", "و****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v297, "\u200Fوزبابنا", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v298, "\u200Fوزبابكن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v299, "\u200Fوزبابكم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v300, "\u200Fوزبابك", "و****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v301, "\u200Fوزباب", "و***ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v302, "\u200Fوزب", "و*ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v303, "\u200Fوخرواتي", "و*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v304, "\u200Fوخرواتهن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v305, "\u200Fوخرواتهم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v306, "\u200Fوخرواتها", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v307, "\u200Fوخرواته", "و*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v308, "\u200Fوخرواتنا", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v309, "\u200Fوخرواتكن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v310, "\u200Fوخرواتكم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v311, "\u200Fوخرواتك", "و*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v312, "\u200Fوخروات", "و****ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v313, "\u200Fوخرتي", "و***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v314, "\u200Fوخرته", "و***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v315, "\u200Fوخرتك", "و***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v316, "\u200Fوخرة", "و**ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v317, "\u200Fوبكسي", "و***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v318, "\u200Fوبكسهن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v319, "\u200Fوبكسهم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v320, "\u200Fوبكسها", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v321, "\u200Fوبكسه", "و***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v322, "\u200Fوبكسنا", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v323, "\u200Fوبكسكوسي", "و******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v324, "\u200Fوبكسكوسهن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v325, "\u200Fوبكسكوسهم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v326, "\u200Fوبكسكوسها", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v327, "\u200Fوبكسكوسه", "و******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v328, "\u200Fوبكسكوسنا", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v329, "\u200Fوبكسكوسكن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v330, "\u200Fوبكسكوسكم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v331, "\u200Fوبكسكوسك", "و******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v332, "\u200Fوبكسكوس", "و*****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v333, "\u200Fوبكسكن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v334, "\u200Fوبكسكم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v335, "\u200Fوبكسك", "و***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v336, "\u200Fوبكساسي", "و*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v337, "\u200Fوبكساسهن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v338, "\u200Fوبكساسهم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v339, "\u200Fوبكساسها", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v340, "\u200Fوبكساسه", "و*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v341, "\u200Fوبكساسنا", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v342, "\u200Fوبكساسكن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v343, "\u200Fوبكساسكم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v344, "\u200Fوبكساسك", "و*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v345, "\u200Fوبكساس", "و****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v346, "\u200Fوبكس", "و**س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v347, "\u200Fوبشرموطتي", "و*******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v348, "\u200Fوبشرموطتهن", "و********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v349, "\u200Fوبشرموطتهم", "و********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v350, "\u200Fوبشرموطتها", "و********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v351, "\u200Fوبشرموطته", "و*******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v352, "\u200Fوبشرموطتنا", "و********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v353, "\u200Fوبشرموطتكن", "و********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v354, "\u200Fوبشرموطتكم", "و********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v355, "\u200Fوبشرموطتك", "و*******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v356, "\u200Fوبشرموطة", "و******ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v357, "\u200Fوبشرموطاتي", "و********ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[26],char const(&)[14],0>(v358, "\u200Fوبشرموطاتهن", "و*********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[26],char const(&)[14],0>(v359, "\u200Fوبشرموطاتهم", "و*********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[26],char const(&)[14],0>(v360, "\u200Fوبشرموطاتها", "و*********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v361, "\u200Fوبشرموطاته", "و********ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[26],char const(&)[14],0>(v362, "\u200Fوبشرموطاتنا", "و*********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[26],char const(&)[14],0>(v363, "\u200Fوبشرموطاتكن", "و*********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[26],char const(&)[14],0>(v364, "\u200Fوبشرموطاتكم", "و*********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v365, "\u200Fوبشرموطاتك", "و********ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v366, "\u200Fوبشرموطات", "و*******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v367, "\u200Fوبزوبي", "و****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v368, "\u200Fوبزوبهن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v369, "\u200Fوبزوبهم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v370, "\u200Fوبزوبها", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v371, "\u200Fوبزوبه", "و****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v372, "\u200Fوبزوبنا", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v373, "\u200Fوبزوبكن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v374, "\u200Fوبزوبكم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v375, "\u200Fوبزوبك", "و****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v376, "\u200Fوبزوب", "و***ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v377, "\u200Fوبزبي", "و***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v378, "\u200Fوبزبهن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v379, "\u200Fوبزبهم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v380, "\u200Fوبزبها", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v381, "\u200Fوبزبه", "و***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v382, "\u200Fوبزبنا", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v383, "\u200Fوبزبكن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v384, "\u200Fوبزبكم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v385, "\u200Fوبزبك", "و***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v386, "\u200Fوبزبابي", "و*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v387, "\u200Fوبزبابهن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v388, "\u200Fوبزبابهم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v389, "\u200Fوبزبابها", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v390, "\u200Fوبزبابه", "و*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v391, "\u200Fوبزبابنا", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v392, "\u200Fوبزبابكن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v393, "\u200Fوبزبابكم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v394, "\u200Fوبزبابك", "و*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v395, "\u200Fوبزباب", "و****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v396, "\u200Fوبزب", "و**ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v397, "\u200Fوبخرواتي", "و******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v398, "\u200Fوبخرواتهن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v399, "\u200Fوبخرواتهم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v400, "\u200Fوبخرواتها", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v401, "\u200Fوبخرواته", "و******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v402, "\u200Fوبخرواتنا", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v403, "\u200Fوبخرواتكن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v404, "\u200Fوبخرواتكم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v405, "\u200Fوبخرواتك", "و******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v406, "\u200Fوبخروات", "و*****ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v407, "\u200Fوبخرتهم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v408, "\u200Fوبخرة", "و***ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v409, "\u200Fوبالكسكوس", "و*******س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v410, "\u200Fوبالكساس", "و******س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v411, "\u200Fوبالكس", "و****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v412, "\u200Fوبالشرموطة", "و********ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[26],char const(&)[14],0>(v413, "\u200Fوبالشرموطات", "و*********ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v414, "\u200Fوبالزوب", "و*****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v415, "\u200Fوبالزباب", "و******ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v416, "\u200Fوبالزب", "و****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v417, "\u200Fوبالخروات", "و*******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v418, "\u200Fوبالخرة", "و*****ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v419, "\u200Fوالكسكوس", "و******س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v420, "\u200Fوالكساس", "و*****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v421, "\u200Fوالكس", "و***س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v422, "\u200Fوالشرموطة", "و*******ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v423, "\u200Fوالشرموطات", "و********ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v424, "\u200Fوالزوب", "و****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v425, "\u200Fوالزباب", "و*****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v426, "\u200Fوالزب", "و***ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v427, "\u200Fوالخروات", "و******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v428, "\u200Fوالخرة", "و****ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v429, "\u200Fنيكيني", "ن****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v430, "\u200Fنيكني", "ن***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v431, "\u200Fنيك", "ن*ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v432, "\u200Fنياكة", "ن***ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v433, "\u200Fللكسكوس", "ل*****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v434, "\u200Fللكساس", "ل****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v435, "\u200Fللكس", "ل**س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v436, "\u200Fللشرموطة", "ل******ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v437, "\u200Fللشرموطات", "ل*******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v438, "\u200Fللزوب", "ل***ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v439, "\u200Fللزباب", "ل****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v440, "\u200Fللزب", "ل**ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v441, "\u200Fللخروات", "ل*****ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v442, "\u200Fللخرة", "ل***ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v443, "\u200Fلكسي", "ل**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v444, "\u200Fلكسهن", "ل***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v445, "\u200Fلكسهم", "ل***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v446, "\u200Fلكسها", "ل***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v447, "\u200Fلكسه", "ل**ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v448, "\u200Fلكسنا", "ل***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v449, "\u200Fلكسكوسي", "ل*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v450, "\u200Fلكسكوسهن", "ل******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v451, "\u200Fلكسكوسهم", "ل******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v452, "\u200Fلكسكوسها", "ل******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v453, "\u200Fلكسكوسه", "ل*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v454, "\u200Fلكسكوسنا", "ل******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v455, "\u200Fلكسكوسكن", "ل******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v456, "\u200Fلكسكوسكم", "ل******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v457, "\u200Fلكسكوسك", "ل*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v458, "\u200Fلكسكوس", "ل****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v459, "\u200Fلكسكن", "ل***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v460, "\u200Fلكسكم", "ل***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v461, "\u200Fلكسك", "ل**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v462, "\u200Fلكساسي", "ل****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v463, "\u200Fلكساسهن", "ل*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v464, "\u200Fلكساسهم", "ل*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v465, "\u200Fلكساسها", "ل*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v466, "\u200Fلكساسه", "ل****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v467, "\u200Fلكساسنا", "ل*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v468, "\u200Fلكساسكن", "ل*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v469, "\u200Fلكساسكم", "ل*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v470, "\u200Fلكساسك", "ل****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v471, "\u200Fلكساس", "ل***س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v472, "\u200Fلكس", "ل*س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v473, "\u200Fلشرموطتي", "ل******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v474, "\u200Fلشرموطتهن", "ل*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v475, "\u200Fلشرموطتهم", "ل*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v476, "\u200Fلشرموطتها", "ل*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v477, "\u200Fلشرموطته", "ل******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v478, "\u200Fلشرموطتنا", "ل*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v479, "\u200Fلشرموطتكن", "ل*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v480, "\u200Fلشرموطتكم", "ل*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v481, "\u200Fلشرموطتك", "ل******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v482, "\u200Fلشرموطة", "ل*****ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v483, "\u200Fلشرموطاتي", "ل*******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v484, "\u200Fلشرموطاتهن", "ل********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v485, "\u200Fلشرموطاتهم", "ل********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v486, "\u200Fلشرموطاتها", "ل********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v487, "\u200Fلشرموطاته", "ل*******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v488, "\u200Fلشرموطاتنا", "ل********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v489, "\u200Fلشرموطاتكن", "ل********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v490, "\u200Fلشرموطاتكم", "ل********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v491, "\u200Fلشرموطاتك", "ل*******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v492, "\u200Fلشرموطات", "ل******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v493, "\u200Fلزوبي", "ل***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v494, "\u200Fلزوبهن", "ل****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v495, "\u200Fلزوبهم", "ل****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v496, "\u200Fلزوبها", "ل****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v497, "\u200Fلزوبه", "ل***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v498, "\u200Fلزوبنا", "ل****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v499, "\u200Fلزوبكن", "ل****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v500, "\u200Fلزوبكم", "ل****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v501, "\u200Fلزوبك", "ل***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v502, "\u200Fلزوب", "ل**ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v503, "\u200Fلزبي", "ل**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v504, "\u200Fلزبهن", "ل***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v505, "\u200Fلزبهم", "ل***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v506, "\u200Fلزبها", "ل***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v507, "\u200Fلزبه", "ل**ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v508, "\u200Fلزبنا", "ل***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v509, "\u200Fلزبكن", "ل***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v510, "\u200Fلزبكم", "ل***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v511, "\u200Fلزبك", "ل**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v512, "\u200Fلزبابي", "ل****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v513, "\u200Fلزبابهن", "ل*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v514, "\u200Fلزبابهم", "ل*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v515, "\u200Fلزبابها", "ل*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v516, "\u200Fلزبابه", "ل****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v517, "\u200Fلزبابنا", "ل*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v518, "\u200Fلزبابكن", "ل*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v519, "\u200Fلزبابكم", "ل*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v520, "\u200Fلزبابك", "ل****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v521, "\u200Fلزباب", "ل***ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v522, "\u200Fلزب", "ل*ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v523, "\u200Fلخرواتي", "ل*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v524, "\u200Fلخرواتهن", "ل******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v525, "\u200Fلخرواتهم", "ل******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v526, "\u200Fلخرواتها", "ل******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v527, "\u200Fلخرواته", "ل*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v528, "\u200Fلخرواتنا", "ل******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v529, "\u200Fلخرواتكن", "ل******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v530, "\u200Fلخرواتكم", "ل******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v531, "\u200Fلخرواتك", "ل*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v532, "\u200Fلخروات", "ل****ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v533, "\u200Fلخرتي", "ل***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v534, "\u200Fلخرتهن", "ل****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v535, "\u200Fلخرتهم", "ل****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v536, "\u200Fلخرتها", "ل****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v537, "\u200Fلخرته", "ل***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v538, "\u200Fلخرتنا", "ل****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v539, "\u200Fلخرتكن", "ل****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v540, "\u200Fلخرتكم", "ل****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v541, "\u200Fلخرتك", "ل***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v542, "\u200Fلخرة", "ل**ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v543, "\u200Fككسي", "ك**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v544, "\u200Fككسهن", "ك***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v545, "\u200Fككسهم", "ك***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v546, "\u200Fككسها", "ك***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v547, "\u200Fككسه", "ك**ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v548, "\u200Fككسنا", "ك***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v549, "\u200Fككسكوسي", "ك*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v550, "\u200Fككسكوسهن", "ك******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v551, "\u200Fككسكوسهم", "ك******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v552, "\u200Fككسكوسها", "ك******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v553, "\u200Fككسكوسه", "ك*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v554, "\u200Fككسكوسنا", "ك******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v555, "\u200Fككسكوسكن", "ك******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v556, "\u200Fككسكوسكم", "ك******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v557, "\u200Fككسكوسك", "ك*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v558, "\u200Fككسكوس", "ك****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v559, "\u200Fككسكن", "ك***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v560, "\u200Fككسكم", "ك***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v561, "\u200Fككسك", "ك**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v562, "\u200Fككساسي", "ك****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v563, "\u200Fككساسهن", "ك*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v564, "\u200Fككساسهم", "ك*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v565, "\u200Fككساسها", "ك*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v566, "\u200Fككساسه", "ك****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v567, "\u200Fككساسنا", "ك*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v568, "\u200Fككساسكن", "ك*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v569, "\u200Fككساسكم", "ك*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v570, "\u200Fككساسك", "ك****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v571, "\u200Fككساس", "ك***س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v572, "\u200Fككس", "ك*س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v573, "\u200Fكشرموطتي", "ك******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v574, "\u200Fكشرموطتهن", "ك*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v575, "\u200Fكشرموطتهم", "ك*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v576, "\u200Fكشرموطتها", "ك*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v577, "\u200Fكشرموطته", "ك******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v578, "\u200Fكشرموطتنا", "ك*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v579, "\u200Fكشرموطتكن", "ك*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v580, "\u200Fكشرموطتكم", "ك*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v581, "\u200Fكشرموطتك", "ك******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v582, "\u200Fكشرموطة", "ك*****ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v583, "\u200Fكشرموطاتي", "ك*******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v584, "\u200Fكشرموطاتهن", "ك********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v585, "\u200Fكشرموطاتهم", "ك********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v586, "\u200Fكشرموطاتها", "ك********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v587, "\u200Fكشرموطاته", "ك*******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v588, "\u200Fكشرموطاتنا", "ك********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v589, "\u200Fكشرموطاتكن", "ك********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v590, "\u200Fكشرموطاتكم", "ك********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v591, "\u200Fكشرموطاتك", "ك*******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v592, "\u200Fكشرموطات", "ك******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v593, "\u200Fكسي", "ك*ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v594, "\u200Fكسهن", "ك**ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v595, "\u200Fكسهم", "ك**م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v596, "\u200Fكسها", "ك**ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v597, "\u200Fكسه", "ك*ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v598, "\u200Fكسنا", "ك**ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v599, "\u200Fكسكوسي", "ك****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v600, "\u200Fكسكوسهن", "ك*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v601, "\u200Fكسكوسهم", "ك*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v602, "\u200Fكسكوسها", "ك*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v603, "\u200Fكسكوسه", "ك****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v604, "\u200Fكسكوسنا", "ك*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v605, "\u200Fكسكوسكن", "ك*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v606, "\u200Fكسكوسكم", "ك*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v607, "\u200Fكسكوسك", "ك****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v608, "\u200Fكسكوس", "ك***س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v609, "\u200Fكسكن", "ك**ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v610, "\u200Fكسكم", "ك**م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v611, "\u200Fكسك", "ك*ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v612, "\u200Fكساسي", "ك***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v613, "\u200Fكساسهن", "ك****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v614, "\u200Fكساسهم", "ك****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v615, "\u200Fكساسها", "ك****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v616, "\u200Fكساسه", "ك***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v617, "\u200Fكساسنا", "ك****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v618, "\u200Fكساسكن", "ك****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v619, "\u200Fكساسكم", "ك****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v620, "\u200Fكساسك", "ك***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v621, "\u200Fكساس", "ك**س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[3],0>(v622, "\u200Fكس", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v623, "\u200Fكزوبي", "ك***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v624, "\u200Fكزوبهن", "ك****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v625, "\u200Fكزوبهم", "ك****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v626, "\u200Fكزوبها", "ك****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v627, "\u200Fكزوبه", "ك***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v628, "\u200Fكزوبنا", "ك****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v629, "\u200Fكزوبكن", "ك****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v630, "\u200Fكزوبكم", "ك****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v631, "\u200Fكزوبك", "ك***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v632, "\u200Fكزوب", "ك**ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v633, "\u200Fكزبي", "ك**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v634, "\u200Fكزبهن", "ك***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v635, "\u200Fكزبهم", "ك***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v636, "\u200Fكزبها", "ك***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v637, "\u200Fكزبه", "ك**ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v638, "\u200Fكزبنا", "ك***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v639, "\u200Fكزبكن", "ك***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v640, "\u200Fكزبكم", "ك***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v641, "\u200Fكزبك", "ك**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v642, "\u200Fكزبابي", "ك****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v643, "\u200Fكزبابهن", "ك*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v644, "\u200Fكزبابهم", "ك*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v645, "\u200Fكزبابها", "ك*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v646, "\u200Fكزبابه", "ك****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v647, "\u200Fكزبابنا", "ك*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v648, "\u200Fكزبابكن", "ك*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v649, "\u200Fكزبابكم", "ك*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v650, "\u200Fكزبابك", "ك****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v651, "\u200Fكزباب", "ك***ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v652, "\u200Fكزب", "ك*ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v653, "\u200Fكخرواتي", "ك*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v654, "\u200Fكخرواتهن", "ك******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v655, "\u200Fكخرواتهم", "ك******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v656, "\u200Fكخرواتها", "ك******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v657, "\u200Fكخرواته", "ك*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v658, "\u200Fكخرواتنا", "ك******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v659, "\u200Fكخرواتكن", "ك******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v660, "\u200Fكخرواتكم", "ك******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v661, "\u200Fكخرواتك", "ك*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v662, "\u200Fكخروات", "ك****ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v663, "\u200Fكخرتي", "ك***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v664, "\u200Fكخرتهن", "ك****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v665, "\u200Fكخرتهم", "ك****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v666, "\u200Fكخرتها", "ك****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v667, "\u200Fكخرته", "ك***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v668, "\u200Fكخرتنا", "ك****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v669, "\u200Fكخرتكن", "ك****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v670, "\u200Fكخرتكم", "ك****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v671, "\u200Fكخرتك", "ك***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v672, "\u200Fكخرة", "ك**ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v673, "\u200Fكالكسكوس", "ك******س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v674, "\u200Fكالكساس", "ك*****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v675, "\u200Fكالكس", "ك***س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v676, "\u200Fكالشرموطة", "ك*******ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v677, "\u200Fكالشرموطات", "ك********ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v678, "\u200Fكالزوب", "ك****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v679, "\u200Fكالزباب", "ك*****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v680, "\u200Fكالزب", "ك***ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v681, "\u200Fكالخروات", "ك******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v682, "\u200Fكالخرة", "ك****ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v683, "\u200Fقحبه", "ق**ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v684, "\u200Fقحبة", "ق**ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v685, "\u200Fقحبات", "ق***ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v686, "\u200Fعرصه", "ع**ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v687, "\u200Fعرصة", "ع**ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v688, "\u200Fعرصات", "ع***ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v689, "\u200Fعرص", "ع*ص");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v690, "\u200Fشلكه", "ش**ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v691, "\u200Fشلكة", "ش**ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v692, "\u200Fشلكات", "ش***ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v693, "\u200Fشرموطه", "ش****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v694, "\u200Fشرموطتي", "ش*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v695, "\u200Fشرموطتهن", "ش******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v696, "\u200Fشرموطتهم", "ش******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v697, "\u200Fشرموطتها", "ش******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v698, "\u200Fشرموطته", "ش*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v699, "\u200Fشرموطتنا", "ش******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v700, "\u200Fشرموطتكن", "ش******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v701, "\u200Fشرموطتكم", "ش******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v702, "\u200Fشرموطتك", "ش*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v703, "\u200Fشرموطة", "ش****ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v704, "\u200Fشرموطاتي", "ش******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v705, "\u200Fشرموطاتهن", "ش*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v706, "\u200Fشرموطاتهم", "ش*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v707, "\u200Fشرموطاتها", "ش*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v708, "\u200Fشرموطاته", "ش******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v709, "\u200Fشرموطاتنا", "ش*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v710, "\u200Fشرموطاتكن", "ش*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v711, "\u200Fشرموطاتكم", "ش*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v712, "\u200Fشرموطاتك", "ش******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v713, "\u200Fشرموطات", "ش*****ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v714, "\u200Fشرموط", "ش***ط");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v715, "\u200Fشرجي", "ش**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v716, "\u200Fشراميط", "ش***ط");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v717, "\u200Fشخيتي", "ش***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v718, "\u200Fشخيت", "ش**ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v719, "\u200Fشخي", "ش*ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v720, "\u200Fشخاخي", "ش***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v721, "\u200Fشخاختي", "ش****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v722, "\u200Fشخاخ", "ش**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[3],0>(v723, "\u200Fشخ", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v724, "\u200Fزوبي", "ز**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v725, "\u200Fزوبهن", "ز***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v726, "\u200Fزوبهم", "ز***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v727, "\u200Fزوبها", "ز***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v728, "\u200Fزوبه", "ز**ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v729, "\u200Fزوبنا", "ز***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v730, "\u200Fزوبكن", "ز***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v731, "\u200Fزوبكم", "ز***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v732, "\u200Fزوبك", "ز**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v733, "\u200Fزوب", "ز*ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v734, "\u200Fزبي", "ز*ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v735, "\u200Fزبهن", "ز**ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v736, "\u200Fزبهم", "ز**م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v737, "\u200Fزبها", "ز**ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v738, "\u200Fزبه", "ز*ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v739, "\u200Fزبنا", "ز**ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v740, "\u200Fزبكن", "ز**ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v741, "\u200Fزبكم", "ز**م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v742, "\u200Fزبك", "ز*ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v743, "\u200Fزبابي", "ز***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v744, "\u200Fزبابهن", "ز****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v745, "\u200Fزبابهم", "ز****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v746, "\u200Fزبابها", "ز****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v747, "\u200Fزبابه", "ز***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v748, "\u200Fزبابنا", "ز****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v749, "\u200Fزبابكن", "ز****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v750, "\u200Fزبابكم", "ز****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v751, "\u200Fزبابك", "ز***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v752, "\u200Fزباب", "ز**ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[3],0>(v753, "\u200Fزب", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v754, "\u200Fخرواتي", "خ****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v755, "\u200Fخرواتهن", "خ*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v756, "\u200Fخرواتهم", "خ*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v757, "\u200Fخرواتها", "خ*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v758, "\u200Fخرواته", "خ****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v759, "\u200Fخرواتنا", "خ*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v760, "\u200Fخرواتكن", "خ*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v761, "\u200Fخرواتكم", "خ*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v762, "\u200Fخرواتك", "خ****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v763, "\u200Fخروات", "خ***ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v764, "\u200Fخرتهن", "خ***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v765, "\u200Fخرتهم", "خ***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v766, "\u200Fخرتها", "خ***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v767, "\u200Fخرتنا", "خ***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v768, "\u200Fخرتكن", "خ***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v769, "\u200Fخرتكم", "خ***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v770, "\u200Fخرة", "خ*ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v771, "\u200Fتنييك", "ت***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v772, "\u200Fتنتاك", "ت***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v773, "\u200Fبورنو", "ب***و");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v774, "\u200Fبكسي", "ب**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v775, "\u200Fبكسهن", "ب***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v776, "\u200Fبكسهم", "ب***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v777, "\u200Fبكسها", "ب***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v778, "\u200Fبكسه", "ب**ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v779, "\u200Fبكسنا", "ب***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v780, "\u200Fبكسكوسي", "ب*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v781, "\u200Fبكسكوسهن", "ب******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v782, "\u200Fبكسكوسهم", "ب******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v783, "\u200Fبكسكوسها", "ب******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v784, "\u200Fبكسكوسه", "ب*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v785, "\u200Fبكسكوسنا", "ب******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v786, "\u200Fبكسكوسكن", "ب******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v787, "\u200Fبكسكوسكم", "ب******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v788, "\u200Fبكسكوسك", "ب*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v789, "\u200Fبكسكوس", "ب****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v790, "\u200Fبكسكن", "ب***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v791, "\u200Fبكسكم", "ب***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v792, "\u200Fبكسك", "ب**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v793, "\u200Fبكساسي", "ب****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v794, "\u200Fبكساسهن", "ب*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v795, "\u200Fبكساسهم", "ب*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v796, "\u200Fبكساسها", "ب*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v797, "\u200Fبكساسه", "ب****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v798, "\u200Fبكساسنا", "ب*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v799, "\u200Fبكساسكن", "ب*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v800, "\u200Fبكساسكم", "ب*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v801, "\u200Fبكساسك", "ب****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v802, "\u200Fبكساس", "ب***س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v803, "\u200Fبكس", "ب*س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v804, "\u200Fبشرموطتي", "ب******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v805, "\u200Fبشرموطتهن", "ب*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v806, "\u200Fبشرموطتهم", "ب*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v807, "\u200Fبشرموطتها", "ب*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v808, "\u200Fبشرموطته", "ب******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v809, "\u200Fبشرموطتنا", "ب*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v810, "\u200Fبشرموطتكن", "ب*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v811, "\u200Fبشرموطتكم", "ب*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v812, "\u200Fبشرموطتك", "ب******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v813, "\u200Fبشرموطة", "ب*****ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v814, "\u200Fبشرموطاتي", "ب*******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v815, "\u200Fبشرموطاتهن", "ب********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v816, "\u200Fبشرموطاتهم", "ب********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v817, "\u200Fبشرموطاتها", "ب********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v818, "\u200Fبشرموطاته", "ب*******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v819, "\u200Fبشرموطاتنا", "ب********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v820, "\u200Fبشرموطاتكن", "ب********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v821, "\u200Fبشرموطاتكم", "ب********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v822, "\u200Fبشرموطاتك", "ب*******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v823, "\u200Fبشرموطات", "ب******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v824, "\u200Fبزوبي", "ب***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v825, "\u200Fبزوبهن", "ب****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v826, "\u200Fبزوبهم", "ب****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v827, "\u200Fبزوبها", "ب****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v828, "\u200Fبزوبه", "ب***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v829, "\u200Fبزوبنا", "ب****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v830, "\u200Fبزوبكن", "ب****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v831, "\u200Fبزوبكم", "ب****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v832, "\u200Fبزوبك", "ب***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v833, "\u200Fبزوب", "ب**ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v834, "\u200Fبزبي", "ب**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v835, "\u200Fبزبهن", "ب***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v836, "\u200Fبزبهم", "ب***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v837, "\u200Fبزبها", "ب***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v838, "\u200Fبزبه", "ب**ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v839, "\u200Fبزبنا", "ب***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v840, "\u200Fبزبكن", "ب***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v841, "\u200Fبزبكم", "ب***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v842, "\u200Fبزبك", "ب**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v843, "\u200Fبزبابي", "ب****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v844, "\u200Fبزبابهن", "ب*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v845, "\u200Fبزبابهم", "ب*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v846, "\u200Fبزبابها", "ب*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v847, "\u200Fبزبابه", "ب****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v848, "\u200Fبزبابنا", "ب*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v849, "\u200Fبزبابكن", "ب*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v850, "\u200Fبزبابكم", "ب*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v851, "\u200Fبزبابك", "ب****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v852, "\u200Fبزباب", "ب***ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v853, "\u200Fبزب", "ب*ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v854, "\u200Fبزاز", "ب**ز");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[3],0>(v855, "\u200Fبز", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v856, "\u200Fبخرواتي", "ب*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v857, "\u200Fبخرواتهن", "ب******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v858, "\u200Fبخرواتهم", "ب******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v859, "\u200Fبخرواتها", "ب******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v860, "\u200Fبخرواته", "ب*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v861, "\u200Fبخرواتنا", "ب******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v862, "\u200Fبخرواتكن", "ب******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v863, "\u200Fبخرواتكم", "ب******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v864, "\u200Fبخرواتك", "ب*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v865, "\u200Fبخروات", "ب****ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v866, "\u200Fبخرتي", "ب***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v867, "\u200Fبخرة", "ب**ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v868, "\u200Fبالكسكوس", "ب******س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v869, "\u200Fبالكساس", "ب*****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v870, "\u200Fبالكس", "ب***س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v871, "\u200Fبالشرموطة", "ب*******ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v872, "\u200Fبالشرموطات", "ب********ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v873, "\u200Fبالزوب", "ب****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v874, "\u200Fبالزباب", "ب*****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v875, "\u200Fبالزب", "ب***ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v876, "\u200Fبالخروات", "ب******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v877, "\u200Fبالخرة", "ب****ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v878, "\u200Fايري", "ا**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v879, "\u200Fايرك", "ا**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v880, "\u200Fاير", "ا*ر");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v881, "\u200Fانيكك", "ا***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v882, "\u200Fانيك", "ا**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v883, "\u200Fالكسكوس", "ا*****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v884, "\u200Fالكساس", "ا****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v885, "\u200Fالكس", "ا**س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v886, "\u200Fالشرموطة", "ا******ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v887, "\u200Fالشرموطات", "ا*******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v888, "\u200Fالزوب", "ا***ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v889, "\u200Fالزباب", "ا****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v890, "\u200Fالزب", "ا**ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v891, "\u200Fالخروات", "ا*****ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v892, "\u200Fالخرة", "ا***ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v893, "\u200Fإيري", "إ**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v894, "\u200Fإيرك", "إ**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v895, "\u200Fإير", "إ*ر");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v896, "\u200Fأيري", "أ**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v897, "\u200Fأيرك", "أ**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v898, "\u200Fأير", "أ*ر");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v899, "\u200Fأنيكك", "أ***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v900, "\u200Fأنيك", "أ**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v901, "ينتاك", "ي***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v902, "وللكسكوس", "و******س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v903, "وللكساس", "و*****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v904, "وللكس", "و***س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v905, "وللشرموطة", "و*******ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v906, "وللشرموطات", "و********ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v907, "وللزوب", "و****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v908, "وللزباب", "و*****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v909, "وللزب", "و***ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v910, "وللخروات", "و******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v911, "وللخرة", "و****ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v912, "ولكسي", "و***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v913, "ولكسهن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v914, "ولكسهم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v915, "ولكسها", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v916, "ولكسه", "و***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v917, "ولكسنا", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v918, "ولكسكوسي", "و******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v919, "ولكسكوسهن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v920, "ولكسكوسهم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v921, "ولكسكوسها", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v922, "ولكسكوسه", "و******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v923, "ولكسكوسنا", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v924, "ولكسكوسكن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v925, "ولكسكوسكم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v926, "ولكسكوسك", "و******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v927, "ولكسكوس", "و*****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v928, "ولكسكن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v929, "ولكسكم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v930, "ولكسك", "و***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v931, "ولكساسي", "و*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v932, "ولكساسهن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v933, "ولكساسهم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v934, "ولكساسها", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v935, "ولكساسه", "و*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v936, "ولكساسنا", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v937, "ولكساسكن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v938, "ولكساسكم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v939, "ولكساسك", "و*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v940, "ولكساس", "و****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v941, "ولكس", "و**س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v942, "ولشرموطتي", "و*******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v943, "ولشرموطتهن", "و********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v944, "ولشرموطتهم", "و********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v945, "ولشرموطتها", "و********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v946, "ولشرموطته", "و*******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v947, "ولشرموطتنا", "و********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v948, "ولشرموطتكن", "و********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v949, "ولشرموطتكم", "و********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v950, "ولشرموطتك", "و*******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v951, "ولشرموطة", "و******ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v952, "ولشرموطاتي", "و********ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v953, "ولشرموطاتهن", "و*********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v954, "ولشرموطاتهم", "و*********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v955, "ولشرموطاتها", "و*********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v956, "ولشرموطاته", "و********ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v957, "ولشرموطاتنا", "و*********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v958, "ولشرموطاتكن", "و*********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v959, "ولشرموطاتكم", "و*********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v960, "ولشرموطاتك", "و********ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v961, "ولشرموطات", "و*******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v962, "ولزوبي", "و****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v963, "ولزوبهن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v964, "ولزوبهم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v965, "ولزوبها", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v966, "ولزوبه", "و****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v967, "ولزوبنا", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v968, "ولزوبكن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v969, "ولزوبكم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v970, "ولزوبك", "و****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v971, "ولزوب", "و***ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v972, "ولزبي", "و***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v973, "ولزبهن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v974, "ولزبهم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v975, "ولزبها", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v976, "ولزبه", "و***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v977, "ولزبنا", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v978, "ولزبكن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v979, "ولزبكم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v980, "ولزبك", "و***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v981, "ولزبابي", "و*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v982, "ولزبابهن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v983, "ولزبابهم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v984, "ولزبابها", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v985, "ولزبابه", "و*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v986, "ولزبابنا", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v987, "ولزبابكن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v988, "ولزبابكم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v989, "ولزبابك", "و*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v990, "ولزباب", "و****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v991, "ولزب", "و**ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v992, "ولخرواتي", "و******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v993, "ولخرواتهن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v994, "ولخرواتهم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v995, "ولخرواتها", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v996, "ولخرواته", "و******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v997, "ولخرواتنا", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v998, "ولخرواتكن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v999, "ولخرواتكم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1000, "ولخرواتك", "و******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1001, "ولخروات", "و*****ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1002, "ولخرتي", "و****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1003, "ولخرتهن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1004, "ولخرتهم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1005, "ولخرتها", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1006, "ولخرته", "و****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1007, "ولخرتنا", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1008, "ولخرتكن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1009, "ولخرتكم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1010, "ولخرتك", "و****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1011, "ولخرة", "و***ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1012, "وككسي", "و***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1013, "وككسهن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1014, "وككسهم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1015, "وككسها", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1016, "وككسه", "و***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1017, "وككسنا", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1018, "وككسكوسي", "و******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1019, "وككسكوسهن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1020, "وككسكوسهم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1021, "وككسكوسها", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1022, "وككسكوسه", "و******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1023, "وككسكوسنا", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1024, "وككسكوسكن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1025, "وككسكوسكم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1026, "وككسكوسك", "و******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1027, "وككسكوس", "و*****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1028, "وككسكن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1029, "وككسكم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1030, "وككسك", "و***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1031, "وككساسي", "و*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1032, "وككساسهن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1033, "وككساسهم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1034, "وككساسها", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1035, "وككساسه", "و*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1036, "وككساسنا", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1037, "وككساسكن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1038, "وككساسكم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1039, "وككساسك", "و*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1040, "وككساس", "و****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1041, "وككس", "و**س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1042, "وكشرموطتي", "و*******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1043, "وكشرموطتهن", "و********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1044, "وكشرموطتهم", "و********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1045, "وكشرموطتها", "و********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1046, "وكشرموطته", "و*******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1047, "وكشرموطتنا", "و********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1048, "وكشرموطتكن", "و********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1049, "وكشرموطتكم", "و********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1050, "وكشرموطتك", "و*******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1051, "وكشرموطة", "و******ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1052, "وكشرموطاتي", "و********ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v1053, "وكشرموطاتهن", "و*********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v1054, "وكشرموطاتهم", "و*********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v1055, "وكشرموطاتها", "و*********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1056, "وكشرموطاته", "و********ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v1057, "وكشرموطاتنا", "و*********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v1058, "وكشرموطاتكن", "و*********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v1059, "وكشرموطاتكم", "و*********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1060, "وكشرموطاتك", "و********ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1061, "وكشرموطات", "و*******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1062, "وكسي", "و**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1063, "وكسهن", "و***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1064, "وكسهم", "و***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1065, "وكسها", "و***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1066, "وكسه", "و**ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1067, "وكسنا", "و***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1068, "وكسكوسي", "و*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1069, "وكسكوسهن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1070, "وكسكوسهم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1071, "وكسكوسها", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1072, "وكسكوسه", "و*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1073, "وكسكوسنا", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1074, "وكسكوسكن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1075, "وكسكوسكم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1076, "وكسكوسك", "و*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1077, "وكسكوس", "و****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1078, "وكسكن", "و***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1079, "وكسكم", "و***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1080, "وكسك", "و**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1081, "وكساسي", "و****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1082, "وكساسهن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1083, "وكساسهم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1084, "وكساسها", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1085, "وكساسه", "و****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1086, "وكساسنا", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1087, "وكساسكن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1088, "وكساسكم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1089, "وكساسك", "و****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1090, "وكساس", "و***س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v1091, "وكس", "و*س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1092, "وكزوبي", "و****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1093, "وكزوبهن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1094, "وكزوبهم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1095, "وكزوبها", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1096, "وكزوبه", "و****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1097, "وكزوبنا", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1098, "وكزوبكن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1099, "وكزوبكم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1100, "وكزوبك", "و****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1101, "وكزوب", "و***ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1102, "وكزبي", "و***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1103, "وكزبهن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1104, "وكزبهم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1105, "وكزبها", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1106, "وكزبه", "و***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1107, "وكزبنا", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1108, "وكزبكن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1109, "وكزبكم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1110, "وكزبك", "و***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1111, "وكزبابي", "و*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1112, "وكزبابهن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1113, "وكزبابهم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1114, "وكزبابها", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1115, "وكزبابه", "و*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1116, "وكزبابنا", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1117, "وكزبابكن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1118, "وكزبابكم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1119, "وكزبابك", "و*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1120, "وكزباب", "و****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1121, "وكزب", "و**ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1122, "وكخرواتي", "و******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1123, "وكخرواتهن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1124, "وكخرواتهم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1125, "وكخرواتها", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1126, "وكخرواته", "و******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1127, "وكخرواتنا", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1128, "وكخرواتكن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1129, "وكخرواتكم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1130, "وكخرواتك", "و******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1131, "وكخروات", "و*****ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1132, "وكخرتهن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1133, "وكخرتهم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1134, "وكخرتها", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1135, "وكخرتنا", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1136, "وكخرتكن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1137, "وكخرتكم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1138, "وكخرة", "و***ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1139, "وكالكسكوس", "و*******س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1140, "وكالكساس", "و******س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1141, "وكالكس", "و****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1142, "وكالشرموطة", "و********ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v1143, "وكالشرموطات", "و*********ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1144, "وكالزوب", "و*****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1145, "وكالزباب", "و******ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1146, "وكالزب", "و****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1147, "وكالخروات", "و*******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1148, "وكالخرة", "و*****ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1149, "وشرموطتي", "و******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1150, "وشرموطتهن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1151, "وشرموطتهم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1152, "وشرموطتها", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1153, "وشرموطته", "و******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1154, "وشرموطتنا", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1155, "وشرموطتكن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1156, "وشرموطتكم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1157, "وشرموطتك", "و******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1158, "وشرموطة", "و*****ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1159, "وشرموطاتي", "و*******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1160, "وشرموطاتهن", "و********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1161, "وشرموطاتهم", "و********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1162, "وشرموطاتها", "و********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1163, "وشرموطاته", "و*******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1164, "وشرموطاتنا", "و********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1165, "وشرموطاتكن", "و********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1166, "وشرموطاتكم", "و********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1167, "وشرموطاتك", "و*******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1168, "وشرموطات", "و******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1169, "وزوبي", "و***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1170, "وزوبهن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1171, "وزوبهم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1172, "وزوبها", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1173, "وزوبه", "و***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1174, "وزوبنا", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1175, "وزوبكن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1176, "وزوبكم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1177, "وزوبك", "و***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1178, "وزوب", "و**ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1179, "وزبي", "و**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1180, "وزبهن", "و***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1181, "وزبهم", "و***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1182, "وزبها", "و***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1183, "وزبه", "و**ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1184, "وزبنا", "و***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1185, "وزبكن", "و***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1186, "وزبكم", "و***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1187, "وزبك", "و**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1188, "وزبابي", "و****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1189, "وزبابهن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1190, "وزبابهم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1191, "وزبابها", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1192, "وزبابه", "و****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1193, "وزبابنا", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1194, "وزبابكن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1195, "وزبابكم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1196, "وزبابك", "و****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1197, "وزباب", "و***ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v1198, "وزب", "و*ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1199, "وخرواتي", "و*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1200, "وخرواتهن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1201, "وخرواتهم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1202, "وخرواتها", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1203, "وخرواته", "و*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1204, "وخرواتنا", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1205, "وخرواتكن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1206, "وخرواتكم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1207, "وخرواتك", "و*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1208, "وخروات", "و****ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1209, "وخرتي", "و***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1210, "وخرته", "و***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1211, "وخرتك", "و***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1212, "وخرة", "و**ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1213, "وبكسي", "و***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1214, "وبكسهن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1215, "وبكسهم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1216, "وبكسها", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1217, "وبكسه", "و***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1218, "وبكسنا", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1219, "وبكسكوسي", "و******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1220, "وبكسكوسهن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1221, "وبكسكوسهم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1222, "وبكسكوسها", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1223, "وبكسكوسه", "و******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1224, "وبكسكوسنا", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1225, "وبكسكوسكن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1226, "وبكسكوسكم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1227, "وبكسكوسك", "و******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1228, "وبكسكوس", "و*****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1229, "وبكسكن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1230, "وبكسكم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1231, "وبكسك", "و***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1232, "وبكساسي", "و*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1233, "وبكساسهن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1234, "وبكساسهم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1235, "وبكساسها", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1236, "وبكساسه", "و*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1237, "وبكساسنا", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1238, "وبكساسكن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1239, "وبكساسكم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1240, "وبكساسك", "و*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1241, "وبكساس", "و****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1242, "وبكس", "و**س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1243, "وبشرموطتي", "و*******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1244, "وبشرموطتهن", "و********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1245, "وبشرموطتهم", "و********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1246, "وبشرموطتها", "و********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1247, "وبشرموطته", "و*******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1248, "وبشرموطتنا", "و********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1249, "وبشرموطتكن", "و********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1250, "وبشرموطتكم", "و********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1251, "وبشرموطتك", "و*******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1252, "وبشرموطة", "و******ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1253, "وبشرموطاتي", "و********ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v1254, "وبشرموطاتهن", "و*********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v1255, "وبشرموطاتهم", "و*********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v1256, "وبشرموطاتها", "و*********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1257, "وبشرموطاته", "و********ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v1258, "وبشرموطاتنا", "و*********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v1259, "وبشرموطاتكن", "و*********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v1260, "وبشرموطاتكم", "و*********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1261, "وبشرموطاتك", "و********ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1262, "وبشرموطات", "و*******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1263, "وبزوبي", "و****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1264, "وبزوبهن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1265, "وبزوبهم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1266, "وبزوبها", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1267, "وبزوبه", "و****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1268, "وبزوبنا", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1269, "وبزوبكن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1270, "وبزوبكم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1271, "وبزوبك", "و****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1272, "وبزوب", "و***ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1273, "وبزبي", "و***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1274, "وبزبهن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1275, "وبزبهم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1276, "وبزبها", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1277, "وبزبه", "و***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1278, "وبزبنا", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1279, "وبزبكن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1280, "وبزبكم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1281, "وبزبك", "و***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1282, "وبزبابي", "و*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1283, "وبزبابهن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1284, "وبزبابهم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1285, "وبزبابها", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1286, "وبزبابه", "و*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1287, "وبزبابنا", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1288, "وبزبابكن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1289, "وبزبابكم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1290, "وبزبابك", "و*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1291, "وبزباب", "و****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1292, "وبزب", "و**ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1293, "وبخرواتي", "و******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1294, "وبخرواتهن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1295, "وبخرواتهم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1296, "وبخرواتها", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1297, "وبخرواته", "و******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1298, "وبخرواتنا", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1299, "وبخرواتكن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1300, "وبخرواتكم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1301, "وبخرواتك", "و******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1302, "وبخروات", "و*****ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1303, "وبخرتهم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1304, "وبخرة", "و***ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1305, "وبالكسكوس", "و*******س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1306, "وبالكساس", "و******س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1307, "وبالكس", "و****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1308, "وبالشرموطة", "و********ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v1309, "وبالشرموطات", "و*********ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1310, "وبالزوب", "و*****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1311, "وبالزباب", "و******ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1312, "وبالزب", "و****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1313, "وبالخروات", "و*******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1314, "وبالخرة", "و*****ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1315, "والكسكوس", "و******س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1316, "والكساس", "و*****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1317, "والكس", "و***س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1318, "والشرموطة", "و*******ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1319, "والشرموطات", "و********ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1320, "والزوب", "و****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1321, "والزباب", "و*****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1322, "والزب", "و***ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1323, "والخروات", "و******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1324, "والخرة", "و****ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1325, "نيكيني", "ن****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1326, "نيكني", "ن***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v1327, "نيك", "ن*ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1328, "نياكة", "ن***ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v1329, "ناك", "ن*ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1330, "مومس", "م**س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1331, "مهبل", "م**ل");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1332, "للكسكوس", "ل*****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1333, "للكساس", "ل****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1334, "للكس", "ل**س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1335, "للعنة", "ل***ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1336, "للشرموطة", "ل******ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1337, "للشرموطات", "ل*******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1338, "للزوب", "ل***ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1339, "للزباب", "ل****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1340, "للزب", "ل**ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1341, "للخروات", "ل*****ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1342, "للخرة", "ل***ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1343, "لكسي", "ل**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1344, "لكسهن", "ل***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1345, "لكسهم", "ل***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1346, "لكسها", "ل***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1347, "لكسه", "ل**ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1348, "لكسنا", "ل***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1349, "لكسكوسي", "ل*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1350, "لكسكوسهن", "ل******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1351, "لكسكوسهم", "ل******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1352, "لكسكوسها", "ل******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1353, "لكسكوسه", "ل*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1354, "لكسكوسنا", "ل******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1355, "لكسكوسكن", "ل******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1356, "لكسكوسكم", "ل******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1357, "لكسكوسك", "ل*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1358, "لكسكوس", "ل****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1359, "لكسكن", "ل***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1360, "لكسكم", "ل***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1361, "لكسك", "ل**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1362, "لكساسي", "ل****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1363, "لكساسهن", "ل*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1364, "لكساسهم", "ل*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1365, "لكساسها", "ل*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1366, "لكساسه", "ل****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1367, "لكساسنا", "ل*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1368, "لكساسكن", "ل*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1369, "لكساسكم", "ل*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1370, "لكساسك", "ل****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1371, "لكساس", "ل***س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v1372, "لكس", "ل*س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1373, "لشرموطتي", "ل******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1374, "لشرموطتهن", "ل*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1375, "لشرموطتهم", "ل*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1376, "لشرموطتها", "ل*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1377, "لشرموطته", "ل******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1378, "لشرموطتنا", "ل*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1379, "لشرموطتكن", "ل*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1380, "لشرموطتكم", "ل*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1381, "لشرموطتك", "ل******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1382, "لشرموطة", "ل*****ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1383, "لشرموطاتي", "ل*******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1384, "لشرموطاتهن", "ل********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1385, "لشرموطاتهم", "ل********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1386, "لشرموطاتها", "ل********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1387, "لشرموطاته", "ل*******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1388, "لشرموطاتنا", "ل********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1389, "لشرموطاتكن", "ل********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1390, "لشرموطاتكم", "ل********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1391, "لشرموطاتك", "ل*******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1392, "لشرموطات", "ل******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1393, "لزوبي", "ل***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1394, "لزوبهن", "ل****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1395, "لزوبهم", "ل****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1396, "لزوبها", "ل****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1397, "لزوبه", "ل***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1398, "لزوبنا", "ل****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1399, "لزوبكن", "ل****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1400, "لزوبكم", "ل****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1401, "لزوبك", "ل***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1402, "لزوب", "ل**ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1403, "لزبي", "ل**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1404, "لزبهن", "ل***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1405, "لزبهم", "ل***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1406, "لزبها", "ل***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1407, "لزبه", "ل**ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1408, "لزبنا", "ل***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1409, "لزبكن", "ل***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1410, "لزبكم", "ل***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1411, "لزبك", "ل**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1412, "لزبابي", "ل****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1413, "لزبابهن", "ل*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1414, "لزبابهم", "ل*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1415, "لزبابها", "ل*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1416, "لزبابه", "ل****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1417, "لزبابنا", "ل*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1418, "لزبابكن", "ل*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1419, "لزبابكم", "ل*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1420, "لزبابك", "ل****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1421, "لزباب", "ل***ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v1422, "لزب", "ل*ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1423, "لخرواتي", "ل*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1424, "لخرواتهن", "ل******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1425, "لخرواتهم", "ل******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1426, "لخرواتها", "ل******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1427, "لخرواته", "ل*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1428, "لخرواتنا", "ل******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1429, "لخرواتكن", "ل******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1430, "لخرواتكم", "ل******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1431, "لخرواتك", "ل*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1432, "لخروات", "ل****ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1433, "لخرتي", "ل***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1434, "لخرتهن", "ل****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1435, "لخرتهم", "ل****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1436, "لخرتها", "ل****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1437, "لخرته", "ل***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1438, "لخرتنا", "ل****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1439, "لخرتكن", "ل****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1440, "لخرتكم", "ل****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1441, "لخرتك", "ل***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1442, "لخرة", "ل**ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1443, "ككسي", "ك**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1444, "ككسهن", "ك***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1445, "ككسهم", "ك***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1446, "ككسها", "ك***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1447, "ككسه", "ك**ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1448, "ككسنا", "ك***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1449, "ككسكوسي", "ك*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1450, "ككسكوسهن", "ك******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1451, "ككسكوسهم", "ك******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1452, "ككسكوسها", "ك******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1453, "ككسكوسه", "ك*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1454, "ككسكوسنا", "ك******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1455, "ككسكوسكن", "ك******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1456, "ككسكوسكم", "ك******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1457, "ككسكوسك", "ك*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1458, "ككسكوس", "ك****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1459, "ككسكن", "ك***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1460, "ككسكم", "ك***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1461, "ككسك", "ك**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1462, "ككساسي", "ك****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1463, "ككساسهن", "ك*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1464, "ككساسهم", "ك*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1465, "ككساسها", "ك*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1466, "ككساسه", "ك****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1467, "ككساسنا", "ك*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1468, "ككساسكن", "ك*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1469, "ككساسكم", "ك*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1470, "ككساسك", "ك****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1471, "ككساس", "ك***س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v1472, "ككس", "ك*س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1473, "كشرموطتي", "ك******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1474, "كشرموطتهن", "ك*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1475, "كشرموطتهم", "ك*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1476, "كشرموطتها", "ك*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1477, "كشرموطته", "ك******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1478, "كشرموطتنا", "ك*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1479, "كشرموطتكن", "ك*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1480, "كشرموطتكم", "ك*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1481, "كشرموطتك", "ك******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1482, "كشرموطة", "ك*****ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1483, "كشرموطاتي", "ك*******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1484, "كشرموطاتهن", "ك********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1485, "كشرموطاتهم", "ك********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1486, "كشرموطاتها", "ك********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1487, "كشرموطاته", "ك*******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1488, "كشرموطاتنا", "ك********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1489, "كشرموطاتكن", "ك********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1490, "كشرموطاتكم", "ك********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1491, "كشرموطاتك", "ك*******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1492, "كشرموطات", "ك******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v1493, "كسي", "ك*ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1494, "كسهن", "ك**ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1495, "كسهم", "ك**م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1496, "كسها", "ك**ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v1497, "كسه", "ك*ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1498, "كسنا", "ك**ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1499, "كسكوسي", "ك****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1500, "كسكوسهن", "ك*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1501, "كسكوسهم", "ك*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1502, "كسكوسها", "ك*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1503, "كسكوسه", "ك****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1504, "كسكوسنا", "ك*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1505, "كسكوسكن", "ك*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1506, "كسكوسكم", "ك*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1507, "كسكوسك", "ك****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1508, "كسكوس", "ك***س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1509, "كسكن", "ك**ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1510, "كسكم", "ك**م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v1511, "كسك", "ك*ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1512, "كساسي", "ك***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1513, "كساسهن", "ك****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1514, "كساسهم", "ك****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1515, "كساسها", "ك****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1516, "كساسه", "ك***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1517, "كساسنا", "ك****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1518, "كساسكن", "ك****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1519, "كساسكم", "ك****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1520, "كساسك", "ك***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1521, "كساس", "ك**س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[3],0>(v1522, "كس", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1523, "كزوبي", "ك***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1524, "كزوبهن", "ك****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1525, "كزوبهم", "ك****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1526, "كزوبها", "ك****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1527, "كزوبه", "ك***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1528, "كزوبنا", "ك****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1529, "كزوبكن", "ك****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1530, "كزوبكم", "ك****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1531, "كزوبك", "ك***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1532, "كزوب", "ك**ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1533, "كزبي", "ك**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1534, "كزبهن", "ك***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1535, "كزبهم", "ك***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1536, "كزبها", "ك***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1537, "كزبه", "ك**ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1538, "كزبنا", "ك***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1539, "كزبكن", "ك***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1540, "كزبكم", "ك***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1541, "كزبك", "ك**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1542, "كزبابي", "ك****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1543, "كزبابهن", "ك*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1544, "كزبابهم", "ك*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1545, "كزبابها", "ك*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1546, "كزبابه", "ك****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1547, "كزبابنا", "ك*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1548, "كزبابكن", "ك*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1549, "كزبابكم", "ك*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1550, "كزبابك", "ك****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1551, "كزباب", "ك***ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v1552, "كزب", "ك*ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1553, "كخرواتي", "ك*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1554, "كخرواتهن", "ك******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1555, "كخرواتهم", "ك******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1556, "كخرواتها", "ك******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1557, "كخرواته", "ك*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1558, "كخرواتنا", "ك******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1559, "كخرواتكن", "ك******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1560, "كخرواتكم", "ك******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1561, "كخرواتك", "ك*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1562, "كخروات", "ك****ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1563, "كخرتي", "ك***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1564, "كخرتهن", "ك****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1565, "كخرتهم", "ك****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1566, "كخرتها", "ك****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1567, "كخرته", "ك***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1568, "كخرتنا", "ك****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1569, "كخرتكن", "ك****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1570, "كخرتكم", "ك****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1571, "كخرتك", "ك***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1572, "كخرة", "ك**ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1573, "كالكسكوس", "ك******س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1574, "كالكساس", "ك*****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1575, "كالكس", "ك***س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1576, "كالشرموطة", "ك*******ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1577, "كالشرموطات", "ك********ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1578, "كالزوب", "ك****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1579, "كالزباب", "ك*****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1580, "كالزب", "ك***ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1581, "كالخروات", "ك******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1582, "كالخرة", "ك****ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1583, "قحبه", "ق**ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1584, "قحبة", "ق**ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1585, "قحبات", "ق***ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1586, "عيري", "ع**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1587, "عرصه", "ع**ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1588, "عرصة", "ع**ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1589, "عرصات", "ع***ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v1590, "عرص", "ع*ص");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1591, "عاهرة", "ع***ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1592, "شلكه", "ش**ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1593, "شلكة", "ش**ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1594, "شلكات", "ش***ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1595, "شرموطه", "ش****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1596, "شرموطتي", "ش*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1597, "شرموطتهن", "ش******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1598, "شرموطتهم", "ش******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1599, "شرموطتها", "ش******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1600, "شرموطته", "ش*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1601, "شرموطتنا", "ش******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1602, "شرموطتكن", "ش******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1603, "شرموطتكم", "ش******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1604, "شرموطتك", "ش*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1605, "شرموطة", "ش****ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1606, "شرموطاتي", "ش******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1607, "شرموطاتهن", "ش*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1608, "شرموطاتهم", "ش*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1609, "شرموطاتها", "ش*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1610, "شرموطاته", "ش******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1611, "شرموطاتنا", "ش*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1612, "شرموطاتكن", "ش*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1613, "شرموطاتكم", "ش*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1614, "شرموطاتك", "ش******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1615, "شرموطات", "ش*****ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1616, "شرموط", "ش***ط");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1617, "شرجي", "ش**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[8],0>(v1618, "شراميط", "ش***ط");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1619, "شخيتي", "ش***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1620, "شخيت", "ش**ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v1621, "شخي", "ش*ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1622, "شخاخي", "ش***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1623, "شخاختي", "ش****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1624, "شخاخ", "ش**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[3],0>(v1625, "شخ", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1626, "ساقطة", "س***ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1627, "سأضاجع", "س****ع");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1628, "زوبي", "ز**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1629, "زوبهن", "ز***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1630, "زوبهم", "ز***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1631, "زوبها", "ز***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1632, "زوبه", "ز**ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1633, "زوبنا", "ز***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1634, "زوبكن", "ز***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1635, "زوبكم", "ز***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1636, "زوبك", "ز**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v1637, "زوب", "ز*ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v1638, "زبي", "ز*ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1639, "زبهن", "ز**ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1640, "زبهم", "ز**م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1641, "زبها", "ز**ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v1642, "زبه", "ز*ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1643, "زبنا", "ز**ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1644, "زبكن", "ز**ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1645, "زبكم", "ز**م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v1646, "زبك", "ز*ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1647, "زبابي", "ز***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1648, "زبابهن", "ز****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1649, "زبابهم", "ز****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1650, "زبابها", "ز****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1651, "زبابه", "ز***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1652, "زبابنا", "ز****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1653, "زبابكن", "ز****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1654, "زبابكم", "ز****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1655, "زبابك", "ز***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1656, "زباب", "ز**ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[3],0>(v1657, "زب", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v1658, "تبا", "ت*ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1659, "خرواتي", "خ****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1660, "خرواتهن", "خ*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1661, "خرواتهم", "خ*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1662, "خرواتها", "خ*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1663, "خرواته", "خ****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1664, "خرواتنا", "خ*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1665, "خرواتكن", "خ*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1666, "خرواتكم", "خ*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1667, "خرواتك", "خ****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1668, "خروات", "خ***ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1669, "خرتهن", "خ***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1670, "خرتهم", "خ***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1671, "خرتها", "خ***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1672, "خرتنا", "خ***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1673, "خرتكن", "خ***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1674, "خرتكم", "خ***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v1675, "خرة", "خ*ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1676, "تنييك", "ت***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1677, "تنتاك", "ت***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1678, "بورنو", "ب***و");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1679, "بكسي", "ب**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1680, "بكسهن", "ب***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1681, "بكسهم", "ب***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1682, "بكسها", "ب***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1683, "بكسه", "ب**ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1684, "بكسنا", "ب***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1685, "بكسكوسي", "ب*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1686, "بكسكوسهن", "ب******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1687, "بكسكوسهم", "ب******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1688, "بكسكوسها", "ب******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1689, "بكسكوسه", "ب*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1690, "بكسكوسنا", "ب******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1691, "بكسكوسكن", "ب******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1692, "بكسكوسكم", "ب******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1693, "بكسكوسك", "ب*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1694, "بكسكوس", "ب****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1695, "بكسكن", "ب***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1696, "بكسكم", "ب***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1697, "بكسك", "ب**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1698, "بكساسي", "ب****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1699, "بكساسهن", "ب*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1700, "بكساسهم", "ب*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1701, "بكساسها", "ب*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1702, "بكساسه", "ب****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1703, "بكساسنا", "ب*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1704, "بكساسكن", "ب*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1705, "بكساسكم", "ب*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1706, "بكساسك", "ب****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1707, "بكساس", "ب***س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v1708, "بكس", "ب*س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1709, "بشرموطتي", "ب******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1710, "بشرموطتهن", "ب*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1711, "بشرموطتهم", "ب*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1712, "بشرموطتها", "ب*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1713, "بشرموطته", "ب******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1714, "بشرموطتنا", "ب*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1715, "بشرموطتكن", "ب*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1716, "بشرموطتكم", "ب*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1717, "بشرموطتك", "ب******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1718, "بشرموطة", "ب*****ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1719, "بشرموطاتي", "ب*******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1720, "بشرموطاتهن", "ب********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1721, "بشرموطاتهم", "ب********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1722, "بشرموطاتها", "ب********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1723, "بشرموطاته", "ب*******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1724, "بشرموطاتنا", "ب********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1725, "بشرموطاتكن", "ب********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1726, "بشرموطاتكم", "ب********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1727, "بشرموطاتك", "ب*******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1728, "بشرموطات", "ب******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1729, "بزوبي", "ب***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1730, "بزوبهن", "ب****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1731, "بزوبهم", "ب****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1732, "بزوبها", "ب****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1733, "بزوبه", "ب***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1734, "بزوبنا", "ب****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1735, "بزوبكن", "ب****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1736, "بزوبكم", "ب****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1737, "بزوبك", "ب***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1738, "بزوب", "ب**ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1739, "بزبي", "ب**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1740, "بزبهن", "ب***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1741, "بزبهم", "ب***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1742, "بزبها", "ب***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1743, "بزبه", "ب**ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1744, "بزبنا", "ب***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1745, "بزبكن", "ب***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1746, "بزبكم", "ب***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1747, "بزبك", "ب**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1748, "بزبابي", "ب****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1749, "بزبابهن", "ب*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1750, "بزبابهم", "ب*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1751, "بزبابها", "ب*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1752, "بزبابه", "ب****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1753, "بزبابنا", "ب*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1754, "بزبابكن", "ب*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1755, "بزبابكم", "ب*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1756, "بزبابك", "ب****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1757, "بزباب", "ب***ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v1758, "بزب", "ب*ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1759, "بزاز", "ب**ز");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[3],0>(v1760, "بز", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1761, "بخرواتي", "ب*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1762, "بخرواتهن", "ب******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1763, "بخرواتهم", "ب******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1764, "بخرواتها", "ب******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1765, "بخرواته", "ب*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1766, "بخرواتنا", "ب******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1767, "بخرواتكن", "ب******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1768, "بخرواتكم", "ب******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1769, "بخرواتك", "ب*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1770, "بخروات", "ب****ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1771, "بخرتي", "ب***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1772, "بخرة", "ب**ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1773, "بالكسكوس", "ب******س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1774, "بالكساس", "ب*****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1775, "بالكس", "ب***س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1776, "بالشرموطة", "ب*******ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1777, "بالشرموطات", "ب********ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1778, "بالزوب", "ب****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1779, "بالزباب", "ب*****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1780, "بالزب", "ب***ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1781, "بالخروات", "ب******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1782, "بالخرة", "ب****ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1783, "ايري", "ا**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1784, "ايرك", "ا**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v1785, "اير", "ا*ر");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1786, "انيكك", "ا***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1787, "انيك", "ا**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1788, "اللعين", "ا****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1789, "الكسكوس", "ا*****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1790, "الكساس", "ا****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1791, "الكس", "ا**س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1792, "العرص", "ا***ص");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1793, "العاهرة", "ا*****ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1794, "الشرموطة", "ا******ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1795, "الشرموطات", "ا*******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1796, "الزوب", "ا***ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1797, "الزباب", "ا****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1798, "الزب", "ا**ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1799, "الخروات", "ا*****ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1800, "الخرة", "ا***ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1801, "الاستنماء", "ا*******ء");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1802, "إيري", "إ**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1803, "إيرك", "إ**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v1804, "إير", "إ*ر");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1805, "أيري", "أ**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1806, "أيرك", "أ**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v1807, "أير", "أ*ر");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1808, "أنيكك", "أ***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1809, "أنيك", "أ**ك");
    std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](&siri::dialogengine::GetProfanityFilter_ar(void)::sProfanityData_ar, (uint64_t)v5, 0x70DuLL);
    for (i = 0; i != -10830; i -= 6)
      std::pair<std::string const,std::string>::~pair((uint64_t)&v1809[i]);
    __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], &siri::dialogengine::GetProfanityFilter_ar(void)::sProfanityData_ar, &dword_1BF794000);
  }
  *v1 = 0;
  v1[1] = 0;
  v1[2] = 0;
  return std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(v1, siri::dialogengine::GetProfanityFilter_ar(void)::sProfanityData_ar, *(uint64_t *)algn_1EF582E90, 0xAAAAAAAAAAAAAAABLL* ((*(_QWORD *)algn_1EF582E90 - siri::dialogengine::GetProfanityFilter_ar(void)::sProfanityData_ar) >> 4));
}

void sub_1BFB6C588(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + 86592;
  v4 = -86640;
  do
  {
    v3 = std::pair<std::string const,std::string>::~pair(v3) - 48;
    v4 += 48;
  }
  while (v4);
  _Unwind_Resume(a1);
}

_QWORD *siri::dialogengine::GetProfanityFilter_hr(siri::dialogengine *this)
{
  _QWORD *v1;
  unsigned __int8 v2;
  uint64_t i;
  _QWORD v5[6];
  _QWORD v6[6];
  _QWORD v7[6];
  _QWORD v8[6];
  _QWORD v9[6];
  _QWORD v10[6];
  _QWORD v11[6];
  _QWORD v12[6];
  _QWORD v13[6];
  _QWORD v14[6];
  _QWORD v15[6];
  _QWORD v16[6];
  _QWORD v17[6];
  _QWORD v18[6];
  _QWORD v19[6];
  _QWORD v20[6];
  _QWORD v21[6];
  _QWORD v22[6];
  _QWORD v23[6];
  _QWORD v24[6];
  _QWORD v25[6];
  _QWORD v26[6];
  _QWORD v27[6];
  _QWORD v28[6];
  _QWORD v29[6];
  _QWORD v30[6];
  _QWORD v31[6];
  _QWORD v32[6];
  _QWORD v33[6];
  _QWORD v34[6];
  _QWORD v35[6];
  _QWORD v36[6];
  _QWORD v37[6];
  _QWORD v38[6];
  _QWORD v39[6];
  _QWORD v40[6];
  _QWORD v41[6];
  _QWORD v42[6];
  _QWORD v43[6];
  _QWORD v44[6];
  _QWORD v45[6];
  _QWORD v46[6];
  _QWORD v47[6];
  _QWORD v48[6];
  _QWORD v49[6];
  _QWORD v50[6];
  _QWORD v51[6];
  _QWORD v52[6];
  _QWORD v53[6];
  _QWORD v54[6];
  _QWORD v55[6];
  _QWORD v56[6];
  _QWORD v57[6];
  _QWORD v58[6];
  _QWORD v59[6];
  _QWORD v60[6];
  _QWORD v61[6];
  _QWORD v62[6];
  _QWORD v63[6];
  _QWORD v64[6];
  _QWORD v65[6];
  _QWORD v66[6];
  _QWORD v67[6];
  _QWORD v68[6];
  _QWORD v69[6];
  _QWORD v70[6];
  _QWORD v71[6];
  _QWORD v72[6];
  _QWORD v73[6];
  _QWORD v74[6];
  _QWORD v75[6];
  _QWORD v76[6];
  _QWORD v77[6];
  _QWORD v78[6];
  _QWORD v79[6];
  _QWORD v80[6];
  _QWORD v81[6];
  _QWORD v82[6];
  _QWORD v83[6];
  _QWORD v84[6];
  _QWORD v85[6];
  _QWORD v86[6];
  _QWORD v87[6];
  _QWORD v88[6];
  _QWORD v89[6];
  _QWORD v90[6];
  _QWORD v91[6];
  _QWORD v92[6];
  _QWORD v93[6];
  _QWORD v94[6];
  _QWORD v95[6];
  _QWORD v96[6];
  _QWORD v97[6];
  _QWORD v98[6];
  _QWORD v99[6];
  _QWORD v100[6];
  _QWORD v101[6];
  _QWORD v102[6];
  _QWORD v103[6];
  _QWORD v104[6];
  _QWORD v105[6];
  _QWORD v106[6];
  _QWORD v107[6];
  _QWORD v108[6];
  _QWORD v109[6];
  _QWORD v110[6];
  _QWORD v111[6];
  _QWORD v112[6];
  _QWORD v113[6];
  _QWORD v114[6];
  _QWORD v115[6];
  _QWORD v116[6];
  _QWORD v117[6];
  _QWORD v118[6];
  _QWORD v119[6];
  _QWORD v120[6];
  _QWORD v121[6];
  _QWORD v122[6];
  _QWORD v123[6];
  _QWORD v124[6];
  _QWORD v125[6];
  _QWORD v126[6];
  _QWORD v127[6];
  _QWORD v128[6];
  _QWORD v129[6];
  _QWORD v130[6];
  _QWORD v131[6];
  _QWORD v132[6];
  _QWORD v133[6];
  _QWORD v134[6];
  _QWORD v135[6];
  _QWORD v136[6];
  _QWORD v137[6];
  _QWORD v138[6];
  _QWORD v139[6];
  _QWORD v140[6];
  _QWORD v141[6];
  _QWORD v142[6];
  _QWORD v143[6];
  _QWORD v144[6];
  _QWORD v145[6];
  _QWORD v146[6];
  _QWORD v147[6];
  _QWORD v148[6];
  _QWORD v149[6];
  _QWORD v150[6];
  _QWORD v151[6];
  _QWORD v152[6];
  _QWORD v153[6];
  _QWORD v154[6];
  _QWORD v155[6];
  _QWORD v156[6];
  _QWORD v157[6];
  _QWORD v158[6];
  _QWORD v159[6];
  _QWORD v160[6];
  _QWORD v161[6];
  _QWORD v162[6];
  _QWORD v163[6];
  _QWORD v164[6];
  _QWORD v165[6];
  _QWORD v166[6];
  _QWORD v167[6];
  _QWORD v168[6];
  _QWORD v169[6];
  _QWORD v170[6];
  _QWORD v171[6];
  _QWORD v172[6];
  _QWORD v173[6];
  _QWORD v174[6];
  _QWORD v175[6];
  _QWORD v176[6];
  _QWORD v177[6];
  _QWORD v178[6];
  _QWORD v179[6];
  _QWORD v180[6];
  _QWORD v181[6];
  _QWORD v182[6];
  _QWORD v183[6];
  _QWORD v184[6];
  _QWORD v185[6];
  _QWORD v186[6];
  _QWORD v187[6];
  _QWORD v188[6];
  _QWORD v189[6];
  _QWORD v190[6];
  _QWORD v191[6];
  _QWORD v192[6];
  _QWORD v193[6];
  _QWORD v194[6];
  _QWORD v195[6];
  _QWORD v196[6];
  _QWORD v197[6];
  _QWORD v198[6];
  _QWORD v199[6];
  _QWORD v200[6];
  _QWORD v201[6];
  _QWORD v202[6];
  _QWORD v203[6];
  _QWORD v204[6];
  _QWORD v205[6];
  _QWORD v206[6];
  _QWORD v207[6];
  _QWORD v208[6];
  _QWORD v209[6];
  _QWORD v210[6];
  _QWORD v211[6];
  _QWORD v212[6];
  _QWORD v213[6];
  _QWORD v214[6];
  _QWORD v215[6];
  _QWORD v216[6];
  _QWORD v217[6];
  _QWORD v218[6];
  _QWORD v219[6];
  _QWORD v220[6];
  _QWORD v221[6];
  _QWORD v222[6];
  _QWORD v223[6];
  _QWORD v224[6];
  _QWORD v225[6];
  _QWORD v226[6];
  _QWORD v227[6];
  _QWORD v228[6];
  _QWORD v229[6];
  _QWORD v230[6];
  _QWORD v231[6];
  _QWORD v232[6];
  _QWORD v233[6];
  _QWORD v234[6];
  _QWORD v235[6];
  _QWORD v236[6];
  _QWORD v237[6];
  _QWORD v238[6];
  _QWORD v239[6];
  _QWORD v240[6];
  _QWORD v241[6];
  _QWORD v242[6];
  _QWORD v243[6];
  _QWORD v244[6];
  _QWORD v245[6];
  _QWORD v246[6];
  _QWORD v247[6];
  _QWORD v248[6];
  _QWORD v249[6];
  _QWORD v250[6];
  _QWORD v251[6];
  _QWORD v252[6];
  _QWORD v253[6];
  _QWORD v254[6];
  _QWORD v255[6];
  _QWORD v256[6];
  _QWORD v257[6];
  _QWORD v258[6];
  _QWORD v259[6];
  _QWORD v260[6];
  _QWORD v261[6];
  _QWORD v262[6];
  _QWORD v263[6];
  _QWORD v264[6];
  _QWORD v265[6];
  _QWORD v266[6];
  _QWORD v267[6];
  _QWORD v268[6];
  _QWORD v269[6];
  _QWORD v270[6];
  _QWORD v271[6];
  _QWORD v272[6];
  _QWORD v273[6];
  _QWORD v274[6];
  _QWORD v275[6];
  _QWORD v276[6];
  _QWORD v277[6];
  _QWORD v278[6];
  _QWORD v279[6];
  _QWORD v280[6];
  _QWORD v281[6];
  _QWORD v282[6];
  _QWORD v283[6];
  _QWORD v284[6];
  _QWORD v285[6];
  _QWORD v286[6];
  _QWORD v287[6];
  _QWORD v288[6];
  _QWORD v289[6];
  _QWORD v290[6];
  _QWORD v291[6];
  _QWORD v292[6];
  _QWORD v293[6];
  _QWORD v294[6];
  _QWORD v295[6];
  _QWORD v296[6];
  _QWORD v297[6];
  _QWORD v298[6];
  _QWORD v299[6];
  _QWORD v300[6];
  _QWORD v301[6];
  _QWORD v302[6];
  _QWORD v303[6];
  _QWORD v304[6];
  _QWORD v305[6];
  _QWORD v306[6];
  _QWORD v307[6];
  _QWORD v308[6];
  _QWORD v309[6];
  _QWORD v310[6];
  _QWORD v311[6];
  _QWORD v312[6];
  _QWORD v313[6];
  _QWORD v314[6];
  _QWORD v315[6];
  _QWORD v316[6];
  _QWORD v317[6];
  _QWORD v318[6];
  _QWORD v319[6];
  _QWORD v320[6];
  _QWORD v321[6];
  _QWORD v322[6];
  _QWORD v323[6];
  _QWORD v324[6];
  _QWORD v325[6];
  _QWORD v326[6];
  _QWORD v327[6];
  _QWORD v328[6];
  _QWORD v329[6];
  _QWORD v330[6];
  _QWORD v331[6];
  _QWORD v332[6];
  _QWORD v333[6];
  _QWORD v334[6];
  _QWORD v335[6];
  _QWORD v336[6];
  _QWORD v337[6];
  _QWORD v338[6];
  _QWORD v339[6];
  _QWORD v340[6];
  _QWORD v341[6];
  _QWORD v342[6];
  _QWORD v343[6];
  _QWORD v344[6];
  _QWORD v345[6];
  _QWORD v346[6];
  _QWORD v347[6];
  _QWORD v348[6];
  _QWORD v349[6];
  _QWORD v350[6];
  _QWORD v351[6];
  _QWORD v352[6];
  _QWORD v353[6];
  _QWORD v354[6];
  _QWORD v355[6];
  _QWORD v356[6];
  _QWORD v357[6];
  _QWORD v358[6];
  _QWORD v359[6];
  _QWORD v360[6];
  _QWORD v361[6];
  _QWORD v362[6];
  _QWORD v363[6];
  _QWORD v364[6];
  _QWORD v365[6];
  _QWORD v366[6];
  _QWORD v367[6];
  _QWORD v368[6];
  _QWORD v369[6];
  _QWORD v370[6];
  _QWORD v371[6];
  _QWORD v372[6];
  _QWORD v373[6];
  _QWORD v374[6];
  _QWORD v375[6];
  _QWORD v376[6];
  _QWORD v377[6];
  _QWORD v378[6];
  _QWORD v379[6];
  _QWORD v380[6];
  _QWORD v381[6];
  _QWORD v382[6];
  _QWORD v383[6];
  _QWORD v384[6];
  _QWORD v385[6];
  _QWORD v386[6];
  _QWORD v387[6];
  _QWORD v388[6];
  _QWORD v389[6];
  _QWORD v390[6];
  _QWORD v391[6];
  _QWORD v392[6];
  _QWORD v393[6];
  _QWORD v394[6];
  _QWORD v395[6];
  _QWORD v396[6];
  _QWORD v397[6];
  _QWORD v398[6];
  _QWORD v399[6];
  _QWORD v400[6];
  _QWORD v401[6];
  _QWORD v402[6];
  _QWORD v403[6];
  _QWORD v404[6];
  _QWORD v405[6];
  _QWORD v406[6];
  _QWORD v407[6];
  _QWORD v408[6];
  _QWORD v409[6];
  _QWORD v410[6];
  _QWORD v411[6];
  _QWORD v412[6];
  _QWORD v413[6];
  _QWORD v414[6];
  _QWORD v415[6];
  _QWORD v416[6];
  _QWORD v417[6];
  _QWORD v418[6];
  _QWORD v419[6];
  _QWORD v420[6];
  _QWORD v421[6];
  _QWORD v422[6];
  _QWORD v423[6];
  _QWORD v424[6];
  _QWORD v425[6];
  _QWORD v426[6];
  _QWORD v427[6];
  _QWORD v428[6];
  _QWORD v429[6];
  _QWORD v430[6];
  _QWORD v431[6];
  _QWORD v432[6];
  _QWORD v433[6];
  _QWORD v434[6];
  _QWORD v435[6];
  _QWORD v436[6];
  _QWORD v437[6];
  _QWORD v438[6];
  _QWORD v439[6];
  _QWORD v440[6];
  _QWORD v441[6];
  _QWORD v442[6];
  _QWORD v443[6];
  _QWORD v444[6];
  _QWORD v445[6];
  _QWORD v446[6];
  _QWORD v447[6];
  _QWORD v448[6];
  _QWORD v449[6];
  _QWORD v450[6];
  _QWORD v451[6];
  _QWORD v452[6];
  _QWORD v453[6];
  _QWORD v454[6];
  _QWORD v455[6];
  _QWORD v456[6];
  _QWORD v457[6];
  _QWORD v458[6];
  _QWORD v459[6];
  _QWORD v460[6];
  _QWORD v461[6];
  _QWORD v462[6];
  _QWORD v463[6];
  _QWORD v464[6];
  _QWORD v465[6];
  _QWORD v466[6];
  _QWORD v467[6];
  _QWORD v468[6];
  _QWORD v469[6];
  _QWORD v470[6];
  _QWORD v471[6];
  _QWORD v472[6];
  _QWORD v473[6];
  _QWORD v474[6];
  _QWORD v475[6];
  _QWORD v476[6];
  _QWORD v477[6];
  _QWORD v478[6];
  _QWORD v479[6];
  _QWORD v480[6];
  _QWORD v481[6];
  _QWORD v482[6];
  _QWORD v483[6];
  _QWORD v484[6];
  _QWORD v485[6];
  _QWORD v486[6];
  _QWORD v487[6];
  _QWORD v488[6];
  _QWORD v489[6];
  _QWORD v490[6];
  _QWORD v491[6];
  _QWORD v492[6];
  _QWORD v493[6];
  _QWORD v494[6];
  _QWORD v495[6];
  _QWORD v496[6];
  _QWORD v497[6];
  _QWORD v498[6];
  _QWORD v499[6];
  _QWORD v500[6];
  _QWORD v501[6];
  _QWORD v502[6];
  _QWORD v503[6];
  _QWORD v504[6];
  _QWORD v505[6];
  _QWORD v506[6];
  _QWORD v507[6];
  _QWORD v508[6];
  _QWORD v509[6];
  _QWORD v510[6];
  _QWORD v511[6];
  _QWORD v512[6];
  _QWORD v513[6];
  _QWORD v514[6];
  _QWORD v515[6];
  _QWORD v516[6];
  _QWORD v517[6];
  _QWORD v518[6];
  _QWORD v519[6];
  _QWORD v520[6];
  _QWORD v521[6];
  _QWORD v522[6];
  _QWORD v523[6];
  _QWORD v524[6];
  _QWORD v525[6];
  _QWORD v526[6];
  _QWORD v527[6];
  _QWORD v528[6];
  _QWORD v529[6];
  _QWORD v530[6];
  _QWORD v531[6];
  _QWORD v532[6];
  _QWORD v533[6];
  _QWORD v534[6];
  _QWORD v535[6];
  _QWORD v536[6];
  _QWORD v537[6];
  _QWORD v538[6];
  _QWORD v539[6];
  _QWORD v540[6];
  _QWORD v541[6];
  _QWORD v542[6];
  _QWORD v543[6];
  _QWORD v544[6];
  _QWORD v545[6];
  _QWORD v546[6];
  _QWORD v547[6];
  _QWORD v548[6];
  _QWORD v549[6];
  _QWORD v550[6];
  _QWORD v551[6];
  _QWORD v552[6];
  _QWORD v553[6];
  _QWORD v554[6];
  _QWORD v555[6];
  _QWORD v556[6];
  _QWORD v557[6];
  _QWORD v558[6];
  _QWORD v559[6];
  _QWORD v560[6];
  _QWORD v561[6];
  _QWORD v562[6];
  _QWORD v563[6];
  _QWORD v564[6];
  _QWORD v565[6];
  _QWORD v566[6];
  _QWORD v567[6];
  _QWORD v568[6];
  _QWORD v569[6];
  _QWORD v570[6];
  _QWORD v571[6];
  _QWORD v572[6];
  _QWORD v573[6];
  _QWORD v574[6];
  _QWORD v575[6];
  _QWORD v576[6];
  _QWORD v577[6];
  _QWORD v578[6];
  _QWORD v579[6];
  _QWORD v580[6];
  _QWORD v581[6];
  _QWORD v582[6];
  _QWORD v583[6];
  _QWORD v584[6];
  _QWORD v585[6];
  _QWORD v586[6];
  _QWORD v587[6];
  _QWORD v588[6];
  _QWORD v589[6];
  _QWORD v590[6];
  _QWORD v591[6];
  _QWORD v592[6];
  _QWORD v593[6];
  _QWORD v594[6];
  _QWORD v595[6];
  _QWORD v596[6];
  _QWORD v597[6];
  _QWORD v598[6];
  _QWORD v599[6];
  _QWORD v600[6];
  _QWORD v601[6];
  _QWORD v602[6];
  _QWORD v603[6];
  _QWORD v604[6];
  _QWORD v605[6];
  _QWORD v606[6];
  _QWORD v607[6];
  _QWORD v608[6];
  _QWORD v609[6];
  _QWORD v610[6];
  _QWORD v611[6];
  _QWORD v612[6];
  _QWORD v613[6];
  _QWORD v614[6];
  _QWORD v615[6];
  _QWORD v616[6];
  _QWORD v617[6];
  _QWORD v618[6];
  _QWORD v619[6];
  _QWORD v620[6];
  _QWORD v621[6];
  _QWORD v622[6];
  _QWORD v623[6];
  _QWORD v624[6];
  _QWORD v625[6];
  _QWORD v626[6];
  _QWORD v627[6];
  _QWORD v628[6];
  _QWORD v629[6];
  _QWORD v630[6];
  _QWORD v631[6];
  _QWORD v632[6];
  _QWORD v633[6];
  _QWORD v634[6];
  _QWORD v635[6];
  _QWORD v636[6];
  _QWORD v637[6];
  _QWORD v638[6];
  _QWORD v639[6];
  _QWORD v640[6];
  _QWORD v641[6];
  _QWORD v642[6];
  _QWORD v643[6];
  _QWORD v644[6];
  _QWORD v645[6];
  _QWORD v646[6];
  _QWORD v647[6];
  _QWORD v648[6];
  _QWORD v649[6];
  _QWORD v650[6];
  _QWORD v651[6];
  _QWORD v652[6];
  _QWORD v653[6];
  _QWORD v654[6];
  _QWORD v655[6];
  _QWORD v656[6];
  _QWORD v657[6];
  _QWORD v658[6];
  _QWORD v659[6];
  _QWORD v660[6];
  _QWORD v661[6];
  _QWORD v662[6];
  _QWORD v663[6];
  _QWORD v664[6];
  _QWORD v665[6];
  _QWORD v666[6];
  _QWORD v667[6];
  _QWORD v668[6];
  _QWORD v669[6];
  _QWORD v670[6];
  _QWORD v671[6];
  _QWORD v672[6];
  _QWORD v673[6];
  _QWORD v674[6];
  _QWORD v675[6];
  _QWORD v676[6];
  _QWORD v677[6];
  _QWORD v678[6];
  _QWORD v679[6];
  _QWORD v680[6];
  _QWORD v681[6];
  _QWORD v682[6];
  _QWORD v683[6];
  _QWORD v684[6];
  _QWORD v685[6];
  _QWORD v686[6];
  _QWORD v687[6];
  _QWORD v688[6];
  _QWORD v689[6];
  _QWORD v690[6];
  _QWORD v691[6];
  _QWORD v692[6];
  _QWORD v693[6];
  _QWORD v694[6];
  _QWORD v695[6];
  _QWORD v696[6];
  _QWORD v697[6];
  _QWORD v698[6];
  _QWORD v699[6];
  _QWORD v700[6];
  _QWORD v701[6];
  _QWORD v702[6];
  _QWORD v703[6];
  _QWORD v704[6];
  _QWORD v705[6];
  _QWORD v706[6];
  _QWORD v707[6];
  _QWORD v708[6];
  _QWORD v709[6];
  _QWORD v710[6];
  _QWORD v711[6];
  _QWORD v712[6];
  _QWORD v713[6];
  _QWORD v714[6];
  _QWORD v715[6];
  _QWORD v716[6];
  _QWORD v717[6];
  _QWORD v718[6];
  _QWORD v719[6];
  _QWORD v720[6];
  _QWORD v721[6];
  _QWORD v722[6];
  _QWORD v723[6];
  _QWORD v724[6];
  _QWORD v725[6];
  _QWORD v726[6];
  _QWORD v727[6];
  _QWORD v728[6];
  _QWORD v729[6];
  _QWORD v730[6];
  _QWORD v731[6];
  _QWORD v732[6];
  _QWORD v733[6];
  _QWORD v734[6];
  _QWORD v735[6];
  _QWORD v736[6];
  _QWORD v737[6];
  _QWORD v738[6];
  _QWORD v739[6];
  _QWORD v740[6];
  _QWORD v741[6];
  _QWORD v742[6];
  _QWORD v743[6];
  _QWORD v744[6];
  _QWORD v745[6];
  _QWORD v746[6];
  _QWORD v747[6];
  _QWORD v748[6];
  _QWORD v749[6];
  _QWORD v750[6];
  _QWORD v751[6];
  _QWORD v752[6];
  _QWORD v753[6];
  _QWORD v754[6];
  _QWORD v755[6];
  _QWORD v756[6];
  _QWORD v757[6];
  _QWORD v758[6];
  _QWORD v759[6];
  _QWORD v760[6];
  _QWORD v761[6];
  _QWORD v762[6];
  _QWORD v763[6];
  _QWORD v764[6];
  _QWORD v765[6];
  _QWORD v766[6];
  _QWORD v767[6];
  _QWORD v768[6];
  _QWORD v769[6];
  _QWORD v770[6];
  _QWORD v771[6];
  _QWORD v772[6];
  _QWORD v773[6];
  _QWORD v774[6];
  _QWORD v775[6];
  _QWORD v776[6];
  _QWORD v777[6];
  _QWORD v778[6];
  _QWORD v779[6];
  _QWORD v780[6];
  _QWORD v781[6];
  _QWORD v782[6];
  _QWORD v783[6];
  _QWORD v784[6];
  _QWORD v785[6];
  _QWORD v786[6];
  _QWORD v787[6];
  _QWORD v788[6];
  _QWORD v789[6];
  _QWORD v790[6];
  _QWORD v791[6];
  _QWORD v792[6];
  _QWORD v793[6];
  _QWORD v794[6];
  _QWORD v795[6];
  _QWORD v796[6];
  _QWORD v797[6];
  _QWORD v798[6];
  _QWORD v799[6];
  _QWORD v800[6];
  _QWORD v801[6];
  _QWORD v802[6];
  _QWORD v803[6];
  _QWORD v804[6];
  _QWORD v805[6];
  _QWORD v806[6];
  _QWORD v807[6];
  _QWORD v808[6];
  _QWORD v809[6];
  _QWORD v810[6];
  _QWORD v811[6];
  _QWORD v812[6];
  _QWORD v813[6];
  _QWORD v814[6];
  _QWORD v815[6];
  _QWORD v816[6];
  _QWORD v817[6];
  _QWORD v818[6];
  _QWORD v819[6];
  _QWORD v820[6];
  _QWORD v821[6];
  _QWORD v822[6];
  _QWORD v823[6];
  _QWORD v824[6];
  _QWORD v825[6];
  _QWORD v826[6];
  _QWORD v827[6];
  _QWORD v828[6];
  _QWORD v829[6];
  _QWORD v830[6];
  _QWORD v831[6];
  _QWORD v832[6];
  _QWORD v833[6];
  _QWORD v834[6];
  _QWORD v835[6];
  _QWORD v836[6];
  _QWORD v837[6];
  _QWORD v838[6];
  _QWORD v839[6];
  _QWORD v840[7];

  v1 = (_QWORD *)MEMORY[0x1E0C80A78](this);
  v840[6] = *MEMORY[0x1E0C80C00];
  if ((v2 & 1) == 0
  {
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v5, "šupčinu", "š*****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v6, "šupčino", "š*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v7, "šupčine", "š*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v8, "šupčina", "š*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v9, "šupčanom", "š******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v10, "šupku", "š***u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v11, "šupke", "š***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v12, "šupka", "š***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v13, "šupak", "š***k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v14, "šit", "š*t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v15, "šiptarska", "š*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v16, "šiptari", "š*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v17, "šiptara", "š*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v18, "šiptar", "š****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v19, "šipci", "š***i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v20, "ševiš", "š***š");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v21, "ševiti", "š****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v22, "ševit", "š***t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v23, "ševio", "š***o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v24, "ševili", "š****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v25, "ševica", "š****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v26, "ševi", "š**i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v27, "ševca", "š***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v28, "Šupci", "Š***i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v29, "Šiptarima", "Š*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v30, "Šiptari", "Š*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v31, "Šiptar", "Š****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v32, "đubretarski", "đ*********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v33, "đubradi", "đ*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v34, "đubrad", "đ****d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v35, "đankoze", "đ*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v36, "čifut", "č***t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v37, "četnikušo", "č*******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v38, "Čifuti", "Č****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v39, "ćuna", "ć**a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v40, "zasro", "z***o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v41, "zasrati", "z*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v42, "zasrao", "z****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v43, "zasranih", "z******h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v44, "zasrana", "z*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v45, "zasran", "z****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v46, "zasrali", "z*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v47, "zasrala", "z*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v48, "zaseru", "z****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v49, "zasereš", "z*****š");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v50, "zaseremo", "z******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v51, "zaseravanje", "z*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v52, "zapišavanje", "z*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v53, "zapišavanja", "z*********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v54, "zapišavaju", "z********u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v55, "zapišava", "z******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v56, "zapišati", "z******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v57, "zapišanog", "z*******g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v58, "zapišani", "z******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v59, "zapišan", "z*****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v60, "zapišali", "z******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v61, "zajebu", "z****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v62, "zajebite", "z******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v63, "zajebi", "z****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v64, "zajebeš", "z*****š");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v65, "zajebe", "z****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v66, "zajebavljati", "z**********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v67, "zajebavaš", "z*******š");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v68, "zajebavati", "z********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v69, "zajebavate", "z********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v70, "zajebavat", "z*******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v71, "zajebavao", "z*******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v72, "zajebavanje", "z*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v73, "zajebavamo", "z********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v74, "zajebavali", "z********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[13],0>(v75, "zajebavajući", "z**********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v76, "zajebavaju", "z********u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v77, "zajebavajte", "z*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v78, "zajebavaj", "z*******j");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v79, "zajebava", "z******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v80, "zajebat", "z*****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v81, "zajebantski", "z*********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v82, "zajebantske", "z*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v83, "zajebanti", "z*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v84, "zajebanta", "z*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v85, "zajebant", "z******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v86, "zajebanog", "z*******g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v87, "zajebanim", "z*******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v88, "zajebaniji", "z********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v89, "zajebanijeg", "z*********g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v90, "zajebanija", "z********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v91, "zajebanih", "z*******h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v92, "zajebani", "z******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v93, "zajebancijom", "z**********m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v94, "zajebanciji", "z*********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v95, "zajebancije", "z*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v96, "zajebancijama", "z***********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v97, "zajebancija", "z*********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v98, "zajeban", "z*****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v99, "zajebali", "z******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v100, "zajebale", "z******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v101, "zajebala", "z******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v102, "zajebajem", "z*******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v103, "zajeb", "z***b");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v104, "vukojеbinu", "v********u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v105, "vukojebinu", "v********u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v106, "vukojebinom", "v*********m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v107, "vukojebini", "v********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v108, "vukojebine", "v********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v109, "vukojebinama", "v**********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v110, "vukojebina", "v********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v111, "vrtiguza", "v******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v112, "vritnjak", "v******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v113, "uzjebali", "u******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v114, "uzasrali", "u******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v115, "usrati", "u****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v116, "usrat", "u***t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v117, "usrao", "u***o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v118, "usranoj", "u*****j");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v119, "usranog", "u*****g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v120, "usranko", "u*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v121, "usranim", "u*****m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v122, "usranih", "u*****h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v123, "usrani", "u****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v124, "usranci", "u*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v125, "usrana", "u****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v126, "usran", "u***n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v127, "usrali", "u****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v128, "usrale", "u****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v129, "usrala", "u****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v130, "uskoguzaca", "u********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v131, "useru", "u***u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v132, "usereš", "u****š");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v133, "userete", "u*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v134, "upišanih", "u******h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v135, "upišana", "u*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v136, "upišala", "u*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v137, "uparađena", "u*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v138, "ukenjalo", "u******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v139, "ukenjaju", "u******u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v140, "ukakila", "u*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v141, "ukakao", "u****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v142, "ukakanom", "u******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v143, "ukakanim", "u******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v144, "ukakane", "u*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v145, "ukakaju", "u*****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v146, "uguziti", "u*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v147, "uguzit", "u****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v148, "uguzio", "u****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v149, "uguzili", "u*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[10],0>(v150, "tovarčići", "t*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v151, "tovarčino", "t*******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v152, "tariguz", "t*****z");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v153, "starkeljom", "s********m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v154, "starkelje", "s*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v155, "srbadija", "s******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v156, "sraćke", "s****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v157, "srati", "s***i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v158, "srat", "s**t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v159, "srao", "s**o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v160, "sranju", "s****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v161, "sranjima", "s******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v162, "sranjem", "s*****m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v163, "sranja", "s****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v164, "sralo", "s***o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v165, "srali", "s***i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v166, "sprdne", "s****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v167, "sprdaš", "s****š");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v168, "sprdačini", "s*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v169, "sprdačine", "s*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v170, "sprdanja", "s******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v171, "sprdancije", "s********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v172, "spičkati", "s******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v173, "spizdio", "s*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v174, "spickat", "s*****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v175, "sotonjaru", "s*******u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v176, "sotonjare", "s*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v177, "skotova", "s*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v178, "skot", "s**t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v179, "skorojevići", "s*********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v180, "sjebu", "s***u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v181, "sjebi", "s***i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v182, "sjebete", "s*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v183, "sjebemo", "s*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v184, "sjebe", "s***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v185, "sjebavao", "s******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v186, "sjebati", "s*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v187, "sjebat", "s****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v188, "sjebanosti", "s********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v189, "sjebanom", "s******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v190, "sjebanoj", "s******j");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v191, "sjebanih", "s******h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v192, "sjebani", "s*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v193, "sjebana", "s*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v194, "sjebali", "s*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v195, "sjebala", "s*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v196, "sjebal", "s****l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v197, "sisom", "s***m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v198, "sisica", "s****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v199, "sise", "s**e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v200, "sisatu", "s****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v201, "sisatome", "s******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v202, "sisatom", "s*****m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v203, "sisatoj", "s*****j");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v204, "sisata", "s****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v205, "sisat", "s***t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v206, "sisa", "s**a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v207, "shit", "s**t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v208, "serući", "s****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v209, "seruckati", "s*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v210, "seruckate", "s*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v211, "seruckanjima", "s**********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v212, "seruckanje", "s********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v213, "seruckanja", "s********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v214, "seruckalo", "s*******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v215, "seruckaj", "s******j");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v216, "seru", "s**u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v217, "seronju", "s*****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v218, "seronji", "s*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v219, "seronjama", "s*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v220, "seronja", "s*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v221, "serite", "s****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v222, "seri", "s**i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v223, "sereš", "s***š");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v224, "serete", "s****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v225, "seremo", "s****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v226, "serem", "s***m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v227, "sere", "s**e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v228, "seratore", "s******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v229, "seljoberu", "s*******u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v230, "seljobera", "s*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v231, "seljober", "s******r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[10],0>(v232, "seljačića", "s*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v233, "seljačinu", "s*******u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v234, "seljačino", "s*******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v235, "seljačine", "s*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v236, "seksanju", "s******u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v237, "seksanja", "s******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v238, "seksam", "s****m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v239, "seksaj", "s****j");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v240, "retarda", "r*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v241, "redaljku", "r******u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v242, "redaljci", "r******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v243, "razjebu", "r*****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v244, "razjebe", "r*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v245, "razjebati", "r*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v246, "razjebao", "r******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v247, "razjebali", "r*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v248, "razguzit", "r******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v249, "razguzio", "r******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v250, "razguzili", "r*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v251, "raspizdio", "r*******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v252, "raspizdim", "r*******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v253, "raspizdilo", "r********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v254, "raspizdi", "r******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v255, "radodajka", "r*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v256, "pušikuraca", "p********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[11],0>(v257, "purgerčići", "p********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v258, "prđenje", "p*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v259, "prčimo", "p****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v260, "prčimir", "p*****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v261, "prčila", "p****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v262, "prči", "p**i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v263, "prčevitim", "p*******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v264, "prčenje", "p*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v265, "prćiju", "p****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v266, "prosrat", "p*****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v267, "prosrali", "p******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v268, "proseravat", "p********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v269, "proseravanju", "p**********u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v270, "proseravanje", "p**********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v271, "proseravam", "p********m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v272, "proseravali", "p*********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v273, "prisere", "p*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v274, "pripišali", "p*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v275, "pripizdini", "p********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v276, "pripizdine", "p********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v277, "pripizdina", "p********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v278, "preseravaš", "p********š");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v279, "preseravati", "p*********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v280, "preseravanjem", "p***********m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v281, "preseravanja", "p**********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v282, "preseravam", "p********m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v283, "preseravaju", "p*********u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v284, "preserava", "p*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v285, "preseratorskih", "p************h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v286, "prejebeno", "p*******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v287, "prejebeni", "p*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v288, "prejeben", "p******n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v289, "prdu", "p**u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v290, "prdonje", "p*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v291, "prdonjama", "p*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v292, "prdonja", "p*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v293, "prdnuti", "p*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v294, "prdnut", "p****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v295, "prdnuo", "p****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v296, "prdnula", "p*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v297, "prdiš", "p***š");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v298, "prditi", "p****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v299, "prdite", "p****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v300, "prdit", "p***t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v301, "prdio", "p***o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v302, "prdila", "p****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v303, "prdi", "p**i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v304, "prdežom", "p*****m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v305, "prdež", "p***ž");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v306, "prdenja", "p*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v307, "prdekani", "p******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v308, "prdaca", "p****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v309, "prcao", "p***o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v310, "prcala", "p****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v311, "poševiti", "p******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v312, "poševila", "p******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v313, "poševi", "p****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v314, "posrati", "p*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v315, "posrat", "p****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v316, "posrao", "p****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v317, "posranu", "p*****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v318, "posranom", "p******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v319, "posranog", "p******g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v320, "posrano", "p*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v321, "posrani", "p*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v322, "posrane", "p*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v323, "posranci", "p******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v324, "posrana", "p*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v325, "posran", "p****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v326, "posrali", "p*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v327, "posrala", "p*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v328, "poseru", "p****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v329, "poserotinama", "p**********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v330, "posereš", "p*****š");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v331, "posere", "p****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v332, "poseksaš", "p******š");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v333, "poseksati", "p*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v334, "poseksao", "p******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v335, "poseksam", "p******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v336, "poseksala", "p*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v337, "poseksaju", "p*******u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v338, "poseksa", "p*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v339, "pornjavu", "p******u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v340, "pornjave", "p******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v341, "pornjava", "p******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v342, "poprcaju", "p******u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v343, "popiškio", "p******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v344, "popišaš", "p*****š");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v345, "popišat", "p*****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v346, "popišanije", "p********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v347, "popišani", "p******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v348, "popišana", "p******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v349, "popišam", "p*****m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v350, "popišali", "p******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v351, "popišale", "p******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v352, "popiša", "p****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v353, "popizditi", "p*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v354, "popizdit", "p******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v355, "popizdio", "p******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v356, "popizdim", "p******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v357, "popizdila", "p*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v358, "popizdi", "p*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[17],0>(v359, "poluretardiranih", "p**************h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[16],0>(v360, "poluretardirani", "p*************i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v361, "poluidiote", "p********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v362, "poludebil", "p*******l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v363, "pokenjati", "p*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v364, "pokenjao", "p******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v365, "pokenja", "p*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v366, "pokarale", "p******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v367, "pokaka", "p****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v368, "pojebo", "p****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v369, "pojebi", "p****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v370, "pojebeš", "p*****š");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v371, "pojebe", "p****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v372, "pojebati", "p******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v373, "pojebat", "p*****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v374, "pojebao", "p*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v375, "pofukat", "p*****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v376, "pofukao", "p*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v377, "pofukaj", "p*****j");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v378, "podjebavat", "p********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v379, "podjebavanju", "p**********u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v380, "podjebavanje", "p**********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v381, "podjebavanja", "p**********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v382, "podjebavam", "p********m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v383, "podjebavali", "p*********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v384, "podjebavaju", "p*********u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v385, "podjebava", "p*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[11],0>(v386, "plačipičko", "p********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[13],0>(v387, "plačipičkicu", "p**********u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[11],0>(v388, "plačipičke", "p********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[11],0>(v389, "plačipička", "p********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v390, "pišurija", "p******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v391, "piškite", "p*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v392, "pišati", "p****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v393, "pišate", "p****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v394, "pišanjem", "p******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v395, "pišanje", "p*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v396, "pišanja", "p*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v397, "pišalinu", "p******u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v398, "pišaka", "p****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v399, "pišaju", "p****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v400, "piša", "p**a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v401, "pičku", "p***u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v402, "pičkom", "p****m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v403, "pičko", "p***o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v404, "pičkice", "p*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v405, "pički", "p***i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v406, "pičketino", "p*******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v407, "pičketina", "p*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v408, "pičke", "p***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v409, "pičkastog", "p*******g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v410, "pičkasti", "p******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v411, "pička", "p***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v412, "pičci", "p***i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v413, "pičaka", "p****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v414, "pizdunčić", "p*******ć");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v415, "pizdunu", "p*****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v416, "pizdunom", "p******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v417, "pizdunima", "p*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v418, "pizduni", "p*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v419, "pizdune", "p*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v420, "pizduna", "p*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v421, "pizdun", "p****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v422, "pizdiš", "p****š");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v423, "pizdite", "p*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v424, "pizdio", "p****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v425, "pizdica", "p*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v426, "pizdi", "p***i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v427, "pizdeku", "p*****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v428, "pizdeke", "p*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v429, "pizdeka", "p*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v430, "pizdek", "p****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v431, "pizdarijom", "p********m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v432, "pizdarijica", "p*********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v433, "pizdarije", "p*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v434, "pizdarijama", "p*********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v435, "pizdarija", "p*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v436, "pizdama", "p*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v437, "pizda", "p***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v438, "pimpekom", "p******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v439, "pimpeki", "p*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v440, "pimpeka", "p*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v441, "pimpek", "p****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v442, "picolovke", "p*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v443, "pico", "p**o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v444, "pice", "p**e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v445, "pica", "p**a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v446, "pedofilčinu", "p*********u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[13],0>(v447, "pedofilčinom", "p**********m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[12],0>(v448, "pederčićima", "p*********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[10],0>(v449, "pederčići", "p*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[11],0>(v450, "pederčićem", "p********m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[10],0>(v451, "pederčiće", "p*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[10],0>(v452, "pederčića", "p*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v453, "pederčić", "p******ć");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v454, "pederčinu", "p*******u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v455, "pederčinom", "p********m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v456, "pederčino", "p*******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v457, "pederčine", "p*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v458, "pederčina", "p*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v459, "pederu", "p****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v460, "pedersku", "p******u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v461, "pederskom", "p*******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v462, "pederskoj", "p*******j");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v463, "pederskog", "p*******g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v464, "pederskim", "p*******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v465, "pederski", "p******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v466, "pederom", "p*****m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v467, "pederluku", "p*******u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v468, "pederluka", "p*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v469, "pederluk", "p******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v470, "pederko", "p*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v471, "pederizam", "p*******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v472, "pederima", "p******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v473, "pederi", "p****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v474, "pedere", "p****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v475, "pederastog", "p********g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v476, "pederastim", "p********m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v477, "pederastiju", "p*********u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v478, "pedera", "p****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[13],0>(v479, "partizančine", "p**********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[15],0>(v480, "partizančinama", "p************a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v481, "paksu", "p***u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v482, "opizdilo", "o******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v483, "opizdii", "o*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v484, "opizdi", "o****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v485, "odjebo", "o****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v486, "odjebite", "o******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v487, "odjebi", "o****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v488, "odjebeš", "o*****š");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v489, "odjebete", "o******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v490, "odjebemo", "o******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v491, "odjebe", "o****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v492, "odjebana", "o******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v493, "odjebali", "o******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v494, "odjebale", "o******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v495, "nepojebana", "n********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v496, "nenadjebivi", "n*********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v497, "nejebici", "n******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v498, "nedojebani", "n********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v499, "nedojebana", "n********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v500, "nedojeban", "n*******n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v501, "nasrao", "n****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v502, "naserem", "n*****m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v503, "nasere", "n****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v504, "narajcane", "n*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v505, "nakurac", "n*****c");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[17],0>(v506, "najretardiraniji", "n**************i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v507, "najnadrkaniji", "n***********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[15],0>(v508, "najkurčevitije", "n************e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v509, "najjebenijeg", "n**********g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v510, "najebo", "n****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v511, "najebeš", "n*****š");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v512, "najebemo", "n******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v513, "najebe", "n****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v514, "najebati", "n******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v515, "najebat", "n*****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v516, "najebao", "n*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v517, "najebah", "n*****h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v518, "najdebilniji", "n**********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v519, "najdebilnije", "n**********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v520, "naguženima", "n********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v521, "naguziš", "n*****š");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v522, "naguzio", "n*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v523, "naguzimo", "n******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v524, "naguzim", "n*****m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v525, "naguzili", "n******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v526, "naguzi", "n****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v527, "nadrkao", "n*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v528, "nadrkano", "n******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v529, "nadrkani", "n******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v530, "nadrkana", "n******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v531, "nadjebavanje", "n**********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v532, "muDa", "m**a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v533, "morončinu", "m*******u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v534, "moronu", "m****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v535, "moronskom", "m*******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v536, "moronima", "m******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v537, "moroni", "m****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v538, "moron", "m***n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v539, "mikropenisom", "m**********m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v540, "ljakse", "l****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v541, "lizoguzca", "l*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v542, "lezbu", "l***u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v543, "lezbom", "l****m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v544, "lezbo", "l***o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v545, "lezbijska", "l*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v546, "lezbi", "l***i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v547, "lezbejke", "l******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v548, "lezbe", "l***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v549, "lezbačenju", "l********u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v550, "lezbačenjem", "l*********m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v551, "lezbačenja", "l********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v552, "lezbača", "l*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v553, "lezbama", "l*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v554, "kučko", "k***o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v555, "kučkinih", "k******h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v556, "kučkice", "k*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v557, "kučki", "k***i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v558, "kučke", "k***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v559, "kučkama", "k*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v560, "kučka", "k***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v561, "kurčiti", "k*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v562, "kurčite", "k*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v563, "kurčine", "k*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v564, "kurčina", "k*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v565, "kurčim", "k****m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v566, "kurčili", "k*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v567, "kurčenje", "k******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v568, "kurvu", "k***u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v569, "kurvom", "k****m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v570, "kurviš", "k****š");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v571, "kurvinski", "k*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v572, "kurvinske", "k*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v573, "kurvinoga", "k*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v574, "kurvinim", "k******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v575, "kurvinih", "k******h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v576, "kurvini", "k*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v577, "kurvin", "k****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v578, "kurvice", "k*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v579, "kurvi", "k***i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v580, "kurveština", "k********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v581, "kurvetinom", "k********m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v582, "kurvetino", "k*******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v583, "kurvetini", "k*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v584, "kurvetine", "k*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v585, "kurvetina", "k*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v586, "kurverajima", "k*********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v587, "kurve", "k***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v588, "kurvati", "k*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v589, "kurvanjska", "k********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v590, "kurvama", "k*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v591, "kurva", "k***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v592, "kurcu", "k***u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v593, "kurci", "k***i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v594, "kurcem", "k****m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v595, "kurce", "k***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v596, "kurca", "k***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v597, "kurac", "k***c");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v598, "kosookih", "k******h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v599, "kosooke", "k*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v600, "kopile", "k****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v601, "kopilani", "k******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v602, "kmice", "k***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v603, "kmicama", "k*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[13],0>(v604, "klimakteruše", "k**********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v605, "kiturinu", "k******u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v606, "kenjuckanje", "k*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v607, "kenjkaš", "k*****š");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v608, "kenjkavih", "k*******h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v609, "kenjkati", "k******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v610, "kenjka", "k****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v611, "kenjci", "k****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v612, "kenjatori", "k*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v613, "kenjator", "k******r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v614, "kenjati", "k*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v615, "kenjat", "k****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v616, "kenjao", "k****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v617, "kenjam", "k****m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v618, "kenjali", "k*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v619, "kenjala", "k*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v620, "kenjajte", "k******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v621, "kenjac", "k****c");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v622, "karina", "k****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v623, "karani", "k****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v624, "karam", "k***m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v625, "karaju", "k****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(v626, "jеbеnа", "j****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v627, "junfera", "j*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v628, "jebu", "j**u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v629, "jebote", "j****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v630, "jebo", "j**o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v631, "jebivjetra", "j********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v632, "jebimo", "j****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v633, "jebiga", "j****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v634, "jebi", "j**i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v635, "jebeš", "j***š");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v636, "jebete", "j****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v637, "jebenoj", "j*****j");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v638, "jebenoga", "j******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v639, "jebeno", "j****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v640, "jebenim", "j*****m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v641, "jebenih", "j*****h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v642, "jebeni", "j****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v643, "jebene", "j****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v644, "jebena", "j****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v645, "jeben", "j***n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v646, "jebemu", "j****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v647, "jebemo", "j****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v648, "jebem", "j***m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v649, "jebe", "j**e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v650, "jebaču", "j****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v651, "jebačku", "j*****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v652, "jebači", "j****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v653, "jebače", "j****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v654, "jebač", "j***č");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v655, "jebavati", "j******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v656, "jebavat", "j*****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v657, "jebavao", "j*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v658, "jebavali", "j******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v659, "jebavala", "j******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v660, "jebava", "j****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v661, "jebate", "j****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v662, "jebat", "j***t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v663, "jebao", "j***o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v664, "jebanjem", "j******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v665, "jebanje", "j*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v666, "jebanja", "j*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v667, "jebalo", "j****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v668, "jebali", "j****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v669, "jebale", "j****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v670, "jebala", "j****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v671, "jebal", "j***l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v672, "jbg", "j*g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v673, "izjebu", "i****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v674, "izjebo", "i****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v675, "izjebite", "i******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v676, "izjebem", "i*****m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v677, "izjebe", "i****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v678, "izjebao", "i*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v679, "izjeban", "i*****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v680, "izjebalo", "i******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v681, "izjebali", "i******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v682, "izdrkotine", "i********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v683, "izdrkavanje", "i*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v684, "izdrkavanja", "i*********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v685, "izdrkavaju", "i********u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v686, "izdrkat", "i*****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v687, "izdrkao", "i*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v688, "izdrkan", "i*****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v689, "izdrka", "i****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v690, "izasrao", "i*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v691, "izasrala", "i******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v692, "isprdku", "i*****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v693, "isprdiš", "i*****š");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v694, "isprdio", "i*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v695, "isprdili", "i******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v696, "isprdcima", "i*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v697, "isprdali", "i******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v698, "isprdaka", "i******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v699, "isprdak", "i*****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v700, "ispišaš", "i*****š");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v701, "homiću", "h****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v702, "homićima", "h******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v703, "homićem", "h*****m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v704, "homiće", "h****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v705, "homića", "h****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v706, "homić", "h***ć");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v707, "heil", "h**l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v708, "guženje", "g*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v709, "guzovima", "g******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v710, "guzonjice", "g*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v711, "guzonje", "g*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v712, "guzonjama", "g*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v713, "guzonja", "g*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v714, "guzom", "g***m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v715, "guzoljublje", "g*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v716, "guzolizaca", "g********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v717, "guznih", "g****h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v718, "guziš", "g***š");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v719, "guzičetini", "g********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v720, "guzičetine", "g********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v721, "guzičari", "g******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v722, "guzite", "g****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v723, "guzimo", "g****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v724, "guzim", "g***m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v725, "guzili", "g****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v726, "guzile", "g****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v727, "guzila", "g****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v728, "guzicu", "g****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v729, "guzatu", "g****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v730, "guzatim", "g*****m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v731, "guzata", "g****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v732, "guz", "g*z");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v733, "govnu", "g***u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v734, "govno", "g***o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v735, "govnima", "g*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v736, "govneta", "g*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v737, "govnastog", "g*******g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v738, "govnaru", "g*****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v739, "govnari", "g*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v740, "govnare", "g*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v741, "govnara", "g*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v742, "govna", "g***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v743, "govance", "g*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v744, "govana", "g****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v745, "gologuzim", "g*******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v746, "gologuzi", "g******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v747, "fukare", "f****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v748, "fukara", "f****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v749, "fukao", "f***o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v750, "fukam", "f***m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v751, "fukajte", "f*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v752, "fufice", "f****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v753, "fufica", "f****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v754, "fucking", "f*****g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v755, "fuck", "f**k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v756, "flundru", "f*****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v757, "fificama", "f******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v758, "fakeri", "f****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v759, "dupetu", "d****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v760, "dupeta", "d****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v761, "dupeljubac", "d********c");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v762, "dupelizaca", "d********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v763, "dupeliscima", "d*********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v764, "dupelisci", "d*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v765, "dupeglavca", "d********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v766, "dupeglavaca", "d*********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v767, "dupeglavac", "d********c");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v768, "dupe", "d**e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v769, "drolju", "d****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v770, "droljo", "d****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v771, "droljicom", "d*******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v772, "droljice", "d******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v773, "droljicama", "d********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v774, "droljica", "d******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v775, "droljetinu", "d********u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v776, "droljetina", "d********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v777, "drolje", "d****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v778, "droljastu", "d*******u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v779, "droljasti", "d*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v780, "droljama", "d******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v781, "drolja", "d****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v782, "drkice", "d****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v783, "drkaš", "d***š");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v784, "drkati", "d****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v785, "drkate", "d****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v786, "drkao", "d***o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v787, "drkanju", "d*****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v788, "drkanjem", "d******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v789, "drkam", "d***m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v790, "drkali", "d****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v791, "drkaju", "d****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v792, "drkajte", "d*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v793, "drkaj", "d***j");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v794, "drkadžije", "d*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v795, "drkadžija", "d*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v796, "drka", "d**a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v797, "dreku", "d***u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v798, "drekovi", "d*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v799, "drekec", "d****c");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v800, "drek", "d**k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v801, "dovraga", "d*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v802, "dopizdio", "d******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v803, "dopizdili", "d*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v804, "dopizdi", "d*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v805, "degenom", "d*****m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v806, "debeloguzost", "d**********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v807, "debeloguzih", "d*********h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v808, "debeloguzi", "d********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v809, "debeloguze", "d********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v810, "debeloguzac", "d*********c");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v811, "crnčugo", "c*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v812, "crnčuge", "c*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v813, "crnčuga", "c*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v814, "crnjo", "c***o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v815, "cigu", "c**u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v816, "cigo", "c**o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v817, "cigići", "c****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v818, "cigićem", "c*****m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v819, "cige", "c**e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v820, "ciganu", "c****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v821, "cigansku", "c******u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v822, "ciganskoj", "c*******j");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v823, "ciganskih", "c*******h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v824, "ciganske", "c******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v825, "ciganom", "c*****m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v826, "ciganluka", "c*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v827, "ciganluk", "c******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v828, "ciganko", "c*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v829, "ciganke", "c*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v830, "ciganka", "c*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v831, "ciganinom", "c*******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v832, "ciganin", "c*****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v833, "ciganima", "c******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v834, "cigani", "c****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v835, "cigane", "c****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v836, "cigana", "c****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v837, "cice", "c**e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v838, "bosančerosa", "b*********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v839, "babunčino", "b*******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v840, "ass", "a*s");
    std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](&siri::dialogengine::GetProfanityFilter_hr(void)::sProfanityData_hr, (uint64_t)v5, 0x344uLL);
    for (i = 0; i != -5016; i -= 6)
      std::pair<std::string const,std::string>::~pair((uint64_t)&v840[i]);
    __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], &siri::dialogengine::GetProfanityFilter_hr(void)::sProfanityData_hr, &dword_1BF794000);
  }
  *v1 = 0;
  v1[1] = 0;
  v1[2] = 0;
  return std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(v1, siri::dialogengine::GetProfanityFilter_hr(void)::sProfanityData_hr, *(uint64_t *)algn_1EF582EB0, 0xAAAAAAAAAAAAAAABLL* ((*(_QWORD *)algn_1EF582EB0 - siri::dialogengine::GetProfanityFilter_hr(void)::sProfanityData_hr) >> 4));
}

void sub_1BFB734C0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + 40080;
  v4 = -40128;
  do
  {
    v3 = std::pair<std::string const,std::string>::~pair(v3) - 48;
    v4 += 48;
  }
  while (v4);
  _Unwind_Resume(a1);
}

_QWORD *siri::dialogengine::GetProfanityFilter_hu(siri::dialogengine *this)
{
  _QWORD *v1;
  unsigned __int8 v2;
  uint64_t i;
  _QWORD v5[6];
  _QWORD v6[6];
  _QWORD v7[6];
  _QWORD v8[6];
  _QWORD v9[6];
  _QWORD v10[6];
  _QWORD v11[6];
  _QWORD v12[6];
  _QWORD v13[6];
  _QWORD v14[6];
  _QWORD v15[6];
  _QWORD v16[6];
  _QWORD v17[6];
  _QWORD v18[6];
  _QWORD v19[6];
  _QWORD v20[6];
  _QWORD v21[6];
  _QWORD v22[6];
  _QWORD v23[6];
  _QWORD v24[6];
  _QWORD v25[6];
  _QWORD v26[6];
  _QWORD v27[6];
  _QWORD v28[6];
  _QWORD v29[6];
  _QWORD v30[6];
  _QWORD v31[6];
  _QWORD v32[6];
  _QWORD v33[6];
  _QWORD v34[6];
  _QWORD v35[6];
  _QWORD v36[6];
  _QWORD v37[6];
  _QWORD v38[6];
  _QWORD v39[6];
  _QWORD v40[6];
  _QWORD v41[6];
  _QWORD v42[6];
  _QWORD v43[6];
  _QWORD v44[6];
  _QWORD v45[6];
  _QWORD v46[6];
  _QWORD v47[6];
  _QWORD v48[6];
  _QWORD v49[6];
  _QWORD v50[6];
  _QWORD v51[6];
  _QWORD v52[6];
  _QWORD v53[6];
  _QWORD v54[6];
  _QWORD v55[6];
  _QWORD v56[6];
  _QWORD v57[6];
  _QWORD v58[6];
  _QWORD v59[6];
  _QWORD v60[6];
  _QWORD v61[6];
  _QWORD v62[6];
  _QWORD v63[6];
  _QWORD v64[6];
  _QWORD v65[6];
  _QWORD v66[6];
  _QWORD v67[6];
  _QWORD v68[6];
  _QWORD v69[6];
  _QWORD v70[6];
  _QWORD v71[6];
  _QWORD v72[6];
  _QWORD v73[6];
  _QWORD v74[6];
  _QWORD v75[6];
  _QWORD v76[6];
  _QWORD v77[6];
  _QWORD v78[6];
  _QWORD v79[6];
  _QWORD v80[6];
  _QWORD v81[6];
  _QWORD v82[6];
  _QWORD v83[6];
  _QWORD v84[6];
  _QWORD v85[6];
  _QWORD v86[6];
  _QWORD v87[6];
  _QWORD v88[6];
  _QWORD v89[6];
  _QWORD v90[6];
  _QWORD v91[6];
  _QWORD v92[6];
  _QWORD v93[6];
  _QWORD v94[6];
  _QWORD v95[6];
  _QWORD v96[6];
  _QWORD v97[6];
  _QWORD v98[6];
  _QWORD v99[6];
  _QWORD v100[6];
  _QWORD v101[6];
  _QWORD v102[6];
  _QWORD v103[6];
  _QWORD v104[6];
  _QWORD v105[6];
  _QWORD v106[6];
  _QWORD v107[6];
  _QWORD v108[6];
  _QWORD v109[6];
  _QWORD v110[6];
  _QWORD v111[6];
  _QWORD v112[6];
  _QWORD v113[6];
  _QWORD v114[6];
  _QWORD v115[6];
  _QWORD v116[6];
  _QWORD v117[6];
  _QWORD v118[6];
  _QWORD v119[6];
  _QWORD v120[6];
  _QWORD v121[6];
  _QWORD v122[6];
  _QWORD v123[6];
  _QWORD v124[6];
  _QWORD v125[6];
  _QWORD v126[6];
  _QWORD v127[6];
  _QWORD v128[6];
  _QWORD v129[6];
  _QWORD v130[6];
  _QWORD v131[6];
  _QWORD v132[6];
  _QWORD v133[6];
  _QWORD v134[6];
  _QWORD v135[6];
  _QWORD v136[6];
  _QWORD v137[6];
  _QWORD v138[6];
  _QWORD v139[6];
  _QWORD v140[6];
  _QWORD v141[6];
  _QWORD v142[6];
  _QWORD v143[6];
  _QWORD v144[6];
  _QWORD v145[6];
  _QWORD v146[6];
  _QWORD v147[6];
  _QWORD v148[6];
  _QWORD v149[6];
  _QWORD v150[6];
  _QWORD v151[6];
  _QWORD v152[6];
  _QWORD v153[6];
  _QWORD v154[6];
  _QWORD v155[6];
  _QWORD v156[6];
  _QWORD v157[6];
  _QWORD v158[6];
  _QWORD v159[6];
  _QWORD v160[6];
  _QWORD v161[6];
  _QWORD v162[6];
  _QWORD v163[6];
  _QWORD v164[6];
  _QWORD v165[6];
  _QWORD v166[6];
  _QWORD v167[6];
  _QWORD v168[6];
  _QWORD v169[6];
  _QWORD v170[6];
  _QWORD v171[6];
  _QWORD v172[6];
  _QWORD v173[6];
  _QWORD v174[6];
  _QWORD v175[6];
  _QWORD v176[6];
  _QWORD v177[6];
  _QWORD v178[6];
  _QWORD v179[6];
  _QWORD v180[6];
  _QWORD v181[6];
  _QWORD v182[6];
  _QWORD v183[6];
  _QWORD v184[6];
  _QWORD v185[6];
  _QWORD v186[6];
  _QWORD v187[6];
  _QWORD v188[6];
  _QWORD v189[6];
  _QWORD v190[6];
  _QWORD v191[6];
  _QWORD v192[6];
  _QWORD v193[6];
  _QWORD v194[6];
  _QWORD v195[6];
  _QWORD v196[6];
  _QWORD v197[6];
  _QWORD v198[6];
  _QWORD v199[6];
  _QWORD v200[6];
  _QWORD v201[6];
  _QWORD v202[6];
  _QWORD v203[6];
  _QWORD v204[6];
  _QWORD v205[6];
  _QWORD v206[6];
  _QWORD v207[6];
  _QWORD v208[6];
  _QWORD v209[6];
  _QWORD v210[6];
  _QWORD v211[6];
  _QWORD v212[6];
  _QWORD v213[6];
  _QWORD v214[6];
  _QWORD v215[6];
  _QWORD v216[6];
  _QWORD v217[6];
  _QWORD v218[6];
  _QWORD v219[6];
  _QWORD v220[6];
  _QWORD v221[6];
  _QWORD v222[6];
  _QWORD v223[6];
  _QWORD v224[6];
  _QWORD v225[6];
  _QWORD v226[6];
  _QWORD v227[6];
  _QWORD v228[6];
  _QWORD v229[6];
  _QWORD v230[6];
  _QWORD v231[6];
  _QWORD v232[6];
  _QWORD v233[6];
  _QWORD v234[6];
  _QWORD v235[6];
  _QWORD v236[6];
  _QWORD v237[6];
  _QWORD v238[6];
  _QWORD v239[6];
  _QWORD v240[6];
  _QWORD v241[6];
  _QWORD v242[6];
  _QWORD v243[6];
  _QWORD v244[6];
  _QWORD v245[6];
  _QWORD v246[6];
  _QWORD v247[6];
  _QWORD v248[6];
  _QWORD v249[6];
  _QWORD v250[6];
  _QWORD v251[6];
  _QWORD v252[6];
  _QWORD v253[6];
  _QWORD v254[6];
  _QWORD v255[6];
  _QWORD v256[6];
  _QWORD v257[6];
  _QWORD v258[6];
  _QWORD v259[6];
  _QWORD v260[6];
  _QWORD v261[6];
  _QWORD v262[6];
  _QWORD v263[6];
  _QWORD v264[6];
  _QWORD v265[6];
  _QWORD v266[6];
  _QWORD v267[6];
  _QWORD v268[6];
  _QWORD v269[6];
  _QWORD v270[6];
  _QWORD v271[6];
  _QWORD v272[6];
  _QWORD v273[6];
  _QWORD v274[6];
  _QWORD v275[6];
  _QWORD v276[6];
  _QWORD v277[6];
  _QWORD v278[6];
  _QWORD v279[6];
  _QWORD v280[6];
  _QWORD v281[6];
  _QWORD v282[6];
  _QWORD v283[6];
  _QWORD v284[6];
  _QWORD v285[6];
  _QWORD v286[6];
  _QWORD v287[6];
  _QWORD v288[6];
  _QWORD v289[6];
  _QWORD v290[6];
  _QWORD v291[6];
  _QWORD v292[6];
  _QWORD v293[6];
  _QWORD v294[6];
  _QWORD v295[6];
  _QWORD v296[6];
  _QWORD v297[6];
  _QWORD v298[6];
  _QWORD v299[6];
  _QWORD v300[6];
  _QWORD v301[6];
  _QWORD v302[6];
  _QWORD v303[6];
  _QWORD v304[6];
  _QWORD v305[6];
  _QWORD v306[6];
  _QWORD v307[6];
  _QWORD v308[6];
  _QWORD v309[6];
  _QWORD v310[6];
  _QWORD v311[6];
  _QWORD v312[6];
  _QWORD v313[6];
  _QWORD v314[6];
  _QWORD v315[6];
  _QWORD v316[6];
  _QWORD v317[6];
  _QWORD v318[6];
  _QWORD v319[6];
  _QWORD v320[6];
  _QWORD v321[6];
  _QWORD v322[6];
  _QWORD v323[6];
  _QWORD v324[6];
  _QWORD v325[6];
  _QWORD v326[6];
  _QWORD v327[6];
  _QWORD v328[6];
  _QWORD v329[6];
  _QWORD v330[6];
  _QWORD v331[6];
  _QWORD v332[6];
  _QWORD v333[6];
  _QWORD v334[6];
  _QWORD v335[6];
  _QWORD v336[6];
  _QWORD v337[6];
  _QWORD v338[6];
  _QWORD v339[6];
  _QWORD v340[6];
  _QWORD v341[6];
  _QWORD v342[6];
  _QWORD v343[6];
  _QWORD v344[6];
  _QWORD v345[6];
  _QWORD v346[6];
  _QWORD v347[6];
  _QWORD v348[6];
  _QWORD v349[6];
  _QWORD v350[6];
  _QWORD v351[6];
  _QWORD v352[6];
  _QWORD v353[6];
  _QWORD v354[6];
  _QWORD v355[6];
  _QWORD v356[6];
  _QWORD v357[6];
  _QWORD v358[6];
  _QWORD v359[6];
  _QWORD v360[6];
  _QWORD v361[6];
  _QWORD v362[6];
  _QWORD v363[6];
  _QWORD v364[6];
  _QWORD v365[6];
  _QWORD v366[6];
  _QWORD v367[6];
  _QWORD v368[6];
  _QWORD v369[6];
  _QWORD v370[6];
  _QWORD v371[6];
  _QWORD v372[6];
  _QWORD v373[6];
  _QWORD v374[6];
  _QWORD v375[6];
  _QWORD v376[6];
  _QWORD v377[6];
  _QWORD v378[6];
  _QWORD v379[6];
  _QWORD v380[6];
  _QWORD v381[6];
  _QWORD v382[6];
  _QWORD v383[6];
  _QWORD v384[6];
  _QWORD v385[6];
  _QWORD v386[6];
  _QWORD v387[6];
  _QWORD v388[6];
  _QWORD v389[6];
  _QWORD v390[6];
  _QWORD v391[6];
  _QWORD v392[6];
  _QWORD v393[6];
  _QWORD v394[6];
  _QWORD v395[6];
  _QWORD v396[6];
  _QWORD v397[6];
  _QWORD v398[6];
  _QWORD v399[6];
  _QWORD v400[6];
  _QWORD v401[6];
  _QWORD v402[6];
  _QWORD v403[6];
  _QWORD v404[6];
  _QWORD v405[6];
  _QWORD v406[6];
  _QWORD v407[6];
  _QWORD v408[6];
  _QWORD v409[6];
  _QWORD v410[6];
  _QWORD v411[6];
  _QWORD v412[6];
  _QWORD v413[6];
  _QWORD v414[6];
  _QWORD v415[6];
  _QWORD v416[6];
  _QWORD v417[6];
  _QWORD v418[6];
  _QWORD v419[6];
  _QWORD v420[6];
  _QWORD v421[6];
  _QWORD v422[6];
  _QWORD v423[6];
  _QWORD v424[6];
  _QWORD v425[6];
  _QWORD v426[6];
  _QWORD v427[6];
  _QWORD v428[6];
  _QWORD v429[6];
  _QWORD v430[6];
  _QWORD v431[6];
  _QWORD v432[6];
  _QWORD v433[6];
  _QWORD v434[6];
  _QWORD v435[6];
  _QWORD v436[6];
  _QWORD v437[6];
  _QWORD v438[6];
  _QWORD v439[6];
  _QWORD v440[6];
  _QWORD v441[6];
  _QWORD v442[6];
  _QWORD v443[6];
  _QWORD v444[6];
  _QWORD v445[6];
  _QWORD v446[6];
  _QWORD v447[6];
  _QWORD v448[6];
  _QWORD v449[6];
  _QWORD v450[6];
  _QWORD v451[6];
  _QWORD v452[6];
  _QWORD v453[6];
  _QWORD v454[6];
  _QWORD v455[6];
  _QWORD v456[6];
  _QWORD v457[6];
  _QWORD v458[6];
  _QWORD v459[6];
  _QWORD v460[6];
  _QWORD v461[6];
  _QWORD v462[6];
  _QWORD v463[6];
  _QWORD v464[6];
  _QWORD v465[6];
  _QWORD v466[6];
  _QWORD v467[6];
  _QWORD v468[6];
  _QWORD v469[6];
  _QWORD v470[6];
  _QWORD v471[6];
  _QWORD v472[6];
  _QWORD v473[6];
  _QWORD v474[6];
  _QWORD v475[6];
  _QWORD v476[6];
  _QWORD v477[6];
  _QWORD v478[6];
  _QWORD v479[6];
  _QWORD v480[6];
  _QWORD v481[6];
  _QWORD v482[6];
  _QWORD v483[6];
  _QWORD v484[6];
  _QWORD v485[6];
  _QWORD v486[6];
  _QWORD v487[6];
  _QWORD v488[6];
  _QWORD v489[6];
  _QWORD v490[6];
  _QWORD v491[6];
  _QWORD v492[6];
  _QWORD v493[6];
  _QWORD v494[6];
  _QWORD v495[6];
  _QWORD v496[6];
  _QWORD v497[6];
  _QWORD v498[6];
  _QWORD v499[6];
  _QWORD v500[6];
  _QWORD v501[6];
  _QWORD v502[6];
  _QWORD v503[6];
  _QWORD v504[6];
  _QWORD v505[6];
  _QWORD v506[6];
  _QWORD v507[6];
  _QWORD v508[6];
  _QWORD v509[6];
  _QWORD v510[6];
  _QWORD v511[6];
  _QWORD v512[6];
  _QWORD v513[6];
  _QWORD v514[6];
  _QWORD v515[6];
  _QWORD v516[6];
  _QWORD v517[6];
  _QWORD v518[6];
  _QWORD v519[6];
  _QWORD v520[6];
  _QWORD v521[6];
  _QWORD v522[6];
  _QWORD v523[6];
  _QWORD v524[6];
  _QWORD v525[6];
  _QWORD v526[6];
  _QWORD v527[6];
  _QWORD v528[6];
  _QWORD v529[6];
  _QWORD v530[6];
  _QWORD v531[6];
  _QWORD v532[6];
  _QWORD v533[6];
  _QWORD v534[6];
  _QWORD v535[6];
  _QWORD v536[6];
  _QWORD v537[6];
  _QWORD v538[6];
  _QWORD v539[6];
  _QWORD v540[6];
  _QWORD v541[6];
  _QWORD v542[6];
  _QWORD v543[6];
  _QWORD v544[6];
  _QWORD v545[6];
  _QWORD v546[6];
  _QWORD v547[6];
  _QWORD v548[6];
  _QWORD v549[6];
  _QWORD v550[6];
  _QWORD v551[6];
  _QWORD v552[6];
  _QWORD v553[6];
  _QWORD v554[6];
  _QWORD v555[7];

  v1 = (_QWORD *)MEMORY[0x1E0C80A78](this);
  v555[6] = *MEMORY[0x1E0C80C00];
  if ((v2 & 1) == 0
  {
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v5, "összeszarja", "ö*********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[14],0>(v6, "összeokádott", "ö**********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v7, "összehugyoz", "ö*********z");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[10],0>(v8, "átkúrták", "á******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v9, "átbaszás", "á******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v10, "átbaszta", "á******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v11, "átbaszott", "á*******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v12, "átbaszni", "á******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v13, "átbaszarintva", "á***********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v14, "átbasz", "á****z");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v15, "ánusza", "á****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v16, "álbuzikat", "á*******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v17, "valagával", "v*******l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v18, "valagát", "v*****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v19, "valagunkba", "v********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v20, "valaga", "v****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v21, "valag", "v***g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v22, "teleszarnak", "t*********k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v23, "tehénszar", "t*******r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[10],0>(v24, "szófosást", "s*******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[12],0>(v25, "szófosásból", "s*********l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[11],0>(v26, "szófosásba", "s********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[11],0>(v27, "szétkúrták", "s********k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[10],0>(v28, "szétkúrni", "s*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v29, "szétbaszott", "s*********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v30, "szétbaszni", "s********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v31, "szétbasszuk", "s*********k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[14],0>(v32, "szájbabaszott", "s***********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v33, "szopós", "s****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v34, "szopó", "s***ó");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v35, "szopás", "s****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v36, "szopunk", "s*****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v37, "szoptam", "s*****m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v38, "szopta", "s****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v39, "szopok", "s****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v40, "szopod", "s****d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v41, "szopnánk", "s******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v42, "szopni", "s****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v43, "szopkodja", "s*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v44, "szopjál", "s*****l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v45, "szopják", "s*****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v46, "szopjak", "s*****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v47, "szophattok", "s********k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v48, "szopatás", "s******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v49, "szopatva", "s******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v50, "szopatni", "s******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v51, "szopatnak", "s*******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v52, "szarért", "s*****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v53, "szarát", "s****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v54, "szarás", "s****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v55, "szarunk", "s*****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v56, "szarul", "s****l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v57, "szartál-e", "s*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v58, "szarták", "s*****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v59, "szartok", "s*****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v60, "szartam", "s*****m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v61, "szartak", "s*****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v62, "szarta", "s****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v63, "szart", "s***t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v64, "szarságra", "s*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v65, "szarságokra", "s*********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v66, "szarságokat", "s*********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v67, "szarsággal", "s********l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v68, "szarság", "s*****g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v69, "szarszag", "s******g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v70, "szarsz", "s****z");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v71, "szarrágó", "s******ó");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v72, "szarrá", "s****á");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v73, "szarral", "s*****l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v74, "szarrakás", "s*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v75, "szarra", "s****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v76, "szaroztak", "s*******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v77, "szaroznak", "s*******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v78, "szarosoknál", "s*********l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v79, "szaros", "s****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v80, "szaron", "s****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v81, "szarom", "s****m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v82, "szarokért", "s*******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v83, "szarokra", "s******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v84, "szaroknál", "s*******l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v85, "szarokat", "s******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v86, "szarok", "s****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v87, "szarod", "s****d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v88, "szarná", "s****á");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v89, "szarni", "s****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v90, "szarkupac", "s*******c");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v91, "szarkeverés", "s*********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v92, "szarjuk", "s*****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v93, "szarjak", "s*****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v94, "szarj", "s***j");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[14],0>(v95, "szarintámadás", "s***********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v96, "szarig", "s****g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v97, "szarházit", "s*******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v98, "szarházinak", "s*********k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v99, "szarházi", "s******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v100, "szarhoz", "s*****z");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v101, "szarhasson", "s********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v102, "szarhalmot", "s********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[15],0>(v103, "szardobálással", "s************l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v104, "szardarab", "s*******b");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[16],0>(v105, "szarcsimbókokat", "s*************t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v106, "szarból", "s*****l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v107, "szarban", "s*****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v108, "szarba", "s****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v109, "szarató", "s*****ó");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[13],0>(v110, "szarakodásra", "s**********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v111, "szarakodás", "s********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v112, "szarakodtak", "s*********k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v113, "szarakodni", "s********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v114, "szarakodnak", "s*********k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v115, "szarakodjunk", "s**********k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v116, "szarabbul", "s*******l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v117, "szarabbat", "s*******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v118, "szarabb", "s*****b");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v119, "szar", "s**r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[11],0>(v120, "sunázásról", "s********l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[9],0>(v121, "sunáznám", "s******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v122, "sunázhatna", "s********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v123, "sunát", "s***t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v124, "strihelni", "s*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v125, "stricit", "s*****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v126, "stricinek", "s*******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v127, "strichelt", "s*******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v128, "seggünket", "s*******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[11],0>(v129, "seggünkből", "s********l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[9],0>(v130, "seggükön", "s******n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v131, "seggüket", "s******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v132, "seggükbe", "s******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v133, "seggével", "s******l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[9],0>(v134, "seggénél", "s******l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v135, "seggének", "s******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v136, "seggén", "s****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[9],0>(v137, "seggéből", "s******l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v138, "seggében", "s******n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v139, "seggébe", "s*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[14],0>(v140, "seggvakarását", "s***********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v141, "seggtörlő", "s*******ő");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[13],0>(v142, "seggtörlésre", "s**********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[14],0>(v143, "seggtapogatás", "s***********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v144, "seggrepacsi", "s*********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[13],0>(v145, "seggnyalónak", "s**********k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[13],0>(v146, "seggnyalókra", "s**********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[13],0>(v147, "seggnyalókat", "s**********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v148, "seggnyalók", "s********k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v149, "seggnyalója", "s*********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v150, "seggnyalói", "s********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v151, "seggnyaló", "s*******ó");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v152, "seggnyalás", "s********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v153, "segglyuka", "s*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v154, "seggibe", "s*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v155, "segghülye", "s*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[13],0>(v156, "seggformájú", "s*********ú");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v157, "seggfejre", "s*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v158, "seggfejjel", "s********l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v159, "seggfejezik", "s*********k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v160, "seggfejet", "s*******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v161, "seggfejek", "s*******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v162, "seggfejei", "s*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v163, "seggfej", "s*****j");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v164, "seggetekre", "s********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v165, "segget", "s****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v166, "seggen", "s****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v167, "seggemet", "s******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v168, "seggembe", "s******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v169, "seggem", "s****m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v170, "seggel", "s****l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v171, "seggek", "s****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v172, "seggedet", "s******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v173, "seggeden", "s******n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v174, "seggedben", "s*******n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v175, "seggedbe", "s******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v176, "segged", "s****d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v177, "segge", "s***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[15],0>(v178, "seggberúgjátok", "s************k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v179, "seggben", "s*****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v180, "seggbe", "s****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v181, "segg", "s**g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v182, "ringyó", "r****ó");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[15],0>(v183, "ribancrendszám", "r************m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v184, "ribanckodik", "r*********k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v185, "ribanc", "r****c");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v186, "reklámbuzi", "r********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v187, "ratyik", "r****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[10],0>(v188, "pöcsöltem", "p*******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[10],0>(v189, "pöcsöknek", "p*******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[9],0>(v190, "pöcsöket", "p******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v191, "pöcst", "p***t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v192, "pöcsirigy", "p*******y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v193, "pöcsfejek", "p*******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v194, "pöcsfej", "p*****j");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v195, "pöcs", "p**s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v196, "pöccsel", "p*****l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v197, "puncival", "p******l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v198, "puncijuk", "p******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v199, "puncija", "p*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v200, "punci", "p***i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v201, "puhapöcs", "p******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v202, "prostikról", "p********l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v203, "prostik", "p*****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v204, "porbafingó", "p********ó");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(v205, "popóját", "p*****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[9],0>(v206, "popójába", "p******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v207, "popódat", "p*****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v208, "popó", "p**ó");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(v209, "pináját", "p*****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v210, "pina", "p**a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v211, "picsázni", "p******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v212, "picsának", "p******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[9],0>(v213, "picsáját", "p******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v214, "picsába", "p*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v215, "picsa", "p***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v216, "pederaszta", "p********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v217, "orálszex", "o******x");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v218, "odabaszták", "o********k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v219, "odabaszok", "o*******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v220, "odabasznak", "o********k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v221, "nyomoronc", "n*******c");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v222, "nyomi", "n***i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v223, "nyasgem", "n*****m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v224, "niggerre", "n******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v225, "niggerekkel", "n*********l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v226, "niggerek", "n******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v227, "nigger", "n****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v228, "nagyseggű", "n*******ű");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v229, "mozibuzikkal", "m**********l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v230, "mozibuzik", "m*******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v231, "mozibuzi", "m******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v232, "megkúrja", "m******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v233, "megfingatni", "m*********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v234, "megdugják", "m*******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v235, "megdughassa", "m*********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v236, "megbaszott", "m*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v237, "megbaszott", "m********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v238, "megbaszhatod", "m**********d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v239, "megbasz", "m*****z");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v240, "lószart", "l*****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v241, "lószarral", "l*******l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v242, "lószarban", "l*******n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v243, "lószar", "l****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v244, "lófaszt", "l*****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[10],0>(v245, "lófaszból", "l*******l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v246, "lófasz", "l****z");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(v247, "lócsöcs", "l*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v248, "lóbaszó", "l*****ó");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v249, "leturházni", "l********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v250, "leszoptad", "l*******d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v251, "leszbi", "l****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v252, "leszaró", "l*****ó");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v253, "leszarásnak", "l*********k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v254, "leszarva", "l******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v255, "leszartak", "l*******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v256, "leszarta", "l******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v257, "leszarom", "l******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v258, "leszarnám", "l*******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v259, "leszarni", "l******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v260, "leszarna", "l******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v261, "leszarlak", "l*******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v262, "leszarják", "l*******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v263, "leszarjuk", "l*******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v264, "leszarja", "l******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v265, "lepisál", "l*****l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v266, "lekurvázta", "l********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[16],0>(v267, "lehülyepicsázta", "l*************a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v268, "lebaszás", "l******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v269, "lebaszta", "l******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[9],0>(v270, "kúródott", "k******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v271, "kúró", "k**ó");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v272, "kúrom", "k***m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v273, "kúrok", "k***k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v274, "kúrni", "k***i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v275, "kúrnak", "k****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v276, "kúrna", "k***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[9],0>(v277, "kúrjátok", "k******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[10],0>(v278, "köcsögség", "k*******g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v279, "kutyaszart", "k********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[13],0>(v280, "kutyaszarról", "k**********l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v281, "kutyaszaros", "k*********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v282, "kutyaszar", "k*******r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v283, "kurvázó", "k*****ó");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v284, "kurvázott", "k*******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v285, "kurvázik", "k******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v286, "kurvával", "k******l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v287, "kurvát", "k****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v288, "kurvás", "k****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v289, "kurvára", "k*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v290, "kurvának", "k******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[12],0>(v291, "kurválkodás", "k*********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v292, "kurvákat", "k******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v293, "kurvák", "k****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v294, "kurvája", "k*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v295, "kurvult", "k*****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v296, "kurvaszar", "k*******r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v297, "kurvaország", "k*********g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v298, "kurva", "k***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v299, "kula", "k**a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[10],0>(v300, "kisköcsög", "k*******g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[12],0>(v301, "kipicsáznám", "k*********m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v302, "kicsesztetek", "k**********k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v303, "kicsesztek", "k********k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v304, "kicseszni", "k*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v305, "kicseszett", "k********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v306, "kibaszta", "k******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v307, "kibaszottul", "k*********l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v308, "kibaszott", "k*******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v309, "kibasznék", "k*******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v310, "kibaszni", "k******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v311, "kibasznak", "k*******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v312, "kibaszik", "k******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v313, "kibasszanak", "k*********k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[13],0>(v314, "keményfaszú", "k*********ú");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[11],0>(v315, "kakálásnál", "k********l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(v316, "kakából", "k*****l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v317, "kaksit", "k****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v318, "kakiról", "k*****l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v319, "kakil", "k***l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v320, "kaka", "k**a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[10],0>(v321, "húgyozták", "h*******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v322, "hangyafing", "h********g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v323, "gólyafos", "g******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v324, "genyók", "g****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v325, "genyó", "g***ó");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v326, "genyának", "g******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v327, "genya", "g***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v328, "gennyláda", "g*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v329, "gecizésre", "g*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v330, "geciségnek", "g********k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v331, "geciláda", "g******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v332, "geciknek", "g******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v333, "gecik", "g***k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[13],0>(v334, "gecigránátot", "g**********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v335, "gecifos", "g*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v336, "gecibe", "g****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v337, "geci", "g**i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[9],0>(v338, "fütyijük", "f******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[11],0>(v339, "fütyijének", "f********k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v340, "fütyi", "f***i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[11],0>(v341, "félrekúró", "f*******ó");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v342, "fosás", "f***s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v343, "fosunk", "f****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v344, "fostalicska", "f*********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v345, "fost", "f**t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v346, "fosszínü", "f******ü");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v347, "fossanak", "f******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v348, "fossal", "f****l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v349, "foss", "f**s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v350, "fospumpa", "f******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v351, "fosni", "f***i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v352, "fosnak", "f****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v353, "fosik", "f***k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v354, "fosfej", "f****j");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v355, "fosból", "f****l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v356, "fosarcúak", "f*******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v357, "fos", "f*s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v358, "fingós", "f****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[13],0>(v359, "fingásaidról", "f**********l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v360, "finguk", "f****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v361, "fingod", "f****d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v362, "fingjuk", "f*****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v363, "fingjam", "f*****m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v364, "fingja", "f****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v365, "fingik", "f****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v366, "finghatnak", "f********k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v367, "fingatni", "f******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v368, "fingania", "f******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v369, "fing", "f**g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v370, "filmbuzikkal", "f**********l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v371, "filmbuzi", "f******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[13],0>(v372, "fenéknyalása", "f**********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[10],0>(v373, "felkúrják", "f*******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v374, "fekák", "f***k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v375, "feka", "f**a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v376, "faszával", "f******l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v377, "faszát", "f****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v378, "faszára", "f*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v379, "faszán", "f****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v380, "fasztól", "f*****l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v381, "faszt", "f***t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[13],0>(v382, "faszságukhoz", "f**********z");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v383, "faszságukat", "f*********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v384, "faszságra", "f*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v385, "faszságot", "f*******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v386, "faszságokra", "f*********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[13],0>(v387, "faszságokkal", "f**********l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v388, "faszságokat", "f*********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[13],0>(v389, "faszságodnál", "f**********l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v390, "faszságaik", "f********k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v391, "faszság", "f*****g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v392, "faszszopó", "f*******ó");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v393, "faszról", "f*****l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v394, "faszparaszt", "f*********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v395, "faszom", "f****m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v396, "faszoknak", "f*******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v397, "faszok", "f****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v398, "faszod", "f****d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v399, "fasznak", "f*****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v400, "faszkodás", "f*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v401, "faszkalappal", "f**********l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v402, "faszkalapok", "f*********k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v403, "faszkalap", "f*******p");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v404, "faszfejű", "f******ű");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v405, "faszfej", "f*****j");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v406, "faszból", "f*****l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v407, "faszban", "f*****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v408, "faszba", "f****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v409, "fasz", "f**z");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v410, "fapinával", "f*******l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v411, "fapina", "f****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v412, "elszarni", "e******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v413, "elqrva", "e****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[11],0>(v414, "elkúródott", "e********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[10],0>(v415, "elkúrásai", "e*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[9],0>(v416, "elkúrták", "e******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v417, "elkúrtuk", "e******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v418, "elkúrtam", "e******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v419, "elkúrtak", "e******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v420, "elkúrtad", "e******d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v421, "elkúrta", "e*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v422, "elkúrt", "e****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v423, "elkúrni", "e*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v424, "elkúrnak", "e******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[9],0>(v425, "elkúrják", "e******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v426, "elkúrjuk", "e******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v427, "elkúrja", "e*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v428, "elkurvázza", "e********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v429, "elkurvulni", "e********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v430, "elkurva", "e*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v431, "elbaszása", "e*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v432, "elbasztátok", "e*********k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v433, "elbaszták", "e*******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v434, "elbasztam", "e*******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v435, "elbasztak", "e*******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v436, "elbasztad", "e*******d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v437, "elbaszta", "e******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v438, "elbaszottak", "e*********k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v439, "elbaszott", "e*******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v440, "elbaszni", "e******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v441, "egérszar", "e******r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[14],0>(v442, "divatbuzikról", "d***********l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v443, "disznószar", "d********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[9],0>(v444, "csöcsöst", "c******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(v445, "csöcsök", "c*****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v446, "csöcsre", "c*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v447, "csöcs", "c***s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v448, "csokifaszt", "c********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v449, "cseszett", "c******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v450, "csesszétek", "c********k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v451, "cigókat", "c*****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v452, "cigók", "c***k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v453, "cigó", "c**ó");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v454, "cicim", "c***m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v455, "cicikkel", "c******l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v456, "cicik", "c***k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v457, "cicije", "c****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v458, "cici", "c**i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v459, "buzulást", "b******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v460, "buzulni", "b*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v461, "buzuljanak", "b********k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v462, "buzul", "b***l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v463, "buzizós", "b*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v464, "buzizás", "b*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v465, "buzizott", "b******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v466, "buzizni", "b*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v467, "buziznak", "b******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v468, "buzizik", "b*****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v469, "buzivonulás", "b*********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[13],0>(v470, "buzivonaglás", "b**********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v471, "buziverő", "b******ő");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v472, "buziverést", "b********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v473, "buzit", "b***t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v474, "buziság", "b*****g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v475, "buzisan", "b*****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v476, "buzis", "b***s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[13],0>(v477, "buziparádéra", "b**********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v478, "buzinak", "b*****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v479, "buzikról", "b******l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v480, "buzikon", "b*****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v481, "buziknak", "b******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v482, "buzikkal", "b******l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v483, "buzikat", "b*****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v484, "buzik", "b***k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[14],0>(v485, "buzifesztivál", "b***********l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[16],0>(v486, "buzifelvonulást", "b*************t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[18],0>(v487, "buzifelvonulásnak", "b***************k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[15],0>(v488, "buzifelvonulás", "b************s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[11],0>(v489, "buzibárról", "b********l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[12],0>(v490, "buzibárként", "b*********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v491, "buzi", "b**i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v492, "buzeránsok", "b********k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v493, "buzeráns", "b******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v494, "beszopása", "b*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v495, "beszoptuk", "b*******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v496, "beszopják", "b*******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v497, "beszopja", "b******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v498, "beszarás", "b******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v499, "beszartam", "b*******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v500, "beszartak", "b*******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v501, "beszart", "b*****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v502, "beszarsz", "b******z");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v503, "beszarok", "b******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v504, "beszarni", "b******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v505, "beszarik", "b******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v506, "beszari", "b*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v507, "beleszarva", "b********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v508, "beleszarna", "b********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v509, "becseszett", "b********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v510, "bebuzultok", "b********k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v511, "bebuzul", "b*****l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v512, "bebaszott", "b*******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v513, "bazmeg", "b****g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v514, "bazdmeg", "b*****g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v515, "baszáson", "b******n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v516, "baszáshoz", "b*******z");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v517, "baszva", "b****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v518, "basztál", "b*****l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v519, "baszták", "b*****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[13],0>(v520, "basztatásból", "b**********l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v521, "basztatás", "b*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v522, "basztatni", "b*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v523, "basztatnak", "b********k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v524, "basztatják", "b********k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v525, "basztassuk", "b********k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v526, "basztak", "b*****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v527, "baszottul", "b*******l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v528, "baszott", "b*****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v529, "baszok", "b****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v530, "baszogatása", "b*********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v531, "baszogattak", "b*********k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v532, "baszogatta", "b********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v533, "baszogatni", "b********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v534, "baszogatja", "b********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v535, "baszogassa", "b********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v536, "basznák", "b*****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v537, "basznia", "b*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v538, "baszni", "b****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v539, "basznak", "b*****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v540, "baszkodom", "b*******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v541, "baszhatom", "b*******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v542, "baszdmeg", "b******g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v543, "baszd", "b***d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v544, "baszatlan", "b*******n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v545, "baszakszik", "b********k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v546, "baszakodnak", "b*********k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v547, "basz", "b**z");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v548, "basszátok", "b*******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v549, "basszák", "b*****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v550, "bassza", "b****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v551, "baromarcú", "b*******ú");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v552, "balfasz", "b*****z");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v553, "anál", "a**l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v554, "anyádba", "a*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v555, "agyonbassza", "a*********a");
    std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](&siri::dialogengine::GetProfanityFilter_hu(void)::sProfanityData_hu, (uint64_t)v5, 0x227uLL);
    for (i = 0; i != -3306; i -= 6)
      std::pair<std::string const,std::string>::~pair((uint64_t)&v555[i]);
    __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], &siri::dialogengine::GetProfanityFilter_hu(void)::sProfanityData_hu, &dword_1BF794000);
  }
  *v1 = 0;
  v1[1] = 0;
  v1[2] = 0;
  return std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(v1, siri::dialogengine::GetProfanityFilter_hu(void)::sProfanityData_hu, *(uint64_t *)algn_1EF582ED0, 0xAAAAAAAAAAAAAAABLL* ((*(_QWORD *)algn_1EF582ED0 - siri::dialogengine::GetProfanityFilter_hu(void)::sProfanityData_hu) >> 4));
}

void sub_1BFB77E20(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + 26400;
  v4 = -26448;
  do
  {
    v3 = std::pair<std::string const,std::string>::~pair(v3) - 48;
    v4 += 48;
  }
  while (v4);
  _Unwind_Resume(a1);
}

#error "1BFB77E84: too big function (funcsize=0)"

void sub_1BFBA0744(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + 234576;
  v4 = -234624;
  do
  {
    v3 = std::pair<std::string const,std::string>::~pair(v3) - 48;
    v4 += 48;
  }
  while (v4);
  _Unwind_Resume(a1);
}

_QWORD *siri::dialogengine::GetProfanityFilter_nb(siri::dialogengine *this)
{
  unsigned __int8 v2;
  uint64_t i;
  _QWORD v5[6];
  _QWORD v6[6];
  _QWORD v7[6];
  _QWORD v8[6];
  _QWORD v9[6];
  _QWORD v10[6];
  _QWORD v11[6];
  _QWORD v12[6];
  _QWORD v13[6];
  _QWORD v14[6];
  _QWORD v15[6];
  _QWORD v16[6];
  _QWORD v17[6];
  _QWORD v18[6];
  _QWORD v19[6];
  _QWORD v20[6];
  _QWORD v21[6];
  _QWORD v22[6];
  _QWORD v23[6];
  _QWORD v24[6];
  _QWORD v25[6];
  _QWORD v26[6];
  _QWORD v27[6];
  _QWORD v28[6];
  _QWORD v29[6];
  _QWORD v30[6];
  _QWORD v31[6];
  _QWORD v32[6];
  _QWORD v33[6];
  _QWORD v34[6];
  _QWORD v35[6];
  _QWORD v36[6];
  _QWORD v37[6];
  _QWORD v38[6];
  _QWORD v39[6];
  _QWORD v40[6];
  _QWORD v41[6];
  _QWORD v42[6];
  _QWORD v43[6];
  _QWORD v44[6];
  _QWORD v45[6];
  _QWORD v46[6];
  _QWORD v47[6];
  _QWORD v48[6];
  _QWORD v49[6];
  _QWORD v50[6];
  _QWORD v51[6];
  _QWORD v52[6];
  _QWORD v53[6];
  _QWORD v54[6];
  _QWORD v55[6];
  _QWORD v56[6];
  _QWORD v57[6];
  _QWORD v58[7];

  v58[6] = *MEMORY[0x1E0C80C00];
  if ((v2 & 1) == 0
  {
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v5, "utpult", "u****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v6, "svartinger", "s********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v7, "svartingene", "s*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v8, "svarting", "s******g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v9, "ståkuk", "s****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v10, "satans", "s****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v11, "rasshøl", "r*****l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v12, "rævpult", "r*****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[9],0>(v13, "rævkjørt", "r******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v14, "purkejævler", "p*********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v15, "pakkiser", "p******r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v16, "niggere", "n*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v17, "nigger", "n****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v18, "negerjævler", "n*********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v19, "negerjævel", "n********l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v20, "mongo", "m***o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v21, "ludder", "l****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v22, "kukker", "k****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v23, "kukk", "k**k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v24, "kuker", "k***r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v25, "kuk", "k*k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v26, "knulles", "k*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v27, "knuller", "k*****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v28, "knulle", "k****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v29, "knulla", "k****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v30, "jævlig", "j****g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v31, "jævla", "j***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v32, "horunge", "h*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v33, "horebukk", "h******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v34, "helvetes", "h******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v35, "fuckings", "f******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v36, "fucka", "f***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v37, "fuck", "f**k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v38, "fittetryne", "f********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v39, "fitter", "f****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v40, "fitten", "f****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v41, "fittelandet", "f*********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v42, "fitte", "f***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v43, "fitta", "f***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v44, "faens", "f***s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v45, "faen", "f**n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v46, "føkkings", "f******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v47, "føkker", "f****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v48, "føkka", "f***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v49, "føkk", "f**k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v50, "bitch", "b***h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v51, "barnesexen", "b********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v52, "barnesex", "b******x");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v53, "barnepornoen", "b**********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v54, "barneporno", "b********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v55, "babysexen", "b*******n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v56, "babysex", "b*****x");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v57, "babypornoen", "b*********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v58, "babyporno", "b*******o");
    std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](&siri::dialogengine::GetProfanityFilter_nb(void)::sProfanityData_nb, (uint64_t)v5, 0x36uLL);
    for (i = 318; i != -6; i -= 6)
      std::pair<std::string const,std::string>::~pair((uint64_t)&v5[i]);
    __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], &siri::dialogengine::GetProfanityFilter_nb(void)::sProfanityData_nb, &dword_1BF794000);
  }
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  return std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(this, siri::dialogengine::GetProfanityFilter_nb(void)::sProfanityData_nb, *(uint64_t *)algn_1EF582F10, 0xAAAAAAAAAAAAAAABLL* ((*(_QWORD *)algn_1EF582F10 - siri::dialogengine::GetProfanityFilter_nb(void)::sProfanityData_nb) >> 4));
}

void sub_1BFBA0F00(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t i;

  for (i = 2544; i != -48; i -= 48)
    std::pair<std::string const,std::string>::~pair(v1 + i);
  _Unwind_Resume(a1);
}

_QWORD *siri::dialogengine::GetProfanityFilter_hi(siri::dialogengine *this)
{
  _QWORD *v1;
  unsigned __int8 v2;
  uint64_t i;
  _QWORD v5[6];
  _QWORD v6[6];
  _QWORD v7[6];
  _QWORD v8[6];
  _QWORD v9[6];
  _QWORD v10[6];
  _QWORD v11[6];
  _QWORD v12[6];
  _QWORD v13[6];
  _QWORD v14[6];
  _QWORD v15[6];
  _QWORD v16[6];
  _QWORD v17[6];
  _QWORD v18[6];
  _QWORD v19[6];
  _QWORD v20[6];
  _QWORD v21[6];
  _QWORD v22[6];
  _QWORD v23[6];
  _QWORD v24[6];
  _QWORD v25[6];
  _QWORD v26[6];
  _QWORD v27[6];
  _QWORD v28[6];
  _QWORD v29[6];
  _QWORD v30[6];
  _QWORD v31[6];
  _QWORD v32[6];
  _QWORD v33[6];
  _QWORD v34[6];
  _QWORD v35[6];
  _QWORD v36[6];
  _QWORD v37[6];
  _QWORD v38[6];
  _QWORD v39[6];
  _QWORD v40[6];
  _QWORD v41[6];
  _QWORD v42[6];
  _QWORD v43[6];
  _QWORD v44[6];
  _QWORD v45[6];
  _QWORD v46[6];
  _QWORD v47[6];
  _QWORD v48[6];
  _QWORD v49[6];
  _QWORD v50[6];
  _QWORD v51[6];
  _QWORD v52[6];
  _QWORD v53[6];
  _QWORD v54[6];
  _QWORD v55[6];
  _QWORD v56[6];
  _QWORD v57[6];
  _QWORD v58[6];
  _QWORD v59[6];
  _QWORD v60[6];
  _QWORD v61[6];
  _QWORD v62[6];
  _QWORD v63[6];
  _QWORD v64[6];
  _QWORD v65[6];
  _QWORD v66[6];
  _QWORD v67[6];
  _QWORD v68[6];
  _QWORD v69[6];
  _QWORD v70[6];
  _QWORD v71[6];
  _QWORD v72[6];
  _QWORD v73[6];
  _QWORD v74[6];
  _QWORD v75[6];
  _QWORD v76[6];
  _QWORD v77[6];
  _QWORD v78[6];
  _QWORD v79[6];
  _QWORD v80[6];
  _QWORD v81[6];
  _QWORD v82[6];
  _QWORD v83[6];
  _QWORD v84[6];
  _QWORD v85[6];
  _QWORD v86[6];
  _QWORD v87[6];
  _QWORD v88[6];
  _QWORD v89[6];
  _QWORD v90[6];
  _QWORD v91[6];
  _QWORD v92[6];
  _QWORD v93[6];
  _QWORD v94[6];
  _QWORD v95[6];
  _QWORD v96[6];
  _QWORD v97[6];
  _QWORD v98[6];
  _QWORD v99[6];
  _QWORD v100[6];
  _QWORD v101[6];
  _QWORD v102[6];
  _QWORD v103[6];
  _QWORD v104[6];
  _QWORD v105[6];
  _QWORD v106[6];
  _QWORD v107[6];
  _QWORD v108[6];
  _QWORD v109[6];
  _QWORD v110[6];
  _QWORD v111[6];
  _QWORD v112[6];
  _QWORD v113[6];
  _QWORD v114[6];
  _QWORD v115[6];
  _QWORD v116[6];
  _QWORD v117[6];
  _QWORD v118[6];
  _QWORD v119[6];
  _QWORD v120[6];
  _QWORD v121[6];
  _QWORD v122[6];
  _QWORD v123[6];
  _QWORD v124[6];
  _QWORD v125[6];
  _QWORD v126[6];
  _QWORD v127[6];
  _QWORD v128[6];
  _QWORD v129[6];
  _QWORD v130[6];
  _QWORD v131[6];
  _QWORD v132[6];
  _QWORD v133[6];
  _QWORD v134[6];
  _QWORD v135[6];
  _QWORD v136[6];
  _QWORD v137[6];
  _QWORD v138[6];
  _QWORD v139[6];
  _QWORD v140[6];
  _QWORD v141[6];
  _QWORD v142[6];
  _QWORD v143[6];
  _QWORD v144[6];
  _QWORD v145[6];
  _QWORD v146[6];
  _QWORD v147[6];
  _QWORD v148[6];
  _QWORD v149[6];
  _QWORD v150[6];
  _QWORD v151[6];
  _QWORD v152[6];
  _QWORD v153[6];
  _QWORD v154[6];
  _QWORD v155[6];
  _QWORD v156[6];
  _QWORD v157[6];
  _QWORD v158[6];
  _QWORD v159[6];
  _QWORD v160[6];
  _QWORD v161[6];
  _QWORD v162[6];
  _QWORD v163[6];
  _QWORD v164[6];
  _QWORD v165[6];
  _QWORD v166[6];
  _QWORD v167[6];
  _QWORD v168[6];
  _QWORD v169[6];
  _QWORD v170[6];
  _QWORD v171[6];
  _QWORD v172[6];
  _QWORD v173[6];
  _QWORD v174[6];
  _QWORD v175[6];
  _QWORD v176[6];
  _QWORD v177[6];
  _QWORD v178[6];
  _QWORD v179[6];
  _QWORD v180[6];
  _QWORD v181[6];
  _QWORD v182[6];
  _QWORD v183[6];
  _QWORD v184[6];
  _QWORD v185[6];
  _QWORD v186[6];
  _QWORD v187[6];
  _QWORD v188[6];
  _QWORD v189[6];
  _QWORD v190[6];
  _QWORD v191[6];
  _QWORD v192[6];
  _QWORD v193[6];
  _QWORD v194[6];
  _QWORD v195[6];
  _QWORD v196[6];
  _QWORD v197[6];
  _QWORD v198[6];
  _QWORD v199[6];
  _QWORD v200[6];
  _QWORD v201[6];
  _QWORD v202[6];
  _QWORD v203[6];
  _QWORD v204[6];
  _QWORD v205[6];
  _QWORD v206[6];
  _QWORD v207[6];
  _QWORD v208[6];
  _QWORD v209[6];
  _QWORD v210[6];
  _QWORD v211[6];
  _QWORD v212[6];
  _QWORD v213[6];
  _QWORD v214[6];
  _QWORD v215[6];
  _QWORD v216[6];
  _QWORD v217[6];
  _QWORD v218[6];
  _QWORD v219[6];
  _QWORD v220[6];
  _QWORD v221[6];
  _QWORD v222[6];
  _QWORD v223[6];
  _QWORD v224[6];
  _QWORD v225[6];
  _QWORD v226[6];
  _QWORD v227[6];
  _QWORD v228[6];
  _QWORD v229[6];
  _QWORD v230[6];
  _QWORD v231[6];
  _QWORD v232[6];
  _QWORD v233[6];
  _QWORD v234[6];
  _QWORD v235[6];
  _QWORD v236[6];
  _QWORD v237[6];
  _QWORD v238[6];
  _QWORD v239[6];
  _QWORD v240[6];
  _QWORD v241[6];
  _QWORD v242[6];
  _QWORD v243[6];
  _QWORD v244[6];
  _QWORD v245[6];
  _QWORD v246[6];
  _QWORD v247[6];
  _QWORD v248[6];
  _QWORD v249[6];
  _QWORD v250[6];
  _QWORD v251[6];
  _QWORD v252[6];
  _QWORD v253[6];
  _QWORD v254[6];
  _QWORD v255[6];
  _QWORD v256[6];
  _QWORD v257[6];
  _QWORD v258[6];
  _QWORD v259[6];
  _QWORD v260[6];
  _QWORD v261[6];
  _QWORD v262[6];
  _QWORD v263[6];
  _QWORD v264[6];
  _QWORD v265[6];
  _QWORD v266[6];
  _QWORD v267[6];
  _QWORD v268[6];
  _QWORD v269[6];
  _QWORD v270[6];
  _QWORD v271[6];
  _QWORD v272[6];
  _QWORD v273[6];
  _QWORD v274[6];
  _QWORD v275[6];
  _QWORD v276[6];
  _QWORD v277[6];
  _QWORD v278[6];
  _QWORD v279[6];
  _QWORD v280[6];
  _QWORD v281[6];
  _QWORD v282[6];
  _QWORD v283[6];
  _QWORD v284[6];
  _QWORD v285[6];
  _QWORD v286[6];
  _QWORD v287[6];
  _QWORD v288[6];
  _QWORD v289[6];
  _QWORD v290[6];
  _QWORD v291[6];
  _QWORD v292[6];
  _QWORD v293[6];
  _QWORD v294[6];
  _QWORD v295[6];
  _QWORD v296[6];
  _QWORD v297[6];
  _QWORD v298[6];
  _QWORD v299[6];
  _QWORD v300[6];
  _QWORD v301[6];
  _QWORD v302[6];
  _QWORD v303[6];
  _QWORD v304[6];
  _QWORD v305[6];
  _QWORD v306[6];
  _QWORD v307[6];
  _QWORD v308[6];
  _QWORD v309[6];
  _QWORD v310[6];
  _QWORD v311[6];
  _QWORD v312[6];
  _QWORD v313[6];
  _QWORD v314[6];
  _QWORD v315[6];
  _QWORD v316[6];
  _QWORD v317[6];
  _QWORD v318[6];
  _QWORD v319[6];
  _QWORD v320[6];
  _QWORD v321[6];
  _QWORD v322[6];
  _QWORD v323[6];
  _QWORD v324[6];
  _QWORD v325[6];
  _QWORD v326[6];
  _QWORD v327[6];
  _QWORD v328[6];
  _QWORD v329[6];
  _QWORD v330[6];
  _QWORD v331[6];
  _QWORD v332[6];
  _QWORD v333[6];
  _QWORD v334[6];
  _QWORD v335[6];
  _QWORD v336[6];
  _QWORD v337[6];
  _QWORD v338[6];
  _QWORD v339[6];
  _QWORD v340[6];
  _QWORD v341[6];
  _QWORD v342[6];
  _QWORD v343[6];
  _QWORD v344[6];
  _QWORD v345[6];
  _QWORD v346[6];
  _QWORD v347[6];
  _QWORD v348[6];
  _QWORD v349[6];
  _QWORD v350[6];
  _QWORD v351[6];
  _QWORD v352[6];
  _QWORD v353[6];
  _QWORD v354[6];
  _QWORD v355[6];
  _QWORD v356[6];
  _QWORD v357[6];
  _QWORD v358[6];
  _QWORD v359[6];
  _QWORD v360[6];
  _QWORD v361[6];
  _QWORD v362[7];

  v1 = (_QWORD *)MEMORY[0x1E0C80A78](this);
  v362[6] = *MEMORY[0x1E0C80C00];
  if ((v2 & 1) == 0
  {
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[14],0>(v5, "teri maa ki chut", "t************");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[14],0>(v6, "teri maa ki chut", "t************");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[14],0>(v7, "teri maa ki choot", "t************");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[14],0>(v8, "teri maa ki choot", "t************");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[10],0>(v9, "teri maa ki", "t********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[10],0>(v10, "teri maa ki", "t********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v11, "tattu", "t***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v12, "tatte", "t***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v13, "rundi", "r****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v14, "randi", "r****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v15, "rand", "r***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v16, "raandi", "r****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v17, "raand", "r***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[5],0>(v18, "porkistan", "p***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[7],0>(v19, "mutth", "म***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[7],0>(v20, "muth", "म***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[10],0>(v21, "motherchoot", "m********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v22, "motherchod", "m********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v23, "mother choot", "m**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v24, "mother chhod", "m**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[7],0>(v25, "mooth", "म***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v26, "mammey", "m****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v27, "mamme", "m****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v28, "madarchut", "m********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[9],0>(v29, "madarchood", "m*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[9],0>(v30, "madarchodd", "m*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v31, "madarchod", "m********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v32, "madar chut", "m********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v33, "madar chod", "m********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[9],0>(v34, "maa ki chut", "m*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[9],0>(v35, "maa ki chut", "m*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v36, "maa ki choot", "m*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v37, "maa ki choot", "m*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[6],0>(v38, "lund", "l****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[6],0>(v39, "lun", "l****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v40, "lulli", "l***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v41, "luli", "l***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[6],0>(v42, "loru", "l****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[6],0>(v43, "lodu", "l****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[6],0>(v44, "lode", "l****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[6],0>(v45, "loda", "l****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v46, "laudu", "l****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v47, "laudey", "l****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v48, "laude", "l****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v49, "lauda", "l****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v50, "jhatu", "j***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v51, "jhat", "j***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v52, "jhantu", "j***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v53, "jhant", "j***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v54, "jhaatu", "j***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v55, "jhaat", "j***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[5],0>(v56, "jhaantu", "j***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v57, "jhaant", "j***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v58, "gottey", "g***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v59, "gotte", "g***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v60, "gotey", "g***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v61, "gote", "g***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v62, "gasti", "g***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v63, "gandu", "g****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[5],0>(v64, "gandfut", "g***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[5],0>(v65, "gandfat", "g***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v66, "gand", "g***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[5],0>(v67, "gadhalund", "g***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[5],0>(v68, "gadhalun", "g***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v69, "gaandu", "g****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v70, "gaand", "g***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v71, "fattu", "f***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v72, "dalley", "d***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v73, "dalle", "d***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v74, "chutiya", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[8],0>(v75, "chutia", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v76, "chut", "c***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[5],0>(v77, "chudwane", "c***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[5],0>(v78, "chudwana", "c***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[5],0>(v79, "chudwaane", "c***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[5],0>(v80, "chudwaana", "c***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[5],0>(v81, "chudwaa", "c***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v82, "chudwa", "c***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[5],0>(v83, "chudvane", "c***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[5],0>(v84, "chudvana", "c***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[5],0>(v85, "chudvaane", "c***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[5],0>(v86, "chudvaana", "c***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[5],0>(v87, "chudvaa", "c***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v88, "chudva", "c***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[5],0>(v89, "chudney", "c***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v90, "chudne", "c***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v91, "chuchi", "c***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v92, "chuche", "c***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v93, "chootiya", "c*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v94, "chootia", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v95, "choot", "c***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[5],0>(v96, "choochi", "c***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[5],0>(v97, "chooche", "c***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v98, "chodd", "c***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v99, "chod", "c***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v100, "chhod", "c***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v101, "bubey", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v102, "bube", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v103, "bubbey", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v104, "bubbe", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[5],0>(v105, "bosdiwali", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[5],0>(v106, "bosdiwale", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[5],0>(v107, "bosdiwala", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[5],0>(v108, "bosdivali", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[5],0>(v109, "bosdivale", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[5],0>(v110, "bosdivala", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[5],0>(v111, "bosdiki", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[5],0>(v112, "bosdike", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[5],0>(v113, "bosdika", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[5],0>(v114, "bosdi wali", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[5],0>(v115, "bosdi wali", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[5],0>(v116, "bosdi wale", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[5],0>(v117, "bosdi wale", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[5],0>(v118, "bosdi wala", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[5],0>(v119, "bosdi wala", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[5],0>(v120, "bosdi vali", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[5],0>(v121, "bosdi vali", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[5],0>(v122, "bosdi vale", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[5],0>(v123, "bosdi vale", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[5],0>(v124, "bosdi vala", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[5],0>(v125, "bosdi vala", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[5],0>(v126, "bosdi ki", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[5],0>(v127, "bosdi ki", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[5],0>(v128, "bosdi ke", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[5],0>(v129, "bosdi ke", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[5],0>(v130, "bosdi ka", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[5],0>(v131, "bosdi ka", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v132, "bosdi", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v133, "bosadiwali", "b********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v134, "bosadiwale", "b********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v135, "bosadiwala", "b********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v136, "bosadivali", "b********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v137, "bosadivale", "b********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v138, "bosadivala", "b********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[10],0>(v139, "bosadiki", "b********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[10],0>(v140, "bosadike", "b********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[10],0>(v141, "bosadika", "b********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v142, "bosadi", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[5],0>(v143, "bhosdiwali", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[5],0>(v144, "bhosdiwale", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[5],0>(v145, "bhosdiwala", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[5],0>(v146, "bhosdivali", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[5],0>(v147, "bhosdivale", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[5],0>(v148, "bhosdivala", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[5],0>(v149, "bhosdiki", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[5],0>(v150, "bhosdike", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[5],0>(v151, "bhosdika", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v152, "bhosdi", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[5],0>(v153, "bhosdaa", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v154, "bhosda", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[10],0>(v155, "bhosadiwali", "b********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[10],0>(v156, "bhosadiwale", "b********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[10],0>(v157, "bhosadivali", "b********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[10],0>(v158, "bhosadivale", "b********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[10],0>(v159, "bhosadivala", "b********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v160, "bhosadiki", "b********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v161, "bhosadike", "b********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v162, "bhosadika", "b********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[5],0>(v163, "bhosadi", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[5],0>(v164, "bhosadaa", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[5],0>(v165, "bhosada", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[5],0>(v166, "bhonsdiwali", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[5],0>(v167, "bhonsdiwale", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[5],0>(v168, "bhonsdiwala", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[5],0>(v169, "bhonsdivali", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[5],0>(v170, "bhonsdivale", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[5],0>(v171, "bhonsdivala", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[5],0>(v172, "bhonsdiki", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[5],0>(v173, "bhonsdike", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[5],0>(v174, "bhonsdika", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[5],0>(v175, "bhonsdi wali", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[5],0>(v176, "bhonsdi wale", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[5],0>(v177, "bhonsdi wala", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[5],0>(v178, "bhonsdi vali", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[5],0>(v179, "bhonsdi vale", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[5],0>(v180, "bhonsdi vala", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[5],0>(v181, "bhonsdi ki", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[5],0>(v182, "bhonsdi ke", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[5],0>(v183, "bhonsdi ka", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v184, "bhenchodd", "b****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[10],0>(v185, "bhenchod", "b********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[6],0>(v186, "bhencho", "b****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[10],0>(v187, "bhen ke takke", "b********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[10],0>(v188, "bhen ke take", "b********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v189, "bhainchod", "b********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v190, "bhain ke takke", "b********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[10],0>(v191, "bhain ke take", "b********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[5],0>(v192, "bhadwaa", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v193, "bhadwa", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[5],0>(v194, "bhadvaa", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v195, "bhadva", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[5],0>(v196, "bhaduaa", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v197, "bhadua", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[5],0>(v198, "betichodd", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[5],0>(v199, "betichod", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[5],0>(v200, "beti chodd", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[5],0>(v201, "beti chod", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v202, "behenchod", "b********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v203, "behen ke takke", "b********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[10],0>(v204, "behen ke take", "b********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[10],0>(v205, "bbhosadiwala", "b********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[5],0>(v206, "bakchodi", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[6],0>(v207, "bakchodd", "b****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[6],0>(v208, "bakchod", "b****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v209, "babbey", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v210, "babbe", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v211, "aand", "a***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v212, "लौडे", "ल***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v213, "लौडा", "ल***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[7],0>(v214, "लौड़े", "ल***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[7],0>(v215, "लौड़ा", "ल***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v216, "लोडे", "ल***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v217, "लोडा", "ल***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[7],0>(v218, "लोड़े", "ल***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[7],0>(v219, "लोड़ू", "ल***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[7],0>(v220, "लोड़ा", "ल***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[7],0>(v221, "लुल्ली", "ल***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v222, "लुली", "ल***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v223, "लन", "ल***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v224, "लण", "ल***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[7],0>(v225, "लंड", "ल***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v226, "राण्ड", "र****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[8],0>(v227, "रांड", "र****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[8],0>(v228, "राँड", "र****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v229, "रण्डी", "र****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v230, "रंडी", "र***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[8],0>(v231, "रँडी", "र****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v232, "मूठ", "म*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v233, "मूट्ठ", "म*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v234, "मुठ", "म*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v235, "मुट्ठ", "म*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[9],0>(v236, "मादरचोद", "म*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[9],0>(v237, "मादरचूत", "म*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[9],0>(v238, "मादरचुत", "म*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[9],0>(v239, "मादर चोद", "म*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[9],0>(v240, "मादर चूत", "म*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[9],0>(v241, "मादर चुत", "म*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[9],0>(v242, "मां की चूत", "त*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[36],char const(&)[9],0>(v243, "मां का भोसड़ा", "त*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[9],0>(v244, "माँ की चूत", "त*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[36],char const(&)[9],0>(v245, "माँ का भोसड़ा", "त*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v246, "मम्मे", "म*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v247, "ममे", "म*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[31],char const(&)[9],0>(v248, "भोसड़ीवाले", "भ*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[31],char const(&)[9],0>(v249, "भोसड़ीवाली", "भ*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[31],char const(&)[9],0>(v250, "भोसड़ीवाला", "भ*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[9],0>(v251, "भोसड़ीके", "भ*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[9],0>(v252, "भोसड़ीकी", "भ*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[9],0>(v253, "भोसड़ीका", "भ*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[32],char const(&)[9],0>(v254, "भोसड़ी वाले", "भ*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[32],char const(&)[9],0>(v255, "भोसड़ी वाली", "भ*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[32],char const(&)[9],0>(v256, "भोसड़ी वाला", "भ*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[26],char const(&)[9],0>(v257, "भोसड़ी के", "भ*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[26],char const(&)[9],0>(v258, "भोसड़ी की", "भ*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[26],char const(&)[9],0>(v259, "भोसड़ी का", "भ*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[9],0>(v260, "भोसड़ी", "भ*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[31],char const(&)[9],0>(v261, "भोसड़िवाले", "भ*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[31],char const(&)[9],0>(v262, "भोसड़िवाली", "भ*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[31],char const(&)[9],0>(v263, "भोसड़िवाला", "भ*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[9],0>(v264, "भोसड़िके", "भ*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[9],0>(v265, "भोसड़िकी", "भ*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[9],0>(v266, "भोसड़िका", "भ*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[9],0>(v267, "भोसड़ि", "भ*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[9],0>(v268, "भोसड़ा", "भ*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[8],0>(v269, "भेंचोड़", "भ****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[9],0>(v270, "भाइनचोड़", "भ*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[30],char const(&)[9],0>(v271, "भाइन के टके", "भ*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v272, "भड़ुआ", "भ*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v273, "भड़वा", "भ*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[28],char const(&)[9],0>(v274, "बोसाड़िके", "ब*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[31],char const(&)[9],0>(v275, "बोसड़ीवाले", "ब*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[31],char const(&)[9],0>(v276, "बोसड़ीवाली", "ब*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[31],char const(&)[9],0>(v277, "बोसड़ीवाला", "ब*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[9],0>(v278, "बोसड़ीके", "ब*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[9],0>(v279, "बोसड़ीका", "ब*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[32],char const(&)[9],0>(v280, "बोसड़ी वाले", "ब*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[32],char const(&)[9],0>(v281, "बोसड़ी वाली", "ब*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[32],char const(&)[9],0>(v282, "बोसड़ी वाला", "ब*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[26],char const(&)[9],0>(v283, "बोसड़ी के", "ब*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[26],char const(&)[9],0>(v284, "बोसड़ी की", "ब*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[26],char const(&)[9],0>(v285, "बोसड़ी का", "ब*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[9],0>(v286, "बोसड़ी", "ब*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[31],char const(&)[9],0>(v287, "बोसड़िवाले", "ब*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[31],char const(&)[9],0>(v288, "बोसड़िवाली", "ब*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[31],char const(&)[9],0>(v289, "बोसड़िवाला", "ब*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[9],0>(v290, "बोसड़िके", "ब*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[9],0>(v291, "बोसड़िकी", "ब*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[9],0>(v292, "बोसड़िका", "ब*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[9],0>(v293, "बोसड़ि", "ब*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[7],0>(v294, "बेहेनचोद", "ब***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[33],char const(&)[7],0>(v295, "बेहेन के टके", "ब***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[8],0>(v296, "बेटीचोद", "भ****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[8],0>(v297, "बेटी चोद", "भ****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[9],0>(v298, "बूब्बे", "ब*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v299, "बूबे", "ब*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[9],0>(v300, "बुब्बे", "ब*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[9],0>(v301, "बहनचोद", "ब*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[9],0>(v302, "बहन के टके", "ब*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v303, "बब्बे", "ब*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[9],0>(v304, "बकचोदी", "ब*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v305, "बकचोद", "ब*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[7],0>(v306, "फट्टू", "फ***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[31],char const(&)[7],0>(v307, "पोरकिस्तान", "प***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[7],0>(v308, "दल्ले", "द***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v309, "दलले", "द***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[40],char const(&)[9],0>(v310, "तेरी मां की चूत", "त*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[30],char const(&)[9],0>(v311, "तेरी मां की", "त*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[49],char const(&)[9],0>(v312, "तेरी मां का भोसड़ा", "त*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[30],char const(&)[9],0>(v313, "तेरी मां का", "त*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[40],char const(&)[9],0>(v314, "तेरी माँ की चूत", "त*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[30],char const(&)[9],0>(v315, "तेरी माँ की", "त*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[49],char const(&)[9],0>(v316, "तेरी माँ का भोसड़ा", "त*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[30],char const(&)[9],0>(v317, "तेरी माँ का", "त*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[7],0>(v318, "टट्टे", "ट***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[7],0>(v319, "टट्टू", "ट***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[7],0>(v320, "टट्टु", "ट***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[7],0>(v321, "टटे", "ट***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[7],0>(v322, "टटू", "ट***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[7],0>(v323, "टटु", "ट***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v324, "झाटू", "झ***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v325, "झाटु", "झ***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[7],0>(v326, "झाट", "झ***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[7],0>(v327, "झांटू", "झ***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[7],0>(v328, "झांटु", "झ***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[7],0>(v329, "झाँटू", "झ***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[7],0>(v330, "झाँटु", "झ***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[7],0>(v331, "चोद", "च***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[9],0>(v332, "चूतीया", "च*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[9],0>(v333, "चूतिया", "च*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[7],0>(v334, "चूत", "च***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v335, "चूचे", "च***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v336, "चूची", "च***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[7],0>(v337, "चुदवाने", "च***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[7],0>(v338, "चुदवाना", "च***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[7],0>(v339, "चुदवा", "च***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[7],0>(v340, "चुदने", "च***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[9],0>(v341, "चुटीया", "च*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[9],0>(v342, "चुटिया", "च*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v343, "चुचे", "च***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v344, "चुची", "च***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[8],0>(v345, "गोट्टे", "ग****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[8],0>(v346, "गोटे", "ग****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v347, "गांडू", "ग****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v348, "गांडु", "ग****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[8],0>(v349, "गांडफट", "ग****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v350, "गांड", "ग***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v351, "गाँडू", "ग****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v352, "गाँडु", "ग****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[8],0>(v353, "गाँडफट", "ग****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v354, "गाँड", "ग***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v355, "गस्ती", "ग****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[8],0>(v356, "गसती", "ग****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[7],0>(v357, "गधालन", "ग***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[7],0>(v358, "गधालंड", "ग***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v359, "गंडफट", "ग****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v360, "गँडफट", "ग****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v361, "आंड", "आ*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v362, "आँड", "आ*****");
    std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](&siri::dialogengine::GetProfanityFilter_hi(void)::sProfanityData_hi, (uint64_t)v5, 0x166uLL);
    for (i = 0; i != -2148; i -= 6)
      std::pair<std::string const,std::string>::~pair((uint64_t)&v362[i]);
    __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], &siri::dialogengine::GetProfanityFilter_hi(void)::sProfanityData_hi, &dword_1BF794000);
  }
  *v1 = 0;
  v1[1] = 0;
  v1[2] = 0;
  return std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(v1, siri::dialogengine::GetProfanityFilter_hi(void)::sProfanityData_hi, *(uint64_t *)algn_1EF582F30, 0xAAAAAAAAAAAAAAABLL* ((*(_QWORD *)algn_1EF582F30 - siri::dialogengine::GetProfanityFilter_hi(void)::sProfanityData_hi) >> 4));
}

void sub_1BFBA3EBC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + 17136;
  v4 = -17184;
  do
  {
    v3 = std::pair<std::string const,std::string>::~pair(v3) - 48;
    v4 += 48;
  }
  while (v4);
  _Unwind_Resume(a1);
}

_QWORD *siri::dialogengine::GetProfanityFilter_de(siri::dialogengine *this)
{
  _QWORD *v1;
  unsigned __int8 v2;
  uint64_t i;
  _QWORD v5[6];
  _QWORD v6[6];
  _QWORD v7[6];
  _QWORD v8[6];
  _QWORD v9[6];
  _QWORD v10[6];
  _QWORD v11[6];
  _QWORD v12[6];
  _QWORD v13[6];
  _QWORD v14[6];
  _QWORD v15[6];
  _QWORD v16[6];
  _QWORD v17[6];
  _QWORD v18[6];
  _QWORD v19[6];
  _QWORD v20[6];
  _QWORD v21[6];
  _QWORD v22[6];
  _QWORD v23[6];
  _QWORD v24[6];
  _QWORD v25[6];
  _QWORD v26[6];
  _QWORD v27[6];
  _QWORD v28[6];
  _QWORD v29[6];
  _QWORD v30[6];
  _QWORD v31[6];
  _QWORD v32[6];
  _QWORD v33[6];
  _QWORD v34[6];
  _QWORD v35[6];
  _QWORD v36[6];
  _QWORD v37[6];
  _QWORD v38[6];
  _QWORD v39[6];
  _QWORD v40[6];
  _QWORD v41[6];
  _QWORD v42[6];
  _QWORD v43[6];
  _QWORD v44[6];
  _QWORD v45[6];
  _QWORD v46[6];
  _QWORD v47[6];
  _QWORD v48[6];
  _QWORD v49[6];
  _QWORD v50[6];
  _QWORD v51[6];
  _QWORD v52[6];
  _QWORD v53[6];
  _QWORD v54[6];
  _QWORD v55[6];
  _QWORD v56[6];
  _QWORD v57[6];
  _QWORD v58[6];
  _QWORD v59[6];
  _QWORD v60[6];
  _QWORD v61[6];
  _QWORD v62[6];
  _QWORD v63[6];
  _QWORD v64[6];
  _QWORD v65[6];
  _QWORD v66[6];
  _QWORD v67[6];
  _QWORD v68[6];
  _QWORD v69[6];
  _QWORD v70[6];
  _QWORD v71[6];
  _QWORD v72[6];
  _QWORD v73[6];
  _QWORD v74[6];
  _QWORD v75[6];
  _QWORD v76[6];
  _QWORD v77[6];
  _QWORD v78[6];
  _QWORD v79[6];
  _QWORD v80[6];
  _QWORD v81[6];
  _QWORD v82[6];
  _QWORD v83[6];
  _QWORD v84[6];
  _QWORD v85[6];
  _QWORD v86[6];
  _QWORD v87[6];
  _QWORD v88[6];
  _QWORD v89[6];
  _QWORD v90[6];
  _QWORD v91[6];
  _QWORD v92[6];
  _QWORD v93[6];
  _QWORD v94[6];
  _QWORD v95[6];
  _QWORD v96[6];
  _QWORD v97[6];
  _QWORD v98[6];
  _QWORD v99[6];
  _QWORD v100[6];
  _QWORD v101[6];
  _QWORD v102[6];
  _QWORD v103[6];
  _QWORD v104[6];
  _QWORD v105[6];
  _QWORD v106[6];
  _QWORD v107[6];
  _QWORD v108[6];
  _QWORD v109[6];
  _QWORD v110[6];
  _QWORD v111[6];
  _QWORD v112[6];
  _QWORD v113[6];
  _QWORD v114[6];
  _QWORD v115[6];
  _QWORD v116[6];
  _QWORD v117[6];
  _QWORD v118[6];
  _QWORD v119[6];
  _QWORD v120[6];
  _QWORD v121[6];
  _QWORD v122[6];
  _QWORD v123[6];
  _QWORD v124[6];
  _QWORD v125[6];
  _QWORD v126[6];
  _QWORD v127[6];
  _QWORD v128[6];
  _QWORD v129[6];
  _QWORD v130[6];
  _QWORD v131[6];
  _QWORD v132[6];
  _QWORD v133[6];
  _QWORD v134[6];
  _QWORD v135[6];
  _QWORD v136[6];
  _QWORD v137[6];
  _QWORD v138[6];
  _QWORD v139[6];
  _QWORD v140[6];
  _QWORD v141[6];
  _QWORD v142[6];
  _QWORD v143[6];
  _QWORD v144[6];
  _QWORD v145[6];
  _QWORD v146[6];
  _QWORD v147[6];
  _QWORD v148[6];
  _QWORD v149[6];
  _QWORD v150[6];
  _QWORD v151[6];
  _QWORD v152[6];
  _QWORD v153[6];
  _QWORD v154[6];
  _QWORD v155[6];
  _QWORD v156[6];
  _QWORD v157[6];
  _QWORD v158[6];
  _QWORD v159[7];

  v1 = (_QWORD *)MEMORY[0x1E0C80A78](this);
  v159[6] = *MEMORY[0x1E0C80C00];
  if ((v2 & 1) == 0
  {
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v5, "wixer", "w***r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v6, "wixen", "w**en");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v7, "wixe", "w**e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v8, "wichser", "w*****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v9, "wichsen", "w****en");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v10, "wichse", "w****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v11, "votzen", "v***en");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v12, "votze", "v***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v13, "tittenlutscher", "t************r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v14, "tittenheft", "t********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v15, "tittenfick", "t********k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v16, "titten", "t***en");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v17, "titte", "t***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v18, "spermakehle", "s*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[17],0>(v19, "spaghettifresser", "s**************r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[16],0>(v20, "spagettifresser", "s*************r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v21, "schänden", "s*****en");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v22, "schwuchtel", "s********l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[16],0>(v23, "schwanzlutscher", "s*************r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v24, "schluckluder", "s**********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v25, "schlitzauge", "s*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v26, "schlampe", "s******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v27, "scheißen", "s******en");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v28, "scheiße", "s*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v29, "scheiß", "s****ß");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v30, "scheissen", "s******en");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v31, "scheisse", "s*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v32, "scheiss", "s*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v33, "schaenden", "s******en");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v34, "sacklutscher", "s**********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v35, "sackgesicht", "s*********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v36, "russki", "r****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[18],0>(v37, "rosettenschlemmer", "r***************r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v38, "rosettenhengst", "r************t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v39, "querfotze", "q*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v40, "pötern", "p****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v41, "punani", "p****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v42, "pollacke", "p******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v43, "pissnelke", "p*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v44, "pissetrinker", "p**********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v45, "pimmellutscher", "p************r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v46, "pimmelkopf", "p********f");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v47, "pimmel", "p****l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v48, "onkelficker", "o*********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v49, "ochsenficker", "o**********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v50, "nutte", "n***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v51, "nillenkäse", "n********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v52, "nille", "n***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v53, "nigger", "n****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v54, "niggas", "n***as");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v55, "neger", "n***r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v56, "nabelficker", "n*********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v57, "mösensaft", "m*******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v58, "möse", "m**e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v59, "moesensaft", "m********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v60, "moese", "m***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[19],0>(v61, "makkaronifresserin", "m**************rin");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[17],0>(v62, "makkaronifresser", "m**************r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v63, "kümmeltürkin", "k***********in");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[11],0>(v64, "kümmeltürken", "k*******en");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[12],0>(v65, "kümmeltürke", "k*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v66, "kuemmeltuerken", "k***********en");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v67, "kuemmeltuerke", "k***********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v68, "knieficker", "k********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v69, "knackarsch", "k********h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v70, "klöten", "k***en");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v71, "kloeten", "k****en");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[16],0>(v72, "kinderschändern", "k************rn");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[15],0>(v73, "kinderschänder", "k************r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[16],0>(v74, "kinderschaender", "k*************r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v75, "kinderficker", "k**********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v76, "kanake", "k****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v77, "kacken", "k***en");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v78, "kacke", "k***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v79, "judensäue", "j******ue");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v80, "judenschweine", "j**********ne");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v81, "judenschwein", "j**********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v82, "judensau", "j******u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v83, "judennutten", "j********en");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v84, "judennutte", "j********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v85, "judenhuren", "j*******en");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v86, "judenhure", "j*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v87, "judaverrecke", "j**********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v88, "japsen", "j***en");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v89, "japse", "j***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[13],0>(v90, "itakerschweine", "i*********ne");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[12],0>(v91, "itakerschwein", "i*********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v92, "itakernutten", "i*********en");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v93, "itakernutte", "i*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v94, "itakerhure", "i********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v95, "itaker", "i****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[13],0>(v96, "hühnerficker", "h**********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[10],0>(v97, "hurensöhne", "h******ne");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v98, "hurensohn", "h*******n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v99, "huren", "h**en");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v100, "hure", "h**e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v101, "huehnerficker", "h***********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v102, "heilhitler", "h********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v103, "gebumst", "g*****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v104, "fucksticks", "f*******ks");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v105, "fuckstick", "f*******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v106, "fucking", "f***ing");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v107, "fuckin", "f****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v108, "fuckhead", "f******d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v109, "fuckem", "f****m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v110, "fucked", "f***ed");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v111, "fuck", "f**k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v112, "fotzensaft", "f********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v113, "fotzenlecker", "f**********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v114, "fotzen", "f***en");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v115, "fotze", "f***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v116, "flachwichser", "f**********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v117, "fisten", "f***en");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v118, "fickt", "f***t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v119, "fickpisse", "f*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v120, "ficker", "f****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v121, "ficken", "f***en");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v122, "fickdich", "f******h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v123, "fick", "f**k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v124, "fettärsche", "f********he");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v125, "fettsäcke", "f*******ke");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v126, "fettsack", "f******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v127, "fettarsch", "f*******h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[13],0>(v128, "ferkelwämser", "f**********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v129, "ferkelwaemser", "f***********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v130, "ferkelficker", "f**********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v131, "eselficker", "e********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v132, "durchgefickt", "d**********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v133, "durchficken", "d********en");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v134, "bumsen", "b***en");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[13],0>(v135, "bullenklöten", "b*********en");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v136, "bullenkloeten", "b**********en");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v137, "beschissen", "b*******en");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v138, "bescheißt", "b*******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v139, "bescheißen", "b*******en");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v140, "bescheissen", "b********en");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[16],0>(v141, "ausländervotzen", "a************en");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[15],0>(v142, "ausländervotze", "a************e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[16],0>(v143, "ausländerfotzen", "a************en");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[15],0>(v144, "ausländerfotze", "a************e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v145, "arschlöcher", "a*********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v146, "arschloecher", "a**********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v147, "arschloch", "a*******h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v148, "arschlecker", "a*********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[17],0>(v149, "arschkriecherin", "a*************in");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v150, "arschkriecher", "a***********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v151, "arschkekse", "a*******se");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v152, "arschkeks", "a******ks");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v153, "arschkatheter", "a***********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v154, "arschintruder", "a***********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v155, "arschficker", "a*********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v156, "arschficken", "a********en");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v157, "arsch", "a***h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v158, "analschlampe", "a**********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v159, "abgefuckt", "a*******t");
    std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](&siri::dialogengine::GetProfanityFilter_de(void)::sProfanityData_de, (uint64_t)v5, 0x9BuLL);
    for (i = 0; i != -930; i -= 6)
      std::pair<std::string const,std::string>::~pair((uint64_t)&v159[i]);
    __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], &siri::dialogengine::GetProfanityFilter_de(void)::sProfanityData_de, &dword_1BF794000);
  }
  *v1 = 0;
  v1[1] = 0;
  v1[2] = 0;
  return std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(v1, siri::dialogengine::GetProfanityFilter_de(void)::sProfanityData_de, *(uint64_t *)algn_1EF582F50, 0xAAAAAAAAAAAAAAABLL* ((*(_QWORD *)algn_1EF582F50 - siri::dialogengine::GetProfanityFilter_de(void)::sProfanityData_de) >> 4));
}

void sub_1BFBA538C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + 7392;
  v4 = -7440;
  do
  {
    v3 = std::pair<std::string const,std::string>::~pair(v3) - 48;
    v4 += 48;
  }
  while (v4);
  _Unwind_Resume(a1);
}

_QWORD *siri::dialogengine::GetProfanityFilter_ko(siri::dialogengine *this)
{
  _QWORD *v1;
  unsigned __int8 v2;
  uint64_t i;
  _QWORD v5[6];
  _QWORD v6[6];
  _QWORD v7[6];
  _QWORD v8[6];
  _QWORD v9[6];
  _QWORD v10[6];
  _QWORD v11[6];
  _QWORD v12[6];
  _QWORD v13[6];
  _QWORD v14[6];
  _QWORD v15[6];
  _QWORD v16[6];
  _QWORD v17[6];
  _QWORD v18[6];
  _QWORD v19[6];
  _QWORD v20[6];
  _QWORD v21[6];
  _QWORD v22[6];
  _QWORD v23[6];
  _QWORD v24[6];
  _QWORD v25[6];
  _QWORD v26[6];
  _QWORD v27[6];
  _QWORD v28[6];
  _QWORD v29[6];
  _QWORD v30[6];
  _QWORD v31[6];
  _QWORD v32[6];
  _QWORD v33[6];
  _QWORD v34[6];
  _QWORD v35[6];
  _QWORD v36[6];
  _QWORD v37[6];
  _QWORD v38[6];
  _QWORD v39[6];
  _QWORD v40[6];
  _QWORD v41[6];
  _QWORD v42[6];
  _QWORD v43[6];
  _QWORD v44[6];
  _QWORD v45[6];
  _QWORD v46[6];
  _QWORD v47[6];
  _QWORD v48[6];
  _QWORD v49[6];
  _QWORD v50[6];
  _QWORD v51[6];
  _QWORD v52[6];
  _QWORD v53[6];
  _QWORD v54[6];
  _QWORD v55[6];
  _QWORD v56[6];
  _QWORD v57[6];
  _QWORD v58[6];
  _QWORD v59[6];
  _QWORD v60[6];
  _QWORD v61[6];
  _QWORD v62[6];
  _QWORD v63[6];
  _QWORD v64[6];
  _QWORD v65[6];
  _QWORD v66[6];
  _QWORD v67[6];
  _QWORD v68[6];
  _QWORD v69[6];
  _QWORD v70[6];
  _QWORD v71[6];
  _QWORD v72[6];
  _QWORD v73[6];
  _QWORD v74[6];
  _QWORD v75[6];
  _QWORD v76[6];
  _QWORD v77[6];
  _QWORD v78[6];
  _QWORD v79[6];
  _QWORD v80[6];
  _QWORD v81[6];
  _QWORD v82[6];
  _QWORD v83[6];
  _QWORD v84[6];
  _QWORD v85[6];
  _QWORD v86[6];
  _QWORD v87[6];
  _QWORD v88[6];
  _QWORD v89[6];
  _QWORD v90[6];
  _QWORD v91[6];
  _QWORD v92[6];
  _QWORD v93[6];
  _QWORD v94[6];
  _QWORD v95[6];
  _QWORD v96[6];
  _QWORD v97[6];
  _QWORD v98[6];
  _QWORD v99[6];
  _QWORD v100[6];
  _QWORD v101[6];
  _QWORD v102[6];
  _QWORD v103[6];
  _QWORD v104[6];
  _QWORD v105[6];
  _QWORD v106[6];
  _QWORD v107[6];
  _QWORD v108[6];
  _QWORD v109[6];
  _QWORD v110[6];
  _QWORD v111[6];
  _QWORD v112[6];
  _QWORD v113[6];
  _QWORD v114[6];
  _QWORD v115[6];
  _QWORD v116[6];
  _QWORD v117[6];
  _QWORD v118[6];
  _QWORD v119[6];
  _QWORD v120[6];
  _QWORD v121[6];
  _QWORD v122[6];
  _QWORD v123[6];
  _QWORD v124[6];
  _QWORD v125[6];
  _QWORD v126[6];
  _QWORD v127[6];
  _QWORD v128[6];
  _QWORD v129[6];
  _QWORD v130[6];
  _QWORD v131[6];
  _QWORD v132[6];
  _QWORD v133[6];
  _QWORD v134[6];
  _QWORD v135[6];
  _QWORD v136[6];
  _QWORD v137[6];
  _QWORD v138[6];
  _QWORD v139[6];
  _QWORD v140[6];
  _QWORD v141[6];
  _QWORD v142[6];
  _QWORD v143[6];
  _QWORD v144[6];
  _QWORD v145[6];
  _QWORD v146[6];
  _QWORD v147[6];
  _QWORD v148[6];
  _QWORD v149[6];
  _QWORD v150[6];
  _QWORD v151[6];
  _QWORD v152[6];
  _QWORD v153[6];
  _QWORD v154[6];
  _QWORD v155[6];
  _QWORD v156[6];
  _QWORD v157[6];
  _QWORD v158[6];
  _QWORD v159[6];
  _QWORD v160[6];
  _QWORD v161[6];
  _QWORD v162[6];
  _QWORD v163[6];
  _QWORD v164[6];
  _QWORD v165[6];
  _QWORD v166[6];
  _QWORD v167[6];
  _QWORD v168[6];
  _QWORD v169[6];
  _QWORD v170[6];
  _QWORD v171[6];
  _QWORD v172[6];
  _QWORD v173[6];
  _QWORD v174[6];
  _QWORD v175[6];
  _QWORD v176[6];
  _QWORD v177[6];
  _QWORD v178[6];
  _QWORD v179[6];
  _QWORD v180[6];
  _QWORD v181[6];
  _QWORD v182[6];
  _QWORD v183[6];
  _QWORD v184[6];
  _QWORD v185[6];
  _QWORD v186[6];
  _QWORD v187[6];
  _QWORD v188[6];
  _QWORD v189[6];
  _QWORD v190[6];
  _QWORD v191[6];
  _QWORD v192[6];
  _QWORD v193[6];
  _QWORD v194[6];
  _QWORD v195[6];
  _QWORD v196[6];
  _QWORD v197[6];
  _QWORD v198[6];
  _QWORD v199[6];
  _QWORD v200[6];
  _QWORD v201[6];
  _QWORD v202[6];
  _QWORD v203[6];
  _QWORD v204[6];
  _QWORD v205[6];
  _QWORD v206[6];
  _QWORD v207[6];
  _QWORD v208[6];
  _QWORD v209[6];
  _QWORD v210[6];
  _QWORD v211[6];
  _QWORD v212[6];
  _QWORD v213[6];
  _QWORD v214[6];
  _QWORD v215[6];
  _QWORD v216[6];
  _QWORD v217[6];
  _QWORD v218[6];
  _QWORD v219[6];
  _QWORD v220[6];
  _QWORD v221[6];
  _QWORD v222[6];
  _QWORD v223[6];
  _QWORD v224[6];
  _QWORD v225[6];
  _QWORD v226[6];
  _QWORD v227[6];
  _QWORD v228[6];
  _QWORD v229[6];
  _QWORD v230[6];
  _QWORD v231[6];
  _QWORD v232[6];
  _QWORD v233[6];
  _QWORD v234[6];
  _QWORD v235[6];
  _QWORD v236[6];
  _QWORD v237[6];
  _QWORD v238[6];
  _QWORD v239[6];
  _QWORD v240[6];
  _QWORD v241[6];
  _QWORD v242[6];
  _QWORD v243[6];
  _QWORD v244[6];
  _QWORD v245[6];
  _QWORD v246[6];
  _QWORD v247[6];
  _QWORD v248[6];
  _QWORD v249[6];
  _QWORD v250[6];
  _QWORD v251[6];
  _QWORD v252[6];
  _QWORD v253[6];
  _QWORD v254[6];
  _QWORD v255[6];
  _QWORD v256[6];
  _QWORD v257[6];
  _QWORD v258[6];
  _QWORD v259[6];
  _QWORD v260[6];
  _QWORD v261[6];
  _QWORD v262[6];
  _QWORD v263[6];
  _QWORD v264[6];
  _QWORD v265[6];
  _QWORD v266[6];
  _QWORD v267[6];
  _QWORD v268[6];
  _QWORD v269[6];
  _QWORD v270[6];
  _QWORD v271[6];
  _QWORD v272[6];
  _QWORD v273[6];
  _QWORD v274[6];
  _QWORD v275[6];
  _QWORD v276[6];
  _QWORD v277[6];
  _QWORD v278[6];
  _QWORD v279[6];
  _QWORD v280[6];
  _QWORD v281[6];
  _QWORD v282[6];
  _QWORD v283[6];
  _QWORD v284[6];
  _QWORD v285[6];
  _QWORD v286[6];
  _QWORD v287[6];
  _QWORD v288[6];
  _QWORD v289[6];
  _QWORD v290[6];
  _QWORD v291[6];
  _QWORD v292[6];
  _QWORD v293[6];
  _QWORD v294[6];
  _QWORD v295[6];
  _QWORD v296[6];
  _QWORD v297[6];
  _QWORD v298[6];
  _QWORD v299[6];
  _QWORD v300[6];
  _QWORD v301[6];
  _QWORD v302[6];
  _QWORD v303[6];
  _QWORD v304[6];
  _QWORD v305[6];
  _QWORD v306[6];
  _QWORD v307[6];
  _QWORD v308[6];
  _QWORD v309[6];
  _QWORD v310[6];
  _QWORD v311[6];
  _QWORD v312[6];
  _QWORD v313[6];
  _QWORD v314[6];
  _QWORD v315[6];
  _QWORD v316[6];
  _QWORD v317[6];
  _QWORD v318[6];
  _QWORD v319[6];
  _QWORD v320[6];
  _QWORD v321[6];
  _QWORD v322[6];
  _QWORD v323[6];
  _QWORD v324[6];
  _QWORD v325[6];
  _QWORD v326[6];
  _QWORD v327[6];
  _QWORD v328[6];
  _QWORD v329[6];
  _QWORD v330[6];
  _QWORD v331[6];
  _QWORD v332[6];
  _QWORD v333[6];
  _QWORD v334[6];
  _QWORD v335[6];
  _QWORD v336[6];
  _QWORD v337[6];
  _QWORD v338[6];
  _QWORD v339[6];
  _QWORD v340[6];
  _QWORD v341[6];
  _QWORD v342[6];
  _QWORD v343[6];
  _QWORD v344[6];
  _QWORD v345[6];
  _QWORD v346[6];
  _QWORD v347[6];
  _QWORD v348[6];
  _QWORD v349[6];
  _QWORD v350[6];
  _QWORD v351[6];
  _QWORD v352[6];
  _QWORD v353[6];
  _QWORD v354[6];
  _QWORD v355[7];

  v1 = (_QWORD *)MEMORY[0x1E0C80A78](this);
  v355[6] = *MEMORY[0x1E0C80C00];
  if ((v2 & 1) == 0
  {
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v5, "후릴놈", "후**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v6, "후릴년", "후**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v7, "호모자식", "호***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v8, "호모새끼", "호***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v9, "호모놈", "호**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v10, "호모년", "호**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v11, "호로잡놈", "호***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v12, "호로잡년", "호***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v13, "호로잡것", "호***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v14, "호로자식", "호***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v15, "호로새끼", "호***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v16, "호로개잡놈", "호****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v17, "호로개잡년", "호****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v18, "호로개자식", "호****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v19, "호구새끼", "호***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v20, "허접새끼", "허***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v21, "허접들", "허**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v22, "코쟁이", "코**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v23, "쳐먹어", "쳐**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v24, "처먹어", "처**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v25, "창놈", "창*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v26, "창년", "창*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v27, "창녀", "창*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v28, "창남", "창*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v29, "쪽발이", "쪽**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v30, "쪽바리", "쪽**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v31, "짱깨", "짱*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v32, "지랄하네", "지***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v33, "지랄발광", "지***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v34, "지랄", "지*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v35, "즐쳐드셈", "즐***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v36, "쥐좆만한", "쥐***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v37, "쥐새끼", "쥐**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v38, "죽일새끼", "죽***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v39, "죽일놈", "죽**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v40, "죽일년", "죽**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v41, "좇까라", "좇**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v42, "좆빠지게", "좆***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v43, "좆빠구리", "좆***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v44, "좆밥", "좆*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v45, "좆맹구", "좆**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v46, "좆만한새끼", "좆****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v47, "좆만한놈", "좆***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v48, "좆만한년", "좆***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v49, "좆만한것", "좆***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v50, "좆만아", "좆**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v51, "좆됐다", "좆**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v52, "좆대가리", "좆***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v53, "좆나씨팔", "좆***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v54, "좆나", "*나");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v55, "좆까", "좆*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v56, "좆같은새끼", "좆****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v57, "좆같은놈", "좆***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v58, "좆같은년", "좆***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v59, "좆같다", "좆**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[2],0>(v60, "좆", "*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v61, "좃빠지게", "좃***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v62, "좃빠구리", "좃***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v63, "좃밥", "좃*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v64, "좃맹구", "좃**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v65, "좃만한새끼", "좃****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v66, "좃만한놈", "좃***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v67, "좃만한년", "좃***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v68, "좃만한것", "좃***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v69, "좃만아", "좃**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v70, "좃됐다", "좃**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v71, "좃대가리", "좃***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v72, "좃나씹팔", "좃***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v73, "좃나씨팔", "좃***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v74, "좃나씨발", "좃***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v75, "좃나십팔", "좃***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v76, "졸라게", "졸**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v77, "졸라", "졸*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v78, "존나게", "존**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v79, "존나", "존*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[9],0>(v80, "재수없는새끼", "재*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v81, "재수없는놈", "재****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v82, "재수없는년", "재****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v83, "잡새끼", "잡**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v84, "잡놈", "잡*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v85, "잡년", "잡*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v86, "잡것", "잡*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v87, "자지새끼", "자***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v88, "자지놈", "자**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v89, "자지년", "자**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v90, "육시럴", "육**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v91, "육시랄놈", "육***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v92, "육시랄년", "육***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v93, "육시랄", "육**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v94, "육봉대가리", "육****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v95, "우라질", "우**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v96, "엿먹어", "엿**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v97, "엿같은새끼", "엿****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v98, "엿같은놈", "엿***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v99, "엿같은년", "엿***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v100, "염병할새끼", "염****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v101, "염병할놈", "염***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v102, "염병할년", "염***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v103, "염병할것", "염***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v104, "염병할", "염**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v105, "염병", "염*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v106, "에미보지", "에***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v107, "양년", "양*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v108, "양공주", "양**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v109, "양갈보", "양**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v110, "아갈통", "아**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v111, "아갈빡", "아**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v112, "씹팔좆나", "씨***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v113, "씹팔좆", "씨**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[9],0>(v114, "씹팔놈의새끼", "씨*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v115, "씹팔놈", "씨**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v116, "씹팔년", "씨**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v117, "씹팔것", "씨**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v118, "씹팔개새끼", "씨****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v119, "씹팔", "씹*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v120, "씹탱구리", "씹***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v121, "씹장생", "씹**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[5],0>(v122, "씹새야", "씹*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[5],0>(v123, "씹새끼", "씹*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v124, "씹놈", "씹*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v125, "씹년", "씹*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v126, "씹구멍", "씹**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v127, "씨팔좆나", "씨***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v128, "씨팔좆", "씨**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[9],0>(v129, "씨팔놈의새끼", "씨*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v130, "씨팔놈", "씨**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v131, "씨팔년", "씨**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v132, "씨팔것", "씨**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v133, "씨팔개새끼", "씨****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v134, "씨팔", "씨*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v135, "씨불탱", "씨**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v136, "씨부랄놈", "씨***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v137, "씨부랄년", "씨***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v138, "씨부랄", "씨**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v139, "씨방새끼", "씨***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v140, "씨방새", "씨**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v141, "씨발좆나", "씨***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v142, "씨발좆", "씨**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v143, "씨발새끼", "씨***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[9],0>(v144, "씨발놈의새끼", "씨*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v145, "씨발놈", "씨**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v146, "씨발년", "씨**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v147, "씨발것", "씨**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v148, "씨발개새끼", "씨****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v149, "씨발", "씨*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v150, "씨댕아", "씨**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v151, "씨댕새끼", "씨***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v152, "씨댕놈", "씨**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v153, "씨댕년", "씨**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v154, "씨댕", "씨*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v155, "쓰레기년", "쓰***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[9],0>(v156, "썩을놈의새끼", "썩*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v157, "썩을놈", "썩**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v158, "썩을년", "썩**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v159, "썅놈의새끼", "썅****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v160, "썅놈", "썅*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v161, "썅년", "썅*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[2],0>(v162, "썅", "*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v163, "쌍판", "쌍*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v164, "쌍놈의새끼", "쌍****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v165, "쌍놈", "쌍*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v166, "쌍년", "쌍*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[2],0>(v167, "쌍", "*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v168, "십팔", "십*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v169, "십딱", "십*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v170, "소새끼", "소**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v171, "섹파", "섹*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v172, "섹마", "섹*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v173, "섹녀", "섹*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v174, "섹남", "섹*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v175, "서양이쁜이", "서****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v176, "색마", "색*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v177, "색놈", "색*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v178, "색년", "색*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v179, "새대가리", "새***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v180, "상놈의새끼", "상****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v181, "상놈", "상*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v182, "상년", "상*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v183, "삽질", "삽*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v184, "사까시", "사**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v185, "빨통", "빨*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v186, "빨갱이", "빨**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v187, "빠순이", "빠**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v188, "빠돌이", "빠**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v189, "빠구리", "빠**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[9],0>(v190, "빌어먹을새끼", "빌*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v191, "빌어먹을놈", "빌****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v192, "빌어먹을년", "빌****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v193, "불알", "불*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v194, "보지털", "보**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v195, "보지새끼", "보***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v196, "보지구멍", "보***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v197, "보지", "보*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v198, "병신씹새", "병***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v199, "병신새끼", "병***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v200, "병신개자식", "병****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v201, "병신같은놈", "병****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v202, "병신같은년", "병****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v203, "병신", "병*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v204, "변태새끼", "변***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v205, "변태", "변*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v206, "변섹", "변*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v207, "변녀", "변*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v208, "변남", "변*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v209, "반병신", "반**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v210, "미친씹새끼", "미****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v211, "미친썅놈", "미***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v212, "미친썅년", "미***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v213, "미친쌍놈", "미***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v214, "미친쌍년", "미***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v215, "미친새끼", "미***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v216, "미친상놈", "미***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v217, "미친상년", "미***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v218, "미친놈", "미**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v219, "미친년", "미**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v220, "미친개잡", "미***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v221, "미친개새끼", "미****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v222, "미친개보지", "미****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v223, "멍텅구리", "멍***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v224, "멍청한새끼", "멍****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v225, "멍청한놈", "멍***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v226, "멍청한년", "멍***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v227, "망할새끼", "망***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v228, "망할놈", "망**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v229, "망할년", "망**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v230, "맛간새끼", "맛***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v231, "맛간놈", "맛**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v232, "맛간년", "맛**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v233, "막간놈", "막**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v234, "막간년", "막**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v235, "뚱보새끼", "뚱***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v236, "똥대가리", "똥***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v237, "또라이새끼", "또****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v238, "또라이", "또**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v239, "딸딸이", "딸**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v240, "등신새끼", "등***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v241, "뒈질새끼", "뒈***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v242, "뒈질놈", "뒈**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v243, "뒈질년", "뒈**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v244, "뒈질", "뒈*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v245, "돌아이새끼", "돌****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v246, "돌아이", "돌**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v247, "돌대가리", "돌***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v248, "대갈빡", "대**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v249, "닥쳐", "닥*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v250, "니자지", "니**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v251, "니보지", "니**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v252, "니미좃", "니**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v253, "니미애미", "니***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v254, "니미씹", "니**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[9],0>(v255, "니미씨팔놈아", "니*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v256, "니미씨팔", "니***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v257, "니미럴새끼", "니****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v258, "니미럴", "니**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v259, "니미", "니*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v260, "니기미씨댕", "니****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v261, "니기미", "니**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v262, "니기리좆도", "닝****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v263, "남창", "남*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v264, "나쁜새끼", "나***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v265, "나쁜놈", "나**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v266, "나쁜년", "나**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v267, "꼴통새끼", "꼴***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v268, "껌둥이", "껌**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v269, "깜둥이", "깜**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v270, "까진년", "까**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v271, "그지좆밥", "그***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v272, "구멍질", "구**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v273, "고자새끼", "고***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v274, "고자놈", "고**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v275, "걸레놈", "걸**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v276, "걸레년", "걸**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v277, "걸레같은놈", "걸****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v278, "걸레같은년", "걸****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v279, "거지좃밥", "거***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v280, "거지새끼", "거***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v281, "거지발싸개", "거****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v282, "거지놈", "거**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v283, "거지년", "거**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v284, "개호로새끼", "개****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v285, "개호로놈", "개***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v286, "개호로년", "개***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v287, "개호로", "개**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v288, "개허접", "개**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v289, "개찌질이", "개***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v290, "개쪼다", "개**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v291, "개지랄", "개**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v292, "개좆만아", "개***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v293, "개좆같은놈", "개****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v294, "개좆같은년", "개****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v295, "개좆같은것", "개****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v296, "개좆같은", "개***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v297, "개잡놈", "개**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v298, "개잡년", "개**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v299, "개잡것", "개**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v300, "개작살", "개**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v301, "개자지", "개**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v302, "개자식", "개**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v303, "개염병", "개**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v304, "개씹창", "개**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v305, "개씹새끼", "개***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v306, "개씹새", "개**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v307, "개씹보지", "개***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v308, "개씨팔좆밥", "개****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[6],0>(v309, "개씨팔놈", "개**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[6],0>(v310, "개씨팔년", "개**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v311, "개씨팔", "개**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v312, "개씨부랄", "개***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v313, "개쓰레기", "개***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v314, "개썅놈", "개**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v315, "개썅년", "개**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v316, "개쌍놈", "개**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v317, "개쌍년", "개**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v318, "개싸이코", "개***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v319, "개소리", "개**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v320, "개새끼", "개**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v321, "개상놈", "개**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v322, "개상년", "개**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v323, "개뼈다귀", "개***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v324, "개빠구리", "개***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v325, "개불알", "개**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v326, "개보지털", "개***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v327, "개보지놈", "개***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v328, "개보지년", "개***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v329, "개보지", "개**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v330, "개병신", "개**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v331, "개발싸개", "개***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v332, "개발새끼", "개***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v333, "개발놈", "개**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v334, "개발년", "개**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v335, "개망나니", "개***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v336, "개또라이", "개***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v337, "개돌아이", "개***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v338, "개놈의새끼", "개****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v339, "개놈아", "개**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v340, "개놈", "개*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v341, "개년아", "개**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v342, "개년", "개*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v343, "개걸레", "개**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v344, "개같은자식", "개****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v345, "개같은새끼", "개****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v346, "개같은놈", "개***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v347, "개같은년", "개***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v348, "개같은", "개**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v349, "개갈보", "개**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v350, "갈보자식", "갈***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v351, "갈보새끼", "갈***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v352, "갈보놈", "갈**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v353, "갈보년", "갈**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v354, "갈보", "갈*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v355, "간나새끼", "간***");
    std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](&siri::dialogengine::GetProfanityFilter_ko(void)::sProfanityData_ko, (uint64_t)v5, 0x15FuLL);
    for (i = 0; i != -2106; i -= 6)
      std::pair<std::string const,std::string>::~pair((uint64_t)&v355[i]);
    __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], &siri::dialogengine::GetProfanityFilter_ko(void)::sProfanityData_ko, &dword_1BF794000);
  }
  *v1 = 0;
  v1[1] = 0;
  v1[2] = 0;
  return std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(v1, siri::dialogengine::GetProfanityFilter_ko(void)::sProfanityData_ko, *(uint64_t *)algn_1EF582F70, 0xAAAAAAAAAAAAAAABLL* ((*(_QWORD *)algn_1EF582F70 - siri::dialogengine::GetProfanityFilter_ko(void)::sProfanityData_ko) >> 4));
}

void sub_1BFBA8260(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + 16800;
  v4 = -16848;
  do
  {
    v3 = std::pair<std::string const,std::string>::~pair(v3) - 48;
    v4 += 48;
  }
  while (v4);
  _Unwind_Resume(a1);
}

_QWORD *siri::dialogengine::GetProfanityFilter_fi(siri::dialogengine *this)
{
  _QWORD *v1;
  unsigned __int8 v2;
  uint64_t i;
  _QWORD v5[6];
  _QWORD v6[6];
  _QWORD v7[6];
  _QWORD v8[6];
  _QWORD v9[6];
  _QWORD v10[6];
  _QWORD v11[6];
  _QWORD v12[6];
  _QWORD v13[6];
  _QWORD v14[6];
  _QWORD v15[6];
  _QWORD v16[6];
  _QWORD v17[6];
  _QWORD v18[6];
  _QWORD v19[6];
  _QWORD v20[6];
  _QWORD v21[6];
  _QWORD v22[6];
  _QWORD v23[6];
  _QWORD v24[6];
  _QWORD v25[6];
  _QWORD v26[6];
  _QWORD v27[6];
  _QWORD v28[6];
  _QWORD v29[6];
  _QWORD v30[6];
  _QWORD v31[6];
  _QWORD v32[6];
  _QWORD v33[6];
  _QWORD v34[6];
  _QWORD v35[6];
  _QWORD v36[6];
  _QWORD v37[6];
  _QWORD v38[6];
  _QWORD v39[6];
  _QWORD v40[6];
  _QWORD v41[6];
  _QWORD v42[6];
  _QWORD v43[6];
  _QWORD v44[6];
  _QWORD v45[6];
  _QWORD v46[6];
  _QWORD v47[6];
  _QWORD v48[6];
  _QWORD v49[6];
  _QWORD v50[6];
  _QWORD v51[6];
  _QWORD v52[6];
  _QWORD v53[6];
  _QWORD v54[6];
  _QWORD v55[6];
  _QWORD v56[6];
  _QWORD v57[6];
  _QWORD v58[6];
  _QWORD v59[6];
  _QWORD v60[6];
  _QWORD v61[6];
  _QWORD v62[6];
  _QWORD v63[6];
  _QWORD v64[6];
  _QWORD v65[6];
  _QWORD v66[6];
  _QWORD v67[6];
  _QWORD v68[6];
  _QWORD v69[6];
  _QWORD v70[6];
  _QWORD v71[6];
  _QWORD v72[6];
  _QWORD v73[6];
  _QWORD v74[6];
  _QWORD v75[6];
  _QWORD v76[6];
  _QWORD v77[6];
  _QWORD v78[6];
  _QWORD v79[6];
  _QWORD v80[6];
  _QWORD v81[6];
  _QWORD v82[6];
  _QWORD v83[6];
  _QWORD v84[6];
  _QWORD v85[6];
  _QWORD v86[6];
  _QWORD v87[6];
  _QWORD v88[6];
  _QWORD v89[6];
  _QWORD v90[6];
  _QWORD v91[6];
  _QWORD v92[7];

  v1 = (_QWORD *)MEMORY[0x1E0C80A78](this);
  v92[6] = *MEMORY[0x1E0C80C00];
  if ((v2 & 1) == 0
  {
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v5, "vitut", "v***t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v6, "vitusta", "v*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v7, "vitussa", "v*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v8, "vitun", "v***n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v9, "vitulta", "v*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v10, "vitulle", "v*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v11, "vitulla", "v*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v12, "vituksi", "v*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v13, "vituista", "v******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v14, "vituissa", "v******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v15, "vituilta", "v******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v16, "vituille", "v******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v17, "vituilla", "v******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v18, "vituiksi", "v******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v19, "vittuun", "v*****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v20, "vittuna", "v*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v21, "vittujen", "v******n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v22, "vittuja", "v*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v23, "vittuina", "v******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v24, "vittuihin", "v*******n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v25, "vittua", "v****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v26, "vittu", "v***u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v27, "pilluun", "p*****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v28, "pillut", "p****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v29, "pillusta", "p******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v30, "pillussa", "p******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v31, "pilluna", "p*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v32, "pillun", "p****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v33, "pillulta", "p******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v34, "pillulle", "p******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v35, "pillulla", "p******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v36, "pilluksi", "p******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v37, "pillujen", "p******n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v38, "pilluja", "p*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v39, "pilluista", "p*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v40, "pilluissa", "p*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v41, "pilluina", "p******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v42, "pilluilta", "p*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v43, "pilluille", "p*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v44, "pilluilla", "p*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v45, "pilluiksi", "p*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v46, "pilluihin", "p*******n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v47, "pillua", "p****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v48, "pillu", "p***u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v49, "kyrvät", "k****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v50, "kyrvästä", "k******ä");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v51, "kyrvässä", "k******ä");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v52, "kyrvän", "k****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v53, "kyrvältä", "k******ä");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v54, "kyrvällä", "k******ä");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v55, "kyrvälle", "k******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v56, "kyrväksi", "k******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v57, "kyrvistä", "k******ä");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v58, "kyrvissä", "k******ä");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v59, "kyrviltä", "k******ä");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v60, "kyrvillä", "k******ä");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v61, "kyrville", "k******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v62, "kyrviksi", "k******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(v63, "kyrpään", "k*****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v64, "kyrpää", "k****ä");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v65, "kyrpänä", "k*****ä");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v66, "kyrpä", "k***ä");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v67, "kyrpiä", "k****ä");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v68, "kyrpinä", "k*****ä");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v69, "kyrpiin", "k*****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v70, "kyrpien", "k*****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v71, "kullit", "k****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v72, "kullista", "k******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v73, "kullissa", "k******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v74, "kullina", "k*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v75, "kullin", "k****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v76, "kullilta", "k******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v77, "kullille", "k******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v78, "kullilla", "k******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v79, "kulliksi", "k******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v80, "kulliin", "k*****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v81, "kullien", "k*****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v82, "kullia", "k****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v83, "kulli", "k***i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v84, "kulleja", "k*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v85, "kulleista", "k*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v86, "kulleissa", "k*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v87, "kulleina", "k******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v88, "kulleilta", "k*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v89, "kulleille", "k*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v90, "kulleilla", "k*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v91, "kulleiksi", "k******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v92, "kulleihin", "k*******n");
    std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](&siri::dialogengine::GetProfanityFilter_fi(void)::sProfanityData_fi, (uint64_t)v5, 0x58uLL);
    for (i = 0; i != -528; i -= 6)
      std::pair<std::string const,std::string>::~pair((uint64_t)&v92[i]);
    __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], &siri::dialogengine::GetProfanityFilter_fi(void)::sProfanityData_fi, &dword_1BF794000);
  }
  *v1 = 0;
  v1[1] = 0;
  v1[2] = 0;
  return std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(v1, siri::dialogengine::GetProfanityFilter_fi(void)::sProfanityData_fi, *(uint64_t *)algn_1EF582F90, 0xAAAAAAAAAAAAAAABLL* ((*(_QWORD *)algn_1EF582F90 - siri::dialogengine::GetProfanityFilter_fi(void)::sProfanityData_fi) >> 4));
}

void sub_1BFBA8E48(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + 4176;
  v4 = -4224;
  do
  {
    v3 = std::pair<std::string const,std::string>::~pair(v3) - 48;
    v4 += 48;
  }
  while (v4);
  _Unwind_Resume(a1);
}

_QWORD *siri::dialogengine::GetProfanityFilter_id(siri::dialogengine *this)
{
  unsigned __int8 v2;
  uint64_t i;
  _QWORD v5[6];
  _QWORD v6[6];
  _QWORD v7[6];
  _QWORD v8[6];
  _QWORD v9[7];

  v9[6] = *MEMORY[0x1E0C80C00];
  if ((v2 & 1) == 0
  {
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v5, "toket", "t***t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v6, "keparat", "k*****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v7, "dientot", "d*****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v8, "binal", "b***l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v9, "bangsat", "b*****t");
    std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](&siri::dialogengine::GetProfanityFilter_id(void)::sProfanityData_id, (uint64_t)v5, 5uLL);
    for (i = 24; i != -6; i -= 6)
      std::pair<std::string const,std::string>::~pair((uint64_t)&v5[i]);
    __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], &siri::dialogengine::GetProfanityFilter_id(void)::sProfanityData_id, &dword_1BF794000);
  }
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  return std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(this, siri::dialogengine::GetProfanityFilter_id(void)::sProfanityData_id, *(uint64_t *)algn_1EF582FB0, 0xAAAAAAAAAAAAAAABLL* ((*(_QWORD *)algn_1EF582FB0 - siri::dialogengine::GetProfanityFilter_id(void)::sProfanityData_id) >> 4));
}

void sub_1BFBA9044(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t i;

  for (i = 192; i != -48; i -= 48)
    std::pair<std::string const,std::string>::~pair(v1 + i);
  _Unwind_Resume(a1);
}

_QWORD *siri::dialogengine::GetProfanityFilter_fr(siri::dialogengine *this)
{
  _QWORD *v1;
  unsigned __int8 v2;
  uint64_t i;
  _QWORD v5[6];
  _QWORD v6[6];
  _QWORD v7[6];
  _QWORD v8[6];
  _QWORD v9[6];
  _QWORD v10[6];
  _QWORD v11[6];
  _QWORD v12[6];
  _QWORD v13[6];
  _QWORD v14[6];
  _QWORD v15[6];
  _QWORD v16[6];
  _QWORD v17[6];
  _QWORD v18[6];
  _QWORD v19[6];
  _QWORD v20[6];
  _QWORD v21[6];
  _QWORD v22[6];
  _QWORD v23[6];
  _QWORD v24[6];
  _QWORD v25[6];
  _QWORD v26[6];
  _QWORD v27[6];
  _QWORD v28[6];
  _QWORD v29[6];
  _QWORD v30[6];
  _QWORD v31[6];
  _QWORD v32[6];
  _QWORD v33[6];
  _QWORD v34[6];
  _QWORD v35[6];
  _QWORD v36[6];
  _QWORD v37[6];
  _QWORD v38[6];
  _QWORD v39[6];
  _QWORD v40[6];
  _QWORD v41[6];
  _QWORD v42[6];
  _QWORD v43[6];
  _QWORD v44[6];
  _QWORD v45[6];
  _QWORD v46[6];
  _QWORD v47[6];
  _QWORD v48[6];
  _QWORD v49[6];
  _QWORD v50[6];
  _QWORD v51[6];
  _QWORD v52[6];
  _QWORD v53[6];
  _QWORD v54[6];
  _QWORD v55[6];
  _QWORD v56[6];
  _QWORD v57[6];
  _QWORD v58[6];
  _QWORD v59[6];
  _QWORD v60[6];
  _QWORD v61[6];
  _QWORD v62[6];
  _QWORD v63[6];
  _QWORD v64[6];
  _QWORD v65[6];
  _QWORD v66[6];
  _QWORD v67[6];
  _QWORD v68[6];
  _QWORD v69[6];
  _QWORD v70[6];
  _QWORD v71[6];
  _QWORD v72[6];
  _QWORD v73[6];
  _QWORD v74[6];
  _QWORD v75[6];
  _QWORD v76[6];
  _QWORD v77[6];
  _QWORD v78[6];
  _QWORD v79[6];
  _QWORD v80[6];
  _QWORD v81[6];
  _QWORD v82[6];
  _QWORD v83[6];
  _QWORD v84[6];
  _QWORD v85[6];
  _QWORD v86[6];
  _QWORD v87[6];
  _QWORD v88[6];
  _QWORD v89[6];
  _QWORD v90[6];
  _QWORD v91[6];
  _QWORD v92[6];
  _QWORD v93[6];
  _QWORD v94[6];
  _QWORD v95[6];
  _QWORD v96[6];
  _QWORD v97[6];
  _QWORD v98[6];
  _QWORD v99[6];
  _QWORD v100[6];
  _QWORD v101[6];
  _QWORD v102[6];
  _QWORD v103[6];
  _QWORD v104[6];
  _QWORD v105[6];
  _QWORD v106[6];
  _QWORD v107[6];
  _QWORD v108[6];
  _QWORD v109[6];
  _QWORD v110[6];
  _QWORD v111[6];
  _QWORD v112[6];
  _QWORD v113[6];
  _QWORD v114[6];
  _QWORD v115[6];
  _QWORD v116[6];
  _QWORD v117[6];
  _QWORD v118[6];
  _QWORD v119[6];
  _QWORD v120[6];
  _QWORD v121[6];
  _QWORD v122[6];
  _QWORD v123[6];
  _QWORD v124[6];
  _QWORD v125[6];
  _QWORD v126[6];
  _QWORD v127[6];
  _QWORD v128[6];
  _QWORD v129[6];
  _QWORD v130[6];
  _QWORD v131[6];
  _QWORD v132[6];
  _QWORD v133[6];
  _QWORD v134[6];
  _QWORD v135[6];
  _QWORD v136[6];
  _QWORD v137[6];
  _QWORD v138[6];
  _QWORD v139[6];
  _QWORD v140[6];
  _QWORD v141[6];
  _QWORD v142[6];
  _QWORD v143[6];
  _QWORD v144[6];
  _QWORD v145[6];
  _QWORD v146[6];
  _QWORD v147[6];
  _QWORD v148[6];
  _QWORD v149[6];
  _QWORD v150[6];
  _QWORD v151[6];
  _QWORD v152[6];
  _QWORD v153[6];
  _QWORD v154[6];
  _QWORD v155[6];
  _QWORD v156[6];
  _QWORD v157[6];
  _QWORD v158[6];
  _QWORD v159[6];
  _QWORD v160[6];
  _QWORD v161[6];
  _QWORD v162[6];
  _QWORD v163[6];
  _QWORD v164[6];
  _QWORD v165[6];
  _QWORD v166[6];
  _QWORD v167[6];
  _QWORD v168[6];
  _QWORD v169[6];
  _QWORD v170[6];
  _QWORD v171[6];
  _QWORD v172[6];
  _QWORD v173[6];
  _QWORD v174[6];
  _QWORD v175[6];
  _QWORD v176[6];
  _QWORD v177[6];
  _QWORD v178[6];
  _QWORD v179[6];
  _QWORD v180[6];
  _QWORD v181[6];
  _QWORD v182[6];
  _QWORD v183[6];
  _QWORD v184[6];
  _QWORD v185[6];
  _QWORD v186[6];
  _QWORD v187[6];
  _QWORD v188[6];
  _QWORD v189[6];
  _QWORD v190[6];
  _QWORD v191[6];
  _QWORD v192[6];
  _QWORD v193[6];
  _QWORD v194[6];
  _QWORD v195[6];
  _QWORD v196[6];
  _QWORD v197[6];
  _QWORD v198[6];
  _QWORD v199[6];
  _QWORD v200[6];
  _QWORD v201[6];
  _QWORD v202[6];
  _QWORD v203[6];
  _QWORD v204[6];
  _QWORD v205[6];
  _QWORD v206[6];
  _QWORD v207[6];
  _QWORD v208[6];
  _QWORD v209[6];
  _QWORD v210[6];
  _QWORD v211[6];
  _QWORD v212[6];
  _QWORD v213[6];
  _QWORD v214[6];
  _QWORD v215[6];
  _QWORD v216[6];
  _QWORD v217[6];
  _QWORD v218[6];
  _QWORD v219[6];
  _QWORD v220[6];
  _QWORD v221[6];
  _QWORD v222[6];
  _QWORD v223[6];
  _QWORD v224[6];
  _QWORD v225[6];
  _QWORD v226[6];
  _QWORD v227[6];
  _QWORD v228[6];
  _QWORD v229[6];
  _QWORD v230[6];
  _QWORD v231[6];
  _QWORD v232[6];
  _QWORD v233[6];
  _QWORD v234[6];
  _QWORD v235[6];
  _QWORD v236[6];
  _QWORD v237[6];
  _QWORD v238[6];
  _QWORD v239[6];
  _QWORD v240[6];
  _QWORD v241[6];
  _QWORD v242[6];
  _QWORD v243[6];
  _QWORD v244[6];
  _QWORD v245[6];
  _QWORD v246[6];
  _QWORD v247[6];
  _QWORD v248[6];
  _QWORD v249[6];
  _QWORD v250[6];
  _QWORD v251[6];
  _QWORD v252[6];
  _QWORD v253[6];
  _QWORD v254[6];
  _QWORD v255[6];
  _QWORD v256[6];
  _QWORD v257[6];
  _QWORD v258[6];
  _QWORD v259[6];
  _QWORD v260[6];
  _QWORD v261[6];
  _QWORD v262[6];
  _QWORD v263[6];
  _QWORD v264[6];
  _QWORD v265[6];
  _QWORD v266[6];
  _QWORD v267[6];
  _QWORD v268[6];
  _QWORD v269[6];
  _QWORD v270[6];
  _QWORD v271[6];
  _QWORD v272[6];
  _QWORD v273[6];
  _QWORD v274[6];
  _QWORD v275[6];
  _QWORD v276[6];
  _QWORD v277[6];
  _QWORD v278[6];
  _QWORD v279[6];
  _QWORD v280[6];
  _QWORD v281[6];
  _QWORD v282[6];
  _QWORD v283[6];
  _QWORD v284[6];
  _QWORD v285[6];
  _QWORD v286[6];
  _QWORD v287[6];
  _QWORD v288[6];
  _QWORD v289[7];

  v1 = (_QWORD *)MEMORY[0x1E0C80A78](this);
  v289[6] = *MEMORY[0x1E0C80C00];
  if ((v2 & 1) == 0
  {
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v5, "écouillé", "é******é");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v6, "éburné", "é****é");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v7, "zob", "z*b");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v8, "zguègue", "z*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v9, "zboube", "z****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v10, "zboob", "z***b");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v11, "weeaboo", "w*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v12, "vide-couilles", "v***********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v13, "turluchon", "t*******n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v14, "troufignon", "t********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v15, "troufignoliser", "t************r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v16, "troufignolerie", "t************e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v17, "troufignoler", "t**********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v18, "trouducune", "t********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v19, "trouduc", "t*****c");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v20, "troncher", "t******r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v21, "tocard", "t****d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v22, "tire-au-cul", "t*********l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v23, "teucha", "t****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v24, "teuch", "t***h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v25, "teubé", "t***é");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v26, "teub", "t**b");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v27, "techa", "t***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v28, "tassepé", "t*****é");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v29, "taspé", "t***é");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v30, "taré", "t**é");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v31, "tarlouze", "t******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v32, "tarlouse", "t******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v33, "tantouze", "t******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v34, "tantouserie", "t*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v35, "tafiole", "t*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v36, "taffioles", "t*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v37, "taffiole", "t******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v38, "tabarnak", "t******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v39, "tabarnac", "t******c");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v40, "sucer", "s***r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v41, "suce-boules", "s*********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v42, "sous-merde", "s********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v43, "souchienne", "s********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v44, "souchien", "s******n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v45, "shit", "s**t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v46, "sent-la-pisse", "s***********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v47, "schnouf", "s*****f");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v48, "schnoque", "s******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v49, "schnock", "s*****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v50, "schnek", "s****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v51, "schleus", "s*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v52, "schleuhs", "s******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v53, "schleuh", "s*****h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v54, "schleues", "s******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v55, "schleue", "s*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v56, "schleu", "s****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v57, "scheiße", "s*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v58, "sans-couilles", "s***********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v59, "salopes", "s*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v60, "salope", "s****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v61, "salopard", "s******d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v62, "salop", "s***p");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v63, "salauds", "s*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v64, "salaud", "s****d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v65, "sagouin", "s*****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v66, "s'archifoutre", "s***********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v67, "réenculer", "r*******r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v68, "refucker", "r******r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v69, "ras-les-fesses", "r************s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v70, "ras-le-bonbon", "r***********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v71, "ras-la-moule", "r**********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v72, "pétasses", "p******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v73, "pétasse", "p*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v74, "péquenaud", "p*******d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[6],0>(v75, "pédés", "p***s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v76, "pédé", "p**é");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v77, "putes", "p***s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v78, "pute", "p**e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v79, "putains", "p*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v80, "putain", "p****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v81, "poufiasses", "p********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v82, "poufiasse", "p*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v83, "pouffiasse", "p********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v84, "poivrot", "p*****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v85, "pogne-cul", "p*******l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v86, "pochtron", "p******n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v87, "pochetron", "p*******n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v88, "pochard", "p*****d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v89, "pissou", "p****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v90, "pisseur", "p*****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v91, "pisser", "p****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v92, "pisse-au-lit", "p**********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v93, "papier-cul", "p********l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v94, "pakis", "p***s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v95, "paki", "p**i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v96, "ostie", "o***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v97, "négros", "n****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v98, "négro", "n***o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v99, "négresses", "n*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v100, "négresse", "n******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v101, "nègres", "n****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v102, "nègre", "n***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v103, "niquer", "n****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v104, "nichons", "n*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v105, "nichon", "n****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v106, "nibard", "n****d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v107, "niaks", "n***s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v108, "niak", "n**k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v109, "merdouillard", "m**********d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v110, "merdogène", "m*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v111, "merdique", "m******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v112, "merdier", "m*****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v113, "merdicité", "m*******é");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v114, "merdeux", "m*****x");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v115, "merdes", "m****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v116, "merderie", "m******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v117, "merder", "m****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v118, "merde", "m***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v119, "merdasse", "m******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v120, "merdaillon", "m********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v121, "merdaille", "m*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v122, "mauviette", "m*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v123, "mange-merde", "m*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v124, "lèche-cul", "l*******l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v125, "lopette", "l*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v126, "jean-foutre", "j*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v127, "imbitable", "i*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v128, "imbitabilité", "i**********é");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v129, "imbaisable", "i********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v130, "gueuler", "g*****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v131, "gouines", "g*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v132, "gouine", "g****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v133, "gogol", "g***l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v134, "glaoui", "g****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v135, "glandu", "g****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v136, "glandouillou", "g**********u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v137, "glandeuse", "g*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v138, "glandeur", "g******r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v139, "garce", "g***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v140, "fucker", "f****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v141, "foutriquer", "f********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v142, "foutre", "f****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v143, "foutoir", "f*****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v144, "fouteur", "f*****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v145, "fouille-merde", "f***********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v146, "foufounette", "f*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v147, "foufounes", "f*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v148, "foufoune", "f******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v149, "foufe", "f***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v150, "foirade", "f*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v151, "fister", "f****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v152, "fiotte", "f****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v153, "filsdeputerie", "f***********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[16],0>(v154, "fils-de-puterie", "f*************e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v155, "enflure", "e*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v156, "enculés", "e*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v157, "enculées", "e******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v158, "enculée", "e*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v159, "enculé", "e****é");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v160, "enculeuse", "e*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v161, "enculeur", "e******r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v162, "enculette", "e*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v163, "enculerie", "e*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v164, "enculer", "e*****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v165, "enculement", "e********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v166, "encule", "e****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v167, "enculatoire", "e*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v168, "enculailleur", "e**********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v169, "enculage", "e******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v170, "enculagailler", "e***********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v171, "enculade", "e******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v172, "enculable", "e*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v173, "emmerdé", "e*****é");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v174, "emmerdeuse", "e********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v175, "emmerdeur", "e*******r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v176, "emmerdes", "e******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v177, "emmerder", "e******r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v178, "emmerde", "e*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[16],0>(v179, "dégueulassement", "d*************t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v180, "déconnage", "d*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v181, "déconnade", "d*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v182, "débile", "d****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v183, "duschnock", "d*******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v184, "dugland", "d*****d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v185, "ducon", "d***n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v186, "doigter", "d*****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v187, "derche", "d****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v188, "demi-molle", "d********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v189, "câlice", "c****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v190, "crétins", "c*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v191, "crétines", "c******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v192, "crétine", "c*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v193, "crétin", "c****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v194, "crotté", "c****é");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v195, "crisse", "c****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v196, "crevure", "c*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v197, "couillu", "c*****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v198, "couilles", "c******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v199, "couille", "c*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v200, "cons", "c**s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v201, "connes", "c****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v202, "conneries", "c*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v203, "connerie", "c******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v204, "conne", "c***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v205, "connasse", "c******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v206, "connards", "c******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v207, "connarde", "c******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v208, "connard", "c*****d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v209, "conchier", "c******r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v210, "conasse", "c*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v211, "cocu", "c**u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v212, "clito", "c***o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v213, "claque-merde", "c**********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v214, "chnoque", "c*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v215, "chleuhs", "c*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v216, "chleuh", "c****h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v217, "chiée", "c***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v218, "chiure", "c****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v219, "chiottes", "c******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v220, "chiotte", "c*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v221, "chintok", "c*****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v222, "chinetoque", "c********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v223, "chinetok", "c******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v224, "chinetoc", "c******c");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v225, "chieur", "c****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v226, "chier", "c***r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v227, "chiennasse", "c********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v228, "chibre", "c****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v229, "chiatique", "c*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v230, "chiasser", "c******r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v231, "chiasse", "c*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v232, "chiant", "c****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v233, "cherche-merde", "c***********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v234, "chaude-pisse", "c**********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v235, "chat-bite", "c*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v236, "catins", "c****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v237, "catin", "c***n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v238, "casse-couilles", "c************s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v239, "casse-couille", "c***********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v240, "casse-burette", "c***********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v241, "casse-bonbon", "c**********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v242, "bâtards", "b*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v243, "bâtarde", "b*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v244, "bâtard", "b****d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v245, "bâtard", "b****d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v246, "burnes", "b****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v247, "burne", "b***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v248, "brêle", "b***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v249, "broute-minou", "b**********u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v250, "brise-burnes", "b**********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v251, "branlée", "b*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v252, "branlotter", "b********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v253, "branlo", "b****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v254, "branleurs", "b*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v255, "branleur", "b******r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v256, "branlette", "b*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v257, "branler", "b*****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v258, "branle-couille", "b************e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v259, "bounioule", "b*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v260, "bounioul", "b******l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v261, "boukaks", "b*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v262, "boukak", "b****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v263, "bougnouliser", "b**********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[16],0>(v264, "bougnoulisation", "b*************n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v265, "bougnoules", "b********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v266, "bougnoule", "b*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v267, "bougnoul", "b******l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v268, "bordel", "b****l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v269, "bonnasse", "b******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v270, "bonasse", "b*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v271, "bitembois", "b*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v272, "bite", "b**e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v273, "bitch", "b***h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v274, "bifler", "b****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v275, "bifle", "b***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v276, "biffler", "b*****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v277, "biffle", "b****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v278, "bicots", "b****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v279, "bicot", "b***t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v280, "bibite", "b****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v281, "biatch", "b****h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v282, "batards", "b*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v283, "batard", "b****d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v284, "baiseur", "b*****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v285, "baise", "b***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v286, "baisable", "b******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v287, "archifoutre", "a*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v288, "alboches", "a******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v289, "alboche", "a*****e");
    std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](&siri::dialogengine::GetProfanityFilter_fr(void)::sProfanityData_fr, (uint64_t)v5, 0x11DuLL);
    for (i = 0; i != -1710; i -= 6)
      std::pair<std::string const,std::string>::~pair((uint64_t)&v289[i]);
    __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], &siri::dialogengine::GetProfanityFilter_fr(void)::sProfanityData_fr, &dword_1BF794000);
  }
  *v1 = 0;
  v1[1] = 0;
  v1[2] = 0;
  return std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(v1, siri::dialogengine::GetProfanityFilter_fr(void)::sProfanityData_fr, *(uint64_t *)algn_1EF582FD0, 0xAAAAAAAAAAAAAAABLL* ((*(_QWORD *)algn_1EF582FD0 - siri::dialogengine::GetProfanityFilter_fr(void)::sProfanityData_fr) >> 4));
}

void sub_1BFBAB650(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + 13632;
  v4 = -13680;
  do
  {
    v3 = std::pair<std::string const,std::string>::~pair(v3) - 48;
    v4 += 48;
  }
  while (v4);
  _Unwind_Resume(a1);
}

_QWORD *siri::dialogengine::GetProfanityFilter_en(siri::dialogengine *this)
{
  _QWORD *v1;
  unsigned __int8 v2;
  uint64_t i;
  _QWORD v5[6];
  _QWORD v6[6];
  _QWORD v7[6];
  _QWORD v8[6];
  _QWORD v9[6];
  _QWORD v10[6];
  _QWORD v11[6];
  _QWORD v12[6];
  _QWORD v13[6];
  _QWORD v14[6];
  _QWORD v15[6];
  _QWORD v16[6];
  _QWORD v17[6];
  _QWORD v18[6];
  _QWORD v19[6];
  _QWORD v20[6];
  _QWORD v21[6];
  _QWORD v22[6];
  _QWORD v23[6];
  _QWORD v24[6];
  _QWORD v25[6];
  _QWORD v26[6];
  _QWORD v27[6];
  _QWORD v28[6];
  _QWORD v29[6];
  _QWORD v30[6];
  _QWORD v31[6];
  _QWORD v32[6];
  _QWORD v33[6];
  _QWORD v34[6];
  _QWORD v35[6];
  _QWORD v36[6];
  _QWORD v37[6];
  _QWORD v38[6];
  _QWORD v39[6];
  _QWORD v40[6];
  _QWORD v41[6];
  _QWORD v42[6];
  _QWORD v43[6];
  _QWORD v44[6];
  _QWORD v45[6];
  _QWORD v46[6];
  _QWORD v47[6];
  _QWORD v48[6];
  _QWORD v49[6];
  _QWORD v50[6];
  _QWORD v51[6];
  _QWORD v52[6];
  _QWORD v53[6];
  _QWORD v54[6];
  _QWORD v55[6];
  _QWORD v56[6];
  _QWORD v57[6];
  _QWORD v58[6];
  _QWORD v59[6];
  _QWORD v60[6];
  _QWORD v61[6];
  _QWORD v62[6];
  _QWORD v63[6];
  _QWORD v64[6];
  _QWORD v65[6];
  _QWORD v66[6];
  _QWORD v67[6];
  _QWORD v68[6];
  _QWORD v69[6];
  _QWORD v70[6];
  _QWORD v71[6];
  _QWORD v72[6];
  _QWORD v73[6];
  _QWORD v74[6];
  _QWORD v75[6];
  _QWORD v76[6];
  _QWORD v77[6];
  _QWORD v78[6];
  _QWORD v79[6];
  _QWORD v80[6];
  _QWORD v81[6];
  _QWORD v82[6];
  _QWORD v83[6];
  _QWORD v84[6];
  _QWORD v85[6];
  _QWORD v86[6];
  _QWORD v87[6];
  _QWORD v88[6];
  _QWORD v89[6];
  _QWORD v90[6];
  _QWORD v91[6];
  _QWORD v92[6];
  _QWORD v93[6];
  _QWORD v94[6];
  _QWORD v95[6];
  _QWORD v96[6];
  _QWORD v97[6];
  _QWORD v98[6];
  _QWORD v99[6];
  _QWORD v100[6];
  _QWORD v101[6];
  _QWORD v102[6];
  _QWORD v103[6];
  _QWORD v104[6];
  _QWORD v105[6];
  _QWORD v106[6];
  _QWORD v107[6];
  _QWORD v108[6];
  _QWORD v109[6];
  _QWORD v110[6];
  _QWORD v111[6];
  _QWORD v112[6];
  _QWORD v113[6];
  _QWORD v114[6];
  _QWORD v115[6];
  _QWORD v116[6];
  _QWORD v117[6];
  _QWORD v118[6];
  _QWORD v119[6];
  _QWORD v120[6];
  _QWORD v121[6];
  _QWORD v122[6];
  _QWORD v123[6];
  _QWORD v124[6];
  _QWORD v125[6];
  _QWORD v126[6];
  _QWORD v127[6];
  _QWORD v128[6];
  _QWORD v129[6];
  _QWORD v130[6];
  _QWORD v131[6];
  _QWORD v132[6];
  _QWORD v133[6];
  _QWORD v134[6];
  _QWORD v135[6];
  _QWORD v136[6];
  _QWORD v137[6];
  _QWORD v138[6];
  _QWORD v139[6];
  _QWORD v140[6];
  _QWORD v141[6];
  _QWORD v142[6];
  _QWORD v143[6];
  _QWORD v144[6];
  _QWORD v145[6];
  _QWORD v146[6];
  _QWORD v147[6];
  _QWORD v148[6];
  _QWORD v149[6];
  _QWORD v150[6];
  _QWORD v151[6];
  _QWORD v152[6];
  _QWORD v153[6];
  _QWORD v154[6];
  _QWORD v155[6];
  _QWORD v156[6];
  _QWORD v157[6];
  _QWORD v158[6];
  _QWORD v159[6];
  _QWORD v160[6];
  _QWORD v161[6];
  _QWORD v162[6];
  _QWORD v163[6];
  _QWORD v164[6];
  _QWORD v165[6];
  _QWORD v166[6];
  _QWORD v167[6];
  _QWORD v168[6];
  _QWORD v169[6];
  _QWORD v170[6];
  _QWORD v171[6];
  _QWORD v172[6];
  _QWORD v173[6];
  _QWORD v174[6];
  _QWORD v175[6];
  _QWORD v176[6];
  _QWORD v177[6];
  _QWORD v178[6];
  _QWORD v179[6];
  _QWORD v180[6];
  _QWORD v181[6];
  _QWORD v182[6];
  _QWORD v183[6];
  _QWORD v184[6];
  _QWORD v185[6];
  _QWORD v186[6];
  _QWORD v187[6];
  _QWORD v188[6];
  _QWORD v189[6];
  _QWORD v190[6];
  _QWORD v191[6];
  _QWORD v192[6];
  _QWORD v193[6];
  _QWORD v194[6];
  _QWORD v195[6];
  _QWORD v196[6];
  _QWORD v197[6];
  _QWORD v198[6];
  _QWORD v199[6];
  _QWORD v200[6];
  _QWORD v201[6];
  _QWORD v202[6];
  _QWORD v203[6];
  _QWORD v204[6];
  _QWORD v205[6];
  _QWORD v206[6];
  _QWORD v207[6];
  _QWORD v208[6];
  _QWORD v209[6];
  _QWORD v210[6];
  _QWORD v211[6];
  _QWORD v212[6];
  _QWORD v213[6];
  _QWORD v214[6];
  _QWORD v215[6];
  _QWORD v216[6];
  _QWORD v217[6];
  _QWORD v218[6];
  _QWORD v219[6];
  _QWORD v220[6];
  _QWORD v221[6];
  _QWORD v222[6];
  _QWORD v223[6];
  _QWORD v224[6];
  _QWORD v225[6];
  _QWORD v226[6];
  _QWORD v227[6];
  _QWORD v228[6];
  _QWORD v229[6];
  _QWORD v230[6];
  _QWORD v231[6];
  _QWORD v232[6];
  _QWORD v233[6];
  _QWORD v234[6];
  _QWORD v235[6];
  _QWORD v236[6];
  _QWORD v237[6];
  _QWORD v238[6];
  _QWORD v239[6];
  _QWORD v240[6];
  _QWORD v241[6];
  _QWORD v242[6];
  _QWORD v243[6];
  _QWORD v244[6];
  _QWORD v245[6];
  _QWORD v246[6];
  _QWORD v247[6];
  _QWORD v248[6];
  _QWORD v249[6];
  _QWORD v250[6];
  _QWORD v251[6];
  _QWORD v252[6];
  _QWORD v253[6];
  _QWORD v254[6];
  _QWORD v255[6];
  _QWORD v256[6];
  _QWORD v257[6];
  _QWORD v258[6];
  _QWORD v259[6];
  _QWORD v260[6];
  _QWORD v261[6];
  _QWORD v262[6];
  _QWORD v263[6];
  _QWORD v264[6];
  _QWORD v265[6];
  _QWORD v266[6];
  _QWORD v267[6];
  _QWORD v268[6];
  _QWORD v269[6];
  _QWORD v270[6];
  _QWORD v271[6];
  _QWORD v272[6];
  _QWORD v273[6];
  _QWORD v274[6];
  _QWORD v275[6];
  _QWORD v276[6];
  _QWORD v277[6];
  _QWORD v278[6];
  _QWORD v279[6];
  _QWORD v280[6];
  _QWORD v281[6];
  _QWORD v282[6];
  _QWORD v283[6];
  _QWORD v284[6];
  _QWORD v285[6];
  _QWORD v286[6];
  _QWORD v287[6];
  _QWORD v288[6];
  _QWORD v289[6];
  _QWORD v290[6];
  _QWORD v291[6];
  _QWORD v292[6];
  _QWORD v293[6];
  _QWORD v294[6];
  _QWORD v295[6];
  _QWORD v296[6];
  _QWORD v297[6];
  _QWORD v298[6];
  _QWORD v299[6];
  _QWORD v300[6];
  _QWORD v301[6];
  _QWORD v302[6];
  _QWORD v303[6];
  _QWORD v304[6];
  _QWORD v305[6];
  _QWORD v306[6];
  _QWORD v307[6];
  _QWORD v308[6];
  _QWORD v309[6];
  _QWORD v310[6];
  _QWORD v311[6];
  _QWORD v312[6];
  _QWORD v313[6];
  _QWORD v314[6];
  _QWORD v315[6];
  _QWORD v316[6];
  _QWORD v317[6];
  _QWORD v318[6];
  _QWORD v319[6];
  _QWORD v320[6];
  _QWORD v321[6];
  _QWORD v322[6];
  _QWORD v323[6];
  _QWORD v324[6];
  _QWORD v325[6];
  _QWORD v326[6];
  _QWORD v327[6];
  _QWORD v328[6];
  _QWORD v329[6];
  _QWORD v330[6];
  _QWORD v331[6];
  _QWORD v332[6];
  _QWORD v333[6];
  _QWORD v334[6];
  _QWORD v335[6];
  _QWORD v336[6];
  _QWORD v337[6];
  _QWORD v338[6];
  _QWORD v339[6];
  _QWORD v340[6];
  _QWORD v341[6];
  _QWORD v342[6];
  _QWORD v343[6];
  _QWORD v344[6];
  _QWORD v345[6];
  _QWORD v346[6];
  _QWORD v347[6];
  _QWORD v348[6];
  _QWORD v349[6];
  _QWORD v350[6];
  _QWORD v351[6];
  _QWORD v352[6];
  _QWORD v353[7];

  v1 = (_QWORD *)MEMORY[0x1E0C80A78](this);
  v353[6] = *MEMORY[0x1E0C80C00];
  if ((v2 & 1) == 0
  {
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v5, "wops'", "w***'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v6, "wops", "w*ps");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v7, "wop's", "w**'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v8, "whore", "w**re");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v9, "whops", "w**ps");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v10, "whop", "w**p");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v11, "whiteys", "w****ys");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v12, "whitey's", "w*****'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v13, "wetbacks'", "w*******'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v14, "wetbacks", "w*****ks");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v15, "wetback's", "w******'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v16, "wetback", "w*****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v17, "wanks", "w**ks");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v18, "wanking", "w***ing");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v19, "wankers'", "w******'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v20, "wankers", "w***ers");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v21, "wanker's", "w*****'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v22, "wanker", "w***er");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v23, "wanked", "w***ed");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v24, "wank", "w**k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v25, "vags", "v*gs");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v26, "vag", "v*g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v27, "unfucking", "u*******g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v28, "unfucked", "u******d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v29, "unfuck", "u****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v30, "twats'", "t****'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v31, "twats", "t**ts");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v32, "twat's", "t***'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v33, "twat", "t**t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v34, "thots'", "t**ts'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v35, "thots", "t**ts");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v36, "thot's", "t**t's");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v37, "thot", "t**t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v38, "suck my dick", "s**********k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v39, "spics'", "s****'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v40, "spics", "s**cs");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v41, "spic's", "s***'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v42, "spic", "s**c");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v43, "sluts", "s***s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v44, "slut", "s**t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v45, "shitty", "s****y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v46, "shitting", "s****ing");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v47, "shittiest", "s*******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v48, "shittier", "s*****er");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v49, "shitters'", "s*******'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v50, "shitters", "s****ers");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v51, "shitter's", "s******'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v52, "shitter", "s****er");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v53, "shitted", "s****ed");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v54, "shitstorms'", "s*********'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v55, "shitstorms", "s*******ms");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v56, "shitstorm's", "s********'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v57, "shitstorm", "s*******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v58, "shits'", "s****'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v59, "shits", "s**ts");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v60, "shitloads'", "s********'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v61, "shitloads", "s******ds");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v62, "shitload's", "s*******'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v63, "shitload", "s******d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v64, "shitless", "s*****ss");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v65, "shitholes", "s******es");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v66, "shithole", "s******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v67, "shithead", "s******d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v68, "shitfuckers'", "s**********'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v69, "shitfuckers", "s*********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v70, "shitfucker's", "s**********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v71, "shitfucker", "s********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v72, "shitfaced", "s******ed");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v73, "shitface", "s******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v74, "shit's", "s***'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v75, "shit", "s**t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v76, "shat", "s**t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v77, "sambos'", "s*****'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v78, "sambos", "s***os");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v79, "sambo's", "s****'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v80, "sambo", "s***o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v81, "rimjobs'", "r******'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v82, "rimjobs", "r****bs");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v83, "rimjob's", "r*****'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v84, "rimjob", "r****b");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v85, "ragheads'", "r*******'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v86, "ragheads", "r*****ds");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v87, "raghead's", "r******'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v88, "raghead", "r*****d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v89, "queerfuckers'", "q***********'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v90, "queerfuckers", "q**********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v91, "queerfucker's", "q***********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v92, "queerfucker", "q*********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v93, "pussy's", "p****'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v94, "pussy", "p***y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v95, "pussies'", "p******'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v96, "pussies", "p****es");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v97, "penises", "p******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v98, "penis", "p***s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v99, "penes", "p***s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v100, "pakis'", "p****'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v101, "pakis", "p**is");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v102, "paki's", "p***'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v103, "paki", "p**i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v104, "niggers'", "n******'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v105, "niggers", "n***ers");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v106, "nigger's", "n*****'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v107, "nigger", "n***er");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v108, "nigga", "n***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v109, "motherfucks'", "m**********'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v110, "motherfucks", "m********ks");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v111, "motherfucking", "m*********ing");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v112, "motherfuckers'", "m************'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v113, "motherfuckers", "m*********ers");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v114, "motherfucker's", "m***********'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v115, "motherfucker", "m*********er");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v116, "motherfucked", "m*********ed");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v117, "motherfuck's", "m*********'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v118, "motherfuck", "m********k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[13],0>(v119, "mother fucker", "m*********er");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v120, "mofo", "m**o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v121, "mindfucks'", "m********'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v122, "mindfucks", "m******ks");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v123, "mindfucking", "m*******ing");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v124, "mindfuckers'", "m**********'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v125, "mindfuckers", "m*******ers");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v126, "mindfucker's", "m*********'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v127, "mindfucker", "m*******er");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v128, "mindfucked", "m*******ed");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v129, "mindfuck's", "m*******'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v130, "mindfuck", "m******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v131, "lesbos'", "l*****'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v132, "lesbos", "l***os");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v133, "lesbo's", "l****'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v134, "lesbo", "l***o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v135, "krauts", "k***ts");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v136, "kraut", "k***t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v137, "kikes'", "k****'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v138, "kikes", "k**es");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v139, "kike's", "k***'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v140, "kike", "k**e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v141, "kaffirs'", "k******'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v142, "kaffirs", "k****rs");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v143, "kaffir's", "k*****'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v144, "kaffir", "k****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v145, "jizz", "j**z");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v146, "jerkoffs'", "j*******'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v147, "jerkoffs", "j*****fs");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v148, "jerkoff's", "j******'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v149, "jerkoff", "j*****f");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v150, "japs'", "j***'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v151, "japs", "j*ps");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v152, "jap's", "j**'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v153, "jap", "j*p");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v154, "injuns'", "i*****'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v155, "injuns", "i***ns");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v156, "injun's", "i****'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v157, "injun", "i***n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v158, "hymies'", "h*****'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v159, "hymies", "h***es");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v160, "hymie's", "h****'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v161, "hymie", "h***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v162, "horseshits", "h*******ts");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v163, "horseshit's", "h********'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v164, "horseshit", "h*******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v165, "honky's", "h****'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v166, "honkies", "h****es");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v167, "homos'", "h****'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v168, "homos", "h**os");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v169, "homo's", "h***'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v170, "handjobs'", "h*******'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v171, "handjobs", "h*****bs");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v172, "handjob's", "h******'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v173, "handjob", "h*****b");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v174, "gringos", "g****os");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v175, "gringo", "g****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v176, "gooks'", "g****'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v177, "gooks", "g**ks");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v178, "gook's", "g***'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v179, "gook", "g**k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v180, "goddamnit", "g*******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v181, "goddamned", "g******ed");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v182, "goddamn", "g*****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v183, "goddammit", "g*******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v184, "goddam", "g****m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v185, "gangbangs'", "g********'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v186, "gangbangs", "g******gs");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v187, "gangbangers'", "g**********'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v188, "gangbangers", "g*******ers");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v189, "gangbanger's", "g*********'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v190, "gangbanger", "g*******er");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v191, "gangbang's", "g*******'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v192, "gangbang", "g******g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v193, "fuckwad", "f*****d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v194, "fucks'", "f****'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v195, "fucks", "f**ks");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v196, "fucking", "f***ing");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v197, "fuckin", "f****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v198, "fuckfaces'", "f********'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v199, "fuckfaces", "f******es");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v200, "fuckface's", "f*******'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v201, "fuckface", "f******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v202, "fuckers", "f***ers");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v203, "fucker", "f***er");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v204, "fucked", "f***ed");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v205, "fuckable", "f******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v206, "fuck's", "f***'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v207, "fuck", "f**k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v208, "fags", "f*gs");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v209, "faggots'", "f******'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v210, "faggots", "f****ts");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v211, "faggot's", "f*****'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v212, "faggot", "f****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v213, "fag", "f*g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v214, "dicksuckers", "d*********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v215, "dicksucker'", "d*********'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v216, "dicksucker", "d********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v217, "dickheads", "d*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v218, "dickhead", "d******d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v219, "dickfuckers'", "d**********'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v220, "dickfuckers", "d*********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v221, "dickfucker's", "d**********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v222, "dickfucker", "d********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v223, "darky's", "d****'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v224, "darky", "d***y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v225, "darkies'", "d******'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v226, "darkies", "d****es");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v227, "darkie's", "d*****'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v228, "darkie", "d****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v229, "dagos'", "d****'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v230, "dagos", "d**os");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v231, "dagoes", "d***es");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v232, "dago's", "d***'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v233, "dago", "d**o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v234, "cunty", "c***y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v235, "cunts'", "c****'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v236, "cunts", "c**ts");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v237, "cunt's", "c***'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v238, "cunt", "c**t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v239, "cums'", "c***'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v240, "cums", "c*ms");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v241, "cumming", "c***ing");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v242, "cum's", "c**'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v243, "cum", "c*m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v244, "coons'", "c****'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v245, "coons", "c**ns");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v246, "coon's", "c***'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v247, "coon", "c**n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v248, "coolies'", "c******'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v249, "coolies", "c****es");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v250, "coolie's", "c*****'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v251, "coolie", "c****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v252, "cocksuckers'", "c**********'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v253, "cocksuckers", "c*******ers");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v254, "cocksucker's", "c*********'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v255, "cocksucker", "c*******er");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v256, "cocks", "c***s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v257, "cockfuckers'", "c**********'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v258, "cockfuckers", "c*********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v259, "cockfucker's", "c**********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v260, "cockfucker", "c********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v261, "cock suckers'", "c***********'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v262, "cock suckers", "c********ers");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v263, "cock sucker's", "c**********'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v264, "cock sucker", "c********er");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v265, "cock", "c**k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v266, "clusterfucks", "c**********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v267, "clusterfuck", "c*********k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v268, "clits'", "c****'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v269, "clits", "c**ts");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v270, "clit's", "c***'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v271, "clit", "c**t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v272, "chode", "c***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v273, "choad", "c***d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v274, "chinky", "c****y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v275, "chinks'", "c*****'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v276, "chinks", "c***ks");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v277, "chink's", "c****'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v278, "chink", "c***k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v279, "chinamen", "c*****en");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v280, "chinaman", "c******n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v281, "chickenshits", "c*********ts");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v282, "chickenshit", "c*********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v283, "buttfucks'", "b********'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v284, "buttfucks", "b******ks");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v285, "buttfucking", "b*******ing");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v286, "buttfuckers'", "b**********'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v287, "buttfuckers", "b*******ers");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v288, "buttfucker's", "b*********'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v289, "buttfucker", "b*******er");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v290, "buttfucked", "b*******ed");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v291, "buttfuck's", "b*******'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v292, "buttfuck", "b******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v293, "bullshitting", "b********ing");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v294, "bullshitted", "b********ed");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v295, "bullshits", "b******ts");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v296, "bullshit", "b******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v297, "brainfucks'", "b*********'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v298, "brainfucks", "b*******ks");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v299, "brainfucking", "b********ing");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v300, "brainfuckers'", "b***********'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v301, "brainfuckers", "b********ers");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v302, "brainfucker's", "b**********'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v303, "brainfucker", "b********er");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v304, "brainfucked", "b********ed");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v305, "brainfuck's", "b********'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v306, "brainfuck", "b*******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v307, "blowjobs'", "b*******'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v308, "blowjobs", "b*****bs");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v309, "blowjob's", "b******'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v310, "blowjob", "b*****b");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v311, "blow job", "b*****b");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v312, "bitches", "b*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v313, "bitch", "b***h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v314, "beefcurtains", "b**********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[13],0>(v315, "beef curtains", "b**********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v316, "beaners'", "b******'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v317, "beaners", "b***ers");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v318, "beaner's", "b*****'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v319, "beaner", "b***er");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v320, "batshits", "b*****ts");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v321, "batshit", "b*****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v322, "bastards", "b******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v323, "bastard's", "b*****'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v324, "bastard", "b*****d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v325, "assholes'", "a*******'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v326, "assholes", "a*****es");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v327, "asshole's", "a******'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v328, "asshole", "a*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v329, "assfucks'", "a*******'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v330, "assfucks", "a*****ks");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v331, "assfucking", "a******ing");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v332, "assfuckers'", "a*********'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v333, "assfuckers", "a******ers");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v334, "assfucker's", "a********'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v335, "assfucker", "a******er");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v336, "assfucked", "a******ed");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v337, "assfuck's", "a******'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v338, "assfuck", "a*****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v339, "arseholes'", "a********'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v340, "arseholes", "a*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v341, "arsehole's", "a*******'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v342, "arsehole", "a******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v343, "arsefucks'", "a********'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v344, "arsefucks", "a*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v345, "arsefucking", "a*********g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v346, "arsefuckers'", "a**********'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v347, "arsefuckers", "a*********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v348, "arsefucker's", "a*********'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v349, "arsefucker", "a********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v350, "arsefucked", "a********d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v351, "arsefuck's", "a*******'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v352, "arsefuck", "a******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v353, "apeshit", "a*****t");
    std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](siri::dialogengine::GetProfanityFilter_en(void)::sProfanityData_en, (uint64_t)v5, 0x15DuLL);
    for (i = 0; i != -2094; i -= 6)
      std::pair<std::string const,std::string>::~pair((uint64_t)&v353[i]);
    __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], siri::dialogengine::GetProfanityFilter_en(void)::sProfanityData_en, &dword_1BF794000);
  }
  *v1 = 0;
  v1[1] = 0;
  v1[2] = 0;
  return std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(v1, siri::dialogengine::GetProfanityFilter_en(void)::sProfanityData_en[0], unk_1EF580BA0, 0xAAAAAAAAAAAAAAABLL* ((unk_1EF580BA0 - siri::dialogengine::GetProfanityFilter_en(void)::sProfanityData_en[0]) >> 4));
}

void sub_1BFBAE4E0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + 16704;
  v4 = -16752;
  do
  {
    v3 = std::pair<std::string const,std::string>::~pair(v3) - 48;
    v4 += 48;
  }
  while (v4);
  _Unwind_Resume(a1);
}

_QWORD *siri::dialogengine::GetProfanityFilter_th(siri::dialogengine *this)
{
  _QWORD *v1;
  unsigned __int8 v2;
  uint64_t i;
  _QWORD v5[6];
  _QWORD v6[6];
  _QWORD v7[6];
  _QWORD v8[6];
  _QWORD v9[6];
  _QWORD v10[6];
  _QWORD v11[6];
  _QWORD v12[6];
  _QWORD v13[6];
  _QWORD v14[6];
  _QWORD v15[6];
  _QWORD v16[6];
  _QWORD v17[6];
  _QWORD v18[6];
  _QWORD v19[6];
  _QWORD v20[6];
  _QWORD v21[6];
  _QWORD v22[6];
  _QWORD v23[6];
  _QWORD v24[6];
  _QWORD v25[6];
  _QWORD v26[6];
  _QWORD v27[6];
  _QWORD v28[6];
  _QWORD v29[6];
  _QWORD v30[6];
  _QWORD v31[6];
  _QWORD v32[6];
  _QWORD v33[6];
  _QWORD v34[6];
  _QWORD v35[6];
  _QWORD v36[6];
  _QWORD v37[6];
  _QWORD v38[6];
  _QWORD v39[6];
  _QWORD v40[6];
  _QWORD v41[6];
  _QWORD v42[6];
  _QWORD v43[6];
  _QWORD v44[6];
  _QWORD v45[6];
  _QWORD v46[6];
  _QWORD v47[6];
  _QWORD v48[6];
  _QWORD v49[6];
  _QWORD v50[6];
  _QWORD v51[6];
  _QWORD v52[6];
  _QWORD v53[6];
  _QWORD v54[6];
  _QWORD v55[6];
  _QWORD v56[6];
  _QWORD v57[6];
  _QWORD v58[6];
  _QWORD v59[6];
  _QWORD v60[6];
  _QWORD v61[6];
  _QWORD v62[6];
  _QWORD v63[6];
  _QWORD v64[6];
  _QWORD v65[6];
  _QWORD v66[6];
  _QWORD v67[6];
  _QWORD v68[6];
  _QWORD v69[6];
  _QWORD v70[6];
  _QWORD v71[6];
  _QWORD v72[6];
  _QWORD v73[6];
  _QWORD v74[6];
  _QWORD v75[6];
  _QWORD v76[6];
  _QWORD v77[6];
  _QWORD v78[6];
  _QWORD v79[6];
  _QWORD v80[6];
  _QWORD v81[6];
  _QWORD v82[6];
  _QWORD v83[6];
  _QWORD v84[6];
  _QWORD v85[6];
  _QWORD v86[6];
  _QWORD v87[6];
  _QWORD v88[6];
  _QWORD v89[6];
  _QWORD v90[6];
  _QWORD v91[6];
  _QWORD v92[6];
  _QWORD v93[6];
  _QWORD v94[6];
  _QWORD v95[6];
  _QWORD v96[6];
  _QWORD v97[6];
  _QWORD v98[6];
  _QWORD v99[6];
  _QWORD v100[6];
  _QWORD v101[6];
  _QWORD v102[6];
  _QWORD v103[6];
  _QWORD v104[6];
  _QWORD v105[6];
  _QWORD v106[6];
  _QWORD v107[6];
  _QWORD v108[6];
  _QWORD v109[6];
  _QWORD v110[6];
  _QWORD v111[6];
  _QWORD v112[6];
  _QWORD v113[6];
  _QWORD v114[6];
  _QWORD v115[6];
  _QWORD v116[6];
  _QWORD v117[6];
  _QWORD v118[6];
  _QWORD v119[6];
  _QWORD v120[6];
  _QWORD v121[6];
  _QWORD v122[6];
  _QWORD v123[6];
  _QWORD v124[6];
  _QWORD v125[6];
  _QWORD v126[6];
  _QWORD v127[6];
  _QWORD v128[6];
  _QWORD v129[6];
  _QWORD v130[6];
  _QWORD v131[6];
  _QWORD v132[7];

  v1 = (_QWORD *)MEMORY[0x1E0C80A78](this);
  v132[6] = *MEMORY[0x1E0C80C00];
  if ((v2 & 1) == 0
  {
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[10],0>(v5, "ไอ้ไพร่", "ไ******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[28],char const(&)[12],0>(v6, "ไอ้เห็ดสด", "ไ********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[11],0>(v7, "ไอ้เหี้ย", "ไ*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[11],0>(v8, "ไอ้เชี่ย", "ไ*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[28],char const(&)[12],0>(v9, "ไอ้เชรี่ย", "ไ********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[9],0>(v10, "ไอ้ห่า", "ไ*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[11],0>(v11, "ไอ้สัตว์", "ไ*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[9],0>(v12, "ไอ้สัด", "ไ*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[28],char const(&)[12],0>(v13, "ไอ้ดอกทอง", "ไ********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[9],0>(v14, "ไอ้จู๋", "ไ*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[7],0>(v15, "ไอสัศ", "ไ***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v16, "โม๊ก", "โ***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[11],0>(v17, "โครตแม่ง", "โ*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[43],char const(&)[17],0>(v18, "โครตพ่อโครตแม่", "โ*************");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[10],0>(v19, "โครตพ่อ", "โ******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[10],0>(v20, "โคตรแม่", "โ******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[10],0>(v21, "โคตรพ่อ", "โ******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v22, "โคตร", "โ***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[9],0>(v23, "โคดพ่อ", "โ*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[10],0>(v24, "แย่เม็ด", "แ******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[31],char const(&)[13],0>(v25, "แม่เมิงตาย", "แ*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[10],0>(v26, "แม่เมิง", "แ******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[28],char const(&)[12],0>(v27, "แม่มึงตาย", "แ********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[28],char const(&)[12],0>(v28, "แม่มรึงสิ", "แ********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[31],char const(&)[13],0>(v29, "แม่มรึงตาย", "แ*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[10],0>(v30, "แม่งตาย", "แ******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v31, "แม่ง", "แ***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v32, "แตด", "แ**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v33, "แดก", "แ**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[9],0>(v34, "เหี้ยๆ", "เ*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v35, "เหี้ย", "เ****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v36, "เหียก", "เ****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v37, "เสือก", "เ****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[10],0>(v38, "เวรตะไล", "เ******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v39, "เย๊ด", "เ***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v40, "เย้ด", "เ***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v41, "เย็ท", "เ***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[10],0>(v42, "เย็ดโด้", "เ******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[11],0>(v43, "เย็ดแม่ง", "เ*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[10],0>(v44, "เย็ดแม่", "เ******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[11],0>(v45, "เย็ดเด็ก", "เ*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v46, "เย็ด", "เ***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[9],0>(v47, "เชี่ยๆ", "เ*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v48, "เชี่ย", "เ****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[10],0>(v49, "เชรี่ยๆ", "เ******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[9],0>(v50, "เชรี่ย", "เ*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[9],0>(v51, "เงี่ยน", "เ*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[9],0>(v52, "อีไพร่", "อ*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[11],0>(v53, "อีเห็ดสด", "อ*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v54, "อีเวร", "อ****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v55, "อีเวน", "อ****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v56, "อีเลว", "อ****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[11],0>(v57, "อีห่าราก", "อ*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v58, "อีห่า", "อ****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v59, "อีสัส", "อ****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[10],0>(v60, "อีสัตว์", "อ******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v61, "อีบ้า", "อ****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[9],0>(v62, "อีตุ๊ด", "อ*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v63, "อีตัว", "อ****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v64, "อีดำ", "อ***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[11],0>(v65, "อีดอกทอง", "อ*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v66, "อีดอก", "อ****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[11],0>(v67, "อีกะหรี่", "อ*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[11],0>(v68, "อิ่เหี้ย", "อ*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[11],0>(v69, "อิ่เชี่ย", "อ*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[28],char const(&)[12],0>(v70, "อิ่เชรี่ย", "อ********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[9],0>(v71, "ห่าราก", "ห*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v72, "หีแตด", "ห****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[11],0>(v73, "หีระเบิด", "ห*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v74, "หีบาน", "ห****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v75, "หี", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v76, "หำ", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[9],0>(v77, "หัวควย", "ห*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[28],char const(&)[12],0>(v78, "หอยรุงรัง", "ห********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[31],char const(&)[13],0>(v79, "หมาสี้แม่ง", "ห*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v80, "หมอย", "ห***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[28],char const(&)[12],0>(v81, "หน้าเหี้ย", "ห********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[31],char const(&)[13],0>(v82, "หน้าเหรี้ย", "ห*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[11],0>(v83, "หน้าเม็ด", "ห*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[28],char const(&)[12],0>(v84, "หน้าเชี่ย", "ห********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[31],char const(&)[13],0>(v85, "หน้าเชรี่ย", "ห*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[9],0>(v86, "หน้าหี", "ห*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[10],0>(v87, "หน้าหรี", "ห******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[34],char const(&)[14],0>(v88, "หน้าตัวเมีย", "ห**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[46],char const(&)[18],0>(v89, "หน้าควายตัวเมีย", "ห**************");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v90, "หงี่", "ห***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[9],0>(v91, "ส้นตีน", "ส*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[10],0>(v92, "สาดเอ๊ย", "ส******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[10],0>(v93, "สาดเอ้ย", "ส******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[9],0>(v94, "สาดหมา", "ส*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v95, "สัส", "ส**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[31],char const(&)[13],0>(v96, "สันดานไพร่", "ส*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[28],char const(&)[12],0>(v97, "สันดานหมา", "ส********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[50],char const(&)[20],0>(v98, "สมองหมา ปัญญาควาย", "ส****************");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[9],0>(v99, "ยัดแม่", "ย*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[28],char const(&)[12],0>(v100, "ยักสุเน็ต", "ย********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v101, "มึง", "ม**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v102, "ฟักยู", "ฟ****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[31],char const(&)[13],0>(v103, "พ่อเมิงตาย", "พ*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[10],0>(v104, "พ่อเมิง", "พ******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[28],char const(&)[12],0>(v105, "พ่อมึงตาย", "พ********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[28],char const(&)[12],0>(v106, "พ่อมรึงสิ", "พ********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[31],char const(&)[13],0>(v107, "พ่อมรึงตาย", "พ*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[10],0>(v108, "พ่องตาย", "พ******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v109, "พ่อง", "พ***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v110, "ปี้", "ป**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v111, "ปิ๊", "ป**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[11],0>(v112, "ตัวเหี้ย", "ต*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[11],0>(v113, "ตัวเชี่ย", "ต*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[28],char const(&)[12],0>(v114, "ตัวเชรี่ย", "ต********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v115, "ดาก", "ด**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[9],0>(v116, "ชิบหาย", "ช*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[31],char const(&)[13],0>(v117, "ชิงหมาเกิด", "ช*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[10],0>(v118, "ชาติหมา", "ช******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[11],0>(v119, "ชาติชั่ว", "ช*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v120, "จู๋", "จ**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v121, "จันไร", "จ****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v122, "จัญไร", "จ****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[9],0>(v123, "คุณตัว", "ค*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[9],0>(v124, "ควยถอก", "ค*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v125, "ควย", "ค**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[9],0>(v126, "ขี้ตีน", "ข*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[28],char const(&)[12],0>(v127, "ขี้ดากหมา", "ข********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v128, "กู", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v129, "กวย", "ก**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[28],char const(&)[12],0>(v130, "กวนส้นตีน", "ก********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[10],0>(v131, "กระเด้า", "ก******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[28],char const(&)[13],0>(v132, "กรรมของกู", "ก*********");
    std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](&siri::dialogengine::GetProfanityFilter_th(void)::sProfanityData_th, (uint64_t)v5, 0x80uLL);
    for (i = 0; i != -768; i -= 6)
      std::pair<std::string const,std::string>::~pair((uint64_t)&v132[i]);
    __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], &siri::dialogengine::GetProfanityFilter_th(void)::sProfanityData_th, &dword_1BF794000);
  }
  *v1 = 0;
  v1[1] = 0;
  v1[2] = 0;
  return std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(v1, siri::dialogengine::GetProfanityFilter_th(void)::sProfanityData_th, *(uint64_t *)algn_1EF582FF0, 0xAAAAAAAAAAAAAAABLL* ((*(_QWORD *)algn_1EF582FF0 - siri::dialogengine::GetProfanityFilter_th(void)::sProfanityData_th) >> 4));
}

void sub_1BFBAF618(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + 6096;
  v4 = -6144;
  do
  {
    v3 = std::pair<std::string const,std::string>::~pair(v3) - 48;
    v4 += 48;
  }
  while (v4);
  _Unwind_Resume(a1);
}

_QWORD *siri::dialogengine::GetProfanityFilter_tr(siri::dialogengine *this)
{
  _QWORD *v1;
  unsigned __int8 v2;
  uint64_t i;
  _QWORD v5[6];
  _QWORD v6[6];
  _QWORD v7[6];
  _QWORD v8[6];
  _QWORD v9[6];
  _QWORD v10[6];
  _QWORD v11[6];
  _QWORD v12[6];
  _QWORD v13[6];
  _QWORD v14[6];
  _QWORD v15[6];
  _QWORD v16[6];
  _QWORD v17[6];
  _QWORD v18[6];
  _QWORD v19[6];
  _QWORD v20[6];
  _QWORD v21[6];
  _QWORD v22[6];
  _QWORD v23[6];
  _QWORD v24[6];
  _QWORD v25[6];
  _QWORD v26[6];
  _QWORD v27[6];
  _QWORD v28[6];
  _QWORD v29[6];
  _QWORD v30[6];
  _QWORD v31[6];
  _QWORD v32[6];
  _QWORD v33[6];
  _QWORD v34[6];
  _QWORD v35[6];
  _QWORD v36[6];
  _QWORD v37[6];
  _QWORD v38[6];
  _QWORD v39[6];
  _QWORD v40[6];
  _QWORD v41[6];
  _QWORD v42[6];
  _QWORD v43[6];
  _QWORD v44[6];
  _QWORD v45[6];
  _QWORD v46[6];
  _QWORD v47[6];
  _QWORD v48[6];
  _QWORD v49[6];
  _QWORD v50[6];
  _QWORD v51[6];
  _QWORD v52[6];
  _QWORD v53[6];
  _QWORD v54[6];
  _QWORD v55[6];
  _QWORD v56[6];
  _QWORD v57[6];
  _QWORD v58[6];
  _QWORD v59[6];
  _QWORD v60[6];
  _QWORD v61[6];
  _QWORD v62[6];
  _QWORD v63[6];
  _QWORD v64[6];
  _QWORD v65[6];
  _QWORD v66[6];
  _QWORD v67[6];
  _QWORD v68[6];
  _QWORD v69[6];
  _QWORD v70[6];
  _QWORD v71[6];
  _QWORD v72[6];
  _QWORD v73[6];
  _QWORD v74[6];
  _QWORD v75[6];
  _QWORD v76[6];
  _QWORD v77[6];
  _QWORD v78[6];
  _QWORD v79[6];
  _QWORD v80[6];
  _QWORD v81[6];
  _QWORD v82[6];
  _QWORD v83[6];
  _QWORD v84[6];
  _QWORD v85[6];
  _QWORD v86[6];
  _QWORD v87[6];
  _QWORD v88[6];
  _QWORD v89[6];
  _QWORD v90[6];
  _QWORD v91[6];
  _QWORD v92[6];
  _QWORD v93[6];
  _QWORD v94[6];
  _QWORD v95[6];
  _QWORD v96[6];
  _QWORD v97[6];
  _QWORD v98[6];
  _QWORD v99[6];
  _QWORD v100[6];
  _QWORD v101[6];
  _QWORD v102[6];
  _QWORD v103[6];
  _QWORD v104[6];
  _QWORD v105[6];
  _QWORD v106[6];
  _QWORD v107[6];
  _QWORD v108[6];
  _QWORD v109[6];
  _QWORD v110[6];
  _QWORD v111[6];
  _QWORD v112[6];
  _QWORD v113[6];
  _QWORD v114[6];
  _QWORD v115[6];
  _QWORD v116[6];
  _QWORD v117[6];
  _QWORD v118[6];
  _QWORD v119[6];
  _QWORD v120[6];
  _QWORD v121[6];
  _QWORD v122[6];
  _QWORD v123[6];
  _QWORD v124[6];
  _QWORD v125[6];
  _QWORD v126[6];
  _QWORD v127[6];
  _QWORD v128[6];
  _QWORD v129[6];
  _QWORD v130[6];
  _QWORD v131[6];
  _QWORD v132[6];
  _QWORD v133[6];
  _QWORD v134[6];
  _QWORD v135[6];
  _QWORD v136[6];
  _QWORD v137[6];
  _QWORD v138[7];

  v1 = (_QWORD *)MEMORY[0x1E0C80A78](this);
  v138[6] = *MEMORY[0x1E0C80C00];
  if ((v2 & 1) == 0
  {
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v5, "yavşak", "y****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v6, "yarrak", "y****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v7, "yarak", "y***k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v8, "siktir", "s****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v9, "siktin", "s****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v10, "siktim", "s****m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v11, "siktikleri", "s********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v12, "siktik", "s****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v13, "siktiğiniz", "s********z");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v14, "siktiğin", "s******n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v15, "siktiğimiz", "s********z");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v16, "siktiğimin", "s********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v17, "siktiğim", "s******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v18, "siktiği", "s****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v19, "sikti", "s***i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v20, "siksin", "s****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v21, "sikiyim", "s*****m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v22, "sikinin", "s*****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v23, "sikini", "s****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v24, "sikine", "s****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v25, "sikin", "s***n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v26, "sikimin", "s*****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v27, "sikimi", "s****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v28, "sikime", "s****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v29, "sikim", "s***m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v30, "sikik", "s***k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v31, "siki", "s**i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v32, "sikeyim", "s*****m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v33, "sikersin", "s******n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v34, "sikerler", "s******r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v35, "sikeriz", "s*****z");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v36, "sikerim", "s*****m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v37, "siker", "s***r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v38, "sike", "s**e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v39, "sik", "s*k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v40, "sıçtığımın", "s********m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[9],0>(v41, "sıçtığım", "s******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v42, "sıçayım", "s*****m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v43, "sıçarım", "s*****m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v44, "sürtük", "s****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[9],0>(v45, "sürtüğü", "s*****ü");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v46, "puştu", "p***u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v47, "puştsun", "p*****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v48, "puştsan", "p*****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v49, "puştluk", "p*****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v50, "puşta", "p***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v51, "puşt", "p**t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v52, "piçsin", "p****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v53, "piçsen", "p****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v54, "piçlik", "p****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v55, "piçler", "p****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v56, "piçi", "p**i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v57, "piçe", "p**e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v58, "piç", "p*ç");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v59, "pezevenk", "p******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v60, "orospu evladı", "o***********ı");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[14],0>(v61, "orospu çocuğu", "o***********u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v62, "orospu", "o****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v63, "lavuk", "l***k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v64, "kaltak", "k****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v65, "kaltağı", "k*****ı");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v66, "ibne", "i**e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v67, "götveren", "g******n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v68, "götsen", "g****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v69, "götsem", "g****m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v70, "götsün", "g****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v71, "götüne", "g****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[17],0>(v72, "götünden sikeyim", "g**************m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[9],0>(v73, "götünüze", "g******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[10],0>(v74, "götünüzü", "g******ü");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v75, "götünüz", "g*****z");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[15],0>(v76, "götünü sikeyim", "g************m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[15],0>(v77, "götünü sikerim", "g************m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(v78, "götünü", "g****ü");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[4],0>(v79, "göt", "g*t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v80, "ebeni sikeyim", "e***********m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v81, "ebeni sikerim", "e***********m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[11],0>(v82, "dübüründen", "d********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v83, "boku", "b**u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v84, "bokta", "b***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v85, "boksun", "b****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v86, "boklardan", "b*******n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v87, "boklarda", "b******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v88, "boklara", "b*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v89, "boklarından", "b*********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v90, "boklarında", "b********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[13],0>(v91, "boklarınızı", "b*********ı");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[11],0>(v92, "boklarının", "b********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v93, "boklarını", "b*******ı");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v94, "bokların", "b******n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[13],0>(v95, "boklarımızda", "b**********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[12],0>(v96, "boklarımıza", "b*********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[13],0>(v97, "boklarımızın", "b**********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[13],0>(v98, "boklarımızı", "b*********ı");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[11],0>(v99, "boklarımız", "b********z");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v100, "bokları", "b*****ı");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v101, "boklar", "b****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v102, "bok ye", "b****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v103, "bok", "b*k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[15],0>(v104, "bacını sikeyim", "b************m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[15],0>(v105, "bacını sikerim", "b************m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[17],0>(v106, "avradını sikeyim", "a**************m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[17],0>(v107, "avradını sikerim", "a**************m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[14],0>(v108, "ananı sikeyim", "a***********m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[14],0>(v109, "ananı sikerim", "a***********m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[21],0>(v110, "ananı bacını sikeyim", "b******************m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[21],0>(v111, "ananı bacını sikerim", "b******************m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[26],char const(&)[23],0>(v112, "ananı avradını sikeyim", "a********************m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[26],char const(&)[23],0>(v113, "ananı avradını sikerim", "a********************m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[16],0>(v114, "ananı avradını", "a************ı");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v115, "amları", "a****ı");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v116, "amlar", "a***r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v117, "amdan", "a***n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v118, "amcık", "a***k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[11],0>(v119, "amcığından", "a********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[10],0>(v120, "amcığında", "a*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[10],0>(v121, "amcığına", "a******ı");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[10],0>(v122, "amcığını", "a******ı");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v123, "amcığın", "a*****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(v124, "amcığı", "a****ı");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v125, "amından", "a*****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v126, "amında", "a****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[15],0>(v127, "amına koyduğum", "a************m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[14],0>(v128, "amına koyayım", "a***********m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[14],0>(v129, "amına koyarım", "a***********m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v130, "amına", "a***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(v131, "amınıza", "a*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[9],0>(v132, "amınızı", "a*****ı");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v133, "amınız", "a****z");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v134, "amını", "a***ı");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v135, "amın", "a**n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v136, "amı", "a*ı");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v137, "am", "a*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[15],0>(v138, "ağzına sıçayım", "a************m");
    std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](&siri::dialogengine::GetProfanityFilter_tr(void)::sProfanityData_tr, (uint64_t)v5, 0x86uLL);
    for (i = 0; i != -804; i -= 6)
      std::pair<std::string const,std::string>::~pair((uint64_t)&v138[i]);
    __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], &siri::dialogengine::GetProfanityFilter_tr(void)::sProfanityData_tr, &dword_1BF794000);
  }
  *v1 = 0;
  v1[1] = 0;
  v1[2] = 0;
  return std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(v1, siri::dialogengine::GetProfanityFilter_tr(void)::sProfanityData_tr, *(uint64_t *)algn_1EF583010, 0xAAAAAAAAAAAAAAABLL* ((*(_QWORD *)algn_1EF583010 - siri::dialogengine::GetProfanityFilter_tr(void)::sProfanityData_tr) >> 4));
}

void sub_1BFBB081C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + 6384;
  v4 = -6432;
  do
  {
    v3 = std::pair<std::string const,std::string>::~pair(v3) - 48;
    v4 += 48;
  }
  while (v4);
  _Unwind_Resume(a1);
}

_QWORD *siri::dialogengine::GetProfanityFilter_zh_HK(siri::dialogengine *this)
{
  _QWORD *v1;
  unsigned __int8 v2;
  uint64_t i;
  _QWORD v5[6];
  _QWORD v6[6];
  _QWORD v7[6];
  _QWORD v8[6];
  _QWORD v9[6];
  _QWORD v10[6];
  _QWORD v11[6];
  _QWORD v12[6];
  _QWORD v13[6];
  _QWORD v14[6];
  _QWORD v15[6];
  _QWORD v16[6];
  _QWORD v17[6];
  _QWORD v18[6];
  _QWORD v19[6];
  _QWORD v20[6];
  _QWORD v21[6];
  _QWORD v22[6];
  _QWORD v23[6];
  _QWORD v24[6];
  _QWORD v25[6];
  _QWORD v26[6];
  _QWORD v27[6];
  _QWORD v28[6];
  _QWORD v29[6];
  _QWORD v30[6];
  _QWORD v31[6];
  _QWORD v32[6];
  _QWORD v33[6];
  _QWORD v34[6];
  _QWORD v35[6];
  _QWORD v36[6];
  _QWORD v37[6];
  _QWORD v38[6];
  _QWORD v39[6];
  _QWORD v40[6];
  _QWORD v41[6];
  _QWORD v42[6];
  _QWORD v43[6];
  _QWORD v44[6];
  _QWORD v45[6];
  _QWORD v46[6];
  _QWORD v47[6];
  _QWORD v48[6];
  _QWORD v49[6];
  _QWORD v50[6];
  _QWORD v51[6];
  _QWORD v52[6];
  _QWORD v53[6];
  _QWORD v54[6];
  _QWORD v55[6];
  _QWORD v56[6];
  _QWORD v57[6];
  _QWORD v58[6];
  _QWORD v59[6];
  _QWORD v60[6];
  _QWORD v61[6];
  _QWORD v62[6];
  _QWORD v63[6];
  _QWORD v64[6];
  _QWORD v65[6];
  _QWORD v66[6];
  _QWORD v67[6];
  _QWORD v68[6];
  _QWORD v69[6];
  _QWORD v70[6];
  _QWORD v71[6];
  _QWORD v72[6];
  _QWORD v73[6];
  _QWORD v74[6];
  _QWORD v75[6];
  _QWORD v76[6];
  _QWORD v77[6];
  _QWORD v78[6];
  _QWORD v79[6];
  _QWORD v80[6];
  _QWORD v81[6];
  _QWORD v82[6];
  _QWORD v83[6];
  _QWORD v84[6];
  _QWORD v85[6];
  _QWORD v86[6];
  _QWORD v87[6];
  _QWORD v88[6];
  _QWORD v89[6];
  _QWORD v90[6];
  _QWORD v91[6];
  _QWORD v92[6];
  _QWORD v93[6];
  _QWORD v94[6];
  _QWORD v95[6];
  _QWORD v96[6];
  _QWORD v97[6];
  _QWORD v98[6];
  _QWORD v99[6];
  _QWORD v100[6];
  _QWORD v101[6];
  _QWORD v102[6];
  _QWORD v103[6];
  _QWORD v104[6];
  _QWORD v105[6];
  _QWORD v106[6];
  _QWORD v107[6];
  _QWORD v108[6];
  _QWORD v109[6];
  _QWORD v110[6];
  _QWORD v111[6];
  _QWORD v112[6];
  _QWORD v113[6];
  _QWORD v114[6];
  _QWORD v115[6];
  _QWORD v116[6];
  _QWORD v117[6];
  _QWORD v118[6];
  _QWORD v119[6];
  _QWORD v120[6];
  _QWORD v121[6];
  _QWORD v122[6];
  _QWORD v123[6];
  _QWORD v124[6];
  _QWORD v125[6];
  _QWORD v126[6];
  _QWORD v127[6];
  _QWORD v128[6];
  _QWORD v129[6];
  _QWORD v130[6];
  _QWORD v131[6];
  _QWORD v132[6];
  _QWORD v133[6];
  _QWORD v134[6];
  _QWORD v135[6];
  _QWORD v136[6];
  _QWORD v137[6];
  _QWORD v138[6];
  _QWORD v139[6];
  _QWORD v140[6];
  _QWORD v141[6];
  _QWORD v142[6];
  _QWORD v143[6];
  _QWORD v144[6];
  _QWORD v145[6];
  _QWORD v146[6];
  _QWORD v147[6];
  _QWORD v148[6];
  _QWORD v149[6];
  _QWORD v150[6];
  _QWORD v151[6];
  _QWORD v152[7];

  v1 = (_QWORD *)MEMORY[0x1E0C80A78](this);
  v152[6] = *MEMORY[0x1E0C80C00];
  if ((v2 & 1) == 0
  {
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[4],0>(v5, "up乜春", "***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[3],0>(v6, "on9", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v7, "黑鬼", "黑*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v8, "黐鰈筋", "**筋");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[2],0>(v9, "鳩", "*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v10, "食撚屎", "食**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v11, "食屎", "食*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v12, "顏射", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[5],0>(v13, "頂你個肺", "****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v14, "雜種", "*種");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v15, "閪頭", "*頭");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[2],0>(v16, "閪", "*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v17, "躝癱", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v18, "賤精", "*精");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v19, "賤種", "*種");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v20, "賤格", "*格");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[2],0>(v21, "賤", "*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v22, "豬閪", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v23, "豬兜", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v24, "豬乸", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v25, "西頭", "*頭");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v26, "臭閪", "臭*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v27, "臭西", "臭*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v28, "腳交", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v29, "肛交", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v30, "粉腸", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v31, "粉皮", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v32, "笨柒", "笨*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v33, "碌柒", "碌*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v34, "白鬼", "白*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v35, "痴鳩線", "**線");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v36, "痴撚線", "**線");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[10],0>(v37, "生仔無屎窟", "生仔***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[10],0>(v38, "生仔無屎忽", "生仔***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[10],0>(v39, "生仔冇屎忽", "生仔***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(v40, "玩撚完", "玩*完");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v41, "死柒頭", "**頭");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v42, "條條揈", "**揈");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v43, "柒頭", "*頭");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v44, "晏晝屌你屎忽窿", "晏晝*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[11],0>(v45, "晏晝屌你屎忽", "晏晝****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v46, "晏晝叼你屎忽窿", "晏晝*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[11],0>(v47, "晏晝叼你屎忽", "晏晝****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v48, "是撚旦", "是**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v49, "是尻旦", "是**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v50, "春袋", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v51, "收皮啦", "**啦");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v52, "收皮", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v53, "收皮", "收*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v54, "攪嘢", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v55, "攔坦", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v56, "操你媽", "**媽");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v57, "撲街女", "**女");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v58, "撲街仔", "**仔");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v59, "撲街", "*街");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v60, "撲晒街", "**街");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v61, "撚樣", "*樣");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v62, "撚屌", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v63, "撚嘢", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[2],0>(v64, "撚", "*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(v65, "援交妹", "援*妹");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v66, "援交", "援*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v67, "指交", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v68, "把撚", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v69, "扯旗", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v70, "打飛機", "打**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v71, "打靶仔", "**仔");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v72, "打潛艇", "打**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v73, "打柒佢", "**佢");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v74, "打手槍", "打**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v75, "扑嘢", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[4],0>(v76, "戇鳩鳩", "***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v77, "戇鳩", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v78, "戇膠", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[4],0>(v79, "戇撚鳩", "***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v80, "戇居", "戇*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v81, "廢柴", "*柴");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v82, "幹你娘", "**娘");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v83, "屎忽鬼", "**鬼");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v84, "屌那星", "**星");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[4],0>(v85, "屌那媽", "***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v86, "屌柒", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v87, "屌搵你", "**你");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v88, "屌屌揈", "**揈");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v89, "屌尻你", "**你");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v90, "屌尻", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v91, "屌佢", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v92, "屌你老母閪", "*你***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[9],0>(v93, "屌你老母臭閪", "*你****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v94, "屌你老母", "*你**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v95, "屌你老味閪", "*你***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v96, "屌你老味", "*你**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v97, "屌你老味", "*你**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v98, "屌你", "*你");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[2],0>(v99, "屌", "*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[2],0>(v100, "屄", "*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[2],0>(v101, "尻", "*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v102, "射精", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(v103, "孤鳩寒", "孤*寒");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[2],0>(v104, "妖", "*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v105, "好on9", "好**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v106, "好撚柒", "好**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v107, "好撚 oN9", "好****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v108, "好撚", "好*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v109, "大鳩鑊", "大**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v110, "大波", "大*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(v111, "大撚鑊", "大*鑊");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(v112, "多鳩餘", "多*餘");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v113, "含撚", "含*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[4],0>(v114, "叼那媽", "***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v115, "叼柒", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v116, "叼搵你", "**你");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v117, "叼尻", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v118, "叼叼揈", "**揈");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v119, "叼你老母", "*你**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v120, "叼你", "*你");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[2],0>(v121, "叼", "*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v122, "叫鴨", "叫*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v123, "叫雞", "叫*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v124, "口爆", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v125, "口交", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[4],0>(v126, "冚家鏟", "***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v127, "冚家拎", "**拎");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v128, "冚家富貴", "冚家**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[4],0>(v129, "冚家剷", "***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v130, "冚家剷", "**剷");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v131, "八婆", "*婆");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v132, "八公", "*公");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(v133, "做咩撚", "做咩*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v134, "做乜撚嘢", "做乜**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(v135, "做乜撚", "做乜*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v136, "你鹵味", "你**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v137, "你老尾", "你**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v138, "你老味", "你**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v139, "你好on9", "你好**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(v140, "他媽的", "他*的");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[11],0>(v141, "今朝拮你籮柚", "今朝****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v142, "仆街女", "**女");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v143, "仆街仔", "**仔");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v144, "仆街", "*街");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v145, "仆晒街", "**街");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v146, "仆你個街", "**個*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v147, "仆你個臭街", "**個**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v148, "乸型", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v149, "乳交", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v150, "乜鳩", "乜*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(v151, "一樓一", "一*一");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v152, "SM", "**");
    std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](&siri::dialogengine::GetProfanityFilter_zh_HK(void)::sProfanityData_zh_HK, (uint64_t)v5, 0x94uLL);
    for (i = 0; i != -888; i -= 6)
      std::pair<std::string const,std::string>::~pair((uint64_t)&v152[i]);
    __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], &siri::dialogengine::GetProfanityFilter_zh_HK(void)::sProfanityData_zh_HK, &dword_1BF794000);
  }
  *v1 = 0;
  v1[1] = 0;
  v1[2] = 0;
  return std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(v1, siri::dialogengine::GetProfanityFilter_zh_HK(void)::sProfanityData_zh_HK, *(uint64_t *)algn_1EF5830B0, 0xAAAAAAAAAAAAAAABLL* ((*(_QWORD *)algn_1EF5830B0 - siri::dialogengine::GetProfanityFilter_zh_HK(void)::sProfanityData_zh_HK) >> 4));
}

void sub_1BFBB1BFC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + 7056;
  v4 = -7104;
  do
  {
    v3 = std::pair<std::string const,std::string>::~pair(v3) - 48;
    v4 += 48;
  }
  while (v4);
  _Unwind_Resume(a1);
}

_QWORD *siri::dialogengine::GetProfanityFilter_ar_AE(siri::dialogengine *this)
{
  _QWORD *v1;
  unsigned __int8 v2;
  uint64_t i;
  _QWORD v5[6];
  _QWORD v6[6];
  _QWORD v7[6];
  _QWORD v8[6];
  _QWORD v9[6];
  _QWORD v10[6];
  _QWORD v11[6];
  _QWORD v12[6];
  _QWORD v13[6];
  _QWORD v14[6];
  _QWORD v15[6];
  _QWORD v16[6];
  _QWORD v17[6];
  _QWORD v18[6];
  _QWORD v19[6];
  _QWORD v20[6];
  _QWORD v21[6];
  _QWORD v22[6];
  _QWORD v23[6];
  _QWORD v24[6];
  _QWORD v25[6];
  _QWORD v26[6];
  _QWORD v27[6];
  _QWORD v28[6];
  _QWORD v29[6];
  _QWORD v30[6];
  _QWORD v31[6];
  _QWORD v32[6];
  _QWORD v33[6];
  _QWORD v34[6];
  _QWORD v35[6];
  _QWORD v36[6];
  _QWORD v37[6];
  _QWORD v38[6];
  _QWORD v39[6];
  _QWORD v40[6];
  _QWORD v41[6];
  _QWORD v42[6];
  _QWORD v43[6];
  _QWORD v44[6];
  _QWORD v45[6];
  _QWORD v46[6];
  _QWORD v47[6];
  _QWORD v48[6];
  _QWORD v49[6];
  _QWORD v50[6];
  _QWORD v51[6];
  _QWORD v52[6];
  _QWORD v53[6];
  _QWORD v54[6];
  _QWORD v55[6];
  _QWORD v56[6];
  _QWORD v57[6];
  _QWORD v58[6];
  _QWORD v59[6];
  _QWORD v60[6];
  _QWORD v61[6];
  _QWORD v62[6];
  _QWORD v63[6];
  _QWORD v64[6];
  _QWORD v65[6];
  _QWORD v66[6];
  _QWORD v67[6];
  _QWORD v68[6];
  _QWORD v69[6];
  _QWORD v70[6];
  _QWORD v71[6];
  _QWORD v72[6];
  _QWORD v73[6];
  _QWORD v74[6];
  _QWORD v75[6];
  _QWORD v76[6];
  _QWORD v77[6];
  _QWORD v78[6];
  _QWORD v79[6];
  _QWORD v80[6];
  _QWORD v81[6];
  _QWORD v82[6];
  _QWORD v83[6];
  _QWORD v84[6];
  _QWORD v85[6];
  _QWORD v86[6];
  _QWORD v87[6];
  _QWORD v88[6];
  _QWORD v89[6];
  _QWORD v90[6];
  _QWORD v91[6];
  _QWORD v92[6];
  _QWORD v93[6];
  _QWORD v94[6];
  _QWORD v95[6];
  _QWORD v96[6];
  _QWORD v97[6];
  _QWORD v98[6];
  _QWORD v99[6];
  _QWORD v100[6];
  _QWORD v101[6];
  _QWORD v102[6];
  _QWORD v103[6];
  _QWORD v104[6];
  _QWORD v105[6];
  _QWORD v106[6];
  _QWORD v107[6];
  _QWORD v108[6];
  _QWORD v109[6];
  _QWORD v110[6];
  _QWORD v111[6];
  _QWORD v112[6];
  _QWORD v113[6];
  _QWORD v114[6];
  _QWORD v115[6];
  _QWORD v116[6];
  _QWORD v117[6];
  _QWORD v118[6];
  _QWORD v119[6];
  _QWORD v120[6];
  _QWORD v121[6];
  _QWORD v122[6];
  _QWORD v123[6];
  _QWORD v124[6];
  _QWORD v125[6];
  _QWORD v126[6];
  _QWORD v127[6];
  _QWORD v128[6];
  _QWORD v129[6];
  _QWORD v130[6];
  _QWORD v131[6];
  _QWORD v132[6];
  _QWORD v133[6];
  _QWORD v134[6];
  _QWORD v135[6];
  _QWORD v136[6];
  _QWORD v137[6];
  _QWORD v138[6];
  _QWORD v139[6];
  _QWORD v140[6];
  _QWORD v141[6];
  _QWORD v142[6];
  _QWORD v143[6];
  _QWORD v144[6];
  _QWORD v145[6];
  _QWORD v146[6];
  _QWORD v147[6];
  _QWORD v148[6];
  _QWORD v149[6];
  _QWORD v150[6];
  _QWORD v151[6];
  _QWORD v152[6];
  _QWORD v153[6];
  _QWORD v154[6];
  _QWORD v155[6];
  _QWORD v156[6];
  _QWORD v157[6];
  _QWORD v158[6];
  _QWORD v159[6];
  _QWORD v160[6];
  _QWORD v161[6];
  _QWORD v162[6];
  _QWORD v163[6];
  _QWORD v164[6];
  _QWORD v165[6];
  _QWORD v166[6];
  _QWORD v167[6];
  _QWORD v168[6];
  _QWORD v169[6];
  _QWORD v170[6];
  _QWORD v171[6];
  _QWORD v172[6];
  _QWORD v173[6];
  _QWORD v174[6];
  _QWORD v175[6];
  _QWORD v176[6];
  _QWORD v177[6];
  _QWORD v178[6];
  _QWORD v179[6];
  _QWORD v180[6];
  _QWORD v181[6];
  _QWORD v182[6];
  _QWORD v183[6];
  _QWORD v184[6];
  _QWORD v185[6];
  _QWORD v186[6];
  _QWORD v187[6];
  _QWORD v188[6];
  _QWORD v189[6];
  _QWORD v190[6];
  _QWORD v191[6];
  _QWORD v192[6];
  _QWORD v193[6];
  _QWORD v194[6];
  _QWORD v195[6];
  _QWORD v196[6];
  _QWORD v197[6];
  _QWORD v198[6];
  _QWORD v199[6];
  _QWORD v200[6];
  _QWORD v201[6];
  _QWORD v202[6];
  _QWORD v203[6];
  _QWORD v204[6];
  _QWORD v205[6];
  _QWORD v206[6];
  _QWORD v207[6];
  _QWORD v208[6];
  _QWORD v209[6];
  _QWORD v210[6];
  _QWORD v211[6];
  _QWORD v212[6];
  _QWORD v213[6];
  _QWORD v214[6];
  _QWORD v215[6];
  _QWORD v216[6];
  _QWORD v217[6];
  _QWORD v218[6];
  _QWORD v219[6];
  _QWORD v220[6];
  _QWORD v221[6];
  _QWORD v222[6];
  _QWORD v223[6];
  _QWORD v224[6];
  _QWORD v225[6];
  _QWORD v226[6];
  _QWORD v227[6];
  _QWORD v228[6];
  _QWORD v229[6];
  _QWORD v230[6];
  _QWORD v231[6];
  _QWORD v232[6];
  _QWORD v233[6];
  _QWORD v234[6];
  _QWORD v235[6];
  _QWORD v236[6];
  _QWORD v237[6];
  _QWORD v238[6];
  _QWORD v239[6];
  _QWORD v240[6];
  _QWORD v241[6];
  _QWORD v242[6];
  _QWORD v243[6];
  _QWORD v244[6];
  _QWORD v245[6];
  _QWORD v246[6];
  _QWORD v247[6];
  _QWORD v248[6];
  _QWORD v249[6];
  _QWORD v250[6];
  _QWORD v251[6];
  _QWORD v252[6];
  _QWORD v253[6];
  _QWORD v254[6];
  _QWORD v255[6];
  _QWORD v256[6];
  _QWORD v257[6];
  _QWORD v258[6];
  _QWORD v259[6];
  _QWORD v260[6];
  _QWORD v261[6];
  _QWORD v262[6];
  _QWORD v263[6];
  _QWORD v264[6];
  _QWORD v265[6];
  _QWORD v266[6];
  _QWORD v267[6];
  _QWORD v268[6];
  _QWORD v269[6];
  _QWORD v270[6];
  _QWORD v271[6];
  _QWORD v272[6];
  _QWORD v273[6];
  _QWORD v274[6];
  _QWORD v275[6];
  _QWORD v276[6];
  _QWORD v277[6];
  _QWORD v278[6];
  _QWORD v279[6];
  _QWORD v280[6];
  _QWORD v281[6];
  _QWORD v282[6];
  _QWORD v283[6];
  _QWORD v284[6];
  _QWORD v285[6];
  _QWORD v286[6];
  _QWORD v287[6];
  _QWORD v288[6];
  _QWORD v289[6];
  _QWORD v290[6];
  _QWORD v291[6];
  _QWORD v292[6];
  _QWORD v293[6];
  _QWORD v294[6];
  _QWORD v295[6];
  _QWORD v296[6];
  _QWORD v297[6];
  _QWORD v298[6];
  _QWORD v299[6];
  _QWORD v300[6];
  _QWORD v301[6];
  _QWORD v302[6];
  _QWORD v303[6];
  _QWORD v304[6];
  _QWORD v305[6];
  _QWORD v306[6];
  _QWORD v307[6];
  _QWORD v308[6];
  _QWORD v309[6];
  _QWORD v310[6];
  _QWORD v311[6];
  _QWORD v312[6];
  _QWORD v313[6];
  _QWORD v314[6];
  _QWORD v315[6];
  _QWORD v316[6];
  _QWORD v317[6];
  _QWORD v318[6];
  _QWORD v319[6];
  _QWORD v320[6];
  _QWORD v321[6];
  _QWORD v322[6];
  _QWORD v323[6];
  _QWORD v324[6];
  _QWORD v325[6];
  _QWORD v326[6];
  _QWORD v327[6];
  _QWORD v328[6];
  _QWORD v329[6];
  _QWORD v330[6];
  _QWORD v331[6];
  _QWORD v332[6];
  _QWORD v333[6];
  _QWORD v334[6];
  _QWORD v335[6];
  _QWORD v336[6];
  _QWORD v337[6];
  _QWORD v338[6];
  _QWORD v339[6];
  _QWORD v340[6];
  _QWORD v341[6];
  _QWORD v342[6];
  _QWORD v343[6];
  _QWORD v344[6];
  _QWORD v345[6];
  _QWORD v346[6];
  _QWORD v347[6];
  _QWORD v348[6];
  _QWORD v349[6];
  _QWORD v350[6];
  _QWORD v351[6];
  _QWORD v352[6];
  _QWORD v353[6];
  _QWORD v354[6];
  _QWORD v355[6];
  _QWORD v356[6];
  _QWORD v357[6];
  _QWORD v358[6];
  _QWORD v359[6];
  _QWORD v360[6];
  _QWORD v361[6];
  _QWORD v362[6];
  _QWORD v363[6];
  _QWORD v364[6];
  _QWORD v365[6];
  _QWORD v366[6];
  _QWORD v367[6];
  _QWORD v368[6];
  _QWORD v369[6];
  _QWORD v370[6];
  _QWORD v371[6];
  _QWORD v372[6];
  _QWORD v373[6];
  _QWORD v374[6];
  _QWORD v375[6];
  _QWORD v376[6];
  _QWORD v377[6];
  _QWORD v378[6];
  _QWORD v379[6];
  _QWORD v380[6];
  _QWORD v381[6];
  _QWORD v382[6];
  _QWORD v383[6];
  _QWORD v384[6];
  _QWORD v385[6];
  _QWORD v386[6];
  _QWORD v387[6];
  _QWORD v388[6];
  _QWORD v389[6];
  _QWORD v390[6];
  _QWORD v391[6];
  _QWORD v392[6];
  _QWORD v393[6];
  _QWORD v394[6];
  _QWORD v395[6];
  _QWORD v396[6];
  _QWORD v397[6];
  _QWORD v398[6];
  _QWORD v399[6];
  _QWORD v400[6];
  _QWORD v401[6];
  _QWORD v402[6];
  _QWORD v403[6];
  _QWORD v404[6];
  _QWORD v405[6];
  _QWORD v406[6];
  _QWORD v407[6];
  _QWORD v408[6];
  _QWORD v409[6];
  _QWORD v410[6];
  _QWORD v411[6];
  _QWORD v412[6];
  _QWORD v413[6];
  _QWORD v414[6];
  _QWORD v415[6];
  _QWORD v416[6];
  _QWORD v417[6];
  _QWORD v418[6];
  _QWORD v419[6];
  _QWORD v420[6];
  _QWORD v421[6];
  _QWORD v422[6];
  _QWORD v423[6];
  _QWORD v424[6];
  _QWORD v425[6];
  _QWORD v426[6];
  _QWORD v427[6];
  _QWORD v428[6];
  _QWORD v429[6];
  _QWORD v430[6];
  _QWORD v431[6];
  _QWORD v432[6];
  _QWORD v433[6];
  _QWORD v434[6];
  _QWORD v435[6];
  _QWORD v436[6];
  _QWORD v437[6];
  _QWORD v438[6];
  _QWORD v439[6];
  _QWORD v440[6];
  _QWORD v441[6];
  _QWORD v442[6];
  _QWORD v443[6];
  _QWORD v444[6];
  _QWORD v445[6];
  _QWORD v446[6];
  _QWORD v447[6];
  _QWORD v448[6];
  _QWORD v449[6];
  _QWORD v450[6];
  _QWORD v451[6];
  _QWORD v452[6];
  _QWORD v453[6];
  _QWORD v454[6];
  _QWORD v455[6];
  _QWORD v456[6];
  _QWORD v457[6];
  _QWORD v458[6];
  _QWORD v459[6];
  _QWORD v460[6];
  _QWORD v461[6];
  _QWORD v462[6];
  _QWORD v463[6];
  _QWORD v464[6];
  _QWORD v465[6];
  _QWORD v466[6];
  _QWORD v467[6];
  _QWORD v468[6];
  _QWORD v469[6];
  _QWORD v470[6];
  _QWORD v471[6];
  _QWORD v472[6];
  _QWORD v473[6];
  _QWORD v474[6];
  _QWORD v475[6];
  _QWORD v476[6];
  _QWORD v477[6];
  _QWORD v478[6];
  _QWORD v479[6];
  _QWORD v480[6];
  _QWORD v481[6];
  _QWORD v482[6];
  _QWORD v483[6];
  _QWORD v484[6];
  _QWORD v485[6];
  _QWORD v486[6];
  _QWORD v487[6];
  _QWORD v488[6];
  _QWORD v489[6];
  _QWORD v490[6];
  _QWORD v491[6];
  _QWORD v492[6];
  _QWORD v493[6];
  _QWORD v494[6];
  _QWORD v495[6];
  _QWORD v496[6];
  _QWORD v497[6];
  _QWORD v498[6];
  _QWORD v499[6];
  _QWORD v500[6];
  _QWORD v501[6];
  _QWORD v502[6];
  _QWORD v503[6];
  _QWORD v504[6];
  _QWORD v505[6];
  _QWORD v506[6];
  _QWORD v507[6];
  _QWORD v508[6];
  _QWORD v509[6];
  _QWORD v510[6];
  _QWORD v511[6];
  _QWORD v512[6];
  _QWORD v513[6];
  _QWORD v514[6];
  _QWORD v515[6];
  _QWORD v516[6];
  _QWORD v517[6];
  _QWORD v518[6];
  _QWORD v519[6];
  _QWORD v520[6];
  _QWORD v521[6];
  _QWORD v522[6];
  _QWORD v523[6];
  _QWORD v524[6];
  _QWORD v525[6];
  _QWORD v526[6];
  _QWORD v527[6];
  _QWORD v528[6];
  _QWORD v529[6];
  _QWORD v530[6];
  _QWORD v531[6];
  _QWORD v532[6];
  _QWORD v533[6];
  _QWORD v534[6];
  _QWORD v535[6];
  _QWORD v536[6];
  _QWORD v537[6];
  _QWORD v538[6];
  _QWORD v539[6];
  _QWORD v540[6];
  _QWORD v541[6];
  _QWORD v542[6];
  _QWORD v543[6];
  _QWORD v544[6];
  _QWORD v545[6];
  _QWORD v546[6];
  _QWORD v547[6];
  _QWORD v548[6];
  _QWORD v549[6];
  _QWORD v550[6];
  _QWORD v551[6];
  _QWORD v552[6];
  _QWORD v553[6];
  _QWORD v554[6];
  _QWORD v555[6];
  _QWORD v556[6];
  _QWORD v557[6];
  _QWORD v558[6];
  _QWORD v559[6];
  _QWORD v560[6];
  _QWORD v561[6];
  _QWORD v562[6];
  _QWORD v563[6];
  _QWORD v564[6];
  _QWORD v565[6];
  _QWORD v566[6];
  _QWORD v567[6];
  _QWORD v568[6];
  _QWORD v569[6];
  _QWORD v570[6];
  _QWORD v571[6];
  _QWORD v572[6];
  _QWORD v573[6];
  _QWORD v574[6];
  _QWORD v575[6];
  _QWORD v576[6];
  _QWORD v577[6];
  _QWORD v578[6];
  _QWORD v579[6];
  _QWORD v580[6];
  _QWORD v581[6];
  _QWORD v582[6];
  _QWORD v583[6];
  _QWORD v584[6];
  _QWORD v585[6];
  _QWORD v586[6];
  _QWORD v587[6];
  _QWORD v588[6];
  _QWORD v589[6];
  _QWORD v590[6];
  _QWORD v591[6];
  _QWORD v592[6];
  _QWORD v593[6];
  _QWORD v594[6];
  _QWORD v595[6];
  _QWORD v596[6];
  _QWORD v597[6];
  _QWORD v598[6];
  _QWORD v599[6];
  _QWORD v600[6];
  _QWORD v601[6];
  _QWORD v602[6];
  _QWORD v603[6];
  _QWORD v604[6];
  _QWORD v605[6];
  _QWORD v606[6];
  _QWORD v607[6];
  _QWORD v608[6];
  _QWORD v609[6];
  _QWORD v610[6];
  _QWORD v611[6];
  _QWORD v612[6];
  _QWORD v613[6];
  _QWORD v614[6];
  _QWORD v615[6];
  _QWORD v616[6];
  _QWORD v617[6];
  _QWORD v618[6];
  _QWORD v619[6];
  _QWORD v620[6];
  _QWORD v621[6];
  _QWORD v622[6];
  _QWORD v623[6];
  _QWORD v624[6];
  _QWORD v625[6];
  _QWORD v626[6];
  _QWORD v627[6];
  _QWORD v628[6];
  _QWORD v629[6];
  _QWORD v630[6];
  _QWORD v631[6];
  _QWORD v632[6];
  _QWORD v633[6];
  _QWORD v634[6];
  _QWORD v635[6];
  _QWORD v636[6];
  _QWORD v637[6];
  _QWORD v638[6];
  _QWORD v639[6];
  _QWORD v640[6];
  _QWORD v641[6];
  _QWORD v642[6];
  _QWORD v643[6];
  _QWORD v644[6];
  _QWORD v645[6];
  _QWORD v646[6];
  _QWORD v647[6];
  _QWORD v648[6];
  _QWORD v649[6];
  _QWORD v650[6];
  _QWORD v651[6];
  _QWORD v652[6];
  _QWORD v653[6];
  _QWORD v654[6];
  _QWORD v655[6];
  _QWORD v656[6];
  _QWORD v657[6];
  _QWORD v658[6];
  _QWORD v659[6];
  _QWORD v660[6];
  _QWORD v661[6];
  _QWORD v662[6];
  _QWORD v663[6];
  _QWORD v664[6];
  _QWORD v665[6];
  _QWORD v666[6];
  _QWORD v667[6];
  _QWORD v668[6];
  _QWORD v669[6];
  _QWORD v670[6];
  _QWORD v671[6];
  _QWORD v672[6];
  _QWORD v673[6];
  _QWORD v674[6];
  _QWORD v675[6];
  _QWORD v676[6];
  _QWORD v677[6];
  _QWORD v678[6];
  _QWORD v679[6];
  _QWORD v680[6];
  _QWORD v681[6];
  _QWORD v682[6];
  _QWORD v683[6];
  _QWORD v684[6];
  _QWORD v685[6];
  _QWORD v686[6];
  _QWORD v687[6];
  _QWORD v688[6];
  _QWORD v689[6];
  _QWORD v690[6];
  _QWORD v691[6];
  _QWORD v692[6];
  _QWORD v693[6];
  _QWORD v694[6];
  _QWORD v695[6];
  _QWORD v696[6];
  _QWORD v697[6];
  _QWORD v698[6];
  _QWORD v699[6];
  _QWORD v700[6];
  _QWORD v701[6];
  _QWORD v702[6];
  _QWORD v703[6];
  _QWORD v704[6];
  _QWORD v705[6];
  _QWORD v706[6];
  _QWORD v707[6];
  _QWORD v708[6];
  _QWORD v709[6];
  _QWORD v710[6];
  _QWORD v711[6];
  _QWORD v712[6];
  _QWORD v713[6];
  _QWORD v714[6];
  _QWORD v715[6];
  _QWORD v716[6];
  _QWORD v717[6];
  _QWORD v718[6];
  _QWORD v719[6];
  _QWORD v720[6];
  _QWORD v721[6];
  _QWORD v722[6];
  _QWORD v723[6];
  _QWORD v724[6];
  _QWORD v725[6];
  _QWORD v726[6];
  _QWORD v727[6];
  _QWORD v728[6];
  _QWORD v729[6];
  _QWORD v730[6];
  _QWORD v731[6];
  _QWORD v732[6];
  _QWORD v733[6];
  _QWORD v734[6];
  _QWORD v735[6];
  _QWORD v736[6];
  _QWORD v737[6];
  _QWORD v738[6];
  _QWORD v739[6];
  _QWORD v740[6];
  _QWORD v741[6];
  _QWORD v742[6];
  _QWORD v743[6];
  _QWORD v744[6];
  _QWORD v745[6];
  _QWORD v746[6];
  _QWORD v747[6];
  _QWORD v748[6];
  _QWORD v749[6];
  _QWORD v750[6];
  _QWORD v751[6];
  _QWORD v752[6];
  _QWORD v753[6];
  _QWORD v754[6];
  _QWORD v755[6];
  _QWORD v756[6];
  _QWORD v757[6];
  _QWORD v758[6];
  _QWORD v759[6];
  _QWORD v760[6];
  _QWORD v761[6];
  _QWORD v762[6];
  _QWORD v763[6];
  _QWORD v764[6];
  _QWORD v765[6];
  _QWORD v766[6];
  _QWORD v767[6];
  _QWORD v768[6];
  _QWORD v769[6];
  _QWORD v770[6];
  _QWORD v771[6];
  _QWORD v772[6];
  _QWORD v773[6];
  _QWORD v774[6];
  _QWORD v775[6];
  _QWORD v776[6];
  _QWORD v777[6];
  _QWORD v778[6];
  _QWORD v779[6];
  _QWORD v780[6];
  _QWORD v781[6];
  _QWORD v782[6];
  _QWORD v783[6];
  _QWORD v784[6];
  _QWORD v785[6];
  _QWORD v786[6];
  _QWORD v787[6];
  _QWORD v788[6];
  _QWORD v789[6];
  _QWORD v790[6];
  _QWORD v791[6];
  _QWORD v792[6];
  _QWORD v793[6];
  _QWORD v794[6];
  _QWORD v795[6];
  _QWORD v796[6];
  _QWORD v797[6];
  _QWORD v798[6];
  _QWORD v799[6];
  _QWORD v800[6];
  _QWORD v801[6];
  _QWORD v802[6];
  _QWORD v803[6];
  _QWORD v804[6];
  _QWORD v805[6];
  _QWORD v806[6];
  _QWORD v807[6];
  _QWORD v808[6];
  _QWORD v809[6];
  _QWORD v810[6];
  _QWORD v811[6];
  _QWORD v812[6];
  _QWORD v813[6];
  _QWORD v814[6];
  _QWORD v815[6];
  _QWORD v816[6];
  _QWORD v817[6];
  _QWORD v818[6];
  _QWORD v819[6];
  _QWORD v820[6];
  _QWORD v821[6];
  _QWORD v822[6];
  _QWORD v823[6];
  _QWORD v824[6];
  _QWORD v825[6];
  _QWORD v826[6];
  _QWORD v827[6];
  _QWORD v828[6];
  _QWORD v829[6];
  _QWORD v830[6];
  _QWORD v831[6];
  _QWORD v832[6];
  _QWORD v833[6];
  _QWORD v834[6];
  _QWORD v835[6];
  _QWORD v836[6];
  _QWORD v837[6];
  _QWORD v838[6];
  _QWORD v839[6];
  _QWORD v840[6];
  _QWORD v841[6];
  _QWORD v842[6];
  _QWORD v843[6];
  _QWORD v844[6];
  _QWORD v845[6];
  _QWORD v846[6];
  _QWORD v847[6];
  _QWORD v848[6];
  _QWORD v849[6];
  _QWORD v850[6];
  _QWORD v851[6];
  _QWORD v852[6];
  _QWORD v853[6];
  _QWORD v854[6];
  _QWORD v855[6];
  _QWORD v856[6];
  _QWORD v857[6];
  _QWORD v858[6];
  _QWORD v859[6];
  _QWORD v860[6];
  _QWORD v861[6];
  _QWORD v862[6];
  _QWORD v863[6];
  _QWORD v864[6];
  _QWORD v865[6];
  _QWORD v866[6];
  _QWORD v867[6];
  _QWORD v868[6];
  _QWORD v869[6];
  _QWORD v870[6];
  _QWORD v871[6];
  _QWORD v872[6];
  _QWORD v873[6];
  _QWORD v874[6];
  _QWORD v875[6];
  _QWORD v876[6];
  _QWORD v877[6];
  _QWORD v878[6];
  _QWORD v879[6];
  _QWORD v880[6];
  _QWORD v881[6];
  _QWORD v882[6];
  _QWORD v883[6];
  _QWORD v884[6];
  _QWORD v885[6];
  _QWORD v886[6];
  _QWORD v887[6];
  _QWORD v888[6];
  _QWORD v889[6];
  _QWORD v890[6];
  _QWORD v891[6];
  _QWORD v892[6];
  _QWORD v893[6];
  _QWORD v894[6];
  _QWORD v895[6];
  _QWORD v896[6];
  _QWORD v897[6];
  _QWORD v898[6];
  _QWORD v899[6];
  _QWORD v900[6];
  _QWORD v901[6];
  _QWORD v902[6];
  _QWORD v903[6];
  _QWORD v904[6];
  _QWORD v905[6];
  _QWORD v906[6];
  _QWORD v907[6];
  _QWORD v908[6];
  _QWORD v909[6];
  _QWORD v910[6];
  _QWORD v911[6];
  _QWORD v912[6];
  _QWORD v913[6];
  _QWORD v914[6];
  _QWORD v915[6];
  _QWORD v916[6];
  _QWORD v917[6];
  _QWORD v918[6];
  _QWORD v919[6];
  _QWORD v920[6];
  _QWORD v921[6];
  _QWORD v922[6];
  _QWORD v923[6];
  _QWORD v924[6];
  _QWORD v925[6];
  _QWORD v926[6];
  _QWORD v927[6];
  _QWORD v928[6];
  _QWORD v929[6];
  _QWORD v930[6];
  _QWORD v931[6];
  _QWORD v932[6];
  _QWORD v933[6];
  _QWORD v934[6];
  _QWORD v935[6];
  _QWORD v936[6];
  _QWORD v937[6];
  _QWORD v938[6];
  _QWORD v939[6];
  _QWORD v940[6];
  _QWORD v941[6];
  _QWORD v942[6];
  _QWORD v943[6];
  _QWORD v944[6];
  _QWORD v945[6];
  _QWORD v946[6];
  _QWORD v947[6];
  _QWORD v948[6];
  _QWORD v949[6];
  _QWORD v950[6];
  _QWORD v951[6];
  _QWORD v952[6];
  _QWORD v953[6];
  _QWORD v954[6];
  _QWORD v955[6];
  _QWORD v956[6];
  _QWORD v957[6];
  _QWORD v958[6];
  _QWORD v959[6];
  _QWORD v960[6];
  _QWORD v961[6];
  _QWORD v962[6];
  _QWORD v963[6];
  _QWORD v964[6];
  _QWORD v965[6];
  _QWORD v966[6];
  _QWORD v967[6];
  _QWORD v968[6];
  _QWORD v969[6];
  _QWORD v970[6];
  _QWORD v971[6];
  _QWORD v972[6];
  _QWORD v973[6];
  _QWORD v974[6];
  _QWORD v975[6];
  _QWORD v976[6];
  _QWORD v977[6];
  _QWORD v978[6];
  _QWORD v979[6];
  _QWORD v980[6];
  _QWORD v981[6];
  _QWORD v982[6];
  _QWORD v983[6];
  _QWORD v984[6];
  _QWORD v985[6];
  _QWORD v986[6];
  _QWORD v987[6];
  _QWORD v988[6];
  _QWORD v989[6];
  _QWORD v990[6];
  _QWORD v991[6];
  _QWORD v992[6];
  _QWORD v993[6];
  _QWORD v994[6];
  _QWORD v995[6];
  _QWORD v996[6];
  _QWORD v997[6];
  _QWORD v998[6];
  _QWORD v999[6];
  _QWORD v1000[6];
  _QWORD v1001[6];
  _QWORD v1002[6];
  _QWORD v1003[6];
  _QWORD v1004[6];
  _QWORD v1005[6];
  _QWORD v1006[6];
  _QWORD v1007[6];
  _QWORD v1008[6];
  _QWORD v1009[6];
  _QWORD v1010[6];
  _QWORD v1011[6];
  _QWORD v1012[6];
  _QWORD v1013[6];
  _QWORD v1014[6];
  _QWORD v1015[6];
  _QWORD v1016[6];
  _QWORD v1017[6];
  _QWORD v1018[6];
  _QWORD v1019[6];
  _QWORD v1020[6];
  _QWORD v1021[6];
  _QWORD v1022[6];
  _QWORD v1023[6];
  _QWORD v1024[6];
  _QWORD v1025[6];
  _QWORD v1026[6];
  _QWORD v1027[6];
  _QWORD v1028[6];
  _QWORD v1029[6];
  _QWORD v1030[6];
  _QWORD v1031[6];
  _QWORD v1032[6];
  _QWORD v1033[6];
  _QWORD v1034[6];
  _QWORD v1035[6];
  _QWORD v1036[6];
  _QWORD v1037[6];
  _QWORD v1038[6];
  _QWORD v1039[6];
  _QWORD v1040[6];
  _QWORD v1041[6];
  _QWORD v1042[6];
  _QWORD v1043[6];
  _QWORD v1044[6];
  _QWORD v1045[6];
  _QWORD v1046[6];
  _QWORD v1047[6];
  _QWORD v1048[6];
  _QWORD v1049[6];
  _QWORD v1050[6];
  _QWORD v1051[6];
  _QWORD v1052[6];
  _QWORD v1053[6];
  _QWORD v1054[6];
  _QWORD v1055[6];
  _QWORD v1056[6];
  _QWORD v1057[6];
  _QWORD v1058[6];
  _QWORD v1059[6];
  _QWORD v1060[6];
  _QWORD v1061[6];
  _QWORD v1062[6];
  _QWORD v1063[6];
  _QWORD v1064[6];
  _QWORD v1065[6];
  _QWORD v1066[6];
  _QWORD v1067[6];
  _QWORD v1068[6];
  _QWORD v1069[6];
  _QWORD v1070[6];
  _QWORD v1071[6];
  _QWORD v1072[6];
  _QWORD v1073[6];
  _QWORD v1074[6];
  _QWORD v1075[6];
  _QWORD v1076[6];
  _QWORD v1077[6];
  _QWORD v1078[6];
  _QWORD v1079[6];
  _QWORD v1080[6];
  _QWORD v1081[6];
  _QWORD v1082[6];
  _QWORD v1083[6];
  _QWORD v1084[6];
  _QWORD v1085[6];
  _QWORD v1086[6];
  _QWORD v1087[6];
  _QWORD v1088[6];
  _QWORD v1089[6];
  _QWORD v1090[6];
  _QWORD v1091[6];
  _QWORD v1092[6];
  _QWORD v1093[6];
  _QWORD v1094[6];
  _QWORD v1095[6];
  _QWORD v1096[6];
  _QWORD v1097[6];
  _QWORD v1098[6];
  _QWORD v1099[6];
  _QWORD v1100[6];
  _QWORD v1101[6];
  _QWORD v1102[6];
  _QWORD v1103[6];
  _QWORD v1104[6];
  _QWORD v1105[6];
  _QWORD v1106[6];
  _QWORD v1107[6];
  _QWORD v1108[6];
  _QWORD v1109[6];
  _QWORD v1110[6];
  _QWORD v1111[6];
  _QWORD v1112[6];
  _QWORD v1113[6];
  _QWORD v1114[6];
  _QWORD v1115[6];
  _QWORD v1116[6];
  _QWORD v1117[6];
  _QWORD v1118[6];
  _QWORD v1119[6];
  _QWORD v1120[6];
  _QWORD v1121[6];
  _QWORD v1122[6];
  _QWORD v1123[6];
  _QWORD v1124[6];
  _QWORD v1125[6];
  _QWORD v1126[6];
  _QWORD v1127[6];
  _QWORD v1128[6];
  _QWORD v1129[6];
  _QWORD v1130[6];
  _QWORD v1131[6];
  _QWORD v1132[6];
  _QWORD v1133[6];
  _QWORD v1134[6];
  _QWORD v1135[6];
  _QWORD v1136[6];
  _QWORD v1137[6];
  _QWORD v1138[6];
  _QWORD v1139[6];
  _QWORD v1140[6];
  _QWORD v1141[6];
  _QWORD v1142[6];
  _QWORD v1143[6];
  _QWORD v1144[6];
  _QWORD v1145[6];
  _QWORD v1146[6];
  _QWORD v1147[6];
  _QWORD v1148[6];
  _QWORD v1149[6];
  _QWORD v1150[6];
  _QWORD v1151[6];
  _QWORD v1152[6];
  _QWORD v1153[6];
  _QWORD v1154[6];
  _QWORD v1155[6];
  _QWORD v1156[6];
  _QWORD v1157[6];
  _QWORD v1158[6];
  _QWORD v1159[6];
  _QWORD v1160[6];
  _QWORD v1161[6];
  _QWORD v1162[6];
  _QWORD v1163[6];
  _QWORD v1164[6];
  _QWORD v1165[6];
  _QWORD v1166[6];
  _QWORD v1167[6];
  _QWORD v1168[6];
  _QWORD v1169[6];
  _QWORD v1170[6];
  _QWORD v1171[6];
  _QWORD v1172[6];
  _QWORD v1173[6];
  _QWORD v1174[6];
  _QWORD v1175[6];
  _QWORD v1176[6];
  _QWORD v1177[6];
  _QWORD v1178[6];
  _QWORD v1179[6];
  _QWORD v1180[6];
  _QWORD v1181[6];
  _QWORD v1182[6];
  _QWORD v1183[6];
  _QWORD v1184[6];
  _QWORD v1185[6];
  _QWORD v1186[6];
  _QWORD v1187[6];
  _QWORD v1188[6];
  _QWORD v1189[6];
  _QWORD v1190[6];
  _QWORD v1191[6];
  _QWORD v1192[6];
  _QWORD v1193[6];
  _QWORD v1194[6];
  _QWORD v1195[6];
  _QWORD v1196[6];
  _QWORD v1197[6];
  _QWORD v1198[6];
  _QWORD v1199[6];
  _QWORD v1200[6];
  _QWORD v1201[6];
  _QWORD v1202[6];
  _QWORD v1203[6];
  _QWORD v1204[6];
  _QWORD v1205[6];
  _QWORD v1206[6];
  _QWORD v1207[6];
  _QWORD v1208[6];
  _QWORD v1209[6];
  _QWORD v1210[6];
  _QWORD v1211[6];
  _QWORD v1212[6];
  _QWORD v1213[6];
  _QWORD v1214[6];
  _QWORD v1215[6];
  _QWORD v1216[6];
  _QWORD v1217[6];
  _QWORD v1218[6];
  _QWORD v1219[6];
  _QWORD v1220[6];
  _QWORD v1221[6];
  _QWORD v1222[6];
  _QWORD v1223[6];
  _QWORD v1224[6];
  _QWORD v1225[6];
  _QWORD v1226[6];
  _QWORD v1227[6];
  _QWORD v1228[6];
  _QWORD v1229[6];
  _QWORD v1230[6];
  _QWORD v1231[6];
  _QWORD v1232[6];
  _QWORD v1233[6];
  _QWORD v1234[6];
  _QWORD v1235[6];
  _QWORD v1236[6];
  _QWORD v1237[6];
  _QWORD v1238[6];
  _QWORD v1239[6];
  _QWORD v1240[6];
  _QWORD v1241[6];
  _QWORD v1242[6];
  _QWORD v1243[6];
  _QWORD v1244[6];
  _QWORD v1245[6];
  _QWORD v1246[6];
  _QWORD v1247[6];
  _QWORD v1248[6];
  _QWORD v1249[6];
  _QWORD v1250[6];
  _QWORD v1251[6];
  _QWORD v1252[6];
  _QWORD v1253[6];
  _QWORD v1254[6];
  _QWORD v1255[6];
  _QWORD v1256[6];
  _QWORD v1257[6];
  _QWORD v1258[6];
  _QWORD v1259[6];
  _QWORD v1260[6];
  _QWORD v1261[6];
  _QWORD v1262[6];
  _QWORD v1263[6];
  _QWORD v1264[6];
  _QWORD v1265[6];
  _QWORD v1266[6];
  _QWORD v1267[6];
  _QWORD v1268[6];
  _QWORD v1269[6];
  _QWORD v1270[6];
  _QWORD v1271[6];
  _QWORD v1272[6];
  _QWORD v1273[6];
  _QWORD v1274[6];
  _QWORD v1275[6];
  _QWORD v1276[6];
  _QWORD v1277[6];
  _QWORD v1278[6];
  _QWORD v1279[6];
  _QWORD v1280[6];
  _QWORD v1281[6];
  _QWORD v1282[6];
  _QWORD v1283[6];
  _QWORD v1284[6];
  _QWORD v1285[6];
  _QWORD v1286[6];
  _QWORD v1287[6];
  _QWORD v1288[6];
  _QWORD v1289[6];
  _QWORD v1290[6];
  _QWORD v1291[6];
  _QWORD v1292[6];
  _QWORD v1293[6];
  _QWORD v1294[6];
  _QWORD v1295[6];
  _QWORD v1296[6];
  _QWORD v1297[6];
  _QWORD v1298[6];
  _QWORD v1299[6];
  _QWORD v1300[6];
  _QWORD v1301[6];
  _QWORD v1302[6];
  _QWORD v1303[6];
  _QWORD v1304[6];
  _QWORD v1305[6];
  _QWORD v1306[6];
  _QWORD v1307[6];
  _QWORD v1308[6];
  _QWORD v1309[6];
  _QWORD v1310[6];
  _QWORD v1311[6];
  _QWORD v1312[6];
  _QWORD v1313[6];
  _QWORD v1314[6];
  _QWORD v1315[6];
  _QWORD v1316[6];
  _QWORD v1317[6];
  _QWORD v1318[6];
  _QWORD v1319[6];
  _QWORD v1320[6];
  _QWORD v1321[6];
  _QWORD v1322[6];
  _QWORD v1323[6];
  _QWORD v1324[6];
  _QWORD v1325[6];
  _QWORD v1326[6];
  _QWORD v1327[6];
  _QWORD v1328[6];
  _QWORD v1329[6];
  _QWORD v1330[6];
  _QWORD v1331[6];
  _QWORD v1332[6];
  _QWORD v1333[6];
  _QWORD v1334[6];
  _QWORD v1335[6];
  _QWORD v1336[6];
  _QWORD v1337[6];
  _QWORD v1338[6];
  _QWORD v1339[6];
  _QWORD v1340[6];
  _QWORD v1341[6];
  _QWORD v1342[6];
  _QWORD v1343[6];
  _QWORD v1344[6];
  _QWORD v1345[6];
  _QWORD v1346[6];
  _QWORD v1347[6];
  _QWORD v1348[6];
  _QWORD v1349[6];
  _QWORD v1350[6];
  _QWORD v1351[6];
  _QWORD v1352[6];
  _QWORD v1353[6];
  _QWORD v1354[6];
  _QWORD v1355[6];
  _QWORD v1356[6];
  _QWORD v1357[6];
  _QWORD v1358[6];
  _QWORD v1359[6];
  _QWORD v1360[6];
  _QWORD v1361[6];
  _QWORD v1362[6];
  _QWORD v1363[6];
  _QWORD v1364[6];
  _QWORD v1365[6];
  _QWORD v1366[6];
  _QWORD v1367[6];
  _QWORD v1368[6];
  _QWORD v1369[6];
  _QWORD v1370[6];
  _QWORD v1371[6];
  _QWORD v1372[6];
  _QWORD v1373[6];
  _QWORD v1374[6];
  _QWORD v1375[6];
  _QWORD v1376[6];
  _QWORD v1377[6];
  _QWORD v1378[6];
  _QWORD v1379[6];
  _QWORD v1380[6];
  _QWORD v1381[6];
  _QWORD v1382[6];
  _QWORD v1383[6];
  _QWORD v1384[6];
  _QWORD v1385[6];
  _QWORD v1386[6];
  _QWORD v1387[6];
  _QWORD v1388[6];
  _QWORD v1389[6];
  _QWORD v1390[6];
  _QWORD v1391[6];
  _QWORD v1392[6];
  _QWORD v1393[6];
  _QWORD v1394[6];
  _QWORD v1395[6];
  _QWORD v1396[6];
  _QWORD v1397[6];
  _QWORD v1398[6];
  _QWORD v1399[6];
  _QWORD v1400[6];
  _QWORD v1401[6];
  _QWORD v1402[6];
  _QWORD v1403[6];
  _QWORD v1404[6];
  _QWORD v1405[6];
  _QWORD v1406[6];
  _QWORD v1407[6];
  _QWORD v1408[6];
  _QWORD v1409[6];
  _QWORD v1410[6];
  _QWORD v1411[6];
  _QWORD v1412[6];
  _QWORD v1413[6];
  _QWORD v1414[6];
  _QWORD v1415[6];
  _QWORD v1416[6];
  _QWORD v1417[6];
  _QWORD v1418[6];
  _QWORD v1419[6];
  _QWORD v1420[6];
  _QWORD v1421[6];
  _QWORD v1422[6];
  _QWORD v1423[6];
  _QWORD v1424[6];
  _QWORD v1425[6];
  _QWORD v1426[6];
  _QWORD v1427[6];
  _QWORD v1428[6];
  _QWORD v1429[6];
  _QWORD v1430[6];
  _QWORD v1431[6];
  _QWORD v1432[6];
  _QWORD v1433[6];
  _QWORD v1434[6];
  _QWORD v1435[6];
  _QWORD v1436[6];
  _QWORD v1437[6];
  _QWORD v1438[6];
  _QWORD v1439[6];
  _QWORD v1440[6];
  _QWORD v1441[6];
  _QWORD v1442[6];
  _QWORD v1443[6];
  _QWORD v1444[6];
  _QWORD v1445[6];
  _QWORD v1446[6];
  _QWORD v1447[6];
  _QWORD v1448[6];
  _QWORD v1449[6];
  _QWORD v1450[6];
  _QWORD v1451[6];
  _QWORD v1452[6];
  _QWORD v1453[6];
  _QWORD v1454[6];
  _QWORD v1455[6];
  _QWORD v1456[6];
  _QWORD v1457[6];
  _QWORD v1458[6];
  _QWORD v1459[6];
  _QWORD v1460[6];
  _QWORD v1461[6];
  _QWORD v1462[6];
  _QWORD v1463[6];
  _QWORD v1464[6];
  _QWORD v1465[6];
  _QWORD v1466[6];
  _QWORD v1467[6];
  _QWORD v1468[6];
  _QWORD v1469[6];
  _QWORD v1470[6];
  _QWORD v1471[6];
  _QWORD v1472[6];
  _QWORD v1473[6];
  _QWORD v1474[6];
  _QWORD v1475[6];
  _QWORD v1476[6];
  _QWORD v1477[6];
  _QWORD v1478[6];
  _QWORD v1479[6];
  _QWORD v1480[6];
  _QWORD v1481[6];
  _QWORD v1482[6];
  _QWORD v1483[6];
  _QWORD v1484[6];
  _QWORD v1485[6];
  _QWORD v1486[6];
  _QWORD v1487[6];
  _QWORD v1488[6];
  _QWORD v1489[6];
  _QWORD v1490[6];
  _QWORD v1491[6];
  _QWORD v1492[6];
  _QWORD v1493[6];
  _QWORD v1494[6];
  _QWORD v1495[6];
  _QWORD v1496[6];
  _QWORD v1497[6];
  _QWORD v1498[6];
  _QWORD v1499[6];
  _QWORD v1500[6];
  _QWORD v1501[6];
  _QWORD v1502[6];
  _QWORD v1503[6];
  _QWORD v1504[6];
  _QWORD v1505[6];
  _QWORD v1506[6];
  _QWORD v1507[6];
  _QWORD v1508[6];
  _QWORD v1509[6];
  _QWORD v1510[6];
  _QWORD v1511[6];
  _QWORD v1512[6];
  _QWORD v1513[6];
  _QWORD v1514[6];
  _QWORD v1515[6];
  _QWORD v1516[6];
  _QWORD v1517[6];
  _QWORD v1518[6];
  _QWORD v1519[6];
  _QWORD v1520[6];
  _QWORD v1521[6];
  _QWORD v1522[6];
  _QWORD v1523[6];
  _QWORD v1524[6];
  _QWORD v1525[6];
  _QWORD v1526[6];
  _QWORD v1527[6];
  _QWORD v1528[6];
  _QWORD v1529[6];
  _QWORD v1530[6];
  _QWORD v1531[6];
  _QWORD v1532[6];
  _QWORD v1533[6];
  _QWORD v1534[6];
  _QWORD v1535[6];
  _QWORD v1536[6];
  _QWORD v1537[6];
  _QWORD v1538[6];
  _QWORD v1539[6];
  _QWORD v1540[6];
  _QWORD v1541[6];
  _QWORD v1542[6];
  _QWORD v1543[6];
  _QWORD v1544[6];
  _QWORD v1545[6];
  _QWORD v1546[6];
  _QWORD v1547[6];
  _QWORD v1548[6];
  _QWORD v1549[6];
  _QWORD v1550[6];
  _QWORD v1551[6];
  _QWORD v1552[6];
  _QWORD v1553[6];
  _QWORD v1554[6];
  _QWORD v1555[6];
  _QWORD v1556[6];
  _QWORD v1557[6];
  _QWORD v1558[6];
  _QWORD v1559[6];
  _QWORD v1560[6];
  _QWORD v1561[6];
  _QWORD v1562[6];
  _QWORD v1563[6];
  _QWORD v1564[6];
  _QWORD v1565[6];
  _QWORD v1566[6];
  _QWORD v1567[6];
  _QWORD v1568[6];
  _QWORD v1569[6];
  _QWORD v1570[6];
  _QWORD v1571[6];
  _QWORD v1572[6];
  _QWORD v1573[6];
  _QWORD v1574[6];
  _QWORD v1575[6];
  _QWORD v1576[6];
  _QWORD v1577[6];
  _QWORD v1578[6];
  _QWORD v1579[6];
  _QWORD v1580[6];
  _QWORD v1581[6];
  _QWORD v1582[6];
  _QWORD v1583[6];
  _QWORD v1584[6];
  _QWORD v1585[6];
  _QWORD v1586[6];
  _QWORD v1587[6];
  _QWORD v1588[6];
  _QWORD v1589[6];
  _QWORD v1590[6];
  _QWORD v1591[6];
  _QWORD v1592[6];
  _QWORD v1593[6];
  _QWORD v1594[6];
  _QWORD v1595[6];
  _QWORD v1596[6];
  _QWORD v1597[6];
  _QWORD v1598[6];
  _QWORD v1599[6];
  _QWORD v1600[6];
  _QWORD v1601[6];
  _QWORD v1602[6];
  _QWORD v1603[6];
  _QWORD v1604[6];
  _QWORD v1605[6];
  _QWORD v1606[6];
  _QWORD v1607[6];
  _QWORD v1608[6];
  _QWORD v1609[6];
  _QWORD v1610[6];
  _QWORD v1611[6];
  _QWORD v1612[6];
  _QWORD v1613[6];
  _QWORD v1614[6];
  _QWORD v1615[6];
  _QWORD v1616[6];
  _QWORD v1617[6];
  _QWORD v1618[6];
  _QWORD v1619[6];
  _QWORD v1620[6];
  _QWORD v1621[6];
  _QWORD v1622[6];
  _QWORD v1623[6];
  _QWORD v1624[6];
  _QWORD v1625[6];
  _QWORD v1626[6];
  _QWORD v1627[6];
  _QWORD v1628[6];
  _QWORD v1629[6];
  _QWORD v1630[6];
  _QWORD v1631[6];
  _QWORD v1632[6];
  _QWORD v1633[6];
  _QWORD v1634[6];
  _QWORD v1635[6];
  _QWORD v1636[6];
  _QWORD v1637[6];
  _QWORD v1638[6];
  _QWORD v1639[6];
  _QWORD v1640[6];
  _QWORD v1641[6];
  _QWORD v1642[6];
  _QWORD v1643[6];
  _QWORD v1644[6];
  _QWORD v1645[6];
  _QWORD v1646[6];
  _QWORD v1647[6];
  _QWORD v1648[6];
  _QWORD v1649[6];
  _QWORD v1650[6];
  _QWORD v1651[6];
  _QWORD v1652[6];
  _QWORD v1653[6];
  _QWORD v1654[6];
  _QWORD v1655[6];
  _QWORD v1656[6];
  _QWORD v1657[6];
  _QWORD v1658[6];
  _QWORD v1659[6];
  _QWORD v1660[6];
  _QWORD v1661[6];
  _QWORD v1662[6];
  _QWORD v1663[6];
  _QWORD v1664[6];
  _QWORD v1665[6];
  _QWORD v1666[6];
  _QWORD v1667[6];
  _QWORD v1668[6];
  _QWORD v1669[6];
  _QWORD v1670[6];
  _QWORD v1671[6];
  _QWORD v1672[6];
  _QWORD v1673[6];
  _QWORD v1674[6];
  _QWORD v1675[6];
  _QWORD v1676[6];
  _QWORD v1677[6];
  _QWORD v1678[6];
  _QWORD v1679[6];
  _QWORD v1680[6];
  _QWORD v1681[6];
  _QWORD v1682[6];
  _QWORD v1683[6];
  _QWORD v1684[6];
  _QWORD v1685[6];
  _QWORD v1686[6];
  _QWORD v1687[6];
  _QWORD v1688[6];
  _QWORD v1689[6];
  _QWORD v1690[6];
  _QWORD v1691[6];
  _QWORD v1692[6];
  _QWORD v1693[6];
  _QWORD v1694[6];
  _QWORD v1695[6];
  _QWORD v1696[6];
  _QWORD v1697[6];
  _QWORD v1698[6];
  _QWORD v1699[6];
  _QWORD v1700[6];
  _QWORD v1701[6];
  _QWORD v1702[6];
  _QWORD v1703[6];
  _QWORD v1704[6];
  _QWORD v1705[6];
  _QWORD v1706[6];
  _QWORD v1707[6];
  _QWORD v1708[6];
  _QWORD v1709[6];
  _QWORD v1710[6];
  _QWORD v1711[6];
  _QWORD v1712[6];
  _QWORD v1713[6];
  _QWORD v1714[6];
  _QWORD v1715[6];
  _QWORD v1716[6];
  _QWORD v1717[6];
  _QWORD v1718[6];
  _QWORD v1719[6];
  _QWORD v1720[6];
  _QWORD v1721[6];
  _QWORD v1722[6];
  _QWORD v1723[6];
  _QWORD v1724[6];
  _QWORD v1725[6];
  _QWORD v1726[6];
  _QWORD v1727[6];
  _QWORD v1728[6];
  _QWORD v1729[6];
  _QWORD v1730[6];
  _QWORD v1731[6];
  _QWORD v1732[6];
  _QWORD v1733[6];
  _QWORD v1734[6];
  _QWORD v1735[6];
  _QWORD v1736[6];
  _QWORD v1737[6];
  _QWORD v1738[6];
  _QWORD v1739[6];
  _QWORD v1740[6];
  _QWORD v1741[6];
  _QWORD v1742[6];
  _QWORD v1743[6];
  _QWORD v1744[6];
  _QWORD v1745[6];
  _QWORD v1746[6];
  _QWORD v1747[6];
  _QWORD v1748[6];
  _QWORD v1749[6];
  _QWORD v1750[6];
  _QWORD v1751[6];
  _QWORD v1752[6];
  _QWORD v1753[6];
  _QWORD v1754[6];
  _QWORD v1755[6];
  _QWORD v1756[6];
  _QWORD v1757[6];
  _QWORD v1758[6];
  _QWORD v1759[6];
  _QWORD v1760[6];
  _QWORD v1761[6];
  _QWORD v1762[6];
  _QWORD v1763[6];
  _QWORD v1764[6];
  _QWORD v1765[6];
  _QWORD v1766[6];
  _QWORD v1767[6];
  _QWORD v1768[6];
  _QWORD v1769[6];
  _QWORD v1770[6];
  _QWORD v1771[6];
  _QWORD v1772[6];
  _QWORD v1773[6];
  _QWORD v1774[6];
  _QWORD v1775[6];
  _QWORD v1776[6];
  _QWORD v1777[6];
  _QWORD v1778[6];
  _QWORD v1779[6];
  _QWORD v1780[6];
  _QWORD v1781[6];
  _QWORD v1782[6];
  _QWORD v1783[6];
  _QWORD v1784[6];
  _QWORD v1785[6];
  _QWORD v1786[6];
  _QWORD v1787[6];
  _QWORD v1788[6];
  _QWORD v1789[6];
  _QWORD v1790[6];
  _QWORD v1791[6];
  _QWORD v1792[6];
  _QWORD v1793[6];
  _QWORD v1794[6];
  _QWORD v1795[6];
  _QWORD v1796[6];
  _QWORD v1797[6];
  _QWORD v1798[6];
  _QWORD v1799[6];
  _QWORD v1800[6];
  _QWORD v1801[6];
  _QWORD v1802[6];
  _QWORD v1803[6];
  _QWORD v1804[6];
  _QWORD v1805[6];
  _QWORD v1806[6];
  _QWORD v1807[6];
  _QWORD v1808[6];
  _QWORD v1809[7];

  v1 = (_QWORD *)MEMORY[0x1E0C80A78](this);
  v1809[6] = *MEMORY[0x1E0C80C00];
  if ((v2 & 1) == 0
  {
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v5, "\u200Fينتاك", "ي***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v6, "\u200Fوللكسكوس", "و******س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v7, "\u200Fوللكساس", "و*****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v8, "\u200Fوللكس", "و***س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v9, "\u200Fوللشرموطة", "و*******ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v10, "\u200Fوللشرموطات", "و********ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v11, "\u200Fوللزوب", "و****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v12, "\u200Fوللزباب", "و*****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v13, "\u200Fوللزب", "و***ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v14, "\u200Fوللخروات", "و******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v15, "\u200Fوللخرة", "و****ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v16, "\u200Fولكسي", "و***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v17, "\u200Fولكسهن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v18, "\u200Fولكسهم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v19, "\u200Fولكسها", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v20, "\u200Fولكسه", "و***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v21, "\u200Fولكسنا", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v22, "\u200Fولكسكوسي", "و******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v23, "\u200Fولكسكوسهن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v24, "\u200Fولكسكوسهم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v25, "\u200Fولكسكوسها", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v26, "\u200Fولكسكوسه", "و******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v27, "\u200Fولكسكوسنا", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v28, "\u200Fولكسكوسكن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v29, "\u200Fولكسكوسكم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v30, "\u200Fولكسكوسك", "و******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v31, "\u200Fولكسكوس", "و*****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v32, "\u200Fولكسكن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v33, "\u200Fولكسكم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v34, "\u200Fولكسك", "و***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v35, "\u200Fولكساسي", "و*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v36, "\u200Fولكساسهن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v37, "\u200Fولكساسهم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v38, "\u200Fولكساسها", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v39, "\u200Fولكساسه", "و*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v40, "\u200Fولكساسنا", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v41, "\u200Fولكساسكن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v42, "\u200Fولكساسكم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v43, "\u200Fولكساسك", "و*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v44, "\u200Fولكساس", "و****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v45, "\u200Fولكس", "و**س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v46, "\u200Fولشرموطتي", "و*******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v47, "\u200Fولشرموطتهن", "و********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v48, "\u200Fولشرموطتهم", "و********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v49, "\u200Fولشرموطتها", "و********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v50, "\u200Fولشرموطته", "و*******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v51, "\u200Fولشرموطتنا", "و********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v52, "\u200Fولشرموطتكن", "و********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v53, "\u200Fولشرموطتكم", "و********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v54, "\u200Fولشرموطتك", "و*******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v55, "\u200Fولشرموطة", "و******ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v56, "\u200Fولشرموطاتي", "و********ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[26],char const(&)[14],0>(v57, "\u200Fولشرموطاتهن", "و*********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[26],char const(&)[14],0>(v58, "\u200Fولشرموطاتهم", "و*********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[26],char const(&)[14],0>(v59, "\u200Fولشرموطاتها", "و*********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v60, "\u200Fولشرموطاته", "و********ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[26],char const(&)[14],0>(v61, "\u200Fولشرموطاتنا", "و*********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[26],char const(&)[14],0>(v62, "\u200Fولشرموطاتكن", "و*********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[26],char const(&)[14],0>(v63, "\u200Fولشرموطاتكم", "و*********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v64, "\u200Fولشرموطاتك", "و********ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v65, "\u200Fولشرموطات", "و*******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v66, "\u200Fولزوبي", "و****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v67, "\u200Fولزوبهن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v68, "\u200Fولزوبهم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v69, "\u200Fولزوبها", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v70, "\u200Fولزوبه", "و****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v71, "\u200Fولزوبنا", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v72, "\u200Fولزوبكن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v73, "\u200Fولزوبكم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v74, "\u200Fولزوبك", "و****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v75, "\u200Fولزوب", "و***ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v76, "\u200Fولزبي", "و***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v77, "\u200Fولزبهن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v78, "\u200Fولزبهم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v79, "\u200Fولزبها", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v80, "\u200Fولزبه", "و***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v81, "\u200Fولزبنا", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v82, "\u200Fولزبكن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v83, "\u200Fولزبكم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v84, "\u200Fولزبك", "و***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v85, "\u200Fولزبابي", "و*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v86, "\u200Fولزبابهن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v87, "\u200Fولزبابهم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v88, "\u200Fولزبابها", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v89, "\u200Fولزبابه", "و*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v90, "\u200Fولزبابنا", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v91, "\u200Fولزبابكن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v92, "\u200Fولزبابكم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v93, "\u200Fولزبابك", "و*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v94, "\u200Fولزباب", "و****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v95, "\u200Fولزب", "و**ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v96, "\u200Fولخرواتي", "و******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v97, "\u200Fولخرواتهن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v98, "\u200Fولخرواتهم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v99, "\u200Fولخرواتها", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v100, "\u200Fولخرواته", "و******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v101, "\u200Fولخرواتنا", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v102, "\u200Fولخرواتكن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v103, "\u200Fولخرواتكم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v104, "\u200Fولخرواتك", "و******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v105, "\u200Fولخروات", "و*****ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v106, "\u200Fولخرتي", "و****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v107, "\u200Fولخرتهن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v108, "\u200Fولخرتهم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v109, "\u200Fولخرتها", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v110, "\u200Fولخرته", "و****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v111, "\u200Fولخرتنا", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v112, "\u200Fولخرتكن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v113, "\u200Fولخرتكم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v114, "\u200Fولخرتك", "و****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v115, "\u200Fولخرة", "و***ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v116, "\u200Fوككسي", "و***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v117, "\u200Fوككسهن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v118, "\u200Fوككسهم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v119, "\u200Fوككسها", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v120, "\u200Fوككسه", "و***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v121, "\u200Fوككسنا", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v122, "\u200Fوككسكوسي", "و******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v123, "\u200Fوككسكوسهن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v124, "\u200Fوككسكوسهم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v125, "\u200Fوككسكوسها", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v126, "\u200Fوككسكوسه", "و******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v127, "\u200Fوككسكوسنا", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v128, "\u200Fوككسكوسكن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v129, "\u200Fوككسكوسكم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v130, "\u200Fوككسكوسك", "و******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v131, "\u200Fوككسكوس", "و*****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v132, "\u200Fوككسكن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v133, "\u200Fوككسكم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v134, "\u200Fوككسك", "و***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v135, "\u200Fوككساسي", "و*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v136, "\u200Fوككساسهن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v137, "\u200Fوككساسهم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v138, "\u200Fوككساسها", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v139, "\u200Fوككساسه", "و*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v140, "\u200Fوككساسنا", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v141, "\u200Fوككساسكن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v142, "\u200Fوككساسكم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v143, "\u200Fوككساسك", "و*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v144, "\u200Fوككساس", "و****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v145, "\u200Fوككس", "و**س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v146, "\u200Fوكشرموطتي", "و*******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v147, "\u200Fوكشرموطتهن", "و********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v148, "\u200Fوكشرموطتهم", "و********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v149, "\u200Fوكشرموطتها", "و********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v150, "\u200Fوكشرموطته", "و*******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v151, "\u200Fوكشرموطتنا", "و********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v152, "\u200Fوكشرموطتكن", "و********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v153, "\u200Fوكشرموطتكم", "و********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v154, "\u200Fوكشرموطتك", "و*******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v155, "\u200Fوكشرموطة", "و******ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v156, "\u200Fوكشرموطاتي", "و********ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[26],char const(&)[14],0>(v157, "\u200Fوكشرموطاتهن", "و*********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[26],char const(&)[14],0>(v158, "\u200Fوكشرموطاتهم", "و*********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[26],char const(&)[14],0>(v159, "\u200Fوكشرموطاتها", "و*********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v160, "\u200Fوكشرموطاته", "و********ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[26],char const(&)[14],0>(v161, "\u200Fوكشرموطاتنا", "و*********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[26],char const(&)[14],0>(v162, "\u200Fوكشرموطاتكن", "و*********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[26],char const(&)[14],0>(v163, "\u200Fوكشرموطاتكم", "و*********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v164, "\u200Fوكشرموطاتك", "و********ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v165, "\u200Fوكشرموطات", "و*******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v166, "\u200Fوكسي", "و**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v167, "\u200Fوكسهن", "و***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v168, "\u200Fوكسهم", "و***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v169, "\u200Fوكسها", "و***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v170, "\u200Fوكسه", "و**ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v171, "\u200Fوكسنا", "و***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v172, "\u200Fوكسكوسي", "و*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v173, "\u200Fوكسكوسهن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v174, "\u200Fوكسكوسهم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v175, "\u200Fوكسكوسها", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v176, "\u200Fوكسكوسه", "و*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v177, "\u200Fوكسكوسنا", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v178, "\u200Fوكسكوسكن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v179, "\u200Fوكسكوسكم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v180, "\u200Fوكسكوسك", "و*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v181, "\u200Fوكسكوس", "و****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v182, "\u200Fوكسكن", "و***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v183, "\u200Fوكسكم", "و***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v184, "\u200Fوكسك", "و**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v185, "\u200Fوكساسي", "و****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v186, "\u200Fوكساسهن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v187, "\u200Fوكساسهم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v188, "\u200Fوكساسها", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v189, "\u200Fوكساسه", "و****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v190, "\u200Fوكساسنا", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v191, "\u200Fوكساسكن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v192, "\u200Fوكساسكم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v193, "\u200Fوكساسك", "و****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v194, "\u200Fوكساس", "و***س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v195, "\u200Fوكس", "و*س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v196, "\u200Fوكزوبي", "و****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v197, "\u200Fوكزوبهن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v198, "\u200Fوكزوبهم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v199, "\u200Fوكزوبها", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v200, "\u200Fوكزوبه", "و****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v201, "\u200Fوكزوبنا", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v202, "\u200Fوكزوبكن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v203, "\u200Fوكزوبكم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v204, "\u200Fوكزوبك", "و****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v205, "\u200Fوكزوب", "و***ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v206, "\u200Fوكزبي", "و***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v207, "\u200Fوكزبهن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v208, "\u200Fوكزبهم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v209, "\u200Fوكزبها", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v210, "\u200Fوكزبه", "و***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v211, "\u200Fوكزبنا", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v212, "\u200Fوكزبكن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v213, "\u200Fوكزبكم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v214, "\u200Fوكزبك", "و***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v215, "\u200Fوكزبابي", "و*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v216, "\u200Fوكزبابهن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v217, "\u200Fوكزبابهم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v218, "\u200Fوكزبابها", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v219, "\u200Fوكزبابه", "و*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v220, "\u200Fوكزبابنا", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v221, "\u200Fوكزبابكن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v222, "\u200Fوكزبابكم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v223, "\u200Fوكزبابك", "و*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v224, "\u200Fوكزباب", "و****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v225, "\u200Fوكزب", "و**ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v226, "\u200Fوكخرواتي", "و******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v227, "\u200Fوكخرواتهن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v228, "\u200Fوكخرواتهم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v229, "\u200Fوكخرواتها", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v230, "\u200Fوكخرواته", "و******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v231, "\u200Fوكخرواتنا", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v232, "\u200Fوكخرواتكن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v233, "\u200Fوكخرواتكم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v234, "\u200Fوكخرواتك", "و******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v235, "\u200Fوكخروات", "و*****ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v236, "\u200Fوكخرتهن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v237, "\u200Fوكخرتهم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v238, "\u200Fوكخرتها", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v239, "\u200Fوكخرتنا", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v240, "\u200Fوكخرتكن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v241, "\u200Fوكخرتكم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v242, "\u200Fوكخرة", "و***ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v243, "\u200Fوكالكسكوس", "و*******س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v244, "\u200Fوكالكساس", "و******س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v245, "\u200Fوكالكس", "و****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v246, "\u200Fوكالشرموطة", "و********ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[26],char const(&)[14],0>(v247, "\u200Fوكالشرموطات", "و*********ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v248, "\u200Fوكالزوب", "و*****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v249, "\u200Fوكالزباب", "و******ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v250, "\u200Fوكالزب", "و****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v251, "\u200Fوكالخروات", "و*******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v252, "\u200Fوكالخرة", "و*****ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v253, "\u200Fوشرموطتي", "و******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v254, "\u200Fوشرموطتهن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v255, "\u200Fوشرموطتهم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v256, "\u200Fوشرموطتها", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v257, "\u200Fوشرموطته", "و******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v258, "\u200Fوشرموطتنا", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v259, "\u200Fوشرموطتكن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v260, "\u200Fوشرموطتكم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v261, "\u200Fوشرموطتك", "و******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v262, "\u200Fوشرموطة", "و*****ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v263, "\u200Fوشرموطاتي", "و*******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v264, "\u200Fوشرموطاتهن", "و********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v265, "\u200Fوشرموطاتهم", "و********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v266, "\u200Fوشرموطاتها", "و********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v267, "\u200Fوشرموطاته", "و*******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v268, "\u200Fوشرموطاتنا", "و********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v269, "\u200Fوشرموطاتكن", "و********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v270, "\u200Fوشرموطاتكم", "و********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v271, "\u200Fوشرموطاتك", "و*******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v272, "\u200Fوشرموطات", "و******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v273, "\u200Fوزوبي", "و***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v274, "\u200Fوزوبهن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v275, "\u200Fوزوبهم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v276, "\u200Fوزوبها", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v277, "\u200Fوزوبه", "و***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v278, "\u200Fوزوبنا", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v279, "\u200Fوزوبكن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v280, "\u200Fوزوبكم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v281, "\u200Fوزوبك", "و***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v282, "\u200Fوزوب", "و**ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v283, "\u200Fوزبي", "و**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v284, "\u200Fوزبهن", "و***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v285, "\u200Fوزبهم", "و***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v286, "\u200Fوزبها", "و***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v287, "\u200Fوزبه", "و**ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v288, "\u200Fوزبنا", "و***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v289, "\u200Fوزبكن", "و***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v290, "\u200Fوزبكم", "و***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v291, "\u200Fوزبك", "و**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v292, "\u200Fوزبابي", "و****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v293, "\u200Fوزبابهن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v294, "\u200Fوزبابهم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v295, "\u200Fوزبابها", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v296, "\u200Fوزبابه", "و****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v297, "\u200Fوزبابنا", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v298, "\u200Fوزبابكن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v299, "\u200Fوزبابكم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v300, "\u200Fوزبابك", "و****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v301, "\u200Fوزباب", "و***ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v302, "\u200Fوزب", "و*ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v303, "\u200Fوخرواتي", "و*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v304, "\u200Fوخرواتهن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v305, "\u200Fوخرواتهم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v306, "\u200Fوخرواتها", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v307, "\u200Fوخرواته", "و*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v308, "\u200Fوخرواتنا", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v309, "\u200Fوخرواتكن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v310, "\u200Fوخرواتكم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v311, "\u200Fوخرواتك", "و*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v312, "\u200Fوخروات", "و****ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v313, "\u200Fوخرتي", "و***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v314, "\u200Fوخرته", "و***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v315, "\u200Fوخرتك", "و***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v316, "\u200Fوخرة", "و**ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v317, "\u200Fوبكسي", "و***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v318, "\u200Fوبكسهن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v319, "\u200Fوبكسهم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v320, "\u200Fوبكسها", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v321, "\u200Fوبكسه", "و***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v322, "\u200Fوبكسنا", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v323, "\u200Fوبكسكوسي", "و******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v324, "\u200Fوبكسكوسهن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v325, "\u200Fوبكسكوسهم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v326, "\u200Fوبكسكوسها", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v327, "\u200Fوبكسكوسه", "و******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v328, "\u200Fوبكسكوسنا", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v329, "\u200Fوبكسكوسكن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v330, "\u200Fوبكسكوسكم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v331, "\u200Fوبكسكوسك", "و******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v332, "\u200Fوبكسكوس", "و*****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v333, "\u200Fوبكسكن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v334, "\u200Fوبكسكم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v335, "\u200Fوبكسك", "و***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v336, "\u200Fوبكساسي", "و*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v337, "\u200Fوبكساسهن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v338, "\u200Fوبكساسهم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v339, "\u200Fوبكساسها", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v340, "\u200Fوبكساسه", "و*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v341, "\u200Fوبكساسنا", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v342, "\u200Fوبكساسكن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v343, "\u200Fوبكساسكم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v344, "\u200Fوبكساسك", "و*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v345, "\u200Fوبكساس", "و****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v346, "\u200Fوبكس", "و**س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v347, "\u200Fوبشرموطتي", "و*******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v348, "\u200Fوبشرموطتهن", "و********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v349, "\u200Fوبشرموطتهم", "و********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v350, "\u200Fوبشرموطتها", "و********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v351, "\u200Fوبشرموطته", "و*******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v352, "\u200Fوبشرموطتنا", "و********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v353, "\u200Fوبشرموطتكن", "و********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v354, "\u200Fوبشرموطتكم", "و********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v355, "\u200Fوبشرموطتك", "و*******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v356, "\u200Fوبشرموطة", "و******ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v357, "\u200Fوبشرموطاتي", "و********ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[26],char const(&)[14],0>(v358, "\u200Fوبشرموطاتهن", "و*********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[26],char const(&)[14],0>(v359, "\u200Fوبشرموطاتهم", "و*********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[26],char const(&)[14],0>(v360, "\u200Fوبشرموطاتها", "و*********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v361, "\u200Fوبشرموطاته", "و********ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[26],char const(&)[14],0>(v362, "\u200Fوبشرموطاتنا", "و*********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[26],char const(&)[14],0>(v363, "\u200Fوبشرموطاتكن", "و*********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[26],char const(&)[14],0>(v364, "\u200Fوبشرموطاتكم", "و*********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v365, "\u200Fوبشرموطاتك", "و********ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v366, "\u200Fوبشرموطات", "و*******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v367, "\u200Fوبزوبي", "و****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v368, "\u200Fوبزوبهن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v369, "\u200Fوبزوبهم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v370, "\u200Fوبزوبها", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v371, "\u200Fوبزوبه", "و****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v372, "\u200Fوبزوبنا", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v373, "\u200Fوبزوبكن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v374, "\u200Fوبزوبكم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v375, "\u200Fوبزوبك", "و****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v376, "\u200Fوبزوب", "و***ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v377, "\u200Fوبزبي", "و***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v378, "\u200Fوبزبهن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v379, "\u200Fوبزبهم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v380, "\u200Fوبزبها", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v381, "\u200Fوبزبه", "و***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v382, "\u200Fوبزبنا", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v383, "\u200Fوبزبكن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v384, "\u200Fوبزبكم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v385, "\u200Fوبزبك", "و***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v386, "\u200Fوبزبابي", "و*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v387, "\u200Fوبزبابهن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v388, "\u200Fوبزبابهم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v389, "\u200Fوبزبابها", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v390, "\u200Fوبزبابه", "و*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v391, "\u200Fوبزبابنا", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v392, "\u200Fوبزبابكن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v393, "\u200Fوبزبابكم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v394, "\u200Fوبزبابك", "و*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v395, "\u200Fوبزباب", "و****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v396, "\u200Fوبزب", "و**ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v397, "\u200Fوبخرواتي", "و******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v398, "\u200Fوبخرواتهن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v399, "\u200Fوبخرواتهم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v400, "\u200Fوبخرواتها", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v401, "\u200Fوبخرواته", "و******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v402, "\u200Fوبخرواتنا", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v403, "\u200Fوبخرواتكن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v404, "\u200Fوبخرواتكم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v405, "\u200Fوبخرواتك", "و******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v406, "\u200Fوبخروات", "و*****ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v407, "\u200Fوبخرتهم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v408, "\u200Fوبخرة", "و***ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v409, "\u200Fوبالكسكوس", "و*******س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v410, "\u200Fوبالكساس", "و******س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v411, "\u200Fوبالكس", "و****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v412, "\u200Fوبالشرموطة", "و********ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[26],char const(&)[14],0>(v413, "\u200Fوبالشرموطات", "و*********ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v414, "\u200Fوبالزوب", "و*****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v415, "\u200Fوبالزباب", "و******ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v416, "\u200Fوبالزب", "و****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v417, "\u200Fوبالخروات", "و*******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v418, "\u200Fوبالخرة", "و*****ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v419, "\u200Fوالكسكوس", "و******س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v420, "\u200Fوالكساس", "و*****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v421, "\u200Fوالكس", "و***س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v422, "\u200Fوالشرموطة", "و*******ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v423, "\u200Fوالشرموطات", "و********ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v424, "\u200Fوالزوب", "و****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v425, "\u200Fوالزباب", "و*****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v426, "\u200Fوالزب", "و***ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v427, "\u200Fوالخروات", "و******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v428, "\u200Fوالخرة", "و****ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v429, "\u200Fنيكيني", "ن****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v430, "\u200Fنيكني", "ن***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v431, "\u200Fنيك", "ن*ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v432, "\u200Fنياكة", "ن***ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v433, "\u200Fللكسكوس", "ل*****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v434, "\u200Fللكساس", "ل****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v435, "\u200Fللكس", "ل**س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v436, "\u200Fللشرموطة", "ل******ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v437, "\u200Fللشرموطات", "ل*******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v438, "\u200Fللزوب", "ل***ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v439, "\u200Fللزباب", "ل****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v440, "\u200Fللزب", "ل**ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v441, "\u200Fللخروات", "ل*****ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v442, "\u200Fللخرة", "ل***ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v443, "\u200Fلكسي", "ل**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v444, "\u200Fلكسهن", "ل***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v445, "\u200Fلكسهم", "ل***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v446, "\u200Fلكسها", "ل***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v447, "\u200Fلكسه", "ل**ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v448, "\u200Fلكسنا", "ل***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v449, "\u200Fلكسكوسي", "ل*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v450, "\u200Fلكسكوسهن", "ل******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v451, "\u200Fلكسكوسهم", "ل******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v452, "\u200Fلكسكوسها", "ل******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v453, "\u200Fلكسكوسه", "ل*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v454, "\u200Fلكسكوسنا", "ل******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v455, "\u200Fلكسكوسكن", "ل******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v456, "\u200Fلكسكوسكم", "ل******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v457, "\u200Fلكسكوسك", "ل*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v458, "\u200Fلكسكوس", "ل****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v459, "\u200Fلكسكن", "ل***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v460, "\u200Fلكسكم", "ل***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v461, "\u200Fلكسك", "ل**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v462, "\u200Fلكساسي", "ل****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v463, "\u200Fلكساسهن", "ل*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v464, "\u200Fلكساسهم", "ل*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v465, "\u200Fلكساسها", "ل*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v466, "\u200Fلكساسه", "ل****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v467, "\u200Fلكساسنا", "ل*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v468, "\u200Fلكساسكن", "ل*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v469, "\u200Fلكساسكم", "ل*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v470, "\u200Fلكساسك", "ل****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v471, "\u200Fلكساس", "ل***س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v472, "\u200Fلكس", "ل*س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v473, "\u200Fلشرموطتي", "ل******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v474, "\u200Fلشرموطتهن", "ل*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v475, "\u200Fلشرموطتهم", "ل*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v476, "\u200Fلشرموطتها", "ل*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v477, "\u200Fلشرموطته", "ل******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v478, "\u200Fلشرموطتنا", "ل*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v479, "\u200Fلشرموطتكن", "ل*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v480, "\u200Fلشرموطتكم", "ل*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v481, "\u200Fلشرموطتك", "ل******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v482, "\u200Fلشرموطة", "ل*****ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v483, "\u200Fلشرموطاتي", "ل*******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v484, "\u200Fلشرموطاتهن", "ل********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v485, "\u200Fلشرموطاتهم", "ل********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v486, "\u200Fلشرموطاتها", "ل********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v487, "\u200Fلشرموطاته", "ل*******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v488, "\u200Fلشرموطاتنا", "ل********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v489, "\u200Fلشرموطاتكن", "ل********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v490, "\u200Fلشرموطاتكم", "ل********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v491, "\u200Fلشرموطاتك", "ل*******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v492, "\u200Fلشرموطات", "ل******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v493, "\u200Fلزوبي", "ل***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v494, "\u200Fلزوبهن", "ل****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v495, "\u200Fلزوبهم", "ل****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v496, "\u200Fلزوبها", "ل****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v497, "\u200Fلزوبه", "ل***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v498, "\u200Fلزوبنا", "ل****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v499, "\u200Fلزوبكن", "ل****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v500, "\u200Fلزوبكم", "ل****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v501, "\u200Fلزوبك", "ل***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v502, "\u200Fلزوب", "ل**ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v503, "\u200Fلزبي", "ل**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v504, "\u200Fلزبهن", "ل***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v505, "\u200Fلزبهم", "ل***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v506, "\u200Fلزبها", "ل***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v507, "\u200Fلزبه", "ل**ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v508, "\u200Fلزبنا", "ل***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v509, "\u200Fلزبكن", "ل***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v510, "\u200Fلزبكم", "ل***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v511, "\u200Fلزبك", "ل**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v512, "\u200Fلزبابي", "ل****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v513, "\u200Fلزبابهن", "ل*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v514, "\u200Fلزبابهم", "ل*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v515, "\u200Fلزبابها", "ل*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v516, "\u200Fلزبابه", "ل****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v517, "\u200Fلزبابنا", "ل*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v518, "\u200Fلزبابكن", "ل*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v519, "\u200Fلزبابكم", "ل*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v520, "\u200Fلزبابك", "ل****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v521, "\u200Fلزباب", "ل***ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v522, "\u200Fلزب", "ل*ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v523, "\u200Fلخرواتي", "ل*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v524, "\u200Fلخرواتهن", "ل******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v525, "\u200Fلخرواتهم", "ل******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v526, "\u200Fلخرواتها", "ل******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v527, "\u200Fلخرواته", "ل*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v528, "\u200Fلخرواتنا", "ل******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v529, "\u200Fلخرواتكن", "ل******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v530, "\u200Fلخرواتكم", "ل******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v531, "\u200Fلخرواتك", "ل*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v532, "\u200Fلخروات", "ل****ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v533, "\u200Fلخرتي", "ل***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v534, "\u200Fلخرتهن", "ل****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v535, "\u200Fلخرتهم", "ل****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v536, "\u200Fلخرتها", "ل****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v537, "\u200Fلخرته", "ل***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v538, "\u200Fلخرتنا", "ل****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v539, "\u200Fلخرتكن", "ل****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v540, "\u200Fلخرتكم", "ل****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v541, "\u200Fلخرتك", "ل***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v542, "\u200Fلخرة", "ل**ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v543, "\u200Fككسي", "ك**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v544, "\u200Fككسهن", "ك***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v545, "\u200Fككسهم", "ك***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v546, "\u200Fككسها", "ك***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v547, "\u200Fككسه", "ك**ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v548, "\u200Fككسنا", "ك***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v549, "\u200Fككسكوسي", "ك*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v550, "\u200Fككسكوسهن", "ك******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v551, "\u200Fككسكوسهم", "ك******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v552, "\u200Fككسكوسها", "ك******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v553, "\u200Fككسكوسه", "ك*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v554, "\u200Fككسكوسنا", "ك******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v555, "\u200Fككسكوسكن", "ك******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v556, "\u200Fككسكوسكم", "ك******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v557, "\u200Fككسكوسك", "ك*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v558, "\u200Fككسكوس", "ك****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v559, "\u200Fككسكن", "ك***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v560, "\u200Fككسكم", "ك***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v561, "\u200Fككسك", "ك**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v562, "\u200Fككساسي", "ك****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v563, "\u200Fككساسهن", "ك*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v564, "\u200Fككساسهم", "ك*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v565, "\u200Fككساسها", "ك*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v566, "\u200Fككساسه", "ك****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v567, "\u200Fككساسنا", "ك*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v568, "\u200Fككساسكن", "ك*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v569, "\u200Fككساسكم", "ك*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v570, "\u200Fككساسك", "ك****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v571, "\u200Fككساس", "ك***س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v572, "\u200Fككس", "ك*س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v573, "\u200Fكشرموطتي", "ك******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v574, "\u200Fكشرموطتهن", "ك*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v575, "\u200Fكشرموطتهم", "ك*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v576, "\u200Fكشرموطتها", "ك*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v577, "\u200Fكشرموطته", "ك******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v578, "\u200Fكشرموطتنا", "ك*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v579, "\u200Fكشرموطتكن", "ك*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v580, "\u200Fكشرموطتكم", "ك*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v581, "\u200Fكشرموطتك", "ك******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v582, "\u200Fكشرموطة", "ك*****ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v583, "\u200Fكشرموطاتي", "ك*******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v584, "\u200Fكشرموطاتهن", "ك********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v585, "\u200Fكشرموطاتهم", "ك********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v586, "\u200Fكشرموطاتها", "ك********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v587, "\u200Fكشرموطاته", "ك*******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v588, "\u200Fكشرموطاتنا", "ك********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v589, "\u200Fكشرموطاتكن", "ك********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v590, "\u200Fكشرموطاتكم", "ك********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v591, "\u200Fكشرموطاتك", "ك*******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v592, "\u200Fكشرموطات", "ك******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v593, "\u200Fكسي", "ك*ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v594, "\u200Fكسهن", "ك**ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v595, "\u200Fكسهم", "ك**م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v596, "\u200Fكسها", "ك**ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v597, "\u200Fكسه", "ك*ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v598, "\u200Fكسنا", "ك**ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v599, "\u200Fكسكوسي", "ك****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v600, "\u200Fكسكوسهن", "ك*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v601, "\u200Fكسكوسهم", "ك*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v602, "\u200Fكسكوسها", "ك*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v603, "\u200Fكسكوسه", "ك****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v604, "\u200Fكسكوسنا", "ك*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v605, "\u200Fكسكوسكن", "ك*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v606, "\u200Fكسكوسكم", "ك*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v607, "\u200Fكسكوسك", "ك****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v608, "\u200Fكسكوس", "ك***س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v609, "\u200Fكسكن", "ك**ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v610, "\u200Fكسكم", "ك**م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v611, "\u200Fكسك", "ك*ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v612, "\u200Fكساسي", "ك***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v613, "\u200Fكساسهن", "ك****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v614, "\u200Fكساسهم", "ك****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v615, "\u200Fكساسها", "ك****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v616, "\u200Fكساسه", "ك***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v617, "\u200Fكساسنا", "ك****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v618, "\u200Fكساسكن", "ك****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v619, "\u200Fكساسكم", "ك****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v620, "\u200Fكساسك", "ك***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v621, "\u200Fكساس", "ك**س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[3],0>(v622, "\u200Fكس", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v623, "\u200Fكزوبي", "ك***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v624, "\u200Fكزوبهن", "ك****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v625, "\u200Fكزوبهم", "ك****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v626, "\u200Fكزوبها", "ك****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v627, "\u200Fكزوبه", "ك***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v628, "\u200Fكزوبنا", "ك****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v629, "\u200Fكزوبكن", "ك****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v630, "\u200Fكزوبكم", "ك****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v631, "\u200Fكزوبك", "ك***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v632, "\u200Fكزوب", "ك**ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v633, "\u200Fكزبي", "ك**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v634, "\u200Fكزبهن", "ك***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v635, "\u200Fكزبهم", "ك***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v636, "\u200Fكزبها", "ك***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v637, "\u200Fكزبه", "ك**ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v638, "\u200Fكزبنا", "ك***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v639, "\u200Fكزبكن", "ك***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v640, "\u200Fكزبكم", "ك***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v641, "\u200Fكزبك", "ك**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v642, "\u200Fكزبابي", "ك****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v643, "\u200Fكزبابهن", "ك*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v644, "\u200Fكزبابهم", "ك*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v645, "\u200Fكزبابها", "ك*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v646, "\u200Fكزبابه", "ك****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v647, "\u200Fكزبابنا", "ك*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v648, "\u200Fكزبابكن", "ك*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v649, "\u200Fكزبابكم", "ك*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v650, "\u200Fكزبابك", "ك****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v651, "\u200Fكزباب", "ك***ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v652, "\u200Fكزب", "ك*ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v653, "\u200Fكخرواتي", "ك*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v654, "\u200Fكخرواتهن", "ك******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v655, "\u200Fكخرواتهم", "ك******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v656, "\u200Fكخرواتها", "ك******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v657, "\u200Fكخرواته", "ك*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v658, "\u200Fكخرواتنا", "ك******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v659, "\u200Fكخرواتكن", "ك******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v660, "\u200Fكخرواتكم", "ك******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v661, "\u200Fكخرواتك", "ك*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v662, "\u200Fكخروات", "ك****ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v663, "\u200Fكخرتي", "ك***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v664, "\u200Fكخرتهن", "ك****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v665, "\u200Fكخرتهم", "ك****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v666, "\u200Fكخرتها", "ك****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v667, "\u200Fكخرته", "ك***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v668, "\u200Fكخرتنا", "ك****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v669, "\u200Fكخرتكن", "ك****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v670, "\u200Fكخرتكم", "ك****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v671, "\u200Fكخرتك", "ك***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v672, "\u200Fكخرة", "ك**ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v673, "\u200Fكالكسكوس", "ك******س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v674, "\u200Fكالكساس", "ك*****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v675, "\u200Fكالكس", "ك***س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v676, "\u200Fكالشرموطة", "ك*******ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v677, "\u200Fكالشرموطات", "ك********ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v678, "\u200Fكالزوب", "ك****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v679, "\u200Fكالزباب", "ك*****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v680, "\u200Fكالزب", "ك***ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v681, "\u200Fكالخروات", "ك******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v682, "\u200Fكالخرة", "ك****ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v683, "\u200Fقحبه", "ق**ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v684, "\u200Fقحبة", "ق**ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v685, "\u200Fقحبات", "ق***ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v686, "\u200Fعرصه", "ع**ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v687, "\u200Fعرصة", "ع**ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v688, "\u200Fعرصات", "ع***ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v689, "\u200Fعرص", "ع*ص");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v690, "\u200Fشلكه", "ش**ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v691, "\u200Fشلكة", "ش**ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v692, "\u200Fشلكات", "ش***ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v693, "\u200Fشرموطه", "ش****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v694, "\u200Fشرموطتي", "ش*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v695, "\u200Fشرموطتهن", "ش******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v696, "\u200Fشرموطتهم", "ش******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v697, "\u200Fشرموطتها", "ش******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v698, "\u200Fشرموطته", "ش*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v699, "\u200Fشرموطتنا", "ش******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v700, "\u200Fشرموطتكن", "ش******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v701, "\u200Fشرموطتكم", "ش******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v702, "\u200Fشرموطتك", "ش*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v703, "\u200Fشرموطة", "ش****ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v704, "\u200Fشرموطاتي", "ش******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v705, "\u200Fشرموطاتهن", "ش*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v706, "\u200Fشرموطاتهم", "ش*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v707, "\u200Fشرموطاتها", "ش*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v708, "\u200Fشرموطاته", "ش******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v709, "\u200Fشرموطاتنا", "ش*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v710, "\u200Fشرموطاتكن", "ش*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v711, "\u200Fشرموطاتكم", "ش*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v712, "\u200Fشرموطاتك", "ش******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v713, "\u200Fشرموطات", "ش*****ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v714, "\u200Fشرموط", "ش***ط");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v715, "\u200Fشرجي", "ش**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v716, "\u200Fشراميط", "ش***ط");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v717, "\u200Fشخيتي", "ش***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v718, "\u200Fشخيت", "ش**ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v719, "\u200Fشخي", "ش*ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v720, "\u200Fشخاخي", "ش***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v721, "\u200Fشخاختي", "ش****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v722, "\u200Fشخاخ", "ش**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[3],0>(v723, "\u200Fشخ", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v724, "\u200Fزوبي", "ز**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v725, "\u200Fزوبهن", "ز***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v726, "\u200Fزوبهم", "ز***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v727, "\u200Fزوبها", "ز***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v728, "\u200Fزوبه", "ز**ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v729, "\u200Fزوبنا", "ز***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v730, "\u200Fزوبكن", "ز***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v731, "\u200Fزوبكم", "ز***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v732, "\u200Fزوبك", "ز**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v733, "\u200Fزوب", "ز*ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v734, "\u200Fزبي", "ز*ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v735, "\u200Fزبهن", "ز**ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v736, "\u200Fزبهم", "ز**م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v737, "\u200Fزبها", "ز**ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v738, "\u200Fزبه", "ز*ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v739, "\u200Fزبنا", "ز**ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v740, "\u200Fزبكن", "ز**ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v741, "\u200Fزبكم", "ز**م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v742, "\u200Fزبك", "ز*ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v743, "\u200Fزبابي", "ز***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v744, "\u200Fزبابهن", "ز****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v745, "\u200Fزبابهم", "ز****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v746, "\u200Fزبابها", "ز****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v747, "\u200Fزبابه", "ز***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v748, "\u200Fزبابنا", "ز****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v749, "\u200Fزبابكن", "ز****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v750, "\u200Fزبابكم", "ز****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v751, "\u200Fزبابك", "ز***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v752, "\u200Fزباب", "ز**ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[3],0>(v753, "\u200Fزب", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v754, "\u200Fخرواتي", "خ****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v755, "\u200Fخرواتهن", "خ*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v756, "\u200Fخرواتهم", "خ*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v757, "\u200Fخرواتها", "خ*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v758, "\u200Fخرواته", "خ****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v759, "\u200Fخرواتنا", "خ*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v760, "\u200Fخرواتكن", "خ*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v761, "\u200Fخرواتكم", "خ*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v762, "\u200Fخرواتك", "خ****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v763, "\u200Fخروات", "خ***ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v764, "\u200Fخرتهن", "خ***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v765, "\u200Fخرتهم", "خ***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v766, "\u200Fخرتها", "خ***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v767, "\u200Fخرتنا", "خ***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v768, "\u200Fخرتكن", "خ***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v769, "\u200Fخرتكم", "خ***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v770, "\u200Fخرة", "خ*ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v771, "\u200Fتنييك", "ت***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v772, "\u200Fتنتاك", "ت***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v773, "\u200Fبورنو", "ب***و");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v774, "\u200Fبكسي", "ب**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v775, "\u200Fبكسهن", "ب***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v776, "\u200Fبكسهم", "ب***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v777, "\u200Fبكسها", "ب***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v778, "\u200Fبكسه", "ب**ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v779, "\u200Fبكسنا", "ب***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v780, "\u200Fبكسكوسي", "ب*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v781, "\u200Fبكسكوسهن", "ب******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v782, "\u200Fبكسكوسهم", "ب******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v783, "\u200Fبكسكوسها", "ب******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v784, "\u200Fبكسكوسه", "ب*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v785, "\u200Fبكسكوسنا", "ب******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v786, "\u200Fبكسكوسكن", "ب******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v787, "\u200Fبكسكوسكم", "ب******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v788, "\u200Fبكسكوسك", "ب*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v789, "\u200Fبكسكوس", "ب****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v790, "\u200Fبكسكن", "ب***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v791, "\u200Fبكسكم", "ب***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v792, "\u200Fبكسك", "ب**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v793, "\u200Fبكساسي", "ب****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v794, "\u200Fبكساسهن", "ب*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v795, "\u200Fبكساسهم", "ب*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v796, "\u200Fبكساسها", "ب*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v797, "\u200Fبكساسه", "ب****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v798, "\u200Fبكساسنا", "ب*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v799, "\u200Fبكساسكن", "ب*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v800, "\u200Fبكساسكم", "ب*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v801, "\u200Fبكساسك", "ب****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v802, "\u200Fبكساس", "ب***س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v803, "\u200Fبكس", "ب*س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v804, "\u200Fبشرموطتي", "ب******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v805, "\u200Fبشرموطتهن", "ب*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v806, "\u200Fبشرموطتهم", "ب*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v807, "\u200Fبشرموطتها", "ب*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v808, "\u200Fبشرموطته", "ب******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v809, "\u200Fبشرموطتنا", "ب*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v810, "\u200Fبشرموطتكن", "ب*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v811, "\u200Fبشرموطتكم", "ب*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v812, "\u200Fبشرموطتك", "ب******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v813, "\u200Fبشرموطة", "ب*****ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v814, "\u200Fبشرموطاتي", "ب*******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v815, "\u200Fبشرموطاتهن", "ب********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v816, "\u200Fبشرموطاتهم", "ب********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v817, "\u200Fبشرموطاتها", "ب********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v818, "\u200Fبشرموطاته", "ب*******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v819, "\u200Fبشرموطاتنا", "ب********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v820, "\u200Fبشرموطاتكن", "ب********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v821, "\u200Fبشرموطاتكم", "ب********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v822, "\u200Fبشرموطاتك", "ب*******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v823, "\u200Fبشرموطات", "ب******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v824, "\u200Fبزوبي", "ب***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v825, "\u200Fبزوبهن", "ب****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v826, "\u200Fبزوبهم", "ب****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v827, "\u200Fبزوبها", "ب****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v828, "\u200Fبزوبه", "ب***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v829, "\u200Fبزوبنا", "ب****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v830, "\u200Fبزوبكن", "ب****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v831, "\u200Fبزوبكم", "ب****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v832, "\u200Fبزوبك", "ب***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v833, "\u200Fبزوب", "ب**ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v834, "\u200Fبزبي", "ب**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v835, "\u200Fبزبهن", "ب***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v836, "\u200Fبزبهم", "ب***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v837, "\u200Fبزبها", "ب***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v838, "\u200Fبزبه", "ب**ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v839, "\u200Fبزبنا", "ب***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v840, "\u200Fبزبكن", "ب***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v841, "\u200Fبزبكم", "ب***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v842, "\u200Fبزبك", "ب**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v843, "\u200Fبزبابي", "ب****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v844, "\u200Fبزبابهن", "ب*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v845, "\u200Fبزبابهم", "ب*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v846, "\u200Fبزبابها", "ب*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v847, "\u200Fبزبابه", "ب****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v848, "\u200Fبزبابنا", "ب*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v849, "\u200Fبزبابكن", "ب*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v850, "\u200Fبزبابكم", "ب*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v851, "\u200Fبزبابك", "ب****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v852, "\u200Fبزباب", "ب***ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v853, "\u200Fبزب", "ب*ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v854, "\u200Fبزاز", "ب**ز");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[3],0>(v855, "\u200Fبز", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v856, "\u200Fبخرواتي", "ب*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v857, "\u200Fبخرواتهن", "ب******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v858, "\u200Fبخرواتهم", "ب******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v859, "\u200Fبخرواتها", "ب******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v860, "\u200Fبخرواته", "ب*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v861, "\u200Fبخرواتنا", "ب******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v862, "\u200Fبخرواتكن", "ب******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v863, "\u200Fبخرواتكم", "ب******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v864, "\u200Fبخرواتك", "ب*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v865, "\u200Fبخروات", "ب****ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v866, "\u200Fبخرتي", "ب***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v867, "\u200Fبخرة", "ب**ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v868, "\u200Fبالكسكوس", "ب******س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v869, "\u200Fبالكساس", "ب*****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v870, "\u200Fبالكس", "ب***س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v871, "\u200Fبالشرموطة", "ب*******ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v872, "\u200Fبالشرموطات", "ب********ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v873, "\u200Fبالزوب", "ب****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v874, "\u200Fبالزباب", "ب*****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v875, "\u200Fبالزب", "ب***ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v876, "\u200Fبالخروات", "ب******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v877, "\u200Fبالخرة", "ب****ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v878, "\u200Fايري", "ا**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v879, "\u200Fايرك", "ا**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v880, "\u200Fاير", "ا*ر");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v881, "\u200Fانيكك", "ا***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v882, "\u200Fانيك", "ا**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v883, "\u200Fالكسكوس", "ا*****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v884, "\u200Fالكساس", "ا****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v885, "\u200Fالكس", "ا**س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v886, "\u200Fالشرموطة", "ا******ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v887, "\u200Fالشرموطات", "ا*******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v888, "\u200Fالزوب", "ا***ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v889, "\u200Fالزباب", "ا****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v890, "\u200Fالزب", "ا**ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v891, "\u200Fالخروات", "ا*****ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v892, "\u200Fالخرة", "ا***ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v893, "\u200Fإيري", "إ**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v894, "\u200Fإيرك", "إ**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v895, "\u200Fإير", "إ*ر");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v896, "\u200Fأيري", "أ**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v897, "\u200Fأيرك", "أ**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v898, "\u200Fأير", "أ*ر");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v899, "\u200Fأنيكك", "أ***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v900, "\u200Fأنيك", "أ**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v901, "ينتاك", "ي***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v902, "وللكسكوس", "و******س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v903, "وللكساس", "و*****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v904, "وللكس", "و***س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v905, "وللشرموطة", "و*******ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v906, "وللشرموطات", "و********ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v907, "وللزوب", "و****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v908, "وللزباب", "و*****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v909, "وللزب", "و***ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v910, "وللخروات", "و******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v911, "وللخرة", "و****ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v912, "ولكسي", "و***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v913, "ولكسهن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v914, "ولكسهم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v915, "ولكسها", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v916, "ولكسه", "و***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v917, "ولكسنا", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v918, "ولكسكوسي", "و******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v919, "ولكسكوسهن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v920, "ولكسكوسهم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v921, "ولكسكوسها", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v922, "ولكسكوسه", "و******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v923, "ولكسكوسنا", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v924, "ولكسكوسكن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v925, "ولكسكوسكم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v926, "ولكسكوسك", "و******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v927, "ولكسكوس", "و*****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v928, "ولكسكن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v929, "ولكسكم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v930, "ولكسك", "و***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v931, "ولكساسي", "و*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v932, "ولكساسهن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v933, "ولكساسهم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v934, "ولكساسها", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v935, "ولكساسه", "و*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v936, "ولكساسنا", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v937, "ولكساسكن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v938, "ولكساسكم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v939, "ولكساسك", "و*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v940, "ولكساس", "و****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v941, "ولكس", "و**س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v942, "ولشرموطتي", "و*******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v943, "ولشرموطتهن", "و********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v944, "ولشرموطتهم", "و********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v945, "ولشرموطتها", "و********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v946, "ولشرموطته", "و*******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v947, "ولشرموطتنا", "و********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v948, "ولشرموطتكن", "و********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v949, "ولشرموطتكم", "و********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v950, "ولشرموطتك", "و*******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v951, "ولشرموطة", "و******ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v952, "ولشرموطاتي", "و********ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v953, "ولشرموطاتهن", "و*********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v954, "ولشرموطاتهم", "و*********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v955, "ولشرموطاتها", "و*********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v956, "ولشرموطاته", "و********ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v957, "ولشرموطاتنا", "و*********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v958, "ولشرموطاتكن", "و*********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v959, "ولشرموطاتكم", "و*********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v960, "ولشرموطاتك", "و********ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v961, "ولشرموطات", "و*******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v962, "ولزوبي", "و****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v963, "ولزوبهن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v964, "ولزوبهم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v965, "ولزوبها", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v966, "ولزوبه", "و****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v967, "ولزوبنا", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v968, "ولزوبكن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v969, "ولزوبكم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v970, "ولزوبك", "و****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v971, "ولزوب", "و***ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v972, "ولزبي", "و***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v973, "ولزبهن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v974, "ولزبهم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v975, "ولزبها", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v976, "ولزبه", "و***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v977, "ولزبنا", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v978, "ولزبكن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v979, "ولزبكم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v980, "ولزبك", "و***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v981, "ولزبابي", "و*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v982, "ولزبابهن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v983, "ولزبابهم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v984, "ولزبابها", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v985, "ولزبابه", "و*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v986, "ولزبابنا", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v987, "ولزبابكن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v988, "ولزبابكم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v989, "ولزبابك", "و*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v990, "ولزباب", "و****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v991, "ولزب", "و**ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v992, "ولخرواتي", "و******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v993, "ولخرواتهن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v994, "ولخرواتهم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v995, "ولخرواتها", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v996, "ولخرواته", "و******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v997, "ولخرواتنا", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v998, "ولخرواتكن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v999, "ولخرواتكم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1000, "ولخرواتك", "و******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1001, "ولخروات", "و*****ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1002, "ولخرتي", "و****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1003, "ولخرتهن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1004, "ولخرتهم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1005, "ولخرتها", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1006, "ولخرته", "و****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1007, "ولخرتنا", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1008, "ولخرتكن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1009, "ولخرتكم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1010, "ولخرتك", "و****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1011, "ولخرة", "و***ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1012, "وككسي", "و***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1013, "وككسهن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1014, "وككسهم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1015, "وككسها", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1016, "وككسه", "و***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1017, "وككسنا", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1018, "وككسكوسي", "و******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1019, "وككسكوسهن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1020, "وككسكوسهم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1021, "وككسكوسها", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1022, "وككسكوسه", "و******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1023, "وككسكوسنا", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1024, "وككسكوسكن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1025, "وككسكوسكم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1026, "وككسكوسك", "و******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1027, "وككسكوس", "و*****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1028, "وككسكن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1029, "وككسكم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1030, "وككسك", "و***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1031, "وككساسي", "و*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1032, "وككساسهن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1033, "وككساسهم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1034, "وككساسها", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1035, "وككساسه", "و*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1036, "وككساسنا", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1037, "وككساسكن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1038, "وككساسكم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1039, "وككساسك", "و*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1040, "وككساس", "و****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1041, "وككس", "و**س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1042, "وكشرموطتي", "و*******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1043, "وكشرموطتهن", "و********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1044, "وكشرموطتهم", "و********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1045, "وكشرموطتها", "و********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1046, "وكشرموطته", "و*******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1047, "وكشرموطتنا", "و********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1048, "وكشرموطتكن", "و********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1049, "وكشرموطتكم", "و********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1050, "وكشرموطتك", "و*******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1051, "وكشرموطة", "و******ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1052, "وكشرموطاتي", "و********ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v1053, "وكشرموطاتهن", "و*********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v1054, "وكشرموطاتهم", "و*********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v1055, "وكشرموطاتها", "و*********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1056, "وكشرموطاته", "و********ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v1057, "وكشرموطاتنا", "و*********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v1058, "وكشرموطاتكن", "و*********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v1059, "وكشرموطاتكم", "و*********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1060, "وكشرموطاتك", "و********ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1061, "وكشرموطات", "و*******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1062, "وكسي", "و**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1063, "وكسهن", "و***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1064, "وكسهم", "و***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1065, "وكسها", "و***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1066, "وكسه", "و**ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1067, "وكسنا", "و***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1068, "وكسكوسي", "و*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1069, "وكسكوسهن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1070, "وكسكوسهم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1071, "وكسكوسها", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1072, "وكسكوسه", "و*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1073, "وكسكوسنا", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1074, "وكسكوسكن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1075, "وكسكوسكم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1076, "وكسكوسك", "و*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1077, "وكسكوس", "و****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1078, "وكسكن", "و***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1079, "وكسكم", "و***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1080, "وكسك", "و**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1081, "وكساسي", "و****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1082, "وكساسهن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1083, "وكساسهم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1084, "وكساسها", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1085, "وكساسه", "و****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1086, "وكساسنا", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1087, "وكساسكن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1088, "وكساسكم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1089, "وكساسك", "و****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1090, "وكساس", "و***س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v1091, "وكس", "و*س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1092, "وكزوبي", "و****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1093, "وكزوبهن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1094, "وكزوبهم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1095, "وكزوبها", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1096, "وكزوبه", "و****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1097, "وكزوبنا", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1098, "وكزوبكن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1099, "وكزوبكم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1100, "وكزوبك", "و****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1101, "وكزوب", "و***ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1102, "وكزبي", "و***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1103, "وكزبهن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1104, "وكزبهم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1105, "وكزبها", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1106, "وكزبه", "و***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1107, "وكزبنا", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1108, "وكزبكن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1109, "وكزبكم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1110, "وكزبك", "و***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1111, "وكزبابي", "و*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1112, "وكزبابهن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1113, "وكزبابهم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1114, "وكزبابها", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1115, "وكزبابه", "و*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1116, "وكزبابنا", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1117, "وكزبابكن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1118, "وكزبابكم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1119, "وكزبابك", "و*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1120, "وكزباب", "و****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1121, "وكزب", "و**ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1122, "وكخرواتي", "و******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1123, "وكخرواتهن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1124, "وكخرواتهم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1125, "وكخرواتها", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1126, "وكخرواته", "و******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1127, "وكخرواتنا", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1128, "وكخرواتكن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1129, "وكخرواتكم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1130, "وكخرواتك", "و******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1131, "وكخروات", "و*****ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1132, "وكخرتهن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1133, "وكخرتهم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1134, "وكخرتها", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1135, "وكخرتنا", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1136, "وكخرتكن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1137, "وكخرتكم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1138, "وكخرة", "و***ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1139, "وكالكسكوس", "و*******س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1140, "وكالكساس", "و******س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1141, "وكالكس", "و****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1142, "وكالشرموطة", "و********ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v1143, "وكالشرموطات", "و*********ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1144, "وكالزوب", "و*****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1145, "وكالزباب", "و******ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1146, "وكالزب", "و****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1147, "وكالخروات", "و*******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1148, "وكالخرة", "و*****ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1149, "وشرموطتي", "و******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1150, "وشرموطتهن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1151, "وشرموطتهم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1152, "وشرموطتها", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1153, "وشرموطته", "و******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1154, "وشرموطتنا", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1155, "وشرموطتكن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1156, "وشرموطتكم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1157, "وشرموطتك", "و******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1158, "وشرموطة", "و*****ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1159, "وشرموطاتي", "و*******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1160, "وشرموطاتهن", "و********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1161, "وشرموطاتهم", "و********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1162, "وشرموطاتها", "و********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1163, "وشرموطاته", "و*******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1164, "وشرموطاتنا", "و********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1165, "وشرموطاتكن", "و********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1166, "وشرموطاتكم", "و********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1167, "وشرموطاتك", "و*******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1168, "وشرموطات", "و******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1169, "وزوبي", "و***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1170, "وزوبهن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1171, "وزوبهم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1172, "وزوبها", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1173, "وزوبه", "و***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1174, "وزوبنا", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1175, "وزوبكن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1176, "وزوبكم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1177, "وزوبك", "و***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1178, "وزوب", "و**ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1179, "وزبي", "و**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1180, "وزبهن", "و***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1181, "وزبهم", "و***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1182, "وزبها", "و***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1183, "وزبه", "و**ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1184, "وزبنا", "و***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1185, "وزبكن", "و***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1186, "وزبكم", "و***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1187, "وزبك", "و**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1188, "وزبابي", "و****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1189, "وزبابهن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1190, "وزبابهم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1191, "وزبابها", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1192, "وزبابه", "و****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1193, "وزبابنا", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1194, "وزبابكن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1195, "وزبابكم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1196, "وزبابك", "و****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1197, "وزباب", "و***ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v1198, "وزب", "و*ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1199, "وخرواتي", "و*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1200, "وخرواتهن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1201, "وخرواتهم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1202, "وخرواتها", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1203, "وخرواته", "و*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1204, "وخرواتنا", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1205, "وخرواتكن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1206, "وخرواتكم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1207, "وخرواتك", "و*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1208, "وخروات", "و****ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1209, "وخرتي", "و***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1210, "وخرته", "و***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1211, "وخرتك", "و***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1212, "وخرة", "و**ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1213, "وبكسي", "و***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1214, "وبكسهن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1215, "وبكسهم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1216, "وبكسها", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1217, "وبكسه", "و***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1218, "وبكسنا", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1219, "وبكسكوسي", "و******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1220, "وبكسكوسهن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1221, "وبكسكوسهم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1222, "وبكسكوسها", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1223, "وبكسكوسه", "و******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1224, "وبكسكوسنا", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1225, "وبكسكوسكن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1226, "وبكسكوسكم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1227, "وبكسكوسك", "و******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1228, "وبكسكوس", "و*****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1229, "وبكسكن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1230, "وبكسكم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1231, "وبكسك", "و***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1232, "وبكساسي", "و*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1233, "وبكساسهن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1234, "وبكساسهم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1235, "وبكساسها", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1236, "وبكساسه", "و*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1237, "وبكساسنا", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1238, "وبكساسكن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1239, "وبكساسكم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1240, "وبكساسك", "و*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1241, "وبكساس", "و****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1242, "وبكس", "و**س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1243, "وبشرموطتي", "و*******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1244, "وبشرموطتهن", "و********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1245, "وبشرموطتهم", "و********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1246, "وبشرموطتها", "و********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1247, "وبشرموطته", "و*******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1248, "وبشرموطتنا", "و********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1249, "وبشرموطتكن", "و********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1250, "وبشرموطتكم", "و********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1251, "وبشرموطتك", "و*******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1252, "وبشرموطة", "و******ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1253, "وبشرموطاتي", "و********ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v1254, "وبشرموطاتهن", "و*********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v1255, "وبشرموطاتهم", "و*********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v1256, "وبشرموطاتها", "و*********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1257, "وبشرموطاته", "و********ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v1258, "وبشرموطاتنا", "و*********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v1259, "وبشرموطاتكن", "و*********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v1260, "وبشرموطاتكم", "و*********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1261, "وبشرموطاتك", "و********ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1262, "وبشرموطات", "و*******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1263, "وبزوبي", "و****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1264, "وبزوبهن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1265, "وبزوبهم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1266, "وبزوبها", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1267, "وبزوبه", "و****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1268, "وبزوبنا", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1269, "وبزوبكن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1270, "وبزوبكم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1271, "وبزوبك", "و****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1272, "وبزوب", "و***ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1273, "وبزبي", "و***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1274, "وبزبهن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1275, "وبزبهم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1276, "وبزبها", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1277, "وبزبه", "و***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1278, "وبزبنا", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1279, "وبزبكن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1280, "وبزبكم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1281, "وبزبك", "و***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1282, "وبزبابي", "و*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1283, "وبزبابهن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1284, "وبزبابهم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1285, "وبزبابها", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1286, "وبزبابه", "و*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1287, "وبزبابنا", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1288, "وبزبابكن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1289, "وبزبابكم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1290, "وبزبابك", "و*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1291, "وبزباب", "و****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1292, "وبزب", "و**ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1293, "وبخرواتي", "و******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1294, "وبخرواتهن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1295, "وبخرواتهم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1296, "وبخرواتها", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1297, "وبخرواته", "و******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1298, "وبخرواتنا", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1299, "وبخرواتكن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1300, "وبخرواتكم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1301, "وبخرواتك", "و******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1302, "وبخروات", "و*****ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1303, "وبخرتهم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1304, "وبخرة", "و***ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1305, "وبالكسكوس", "و*******س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1306, "وبالكساس", "و******س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1307, "وبالكس", "و****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1308, "وبالشرموطة", "و********ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v1309, "وبالشرموطات", "و*********ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1310, "وبالزوب", "و*****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1311, "وبالزباب", "و******ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1312, "وبالزب", "و****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1313, "وبالخروات", "و*******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1314, "وبالخرة", "و*****ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1315, "والكسكوس", "و******س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1316, "والكساس", "و*****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1317, "والكس", "و***س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1318, "والشرموطة", "و*******ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1319, "والشرموطات", "و********ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1320, "والزوب", "و****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1321, "والزباب", "و*****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1322, "والزب", "و***ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1323, "والخروات", "و******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1324, "والخرة", "و****ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1325, "نيكيني", "ن****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1326, "نيكني", "ن***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v1327, "نيك", "ن*ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1328, "نياكة", "ن***ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v1329, "ناك", "ن*ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1330, "مومس", "م**س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1331, "مهبل", "م**ل");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1332, "للكسكوس", "ل*****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1333, "للكساس", "ل****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1334, "للكس", "ل**س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1335, "للعنة", "ل***ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1336, "للشرموطة", "ل******ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1337, "للشرموطات", "ل*******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1338, "للزوب", "ل***ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1339, "للزباب", "ل****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1340, "للزب", "ل**ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1341, "للخروات", "ل*****ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1342, "للخرة", "ل***ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1343, "لكسي", "ل**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1344, "لكسهن", "ل***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1345, "لكسهم", "ل***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1346, "لكسها", "ل***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1347, "لكسه", "ل**ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1348, "لكسنا", "ل***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1349, "لكسكوسي", "ل*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1350, "لكسكوسهن", "ل******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1351, "لكسكوسهم", "ل******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1352, "لكسكوسها", "ل******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1353, "لكسكوسه", "ل*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1354, "لكسكوسنا", "ل******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1355, "لكسكوسكن", "ل******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1356, "لكسكوسكم", "ل******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1357, "لكسكوسك", "ل*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1358, "لكسكوس", "ل****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1359, "لكسكن", "ل***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1360, "لكسكم", "ل***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1361, "لكسك", "ل**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1362, "لكساسي", "ل****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1363, "لكساسهن", "ل*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1364, "لكساسهم", "ل*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1365, "لكساسها", "ل*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1366, "لكساسه", "ل****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1367, "لكساسنا", "ل*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1368, "لكساسكن", "ل*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1369, "لكساسكم", "ل*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1370, "لكساسك", "ل****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1371, "لكساس", "ل***س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v1372, "لكس", "ل*س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1373, "لشرموطتي", "ل******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1374, "لشرموطتهن", "ل*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1375, "لشرموطتهم", "ل*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1376, "لشرموطتها", "ل*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1377, "لشرموطته", "ل******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1378, "لشرموطتنا", "ل*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1379, "لشرموطتكن", "ل*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1380, "لشرموطتكم", "ل*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1381, "لشرموطتك", "ل******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1382, "لشرموطة", "ل*****ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1383, "لشرموطاتي", "ل*******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1384, "لشرموطاتهن", "ل********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1385, "لشرموطاتهم", "ل********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1386, "لشرموطاتها", "ل********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1387, "لشرموطاته", "ل*******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1388, "لشرموطاتنا", "ل********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1389, "لشرموطاتكن", "ل********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1390, "لشرموطاتكم", "ل********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1391, "لشرموطاتك", "ل*******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1392, "لشرموطات", "ل******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1393, "لزوبي", "ل***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1394, "لزوبهن", "ل****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1395, "لزوبهم", "ل****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1396, "لزوبها", "ل****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1397, "لزوبه", "ل***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1398, "لزوبنا", "ل****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1399, "لزوبكن", "ل****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1400, "لزوبكم", "ل****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1401, "لزوبك", "ل***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1402, "لزوب", "ل**ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1403, "لزبي", "ل**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1404, "لزبهن", "ل***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1405, "لزبهم", "ل***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1406, "لزبها", "ل***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1407, "لزبه", "ل**ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1408, "لزبنا", "ل***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1409, "لزبكن", "ل***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1410, "لزبكم", "ل***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1411, "لزبك", "ل**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1412, "لزبابي", "ل****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1413, "لزبابهن", "ل*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1414, "لزبابهم", "ل*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1415, "لزبابها", "ل*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1416, "لزبابه", "ل****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1417, "لزبابنا", "ل*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1418, "لزبابكن", "ل*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1419, "لزبابكم", "ل*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1420, "لزبابك", "ل****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1421, "لزباب", "ل***ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v1422, "لزب", "ل*ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1423, "لخرواتي", "ل*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1424, "لخرواتهن", "ل******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1425, "لخرواتهم", "ل******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1426, "لخرواتها", "ل******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1427, "لخرواته", "ل*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1428, "لخرواتنا", "ل******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1429, "لخرواتكن", "ل******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1430, "لخرواتكم", "ل******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1431, "لخرواتك", "ل*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1432, "لخروات", "ل****ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1433, "لخرتي", "ل***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1434, "لخرتهن", "ل****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1435, "لخرتهم", "ل****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1436, "لخرتها", "ل****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1437, "لخرته", "ل***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1438, "لخرتنا", "ل****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1439, "لخرتكن", "ل****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1440, "لخرتكم", "ل****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1441, "لخرتك", "ل***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1442, "لخرة", "ل**ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1443, "ككسي", "ك**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1444, "ككسهن", "ك***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1445, "ككسهم", "ك***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1446, "ككسها", "ك***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1447, "ككسه", "ك**ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1448, "ككسنا", "ك***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1449, "ككسكوسي", "ك*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1450, "ككسكوسهن", "ك******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1451, "ككسكوسهم", "ك******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1452, "ككسكوسها", "ك******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1453, "ككسكوسه", "ك*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1454, "ككسكوسنا", "ك******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1455, "ككسكوسكن", "ك******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1456, "ككسكوسكم", "ك******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1457, "ككسكوسك", "ك*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1458, "ككسكوس", "ك****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1459, "ككسكن", "ك***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1460, "ككسكم", "ك***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1461, "ككسك", "ك**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1462, "ككساسي", "ك****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1463, "ككساسهن", "ك*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1464, "ككساسهم", "ك*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1465, "ككساسها", "ك*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1466, "ككساسه", "ك****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1467, "ككساسنا", "ك*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1468, "ككساسكن", "ك*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1469, "ككساسكم", "ك*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1470, "ككساسك", "ك****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1471, "ككساس", "ك***س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v1472, "ككس", "ك*س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1473, "كشرموطتي", "ك******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1474, "كشرموطتهن", "ك*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1475, "كشرموطتهم", "ك*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1476, "كشرموطتها", "ك*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1477, "كشرموطته", "ك******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1478, "كشرموطتنا", "ك*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1479, "كشرموطتكن", "ك*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1480, "كشرموطتكم", "ك*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1481, "كشرموطتك", "ك******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1482, "كشرموطة", "ك*****ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1483, "كشرموطاتي", "ك*******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1484, "كشرموطاتهن", "ك********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1485, "كشرموطاتهم", "ك********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1486, "كشرموطاتها", "ك********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1487, "كشرموطاته", "ك*******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1488, "كشرموطاتنا", "ك********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1489, "كشرموطاتكن", "ك********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1490, "كشرموطاتكم", "ك********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1491, "كشرموطاتك", "ك*******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1492, "كشرموطات", "ك******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v1493, "كسي", "ك*ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1494, "كسهن", "ك**ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1495, "كسهم", "ك**م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1496, "كسها", "ك**ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v1497, "كسه", "ك*ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1498, "كسنا", "ك**ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1499, "كسكوسي", "ك****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1500, "كسكوسهن", "ك*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1501, "كسكوسهم", "ك*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1502, "كسكوسها", "ك*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1503, "كسكوسه", "ك****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1504, "كسكوسنا", "ك*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1505, "كسكوسكن", "ك*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1506, "كسكوسكم", "ك*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1507, "كسكوسك", "ك****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1508, "كسكوس", "ك***س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1509, "كسكن", "ك**ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1510, "كسكم", "ك**م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v1511, "كسك", "ك*ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1512, "كساسي", "ك***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1513, "كساسهن", "ك****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1514, "كساسهم", "ك****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1515, "كساسها", "ك****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1516, "كساسه", "ك***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1517, "كساسنا", "ك****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1518, "كساسكن", "ك****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1519, "كساسكم", "ك****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1520, "كساسك", "ك***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1521, "كساس", "ك**س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[3],0>(v1522, "كس", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1523, "كزوبي", "ك***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1524, "كزوبهن", "ك****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1525, "كزوبهم", "ك****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1526, "كزوبها", "ك****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1527, "كزوبه", "ك***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1528, "كزوبنا", "ك****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1529, "كزوبكن", "ك****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1530, "كزوبكم", "ك****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1531, "كزوبك", "ك***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1532, "كزوب", "ك**ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1533, "كزبي", "ك**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1534, "كزبهن", "ك***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1535, "كزبهم", "ك***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1536, "كزبها", "ك***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1537, "كزبه", "ك**ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1538, "كزبنا", "ك***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1539, "كزبكن", "ك***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1540, "كزبكم", "ك***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1541, "كزبك", "ك**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1542, "كزبابي", "ك****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1543, "كزبابهن", "ك*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1544, "كزبابهم", "ك*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1545, "كزبابها", "ك*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1546, "كزبابه", "ك****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1547, "كزبابنا", "ك*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1548, "كزبابكن", "ك*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1549, "كزبابكم", "ك*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1550, "كزبابك", "ك****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1551, "كزباب", "ك***ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v1552, "كزب", "ك*ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1553, "كخرواتي", "ك*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1554, "كخرواتهن", "ك******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1555, "كخرواتهم", "ك******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1556, "كخرواتها", "ك******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1557, "كخرواته", "ك*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1558, "كخرواتنا", "ك******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1559, "كخرواتكن", "ك******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1560, "كخرواتكم", "ك******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1561, "كخرواتك", "ك*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1562, "كخروات", "ك****ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1563, "كخرتي", "ك***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1564, "كخرتهن", "ك****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1565, "كخرتهم", "ك****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1566, "كخرتها", "ك****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1567, "كخرته", "ك***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1568, "كخرتنا", "ك****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1569, "كخرتكن", "ك****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1570, "كخرتكم", "ك****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1571, "كخرتك", "ك***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1572, "كخرة", "ك**ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1573, "كالكسكوس", "ك******س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1574, "كالكساس", "ك*****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1575, "كالكس", "ك***س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1576, "كالشرموطة", "ك*******ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1577, "كالشرموطات", "ك********ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1578, "كالزوب", "ك****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1579, "كالزباب", "ك*****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1580, "كالزب", "ك***ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1581, "كالخروات", "ك******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1582, "كالخرة", "ك****ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1583, "قحبه", "ق**ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1584, "قحبة", "ق**ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1585, "قحبات", "ق***ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1586, "عيري", "ع**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1587, "عرصه", "ع**ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1588, "عرصة", "ع**ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1589, "عرصات", "ع***ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v1590, "عرص", "ع*ص");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1591, "عاهرة", "ع***ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1592, "شلكه", "ش**ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1593, "شلكة", "ش**ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1594, "شلكات", "ش***ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1595, "شرموطه", "ش****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1596, "شرموطتي", "ش*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1597, "شرموطتهن", "ش******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1598, "شرموطتهم", "ش******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1599, "شرموطتها", "ش******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1600, "شرموطته", "ش*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1601, "شرموطتنا", "ش******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1602, "شرموطتكن", "ش******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1603, "شرموطتكم", "ش******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1604, "شرموطتك", "ش*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1605, "شرموطة", "ش****ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1606, "شرموطاتي", "ش******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1607, "شرموطاتهن", "ش*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1608, "شرموطاتهم", "ش*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1609, "شرموطاتها", "ش*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1610, "شرموطاته", "ش******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1611, "شرموطاتنا", "ش*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1612, "شرموطاتكن", "ش*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1613, "شرموطاتكم", "ش*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1614, "شرموطاتك", "ش******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1615, "شرموطات", "ش*****ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1616, "شرموط", "ش***ط");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1617, "شرجي", "ش**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[8],0>(v1618, "شراميط", "ش***ط");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1619, "شخيتي", "ش***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1620, "شخيت", "ش**ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v1621, "شخي", "ش*ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1622, "شخاخي", "ش***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1623, "شخاختي", "ش****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1624, "شخاخ", "ش**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[3],0>(v1625, "شخ", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1626, "ساقطة", "س***ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1627, "سأضاجع", "س****ع");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1628, "زوبي", "ز**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1629, "زوبهن", "ز***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1630, "زوبهم", "ز***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1631, "زوبها", "ز***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1632, "زوبه", "ز**ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1633, "زوبنا", "ز***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1634, "زوبكن", "ز***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1635, "زوبكم", "ز***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1636, "زوبك", "ز**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v1637, "زوب", "ز*ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v1638, "زبي", "ز*ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1639, "زبهن", "ز**ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1640, "زبهم", "ز**م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1641, "زبها", "ز**ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v1642, "زبه", "ز*ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1643, "زبنا", "ز**ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1644, "زبكن", "ز**ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1645, "زبكم", "ز**م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v1646, "زبك", "ز*ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1647, "زبابي", "ز***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1648, "زبابهن", "ز****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1649, "زبابهم", "ز****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1650, "زبابها", "ز****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1651, "زبابه", "ز***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1652, "زبابنا", "ز****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1653, "زبابكن", "ز****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1654, "زبابكم", "ز****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1655, "زبابك", "ز***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1656, "زباب", "ز**ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[3],0>(v1657, "زب", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v1658, "تبا", "ت*ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1659, "خرواتي", "خ****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1660, "خرواتهن", "خ*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1661, "خرواتهم", "خ*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1662, "خرواتها", "خ*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1663, "خرواته", "خ****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1664, "خرواتنا", "خ*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1665, "خرواتكن", "خ*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1666, "خرواتكم", "خ*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1667, "خرواتك", "خ****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1668, "خروات", "خ***ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1669, "خرتهن", "خ***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1670, "خرتهم", "خ***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1671, "خرتها", "خ***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1672, "خرتنا", "خ***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1673, "خرتكن", "خ***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1674, "خرتكم", "خ***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v1675, "خرة", "خ*ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1676, "تنييك", "ت***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1677, "تنتاك", "ت***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1678, "بورنو", "ب***و");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1679, "بكسي", "ب**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1680, "بكسهن", "ب***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1681, "بكسهم", "ب***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1682, "بكسها", "ب***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1683, "بكسه", "ب**ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1684, "بكسنا", "ب***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1685, "بكسكوسي", "ب*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1686, "بكسكوسهن", "ب******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1687, "بكسكوسهم", "ب******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1688, "بكسكوسها", "ب******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1689, "بكسكوسه", "ب*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1690, "بكسكوسنا", "ب******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1691, "بكسكوسكن", "ب******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1692, "بكسكوسكم", "ب******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1693, "بكسكوسك", "ب*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1694, "بكسكوس", "ب****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1695, "بكسكن", "ب***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1696, "بكسكم", "ب***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1697, "بكسك", "ب**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1698, "بكساسي", "ب****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1699, "بكساسهن", "ب*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1700, "بكساسهم", "ب*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1701, "بكساسها", "ب*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1702, "بكساسه", "ب****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1703, "بكساسنا", "ب*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1704, "بكساسكن", "ب*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1705, "بكساسكم", "ب*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1706, "بكساسك", "ب****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1707, "بكساس", "ب***س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v1708, "بكس", "ب*س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1709, "بشرموطتي", "ب******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1710, "بشرموطتهن", "ب*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1711, "بشرموطتهم", "ب*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1712, "بشرموطتها", "ب*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1713, "بشرموطته", "ب******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1714, "بشرموطتنا", "ب*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1715, "بشرموطتكن", "ب*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1716, "بشرموطتكم", "ب*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1717, "بشرموطتك", "ب******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1718, "بشرموطة", "ب*****ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1719, "بشرموطاتي", "ب*******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1720, "بشرموطاتهن", "ب********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1721, "بشرموطاتهم", "ب********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1722, "بشرموطاتها", "ب********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1723, "بشرموطاته", "ب*******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1724, "بشرموطاتنا", "ب********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1725, "بشرموطاتكن", "ب********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1726, "بشرموطاتكم", "ب********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1727, "بشرموطاتك", "ب*******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1728, "بشرموطات", "ب******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1729, "بزوبي", "ب***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1730, "بزوبهن", "ب****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1731, "بزوبهم", "ب****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1732, "بزوبها", "ب****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1733, "بزوبه", "ب***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1734, "بزوبنا", "ب****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1735, "بزوبكن", "ب****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1736, "بزوبكم", "ب****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1737, "بزوبك", "ب***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1738, "بزوب", "ب**ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1739, "بزبي", "ب**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1740, "بزبهن", "ب***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1741, "بزبهم", "ب***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1742, "بزبها", "ب***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1743, "بزبه", "ب**ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1744, "بزبنا", "ب***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1745, "بزبكن", "ب***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1746, "بزبكم", "ب***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1747, "بزبك", "ب**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1748, "بزبابي", "ب****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1749, "بزبابهن", "ب*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1750, "بزبابهم", "ب*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1751, "بزبابها", "ب*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1752, "بزبابه", "ب****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1753, "بزبابنا", "ب*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1754, "بزبابكن", "ب*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1755, "بزبابكم", "ب*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1756, "بزبابك", "ب****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1757, "بزباب", "ب***ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v1758, "بزب", "ب*ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1759, "بزاز", "ب**ز");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[3],0>(v1760, "بز", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1761, "بخرواتي", "ب*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1762, "بخرواتهن", "ب******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1763, "بخرواتهم", "ب******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1764, "بخرواتها", "ب******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1765, "بخرواته", "ب*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1766, "بخرواتنا", "ب******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1767, "بخرواتكن", "ب******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1768, "بخرواتكم", "ب******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1769, "بخرواتك", "ب*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1770, "بخروات", "ب****ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1771, "بخرتي", "ب***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1772, "بخرة", "ب**ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1773, "بالكسكوس", "ب******س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1774, "بالكساس", "ب*****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1775, "بالكس", "ب***س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1776, "بالشرموطة", "ب*******ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1777, "بالشرموطات", "ب********ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1778, "بالزوب", "ب****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1779, "بالزباب", "ب*****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1780, "بالزب", "ب***ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1781, "بالخروات", "ب******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1782, "بالخرة", "ب****ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1783, "ايري", "ا**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1784, "ايرك", "ا**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v1785, "اير", "ا*ر");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1786, "انيكك", "ا***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1787, "انيك", "ا**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1788, "اللعين", "ا****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1789, "الكسكوس", "ا*****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1790, "الكساس", "ا****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1791, "الكس", "ا**س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1792, "العرص", "ا***ص");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1793, "العاهرة", "ا*****ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1794, "الشرموطة", "ا******ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1795, "الشرموطات", "ا*******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1796, "الزوب", "ا***ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1797, "الزباب", "ا****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1798, "الزب", "ا**ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1799, "الخروات", "ا*****ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1800, "الخرة", "ا***ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1801, "الاستنماء", "ا*******ء");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1802, "إيري", "إ**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1803, "إيرك", "إ**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v1804, "إير", "إ*ر");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1805, "أيري", "أ**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1806, "أيرك", "أ**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v1807, "أير", "أ*ر");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1808, "أنيكك", "أ***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1809, "أنيك", "أ**ك");
    std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](&siri::dialogengine::GetProfanityFilter_ar_AE(void)::sProfanityData_ar_AE, (uint64_t)v5, 0x70DuLL);
    for (i = 0; i != -10830; i -= 6)
      std::pair<std::string const,std::string>::~pair((uint64_t)&v1809[i]);
    __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], &siri::dialogengine::GetProfanityFilter_ar_AE(void)::sProfanityData_ar_AE, &dword_1BF794000);
  }
  *v1 = 0;
  v1[1] = 0;
  v1[2] = 0;
  return std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(v1, siri::dialogengine::GetProfanityFilter_ar_AE(void)::sProfanityData_ar_AE, *(uint64_t *)algn_1EF583110, 0xAAAAAAAAAAAAAAABLL* ((*(_QWORD *)algn_1EF583110 - siri::dialogengine::GetProfanityFilter_ar_AE(void)::sProfanityData_ar_AE) >> 4));
}

void sub_1BFBC0BDC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + 86592;
  v4 = -86640;
  do
  {
    v3 = std::pair<std::string const,std::string>::~pair(v3) - 48;
    v4 += 48;
  }
  while (v4);
  _Unwind_Resume(a1);
}

_QWORD *siri::dialogengine::GetProfanityFilter_nl_NL(siri::dialogengine *this)
{
  unsigned __int8 v2;
  uint64_t i;
  _QWORD v5[6];
  _QWORD v6[6];
  _QWORD v7[6];
  _QWORD v8[7];

  v8[6] = *MEMORY[0x1E0C80C00];
  if ((v2 & 1) == 0
  {
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v5, "darmtouristjes", "d************s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v6, "darmtouristje", "d***********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v7, "darmtouristen", "d***********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v8, "darmtourist", "d*********t");
    std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](&siri::dialogengine::GetProfanityFilter_nl_NL(void)::sProfanityData_nl_NL, (uint64_t)v5, 4uLL);
    for (i = 18; i != -6; i -= 6)
      std::pair<std::string const,std::string>::~pair((uint64_t)&v5[i]);
    __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], &siri::dialogengine::GetProfanityFilter_nl_NL(void)::sProfanityData_nl_NL, &dword_1BF794000);
  }
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  return std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(this, siri::dialogengine::GetProfanityFilter_nl_NL(void)::sProfanityData_nl_NL, *(uint64_t *)algn_1EF583150, 0xAAAAAAAAAAAAAAABLL* ((*(_QWORD *)algn_1EF583150 - siri::dialogengine::GetProfanityFilter_nl_NL(void)::sProfanityData_nl_NL) >> 4));
}

void sub_1BFBC0DBC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t i;

  for (i = 144; i != -48; i -= 48)
    std::pair<std::string const,std::string>::~pair(v1 + i);
  _Unwind_Resume(a1);
}

_QWORD *siri::dialogengine::GetProfanityFilter_de_CH(siri::dialogengine *this)
{
  unsigned __int8 v2;
  _QWORD v4[7];

  v4[6] = *MEMORY[0x1E0C80C00];
  if ((v2 & 1) == 0
  {
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v4, "arschtrompeter", "a************r");
    std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](&siri::dialogengine::GetProfanityFilter_de_CH(void)::sProfanityData_de_CH, (uint64_t)v4, 1uLL);
    std::pair<std::string const,std::string>::~pair((uint64_t)v4);
    __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], &siri::dialogengine::GetProfanityFilter_de_CH(void)::sProfanityData_de_CH, &dword_1BF794000);
  }
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  return std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(this, siri::dialogengine::GetProfanityFilter_de_CH(void)::sProfanityData_de_CH, *(uint64_t *)algn_1EF583170, 0xAAAAAAAAAAAAAAABLL* ((*(_QWORD *)algn_1EF583170 - siri::dialogengine::GetProfanityFilter_de_CH(void)::sProfanityData_de_CH) >> 4));
}

void sub_1BFBC0F1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::pair<std::string const,std::string>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *siri::dialogengine::GetProfanityFilter_de_AT(siri::dialogengine *this)
{
  unsigned __int8 v2;
  uint64_t i;
  _QWORD v5[6];
  _QWORD v6[6];
  _QWORD v7[6];
  _QWORD v8[6];
  _QWORD v9[6];
  _QWORD v10[6];
  _QWORD v11[6];
  _QWORD v12[6];
  _QWORD v13[6];
  _QWORD v14[6];
  _QWORD v15[6];
  _QWORD v16[6];
  _QWORD v17[6];
  _QWORD v18[6];
  _QWORD v19[6];
  _QWORD v20[6];
  _QWORD v21[6];
  _QWORD v22[6];
  _QWORD v23[6];
  _QWORD v24[6];
  _QWORD v25[6];
  _QWORD v26[6];
  _QWORD v27[6];
  _QWORD v28[6];
  _QWORD v29[6];
  _QWORD v30[6];
  _QWORD v31[6];
  _QWORD v32[6];
  _QWORD v33[6];
  _QWORD v34[6];
  _QWORD v35[6];
  _QWORD v36[6];
  _QWORD v37[6];
  _QWORD v38[6];
  _QWORD v39[6];
  _QWORD v40[6];
  _QWORD v41[6];
  _QWORD v42[6];
  _QWORD v43[6];
  _QWORD v44[6];
  _QWORD v45[6];
  _QWORD v46[6];
  _QWORD v47[6];
  _QWORD v48[6];
  _QWORD v49[6];
  _QWORD v50[6];
  _QWORD v51[6];
  _QWORD v52[6];
  _QWORD v53[6];
  _QWORD v54[6];
  _QWORD v55[6];
  _QWORD v56[6];
  _QWORD v57[7];

  v57[6] = *MEMORY[0x1E0C80C00];
  if ((v2 & 1) == 0
  {
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[19],0>(v5, "tschuschenschlampe", "T****************e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[17],0>(v6, "tschuschenfotze", "T**************e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[16],0>(v7, "tschuschenficker", "T*************r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v8, "tschusch", "t****sch");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[13],0>(v9, "tschurifetzen", "t**********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v10, "tschuri", "t****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[10],0>(v11, "schnackseln", "s*******n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[12],0>(v12, "scheisstürke", "s*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v13, "scheissjugo", "s*********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v14, "schancksln", "s*******n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v15, "saubeidl", "s******l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v16, "saubeidel", "s******l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[9],0>(v17, "pudern", "p******n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[12],0>(v18, "puderant", "p*********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[9],0>(v19, "polacke", "p******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v20, "oaschloch", "o*******h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[13],0>(v21, "oaschficker", "o**********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v22, "oasch", "o*sch");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[15],0>(v23, "oarschtrompeter", "a************r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[13],0>(v24, "oarschpuderant", "o**********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v25, "oarschpartie", "o**********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[13],0>(v26, "oarschloecher", "a**********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v27, "oarschloch", "a*******h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v28, "oarschlecker", "a*********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[12],0>(v29, "oarschlöcher", "a*********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[17],0>(v30, "oarschkriecherin", "a*************in");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[14],0>(v31, "oarschkriecher", "a***********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v32, "oarschkekse", "a*******se");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v33, "oarschkeks", "a******ks");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[14],0>(v34, "oarschkatheter", "a***********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[14],0>(v35, "oarschintruder", "a***********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v36, "oarschficker", "a*********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v37, "oarschficken", "a********en");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[13],0>(v38, "oarschbeidl", "o**********l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v39, "oarsch", "o***h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v40, "mongo", "m***o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[10],0>(v41, "jugoschlampe", "j*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v42, "gschissener", "g********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v43, "gschissen", "g*******n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[12],0>(v44, "futtlappen", "f*********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[6],0>(v45, "futt", "f***t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v46, "futlapperl", "f********l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[13],0>(v47, "futlappen", "f**********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v48, "fut", "f*t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v49, "funsn", "f***n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v50, "dutteln", "d****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v51, "brunzen", "b*****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[15],0>(v52, "bimboschlampe", "b************e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v53, "bimbo", "b***o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[7],0>(v54, "beidl", "b****l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v55, "beidel", "b****l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v56, "arschpartie", "a*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v57, "arschbeidel", "a*********l");
    std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](&siri::dialogengine::GetProfanityFilter_de_AT(void)::sProfanityData_de_AT, (uint64_t)v5, 0x35uLL);
    for (i = 312; i != -6; i -= 6)
      std::pair<std::string const,std::string>::~pair((uint64_t)&v5[i]);
    __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], &siri::dialogengine::GetProfanityFilter_de_AT(void)::sProfanityData_de_AT, &dword_1BF794000);
  }
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  return std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(this, siri::dialogengine::GetProfanityFilter_de_AT(void)::sProfanityData_de_AT, *(uint64_t *)algn_1EF583190, 0xAAAAAAAAAAAAAAABLL* ((*(_QWORD *)algn_1EF583190 - siri::dialogengine::GetProfanityFilter_de_AT(void)::sProfanityData_de_AT) >> 4));
}

void sub_1BFBC1684(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t i;

  for (i = 2496; i != -48; i -= 48)
    std::pair<std::string const,std::string>::~pair(v1 + i);
  _Unwind_Resume(a1);
}

_QWORD *siri::dialogengine::GetProfanityFilter_de_DE(siri::dialogengine *this)
{
  unsigned __int8 v2;
  _QWORD v4[7];

  v4[6] = *MEMORY[0x1E0C80C00];
  if ((v2 & 1) == 0
  {
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v4, "arschtrompeter", "a************r");
    std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](&siri::dialogengine::GetProfanityFilter_de_DE(void)::sProfanityData_de_DE, (uint64_t)v4, 1uLL);
    std::pair<std::string const,std::string>::~pair((uint64_t)v4);
    __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], &siri::dialogengine::GetProfanityFilter_de_DE(void)::sProfanityData_de_DE, &dword_1BF794000);
  }
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  return std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(this, siri::dialogengine::GetProfanityFilter_de_DE(void)::sProfanityData_de_DE, *(uint64_t *)algn_1EF5831B0, 0xAAAAAAAAAAAAAAABLL* ((*(_QWORD *)algn_1EF5831B0 - siri::dialogengine::GetProfanityFilter_de_DE(void)::sProfanityData_de_DE) >> 4));
}

void sub_1BFBC17E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::pair<std::string const,std::string>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *siri::dialogengine::GetProfanityFilter_fr_BE(siri::dialogengine *this)
{
  _QWORD *v1;
  unsigned __int8 v2;
  uint64_t i;
  _QWORD v5[6];
  _QWORD v6[6];
  _QWORD v7[6];
  _QWORD v8[6];
  _QWORD v9[6];
  _QWORD v10[6];
  _QWORD v11[6];
  _QWORD v12[6];
  _QWORD v13[6];
  _QWORD v14[6];
  _QWORD v15[6];
  _QWORD v16[6];
  _QWORD v17[6];
  _QWORD v18[6];
  _QWORD v19[6];
  _QWORD v20[6];
  _QWORD v21[6];
  _QWORD v22[6];
  _QWORD v23[6];
  _QWORD v24[6];
  _QWORD v25[6];
  _QWORD v26[6];
  _QWORD v27[6];
  _QWORD v28[6];
  _QWORD v29[6];
  _QWORD v30[6];
  _QWORD v31[6];
  _QWORD v32[6];
  _QWORD v33[6];
  _QWORD v34[6];
  _QWORD v35[6];
  _QWORD v36[6];
  _QWORD v37[6];
  _QWORD v38[6];
  _QWORD v39[6];
  _QWORD v40[6];
  _QWORD v41[6];
  _QWORD v42[6];
  _QWORD v43[6];
  _QWORD v44[6];
  _QWORD v45[6];
  _QWORD v46[6];
  _QWORD v47[6];
  _QWORD v48[6];
  _QWORD v49[6];
  _QWORD v50[6];
  _QWORD v51[6];
  _QWORD v52[6];
  _QWORD v53[6];
  _QWORD v54[6];
  _QWORD v55[6];
  _QWORD v56[6];
  _QWORD v57[6];
  _QWORD v58[6];
  _QWORD v59[6];
  _QWORD v60[6];
  _QWORD v61[6];
  _QWORD v62[6];
  _QWORD v63[6];
  _QWORD v64[6];
  _QWORD v65[6];
  _QWORD v66[6];
  _QWORD v67[6];
  _QWORD v68[6];
  _QWORD v69[6];
  _QWORD v70[6];
  _QWORD v71[6];
  _QWORD v72[6];
  _QWORD v73[6];
  _QWORD v74[6];
  _QWORD v75[6];
  _QWORD v76[6];
  _QWORD v77[6];
  _QWORD v78[6];
  _QWORD v79[6];
  _QWORD v80[6];
  _QWORD v81[6];
  _QWORD v82[6];
  _QWORD v83[6];
  _QWORD v84[6];
  _QWORD v85[6];
  _QWORD v86[6];
  _QWORD v87[6];
  _QWORD v88[6];
  _QWORD v89[6];
  _QWORD v90[6];
  _QWORD v91[6];
  _QWORD v92[6];
  _QWORD v93[6];
  _QWORD v94[6];
  _QWORD v95[6];
  _QWORD v96[6];
  _QWORD v97[6];
  _QWORD v98[6];
  _QWORD v99[6];
  _QWORD v100[6];
  _QWORD v101[6];
  _QWORD v102[6];
  _QWORD v103[6];
  _QWORD v104[6];
  _QWORD v105[6];
  _QWORD v106[6];
  _QWORD v107[6];
  _QWORD v108[6];
  _QWORD v109[6];
  _QWORD v110[6];
  _QWORD v111[6];
  _QWORD v112[6];
  _QWORD v113[6];
  _QWORD v114[6];
  _QWORD v115[6];
  _QWORD v116[6];
  _QWORD v117[6];
  _QWORD v118[6];
  _QWORD v119[6];
  _QWORD v120[6];
  _QWORD v121[6];
  _QWORD v122[6];
  _QWORD v123[6];
  _QWORD v124[6];
  _QWORD v125[6];
  _QWORD v126[6];
  _QWORD v127[6];
  _QWORD v128[6];
  _QWORD v129[6];
  _QWORD v130[6];
  _QWORD v131[6];
  _QWORD v132[6];
  _QWORD v133[6];
  _QWORD v134[6];
  _QWORD v135[6];
  _QWORD v136[6];
  _QWORD v137[6];
  _QWORD v138[6];
  _QWORD v139[6];
  _QWORD v140[6];
  _QWORD v141[6];
  _QWORD v142[6];
  _QWORD v143[6];
  _QWORD v144[6];
  _QWORD v145[6];
  _QWORD v146[6];
  _QWORD v147[6];
  _QWORD v148[6];
  _QWORD v149[6];
  _QWORD v150[6];
  _QWORD v151[6];
  _QWORD v152[6];
  _QWORD v153[6];
  _QWORD v154[6];
  _QWORD v155[6];
  _QWORD v156[6];
  _QWORD v157[6];
  _QWORD v158[6];
  _QWORD v159[6];
  _QWORD v160[6];
  _QWORD v161[6];
  _QWORD v162[6];
  _QWORD v163[6];
  _QWORD v164[6];
  _QWORD v165[6];
  _QWORD v166[6];
  _QWORD v167[6];
  _QWORD v168[6];
  _QWORD v169[6];
  _QWORD v170[6];
  _QWORD v171[6];
  _QWORD v172[6];
  _QWORD v173[6];
  _QWORD v174[6];
  _QWORD v175[6];
  _QWORD v176[6];
  _QWORD v177[6];
  _QWORD v178[6];
  _QWORD v179[6];
  _QWORD v180[6];
  _QWORD v181[6];
  _QWORD v182[6];
  _QWORD v183[6];
  _QWORD v184[6];
  _QWORD v185[6];
  _QWORD v186[6];
  _QWORD v187[6];
  _QWORD v188[6];
  _QWORD v189[6];
  _QWORD v190[6];
  _QWORD v191[6];
  _QWORD v192[6];
  _QWORD v193[6];
  _QWORD v194[6];
  _QWORD v195[6];
  _QWORD v196[6];
  _QWORD v197[6];
  _QWORD v198[6];
  _QWORD v199[6];
  _QWORD v200[6];
  _QWORD v201[6];
  _QWORD v202[6];
  _QWORD v203[6];
  _QWORD v204[6];
  _QWORD v205[6];
  _QWORD v206[6];
  _QWORD v207[6];
  _QWORD v208[7];

  v1 = (_QWORD *)MEMORY[0x1E0C80A78](this);
  v208[6] = *MEMORY[0x1E0C80C00];
  if ((v2 & 1) == 0
  {
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v5, "zobs", "z**s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v6, "zguegs", "z****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v7, "zgueg", "z***g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v8, "zguègues", "z******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v9, "zguègue", "z*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v10, "zgegs", "z***s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v11, "zgeg", "z**g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v12, "youpins", "y*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v13, "youpines", "y******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v14, "youpine", "y*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v15, "youpin", "y****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v16, "trouducs", "t******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v17, "trouduc", "t*****c");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v18, "troncher", "t******r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v19, "tichs", "t***s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v20, "tiches", "t****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v21, "tiche", "t***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v22, "tich", "t**h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v23, "teubs", "t***s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v24, "tarlouzes", "t*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v25, "tarlouses", "t*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v26, "tarés", "t***s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v27, "tapioles", "t******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v28, "tapiole", "t*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v29, "tantouzes", "t*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v30, "tantouze", "t******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v31, "tantouses", "t*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v32, "tantouse", "t******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v33, "têts", "t**s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[4],0>(v34, "têt", "t*t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v35, "tèts", "t**s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[4],0>(v36, "tèt", "t*t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v37, "strons", "s****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v38, "stron", "s***n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v39, "sinssis", "s*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v40, "sinssi", "s****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v41, "sguegs", "s****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v42, "sgueg", "s***g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v43, "sguègues", "s******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v44, "sguègue", "s*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v45, "sgegs", "s***s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v46, "sgeg", "s**g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v47, "salops", "s****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v48, "salopards", "s*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v49, "salopard", "s******d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v50, "saligots", "s******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v51, "saligot", "s*****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v52, "saisis", "s****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v53, "saisi", "s***i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v54, "roustons", "r******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v55, "rouston", "r*****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v56, "roupettes", "r*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v57, "roupette", "r******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v58, "ritals", "r****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v59, "rital", "r***l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v60, "radasses", "r******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v61, "radasse", "r*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v62, "quettes", "q*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v63, "quetter", "q*****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v64, "quette", "q****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v65, "quéquettes", "q********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v66, "quéquette", "q*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v67, "putasses", "p******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v68, "putasseries", "p*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v69, "putasserie", "p********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v70, "putasse", "p*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v71, "pourchas", "p******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v72, "pourcha", "p*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v73, "poivrots", "p******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v74, "pochtrons", "p*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v75, "pochetrons", "p********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[10],0>(v76, "pochards", "p*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v77, "pisseurs", "p******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v78, "pisseur", "p*****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v79, "pisser", "p****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v80, "pines", "p***s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v81, "piner", "p***r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v82, "pine", "p**e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v83, "peys", "p**s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v84, "peyes", "p***s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v85, "peye", "p**e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v86, "pey", "p*s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v87, "peïs", "p**s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v88, "peï", "p*ï");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v89, "nibards", "n*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v90, "mijolles", "m******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v91, "mijolle", "m*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v92, "mijoles", "m*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v93, "mijole", "m****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v94, "migeolles", "m*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v95, "migeolle", "m******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v96, "migeoles", "m******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v97, "migeole", "m*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v98, "merdiers", "m******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v99, "merdier", "m*****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v100, "merdasses", "m*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v101, "merdasse", "m******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v102, "lesbiches", "l*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v103, "lesbiche", "l******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v104, "klettes", "k*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v105, "klette", "k****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v106, "klets", "k***s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v107, "klet", "k**t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v108, "kettes", "k****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v109, "ketter", "k****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v110, "kette", "k***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v111, "kets", "k**s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v112, "ket", "k*t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v113, "kakkes", "k****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v114, "kakker", "k****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v115, "kakke", "k***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v116, "kakes", "k***s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v117, "kaker", "k***r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v118, "kake", "k**e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v119, "godiches", "g******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v120, "godiche", "g*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v121, "founes", "f****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v122, "foune", "f***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v123, "foufounettes", "f**********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[9],0>(v124, "fouffes", "f******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v125, "fouffe", "f****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v126, "foufes", "f****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v127, "fister", "f****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v128, "fiottes", "f*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v129, "fiotte", "f****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v130, "fions", "f***s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v131, "fion", "f**n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v132, "enfoirées", "e*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v133, "enfoirée", "e******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v134, "enculeurs", "e*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v135, "enculeur", "e******r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v136, "empaffer", "e******r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v137, "empaffés", "e*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v138, "empaffées", "e********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v139, "empaffée", "e******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v140, "empaffé", "e*****é");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v141, "emmerdeuses", "e*********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v142, "emmerdeuse", "e********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v143, "emmerdeurs", "e********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v144, "emmerdeur", "e*******r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v145, "djondus", "d*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v146, "djondu", "d****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v147, "derches", "d*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v148, "culs", "c**s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v149, "cul", "c*l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v150, "cucuches", "c******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v151, "cucuche", "c*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v152, "crailles", "c******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v153, "craille", "c*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v154, "couillons", "c*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v155, "couillon", "c******n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v156, "cougner", "c*****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v157, "connasses", "c*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v158, "connasse", "c******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[10],0>(v159, "conasses", "c*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v160, "conasse", "c*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v161, "conards", "c*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v162, "conard", "c****d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v163, "clitos", "c****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v164, "chouannes", "c*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v165, "chouanne", "c******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v166, "chouanes", "c******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v167, "chouane", "c*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v168, "chintoks", "c******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v169, "chinetoques", "c********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v170, "chinetoks", "c*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v171, "chieurs", "c*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v172, "chieur", "c****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v173, "chieries", "c******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v174, "chierie", "c*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v175, "chiennasses", "c*********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v176, "chiennasse", "c********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v177, "chiatique", "c*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v178, "chiasses", "c******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v179, "chiasser", "c******r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v180, "chiées", "c****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v181, "chiée", "c***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v182, "chagattes", "c*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v183, "chagatte", "c******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v184, "burne", "b***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v185, "branlotter", "b********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v186, "branlettes", "b********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v187, "branler", "b*****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v188, "branlées", "b******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v189, "branlée", "b*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v190, "bouniouls", "b*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v191, "bounioules", "b********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v192, "bounioule", "b*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v193, "bounioul", "b******l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v194, "boches", "b****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v195, "boche", "b***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v196, "bites", "b***s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v197, "biesses", "b*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v198, "biesse", "b****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v199, "bauyards", "b******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v200, "bauyard", "b*****d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v201, "baraquis", "b******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v202, "baraqui", "b*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v203, "baraquîs", "b******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v204, "baraquî", "b*****î");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v205, "barakis", "b*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v206, "baraki", "b****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v207, "barakîs", "b*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v208, "barakî", "b****î");
    std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](&siri::dialogengine::GetProfanityFilter_fr_BE(void)::sProfanityData_fr_BE, (uint64_t)v5, 0xCCuLL);
    for (i = 0; i != -1224; i -= 6)
      std::pair<std::string const,std::string>::~pair((uint64_t)&v208[i]);
    __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], &siri::dialogengine::GetProfanityFilter_fr_BE(void)::sProfanityData_fr_BE, &dword_1BF794000);
  }
  *v1 = 0;
  v1[1] = 0;
  v1[2] = 0;
  return std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(v1, siri::dialogengine::GetProfanityFilter_fr_BE(void)::sProfanityData_fr_BE, *(uint64_t *)algn_1EF5831D0, 0xAAAAAAAAAAAAAAABLL* ((*(_QWORD *)algn_1EF5831D0 - siri::dialogengine::GetProfanityFilter_fr_BE(void)::sProfanityData_fr_BE) >> 4));
}

void sub_1BFBC3300(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + 9744;
  v4 = -9792;
  do
  {
    v3 = std::pair<std::string const,std::string>::~pair(v3) - 48;
    v4 += 48;
  }
  while (v4);
  _Unwind_Resume(a1);
}

_QWORD *siri::dialogengine::GetProfanityFilter_fr_CA(siri::dialogengine *this)
{
  unsigned __int8 v2;
  uint64_t i;
  _QWORD v5[6];
  _QWORD v6[6];
  _QWORD v7[6];
  _QWORD v8[6];
  _QWORD v9[6];
  _QWORD v10[6];
  _QWORD v11[6];
  _QWORD v12[6];
  _QWORD v13[6];
  _QWORD v14[6];
  _QWORD v15[6];
  _QWORD v16[6];
  _QWORD v17[6];
  _QWORD v18[6];
  _QWORD v19[6];
  _QWORD v20[6];
  _QWORD v21[6];
  _QWORD v22[6];
  _QWORD v23[6];
  _QWORD v24[6];
  _QWORD v25[6];
  _QWORD v26[6];
  _QWORD v27[6];
  _QWORD v28[6];
  _QWORD v29[6];
  _QWORD v30[6];
  _QWORD v31[6];
  _QWORD v32[7];

  v32[6] = *MEMORY[0x1E0C80C00];
  if ((v2 & 1) == 0
  {
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v5, "zouf", "z**f");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v6, "twit", "t**t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v7, "trou du cul", "t*********l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v8, "trou de cul", "t*********l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v9, "toton", "t***n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v10, "ti cul", "t****l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v11, "taouin", "t****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v12, "tabernak", "t******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v13, "téteux", "t****x");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v14, "quétaine", "q******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v15, "pogne-cul", "p*******l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v16, "plein de marde", "p************e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v17, "pissou", "p****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v18, "niochon", "n*****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v19, "niaiseux", "n******x");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v20, "newfie", "n****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v21, "naiseuse", "n******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v22, "moumoune", "m******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v23, "moron", "m***n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v24, "mongol", "m****l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[17],0>(v25, "mangeux de marde", "m**************e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v26, "lâcheux", "l*****x");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v27, "gnochon", "g*****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v28, "fif", "f*f");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v29, "crotter", "c*****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v30, "crotté", "c****é");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v31, "bloke", "b***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[26],char const(&)[26],0>(v32, "épais dans le plus mince", "é**********************e");
    std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](&siri::dialogengine::GetProfanityFilter_fr_CA(void)::sProfanityData_fr_CA, (uint64_t)v5, 0x1CuLL);
    for (i = 162; i != -6; i -= 6)
      std::pair<std::string const,std::string>::~pair((uint64_t)&v5[i]);
    __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], &siri::dialogengine::GetProfanityFilter_fr_CA(void)::sProfanityData_fr_CA, &dword_1BF794000);
  }
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  return std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(this, siri::dialogengine::GetProfanityFilter_fr_CA(void)::sProfanityData_fr_CA, *(uint64_t *)algn_1EF5831F0, 0xAAAAAAAAAAAAAAABLL* ((*(_QWORD *)algn_1EF5831F0 - siri::dialogengine::GetProfanityFilter_fr_CA(void)::sProfanityData_fr_CA) >> 4));
}

void sub_1BFBC37AC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t i;

  for (i = 1296; i != -48; i -= 48)
    std::pair<std::string const,std::string>::~pair(v1 + i);
  _Unwind_Resume(a1);
}

_QWORD *siri::dialogengine::GetProfanityFilter_es_US(siri::dialogengine *this)
{
  _QWORD *v1;
  unsigned __int8 v2;
  uint64_t i;
  _QWORD v5[6];
  _QWORD v6[6];
  _QWORD v7[6];
  _QWORD v8[6];
  _QWORD v9[6];
  _QWORD v10[6];
  _QWORD v11[6];
  _QWORD v12[6];
  _QWORD v13[6];
  _QWORD v14[6];
  _QWORD v15[6];
  _QWORD v16[6];
  _QWORD v17[6];
  _QWORD v18[6];
  _QWORD v19[6];
  _QWORD v20[6];
  _QWORD v21[6];
  _QWORD v22[6];
  _QWORD v23[6];
  _QWORD v24[6];
  _QWORD v25[6];
  _QWORD v26[6];
  _QWORD v27[6];
  _QWORD v28[6];
  _QWORD v29[6];
  _QWORD v30[6];
  _QWORD v31[6];
  _QWORD v32[6];
  _QWORD v33[6];
  _QWORD v34[6];
  _QWORD v35[6];
  _QWORD v36[6];
  _QWORD v37[6];
  _QWORD v38[6];
  _QWORD v39[6];
  _QWORD v40[6];
  _QWORD v41[6];
  _QWORD v42[6];
  _QWORD v43[6];
  _QWORD v44[6];
  _QWORD v45[6];
  _QWORD v46[6];
  _QWORD v47[6];
  _QWORD v48[6];
  _QWORD v49[6];
  _QWORD v50[6];
  _QWORD v51[6];
  _QWORD v52[6];
  _QWORD v53[6];
  _QWORD v54[6];
  _QWORD v55[6];
  _QWORD v56[6];
  _QWORD v57[6];
  _QWORD v58[6];
  _QWORD v59[6];
  _QWORD v60[6];
  _QWORD v61[6];
  _QWORD v62[6];
  _QWORD v63[6];
  _QWORD v64[6];
  _QWORD v65[6];
  _QWORD v66[6];
  _QWORD v67[6];
  _QWORD v68[6];
  _QWORD v69[6];
  _QWORD v70[6];
  _QWORD v71[6];
  _QWORD v72[6];
  _QWORD v73[6];
  _QWORD v74[6];
  _QWORD v75[6];
  _QWORD v76[6];
  _QWORD v77[6];
  _QWORD v78[6];
  _QWORD v79[6];
  _QWORD v80[6];
  _QWORD v81[6];
  _QWORD v82[6];
  _QWORD v83[6];
  _QWORD v84[6];
  _QWORD v85[6];
  _QWORD v86[6];
  _QWORD v87[6];
  _QWORD v88[6];
  _QWORD v89[6];
  _QWORD v90[6];
  _QWORD v91[6];
  _QWORD v92[6];
  _QWORD v93[6];
  _QWORD v94[6];
  _QWORD v95[6];
  _QWORD v96[6];
  _QWORD v97[6];
  _QWORD v98[6];
  _QWORD v99[6];
  _QWORD v100[6];
  _QWORD v101[6];
  _QWORD v102[6];
  _QWORD v103[6];
  _QWORD v104[6];
  _QWORD v105[6];
  _QWORD v106[6];
  _QWORD v107[6];
  _QWORD v108[6];
  _QWORD v109[6];
  _QWORD v110[6];
  _QWORD v111[6];
  _QWORD v112[6];
  _QWORD v113[6];
  _QWORD v114[6];
  _QWORD v115[6];
  _QWORD v116[6];
  _QWORD v117[6];
  _QWORD v118[6];
  _QWORD v119[6];
  _QWORD v120[6];
  _QWORD v121[6];
  _QWORD v122[6];
  _QWORD v123[6];
  _QWORD v124[6];
  _QWORD v125[6];
  _QWORD v126[6];
  _QWORD v127[6];
  _QWORD v128[6];
  _QWORD v129[6];
  _QWORD v130[6];
  _QWORD v131[6];
  _QWORD v132[6];
  _QWORD v133[6];
  _QWORD v134[6];
  _QWORD v135[6];
  _QWORD v136[6];
  _QWORD v137[6];
  _QWORD v138[6];
  _QWORD v139[6];
  _QWORD v140[6];
  _QWORD v141[6];
  _QWORD v142[6];
  _QWORD v143[6];
  _QWORD v144[6];
  _QWORD v145[6];
  _QWORD v146[6];
  _QWORD v147[6];
  _QWORD v148[6];
  _QWORD v149[6];
  _QWORD v150[6];
  _QWORD v151[6];
  _QWORD v152[6];
  _QWORD v153[6];
  _QWORD v154[6];
  _QWORD v155[6];
  _QWORD v156[6];
  _QWORD v157[6];
  _QWORD v158[7];

  v1 = (_QWORD *)MEMORY[0x1E0C80A78](this);
  v158[6] = *MEMORY[0x1E0C80C00];
  if ((v2 & 1) == 0
  {
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v5, "verguitas", "v********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v6, "verguita", "v*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v7, "vergudo", "v******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v8, "vergotas", "v*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v9, "vergota", "v******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v10, "vergas", "v*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v11, "verga", "v****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v12, "tetas", "t****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v13, "teta", "t***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v14, "rechinga", "r*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v15, "putos", "p****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v16, "putones", "p******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v17, "putonas", "p******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v18, "putona", "p*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v19, "puto", "p***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v20, "putito", "p*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v21, "putita", "p*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v22, "putero", "p*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v23, "putazos", "p******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v24, "putazo", "p*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v25, "puta", "p***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v26, "putón", "p****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v27, "puñetas", "p*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v28, "pitos", "p****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v29, "pito", "p***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v30, "pitero", "p*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v31, "pinches", "p******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v32, "pinche", "p*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v33, "pepa", "p***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v34, "pendejo", "p******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v35, "pendejitos", "p*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v36, "pendejito", "p********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v37, "pendejitas", "p*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v38, "pendejita", "p********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v39, "pendejadita", "p**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v40, "pendejadas", "p*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v41, "pendejada", "p********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v42, "pendeja", "p******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v43, "pelotudos", "p********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v44, "pelotudo", "p*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v45, "pedos", "p****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v46, "pedo", "p***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v47, "panochas", "p*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v48, "panocha", "p******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v49, "ojetes", "o*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v50, "ojete", "o****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v51, "mierdero", "m*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v52, "mierda", "m*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v53, "maricones", "m********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v54, "maricona", "m*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v55, "marica", "m*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v56, "maricón", "m******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v57, "mames", "m****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v58, "mamar", "m****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v59, "mamaditas", "m********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v60, "mamadita", "m*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v61, "mamadas", "m******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v62, "mamada", "m*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v63, "mamón", "m****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v64, "madriza", "m******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v65, "madrazo", "m******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v66, "lamehuevos", "l*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v67, "joto", "j***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v68, "jotito", "j*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v69, "jotete", "j*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v70, "jotísimo", "j*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v71, "jodimos", "j******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v72, "jodieron", "j*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v73, "jodido", "j*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v74, "jodidas", "j******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v75, "jodida", "j*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v76, "jodió", "j****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v77, "jodes", "j****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v78, "joder", "j****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v79, "joda", "j***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v80, "jodón", "j****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v81, "jódete", "j*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v82, "imbéciles", "i********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v83, "imbécil", "i******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v84, "idiotas", "i******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v85, "idiota", "i*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v86, "huevón", "h*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v87, "güeyes", "gü****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v88, "güey", "gü**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v89, "estúpidos", "e********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v90, "estúpido", "e*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v91, "estúpidas", "e********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(v92, "estúpida", "e******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v93, "encularse", "e********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v94, "enculados", "e********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v95, "enculado", "e*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v96, "encabronar", "e*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v97, "encabronado", "e**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v98, "encabronada", "e**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v99, "emputas", "e******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v100, "emputar", "e******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v101, "emputado", "e*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v102, "emputada", "e*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[13],0>(v103, "emputadísimo", "e***********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v104, "emputa", "e*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v105, "culote", "c*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v106, "culo", "c***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v107, "culito", "c*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v108, "culero", "c*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v109, "culera", "c*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v110, "cojones", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v111, "cojón", "c****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v112, "coños", "c****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v113, "coño", "c***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v114, "coñitos", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v115, "coñito", "c*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v116, "chingos", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v117, "chingonería", "c**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v118, "chingo", "c*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v119, "chingarse", "c********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v120, "chingaron", "c********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v121, "chingar", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v122, "chingaquedito", "c************");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v123, "chingando", "c********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v124, "chingan", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v125, "chingados", "c********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v126, "chingado", "c*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v127, "chingaderota", "c***********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v128, "chingaderita", "c***********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v129, "chingadera", "c*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v130, "chingada", "c*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v131, "chingón", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v132, "chaqueto", "c*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v133, "chaqueta", "c*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v134, "chúpamela", "c********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v135, "calientahuevos", "c*************");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v136, "cagotiza", "c*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v137, "cagaron", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v138, "cagarla", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v139, "cagados", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v140, "cagado", "c*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v141, "cagadas", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v142, "cagada", "c*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v143, "cabronzuelo", "c**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v144, "cabronzuela", "c**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v145, "cabrones", "c*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v146, "cabronazos", "c*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v147, "cabronazo", "c********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v148, "cabronas", "c*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v149, "cabrona", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v150, "cabrón", "c*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v151, "boludo", "b*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v152, "boluda", "b*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v153, "bastardo", "b*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v154, "bastarda", "b*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v155, "amariconados", "a***********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v156, "amariconado", "a**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v157, "amariconadas", "a***********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v158, "amariconada", "a**********");
    std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](&siri::dialogengine::GetProfanityFilter_es_US(void)::sProfanityData_es_US, (uint64_t)v5, 0x9AuLL);
    for (i = 0; i != -924; i -= 6)
      std::pair<std::string const,std::string>::~pair((uint64_t)&v158[i]);
    __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], &siri::dialogengine::GetProfanityFilter_es_US(void)::sProfanityData_es_US, &dword_1BF794000);
  }
  *v1 = 0;
  v1[1] = 0;
  v1[2] = 0;
  return std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(v1, siri::dialogengine::GetProfanityFilter_es_US(void)::sProfanityData_es_US, *(uint64_t *)algn_1EF583210, 0xAAAAAAAAAAAAAAABLL* ((*(_QWORD *)algn_1EF583210 - siri::dialogengine::GetProfanityFilter_es_US(void)::sProfanityData_es_US) >> 4));
}

void sub_1BFBC4C54(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + 7344;
  v4 = -7392;
  do
  {
    v3 = std::pair<std::string const,std::string>::~pair(v3) - 48;
    v4 += 48;
  }
  while (v4);
  _Unwind_Resume(a1);
}

_QWORD *siri::dialogengine::GetProfanityFilter_es_MX(siri::dialogengine *this)
{
  _QWORD *v1;
  unsigned __int8 v2;
  uint64_t i;
  _QWORD v5[6];
  _QWORD v6[6];
  _QWORD v7[6];
  _QWORD v8[6];
  _QWORD v9[6];
  _QWORD v10[6];
  _QWORD v11[6];
  _QWORD v12[6];
  _QWORD v13[6];
  _QWORD v14[6];
  _QWORD v15[6];
  _QWORD v16[6];
  _QWORD v17[6];
  _QWORD v18[6];
  _QWORD v19[6];
  _QWORD v20[6];
  _QWORD v21[6];
  _QWORD v22[6];
  _QWORD v23[6];
  _QWORD v24[6];
  _QWORD v25[6];
  _QWORD v26[6];
  _QWORD v27[6];
  _QWORD v28[6];
  _QWORD v29[6];
  _QWORD v30[6];
  _QWORD v31[6];
  _QWORD v32[6];
  _QWORD v33[6];
  _QWORD v34[6];
  _QWORD v35[6];
  _QWORD v36[6];
  _QWORD v37[6];
  _QWORD v38[6];
  _QWORD v39[6];
  _QWORD v40[6];
  _QWORD v41[6];
  _QWORD v42[6];
  _QWORD v43[6];
  _QWORD v44[6];
  _QWORD v45[6];
  _QWORD v46[6];
  _QWORD v47[6];
  _QWORD v48[6];
  _QWORD v49[6];
  _QWORD v50[6];
  _QWORD v51[6];
  _QWORD v52[6];
  _QWORD v53[6];
  _QWORD v54[6];
  _QWORD v55[6];
  _QWORD v56[6];
  _QWORD v57[6];
  _QWORD v58[6];
  _QWORD v59[6];
  _QWORD v60[6];
  _QWORD v61[6];
  _QWORD v62[6];
  _QWORD v63[6];
  _QWORD v64[6];
  _QWORD v65[6];
  _QWORD v66[6];
  _QWORD v67[6];
  _QWORD v68[6];
  _QWORD v69[6];
  _QWORD v70[6];
  _QWORD v71[6];
  _QWORD v72[6];
  _QWORD v73[6];
  _QWORD v74[6];
  _QWORD v75[6];
  _QWORD v76[6];
  _QWORD v77[6];
  _QWORD v78[6];
  _QWORD v79[6];
  _QWORD v80[6];
  _QWORD v81[6];
  _QWORD v82[6];
  _QWORD v83[6];
  _QWORD v84[6];
  _QWORD v85[6];
  _QWORD v86[6];
  _QWORD v87[6];
  _QWORD v88[6];
  _QWORD v89[6];
  _QWORD v90[6];
  _QWORD v91[6];
  _QWORD v92[6];
  _QWORD v93[6];
  _QWORD v94[6];
  _QWORD v95[6];
  _QWORD v96[6];
  _QWORD v97[6];
  _QWORD v98[6];
  _QWORD v99[6];
  _QWORD v100[6];
  _QWORD v101[6];
  _QWORD v102[6];
  _QWORD v103[6];
  _QWORD v104[6];
  _QWORD v105[6];
  _QWORD v106[6];
  _QWORD v107[6];
  _QWORD v108[6];
  _QWORD v109[6];
  _QWORD v110[6];
  _QWORD v111[6];
  _QWORD v112[6];
  _QWORD v113[6];
  _QWORD v114[6];
  _QWORD v115[6];
  _QWORD v116[6];
  _QWORD v117[6];
  _QWORD v118[6];
  _QWORD v119[6];
  _QWORD v120[6];
  _QWORD v121[6];
  _QWORD v122[6];
  _QWORD v123[6];
  _QWORD v124[6];
  _QWORD v125[6];
  _QWORD v126[6];
  _QWORD v127[6];
  _QWORD v128[6];
  _QWORD v129[6];
  _QWORD v130[6];
  _QWORD v131[6];
  _QWORD v132[6];
  _QWORD v133[6];
  _QWORD v134[6];
  _QWORD v135[6];
  _QWORD v136[6];
  _QWORD v137[6];
  _QWORD v138[6];
  _QWORD v139[6];
  _QWORD v140[6];
  _QWORD v141[6];
  _QWORD v142[6];
  _QWORD v143[6];
  _QWORD v144[6];
  _QWORD v145[6];
  _QWORD v146[6];
  _QWORD v147[6];
  _QWORD v148[6];
  _QWORD v149[6];
  _QWORD v150[6];
  _QWORD v151[6];
  _QWORD v152[6];
  _QWORD v153[6];
  _QWORD v154[6];
  _QWORD v155[6];
  _QWORD v156[6];
  _QWORD v157[6];
  _QWORD v158[7];

  v1 = (_QWORD *)MEMORY[0x1E0C80A78](this);
  v158[6] = *MEMORY[0x1E0C80C00];
  if ((v2 & 1) == 0
  {
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v5, "verguitas", "v********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v6, "verguita", "v*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v7, "vergudo", "v******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v8, "vergotas", "v*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v9, "vergota", "v******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v10, "vergas", "v*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v11, "verga", "v****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v12, "tetas", "t****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v13, "teta", "t***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v14, "rechinga", "r*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v15, "putos", "p****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v16, "putones", "p******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v17, "putonas", "p******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v18, "putona", "p*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v19, "puto", "p***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v20, "putito", "p*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v21, "putita", "p*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v22, "putero", "p*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v23, "putazos", "p******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v24, "putazo", "p*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v25, "puta", "p***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v26, "putón", "p****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v27, "puñetas", "p*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v28, "pitos", "p****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v29, "pito", "p***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v30, "pitero", "p*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v31, "pinches", "p******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v32, "pinche", "p*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v33, "pepa", "p***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v34, "pendejo", "p******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v35, "pendejitos", "p*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v36, "pendejito", "p********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v37, "pendejitas", "p*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v38, "pendejita", "p********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v39, "pendejadita", "p**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v40, "pendejadas", "p*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v41, "pendejada", "p********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v42, "pendeja", "p******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v43, "pelotudos", "p********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v44, "pelotudo", "p*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v45, "pedos", "p****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v46, "pedo", "p***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v47, "panochas", "p*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v48, "panocha", "p******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v49, "ojetes", "o*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v50, "ojete", "o****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v51, "mierdero", "m*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v52, "mierda", "m*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v53, "maricones", "m********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v54, "maricona", "m*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v55, "marica", "m*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v56, "maricón", "m******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v57, "mames", "m****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v58, "mamar", "m****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v59, "mamaditas", "m********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v60, "mamadita", "m*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v61, "mamadas", "m******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v62, "mamada", "m*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v63, "mamón", "m****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v64, "madriza", "m******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v65, "madrazo", "m******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v66, "lamehuevos", "l*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v67, "joto", "j***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v68, "jotito", "j*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v69, "jotete", "j*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v70, "jotísimo", "j*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v71, "jodimos", "j******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v72, "jodieron", "j*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v73, "jodido", "j*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v74, "jodidas", "j******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v75, "jodida", "j*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v76, "jodió", "j****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v77, "jodes", "j****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v78, "joder", "j****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v79, "joda", "j***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v80, "jodón", "j****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v81, "jódete", "j*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v82, "imbéciles", "i********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v83, "imbécil", "i******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v84, "idiotas", "i******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v85, "idiota", "i*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v86, "huevón", "h*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v87, "güeyes", "gü****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v88, "güey", "gü**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v89, "estúpidos", "e********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v90, "estúpido", "e*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v91, "estúpidas", "e********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(v92, "estúpida", "e******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v93, "encularse", "e********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v94, "enculados", "e********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v95, "enculado", "e*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v96, "encabronar", "e*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v97, "encabronado", "e**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v98, "encabronada", "e**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v99, "emputas", "e******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v100, "emputar", "e******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v101, "emputado", "e*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v102, "emputada", "e*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[13],0>(v103, "emputadísimo", "e***********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v104, "emputa", "e*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v105, "culote", "c*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v106, "culo", "c***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v107, "culito", "c*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v108, "culero", "c*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v109, "culera", "c*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v110, "cojones", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v111, "cojón", "c****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v112, "coños", "c****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v113, "coño", "c***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v114, "coñitos", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v115, "coñito", "c*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v116, "chingos", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v117, "chingonería", "c**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v118, "chingo", "c*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v119, "chingarse", "c********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v120, "chingaron", "c********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v121, "chingar", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v122, "chingaquedito", "c************");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v123, "chingando", "c********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v124, "chingan", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v125, "chingados", "c********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v126, "chingado", "c*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v127, "chingaderota", "c***********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v128, "chingaderita", "c***********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v129, "chingadera", "c*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v130, "chingada", "c*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v131, "chingón", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v132, "chaqueto", "c*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v133, "chaqueta", "c*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v134, "chúpamela", "c********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v135, "calientahuevos", "c*************");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v136, "cagotiza", "c*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v137, "cagaron", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v138, "cagarla", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v139, "cagados", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v140, "cagado", "c*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v141, "cagadas", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v142, "cagada", "c*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v143, "cabronzuelo", "c**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v144, "cabronzuela", "c**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v145, "cabrones", "c*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v146, "cabronazos", "c*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v147, "cabronazo", "c********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v148, "cabronas", "c*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v149, "cabrona", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v150, "cabrón", "c*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v151, "boludo", "b*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v152, "boluda", "b*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v153, "bastardo", "b*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v154, "bastarda", "b*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v155, "amariconados", "a***********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v156, "amariconado", "a**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v157, "amariconadas", "a***********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v158, "amariconada", "a**********");
    std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](&siri::dialogengine::GetProfanityFilter_es_MX(void)::sProfanityData_es_MX, (uint64_t)v5, 0x9AuLL);
    for (i = 0; i != -924; i -= 6)
      std::pair<std::string const,std::string>::~pair((uint64_t)&v158[i]);
    __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], &siri::dialogengine::GetProfanityFilter_es_MX(void)::sProfanityData_es_MX, &dword_1BF794000);
  }
  *v1 = 0;
  v1[1] = 0;
  v1[2] = 0;
  return std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(v1, siri::dialogengine::GetProfanityFilter_es_MX(void)::sProfanityData_es_MX, *(uint64_t *)algn_1EF583230, 0xAAAAAAAAAAAAAAABLL* ((*(_QWORD *)algn_1EF583230 - siri::dialogengine::GetProfanityFilter_es_MX(void)::sProfanityData_es_MX) >> 4));
}

void sub_1BFBC6100(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + 7344;
  v4 = -7392;
  do
  {
    v3 = std::pair<std::string const,std::string>::~pair(v3) - 48;
    v4 += 48;
  }
  while (v4);
  _Unwind_Resume(a1);
}

_QWORD *siri::dialogengine::GetProfanityFilter_es_ES(siri::dialogengine *this)
{
  _QWORD *v1;
  unsigned __int8 v2;
  uint64_t i;
  _QWORD v5[6];
  _QWORD v6[6];
  _QWORD v7[6];
  _QWORD v8[6];
  _QWORD v9[6];
  _QWORD v10[6];
  _QWORD v11[6];
  _QWORD v12[6];
  _QWORD v13[6];
  _QWORD v14[6];
  _QWORD v15[6];
  _QWORD v16[6];
  _QWORD v17[6];
  _QWORD v18[6];
  _QWORD v19[6];
  _QWORD v20[6];
  _QWORD v21[6];
  _QWORD v22[6];
  _QWORD v23[6];
  _QWORD v24[6];
  _QWORD v25[6];
  _QWORD v26[6];
  _QWORD v27[6];
  _QWORD v28[6];
  _QWORD v29[6];
  _QWORD v30[6];
  _QWORD v31[6];
  _QWORD v32[6];
  _QWORD v33[6];
  _QWORD v34[6];
  _QWORD v35[6];
  _QWORD v36[6];
  _QWORD v37[6];
  _QWORD v38[6];
  _QWORD v39[6];
  _QWORD v40[6];
  _QWORD v41[6];
  _QWORD v42[6];
  _QWORD v43[6];
  _QWORD v44[6];
  _QWORD v45[6];
  _QWORD v46[6];
  _QWORD v47[6];
  _QWORD v48[6];
  _QWORD v49[6];
  _QWORD v50[6];
  _QWORD v51[6];
  _QWORD v52[6];
  _QWORD v53[6];
  _QWORD v54[6];
  _QWORD v55[6];
  _QWORD v56[6];
  _QWORD v57[6];
  _QWORD v58[6];
  _QWORD v59[6];
  _QWORD v60[6];
  _QWORD v61[6];
  _QWORD v62[6];
  _QWORD v63[6];
  _QWORD v64[6];
  _QWORD v65[6];
  _QWORD v66[6];
  _QWORD v67[6];
  _QWORD v68[6];
  _QWORD v69[6];
  _QWORD v70[6];
  _QWORD v71[6];
  _QWORD v72[6];
  _QWORD v73[6];
  _QWORD v74[6];
  _QWORD v75[6];
  _QWORD v76[6];
  _QWORD v77[6];
  _QWORD v78[6];
  _QWORD v79[6];
  _QWORD v80[6];
  _QWORD v81[6];
  _QWORD v82[6];
  _QWORD v83[6];
  _QWORD v84[6];
  _QWORD v85[6];
  _QWORD v86[6];
  _QWORD v87[6];
  _QWORD v88[6];
  _QWORD v89[6];
  _QWORD v90[6];
  _QWORD v91[6];
  _QWORD v92[6];
  _QWORD v93[6];
  _QWORD v94[6];
  _QWORD v95[6];
  _QWORD v96[6];
  _QWORD v97[6];
  _QWORD v98[6];
  _QWORD v99[6];
  _QWORD v100[6];
  _QWORD v101[6];
  _QWORD v102[6];
  _QWORD v103[6];
  _QWORD v104[6];
  _QWORD v105[6];
  _QWORD v106[6];
  _QWORD v107[6];
  _QWORD v108[6];
  _QWORD v109[6];
  _QWORD v110[6];
  _QWORD v111[6];
  _QWORD v112[6];
  _QWORD v113[6];
  _QWORD v114[6];
  _QWORD v115[6];
  _QWORD v116[6];
  _QWORD v117[6];
  _QWORD v118[6];
  _QWORD v119[6];
  _QWORD v120[6];
  _QWORD v121[6];
  _QWORD v122[6];
  _QWORD v123[6];
  _QWORD v124[6];
  _QWORD v125[6];
  _QWORD v126[6];
  _QWORD v127[6];
  _QWORD v128[6];
  _QWORD v129[6];
  _QWORD v130[6];
  _QWORD v131[6];
  _QWORD v132[6];
  _QWORD v133[6];
  _QWORD v134[6];
  _QWORD v135[6];
  _QWORD v136[6];
  _QWORD v137[6];
  _QWORD v138[6];
  _QWORD v139[6];
  _QWORD v140[6];
  _QWORD v141[6];
  _QWORD v142[6];
  _QWORD v143[6];
  _QWORD v144[6];
  _QWORD v145[6];
  _QWORD v146[6];
  _QWORD v147[6];
  _QWORD v148[6];
  _QWORD v149[6];
  _QWORD v150[6];
  _QWORD v151[6];
  _QWORD v152[6];
  _QWORD v153[6];
  _QWORD v154[6];
  _QWORD v155[6];
  _QWORD v156[6];
  _QWORD v157[6];
  _QWORD v158[6];
  _QWORD v159[6];
  _QWORD v160[6];
  _QWORD v161[6];
  _QWORD v162[6];
  _QWORD v163[6];
  _QWORD v164[6];
  _QWORD v165[6];
  _QWORD v166[6];
  _QWORD v167[6];
  _QWORD v168[6];
  _QWORD v169[6];
  _QWORD v170[6];
  _QWORD v171[6];
  _QWORD v172[6];
  _QWORD v173[6];
  _QWORD v174[6];
  _QWORD v175[6];
  _QWORD v176[6];
  _QWORD v177[6];
  _QWORD v178[6];
  _QWORD v179[6];
  _QWORD v180[6];
  _QWORD v181[6];
  _QWORD v182[6];
  _QWORD v183[6];
  _QWORD v184[6];
  _QWORD v185[6];
  _QWORD v186[6];
  _QWORD v187[6];
  _QWORD v188[6];
  _QWORD v189[6];
  _QWORD v190[6];
  _QWORD v191[6];
  _QWORD v192[6];
  _QWORD v193[6];
  _QWORD v194[6];
  _QWORD v195[6];
  _QWORD v196[6];
  _QWORD v197[6];
  _QWORD v198[6];
  _QWORD v199[6];
  _QWORD v200[6];
  _QWORD v201[6];
  _QWORD v202[6];
  _QWORD v203[6];
  _QWORD v204[6];
  _QWORD v205[6];
  _QWORD v206[6];
  _QWORD v207[6];
  _QWORD v208[6];
  _QWORD v209[6];
  _QWORD v210[6];
  _QWORD v211[6];
  _QWORD v212[6];
  _QWORD v213[6];
  _QWORD v214[6];
  _QWORD v215[6];
  _QWORD v216[6];
  _QWORD v217[6];
  _QWORD v218[6];
  _QWORD v219[6];
  _QWORD v220[6];
  _QWORD v221[6];
  _QWORD v222[6];
  _QWORD v223[6];
  _QWORD v224[6];
  _QWORD v225[6];
  _QWORD v226[6];
  _QWORD v227[6];
  _QWORD v228[6];
  _QWORD v229[6];
  _QWORD v230[6];
  _QWORD v231[6];
  _QWORD v232[6];
  _QWORD v233[6];
  _QWORD v234[6];
  _QWORD v235[6];
  _QWORD v236[6];
  _QWORD v237[6];
  _QWORD v238[6];
  _QWORD v239[6];
  _QWORD v240[6];
  _QWORD v241[6];
  _QWORD v242[6];
  _QWORD v243[6];
  _QWORD v244[6];
  _QWORD v245[6];
  _QWORD v246[6];
  _QWORD v247[6];
  _QWORD v248[6];
  _QWORD v249[6];
  _QWORD v250[6];
  _QWORD v251[6];
  _QWORD v252[6];
  _QWORD v253[6];
  _QWORD v254[6];
  _QWORD v255[6];
  _QWORD v256[6];
  _QWORD v257[6];
  _QWORD v258[6];
  _QWORD v259[6];
  _QWORD v260[6];
  _QWORD v261[6];
  _QWORD v262[6];
  _QWORD v263[6];
  _QWORD v264[6];
  _QWORD v265[6];
  _QWORD v266[6];
  _QWORD v267[6];
  _QWORD v268[6];
  _QWORD v269[6];
  _QWORD v270[6];
  _QWORD v271[6];
  _QWORD v272[6];
  _QWORD v273[6];
  _QWORD v274[6];
  _QWORD v275[6];
  _QWORD v276[6];
  _QWORD v277[6];
  _QWORD v278[6];
  _QWORD v279[6];
  _QWORD v280[6];
  _QWORD v281[6];
  _QWORD v282[6];
  _QWORD v283[6];
  _QWORD v284[6];
  _QWORD v285[6];
  _QWORD v286[6];
  _QWORD v287[6];
  _QWORD v288[6];
  _QWORD v289[6];
  _QWORD v290[6];
  _QWORD v291[6];
  _QWORD v292[6];
  _QWORD v293[6];
  _QWORD v294[6];
  _QWORD v295[6];
  _QWORD v296[6];
  _QWORD v297[6];
  _QWORD v298[6];
  _QWORD v299[6];
  _QWORD v300[6];
  _QWORD v301[6];
  _QWORD v302[6];
  _QWORD v303[6];
  _QWORD v304[6];
  _QWORD v305[6];
  _QWORD v306[6];
  _QWORD v307[6];
  _QWORD v308[6];
  _QWORD v309[6];
  _QWORD v310[6];
  _QWORD v311[6];
  _QWORD v312[6];
  _QWORD v313[6];
  _QWORD v314[6];
  _QWORD v315[6];
  _QWORD v316[6];
  _QWORD v317[6];
  _QWORD v318[6];
  _QWORD v319[6];
  _QWORD v320[6];
  _QWORD v321[6];
  _QWORD v322[6];
  _QWORD v323[6];
  _QWORD v324[6];
  _QWORD v325[6];
  _QWORD v326[6];
  _QWORD v327[6];
  _QWORD v328[6];
  _QWORD v329[6];
  _QWORD v330[6];
  _QWORD v331[6];
  _QWORD v332[6];
  _QWORD v333[6];
  _QWORD v334[7];

  v1 = (_QWORD *)MEMORY[0x1E0C80A78](this);
  v334[6] = *MEMORY[0x1E0C80C00];
  if ((v2 & 1) == 0
  {
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v5, "zorrones", "z*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v6, "zorronas", "z*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v7, "zorrona", "z******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v8, "zorras", "z*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v9, "zorra", "z****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v10, "zorrón", "z*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v11, "vergas", "v*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v12, "verga", "v****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v13, "tragasables", "t**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v14, "tortilleras", "t**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v15, "tortillera", "t*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v16, "tonto", "t****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v17, "tetas", "t****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v18, "teta", "t***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v19, "sudacas", "s******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v20, "sudaca", "s*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v21, "subnormal", "s********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v22, "soplapollas", "s**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v23, "soplanucas", "s*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v24, "sodomitas", "s********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v25, "sodomita", "s*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v26, "rameras", "r******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v27, "ramera", "r*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v28, "putos", "p****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v29, "putonas", "p******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v30, "putona", "p*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v31, "puto", "p***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v32, "putas", "p****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v33, "puta", "p***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v34, "putón", "p****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v35, "porongas", "p*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v36, "poronga", "p******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v37, "pollas", "p*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v38, "polla", "p****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v39, "pinche", "p*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v40, "pijotero", "p*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v41, "pijo", "p***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v42, "pendejos", "p*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v43, "pendejo", "p******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v44, "pendejas", "p*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v45, "pendeja", "p******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v46, "pendón", "p*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v47, "pelotudos", "p********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v48, "pelotudo", "p*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v49, "parrusa", "p******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v50, "parrús", "p*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v51, "pajilleros", "p*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v52, "pajillero", "p********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v53, "pajilleras", "p*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v54, "pajillera", "p********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v55, "pajearse", "p*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v56, "pajearnos", "p********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v57, "pajear", "p*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v58, "pajéame", "p******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v59, "ojetes", "o*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v60, "ojete", "o****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v61, "negratas", "n*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v62, "negrata", "n******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v63, "negracos", "n******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v64, "negraco", "n*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v65, "mierdoso", "m*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v66, "mierdosa", "m*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v67, "mierdas", "m******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v68, "mierda", "m*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v69, "marimacho", "m********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v70, "marimacha", "m********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v71, "maricones", "m********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v72, "mariconazos", "m**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v73, "mariconazo", "m*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v74, "mariconazas", "m**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v75, "mariconaza", "m*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v76, "mariconas", "m********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v77, "maricona", "m*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v78, "maricas", "m******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v79, "marica", "m*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v80, "maricón", "m******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v81, "maracos", "m******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v82, "maraco", "m*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v83, "manflora", "m*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v84, "manflor", "m******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v85, "mamavergas", "m*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v86, "mamapollas", "m*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v87, "mamapingas", "m*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v88, "mamapinga", "m********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v89, "mamabichos", "m*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v90, "mamabicho", "m********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v91, "malparidas", "m*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v92, "malparida", "m********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v93, "lefarte", "l******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v94, "lefarse", "l******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v95, "lefaros", "l******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v96, "lefarnos", "l*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v97, "lefarme", "l******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v98, "lefarles", "l*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v99, "lefarle", "l******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v100, "lefarla", "l******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v101, "lefar", "l****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v102, "lefada", "l*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v103, "lefa", "l***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v104, "lamepollas", "l*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v105, "lameculos", "l********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v106, "lameculo", "l*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v107, "jotos", "j****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v108, "joto", "j***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v109, "jodisteis", "j********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v110, "jodiste", "j******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v111, "jodimos", "j******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v112, "jodieses", "j*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v113, "jodiesen", "j*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v114, "jodiese", "j******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v115, "jodieron", "j*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v116, "jodieras", "j*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v117, "jodierais", "j********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v118, "jodiera", "j******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v119, "jodiendo", "j*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v120, "jodienda", "j*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v121, "jodidos", "j******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v122, "jodido", "j*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v123, "jodidas", "j******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v124, "jodida", "j*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v125, "jodió", "j****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v126, "jodiésemos", "j*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v127, "jodiéramos", "j*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v128, "jodes", "j****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v129, "joderme", "j******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v130, "joderemos", "j********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v131, "joderías", "j*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v132, "joderían", "j*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v133, "joderíamos", "j*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v134, "joderíais", "j********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v135, "jodería", "j******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v136, "joderéis", "j*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v137, "joderé", "j*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v138, "joderás", "j******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v139, "joderán", "j******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v140, "joderá", "j*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v141, "joder", "j****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v142, "jodeos", "j*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v143, "joden", "j****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v144, "jodemos", "j******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v145, "jode", "j***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v146, "jodas", "j****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v147, "jodan", "j****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v148, "jodamos", "j******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v149, "joda", "j***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v150, "jodías", "j*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v151, "jodían", "j*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v152, "jodíamos", "j*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v153, "jodíais", "j******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v154, "jodía", "j****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v155, "jodí", "j***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v156, "jodéis", "j*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v157, "jodáis", "j*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v158, "jódete", "j*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v159, "imbéciles", "i********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v160, "imbécil", "i******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v161, "idiotas", "i******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v162, "idiota", "i*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v163, "huevones", "h*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v164, "huevón", "h*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v165, "hijoputas", "h********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v166, "hijoputa", "h*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v167, "hijaputas", "h********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v168, "hijaputa", "h*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v169, "guachupinos", "g**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v170, "guachupino", "g*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v171, "guachupinas", "g**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v172, "guachupina", "g*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v173, "golfo", "g****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v174, "golfa", "g****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v175, "gilipolleces", "g***********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v176, "gilipollas", "g*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v177, "garchas", "g******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v178, "garcha", "g*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v179, "furcias", "f******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v180, "furcia", "f*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v181, "folleteo", "f*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v182, "folles", "f*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v183, "follen", "f*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v184, "follemos", "f*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v185, "folle", "f****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v186, "follasteis", "f*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v187, "follaste", "f*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v188, "follases", "f*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v189, "follasen", "f*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v190, "follase", "f******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v191, "follas", "f*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v192, "follarte", "f*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v193, "follarse", "f*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v194, "follaros", "f*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v195, "follaron", "f*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v196, "follarnos", "f********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v197, "follarme", "f*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v198, "follarles", "f********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v199, "follarle", "f*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v200, "follarla", "f*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v201, "follaremos", "f*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v202, "follaras", "f*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v203, "follaran", "f*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v204, "follarais", "f********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v205, "follara", "f******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v206, "follarías", "f********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v207, "follarían", "f********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v208, "follaríamos", "f**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v209, "follaríais", "f*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v210, "follaría", "f*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v211, "follaréis", "f********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v212, "follaré", "f******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v213, "follarás", "f*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v214, "follarán", "f*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v215, "follará", "f******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v216, "follar", "f*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v217, "follando", "f*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v218, "follan", "f*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v219, "follamos", "f*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v220, "follados", "f*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v221, "follador", "f*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v222, "follado", "f******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v223, "folladas", "f*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v224, "follada", "f******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v225, "follad", "f*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v226, "follabas", "f*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v227, "follaban", "f*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v228, "follabais", "f********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v229, "follaba", "f******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v230, "folléis", "f******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v231, "follé", "f****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v232, "follásemos", "f*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v233, "folláramos", "f*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v234, "folláis", "f******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v235, "follábamos", "f*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v236, "estúpidos", "e********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v237, "estúpido", "e*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v238, "estúpidas", "e********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(v239, "estúpida", "e******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v240, "enculas", "e******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v241, "encularte", "e********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v242, "encularse", "e********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v243, "encularos", "e********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v244, "encularon", "e********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v245, "encularnos", "e*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v246, "encularme", "e********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v247, "encularles", "e*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v248, "encularle", "e********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v249, "encularla", "e********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v250, "encularemos", "e**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v251, "encularas", "e********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v252, "encularan", "e********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v253, "encularais", "e*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v254, "encularías", "e*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v255, "encularían", "e*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[13],0>(v256, "encularíamos", "e***********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v257, "encularíais", "e**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v258, "encularía", "e********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v259, "encularéis", "e*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v260, "encularé", "e*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v261, "encularás", "e********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v262, "encularán", "e********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v263, "enculará", "e*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v264, "encular", "e******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v265, "enculando", "e********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v266, "enculan", "e******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v267, "enculamos", "e********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v268, "enculados", "e********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v269, "enculadora", "e*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v270, "enculador", "e********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v271, "enculado", "e*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v272, "enculadas", "e********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v273, "enculada", "e*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v274, "enculad", "e******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v275, "enculabas", "e********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v276, "enculaban", "e********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v277, "enculabais", "e*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v278, "enculaba", "e*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v279, "enculáramos", "e**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v280, "enculáis", "e*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v281, "enculábamos", "e**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v282, "desgraciado", "d**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v283, "desgraciada", "d**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v284, "cometrancas", "c**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v285, "comerrabos", "c********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v286, "comepollas", "c*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v287, "cojones", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v288, "cojón", "c****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v289, "coños", "c****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v290, "coño", "c***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v291, "coñitos", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v292, "coñito", "c*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v293, "cipote", "c*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v294, "chupapollas", "c**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v295, "chupapenes", "c*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v296, "chupaculos", "c*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v297, "chuminos", "c*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v298, "chumino", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v299, "chuminacos", "c*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v300, "chuminaco", "c********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v301, "chocho", "c*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v302, "chingada", "c*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v303, "chinacos", "c*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v304, "chinaco", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v305, "chinacas", "c*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v306, "chinaca", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v307, "cascársela", "c*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v308, "carapolla", "c********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v309, "caramierda", "c*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v310, "caraculo", "c*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v311, "capullo", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[14],0>(v312, "calientarrabos", "c************");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v313, "calientapollas", "c*************");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v314, "cabrones", "c*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v315, "cabronazos", "c*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v316, "cabronazo", "c********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v317, "cabronazas", "c*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v318, "cabronaza", "c********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v319, "cabronas", "c*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v320, "cabrona", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v321, "cabrón", "c*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v322, "cáscamela", "c********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v323, "bujarra", "b******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v324, "bujarrón", "b*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v325, "boludo", "b*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v326, "boluda", "b*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v327, "bocachancla", "b**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v328, "bobo", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v329, "bastardo", "b*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v330, "bastarda", "b*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v331, "amariconados", "a***********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v332, "amariconado", "a**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v333, "amariconadas", "a***********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v334, "amariconada", "a**********");
    std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](&siri::dialogengine::GetProfanityFilter_es_ES(void)::sProfanityData_es_ES, (uint64_t)v5, 0x14AuLL);
    for (i = 0; i != -1980; i -= 6)
      std::pair<std::string const,std::string>::~pair((uint64_t)&v334[i]);
    __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], &siri::dialogengine::GetProfanityFilter_es_ES(void)::sProfanityData_es_ES, &dword_1BF794000);
  }
  *v1 = 0;
  v1[1] = 0;
  v1[2] = 0;
  return std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(v1, siri::dialogengine::GetProfanityFilter_es_ES(void)::sProfanityData_es_ES, *(uint64_t *)algn_1EF583250, 0xAAAAAAAAAAAAAAABLL* ((*(_QWORD *)algn_1EF583250 - siri::dialogengine::GetProfanityFilter_es_ES(void)::sProfanityData_es_ES) >> 4));
}

void sub_1BFBC8D08(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + 15792;
  v4 = -15840;
  do
  {
    v3 = std::pair<std::string const,std::string>::~pair(v3) - 48;
    v4 += 48;
  }
  while (v4);
  _Unwind_Resume(a1);
}

_QWORD *siri::dialogengine::GetProfanityFilter_es_CL(siri::dialogengine *this)
{
  _QWORD *v1;
  unsigned __int8 v2;
  uint64_t i;
  _QWORD v5[6];
  _QWORD v6[6];
  _QWORD v7[6];
  _QWORD v8[6];
  _QWORD v9[6];
  _QWORD v10[6];
  _QWORD v11[6];
  _QWORD v12[6];
  _QWORD v13[6];
  _QWORD v14[6];
  _QWORD v15[6];
  _QWORD v16[6];
  _QWORD v17[6];
  _QWORD v18[6];
  _QWORD v19[6];
  _QWORD v20[6];
  _QWORD v21[6];
  _QWORD v22[6];
  _QWORD v23[6];
  _QWORD v24[6];
  _QWORD v25[6];
  _QWORD v26[6];
  _QWORD v27[6];
  _QWORD v28[6];
  _QWORD v29[6];
  _QWORD v30[6];
  _QWORD v31[6];
  _QWORD v32[6];
  _QWORD v33[6];
  _QWORD v34[6];
  _QWORD v35[6];
  _QWORD v36[6];
  _QWORD v37[6];
  _QWORD v38[6];
  _QWORD v39[6];
  _QWORD v40[6];
  _QWORD v41[6];
  _QWORD v42[6];
  _QWORD v43[6];
  _QWORD v44[6];
  _QWORD v45[6];
  _QWORD v46[6];
  _QWORD v47[6];
  _QWORD v48[6];
  _QWORD v49[6];
  _QWORD v50[6];
  _QWORD v51[6];
  _QWORD v52[6];
  _QWORD v53[6];
  _QWORD v54[6];
  _QWORD v55[6];
  _QWORD v56[6];
  _QWORD v57[6];
  _QWORD v58[6];
  _QWORD v59[6];
  _QWORD v60[6];
  _QWORD v61[6];
  _QWORD v62[6];
  _QWORD v63[6];
  _QWORD v64[6];
  _QWORD v65[6];
  _QWORD v66[6];
  _QWORD v67[6];
  _QWORD v68[6];
  _QWORD v69[6];
  _QWORD v70[6];
  _QWORD v71[6];
  _QWORD v72[6];
  _QWORD v73[6];
  _QWORD v74[6];
  _QWORD v75[6];
  _QWORD v76[6];
  _QWORD v77[6];
  _QWORD v78[6];
  _QWORD v79[6];
  _QWORD v80[6];
  _QWORD v81[6];
  _QWORD v82[6];
  _QWORD v83[6];
  _QWORD v84[6];
  _QWORD v85[6];
  _QWORD v86[6];
  _QWORD v87[6];
  _QWORD v88[6];
  _QWORD v89[6];
  _QWORD v90[6];
  _QWORD v91[6];
  _QWORD v92[6];
  _QWORD v93[6];
  _QWORD v94[6];
  _QWORD v95[6];
  _QWORD v96[6];
  _QWORD v97[6];
  _QWORD v98[6];
  _QWORD v99[6];
  _QWORD v100[6];
  _QWORD v101[6];
  _QWORD v102[6];
  _QWORD v103[6];
  _QWORD v104[6];
  _QWORD v105[6];
  _QWORD v106[6];
  _QWORD v107[6];
  _QWORD v108[6];
  _QWORD v109[6];
  _QWORD v110[6];
  _QWORD v111[6];
  _QWORD v112[6];
  _QWORD v113[6];
  _QWORD v114[6];
  _QWORD v115[6];
  _QWORD v116[6];
  _QWORD v117[6];
  _QWORD v118[6];
  _QWORD v119[6];
  _QWORD v120[6];
  _QWORD v121[6];
  _QWORD v122[6];
  _QWORD v123[6];
  _QWORD v124[6];
  _QWORD v125[6];
  _QWORD v126[6];
  _QWORD v127[6];
  _QWORD v128[6];
  _QWORD v129[6];
  _QWORD v130[6];
  _QWORD v131[6];
  _QWORD v132[6];
  _QWORD v133[6];
  _QWORD v134[6];
  _QWORD v135[6];
  _QWORD v136[6];
  _QWORD v137[6];
  _QWORD v138[6];
  _QWORD v139[6];
  _QWORD v140[6];
  _QWORD v141[6];
  _QWORD v142[6];
  _QWORD v143[6];
  _QWORD v144[6];
  _QWORD v145[6];
  _QWORD v146[6];
  _QWORD v147[6];
  _QWORD v148[6];
  _QWORD v149[6];
  _QWORD v150[6];
  _QWORD v151[6];
  _QWORD v152[6];
  _QWORD v153[6];
  _QWORD v154[6];
  _QWORD v155[6];
  _QWORD v156[6];
  _QWORD v157[6];
  _QWORD v158[6];
  _QWORD v159[6];
  _QWORD v160[6];
  _QWORD v161[6];
  _QWORD v162[6];
  _QWORD v163[6];
  _QWORD v164[6];
  _QWORD v165[6];
  _QWORD v166[6];
  _QWORD v167[6];
  _QWORD v168[6];
  _QWORD v169[6];
  _QWORD v170[6];
  _QWORD v171[6];
  _QWORD v172[6];
  _QWORD v173[6];
  _QWORD v174[6];
  _QWORD v175[6];
  _QWORD v176[6];
  _QWORD v177[6];
  _QWORD v178[6];
  _QWORD v179[6];
  _QWORD v180[6];
  _QWORD v181[6];
  _QWORD v182[6];
  _QWORD v183[6];
  _QWORD v184[6];
  _QWORD v185[6];
  _QWORD v186[6];
  _QWORD v187[6];
  _QWORD v188[6];
  _QWORD v189[6];
  _QWORD v190[6];
  _QWORD v191[6];
  _QWORD v192[6];
  _QWORD v193[6];
  _QWORD v194[6];
  _QWORD v195[6];
  _QWORD v196[6];
  _QWORD v197[6];
  _QWORD v198[6];
  _QWORD v199[6];
  _QWORD v200[6];
  _QWORD v201[6];
  _QWORD v202[6];
  _QWORD v203[6];
  _QWORD v204[6];
  _QWORD v205[6];
  _QWORD v206[6];
  _QWORD v207[6];
  _QWORD v208[6];
  _QWORD v209[6];
  _QWORD v210[6];
  _QWORD v211[6];
  _QWORD v212[6];
  _QWORD v213[6];
  _QWORD v214[6];
  _QWORD v215[6];
  _QWORD v216[6];
  _QWORD v217[6];
  _QWORD v218[6];
  _QWORD v219[6];
  _QWORD v220[6];
  _QWORD v221[6];
  _QWORD v222[6];
  _QWORD v223[6];
  _QWORD v224[6];
  _QWORD v225[6];
  _QWORD v226[6];
  _QWORD v227[6];
  _QWORD v228[6];
  _QWORD v229[6];
  _QWORD v230[6];
  _QWORD v231[6];
  _QWORD v232[6];
  _QWORD v233[6];
  _QWORD v234[6];
  _QWORD v235[6];
  _QWORD v236[6];
  _QWORD v237[6];
  _QWORD v238[6];
  _QWORD v239[6];
  _QWORD v240[6];
  _QWORD v241[6];
  _QWORD v242[6];
  _QWORD v243[6];
  _QWORD v244[6];
  _QWORD v245[6];
  _QWORD v246[6];
  _QWORD v247[6];
  _QWORD v248[6];
  _QWORD v249[6];
  _QWORD v250[6];
  _QWORD v251[6];
  _QWORD v252[6];
  _QWORD v253[6];
  _QWORD v254[6];
  _QWORD v255[6];
  _QWORD v256[6];
  _QWORD v257[6];
  _QWORD v258[6];
  _QWORD v259[6];
  _QWORD v260[6];
  _QWORD v261[6];
  _QWORD v262[6];
  _QWORD v263[6];
  _QWORD v264[6];
  _QWORD v265[6];
  _QWORD v266[6];
  _QWORD v267[6];
  _QWORD v268[6];
  _QWORD v269[6];
  _QWORD v270[6];
  _QWORD v271[6];
  _QWORD v272[6];
  _QWORD v273[6];
  _QWORD v274[6];
  _QWORD v275[6];
  _QWORD v276[6];
  _QWORD v277[6];
  _QWORD v278[6];
  _QWORD v279[6];
  _QWORD v280[6];
  _QWORD v281[6];
  _QWORD v282[6];
  _QWORD v283[6];
  _QWORD v284[6];
  _QWORD v285[6];
  _QWORD v286[6];
  _QWORD v287[6];
  _QWORD v288[6];
  _QWORD v289[6];
  _QWORD v290[6];
  _QWORD v291[6];
  _QWORD v292[6];
  _QWORD v293[6];
  _QWORD v294[6];
  _QWORD v295[6];
  _QWORD v296[6];
  _QWORD v297[6];
  _QWORD v298[6];
  _QWORD v299[6];
  _QWORD v300[6];
  _QWORD v301[7];

  v1 = (_QWORD *)MEMORY[0x1E0C80A78](this);
  v301[6] = *MEMORY[0x1E0C80C00];
  if ((v2 & 1) == 0
  {
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v5, "zorrones", "z*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v6, "zorronas", "z*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v7, "zorrona", "z******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v8, "zorras", "z*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v9, "zorra", "z****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v10, "vergas", "v*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v11, "verga", "v****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v12, "valescallampa", "v************");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[13],0>(v13, "valícallampa", "v***********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(v14, "unamierda", "u******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v15, "unahuea", "u******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v16, "tula", "t***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v17, "tragasables", "t**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v18, "tortilleras", "t**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v19, "tortillera", "t*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v20, "tontos", "t*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v21, "tonto", "t****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v22, "tontas", "t*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v23, "tonta", "t****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v24, "tetas", "t****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v25, "teta", "t***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[16],0>(v26, "sonrisavertical", "s**************");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v27, "sapoculiao", "s*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v28, "sapo", "s***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v29, "sapaculiá", "s********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v30, "sapa", "s***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v31, "sacohueas", "s********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v32, "sacohuea", "s*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v33, "reculiao", "r*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v34, "reculiado", "r********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[16],0>(v35, "rechuchetumadre", "r**************");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v36, "rameras", "r******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v37, "ramera", "r*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v38, "rajas", "r****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v39, "raja", "r***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v40, "putos", "p****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v41, "putonas", "p******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v42, "putona", "p*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v43, "puto", "p***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v44, "putito", "p*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v45, "putita", "p*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v46, "putero", "p*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v47, "putazos", "p******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v48, "putazo", "p*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v49, "puta", "p***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v50, "putón", "p****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v51, "porlamierda", "p**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v52, "porlacresta", "p**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v53, "porlachucha", "p**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v54, "pinche", "p*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v55, "picos", "p****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v56, "pico", "p***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v57, "pichulas", "p*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v58, "pichula", "p******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v59, "perroculiao", "p**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v60, "perraculiá", "p*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v61, "perra", "p****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v62, "perkin", "p****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v63, "pendejos", "p*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v64, "pendejo", "p******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v65, "pendejas", "p*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v66, "pendeja", "p******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v67, "penétrame", "p********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v68, "pelotudos", "p********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v69, "pelotudo", "p*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v70, "paralahueá", "p*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v71, "paradehuear", "p*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v72, "palpico", "p******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v73, "palacallampa", "p***********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v74, "pajero", "p*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v75, "pajera", "p*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v76, "pajearse", "p*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v77, "pajearnos", "p********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v78, "pajear", "p*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v79, "pajéame", "p******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v80, "pacos", "p****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v81, "paco", "p***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v82, "paca", "p***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v83, "monoculiao", "m********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v84, "mongólico", "m********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v85, "mongólica", "m********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v86, "monaculiá", "m********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v87, "mierda", "m*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v88, "marimacho", "m********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v89, "marimacha", "m********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[17],0>(v90, "mariconesculeaos", "m***************");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v91, "maricones", "m********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v92, "mariconazos", "m**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v93, "mariconazo", "m*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v94, "mariconazas", "m**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v95, "mariconaza", "m*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v96, "maricona", "m*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v97, "marica", "m*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[14],0>(v98, "maricónculeao", "m************");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v99, "maricón", "m******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v100, "maracoreculiao", "m*************");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v101, "maracoculiao", "m***********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v102, "maraco", "m*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v103, "maracas", "m******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[14],0>(v104, "maracareculiá", "m************");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v105, "maracaculiá", "m**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[20],0>(v106, "maracaconchetumadre", "m******************");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v107, "maraca", "m*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v108, "manguaco", "m*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v109, "mamasán", "m******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v110, "mamar", "m****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v111, "mamaditas", "m********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v112, "mamadita", "m*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v113, "mamadas", "m******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v114, "mamada", "m*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v115, "mamón", "m****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v116, "malparido", "m********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v117, "malparida", "m********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[17],0>(v118, "méteteloenlaraja", "m***************");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(v119, "métemela", "m******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v120, "lamepico", "l*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v121, "lameculos", "l********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v122, "lameculo", "l*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v123, "lámelo", "l*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v124, "lámela", "l*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v125, "joto", "j***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v126, "jodimos", "j******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v127, "jodieron", "j*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v128, "jodido", "j*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v129, "jodidas", "j******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v130, "jodida", "j*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v131, "jodió", "j****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v132, "jodes", "j****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v133, "joder", "j****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v134, "joda", "j***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v135, "jódete", "j*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v136, "imbéciles", "i********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v137, "imbécil", "i******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v138, "idiotas", "i******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v139, "idiota", "i*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v140, "huevona", "h******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v141, "huevear", "h******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v142, "huevada", "h******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[7],0>(v143, "huevóón", "h*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v144, "huevá", "h****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v145, "hueones", "h******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[9],0>(v146, "hueonas", "h*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v147, "hueona", "h*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v148, "hueco", "h****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v149, "hueca", "h****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v150, "huear", "h****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v151, "hueón", "h****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v152, "hueás", "h****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v153, "hueás", "h****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v154, "hueá", "h***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v155, "hueá", "h***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v156, "hociconear", "h*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v157, "hociconeando", "h***********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v158, "hocicona", "h*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v159, "hocico", "h*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v160, "hocicón", "h******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v161, "hijosdeputa", "h**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v162, "hijodeputa", "h*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v163, "hijasdeputa", "h**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v164, "hijadeputa", "h*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[16],0>(v165, "guachosculiaos", "g**************");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v166, "guachoculiao", "g***********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v167, "guacho", "g*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[14],0>(v168, "guachasculiás", "g************");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v169, "guachaculiá", "g**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v170, "guacha", "g*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v171, "giles", "g****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v172, "gila", "g***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v173, "gil", "g**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v174, "follemos", "f*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v175, "follas", "f*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v176, "follarte", "f*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v177, "follara", "f******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v178, "follar", "f*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v179, "follando", "f*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v180, "follamos", "f*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v181, "follaba", "f******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v182, "follón", "f*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v183, "follé", "f****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v184, "flaites", "f******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v185, "flaite", "f*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v186, "feoculiao", "f*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v187, "feaculiá", "f*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v188, "fóllame", "f******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v189, "estúpidos", "e********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v190, "estúpido", "e*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v191, "estúpidas", "e********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(v192, "estúpida", "e******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v193, "encularse", "e********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v194, "enculados", "e********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v195, "enculado", "e*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v196, "desgraciado", "d**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v197, "desgraciada", "d**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v198, "culote", "c*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v199, "culo", "c***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v200, "culito", "c*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v201, "culiemos", "c*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[8],0>(v202, "culiao", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v203, "culiado", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v204, "culiada", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v205, "culión", "c*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v206, "culié", "c****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v207, "culiá", "c****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v208, "culear", "c*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v209, "culéame", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v210, "ctm", "c**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v211, "csm", "c**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v212, "cresta", "c****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v213, "conchetumadre", "c************");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[13],0>(v214, "conchesumadre", "c***********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v215, "conchemimare", "c***********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v216, "concha", "c*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v217, "comolashuevas", "c************");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v218, "comolashueas", "c***********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v219, "comolapichula", "c************");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v220, "comolamierda", "c***********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v221, "comolacallampa", "c*************");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v222, "comoelpico", "c*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v223, "cojones", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v224, "cojón", "c****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v225, "coños", "c****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v226, "coño", "c***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v227, "coñitos", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v228, "coñito", "c*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v229, "chupapicos", "c*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v230, "chupapico", "c********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v231, "chupapenes", "c*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v232, "chupandopico", "c***********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v233, "chupamelsapo", "c***********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v234, "chupamelpico", "c***********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[17],0>(v235, "chupalaquecuelga", "c***************");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v236, "chupaelpico", "c**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v237, "chupaculos", "c*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v238, "chupa", "c****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v239, "chucha", "c*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v240, "chuchá", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v241, "chota", "c****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v242, "choros", "c*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v243, "choro", "c****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v244, "choreo", "c*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v245, "chorearon", "c********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v246, "chorear", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v247, "chingada", "c*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v248, "chetumare", "c*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v249, "chapalapachala", "c*************");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v250, "chúpamela", "c********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v251, "chúpalo", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v252, "chúpala", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v253, "camboyanas", "c*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v254, "camboyana", "c********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v255, "callampa", "c*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v256, "cagué", "c****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v257, "cagaron", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v258, "cagarla", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v259, "cagar", "c****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v260, "cagao", "c****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v261, "cagados", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v262, "cagado", "c*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v263, "cagadas", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v264, "cagada", "c*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v265, "cagón", "c****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v266, "cagás", "c****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v267, "cagás", "c****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v268, "cagá", "c***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v269, "cachondo", "c*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v270, "cachondeo", "c********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v271, "cachonda", "c*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v272, "cachita", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v273, "cacha", "c****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v274, "cabrones", "c*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v275, "cabronazos", "c*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v276, "cabronazo", "c********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v277, "cabronas", "c*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v278, "cabrona", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v279, "cabrear", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v280, "cabrón", "c*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v281, "cabréate", "c*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v282, "buenapalpico", "b***********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v283, "boludo", "b*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v284, "boluda", "b*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v285, "bastardo", "b*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v286, "bastarda", "b*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v287, "amariconados", "a***********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v288, "amariconado", "a**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v289, "amariconadas", "a***********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v290, "amariconada", "a**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v291, "alamierda", "a********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[11],0>(v292, "alachucha", "a*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v293, "ahuevonado", "a*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v294, "ahueonao", "a*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[16],0>(v295, "ándatealamierda", "a**************");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[15],0>(v296, "ándatealacresta", "a*************");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[16],0>(v297, "ándatealachucha", "a**************");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v298, "Agilao", "a*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v299, "Agilados", "a*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v300, "Agilada", "a******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v301, "Agilá", "a****");
    std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](&siri::dialogengine::GetProfanityFilter_es_CL(void)::sProfanityData_es_CL, (uint64_t)v5, 0x129uLL);
    for (i = 0; i != -1782; i -= 6)
      std::pair<std::string const,std::string>::~pair((uint64_t)&v301[i]);
    __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], &siri::dialogengine::GetProfanityFilter_es_CL(void)::sProfanityData_es_CL, &dword_1BF794000);
  }
  *v1 = 0;
  v1[1] = 0;
  v1[2] = 0;
  return std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(v1, siri::dialogengine::GetProfanityFilter_es_CL(void)::sProfanityData_es_CL, *(uint64_t *)algn_1EF583270, 0xAAAAAAAAAAAAAAABLL* ((*(_QWORD *)algn_1EF583270 - siri::dialogengine::GetProfanityFilter_es_CL(void)::sProfanityData_es_CL) >> 4));
}

void sub_1BFBCB4B0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + 14208;
  v4 = -14256;
  do
  {
    v3 = std::pair<std::string const,std::string>::~pair(v3) - 48;
    v4 += 48;
  }
  while (v4);
  _Unwind_Resume(a1);
}

_QWORD *siri::dialogengine::GetProfanityFilter_en_US(siri::dialogengine *this)
{
  unsigned __int8 v2;
  _QWORD v4[7];

  v4[6] = *MEMORY[0x1E0C80C00];
  if ((v2 & 1) == 0
  {
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v4, "ape shit", "a*****t");
    std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](siri::dialogengine::GetProfanityFilter_en_US(void)::sProfanityData_en_US, (uint64_t)v4, 1uLL);
    std::pair<std::string const,std::string>::~pair((uint64_t)v4);
    __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], siri::dialogengine::GetProfanityFilter_en_US(void)::sProfanityData_en_US, &dword_1BF794000);
  }
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  return std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(this, siri::dialogengine::GetProfanityFilter_en_US(void)::sProfanityData_en_US[0], unk_1EF580BB8, 0xAAAAAAAAAAAAAAABLL* ((unk_1EF580BB8 - siri::dialogengine::GetProfanityFilter_en_US(void)::sProfanityData_en_US[0]) >> 4));
}

void sub_1BFBCB614(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::pair<std::string const,std::string>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *siri::dialogengine::GetProfanityFilter_en_NZ(siri::dialogengine *this)
{
  unsigned __int8 v2;
  uint64_t i;
  _QWORD v5[6];
  _QWORD v6[6];
  _QWORD v7[6];
  _QWORD v8[6];
  _QWORD v9[6];
  _QWORD v10[6];
  _QWORD v11[6];
  _QWORD v12[6];
  _QWORD v13[6];
  _QWORD v14[6];
  _QWORD v15[6];
  _QWORD v16[6];
  _QWORD v17[6];
  _QWORD v18[6];
  _QWORD v19[6];
  _QWORD v20[6];
  _QWORD v21[6];
  _QWORD v22[7];

  v22[6] = *MEMORY[0x1E0C80C00];
  if ((v2 & 1) == 0
  {
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v5, "wog", "w*g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v6, "waz", "w*z");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v7, "wab", "w*b");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v8, "squits", "s****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v9, "smeg", "s**g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v10, "poe", "p*e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v11, "jism", "j**m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v12, "jackoff", "j*****f");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v13, "horis", "h***s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v14, "hories", "h***i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v15, "hori", "h**i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v16, "golliwog", "g******g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v17, "gicker", "g****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v18, "fuckwit", "f*****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v19, "bollocks", "b******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v20, "bollix", "b****x");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v21, "abo", "a*o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v22, "abbo", "a**o");
    std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](&siri::dialogengine::GetProfanityFilter_en_NZ(void)::sProfanityData_en_NZ, (uint64_t)v5, 0x12uLL);
    for (i = 102; i != -6; i -= 6)
      std::pair<std::string const,std::string>::~pair((uint64_t)&v5[i]);
    __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], &siri::dialogengine::GetProfanityFilter_en_NZ(void)::sProfanityData_en_NZ, &dword_1BF794000);
  }
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  return std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(this, siri::dialogengine::GetProfanityFilter_en_NZ(void)::sProfanityData_en_NZ, *(uint64_t *)algn_1EF583290, 0xAAAAAAAAAAAAAAABLL* ((*(_QWORD *)algn_1EF583290 - siri::dialogengine::GetProfanityFilter_en_NZ(void)::sProfanityData_en_NZ) >> 4));
}

void sub_1BFBCB960(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t i;

  for (i = 816; i != -48; i -= 48)
    std::pair<std::string const,std::string>::~pair(v1 + i);
  _Unwind_Resume(a1);
}

_QWORD *siri::dialogengine::GetProfanityFilter_en_IN(siri::dialogengine *this)
{
  unsigned __int8 v2;
  _QWORD v4[7];

  v4[6] = *MEMORY[0x1E0C80C00];
  if ((v2 & 1) == 0
  {
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v4, "ape shit", "a*****t");
    std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](&siri::dialogengine::GetProfanityFilter_en_IN(void)::sProfanityData_en_IN, (uint64_t)v4, 1uLL);
    std::pair<std::string const,std::string>::~pair((uint64_t)v4);
    __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], &siri::dialogengine::GetProfanityFilter_en_IN(void)::sProfanityData_en_IN, &dword_1BF794000);
  }
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  return std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(this, siri::dialogengine::GetProfanityFilter_en_IN(void)::sProfanityData_en_IN, *(uint64_t *)algn_1EF5832B0, 0xAAAAAAAAAAAAAAABLL* ((*(_QWORD *)algn_1EF5832B0 - siri::dialogengine::GetProfanityFilter_en_IN(void)::sProfanityData_en_IN) >> 4));
}

void sub_1BFBCBAC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::pair<std::string const,std::string>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *siri::dialogengine::GetProfanityFilter_en_CA(siri::dialogengine *this)
{
  unsigned __int8 v2;
  uint64_t i;
  _QWORD v5[6];
  _QWORD v6[6];
  _QWORD v7[6];
  _QWORD v8[6];
  _QWORD v9[6];
  _QWORD v10[6];
  _QWORD v11[6];
  _QWORD v12[6];
  _QWORD v13[6];
  _QWORD v14[6];
  _QWORD v15[6];
  _QWORD v16[6];
  _QWORD v17[6];
  _QWORD v18[6];
  _QWORD v19[6];
  _QWORD v20[6];
  _QWORD v21[6];
  _QWORD v22[6];
  _QWORD v23[6];
  _QWORD v24[6];
  _QWORD v25[6];
  _QWORD v26[6];
  _QWORD v27[6];
  _QWORD v28[6];
  _QWORD v29[6];
  _QWORD v30[6];
  _QWORD v31[6];
  _QWORD v32[6];
  _QWORD v33[6];
  _QWORD v34[6];
  _QWORD v35[6];
  _QWORD v36[6];
  _QWORD v37[6];
  _QWORD v38[6];
  _QWORD v39[7];

  v39[6] = *MEMORY[0x1E0C80C00];
  if ((v2 & 1) == 0
  {
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v5, "stfo", "s**o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v6, "skankasses", "s********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v7, "skankass's", "s********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v8, "skankass", "s******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v9, "queer", "q***r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v10, "queef", "q***f");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v11, "peckerwood", "p********d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v12, "nutsacks'", "n*******'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v13, "nutsacks", "n******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v14, "nutsack's", "n*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v15, "nutsack", "n*****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v16, "muffdivers'", "m*********'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v17, "muffdivers", "m********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v18, "muffdiver's", "m*********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v19, "muffdiver", "m*******r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v20, "koochie", "k*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v21, "kooch", "k***h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v22, "jackoffs'", "j*******'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v23, "jackoff's", "j*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v24, "hooha", "h***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v25, "hoochies", "h******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v26, "hoochie's", "h*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v27, "hoochie", "h*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v28, "douchebag", "d*******g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v29, "dbags", "d***s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v30, "dbag's", "d****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v31, "dbag", "d**g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v32, "bumholes", "b******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v33, "bumhole's", "b*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v34, "bumhole", "b*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v35, "buggars", "b*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v36, "buggar's", "b******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v37, "bitchfaces'", "b*********'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v38, "bitchfaces", "b********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v39, "bitchface", "b*******e");
    std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](&siri::dialogengine::GetProfanityFilter_en_CA(void)::sProfanityData_en_CA, (uint64_t)v5, 0x23uLL);
    for (i = 204; i != -6; i -= 6)
      std::pair<std::string const,std::string>::~pair((uint64_t)&v5[i]);
    __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], &siri::dialogengine::GetProfanityFilter_en_CA(void)::sProfanityData_en_CA, &dword_1BF794000);
  }
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  return std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(this, siri::dialogengine::GetProfanityFilter_en_CA(void)::sProfanityData_en_CA, *(uint64_t *)algn_1EF5832D0, 0xAAAAAAAAAAAAAAABLL* ((*(_QWORD *)algn_1EF5832D0 - siri::dialogengine::GetProfanityFilter_en_CA(void)::sProfanityData_en_CA) >> 4));
}

void sub_1BFBCC00C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t i;

  for (i = 1632; i != -48; i -= 48)
    std::pair<std::string const,std::string>::~pair(v1 + i);
  _Unwind_Resume(a1);
}

_QWORD *siri::dialogengine::GetProfanityFilter_en_ZA(siri::dialogengine *this)
{
  _QWORD *v1;
  unsigned __int8 v2;
  uint64_t i;
  _QWORD v5[6];
  _QWORD v6[6];
  _QWORD v7[6];
  _QWORD v8[6];
  _QWORD v9[6];
  _QWORD v10[6];
  _QWORD v11[6];
  _QWORD v12[6];
  _QWORD v13[6];
  _QWORD v14[6];
  _QWORD v15[6];
  _QWORD v16[6];
  _QWORD v17[6];
  _QWORD v18[6];
  _QWORD v19[6];
  _QWORD v20[6];
  _QWORD v21[6];
  _QWORD v22[6];
  _QWORD v23[6];
  _QWORD v24[6];
  _QWORD v25[6];
  _QWORD v26[6];
  _QWORD v27[6];
  _QWORD v28[6];
  _QWORD v29[6];
  _QWORD v30[6];
  _QWORD v31[6];
  _QWORD v32[6];
  _QWORD v33[6];
  _QWORD v34[6];
  _QWORD v35[6];
  _QWORD v36[6];
  _QWORD v37[6];
  _QWORD v38[6];
  _QWORD v39[6];
  _QWORD v40[6];
  _QWORD v41[6];
  _QWORD v42[6];
  _QWORD v43[6];
  _QWORD v44[6];
  _QWORD v45[6];
  _QWORD v46[6];
  _QWORD v47[6];
  _QWORD v48[6];
  _QWORD v49[6];
  _QWORD v50[6];
  _QWORD v51[6];
  _QWORD v52[6];
  _QWORD v53[6];
  _QWORD v54[6];
  _QWORD v55[6];
  _QWORD v56[6];
  _QWORD v57[6];
  _QWORD v58[6];
  _QWORD v59[6];
  _QWORD v60[6];
  _QWORD v61[6];
  _QWORD v62[6];
  _QWORD v63[6];
  _QWORD v64[6];
  _QWORD v65[6];
  _QWORD v66[6];
  _QWORD v67[6];
  _QWORD v68[6];
  _QWORD v69[6];
  _QWORD v70[6];
  _QWORD v71[6];
  _QWORD v72[6];
  _QWORD v73[6];
  _QWORD v74[6];
  _QWORD v75[6];
  _QWORD v76[6];
  _QWORD v77[6];
  _QWORD v78[6];
  _QWORD v79[6];
  _QWORD v80[6];
  _QWORD v81[6];
  _QWORD v82[6];
  _QWORD v83[6];
  _QWORD v84[6];
  _QWORD v85[6];
  _QWORD v86[6];
  _QWORD v87[6];
  _QWORD v88[6];
  _QWORD v89[6];
  _QWORD v90[6];
  _QWORD v91[6];
  _QWORD v92[6];
  _QWORD v93[6];
  _QWORD v94[6];
  _QWORD v95[6];
  _QWORD v96[6];
  _QWORD v97[6];
  _QWORD v98[6];
  _QWORD v99[6];
  _QWORD v100[6];
  _QWORD v101[6];
  _QWORD v102[6];
  _QWORD v103[6];
  _QWORD v104[6];
  _QWORD v105[6];
  _QWORD v106[6];
  _QWORD v107[6];
  _QWORD v108[6];
  _QWORD v109[6];
  _QWORD v110[6];
  _QWORD v111[6];
  _QWORD v112[6];
  _QWORD v113[6];
  _QWORD v114[6];
  _QWORD v115[6];
  _QWORD v116[6];
  _QWORD v117[6];
  _QWORD v118[6];
  _QWORD v119[6];
  _QWORD v120[6];
  _QWORD v121[6];
  _QWORD v122[6];
  _QWORD v123[6];
  _QWORD v124[6];
  _QWORD v125[6];
  _QWORD v126[6];
  _QWORD v127[6];
  _QWORD v128[6];
  _QWORD v129[6];
  _QWORD v130[6];
  _QWORD v131[6];
  _QWORD v132[6];
  _QWORD v133[6];
  _QWORD v134[7];

  v1 = (_QWORD *)MEMORY[0x1E0C80A78](this);
  v134[6] = *MEMORY[0x1E0C80C00];
  if ((v2 & 1) == 0
  {
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v5, "wog’s", "w**’s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v6, "wogs’", "w***’");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v7, "wogs", "w*gs");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v8, "wog", "w*g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v9, "waz", "w*z");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v10, "wab", "w*b");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v11, "unfucking", "u*****ing");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v12, "unfuckable", "u********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v13, "skullfucked", "s********ed");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v14, "skullfuck", "s*******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v15, "shyster’s", "s******’s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v16, "shysters’", "s*******’");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v17, "shysters", "s******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v18, "shyster", "s*****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v19, "quim", "q**m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v20, "poes", "p**s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v21, "poe", "p*e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v22, "naai", "n**i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v23, "mong’s", "m***’s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v24, "mongs’", "m****’");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v25, "mongs", "m***s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v26, "mongoloid’s", "m********’s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v27, "mongoloids’", "m*********’");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v28, "mongoloids", "m*******ds");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v29, "mongoloid", "m*******d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v30, "mong", "m**g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v31, "mofo’s", "m***’s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v32, "mofos’", "m****’");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v33, "mofos", "m***s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v34, "moffie’s", "m*****’s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v35, "moffies’", "m******’");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v36, "moffies", "m*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v37, "moffie", "m***ie");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v38, "kraut’s", "k****’s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v39, "krauts’", "k*****’");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v40, "kak", "k*k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v41, "kaffirs'", "k******'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v42, "kaffirs", "k****rs");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v43, "kaffir's", "k*****'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v44, "kaffir", "k****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v45, "kaffers'", "k******'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v46, "kaffers", "k****rs");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v47, "kaffer's", "k*****'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v48, "kaffer", "k****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v49, "jizzes", "j***es");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v50, "jizzed", "j***ed");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v51, "jism", "j**m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v52, "jackoff’s", "j******’s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v53, "jackoffs’", "j*******’");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v54, "jackoffs", "j******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v55, "jackoff", "j*****f");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v56, "honkies’", "h******’");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v57, "gringo’s", "g*****’s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v58, "gringos’", "g******’");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v59, "golliwog’s", "g*******’s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v60, "golliwogs’", "g********’");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v61, "golliwogs", "g*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v62, "golliwog", "g******g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v63, "gicker’s", "g*****’s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v64, "gickers’", "g******’");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v65, "gickers", "g*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v66, "gicker", "g****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v67, "fuckwit’s", "f******’s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v68, "fuckwits’", "f*******’");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v69, "fuckwits", "f******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v70, "fuckwit", "f*****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v71, "fuckwad’s", "f******’s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v72, "fuckwads’", "f*******’");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v73, "fuckwads", "f******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v74, "fucker’s", "f*****’s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v75, "fuckers’", "f******’");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v76, "foks", "f*ks");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v77, "fokken", "f****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v78, "fok", "f*k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v79, "felching", "f****ing");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v80, "felches", "f****es");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v81, "felcher’s", "f******’s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v82, "felchers’", "f*******’");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v83, "felchers", "f*****rs");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v84, "felcher", "f*****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v85, "felched", "f****ed");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v86, "felch", "f***h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v87, "fag’s", "f**’s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v88, "fags’", "f***’");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v89, "facefucks", "f*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v90, "facefucking", "f*******ing");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v91, "facefucked", "f*******ed");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v92, "facefuck", "f******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v93, "cunted", "c****d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v94, "cock’s", "c***’s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v95, "cocks’", "c****’");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v96, "cocks", "c***s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v97, "cock", "c**k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v98, "chinamen’s", "c*******’s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v99, "chinaman’s", "c*******’s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[16],0>(v100, "chickenshit’s", "c**********’s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[16],0>(v101, "chickenshits’", "c***********’");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v102, "boong’s", "b****’s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v103, "boongs’", "b*****’");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v104, "boongs", "b****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v105, "boonga’s", "b*****’s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v106, "boongas’", "b******’");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v107, "boongas", "b*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v108, "boonga", "b****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v109, "boong", "b***g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v110, "bollock’s", "b******’s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v111, "bollocks’", "b*******’");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v112, "bollocks", "b******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v113, "bollock", "b*****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v114, "bollix", "b****x");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v115, "blow job’s", "b******’s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v116, "blow jobs’", "b*******’");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v117, "blow jobs", "b******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v118, "bitch’s", "b****’s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v119, "bitches’", "b******’");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v120, "bitches", "b****es");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v121, "bitch", "b***h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v122, "bellend’s", "b******’s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v123, "bellends’", "b*******’");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v124, "bellends", "b******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v125, "bellend", "b*****d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v126, "arsefucking", "a*******ing");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v127, "argie’s", "a****’s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v128, "argies’", "a*****’");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v129, "argies", "a****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v130, "argie", "a***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v131, "Hottentot’s", "H********’s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v132, "Hottentots’", "H*********’");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v133, "Hottentots", "H*******ts");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v134, "Hottentot", "H*******t");
    std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](&siri::dialogengine::GetProfanityFilter_en_ZA(void)::sProfanityData_en_ZA, (uint64_t)v5, 0x82uLL);
    for (i = 0; i != -780; i -= 6)
      std::pair<std::string const,std::string>::~pair((uint64_t)&v134[i]);
    __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], &siri::dialogengine::GetProfanityFilter_en_ZA(void)::sProfanityData_en_ZA, &dword_1BF794000);
  }
  *v1 = 0;
  v1[1] = 0;
  v1[2] = 0;
  return std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(v1, siri::dialogengine::GetProfanityFilter_en_ZA(void)::sProfanityData_en_ZA, *(uint64_t *)algn_1EF5832F0, 0xAAAAAAAAAAAAAAABLL* ((*(_QWORD *)algn_1EF5832F0 - siri::dialogengine::GetProfanityFilter_en_ZA(void)::sProfanityData_en_ZA) >> 4));
}

void sub_1BFBCD184(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + 6192;
  v4 = -6240;
  do
  {
    v3 = std::pair<std::string const,std::string>::~pair(v3) - 48;
    v4 += 48;
  }
  while (v4);
  _Unwind_Resume(a1);
}

_QWORD *siri::dialogengine::GetProfanityFilter_en_SG(siri::dialogengine *this)
{
  unsigned __int8 v2;
  uint64_t i;
  _QWORD v5[6];
  _QWORD v6[6];
  _QWORD v7[6];
  _QWORD v8[6];
  _QWORD v9[6];
  _QWORD v10[6];
  _QWORD v11[6];
  _QWORD v12[6];
  _QWORD v13[6];
  _QWORD v14[6];
  _QWORD v15[6];
  _QWORD v16[6];
  _QWORD v17[6];
  _QWORD v18[6];
  _QWORD v19[6];
  _QWORD v20[6];
  _QWORD v21[7];

  v21[6] = *MEMORY[0x1E0C80C00];
  if ((v2 & 1) == 0
  {
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v5, "wog", "w*g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v6, "waz", "w*z");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v7, "wab", "w*b");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v8, "squits", "s****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v9, "smeg", "s**g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v10, "shyster", "s*****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v11, "poe", "p*e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v12, "jism", "j**m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v13, "jackoff", "j*****f");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v14, "golliwog", "g******g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v15, "gicker", "g****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v16, "fuckwit", "f*****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v17, "boonga", "b****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v18, "boong", "b***g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v19, "bollocks", "b******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v20, "bollix", "b****x");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v21, "argie", "a***e");
    std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](&siri::dialogengine::GetProfanityFilter_en_SG(void)::sProfanityData_en_SG, (uint64_t)v5, 0x11uLL);
    for (i = 96; i != -6; i -= 6)
      std::pair<std::string const,std::string>::~pair((uint64_t)&v5[i]);
    __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], &siri::dialogengine::GetProfanityFilter_en_SG(void)::sProfanityData_en_SG, &dword_1BF794000);
  }
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  return std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(this, siri::dialogengine::GetProfanityFilter_en_SG(void)::sProfanityData_en_SG, *(uint64_t *)algn_1EF583310, 0xAAAAAAAAAAAAAAABLL* ((*(_QWORD *)algn_1EF583310 - siri::dialogengine::GetProfanityFilter_en_SG(void)::sProfanityData_en_SG) >> 4));
}

void sub_1BFBCD4E8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t i;

  for (i = 768; i != -48; i -= 48)
    std::pair<std::string const,std::string>::~pair(v1 + i);
  _Unwind_Resume(a1);
}

_QWORD *siri::dialogengine::GetProfanityFilter_en_GB(siri::dialogengine *this)
{
  unsigned __int8 v2;
  uint64_t i;
  _QWORD v5[6];
  _QWORD v6[6];
  _QWORD v7[6];
  _QWORD v8[6];
  _QWORD v9[6];
  _QWORD v10[6];
  _QWORD v11[6];
  _QWORD v12[6];
  _QWORD v13[6];
  _QWORD v14[6];
  _QWORD v15[6];
  _QWORD v16[6];
  _QWORD v17[6];
  _QWORD v18[6];
  _QWORD v19[6];
  _QWORD v20[6];
  _QWORD v21[6];
  _QWORD v22[6];
  _QWORD v23[6];
  _QWORD v24[6];
  _QWORD v25[6];
  _QWORD v26[6];
  _QWORD v27[6];
  _QWORD v28[6];
  _QWORD v29[6];
  _QWORD v30[6];
  _QWORD v31[6];
  _QWORD v32[6];
  _QWORD v33[6];
  _QWORD v34[7];

  v34[6] = *MEMORY[0x1E0C80C00];
  if ((v2 & 1) == 0
  {
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v5, "wog", "w*g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v6, "waz", "w*z");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v7, "wab", "w*b");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v8, "squits", "s****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v9, "smeg", "s**g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v10, "slag", "s**g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v11, "shyster", "s*****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v12, "quim", "q**m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v13, "poe", "p*e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v14, "mongoloid", "m*******d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v15, "mong", "m**g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v16, "minge", "m***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v17, "knobheads", "k******ds");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v18, "knobhead", "k******d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v19, "jism", "j**m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v20, "jackoff", "j*****f");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v21, "golliwog", "g******g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v22, "gicker", "g****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v23, "fuckwit", "f*****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v24, "felcher", "f*****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v25, "felch", "f***h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v26, "fanny", "f***y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v27, "cunted", "c****d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v28, "boonga", "b****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v29, "boong", "b***g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v30, "bollocks", "b******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v31, "bollix", "b****x");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v32, "bint", "b**t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v33, "bellend", "b*****d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v34, "argie", "a***e");
    std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](&siri::dialogengine::GetProfanityFilter_en_GB(void)::sProfanityData_en_GB, (uint64_t)v5, 0x1EuLL);
    for (i = 174; i != -6; i -= 6)
      std::pair<std::string const,std::string>::~pair((uint64_t)&v5[i]);
    __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], &siri::dialogengine::GetProfanityFilter_en_GB(void)::sProfanityData_en_GB, &dword_1BF794000);
  }
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  return std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(this, siri::dialogengine::GetProfanityFilter_en_GB(void)::sProfanityData_en_GB, *(uint64_t *)algn_1EF583330, 0xAAAAAAAAAAAAAAABLL* ((*(_QWORD *)algn_1EF583330 - siri::dialogengine::GetProfanityFilter_en_GB(void)::sProfanityData_en_GB) >> 4));
}

void sub_1BFBCD9CC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t i;

  for (i = 1392; i != -48; i -= 48)
    std::pair<std::string const,std::string>::~pair(v1 + i);
  _Unwind_Resume(a1);
}

_QWORD *siri::dialogengine::GetProfanityFilter_en_AU(siri::dialogengine *this)
{
  unsigned __int8 v2;
  uint64_t i;
  _QWORD v5[6];
  _QWORD v6[6];
  _QWORD v7[6];
  _QWORD v8[6];
  _QWORD v9[6];
  _QWORD v10[6];
  _QWORD v11[6];
  _QWORD v12[6];
  _QWORD v13[6];
  _QWORD v14[6];
  _QWORD v15[6];
  _QWORD v16[6];
  _QWORD v17[6];
  _QWORD v18[6];
  _QWORD v19[7];

  v19[6] = *MEMORY[0x1E0C80C00];
  if ((v2 & 1) == 0
  {
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v5, "wog", "w*g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v6, "waz", "w*z");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v7, "wab", "w*b");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v8, "squits", "s****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v9, "smeg", "s**g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v10, "poe", "p*e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v11, "jism", "j**m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v12, "jackoff", "j*****f");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v13, "golliwog", "g******g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v14, "gicker", "g****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v15, "fuckwit", "f*****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v16, "bollocks", "b******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v17, "bollix", "b****x");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v18, "abo", "a*o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v19, "abbo", "a**o");
    std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](&siri::dialogengine::GetProfanityFilter_en_AU(void)::sProfanityData_en_AU, (uint64_t)v5, 0xFuLL);
    for (i = 84; i != -6; i -= 6)
      std::pair<std::string const,std::string>::~pair((uint64_t)&v5[i]);
    __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], &siri::dialogengine::GetProfanityFilter_en_AU(void)::sProfanityData_en_AU, &dword_1BF794000);
  }
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  return std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(this, siri::dialogengine::GetProfanityFilter_en_AU(void)::sProfanityData_en_AU, *(uint64_t *)algn_1EF583350, 0xAAAAAAAAAAAAAAABLL* ((*(_QWORD *)algn_1EF583350 - siri::dialogengine::GetProfanityFilter_en_AU(void)::sProfanityData_en_AU) >> 4));
}

void sub_1BFBCDCF0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t i;

  for (i = 672; i != -48; i -= 48)
    std::pair<std::string const,std::string>::~pair(v1 + i);
  _Unwind_Resume(a1);
}

_QWORD *siri::dialogengine::GetProfanityFilter_en_IE(siri::dialogengine *this)
{
  unsigned __int8 v2;
  uint64_t i;
  _QWORD v5[6];
  _QWORD v6[6];
  _QWORD v7[6];
  _QWORD v8[6];
  _QWORD v9[6];
  _QWORD v10[6];
  _QWORD v11[6];
  _QWORD v12[6];
  _QWORD v13[6];
  _QWORD v14[6];
  _QWORD v15[6];
  _QWORD v16[6];
  _QWORD v17[6];
  _QWORD v18[6];
  _QWORD v19[6];
  _QWORD v20[6];
  _QWORD v21[6];
  _QWORD v22[6];
  _QWORD v23[6];
  _QWORD v24[6];
  _QWORD v25[6];
  _QWORD v26[6];
  _QWORD v27[6];
  _QWORD v28[6];
  _QWORD v29[6];
  _QWORD v30[6];
  _QWORD v31[6];
  _QWORD v32[6];
  _QWORD v33[6];
  _QWORD v34[6];
  _QWORD v35[6];
  _QWORD v36[6];
  _QWORD v37[6];
  _QWORD v38[6];
  _QWORD v39[6];
  _QWORD v40[6];
  _QWORD v41[6];
  _QWORD v42[6];
  _QWORD v43[6];
  _QWORD v44[6];
  _QWORD v45[7];

  v45[6] = *MEMORY[0x1E0C80C00];
  if ((v2 & 1) == 0
  {
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v5, "wog", "w*g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v6, "waz", "w*z");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v7, "wab", "w*b");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v8, "tosspot", "t*****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v9, "tosser", "t****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v10, "squits", "s****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v11, "spastic", "s*****c");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v12, "smeg", "s**g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v13, "shyster", "s*****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v14, "scrote", "s****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v15, "quim", "q**m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v16, "pox", "p*x");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v17, "poe", "p*e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v18, "munter", "m****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v19, "mongoloid", "m*******d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v20, "mong", "m**g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v21, "mong", "m**g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v22, "langered", "l******d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v23, "langer", "l****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v24, "jism", "j**m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v25, "jackoff", "j*****f");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v26, "gowl", "g**l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v27, "gombeen", "g*****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v28, "golliwog", "g******g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v29, "gobshite", "g******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v30, "gicker", "g****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v31, "geebag", "g****g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v32, "fuckwit", "f*****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v33, "fucked", "f****d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v34, "felcher", "f*****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v35, "felch", "f***h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v36, "cuntish", "c*****h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v37, "cunted", "c****d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v38, "boonga", "b****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v39, "boong", "b***g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v40, "bollocks", "b******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v41, "bollocked", "b*******d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v42, "bollixed", "b******d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v43, "bollix", "b****x");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v44, "bellend", "b*****d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v45, "argie", "a***e");
    std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](&siri::dialogengine::GetProfanityFilter_en_IE(void)::sProfanityData_en_IE, (uint64_t)v5, 0x29uLL);
    for (i = 240; i != -6; i -= 6)
      std::pair<std::string const,std::string>::~pair((uint64_t)&v5[i]);
    __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], &siri::dialogengine::GetProfanityFilter_en_IE(void)::sProfanityData_en_IE, &dword_1BF794000);
  }
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  return std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(this, siri::dialogengine::GetProfanityFilter_en_IE(void)::sProfanityData_en_IE, *(uint64_t *)algn_1EF583370, 0xAAAAAAAAAAAAAAABLL* ((*(_QWORD *)algn_1EF583370 - siri::dialogengine::GetProfanityFilter_en_IE(void)::sProfanityData_en_IE) >> 4));
}

void sub_1BFBCE320(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t i;

  for (i = 1920; i != -48; i -= 48)
    std::pair<std::string const,std::string>::~pair(v1 + i);
  _Unwind_Resume(a1);
}

void siri::dialogengine::RemoveProfanity(std::string *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  std::string::size_type size;
  uint64_t v6;
  std::string::size_type v8;
  std::string::size_type v9;
  std::string::size_type v10;
  int v11;
  std::string *v12;
  std::string *p_n;
  uint64_t v14;
  std::string *v15;
  __int128 v16;
  const std::string::value_type *v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20[3];
  uint64_t v21;
  uint64_t v22;
  std::string v23;
  std::string __n;
  std::string *v25;
  std::string *v26;
  std::string *v27;
  std::string __p;
  void *v29[20];

  v29[18] = *(void **)MEMORY[0x1E0C80C00];
  size = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) != 0)
    size = a1->__r_.__value_.__l.__size_;
  if (!size)
    goto LABEL_24;
  v6 = *(unsigned __int8 *)(a2 + 23);
  if ((v6 & 0x80u) != 0)
    v6 = *(_QWORD *)(a2 + 8);
  if (!v6)
  {
LABEL_24:
    siri::dialogengine::SpeakableString::SpeakableString(a3, a2);
    return;
  }
  siri::dialogengine::GetCanonicalLocale(a1, 0, &__p);
  v25 = 0;
  v26 = 0;
  v27 = 0;
  __n.__r_.__value_.__r.__words[0] = (std::string::size_type)&v25;
  __n.__r_.__value_.__s.__data_[8] = 0;
  v25 = (std::string *)operator new(0x18uLL);
  v26 = v25;
  v27 = v25 + 1;
  v26 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v27, (__int128 *)&__p, (__int128 *)v29, v25);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  siri::dialogengine::GetLocaleLanguage(&__n);
  v8 = __n.__r_.__value_.__l.__size_;
  if ((__n.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v9 = HIBYTE(__n.__r_.__value_.__r.__words[2]);
  else
    v9 = __n.__r_.__value_.__l.__size_;
  v10 = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  v11 = (char)v10;
  if ((v10 & 0x80u) != 0)
    v10 = a1->__r_.__value_.__l.__size_;
  if (v9 != v10)
  {
LABEL_25:
    v15 = v26;
    if (v26 < v27)
    {
      if ((*((_BYTE *)&__n.__r_.__value_.__s + 23) & 0x80) == 0)
      {
        v16 = *(_OWORD *)&__n.__r_.__value_.__l.__data_;
        v26->__r_.__value_.__r.__words[2] = __n.__r_.__value_.__r.__words[2];
        *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v16;
LABEL_33:
        v18 = (uint64_t)&v15[1];
        goto LABEL_34;
      }
      v17 = (const std::string::value_type *)__n.__r_.__value_.__r.__words[0];
LABEL_32:
      std::string::__init_copy_ctor_external(v15, v17, v8);
      goto LABEL_33;
    }
LABEL_30:
    v18 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v25, (__int128 *)&__n);
LABEL_34:
    v26 = (std::string *)v18;
    goto LABEL_35;
  }
  if (v11 >= 0)
    v12 = a1;
  else
    v12 = (std::string *)a1->__r_.__value_.__r.__words[0];
  if ((*((_BYTE *)&__n.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    v17 = (const std::string::value_type *)__n.__r_.__value_.__r.__words[0];
    if (memcmp(__n.__r_.__value_.__l.__data_, v12, __n.__r_.__value_.__l.__size_))
    {
      v15 = v26;
      if (v26 < v27)
        goto LABEL_32;
      goto LABEL_30;
    }
  }
  else if (*((_BYTE *)&__n.__r_.__value_.__s + 23))
  {
    p_n = &__n;
    v14 = HIBYTE(__n.__r_.__value_.__r.__words[2]);
    while (p_n->__r_.__value_.__s.__data_[0] == v12->__r_.__value_.__s.__data_[0])
    {
      p_n = (std::string *)((char *)p_n + 1);
      v12 = (std::string *)((char *)v12 + 1);
      if (!--v14)
        goto LABEL_35;
    }
    goto LABEL_25;
  }
LABEL_35:
  siri::dialogengine::SpeakableString::SpeakableString(a3, a2);
  if (v25 != v26)
  {
    if (SHIBYTE(v25->__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&v23, v25->__r_.__value_.__l.__data_, v25->__r_.__value_.__l.__size_);
    }
    else
    {
      v19 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
      v23.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v19;
    }
    siri::dialogengine::GetProfanityFilter((uint64_t)&v23);
    memset(v20, 0, sizeof(v20));
    std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(v20, v21, v22, 0xAAAAAAAAAAAAAAABLL * ((v22 - v21) >> 4));
    siri::dialogengine::SubstituteWords(a3, v20, (uint64_t *)a1, 0, (uint64_t)&__p);
  }
  if (SHIBYTE(__n.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__n.__r_.__value_.__l.__data_);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v25;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
}

void sub_1BFBCE7A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,char *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  if (a33 < 0)
    operator delete(__p);
  a38 = &a34;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a38);
  _Unwind_Resume(a1);
}

void siri::dialogengine::RemoveProfanity(siri::dialogengine::Context *a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  std::string *v6;
  const char *v7;
  std::string *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::string v14;
  std::string v15;
  std::string v16;
  std::string v17;
  std::string v18;
  std::string v19;
  std::string v20;
  std::string v21;
  std::string v22;
  std::string *v23;
  std::__shared_weak_count *v24;

  if (*(_QWORD *)a2
  {
    v8 = v6;
    v9 = *(std::__shared_weak_count **)(a2 + 8);
    v23 = v6;
    v24 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
    }
    if (a1)
    {
      siri::dialogengine::Context::GetLocale(a1, v7, (uint64_t)&v22);
      (*(void (**)(std::string *__return_ptr, std::string *))(v8->__r_.__value_.__r.__words[0] + 48))(&v20, v8);
      if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v15, v20.__r_.__value_.__l.__data_, v20.__r_.__value_.__l.__size_);
      else
        v15 = v20;
      siri::dialogengine::RemoveProfanity(&v22, (uint64_t)&v15, (uint64_t)&v18);
      if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v15.__r_.__value_.__l.__data_);
      if (siri::dialogengine::SpeakableString::SpeakEqualsPrint((siri::dialogengine::SpeakableString *)&v20))
      {
        if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v15, v18.__r_.__value_.__l.__data_, v18.__r_.__value_.__l.__size_);
        else
          v15 = v18;
        if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v17, v19.__r_.__value_.__l.__data_, v19.__r_.__value_.__l.__size_);
        else
          v17 = v19;
        siri::dialogengine::SpeakableString::SetString(v8 + 3, &v15, &v17);
      }
      if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v17, v21.__r_.__value_.__l.__data_, v21.__r_.__value_.__l.__size_);
      else
        v17 = v21;
      siri::dialogengine::RemoveProfanity(&v22, (uint64_t)&v17, (uint64_t)&v15);
      if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v17.__r_.__value_.__l.__data_);
      if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v17, v18.__r_.__value_.__l.__data_, v18.__r_.__value_.__l.__size_);
      else
        v17 = v18;
      if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v14, v16.__r_.__value_.__l.__data_, v16.__r_.__value_.__l.__size_);
      else
        v14 = v16;
      siri::dialogengine::SpeakableString::SetString(v8 + 3, &v17, &v14);
    }
  }
  else
  {
    v9 = 0;
    v23 = 0;
    v24 = 0;
  }
  *a3 = *(_OWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  if (v9)
  {
    v12 = (unint64_t *)&v9->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_1BFBCEAF4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,uint64_t a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61)
{
  if (a14 < 0)
    operator delete(__p);
  if (a61 < 0)
    operator delete(a56);
  if (a54 < 0)
    operator delete(a49);
  if (a48 < 0)
    operator delete(a43);
  if (a42 < 0)
    operator delete(a37);
  if (a36 < 0)
    operator delete(a31);
  if (a30 < 0)
    operator delete(a25);
  if (a24 < 0)
    JUMPOUT(0x1BFBCEB70);
  JUMPOUT(0x1BFBCEB74);
}

void sub_1BFBCEC84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *a62)
{
  uint64_t v62;

  if (a40 < 0)
    operator delete(__p);
  siri::dialogengine::SpeakableString::~SpeakableString(&a13);
  siri::dialogengine::SpeakableString::~SpeakableString(&a41);
  siri::dialogengine::SpeakableString::~SpeakableString(&a62);
  if (*(char *)(v62 - 81) < 0)
    operator delete(*(void **)(v62 - 104));
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](v62 - 80);
  _Unwind_Resume(a1);
}

void siri::dialogengine::ExecuteParamCat(uint64_t a1@<X0>, const std::string *a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  std::vector<std::string>::pointer begin;
  size_t size;
  std::string *v12;
  std::vector<std::string>::pointer v13;
  int v14;
  std::vector<std::string>::pointer data;
  std::string::size_type v16;
  std::string *v17;
  std::string::size_type v18;
  char v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  std::string::size_type v24;
  std::string::size_type v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::string::size_type v29;
  uint64_t Parameter;
  std::string::size_type v31;
  std::string *v32;
  std::string *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  const char *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  std::string::__raw *v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  std::string *v62;
  std::string *v63;
  uint64_t v64;
  BOOL v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  uint64_t v70;
  char v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  std::string *v78;
  __int128 v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  unint64_t *v83;
  unint64_t v84;
  std::string::size_type v85;
  siri::dialogengine *v86;
  uint64_t v87;
  _QWORD *v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  unint64_t *v92;
  unint64_t v93;
  std::string *v94;
  __int128 v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  std::string *v105;
  __int128 v106;
  std::string *p_p;
  const char *v108;
  const char *v109;
  std::string *v110;
  int v111;
  int v112;
  BOOL v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  _QWORD *v117;
  __int128 v118;
  unsigned int *v119;
  const char *v120;
  uint64_t v121;
  uint64_t v122;
  _BOOL4 HasMember;
  std::vector<std::string>::pointer v124;
  __int128 v125;
  std::string::size_type v126;
  uint64_t v127;
  std::string::size_type v128;
  std::string::size_type v129;
  unsigned int *v130;
  _QWORD *v131;
  uint64_t v132;
  uint64_t v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  void *v140[2];
  char v141;
  std::string v142;
  std::string v143;
  std::string v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  uint64_t v150[2];
  __int128 v151;
  __int128 v152;
  std::string v153;
  __int128 v154;
  std::string v155;
  uint64_t v156;
  std::__shared_weak_count *v157;
  std::vector<std::string> v158;
  std::string __s;
  std::string __p;
  std::string v161;
  std::string v162;
  std::string v163;
  int v164;
  __int16 v165;
  std::string v166;
  int v167;
  int v168;
  __int16 v169;
  uint64_t v170;

  v170 = *MEMORY[0x1E0C80C00];
  if (*(char *)(a4 + 23) < 0)
    std::string::__init_copy_ctor_external(&v161, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
  else
    v161 = *(std::string *)a4;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  memset(&__s, 0, sizeof(__s));
  siri::dialogengine::StringSplit((unsigned __int8 *)a4, "#", &v158);
  begin = v158.__begin_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)v158.__end_ - (char *)v158.__begin_) >> 3) >= 3)
  {
    if ((v158.__begin_->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v158.__begin_->__r_.__value_.__r.__words[2]);
    else
      size = v158.__begin_->__r_.__value_.__l.__size_;
    v12 = &v166;
    std::string::basic_string[abi:ne180100]((uint64_t)&v166, size + 1);
    if ((v166.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v12 = (std::string *)v166.__r_.__value_.__r.__words[0];
    if (size)
    {
      if ((begin->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v13 = begin;
      else
        v13 = (std::vector<std::string>::pointer)begin->__r_.__value_.__r.__words[0];
      memmove(v12, v13, size);
    }
    *(_WORD *)((char *)&v12->__r_.__value_.__l.__data_ + size) = 35;
    v14 = SHIBYTE(v158.__begin_[1].__r_.__value_.__r.__words[2]);
    if (v14 >= 0)
      data = v158.__begin_ + 1;
    else
      data = (std::vector<std::string>::pointer)v158.__begin_[1].__r_.__value_.__l.__data_;
    if (v14 >= 0)
      v16 = HIBYTE(v158.__begin_[1].__r_.__value_.__r.__words[2]);
    else
      v16 = v158.__begin_[1].__r_.__value_.__l.__size_;
    v17 = std::string::append(&v166, (const std::string::value_type *)data, v16);
    v18 = v17->__r_.__value_.__r.__words[0];
    v163.__r_.__value_.__r.__words[0] = v17->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v163.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v17->__r_.__value_.__r.__words[1] + 7);
    v19 = HIBYTE(v17->__r_.__value_.__r.__words[2]);
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v161.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v161.__r_.__value_.__l.__data_);
    v161.__r_.__value_.__r.__words[0] = v18;
    v161.__r_.__value_.__l.__size_ = v163.__r_.__value_.__r.__words[0];
    *(std::string::size_type *)((char *)&v161.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v163.__r_.__value_.__r.__words + 7);
    *((_BYTE *)&v161.__r_.__value_.__s + 23) = v19;
    if (SHIBYTE(v166.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v166.__r_.__value_.__l.__data_);
    std::string::operator=(&__s, (const std::string *)v158.__end_ - 1);
  }
  v20 = *(_QWORD *)(a1 + 3464);
  v21 = *(std::__shared_weak_count **)(a1 + 3472);
  v156 = v20;
  v157 = v21;
  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldxr(p_shared_owners);
    while (__stxr(v23 + 1, p_shared_owners));
  }
  if (v20)
  {
    siri::dialogengine::PatternContext::FindPatternCacheEntry(v20, (const void **)&v161.__r_.__value_.__l.__data_, 0, &v166);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __p = v166;
  }
  v24 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v24 = __p.__r_.__value_.__l.__size_;
  if (v24)
  {
LABEL_194:
    std::operator+<char>();
    v105 = std::string::append(&v163, "'");
    v106 = *(_OWORD *)&v105->__r_.__value_.__l.__data_;
    v166.__r_.__value_.__r.__words[2] = v105->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v166.__r_.__value_.__l.__data_ = v106;
    v105->__r_.__value_.__l.__size_ = 0;
    v105->__r_.__value_.__r.__words[2] = 0;
    v105->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Log::Debug((siri::dialogengine *)&v166);
    if (SHIBYTE(v166.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v166.__r_.__value_.__l.__data_);
    if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v163.__r_.__value_.__l.__data_);
    rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::GenericDocument((uint64_t)&v166);
    p_p = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    v163.__r_.__value_.__r.__words[0] = (std::string::size_type)p_p;
    v163.__r_.__value_.__l.__size_ = (std::string::size_type)p_p;
    rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::ParseStream<0u,rapidjson::UTF8<char>,rapidjson::GenericStringStream<rapidjson::UTF8<char>>>((uint64_t)&v166, (uint64_t)&v163);
    if (v167)
    {
      siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Internal error: parameter CAT execution returned invalid JSON response", v108);
      *a5 = 0;
      a5[1] = 0;
LABEL_216:
      rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::~GenericDocument((uint64_t)&v166);
      goto LABEL_217;
    }
    std::string::basic_string[abi:ne180100]<0>(&v163, "status");
    siri::dialogengine::ParseJSONString((unsigned int *)&v166, (const char *)&v163, &v162);
    if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v163.__r_.__value_.__l.__data_);
    if (SHIBYTE(v162.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v162.__r_.__value_.__l.__size_ != 7)
        goto LABEL_213;
      v110 = (std::string *)v162.__r_.__value_.__r.__words[0];
    }
    else
    {
      if (SHIBYTE(v162.__r_.__value_.__r.__words[2]) != 7)
        goto LABEL_213;
      v110 = &v162;
    }
    v111 = (int)v110->__r_.__value_.__l.__data_;
    v112 = *(_DWORD *)((char *)v110->__r_.__value_.__r.__words + 3);
    v113 = v111 == 1667462515 && v112 == 1936942435;
    if (v113)
    {
      v146 = 0uLL;
      v145 = 0uLL;
      if (a3)
      {
        std::allocate_shared[abi:ne180100]<siri::dialogengine::VariableArray,std::allocator<siri::dialogengine::VariableArray>,std::string const&,void>(&v163, a2);
        v145 = *(_OWORD *)&v163.__r_.__value_.__l.__data_;
      }
      else
      {
        v117 = operator new(0x108uLL);
        v117[1] = 0;
        v117[2] = 0;
        *v117 = &off_1E793A548;
        std::string::basic_string[abi:ne180100]<0>(&v163, "");
        siri::dialogengine::VariableString::VariableString((uint64_t)(v117 + 3), a2, (uint64_t)&v163);
        if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v163.__r_.__value_.__l.__data_);
        *(_QWORD *)&v118 = v117 + 3;
        *((_QWORD *)&v118 + 1) = v117;
        v146 = v118;
      }
      v119 = (unsigned int *)rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::operator[]<char const>((unsigned int *)&v166, "response");
      if (*((_WORD *)v119 + 11) == 4 && *v119)
      {
        v121 = *((_QWORD *)v119 + 1);
        v122 = v121 + 24 * *v119;
        do
        {
          if (*(_WORD *)(v121 + 22) == 3
            && rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::HasMember((unsigned int *)v121, "content"))
          {
            HasMember = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::HasMember((unsigned int *)v121, "id");
            if (HasMember)
            {
              std::string::basic_string[abi:ne180100]<0>(&v153, "id");
              siri::dialogengine::ParseJSONString((unsigned int *)v121, (const char *)&v153, &v155);
              siri::dialogengine::StringSplit((unsigned __int8 *)&v155, "#", &v163);
            }
            else
            {
              memset(&v163, 0, sizeof(v163));
            }
            std::vector<std::string>::__vdeallocate(&v158);
            v158 = (std::vector<std::string>)v163;
            memset(&v163, 0, sizeof(v163));
            v144.__r_.__value_.__r.__words[0] = (std::string::size_type)&v163;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v144);
            if (HasMember)
            {
              if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v155.__r_.__value_.__l.__data_);
              if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v153.__r_.__value_.__l.__data_);
            }
            if (v158.__end_ == v158.__begin_)
            {
              std::string::basic_string[abi:ne180100]<0>(&v144, "");
            }
            else
            {
              v124 = v158.__end_ - 1;
              if (SHIBYTE(v158.__end_[-1].__r_.__value_.__r.__words[2]) < 0)
              {
                std::string::__init_copy_ctor_external(&v144, v124->__r_.__value_.__l.__data_, v158.__end_[-1].__r_.__value_.__l.__size_);
              }
              else
              {
                v125 = *(_OWORD *)&v124->__r_.__value_.__l.__data_;
                v144.__r_.__value_.__r.__words[2] = v158.__end_[-1].__r_.__value_.__r.__words[2];
                *(_OWORD *)&v144.__r_.__value_.__l.__data_ = v125;
              }
            }
            v126 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
            if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v126 = __s.__r_.__value_.__l.__size_;
            if (!v126 || siri::dialogengine::StringGlobMatch(&v144, &__s))
            {
              v127 = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::operator[]<char const>((unsigned int *)v121, "content");
              memset(&v143, 0, sizeof(v143));
              memset(&v142, 0, sizeof(v142));
              if (*(_WORD *)(v127 + 22) != 3)
                goto LABEL_304;
              std::string::basic_string[abi:ne180100]<0>(v140, "print");
              siri::dialogengine::ParseJSONString((unsigned int *)v127, (const char *)v140, &v163);
              if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v143.__r_.__value_.__l.__data_);
              v143 = v163;
              *((_BYTE *)&v163.__r_.__value_.__s + 23) = 0;
              v163.__r_.__value_.__s.__data_[0] = 0;
              if (v141 < 0)
                operator delete(v140[0]);
              std::string::basic_string[abi:ne180100]<0>(v140, "speak");
              siri::dialogengine::ParseJSONString((unsigned int *)v127, (const char *)v140, &v163);
              if (SHIBYTE(v142.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v142.__r_.__value_.__l.__data_);
              v142 = v163;
              *((_BYTE *)&v163.__r_.__value_.__s + 23) = 0;
              v163.__r_.__value_.__s.__data_[0] = 0;
              if (v141 < 0)
                operator delete(v140[0]);
              v128 = HIBYTE(v143.__r_.__value_.__r.__words[2]);
              if ((v143.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v128 = v143.__r_.__value_.__l.__size_;
              if (!v128)
              {
                v129 = HIBYTE(v142.__r_.__value_.__r.__words[2]);
                if ((v142.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                  v129 = v142.__r_.__value_.__l.__size_;
                if (!v129)
                {
LABEL_304:
                  if (rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::HasMember((unsigned int *)v121, "caption"))
                  {
                    v130 = (unsigned int *)rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::operator[]<char const>((unsigned int *)v121, "caption");
                    std::string::basic_string[abi:ne180100]<0>(v140, "print");
                    siri::dialogengine::ParseJSONString(v130, (const char *)v140, &v163);
                    if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v143.__r_.__value_.__l.__data_);
                    v143 = v163;
                    *((_BYTE *)&v163.__r_.__value_.__s + 23) = 0;
                    v163.__r_.__value_.__s.__data_[0] = 0;
                    if (v141 < 0)
                      operator delete(v140[0]);
                    std::string::basic_string[abi:ne180100]<0>(v140, "speak");
                    siri::dialogengine::ParseJSONString(v130, (const char *)v140, &v163);
                    if (SHIBYTE(v142.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v142.__r_.__value_.__l.__data_);
                    v142 = v163;
                    *((_BYTE *)&v163.__r_.__value_.__s + 23) = 0;
                    v163.__r_.__value_.__s.__data_[0] = 0;
                    if (v141 < 0)
                      operator delete(v140[0]);
                  }
                }
              }
              if (a3)
              {
                v131 = operator new(0x108uLL);
                v131[1] = 0;
                v131[2] = 0;
                *v131 = &off_1E793A548;
                std::string::basic_string[abi:ne180100]<0>(&v163, "");
                siri::dialogengine::VariableString::VariableString((uint64_t)(v131 + 3), &v163, &v143, &v142);
              }
              siri::dialogengine::SpeakableString::SetString((std::string *)(v146 + 72), &v143, &v142);
            }
            if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v144.__r_.__value_.__l.__data_);
          }
          v121 += 24;
        }
        while (v121 != v122);
      }
      if (a3 && (v132 = v145, ((*(uint64_t (**)(_QWORD))(*(_QWORD *)v145 + 32))(v145) & 1) == 0))
      {
        v133 = *((_QWORD *)&v145 + 1);
        *a5 = v132;
        a5[1] = v133;
        v145 = 0uLL;
      }
      else
      {
        siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Internal error: cannot parse response from parameter CAT execution", v120);
        *a5 = 0;
        a5[1] = 0;
      }
      v134 = (std::__shared_weak_count *)*((_QWORD *)&v145 + 1);
      if (*((_QWORD *)&v145 + 1))
      {
        v135 = (unint64_t *)(*((_QWORD *)&v145 + 1) + 8);
        do
          v136 = __ldaxr(v135);
        while (__stlxr(v136 - 1, v135));
        if (!v136)
        {
          ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
          std::__shared_weak_count::__release_weak(v134);
        }
      }
      v137 = (std::__shared_weak_count *)*((_QWORD *)&v146 + 1);
      if (*((_QWORD *)&v146 + 1))
      {
        v138 = (unint64_t *)(*((_QWORD *)&v146 + 1) + 8);
        do
          v139 = __ldaxr(v138);
        while (__stlxr(v139 - 1, v138));
        if (!v139)
        {
          ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
          std::__shared_weak_count::__release_weak(v137);
        }
      }
      goto LABEL_214;
    }
LABEL_213:
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Internal error: parameter CAT execution returned invalid JSON response", v109);
    *a5 = 0;
    a5[1] = 0;
LABEL_214:
    if (SHIBYTE(v162.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v162.__r_.__value_.__l.__data_);
    goto LABEL_216;
  }
  siri::dialogengine::RequestInfo::RequestInfo((siri::dialogengine::RequestInfo *)&v166, (const siri::dialogengine::RequestInfo *)(a1 + 8));
  std::map<std::string,std::shared_ptr<siri::dialogengine::Variable>>::map[abi:ne180100]((uint64_t)&v163, (const void ***)(a1 + 520));
  v25 = *(_QWORD *)(a1 + 504);
  v26 = *(std::__shared_weak_count **)(a1 + 512);
  v153.__r_.__value_.__r.__words[0] = v25;
  v153.__r_.__value_.__l.__size_ = (std::string::size_type)v26;
  if (v26)
  {
    v27 = (unint64_t *)&v26->__shared_owners_;
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
  }
  if (!v25)
  {
    v155 = v163;
    if (!v163.__r_.__value_.__r.__words[2])
    {
      v155.__r_.__value_.__r.__words[0] = (std::string::size_type)&v155.__r_.__value_.__l.__size_;
      if (v26)
        goto LABEL_65;
      goto LABEL_69;
    }
    *(_QWORD *)(v163.__r_.__value_.__l.__size_ + 16) = &v155.__r_.__value_.__l.__size_;
    v163.__r_.__value_.__r.__words[0] = (std::string::size_type)&v163.__r_.__value_.__l.__size_;
    *(_OWORD *)&v163.__r_.__value_.__r.__words[1] = 0uLL;
LABEL_64:
    if (!v26)
      goto LABEL_69;
    goto LABEL_65;
  }
  std::map<std::string,std::shared_ptr<siri::dialogengine::Variable>>::map[abi:ne180100]((uint64_t)&v155, (const void ***)&v163);
  v29 = v163.__r_.__value_.__r.__words[0];
  if ((std::string::size_type *)v163.__r_.__value_.__l.__data_ == &v163.__r_.__value_.__r.__words[1])
    goto LABEL_64;
  do
  {
    Parameter = siri::dialogengine::File::GetParameter((uint64_t)v153.__r_.__value_.__l.__data_, (unsigned __int8 **)(v29 + 32));
    if (!Parameter)
      goto LABEL_51;
    if (*(char *)(Parameter + 207) < 0)
      std::string::__init_copy_ctor_external(&v162, *(const std::string::value_type **)(Parameter + 184), *(_QWORD *)(Parameter + 192));
    else
      v162 = *(std::string *)(Parameter + 184);
    if ((v162.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v31 = HIBYTE(v162.__r_.__value_.__r.__words[2]);
    else
      v31 = v162.__r_.__value_.__l.__size_;
    if ((SHIBYTE(v162.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if (!v31)
        goto LABEL_51;
LABEL_50:
      std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::Variable>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::Variable>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::Variable>>>>::__erase_unique<std::string>((uint64_t **)&v155, (const void **)(v29 + 32));
      goto LABEL_51;
    }
    operator delete(v162.__r_.__value_.__l.__data_);
    if (v31)
      goto LABEL_50;
LABEL_51:
    v32 = *(std::string **)(v29 + 8);
    if (v32)
    {
      do
      {
        v33 = v32;
        v32 = (std::string *)v32->__r_.__value_.__r.__words[0];
      }
      while (v32);
    }
    else
    {
      do
      {
        v33 = *(std::string **)(v29 + 16);
        v113 = v33->__r_.__value_.__r.__words[0] == v29;
        v29 = (std::string::size_type)v33;
      }
      while (!v113);
    }
    v29 = (std::string::size_type)v33;
  }
  while (v33 != (std::string *)&v163.__r_.__value_.__r.__words[1]);
  v26 = (std::__shared_weak_count *)v153.__r_.__value_.__l.__size_;
  if (!v153.__r_.__value_.__l.__size_)
    goto LABEL_69;
LABEL_65:
  v34 = (unint64_t *)&v26->__shared_owners_;
  do
    v35 = __ldaxr(v34);
  while (__stlxr(v35 - 1, v34));
  if (!v35)
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v26);
  }
LABEL_69:
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy((_QWORD *)v163.__r_.__value_.__l.__size_);
  _ZNSt3__115allocate_sharedB8ne180100IN4siri12dialogengine14VariableObjectENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_((siri::dialogengine::VariableObject **)&v144);
  v36 = v144.__r_.__value_.__r.__words[0];
  memset(&v153, 0, sizeof(v153));
  std::vector<siri::dialogengine::UpdatableDir>::__init_with_size[abi:ne180100]<siri::dialogengine::UpdatableDir*,siri::dialogengine::UpdatableDir*>(&v153, v166.__r_.__value_.__l.__size_, v166.__r_.__value_.__r.__words[2], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v166.__r_.__value_.__r.__words[2] - v166.__r_.__value_.__l.__size_) >> 5));
  siri::dialogengine::GetBaseDir((__int128 **)&v153, &v162);
  v37 = (std::__shared_weak_count *)operator new(0x108uLL);
  v37->__shared_owners_ = 0;
  v37->__shared_weak_owners_ = 0;
  v37->__vftable = (std::__shared_weak_count_vtbl *)&off_1E793A548;
  std::string::basic_string[abi:ne180100]<0>(&v163, "templateDir");
  siri::dialogengine::VariableString::VariableString((uint64_t)&v37[1], &v163, (uint64_t)&v162);
  if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v163.__r_.__value_.__l.__data_);
  v143.__r_.__value_.__r.__words[0] = (std::string::size_type)&v37[1];
  v143.__r_.__value_.__l.__size_ = (std::string::size_type)v37;
  v154 = *(_OWORD *)&v143.__r_.__value_.__l.__data_;
  *(_OWORD *)&v143.__r_.__value_.__l.__data_ = 0uLL;
  siri::dialogengine::VariableObject::AddProperty(v36, (uint64_t *)&v154);
  if (v37)
  {
    v38 = (unint64_t *)&v37->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  if (SHIBYTE(v162.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v162.__r_.__value_.__l.__data_);
  v163.__r_.__value_.__r.__words[0] = (std::string::size_type)&v153;
  std::vector<siri::dialogengine::UpdatableDir>::__destroy_vector::operator()[abi:ne180100]((void ***)&v163);
  v40 = v144.__r_.__value_.__r.__words[0];
  v41 = (std::__shared_weak_count *)operator new(0x108uLL);
  v41->__shared_owners_ = 0;
  v41->__shared_weak_owners_ = 0;
  v41->__vftable = (std::__shared_weak_count_vtbl *)&off_1E793A548;
  std::string::basic_string[abi:ne180100]<0>(&v163, "catId");
  siri::dialogengine::VariableString::VariableString((uint64_t)&v41[1], &v163, (uint64_t)&v161);
  if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v163.__r_.__value_.__l.__data_);
  v162.__r_.__value_.__r.__words[0] = (std::string::size_type)&v41[1];
  v162.__r_.__value_.__l.__size_ = (std::string::size_type)v41;
  v152 = *(_OWORD *)&v162.__r_.__value_.__l.__data_;
  *(_OWORD *)&v162.__r_.__value_.__l.__data_ = 0uLL;
  siri::dialogengine::VariableObject::AddProperty(v40, (uint64_t *)&v152);
  if (v41)
  {
    v43 = (unint64_t *)&v41->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  v45 = (std::__shared_weak_count *)v162.__r_.__value_.__l.__size_;
  if (v162.__r_.__value_.__l.__size_)
  {
    v46 = (unint64_t *)(v162.__r_.__value_.__l.__size_ + 8);
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  v48 = v144.__r_.__value_.__r.__words[0];
  siri::dialogengine::Context::GetLocale((siri::dialogengine::Context *)a1, v42, (uint64_t)&v162);
  v49 = (std::__shared_weak_count *)operator new(0x108uLL);
  v49->__shared_owners_ = 0;
  v49->__shared_weak_owners_ = 0;
  v49->__vftable = (std::__shared_weak_count_vtbl *)&off_1E793A548;
  std::string::basic_string[abi:ne180100]<0>(&v163, "locale");
  siri::dialogengine::VariableString::VariableString((uint64_t)&v49[1], &v163, (uint64_t)&v162);
  if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v163.__r_.__value_.__l.__data_);
  v153.__r_.__value_.__r.__words[0] = (std::string::size_type)&v49[1];
  v153.__r_.__value_.__l.__size_ = (std::string::size_type)v49;
  v151 = *(_OWORD *)&v153.__r_.__value_.__l.__data_;
  *(_OWORD *)&v153.__r_.__value_.__l.__data_ = 0uLL;
  siri::dialogengine::VariableObject::AddProperty(v48, (uint64_t *)&v151);
  if (v49)
  {
    v50 = (unint64_t *)&v49->__shared_owners_;
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  v52 = (std::__shared_weak_count *)v153.__r_.__value_.__l.__size_;
  if (v153.__r_.__value_.__l.__size_)
  {
    v53 = (unint64_t *)(v153.__r_.__value_.__l.__size_ + 8);
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  if (SHIBYTE(v162.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v162.__r_.__value_.__l.__data_);
  v55 = (std::__shared_weak_count *)operator new(0x78uLL);
  v55->__shared_owners_ = 0;
  v55->__shared_weak_owners_ = 0;
  v55->__vftable = (std::__shared_weak_count_vtbl *)&off_1E7936190;
  std::string::basic_string[abi:ne180100]<0>(&v163, "parameters");
  siri::dialogengine::VariableObject::VariableObject(&v55[1].__vftable, &v163);
  if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v163.__r_.__value_.__l.__data_);
  v143.__r_.__value_.__r.__words[0] = (std::string::size_type)&v55[1];
  v143.__r_.__value_.__l.__size_ = (std::string::size_type)v55;
  v56 = (std::string::__raw *)v155.__r_.__value_.__r.__words[0];
  if ((std::string::size_type *)v155.__r_.__value_.__l.__data_ == &v155.__r_.__value_.__r.__words[1])
  {
    v65 = 0;
    v64 = v144.__r_.__value_.__r.__words[0];
    *(_QWORD *)&v149 = v55 + 1;
    *((_QWORD *)&v149 + 1) = v55;
LABEL_124:
    v66 = (unint64_t *)&v55->__shared_owners_;
    do
      v67 = __ldxr(v66);
    while (__stxr(v67 + 1, v66));
    goto LABEL_126;
  }
  do
  {
    v57 = (std::__shared_weak_count *)v56[2].__words[2];
    v150[0] = v56[2].__words[1];
    v150[1] = (uint64_t)v57;
    if (v57)
    {
      v58 = (unint64_t *)&v57->__shared_owners_;
      do
        v59 = __ldxr(v58);
      while (__stxr(v59 + 1, v58));
    }
    siri::dialogengine::VariableObject::AddProperty((uint64_t)v143.__r_.__value_.__l.__data_, v150);
    if (v57)
    {
      v60 = (unint64_t *)&v57->__shared_owners_;
      do
        v61 = __ldaxr(v60);
      while (__stlxr(v61 - 1, v60));
      if (!v61)
      {
        ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
        std::__shared_weak_count::__release_weak(v57);
      }
    }
    v62 = (std::string *)v56->__words[1];
    if (v62)
    {
      do
      {
        v63 = v62;
        v62 = (std::string *)v62->__r_.__value_.__r.__words[0];
      }
      while (v62);
    }
    else
    {
      do
      {
        v63 = (std::string *)v56->__words[2];
        v113 = v63->__r_.__value_.__r.__words[0] == (_QWORD)v56;
        v56 = (std::string::__raw *)v63;
      }
      while (!v113);
    }
    v56 = (std::string::__raw *)v63;
  }
  while (v63 != (std::string *)&v155.__r_.__value_.__r.__words[1]);
  v55 = (std::__shared_weak_count *)v143.__r_.__value_.__l.__size_;
  v64 = v144.__r_.__value_.__r.__words[0];
  v149 = *(_OWORD *)&v143.__r_.__value_.__l.__data_;
  v65 = v143.__r_.__value_.__l.__size_ == 0;
  if (v143.__r_.__value_.__l.__size_)
    goto LABEL_124;
LABEL_126:
  siri::dialogengine::VariableObject::AddProperty(v64, (uint64_t *)&v149);
  if (!v65)
  {
    v68 = (unint64_t *)&v55->__shared_owners_;
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  v70 = v144.__r_.__value_.__r.__words[0];
  v71 = v168;
  v72 = (std::__shared_weak_count *)operator new(0x60uLL);
  v72->__shared_owners_ = 0;
  v72->__shared_weak_owners_ = 0;
  v72->__vftable = (std::__shared_weak_count_vtbl *)&off_1E793A478;
  std::string::basic_string[abi:ne180100]<0>(&v163, "enableUpdates");
  siri::dialogengine::VariableBoolean::VariableBoolean((uint64_t)&v72[1], &v163, (v71 & 8) != 0);
  if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v163.__r_.__value_.__l.__data_);
  v162.__r_.__value_.__r.__words[0] = (std::string::size_type)&v72[1];
  v162.__r_.__value_.__l.__size_ = (std::string::size_type)v72;
  v148 = *(_OWORD *)&v162.__r_.__value_.__l.__data_;
  *(_OWORD *)&v162.__r_.__value_.__l.__data_ = 0uLL;
  siri::dialogengine::VariableObject::AddProperty(v70, (uint64_t *)&v148);
  if (v72)
  {
    v73 = (unint64_t *)&v72->__shared_owners_;
    do
      v74 = __ldaxr(v73);
    while (__stlxr(v74 - 1, v73));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
  }
  v75 = (std::__shared_weak_count *)v162.__r_.__value_.__l.__size_;
  if (v162.__r_.__value_.__l.__size_)
  {
    v76 = (unint64_t *)(v162.__r_.__value_.__l.__size_ + 8);
    do
      v77 = __ldaxr(v76);
    while (__stlxr(v77 - 1, v76));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
  }
  std::operator+<char>();
  v78 = std::string::append(&v162, "'");
  v79 = *(_OWORD *)&v78->__r_.__value_.__l.__data_;
  v163.__r_.__value_.__r.__words[2] = v78->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v163.__r_.__value_.__l.__data_ = v79;
  v78->__r_.__value_.__l.__size_ = 0;
  v78->__r_.__value_.__r.__words[2] = 0;
  v78->__r_.__value_.__r.__words[0] = 0;
  siri::dialogengine::Log::Debug((siri::dialogengine *)&v163);
  if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v163.__r_.__value_.__l.__data_);
  if (SHIBYTE(v162.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v162.__r_.__value_.__l.__data_);
  v80 = (std::__shared_weak_count *)v144.__r_.__value_.__l.__size_;
  v147 = *(_OWORD *)&v144.__r_.__value_.__l.__data_;
  if (v144.__r_.__value_.__l.__size_)
  {
    v81 = (unint64_t *)(v144.__r_.__value_.__l.__size_ + 8);
    do
      v82 = __ldxr(v81);
    while (__stxr(v82 + 1, v81));
  }
  std::string::basic_string[abi:ne180100]<0>(&v163, "");
  std::string::basic_string[abi:ne180100]<0>(&v162, "");
  std::string::basic_string[abi:ne180100]<0>(&v153, "");
  siri::dialogengine::PrepareRequestFromVariable((uint64_t *)&v147, &v163, &v162, &v153, (siri::dialogengine::Context **)&v142);
  if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v153.__r_.__value_.__l.__data_);
  if (SHIBYTE(v162.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v162.__r_.__value_.__l.__data_);
  if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v163.__r_.__value_.__l.__data_);
  if (v80)
  {
    v83 = (unint64_t *)&v80->__shared_owners_;
    do
      v84 = __ldaxr(v83);
    while (__stlxr(v84 - 1, v83));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
      std::__shared_weak_count::__release_weak(v80);
    }
  }
  v85 = v142.__r_.__value_.__r.__words[0];
  if (v142.__r_.__value_.__r.__words[0])
  {
    siri::dialogengine::RequestInfo::RequestInfo((siri::dialogengine::RequestInfo *)&v163, (const siri::dialogengine::RequestInfo *)(v142.__r_.__value_.__r.__words[0] + 8));
    v164 = v168;
    v165 = v169;
    siri::dialogengine::Context::SetRequestInfo((uint64_t)v142.__r_.__value_.__l.__data_, (uint64_t)&v163);
    siri::dialogengine::RequestInfo::~RequestInfo((void **)&v163.__r_.__value_.__l.__data_);
    v86 = (siri::dialogengine *)v142.__r_.__value_.__r.__words[0];
    *(_QWORD *)(v142.__r_.__value_.__r.__words[0] + 792) = *(_QWORD *)(a1 + 792);
    siri::dialogengine::GenerateResponse((uint64_t *)&v163, v86);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __p = v163;
    v87 = v156;
    if (v156)
    {
      siri::dialogengine::PatternContext::AddEntryToPatternCache(v156, (uint64_t)&v161, (uint64_t)&__p, 0);
      v88 = (_QWORD *)(a1 + 3464);
      v89 = v157;
      if (v157)
      {
        v90 = (unint64_t *)&v157->__shared_owners_;
        do
          v91 = __ldxr(v90);
        while (__stxr(v91 + 1, v90));
        std::shared_ptr<siri::dialogengine::PatternSchemaUsage>::operator=[abi:ne180100](v88, v87, (uint64_t)v89);
        v92 = (unint64_t *)&v89->__shared_owners_;
        do
          v93 = __ldaxr(v92);
        while (__stlxr(v93 - 1, v92));
        if (!v93)
        {
          ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
          std::__shared_weak_count::__release_weak(v89);
        }
      }
      else
      {
        std::shared_ptr<siri::dialogengine::PatternSchemaUsage>::operator=[abi:ne180100](v88, v87, 0);
      }
    }
  }
  else
  {
    std::operator+<char>();
    v94 = std::string::append(&v162, "'");
    v95 = *(_OWORD *)&v94->__r_.__value_.__l.__data_;
    v163.__r_.__value_.__r.__words[2] = v94->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v163.__r_.__value_.__l.__data_ = v95;
    v94->__r_.__value_.__l.__size_ = 0;
    v94->__r_.__value_.__r.__words[2] = 0;
    v94->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Log::LogWithLevel((uint64_t)&v163, 3u);
    if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v163.__r_.__value_.__l.__data_);
    if (SHIBYTE(v162.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v162.__r_.__value_.__l.__data_);
    *a5 = 0;
    a5[1] = 0;
  }
  v96 = (std::__shared_weak_count *)v142.__r_.__value_.__l.__size_;
  if (v142.__r_.__value_.__l.__size_)
  {
    v97 = (unint64_t *)(v142.__r_.__value_.__l.__size_ + 8);
    do
      v98 = __ldaxr(v97);
    while (__stlxr(v98 - 1, v97));
    if (!v98)
    {
      ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
      std::__shared_weak_count::__release_weak(v96);
    }
  }
  v99 = (std::__shared_weak_count *)v143.__r_.__value_.__l.__size_;
  if (v143.__r_.__value_.__l.__size_)
  {
    v100 = (unint64_t *)(v143.__r_.__value_.__l.__size_ + 8);
    do
      v101 = __ldaxr(v100);
    while (__stlxr(v101 - 1, v100));
    if (!v101)
    {
      ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
      std::__shared_weak_count::__release_weak(v99);
    }
  }
  v102 = (std::__shared_weak_count *)v144.__r_.__value_.__l.__size_;
  if (v144.__r_.__value_.__l.__size_)
  {
    v103 = (unint64_t *)(v144.__r_.__value_.__l.__size_ + 8);
    do
      v104 = __ldaxr(v103);
    while (__stlxr(v104 - 1, v103));
    if (!v104)
    {
      ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
      std::__shared_weak_count::__release_weak(v102);
    }
  }
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy((_QWORD *)v155.__r_.__value_.__l.__size_);
  siri::dialogengine::RequestInfo::~RequestInfo((void **)&v166.__r_.__value_.__l.__data_);
  if (v85)
    goto LABEL_194;
LABEL_217:
  v114 = v157;
  if (v157)
  {
    v115 = (unint64_t *)&v157->__shared_owners_;
    do
      v116 = __ldaxr(v115);
    while (__stlxr(v116 - 1, v115));
    if (!v116)
    {
      ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
      std::__shared_weak_count::__release_weak(v114);
    }
  }
  v166.__r_.__value_.__r.__words[0] = (std::string::size_type)&v158;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v166);
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v161.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v161.__r_.__value_.__l.__data_);
}

void sub_1BFBD023C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,char a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a69;
  char a71;
  void *a72;
  char a73;
  void *a74;
  char a75;
  void *a76;
  char a77;

  if (a20 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  if (a34 < 0)
    operator delete(a29);
  if (a41 < 0)
    operator delete(a36);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a43);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a45);
  if (SLOBYTE(STACK[0x217]) < 0)
    operator delete((void *)STACK[0x200]);
  rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::~GenericDocument((uint64_t)&STACK[0x410]);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a69);
  STACK[0x410] = (unint64_t)&a71;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x410]);
  if (a73 < 0)
    operator delete(a72);
  if (a75 < 0)
    operator delete(a74);
  if (a77 < 0)
    operator delete(a76);
  _Unwind_Resume(a1);
}

YAML::SingleDocParser *YAML::SingleDocParser::SingleDocParser(YAML::SingleDocParser *this, YAML::Scanner *a2, const YAML::Directives *a3)
{
  _OWORD *v4;

  *(_QWORD *)this = a2;
  *((_QWORD *)this + 1) = a3;
  v4 = (_OWORD *)operator new();
  *v4 = 0u;
  v4[1] = 0u;
  v4[2] = 0u;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 2) = v4;
  *((_QWORD *)this + 3) = (char *)this + 32;
  return this;
}

{
  _OWORD *v4;

  *(_QWORD *)this = a2;
  *((_QWORD *)this + 1) = a3;
  v4 = (_OWORD *)operator new();
  *v4 = 0u;
  v4[1] = 0u;
  v4[2] = 0u;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 2) = v4;
  *((_QWORD *)this + 3) = (char *)this + 32;
  return this;
}

void YAML::SingleDocParser::~SingleDocParser(YAML::SingleDocParser *this)
{
  std::__tree<std::string>::destroy(*((char **)this + 4));
  std::unique_ptr<YAML::CollectionStack>::reset[abi:ne180100]((uint64_t *)this + 2);
}

{
  std::__tree<std::string>::destroy(*((char **)this + 4));
  std::unique_ptr<YAML::CollectionStack>::reset[abi:ne180100]((uint64_t *)this + 2);
}

uint64_t *std::unique_ptr<YAML::CollectionStack>::reset[abi:ne180100](uint64_t *result)
{
  uint64_t v1;
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *result;
  *result = 0;
  if (v1)
  {
    v2 = *(void ***)(v1 + 8);
    v3 = *(void ***)(v1 + 16);
    *(_QWORD *)(v1 + 40) = 0;
    v4 = (char *)v3 - (char *)v2;
    if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
    {
      do
      {
        operator delete(*v2);
        v3 = *(void ***)(v1 + 16);
        v2 = (void **)(*(_QWORD *)(v1 + 8) + 8);
        *(_QWORD *)(v1 + 8) = v2;
        v4 = (char *)v3 - (char *)v2;
      }
      while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
    }
    v5 = v4 >> 3;
    if (v5 == 1)
    {
      v6 = 512;
    }
    else
    {
      if (v5 != 2)
      {
LABEL_10:
        if (v2 != v3)
        {
          do
          {
            v7 = *v2++;
            operator delete(v7);
          }
          while (v2 != v3);
          v9 = *(_QWORD *)(v1 + 8);
          v8 = *(_QWORD *)(v1 + 16);
          if (v8 != v9)
            *(_QWORD *)(v1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
        }
        if (*(_QWORD *)v1)
          operator delete(*(void **)v1);
        JUMPOUT(0x1C3B8D890);
      }
      v6 = 1024;
    }
    *(_QWORD *)(v1 + 32) = v6;
    goto LABEL_10;
  }
  return result;
}

void YAML::SingleDocParser::HandleDocument(uint64_t a1, uint64_t a2)
{
  YAML::Scanner *v4;
  unint64_t v5;
  YAML::Scanner *v6;

  v4 = *(YAML::Scanner **)a1;
  YAML::Scanner::EnsureTokensInQueue(*(YAML::Scanner **)a1);
  if (!*((_QWORD *)v4 + 17))
    __assert_rtn("HandleDocument", "singledocparser.cpp", 30, "!m_scanner.empty()");
  if (*(_QWORD *)(a1 + 48))
    __assert_rtn("HandleDocument", "singledocparser.cpp", 31, "!m_curAnchor");
  v5 = YAML::Scanner::peek(*(YAML::Scanner **)a1);
  (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)a2 + 16))(a2, v5 + 8);
  if (*(_DWORD *)(YAML::Scanner::peek(*(YAML::Scanner **)a1) + 4) == 1)
    YAML::Scanner::pop(*(YAML::Scanner **)a1);
  YAML::SingleDocParser::HandleNode(a1, a2);
  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  while (1)
  {
    v6 = *(YAML::Scanner **)a1;
    YAML::Scanner::EnsureTokensInQueue(*(YAML::Scanner **)a1);
    if (!*((_QWORD *)v6 + 17) || *(_DWORD *)(YAML::Scanner::peek(*(YAML::Scanner **)a1) + 4) != 2)
      break;
    YAML::Scanner::pop(*(YAML::Scanner **)a1);
  }
}

void YAML::SingleDocParser::HandleNode(uint64_t a1, uint64_t a2)
{
  YAML::Scanner *v4;
  unint64_t v5;
  int v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _BOOL4 v19;
  uint64_t v20;
  void *v21[2];
  char v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  void *__p;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;

  v4 = *(YAML::Scanner **)a1;
  YAML::Scanner::EnsureTokensInQueue(*(YAML::Scanner **)a1);
  if (*((_QWORD *)v4 + 17))
  {
    v5 = YAML::Scanner::peek(*(YAML::Scanner **)a1);
    v30 = *(_QWORD *)(v5 + 8);
    v31 = *(_DWORD *)(v5 + 16);
    if (*(_DWORD *)(YAML::Scanner::peek(*(YAML::Scanner **)a1) + 4) == 15)
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "?");
      (*(void (**)(uint64_t, uint64_t *, void **, _QWORD, _QWORD))(*(_QWORD *)a2 + 72))(a2, &v30, &__p, 0, 0);
      if (SHIBYTE(v29) < 0)
        operator delete(__p);
      YAML::SingleDocParser::HandleMap((YAML::Scanner **)a1, a2);
      (*(void (**)(uint64_t))(*(_QWORD *)a2 + 80))(a2);
    }
    else if (*(_DWORD *)(YAML::Scanner::peek(*(YAML::Scanner **)a1) + 4) == 17)
    {
      v7 = YAML::Scanner::peek(*(YAML::Scanner **)a1);
      v8 = YAML::SingleDocParser::LookupAnchor(a1, &v30, (const void **)(v7 + 24));
      (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a2 + 40))(a2, &v30, v8);
      YAML::Scanner::pop(*(YAML::Scanner **)a1);
    }
    else
    {
      __p = 0;
      v28 = 0;
      v29 = 0;
      v24 = 0;
      v25 = 0;
      v26 = 0;
      v23 = 0;
      YAML::SingleDocParser::ParseProperties((YAML::Scanner **)a1, (uint64_t)&__p, &v23, (uint64_t)&v24);
      v9 = HIBYTE(v26);
      if (v26 < 0)
        v9 = v25;
      if (v9)
        (*(void (**)(uint64_t, uint64_t *, void **))(*(_QWORD *)a2 + 88))(a2, &v30, &v24);
      v10 = YAML::Scanner::peek(*(YAML::Scanner **)a1);
      v11 = v10;
      v12 = *(_DWORD *)(v10 + 4);
      if (v12 == 19 && YAML::IsNullString((_BYTE *)(v10 + 24)))
      {
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a2 + 32))(a2, &v30, v23);
LABEL_28:
        YAML::Scanner::pop(*(YAML::Scanner **)a1);
      }
      else
      {
        v13 = HIBYTE(v29);
        if (v29 < 0)
          v13 = v28;
        if (!v13)
        {
          if (v12 == 20)
            v14 = "!";
          else
            v14 = "?";
          MEMORY[0x1C3B8D53C](&__p, v14);
          v12 = *(_DWORD *)(v11 + 4);
        }
        v15 = 2;
        switch(v12)
        {
          case 3:
            v15 = 1;
            goto LABEL_25;
          case 4:
            v15 = 1;
            goto LABEL_32;
          case 5:
          case 6:
          case 7:
          case 10:
          case 11:
          case 12:
          case 13:
            goto LABEL_39;
          case 8:
LABEL_25:
            (*(void (**)(uint64_t, uint64_t *, void **, uint64_t, uint64_t))(*(_QWORD *)a2 + 56))(a2, &v30, &__p, v23, v15);
            YAML::SingleDocParser::HandleSequence((YAML::Scanner **)a1, a2);
            v16 = 8;
            goto LABEL_33;
          case 9:
            goto LABEL_32;
          case 14:
            v17 = *(_QWORD **)(a1 + 16);
            v18 = v17[5];
            if (!v18
              || *(_DWORD *)(*(_QWORD *)(v17[1] + (((unint64_t)(v18 + v17[4] - 1) >> 7) & 0x1FFFFFFFFFFFFF8))
                           + 4 * ((v18 + v17[4] - 1) & 0x3FF)) != 4)
            {
              goto LABEL_39;
            }
LABEL_32:
            (*(void (**)(uint64_t, uint64_t *, void **, uint64_t, uint64_t))(*(_QWORD *)a2 + 72))(a2, &v30, &__p, v23, v15);
            YAML::SingleDocParser::HandleMap((YAML::Scanner **)a1, a2);
            v16 = 10;
LABEL_33:
            (*(void (**)(uint64_t))(*(_QWORD *)a2 + 8 * v16))(a2);
            break;
          default:
            if ((v12 - 19) < 2)
            {
              (*(void (**)(uint64_t, uint64_t *, void **, uint64_t, unint64_t))(*(_QWORD *)a2 + 48))(a2, &v30, &__p, v23, v11 + 24);
              goto LABEL_28;
            }
LABEL_39:
            v19 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&__p, "?");
            v20 = v23;
            if (v19)
            {
              (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a2 + 32))(a2, &v30, v23);
            }
            else
            {
              std::string::basic_string[abi:ne180100]<0>(v21, "");
              (*(void (**)(uint64_t, uint64_t *, void **, uint64_t, void **))(*(_QWORD *)a2 + 48))(a2, &v30, &__p, v20, v21);
              if (v22 < 0)
                operator delete(v21[0]);
            }
            break;
        }
      }
      if (SHIBYTE(v26) < 0)
        operator delete(v24);
      if (SHIBYTE(v29) < 0)
        operator delete(__p);
    }
  }
  else
  {
    v6 = *(_DWORD *)(*(_QWORD *)a1 + 16);
    __p = *(void **)(*(_QWORD *)a1 + 8);
    LODWORD(v28) = v6;
    (*(void (**)(uint64_t, void **, _QWORD))(*(_QWORD *)a2 + 32))(a2, &__p, 0);
  }
}

void sub_1BFBD0E30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a14 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

void YAML::SingleDocParser::HandleMap(YAML::Scanner **a1, uint64_t a2)
{
  int v4;

  v4 = *(_DWORD *)(YAML::Scanner::peek(*a1) + 4);
  if (v4 > 13)
  {
    if (v4 == 14)
    {
      YAML::SingleDocParser::HandleCompactMap((uint64_t)a1, a2);
    }
    else if (v4 == 15)
    {
      YAML::SingleDocParser::HandleCompactMapWithNoKey((uint64_t)a1, a2);
    }
  }
  else if (v4 == 4)
  {
    YAML::SingleDocParser::HandleBlockMap((uint64_t)a1, a2);
  }
  else if (v4 == 9)
  {
    YAML::SingleDocParser::HandleFlowMap((uint64_t)a1, a2);
  }
}

uint64_t YAML::SingleDocParser::LookupAnchor(uint64_t a1, _DWORD *a2, const void **a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  _BOOL4 v9;
  uint64_t *v10;
  _QWORD *exception;
  __int128 v13;

  v4 = a1 + 32;
  v5 = *(_QWORD *)(a1 + 32);
  if (!v5)
    goto LABEL_9;
  v7 = a1 + 40;
  v8 = a1 + 32;
  do
  {
    v9 = std::less<std::string>::operator()[abi:ne180100](v7, (const void **)(v5 + 32), a3);
    v10 = (uint64_t *)(v5 + 8);
    if (!v9)
    {
      v10 = (uint64_t *)v5;
      v8 = v5;
    }
    v5 = *v10;
  }
  while (*v10);
  if (v8 == v4 || std::less<std::string>::operator()[abi:ne180100](v7, a3, (const void **)(v8 + 32)))
  {
LABEL_9:
    exception = __cxa_allocate_exception(0x38uLL);
    std::string::basic_string[abi:ne180100]<0>(&v13, "the referenced anchor is not defined");
    YAML::Exception::Exception((uint64_t)exception, a2, &v13);
    *exception = &off_1E793AF28;
  }
  return *(_QWORD *)(v8 + 56);
}

void sub_1BFBD1018(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

void YAML::SingleDocParser::ParseProperties(YAML::Scanner **a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  YAML::Scanner *v8;
  int v9;

  if (*(char *)(a2 + 23) < 0)
  {
    **(_BYTE **)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 23) = 0;
  }
  if (*(char *)(a4 + 23) < 0)
  {
    **(_BYTE **)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
  }
  else
  {
    *(_BYTE *)a4 = 0;
    *(_BYTE *)(a4 + 23) = 0;
  }
  *a3 = 0;
  while (1)
  {
    v8 = *a1;
    YAML::Scanner::EnsureTokensInQueue(*a1);
    if (!*((_QWORD *)v8 + 17))
      break;
    v9 = *(_DWORD *)(YAML::Scanner::peek(*a1) + 4);
    if (v9 == 16)
    {
      YAML::SingleDocParser::ParseAnchor(a1, a3, (std::string *)a4);
    }
    else
    {
      if (v9 != 18)
        return;
      YAML::SingleDocParser::ParseTag(a1, a2);
    }
  }
}

void YAML::SingleDocParser::HandleSequence(YAML::Scanner **a1, uint64_t a2)
{
  int v4;

  v4 = *(_DWORD *)(YAML::Scanner::peek(*a1) + 4);
  if (v4 == 8)
  {
    YAML::SingleDocParser::HandleFlowSequence((uint64_t)a1, a2);
  }
  else if (v4 == 3)
  {
    YAML::SingleDocParser::HandleBlockSequence((uint64_t)a1, a2);
  }
}

void YAML::SingleDocParser::HandleBlockSequence(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  YAML::Scanner *v5;
  unint64_t v6;
  unint64_t v7;
  int v8;
  __int128 v9;
  int v10;
  YAML::Scanner *v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *exception;
  int v15;
  __int128 v16;
  __int128 v17;
  int v18;
  std::string __p;
  std::string v20;
  int v21;

  YAML::Scanner::pop(*(YAML::Scanner **)a1);
  v4 = *(_QWORD **)(a1 + 16);
  LODWORD(v17) = 2;
  std::deque<YAML::CollectionType::value>::push_back(v4, &v17);
  do
  {
    v5 = *(YAML::Scanner **)a1;
    YAML::Scanner::EnsureTokensInQueue(*(YAML::Scanner **)a1);
    if (!*((_QWORD *)v5 + 17))
    {
      exception = __cxa_allocate_exception(0x38uLL);
      v15 = *(_DWORD *)(*(_QWORD *)a1 + 16);
      *(_QWORD *)&v16 = *(_QWORD *)(*(_QWORD *)a1 + 8);
      DWORD2(v16) = v15;
      std::string::basic_string[abi:ne180100]<0>(&v17, "end of sequence not found");
      YAML::Exception::Exception((uint64_t)exception, &v16, &v17);
      *exception = &off_1E793AF28;
    }
    v6 = YAML::Scanner::peek(*(YAML::Scanner **)a1);
    v7 = v6;
    v8 = *(_DWORD *)(v6 + 16);
    v17 = *(_OWORD *)v6;
    v18 = v8;
    if (*(char *)(v6 + 47) < 0)
    {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v6 + 24), *(_QWORD *)(v6 + 32));
    }
    else
    {
      v9 = *(_OWORD *)(v6 + 24);
      __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(v6 + 40);
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v9;
    }
    memset(&v20, 0, sizeof(v20));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v20, *(__int128 **)(v7 + 48), *(__int128 **)(v7 + 56), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v7 + 56) - *(_QWORD *)(v7 + 48)) >> 3));
    v21 = *(_DWORD *)(v7 + 72);
    if ((DWORD1(v17) & 0xFFFFFFFD) != 5)
    {
      v13 = __cxa_allocate_exception(0x38uLL);
      std::string::basic_string[abi:ne180100]<0>(&v16, "end of sequence not found");
      YAML::Exception::Exception((uint64_t)v13, (_DWORD *)&v17 + 2, &v16);
      *v13 = &off_1E793AF28;
    }
    YAML::Scanner::pop(*(YAML::Scanner **)a1);
    v10 = DWORD1(v17);
    if (DWORD1(v17) != 5)
    {
      v11 = *(YAML::Scanner **)a1;
      YAML::Scanner::EnsureTokensInQueue(*(YAML::Scanner **)a1);
      if (*((_QWORD *)v11 + 17) && (v12 = YAML::Scanner::peek(*(YAML::Scanner **)a1), (*(_DWORD *)(v12 + 4) | 2) == 7))
        (*(void (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)a2 + 32))(a2, v12 + 8, 0);
      else
        YAML::SingleDocParser::HandleNode(a1, a2);
    }
    *(_QWORD *)&v16 = &v20;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v16);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  while (v10 != 5);
  YAML::CollectionStack::PopCollectionType(*(_QWORD **)(a1 + 16), 2);
}

void sub_1BFBD13F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  void *v27;
  int v28;

  if (a21 < 0)
  {
    operator delete(__p);
    if ((v28 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v28)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v27);
  goto LABEL_6;
}

void YAML::SingleDocParser::HandleFlowSequence(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  YAML::Scanner *v5;
  YAML::Scanner *v6;
  unint64_t v7;
  int v8;
  _QWORD *exception;
  uint64_t *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  __int128 v21;
  uint64_t v22;
  int v23;

  YAML::Scanner::pop(*(YAML::Scanner **)a1);
  v4 = *(_QWORD **)(a1 + 16);
  LODWORD(v21) = 4;
  std::deque<YAML::CollectionType::value>::push_back(v4, &v21);
  while (1)
  {
    v5 = *(YAML::Scanner **)a1;
    YAML::Scanner::EnsureTokensInQueue(*(YAML::Scanner **)a1);
    if (!*((_QWORD *)v5 + 17))
    {
      exception = __cxa_allocate_exception(0x38uLL);
      v10 = (uint64_t *)a1;
      v11 = exception;
      v12 = *v10;
      v13 = *(_QWORD *)(v12 + 8);
      LODWORD(v12) = *(_DWORD *)(v12 + 16);
      v22 = v13;
      v23 = v12;
      std::string::basic_string[abi:ne180100]<0>(&v21, "end of sequence flow not found");
      YAML::Exception::Exception((uint64_t)v11, &v22, &v21);
      *v11 = &off_1E793AF28;
    }
    if (*(_DWORD *)(YAML::Scanner::peek(*(YAML::Scanner **)a1) + 4) == 10)
      break;
    YAML::SingleDocParser::HandleNode(a1, a2);
    v6 = *(YAML::Scanner **)a1;
    YAML::Scanner::EnsureTokensInQueue(*(YAML::Scanner **)a1);
    if (!*((_QWORD *)v6 + 17))
    {
      v14 = __cxa_allocate_exception(0x38uLL);
      v15 = (uint64_t *)a1;
      v16 = v14;
      v17 = *v15;
      v18 = *(_QWORD *)(v17 + 8);
      LODWORD(v17) = *(_DWORD *)(v17 + 16);
      v22 = v18;
      v23 = v17;
      std::string::basic_string[abi:ne180100]<0>(&v21, "end of sequence flow not found");
      YAML::Exception::Exception((uint64_t)v16, &v22, &v21);
      *v16 = &off_1E793AF28;
    }
    v7 = YAML::Scanner::peek(*(YAML::Scanner **)a1);
    v8 = *(_DWORD *)(v7 + 4);
    if (v8 != 10)
    {
      if (v8 != 13)
      {
        v19 = v7;
        v20 = __cxa_allocate_exception(0x38uLL);
        std::string::basic_string[abi:ne180100]<0>(&v21, "end of sequence flow not found");
        YAML::Exception::Exception((uint64_t)v20, (_DWORD *)(v19 + 8), &v21);
        *v20 = &off_1E793AF28;
      }
      YAML::Scanner::pop(*(YAML::Scanner **)a1);
    }
  }
  YAML::Scanner::pop(*(YAML::Scanner **)a1);
  YAML::CollectionStack::PopCollectionType(*(_QWORD **)(a1 + 16), 4);
}

void sub_1BFBD169C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
      goto LABEL_6;
  }
  else if (!v16)
  {
LABEL_6:
    _Unwind_Resume(exception_object);
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

void std::deque<YAML::CollectionType::value>::push_back(_QWORD *a1, _DWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  void *v28;
  void *v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  __int128 v35;
  void *v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  unint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  int64_t v73;
  uint64_t v74;
  unint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t i;
  _QWORD *v79;
  char *v80;
  _BYTE *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  char *v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  unint64_t v97;
  char *v98;
  uint64_t v99;
  char *v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  char *v106;
  __int128 v107;
  __int128 v108;
  uint64_t v109;
  __int128 v110;
  uint64_t v111;
  __int128 v112;

  v4 = (char *)a1[2];
  v5 = (char *)a1[1];
  v6 = v4 - v5;
  if (v4 == v5)
    v7 = 0;
  else
    v7 = ((v4 - v5) << 7) - 1;
  v9 = a1[4];
  v8 = a1[5];
  v10 = v8 + v9;
  if (v7 == v8 + v9)
  {
    if (v9 >= 0x400)
    {
      a1[4] = v9 - 1024;
      v13 = *(_QWORD *)v5;
      v11 = v5 + 8;
      v12 = v13;
      a1[1] = v11;
      if ((char *)a1[3] == v4)
      {
        v14 = (uint64_t)&v11[-*a1];
        if ((unint64_t)v11 <= *a1)
        {
          if (v4 == (char *)*a1)
            v42 = 1;
          else
            v42 = (uint64_t)&v4[-*a1] >> 2;
          v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<morphun::dialog::SemanticFeatureConceptBase *>>(v42);
          v45 = &v43[8 * (v42 >> 2)];
          v46 = (uint64_t *)a1[1];
          v4 = v45;
          v47 = a1[2] - (_QWORD)v46;
          if (v47)
          {
            v4 = &v45[v47 & 0xFFFFFFFFFFFFFFF8];
            v48 = 8 * (v47 >> 3);
            v49 = &v43[8 * (v42 >> 2)];
            do
            {
              v50 = *v46++;
              *(_QWORD *)v49 = v50;
              v49 += 8;
              v48 -= 8;
            }
            while (v48);
          }
          v51 = (char *)*a1;
          *a1 = v43;
          a1[1] = v45;
          a1[2] = v4;
          a1[3] = &v43[8 * v44];
          if (v51)
          {
            operator delete(v51);
            v4 = (char *)a1[2];
          }
        }
        else
        {
          v15 = v14 >> 3;
          v16 = v14 >> 3 < -1;
          v17 = (v14 >> 3) + 2;
          if (v16)
            v18 = v17;
          else
            v18 = v15 + 1;
          v19 = -(v18 >> 1);
          v20 = v18 >> 1;
          v21 = &v11[-8 * v20];
          v22 = v4 - v11;
          if (v4 == v11)
          {
            v23 = v4;
          }
          else
          {
            memmove(&v11[-8 * v20], v11, v4 - v11);
            v23 = (char *)a1[1];
          }
          v4 = &v21[v22];
          a1[1] = &v23[8 * v19];
          a1[2] = &v21[v22];
        }
      }
      *(_QWORD *)v4 = v12;
LABEL_82:
      a1[2] += 8;
LABEL_83:
      v5 = (char *)a1[1];
      v8 = a1[5];
      v10 = a1[4] + v8;
      goto LABEL_84;
    }
    v24 = v6 >> 3;
    v25 = (char *)a1[3];
    v26 = (char *)*a1;
    v27 = (uint64_t)&v25[-*a1];
    if (v6 >> 3 < (unint64_t)(v27 >> 3))
    {
      v28 = operator new(0x1000uLL);
      v29 = v28;
      if (v25 == v4)
      {
        if (v26 == v5)
        {
          if (v4 == v5)
            v52 = 1;
          else
            v52 = v27 >> 2;
          v53 = 2 * v52;
          v54 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<morphun::dialog::SemanticFeatureConceptBase *>>(v52);
          v5 = &v54[(v53 + 6) & 0xFFFFFFFFFFFFFFF8];
          v56 = (uint64_t *)a1[1];
          v57 = v5;
          v58 = a1[2] - (_QWORD)v56;
          if (v58)
          {
            v57 = &v5[v58 & 0xFFFFFFFFFFFFFFF8];
            v59 = 8 * (v58 >> 3);
            v60 = v5;
            do
            {
              v61 = *v56++;
              *(_QWORD *)v60 = v61;
              v60 += 8;
              v59 -= 8;
            }
            while (v59);
          }
          v62 = (char *)*a1;
          *a1 = v54;
          a1[1] = v5;
          a1[2] = v57;
          a1[3] = &v54[8 * v55];
          if (v62)
          {
            operator delete(v62);
            v5 = (char *)a1[1];
          }
        }
        *((_QWORD *)v5 - 1) = v29;
        v63 = (char *)a1[1];
        v64 = (char *)a1[2];
        a1[1] = v63 - 8;
        v65 = *((_QWORD *)v63 - 1);
        a1[1] = v63;
        if (v64 == (char *)a1[3])
        {
          v66 = (uint64_t)&v63[-*a1];
          if ((unint64_t)v63 <= *a1)
          {
            if (v64 == (char *)*a1)
              v97 = 1;
            else
              v97 = (uint64_t)&v64[-*a1] >> 2;
            v98 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<morphun::dialog::SemanticFeatureConceptBase *>>(v97);
            v100 = &v98[8 * (v97 >> 2)];
            v101 = (uint64_t *)a1[1];
            v64 = v100;
            v102 = a1[2] - (_QWORD)v101;
            if (v102)
            {
              v64 = &v100[v102 & 0xFFFFFFFFFFFFFFF8];
              v103 = 8 * (v102 >> 3);
              v104 = &v98[8 * (v97 >> 2)];
              do
              {
                v105 = *v101++;
                *(_QWORD *)v104 = v105;
                v104 += 8;
                v103 -= 8;
              }
              while (v103);
            }
            v106 = (char *)*a1;
            *a1 = v98;
            a1[1] = v100;
            a1[2] = v64;
            a1[3] = &v98[8 * v99];
            if (v106)
            {
              operator delete(v106);
              v64 = (char *)a1[2];
            }
          }
          else
          {
            v67 = v66 >> 3;
            v16 = v66 >> 3 < -1;
            v68 = (v66 >> 3) + 2;
            if (v16)
              v69 = v68;
            else
              v69 = v67 + 1;
            v70 = -(v69 >> 1);
            v71 = v69 >> 1;
            v72 = &v63[-8 * v71];
            v73 = v64 - v63;
            if (v64 != v63)
            {
              memmove(&v63[-8 * v71], v63, v64 - v63);
              v63 = (char *)a1[1];
            }
            v64 = &v72[v73];
            a1[1] = &v63[8 * v70];
            a1[2] = &v72[v73];
          }
        }
        *(_QWORD *)v64 = v65;
      }
      else
      {
        *(_QWORD *)v4 = v28;
      }
      goto LABEL_82;
    }
    if (v25 == v26)
      v30 = 1;
    else
      v30 = v27 >> 2;
    v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<morphun::dialog::SemanticFeatureConceptBase *>>(v30);
    v33 = v32;
    v34 = &v31[8 * v24];
    *(_QWORD *)&v35 = v31;
    *((_QWORD *)&v35 + 1) = v34;
    v110 = v35;
    v36 = operator new(0x1000uLL);
    *(_QWORD *)&v37 = v34;
    *((_QWORD *)&v37 + 1) = &v31[8 * v33];
    if (v24 == v33)
    {
      v38 = 8 * v24;
      *(_QWORD *)&v39 = v110;
      if (v6 >= 1)
      {
        v40 = v38 >> 3;
        if (v40 >= -1)
          v41 = v40 + 1;
        else
          v41 = v40 + 2;
        v34 -= 8 * (v41 >> 1);
        *(_QWORD *)&v37 = v34;
        *((_QWORD *)&v39 + 1) = v34;
        goto LABEL_56;
      }
      v74 = v38 >> 2;
      if (v4 == v5)
        v75 = 1;
      else
        v75 = v74;
      v76 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<morphun::dialog::SemanticFeatureConceptBase *>>(v75);
      v34 = &v76[8 * (v75 >> 2)];
      *(_QWORD *)&v39 = v76;
      *((_QWORD *)&v39 + 1) = v34;
      *(_QWORD *)&v37 = v34;
      *((_QWORD *)&v37 + 1) = &v76[8 * v77];
      if (!v31)
        goto LABEL_56;
      v107 = v37;
      v110 = v39;
      operator delete(v31);
      v37 = v107;
    }
    v39 = v110;
LABEL_56:
    *(_QWORD *)v34 = v36;
    *(_QWORD *)&v37 = v37 + 8;
    for (i = a1[2]; i != a1[1]; i -= 8)
    {
      v79 = (_QWORD *)*((_QWORD *)&v39 + 1);
      if (*((_QWORD *)&v39 + 1) == (_QWORD)v39)
      {
        v81 = (_BYTE *)v37;
        if ((unint64_t)v37 >= *((_QWORD *)&v37 + 1))
        {
          if (*((_QWORD *)&v37 + 1) == *((_QWORD *)&v39 + 1))
            v86 = 1;
          else
            v86 = (uint64_t)(*((_QWORD *)&v37 + 1) - *((_QWORD *)&v39 + 1)) >> 2;
          v87 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<morphun::dialog::SemanticFeatureConceptBase *>>(v86);
          v80 = &v87[(2 * v86 + 6) & 0xFFFFFFFFFFFFFFF8];
          v89 = v80;
          v90 = v81 - (_BYTE *)v79;
          if (v81 != (_BYTE *)v79)
          {
            v89 = &v80[v90 & 0xFFFFFFFFFFFFFFF8];
            v91 = 8 * (v90 >> 3);
            v92 = v80;
            v93 = v79;
            do
            {
              v94 = *v93++;
              *(_QWORD *)v92 = v94;
              v92 += 8;
              v91 -= 8;
            }
            while (v91);
          }
          *(_QWORD *)&v39 = v87;
          *((_QWORD *)&v39 + 1) = v80;
          *(_QWORD *)&v37 = v89;
          *((_QWORD *)&v37 + 1) = &v87[8 * v88];
          if (v79)
          {
            v108 = v37;
            v112 = v39;
            operator delete(v79);
            v37 = v108;
            v39 = v112;
          }
        }
        else
        {
          v82 = (uint64_t)(*((_QWORD *)&v37 + 1) - v37) >> 3;
          if (v82 >= -1)
            v83 = v82 + 1;
          else
            v83 = v82 + 2;
          v84 = v83 >> 1;
          v85 = v37 + 8 * (v83 >> 1);
          v80 = (char *)(v85 - (v37 - *((_QWORD *)&v39 + 1)));
          if ((_QWORD)v37 == *((_QWORD *)&v39 + 1))
          {
            v81 = (_BYTE *)*((_QWORD *)&v39 + 1);
          }
          else
          {
            v109 = *((_QWORD *)&v37 + 1);
            v111 = v39;
            memmove((void *)(v85 - (v37 - *((_QWORD *)&v39 + 1))), *((const void **)&v39 + 1), v37 - *((_QWORD *)&v39 + 1));
            *((_QWORD *)&v37 + 1) = v109;
            *(_QWORD *)&v39 = v111;
          }
          *((_QWORD *)&v39 + 1) = v80;
          *(_QWORD *)&v37 = &v81[8 * v84];
        }
      }
      else
      {
        v80 = (char *)*((_QWORD *)&v39 + 1);
      }
      v95 = *(_QWORD *)(i - 8);
      *((_QWORD *)v80 - 1) = v95;
      *((_QWORD *)&v39 + 1) -= 8;
    }
    v96 = (char *)*a1;
    *(_OWORD *)a1 = v39;
    *((_OWORD *)a1 + 1) = v37;
    if (v96)
      operator delete(v96);
    goto LABEL_83;
  }
LABEL_84:
  *(_DWORD *)(*(_QWORD *)&v5[(v10 >> 7) & 0x1FFFFFFFFFFFFF8] + 4 * (v10 & 0x3FF)) = *a2;
  a1[5] = v8 + 1;
}

void sub_1BFBD1C3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int128 a11)
{
  void *v11;

  operator delete(v11);
  if ((_QWORD)a11)
    operator delete((void *)a11);
  _Unwind_Resume(a1);
}

void YAML::CollectionStack::PopCollectionType(_QWORD *a1, int a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = a1[5];
  if (v3)
    v4 = *(_DWORD *)(*(_QWORD *)(a1[1] + (((unint64_t)(v3 + a1[4] - 1) >> 7) & 0x1FFFFFFFFFFFFF8))
                   + 4 * ((v3 + a1[4] - 1) & 0x3FF));
  else
    v4 = 0;
  if (v4 != a2)
    __assert_rtn("PopCollectionType", "collectionstack.h", 31, "type == GetCurCollectionType()");
  v6 = a1[1];
  v5 = a1[2];
  if (v5 == v6)
    v7 = 0;
  else
    v7 = ((v5 - v6) << 7) - 1;
  v8 = v3 - 1;
  a1[5] = v8;
  if ((unint64_t)(v7 - (v8 + a1[4])) >= 0x800)
  {
    operator delete(*(void **)(v5 - 8));
    a1[2] -= 8;
  }
}

void YAML::SingleDocParser::ParseTag(YAML::Scanner **a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *exception;
  std::string __p;
  __int128 v9;
  char v10;
  void *v11;
  char v12;

  v4 = YAML::Scanner::peek(*a1);
  v5 = *(unsigned __int8 *)(a2 + 23);
  if ((v5 & 0x80u) != 0)
    v5 = *(_QWORD *)(a2 + 8);
  if (v5)
  {
    v6 = v4;
    exception = __cxa_allocate_exception(0x38uLL);
    std::string::basic_string[abi:ne180100]<0>(&v9, "cannot assign multiple tags to the same node");
    YAML::Exception::Exception((uint64_t)exception, (_DWORD *)(v6 + 8), &v9);
    *exception = &off_1E793AF28;
  }
  YAML::Tag::Tag((uint64_t)&v9, v4);
  YAML::Tag::Translate((YAML::Tag *)&v9, a1[1], &__p);
  std::string::operator=((std::string *)a2, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  YAML::Scanner::pop(*a1);
  if (v12 < 0)
    operator delete(v11);
  if (v10 < 0)
    operator delete(*((void **)&v9 + 1));
}

void sub_1BFBD1E3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  int v21;

  if (a20 < 0)
  {
    operator delete(__p);
    if ((v21 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v21)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v20);
  goto LABEL_6;
}

void YAML::SingleDocParser::ParseAnchor(YAML::Scanner **a1, uint64_t *a2, std::string *a3)
{
  const std::string *v6;
  const std::string *v7;
  uint64_t v8;
  _QWORD *exception;
  __int128 v10;

  v6 = (const std::string *)YAML::Scanner::peek(*a1);
  v7 = v6;
  if (*a2)
  {
    exception = __cxa_allocate_exception(0x38uLL);
    std::string::basic_string[abi:ne180100]<0>(&v10, "cannot assign multiple anchors to the same node");
    YAML::Exception::Exception((uint64_t)exception, &v7->__r_.__value_.__r.__words[1], &v10);
    *exception = &off_1E793AF28;
  }
  v8 = (uint64_t)&v6[1];
  std::string::operator=(a3, v6 + 1);
  *a2 = YAML::SingleDocParser::RegisterAnchor((uint64_t)a1, v8);
  YAML::Scanner::pop(*a1);
}

void sub_1BFBD1F68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t YAML::SingleDocParser::RegisterAnchor(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v5;
  uint64_t **v6;
  uint64_t v7;
  uint64_t **v8;
  const void **v9;
  uint64_t *v10;
  std::string *v11;
  uint64_t v12;
  uint64_t *v13;

  v2 = *(unsigned __int8 *)(a2 + 23);
  if ((v2 & 0x80u) != 0)
    v2 = *(_QWORD *)(a2 + 8);
  if (v2)
  {
    v6 = (uint64_t **)(a1 + 32);
    v5 = *(uint64_t **)(a1 + 32);
    v7 = *(_QWORD *)(a1 + 48) + 1;
    *(_QWORD *)(a1 + 48) = v7;
    if (v5)
    {
      while (1)
      {
        while (1)
        {
          v8 = (uint64_t **)v5;
          v9 = (const void **)(v5 + 4);
          if (!std::less<std::string>::operator()[abi:ne180100](a1 + 40, (const void **)a2, (const void **)v5 + 4))
            break;
          v5 = *v8;
          v6 = v8;
          if (!*v8)
            goto LABEL_13;
        }
        if (!std::less<std::string>::operator()[abi:ne180100](a1 + 40, v9, (const void **)a2))
          break;
        v6 = v8 + 1;
        v5 = v8[1];
        if (!v5)
          goto LABEL_13;
      }
      v10 = *v6;
      if (*v6)
        goto LABEL_19;
    }
    else
    {
      v8 = (uint64_t **)(a1 + 32);
    }
LABEL_13:
    v10 = (uint64_t *)operator new(0x40uLL);
    v11 = (std::string *)(v10 + 4);
    if (*(char *)(a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)&v11->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
      v10[6] = *(_QWORD *)(a2 + 16);
    }
    v10[7] = 0;
    *v10 = 0;
    v10[1] = 0;
    v10[2] = (uint64_t)v8;
    *v6 = v10;
    v12 = **(_QWORD **)(a1 + 24);
    v13 = v10;
    if (v12)
    {
      *(_QWORD *)(a1 + 24) = v12;
      v13 = *v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 32), v13);
    ++*(_QWORD *)(a1 + 40);
LABEL_19:
    v10[7] = v7;
    return v7;
  }
  return 0;
}

void sub_1BFBD20EC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void YAML::SingleDocParser::HandleBlockMap(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  YAML::Scanner *v5;
  unint64_t v6;
  unint64_t v7;
  int v8;
  __int128 v9;
  YAML::Scanner *v10;
  char v11;
  _QWORD *exception;
  int v13;
  _QWORD *v14;
  __int128 v15;
  __int128 v16;
  int v17;
  std::string __p;
  std::string v19;
  int v20;

  YAML::Scanner::pop(*(YAML::Scanner **)a1);
  v4 = *(_QWORD **)(a1 + 16);
  LODWORD(v16) = 1;
  std::deque<YAML::CollectionType::value>::push_back(v4, &v16);
  do
  {
    while (1)
    {
      v5 = *(YAML::Scanner **)a1;
      YAML::Scanner::EnsureTokensInQueue(*(YAML::Scanner **)a1);
      if (!*((_QWORD *)v5 + 17))
      {
        exception = __cxa_allocate_exception(0x38uLL);
        v13 = *(_DWORD *)(*(_QWORD *)a1 + 16);
        *(_QWORD *)&v15 = *(_QWORD *)(*(_QWORD *)a1 + 8);
        DWORD2(v15) = v13;
        std::string::basic_string[abi:ne180100]<0>(&v16, "end of map not found");
        YAML::Exception::Exception((uint64_t)exception, &v15, &v16);
        *exception = &off_1E793AF28;
      }
      v6 = YAML::Scanner::peek(*(YAML::Scanner **)a1);
      v7 = v6;
      v8 = *(_DWORD *)(v6 + 16);
      v16 = *(_OWORD *)v6;
      v17 = v8;
      if (*(char *)(v6 + 47) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v6 + 24), *(_QWORD *)(v6 + 32));
      }
      else
      {
        v9 = *(_OWORD *)(v6 + 24);
        __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(v6 + 40);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v9;
      }
      memset(&v19, 0, sizeof(v19));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v19, *(__int128 **)(v7 + 48), *(__int128 **)(v7 + 56), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v7 + 56) - *(_QWORD *)(v7 + 48)) >> 3));
      v20 = *(_DWORD *)(v7 + 72);
      if (DWORD1(v16) == 6)
      {
        YAML::Scanner::pop(*(YAML::Scanner **)a1);
        v11 = 0;
      }
      else
      {
        if (DWORD1(v16) == 14)
        {
          YAML::Scanner::pop(*(YAML::Scanner **)a1);
          YAML::SingleDocParser::HandleNode(a1, a2);
        }
        else
        {
          if (DWORD1(v16) != 15)
          {
            v14 = __cxa_allocate_exception(0x38uLL);
            std::string::basic_string[abi:ne180100]<0>(&v15, "end of map not found");
            YAML::Exception::Exception((uint64_t)v14, (_DWORD *)&v16 + 2, &v15);
            *v14 = &off_1E793AF28;
          }
          (*(void (**)(uint64_t, char *, _QWORD))(*(_QWORD *)a2 + 32))(a2, (char *)&v16 + 8, 0);
        }
        v10 = *(YAML::Scanner **)a1;
        YAML::Scanner::EnsureTokensInQueue(*(YAML::Scanner **)a1);
        if (*((_QWORD *)v10 + 17) && *(_DWORD *)(YAML::Scanner::peek(*(YAML::Scanner **)a1) + 4) == 15)
        {
          YAML::Scanner::pop(*(YAML::Scanner **)a1);
          YAML::SingleDocParser::HandleNode(a1, a2);
        }
        else
        {
          (*(void (**)(uint64_t, char *, _QWORD))(*(_QWORD *)a2 + 32))(a2, (char *)&v16 + 8, 0);
        }
        v11 = 1;
      }
      *(_QWORD *)&v15 = &v19;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        break;
      if ((v11 & 1) == 0)
        goto LABEL_21;
    }
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  while ((v11 & 1) != 0);
LABEL_21:
  YAML::CollectionStack::PopCollectionType(*(_QWORD **)(a1 + 16), 1);
}

void sub_1BFBD23B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  void *v27;
  int v28;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v28 & 1) == 0)
    {
LABEL_6:
      YAML::Token::~Token(&a16);
      _Unwind_Resume(a1);
    }
  }
  else if (!v28)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v27);
  goto LABEL_6;
}

void YAML::SingleDocParser::HandleFlowMap(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  YAML::Scanner *v5;
  unint64_t v6;
  int v7;
  YAML::Scanner *v8;
  YAML::Scanner *v9;
  unint64_t v10;
  int v11;
  _QWORD *exception;
  int v13;
  _QWORD *v14;
  int v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  int v19;
  __int128 v20;
  uint64_t v21;
  int v22;

  YAML::Scanner::pop(*(YAML::Scanner **)a1);
  v4 = *(_QWORD **)(a1 + 16);
  LODWORD(v20) = 3;
  std::deque<YAML::CollectionType::value>::push_back(v4, &v20);
  while (1)
  {
    v5 = *(YAML::Scanner **)a1;
    YAML::Scanner::EnsureTokensInQueue(*(YAML::Scanner **)a1);
    if (!*((_QWORD *)v5 + 17))
    {
      exception = __cxa_allocate_exception(0x38uLL);
      v13 = *(_DWORD *)(*(_QWORD *)a1 + 16);
      v21 = *(_QWORD *)(*(_QWORD *)a1 + 8);
      v22 = v13;
      std::string::basic_string[abi:ne180100]<0>(&v20, "end of map flow not found");
      YAML::Exception::Exception((uint64_t)exception, &v21, &v20);
      *exception = &off_1E793AF28;
    }
    v6 = YAML::Scanner::peek(*(YAML::Scanner **)a1);
    v21 = *(_QWORD *)(v6 + 8);
    v22 = *(_DWORD *)(v6 + 16);
    v7 = *(_DWORD *)(v6 + 4);
    if (v7 == 14)
    {
      YAML::Scanner::pop(*(YAML::Scanner **)a1);
      YAML::SingleDocParser::HandleNode(a1, a2);
      goto LABEL_7;
    }
    if (v7 == 11)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD))(*(_QWORD *)a2 + 32))(a2, &v21, 0);
LABEL_7:
    v8 = *(YAML::Scanner **)a1;
    YAML::Scanner::EnsureTokensInQueue(*(YAML::Scanner **)a1);
    if (*((_QWORD *)v8 + 17) && *(_DWORD *)(YAML::Scanner::peek(*(YAML::Scanner **)a1) + 4) == 15)
    {
      YAML::Scanner::pop(*(YAML::Scanner **)a1);
      YAML::SingleDocParser::HandleNode(a1, a2);
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t *, _QWORD))(*(_QWORD *)a2 + 32))(a2, &v21, 0);
    }
    v9 = *(YAML::Scanner **)a1;
    YAML::Scanner::EnsureTokensInQueue(*(YAML::Scanner **)a1);
    if (!*((_QWORD *)v9 + 17))
    {
      v14 = __cxa_allocate_exception(0x38uLL);
      v15 = *(_DWORD *)(*(_QWORD *)a1 + 16);
      v18 = *(_QWORD *)(*(_QWORD *)a1 + 8);
      v19 = v15;
      std::string::basic_string[abi:ne180100]<0>(&v20, "end of map flow not found");
      YAML::Exception::Exception((uint64_t)v14, &v18, &v20);
      *v14 = &off_1E793AF28;
    }
    v10 = YAML::Scanner::peek(*(YAML::Scanner **)a1);
    v11 = *(_DWORD *)(v10 + 4);
    if (v11 != 11)
    {
      if (v11 != 13)
      {
        v16 = v10;
        v17 = __cxa_allocate_exception(0x38uLL);
        std::string::basic_string[abi:ne180100]<0>(&v20, "end of map flow not found");
        YAML::Exception::Exception((uint64_t)v17, (_DWORD *)(v16 + 8), &v20);
        *v17 = &off_1E793AF28;
      }
      YAML::Scanner::pop(*(YAML::Scanner **)a1);
    }
  }
  YAML::Scanner::pop(*(YAML::Scanner **)a1);
  YAML::CollectionStack::PopCollectionType(*(_QWORD **)(a1 + 16), 3);
}

void sub_1BFBD26E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;
  char v18;

  if (a17 < 0)
    operator delete(__p);
  if ((v18 & 1) != 0)
    __cxa_free_exception(v17);
  _Unwind_Resume(exception_object);
}

void YAML::SingleDocParser::HandleCompactMap(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  unint64_t v5;
  YAML::Scanner *v6;
  uint64_t v7;
  int v8;

  v4 = *(_QWORD **)(a1 + 16);
  LODWORD(v7) = 5;
  std::deque<YAML::CollectionType::value>::push_back(v4, &v7);
  v5 = YAML::Scanner::peek(*(YAML::Scanner **)a1);
  v7 = *(_QWORD *)(v5 + 8);
  v8 = *(_DWORD *)(v5 + 16);
  YAML::Scanner::pop(*(YAML::Scanner **)a1);
  YAML::SingleDocParser::HandleNode(a1, a2);
  v6 = *(YAML::Scanner **)a1;
  YAML::Scanner::EnsureTokensInQueue(*(YAML::Scanner **)a1);
  if (*((_QWORD *)v6 + 17) && *(_DWORD *)(YAML::Scanner::peek(*(YAML::Scanner **)a1) + 4) == 15)
  {
    YAML::Scanner::pop(*(YAML::Scanner **)a1);
    YAML::SingleDocParser::HandleNode(a1, a2);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t *, _QWORD))(*(_QWORD *)a2 + 32))(a2, &v7, 0);
  }
  YAML::CollectionStack::PopCollectionType(*(_QWORD **)(a1 + 16), 5);
}

void YAML::SingleDocParser::HandleCompactMapWithNoKey(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  unint64_t v5;
  int v6;

  v4 = *(_QWORD **)(a1 + 16);
  v6 = 5;
  std::deque<YAML::CollectionType::value>::push_back(v4, &v6);
  v5 = YAML::Scanner::peek(*(YAML::Scanner **)a1);
  (*(void (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)a2 + 32))(a2, v5 + 8, 0);
  YAML::Scanner::pop(*(YAML::Scanner **)a1);
  YAML::SingleDocParser::HandleNode(a1, a2);
  YAML::CollectionStack::PopCollectionType(*(_QWORD **)(a1 + 16), 5);
}

id DEVersion()
{
  void *v0;
  void **v1;
  void *v2;
  void *__p[2];
  char v5;

  v0 = (void *)MEMORY[0x1E0CB3940];
  std::string::basic_string[abi:ne180100]<0>(__p, "3400.54.1");
  if (v5 >= 0)
    v1 = __p;
  else
    v1 = (void **)__p[0];
  objc_msgSend(v0, "stringWithUTF8String:", v1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (v5 < 0)
    operator delete(__p[0]);
  return v2;
}

void sub_1BFBD28F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL DEHasFeature(void *a1)
{
  id v1;
  id v2;
  char **v3;
  void *v5[2];
  char v6;
  uint64_t v7;
  char *v8;
  void *__p[2];
  char v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  std::string::basic_string[abi:ne180100]<0>(__p, "BINARY_FORMAT");
  std::set<std::string>::set[abi:ne180100](&v7, (const void **)__p, 1);
  if (v10 < 0)
    operator delete(__p[0]);
  v2 = objc_retainAutorelease(v1);
  std::string::basic_string[abi:ne180100]<0>(v5, (char *)objc_msgSend(v2, "UTF8String"));
  siri::dialogengine::StringToUpper((uint64_t)v5, (uint64_t)__p);
  if (v6 < 0)
    operator delete(v5[0]);
  v3 = (char **)std::__tree<std::string>::find<std::string>((uint64_t)&v7, (const void **)__p);
  if (v10 < 0)
    operator delete(__p[0]);
  std::__tree<std::string>::destroy((uint64_t)&v7, v8);

  return &v8 != v3;
}

void sub_1BFBD2A1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, char *a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  void *v23;

  if (a23 < 0)
    operator delete(__p);
  std::__tree<std::string>::destroy((uint64_t)&a15, a16);

  _Unwind_Resume(a1);
}

id DEHighestVersionForOSTrain(void *a1)
{
  id v1;
  std::string *v2;
  void *v3;
  std::vector<std::pair<std::string, std::string>> v5;
  void *__p[2];
  char v7;
  std::string v8;
  std::vector<std::pair<std::string, std::string>> *v9;

  v1 = objc_retainAutorelease(a1);
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)objc_msgSend(v1, "UTF8String"));
  memset(&v5, 0, sizeof(v5));
  siri::dialogengine::GetCatVersionForOS(&v5, (uint64_t)__p, &v8);
  v9 = &v5;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v9);
  if (v7 < 0)
    operator delete(__p[0]);
  if ((v8.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v2 = &v8;
  else
    v2 = (std::string *)v8.__r_.__value_.__r.__words[0];
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8.__r_.__value_.__l.__data_);

  return v3;
}

void sub_1BFBD2B40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  void *v23;

  if (a23 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void siri::dialogengine::VariableString::~VariableString(void **this)
{
  *this = &off_1E7936230;
  siri::dialogengine::SpeakableString::~SpeakableString(this + 9);
  siri::dialogengine::Variable::~Variable(this);
}

{
  *this = &off_1E7936230;
  siri::dialogengine::SpeakableString::~SpeakableString(this + 9);
  siri::dialogengine::Variable::~Variable(this);
  JUMPOUT(0x1C3B8D890);
}

uint64_t siri::dialogengine::VariableString::Accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, a1);
}

void siri::dialogengine::VariableString::GetSemanticConcept(siri::dialogengine::VariableString *this@<X0>, siri::dialogengine::Context *a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t Parameter;
  uint64_t v16;
  __int128 v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::string __p;
  uint64_t v22;
  std::__shared_weak_count *v23;

  if (!a2)
  {
    v22 = 0;
    v23 = 0;
    goto LABEL_26;
  }
  v5 = *((_QWORD *)a2 + 63);
  v6 = (std::__shared_weak_count *)*((_QWORD *)a2 + 64);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  if (!v5)
  {
    v22 = 0;
    v23 = 0;
    if (!v6)
      goto LABEL_17;
    goto LABEL_13;
  }
  v9 = (std::__shared_weak_count *)*((_QWORD *)a2 + 64);
  v22 = *((_QWORD *)a2 + 63);
  v23 = v9;
  if (v9)
  {
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  if (v6)
  {
LABEL_13:
    v12 = (unint64_t *)&v6->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
LABEL_17:
  v14 = v22;
  if (!v22)
    goto LABEL_26;
  if (*((char *)this + 31) < 0)
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)this + 1), *((_QWORD *)this + 2));
  else
    __p = *(std::string *)((char *)this + 8);
  Parameter = siri::dialogengine::File::GetParameter(v14, (unsigned __int8 **)&__p);
  v16 = Parameter;
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (Parameter)
      goto LABEL_23;
LABEL_26:
    std::string::basic_string[abi:ne180100]<0>(a3, "");
    goto LABEL_27;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (!v16)
    goto LABEL_26;
LABEL_23:
  if (*(char *)(v16 + 183) < 0)
  {
    std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)(v16 + 160), *(_QWORD *)(v16 + 168));
  }
  else
  {
    v17 = *(_OWORD *)(v16 + 160);
    a3->__r_.__value_.__r.__words[2] = *(_QWORD *)(v16 + 176);
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v17;
  }
LABEL_27:
  v18 = v23;
  if (v23)
  {
    v19 = (unint64_t *)&v23->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
}

void sub_1BFBD2DA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

BOOL siri::dialogengine::VariableString::IsEmpty(siri::dialogengine::VariableString *this)
{
  uint64_t v2;

  if (*((char *)this + 119) < 0)
  {
    if (*((_QWORD *)this + 13))
      return 0;
  }
  else if (*((_BYTE *)this + 119))
  {
    return 0;
  }
  if (*((char *)this + 95) < 0)
    v2 = *((_QWORD *)this + 10);
  else
    v2 = *((unsigned __int8 *)this + 95);
  return v2 == 0;
}

std::string *siri::dialogengine::VariableString::ToString@<X0>(siri::dialogengine::VariableString *this@<X0>, std::string *a2@<X8>)
{
  return siri::dialogengine::SpeakableString::SpeakableString(a2, (siri::dialogengine::VariableString *)((char *)this + 72));
}

uint64_t siri::dialogengine::VariableString::ToString(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

siri::dialogengine::VariableString *siri::dialogengine::VariableString::VariableString(siri::dialogengine::VariableString *this)
{
  std::string __p;
  std::string v4;

  std::string::basic_string[abi:ne180100]<0>(&v4, "");
  std::string::basic_string[abi:ne180100]<0>(&__p, siri::dialogengine::TYPE_STRING[0]);
  siri::dialogengine::Variable::Variable((uint64_t)this, &v4, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v4.__r_.__value_.__l.__data_);
  *(_QWORD *)this = &off_1E7936230;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *((_QWORD *)this + 29) = 0;
  return this;
}

void sub_1BFBD2EE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

std::string *siri::dialogengine::VariableString::VariableString(std::string *a1, const std::string *a2, const siri::dialogengine::SpeakableString *a3)
{
  std::string __p;

  std::string::basic_string[abi:ne180100]<0>(&__p, siri::dialogengine::TYPE_STRING[0]);
  siri::dialogengine::Variable::Variable((uint64_t)a1, a2, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E7936230;
  siri::dialogengine::SpeakableString::SpeakableString(a1 + 3, a3);
  return a1;
}

void sub_1BFBD2FA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void **v15;

  siri::dialogengine::Variable::~Variable(v15);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::VariableString::VariableString(uint64_t a1, const std::string *a2, uint64_t a3)
{
  std::string __p;

  std::string::basic_string[abi:ne180100]<0>(&__p, siri::dialogengine::TYPE_STRING[0]);
  siri::dialogengine::Variable::Variable(a1, a2, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *(_QWORD *)a1 = &off_1E7936230;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_QWORD *)(a1 + 232) = 0;
  siri::dialogengine::SpeakableString::SetString(a1 + 72, a3);
  return a1;
}

void sub_1BFBD3084(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void **v15;
  void **v16;

  siri::dialogengine::SpeakableString::~SpeakableString(v16);
  siri::dialogengine::Variable::~Variable(v15);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::VariableString::SetValue(uint64_t a1, uint64_t a2)
{
  return siri::dialogengine::SpeakableString::SetString(a1 + 72, a2);
}

void siri::dialogengine::VariableString::VariableString(uint64_t a1, const std::string *a2, const std::string *a3, const std::string *a4)
{
  std::string __p;

  std::string::basic_string[abi:ne180100]<0>(&__p, siri::dialogengine::TYPE_STRING[0]);
  siri::dialogengine::Variable::Variable(a1, a2, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *(_QWORD *)a1 = &off_1E7936230;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_QWORD *)(a1 + 232) = 0;
  siri::dialogengine::SpeakableString::SetString((std::string *)(a1 + 72), a3, a4);
}

uint64_t sub_1BFBD3168()
{
  uint64_t v0;

  return v0;
}

void sub_1BFBD3180(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void **v15;
  void **v16;

  siri::dialogengine::SpeakableString::~SpeakableString(v16);
  siri::dialogengine::Variable::~Variable(v15);
  _Unwind_Resume(a1);
}

void siri::dialogengine::VariableString::SetValue(std::string *a1, const std::string *a2, const std::string *a3)
{
  siri::dialogengine::SpeakableString::SetString(a1 + 3, a2, a3);
}

void siri::dialogengine::VariableString::GetValue(uint64_t a1@<X0>, int a2@<W1>, std::string *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a1 + 72;
  v4 = 96;
  if (a2 == 1)
    v4 = 72;
  else
    v3 = a1 + 96;
  if (*(char *)(v3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)(a1 + v4), *(_QWORD *)(v3 + 8));
  }
  else
  {
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)v3;
    a3->__r_.__value_.__r.__words[2] = *(_QWORD *)(v3 + 16);
  }
}

_QWORD *siri::dialogengine::ExecutePatternBase::SetPatternFile(uint64_t a1, uint64_t *a2)
{
  return std::shared_ptr<siri::dialogengine::PatternSchemaUsage>::operator=[abi:ne180100]((_QWORD *)(a1 + 8), *a2, a2[1]);
}

uint64_t siri::dialogengine::ExecutePatternBase::GetPatternFile@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(this + 16);
  *a2 = *(_QWORD *)(this + 8);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

_QWORD *siri::dialogengine::ExecutePatternBase::SetGlobalParameters(uint64_t a1, uint64_t *a2)
{
  return std::shared_ptr<siri::dialogengine::PatternSchemaUsage>::operator=[abi:ne180100]((_QWORD *)(a1 + 24), *a2, a2[1]);
}

uint64_t siri::dialogengine::ExecutePatternBase::GetGlobalParameters@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(this + 32);
  *a2 = *(_QWORD *)(this + 24);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

_QWORD *siri::dialogengine::ExecutePatternBase::SetParameters(uint64_t a1, uint64_t *a2)
{
  return std::shared_ptr<siri::dialogengine::PatternSchemaUsage>::operator=[abi:ne180100]((_QWORD *)(a1 + 40), *a2, a2[1]);
}

void siri::dialogengine::ExecutePatternBase::AddParameter(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8[2];

  if (*a2)
  {
    v2 = *(_QWORD *)(a1 + 40);
    v3 = (std::__shared_weak_count *)a2[1];
    v8[0] = *a2;
    v8[1] = (uint64_t)v3;
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldxr(p_shared_owners);
      while (__stxr(v5 + 1, p_shared_owners));
    }
    siri::dialogengine::VariableObject::AddProperty(v2, v8);
    if (v3)
    {
      v6 = (unint64_t *)&v3->__shared_owners_;
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
  }
}

void sub_1BFBD3314(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::ExecutePatternBase::GetParameters@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(this + 48);
  *a2 = *(_QWORD *)(this + 40);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

void siri::dialogengine::ExecutePatternBase::RemoveParameter(uint64_t a1, const void **a2)
{
  siri::dialogengine::VariableObject::RemoveProperty(*(_QWORD *)(a1 + 40), a2);
}

uint64_t siri::dialogengine::ExecutePatternBase::GetParameter@<X0>(uint64_t a1@<X0>, const void **a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v4 = *(_QWORD *)(a1 + 40);
  result = std::__tree<std::string>::find<std::string>(v4 + 72, a2);
  if (v4 + 80 == result)
  {
    *a3 = 0;
    a3[1] = 0;
  }
  else
  {
    v6 = *(_QWORD *)(result + 64);
    *a3 = *(_QWORD *)(result + 56);
    a3[1] = v6;
    if (v6)
    {
      v7 = (unint64_t *)(v6 + 8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
  }
  return result;
}

void siri::dialogengine::ExecutePatternBase::GetArrayParameter(uint64_t a1@<X0>, const void **a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const void *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;

  v4 = *(_QWORD *)(a1 + 40);
  v5 = std::__tree<std::string>::find<std::string>(v4 + 72, a2);
  if (v4 + 80 == v5)
  {
    *a3 = 0;
    a3[1] = 0;
    return;
  }
  v6 = v5;
  v7 = *(const void **)(v5 + 56);
  v8 = *(std::__shared_weak_count **)(v6 + 64);
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  if (v7
  {
    *a3 = v11;
    a3[1] = v8;
    if (!v8)
      return;
    v12 = (unint64_t *)&v8->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    if (!v8)
      return;
  }
  v14 = (unint64_t *)&v8->__shared_owners_;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
}

double siri::dialogengine::ExecutePatternBase::GetNumberParameter(uint64_t a1, const void **a2, double a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const void *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  double *v11;
  double *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;

  v4 = *(_QWORD *)(a1 + 40);
  v5 = std::__tree<std::string>::find<std::string>(v4 + 72, a2);
  if (v4 + 80 == v5)
    return a3;
  v6 = v5;
  v7 = *(const void **)(v5 + 56);
  v8 = *(std::__shared_weak_count **)(v6 + 64);
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  if (v7
  {
    v12 = v11;
    if (!v8)
    {
      v15 = 0;
      goto LABEL_21;
    }
    v13 = (unint64_t *)&v8->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    v15 = v8;
  }
  else
  {
    if (!v8)
      return a3;
    v15 = 0;
    v12 = 0;
  }
  v16 = (unint64_t *)&v8->__shared_owners_;
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 - 1, v16));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  if (v12)
  {
LABEL_21:
    a3 = v12[9];
    if (!v15)
      return a3;
    goto LABEL_22;
  }
  if (!v15)
    return a3;
LABEL_22:
  v18 = (unint64_t *)&v15->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  return a3;
}

void siri::dialogengine::ExecutePatternBase::GetStringParameter(uint64_t a1@<X0>, const void **a2@<X1>, char *a3@<X2>, std::string *a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const void *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  char *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  std::string::size_type *v18;
  __int128 v19;
  unint64_t *v20;
  unint64_t v21;
  char *v22;
  std::__shared_weak_count *v23;

  v6 = *(_QWORD *)(a1 + 40);
  v7 = std::__tree<std::string>::find<std::string>(v6 + 72, a2);
  if (v6 + 80 == v7)
  {
    v23 = 0;
    goto LABEL_21;
  }
  v8 = v7;
  v9 = *(const void **)(v7 + 56);
  v10 = *(std::__shared_weak_count **)(v8 + 64);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  if (!v9
  {
    v22 = 0;
    v23 = 0;
    if (v10)
      goto LABEL_12;
LABEL_21:
    if ((a3[23] & 0x80000000) == 0)
      goto LABEL_22;
    v18 = (std::string::size_type *)(a3 + 8);
    goto LABEL_24;
  }
  v22 = v13;
  v23 = v10;
  if (!v10)
    goto LABEL_19;
  v14 = (unint64_t *)&v10->__shared_owners_;
  do
    v15 = __ldxr(v14);
  while (__stxr(v15 + 1, v14));
LABEL_12:
  v16 = (unint64_t *)&v10->__shared_owners_;
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 - 1, v16));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  v13 = v22;
  if (!v22)
    goto LABEL_21;
LABEL_19:
  a3 = v13 + 72;
  if ((v13[95] & 0x80000000) == 0)
  {
LABEL_22:
    v19 = *(_OWORD *)a3;
    a4->__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&a4->__r_.__value_.__l.__data_ = v19;
    goto LABEL_25;
  }
  v18 = (std::string::size_type *)(v13 + 80);
LABEL_24:
  std::string::__init_copy_ctor_external(a4, *(const std::string::value_type **)a3, *v18);
LABEL_25:
  if (v23)
  {
    v20 = (unint64_t *)&v23->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
}

void sub_1BFBD3754(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL siri::dialogengine::ExecutePatternBase::GetBooleanParameter(uint64_t a1, const void **a2, _BOOL8 a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const void *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;

  v4 = *(_QWORD *)(a1 + 40);
  v5 = std::__tree<std::string>::find<std::string>(v4 + 72, a2);
  if (v4 + 80 == v5)
    return a3;
  v6 = v5;
  v7 = *(const void **)(v5 + 56);
  v8 = *(std::__shared_weak_count **)(v6 + 64);
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  if (v7
  {
    v12 = v11;
    if (!v8)
    {
      v15 = 0;
      goto LABEL_21;
    }
    v13 = (unint64_t *)&v8->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    v15 = v8;
  }
  else
  {
    if (!v8)
      return a3;
    v15 = 0;
    v12 = 0;
  }
  v16 = (unint64_t *)&v8->__shared_owners_;
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 - 1, v16));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  if (v12)
  {
LABEL_21:
    a3 = v12[66] != 0;
    if (!v15)
      return a3;
    goto LABEL_22;
  }
  if (!v15)
    return a3;
LABEL_22:
  v18 = (unint64_t *)&v15->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  return a3;
}

void siri::dialogengine::ExecutePatternBase::GetNestedInstance(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::string __p;
  uint64_t v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;

  v3 = a1;
  siri::dialogengine::ParsePatternXmlFile((__int128 **)(a1 + 80), a2, (uint64_t)&v23);
  v5 = v23;
  if (v23)
  {
    if (*(char *)(v23 + 135) < 0)
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v23 + 112), *(_QWORD *)(v23 + 120));
    else
      __p = *(std::string *)(v23 + 112);
    siri::dialogengine::PatternFactory::Create((uint64_t)&__p, (uint64_t)&v21);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v6 = v21;
    if (v21)
    {
      v7 = v24;
      if (v24)
      {
        p_shared_owners = (unint64_t *)&v24->__shared_owners_;
        do
          v9 = __ldxr(p_shared_owners);
        while (__stxr(v9 + 1, p_shared_owners));
        std::shared_ptr<siri::dialogengine::PatternSchemaUsage>::operator=[abi:ne180100]((_QWORD *)(v6 + 8), v5, (uint64_t)v7);
        v10 = (unint64_t *)&v7->__shared_owners_;
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      else
      {
        std::shared_ptr<siri::dialogengine::PatternSchemaUsage>::operator=[abi:ne180100]((_QWORD *)(v21 + 8), v5, 0);
      }
      v15 = v21;
      std::shared_ptr<siri::dialogengine::PatternSchemaUsage>::operator=[abi:ne180100]((_QWORD *)(v21 + 24), *(_QWORD *)(v3 + 24), *(_QWORD *)(v3 + 32));
      std::shared_ptr<siri::dialogengine::PatternSchemaUsage>::operator=[abi:ne180100]((_QWORD *)(v15 + 40), *(_QWORD *)(v3 + 40), *(_QWORD *)(v3 + 48));
      if (v15 != v3)
      {
        std::vector<siri::dialogengine::UpdatableDir>::__assign_with_size[abi:ne180100]<siri::dialogengine::UpdatableDir*,siri::dialogengine::UpdatableDir*>(v15 + 80, *(std::string **)(v3 + 80), *(std::string **)(v3 + 88), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v3 + 88) - *(_QWORD *)(v3 + 80)) >> 5));
        v3 = v15;
      }
      v16 = v22;
      *a3 = v3;
      a3[1] = v16;
    }
    else
    {
      *a3 = 0;
      a3[1] = 0;
      v12 = v22;
      if (v22)
      {
        v13 = (unint64_t *)&v22->__shared_owners_;
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 - 1, v13));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
    }
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
  }
  v17 = v24;
  if (v24)
  {
    v18 = (unint64_t *)&v24->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
}

void sub_1BFBD3A70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, char a18)
{
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void siri::dialogengine::ExecutePatternBase::SetTemplateDirs(uint64_t a1, std::string **a2)
{
  uint64_t v2;

  v2 = a1 + 80;
  if ((std::string **)v2 != a2)
    std::vector<siri::dialogengine::UpdatableDir>::__assign_with_size[abi:ne180100]<siri::dialogengine::UpdatableDir*,siri::dialogengine::UpdatableDir*>(v2, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 5));
}

uint64_t siri::dialogengine::ExecutePatternBase::ShouldExecuteSashGroup(siri::dialogengine **this, uint64_t a2, siri::dialogengine::VariableObject *a3)
{
  _BOOL8 BooleanParameter;
  uint64_t v5;
  char *v6;
  const char *v7;
  void **v8;
  void *__p[2];
  char v11;

  if ((siri::dialogengine::DeviceIsWatch(this[5], this[3], a3) & 1) == 0)
  {
    v5 = 1;
    goto LABEL_6;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "executeSashGroupOnWatch");
  BooleanParameter = siri::dialogengine::ExecutePatternBase::GetBooleanParameter((uint64_t)this, (const void **)__p, 0);
  v5 = BooleanParameter;
  if ((v11 & 0x80000000) == 0)
  {
    if (!BooleanParameter)
      goto LABEL_8;
LABEL_6:
    v6 = "true";
    goto LABEL_9;
  }
  operator delete(__p[0]);
  if ((_DWORD)v5)
    goto LABEL_6;
LABEL_8:
  v6 = "false";
LABEL_9:
  std::string::basic_string[abi:ne180100]<0>(__p, v6);
  if (v11 >= 0)
    v8 = __p;
  else
    v8 = (void **)__p[0];
  siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Should execute 'Sash' group: %s", v7, v8);
  if (v11 < 0)
    operator delete(__p[0]);
  return v5;
}

void sub_1BFBD3BA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::ExecutePatternBase::AddGroup(_QWORD *a1, uint64_t a2)
{
  char **v2;
  char *v3[2];
  uint64_t v4[2];

  v4[0] = 0;
  v4[1] = 0;
  v3[0] = 0;
  v3[1] = 0;
  v2 = v3;
  siri::dialogengine::ExecutePatternBase::AddGroup(a1, a2, v4, &v2);
  std::__tree<std::string>::destroy(v3[0]);
}

void sub_1BFBD3C10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, char *a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::__tree<std::string>::destroy(a4);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void siri::dialogengine::ExecutePatternBase::AddGroup(_QWORD *a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  _OWORD *v15;
  const void *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::string::size_type size;
  unint64_t v21;
  unint64_t v22;
  const char *v23;
  unint64_t v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  std::string *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  std::string::size_type v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  std::string *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  std::string v56;
  unint64_t v57;
  _QWORD *v58;

  v8 = a1[1];
  v9 = std::__tree<std::string>::find<std::string>(v8 + 208, (const void **)a2);
  if (v8 + 216 == v9)
  {
    v54 = 0;
    v55 = 0;
LABEL_9:
    if (*(char *)(a2 + 23) >= 0)
      v16 = (const void *)a2;
    else
      v16 = *(const void **)a2;
    siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"Pattern instance does not contain group '%s'; Ignoring it",
      v10,
      v16);
    goto LABEL_13;
  }
  v11 = *(_QWORD *)(v9 + 56);
  v12 = *(std::__shared_weak_count **)(v9 + 64);
  v54 = v11;
  v55 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  if (!v11)
    goto LABEL_9;
  v15 = (_OWORD *)(v11 + 136);
  if (*(char *)(v11 + 159) < 0)
  {
    std::string::__init_copy_ctor_external(&v56, *(const std::string::value_type **)(v11 + 136), *(_QWORD *)(v11 + 144));
  }
  else
  {
    *(_OWORD *)&v56.__r_.__value_.__l.__data_ = *v15;
    v56.__r_.__value_.__r.__words[2] = *(_QWORD *)(v11 + 152);
  }
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
  {
    size = v56.__r_.__value_.__l.__size_;
    operator delete(v56.__r_.__value_.__l.__data_);
    if (size)
      goto LABEL_22;
  }
  else if (*((_BYTE *)&v56.__r_.__value_.__s + 23))
  {
LABEL_22:
    if (*(char *)(v11 + 159) < 0)
    {
      std::string::__init_copy_ctor_external(&v56, *(const std::string::value_type **)(v11 + 136), *(_QWORD *)(v11 + 144));
    }
    else
    {
      *(_OWORD *)&v56.__r_.__value_.__l.__data_ = *v15;
      v56.__r_.__value_.__r.__words[2] = *(_QWORD *)(v11 + 152);
    }
    siri::dialogengine::ExecutePatternBase::GetNestedInstance((uint64_t)a1, (uint64_t)&v56, &v52);
    if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v56.__r_.__value_.__l.__data_);
    if (v52)
    {
      (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v52 + 16))(&v50);
      v26 = v50;
      v27 = v51;
      if (v50 != v51)
      {
        v28 = a1 + 7;
        do
        {
          v29 = *(_QWORD *)v26;
          if (*(char *)(*(_QWORD *)v26 + 87) < 0)
            std::string::__init_copy_ctor_external(&v56, *(const std::string::value_type **)(v29 + 64), *(_QWORD *)(v29 + 72));
          else
            v56 = *(std::string *)(v29 + 64);
          if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v30 = &v56;
          else
            v30 = (std::string *)v56.__r_.__value_.__r.__words[0];
          siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"Added nested group: %s", v25, v30);
          if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v56.__r_.__value_.__l.__data_);
          v32 = a1[8];
          v31 = a1[9];
          if (v32 >= v31)
          {
            v34 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v32 - *v28) >> 3);
            v35 = v34 + 1;
            if ((unint64_t)(v34 + 1) > 0x492492492492492)
              std::vector<BOOL>::__throw_length_error[abi:ne180100]();
            v36 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v31 - *v28) >> 3);
            if (2 * v36 > v35)
              v35 = 2 * v36;
            if (v36 >= 0x249249249249249)
              v37 = 0x492492492492492;
            else
              v37 = v35;
            v58 = a1 + 9;
            if (v37)
              v37 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<siri::dialogengine::SemanticFeatureConstraint>>(v37);
            else
              v38 = 0;
            v39 = v37 + 56 * v34;
            v56.__r_.__value_.__r.__words[0] = v37;
            v56.__r_.__value_.__l.__size_ = v39;
            v57 = v37 + 56 * v38;
            std::allocator<siri::dialogengine::ExecutePatternBase::Stage>::construct[abi:ne180100]<siri::dialogengine::ExecutePatternBase::Stage,siri::dialogengine::ExecutePatternBase::Stage>(v39, v26);
            v56.__r_.__value_.__r.__words[2] = v39 + 56;
            std::vector<siri::dialogengine::ExecutePatternBase::Stage>::__swap_out_circular_buffer(a1 + 7, &v56);
            v33 = a1[8];
            std::__split_buffer<siri::dialogengine::ExecutePatternBase::Stage>::~__split_buffer((uint64_t)&v56);
          }
          else
          {
            std::allocator<siri::dialogengine::ExecutePatternBase::Stage>::construct[abi:ne180100]<siri::dialogengine::ExecutePatternBase::Stage,siri::dialogengine::ExecutePatternBase::Stage>(a1[8], v26);
            v33 = v32 + 56;
          }
          a1[8] = v33;
          v26 += 56;
        }
        while (v26 != v27);
      }
      v56.__r_.__value_.__r.__words[0] = (std::string::size_type)&v50;
      std::vector<siri::dialogengine::ExecutePatternBase::Stage>::__destroy_vector::operator()[abi:ne180100]((void ***)&v56);
    }
    v40 = v53;
    if (v53)
    {
      v41 = (unint64_t *)&v53->__shared_owners_;
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
    }
    goto LABEL_13;
  }
  v21 = a1[9];
  v22 = a1[8];
  if (v22 >= v21)
  {
    v43 = a1[7];
    v44 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v22 - v43) >> 3);
    if ((unint64_t)(v44 + 1) > 0x492492492492492)
      std::vector<BOOL>::__throw_length_error[abi:ne180100]();
    v45 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v21 - v43) >> 3);
    v46 = 2 * v45;
    if (2 * v45 <= v44 + 1)
      v46 = v44 + 1;
    if (v45 >= 0x249249249249249)
      v47 = 0x492492492492492;
    else
      v47 = v46;
    v58 = a1 + 9;
    if (v47)
      v47 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<siri::dialogengine::SemanticFeatureConstraint>>(v47);
    else
      v48 = 0;
    v56.__r_.__value_.__r.__words[0] = v47;
    v56.__r_.__value_.__l.__size_ = v47 + 56 * v44;
    v56.__r_.__value_.__r.__words[2] = v56.__r_.__value_.__l.__size_;
    v57 = v47 + 56 * v48;
    std::allocator<siri::dialogengine::ExecutePatternBase::Stage>::construct[abi:ne180100]<siri::dialogengine::ExecutePatternBase::Stage,std::shared_ptr<siri::dialogengine::PatternGroup> &,std::shared_ptr<siri::dialogengine::VariableObject> &,std::set<std::string> const&>((_QWORD *)v56.__r_.__value_.__l.__size_, v11, v12, a3, a4);
    v56.__r_.__value_.__r.__words[2] += 56;
    std::vector<siri::dialogengine::ExecutePatternBase::Stage>::__swap_out_circular_buffer(a1 + 7, &v56);
    v24 = a1[8];
    std::__split_buffer<siri::dialogengine::ExecutePatternBase::Stage>::~__split_buffer((uint64_t)&v56);
    v11 = v54;
  }
  else
  {
    std::allocator<siri::dialogengine::ExecutePatternBase::Stage>::construct[abi:ne180100]<siri::dialogengine::ExecutePatternBase::Stage,std::shared_ptr<siri::dialogengine::PatternGroup> &,std::shared_ptr<siri::dialogengine::VariableObject> &,std::set<std::string> const&>((_QWORD *)a1[8], v11, v12, a3, a4);
    v24 = v22 + 56;
    a1[8] = v22 + 56;
  }
  a1[8] = v24;
  if (*(char *)(v11 + 87) < 0)
    std::string::__init_copy_ctor_external(&v56, *(const std::string::value_type **)(v11 + 64), *(_QWORD *)(v11 + 72));
  else
    v56 = *(std::string *)(v11 + 64);
  v49 = &v56;
  if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v49 = (std::string *)v56.__r_.__value_.__r.__words[0];
  siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"Added group: %s", v23, v49);
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v56.__r_.__value_.__l.__data_);
LABEL_13:
  v17 = v55;
  if (v55)
  {
    v18 = (unint64_t *)&v55->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
}

void sub_1BFBD40F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void std::allocator<siri::dialogengine::ExecutePatternBase::Stage>::construct[abi:ne180100]<siri::dialogengine::ExecutePatternBase::Stage,std::shared_ptr<siri::dialogengine::PatternGroup> &,std::shared_ptr<siri::dialogengine::VariableObject> &,std::set<std::string> const&>(_QWORD *a1, uint64_t a2, std::__shared_weak_count *a3, uint64_t *a4, _QWORD *a5)
{
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;

  if (a3)
  {
    p_shared_owners = (unint64_t *)&a3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v7 = *a4;
  v8 = (std::__shared_weak_count *)a4[1];
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  *a1 = a2;
  a1[1] = a3;
  if (a3)
  {
    v11 = (unint64_t *)&a3->__shared_owners_;
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  a1[2] = v7;
  a1[3] = v8;
  if (v8)
  {
    v13 = (unint64_t *)&v8->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  std::set<std::string>::set[abi:ne180100](a1 + 4, a5);
  if (v8)
  {
    v15 = (unint64_t *)&v8->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (a3)
  {
    v17 = (unint64_t *)&a3->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))a3->__on_zero_shared)(a3);
      std::__shared_weak_count::__release_weak(a3);
    }
  }
}

void sub_1BFBD42C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;
  uint64_t v12;

  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](v12);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](v11);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t std::allocator<siri::dialogengine::ExecutePatternBase::Stage>::construct[abi:ne180100]<siri::dialogengine::ExecutePatternBase::Stage,siri::dialogengine::ExecutePatternBase::Stage>(uint64_t result, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_OWORD *)result = *(_OWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_OWORD *)(result + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  v2 = (_QWORD *)(a2 + 40);
  v3 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 40) = v3;
  v4 = result + 40;
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 48) = v5;
  if (v5)
  {
    *(_QWORD *)(v3 + 16) = v4;
    *(_QWORD *)(a2 + 32) = v2;
    *v2 = 0;
    *(_QWORD *)(a2 + 48) = 0;
  }
  else
  {
    *(_QWORD *)(result + 32) = v4;
  }
  return result;
}

uint64_t *std::vector<siri::dialogengine::ExecutePatternBase::Stage>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = result;
  v5 = *result;
  v4 = result[1];
  v6 = a2[1];
  while (v4 != v5)
  {
    v6 -= 56;
    v4 -= 56;
    result = (uint64_t *)std::allocator<siri::dialogengine::ExecutePatternBase::Stage>::construct[abi:ne180100]<siri::dialogengine::ExecutePatternBase::Stage,siri::dialogengine::ExecutePatternBase::Stage>(v6, v4);
  }
  a2[1] = v6;
  v7 = *v3;
  *v3 = v6;
  a2[1] = v7;
  v8 = v3[1];
  v3[1] = a2[2];
  a2[2] = v8;
  v9 = v3[2];
  v3[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<siri::dialogengine::ExecutePatternBase::Stage>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 56;
    std::allocator<siri::dialogengine::ExecutePatternBase::Stage>::destroy[abi:ne180100](i - 56);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t *std::set<std::string>::set[abi:ne180100](uint64_t *a1, _QWORD *a2)
{
  uint64_t *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;

  a1[1] = 0;
  v3 = a1 + 1;
  a1[2] = 0;
  *a1 = (uint64_t)(a1 + 1);
  v4 = a2 + 1;
  v5 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 != a2 + 1)
  {
    do
    {
      std::__tree<std::string>::__emplace_hint_unique_key_args<std::string,std::string const&>(a1, v3, v5 + 4, (uint64_t)(v5 + 4));
      v6 = (_QWORD *)v5[1];
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = (_QWORD *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (_QWORD *)v5[2];
          v8 = *v7 == (_QWORD)v5;
          v5 = v7;
        }
        while (!v8);
      }
      v5 = v7;
    }
    while (v7 != v4);
  }
  return a1;
}

void sub_1BFBD44B0(_Unwind_Exception *a1)
{
  char **v1;

  std::__tree<std::string>::destroy(*v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::string>::__emplace_hint_unique_key_args<std::string,std::string const&>(uint64_t *result, uint64_t *a2, _QWORD *a3, uint64_t a4)
{
  uint64_t *v6;
  uint64_t **v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t **v14;
  uint64_t *v15;
  BOOL v16;
  uint64_t **v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;

  v6 = a2;
  v7 = (uint64_t **)result;
  v8 = result + 1;
  if (result + 1 != a2)
  {
    result = (uint64_t *)std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(a3, a2 + 4);
    if (!(_DWORD)result)
    {
      result = (uint64_t *)std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(v6 + 4, a3);
      if (!(_DWORD)result)
      {
        v19 = v6;
        v20 = v6;
        v14 = &v19;
        if (v6)
          return result;
LABEL_31:
        v6 = v20;
        goto LABEL_32;
      }
      v12 = v6[1];
      if (v12)
      {
        v13 = (uint64_t *)v6[1];
        do
        {
          v14 = (uint64_t **)v13;
          v13 = (uint64_t *)*v13;
        }
        while (v13);
      }
      else
      {
        v17 = (uint64_t **)v6;
        do
        {
          v14 = (uint64_t **)v17[2];
          v16 = *v14 == (uint64_t *)v17;
          v17 = v14;
        }
        while (!v16);
      }
      if (v14 == (uint64_t **)v8
        || (result = (uint64_t *)std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(a3, v14 + 4),
            (_DWORD)result))
      {
        if (v12)
        {
          v20 = (uint64_t *)v14;
        }
        else
        {
          v20 = v6;
          v14 = (uint64_t **)(v6 + 1);
        }
LABEL_30:
        if (*v14)
          return result;
        goto LABEL_31;
      }
LABEL_29:
      result = std::__tree<std::string>::__find_equal<std::string>((uint64_t)v7, &v20, a3);
      v14 = (uint64_t **)result;
      goto LABEL_30;
    }
  }
  v9 = *v6;
  if (*v7 == v6)
  {
    v11 = v6;
    goto LABEL_17;
  }
  if (v9)
  {
    v10 = (uint64_t *)*v6;
    do
    {
      v11 = v10;
      v10 = (uint64_t *)v10[1];
    }
    while (v10);
  }
  else
  {
    v15 = v6;
    do
    {
      v11 = (uint64_t *)v15[2];
      v16 = *v11 == (_QWORD)v15;
      v15 = v11;
    }
    while (v16);
  }
  result = (uint64_t *)std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(v11 + 4, a3);
  if (!(_DWORD)result)
    goto LABEL_29;
LABEL_17:
  if (v9)
  {
    v20 = v11;
    v14 = (uint64_t **)(v11 + 1);
    goto LABEL_30;
  }
  v20 = v6;
  v14 = (uint64_t **)v6;
LABEL_32:
  std::__tree<std::string>::__construct_node<std::string const&>((uint64_t)&v18, (uint64_t)v7, a4);
  return std::__tree<std::string>::__insert_node_at(v7, (uint64_t)v6, v14, v18);
}

uint64_t *siri::dialogengine::ExecutePatternBase::GetGroups@<X0>(uint64_t *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v3 = (_QWORD *)this[7];
  v4 = (_QWORD *)this[8];
  if (v4 != v3)
  {
    v5 = 0x6DB6DB6DB6DB6DB7 * (v4 - v3);
    if (v5 >= 0x492492492492493)
      std::vector<BOOL>::__throw_length_error[abi:ne180100]();
    v6 = std::__allocate_at_least[abi:ne180100]<std::allocator<siri::dialogengine::SemanticFeatureConstraint>>(v5);
    v7 = 0;
    *a2 = v6;
    a2[1] = v6;
    a2[2] = &v6[7 * v8];
    v9 = v6;
    do
    {
      *v9 = *v3;
      v10 = v3[1];
      v9[1] = v10;
      if (v10)
      {
        v11 = (unint64_t *)(v10 + 8);
        do
          v12 = __ldxr(v11);
        while (__stxr(v12 + 1, v11));
      }
      v9[2] = v3[2];
      v13 = v3[3];
      v9[3] = v13;
      if (v13)
      {
        v14 = (unint64_t *)(v13 + 8);
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
      }
      this = std::set<std::string>::set[abi:ne180100](v9 + 4, v3 + 4);
      v3 += 7;
      v9 += 7;
      v7 += 56;
    }
    while (v3 != v4);
    a2[1] = v9;
  }
  return this;
}

void sub_1BFBD4788(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<siri::dialogengine::ExecutePatternBase::Stage>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

_QWORD *siri::dialogengine::ExecutePatternBase::GetTemplateDirs@<X0>(siri::dialogengine::ExecutePatternBase *this@<X0>, _QWORD *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return std::vector<siri::dialogengine::UpdatableDir>::__init_with_size[abi:ne180100]<siri::dialogengine::UpdatableDir*,siri::dialogengine::UpdatableDir*>(a2, *((_QWORD *)this + 10), *((_QWORD *)this + 11), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 11) - *((_QWORD *)this + 10)) >> 5));
}

siri::dialogengine::DialogPerson *siri::dialogengine::DialogPerson::RemoveEmojis(siri::dialogengine::DialogPerson *this, siri::dialogengine::Variable *a2)
{
  char *v3;
  char *v4;
  std::string::size_type size;
  _OWORD *v6;
  std::string v8;
  std::string v9;
  std::string __p;
  std::string v11;

  if (this)
  {
    if (v3)
    {
      v4 = v3;
      if (v3[119] < 0)
        std::string::__init_copy_ctor_external(&v11, *((const std::string::value_type **)v3 + 12), *((_QWORD *)v3 + 13));
      else
        v11 = *(std::string *)(v3 + 4);
      siri::dialogengine::RemoveEmojiChars(&v11, &__p);
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        size = __p.__r_.__value_.__l.__size_;
      v6 = v4 + 72;
      if (size)
      {
        if (v4[95] < 0)
        {
          std::string::__init_copy_ctor_external(&v9, *((const std::string::value_type **)v4 + 9), *((_QWORD *)v4 + 10));
        }
        else
        {
          *(_OWORD *)&v9.__r_.__value_.__l.__data_ = *v6;
          v9.__r_.__value_.__r.__words[2] = *((_QWORD *)v4 + 11);
        }
        siri::dialogengine::SpeakableString::SetString((std::string *)v4 + 3, &v9, &__p);
      }
      if (v4[95] < 0)
      {
        std::string::__init_copy_ctor_external(&v9, *((const std::string::value_type **)v4 + 9), *((_QWORD *)v4 + 10));
      }
      else
      {
        *(_OWORD *)&v9.__r_.__value_.__l.__data_ = *v6;
        v9.__r_.__value_.__r.__words[2] = *((_QWORD *)v4 + 11);
      }
      siri::dialogengine::GetGraphemePrefix((uint64_t)&v11, 2, &v8);
      siri::dialogengine::SpeakableString::SetString((std::string *)v4 + 3, &v9, &v8);
    }
  }
  return this;
}

void sub_1BFBD4968(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;

  if (a27 < 0)
    operator delete(__p);
  if (*(char *)(v27 - 25) < 0)
    operator delete(*(void **)(v27 - 48));
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::DialogPerson::GetTrimmedEmojiName(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  siri::dialogengine::GetGraphemePrefix(a1, 2, a2);
}

void siri::dialogengine::DialogPerson::FormatSpeakableName(siri::dialogengine::Context *a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  std::string::size_type size;
  std::string *v7;
  __int128 v8;
  std::string *v9;
  __int128 v10;
  std::string __p;
  void *v12;
  char v13;
  void *v14;
  char v15;
  void *v16;
  char v17;
  void *v18;
  char v19;
  void *v20;
  char v21;
  void *v22;
  char v23;
  void *v24[2];
  char v25;
  void *v26[2];
  char v27;
  void *v28[2];
  char v29;
  std::string v30;
  std::string v31;
  std::string v32;
  void *v33[2];
  char v34;
  void *v35[2];
  char v36;

  siri::dialogengine::RemoveEmojiChars((const std::string *)a2, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    size = __p.__r_.__value_.__l.__size_;
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!size)
      goto LABEL_6;
  }
  else if (!*((_BYTE *)&__p.__r_.__value_.__s + 23))
  {
LABEL_6:
    if (*(char *)(a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
      a3->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
    }
    return;
  }
  if (siri::dialogengine::ContainsTTStoiCodes((char **)a2))
    goto LABEL_6;
  std::string::basic_string[abi:ne180100]<0>(v35, "\x1B");
  std::string::basic_string[abi:ne180100]<0>(v33, "E+001B;");
  std::string::basic_string[abi:ne180100]<0>(&v30, "&");
  std::string::basic_string[abi:ne180100]<0>(v28, "&amp;");
  siri::dialogengine::StringReplace(a2, (char *)&v30, (uint64_t)v28, 0, &v31);
  std::string::basic_string[abi:ne180100]<0>(v26, "'");
  std::string::basic_string[abi:ne180100]<0>(v24, "&apos;");
  siri::dialogengine::StringReplace((uint64_t)&v31, (char *)v26, (uint64_t)v24, 0, &__p);
  siri::dialogengine::StringReplace((uint64_t)&__p, (char *)v35, (uint64_t)v33, 0, &v32);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v25 < 0)
    operator delete(v24[0]);
  if (v27 < 0)
    operator delete(v26[0]);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v31.__r_.__value_.__l.__data_);
  if (v29 < 0)
    operator delete(v28[0]);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
  siri::dialogengine::RemoveUnicodeControlChars((uint64_t)&v32, &v30);
  v7 = std::string::insert(&v30, 0, "<say-as interpret-as=\"name\">");
  v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  v9 = std::string::append(&__p, "</say-as>");
  v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v31.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
  siri::dialogengine::SpeakableString::SpeakableString((uint64_t)&__p, (uint64_t)&v31);
  siri::dialogengine::SpeakableString::GetExpandedSpeak(&v30, (siri::dialogengine::SpeakableString *)&__p, a1);
  siri::dialogengine::StringReplace((uint64_t)&v30, (char *)v33, (uint64_t)v35, 0, a3);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
  if (v23 < 0)
    operator delete(v22);
  if (v21 < 0)
    operator delete(v20);
  if (v19 < 0)
    operator delete(v18);
  if (v17 < 0)
    operator delete(v16);
  if (v15 < 0)
    operator delete(v14);
  if (v13 < 0)
    operator delete(v12);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v31.__r_.__value_.__l.__data_);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v32.__r_.__value_.__l.__data_);
  if (v34 < 0)
    operator delete(v33[0]);
  if (v36 < 0)
    operator delete(v35[0]);
}

void sub_1BFBD4CF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  uint64_t v45;

  if (*(char *)(v45 - 145) < 0)
    operator delete(*(void **)(v45 - 168));
  siri::dialogengine::SpeakableString::~SpeakableString(&__p);
  if (*(char *)(v45 - 121) < 0)
    operator delete(*(void **)(v45 - 144));
  if (*(char *)(v45 - 97) < 0)
    operator delete(*(void **)(v45 - 120));
  if (*(char *)(v45 - 73) < 0)
    operator delete(*(void **)(v45 - 96));
  if (*(char *)(v45 - 49) < 0)
    operator delete(*(void **)(v45 - 72));
  _Unwind_Resume(a1);
}

void sub_1BFBD4E28()
{
  JUMPOUT(0x1BFBD4E00);
}

void sub_1BFBD4E30()
{
  JUMPOUT(0x1BFBD4E10);
}

void siri::dialogengine::DialogPerson::GetPersonData(siri::dialogengine::Context *a1@<X1>, uint64_t a2@<X8>)
{
  void *OptionalStringParameter;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *OptionalObjectParameter;
  uint64_t v17;
  char *v18;
  char *v19;
  void **v20;
  void *v21;
  void *v22;
  _BYTE *OptionalBooleanParameter;
  std::string __p;
  std::string v25;
  std::string v26;
  std::string v27;
  std::string v28;
  std::string v29;
  std::string v30;

  bzero((void *)a2, 0x409uLL);
  std::string::basic_string[abi:ne180100]<0>(&__p, "fullName");
  OptionalStringParameter = siri::dialogengine::GetOptionalStringParameter((const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)a1);
  v7 = OptionalStringParameter;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!v7)
      goto LABEL_19;
  }
  else if (!OptionalStringParameter)
  {
    goto LABEL_19;
  }
  (*(void (**)(std::string *__return_ptr, void *))(*(_QWORD *)v7 + 48))(&__p, v7);
  std::string::operator=((std::string *)(a2 + 672), &__p);
  std::string::operator=((std::string *)(a2 + 696), &v25);
  std::string::operator=((std::string *)(a2 + 720), &v26);
  std::string::operator=((std::string *)(a2 + 744), &v27);
  std::string::operator=((std::string *)(a2 + 768), &v28);
  std::string::operator=((std::string *)(a2 + 792), &v29);
  std::string::operator=((std::string *)(a2 + 816), &v30);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__r_.__value_.__l.__data_);
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v27.__r_.__value_.__l.__data_);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_19:
  std::string::basic_string[abi:ne180100]<0>(&__p, "givenName");
  v8 = siri::dialogengine::GetOptionalStringParameter((const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)a1);
  v9 = v8;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!v9)
      goto LABEL_37;
  }
  else if (!v8)
  {
    goto LABEL_37;
  }
  (*(void (**)(std::string *__return_ptr, void *))(*(_QWORD *)v9 + 48))(&__p, v9);
  std::string::operator=((std::string *)a2, &__p);
  std::string::operator=((std::string *)(a2 + 24), &v25);
  std::string::operator=((std::string *)(a2 + 48), &v26);
  std::string::operator=((std::string *)(a2 + 72), &v27);
  std::string::operator=((std::string *)(a2 + 96), &v28);
  std::string::operator=((std::string *)(a2 + 120), &v29);
  std::string::operator=((std::string *)(a2 + 144), &v30);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__r_.__value_.__l.__data_);
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v27.__r_.__value_.__l.__data_);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_37:
  std::string::basic_string[abi:ne180100]<0>(&__p, "middleName");
  v10 = siri::dialogengine::GetOptionalStringParameter((const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)a1);
  v11 = v10;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!v11)
      goto LABEL_55;
  }
  else if (!v10)
  {
    goto LABEL_55;
  }
  (*(void (**)(std::string *__return_ptr, void *))(*(_QWORD *)v11 + 48))(&__p, v11);
  std::string::operator=((std::string *)(a2 + 168), &__p);
  std::string::operator=((std::string *)(a2 + 192), &v25);
  std::string::operator=((std::string *)(a2 + 216), &v26);
  std::string::operator=((std::string *)(a2 + 240), &v27);
  std::string::operator=((std::string *)(a2 + 264), &v28);
  std::string::operator=((std::string *)(a2 + 288), &v29);
  std::string::operator=((std::string *)(a2 + 312), &v30);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__r_.__value_.__l.__data_);
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v27.__r_.__value_.__l.__data_);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_55:
  std::string::basic_string[abi:ne180100]<0>(&__p, "familyName");
  v12 = siri::dialogengine::GetOptionalStringParameter((const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)a1);
  v13 = v12;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!v13)
      goto LABEL_73;
  }
  else if (!v12)
  {
    goto LABEL_73;
  }
  (*(void (**)(std::string *__return_ptr, void *))(*(_QWORD *)v13 + 48))(&__p, v13);
  std::string::operator=((std::string *)(a2 + 336), &__p);
  std::string::operator=((std::string *)(a2 + 360), &v25);
  std::string::operator=((std::string *)(a2 + 384), &v26);
  std::string::operator=((std::string *)(a2 + 408), &v27);
  std::string::operator=((std::string *)(a2 + 432), &v28);
  std::string::operator=((std::string *)(a2 + 456), &v29);
  std::string::operator=((std::string *)(a2 + 480), &v30);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__r_.__value_.__l.__data_);
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v27.__r_.__value_.__l.__data_);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_73:
  std::string::basic_string[abi:ne180100]<0>(&__p, "nickname");
  v14 = siri::dialogengine::GetOptionalStringParameter((const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)a1);
  v15 = v14;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!v15)
      goto LABEL_91;
  }
  else if (!v14)
  {
    goto LABEL_91;
  }
  (*(void (**)(std::string *__return_ptr, void *))(*(_QWORD *)v15 + 48))(&__p, v15);
  std::string::operator=((std::string *)(a2 + 504), &__p);
  std::string::operator=((std::string *)(a2 + 528), &v25);
  std::string::operator=((std::string *)(a2 + 552), &v26);
  std::string::operator=((std::string *)(a2 + 576), &v27);
  std::string::operator=((std::string *)(a2 + 600), &v28);
  std::string::operator=((std::string *)(a2 + 624), &v29);
  std::string::operator=((std::string *)(a2 + 648), &v30);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__r_.__value_.__l.__data_);
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v27.__r_.__value_.__l.__data_);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_91:
  std::string::basic_string[abi:ne180100]<0>(&__p, "pronoun");
  OptionalObjectParameter = siri::dialogengine::GetOptionalObjectParameter((const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)a1);
  v17 = (uint64_t)OptionalObjectParameter;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!v17)
      goto LABEL_105;
  }
  else if (!OptionalObjectParameter)
  {
    goto LABEL_105;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "gender");
  v18 = (char *)siri::dialogengine::GetOptionalStringParameter((const void **)&__p.__r_.__value_.__l.__data_, v17);
  v19 = v18;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!v19)
      goto LABEL_105;
  }
  else if (!v18)
  {
    goto LABEL_105;
  }
  if (v19[95] < 0)
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)v19 + 9), *((_QWORD *)v19 + 10));
  else
    __p = *(std::string *)(v19 + 3);
  v20 = (void **)(a2 + 1008);
  if (*(char *)(a2 + 1031) < 0)
    operator delete(*v20);
  *(_OWORD *)v20 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  *(_QWORD *)(a2 + 1024) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
LABEL_105:
  std::string::basic_string[abi:ne180100]<0>(&__p, "company");
  v21 = siri::dialogengine::GetOptionalStringParameter((const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)a1);
  v22 = v21;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!v22)
      goto LABEL_123;
  }
  else if (!v21)
  {
    goto LABEL_123;
  }
  (*(void (**)(std::string *__return_ptr, void *))(*(_QWORD *)v22 + 48))(&__p, v22);
  std::string::operator=((std::string *)(a2 + 840), &__p);
  std::string::operator=((std::string *)(a2 + 864), &v25);
  std::string::operator=((std::string *)(a2 + 888), &v26);
  std::string::operator=((std::string *)(a2 + 912), &v27);
  std::string::operator=((std::string *)(a2 + 936), &v28);
  std::string::operator=((std::string *)(a2 + 960), &v29);
  std::string::operator=((std::string *)(a2 + 984), &v30);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__r_.__value_.__l.__data_);
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v27.__r_.__value_.__l.__data_);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_123:
  std::string::basic_string[abi:ne180100]<0>(&__p, "useConversationalName");
  OptionalBooleanParameter = siri::dialogengine::GetOptionalBooleanParameter((const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)a1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (OptionalBooleanParameter)
    *(_BYTE *)(a2 + 1032) = OptionalBooleanParameter[66];
}

void sub_1BFBD5650(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void **v14;

  siri::dialogengine::PersonData::~PersonData(v14);
  _Unwind_Resume(a1);
}

std::string *siri::dialogengine::DialogPerson::GetToString(siri::dialogengine::DialogPerson *this, siri::dialogengine::Context *a2, std::string *a3, const siri::dialogengine::PersonData *a4)
{
  const siri::dialogengine::PersonData *v7;
  std::string *ConversationalName;
  std::string::size_type size;
  std::string::size_type v10;
  siri::dialogengine::Context *OptionalObjectParameter;
  _BYTE *OptionalBooleanParameter;
  _BYTE *v13;
  char v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  const siri::dialogengine::VariableObject *v22;
  unint64_t v23;
  std::string v25;
  uint64_t v26[2];
  uint64_t v27[2];
  std::string __str;
  std::string v29;
  std::string v30;
  std::string v31;
  std::string v32;
  std::string v33;
  std::string v34;
  std::string v35[2];
  void *v36[2];
  __int128 v37;
  __int128 v38;
  void *v39[2];
  __int128 v40;
  __int128 v41;
  std::string v42;
  void *v43;
  char v44;
  void *v45;
  char v46;
  void *v47;
  char v48;
  void *v49;
  char v50;
  void *v51;
  char v52;
  void *v53;
  char v54;
  void *v55;
  char v56;
  void *v57;
  char v58;
  void *v59;
  char v60;
  void *v61;
  char v62;
  void *v63;
  char v64;
  void *v65;
  char v66;
  void *v67;
  char v68;
  void *v69;
  char v70;
  void *v71;
  char v72;
  void *v73;
  char v74;
  void *v75;
  char v76;
  void *v77;
  char v78;
  void *v79;
  char v80;
  void *v81;
  char v82;
  void *v83;
  char v84;
  void *v85;
  char v86;
  void *v87;
  char v88;
  void *v89;
  char v90;
  void *v91;
  char v92;
  void *v93;
  char v94;
  void *v95;
  char v96;
  void *v97;
  char v98;
  void *v99;
  char v100;
  void *v101;
  char v102;
  void *v103;
  char v104;
  void *v105;
  char v106;
  void *v107;
  char v108;
  void *v109;
  char v110;
  void *v111;
  char v112;
  void *__p;
  char v114;
  void *v115[2];
  char v116;
  void *v117;
  char v118;
  void *v119;
  char v120;
  void *v121;
  char v122;
  void *v123;
  char v124;
  void *v125;
  char v126;
  void *v127;
  char v128;
  void *v129;
  char v130;
  void *v131;
  char v132;
  void *v133;
  char v134;
  void *v135;
  char v136;
  void *v137;
  char v138;
  void *v139;
  char v140;
  void *v141;
  char v142;
  void *v143;
  char v144;
  void *v145;
  char v146;
  void *v147;
  char v148;
  void *v149;
  char v150;
  void *v151;
  char v152;
  void *v153;
  char v154;
  void *v155;
  char v156;
  void *v157;
  char v158;
  void *v159;
  char v160;
  void *v161;
  char v162;
  void *v163;
  char v164;
  void *v165;
  char v166;
  void *v167;
  char v168;
  void *v169;
  char v170;
  void *v171;
  char v172;
  void *v173;
  char v174;
  void *v175;
  char v176;
  void *v177;
  char v178;
  void *v179;
  char v180;
  void *v181;
  char v182;
  void *v183;
  char v184;
  void *v185;
  char v186;
  void *v187;
  char v188;
  void *v189;
  char v190;
  void *v191;
  char v192;
  void *v193;
  char v194;
  void *v195;
  char v196;
  void *v197;
  char v198;
  void *v199;
  char v200;

  bzero(v115, 0x409uLL);
  if (!a3)
  {
    siri::dialogengine::DialogPerson::GetPersonData(a2, (uint64_t)v35);
    siri::dialogengine::PersonData::operator=((uint64_t)v115, (uint64_t)v35);
    if (v114 < 0)
      operator delete(__p);
    if (v112 < 0)
      operator delete(v111);
    if (v110 < 0)
      operator delete(v109);
    if (v108 < 0)
      operator delete(v107);
    if (v106 < 0)
      operator delete(v105);
    if (v104 < 0)
      operator delete(v103);
    if (v102 < 0)
      operator delete(v101);
    if (v100 < 0)
      operator delete(v99);
    if (v98 < 0)
      operator delete(v97);
    if (v96 < 0)
      operator delete(v95);
    if (v94 < 0)
      operator delete(v93);
    if (v92 < 0)
      operator delete(v91);
    if (v90 < 0)
      operator delete(v89);
    if (v88 < 0)
      operator delete(v87);
    if (v86 < 0)
      operator delete(v85);
    if (v84 < 0)
      operator delete(v83);
    if (v82 < 0)
      operator delete(v81);
    if (v80 < 0)
      operator delete(v79);
    if (v78 < 0)
      operator delete(v77);
    if (v76 < 0)
      operator delete(v75);
    if (v74 < 0)
      operator delete(v73);
    if (v72 < 0)
      operator delete(v71);
    if (v70 < 0)
      operator delete(v69);
    if (v68 < 0)
      operator delete(v67);
    if (v66 < 0)
      operator delete(v65);
    if (v64 < 0)
      operator delete(v63);
    if (v62 < 0)
      operator delete(v61);
    if (v60 < 0)
      operator delete(v59);
    if (v58 < 0)
      operator delete(v57);
    if (v56 < 0)
      operator delete(v55);
    if (v54 < 0)
      operator delete(v53);
    if (v52 < 0)
      operator delete(v51);
    if (v50 < 0)
      operator delete(v49);
    if (v48 < 0)
      operator delete(v47);
    if (v46 < 0)
      operator delete(v45);
    if (v44 < 0)
      operator delete(v43);
    if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v42.__r_.__value_.__l.__data_);
    if (SHIBYTE(v41) < 0)
      operator delete(*((void **)&v40 + 1));
    if (SBYTE7(v40) < 0)
      operator delete(v39[0]);
    if (SHIBYTE(v38) < 0)
      operator delete(*((void **)&v37 + 1));
    if (SBYTE7(v37) < 0)
      operator delete(v36[0]);
    if (SHIBYTE(v35[1].__r_.__value_.__r.__words[2]) < 0)
      operator delete(v35[1].__r_.__value_.__l.__data_);
    if (SHIBYTE(v35[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(v35[0].__r_.__value_.__l.__data_);
    a3 = (std::string *)v115;
  }
  if (a3[43].__r_.__value_.__s.__data_[0])
  {
    ConversationalName = siri::dialogengine::DialogPerson::GetConversationalName(this, a2, a3, v7);
    if (((*(uint64_t (**)(std::string *))(ConversationalName->__r_.__value_.__r.__words[0] + 32))(ConversationalName) & 1) == 0)
      goto LABEL_158;
    (*(void (**)(std::string *))(ConversationalName->__r_.__value_.__r.__words[0] + 8))(ConversationalName);
  }
  v41 = 0u;
  memset(&v42, 0, sizeof(v42));
  *(_OWORD *)v39 = 0u;
  v40 = 0u;
  v37 = 0u;
  v38 = 0u;
  *(_OWORD *)v36 = 0u;
  memset(v35, 0, sizeof(v35));
  siri::dialogengine::CreateFullName(&__str, this, a2, a3);
  std::string::operator=(v35, &__str);
  std::string::operator=(&v35[1], &v29);
  std::string::operator=((std::string *)v36, &v30);
  std::string::operator=((std::string *)((char *)&v37 + 8), &v31);
  std::string::operator=((std::string *)v39, &v32);
  std::string::operator=((std::string *)((char *)&v40 + 8), &v33);
  std::string::operator=(&v42, &v34);
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v34.__r_.__value_.__l.__data_);
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v32.__r_.__value_.__l.__data_);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v31.__r_.__value_.__l.__data_);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  size = HIBYTE(v35[1].__r_.__value_.__r.__words[2]);
  if ((v35[1].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v35[1].__r_.__value_.__l.__size_;
  if (size)
    goto LABEL_112;
  v10 = HIBYTE(v35[0].__r_.__value_.__r.__words[2]);
  if ((v35[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v10 = v35[0].__r_.__value_.__l.__size_;
  if (v10)
  {
LABEL_112:
    if (SHIBYTE(v35[1].__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v25, v35[1].__r_.__value_.__l.__data_, v35[1].__r_.__value_.__l.__size_);
    else
      v25 = v35[1];
    siri::dialogengine::DialogPerson::FormatSpeakableName(this, (uint64_t)&v25, &__str);
    std::string::operator=(&v35[1], &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v25.__r_.__value_.__l.__data_);
    goto LABEL_119;
  }
  std::string::basic_string[abi:ne180100]<0>(&__str, "personHandle");
  OptionalObjectParameter = (siri::dialogengine::Context *)siri::dialogengine::GetOptionalObjectParameter((const void **)&__str.__r_.__value_.__l.__data_, (uint64_t)a2);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__str, "friendlyPhoneNumberName");
  OptionalBooleanParameter = siri::dialogengine::GetOptionalBooleanParameter((const void **)&__str.__r_.__value_.__l.__data_, (uint64_t)a2);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__str, "friendlyPhoneNumberNameShort");
  v13 = siri::dialogengine::GetOptionalBooleanParameter((const void **)&__str.__r_.__value_.__l.__data_, (uint64_t)a2);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (OptionalBooleanParameter)
  {
    v14 = OptionalBooleanParameter[66] != 0;
    if (!v13)
      goto LABEL_130;
    goto LABEL_129;
  }
  v14 = 0;
  if (v13)
LABEL_129:
    LOBYTE(v13) = v13[66] != 0;
LABEL_130:
  if (OptionalObjectParameter)
  {
    v15 = operator new();
    std::string::basic_string[abi:ne180100]<0>(&__str, "friendlyPhoneNumberName");
    siri::dialogengine::VariableBoolean::VariableBoolean(v15, &__str, v14);
    v27[0] = v15;
    v16 = (std::__shared_weak_count *)operator new();
    v16->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    v16->__vftable = (std::__shared_weak_count_vtbl *)&off_1E7937C68;
    v16->__shared_weak_owners_ = 0;
    v16[1].__vftable = (std::__shared_weak_count_vtbl *)v15;
    v27[1] = (uint64_t)v16;
    siri::dialogengine::VariableObject::AddProperty((uint64_t)OptionalObjectParameter, v27);
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    v19 = operator new();
    std::string::basic_string[abi:ne180100]<0>(&__str, "friendlyPhoneNumberNameShort");
    siri::dialogengine::VariableBoolean::VariableBoolean(v19, &__str, (char)v13);
    v26[0] = v19;
    v20 = (std::__shared_weak_count *)operator new();
    v20->__shared_owners_ = 0;
    v21 = (unint64_t *)&v20->__shared_owners_;
    v20->__vftable = (std::__shared_weak_count_vtbl *)&off_1E7937C68;
    v20->__shared_weak_owners_ = 0;
    v20[1].__vftable = (std::__shared_weak_count_vtbl *)v19;
    v26[1] = (uint64_t)v20;
    siri::dialogengine::VariableObject::AddProperty((uint64_t)OptionalObjectParameter, v26);
    do
      v23 = __ldaxr(v21);
    while (__stlxr(v23 - 1, v21));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    ConversationalName = (std::string *)siri::dialogengine::DialogPersonHandle::formattedValue(this, OptionalObjectParameter, v22);
    goto LABEL_144;
  }
LABEL_119:
  ConversationalName = (std::string *)operator new();
  std::string::basic_string[abi:ne180100]<0>(&__str, "");
  siri::dialogengine::VariableString::VariableString(ConversationalName, &__str, (const siri::dialogengine::SpeakableString *)v35);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
LABEL_144:
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v42.__r_.__value_.__l.__data_);
  if (SHIBYTE(v41) < 0)
    operator delete(*((void **)&v40 + 1));
  if (SBYTE7(v40) < 0)
    operator delete(v39[0]);
  if (SHIBYTE(v38) < 0)
    operator delete(*((void **)&v37 + 1));
  if (SBYTE7(v37) < 0)
    operator delete(v36[0]);
  if (SHIBYTE(v35[1].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v35[1].__r_.__value_.__l.__data_);
  if (SHIBYTE(v35[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v35[0].__r_.__value_.__l.__data_);
LABEL_158:
  if (v200 < 0)
    operator delete(v199);
  if (v198 < 0)
    operator delete(v197);
  if (v196 < 0)
    operator delete(v195);
  if (v194 < 0)
    operator delete(v193);
  if (v192 < 0)
    operator delete(v191);
  if (v190 < 0)
    operator delete(v189);
  if (v188 < 0)
    operator delete(v187);
  if (v186 < 0)
    operator delete(v185);
  if (v184 < 0)
    operator delete(v183);
  if (v182 < 0)
    operator delete(v181);
  if (v180 < 0)
    operator delete(v179);
  if (v178 < 0)
    operator delete(v177);
  if (v176 < 0)
    operator delete(v175);
  if (v174 < 0)
    operator delete(v173);
  if (v172 < 0)
    operator delete(v171);
  if (v170 < 0)
    operator delete(v169);
  if (v168 < 0)
    operator delete(v167);
  if (v166 < 0)
    operator delete(v165);
  if (v164 < 0)
    operator delete(v163);
  if (v162 < 0)
    operator delete(v161);
  if (v160 < 0)
    operator delete(v159);
  if (v158 < 0)
    operator delete(v157);
  if (v156 < 0)
    operator delete(v155);
  if (v154 < 0)
    operator delete(v153);
  if (v152 < 0)
    operator delete(v151);
  if (v150 < 0)
    operator delete(v149);
  if (v148 < 0)
    operator delete(v147);
  if (v146 < 0)
    operator delete(v145);
  if (v144 < 0)
    operator delete(v143);
  if (v142 < 0)
    operator delete(v141);
  if (v140 < 0)
    operator delete(v139);
  if (v138 < 0)
    operator delete(v137);
  if (v136 < 0)
    operator delete(v135);
  if (v134 < 0)
    operator delete(v133);
  if (v132 < 0)
    operator delete(v131);
  if (v130 < 0)
    operator delete(v129);
  if (v128 < 0)
    operator delete(v127);
  if (v126 < 0)
    operator delete(v125);
  if (v124 < 0)
    operator delete(v123);
  if (v122 < 0)
    operator delete(v121);
  if (v120 < 0)
    operator delete(v119);
  if (v118 < 0)
    operator delete(v117);
  if (v116 < 0)
    operator delete(v115[0]);
  return ConversationalName;
}

void sub_1BFBD61BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40)
{
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  if (a21 < 0)
    operator delete(__p);
  siri::dialogengine::SpeakableString::~SpeakableString(&a40);
  siri::dialogengine::PersonData::~PersonData((void **)&STACK[0x4F0]);
  _Unwind_Resume(a1);
}

std::string *siri::dialogengine::DialogPerson::GetConversationalName(siri::dialogengine::DialogPerson *this, siri::dialogengine::Context *a2, std::string *a3, const siri::dialogengine::PersonData *a4)
{
  int v7;
  _OWORD *v8;
  std::__shared_weak_count *size;
  unint64_t *v10;
  unint64_t v11;
  _OWORD *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  _OWORD *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  _OWORD *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unsigned __int8 *OptionalBooleanParameter;
  unsigned __int8 *v25;
  _OWORD *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::string::size_type v30;
  _OWORD *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  _OWORD *v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  _OWORD *v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  _OWORD *v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::string *v47;
  __int128 v49;
  std::string v50;
  std::string v51;
  void *v52;
  char v53;
  void *v54;
  char v55;
  void *v56;
  char v57;
  void *v58;
  char v59;
  void *v60;
  char v61;
  void *v62;
  char v63;
  void *v64;
  char v65;
  void *v66;
  char v67;
  void *v68;
  char v69;
  void *v70;
  char v71;
  void *v72;
  char v73;
  void *v74;
  char v75;
  void *v76;
  char v77;
  void *v78;
  char v79;
  void *v80;
  char v81;
  void *v82;
  char v83;
  void *v84;
  char v85;
  void *v86;
  char v87;
  void *v88;
  char v89;
  void *v90;
  char v91;
  void *v92;
  char v93;
  void *v94;
  char v95;
  void *v96;
  char v97;
  void *v98;
  char v99;
  void *v100;
  char v101;
  void *v102;
  char v103;
  void *v104;
  char v105;
  void *v106;
  char v107;
  void *v108;
  char v109;
  void *v110;
  char v111;
  void *v112;
  char v113;
  void *v114;
  char v115;
  void *v116;
  char v117;
  void *v118;
  char v119;
  void *v120;
  char v121;
  void *v122;
  char v123;
  void *v124;
  char v125;
  void *v126;
  char v127;
  void *v128;
  char v129;
  void *v130;
  char v131;
  void *v132;
  char v133;
  std::string v134;
  std::string __p;
  uint64_t *v136;
  _QWORD *v137[2];
  void *v138[2];
  char v139;
  void *v140;
  char v141;
  void *v142;
  char v143;
  void *v144;
  char v145;
  void *v146;
  char v147;
  void *v148;
  char v149;
  void *v150;
  char v151;
  void *v152;
  char v153;
  void *v154;
  char v155;
  void *v156;
  char v157;
  void *v158;
  char v159;
  void *v160;
  char v161;
  void *v162;
  char v163;
  void *v164;
  char v165;
  void *v166;
  char v167;
  void *v168;
  char v169;
  void *v170;
  char v171;
  void *v172;
  char v173;
  void *v174;
  char v175;
  void *v176;
  char v177;
  void *v178;
  char v179;
  void *v180;
  char v181;
  void *v182;
  char v183;
  void *v184;
  char v185;
  void *v186;
  char v187;
  void *v188;
  char v189;
  void *v190;
  char v191;
  void *v192;
  char v193;
  void *v194;
  char v195;
  void *v196;
  char v197;
  void *v198;
  char v199;
  void *v200;
  char v201;
  void *v202;
  char v203;
  void *v204;
  char v205;
  void *v206;
  char v207;
  void *v208;
  char v209;
  void *v210;
  char v211;
  void *v212;
  char v213;
  void *v214;
  char v215;
  void *v216;
  char v217;
  void *v218;
  char v219;
  void *v220;
  char v221;
  void *v222;
  char v223;
  std::string *v224;

  bzero(v138, 0x409uLL);
  v137[1] = 0;
  v137[0] = 0;
  v136 = (uint64_t *)v137;
  siri::dialogengine::RequestInfo::RequestInfo((siri::dialogengine::RequestInfo *)&v50, (siri::dialogengine::DialogPerson *)((char *)this + 8));
  std::string::basic_string[abi:ne180100]<0>(&v134, "userShouldPreferNickname");
  siri::dialogengine::RequestInfo::GetUserSetting((uint64_t)&v50, (const void **)&v134.__r_.__value_.__l.__data_, &__p);
  v7 = siri::dialogengine::StringToBool(&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v134.__r_.__value_.__l.__data_);
  siri::dialogengine::RequestInfo::~RequestInfo((void **)&v50.__r_.__value_.__l.__data_);
  if (!a3)
  {
    siri::dialogengine::DialogPerson::GetPersonData(a2, (uint64_t)&v50);
    siri::dialogengine::PersonData::operator=((uint64_t)v138, (uint64_t)&v50);
    if (v133 < 0)
      operator delete(v132);
    if (v131 < 0)
      operator delete(v130);
    if (v129 < 0)
      operator delete(v128);
    if (v127 < 0)
      operator delete(v126);
    if (v125 < 0)
      operator delete(v124);
    if (v123 < 0)
      operator delete(v122);
    if (v121 < 0)
      operator delete(v120);
    if (v119 < 0)
      operator delete(v118);
    if (v117 < 0)
      operator delete(v116);
    if (v115 < 0)
      operator delete(v114);
    if (v113 < 0)
      operator delete(v112);
    if (v111 < 0)
      operator delete(v110);
    if (v109 < 0)
      operator delete(v108);
    if (v107 < 0)
      operator delete(v106);
    if (v105 < 0)
      operator delete(v104);
    if (v103 < 0)
      operator delete(v102);
    if (v101 < 0)
      operator delete(v100);
    if (v99 < 0)
      operator delete(v98);
    if (v97 < 0)
      operator delete(v96);
    if (v95 < 0)
      operator delete(v94);
    if (v93 < 0)
      operator delete(v92);
    if (v91 < 0)
      operator delete(v90);
    if (v89 < 0)
      operator delete(v88);
    if (v87 < 0)
      operator delete(v86);
    if (v85 < 0)
      operator delete(v84);
    if (v83 < 0)
      operator delete(v82);
    if (v81 < 0)
      operator delete(v80);
    if (v79 < 0)
      operator delete(v78);
    if (v77 < 0)
      operator delete(v76);
    if (v75 < 0)
      operator delete(v74);
    if (v73 < 0)
      operator delete(v72);
    if (v71 < 0)
      operator delete(v70);
    if (v69 < 0)
      operator delete(v68);
    if (v67 < 0)
      operator delete(v66);
    if (v65 < 0)
      operator delete(v64);
    if (v63 < 0)
      operator delete(v62);
    if (v61 < 0)
      operator delete(v60);
    if (v59 < 0)
      operator delete(v58);
    if (v57 < 0)
      operator delete(v56);
    if (v55 < 0)
      operator delete(v54);
    if (v53 < 0)
      operator delete(v52);
    if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v51.__r_.__value_.__l.__data_);
    if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v50.__r_.__value_.__l.__data_);
    a3 = (std::string *)v138;
  }
  siri::dialogengine::CreateJSONBoolVal(0, (uint64_t *)&__p);
  std::string::basic_string[abi:ne180100]<0>(&v50, "wasAmbiguous");
  v134.__r_.__value_.__r.__words[0] = (std::string::size_type)&v50;
  v8 = std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v136, (const void **)&v50.__r_.__value_.__l.__data_, &v134);
  std::shared_ptr<siri::dialogengine::JSONValue>::operator=[abi:ne180100]((uint64_t)v8 + 56, (__int128 *)&__p);
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v50.__r_.__value_.__l.__data_);
  size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v10 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  siri::dialogengine::CreateJSONBoolVal(0, (uint64_t *)&__p);
  std::string::basic_string[abi:ne180100]<0>(&v50, "isLessVerbose");
  v134.__r_.__value_.__r.__words[0] = (std::string::size_type)&v50;
  v12 = std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v136, (const void **)&v50.__r_.__value_.__l.__data_, &v134);
  std::shared_ptr<siri::dialogengine::JSONValue>::operator=[abi:ne180100]((uint64_t)v12 + 56, (__int128 *)&__p);
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v50.__r_.__value_.__l.__data_);
  v13 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v14 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  siri::dialogengine::CreateJSONBoolVal(0, (uint64_t *)&__p);
  std::string::basic_string[abi:ne180100]<0>(&v50, "isRecent");
  v134.__r_.__value_.__r.__words[0] = (std::string::size_type)&v50;
  v16 = std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v136, (const void **)&v50.__r_.__value_.__l.__data_, &v134);
  std::shared_ptr<siri::dialogengine::JSONValue>::operator=[abi:ne180100]((uint64_t)v16 + 56, (__int128 *)&__p);
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v50.__r_.__value_.__l.__data_);
  v17 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v18 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  siri::dialogengine::CreateJSONBoolVal((siri::dialogengine *)1, (uint64_t *)&__p);
  std::string::basic_string[abi:ne180100]<0>(&v50, "useImprovedConversationalName");
  v134.__r_.__value_.__r.__words[0] = (std::string::size_type)&v50;
  v20 = std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v136, (const void **)&v50.__r_.__value_.__l.__data_, &v134);
  std::shared_ptr<siri::dialogengine::JSONValue>::operator=[abi:ne180100]((uint64_t)v20 + 56, (__int128 *)&__p);
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v50.__r_.__value_.__l.__data_);
  v21 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v22 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&v50, "related");
  OptionalBooleanParameter = (unsigned __int8 *)siri::dialogengine::GetOptionalBooleanParameter((const void **)&v50.__r_.__value_.__l.__data_, (uint64_t)a2);
  v25 = OptionalBooleanParameter;
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v50.__r_.__value_.__l.__data_);
    if (!v25)
      goto LABEL_132;
  }
  else if (!OptionalBooleanParameter)
  {
    goto LABEL_132;
  }
  siri::dialogengine::CreateJSONBoolVal((siri::dialogengine *)v25[66], (uint64_t *)&__p);
  std::string::basic_string[abi:ne180100]<0>(&v50, "related");
  v134.__r_.__value_.__r.__words[0] = (std::string::size_type)&v50;
  v26 = std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v136, (const void **)&v50.__r_.__value_.__l.__data_, &v134);
  std::shared_ptr<siri::dialogengine::JSONValue>::operator=[abi:ne180100]((uint64_t)v26 + 56, (__int128 *)&__p);
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v50.__r_.__value_.__l.__data_);
  v27 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v28 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
LABEL_132:
  if ((SHIBYTE(a3[22].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (*((_BYTE *)&a3[22].__r_.__value_.__s + 23))
      goto LABEL_140;
LABEL_136:
    if (SHIBYTE(a3[21].__r_.__value_.__r.__words[2]) < 0)
      v30 = a3[21].__r_.__value_.__l.__size_;
    else
      v30 = HIBYTE(a3[21].__r_.__value_.__r.__words[2]);
    if (!v30)
      goto LABEL_150;
    goto LABEL_140;
  }
  if (!a3[22].__r_.__value_.__l.__size_)
    goto LABEL_136;
LABEL_140:
  if (((v7 ^ 1) & 1) == 0)
  {
    siri::dialogengine::SpeakableString::ToMultiplexedString((siri::dialogengine::SpeakableString *)&a3[21], &v50);
    siri::dialogengine::CreateJSONStringVal((uint64_t)&v50, (uint64_t *)&v134);
    std::string::basic_string[abi:ne180100]<0>(&__p, "nickname");
    *(_QWORD *)&v49 = &__p;
    v31 = std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v136, (const void **)&__p.__r_.__value_.__l.__data_, (_OWORD **)&v49);
    std::shared_ptr<siri::dialogengine::JSONValue>::operator=[abi:ne180100]((uint64_t)v31 + 56, (__int128 *)&v134);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v32 = (std::__shared_weak_count *)v134.__r_.__value_.__l.__size_;
    if (v134.__r_.__value_.__l.__size_)
    {
      v33 = (unint64_t *)(v134.__r_.__value_.__l.__size_ + 8);
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
    if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v50.__r_.__value_.__l.__data_);
  }
LABEL_150:
  if (SHIBYTE(a3[1].__r_.__value_.__r.__words[2]) < 0)
  {
    if (a3[1].__r_.__value_.__l.__size_)
      goto LABEL_158;
  }
  else if (*((_BYTE *)&a3[1].__r_.__value_.__s + 23))
  {
    goto LABEL_158;
  }
  if (SHIBYTE(a3->__r_.__value_.__r.__words[2]) < 0)
  {
    if (!a3->__r_.__value_.__l.__size_)
      goto LABEL_167;
  }
  else if (!*((_BYTE *)&a3->__r_.__value_.__s + 23))
  {
    goto LABEL_167;
  }
LABEL_158:
  siri::dialogengine::SpeakableString::ToMultiplexedString((siri::dialogengine::SpeakableString *)a3, &v50);
  siri::dialogengine::CreateJSONStringVal((uint64_t)&v50, (uint64_t *)&v134);
  std::string::basic_string[abi:ne180100]<0>(&__p, "givenName");
  *(_QWORD *)&v49 = &__p;
  v35 = std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v136, (const void **)&__p.__r_.__value_.__l.__data_, (_OWORD **)&v49);
  std::shared_ptr<siri::dialogengine::JSONValue>::operator=[abi:ne180100]((uint64_t)v35 + 56, (__int128 *)&v134);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v36 = (std::__shared_weak_count *)v134.__r_.__value_.__l.__size_;
  if (v134.__r_.__value_.__l.__size_)
  {
    v37 = (unint64_t *)(v134.__r_.__value_.__l.__size_ + 8);
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v50.__r_.__value_.__l.__data_);
LABEL_167:
  if (SHIBYTE(a3[15].__r_.__value_.__r.__words[2]) < 0)
  {
    if (a3[15].__r_.__value_.__l.__size_)
      goto LABEL_175;
  }
  else if (*((_BYTE *)&a3[15].__r_.__value_.__s + 23))
  {
    goto LABEL_175;
  }
  if (SHIBYTE(a3[14].__r_.__value_.__r.__words[2]) < 0)
  {
    if (!a3[14].__r_.__value_.__l.__size_)
      goto LABEL_184;
  }
  else if (!*((_BYTE *)&a3[14].__r_.__value_.__s + 23))
  {
    goto LABEL_184;
  }
LABEL_175:
  siri::dialogengine::SpeakableString::ToMultiplexedString((siri::dialogengine::SpeakableString *)&a3[14], &v50);
  siri::dialogengine::CreateJSONStringVal((uint64_t)&v50, (uint64_t *)&v134);
  std::string::basic_string[abi:ne180100]<0>(&__p, "familyName");
  *(_QWORD *)&v49 = &__p;
  v39 = std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v136, (const void **)&__p.__r_.__value_.__l.__data_, (_OWORD **)&v49);
  std::shared_ptr<siri::dialogengine::JSONValue>::operator=[abi:ne180100]((uint64_t)v39 + 56, (__int128 *)&v134);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v40 = (std::__shared_weak_count *)v134.__r_.__value_.__l.__size_;
  if (v134.__r_.__value_.__l.__size_)
  {
    v41 = (unint64_t *)(v134.__r_.__value_.__l.__size_ + 8);
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v50.__r_.__value_.__l.__data_);
LABEL_184:
  siri::dialogengine::CreateFullName(&v50, this, a2, a3);
  siri::dialogengine::SpeakableString::ToMultiplexedString((siri::dialogengine::SpeakableString *)&v50, &__p);
  siri::dialogengine::CreateJSONStringVal((uint64_t)&__p, (uint64_t *)&v49);
  std::string::basic_string[abi:ne180100]<0>(&v134, "fullName");
  v224 = &v134;
  v43 = std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v136, (const void **)&v134.__r_.__value_.__l.__data_, (_OWORD **)&v224);
  std::shared_ptr<siri::dialogengine::JSONValue>::operator=[abi:ne180100]((uint64_t)v43 + 56, &v49);
  if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v134.__r_.__value_.__l.__data_);
  v44 = (std::__shared_weak_count *)*((_QWORD *)&v49 + 1);
  if (*((_QWORD *)&v49 + 1))
  {
    v45 = (unint64_t *)(*((_QWORD *)&v49 + 1) + 8);
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v61 < 0)
    operator delete(v60);
  if (v59 < 0)
    operator delete(v58);
  if (v57 < 0)
    operator delete(v56);
  if (v55 < 0)
    operator delete(v54);
  if (v53 < 0)
    operator delete(v52);
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v51.__r_.__value_.__l.__data_);
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v50.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "person#conversationalName");
  siri::dialogengine::ExecuteSharedCat(this, (uint64_t)&__p, (const void ***)&v136, (uint64_t)&v50);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v134, v51.__r_.__value_.__l.__data_, v51.__r_.__value_.__l.__size_);
  else
    v134 = v51;
  siri::dialogengine::DialogPerson::FormatSpeakableName(this, (uint64_t)&v134, &__p);
  std::string::operator=(&v51, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v134.__r_.__value_.__l.__data_);
  v47 = (std::string *)operator new();
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  siri::dialogengine::VariableString::VariableString(v47, &__p, (const siri::dialogengine::SpeakableString *)&v50);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v61 < 0)
    operator delete(v60);
  if (v59 < 0)
    operator delete(v58);
  if (v57 < 0)
    operator delete(v56);
  if (v55 < 0)
    operator delete(v54);
  if (v53 < 0)
    operator delete(v52);
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v51.__r_.__value_.__l.__data_);
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v50.__r_.__value_.__l.__data_);
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(v137[0]);
  if (v223 < 0)
    operator delete(v222);
  if (v221 < 0)
    operator delete(v220);
  if (v219 < 0)
    operator delete(v218);
  if (v217 < 0)
    operator delete(v216);
  if (v215 < 0)
    operator delete(v214);
  if (v213 < 0)
    operator delete(v212);
  if (v211 < 0)
    operator delete(v210);
  if (v209 < 0)
    operator delete(v208);
  if (v207 < 0)
    operator delete(v206);
  if (v205 < 0)
    operator delete(v204);
  if (v203 < 0)
    operator delete(v202);
  if (v201 < 0)
    operator delete(v200);
  if (v199 < 0)
    operator delete(v198);
  if (v197 < 0)
    operator delete(v196);
  if (v195 < 0)
    operator delete(v194);
  if (v193 < 0)
    operator delete(v192);
  if (v191 < 0)
    operator delete(v190);
  if (v189 < 0)
    operator delete(v188);
  if (v187 < 0)
    operator delete(v186);
  if (v185 < 0)
    operator delete(v184);
  if (v183 < 0)
    operator delete(v182);
  if (v181 < 0)
    operator delete(v180);
  if (v179 < 0)
    operator delete(v178);
  if (v177 < 0)
    operator delete(v176);
  if (v175 < 0)
    operator delete(v174);
  if (v173 < 0)
    operator delete(v172);
  if (v171 < 0)
    operator delete(v170);
  if (v169 < 0)
    operator delete(v168);
  if (v167 < 0)
    operator delete(v166);
  if (v165 < 0)
    operator delete(v164);
  if (v163 < 0)
    operator delete(v162);
  if (v161 < 0)
    operator delete(v160);
  if (v159 < 0)
    operator delete(v158);
  if (v157 < 0)
    operator delete(v156);
  if (v155 < 0)
    operator delete(v154);
  if (v153 < 0)
    operator delete(v152);
  if (v151 < 0)
    operator delete(v150);
  if (v149 < 0)
    operator delete(v148);
  if (v147 < 0)
    operator delete(v146);
  if (v145 < 0)
    operator delete(v144);
  if (v143 < 0)
    operator delete(v142);
  if (v141 < 0)
    operator delete(v140);
  if (v139 < 0)
    operator delete(v138[0]);
  return v47;
}

void sub_1BFBD717C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  siri::dialogengine::SpeakableString::~SpeakableString((void **)va);
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy((_QWORD *)STACK[0x458]);
  siri::dialogengine::PersonData::~PersonData((void **)&STACK[0x468]);
  _Unwind_Resume(a1);
}

void siri::dialogengine::CreateFullName(std::string *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3, const std::string *a4)
{
  const char *v8;
  _BYTE *OptionalBooleanParameter;
  _BYTE *v10;
  uint64_t v11;
  void *v12;
  int v13;
  uint64_t i;
  char *OptionalStringParameter;
  _OWORD *v16;
  std::string::size_type size;
  int v18;
  void *v19[2];
  char v20;
  void *v21[2];
  uint64_t v22;
  std::string v23;
  std::string v24;
  void *v25[2];
  char v26;
  void *v27;
  char v28;
  void *v29;
  char v30;
  void *v31;
  char v32;
  void *v33;
  char v34;
  void *v35;
  char v36;
  void *v37;
  char v38;
  void *v39;
  char v40;
  void *v41;
  char v42;
  void *v43;
  char v44;
  void *v45;
  char v46;
  void *v47;
  char v48;
  void *v49;
  char v50;
  void *v51;
  char v52;
  void *v53;
  char v54;
  void *v55;
  char v56;
  void *v57;
  char v58;
  void *v59;
  char v60;
  void *v61;
  char v62;
  void *v63;
  char v64;
  void *v65;
  char v66;
  void *v67;
  char v68;
  void *v69;
  char v70;
  void *v71;
  char v72;
  void *v73;
  char v74;
  void *v75;
  char v76;
  void *v77;
  char v78;
  void *v79;
  char v80;
  void *v81;
  char v82;
  void *v83;
  char v84;
  void *v85;
  char v86;
  void *v87;
  char v88;
  void *v89;
  char v90;
  void *v91;
  char v92;
  void *v93;
  char v94;
  void *v95;
  char v96;
  void *v97;
  char v98;
  void *v99;
  char v100;
  void *v101;
  char v102;
  void *v103;
  char v104;
  void *v105;
  char v106;
  void *v107;
  char v108;
  void *v109;
  char v110;
  std::string __str;
  std::string v112;
  std::string v113;
  std::string v114;
  std::string v115;
  std::string v116;
  std::string v117;
  void *v118;
  char v119;
  void *v120;
  char v121;
  void *v122;
  char v123;
  void *v124;
  char v125;
  void *v126;
  char v127;
  void *v128;
  char v129;
  void *v130;
  char v131;
  void *v132;
  char v133;
  void *v134;
  char v135;
  void *v136;
  char v137;
  void *v138;
  char v139;
  void *v140;
  char v141;
  void *v142;
  char v143;
  void *v144;
  char v145;
  void *v146;
  char v147;
  void *v148;
  char v149;
  void *v150;
  char v151;
  void *v152;
  char v153;
  void *v154;
  char v155;
  void *v156;
  char v157;
  void *v158;
  char v159;
  void *v160;
  char v161;
  void *v162;
  char v163;
  void *v164;
  char v165;
  void *v166;
  char v167;
  void *v168;
  char v169;
  void *v170;
  char v171;
  void *v172;
  char v173;
  void *v174;
  char v175;
  void *v176;
  char v177;
  void *v178;
  char v179;
  void *v180;
  char v181;
  void *v182;
  char v183;
  void *v184;
  char v185;
  void *v186;
  char v187;
  void *__p;
  char v189;
  uint64_t v190;

  v190 = *MEMORY[0x1E0C80C00];
  bzero(v25, 0x409uLL);
  if (!a4)
  {
    siri::dialogengine::DialogPerson::GetPersonData(a3, (uint64_t)&__str);
    siri::dialogengine::PersonData::operator=((uint64_t)v25, (uint64_t)&__str);
    if (v189 < 0)
      operator delete(__p);
    if (v187 < 0)
      operator delete(v186);
    if (v185 < 0)
      operator delete(v184);
    if (v183 < 0)
      operator delete(v182);
    if (v181 < 0)
      operator delete(v180);
    if (v179 < 0)
      operator delete(v178);
    if (v177 < 0)
      operator delete(v176);
    if (v175 < 0)
      operator delete(v174);
    if (v173 < 0)
      operator delete(v172);
    if (v171 < 0)
      operator delete(v170);
    if (v169 < 0)
      operator delete(v168);
    if (v167 < 0)
      operator delete(v166);
    if (v165 < 0)
      operator delete(v164);
    if (v163 < 0)
      operator delete(v162);
    if (v161 < 0)
      operator delete(v160);
    if (v159 < 0)
      operator delete(v158);
    if (v157 < 0)
      operator delete(v156);
    if (v155 < 0)
      operator delete(v154);
    if (v153 < 0)
      operator delete(v152);
    if (v151 < 0)
      operator delete(v150);
    if (v149 < 0)
      operator delete(v148);
    if (v147 < 0)
      operator delete(v146);
    if (v145 < 0)
      operator delete(v144);
    if (v143 < 0)
      operator delete(v142);
    if (v141 < 0)
      operator delete(v140);
    if (v139 < 0)
      operator delete(v138);
    if (v137 < 0)
      operator delete(v136);
    if (v135 < 0)
      operator delete(v134);
    if (v133 < 0)
      operator delete(v132);
    if (v131 < 0)
      operator delete(v130);
    if (v129 < 0)
      operator delete(v128);
    if (v127 < 0)
      operator delete(v126);
    if (v125 < 0)
      operator delete(v124);
    if (v123 < 0)
      operator delete(v122);
    if (v121 < 0)
      operator delete(v120);
    if (v119 < 0)
      operator delete(v118);
    if (SHIBYTE(v117.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v117.__r_.__value_.__l.__data_);
    if (SHIBYTE(v116.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v116.__r_.__value_.__l.__data_);
    if (SHIBYTE(v115.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v115.__r_.__value_.__l.__data_);
    if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v114.__r_.__value_.__l.__data_);
    if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v113.__r_.__value_.__l.__data_);
    if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v112.__r_.__value_.__l.__data_);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    a4 = (const std::string *)v25;
  }
  siri::dialogengine::SpeakableString::SpeakableString(this, (const siri::dialogengine::SpeakableString *)&a4[28]);
  if (SHIBYTE(this[1].__r_.__value_.__r.__words[2]) < 0)
  {
    if (this[1].__r_.__value_.__l.__size_)
      goto LABEL_154;
  }
  else if (*((_BYTE *)&this[1].__r_.__value_.__s + 23))
  {
    goto LABEL_154;
  }
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    if (this->__r_.__value_.__l.__size_)
      goto LABEL_154;
  }
  else if (*((_BYTE *)&this->__r_.__value_.__s + 23))
  {
    goto LABEL_154;
  }
  std::string::basic_string[abi:ne180100]<0>(&__str, "useRelationshipName");
  OptionalBooleanParameter = siri::dialogengine::GetOptionalBooleanParameter((const void **)&__str.__r_.__value_.__l.__data_, (uint64_t)a3);
  v10 = OptionalBooleanParameter;
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__str.__r_.__value_.__l.__data_);
    if (!v10)
      goto LABEL_102;
  }
  else if (!OptionalBooleanParameter)
  {
    goto LABEL_102;
  }
  if (v10[66])
  {
LABEL_113:
    std::string::basic_string[abi:ne180100]<0>(&__str, "relationship");
    OptionalStringParameter = (char *)siri::dialogengine::GetOptionalStringParameter((const void **)&__str.__r_.__value_.__l.__data_, (uint64_t)a3);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    if (OptionalStringParameter)
    {
      v16 = OptionalStringParameter + 72;
      if (OptionalStringParameter[95] < 0)
      {
        std::string::__init_copy_ctor_external(&__str, *((const std::string::value_type **)OptionalStringParameter + 9), *((_QWORD *)OptionalStringParameter + 10));
      }
      else
      {
        *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *v16;
        __str.__r_.__value_.__r.__words[2] = *((_QWORD *)OptionalStringParameter + 11);
      }
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      else
        size = __str.__r_.__value_.__l.__size_;
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      if (size)
      {
        if (OptionalStringParameter[95] < 0)
        {
          std::string::__init_copy_ctor_external(&v24, *((const std::string::value_type **)OptionalStringParameter + 9), *((_QWORD *)OptionalStringParameter + 10));
        }
        else
        {
          *(_OWORD *)&v24.__r_.__value_.__l.__data_ = *v16;
          v24.__r_.__value_.__r.__words[2] = *((_QWORD *)OptionalStringParameter + 11);
        }
        std::string::basic_string[abi:ne180100]<0>(v21, "com.apple.intents.PersonRelationship.");
        std::string::basic_string[abi:ne180100]<0>(v19, "");
        siri::dialogengine::StringReplace((uint64_t)&v24, (char *)v21, (uint64_t)v19, 0, &v23);
        siri::dialogengine::StringToLower((uint64_t)&v23, (uint64_t)&__str);
        if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v24.__r_.__value_.__l.__data_);
        v24 = __str;
        *((_BYTE *)&__str.__r_.__value_.__s + 23) = 0;
        __str.__r_.__value_.__s.__data_[0] = 0;
        if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v23.__r_.__value_.__l.__data_);
        if (v20 < 0)
          operator delete(v19[0]);
        if (SHIBYTE(v22) < 0)
          operator delete(v21[0]);
        std::string::basic_string[abi:ne180100]<0>(&v23, "personRelationship");
        v21[0] = 0;
        v21[1] = 0;
        v22 = 0;
        siri::dialogengine::ApplySemanticConcept(a2, &v23, &v24, (__int128 **)v21, &__str);
        std::string::operator=(this, &__str);
        std::string::operator=(this + 1, &v112);
        std::string::operator=(this + 2, &v113);
        std::string::operator=(this + 3, &v114);
        std::string::operator=(this + 4, &v115);
        std::string::operator=(this + 5, &v116);
        std::string::operator=(this + 6, &v117);
        if (SHIBYTE(v117.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v117.__r_.__value_.__l.__data_);
        if (SHIBYTE(v116.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v116.__r_.__value_.__l.__data_);
        if (SHIBYTE(v115.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v115.__r_.__value_.__l.__data_);
        if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v114.__r_.__value_.__l.__data_);
        if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v113.__r_.__value_.__l.__data_);
        if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v112.__r_.__value_.__l.__data_);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        v19[0] = v21;
        std::vector<siri::dialogengine::SemanticFeatureConstraint>::__destroy_vector::operator()[abi:ne180100]((void ***)v19);
        if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v23.__r_.__value_.__l.__data_);
        if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v24.__r_.__value_.__l.__data_);
      }
    }
    goto LABEL_154;
  }
LABEL_102:
  std::string::basic_string[abi:ne180100]<0>(&__str, "givenName");
  std::string::basic_string[abi:ne180100]<0>(&v112, "middleName");
  std::string::basic_string[abi:ne180100]<0>(&v113, "familyName");
  std::string::basic_string[abi:ne180100]<0>(&v114, "nickname");
  std::string::basic_string[abi:ne180100]<0>(&v115, "fullName");
  std::string::basic_string[abi:ne180100]<0>(&v116, "company");
  v11 = 0;
  while (1)
  {
    v12 = siri::dialogengine::GetOptionalStringParameter((const void **)((char *)&__str.__r_.__value_.__l.__data_ + v11), (uint64_t)a3);
    if (v12)
    {
      if (((*(uint64_t (**)(void *))(*(_QWORD *)v12 + 32))(v12) & 1) == 0)
        break;
    }
    v11 += 24;
    if (v11 == 144)
    {
      v13 = 1;
      goto LABEL_108;
    }
  }
  v13 = 0;
LABEL_108:
  for (i = 0; i != -18; i -= 3)
  {
    if (SHIBYTE(v116.__r_.__value_.__r.__words[i + 2]) < 0)
      operator delete(*(void **)((char *)&v116.__r_.__value_.__l.__data_ + i * 8));
  }
  if (v13)
    goto LABEL_113;
LABEL_154:
  v18 = SHIBYTE(this[1].__r_.__value_.__r.__words[2]);
  if (v18 < 0)
  {
    if (this[1].__r_.__value_.__l.__size_)
      goto LABEL_160;
  }
  else if (*((_BYTE *)&this[1].__r_.__value_.__s + 23))
  {
    goto LABEL_160;
  }
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    if (this->__r_.__value_.__l.__size_)
    {
LABEL_160:
      if ((v18 & 0x80) == 0)
        goto LABEL_161;
      goto LABEL_181;
    }
  }
  else if (*((_BYTE *)&this->__r_.__value_.__s + 23))
  {
    goto LABEL_160;
  }
  siri::dialogengine::Context::GetLocale(a2, v8, (uint64_t)&v24);
  siri::dialogengine::MeCard::FormatFullName((uint64_t)a4, (uint64_t)&a4[14], (uint64_t *)&v24, (uint64_t)&__str);
  std::string::operator=(this, &__str);
  std::string::operator=(this + 1, &v112);
  std::string::operator=(this + 2, &v113);
  std::string::operator=(this + 3, &v114);
  std::string::operator=(this + 4, &v115);
  std::string::operator=(this + 5, &v116);
  std::string::operator=(this + 6, &v117);
  if (SHIBYTE(v117.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v117.__r_.__value_.__l.__data_);
  if (SHIBYTE(v116.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v116.__r_.__value_.__l.__data_);
  if (SHIBYTE(v115.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v115.__r_.__value_.__l.__data_);
  if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v114.__r_.__value_.__l.__data_);
  if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v113.__r_.__value_.__l.__data_);
  if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v112.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  LOBYTE(v18) = *((_BYTE *)&this[1].__r_.__value_.__s + 23);
  if ((v18 & 0x80) == 0)
  {
LABEL_161:
    if ((_BYTE)v18)
      goto LABEL_195;
    goto LABEL_182;
  }
LABEL_181:
  if (this[1].__r_.__value_.__l.__size_)
    goto LABEL_195;
LABEL_182:
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    if (this->__r_.__value_.__l.__size_)
      goto LABEL_195;
  }
  else if (*((_BYTE *)&this->__r_.__value_.__s + 23))
  {
    goto LABEL_195;
  }
  if (SHIBYTE(a4[22].__r_.__value_.__r.__words[2]) < 0)
  {
    if (a4[22].__r_.__value_.__l.__size_)
      goto LABEL_194;
  }
  else if (*((_BYTE *)&a4[22].__r_.__value_.__s + 23))
  {
    goto LABEL_194;
  }
  if (SHIBYTE(a4[21].__r_.__value_.__r.__words[2]) < 0)
  {
    if (!a4[21].__r_.__value_.__l.__size_)
      goto LABEL_195;
    goto LABEL_194;
  }
  if (*((_BYTE *)&a4[21].__r_.__value_.__s + 23))
  {
LABEL_194:
    std::string::operator=(this, a4 + 21);
    std::string::operator=(this + 1, a4 + 22);
    std::string::operator=(this + 2, a4 + 23);
    std::string::operator=(this + 3, a4 + 24);
    std::string::operator=(this + 4, a4 + 25);
    std::string::operator=(this + 5, a4 + 26);
    std::string::operator=(this + 6, a4 + 27);
    LOBYTE(v18) = *((_BYTE *)&this[1].__r_.__value_.__s + 23);
  }
LABEL_195:
  if ((v18 & 0x80) != 0)
  {
    if (this[1].__r_.__value_.__l.__size_)
      goto LABEL_212;
  }
  else if ((_BYTE)v18)
  {
    goto LABEL_212;
  }
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    if (this->__r_.__value_.__l.__size_)
      goto LABEL_212;
  }
  else if (*((_BYTE *)&this->__r_.__value_.__s + 23))
  {
    goto LABEL_212;
  }
  if (SHIBYTE(a4[36].__r_.__value_.__r.__words[2]) < 0)
  {
    if (a4[36].__r_.__value_.__l.__size_)
      goto LABEL_211;
  }
  else if (*((_BYTE *)&a4[36].__r_.__value_.__s + 23))
  {
    goto LABEL_211;
  }
  if (SHIBYTE(a4[35].__r_.__value_.__r.__words[2]) < 0)
  {
    if (!a4[35].__r_.__value_.__l.__size_)
      goto LABEL_212;
    goto LABEL_211;
  }
  if (*((_BYTE *)&a4[35].__r_.__value_.__s + 23))
  {
LABEL_211:
    std::string::operator=(this, a4 + 35);
    std::string::operator=(this + 1, a4 + 36);
    std::string::operator=(this + 2, a4 + 37);
    std::string::operator=(this + 3, a4 + 38);
    std::string::operator=(this + 4, a4 + 39);
    std::string::operator=(this + 5, a4 + 40);
    std::string::operator=(this + 6, a4 + 41);
  }
LABEL_212:
  if (v110 < 0)
    operator delete(v109);
  if (v108 < 0)
    operator delete(v107);
  if (v106 < 0)
    operator delete(v105);
  if (v104 < 0)
    operator delete(v103);
  if (v102 < 0)
    operator delete(v101);
  if (v100 < 0)
    operator delete(v99);
  if (v98 < 0)
    operator delete(v97);
  if (v96 < 0)
    operator delete(v95);
  if (v94 < 0)
    operator delete(v93);
  if (v92 < 0)
    operator delete(v91);
  if (v90 < 0)
    operator delete(v89);
  if (v88 < 0)
    operator delete(v87);
  if (v86 < 0)
    operator delete(v85);
  if (v84 < 0)
    operator delete(v83);
  if (v82 < 0)
    operator delete(v81);
  if (v80 < 0)
    operator delete(v79);
  if (v78 < 0)
    operator delete(v77);
  if (v76 < 0)
    operator delete(v75);
  if (v74 < 0)
    operator delete(v73);
  if (v72 < 0)
    operator delete(v71);
  if (v70 < 0)
    operator delete(v69);
  if (v68 < 0)
    operator delete(v67);
  if (v66 < 0)
    operator delete(v65);
  if (v64 < 0)
    operator delete(v63);
  if (v62 < 0)
    operator delete(v61);
  if (v60 < 0)
    operator delete(v59);
  if (v58 < 0)
    operator delete(v57);
  if (v56 < 0)
    operator delete(v55);
  if (v54 < 0)
    operator delete(v53);
  if (v52 < 0)
    operator delete(v51);
  if (v50 < 0)
    operator delete(v49);
  if (v48 < 0)
    operator delete(v47);
  if (v46 < 0)
    operator delete(v45);
  if (v44 < 0)
    operator delete(v43);
  if (v42 < 0)
    operator delete(v41);
  if (v40 < 0)
    operator delete(v39);
  if (v38 < 0)
    operator delete(v37);
  if (v36 < 0)
    operator delete(v35);
  if (v34 < 0)
    operator delete(v33);
  if (v32 < 0)
    operator delete(v31);
  if (v30 < 0)
    operator delete(v29);
  if (v28 < 0)
    operator delete(v27);
  if (v26 < 0)
    operator delete(v25[0]);
}

void sub_1BFBD8048(_Unwind_Exception *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  void **v15;
  va_list va;

  va_start(va, a15);
  siri::dialogengine::SpeakableString::~SpeakableString(v15);
  siri::dialogengine::PersonData::~PersonData((void **)va);
  _Unwind_Resume(a1);
}

siri::dialogengine::DialogPerson *siri::dialogengine::DialogPerson::GetSimpleName(siri::dialogengine::DialogPerson *this, siri::dialogengine::Context *a2, const std::string *a3, const siri::dialogengine::PersonData *a4)
{
  std::string::size_type size;
  std::string::size_type v8;
  _QWORD *v9;
  std::__shared_weak_count *v10;
  const void *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  _BYTE *OptionalBooleanParameter;
  _BYTE *v15;
  siri::dialogengine::Context *v16;
  char v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  const siri::dialogengine::VariableObject *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  std::string v30;
  uint64_t v31[2];
  uint64_t v32[2];
  std::string __str;
  std::string v34;
  std::string v35;
  void *v36;
  char v37;
  void *v38;
  char v39;
  void *v40;
  char v41;
  void *v42;
  char v43;
  void *v44;
  char v45;
  void *v46;
  char v47;
  void *v48;
  char v49;
  void *v50;
  char v51;
  void *v52;
  char v53;
  void *v54;
  char v55;
  void *v56;
  char v57;
  void *v58;
  char v59;
  void *v60;
  char v61;
  void *v62;
  char v63;
  void *v64;
  char v65;
  void *v66;
  char v67;
  void *v68;
  char v69;
  void *v70;
  char v71;
  void *v72;
  char v73;
  void *v74;
  char v75;
  void *v76;
  char v77;
  void *v78;
  char v79;
  void *v80;
  char v81;
  void *v82;
  char v83;
  void *v84;
  char v85;
  void *v86;
  char v87;
  void *v88;
  char v89;
  void *v90;
  char v91;
  void *v92;
  char v93;
  void *v94;
  char v95;
  void *v96;
  char v97;
  void *v98;
  char v99;
  void *v100;
  char v101;
  void *v102;
  char v103;
  void *v104;
  char v105;
  void *v106;
  char v107;
  void *v108;
  char v109;
  void *v110;
  char v111;
  void *v112;
  char v113;
  void *v114;
  char v115;
  void *__p;
  char v117;
  void *v118[2];
  char v119;
  void *v120;
  char v121;
  void *v122;
  char v123;
  void *v124;
  char v125;
  void *v126;
  char v127;
  void *v128;
  char v129;
  void *v130;
  char v131;
  void *v132;
  char v133;
  void *v134;
  char v135;
  void *v136;
  char v137;
  void *v138;
  char v139;
  void *v140;
  char v141;
  void *v142;
  char v143;
  void *v144;
  char v145;
  void *v146;
  char v147;
  void *v148;
  char v149;
  void *v150;
  char v151;
  void *v152;
  char v153;
  void *v154;
  char v155;
  void *v156;
  char v157;
  void *v158;
  char v159;
  void *v160;
  char v161;
  void *v162;
  char v163;
  void *v164;
  char v165;
  void *v166;
  char v167;
  void *v168;
  char v169;
  void *v170;
  char v171;
  void *v172;
  char v173;
  void *v174;
  char v175;
  void *v176;
  char v177;
  void *v178;
  char v179;
  void *v180;
  char v181;
  void *v182;
  char v183;
  void *v184;
  char v185;
  void *v186;
  char v187;
  void *v188;
  char v189;
  void *v190;
  char v191;
  void *v192;
  char v193;
  void *v194;
  char v195;
  void *v196;
  char v197;
  void *v198;
  char v199;
  void *v200;
  char v201;
  void *v202;
  char v203;

  bzero(v118, 0x409uLL);
  if (!a3)
  {
    siri::dialogengine::DialogPerson::GetPersonData(a2, (uint64_t)&v34);
    siri::dialogengine::PersonData::operator=((uint64_t)v118, (uint64_t)&v34);
    if (v117 < 0)
      operator delete(__p);
    if (v115 < 0)
      operator delete(v114);
    if (v113 < 0)
      operator delete(v112);
    if (v111 < 0)
      operator delete(v110);
    if (v109 < 0)
      operator delete(v108);
    if (v107 < 0)
      operator delete(v106);
    if (v105 < 0)
      operator delete(v104);
    if (v103 < 0)
      operator delete(v102);
    if (v101 < 0)
      operator delete(v100);
    if (v99 < 0)
      operator delete(v98);
    if (v97 < 0)
      operator delete(v96);
    if (v95 < 0)
      operator delete(v94);
    if (v93 < 0)
      operator delete(v92);
    if (v91 < 0)
      operator delete(v90);
    if (v89 < 0)
      operator delete(v88);
    if (v87 < 0)
      operator delete(v86);
    if (v85 < 0)
      operator delete(v84);
    if (v83 < 0)
      operator delete(v82);
    if (v81 < 0)
      operator delete(v80);
    if (v79 < 0)
      operator delete(v78);
    if (v77 < 0)
      operator delete(v76);
    if (v75 < 0)
      operator delete(v74);
    if (v73 < 0)
      operator delete(v72);
    if (v71 < 0)
      operator delete(v70);
    if (v69 < 0)
      operator delete(v68);
    if (v67 < 0)
      operator delete(v66);
    if (v65 < 0)
      operator delete(v64);
    if (v63 < 0)
      operator delete(v62);
    if (v61 < 0)
      operator delete(v60);
    if (v59 < 0)
      operator delete(v58);
    if (v57 < 0)
      operator delete(v56);
    if (v55 < 0)
      operator delete(v54);
    if (v53 < 0)
      operator delete(v52);
    if (v51 < 0)
      operator delete(v50);
    if (v49 < 0)
      operator delete(v48);
    if (v47 < 0)
      operator delete(v46);
    if (v45 < 0)
      operator delete(v44);
    if (v43 < 0)
      operator delete(v42);
    if (v41 < 0)
      operator delete(v40);
    if (v39 < 0)
      operator delete(v38);
    if (v37 < 0)
      operator delete(v36);
    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v35.__r_.__value_.__l.__data_);
    if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v34.__r_.__value_.__l.__data_);
    a3 = (const std::string *)v118;
  }
  siri::dialogengine::CreateFullName(&v34, this, a2, a3);
  size = HIBYTE(v35.__r_.__value_.__r.__words[2]);
  if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v35.__r_.__value_.__l.__size_;
  if (!size)
  {
    v8 = HIBYTE(v34.__r_.__value_.__r.__words[2]);
    if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v8 = v34.__r_.__value_.__l.__size_;
    if (!v8)
    {
      std::string::basic_string[abi:ne180100]<0>(&__str, "personHandle");
      v9 = (_QWORD *)std::__tree<std::string>::find<std::string>((uint64_t)a2 + 72, (const void **)&__str.__r_.__value_.__l.__data_);
      if ((_QWORD *)((char *)a2 + 80) == v9)
      {
        v10 = 0;
        v11 = 0;
        *(_OWORD *)&v30.__r_.__value_.__l.__data_ = 0uLL;
      }
      else
      {
        v11 = (const void *)v9[7];
        v10 = (std::__shared_weak_count *)v9[8];
        v30.__r_.__value_.__r.__words[0] = (std::string::size_type)v11;
        v30.__r_.__value_.__l.__size_ = (std::string::size_type)v10;
        if (v10)
        {
          p_shared_owners = (unint64_t *)&v10->__shared_owners_;
          do
            v13 = __ldxr(p_shared_owners);
          while (__stxr(v13 + 1, p_shared_owners));
        }
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      std::string::basic_string[abi:ne180100]<0>(&__str, "friendlyPhoneNumberName");
      OptionalBooleanParameter = siri::dialogengine::GetOptionalBooleanParameter((const void **)&__str.__r_.__value_.__l.__data_, (uint64_t)a2);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      std::string::basic_string[abi:ne180100]<0>(&__str, "friendlyPhoneNumberNameShort");
      v15 = siri::dialogengine::GetOptionalBooleanParameter((const void **)&__str.__r_.__value_.__l.__data_, (uint64_t)a2);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__str.__r_.__value_.__l.__data_);
        if (v11)
        {
LABEL_116:
          if (!OptionalBooleanParameter)
            goto LABEL_118;
          goto LABEL_117;
        }
      }
      else if (v11)
      {
        goto LABEL_116;
      }
      v16 = 0;
      if (!OptionalBooleanParameter)
      {
LABEL_118:
        if (v15)
        {
          v17 = v15[66] != 0;
          if (v16)
          {
LABEL_120:
            v18 = operator new();
            std::string::basic_string[abi:ne180100]<0>(&__str, "friendlyPhoneNumberName");
            siri::dialogengine::VariableBoolean::VariableBoolean(v18, &__str, (char)OptionalBooleanParameter);
            v32[0] = v18;
            v19 = (std::__shared_weak_count *)operator new();
            v19->__shared_owners_ = 0;
            v20 = (unint64_t *)&v19->__shared_owners_;
            v19->__vftable = (std::__shared_weak_count_vtbl *)&off_1E7937C68;
            v19->__shared_weak_owners_ = 0;
            v19[1].__vftable = (std::__shared_weak_count_vtbl *)v18;
            v32[1] = (uint64_t)v19;
            siri::dialogengine::VariableObject::AddProperty((uint64_t)v16, v32);
            do
              v21 = __ldaxr(v20);
            while (__stlxr(v21 - 1, v20));
            if (!v21)
            {
              ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
              std::__shared_weak_count::__release_weak(v19);
            }
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__str.__r_.__value_.__l.__data_);
            v22 = operator new();
            std::string::basic_string[abi:ne180100]<0>(&__str, "friendlyPhoneNumberNameShort");
            siri::dialogengine::VariableBoolean::VariableBoolean(v22, &__str, v17);
            v31[0] = v22;
            v23 = (std::__shared_weak_count *)operator new();
            v23->__shared_owners_ = 0;
            v24 = (unint64_t *)&v23->__shared_owners_;
            v23->__vftable = (std::__shared_weak_count_vtbl *)&off_1E7937C68;
            v23->__shared_weak_owners_ = 0;
            v23[1].__vftable = (std::__shared_weak_count_vtbl *)v22;
            v31[1] = (uint64_t)v23;
            siri::dialogengine::VariableObject::AddProperty((uint64_t)v16, v31);
            do
              v26 = __ldaxr(v24);
            while (__stlxr(v26 - 1, v24));
            if (!v26)
            {
              ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
              std::__shared_weak_count::__release_weak(v23);
            }
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__str.__r_.__value_.__l.__data_);
            this = (siri::dialogengine::DialogPerson *)siri::dialogengine::DialogPersonHandle::formattedValue(this, v16, v25);
            v10 = (std::__shared_weak_count *)v30.__r_.__value_.__l.__size_;
            if (!v30.__r_.__value_.__l.__size_)
            {
LABEL_143:
              if (v16)
                goto LABEL_144;
              goto LABEL_102;
            }
LABEL_139:
            v27 = (unint64_t *)&v10->__shared_owners_;
            do
              v28 = __ldaxr(v27);
            while (__stlxr(v28 - 1, v27));
            if (!v28)
            {
              ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
              std::__shared_weak_count::__release_weak(v10);
            }
            goto LABEL_143;
          }
        }
        else
        {
          v17 = 0;
          if (v16)
            goto LABEL_120;
        }
        if (!v10)
          goto LABEL_143;
        goto LABEL_139;
      }
LABEL_117:
      LOBYTE(OptionalBooleanParameter) = OptionalBooleanParameter[66] != 0;
      goto LABEL_118;
    }
  }
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v30, v35.__r_.__value_.__l.__data_, v35.__r_.__value_.__l.__size_);
  else
    v30 = v35;
  siri::dialogengine::DialogPerson::FormatSpeakableName(this, (uint64_t)&v30, &__str);
  std::string::operator=(&v35, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
LABEL_102:
  this = (siri::dialogengine::DialogPerson *)operator new();
  std::string::basic_string[abi:ne180100]<0>(&__str, "");
  siri::dialogengine::VariableString::VariableString((std::string *)this, &__str, (const siri::dialogengine::SpeakableString *)&v34);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
LABEL_144:
  if (v45 < 0)
    operator delete(v44);
  if (v43 < 0)
    operator delete(v42);
  if (v41 < 0)
    operator delete(v40);
  if (v39 < 0)
    operator delete(v38);
  if (v37 < 0)
    operator delete(v36);
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v35.__r_.__value_.__l.__data_);
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v34.__r_.__value_.__l.__data_);
  if (v203 < 0)
    operator delete(v202);
  if (v201 < 0)
    operator delete(v200);
  if (v199 < 0)
    operator delete(v198);
  if (v197 < 0)
    operator delete(v196);
  if (v195 < 0)
    operator delete(v194);
  if (v193 < 0)
    operator delete(v192);
  if (v191 < 0)
    operator delete(v190);
  if (v189 < 0)
    operator delete(v188);
  if (v187 < 0)
    operator delete(v186);
  if (v185 < 0)
    operator delete(v184);
  if (v183 < 0)
    operator delete(v182);
  if (v181 < 0)
    operator delete(v180);
  if (v179 < 0)
    operator delete(v178);
  if (v177 < 0)
    operator delete(v176);
  if (v175 < 0)
    operator delete(v174);
  if (v173 < 0)
    operator delete(v172);
  if (v171 < 0)
    operator delete(v170);
  if (v169 < 0)
    operator delete(v168);
  if (v167 < 0)
    operator delete(v166);
  if (v165 < 0)
    operator delete(v164);
  if (v163 < 0)
    operator delete(v162);
  if (v161 < 0)
    operator delete(v160);
  if (v159 < 0)
    operator delete(v158);
  if (v157 < 0)
    operator delete(v156);
  if (v155 < 0)
    operator delete(v154);
  if (v153 < 0)
    operator delete(v152);
  if (v151 < 0)
    operator delete(v150);
  if (v149 < 0)
    operator delete(v148);
  if (v147 < 0)
    operator delete(v146);
  if (v145 < 0)
    operator delete(v144);
  if (v143 < 0)
    operator delete(v142);
  if (v141 < 0)
    operator delete(v140);
  if (v139 < 0)
    operator delete(v138);
  if (v137 < 0)
    operator delete(v136);
  if (v135 < 0)
    operator delete(v134);
  if (v133 < 0)
    operator delete(v132);
  if (v131 < 0)
    operator delete(v130);
  if (v129 < 0)
    operator delete(v128);
  if (v127 < 0)
    operator delete(v126);
  if (v125 < 0)
    operator delete(v124);
  if (v123 < 0)
    operator delete(v122);
  if (v121 < 0)
    operator delete(v120);
  if (v119 < 0)
    operator delete(v118[0]);
  return this;
}

void sub_1BFBD8BE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22)
{
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  if (a21 < 0)
    operator delete(__p);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  siri::dialogengine::SpeakableString::~SpeakableString(&a22);
  siri::dialogengine::PersonData::~PersonData((void **)&STACK[0x460]);
  _Unwind_Resume(a1);
}

std::string *siri::dialogengine::DialogPerson::GetFullName(siri::dialogengine::DialogPerson *this, siri::dialogengine::Context *a2, const std::string *a3, const siri::dialogengine::PersonData *a4)
{
  std::string::size_type size;
  char v8;
  std::string::size_type v9;
  std::string *v10;
  std::string v12;
  std::string __str;
  std::string v14;
  std::string v15;
  std::string v16;
  std::string v17;
  std::string v18;
  std::string v19;
  std::string v20;
  std::string v21;
  std::string v22;
  std::string v23;
  std::string v24;
  std::string v25;
  std::string v26;
  void *v27;
  char v28;
  void *v29;
  char v30;
  void *v31;
  char v32;
  void *v33;
  char v34;
  void *v35;
  char v36;
  void *v37;
  char v38;
  void *v39;
  char v40;
  void *v41;
  char v42;
  void *v43;
  char v44;
  void *v45;
  char v46;
  void *v47;
  char v48;
  void *v49;
  char v50;
  void *v51;
  char v52;
  void *v53;
  char v54;
  void *v55;
  char v56;
  void *v57;
  char v58;
  void *v59;
  char v60;
  void *v61;
  char v62;
  void *v63;
  char v64;
  void *v65;
  char v66;
  void *v67;
  char v68;
  void *v69;
  char v70;
  void *v71;
  char v72;
  void *v73;
  char v74;
  void *v75;
  char v76;
  void *v77;
  char v78;
  void *v79;
  char v80;
  void *v81;
  char v82;
  void *v83;
  char v84;
  void *v85;
  char v86;
  void *v87;
  char v88;
  void *v89;
  char v90;
  void *v91;
  char v92;
  void *v93;
  char v94;
  void *v95;
  char v96;
  void *__p;
  char v98;
  void *v99[2];
  char v100;
  void *v101;
  char v102;
  void *v103;
  char v104;
  void *v105;
  char v106;
  void *v107;
  char v108;
  void *v109;
  char v110;
  void *v111;
  char v112;
  void *v113;
  char v114;
  void *v115;
  char v116;
  void *v117;
  char v118;
  void *v119;
  char v120;
  void *v121;
  char v122;
  void *v123;
  char v124;
  void *v125;
  char v126;
  void *v127;
  char v128;
  void *v129;
  char v130;
  void *v131;
  char v132;
  void *v133;
  char v134;
  void *v135;
  char v136;
  void *v137;
  char v138;
  void *v139;
  char v140;
  void *v141;
  char v142;
  void *v143;
  char v144;
  void *v145;
  char v146;
  void *v147;
  char v148;
  void *v149;
  char v150;
  void *v151;
  char v152;
  void *v153;
  char v154;
  void *v155;
  char v156;
  void *v157;
  char v158;
  void *v159;
  char v160;
  void *v161;
  char v162;
  void *v163;
  char v164;
  void *v165;
  char v166;
  void *v167;
  char v168;
  void *v169;
  char v170;
  void *v171;
  char v172;
  void *v173;
  char v174;
  void *v175;
  char v176;
  void *v177;
  char v178;
  void *v179;
  char v180;
  void *v181;
  char v182;
  void *v183;
  char v184;

  bzero(v99, 0x409uLL);
  if (!a3)
  {
    siri::dialogengine::DialogPerson::GetPersonData(a2, (uint64_t)&v20);
    siri::dialogengine::PersonData::operator=((uint64_t)v99, (uint64_t)&v20);
    if (v98 < 0)
      operator delete(__p);
    if (v96 < 0)
      operator delete(v95);
    if (v94 < 0)
      operator delete(v93);
    if (v92 < 0)
      operator delete(v91);
    if (v90 < 0)
      operator delete(v89);
    if (v88 < 0)
      operator delete(v87);
    if (v86 < 0)
      operator delete(v85);
    if (v84 < 0)
      operator delete(v83);
    if (v82 < 0)
      operator delete(v81);
    if (v80 < 0)
      operator delete(v79);
    if (v78 < 0)
      operator delete(v77);
    if (v76 < 0)
      operator delete(v75);
    if (v74 < 0)
      operator delete(v73);
    if (v72 < 0)
      operator delete(v71);
    if (v70 < 0)
      operator delete(v69);
    if (v68 < 0)
      operator delete(v67);
    if (v66 < 0)
      operator delete(v65);
    if (v64 < 0)
      operator delete(v63);
    if (v62 < 0)
      operator delete(v61);
    if (v60 < 0)
      operator delete(v59);
    if (v58 < 0)
      operator delete(v57);
    if (v56 < 0)
      operator delete(v55);
    if (v54 < 0)
      operator delete(v53);
    if (v52 < 0)
      operator delete(v51);
    if (v50 < 0)
      operator delete(v49);
    if (v48 < 0)
      operator delete(v47);
    if (v46 < 0)
      operator delete(v45);
    if (v44 < 0)
      operator delete(v43);
    if (v42 < 0)
      operator delete(v41);
    if (v40 < 0)
      operator delete(v39);
    if (v38 < 0)
      operator delete(v37);
    if (v36 < 0)
      operator delete(v35);
    if (v34 < 0)
      operator delete(v33);
    if (v32 < 0)
      operator delete(v31);
    if (v30 < 0)
      operator delete(v29);
    if (v28 < 0)
      operator delete(v27);
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v26.__r_.__value_.__l.__data_);
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v25.__r_.__value_.__l.__data_);
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v24.__r_.__value_.__l.__data_);
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v23.__r_.__value_.__l.__data_);
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v22.__r_.__value_.__l.__data_);
    if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v21.__r_.__value_.__l.__data_);
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v20.__r_.__value_.__l.__data_);
    a3 = (const std::string *)v99;
  }
  siri::dialogengine::SpeakableString::SpeakableString(&v20, (const siri::dialogengine::SpeakableString *)&v155);
  size = HIBYTE(v21.__r_.__value_.__r.__words[2]);
  v8 = HIBYTE(v21.__r_.__value_.__r.__words[2]);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v21.__r_.__value_.__l.__size_;
  if (!size)
  {
    v9 = HIBYTE(v20.__r_.__value_.__r.__words[2]);
    if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v9 = v20.__r_.__value_.__l.__size_;
    if (!v9)
    {
      siri::dialogengine::CreateFullName(&__str, this, a2, a3);
      std::string::operator=(&v20, &__str);
      std::string::operator=(&v21, &v14);
      std::string::operator=(&v22, &v15);
      std::string::operator=(&v23, &v16);
      std::string::operator=(&v24, &v17);
      std::string::operator=(&v25, &v18);
      std::string::operator=(&v26, &v19);
      if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v19.__r_.__value_.__l.__data_);
      if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v18.__r_.__value_.__l.__data_);
      if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v17.__r_.__value_.__l.__data_);
      if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v16.__r_.__value_.__l.__data_);
      if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v15.__r_.__value_.__l.__data_);
      if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v14.__r_.__value_.__l.__data_);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      v8 = HIBYTE(v21.__r_.__value_.__r.__words[2]);
    }
  }
  if (v8 < 0)
    std::string::__init_copy_ctor_external(&v12, v21.__r_.__value_.__l.__data_, v21.__r_.__value_.__l.__size_);
  else
    v12 = v21;
  siri::dialogengine::DialogPerson::FormatSpeakableName(this, (uint64_t)&v12, &__str);
  std::string::operator=(&v21, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
  v10 = (std::string *)operator new();
  std::string::basic_string[abi:ne180100]<0>(&__str, "");
  siri::dialogengine::VariableString::VariableString(v10, &__str, (const siri::dialogengine::SpeakableString *)&v20);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  if (v184 < 0)
    operator delete(v183);
  if (v182 < 0)
    operator delete(v181);
  if (v180 < 0)
    operator delete(v179);
  if (v178 < 0)
    operator delete(v177);
  if (v176 < 0)
    operator delete(v175);
  if (v174 < 0)
    operator delete(v173);
  if (v172 < 0)
    operator delete(v171);
  if (v170 < 0)
    operator delete(v169);
  if (v168 < 0)
    operator delete(v167);
  if (v166 < 0)
    operator delete(v165);
  if (v164 < 0)
    operator delete(v163);
  if (v162 < 0)
    operator delete(v161);
  if (v160 < 0)
    operator delete(v159);
  if (v158 < 0)
    operator delete(v157);
  if (v156 < 0)
    operator delete(v155);
  if (v154 < 0)
    operator delete(v153);
  if (v152 < 0)
    operator delete(v151);
  if (v150 < 0)
    operator delete(v149);
  if (v148 < 0)
    operator delete(v147);
  if (v146 < 0)
    operator delete(v145);
  if (v144 < 0)
    operator delete(v143);
  if (v142 < 0)
    operator delete(v141);
  if (v140 < 0)
    operator delete(v139);
  if (v138 < 0)
    operator delete(v137);
  if (v136 < 0)
    operator delete(v135);
  if (v134 < 0)
    operator delete(v133);
  if (v132 < 0)
    operator delete(v131);
  if (v130 < 0)
    operator delete(v129);
  if (v128 < 0)
    operator delete(v127);
  if (v126 < 0)
    operator delete(v125);
  if (v124 < 0)
    operator delete(v123);
  if (v122 < 0)
    operator delete(v121);
  if (v120 < 0)
    operator delete(v119);
  if (v118 < 0)
    operator delete(v117);
  if (v116 < 0)
    operator delete(v115);
  if (v114 < 0)
    operator delete(v113);
  if (v112 < 0)
    operator delete(v111);
  if (v110 < 0)
    operator delete(v109);
  if (v108 < 0)
    operator delete(v107);
  if (v106 < 0)
    operator delete(v105);
  if (v104 < 0)
    operator delete(v103);
  if (v102 < 0)
    operator delete(v101);
  if (v100 < 0)
    operator delete(v99[0]);
  return v10;
}

void sub_1BFBD9564(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33)
{
  siri::dialogengine::SpeakableString::~SpeakableString(&a33);
  siri::dialogengine::PersonData::~PersonData((void **)&STACK[0x4D0]);
  _Unwind_Resume(a1);
}

void siri::dialogengine::DialogPerson::GetFormatWithHandle(siri::dialogengine::DialogPerson *this, siri::dialogengine::Context *a2, const std::string *a3, const siri::dialogengine::PersonData *a4)
{
  void *OptionalObjectParameter;
  _OWORD *v8;
  std::__shared_weak_count *size;
  unint64_t *v10;
  unint64_t v11;
  void *OptionalStringParameter;
  void *v13;
  _OWORD *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  _OWORD *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  _OWORD *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  void *v26;
  void *v27;
  _OWORD *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  void *v32;
  void *v33;
  _OWORD *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  void *v39[2];
  char v40;
  std::string v41;
  __int128 v42;
  std::string v43;
  std::string v44;
  std::string v45;
  void *v46;
  char v47;
  void *v48;
  char v49;
  void *v50;
  char v51;
  void *v52;
  char v53;
  void *v54;
  char v55;
  std::string v56;
  std::string v57;
  void *v58;
  char v59;
  void *v60;
  char v61;
  void *v62;
  char v63;
  void *v64;
  char v65;
  void *v66;
  char v67;
  void *v68;
  char v69;
  void *v70;
  char v71;
  void *v72;
  char v73;
  void *v74;
  char v75;
  void *v76;
  char v77;
  void *v78;
  char v79;
  void *v80;
  char v81;
  void *v82;
  char v83;
  void *v84;
  char v85;
  void *v86;
  char v87;
  void *v88;
  char v89;
  void *v90;
  char v91;
  void *v92;
  char v93;
  void *v94;
  char v95;
  void *v96;
  char v97;
  void *v98;
  char v99;
  void *v100;
  char v101;
  void *v102;
  char v103;
  void *v104;
  char v105;
  void *v106;
  char v107;
  void *v108;
  char v109;
  void *v110;
  char v111;
  void *v112;
  char v113;
  void *v114;
  char v115;
  void *v116;
  char v117;
  void *v118;
  char v119;
  void *v120;
  char v121;
  void *v122;
  char v123;
  void *v124;
  char v125;
  void *v126;
  char v127;
  void *v128;
  char v129;
  void *v130;
  char v131;
  void *v132;
  char v133;
  void *v134;
  char v135;
  void *v136;
  char v137;
  void *v138;
  char v139;
  void *__p;
  char v141;
  uint64_t *v142;
  _QWORD v143[2];
  void *v144[2];
  void **v145;

  bzero(v144, 0x409uLL);
  v143[1] = 0;
  v143[0] = 0;
  v142 = v143;
  if (!a3)
  {
    siri::dialogengine::DialogPerson::GetPersonData(a2, (uint64_t)&v57);
    siri::dialogengine::PersonData::operator=((uint64_t)v144, (uint64_t)&v57);
    if (v141 < 0)
      operator delete(__p);
    if (v139 < 0)
      operator delete(v138);
    if (v137 < 0)
      operator delete(v136);
    if (v135 < 0)
      operator delete(v134);
    if (v133 < 0)
      operator delete(v132);
    if (v131 < 0)
      operator delete(v130);
    if (v129 < 0)
      operator delete(v128);
    if (v127 < 0)
      operator delete(v126);
    if (v125 < 0)
      operator delete(v124);
    if (v123 < 0)
      operator delete(v122);
    if (v121 < 0)
      operator delete(v120);
    if (v119 < 0)
      operator delete(v118);
    if (v117 < 0)
      operator delete(v116);
    if (v115 < 0)
      operator delete(v114);
    if (v113 < 0)
      operator delete(v112);
    if (v111 < 0)
      operator delete(v110);
    if (v109 < 0)
      operator delete(v108);
    if (v107 < 0)
      operator delete(v106);
    if (v105 < 0)
      operator delete(v104);
    if (v103 < 0)
      operator delete(v102);
    if (v101 < 0)
      operator delete(v100);
    if (v99 < 0)
      operator delete(v98);
    if (v97 < 0)
      operator delete(v96);
    if (v95 < 0)
      operator delete(v94);
    if (v93 < 0)
      operator delete(v92);
    if (v91 < 0)
      operator delete(v90);
    if (v89 < 0)
      operator delete(v88);
    if (v87 < 0)
      operator delete(v86);
    if (v85 < 0)
      operator delete(v84);
    if (v83 < 0)
      operator delete(v82);
    if (v81 < 0)
      operator delete(v80);
    if (v79 < 0)
      operator delete(v78);
    if (v77 < 0)
      operator delete(v76);
    if (v75 < 0)
      operator delete(v74);
    if (v73 < 0)
      operator delete(v72);
    if (v71 < 0)
      operator delete(v70);
    if (v69 < 0)
      operator delete(v68);
    if (v67 < 0)
      operator delete(v66);
    if (v65 < 0)
      operator delete(v64);
    if (v63 < 0)
      operator delete(v62);
    if (v61 < 0)
      operator delete(v60);
    if (v59 < 0)
      operator delete(v58);
    if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v57.__r_.__value_.__l.__data_);
    a3 = (const std::string *)v144;
  }
  std::string::basic_string[abi:ne180100]<0>(&v57, "personHandle");
  OptionalObjectParameter = siri::dialogengine::GetOptionalObjectParameter((const void **)&v57.__r_.__value_.__l.__data_, (uint64_t)a2);
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v57.__r_.__value_.__l.__data_);
  siri::dialogengine::CreateFullName(&v57, this, a2, a3);
  siri::dialogengine::SpeakableString::ToMultiplexedString((siri::dialogengine::SpeakableString *)&v57, &v44);
  siri::dialogengine::CreateJSONStringVal((uint64_t)&v44, (uint64_t *)&v43);
  std::string::basic_string[abi:ne180100]<0>(&v56, "personName");
  v41.__r_.__value_.__r.__words[0] = (std::string::size_type)&v56;
  v8 = std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v142, (const void **)&v56.__r_.__value_.__l.__data_, &v41);
  std::shared_ptr<siri::dialogengine::JSONValue>::operator=[abi:ne180100]((uint64_t)v8 + 56, (__int128 *)&v43);
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v56.__r_.__value_.__l.__data_);
  size = (std::__shared_weak_count *)v43.__r_.__value_.__l.__size_;
  if (v43.__r_.__value_.__l.__size_)
  {
    v10 = (unint64_t *)(v43.__r_.__value_.__l.__size_ + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v44.__r_.__value_.__l.__data_);
    if (!OptionalObjectParameter)
      goto LABEL_208;
  }
  else if (!OptionalObjectParameter)
  {
    goto LABEL_208;
  }
  std::string::basic_string[abi:ne180100]<0>(&v44, "label");
  OptionalStringParameter = siri::dialogengine::GetOptionalStringParameter((const void **)&v44.__r_.__value_.__l.__data_, (uint64_t)OptionalObjectParameter);
  v13 = OptionalStringParameter;
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v44.__r_.__value_.__l.__data_);
    if (!v13)
      goto LABEL_151;
  }
  else if (!OptionalStringParameter)
  {
    goto LABEL_151;
  }
  (*(void (**)(std::string *__return_ptr, void *))(*(_QWORD *)v13 + 48))(&v44, v13);
  siri::dialogengine::SpeakableString::ToMultiplexedString((siri::dialogengine::SpeakableString *)&v44, &v56);
  if (v55 < 0)
    operator delete(v54);
  if (v53 < 0)
    operator delete(v52);
  if (v51 < 0)
    operator delete(v50);
  if (v49 < 0)
    operator delete(v48);
  if (v47 < 0)
    operator delete(v46);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v44.__r_.__value_.__l.__data_);
  siri::dialogengine::CreateJSONStringVal((uint64_t)&v56, (uint64_t *)&v43);
  std::string::basic_string[abi:ne180100]<0>(&v44, "handleLabel");
  v41.__r_.__value_.__r.__words[0] = (std::string::size_type)&v44;
  v14 = std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v142, (const void **)&v44.__r_.__value_.__l.__data_, &v41);
  std::shared_ptr<siri::dialogengine::JSONValue>::operator=[abi:ne180100]((uint64_t)v14 + 56, (__int128 *)&v43);
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v44.__r_.__value_.__l.__data_);
  v15 = (std::__shared_weak_count *)v43.__r_.__value_.__l.__size_;
  if (v43.__r_.__value_.__l.__size_)
  {
    v16 = (unint64_t *)(v43.__r_.__value_.__l.__size_ + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  siri::dialogengine::StringToLower((uint64_t)&v56, (uint64_t)&v44);
  siri::dialogengine::CreateJSONStringVal((uint64_t)&v44, (uint64_t *)&v41);
  std::string::basic_string[abi:ne180100]<0>(&v43, "handleLabelLower");
  v39[0] = &v43;
  v18 = std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v142, (const void **)&v43.__r_.__value_.__l.__data_, (_OWORD **)v39);
  std::shared_ptr<siri::dialogengine::JSONValue>::operator=[abi:ne180100]((uint64_t)v18 + 56, (__int128 *)&v41);
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v43.__r_.__value_.__l.__data_);
  v19 = (std::__shared_weak_count *)v41.__r_.__value_.__l.__size_;
  if (v41.__r_.__value_.__l.__size_)
  {
    v20 = (unint64_t *)(v41.__r_.__value_.__l.__size_ + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v44.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v43, "com.apple.intents.PersonHandleLabel.");
  std::string::basic_string[abi:ne180100]<0>(&v41, "");
  siri::dialogengine::StringReplace((uint64_t)&v56, (char *)&v43, (uint64_t)&v41, 0, &v44);
  siri::dialogengine::CreateJSONStringVal((uint64_t)&v44, (uint64_t *)&v42);
  std::string::basic_string[abi:ne180100]<0>(v39, "handleLabelStripped");
  v145 = v39;
  v22 = std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v142, (const void **)v39, (_OWORD **)&v145);
  std::shared_ptr<siri::dialogengine::JSONValue>::operator=[abi:ne180100]((uint64_t)v22 + 56, &v42);
  if (v40 < 0)
    operator delete(v39[0]);
  v23 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
  if (*((_QWORD *)&v42 + 1))
  {
    v24 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v44.__r_.__value_.__l.__data_);
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v41.__r_.__value_.__l.__data_);
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v43.__r_.__value_.__l.__data_);
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v56.__r_.__value_.__l.__data_);
LABEL_151:
  std::string::basic_string[abi:ne180100]<0>(&v44, "type");
  v26 = siri::dialogengine::GetOptionalStringParameter((const void **)&v44.__r_.__value_.__l.__data_, (uint64_t)OptionalObjectParameter);
  v27 = v26;
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v44.__r_.__value_.__l.__data_);
    if (!v27)
      goto LABEL_181;
  }
  else if (!v26)
  {
    goto LABEL_181;
  }
  (*(void (**)(std::string *__return_ptr, void *))(*(_QWORD *)v27 + 48))(&v44, v27);
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v56, v44.__r_.__value_.__l.__data_, v44.__r_.__value_.__l.__size_);
  else
    v56 = v44;
  siri::dialogengine::CreateJSONStringVal((uint64_t)&v56, (uint64_t *)&v41);
  std::string::basic_string[abi:ne180100]<0>(&v43, "handleType");
  v39[0] = &v43;
  v28 = std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v142, (const void **)&v43.__r_.__value_.__l.__data_, (_OWORD **)v39);
  std::shared_ptr<siri::dialogengine::JSONValue>::operator=[abi:ne180100]((uint64_t)v28 + 56, (__int128 *)&v41);
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v43.__r_.__value_.__l.__data_);
  v29 = (std::__shared_weak_count *)v41.__r_.__value_.__l.__size_;
  if (v41.__r_.__value_.__l.__size_)
  {
    v30 = (unint64_t *)(v41.__r_.__value_.__l.__size_ + 8);
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v56.__r_.__value_.__l.__data_);
  if (v55 < 0)
    operator delete(v54);
  if (v53 < 0)
    operator delete(v52);
  if (v51 < 0)
    operator delete(v50);
  if (v49 < 0)
    operator delete(v48);
  if (v47 < 0)
    operator delete(v46);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v44.__r_.__value_.__l.__data_);
LABEL_181:
  std::string::basic_string[abi:ne180100]<0>(&v44, "value");
  v32 = siri::dialogengine::GetOptionalStringParameter((const void **)&v44.__r_.__value_.__l.__data_, (uint64_t)OptionalObjectParameter);
  v33 = v32;
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v44.__r_.__value_.__l.__data_);
    if (!v33)
      goto LABEL_208;
  }
  else if (!v32)
  {
    goto LABEL_208;
  }
  (*(void (**)(std::string *__return_ptr, void *))(*(_QWORD *)v33 + 48))(&v44, v33);
  siri::dialogengine::SpeakableString::ToMultiplexedString((siri::dialogengine::SpeakableString *)&v44, &v56);
  siri::dialogengine::CreateJSONStringVal((uint64_t)&v56, (uint64_t *)&v41);
  std::string::basic_string[abi:ne180100]<0>(&v43, "handleValue");
  v39[0] = &v43;
  v34 = std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v142, (const void **)&v43.__r_.__value_.__l.__data_, (_OWORD **)v39);
  std::shared_ptr<siri::dialogengine::JSONValue>::operator=[abi:ne180100]((uint64_t)v34 + 56, (__int128 *)&v41);
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v43.__r_.__value_.__l.__data_);
  v35 = (std::__shared_weak_count *)v41.__r_.__value_.__l.__size_;
  if (v41.__r_.__value_.__l.__size_)
  {
    v36 = (unint64_t *)(v41.__r_.__value_.__l.__size_ + 8);
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v56.__r_.__value_.__l.__data_);
  if (v55 < 0)
    operator delete(v54);
  if (v53 < 0)
    operator delete(v52);
  if (v51 < 0)
    operator delete(v50);
  if (v49 < 0)
    operator delete(v48);
  if (v47 < 0)
    operator delete(v46);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v44.__r_.__value_.__l.__data_);
LABEL_208:
  std::string::basic_string[abi:ne180100]<0>(&v56, "person#formatWithHandle");
  siri::dialogengine::ExecuteSharedCat(this, (uint64_t)&v56, (const void ***)&v142, (uint64_t)&v44);
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v56.__r_.__value_.__l.__data_);
  v38 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&v56, "");
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v43, v44.__r_.__value_.__l.__data_, v44.__r_.__value_.__l.__size_);
  else
    v43 = v44;
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v41, v45.__r_.__value_.__l.__data_, v45.__r_.__value_.__l.__size_);
  else
    v41 = v45;
  siri::dialogengine::VariableString::VariableString(v38, &v56, &v43, &v41);
}

void sub_1BFBDA4AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47)
{
  siri::dialogengine::SpeakableString::~SpeakableString(&a22);
  siri::dialogengine::SpeakableString::~SpeakableString(&a47);
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy((_QWORD *)STACK[0x548]);
  siri::dialogengine::PersonData::~PersonData((void **)&STACK[0x558]);
  _Unwind_Resume(a1);
}

void sub_1BFBDA714(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *__p,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  if (a52 < 0)
    operator delete(__p);
  JUMPOUT(0x1BFBDA6F8);
}

void sub_1BFBDA72C()
{
  JUMPOUT(0x1BFBDA6F8);
}

siri::dialogengine::DialogPerson *siri::dialogengine::DialogPerson::toString(siri::dialogengine::DialogPerson *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3, const siri::dialogengine::PersonData *a4)
{
  std::string *v4;
  siri::dialogengine::Variable *v5;

  v4 = siri::dialogengine::DialogPerson::GetToString(this, a2, 0, a4);
  return siri::dialogengine::DialogPerson::RemoveEmojis((siri::dialogengine::DialogPerson *)v4, v5);
}

siri::dialogengine::DialogPerson *siri::dialogengine::DialogPerson::givenName(siri::dialogengine::DialogPerson *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  std::string *v4;
  siri::dialogengine::Variable *v5;
  siri::dialogengine::DialogPerson *v6;
  std::string v8;
  std::string __str;
  void *v10;
  char v11;
  void *v12;
  char v13;
  void *v14;
  char v15;
  void *v16;
  char v17;
  void *v18;
  char v19;
  void *v20;
  char v21;
  void *v22;
  char v23;
  void *v24;
  char v25;
  void *v26;
  char v27;
  void *v28;
  char v29;
  void *v30;
  char v31;
  void *v32;
  char v33;
  void *v34;
  char v35;
  void *v36;
  char v37;
  void *v38;
  char v39;
  void *v40;
  char v41;
  void *v42;
  char v43;
  void *v44;
  char v45;
  void *v46;
  char v47;
  void *v48;
  char v49;
  void *v50;
  char v51;
  void *v52;
  char v53;
  void *v54;
  char v55;
  void *v56;
  char v57;
  void *v58;
  char v59;
  void *v60;
  char v61;
  void *v62;
  char v63;
  void *v64;
  char v65;
  void *v66;
  char v67;
  void *v68;
  char v69;
  void *v70;
  char v71;
  void *v72;
  char v73;
  void *v74;
  char v75;
  void *v76;
  char v77;
  void *v78;
  char v79;
  void *v80;
  char v81;
  void *v82;
  char v83;
  void *v84;
  char v85;
  void *v86;
  char v87;
  void *v88;
  char v89;
  void *v90;
  char v91;
  void *__p;
  char v93;
  std::string v94;
  std::string v95;
  void *v96;
  char v97;
  void *v98;
  char v99;
  void *v100;
  char v101;
  void *v102;
  char v103;
  void *v104;
  char v105;

  siri::dialogengine::DialogPerson::GetPersonData(a2, (uint64_t)&__str);
  siri::dialogengine::SpeakableString::SpeakableString(&v94, (const siri::dialogengine::SpeakableString *)&__str);
  if (v93 < 0)
    operator delete(__p);
  if (v91 < 0)
    operator delete(v90);
  if (v89 < 0)
    operator delete(v88);
  if (v87 < 0)
    operator delete(v86);
  if (v85 < 0)
    operator delete(v84);
  if (v83 < 0)
    operator delete(v82);
  if (v81 < 0)
    operator delete(v80);
  if (v79 < 0)
    operator delete(v78);
  if (v77 < 0)
    operator delete(v76);
  if (v75 < 0)
    operator delete(v74);
  if (v73 < 0)
    operator delete(v72);
  if (v71 < 0)
    operator delete(v70);
  if (v69 < 0)
    operator delete(v68);
  if (v67 < 0)
    operator delete(v66);
  if (v65 < 0)
    operator delete(v64);
  if (v63 < 0)
    operator delete(v62);
  if (v61 < 0)
    operator delete(v60);
  if (v59 < 0)
    operator delete(v58);
  if (v57 < 0)
    operator delete(v56);
  if (v55 < 0)
    operator delete(v54);
  if (v53 < 0)
    operator delete(v52);
  if (v51 < 0)
    operator delete(v50);
  if (v49 < 0)
    operator delete(v48);
  if (v47 < 0)
    operator delete(v46);
  if (v45 < 0)
    operator delete(v44);
  if (v43 < 0)
    operator delete(v42);
  if (v41 < 0)
    operator delete(v40);
  if (v39 < 0)
    operator delete(v38);
  if (v37 < 0)
    operator delete(v36);
  if (v35 < 0)
    operator delete(v34);
  if (v33 < 0)
    operator delete(v32);
  if (v31 < 0)
    operator delete(v30);
  if (v29 < 0)
    operator delete(v28);
  if (v27 < 0)
    operator delete(v26);
  if (v25 < 0)
    operator delete(v24);
  if (v23 < 0)
    operator delete(v22);
  if (v21 < 0)
    operator delete(v20);
  if (v19 < 0)
    operator delete(v18);
  if (v17 < 0)
    operator delete(v16);
  if (v15 < 0)
    operator delete(v14);
  if (v13 < 0)
    operator delete(v12);
  if (v11 < 0)
    operator delete(v10);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v8, v95.__r_.__value_.__l.__data_, v95.__r_.__value_.__l.__size_);
  else
    v8 = v95;
  siri::dialogengine::DialogPerson::FormatSpeakableName(this, (uint64_t)&v8, &__str);
  std::string::operator=(&v95, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8.__r_.__value_.__l.__data_);
  v4 = (std::string *)operator new();
  std::string::basic_string[abi:ne180100]<0>(&__str, "");
  siri::dialogengine::VariableString::VariableString(v4, &__str, (const siri::dialogengine::SpeakableString *)&v94);
  v6 = siri::dialogengine::DialogPerson::RemoveEmojis((siri::dialogengine::DialogPerson *)v4, v5);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v105 < 0)
    operator delete(v104);
  if (v103 < 0)
    operator delete(v102);
  if (v101 < 0)
    operator delete(v100);
  if (v99 < 0)
    operator delete(v98);
  if (v97 < 0)
    operator delete(v96);
  if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v95.__r_.__value_.__l.__data_);
  if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v94.__r_.__value_.__l.__data_);
  return v6;
}

void sub_1BFBDAB7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;

  siri::dialogengine::SpeakableString::~SpeakableString((void **)(v20 - 200));
  _Unwind_Resume(a1);
}

siri::dialogengine::DialogPerson *siri::dialogengine::DialogPerson::middleName(siri::dialogengine::DialogPerson *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  std::string *v4;
  siri::dialogengine::Variable *v5;
  siri::dialogengine::DialogPerson *v6;
  std::string v8;
  std::string __str;
  void *v10;
  char v11;
  void *v12;
  char v13;
  void *v14;
  char v15;
  void *v16;
  char v17;
  void *v18;
  char v19;
  void *v20;
  char v21;
  void *v22;
  char v23;
  void *v24;
  char v25;
  void *v26;
  char v27;
  void *v28;
  char v29;
  void *v30;
  char v31;
  void *v32;
  char v33;
  void *v34;
  char v35;
  void *v36;
  char v37;
  void *v38;
  char v39;
  void *v40;
  char v41;
  void *v42;
  char v43;
  void *v44;
  char v45;
  void *v46;
  char v47;
  void *v48;
  char v49;
  void *v50;
  char v51;
  void *v52;
  char v53;
  void *v54;
  char v55;
  void *v56;
  char v57;
  void *v58;
  char v59;
  void *v60;
  char v61;
  void *v62;
  char v63;
  void *v64;
  char v65;
  void *v66;
  char v67;
  void *v68;
  char v69;
  void *v70;
  char v71;
  void *v72;
  char v73;
  void *v74;
  char v75;
  void *v76;
  char v77;
  void *v78;
  char v79;
  void *v80;
  char v81;
  void *v82;
  char v83;
  void *v84;
  char v85;
  void *v86;
  char v87;
  void *v88;
  char v89;
  void *v90;
  char v91;
  void *__p;
  char v93;
  std::string v94;
  std::string v95;
  void *v96;
  char v97;
  void *v98;
  char v99;
  void *v100;
  char v101;
  void *v102;
  char v103;
  void *v104;
  char v105;

  siri::dialogengine::DialogPerson::GetPersonData(a2, (uint64_t)&__str);
  siri::dialogengine::SpeakableString::SpeakableString(&v94, (const siri::dialogengine::SpeakableString *)&v22);
  if (v93 < 0)
    operator delete(__p);
  if (v91 < 0)
    operator delete(v90);
  if (v89 < 0)
    operator delete(v88);
  if (v87 < 0)
    operator delete(v86);
  if (v85 < 0)
    operator delete(v84);
  if (v83 < 0)
    operator delete(v82);
  if (v81 < 0)
    operator delete(v80);
  if (v79 < 0)
    operator delete(v78);
  if (v77 < 0)
    operator delete(v76);
  if (v75 < 0)
    operator delete(v74);
  if (v73 < 0)
    operator delete(v72);
  if (v71 < 0)
    operator delete(v70);
  if (v69 < 0)
    operator delete(v68);
  if (v67 < 0)
    operator delete(v66);
  if (v65 < 0)
    operator delete(v64);
  if (v63 < 0)
    operator delete(v62);
  if (v61 < 0)
    operator delete(v60);
  if (v59 < 0)
    operator delete(v58);
  if (v57 < 0)
    operator delete(v56);
  if (v55 < 0)
    operator delete(v54);
  if (v53 < 0)
    operator delete(v52);
  if (v51 < 0)
    operator delete(v50);
  if (v49 < 0)
    operator delete(v48);
  if (v47 < 0)
    operator delete(v46);
  if (v45 < 0)
    operator delete(v44);
  if (v43 < 0)
    operator delete(v42);
  if (v41 < 0)
    operator delete(v40);
  if (v39 < 0)
    operator delete(v38);
  if (v37 < 0)
    operator delete(v36);
  if (v35 < 0)
    operator delete(v34);
  if (v33 < 0)
    operator delete(v32);
  if (v31 < 0)
    operator delete(v30);
  if (v29 < 0)
    operator delete(v28);
  if (v27 < 0)
    operator delete(v26);
  if (v25 < 0)
    operator delete(v24);
  if (v23 < 0)
    operator delete(v22);
  if (v21 < 0)
    operator delete(v20);
  if (v19 < 0)
    operator delete(v18);
  if (v17 < 0)
    operator delete(v16);
  if (v15 < 0)
    operator delete(v14);
  if (v13 < 0)
    operator delete(v12);
  if (v11 < 0)
    operator delete(v10);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v8, v95.__r_.__value_.__l.__data_, v95.__r_.__value_.__l.__size_);
  else
    v8 = v95;
  siri::dialogengine::DialogPerson::FormatSpeakableName(this, (uint64_t)&v8, &__str);
  std::string::operator=(&v95, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8.__r_.__value_.__l.__data_);
  v4 = (std::string *)operator new();
  std::string::basic_string[abi:ne180100]<0>(&__str, "");
  siri::dialogengine::VariableString::VariableString(v4, &__str, (const siri::dialogengine::SpeakableString *)&v94);
  v6 = siri::dialogengine::DialogPerson::RemoveEmojis((siri::dialogengine::DialogPerson *)v4, v5);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v105 < 0)
    operator delete(v104);
  if (v103 < 0)
    operator delete(v102);
  if (v101 < 0)
    operator delete(v100);
  if (v99 < 0)
    operator delete(v98);
  if (v97 < 0)
    operator delete(v96);
  if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v95.__r_.__value_.__l.__data_);
  if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v94.__r_.__value_.__l.__data_);
  return v6;
}

void sub_1BFBDB04C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;

  siri::dialogengine::SpeakableString::~SpeakableString((void **)(v20 - 200));
  _Unwind_Resume(a1);
}

siri::dialogengine::DialogPerson *siri::dialogengine::DialogPerson::familyName(siri::dialogengine::DialogPerson *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  std::string *v4;
  siri::dialogengine::Variable *v5;
  siri::dialogengine::DialogPerson *v6;
  std::string v8;
  std::string __str;
  void *v10;
  char v11;
  void *v12;
  char v13;
  void *v14;
  char v15;
  void *v16;
  char v17;
  void *v18;
  char v19;
  void *v20;
  char v21;
  void *v22;
  char v23;
  void *v24;
  char v25;
  void *v26;
  char v27;
  void *v28;
  char v29;
  void *v30;
  char v31;
  void *v32;
  char v33;
  void *v34;
  char v35;
  void *v36;
  char v37;
  void *v38;
  char v39;
  void *v40;
  char v41;
  void *v42;
  char v43;
  void *v44;
  char v45;
  void *v46;
  char v47;
  void *v48;
  char v49;
  void *v50;
  char v51;
  void *v52;
  char v53;
  void *v54;
  char v55;
  void *v56;
  char v57;
  void *v58;
  char v59;
  void *v60;
  char v61;
  void *v62;
  char v63;
  void *v64;
  char v65;
  void *v66;
  char v67;
  void *v68;
  char v69;
  void *v70;
  char v71;
  void *v72;
  char v73;
  void *v74;
  char v75;
  void *v76;
  char v77;
  void *v78;
  char v79;
  void *v80;
  char v81;
  void *v82;
  char v83;
  void *v84;
  char v85;
  void *v86;
  char v87;
  void *v88;
  char v89;
  void *v90;
  char v91;
  void *__p;
  char v93;
  std::string v94;
  std::string v95;
  void *v96;
  char v97;
  void *v98;
  char v99;
  void *v100;
  char v101;
  void *v102;
  char v103;
  void *v104;
  char v105;

  siri::dialogengine::DialogPerson::GetPersonData(a2, (uint64_t)&__str);
  siri::dialogengine::SpeakableString::SpeakableString(&v94, (const siri::dialogengine::SpeakableString *)&v36);
  if (v93 < 0)
    operator delete(__p);
  if (v91 < 0)
    operator delete(v90);
  if (v89 < 0)
    operator delete(v88);
  if (v87 < 0)
    operator delete(v86);
  if (v85 < 0)
    operator delete(v84);
  if (v83 < 0)
    operator delete(v82);
  if (v81 < 0)
    operator delete(v80);
  if (v79 < 0)
    operator delete(v78);
  if (v77 < 0)
    operator delete(v76);
  if (v75 < 0)
    operator delete(v74);
  if (v73 < 0)
    operator delete(v72);
  if (v71 < 0)
    operator delete(v70);
  if (v69 < 0)
    operator delete(v68);
  if (v67 < 0)
    operator delete(v66);
  if (v65 < 0)
    operator delete(v64);
  if (v63 < 0)
    operator delete(v62);
  if (v61 < 0)
    operator delete(v60);
  if (v59 < 0)
    operator delete(v58);
  if (v57 < 0)
    operator delete(v56);
  if (v55 < 0)
    operator delete(v54);
  if (v53 < 0)
    operator delete(v52);
  if (v51 < 0)
    operator delete(v50);
  if (v49 < 0)
    operator delete(v48);
  if (v47 < 0)
    operator delete(v46);
  if (v45 < 0)
    operator delete(v44);
  if (v43 < 0)
    operator delete(v42);
  if (v41 < 0)
    operator delete(v40);
  if (v39 < 0)
    operator delete(v38);
  if (v37 < 0)
    operator delete(v36);
  if (v35 < 0)
    operator delete(v34);
  if (v33 < 0)
    operator delete(v32);
  if (v31 < 0)
    operator delete(v30);
  if (v29 < 0)
    operator delete(v28);
  if (v27 < 0)
    operator delete(v26);
  if (v25 < 0)
    operator delete(v24);
  if (v23 < 0)
    operator delete(v22);
  if (v21 < 0)
    operator delete(v20);
  if (v19 < 0)
    operator delete(v18);
  if (v17 < 0)
    operator delete(v16);
  if (v15 < 0)
    operator delete(v14);
  if (v13 < 0)
    operator delete(v12);
  if (v11 < 0)
    operator delete(v10);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v8, v95.__r_.__value_.__l.__data_, v95.__r_.__value_.__l.__size_);
  else
    v8 = v95;
  siri::dialogengine::DialogPerson::FormatSpeakableName(this, (uint64_t)&v8, &__str);
  std::string::operator=(&v95, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8.__r_.__value_.__l.__data_);
  v4 = (std::string *)operator new();
  std::string::basic_string[abi:ne180100]<0>(&__str, "");
  siri::dialogengine::VariableString::VariableString(v4, &__str, (const siri::dialogengine::SpeakableString *)&v94);
  v6 = siri::dialogengine::DialogPerson::RemoveEmojis((siri::dialogengine::DialogPerson *)v4, v5);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v105 < 0)
    operator delete(v104);
  if (v103 < 0)
    operator delete(v102);
  if (v101 < 0)
    operator delete(v100);
  if (v99 < 0)
    operator delete(v98);
  if (v97 < 0)
    operator delete(v96);
  if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v95.__r_.__value_.__l.__data_);
  if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v94.__r_.__value_.__l.__data_);
  return v6;
}

void sub_1BFBDB51C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;

  siri::dialogengine::SpeakableString::~SpeakableString((void **)(v20 - 200));
  _Unwind_Resume(a1);
}

siri::dialogengine::DialogPerson *siri::dialogengine::DialogPerson::nickname(siri::dialogengine::DialogPerson *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  std::string *v4;
  siri::dialogengine::Variable *v5;
  siri::dialogengine::DialogPerson *v6;
  std::string v8;
  std::string __str;
  void *v10;
  char v11;
  void *v12;
  char v13;
  void *v14;
  char v15;
  void *v16;
  char v17;
  void *v18;
  char v19;
  void *v20;
  char v21;
  void *v22;
  char v23;
  void *v24;
  char v25;
  void *v26;
  char v27;
  void *v28;
  char v29;
  void *v30;
  char v31;
  void *v32;
  char v33;
  void *v34;
  char v35;
  void *v36;
  char v37;
  void *v38;
  char v39;
  void *v40;
  char v41;
  void *v42;
  char v43;
  void *v44;
  char v45;
  void *v46;
  char v47;
  void *v48;
  char v49;
  void *v50;
  char v51;
  void *v52;
  char v53;
  void *v54;
  char v55;
  void *v56;
  char v57;
  void *v58;
  char v59;
  void *v60;
  char v61;
  void *v62;
  char v63;
  void *v64;
  char v65;
  void *v66;
  char v67;
  void *v68;
  char v69;
  void *v70;
  char v71;
  void *v72;
  char v73;
  void *v74;
  char v75;
  void *v76;
  char v77;
  void *v78;
  char v79;
  void *v80;
  char v81;
  void *v82;
  char v83;
  void *v84;
  char v85;
  void *v86;
  char v87;
  void *v88;
  char v89;
  void *v90;
  char v91;
  void *__p;
  char v93;
  std::string v94;
  std::string v95;
  void *v96;
  char v97;
  void *v98;
  char v99;
  void *v100;
  char v101;
  void *v102;
  char v103;
  void *v104;
  char v105;

  siri::dialogengine::DialogPerson::GetPersonData(a2, (uint64_t)&__str);
  siri::dialogengine::SpeakableString::SpeakableString(&v94, (const siri::dialogengine::SpeakableString *)&v50);
  if (v93 < 0)
    operator delete(__p);
  if (v91 < 0)
    operator delete(v90);
  if (v89 < 0)
    operator delete(v88);
  if (v87 < 0)
    operator delete(v86);
  if (v85 < 0)
    operator delete(v84);
  if (v83 < 0)
    operator delete(v82);
  if (v81 < 0)
    operator delete(v80);
  if (v79 < 0)
    operator delete(v78);
  if (v77 < 0)
    operator delete(v76);
  if (v75 < 0)
    operator delete(v74);
  if (v73 < 0)
    operator delete(v72);
  if (v71 < 0)
    operator delete(v70);
  if (v69 < 0)
    operator delete(v68);
  if (v67 < 0)
    operator delete(v66);
  if (v65 < 0)
    operator delete(v64);
  if (v63 < 0)
    operator delete(v62);
  if (v61 < 0)
    operator delete(v60);
  if (v59 < 0)
    operator delete(v58);
  if (v57 < 0)
    operator delete(v56);
  if (v55 < 0)
    operator delete(v54);
  if (v53 < 0)
    operator delete(v52);
  if (v51 < 0)
    operator delete(v50);
  if (v49 < 0)
    operator delete(v48);
  if (v47 < 0)
    operator delete(v46);
  if (v45 < 0)
    operator delete(v44);
  if (v43 < 0)
    operator delete(v42);
  if (v41 < 0)
    operator delete(v40);
  if (v39 < 0)
    operator delete(v38);
  if (v37 < 0)
    operator delete(v36);
  if (v35 < 0)
    operator delete(v34);
  if (v33 < 0)
    operator delete(v32);
  if (v31 < 0)
    operator delete(v30);
  if (v29 < 0)
    operator delete(v28);
  if (v27 < 0)
    operator delete(v26);
  if (v25 < 0)
    operator delete(v24);
  if (v23 < 0)
    operator delete(v22);
  if (v21 < 0)
    operator delete(v20);
  if (v19 < 0)
    operator delete(v18);
  if (v17 < 0)
    operator delete(v16);
  if (v15 < 0)
    operator delete(v14);
  if (v13 < 0)
    operator delete(v12);
  if (v11 < 0)
    operator delete(v10);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v8, v95.__r_.__value_.__l.__data_, v95.__r_.__value_.__l.__size_);
  else
    v8 = v95;
  siri::dialogengine::DialogPerson::FormatSpeakableName(this, (uint64_t)&v8, &__str);
  std::string::operator=(&v95, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8.__r_.__value_.__l.__data_);
  v4 = (std::string *)operator new();
  std::string::basic_string[abi:ne180100]<0>(&__str, "");
  siri::dialogengine::VariableString::VariableString(v4, &__str, (const siri::dialogengine::SpeakableString *)&v94);
  v6 = siri::dialogengine::DialogPerson::RemoveEmojis((siri::dialogengine::DialogPerson *)v4, v5);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v105 < 0)
    operator delete(v104);
  if (v103 < 0)
    operator delete(v102);
  if (v101 < 0)
    operator delete(v100);
  if (v99 < 0)
    operator delete(v98);
  if (v97 < 0)
    operator delete(v96);
  if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v95.__r_.__value_.__l.__data_);
  if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v94.__r_.__value_.__l.__data_);
  return v6;
}

void sub_1BFBDB9EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;

  siri::dialogengine::SpeakableString::~SpeakableString((void **)(v20 - 200));
  _Unwind_Resume(a1);
}

siri::dialogengine::VariableObject *siri::dialogengine::DialogPerson::pronoun(siri::dialogengine::DialogPerson *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  siri::dialogengine::VariableObject *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v12;
  std::__shared_weak_count *v13;
  std::string v14;
  void *v15;
  char v16;
  void *v17;
  char v18;
  void *v19;
  char v20;
  void *v21;
  char v22;
  void *v23;
  char v24;
  void *v25;
  char v26;
  void *v27;
  char v28;
  void *v29;
  char v30;
  void *v31;
  char v32;
  void *v33;
  char v34;
  void *v35;
  char v36;
  void *v37;
  char v38;
  void *v39;
  char v40;
  void *v41;
  char v42;
  void *v43;
  char v44;
  void *v45;
  char v46;
  void *v47;
  char v48;
  void *v49;
  char v50;
  void *v51;
  char v52;
  void *v53;
  char v54;
  void *v55;
  char v56;
  void *v57;
  char v58;
  void *v59;
  char v60;
  void *v61;
  char v62;
  void *v63;
  char v64;
  void *v65;
  char v66;
  void *v67;
  char v68;
  void *v69;
  char v70;
  void *v71;
  char v72;
  void *v73;
  char v74;
  void *v75;
  char v76;
  void *v77;
  char v78;
  void *v79;
  char v80;
  void *v81;
  char v82;
  void *v83;
  char v84;
  void *v85;
  char v86;
  void *v87;
  char v88;
  void *v89;
  char v90;
  void *v91;
  char v92;
  void *v93;
  char v94;
  void *v95;
  char v96;
  void *__p;
  char v98;
  std::string v99;
  uint64_t v100;
  std::__shared_weak_count *v101;

  v4 = (siri::dialogengine::VariableObject *)operator new();
  siri::dialogengine::VariableObject::VariableObject(v4);
  std::string::basic_string[abi:ne180100]<0>(&v99, "gender");
  siri::dialogengine::DialogPerson::GetPersonData(a2, (uint64_t)&v14);
  siri::dialogengine::VariableObject::AddStringProperty((uint64_t)v4, &v99, (uint64_t)&__p, &v100);
  v5 = v101;
  if (v101)
  {
    p_shared_owners = (unint64_t *)&v101->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (v98 < 0)
    operator delete(__p);
  if (v96 < 0)
    operator delete(v95);
  if (v94 < 0)
    operator delete(v93);
  if (v92 < 0)
    operator delete(v91);
  if (v90 < 0)
    operator delete(v89);
  if (v88 < 0)
    operator delete(v87);
  if (v86 < 0)
    operator delete(v85);
  if (v84 < 0)
    operator delete(v83);
  if (v82 < 0)
    operator delete(v81);
  if (v80 < 0)
    operator delete(v79);
  if (v78 < 0)
    operator delete(v77);
  if (v76 < 0)
    operator delete(v75);
  if (v74 < 0)
    operator delete(v73);
  if (v72 < 0)
    operator delete(v71);
  if (v70 < 0)
    operator delete(v69);
  if (v68 < 0)
    operator delete(v67);
  if (v66 < 0)
    operator delete(v65);
  if (v64 < 0)
    operator delete(v63);
  if (v62 < 0)
    operator delete(v61);
  if (v60 < 0)
    operator delete(v59);
  if (v58 < 0)
    operator delete(v57);
  if (v56 < 0)
    operator delete(v55);
  if (v54 < 0)
    operator delete(v53);
  if (v52 < 0)
    operator delete(v51);
  if (v50 < 0)
    operator delete(v49);
  if (v48 < 0)
    operator delete(v47);
  if (v46 < 0)
    operator delete(v45);
  if (v44 < 0)
    operator delete(v43);
  if (v42 < 0)
    operator delete(v41);
  if (v40 < 0)
    operator delete(v39);
  if (v38 < 0)
    operator delete(v37);
  if (v36 < 0)
    operator delete(v35);
  if (v34 < 0)
    operator delete(v33);
  if (v32 < 0)
    operator delete(v31);
  if (v30 < 0)
    operator delete(v29);
  if (v28 < 0)
    operator delete(v27);
  if (v26 < 0)
    operator delete(v25);
  if (v24 < 0)
    operator delete(v23);
  if (v22 < 0)
    operator delete(v21);
  if (v20 < 0)
    operator delete(v19);
  if (v18 < 0)
    operator delete(v17);
  if (v16 < 0)
    operator delete(v15);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v99.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v14, "requestType");
  std::string::basic_string[abi:ne180100]<0>(&v99, "dialog.Person");
  siri::dialogengine::VariableObject::AddStringProperty((uint64_t)v4, &v14, (uint64_t)&v99, &v12);
  v8 = v13;
  if (v13)
  {
    v9 = (unint64_t *)&v13->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v99.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  return v4;
}

void sub_1BFBDBE90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;

  if (*(char *)(v17 - 49) < 0)
    operator delete(*(void **)(v17 - 72));
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

siri::dialogengine::DialogPerson *siri::dialogengine::DialogPerson::simpleName(siri::dialogengine::DialogPerson *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3, const siri::dialogengine::PersonData *a4)
{
  siri::dialogengine::DialogPerson *SimpleName;
  siri::dialogengine::Variable *v5;

  SimpleName = siri::dialogengine::DialogPerson::GetSimpleName(this, a2, 0, a4);
  return siri::dialogengine::DialogPerson::RemoveEmojis(SimpleName, v5);
}

siri::dialogengine::DialogPerson *siri::dialogengine::DialogPerson::fullName(siri::dialogengine::DialogPerson *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3, const siri::dialogengine::PersonData *a4)
{
  std::string *FullName;
  siri::dialogengine::Variable *v5;

  FullName = siri::dialogengine::DialogPerson::GetFullName(this, a2, 0, a4);
  return siri::dialogengine::DialogPerson::RemoveEmojis((siri::dialogengine::DialogPerson *)FullName, v5);
}

void siri::dialogengine::DialogPerson::formatWithHandle(siri::dialogengine::DialogPerson *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3, const siri::dialogengine::PersonData *a4)
{
  siri::dialogengine::DialogPerson::GetFormatWithHandle(this, a2, 0, a4);
}

siri::dialogengine::DialogPerson *siri::dialogengine::DialogPerson::conversationalName(siri::dialogengine::DialogPerson *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3, const siri::dialogengine::PersonData *a4)
{
  std::string *ConversationalName;
  siri::dialogengine::Variable *v5;

  ConversationalName = siri::dialogengine::DialogPerson::GetConversationalName(this, a2, 0, a4);
  return siri::dialogengine::DialogPerson::RemoveEmojis((siri::dialogengine::DialogPerson *)ConversationalName, v5);
}

void InitDefaultsscc_info_StatusIndicator_Cancelled_StatusIndicator_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/StatusIndicator.pb.cc", a4);
  SnippetUI::StatusIndicator_Cancelled::StatusIndicator_Cancelled((SnippetUI::StatusIndicator_Cancelled *)&SnippetUI::_StatusIndicator_Cancelled_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_StatusIndicator_Cancelled_default_instance_, v4);
  qword_1ED1D4D40 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1ED1D4D48 = &SnippetUI::_OptionalBool_default_instance_;
  qword_1ED1D4D50 = (uint64_t)&SnippetUI::_ActionProperty_default_instance_;
}

SnippetUI::StatusIndicator_Cancelled *SnippetUI::StatusIndicator_Cancelled::StatusIndicator_Cancelled(SnippetUI::StatusIndicator_Cancelled *this)
{
  *(_QWORD *)this = &off_1E7936518;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 12) = 0;
  if (atomic_load(scc_info_StatusIndicator_Cancelled_StatusIndicator_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_StatusIndicator_Cancelled_StatusIndicator_2eproto);
  *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  return this;
}

void sub_1BFBDC044(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::StatusIndicator_Cancelled::~StatusIndicator_Cancelled(SnippetUI::StatusIndicator_Cancelled *this)
{
  SnippetUI::StatusIndicator_Cancelled::~StatusIndicator_Cancelled(this);
  JUMPOUT(0x1C3B8D890);
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)this = &off_1E7936518;
  v2 = *((_QWORD *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x1C3B8D890](v2, 0x1012C40EC159624);
  }
  if (this != (SnippetUI::StatusIndicator_Cancelled *)&SnippetUI::_StatusIndicator_Cancelled_default_instance_)
  {
    v4 = *((_QWORD *)this + 3);
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    v5 = *((_QWORD *)this + 4);
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    v6 = *((_QWORD *)this + 5);
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

SnippetUI::StatusIndicator_Cancelled *SnippetUI::StatusIndicator_Cancelled::New(SnippetUI::StatusIndicator_Cancelled *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::StatusIndicator_Cancelled>(0);
}

SnippetUI::StatusIndicator_Cancelled *SnippetUI::StatusIndicator_Cancelled::New(SnippetUI::StatusIndicator_Cancelled *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::StatusIndicator_Cancelled>(a2);
}

void SnippetUI::StatusIndicator_Cancelled::Clear(SnippetUI::StatusIndicator_Cancelled *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  google::protobuf::internal::InternalMetadataWithArena *v6;
  char v7;

  v2 = *((_QWORD *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(_BYTE **)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v2 = 0;
      *(_BYTE *)(v2 + 23) = 0;
    }
  }
  v3 = *((_QWORD *)this + 3);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *((_QWORD *)this + 3) = 0;
  v4 = *((_QWORD *)this + 4);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  *((_QWORD *)this + 4) = 0;
  v5 = *((_QWORD *)this + 5);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v7 = *((_BYTE *)this + 8);
  v6 = (SnippetUI::StatusIndicator_Cancelled *)((char *)this + 8);
  *((_QWORD *)v6 + 4) = 0;
  if ((v7 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v6);
}

uint64_t SnippetUI::StatusIndicator_Cancelled::IsInitialized(SnippetUI::StatusIndicator_Cancelled *this)
{
  return 1;
}

char *SnippetUI::StatusIndicator_Cancelled::ByteSizeLong(SnippetUI::StatusIndicator_Cancelled *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  const google::protobuf::UnknownFieldSet *v5;
  SnippetUI::TextProperty *v6;
  char *v7;
  SnippetUI::OptionalBool *v8;
  char *v9;
  SnippetUI::ActionProperty *v10;
  char *v11;

  v2 = *((_QWORD *)this + 2);
  v3 = *(unsigned __int8 *)(v2 + 23);
  if (*(char *)(v2 + 23) < 0)
  {
    if (*(_QWORD *)(v2 + 8))
      goto LABEL_3;
LABEL_7:
    v5 = 0;
    goto LABEL_8;
  }
  if (!*(_BYTE *)(v2 + 23))
    goto LABEL_7;
LABEL_3:
  v4 = *(_QWORD *)(v2 + 8);
  if ((v3 & 0x80u) == 0)
    v4 = v3;
  v5 = (const google::protobuf::UnknownFieldSet *)(v4 + ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_8:
  if (this != (SnippetUI::StatusIndicator_Cancelled *)&SnippetUI::_StatusIndicator_Cancelled_default_instance_)
  {
    v6 = (SnippetUI::TextProperty *)*((_QWORD *)this + 3);
    if (v6)
    {
      v7 = SnippetUI::TextProperty::ByteSizeLong(v6);
      v5 = (const google::protobuf::UnknownFieldSet *)&v7[(_QWORD)v5
                                                        + 1
                                                        + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v8 = (SnippetUI::OptionalBool *)*((_QWORD *)this + 4);
    if (v8)
    {
      v9 = SnippetUI::OptionalBool::ByteSizeLong(v8);
      v5 = (const google::protobuf::UnknownFieldSet *)&v9[(_QWORD)v5
                                                        + 1
                                                        + ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v10 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 5);
    if (v10)
    {
      v11 = SnippetUI::ActionProperty::ByteSizeLong(v10);
      v5 = (const google::protobuf::UnknownFieldSet *)&v11[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6)];
    }
  }
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::StatusIndicator_Cancelled *)((char *)this + 8), v5, (_DWORD *)this + 12);
  *((_DWORD *)this + 12) = (_DWORD)v5;
  return (char *)v5;
}

uint64_t SnippetUI::StatusIndicator_Cancelled::GetCachedSize(SnippetUI::StatusIndicator_Cancelled *this)
{
  return *((unsigned int *)this + 12);
}

google::protobuf::internal *SnippetUI::StatusIndicator_Cancelled::_InternalParse(SnippetUI::StatusIndicator_Cancelled *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  std::string **v5;
  uint64_t *v6;
  google::protobuf::internal::ParseContext *v7;
  google::protobuf::internal *TagFallback;
  char *v9;
  SnippetUI::TextProperty *v10;
  char *v11;
  std::string *v12;
  SnippetUI::OptionalBool *v13;
  SnippetUI::ActionProperty *v14;
  BOOL v15;
  google::protobuf::internal *v17;

  v17 = a2;
  v5 = (std::string **)((char *)this + 16);
  v6 = (uint64_t *)((char *)this + 8);
  while (2)
  {
    if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v17, *((_DWORD *)a3 + 23)) & 1) != 0)
      return v17;
    TagFallback = (google::protobuf::internal *)((char *)v17 + 1);
    v9 = (char *)*(unsigned __int8 *)v17;
    if ((*(char *)v17 & 0x80000000) == 0)
      goto LABEL_6;
    v9 = (char *)(v9 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v17 + 2);
LABEL_6:
      v17 = TagFallback;
      goto LABEL_7;
    }
    TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v17, v9);
    v17 = TagFallback;
    if (!TagFallback)
      return TagFallback;
LABEL_7:
    switch(v9 >> 3)
    {
      case 1u:
        if (v9 != 10)
          goto LABEL_24;
        v10 = (SnippetUI::TextProperty *)*((_QWORD *)this + 3);
        if (!v10)
        {
          v10 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
          *((_QWORD *)this + 3) = v10;
          TagFallback = v17;
        }
        v11 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::TextProperty>(a3, v10, TagFallback);
        goto LABEL_29;
      case 2u:
        if (v9 != 18)
          goto LABEL_24;
        v12 = *v5;
        if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v12 = *v5;
          TagFallback = v17;
        }
        v11 = google::protobuf::internal::InlineGreedyStringParserUTF8(v12, (std::string::value_type *)TagFallback, (uint64_t)a3, (google::protobuf::internal *)"SnippetUI.StatusIndicator_Cancelled.component_name");
        goto LABEL_29;
      case 3u:
        if (v9 != 26)
          goto LABEL_24;
        v13 = (SnippetUI::OptionalBool *)*((_QWORD *)this + 4);
        if (!v13)
        {
          v13 = (SnippetUI::OptionalBool *)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::OptionalBool>(0);
          *((_QWORD *)this + 4) = v13;
          TagFallback = v17;
        }
        v11 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::OptionalBool>(a3, v13, TagFallback);
        goto LABEL_29;
      case 4u:
        if (v9 != 34)
          goto LABEL_24;
        v14 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 5);
        if (!v14)
        {
          v14 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
          *((_QWORD *)this + 5) = v14;
          TagFallback = v17;
        }
        v11 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::ActionProperty>(a3, v14, TagFallback);
        goto LABEL_29;
      default:
LABEL_24:
        if ((_DWORD)v9)
          v15 = (v9 & 7) == 4;
        else
          v15 = 1;
        if (v15)
        {
          *((_DWORD *)a3 + 20) = (_DWORD)v9 - 1;
          return TagFallback;
        }
        v11 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v9, v6, TagFallback, a3, v7);
LABEL_29:
        v17 = (google::protobuf::internal *)v11;
        if (v11)
          continue;
        TagFallback = 0;
        break;
    }
    return TagFallback;
  }
}

const google::protobuf::UnknownFieldSet *SnippetUI::StatusIndicator_Cancelled::InternalSerializeWithCachedSizesToArray(SnippetUI::StatusIndicator_Cancelled *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  char *v5;
  SnippetUI::TextProperty *v7;
  unsigned int v8;
  google::protobuf::UnknownFieldSet *v9;
  unsigned int v10;
  _BYTE *v11;
  _BYTE *v12;
  unsigned int v13;
  unsigned int v14;
  google::protobuf::internal *v15;
  const char *v16;
  SnippetUI::OptionalBool *v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  char *v21;
  _BYTE *v22;
  _BYTE *v23;
  unsigned int v24;
  unsigned int v25;
  SnippetUI::ActionProperty *v26;
  unsigned int v27;
  google::protobuf::UnknownFieldSet *v28;
  unsigned int v29;
  _BYTE *v30;
  _BYTE *v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;

  v5 = (char *)a2;
  if (this != (SnippetUI::StatusIndicator_Cancelled *)&SnippetUI::_StatusIndicator_Cancelled_default_instance_)
  {
    v7 = (SnippetUI::TextProperty *)*((_QWORD *)this + 3);
    if (v7)
    {
      if (*(_QWORD *)a3 <= (unint64_t)a2)
      {
        v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
        v7 = (SnippetUI::TextProperty *)*((_QWORD *)this + 3);
      }
      *v5 = 10;
      v8 = *((_DWORD *)v7 + 15);
      if (v8 > 0x7F)
      {
        v5[1] = v8 | 0x80;
        v10 = v8 >> 7;
        if (v8 >> 14)
        {
          v11 = v5 + 2;
          do
          {
            v12 = v11;
            *v11++ = v10 | 0x80;
            v13 = v10 >> 7;
            v14 = v10 >> 14;
            v10 >>= 7;
          }
          while (v14);
          v9 = (google::protobuf::UnknownFieldSet *)(v12 + 2);
          *v11 = v13;
        }
        else
        {
          v5[2] = v10;
          v9 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
        }
      }
      else
      {
        v5[1] = v8;
        v9 = (google::protobuf::UnknownFieldSet *)(v5 + 2);
      }
      v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v7, v9, a3, a4);
    }
  }
  v15 = (google::protobuf::internal *)*((_QWORD *)this + 2);
  if (*((char *)v15 + 23) < 0)
  {
    v16 = (const char *)*((_QWORD *)v15 + 1);
    if (!v16)
      goto LABEL_19;
    v15 = *(google::protobuf::internal **)v15;
    goto LABEL_18;
  }
  v16 = (const char *)*((unsigned __int8 *)v15 + 23);
  if (*((_BYTE *)v15 + 23))
  {
LABEL_18:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v15, v16, 1, (google::protobuf::internal *)"SnippetUI.StatusIndicator_Cancelled.component_name");
    v5 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 2, *((_QWORD *)this + 2), v5);
  }
LABEL_19:
  if (this == (SnippetUI::StatusIndicator_Cancelled *)&SnippetUI::_StatusIndicator_Cancelled_default_instance_)
    goto LABEL_43;
  v17 = (SnippetUI::OptionalBool *)*((_QWORD *)this + 4);
  if (v17)
  {
    if ((unint64_t)v5 >= *(_QWORD *)a3)
    {
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
      v17 = (SnippetUI::OptionalBool *)*((_QWORD *)this + 4);
    }
    *v5 = 26;
    v18 = *((_DWORD *)v17 + 5);
    if (v18 > 0x7F)
    {
      v5[1] = v18 | 0x80;
      v20 = v18 >> 7;
      if (v18 >> 14)
      {
        v22 = v5 + 2;
        do
        {
          v23 = v22;
          *v22++ = v20 | 0x80;
          v24 = v20 >> 7;
          v25 = v20 >> 14;
          v20 >>= 7;
        }
        while (v25);
        v21 = v23 + 2;
        *v22 = v24;
        goto LABEL_31;
      }
      v5[2] = v20;
      v19 = 3;
    }
    else
    {
      v5[1] = v18;
      v19 = 2;
    }
    v21 = &v5[v19];
LABEL_31:
    v5 = (char *)SnippetUI::OptionalBool::InternalSerializeWithCachedSizesToArray(v17, v21, a3, a4);
  }
  v26 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 5);
  if (v26)
  {
    if ((unint64_t)v5 >= *(_QWORD *)a3)
    {
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
      v26 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 5);
    }
    *v5 = 34;
    v27 = *((_DWORD *)v26 + 12);
    if (v27 > 0x7F)
    {
      v5[1] = v27 | 0x80;
      v29 = v27 >> 7;
      if (v27 >> 14)
      {
        v30 = v5 + 2;
        do
        {
          v31 = v30;
          *v30++ = v29 | 0x80;
          v32 = v29 >> 7;
          v33 = v29 >> 14;
          v29 >>= 7;
        }
        while (v33);
        v28 = (google::protobuf::UnknownFieldSet *)(v31 + 2);
        *v30 = v32;
      }
      else
      {
        v5[2] = v29;
        v28 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
      }
    }
    else
    {
      v5[1] = v27;
      v28 = (google::protobuf::UnknownFieldSet *)(v5 + 2);
    }
    v5 = (char *)SnippetUI::ActionProperty::InternalSerializeWithCachedSizesToArray(v26, v28, a3, a4);
  }
LABEL_43:
  v34 = *((_QWORD *)this + 1);
  if ((v34 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v34 & 0xFFFFFFFFFFFFFFFELL), (const google::protobuf::UnknownFieldSet *)v5, a3, a4);
  else
    return (const google::protobuf::UnknownFieldSet *)v5;
}

void SnippetUI::StatusIndicator_Cancelled::CopyFrom(SnippetUI::StatusIndicator_Cancelled *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    SnippetUI::StatusIndicator_Cancelled::Clear(this);
    SnippetUI::StatusIndicator_Cancelled::MergeFrom(this, a2);
  }
}

void SnippetUI::StatusIndicator_Cancelled::MergeFrom(SnippetUI::StatusIndicator_Cancelled *this, const google::protobuf::Message *lpsrc)
{
  std::string *v4;
  const SnippetUI::StatusIndicator_Cancelled *v5;
  google::protobuf::Message *v6;
  char v7;
  std::string v8[2];

  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/StatusIndicator.pb.cc", 1530);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5)
    SnippetUI::StatusIndicator_Cancelled::MergeFrom(this, v5);
  else
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
}

void sub_1BFBDC80C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::StatusIndicator_Cancelled::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 48) = a2;
  return this;
}

uint64_t SnippetUI::StatusIndicator_Cancelled::GetMetadata(SnippetUI::StatusIndicator_Cancelled *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_StatusIndicator_2eproto);
  return qword_1EF5833C0;
}

void InitDefaultsscc_info_StatusIndicator_Success_StatusIndicator_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/StatusIndicator.pb.cc", a4);
  SnippetUI::StatusIndicator_Success::StatusIndicator_Success((SnippetUI::StatusIndicator_Success *)&SnippetUI::_StatusIndicator_Success_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_StatusIndicator_Success_default_instance_, v4);
  qword_1ED1D4D08 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1ED1D4D10 = &SnippetUI::_OptionalBool_default_instance_;
  qword_1ED1D4D18 = (uint64_t)&SnippetUI::_ActionProperty_default_instance_;
}

SnippetUI::StatusIndicator_Success *SnippetUI::StatusIndicator_Success::StatusIndicator_Success(SnippetUI::StatusIndicator_Success *this)
{
  *(_QWORD *)this = &off_1E79362D8;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 12) = 0;
  if (atomic_load(scc_info_StatusIndicator_Success_StatusIndicator_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_StatusIndicator_Success_StatusIndicator_2eproto);
  *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  return this;
}

void sub_1BFBDC930(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::StatusIndicator_Success::~StatusIndicator_Success(SnippetUI::StatusIndicator_Success *this)
{
  SnippetUI::StatusIndicator_Success::~StatusIndicator_Success(this);
  JUMPOUT(0x1C3B8D890);
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)this = &off_1E79362D8;
  v2 = *((_QWORD *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x1C3B8D890](v2, 0x1012C40EC159624);
  }
  if (this != (SnippetUI::StatusIndicator_Success *)&SnippetUI::_StatusIndicator_Success_default_instance_)
  {
    v4 = *((_QWORD *)this + 3);
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    v5 = *((_QWORD *)this + 4);
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    v6 = *((_QWORD *)this + 5);
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

SnippetUI::StatusIndicator_Success *SnippetUI::StatusIndicator_Success::New(SnippetUI::StatusIndicator_Success *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::StatusIndicator_Success>(0);
}

SnippetUI::StatusIndicator_Success *SnippetUI::StatusIndicator_Success::New(SnippetUI::StatusIndicator_Success *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::StatusIndicator_Success>(a2);
}

void SnippetUI::StatusIndicator_Success::Clear(SnippetUI::StatusIndicator_Success *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  google::protobuf::internal::InternalMetadataWithArena *v6;
  char v7;

  v2 = *((_QWORD *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(_BYTE **)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v2 = 0;
      *(_BYTE *)(v2 + 23) = 0;
    }
  }
  v3 = *((_QWORD *)this + 3);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *((_QWORD *)this + 3) = 0;
  v4 = *((_QWORD *)this + 4);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  *((_QWORD *)this + 4) = 0;
  v5 = *((_QWORD *)this + 5);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v7 = *((_BYTE *)this + 8);
  v6 = (SnippetUI::StatusIndicator_Success *)((char *)this + 8);
  *((_QWORD *)v6 + 4) = 0;
  if ((v7 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v6);
}

uint64_t SnippetUI::StatusIndicator_Success::IsInitialized(SnippetUI::StatusIndicator_Success *this)
{
  return 1;
}

char *SnippetUI::StatusIndicator_Success::ByteSizeLong(SnippetUI::StatusIndicator_Success *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  const google::protobuf::UnknownFieldSet *v5;
  SnippetUI::TextProperty *v6;
  char *v7;
  SnippetUI::OptionalBool *v8;
  char *v9;
  SnippetUI::ActionProperty *v10;
  char *v11;

  v2 = *((_QWORD *)this + 2);
  v3 = *(unsigned __int8 *)(v2 + 23);
  if (*(char *)(v2 + 23) < 0)
  {
    if (*(_QWORD *)(v2 + 8))
      goto LABEL_3;
LABEL_7:
    v5 = 0;
    goto LABEL_8;
  }
  if (!*(_BYTE *)(v2 + 23))
    goto LABEL_7;
LABEL_3:
  v4 = *(_QWORD *)(v2 + 8);
  if ((v3 & 0x80u) == 0)
    v4 = v3;
  v5 = (const google::protobuf::UnknownFieldSet *)(v4 + ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_8:
  if (this != (SnippetUI::StatusIndicator_Success *)&SnippetUI::_StatusIndicator_Success_default_instance_)
  {
    v6 = (SnippetUI::TextProperty *)*((_QWORD *)this + 3);
    if (v6)
    {
      v7 = SnippetUI::TextProperty::ByteSizeLong(v6);
      v5 = (const google::protobuf::UnknownFieldSet *)&v7[(_QWORD)v5
                                                        + 1
                                                        + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v8 = (SnippetUI::OptionalBool *)*((_QWORD *)this + 4);
    if (v8)
    {
      v9 = SnippetUI::OptionalBool::ByteSizeLong(v8);
      v5 = (const google::protobuf::UnknownFieldSet *)&v9[(_QWORD)v5
                                                        + 1
                                                        + ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v10 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 5);
    if (v10)
    {
      v11 = SnippetUI::ActionProperty::ByteSizeLong(v10);
      v5 = (const google::protobuf::UnknownFieldSet *)&v11[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6)];
    }
  }
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::StatusIndicator_Success *)((char *)this + 8), v5, (_DWORD *)this + 12);
  *((_DWORD *)this + 12) = (_DWORD)v5;
  return (char *)v5;
}

uint64_t SnippetUI::StatusIndicator_Success::GetCachedSize(SnippetUI::StatusIndicator_Success *this)
{
  return *((unsigned int *)this + 12);
}

google::protobuf::internal *SnippetUI::StatusIndicator_Success::_InternalParse(SnippetUI::StatusIndicator_Success *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  std::string **v5;
  uint64_t *v6;
  google::protobuf::internal::ParseContext *v7;
  google::protobuf::internal *TagFallback;
  char *v9;
  SnippetUI::TextProperty *v10;
  char *v11;
  std::string *v12;
  SnippetUI::OptionalBool *v13;
  SnippetUI::ActionProperty *v14;
  BOOL v15;
  google::protobuf::internal *v17;

  v17 = a2;
  v5 = (std::string **)((char *)this + 16);
  v6 = (uint64_t *)((char *)this + 8);
  while (2)
  {
    if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v17, *((_DWORD *)a3 + 23)) & 1) != 0)
      return v17;
    TagFallback = (google::protobuf::internal *)((char *)v17 + 1);
    v9 = (char *)*(unsigned __int8 *)v17;
    if ((*(char *)v17 & 0x80000000) == 0)
      goto LABEL_6;
    v9 = (char *)(v9 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v17 + 2);
LABEL_6:
      v17 = TagFallback;
      goto LABEL_7;
    }
    TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v17, v9);
    v17 = TagFallback;
    if (!TagFallback)
      return TagFallback;
LABEL_7:
    switch(v9 >> 3)
    {
      case 1u:
        if (v9 != 10)
          goto LABEL_24;
        v10 = (SnippetUI::TextProperty *)*((_QWORD *)this + 3);
        if (!v10)
        {
          v10 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
          *((_QWORD *)this + 3) = v10;
          TagFallback = v17;
        }
        v11 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::TextProperty>(a3, v10, TagFallback);
        goto LABEL_29;
      case 2u:
        if (v9 != 18)
          goto LABEL_24;
        v12 = *v5;
        if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v12 = *v5;
          TagFallback = v17;
        }
        v11 = google::protobuf::internal::InlineGreedyStringParserUTF8(v12, (std::string::value_type *)TagFallback, (uint64_t)a3, (google::protobuf::internal *)"SnippetUI.StatusIndicator_Success.component_name");
        goto LABEL_29;
      case 3u:
        if (v9 != 26)
          goto LABEL_24;
        v13 = (SnippetUI::OptionalBool *)*((_QWORD *)this + 4);
        if (!v13)
        {
          v13 = (SnippetUI::OptionalBool *)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::OptionalBool>(0);
          *((_QWORD *)this + 4) = v13;
          TagFallback = v17;
        }
        v11 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::OptionalBool>(a3, v13, TagFallback);
        goto LABEL_29;
      case 4u:
        if (v9 != 34)
          goto LABEL_24;
        v14 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 5);
        if (!v14)
        {
          v14 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
          *((_QWORD *)this + 5) = v14;
          TagFallback = v17;
        }
        v11 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::ActionProperty>(a3, v14, TagFallback);
        goto LABEL_29;
      default:
LABEL_24:
        if ((_DWORD)v9)
          v15 = (v9 & 7) == 4;
        else
          v15 = 1;
        if (v15)
        {
          *((_DWORD *)a3 + 20) = (_DWORD)v9 - 1;
          return TagFallback;
        }
        v11 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v9, v6, TagFallback, a3, v7);
LABEL_29:
        v17 = (google::protobuf::internal *)v11;
        if (v11)
          continue;
        TagFallback = 0;
        break;
    }
    return TagFallback;
  }
}

const google::protobuf::UnknownFieldSet *SnippetUI::StatusIndicator_Success::InternalSerializeWithCachedSizesToArray(SnippetUI::StatusIndicator_Success *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  char *v5;
  SnippetUI::TextProperty *v7;
  unsigned int v8;
  google::protobuf::UnknownFieldSet *v9;
  unsigned int v10;
  _BYTE *v11;
  _BYTE *v12;
  unsigned int v13;
  unsigned int v14;
  google::protobuf::internal *v15;
  const char *v16;
  SnippetUI::OptionalBool *v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  char *v21;
  _BYTE *v22;
  _BYTE *v23;
  unsigned int v24;
  unsigned int v25;
  SnippetUI::ActionProperty *v26;
  unsigned int v27;
  google::protobuf::UnknownFieldSet *v28;
  unsigned int v29;
  _BYTE *v30;
  _BYTE *v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;

  v5 = (char *)a2;
  if (this != (SnippetUI::StatusIndicator_Success *)&SnippetUI::_StatusIndicator_Success_default_instance_)
  {
    v7 = (SnippetUI::TextProperty *)*((_QWORD *)this + 3);
    if (v7)
    {
      if (*(_QWORD *)a3 <= (unint64_t)a2)
      {
        v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
        v7 = (SnippetUI::TextProperty *)*((_QWORD *)this + 3);
      }
      *v5 = 10;
      v8 = *((_DWORD *)v7 + 15);
      if (v8 > 0x7F)
      {
        v5[1] = v8 | 0x80;
        v10 = v8 >> 7;
        if (v8 >> 14)
        {
          v11 = v5 + 2;
          do
          {
            v12 = v11;
            *v11++ = v10 | 0x80;
            v13 = v10 >> 7;
            v14 = v10 >> 14;
            v10 >>= 7;
          }
          while (v14);
          v9 = (google::protobuf::UnknownFieldSet *)(v12 + 2);
          *v11 = v13;
        }
        else
        {
          v5[2] = v10;
          v9 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
        }
      }
      else
      {
        v5[1] = v8;
        v9 = (google::protobuf::UnknownFieldSet *)(v5 + 2);
      }
      v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v7, v9, a3, a4);
    }
  }
  v15 = (google::protobuf::internal *)*((_QWORD *)this + 2);
  if (*((char *)v15 + 23) < 0)
  {
    v16 = (const char *)*((_QWORD *)v15 + 1);
    if (!v16)
      goto LABEL_19;
    v15 = *(google::protobuf::internal **)v15;
    goto LABEL_18;
  }
  v16 = (const char *)*((unsigned __int8 *)v15 + 23);
  if (*((_BYTE *)v15 + 23))
  {
LABEL_18:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v15, v16, 1, (google::protobuf::internal *)"SnippetUI.StatusIndicator_Success.component_name");
    v5 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 2, *((_QWORD *)this + 2), v5);
  }
LABEL_19:
  if (this == (SnippetUI::StatusIndicator_Success *)&SnippetUI::_StatusIndicator_Success_default_instance_)
    goto LABEL_43;
  v17 = (SnippetUI::OptionalBool *)*((_QWORD *)this + 4);
  if (v17)
  {
    if ((unint64_t)v5 >= *(_QWORD *)a3)
    {
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
      v17 = (SnippetUI::OptionalBool *)*((_QWORD *)this + 4);
    }
    *v5 = 26;
    v18 = *((_DWORD *)v17 + 5);
    if (v18 > 0x7F)
    {
      v5[1] = v18 | 0x80;
      v20 = v18 >> 7;
      if (v18 >> 14)
      {
        v22 = v5 + 2;
        do
        {
          v23 = v22;
          *v22++ = v20 | 0x80;
          v24 = v20 >> 7;
          v25 = v20 >> 14;
          v20 >>= 7;
        }
        while (v25);
        v21 = v23 + 2;
        *v22 = v24;
        goto LABEL_31;
      }
      v5[2] = v20;
      v19 = 3;
    }
    else
    {
      v5[1] = v18;
      v19 = 2;
    }
    v21 = &v5[v19];
LABEL_31:
    v5 = (char *)SnippetUI::OptionalBool::InternalSerializeWithCachedSizesToArray(v17, v21, a3, a4);
  }
  v26 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 5);
  if (v26)
  {
    if ((unint64_t)v5 >= *(_QWORD *)a3)
    {
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
      v26 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 5);
    }
    *v5 = 34;
    v27 = *((_DWORD *)v26 + 12);
    if (v27 > 0x7F)
    {
      v5[1] = v27 | 0x80;
      v29 = v27 >> 7;
      if (v27 >> 14)
      {
        v30 = v5 + 2;
        do
        {
          v31 = v30;
          *v30++ = v29 | 0x80;
          v32 = v29 >> 7;
          v33 = v29 >> 14;
          v29 >>= 7;
        }
        while (v33);
        v28 = (google::protobuf::UnknownFieldSet *)(v31 + 2);
        *v30 = v32;
      }
      else
      {
        v5[2] = v29;
        v28 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
      }
    }
    else
    {
      v5[1] = v27;
      v28 = (google::protobuf::UnknownFieldSet *)(v5 + 2);
    }
    v5 = (char *)SnippetUI::ActionProperty::InternalSerializeWithCachedSizesToArray(v26, v28, a3, a4);
  }
LABEL_43:
  v34 = *((_QWORD *)this + 1);
  if ((v34 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v34 & 0xFFFFFFFFFFFFFFFELL), (const google::protobuf::UnknownFieldSet *)v5, a3, a4);
  else
    return (const google::protobuf::UnknownFieldSet *)v5;
}

void SnippetUI::StatusIndicator_Success::CopyFrom(SnippetUI::StatusIndicator_Success *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    SnippetUI::StatusIndicator_Success::Clear(this);
    SnippetUI::StatusIndicator_Success::MergeFrom(this, a2);
  }
}

void SnippetUI::StatusIndicator_Success::MergeFrom(SnippetUI::StatusIndicator_Success *this, const google::protobuf::Message *lpsrc)
{
  std::string *v4;
  const SnippetUI::StatusIndicator_Success *v5;
  google::protobuf::Message *v6;
  char v7;
  std::string v8[2];

  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/StatusIndicator.pb.cc", 489);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5)
    SnippetUI::StatusIndicator_Success::MergeFrom(this, v5);
  else
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
}

void sub_1BFBDD0F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::StatusIndicator_Success::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 48) = a2;
  return this;
}

uint64_t SnippetUI::StatusIndicator_Success::GetMetadata(SnippetUI::StatusIndicator_Success *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_StatusIndicator_2eproto);
  return file_level_metadata_StatusIndicator_2eproto;
}

void *SnippetUI::StatusIndicator_Success::default_instance(SnippetUI::StatusIndicator_Success *this)
{
  if (atomic_load(scc_info_StatusIndicator_Success_StatusIndicator_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_StatusIndicator_Success_StatusIndicator_2eproto);
  return &SnippetUI::_StatusIndicator_Success_default_instance_;
}

void SnippetUI::StatusIndicator_Success::MergeFrom(SnippetUI::StatusIndicator_Success *this, const SnippetUI::StatusIndicator_Success *a2)
{
  std::string *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  int **v8;
  int **v9;
  int **v10;
  const SnippetUI::OptionalBool *v11;
  SnippetUI::OptionalBool *v12;
  const SnippetUI::OptionalBool *v13;
  int **v14;
  int **v15;
  int **v16;
  char v17;
  std::string v18[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/StatusIndicator.pb.cc", 504);
    v4 = google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v18[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::StatusIndicator_Success *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  v6 = *((_QWORD *)a2 + 2);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(_QWORD *)(v6 + 8))
      goto LABEL_13;
  }
  else if (!*(_BYTE *)(v6 + 23))
  {
    goto LABEL_13;
  }
  v7 = (uint64_t *)*((_QWORD *)this + 2);
  if (v7 != (uint64_t *)v6)
  {
    if (v7 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, v6);
    else
      std::string::operator=(*((std::string **)this + 2), (const std::string *)v6);
  }
LABEL_13:
  if (a2 != (const SnippetUI::StatusIndicator_Success *)&SnippetUI::_StatusIndicator_Success_default_instance_)
  {
    v8 = (int **)*((_QWORD *)a2 + 3);
    if (v8)
    {
      v9 = (int **)*((_QWORD *)this + 3);
      if (!v9)
      {
        v9 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 3) = v9;
        v8 = (int **)*((_QWORD *)a2 + 3);
      }
      if (v8)
        v10 = v8;
      else
        v10 = (int **)&SnippetUI::_TextProperty_default_instance_;
      SnippetUI::TextProperty::MergeFrom(v9, v10);
    }
    v11 = (const SnippetUI::OptionalBool *)*((_QWORD *)a2 + 4);
    if (v11)
    {
      v12 = (SnippetUI::OptionalBool *)*((_QWORD *)this + 4);
      if (!v12)
      {
        v12 = (SnippetUI::OptionalBool *)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::OptionalBool>(0);
        *((_QWORD *)this + 4) = v12;
        v11 = (const SnippetUI::OptionalBool *)*((_QWORD *)a2 + 4);
      }
      if (v11)
        v13 = v11;
      else
        v13 = (const SnippetUI::OptionalBool *)&SnippetUI::_OptionalBool_default_instance_;
      SnippetUI::OptionalBool::MergeFrom(v12, v13);
    }
    v14 = (int **)*((_QWORD *)a2 + 5);
    if (v14)
    {
      v15 = (int **)*((_QWORD *)this + 5);
      if (!v15)
      {
        v15 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
        *((_QWORD *)this + 5) = v15;
        v14 = (int **)*((_QWORD *)a2 + 5);
      }
      if (v14)
        v16 = v14;
      else
        v16 = (int **)&SnippetUI::_ActionProperty_default_instance_;
      SnippetUI::ActionProperty::MergeFrom(v15, v16);
    }
  }
}

void sub_1BFBDD2E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

SnippetUI::StatusIndicator_Success *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::StatusIndicator_Success>(google::protobuf::internal::ArenaImpl *this)
{
  SnippetUI::StatusIndicator_Success *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (SnippetUI::StatusIndicator_Success *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x38uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::StatusIndicator_Success>);
    SnippetUI::StatusIndicator_Success::StatusIndicator_Success(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (SnippetUI::StatusIndicator_Success *)operator new();
    SnippetUI::StatusIndicator_Success::StatusIndicator_Success(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_1BFBDD384(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D890](v1, 0x10A1C40668C0A6DLL);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::StatusIndicator_Success>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

void InitDefaultsscc_info_StatusIndicator_InProgress_StatusIndicator_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/StatusIndicator.pb.cc", a4);
  SnippetUI::StatusIndicator_InProgress::StatusIndicator_InProgress((SnippetUI::StatusIndicator_InProgress *)&SnippetUI::_StatusIndicator_InProgress_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_StatusIndicator_InProgress_default_instance_, v4);
  qword_1ED1D4D78 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1ED1D4D80 = &SnippetUI::_OptionalBool_default_instance_;
  qword_1ED1D4D88 = (uint64_t)&SnippetUI::_ActionProperty_default_instance_;
}

SnippetUI::StatusIndicator_InProgress *SnippetUI::StatusIndicator_InProgress::StatusIndicator_InProgress(SnippetUI::StatusIndicator_InProgress *this)
{
  *(_QWORD *)this = &off_1E7936458;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 12) = 0;
  if (atomic_load(scc_info_StatusIndicator_InProgress_StatusIndicator_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_StatusIndicator_InProgress_StatusIndicator_2eproto);
  *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  return this;
}

void sub_1BFBDD550(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::StatusIndicator_InProgress::~StatusIndicator_InProgress(SnippetUI::StatusIndicator_InProgress *this)
{
  SnippetUI::StatusIndicator_InProgress::~StatusIndicator_InProgress(this);
  JUMPOUT(0x1C3B8D890);
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)this = &off_1E7936458;
  v2 = *((_QWORD *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x1C3B8D890](v2, 0x1012C40EC159624);
  }
  if (this != (SnippetUI::StatusIndicator_InProgress *)&SnippetUI::_StatusIndicator_InProgress_default_instance_)
  {
    v4 = *((_QWORD *)this + 3);
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    v5 = *((_QWORD *)this + 4);
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    v6 = *((_QWORD *)this + 5);
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

SnippetUI::StatusIndicator_InProgress *SnippetUI::StatusIndicator_InProgress::New(SnippetUI::StatusIndicator_InProgress *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::StatusIndicator_InProgress>(0);
}

SnippetUI::StatusIndicator_InProgress *SnippetUI::StatusIndicator_InProgress::New(SnippetUI::StatusIndicator_InProgress *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::StatusIndicator_InProgress>(a2);
}

void SnippetUI::StatusIndicator_InProgress::Clear(SnippetUI::StatusIndicator_InProgress *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  google::protobuf::internal::InternalMetadataWithArena *v6;
  char v7;

  v2 = *((_QWORD *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(_BYTE **)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v2 = 0;
      *(_BYTE *)(v2 + 23) = 0;
    }
  }
  v3 = *((_QWORD *)this + 3);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *((_QWORD *)this + 3) = 0;
  v4 = *((_QWORD *)this + 4);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  *((_QWORD *)this + 4) = 0;
  v5 = *((_QWORD *)this + 5);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v7 = *((_BYTE *)this + 8);
  v6 = (SnippetUI::StatusIndicator_InProgress *)((char *)this + 8);
  *((_QWORD *)v6 + 4) = 0;
  if ((v7 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v6);
}

uint64_t SnippetUI::StatusIndicator_InProgress::IsInitialized(SnippetUI::StatusIndicator_InProgress *this)
{
  return 1;
}

char *SnippetUI::StatusIndicator_InProgress::ByteSizeLong(SnippetUI::StatusIndicator_InProgress *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  const google::protobuf::UnknownFieldSet *v5;
  SnippetUI::TextProperty *v6;
  char *v7;
  SnippetUI::OptionalBool *v8;
  char *v9;
  SnippetUI::ActionProperty *v10;
  char *v11;

  v2 = *((_QWORD *)this + 2);
  v3 = *(unsigned __int8 *)(v2 + 23);
  if (*(char *)(v2 + 23) < 0)
  {
    if (*(_QWORD *)(v2 + 8))
      goto LABEL_3;
LABEL_7:
    v5 = 0;
    goto LABEL_8;
  }
  if (!*(_BYTE *)(v2 + 23))
    goto LABEL_7;
LABEL_3:
  v4 = *(_QWORD *)(v2 + 8);
  if ((v3 & 0x80u) == 0)
    v4 = v3;
  v5 = (const google::protobuf::UnknownFieldSet *)(v4 + ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_8:
  if (this != (SnippetUI::StatusIndicator_InProgress *)&SnippetUI::_StatusIndicator_InProgress_default_instance_)
  {
    v6 = (SnippetUI::TextProperty *)*((_QWORD *)this + 3);
    if (v6)
    {
      v7 = SnippetUI::TextProperty::ByteSizeLong(v6);
      v5 = (const google::protobuf::UnknownFieldSet *)&v7[(_QWORD)v5
                                                        + 1
                                                        + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v8 = (SnippetUI::OptionalBool *)*((_QWORD *)this + 4);
    if (v8)
    {
      v9 = SnippetUI::OptionalBool::ByteSizeLong(v8);
      v5 = (const google::protobuf::UnknownFieldSet *)&v9[(_QWORD)v5
                                                        + 1
                                                        + ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v10 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 5);
    if (v10)
    {
      v11 = SnippetUI::ActionProperty::ByteSizeLong(v10);
      v5 = (const google::protobuf::UnknownFieldSet *)&v11[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6)];
    }
  }
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::StatusIndicator_InProgress *)((char *)this + 8), v5, (_DWORD *)this + 12);
  *((_DWORD *)this + 12) = (_DWORD)v5;
  return (char *)v5;
}

uint64_t SnippetUI::StatusIndicator_InProgress::GetCachedSize(SnippetUI::StatusIndicator_InProgress *this)
{
  return *((unsigned int *)this + 12);
}

google::protobuf::internal *SnippetUI::StatusIndicator_InProgress::_InternalParse(SnippetUI::StatusIndicator_InProgress *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  std::string **v5;
  uint64_t *v6;
  google::protobuf::internal::ParseContext *v7;
  google::protobuf::internal *TagFallback;
  char *v9;
  SnippetUI::TextProperty *v10;
  char *v11;
  std::string *v12;
  SnippetUI::OptionalBool *v13;
  SnippetUI::ActionProperty *v14;
  BOOL v15;
  google::protobuf::internal *v17;

  v17 = a2;
  v5 = (std::string **)((char *)this + 16);
  v6 = (uint64_t *)((char *)this + 8);
  while (2)
  {
    if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v17, *((_DWORD *)a3 + 23)) & 1) != 0)
      return v17;
    TagFallback = (google::protobuf::internal *)((char *)v17 + 1);
    v9 = (char *)*(unsigned __int8 *)v17;
    if ((*(char *)v17 & 0x80000000) == 0)
      goto LABEL_6;
    v9 = (char *)(v9 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v17 + 2);
LABEL_6:
      v17 = TagFallback;
      goto LABEL_7;
    }
    TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v17, v9);
    v17 = TagFallback;
    if (!TagFallback)
      return TagFallback;
LABEL_7:
    switch(v9 >> 3)
    {
      case 1u:
        if (v9 != 10)
          goto LABEL_24;
        v10 = (SnippetUI::TextProperty *)*((_QWORD *)this + 3);
        if (!v10)
        {
          v10 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
          *((_QWORD *)this + 3) = v10;
          TagFallback = v17;
        }
        v11 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::TextProperty>(a3, v10, TagFallback);
        goto LABEL_29;
      case 2u:
        if (v9 != 18)
          goto LABEL_24;
        v12 = *v5;
        if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v12 = *v5;
          TagFallback = v17;
        }
        v11 = google::protobuf::internal::InlineGreedyStringParserUTF8(v12, (std::string::value_type *)TagFallback, (uint64_t)a3, (google::protobuf::internal *)"SnippetUI.StatusIndicator_InProgress.component_name");
        goto LABEL_29;
      case 3u:
        if (v9 != 26)
          goto LABEL_24;
        v13 = (SnippetUI::OptionalBool *)*((_QWORD *)this + 4);
        if (!v13)
        {
          v13 = (SnippetUI::OptionalBool *)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::OptionalBool>(0);
          *((_QWORD *)this + 4) = v13;
          TagFallback = v17;
        }
        v11 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::OptionalBool>(a3, v13, TagFallback);
        goto LABEL_29;
      case 4u:
        if (v9 != 34)
          goto LABEL_24;
        v14 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 5);
        if (!v14)
        {
          v14 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
          *((_QWORD *)this + 5) = v14;
          TagFallback = v17;
        }
        v11 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::ActionProperty>(a3, v14, TagFallback);
        goto LABEL_29;
      default:
LABEL_24:
        if ((_DWORD)v9)
          v15 = (v9 & 7) == 4;
        else
          v15 = 1;
        if (v15)
        {
          *((_DWORD *)a3 + 20) = (_DWORD)v9 - 1;
          return TagFallback;
        }
        v11 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v9, v6, TagFallback, a3, v7);
LABEL_29:
        v17 = (google::protobuf::internal *)v11;
        if (v11)
          continue;
        TagFallback = 0;
        break;
    }
    return TagFallback;
  }
}

const google::protobuf::UnknownFieldSet *SnippetUI::StatusIndicator_InProgress::InternalSerializeWithCachedSizesToArray(SnippetUI::StatusIndicator_InProgress *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  char *v5;
  SnippetUI::TextProperty *v7;
  unsigned int v8;
  google::protobuf::UnknownFieldSet *v9;
  unsigned int v10;
  _BYTE *v11;
  _BYTE *v12;
  unsigned int v13;
  unsigned int v14;
  google::protobuf::internal *v15;
  const char *v16;
  SnippetUI::OptionalBool *v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  char *v21;
  _BYTE *v22;
  _BYTE *v23;
  unsigned int v24;
  unsigned int v25;
  SnippetUI::ActionProperty *v26;
  unsigned int v27;
  google::protobuf::UnknownFieldSet *v28;
  unsigned int v29;
  _BYTE *v30;
  _BYTE *v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;

  v5 = (char *)a2;
  if (this != (SnippetUI::StatusIndicator_InProgress *)&SnippetUI::_StatusIndicator_InProgress_default_instance_)
  {
    v7 = (SnippetUI::TextProperty *)*((_QWORD *)this + 3);
    if (v7)
    {
      if (*(_QWORD *)a3 <= (unint64_t)a2)
      {
        v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
        v7 = (SnippetUI::TextProperty *)*((_QWORD *)this + 3);
      }
      *v5 = 10;
      v8 = *((_DWORD *)v7 + 15);
      if (v8 > 0x7F)
      {
        v5[1] = v8 | 0x80;
        v10 = v8 >> 7;
        if (v8 >> 14)
        {
          v11 = v5 + 2;
          do
          {
            v12 = v11;
            *v11++ = v10 | 0x80;
            v13 = v10 >> 7;
            v14 = v10 >> 14;
            v10 >>= 7;
          }
          while (v14);
          v9 = (google::protobuf::UnknownFieldSet *)(v12 + 2);
          *v11 = v13;
        }
        else
        {
          v5[2] = v10;
          v9 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
        }
      }
      else
      {
        v5[1] = v8;
        v9 = (google::protobuf::UnknownFieldSet *)(v5 + 2);
      }
      v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v7, v9, a3, a4);
    }
  }
  v15 = (google::protobuf::internal *)*((_QWORD *)this + 2);
  if (*((char *)v15 + 23) < 0)
  {
    v16 = (const char *)*((_QWORD *)v15 + 1);
    if (!v16)
      goto LABEL_19;
    v15 = *(google::protobuf::internal **)v15;
    goto LABEL_18;
  }
  v16 = (const char *)*((unsigned __int8 *)v15 + 23);
  if (*((_BYTE *)v15 + 23))
  {
LABEL_18:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v15, v16, 1, (google::protobuf::internal *)"SnippetUI.StatusIndicator_InProgress.component_name");
    v5 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 2, *((_QWORD *)this + 2), v5);
  }
LABEL_19:
  if (this == (SnippetUI::StatusIndicator_InProgress *)&SnippetUI::_StatusIndicator_InProgress_default_instance_)
    goto LABEL_43;
  v17 = (SnippetUI::OptionalBool *)*((_QWORD *)this + 4);
  if (v17)
  {
    if ((unint64_t)v5 >= *(_QWORD *)a3)
    {
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
      v17 = (SnippetUI::OptionalBool *)*((_QWORD *)this + 4);
    }
    *v5 = 26;
    v18 = *((_DWORD *)v17 + 5);
    if (v18 > 0x7F)
    {
      v5[1] = v18 | 0x80;
      v20 = v18 >> 7;
      if (v18 >> 14)
      {
        v22 = v5 + 2;
        do
        {
          v23 = v22;
          *v22++ = v20 | 0x80;
          v24 = v20 >> 7;
          v25 = v20 >> 14;
          v20 >>= 7;
        }
        while (v25);
        v21 = v23 + 2;
        *v22 = v24;
        goto LABEL_31;
      }
      v5[2] = v20;
      v19 = 3;
    }
    else
    {
      v5[1] = v18;
      v19 = 2;
    }
    v21 = &v5[v19];
LABEL_31:
    v5 = (char *)SnippetUI::OptionalBool::InternalSerializeWithCachedSizesToArray(v17, v21, a3, a4);
  }
  v26 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 5);
  if (v26)
  {
    if ((unint64_t)v5 >= *(_QWORD *)a3)
    {
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
      v26 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 5);
    }
    *v5 = 34;
    v27 = *((_DWORD *)v26 + 12);
    if (v27 > 0x7F)
    {
      v5[1] = v27 | 0x80;
      v29 = v27 >> 7;
      if (v27 >> 14)
      {
        v30 = v5 + 2;
        do
        {
          v31 = v30;
          *v30++ = v29 | 0x80;
          v32 = v29 >> 7;
          v33 = v29 >> 14;
          v29 >>= 7;
        }
        while (v33);
        v28 = (google::protobuf::UnknownFieldSet *)(v31 + 2);
        *v30 = v32;
      }
      else
      {
        v5[2] = v29;
        v28 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
      }
    }
    else
    {
      v5[1] = v27;
      v28 = (google::protobuf::UnknownFieldSet *)(v5 + 2);
    }
    v5 = (char *)SnippetUI::ActionProperty::InternalSerializeWithCachedSizesToArray(v26, v28, a3, a4);
  }
LABEL_43:
  v34 = *((_QWORD *)this + 1);
  if ((v34 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v34 & 0xFFFFFFFFFFFFFFFELL), (const google::protobuf::UnknownFieldSet *)v5, a3, a4);
  else
    return (const google::protobuf::UnknownFieldSet *)v5;
}

void SnippetUI::StatusIndicator_InProgress::CopyFrom(SnippetUI::StatusIndicator_InProgress *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    SnippetUI::StatusIndicator_InProgress::Clear(this);
    SnippetUI::StatusIndicator_InProgress::MergeFrom(this, a2);
  }
}

void SnippetUI::StatusIndicator_InProgress::MergeFrom(SnippetUI::StatusIndicator_InProgress *this, const google::protobuf::Message *lpsrc)
{
  std::string *v4;
  const SnippetUI::StatusIndicator_InProgress *v5;
  google::protobuf::Message *v6;
  char v7;
  std::string v8[2];

  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/StatusIndicator.pb.cc", 1183);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5)
    SnippetUI::StatusIndicator_InProgress::MergeFrom(this, v5);
  else
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
}

void sub_1BFBDDD18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::StatusIndicator_InProgress::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 48) = a2;
  return this;
}

uint64_t SnippetUI::StatusIndicator_InProgress::GetMetadata(SnippetUI::StatusIndicator_InProgress *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_StatusIndicator_2eproto);
  return qword_1EF5833B0;
}

void *SnippetUI::StatusIndicator_InProgress::default_instance(SnippetUI::StatusIndicator_InProgress *this)
{
  if (atomic_load(scc_info_StatusIndicator_InProgress_StatusIndicator_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_StatusIndicator_InProgress_StatusIndicator_2eproto);
  return &SnippetUI::_StatusIndicator_InProgress_default_instance_;
}

void SnippetUI::StatusIndicator_InProgress::MergeFrom(SnippetUI::StatusIndicator_InProgress *this, const SnippetUI::StatusIndicator_InProgress *a2)
{
  std::string *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  int **v8;
  int **v9;
  int **v10;
  const SnippetUI::OptionalBool *v11;
  SnippetUI::OptionalBool *v12;
  const SnippetUI::OptionalBool *v13;
  int **v14;
  int **v15;
  int **v16;
  char v17;
  std::string v18[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/StatusIndicator.pb.cc", 1198);
    v4 = google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v18[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::StatusIndicator_InProgress *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  v6 = *((_QWORD *)a2 + 2);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(_QWORD *)(v6 + 8))
      goto LABEL_13;
  }
  else if (!*(_BYTE *)(v6 + 23))
  {
    goto LABEL_13;
  }
  v7 = (uint64_t *)*((_QWORD *)this + 2);
  if (v7 != (uint64_t *)v6)
  {
    if (v7 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, v6);
    else
      std::string::operator=(*((std::string **)this + 2), (const std::string *)v6);
  }
LABEL_13:
  if (a2 != (const SnippetUI::StatusIndicator_InProgress *)&SnippetUI::_StatusIndicator_InProgress_default_instance_)
  {
    v8 = (int **)*((_QWORD *)a2 + 3);
    if (v8)
    {
      v9 = (int **)*((_QWORD *)this + 3);
      if (!v9)
      {
        v9 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 3) = v9;
        v8 = (int **)*((_QWORD *)a2 + 3);
      }
      if (v8)
        v10 = v8;
      else
        v10 = (int **)&SnippetUI::_TextProperty_default_instance_;
      SnippetUI::TextProperty::MergeFrom(v9, v10);
    }
    v11 = (const SnippetUI::OptionalBool *)*((_QWORD *)a2 + 4);
    if (v11)
    {
      v12 = (SnippetUI::OptionalBool *)*((_QWORD *)this + 4);
      if (!v12)
      {
        v12 = (SnippetUI::OptionalBool *)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::OptionalBool>(0);
        *((_QWORD *)this + 4) = v12;
        v11 = (const SnippetUI::OptionalBool *)*((_QWORD *)a2 + 4);
      }
      if (v11)
        v13 = v11;
      else
        v13 = (const SnippetUI::OptionalBool *)&SnippetUI::_OptionalBool_default_instance_;
      SnippetUI::OptionalBool::MergeFrom(v12, v13);
    }
    v14 = (int **)*((_QWORD *)a2 + 5);
    if (v14)
    {
      v15 = (int **)*((_QWORD *)this + 5);
      if (!v15)
      {
        v15 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
        *((_QWORD *)this + 5) = v15;
        v14 = (int **)*((_QWORD *)a2 + 5);
      }
      if (v14)
        v16 = v14;
      else
        v16 = (int **)&SnippetUI::_ActionProperty_default_instance_;
      SnippetUI::ActionProperty::MergeFrom(v15, v16);
    }
  }
}

void sub_1BFBDDF08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

SnippetUI::StatusIndicator_InProgress *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::StatusIndicator_InProgress>(google::protobuf::internal::ArenaImpl *this)
{
  SnippetUI::StatusIndicator_InProgress *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (SnippetUI::StatusIndicator_InProgress *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x38uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::StatusIndicator_InProgress>);
    SnippetUI::StatusIndicator_InProgress::StatusIndicator_InProgress(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (SnippetUI::StatusIndicator_InProgress *)operator new();
    SnippetUI::StatusIndicator_InProgress::StatusIndicator_InProgress(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_1BFBDDFA4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D890](v1, 0x10A1C40668C0A6DLL);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::StatusIndicator_InProgress>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

void InitDefaultsscc_info_StatusIndicator_Error_StatusIndicator_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/StatusIndicator.pb.cc", a4);
  SnippetUI::StatusIndicator_Error::StatusIndicator_Error((SnippetUI::StatusIndicator_Error *)&SnippetUI::_StatusIndicator_Error_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_StatusIndicator_Error_default_instance_, v4);
  qword_1ED1D4CD0 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1ED1D4CD8 = &SnippetUI::_OptionalBool_default_instance_;
  qword_1ED1D4CE0 = (uint64_t)&SnippetUI::_ActionProperty_default_instance_;
}

SnippetUI::StatusIndicator_Error *SnippetUI::StatusIndicator_Error::StatusIndicator_Error(SnippetUI::StatusIndicator_Error *this)
{
  *(_QWORD *)this = &off_1E7936398;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 12) = 0;
  if (atomic_load(scc_info_StatusIndicator_Error_StatusIndicator_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_StatusIndicator_Error_StatusIndicator_2eproto);
  *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  return this;
}

void sub_1BFBDE170(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::StatusIndicator_Error::~StatusIndicator_Error(SnippetUI::StatusIndicator_Error *this)
{
  SnippetUI::StatusIndicator_Error::~StatusIndicator_Error(this);
  JUMPOUT(0x1C3B8D890);
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)this = &off_1E7936398;
  v2 = *((_QWORD *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x1C3B8D890](v2, 0x1012C40EC159624);
  }
  if (this != (SnippetUI::StatusIndicator_Error *)&SnippetUI::_StatusIndicator_Error_default_instance_)
  {
    v4 = *((_QWORD *)this + 3);
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    v5 = *((_QWORD *)this + 4);
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    v6 = *((_QWORD *)this + 5);
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

SnippetUI::StatusIndicator_Error *SnippetUI::StatusIndicator_Error::New(SnippetUI::StatusIndicator_Error *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::StatusIndicator_Error>(0);
}

SnippetUI::StatusIndicator_Error *SnippetUI::StatusIndicator_Error::New(SnippetUI::StatusIndicator_Error *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::StatusIndicator_Error>(a2);
}

void SnippetUI::StatusIndicator_Error::Clear(SnippetUI::StatusIndicator_Error *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  google::protobuf::internal::InternalMetadataWithArena *v6;
  char v7;

  v2 = *((_QWORD *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(_BYTE **)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v2 = 0;
      *(_BYTE *)(v2 + 23) = 0;
    }
  }
  v3 = *((_QWORD *)this + 3);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *((_QWORD *)this + 3) = 0;
  v4 = *((_QWORD *)this + 4);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  *((_QWORD *)this + 4) = 0;
  v5 = *((_QWORD *)this + 5);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v7 = *((_BYTE *)this + 8);
  v6 = (SnippetUI::StatusIndicator_Error *)((char *)this + 8);
  *((_QWORD *)v6 + 4) = 0;
  if ((v7 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v6);
}

uint64_t SnippetUI::StatusIndicator_Error::IsInitialized(SnippetUI::StatusIndicator_Error *this)
{
  return 1;
}

char *SnippetUI::StatusIndicator_Error::ByteSizeLong(SnippetUI::StatusIndicator_Error *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  const google::protobuf::UnknownFieldSet *v5;
  SnippetUI::TextProperty *v6;
  char *v7;
  SnippetUI::OptionalBool *v8;
  char *v9;
  SnippetUI::ActionProperty *v10;
  char *v11;

  v2 = *((_QWORD *)this + 2);
  v3 = *(unsigned __int8 *)(v2 + 23);
  if (*(char *)(v2 + 23) < 0)
  {
    if (*(_QWORD *)(v2 + 8))
      goto LABEL_3;
LABEL_7:
    v5 = 0;
    goto LABEL_8;
  }
  if (!*(_BYTE *)(v2 + 23))
    goto LABEL_7;
LABEL_3:
  v4 = *(_QWORD *)(v2 + 8);
  if ((v3 & 0x80u) == 0)
    v4 = v3;
  v5 = (const google::protobuf::UnknownFieldSet *)(v4 + ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_8:
  if (this != (SnippetUI::StatusIndicator_Error *)&SnippetUI::_StatusIndicator_Error_default_instance_)
  {
    v6 = (SnippetUI::TextProperty *)*((_QWORD *)this + 3);
    if (v6)
    {
      v7 = SnippetUI::TextProperty::ByteSizeLong(v6);
      v5 = (const google::protobuf::UnknownFieldSet *)&v7[(_QWORD)v5
                                                        + 1
                                                        + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v8 = (SnippetUI::OptionalBool *)*((_QWORD *)this + 4);
    if (v8)
    {
      v9 = SnippetUI::OptionalBool::ByteSizeLong(v8);
      v5 = (const google::protobuf::UnknownFieldSet *)&v9[(_QWORD)v5
                                                        + 1
                                                        + ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v10 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 5);
    if (v10)
    {
      v11 = SnippetUI::ActionProperty::ByteSizeLong(v10);
      v5 = (const google::protobuf::UnknownFieldSet *)&v11[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6)];
    }
  }
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::StatusIndicator_Error *)((char *)this + 8), v5, (_DWORD *)this + 12);
  *((_DWORD *)this + 12) = (_DWORD)v5;
  return (char *)v5;
}

uint64_t SnippetUI::StatusIndicator_Error::GetCachedSize(SnippetUI::StatusIndicator_Error *this)
{
  return *((unsigned int *)this + 12);
}

google::protobuf::internal *SnippetUI::StatusIndicator_Error::_InternalParse(SnippetUI::StatusIndicator_Error *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  std::string **v5;
  uint64_t *v6;
  google::protobuf::internal::ParseContext *v7;
  google::protobuf::internal *TagFallback;
  char *v9;
  SnippetUI::TextProperty *v10;
  char *v11;
  std::string *v12;
  SnippetUI::OptionalBool *v13;
  SnippetUI::ActionProperty *v14;
  BOOL v15;
  google::protobuf::internal *v17;

  v17 = a2;
  v5 = (std::string **)((char *)this + 16);
  v6 = (uint64_t *)((char *)this + 8);
  while (2)
  {
    if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v17, *((_DWORD *)a3 + 23)) & 1) != 0)
      return v17;
    TagFallback = (google::protobuf::internal *)((char *)v17 + 1);
    v9 = (char *)*(unsigned __int8 *)v17;
    if ((*(char *)v17 & 0x80000000) == 0)
      goto LABEL_6;
    v9 = (char *)(v9 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v17 + 2);
LABEL_6:
      v17 = TagFallback;
      goto LABEL_7;
    }
    TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v17, v9);
    v17 = TagFallback;
    if (!TagFallback)
      return TagFallback;
LABEL_7:
    switch(v9 >> 3)
    {
      case 1u:
        if (v9 != 10)
          goto LABEL_24;
        v10 = (SnippetUI::TextProperty *)*((_QWORD *)this + 3);
        if (!v10)
        {
          v10 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
          *((_QWORD *)this + 3) = v10;
          TagFallback = v17;
        }
        v11 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::TextProperty>(a3, v10, TagFallback);
        goto LABEL_29;
      case 2u:
        if (v9 != 18)
          goto LABEL_24;
        v12 = *v5;
        if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v12 = *v5;
          TagFallback = v17;
        }
        v11 = google::protobuf::internal::InlineGreedyStringParserUTF8(v12, (std::string::value_type *)TagFallback, (uint64_t)a3, (google::protobuf::internal *)"SnippetUI.StatusIndicator_Error.component_name");
        goto LABEL_29;
      case 3u:
        if (v9 != 26)
          goto LABEL_24;
        v13 = (SnippetUI::OptionalBool *)*((_QWORD *)this + 4);
        if (!v13)
        {
          v13 = (SnippetUI::OptionalBool *)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::OptionalBool>(0);
          *((_QWORD *)this + 4) = v13;
          TagFallback = v17;
        }
        v11 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::OptionalBool>(a3, v13, TagFallback);
        goto LABEL_29;
      case 4u:
        if (v9 != 34)
          goto LABEL_24;
        v14 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 5);
        if (!v14)
        {
          v14 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
          *((_QWORD *)this + 5) = v14;
          TagFallback = v17;
        }
        v11 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::ActionProperty>(a3, v14, TagFallback);
        goto LABEL_29;
      default:
LABEL_24:
        if ((_DWORD)v9)
          v15 = (v9 & 7) == 4;
        else
          v15 = 1;
        if (v15)
        {
          *((_DWORD *)a3 + 20) = (_DWORD)v9 - 1;
          return TagFallback;
        }
        v11 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v9, v6, TagFallback, a3, v7);
LABEL_29:
        v17 = (google::protobuf::internal *)v11;
        if (v11)
          continue;
        TagFallback = 0;
        break;
    }
    return TagFallback;
  }
}

const google::protobuf::UnknownFieldSet *SnippetUI::StatusIndicator_Error::InternalSerializeWithCachedSizesToArray(SnippetUI::StatusIndicator_Error *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  char *v5;
  SnippetUI::TextProperty *v7;
  unsigned int v8;
  google::protobuf::UnknownFieldSet *v9;
  unsigned int v10;
  _BYTE *v11;
  _BYTE *v12;
  unsigned int v13;
  unsigned int v14;
  google::protobuf::internal *v15;
  const char *v16;
  SnippetUI::OptionalBool *v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  char *v21;
  _BYTE *v22;
  _BYTE *v23;
  unsigned int v24;
  unsigned int v25;
  SnippetUI::ActionProperty *v26;
  unsigned int v27;
  google::protobuf::UnknownFieldSet *v28;
  unsigned int v29;
  _BYTE *v30;
  _BYTE *v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;

  v5 = (char *)a2;
  if (this != (SnippetUI::StatusIndicator_Error *)&SnippetUI::_StatusIndicator_Error_default_instance_)
  {
    v7 = (SnippetUI::TextProperty *)*((_QWORD *)this + 3);
    if (v7)
    {
      if (*(_QWORD *)a3 <= (unint64_t)a2)
      {
        v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
        v7 = (SnippetUI::TextProperty *)*((_QWORD *)this + 3);
      }
      *v5 = 10;
      v8 = *((_DWORD *)v7 + 15);
      if (v8 > 0x7F)
      {
        v5[1] = v8 | 0x80;
        v10 = v8 >> 7;
        if (v8 >> 14)
        {
          v11 = v5 + 2;
          do
          {
            v12 = v11;
            *v11++ = v10 | 0x80;
            v13 = v10 >> 7;
            v14 = v10 >> 14;
            v10 >>= 7;
          }
          while (v14);
          v9 = (google::protobuf::UnknownFieldSet *)(v12 + 2);
          *v11 = v13;
        }
        else
        {
          v5[2] = v10;
          v9 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
        }
      }
      else
      {
        v5[1] = v8;
        v9 = (google::protobuf::UnknownFieldSet *)(v5 + 2);
      }
      v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v7, v9, a3, a4);
    }
  }
  v15 = (google::protobuf::internal *)*((_QWORD *)this + 2);
  if (*((char *)v15 + 23) < 0)
  {
    v16 = (const char *)*((_QWORD *)v15 + 1);
    if (!v16)
      goto LABEL_19;
    v15 = *(google::protobuf::internal **)v15;
    goto LABEL_18;
  }
  v16 = (const char *)*((unsigned __int8 *)v15 + 23);
  if (*((_BYTE *)v15 + 23))
  {
LABEL_18:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v15, v16, 1, (google::protobuf::internal *)"SnippetUI.StatusIndicator_Error.component_name");
    v5 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 2, *((_QWORD *)this + 2), v5);
  }
LABEL_19:
  if (this == (SnippetUI::StatusIndicator_Error *)&SnippetUI::_StatusIndicator_Error_default_instance_)
    goto LABEL_43;
  v17 = (SnippetUI::OptionalBool *)*((_QWORD *)this + 4);
  if (v17)
  {
    if ((unint64_t)v5 >= *(_QWORD *)a3)
    {
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
      v17 = (SnippetUI::OptionalBool *)*((_QWORD *)this + 4);
    }
    *v5 = 26;
    v18 = *((_DWORD *)v17 + 5);
    if (v18 > 0x7F)
    {
      v5[1] = v18 | 0x80;
      v20 = v18 >> 7;
      if (v18 >> 14)
      {
        v22 = v5 + 2;
        do
        {
          v23 = v22;
          *v22++ = v20 | 0x80;
          v24 = v20 >> 7;
          v25 = v20 >> 14;
          v20 >>= 7;
        }
        while (v25);
        v21 = v23 + 2;
        *v22 = v24;
        goto LABEL_31;
      }
      v5[2] = v20;
      v19 = 3;
    }
    else
    {
      v5[1] = v18;
      v19 = 2;
    }
    v21 = &v5[v19];
LABEL_31:
    v5 = (char *)SnippetUI::OptionalBool::InternalSerializeWithCachedSizesToArray(v17, v21, a3, a4);
  }
  v26 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 5);
  if (v26)
  {
    if ((unint64_t)v5 >= *(_QWORD *)a3)
    {
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
      v26 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 5);
    }
    *v5 = 34;
    v27 = *((_DWORD *)v26 + 12);
    if (v27 > 0x7F)
    {
      v5[1] = v27 | 0x80;
      v29 = v27 >> 7;
      if (v27 >> 14)
      {
        v30 = v5 + 2;
        do
        {
          v31 = v30;
          *v30++ = v29 | 0x80;
          v32 = v29 >> 7;
          v33 = v29 >> 14;
          v29 >>= 7;
        }
        while (v33);
        v28 = (google::protobuf::UnknownFieldSet *)(v31 + 2);
        *v30 = v32;
      }
      else
      {
        v5[2] = v29;
        v28 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
      }
    }
    else
    {
      v5[1] = v27;
      v28 = (google::protobuf::UnknownFieldSet *)(v5 + 2);
    }
    v5 = (char *)SnippetUI::ActionProperty::InternalSerializeWithCachedSizesToArray(v26, v28, a3, a4);
  }
LABEL_43:
  v34 = *((_QWORD *)this + 1);
  if ((v34 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v34 & 0xFFFFFFFFFFFFFFFELL), (const google::protobuf::UnknownFieldSet *)v5, a3, a4);
  else
    return (const google::protobuf::UnknownFieldSet *)v5;
}

void SnippetUI::StatusIndicator_Error::CopyFrom(SnippetUI::StatusIndicator_Error *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    SnippetUI::StatusIndicator_Error::Clear(this);
    SnippetUI::StatusIndicator_Error::MergeFrom(this, a2);
  }
}

void SnippetUI::StatusIndicator_Error::MergeFrom(SnippetUI::StatusIndicator_Error *this, const google::protobuf::Message *lpsrc)
{
  std::string *v4;
  const SnippetUI::StatusIndicator_Error *v5;
  google::protobuf::Message *v6;
  char v7;
  std::string v8[2];

  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/StatusIndicator.pb.cc", 836);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5)
    SnippetUI::StatusIndicator_Error::MergeFrom(this, v5);
  else
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
}

void sub_1BFBDE938(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::StatusIndicator_Error::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 48) = a2;
  return this;
}

uint64_t SnippetUI::StatusIndicator_Error::GetMetadata(SnippetUI::StatusIndicator_Error *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_StatusIndicator_2eproto);
  return qword_1EF5833A0;
}

void *SnippetUI::StatusIndicator_Error::default_instance(SnippetUI::StatusIndicator_Error *this)
{
  if (atomic_load(scc_info_StatusIndicator_Error_StatusIndicator_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_StatusIndicator_Error_StatusIndicator_2eproto);
  return &SnippetUI::_StatusIndicator_Error_default_instance_;
}

void SnippetUI::StatusIndicator_Error::MergeFrom(SnippetUI::StatusIndicator_Error *this, const SnippetUI::StatusIndicator_Error *a2)
{
  std::string *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  int **v8;
  int **v9;
  int **v10;
  const SnippetUI::OptionalBool *v11;
  SnippetUI::OptionalBool *v12;
  const SnippetUI::OptionalBool *v13;
  int **v14;
  int **v15;
  int **v16;
  char v17;
  std::string v18[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/StatusIndicator.pb.cc", 851);
    v4 = google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v18[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::StatusIndicator_Error *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  v6 = *((_QWORD *)a2 + 2);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(_QWORD *)(v6 + 8))
      goto LABEL_13;
  }
  else if (!*(_BYTE *)(v6 + 23))
  {
    goto LABEL_13;
  }
  v7 = (uint64_t *)*((_QWORD *)this + 2);
  if (v7 != (uint64_t *)v6)
  {
    if (v7 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, v6);
    else
      std::string::operator=(*((std::string **)this + 2), (const std::string *)v6);
  }
LABEL_13:
  if (a2 != (const SnippetUI::StatusIndicator_Error *)&SnippetUI::_StatusIndicator_Error_default_instance_)
  {
    v8 = (int **)*((_QWORD *)a2 + 3);
    if (v8)
    {
      v9 = (int **)*((_QWORD *)this + 3);
      if (!v9)
      {
        v9 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 3) = v9;
        v8 = (int **)*((_QWORD *)a2 + 3);
      }
      if (v8)
        v10 = v8;
      else
        v10 = (int **)&SnippetUI::_TextProperty_default_instance_;
      SnippetUI::TextProperty::MergeFrom(v9, v10);
    }
    v11 = (const SnippetUI::OptionalBool *)*((_QWORD *)a2 + 4);
    if (v11)
    {
      v12 = (SnippetUI::OptionalBool *)*((_QWORD *)this + 4);
      if (!v12)
      {
        v12 = (SnippetUI::OptionalBool *)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::OptionalBool>(0);
        *((_QWORD *)this + 4) = v12;
        v11 = (const SnippetUI::OptionalBool *)*((_QWORD *)a2 + 4);
      }
      if (v11)
        v13 = v11;
      else
        v13 = (const SnippetUI::OptionalBool *)&SnippetUI::_OptionalBool_default_instance_;
      SnippetUI::OptionalBool::MergeFrom(v12, v13);
    }
    v14 = (int **)*((_QWORD *)a2 + 5);
    if (v14)
    {
      v15 = (int **)*((_QWORD *)this + 5);
      if (!v15)
      {
        v15 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
        *((_QWORD *)this + 5) = v15;
        v14 = (int **)*((_QWORD *)a2 + 5);
      }
      if (v14)
        v16 = v14;
      else
        v16 = (int **)&SnippetUI::_ActionProperty_default_instance_;
      SnippetUI::ActionProperty::MergeFrom(v15, v16);
    }
  }
}

void sub_1BFBDEB28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

SnippetUI::StatusIndicator_Error *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::StatusIndicator_Error>(google::protobuf::internal::ArenaImpl *this)
{
  SnippetUI::StatusIndicator_Error *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (SnippetUI::StatusIndicator_Error *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x38uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::StatusIndicator_Error>);
    SnippetUI::StatusIndicator_Error::StatusIndicator_Error(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (SnippetUI::StatusIndicator_Error *)operator new();
    SnippetUI::StatusIndicator_Error::StatusIndicator_Error(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_1BFBDEBC4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D890](v1, 0x10A1C40668C0A6DLL);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::StatusIndicator_Error>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

void *SnippetUI::StatusIndicator_Cancelled::default_instance(SnippetUI::StatusIndicator_Cancelled *this)
{
  if (atomic_load(scc_info_StatusIndicator_Cancelled_StatusIndicator_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_StatusIndicator_Cancelled_StatusIndicator_2eproto);
  return &SnippetUI::_StatusIndicator_Cancelled_default_instance_;
}

void SnippetUI::StatusIndicator_Cancelled::MergeFrom(SnippetUI::StatusIndicator_Cancelled *this, const SnippetUI::StatusIndicator_Cancelled *a2)
{
  std::string *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  int **v8;
  int **v9;
  int **v10;
  const SnippetUI::OptionalBool *v11;
  SnippetUI::OptionalBool *v12;
  const SnippetUI::OptionalBool *v13;
  int **v14;
  int **v15;
  int **v16;
  char v17;
  std::string v18[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/StatusIndicator.pb.cc", 1545);
    v4 = google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v18[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::StatusIndicator_Cancelled *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  v6 = *((_QWORD *)a2 + 2);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(_QWORD *)(v6 + 8))
      goto LABEL_13;
  }
  else if (!*(_BYTE *)(v6 + 23))
  {
    goto LABEL_13;
  }
  v7 = (uint64_t *)*((_QWORD *)this + 2);
  if (v7 != (uint64_t *)v6)
  {
    if (v7 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, v6);
    else
      std::string::operator=(*((std::string **)this + 2), (const std::string *)v6);
  }
LABEL_13:
  if (a2 != (const SnippetUI::StatusIndicator_Cancelled *)&SnippetUI::_StatusIndicator_Cancelled_default_instance_)
  {
    v8 = (int **)*((_QWORD *)a2 + 3);
    if (v8)
    {
      v9 = (int **)*((_QWORD *)this + 3);
      if (!v9)
      {
        v9 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 3) = v9;
        v8 = (int **)*((_QWORD *)a2 + 3);
      }
      if (v8)
        v10 = v8;
      else
        v10 = (int **)&SnippetUI::_TextProperty_default_instance_;
      SnippetUI::TextProperty::MergeFrom(v9, v10);
    }
    v11 = (const SnippetUI::OptionalBool *)*((_QWORD *)a2 + 4);
    if (v11)
    {
      v12 = (SnippetUI::OptionalBool *)*((_QWORD *)this + 4);
      if (!v12)
      {
        v12 = (SnippetUI::OptionalBool *)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::OptionalBool>(0);
        *((_QWORD *)this + 4) = v12;
        v11 = (const SnippetUI::OptionalBool *)*((_QWORD *)a2 + 4);
      }
      if (v11)
        v13 = v11;
      else
        v13 = (const SnippetUI::OptionalBool *)&SnippetUI::_OptionalBool_default_instance_;
      SnippetUI::OptionalBool::MergeFrom(v12, v13);
    }
    v14 = (int **)*((_QWORD *)a2 + 5);
    if (v14)
    {
      v15 = (int **)*((_QWORD *)this + 5);
      if (!v15)
      {
        v15 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
        *((_QWORD *)this + 5) = v15;
        v14 = (int **)*((_QWORD *)a2 + 5);
      }
      if (v14)
        v16 = v14;
      else
        v16 = (int **)&SnippetUI::_ActionProperty_default_instance_;
      SnippetUI::ActionProperty::MergeFrom(v15, v16);
    }
  }
}

void sub_1BFBDEE5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

SnippetUI::StatusIndicator_Cancelled *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::StatusIndicator_Cancelled>(google::protobuf::internal::ArenaImpl *this)
{
  SnippetUI::StatusIndicator_Cancelled *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (SnippetUI::StatusIndicator_Cancelled *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x38uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::StatusIndicator_Cancelled>);
    SnippetUI::StatusIndicator_Cancelled::StatusIndicator_Cancelled(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (SnippetUI::StatusIndicator_Cancelled *)operator new();
    SnippetUI::StatusIndicator_Cancelled::StatusIndicator_Cancelled(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_1BFBDEEF8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D890](v1, 0x10A1C40668C0A6DLL);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::StatusIndicator_Cancelled>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

void SnippetUI::StatusIndicator_Success::InitAsDefaultInstance(SnippetUI::StatusIndicator_Success *this)
{
  qword_1ED1D4D08 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1ED1D4D10 = &SnippetUI::_OptionalBool_default_instance_;
  qword_1ED1D4D18 = (uint64_t)&SnippetUI::_ActionProperty_default_instance_;
}

uint64_t SnippetUI::StatusIndicator_Success::_Internal::text(SnippetUI::StatusIndicator_Success::_Internal *this, const SnippetUI::StatusIndicator_Success *a2)
{
  return *((_QWORD *)this + 3);
}

uint64_t SnippetUI::StatusIndicator_Success::_Internal::show_indicator(SnippetUI::StatusIndicator_Success::_Internal *this, const SnippetUI::StatusIndicator_Success *a2)
{
  return *((_QWORD *)this + 4);
}

uint64_t SnippetUI::StatusIndicator_Success::_Internal::action(SnippetUI::StatusIndicator_Success::_Internal *this, const SnippetUI::StatusIndicator_Success *a2)
{
  return *((_QWORD *)this + 5);
}

uint64_t SnippetUI::StatusIndicator_Success::clear_text(SnippetUI::StatusIndicator_Success *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 3);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 3) = 0;
  return result;
}

uint64_t SnippetUI::StatusIndicator_Success::clear_show_indicator(SnippetUI::StatusIndicator_Success *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 4);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 4) = 0;
  return result;
}

uint64_t SnippetUI::StatusIndicator_Success::clear_action(SnippetUI::StatusIndicator_Success *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 5);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 5) = 0;
  return result;
}

SnippetUI::StatusIndicator_Success *SnippetUI::StatusIndicator_Success::StatusIndicator_Success(SnippetUI::StatusIndicator_Success *this, const SnippetUI::StatusIndicator_Success *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  SnippetUI::TextProperty *v8;
  SnippetUI::ActionProperty *v9;
  SnippetUI::OptionalBool *v10;

  *(_QWORD *)this = &off_1E79362D8;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 12) = 0;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::StatusIndicator_Success *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  v5 = *((_QWORD *)a2 + 2);
  if (*(char *)(v5 + 23) < 0)
    v6 = *(_QWORD *)(v5 + 8);
  else
    v6 = *(unsigned __int8 *)(v5 + 23);
  if ((uint64_t *)v5 != &google::protobuf::internal::fixed_address_empty_string && v6 != 0)
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, v5);
  if (a2 == (const SnippetUI::StatusIndicator_Success *)&SnippetUI::_StatusIndicator_Success_default_instance_)
  {
    v9 = 0;
    *((_QWORD *)this + 3) = 0;
    *((_QWORD *)this + 4) = 0;
  }
  else
  {
    if (*((_QWORD *)a2 + 3))
    {
      v8 = (SnippetUI::TextProperty *)operator new();
      SnippetUI::TextProperty::TextProperty(v8, *((const SnippetUI::TextProperty **)a2 + 3));
    }
    else
    {
      v8 = 0;
    }
    *((_QWORD *)this + 3) = v8;
    if (*((_QWORD *)a2 + 4))
    {
      v10 = (SnippetUI::OptionalBool *)operator new();
      SnippetUI::OptionalBool::OptionalBool(v10, *((const SnippetUI::OptionalBool **)a2 + 4));
    }
    else
    {
      v10 = 0;
    }
    *((_QWORD *)this + 4) = v10;
    if (*((_QWORD *)a2 + 5))
    {
      v9 = (SnippetUI::ActionProperty *)operator new();
      SnippetUI::ActionProperty::ActionProperty(v9, *((const SnippetUI::ActionProperty **)a2 + 5));
    }
    else
    {
      v9 = 0;
    }
  }
  *((_QWORD *)this + 5) = v9;
  return this;
}

void sub_1BFBDF220(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;

  MEMORY[0x1C3B8D890](v2, 0x10A1C40B18DE219);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::StatusIndicator_Success::CopyFrom(SnippetUI::StatusIndicator_Success *this, const SnippetUI::StatusIndicator_Success *a2)
{
  if (a2 != this)
  {
    SnippetUI::StatusIndicator_Success::Clear(this);
    SnippetUI::StatusIndicator_Success::MergeFrom(this, a2);
  }
}

void SnippetUI::StatusIndicator_Success::InternalSwap(SnippetUI::StatusIndicator_Success *this, SnippetUI::StatusIndicator_Success *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  uint64_t v5;
  google::protobuf::UnknownFieldSet *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  google::protobuf::UnknownFieldSet *v16;

  v4 = (SnippetUI::StatusIndicator_Success *)((char *)this + 8);
  v5 = *((_QWORD *)a2 + 1);
  if ((*((_BYTE *)this + 8) & 1) != 0)
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v6 = v16;
      goto LABEL_6;
    }
LABEL_5:
    v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
    google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
    goto LABEL_7;
  }
  if ((v5 & 1) != 0)
    goto LABEL_5;
LABEL_7:
  v7 = (uint64_t *)*((_QWORD *)this + 2);
  v8 = (uint64_t **)((char *)a2 + 16);
  if (v7 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_13;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 2, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v7 = (uint64_t *)*((_QWORD *)this + 2);
  }
  v9 = *v8;
  if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 2, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v9 = *v8;
  }
  v10 = v7[2];
  v11 = *(_OWORD *)v7;
  v12 = v9[2];
  *(_OWORD *)v7 = *(_OWORD *)v9;
  v7[2] = v12;
  *(_OWORD *)v9 = v11;
  v9[2] = v10;
LABEL_13:
  v13 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v13;
  v14 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v14;
  v15 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v15;
}

void SnippetUI::StatusIndicator_Error::InitAsDefaultInstance(SnippetUI::StatusIndicator_Error *this)
{
  qword_1ED1D4CD0 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1ED1D4CD8 = &SnippetUI::_OptionalBool_default_instance_;
  qword_1ED1D4CE0 = (uint64_t)&SnippetUI::_ActionProperty_default_instance_;
}

uint64_t SnippetUI::StatusIndicator_Error::_Internal::text(SnippetUI::StatusIndicator_Error::_Internal *this, const SnippetUI::StatusIndicator_Error *a2)
{
  return *((_QWORD *)this + 3);
}

uint64_t SnippetUI::StatusIndicator_Error::_Internal::show_indicator(SnippetUI::StatusIndicator_Error::_Internal *this, const SnippetUI::StatusIndicator_Error *a2)
{
  return *((_QWORD *)this + 4);
}

uint64_t SnippetUI::StatusIndicator_Error::_Internal::action(SnippetUI::StatusIndicator_Error::_Internal *this, const SnippetUI::StatusIndicator_Error *a2)
{
  return *((_QWORD *)this + 5);
}

uint64_t SnippetUI::StatusIndicator_Error::clear_text(SnippetUI::StatusIndicator_Error *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 3);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 3) = 0;
  return result;
}

uint64_t SnippetUI::StatusIndicator_Error::clear_show_indicator(SnippetUI::StatusIndicator_Error *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 4);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 4) = 0;
  return result;
}

uint64_t SnippetUI::StatusIndicator_Error::clear_action(SnippetUI::StatusIndicator_Error *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 5);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 5) = 0;
  return result;
}

SnippetUI::StatusIndicator_Error *SnippetUI::StatusIndicator_Error::StatusIndicator_Error(SnippetUI::StatusIndicator_Error *this, const SnippetUI::StatusIndicator_Error *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  SnippetUI::TextProperty *v8;
  SnippetUI::ActionProperty *v9;
  SnippetUI::OptionalBool *v10;

  *(_QWORD *)this = &off_1E7936398;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 12) = 0;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::StatusIndicator_Error *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  v5 = *((_QWORD *)a2 + 2);
  if (*(char *)(v5 + 23) < 0)
    v6 = *(_QWORD *)(v5 + 8);
  else
    v6 = *(unsigned __int8 *)(v5 + 23);
  if ((uint64_t *)v5 != &google::protobuf::internal::fixed_address_empty_string && v6 != 0)
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, v5);
  if (a2 == (const SnippetUI::StatusIndicator_Error *)&SnippetUI::_StatusIndicator_Error_default_instance_)
  {
    v9 = 0;
    *((_QWORD *)this + 3) = 0;
    *((_QWORD *)this + 4) = 0;
  }
  else
  {
    if (*((_QWORD *)a2 + 3))
    {
      v8 = (SnippetUI::TextProperty *)operator new();
      SnippetUI::TextProperty::TextProperty(v8, *((const SnippetUI::TextProperty **)a2 + 3));
    }
    else
    {
      v8 = 0;
    }
    *((_QWORD *)this + 3) = v8;
    if (*((_QWORD *)a2 + 4))
    {
      v10 = (SnippetUI::OptionalBool *)operator new();
      SnippetUI::OptionalBool::OptionalBool(v10, *((const SnippetUI::OptionalBool **)a2 + 4));
    }
    else
    {
      v10 = 0;
    }
    *((_QWORD *)this + 4) = v10;
    if (*((_QWORD *)a2 + 5))
    {
      v9 = (SnippetUI::ActionProperty *)operator new();
      SnippetUI::ActionProperty::ActionProperty(v9, *((const SnippetUI::ActionProperty **)a2 + 5));
    }
    else
    {
      v9 = 0;
    }
  }
  *((_QWORD *)this + 5) = v9;
  return this;
}

void sub_1BFBDF61C(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;

  MEMORY[0x1C3B8D890](v2, 0x10A1C40B18DE219);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::StatusIndicator_Error::CopyFrom(SnippetUI::StatusIndicator_Error *this, const SnippetUI::StatusIndicator_Error *a2)
{
  if (a2 != this)
  {
    SnippetUI::StatusIndicator_Error::Clear(this);
    SnippetUI::StatusIndicator_Error::MergeFrom(this, a2);
  }
}

void SnippetUI::StatusIndicator_Error::InternalSwap(SnippetUI::StatusIndicator_Error *this, SnippetUI::StatusIndicator_Error *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  uint64_t v5;
  google::protobuf::UnknownFieldSet *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  google::protobuf::UnknownFieldSet *v16;

  v4 = (SnippetUI::StatusIndicator_Error *)((char *)this + 8);
  v5 = *((_QWORD *)a2 + 1);
  if ((*((_BYTE *)this + 8) & 1) != 0)
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v6 = v16;
      goto LABEL_6;
    }
LABEL_5:
    v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
    google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
    goto LABEL_7;
  }
  if ((v5 & 1) != 0)
    goto LABEL_5;
LABEL_7:
  v7 = (uint64_t *)*((_QWORD *)this + 2);
  v8 = (uint64_t **)((char *)a2 + 16);
  if (v7 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_13;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 2, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v7 = (uint64_t *)*((_QWORD *)this + 2);
  }
  v9 = *v8;
  if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 2, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v9 = *v8;
  }
  v10 = v7[2];
  v11 = *(_OWORD *)v7;
  v12 = v9[2];
  *(_OWORD *)v7 = *(_OWORD *)v9;
  v7[2] = v12;
  *(_OWORD *)v9 = v11;
  v9[2] = v10;
LABEL_13:
  v13 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v13;
  v14 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v14;
  v15 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v15;
}

void SnippetUI::StatusIndicator_InProgress::InitAsDefaultInstance(SnippetUI::StatusIndicator_InProgress *this)
{
  qword_1ED1D4D78 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1ED1D4D80 = &SnippetUI::_OptionalBool_default_instance_;
  qword_1ED1D4D88 = (uint64_t)&SnippetUI::_ActionProperty_default_instance_;
}

uint64_t SnippetUI::StatusIndicator_InProgress::_Internal::text(SnippetUI::StatusIndicator_InProgress::_Internal *this, const SnippetUI::StatusIndicator_InProgress *a2)
{
  return *((_QWORD *)this + 3);
}

uint64_t SnippetUI::StatusIndicator_InProgress::_Internal::show_indicator(SnippetUI::StatusIndicator_InProgress::_Internal *this, const SnippetUI::StatusIndicator_InProgress *a2)
{
  return *((_QWORD *)this + 4);
}

uint64_t SnippetUI::StatusIndicator_InProgress::_Internal::action(SnippetUI::StatusIndicator_InProgress::_Internal *this, const SnippetUI::StatusIndicator_InProgress *a2)
{
  return *((_QWORD *)this + 5);
}

uint64_t SnippetUI::StatusIndicator_InProgress::clear_text(SnippetUI::StatusIndicator_InProgress *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 3);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 3) = 0;
  return result;
}

uint64_t SnippetUI::StatusIndicator_InProgress::clear_show_indicator(SnippetUI::StatusIndicator_InProgress *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 4);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 4) = 0;
  return result;
}

uint64_t SnippetUI::StatusIndicator_InProgress::clear_action(SnippetUI::StatusIndicator_InProgress *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 5);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 5) = 0;
  return result;
}

SnippetUI::StatusIndicator_InProgress *SnippetUI::StatusIndicator_InProgress::StatusIndicator_InProgress(SnippetUI::StatusIndicator_InProgress *this, const SnippetUI::StatusIndicator_InProgress *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  SnippetUI::TextProperty *v8;
  SnippetUI::ActionProperty *v9;
  SnippetUI::OptionalBool *v10;

  *(_QWORD *)this = &off_1E7936458;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 12) = 0;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::StatusIndicator_InProgress *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  v5 = *((_QWORD *)a2 + 2);
  if (*(char *)(v5 + 23) < 0)
    v6 = *(_QWORD *)(v5 + 8);
  else
    v6 = *(unsigned __int8 *)(v5 + 23);
  if ((uint64_t *)v5 != &google::protobuf::internal::fixed_address_empty_string && v6 != 0)
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, v5);
  if (a2 == (const SnippetUI::StatusIndicator_InProgress *)&SnippetUI::_StatusIndicator_InProgress_default_instance_)
  {
    v9 = 0;
    *((_QWORD *)this + 3) = 0;
    *((_QWORD *)this + 4) = 0;
  }
  else
  {
    if (*((_QWORD *)a2 + 3))
    {
      v8 = (SnippetUI::TextProperty *)operator new();
      SnippetUI::TextProperty::TextProperty(v8, *((const SnippetUI::TextProperty **)a2 + 3));
    }
    else
    {
      v8 = 0;
    }
    *((_QWORD *)this + 3) = v8;
    if (*((_QWORD *)a2 + 4))
    {
      v10 = (SnippetUI::OptionalBool *)operator new();
      SnippetUI::OptionalBool::OptionalBool(v10, *((const SnippetUI::OptionalBool **)a2 + 4));
    }
    else
    {
      v10 = 0;
    }
    *((_QWORD *)this + 4) = v10;
    if (*((_QWORD *)a2 + 5))
    {
      v9 = (SnippetUI::ActionProperty *)operator new();
      SnippetUI::ActionProperty::ActionProperty(v9, *((const SnippetUI::ActionProperty **)a2 + 5));
    }
    else
    {
      v9 = 0;
    }
  }
  *((_QWORD *)this + 5) = v9;
  return this;
}

void sub_1BFBDFA18(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;

  MEMORY[0x1C3B8D890](v2, 0x10A1C40B18DE219);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::StatusIndicator_InProgress::CopyFrom(SnippetUI::StatusIndicator_InProgress *this, const SnippetUI::StatusIndicator_InProgress *a2)
{
  if (a2 != this)
  {
    SnippetUI::StatusIndicator_InProgress::Clear(this);
    SnippetUI::StatusIndicator_InProgress::MergeFrom(this, a2);
  }
}

void SnippetUI::StatusIndicator_InProgress::InternalSwap(SnippetUI::StatusIndicator_InProgress *this, SnippetUI::StatusIndicator_InProgress *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  uint64_t v5;
  google::protobuf::UnknownFieldSet *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  google::protobuf::UnknownFieldSet *v16;

  v4 = (SnippetUI::StatusIndicator_InProgress *)((char *)this + 8);
  v5 = *((_QWORD *)a2 + 1);
  if ((*((_BYTE *)this + 8) & 1) != 0)
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v6 = v16;
      goto LABEL_6;
    }
LABEL_5:
    v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
    google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
    goto LABEL_7;
  }
  if ((v5 & 1) != 0)
    goto LABEL_5;
LABEL_7:
  v7 = (uint64_t *)*((_QWORD *)this + 2);
  v8 = (uint64_t **)((char *)a2 + 16);
  if (v7 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_13;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 2, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v7 = (uint64_t *)*((_QWORD *)this + 2);
  }
  v9 = *v8;
  if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 2, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v9 = *v8;
  }
  v10 = v7[2];
  v11 = *(_OWORD *)v7;
  v12 = v9[2];
  *(_OWORD *)v7 = *(_OWORD *)v9;
  v7[2] = v12;
  *(_OWORD *)v9 = v11;
  v9[2] = v10;
LABEL_13:
  v13 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v13;
  v14 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v14;
  v15 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v15;
}

void SnippetUI::StatusIndicator_Cancelled::InitAsDefaultInstance(SnippetUI::StatusIndicator_Cancelled *this)
{
  qword_1ED1D4D40 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1ED1D4D48 = &SnippetUI::_OptionalBool_default_instance_;
  qword_1ED1D4D50 = (uint64_t)&SnippetUI::_ActionProperty_default_instance_;
}

uint64_t SnippetUI::StatusIndicator_Cancelled::_Internal::text(SnippetUI::StatusIndicator_Cancelled::_Internal *this, const SnippetUI::StatusIndicator_Cancelled *a2)
{
  return *((_QWORD *)this + 3);
}

uint64_t SnippetUI::StatusIndicator_Cancelled::_Internal::show_indicator(SnippetUI::StatusIndicator_Cancelled::_Internal *this, const SnippetUI::StatusIndicator_Cancelled *a2)
{
  return *((_QWORD *)this + 4);
}

uint64_t SnippetUI::StatusIndicator_Cancelled::_Internal::action(SnippetUI::StatusIndicator_Cancelled::_Internal *this, const SnippetUI::StatusIndicator_Cancelled *a2)
{
  return *((_QWORD *)this + 5);
}

uint64_t SnippetUI::StatusIndicator_Cancelled::clear_text(SnippetUI::StatusIndicator_Cancelled *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 3);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 3) = 0;
  return result;
}

uint64_t SnippetUI::StatusIndicator_Cancelled::clear_show_indicator(SnippetUI::StatusIndicator_Cancelled *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 4);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 4) = 0;
  return result;
}

uint64_t SnippetUI::StatusIndicator_Cancelled::clear_action(SnippetUI::StatusIndicator_Cancelled *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 5);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 5) = 0;
  return result;
}

SnippetUI::StatusIndicator_Cancelled *SnippetUI::StatusIndicator_Cancelled::StatusIndicator_Cancelled(SnippetUI::StatusIndicator_Cancelled *this, const SnippetUI::StatusIndicator_Cancelled *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  SnippetUI::TextProperty *v8;
  SnippetUI::ActionProperty *v9;
  SnippetUI::OptionalBool *v10;

  *(_QWORD *)this = &off_1E7936518;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 12) = 0;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::StatusIndicator_Cancelled *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  v5 = *((_QWORD *)a2 + 2);
  if (*(char *)(v5 + 23) < 0)
    v6 = *(_QWORD *)(v5 + 8);
  else
    v6 = *(unsigned __int8 *)(v5 + 23);
  if ((uint64_t *)v5 != &google::protobuf::internal::fixed_address_empty_string && v6 != 0)
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, v5);
  if (a2 == (const SnippetUI::StatusIndicator_Cancelled *)&SnippetUI::_StatusIndicator_Cancelled_default_instance_)
  {
    v9 = 0;
    *((_QWORD *)this + 3) = 0;
    *((_QWORD *)this + 4) = 0;
  }
  else
  {
    if (*((_QWORD *)a2 + 3))
    {
      v8 = (SnippetUI::TextProperty *)operator new();
      SnippetUI::TextProperty::TextProperty(v8, *((const SnippetUI::TextProperty **)a2 + 3));
    }
    else
    {
      v8 = 0;
    }
    *((_QWORD *)this + 3) = v8;
    if (*((_QWORD *)a2 + 4))
    {
      v10 = (SnippetUI::OptionalBool *)operator new();
      SnippetUI::OptionalBool::OptionalBool(v10, *((const SnippetUI::OptionalBool **)a2 + 4));
    }
    else
    {
      v10 = 0;
    }
    *((_QWORD *)this + 4) = v10;
    if (*((_QWORD *)a2 + 5))
    {
      v9 = (SnippetUI::ActionProperty *)operator new();
      SnippetUI::ActionProperty::ActionProperty(v9, *((const SnippetUI::ActionProperty **)a2 + 5));
    }
    else
    {
      v9 = 0;
    }
  }
  *((_QWORD *)this + 5) = v9;
  return this;
}

void sub_1BFBDFE14(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;

  MEMORY[0x1C3B8D890](v2, 0x10A1C40B18DE219);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::StatusIndicator_Cancelled::CopyFrom(SnippetUI::StatusIndicator_Cancelled *this, const SnippetUI::StatusIndicator_Cancelled *a2)
{
  if (a2 != this)
  {
    SnippetUI::StatusIndicator_Cancelled::Clear(this);
    SnippetUI::StatusIndicator_Cancelled::MergeFrom(this, a2);
  }
}

void SnippetUI::StatusIndicator_Cancelled::InternalSwap(SnippetUI::StatusIndicator_Cancelled *this, SnippetUI::StatusIndicator_Cancelled *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  uint64_t v5;
  google::protobuf::UnknownFieldSet *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  google::protobuf::UnknownFieldSet *v16;

  v4 = (SnippetUI::StatusIndicator_Cancelled *)((char *)this + 8);
  v5 = *((_QWORD *)a2 + 1);
  if ((*((_BYTE *)this + 8) & 1) != 0)
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v6 = v16;
      goto LABEL_6;
    }
LABEL_5:
    v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
    google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
    goto LABEL_7;
  }
  if ((v5 & 1) != 0)
    goto LABEL_5;
LABEL_7:
  v7 = (uint64_t *)*((_QWORD *)this + 2);
  v8 = (uint64_t **)((char *)a2 + 16);
  if (v7 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_13;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 2, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v7 = (uint64_t *)*((_QWORD *)this + 2);
  }
  v9 = *v8;
  if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 2, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v9 = *v8;
  }
  v10 = v7[2];
  v11 = *(_OWORD *)v7;
  v12 = v9[2];
  *(_OWORD *)v7 = *(_OWORD *)v9;
  v7[2] = v12;
  *(_OWORD *)v9 = v11;
  v9[2] = v10;
LABEL_13:
  v13 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v13;
  v14 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v14;
  v15 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v15;
}

uint64_t *YAML::NodeEvents::AliasManager::RegisterReference(YAML::NodeEvents::AliasManager *this, const YAML::detail::node *a2)
{
  unint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)a2;
  v3 = *((_QWORD *)this + 3) + 1;
  *((_QWORD *)this + 3) = v3;
  return std::__tree<std::__value_type<YAML::detail::node_ref const*,unsigned long>,std::__map_value_compare<YAML::detail::node_ref const*,std::__value_type<YAML::detail::node_ref const*,unsigned long>,std::less<YAML::detail::node_ref const*>,true>,std::allocator<std::__value_type<YAML::detail::node_ref const*,unsigned long>>>::__emplace_unique_key_args<YAML::detail::node_ref const*,std::pair<YAML::detail::node_ref const*,unsigned long>>((uint64_t *)this, v2, v2, v3);
}

uint64_t *std::__tree<std::__value_type<YAML::detail::node_ref const*,unsigned long>,std::__map_value_compare<YAML::detail::node_ref const*,std::__value_type<YAML::detail::node_ref const*,unsigned long>,std::less<YAML::detail::node_ref const*>,true>,std::allocator<std::__value_type<YAML::detail::node_ref const*,unsigned long>>>::__emplace_unique_key_args<YAML::detail::node_ref const*,std::pair<YAML::detail::node_ref const*,unsigned long>>(uint64_t *result, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t **v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;

  v6 = result;
  v8 = (uint64_t **)(result + 1);
  v7 = (uint64_t *)result[1];
  if (v7)
  {
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v7;
        v10 = v7[4];
        if (v10 <= a2)
          break;
        v7 = *v9;
        v8 = v9;
        if (!*v9)
          goto LABEL_9;
      }
      if (v10 >= a2)
        break;
      v7 = v9[1];
      if (!v7)
      {
        v8 = v9 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v9 = (uint64_t **)(result + 1);
LABEL_9:
    v11 = (uint64_t *)operator new(0x30uLL);
    v11[4] = a3;
    v11[5] = a4;
    *v11 = 0;
    v11[1] = 0;
    v11[2] = (uint64_t)v9;
    *v8 = v11;
    v12 = *(_QWORD *)*v6;
    if (v12)
    {
      *v6 = v12;
      v13 = *v8;
    }
    else
    {
      v13 = v11;
    }
    result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v6[1], v13);
    ++v6[2];
  }
  return result;
}

uint64_t YAML::NodeEvents::AliasManager::LookupAnchor(YAML::NodeEvents::AliasManager *this, const YAML::detail::node *a2)
{
  char *v2;
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  char *v6;
  unint64_t v7;
  BOOL v8;
  _QWORD *v9;

  v4 = (_QWORD *)*((_QWORD *)this + 1);
  v2 = (char *)this + 8;
  v3 = v4;
  if (!v4)
    return 0;
  v5 = *(_QWORD *)a2;
  v6 = v2;
  do
  {
    v7 = v3[4];
    v8 = v7 >= v5;
    if (v7 >= v5)
      v9 = v3;
    else
      v9 = v3 + 1;
    if (v8)
      v6 = (char *)v3;
    v3 = (_QWORD *)*v9;
  }
  while (*v9);
  if (v6 != v2 && v5 >= *((_QWORD *)v6 + 4))
    return *((_QWORD *)v6 + 5);
  else
    return 0;
}

YAML::NodeEvents *YAML::NodeEvents::NodeEvents(YAML::NodeEvents *this, const YAML::Node *a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t **v6;

  v3 = *((_QWORD *)a2 + 5);
  *(_QWORD *)this = *((_QWORD *)a2 + 4);
  *((_QWORD *)this + 1) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = (uint64_t **)*((_QWORD *)a2 + 6);
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 2) = v6;
  *((_QWORD *)this + 3) = (char *)this + 32;
  if (v6)
    YAML::NodeEvents::Setup((uint64_t)this, v6);
  return this;
}

void sub_1BFBE015C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<YAML::detail::node_ref const*,int>,std::__map_value_compare<YAML::detail::node_ref const*,std::__value_type<YAML::detail::node_ref const*,int>,std::less<YAML::detail::node_ref const*>,true>,std::allocator<std::__value_type<YAML::detail::node_ref const*,int>>>::destroy(*(_QWORD **)(v1 + 32));
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t YAML::NodeEvents::Setup(uint64_t this, uint64_t **a2)
{
  uint64_t v3;
  uint64_t *v4;
  char *v5;
  uint64_t **v6;
  char *v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t *v11;
  int v12;
  uint64_t v13;
  int v14;
  const YAML::detail::node ***v15;
  const YAML::detail::node ***v16;
  const YAML::detail::node ***v17;
  const YAML::detail::node ***v18;
  int v19;
  uint64_t v20;
  _BYTE v21[16];
  int v22;
  const YAML::detail::node **v23;
  _QWORD v24[2];

  v3 = this;
  v4 = *a2;
  v6 = (uint64_t **)(this + 32);
  v5 = *(char **)(this + 32);
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = v5;
        v8 = *((_QWORD *)v5 + 4);
        if ((unint64_t)v4 >= v8)
          break;
        v5 = *(char **)v7;
        v6 = (uint64_t **)v7;
        if (!*(_QWORD *)v7)
          goto LABEL_9;
      }
      if (v8 >= (unint64_t)v4)
        break;
      v5 = (char *)*((_QWORD *)v7 + 1);
      if (!v5)
      {
        v6 = (uint64_t **)(v7 + 8);
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = (char *)(this + 32);
LABEL_9:
    v9 = v7;
    v7 = (char *)operator new(0x30uLL);
    *((_QWORD *)v7 + 4) = v4;
    *((_DWORD *)v7 + 10) = 0;
    *(_QWORD *)v7 = 0;
    *((_QWORD *)v7 + 1) = 0;
    *((_QWORD *)v7 + 2) = v9;
    *v6 = (uint64_t *)v7;
    v10 = **(_QWORD **)(v3 + 24);
    v11 = (uint64_t *)v7;
    if (v10)
    {
      *(_QWORD *)(v3 + 24) = v10;
      v11 = *v6;
    }
    this = (uint64_t)std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v3 + 32), v11);
    ++*(_QWORD *)(v3 + 40);
  }
  v12 = *((_DWORD *)v7 + 10);
  *((_DWORD *)v7 + 10) = v12 + 1;
  if (v12 <= 0)
  {
    v13 = **a2;
    if (*(_BYTE *)v13)
    {
      v14 = *(_DWORD *)(v13 + 16);
      if (v14 == 4)
      {
        YAML::detail::node_data::begin(**a2, (uint64_t)&v22);
        while (1)
        {
          this = YAML::detail::node_data::end(v13, (uint64_t)&v19);
          if (v22 == v19)
          {
            v17 = &v23;
            v18 = (const YAML::detail::node ***)&v20;
            if (v22 != 1)
            {
              if (v22 != 2)
                return this;
              v17 = (const YAML::detail::node ***)v24;
              v18 = (const YAML::detail::node ***)v21;
            }
            if (*v17 == *v18)
              break;
          }
          YAML::NodeEvents::Setup((YAML::NodeEvents *)v3, *(const YAML::detail::node **)v24[0]);
          YAML::NodeEvents::Setup((YAML::NodeEvents *)v3, *(const YAML::detail::node **)(v24[0] + 8));
          YAML::detail::node_iterator_base<YAML::detail::node>::operator++((uint64_t)&v22);
          v13 = **a2;
        }
      }
      else if (v14 == 3)
      {
        YAML::detail::node_data::begin(**a2, (uint64_t)&v22);
        while (1)
        {
          this = YAML::detail::node_data::end(v13, (uint64_t)&v19);
          if (v22 == v19)
          {
            v15 = &v23;
            v16 = (const YAML::detail::node ***)&v20;
            if (v22 != 1)
            {
              if (v22 != 2)
                return this;
              v15 = (const YAML::detail::node ***)v24;
              v16 = (const YAML::detail::node ***)v21;
            }
            if (*v15 == *v16)
              break;
          }
          YAML::NodeEvents::Setup((YAML::NodeEvents *)v3, *v23);
          YAML::detail::node_iterator_base<YAML::detail::node>::operator++((uint64_t)&v22);
          v13 = **a2;
        }
      }
    }
  }
  return this;
}

void YAML::NodeEvents::Emit(YAML::NodeEvents *a1, uint64_t a2)
{
  uint64_t **v4;
  uint64_t v5;
  int v6;
  _QWORD **v7;
  _QWORD *v8[3];

  v7 = v8;
  memset(v8, 0, sizeof(v8));
  v5 = 0;
  v6 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 16))(a2, &v5);
  v4 = (uint64_t **)*((_QWORD *)a1 + 2);
  if (v4)
    YAML::NodeEvents::Emit(a1, v4, a2, (uint64_t *)&v7);
  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  std::__tree<std::__value_type<YAML::detail::node_ref const*,int>,std::__map_value_compare<YAML::detail::node_ref const*,std::__value_type<YAML::detail::node_ref const*,int>,std::less<YAML::detail::node_ref const*>,true>,std::allocator<std::__value_type<YAML::detail::node_ref const*,int>>>::destroy(v8[0]);
}

void sub_1BFBE044C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, _QWORD *a12)
{
  std::__tree<std::__value_type<YAML::detail::node_ref const*,int>,std::__map_value_compare<YAML::detail::node_ref const*,std::__value_type<YAML::detail::node_ref const*,int>,std::less<YAML::detail::node_ref const*>,true>,std::allocator<std::__value_type<YAML::detail::node_ref const*,int>>>::destroy(a12);
  _Unwind_Resume(a1);
}

uint64_t YAML::NodeEvents::Emit(YAML::NodeEvents *a1, uint64_t **a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t *v12;
  unint64_t v13;
  BOOL v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t *v19;
  unint64_t v20;
  BOOL v21;
  _QWORD *v22;
  uint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t *v30;
  int v31;
  uint64_t v32;
  _BYTE v33[16];
  uint64_t v34;
  _QWORD *v35;
  _QWORD v36[2];

  result = YAML::NodeEvents::IsAliased(a1, (const YAML::detail::node *)a2);
  v9 = *a2;
  if (!(_DWORD)result)
    goto LABEL_26;
  v11 = a4 + 1;
  v10 = (_QWORD *)a4[1];
  if (v10)
  {
    v12 = a4 + 1;
    do
    {
      v13 = v10[4];
      v14 = v13 >= (unint64_t)v9;
      if (v13 >= (unint64_t)v9)
        v15 = v10;
      else
        v15 = v10 + 1;
      if (v14)
        v12 = v10;
      v10 = (_QWORD *)*v15;
    }
    while (*v15);
    if (v12 != v11 && (unint64_t)v9 >= v12[4])
    {
      v16 = v12[5];
      if (v16)
      {
        v34 = 0;
        LODWORD(v35) = 0;
        return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a3 + 40))(a3, &v34, v16);
      }
    }
  }
  v17 = a4[3] + 1;
  a4[3] = v17;
  result = (uint64_t)std::__tree<std::__value_type<YAML::detail::node_ref const*,unsigned long>,std::__map_value_compare<YAML::detail::node_ref const*,std::__value_type<YAML::detail::node_ref const*,unsigned long>,std::less<YAML::detail::node_ref const*>,true>,std::allocator<std::__value_type<YAML::detail::node_ref const*,unsigned long>>>::__emplace_unique_key_args<YAML::detail::node_ref const*,std::pair<YAML::detail::node_ref const*,unsigned long>>(a4, (unint64_t)v9, (uint64_t)v9, v17);
  v9 = *a2;
  v18 = (_QWORD *)a4[1];
  if (!v18)
    goto LABEL_26;
  v19 = a4 + 1;
  do
  {
    v20 = v18[4];
    v21 = v20 >= (unint64_t)v9;
    if (v20 >= (unint64_t)v9)
      v22 = v18;
    else
      v22 = v18 + 1;
    if (v21)
      v19 = v18;
    v18 = (_QWORD *)*v22;
  }
  while (*v22);
  if (v19 != v11 && (unint64_t)v9 >= v19[4])
    v23 = v19[5];
  else
LABEL_26:
    v23 = 0;
  v24 = (_BYTE *)*v9;
  if (*(_BYTE *)*v9)
  {
    switch(*((_DWORD *)v24 + 4))
    {
      case 1:
        v34 = 0;
        LODWORD(v35) = 0;
        result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a3 + 32))(a3, &v34, v23);
        break;
      case 2:
        v34 = 0;
        LODWORD(v35) = 0;
        result = (*(uint64_t (**)(uint64_t, uint64_t *, _BYTE *, uint64_t, _BYTE *))(*(_QWORD *)a3 + 48))(a3, &v34, v24 + 24, v23, v24 + 56);
        break;
      case 3:
        v34 = 0;
        LODWORD(v35) = 0;
        (*(void (**)(uint64_t, uint64_t *, _BYTE *, uint64_t, _QWORD))(*(_QWORD *)a3 + 56))(a3, &v34, v24 + 24, v23, *((unsigned int *)v24 + 12));
        v25 = **a2;
        YAML::detail::node_data::begin(v25, (uint64_t)&v34);
        while (1)
        {
          YAML::detail::node_data::end(v25, (uint64_t)&v31);
          if ((_DWORD)v34 == v31)
          {
            v26 = &v35;
            v27 = &v32;
            if ((_DWORD)v34 != 1)
            {
              if ((_DWORD)v34 != 2)
                break;
              v26 = v36;
              v27 = (uint64_t *)v33;
            }
            if (*v26 == *v27)
              break;
          }
          YAML::NodeEvents::Emit(a1, *v35, a3, a4);
          YAML::detail::node_iterator_base<YAML::detail::node>::operator++((uint64_t)&v34);
          v25 = **a2;
        }
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 64))(a3);
        break;
      case 4:
        v34 = 0;
        LODWORD(v35) = 0;
        (*(void (**)(uint64_t, uint64_t *, _BYTE *, uint64_t, _QWORD))(*(_QWORD *)a3 + 72))(a3, &v34, v24 + 24, v23, *((unsigned int *)v24 + 12));
        v28 = **a2;
        YAML::detail::node_data::begin(v28, (uint64_t)&v34);
        while (1)
        {
          YAML::detail::node_data::end(v28, (uint64_t)&v31);
          if ((_DWORD)v34 == v31)
          {
            v29 = &v35;
            v30 = &v32;
            if ((_DWORD)v34 != 1)
            {
              if ((_DWORD)v34 != 2)
                break;
              v29 = v36;
              v30 = (uint64_t *)v33;
            }
            if (*v29 == *v30)
              break;
          }
          YAML::NodeEvents::Emit(a1, *(_QWORD *)v36[0], a3, a4);
          YAML::NodeEvents::Emit(a1, *(_QWORD *)(v36[0] + 8), a3, a4);
          YAML::detail::node_iterator_base<YAML::detail::node>::operator++((uint64_t)&v34);
          v28 = **a2;
        }
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 80))(a3);
        break;
      default:
        return result;
    }
  }
  return result;
}

BOOL YAML::NodeEvents::IsAliased(YAML::NodeEvents *this, const YAML::detail::node *a2)
{
  char *v2;
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  char *v6;
  unint64_t v7;
  BOOL v8;
  _QWORD *v9;

  v4 = (_QWORD *)*((_QWORD *)this + 4);
  v2 = (char *)this + 32;
  v3 = v4;
  if (!v4)
    return 0;
  v5 = *(_QWORD *)a2;
  v6 = v2;
  do
  {
    v7 = v3[4];
    v8 = v7 >= v5;
    if (v7 >= v5)
      v9 = v3;
    else
      v9 = v3 + 1;
    if (v8)
      v6 = (char *)v3;
    v3 = (_QWORD *)*v9;
  }
  while (*v9);
  return v6 != v2 && v5 >= *((_QWORD *)v6 + 4) && *((_DWORD *)v6 + 10) > 1;
}

void siri::dialogengine::EncodeBase64(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  char *v2;
  uint64_t v4;
  int v5;
  char *v6;
  int v7;
  unsigned __int8 v8;
  uint64_t *v9;
  siri::dialogengine *v10;
  unsigned __int8 v11;
  unsigned __int8 v12;
  unint64_t v13;
  uint64_t *v14;
  siri::dialogengine *v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unint64_t v18;
  uint64_t *v19;
  siri::dialogengine *v20;
  uint64_t *v21;
  siri::dialogengine *v22;
  siri::dialogengine *v23;
  unsigned __int8 v24;
  uint64_t *v25;
  siri::dialogengine *v26;
  unsigned __int8 v27;
  unsigned __int8 v28;
  unint64_t v29;
  uint64_t *v30;
  siri::dialogengine *v31;
  unsigned __int8 v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t *v35;
  int v36;
  _BYTE v38[4];
  unsigned __int8 v39;
  unsigned __int8 v40;
  unsigned __int8 v41;

  v2 = (char *)a1;
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    v4 = *(unsigned __int8 *)(a1 + 23);
    if (*(_BYTE *)(a1 + 23))
    {
      a2->__r_.__value_.__r.__words[0] = 0;
      a2->__r_.__value_.__l.__size_ = 0;
      a2->__r_.__value_.__r.__words[2] = 0;
      goto LABEL_6;
    }
LABEL_24:
    std::string::basic_string[abi:ne180100]<0>(a2, "");
    return;
  }
  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
    goto LABEL_24;
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  v2 = *(char **)a1;
LABEL_6:
  v5 = 0;
  v6 = &v2[v4];
  do
  {
    while (1)
    {
      v7 = v5;
      *(&v39 + v5) = *v2;
      if (v5 < 2)
        break;
      siri::dialogengine::GetBase64Chars((siri::dialogengine *)a1);
      v8 = v39;
      if (byte_1EF5807AF >= 0)
        v9 = &siri::dialogengine::GetBase64Chars(void)::base64Chars;
      else
        v9 = (uint64_t *)siri::dialogengine::GetBase64Chars(void)::base64Chars;
      std::string::push_back(a2, *((_BYTE *)v9 + ((unint64_t)v39 >> 2)));
      siri::dialogengine::GetBase64Chars(v10);
      v11 = v8;
      v12 = v40;
      v13 = ((unint64_t)v40 >> 4) & 0xFFFFFFFFFFFFFFCFLL | (16 * (v11 & 3));
      if (byte_1EF5807AF >= 0)
        v14 = &siri::dialogengine::GetBase64Chars(void)::base64Chars;
      else
        v14 = (uint64_t *)siri::dialogengine::GetBase64Chars(void)::base64Chars;
      std::string::push_back(a2, *((_BYTE *)v14 + v13));
      siri::dialogengine::GetBase64Chars(v15);
      v16 = v12;
      v17 = v41;
      v18 = ((unint64_t)v41 >> 6) & 0xFFFFFFFFFFFFFFC3 | (4 * (v16 & 0xF));
      if (byte_1EF5807AF >= 0)
        v19 = &siri::dialogengine::GetBase64Chars(void)::base64Chars;
      else
        v19 = (uint64_t *)siri::dialogengine::GetBase64Chars(void)::base64Chars;
      std::string::push_back(a2, *((_BYTE *)v19 + v18));
      siri::dialogengine::GetBase64Chars(v20);
      if (byte_1EF5807AF >= 0)
        v21 = &siri::dialogengine::GetBase64Chars(void)::base64Chars;
      else
        v21 = (uint64_t *)siri::dialogengine::GetBase64Chars(void)::base64Chars;
      std::string::push_back(a2, *((_BYTE *)v21 + (v17 & 0x3F)));
      v5 = 0;
      if (++v2 == v6)
        return;
    }
    ++v5;
    ++v2;
  }
  while (v2 != v6);
  bzero(&v39 + v5, (1 - v7) + 1);
  siri::dialogengine::GetBase64Chars(v22);
  v24 = v39;
  if (byte_1EF5807AF >= 0)
    v25 = &siri::dialogengine::GetBase64Chars(void)::base64Chars;
  else
    v25 = (uint64_t *)siri::dialogengine::GetBase64Chars(void)::base64Chars;
  v38[0] = *((_BYTE *)v25 + ((unint64_t)v39 >> 2));
  siri::dialogengine::GetBase64Chars(v23);
  v27 = v24;
  v28 = v40;
  v29 = ((unint64_t)v40 >> 4) & 0xFFFFFFFFFFFFFFCFLL | (16 * (v27 & 3));
  if (byte_1EF5807AF >= 0)
    v30 = &siri::dialogengine::GetBase64Chars(void)::base64Chars;
  else
    v30 = (uint64_t *)siri::dialogengine::GetBase64Chars(void)::base64Chars;
  v38[1] = *((_BYTE *)v30 + v29);
  siri::dialogengine::GetBase64Chars(v26);
  v32 = v41;
  if (byte_1EF5807AF >= 0)
    v33 = &siri::dialogengine::GetBase64Chars(void)::base64Chars;
  else
    v33 = (uint64_t *)siri::dialogengine::GetBase64Chars(void)::base64Chars;
  v38[2] = *((_BYTE *)v33 + (((unint64_t)v41 >> 6) & 0xFFFFFFFFFFFFFFC3 | (4 * (v28 & 0xF))));
  siri::dialogengine::GetBase64Chars(v31);
  v34 = 0;
  if (byte_1EF5807AF >= 0)
    v35 = &siri::dialogengine::GetBase64Chars(void)::base64Chars;
  else
    v35 = (uint64_t *)siri::dialogengine::GetBase64Chars(void)::base64Chars;
  v38[3] = *((_BYTE *)v35 + (v32 & 0x3F));
  do
    std::string::push_back(a2, v38[v34++]);
  while (v7 + 2 != v34);
  v36 = v7 - 3;
  while (!__CFADD__(v36++, 1))
    std::string::push_back(a2, 61);
}

void sub_1BFBE0A98(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::GetBase64Chars(siri::dialogengine *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      std::string::basic_string[abi:ne180100]<0>(&siri::dialogengine::GetBase64Chars(void)::base64Chars, "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/");
      __cxa_atexit(MEMORY[0x1E0DE44D0], &siri::dialogengine::GetBase64Chars(void)::base64Chars, &dword_1BF794000);
    }
  }
}

void sub_1BFBE0B3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void siri::dialogengine::DecodeBase64(std::string::size_type a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v3;
  char *v4;
  int v5;
  char *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t i;
  uint64_t v11;
  std::string *v12;
  __int128 v13;
  uint64_t j;
  std::string::value_type v15;
  uint64_t v16;
  std::string::value_type *v17;
  std::string::value_type v18;
  std::string v19;
  void *__p[2];
  std::string::size_type v21;
  char v22;
  unsigned __int8 v23;
  unsigned __int8 v24;
  char v25;
  char v26;
  char v27;
  char v28;

  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    v3 = *(unsigned __int8 *)(a1 + 23);
    if (*(_BYTE *)(a1 + 23))
    {
      a2->__r_.__value_.__r.__words[0] = 0;
      a2->__r_.__value_.__l.__size_ = 0;
      v4 = (char *)a1;
      a2->__r_.__value_.__r.__words[2] = 0;
      goto LABEL_6;
    }
LABEL_24:
    std::string::basic_string[abi:ne180100]<0>(a2, "");
    return;
  }
  v3 = *(_QWORD *)(a1 + 8);
  if (!v3)
    goto LABEL_24;
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  v4 = *(char **)a1;
LABEL_6:
  v5 = 0;
  v6 = &v4[v3];
  v7 = MEMORY[0x1E0C80978];
  while (1)
  {
    v8 = *v4;
    if (v8 == 61)
      goto LABEL_28;
    a1 = (v8 & 0x80000000) != 0 ? __maskrune(*v4, 0x500uLL) : *(_DWORD *)(v7 + 4 * v8 + 60) & 0x500u;
    if ((v8 & 0xFFFFFFFB) != 0x2B && (_DWORD)a1 == 0)
      break;
    *(&v22 + v5) = v8;
    if (v5 >= 3)
    {
      for (i = 0; i != 4; ++i)
      {
        siri::dialogengine::GetBase64Chars((siri::dialogengine *)a1);
        a1 = std::string::find((const std::string *)&siri::dialogengine::GetBase64Chars(void)::base64Chars, *(&v22 + i), 0);
        *(&v22 + i) = a1;
      }
      v11 = 0;
      v26 = (4 * v22) | (v23 >> 4) & 3;
      v27 = (16 * v23) | (v24 >> 2) & 0xF;
      v28 = v25 + (v24 << 6);
      do
        std::string::push_back(a2, *(&v26 + v11++));
      while (v11 != 3);
      v5 = 0;
    }
    else
    {
      ++v5;
    }
    if (++v4 == v6)
      goto LABEL_28;
  }
  std::operator+<char>();
  v12 = std::string::append(&v19, "'");
  v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v21 = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  siri::dialogengine::Log::LogWithLevel((uint64_t)__p, 1u);
  if (SHIBYTE(v21) < 0)
    operator delete(__p[0]);
  if ((SHIBYTE(v19.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_28:
    if (!v5)
      return;
    goto LABEL_29;
  }
  operator delete(v19.__r_.__value_.__l.__data_);
  if (!v5)
    return;
LABEL_29:
  for (j = 0; j != 4; ++j)
  {
    if (j >= v5)
      v15 = 0;
    else
      v15 = *(&v22 + j);
    siri::dialogengine::GetBase64Chars((siri::dialogengine *)a1);
    a1 = std::string::find((const std::string *)&siri::dialogengine::GetBase64Chars(void)::base64Chars, v15, 0);
    *(&v22 + j) = a1;
  }
  v26 = (4 * v22) | (v23 >> 4) & 3;
  v27 = (16 * v23) | (v24 >> 2) & 0xF;
  v28 = v25 + (v24 << 6);
  if (v5 >= 2)
  {
    v16 = (v5 - 1);
    v17 = &v26;
    do
    {
      v18 = *v17++;
      std::string::push_back(a2, v18);
      --v16;
    }
    while (v16);
  }
}

void sub_1BFBE0E0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  if (*(char *)(v21 + 23) < 0)
    operator delete(*(void **)v21);
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::GroupFirst::~GroupFirst(siri::dialogengine::GroupFirst *this)
{
  siri::dialogengine::Group::~Group(this);
  JUMPOUT(0x1C3B8D890);
}

uint64_t siri::dialogengine::GroupFirst::Validate(uint64_t **this, siri::dialogengine::Context *a2)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  siri::dialogengine::Dialog *v12;
  siri::dialogengine::Text *v13;
  siri::dialogengine::Context *v14;
  int HasRequiredVariablesOrPhrases;
  int v16;
  _OWORD *v17;
  char v18;
  std::string::size_type size;
  std::string *v20;
  __int128 v21;
  std::string *v22;
  __int128 v23;
  std::string *v24;
  __int128 v25;
  std::string *p_p;
  std::string::size_type v27;
  std::string *v28;
  __int128 v29;
  std::string::size_type v30;
  char v31;
  std::string::size_type v32;
  char v33;
  std::string *v34;
  std::string *v35;
  BOOL v36;
  char v38;
  siri::dialogengine::Node *v39;
  int v40;
  std::string v41;
  void *v42;
  char v43;
  std::string __p;
  std::string v45;
  std::string v46;
  std::string v47;
  uint64_t v48;
  std::__shared_weak_count *v49;

  v38 = siri::dialogengine::Group::Validate(this, a2);
  v4 = this[26];
  v5 = this[27];
  v39 = (siri::dialogengine::Node *)this;
  if (v4 != v5)
  {
    v40 = 0;
    while (1)
    {
      v6 = *v4;
      v7 = (std::__shared_weak_count *)v4[1];
      v48 = *v4;
      v49 = v7;
      if (v7)
      {
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v9 = __ldxr(p_shared_owners);
        while (__stxr(v9 + 1, p_shared_owners));
      }
      if (!v6
      {
        goto LABEL_8;
      }
      if (v12)
        break;
      if (v13)
      {
        HasRequiredVariablesOrPhrases = siri::dialogengine::Text::HasRequiredVariablesOrPhrases(v13, v14);
        goto LABEL_19;
      }
      v16 = 0;
LABEL_20:
      v17 = (_OWORD *)(v6 + 120);
      if (*(char *)(v6 + 143) < 0)
      {
        std::string::__init_copy_ctor_external(&v41, *(const std::string::value_type **)(v6 + 120), *(_QWORD *)(v6 + 128));
      }
      else
      {
        *(_OWORD *)&v41.__r_.__value_.__l.__data_ = *v17;
        v41.__r_.__value_.__r.__words[2] = *(_QWORD *)(v6 + 136);
      }
      if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
      {
        size = v41.__r_.__value_.__l.__size_;
        operator delete(v41.__r_.__value_.__l.__data_);
        if (!size)
        {
LABEL_32:
          if (v40 == 1)
          {
            siri::dialogengine::Node::GetIdForDebug(v39, a2, 1, &v47);
            v20 = std::string::insert(&v47, 0, "Multiple entries under 'first' with no condition. Only the first one will be used");
            v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
            v41.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v41.__r_.__value_.__l.__data_ = v21;
            v20->__r_.__value_.__l.__size_ = 0;
            v20->__r_.__value_.__r.__words[2] = 0;
            v20->__r_.__value_.__r.__words[0] = 0;
            siri::dialogengine::Context::AddValidationWarning((uint64_t)a2, (__int128 *)&v41, (uint64_t)v39);
            if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v41.__r_.__value_.__l.__data_);
            if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v47.__r_.__value_.__l.__data_);
            v38 = 0;
          }
          v40 += v16 ^ 1;
          goto LABEL_8;
        }
      }
      else if (!*((_BYTE *)&v41.__r_.__value_.__s + 23))
      {
        goto LABEL_32;
      }
      if (v40 < 1)
        v18 = 1;
      else
        v18 = v16;
      if ((v18 & 1) == 0)
      {
        if (*(char *)(v6 + 143) < 0)
        {
          std::string::__init_copy_ctor_external(&v45, *(const std::string::value_type **)(v6 + 120), *(_QWORD *)(v6 + 128));
        }
        else
        {
          *(_OWORD *)&v45.__r_.__value_.__l.__data_ = *v17;
          v45.__r_.__value_.__r.__words[2] = *(_QWORD *)(v6 + 136);
        }
        v22 = std::string::insert(&v45, 0, "Entry under 'first' element has potentially unreachable node with condition '");
        v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
        v46.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v23;
        v22->__r_.__value_.__l.__size_ = 0;
        v22->__r_.__value_.__r.__words[2] = 0;
        v22->__r_.__value_.__r.__words[0] = 0;
        v24 = std::string::append(&v46, "'");
        v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
        v47.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v25;
        v24->__r_.__value_.__l.__size_ = 0;
        v24->__r_.__value_.__r.__words[2] = 0;
        v24->__r_.__value_.__r.__words[0] = 0;
        siri::dialogengine::Node::GetIdForDebug((siri::dialogengine::Node *)v6, a2, 1, &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v27 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v27 = __p.__r_.__value_.__l.__size_;
        v28 = std::string::append(&v47, (const std::string::value_type *)p_p, v27);
        v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
        v41.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v41.__r_.__value_.__l.__data_ = v29;
        v28->__r_.__value_.__l.__size_ = 0;
        v28->__r_.__value_.__r.__words[2] = 0;
        v28->__r_.__value_.__r.__words[0] = 0;
        siri::dialogengine::Context::AddValidationWarning((uint64_t)a2, (__int128 *)&v41, (uint64_t)v39);
        if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v41.__r_.__value_.__l.__data_);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v47.__r_.__value_.__l.__data_);
        if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v46.__r_.__value_.__l.__data_);
        if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v45.__r_.__value_.__l.__data_);
        v38 = 0;
      }
LABEL_8:
      if (v7)
      {
        v10 = (unint64_t *)&v7->__shared_owners_;
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      v4 += 2;
      if (v4 == v5)
        goto LABEL_58;
    }
    HasRequiredVariablesOrPhrases = siri::dialogengine::Dialog::HasRequiredVariablesOrPhrases(v12, v14);
LABEL_19:
    v16 = HasRequiredVariablesOrPhrases;
    goto LABEL_20;
  }
LABEL_58:
  std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)&v47, (const void ***)v39 + 9);
  v30 = v47.__r_.__value_.__r.__words[0];
  if ((std::string::size_type *)v47.__r_.__value_.__l.__data_ == &v47.__r_.__value_.__r.__words[1])
  {
    v31 = v38;
  }
  else
  {
    v31 = v38;
    do
    {
      std::pair<std::string const,std::string>::pair[abi:ne180100](&v41, (__int128 *)(v30 + 32));
      std::string::basic_string[abi:ne180100]<0>(&v45, "first");
      siri::dialogengine::ValidateXmlAttributeVersion(a2, (const void **)&v45.__r_.__value_.__l.__data_, (uint64_t)&v41, &v46);
      if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v45.__r_.__value_.__l.__data_);
      v32 = HIBYTE(v46.__r_.__value_.__r.__words[2]);
      v33 = HIBYTE(v46.__r_.__value_.__r.__words[2]);
      if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v32 = v46.__r_.__value_.__l.__size_;
      if (v32)
      {
        siri::dialogengine::Context::AddValidationError((uint64_t)a2, (__int128 *)&v46, 0);
        v31 = 0;
        v33 = HIBYTE(v46.__r_.__value_.__r.__words[2]);
      }
      if (v33 < 0)
        operator delete(v46.__r_.__value_.__l.__data_);
      if (v43 < 0)
        operator delete(v42);
      if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v41.__r_.__value_.__l.__data_);
      v34 = *(std::string **)(v30 + 8);
      if (v34)
      {
        do
        {
          v35 = v34;
          v34 = (std::string *)v34->__r_.__value_.__r.__words[0];
        }
        while (v34);
      }
      else
      {
        do
        {
          v35 = *(std::string **)(v30 + 16);
          v36 = v35->__r_.__value_.__r.__words[0] == v30;
          v30 = (std::string::size_type)v35;
        }
        while (!v36);
      }
      v30 = (std::string::size_type)v35;
    }
    while (v35 != (std::string *)&v47.__r_.__value_.__r.__words[1]);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((_QWORD *)v47.__r_.__value_.__l.__size_);
  return v31 & 1;
}

void sub_1BFBE1310(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  uint64_t v41;

  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](v41 - 104);
  _Unwind_Resume(a1);
}

void siri::dialogengine::GroupFirst::Execute(siri::dialogengine::GroupFirst *this@<X0>, siri::dialogengine::Context *a2@<X1>, _QWORD *a3@<X8>)
{
  std::string *v6;
  __int128 v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  siri::dialogengine::Node *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::string *v15;
  __int128 v16;
  char v17;
  std::string *v18;
  __int128 v19;
  std::string *v20;
  __int128 v21;
  unint64_t *v22;
  unint64_t v23;
  std::string *v24;
  __int128 v25;
  std::string v26;
  void *__p[2];
  std::string::size_type v28;

  siri::dialogengine::Node::GetIdForDebug(this, a2, 0, &v26);
  v6 = std::string::insert(&v26, 0, "Executing 'First' group");
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v28 = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  siri::dialogengine::Log::Debug((siri::dialogengine *)__p);
  if (SHIBYTE(v28) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
  if (((*(uint64_t (**)(siri::dialogengine::GroupFirst *, siri::dialogengine::Context *))(*(_QWORD *)this + 48))(this, a2) & 1) != 0)
  {
    v9 = *((_QWORD *)this + 26);
    v10 = *((_QWORD *)this + 27);
    while (v9 != v10)
    {
      v12 = *(siri::dialogengine::Node **)v9;
      v11 = *(std::__shared_weak_count **)(v9 + 8);
      if (v11)
      {
        p_shared_owners = (unint64_t *)&v11->__shared_owners_;
        do
          v14 = __ldxr(p_shared_owners);
        while (__stxr(v14 + 1, p_shared_owners));
      }
      if (v12)
      {
        if (((*(uint64_t (**)(siri::dialogengine::Node *, siri::dialogengine::Context *))(*(_QWORD *)v12 + 48))(v12, a2) & 1) != 0)
        {
          (*(void (**)(siri::dialogengine::Node *, siri::dialogengine::Context *))(*(_QWORD *)v12 + 40))(v12, a2);
          if (*a3 != a3[1])
          {
            siri::dialogengine::Node::GetIdForDebug(v12, a2, 0, &v26);
            v15 = std::string::insert(&v26, 0, "  Match found for <first> group - returning ");
            v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
            v28 = v15->__r_.__value_.__r.__words[2];
            *(_OWORD *)__p = v16;
            v15->__r_.__value_.__l.__size_ = 0;
            v15->__r_.__value_.__r.__words[2] = 0;
            v15->__r_.__value_.__r.__words[0] = 0;
            siri::dialogengine::Log::Debug((siri::dialogengine *)__p);
            if (SHIBYTE(v28) < 0)
              operator delete(__p[0]);
            if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v26.__r_.__value_.__l.__data_);
            v17 = 0;
            if (!v11)
              goto LABEL_34;
LABEL_30:
            v22 = (unint64_t *)&v11->__shared_owners_;
            do
              v23 = __ldaxr(v22);
            while (__stlxr(v23 - 1, v22));
            if (!v23)
            {
              ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
              std::__shared_weak_count::__release_weak(v11);
            }
            goto LABEL_34;
          }
          siri::dialogengine::Node::GetIdForDebug(v12, a2, 0, &v26);
          v20 = std::string::insert(&v26, 0, "  Child of <first> returned an empty result - skipping: ");
          v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
          v28 = v20->__r_.__value_.__r.__words[2];
          *(_OWORD *)__p = v21;
          v20->__r_.__value_.__l.__size_ = 0;
          v20->__r_.__value_.__r.__words[2] = 0;
          v20->__r_.__value_.__r.__words[0] = 0;
          siri::dialogengine::Log::Debug((siri::dialogengine *)__p);
          if (SHIBYTE(v28) < 0)
            operator delete(__p[0]);
          if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v26.__r_.__value_.__l.__data_);
          __p[0] = a3;
          std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        }
        else
        {
          siri::dialogengine::Node::GetIdForDebug(v12, a2, 0, &v26);
          v18 = std::string::insert(&v26, 0, "  Condition for child of <first> failed - skipping: ");
          v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
          v28 = v18->__r_.__value_.__r.__words[2];
          *(_OWORD *)__p = v19;
          v18->__r_.__value_.__l.__size_ = 0;
          v18->__r_.__value_.__r.__words[2] = 0;
          v18->__r_.__value_.__r.__words[0] = 0;
          siri::dialogengine::Log::Debug((siri::dialogengine *)__p);
          if (SHIBYTE(v28) < 0)
            operator delete(__p[0]);
          if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v26.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"  Programming error: NULL node in <first> group", v8);
      }
      v17 = 1;
      if (v11)
        goto LABEL_30;
LABEL_34:
      if ((v17 & 1) == 0)
        return;
      v9 += 16;
    }
  }
  else
  {
    siri::dialogengine::Node::GetIdForDebug(this, a2, 0, &v26);
    v24 = std::string::insert(&v26, 0, "  Condition for <first> group failed - skipping: ");
    v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    v28 = v24->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v25;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Log::Debug((siri::dialogengine *)__p);
    if (SHIBYTE(v28) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v26.__r_.__value_.__l.__data_);
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
}

void sub_1BFBE1780(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  if (a17 < 0)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

void `non-virtual thunk to'siri::dialogengine::GroupFirst::~GroupFirst(siri::dialogengine::GroupFirst *this)
{
  siri::dialogengine::Group::~Group((siri::dialogengine::GroupFirst *)((char *)this - 64));
}

{
  siri::dialogengine::Group::~Group((siri::dialogengine::GroupFirst *)((char *)this - 64));
  JUMPOUT(0x1C3B8D890);
}

uint64_t `non-virtual thunk to'siri::dialogengine::GroupFirst::Validate(uint64_t **this, siri::dialogengine::Context *a2)
{
  return siri::dialogengine::GroupFirst::Validate(this - 8, a2);
}

double siri::dialogengine::GroupFirst::GroupFirst(siri::dialogengine::GroupFirst *this)
{
  double result;

  result = 0.0;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 9) = (char *)this + 80;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_DWORD *)this + 48) = 1065353216;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *((_QWORD *)this + 31) = 0;
  *(_QWORD *)this = &off_1E7936638;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = &unk_1E7936690;
  return result;
}

{
  double result;

  result = 0.0;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 9) = (char *)this + 80;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_DWORD *)this + 48) = 1065353216;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *((_QWORD *)this + 31) = 0;
  *(_QWORD *)this = &off_1E7936638;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = &unk_1E7936690;
  return result;
}

BOOL siri::dialogengine::WritePatternSchemaBinary(siri::dialogengine::PatternSchema **a1, std::string *a2, char a3)
{
  siri::dialogengine::PatternSchema *v6;
  __int128 v7;
  std::string *v8;
  std::string *v9;
  std::string *v10;
  std::string::__raw *v11;
  _DWORD *v12;
  uint64_t v13;
  int v14;
  siri::dialogengine::PatternSchemaBinary::Setting *v15;
  uint64_t v16;
  const std::string *v17;
  std::string *v18;
  std::string::size_type v19;
  std::string::size_type v20;
  std::string::size_type v21;
  char *v22;
  std::string::size_type v23;
  std::string::size_type v24;
  std::string *v25;
  std::string *v26;
  BOOL v27;
  std::string::__raw *v28;
  _DWORD *v29;
  uint64_t v30;
  int v31;
  siri::dialogengine::PatternSchemaBinary::Parameter *v32;
  uint64_t v33;
  const std::string *v34;
  std::string *v35;
  std::string::size_type v36;
  std::string::size_type v37;
  std::string *v38;
  std::string *v39;
  std::string::__raw *v40;
  _DWORD *v41;
  uint64_t v42;
  int v43;
  siri::dialogengine::PatternSchemaBinary::Parameter *v44;
  uint64_t v45;
  const std::string *v46;
  std::string *v47;
  std::string::size_type v48;
  std::string::size_type v49;
  std::string *v50;
  std::string *v51;
  std::string::size_type size;
  _QWORD *v53;
  _DWORD *v54;
  uint64_t v55;
  int v56;
  siri::dialogengine::PatternSchemaBinary::Group *v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  __n128 v61;
  __n128 v62;
  __n128 v63;
  uint64_t v64;
  uint64_t v65;
  std::string::size_type v66;
  const std::string *v67;
  uint64_t *v68;
  int *v69;
  uint64_t v70;
  int v71;
  std::string *AlignedAndAddCleanup;
  google::protobuf::internal::ArenaImpl *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList *v77;
  std::string::size_type v78;
  std::string::size_type *i;
  std::string::size_type v80;
  std::__shared_weak_count *v81;
  unint64_t *p_shared_owners;
  unint64_t v83;
  unint64_t *v84;
  unint64_t v85;
  unsigned int v86;
  char *v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  uint64_t v91;
  _BOOL8 v92;
  std::string *v93;
  __int128 v94;
  char v96;
  uint64_t v97;
  std::__shared_weak_count *v98;
  std::string v99;
  char v100[16];
  int v101;
  google::protobuf::internal::ArenaImpl *v102;
  int v103;
  int v104;
  _DWORD *v105;
  google::protobuf::internal::ArenaImpl *v106;
  int v107;
  int v108;
  _DWORD *v109;
  google::protobuf::internal::ArenaImpl *v110;
  int v111;
  int v112;
  _DWORD *v113;
  google::protobuf::internal::ArenaImpl *v114;
  int v115;
  int v116;
  _DWORD *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  std::string v123;
  std::string v124;
  std::string *v125;

  siri::dialogengine::PatternSchemaBinary::PatternSchema::PatternSchema((siri::dialogengine::PatternSchemaBinary::PatternSchema *)v100);
  v101 |= 1u;
  std::string::basic_string[abi:ne180100]<0>(&v124, "PATTERNSCHEMAPB");
  google::protobuf::internal::ArenaStringPtr::SetNoArena(&v118, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&v124);
  if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v124.__r_.__value_.__l.__data_);
  v6 = *a1;
  if (*((char *)*a1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v124, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
  }
  else
  {
    v7 = *(_OWORD *)v6;
    v124.__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
    *(_OWORD *)&v124.__r_.__value_.__l.__data_ = v7;
  }
  v101 |= 2u;
  google::protobuf::internal::ArenaStringPtr::SetNoArena(&v119, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&v124);
  if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v124.__r_.__value_.__l.__data_);
    if ((a3 & 1) != 0)
      goto LABEL_15;
  }
  else if ((a3 & 1) != 0)
  {
    goto LABEL_15;
  }
  v8 = (std::string *)*a1;
  if (*((char *)*a1 + 71) < 0)
    std::string::__init_copy_ctor_external(&v124, v8[2].__r_.__value_.__l.__data_, v8[2].__r_.__value_.__l.__size_);
  else
    v124 = v8[2];
  v101 |= 8u;
  google::protobuf::internal::ArenaStringPtr::SetNoArena(&v121, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&v124);
  if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v124.__r_.__value_.__l.__data_);
LABEL_15:
  v9 = (std::string *)*a1;
  if (*((char *)*a1 + 95) < 0)
    std::string::__init_copy_ctor_external(&v124, v9[3].__r_.__value_.__l.__data_, v9[3].__r_.__value_.__l.__size_);
  else
    v124 = v9[3];
  v101 |= 0x10u;
  google::protobuf::internal::ArenaStringPtr::SetNoArena(&v122, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&v124);
  if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v124.__r_.__value_.__l.__data_);
  v10 = (std::string *)*a1;
  if (*((char *)*a1 + 119) < 0)
    std::string::__init_copy_ctor_external(&v124, v10[4].__r_.__value_.__l.__data_, v10[4].__r_.__value_.__l.__size_);
  else
    v124 = v10[4];
  v101 |= 4u;
  google::protobuf::internal::ArenaStringPtr::SetNoArena(&v120, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&v124);
  if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v124.__r_.__value_.__l.__data_);
  v96 = a3;
  siri::dialogengine::PatternSchema::GetSettings(*a1, (uint64_t)&v123);
  v11 = (std::string::__raw *)v123.__r_.__value_.__r.__words[0];
  if ((std::string::size_type *)v123.__r_.__value_.__l.__data_ != &v123.__r_.__value_.__r.__words[1])
  {
    while (1)
    {
      v12 = v105;
      if (!v105)
        break;
      v13 = v103;
      v14 = *v105;
      if (v103 >= *v105)
      {
        if (v14 == v104)
        {
LABEL_31:
          google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)&v102, v14 + 1);
          v12 = v105;
          v14 = *v105;
        }
        *v12 = v14 + 1;
        v15 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::Setting>(v102);
        v16 = v103++;
        *(_QWORD *)&v105[2 * v16 + 2] = v15;
        goto LABEL_33;
      }
      ++v103;
      v15 = *(siri::dialogengine::PatternSchemaBinary::Setting **)&v105[2 * v13 + 2];
LABEL_33:
      v17 = (const std::string *)&v11[1].__words[1];
      v18 = (std::string *)*((_QWORD *)v15 + 3);
      *((_DWORD *)v15 + 4) |= 1u;
      if (v18 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)v15 + 3, (uint64_t)v17);
      else
        std::string::operator=(v18, v17);
      v19 = v11[2].__words[1];
      if (*(char *)(v19 + 151) < 0)
        std::string::__init_copy_ctor_external(&v124, *(const std::string::value_type **)(v19 + 128), *(_QWORD *)(v19 + 136));
      else
        v124 = *(std::string *)(v19 + 128);
      *((_DWORD *)v15 + 4) |= 0x10u;
      google::protobuf::internal::ArenaStringPtr::SetNoArena((uint64_t *)v15 + 7, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&v124);
      if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v124.__r_.__value_.__l.__data_);
      v20 = v11[2].__words[1];
      if (*(char *)(v20 + 55) < 0)
        std::string::__init_copy_ctor_external(&v124, *(const std::string::value_type **)(v20 + 32), *(_QWORD *)(v20 + 40));
      else
        v124 = *(std::string *)(v20 + 32);
      *((_DWORD *)v15 + 4) |= 2u;
      google::protobuf::internal::ArenaStringPtr::SetNoArena((uint64_t *)v15 + 4, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&v124);
      if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v124.__r_.__value_.__l.__data_);
      if ((a3 & 1) == 0)
      {
        v21 = v11[2].__words[1];
        if (*(char *)(v21 + 79) < 0)
          std::string::__init_copy_ctor_external(&v124, *(const std::string::value_type **)(v21 + 56), *(_QWORD *)(v21 + 64));
        else
          v124 = *(std::string *)(v21 + 56);
        *((_DWORD *)v15 + 4) |= 4u;
        google::protobuf::internal::ArenaStringPtr::SetNoArena((uint64_t *)v15 + 5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&v124);
        if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v124.__r_.__value_.__l.__data_);
      }
      if (*(_BYTE *)(v11[2].__words[1] + 233))
        v22 = "true";
      else
        v22 = "false";
      *((_DWORD *)v15 + 4) |= 8u;
      std::string::basic_string[abi:ne180100]<0>(&v124, v22);
      google::protobuf::internal::ArenaStringPtr::SetNoArena((uint64_t *)v15 + 6, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&v124);
      if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v124.__r_.__value_.__l.__data_);
      v23 = v11[2].__words[1];
      if (*(char *)(v23 + 359) < 0)
        std::string::__init_copy_ctor_external(&v124, *(const std::string::value_type **)(v23 + 336), *(_QWORD *)(v23 + 344));
      else
        v124 = *(std::string *)(v23 + 336);
      *((_DWORD *)v15 + 4) |= 0x40u;
      google::protobuf::internal::ArenaStringPtr::SetNoArena((uint64_t *)v15 + 9, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&v124);
      if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v124.__r_.__value_.__l.__data_);
      v24 = v11[2].__words[1];
      if (*(char *)(v24 + 231) < 0)
        std::string::__init_copy_ctor_external(&v124, *(const std::string::value_type **)(v24 + 208), *(_QWORD *)(v24 + 216));
      else
        v124 = *(std::string *)(v24 + 208);
      *((_DWORD *)v15 + 4) |= 0x20u;
      google::protobuf::internal::ArenaStringPtr::SetNoArena((uint64_t *)v15 + 8, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&v124);
      if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v124.__r_.__value_.__l.__data_);
      v25 = (std::string *)v11->__words[1];
      if (v25)
      {
        do
        {
          v26 = v25;
          v25 = (std::string *)v25->__r_.__value_.__r.__words[0];
        }
        while (v25);
      }
      else
      {
        do
        {
          v26 = (std::string *)v11->__words[2];
          v27 = v26->__r_.__value_.__r.__words[0] == (_QWORD)v11;
          v11 = (std::string::__raw *)v26;
        }
        while (!v27);
      }
      v11 = (std::string::__raw *)v26;
      if (v26 == (std::string *)&v123.__r_.__value_.__r.__words[1])
        goto LABEL_73;
    }
    v14 = v104;
    goto LABEL_31;
  }
LABEL_73:
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy((_QWORD *)v123.__r_.__value_.__l.__size_);
  std::map<std::string,std::shared_ptr<siri::dialogengine::Parameter>>::map[abi:ne180100]((uint64_t)&v124, (const void ***)*a1 + 18);
  v28 = (std::string::__raw *)v124.__r_.__value_.__r.__words[0];
  if ((std::string::size_type *)v124.__r_.__value_.__l.__data_ != &v124.__r_.__value_.__r.__words[1])
  {
    while (1)
    {
      v29 = v109;
      if (!v109)
        break;
      v30 = v107;
      v31 = *v109;
      if (v107 < *v109)
      {
        ++v107;
        v32 = *(siri::dialogengine::PatternSchemaBinary::Parameter **)&v109[2 * v30 + 2];
        goto LABEL_81;
      }
      if (v31 == v108)
        goto LABEL_79;
LABEL_80:
      *v29 = v31 + 1;
      v32 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::Parameter>(v106);
      v33 = v107++;
      *(_QWORD *)&v109[2 * v33 + 2] = v32;
LABEL_81:
      v34 = (const std::string *)&v28[1].__words[1];
      v35 = (std::string *)*((_QWORD *)v32 + 3);
      *((_DWORD *)v32 + 4) |= 1u;
      if (v35 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)v32 + 3, (uint64_t)v34);
      else
        std::string::operator=(v35, v34);
      v36 = v28[2].__words[1];
      if (*(char *)(v36 + 55) < 0)
        std::string::__init_copy_ctor_external(&v123, *(const std::string::value_type **)(v36 + 32), *(_QWORD *)(v36 + 40));
      else
        v123 = *(std::string *)(v36 + 32);
      *((_DWORD *)v32 + 4) |= 2u;
      google::protobuf::internal::ArenaStringPtr::SetNoArena((uint64_t *)v32 + 4, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&v123);
      if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v123.__r_.__value_.__l.__data_);
        if ((a3 & 1) == 0)
        {
LABEL_91:
          v37 = v28[2].__words[1];
          if (*(char *)(v37 + 79) < 0)
            std::string::__init_copy_ctor_external(&v123, *(const std::string::value_type **)(v37 + 56), *(_QWORD *)(v37 + 64));
          else
            v123 = *(std::string *)(v37 + 56);
          *((_DWORD *)v32 + 4) |= 4u;
          google::protobuf::internal::ArenaStringPtr::SetNoArena((uint64_t *)v32 + 5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&v123);
          if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v123.__r_.__value_.__l.__data_);
        }
      }
      else if ((a3 & 1) == 0)
      {
        goto LABEL_91;
      }
      v38 = (std::string *)v28->__words[1];
      if (v38)
      {
        do
        {
          v39 = v38;
          v38 = (std::string *)v38->__r_.__value_.__r.__words[0];
        }
        while (v38);
      }
      else
      {
        do
        {
          v39 = (std::string *)v28->__words[2];
          v27 = v39->__r_.__value_.__r.__words[0] == (_QWORD)v28;
          v28 = (std::string::__raw *)v39;
        }
        while (!v27);
      }
      v28 = (std::string::__raw *)v39;
      if (v39 == (std::string *)&v124.__r_.__value_.__r.__words[1])
        goto LABEL_102;
    }
    v31 = v108;
LABEL_79:
    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)&v106, v31 + 1);
    v29 = v109;
    v31 = *v109;
    goto LABEL_80;
  }
LABEL_102:
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy((_QWORD *)v124.__r_.__value_.__l.__size_);
  std::map<std::string,std::shared_ptr<siri::dialogengine::Parameter>>::map[abi:ne180100]((uint64_t)&v124, (const void ***)*a1 + 21);
  v40 = (std::string::__raw *)v124.__r_.__value_.__r.__words[0];
  if ((std::string::size_type *)v124.__r_.__value_.__l.__data_ != &v124.__r_.__value_.__r.__words[1])
  {
    while (1)
    {
      v41 = v113;
      if (!v113)
        break;
      v42 = v111;
      v43 = *v113;
      if (v111 < *v113)
      {
        ++v111;
        v44 = *(siri::dialogengine::PatternSchemaBinary::Parameter **)&v113[2 * v42 + 2];
        goto LABEL_110;
      }
      if (v43 == v112)
        goto LABEL_108;
LABEL_109:
      *v41 = v43 + 1;
      v44 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::Parameter>(v110);
      v45 = v111++;
      *(_QWORD *)&v113[2 * v45 + 2] = v44;
LABEL_110:
      v46 = (const std::string *)&v40[1].__words[1];
      v47 = (std::string *)*((_QWORD *)v44 + 3);
      *((_DWORD *)v44 + 4) |= 1u;
      if (v47 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)v44 + 3, (uint64_t)v46);
      else
        std::string::operator=(v47, v46);
      v48 = v40[2].__words[1];
      if (*(char *)(v48 + 55) < 0)
        std::string::__init_copy_ctor_external(&v123, *(const std::string::value_type **)(v48 + 32), *(_QWORD *)(v48 + 40));
      else
        v123 = *(std::string *)(v48 + 32);
      *((_DWORD *)v44 + 4) |= 2u;
      google::protobuf::internal::ArenaStringPtr::SetNoArena((uint64_t *)v44 + 4, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&v123);
      if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v123.__r_.__value_.__l.__data_);
        if ((a3 & 1) == 0)
        {
LABEL_120:
          v49 = v40[2].__words[1];
          if (*(char *)(v49 + 79) < 0)
            std::string::__init_copy_ctor_external(&v123, *(const std::string::value_type **)(v49 + 56), *(_QWORD *)(v49 + 64));
          else
            v123 = *(std::string *)(v49 + 56);
          *((_DWORD *)v44 + 4) |= 4u;
          google::protobuf::internal::ArenaStringPtr::SetNoArena((uint64_t *)v44 + 5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&v123);
          if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v123.__r_.__value_.__l.__data_);
        }
      }
      else if ((a3 & 1) == 0)
      {
        goto LABEL_120;
      }
      v50 = (std::string *)v40->__words[1];
      if (v50)
      {
        do
        {
          v51 = v50;
          v50 = (std::string *)v50->__r_.__value_.__r.__words[0];
        }
        while (v50);
      }
      else
      {
        do
        {
          v51 = (std::string *)v40->__words[2];
          v27 = v51->__r_.__value_.__r.__words[0] == (_QWORD)v40;
          v40 = (std::string::__raw *)v51;
        }
        while (!v27);
      }
      v40 = (std::string::__raw *)v51;
      if (v51 == (std::string *)&v124.__r_.__value_.__r.__words[1])
        goto LABEL_131;
    }
    v43 = v112;
LABEL_108:
    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)&v110, v43 + 1);
    v41 = v113;
    v43 = *v113;
    goto LABEL_109;
  }
LABEL_131:
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy((_QWORD *)v124.__r_.__value_.__l.__size_);
  siri::dialogengine::PatternSchema::GetGroups((char *)*a1, &v99);
  size = v99.__r_.__value_.__l.__size_;
  v53 = (_QWORD *)v99.__r_.__value_.__r.__words[0];
  if (v99.__r_.__value_.__r.__words[0] != v99.__r_.__value_.__l.__size_)
  {
    while (1)
    {
      v54 = v117;
      if (!v117)
        break;
      v55 = v115;
      v56 = *v117;
      if (v115 < *v117)
      {
        ++v115;
        v57 = *(siri::dialogengine::PatternSchemaBinary::Group **)&v117[2 * v55 + 2];
        goto LABEL_139;
      }
      if (v56 == v116)
        goto LABEL_137;
LABEL_138:
      *v54 = v56 + 1;
      v57 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::Group>(v114);
      v58 = v115++;
      *(_QWORD *)&v117[2 * v58 + 2] = v57;
LABEL_139:
      v59 = *v53;
      if (*(char *)(*v53 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v124, *(const std::string::value_type **)(v59 + 8), *(_QWORD *)(v59 + 16));
      }
      else
      {
        v60 = *(_OWORD *)(v59 + 8);
        v124.__r_.__value_.__r.__words[2] = *(_QWORD *)(v59 + 24);
        *(_OWORD *)&v124.__r_.__value_.__l.__data_ = v60;
      }
      *((_DWORD *)v57 + 4) |= 1u;
      v61 = google::protobuf::internal::ArenaStringPtr::SetNoArena((uint64_t *)v57 + 12, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&v124);
      if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v124.__r_.__value_.__l.__data_);
      if (!(*(unsigned int (**)(_QWORD, __n128))(*(_QWORD *)*v53 + 16))(*v53, v61))
      {
        if ((a3 & 1) == 0)
        {
          (*(void (**)(std::string *__return_ptr))(*(_QWORD *)*v53 + 32))(&v124);
          *((_DWORD *)v57 + 4) |= 2u;
          google::protobuf::internal::ArenaStringPtr::SetNoArena((uint64_t *)v57 + 13, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&v124);
          if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v124.__r_.__value_.__l.__data_);
        }
        (*(void (**)(std::string *__return_ptr))(*(_QWORD *)*v53 + 96))(&v124);
        *((_DWORD *)v57 + 4) |= 4u;
        v62 = google::protobuf::internal::ArenaStringPtr::SetNoArena((uint64_t *)v57 + 14, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&v124);
        if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v124.__r_.__value_.__l.__data_);
        (*(void (**)(std::string *__return_ptr, __n128))(*(_QWORD *)*v53 + 104))(&v124, v62);
        *((_DWORD *)v57 + 4) |= 8u;
        v63 = google::protobuf::internal::ArenaStringPtr::SetNoArena((uint64_t *)v57 + 15, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&v124);
        if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v124.__r_.__value_.__l.__data_);
        (*(void (**)(std::string *__return_ptr, __n128))(*(_QWORD *)*v53 + 40))(&v124, v63);
        v64 = siri::dialogengine::WritePatternUsagesBinary((uint64_t **)&v124);
        v123.__r_.__value_.__r.__words[0] = (std::string::size_type)&v124;
        std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v123);
        v65 = *((_QWORD *)v57 + 17);
        if (v65)
          (*(void (**)(uint64_t))(*(_QWORD *)v65 + 8))(v65);
        *((_DWORD *)v57 + 4) |= 0x20u;
        *((_QWORD *)v57 + 17) = v64;
        (*(void (**)(std::string *__return_ptr))(*(_QWORD *)*v53 + 48))(&v124);
        v66 = v124.__r_.__value_.__l.__size_;
        v67 = (const std::string *)v124.__r_.__value_.__r.__words[0];
        if (v124.__r_.__value_.__r.__words[0] == v124.__r_.__value_.__l.__size_)
        {
LABEL_171:
          v123.__r_.__value_.__r.__words[0] = (std::string::size_type)&v124;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v123);
          (*(void (**)(std::string *__return_ptr))(*(_QWORD *)*v53 + 56))(&v124);
          siri::dialogengine::WriteComponentsBinary((uint64_t)v57, (__int128 **)v124.__r_.__value_.__l.__data_, (__int128 **)v124.__r_.__value_.__l.__size_, 0);
          v123.__r_.__value_.__r.__words[0] = (std::string::size_type)&v124;
          std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v123);
          (*(void (**)(std::string *__return_ptr))(*(_QWORD *)*v53 + 72))(&v124);
          siri::dialogengine::WriteComponentsBinary((uint64_t)v57, (__int128 **)v124.__r_.__value_.__l.__data_, (__int128 **)v124.__r_.__value_.__l.__size_, 1);
          v123.__r_.__value_.__r.__words[0] = (std::string::size_type)&v124;
          std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v123);
          v76 = operator new();
          siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination::VisualComponentsCombination((siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination *)v76);
          (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*v53 + 88))(&v97);
          memset(&v124, 0, sizeof(v124));
          std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>*,std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>*>(&v124, *(_QWORD **)(v97 + 8), *(_QWORD **)(v97 + 16), (uint64_t)(*(_QWORD *)(v97 + 16) - *(_QWORD *)(v97 + 8)) >> 4);
          if (v124.__r_.__value_.__l.__size_ == v124.__r_.__value_.__r.__words[0])
          {
            v86 = *(_DWORD *)v97 - 1;
            v87 = "";
            if (v86 <= 2)
              v87 = off_1E792A148[v86];
            std::string::basic_string[abi:ne180100]<0>(&v123, v87);
            if (*(_DWORD *)(v76 + 32) != 2)
            {
              siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination::clear_components_combination_value(v76);
              *(_DWORD *)(v76 + 32) = 2;
              *(_QWORD *)(v76 + 24) = &google::protobuf::internal::fixed_address_empty_string;
            }
            google::protobuf::internal::ArenaStringPtr::SetNoArena((uint64_t *)(v76 + 24), (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&v123);
            if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v123.__r_.__value_.__l.__data_);
          }
          else
          {
            v77 = (siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList *)operator new();
            v78 = size;
            siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList::VisualComponentsCombinationList(v77);
            v80 = v124.__r_.__value_.__l.__size_;
            for (i = (std::string::size_type *)v124.__r_.__value_.__r.__words[0];
                  i != (std::string::size_type *)v80;
                  i += 2)
            {
              v81 = (std::__shared_weak_count *)i[1];
              v123.__r_.__value_.__r.__words[0] = *i;
              v123.__r_.__value_.__l.__size_ = (std::string::size_type)v81;
              if (v81)
              {
                p_shared_owners = (unint64_t *)&v81->__shared_owners_;
                do
                  v83 = __ldxr(p_shared_owners);
                while (__stxr(v83 + 1, p_shared_owners));
              }
              siri::dialogengine::WriteCustomCombinationBinary((uint64_t)v77, &v123);
              if (v81)
              {
                v84 = (unint64_t *)&v81->__shared_owners_;
                do
                  v85 = __ldaxr(v84);
                while (__stlxr(v85 - 1, v84));
                if (!v85)
                {
                  ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
                  std::__shared_weak_count::__release_weak(v81);
                }
              }
            }
            siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination::clear_components_combination_value(v76);
            size = v78;
            *(_DWORD *)(v76 + 32) = 1;
            *(_QWORD *)(v76 + 24) = v77;
          }
          v125 = &v124;
          std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v125);
          v88 = v98;
          if (v98)
          {
            v89 = (unint64_t *)&v98->__shared_owners_;
            do
              v90 = __ldaxr(v89);
            while (__stlxr(v90 - 1, v89));
            if (!v90)
            {
              ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
              std::__shared_weak_count::__release_weak(v88);
            }
          }
          v91 = *((_QWORD *)v57 + 18);
          if (v91)
            (*(void (**)(uint64_t))(*(_QWORD *)v91 + 8))(v91);
          *((_DWORD *)v57 + 4) |= 0x40u;
          *((_QWORD *)v57 + 18) = v76;
          a3 = v96;
          goto LABEL_198;
        }
        v68 = (uint64_t *)((char *)v57 + 24);
        while (2)
        {
          v69 = (int *)*((_QWORD *)v57 + 5);
          if (v69)
          {
            v70 = *((int *)v57 + 8);
            v71 = *v69;
            if ((int)v70 < *v69)
            {
              *((_DWORD *)v57 + 8) = v70 + 1;
              AlignedAndAddCleanup = *(std::string **)&v69[2 * v70 + 2];
              goto LABEL_170;
            }
            if (v71 == *((_DWORD *)v57 + 9))
            {
LABEL_163:
              google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)v57 + 6, v71 + 1);
              v69 = (int *)*((_QWORD *)v57 + 5);
              v71 = *v69;
            }
            *v69 = v71 + 1;
            v73 = (google::protobuf::internal::ArenaImpl *)*v68;
            if (*v68)
            {
              if (*((_QWORD *)v73 + 14))
              AlignedAndAddCleanup = (std::string *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(v73, 0x18uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<std::string>);
            }
            else
            {
              AlignedAndAddCleanup = (std::string *)operator new();
            }
            AlignedAndAddCleanup->__r_.__value_.__r.__words[0] = 0;
            AlignedAndAddCleanup->__r_.__value_.__l.__size_ = 0;
            AlignedAndAddCleanup->__r_.__value_.__r.__words[2] = 0;
            v74 = *((_QWORD *)v57 + 5);
            v75 = *((int *)v57 + 8);
            *((_DWORD *)v57 + 8) = v75 + 1;
            *(_QWORD *)(v74 + 8 * v75 + 8) = AlignedAndAddCleanup;
LABEL_170:
            std::string::operator=(AlignedAndAddCleanup, v67++);
            if (v67 == (const std::string *)v66)
              goto LABEL_171;
            continue;
          }
          break;
        }
        v71 = *((_DWORD *)v57 + 9);
        goto LABEL_163;
      }
      (*(void (**)(std::string *__return_ptr))(*(_QWORD *)*v53 + 24))(&v124);
      *((_DWORD *)v57 + 4) |= 0x10u;
      google::protobuf::internal::ArenaStringPtr::SetNoArena((uint64_t *)v57 + 16, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&v124);
      if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v124.__r_.__value_.__l.__data_);
LABEL_198:
      v53 += 2;
      if (v53 == (_QWORD *)size)
        goto LABEL_199;
    }
    v56 = v116;
LABEL_137:
    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)&v114, v56 + 1);
    v54 = v117;
    v56 = *v117;
    goto LABEL_138;
  }
LABEL_199:
  v124.__r_.__value_.__r.__words[0] = (std::string::size_type)&v99;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v124);
  memset(&v124, 0, sizeof(v124));
  if (google::protobuf::MessageLite::SerializeToString(v100, &v124))
  {
    v92 = siri::dialogengine::WriteGzippedFile(a2, (const void **)&v124.__r_.__value_.__l.__data_);
  }
  else
  {
    std::operator+<char>();
    v93 = std::string::append(&v99, " to protobuf...");
    v94 = *(_OWORD *)&v93->__r_.__value_.__l.__data_;
    v123.__r_.__value_.__r.__words[2] = v93->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v123.__r_.__value_.__l.__data_ = v94;
    v93->__r_.__value_.__l.__size_ = 0;
    v93->__r_.__value_.__r.__words[2] = 0;
    v93->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Log::LogWithLevel((uint64_t)&v123, 3u);
    if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v123.__r_.__value_.__l.__data_);
    if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v99.__r_.__value_.__l.__data_);
    v92 = 0;
  }
  if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v124.__r_.__value_.__l.__data_);
  siri::dialogengine::PatternSchemaBinary::PatternSchema::~PatternSchema((siri::dialogengine::PatternSchemaBinary::PatternSchema *)v100);
  return v92;
}

void sub_1BFBE2924(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  siri::dialogengine::PatternSchemaBinary::PatternSchema::~PatternSchema((siri::dialogengine::PatternSchemaBinary::PatternSchema *)&a20);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::WritePatternUsagesBinary(uint64_t **a1)
{
  uint64_t v2;
  __int128 v3;
  _BOOL4 v4;
  std::string::size_type size;
  uint64_t v6;
  unsigned int v7;
  char *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  __int128 v13;
  std::string::size_type v14;
  uint64_t v15;
  __int128 v16;
  unsigned int v17;
  char *v18;
  std::string *v19;
  std::string *v20;
  std::string __p;
  std::string __str;

  if ((char *)a1[1] - (char *)*a1 == 16)
  {
    v2 = **a1;
    if (*(char *)(v2 + 31) < 0)
    {
      std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)(v2 + 8), *(_QWORD *)(v2 + 16));
    }
    else
    {
      v3 = *(_OWORD *)(v2 + 8);
      __str.__r_.__value_.__r.__words[2] = *(_QWORD *)(v2 + 24);
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v3;
    }
    size = __str.__r_.__value_.__l.__size_;
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    v4 = size == 0;
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
  }
  else
  {
    v4 = 0;
  }
  v6 = operator new();
  siri::dialogengine::PatternSchemaBinary::Usage::Usage((siri::dialogengine::PatternSchemaBinary::Usage *)v6);
  if (v4)
  {
    if (a1[1] == *a1)
      std::vector<std::string>::__throw_out_of_range[abi:ne180100]();
    v7 = *(_DWORD *)**a1 - 1;
    if (v7 > 3)
      v8 = "";
    else
      v8 = off_1E79309B0[v7];
    std::string::basic_string[abi:ne180100]<0>(&__str, v8);
    if (*(_DWORD *)(v6 + 32) == 2)
    {
      v20 = *(std::string **)(v6 + 24);
      if (v20 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      {
        std::string::operator=(v20, &__str);
        goto LABEL_41;
      }
    }
    else
    {
      siri::dialogengine::PatternSchemaBinary::Usage::clear_usage_value(v6);
      *(_DWORD *)(v6 + 32) = 2;
      *(_QWORD *)(v6 + 24) = &google::protobuf::internal::fixed_address_empty_string;
    }
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)(v6 + 24), (uint64_t)&__str);
LABEL_41:
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    return v6;
  }
  v9 = (uint64_t *)operator new();
  siri::dialogengine::PatternSchemaBinary::UsageMap::UsageMap((siri::dialogengine::PatternSchemaBinary::UsageMap *)v9);
  v10 = *a1;
  v11 = a1[1];
  if (*a1 != v11)
  {
    do
    {
      v12 = *v10;
      if (*(char *)(*v10 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v12 + 8), *(_QWORD *)(v12 + 16));
      }
      else
      {
        v13 = *(_OWORD *)(v12 + 8);
        __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(v12 + 24);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v13;
      }
      v14 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v14 = __p.__r_.__value_.__l.__size_;
      if (v14)
      {
        v15 = *v10;
        if (*(char *)(*v10 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)(v15 + 8), *(_QWORD *)(v15 + 16));
        }
        else
        {
          v16 = *(_OWORD *)(v15 + 8);
          __str.__r_.__value_.__r.__words[2] = *(_QWORD *)(v15 + 24);
          *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v16;
        }
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(&__str, "else");
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v17 = *(_DWORD *)*v10 - 1;
      v18 = "";
      if (v17 <= 3)
        v18 = off_1E79309B0[v17];
      std::string::basic_string[abi:ne180100]<0>(&__p, v18);
      v19 = google::protobuf::Map<std::string,std::string>::operator[](v9 + 3, (uint64_t)&__p);
      std::string::operator=(v19, &__str);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      v10 += 2;
    }
    while (v10 != v11);
  }
  siri::dialogengine::PatternSchemaBinary::Usage::clear_usage_value(v6);
  *(_DWORD *)(v6 + 32) = 1;
  *(_QWORD *)(v6 + 24) = v9;
  return v6;
}

void sub_1BFBE2E64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  MEMORY[0x1C3B8D890](v21, 0x10A1C401A3DEA33);
  _Unwind_Resume(a1);
}

void siri::dialogengine::WriteComponentsBinary(uint64_t a1, __int128 **a2, __int128 **a3, int a4)
{
  __int128 **v4;
  uint64_t j;
  int *v6;
  uint64_t v7;
  int v8;
  int v9;
  siri::dialogengine::PatternSchemaBinary::PatternComponent *v10;
  uint64_t v11;
  uint64_t v12;
  __int128 *v13;
  __int128 v14;
  std::vector<std::string>::pointer end;
  __int128 **v16;
  __int128 v17;
  __int128 **v18;
  __int128 *size;
  std::string *v20;
  __int128 *v21;
  __int128 **v22;
  std::string::size_type v23;
  const std::string *v24;
  uint64_t *v25;
  int *v26;
  uint64_t v27;
  int v28;
  std::string *AlignedAndAddCleanup;
  google::protobuf::internal::ArenaImpl *v30;
  uint64_t v31;
  uint64_t v32;
  __int128 *v33;
  std::string::size_type v34;
  __int128 *v35;
  __int128 *v36;
  uint64_t v37;
  uint64_t v38;
  __int128 *v39;
  __int128 **v40;
  uint64_t v41;
  __int128 *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int128 *v47;
  std::string::size_type v48;
  _QWORD *v49;
  int *v50;
  uint64_t v51;
  int v52;
  siri::dialogengine::PatternSchemaBinary::Override *v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD **v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD **v59;
  std::string::size_type v60;
  std::string *i;
  __int128 **v62;
  std::string::size_type v63;
  std::string *v64;
  uint64_t v65;
  __int128 *v66;
  __int128 **v67;
  uint64_t v68;
  __int128 *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  __int128 *v74;
  std::string::size_type v75;
  _QWORD *v76;
  int *v77;
  uint64_t v78;
  int v79;
  siri::dialogengine::PatternSchemaBinary::Override *v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD **v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD **v86;
  std::string::size_type v87;
  std::string *k;
  __int128 **v89;
  std::string::size_type v90;
  std::string *v91;
  uint64_t v92;
  __int128 *v93;
  uint64_t v94;
  uint64_t v95;
  __int128 *v96;
  uint64_t v97;
  uint64_t v98;
  __int128 *v99;
  void **v100;
  char *v101;
  void *v102;
  BOOL v103;
  BOOL v104;
  __int128 *v105;
  uint64_t v106;
  uint64_t v107;
  __int128 *v108;
  uint64_t v109;
  uint64_t v110;
  __int128 *v111;
  void **v112;
  char *v113;
  void *v114;
  BOOL v115;
  BOOL v116;
  unsigned int *v117;
  unsigned int *v119;
  void **p_p;
  uint64_t v123;
  uint64_t v124;
  void *__p;
  char *v126;
  uint64_t v127;
  std::string v128;
  std::string __str;
  std::vector<std::string> v130;
  std::string v131;
  void ***p_p_p;
  std::string v133;
  __int128 v134;

  *(_QWORD *)&v134 = *MEMORY[0x1E0C80C00];
  memset(&v130, 0, sizeof(v130));
  if (a2 != a3)
  {
    v4 = a2;
    j = a1;
    v119 = (unsigned int *)(a1 + 48);
    v117 = (unsigned int *)(a1 + 72);
    do
    {
      if (!a4)
      {
        v6 = *(int **)(j + 88);
        if (v6)
        {
          v7 = *(int *)(j + 80);
          v9 = *v6;
          if ((int)v7 < *v6)
          {
            *(_DWORD *)(j + 80) = v7 + 1;
            goto LABEL_10;
          }
          if (v9 == *(_DWORD *)(j + 84))
          {
LABEL_17:
            google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v117, v9 + 1);
            v6 = *(int **)(j + 88);
            v9 = *v6;
          }
          *v6 = v9 + 1;
          v10 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::PatternComponent>(*(google::protobuf::internal::ArenaImpl **)v117);
          v11 = *(_QWORD *)(j + 88);
          v12 = *(int *)(j + 80);
          *(_DWORD *)(j + 80) = v12 + 1;
          goto LABEL_19;
        }
        v9 = *(_DWORD *)(j + 84);
        goto LABEL_17;
      }
      v6 = *(int **)(j + 64);
      if (v6)
      {
        v7 = *(int *)(j + 56);
        v8 = *v6;
        if ((int)v7 < *v6)
        {
          *(_DWORD *)(j + 56) = v7 + 1;
LABEL_10:
          v10 = *(siri::dialogengine::PatternSchemaBinary::PatternComponent **)&v6[2 * v7 + 2];
          goto LABEL_20;
        }
        if (v8 != *(_DWORD *)(j + 60))
          goto LABEL_14;
      }
      else
      {
        v8 = *(_DWORD *)(j + 60);
      }
      google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v119, v8 + 1);
      v6 = *(int **)(j + 64);
      v8 = *v6;
LABEL_14:
      *v6 = v8 + 1;
      v10 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::PatternComponent>(*(google::protobuf::internal::ArenaImpl **)v119);
      v11 = *(_QWORD *)(j + 64);
      v12 = *(int *)(j + 56);
      *(_DWORD *)(j + 56) = v12 + 1;
LABEL_19:
      *(_QWORD *)(v11 + 8 * v12 + 8) = v10;
LABEL_20:
      v13 = *v4;
      if (*((char *)*v4 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)v13, *((_QWORD *)v13 + 1));
      }
      else
      {
        v14 = *v13;
        __str.__r_.__value_.__r.__words[2] = *((_QWORD *)v13 + 2);
        *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v14;
      }
      end = v130.__end_;
      if ((std::vector<std::string>::pointer)std::__find_impl[abi:ne180100]<std::string *,std::string *,std::string,std::__identity>((uint64_t)v130.__begin_, (uint64_t)v130.__end_, (unsigned __int8 **)&__str) != end)goto LABEL_131;
      v16 = (__int128 **)*v4;
      memset(&v131, 0, sizeof(v131));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v131, v16[34], v16[35], 0xAAAAAAAAAAAAAAABLL * (((char *)v16[35] - (char *)v16[34]) >> 3));
      v17 = *(_OWORD *)&v131.__r_.__value_.__l.__data_;
      v128.__r_.__value_.__r.__words[0] = (std::string::size_type)&v131;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v128);
      if (*((_QWORD *)&v17 + 1) != (_QWORD)v17)
      {
        v18 = (__int128 **)*v4;
        memset(&v131, 0, sizeof(v131));
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v131, v18[34], v18[35], 0xAAAAAAAAAAAAAAABLL * (((char *)v18[35] - (char *)v18[34]) >> 3));
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v133, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
        else
          v133 = __str;
        memset(&v128, 0, sizeof(v128));
        __p = &v128;
        LOBYTE(v126) = 0;
        v128.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
        v128.__r_.__value_.__l.__size_ = v128.__r_.__value_.__r.__words[0];
        v128.__r_.__value_.__r.__words[2] = v128.__r_.__value_.__r.__words[0] + 24;
        size = (__int128 *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v128.__r_.__value_.__r.__words[2], (__int128 *)&v133, &v134, (std::string *)v128.__r_.__value_.__l.__data_);
        v128.__r_.__value_.__l.__size_ = (std::string::size_type)size;
        if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v133.__r_.__value_.__l.__data_);
          size = (__int128 *)v128.__r_.__value_.__l.__size_;
        }
        std::vector<std::string>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::string*>,std::__wrap_iter<std::string*>>((std::vector<std::string> *)&v131, (std::string *)v131.__r_.__value_.__l.__data_, (std::string *)v128.__r_.__value_.__l.__data_, size, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)size - v128.__r_.__value_.__r.__words[0]) >> 3));
        std::string::basic_string[abi:ne180100]<0>(&__p, ", ");
        siri::dialogengine::StringJoinInternal<std::vector<std::string>>((uint64_t)&v133, (uint64_t)v131.__r_.__value_.__l.__data_, v131.__r_.__value_.__l.__size_, (uint64_t)&__p);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        __str = v133;
        *((_BYTE *)&v133.__r_.__value_.__s + 23) = 0;
        v133.__r_.__value_.__s.__data_[0] = 0;
        if (SHIBYTE(v127) < 0)
          operator delete(__p);
        std::vector<std::string>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::string*>,std::__wrap_iter<std::string*>>(&v130, v130.__begin_, (std::string *)v131.__r_.__value_.__l.__data_, (__int128 *)v131.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v131.__r_.__value_.__l.__size_ - v131.__r_.__value_.__r.__words[0]) >> 3));
        v133.__r_.__value_.__r.__words[0] = (std::string::size_type)&v128;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v133);
        v128.__r_.__value_.__r.__words[0] = (std::string::size_type)&v131;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v128);
      }
      v20 = (std::string *)*((_QWORD *)v10 + 6);
      *((_DWORD *)v10 + 4) |= 1u;
      if (v20 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)v10 + 6, (uint64_t)&__str);
      else
        std::string::operator=(v20, &__str);
      v21 = *v4;
      if (*((char *)*v4 + 151) < 0)
        std::string::__init_copy_ctor_external(&v131, *((const std::string::value_type **)v21 + 16), *((_QWORD *)v21 + 17));
      else
        v131 = *(std::string *)(v21 + 8);
      *((_DWORD *)v10 + 4) |= 8u;
      google::protobuf::internal::ArenaStringPtr::SetNoArena((uint64_t *)v10 + 9, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&v131);
      if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v131.__r_.__value_.__l.__data_);
      v22 = (__int128 **)*v4;
      memset(&v131, 0, sizeof(v131));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v131, v22[19], v22[20], 0xAAAAAAAAAAAAAAABLL * (((char *)v22[20] - (char *)v22[19]) >> 3));
      v23 = v131.__r_.__value_.__l.__size_;
      v24 = (const std::string *)v131.__r_.__value_.__r.__words[0];
      if (v131.__r_.__value_.__r.__words[0] != v131.__r_.__value_.__l.__size_)
      {
        v25 = (uint64_t *)((char *)v10 + 24);
        while (1)
        {
          v26 = (int *)*((_QWORD *)v10 + 5);
          if (!v26)
            break;
          v27 = *((int *)v10 + 8);
          v28 = *v26;
          if ((int)v27 >= *v26)
          {
            if (v28 == *((_DWORD *)v10 + 9))
            {
LABEL_50:
              google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)v10 + 6, v28 + 1);
              v26 = (int *)*((_QWORD *)v10 + 5);
              v28 = *v26;
            }
            *v26 = v28 + 1;
            v30 = (google::protobuf::internal::ArenaImpl *)*v25;
            if (*v25)
            {
              if (*((_QWORD *)v30 + 14))
              AlignedAndAddCleanup = (std::string *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(v30, 0x18uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<std::string>);
            }
            else
            {
              AlignedAndAddCleanup = (std::string *)operator new();
            }
            AlignedAndAddCleanup->__r_.__value_.__r.__words[0] = 0;
            AlignedAndAddCleanup->__r_.__value_.__l.__size_ = 0;
            AlignedAndAddCleanup->__r_.__value_.__r.__words[2] = 0;
            v31 = *((_QWORD *)v10 + 5);
            v32 = *((int *)v10 + 8);
            *((_DWORD *)v10 + 8) = v32 + 1;
            *(_QWORD *)(v31 + 8 * v32 + 8) = AlignedAndAddCleanup;
            goto LABEL_57;
          }
          *((_DWORD *)v10 + 8) = v27 + 1;
          AlignedAndAddCleanup = *(std::string **)&v26[2 * v27 + 2];
LABEL_57:
          std::string::operator=(AlignedAndAddCleanup, v24++);
          if (v24 == (const std::string *)v23)
            goto LABEL_58;
        }
        v28 = *((_DWORD *)v10 + 9);
        goto LABEL_50;
      }
LABEL_58:
      v128.__r_.__value_.__r.__words[0] = (std::string::size_type)&v131;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v128);
      v33 = *v4;
      if (*((_BYTE *)*v4 + 96))
      {
        *((_DWORD *)v10 + 4) |= 2u;
        std::string::basic_string[abi:ne180100]<0>(&v131, "true");
        google::protobuf::internal::ArenaStringPtr::SetNoArena((uint64_t *)v10 + 7, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&v131);
        if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v131.__r_.__value_.__l.__data_);
        v33 = *v4;
      }
      if (*((char *)v33 + 127) < 0)
        std::string::__init_copy_ctor_external(&v131, *((const std::string::value_type **)v33 + 13), *((_QWORD *)v33 + 14));
      else
        v131 = *(std::string *)((char *)v33 + 104);
      if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0)
      {
        v34 = v131.__r_.__value_.__l.__size_;
        operator delete(v131.__r_.__value_.__l.__data_);
        if (!v34)
          goto LABEL_74;
      }
      else if (!*((_BYTE *)&v131.__r_.__value_.__s + 23))
      {
        goto LABEL_74;
      }
      v35 = *v4;
      if (*((char *)*v4 + 127) < 0)
        std::string::__init_copy_ctor_external(&v131, *((const std::string::value_type **)v35 + 13), *((_QWORD *)v35 + 14));
      else
        v131 = *(std::string *)((char *)v35 + 104);
      *((_DWORD *)v10 + 4) |= 4u;
      google::protobuf::internal::ArenaStringPtr::SetNoArena((uint64_t *)v10 + 8, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&v131);
      if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v131.__r_.__value_.__l.__data_);
LABEL_74:
      v36 = *v4;
      memset(&v131, 0, sizeof(v131));
      std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*,std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*>((char *)&v131, *((_QWORD **)v36 + 3), *((_QWORD **)v36 + 4), (uint64_t)(*((_QWORD *)v36 + 4) - *((_QWORD *)v36 + 3)) >> 4);
      v37 = siri::dialogengine::WritePatternUsagesBinary((uint64_t **)&v131);
      v128.__r_.__value_.__r.__words[0] = (std::string::size_type)&v131;
      std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v128);
      v38 = *((_QWORD *)v10 + 12);
      if (v38)
        (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
      *((_DWORD *)v10 + 4) |= 0x40u;
      *((_QWORD *)v10 + 12) = v37;
      v39 = *v4;
      memset(&v131, 0, sizeof(v131));
      std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaOverride>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::PatternSchemaOverride>*,std::shared_ptr<siri::dialogengine::PatternSchemaOverride>*>((char *)&v131, *((_QWORD **)v39 + 22), *((_QWORD **)v39 + 23), (uint64_t)(*((_QWORD *)v39 + 23) - *((_QWORD *)v39 + 22)) >> 4);
      if (v131.__r_.__value_.__r.__words[0] != v131.__r_.__value_.__l.__size_)
        goto LABEL_79;
      v40 = (__int128 **)*v4;
      memset(&v128, 0, sizeof(v128));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v128, v40[28], v40[29], 0xAAAAAAAAAAAAAAABLL * (((char *)v40[29] - (char *)v40[28]) >> 3));
      if (v128.__r_.__value_.__r.__words[0] != v128.__r_.__value_.__l.__size_)
      {
        v133.__r_.__value_.__r.__words[0] = (std::string::size_type)&v128;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v133);
LABEL_79:
        v128.__r_.__value_.__r.__words[0] = (std::string::size_type)&v131;
        std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v128);
LABEL_80:
        v41 = operator new();
        siri::dialogengine::PatternSchemaBinary::ModeConfiguration::ModeConfiguration((siri::dialogengine::PatternSchemaBinary::ModeConfiguration *)v41);
        v42 = *v4;
        v43 = (uint64_t)(*v4 + 3);
        v44 = 48;
        if (*(_QWORD *)v43 == *((_QWORD *)*v4 + 7))
        {
          v44 = 24;
          v43 = (uint64_t)*v4 + 24;
        }
        memset(&v131, 0, sizeof(v131));
        std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*,std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*>((char *)&v131, *(_QWORD **)((char *)v42 + v44), *(_QWORD **)(v43 + 8), (uint64_t)(*(_QWORD *)(v43 + 8) - *(_QWORD *)((char *)v42 + v44)) >> 4);
        v45 = siri::dialogengine::WritePatternUsagesBinary((uint64_t **)&v131);
        v128.__r_.__value_.__r.__words[0] = (std::string::size_type)&v131;
        std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v128);
        v46 = *(_QWORD *)(v41 + 72);
        if (v46)
          (*(void (**)(uint64_t))(*(_QWORD *)v46 + 8))(v46);
        *(_DWORD *)(v41 + 16) |= 1u;
        *(_QWORD *)(v41 + 72) = v45;
        v47 = *v4;
        memset(&v131, 0, sizeof(v131));
        std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaOverride>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::PatternSchemaOverride>*,std::shared_ptr<siri::dialogengine::PatternSchemaOverride>*>((char *)&v131, *((_QWORD **)v47 + 22), *((_QWORD **)v47 + 23), (uint64_t)(*((_QWORD *)v47 + 23) - *((_QWORD *)v47 + 22)) >> 4);
        v48 = v131.__r_.__value_.__l.__size_;
        v49 = (_QWORD *)v131.__r_.__value_.__r.__words[0];
        if (v131.__r_.__value_.__r.__words[0] != v131.__r_.__value_.__l.__size_)
        {
          while (1)
          {
            v50 = *(int **)(v41 + 40);
            if (!v50)
              break;
            v51 = *(int *)(v41 + 32);
            v52 = *v50;
            if ((int)v51 >= *v50)
            {
              if (v52 == *(_DWORD *)(v41 + 36))
              {
LABEL_90:
                google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(v41 + 24), v52 + 1);
                v50 = *(int **)(v41 + 40);
                v52 = *v50;
              }
              *v50 = v52 + 1;
              v53 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::Override>(*(google::protobuf::internal::ArenaImpl **)(v41 + 24));
              v54 = *(_QWORD *)(v41 + 40);
              v55 = *(int *)(v41 + 32);
              *(_DWORD *)(v41 + 32) = v55 + 1;
              *(_QWORD *)(v54 + 8 * v55 + 8) = v53;
              goto LABEL_92;
            }
            *(_DWORD *)(v41 + 32) = v51 + 1;
            v53 = *(siri::dialogengine::PatternSchemaBinary::Override **)&v50[2 * v51 + 2];
LABEL_92:
            v56 = (_QWORD **)*v49;
            memset(&v128, 0, sizeof(v128));
            std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*,std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*>((char *)&v128, *v56, v56[1], ((char *)v56[1] - (char *)*v56) >> 4);
            v57 = siri::dialogengine::WritePatternUsagesBinary((uint64_t **)&v128);
            v133.__r_.__value_.__r.__words[0] = (std::string::size_type)&v128;
            std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v133);
            v58 = *((_QWORD *)v53 + 6);
            if (v58)
              (*(void (**)(uint64_t))(*(_QWORD *)v58 + 8))(v58);
            *((_DWORD *)v53 + 4) |= 1u;
            *((_QWORD *)v53 + 6) = v57;
            v59 = (_QWORD **)*v49;
            memset(&v128, 0, sizeof(v128));
            std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v128, (__int128 *)v59[3], (__int128 *)v59[4], 0xAAAAAAAAAAAAAAABLL * (v59[4] - v59[3]));
            v60 = v128.__r_.__value_.__l.__size_;
            for (i = (std::string *)v128.__r_.__value_.__r.__words[0]; i != (std::string *)v60; ++i)
              google::protobuf::FileDescriptorProto::add_dependency((uint64_t)v53, i);
            v133.__r_.__value_.__r.__words[0] = (std::string::size_type)&v128;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v133);
            v49 += 2;
            if (v49 == (_QWORD *)v48)
              goto LABEL_98;
          }
          v52 = *(_DWORD *)(v41 + 36);
          goto LABEL_90;
        }
LABEL_98:
        v128.__r_.__value_.__r.__words[0] = (std::string::size_type)&v131;
        std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v128);
        v62 = (__int128 **)*v4;
        memset(&v131, 0, sizeof(v131));
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v131, v62[28], v62[29], 0xAAAAAAAAAAAAAAABLL * (((char *)v62[29] - (char *)v62[28]) >> 3));
        v63 = v131.__r_.__value_.__l.__size_;
        v64 = (std::string *)v131.__r_.__value_.__r.__words[0];
        for (j = a1; v64 != (std::string *)v63; ++v64)
          siri::dialogengine::PatternSchemaBinary::ModeConfiguration::add_examples(v41, v64);
        v128.__r_.__value_.__r.__words[0] = (std::string::size_type)&v131;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v128);
        v65 = *((_QWORD *)v10 + 10);
        if (v65)
          (*(void (**)(uint64_t))(*(_QWORD *)v65 + 8))(v65);
        *((_DWORD *)v10 + 4) |= 0x10u;
        *((_QWORD *)v10 + 10) = v41;
        goto LABEL_103;
      }
      v93 = *v4;
      v94 = (uint64_t)(*v4 + 3);
      v95 = 48;
      if (*(_QWORD *)v94 == *((_QWORD *)*v4 + 7))
      {
        v95 = 24;
        v94 = (uint64_t)*v4 + 24;
      }
      memset(&v133, 0, sizeof(v133));
      std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*,std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*>((char *)&v133, *(_QWORD **)((char *)v93 + v95), *(_QWORD **)(v94 + 8), (uint64_t)(*(_QWORD *)(v94 + 8) - *(_QWORD *)((char *)v93 + v95)) >> 4);
      if (v133.__r_.__value_.__r.__words[0] == v133.__r_.__value_.__l.__size_)
      {
        __p = &v133;
        std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
        v133.__r_.__value_.__r.__words[0] = (std::string::size_type)&v128;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v133);
        v128.__r_.__value_.__r.__words[0] = (std::string::size_type)&v131;
        std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v128);
        goto LABEL_103;
      }
      v96 = *v4;
      v97 = (uint64_t)(*v4 + 3);
      v98 = 48;
      if (*(_QWORD *)v97 == *((_QWORD *)*v4 + 7))
      {
        v98 = 24;
        v97 = (uint64_t)*v4 + 24;
      }
      v126 = 0;
      v127 = 0;
      __p = 0;
      std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*,std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*>((char *)&__p, *(_QWORD **)((char *)v96 + v98), *(_QWORD **)(v97 + 8), (uint64_t)(*(_QWORD *)(v97 + 8) - *(_QWORD *)((char *)v96 + v98)) >> 4);
      v99 = *v4;
      v123 = 0;
      v124 = 0;
      p_p = 0;
      std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*,std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*>((char *)&p_p, *((_QWORD **)v99 + 3), *((_QWORD **)v99 + 4), (uint64_t)(*((_QWORD *)v99 + 4) - *((_QWORD *)v99 + 3)) >> 4);
      v100 = p_p;
      if (v126 - (_BYTE *)__p == v123 - (_QWORD)p_p)
      {
        if (__p == v126)
        {
          v103 = 1;
        }
        else
        {
          v101 = (char *)__p + 16;
          do
          {
            v102 = *v100;
            v100 += 2;
            v103 = *((_QWORD *)v101 - 2) == (_QWORD)v102;
            v104 = *((void **)v101 - 2) != v102 || v101 == v126;
            v101 += 16;
          }
          while (!v104);
        }
      }
      else
      {
        v103 = 0;
      }
      p_p_p = &p_p;
      std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p_p);
      p_p = &__p;
      std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100](&p_p);
      __p = &v133;
      std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      v133.__r_.__value_.__r.__words[0] = (std::string::size_type)&v128;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v133);
      v128.__r_.__value_.__r.__words[0] = (std::string::size_type)&v131;
      std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v128);
      if (!v103)
        goto LABEL_80;
LABEL_103:
      v66 = *v4;
      memset(&v131, 0, sizeof(v131));
      std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaOverride>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::PatternSchemaOverride>*,std::shared_ptr<siri::dialogengine::PatternSchemaOverride>*>((char *)&v131, *((_QWORD **)v66 + 25), *((_QWORD **)v66 + 26), (uint64_t)(*((_QWORD *)v66 + 26) - *((_QWORD *)v66 + 25)) >> 4);
      if (v131.__r_.__value_.__r.__words[0] == v131.__r_.__value_.__l.__size_)
      {
        v67 = (__int128 **)*v4;
        memset(&v128, 0, sizeof(v128));
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v128, v67[31], v67[32], 0xAAAAAAAAAAAAAAABLL * (((char *)v67[32] - (char *)v67[31]) >> 3));
        if (v128.__r_.__value_.__r.__words[0] == v128.__r_.__value_.__l.__size_)
        {
          v105 = *v4;
          v106 = (uint64_t)*v4 + 72;
          v107 = 24;
          if (*(_QWORD *)v106 == *((_QWORD *)*v4 + 10))
            v106 = (uint64_t)*v4 + 24;
          else
            v107 = 72;
          memset(&v133, 0, sizeof(v133));
          std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*,std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*>((char *)&v133, *(_QWORD **)((char *)v105 + v107), *(_QWORD **)(v106 + 8), (uint64_t)(*(_QWORD *)(v106 + 8) - *(_QWORD *)((char *)v105 + v107)) >> 4);
          if (v133.__r_.__value_.__r.__words[0] == v133.__r_.__value_.__l.__size_)
          {
            __p = &v133;
            std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
            v133.__r_.__value_.__r.__words[0] = (std::string::size_type)&v128;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v133);
            v128.__r_.__value_.__r.__words[0] = (std::string::size_type)&v131;
            std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v128);
            goto LABEL_131;
          }
          v108 = *v4;
          v109 = (uint64_t)*v4 + 72;
          v110 = 24;
          if (*(_QWORD *)v109 == *((_QWORD *)*v4 + 10))
            v109 = (uint64_t)*v4 + 24;
          else
            v110 = 72;
          v126 = 0;
          v127 = 0;
          __p = 0;
          std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*,std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*>((char *)&__p, *(_QWORD **)((char *)v108 + v110), *(_QWORD **)(v109 + 8), (uint64_t)(*(_QWORD *)(v109 + 8) - *(_QWORD *)((char *)v108 + v110)) >> 4);
          v111 = *v4;
          v123 = 0;
          v124 = 0;
          p_p = 0;
          std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*,std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*>((char *)&p_p, *((_QWORD **)v111 + 3), *((_QWORD **)v111 + 4), (uint64_t)(*((_QWORD *)v111 + 4) - *((_QWORD *)v111 + 3)) >> 4);
          v112 = p_p;
          if (v126 - (_BYTE *)__p == v123 - (_QWORD)p_p)
          {
            if (__p == v126)
            {
              v115 = 1;
            }
            else
            {
              v113 = (char *)__p + 16;
              do
              {
                v114 = *v112;
                v112 += 2;
                v115 = *((_QWORD *)v113 - 2) == (_QWORD)v114;
                v116 = *((void **)v113 - 2) != v114 || v113 == v126;
                v113 += 16;
              }
              while (!v116);
            }
          }
          else
          {
            v115 = 0;
          }
          p_p_p = &p_p;
          std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p_p);
          p_p = &__p;
          std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100](&p_p);
          __p = &v133;
          std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
          v133.__r_.__value_.__r.__words[0] = (std::string::size_type)&v128;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v133);
          v128.__r_.__value_.__r.__words[0] = (std::string::size_type)&v131;
          std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v128);
          if (v115)
            goto LABEL_131;
          goto LABEL_107;
        }
        v133.__r_.__value_.__r.__words[0] = (std::string::size_type)&v128;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v133);
      }
      v128.__r_.__value_.__r.__words[0] = (std::string::size_type)&v131;
      std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v128);
LABEL_107:
      v68 = operator new();
      siri::dialogengine::PatternSchemaBinary::ModeConfiguration::ModeConfiguration((siri::dialogengine::PatternSchemaBinary::ModeConfiguration *)v68);
      v69 = *v4;
      v70 = (uint64_t)*v4 + 72;
      v71 = 24;
      if (*(_QWORD *)v70 == *((_QWORD *)*v4 + 10))
        v70 = (uint64_t)*v4 + 24;
      else
        v71 = 72;
      memset(&v131, 0, sizeof(v131));
      std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*,std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*>((char *)&v131, *(_QWORD **)((char *)v69 + v71), *(_QWORD **)(v70 + 8), (uint64_t)(*(_QWORD *)(v70 + 8) - *(_QWORD *)((char *)v69 + v71)) >> 4);
      v72 = siri::dialogengine::WritePatternUsagesBinary((uint64_t **)&v131);
      v128.__r_.__value_.__r.__words[0] = (std::string::size_type)&v131;
      std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v128);
      v73 = *(_QWORD *)(v68 + 72);
      if (v73)
        (*(void (**)(uint64_t))(*(_QWORD *)v73 + 8))(v73);
      *(_DWORD *)(v68 + 16) |= 1u;
      *(_QWORD *)(v68 + 72) = v72;
      v74 = *v4;
      memset(&v131, 0, sizeof(v131));
      std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaOverride>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::PatternSchemaOverride>*,std::shared_ptr<siri::dialogengine::PatternSchemaOverride>*>((char *)&v131, *((_QWORD **)v74 + 25), *((_QWORD **)v74 + 26), (uint64_t)(*((_QWORD *)v74 + 26) - *((_QWORD *)v74 + 25)) >> 4);
      v75 = v131.__r_.__value_.__l.__size_;
      v76 = (_QWORD *)v131.__r_.__value_.__r.__words[0];
      if (v131.__r_.__value_.__r.__words[0] != v131.__r_.__value_.__l.__size_)
      {
        while (1)
        {
          v77 = *(int **)(v68 + 40);
          if (!v77)
            break;
          v78 = *(int *)(v68 + 32);
          v79 = *v77;
          if ((int)v78 >= *v77)
          {
            if (v79 == *(_DWORD *)(v68 + 36))
            {
LABEL_118:
              google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(v68 + 24), v79 + 1);
              v77 = *(int **)(v68 + 40);
              v79 = *v77;
            }
            *v77 = v79 + 1;
            v80 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::Override>(*(google::protobuf::internal::ArenaImpl **)(v68 + 24));
            v81 = *(_QWORD *)(v68 + 40);
            v82 = *(int *)(v68 + 32);
            *(_DWORD *)(v68 + 32) = v82 + 1;
            *(_QWORD *)(v81 + 8 * v82 + 8) = v80;
            goto LABEL_120;
          }
          *(_DWORD *)(v68 + 32) = v78 + 1;
          v80 = *(siri::dialogengine::PatternSchemaBinary::Override **)&v77[2 * v78 + 2];
LABEL_120:
          v83 = (_QWORD **)*v76;
          memset(&v128, 0, sizeof(v128));
          std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*,std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*>((char *)&v128, *v83, v83[1], ((char *)v83[1] - (char *)*v83) >> 4);
          v84 = siri::dialogengine::WritePatternUsagesBinary((uint64_t **)&v128);
          v133.__r_.__value_.__r.__words[0] = (std::string::size_type)&v128;
          std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v133);
          v85 = *((_QWORD *)v80 + 6);
          if (v85)
            (*(void (**)(uint64_t))(*(_QWORD *)v85 + 8))(v85);
          *((_DWORD *)v80 + 4) |= 1u;
          *((_QWORD *)v80 + 6) = v84;
          v86 = (_QWORD **)*v76;
          memset(&v128, 0, sizeof(v128));
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v128, (__int128 *)v86[3], (__int128 *)v86[4], 0xAAAAAAAAAAAAAAABLL * (v86[4] - v86[3]));
          v87 = v128.__r_.__value_.__l.__size_;
          for (k = (std::string *)v128.__r_.__value_.__r.__words[0]; k != (std::string *)v87; ++k)
            google::protobuf::FileDescriptorProto::add_dependency((uint64_t)v80, k);
          v133.__r_.__value_.__r.__words[0] = (std::string::size_type)&v128;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v133);
          v76 += 2;
          if (v76 == (_QWORD *)v75)
            goto LABEL_126;
        }
        v79 = *(_DWORD *)(v68 + 36);
        goto LABEL_118;
      }
LABEL_126:
      v128.__r_.__value_.__r.__words[0] = (std::string::size_type)&v131;
      std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v128);
      v89 = (__int128 **)*v4;
      memset(&v131, 0, sizeof(v131));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v131, v89[31], v89[32], 0xAAAAAAAAAAAAAAABLL * (((char *)v89[32] - (char *)v89[31]) >> 3));
      v90 = v131.__r_.__value_.__l.__size_;
      v91 = (std::string *)v131.__r_.__value_.__r.__words[0];
      for (j = a1; v91 != (std::string *)v90; ++v91)
        siri::dialogengine::PatternSchemaBinary::ModeConfiguration::add_examples(v68, v91);
      v128.__r_.__value_.__r.__words[0] = (std::string::size_type)&v131;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v128);
      v92 = *((_QWORD *)v10 + 11);
      if (v92)
        (*(void (**)(uint64_t))(*(_QWORD *)v92 + 8))(v92);
      *((_DWORD *)v10 + 4) |= 0x20u;
      *((_QWORD *)v10 + 11) = v68;
LABEL_131:
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      v4 += 2;
    }
    while (v4 != a3);
  }
  v131.__r_.__value_.__r.__words[0] = (std::string::size_type)&v130;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v131);
}

void sub_1BFBE3F30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void **a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,char *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,char a34)
{
  uint64_t v34;

  a16 = &a19;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100](&a16);
  a19 = (void *)(v34 - 128);
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  *(_QWORD *)(v34 - 128) = &a25;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v34 - 128));
  a25 = v34 - 160;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a25);
  if (a33 < 0)
    operator delete(__p);
  __p = &a34;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void siri::dialogengine::WriteCustomCombinationBinary(uint64_t a1, _QWORD *a2)
{
  _DWORD *v4;
  unsigned int *v5;
  int *v6;
  uint64_t v7;
  int v8;
  siri::dialogengine::PatternSchemaBinary::ListValue *v9;
  uint64_t v10;
  int v11;
  siri::dialogengine::PatternSchemaBinary::ListValue *v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  _DWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unsigned int v27;
  char *v28;
  std::string *v29;
  siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList *v30;
  _QWORD v31[2];
  void *__p;
  _QWORD *v33;
  uint64_t v34;
  std::string v35;
  uint64_t v36;
  void **p_p;

  v4 = (_DWORD *)*a2;
  v5 = (unsigned int *)(a1 + 24);
  v6 = *(int **)(a1 + 40);
  if (*(_DWORD *)*a2 == 4)
  {
    if (v6)
    {
      v7 = *(int *)(a1 + 32);
      v8 = *v6;
      if ((int)v7 < *v6)
      {
        *(_DWORD *)(a1 + 32) = v7 + 1;
        v9 = *(siri::dialogengine::PatternSchemaBinary::ListValue **)&v6[2 * v7 + 2];
LABEL_13:
        if (*((char *)v4 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(&v35, *((const std::string::value_type **)v4 + 1), *((_QWORD *)v4 + 2));
        }
        else
        {
          v15 = *(_OWORD *)(v4 + 2);
          v35.__r_.__value_.__r.__words[2] = *((_QWORD *)v4 + 3);
          *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v15;
        }
        if (*((_DWORD *)v9 + 8) != 1)
        {
          siri::dialogengine::PatternSchemaBinary::ListValue::clear_list_value((uint64_t)v9);
          *((_DWORD *)v9 + 8) = 1;
          *((_QWORD *)v9 + 3) = &google::protobuf::internal::fixed_address_empty_string;
        }
        google::protobuf::internal::ArenaStringPtr::SetNoArena((uint64_t *)v9 + 3, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&v35);
        if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v35.__r_.__value_.__l.__data_);
        return;
      }
      if (v8 != *(_DWORD *)(a1 + 36))
      {
LABEL_12:
        *v6 = v8 + 1;
        v9 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::ListValue>(*(google::protobuf::internal::ArenaImpl **)(a1 + 24));
        v13 = *(_QWORD *)(a1 + 40);
        v14 = *(int *)(a1 + 32);
        *(_DWORD *)(a1 + 32) = v14 + 1;
        *(_QWORD *)(v13 + 8 * v14 + 8) = v9;
        v4 = (_DWORD *)*a2;
        goto LABEL_13;
      }
    }
    else
    {
      v8 = *(_DWORD *)(a1 + 36);
    }
    google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v5, v8 + 1);
    v6 = *(int **)(a1 + 40);
    v8 = *v6;
    goto LABEL_12;
  }
  if (!v6)
  {
    v11 = *(_DWORD *)(a1 + 36);
LABEL_21:
    google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v5, v11 + 1);
    v6 = *(int **)(a1 + 40);
    v11 = *v6;
    goto LABEL_22;
  }
  v10 = *(int *)(a1 + 32);
  v11 = *v6;
  if ((int)v10 < *v6)
  {
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v12 = *(siri::dialogengine::PatternSchemaBinary::ListValue **)&v6[2 * v10 + 2];
    goto LABEL_23;
  }
  if (v11 == *(_DWORD *)(a1 + 36))
    goto LABEL_21;
LABEL_22:
  *v6 = v11 + 1;
  v12 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::ListValue>(*(google::protobuf::internal::ArenaImpl **)(a1 + 24));
  v16 = *(_QWORD *)(a1 + 40);
  v17 = *(int *)(a1 + 32);
  *(_DWORD *)(a1 + 32) = v17 + 1;
  *(_QWORD *)(v16 + 8 * v17 + 8) = v12;
LABEL_23:
  v18 = (uint64_t *)operator new();
  siri::dialogengine::PatternSchemaBinary::MapValue::MapValue((siri::dialogengine::PatternSchemaBinary::MapValue *)v18);
  siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList::VisualComponentsCombinationList((siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList *)&v35);
  v19 = (_DWORD *)*a2;
  v33 = 0;
  v34 = 0;
  __p = 0;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>*,std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>*>(&__p, *((_QWORD **)v19 + 4), *((_QWORD **)v19 + 5), (uint64_t)(*((_QWORD *)v19 + 5) - *((_QWORD *)v19 + 4)) >> 4);
  v20 = __p;
  v21 = v33;
  while (v20 != v21)
  {
    v22 = (std::__shared_weak_count *)v20[1];
    v31[0] = *v20;
    v31[1] = v22;
    if (v22)
    {
      p_shared_owners = (unint64_t *)&v22->__shared_owners_;
      do
        v24 = __ldxr(p_shared_owners);
      while (__stxr(v24 + 1, p_shared_owners));
    }
    siri::dialogengine::WriteCustomCombinationBinary(&v35, v31);
    if (v22)
    {
      v25 = (unint64_t *)&v22->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    v20 += 2;
  }
  p_p = &__p;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100](&p_p);
  v27 = *(_DWORD *)*a2 - 1;
  if (v27 > 3)
    v28 = "";
  else
    v28 = off_1E792A160[v27];
  std::string::basic_string[abi:ne180100]<0>(&__p, v28);
  v29 = google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::operator[](v18 + 3, (uint64_t)&__p);
  v30 = (siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList *)v29;
  if (&v35 != v29)
  {
    siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList::Clear((siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList *)v29);
    siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList::MergeFrom(v30, (const siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList *)&v35);
  }
  if (SHIBYTE(v34) < 0)
    operator delete(__p);
  siri::dialogengine::PatternSchemaBinary::ListValue::clear_list_value((uint64_t)v12);
  *((_DWORD *)v12 + 8) = 2;
  *((_QWORD *)v12 + 3) = v18;
  v35.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E79387F8;
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((google::protobuf::internal::RepeatedPtrFieldBase *)&v36);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)&v35.__r_.__value_.__l.__size_);
}

void sub_1BFBE449C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24)
{
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((google::protobuf::internal::RepeatedPtrFieldBase *)&a24);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(&a19);
  _Unwind_Resume(a1);
}

std::string *google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::operator[](uint64_t *a1, uint64_t a2)
{
  _QWORD *v4;
  std::string::size_type v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v10;
  google::protobuf::internal::ArenaImpl *v11;
  std::string *Aligned;
  std::string::size_type v13;
  __int128 v14;
  std::string *v15;
  google::protobuf::internal::ArenaImpl *v16;
  google::protobuf::internal::ArenaImpl *v17;
  google::protobuf::internal::ArenaImpl *v18;
  std::string *v19;
  unint64_t v21;
  char v22;
  unint64_t v23;
  std::string __p;
  uint64_t v25;
  std::string::size_type v26[4];
  _QWORD v27[4];

  v4 = (_QWORD *)a1[2];
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  v25 = 0;
  google::protobuf::Map<std::string,std::string>::InnerMap::FindHelper(v27, (uint64_t)v4, (unsigned __int8 *)&__p, 0);
  v5 = v27[0];
  if (v27[0])
    goto LABEL_20;
  v6 = v4[1];
  v7 = *v4 + 1;
  v8 = ((3 * v6) >> 2) & 0xFFFFFFFFFFFFFFFLL;
  if (v8 <= v7)
  {
    if (v6 <= 0x800000000000000)
    {
      v21 = 2 * v6;
LABEL_41:
      google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::InnerMap::Resize(v4, v21);
      google::protobuf::Map<std::string,std::string>::InnerMap::FindHelper(v26, (uint64_t)v4, (unsigned __int8 *)&__p, 0);
      v10 = v26[3];
      goto LABEL_11;
    }
  }
  else if (v6 >= 9 && (12 * v6) >> 6 >= v7)
  {
    v22 = 0;
    v23 = ((5 * v7) >> 2) + 1;
    do
      ++v22;
    while (v23 << v22 < v8);
    v21 = v6 >> v22 <= 8 ? 8 : v6 >> v22;
    if (v21 != v6)
      goto LABEL_41;
  }
  v10 = v27[3];
LABEL_11:
  v11 = (google::protobuf::internal::ArenaImpl *)v4[5];
  if (v11)
  {
    if (*((_QWORD *)v11 + 14))
      google::protobuf::Arena::OnArenaAllocation(v4[5], MEMORY[0x1E0DE4EE8], 40);
    Aligned = (std::string *)google::protobuf::internal::ArenaImpl::AllocateAligned(v11, 0x28uLL);
  }
  else
  {
    Aligned = (std::string *)operator new(0x28uLL);
  }
  v13 = (std::string::size_type)Aligned;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(Aligned, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else
  {
    v14 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    Aligned->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
    *(_OWORD *)&Aligned->__r_.__value_.__l.__data_ = v14;
  }
  *(_QWORD *)(v13 + 24) = v25;
  google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::InnerMap::InsertUnique(v26, v4, v10, v13);
  ++*v4;
  v5 = v26[0];
LABEL_20:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v15 = *(std::string **)(v5 + 24);
  if (!v15)
  {
    v16 = (google::protobuf::internal::ArenaImpl *)*a1;
    if (*a1)
    {
      if (*((_QWORD *)v16 + 14))
        google::protobuf::Arena::OnArenaAllocation(*a1, MEMORY[0x1E0DE4EE8], 72);
      v15 = (std::string *)google::protobuf::internal::ArenaImpl::AllocateAligned(v16, 0x48uLL);
      v17 = (google::protobuf::internal::ArenaImpl *)*a1;
      v15->__r_.__value_.__l.__size_ = 0;
      v15->__r_.__value_.__r.__words[2] = 0;
      v15->__r_.__value_.__r.__words[0] = 0;
      google::protobuf::Arena::OwnDestructor<std::string>(v17, v15);
      v18 = (google::protobuf::internal::ArenaImpl *)*a1;
      siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList::VisualComponentsCombinationList((siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList *)&v15[1]);
      google::protobuf::Arena::OwnDestructor<siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>(v18, &v15[1]);
      std::string::operator=(v15, (const std::string *)a2);
    }
    else
    {
      v19 = (std::string *)operator new();
      v15 = v19;
      if (*(char *)(a2 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v19, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
      }
      else
      {
        *(_OWORD *)&v19->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
        v19->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
      }
      siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList::VisualComponentsCombinationList((siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList *)&v15[1]);
    }
    *(_QWORD *)(v5 + 24) = v15;
  }
  return v15 + 1;
}

void sub_1BFBE47E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  MEMORY[0x1C3B8D890](v14, 0x10B2C40D629C202);
  _Unwind_Resume(a1);
}

google::protobuf::internal::ArenaImpl *google::protobuf::Arena::OwnDestructor<std::string>(google::protobuf::internal::ArenaImpl *result, void *a2)
{
  if (a2)
    return google::protobuf::internal::ArenaImpl::AddCleanup(result, a2, (void (*)(void *))google::protobuf::internal::arena_destruct_object<std::string>);
  return result;
}

google::protobuf::internal::ArenaImpl *google::protobuf::Arena::OwnDestructor<siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>(google::protobuf::internal::ArenaImpl *result, void *a2)
{
  if (a2)
    return google::protobuf::internal::ArenaImpl::AddCleanup(result, a2, (void (*)(void *))google::protobuf::internal::arena_destruct_object<siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>);
  return result;
}

uint64_t google::protobuf::internal::arena_destruct_object<siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

void google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::InnerMap::InsertUnique(std::string::size_type *a1, _QWORD *a2, unint64_t a3, std::string::size_type a4)
{
  uint64_t v8;
  std::string *v9;
  std::string *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  std::string *v15;
  std::string::size_type size;
  unint64_t v17;
  std::string *v18;
  unint64_t v19;
  char v20;
  std::string v21[2];

  v8 = a2[3];
  if (v8 != a2[1] && !*(_QWORD *)(a2[4] + 8 * v8))
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v21, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/map.h", 677);
    v9 = google::protobuf::internal::LogMessage::operator<<(v21, "CHECK failed: index_of_first_non_null_ == num_buckets_ || table_[index_of_first_non_null_] != NULL: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v20, (const char **)&v9->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v21[0].__r_.__value_.__l.__data_);
  }
  google::protobuf::Map<std::string,std::string>::InnerMap::FindHelper(v21, (uint64_t)a2, (unsigned __int8 *)a4, 0);
  if (v21[0].__r_.__value_.__r.__words[0])
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v21, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/map.h", 683);
    v10 = google::protobuf::internal::LogMessage::operator<<(v21, "CHECK failed: find(*KeyPtrFromNodePtr(node)) == end(): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v20, (const char **)&v10->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v21[0].__r_.__value_.__l.__data_);
  }
  v11 = a2[4];
  v12 = *(_QWORD *)(v11 + 8 * a3);
  if (!v12)
  {
    *(_QWORD *)(a4 + 32) = 0;
    *(_QWORD *)(v11 + 8 * a3) = a4;
    size = (std::string::size_type)a2;
LABEL_16:
    v19 = a2[3];
    if (a3 < v19)
      v19 = a3;
    a2[3] = v19;
    *a1 = a4;
    a1[1] = size;
    goto LABEL_22;
  }
  if (v12 == *(_QWORD *)(v11 + 8 * (a3 ^ 1)))
  {
    google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::InnerMap::InsertUniqueInTree(a1, (uint64_t)a2, a3, (_QWORD *)a4);
    return;
  }
  v13 = 0;
  v14 = *(_QWORD *)(v11 + 8 * a3);
  do
  {
    ++v13;
    v14 = *(_QWORD *)(v14 + 32);
  }
  while (v14);
  if (v13 >= 9)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v21, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/map.h", 882);
    v15 = google::protobuf::internal::LogMessage::operator<<(v21, "CHECK failed: (count) <= (kMaxLength): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v20, (const char **)&v15->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v21[0].__r_.__value_.__l.__data_);
LABEL_12:
    google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::InnerMap::TreeConvert((uint64_t)a2, a3);
    google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::InnerMap::InsertUniqueInTree(v21, (uint64_t)a2, a3, (_QWORD *)a4);
    size = v21[0].__r_.__value_.__l.__size_;
    a4 = v21[0].__r_.__value_.__r.__words[0];
    v17 = v21[0].__r_.__value_.__r.__words[2];
    if (v21[0].__r_.__value_.__r.__words[2] != (a3 & 0xFFFFFFFFFFFFFFFELL))
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v21, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/map.h", 690);
      v18 = google::protobuf::internal::LogMessage::operator<<(v21, "CHECK failed: (result.bucket_index_) == (b & ~static_cast<size_type>(1)): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v20, (const char **)&v18->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v21[0].__r_.__value_.__l.__data_);
    }
    a3 = v17;
    goto LABEL_16;
  }
  if (v13 == 8)
    goto LABEL_12;
  *(_QWORD *)(a4 + 32) = v12;
  *(_QWORD *)(v11 + 8 * a3) = a4;
  *a1 = a4;
  a1[1] = (std::string::size_type)a2;
LABEL_22:
  a1[2] = a3;
}

void sub_1BFBE4A98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::InnerMap::TreeConvert(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  std::string *v8;
  google::protobuf::internal::ArenaImpl *v9;
  _QWORD *Aligned;
  uint64_t v11;
  std::string::size_type v12;
  uint64_t v13;
  std::string::__raw *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t **v20;
  uint64_t *v21;
  std::string *v22;
  std::string *v23;
  uint64_t v24;
  std::string *v25;
  std::string v26;
  uint64_t v27;
  uint64_t v28;

  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(v4 + 8 * a2);
  if (v5)
  {
    v6 = *(_QWORD *)(v4 + 8 * (a2 ^ 1));
    if (v5 == v6)
    {
LABEL_10:
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)&v26, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/map.h", 841);
      v8 = google::protobuf::internal::LogMessage::operator<<(&v26, "CHECK failed: !TableEntryIsTree(b) && !TableEntryIsTree(b ^ 1): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v28, (const char **)&v8->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v26.__r_.__value_.__l.__data_);
      goto LABEL_11;
    }
  }
  else
  {
    v6 = *(_QWORD *)(v4 + 8 * (a2 ^ 1));
  }
  if (v6)
    v7 = v6 == v5;
  else
    v7 = 0;
  if (v7)
    goto LABEL_10;
LABEL_11:
  v9 = *(google::protobuf::internal::ArenaImpl **)(a1 + 40);
  if (v9)
  {
    if (*((_QWORD *)v9 + 14))
      google::protobuf::Arena::OnArenaAllocation(*(_QWORD *)(a1 + 40), MEMORY[0x1E0DE4EE8], 32);
    Aligned = (_QWORD *)google::protobuf::internal::ArenaImpl::AllocateAligned(v9, 0x20uLL);
  }
  else
  {
    Aligned = operator new(0x20uLL);
  }
  v11 = (uint64_t)Aligned;
  v26.__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 40);
  v12 = v26.__r_.__value_.__r.__words[2];
  v27 = 0;
  v26.__r_.__value_.__r.__words[0] = (std::string::size_type)&v26.__r_.__value_.__l.__size_;
  v26.__r_.__value_.__l.__size_ = 0;
  Aligned[1] = 0;
  v13 = (uint64_t)(Aligned + 1);
  Aligned[2] = v12;
  Aligned[3] = 0;
  *Aligned = Aligned + 1;
  v14 = (std::string::__raw *)v26.__r_.__value_.__r.__words[0];
  if ((std::string::size_type *)v26.__r_.__value_.__l.__data_ != &v26.__r_.__value_.__r.__words[1])
  {
    do
    {
      v15 = *(_QWORD *)(v11 + 8);
      v16 = v13;
      if (*(_QWORD *)v11 == v13)
        goto LABEL_23;
      v17 = *(_QWORD *)(v11 + 8);
      v18 = v13;
      if (v15)
      {
        do
        {
          v16 = v17;
          v17 = *(_QWORD *)(v17 + 8);
        }
        while (v17);
      }
      else
      {
        do
        {
          v16 = *(_QWORD *)(v18 + 16);
          v7 = *(_QWORD *)v16 == v18;
          v18 = v16;
        }
        while (v7);
      }
      v19 = (_QWORD *)v14[1].__words[1];
      if (std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(*(_QWORD **)(v16 + 32), v19))
      {
LABEL_23:
        if (!v15)
        {
          v28 = v13;
          v20 = (uint64_t **)v13;
LABEL_29:
          v21 = (uint64_t *)google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::MapAllocator<std::__tree_node<std::string*,void *>>::allocate(*(google::protobuf::internal::ArenaImpl **)(v11 + 16));
          v21[4] = v14[1].__words[1];
          std::__tree<google::protobuf::MapKey *,google::protobuf::Map<google::protobuf::MapKey,google::protobuf::MapValueRef>::InnerMap::KeyCompare,google::protobuf::Map<google::protobuf::MapKey,google::protobuf::MapValueRef>::MapAllocator<google::protobuf::MapKey *>>::__insert_node_at((uint64_t **)v11, v28, v20, v21);
          goto LABEL_30;
        }
        v28 = v16;
        v20 = (uint64_t **)(v16 + 8);
      }
      else
      {
        v20 = (uint64_t **)std::__tree<std::string *,google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::InnerMap::KeyCompare,google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::MapAllocator<std::string *>>::__find_equal<std::string *>(v11, &v28, v19);
      }
      if (!*v20)
        goto LABEL_29;
LABEL_30:
      v22 = (std::string *)v14->__words[1];
      if (v22)
      {
        do
        {
          v23 = v22;
          v22 = (std::string *)v22->__r_.__value_.__r.__words[0];
        }
        while (v22);
      }
      else
      {
        do
        {
          v23 = (std::string *)v14->__words[2];
          v7 = v23->__r_.__value_.__r.__words[0] == (_QWORD)v14;
          v14 = (std::string::__raw *)v23;
        }
        while (!v7);
      }
      v14 = (std::string::__raw *)v23;
    }
    while (v23 != (std::string *)&v26.__r_.__value_.__r.__words[1]);
  }
  std::__tree<google::protobuf::MapKey *,google::protobuf::Map<google::protobuf::MapKey,google::protobuf::MapValueRef>::InnerMap::KeyCompare,google::protobuf::Map<google::protobuf::MapKey,google::protobuf::MapValueRef>::MapAllocator<google::protobuf::MapKey *>>::destroy((uint64_t)&v26, (_QWORD *)v26.__r_.__value_.__l.__size_);
  v24 = google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::InnerMap::CopyListToTree(*(_QWORD *)(a1 + 32), a2, v11);
  if (google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::InnerMap::CopyListToTree(*(_QWORD *)(a1 + 32), a2 ^ 1, v11)+ v24 != *(_QWORD *)(v11 + 24))
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)&v26, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/map.h", 852);
    v25 = google::protobuf::internal::LogMessage::operator<<(&v26, "CHECK failed: (count) == (tree->size()): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v28, (const char **)&v25->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v26.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * (a2 ^ 1)) = v11;
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * a2) = v11;
}

void sub_1BFBE4D6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t *google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::InnerMap::InsertUniqueInTree(_QWORD *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  std::string *v9;
  uint64_t v10;
  uint64_t *result;
  char v12;
  std::string v13[2];

  v8 = *(_QWORD *)(a2 + 32);
  if (*(_QWORD *)(v8 + 8 * a3) != *(_QWORD *)(v8 + 8 * (a3 ^ 1)))
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/map.h", 718);
    v9 = google::protobuf::internal::LogMessage::operator<<(v13, "CHECK failed: (table_[b]) == (table_[b ^ 1]): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v12, (const char **)&v9->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v13[0].__r_.__value_.__l.__data_);
    v8 = *(_QWORD *)(a2 + 32);
  }
  a4[4] = 0;
  v10 = *(_QWORD *)(v8 + 8 * a3);
  v13[0].__r_.__value_.__r.__words[0] = (std::string::size_type)a4;
  result = std::__tree<std::string *,google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::InnerMap::KeyCompare,google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::MapAllocator<std::string *>>::__emplace_unique_key_args<std::string *,std::string *>(v10, a4, (uint64_t *)v13);
  *a1 = result[4];
  a1[1] = a2;
  a1[2] = a3 & 0xFFFFFFFFFFFFFFFELL;
  return result;
}

void sub_1BFBE4E64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::string *,google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::InnerMap::KeyCompare,google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::MapAllocator<std::string *>>::__emplace_unique_key_args<std::string *,std::string *>(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t **v7;
  uint64_t v9;

  v5 = (uint64_t **)std::__tree<std::string *,google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::InnerMap::KeyCompare,google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::MapAllocator<std::string *>>::__find_equal<std::string *>(a1, &v9, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = v5;
    v6 = (uint64_t *)google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::MapAllocator<std::__tree_node<std::string*,void *>>::allocate(*(google::protobuf::internal::ArenaImpl **)(a1 + 16));
    v6[4] = *a3;
    std::__tree<google::protobuf::MapKey *,google::protobuf::Map<google::protobuf::MapKey,google::protobuf::MapValueRef>::InnerMap::KeyCompare,google::protobuf::Map<google::protobuf::MapKey,google::protobuf::MapValueRef>::MapAllocator<google::protobuf::MapKey *>>::__insert_node_at((uint64_t **)a1, v9, v7, v6);
  }
  return v6;
}

_QWORD *std::__tree<std::string *,google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::InnerMap::KeyCompare,google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::MapAllocator<std::string *>>::__find_equal<std::string *>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v7;
  _QWORD *v8;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v7 = v4;
        v8 = (_QWORD *)v4[4];
        if (!std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(a3, v8))
          break;
        v4 = (_QWORD *)*v7;
        v5 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (!std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(v8, a3))
        break;
      v5 = v7 + 1;
      v4 = (_QWORD *)v7[1];
    }
    while (v4);
  }
  else
  {
    v7 = (_QWORD *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

void *google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::MapAllocator<std::__tree_node<std::string*,void *>>::allocate(google::protobuf::internal::ArenaImpl *this)
{
  if (!this)
    return operator new(0x28uLL);
  if (*((_QWORD *)this + 14))
    google::protobuf::Arena::OnArenaAllocation((uint64_t)this, MEMORY[0x1E0DE4EE8], 40);
  return (void *)google::protobuf::internal::ArenaImpl::AllocateAligned(this, 0x28uLL);
}

uint64_t google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::InnerMap::CopyListToTree(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v8;

  v3 = *(_QWORD **)(a1 + 8 * a2);
  if (!v3)
    return 0;
  v5 = 0;
  do
  {
    v8 = v3;
    std::__tree<std::string *,google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::InnerMap::KeyCompare,google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::MapAllocator<std::string *>>::__emplace_unique_key_args<std::string *,std::string *>(a3, v3, (uint64_t *)&v8);
    ++v5;
    v6 = (_QWORD *)v3[4];
    v3[4] = 0;
    v3 = v6;
  }
  while (v6);
  return v5;
}

void google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::InnerMap::Resize(_QWORD *a1, unint64_t a2)
{
  std::string *v4;
  _QWORD *v5;
  unint64_t v6;
  void *EmptyTable;
  unint64_t v8;
  std::string::size_type v9;
  std::string::size_type v10;
  unint64_t v11;
  _QWORD *v12;
  _BYTE *v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  BOOL v17;
  char v18;
  std::string v19[2];

  if (a2 <= 7)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v19, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/map.h", 769);
    v4 = google::protobuf::internal::LogMessage::operator<<(v19, "CHECK failed: (new_num_buckets) >= (kMinTableSize): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v18, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v19[0].__r_.__value_.__l.__data_);
  }
  v5 = (_QWORD *)a1[4];
  v6 = a1[1];
  a1[1] = a2;
  EmptyTable = google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::InnerMap::CreateEmptyTable((uint64_t)a1, a2);
  v8 = a1[3];
  a1[3] = a1[1];
  a1[4] = EmptyTable;
  while (v8 < v6)
  {
    v9 = v5[v8];
    if (v9)
    {
      if (v9 == v5[v8 ^ 1])
      {
        v12 = *(_QWORD **)v9;
        do
        {
          v13 = (_BYTE *)v12[4];
          v14 = google::protobuf::Map<std::string,std::string>::InnerMap::BucketNumber((uint64_t)a1, v13);
          google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::InnerMap::InsertUnique((std::string::size_type *)v19, a1, v14, (std::string::size_type)v13);
          v15 = (_QWORD *)v12[1];
          if (v15)
          {
            do
            {
              v16 = v15;
              v15 = (_QWORD *)*v15;
            }
            while (v15);
          }
          else
          {
            do
            {
              v16 = (_QWORD *)v12[2];
              v17 = *v16 == (_QWORD)v12;
              v12 = v16;
            }
            while (!v17);
          }
          v12 = v16;
        }
        while (v16 != (_QWORD *)(v9 + 8));
        ++v8;
        google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::InnerMap::DestroyTree(a1[5], (_QWORD **)v9);
      }
      else
      {
        do
        {
          v10 = *(_QWORD *)(v9 + 32);
          v11 = google::protobuf::Map<std::string,std::string>::InnerMap::BucketNumber((uint64_t)a1, (_BYTE *)v9);
          google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::InnerMap::InsertUnique((std::string::size_type *)v19, a1, v11, v9);
          v9 = v10;
        }
        while (v10);
      }
    }
    ++v8;
  }
  if (!a1[5])
    operator delete(v5);
}

void sub_1BFBE51C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void *google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::InnerMap::CreateEmptyTable(uint64_t a1, unint64_t a2)
{
  std::string *v4;
  std::string *v5;
  google::protobuf::internal::ArenaImpl *v6;
  uint64_t v7;
  void *Aligned;
  void *v9;
  char v11;
  std::string v12[2];

  if (a2 <= 7)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v12, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/map.h", 930);
    v4 = google::protobuf::internal::LogMessage::operator<<(v12, "CHECK failed: n >= kMinTableSize: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v11, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v12[0].__r_.__value_.__l.__data_);
  }
  if ((a2 & (a2 - 1)) != 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v12, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/map.h", 931);
    v5 = google::protobuf::internal::LogMessage::operator<<(v12, "CHECK failed: (n & (n - 1)) == (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v11, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v12[0].__r_.__value_.__l.__data_);
  }
  v6 = *(google::protobuf::internal::ArenaImpl **)(a1 + 40);
  v7 = 8 * a2;
  if (v6)
  {
    if (*((_QWORD *)v6 + 14))
      google::protobuf::Arena::OnArenaAllocation((uint64_t)v6, MEMORY[0x1E0DE4EE8], v7);
    Aligned = (void *)google::protobuf::internal::ArenaImpl::AllocateAligned(v6, v7);
  }
  else
  {
    Aligned = operator new(v7);
  }
  v9 = Aligned;
  bzero(Aligned, v7);
  return v9;
}

void sub_1BFBE52E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::InnerMap::DestroyTree(uint64_t a1, _QWORD **a2)
{
  std::__tree<google::protobuf::MapKey *,google::protobuf::Map<google::protobuf::MapKey,google::protobuf::MapValueRef>::InnerMap::KeyCompare,google::protobuf::Map<google::protobuf::MapKey,google::protobuf::MapValueRef>::MapAllocator<google::protobuf::MapKey *>>::destroy((uint64_t)a2, a2[1]);
  if (!a1)
    operator delete(a2);
}

std::string *siri::dialogengine::PatternSchemaBinary::ModeConfiguration::add_examples(uint64_t a1, std::string *__str)
{
  google::protobuf::internal::ArenaImpl **v4;
  int *v5;
  uint64_t v6;
  int v7;
  std::string *AlignedAndAddCleanup;
  google::protobuf::internal::ArenaImpl *v9;
  uint64_t v10;
  uint64_t v11;

  v4 = (google::protobuf::internal::ArenaImpl **)(a1 + 48);
  v5 = *(int **)(a1 + 64);
  if (!v5)
  {
    v7 = *(_DWORD *)(a1 + 60);
LABEL_6:
    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(a1 + 48), v7 + 1);
    v5 = *(int **)(a1 + 64);
    v7 = *v5;
    goto LABEL_7;
  }
  v6 = *(int *)(a1 + 56);
  v7 = *v5;
  if ((int)v6 < *v5)
  {
    *(_DWORD *)(a1 + 56) = v6 + 1;
    AlignedAndAddCleanup = *(std::string **)&v5[2 * v6 + 2];
    return std::string::operator=(AlignedAndAddCleanup, __str);
  }
  if (v7 == *(_DWORD *)(a1 + 60))
    goto LABEL_6;
LABEL_7:
  *v5 = v7 + 1;
  v9 = *v4;
  if (v9)
  {
    if (*((_QWORD *)v9 + 14))
    AlignedAndAddCleanup = (std::string *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(v9, 0x18uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<std::string>);
  }
  else
  {
    AlignedAndAddCleanup = (std::string *)operator new();
  }
  AlignedAndAddCleanup->__r_.__value_.__r.__words[0] = 0;
  AlignedAndAddCleanup->__r_.__value_.__l.__size_ = 0;
  AlignedAndAddCleanup->__r_.__value_.__r.__words[2] = 0;
  v10 = *(_QWORD *)(a1 + 64);
  v11 = *(int *)(a1 + 56);
  *(_DWORD *)(a1 + 56) = v11 + 1;
  *(_QWORD *)(v10 + 8 * v11 + 8) = AlignedAndAddCleanup;
  return std::string::operator=(AlignedAndAddCleanup, __str);
}

std::string *google::protobuf::Map<std::string,std::string>::operator[](uint64_t *a1, uint64_t a2)
{
  _QWORD *v4;
  std::string::size_type v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v10;
  google::protobuf::internal::ArenaImpl *v11;
  std::string *Aligned;
  std::string::size_type v13;
  __int128 v14;
  std::string *v15;
  google::protobuf::internal::ArenaImpl *v16;
  google::protobuf::internal::ArenaImpl *v17;
  google::protobuf::internal::ArenaImpl *v18;
  std::string *v19;
  unint64_t v21;
  char v22;
  unint64_t v23;
  std::string __p;
  uint64_t v25;
  std::string::size_type v26[4];
  _QWORD v27[4];

  v4 = (_QWORD *)a1[2];
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  v25 = 0;
  google::protobuf::Map<std::string,std::string>::InnerMap::FindHelper(v27, (uint64_t)v4, (unsigned __int8 *)&__p, 0);
  v5 = v27[0];
  if (v27[0])
    goto LABEL_20;
  v6 = v4[1];
  v7 = *v4 + 1;
  v8 = ((3 * v6) >> 2) & 0xFFFFFFFFFFFFFFFLL;
  if (v8 <= v7)
  {
    if (v6 <= 0x800000000000000)
    {
      v21 = 2 * v6;
LABEL_41:
      google::protobuf::Map<std::string,std::string>::InnerMap::Resize(v4, v21);
      google::protobuf::Map<std::string,std::string>::InnerMap::FindHelper(v26, (uint64_t)v4, (unsigned __int8 *)&__p, 0);
      v10 = v26[3];
      goto LABEL_11;
    }
  }
  else if (v6 >= 9 && (12 * v6) >> 6 >= v7)
  {
    v22 = 0;
    v23 = ((5 * v7) >> 2) + 1;
    do
      ++v22;
    while (v23 << v22 < v8);
    v21 = v6 >> v22 <= 8 ? 8 : v6 >> v22;
    if (v21 != v6)
      goto LABEL_41;
  }
  v10 = v27[3];
LABEL_11:
  v11 = (google::protobuf::internal::ArenaImpl *)v4[5];
  if (v11)
  {
    if (*((_QWORD *)v11 + 14))
      google::protobuf::Arena::OnArenaAllocation(v4[5], MEMORY[0x1E0DE4EE8], 40);
    Aligned = (std::string *)google::protobuf::internal::ArenaImpl::AllocateAligned(v11, 0x28uLL);
  }
  else
  {
    Aligned = (std::string *)operator new(0x28uLL);
  }
  v13 = (std::string::size_type)Aligned;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(Aligned, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else
  {
    v14 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    Aligned->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
    *(_OWORD *)&Aligned->__r_.__value_.__l.__data_ = v14;
  }
  *(_QWORD *)(v13 + 24) = v25;
  google::protobuf::Map<std::string,std::string>::InnerMap::InsertUnique(v26, v4, v10, v13);
  ++*v4;
  v5 = v26[0];
LABEL_20:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v15 = *(std::string **)(v5 + 24);
  if (!v15)
  {
    v16 = (google::protobuf::internal::ArenaImpl *)*a1;
    if (*a1)
    {
      if (*((_QWORD *)v16 + 14))
        google::protobuf::Arena::OnArenaAllocation(*a1, MEMORY[0x1E0DE4EE8], 48);
      v15 = (std::string *)google::protobuf::internal::ArenaImpl::AllocateAligned(v16, 0x30uLL);
      v17 = (google::protobuf::internal::ArenaImpl *)*a1;
      v15->__r_.__value_.__l.__size_ = 0;
      v15->__r_.__value_.__r.__words[2] = 0;
      v15->__r_.__value_.__r.__words[0] = 0;
      google::protobuf::Arena::OwnDestructor<std::string>(v17, v15);
      v18 = (google::protobuf::internal::ArenaImpl *)*a1;
      v15[1].__r_.__value_.__l.__size_ = 0;
      v15[1].__r_.__value_.__r.__words[2] = 0;
      v15[1].__r_.__value_.__r.__words[0] = 0;
      google::protobuf::Arena::OwnDestructor<std::string>(v18, &v15[1]);
      std::string::operator=(v15, (const std::string *)a2);
    }
    else
    {
      v19 = (std::string *)operator new();
      v15 = v19;
      if (*(char *)(a2 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v19, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
      }
      else
      {
        *(_OWORD *)&v19->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
        v19->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
      }
      v15[1].__r_.__value_.__r.__words[0] = 0;
      v15[1].__r_.__value_.__l.__size_ = 0;
      v15[1].__r_.__value_.__r.__words[2] = 0;
    }
    *(_QWORD *)(v5 + 24) = v15;
  }
  return v15 + 1;
}

void sub_1BFBE56DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  MEMORY[0x1C3B8D890](v14, 0x1012C403467C318);
  _Unwind_Resume(a1);
}

void google::protobuf::Map<std::string,std::string>::InnerMap::InsertUnique(std::string::size_type *a1, _QWORD *a2, unint64_t a3, std::string::size_type a4)
{
  uint64_t v8;
  std::string *v9;
  std::string *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  std::string *v15;
  std::string::size_type size;
  unint64_t v17;
  std::string *v18;
  unint64_t v19;
  char v20;
  std::string v21[2];

  v8 = a2[3];
  if (v8 != a2[1] && !*(_QWORD *)(a2[4] + 8 * v8))
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v21, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/map.h", 677);
    v9 = google::protobuf::internal::LogMessage::operator<<(v21, "CHECK failed: index_of_first_non_null_ == num_buckets_ || table_[index_of_first_non_null_] != NULL: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v20, (const char **)&v9->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v21[0].__r_.__value_.__l.__data_);
  }
  google::protobuf::Map<std::string,std::string>::InnerMap::FindHelper(v21, (uint64_t)a2, (unsigned __int8 *)a4, 0);
  if (v21[0].__r_.__value_.__r.__words[0])
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v21, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/map.h", 683);
    v10 = google::protobuf::internal::LogMessage::operator<<(v21, "CHECK failed: find(*KeyPtrFromNodePtr(node)) == end(): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v20, (const char **)&v10->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v21[0].__r_.__value_.__l.__data_);
  }
  v11 = a2[4];
  v12 = *(_QWORD *)(v11 + 8 * a3);
  if (!v12)
  {
    *(_QWORD *)(a4 + 32) = 0;
    *(_QWORD *)(v11 + 8 * a3) = a4;
    size = (std::string::size_type)a2;
LABEL_16:
    v19 = a2[3];
    if (a3 < v19)
      v19 = a3;
    a2[3] = v19;
    *a1 = a4;
    a1[1] = size;
    goto LABEL_22;
  }
  if (v12 == *(_QWORD *)(v11 + 8 * (a3 ^ 1)))
  {
    google::protobuf::Map<std::string,std::string>::InnerMap::InsertUniqueInTree(a1, (uint64_t)a2, a3, (_QWORD *)a4);
    return;
  }
  v13 = 0;
  v14 = *(_QWORD *)(v11 + 8 * a3);
  do
  {
    ++v13;
    v14 = *(_QWORD *)(v14 + 32);
  }
  while (v14);
  if (v13 >= 9)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v21, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/map.h", 882);
    v15 = google::protobuf::internal::LogMessage::operator<<(v21, "CHECK failed: (count) <= (kMaxLength): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v20, (const char **)&v15->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v21[0].__r_.__value_.__l.__data_);
LABEL_12:
    google::protobuf::Map<std::string,std::string>::InnerMap::TreeConvert((uint64_t)a2, a3);
    google::protobuf::Map<std::string,std::string>::InnerMap::InsertUniqueInTree(v21, (uint64_t)a2, a3, (_QWORD *)a4);
    size = v21[0].__r_.__value_.__l.__size_;
    a4 = v21[0].__r_.__value_.__r.__words[0];
    v17 = v21[0].__r_.__value_.__r.__words[2];
    if (v21[0].__r_.__value_.__r.__words[2] != (a3 & 0xFFFFFFFFFFFFFFFELL))
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v21, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/map.h", 690);
      v18 = google::protobuf::internal::LogMessage::operator<<(v21, "CHECK failed: (result.bucket_index_) == (b & ~static_cast<size_type>(1)): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v20, (const char **)&v18->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v21[0].__r_.__value_.__l.__data_);
    }
    a3 = v17;
    goto LABEL_16;
  }
  if (v13 == 8)
    goto LABEL_12;
  *(_QWORD *)(a4 + 32) = v12;
  *(_QWORD *)(v11 + 8 * a3) = a4;
  *a1 = a4;
  a1[1] = (std::string::size_type)a2;
LABEL_22:
  a1[2] = a3;
}

void sub_1BFBE5948(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::Map<std::string,std::string>::InnerMap::TreeConvert(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  std::string *v8;
  google::protobuf::internal::ArenaImpl *v9;
  _QWORD *Aligned;
  uint64_t v11;
  std::string::size_type v12;
  uint64_t v13;
  std::string::__raw *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t **v20;
  uint64_t *v21;
  std::string *v22;
  std::string *v23;
  uint64_t v24;
  std::string *v25;
  std::string v26;
  uint64_t v27;
  uint64_t v28;

  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(v4 + 8 * a2);
  if (v5)
  {
    v6 = *(_QWORD *)(v4 + 8 * (a2 ^ 1));
    if (v5 == v6)
    {
LABEL_10:
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)&v26, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/map.h", 841);
      v8 = google::protobuf::internal::LogMessage::operator<<(&v26, "CHECK failed: !TableEntryIsTree(b) && !TableEntryIsTree(b ^ 1): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v28, (const char **)&v8->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v26.__r_.__value_.__l.__data_);
      goto LABEL_11;
    }
  }
  else
  {
    v6 = *(_QWORD *)(v4 + 8 * (a2 ^ 1));
  }
  if (v6)
    v7 = v6 == v5;
  else
    v7 = 0;
  if (v7)
    goto LABEL_10;
LABEL_11:
  v9 = *(google::protobuf::internal::ArenaImpl **)(a1 + 40);
  if (v9)
  {
    if (*((_QWORD *)v9 + 14))
      google::protobuf::Arena::OnArenaAllocation(*(_QWORD *)(a1 + 40), MEMORY[0x1E0DE4EE8], 32);
    Aligned = (_QWORD *)google::protobuf::internal::ArenaImpl::AllocateAligned(v9, 0x20uLL);
  }
  else
  {
    Aligned = operator new(0x20uLL);
  }
  v11 = (uint64_t)Aligned;
  v26.__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 40);
  v12 = v26.__r_.__value_.__r.__words[2];
  v27 = 0;
  v26.__r_.__value_.__r.__words[0] = (std::string::size_type)&v26.__r_.__value_.__l.__size_;
  v26.__r_.__value_.__l.__size_ = 0;
  Aligned[1] = 0;
  v13 = (uint64_t)(Aligned + 1);
  Aligned[2] = v12;
  Aligned[3] = 0;
  *Aligned = Aligned + 1;
  v14 = (std::string::__raw *)v26.__r_.__value_.__r.__words[0];
  if ((std::string::size_type *)v26.__r_.__value_.__l.__data_ != &v26.__r_.__value_.__r.__words[1])
  {
    do
    {
      v15 = *(_QWORD *)(v11 + 8);
      v16 = v13;
      if (*(_QWORD *)v11 == v13)
        goto LABEL_23;
      v17 = *(_QWORD *)(v11 + 8);
      v18 = v13;
      if (v15)
      {
        do
        {
          v16 = v17;
          v17 = *(_QWORD *)(v17 + 8);
        }
        while (v17);
      }
      else
      {
        do
        {
          v16 = *(_QWORD *)(v18 + 16);
          v7 = *(_QWORD *)v16 == v18;
          v18 = v16;
        }
        while (v7);
      }
      v19 = (_QWORD *)v14[1].__words[1];
      if (std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(*(_QWORD **)(v16 + 32), v19))
      {
LABEL_23:
        if (!v15)
        {
          v28 = v13;
          v20 = (uint64_t **)v13;
LABEL_29:
          v21 = (uint64_t *)google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::MapAllocator<std::__tree_node<std::string*,void *>>::allocate(*(google::protobuf::internal::ArenaImpl **)(v11 + 16));
          v21[4] = v14[1].__words[1];
          std::__tree<google::protobuf::MapKey *,google::protobuf::Map<google::protobuf::MapKey,google::protobuf::MapValueRef>::InnerMap::KeyCompare,google::protobuf::Map<google::protobuf::MapKey,google::protobuf::MapValueRef>::MapAllocator<google::protobuf::MapKey *>>::__insert_node_at((uint64_t **)v11, v28, v20, v21);
          goto LABEL_30;
        }
        v28 = v16;
        v20 = (uint64_t **)(v16 + 8);
      }
      else
      {
        v20 = (uint64_t **)std::__tree<std::string *,google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::InnerMap::KeyCompare,google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::MapAllocator<std::string *>>::__find_equal<std::string *>(v11, &v28, v19);
      }
      if (!*v20)
        goto LABEL_29;
LABEL_30:
      v22 = (std::string *)v14->__words[1];
      if (v22)
      {
        do
        {
          v23 = v22;
          v22 = (std::string *)v22->__r_.__value_.__r.__words[0];
        }
        while (v22);
      }
      else
      {
        do
        {
          v23 = (std::string *)v14->__words[2];
          v7 = v23->__r_.__value_.__r.__words[0] == (_QWORD)v14;
          v14 = (std::string::__raw *)v23;
        }
        while (!v7);
      }
      v14 = (std::string::__raw *)v23;
    }
    while (v23 != (std::string *)&v26.__r_.__value_.__r.__words[1]);
  }
  std::__tree<google::protobuf::MapKey *,google::protobuf::Map<google::protobuf::MapKey,google::protobuf::MapValueRef>::InnerMap::KeyCompare,google::protobuf::Map<google::protobuf::MapKey,google::protobuf::MapValueRef>::MapAllocator<google::protobuf::MapKey *>>::destroy((uint64_t)&v26, (_QWORD *)v26.__r_.__value_.__l.__size_);
  v24 = google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::InnerMap::CopyListToTree(*(_QWORD *)(a1 + 32), a2, v11);
  if (google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::InnerMap::CopyListToTree(*(_QWORD *)(a1 + 32), a2 ^ 1, v11)+ v24 != *(_QWORD *)(v11 + 24))
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)&v26, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/map.h", 852);
    v25 = google::protobuf::internal::LogMessage::operator<<(&v26, "CHECK failed: (count) == (tree->size()): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v28, (const char **)&v25->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v26.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * (a2 ^ 1)) = v11;
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * a2) = v11;
}

void sub_1BFBE5C1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t *google::protobuf::Map<std::string,std::string>::InnerMap::InsertUniqueInTree(_QWORD *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  std::string *v9;
  uint64_t v10;
  uint64_t *result;
  char v12;
  std::string v13[2];

  v8 = *(_QWORD *)(a2 + 32);
  if (*(_QWORD *)(v8 + 8 * a3) != *(_QWORD *)(v8 + 8 * (a3 ^ 1)))
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/map.h", 718);
    v9 = google::protobuf::internal::LogMessage::operator<<(v13, "CHECK failed: (table_[b]) == (table_[b ^ 1]): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v12, (const char **)&v9->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v13[0].__r_.__value_.__l.__data_);
    v8 = *(_QWORD *)(a2 + 32);
  }
  a4[4] = 0;
  v10 = *(_QWORD *)(v8 + 8 * a3);
  v13[0].__r_.__value_.__r.__words[0] = (std::string::size_type)a4;
  result = std::__tree<std::string *,google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::InnerMap::KeyCompare,google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::MapAllocator<std::string *>>::__emplace_unique_key_args<std::string *,std::string *>(v10, a4, (uint64_t *)v13);
  *a1 = result[4];
  a1[1] = a2;
  a1[2] = a3 & 0xFFFFFFFFFFFFFFFELL;
  return result;
}

void sub_1BFBE5D14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::Map<std::string,std::string>::InnerMap::Resize(_QWORD *a1, unint64_t a2)
{
  std::string *v4;
  _QWORD *v5;
  unint64_t v6;
  void *EmptyTable;
  unint64_t v8;
  std::string::size_type v9;
  std::string::size_type v10;
  unint64_t v11;
  _QWORD *v12;
  _BYTE *v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  BOOL v17;
  char v18;
  std::string v19[2];

  if (a2 <= 7)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v19, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/map.h", 769);
    v4 = google::protobuf::internal::LogMessage::operator<<(v19, "CHECK failed: (new_num_buckets) >= (kMinTableSize): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v18, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v19[0].__r_.__value_.__l.__data_);
  }
  v5 = (_QWORD *)a1[4];
  v6 = a1[1];
  a1[1] = a2;
  EmptyTable = google::protobuf::Map<std::string,std::string>::InnerMap::CreateEmptyTable((uint64_t)a1, a2);
  v8 = a1[3];
  a1[3] = a1[1];
  a1[4] = EmptyTable;
  while (v8 < v6)
  {
    v9 = v5[v8];
    if (v9)
    {
      if (v9 == v5[v8 ^ 1])
      {
        v12 = *(_QWORD **)v9;
        do
        {
          v13 = (_BYTE *)v12[4];
          v14 = google::protobuf::Map<std::string,std::string>::InnerMap::BucketNumber((uint64_t)a1, v13);
          google::protobuf::Map<std::string,std::string>::InnerMap::InsertUnique((std::string::size_type *)v19, a1, v14, (std::string::size_type)v13);
          v15 = (_QWORD *)v12[1];
          if (v15)
          {
            do
            {
              v16 = v15;
              v15 = (_QWORD *)*v15;
            }
            while (v15);
          }
          else
          {
            do
            {
              v16 = (_QWORD *)v12[2];
              v17 = *v16 == (_QWORD)v12;
              v12 = v16;
            }
            while (!v17);
          }
          v12 = v16;
        }
        while (v16 != (_QWORD *)(v9 + 8));
        ++v8;
        google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::InnerMap::DestroyTree(a1[5], (_QWORD **)v9);
      }
      else
      {
        do
        {
          v10 = *(_QWORD *)(v9 + 32);
          v11 = google::protobuf::Map<std::string,std::string>::InnerMap::BucketNumber((uint64_t)a1, (_BYTE *)v9);
          google::protobuf::Map<std::string,std::string>::InnerMap::InsertUnique((std::string::size_type *)v19, a1, v11, v9);
          v9 = v10;
        }
        while (v10);
      }
    }
    ++v8;
  }
  if (!a1[5])
    operator delete(v5);
}

void sub_1BFBE5EB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void *google::protobuf::Map<std::string,std::string>::InnerMap::CreateEmptyTable(uint64_t a1, unint64_t a2)
{
  std::string *v4;
  std::string *v5;
  google::protobuf::internal::ArenaImpl *v6;
  uint64_t v7;
  void *Aligned;
  void *v9;
  char v11;
  std::string v12[2];

  if (a2 <= 7)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v12, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/map.h", 930);
    v4 = google::protobuf::internal::LogMessage::operator<<(v12, "CHECK failed: n >= kMinTableSize: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v11, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v12[0].__r_.__value_.__l.__data_);
  }
  if ((a2 & (a2 - 1)) != 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v12, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/map.h", 931);
    v5 = google::protobuf::internal::LogMessage::operator<<(v12, "CHECK failed: (n & (n - 1)) == (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v11, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v12[0].__r_.__value_.__l.__data_);
  }
  v6 = *(google::protobuf::internal::ArenaImpl **)(a1 + 40);
  v7 = 8 * a2;
  if (v6)
  {
    if (*((_QWORD *)v6 + 14))
      google::protobuf::Arena::OnArenaAllocation((uint64_t)v6, MEMORY[0x1E0DE4EE8], v7);
    Aligned = (void *)google::protobuf::internal::ArenaImpl::AllocateAligned(v6, v7);
  }
  else
  {
    Aligned = operator new(v7);
  }
  v9 = Aligned;
  bzero(Aligned, v7);
  return v9;
}

void sub_1BFBE5FD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

BOOL siri::dialogengine::WritePatternSchemaYAML(siri::dialogengine::PatternSchema **a1, std::string *a2)
{
  siri::dialogengine::PatternSchema *v3;
  __int128 v4;
  std::string *v5;
  std::string *v6;
  std::string::size_type size;
  std::string *v8;
  std::string *v9;
  std::string::size_type v10;
  std::string *v11;
  std::string::size_type v12;
  std::string::size_type v13;
  uint64_t v14;
  std::string::size_type v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  std::string::size_type v20;
  uint64_t v21;
  uint64_t v22;
  std::string *v23;
  std::string *v24;
  BOOL v25;
  std::string::size_type v26;
  std::string::size_type v27;
  uint64_t v28;
  uint64_t v29;
  std::string *v30;
  std::string *v31;
  std::string::size_type v32;
  std::string::size_type v33;
  uint64_t v34;
  uint64_t v35;
  std::string *v36;
  std::string *v37;
  __int128 v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  __int128 v42;
  std::string::size_type v43;
  std::string::size_type v44;
  std::string::size_type v45;
  __int128 v46;
  __int128 v47;
  std::string::size_type v48;
  char *i;
  __int128 v50;
  std::__shared_weak_count *v51;
  int v52;
  unint64_t *v53;
  unint64_t v54;
  std::string::size_type *v55;
  std::string::size_type v56;
  std::__shared_weak_count *v57;
  unint64_t *p_shared_owners;
  unint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  unsigned int v62;
  char *v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  __int128 v67;
  _BOOL8 v68;
  char *v69;
  std::string *v70;
  __int128 v71;
  __int128 v72;
  std::string *v73;
  uint64_t v76;
  std::__shared_weak_count *v77;
  _QWORD *v78;
  _QWORD *v79;
  uint64_t v80;
  char *__s;
  uint64_t v82;
  uint64_t v83;
  std::string v84;
  std::string v85;
  std::string *v86;

  YAML::Emitter::Emitter((YAML::Emitter *)&v80);
  if (*(_BYTE *)v80)
    YAML::Emitter::EmitBeginMap((YAML::Emitter *)&v80);
  std::string::basic_string[abi:ne180100]<0>(&v85, "name");
  YAML::Emitter::Write((uint64_t)&v80, (char *)&v85);
  if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v85.__r_.__value_.__l.__data_);
  v3 = *a1;
  if (*((char *)*a1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v85, *(const std::string::value_type **)v3, *((_QWORD *)v3 + 1));
  }
  else
  {
    v4 = *(_OWORD *)v3;
    v85.__r_.__value_.__r.__words[2] = *((_QWORD *)v3 + 2);
    *(_OWORD *)&v85.__r_.__value_.__l.__data_ = v4;
  }
  YAML::Emitter::Write((uint64_t)&v80, (char *)&v85);
  if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v85.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v85, "description");
  YAML::Emitter::Write((uint64_t)&v80, (char *)&v85);
  if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v85.__r_.__value_.__l.__data_);
  v5 = (std::string *)*a1;
  if (*((char *)*a1 + 71) < 0)
    std::string::__init_copy_ctor_external(&v85, v5[2].__r_.__value_.__l.__data_, v5[2].__r_.__value_.__l.__size_);
  else
    v85 = v5[2];
  YAML::Emitter::Write((uint64_t)&v80, (char *)&v85);
  if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v85.__r_.__value_.__l.__data_);
  v6 = (std::string *)*a1;
  if (*((char *)*a1 + 95) < 0)
    std::string::__init_copy_ctor_external(&v85, v6[3].__r_.__value_.__l.__data_, v6[3].__r_.__value_.__l.__size_);
  else
    v85 = v6[3];
  if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
  {
    size = v85.__r_.__value_.__l.__size_;
    operator delete(v85.__r_.__value_.__l.__data_);
    if (!size)
      goto LABEL_31;
  }
  else if (!*((_BYTE *)&v85.__r_.__value_.__s + 23))
  {
    goto LABEL_31;
  }
  std::string::basic_string[abi:ne180100]<0>(&v85, "deprecated");
  YAML::Emitter::Write((uint64_t)&v80, (char *)&v85);
  if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v85.__r_.__value_.__l.__data_);
  v8 = (std::string *)*a1;
  if (*((char *)*a1 + 95) < 0)
    std::string::__init_copy_ctor_external(&v85, v8[3].__r_.__value_.__l.__data_, v8[3].__r_.__value_.__l.__size_);
  else
    v85 = v8[3];
  YAML::Emitter::Write((uint64_t)&v80, (char *)&v85);
  if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v85.__r_.__value_.__l.__data_);
LABEL_31:
  v9 = (std::string *)*a1;
  if (*((char *)*a1 + 119) < 0)
    std::string::__init_copy_ctor_external(&v85, v9[4].__r_.__value_.__l.__data_, v9[4].__r_.__value_.__l.__size_);
  else
    v85 = v9[4];
  if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
  {
    v10 = v85.__r_.__value_.__l.__size_;
    operator delete(v85.__r_.__value_.__l.__data_);
    if (!v10)
      goto LABEL_45;
  }
  else if (!*((_BYTE *)&v85.__r_.__value_.__s + 23))
  {
    goto LABEL_45;
  }
  std::string::basic_string[abi:ne180100]<0>(&v85, "versionAdded");
  YAML::Emitter::Write((uint64_t)&v80, (char *)&v85);
  if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v85.__r_.__value_.__l.__data_);
  v11 = (std::string *)*a1;
  if (*((char *)*a1 + 119) < 0)
    std::string::__init_copy_ctor_external(&v85, v11[4].__r_.__value_.__l.__data_, v11[4].__r_.__value_.__l.__size_);
  else
    v85 = v11[4];
  YAML::Emitter::Write((uint64_t)&v80, (char *)&v85);
  if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v85.__r_.__value_.__l.__data_);
LABEL_45:
  if (*(_BYTE *)v80)
    YAML::Emitter::EmitNewline((YAML::Emitter *)&v80);
  siri::dialogengine::PatternSchema::GetSettings(*a1, (uint64_t)&v85);
  v12 = v85.__r_.__value_.__r.__words[2];
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy((_QWORD *)v85.__r_.__value_.__l.__size_);
  if (v12)
  {
    std::string::basic_string[abi:ne180100]<0>(&v85, "settings");
    YAML::Emitter::Write((uint64_t)&v80, (char *)&v85);
    if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v85.__r_.__value_.__l.__data_);
    if (*(_BYTE *)v80)
      YAML::Emitter::EmitBeginMap((YAML::Emitter *)&v80);
    siri::dialogengine::PatternSchema::GetSettings(*a1, (uint64_t)&v84);
    v13 = v84.__r_.__value_.__r.__words[0];
    if ((std::string::size_type *)v84.__r_.__value_.__l.__data_ != &v84.__r_.__value_.__r.__words[1])
    {
      do
      {
        YAML::Emitter::Write((uint64_t)&v80, (char *)(v13 + 32));
        if (*(_BYTE *)v80)
          YAML::Emitter::EmitBeginMap((YAML::Emitter *)&v80);
        v14 = *(_QWORD *)(v13 + 56);
        if (*(char *)(v14 + 151) < 0)
          std::string::__init_copy_ctor_external(&v85, *(const std::string::value_type **)(v14 + 128), *(_QWORD *)(v14 + 136));
        else
          v85 = *(std::string *)(v14 + 128);
        if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
        {
          v15 = v85.__r_.__value_.__l.__size_;
          operator delete(v85.__r_.__value_.__l.__data_);
          if (!v15)
            goto LABEL_69;
        }
        else if (!*((_BYTE *)&v85.__r_.__value_.__s + 23))
        {
          goto LABEL_69;
        }
        std::string::basic_string[abi:ne180100]<0>(&v85, "deprecated");
        YAML::Emitter::Write((uint64_t)&v80, (char *)&v85);
        if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v85.__r_.__value_.__l.__data_);
        v16 = *(_QWORD *)(v13 + 56);
        if (*(char *)(v16 + 151) < 0)
          std::string::__init_copy_ctor_external(&v85, *(const std::string::value_type **)(v16 + 128), *(_QWORD *)(v16 + 136));
        else
          v85 = *(std::string *)(v16 + 128);
        YAML::Emitter::Write((uint64_t)&v80, (char *)&v85);
        if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v85.__r_.__value_.__l.__data_);
LABEL_69:
        std::string::basic_string[abi:ne180100]<0>(&v85, "type");
        YAML::Emitter::Write((uint64_t)&v80, (char *)&v85);
        if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v85.__r_.__value_.__l.__data_);
        v17 = *(_QWORD *)(v13 + 56);
        if (*(char *)(v17 + 55) < 0)
          std::string::__init_copy_ctor_external(&v85, *(const std::string::value_type **)(v17 + 32), *(_QWORD *)(v17 + 40));
        else
          v85 = *(std::string *)(v17 + 32);
        YAML::Emitter::Write((uint64_t)&v80, (char *)&v85);
        if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v85.__r_.__value_.__l.__data_);
        std::string::basic_string[abi:ne180100]<0>(&v85, "description");
        YAML::Emitter::Write((uint64_t)&v80, (char *)&v85);
        if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v85.__r_.__value_.__l.__data_);
        v18 = *(_QWORD *)(v13 + 56);
        if (*(char *)(v18 + 79) < 0)
          std::string::__init_copy_ctor_external(&v85, *(const std::string::value_type **)(v18 + 56), *(_QWORD *)(v18 + 64));
        else
          v85 = *(std::string *)(v18 + 56);
        YAML::Emitter::Write((uint64_t)&v80, (char *)&v85);
        if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v85.__r_.__value_.__l.__data_);
        v19 = *(_QWORD *)(v13 + 56);
        if (*(_BYTE *)(v19 + 233))
        {
          std::string::basic_string[abi:ne180100]<0>(&v85, "overridable");
          YAML::Emitter::Write((uint64_t)&v80, (char *)&v85);
          if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v85.__r_.__value_.__l.__data_);
          std::string::basic_string[abi:ne180100]<0>(&v85, "true");
          YAML::Emitter::Write((uint64_t)&v80, (char *)&v85);
          if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v85.__r_.__value_.__l.__data_);
          v19 = *(_QWORD *)(v13 + 56);
        }
        if (*(char *)(v19 + 359) < 0)
          std::string::__init_copy_ctor_external(&v85, *(const std::string::value_type **)(v19 + 336), *(_QWORD *)(v19 + 344));
        else
          v85 = *(std::string *)(v19 + 336);
        if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
        {
          v20 = v85.__r_.__value_.__l.__size_;
          operator delete(v85.__r_.__value_.__l.__data_);
          if (v20)
          {
LABEL_96:
            std::string::basic_string[abi:ne180100]<0>(&v85, "defaultValueFromSetting");
            YAML::Emitter::Write((uint64_t)&v80, (char *)&v85);
            if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v85.__r_.__value_.__l.__data_);
            v21 = *(_QWORD *)(v13 + 56);
            if (*(char *)(v21 + 359) < 0)
              std::string::__init_copy_ctor_external(&v85, *(const std::string::value_type **)(v21 + 336), *(_QWORD *)(v21 + 344));
            else
              v85 = *(std::string *)(v21 + 336);
            YAML::Emitter::Write((uint64_t)&v80, (char *)&v85);
            if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v85.__r_.__value_.__l.__data_);
          }
        }
        else if (*((_BYTE *)&v85.__r_.__value_.__s + 23))
        {
          goto LABEL_96;
        }
        std::string::basic_string[abi:ne180100]<0>(&v85, "defaultValue");
        YAML::Emitter::Write((uint64_t)&v80, (char *)&v85);
        if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v85.__r_.__value_.__l.__data_);
        v22 = *(_QWORD *)(v13 + 56);
        if (*(char *)(v22 + 231) < 0)
          std::string::__init_copy_ctor_external(&v85, *(const std::string::value_type **)(v22 + 208), *(_QWORD *)(v22 + 216));
        else
          v85 = *(std::string *)(v22 + 208);
        YAML::Emitter::Write((uint64_t)&v80, (char *)&v85);
        if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v85.__r_.__value_.__l.__data_);
        if (*(_BYTE *)v80)
          YAML::Emitter::EmitEndMap((YAML::Emitter *)&v80);
        v23 = *(std::string **)(v13 + 8);
        if (v23)
        {
          do
          {
            v24 = v23;
            v23 = (std::string *)v23->__r_.__value_.__r.__words[0];
          }
          while (v23);
        }
        else
        {
          do
          {
            v24 = *(std::string **)(v13 + 16);
            v25 = v24->__r_.__value_.__r.__words[0] == v13;
            v13 = (std::string::size_type)v24;
          }
          while (!v25);
        }
        v13 = (std::string::size_type)v24;
      }
      while (v24 != (std::string *)&v84.__r_.__value_.__r.__words[1]);
    }
    std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy((_QWORD *)v84.__r_.__value_.__l.__size_);
    if (*(_BYTE *)v80)
      YAML::Emitter::EmitEndMap((YAML::Emitter *)&v80);
  }
  std::map<std::string,std::shared_ptr<siri::dialogengine::Parameter>>::map[abi:ne180100]((uint64_t)&v85, (const void ***)*a1 + 18);
  v26 = v85.__r_.__value_.__r.__words[2];
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy((_QWORD *)v85.__r_.__value_.__l.__size_);
  if (v26)
  {
    std::string::basic_string[abi:ne180100]<0>(&v85, "requiredParameters");
    YAML::Emitter::Write((uint64_t)&v80, (char *)&v85);
    if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v85.__r_.__value_.__l.__data_);
    if (*(_BYTE *)v80)
      YAML::Emitter::EmitBeginMap((YAML::Emitter *)&v80);
    std::map<std::string,std::shared_ptr<siri::dialogengine::Parameter>>::map[abi:ne180100]((uint64_t)&v84, (const void ***)*a1 + 18);
    v27 = v84.__r_.__value_.__r.__words[0];
    if ((std::string::size_type *)v84.__r_.__value_.__l.__data_ != &v84.__r_.__value_.__r.__words[1])
    {
      do
      {
        YAML::Emitter::Write((uint64_t)&v80, (char *)(v27 + 32));
        if (*(_BYTE *)v80)
          YAML::Emitter::EmitBeginMap((YAML::Emitter *)&v80);
        std::string::basic_string[abi:ne180100]<0>(&v85, "type");
        YAML::Emitter::Write((uint64_t)&v80, (char *)&v85);
        if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v85.__r_.__value_.__l.__data_);
        v28 = *(_QWORD *)(v27 + 56);
        if (*(char *)(v28 + 55) < 0)
          std::string::__init_copy_ctor_external(&v85, *(const std::string::value_type **)(v28 + 32), *(_QWORD *)(v28 + 40));
        else
          v85 = *(std::string *)(v28 + 32);
        YAML::Emitter::Write((uint64_t)&v80, (char *)&v85);
        if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v85.__r_.__value_.__l.__data_);
        std::string::basic_string[abi:ne180100]<0>(&v85, "description");
        YAML::Emitter::Write((uint64_t)&v80, (char *)&v85);
        if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v85.__r_.__value_.__l.__data_);
        v29 = *(_QWORD *)(v27 + 56);
        if (*(char *)(v29 + 79) < 0)
          std::string::__init_copy_ctor_external(&v85, *(const std::string::value_type **)(v29 + 56), *(_QWORD *)(v29 + 64));
        else
          v85 = *(std::string *)(v29 + 56);
        YAML::Emitter::Write((uint64_t)&v80, (char *)&v85);
        if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v85.__r_.__value_.__l.__data_);
        if (*(_BYTE *)v80)
          YAML::Emitter::EmitEndMap((YAML::Emitter *)&v80);
        v30 = *(std::string **)(v27 + 8);
        if (v30)
        {
          do
          {
            v31 = v30;
            v30 = (std::string *)v30->__r_.__value_.__r.__words[0];
          }
          while (v30);
        }
        else
        {
          do
          {
            v31 = *(std::string **)(v27 + 16);
            v25 = v31->__r_.__value_.__r.__words[0] == v27;
            v27 = (std::string::size_type)v31;
          }
          while (!v25);
        }
        v27 = (std::string::size_type)v31;
      }
      while (v31 != (std::string *)&v84.__r_.__value_.__r.__words[1]);
    }
    std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy((_QWORD *)v84.__r_.__value_.__l.__size_);
    if (*(_BYTE *)v80)
      YAML::Emitter::EmitEndMap((YAML::Emitter *)&v80);
  }
  std::map<std::string,std::shared_ptr<siri::dialogengine::Parameter>>::map[abi:ne180100]((uint64_t)&v85, (const void ***)*a1 + 21);
  v32 = v85.__r_.__value_.__r.__words[2];
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy((_QWORD *)v85.__r_.__value_.__l.__size_);
  if (v32)
  {
    std::string::basic_string[abi:ne180100]<0>(&v85, "computedParameters");
    YAML::Emitter::Write((uint64_t)&v80, (char *)&v85);
    if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v85.__r_.__value_.__l.__data_);
    if (*(_BYTE *)v80)
      YAML::Emitter::EmitBeginMap((YAML::Emitter *)&v80);
    std::map<std::string,std::shared_ptr<siri::dialogengine::Parameter>>::map[abi:ne180100]((uint64_t)&v84, (const void ***)*a1 + 21);
    v33 = v84.__r_.__value_.__r.__words[0];
    if ((std::string::size_type *)v84.__r_.__value_.__l.__data_ != &v84.__r_.__value_.__r.__words[1])
    {
      do
      {
        YAML::Emitter::Write((uint64_t)&v80, (char *)(v33 + 32));
        if (*(_BYTE *)v80)
          YAML::Emitter::EmitBeginMap((YAML::Emitter *)&v80);
        std::string::basic_string[abi:ne180100]<0>(&v85, "type");
        YAML::Emitter::Write((uint64_t)&v80, (char *)&v85);
        if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v85.__r_.__value_.__l.__data_);
        v34 = *(_QWORD *)(v33 + 56);
        if (*(char *)(v34 + 55) < 0)
          std::string::__init_copy_ctor_external(&v85, *(const std::string::value_type **)(v34 + 32), *(_QWORD *)(v34 + 40));
        else
          v85 = *(std::string *)(v34 + 32);
        YAML::Emitter::Write((uint64_t)&v80, (char *)&v85);
        if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v85.__r_.__value_.__l.__data_);
        std::string::basic_string[abi:ne180100]<0>(&v85, "description");
        YAML::Emitter::Write((uint64_t)&v80, (char *)&v85);
        if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v85.__r_.__value_.__l.__data_);
        v35 = *(_QWORD *)(v33 + 56);
        if (*(char *)(v35 + 79) < 0)
          std::string::__init_copy_ctor_external(&v85, *(const std::string::value_type **)(v35 + 56), *(_QWORD *)(v35 + 64));
        else
          v85 = *(std::string *)(v35 + 56);
        YAML::Emitter::Write((uint64_t)&v80, (char *)&v85);
        if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v85.__r_.__value_.__l.__data_);
        if (*(_BYTE *)v80)
          YAML::Emitter::EmitEndMap((YAML::Emitter *)&v80);
        v36 = *(std::string **)(v33 + 8);
        if (v36)
        {
          do
          {
            v37 = v36;
            v36 = (std::string *)v36->__r_.__value_.__r.__words[0];
          }
          while (v36);
        }
        else
        {
          do
          {
            v37 = *(std::string **)(v33 + 16);
            v25 = v37->__r_.__value_.__r.__words[0] == v33;
            v33 = (std::string::size_type)v37;
          }
          while (!v25);
        }
        v33 = (std::string::size_type)v37;
      }
      while (v37 != (std::string *)&v84.__r_.__value_.__r.__words[1]);
    }
    std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy((_QWORD *)v84.__r_.__value_.__l.__size_);
    if (*(_BYTE *)v80)
      YAML::Emitter::EmitEndMap((YAML::Emitter *)&v80);
  }
  siri::dialogengine::PatternSchema::GetGroups((char *)*a1, &v85);
  v38 = *(_OWORD *)&v85.__r_.__value_.__l.__data_;
  v84.__r_.__value_.__r.__words[0] = (std::string::size_type)&v85;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v84);
  if (*((_QWORD *)&v38 + 1) != (_QWORD)v38)
  {
    std::string::basic_string[abi:ne180100]<0>(&v85, "groups");
    YAML::Emitter::Write((uint64_t)&v80, (char *)&v85);
    if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v85.__r_.__value_.__l.__data_);
    if (*(_BYTE *)v80)
      YAML::Emitter::EmitBeginMap((YAML::Emitter *)&v80);
    siri::dialogengine::PatternSchema::GetGroups((char *)*a1, &v78);
    v39 = v78;
    v40 = v79;
    if (v78 != v79)
    {
      while (1)
      {
        v41 = *v39;
        if (*(char *)(*v39 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(&v85, *(const std::string::value_type **)(v41 + 8), *(_QWORD *)(v41 + 16));
        }
        else
        {
          v42 = *(_OWORD *)(v41 + 8);
          v85.__r_.__value_.__r.__words[2] = *(_QWORD *)(v41 + 24);
          *(_OWORD *)&v85.__r_.__value_.__l.__data_ = v42;
        }
        YAML::Emitter::Write((uint64_t)&v80, (char *)&v85);
        if (*(_BYTE *)v80)
          YAML::Emitter::EmitBeginMap((YAML::Emitter *)&v80);
        if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v85.__r_.__value_.__l.__data_);
        if (!(*(unsigned int (**)(_QWORD))(*(_QWORD *)*v39 + 16))(*v39))
          break;
        std::string::basic_string[abi:ne180100]<0>(&v85, "aliasOf");
        YAML::Emitter::Write((uint64_t)&v80, (char *)&v85);
        if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v85.__r_.__value_.__l.__data_);
        (*(void (**)(std::string *__return_ptr))(*(_QWORD *)*v39 + 24))(&v85);
        YAML::Emitter::Write((uint64_t)&v80, (char *)&v85);
        if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v85.__r_.__value_.__l.__data_);
LABEL_289:
        if (*(_BYTE *)v80)
          YAML::Emitter::EmitEndMap((YAML::Emitter *)&v80);
        v39 += 2;
        if (v39 == v40)
          goto LABEL_292;
      }
      (*(void (**)(std::string *__return_ptr))(*(_QWORD *)*v39 + 32))(&v85);
      if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
      {
        v43 = v85.__r_.__value_.__l.__size_;
        operator delete(v85.__r_.__value_.__l.__data_);
        if (!v43)
          goto LABEL_210;
      }
      else if (!*((_BYTE *)&v85.__r_.__value_.__s + 23))
      {
        goto LABEL_210;
      }
      std::string::basic_string[abi:ne180100]<0>(&v85, "description");
      YAML::Emitter::Write((uint64_t)&v80, (char *)&v85);
      if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v85.__r_.__value_.__l.__data_);
      (*(void (**)(std::string *__return_ptr))(*(_QWORD *)*v39 + 32))(&v85);
      YAML::Emitter::Write((uint64_t)&v80, (char *)&v85);
      if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v85.__r_.__value_.__l.__data_);
LABEL_210:
      (*(void (**)(std::string *__return_ptr))(*(_QWORD *)*v39 + 96))(&v85);
      if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
      {
        v44 = v85.__r_.__value_.__l.__size_;
        operator delete(v85.__r_.__value_.__l.__data_);
        if (!v44)
          goto LABEL_218;
      }
      else if (!*((_BYTE *)&v85.__r_.__value_.__s + 23))
      {
        goto LABEL_218;
      }
      std::string::basic_string[abi:ne180100]<0>(&v85, "deprecated");
      YAML::Emitter::Write((uint64_t)&v80, (char *)&v85);
      if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v85.__r_.__value_.__l.__data_);
      (*(void (**)(std::string *__return_ptr))(*(_QWORD *)*v39 + 96))(&v85);
      YAML::Emitter::Write((uint64_t)&v80, (char *)&v85);
      if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v85.__r_.__value_.__l.__data_);
LABEL_218:
      (*(void (**)(std::string *__return_ptr))(*(_QWORD *)*v39 + 104))(&v85);
      if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
      {
        v45 = v85.__r_.__value_.__l.__size_;
        operator delete(v85.__r_.__value_.__l.__data_);
        if (!v45)
          goto LABEL_226;
      }
      else if (!*((_BYTE *)&v85.__r_.__value_.__s + 23))
      {
        goto LABEL_226;
      }
      std::string::basic_string[abi:ne180100]<0>(&v85, "replacementName");
      YAML::Emitter::Write((uint64_t)&v80, (char *)&v85);
      if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v85.__r_.__value_.__l.__data_);
      (*(void (**)(std::string *__return_ptr))(*(_QWORD *)*v39 + 104))(&v85);
      YAML::Emitter::Write((uint64_t)&v80, (char *)&v85);
      if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v85.__r_.__value_.__l.__data_);
LABEL_226:
      (*(void (**)(std::string *__return_ptr))(*(_QWORD *)*v39 + 40))(&v85);
      v46 = *(_OWORD *)&v85.__r_.__value_.__l.__data_;
      v84.__r_.__value_.__r.__words[0] = (std::string::size_type)&v85;
      std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v84);
      if (*((_QWORD *)&v46 + 1) != (_QWORD)v46)
      {
        (*(void (**)(std::string *__return_ptr))(*(_QWORD *)*v39 + 40))(&v85);
        siri::dialogengine::WritePatternUsagesYAML((YAML::Emitter *)&v80, (uint64_t **)&v85);
        v84.__r_.__value_.__r.__words[0] = (std::string::size_type)&v85;
        std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v84);
      }
      if (*(_BYTE *)v80)
        YAML::Emitter::EmitNewline((YAML::Emitter *)&v80);
      (*(void (**)(std::string *__return_ptr))(*(_QWORD *)*v39 + 48))(&v85);
      v47 = *(_OWORD *)&v85.__r_.__value_.__l.__data_;
      v84.__r_.__value_.__r.__words[0] = (std::string::size_type)&v85;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v84);
      if (*((_QWORD *)&v47 + 1) != (_QWORD)v47)
      {
        std::string::basic_string[abi:ne180100]<0>(&v85, "nestedPatterns");
        YAML::Emitter::Write((uint64_t)&v80, (char *)&v85);
        if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v85.__r_.__value_.__l.__data_);
        if (*(_BYTE *)v80)
          YAML::Emitter::EmitBeginSeq((YAML::Emitter *)&v80);
        (*(void (**)(std::string *__return_ptr))(*(_QWORD *)*v39 + 48))(&v85);
        v48 = v85.__r_.__value_.__l.__size_;
        for (i = (char *)v85.__r_.__value_.__r.__words[0]; i != (char *)v48; i += 24)
          YAML::Emitter::Write((uint64_t)&v80, i);
        v84.__r_.__value_.__r.__words[0] = (std::string::size_type)&v85;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v84);
        if (*(_BYTE *)v80)
          YAML::Emitter::EmitEndSeq((YAML::Emitter *)&v80);
      }
      (*(void (**)(std::string *__return_ptr))(*(_QWORD *)*v39 + 56))(&v85);
      v50 = *(_OWORD *)&v85.__r_.__value_.__l.__data_;
      v84.__r_.__value_.__r.__words[0] = (std::string::size_type)&v85;
      std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v84);
      if (*((_QWORD *)&v50 + 1) != (_QWORD)v50)
      {
        if (*(_BYTE *)v80)
          YAML::Emitter::EmitNewline((YAML::Emitter *)&v80);
        std::string::basic_string[abi:ne180100]<0>(&v85, "dialogComponents");
        YAML::Emitter::Write((uint64_t)&v80, (char *)&v85);
        if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v85.__r_.__value_.__l.__data_);
        if (*(_BYTE *)v80)
          YAML::Emitter::EmitBeginMap((YAML::Emitter *)&v80);
        (*(void (**)(std::string *__return_ptr))(*(_QWORD *)*v39 + 56))(&v85);
        siri::dialogengine::WriteComponentsYAML((YAML::Emitter *)&v80, (__int128 **)v85.__r_.__value_.__l.__data_, (__int128 **)v85.__r_.__value_.__l.__size_);
        v84.__r_.__value_.__r.__words[0] = (std::string::size_type)&v85;
        std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v84);
      }
      (*(void (**)(std::string *__return_ptr))(*(_QWORD *)*v39 + 88))(&v85);
      v51 = (std::__shared_weak_count *)v85.__r_.__value_.__l.__size_;
      v52 = *(_DWORD *)v85.__r_.__value_.__l.__data_;
      if (!v85.__r_.__value_.__l.__size_)
        goto LABEL_252;
      v53 = (unint64_t *)(v85.__r_.__value_.__l.__size_ + 8);
      do
        v54 = __ldaxr(v53);
      while (__stlxr(v54 - 1, v53));
      if (!v54)
      {
        ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
        std::__shared_weak_count::__release_weak(v51);
        if (v52)
          goto LABEL_253;
      }
      else
      {
LABEL_252:
        if (v52)
        {
LABEL_253:
          (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*v39 + 88))(&v76);
          memset(&v84, 0, sizeof(v84));
          std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>*,std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>*>(&v84, *(_QWORD **)(v76 + 8), *(_QWORD **)(v76 + 16), (uint64_t)(*(_QWORD *)(v76 + 16) - *(_QWORD *)(v76 + 8)) >> 4);
          std::string::basic_string[abi:ne180100]<0>(&v85, "visualComponentsCombination");
          YAML::Emitter::Write((uint64_t)&v80, (char *)&v85);
          if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v85.__r_.__value_.__l.__data_);
          v56 = v84.__r_.__value_.__l.__size_;
          v55 = (std::string::size_type *)v84.__r_.__value_.__r.__words[0];
          if (v84.__r_.__value_.__l.__size_ == v84.__r_.__value_.__r.__words[0])
          {
            v62 = *(_DWORD *)v76 - 1;
            v63 = "";
            if (v62 <= 2)
              v63 = off_1E792A148[v62];
            std::string::basic_string[abi:ne180100]<0>(&v85, v63);
            YAML::Emitter::Write((uint64_t)&v80, (char *)&v85);
            if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v85.__r_.__value_.__l.__data_);
          }
          else
          {
            if (*(_BYTE *)v80)
            {
              YAML::Emitter::EmitBeginSeq((YAML::Emitter *)&v80);
              v56 = v84.__r_.__value_.__l.__size_;
              v55 = (std::string::size_type *)v84.__r_.__value_.__r.__words[0];
            }
            while (v55 != (std::string::size_type *)v56)
            {
              v57 = (std::__shared_weak_count *)v55[1];
              v85.__r_.__value_.__r.__words[0] = *v55;
              v85.__r_.__value_.__l.__size_ = (std::string::size_type)v57;
              if (v57)
              {
                p_shared_owners = (unint64_t *)&v57->__shared_owners_;
                do
                  v59 = __ldxr(p_shared_owners);
                while (__stxr(v59 + 1, p_shared_owners));
              }
              siri::dialogengine::WriteCustomCombinationYAML((YAML::Emitter *)&v80, (int **)&v85);
              if (v57)
              {
                v60 = (unint64_t *)&v57->__shared_owners_;
                do
                  v61 = __ldaxr(v60);
                while (__stlxr(v61 - 1, v60));
                if (!v61)
                {
                  ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
                  std::__shared_weak_count::__release_weak(v57);
                }
              }
              v55 += 2;
            }
            if (*(_BYTE *)v80)
              YAML::Emitter::EmitEndSeq((YAML::Emitter *)&v80);
          }
          v86 = &v84;
          std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v86);
          v64 = v77;
          if (v77)
          {
            v65 = (unint64_t *)&v77->__shared_owners_;
            do
              v66 = __ldaxr(v65);
            while (__stlxr(v66 - 1, v65));
            if (!v66)
            {
              ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
              std::__shared_weak_count::__release_weak(v64);
            }
          }
        }
      }
      (*(void (**)(std::string *__return_ptr))(*(_QWORD *)*v39 + 72))(&v85);
      v67 = *(_OWORD *)&v85.__r_.__value_.__l.__data_;
      v84.__r_.__value_.__r.__words[0] = (std::string::size_type)&v85;
      std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v84);
      if (*((_QWORD *)&v67 + 1) != (_QWORD)v67)
      {
        if (*(_BYTE *)v80)
          YAML::Emitter::EmitNewline((YAML::Emitter *)&v80);
        std::string::basic_string[abi:ne180100]<0>(&v85, "visualComponents");
        YAML::Emitter::Write((uint64_t)&v80, (char *)&v85);
        if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v85.__r_.__value_.__l.__data_);
        if (*(_BYTE *)v80)
          YAML::Emitter::EmitBeginMap((YAML::Emitter *)&v80);
        (*(void (**)(std::string *__return_ptr))(*(_QWORD *)*v39 + 72))(&v85);
        siri::dialogengine::WriteComponentsYAML((YAML::Emitter *)&v80, (__int128 **)v85.__r_.__value_.__l.__data_, (__int128 **)v85.__r_.__value_.__l.__size_);
        v84.__r_.__value_.__r.__words[0] = (std::string::size_type)&v85;
        std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v84);
      }
      goto LABEL_289;
    }
LABEL_292:
    v85.__r_.__value_.__r.__words[0] = (std::string::size_type)&v78;
    std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v85);
    if (!*(_BYTE *)v80)
      goto LABEL_298;
    YAML::Emitter::EmitEndMap((YAML::Emitter *)&v80);
  }
  if (!*(_BYTE *)v80)
  {
LABEL_298:
    v68 = 0;
    goto LABEL_299;
  }
  YAML::Emitter::EmitEndMap((YAML::Emitter *)&v80);
  v68 = *(_BYTE *)v80 != 0;
  if (*(_BYTE *)v80)
  {
    if (v82)
    {
      v69 = 0;
    }
    else
    {
      __s[v83] = 0;
      v69 = __s;
    }
    std::string::basic_string[abi:ne180100]<0>(&v85, v69);
    siri::dialogengine::WriteFileFromString(a2, (uint64_t)&v85);
    goto LABEL_311;
  }
LABEL_299:
  std::operator+<char>();
  v70 = std::string::append(&v84, " to YAML...");
  v71 = *(_OWORD *)&v70->__r_.__value_.__l.__data_;
  v85.__r_.__value_.__r.__words[2] = v70->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v85.__r_.__value_.__l.__data_ = v71;
  v70->__r_.__value_.__l.__size_ = 0;
  v70->__r_.__value_.__r.__words[2] = 0;
  v70->__r_.__value_.__r.__words[0] = 0;
  siri::dialogengine::Log::LogWithLevel((uint64_t)&v85, 3u);
  if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v85.__r_.__value_.__l.__data_);
  if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v84.__r_.__value_.__l.__data_);
  if (*(char *)(v80 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v85, *(const std::string::value_type **)(v80 + 8), *(_QWORD *)(v80 + 16));
  }
  else
  {
    v72 = *(_OWORD *)(v80 + 8);
    v85.__r_.__value_.__r.__words[2] = *(_QWORD *)(v80 + 24);
    *(_OWORD *)&v85.__r_.__value_.__l.__data_ = v72;
  }
  v73 = &v85;
  if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v73 = (std::string *)v85.__r_.__value_.__r.__words[0];
  printf("YAML error: %s\n", (const char *)v73);
LABEL_311:
  if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v85.__r_.__value_.__l.__data_);
  YAML::Emitter::~Emitter((YAML::Emitter *)&v80);
  return v68;
}

void sub_1BFBE7410(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  YAML::Emitter::~Emitter((YAML::Emitter *)va);
  _Unwind_Resume(a1);
}

void siri::dialogengine::WritePatternUsagesYAML(YAML::Emitter *a1, uint64_t **a2)
{
  uint64_t v4;
  __int128 v5;
  std::string::size_type size;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  __int128 v10;
  std::string::size_type v11;
  uint64_t v12;
  __int128 v13;
  unsigned int v14;
  char *v15;
  unsigned int v16;
  char *v17;
  std::string __p;
  std::string v19;

  if ((char *)a2[1] - (char *)*a2 != 16)
    goto LABEL_10;
  v4 = **a2;
  if (*(char *)(v4 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v19, *(const std::string::value_type **)(v4 + 8), *(_QWORD *)(v4 + 16));
  }
  else
  {
    v5 = *(_OWORD *)(v4 + 8);
    v19.__r_.__value_.__r.__words[2] = *(_QWORD *)(v4 + 24);
    *(_OWORD *)&v19.__r_.__value_.__l.__data_ = v5;
  }
  if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v19.__r_.__value_.__r.__words[2]);
  else
    size = v19.__r_.__value_.__l.__size_;
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v19.__r_.__value_.__l.__data_);
    if (size)
      goto LABEL_10;
  }
  else if (size)
  {
LABEL_10:
    std::string::basic_string[abi:ne180100]<0>(&v19, "usage");
    YAML::Emitter::Write((uint64_t)a1, (char *)&v19);
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v19.__r_.__value_.__l.__data_);
    if (**(_BYTE **)a1)
      YAML::Emitter::EmitBeginMap(a1);
    v7 = *a2;
    v8 = a2[1];
    if (*a2 != v8)
    {
      do
      {
        v9 = *v7;
        if (*(char *)(*v7 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v9 + 8), *(_QWORD *)(v9 + 16));
        }
        else
        {
          v10 = *(_OWORD *)(v9 + 8);
          __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(v9 + 24);
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v10;
        }
        v11 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v11 = __p.__r_.__value_.__l.__size_;
        if (v11)
        {
          v12 = *v7;
          if (*(char *)(*v7 + 31) < 0)
          {
            std::string::__init_copy_ctor_external(&v19, *(const std::string::value_type **)(v12 + 8), *(_QWORD *)(v12 + 16));
          }
          else
          {
            v13 = *(_OWORD *)(v12 + 8);
            v19.__r_.__value_.__r.__words[2] = *(_QWORD *)(v12 + 24);
            *(_OWORD *)&v19.__r_.__value_.__l.__data_ = v13;
          }
        }
        else
        {
          std::string::basic_string[abi:ne180100]<0>(&v19, "else");
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        v14 = *(_DWORD *)*v7 - 1;
        v15 = "";
        if (v14 <= 3)
          v15 = off_1E79309B0[v14];
        std::string::basic_string[abi:ne180100]<0>(&__p, v15);
        YAML::Emitter::Write((uint64_t)a1, (char *)&__p);
        YAML::Emitter::Write((uint64_t)a1, (char *)&v19);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v19.__r_.__value_.__l.__data_);
        v7 += 2;
      }
      while (v7 != v8);
    }
    if (**(_BYTE **)a1)
      YAML::Emitter::EmitEndMap(a1);
    return;
  }
  std::string::basic_string[abi:ne180100]<0>(&v19, "usage");
  YAML::Emitter::Write((uint64_t)a1, (char *)&v19);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
  if (a2[1] == *a2)
    std::vector<std::string>::__throw_out_of_range[abi:ne180100]();
  v16 = *(_DWORD *)**a2 - 1;
  if (v16 > 3)
    v17 = "";
  else
    v17 = off_1E79309B0[v16];
  std::string::basic_string[abi:ne180100]<0>(&v19, v17);
  YAML::Emitter::Write((uint64_t)a1, (char *)&v19);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
}

void sub_1BFBE7984(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::WriteComponentsYAML(YAML::Emitter *this, __int128 **a2, __int128 **a3)
{
  __int128 **v4;
  __int128 *v5;
  __int128 v6;
  std::vector<std::string>::pointer end;
  __int128 **v8;
  __int128 v9;
  __int128 **v10;
  __int128 *size;
  __int128 *v12;
  std::string::size_type v13;
  __int128 *v14;
  __int128 **v15;
  __int128 v16;
  __int128 **v17;
  std::string::size_type v18;
  char *i;
  __int128 *v20;
  __int128 *v21;
  __int128 **v22;
  __int128 *v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 *v27;
  uint64_t v28;
  uint64_t v29;
  __int128 *v30;
  __int128 v31;
  __int128 *v32;
  std::string::size_type v33;
  _QWORD *j;
  _QWORD **v35;
  __int128 v36;
  _QWORD **v37;
  _QWORD **v38;
  __int128 v39;
  _QWORD **v40;
  std::string::size_type v41;
  char *k;
  __int128 **v43;
  __int128 v44;
  __int128 **v45;
  std::string::size_type v46;
  char *m;
  __int128 *v48;
  __int128 **v49;
  __int128 *v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  __int128 *v54;
  uint64_t v55;
  uint64_t v56;
  __int128 *v57;
  __int128 v58;
  __int128 *v59;
  std::string::size_type v60;
  _QWORD *n;
  _QWORD **v62;
  __int128 v63;
  _QWORD **v64;
  _QWORD **v65;
  __int128 v66;
  _QWORD **v67;
  std::string::size_type v68;
  char *ii;
  __int128 **v70;
  __int128 v71;
  __int128 **v72;
  std::string::size_type v73;
  char *jj;
  __int128 *v75;
  uint64_t v76;
  uint64_t v77;
  __int128 *v78;
  uint64_t v79;
  uint64_t v80;
  __int128 *v81;
  void **v82;
  char *v83;
  void *v84;
  BOOL v85;
  BOOL v86;
  __int128 *v87;
  uint64_t v88;
  uint64_t v89;
  __int128 *v90;
  uint64_t v91;
  uint64_t v92;
  __int128 *v93;
  void **v94;
  char *v95;
  void *v96;
  BOOL v97;
  BOOL v98;
  void **p_p;
  uint64_t v101;
  uint64_t v102;
  void *__p;
  char *v104;
  uint64_t v105;
  std::string v106;
  std::string v107;
  std::vector<std::string> v108;
  void ***p_p_p;
  std::string v110;
  std::string v111;
  __int128 v112;

  *(_QWORD *)&v112 = *MEMORY[0x1E0C80C00];
  memset(&v108, 0, sizeof(v108));
  if (a2 != a3)
  {
    v4 = a2;
    while (1)
    {
      v5 = *v4;
      if (*((char *)*v4 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v107, *(const std::string::value_type **)v5, *((_QWORD *)v5 + 1));
      }
      else
      {
        v6 = *v5;
        v107.__r_.__value_.__r.__words[2] = *((_QWORD *)v5 + 2);
        *(_OWORD *)&v107.__r_.__value_.__l.__data_ = v6;
      }
      end = v108.__end_;
      if ((std::vector<std::string>::pointer)std::__find_impl[abi:ne180100]<std::string *,std::string *,std::string,std::__identity>((uint64_t)v108.__begin_, (uint64_t)v108.__end_, (unsigned __int8 **)&v107) == end)break;
LABEL_152:
      if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v107.__r_.__value_.__l.__data_);
      v4 += 2;
      if (v4 == a3)
        goto LABEL_196;
    }
    v8 = (__int128 **)*v4;
    memset(&v110, 0, sizeof(v110));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v110, v8[34], v8[35], 0xAAAAAAAAAAAAAAABLL * (((char *)v8[35] - (char *)v8[34]) >> 3));
    v9 = *(_OWORD *)&v110.__r_.__value_.__l.__data_;
    v106.__r_.__value_.__r.__words[0] = (std::string::size_type)&v110;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v106);
    if (*((_QWORD *)&v9 + 1) != (_QWORD)v9)
    {
      v10 = (__int128 **)*v4;
      memset(&v110, 0, sizeof(v110));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v110, v10[34], v10[35], 0xAAAAAAAAAAAAAAABLL * (((char *)v10[35] - (char *)v10[34]) >> 3));
      if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v111, v107.__r_.__value_.__l.__data_, v107.__r_.__value_.__l.__size_);
      else
        v111 = v107;
      memset(&v106, 0, sizeof(v106));
      __p = &v106;
      LOBYTE(v104) = 0;
      v106.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
      v106.__r_.__value_.__l.__size_ = v106.__r_.__value_.__r.__words[0];
      v106.__r_.__value_.__r.__words[2] = v106.__r_.__value_.__r.__words[0] + 24;
      size = (__int128 *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v106.__r_.__value_.__r.__words[2], (__int128 *)&v111, &v112, (std::string *)v106.__r_.__value_.__l.__data_);
      v106.__r_.__value_.__l.__size_ = (std::string::size_type)size;
      if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v111.__r_.__value_.__l.__data_);
        size = (__int128 *)v106.__r_.__value_.__l.__size_;
      }
      std::vector<std::string>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::string*>,std::__wrap_iter<std::string*>>((std::vector<std::string> *)&v110, (std::string *)v110.__r_.__value_.__l.__data_, (std::string *)v106.__r_.__value_.__l.__data_, size, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)size - v106.__r_.__value_.__r.__words[0]) >> 3));
      std::string::basic_string[abi:ne180100]<0>(&__p, ", ");
      siri::dialogengine::StringJoinInternal<std::vector<std::string>>((uint64_t)&v111, (uint64_t)v110.__r_.__value_.__l.__data_, v110.__r_.__value_.__l.__size_, (uint64_t)&__p);
      if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v107.__r_.__value_.__l.__data_);
      v107 = v111;
      *((_BYTE *)&v111.__r_.__value_.__s + 23) = 0;
      v111.__r_.__value_.__s.__data_[0] = 0;
      if (SHIBYTE(v105) < 0)
        operator delete(__p);
      std::vector<std::string>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::string*>,std::__wrap_iter<std::string*>>(&v108, v108.__begin_, (std::string *)v110.__r_.__value_.__l.__data_, (__int128 *)v110.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v110.__r_.__value_.__l.__size_ - v110.__r_.__value_.__r.__words[0]) >> 3));
      v111.__r_.__value_.__r.__words[0] = (std::string::size_type)&v106;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v111);
      v106.__r_.__value_.__r.__words[0] = (std::string::size_type)&v110;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v106);
    }
    YAML::Emitter::Write((uint64_t)this, (char *)&v107);
    if (**(_BYTE **)this)
      YAML::Emitter::EmitBeginMap(this);
    v12 = *v4;
    if (*((_BYTE *)*v4 + 96))
    {
      std::string::basic_string[abi:ne180100]<0>(&v110, "allowMultiple");
      YAML::Emitter::Write((uint64_t)this, (char *)&v110);
      if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v110.__r_.__value_.__l.__data_);
      std::string::basic_string[abi:ne180100]<0>(&v110, "true");
      YAML::Emitter::Write((uint64_t)this, (char *)&v110);
      if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v110.__r_.__value_.__l.__data_);
      v12 = *v4;
    }
    if (*((char *)v12 + 151) < 0)
      std::string::__init_copy_ctor_external(&v110, *((const std::string::value_type **)v12 + 16), *((_QWORD *)v12 + 17));
    else
      v110 = *(std::string *)(v12 + 8);
    if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
    {
      v13 = v110.__r_.__value_.__l.__size_;
      operator delete(v110.__r_.__value_.__l.__data_);
      if (!v13)
        goto LABEL_40;
    }
    else if (!*((_BYTE *)&v110.__r_.__value_.__s + 23))
    {
      goto LABEL_40;
    }
    std::string::basic_string[abi:ne180100]<0>(&v110, "defaultVariant");
    YAML::Emitter::Write((uint64_t)this, (char *)&v110);
    if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v110.__r_.__value_.__l.__data_);
    v14 = *v4;
    if (*((char *)*v4 + 151) < 0)
      std::string::__init_copy_ctor_external(&v110, *((const std::string::value_type **)v14 + 16), *((_QWORD *)v14 + 17));
    else
      v110 = *(std::string *)(v14 + 8);
    YAML::Emitter::Write((uint64_t)this, (char *)&v110);
    if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v110.__r_.__value_.__l.__data_);
LABEL_40:
    v15 = (__int128 **)*v4;
    memset(&v110, 0, sizeof(v110));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v110, v15[19], v15[20], 0xAAAAAAAAAAAAAAABLL * (((char *)v15[20] - (char *)v15[19]) >> 3));
    v16 = *(_OWORD *)&v110.__r_.__value_.__l.__data_;
    v106.__r_.__value_.__r.__words[0] = (std::string::size_type)&v110;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v106);
    if (*((_QWORD *)&v16 + 1) != (_QWORD)v16)
    {
      std::string::basic_string[abi:ne180100]<0>(&v110, "allowedVariants");
      YAML::Emitter::Write((uint64_t)this, (char *)&v110);
      if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v110.__r_.__value_.__l.__data_);
      if (**(_BYTE **)this)
        YAML::Emitter::EmitBeginSeq(this);
      v17 = (__int128 **)*v4;
      memset(&v110, 0, sizeof(v110));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v110, v17[19], v17[20], 0xAAAAAAAAAAAAAAABLL * (((char *)v17[20] - (char *)v17[19]) >> 3));
      v18 = v110.__r_.__value_.__l.__size_;
      for (i = (char *)v110.__r_.__value_.__r.__words[0]; i != (char *)v18; i += 24)
        YAML::Emitter::Write((uint64_t)this, i);
      v106.__r_.__value_.__r.__words[0] = (std::string::size_type)&v110;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v106);
      if (**(_BYTE **)this)
        YAML::Emitter::EmitEndSeq(this);
    }
    v20 = *v4;
    memset(&v110, 0, sizeof(v110));
    std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*,std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*>((char *)&v110, *((_QWORD **)v20 + 3), *((_QWORD **)v20 + 4), (uint64_t)(*((_QWORD *)v20 + 4) - *((_QWORD *)v20 + 3)) >> 4);
    siri::dialogengine::WritePatternUsagesYAML(this, (uint64_t **)&v110);
    v106.__r_.__value_.__r.__words[0] = (std::string::size_type)&v110;
    std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v106);
    v21 = *v4;
    memset(&v110, 0, sizeof(v110));
    std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaOverride>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::PatternSchemaOverride>*,std::shared_ptr<siri::dialogengine::PatternSchemaOverride>*>((char *)&v110, *((_QWORD **)v21 + 22), *((_QWORD **)v21 + 23), (uint64_t)(*((_QWORD *)v21 + 23) - *((_QWORD *)v21 + 22)) >> 4);
    if (v110.__r_.__value_.__r.__words[0] == v110.__r_.__value_.__l.__size_)
    {
      v22 = (__int128 **)*v4;
      memset(&v106, 0, sizeof(v106));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v106, v22[28], v22[29], 0xAAAAAAAAAAAAAAABLL * (((char *)v22[29] - (char *)v22[28]) >> 3));
      if (v106.__r_.__value_.__r.__words[0] == v106.__r_.__value_.__l.__size_)
      {
        v75 = *v4;
        v76 = (uint64_t)(*v4 + 3);
        v77 = 48;
        if (*(_QWORD *)v76 == *((_QWORD *)*v4 + 7))
        {
          v77 = 24;
          v76 = (uint64_t)*v4 + 24;
        }
        memset(&v111, 0, sizeof(v111));
        std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*,std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*>((char *)&v111, *(_QWORD **)((char *)v75 + v77), *(_QWORD **)(v76 + 8), (uint64_t)(*(_QWORD *)(v76 + 8) - *(_QWORD *)((char *)v75 + v77)) >> 4);
        if (v111.__r_.__value_.__r.__words[0] == v111.__r_.__value_.__l.__size_)
        {
          __p = &v111;
          std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
          v111.__r_.__value_.__r.__words[0] = (std::string::size_type)&v106;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v111);
          v106.__r_.__value_.__r.__words[0] = (std::string::size_type)&v110;
          std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v106);
          goto LABEL_99;
        }
        v78 = *v4;
        v79 = (uint64_t)(*v4 + 3);
        v80 = 48;
        if (*(_QWORD *)v79 == *((_QWORD *)*v4 + 7))
        {
          v80 = 24;
          v79 = (uint64_t)*v4 + 24;
        }
        v104 = 0;
        v105 = 0;
        __p = 0;
        std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*,std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*>((char *)&__p, *(_QWORD **)((char *)v78 + v80), *(_QWORD **)(v79 + 8), (uint64_t)(*(_QWORD *)(v79 + 8) - *(_QWORD *)((char *)v78 + v80)) >> 4);
        v81 = *v4;
        v101 = 0;
        v102 = 0;
        p_p = 0;
        std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*,std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*>((char *)&p_p, *((_QWORD **)v81 + 3), *((_QWORD **)v81 + 4), (uint64_t)(*((_QWORD *)v81 + 4) - *((_QWORD *)v81 + 3)) >> 4);
        v82 = p_p;
        if (v104 - (_BYTE *)__p == v101 - (_QWORD)p_p)
        {
          if (__p == v104)
          {
            v85 = 1;
          }
          else
          {
            v83 = (char *)__p + 16;
            do
            {
              v84 = *v82;
              v82 += 2;
              v85 = *((_QWORD *)v83 - 2) == (_QWORD)v84;
              v86 = *((void **)v83 - 2) != v84 || v83 == v104;
              v83 += 16;
            }
            while (!v86);
          }
        }
        else
        {
          v85 = 0;
        }
        p_p_p = &p_p;
        std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p_p);
        p_p = &__p;
        std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100](&p_p);
        __p = &v111;
        std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
        v111.__r_.__value_.__r.__words[0] = (std::string::size_type)&v106;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v111);
        v106.__r_.__value_.__r.__words[0] = (std::string::size_type)&v110;
        std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v106);
        if (v85)
          goto LABEL_99;
        goto LABEL_54;
      }
      v111.__r_.__value_.__r.__words[0] = (std::string::size_type)&v106;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v111);
    }
    v106.__r_.__value_.__r.__words[0] = (std::string::size_type)&v110;
    std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v106);
LABEL_54:
    std::string::basic_string[abi:ne180100]<0>(&v110, "full");
    YAML::Emitter::Write((uint64_t)this, (char *)&v110);
    if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v110.__r_.__value_.__l.__data_);
    if (**(_BYTE **)this)
      YAML::Emitter::EmitBeginMap(this);
    v23 = *v4;
    v24 = (uint64_t)(*v4 + 3);
    v25 = 48;
    if (*(_QWORD *)v24 == *((_QWORD *)*v4 + 7))
    {
      v25 = 24;
      v24 = (uint64_t)*v4 + 24;
    }
    memset(&v110, 0, sizeof(v110));
    std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*,std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*>((char *)&v110, *(_QWORD **)((char *)v23 + v25), *(_QWORD **)(v24 + 8), (uint64_t)(*(_QWORD *)(v24 + 8) - *(_QWORD *)((char *)v23 + v25)) >> 4);
    v26 = *(_OWORD *)&v110.__r_.__value_.__l.__data_;
    v106.__r_.__value_.__r.__words[0] = (std::string::size_type)&v110;
    std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v106);
    if (*((_QWORD *)&v26 + 1) != (_QWORD)v26)
    {
      v27 = *v4;
      v28 = (uint64_t)(*v4 + 3);
      v29 = 48;
      if (*(_QWORD *)v28 == *((_QWORD *)*v4 + 7))
      {
        v29 = 24;
        v28 = (uint64_t)*v4 + 24;
      }
      memset(&v110, 0, sizeof(v110));
      std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*,std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*>((char *)&v110, *(_QWORD **)((char *)v27 + v29), *(_QWORD **)(v28 + 8), (uint64_t)(*(_QWORD *)(v28 + 8) - *(_QWORD *)((char *)v27 + v29)) >> 4);
      siri::dialogengine::WritePatternUsagesYAML(this, (uint64_t **)&v110);
      v106.__r_.__value_.__r.__words[0] = (std::string::size_type)&v110;
      std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v106);
    }
    v30 = *v4;
    memset(&v110, 0, sizeof(v110));
    std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaOverride>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::PatternSchemaOverride>*,std::shared_ptr<siri::dialogengine::PatternSchemaOverride>*>((char *)&v110, *((_QWORD **)v30 + 22), *((_QWORD **)v30 + 23), (uint64_t)(*((_QWORD *)v30 + 23) - *((_QWORD *)v30 + 22)) >> 4);
    v31 = *(_OWORD *)&v110.__r_.__value_.__l.__data_;
    v106.__r_.__value_.__r.__words[0] = (std::string::size_type)&v110;
    std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v106);
    if (*((_QWORD *)&v31 + 1) != (_QWORD)v31)
    {
      v32 = *v4;
      memset(&v106, 0, sizeof(v106));
      std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaOverride>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::PatternSchemaOverride>*,std::shared_ptr<siri::dialogengine::PatternSchemaOverride>*>((char *)&v106, *((_QWORD **)v32 + 22), *((_QWORD **)v32 + 23), (uint64_t)(*((_QWORD *)v32 + 23) - *((_QWORD *)v32 + 22)) >> 4);
      v33 = v106.__r_.__value_.__l.__size_;
      for (j = (_QWORD *)v106.__r_.__value_.__r.__words[0]; ; j += 2)
      {
        if (j == (_QWORD *)v33)
        {
          v110.__r_.__value_.__r.__words[0] = (std::string::size_type)&v106;
          std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v110);
          goto LABEL_87;
        }
        std::string::basic_string[abi:ne180100]<0>(&v110, "override");
        YAML::Emitter::Write((uint64_t)this, (char *)&v110);
        if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v110.__r_.__value_.__l.__data_);
        if (**(_BYTE **)this)
          YAML::Emitter::EmitBeginMap(this);
        v35 = (_QWORD **)*j;
        memset(&v110, 0, sizeof(v110));
        std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*,std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*>((char *)&v110, *v35, v35[1], ((char *)v35[1] - (char *)*v35) >> 4);
        v36 = *(_OWORD *)&v110.__r_.__value_.__l.__data_;
        v111.__r_.__value_.__r.__words[0] = (std::string::size_type)&v110;
        std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v111);
        if (*((_QWORD *)&v36 + 1) != (_QWORD)v36)
        {
          v37 = (_QWORD **)*j;
          memset(&v110, 0, sizeof(v110));
          std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*,std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*>((char *)&v110, *v37, v37[1], ((char *)v37[1] - (char *)*v37) >> 4);
          siri::dialogengine::WritePatternUsagesYAML(this, (uint64_t **)&v110);
          v111.__r_.__value_.__r.__words[0] = (std::string::size_type)&v110;
          std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v111);
        }
        v38 = (_QWORD **)*j;
        memset(&v110, 0, sizeof(v110));
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v110, (__int128 *)v38[3], (__int128 *)v38[4], 0xAAAAAAAAAAAAAAABLL * (v38[4] - v38[3]));
        v39 = *(_OWORD *)&v110.__r_.__value_.__l.__data_;
        v111.__r_.__value_.__r.__words[0] = (std::string::size_type)&v110;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v111);
        if (*((_QWORD *)&v39 + 1) == (_QWORD)v39)
          goto LABEL_83;
        std::string::basic_string[abi:ne180100]<0>(&v110, "idioms");
        YAML::Emitter::Write((uint64_t)this, (char *)&v110);
        if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v110.__r_.__value_.__l.__data_);
        if (**(_BYTE **)this)
          YAML::Emitter::EmitBeginSeq(this);
        v40 = (_QWORD **)*j;
        memset(&v110, 0, sizeof(v110));
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v110, (__int128 *)v40[3], (__int128 *)v40[4], 0xAAAAAAAAAAAAAAABLL * (v40[4] - v40[3]));
        v41 = v110.__r_.__value_.__l.__size_;
        for (k = (char *)v110.__r_.__value_.__r.__words[0]; k != (char *)v41; k += 24)
          YAML::Emitter::Write((uint64_t)this, k);
        v111.__r_.__value_.__r.__words[0] = (std::string::size_type)&v110;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v111);
        if (**(_BYTE **)this)
          break;
LABEL_85:
        ;
      }
      YAML::Emitter::EmitEndSeq(this);
LABEL_83:
      if (**(_BYTE **)this)
        YAML::Emitter::EmitEndMap(this);
      goto LABEL_85;
    }
LABEL_87:
    v43 = (__int128 **)*v4;
    memset(&v110, 0, sizeof(v110));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v110, v43[28], v43[29], 0xAAAAAAAAAAAAAAABLL * (((char *)v43[29] - (char *)v43[28]) >> 3));
    v44 = *(_OWORD *)&v110.__r_.__value_.__l.__data_;
    v106.__r_.__value_.__r.__words[0] = (std::string::size_type)&v110;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v106);
    if (*((_QWORD *)&v44 + 1) == (_QWORD)v44)
      goto LABEL_97;
    std::string::basic_string[abi:ne180100]<0>(&v110, "examples");
    YAML::Emitter::Write((uint64_t)this, (char *)&v110);
    if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v110.__r_.__value_.__l.__data_);
    if (**(_BYTE **)this)
      YAML::Emitter::EmitBeginSeq(this);
    v45 = (__int128 **)*v4;
    memset(&v110, 0, sizeof(v110));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v110, v45[28], v45[29], 0xAAAAAAAAAAAAAAABLL * (((char *)v45[29] - (char *)v45[28]) >> 3));
    v46 = v110.__r_.__value_.__l.__size_;
    for (m = (char *)v110.__r_.__value_.__r.__words[0]; m != (char *)v46; m += 24)
      YAML::Emitter::Write((uint64_t)this, m);
    v106.__r_.__value_.__r.__words[0] = (std::string::size_type)&v110;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v106);
    if (**(_BYTE **)this)
    {
      YAML::Emitter::EmitEndSeq(this);
LABEL_97:
      if (**(_BYTE **)this)
        YAML::Emitter::EmitEndMap(this);
    }
LABEL_99:
    v48 = *v4;
    memset(&v110, 0, sizeof(v110));
    std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaOverride>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::PatternSchemaOverride>*,std::shared_ptr<siri::dialogengine::PatternSchemaOverride>*>((char *)&v110, *((_QWORD **)v48 + 25), *((_QWORD **)v48 + 26), (uint64_t)(*((_QWORD *)v48 + 26) - *((_QWORD *)v48 + 25)) >> 4);
    if (v110.__r_.__value_.__r.__words[0] == v110.__r_.__value_.__l.__size_)
    {
      v49 = (__int128 **)*v4;
      memset(&v106, 0, sizeof(v106));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v106, v49[31], v49[32], 0xAAAAAAAAAAAAAAABLL * (((char *)v49[32] - (char *)v49[31]) >> 3));
      if (v106.__r_.__value_.__r.__words[0] == v106.__r_.__value_.__l.__size_)
      {
        v87 = *v4;
        v88 = (uint64_t)*v4 + 72;
        v89 = 24;
        if (*(_QWORD *)v88 == *((_QWORD *)*v4 + 10))
          v88 = (uint64_t)*v4 + 24;
        else
          v89 = 72;
        memset(&v111, 0, sizeof(v111));
        std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*,std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*>((char *)&v111, *(_QWORD **)((char *)v87 + v89), *(_QWORD **)(v88 + 8), (uint64_t)(*(_QWORD *)(v88 + 8) - *(_QWORD *)((char *)v87 + v89)) >> 4);
        if (v111.__r_.__value_.__r.__words[0] == v111.__r_.__value_.__l.__size_)
        {
          __p = &v111;
          std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
          v111.__r_.__value_.__r.__words[0] = (std::string::size_type)&v106;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v111);
          v106.__r_.__value_.__r.__words[0] = (std::string::size_type)&v110;
          std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v106);
          goto LABEL_150;
        }
        v90 = *v4;
        v91 = (uint64_t)*v4 + 72;
        v92 = 24;
        if (*(_QWORD *)v91 == *((_QWORD *)*v4 + 10))
          v91 = (uint64_t)*v4 + 24;
        else
          v92 = 72;
        v104 = 0;
        v105 = 0;
        __p = 0;
        std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*,std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*>((char *)&__p, *(_QWORD **)((char *)v90 + v92), *(_QWORD **)(v91 + 8), (uint64_t)(*(_QWORD *)(v91 + 8) - *(_QWORD *)((char *)v90 + v92)) >> 4);
        v93 = *v4;
        v101 = 0;
        v102 = 0;
        p_p = 0;
        std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*,std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*>((char *)&p_p, *((_QWORD **)v93 + 3), *((_QWORD **)v93 + 4), (uint64_t)(*((_QWORD *)v93 + 4) - *((_QWORD *)v93 + 3)) >> 4);
        v94 = p_p;
        if (v104 - (_BYTE *)__p == v101 - (_QWORD)p_p)
        {
          if (__p == v104)
          {
            v97 = 1;
          }
          else
          {
            v95 = (char *)__p + 16;
            do
            {
              v96 = *v94;
              v94 += 2;
              v97 = *((_QWORD *)v95 - 2) == (_QWORD)v96;
              v98 = *((void **)v95 - 2) != v96 || v95 == v104;
              v95 += 16;
            }
            while (!v98);
          }
        }
        else
        {
          v97 = 0;
        }
        p_p_p = &p_p;
        std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p_p);
        p_p = &__p;
        std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100](&p_p);
        __p = &v111;
        std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
        v111.__r_.__value_.__r.__words[0] = (std::string::size_type)&v106;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v111);
        v106.__r_.__value_.__r.__words[0] = (std::string::size_type)&v110;
        std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v106);
        if (v97)
        {
LABEL_150:
          if (**(_BYTE **)this)
            YAML::Emitter::EmitEndMap(this);
          goto LABEL_152;
        }
LABEL_103:
        std::string::basic_string[abi:ne180100]<0>(&v110, "supporting");
        YAML::Emitter::Write((uint64_t)this, (char *)&v110);
        if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v110.__r_.__value_.__l.__data_);
        if (**(_BYTE **)this)
          YAML::Emitter::EmitBeginMap(this);
        v50 = *v4;
        v51 = (uint64_t)*v4 + 72;
        v52 = 24;
        if (*(_QWORD *)v51 == *((_QWORD *)*v4 + 10))
          v51 = (uint64_t)*v4 + 24;
        else
          v52 = 72;
        memset(&v110, 0, sizeof(v110));
        std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*,std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*>((char *)&v110, *(_QWORD **)((char *)v50 + v52), *(_QWORD **)(v51 + 8), (uint64_t)(*(_QWORD *)(v51 + 8) - *(_QWORD *)((char *)v50 + v52)) >> 4);
        v53 = *(_OWORD *)&v110.__r_.__value_.__l.__data_;
        v106.__r_.__value_.__r.__words[0] = (std::string::size_type)&v110;
        std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v106);
        if (*((_QWORD *)&v53 + 1) != (_QWORD)v53)
        {
          v54 = *v4;
          v55 = (uint64_t)*v4 + 72;
          v56 = 24;
          if (*(_QWORD *)v55 == *((_QWORD *)*v4 + 10))
            v55 = (uint64_t)*v4 + 24;
          else
            v56 = 72;
          memset(&v110, 0, sizeof(v110));
          std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*,std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*>((char *)&v110, *(_QWORD **)((char *)v54 + v56), *(_QWORD **)(v55 + 8), (uint64_t)(*(_QWORD *)(v55 + 8) - *(_QWORD *)((char *)v54 + v56)) >> 4);
          siri::dialogengine::WritePatternUsagesYAML(this, (uint64_t **)&v110);
          v106.__r_.__value_.__r.__words[0] = (std::string::size_type)&v110;
          std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v106);
        }
        v57 = *v4;
        memset(&v110, 0, sizeof(v110));
        std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaOverride>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::PatternSchemaOverride>*,std::shared_ptr<siri::dialogengine::PatternSchemaOverride>*>((char *)&v110, *((_QWORD **)v57 + 25), *((_QWORD **)v57 + 26), (uint64_t)(*((_QWORD *)v57 + 26) - *((_QWORD *)v57 + 25)) >> 4);
        v58 = *(_OWORD *)&v110.__r_.__value_.__l.__data_;
        v106.__r_.__value_.__r.__words[0] = (std::string::size_type)&v110;
        std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v106);
        if (*((_QWORD *)&v58 + 1) != (_QWORD)v58)
        {
          v59 = *v4;
          memset(&v106, 0, sizeof(v106));
          std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaOverride>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::PatternSchemaOverride>*,std::shared_ptr<siri::dialogengine::PatternSchemaOverride>*>((char *)&v106, *((_QWORD **)v59 + 25), *((_QWORD **)v59 + 26), (uint64_t)(*((_QWORD *)v59 + 26) - *((_QWORD *)v59 + 25)) >> 4);
          v60 = v106.__r_.__value_.__l.__size_;
          for (n = (_QWORD *)v106.__r_.__value_.__r.__words[0]; ; n += 2)
          {
            if (n == (_QWORD *)v60)
            {
              v110.__r_.__value_.__r.__words[0] = (std::string::size_type)&v106;
              std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v110);
              goto LABEL_138;
            }
            std::string::basic_string[abi:ne180100]<0>(&v110, "override");
            YAML::Emitter::Write((uint64_t)this, (char *)&v110);
            if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v110.__r_.__value_.__l.__data_);
            if (**(_BYTE **)this)
              YAML::Emitter::EmitBeginMap(this);
            v62 = (_QWORD **)*n;
            memset(&v110, 0, sizeof(v110));
            std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*,std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*>((char *)&v110, *v62, v62[1], ((char *)v62[1] - (char *)*v62) >> 4);
            v63 = *(_OWORD *)&v110.__r_.__value_.__l.__data_;
            v111.__r_.__value_.__r.__words[0] = (std::string::size_type)&v110;
            std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v111);
            if (*((_QWORD *)&v63 + 1) != (_QWORD)v63)
            {
              v64 = (_QWORD **)*n;
              memset(&v110, 0, sizeof(v110));
              std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*,std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*>((char *)&v110, *v64, v64[1], ((char *)v64[1] - (char *)*v64) >> 4);
              siri::dialogengine::WritePatternUsagesYAML(this, (uint64_t **)&v110);
              v111.__r_.__value_.__r.__words[0] = (std::string::size_type)&v110;
              std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v111);
            }
            v65 = (_QWORD **)*n;
            memset(&v110, 0, sizeof(v110));
            std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v110, (__int128 *)v65[3], (__int128 *)v65[4], 0xAAAAAAAAAAAAAAABLL * (v65[4] - v65[3]));
            v66 = *(_OWORD *)&v110.__r_.__value_.__l.__data_;
            v111.__r_.__value_.__r.__words[0] = (std::string::size_type)&v110;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v111);
            if (*((_QWORD *)&v66 + 1) == (_QWORD)v66)
              goto LABEL_134;
            std::string::basic_string[abi:ne180100]<0>(&v110, "idioms");
            YAML::Emitter::Write((uint64_t)this, (char *)&v110);
            if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v110.__r_.__value_.__l.__data_);
            if (**(_BYTE **)this)
              YAML::Emitter::EmitBeginSeq(this);
            v67 = (_QWORD **)*n;
            memset(&v110, 0, sizeof(v110));
            std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v110, (__int128 *)v67[3], (__int128 *)v67[4], 0xAAAAAAAAAAAAAAABLL * (v67[4] - v67[3]));
            v68 = v110.__r_.__value_.__l.__size_;
            for (ii = (char *)v110.__r_.__value_.__r.__words[0]; ii != (char *)v68; ii += 24)
              YAML::Emitter::Write((uint64_t)this, ii);
            v111.__r_.__value_.__r.__words[0] = (std::string::size_type)&v110;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v111);
            if (**(_BYTE **)this)
              break;
LABEL_136:
            ;
          }
          YAML::Emitter::EmitEndSeq(this);
LABEL_134:
          if (**(_BYTE **)this)
            YAML::Emitter::EmitEndMap(this);
          goto LABEL_136;
        }
LABEL_138:
        v70 = (__int128 **)*v4;
        memset(&v110, 0, sizeof(v110));
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v110, v70[31], v70[32], 0xAAAAAAAAAAAAAAABLL * (((char *)v70[32] - (char *)v70[31]) >> 3));
        v71 = *(_OWORD *)&v110.__r_.__value_.__l.__data_;
        v106.__r_.__value_.__r.__words[0] = (std::string::size_type)&v110;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v106);
        if (*((_QWORD *)&v71 + 1) != (_QWORD)v71)
        {
          std::string::basic_string[abi:ne180100]<0>(&v110, "examples");
          YAML::Emitter::Write((uint64_t)this, (char *)&v110);
          if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v110.__r_.__value_.__l.__data_);
          if (**(_BYTE **)this)
            YAML::Emitter::EmitBeginSeq(this);
          v72 = (__int128 **)*v4;
          memset(&v110, 0, sizeof(v110));
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v110, v72[31], v72[32], 0xAAAAAAAAAAAAAAABLL * (((char *)v72[32] - (char *)v72[31]) >> 3));
          v73 = v110.__r_.__value_.__l.__size_;
          for (jj = (char *)v110.__r_.__value_.__r.__words[0]; jj != (char *)v73; jj += 24)
            YAML::Emitter::Write((uint64_t)this, jj);
          v106.__r_.__value_.__r.__words[0] = (std::string::size_type)&v110;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v106);
          if (!**(_BYTE **)this)
            goto LABEL_150;
          YAML::Emitter::EmitEndSeq(this);
        }
        if (**(_BYTE **)this)
          YAML::Emitter::EmitEndMap(this);
        goto LABEL_150;
      }
      v111.__r_.__value_.__r.__words[0] = (std::string::size_type)&v106;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v111);
    }
    v106.__r_.__value_.__r.__words[0] = (std::string::size_type)&v110;
    std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v106);
    goto LABEL_103;
  }
LABEL_196:
  if (**(_BYTE **)this)
    YAML::Emitter::EmitEndMap(this);
  v110.__r_.__value_.__r.__words[0] = (std::string::size_type)&v108;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v110);
}

void sub_1BFBE8B3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  __p = &a31;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void siri::dialogengine::WriteCustomCombinationYAML(YAML::Emitter *a1, int **a2)
{
  int *v3;
  int v4;
  __int128 v5;
  unsigned int v7;
  char *v8;
  int *v9;
  _QWORD *i;
  std::string::size_type size;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD v17[2];
  std::string __p;
  std::string *p_p;

  v3 = *a2;
  v4 = **a2;
  if (v4 == 4)
  {
    if (*((char *)v3 + 31) < 0)
    {
      std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)v3 + 1), *((_QWORD *)v3 + 2));
    }
    else
    {
      v5 = *(_OWORD *)(v3 + 2);
      __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v3 + 3);
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v5;
    }
    YAML::Emitter::Write((uint64_t)a1, (char *)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    if (**(_BYTE **)a1)
    {
      YAML::Emitter::EmitBeginMap(a1);
      v4 = **a2;
    }
    v7 = v4 - 1;
    if (v7 > 3)
      v8 = "";
    else
      v8 = off_1E792A160[v7];
    std::string::basic_string[abi:ne180100]<0>(&__p, v8);
    YAML::Emitter::Write((uint64_t)a1, (char *)&__p);
    if (**(_BYTE **)a1)
      YAML::Emitter::EmitBeginSeq(a1);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v9 = *a2;
    memset(&__p, 0, sizeof(__p));
    std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>*,std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>*>(&__p, *((_QWORD **)v9 + 4), *((_QWORD **)v9 + 5), (uint64_t)(*((_QWORD *)v9 + 5) - *((_QWORD *)v9 + 4)) >> 4);
    size = __p.__r_.__value_.__l.__size_;
    for (i = (_QWORD *)__p.__r_.__value_.__r.__words[0]; i != (_QWORD *)size; i += 2)
    {
      v12 = (std::__shared_weak_count *)i[1];
      v17[0] = *i;
      v17[1] = v12;
      if (v12)
      {
        p_shared_owners = (unint64_t *)&v12->__shared_owners_;
        do
          v14 = __ldxr(p_shared_owners);
        while (__stxr(v14 + 1, p_shared_owners));
      }
      siri::dialogengine::WriteCustomCombinationYAML(a1, v17);
      if (v12)
      {
        v15 = (unint64_t *)&v12->__shared_owners_;
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
    }
    p_p = &__p;
    std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p);
    if (**(_BYTE **)a1)
    {
      YAML::Emitter::EmitEndSeq(a1);
      if (**(_BYTE **)a1)
        YAML::Emitter::EmitEndMap(a1);
    }
  }
}

void sub_1BFBE8F8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void InitDefaultsscc_info_IntentsUI_Standard_Response_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;
  const void *v5;
  const void *v6;
  SnippetUI::Response_Component *v7;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Response.pb.cc", a4);
  SnippetUI::Response_Component::Response_Component((SnippetUI::Response_Component *)&SnippetUI::_Response_Component_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_Response_Component_default_instance_, v4);
  SnippetUI::IntentsUI_Standard_Slot::IntentsUI_Standard_Slot((SnippetUI::IntentsUI_Standard_Slot *)&SnippetUI::_IntentsUI_Standard_Slot_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_IntentsUI_Standard_Slot_default_instance_, v5);
  SnippetUI::IntentsUI_Standard::IntentsUI_Standard((SnippetUI::IntentsUI_Standard *)&SnippetUI::_IntentsUI_Standard_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_IntentsUI_Standard_default_instance_, v6);
  SnippetUI::Response_Component::InitAsDefaultInstance(v7);
  qword_1ED1D4860 = (uint64_t)&SnippetUI::_Response_Component_default_instance_;
  qword_1ED1D43B8 = (uint64_t)&SnippetUI::_ActionProperty_default_instance_;
}

SnippetUI::Response_Component *SnippetUI::Response_Component::Response_Component(SnippetUI::Response_Component *this)
{
  *(_QWORD *)this = &off_1E79369F0;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 8) = 0;
  if (atomic_load(scc_info_IntentsUI_Standard_Response_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_IntentsUI_Standard_Response_2eproto);
  *((_QWORD *)this + 2) = 0;
  *((_DWORD *)this + 9) = 0;
  return this;
}

void sub_1BFBE90D8(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

SnippetUI::IntentsUI_Standard_Slot *SnippetUI::IntentsUI_Standard_Slot::IntentsUI_Standard_Slot(SnippetUI::IntentsUI_Standard_Slot *this)
{
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_QWORD *)this = &off_1E7936B70;
  *((_DWORD *)this + 12) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  if (atomic_load(scc_info_IntentsUI_Standard_Response_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_IntentsUI_Standard_Response_2eproto);
  *((_QWORD *)this + 5) = 0;
  return this;
}

void sub_1BFBE9158(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t *v2;

  google::protobuf::RepeatedPtrField<std::string>::~RepeatedPtrField(v1 + 16);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v2);
  _Unwind_Resume(a1);
}

SnippetUI::IntentsUI_Standard *SnippetUI::IntentsUI_Standard::IntentsUI_Standard(SnippetUI::IntentsUI_Standard *this)
{
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_QWORD *)this = &off_1E7936C30;
  *((_DWORD *)this + 17) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  if (atomic_load(scc_info_IntentsUI_Standard_Response_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_IntentsUI_Standard_Response_2eproto);
  *((_QWORD *)this + 5) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 6) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 7) = 0;
  *((_BYTE *)this + 64) = 0;
  return this;
}

void sub_1BFBE91F0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t *v2;

  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((google::protobuf::internal::RepeatedPtrFieldBase *)(v1 + 16));
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v2);
  _Unwind_Resume(a1);
}

void SnippetUI::Response_Component::InitAsDefaultInstance(SnippetUI::Response_Component *this)
{
  qword_1ED1D4A50 = (uint64_t)&SnippetUI::_CustomCanvas_default_instance_;
  unk_1ED1D4A58 = &SnippetUI::_FactItem_Standard_default_instance_;
  qword_1ED1D4A60 = (uint64_t)&SnippetUI::_FactItem_ShortNumber_default_instance_;
  unk_1ED1D4A68 = &SnippetUI::_FactItem_HeroNumber_default_instance_;
  qword_1ED1D4A70 = (uint64_t)&SnippetUI::_SummaryItem_Standard_default_instance_;
  unk_1ED1D4A78 = &SnippetUI::_SummaryItem_ShortNumber_default_instance_;
  qword_1ED1D4A80 = (uint64_t)&SnippetUI::_SummaryItem_Text_default_instance_;
  unk_1ED1D4A88 = &SnippetUI::_SummaryItem_LargeText_default_instance_;
  qword_1ED1D4A90 = (uint64_t)&SnippetUI::_SummaryItem_DetailedText_default_instance_;
  unk_1ED1D4A98 = &SnippetUI::_SimpleItem_Standard_default_instance_;
  qword_1ED1D4AA0 = (uint64_t)&SnippetUI::_SimpleItem_Rich_default_instance_;
  unk_1ED1D4AA8 = &SnippetUI::_SimpleItem_Visual_default_instance_;
  qword_1ED1D4AB0 = (uint64_t)&SnippetUI::_PrimaryHeader_Standard_default_instance_;
  unk_1ED1D4AB8 = &SnippetUI::_PrimaryHeader_Marquee_default_instance_;
  qword_1ED1D4AC0 = (uint64_t)&SnippetUI::_PrimaryHeader_Rich_default_instance_;
  unk_1ED1D4AC8 = &SnippetUI::_SecondaryHeader_Standard_default_instance_;
  qword_1ED1D4AD0 = (uint64_t)&SnippetUI::_Button_default_instance_;
  unk_1ED1D4AD8 = &SnippetUI::_BinaryButton_default_instance_;
  qword_1ED1D4AE0 = (uint64_t)&SnippetUI::_StatusIndicator_Success_default_instance_;
  unk_1ED1D4AE8 = &SnippetUI::_StatusIndicator_Error_default_instance_;
  qword_1ED1D4AF0 = (uint64_t)&SnippetUI::_StatusIndicator_InProgress_default_instance_;
  unk_1ED1D4AF8 = &SnippetUI::_StatusIndicator_Cancelled_default_instance_;
  qword_1ED1D4B00 = (uint64_t)&SnippetUI::_TextInput_default_instance_;
  unk_1ED1D4B08 = &SnippetUI::_Control_Switch_default_instance_;
  qword_1ED1D4B10 = (uint64_t)&SnippetUI::_Control_Slider_default_instance_;
  unk_1ED1D4B18 = &SnippetUI::_Control_PlayerButton_default_instance_;
  qword_1ED1D4B20 = (uint64_t)&google::protobuf::internal::fixed_address_empty_string;
  unk_1ED1D4B28 = &SnippetUI::_Reference_Standard_default_instance_;
  qword_1ED1D4B30 = (uint64_t)&SnippetUI::_Reference_Logo_default_instance_;
  unk_1ED1D4B38 = &SnippetUI::_Reference_Rich_default_instance_;
  qword_1ED1D4B40 = (uint64_t)&SnippetUI::_Reference_Button_default_instance_;
  unk_1ED1D4B48 = &SnippetUI::_SummaryItem_Pair_default_instance_;
  qword_1ED1D4B50 = (uint64_t)&SnippetUI::_SummaryItem_PairV2_default_instance_;
  unk_1ED1D4B58 = &SnippetUI::_SummaryItem_PairNumber_default_instance_;
  qword_1ED1D4B60 = (uint64_t)&SnippetUI::_SummaryItem_PairNumberV2_default_instance_;
  unk_1ED1D4B68 = &SnippetUI::_SummaryItem_Button_default_instance_;
  qword_1ED1D4B70 = (uint64_t)&SnippetUI::_FactItem_Button_default_instance_;
  unk_1ED1D4B78 = &SnippetUI::_Table_default_instance_;
  qword_1ED1D4B80 = (uint64_t)&SnippetUI::_Reference_Footnote_default_instance_;
  unk_1ED1D4B88 = &SnippetUI::_LongItem_Text_default_instance_;
  qword_1ED1D4B90 = (uint64_t)&SnippetUI::_Visualization_Chart_default_instance_;
  unk_1ED1D4B98 = &SnippetUI::_SummaryItem_Player_default_instance_;
  qword_1ED1D4BA0 = (uint64_t)&SnippetUI::_SimpleItem_Player_default_instance_;
  unk_1ED1D4BA8 = &SnippetUI::_SimpleItem_ReverseRich_default_instance_;
  qword_1ED1D4BB0 = (uint64_t)&SnippetUI::_SecondaryHeader_Emphasized_default_instance_;
  unk_1ED1D4BB8 = &SnippetUI::_SummaryItem_Switch_default_instance_;
  qword_1ED1D4BC0 = (uint64_t)&SnippetUI::_SystemText_ClarificationTitle_default_instance_;
  unk_1ED1D4BC8 = &SnippetUI::_Visualization_Image_default_instance_;
  qword_1ED1D4BD0 = (uint64_t)&SnippetUI::_Visualization_Map_default_instance_;
  unk_1ED1D4BD8 = &SnippetUI::_Button_Container_default_instance_;
  qword_1ED1D4BE0 = (uint64_t)&SnippetUI::_IntentsUI_Standard_default_instance_;
  unk_1ED1D4BE8 = &SnippetUI::_Sash_Standard_default_instance_;
  qword_1ED1D4BF0 = (uint64_t)&SnippetUI::_HeroHeader_default_instance_;
  unk_1ED1D4BF8 = &SnippetUI::_HorizontalList_Standard_default_instance_;
  qword_1ED1D4C00 = (uint64_t)&SnippetUI::_SectionHeader_Standard_default_instance_;
  unk_1ED1D4C08 = &SnippetUI::_SectionHeader_Rich_default_instance_;
  qword_1ED1D4C10 = (uint64_t)&SnippetUI::_KeyValue_Standard_default_instance_;
  unk_1ED1D4C18 = &SnippetUI::_TertiaryHeader_Standard_default_instance_;
  qword_1ED1D4C20 = (uint64_t)&SnippetUI::_SimpleItem_RichSearchResult_default_instance_;
  unk_1ED1D4C28 = &SnippetUI::_SummaryItem_SwitchV2_default_instance_;
  qword_1ED1D4A38 = (uint64_t)&SnippetUI::_Separators_default_instance_;
}

void SnippetUI::IntentsUI_Standard::~IntentsUI_Standard(SnippetUI::IntentsUI_Standard *this)
{
  SnippetUI::IntentsUI_Standard::~IntentsUI_Standard(this);
  JUMPOUT(0x1C3B8D890);
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;

  *(_QWORD *)this = &off_1E7936C30;
  v2 = *((_QWORD *)this + 5);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x1C3B8D890](v2, 0x1012C40EC159624);
  }
  v4 = *((_QWORD *)this + 6);
  if ((uint64_t *)v4 != &google::protobuf::internal::fixed_address_empty_string && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0)
      operator delete(*(void **)v4);
    MEMORY[0x1C3B8D890](v4, 0x1012C40EC159624);
  }
  if (this != (SnippetUI::IntentsUI_Standard *)&SnippetUI::_IntentsUI_Standard_default_instance_)
  {
    v6 = *((_QWORD *)this + 7);
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((SnippetUI::IntentsUI_Standard *)((char *)this + 16));
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

SnippetUI::IntentsUI_Standard *SnippetUI::IntentsUI_Standard::New(SnippetUI::IntentsUI_Standard *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::IntentsUI_Standard>(0);
}

SnippetUI::IntentsUI_Standard *SnippetUI::IntentsUI_Standard::New(SnippetUI::IntentsUI_Standard *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::IntentsUI_Standard>(a2);
}

void SnippetUI::IntentsUI_Standard::Clear(SnippetUI::IntentsUI_Standard *this)
{
  uint64_t v2;
  SnippetUI::IntentsUI_Standard_Slot **v3;
  SnippetUI::IntentsUI_Standard_Slot *v4;
  std::string *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char v10;
  char v11;
  std::string v12[2];

  v2 = *((unsigned int *)this + 6);
  if ((v2 & 0x80000000) != 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v12, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1613);
    v5 = google::protobuf::internal::LogMessage::operator<<(v12, "CHECK failed: (n) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v11, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v12[0].__r_.__value_.__l.__data_);
  }
  else if ((_DWORD)v2)
  {
    v3 = (SnippetUI::IntentsUI_Standard_Slot **)(*((_QWORD *)this + 4) + 8);
    do
    {
      v4 = *v3++;
      SnippetUI::IntentsUI_Standard_Slot::Clear(v4);
      --v2;
    }
    while (v2);
    *((_DWORD *)this + 6) = 0;
  }
  v6 = *((_QWORD *)this + 5);
  if ((uint64_t *)v6 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v6 + 23) < 0)
    {
      **(_BYTE **)v6 = 0;
      *(_QWORD *)(v6 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v6 = 0;
      *(_BYTE *)(v6 + 23) = 0;
    }
  }
  v7 = *((_QWORD *)this + 6);
  if ((uint64_t *)v7 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v7 + 23) < 0)
    {
      **(_BYTE **)v7 = 0;
      *(_QWORD *)(v7 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v7 = 0;
      *(_BYTE *)(v7 + 23) = 0;
    }
  }
  v8 = *((_QWORD *)this + 7);
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v10 = *((_BYTE *)this + 8);
  v9 = (char *)this + 8;
  *((_QWORD *)v9 + 6) = 0;
  v9[56] = 0;
  if ((v10 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoClear((google::protobuf::internal::InternalMetadataWithArena *)v9);
}

void sub_1BFBE95E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::IntentsUI_Standard::IsInitialized(SnippetUI::IntentsUI_Standard *this)
{
  return 1;
}

char *SnippetUI::IntentsUI_Standard::ByteSizeLong(SnippetUI::IntentsUI_Standard *this)
{
  uint64_t v2;
  uint64_t v3;
  SnippetUI::IntentsUI_Standard_Slot **v4;
  uint64_t v5;
  SnippetUI::IntentsUI_Standard_Slot *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  SnippetUI::ActionProperty *v14;
  char *v15;
  const google::protobuf::UnknownFieldSet *v16;

  v2 = *((int *)this + 6);
  v3 = *((_QWORD *)this + 4);
  if (v3)
    v4 = (SnippetUI::IntentsUI_Standard_Slot **)(v3 + 8);
  else
    v4 = 0;
  if ((_DWORD)v2)
  {
    v5 = 8 * v2;
    do
    {
      v6 = *v4++;
      v7 = SnippetUI::IntentsUI_Standard_Slot::ByteSizeLong(v6);
      v2 += (uint64_t)&v7[(9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6];
      v5 -= 8;
    }
    while (v5);
  }
  else
  {
    v2 = 0;
  }
  v8 = *((_QWORD *)this + 5);
  v9 = *(unsigned __int8 *)(v8 + 23);
  if (*(char *)(v8 + 23) < 0)
  {
    if (!*(_QWORD *)(v8 + 8))
      goto LABEL_14;
  }
  else if (!*(_BYTE *)(v8 + 23))
  {
    goto LABEL_14;
  }
  v10 = *(_QWORD *)(v8 + 8);
  if ((v9 & 0x80u) == 0)
    v10 = v9;
  v2 += v10 + ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_14:
  v11 = *((_QWORD *)this + 6);
  v12 = *(unsigned __int8 *)(v11 + 23);
  if (*(char *)(v11 + 23) < 0)
  {
    if (!*(_QWORD *)(v11 + 8))
      goto LABEL_19;
  }
  else if (!*(_BYTE *)(v11 + 23))
  {
    goto LABEL_19;
  }
  v13 = *(_QWORD *)(v11 + 8);
  if ((v12 & 0x80u) == 0)
    v13 = v12;
  v2 += v13 + ((9 * (__clz(v13 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_19:
  if (this != (SnippetUI::IntentsUI_Standard *)&SnippetUI::_IntentsUI_Standard_default_instance_)
  {
    v14 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 7);
    if (v14)
    {
      v15 = SnippetUI::ActionProperty::ByteSizeLong(v14);
      v2 += (uint64_t)&v15[((9 * (__clz(v15 | 1) ^ 0x1F) + 73) >> 6) + 1];
    }
  }
  if (*((_BYTE *)this + 64))
    v16 = (const google::protobuf::UnknownFieldSet *)(v2 + 2);
  else
    v16 = (const google::protobuf::UnknownFieldSet *)v2;
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::IntentsUI_Standard *)((char *)this + 8), v16, (_DWORD *)this + 17);
  *((_DWORD *)this + 17) = (_DWORD)v16;
  return (char *)v16;
}

uint64_t SnippetUI::IntentsUI_Standard::GetCachedSize(SnippetUI::IntentsUI_Standard *this)
{
  return *((unsigned int *)this + 17);
}

google::protobuf::internal *SnippetUI::IntentsUI_Standard::_InternalParse(SnippetUI::IntentsUI_Standard *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  std::string **v5;
  unsigned int *v6;
  std::string **v7;
  google::protobuf::internal::ParseContext *v8;
  google::protobuf::internal *TagFallback;
  char *v10;
  std::string *v11;
  char *v12;
  google::protobuf::internal *v13;
  google::protobuf::internal *v14;
  int *v15;
  uint64_t v16;
  int v17;
  SnippetUI::IntentsUI_Standard_Slot *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  char *v22;
  char *SizeFallback;
  unsigned int v24;
  int v25;
  int v26;
  BOOL v27;
  int v28;
  int v29;
  unint64_t v30;
  std::string *v31;
  google::protobuf::internal *v32;
  unint64_t v33;
  int v34;
  SnippetUI::ActionProperty *v35;
  BOOL v36;
  google::protobuf::internal *v37;
  uint64_t v38;
  uint64_t *v40;
  google::protobuf::internal *v41;

  v5 = (std::string **)((char *)this + 48);
  v6 = (unsigned int *)((char *)this + 16);
  v7 = (std::string **)((char *)this + 40);
  v40 = (uint64_t *)((char *)this + 8);
  v41 = a2;
  while (2)
  {
    if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v41, *((_DWORD *)a3 + 23)) & 1) != 0)
      return v41;
    TagFallback = (google::protobuf::internal *)((char *)v41 + 1);
    v10 = (char *)*(unsigned __int8 *)v41;
    if ((*(char *)v41 & 0x80000000) == 0)
      goto LABEL_6;
    v10 = (char *)(v10 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v41 + 2);
LABEL_6:
      v41 = TagFallback;
      goto LABEL_7;
    }
    TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v41, v10);
    v41 = TagFallback;
    if (!TagFallback)
      return TagFallback;
LABEL_7:
    switch(v10 >> 3)
    {
      case 1u:
        if (v10 != 10)
          goto LABEL_44;
        v11 = *v7;
        if (*v7 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v7, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v11 = *v7;
          TagFallback = v41;
        }
        v12 = google::protobuf::internal::InlineGreedyStringParser(v11, (std::string::value_type *)TagFallback, (uint64_t)a3);
        goto LABEL_49;
      case 2u:
        if (v10 != 18)
          goto LABEL_44;
        v13 = (google::protobuf::internal *)((char *)TagFallback - 1);
LABEL_14:
        v14 = (google::protobuf::internal *)((char *)v13 + 1);
        v41 = v14;
        v15 = (int *)*((_QWORD *)this + 4);
        if (!v15)
        {
          v17 = *((_DWORD *)this + 7);
LABEL_19:
          google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v6, v17 + 1);
          v15 = (int *)*((_QWORD *)this + 4);
          v17 = *v15;
          goto LABEL_20;
        }
        v16 = *((int *)this + 6);
        v17 = *v15;
        if ((int)v16 < *v15)
        {
          *((_DWORD *)this + 6) = v16 + 1;
          v18 = *(SnippetUI::IntentsUI_Standard_Slot **)&v15[2 * v16 + 2];
          goto LABEL_21;
        }
        if (v17 == *((_DWORD *)this + 7))
          goto LABEL_19;
LABEL_20:
        *v15 = v17 + 1;
        v18 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::IntentsUI_Standard_Slot>(*((google::protobuf::internal::ArenaImpl **)this
                                                                                              + 2));
        v19 = *((_QWORD *)this + 4);
        v20 = *((int *)this + 6);
        *((_DWORD *)this + 6) = v20 + 1;
        *(_QWORD *)(v19 + 8 * v20 + 8) = v18;
        v14 = v41;
LABEL_21:
        v21 = *(unsigned __int8 *)v14;
        if (*(char *)v14 < 0)
        {
          SizeFallback = google::protobuf::internal::ReadSizeFallback(v14, (const char *)*(unsigned __int8 *)v14);
          if (!SizeFallback)
            goto LABEL_54;
          v22 = SizeFallback;
          v21 = v24;
        }
        else
        {
          v22 = (char *)v14 + 1;
        }
        v25 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v22, v21);
        v26 = *((_DWORD *)a3 + 22);
        v27 = __OFSUB__(v26--, 1);
        *((_DWORD *)a3 + 22) = v26;
        if (v26 < 0 == v27)
        {
          v28 = v25;
          v13 = SnippetUI::IntentsUI_Standard_Slot::_InternalParse(v18, (google::protobuf::internal *)v22, a3);
          if (v13)
          {
            ++*((_DWORD *)a3 + 22);
            if (!*((_DWORD *)a3 + 20))
            {
              v29 = *((_DWORD *)a3 + 7) + v28;
              *((_DWORD *)a3 + 7) = v29;
              v30 = *((_QWORD *)a3 + 1) + (v29 & (v29 >> 31));
              *(_QWORD *)a3 = v30;
              v41 = v13;
              if (v30 <= (unint64_t)v13 || *(_BYTE *)v13 != 18)
                continue;
              goto LABEL_14;
            }
          }
        }
LABEL_54:
        TagFallback = 0;
        break;
      case 3u:
        if (v10 != 26)
          goto LABEL_44;
        v31 = *v5;
        if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v31 = *v5;
          TagFallback = v41;
        }
        v12 = google::protobuf::internal::InlineGreedyStringParserUTF8(v31, (std::string::value_type *)TagFallback, (uint64_t)a3, (google::protobuf::internal *)"SnippetUI.IntentsUI_Standard.component_name");
        goto LABEL_49;
      case 4u:
        if (v10 != 32)
          goto LABEL_44;
        v32 = (google::protobuf::internal *)((char *)TagFallback + 1);
        v33 = *(unsigned __int8 *)TagFallback;
        if ((*(char *)TagFallback & 0x80000000) == 0)
          goto LABEL_39;
        v34 = *(char *)v32;
        v33 = v33 + (v34 << 7) - 128;
        if (v34 < 0)
        {
          v37 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(TagFallback, v33);
          v41 = v37;
          *((_BYTE *)this + 64) = v38 != 0;
          if (!v37)
            goto LABEL_54;
        }
        else
        {
          v32 = (google::protobuf::internal *)((char *)TagFallback + 2);
LABEL_39:
          v41 = v32;
          *((_BYTE *)this + 64) = v33 != 0;
        }
        continue;
      case 5u:
        if (v10 != 42)
          goto LABEL_44;
        v35 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 7);
        if (!v35)
        {
          v35 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
          *((_QWORD *)this + 7) = v35;
          TagFallback = v41;
        }
        v12 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::ActionProperty>(a3, v35, TagFallback);
        goto LABEL_49;
      default:
LABEL_44:
        if ((_DWORD)v10)
          v36 = (v10 & 7) == 4;
        else
          v36 = 1;
        if (v36)
        {
          *((_DWORD *)a3 + 20) = (_DWORD)v10 - 1;
          return TagFallback;
        }
        v12 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v10, v40, TagFallback, a3, v8);
LABEL_49:
        v41 = (google::protobuf::internal *)v12;
        if (!v12)
          goto LABEL_54;
        continue;
    }
    return TagFallback;
  }
}

const google::protobuf::UnknownFieldSet *SnippetUI::IntentsUI_Standard::InternalSerializeWithCachedSizesToArray(SnippetUI::IntentsUI_Standard *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  char *v5;
  uint64_t v7;
  int v8;
  int v9;
  std::string *v10;
  std::string *v11;
  SnippetUI::IntentsUI_Standard_Slot *v12;
  unsigned int v13;
  google::protobuf::UnknownFieldSet *v14;
  unsigned int v15;
  _BYTE *v16;
  _BYTE *v17;
  unsigned int v18;
  unsigned int v19;
  google::protobuf::internal *v20;
  const char *v21;
  char v22;
  SnippetUI::ActionProperty *v23;
  unsigned int v24;
  google::protobuf::UnknownFieldSet *v25;
  unsigned int v26;
  _BYTE *v27;
  _BYTE *v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  char v33;
  std::string v34[2];

  v5 = a2;
  v7 = *((_QWORD *)this + 5);
  if ((*(char *)(v7 + 23) & 0x80000000) == 0)
  {
    if (!*(_BYTE *)(v7 + 23))
      goto LABEL_4;
    goto LABEL_3;
  }
  if (*(_QWORD *)(v7 + 8))
LABEL_3:
    v5 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 1, v7, a2);
LABEL_4:
  v8 = *((_DWORD *)this + 6);
  if (v8)
  {
    v9 = 0;
    while ((unint64_t)v5 < *(_QWORD *)a3)
    {
      if (v9 < 0)
        goto LABEL_8;
LABEL_9:
      if (*((_DWORD *)this + 6) <= v9)
      {
        google::protobuf::internal::LogMessage::LogMessage((uint64_t)v34, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1539);
        v11 = google::protobuf::internal::LogMessage::operator<<(v34, "CHECK failed: (index) < (current_size_): ");
        google::protobuf::internal::LogFinisher::operator=((int)&v33, (const char **)&v11->__r_.__value_.__l.__data_);
        google::protobuf::internal::LogMessage::~LogMessage((void **)&v34[0].__r_.__value_.__l.__data_);
      }
      v12 = *(SnippetUI::IntentsUI_Standard_Slot **)(*((_QWORD *)this + 4) + 8 * v9 + 8);
      *v5 = 18;
      v13 = *((_DWORD *)v12 + 12);
      if (v13 > 0x7F)
      {
        v5[1] = v13 | 0x80;
        v15 = v13 >> 7;
        if (v13 >> 14)
        {
          v16 = v5 + 2;
          do
          {
            v17 = v16;
            *v16++ = v15 | 0x80;
            v18 = v15 >> 7;
            v19 = v15 >> 14;
            v15 >>= 7;
          }
          while (v19);
          v14 = (google::protobuf::UnknownFieldSet *)(v17 + 2);
          *v16 = v18;
        }
        else
        {
          v5[2] = v15;
          v14 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
        }
      }
      else
      {
        v5[1] = v13;
        v14 = (google::protobuf::UnknownFieldSet *)(v5 + 2);
      }
      v5 = (char *)SnippetUI::IntentsUI_Standard_Slot::InternalSerializeWithCachedSizesToArray(v12, v14, a3, a4);
      if (++v9 == v8)
        goto LABEL_22;
    }
    v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    if ((v9 & 0x80000000) == 0)
      goto LABEL_9;
LABEL_8:
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v34, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1538);
    v10 = google::protobuf::internal::LogMessage::operator<<(v34, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v33, (const char **)&v10->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v34[0].__r_.__value_.__l.__data_);
    goto LABEL_9;
  }
LABEL_22:
  v20 = (google::protobuf::internal *)*((_QWORD *)this + 6);
  if (*((char *)v20 + 23) < 0)
  {
    v21 = (const char *)*((_QWORD *)v20 + 1);
    if (!v21)
      goto LABEL_30;
    v20 = *(google::protobuf::internal **)v20;
    goto LABEL_29;
  }
  v21 = (const char *)*((unsigned __int8 *)v20 + 23);
  if (*((_BYTE *)v20 + 23))
  {
LABEL_29:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v20, v21, 1, (google::protobuf::internal *)"SnippetUI.IntentsUI_Standard.component_name");
    v5 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 3, *((_QWORD *)this + 6), v5);
  }
LABEL_30:
  if (*((_BYTE *)this + 64))
  {
    if ((unint64_t)v5 >= *(_QWORD *)a3)
    {
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
      v22 = *((_BYTE *)this + 64);
    }
    else
    {
      v22 = 1;
    }
    *v5 = 32;
    v5[1] = v22;
    v5 += 2;
  }
  if (this != (SnippetUI::IntentsUI_Standard *)&SnippetUI::_IntentsUI_Standard_default_instance_)
  {
    v23 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 7);
    if (v23)
    {
      if ((unint64_t)v5 >= *(_QWORD *)a3)
      {
        v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
        v23 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 7);
      }
      *v5 = 42;
      v24 = *((_DWORD *)v23 + 12);
      if (v24 > 0x7F)
      {
        v5[1] = v24 | 0x80;
        v26 = v24 >> 7;
        if (v24 >> 14)
        {
          v27 = v5 + 2;
          do
          {
            v28 = v27;
            *v27++ = v26 | 0x80;
            v29 = v26 >> 7;
            v30 = v26 >> 14;
            v26 >>= 7;
          }
          while (v30);
          v25 = (google::protobuf::UnknownFieldSet *)(v28 + 2);
          *v27 = v29;
        }
        else
        {
          v5[2] = v26;
          v25 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
        }
      }
      else
      {
        v5[1] = v24;
        v25 = (google::protobuf::UnknownFieldSet *)(v5 + 2);
      }
      v5 = (char *)SnippetUI::ActionProperty::InternalSerializeWithCachedSizesToArray(v23, v25, a3, a4);
    }
  }
  v31 = *((_QWORD *)this + 1);
  if ((v31 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v31 & 0xFFFFFFFFFFFFFFFELL), (const google::protobuf::UnknownFieldSet *)v5, a3, a4);
  else
    return (const google::protobuf::UnknownFieldSet *)v5;
}

void sub_1BFBE9E7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void SnippetUI::IntentsUI_Standard::CopyFrom(SnippetUI::IntentsUI_Standard *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    SnippetUI::IntentsUI_Standard::Clear(this);
    SnippetUI::IntentsUI_Standard::MergeFrom(this, a2);
  }
}

void SnippetUI::IntentsUI_Standard::MergeFrom(SnippetUI::IntentsUI_Standard *this, const google::protobuf::Message *lpsrc)
{
  std::string *v4;
  const SnippetUI::IntentsUI_Standard *v5;
  google::protobuf::Message *v6;
  char v7;
  std::string v8[2];

  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Response.pb.cc", 5889);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5)
    SnippetUI::IntentsUI_Standard::MergeFrom(this, v5);
  else
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
}

void sub_1BFBE9F7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::IntentsUI_Standard::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 68) = a2;
  return this;
}

uint64_t SnippetUI::IntentsUI_Standard::GetMetadata(SnippetUI::IntentsUI_Standard *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_Response_2eproto);
  return qword_1EF583428;
}

void InitDefaultsscc_info_Response_Section_Response_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Response.pb.cc", a4);
  SnippetUI::Response_Section::Response_Section((SnippetUI::Response_Section *)&SnippetUI::_Response_Section_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_Response_Section_default_instance_, v4);
}

SnippetUI::Response_Section *SnippetUI::Response_Section::Response_Section(SnippetUI::Response_Section *this)
{
  *(_QWORD *)this = &off_1E7936870;
  *(_OWORD *)((char *)this + 8) = 0u;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_DWORD *)this + 22) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  if (atomic_load(scc_info_Response_Section_Response_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Response_Section_Response_2eproto);
  *((_BYTE *)this + 84) = 0;
  return this;
}

void sub_1BFBEA098(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  google::protobuf::RepeatedField<int>::~RepeatedField(v3);
  google::protobuf::RepeatedField<int>::~RepeatedField(v2 + 40);
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((google::protobuf::internal::RepeatedPtrFieldBase *)(v2 + 16));
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::Response_Section::~Response_Section(SnippetUI::Response_Section *this)
{
  SnippetUI::Response_Section::~Response_Section(this);
  JUMPOUT(0x1C3B8D890);
}

{
  uint64_t *v2;

  *(_QWORD *)this = &off_1E7936870;
  v2 = (uint64_t *)((char *)this + 8);
  google::protobuf::RepeatedField<int>::~RepeatedField((char *)this + 64);
  google::protobuf::RepeatedField<int>::~RepeatedField((char *)this + 40);
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((SnippetUI::Response_Section *)((char *)this + 16));
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v2);
}

SnippetUI::Response_Section *SnippetUI::Response_Section::New(SnippetUI::Response_Section *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Response_Section>(0);
}

SnippetUI::Response_Section *SnippetUI::Response_Section::New(SnippetUI::Response_Section *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Response_Section>(a2);
}

void SnippetUI::Response_Section::Clear(SnippetUI::Response_Section *this)
{
  char *v2;
  char v3;

  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::Response_Component>::TypeHandler>((uint64_t)this + 16);
  v3 = *((_BYTE *)this + 8);
  v2 = (char *)this + 8;
  *((_DWORD *)v2 + 8) = 0;
  *((_DWORD *)v2 + 14) = 0;
  v2[76] = 0;
  if ((v3 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoClear((google::protobuf::internal::InternalMetadataWithArena *)v2);
}

uint64_t SnippetUI::Response_Section::IsInitialized(SnippetUI::Response_Section *this)
{
  return 1;
}

char *SnippetUI::Response_Section::ByteSizeLong(SnippetUI::Response_Section *this)
{
  uint64_t v2;
  uint64_t v3;
  SnippetUI::Response_Component **v4;
  uint64_t v5;
  SnippetUI::Response_Component *v6;
  char *v7;
  int v8;
  uint64_t v9;
  int i;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  const google::protobuf::UnknownFieldSet *v23;

  v2 = *((int *)this + 6);
  v3 = *((_QWORD *)this + 4);
  if (v3)
    v4 = (SnippetUI::Response_Component **)(v3 + 8);
  else
    v4 = 0;
  if ((_DWORD)v2)
  {
    v5 = 8 * v2;
    do
    {
      v6 = *v4++;
      v7 = SnippetUI::Response_Component::ByteSizeLong(v6);
      v2 += (uint64_t)&v7[(9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6];
      v5 -= 8;
    }
    while (v5);
  }
  else
  {
    v2 = 0;
  }
  v8 = *((_DWORD *)this + 10);
  if (!v8)
  {
    v9 = 0;
LABEL_19:
    v14 = 0;
    goto LABEL_22;
  }
  v9 = 0;
  for (i = 0; i != v8; ++i)
  {
    v11 = *(_DWORD *)google::protobuf::RepeatedField<int>::Get((_DWORD *)this + 10, i);
    if (v11 < 0)
      v12 = 10;
    else
      v12 = (9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6;
    v9 += v12;
  }
  if (!v9)
    goto LABEL_19;
  if ((v9 & 0x80000000) != 0)
    v13 = 11;
  else
    v13 = ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6) + 1;
  v2 += v13;
  v14 = v9;
LABEL_22:
  *((_DWORD *)this + 14) = v14;
  v15 = v2 + v9;
  v16 = *((_DWORD *)this + 16);
  if (!v16)
  {
    v18 = 0;
LABEL_32:
    v22 = 0;
    goto LABEL_35;
  }
  v17 = 0;
  v18 = 0;
  do
  {
    v19 = *(_DWORD *)google::protobuf::RepeatedField<int>::Get((_DWORD *)this + 16, v17);
    if (v19 < 0)
      v20 = 10;
    else
      v20 = (9 * (__clz(v19 | 1) ^ 0x1F) + 73) >> 6;
    v18 += v20;
    ++v17;
  }
  while (v16 != v17);
  if (!v18)
    goto LABEL_32;
  if ((v18 & 0x80000000) != 0)
    v21 = 11;
  else
    v21 = ((9 * (__clz(v18 | 1) ^ 0x1F) + 73) >> 6) + 1;
  v15 += v21;
  v22 = v18;
LABEL_35:
  *((_DWORD *)this + 20) = v22;
  if (*((_BYTE *)this + 84))
    v23 = (const google::protobuf::UnknownFieldSet *)(v15 + v18 + 2);
  else
    v23 = (const google::protobuf::UnknownFieldSet *)(v15 + v18);
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::Response_Section *)((char *)this + 8), v23, (_DWORD *)this + 22);
  *((_DWORD *)this + 22) = (_DWORD)v23;
  return (char *)v23;
}

uint64_t SnippetUI::Response_Section::GetCachedSize(SnippetUI::Response_Section *this)
{
  return *((unsigned int *)this + 22);
}

google::protobuf::internal *SnippetUI::Response_Section::_InternalParse(SnippetUI::Response_Section *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  google::protobuf::internal *v5;
  google::protobuf::internal *v6;
  unsigned int *v7;
  uint64_t *v8;
  google::protobuf::internal::ParseContext *v9;
  google::protobuf::internal::ParseContext *v10;
  google::protobuf::internal *TagFallback;
  char *v12;
  char *v13;
  google::protobuf::internal *v14;
  int *v15;
  uint64_t v16;
  int v17;
  SnippetUI::Response_Component *v18;
  uint64_t v19;
  uint64_t v20;
  google::protobuf::internal *v21;
  char *v22;
  google::protobuf::internal *v23;
  unint64_t v24;
  int v25;
  google::protobuf::internal *v26;
  uint64_t v27;
  int v28;
  int v29;
  BOOL v30;
  google::protobuf::internal *v32;

  v32 = a2;
  v5 = (SnippetUI::Response_Section *)((char *)this + 64);
  v6 = (SnippetUI::Response_Section *)((char *)this + 40);
  v7 = (unsigned int *)((char *)this + 16);
  v8 = (uint64_t *)((char *)this + 8);
LABEL_2:
  while (2)
  {
    if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v32, *((_DWORD *)a3 + 23)) & 1) != 0)
      return v32;
    TagFallback = (google::protobuf::internal *)((char *)v32 + 1);
    v12 = (char *)*(unsigned __int8 *)v32;
    if ((*(char *)v32 & 0x80000000) == 0)
      goto LABEL_6;
    v12 = (char *)(v12 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v32 + 2);
LABEL_6:
      v32 = TagFallback;
      goto LABEL_7;
    }
    TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v32, v12);
    v32 = TagFallback;
    if (!TagFallback)
      return TagFallback;
LABEL_7:
    switch(v12 >> 3)
    {
      case 1u:
        if (v12 != 10)
          goto LABEL_41;
        v13 = (char *)TagFallback - 1;
        while (1)
        {
          v14 = (google::protobuf::internal *)(v13 + 1);
          v32 = (google::protobuf::internal *)(v13 + 1);
          v15 = (int *)*((_QWORD *)this + 4);
          if (!v15)
            break;
          v16 = *((int *)this + 6);
          v17 = *v15;
          if ((int)v16 >= *v15)
          {
            if (v17 == *((_DWORD *)this + 7))
            {
LABEL_15:
              google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v7, v17 + 1);
              v15 = (int *)*((_QWORD *)this + 4);
              v17 = *v15;
            }
            *v15 = v17 + 1;
            v18 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Response_Component>(*((google::protobuf::internal::ArenaImpl **)this
                                                                                             + 2));
            v19 = *((_QWORD *)this + 4);
            v20 = *((int *)this + 6);
            *((_DWORD *)this + 6) = v20 + 1;
            *(_QWORD *)(v19 + 8 * v20 + 8) = v18;
            v14 = v32;
            goto LABEL_17;
          }
          *((_DWORD *)this + 6) = v16 + 1;
          v18 = *(SnippetUI::Response_Component **)&v15[2 * v16 + 2];
LABEL_17:
          v13 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::Response_Component>(a3, v18, v14);
          v32 = (google::protobuf::internal *)v13;
          if (!v13)
            return 0;
          if (*(_QWORD *)a3 <= (unint64_t)v13 || *v13 != 10)
            goto LABEL_2;
        }
        v17 = *((_DWORD *)this + 7);
        goto LABEL_15;
      case 2u:
        if (v12 == 18)
        {
          v21 = v6;
LABEL_25:
          v22 = google::protobuf::internal::PackedInt32Parser(v21, TagFallback, a3, v9);
          goto LABEL_46;
        }
        if (v12 != 16)
          goto LABEL_41;
        v28 = google::protobuf::internal::ReadVarint(&v32, (const char **)v12);
        if (!v32)
          return 0;
        SnippetUI::ImageElement::_internal_add_idioms((uint64_t)this, v28);
        continue;
      case 3u:
        if (v12 == 26)
        {
          v21 = v5;
          goto LABEL_25;
        }
        if (v12 == 24)
        {
          v29 = google::protobuf::internal::ReadVarint(&v32, (const char **)v12);
          if (!v32)
            return 0;
          SnippetUI::Response_Section::_internal_add_idioms((uint64_t)this, v29);
          continue;
        }
LABEL_41:
        if ((_DWORD)v12)
          v30 = (v12 & 7) == 4;
        else
          v30 = 1;
        if (v30)
        {
          *((_DWORD *)a3 + 20) = (_DWORD)v12 - 1;
          return TagFallback;
        }
        v22 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v12, v8, TagFallback, a3, v10);
LABEL_46:
        v32 = (google::protobuf::internal *)v22;
        if (v22)
          continue;
        return 0;
      case 4u:
        if (v12 != 32)
          goto LABEL_41;
        v23 = (google::protobuf::internal *)((char *)TagFallback + 1);
        v24 = *(unsigned __int8 *)TagFallback;
        if ((*(char *)TagFallback & 0x80000000) == 0)
          goto LABEL_30;
        v25 = *(char *)v23;
        v24 = v24 + (v25 << 7) - 128;
        if (v25 < 0)
        {
          v26 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(TagFallback, v24);
          v32 = v26;
          *((_BYTE *)this + 84) = v27 != 0;
          if (!v26)
            return 0;
        }
        else
        {
          v23 = (google::protobuf::internal *)((char *)TagFallback + 2);
LABEL_30:
          v32 = v23;
          *((_BYTE *)this + 84) = v24 != 0;
        }
        continue;
      default:
        goto LABEL_41;
    }
  }
}

const google::protobuf::UnknownFieldSet *SnippetUI::Response_Section::InternalSerializeWithCachedSizesToArray(SnippetUI::Response_Section *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  int v7;
  int i;
  SnippetUI::Response_Component *v9;
  google::protobuf::io::EpsCopyOutputStream *v10;
  unsigned int v11;
  google::protobuf::UnknownFieldSet *v12;
  unsigned int v13;
  _BYTE *v14;
  _BYTE *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unint64_t v19;
  std::string *v20;
  _BYTE *v21;
  int *v22;
  int *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _BYTE *v27;
  _BYTE *v28;
  unint64_t v29;
  unint64_t v30;
  unsigned int v31;
  unint64_t v32;
  std::string *v33;
  _BYTE *v34;
  int *v35;
  int *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  _BYTE *v40;
  _BYTE *v41;
  unint64_t v42;
  unint64_t v43;
  char v44;
  uint64_t v45;
  unsigned int v47;
  unsigned int v48;
  char v49;
  std::string v50[2];

  v7 = *((_DWORD *)this + 6);
  if (v7)
  {
    for (i = 0; i != v7; ++i)
    {
      if ((unint64_t)a2 >= *(_QWORD *)a3)
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      v9 = (SnippetUI::Response_Component *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<SnippetUI::Response_Component>::TypeHandler>((uint64_t)this + 16, i);
      *(_BYTE *)a2 = 10;
      v11 = *((_DWORD *)v9 + 8);
      if (v11 > 0x7F)
      {
        *((_BYTE *)a2 + 1) = v11 | 0x80;
        v13 = v11 >> 7;
        if (v11 >> 14)
        {
          v14 = (char *)a2 + 2;
          do
          {
            v15 = v14;
            *v14++ = v13 | 0x80;
            v16 = v13 >> 7;
            v17 = v13 >> 14;
            v13 >>= 7;
          }
          while (v17);
          v12 = (google::protobuf::UnknownFieldSet *)(v15 + 2);
          *v14 = v16;
        }
        else
        {
          *((_BYTE *)a2 + 2) = v13;
          v12 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 3);
        }
      }
      else
      {
        *((_BYTE *)a2 + 1) = v11;
        v12 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 2);
      }
      a2 = SnippetUI::Response_Component::InternalSerializeWithCachedSizesToArray(v9, v12, a3, v10);
    }
  }
  v18 = *((_DWORD *)this + 14);
  if ((int)v18 > 0)
  {
    v19 = *(_QWORD *)a3;
    if ((unint64_t)a2 >= *(_QWORD *)a3)
    {
      a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      v19 = *(_QWORD *)a3;
    }
    if (v19 <= (unint64_t)a2)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v50, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/io/coded_stream.h", 856);
      v20 = google::protobuf::internal::LogMessage::operator<<(v50, "CHECK failed: ptr < end_: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v49, (const char **)&v20->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v50[0].__r_.__value_.__l.__data_);
    }
    *(_BYTE *)a2 = 18;
    v21 = (char *)a2 + 1;
    if (v18 >= 0x80)
    {
      do
      {
        *v21++ = v18 | 0x80;
        v47 = v18 >> 14;
        v18 >>= 7;
      }
      while (v47);
      a2 = (google::protobuf::UnknownFieldSet *)(v21 - 1);
    }
    a2 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 2);
    *v21 = v18;
    v22 = (int *)*((_QWORD *)this + 6);
    v23 = &v22[*((int *)this + 10)];
    do
    {
      if ((unint64_t)a2 >= *(_QWORD *)a3)
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      v25 = *v22++;
      v24 = v25;
      if (v25 > 0x7F)
      {
        *(_BYTE *)a2 = v24 | 0x80;
        v26 = v24 >> 7;
        if (v24 >> 14)
        {
          v27 = (char *)a2 + 1;
          do
          {
            v28 = v27;
            *v27++ = v26 | 0x80;
            v29 = v26 >> 7;
            v30 = v26 >> 14;
            v26 >>= 7;
          }
          while (v30);
          a2 = (google::protobuf::UnknownFieldSet *)(v28 + 2);
          *v27 = v29;
        }
        else
        {
          *((_BYTE *)a2 + 1) = v26;
          a2 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 2);
        }
      }
      else
      {
        *(_BYTE *)a2 = v24;
        a2 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 1);
      }
    }
    while (v22 < v23);
  }
  v31 = *((_DWORD *)this + 20);
  if ((int)v31 >= 1)
  {
    v32 = *(_QWORD *)a3;
    if ((unint64_t)a2 >= *(_QWORD *)a3)
    {
      a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      v32 = *(_QWORD *)a3;
    }
    if (v32 <= (unint64_t)a2)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v50, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/io/coded_stream.h", 856);
      v33 = google::protobuf::internal::LogMessage::operator<<(v50, "CHECK failed: ptr < end_: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v49, (const char **)&v33->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v50[0].__r_.__value_.__l.__data_);
    }
    *(_BYTE *)a2 = 26;
    v34 = (char *)a2 + 1;
    if (v31 >= 0x80)
    {
      do
      {
        *v34++ = v31 | 0x80;
        v48 = v31 >> 14;
        v31 >>= 7;
      }
      while (v48);
      a2 = (google::protobuf::UnknownFieldSet *)(v34 - 1);
    }
    a2 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 2);
    *v34 = v31;
    v35 = (int *)*((_QWORD *)this + 9);
    v36 = &v35[*((int *)this + 16)];
    do
    {
      if ((unint64_t)a2 >= *(_QWORD *)a3)
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      v38 = *v35++;
      v37 = v38;
      if (v38 > 0x7F)
      {
        *(_BYTE *)a2 = v37 | 0x80;
        v39 = v37 >> 7;
        if (v37 >> 14)
        {
          v40 = (char *)a2 + 1;
          do
          {
            v41 = v40;
            *v40++ = v39 | 0x80;
            v42 = v39 >> 7;
            v43 = v39 >> 14;
            v39 >>= 7;
          }
          while (v43);
          a2 = (google::protobuf::UnknownFieldSet *)(v41 + 2);
          *v40 = v42;
        }
        else
        {
          *((_BYTE *)a2 + 1) = v39;
          a2 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 2);
        }
      }
      else
      {
        *(_BYTE *)a2 = v37;
        a2 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 1);
      }
    }
    while (v35 < v36);
  }
  if (*((_BYTE *)this + 84))
  {
    if ((unint64_t)a2 >= *(_QWORD *)a3)
    {
      a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      v44 = *((_BYTE *)this + 84);
    }
    else
    {
      v44 = 1;
    }
    *(_BYTE *)a2 = 32;
    *((_BYTE *)a2 + 1) = v44;
    a2 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 2);
  }
  v45 = *((_QWORD *)this + 1);
  if ((v45 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v45 & 0xFFFFFFFFFFFFFFFELL), a2, a3, a4);
  return a2;
}

void sub_1BFBEAA10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void SnippetUI::Response_Section::CopyFrom(SnippetUI::Response_Section *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    SnippetUI::Response_Section::Clear(this);
    SnippetUI::Response_Section::MergeFrom(this, a2);
  }
}

void SnippetUI::Response_Section::MergeFrom(SnippetUI::Response_Section *this, const google::protobuf::Message *lpsrc)
{
  std::string *v4;
  const SnippetUI::Response_Section *v5;
  google::protobuf::Message *v6;
  char v7;
  std::string v8[2];

  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Response.pb.cc", 878);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5)
    SnippetUI::Response_Section::MergeFrom(this, v5);
  else
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
}

void sub_1BFBEAB10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::Response_Section::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 88) = a2;
  return this;
}

uint64_t SnippetUI::Response_Section::GetMetadata(SnippetUI::Response_Section *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_Response_2eproto);
  return file_level_metadata_Response_2eproto;
}

void *SnippetUI::Response_Section::default_instance(SnippetUI::Response_Section *this)
{
  if (atomic_load(scc_info_Response_Section_Response_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Response_Section_Response_2eproto);
  return &SnippetUI::_Response_Section_default_instance_;
}

void SnippetUI::Response_Section::MergeFrom(SnippetUI::Response_Section *this, const SnippetUI::Response_Section *a2)
{
  std::string *v4;
  uint64_t v5;
  char v6;
  std::string v7[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Response.pb.cc", 893);
    v4 = google::protobuf::internal::LogMessage::operator<<(v7, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v6, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v7[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::Response_Section *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<SnippetUI::Response_Component>::TypeHandler>((int **)this + 2, (uint64_t)a2 + 16);
  google::protobuf::RepeatedField<int>::MergeFrom((int *)this + 10, (int *)a2 + 10);
  google::protobuf::RepeatedField<int>::MergeFrom((int *)this + 16, (int *)a2 + 16);
  if (*((_BYTE *)a2 + 84))
    *((_BYTE *)this + 84) = 1;
}

void sub_1BFBEAC44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

const google::protobuf::UnknownFieldSet *SnippetUI::Response_Component::InternalSerializeWithCachedSizesToArray(SnippetUI::Response_Component *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  char *v5;
  int v7;
  SnippetUI::CustomCanvas *v8;
  unsigned int v9;
  char *v10;
  unsigned int v11;
  _BYTE *v12;
  _BYTE *v13;
  unsigned int v14;
  unsigned int v15;
  SnippetUI::FactItem_Standard *v16;
  unsigned int v17;
  google::protobuf::UnknownFieldSet *v18;
  unsigned int v19;
  _BYTE *v20;
  _BYTE *v21;
  unsigned int v22;
  unsigned int v23;
  SnippetUI::FactItem_ShortNumber *v24;
  unsigned int v25;
  google::protobuf::UnknownFieldSet *v26;
  unsigned int v27;
  _BYTE *v28;
  _BYTE *v29;
  unsigned int v30;
  unsigned int v31;
  SnippetUI::FactItem_HeroNumber *v32;
  unsigned int v33;
  google::protobuf::UnknownFieldSet *v34;
  unsigned int v35;
  _BYTE *v36;
  _BYTE *v37;
  unsigned int v38;
  unsigned int v39;
  SnippetUI::SummaryItem_Standard *v40;
  unsigned int v41;
  google::protobuf::UnknownFieldSet *v42;
  unsigned int v43;
  _BYTE *v44;
  _BYTE *v45;
  unsigned int v46;
  unsigned int v47;
  SnippetUI::SummaryItem_ShortNumber *v48;
  unsigned int v49;
  google::protobuf::UnknownFieldSet *v50;
  unsigned int v51;
  _BYTE *v52;
  _BYTE *v53;
  unsigned int v54;
  unsigned int v55;
  SnippetUI::SummaryItem_Text *v56;
  unsigned int v57;
  google::protobuf::UnknownFieldSet *v58;
  unsigned int v59;
  _BYTE *v60;
  _BYTE *v61;
  unsigned int v62;
  unsigned int v63;
  SnippetUI::SummaryItem_LargeText *v64;
  unsigned int v65;
  google::protobuf::UnknownFieldSet *v66;
  unsigned int v67;
  _BYTE *v68;
  _BYTE *v69;
  unsigned int v70;
  unsigned int v71;
  SnippetUI::SummaryItem_DetailedText *v72;
  unsigned int v73;
  google::protobuf::UnknownFieldSet *v74;
  unsigned int v75;
  _BYTE *v76;
  _BYTE *v77;
  unsigned int v78;
  unsigned int v79;
  SnippetUI::SimpleItem_Standard *v80;
  unsigned int v81;
  google::protobuf::UnknownFieldSet *v82;
  unsigned int v83;
  _BYTE *v84;
  _BYTE *v85;
  unsigned int v86;
  unsigned int v87;
  SnippetUI::SimpleItem_Rich *v88;
  unsigned int v89;
  google::protobuf::UnknownFieldSet *v90;
  unsigned int v91;
  _BYTE *v92;
  _BYTE *v93;
  unsigned int v94;
  unsigned int v95;
  SnippetUI::SimpleItem_Visual *v96;
  unsigned int v97;
  google::protobuf::UnknownFieldSet *v98;
  unsigned int v99;
  _BYTE *v100;
  _BYTE *v101;
  unsigned int v102;
  unsigned int v103;
  SnippetUI::PrimaryHeader_Standard *v104;
  unsigned int v105;
  google::protobuf::UnknownFieldSet *v106;
  unsigned int v107;
  _BYTE *v108;
  _BYTE *v109;
  unsigned int v110;
  unsigned int v111;
  SnippetUI::PrimaryHeader_Marquee *v112;
  unsigned int v113;
  google::protobuf::UnknownFieldSet *v114;
  unsigned int v115;
  _BYTE *v116;
  _BYTE *v117;
  unsigned int v118;
  unsigned int v119;
  SnippetUI::PrimaryHeader_Rich *v120;
  unsigned int v121;
  google::protobuf::UnknownFieldSet *v122;
  unsigned int v123;
  _BYTE *v124;
  _BYTE *v125;
  unsigned int v126;
  unsigned int v127;
  SnippetUI::SecondaryHeader_Standard *v128;
  unsigned int v129;
  google::protobuf::UnknownFieldSet *v130;
  unsigned int v131;
  _BYTE *v132;
  _BYTE *v133;
  unsigned int v134;
  unsigned int v135;
  SnippetUI::Button *v136;
  unsigned int v137;
  google::protobuf::UnknownFieldSet *v138;
  unsigned int v139;
  _BYTE *v140;
  _BYTE *v141;
  unsigned int v142;
  unsigned int v143;
  SnippetUI::BinaryButton *v144;
  unsigned int v145;
  google::protobuf::UnknownFieldSet *v146;
  unsigned int v147;
  _BYTE *v148;
  _BYTE *v149;
  unsigned int v150;
  unsigned int v151;
  SnippetUI::StatusIndicator_Success *v152;
  unsigned int v153;
  google::protobuf::UnknownFieldSet *v154;
  unsigned int v155;
  _BYTE *v156;
  _BYTE *v157;
  unsigned int v158;
  unsigned int v159;
  SnippetUI::StatusIndicator_Error *v160;
  unsigned int v161;
  google::protobuf::UnknownFieldSet *v162;
  unsigned int v163;
  _BYTE *v164;
  _BYTE *v165;
  unsigned int v166;
  unsigned int v167;
  SnippetUI::StatusIndicator_InProgress *v168;
  unsigned int v169;
  google::protobuf::UnknownFieldSet *v170;
  unsigned int v171;
  _BYTE *v172;
  _BYTE *v173;
  unsigned int v174;
  unsigned int v175;
  SnippetUI::StatusIndicator_Cancelled *v176;
  unsigned int v177;
  google::protobuf::UnknownFieldSet *v178;
  unsigned int v179;
  _BYTE *v180;
  _BYTE *v181;
  unsigned int v182;
  unsigned int v183;
  SnippetUI::TextInput *v184;
  unsigned int v185;
  char *v186;
  unsigned int v187;
  _BYTE *v188;
  _BYTE *v189;
  unsigned int v190;
  unsigned int v191;
  SnippetUI::Control_Switch *v192;
  unsigned int v193;
  google::protobuf::UnknownFieldSet *v194;
  unsigned int v195;
  _BYTE *v196;
  _BYTE *v197;
  unsigned int v198;
  unsigned int v199;
  SnippetUI::Control_Slider *v200;
  unsigned int v201;
  google::protobuf::UnknownFieldSet *v202;
  unsigned int v203;
  _BYTE *v204;
  _BYTE *v205;
  unsigned int v206;
  unsigned int v207;
  unsigned __int8 *v208;
  const char *v209;
  uint64_t *v210;
  SnippetUI::Reference_Standard *v211;
  unsigned int v212;
  google::protobuf::UnknownFieldSet *v213;
  unsigned int v214;
  _BYTE *v215;
  _BYTE *v216;
  unsigned int v217;
  unsigned int v218;
  SnippetUI::Reference_Logo *v219;
  unsigned int v220;
  google::protobuf::UnknownFieldSet *v221;
  unsigned int v222;
  _BYTE *v223;
  _BYTE *v224;
  unsigned int v225;
  unsigned int v226;
  SnippetUI::Reference_Rich *v227;
  unsigned int v228;
  google::protobuf::UnknownFieldSet *v229;
  unsigned int v230;
  _BYTE *v231;
  _BYTE *v232;
  unsigned int v233;
  unsigned int v234;
  SnippetUI::Reference_Button *v235;
  unsigned int v236;
  google::protobuf::UnknownFieldSet *v237;
  unsigned int v238;
  _BYTE *v239;
  _BYTE *v240;
  unsigned int v241;
  unsigned int v242;
  SnippetUI::SummaryItem_Pair *v243;
  unsigned int v244;
  google::protobuf::UnknownFieldSet *v245;
  unsigned int v246;
  _BYTE *v247;
  _BYTE *v248;
  unsigned int v249;
  unsigned int v250;
  SnippetUI::SummaryItem_PairNumber *v251;
  unsigned int v252;
  google::protobuf::UnknownFieldSet *v253;
  unsigned int v254;
  _BYTE *v255;
  _BYTE *v256;
  unsigned int v257;
  unsigned int v258;
  SnippetUI::SummaryItem_Button *v259;
  unsigned int v260;
  google::protobuf::UnknownFieldSet *v261;
  unsigned int v262;
  _BYTE *v263;
  _BYTE *v264;
  unsigned int v265;
  unsigned int v266;
  SnippetUI::FactItem_Button *v267;
  unsigned int v268;
  google::protobuf::UnknownFieldSet *v269;
  unsigned int v270;
  _BYTE *v271;
  _BYTE *v272;
  unsigned int v273;
  unsigned int v274;
  SnippetUI::Table *v275;
  unsigned int v276;
  google::protobuf::UnknownFieldSet *v277;
  unsigned int v278;
  _BYTE *v279;
  _BYTE *v280;
  unsigned int v281;
  unsigned int v282;
  SnippetUI::Reference_Footnote *v283;
  unsigned int v284;
  google::protobuf::UnknownFieldSet *v285;
  unsigned int v286;
  _BYTE *v287;
  _BYTE *v288;
  unsigned int v289;
  unsigned int v290;
  SnippetUI::LongItem_Text *v291;
  unsigned int v292;
  google::protobuf::UnknownFieldSet *v293;
  unsigned int v294;
  _BYTE *v295;
  _BYTE *v296;
  unsigned int v297;
  unsigned int v298;
  SnippetUI::Visualization_Chart *v299;
  unsigned int v300;
  google::protobuf::UnknownFieldSet *v301;
  unsigned int v302;
  _BYTE *v303;
  _BYTE *v304;
  unsigned int v305;
  unsigned int v306;
  SnippetUI::SummaryItem_Player *v307;
  unsigned int v308;
  google::protobuf::UnknownFieldSet *v309;
  unsigned int v310;
  _BYTE *v311;
  _BYTE *v312;
  unsigned int v313;
  unsigned int v314;
  SnippetUI::SimpleItem_Player *v315;
  unsigned int v316;
  google::protobuf::UnknownFieldSet *v317;
  unsigned int v318;
  _BYTE *v319;
  _BYTE *v320;
  unsigned int v321;
  unsigned int v322;
  SnippetUI::SimpleItem_ReverseRich *v323;
  unsigned int v324;
  google::protobuf::UnknownFieldSet *v325;
  unsigned int v326;
  _BYTE *v327;
  _BYTE *v328;
  unsigned int v329;
  unsigned int v330;
  SnippetUI::SecondaryHeader_Emphasized *v331;
  unsigned int v332;
  google::protobuf::UnknownFieldSet *v333;
  unsigned int v334;
  _BYTE *v335;
  _BYTE *v336;
  unsigned int v337;
  unsigned int v338;
  SnippetUI::SummaryItem_Switch *v339;
  unsigned int v340;
  google::protobuf::UnknownFieldSet *v341;
  unsigned int v342;
  _BYTE *v343;
  _BYTE *v344;
  unsigned int v345;
  unsigned int v346;
  SnippetUI::SystemText_ClarificationTitle *v347;
  unsigned int v348;
  google::protobuf::UnknownFieldSet *v349;
  unsigned int v350;
  _BYTE *v351;
  _BYTE *v352;
  unsigned int v353;
  unsigned int v354;
  SnippetUI::Visualization_Image *v355;
  unsigned int v356;
  google::protobuf::UnknownFieldSet *v357;
  unsigned int v358;
  _BYTE *v359;
  _BYTE *v360;
  unsigned int v361;
  unsigned int v362;
  SnippetUI::Visualization_Map *v363;
  unsigned int v364;
  google::protobuf::UnknownFieldSet *v365;
  unsigned int v366;
  _BYTE *v367;
  _BYTE *v368;
  unsigned int v369;
  unsigned int v370;
  SnippetUI::Button_Container *v371;
  unsigned int v372;
  google::protobuf::UnknownFieldSet *v373;
  unsigned int v374;
  _BYTE *v375;
  _BYTE *v376;
  unsigned int v377;
  unsigned int v378;
  SnippetUI::IntentsUI_Standard *v379;
  unsigned int v380;
  char *v381;
  unsigned int v382;
  _BYTE *v383;
  _BYTE *v384;
  unsigned int v385;
  unsigned int v386;
  SnippetUI::Sash_Standard *v387;
  unsigned int v388;
  google::protobuf::UnknownFieldSet *v389;
  unsigned int v390;
  _BYTE *v391;
  _BYTE *v392;
  unsigned int v393;
  unsigned int v394;
  SnippetUI::HeroHeader *v395;
  unsigned int v396;
  google::protobuf::UnknownFieldSet *v397;
  unsigned int v398;
  _BYTE *v399;
  _BYTE *v400;
  unsigned int v401;
  unsigned int v402;
  SnippetUI::HorizontalList_Standard *v403;
  unsigned int v404;
  google::protobuf::UnknownFieldSet *v405;
  unsigned int v406;
  _BYTE *v407;
  _BYTE *v408;
  unsigned int v409;
  unsigned int v410;
  SnippetUI::SectionHeader_Standard *v411;
  unsigned int v412;
  google::protobuf::UnknownFieldSet *v413;
  unsigned int v414;
  _BYTE *v415;
  _BYTE *v416;
  unsigned int v417;
  unsigned int v418;
  SnippetUI::SectionHeader_Rich *v419;
  unsigned int v420;
  google::protobuf::UnknownFieldSet *v421;
  unsigned int v422;
  _BYTE *v423;
  _BYTE *v424;
  unsigned int v425;
  unsigned int v426;
  SnippetUI::KeyValue_Standard *v427;
  unsigned int v428;
  google::protobuf::UnknownFieldSet *v429;
  unsigned int v430;
  _BYTE *v431;
  _BYTE *v432;
  unsigned int v433;
  unsigned int v434;
  SnippetUI::TertiaryHeader_Standard *v435;
  unsigned int v436;
  google::protobuf::UnknownFieldSet *v437;
  unsigned int v438;
  _BYTE *v439;
  _BYTE *v440;
  unsigned int v441;
  unsigned int v442;
  SnippetUI::SimpleItem_RichSearchResult *v443;
  unsigned int v444;
  google::protobuf::UnknownFieldSet *v445;
  unsigned int v446;
  _BYTE *v447;
  _BYTE *v448;
  unsigned int v449;
  unsigned int v450;
  SnippetUI::Separators *v451;
  unsigned int v452;
  char *v453;
  unsigned int v454;
  _BYTE *v455;
  _BYTE *v456;
  unsigned int v457;
  unsigned int v458;
  int v459;
  SnippetUI::SummaryItem_PairNumberV2 *v460;
  unsigned int v461;
  google::protobuf::UnknownFieldSet *v462;
  unsigned int v463;
  _BYTE *v464;
  _BYTE *v465;
  unsigned int v466;
  unsigned int v467;
  SnippetUI::SummaryItem_PairV2 *v468;
  unsigned int v469;
  google::protobuf::UnknownFieldSet *v470;
  unsigned int v471;
  _BYTE *v472;
  _BYTE *v473;
  unsigned int v474;
  unsigned int v475;
  SnippetUI::Control_PlayerButton *v476;
  unsigned int v477;
  google::protobuf::UnknownFieldSet *v478;
  unsigned int v479;
  _BYTE *v480;
  _BYTE *v481;
  unsigned int v482;
  unsigned int v483;
  SnippetUI::SummaryItem_SwitchV2 *v484;
  unsigned int v485;
  google::protobuf::UnknownFieldSet *v486;
  unsigned int v487;
  _BYTE *v488;
  _BYTE *v489;
  unsigned int v490;
  unsigned int v491;
  uint64_t v492;

  v5 = (char *)a2;
  v7 = *((_DWORD *)this + 9);
  if (v7 == 1)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
    v8 = (SnippetUI::CustomCanvas *)*((_QWORD *)this + 3);
    *v5 = 10;
    v9 = *((_DWORD *)v8 + 13);
    if (v9 > 0x7F)
    {
      v5[1] = v9 | 0x80;
      v11 = v9 >> 7;
      if (v9 >> 14)
      {
        v12 = v5 + 2;
        do
        {
          v13 = v12;
          *v12++ = v11 | 0x80;
          v14 = v11 >> 7;
          v15 = v11 >> 14;
          v11 >>= 7;
        }
        while (v15);
        v10 = v13 + 2;
        *v12 = v14;
      }
      else
      {
        v5[2] = v11;
        v10 = v5 + 3;
      }
    }
    else
    {
      v5[1] = v9;
      v10 = v5 + 2;
    }
    v5 = (char *)SnippetUI::CustomCanvas::InternalSerializeWithCachedSizesToArray(v8, v10, a3, a4);
    v7 = *((_DWORD *)this + 9);
  }
  if (v7 == 2)
  {
    if ((unint64_t)v5 >= *(_QWORD *)a3)
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v16 = (SnippetUI::FactItem_Standard *)*((_QWORD *)this + 3);
    *v5 = 18;
    v17 = *((_DWORD *)v16 + 22);
    if (v17 > 0x7F)
    {
      v5[1] = v17 | 0x80;
      v19 = v17 >> 7;
      if (v17 >> 14)
      {
        v20 = v5 + 2;
        do
        {
          v21 = v20;
          *v20++ = v19 | 0x80;
          v22 = v19 >> 7;
          v23 = v19 >> 14;
          v19 >>= 7;
        }
        while (v23);
        v18 = (google::protobuf::UnknownFieldSet *)(v21 + 2);
        *v20 = v22;
      }
      else
      {
        v5[2] = v19;
        v18 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
      }
    }
    else
    {
      v5[1] = v17;
      v18 = (google::protobuf::UnknownFieldSet *)(v5 + 2);
    }
    v5 = (char *)SnippetUI::FactItem_Standard::InternalSerializeWithCachedSizesToArray(v16, v18, a3, a4);
    v7 = *((_DWORD *)this + 9);
  }
  if (v7 == 3)
  {
    if ((unint64_t)v5 >= *(_QWORD *)a3)
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v24 = (SnippetUI::FactItem_ShortNumber *)*((_QWORD *)this + 3);
    *v5 = 26;
    v25 = *((_DWORD *)v24 + 24);
    if (v25 > 0x7F)
    {
      v5[1] = v25 | 0x80;
      v27 = v25 >> 7;
      if (v25 >> 14)
      {
        v28 = v5 + 2;
        do
        {
          v29 = v28;
          *v28++ = v27 | 0x80;
          v30 = v27 >> 7;
          v31 = v27 >> 14;
          v27 >>= 7;
        }
        while (v31);
        v26 = (google::protobuf::UnknownFieldSet *)(v29 + 2);
        *v28 = v30;
      }
      else
      {
        v5[2] = v27;
        v26 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
      }
    }
    else
    {
      v5[1] = v25;
      v26 = (google::protobuf::UnknownFieldSet *)(v5 + 2);
    }
    v5 = (char *)SnippetUI::FactItem_ShortNumber::InternalSerializeWithCachedSizesToArray(v24, v26, a3, a4);
    v7 = *((_DWORD *)this + 9);
  }
  if (v7 == 4)
  {
    if ((unint64_t)v5 >= *(_QWORD *)a3)
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v32 = (SnippetUI::FactItem_HeroNumber *)*((_QWORD *)this + 3);
    *v5 = 34;
    v33 = *((_DWORD *)v32 + 22);
    if (v33 > 0x7F)
    {
      v5[1] = v33 | 0x80;
      v35 = v33 >> 7;
      if (v33 >> 14)
      {
        v36 = v5 + 2;
        do
        {
          v37 = v36;
          *v36++ = v35 | 0x80;
          v38 = v35 >> 7;
          v39 = v35 >> 14;
          v35 >>= 7;
        }
        while (v39);
        v34 = (google::protobuf::UnknownFieldSet *)(v37 + 2);
        *v36 = v38;
      }
      else
      {
        v5[2] = v35;
        v34 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
      }
    }
    else
    {
      v5[1] = v33;
      v34 = (google::protobuf::UnknownFieldSet *)(v5 + 2);
    }
    v5 = (char *)SnippetUI::FactItem_HeroNumber::InternalSerializeWithCachedSizesToArray(v32, v34, a3, a4);
    v7 = *((_DWORD *)this + 9);
  }
  if (v7 == 5)
  {
    if ((unint64_t)v5 >= *(_QWORD *)a3)
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v40 = (SnippetUI::SummaryItem_Standard *)*((_QWORD *)this + 3);
    *v5 = 42;
    v41 = *((_DWORD *)v40 + 20);
    if (v41 > 0x7F)
    {
      v5[1] = v41 | 0x80;
      v43 = v41 >> 7;
      if (v41 >> 14)
      {
        v44 = v5 + 2;
        do
        {
          v45 = v44;
          *v44++ = v43 | 0x80;
          v46 = v43 >> 7;
          v47 = v43 >> 14;
          v43 >>= 7;
        }
        while (v47);
        v42 = (google::protobuf::UnknownFieldSet *)(v45 + 2);
        *v44 = v46;
      }
      else
      {
        v5[2] = v43;
        v42 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
      }
    }
    else
    {
      v5[1] = v41;
      v42 = (google::protobuf::UnknownFieldSet *)(v5 + 2);
    }
    v5 = (char *)SnippetUI::SummaryItem_Standard::InternalSerializeWithCachedSizesToArray(v40, v42, a3, a4);
    v7 = *((_DWORD *)this + 9);
  }
  if (v7 == 6)
  {
    if ((unint64_t)v5 >= *(_QWORD *)a3)
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v48 = (SnippetUI::SummaryItem_ShortNumber *)*((_QWORD *)this + 3);
    *v5 = 50;
    v49 = *((_DWORD *)v48 + 26);
    if (v49 > 0x7F)
    {
      v5[1] = v49 | 0x80;
      v51 = v49 >> 7;
      if (v49 >> 14)
      {
        v52 = v5 + 2;
        do
        {
          v53 = v52;
          *v52++ = v51 | 0x80;
          v54 = v51 >> 7;
          v55 = v51 >> 14;
          v51 >>= 7;
        }
        while (v55);
        v50 = (google::protobuf::UnknownFieldSet *)(v53 + 2);
        *v52 = v54;
      }
      else
      {
        v5[2] = v51;
        v50 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
      }
    }
    else
    {
      v5[1] = v49;
      v50 = (google::protobuf::UnknownFieldSet *)(v5 + 2);
    }
    v5 = (char *)SnippetUI::SummaryItem_ShortNumber::InternalSerializeWithCachedSizesToArray(v48, v50, a3, a4);
    v7 = *((_DWORD *)this + 9);
  }
  if (v7 == 7)
  {
    if ((unint64_t)v5 >= *(_QWORD *)a3)
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v56 = (SnippetUI::SummaryItem_Text *)*((_QWORD *)this + 3);
    *v5 = 58;
    v57 = *((_DWORD *)v56 + 20);
    if (v57 > 0x7F)
    {
      v5[1] = v57 | 0x80;
      v59 = v57 >> 7;
      if (v57 >> 14)
      {
        v60 = v5 + 2;
        do
        {
          v61 = v60;
          *v60++ = v59 | 0x80;
          v62 = v59 >> 7;
          v63 = v59 >> 14;
          v59 >>= 7;
        }
        while (v63);
        v58 = (google::protobuf::UnknownFieldSet *)(v61 + 2);
        *v60 = v62;
      }
      else
      {
        v5[2] = v59;
        v58 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
      }
    }
    else
    {
      v5[1] = v57;
      v58 = (google::protobuf::UnknownFieldSet *)(v5 + 2);
    }
    v5 = (char *)SnippetUI::SummaryItem_Text::InternalSerializeWithCachedSizesToArray(v56, v58, a3, a4);
    v7 = *((_DWORD *)this + 9);
  }
  if (v7 == 8)
  {
    if ((unint64_t)v5 >= *(_QWORD *)a3)
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v64 = (SnippetUI::SummaryItem_LargeText *)*((_QWORD *)this + 3);
    *v5 = 66;
    v65 = *((_DWORD *)v64 + 16);
    if (v65 > 0x7F)
    {
      v5[1] = v65 | 0x80;
      v67 = v65 >> 7;
      if (v65 >> 14)
      {
        v68 = v5 + 2;
        do
        {
          v69 = v68;
          *v68++ = v67 | 0x80;
          v70 = v67 >> 7;
          v71 = v67 >> 14;
          v67 >>= 7;
        }
        while (v71);
        v66 = (google::protobuf::UnknownFieldSet *)(v69 + 2);
        *v68 = v70;
      }
      else
      {
        v5[2] = v67;
        v66 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
      }
    }
    else
    {
      v5[1] = v65;
      v66 = (google::protobuf::UnknownFieldSet *)(v5 + 2);
    }
    v5 = (char *)SnippetUI::SummaryItem_LargeText::InternalSerializeWithCachedSizesToArray(v64, v66, a3, a4);
    v7 = *((_DWORD *)this + 9);
  }
  if (v7 == 9)
  {
    if ((unint64_t)v5 >= *(_QWORD *)a3)
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v72 = (SnippetUI::SummaryItem_DetailedText *)*((_QWORD *)this + 3);
    *v5 = 74;
    v73 = *((_DWORD *)v72 + 24);
    if (v73 > 0x7F)
    {
      v5[1] = v73 | 0x80;
      v75 = v73 >> 7;
      if (v73 >> 14)
      {
        v76 = v5 + 2;
        do
        {
          v77 = v76;
          *v76++ = v75 | 0x80;
          v78 = v75 >> 7;
          v79 = v75 >> 14;
          v75 >>= 7;
        }
        while (v79);
        v74 = (google::protobuf::UnknownFieldSet *)(v77 + 2);
        *v76 = v78;
      }
      else
      {
        v5[2] = v75;
        v74 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
      }
    }
    else
    {
      v5[1] = v73;
      v74 = (google::protobuf::UnknownFieldSet *)(v5 + 2);
    }
    v5 = (char *)SnippetUI::SummaryItem_DetailedText::InternalSerializeWithCachedSizesToArray(v72, v74, a3, a4);
    v7 = *((_DWORD *)this + 9);
  }
  if (v7 == 10)
  {
    if ((unint64_t)v5 >= *(_QWORD *)a3)
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v80 = (SnippetUI::SimpleItem_Standard *)*((_QWORD *)this + 3);
    *v5 = 82;
    v81 = *((_DWORD *)v80 + 22);
    if (v81 > 0x7F)
    {
      v5[1] = v81 | 0x80;
      v83 = v81 >> 7;
      if (v81 >> 14)
      {
        v84 = v5 + 2;
        do
        {
          v85 = v84;
          *v84++ = v83 | 0x80;
          v86 = v83 >> 7;
          v87 = v83 >> 14;
          v83 >>= 7;
        }
        while (v87);
        v82 = (google::protobuf::UnknownFieldSet *)(v85 + 2);
        *v84 = v86;
      }
      else
      {
        v5[2] = v83;
        v82 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
      }
    }
    else
    {
      v5[1] = v81;
      v82 = (google::protobuf::UnknownFieldSet *)(v5 + 2);
    }
    v5 = (char *)SnippetUI::SimpleItem_Standard::InternalSerializeWithCachedSizesToArray(v80, v82, a3, a4);
    v7 = *((_DWORD *)this + 9);
  }
  if (v7 == 11)
  {
    if ((unint64_t)v5 >= *(_QWORD *)a3)
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v88 = (SnippetUI::SimpleItem_Rich *)*((_QWORD *)this + 3);
    *v5 = 90;
    v89 = *((_DWORD *)v88 + 28);
    if (v89 > 0x7F)
    {
      v5[1] = v89 | 0x80;
      v91 = v89 >> 7;
      if (v89 >> 14)
      {
        v92 = v5 + 2;
        do
        {
          v93 = v92;
          *v92++ = v91 | 0x80;
          v94 = v91 >> 7;
          v95 = v91 >> 14;
          v91 >>= 7;
        }
        while (v95);
        v90 = (google::protobuf::UnknownFieldSet *)(v93 + 2);
        *v92 = v94;
      }
      else
      {
        v5[2] = v91;
        v90 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
      }
    }
    else
    {
      v5[1] = v89;
      v90 = (google::protobuf::UnknownFieldSet *)(v5 + 2);
    }
    v5 = (char *)SnippetUI::SimpleItem_Rich::InternalSerializeWithCachedSizesToArray(v88, v90, a3, a4);
    v7 = *((_DWORD *)this + 9);
  }
  if (v7 == 12)
  {
    if ((unint64_t)v5 >= *(_QWORD *)a3)
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v96 = (SnippetUI::SimpleItem_Visual *)*((_QWORD *)this + 3);
    *v5 = 98;
    v97 = *((_DWORD *)v96 + 18);
    if (v97 > 0x7F)
    {
      v5[1] = v97 | 0x80;
      v99 = v97 >> 7;
      if (v97 >> 14)
      {
        v100 = v5 + 2;
        do
        {
          v101 = v100;
          *v100++ = v99 | 0x80;
          v102 = v99 >> 7;
          v103 = v99 >> 14;
          v99 >>= 7;
        }
        while (v103);
        v98 = (google::protobuf::UnknownFieldSet *)(v101 + 2);
        *v100 = v102;
      }
      else
      {
        v5[2] = v99;
        v98 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
      }
    }
    else
    {
      v5[1] = v97;
      v98 = (google::protobuf::UnknownFieldSet *)(v5 + 2);
    }
    v5 = (char *)SnippetUI::SimpleItem_Visual::InternalSerializeWithCachedSizesToArray(v96, v98, a3, a4);
    v7 = *((_DWORD *)this + 9);
  }
  if (v7 == 13)
  {
    if ((unint64_t)v5 >= *(_QWORD *)a3)
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v104 = (SnippetUI::PrimaryHeader_Standard *)*((_QWORD *)this + 3);
    *v5 = 106;
    v105 = *((_DWORD *)v104 + 14);
    if (v105 > 0x7F)
    {
      v5[1] = v105 | 0x80;
      v107 = v105 >> 7;
      if (v105 >> 14)
      {
        v108 = v5 + 2;
        do
        {
          v109 = v108;
          *v108++ = v107 | 0x80;
          v110 = v107 >> 7;
          v111 = v107 >> 14;
          v107 >>= 7;
        }
        while (v111);
        v106 = (google::protobuf::UnknownFieldSet *)(v109 + 2);
        *v108 = v110;
      }
      else
      {
        v5[2] = v107;
        v106 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
      }
    }
    else
    {
      v5[1] = v105;
      v106 = (google::protobuf::UnknownFieldSet *)(v5 + 2);
    }
    v5 = (char *)SnippetUI::PrimaryHeader_Standard::InternalSerializeWithCachedSizesToArray(v104, v106, a3, a4);
    v7 = *((_DWORD *)this + 9);
  }
  if (v7 == 14)
  {
    if ((unint64_t)v5 >= *(_QWORD *)a3)
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v112 = (SnippetUI::PrimaryHeader_Marquee *)*((_QWORD *)this + 3);
    *v5 = 114;
    v113 = *((_DWORD *)v112 + 14);
    if (v113 > 0x7F)
    {
      v5[1] = v113 | 0x80;
      v115 = v113 >> 7;
      if (v113 >> 14)
      {
        v116 = v5 + 2;
        do
        {
          v117 = v116;
          *v116++ = v115 | 0x80;
          v118 = v115 >> 7;
          v119 = v115 >> 14;
          v115 >>= 7;
        }
        while (v119);
        v114 = (google::protobuf::UnknownFieldSet *)(v117 + 2);
        *v116 = v118;
      }
      else
      {
        v5[2] = v115;
        v114 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
      }
    }
    else
    {
      v5[1] = v113;
      v114 = (google::protobuf::UnknownFieldSet *)(v5 + 2);
    }
    v5 = (char *)SnippetUI::PrimaryHeader_Marquee::InternalSerializeWithCachedSizesToArray(v112, v114, a3, a4);
    v7 = *((_DWORD *)this + 9);
  }
  if (v7 == 15)
  {
    if ((unint64_t)v5 >= *(_QWORD *)a3)
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v120 = (SnippetUI::PrimaryHeader_Rich *)*((_QWORD *)this + 3);
    *v5 = 122;
    v121 = *((_DWORD *)v120 + 18);
    if (v121 > 0x7F)
    {
      v5[1] = v121 | 0x80;
      v123 = v121 >> 7;
      if (v121 >> 14)
      {
        v124 = v5 + 2;
        do
        {
          v125 = v124;
          *v124++ = v123 | 0x80;
          v126 = v123 >> 7;
          v127 = v123 >> 14;
          v123 >>= 7;
        }
        while (v127);
        v122 = (google::protobuf::UnknownFieldSet *)(v125 + 2);
        *v124 = v126;
      }
      else
      {
        v5[2] = v123;
        v122 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
      }
    }
    else
    {
      v5[1] = v121;
      v122 = (google::protobuf::UnknownFieldSet *)(v5 + 2);
    }
    v5 = (char *)SnippetUI::PrimaryHeader_Rich::InternalSerializeWithCachedSizesToArray(v120, v122, a3, a4);
    v7 = *((_DWORD *)this + 9);
  }
  if (v7 == 16)
  {
    if ((unint64_t)v5 >= *(_QWORD *)a3)
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v128 = (SnippetUI::SecondaryHeader_Standard *)*((_QWORD *)this + 3);
    *(_WORD *)v5 = 386;
    v129 = *((_DWORD *)v128 + 10);
    if (v129 > 0x7F)
    {
      v5[2] = v129 | 0x80;
      v131 = v129 >> 7;
      if (v129 >> 14)
      {
        v132 = v5 + 3;
        do
        {
          v133 = v132;
          *v132++ = v131 | 0x80;
          v134 = v131 >> 7;
          v135 = v131 >> 14;
          v131 >>= 7;
        }
        while (v135);
        v130 = (google::protobuf::UnknownFieldSet *)(v133 + 2);
        *v132 = v134;
      }
      else
      {
        v5[3] = v131;
        v130 = (google::protobuf::UnknownFieldSet *)(v5 + 4);
      }
    }
    else
    {
      v5[2] = v129;
      v130 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
    }
    v5 = (char *)SnippetUI::SecondaryHeader_Standard::InternalSerializeWithCachedSizesToArray(v128, v130, a3, a4);
    v7 = *((_DWORD *)this + 9);
  }
  if (v7 == 17)
  {
    if ((unint64_t)v5 >= *(_QWORD *)a3)
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v136 = (SnippetUI::Button *)*((_QWORD *)this + 3);
    *(_WORD *)v5 = 394;
    v137 = *((_DWORD *)v136 + 17);
    if (v137 > 0x7F)
    {
      v5[2] = v137 | 0x80;
      v139 = v137 >> 7;
      if (v137 >> 14)
      {
        v140 = v5 + 3;
        do
        {
          v141 = v140;
          *v140++ = v139 | 0x80;
          v142 = v139 >> 7;
          v143 = v139 >> 14;
          v139 >>= 7;
        }
        while (v143);
        v138 = (google::protobuf::UnknownFieldSet *)(v141 + 2);
        *v140 = v142;
      }
      else
      {
        v5[3] = v139;
        v138 = (google::protobuf::UnknownFieldSet *)(v5 + 4);
      }
    }
    else
    {
      v5[2] = v137;
      v138 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
    }
    v5 = (char *)SnippetUI::Button::InternalSerializeWithCachedSizesToArray(v136, v138, a3, a4);
    v7 = *((_DWORD *)this + 9);
  }
  if (v7 == 18)
  {
    if ((unint64_t)v5 >= *(_QWORD *)a3)
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v144 = (SnippetUI::BinaryButton *)*((_QWORD *)this + 3);
    *(_WORD *)v5 = 402;
    v145 = *((_DWORD *)v144 + 12);
    if (v145 > 0x7F)
    {
      v5[2] = v145 | 0x80;
      v147 = v145 >> 7;
      if (v145 >> 14)
      {
        v148 = v5 + 3;
        do
        {
          v149 = v148;
          *v148++ = v147 | 0x80;
          v150 = v147 >> 7;
          v151 = v147 >> 14;
          v147 >>= 7;
        }
        while (v151);
        v146 = (google::protobuf::UnknownFieldSet *)(v149 + 2);
        *v148 = v150;
      }
      else
      {
        v5[3] = v147;
        v146 = (google::protobuf::UnknownFieldSet *)(v5 + 4);
      }
    }
    else
    {
      v5[2] = v145;
      v146 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
    }
    v5 = (char *)SnippetUI::BinaryButton::InternalSerializeWithCachedSizesToArray(v144, v146, a3, a4);
    v7 = *((_DWORD *)this + 9);
  }
  if (v7 == 19)
  {
    if ((unint64_t)v5 >= *(_QWORD *)a3)
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v152 = (SnippetUI::StatusIndicator_Success *)*((_QWORD *)this + 3);
    *(_WORD *)v5 = 410;
    v153 = *((_DWORD *)v152 + 12);
    if (v153 > 0x7F)
    {
      v5[2] = v153 | 0x80;
      v155 = v153 >> 7;
      if (v153 >> 14)
      {
        v156 = v5 + 3;
        do
        {
          v157 = v156;
          *v156++ = v155 | 0x80;
          v158 = v155 >> 7;
          v159 = v155 >> 14;
          v155 >>= 7;
        }
        while (v159);
        v154 = (google::protobuf::UnknownFieldSet *)(v157 + 2);
        *v156 = v158;
      }
      else
      {
        v5[3] = v155;
        v154 = (google::protobuf::UnknownFieldSet *)(v5 + 4);
      }
    }
    else
    {
      v5[2] = v153;
      v154 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
    }
    v5 = (char *)SnippetUI::StatusIndicator_Success::InternalSerializeWithCachedSizesToArray(v152, v154, a3, a4);
    v7 = *((_DWORD *)this + 9);
  }
  if (v7 == 20)
  {
    if ((unint64_t)v5 >= *(_QWORD *)a3)
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v160 = (SnippetUI::StatusIndicator_Error *)*((_QWORD *)this + 3);
    *(_WORD *)v5 = 418;
    v161 = *((_DWORD *)v160 + 12);
    if (v161 > 0x7F)
    {
      v5[2] = v161 | 0x80;
      v163 = v161 >> 7;
      if (v161 >> 14)
      {
        v164 = v5 + 3;
        do
        {
          v165 = v164;
          *v164++ = v163 | 0x80;
          v166 = v163 >> 7;
          v167 = v163 >> 14;
          v163 >>= 7;
        }
        while (v167);
        v162 = (google::protobuf::UnknownFieldSet *)(v165 + 2);
        *v164 = v166;
      }
      else
      {
        v5[3] = v163;
        v162 = (google::protobuf::UnknownFieldSet *)(v5 + 4);
      }
    }
    else
    {
      v5[2] = v161;
      v162 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
    }
    v5 = (char *)SnippetUI::StatusIndicator_Error::InternalSerializeWithCachedSizesToArray(v160, v162, a3, a4);
    v7 = *((_DWORD *)this + 9);
  }
  if (v7 == 21)
  {
    if ((unint64_t)v5 >= *(_QWORD *)a3)
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v168 = (SnippetUI::StatusIndicator_InProgress *)*((_QWORD *)this + 3);
    *(_WORD *)v5 = 426;
    v169 = *((_DWORD *)v168 + 12);
    if (v169 > 0x7F)
    {
      v5[2] = v169 | 0x80;
      v171 = v169 >> 7;
      if (v169 >> 14)
      {
        v172 = v5 + 3;
        do
        {
          v173 = v172;
          *v172++ = v171 | 0x80;
          v174 = v171 >> 7;
          v175 = v171 >> 14;
          v171 >>= 7;
        }
        while (v175);
        v170 = (google::protobuf::UnknownFieldSet *)(v173 + 2);
        *v172 = v174;
      }
      else
      {
        v5[3] = v171;
        v170 = (google::protobuf::UnknownFieldSet *)(v5 + 4);
      }
    }
    else
    {
      v5[2] = v169;
      v170 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
    }
    v5 = (char *)SnippetUI::StatusIndicator_InProgress::InternalSerializeWithCachedSizesToArray(v168, v170, a3, a4);
    v7 = *((_DWORD *)this + 9);
  }
  if (v7 == 22)
  {
    if ((unint64_t)v5 >= *(_QWORD *)a3)
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v176 = (SnippetUI::StatusIndicator_Cancelled *)*((_QWORD *)this + 3);
    *(_WORD *)v5 = 434;
    v177 = *((_DWORD *)v176 + 12);
    if (v177 > 0x7F)
    {
      v5[2] = v177 | 0x80;
      v179 = v177 >> 7;
      if (v177 >> 14)
      {
        v180 = v5 + 3;
        do
        {
          v181 = v180;
          *v180++ = v179 | 0x80;
          v182 = v179 >> 7;
          v183 = v179 >> 14;
          v179 >>= 7;
        }
        while (v183);
        v178 = (google::protobuf::UnknownFieldSet *)(v181 + 2);
        *v180 = v182;
      }
      else
      {
        v5[3] = v179;
        v178 = (google::protobuf::UnknownFieldSet *)(v5 + 4);
      }
    }
    else
    {
      v5[2] = v177;
      v178 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
    }
    v5 = (char *)SnippetUI::StatusIndicator_Cancelled::InternalSerializeWithCachedSizesToArray(v176, v178, a3, a4);
    v7 = *((_DWORD *)this + 9);
  }
  if (v7 == 23)
  {
    if ((unint64_t)v5 >= *(_QWORD *)a3)
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v184 = (SnippetUI::TextInput *)*((_QWORD *)this + 3);
    *(_WORD *)v5 = 442;
    v185 = *((_DWORD *)v184 + 18);
    if (v185 > 0x7F)
    {
      v5[2] = v185 | 0x80;
      v187 = v185 >> 7;
      if (v185 >> 14)
      {
        v188 = v5 + 3;
        do
        {
          v189 = v188;
          *v188++ = v187 | 0x80;
          v190 = v187 >> 7;
          v191 = v187 >> 14;
          v187 >>= 7;
        }
        while (v191);
        v186 = v189 + 2;
        *v188 = v190;
      }
      else
      {
        v5[3] = v187;
        v186 = v5 + 4;
      }
    }
    else
    {
      v5[2] = v185;
      v186 = v5 + 3;
    }
    v5 = (char *)SnippetUI::TextInput::InternalSerializeWithCachedSizesToArray(v184, v186, a3, a4);
    v7 = *((_DWORD *)this + 9);
  }
  if (v7 == 24)
  {
    if ((unint64_t)v5 >= *(_QWORD *)a3)
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v192 = (SnippetUI::Control_Switch *)*((_QWORD *)this + 3);
    *(_WORD *)v5 = 450;
    v193 = *((_DWORD *)v192 + 16);
    if (v193 > 0x7F)
    {
      v5[2] = v193 | 0x80;
      v195 = v193 >> 7;
      if (v193 >> 14)
      {
        v196 = v5 + 3;
        do
        {
          v197 = v196;
          *v196++ = v195 | 0x80;
          v198 = v195 >> 7;
          v199 = v195 >> 14;
          v195 >>= 7;
        }
        while (v199);
        v194 = (google::protobuf::UnknownFieldSet *)(v197 + 2);
        *v196 = v198;
      }
      else
      {
        v5[3] = v195;
        v194 = (google::protobuf::UnknownFieldSet *)(v5 + 4);
      }
    }
    else
    {
      v5[2] = v193;
      v194 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
    }
    v5 = (char *)SnippetUI::Control_Switch::InternalSerializeWithCachedSizesToArray(v192, v194, a3, a4);
    v7 = *((_DWORD *)this + 9);
  }
  if (v7 == 25)
  {
    if ((unint64_t)v5 >= *(_QWORD *)a3)
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v200 = (SnippetUI::Control_Slider *)*((_QWORD *)this + 3);
    *(_WORD *)v5 = 458;
    v201 = *((_DWORD *)v200 + 12);
    if (v201 > 0x7F)
    {
      v5[2] = v201 | 0x80;
      v203 = v201 >> 7;
      if (v201 >> 14)
      {
        v204 = v5 + 3;
        do
        {
          v205 = v204;
          *v204++ = v203 | 0x80;
          v206 = v203 >> 7;
          v207 = v203 >> 14;
          v203 >>= 7;
        }
        while (v207);
        v202 = (google::protobuf::UnknownFieldSet *)(v205 + 2);
        *v204 = v206;
      }
      else
      {
        v5[3] = v203;
        v202 = (google::protobuf::UnknownFieldSet *)(v5 + 4);
      }
    }
    else
    {
      v5[2] = v201;
      v202 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
    }
    v5 = (char *)SnippetUI::Control_Slider::InternalSerializeWithCachedSizesToArray(v200, v202, a3, a4);
    v7 = *((_DWORD *)this + 9);
  }
  if (v7 == 26)
  {
    v208 = (unsigned __int8 *)*((_QWORD *)this + 3);
    if ((char)v208[23] < 0)
    {
      v208 = *(unsigned __int8 **)v208;
      v209 = *(const char **)(*((_QWORD *)this + 3) + 8);
    }
    else
    {
      v209 = (const char *)v208[23];
    }
    google::protobuf::internal::WireFormatLite::VerifyUtf8String((google::protobuf::internal *)v208, v209, 1, (google::protobuf::internal *)"SnippetUI.Response.Component.group_id");
    if (*((_DWORD *)this + 9) == 26)
      v210 = (uint64_t *)*((_QWORD *)this + 3);
    else
      v210 = &google::protobuf::internal::fixed_address_empty_string;
    v5 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 26, (uint64_t)v210, v5);
    v7 = *((_DWORD *)this + 9);
  }
  if (v7 == 27)
  {
    if ((unint64_t)v5 >= *(_QWORD *)a3)
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v211 = (SnippetUI::Reference_Standard *)*((_QWORD *)this + 3);
    *(_WORD *)v5 = 474;
    v212 = *((_DWORD *)v211 + 10);
    if (v212 > 0x7F)
    {
      v5[2] = v212 | 0x80;
      v214 = v212 >> 7;
      if (v212 >> 14)
      {
        v215 = v5 + 3;
        do
        {
          v216 = v215;
          *v215++ = v214 | 0x80;
          v217 = v214 >> 7;
          v218 = v214 >> 14;
          v214 >>= 7;
        }
        while (v218);
        v213 = (google::protobuf::UnknownFieldSet *)(v216 + 2);
        *v215 = v217;
      }
      else
      {
        v5[3] = v214;
        v213 = (google::protobuf::UnknownFieldSet *)(v5 + 4);
      }
    }
    else
    {
      v5[2] = v212;
      v213 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
    }
    v5 = (char *)SnippetUI::Reference_Standard::InternalSerializeWithCachedSizesToArray(v211, v213, a3, a4);
    v7 = *((_DWORD *)this + 9);
  }
  if (v7 == 28)
  {
    if ((unint64_t)v5 >= *(_QWORD *)a3)
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v219 = (SnippetUI::Reference_Logo *)*((_QWORD *)this + 3);
    *(_WORD *)v5 = 482;
    v220 = *((_DWORD *)v219 + 10);
    if (v220 > 0x7F)
    {
      v5[2] = v220 | 0x80;
      v222 = v220 >> 7;
      if (v220 >> 14)
      {
        v223 = v5 + 3;
        do
        {
          v224 = v223;
          *v223++ = v222 | 0x80;
          v225 = v222 >> 7;
          v226 = v222 >> 14;
          v222 >>= 7;
        }
        while (v226);
        v221 = (google::protobuf::UnknownFieldSet *)(v224 + 2);
        *v223 = v225;
      }
      else
      {
        v5[3] = v222;
        v221 = (google::protobuf::UnknownFieldSet *)(v5 + 4);
      }
    }
    else
    {
      v5[2] = v220;
      v221 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
    }
    v5 = (char *)SnippetUI::Reference_Logo::InternalSerializeWithCachedSizesToArray(v219, v221, a3, a4);
    v7 = *((_DWORD *)this + 9);
  }
  if (v7 == 29)
  {
    if ((unint64_t)v5 >= *(_QWORD *)a3)
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v227 = (SnippetUI::Reference_Rich *)*((_QWORD *)this + 3);
    *(_WORD *)v5 = 490;
    v228 = *((_DWORD *)v227 + 14);
    if (v228 > 0x7F)
    {
      v5[2] = v228 | 0x80;
      v230 = v228 >> 7;
      if (v228 >> 14)
      {
        v231 = v5 + 3;
        do
        {
          v232 = v231;
          *v231++ = v230 | 0x80;
          v233 = v230 >> 7;
          v234 = v230 >> 14;
          v230 >>= 7;
        }
        while (v234);
        v229 = (google::protobuf::UnknownFieldSet *)(v232 + 2);
        *v231 = v233;
      }
      else
      {
        v5[3] = v230;
        v229 = (google::protobuf::UnknownFieldSet *)(v5 + 4);
      }
    }
    else
    {
      v5[2] = v228;
      v229 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
    }
    v5 = (char *)SnippetUI::Reference_Rich::InternalSerializeWithCachedSizesToArray(v227, v229, a3, a4);
    v7 = *((_DWORD *)this + 9);
  }
  if (v7 == 30)
  {
    if ((unint64_t)v5 >= *(_QWORD *)a3)
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v235 = (SnippetUI::Reference_Button *)*((_QWORD *)this + 3);
    *(_WORD *)v5 = 498;
    v236 = *((_DWORD *)v235 + 11);
    if (v236 > 0x7F)
    {
      v5[2] = v236 | 0x80;
      v238 = v236 >> 7;
      if (v236 >> 14)
      {
        v239 = v5 + 3;
        do
        {
          v240 = v239;
          *v239++ = v238 | 0x80;
          v241 = v238 >> 7;
          v242 = v238 >> 14;
          v238 >>= 7;
        }
        while (v242);
        v237 = (google::protobuf::UnknownFieldSet *)(v240 + 2);
        *v239 = v241;
      }
      else
      {
        v5[3] = v238;
        v237 = (google::protobuf::UnknownFieldSet *)(v5 + 4);
      }
    }
    else
    {
      v5[2] = v236;
      v237 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
    }
    v5 = (char *)SnippetUI::Reference_Button::InternalSerializeWithCachedSizesToArray(v235, v237, a3, a4);
    v7 = *((_DWORD *)this + 9);
  }
  if (v7 == 31)
  {
    if ((unint64_t)v5 >= *(_QWORD *)a3)
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v243 = (SnippetUI::SummaryItem_Pair *)*((_QWORD *)this + 3);
    *(_WORD *)v5 = 506;
    v244 = *((_DWORD *)v243 + 34);
    if (v244 > 0x7F)
    {
      v5[2] = v244 | 0x80;
      v246 = v244 >> 7;
      if (v244 >> 14)
      {
        v247 = v5 + 3;
        do
        {
          v248 = v247;
          *v247++ = v246 | 0x80;
          v249 = v246 >> 7;
          v250 = v246 >> 14;
          v246 >>= 7;
        }
        while (v250);
        v245 = (google::protobuf::UnknownFieldSet *)(v248 + 2);
        *v247 = v249;
      }
      else
      {
        v5[3] = v246;
        v245 = (google::protobuf::UnknownFieldSet *)(v5 + 4);
      }
    }
    else
    {
      v5[2] = v244;
      v245 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
    }
    v5 = (char *)SnippetUI::SummaryItem_Pair::InternalSerializeWithCachedSizesToArray(v243, v245, a3, a4);
    v7 = *((_DWORD *)this + 9);
  }
  if (v7 == 32)
  {
    if ((unint64_t)v5 >= *(_QWORD *)a3)
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v251 = (SnippetUI::SummaryItem_PairNumber *)*((_QWORD *)this + 3);
    *(_WORD *)v5 = 642;
    v252 = *((_DWORD *)v251 + 36);
    if (v252 > 0x7F)
    {
      v5[2] = v252 | 0x80;
      v254 = v252 >> 7;
      if (v252 >> 14)
      {
        v255 = v5 + 3;
        do
        {
          v256 = v255;
          *v255++ = v254 | 0x80;
          v257 = v254 >> 7;
          v258 = v254 >> 14;
          v254 >>= 7;
        }
        while (v258);
        v253 = (google::protobuf::UnknownFieldSet *)(v256 + 2);
        *v255 = v257;
      }
      else
      {
        v5[3] = v254;
        v253 = (google::protobuf::UnknownFieldSet *)(v5 + 4);
      }
    }
    else
    {
      v5[2] = v252;
      v253 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
    }
    v5 = (char *)SnippetUI::SummaryItem_PairNumber::InternalSerializeWithCachedSizesToArray(v251, v253, a3, a4);
    v7 = *((_DWORD *)this + 9);
  }
  if (v7 == 33)
  {
    if ((unint64_t)v5 >= *(_QWORD *)a3)
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v259 = (SnippetUI::SummaryItem_Button *)*((_QWORD *)this + 3);
    *(_WORD *)v5 = 650;
    v260 = *((_DWORD *)v259 + 26);
    if (v260 > 0x7F)
    {
      v5[2] = v260 | 0x80;
      v262 = v260 >> 7;
      if (v260 >> 14)
      {
        v263 = v5 + 3;
        do
        {
          v264 = v263;
          *v263++ = v262 | 0x80;
          v265 = v262 >> 7;
          v266 = v262 >> 14;
          v262 >>= 7;
        }
        while (v266);
        v261 = (google::protobuf::UnknownFieldSet *)(v264 + 2);
        *v263 = v265;
      }
      else
      {
        v5[3] = v262;
        v261 = (google::protobuf::UnknownFieldSet *)(v5 + 4);
      }
    }
    else
    {
      v5[2] = v260;
      v261 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
    }
    v5 = (char *)SnippetUI::SummaryItem_Button::InternalSerializeWithCachedSizesToArray(v259, v261, a3, a4);
    v7 = *((_DWORD *)this + 9);
  }
  if (v7 == 34)
  {
    if ((unint64_t)v5 >= *(_QWORD *)a3)
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v267 = (SnippetUI::FactItem_Button *)*((_QWORD *)this + 3);
    *(_WORD *)v5 = 658;
    v268 = *((_DWORD *)v267 + 28);
    if (v268 > 0x7F)
    {
      v5[2] = v268 | 0x80;
      v270 = v268 >> 7;
      if (v268 >> 14)
      {
        v271 = v5 + 3;
        do
        {
          v272 = v271;
          *v271++ = v270 | 0x80;
          v273 = v270 >> 7;
          v274 = v270 >> 14;
          v270 >>= 7;
        }
        while (v274);
        v269 = (google::protobuf::UnknownFieldSet *)(v272 + 2);
        *v271 = v273;
      }
      else
      {
        v5[3] = v270;
        v269 = (google::protobuf::UnknownFieldSet *)(v5 + 4);
      }
    }
    else
    {
      v5[2] = v268;
      v269 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
    }
    v5 = (char *)SnippetUI::FactItem_Button::InternalSerializeWithCachedSizesToArray(v267, v269, a3, a4);
    v7 = *((_DWORD *)this + 9);
  }
  if (v7 == 35)
  {
    if ((unint64_t)v5 >= *(_QWORD *)a3)
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v275 = (SnippetUI::Table *)*((_QWORD *)this + 3);
    *(_WORD *)v5 = 666;
    v276 = *((_DWORD *)v275 + 19);
    if (v276 > 0x7F)
    {
      v5[2] = v276 | 0x80;
      v278 = v276 >> 7;
      if (v276 >> 14)
      {
        v279 = v5 + 3;
        do
        {
          v280 = v279;
          *v279++ = v278 | 0x80;
          v281 = v278 >> 7;
          v282 = v278 >> 14;
          v278 >>= 7;
        }
        while (v282);
        v277 = (google::protobuf::UnknownFieldSet *)(v280 + 2);
        *v279 = v281;
      }
      else
      {
        v5[3] = v278;
        v277 = (google::protobuf::UnknownFieldSet *)(v5 + 4);
      }
    }
    else
    {
      v5[2] = v276;
      v277 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
    }
    v5 = (char *)SnippetUI::Table::InternalSerializeWithCachedSizesToArray(v275, v277, a3, a4);
    v7 = *((_DWORD *)this + 9);
  }
  if (v7 == 36)
  {
    if ((unint64_t)v5 >= *(_QWORD *)a3)
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v283 = (SnippetUI::Reference_Footnote *)*((_QWORD *)this + 3);
    *(_WORD *)v5 = 674;
    v284 = *((_DWORD *)v283 + 16);
    if (v284 > 0x7F)
    {
      v5[2] = v284 | 0x80;
      v286 = v284 >> 7;
      if (v284 >> 14)
      {
        v287 = v5 + 3;
        do
        {
          v288 = v287;
          *v287++ = v286 | 0x80;
          v289 = v286 >> 7;
          v290 = v286 >> 14;
          v286 >>= 7;
        }
        while (v290);
        v285 = (google::protobuf::UnknownFieldSet *)(v288 + 2);
        *v287 = v289;
      }
      else
      {
        v5[3] = v286;
        v285 = (google::protobuf::UnknownFieldSet *)(v5 + 4);
      }
    }
    else
    {
      v5[2] = v284;
      v285 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
    }
    v5 = (char *)SnippetUI::Reference_Footnote::InternalSerializeWithCachedSizesToArray(v283, v285, a3, a4);
    v7 = *((_DWORD *)this + 9);
  }
  if (v7 == 37)
  {
    if ((unint64_t)v5 >= *(_QWORD *)a3)
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v291 = (SnippetUI::LongItem_Text *)*((_QWORD *)this + 3);
    *(_WORD *)v5 = 682;
    v292 = *((_DWORD *)v291 + 10);
    if (v292 > 0x7F)
    {
      v5[2] = v292 | 0x80;
      v294 = v292 >> 7;
      if (v292 >> 14)
      {
        v295 = v5 + 3;
        do
        {
          v296 = v295;
          *v295++ = v294 | 0x80;
          v297 = v294 >> 7;
          v298 = v294 >> 14;
          v294 >>= 7;
        }
        while (v298);
        v293 = (google::protobuf::UnknownFieldSet *)(v296 + 2);
        *v295 = v297;
      }
      else
      {
        v5[3] = v294;
        v293 = (google::protobuf::UnknownFieldSet *)(v5 + 4);
      }
    }
    else
    {
      v5[2] = v292;
      v293 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
    }
    v5 = (char *)SnippetUI::LongItem_Text::InternalSerializeWithCachedSizesToArray(v291, v293, a3, a4);
    v7 = *((_DWORD *)this + 9);
  }
  if (v7 == 38)
  {
    if ((unint64_t)v5 >= *(_QWORD *)a3)
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v299 = (SnippetUI::Visualization_Chart *)*((_QWORD *)this + 3);
    *(_WORD *)v5 = 690;
    v300 = *((_DWORD *)v299 + 16);
    if (v300 > 0x7F)
    {
      v5[2] = v300 | 0x80;
      v302 = v300 >> 7;
      if (v300 >> 14)
      {
        v303 = v5 + 3;
        do
        {
          v304 = v303;
          *v303++ = v302 | 0x80;
          v305 = v302 >> 7;
          v306 = v302 >> 14;
          v302 >>= 7;
        }
        while (v306);
        v301 = (google::protobuf::UnknownFieldSet *)(v304 + 2);
        *v303 = v305;
      }
      else
      {
        v5[3] = v302;
        v301 = (google::protobuf::UnknownFieldSet *)(v5 + 4);
      }
    }
    else
    {
      v5[2] = v300;
      v301 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
    }
    v5 = (char *)SnippetUI::Visualization_Chart::InternalSerializeWithCachedSizesToArray(v299, v301, a3, a4);
    v7 = *((_DWORD *)this + 9);
  }
  if (v7 == 39)
  {
    if ((unint64_t)v5 >= *(_QWORD *)a3)
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v307 = (SnippetUI::SummaryItem_Player *)*((_QWORD *)this + 3);
    *(_WORD *)v5 = 698;
    v308 = *((_DWORD *)v307 + 26);
    if (v308 > 0x7F)
    {
      v5[2] = v308 | 0x80;
      v310 = v308 >> 7;
      if (v308 >> 14)
      {
        v311 = v5 + 3;
        do
        {
          v312 = v311;
          *v311++ = v310 | 0x80;
          v313 = v310 >> 7;
          v314 = v310 >> 14;
          v310 >>= 7;
        }
        while (v314);
        v309 = (google::protobuf::UnknownFieldSet *)(v312 + 2);
        *v311 = v313;
      }
      else
      {
        v5[3] = v310;
        v309 = (google::protobuf::UnknownFieldSet *)(v5 + 4);
      }
    }
    else
    {
      v5[2] = v308;
      v309 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
    }
    v5 = (char *)SnippetUI::SummaryItem_Player::InternalSerializeWithCachedSizesToArray(v307, v309, a3, a4);
    v7 = *((_DWORD *)this + 9);
  }
  if (v7 == 40)
  {
    if ((unint64_t)v5 >= *(_QWORD *)a3)
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v315 = (SnippetUI::SimpleItem_Player *)*((_QWORD *)this + 3);
    *(_WORD *)v5 = 706;
    v316 = *((_DWORD *)v315 + 24);
    if (v316 > 0x7F)
    {
      v5[2] = v316 | 0x80;
      v318 = v316 >> 7;
      if (v316 >> 14)
      {
        v319 = v5 + 3;
        do
        {
          v320 = v319;
          *v319++ = v318 | 0x80;
          v321 = v318 >> 7;
          v322 = v318 >> 14;
          v318 >>= 7;
        }
        while (v322);
        v317 = (google::protobuf::UnknownFieldSet *)(v320 + 2);
        *v319 = v321;
      }
      else
      {
        v5[3] = v318;
        v317 = (google::protobuf::UnknownFieldSet *)(v5 + 4);
      }
    }
    else
    {
      v5[2] = v316;
      v317 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
    }
    v5 = (char *)SnippetUI::SimpleItem_Player::InternalSerializeWithCachedSizesToArray(v315, v317, a3, a4);
    v7 = *((_DWORD *)this + 9);
  }
  if (v7 == 41)
  {
    if ((unint64_t)v5 >= *(_QWORD *)a3)
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v323 = (SnippetUI::SimpleItem_ReverseRich *)*((_QWORD *)this + 3);
    *(_WORD *)v5 = 714;
    v324 = *((_DWORD *)v323 + 20);
    if (v324 > 0x7F)
    {
      v5[2] = v324 | 0x80;
      v326 = v324 >> 7;
      if (v324 >> 14)
      {
        v327 = v5 + 3;
        do
        {
          v328 = v327;
          *v327++ = v326 | 0x80;
          v329 = v326 >> 7;
          v330 = v326 >> 14;
          v326 >>= 7;
        }
        while (v330);
        v325 = (google::protobuf::UnknownFieldSet *)(v328 + 2);
        *v327 = v329;
      }
      else
      {
        v5[3] = v326;
        v325 = (google::protobuf::UnknownFieldSet *)(v5 + 4);
      }
    }
    else
    {
      v5[2] = v324;
      v325 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
    }
    v5 = (char *)SnippetUI::SimpleItem_ReverseRich::InternalSerializeWithCachedSizesToArray(v323, v325, a3, a4);
    v7 = *((_DWORD *)this + 9);
  }
  if (v7 == 42)
  {
    if ((unint64_t)v5 >= *(_QWORD *)a3)
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v331 = (SnippetUI::SecondaryHeader_Emphasized *)*((_QWORD *)this + 3);
    *(_WORD *)v5 = 722;
    v332 = *((_DWORD *)v331 + 10);
    if (v332 > 0x7F)
    {
      v5[2] = v332 | 0x80;
      v334 = v332 >> 7;
      if (v332 >> 14)
      {
        v335 = v5 + 3;
        do
        {
          v336 = v335;
          *v335++ = v334 | 0x80;
          v337 = v334 >> 7;
          v338 = v334 >> 14;
          v334 >>= 7;
        }
        while (v338);
        v333 = (google::protobuf::UnknownFieldSet *)(v336 + 2);
        *v335 = v337;
      }
      else
      {
        v5[3] = v334;
        v333 = (google::protobuf::UnknownFieldSet *)(v5 + 4);
      }
    }
    else
    {
      v5[2] = v332;
      v333 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
    }
    v5 = (char *)SnippetUI::SecondaryHeader_Emphasized::InternalSerializeWithCachedSizesToArray(v331, v333, a3, a4);
    v7 = *((_DWORD *)this + 9);
  }
  if (v7 == 43)
  {
    if ((unint64_t)v5 >= *(_QWORD *)a3)
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v339 = (SnippetUI::SummaryItem_Switch *)*((_QWORD *)this + 3);
    *(_WORD *)v5 = 730;
    v340 = *((_DWORD *)v339 + 22);
    if (v340 > 0x7F)
    {
      v5[2] = v340 | 0x80;
      v342 = v340 >> 7;
      if (v340 >> 14)
      {
        v343 = v5 + 3;
        do
        {
          v344 = v343;
          *v343++ = v342 | 0x80;
          v345 = v342 >> 7;
          v346 = v342 >> 14;
          v342 >>= 7;
        }
        while (v346);
        v341 = (google::protobuf::UnknownFieldSet *)(v344 + 2);
        *v343 = v345;
      }
      else
      {
        v5[3] = v342;
        v341 = (google::protobuf::UnknownFieldSet *)(v5 + 4);
      }
    }
    else
    {
      v5[2] = v340;
      v341 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
    }
    v5 = (char *)SnippetUI::SummaryItem_Switch::InternalSerializeWithCachedSizesToArray(v339, v341, a3, a4);
    v7 = *((_DWORD *)this + 9);
  }
  if (v7 == 44)
  {
    if ((unint64_t)v5 >= *(_QWORD *)a3)
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v347 = (SnippetUI::SystemText_ClarificationTitle *)*((_QWORD *)this + 3);
    *(_WORD *)v5 = 738;
    v348 = *((_DWORD *)v347 + 10);
    if (v348 > 0x7F)
    {
      v5[2] = v348 | 0x80;
      v350 = v348 >> 7;
      if (v348 >> 14)
      {
        v351 = v5 + 3;
        do
        {
          v352 = v351;
          *v351++ = v350 | 0x80;
          v353 = v350 >> 7;
          v354 = v350 >> 14;
          v350 >>= 7;
        }
        while (v354);
        v349 = (google::protobuf::UnknownFieldSet *)(v352 + 2);
        *v351 = v353;
      }
      else
      {
        v5[3] = v350;
        v349 = (google::protobuf::UnknownFieldSet *)(v5 + 4);
      }
    }
    else
    {
      v5[2] = v348;
      v349 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
    }
    v5 = (char *)SnippetUI::SystemText_ClarificationTitle::InternalSerializeWithCachedSizesToArray(v347, v349, a3, a4);
    v7 = *((_DWORD *)this + 9);
  }
  if (v7 == 45)
  {
    if ((unint64_t)v5 >= *(_QWORD *)a3)
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v355 = (SnippetUI::Visualization_Image *)*((_QWORD *)this + 3);
    *(_WORD *)v5 = 746;
    v356 = *((_DWORD *)v355 + 16);
    if (v356 > 0x7F)
    {
      v5[2] = v356 | 0x80;
      v358 = v356 >> 7;
      if (v356 >> 14)
      {
        v359 = v5 + 3;
        do
        {
          v360 = v359;
          *v359++ = v358 | 0x80;
          v361 = v358 >> 7;
          v362 = v358 >> 14;
          v358 >>= 7;
        }
        while (v362);
        v357 = (google::protobuf::UnknownFieldSet *)(v360 + 2);
        *v359 = v361;
      }
      else
      {
        v5[3] = v358;
        v357 = (google::protobuf::UnknownFieldSet *)(v5 + 4);
      }
    }
    else
    {
      v5[2] = v356;
      v357 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
    }
    v5 = (char *)SnippetUI::Visualization_Image::InternalSerializeWithCachedSizesToArray(v355, v357, a3, a4);
    v7 = *((_DWORD *)this + 9);
  }
  if (v7 == 46)
  {
    if ((unint64_t)v5 >= *(_QWORD *)a3)
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v363 = (SnippetUI::Visualization_Map *)*((_QWORD *)this + 3);
    *(_WORD *)v5 = 754;
    v364 = *((_DWORD *)v363 + 16);
    if (v364 > 0x7F)
    {
      v5[2] = v364 | 0x80;
      v366 = v364 >> 7;
      if (v364 >> 14)
      {
        v367 = v5 + 3;
        do
        {
          v368 = v367;
          *v367++ = v366 | 0x80;
          v369 = v366 >> 7;
          v370 = v366 >> 14;
          v366 >>= 7;
        }
        while (v370);
        v365 = (google::protobuf::UnknownFieldSet *)(v368 + 2);
        *v367 = v369;
      }
      else
      {
        v5[3] = v366;
        v365 = (google::protobuf::UnknownFieldSet *)(v5 + 4);
      }
    }
    else
    {
      v5[2] = v364;
      v365 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
    }
    v5 = (char *)SnippetUI::Visualization_Map::InternalSerializeWithCachedSizesToArray(v363, v365, a3, a4);
    v7 = *((_DWORD *)this + 9);
  }
  if (v7 == 47)
  {
    if ((unint64_t)v5 >= *(_QWORD *)a3)
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v371 = (SnippetUI::Button_Container *)*((_QWORD *)this + 3);
    *(_WORD *)v5 = 762;
    v372 = *((_DWORD *)v371 + 10);
    if (v372 > 0x7F)
    {
      v5[2] = v372 | 0x80;
      v374 = v372 >> 7;
      if (v372 >> 14)
      {
        v375 = v5 + 3;
        do
        {
          v376 = v375;
          *v375++ = v374 | 0x80;
          v377 = v374 >> 7;
          v378 = v374 >> 14;
          v374 >>= 7;
        }
        while (v378);
        v373 = (google::protobuf::UnknownFieldSet *)(v376 + 2);
        *v375 = v377;
      }
      else
      {
        v5[3] = v374;
        v373 = (google::protobuf::UnknownFieldSet *)(v5 + 4);
      }
    }
    else
    {
      v5[2] = v372;
      v373 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
    }
    v5 = (char *)SnippetUI::Button_Container::InternalSerializeWithCachedSizesToArray(v371, v373, a3, a4);
    v7 = *((_DWORD *)this + 9);
  }
  if (v7 == 48)
  {
    if ((unint64_t)v5 >= *(_QWORD *)a3)
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v379 = (SnippetUI::IntentsUI_Standard *)*((_QWORD *)this + 3);
    *(_WORD *)v5 = 898;
    v380 = *((_DWORD *)v379 + 17);
    if (v380 > 0x7F)
    {
      v5[2] = v380 | 0x80;
      v382 = v380 >> 7;
      if (v380 >> 14)
      {
        v383 = v5 + 3;
        do
        {
          v384 = v383;
          *v383++ = v382 | 0x80;
          v385 = v382 >> 7;
          v386 = v382 >> 14;
          v382 >>= 7;
        }
        while (v386);
        v381 = v384 + 2;
        *v383 = v385;
      }
      else
      {
        v5[3] = v382;
        v381 = v5 + 4;
      }
    }
    else
    {
      v5[2] = v380;
      v381 = v5 + 3;
    }
    v5 = (char *)SnippetUI::IntentsUI_Standard::InternalSerializeWithCachedSizesToArray(v379, v381, a3, a4);
    v7 = *((_DWORD *)this + 9);
  }
  if (v7 == 49)
  {
    if ((unint64_t)v5 >= *(_QWORD *)a3)
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v387 = (SnippetUI::Sash_Standard *)*((_QWORD *)this + 3);
    *(_WORD *)v5 = 906;
    v388 = *((_DWORD *)v387 + 17);
    if (v388 > 0x7F)
    {
      v5[2] = v388 | 0x80;
      v390 = v388 >> 7;
      if (v388 >> 14)
      {
        v391 = v5 + 3;
        do
        {
          v392 = v391;
          *v391++ = v390 | 0x80;
          v393 = v390 >> 7;
          v394 = v390 >> 14;
          v390 >>= 7;
        }
        while (v394);
        v389 = (google::protobuf::UnknownFieldSet *)(v392 + 2);
        *v391 = v393;
      }
      else
      {
        v5[3] = v390;
        v389 = (google::protobuf::UnknownFieldSet *)(v5 + 4);
      }
    }
    else
    {
      v5[2] = v388;
      v389 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
    }
    v5 = (char *)SnippetUI::Sash_Standard::InternalSerializeWithCachedSizesToArray(v387, v389, a3, a4);
    v7 = *((_DWORD *)this + 9);
  }
  if (v7 == 50)
  {
    if ((unint64_t)v5 >= *(_QWORD *)a3)
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v395 = (SnippetUI::HeroHeader *)*((_QWORD *)this + 3);
    *(_WORD *)v5 = 914;
    v396 = *((_DWORD *)v395 + 14);
    if (v396 > 0x7F)
    {
      v5[2] = v396 | 0x80;
      v398 = v396 >> 7;
      if (v396 >> 14)
      {
        v399 = v5 + 3;
        do
        {
          v400 = v399;
          *v399++ = v398 | 0x80;
          v401 = v398 >> 7;
          v402 = v398 >> 14;
          v398 >>= 7;
        }
        while (v402);
        v397 = (google::protobuf::UnknownFieldSet *)(v400 + 2);
        *v399 = v401;
      }
      else
      {
        v5[3] = v398;
        v397 = (google::protobuf::UnknownFieldSet *)(v5 + 4);
      }
    }
    else
    {
      v5[2] = v396;
      v397 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
    }
    v5 = (char *)SnippetUI::HeroHeader::InternalSerializeWithCachedSizesToArray(v395, v397, a3, a4);
    v7 = *((_DWORD *)this + 9);
  }
  if (v7 == 51)
  {
    if ((unint64_t)v5 >= *(_QWORD *)a3)
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v403 = (SnippetUI::HorizontalList_Standard *)*((_QWORD *)this + 3);
    *(_WORD *)v5 = 922;
    v404 = *((_DWORD *)v403 + 14);
    if (v404 > 0x7F)
    {
      v5[2] = v404 | 0x80;
      v406 = v404 >> 7;
      if (v404 >> 14)
      {
        v407 = v5 + 3;
        do
        {
          v408 = v407;
          *v407++ = v406 | 0x80;
          v409 = v406 >> 7;
          v410 = v406 >> 14;
          v406 >>= 7;
        }
        while (v410);
        v405 = (google::protobuf::UnknownFieldSet *)(v408 + 2);
        *v407 = v409;
      }
      else
      {
        v5[3] = v406;
        v405 = (google::protobuf::UnknownFieldSet *)(v5 + 4);
      }
    }
    else
    {
      v5[2] = v404;
      v405 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
    }
    v5 = (char *)SnippetUI::HorizontalList_Standard::InternalSerializeWithCachedSizesToArray(v403, v405, a3, a4);
    v7 = *((_DWORD *)this + 9);
  }
  if (v7 == 52)
  {
    if ((unint64_t)v5 >= *(_QWORD *)a3)
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v411 = (SnippetUI::SectionHeader_Standard *)*((_QWORD *)this + 3);
    *(_WORD *)v5 = 930;
    v412 = *((_DWORD *)v411 + 10);
    if (v412 > 0x7F)
    {
      v5[2] = v412 | 0x80;
      v414 = v412 >> 7;
      if (v412 >> 14)
      {
        v415 = v5 + 3;
        do
        {
          v416 = v415;
          *v415++ = v414 | 0x80;
          v417 = v414 >> 7;
          v418 = v414 >> 14;
          v414 >>= 7;
        }
        while (v418);
        v413 = (google::protobuf::UnknownFieldSet *)(v416 + 2);
        *v415 = v417;
      }
      else
      {
        v5[3] = v414;
        v413 = (google::protobuf::UnknownFieldSet *)(v5 + 4);
      }
    }
    else
    {
      v5[2] = v412;
      v413 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
    }
    v5 = (char *)SnippetUI::SectionHeader_Standard::InternalSerializeWithCachedSizesToArray(v411, v413, a3, a4);
    v7 = *((_DWORD *)this + 9);
  }
  if (v7 == 53)
  {
    if ((unint64_t)v5 >= *(_QWORD *)a3)
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v419 = (SnippetUI::SectionHeader_Rich *)*((_QWORD *)this + 3);
    *(_WORD *)v5 = 938;
    v420 = *((_DWORD *)v419 + 12);
    if (v420 > 0x7F)
    {
      v5[2] = v420 | 0x80;
      v422 = v420 >> 7;
      if (v420 >> 14)
      {
        v423 = v5 + 3;
        do
        {
          v424 = v423;
          *v423++ = v422 | 0x80;
          v425 = v422 >> 7;
          v426 = v422 >> 14;
          v422 >>= 7;
        }
        while (v426);
        v421 = (google::protobuf::UnknownFieldSet *)(v424 + 2);
        *v423 = v425;
      }
      else
      {
        v5[3] = v422;
        v421 = (google::protobuf::UnknownFieldSet *)(v5 + 4);
      }
    }
    else
    {
      v5[2] = v420;
      v421 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
    }
    v5 = (char *)SnippetUI::SectionHeader_Rich::InternalSerializeWithCachedSizesToArray(v419, v421, a3, a4);
    v7 = *((_DWORD *)this + 9);
  }
  if (v7 == 54)
  {
    if ((unint64_t)v5 >= *(_QWORD *)a3)
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v427 = (SnippetUI::KeyValue_Standard *)*((_QWORD *)this + 3);
    *(_WORD *)v5 = 946;
    v428 = *((_DWORD *)v427 + 12);
    if (v428 > 0x7F)
    {
      v5[2] = v428 | 0x80;
      v430 = v428 >> 7;
      if (v428 >> 14)
      {
        v431 = v5 + 3;
        do
        {
          v432 = v431;
          *v431++ = v430 | 0x80;
          v433 = v430 >> 7;
          v434 = v430 >> 14;
          v430 >>= 7;
        }
        while (v434);
        v429 = (google::protobuf::UnknownFieldSet *)(v432 + 2);
        *v431 = v433;
      }
      else
      {
        v5[3] = v430;
        v429 = (google::protobuf::UnknownFieldSet *)(v5 + 4);
      }
    }
    else
    {
      v5[2] = v428;
      v429 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
    }
    v5 = (char *)SnippetUI::KeyValue_Standard::InternalSerializeWithCachedSizesToArray(v427, v429, a3, a4);
    v7 = *((_DWORD *)this + 9);
  }
  if (v7 == 55)
  {
    if ((unint64_t)v5 >= *(_QWORD *)a3)
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v435 = (SnippetUI::TertiaryHeader_Standard *)*((_QWORD *)this + 3);
    *(_WORD *)v5 = 954;
    v436 = *((_DWORD *)v435 + 10);
    if (v436 > 0x7F)
    {
      v5[2] = v436 | 0x80;
      v438 = v436 >> 7;
      if (v436 >> 14)
      {
        v439 = v5 + 3;
        do
        {
          v440 = v439;
          *v439++ = v438 | 0x80;
          v441 = v438 >> 7;
          v442 = v438 >> 14;
          v438 >>= 7;
        }
        while (v442);
        v437 = (google::protobuf::UnknownFieldSet *)(v440 + 2);
        *v439 = v441;
      }
      else
      {
        v5[3] = v438;
        v437 = (google::protobuf::UnknownFieldSet *)(v5 + 4);
      }
    }
    else
    {
      v5[2] = v436;
      v437 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
    }
    v5 = (char *)SnippetUI::TertiaryHeader_Standard::InternalSerializeWithCachedSizesToArray(v435, v437, a3, a4);
    v7 = *((_DWORD *)this + 9);
  }
  if (v7 == 56)
  {
    if ((unint64_t)v5 >= *(_QWORD *)a3)
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v443 = (SnippetUI::SimpleItem_RichSearchResult *)*((_QWORD *)this + 3);
    *(_WORD *)v5 = 962;
    v444 = *((_DWORD *)v443 + 28);
    if (v444 > 0x7F)
    {
      v5[2] = v444 | 0x80;
      v446 = v444 >> 7;
      if (v444 >> 14)
      {
        v447 = v5 + 3;
        do
        {
          v448 = v447;
          *v447++ = v446 | 0x80;
          v449 = v446 >> 7;
          v450 = v446 >> 14;
          v446 >>= 7;
        }
        while (v450);
        v445 = (google::protobuf::UnknownFieldSet *)(v448 + 2);
        *v447 = v449;
      }
      else
      {
        v5[3] = v446;
        v445 = (google::protobuf::UnknownFieldSet *)(v5 + 4);
      }
    }
    else
    {
      v5[2] = v444;
      v445 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
    }
    v5 = (char *)SnippetUI::SimpleItem_RichSearchResult::InternalSerializeWithCachedSizesToArray(v443, v445, a3, a4);
  }
  if (this != (SnippetUI::Response_Component *)&SnippetUI::_Response_Component_default_instance_)
  {
    v451 = (SnippetUI::Separators *)*((_QWORD *)this + 2);
    if (v451)
    {
      if ((unint64_t)v5 >= *(_QWORD *)a3)
      {
        v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
        v451 = (SnippetUI::Separators *)*((_QWORD *)this + 2);
      }
      *(_WORD *)v5 = 970;
      v452 = *((_DWORD *)v451 + 6);
      if (v452 > 0x7F)
      {
        v5[2] = v452 | 0x80;
        v454 = v452 >> 7;
        if (v452 >> 14)
        {
          v455 = v5 + 3;
          do
          {
            v456 = v455;
            *v455++ = v454 | 0x80;
            v457 = v454 >> 7;
            v458 = v454 >> 14;
            v454 >>= 7;
          }
          while (v458);
          v453 = v456 + 2;
          *v455 = v457;
        }
        else
        {
          v5[3] = v454;
          v453 = v5 + 4;
        }
      }
      else
      {
        v5[2] = v452;
        v453 = v5 + 3;
      }
      v5 = (char *)SnippetUI::Separators::InternalSerializeWithCachedSizesToArray(v451, v453, a3, a4);
    }
  }
  v459 = *((_DWORD *)this + 9);
  if (v459 == 58)
  {
    if ((unint64_t)v5 >= *(_QWORD *)a3)
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v460 = (SnippetUI::SummaryItem_PairNumberV2 *)*((_QWORD *)this + 3);
    *(_WORD *)v5 = 978;
    v461 = *((_DWORD *)v460 + 28);
    if (v461 > 0x7F)
    {
      v5[2] = v461 | 0x80;
      v463 = v461 >> 7;
      if (v461 >> 14)
      {
        v464 = v5 + 3;
        do
        {
          v465 = v464;
          *v464++ = v463 | 0x80;
          v466 = v463 >> 7;
          v467 = v463 >> 14;
          v463 >>= 7;
        }
        while (v467);
        v462 = (google::protobuf::UnknownFieldSet *)(v465 + 2);
        *v464 = v466;
      }
      else
      {
        v5[3] = v463;
        v462 = (google::protobuf::UnknownFieldSet *)(v5 + 4);
      }
    }
    else
    {
      v5[2] = v461;
      v462 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
    }
    v5 = (char *)SnippetUI::SummaryItem_PairNumberV2::InternalSerializeWithCachedSizesToArray(v460, v462, a3, a4);
    v459 = *((_DWORD *)this + 9);
  }
  if (v459 == 59)
  {
    if ((unint64_t)v5 >= *(_QWORD *)a3)
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v468 = (SnippetUI::SummaryItem_PairV2 *)*((_QWORD *)this + 3);
    *(_WORD *)v5 = 986;
    v469 = *((_DWORD *)v468 + 20);
    if (v469 > 0x7F)
    {
      v5[2] = v469 | 0x80;
      v471 = v469 >> 7;
      if (v469 >> 14)
      {
        v472 = v5 + 3;
        do
        {
          v473 = v472;
          *v472++ = v471 | 0x80;
          v474 = v471 >> 7;
          v475 = v471 >> 14;
          v471 >>= 7;
        }
        while (v475);
        v470 = (google::protobuf::UnknownFieldSet *)(v473 + 2);
        *v472 = v474;
      }
      else
      {
        v5[3] = v471;
        v470 = (google::protobuf::UnknownFieldSet *)(v5 + 4);
      }
    }
    else
    {
      v5[2] = v469;
      v470 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
    }
    v5 = (char *)SnippetUI::SummaryItem_PairV2::InternalSerializeWithCachedSizesToArray(v468, v470, a3, a4);
    v459 = *((_DWORD *)this + 9);
  }
  if (v459 == 60)
  {
    if ((unint64_t)v5 >= *(_QWORD *)a3)
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v476 = (SnippetUI::Control_PlayerButton *)*((_QWORD *)this + 3);
    *(_WORD *)v5 = 994;
    v477 = *((_DWORD *)v476 + 18);
    if (v477 > 0x7F)
    {
      v5[2] = v477 | 0x80;
      v479 = v477 >> 7;
      if (v477 >> 14)
      {
        v480 = v5 + 3;
        do
        {
          v481 = v480;
          *v480++ = v479 | 0x80;
          v482 = v479 >> 7;
          v483 = v479 >> 14;
          v479 >>= 7;
        }
        while (v483);
        v478 = (google::protobuf::UnknownFieldSet *)(v481 + 2);
        *v480 = v482;
      }
      else
      {
        v5[3] = v479;
        v478 = (google::protobuf::UnknownFieldSet *)(v5 + 4);
      }
    }
    else
    {
      v5[2] = v477;
      v478 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
    }
    v5 = (char *)SnippetUI::Control_PlayerButton::InternalSerializeWithCachedSizesToArray(v476, v478, a3, a4);
    v459 = *((_DWORD *)this + 9);
  }
  if (v459 == 61)
  {
    if ((unint64_t)v5 >= *(_QWORD *)a3)
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v484 = (SnippetUI::SummaryItem_SwitchV2 *)*((_QWORD *)this + 3);
    *(_WORD *)v5 = 1002;
    v485 = *((_DWORD *)v484 + 22);
    if (v485 > 0x7F)
    {
      v5[2] = v485 | 0x80;
      v487 = v485 >> 7;
      if (v485 >> 14)
      {
        v488 = v5 + 3;
        do
        {
          v489 = v488;
          *v488++ = v487 | 0x80;
          v490 = v487 >> 7;
          v491 = v487 >> 14;
          v487 >>= 7;
        }
        while (v491);
        v486 = (google::protobuf::UnknownFieldSet *)(v489 + 2);
        *v488 = v490;
      }
      else
      {
        v5[3] = v487;
        v486 = (google::protobuf::UnknownFieldSet *)(v5 + 4);
      }
    }
    else
    {
      v5[2] = v485;
      v486 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
    }
    v5 = (char *)SnippetUI::SummaryItem_SwitchV2::InternalSerializeWithCachedSizesToArray(v484, v486, a3, a4);
  }
  v492 = *((_QWORD *)this + 1);
  if ((v492 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v492 & 0xFFFFFFFFFFFFFFFELL), (const google::protobuf::UnknownFieldSet *)v5, a3, a4);
  else
    return (const google::protobuf::UnknownFieldSet *)v5;
}

SnippetUI::Response_Component *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Response_Component>(google::protobuf::internal::ArenaImpl *this)
{
  SnippetUI::Response_Component *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (SnippetUI::Response_Component *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x28uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::Response_Component>);
    SnippetUI::Response_Component::Response_Component(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (SnippetUI::Response_Component *)operator new();
    SnippetUI::Response_Component::Response_Component(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_1BFBED414(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D890](v1, 0x10A1C40EE95837BLL);
  _Unwind_Resume(a1);
}

char *google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::Response_Component>(google::protobuf::internal::EpsCopyInputStream *this, SnippetUI::Response_Component *a2, google::protobuf::internal *a3)
{
  int v6;
  const char *v7;
  char *v8;
  char *result;
  int v10;
  int v11;
  int v12;
  BOOL v13;
  int v14;
  int v15;

  v6 = *(char *)a3;
  v7 = (const char *)*(unsigned __int8 *)a3;
  if (v6 < 0)
  {
    result = google::protobuf::internal::ReadSizeFallback(a3, v7);
    if (!result)
      return result;
    v8 = result;
    LODWORD(v7) = v10;
  }
  else
  {
    v8 = (char *)a3 + 1;
  }
  v11 = google::protobuf::internal::EpsCopyInputStream::PushLimit(this, v8, v7);
  v12 = *((_DWORD *)this + 22);
  v13 = __OFSUB__(v12--, 1);
  *((_DWORD *)this + 22) = v12;
  if (v12 < 0 != v13)
    return 0;
  v14 = v11;
  result = (char *)SnippetUI::Response_Component::_InternalParse(a2, (google::protobuf::internal *)v8, this);
  if (!result)
    return result;
  ++*((_DWORD *)this + 22);
  if (*((_DWORD *)this + 20))
    return 0;
  v15 = *((_DWORD *)this + 7) + v14;
  *((_DWORD *)this + 7) = v15;
  *(_QWORD *)this = *((_QWORD *)this + 1) + (v15 & (v15 >> 31));
  return result;
}

uint64_t SnippetUI::Response_Section::_internal_add_idioms(uint64_t a1, int a2)
{
  int v3;
  int *v4;
  uint64_t result;
  uint64_t v6;

  v3 = *(_DWORD *)(a1 + 64);
  v4 = (int *)(a1 + 64);
  if (v3 == *(_DWORD *)(a1 + 68))
    google::protobuf::RepeatedField<int>::Reserve((int *)(a1 + 64), v3 + 1);
  result = google::protobuf::RepeatedField<int>::elements((uint64_t)v4);
  v6 = *v4;
  *v4 = v6 + 1;
  *(_DWORD *)(result + 4 * v6) = a2;
  return result;
}

google::protobuf::internal *SnippetUI::Response_Component::_InternalParse(SnippetUI::Response_Component *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  std::string **v5;
  uint64_t *v6;
  google::protobuf::internal::ParseContext *v7;
  google::protobuf::internal *TagFallback;
  char *v9;
  std::string *v10;
  SnippetUI::FactItem_Standard *v11;
  SnippetUI::FactItem_ShortNumber *v12;
  SnippetUI::FactItem_HeroNumber *v13;
  SnippetUI::SummaryItem_Standard *v14;
  SnippetUI::SummaryItem_ShortNumber *v15;
  SnippetUI::SummaryItem_Text *v16;
  SnippetUI::SummaryItem_LargeText *v17;
  SnippetUI::SummaryItem_DetailedText *v18;
  SnippetUI::SimpleItem_Standard *v19;
  SnippetUI::SimpleItem_Rich *v20;
  SnippetUI::SimpleItem_Visual *v21;
  SnippetUI::PrimaryHeader_Standard *v22;
  SnippetUI::PrimaryHeader_Marquee *v23;
  SnippetUI::PrimaryHeader_Rich *v24;
  SnippetUI::SecondaryHeader_Standard *v25;
  SnippetUI::Button *v26;
  SnippetUI::BinaryButton *v27;
  SnippetUI::StatusIndicator_Success *v28;
  SnippetUI::StatusIndicator_Error *v29;
  SnippetUI::StatusIndicator_InProgress *v30;
  SnippetUI::StatusIndicator_Cancelled *v31;
  SnippetUI::TextInput *v32;
  SnippetUI::Control_Switch *v33;
  SnippetUI::Control_Slider *v34;
  std::string *v35;
  SnippetUI::Reference_Standard *v36;
  SnippetUI::Reference_Logo *v37;
  SnippetUI::Reference_Rich *v38;
  SnippetUI::Reference_Button *v39;
  SnippetUI::SummaryItem_Pair *v40;
  SnippetUI::SummaryItem_PairNumber *v41;
  SnippetUI::SummaryItem_Button *v42;
  SnippetUI::FactItem_Button *v43;
  SnippetUI::Table *v44;
  SnippetUI::Reference_Footnote *v45;
  SnippetUI::LongItem_Text *v46;
  SnippetUI::Visualization_Chart *v47;
  SnippetUI::SummaryItem_Player *v48;
  SnippetUI::SimpleItem_Player *v49;
  SnippetUI::SimpleItem_ReverseRich *v50;
  SnippetUI::SecondaryHeader_Emphasized *v51;
  SnippetUI::SummaryItem_Switch *v52;
  SnippetUI::SystemText_ClarificationTitle *v53;
  SnippetUI::Visualization_Image *v54;
  SnippetUI::Visualization_Map *v55;
  SnippetUI::Button_Container *v56;
  SnippetUI::IntentsUI_Standard *v57;
  SnippetUI::Sash_Standard *v58;
  SnippetUI::HeroHeader *v59;
  SnippetUI::HorizontalList_Standard *v60;
  SnippetUI::SectionHeader_Standard *v61;
  SnippetUI::SectionHeader_Rich *v62;
  SnippetUI::KeyValue_Standard *v63;
  SnippetUI::TertiaryHeader_Standard *v64;
  SnippetUI::SimpleItem_RichSearchResult *v65;
  SnippetUI::Separators *v66;
  unsigned int v67;
  char *v68;
  SnippetUI::SummaryItem_PairNumberV2 *v69;
  SnippetUI::SummaryItem_PairV2 *v70;
  SnippetUI::Control_PlayerButton *v71;
  SnippetUI::SummaryItem_SwitchV2 *v72;
  BOOL v73;
  char *v74;
  unsigned int v75;
  char *v76;
  unsigned int v77;
  char *v78;
  unsigned int v79;
  char *v80;
  unsigned int v81;
  char *v82;
  unsigned int v83;
  char *v84;
  unsigned int v85;
  char *v86;
  unsigned int v87;
  char *v88;
  unsigned int v89;
  char *v90;
  unsigned int v91;
  char *v92;
  unsigned int v93;
  char *v94;
  unsigned int v95;
  char *v96;
  unsigned int v97;
  char *v98;
  unsigned int v99;
  char *v100;
  unsigned int v101;
  char *v102;
  unsigned int v103;
  char *v104;
  unsigned int v105;
  char *v106;
  unsigned int v107;
  char *v108;
  unsigned int v109;
  char *v110;
  unsigned int v111;
  char *v112;
  unsigned int v113;
  char *v114;
  unsigned int v115;
  char *v116;
  unsigned int v117;
  char *v118;
  unsigned int v119;
  char *v120;
  unsigned int v121;
  char *v122;
  unsigned int v123;
  char *v124;
  unsigned int v125;
  char *v126;
  unsigned int v127;
  char *v128;
  unsigned int v129;
  char *v130;
  unsigned int v131;
  char *v132;
  unsigned int v133;
  char *v134;
  unsigned int v135;
  char *v136;
  unsigned int v137;
  char *v138;
  unsigned int v139;
  char *v140;
  unsigned int v141;
  char *v142;
  unsigned int v143;
  char *v144;
  unsigned int v145;
  char *v146;
  unsigned int v147;
  char *v148;
  unsigned int v149;
  char *v150;
  unsigned int v151;
  char *v152;
  unsigned int v153;
  char *v154;
  unsigned int v155;
  char *v156;
  unsigned int v157;
  char *v158;
  unsigned int v159;
  char *v160;
  unsigned int v161;
  char *v162;
  unsigned int v163;
  char *v164;
  unsigned int v165;
  char *v166;
  unsigned int v167;
  char *v168;
  unsigned int v169;
  char *v170;
  unsigned int v171;
  char *v172;
  unsigned int v173;
  char *v174;
  unsigned int v175;
  char *v176;
  unsigned int v177;
  char *v178;
  unsigned int v179;
  char *v180;
  unsigned int v181;
  char *v182;
  unsigned int v183;
  char *v184;
  unsigned int v185;
  char *v186;
  unsigned int v187;
  char *v188;
  char *v189;
  unsigned int v190;
  int v191;
  int v192;
  BOOL v193;
  int v194;
  google::protobuf::internal *v195;
  char *SizeFallback;
  unsigned int v197;
  int v198;
  int v199;
  char *v200;
  unsigned int v201;
  int v202;
  int v203;
  char *v204;
  unsigned int v205;
  int v206;
  int v207;
  char *v208;
  unsigned int v209;
  int v210;
  int v211;
  char *v212;
  unsigned int v213;
  int v214;
  int v215;
  char *v216;
  unsigned int v217;
  int v218;
  int v219;
  char *v220;
  unsigned int v221;
  int v222;
  int v223;
  char *v224;
  unsigned int v225;
  int v226;
  int v227;
  char *v228;
  unsigned int v229;
  int v230;
  int v231;
  char *v232;
  unsigned int v233;
  int v234;
  int v235;
  char *v236;
  unsigned int v237;
  int v238;
  int v239;
  char *v240;
  unsigned int v241;
  int v242;
  int v243;
  char *v244;
  unsigned int v245;
  int v246;
  int v247;
  char *v248;
  unsigned int v249;
  int v250;
  int v251;
  char *v252;
  unsigned int v253;
  int v254;
  int v255;
  char *v256;
  unsigned int v257;
  int v258;
  int v259;
  char *v260;
  unsigned int v261;
  int v262;
  int v263;
  char *v264;
  unsigned int v265;
  int v266;
  int v267;
  char *v268;
  unsigned int v269;
  int v270;
  int v271;
  char *v272;
  unsigned int v273;
  int v274;
  int v275;
  char *v276;
  unsigned int v277;
  int v278;
  int v279;
  char *v280;
  unsigned int v281;
  int v282;
  int v283;
  char *v284;
  unsigned int v285;
  int v286;
  int v287;
  char *v288;
  unsigned int v289;
  int v290;
  int v291;
  char *v292;
  unsigned int v293;
  int v294;
  int v295;
  char *v296;
  unsigned int v297;
  int v298;
  int v299;
  char *v300;
  unsigned int v301;
  int v302;
  int v303;
  char *v304;
  unsigned int v305;
  int v306;
  int v307;
  char *v308;
  unsigned int v309;
  int v310;
  int v311;
  char *v312;
  unsigned int v313;
  int v314;
  int v315;
  char *v316;
  unsigned int v317;
  int v318;
  int v319;
  char *v320;
  unsigned int v321;
  int v322;
  int v323;
  char *v324;
  unsigned int v325;
  int v326;
  int v327;
  char *v328;
  unsigned int v329;
  int v330;
  int v331;
  char *v332;
  unsigned int v333;
  int v334;
  int v335;
  char *v336;
  unsigned int v337;
  int v338;
  int v339;
  char *v340;
  unsigned int v341;
  int v342;
  int v343;
  char *v344;
  unsigned int v345;
  int v346;
  int v347;
  char *v348;
  unsigned int v349;
  int v350;
  int v351;
  char *v352;
  unsigned int v353;
  int v354;
  int v355;
  char *v356;
  unsigned int v357;
  int v358;
  int v359;
  char *v360;
  unsigned int v361;
  int v362;
  int v363;
  char *v364;
  unsigned int v365;
  int v366;
  int v367;
  char *v368;
  unsigned int v369;
  int v370;
  int v371;
  char *v372;
  unsigned int v373;
  int v374;
  int v375;
  char *v376;
  unsigned int v377;
  int v378;
  int v379;
  char *v380;
  unsigned int v381;
  int v382;
  int v383;
  char *v384;
  unsigned int v385;
  int v386;
  int v387;
  char *v388;
  unsigned int v389;
  int v390;
  int v391;
  char *v392;
  unsigned int v393;
  int v394;
  int v395;
  char *v396;
  unsigned int v397;
  int v398;
  int v399;
  char *v400;
  unsigned int v401;
  int v402;
  int v403;
  char *v404;
  unsigned int v405;
  int v406;
  int v407;
  char *v408;
  unsigned int v409;
  int v410;
  int v411;
  char *v412;
  unsigned int v413;
  int v414;
  int v415;
  char *v416;
  unsigned int v417;
  int v418;
  int v419;
  char *v420;
  unsigned int v421;
  int v422;
  int v423;
  int v424;
  google::protobuf::internal *v426;

  v426 = a2;
  v5 = (std::string **)((char *)this + 24);
  v6 = (uint64_t *)((char *)this + 8);
  while (2)
  {
    if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v426, *((_DWORD *)a3 + 23)) & 1) != 0)
      return v426;
    TagFallback = (google::protobuf::internal *)((char *)v426 + 1);
    v9 = (char *)*(unsigned __int8 *)v426;
    if ((*(char *)v426 & 0x80000000) == 0)
      goto LABEL_6;
    v9 = (char *)(v9 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v426 + 2);
LABEL_6:
      v426 = TagFallback;
      goto LABEL_7;
    }
    TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v426, v9);
    v426 = TagFallback;
    if (!TagFallback)
      return TagFallback;
LABEL_7:
    switch(v9 >> 3)
    {
      case 1u:
        if (v9 != 10)
          goto LABEL_196;
        if (*((_DWORD *)this + 9) == 1)
        {
          v10 = *v5;
        }
        else
        {
          SnippetUI::Response_Component::clear_value((uint64_t)this);
          *((_DWORD *)this + 9) = 1;
          v10 = (std::string *)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::CustomCanvas>(0);
          *((_QWORD *)this + 3) = v10;
          TagFallback = v426;
        }
        v74 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::CustomCanvas>(a3, (SnippetUI::CustomCanvas *)v10, TagFallback);
        goto LABEL_278;
      case 2u:
        if (v9 != 18)
          goto LABEL_196;
        if (*((_DWORD *)this + 9) == 2)
        {
          v11 = (SnippetUI::FactItem_Standard *)*v5;
        }
        else
        {
          SnippetUI::Response_Component::clear_value((uint64_t)this);
          *((_DWORD *)this + 9) = 2;
          v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::FactItem_Standard>(0);
          *((_QWORD *)this + 3) = v11;
          TagFallback = v426;
        }
        v75 = *(unsigned __int8 *)TagFallback;
        if (*(char *)TagFallback < 0)
        {
          SizeFallback = google::protobuf::internal::ReadSizeFallback(TagFallback, (const char *)*(unsigned __int8 *)TagFallback);
          if (!SizeFallback)
            return 0;
          v76 = SizeFallback;
          v75 = v197;
        }
        else
        {
          v76 = (char *)TagFallback + 1;
        }
        v198 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v76, v75);
        v199 = *((_DWORD *)a3 + 22);
        v193 = __OFSUB__(v199--, 1);
        *((_DWORD *)a3 + 22) = v199;
        if (v199 < 0 != v193)
          return 0;
        v194 = v198;
        v195 = SnippetUI::FactItem_Standard::_InternalParse(v11, (google::protobuf::internal *)v76, a3);
        if (!v195)
          return 0;
        goto LABEL_671;
      case 3u:
        if (v9 != 26)
          goto LABEL_196;
        if (*((_DWORD *)this + 9) == 3)
        {
          v12 = (SnippetUI::FactItem_ShortNumber *)*v5;
        }
        else
        {
          SnippetUI::Response_Component::clear_value((uint64_t)this);
          *((_DWORD *)this + 9) = 3;
          v12 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::FactItem_ShortNumber>(0);
          *((_QWORD *)this + 3) = v12;
          TagFallback = v426;
        }
        v77 = *(unsigned __int8 *)TagFallback;
        if (*(char *)TagFallback < 0)
        {
          v200 = google::protobuf::internal::ReadSizeFallback(TagFallback, (const char *)*(unsigned __int8 *)TagFallback);
          if (!v200)
            return 0;
          v78 = v200;
          v77 = v201;
        }
        else
        {
          v78 = (char *)TagFallback + 1;
        }
        v202 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v78, v77);
        v203 = *((_DWORD *)a3 + 22);
        v193 = __OFSUB__(v203--, 1);
        *((_DWORD *)a3 + 22) = v203;
        if (v203 < 0 != v193)
          return 0;
        v194 = v202;
        v195 = SnippetUI::FactItem_ShortNumber::_InternalParse(v12, (google::protobuf::internal *)v78, a3);
        if (!v195)
          return 0;
        goto LABEL_671;
      case 4u:
        if (v9 != 34)
          goto LABEL_196;
        if (*((_DWORD *)this + 9) == 4)
        {
          v13 = (SnippetUI::FactItem_HeroNumber *)*v5;
        }
        else
        {
          SnippetUI::Response_Component::clear_value((uint64_t)this);
          *((_DWORD *)this + 9) = 4;
          v13 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::FactItem_HeroNumber>(0);
          *((_QWORD *)this + 3) = v13;
          TagFallback = v426;
        }
        v79 = *(unsigned __int8 *)TagFallback;
        if (*(char *)TagFallback < 0)
        {
          v204 = google::protobuf::internal::ReadSizeFallback(TagFallback, (const char *)*(unsigned __int8 *)TagFallback);
          if (!v204)
            return 0;
          v80 = v204;
          v79 = v205;
        }
        else
        {
          v80 = (char *)TagFallback + 1;
        }
        v206 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v80, v79);
        v207 = *((_DWORD *)a3 + 22);
        v193 = __OFSUB__(v207--, 1);
        *((_DWORD *)a3 + 22) = v207;
        if (v207 < 0 != v193)
          return 0;
        v194 = v206;
        v195 = SnippetUI::FactItem_HeroNumber::_InternalParse(v13, (google::protobuf::internal *)v80, a3);
        if (!v195)
          return 0;
        goto LABEL_671;
      case 5u:
        if (v9 != 42)
          goto LABEL_196;
        if (*((_DWORD *)this + 9) == 5)
        {
          v14 = (SnippetUI::SummaryItem_Standard *)*v5;
        }
        else
        {
          SnippetUI::Response_Component::clear_value((uint64_t)this);
          *((_DWORD *)this + 9) = 5;
          v14 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::SummaryItem_Standard>(0);
          *((_QWORD *)this + 3) = v14;
          TagFallback = v426;
        }
        v81 = *(unsigned __int8 *)TagFallback;
        if (*(char *)TagFallback < 0)
        {
          v208 = google::protobuf::internal::ReadSizeFallback(TagFallback, (const char *)*(unsigned __int8 *)TagFallback);
          if (!v208)
            return 0;
          v82 = v208;
          v81 = v209;
        }
        else
        {
          v82 = (char *)TagFallback + 1;
        }
        v210 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v82, v81);
        v211 = *((_DWORD *)a3 + 22);
        v193 = __OFSUB__(v211--, 1);
        *((_DWORD *)a3 + 22) = v211;
        if (v211 < 0 != v193)
          return 0;
        v194 = v210;
        v195 = SnippetUI::SummaryItem_Standard::_InternalParse(v14, (google::protobuf::internal *)v82, a3);
        if (!v195)
          return 0;
        goto LABEL_671;
      case 6u:
        if (v9 != 50)
          goto LABEL_196;
        if (*((_DWORD *)this + 9) == 6)
        {
          v15 = (SnippetUI::SummaryItem_ShortNumber *)*v5;
        }
        else
        {
          SnippetUI::Response_Component::clear_value((uint64_t)this);
          *((_DWORD *)this + 9) = 6;
          v15 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::SummaryItem_ShortNumber>(0);
          *((_QWORD *)this + 3) = v15;
          TagFallback = v426;
        }
        v83 = *(unsigned __int8 *)TagFallback;
        if (*(char *)TagFallback < 0)
        {
          v212 = google::protobuf::internal::ReadSizeFallback(TagFallback, (const char *)*(unsigned __int8 *)TagFallback);
          if (!v212)
            return 0;
          v84 = v212;
          v83 = v213;
        }
        else
        {
          v84 = (char *)TagFallback + 1;
        }
        v214 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v84, v83);
        v215 = *((_DWORD *)a3 + 22);
        v193 = __OFSUB__(v215--, 1);
        *((_DWORD *)a3 + 22) = v215;
        if (v215 < 0 != v193)
          return 0;
        v194 = v214;
        v195 = SnippetUI::SummaryItem_ShortNumber::_InternalParse(v15, (google::protobuf::internal *)v84, a3);
        if (!v195)
          return 0;
        goto LABEL_671;
      case 7u:
        if (v9 != 58)
          goto LABEL_196;
        if (*((_DWORD *)this + 9) == 7)
        {
          v16 = (SnippetUI::SummaryItem_Text *)*v5;
        }
        else
        {
          SnippetUI::Response_Component::clear_value((uint64_t)this);
          *((_DWORD *)this + 9) = 7;
          v16 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::SummaryItem_Text>(0);
          *((_QWORD *)this + 3) = v16;
          TagFallback = v426;
        }
        v85 = *(unsigned __int8 *)TagFallback;
        if (*(char *)TagFallback < 0)
        {
          v216 = google::protobuf::internal::ReadSizeFallback(TagFallback, (const char *)*(unsigned __int8 *)TagFallback);
          if (!v216)
            return 0;
          v86 = v216;
          v85 = v217;
        }
        else
        {
          v86 = (char *)TagFallback + 1;
        }
        v218 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v86, v85);
        v219 = *((_DWORD *)a3 + 22);
        v193 = __OFSUB__(v219--, 1);
        *((_DWORD *)a3 + 22) = v219;
        if (v219 < 0 != v193)
          return 0;
        v194 = v218;
        v195 = SnippetUI::SummaryItem_Text::_InternalParse(v16, (google::protobuf::internal *)v86, a3);
        if (!v195)
          return 0;
        goto LABEL_671;
      case 8u:
        if (v9 != 66)
          goto LABEL_196;
        if (*((_DWORD *)this + 9) == 8)
        {
          v17 = (SnippetUI::SummaryItem_LargeText *)*v5;
        }
        else
        {
          SnippetUI::Response_Component::clear_value((uint64_t)this);
          *((_DWORD *)this + 9) = 8;
          v17 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::SummaryItem_LargeText>(0);
          *((_QWORD *)this + 3) = v17;
          TagFallback = v426;
        }
        v87 = *(unsigned __int8 *)TagFallback;
        if (*(char *)TagFallback < 0)
        {
          v220 = google::protobuf::internal::ReadSizeFallback(TagFallback, (const char *)*(unsigned __int8 *)TagFallback);
          if (!v220)
            return 0;
          v88 = v220;
          v87 = v221;
        }
        else
        {
          v88 = (char *)TagFallback + 1;
        }
        v222 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v88, v87);
        v223 = *((_DWORD *)a3 + 22);
        v193 = __OFSUB__(v223--, 1);
        *((_DWORD *)a3 + 22) = v223;
        if (v223 < 0 != v193)
          return 0;
        v194 = v222;
        v195 = SnippetUI::SummaryItem_LargeText::_InternalParse(v17, (google::protobuf::internal *)v88, a3);
        if (!v195)
          return 0;
        goto LABEL_671;
      case 9u:
        if (v9 != 74)
          goto LABEL_196;
        if (*((_DWORD *)this + 9) == 9)
        {
          v18 = (SnippetUI::SummaryItem_DetailedText *)*v5;
        }
        else
        {
          SnippetUI::Response_Component::clear_value((uint64_t)this);
          *((_DWORD *)this + 9) = 9;
          v18 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::SummaryItem_DetailedText>(0);
          *((_QWORD *)this + 3) = v18;
          TagFallback = v426;
        }
        v89 = *(unsigned __int8 *)TagFallback;
        if (*(char *)TagFallback < 0)
        {
          v224 = google::protobuf::internal::ReadSizeFallback(TagFallback, (const char *)*(unsigned __int8 *)TagFallback);
          if (!v224)
            return 0;
          v90 = v224;
          v89 = v225;
        }
        else
        {
          v90 = (char *)TagFallback + 1;
        }
        v226 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v90, v89);
        v227 = *((_DWORD *)a3 + 22);
        v193 = __OFSUB__(v227--, 1);
        *((_DWORD *)a3 + 22) = v227;
        if (v227 < 0 != v193)
          return 0;
        v194 = v226;
        v195 = SnippetUI::SummaryItem_DetailedText::_InternalParse(v18, (google::protobuf::internal *)v90, a3);
        if (!v195)
          return 0;
        goto LABEL_671;
      case 0xAu:
        if (v9 != 82)
          goto LABEL_196;
        if (*((_DWORD *)this + 9) == 10)
        {
          v19 = (SnippetUI::SimpleItem_Standard *)*v5;
        }
        else
        {
          SnippetUI::Response_Component::clear_value((uint64_t)this);
          *((_DWORD *)this + 9) = 10;
          v19 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::SimpleItem_Standard>(0);
          *((_QWORD *)this + 3) = v19;
          TagFallback = v426;
        }
        v91 = *(unsigned __int8 *)TagFallback;
        if (*(char *)TagFallback < 0)
        {
          v228 = google::protobuf::internal::ReadSizeFallback(TagFallback, (const char *)*(unsigned __int8 *)TagFallback);
          if (!v228)
            return 0;
          v92 = v228;
          v91 = v229;
        }
        else
        {
          v92 = (char *)TagFallback + 1;
        }
        v230 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v92, v91);
        v231 = *((_DWORD *)a3 + 22);
        v193 = __OFSUB__(v231--, 1);
        *((_DWORD *)a3 + 22) = v231;
        if (v231 < 0 != v193)
          return 0;
        v194 = v230;
        v195 = SnippetUI::SimpleItem_Standard::_InternalParse(v19, (google::protobuf::internal *)v92, a3);
        if (!v195)
          return 0;
        goto LABEL_671;
      case 0xBu:
        if (v9 != 90)
          goto LABEL_196;
        if (*((_DWORD *)this + 9) == 11)
        {
          v20 = (SnippetUI::SimpleItem_Rich *)*v5;
        }
        else
        {
          SnippetUI::Response_Component::clear_value((uint64_t)this);
          *((_DWORD *)this + 9) = 11;
          v20 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::SimpleItem_Rich>(0);
          *((_QWORD *)this + 3) = v20;
          TagFallback = v426;
        }
        v93 = *(unsigned __int8 *)TagFallback;
        if (*(char *)TagFallback < 0)
        {
          v232 = google::protobuf::internal::ReadSizeFallback(TagFallback, (const char *)*(unsigned __int8 *)TagFallback);
          if (!v232)
            return 0;
          v94 = v232;
          v93 = v233;
        }
        else
        {
          v94 = (char *)TagFallback + 1;
        }
        v234 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v94, v93);
        v235 = *((_DWORD *)a3 + 22);
        v193 = __OFSUB__(v235--, 1);
        *((_DWORD *)a3 + 22) = v235;
        if (v235 < 0 != v193)
          return 0;
        v194 = v234;
        v195 = SnippetUI::SimpleItem_Rich::_InternalParse(v20, (google::protobuf::internal *)v94, a3);
        if (!v195)
          return 0;
        goto LABEL_671;
      case 0xCu:
        if (v9 != 98)
          goto LABEL_196;
        if (*((_DWORD *)this + 9) == 12)
        {
          v21 = (SnippetUI::SimpleItem_Visual *)*v5;
        }
        else
        {
          SnippetUI::Response_Component::clear_value((uint64_t)this);
          *((_DWORD *)this + 9) = 12;
          v21 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::SimpleItem_Visual>(0);
          *((_QWORD *)this + 3) = v21;
          TagFallback = v426;
        }
        v95 = *(unsigned __int8 *)TagFallback;
        if (*(char *)TagFallback < 0)
        {
          v236 = google::protobuf::internal::ReadSizeFallback(TagFallback, (const char *)*(unsigned __int8 *)TagFallback);
          if (!v236)
            return 0;
          v96 = v236;
          v95 = v237;
        }
        else
        {
          v96 = (char *)TagFallback + 1;
        }
        v238 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v96, v95);
        v239 = *((_DWORD *)a3 + 22);
        v193 = __OFSUB__(v239--, 1);
        *((_DWORD *)a3 + 22) = v239;
        if (v239 < 0 != v193)
          return 0;
        v194 = v238;
        v195 = SnippetUI::SimpleItem_Visual::_InternalParse(v21, (google::protobuf::internal *)v96, a3);
        if (!v195)
          return 0;
        goto LABEL_671;
      case 0xDu:
        if (v9 != 106)
          goto LABEL_196;
        if (*((_DWORD *)this + 9) == 13)
        {
          v22 = (SnippetUI::PrimaryHeader_Standard *)*v5;
        }
        else
        {
          SnippetUI::Response_Component::clear_value((uint64_t)this);
          *((_DWORD *)this + 9) = 13;
          v22 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::PrimaryHeader_Standard>(0);
          *((_QWORD *)this + 3) = v22;
          TagFallback = v426;
        }
        v97 = *(unsigned __int8 *)TagFallback;
        if (*(char *)TagFallback < 0)
        {
          v240 = google::protobuf::internal::ReadSizeFallback(TagFallback, (const char *)*(unsigned __int8 *)TagFallback);
          if (!v240)
            return 0;
          v98 = v240;
          v97 = v241;
        }
        else
        {
          v98 = (char *)TagFallback + 1;
        }
        v242 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v98, v97);
        v243 = *((_DWORD *)a3 + 22);
        v193 = __OFSUB__(v243--, 1);
        *((_DWORD *)a3 + 22) = v243;
        if (v243 < 0 != v193)
          return 0;
        v194 = v242;
        v195 = SnippetUI::PrimaryHeader_Standard::_InternalParse(v22, (google::protobuf::internal *)v98, a3);
        if (!v195)
          return 0;
        goto LABEL_671;
      case 0xEu:
        if (v9 != 114)
          goto LABEL_196;
        if (*((_DWORD *)this + 9) == 14)
        {
          v23 = (SnippetUI::PrimaryHeader_Marquee *)*v5;
        }
        else
        {
          SnippetUI::Response_Component::clear_value((uint64_t)this);
          *((_DWORD *)this + 9) = 14;
          v23 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::PrimaryHeader_Marquee>(0);
          *((_QWORD *)this + 3) = v23;
          TagFallback = v426;
        }
        v99 = *(unsigned __int8 *)TagFallback;
        if (*(char *)TagFallback < 0)
        {
          v244 = google::protobuf::internal::ReadSizeFallback(TagFallback, (const char *)*(unsigned __int8 *)TagFallback);
          if (!v244)
            return 0;
          v100 = v244;
          v99 = v245;
        }
        else
        {
          v100 = (char *)TagFallback + 1;
        }
        v246 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v100, v99);
        v247 = *((_DWORD *)a3 + 22);
        v193 = __OFSUB__(v247--, 1);
        *((_DWORD *)a3 + 22) = v247;
        if (v247 < 0 != v193)
          return 0;
        v194 = v246;
        v195 = SnippetUI::PrimaryHeader_Marquee::_InternalParse(v23, (google::protobuf::internal *)v100, a3);
        if (!v195)
          return 0;
        goto LABEL_671;
      case 0xFu:
        if (v9 != 122)
          goto LABEL_196;
        if (*((_DWORD *)this + 9) == 15)
        {
          v24 = (SnippetUI::PrimaryHeader_Rich *)*v5;
        }
        else
        {
          SnippetUI::Response_Component::clear_value((uint64_t)this);
          *((_DWORD *)this + 9) = 15;
          v24 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::PrimaryHeader_Rich>(0);
          *((_QWORD *)this + 3) = v24;
          TagFallback = v426;
        }
        v101 = *(unsigned __int8 *)TagFallback;
        if (*(char *)TagFallback < 0)
        {
          v248 = google::protobuf::internal::ReadSizeFallback(TagFallback, (const char *)*(unsigned __int8 *)TagFallback);
          if (!v248)
            return 0;
          v102 = v248;
          v101 = v249;
        }
        else
        {
          v102 = (char *)TagFallback + 1;
        }
        v250 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v102, v101);
        v251 = *((_DWORD *)a3 + 22);
        v193 = __OFSUB__(v251--, 1);
        *((_DWORD *)a3 + 22) = v251;
        if (v251 < 0 != v193)
          return 0;
        v194 = v250;
        v195 = SnippetUI::PrimaryHeader_Rich::_InternalParse(v24, (google::protobuf::internal *)v102, a3);
        if (!v195)
          return 0;
        goto LABEL_671;
      case 0x10u:
        if (v9 != 130)
          goto LABEL_196;
        if (*((_DWORD *)this + 9) == 16)
        {
          v25 = (SnippetUI::SecondaryHeader_Standard *)*v5;
        }
        else
        {
          SnippetUI::Response_Component::clear_value((uint64_t)this);
          *((_DWORD *)this + 9) = 16;
          v25 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::SecondaryHeader_Standard>(0);
          *((_QWORD *)this + 3) = v25;
          TagFallback = v426;
        }
        v103 = *(unsigned __int8 *)TagFallback;
        if (*(char *)TagFallback < 0)
        {
          v252 = google::protobuf::internal::ReadSizeFallback(TagFallback, (const char *)*(unsigned __int8 *)TagFallback);
          if (!v252)
            return 0;
          v104 = v252;
          v103 = v253;
        }
        else
        {
          v104 = (char *)TagFallback + 1;
        }
        v254 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v104, v103);
        v255 = *((_DWORD *)a3 + 22);
        v193 = __OFSUB__(v255--, 1);
        *((_DWORD *)a3 + 22) = v255;
        if (v255 < 0 != v193)
          return 0;
        v194 = v254;
        v195 = SnippetUI::SecondaryHeader_Standard::_InternalParse(v25, (google::protobuf::internal *)v104, a3);
        if (!v195)
          return 0;
        goto LABEL_671;
      case 0x11u:
        if (v9 != 138)
          goto LABEL_196;
        if (*((_DWORD *)this + 9) == 17)
        {
          v26 = (SnippetUI::Button *)*v5;
        }
        else
        {
          SnippetUI::Response_Component::clear_value((uint64_t)this);
          *((_DWORD *)this + 9) = 17;
          v26 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Button>(0);
          *((_QWORD *)this + 3) = v26;
          TagFallback = v426;
        }
        v74 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::Button>(a3, v26, TagFallback);
        goto LABEL_278;
      case 0x12u:
        if (v9 != 146)
          goto LABEL_196;
        if (*((_DWORD *)this + 9) == 18)
        {
          v27 = (SnippetUI::BinaryButton *)*v5;
        }
        else
        {
          SnippetUI::Response_Component::clear_value((uint64_t)this);
          *((_DWORD *)this + 9) = 18;
          v27 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::BinaryButton>(0);
          *((_QWORD *)this + 3) = v27;
          TagFallback = v426;
        }
        v105 = *(unsigned __int8 *)TagFallback;
        if (*(char *)TagFallback < 0)
        {
          v256 = google::protobuf::internal::ReadSizeFallback(TagFallback, (const char *)*(unsigned __int8 *)TagFallback);
          if (!v256)
            return 0;
          v106 = v256;
          v105 = v257;
        }
        else
        {
          v106 = (char *)TagFallback + 1;
        }
        v258 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v106, v105);
        v259 = *((_DWORD *)a3 + 22);
        v193 = __OFSUB__(v259--, 1);
        *((_DWORD *)a3 + 22) = v259;
        if (v259 < 0 != v193)
          return 0;
        v194 = v258;
        v195 = SnippetUI::BinaryButton::_InternalParse(v27, (google::protobuf::internal *)v106, a3);
        if (!v195)
          return 0;
        goto LABEL_671;
      case 0x13u:
        if (v9 != 154)
          goto LABEL_196;
        if (*((_DWORD *)this + 9) == 19)
        {
          v28 = (SnippetUI::StatusIndicator_Success *)*v5;
        }
        else
        {
          SnippetUI::Response_Component::clear_value((uint64_t)this);
          *((_DWORD *)this + 9) = 19;
          v28 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::StatusIndicator_Success>(0);
          *((_QWORD *)this + 3) = v28;
          TagFallback = v426;
        }
        v107 = *(unsigned __int8 *)TagFallback;
        if (*(char *)TagFallback < 0)
        {
          v260 = google::protobuf::internal::ReadSizeFallback(TagFallback, (const char *)*(unsigned __int8 *)TagFallback);
          if (!v260)
            return 0;
          v108 = v260;
          v107 = v261;
        }
        else
        {
          v108 = (char *)TagFallback + 1;
        }
        v262 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v108, v107);
        v263 = *((_DWORD *)a3 + 22);
        v193 = __OFSUB__(v263--, 1);
        *((_DWORD *)a3 + 22) = v263;
        if (v263 < 0 != v193)
          return 0;
        v194 = v262;
        v195 = SnippetUI::StatusIndicator_Success::_InternalParse(v28, (google::protobuf::internal *)v108, a3);
        if (!v195)
          return 0;
        goto LABEL_671;
      case 0x14u:
        if (v9 != 162)
          goto LABEL_196;
        if (*((_DWORD *)this + 9) == 20)
        {
          v29 = (SnippetUI::StatusIndicator_Error *)*v5;
        }
        else
        {
          SnippetUI::Response_Component::clear_value((uint64_t)this);
          *((_DWORD *)this + 9) = 20;
          v29 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::StatusIndicator_Error>(0);
          *((_QWORD *)this + 3) = v29;
          TagFallback = v426;
        }
        v109 = *(unsigned __int8 *)TagFallback;
        if (*(char *)TagFallback < 0)
        {
          v264 = google::protobuf::internal::ReadSizeFallback(TagFallback, (const char *)*(unsigned __int8 *)TagFallback);
          if (!v264)
            return 0;
          v110 = v264;
          v109 = v265;
        }
        else
        {
          v110 = (char *)TagFallback + 1;
        }
        v266 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v110, v109);
        v267 = *((_DWORD *)a3 + 22);
        v193 = __OFSUB__(v267--, 1);
        *((_DWORD *)a3 + 22) = v267;
        if (v267 < 0 != v193)
          return 0;
        v194 = v266;
        v195 = SnippetUI::StatusIndicator_Error::_InternalParse(v29, (google::protobuf::internal *)v110, a3);
        if (!v195)
          return 0;
        goto LABEL_671;
      case 0x15u:
        if (v9 != 170)
          goto LABEL_196;
        if (*((_DWORD *)this + 9) == 21)
        {
          v30 = (SnippetUI::StatusIndicator_InProgress *)*v5;
        }
        else
        {
          SnippetUI::Response_Component::clear_value((uint64_t)this);
          *((_DWORD *)this + 9) = 21;
          v30 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::StatusIndicator_InProgress>(0);
          *((_QWORD *)this + 3) = v30;
          TagFallback = v426;
        }
        v111 = *(unsigned __int8 *)TagFallback;
        if (*(char *)TagFallback < 0)
        {
          v268 = google::protobuf::internal::ReadSizeFallback(TagFallback, (const char *)*(unsigned __int8 *)TagFallback);
          if (!v268)
            return 0;
          v112 = v268;
          v111 = v269;
        }
        else
        {
          v112 = (char *)TagFallback + 1;
        }
        v270 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v112, v111);
        v271 = *((_DWORD *)a3 + 22);
        v193 = __OFSUB__(v271--, 1);
        *((_DWORD *)a3 + 22) = v271;
        if (v271 < 0 != v193)
          return 0;
        v194 = v270;
        v195 = SnippetUI::StatusIndicator_InProgress::_InternalParse(v30, (google::protobuf::internal *)v112, a3);
        if (!v195)
          return 0;
        goto LABEL_671;
      case 0x16u:
        if (v9 != 178)
          goto LABEL_196;
        if (*((_DWORD *)this + 9) == 22)
        {
          v31 = (SnippetUI::StatusIndicator_Cancelled *)*v5;
        }
        else
        {
          SnippetUI::Response_Component::clear_value((uint64_t)this);
          *((_DWORD *)this + 9) = 22;
          v31 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::StatusIndicator_Cancelled>(0);
          *((_QWORD *)this + 3) = v31;
          TagFallback = v426;
        }
        v113 = *(unsigned __int8 *)TagFallback;
        if (*(char *)TagFallback < 0)
        {
          v272 = google::protobuf::internal::ReadSizeFallback(TagFallback, (const char *)*(unsigned __int8 *)TagFallback);
          if (!v272)
            return 0;
          v114 = v272;
          v113 = v273;
        }
        else
        {
          v114 = (char *)TagFallback + 1;
        }
        v274 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v114, v113);
        v275 = *((_DWORD *)a3 + 22);
        v193 = __OFSUB__(v275--, 1);
        *((_DWORD *)a3 + 22) = v275;
        if (v275 < 0 != v193)
          return 0;
        v194 = v274;
        v195 = SnippetUI::StatusIndicator_Cancelled::_InternalParse(v31, (google::protobuf::internal *)v114, a3);
        if (!v195)
          return 0;
        goto LABEL_671;
      case 0x17u:
        if (v9 != 186)
          goto LABEL_196;
        if (*((_DWORD *)this + 9) == 23)
        {
          v32 = (SnippetUI::TextInput *)*v5;
        }
        else
        {
          SnippetUI::Response_Component::clear_value((uint64_t)this);
          *((_DWORD *)this + 9) = 23;
          v32 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextInput>(0);
          *((_QWORD *)this + 3) = v32;
          TagFallback = v426;
        }
        v115 = *(unsigned __int8 *)TagFallback;
        if (*(char *)TagFallback < 0)
        {
          v276 = google::protobuf::internal::ReadSizeFallback(TagFallback, (const char *)*(unsigned __int8 *)TagFallback);
          if (!v276)
            return 0;
          v116 = v276;
          v115 = v277;
        }
        else
        {
          v116 = (char *)TagFallback + 1;
        }
        v278 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v116, v115);
        v279 = *((_DWORD *)a3 + 22);
        v193 = __OFSUB__(v279--, 1);
        *((_DWORD *)a3 + 22) = v279;
        if (v279 < 0 != v193)
          return 0;
        v194 = v278;
        v195 = SnippetUI::TextInput::_InternalParse(v32, (google::protobuf::internal *)v116, a3);
        if (!v195)
          return 0;
        goto LABEL_671;
      case 0x18u:
        if (v9 != 194)
          goto LABEL_196;
        if (*((_DWORD *)this + 9) == 24)
        {
          v33 = (SnippetUI::Control_Switch *)*v5;
        }
        else
        {
          SnippetUI::Response_Component::clear_value((uint64_t)this);
          *((_DWORD *)this + 9) = 24;
          v33 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Control_Switch>(0);
          *((_QWORD *)this + 3) = v33;
          TagFallback = v426;
        }
        v117 = *(unsigned __int8 *)TagFallback;
        if (*(char *)TagFallback < 0)
        {
          v280 = google::protobuf::internal::ReadSizeFallback(TagFallback, (const char *)*(unsigned __int8 *)TagFallback);
          if (!v280)
            return 0;
          v118 = v280;
          v117 = v281;
        }
        else
        {
          v118 = (char *)TagFallback + 1;
        }
        v282 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v118, v117);
        v283 = *((_DWORD *)a3 + 22);
        v193 = __OFSUB__(v283--, 1);
        *((_DWORD *)a3 + 22) = v283;
        if (v283 < 0 != v193)
          return 0;
        v194 = v282;
        v195 = SnippetUI::Control_Switch::_InternalParse(v33, (google::protobuf::internal *)v118, a3);
        if (!v195)
          return 0;
        goto LABEL_671;
      case 0x19u:
        if (v9 != 202)
          goto LABEL_196;
        if (*((_DWORD *)this + 9) == 25)
        {
          v34 = (SnippetUI::Control_Slider *)*v5;
        }
        else
        {
          SnippetUI::Response_Component::clear_value((uint64_t)this);
          *((_DWORD *)this + 9) = 25;
          v34 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Control_Slider>(0);
          *((_QWORD *)this + 3) = v34;
          TagFallback = v426;
        }
        v119 = *(unsigned __int8 *)TagFallback;
        if (*(char *)TagFallback < 0)
        {
          v284 = google::protobuf::internal::ReadSizeFallback(TagFallback, (const char *)*(unsigned __int8 *)TagFallback);
          if (!v284)
            return 0;
          v120 = v284;
          v119 = v285;
        }
        else
        {
          v120 = (char *)TagFallback + 1;
        }
        v286 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v120, v119);
        v287 = *((_DWORD *)a3 + 22);
        v193 = __OFSUB__(v287--, 1);
        *((_DWORD *)a3 + 22) = v287;
        if (v287 < 0 != v193)
          return 0;
        v194 = v286;
        v195 = SnippetUI::Control_Slider::_InternalParse(v34, (google::protobuf::internal *)v120, a3);
        if (!v195)
          return 0;
        goto LABEL_671;
      case 0x1Au:
        if (v9 != 210)
          goto LABEL_196;
        if (*((_DWORD *)this + 9) == 26)
        {
          v35 = *v5;
          if (*v5 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
            goto LABEL_277;
        }
        else
        {
          SnippetUI::Response_Component::clear_value((uint64_t)this);
          *((_DWORD *)this + 9) = 26;
          *((_QWORD *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
        }
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        v35 = *v5;
        TagFallback = v426;
LABEL_277:
        v74 = google::protobuf::internal::InlineGreedyStringParserUTF8(v35, (std::string::value_type *)TagFallback, (uint64_t)a3, (google::protobuf::internal *)"SnippetUI.Response.Component.group_id");
LABEL_278:
        v426 = (google::protobuf::internal *)v74;
        if (!v74)
          return 0;
        continue;
      case 0x1Bu:
        if (v9 != 218)
          goto LABEL_196;
        if (*((_DWORD *)this + 9) == 27)
        {
          v36 = (SnippetUI::Reference_Standard *)*v5;
        }
        else
        {
          SnippetUI::Response_Component::clear_value((uint64_t)this);
          *((_DWORD *)this + 9) = 27;
          v36 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Reference_Standard>(0);
          *((_QWORD *)this + 3) = v36;
          TagFallback = v426;
        }
        v121 = *(unsigned __int8 *)TagFallback;
        if (*(char *)TagFallback < 0)
        {
          v288 = google::protobuf::internal::ReadSizeFallback(TagFallback, (const char *)*(unsigned __int8 *)TagFallback);
          if (!v288)
            return 0;
          v122 = v288;
          v121 = v289;
        }
        else
        {
          v122 = (char *)TagFallback + 1;
        }
        v290 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v122, v121);
        v291 = *((_DWORD *)a3 + 22);
        v193 = __OFSUB__(v291--, 1);
        *((_DWORD *)a3 + 22) = v291;
        if (v291 < 0 != v193)
          return 0;
        v194 = v290;
        v195 = SnippetUI::Reference_Standard::_InternalParse(v36, (google::protobuf::internal *)v122, a3);
        if (!v195)
          return 0;
        goto LABEL_671;
      case 0x1Cu:
        if (v9 != 226)
          goto LABEL_196;
        if (*((_DWORD *)this + 9) == 28)
        {
          v37 = (SnippetUI::Reference_Logo *)*v5;
        }
        else
        {
          SnippetUI::Response_Component::clear_value((uint64_t)this);
          *((_DWORD *)this + 9) = 28;
          v37 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Reference_Logo>(0);
          *((_QWORD *)this + 3) = v37;
          TagFallback = v426;
        }
        v123 = *(unsigned __int8 *)TagFallback;
        if (*(char *)TagFallback < 0)
        {
          v292 = google::protobuf::internal::ReadSizeFallback(TagFallback, (const char *)*(unsigned __int8 *)TagFallback);
          if (!v292)
            return 0;
          v124 = v292;
          v123 = v293;
        }
        else
        {
          v124 = (char *)TagFallback + 1;
        }
        v294 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v124, v123);
        v295 = *((_DWORD *)a3 + 22);
        v193 = __OFSUB__(v295--, 1);
        *((_DWORD *)a3 + 22) = v295;
        if (v295 < 0 != v193)
          return 0;
        v194 = v294;
        v195 = SnippetUI::Reference_Logo::_InternalParse(v37, (google::protobuf::internal *)v124, a3);
        if (!v195)
          return 0;
        goto LABEL_671;
      case 0x1Du:
        if (v9 != 234)
          goto LABEL_196;
        if (*((_DWORD *)this + 9) == 29)
        {
          v38 = (SnippetUI::Reference_Rich *)*v5;
        }
        else
        {
          SnippetUI::Response_Component::clear_value((uint64_t)this);
          *((_DWORD *)this + 9) = 29;
          v38 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Reference_Rich>(0);
          *((_QWORD *)this + 3) = v38;
          TagFallback = v426;
        }
        v125 = *(unsigned __int8 *)TagFallback;
        if (*(char *)TagFallback < 0)
        {
          v296 = google::protobuf::internal::ReadSizeFallback(TagFallback, (const char *)*(unsigned __int8 *)TagFallback);
          if (!v296)
            return 0;
          v126 = v296;
          v125 = v297;
        }
        else
        {
          v126 = (char *)TagFallback + 1;
        }
        v298 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v126, v125);
        v299 = *((_DWORD *)a3 + 22);
        v193 = __OFSUB__(v299--, 1);
        *((_DWORD *)a3 + 22) = v299;
        if (v299 < 0 != v193)
          return 0;
        v194 = v298;
        v195 = SnippetUI::Reference_Rich::_InternalParse(v38, (google::protobuf::internal *)v126, a3);
        if (!v195)
          return 0;
        goto LABEL_671;
      case 0x1Eu:
        if (v9 != 242)
          goto LABEL_196;
        if (*((_DWORD *)this + 9) == 30)
        {
          v39 = (SnippetUI::Reference_Button *)*v5;
        }
        else
        {
          SnippetUI::Response_Component::clear_value((uint64_t)this);
          *((_DWORD *)this + 9) = 30;
          v39 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Reference_Button>(0);
          *((_QWORD *)this + 3) = v39;
          TagFallback = v426;
        }
        v127 = *(unsigned __int8 *)TagFallback;
        if (*(char *)TagFallback < 0)
        {
          v300 = google::protobuf::internal::ReadSizeFallback(TagFallback, (const char *)*(unsigned __int8 *)TagFallback);
          if (!v300)
            return 0;
          v128 = v300;
          v127 = v301;
        }
        else
        {
          v128 = (char *)TagFallback + 1;
        }
        v302 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v128, v127);
        v303 = *((_DWORD *)a3 + 22);
        v193 = __OFSUB__(v303--, 1);
        *((_DWORD *)a3 + 22) = v303;
        if (v303 < 0 != v193)
          return 0;
        v194 = v302;
        v195 = SnippetUI::Reference_Button::_InternalParse(v39, (google::protobuf::internal *)v128, a3);
        if (!v195)
          return 0;
        goto LABEL_671;
      case 0x1Fu:
        if (v9 != 250)
          goto LABEL_196;
        if (*((_DWORD *)this + 9) == 31)
        {
          v40 = (SnippetUI::SummaryItem_Pair *)*v5;
        }
        else
        {
          SnippetUI::Response_Component::clear_value((uint64_t)this);
          *((_DWORD *)this + 9) = 31;
          v40 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::SummaryItem_Pair>(0);
          *((_QWORD *)this + 3) = v40;
          TagFallback = v426;
        }
        v129 = *(unsigned __int8 *)TagFallback;
        if (*(char *)TagFallback < 0)
        {
          v304 = google::protobuf::internal::ReadSizeFallback(TagFallback, (const char *)*(unsigned __int8 *)TagFallback);
          if (!v304)
            return 0;
          v130 = v304;
          v129 = v305;
        }
        else
        {
          v130 = (char *)TagFallback + 1;
        }
        v306 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v130, v129);
        v307 = *((_DWORD *)a3 + 22);
        v193 = __OFSUB__(v307--, 1);
        *((_DWORD *)a3 + 22) = v307;
        if (v307 < 0 != v193)
          return 0;
        v194 = v306;
        v195 = SnippetUI::SummaryItem_Pair::_InternalParse(v40, (google::protobuf::internal *)v130, a3);
        if (!v195)
          return 0;
        goto LABEL_671;
      case 0x20u:
        if (v9 != 2)
          goto LABEL_196;
        if (*((_DWORD *)this + 9) == 32)
        {
          v41 = (SnippetUI::SummaryItem_PairNumber *)*v5;
        }
        else
        {
          SnippetUI::Response_Component::clear_value((uint64_t)this);
          *((_DWORD *)this + 9) = 32;
          v41 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::SummaryItem_PairNumber>(0);
          *((_QWORD *)this + 3) = v41;
          TagFallback = v426;
        }
        v131 = *(unsigned __int8 *)TagFallback;
        if (*(char *)TagFallback < 0)
        {
          v308 = google::protobuf::internal::ReadSizeFallback(TagFallback, (const char *)*(unsigned __int8 *)TagFallback);
          if (!v308)
            return 0;
          v132 = v308;
          v131 = v309;
        }
        else
        {
          v132 = (char *)TagFallback + 1;
        }
        v310 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v132, v131);
        v311 = *((_DWORD *)a3 + 22);
        v193 = __OFSUB__(v311--, 1);
        *((_DWORD *)a3 + 22) = v311;
        if (v311 < 0 != v193)
          return 0;
        v194 = v310;
        v195 = SnippetUI::SummaryItem_PairNumber::_InternalParse(v41, (google::protobuf::internal *)v132, a3);
        if (!v195)
          return 0;
        goto LABEL_671;
      case 0x21u:
        if (v9 != 10)
          goto LABEL_196;
        if (*((_DWORD *)this + 9) == 33)
        {
          v42 = (SnippetUI::SummaryItem_Button *)*v5;
        }
        else
        {
          SnippetUI::Response_Component::clear_value((uint64_t)this);
          *((_DWORD *)this + 9) = 33;
          v42 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::SummaryItem_Button>(0);
          *((_QWORD *)this + 3) = v42;
          TagFallback = v426;
        }
        v133 = *(unsigned __int8 *)TagFallback;
        if (*(char *)TagFallback < 0)
        {
          v312 = google::protobuf::internal::ReadSizeFallback(TagFallback, (const char *)*(unsigned __int8 *)TagFallback);
          if (!v312)
            return 0;
          v134 = v312;
          v133 = v313;
        }
        else
        {
          v134 = (char *)TagFallback + 1;
        }
        v314 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v134, v133);
        v315 = *((_DWORD *)a3 + 22);
        v193 = __OFSUB__(v315--, 1);
        *((_DWORD *)a3 + 22) = v315;
        if (v315 < 0 != v193)
          return 0;
        v194 = v314;
        v195 = SnippetUI::SummaryItem_Button::_InternalParse(v42, (google::protobuf::internal *)v134, a3);
        if (!v195)
          return 0;
        goto LABEL_671;
      case 0x22u:
        if (v9 != 18)
          goto LABEL_196;
        if (*((_DWORD *)this + 9) == 34)
        {
          v43 = (SnippetUI::FactItem_Button *)*v5;
        }
        else
        {
          SnippetUI::Response_Component::clear_value((uint64_t)this);
          *((_DWORD *)this + 9) = 34;
          v43 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::FactItem_Button>(0);
          *((_QWORD *)this + 3) = v43;
          TagFallback = v426;
        }
        v135 = *(unsigned __int8 *)TagFallback;
        if (*(char *)TagFallback < 0)
        {
          v316 = google::protobuf::internal::ReadSizeFallback(TagFallback, (const char *)*(unsigned __int8 *)TagFallback);
          if (!v316)
            return 0;
          v136 = v316;
          v135 = v317;
        }
        else
        {
          v136 = (char *)TagFallback + 1;
        }
        v318 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v136, v135);
        v319 = *((_DWORD *)a3 + 22);
        v193 = __OFSUB__(v319--, 1);
        *((_DWORD *)a3 + 22) = v319;
        if (v319 < 0 != v193)
          return 0;
        v194 = v318;
        v195 = SnippetUI::FactItem_Button::_InternalParse(v43, (google::protobuf::internal *)v136, a3);
        if (!v195)
          return 0;
        goto LABEL_671;
      case 0x23u:
        if (v9 != 26)
          goto LABEL_196;
        if (*((_DWORD *)this + 9) == 35)
        {
          v44 = (SnippetUI::Table *)*v5;
        }
        else
        {
          SnippetUI::Response_Component::clear_value((uint64_t)this);
          *((_DWORD *)this + 9) = 35;
          v44 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Table>(0);
          *((_QWORD *)this + 3) = v44;
          TagFallback = v426;
        }
        v137 = *(unsigned __int8 *)TagFallback;
        if (*(char *)TagFallback < 0)
        {
          v320 = google::protobuf::internal::ReadSizeFallback(TagFallback, (const char *)*(unsigned __int8 *)TagFallback);
          if (!v320)
            return 0;
          v138 = v320;
          v137 = v321;
        }
        else
        {
          v138 = (char *)TagFallback + 1;
        }
        v322 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v138, v137);
        v323 = *((_DWORD *)a3 + 22);
        v193 = __OFSUB__(v323--, 1);
        *((_DWORD *)a3 + 22) = v323;
        if (v323 < 0 != v193)
          return 0;
        v194 = v322;
        v195 = SnippetUI::Table::_InternalParse(v44, (google::protobuf::internal *)v138, a3);
        if (!v195)
          return 0;
        goto LABEL_671;
      case 0x24u:
        if (v9 != 34)
          goto LABEL_196;
        if (*((_DWORD *)this + 9) == 36)
        {
          v45 = (SnippetUI::Reference_Footnote *)*v5;
        }
        else
        {
          SnippetUI::Response_Component::clear_value((uint64_t)this);
          *((_DWORD *)this + 9) = 36;
          v45 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Reference_Footnote>(0);
          *((_QWORD *)this + 3) = v45;
          TagFallback = v426;
        }
        v139 = *(unsigned __int8 *)TagFallback;
        if (*(char *)TagFallback < 0)
        {
          v324 = google::protobuf::internal::ReadSizeFallback(TagFallback, (const char *)*(unsigned __int8 *)TagFallback);
          if (!v324)
            return 0;
          v140 = v324;
          v139 = v325;
        }
        else
        {
          v140 = (char *)TagFallback + 1;
        }
        v326 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v140, v139);
        v327 = *((_DWORD *)a3 + 22);
        v193 = __OFSUB__(v327--, 1);
        *((_DWORD *)a3 + 22) = v327;
        if (v327 < 0 != v193)
          return 0;
        v194 = v326;
        v195 = SnippetUI::Reference_Footnote::_InternalParse(v45, (google::protobuf::internal *)v140, a3);
        if (!v195)
          return 0;
        goto LABEL_671;
      case 0x25u:
        if (v9 != 42)
          goto LABEL_196;
        if (*((_DWORD *)this + 9) == 37)
        {
          v46 = (SnippetUI::LongItem_Text *)*v5;
        }
        else
        {
          SnippetUI::Response_Component::clear_value((uint64_t)this);
          *((_DWORD *)this + 9) = 37;
          v46 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::LongItem_Text>(0);
          *((_QWORD *)this + 3) = v46;
          TagFallback = v426;
        }
        v141 = *(unsigned __int8 *)TagFallback;
        if (*(char *)TagFallback < 0)
        {
          v328 = google::protobuf::internal::ReadSizeFallback(TagFallback, (const char *)*(unsigned __int8 *)TagFallback);
          if (!v328)
            return 0;
          v142 = v328;
          v141 = v329;
        }
        else
        {
          v142 = (char *)TagFallback + 1;
        }
        v330 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v142, v141);
        v331 = *((_DWORD *)a3 + 22);
        v193 = __OFSUB__(v331--, 1);
        *((_DWORD *)a3 + 22) = v331;
        if (v331 < 0 != v193)
          return 0;
        v194 = v330;
        v195 = SnippetUI::LongItem_Text::_InternalParse(v46, (google::protobuf::internal *)v142, a3);
        if (!v195)
          return 0;
        goto LABEL_671;
      case 0x26u:
        if (v9 != 50)
          goto LABEL_196;
        if (*((_DWORD *)this + 9) == 38)
        {
          v47 = (SnippetUI::Visualization_Chart *)*v5;
        }
        else
        {
          SnippetUI::Response_Component::clear_value((uint64_t)this);
          *((_DWORD *)this + 9) = 38;
          v47 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Visualization_Chart>(0);
          *((_QWORD *)this + 3) = v47;
          TagFallback = v426;
        }
        v143 = *(unsigned __int8 *)TagFallback;
        if (*(char *)TagFallback < 0)
        {
          v332 = google::protobuf::internal::ReadSizeFallback(TagFallback, (const char *)*(unsigned __int8 *)TagFallback);
          if (!v332)
            return 0;
          v144 = v332;
          v143 = v333;
        }
        else
        {
          v144 = (char *)TagFallback + 1;
        }
        v334 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v144, v143);
        v335 = *((_DWORD *)a3 + 22);
        v193 = __OFSUB__(v335--, 1);
        *((_DWORD *)a3 + 22) = v335;
        if (v335 < 0 != v193)
          return 0;
        v194 = v334;
        v195 = SnippetUI::Visualization_Chart::_InternalParse(v47, (google::protobuf::internal *)v144, a3);
        if (!v195)
          return 0;
        goto LABEL_671;
      case 0x27u:
        if (v9 != 58)
          goto LABEL_196;
        if (*((_DWORD *)this + 9) == 39)
        {
          v48 = (SnippetUI::SummaryItem_Player *)*v5;
        }
        else
        {
          SnippetUI::Response_Component::clear_value((uint64_t)this);
          *((_DWORD *)this + 9) = 39;
          v48 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::SummaryItem_Player>(0);
          *((_QWORD *)this + 3) = v48;
          TagFallback = v426;
        }
        v145 = *(unsigned __int8 *)TagFallback;
        if (*(char *)TagFallback < 0)
        {
          v336 = google::protobuf::internal::ReadSizeFallback(TagFallback, (const char *)*(unsigned __int8 *)TagFallback);
          if (!v336)
            return 0;
          v146 = v336;
          v145 = v337;
        }
        else
        {
          v146 = (char *)TagFallback + 1;
        }
        v338 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v146, v145);
        v339 = *((_DWORD *)a3 + 22);
        v193 = __OFSUB__(v339--, 1);
        *((_DWORD *)a3 + 22) = v339;
        if (v339 < 0 != v193)
          return 0;
        v194 = v338;
        v195 = SnippetUI::SummaryItem_Player::_InternalParse(v48, (google::protobuf::internal *)v146, a3);
        if (!v195)
          return 0;
        goto LABEL_671;
      case 0x28u:
        if (v9 != 66)
          goto LABEL_196;
        if (*((_DWORD *)this + 9) == 40)
        {
          v49 = (SnippetUI::SimpleItem_Player *)*v5;
        }
        else
        {
          SnippetUI::Response_Component::clear_value((uint64_t)this);
          *((_DWORD *)this + 9) = 40;
          v49 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::SimpleItem_Player>(0);
          *((_QWORD *)this + 3) = v49;
          TagFallback = v426;
        }
        v147 = *(unsigned __int8 *)TagFallback;
        if (*(char *)TagFallback < 0)
        {
          v340 = google::protobuf::internal::ReadSizeFallback(TagFallback, (const char *)*(unsigned __int8 *)TagFallback);
          if (!v340)
            return 0;
          v148 = v340;
          v147 = v341;
        }
        else
        {
          v148 = (char *)TagFallback + 1;
        }
        v342 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v148, v147);
        v343 = *((_DWORD *)a3 + 22);
        v193 = __OFSUB__(v343--, 1);
        *((_DWORD *)a3 + 22) = v343;
        if (v343 < 0 != v193)
          return 0;
        v194 = v342;
        v195 = SnippetUI::SimpleItem_Player::_InternalParse(v49, (google::protobuf::internal *)v148, a3);
        if (!v195)
          return 0;
        goto LABEL_671;
      case 0x29u:
        if (v9 != 74)
          goto LABEL_196;
        if (*((_DWORD *)this + 9) == 41)
        {
          v50 = (SnippetUI::SimpleItem_ReverseRich *)*v5;
        }
        else
        {
          SnippetUI::Response_Component::clear_value((uint64_t)this);
          *((_DWORD *)this + 9) = 41;
          v50 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::SimpleItem_ReverseRich>(0);
          *((_QWORD *)this + 3) = v50;
          TagFallback = v426;
        }
        v149 = *(unsigned __int8 *)TagFallback;
        if (*(char *)TagFallback < 0)
        {
          v344 = google::protobuf::internal::ReadSizeFallback(TagFallback, (const char *)*(unsigned __int8 *)TagFallback);
          if (!v344)
            return 0;
          v150 = v344;
          v149 = v345;
        }
        else
        {
          v150 = (char *)TagFallback + 1;
        }
        v346 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v150, v149);
        v347 = *((_DWORD *)a3 + 22);
        v193 = __OFSUB__(v347--, 1);
        *((_DWORD *)a3 + 22) = v347;
        if (v347 < 0 != v193)
          return 0;
        v194 = v346;
        v195 = SnippetUI::SimpleItem_ReverseRich::_InternalParse(v50, (google::protobuf::internal *)v150, a3);
        if (!v195)
          return 0;
        goto LABEL_671;
      case 0x2Au:
        if (v9 != 82)
          goto LABEL_196;
        if (*((_DWORD *)this + 9) == 42)
        {
          v51 = (SnippetUI::SecondaryHeader_Emphasized *)*v5;
        }
        else
        {
          SnippetUI::Response_Component::clear_value((uint64_t)this);
          *((_DWORD *)this + 9) = 42;
          v51 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::SecondaryHeader_Emphasized>(0);
          *((_QWORD *)this + 3) = v51;
          TagFallback = v426;
        }
        v151 = *(unsigned __int8 *)TagFallback;
        if (*(char *)TagFallback < 0)
        {
          v348 = google::protobuf::internal::ReadSizeFallback(TagFallback, (const char *)*(unsigned __int8 *)TagFallback);
          if (!v348)
            return 0;
          v152 = v348;
          v151 = v349;
        }
        else
        {
          v152 = (char *)TagFallback + 1;
        }
        v350 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v152, v151);
        v351 = *((_DWORD *)a3 + 22);
        v193 = __OFSUB__(v351--, 1);
        *((_DWORD *)a3 + 22) = v351;
        if (v351 < 0 != v193)
          return 0;
        v194 = v350;
        v195 = SnippetUI::SecondaryHeader_Emphasized::_InternalParse(v51, (google::protobuf::internal *)v152, a3);
        if (!v195)
          return 0;
        goto LABEL_671;
      case 0x2Bu:
        if (v9 != 90)
          goto LABEL_196;
        if (*((_DWORD *)this + 9) == 43)
        {
          v52 = (SnippetUI::SummaryItem_Switch *)*v5;
        }
        else
        {
          SnippetUI::Response_Component::clear_value((uint64_t)this);
          *((_DWORD *)this + 9) = 43;
          v52 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::SummaryItem_Switch>(0);
          *((_QWORD *)this + 3) = v52;
          TagFallback = v426;
        }
        v153 = *(unsigned __int8 *)TagFallback;
        if (*(char *)TagFallback < 0)
        {
          v352 = google::protobuf::internal::ReadSizeFallback(TagFallback, (const char *)*(unsigned __int8 *)TagFallback);
          if (!v352)
            return 0;
          v154 = v352;
          v153 = v353;
        }
        else
        {
          v154 = (char *)TagFallback + 1;
        }
        v354 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v154, v153);
        v355 = *((_DWORD *)a3 + 22);
        v193 = __OFSUB__(v355--, 1);
        *((_DWORD *)a3 + 22) = v355;
        if (v355 < 0 != v193)
          return 0;
        v194 = v354;
        v195 = SnippetUI::SummaryItem_Switch::_InternalParse(v52, (google::protobuf::internal *)v154, a3);
        if (!v195)
          return 0;
        goto LABEL_671;
      case 0x2Cu:
        if (v9 != 98)
          goto LABEL_196;
        if (*((_DWORD *)this + 9) == 44)
        {
          v53 = (SnippetUI::SystemText_ClarificationTitle *)*v5;
        }
        else
        {
          SnippetUI::Response_Component::clear_value((uint64_t)this);
          *((_DWORD *)this + 9) = 44;
          v53 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::SystemText_ClarificationTitle>(0);
          *((_QWORD *)this + 3) = v53;
          TagFallback = v426;
        }
        v155 = *(unsigned __int8 *)TagFallback;
        if (*(char *)TagFallback < 0)
        {
          v356 = google::protobuf::internal::ReadSizeFallback(TagFallback, (const char *)*(unsigned __int8 *)TagFallback);
          if (!v356)
            return 0;
          v156 = v356;
          v155 = v357;
        }
        else
        {
          v156 = (char *)TagFallback + 1;
        }
        v358 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v156, v155);
        v359 = *((_DWORD *)a3 + 22);
        v193 = __OFSUB__(v359--, 1);
        *((_DWORD *)a3 + 22) = v359;
        if (v359 < 0 != v193)
          return 0;
        v194 = v358;
        v195 = SnippetUI::SystemText_ClarificationTitle::_InternalParse(v53, (google::protobuf::internal *)v156, a3);
        if (!v195)
          return 0;
        goto LABEL_671;
      case 0x2Du:
        if (v9 != 106)
          goto LABEL_196;
        if (*((_DWORD *)this + 9) == 45)
        {
          v54 = (SnippetUI::Visualization_Image *)*v5;
        }
        else
        {
          SnippetUI::Response_Component::clear_value((uint64_t)this);
          *((_DWORD *)this + 9) = 45;
          v54 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Visualization_Image>(0);
          *((_QWORD *)this + 3) = v54;
          TagFallback = v426;
        }
        v157 = *(unsigned __int8 *)TagFallback;
        if (*(char *)TagFallback < 0)
        {
          v360 = google::protobuf::internal::ReadSizeFallback(TagFallback, (const char *)*(unsigned __int8 *)TagFallback);
          if (!v360)
            return 0;
          v158 = v360;
          v157 = v361;
        }
        else
        {
          v158 = (char *)TagFallback + 1;
        }
        v362 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v158, v157);
        v363 = *((_DWORD *)a3 + 22);
        v193 = __OFSUB__(v363--, 1);
        *((_DWORD *)a3 + 22) = v363;
        if (v363 < 0 != v193)
          return 0;
        v194 = v362;
        v195 = SnippetUI::Visualization_Image::_InternalParse(v54, (google::protobuf::internal *)v158, a3);
        if (!v195)
          return 0;
        goto LABEL_671;
      case 0x2Eu:
        if (v9 != 114)
          goto LABEL_196;
        if (*((_DWORD *)this + 9) == 46)
        {
          v55 = (SnippetUI::Visualization_Map *)*v5;
        }
        else
        {
          SnippetUI::Response_Component::clear_value((uint64_t)this);
          *((_DWORD *)this + 9) = 46;
          v55 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Visualization_Map>(0);
          *((_QWORD *)this + 3) = v55;
          TagFallback = v426;
        }
        v159 = *(unsigned __int8 *)TagFallback;
        if (*(char *)TagFallback < 0)
        {
          v364 = google::protobuf::internal::ReadSizeFallback(TagFallback, (const char *)*(unsigned __int8 *)TagFallback);
          if (!v364)
            return 0;
          v160 = v364;
          v159 = v365;
        }
        else
        {
          v160 = (char *)TagFallback + 1;
        }
        v366 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v160, v159);
        v367 = *((_DWORD *)a3 + 22);
        v193 = __OFSUB__(v367--, 1);
        *((_DWORD *)a3 + 22) = v367;
        if (v367 < 0 != v193)
          return 0;
        v194 = v366;
        v195 = SnippetUI::Visualization_Map::_InternalParse(v55, (google::protobuf::internal *)v160, a3);
        if (!v195)
          return 0;
        goto LABEL_671;
      case 0x2Fu:
        if (v9 != 122)
          goto LABEL_196;
        if (*((_DWORD *)this + 9) == 47)
        {
          v56 = (SnippetUI::Button_Container *)*v5;
        }
        else
        {
          SnippetUI::Response_Component::clear_value((uint64_t)this);
          *((_DWORD *)this + 9) = 47;
          v56 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Button_Container>(0);
          *((_QWORD *)this + 3) = v56;
          TagFallback = v426;
        }
        v161 = *(unsigned __int8 *)TagFallback;
        if (*(char *)TagFallback < 0)
        {
          v368 = google::protobuf::internal::ReadSizeFallback(TagFallback, (const char *)*(unsigned __int8 *)TagFallback);
          if (!v368)
            return 0;
          v162 = v368;
          v161 = v369;
        }
        else
        {
          v162 = (char *)TagFallback + 1;
        }
        v370 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v162, v161);
        v371 = *((_DWORD *)a3 + 22);
        v193 = __OFSUB__(v371--, 1);
        *((_DWORD *)a3 + 22) = v371;
        if (v371 < 0 != v193)
          return 0;
        v194 = v370;
        v195 = SnippetUI::Button_Container::_InternalParse(v56, (google::protobuf::internal *)v162, a3);
        if (!v195)
          return 0;
        goto LABEL_671;
      case 0x30u:
        if (v9 != 130)
          goto LABEL_196;
        if (*((_DWORD *)this + 9) == 48)
        {
          v57 = (SnippetUI::IntentsUI_Standard *)*v5;
        }
        else
        {
          SnippetUI::Response_Component::clear_value((uint64_t)this);
          *((_DWORD *)this + 9) = 48;
          v57 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::IntentsUI_Standard>(0);
          *((_QWORD *)this + 3) = v57;
          TagFallback = v426;
        }
        v163 = *(unsigned __int8 *)TagFallback;
        if (*(char *)TagFallback < 0)
        {
          v372 = google::protobuf::internal::ReadSizeFallback(TagFallback, (const char *)*(unsigned __int8 *)TagFallback);
          if (!v372)
            return 0;
          v164 = v372;
          v163 = v373;
        }
        else
        {
          v164 = (char *)TagFallback + 1;
        }
        v374 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v164, v163);
        v375 = *((_DWORD *)a3 + 22);
        v193 = __OFSUB__(v375--, 1);
        *((_DWORD *)a3 + 22) = v375;
        if (v375 < 0 != v193)
          return 0;
        v194 = v374;
        v195 = SnippetUI::IntentsUI_Standard::_InternalParse(v57, (google::protobuf::internal *)v164, a3);
        if (!v195)
          return 0;
        goto LABEL_671;
      case 0x31u:
        if (v9 != 138)
          goto LABEL_196;
        if (*((_DWORD *)this + 9) == 49)
        {
          v58 = (SnippetUI::Sash_Standard *)*v5;
        }
        else
        {
          SnippetUI::Response_Component::clear_value((uint64_t)this);
          *((_DWORD *)this + 9) = 49;
          v58 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Sash_Standard>(0);
          *((_QWORD *)this + 3) = v58;
          TagFallback = v426;
        }
        v165 = *(unsigned __int8 *)TagFallback;
        if (*(char *)TagFallback < 0)
        {
          v376 = google::protobuf::internal::ReadSizeFallback(TagFallback, (const char *)*(unsigned __int8 *)TagFallback);
          if (!v376)
            return 0;
          v166 = v376;
          v165 = v377;
        }
        else
        {
          v166 = (char *)TagFallback + 1;
        }
        v378 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v166, v165);
        v379 = *((_DWORD *)a3 + 22);
        v193 = __OFSUB__(v379--, 1);
        *((_DWORD *)a3 + 22) = v379;
        if (v379 < 0 != v193)
          return 0;
        v194 = v378;
        v195 = SnippetUI::Sash_Standard::_InternalParse(v58, (google::protobuf::internal *)v166, a3);
        if (!v195)
          return 0;
        goto LABEL_671;
      case 0x32u:
        if (v9 != 146)
          goto LABEL_196;
        if (*((_DWORD *)this + 9) == 50)
        {
          v59 = (SnippetUI::HeroHeader *)*v5;
        }
        else
        {
          SnippetUI::Response_Component::clear_value((uint64_t)this);
          *((_DWORD *)this + 9) = 50;
          v59 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::HeroHeader>(0);
          *((_QWORD *)this + 3) = v59;
          TagFallback = v426;
        }
        v167 = *(unsigned __int8 *)TagFallback;
        if (*(char *)TagFallback < 0)
        {
          v380 = google::protobuf::internal::ReadSizeFallback(TagFallback, (const char *)*(unsigned __int8 *)TagFallback);
          if (!v380)
            return 0;
          v168 = v380;
          v167 = v381;
        }
        else
        {
          v168 = (char *)TagFallback + 1;
        }
        v382 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v168, v167);
        v383 = *((_DWORD *)a3 + 22);
        v193 = __OFSUB__(v383--, 1);
        *((_DWORD *)a3 + 22) = v383;
        if (v383 < 0 != v193)
          return 0;
        v194 = v382;
        v195 = SnippetUI::HeroHeader::_InternalParse(v59, (google::protobuf::internal *)v168, a3);
        if (!v195)
          return 0;
        goto LABEL_671;
      case 0x33u:
        if (v9 != 154)
          goto LABEL_196;
        if (*((_DWORD *)this + 9) == 51)
        {
          v60 = (SnippetUI::HorizontalList_Standard *)*v5;
        }
        else
        {
          SnippetUI::Response_Component::clear_value((uint64_t)this);
          *((_DWORD *)this + 9) = 51;
          v60 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::HorizontalList_Standard>(0);
          *((_QWORD *)this + 3) = v60;
          TagFallback = v426;
        }
        v169 = *(unsigned __int8 *)TagFallback;
        if (*(char *)TagFallback < 0)
        {
          v384 = google::protobuf::internal::ReadSizeFallback(TagFallback, (const char *)*(unsigned __int8 *)TagFallback);
          if (!v384)
            return 0;
          v170 = v384;
          v169 = v385;
        }
        else
        {
          v170 = (char *)TagFallback + 1;
        }
        v386 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v170, v169);
        v387 = *((_DWORD *)a3 + 22);
        v193 = __OFSUB__(v387--, 1);
        *((_DWORD *)a3 + 22) = v387;
        if (v387 < 0 != v193)
          return 0;
        v194 = v386;
        v195 = SnippetUI::HorizontalList_Standard::_InternalParse(v60, (google::protobuf::internal *)v170, a3);
        if (!v195)
          return 0;
        goto LABEL_671;
      case 0x34u:
        if (v9 != 162)
          goto LABEL_196;
        if (*((_DWORD *)this + 9) == 52)
        {
          v61 = (SnippetUI::SectionHeader_Standard *)*v5;
        }
        else
        {
          SnippetUI::Response_Component::clear_value((uint64_t)this);
          *((_DWORD *)this + 9) = 52;
          v61 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::SectionHeader_Standard>(0);
          *((_QWORD *)this + 3) = v61;
          TagFallback = v426;
        }
        v171 = *(unsigned __int8 *)TagFallback;
        if (*(char *)TagFallback < 0)
        {
          v388 = google::protobuf::internal::ReadSizeFallback(TagFallback, (const char *)*(unsigned __int8 *)TagFallback);
          if (!v388)
            return 0;
          v172 = v388;
          v171 = v389;
        }
        else
        {
          v172 = (char *)TagFallback + 1;
        }
        v390 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v172, v171);
        v391 = *((_DWORD *)a3 + 22);
        v193 = __OFSUB__(v391--, 1);
        *((_DWORD *)a3 + 22) = v391;
        if (v391 < 0 != v193)
          return 0;
        v194 = v390;
        v195 = SnippetUI::SectionHeader_Standard::_InternalParse(v61, (google::protobuf::internal *)v172, a3);
        if (!v195)
          return 0;
        goto LABEL_671;
      case 0x35u:
        if (v9 != 170)
          goto LABEL_196;
        if (*((_DWORD *)this + 9) == 53)
        {
          v62 = (SnippetUI::SectionHeader_Rich *)*v5;
        }
        else
        {
          SnippetUI::Response_Component::clear_value((uint64_t)this);
          *((_DWORD *)this + 9) = 53;
          v62 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::SectionHeader_Rich>(0);
          *((_QWORD *)this + 3) = v62;
          TagFallback = v426;
        }
        v173 = *(unsigned __int8 *)TagFallback;
        if (*(char *)TagFallback < 0)
        {
          v392 = google::protobuf::internal::ReadSizeFallback(TagFallback, (const char *)*(unsigned __int8 *)TagFallback);
          if (!v392)
            return 0;
          v174 = v392;
          v173 = v393;
        }
        else
        {
          v174 = (char *)TagFallback + 1;
        }
        v394 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v174, v173);
        v395 = *((_DWORD *)a3 + 22);
        v193 = __OFSUB__(v395--, 1);
        *((_DWORD *)a3 + 22) = v395;
        if (v395 < 0 != v193)
          return 0;
        v194 = v394;
        v195 = SnippetUI::SectionHeader_Rich::_InternalParse(v62, (google::protobuf::internal *)v174, a3);
        if (!v195)
          return 0;
        goto LABEL_671;
      case 0x36u:
        if (v9 != 178)
          goto LABEL_196;
        if (*((_DWORD *)this + 9) == 54)
        {
          v63 = (SnippetUI::KeyValue_Standard *)*v5;
        }
        else
        {
          SnippetUI::Response_Component::clear_value((uint64_t)this);
          *((_DWORD *)this + 9) = 54;
          v63 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::KeyValue_Standard>(0);
          *((_QWORD *)this + 3) = v63;
          TagFallback = v426;
        }
        v175 = *(unsigned __int8 *)TagFallback;
        if (*(char *)TagFallback < 0)
        {
          v396 = google::protobuf::internal::ReadSizeFallback(TagFallback, (const char *)*(unsigned __int8 *)TagFallback);
          if (!v396)
            return 0;
          v176 = v396;
          v175 = v397;
        }
        else
        {
          v176 = (char *)TagFallback + 1;
        }
        v398 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v176, v175);
        v399 = *((_DWORD *)a3 + 22);
        v193 = __OFSUB__(v399--, 1);
        *((_DWORD *)a3 + 22) = v399;
        if (v399 < 0 != v193)
          return 0;
        v194 = v398;
        v195 = SnippetUI::KeyValue_Standard::_InternalParse(v63, (google::protobuf::internal *)v176, a3);
        if (!v195)
          return 0;
        goto LABEL_671;
      case 0x37u:
        if (v9 != 186)
          goto LABEL_196;
        if (*((_DWORD *)this + 9) == 55)
        {
          v64 = (SnippetUI::TertiaryHeader_Standard *)*v5;
        }
        else
        {
          SnippetUI::Response_Component::clear_value((uint64_t)this);
          *((_DWORD *)this + 9) = 55;
          v64 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TertiaryHeader_Standard>(0);
          *((_QWORD *)this + 3) = v64;
          TagFallback = v426;
        }
        v177 = *(unsigned __int8 *)TagFallback;
        if (*(char *)TagFallback < 0)
        {
          v400 = google::protobuf::internal::ReadSizeFallback(TagFallback, (const char *)*(unsigned __int8 *)TagFallback);
          if (!v400)
            return 0;
          v178 = v400;
          v177 = v401;
        }
        else
        {
          v178 = (char *)TagFallback + 1;
        }
        v402 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v178, v177);
        v403 = *((_DWORD *)a3 + 22);
        v193 = __OFSUB__(v403--, 1);
        *((_DWORD *)a3 + 22) = v403;
        if (v403 < 0 != v193)
          return 0;
        v194 = v402;
        v195 = SnippetUI::TertiaryHeader_Standard::_InternalParse(v64, (google::protobuf::internal *)v178, a3);
        if (!v195)
          return 0;
        goto LABEL_671;
      case 0x38u:
        if (v9 != 194)
          goto LABEL_196;
        if (*((_DWORD *)this + 9) == 56)
        {
          v65 = (SnippetUI::SimpleItem_RichSearchResult *)*v5;
        }
        else
        {
          SnippetUI::Response_Component::clear_value((uint64_t)this);
          *((_DWORD *)this + 9) = 56;
          v65 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::SimpleItem_RichSearchResult>(0);
          *((_QWORD *)this + 3) = v65;
          TagFallback = v426;
        }
        v179 = *(unsigned __int8 *)TagFallback;
        if (*(char *)TagFallback < 0)
        {
          v404 = google::protobuf::internal::ReadSizeFallback(TagFallback, (const char *)*(unsigned __int8 *)TagFallback);
          if (!v404)
            return 0;
          v180 = v404;
          v179 = v405;
        }
        else
        {
          v180 = (char *)TagFallback + 1;
        }
        v406 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v180, v179);
        v407 = *((_DWORD *)a3 + 22);
        v193 = __OFSUB__(v407--, 1);
        *((_DWORD *)a3 + 22) = v407;
        if (v407 < 0 != v193)
          return 0;
        v194 = v406;
        v195 = SnippetUI::SimpleItem_RichSearchResult::_InternalParse(v65, (google::protobuf::internal *)v180, a3);
        if (!v195)
          return 0;
        goto LABEL_671;
      case 0x39u:
        if (v9 != 202)
          goto LABEL_196;
        v66 = (SnippetUI::Separators *)*((_QWORD *)this + 2);
        if (!v66)
        {
          v66 = (SnippetUI::Separators *)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Separators>(0);
          *((_QWORD *)this + 2) = v66;
          TagFallback = v426;
        }
        v67 = *(unsigned __int8 *)TagFallback;
        if (*(char *)TagFallback < 0)
        {
          v189 = google::protobuf::internal::ReadSizeFallback(TagFallback, (const char *)*(unsigned __int8 *)TagFallback);
          if (!v189)
            return 0;
          v68 = v189;
          v67 = v190;
        }
        else
        {
          v68 = (char *)TagFallback + 1;
        }
        v191 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v68, v67);
        v192 = *((_DWORD *)a3 + 22);
        v193 = __OFSUB__(v192--, 1);
        *((_DWORD *)a3 + 22) = v192;
        if (v192 < 0 != v193)
          return 0;
        v194 = v191;
        v195 = SnippetUI::Separators::_InternalParse(v66, (google::protobuf::internal *)v68, a3);
        if (!v195)
          return 0;
        goto LABEL_671;
      case 0x3Au:
        if (v9 != 210)
          goto LABEL_196;
        if (*((_DWORD *)this + 9) == 58)
        {
          v69 = (SnippetUI::SummaryItem_PairNumberV2 *)*v5;
        }
        else
        {
          SnippetUI::Response_Component::clear_value((uint64_t)this);
          *((_DWORD *)this + 9) = 58;
          v69 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::SummaryItem_PairNumberV2>(0);
          *((_QWORD *)this + 3) = v69;
          TagFallback = v426;
        }
        v181 = *(unsigned __int8 *)TagFallback;
        if (*(char *)TagFallback < 0)
        {
          v408 = google::protobuf::internal::ReadSizeFallback(TagFallback, (const char *)*(unsigned __int8 *)TagFallback);
          if (!v408)
            return 0;
          v182 = v408;
          v181 = v409;
        }
        else
        {
          v182 = (char *)TagFallback + 1;
        }
        v410 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v182, v181);
        v411 = *((_DWORD *)a3 + 22);
        v193 = __OFSUB__(v411--, 1);
        *((_DWORD *)a3 + 22) = v411;
        if (v411 < 0 != v193)
          return 0;
        v194 = v410;
        v195 = SnippetUI::SummaryItem_PairNumberV2::_InternalParse(v69, (google::protobuf::internal *)v182, a3);
        if (!v195)
          return 0;
        goto LABEL_671;
      case 0x3Bu:
        if (v9 != 218)
          goto LABEL_196;
        if (*((_DWORD *)this + 9) == 59)
        {
          v70 = (SnippetUI::SummaryItem_PairV2 *)*v5;
        }
        else
        {
          SnippetUI::Response_Component::clear_value((uint64_t)this);
          *((_DWORD *)this + 9) = 59;
          v70 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::SummaryItem_PairV2>(0);
          *((_QWORD *)this + 3) = v70;
          TagFallback = v426;
        }
        v183 = *(unsigned __int8 *)TagFallback;
        if (*(char *)TagFallback < 0)
        {
          v412 = google::protobuf::internal::ReadSizeFallback(TagFallback, (const char *)*(unsigned __int8 *)TagFallback);
          if (!v412)
            return 0;
          v184 = v412;
          v183 = v413;
        }
        else
        {
          v184 = (char *)TagFallback + 1;
        }
        v414 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v184, v183);
        v415 = *((_DWORD *)a3 + 22);
        v193 = __OFSUB__(v415--, 1);
        *((_DWORD *)a3 + 22) = v415;
        if (v415 < 0 != v193)
          return 0;
        v194 = v414;
        v195 = SnippetUI::SummaryItem_PairV2::_InternalParse(v70, (google::protobuf::internal *)v184, a3);
        if (!v195)
          return 0;
        goto LABEL_671;
      case 0x3Cu:
        if (v9 != 226)
          goto LABEL_196;
        if (*((_DWORD *)this + 9) == 60)
        {
          v71 = (SnippetUI::Control_PlayerButton *)*v5;
        }
        else
        {
          SnippetUI::Response_Component::clear_value((uint64_t)this);
          *((_DWORD *)this + 9) = 60;
          v71 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Control_PlayerButton>(0);
          *((_QWORD *)this + 3) = v71;
          TagFallback = v426;
        }
        v185 = *(unsigned __int8 *)TagFallback;
        if (*(char *)TagFallback < 0)
        {
          v416 = google::protobuf::internal::ReadSizeFallback(TagFallback, (const char *)*(unsigned __int8 *)TagFallback);
          if (!v416)
            return 0;
          v186 = v416;
          v185 = v417;
        }
        else
        {
          v186 = (char *)TagFallback + 1;
        }
        v418 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v186, v185);
        v419 = *((_DWORD *)a3 + 22);
        v193 = __OFSUB__(v419--, 1);
        *((_DWORD *)a3 + 22) = v419;
        if (v419 < 0 != v193)
          return 0;
        v194 = v418;
        v195 = SnippetUI::Control_PlayerButton::_InternalParse(v71, (google::protobuf::internal *)v186, a3);
        if (!v195)
          return 0;
        goto LABEL_671;
      case 0x3Du:
        if (v9 != 234)
          goto LABEL_196;
        if (*((_DWORD *)this + 9) == 61)
        {
          v72 = (SnippetUI::SummaryItem_SwitchV2 *)*v5;
        }
        else
        {
          SnippetUI::Response_Component::clear_value((uint64_t)this);
          *((_DWORD *)this + 9) = 61;
          v72 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::SummaryItem_SwitchV2>(0);
          *((_QWORD *)this + 3) = v72;
          TagFallback = v426;
        }
        v187 = *(unsigned __int8 *)TagFallback;
        if (*(char *)TagFallback < 0)
        {
          v420 = google::protobuf::internal::ReadSizeFallback(TagFallback, (const char *)*(unsigned __int8 *)TagFallback);
          if (!v420)
            return 0;
          v188 = v420;
          v187 = v421;
        }
        else
        {
          v188 = (char *)TagFallback + 1;
        }
        v422 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v188, v187);
        v423 = *((_DWORD *)a3 + 22);
        v193 = __OFSUB__(v423--, 1);
        *((_DWORD *)a3 + 22) = v423;
        if (v423 < 0 != v193)
          return 0;
        v194 = v422;
        v195 = SnippetUI::SummaryItem_SwitchV2::_InternalParse(v72, (google::protobuf::internal *)v188, a3);
        if (!v195)
          return 0;
LABEL_671:
        ++*((_DWORD *)a3 + 22);
        if (!*((_DWORD *)a3 + 20))
        {
          v424 = *((_DWORD *)a3 + 7) + v194;
          *((_DWORD *)a3 + 7) = v424;
          *(_QWORD *)a3 = *((_QWORD *)a3 + 1) + (v424 & (v424 >> 31));
          v426 = v195;
          continue;
        }
        return 0;
      default:
LABEL_196:
        if ((_DWORD)v9)
          v73 = (v9 & 7) == 4;
        else
          v73 = 1;
        if (v73)
        {
          *((_DWORD *)a3 + 20) = (_DWORD)v9 - 1;
          return TagFallback;
        }
        v426 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v9, v6, TagFallback, a3, v7);
        if (!v426)
          return 0;
        continue;
    }
  }
}

uint64_t SnippetUI::Response_Component::clear_value(uint64_t this)
{
  uint64_t v1;

  v1 = this;
  switch(*(_DWORD *)(this + 36))
  {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 0xA:
    case 0xB:
    case 0xC:
    case 0xD:
    case 0xE:
    case 0xF:
    case 0x10:
    case 0x11:
    case 0x12:
    case 0x13:
    case 0x14:
    case 0x15:
    case 0x16:
    case 0x17:
    case 0x18:
    case 0x19:
    case 0x1B:
    case 0x1C:
    case 0x1D:
    case 0x1E:
    case 0x1F:
    case 0x20:
    case 0x21:
    case 0x22:
    case 0x23:
    case 0x24:
    case 0x25:
    case 0x26:
    case 0x27:
    case 0x28:
    case 0x29:
    case 0x2A:
    case 0x2B:
    case 0x2C:
    case 0x2D:
    case 0x2E:
    case 0x2F:
    case 0x30:
    case 0x31:
    case 0x32:
    case 0x33:
    case 0x34:
    case 0x35:
    case 0x36:
    case 0x37:
    case 0x38:
    case 0x3A:
    case 0x3B:
    case 0x3C:
    case 0x3D:
      this = *(_QWORD *)(this + 24);
      if (this)
        this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
      break;
    case 0x1A:
      this = google::protobuf::internal::ArenaStringPtr::DestroyNoArena(*(_QWORD *)(this + 24));
      break;
    default:
      break;
  }
  *(_DWORD *)(v1 + 36) = 0;
  return this;
}

SnippetUI::IntentsUI_Standard *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::IntentsUI_Standard>(google::protobuf::internal::ArenaImpl *this)
{
  SnippetUI::IntentsUI_Standard *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (SnippetUI::IntentsUI_Standard *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x48uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::IntentsUI_Standard>);
    SnippetUI::IntentsUI_Standard::IntentsUI_Standard(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (SnippetUI::IntentsUI_Standard *)operator new();
    SnippetUI::IntentsUI_Standard::IntentsUI_Standard(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_1BFBEFF7C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D890](v1, 0x10A1C406FFA8010);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::IntentsUI_Standard>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t google::protobuf::internal::ArenaStringPtr::DestroyNoArena(uint64_t result)
{
  if ((uint64_t *)result != &google::protobuf::internal::fixed_address_empty_string && result != 0)
  {
    if (*(char *)(result + 23) < 0)
      operator delete(*(void **)result);
    JUMPOUT(0x1C3B8D890);
  }
  return result;
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::Response_Component>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

char *SnippetUI::Response_Component::ByteSizeLong(SnippetUI::Response_Component *this)
{
  SnippetUI::Separators *v2;
  char *v3;
  const google::protobuf::UnknownFieldSet *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;

  if (this == (SnippetUI::Response_Component *)&SnippetUI::_Response_Component_default_instance_
    || (v2 = (SnippetUI::Separators *)*((_QWORD *)this + 2)) == 0)
  {
    v4 = 0;
  }
  else
  {
    v3 = SnippetUI::Separators::ByteSizeLong(v2);
    v4 = (const google::protobuf::UnknownFieldSet *)&v3[((9 * (__clz(v3 | 1) ^ 0x1F) + 73) >> 6) + 2];
  }
  switch(*((_DWORD *)this + 9))
  {
    case 1:
      v5 = SnippetUI::CustomCanvas::ByteSizeLong(*((SnippetUI::CustomCanvas **)this + 3));
      goto LABEL_21;
    case 2:
      v5 = SnippetUI::FactItem_Standard::ByteSizeLong(*((SnippetUI::FactItem_Standard **)this + 3));
      goto LABEL_21;
    case 3:
      v5 = SnippetUI::FactItem_ShortNumber::ByteSizeLong(*((SnippetUI::FactItem_ShortNumber **)this + 3));
      goto LABEL_21;
    case 4:
      v5 = SnippetUI::FactItem_HeroNumber::ByteSizeLong(*((SnippetUI::FactItem_HeroNumber **)this + 3));
      goto LABEL_21;
    case 5:
      v5 = SnippetUI::SummaryItem_Standard::ByteSizeLong(*((SnippetUI::SummaryItem_Standard **)this + 3));
      goto LABEL_21;
    case 6:
      v5 = SnippetUI::SummaryItem_ShortNumber::ByteSizeLong(*((SnippetUI::SummaryItem_ShortNumber **)this + 3));
      goto LABEL_21;
    case 7:
      v5 = SnippetUI::SummaryItem_Text::ByteSizeLong(*((SnippetUI::SummaryItem_Text **)this + 3));
      goto LABEL_21;
    case 8:
      v5 = SnippetUI::SummaryItem_LargeText::ByteSizeLong(*((SnippetUI::SummaryItem_LargeText **)this + 3));
      goto LABEL_21;
    case 9:
      v5 = SnippetUI::SummaryItem_DetailedText::ByteSizeLong(*((SnippetUI::SummaryItem_DetailedText **)this + 3));
      goto LABEL_21;
    case 0xA:
      v5 = SnippetUI::SimpleItem_Standard::ByteSizeLong(*((SnippetUI::SimpleItem_Standard **)this + 3));
      goto LABEL_21;
    case 0xB:
      v5 = SnippetUI::SimpleItem_Rich::ByteSizeLong(*((SnippetUI::SimpleItem_Rich **)this + 3));
      goto LABEL_21;
    case 0xC:
      v5 = SnippetUI::SimpleItem_Visual::ByteSizeLong(*((SnippetUI::SimpleItem_Visual **)this + 3));
      goto LABEL_21;
    case 0xD:
      v5 = SnippetUI::PrimaryHeader_Standard::ByteSizeLong(*((SnippetUI::PrimaryHeader_Standard **)this + 3));
      goto LABEL_21;
    case 0xE:
      v5 = SnippetUI::PrimaryHeader_Marquee::ByteSizeLong(*((SnippetUI::PrimaryHeader_Marquee **)this + 3));
      goto LABEL_21;
    case 0xF:
      v5 = SnippetUI::PrimaryHeader_Rich::ByteSizeLong(*((SnippetUI::PrimaryHeader_Rich **)this + 3));
LABEL_21:
      v4 = (const google::protobuf::UnknownFieldSet *)&v5[(_QWORD)v4
                                                        + 1
                                                        + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6)];
      break;
    case 0x10:
      v6 = SnippetUI::SecondaryHeader_Standard::ByteSizeLong(*((SnippetUI::SecondaryHeader_Standard **)this + 3));
      goto LABEL_69;
    case 0x11:
      v6 = SnippetUI::Button::ByteSizeLong(*((SnippetUI::Button **)this + 3));
      goto LABEL_69;
    case 0x12:
      v6 = SnippetUI::BinaryButton::ByteSizeLong(*((SnippetUI::BinaryButton **)this + 3));
      goto LABEL_69;
    case 0x13:
      v6 = SnippetUI::StatusIndicator_Success::ByteSizeLong(*((SnippetUI::StatusIndicator_Success **)this + 3));
      goto LABEL_69;
    case 0x14:
      v6 = SnippetUI::StatusIndicator_Error::ByteSizeLong(*((SnippetUI::StatusIndicator_Error **)this + 3));
      goto LABEL_69;
    case 0x15:
      v6 = SnippetUI::StatusIndicator_InProgress::ByteSizeLong(*((SnippetUI::StatusIndicator_InProgress **)this + 3));
      goto LABEL_69;
    case 0x16:
      v6 = SnippetUI::StatusIndicator_Cancelled::ByteSizeLong(*((SnippetUI::StatusIndicator_Cancelled **)this + 3));
      goto LABEL_69;
    case 0x17:
      v6 = SnippetUI::TextInput::ByteSizeLong(*((SnippetUI::TextInput **)this + 3));
      goto LABEL_69;
    case 0x18:
      v6 = SnippetUI::Control_Switch::ByteSizeLong(*((SnippetUI::Control_Switch **)this + 3));
      goto LABEL_69;
    case 0x19:
      v6 = SnippetUI::Control_Slider::ByteSizeLong(*((SnippetUI::Control_Slider **)this + 3));
      goto LABEL_69;
    case 0x1A:
      v7 = *((_QWORD *)this + 3);
      v8 = *(unsigned __int8 *)(v7 + 23);
      v9 = *(_QWORD *)(v7 + 8);
      if ((v8 & 0x80u) == 0)
        v9 = v8;
      v10 = (char *)v4 + v9 + ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6);
      goto LABEL_70;
    case 0x1B:
      v6 = SnippetUI::Reference_Standard::ByteSizeLong(*((SnippetUI::Reference_Standard **)this + 3));
      goto LABEL_69;
    case 0x1C:
      v6 = SnippetUI::Reference_Logo::ByteSizeLong(*((SnippetUI::Reference_Logo **)this + 3));
      goto LABEL_69;
    case 0x1D:
      v6 = SnippetUI::Reference_Rich::ByteSizeLong(*((SnippetUI::Reference_Rich **)this + 3));
      goto LABEL_69;
    case 0x1E:
      v6 = SnippetUI::Reference_Button::ByteSizeLong(*((SnippetUI::Reference_Button **)this + 3));
      goto LABEL_69;
    case 0x1F:
      v6 = SnippetUI::SummaryItem_Pair::ByteSizeLong(*((SnippetUI::SummaryItem_Pair **)this + 3));
      goto LABEL_69;
    case 0x20:
      v6 = SnippetUI::SummaryItem_PairNumber::ByteSizeLong(*((SnippetUI::SummaryItem_PairNumber **)this + 3));
      goto LABEL_69;
    case 0x21:
      v6 = SnippetUI::SummaryItem_Button::ByteSizeLong(*((SnippetUI::SummaryItem_Button **)this + 3));
      goto LABEL_69;
    case 0x22:
      v6 = SnippetUI::FactItem_Button::ByteSizeLong(*((SnippetUI::FactItem_Button **)this + 3));
      goto LABEL_69;
    case 0x23:
      v6 = SnippetUI::Table::ByteSizeLong(*((SnippetUI::Table **)this + 3));
      goto LABEL_69;
    case 0x24:
      v6 = SnippetUI::Reference_Footnote::ByteSizeLong(*((SnippetUI::Reference_Footnote **)this + 3));
      goto LABEL_69;
    case 0x25:
      v6 = SnippetUI::LongItem_Text::ByteSizeLong(*((SnippetUI::LongItem_Text **)this + 3));
      goto LABEL_69;
    case 0x26:
      v6 = SnippetUI::Visualization_Chart::ByteSizeLong(*((SnippetUI::Visualization_Chart **)this + 3));
      goto LABEL_69;
    case 0x27:
      v6 = SnippetUI::SummaryItem_Player::ByteSizeLong(*((SnippetUI::SummaryItem_Player **)this + 3));
      goto LABEL_69;
    case 0x28:
      v6 = SnippetUI::SimpleItem_Player::ByteSizeLong(*((SnippetUI::SimpleItem_Player **)this + 3));
      goto LABEL_69;
    case 0x29:
      v6 = SnippetUI::SimpleItem_ReverseRich::ByteSizeLong(*((SnippetUI::SimpleItem_ReverseRich **)this + 3));
      goto LABEL_69;
    case 0x2A:
      v6 = SnippetUI::SecondaryHeader_Emphasized::ByteSizeLong(*((SnippetUI::SecondaryHeader_Emphasized **)this + 3));
      goto LABEL_69;
    case 0x2B:
      v6 = SnippetUI::SummaryItem_Switch::ByteSizeLong(*((SnippetUI::SummaryItem_Switch **)this + 3));
      goto LABEL_69;
    case 0x2C:
      v6 = SnippetUI::SystemText_ClarificationTitle::ByteSizeLong(*((SnippetUI::SystemText_ClarificationTitle **)this + 3));
      goto LABEL_69;
    case 0x2D:
      v6 = SnippetUI::Visualization_Image::ByteSizeLong(*((SnippetUI::Visualization_Image **)this + 3));
      goto LABEL_69;
    case 0x2E:
      v6 = SnippetUI::Visualization_Map::ByteSizeLong(*((SnippetUI::Visualization_Map **)this + 3));
      goto LABEL_69;
    case 0x2F:
      v6 = SnippetUI::Button_Container::ByteSizeLong(*((SnippetUI::Button_Container **)this + 3));
      goto LABEL_69;
    case 0x30:
      v6 = SnippetUI::IntentsUI_Standard::ByteSizeLong(*((SnippetUI::IntentsUI_Standard **)this + 3));
      goto LABEL_69;
    case 0x31:
      v6 = SnippetUI::Sash_Standard::ByteSizeLong(*((SnippetUI::Sash_Standard **)this + 3));
      goto LABEL_69;
    case 0x32:
      v6 = SnippetUI::HeroHeader::ByteSizeLong(*((SnippetUI::HeroHeader **)this + 3));
      goto LABEL_69;
    case 0x33:
      v6 = SnippetUI::HorizontalList_Standard::ByteSizeLong(*((SnippetUI::HorizontalList_Standard **)this + 3));
      goto LABEL_69;
    case 0x34:
      v6 = SnippetUI::SectionHeader_Standard::ByteSizeLong(*((SnippetUI::SectionHeader_Standard **)this + 3));
      goto LABEL_69;
    case 0x35:
      v6 = SnippetUI::SectionHeader_Rich::ByteSizeLong(*((SnippetUI::SectionHeader_Rich **)this + 3));
      goto LABEL_69;
    case 0x36:
      v6 = SnippetUI::KeyValue_Standard::ByteSizeLong(*((SnippetUI::KeyValue_Standard **)this + 3));
      goto LABEL_69;
    case 0x37:
      v6 = SnippetUI::TertiaryHeader_Standard::ByteSizeLong(*((SnippetUI::TertiaryHeader_Standard **)this + 3));
      goto LABEL_69;
    case 0x38:
      v6 = SnippetUI::SimpleItem_RichSearchResult::ByteSizeLong(*((SnippetUI::SimpleItem_RichSearchResult **)this + 3));
      goto LABEL_69;
    case 0x3A:
      v6 = SnippetUI::SummaryItem_PairNumberV2::ByteSizeLong(*((SnippetUI::SummaryItem_PairNumberV2 **)this + 3));
      goto LABEL_69;
    case 0x3B:
      v6 = SnippetUI::SummaryItem_PairV2::ByteSizeLong(*((SnippetUI::SummaryItem_PairV2 **)this + 3));
      goto LABEL_69;
    case 0x3C:
      v6 = SnippetUI::Control_PlayerButton::ByteSizeLong(*((SnippetUI::Control_PlayerButton **)this + 3));
      goto LABEL_69;
    case 0x3D:
      v6 = SnippetUI::SummaryItem_SwitchV2::ByteSizeLong(*((SnippetUI::SummaryItem_SwitchV2 **)this + 3));
LABEL_69:
      v10 = &v6[(_QWORD)v4 + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6)];
LABEL_70:
      v4 = (const google::protobuf::UnknownFieldSet *)(v10 + 2);
      break;
    default:
      break;
  }
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::Response_Component *)((char *)this + 8), v4, (_DWORD *)this + 8);
  *((_DWORD *)this + 8) = (_DWORD)v4;
  return (char *)v4;
}

void google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::Response_Component>::TypeHandler>(uint64_t a1)
{
  uint64_t v1;
  SnippetUI::Response_Component **v3;
  SnippetUI::Response_Component *v4;
  std::string *v5;
  char v6;
  std::string v7[2];

  v1 = *(unsigned int *)(a1 + 8);
  if ((v1 & 0x80000000) != 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1613);
    v5 = google::protobuf::internal::LogMessage::operator<<(v7, "CHECK failed: (n) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v6, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v7[0].__r_.__value_.__l.__data_);
  }
  else if ((_DWORD)v1)
  {
    v3 = (SnippetUI::Response_Component **)(*(_QWORD *)(a1 + 16) + 8);
    do
    {
      v4 = *v3++;
      SnippetUI::Response_Component::Clear(v4);
      --v1;
    }
    while (v1);
    *(_DWORD *)(a1 + 8) = 0;
  }
}

void sub_1BFBF0498(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void SnippetUI::Response_Component::Clear(SnippetUI::Response_Component *this)
{
  uint64_t v2;
  google::protobuf::internal::InternalMetadataWithArena *v3;
  char v4;

  v2 = *((_QWORD *)this + 2);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)this + 2) = 0;
  SnippetUI::Response_Component::clear_value((uint64_t)this);
  v4 = *((_BYTE *)this + 8);
  v3 = (SnippetUI::Response_Component *)((char *)this + 8);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v3);
}

SnippetUI::Response_Section *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Response_Section>(google::protobuf::internal::ArenaImpl *this)
{
  SnippetUI::Response_Section *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (SnippetUI::Response_Section *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x60uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::Response_Section>);
    SnippetUI::Response_Section::Response_Section(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (SnippetUI::Response_Section *)operator new();
    SnippetUI::Response_Section::Response_Section(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_1BFBF0588(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D890](v1, 0x10A1C4053442EB3);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::Response_Section>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

void InitDefaultsscc_info_Response_Group_Response_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Response.pb.cc", a4);
  SnippetUI::Response_Group::Response_Group((SnippetUI::Response_Group *)&SnippetUI::_Response_Group_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_Response_Group_default_instance_, v4);
}

SnippetUI::Response_Group *SnippetUI::Response_Group::Response_Group(SnippetUI::Response_Group *this)
{
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_QWORD *)this = &off_1E7936930;
  *((_DWORD *)this + 12) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  if (atomic_load(scc_info_Response_Group_Response_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Response_Group_Response_2eproto);
  *((_QWORD *)this + 5) = &google::protobuf::internal::fixed_address_empty_string;
  return this;
}

void sub_1BFBF06CC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t *v2;

  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((google::protobuf::internal::RepeatedPtrFieldBase *)(v1 + 16));
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v2);
  _Unwind_Resume(a1);
}

void SnippetUI::Response_Group::~Response_Group(SnippetUI::Response_Group *this)
{
  SnippetUI::Response_Group::~Response_Group(this);
  JUMPOUT(0x1C3B8D890);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_1E7936930;
  v2 = *((_QWORD *)this + 5);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x1C3B8D890](v2, 0x1012C40EC159624);
  }
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((SnippetUI::Response_Group *)((char *)this + 16));
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

SnippetUI::Response_Group *SnippetUI::Response_Group::New(SnippetUI::Response_Group *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Response_Group>(0);
}

SnippetUI::Response_Group *SnippetUI::Response_Group::New(SnippetUI::Response_Group *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Response_Group>(a2);
}

void SnippetUI::Response_Group::Clear(SnippetUI::Response_Group *this)
{
  uint64_t v2;
  google::protobuf::internal::InternalMetadataWithArena *v3;
  char v4;

  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::Response_Component>::TypeHandler>((uint64_t)this + 16);
  v2 = *((_QWORD *)this + 5);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(_BYTE **)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v2 = 0;
      *(_BYTE *)(v2 + 23) = 0;
    }
  }
  v4 = *((_BYTE *)this + 8);
  v3 = (SnippetUI::Response_Group *)((char *)this + 8);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v3);
}

uint64_t SnippetUI::Response_Group::IsInitialized(SnippetUI::Response_Group *this)
{
  return 1;
}

char *SnippetUI::Response_Group::ByteSizeLong(SnippetUI::Response_Group *this)
{
  const google::protobuf::UnknownFieldSet *v2;
  uint64_t v3;
  SnippetUI::Response_Component **v4;
  uint64_t v5;
  SnippetUI::Response_Component *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = (const google::protobuf::UnknownFieldSet *)*((int *)this + 6);
  v3 = *((_QWORD *)this + 4);
  if (v3)
    v4 = (SnippetUI::Response_Component **)(v3 + 8);
  else
    v4 = 0;
  if ((_DWORD)v2)
  {
    v5 = 8 * (_QWORD)v2;
    do
    {
      v6 = *v4++;
      v7 = SnippetUI::Response_Component::ByteSizeLong(v6);
      v2 = (const google::protobuf::UnknownFieldSet *)((char *)v2
                                                     + (_QWORD)v7
                                                     + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6));
      v5 -= 8;
    }
    while (v5);
  }
  else
  {
    v2 = 0;
  }
  v8 = *((_QWORD *)this + 5);
  v9 = *(unsigned __int8 *)(v8 + 23);
  if (*(char *)(v8 + 23) < 0)
  {
    if (!*(_QWORD *)(v8 + 8))
      goto LABEL_14;
  }
  else if (!*(_BYTE *)(v8 + 23))
  {
    goto LABEL_14;
  }
  v10 = *(_QWORD *)(v8 + 8);
  if ((v9 & 0x80u) == 0)
    v10 = v9;
  v2 = (const google::protobuf::UnknownFieldSet *)((char *)v2 + v10 + ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_14:
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::Response_Group *)((char *)this + 8), v2, (_DWORD *)this + 12);
  *((_DWORD *)this + 12) = (_DWORD)v2;
  return (char *)v2;
}

uint64_t SnippetUI::Response_Group::GetCachedSize(SnippetUI::Response_Group *this)
{
  return *((unsigned int *)this + 12);
}

google::protobuf::internal *SnippetUI::Response_Group::_InternalParse(SnippetUI::Response_Group *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  unsigned int *v5;
  std::string **v6;
  uint64_t *v7;
  google::protobuf::internal::ParseContext *v8;
  google::protobuf::internal *TagFallback;
  char *v10;
  BOOL v12;
  char *v13;
  char *v14;
  google::protobuf::internal *v15;
  int *v16;
  uint64_t v17;
  int v18;
  SnippetUI::Response_Component *v19;
  uint64_t v20;
  uint64_t v21;
  std::string *v22;
  google::protobuf::internal *v24;

  v24 = a2;
  v5 = (unsigned int *)((char *)this + 16);
  v6 = (std::string **)((char *)this + 40);
  v7 = (uint64_t *)((char *)this + 8);
  while ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v24, *((_DWORD *)a3 + 23)) & 1) == 0)
  {
    TagFallback = (google::protobuf::internal *)((char *)v24 + 1);
    v10 = (char *)*(unsigned __int8 *)v24;
    if ((*(char *)v24 & 0x80000000) == 0)
      goto LABEL_6;
    v10 = (char *)(v10 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v24 + 2);
LABEL_6:
      v24 = TagFallback;
      goto LABEL_7;
    }
    TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v24, v10);
    v24 = TagFallback;
    if (!TagFallback)
      return TagFallback;
LABEL_7:
    if (v10 >> 3 == 2)
    {
      if (v10 != 18)
        goto LABEL_12;
      v14 = (char *)TagFallback - 1;
LABEL_19:
      v15 = (google::protobuf::internal *)(v14 + 1);
      v24 = (google::protobuf::internal *)(v14 + 1);
      v16 = (int *)*((_QWORD *)this + 4);
      if (v16)
      {
        v17 = *((int *)this + 6);
        v18 = *v16;
        if ((int)v17 < *v16)
        {
          *((_DWORD *)this + 6) = v17 + 1;
          v19 = *(SnippetUI::Response_Component **)&v16[2 * v17 + 2];
          goto LABEL_26;
        }
        if (v18 == *((_DWORD *)this + 7))
        {
LABEL_24:
          google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v5, v18 + 1);
          v16 = (int *)*((_QWORD *)this + 4);
          v18 = *v16;
        }
        *v16 = v18 + 1;
        v19 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Response_Component>(*((google::protobuf::internal::ArenaImpl **)this
                                                                                         + 2));
        v20 = *((_QWORD *)this + 4);
        v21 = *((int *)this + 6);
        *((_DWORD *)this + 6) = v21 + 1;
        *(_QWORD *)(v20 + 8 * v21 + 8) = v19;
        v15 = v24;
LABEL_26:
        v14 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::Response_Component>(a3, v19, v15);
        v24 = (google::protobuf::internal *)v14;
        if (!v14)
          return 0;
        if (*(_QWORD *)a3 <= (unint64_t)v14 || *v14 != 18)
          continue;
        goto LABEL_19;
      }
      v18 = *((_DWORD *)this + 7);
      goto LABEL_24;
    }
    if (v10 >> 3 == 1 && v10 == 10)
    {
      v22 = *v6;
      if (*v6 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      {
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v6, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        v22 = *v6;
        TagFallback = v24;
      }
      v13 = google::protobuf::internal::InlineGreedyStringParserUTF8(v22, (std::string::value_type *)TagFallback, (uint64_t)a3, (google::protobuf::internal *)"SnippetUI.Response.Group.id");
      goto LABEL_33;
    }
LABEL_12:
    if ((_DWORD)v10)
      v12 = (v10 & 7) == 4;
    else
      v12 = 1;
    if (v12)
    {
      *((_DWORD *)a3 + 20) = (_DWORD)v10 - 1;
      return TagFallback;
    }
    v13 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v10, v7, TagFallback, a3, v8);
LABEL_33:
    v24 = (google::protobuf::internal *)v13;
    if (!v13)
      return 0;
  }
  return v24;
}

const google::protobuf::UnknownFieldSet *SnippetUI::Response_Group::InternalSerializeWithCachedSizesToArray(SnippetUI::Response_Group *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  google::protobuf::internal *v7;
  const char *v8;
  int v9;
  int i;
  SnippetUI::Response_Component *v11;
  google::protobuf::io::EpsCopyOutputStream *v12;
  unsigned int v13;
  google::protobuf::UnknownFieldSet *v14;
  unsigned int v15;
  _BYTE *v16;
  _BYTE *v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;

  v7 = (google::protobuf::internal *)*((_QWORD *)this + 5);
  if (*((char *)v7 + 23) < 0)
  {
    v8 = (const char *)*((_QWORD *)v7 + 1);
    if (!v8)
      goto LABEL_7;
    v7 = *(google::protobuf::internal **)v7;
    goto LABEL_6;
  }
  v8 = (const char *)*((unsigned __int8 *)v7 + 23);
  if (*((_BYTE *)v7 + 23))
  {
LABEL_6:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v7, v8, 1, (google::protobuf::internal *)"SnippetUI.Response.Group.id");
    a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 1, *((_QWORD *)this + 5), (char *)a2);
  }
LABEL_7:
  v9 = *((_DWORD *)this + 6);
  if (v9)
  {
    for (i = 0; i != v9; ++i)
    {
      if ((unint64_t)a2 >= *(_QWORD *)a3)
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      v11 = (SnippetUI::Response_Component *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<SnippetUI::Response_Component>::TypeHandler>((uint64_t)this + 16, i);
      *(_BYTE *)a2 = 18;
      v13 = *((_DWORD *)v11 + 8);
      if (v13 > 0x7F)
      {
        *((_BYTE *)a2 + 1) = v13 | 0x80;
        v15 = v13 >> 7;
        if (v13 >> 14)
        {
          v16 = (char *)a2 + 2;
          do
          {
            v17 = v16;
            *v16++ = v15 | 0x80;
            v18 = v15 >> 7;
            v19 = v15 >> 14;
            v15 >>= 7;
          }
          while (v19);
          v14 = (google::protobuf::UnknownFieldSet *)(v17 + 2);
          *v16 = v18;
        }
        else
        {
          *((_BYTE *)a2 + 2) = v15;
          v14 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 3);
        }
      }
      else
      {
        *((_BYTE *)a2 + 1) = v13;
        v14 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 2);
      }
      a2 = SnippetUI::Response_Component::InternalSerializeWithCachedSizesToArray(v11, v14, a3, v12);
    }
  }
  v20 = *((_QWORD *)this + 1);
  if ((v20 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v20 & 0xFFFFFFFFFFFFFFFELL), a2, a3, a4);
  else
    return a2;
}

void SnippetUI::Response_Group::CopyFrom(int **this, int **a2)
{
  if (a2 != this)
  {
    SnippetUI::Response_Group::Clear((SnippetUI::Response_Group *)this);
    SnippetUI::Response_Group::MergeFrom(this, a2);
  }
}

{
  if (a2 != this)
  {
    SnippetUI::Response_Group::Clear((SnippetUI::Response_Group *)this);
    SnippetUI::Response_Group::MergeFrom(this, a2);
  }
}

void SnippetUI::Response_Group::MergeFrom(int **this, int **lpsrc)
{
  std::string *v4;
  int **v5;
  google::protobuf::Message *v6;
  char v7;
  std::string v8[2];

  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Response.pb.cc", 1108);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5)
    SnippetUI::Response_Group::MergeFrom(this, v5);
  else
    google::protobuf::internal::ReflectionOps::Merge((google::protobuf::internal::ReflectionOps *)lpsrc, (const google::protobuf::Message *)this, v6);
}

void sub_1BFBF0D10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::Response_Group::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 48) = a2;
  return this;
}

uint64_t SnippetUI::Response_Group::GetMetadata(SnippetUI::Response_Group *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_Response_2eproto);
  return qword_1EF5833E8;
}

void *SnippetUI::Response_Group::default_instance(SnippetUI::Response_Group *this)
{
  if (atomic_load(scc_info_Response_Group_Response_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Response_Group_Response_2eproto);
  return &SnippetUI::_Response_Group_default_instance_;
}

void SnippetUI::Response_Group::MergeFrom(int **this, int **a2)
{
  std::string *v4;
  unint64_t v5;
  uint64_t v6;
  std::string *v7;
  std::string **v8;
  std::string *v9;
  char v10;
  std::string v11[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Response.pb.cc", 1123);
    v4 = google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v10, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v11[0].__r_.__value_.__l.__data_);
  }
  v5 = (unint64_t)a2[1];
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((google::protobuf::internal::InternalMetadataWithArena *)(this + 1), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<SnippetUI::Response_Component>::TypeHandler>(this + 2, (uint64_t)(a2 + 2));
  v6 = (uint64_t)a2[5];
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(_QWORD *)(v6 + 8))
      return;
  }
  else if (!*(_BYTE *)(v6 + 23))
  {
    return;
  }
  v9 = (std::string *)this[5];
  v8 = (std::string **)(this + 5);
  v7 = v9;
  if (v9 != (std::string *)v6)
  {
    if (v7 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v8, v6);
    else
      std::string::operator=(v7, (const std::string *)v6);
  }
}

void sub_1BFBF0E68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

SnippetUI::Response_Group *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Response_Group>(google::protobuf::internal::ArenaImpl *this)
{
  SnippetUI::Response_Group *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (SnippetUI::Response_Group *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x38uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::Response_Group>);
    SnippetUI::Response_Group::Response_Group(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (SnippetUI::Response_Group *)operator new();
    SnippetUI::Response_Group::Response_Group(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_1BFBF0F04(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D890](v1, 0x10A1C40B18DE219);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::Response_Group>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

void InitDefaultsscc_info_Response_Response_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Response.pb.cc", a4);
  SnippetUI::Response::Response((SnippetUI::Response *)&SnippetUI::_Response_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_Response_default_instance_, v4);
}

SnippetUI::Response *SnippetUI::Response::Response(SnippetUI::Response *this)
{
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_QWORD *)this = &off_1E7936AB0;
  *((_DWORD *)this + 35) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  if (atomic_load(scc_info_Response_Response_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Response_Response_2eproto);
  *((_BYTE *)this + 136) = 0;
  return this;
}

void sub_1BFBF108C(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;

  google::protobuf::RepeatedPtrField<std::string>::~RepeatedPtrField(v2 + 112);
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((google::protobuf::internal::RepeatedPtrFieldBase *)(v2 + 88));
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((google::protobuf::internal::RepeatedPtrFieldBase *)(v2 + 64));
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((google::protobuf::internal::RepeatedPtrFieldBase *)(v2 + 40));
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((google::protobuf::internal::RepeatedPtrFieldBase *)(v2 + 16));
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::Response::~Response(SnippetUI::Response *this)
{
  SnippetUI::Response::~Response(this);
  JUMPOUT(0x1C3B8D890);
}

{
  uint64_t *v2;

  *(_QWORD *)this = &off_1E7936AB0;
  v2 = (uint64_t *)((char *)this + 8);
  google::protobuf::RepeatedPtrField<std::string>::~RepeatedPtrField((char *)this + 112);
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((SnippetUI::Response *)((char *)this + 88));
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((SnippetUI::Response *)((char *)this + 64));
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((SnippetUI::Response *)((char *)this + 40));
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((SnippetUI::Response *)((char *)this + 16));
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v2);
}

SnippetUI::Response *SnippetUI::Response::New(SnippetUI::Response *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Response>(0);
}

SnippetUI::Response *SnippetUI::Response::New(SnippetUI::Response *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Response>(a2);
}

void SnippetUI::Response::Clear(SnippetUI::Response *this)
{
  uint64_t v2;
  SnippetUI::Response_Section **v3;
  SnippetUI::Response_Section *v4;
  std::string *v5;
  uint64_t v6;
  SnippetUI::Response_Group **v7;
  SnippetUI::Response_Group *v8;
  std::string *v9;
  google::protobuf::internal::InternalMetadataWithArena *v10;
  char v11;
  char v12;
  std::string v13[2];

  v2 = *((unsigned int *)this + 6);
  if ((v2 & 0x80000000) != 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1613);
    v5 = google::protobuf::internal::LogMessage::operator<<(v13, "CHECK failed: (n) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v12, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v13[0].__r_.__value_.__l.__data_);
  }
  else if ((_DWORD)v2)
  {
    v3 = (SnippetUI::Response_Section **)(*((_QWORD *)this + 4) + 8);
    do
    {
      v4 = *v3++;
      SnippetUI::Response_Section::Clear(v4);
      --v2;
    }
    while (v2);
    *((_DWORD *)this + 6) = 0;
  }
  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::BackgroundElement>::TypeHandler>((uint64_t)this + 40);
  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::OrnamentElement>::TypeHandler>((uint64_t)this + 64);
  v6 = *((unsigned int *)this + 24);
  if ((v6 & 0x80000000) != 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1613);
    v9 = google::protobuf::internal::LogMessage::operator<<(v13, "CHECK failed: (n) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v12, (const char **)&v9->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v13[0].__r_.__value_.__l.__data_);
  }
  else if ((_DWORD)v6)
  {
    v7 = (SnippetUI::Response_Group **)(*((_QWORD *)this + 13) + 8);
    do
    {
      v8 = *v7++;
      SnippetUI::Response_Group::Clear(v8);
      --v6;
    }
    while (v6);
    *((_DWORD *)this + 24) = 0;
  }
  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 112);
  v11 = *((_BYTE *)this + 8);
  v10 = (SnippetUI::Response *)((char *)this + 8);
  *((_BYTE *)v10 + 128) = 0;
  if ((v11 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v10);
}

void sub_1BFBF1248(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::Response::IsInitialized(SnippetUI::Response *this)
{
  return 1;
}

char *SnippetUI::Response::ByteSizeLong(SnippetUI::Response *this)
{
  uint64_t v2;
  uint64_t v3;
  SnippetUI::Response_Section **v4;
  uint64_t v5;
  SnippetUI::Response_Section *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  SnippetUI::BackgroundElement **v11;
  uint64_t v12;
  SnippetUI::BackgroundElement *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  SnippetUI::OrnamentElement **v18;
  uint64_t v19;
  SnippetUI::OrnamentElement *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  SnippetUI::Response_Group **v25;
  uint64_t v26;
  SnippetUI::Response_Group *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  const google::protobuf::UnknownFieldSet *v34;

  v2 = *((int *)this + 6);
  v3 = *((_QWORD *)this + 4);
  if (v3)
    v4 = (SnippetUI::Response_Section **)(v3 + 8);
  else
    v4 = 0;
  if ((_DWORD)v2)
  {
    v5 = 8 * v2;
    do
    {
      v6 = *v4++;
      v7 = SnippetUI::Response_Section::ByteSizeLong(v6);
      v2 += (uint64_t)&v7[(9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6];
      v5 -= 8;
    }
    while (v5);
  }
  else
  {
    v2 = 0;
  }
  v8 = *((int *)this + 12);
  v9 = v2 + v8;
  v10 = *((_QWORD *)this + 7);
  if (v10)
    v11 = (SnippetUI::BackgroundElement **)(v10 + 8);
  else
    v11 = 0;
  if ((_DWORD)v8)
  {
    v12 = 8 * v8;
    do
    {
      v13 = *v11++;
      v14 = SnippetUI::BackgroundElement::ByteSizeLong(v13);
      v9 += (uint64_t)&v14[(9 * (__clz(v14 | 1) ^ 0x1F) + 73) >> 6];
      v12 -= 8;
    }
    while (v12);
  }
  v15 = *((int *)this + 18);
  v16 = v9 + v15;
  v17 = *((_QWORD *)this + 10);
  if (v17)
    v18 = (SnippetUI::OrnamentElement **)(v17 + 8);
  else
    v18 = 0;
  if ((_DWORD)v15)
  {
    v19 = 8 * v15;
    do
    {
      v20 = *v18++;
      v21 = SnippetUI::OrnamentElement::ByteSizeLong(v20);
      v16 += (uint64_t)&v21[(9 * (__clz(v21 | 1) ^ 0x1F) + 73) >> 6];
      v19 -= 8;
    }
    while (v19);
  }
  v22 = *((int *)this + 24);
  v23 = v16 + v22;
  v24 = *((_QWORD *)this + 13);
  if (v24)
    v25 = (SnippetUI::Response_Group **)(v24 + 8);
  else
    v25 = 0;
  if ((_DWORD)v22)
  {
    v26 = 8 * v22;
    do
    {
      v27 = *v25++;
      v28 = SnippetUI::Response_Group::ByteSizeLong(v27);
      v23 += (uint64_t)&v28[(9 * (__clz(v28 | 1) ^ 0x1F) + 73) >> 6];
      v26 -= 8;
    }
    while (v26);
  }
  v29 = *((unsigned int *)this + 30);
  v30 = v23 + v29;
  if ((int)v29 >= 1)
  {
    v31 = 0;
    do
    {
      v32 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 112, v31);
      v33 = *(unsigned __int8 *)(v32 + 23);
      if ((v33 & 0x80u) != 0)
        v33 = *(_QWORD *)(v32 + 8);
      v30 += v33 + ((9 * (__clz(v33 | 1) ^ 0x1F) + 73) >> 6);
      ++v31;
    }
    while ((_DWORD)v29 != v31);
  }
  if (*((_BYTE *)this + 136))
    v34 = (const google::protobuf::UnknownFieldSet *)(v30 + 2);
  else
    v34 = (const google::protobuf::UnknownFieldSet *)v30;
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::Response *)((char *)this + 8), v34, (_DWORD *)this + 35);
  *((_DWORD *)this + 35) = (_DWORD)v34;
  return (char *)v34;
}

uint64_t SnippetUI::Response::GetCachedSize(SnippetUI::Response *this)
{
  return *((unsigned int *)this + 35);
}

google::protobuf::internal *SnippetUI::Response::_InternalParse(SnippetUI::Response *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  unsigned int *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int *v9;
  google::protobuf::internal::ParseContext *v10;
  google::protobuf::internal *TagFallback;
  char *v12;
  google::protobuf::internal *v13;
  unint64_t v14;
  int v15;
  google::protobuf::internal *v16;
  google::protobuf::internal *v17;
  int *v18;
  uint64_t v19;
  int v20;
  SnippetUI::Response_Section *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  char *v25;
  char *SizeFallback;
  unsigned int v27;
  int v28;
  int v29;
  BOOL v30;
  int v31;
  int v32;
  unint64_t v33;
  char *v34;
  google::protobuf::internal *v35;
  int *v36;
  uint64_t v37;
  int v38;
  SnippetUI::BackgroundElement *v39;
  uint64_t v40;
  uint64_t v41;
  google::protobuf::internal *v42;
  google::protobuf::internal *v43;
  int *v44;
  uint64_t v45;
  int v46;
  SnippetUI::OrnamentElement *v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  char *v51;
  char *v52;
  unsigned int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  unint64_t v58;
  google::protobuf::internal *v59;
  google::protobuf::internal *v60;
  int *v61;
  uint64_t v62;
  int v63;
  SnippetUI::Response_Group *v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int v67;
  char *v68;
  char *v69;
  unsigned int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  unint64_t v75;
  char *v76;
  std::string::value_type *v77;
  int *v78;
  uint64_t v79;
  int v80;
  std::string *AlignedAndAddCleanup;
  google::protobuf::internal::ArenaImpl *v82;
  uint64_t v83;
  uint64_t v84;
  BOOL v85;
  google::protobuf::internal *v86;
  uint64_t v87;
  uint64_t *v89;
  google::protobuf::internal *v90;

  v5 = (unsigned int *)((char *)this + 112);
  v6 = (unsigned int *)((char *)this + 88);
  v7 = (unsigned int *)((char *)this + 64);
  v8 = (unsigned int *)((char *)this + 40);
  v9 = (unsigned int *)((char *)this + 16);
  v89 = (uint64_t *)((char *)this + 8);
  v90 = a2;
LABEL_2:
  while (2)
  {
    if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v90, *((_DWORD *)a3 + 23)) & 1) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v90 + 1);
      v12 = (char *)*(unsigned __int8 *)v90;
      if (*(char *)v90 < 0)
      {
        v12 = (char *)(v12 + (*(unsigned __int8 *)TagFallback << 7) - 128);
        if (*(char *)TagFallback < 0)
        {
          TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v90, v12);
          v90 = TagFallback;
          if (!TagFallback)
            return TagFallback;
LABEL_7:
          switch(v12 >> 3)
          {
            case 3u:
              if (v12 != 24)
                goto LABEL_101;
              v13 = (google::protobuf::internal *)((char *)TagFallback + 1);
              v14 = *(unsigned __int8 *)TagFallback;
              if ((*(char *)TagFallback & 0x80000000) == 0)
                goto LABEL_12;
              v15 = *(char *)v13;
              v14 = v14 + (v15 << 7) - 128;
              if ((v15 & 0x80000000) == 0)
              {
                v13 = (google::protobuf::internal *)((char *)TagFallback + 2);
LABEL_12:
                v90 = v13;
                *((_BYTE *)this + 136) = v14 != 0;
                continue;
              }
              v86 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(TagFallback, v14);
              v90 = v86;
              *((_BYTE *)this + 136) = v87 != 0;
              if (v86)
                continue;
              return 0;
            case 4u:
              if (v12 != 34)
                goto LABEL_101;
              v16 = (google::protobuf::internal *)((char *)TagFallback - 1);
LABEL_15:
              v17 = (google::protobuf::internal *)((char *)v16 + 1);
              v90 = v17;
              v18 = (int *)*((_QWORD *)this + 4);
              if (!v18)
              {
                v20 = *((_DWORD *)this + 7);
LABEL_20:
                google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v9, v20 + 1);
                v18 = (int *)*((_QWORD *)this + 4);
                v20 = *v18;
                goto LABEL_21;
              }
              v19 = *((int *)this + 6);
              v20 = *v18;
              if ((int)v19 < *v18)
              {
                *((_DWORD *)this + 6) = v19 + 1;
                v21 = *(SnippetUI::Response_Section **)&v18[2 * v19 + 2];
                goto LABEL_22;
              }
              if (v20 == *((_DWORD *)this + 7))
                goto LABEL_20;
LABEL_21:
              *v18 = v20 + 1;
              v21 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Response_Section>(*((google::protobuf::internal::ArenaImpl **)this
                                                                                             + 2));
              v22 = *((_QWORD *)this + 4);
              v23 = *((int *)this + 6);
              *((_DWORD *)this + 6) = v23 + 1;
              *(_QWORD *)(v22 + 8 * v23 + 8) = v21;
              v17 = v90;
LABEL_22:
              v24 = *(unsigned __int8 *)v17;
              if (*(char *)v17 < 0)
              {
                SizeFallback = google::protobuf::internal::ReadSizeFallback(v17, (const char *)*(unsigned __int8 *)v17);
                if (!SizeFallback)
                  return 0;
                v25 = SizeFallback;
                v24 = v27;
              }
              else
              {
                v25 = (char *)v17 + 1;
              }
              v28 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v25, v24);
              v29 = *((_DWORD *)a3 + 22);
              v30 = __OFSUB__(v29--, 1);
              *((_DWORD *)a3 + 22) = v29;
              if (v29 < 0 == v30)
              {
                v31 = v28;
                v16 = SnippetUI::Response_Section::_InternalParse(v21, (google::protobuf::internal *)v25, a3);
                if (v16)
                {
                  ++*((_DWORD *)a3 + 22);
                  if (!*((_DWORD *)a3 + 20))
                  {
                    v32 = *((_DWORD *)a3 + 7) + v31;
                    *((_DWORD *)a3 + 7) = v32;
                    v33 = *((_QWORD *)a3 + 1) + (v32 & (v32 >> 31));
                    *(_QWORD *)a3 = v33;
                    v90 = v16;
                    if (v33 <= (unint64_t)v16 || *(_BYTE *)v16 != 34)
                      continue;
                    goto LABEL_15;
                  }
                }
              }
              return 0;
            case 5u:
              if (v12 != 42)
                goto LABEL_101;
              v34 = (char *)TagFallback - 1;
              while (1)
              {
                v35 = (google::protobuf::internal *)(v34 + 1);
                v90 = (google::protobuf::internal *)(v34 + 1);
                v36 = (int *)*((_QWORD *)this + 7);
                if (!v36)
                  break;
                v37 = *((int *)this + 12);
                v38 = *v36;
                if ((int)v37 >= *v36)
                {
                  if (v38 == *((_DWORD *)this + 13))
                  {
LABEL_39:
                    google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v8, v38 + 1);
                    v36 = (int *)*((_QWORD *)this + 7);
                    v38 = *v36;
                  }
                  *v36 = v38 + 1;
                  v39 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::BackgroundElement>(*((google::protobuf::internal::ArenaImpl **)this
                                                                                                  + 5));
                  v40 = *((_QWORD *)this + 7);
                  v41 = *((int *)this + 12);
                  *((_DWORD *)this + 12) = v41 + 1;
                  *(_QWORD *)(v40 + 8 * v41 + 8) = v39;
                  v35 = v90;
                  goto LABEL_41;
                }
                *((_DWORD *)this + 12) = v37 + 1;
                v39 = *(SnippetUI::BackgroundElement **)&v36[2 * v37 + 2];
LABEL_41:
                v34 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::BackgroundElement>(a3, v39, v35);
                v90 = (google::protobuf::internal *)v34;
                if (!v34)
                  return 0;
                if (*(_QWORD *)a3 <= (unint64_t)v34 || *v34 != 42)
                  goto LABEL_2;
              }
              v38 = *((_DWORD *)this + 13);
              goto LABEL_39;
            case 6u:
              if (v12 != 50)
                goto LABEL_101;
              v42 = (google::protobuf::internal *)((char *)TagFallback - 1);
LABEL_47:
              v43 = (google::protobuf::internal *)((char *)v42 + 1);
              v90 = v43;
              v44 = (int *)*((_QWORD *)this + 10);
              if (!v44)
              {
                v46 = *((_DWORD *)this + 19);
LABEL_52:
                google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v7, v46 + 1);
                v44 = (int *)*((_QWORD *)this + 10);
                v46 = *v44;
                goto LABEL_53;
              }
              v45 = *((int *)this + 18);
              v46 = *v44;
              if ((int)v45 < *v44)
              {
                *((_DWORD *)this + 18) = v45 + 1;
                v47 = *(SnippetUI::OrnamentElement **)&v44[2 * v45 + 2];
                goto LABEL_54;
              }
              if (v46 == *((_DWORD *)this + 19))
                goto LABEL_52;
LABEL_53:
              *v44 = v46 + 1;
              v47 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::OrnamentElement>(*((google::protobuf::internal::ArenaImpl **)this
                                                                                            + 8));
              v48 = *((_QWORD *)this + 10);
              v49 = *((int *)this + 18);
              *((_DWORD *)this + 18) = v49 + 1;
              *(_QWORD *)(v48 + 8 * v49 + 8) = v47;
              v43 = v90;
LABEL_54:
              v50 = *(unsigned __int8 *)v43;
              if (*(char *)v43 < 0)
              {
                v52 = google::protobuf::internal::ReadSizeFallback(v43, (const char *)*(unsigned __int8 *)v43);
                if (!v52)
                  return 0;
                v51 = v52;
                v50 = v53;
              }
              else
              {
                v51 = (char *)v43 + 1;
              }
              v54 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v51, v50);
              v55 = *((_DWORD *)a3 + 22);
              v30 = __OFSUB__(v55--, 1);
              *((_DWORD *)a3 + 22) = v55;
              if (v55 < 0 == v30)
              {
                v56 = v54;
                v42 = SnippetUI::OrnamentElement::_InternalParse(v47, (google::protobuf::internal *)v51, a3);
                if (v42)
                {
                  ++*((_DWORD *)a3 + 22);
                  if (!*((_DWORD *)a3 + 20))
                  {
                    v57 = *((_DWORD *)a3 + 7) + v56;
                    *((_DWORD *)a3 + 7) = v57;
                    v58 = *((_QWORD *)a3 + 1) + (v57 & (v57 >> 31));
                    *(_QWORD *)a3 = v58;
                    v90 = v42;
                    if (v58 <= (unint64_t)v42 || *(_BYTE *)v42 != 50)
                      continue;
                    goto LABEL_47;
                  }
                }
              }
              return 0;
            case 7u:
              if (v12 != 58)
                goto LABEL_101;
              v59 = (google::protobuf::internal *)((char *)TagFallback - 1);
LABEL_66:
              v60 = (google::protobuf::internal *)((char *)v59 + 1);
              v90 = v60;
              v61 = (int *)*((_QWORD *)this + 13);
              if (!v61)
              {
                v63 = *((_DWORD *)this + 25);
LABEL_71:
                google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v6, v63 + 1);
                v61 = (int *)*((_QWORD *)this + 13);
                v63 = *v61;
                goto LABEL_72;
              }
              v62 = *((int *)this + 24);
              v63 = *v61;
              if ((int)v62 < *v61)
              {
                *((_DWORD *)this + 24) = v62 + 1;
                v64 = *(SnippetUI::Response_Group **)&v61[2 * v62 + 2];
                goto LABEL_73;
              }
              if (v63 == *((_DWORD *)this + 25))
                goto LABEL_71;
LABEL_72:
              *v61 = v63 + 1;
              v64 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Response_Group>(*((google::protobuf::internal::ArenaImpl **)this
                                                                                           + 11));
              v65 = *((_QWORD *)this + 13);
              v66 = *((int *)this + 24);
              *((_DWORD *)this + 24) = v66 + 1;
              *(_QWORD *)(v65 + 8 * v66 + 8) = v64;
              v60 = v90;
LABEL_73:
              v67 = *(unsigned __int8 *)v60;
              if (*(char *)v60 < 0)
              {
                v69 = google::protobuf::internal::ReadSizeFallback(v60, (const char *)*(unsigned __int8 *)v60);
                if (!v69)
                  return 0;
                v68 = v69;
                v67 = v70;
              }
              else
              {
                v68 = (char *)v60 + 1;
              }
              v71 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v68, v67);
              v72 = *((_DWORD *)a3 + 22);
              v30 = __OFSUB__(v72--, 1);
              *((_DWORD *)a3 + 22) = v72;
              if (v72 < 0 == v30)
              {
                v73 = v71;
                v59 = SnippetUI::Response_Group::_InternalParse(v64, (google::protobuf::internal *)v68, a3);
                if (v59)
                {
                  ++*((_DWORD *)a3 + 22);
                  if (!*((_DWORD *)a3 + 20))
                  {
                    v74 = *((_DWORD *)a3 + 7) + v73;
                    *((_DWORD *)a3 + 7) = v74;
                    v75 = *((_QWORD *)a3 + 1) + (v74 & (v74 >> 31));
                    *(_QWORD *)a3 = v75;
                    v90 = v59;
                    if (v75 <= (unint64_t)v59 || *(_BYTE *)v59 != 58)
                      continue;
                    goto LABEL_66;
                  }
                }
              }
              return 0;
            case 8u:
              if (v12 != 66)
                goto LABEL_101;
              v76 = (char *)TagFallback - 1;
              break;
            default:
LABEL_101:
              if ((_DWORD)v12)
                v85 = (v12 & 7) == 4;
              else
                v85 = 1;
              if (v85)
              {
                *((_DWORD *)a3 + 20) = (_DWORD)v12 - 1;
                return TagFallback;
              }
              v90 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v12, v89, TagFallback, a3, v10);
              if (!v90)
                return 0;
              continue;
          }
          while (1)
          {
            v77 = v76 + 1;
            v90 = (google::protobuf::internal *)(v76 + 1);
            v78 = (int *)*((_QWORD *)this + 16);
            if (!v78)
              break;
            v79 = *((int *)this + 30);
            v80 = *v78;
            if ((int)v79 >= *v78)
            {
              if (v80 == *((_DWORD *)this + 31))
              {
LABEL_90:
                google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v5, v80 + 1);
                v78 = (int *)*((_QWORD *)this + 16);
                v80 = *v78;
              }
              *v78 = v80 + 1;
              v82 = *(google::protobuf::internal::ArenaImpl **)v5;
              if (*(_QWORD *)v5)
              {
                if (*((_QWORD *)v82 + 14))
                AlignedAndAddCleanup = (std::string *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(v82, 0x18uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<std::string>);
              }
              else
              {
                AlignedAndAddCleanup = (std::string *)operator new();
              }
              AlignedAndAddCleanup->__r_.__value_.__r.__words[0] = 0;
              AlignedAndAddCleanup->__r_.__value_.__l.__size_ = 0;
              AlignedAndAddCleanup->__r_.__value_.__r.__words[2] = 0;
              v83 = *((_QWORD *)this + 16);
              v84 = *((int *)this + 30);
              *((_DWORD *)this + 30) = v84 + 1;
              *(_QWORD *)(v83 + 8 * v84 + 8) = AlignedAndAddCleanup;
              v77 = (std::string::value_type *)v90;
              goto LABEL_97;
            }
            *((_DWORD *)this + 30) = v79 + 1;
            AlignedAndAddCleanup = *(std::string **)&v78[2 * v79 + 2];
LABEL_97:
            v76 = google::protobuf::internal::InlineGreedyStringParser(AlignedAndAddCleanup, v77, (uint64_t)a3);
            v90 = (google::protobuf::internal *)v76;
            if (!v76)
              return 0;
            if (*(_QWORD *)a3 <= (unint64_t)v76 || *v76 != 66)
              goto LABEL_2;
          }
          v80 = *((_DWORD *)this + 31);
          goto LABEL_90;
        }
        TagFallback = (google::protobuf::internal *)((char *)v90 + 2);
      }
      v90 = TagFallback;
      goto LABEL_7;
    }
    return v90;
  }
}

const google::protobuf::UnknownFieldSet *SnippetUI::Response::InternalSerializeWithCachedSizesToArray(SnippetUI::Response *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  char *v5;
  char v7;
  int v8;
  int i;
  SnippetUI::Response_Section *v10;
  google::protobuf::io::EpsCopyOutputStream *v11;
  unsigned int v12;
  google::protobuf::UnknownFieldSet *v13;
  unsigned int v14;
  _BYTE *v15;
  _BYTE *v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  int j;
  SnippetUI::BackgroundElement *v21;
  google::protobuf::io::EpsCopyOutputStream *v22;
  unsigned int v23;
  google::protobuf::UnknownFieldSet *v24;
  unsigned int v25;
  _BYTE *v26;
  _BYTE *v27;
  unsigned int v28;
  unsigned int v29;
  int v30;
  int k;
  SnippetUI::OrnamentElement *v32;
  google::protobuf::io::EpsCopyOutputStream *v33;
  unsigned int v34;
  google::protobuf::UnknownFieldSet *v35;
  unsigned int v36;
  _BYTE *v37;
  _BYTE *v38;
  unsigned int v39;
  unsigned int v40;
  int v41;
  int m;
  SnippetUI::Response_Group *v43;
  google::protobuf::io::EpsCopyOutputStream *v44;
  unsigned int v45;
  google::protobuf::UnknownFieldSet *v46;
  unsigned int v47;
  _BYTE *v48;
  _BYTE *v49;
  unsigned int v50;
  unsigned int v51;
  int v52;
  int n;
  uint64_t v54;
  int64_t v55;
  const void *v56;
  uint64_t v57;

  v5 = (char *)a2;
  if (*((_BYTE *)this + 136))
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
    {
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      v7 = *((_BYTE *)this + 136);
    }
    else
    {
      v7 = 1;
    }
    *v5 = 24;
    v5[1] = v7;
    v5 += 2;
  }
  v8 = *((_DWORD *)this + 6);
  if (v8)
  {
    for (i = 0; i != v8; ++i)
    {
      if ((unint64_t)v5 >= *(_QWORD *)a3)
        v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
      v10 = (SnippetUI::Response_Section *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<SnippetUI::Response_Section>::TypeHandler>((uint64_t)this + 16, i);
      *v5 = 34;
      v12 = *((_DWORD *)v10 + 22);
      if (v12 > 0x7F)
      {
        v5[1] = v12 | 0x80;
        v14 = v12 >> 7;
        if (v12 >> 14)
        {
          v15 = v5 + 2;
          do
          {
            v16 = v15;
            *v15++ = v14 | 0x80;
            v17 = v14 >> 7;
            v18 = v14 >> 14;
            v14 >>= 7;
          }
          while (v18);
          v13 = (google::protobuf::UnknownFieldSet *)(v16 + 2);
          *v15 = v17;
        }
        else
        {
          v5[2] = v14;
          v13 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
        }
      }
      else
      {
        v5[1] = v12;
        v13 = (google::protobuf::UnknownFieldSet *)(v5 + 2);
      }
      v5 = (char *)SnippetUI::Response_Section::InternalSerializeWithCachedSizesToArray(v10, v13, a3, v11);
    }
  }
  v19 = *((_DWORD *)this + 12);
  if (v19)
  {
    for (j = 0; j != v19; ++j)
    {
      if ((unint64_t)v5 >= *(_QWORD *)a3)
        v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
      v21 = (SnippetUI::BackgroundElement *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<SnippetUI::BackgroundElement>::TypeHandler>((uint64_t)this + 40, j);
      *v5 = 42;
      v23 = *((_DWORD *)v21 + 13);
      if (v23 > 0x7F)
      {
        v5[1] = v23 | 0x80;
        v25 = v23 >> 7;
        if (v23 >> 14)
        {
          v26 = v5 + 2;
          do
          {
            v27 = v26;
            *v26++ = v25 | 0x80;
            v28 = v25 >> 7;
            v29 = v25 >> 14;
            v25 >>= 7;
          }
          while (v29);
          v24 = (google::protobuf::UnknownFieldSet *)(v27 + 2);
          *v26 = v28;
        }
        else
        {
          v5[2] = v25;
          v24 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
        }
      }
      else
      {
        v5[1] = v23;
        v24 = (google::protobuf::UnknownFieldSet *)(v5 + 2);
      }
      v5 = (char *)SnippetUI::BackgroundElement::InternalSerializeWithCachedSizesToArray(v21, v24, a3, v22);
    }
  }
  v30 = *((_DWORD *)this + 18);
  if (v30)
  {
    for (k = 0; k != v30; ++k)
    {
      if ((unint64_t)v5 >= *(_QWORD *)a3)
        v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
      v32 = (SnippetUI::OrnamentElement *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<SnippetUI::OrnamentElement>::TypeHandler>((uint64_t)this + 64, k);
      *v5 = 50;
      v34 = *((_DWORD *)v32 + 13);
      if (v34 > 0x7F)
      {
        v5[1] = v34 | 0x80;
        v36 = v34 >> 7;
        if (v34 >> 14)
        {
          v37 = v5 + 2;
          do
          {
            v38 = v37;
            *v37++ = v36 | 0x80;
            v39 = v36 >> 7;
            v40 = v36 >> 14;
            v36 >>= 7;
          }
          while (v40);
          v35 = (google::protobuf::UnknownFieldSet *)(v38 + 2);
          *v37 = v39;
        }
        else
        {
          v5[2] = v36;
          v35 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
        }
      }
      else
      {
        v5[1] = v34;
        v35 = (google::protobuf::UnknownFieldSet *)(v5 + 2);
      }
      v5 = (char *)SnippetUI::OrnamentElement::InternalSerializeWithCachedSizesToArray(v32, v35, a3, v33);
    }
  }
  v41 = *((_DWORD *)this + 24);
  if (v41)
  {
    for (m = 0; m != v41; ++m)
    {
      if ((unint64_t)v5 >= *(_QWORD *)a3)
        v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
      v43 = (SnippetUI::Response_Group *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<SnippetUI::Response_Group>::TypeHandler>((uint64_t)this + 88, m);
      *v5 = 58;
      v45 = *((_DWORD *)v43 + 12);
      if (v45 > 0x7F)
      {
        v5[1] = v45 | 0x80;
        v47 = v45 >> 7;
        if (v45 >> 14)
        {
          v48 = v5 + 2;
          do
          {
            v49 = v48;
            *v48++ = v47 | 0x80;
            v50 = v47 >> 7;
            v51 = v47 >> 14;
            v47 >>= 7;
          }
          while (v51);
          v46 = (google::protobuf::UnknownFieldSet *)(v49 + 2);
          *v48 = v50;
        }
        else
        {
          v5[2] = v47;
          v46 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
        }
      }
      else
      {
        v5[1] = v45;
        v46 = (google::protobuf::UnknownFieldSet *)(v5 + 2);
      }
      v5 = (char *)SnippetUI::Response_Group::InternalSerializeWithCachedSizesToArray(v43, v46, a3, v44);
    }
  }
  v52 = *((_DWORD *)this + 30);
  if (v52 >= 1)
  {
    for (n = 0; v52 != n; ++n)
    {
      v54 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 112, n);
      if (*(char *)(v54 + 23) < 0)
      {
        v55 = *(_QWORD *)(v54 + 8);
        if (v55 > 127)
          goto LABEL_65;
      }
      else
      {
        v55 = *(unsigned __int8 *)(v54 + 23);
      }
      if (*(_QWORD *)a3 - (_QWORD)v5 + 14 >= v55)
      {
        *v5 = 66;
        v5[1] = v55;
        if (*(char *)(v54 + 23) >= 0)
          v56 = (const void *)v54;
        else
          v56 = *(const void **)v54;
        memcpy(v5 + 2, v56, v55);
        v5 += v55 + 2;
        continue;
      }
LABEL_65:
      v5 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringOutline(a3, 8, v54, v5);
    }
  }
  v57 = *((_QWORD *)this + 1);
  if ((v57 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v57 & 0xFFFFFFFFFFFFFFFELL), (const google::protobuf::UnknownFieldSet *)v5, a3, a4);
  else
    return (const google::protobuf::UnknownFieldSet *)v5;
}

void SnippetUI::Response::CopyFrom(int **this, int **a2)
{
  if (a2 != this)
  {
    SnippetUI::Response::Clear((SnippetUI::Response *)this);
    SnippetUI::Response::MergeFrom(this, a2);
  }
}

{
  if (a2 != this)
  {
    SnippetUI::Response::Clear((SnippetUI::Response *)this);
    SnippetUI::Response::MergeFrom(this, a2);
  }
}

void SnippetUI::Response::MergeFrom(int **this, int **lpsrc)
{
  std::string *v4;
  int **v5;
  google::protobuf::Message *v6;
  char v7;
  std::string v8[2];

  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Response.pb.cc", 5322);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5)
    SnippetUI::Response::MergeFrom(this, v5);
  else
    google::protobuf::internal::ReflectionOps::Merge((google::protobuf::internal::ReflectionOps *)lpsrc, (const google::protobuf::Message *)this, v6);
}

void sub_1BFBF2110(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::Response::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 140) = a2;
  return this;
}

uint64_t SnippetUI::Response::GetMetadata(SnippetUI::Response *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_Response_2eproto);
  return qword_1EF583408;
}

void *SnippetUI::Response::default_instance(SnippetUI::Response *this)
{
  if (atomic_load(scc_info_Response_Response_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Response_Response_2eproto);
  return &SnippetUI::_Response_default_instance_;
}

void SnippetUI::Response::MergeFrom(int **this, int **a2)
{
  std::string *v4;
  unint64_t v5;
  char v6;
  std::string v7[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Response.pb.cc", 5337);
    v4 = google::protobuf::internal::LogMessage::operator<<(v7, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v6, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v7[0].__r_.__value_.__l.__data_);
  }
  v5 = (unint64_t)a2[1];
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((google::protobuf::internal::InternalMetadataWithArena *)(this + 1), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<SnippetUI::Response_Section>::TypeHandler>(this + 2, (uint64_t)(a2 + 2));
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<SnippetUI::BackgroundElement>::TypeHandler>(this + 5, (uint64_t)(a2 + 5));
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<SnippetUI::OrnamentElement>::TypeHandler>(this + 8, (uint64_t)(a2 + 8));
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<SnippetUI::Response_Group>::TypeHandler>(this + 11, (uint64_t)(a2 + 11));
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>(this + 14, (uint64_t)(a2 + 14));
  if (*((_BYTE *)a2 + 136))
    *((_BYTE *)this + 136) = 1;
}

void sub_1BFBF225C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<SnippetUI::OrnamentElement>::TypeHandler>(int **this, uint64_t a2)
{
  std::string *v4;
  int v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  const SnippetUI::OrnamentElement **v13;
  SnippetUI::OrnamentElement **v14;
  const SnippetUI::OrnamentElement *v15;
  const SnippetUI::OrnamentElement *v16;
  SnippetUI::OrnamentElement *v17;
  google::protobuf::internal::ArenaImpl *v18;
  int v19;
  uint64_t v20;
  SnippetUI::OrnamentElement **v21;
  const SnippetUI::OrnamentElement **v22;
  const SnippetUI::OrnamentElement *v23;
  SnippetUI::OrnamentElement *v24;
  int v25;
  int *v26;
  char v27;
  std::string v28[2];

  if ((int **)a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1632);
    v4 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
  }
  v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    v6 = *(_QWORD *)(a2 + 16);
    v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)this, *(_DWORD *)(a2 + 8));
    v8 = v7;
    v9 = *this[2];
    v10 = *((int *)this + 2);
    v11 = v9 - v10;
    if ((int)v9 - (int)v10 >= v5)
      v12 = v5;
    else
      v12 = v11;
    if ((int)v12 >= 1)
    {
      v13 = (const SnippetUI::OrnamentElement **)(v6 + 8);
      v14 = (SnippetUI::OrnamentElement **)v7;
      do
      {
        v16 = *v13++;
        v15 = v16;
        v17 = *v14++;
        google::protobuf::internal::GenericTypeHandler<SnippetUI::OrnamentElement>::Merge(v15, v17);
        --v12;
      }
      while (v12);
    }
    if (v11 < v5)
    {
      v18 = (google::protobuf::internal::ArenaImpl *)*this;
      v19 = v10 + v5 - v9;
      v20 = 8 * v9 - 8 * v10;
      v21 = (SnippetUI::OrnamentElement **)((char *)v8 + v20);
      v22 = (const SnippetUI::OrnamentElement **)(v20 + v6 + 8);
      do
      {
        v23 = *v22++;
        v24 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::OrnamentElement>(v18);
        google::protobuf::internal::GenericTypeHandler<SnippetUI::OrnamentElement>::Merge(v23, v24);
        *v21++ = v24;
        --v19;
      }
      while (v19);
    }
    v25 = *((_DWORD *)this + 2) + v5;
    *((_DWORD *)this + 2) = v25;
    v26 = this[2];
    if (*v26 < v25)
      *v26 = v25;
  }
}

void sub_1BFBF23C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<SnippetUI::Response_Group>::TypeHandler>(int **this, uint64_t a2)
{
  std::string *v4;
  int v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int ***v13;
  int ***v14;
  int **v15;
  int **v16;
  int **v17;
  google::protobuf::internal::ArenaImpl *v18;
  int v19;
  uint64_t v20;
  int ***v21;
  int ***v22;
  int **v23;
  int **v24;
  int v25;
  int *v26;
  char v27;
  std::string v28[2];

  if ((int **)a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1632);
    v4 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
  }
  v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    v6 = *(_QWORD *)(a2 + 16);
    v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)this, *(_DWORD *)(a2 + 8));
    v8 = v7;
    v9 = *this[2];
    v10 = *((int *)this + 2);
    v11 = v9 - v10;
    if ((int)v9 - (int)v10 >= v5)
      v12 = v5;
    else
      v12 = v11;
    if ((int)v12 >= 1)
    {
      v13 = (int ***)(v6 + 8);
      v14 = (int ***)v7;
      do
      {
        v16 = *v13++;
        v15 = v16;
        v17 = *v14++;
        google::protobuf::internal::GenericTypeHandler<SnippetUI::Response_Group>::Merge(v15, v17);
        --v12;
      }
      while (v12);
    }
    if (v11 < v5)
    {
      v18 = (google::protobuf::internal::ArenaImpl *)*this;
      v19 = v10 + v5 - v9;
      v20 = 8 * v9 - 8 * v10;
      v21 = (int ***)((char *)v8 + v20);
      v22 = (int ***)(v20 + v6 + 8);
      do
      {
        v23 = *v22++;
        v24 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Response_Group>(v18);
        google::protobuf::internal::GenericTypeHandler<SnippetUI::Response_Group>::Merge(v23, v24);
        *v21++ = v24;
        --v19;
      }
      while (v19);
    }
    v25 = *((_DWORD *)this + 2) + v5;
    *((_DWORD *)this + 2) = v25;
    v26 = this[2];
    if (*v26 < v25)
      *v26 = v25;
  }
}

void sub_1BFBF2534(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::GenericTypeHandler<SnippetUI::Response_Group>::Merge(int **a1, int **this)
{
  SnippetUI::Response_Group::MergeFrom(this, a1);
}

void google::protobuf::internal::GenericTypeHandler<SnippetUI::OrnamentElement>::Merge(const SnippetUI::OrnamentElement *a1, SnippetUI::OrnamentElement *a2)
{
  SnippetUI::OrnamentElement::MergeFrom(a2, a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::OrnamentElement>::TypeHandler>(uint64_t a1)
{
  uint64_t v1;
  SnippetUI::OrnamentElement **v3;
  SnippetUI::OrnamentElement *v4;
  std::string *v5;
  char v6;
  std::string v7[2];

  v1 = *(unsigned int *)(a1 + 8);
  if ((v1 & 0x80000000) != 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1613);
    v5 = google::protobuf::internal::LogMessage::operator<<(v7, "CHECK failed: (n) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v6, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v7[0].__r_.__value_.__l.__data_);
  }
  else if ((_DWORD)v1)
  {
    v3 = (SnippetUI::OrnamentElement **)(*(_QWORD *)(a1 + 16) + 8);
    do
    {
      v4 = *v3++;
      SnippetUI::OrnamentElement::Clear(v4);
      --v1;
    }
    while (v1);
    *(_DWORD *)(a1 + 8) = 0;
  }
}

void sub_1BFBF2600(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

SnippetUI::Response *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Response>(google::protobuf::internal::ArenaImpl *this)
{
  SnippetUI::Response *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (SnippetUI::Response *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x90uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::Response>);
    SnippetUI::Response::Response(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (SnippetUI::Response *)operator new();
    SnippetUI::Response::Response(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_1BFBF269C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D890](v1, 0x10A1C40A4072AB7);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::Response>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

void *SnippetUI::IntentsUI_Standard::default_instance(SnippetUI::IntentsUI_Standard *this)
{
  if (atomic_load(scc_info_IntentsUI_Standard_Response_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_IntentsUI_Standard_Response_2eproto);
  return &SnippetUI::_IntentsUI_Standard_default_instance_;
}

void SnippetUI::IntentsUI_Standard::MergeFrom(SnippetUI::IntentsUI_Standard *this, const SnippetUI::IntentsUI_Standard *a2)
{
  std::string *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  int **v10;
  int **v11;
  int **v12;
  char v13;
  std::string v14[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v14, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Response.pb.cc", 5904);
    v4 = google::protobuf::internal::LogMessage::operator<<(v14, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v13, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v14[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::IntentsUI_Standard *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<SnippetUI::IntentsUI_Standard_Slot>::TypeHandler>((int **)this + 2, (uint64_t)a2 + 16);
  v6 = *((_QWORD *)a2 + 5);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(_QWORD *)(v6 + 8))
      goto LABEL_13;
  }
  else if (!*(_BYTE *)(v6 + 23))
  {
    goto LABEL_13;
  }
  v7 = (uint64_t *)*((_QWORD *)this + 5);
  if (v7 != (uint64_t *)v6)
  {
    if (v7 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 5, v6);
    else
      std::string::operator=(*((std::string **)this + 5), (const std::string *)v6);
  }
LABEL_13:
  v8 = *((_QWORD *)a2 + 6);
  if (*(char *)(v8 + 23) < 0)
  {
    if (!*(_QWORD *)(v8 + 8))
      goto LABEL_21;
  }
  else if (!*(_BYTE *)(v8 + 23))
  {
    goto LABEL_21;
  }
  v9 = (uint64_t *)*((_QWORD *)this + 6);
  if (v9 != (uint64_t *)v8)
  {
    if (v9 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 6, v8);
    else
      std::string::operator=(*((std::string **)this + 6), (const std::string *)v8);
  }
LABEL_21:
  if (a2 != (const SnippetUI::IntentsUI_Standard *)&SnippetUI::_IntentsUI_Standard_default_instance_)
  {
    v10 = (int **)*((_QWORD *)a2 + 7);
    if (v10)
    {
      v11 = (int **)*((_QWORD *)this + 7);
      if (!v11)
      {
        v11 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
        *((_QWORD *)this + 7) = v11;
        v10 = (int **)*((_QWORD *)a2 + 7);
      }
      if (v10)
        v12 = v10;
      else
        v12 = (int **)&SnippetUI::_ActionProperty_default_instance_;
      SnippetUI::ActionProperty::MergeFrom(v11, v12);
    }
  }
  if (*((_BYTE *)a2 + 64))
    *((_BYTE *)this + 64) = 1;
}

void sub_1BFBF28E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<SnippetUI::IntentsUI_Standard_Slot>::TypeHandler>(int **this, uint64_t a2)
{
  std::string *v4;
  int v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int ***v13;
  int ***v14;
  int **v15;
  int **v16;
  int **v17;
  google::protobuf::internal::ArenaImpl *v18;
  int v19;
  uint64_t v20;
  int ***v21;
  int ***v22;
  int **v23;
  int **v24;
  int v25;
  int *v26;
  char v27;
  std::string v28[2];

  if ((int **)a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1632);
    v4 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
  }
  v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    v6 = *(_QWORD *)(a2 + 16);
    v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)this, *(_DWORD *)(a2 + 8));
    v8 = v7;
    v9 = *this[2];
    v10 = *((int *)this + 2);
    v11 = v9 - v10;
    if ((int)v9 - (int)v10 >= v5)
      v12 = v5;
    else
      v12 = v11;
    if ((int)v12 >= 1)
    {
      v13 = (int ***)(v6 + 8);
      v14 = (int ***)v7;
      do
      {
        v16 = *v13++;
        v15 = v16;
        v17 = *v14++;
        google::protobuf::internal::GenericTypeHandler<SnippetUI::IntentsUI_Standard_Slot>::Merge(v15, v17);
        --v12;
      }
      while (v12);
    }
    if (v11 < v5)
    {
      v18 = (google::protobuf::internal::ArenaImpl *)*this;
      v19 = v10 + v5 - v9;
      v20 = 8 * v9 - 8 * v10;
      v21 = (int ***)((char *)v8 + v20);
      v22 = (int ***)(v20 + v6 + 8);
      do
      {
        v23 = *v22++;
        v24 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::IntentsUI_Standard_Slot>(v18);
        google::protobuf::internal::GenericTypeHandler<SnippetUI::IntentsUI_Standard_Slot>::Merge(v23, v24);
        *v21++ = v24;
        --v19;
      }
      while (v19);
    }
    v25 = *((_DWORD *)this + 2) + v5;
    *((_DWORD *)this + 2) = v25;
    v26 = this[2];
    if (*v26 < v25)
      *v26 = v25;
  }
}

void sub_1BFBF2A4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::GenericTypeHandler<SnippetUI::IntentsUI_Standard_Slot>::Merge(int **a1, int **a2)
{
  SnippetUI::IntentsUI_Standard_Slot::MergeFrom(a2, a1);
}

SnippetUI::IntentsUI_Standard_Slot *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::IntentsUI_Standard_Slot>(google::protobuf::internal::ArenaImpl *this)
{
  SnippetUI::IntentsUI_Standard_Slot *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (SnippetUI::IntentsUI_Standard_Slot *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x38uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::IntentsUI_Standard_Slot>);
    SnippetUI::IntentsUI_Standard_Slot::IntentsUI_Standard_Slot(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (SnippetUI::IntentsUI_Standard_Slot *)operator new();
    SnippetUI::IntentsUI_Standard_Slot::IntentsUI_Standard_Slot(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_1BFBF2AF8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D890](v1, 0x10A1C40B18DE219);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::IntentsUI_Standard_Slot>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

void SnippetUI::IntentsUI_Standard_Slot::MergeFrom(int **this, int **a2)
{
  std::string *v4;
  unint64_t v5;
  const SnippetUI::Response_Component *v6;
  SnippetUI::Response_Component *v7;
  const SnippetUI::Response_Component *v8;
  char v9;
  std::string v10[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Response.pb.cc", 5583);
    v4 = google::protobuf::internal::LogMessage::operator<<(v10, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v9, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v10[0].__r_.__value_.__l.__data_);
  }
  v5 = (unint64_t)a2[1];
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((google::protobuf::internal::InternalMetadataWithArena *)(this + 1), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>(this + 2, (uint64_t)(a2 + 2));
  if (a2 != (int **)&SnippetUI::_IntentsUI_Standard_Slot_default_instance_)
  {
    v6 = (const SnippetUI::Response_Component *)a2[5];
    if (v6)
    {
      v7 = (SnippetUI::Response_Component *)this[5];
      if (!v7)
      {
        v7 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Response_Component>(0);
        this[5] = (int *)v7;
        v6 = (const SnippetUI::Response_Component *)a2[5];
      }
      if (v6)
        v8 = v6;
      else
        v8 = (const SnippetUI::Response_Component *)&SnippetUI::_Response_Component_default_instance_;
      SnippetUI::Response_Component::MergeFrom(v7, v8);
    }
  }
}

void sub_1BFBF2BF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void SnippetUI::Response_Component::MergeFrom(SnippetUI::Response_Component *this, const SnippetUI::Response_Component *a2)
{
  std::string *v4;
  uint64_t v5;
  const SnippetUI::Separators *v6;
  SnippetUI::Separators *v7;
  const SnippetUI::Separators *v8;
  SnippetUI::CustomCanvas *v9;
  const SnippetUI::CustomCanvas *v10;
  SnippetUI::FactItem_Standard *v11;
  const SnippetUI::FactItem_Standard *v12;
  SnippetUI::FactItem_ShortNumber *v13;
  const SnippetUI::FactItem_ShortNumber *v14;
  SnippetUI::FactItem_HeroNumber *v15;
  const SnippetUI::FactItem_HeroNumber *v16;
  SnippetUI::SummaryItem_Standard *v17;
  const SnippetUI::SummaryItem_Standard *v18;
  SnippetUI::SummaryItem_ShortNumber *v19;
  const SnippetUI::SummaryItem_ShortNumber *v20;
  SnippetUI::SummaryItem_Text *v21;
  const SnippetUI::SummaryItem_Text *v22;
  SnippetUI::SummaryItem_LargeText *v23;
  const SnippetUI::SummaryItem_LargeText *v24;
  SnippetUI::SummaryItem_DetailedText *v25;
  const SnippetUI::SummaryItem_DetailedText *v26;
  SnippetUI::SimpleItem_Standard *v27;
  const SnippetUI::SimpleItem_Standard *v28;
  SnippetUI::SimpleItem_Rich *v29;
  const SnippetUI::SimpleItem_Rich *v30;
  SnippetUI::SimpleItem_Visual *v31;
  const SnippetUI::SimpleItem_Visual *v32;
  SnippetUI::PrimaryHeader_Standard *v33;
  const SnippetUI::PrimaryHeader_Standard *v34;
  SnippetUI::PrimaryHeader_Marquee *v35;
  const SnippetUI::PrimaryHeader_Marquee *v36;
  SnippetUI::PrimaryHeader_Rich *v37;
  const SnippetUI::PrimaryHeader_Rich *v38;
  SnippetUI::SecondaryHeader_Standard *v39;
  const SnippetUI::SecondaryHeader_Standard *v40;
  SnippetUI::Button *v41;
  const SnippetUI::Button *v42;
  SnippetUI::BinaryButton *v43;
  const SnippetUI::BinaryButton *v44;
  SnippetUI::StatusIndicator_Success *v45;
  const SnippetUI::StatusIndicator_Success *v46;
  SnippetUI::StatusIndicator_Error *v47;
  const SnippetUI::StatusIndicator_Error *v48;
  SnippetUI::StatusIndicator_InProgress *v49;
  const SnippetUI::StatusIndicator_InProgress *v50;
  SnippetUI::StatusIndicator_Cancelled *v51;
  const SnippetUI::StatusIndicator_Cancelled *v52;
  SnippetUI::TextInput *v53;
  const SnippetUI::TextInput *v54;
  SnippetUI::Control_Switch *v55;
  const SnippetUI::Control_Switch *v56;
  SnippetUI::Control_Slider *v57;
  const SnippetUI::Control_Slider *v58;
  SnippetUI::Reference_Standard *v59;
  const SnippetUI::Reference_Standard *v60;
  SnippetUI::Reference_Logo *v61;
  const SnippetUI::Reference_Logo *v62;
  SnippetUI::Reference_Rich *v63;
  const SnippetUI::Reference_Rich *v64;
  SnippetUI::Reference_Button *v65;
  const SnippetUI::Reference_Button *v66;
  SnippetUI::SummaryItem_Pair *v67;
  const SnippetUI::SummaryItem_Pair *v68;
  SnippetUI::SummaryItem_PairNumber *v69;
  const SnippetUI::SummaryItem_PairNumber *v70;
  SnippetUI::SummaryItem_Button *v71;
  const SnippetUI::SummaryItem_Button *v72;
  SnippetUI::FactItem_Button *v73;
  const SnippetUI::FactItem_Button *v74;
  int **v75;
  int **v76;
  SnippetUI::Reference_Footnote *v77;
  const SnippetUI::Reference_Footnote *v78;
  SnippetUI::LongItem_Text *v79;
  const SnippetUI::LongItem_Text *v80;
  SnippetUI::Visualization_Chart *v81;
  const SnippetUI::Visualization_Chart *v82;
  SnippetUI::SummaryItem_Player *v83;
  const SnippetUI::SummaryItem_Player *v84;
  SnippetUI::SimpleItem_Player *v85;
  const SnippetUI::SimpleItem_Player *v86;
  SnippetUI::SimpleItem_ReverseRich *v87;
  const SnippetUI::SimpleItem_ReverseRich *v88;
  SnippetUI::SecondaryHeader_Emphasized *v89;
  const SnippetUI::SecondaryHeader_Emphasized *v90;
  SnippetUI::SummaryItem_Switch *v91;
  const SnippetUI::SummaryItem_Switch *v92;
  SnippetUI::SystemText_ClarificationTitle *v93;
  const SnippetUI::SystemText_ClarificationTitle *v94;
  SnippetUI::Visualization_Image *v95;
  const SnippetUI::Visualization_Image *v96;
  SnippetUI::Visualization_Map *v97;
  const SnippetUI::Visualization_Map *v98;
  int **v99;
  int **v100;
  SnippetUI::IntentsUI_Standard *v101;
  const SnippetUI::IntentsUI_Standard *v102;
  SnippetUI::Sash_Standard *v103;
  const SnippetUI::Sash_Standard *v104;
  SnippetUI::HeroHeader *v105;
  const SnippetUI::HeroHeader *v106;
  SnippetUI::HorizontalList_Standard *v107;
  const SnippetUI::HorizontalList_Standard *v108;
  SnippetUI::SectionHeader_Standard *v109;
  const SnippetUI::SectionHeader_Standard *v110;
  SnippetUI::SectionHeader_Rich *v111;
  const SnippetUI::SectionHeader_Rich *v112;
  int **v113;
  int **v114;
  SnippetUI::TertiaryHeader_Standard *v115;
  const SnippetUI::TertiaryHeader_Standard *v116;
  SnippetUI::SimpleItem_RichSearchResult *v117;
  const SnippetUI::SimpleItem_RichSearchResult *v118;
  SnippetUI::SummaryItem_PairNumberV2 *v119;
  const SnippetUI::SummaryItem_PairNumberV2 *v120;
  SnippetUI::SummaryItem_PairV2 *v121;
  const SnippetUI::SummaryItem_PairV2 *v122;
  SnippetUI::Control_PlayerButton *v123;
  const SnippetUI::Control_PlayerButton *v124;
  SnippetUI::SummaryItem_SwitchV2 *v125;
  const SnippetUI::SummaryItem_SwitchV2 *v126;
  char v127;
  std::string v128[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v128, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Response.pb.cc", 4755);
    v4 = google::protobuf::internal::LogMessage::operator<<(v128, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v127, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v128[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::Response_Component *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  if (a2 != (const SnippetUI::Response_Component *)&SnippetUI::_Response_Component_default_instance_)
  {
    v6 = (const SnippetUI::Separators *)*((_QWORD *)a2 + 2);
    if (v6)
    {
      v7 = (SnippetUI::Separators *)*((_QWORD *)this + 2);
      if (!v7)
      {
        v7 = (SnippetUI::Separators *)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Separators>(0);
        *((_QWORD *)this + 2) = v7;
        v6 = (const SnippetUI::Separators *)*((_QWORD *)a2 + 2);
      }
      if (v6)
        v8 = v6;
      else
        v8 = (const SnippetUI::Separators *)&SnippetUI::_Separators_default_instance_;
      SnippetUI::Separators::MergeFrom(v7, v8);
    }
  }
  switch(*((_DWORD *)a2 + 9))
  {
    case 1:
      v9 = SnippetUI::Response_Component::_internal_mutable_custom_canvas(this);
      if (*((_DWORD *)a2 + 9) == 1)
        v10 = (const SnippetUI::CustomCanvas *)*((_QWORD *)a2 + 3);
      else
        v10 = (const SnippetUI::CustomCanvas *)&SnippetUI::_CustomCanvas_default_instance_;
      SnippetUI::CustomCanvas::MergeFrom(v9, v10);
      break;
    case 2:
      v11 = SnippetUI::Response_Component::_internal_mutable_fact_item_standard(this);
      if (*((_DWORD *)a2 + 9) == 2)
        v12 = (const SnippetUI::FactItem_Standard *)*((_QWORD *)a2 + 3);
      else
        v12 = (const SnippetUI::FactItem_Standard *)&SnippetUI::_FactItem_Standard_default_instance_;
      SnippetUI::FactItem_Standard::MergeFrom(v11, v12);
      break;
    case 3:
      v13 = SnippetUI::Response_Component::_internal_mutable_fact_item_short_number(this);
      if (*((_DWORD *)a2 + 9) == 3)
        v14 = (const SnippetUI::FactItem_ShortNumber *)*((_QWORD *)a2 + 3);
      else
        v14 = (const SnippetUI::FactItem_ShortNumber *)&SnippetUI::_FactItem_ShortNumber_default_instance_;
      SnippetUI::FactItem_ShortNumber::MergeFrom(v13, v14);
      break;
    case 4:
      v15 = SnippetUI::Response_Component::_internal_mutable_fact_item_hero_number(this);
      if (*((_DWORD *)a2 + 9) == 4)
        v16 = (const SnippetUI::FactItem_HeroNumber *)*((_QWORD *)a2 + 3);
      else
        v16 = (const SnippetUI::FactItem_HeroNumber *)&SnippetUI::_FactItem_HeroNumber_default_instance_;
      SnippetUI::FactItem_HeroNumber::MergeFrom(v15, v16);
      break;
    case 5:
      v17 = SnippetUI::Response_Component::_internal_mutable_summary_item_standard(this);
      if (*((_DWORD *)a2 + 9) == 5)
        v18 = (const SnippetUI::SummaryItem_Standard *)*((_QWORD *)a2 + 3);
      else
        v18 = (const SnippetUI::SummaryItem_Standard *)&SnippetUI::_SummaryItem_Standard_default_instance_;
      SnippetUI::SummaryItem_Standard::MergeFrom(v17, v18);
      break;
    case 6:
      v19 = SnippetUI::Response_Component::_internal_mutable_summary_item_short_number(this);
      if (*((_DWORD *)a2 + 9) == 6)
        v20 = (const SnippetUI::SummaryItem_ShortNumber *)*((_QWORD *)a2 + 3);
      else
        v20 = (const SnippetUI::SummaryItem_ShortNumber *)&SnippetUI::_SummaryItem_ShortNumber_default_instance_;
      SnippetUI::SummaryItem_ShortNumber::MergeFrom(v19, v20);
      break;
    case 7:
      v21 = SnippetUI::Response_Component::_internal_mutable_summary_item_text(this);
      if (*((_DWORD *)a2 + 9) == 7)
        v22 = (const SnippetUI::SummaryItem_Text *)*((_QWORD *)a2 + 3);
      else
        v22 = (const SnippetUI::SummaryItem_Text *)&SnippetUI::_SummaryItem_Text_default_instance_;
      SnippetUI::SummaryItem_Text::MergeFrom(v21, v22);
      break;
    case 8:
      v23 = SnippetUI::Response_Component::_internal_mutable_summary_item_large_text(this);
      if (*((_DWORD *)a2 + 9) == 8)
        v24 = (const SnippetUI::SummaryItem_LargeText *)*((_QWORD *)a2 + 3);
      else
        v24 = (const SnippetUI::SummaryItem_LargeText *)&SnippetUI::_SummaryItem_LargeText_default_instance_;
      SnippetUI::SummaryItem_LargeText::MergeFrom(v23, v24);
      break;
    case 9:
      v25 = SnippetUI::Response_Component::_internal_mutable_summary_item_detailed_text(this);
      if (*((_DWORD *)a2 + 9) == 9)
        v26 = (const SnippetUI::SummaryItem_DetailedText *)*((_QWORD *)a2 + 3);
      else
        v26 = (const SnippetUI::SummaryItem_DetailedText *)&SnippetUI::_SummaryItem_DetailedText_default_instance_;
      SnippetUI::SummaryItem_DetailedText::MergeFrom(v25, v26);
      break;
    case 0xA:
      v27 = SnippetUI::Response_Component::_internal_mutable_simple_item_standard(this);
      if (*((_DWORD *)a2 + 9) == 10)
        v28 = (const SnippetUI::SimpleItem_Standard *)*((_QWORD *)a2 + 3);
      else
        v28 = (const SnippetUI::SimpleItem_Standard *)&SnippetUI::_SimpleItem_Standard_default_instance_;
      SnippetUI::SimpleItem_Standard::MergeFrom(v27, v28);
      break;
    case 0xB:
      v29 = SnippetUI::Response_Component::_internal_mutable_simple_item_rich(this);
      if (*((_DWORD *)a2 + 9) == 11)
        v30 = (const SnippetUI::SimpleItem_Rich *)*((_QWORD *)a2 + 3);
      else
        v30 = (const SnippetUI::SimpleItem_Rich *)&SnippetUI::_SimpleItem_Rich_default_instance_;
      SnippetUI::SimpleItem_Rich::MergeFrom(v29, v30);
      break;
    case 0xC:
      v31 = SnippetUI::Response_Component::_internal_mutable_simple_item_visual(this);
      if (*((_DWORD *)a2 + 9) == 12)
        v32 = (const SnippetUI::SimpleItem_Visual *)*((_QWORD *)a2 + 3);
      else
        v32 = (const SnippetUI::SimpleItem_Visual *)&SnippetUI::_SimpleItem_Visual_default_instance_;
      SnippetUI::SimpleItem_Visual::MergeFrom(v31, v32);
      break;
    case 0xD:
      v33 = SnippetUI::Response_Component::_internal_mutable_primary_header_standard(this);
      if (*((_DWORD *)a2 + 9) == 13)
        v34 = (const SnippetUI::PrimaryHeader_Standard *)*((_QWORD *)a2 + 3);
      else
        v34 = (const SnippetUI::PrimaryHeader_Standard *)&SnippetUI::_PrimaryHeader_Standard_default_instance_;
      SnippetUI::PrimaryHeader_Standard::MergeFrom(v33, v34);
      break;
    case 0xE:
      v35 = SnippetUI::Response_Component::_internal_mutable_primary_header_marquee(this);
      if (*((_DWORD *)a2 + 9) == 14)
        v36 = (const SnippetUI::PrimaryHeader_Marquee *)*((_QWORD *)a2 + 3);
      else
        v36 = (const SnippetUI::PrimaryHeader_Marquee *)&SnippetUI::_PrimaryHeader_Marquee_default_instance_;
      SnippetUI::PrimaryHeader_Marquee::MergeFrom(v35, v36);
      break;
    case 0xF:
      v37 = SnippetUI::Response_Component::_internal_mutable_primary_header_rich(this);
      if (*((_DWORD *)a2 + 9) == 15)
        v38 = (const SnippetUI::PrimaryHeader_Rich *)*((_QWORD *)a2 + 3);
      else
        v38 = (const SnippetUI::PrimaryHeader_Rich *)&SnippetUI::_PrimaryHeader_Rich_default_instance_;
      SnippetUI::PrimaryHeader_Rich::MergeFrom(v37, v38);
      break;
    case 0x10:
      v39 = SnippetUI::Response_Component::_internal_mutable_secondary_header_standard(this);
      if (*((_DWORD *)a2 + 9) == 16)
        v40 = (const SnippetUI::SecondaryHeader_Standard *)*((_QWORD *)a2 + 3);
      else
        v40 = (const SnippetUI::SecondaryHeader_Standard *)&SnippetUI::_SecondaryHeader_Standard_default_instance_;
      SnippetUI::SecondaryHeader_Standard::MergeFrom(v39, v40);
      break;
    case 0x11:
      v41 = SnippetUI::Response_Component::_internal_mutable_button(this);
      if (*((_DWORD *)a2 + 9) == 17)
        v42 = (const SnippetUI::Button *)*((_QWORD *)a2 + 3);
      else
        v42 = (const SnippetUI::Button *)&SnippetUI::_Button_default_instance_;
      SnippetUI::Button::MergeFrom(v41, v42);
      break;
    case 0x12:
      v43 = SnippetUI::Response_Component::_internal_mutable_binary_button(this);
      if (*((_DWORD *)a2 + 9) == 18)
        v44 = (const SnippetUI::BinaryButton *)*((_QWORD *)a2 + 3);
      else
        v44 = (const SnippetUI::BinaryButton *)&SnippetUI::_BinaryButton_default_instance_;
      SnippetUI::BinaryButton::MergeFrom(v43, v44);
      break;
    case 0x13:
      v45 = SnippetUI::Response_Component::_internal_mutable_status_indicator_success(this);
      if (*((_DWORD *)a2 + 9) == 19)
        v46 = (const SnippetUI::StatusIndicator_Success *)*((_QWORD *)a2 + 3);
      else
        v46 = (const SnippetUI::StatusIndicator_Success *)&SnippetUI::_StatusIndicator_Success_default_instance_;
      SnippetUI::StatusIndicator_Success::MergeFrom(v45, v46);
      break;
    case 0x14:
      v47 = SnippetUI::Response_Component::_internal_mutable_status_indicator_error(this);
      if (*((_DWORD *)a2 + 9) == 20)
        v48 = (const SnippetUI::StatusIndicator_Error *)*((_QWORD *)a2 + 3);
      else
        v48 = (const SnippetUI::StatusIndicator_Error *)&SnippetUI::_StatusIndicator_Error_default_instance_;
      SnippetUI::StatusIndicator_Error::MergeFrom(v47, v48);
      break;
    case 0x15:
      v49 = SnippetUI::Response_Component::_internal_mutable_status_indicator_in_progress(this);
      if (*((_DWORD *)a2 + 9) == 21)
        v50 = (const SnippetUI::StatusIndicator_InProgress *)*((_QWORD *)a2 + 3);
      else
        v50 = (const SnippetUI::StatusIndicator_InProgress *)&SnippetUI::_StatusIndicator_InProgress_default_instance_;
      SnippetUI::StatusIndicator_InProgress::MergeFrom(v49, v50);
      break;
    case 0x16:
      v51 = SnippetUI::Response_Component::_internal_mutable_status_indicator_cancelled(this);
      if (*((_DWORD *)a2 + 9) == 22)
        v52 = (const SnippetUI::StatusIndicator_Cancelled *)*((_QWORD *)a2 + 3);
      else
        v52 = (const SnippetUI::StatusIndicator_Cancelled *)&SnippetUI::_StatusIndicator_Cancelled_default_instance_;
      SnippetUI::StatusIndicator_Cancelled::MergeFrom(v51, v52);
      break;
    case 0x17:
      v53 = SnippetUI::Response_Component::_internal_mutable_text_input(this);
      if (*((_DWORD *)a2 + 9) == 23)
        v54 = (const SnippetUI::TextInput *)*((_QWORD *)a2 + 3);
      else
        v54 = (const SnippetUI::TextInput *)&SnippetUI::_TextInput_default_instance_;
      SnippetUI::TextInput::MergeFrom(v53, v54);
      break;
    case 0x18:
      v55 = SnippetUI::Response_Component::_internal_mutable_control_switch(this);
      if (*((_DWORD *)a2 + 9) == 24)
        v56 = (const SnippetUI::Control_Switch *)*((_QWORD *)a2 + 3);
      else
        v56 = (const SnippetUI::Control_Switch *)&SnippetUI::_Control_Switch_default_instance_;
      SnippetUI::Control_Switch::MergeFrom(v55, v56);
      break;
    case 0x19:
      v57 = SnippetUI::Response_Component::_internal_mutable_control_slider(this);
      if (*((_DWORD *)a2 + 9) == 25)
        v58 = (const SnippetUI::Control_Slider *)*((_QWORD *)a2 + 3);
      else
        v58 = (const SnippetUI::Control_Slider *)&SnippetUI::_Control_Slider_default_instance_;
      SnippetUI::Control_Slider::MergeFrom(v57, v58);
      break;
    case 0x1A:
      SnippetUI::Response_Component::_internal_set_group_id(this, *((std::string **)a2 + 3));
      break;
    case 0x1B:
      v59 = SnippetUI::Response_Component::_internal_mutable_reference_standard(this);
      if (*((_DWORD *)a2 + 9) == 27)
        v60 = (const SnippetUI::Reference_Standard *)*((_QWORD *)a2 + 3);
      else
        v60 = (const SnippetUI::Reference_Standard *)&SnippetUI::_Reference_Standard_default_instance_;
      SnippetUI::Reference_Standard::MergeFrom(v59, v60);
      break;
    case 0x1C:
      v61 = SnippetUI::Response_Component::_internal_mutable_reference_logo(this);
      if (*((_DWORD *)a2 + 9) == 28)
        v62 = (const SnippetUI::Reference_Logo *)*((_QWORD *)a2 + 3);
      else
        v62 = (const SnippetUI::Reference_Logo *)&SnippetUI::_Reference_Logo_default_instance_;
      SnippetUI::Reference_Logo::MergeFrom(v61, v62);
      break;
    case 0x1D:
      v63 = SnippetUI::Response_Component::_internal_mutable_reference_rich(this);
      if (*((_DWORD *)a2 + 9) == 29)
        v64 = (const SnippetUI::Reference_Rich *)*((_QWORD *)a2 + 3);
      else
        v64 = (const SnippetUI::Reference_Rich *)&SnippetUI::_Reference_Rich_default_instance_;
      SnippetUI::Reference_Rich::MergeFrom(v63, v64);
      break;
    case 0x1E:
      v65 = SnippetUI::Response_Component::_internal_mutable_reference_button(this);
      if (*((_DWORD *)a2 + 9) == 30)
        v66 = (const SnippetUI::Reference_Button *)*((_QWORD *)a2 + 3);
      else
        v66 = (const SnippetUI::Reference_Button *)&SnippetUI::_Reference_Button_default_instance_;
      SnippetUI::Reference_Button::MergeFrom(v65, v66);
      break;
    case 0x1F:
      v67 = SnippetUI::Response_Component::_internal_mutable_summary_item_pair(this);
      if (*((_DWORD *)a2 + 9) == 31)
        v68 = (const SnippetUI::SummaryItem_Pair *)*((_QWORD *)a2 + 3);
      else
        v68 = (const SnippetUI::SummaryItem_Pair *)&SnippetUI::_SummaryItem_Pair_default_instance_;
      SnippetUI::SummaryItem_Pair::MergeFrom(v67, v68);
      break;
    case 0x20:
      v69 = SnippetUI::Response_Component::_internal_mutable_summary_item_pair_number(this);
      if (*((_DWORD *)a2 + 9) == 32)
        v70 = (const SnippetUI::SummaryItem_PairNumber *)*((_QWORD *)a2 + 3);
      else
        v70 = (const SnippetUI::SummaryItem_PairNumber *)&SnippetUI::_SummaryItem_PairNumber_default_instance_;
      SnippetUI::SummaryItem_PairNumber::MergeFrom(v69, v70);
      break;
    case 0x21:
      v71 = SnippetUI::Response_Component::_internal_mutable_summary_item_button(this);
      if (*((_DWORD *)a2 + 9) == 33)
        v72 = (const SnippetUI::SummaryItem_Button *)*((_QWORD *)a2 + 3);
      else
        v72 = (const SnippetUI::SummaryItem_Button *)&SnippetUI::_SummaryItem_Button_default_instance_;
      SnippetUI::SummaryItem_Button::MergeFrom(v71, v72);
      break;
    case 0x22:
      v73 = SnippetUI::Response_Component::_internal_mutable_fact_item_button(this);
      if (*((_DWORD *)a2 + 9) == 34)
        v74 = (const SnippetUI::FactItem_Button *)*((_QWORD *)a2 + 3);
      else
        v74 = (const SnippetUI::FactItem_Button *)&SnippetUI::_FactItem_Button_default_instance_;
      SnippetUI::FactItem_Button::MergeFrom(v73, v74);
      break;
    case 0x23:
      v75 = (int **)SnippetUI::Response_Component::_internal_mutable_table(this);
      if (*((_DWORD *)a2 + 9) == 35)
        v76 = (int **)*((_QWORD *)a2 + 3);
      else
        v76 = (int **)&SnippetUI::_Table_default_instance_;
      SnippetUI::Table::MergeFrom(v75, v76);
      break;
    case 0x24:
      v77 = SnippetUI::Response_Component::_internal_mutable_reference_footnote(this);
      if (*((_DWORD *)a2 + 9) == 36)
        v78 = (const SnippetUI::Reference_Footnote *)*((_QWORD *)a2 + 3);
      else
        v78 = (const SnippetUI::Reference_Footnote *)&SnippetUI::_Reference_Footnote_default_instance_;
      SnippetUI::Reference_Footnote::MergeFrom(v77, v78);
      break;
    case 0x25:
      v79 = SnippetUI::Response_Component::_internal_mutable_long_item_text(this);
      if (*((_DWORD *)a2 + 9) == 37)
        v80 = (const SnippetUI::LongItem_Text *)*((_QWORD *)a2 + 3);
      else
        v80 = (const SnippetUI::LongItem_Text *)&SnippetUI::_LongItem_Text_default_instance_;
      SnippetUI::LongItem_Text::MergeFrom(v79, v80);
      break;
    case 0x26:
      v81 = SnippetUI::Response_Component::_internal_mutable_visualization_chart(this);
      if (*((_DWORD *)a2 + 9) == 38)
        v82 = (const SnippetUI::Visualization_Chart *)*((_QWORD *)a2 + 3);
      else
        v82 = (const SnippetUI::Visualization_Chart *)&SnippetUI::_Visualization_Chart_default_instance_;
      SnippetUI::Visualization_Chart::MergeFrom(v81, v82);
      break;
    case 0x27:
      v83 = SnippetUI::Response_Component::_internal_mutable_summary_item_player(this);
      if (*((_DWORD *)a2 + 9) == 39)
        v84 = (const SnippetUI::SummaryItem_Player *)*((_QWORD *)a2 + 3);
      else
        v84 = (const SnippetUI::SummaryItem_Player *)&SnippetUI::_SummaryItem_Player_default_instance_;
      SnippetUI::SummaryItem_Player::MergeFrom(v83, v84);
      break;
    case 0x28:
      v85 = SnippetUI::Response_Component::_internal_mutable_simple_item_player(this);
      if (*((_DWORD *)a2 + 9) == 40)
        v86 = (const SnippetUI::SimpleItem_Player *)*((_QWORD *)a2 + 3);
      else
        v86 = (const SnippetUI::SimpleItem_Player *)&SnippetUI::_SimpleItem_Player_default_instance_;
      SnippetUI::SimpleItem_Player::MergeFrom(v85, v86);
      break;
    case 0x29:
      v87 = SnippetUI::Response_Component::_internal_mutable_simple_item_reverse_rich(this);
      if (*((_DWORD *)a2 + 9) == 41)
        v88 = (const SnippetUI::SimpleItem_ReverseRich *)*((_QWORD *)a2 + 3);
      else
        v88 = (const SnippetUI::SimpleItem_ReverseRich *)&SnippetUI::_SimpleItem_ReverseRich_default_instance_;
      SnippetUI::SimpleItem_ReverseRich::MergeFrom(v87, v88);
      break;
    case 0x2A:
      v89 = SnippetUI::Response_Component::_internal_mutable_secondary_header_emphasized(this);
      if (*((_DWORD *)a2 + 9) == 42)
        v90 = (const SnippetUI::SecondaryHeader_Emphasized *)*((_QWORD *)a2 + 3);
      else
        v90 = (const SnippetUI::SecondaryHeader_Emphasized *)&SnippetUI::_SecondaryHeader_Emphasized_default_instance_;
      SnippetUI::SecondaryHeader_Emphasized::MergeFrom(v89, v90);
      break;
    case 0x2B:
      v91 = SnippetUI::Response_Component::_internal_mutable_summary_item_switch(this);
      if (*((_DWORD *)a2 + 9) == 43)
        v92 = (const SnippetUI::SummaryItem_Switch *)*((_QWORD *)a2 + 3);
      else
        v92 = (const SnippetUI::SummaryItem_Switch *)&SnippetUI::_SummaryItem_Switch_default_instance_;
      SnippetUI::SummaryItem_Switch::MergeFrom(v91, v92);
      break;
    case 0x2C:
      v93 = SnippetUI::Response_Component::_internal_mutable_system_text_clarification_title(this);
      if (*((_DWORD *)a2 + 9) == 44)
        v94 = (const SnippetUI::SystemText_ClarificationTitle *)*((_QWORD *)a2 + 3);
      else
        v94 = (const SnippetUI::SystemText_ClarificationTitle *)&SnippetUI::_SystemText_ClarificationTitle_default_instance_;
      SnippetUI::SystemText_ClarificationTitle::MergeFrom(v93, v94);
      break;
    case 0x2D:
      v95 = SnippetUI::Response_Component::_internal_mutable_visualization_image(this);
      if (*((_DWORD *)a2 + 9) == 45)
        v96 = (const SnippetUI::Visualization_Image *)*((_QWORD *)a2 + 3);
      else
        v96 = (const SnippetUI::Visualization_Image *)&SnippetUI::_Visualization_Image_default_instance_;
      SnippetUI::Visualization_Image::MergeFrom(v95, v96);
      break;
    case 0x2E:
      v97 = SnippetUI::Response_Component::_internal_mutable_visualization_map(this);
      if (*((_DWORD *)a2 + 9) == 46)
        v98 = (const SnippetUI::Visualization_Map *)*((_QWORD *)a2 + 3);
      else
        v98 = (const SnippetUI::Visualization_Map *)&SnippetUI::_Visualization_Map_default_instance_;
      SnippetUI::Visualization_Map::MergeFrom(v97, v98);
      break;
    case 0x2F:
      v99 = (int **)SnippetUI::Response_Component::_internal_mutable_button_container(this);
      if (*((_DWORD *)a2 + 9) == 47)
        v100 = (int **)*((_QWORD *)a2 + 3);
      else
        v100 = (int **)&SnippetUI::_Button_Container_default_instance_;
      SnippetUI::Button_Container::MergeFrom(v99, v100);
      break;
    case 0x30:
      v101 = SnippetUI::Response_Component::_internal_mutable_intentsui_standard(this);
      if (*((_DWORD *)a2 + 9) == 48)
        v102 = (const SnippetUI::IntentsUI_Standard *)*((_QWORD *)a2 + 3);
      else
        v102 = (const SnippetUI::IntentsUI_Standard *)&SnippetUI::_IntentsUI_Standard_default_instance_;
      SnippetUI::IntentsUI_Standard::MergeFrom(v101, v102);
      break;
    case 0x31:
      v103 = SnippetUI::Response_Component::_internal_mutable_sash_standard(this);
      if (*((_DWORD *)a2 + 9) == 49)
        v104 = (const SnippetUI::Sash_Standard *)*((_QWORD *)a2 + 3);
      else
        v104 = (const SnippetUI::Sash_Standard *)&SnippetUI::_Sash_Standard_default_instance_;
      SnippetUI::Sash_Standard::MergeFrom(v103, v104);
      break;
    case 0x32:
      v105 = SnippetUI::Response_Component::_internal_mutable_hero_header(this);
      if (*((_DWORD *)a2 + 9) == 50)
        v106 = (const SnippetUI::HeroHeader *)*((_QWORD *)a2 + 3);
      else
        v106 = (const SnippetUI::HeroHeader *)&SnippetUI::_HeroHeader_default_instance_;
      SnippetUI::HeroHeader::MergeFrom(v105, v106);
      break;
    case 0x33:
      v107 = SnippetUI::Response_Component::_internal_mutable_horizontal_list_standard(this);
      if (*((_DWORD *)a2 + 9) == 51)
        v108 = (const SnippetUI::HorizontalList_Standard *)*((_QWORD *)a2 + 3);
      else
        v108 = (const SnippetUI::HorizontalList_Standard *)&SnippetUI::_HorizontalList_Standard_default_instance_;
      SnippetUI::HorizontalList_Standard::MergeFrom(v107, v108);
      break;
    case 0x34:
      v109 = SnippetUI::Response_Component::_internal_mutable_section_header_standard(this);
      if (*((_DWORD *)a2 + 9) == 52)
        v110 = (const SnippetUI::SectionHeader_Standard *)*((_QWORD *)a2 + 3);
      else
        v110 = (const SnippetUI::SectionHeader_Standard *)&SnippetUI::_SectionHeader_Standard_default_instance_;
      SnippetUI::SectionHeader_Standard::MergeFrom(v109, v110);
      break;
    case 0x35:
      v111 = SnippetUI::Response_Component::_internal_mutable_section_header_rich(this);
      if (*((_DWORD *)a2 + 9) == 53)
        v112 = (const SnippetUI::SectionHeader_Rich *)*((_QWORD *)a2 + 3);
      else
        v112 = (const SnippetUI::SectionHeader_Rich *)&SnippetUI::_SectionHeader_Rich_default_instance_;
      SnippetUI::SectionHeader_Rich::MergeFrom(v111, v112);
      break;
    case 0x36:
      v113 = (int **)SnippetUI::Response_Component::_internal_mutable_key_value_standard(this);
      if (*((_DWORD *)a2 + 9) == 54)
        v114 = (int **)*((_QWORD *)a2 + 3);
      else
        v114 = (int **)&SnippetUI::_KeyValue_Standard_default_instance_;
      SnippetUI::KeyValue_Standard::MergeFrom(v113, v114);
      break;
    case 0x37:
      v115 = SnippetUI::Response_Component::_internal_mutable_tertiary_header_standard(this);
      if (*((_DWORD *)a2 + 9) == 55)
        v116 = (const SnippetUI::TertiaryHeader_Standard *)*((_QWORD *)a2 + 3);
      else
        v116 = (const SnippetUI::TertiaryHeader_Standard *)&SnippetUI::_TertiaryHeader_Standard_default_instance_;
      SnippetUI::TertiaryHeader_Standard::MergeFrom(v115, v116);
      break;
    case 0x38:
      v117 = SnippetUI::Response_Component::_internal_mutable_simple_item_rich_search_result(this);
      if (*((_DWORD *)a2 + 9) == 56)
        v118 = (const SnippetUI::SimpleItem_RichSearchResult *)*((_QWORD *)a2 + 3);
      else
        v118 = (const SnippetUI::SimpleItem_RichSearchResult *)&SnippetUI::_SimpleItem_RichSearchResult_default_instance_;
      SnippetUI::SimpleItem_RichSearchResult::MergeFrom(v117, v118);
      break;
    case 0x3A:
      v119 = SnippetUI::Response_Component::_internal_mutable_summary_item_pair_number_v2(this);
      if (*((_DWORD *)a2 + 9) == 58)
        v120 = (const SnippetUI::SummaryItem_PairNumberV2 *)*((_QWORD *)a2 + 3);
      else
        v120 = (const SnippetUI::SummaryItem_PairNumberV2 *)&SnippetUI::_SummaryItem_PairNumberV2_default_instance_;
      SnippetUI::SummaryItem_PairNumberV2::MergeFrom(v119, v120);
      break;
    case 0x3B:
      v121 = SnippetUI::Response_Component::_internal_mutable_summary_item_pair_v2(this);
      if (*((_DWORD *)a2 + 9) == 59)
        v122 = (const SnippetUI::SummaryItem_PairV2 *)*((_QWORD *)a2 + 3);
      else
        v122 = (const SnippetUI::SummaryItem_PairV2 *)&SnippetUI::_SummaryItem_PairV2_default_instance_;
      SnippetUI::SummaryItem_PairV2::MergeFrom(v121, v122);
      break;
    case 0x3C:
      v123 = SnippetUI::Response_Component::_internal_mutable_control_player_button(this);
      if (*((_DWORD *)a2 + 9) == 60)
        v124 = (const SnippetUI::Control_PlayerButton *)*((_QWORD *)a2 + 3);
      else
        v124 = (const SnippetUI::Control_PlayerButton *)&SnippetUI::_Control_PlayerButton_default_instance_;
      SnippetUI::Control_PlayerButton::MergeFrom(v123, v124);
      break;
    case 0x3D:
      v125 = SnippetUI::Response_Component::_internal_mutable_summary_item_switch_v2(this);
      if (*((_DWORD *)a2 + 9) == 61)
        v126 = (const SnippetUI::SummaryItem_SwitchV2 *)*((_QWORD *)a2 + 3);
      else
        v126 = (const SnippetUI::SummaryItem_SwitchV2 *)&SnippetUI::_SummaryItem_SwitchV2_default_instance_;
      SnippetUI::SummaryItem_SwitchV2::MergeFrom(v125, v126);
      break;
    default:
      return;
  }
}

void sub_1BFBF3638(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

SnippetUI::CustomCanvas *SnippetUI::Response_Component::_internal_mutable_custom_canvas(SnippetUI::Response_Component *this)
{
  SnippetUI::CustomCanvas *result;

  if (*((_DWORD *)this + 9) == 1)
    return (SnippetUI::CustomCanvas *)*((_QWORD *)this + 3);
  SnippetUI::Response_Component::clear_value((uint64_t)this);
  *((_DWORD *)this + 9) = 1;
  result = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::CustomCanvas>(0);
  *((_QWORD *)this + 3) = result;
  return result;
}

SnippetUI::FactItem_Standard *SnippetUI::Response_Component::_internal_mutable_fact_item_standard(SnippetUI::Response_Component *this)
{
  SnippetUI::FactItem_Standard *result;

  if (*((_DWORD *)this + 9) == 2)
    return (SnippetUI::FactItem_Standard *)*((_QWORD *)this + 3);
  SnippetUI::Response_Component::clear_value((uint64_t)this);
  *((_DWORD *)this + 9) = 2;
  result = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::FactItem_Standard>(0);
  *((_QWORD *)this + 3) = result;
  return result;
}

SnippetUI::FactItem_ShortNumber *SnippetUI::Response_Component::_internal_mutable_fact_item_short_number(SnippetUI::Response_Component *this)
{
  SnippetUI::FactItem_ShortNumber *result;

  if (*((_DWORD *)this + 9) == 3)
    return (SnippetUI::FactItem_ShortNumber *)*((_QWORD *)this + 3);
  SnippetUI::Response_Component::clear_value((uint64_t)this);
  *((_DWORD *)this + 9) = 3;
  result = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::FactItem_ShortNumber>(0);
  *((_QWORD *)this + 3) = result;
  return result;
}

SnippetUI::FactItem_HeroNumber *SnippetUI::Response_Component::_internal_mutable_fact_item_hero_number(SnippetUI::Response_Component *this)
{
  SnippetUI::FactItem_HeroNumber *result;

  if (*((_DWORD *)this + 9) == 4)
    return (SnippetUI::FactItem_HeroNumber *)*((_QWORD *)this + 3);
  SnippetUI::Response_Component::clear_value((uint64_t)this);
  *((_DWORD *)this + 9) = 4;
  result = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::FactItem_HeroNumber>(0);
  *((_QWORD *)this + 3) = result;
  return result;
}

SnippetUI::SummaryItem_Standard *SnippetUI::Response_Component::_internal_mutable_summary_item_standard(SnippetUI::Response_Component *this)
{
  SnippetUI::SummaryItem_Standard *result;

  if (*((_DWORD *)this + 9) == 5)
    return (SnippetUI::SummaryItem_Standard *)*((_QWORD *)this + 3);
  SnippetUI::Response_Component::clear_value((uint64_t)this);
  *((_DWORD *)this + 9) = 5;
  result = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::SummaryItem_Standard>(0);
  *((_QWORD *)this + 3) = result;
  return result;
}

SnippetUI::SummaryItem_ShortNumber *SnippetUI::Response_Component::_internal_mutable_summary_item_short_number(SnippetUI::Response_Component *this)
{
  SnippetUI::SummaryItem_ShortNumber *result;

  if (*((_DWORD *)this + 9) == 6)
    return (SnippetUI::SummaryItem_ShortNumber *)*((_QWORD *)this + 3);
  SnippetUI::Response_Component::clear_value((uint64_t)this);
  *((_DWORD *)this + 9) = 6;
  result = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::SummaryItem_ShortNumber>(0);
  *((_QWORD *)this + 3) = result;
  return result;
}

SnippetUI::SummaryItem_Text *SnippetUI::Response_Component::_internal_mutable_summary_item_text(SnippetUI::Response_Component *this)
{
  SnippetUI::SummaryItem_Text *result;

  if (*((_DWORD *)this + 9) == 7)
    return (SnippetUI::SummaryItem_Text *)*((_QWORD *)this + 3);
  SnippetUI::Response_Component::clear_value((uint64_t)this);
  *((_DWORD *)this + 9) = 7;
  result = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::SummaryItem_Text>(0);
  *((_QWORD *)this + 3) = result;
  return result;
}

SnippetUI::SummaryItem_LargeText *SnippetUI::Response_Component::_internal_mutable_summary_item_large_text(SnippetUI::Response_Component *this)
{
  SnippetUI::SummaryItem_LargeText *result;

  if (*((_DWORD *)this + 9) == 8)
    return (SnippetUI::SummaryItem_LargeText *)*((_QWORD *)this + 3);
  SnippetUI::Response_Component::clear_value((uint64_t)this);
  *((_DWORD *)this + 9) = 8;
  result = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::SummaryItem_LargeText>(0);
  *((_QWORD *)this + 3) = result;
  return result;
}

SnippetUI::SummaryItem_DetailedText *SnippetUI::Response_Component::_internal_mutable_summary_item_detailed_text(SnippetUI::Response_Component *this)
{
  SnippetUI::SummaryItem_DetailedText *result;

  if (*((_DWORD *)this + 9) == 9)
    return (SnippetUI::SummaryItem_DetailedText *)*((_QWORD *)this + 3);
  SnippetUI::Response_Component::clear_value((uint64_t)this);
  *((_DWORD *)this + 9) = 9;
  result = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::SummaryItem_DetailedText>(0);
  *((_QWORD *)this + 3) = result;
  return result;
}

SnippetUI::SimpleItem_Standard *SnippetUI::Response_Component::_internal_mutable_simple_item_standard(SnippetUI::Response_Component *this)
{
  SnippetUI::SimpleItem_Standard *result;

  if (*((_DWORD *)this + 9) == 10)
    return (SnippetUI::SimpleItem_Standard *)*((_QWORD *)this + 3);
  SnippetUI::Response_Component::clear_value((uint64_t)this);
  *((_DWORD *)this + 9) = 10;
  result = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::SimpleItem_Standard>(0);
  *((_QWORD *)this + 3) = result;
  return result;
}

SnippetUI::SimpleItem_Rich *SnippetUI::Response_Component::_internal_mutable_simple_item_rich(SnippetUI::Response_Component *this)
{
  SnippetUI::SimpleItem_Rich *result;

  if (*((_DWORD *)this + 9) == 11)
    return (SnippetUI::SimpleItem_Rich *)*((_QWORD *)this + 3);
  SnippetUI::Response_Component::clear_value((uint64_t)this);
  *((_DWORD *)this + 9) = 11;
  result = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::SimpleItem_Rich>(0);
  *((_QWORD *)this + 3) = result;
  return result;
}

SnippetUI::SimpleItem_Visual *SnippetUI::Response_Component::_internal_mutable_simple_item_visual(SnippetUI::Response_Component *this)
{
  SnippetUI::SimpleItem_Visual *result;

  if (*((_DWORD *)this + 9) == 12)
    return (SnippetUI::SimpleItem_Visual *)*((_QWORD *)this + 3);
  SnippetUI::Response_Component::clear_value((uint64_t)this);
  *((_DWORD *)this + 9) = 12;
  result = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::SimpleItem_Visual>(0);
  *((_QWORD *)this + 3) = result;
  return result;
}

SnippetUI::PrimaryHeader_Standard *SnippetUI::Response_Component::_internal_mutable_primary_header_standard(SnippetUI::Response_Component *this)
{
  SnippetUI::PrimaryHeader_Standard *result;

  if (*((_DWORD *)this + 9) == 13)
    return (SnippetUI::PrimaryHeader_Standard *)*((_QWORD *)this + 3);
  SnippetUI::Response_Component::clear_value((uint64_t)this);
  *((_DWORD *)this + 9) = 13;
  result = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::PrimaryHeader_Standard>(0);
  *((_QWORD *)this + 3) = result;
  return result;
}

SnippetUI::PrimaryHeader_Marquee *SnippetUI::Response_Component::_internal_mutable_primary_header_marquee(SnippetUI::Response_Component *this)
{
  SnippetUI::PrimaryHeader_Marquee *result;

  if (*((_DWORD *)this + 9) == 14)
    return (SnippetUI::PrimaryHeader_Marquee *)*((_QWORD *)this + 3);
  SnippetUI::Response_Component::clear_value((uint64_t)this);
  *((_DWORD *)this + 9) = 14;
  result = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::PrimaryHeader_Marquee>(0);
  *((_QWORD *)this + 3) = result;
  return result;
}

SnippetUI::PrimaryHeader_Rich *SnippetUI::Response_Component::_internal_mutable_primary_header_rich(SnippetUI::Response_Component *this)
{
  SnippetUI::PrimaryHeader_Rich *result;

  if (*((_DWORD *)this + 9) == 15)
    return (SnippetUI::PrimaryHeader_Rich *)*((_QWORD *)this + 3);
  SnippetUI::Response_Component::clear_value((uint64_t)this);
  *((_DWORD *)this + 9) = 15;
  result = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::PrimaryHeader_Rich>(0);
  *((_QWORD *)this + 3) = result;
  return result;
}

SnippetUI::SecondaryHeader_Standard *SnippetUI::Response_Component::_internal_mutable_secondary_header_standard(SnippetUI::Response_Component *this)
{
  SnippetUI::SecondaryHeader_Standard *result;

  if (*((_DWORD *)this + 9) == 16)
    return (SnippetUI::SecondaryHeader_Standard *)*((_QWORD *)this + 3);
  SnippetUI::Response_Component::clear_value((uint64_t)this);
  *((_DWORD *)this + 9) = 16;
  result = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::SecondaryHeader_Standard>(0);
  *((_QWORD *)this + 3) = result;
  return result;
}

SnippetUI::Button *SnippetUI::Response_Component::_internal_mutable_button(SnippetUI::Response_Component *this)
{
  SnippetUI::Button *result;

  if (*((_DWORD *)this + 9) == 17)
    return (SnippetUI::Button *)*((_QWORD *)this + 3);
  SnippetUI::Response_Component::clear_value((uint64_t)this);
  *((_DWORD *)this + 9) = 17;
  result = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Button>(0);
  *((_QWORD *)this + 3) = result;
  return result;
}

SnippetUI::BinaryButton *SnippetUI::Response_Component::_internal_mutable_binary_button(SnippetUI::Response_Component *this)
{
  SnippetUI::BinaryButton *result;

  if (*((_DWORD *)this + 9) == 18)
    return (SnippetUI::BinaryButton *)*((_QWORD *)this + 3);
  SnippetUI::Response_Component::clear_value((uint64_t)this);
  *((_DWORD *)this + 9) = 18;
  result = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::BinaryButton>(0);
  *((_QWORD *)this + 3) = result;
  return result;
}

SnippetUI::StatusIndicator_Success *SnippetUI::Response_Component::_internal_mutable_status_indicator_success(SnippetUI::Response_Component *this)
{
  SnippetUI::StatusIndicator_Success *result;

  if (*((_DWORD *)this + 9) == 19)
    return (SnippetUI::StatusIndicator_Success *)*((_QWORD *)this + 3);
  SnippetUI::Response_Component::clear_value((uint64_t)this);
  *((_DWORD *)this + 9) = 19;
  result = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::StatusIndicator_Success>(0);
  *((_QWORD *)this + 3) = result;
  return result;
}

SnippetUI::StatusIndicator_Error *SnippetUI::Response_Component::_internal_mutable_status_indicator_error(SnippetUI::Response_Component *this)
{
  SnippetUI::StatusIndicator_Error *result;

  if (*((_DWORD *)this + 9) == 20)
    return (SnippetUI::StatusIndicator_Error *)*((_QWORD *)this + 3);
  SnippetUI::Response_Component::clear_value((uint64_t)this);
  *((_DWORD *)this + 9) = 20;
  result = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::StatusIndicator_Error>(0);
  *((_QWORD *)this + 3) = result;
  return result;
}

SnippetUI::StatusIndicator_InProgress *SnippetUI::Response_Component::_internal_mutable_status_indicator_in_progress(SnippetUI::Response_Component *this)
{
  SnippetUI::StatusIndicator_InProgress *result;

  if (*((_DWORD *)this + 9) == 21)
    return (SnippetUI::StatusIndicator_InProgress *)*((_QWORD *)this + 3);
  SnippetUI::Response_Component::clear_value((uint64_t)this);
  *((_DWORD *)this + 9) = 21;
  result = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::StatusIndicator_InProgress>(0);
  *((_QWORD *)this + 3) = result;
  return result;
}

SnippetUI::StatusIndicator_Cancelled *SnippetUI::Response_Component::_internal_mutable_status_indicator_cancelled(SnippetUI::Response_Component *this)
{
  SnippetUI::StatusIndicator_Cancelled *result;

  if (*((_DWORD *)this + 9) == 22)
    return (SnippetUI::StatusIndicator_Cancelled *)*((_QWORD *)this + 3);
  SnippetUI::Response_Component::clear_value((uint64_t)this);
  *((_DWORD *)this + 9) = 22;
  result = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::StatusIndicator_Cancelled>(0);
  *((_QWORD *)this + 3) = result;
  return result;
}

SnippetUI::TextInput *SnippetUI::Response_Component::_internal_mutable_text_input(SnippetUI::Response_Component *this)
{
  SnippetUI::TextInput *result;

  if (*((_DWORD *)this + 9) == 23)
    return (SnippetUI::TextInput *)*((_QWORD *)this + 3);
  SnippetUI::Response_Component::clear_value((uint64_t)this);
  *((_DWORD *)this + 9) = 23;
  result = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextInput>(0);
  *((_QWORD *)this + 3) = result;
  return result;
}

SnippetUI::Control_Switch *SnippetUI::Response_Component::_internal_mutable_control_switch(SnippetUI::Response_Component *this)
{
  SnippetUI::Control_Switch *result;

  if (*((_DWORD *)this + 9) == 24)
    return (SnippetUI::Control_Switch *)*((_QWORD *)this + 3);
  SnippetUI::Response_Component::clear_value((uint64_t)this);
  *((_DWORD *)this + 9) = 24;
  result = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Control_Switch>(0);
  *((_QWORD *)this + 3) = result;
  return result;
}

SnippetUI::Control_Slider *SnippetUI::Response_Component::_internal_mutable_control_slider(SnippetUI::Response_Component *this)
{
  SnippetUI::Control_Slider *result;

  if (*((_DWORD *)this + 9) == 25)
    return (SnippetUI::Control_Slider *)*((_QWORD *)this + 3);
  SnippetUI::Response_Component::clear_value((uint64_t)this);
  *((_DWORD *)this + 9) = 25;
  result = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Control_Slider>(0);
  *((_QWORD *)this + 3) = result;
  return result;
}

SnippetUI::Control_PlayerButton *SnippetUI::Response_Component::_internal_mutable_control_player_button(SnippetUI::Response_Component *this)
{
  SnippetUI::Control_PlayerButton *result;

  if (*((_DWORD *)this + 9) == 60)
    return (SnippetUI::Control_PlayerButton *)*((_QWORD *)this + 3);
  SnippetUI::Response_Component::clear_value((uint64_t)this);
  *((_DWORD *)this + 9) = 60;
  result = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Control_PlayerButton>(0);
  *((_QWORD *)this + 3) = result;
  return result;
}

void SnippetUI::Response_Component::_internal_set_group_id(SnippetUI::Response_Component *this, std::string *__str)
{
  std::string *v4;

  if (*((_DWORD *)this + 9) == 26)
  {
    v4 = (std::string *)*((_QWORD *)this + 3);
    if (v4 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
    {
      std::string::operator=(v4, __str);
      return;
    }
  }
  else
  {
    SnippetUI::Response_Component::clear_value((uint64_t)this);
    *((_DWORD *)this + 9) = 26;
    *((_QWORD *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  }
  google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 3, (uint64_t)__str);
}

SnippetUI::Reference_Standard *SnippetUI::Response_Component::_internal_mutable_reference_standard(SnippetUI::Response_Component *this)
{
  SnippetUI::Reference_Standard *result;

  if (*((_DWORD *)this + 9) == 27)
    return (SnippetUI::Reference_Standard *)*((_QWORD *)this + 3);
  SnippetUI::Response_Component::clear_value((uint64_t)this);
  *((_DWORD *)this + 9) = 27;
  result = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Reference_Standard>(0);
  *((_QWORD *)this + 3) = result;
  return result;
}

SnippetUI::Reference_Logo *SnippetUI::Response_Component::_internal_mutable_reference_logo(SnippetUI::Response_Component *this)
{
  SnippetUI::Reference_Logo *result;

  if (*((_DWORD *)this + 9) == 28)
    return (SnippetUI::Reference_Logo *)*((_QWORD *)this + 3);
  SnippetUI::Response_Component::clear_value((uint64_t)this);
  *((_DWORD *)this + 9) = 28;
  result = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Reference_Logo>(0);
  *((_QWORD *)this + 3) = result;
  return result;
}

SnippetUI::Reference_Rich *SnippetUI::Response_Component::_internal_mutable_reference_rich(SnippetUI::Response_Component *this)
{
  SnippetUI::Reference_Rich *result;

  if (*((_DWORD *)this + 9) == 29)
    return (SnippetUI::Reference_Rich *)*((_QWORD *)this + 3);
  SnippetUI::Response_Component::clear_value((uint64_t)this);
  *((_DWORD *)this + 9) = 29;
  result = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Reference_Rich>(0);
  *((_QWORD *)this + 3) = result;
  return result;
}

SnippetUI::Reference_Button *SnippetUI::Response_Component::_internal_mutable_reference_button(SnippetUI::Response_Component *this)
{
  SnippetUI::Reference_Button *result;

  if (*((_DWORD *)this + 9) == 30)
    return (SnippetUI::Reference_Button *)*((_QWORD *)this + 3);
  SnippetUI::Response_Component::clear_value((uint64_t)this);
  *((_DWORD *)this + 9) = 30;
  result = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Reference_Button>(0);
  *((_QWORD *)this + 3) = result;
  return result;
}

SnippetUI::SummaryItem_Pair *SnippetUI::Response_Component::_internal_mutable_summary_item_pair(SnippetUI::Response_Component *this)
{
  SnippetUI::SummaryItem_Pair *result;

  if (*((_DWORD *)this + 9) == 31)
    return (SnippetUI::SummaryItem_Pair *)*((_QWORD *)this + 3);
  SnippetUI::Response_Component::clear_value((uint64_t)this);
  *((_DWORD *)this + 9) = 31;
  result = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::SummaryItem_Pair>(0);
  *((_QWORD *)this + 3) = result;
  return result;
}

SnippetUI::SummaryItem_PairV2 *SnippetUI::Response_Component::_internal_mutable_summary_item_pair_v2(SnippetUI::Response_Component *this)
{
  SnippetUI::SummaryItem_PairV2 *result;

  if (*((_DWORD *)this + 9) == 59)
    return (SnippetUI::SummaryItem_PairV2 *)*((_QWORD *)this + 3);
  SnippetUI::Response_Component::clear_value((uint64_t)this);
  *((_DWORD *)this + 9) = 59;
  result = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::SummaryItem_PairV2>(0);
  *((_QWORD *)this + 3) = result;
  return result;
}

SnippetUI::SummaryItem_PairNumber *SnippetUI::Response_Component::_internal_mutable_summary_item_pair_number(SnippetUI::Response_Component *this)
{
  SnippetUI::SummaryItem_PairNumber *result;

  if (*((_DWORD *)this + 9) == 32)
    return (SnippetUI::SummaryItem_PairNumber *)*((_QWORD *)this + 3);
  SnippetUI::Response_Component::clear_value((uint64_t)this);
  *((_DWORD *)this + 9) = 32;
  result = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::SummaryItem_PairNumber>(0);
  *((_QWORD *)this + 3) = result;
  return result;
}

SnippetUI::SummaryItem_PairNumberV2 *SnippetUI::Response_Component::_internal_mutable_summary_item_pair_number_v2(SnippetUI::Response_Component *this)
{
  SnippetUI::SummaryItem_PairNumberV2 *result;

  if (*((_DWORD *)this + 9) == 58)
    return (SnippetUI::SummaryItem_PairNumberV2 *)*((_QWORD *)this + 3);
  SnippetUI::Response_Component::clear_value((uint64_t)this);
  *((_DWORD *)this + 9) = 58;
  result = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::SummaryItem_PairNumberV2>(0);
  *((_QWORD *)this + 3) = result;
  return result;
}

SnippetUI::SummaryItem_Button *SnippetUI::Response_Component::_internal_mutable_summary_item_button(SnippetUI::Response_Component *this)
{
  SnippetUI::SummaryItem_Button *result;

  if (*((_DWORD *)this + 9) == 33)
    return (SnippetUI::SummaryItem_Button *)*((_QWORD *)this + 3);
  SnippetUI::Response_Component::clear_value((uint64_t)this);
  *((_DWORD *)this + 9) = 33;
  result = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::SummaryItem_Button>(0);
  *((_QWORD *)this + 3) = result;
  return result;
}

SnippetUI::FactItem_Button *SnippetUI::Response_Component::_internal_mutable_fact_item_button(SnippetUI::Response_Component *this)
{
  SnippetUI::FactItem_Button *result;

  if (*((_DWORD *)this + 9) == 34)
    return (SnippetUI::FactItem_Button *)*((_QWORD *)this + 3);
  SnippetUI::Response_Component::clear_value((uint64_t)this);
  *((_DWORD *)this + 9) = 34;
  result = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::FactItem_Button>(0);
  *((_QWORD *)this + 3) = result;
  return result;
}

SnippetUI::Table *SnippetUI::Response_Component::_internal_mutable_table(SnippetUI::Response_Component *this)
{
  SnippetUI::Table *result;

  if (*((_DWORD *)this + 9) == 35)
    return (SnippetUI::Table *)*((_QWORD *)this + 3);
  SnippetUI::Response_Component::clear_value((uint64_t)this);
  *((_DWORD *)this + 9) = 35;
  result = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Table>(0);
  *((_QWORD *)this + 3) = result;
  return result;
}

SnippetUI::Reference_Footnote *SnippetUI::Response_Component::_internal_mutable_reference_footnote(SnippetUI::Response_Component *this)
{
  SnippetUI::Reference_Footnote *result;

  if (*((_DWORD *)this + 9) == 36)
    return (SnippetUI::Reference_Footnote *)*((_QWORD *)this + 3);
  SnippetUI::Response_Component::clear_value((uint64_t)this);
  *((_DWORD *)this + 9) = 36;
  result = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Reference_Footnote>(0);
  *((_QWORD *)this + 3) = result;
  return result;
}

SnippetUI::LongItem_Text *SnippetUI::Response_Component::_internal_mutable_long_item_text(SnippetUI::Response_Component *this)
{
  SnippetUI::LongItem_Text *result;

  if (*((_DWORD *)this + 9) == 37)
    return (SnippetUI::LongItem_Text *)*((_QWORD *)this + 3);
  SnippetUI::Response_Component::clear_value((uint64_t)this);
  *((_DWORD *)this + 9) = 37;
  result = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::LongItem_Text>(0);
  *((_QWORD *)this + 3) = result;
  return result;
}

SnippetUI::Visualization_Chart *SnippetUI::Response_Component::_internal_mutable_visualization_chart(SnippetUI::Response_Component *this)
{
  SnippetUI::Visualization_Chart *result;

  if (*((_DWORD *)this + 9) == 38)
    return (SnippetUI::Visualization_Chart *)*((_QWORD *)this + 3);
  SnippetUI::Response_Component::clear_value((uint64_t)this);
  *((_DWORD *)this + 9) = 38;
  result = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Visualization_Chart>(0);
  *((_QWORD *)this + 3) = result;
  return result;
}

SnippetUI::SummaryItem_Player *SnippetUI::Response_Component::_internal_mutable_summary_item_player(SnippetUI::Response_Component *this)
{
  SnippetUI::SummaryItem_Player *result;

  if (*((_DWORD *)this + 9) == 39)
    return (SnippetUI::SummaryItem_Player *)*((_QWORD *)this + 3);
  SnippetUI::Response_Component::clear_value((uint64_t)this);
  *((_DWORD *)this + 9) = 39;
  result = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::SummaryItem_Player>(0);
  *((_QWORD *)this + 3) = result;
  return result;
}

SnippetUI::SimpleItem_Player *SnippetUI::Response_Component::_internal_mutable_simple_item_player(SnippetUI::Response_Component *this)
{
  SnippetUI::SimpleItem_Player *result;

  if (*((_DWORD *)this + 9) == 40)
    return (SnippetUI::SimpleItem_Player *)*((_QWORD *)this + 3);
  SnippetUI::Response_Component::clear_value((uint64_t)this);
  *((_DWORD *)this + 9) = 40;
  result = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::SimpleItem_Player>(0);
  *((_QWORD *)this + 3) = result;
  return result;
}

SnippetUI::SimpleItem_ReverseRich *SnippetUI::Response_Component::_internal_mutable_simple_item_reverse_rich(SnippetUI::Response_Component *this)
{
  SnippetUI::SimpleItem_ReverseRich *result;

  if (*((_DWORD *)this + 9) == 41)
    return (SnippetUI::SimpleItem_ReverseRich *)*((_QWORD *)this + 3);
  SnippetUI::Response_Component::clear_value((uint64_t)this);
  *((_DWORD *)this + 9) = 41;
  result = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::SimpleItem_ReverseRich>(0);
  *((_QWORD *)this + 3) = result;
  return result;
}

SnippetUI::SecondaryHeader_Emphasized *SnippetUI::Response_Component::_internal_mutable_secondary_header_emphasized(SnippetUI::Response_Component *this)
{
  SnippetUI::SecondaryHeader_Emphasized *result;

  if (*((_DWORD *)this + 9) == 42)
    return (SnippetUI::SecondaryHeader_Emphasized *)*((_QWORD *)this + 3);
  SnippetUI::Response_Component::clear_value((uint64_t)this);
  *((_DWORD *)this + 9) = 42;
  result = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::SecondaryHeader_Emphasized>(0);
  *((_QWORD *)this + 3) = result;
  return result;
}

SnippetUI::SummaryItem_Switch *SnippetUI::Response_Component::_internal_mutable_summary_item_switch(SnippetUI::Response_Component *this)
{
  SnippetUI::SummaryItem_Switch *result;

  if (*((_DWORD *)this + 9) == 43)
    return (SnippetUI::SummaryItem_Switch *)*((_QWORD *)this + 3);
  SnippetUI::Response_Component::clear_value((uint64_t)this);
  *((_DWORD *)this + 9) = 43;
  result = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::SummaryItem_Switch>(0);
  *((_QWORD *)this + 3) = result;
  return result;
}

SnippetUI::SystemText_ClarificationTitle *SnippetUI::Response_Component::_internal_mutable_system_text_clarification_title(SnippetUI::Response_Component *this)
{
  SnippetUI::SystemText_ClarificationTitle *result;

  if (*((_DWORD *)this + 9) == 44)
    return (SnippetUI::SystemText_ClarificationTitle *)*((_QWORD *)this + 3);
  SnippetUI::Response_Component::clear_value((uint64_t)this);
  *((_DWORD *)this + 9) = 44;
  result = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::SystemText_ClarificationTitle>(0);
  *((_QWORD *)this + 3) = result;
  return result;
}

SnippetUI::Visualization_Image *SnippetUI::Response_Component::_internal_mutable_visualization_image(SnippetUI::Response_Component *this)
{
  SnippetUI::Visualization_Image *result;

  if (*((_DWORD *)this + 9) == 45)
    return (SnippetUI::Visualization_Image *)*((_QWORD *)this + 3);
  SnippetUI::Response_Component::clear_value((uint64_t)this);
  *((_DWORD *)this + 9) = 45;
  result = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Visualization_Image>(0);
  *((_QWORD *)this + 3) = result;
  return result;
}

SnippetUI::Visualization_Map *SnippetUI::Response_Component::_internal_mutable_visualization_map(SnippetUI::Response_Component *this)
{
  SnippetUI::Visualization_Map *result;

  if (*((_DWORD *)this + 9) == 46)
    return (SnippetUI::Visualization_Map *)*((_QWORD *)this + 3);
  SnippetUI::Response_Component::clear_value((uint64_t)this);
  *((_DWORD *)this + 9) = 46;
  result = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Visualization_Map>(0);
  *((_QWORD *)this + 3) = result;
  return result;
}

SnippetUI::Button_Container *SnippetUI::Response_Component::_internal_mutable_button_container(SnippetUI::Response_Component *this)
{
  SnippetUI::Button_Container *result;

  if (*((_DWORD *)this + 9) == 47)
    return (SnippetUI::Button_Container *)*((_QWORD *)this + 3);
  SnippetUI::Response_Component::clear_value((uint64_t)this);
  *((_DWORD *)this + 9) = 47;
  result = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Button_Container>(0);
  *((_QWORD *)this + 3) = result;
  return result;
}

SnippetUI::IntentsUI_Standard *SnippetUI::Response_Component::_internal_mutable_intentsui_standard(SnippetUI::Response_Component *this)
{
  SnippetUI::IntentsUI_Standard *result;

  if (*((_DWORD *)this + 9) == 48)
    return (SnippetUI::IntentsUI_Standard *)*((_QWORD *)this + 3);
  SnippetUI::Response_Component::clear_value((uint64_t)this);
  *((_DWORD *)this + 9) = 48;
  result = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::IntentsUI_Standard>(0);
  *((_QWORD *)this + 3) = result;
  return result;
}

SnippetUI::Sash_Standard *SnippetUI::Response_Component::_internal_mutable_sash_standard(SnippetUI::Response_Component *this)
{
  SnippetUI::Sash_Standard *result;

  if (*((_DWORD *)this + 9) == 49)
    return (SnippetUI::Sash_Standard *)*((_QWORD *)this + 3);
  SnippetUI::Response_Component::clear_value((uint64_t)this);
  *((_DWORD *)this + 9) = 49;
  result = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Sash_Standard>(0);
  *((_QWORD *)this + 3) = result;
  return result;
}

SnippetUI::HeroHeader *SnippetUI::Response_Component::_internal_mutable_hero_header(SnippetUI::Response_Component *this)
{
  SnippetUI::HeroHeader *result;

  if (*((_DWORD *)this + 9) == 50)
    return (SnippetUI::HeroHeader *)*((_QWORD *)this + 3);
  SnippetUI::Response_Component::clear_value((uint64_t)this);
  *((_DWORD *)this + 9) = 50;
  result = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::HeroHeader>(0);
  *((_QWORD *)this + 3) = result;
  return result;
}

SnippetUI::HorizontalList_Standard *SnippetUI::Response_Component::_internal_mutable_horizontal_list_standard(SnippetUI::Response_Component *this)
{
  SnippetUI::HorizontalList_Standard *result;

  if (*((_DWORD *)this + 9) == 51)
    return (SnippetUI::HorizontalList_Standard *)*((_QWORD *)this + 3);
  SnippetUI::Response_Component::clear_value((uint64_t)this);
  *((_DWORD *)this + 9) = 51;
  result = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::HorizontalList_Standard>(0);
  *((_QWORD *)this + 3) = result;
  return result;
}

SnippetUI::SectionHeader_Standard *SnippetUI::Response_Component::_internal_mutable_section_header_standard(SnippetUI::Response_Component *this)
{
  SnippetUI::SectionHeader_Standard *result;

  if (*((_DWORD *)this + 9) == 52)
    return (SnippetUI::SectionHeader_Standard *)*((_QWORD *)this + 3);
  SnippetUI::Response_Component::clear_value((uint64_t)this);
  *((_DWORD *)this + 9) = 52;
  result = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::SectionHeader_Standard>(0);
  *((_QWORD *)this + 3) = result;
  return result;
}

SnippetUI::SectionHeader_Rich *SnippetUI::Response_Component::_internal_mutable_section_header_rich(SnippetUI::Response_Component *this)
{
  SnippetUI::SectionHeader_Rich *result;

  if (*((_DWORD *)this + 9) == 53)
    return (SnippetUI::SectionHeader_Rich *)*((_QWORD *)this + 3);
  SnippetUI::Response_Component::clear_value((uint64_t)this);
  *((_DWORD *)this + 9) = 53;
  result = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::SectionHeader_Rich>(0);
  *((_QWORD *)this + 3) = result;
  return result;
}

SnippetUI::KeyValue_Standard *SnippetUI::Response_Component::_internal_mutable_key_value_standard(SnippetUI::Response_Component *this)
{
  SnippetUI::KeyValue_Standard *result;

  if (*((_DWORD *)this + 9) == 54)
    return (SnippetUI::KeyValue_Standard *)*((_QWORD *)this + 3);
  SnippetUI::Response_Component::clear_value((uint64_t)this);
  *((_DWORD *)this + 9) = 54;
  result = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::KeyValue_Standard>(0);
  *((_QWORD *)this + 3) = result;
  return result;
}

SnippetUI::TertiaryHeader_Standard *SnippetUI::Response_Component::_internal_mutable_tertiary_header_standard(SnippetUI::Response_Component *this)
{
  SnippetUI::TertiaryHeader_Standard *result;

  if (*((_DWORD *)this + 9) == 55)
    return (SnippetUI::TertiaryHeader_Standard *)*((_QWORD *)this + 3);
  SnippetUI::Response_Component::clear_value((uint64_t)this);
  *((_DWORD *)this + 9) = 55;
  result = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TertiaryHeader_Standard>(0);
  *((_QWORD *)this + 3) = result;
  return result;
}

SnippetUI::SimpleItem_RichSearchResult *SnippetUI::Response_Component::_internal_mutable_simple_item_rich_search_result(SnippetUI::Response_Component *this)
{
  SnippetUI::SimpleItem_RichSearchResult *result;

  if (*((_DWORD *)this + 9) == 56)
    return (SnippetUI::SimpleItem_RichSearchResult *)*((_QWORD *)this + 3);
  SnippetUI::Response_Component::clear_value((uint64_t)this);
  *((_DWORD *)this + 9) = 56;
  result = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::SimpleItem_RichSearchResult>(0);
  *((_QWORD *)this + 3) = result;
  return result;
}

SnippetUI::SummaryItem_SwitchV2 *SnippetUI::Response_Component::_internal_mutable_summary_item_switch_v2(SnippetUI::Response_Component *this)
{
  SnippetUI::SummaryItem_SwitchV2 *result;

  if (*((_DWORD *)this + 9) == 61)
    return (SnippetUI::SummaryItem_SwitchV2 *)*((_QWORD *)this + 3);
  SnippetUI::Response_Component::clear_value((uint64_t)this);
  *((_DWORD *)this + 9) = 61;
  result = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::SummaryItem_SwitchV2>(0);
  *((_QWORD *)this + 3) = result;
  return result;
}

const google::protobuf::UnknownFieldSet *SnippetUI::IntentsUI_Standard_Slot::InternalSerializeWithCachedSizesToArray(SnippetUI::IntentsUI_Standard_Slot *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  int v6;
  int v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;
  int64_t v13;
  const void *v14;
  SnippetUI::Response_Component *v15;
  unsigned int v16;
  google::protobuf::UnknownFieldSet *v17;
  unsigned int v18;
  _BYTE *v19;
  _BYTE *v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;

  v6 = *((_DWORD *)this + 6);
  if (v6 >= 1)
  {
    v7 = 0;
    v8 = (char *)this + 16;
    do
    {
      v9 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)v8, v7);
      v10 = v9;
      v11 = *(_DWORD *)(v9 + 8);
      if (*(char *)(v9 + 23) >= 0)
      {
        v12 = *(unsigned __int8 *)(v9 + 23);
      }
      else
      {
        v9 = *(_QWORD *)v9;
        v12 = v11;
      }
      google::protobuf::internal::WireFormatLite::VerifyUtf8String((google::protobuf::internal *)v9, (const char *)v12, 1, (google::protobuf::internal *)"SnippetUI.IntentsUI_Standard.Slot.parameter_key_paths");
      if (*(char *)(v10 + 23) < 0)
      {
        v13 = *(_QWORD *)(v10 + 8);
        if (v13 > 127)
          goto LABEL_16;
      }
      else
      {
        v13 = *(unsigned __int8 *)(v10 + 23);
      }
      if (*(_QWORD *)a3 - (_QWORD)a2 + 14 >= v13)
      {
        *(_BYTE *)a2 = 10;
        *((_BYTE *)a2 + 1) = v13;
        if (*(char *)(v10 + 23) >= 0)
          v14 = (const void *)v10;
        else
          v14 = *(const void **)v10;
        memcpy((char *)a2 + 2, v14, v13);
        a2 = (google::protobuf::UnknownFieldSet *)((char *)a2 + v13 + 2);
        goto LABEL_14;
      }
LABEL_16:
      a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::WriteStringOutline(a3, 1, v10, (char *)a2);
LABEL_14:
      ++v7;
    }
    while (v6 != v7);
  }
  if (this != (SnippetUI::IntentsUI_Standard_Slot *)&SnippetUI::_IntentsUI_Standard_Slot_default_instance_)
  {
    v15 = (SnippetUI::Response_Component *)*((_QWORD *)this + 5);
    if (v15)
    {
      if ((unint64_t)a2 >= *(_QWORD *)a3)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
        v15 = (SnippetUI::Response_Component *)*((_QWORD *)this + 5);
      }
      *(_BYTE *)a2 = 18;
      v16 = *((_DWORD *)v15 + 8);
      if (v16 > 0x7F)
      {
        *((_BYTE *)a2 + 1) = v16 | 0x80;
        v18 = v16 >> 7;
        if (v16 >> 14)
        {
          v19 = (char *)a2 + 2;
          do
          {
            v20 = v19;
            *v19++ = v18 | 0x80;
            v21 = v18 >> 7;
            v22 = v18 >> 14;
            v18 >>= 7;
          }
          while (v22);
          v17 = (google::protobuf::UnknownFieldSet *)(v20 + 2);
          *v19 = v21;
        }
        else
        {
          *((_BYTE *)a2 + 2) = v18;
          v17 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 3);
        }
      }
      else
      {
        *((_BYTE *)a2 + 1) = v16;
        v17 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 2);
      }
      a2 = (google::protobuf::UnknownFieldSet *)SnippetUI::Response_Component::InternalSerializeWithCachedSizesToArray(v15, v17, a3);
    }
  }
  v23 = *((_QWORD *)this + 1);
  if ((v23 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v23 & 0xFFFFFFFFFFFFFFFELL), a2, a3, a4);
  else
    return a2;
}

google::protobuf::internal *SnippetUI::IntentsUI_Standard_Slot::_InternalParse(SnippetUI::IntentsUI_Standard_Slot *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  unsigned int *v5;
  uint64_t *v6;
  google::protobuf::internal::ParseContext *v7;
  google::protobuf::internal *TagFallback;
  char *v9;
  BOOL v11;
  char *v12;
  uint64_t v13;
  SnippetUI::Response_Component *v14;
  char *v15;
  std::string::value_type *v16;
  int *v17;
  uint64_t v18;
  int v19;
  std::string *AlignedAndAddCleanup;
  google::protobuf::internal::ArenaImpl *v21;
  uint64_t v22;
  uint64_t v23;
  google::protobuf::internal *v25;

  v25 = a2;
  v5 = (unsigned int *)((char *)this + 16);
  v6 = (uint64_t *)((char *)this + 8);
  while ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v25, *((_DWORD *)a3 + 23)) & 1) == 0)
  {
    TagFallback = (google::protobuf::internal *)((char *)v25 + 1);
    v9 = (char *)*(unsigned __int8 *)v25;
    if ((*(char *)v25 & 0x80000000) == 0)
      goto LABEL_6;
    v9 = (char *)(v9 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v25 + 2);
LABEL_6:
      v25 = TagFallback;
      goto LABEL_7;
    }
    TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v25, v9);
    v25 = TagFallback;
    if (!TagFallback)
      return TagFallback;
LABEL_7:
    if (v9 >> 3 != 2)
    {
      if (v9 >> 3 != 1 || v9 != 10)
        goto LABEL_12;
      v15 = (char *)TagFallback - 1;
LABEL_24:
      v16 = v15 + 1;
      v25 = (google::protobuf::internal *)(v15 + 1);
      v17 = (int *)*((_QWORD *)this + 4);
      if (v17)
      {
        v18 = *((int *)this + 6);
        v19 = *v17;
        if ((int)v18 < *v17)
        {
          *((_DWORD *)this + 6) = v18 + 1;
          AlignedAndAddCleanup = *(std::string **)&v17[2 * v18 + 2];
          goto LABEL_36;
        }
        if (v19 == *((_DWORD *)this + 7))
        {
LABEL_29:
          google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v5, v19 + 1);
          v17 = (int *)*((_QWORD *)this + 4);
          v19 = *v17;
        }
        *v17 = v19 + 1;
        v21 = *(google::protobuf::internal::ArenaImpl **)v5;
        if (*(_QWORD *)v5)
        {
          if (*((_QWORD *)v21 + 14))
          AlignedAndAddCleanup = (std::string *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(v21, 0x18uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<std::string>);
        }
        else
        {
          AlignedAndAddCleanup = (std::string *)operator new();
        }
        AlignedAndAddCleanup->__r_.__value_.__r.__words[0] = 0;
        AlignedAndAddCleanup->__r_.__value_.__l.__size_ = 0;
        AlignedAndAddCleanup->__r_.__value_.__r.__words[2] = 0;
        v22 = *((_QWORD *)this + 4);
        v23 = *((int *)this + 6);
        *((_DWORD *)this + 6) = v23 + 1;
        *(_QWORD *)(v22 + 8 * v23 + 8) = AlignedAndAddCleanup;
        v16 = (std::string::value_type *)v25;
LABEL_36:
        v15 = google::protobuf::internal::InlineGreedyStringParserUTF8(AlignedAndAddCleanup, v16, (uint64_t)a3, (google::protobuf::internal *)"SnippetUI.IntentsUI_Standard.Slot.parameter_key_paths");
        v25 = (google::protobuf::internal *)v15;
        if (!v15)
          return 0;
        if (*(_QWORD *)a3 <= (unint64_t)v15 || *v15 != 10)
          continue;
        goto LABEL_24;
      }
      v19 = *((_DWORD *)this + 7);
      goto LABEL_29;
    }
    if (v9 == 18)
    {
      v13 = *((_QWORD *)this + 5);
      if (!v13)
      {
        v14 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Response_Component>(0);
        LODWORD(v13) = (_DWORD)v14;
        *((_QWORD *)this + 5) = v14;
        TagFallback = v25;
      }
      v12 = (char *)google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::Response_Component>(a3, v13, TagFallback);
      goto LABEL_21;
    }
LABEL_12:
    if ((_DWORD)v9)
      v11 = (v9 & 7) == 4;
    else
      v11 = 1;
    if (v11)
    {
      *((_DWORD *)a3 + 20) = (_DWORD)v9 - 1;
      return TagFallback;
    }
    v12 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v9, v6, TagFallback, a3, v7);
LABEL_21:
    v25 = (google::protobuf::internal *)v12;
    if (!v12)
      return 0;
  }
  return v25;
}

char *SnippetUI::IntentsUI_Standard_Slot::ByteSizeLong(SnippetUI::IntentsUI_Standard_Slot *this)
{
  int v2;
  int v3;
  const google::protobuf::UnknownFieldSet *v4;
  uint64_t v5;
  uint64_t v6;
  SnippetUI::Response_Component *v7;
  uint64_t v8;

  v2 = *((_DWORD *)this + 6);
  if (v2 < 1)
  {
    v4 = (const google::protobuf::UnknownFieldSet *)*((unsigned int *)this + 6);
  }
  else
  {
    v3 = 0;
    v4 = (const google::protobuf::UnknownFieldSet *)*((unsigned int *)this + 6);
    do
    {
      v5 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 16, v3);
      v6 = *(unsigned __int8 *)(v5 + 23);
      if ((v6 & 0x80u) != 0)
        v6 = *(_QWORD *)(v5 + 8);
      v4 = (const google::protobuf::UnknownFieldSet *)((char *)v4 + v6 + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6));
      ++v3;
    }
    while (v2 != v3);
  }
  if (this != (SnippetUI::IntentsUI_Standard_Slot *)&SnippetUI::_IntentsUI_Standard_Slot_default_instance_)
  {
    v7 = (SnippetUI::Response_Component *)*((_QWORD *)this + 5);
    if (v7)
    {
      v8 = SnippetUI::Response_Component::ByteSizeLong(v7);
      v4 = (const google::protobuf::UnknownFieldSet *)((char *)v4 + v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 1);
    }
  }
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::IntentsUI_Standard_Slot *)((char *)this + 8), v4, (_DWORD *)this + 12);
  *((_DWORD *)this + 12) = (_DWORD)v4;
  return (char *)v4;
}

void SnippetUI::IntentsUI_Standard_Slot::Clear(SnippetUI::IntentsUI_Standard_Slot *this)
{
  uint64_t v2;
  google::protobuf::internal::InternalMetadataWithArena *v3;
  char v4;

  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 16);
  v2 = *((_QWORD *)this + 5);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v4 = *((_BYTE *)this + 8);
  v3 = (SnippetUI::IntentsUI_Standard_Slot *)((char *)this + 8);
  *((_QWORD *)v3 + 4) = 0;
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v3);
}

void SnippetUI::IntentsUI_Standard_Slot::~IntentsUI_Standard_Slot(SnippetUI::IntentsUI_Standard_Slot *this)
{
  SnippetUI::IntentsUI_Standard_Slot::~IntentsUI_Standard_Slot(this);
  JUMPOUT(0x1C3B8D890);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_1E7936B70;
  if (this != (SnippetUI::IntentsUI_Standard_Slot *)&SnippetUI::_IntentsUI_Standard_Slot_default_instance_)
  {
    v2 = *((_QWORD *)this + 5);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  google::protobuf::RepeatedPtrField<std::string>::~RepeatedPtrField((char *)this + 16);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

SnippetUI::IntentsUI_Standard_Slot *SnippetUI::IntentsUI_Standard_Slot::New(SnippetUI::IntentsUI_Standard_Slot *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::IntentsUI_Standard_Slot>(0);
}

SnippetUI::IntentsUI_Standard_Slot *SnippetUI::IntentsUI_Standard_Slot::New(SnippetUI::IntentsUI_Standard_Slot *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::IntentsUI_Standard_Slot>(a2);
}

uint64_t SnippetUI::IntentsUI_Standard_Slot::IsInitialized(SnippetUI::IntentsUI_Standard_Slot *this)
{
  return 1;
}

uint64_t SnippetUI::IntentsUI_Standard_Slot::GetCachedSize(SnippetUI::IntentsUI_Standard_Slot *this)
{
  return *((unsigned int *)this + 12);
}

void SnippetUI::IntentsUI_Standard_Slot::CopyFrom(int **this, int **a2)
{
  if (a2 != this)
  {
    SnippetUI::IntentsUI_Standard_Slot::Clear((SnippetUI::IntentsUI_Standard_Slot *)this);
    SnippetUI::IntentsUI_Standard_Slot::MergeFrom(this, a2);
  }
}

{
  if (a2 != this)
  {
    SnippetUI::IntentsUI_Standard_Slot::Clear((SnippetUI::IntentsUI_Standard_Slot *)this);
    SnippetUI::IntentsUI_Standard_Slot::MergeFrom(this, a2);
  }
}

void SnippetUI::IntentsUI_Standard_Slot::MergeFrom(int **this, int **lpsrc)
{
  std::string *v4;
  int **v5;
  google::protobuf::Message *v6;
  char v7;
  std::string v8[2];

  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Response.pb.cc", 5568);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5)
    SnippetUI::IntentsUI_Standard_Slot::MergeFrom(this, v5);
  else
    google::protobuf::internal::ReflectionOps::Merge((google::protobuf::internal::ReflectionOps *)lpsrc, (const google::protobuf::Message *)this, v6);
}

void sub_1BFBF5028(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::IntentsUI_Standard_Slot::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 48) = a2;
  return this;
}

uint64_t SnippetUI::IntentsUI_Standard_Slot::GetMetadata(SnippetUI::IntentsUI_Standard_Slot *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_Response_2eproto);
  return qword_1EF583418;
}

void *SnippetUI::IntentsUI_Standard_Slot::default_instance(SnippetUI::IntentsUI_Standard_Slot *this)
{
  if (atomic_load(scc_info_IntentsUI_Standard_Response_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_IntentsUI_Standard_Response_2eproto);
  return &SnippetUI::_IntentsUI_Standard_Slot_default_instance_;
}

void SnippetUI::Response_Component::~Response_Component(SnippetUI::Response_Component *this)
{
  SnippetUI::Response_Component::~Response_Component(this);
  JUMPOUT(0x1C3B8D890);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_1E79369F0;
  if (this != (SnippetUI::Response_Component *)&SnippetUI::_Response_Component_default_instance_)
  {
    v2 = *((_QWORD *)this + 2);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  if (*((_DWORD *)this + 9))
    SnippetUI::Response_Component::clear_value((uint64_t)this);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

SnippetUI::Response_Component *SnippetUI::Response_Component::New(SnippetUI::Response_Component *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Response_Component>(0);
}

SnippetUI::Response_Component *SnippetUI::Response_Component::New(SnippetUI::Response_Component *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Response_Component>(a2);
}

uint64_t SnippetUI::Response_Component::IsInitialized(SnippetUI::Response_Component *this)
{
  return 1;
}

uint64_t SnippetUI::Response_Component::GetCachedSize(SnippetUI::Response_Component *this)
{
  return *((unsigned int *)this + 8);
}

void SnippetUI::Response_Component::CopyFrom(SnippetUI::Response_Component *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    SnippetUI::Response_Component::Clear(this);
    SnippetUI::Response_Component::MergeFrom(this, a2);
  }
}

void SnippetUI::Response_Component::MergeFrom(SnippetUI::Response_Component *this, const google::protobuf::Message *lpsrc)
{
  std::string *v4;
  const SnippetUI::Response_Component *v5;
  google::protobuf::Message *v6;
  char v7;
  std::string v8[2];

  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Response.pb.cc", 4740);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5)
    SnippetUI::Response_Component::MergeFrom(this, v5);
  else
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
}

void sub_1BFBF5230(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::Response_Component::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 32) = a2;
  return this;
}

uint64_t SnippetUI::Response_Component::GetMetadata(SnippetUI::Response_Component *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_Response_2eproto);
  return qword_1EF5833F8;
}

void *SnippetUI::Response_Component::default_instance(SnippetUI::Response_Component *this)
{
  if (atomic_load(scc_info_IntentsUI_Standard_Response_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_IntentsUI_Standard_Response_2eproto);
  return &SnippetUI::_Response_Component_default_instance_;
}

uint64_t SnippetUI::Response_LevelOfDetail_descriptor(SnippetUI *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_Response_2eproto);
  return file_level_enum_descriptors_Response_2eproto;
}

BOOL SnippetUI::Response_LevelOfDetail_IsValid(SnippetUI *this)
{
  return this < 2;
}

SnippetUI::Response_Section *SnippetUI::Response_Section::Response_Section(SnippetUI::Response_Section *this, const SnippetUI::Response_Section *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  uint64_t v5;

  *(_QWORD *)this = &off_1E7936870;
  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (SnippetUI::Response_Section *)((char *)this + 8);
  *(_OWORD *)((char *)this + 24) = 0u;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<SnippetUI::Response_Component>::TypeHandler>((int **)this + 2, (uint64_t)a2 + 16);
  google::protobuf::RepeatedField<int>::RepeatedField((uint64_t)this + 40, (int *)a2 + 10);
  google::protobuf::RepeatedField<int>::RepeatedField((uint64_t)this + 64, (int *)a2 + 16);
  *((_DWORD *)this + 22) = 0;
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom(v4, (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  *((_BYTE *)this + 84) = *((_BYTE *)a2 + 84);
  return this;
}

void sub_1BFBF53F4(_Unwind_Exception *a1)
{
  uint64_t *v1;
  google::protobuf::internal::RepeatedPtrFieldBase *v2;
  uint64_t v3;
  uint64_t v4;

  google::protobuf::RepeatedField<int>::~RepeatedField(v4);
  google::protobuf::RepeatedField<int>::~RepeatedField(v3);
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::Response_Section::CopyFrom(SnippetUI::Response_Section *this, const SnippetUI::Response_Section *a2)
{
  if (a2 != this)
  {
    SnippetUI::Response_Section::Clear(this);
    SnippetUI::Response_Section::MergeFrom(this, a2);
  }
}

void SnippetUI::Response_Section::InternalSwap(SnippetUI::Response_Section *this, SnippetUI::Response_Section *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  uint64_t v5;
  google::protobuf::UnknownFieldSet *v6;
  char v7;
  google::protobuf::UnknownFieldSet *v8;

  v4 = (SnippetUI::Response_Section *)((char *)this + 8);
  v5 = *((_QWORD *)a2 + 1);
  if ((*((_BYTE *)this + 8) & 1) != 0)
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v6 = v8;
      goto LABEL_6;
    }
  }
  else if ((v5 & 1) == 0)
  {
    goto LABEL_7;
  }
  v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
  google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
LABEL_7:
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((SnippetUI::Response_Section *)((char *)this + 16), (SnippetUI::Response_Section *)((char *)a2 + 16));
  google::protobuf::RepeatedField<int>::InternalSwap((uint64_t)this + 40, (uint64_t)a2 + 40);
  google::protobuf::RepeatedField<int>::InternalSwap((uint64_t)this + 64, (uint64_t)a2 + 64);
  v7 = *((_BYTE *)this + 84);
  *((_BYTE *)this + 84) = *((_BYTE *)a2 + 84);
  *((_BYTE *)a2 + 84) = v7;
}

SnippetUI::Response_Group *SnippetUI::Response_Group::Response_Group(SnippetUI::Response_Group *this, const SnippetUI::Response_Group *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)this = &off_1E7936930;
  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (SnippetUI::Response_Group *)((char *)this + 8);
  *(_OWORD *)((char *)this + 24) = 0u;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<SnippetUI::Response_Component>::TypeHandler>((int **)this + 2, (uint64_t)a2 + 16);
  *((_DWORD *)this + 12) = 0;
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom(v4, (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  *((_QWORD *)this + 5) = &google::protobuf::internal::fixed_address_empty_string;
  v6 = *((_QWORD *)a2 + 5);
  if (*(char *)(v6 + 23) < 0)
    v7 = *(_QWORD *)(v6 + 8);
  else
    v7 = *(unsigned __int8 *)(v6 + 23);
  if ((uint64_t *)v6 != &google::protobuf::internal::fixed_address_empty_string && v7 != 0)
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 5, v6);
  return this;
}

void sub_1BFBF55C0(_Unwind_Exception *a1)
{
  uint64_t *v1;
  google::protobuf::internal::RepeatedPtrFieldBase *v2;

  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

__n128 SnippetUI::Response_Group::InternalSwap(SnippetUI::Response_Group *this, SnippetUI::Response_Group *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  uint64_t v5;
  google::protobuf::UnknownFieldSet *v6;
  __n128 result;
  std::string **v8;
  std::string *v9;
  uint64_t *v10;
  std::string **v11;
  std::string *v12;
  std::string::size_type v13;
  std::string::size_type v14;
  google::protobuf::UnknownFieldSet *v15;

  v4 = (SnippetUI::Response_Group *)((char *)this + 8);
  v5 = *((_QWORD *)a2 + 1);
  if ((*((_BYTE *)this + 8) & 1) != 0)
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v6 = v15;
      goto LABEL_6;
    }
LABEL_5:
    v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
    google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
    goto LABEL_7;
  }
  if ((v5 & 1) != 0)
    goto LABEL_5;
LABEL_7:
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((SnippetUI::Response_Group *)((char *)this + 16), (SnippetUI::Response_Group *)((char *)a2 + 16));
  v10 = (uint64_t *)*((_QWORD *)this + 5);
  v8 = (std::string **)((char *)this + 40);
  v9 = (std::string *)v10;
  v11 = (std::string **)((char *)a2 + 40);
  if (v10 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v11 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      return result;
    google::protobuf::internal::ArenaStringPtr::CreateInstance(v8, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v9 = *v8;
  }
  v12 = *v11;
  if (*v11 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance(v11, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v12 = *v11;
  }
  v13 = v9->__r_.__value_.__r.__words[2];
  result = *(__n128 *)&v9->__r_.__value_.__l.__data_;
  v14 = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v9->__r_.__value_.__r.__words[2] = v14;
  *(__n128 *)&v12->__r_.__value_.__l.__data_ = result;
  v12->__r_.__value_.__r.__words[2] = v13;
  return result;
}

uint64_t SnippetUI::Response_Component::_Internal::custom_canvas(SnippetUI::Response_Component::_Internal *this, const SnippetUI::Response_Component *a2)
{
  return *((_QWORD *)this + 3);
}

uint64_t SnippetUI::Response_Component::_Internal::fact_item_standard(SnippetUI::Response_Component::_Internal *this, const SnippetUI::Response_Component *a2)
{
  return *((_QWORD *)this + 3);
}

uint64_t SnippetUI::Response_Component::_Internal::fact_item_short_number(SnippetUI::Response_Component::_Internal *this, const SnippetUI::Response_Component *a2)
{
  return *((_QWORD *)this + 3);
}

uint64_t SnippetUI::Response_Component::_Internal::fact_item_hero_number(SnippetUI::Response_Component::_Internal *this, const SnippetUI::Response_Component *a2)
{
  return *((_QWORD *)this + 3);
}

uint64_t SnippetUI::Response_Component::_Internal::summary_item_standard(SnippetUI::Response_Component::_Internal *this, const SnippetUI::Response_Component *a2)
{
  return *((_QWORD *)this + 3);
}

uint64_t SnippetUI::Response_Component::_Internal::summary_item_short_number(SnippetUI::Response_Component::_Internal *this, const SnippetUI::Response_Component *a2)
{
  return *((_QWORD *)this + 3);
}

uint64_t SnippetUI::Response_Component::_Internal::summary_item_text(SnippetUI::Response_Component::_Internal *this, const SnippetUI::Response_Component *a2)
{
  return *((_QWORD *)this + 3);
}

uint64_t SnippetUI::Response_Component::_Internal::summary_item_large_text(SnippetUI::Response_Component::_Internal *this, const SnippetUI::Response_Component *a2)
{
  return *((_QWORD *)this + 3);
}

uint64_t SnippetUI::Response_Component::_Internal::summary_item_detailed_text(SnippetUI::Response_Component::_Internal *this, const SnippetUI::Response_Component *a2)
{
  return *((_QWORD *)this + 3);
}

uint64_t SnippetUI::Response_Component::_Internal::simple_item_standard(SnippetUI::Response_Component::_Internal *this, const SnippetUI::Response_Component *a2)
{
  return *((_QWORD *)this + 3);
}

uint64_t SnippetUI::Response_Component::_Internal::simple_item_rich(SnippetUI::Response_Component::_Internal *this, const SnippetUI::Response_Component *a2)
{
  return *((_QWORD *)this + 3);
}

uint64_t SnippetUI::Response_Component::_Internal::simple_item_visual(SnippetUI::Response_Component::_Internal *this, const SnippetUI::Response_Component *a2)
{
  return *((_QWORD *)this + 3);
}

uint64_t SnippetUI::Response_Component::_Internal::primary_header_standard(SnippetUI::Response_Component::_Internal *this, const SnippetUI::Response_Component *a2)
{
  return *((_QWORD *)this + 3);
}

uint64_t SnippetUI::Response_Component::_Internal::primary_header_marquee(SnippetUI::Response_Component::_Internal *this, const SnippetUI::Response_Component *a2)
{
  return *((_QWORD *)this + 3);
}

uint64_t SnippetUI::Response_Component::_Internal::primary_header_rich(SnippetUI::Response_Component::_Internal *this, const SnippetUI::Response_Component *a2)
{
  return *((_QWORD *)this + 3);
}

uint64_t SnippetUI::Response_Component::_Internal::secondary_header_standard(SnippetUI::Response_Component::_Internal *this, const SnippetUI::Response_Component *a2)
{
  return *((_QWORD *)this + 3);
}

uint64_t SnippetUI::Response_Component::_Internal::button(SnippetUI::Response_Component::_Internal *this, const SnippetUI::Response_Component *a2)
{
  return *((_QWORD *)this + 3);
}

uint64_t SnippetUI::Response_Component::_Internal::binary_button(SnippetUI::Response_Component::_Internal *this, const SnippetUI::Response_Component *a2)
{
  return *((_QWORD *)this + 3);
}

uint64_t SnippetUI::Response_Component::_Internal::status_indicator_success(SnippetUI::Response_Component::_Internal *this, const SnippetUI::Response_Component *a2)
{
  return *((_QWORD *)this + 3);
}

uint64_t SnippetUI::Response_Component::_Internal::status_indicator_error(SnippetUI::Response_Component::_Internal *this, const SnippetUI::Response_Component *a2)
{
  return *((_QWORD *)this + 3);
}

uint64_t SnippetUI::Response_Component::_Internal::status_indicator_in_progress(SnippetUI::Response_Component::_Internal *this, const SnippetUI::Response_Component *a2)
{
  return *((_QWORD *)this + 3);
}

uint64_t SnippetUI::Response_Component::_Internal::status_indicator_cancelled(SnippetUI::Response_Component::_Internal *this, const SnippetUI::Response_Component *a2)
{
  return *((_QWORD *)this + 3);
}

uint64_t SnippetUI::Response_Component::_Internal::text_input(SnippetUI::Response_Component::_Internal *this, const SnippetUI::Response_Component *a2)
{
  return *((_QWORD *)this + 3);
}

uint64_t SnippetUI::Response_Component::_Internal::control_switch(SnippetUI::Response_Component::_Internal *this, const SnippetUI::Response_Component *a2)
{
  return *((_QWORD *)this + 3);
}

uint64_t SnippetUI::Response_Component::_Internal::control_slider(SnippetUI::Response_Component::_Internal *this, const SnippetUI::Response_Component *a2)
{
  return *((_QWORD *)this + 3);
}

uint64_t SnippetUI::Response_Component::_Internal::control_player_button(SnippetUI::Response_Component::_Internal *this, const SnippetUI::Response_Component *a2)
{
  return *((_QWORD *)this + 3);
}

uint64_t SnippetUI::Response_Component::_Internal::reference_standard(SnippetUI::Response_Component::_Internal *this, const SnippetUI::Response_Component *a2)
{
  return *((_QWORD *)this + 3);
}

uint64_t SnippetUI::Response_Component::_Internal::reference_logo(SnippetUI::Response_Component::_Internal *this, const SnippetUI::Response_Component *a2)
{
  return *((_QWORD *)this + 3);
}

uint64_t SnippetUI::Response_Component::_Internal::reference_rich(SnippetUI::Response_Component::_Internal *this, const SnippetUI::Response_Component *a2)
{
  return *((_QWORD *)this + 3);
}

uint64_t SnippetUI::Response_Component::_Internal::reference_button(SnippetUI::Response_Component::_Internal *this, const SnippetUI::Response_Component *a2)
{
  return *((_QWORD *)this + 3);
}

uint64_t SnippetUI::Response_Component::_Internal::summary_item_pair(SnippetUI::Response_Component::_Internal *this, const SnippetUI::Response_Component *a2)
{
  return *((_QWORD *)this + 3);
}

uint64_t SnippetUI::Response_Component::_Internal::summary_item_pair_v2(SnippetUI::Response_Component::_Internal *this, const SnippetUI::Response_Component *a2)
{
  return *((_QWORD *)this + 3);
}

uint64_t SnippetUI::Response_Component::_Internal::summary_item_pair_number(SnippetUI::Response_Component::_Internal *this, const SnippetUI::Response_Component *a2)
{
  return *((_QWORD *)this + 3);
}

uint64_t SnippetUI::Response_Component::_Internal::summary_item_pair_number_v2(SnippetUI::Response_Component::_Internal *this, const SnippetUI::Response_Component *a2)
{
  return *((_QWORD *)this + 3);
}

uint64_t SnippetUI::Response_Component::_Internal::summary_item_button(SnippetUI::Response_Component::_Internal *this, const SnippetUI::Response_Component *a2)
{
  return *((_QWORD *)this + 3);
}

uint64_t SnippetUI::Response_Component::_Internal::fact_item_button(SnippetUI::Response_Component::_Internal *this, const SnippetUI::Response_Component *a2)
{
  return *((_QWORD *)this + 3);
}

uint64_t SnippetUI::Response_Component::_Internal::table(SnippetUI::Response_Component::_Internal *this, const SnippetUI::Response_Component *a2)
{
  return *((_QWORD *)this + 3);
}

uint64_t SnippetUI::Response_Component::_Internal::reference_footnote(SnippetUI::Response_Component::_Internal *this, const SnippetUI::Response_Component *a2)
{
  return *((_QWORD *)this + 3);
}

uint64_t SnippetUI::Response_Component::_Internal::long_item_text(SnippetUI::Response_Component::_Internal *this, const SnippetUI::Response_Component *a2)
{
  return *((_QWORD *)this + 3);
}

uint64_t SnippetUI::Response_Component::_Internal::visualization_chart(SnippetUI::Response_Component::_Internal *this, const SnippetUI::Response_Component *a2)
{
  return *((_QWORD *)this + 3);
}

uint64_t SnippetUI::Response_Component::_Internal::summary_item_player(SnippetUI::Response_Component::_Internal *this, const SnippetUI::Response_Component *a2)
{
  return *((_QWORD *)this + 3);
}

uint64_t SnippetUI::Response_Component::_Internal::simple_item_player(SnippetUI::Response_Component::_Internal *this, const SnippetUI::Response_Component *a2)
{
  return *((_QWORD *)this + 3);
}

uint64_t SnippetUI::Response_Component::_Internal::simple_item_reverse_rich(SnippetUI::Response_Component::_Internal *this, const SnippetUI::Response_Component *a2)
{
  return *((_QWORD *)this + 3);
}

uint64_t SnippetUI::Response_Component::_Internal::secondary_header_emphasized(SnippetUI::Response_Component::_Internal *this, const SnippetUI::Response_Component *a2)
{
  return *((_QWORD *)this + 3);
}

uint64_t SnippetUI::Response_Component::_Internal::summary_item_switch(SnippetUI::Response_Component::_Internal *this, const SnippetUI::Response_Component *a2)
{
  return *((_QWORD *)this + 3);
}

uint64_t SnippetUI::Response_Component::_Internal::system_text_clarification_title(SnippetUI::Response_Component::_Internal *this, const SnippetUI::Response_Component *a2)
{
  return *((_QWORD *)this + 3);
}

uint64_t SnippetUI::Response_Component::_Internal::visualization_image(SnippetUI::Response_Component::_Internal *this, const SnippetUI::Response_Component *a2)
{
  return *((_QWORD *)this + 3);
}

uint64_t SnippetUI::Response_Component::_Internal::visualization_map(SnippetUI::Response_Component::_Internal *this, const SnippetUI::Response_Component *a2)
{
  return *((_QWORD *)this + 3);
}

uint64_t SnippetUI::Response_Component::_Internal::button_container(SnippetUI::Response_Component::_Internal *this, const SnippetUI::Response_Component *a2)
{
  return *((_QWORD *)this + 3);
}

uint64_t SnippetUI::Response_Component::_Internal::intentsui_standard(SnippetUI::Response_Component::_Internal *this, const SnippetUI::Response_Component *a2)
{
  return *((_QWORD *)this + 3);
}

uint64_t SnippetUI::Response_Component::_Internal::sash_standard(SnippetUI::Response_Component::_Internal *this, const SnippetUI::Response_Component *a2)
{
  return *((_QWORD *)this + 3);
}

uint64_t SnippetUI::Response_Component::_Internal::hero_header(SnippetUI::Response_Component::_Internal *this, const SnippetUI::Response_Component *a2)
{
  return *((_QWORD *)this + 3);
}

uint64_t SnippetUI::Response_Component::_Internal::horizontal_list_standard(SnippetUI::Response_Component::_Internal *this, const SnippetUI::Response_Component *a2)
{
  return *((_QWORD *)this + 3);
}

uint64_t SnippetUI::Response_Component::_Internal::section_header_standard(SnippetUI::Response_Component::_Internal *this, const SnippetUI::Response_Component *a2)
{
  return *((_QWORD *)this + 3);
}

uint64_t SnippetUI::Response_Component::_Internal::section_header_rich(SnippetUI::Response_Component::_Internal *this, const SnippetUI::Response_Component *a2)
{
  return *((_QWORD *)this + 3);
}

uint64_t SnippetUI::Response_Component::_Internal::key_value_standard(SnippetUI::Response_Component::_Internal *this, const SnippetUI::Response_Component *a2)
{
  return *((_QWORD *)this + 3);
}

uint64_t SnippetUI::Response_Component::_Internal::tertiary_header_standard(SnippetUI::Response_Component::_Internal *this, const SnippetUI::Response_Component *a2)
{
  return *((_QWORD *)this + 3);
}

uint64_t SnippetUI::Response_Component::_Internal::simple_item_rich_search_result(SnippetUI::Response_Component::_Internal *this, const SnippetUI::Response_Component *a2)
{
  return *((_QWORD *)this + 3);
}

uint64_t SnippetUI::Response_Component::_Internal::summary_item_switch_v2(SnippetUI::Response_Component::_Internal *this, const SnippetUI::Response_Component *a2)
{
  return *((_QWORD *)this + 3);
}

uint64_t SnippetUI::Response_Component::_Internal::separators(SnippetUI::Response_Component::_Internal *this, const SnippetUI::Response_Component *a2)
{
  return *((_QWORD *)this + 2);
}

uint64_t SnippetUI::Response_Component::set_allocated_custom_canvas(SnippetUI::Response_Component *this, SnippetUI::CustomCanvas *a2)
{
  uint64_t result;

  result = SnippetUI::Response_Component::clear_value((uint64_t)this);
  if (a2)
  {
    *((_DWORD *)this + 9) = 1;
    *((_QWORD *)this + 3) = a2;
  }
  return result;
}

uint64_t SnippetUI::Response_Component::clear_custom_canvas(uint64_t this)
{
  uint64_t v1;

  if (*(_DWORD *)(this + 36) == 1)
  {
    v1 = this;
    this = *(_QWORD *)(this + 24);
    if (this)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
    *(_DWORD *)(v1 + 36) = 0;
  }
  return this;
}

uint64_t SnippetUI::Response_Component::set_allocated_fact_item_standard(SnippetUI::Response_Component *this, SnippetUI::FactItem_Standard *a2)
{
  uint64_t result;

  result = SnippetUI::Response_Component::clear_value((uint64_t)this);
  if (a2)
  {
    *((_DWORD *)this + 9) = 2;
    *((_QWORD *)this + 3) = a2;
  }
  return result;
}

uint64_t SnippetUI::Response_Component::clear_fact_item_standard(uint64_t this)
{
  uint64_t v1;

  if (*(_DWORD *)(this + 36) == 2)
  {
    v1 = this;
    this = *(_QWORD *)(this + 24);
    if (this)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
    *(_DWORD *)(v1 + 36) = 0;
  }
  return this;
}

uint64_t SnippetUI::Response_Component::set_allocated_fact_item_short_number(SnippetUI::Response_Component *this, SnippetUI::FactItem_ShortNumber *a2)
{
  uint64_t result;

  result = SnippetUI::Response_Component::clear_value((uint64_t)this);
  if (a2)
  {
    *((_DWORD *)this + 9) = 3;
    *((_QWORD *)this + 3) = a2;
  }
  return result;
}

uint64_t SnippetUI::Response_Component::clear_fact_item_short_number(uint64_t this)
{
  uint64_t v1;

  if (*(_DWORD *)(this + 36) == 3)
  {
    v1 = this;
    this = *(_QWORD *)(this + 24);
    if (this)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
    *(_DWORD *)(v1 + 36) = 0;
  }
  return this;
}

uint64_t SnippetUI::Response_Component::set_allocated_fact_item_hero_number(SnippetUI::Response_Component *this, SnippetUI::FactItem_HeroNumber *a2)
{
  uint64_t result;

  result = SnippetUI::Response_Component::clear_value((uint64_t)this);
  if (a2)
  {
    *((_DWORD *)this + 9) = 4;
    *((_QWORD *)this + 3) = a2;
  }
  return result;
}

uint64_t SnippetUI::Response_Component::clear_fact_item_hero_number(uint64_t this)
{
  uint64_t v1;

  if (*(_DWORD *)(this + 36) == 4)
  {
    v1 = this;
    this = *(_QWORD *)(this + 24);
    if (this)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
    *(_DWORD *)(v1 + 36) = 0;
  }
  return this;
}

uint64_t SnippetUI::Response_Component::set_allocated_summary_item_standard(SnippetUI::Response_Component *this, SnippetUI::SummaryItem_Standard *a2)
{
  uint64_t result;

  result = SnippetUI::Response_Component::clear_value((uint64_t)this);
  if (a2)
  {
    *((_DWORD *)this + 9) = 5;
    *((_QWORD *)this + 3) = a2;
  }
  return result;
}

uint64_t SnippetUI::Response_Component::clear_summary_item_standard(uint64_t this)
{
  uint64_t v1;

  if (*(_DWORD *)(this + 36) == 5)
  {
    v1 = this;
    this = *(_QWORD *)(this + 24);
    if (this)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
    *(_DWORD *)(v1 + 36) = 0;
  }
  return this;
}

uint64_t SnippetUI::Response_Component::set_allocated_summary_item_short_number(SnippetUI::Response_Component *this, SnippetUI::SummaryItem_ShortNumber *a2)
{
  uint64_t result;

  result = SnippetUI::Response_Component::clear_value((uint64_t)this);
  if (a2)
  {
    *((_DWORD *)this + 9) = 6;
    *((_QWORD *)this + 3) = a2;
  }
  return result;
}

uint64_t SnippetUI::Response_Component::clear_summary_item_short_number(uint64_t this)
{
  uint64_t v1;

  if (*(_DWORD *)(this + 36) == 6)
  {
    v1 = this;
    this = *(_QWORD *)(this + 24);
    if (this)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
    *(_DWORD *)(v1 + 36) = 0;
  }
  return this;
}

uint64_t SnippetUI::Response_Component::set_allocated_summary_item_text(SnippetUI::Response_Component *this, SnippetUI::SummaryItem_Text *a2)
{
  uint64_t result;

  result = SnippetUI::Response_Component::clear_value((uint64_t)this);
  if (a2)
  {
    *((_DWORD *)this + 9) = 7;
    *((_QWORD *)this + 3) = a2;
  }
  return result;
}

uint64_t SnippetUI::Response_Component::clear_summary_item_text(uint64_t this)
{
  uint64_t v1;

  if (*(_DWORD *)(this + 36) == 7)
  {
    v1 = this;
    this = *(_QWORD *)(this + 24);
    if (this)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
    *(_DWORD *)(v1 + 36) = 0;
  }
  return this;
}

uint64_t SnippetUI::Response_Component::set_allocated_summary_item_large_text(SnippetUI::Response_Component *this, SnippetUI::SummaryItem_LargeText *a2)
{
  uint64_t result;

  result = SnippetUI::Response_Component::clear_value((uint64_t)this);
  if (a2)
  {
    *((_DWORD *)this + 9) = 8;
    *((_QWORD *)this + 3) = a2;
  }
  return result;
}

uint64_t SnippetUI::Response_Component::clear_summary_item_large_text(uint64_t this)
{
  uint64_t v1;

  if (*(_DWORD *)(this + 36) == 8)
  {
    v1 = this;
    this = *(_QWORD *)(this + 24);
    if (this)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
    *(_DWORD *)(v1 + 36) = 0;
  }
  return this;
}

uint64_t SnippetUI::Response_Component::set_allocated_summary_item_detailed_text(SnippetUI::Response_Component *this, SnippetUI::SummaryItem_DetailedText *a2)
{
  uint64_t result;

  result = SnippetUI::Response_Component::clear_value((uint64_t)this);
  if (a2)
  {
    *((_DWORD *)this + 9) = 9;
    *((_QWORD *)this + 3) = a2;
  }
  return result;
}

uint64_t SnippetUI::Response_Component::clear_summary_item_detailed_text(uint64_t this)
{
  uint64_t v1;

  if (*(_DWORD *)(this + 36) == 9)
  {
    v1 = this;
    this = *(_QWORD *)(this + 24);
    if (this)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
    *(_DWORD *)(v1 + 36) = 0;
  }
  return this;
}

uint64_t SnippetUI::Response_Component::set_allocated_simple_item_standard(SnippetUI::Response_Component *this, SnippetUI::SimpleItem_Standard *a2)
{
  uint64_t result;

  result = SnippetUI::Response_Component::clear_value((uint64_t)this);
  if (a2)
  {
    *((_DWORD *)this + 9) = 10;
    *((_QWORD *)this + 3) = a2;
  }
  return result;
}

uint64_t SnippetUI::Response_Component::clear_simple_item_standard(uint64_t this)
{
  uint64_t v1;

  if (*(_DWORD *)(this + 36) == 10)
  {
    v1 = this;
    this = *(_QWORD *)(this + 24);
    if (this)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
    *(_DWORD *)(v1 + 36) = 0;
  }
  return this;
}

uint64_t SnippetUI::Response_Component::set_allocated_simple_item_rich(SnippetUI::Response_Component *this, SnippetUI::SimpleItem_Rich *a2)
{
  uint64_t result;

  result = SnippetUI::Response_Component::clear_value((uint64_t)this);
  if (a2)
  {
    *((_DWORD *)this + 9) = 11;
    *((_QWORD *)this + 3) = a2;
  }
  return result;
}

uint64_t SnippetUI::Response_Component::clear_simple_item_rich(uint64_t this)
{
  uint64_t v1;

  if (*(_DWORD *)(this + 36) == 11)
  {
    v1 = this;
    this = *(_QWORD *)(this + 24);
    if (this)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
    *(_DWORD *)(v1 + 36) = 0;
  }
  return this;
}

uint64_t SnippetUI::Response_Component::set_allocated_simple_item_visual(SnippetUI::Response_Component *this, SnippetUI::SimpleItem_Visual *a2)
{
  uint64_t result;

  result = SnippetUI::Response_Component::clear_value((uint64_t)this);
  if (a2)
  {
    *((_DWORD *)this + 9) = 12;
    *((_QWORD *)this + 3) = a2;
  }
  return result;
}

uint64_t SnippetUI::Response_Component::clear_simple_item_visual(uint64_t this)
{
  uint64_t v1;

  if (*(_DWORD *)(this + 36) == 12)
  {
    v1 = this;
    this = *(_QWORD *)(this + 24);
    if (this)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
    *(_DWORD *)(v1 + 36) = 0;
  }
  return this;
}

uint64_t SnippetUI::Response_Component::set_allocated_primary_header_standard(SnippetUI::Response_Component *this, SnippetUI::PrimaryHeader_Standard *a2)
{
  uint64_t result;

  result = SnippetUI::Response_Component::clear_value((uint64_t)this);
  if (a2)
  {
    *((_DWORD *)this + 9) = 13;
    *((_QWORD *)this + 3) = a2;
  }
  return result;
}

uint64_t SnippetUI::Response_Component::clear_primary_header_standard(uint64_t this)
{
  uint64_t v1;

  if (*(_DWORD *)(this + 36) == 13)
  {
    v1 = this;
    this = *(_QWORD *)(this + 24);
    if (this)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
    *(_DWORD *)(v1 + 36) = 0;
  }
  return this;
}

uint64_t SnippetUI::Response_Component::set_allocated_primary_header_marquee(SnippetUI::Response_Component *this, SnippetUI::PrimaryHeader_Marquee *a2)
{
  uint64_t result;

  result = SnippetUI::Response_Component::clear_value((uint64_t)this);
  if (a2)
  {
    *((_DWORD *)this + 9) = 14;
    *((_QWORD *)this + 3) = a2;
  }
  return result;
}

uint64_t SnippetUI::Response_Component::clear_primary_header_marquee(uint64_t this)
{
  uint64_t v1;

  if (*(_DWORD *)(this + 36) == 14)
  {
    v1 = this;
    this = *(_QWORD *)(this + 24);
    if (this)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
    *(_DWORD *)(v1 + 36) = 0;
  }
  return this;
}

uint64_t SnippetUI::Response_Component::set_allocated_primary_header_rich(SnippetUI::Response_Component *this, SnippetUI::PrimaryHeader_Rich *a2)
{
  uint64_t result;

  result = SnippetUI::Response_Component::clear_value((uint64_t)this);
  if (a2)
  {
    *((_DWORD *)this + 9) = 15;
    *((_QWORD *)this + 3) = a2;
  }
  return result;
}

uint64_t SnippetUI::Response_Component::clear_primary_header_rich(uint64_t this)
{
  uint64_t v1;

  if (*(_DWORD *)(this + 36) == 15)
  {
    v1 = this;
    this = *(_QWORD *)(this + 24);
    if (this)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
    *(_DWORD *)(v1 + 36) = 0;
  }
  return this;
}

uint64_t SnippetUI::Response_Component::set_allocated_secondary_header_standard(SnippetUI::Response_Component *this, SnippetUI::SecondaryHeader_Standard *a2)
{
  uint64_t result;

  result = SnippetUI::Response_Component::clear_value((uint64_t)this);
  if (a2)
  {
    *((_DWORD *)this + 9) = 16;
    *((_QWORD *)this + 3) = a2;
  }
  return result;
}

uint64_t SnippetUI::Response_Component::clear_secondary_header_standard(uint64_t this)
{
  uint64_t v1;

  if (*(_DWORD *)(this + 36) == 16)
  {
    v1 = this;
    this = *(_QWORD *)(this + 24);
    if (this)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
    *(_DWORD *)(v1 + 36) = 0;
  }
  return this;
}

uint64_t SnippetUI::Response_Component::set_allocated_button(SnippetUI::Response_Component *this, SnippetUI::Button *a2)
{
  uint64_t result;

  result = SnippetUI::Response_Component::clear_value((uint64_t)this);
  if (a2)
  {
    *((_DWORD *)this + 9) = 17;
    *((_QWORD *)this + 3) = a2;
  }
  return result;
}

uint64_t SnippetUI::Response_Component::clear_button(uint64_t this)
{
  uint64_t v1;

  if (*(_DWORD *)(this + 36) == 17)
  {
    v1 = this;
    this = *(_QWORD *)(this + 24);
    if (this)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
    *(_DWORD *)(v1 + 36) = 0;
  }
  return this;
}

uint64_t SnippetUI::Response_Component::set_allocated_binary_button(SnippetUI::Response_Component *this, SnippetUI::BinaryButton *a2)
{
  uint64_t result;

  result = SnippetUI::Response_Component::clear_value((uint64_t)this);
  if (a2)
  {
    *((_DWORD *)this + 9) = 18;
    *((_QWORD *)this + 3) = a2;
  }
  return result;
}

uint64_t SnippetUI::Response_Component::clear_binary_button(uint64_t this)
{
  uint64_t v1;

  if (*(_DWORD *)(this + 36) == 18)
  {
    v1 = this;
    this = *(_QWORD *)(this + 24);
    if (this)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
    *(_DWORD *)(v1 + 36) = 0;
  }
  return this;
}

uint64_t SnippetUI::Response_Component::set_allocated_status_indicator_success(SnippetUI::Response_Component *this, SnippetUI::StatusIndicator_Success *a2)
{
  uint64_t result;

  result = SnippetUI::Response_Component::clear_value((uint64_t)this);
  if (a2)
  {
    *((_DWORD *)this + 9) = 19;
    *((_QWORD *)this + 3) = a2;
  }
  return result;
}

uint64_t SnippetUI::Response_Component::clear_status_indicator_success(uint64_t this)
{
  uint64_t v1;

  if (*(_DWORD *)(this + 36) == 19)
  {
    v1 = this;
    this = *(_QWORD *)(this + 24);
    if (this)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
    *(_DWORD *)(v1 + 36) = 0;
  }
  return this;
}

uint64_t SnippetUI::Response_Component::set_allocated_status_indicator_error(SnippetUI::Response_Component *this, SnippetUI::StatusIndicator_Error *a2)
{
  uint64_t result;

  result = SnippetUI::Response_Component::clear_value((uint64_t)this);
  if (a2)
  {
    *((_DWORD *)this + 9) = 20;
    *((_QWORD *)this + 3) = a2;
  }
  return result;
}

uint64_t SnippetUI::Response_Component::clear_status_indicator_error(uint64_t this)
{
  uint64_t v1;

  if (*(_DWORD *)(this + 36) == 20)
  {
    v1 = this;
    this = *(_QWORD *)(this + 24);
    if (this)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
    *(_DWORD *)(v1 + 36) = 0;
  }
  return this;
}

uint64_t SnippetUI::Response_Component::set_allocated_status_indicator_in_progress(SnippetUI::Response_Component *this, SnippetUI::StatusIndicator_InProgress *a2)
{
  uint64_t result;

  result = SnippetUI::Response_Component::clear_value((uint64_t)this);
  if (a2)
  {
    *((_DWORD *)this + 9) = 21;
    *((_QWORD *)this + 3) = a2;
  }
  return result;
}

uint64_t SnippetUI::Response_Component::clear_status_indicator_in_progress(uint64_t this)
{
  uint64_t v1;

  if (*(_DWORD *)(this + 36) == 21)
  {
    v1 = this;
    this = *(_QWORD *)(this + 24);
    if (this)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
    *(_DWORD *)(v1 + 36) = 0;
  }
  return this;
}

uint64_t SnippetUI::Response_Component::set_allocated_status_indicator_cancelled(SnippetUI::Response_Component *this, SnippetUI::StatusIndicator_Cancelled *a2)
{
  uint64_t result;

  result = SnippetUI::Response_Component::clear_value((uint64_t)this);
  if (a2)
  {
    *((_DWORD *)this + 9) = 22;
    *((_QWORD *)this + 3) = a2;
  }
  return result;
}

uint64_t SnippetUI::Response_Component::clear_status_indicator_cancelled(uint64_t this)
{
  uint64_t v1;

  if (*(_DWORD *)(this + 36) == 22)
  {
    v1 = this;
    this = *(_QWORD *)(this + 24);
    if (this)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
    *(_DWORD *)(v1 + 36) = 0;
  }
  return this;
}

uint64_t SnippetUI::Response_Component::set_allocated_text_input(SnippetUI::Response_Component *this, SnippetUI::TextInput *a2)
{
  uint64_t result;

  result = SnippetUI::Response_Component::clear_value((uint64_t)this);
  if (a2)
  {
    *((_DWORD *)this + 9) = 23;
    *((_QWORD *)this + 3) = a2;
  }
  return result;
}

uint64_t SnippetUI::Response_Component::clear_text_input(uint64_t this)
{
  uint64_t v1;

  if (*(_DWORD *)(this + 36) == 23)
  {
    v1 = this;
    this = *(_QWORD *)(this + 24);
    if (this)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
    *(_DWORD *)(v1 + 36) = 0;
  }
  return this;
}

uint64_t SnippetUI::Response_Component::set_allocated_control_switch(SnippetUI::Response_Component *this, SnippetUI::Control_Switch *a2)
{
  uint64_t result;

  result = SnippetUI::Response_Component::clear_value((uint64_t)this);
  if (a2)
  {
    *((_DWORD *)this + 9) = 24;
    *((_QWORD *)this + 3) = a2;
  }
  return result;
}

uint64_t SnippetUI::Response_Component::clear_control_switch(uint64_t this)
{
  uint64_t v1;

  if (*(_DWORD *)(this + 36) == 24)
  {
    v1 = this;
    this = *(_QWORD *)(this + 24);
    if (this)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
    *(_DWORD *)(v1 + 36) = 0;
  }
  return this;
}

uint64_t SnippetUI::Response_Component::set_allocated_control_slider(SnippetUI::Response_Component *this, SnippetUI::Control_Slider *a2)
{
  uint64_t result;

  result = SnippetUI::Response_Component::clear_value((uint64_t)this);
  if (a2)
  {
    *((_DWORD *)this + 9) = 25;
    *((_QWORD *)this + 3) = a2;
  }
  return result;
}

uint64_t SnippetUI::Response_Component::clear_control_slider(uint64_t this)
{
  uint64_t v1;

  if (*(_DWORD *)(this + 36) == 25)
  {
    v1 = this;
    this = *(_QWORD *)(this + 24);
    if (this)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
    *(_DWORD *)(v1 + 36) = 0;
  }
  return this;
}

uint64_t SnippetUI::Response_Component::set_allocated_control_player_button(SnippetUI::Response_Component *this, SnippetUI::Control_PlayerButton *a2)
{
  uint64_t result;

  result = SnippetUI::Response_Component::clear_value((uint64_t)this);
  if (a2)
  {
    *((_DWORD *)this + 9) = 60;
    *((_QWORD *)this + 3) = a2;
  }
  return result;
}

uint64_t SnippetUI::Response_Component::clear_control_player_button(uint64_t this)
{
  uint64_t v1;

  if (*(_DWORD *)(this + 36) == 60)
  {
    v1 = this;
    this = *(_QWORD *)(this + 24);
    if (this)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
    *(_DWORD *)(v1 + 36) = 0;
  }
  return this;
}

uint64_t SnippetUI::Response_Component::set_allocated_reference_standard(SnippetUI::Response_Component *this, SnippetUI::Reference_Standard *a2)
{
  uint64_t result;

  result = SnippetUI::Response_Component::clear_value((uint64_t)this);
  if (a2)
  {
    *((_DWORD *)this + 9) = 27;
    *((_QWORD *)this + 3) = a2;
  }
  return result;
}

uint64_t SnippetUI::Response_Component::clear_reference_standard(uint64_t this)
{
  uint64_t v1;

  if (*(_DWORD *)(this + 36) == 27)
  {
    v1 = this;
    this = *(_QWORD *)(this + 24);
    if (this)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
    *(_DWORD *)(v1 + 36) = 0;
  }
  return this;
}

uint64_t SnippetUI::Response_Component::set_allocated_reference_logo(SnippetUI::Response_Component *this, SnippetUI::Reference_Logo *a2)
{
  uint64_t result;

  result = SnippetUI::Response_Component::clear_value((uint64_t)this);
  if (a2)
  {
    *((_DWORD *)this + 9) = 28;
    *((_QWORD *)this + 3) = a2;
  }
  return result;
}

uint64_t SnippetUI::Response_Component::clear_reference_logo(uint64_t this)
{
  uint64_t v1;

  if (*(_DWORD *)(this + 36) == 28)
  {
    v1 = this;
    this = *(_QWORD *)(this + 24);
    if (this)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
    *(_DWORD *)(v1 + 36) = 0;
  }
  return this;
}

uint64_t SnippetUI::Response_Component::set_allocated_reference_rich(SnippetUI::Response_Component *this, SnippetUI::Reference_Rich *a2)
{
  uint64_t result;

  result = SnippetUI::Response_Component::clear_value((uint64_t)this);
  if (a2)
  {
    *((_DWORD *)this + 9) = 29;
    *((_QWORD *)this + 3) = a2;
  }
  return result;
}

uint64_t SnippetUI::Response_Component::clear_reference_rich(uint64_t this)
{
  uint64_t v1;

  if (*(_DWORD *)(this + 36) == 29)
  {
    v1 = this;
    this = *(_QWORD *)(this + 24);
    if (this)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
    *(_DWORD *)(v1 + 36) = 0;
  }
  return this;
}

uint64_t SnippetUI::Response_Component::set_allocated_reference_button(SnippetUI::Response_Component *this, SnippetUI::Reference_Button *a2)
{
  uint64_t result;

  result = SnippetUI::Response_Component::clear_value((uint64_t)this);
  if (a2)
  {
    *((_DWORD *)this + 9) = 30;
    *((_QWORD *)this + 3) = a2;
  }
  return result;
}

uint64_t SnippetUI::Response_Component::clear_reference_button(uint64_t this)
{
  uint64_t v1;

  if (*(_DWORD *)(this + 36) == 30)
  {
    v1 = this;
    this = *(_QWORD *)(this + 24);
    if (this)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
    *(_DWORD *)(v1 + 36) = 0;
  }
  return this;
}

uint64_t SnippetUI::Response_Component::set_allocated_summary_item_pair(SnippetUI::Response_Component *this, SnippetUI::SummaryItem_Pair *a2)
{
  uint64_t result;

  result = SnippetUI::Response_Component::clear_value((uint64_t)this);
  if (a2)
  {
    *((_DWORD *)this + 9) = 31;
    *((_QWORD *)this + 3) = a2;
  }
  return result;
}

uint64_t SnippetUI::Response_Component::clear_summary_item_pair(uint64_t this)
{
  uint64_t v1;

  if (*(_DWORD *)(this + 36) == 31)
  {
    v1 = this;
    this = *(_QWORD *)(this + 24);
    if (this)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
    *(_DWORD *)(v1 + 36) = 0;
  }
  return this;
}

uint64_t SnippetUI::Response_Component::set_allocated_summary_item_pair_v2(SnippetUI::Response_Component *this, SnippetUI::SummaryItem_PairV2 *a2)
{
  uint64_t result;

  result = SnippetUI::Response_Component::clear_value((uint64_t)this);
  if (a2)
  {
    *((_DWORD *)this + 9) = 59;
    *((_QWORD *)this + 3) = a2;
  }
  return result;
}

uint64_t SnippetUI::Response_Component::clear_summary_item_pair_v2(uint64_t this)
{
  uint64_t v1;

  if (*(_DWORD *)(this + 36) == 59)
  {
    v1 = this;
    this = *(_QWORD *)(this + 24);
    if (this)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
    *(_DWORD *)(v1 + 36) = 0;
  }
  return this;
}

uint64_t SnippetUI::Response_Component::set_allocated_summary_item_pair_number(SnippetUI::Response_Component *this, SnippetUI::SummaryItem_PairNumber *a2)
{
  uint64_t result;

  result = SnippetUI::Response_Component::clear_value((uint64_t)this);
  if (a2)
  {
    *((_DWORD *)this + 9) = 32;
    *((_QWORD *)this + 3) = a2;
  }
  return result;
}

uint64_t SnippetUI::Response_Component::clear_summary_item_pair_number(uint64_t this)
{
  uint64_t v1;

  if (*(_DWORD *)(this + 36) == 32)
  {
    v1 = this;
    this = *(_QWORD *)(this + 24);
    if (this)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
    *(_DWORD *)(v1 + 36) = 0;
  }
  return this;
}

uint64_t SnippetUI::Response_Component::set_allocated_summary_item_pair_number_v2(SnippetUI::Response_Component *this, SnippetUI::SummaryItem_PairNumberV2 *a2)
{
  uint64_t result;

  result = SnippetUI::Response_Component::clear_value((uint64_t)this);
  if (a2)
  {
    *((_DWORD *)this + 9) = 58;
    *((_QWORD *)this + 3) = a2;
  }
  return result;
}

uint64_t SnippetUI::Response_Component::clear_summary_item_pair_number_v2(uint64_t this)
{
  uint64_t v1;

  if (*(_DWORD *)(this + 36) == 58)
  {
    v1 = this;
    this = *(_QWORD *)(this + 24);
    if (this)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
    *(_DWORD *)(v1 + 36) = 0;
  }
  return this;
}

uint64_t SnippetUI::Response_Component::set_allocated_summary_item_button(SnippetUI::Response_Component *this, SnippetUI::SummaryItem_Button *a2)
{
  uint64_t result;

  result = SnippetUI::Response_Component::clear_value((uint64_t)this);
  if (a2)
  {
    *((_DWORD *)this + 9) = 33;
    *((_QWORD *)this + 3) = a2;
  }
  return result;
}

uint64_t SnippetUI::Response_Component::clear_summary_item_button(uint64_t this)
{
  uint64_t v1;

  if (*(_DWORD *)(this + 36) == 33)
  {
    v1 = this;
    this = *(_QWORD *)(this + 24);
    if (this)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
    *(_DWORD *)(v1 + 36) = 0;
  }
  return this;
}

uint64_t SnippetUI::Response_Component::set_allocated_fact_item_button(SnippetUI::Response_Component *this, SnippetUI::FactItem_Button *a2)
{
  uint64_t result;

  result = SnippetUI::Response_Component::clear_value((uint64_t)this);
  if (a2)
  {
    *((_DWORD *)this + 9) = 34;
    *((_QWORD *)this + 3) = a2;
  }
  return result;
}

uint64_t SnippetUI::Response_Component::clear_fact_item_button(uint64_t this)
{
  uint64_t v1;

  if (*(_DWORD *)(this + 36) == 34)
  {
    v1 = this;
    this = *(_QWORD *)(this + 24);
    if (this)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
    *(_DWORD *)(v1 + 36) = 0;
  }
  return this;
}

uint64_t SnippetUI::Response_Component::set_allocated_table(SnippetUI::Response_Component *this, SnippetUI::Table *a2)
{
  uint64_t result;

  result = SnippetUI::Response_Component::clear_value((uint64_t)this);
  if (a2)
  {
    *((_DWORD *)this + 9) = 35;
    *((_QWORD *)this + 3) = a2;
  }
  return result;
}

uint64_t SnippetUI::Response_Component::clear_table(uint64_t this)
{
  uint64_t v1;

  if (*(_DWORD *)(this + 36) == 35)
  {
    v1 = this;
    this = *(_QWORD *)(this + 24);
    if (this)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
    *(_DWORD *)(v1 + 36) = 0;
  }
  return this;
}

uint64_t SnippetUI::Response_Component::set_allocated_reference_footnote(SnippetUI::Response_Component *this, SnippetUI::Reference_Footnote *a2)
{
  uint64_t result;

  result = SnippetUI::Response_Component::clear_value((uint64_t)this);
  if (a2)
  {
    *((_DWORD *)this + 9) = 36;
    *((_QWORD *)this + 3) = a2;
  }
  return result;
}

uint64_t SnippetUI::Response_Component::clear_reference_footnote(uint64_t this)
{
  uint64_t v1;

  if (*(_DWORD *)(this + 36) == 36)
  {
    v1 = this;
    this = *(_QWORD *)(this + 24);
    if (this)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
    *(_DWORD *)(v1 + 36) = 0;
  }
  return this;
}

uint64_t SnippetUI::Response_Component::set_allocated_long_item_text(SnippetUI::Response_Component *this, SnippetUI::LongItem_Text *a2)
{
  uint64_t result;

  result = SnippetUI::Response_Component::clear_value((uint64_t)this);
  if (a2)
  {
    *((_DWORD *)this + 9) = 37;
    *((_QWORD *)this + 3) = a2;
  }
  return result;
}

uint64_t SnippetUI::Response_Component::clear_long_item_text(uint64_t this)
{
  uint64_t v1;

  if (*(_DWORD *)(this + 36) == 37)
  {
    v1 = this;
    this = *(_QWORD *)(this + 24);
    if (this)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
    *(_DWORD *)(v1 + 36) = 0;
  }
  return this;
}

uint64_t SnippetUI::Response_Component::set_allocated_visualization_chart(SnippetUI::Response_Component *this, SnippetUI::Visualization_Chart *a2)
{
  uint64_t result;

  result = SnippetUI::Response_Component::clear_value((uint64_t)this);
  if (a2)
  {
    *((_DWORD *)this + 9) = 38;
    *((_QWORD *)this + 3) = a2;
  }
  return result;
}

uint64_t SnippetUI::Response_Component::clear_visualization_chart(uint64_t this)
{
  uint64_t v1;

  if (*(_DWORD *)(this + 36) == 38)
  {
    v1 = this;
    this = *(_QWORD *)(this + 24);
    if (this)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
    *(_DWORD *)(v1 + 36) = 0;
  }
  return this;
}

uint64_t SnippetUI::Response_Component::set_allocated_summary_item_player(SnippetUI::Response_Component *this, SnippetUI::SummaryItem_Player *a2)
{
  uint64_t result;

  result = SnippetUI::Response_Component::clear_value((uint64_t)this);
  if (a2)
  {
    *((_DWORD *)this + 9) = 39;
    *((_QWORD *)this + 3) = a2;
  }
  return result;
}

uint64_t SnippetUI::Response_Component::clear_summary_item_player(uint64_t this)
{
  uint64_t v1;

  if (*(_DWORD *)(this + 36) == 39)
  {
    v1 = this;
    this = *(_QWORD *)(this + 24);
    if (this)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
    *(_DWORD *)(v1 + 36) = 0;
  }
  return this;
}

uint64_t SnippetUI::Response_Component::set_allocated_simple_item_player(SnippetUI::Response_Component *this, SnippetUI::SimpleItem_Player *a2)
{
  uint64_t result;

  result = SnippetUI::Response_Component::clear_value((uint64_t)this);
  if (a2)
  {
    *((_DWORD *)this + 9) = 40;
    *((_QWORD *)this + 3) = a2;
  }
  return result;
}

uint64_t SnippetUI::Response_Component::clear_simple_item_player(uint64_t this)
{
  uint64_t v1;

  if (*(_DWORD *)(this + 36) == 40)
  {
    v1 = this;
    this = *(_QWORD *)(this + 24);
    if (this)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
    *(_DWORD *)(v1 + 36) = 0;
  }
  return this;
}

uint64_t SnippetUI::Response_Component::set_allocated_simple_item_reverse_rich(SnippetUI::Response_Component *this, SnippetUI::SimpleItem_ReverseRich *a2)
{
  uint64_t result;

  result = SnippetUI::Response_Component::clear_value((uint64_t)this);
  if (a2)
  {
    *((_DWORD *)this + 9) = 41;
    *((_QWORD *)this + 3) = a2;
  }
  return result;
}

uint64_t SnippetUI::Response_Component::clear_simple_item_reverse_rich(uint64_t this)
{
  uint64_t v1;

  if (*(_DWORD *)(this + 36) == 41)
  {
    v1 = this;
    this = *(_QWORD *)(this + 24);
    if (this)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
    *(_DWORD *)(v1 + 36) = 0;
  }
  return this;
}

uint64_t SnippetUI::Response_Component::set_allocated_secondary_header_emphasized(SnippetUI::Response_Component *this, SnippetUI::SecondaryHeader_Emphasized *a2)
{
  uint64_t result;

  result = SnippetUI::Response_Component::clear_value((uint64_t)this);
  if (a2)
  {
    *((_DWORD *)this + 9) = 42;
    *((_QWORD *)this + 3) = a2;
  }
  return result;
}

uint64_t SnippetUI::Response_Component::clear_secondary_header_emphasized(uint64_t this)
{
  uint64_t v1;

  if (*(_DWORD *)(this + 36) == 42)
  {
    v1 = this;
    this = *(_QWORD *)(this + 24);
    if (this)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
    *(_DWORD *)(v1 + 36) = 0;
  }
  return this;
}

uint64_t SnippetUI::Response_Component::set_allocated_summary_item_switch(SnippetUI::Response_Component *this, SnippetUI::SummaryItem_Switch *a2)
{
  uint64_t result;

  result = SnippetUI::Response_Component::clear_value((uint64_t)this);
  if (a2)
  {
    *((_DWORD *)this + 9) = 43;
    *((_QWORD *)this + 3) = a2;
  }
  return result;
}

uint64_t SnippetUI::Response_Component::clear_summary_item_switch(uint64_t this)
{
  uint64_t v1;

  if (*(_DWORD *)(this + 36) == 43)
  {
    v1 = this;
    this = *(_QWORD *)(this + 24);
    if (this)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
    *(_DWORD *)(v1 + 36) = 0;
  }
  return this;
}

uint64_t SnippetUI::Response_Component::set_allocated_system_text_clarification_title(SnippetUI::Response_Component *this, SnippetUI::SystemText_ClarificationTitle *a2)
{
  uint64_t result;

  result = SnippetUI::Response_Component::clear_value((uint64_t)this);
  if (a2)
  {
    *((_DWORD *)this + 9) = 44;
    *((_QWORD *)this + 3) = a2;
  }
  return result;
}

uint64_t SnippetUI::Response_Component::clear_system_text_clarification_title(uint64_t this)
{
  uint64_t v1;

  if (*(_DWORD *)(this + 36) == 44)
  {
    v1 = this;
    this = *(_QWORD *)(this + 24);
    if (this)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
    *(_DWORD *)(v1 + 36) = 0;
  }
  return this;
}

uint64_t SnippetUI::Response_Component::set_allocated_visualization_image(SnippetUI::Response_Component *this, SnippetUI::Visualization_Image *a2)
{
  uint64_t result;

  result = SnippetUI::Response_Component::clear_value((uint64_t)this);
  if (a2)
  {
    *((_DWORD *)this + 9) = 45;
    *((_QWORD *)this + 3) = a2;
  }
  return result;
}

uint64_t SnippetUI::Response_Component::clear_visualization_image(uint64_t this)
{
  uint64_t v1;

  if (*(_DWORD *)(this + 36) == 45)
  {
    v1 = this;
    this = *(_QWORD *)(this + 24);
    if (this)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
    *(_DWORD *)(v1 + 36) = 0;
  }
  return this;
}

uint64_t SnippetUI::Response_Component::set_allocated_visualization_map(SnippetUI::Response_Component *this, SnippetUI::Visualization_Map *a2)
{
  uint64_t result;

  result = SnippetUI::Response_Component::clear_value((uint64_t)this);
  if (a2)
  {
    *((_DWORD *)this + 9) = 46;
    *((_QWORD *)this + 3) = a2;
  }
  return result;
}

uint64_t SnippetUI::Response_Component::clear_visualization_map(uint64_t this)
{
  uint64_t v1;

  if (*(_DWORD *)(this + 36) == 46)
  {
    v1 = this;
    this = *(_QWORD *)(this + 24);
    if (this)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
    *(_DWORD *)(v1 + 36) = 0;
  }
  return this;
}

uint64_t SnippetUI::Response_Component::set_allocated_button_container(SnippetUI::Response_Component *this, SnippetUI::Button_Container *a2)
{
  uint64_t result;

  result = SnippetUI::Response_Component::clear_value((uint64_t)this);
  if (a2)
  {
    *((_DWORD *)this + 9) = 47;
    *((_QWORD *)this + 3) = a2;
  }
  return result;
}

uint64_t SnippetUI::Response_Component::clear_button_container(uint64_t this)
{
  uint64_t v1;

  if (*(_DWORD *)(this + 36) == 47)
  {
    v1 = this;
    this = *(_QWORD *)(this + 24);
    if (this)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
    *(_DWORD *)(v1 + 36) = 0;
  }
  return this;
}

uint64_t SnippetUI::Response_Component::set_allocated_intentsui_standard(SnippetUI::Response_Component *this, SnippetUI::IntentsUI_Standard *a2)
{
  uint64_t result;

  result = SnippetUI::Response_Component::clear_value((uint64_t)this);
  if (a2)
  {
    *((_DWORD *)this + 9) = 48;
    *((_QWORD *)this + 3) = a2;
  }
  return result;
}

uint64_t SnippetUI::Response_Component::set_allocated_sash_standard(SnippetUI::Response_Component *this, SnippetUI::Sash_Standard *a2)
{
  uint64_t result;

  result = SnippetUI::Response_Component::clear_value((uint64_t)this);
  if (a2)
  {
    *((_DWORD *)this + 9) = 49;
    *((_QWORD *)this + 3) = a2;
  }
  return result;
}

uint64_t SnippetUI::Response_Component::clear_sash_standard(uint64_t this)
{
  uint64_t v1;

  if (*(_DWORD *)(this + 36) == 49)
  {
    v1 = this;
    this = *(_QWORD *)(this + 24);
    if (this)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
    *(_DWORD *)(v1 + 36) = 0;
  }
  return this;
}

uint64_t SnippetUI::Response_Component::set_allocated_hero_header(SnippetUI::Response_Component *this, SnippetUI::HeroHeader *a2)
{
  uint64_t result;

  result = SnippetUI::Response_Component::clear_value((uint64_t)this);
  if (a2)
  {
    *((_DWORD *)this + 9) = 50;
    *((_QWORD *)this + 3) = a2;
  }
  return result;
}

uint64_t SnippetUI::Response_Component::clear_hero_header(uint64_t this)
{
  uint64_t v1;

  if (*(_DWORD *)(this + 36) == 50)
  {
    v1 = this;
    this = *(_QWORD *)(this + 24);
    if (this)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
    *(_DWORD *)(v1 + 36) = 0;
  }
  return this;
}

uint64_t SnippetUI::Response_Component::set_allocated_horizontal_list_standard(SnippetUI::Response_Component *this, SnippetUI::HorizontalList_Standard *a2)
{
  uint64_t result;

  result = SnippetUI::Response_Component::clear_value((uint64_t)this);
  if (a2)
  {
    *((_DWORD *)this + 9) = 51;
    *((_QWORD *)this + 3) = a2;
  }
  return result;
}

uint64_t SnippetUI::Response_Component::clear_horizontal_list_standard(uint64_t this)
{
  uint64_t v1;

  if (*(_DWORD *)(this + 36) == 51)
  {
    v1 = this;
    this = *(_QWORD *)(this + 24);
    if (this)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
    *(_DWORD *)(v1 + 36) = 0;
  }
  return this;
}

uint64_t SnippetUI::Response_Component::set_allocated_section_header_standard(SnippetUI::Response_Component *this, SnippetUI::SectionHeader_Standard *a2)
{
  uint64_t result;

  result = SnippetUI::Response_Component::clear_value((uint64_t)this);
  if (a2)
  {
    *((_DWORD *)this + 9) = 52;
    *((_QWORD *)this + 3) = a2;
  }
  return result;
}

uint64_t SnippetUI::Response_Component::clear_section_header_standard(uint64_t this)
{
  uint64_t v1;

  if (*(_DWORD *)(this + 36) == 52)
  {
    v1 = this;
    this = *(_QWORD *)(this + 24);
    if (this)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
    *(_DWORD *)(v1 + 36) = 0;
  }
  return this;
}

uint64_t SnippetUI::Response_Component::set_allocated_section_header_rich(SnippetUI::Response_Component *this, SnippetUI::SectionHeader_Rich *a2)
{
  uint64_t result;

  result = SnippetUI::Response_Component::clear_value((uint64_t)this);
  if (a2)
  {
    *((_DWORD *)this + 9) = 53;
    *((_QWORD *)this + 3) = a2;
  }
  return result;
}

uint64_t SnippetUI::Response_Component::clear_section_header_rich(uint64_t this)
{
  uint64_t v1;

  if (*(_DWORD *)(this + 36) == 53)
  {
    v1 = this;
    this = *(_QWORD *)(this + 24);
    if (this)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
    *(_DWORD *)(v1 + 36) = 0;
  }
  return this;
}

uint64_t SnippetUI::Response_Component::set_allocated_key_value_standard(SnippetUI::Response_Component *this, SnippetUI::KeyValue_Standard *a2)
{
  uint64_t result;

  result = SnippetUI::Response_Component::clear_value((uint64_t)this);
  if (a2)
  {
    *((_DWORD *)this + 9) = 54;
    *((_QWORD *)this + 3) = a2;
  }
  return result;
}

uint64_t SnippetUI::Response_Component::clear_key_value_standard(uint64_t this)
{
  uint64_t v1;

  if (*(_DWORD *)(this + 36) == 54)
  {
    v1 = this;
    this = *(_QWORD *)(this + 24);
    if (this)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
    *(_DWORD *)(v1 + 36) = 0;
  }
  return this;
}

uint64_t SnippetUI::Response_Component::set_allocated_tertiary_header_standard(SnippetUI::Response_Component *this, SnippetUI::TertiaryHeader_Standard *a2)
{
  uint64_t result;

  result = SnippetUI::Response_Component::clear_value((uint64_t)this);
  if (a2)
  {
    *((_DWORD *)this + 9) = 55;
    *((_QWORD *)this + 3) = a2;
  }
  return result;
}

uint64_t SnippetUI::Response_Component::clear_tertiary_header_standard(uint64_t this)
{
  uint64_t v1;

  if (*(_DWORD *)(this + 36) == 55)
  {
    v1 = this;
    this = *(_QWORD *)(this + 24);
    if (this)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
    *(_DWORD *)(v1 + 36) = 0;
  }
  return this;
}

uint64_t SnippetUI::Response_Component::set_allocated_simple_item_rich_search_result(SnippetUI::Response_Component *this, SnippetUI::SimpleItem_RichSearchResult *a2)
{
  uint64_t result;

  result = SnippetUI::Response_Component::clear_value((uint64_t)this);
  if (a2)
  {
    *((_DWORD *)this + 9) = 56;
    *((_QWORD *)this + 3) = a2;
  }
  return result;
}

uint64_t SnippetUI::Response_Component::clear_simple_item_rich_search_result(uint64_t this)
{
  uint64_t v1;

  if (*(_DWORD *)(this + 36) == 56)
  {
    v1 = this;
    this = *(_QWORD *)(this + 24);
    if (this)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
    *(_DWORD *)(v1 + 36) = 0;
  }
  return this;
}

uint64_t SnippetUI::Response_Component::set_allocated_summary_item_switch_v2(SnippetUI::Response_Component *this, SnippetUI::SummaryItem_SwitchV2 *a2)
{
  uint64_t result;

  result = SnippetUI::Response_Component::clear_value((uint64_t)this);
  if (a2)
  {
    *((_DWORD *)this + 9) = 61;
    *((_QWORD *)this + 3) = a2;
  }
  return result;
}

uint64_t SnippetUI::Response_Component::clear_summary_item_switch_v2(uint64_t this)
{
  uint64_t v1;

  if (*(_DWORD *)(this + 36) == 61)
  {
    v1 = this;
    this = *(_QWORD *)(this + 24);
    if (this)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
    *(_DWORD *)(v1 + 36) = 0;
  }
  return this;
}

uint64_t SnippetUI::Response_Component::clear_separators(SnippetUI::Response_Component *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 2);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 2) = 0;
  return result;
}

SnippetUI::Response_Component *SnippetUI::Response_Component::Response_Component(SnippetUI::Response_Component *this, const SnippetUI::Response_Component *a2)
{
  uint64_t v4;
  SnippetUI::Separators *v6;
  SnippetUI::CustomCanvas *v7;
  const SnippetUI::CustomCanvas *v8;
  SnippetUI::FactItem_Standard *v9;
  const SnippetUI::FactItem_Standard *v10;
  SnippetUI::FactItem_ShortNumber *v11;
  const SnippetUI::FactItem_ShortNumber *v12;
  SnippetUI::FactItem_HeroNumber *v13;
  const SnippetUI::FactItem_HeroNumber *v14;
  SnippetUI::SummaryItem_Standard *v15;
  const SnippetUI::SummaryItem_Standard *v16;
  SnippetUI::SummaryItem_ShortNumber *v17;
  const SnippetUI::SummaryItem_ShortNumber *v18;
  SnippetUI::SummaryItem_Text *v19;
  const SnippetUI::SummaryItem_Text *v20;
  SnippetUI::SummaryItem_LargeText *v21;
  const SnippetUI::SummaryItem_LargeText *v22;
  SnippetUI::SummaryItem_DetailedText *v23;
  const SnippetUI::SummaryItem_DetailedText *v24;
  SnippetUI::SimpleItem_Standard *v25;
  const SnippetUI::SimpleItem_Standard *v26;
  SnippetUI::SimpleItem_Rich *v27;
  const SnippetUI::SimpleItem_Rich *v28;
  SnippetUI::SimpleItem_Visual *v29;
  const SnippetUI::SimpleItem_Visual *v30;
  SnippetUI::PrimaryHeader_Standard *v31;
  const SnippetUI::PrimaryHeader_Standard *v32;
  SnippetUI::PrimaryHeader_Marquee *v33;
  const SnippetUI::PrimaryHeader_Marquee *v34;
  SnippetUI::PrimaryHeader_Rich *v35;
  const SnippetUI::PrimaryHeader_Rich *v36;
  SnippetUI::SecondaryHeader_Standard *v37;
  const SnippetUI::SecondaryHeader_Standard *v38;
  SnippetUI::Button *v39;
  const SnippetUI::Button *v40;
  SnippetUI::BinaryButton *v41;
  const SnippetUI::BinaryButton *v42;
  SnippetUI::StatusIndicator_Success *v43;
  const SnippetUI::StatusIndicator_Success *v44;
  SnippetUI::StatusIndicator_Error *v45;
  const SnippetUI::StatusIndicator_Error *v46;
  SnippetUI::StatusIndicator_InProgress *v47;
  const SnippetUI::StatusIndicator_InProgress *v48;
  SnippetUI::StatusIndicator_Cancelled *v49;
  const SnippetUI::StatusIndicator_Cancelled *v50;
  SnippetUI::TextInput *v51;
  const SnippetUI::TextInput *v52;
  SnippetUI::Control_Switch *v53;
  const SnippetUI::Control_Switch *v54;
  SnippetUI::Control_Slider *v55;
  const SnippetUI::Control_Slider *v56;
  SnippetUI::Reference_Standard *v57;
  const SnippetUI::Reference_Standard *v58;
  SnippetUI::Reference_Logo *v59;
  const SnippetUI::Reference_Logo *v60;
  SnippetUI::Reference_Rich *v61;
  const SnippetUI::Reference_Rich *v62;
  SnippetUI::Reference_Button *v63;
  const SnippetUI::Reference_Button *v64;
  SnippetUI::SummaryItem_Pair *v65;
  const SnippetUI::SummaryItem_Pair *v66;
  SnippetUI::SummaryItem_PairNumber *v67;
  const SnippetUI::SummaryItem_PairNumber *v68;
  SnippetUI::SummaryItem_Button *v69;
  const SnippetUI::SummaryItem_Button *v70;
  SnippetUI::FactItem_Button *v71;
  const SnippetUI::FactItem_Button *v72;
  int **v73;
  int **v74;
  SnippetUI::Reference_Footnote *v75;
  const SnippetUI::Reference_Footnote *v76;
  SnippetUI::LongItem_Text *v77;
  const SnippetUI::LongItem_Text *v78;
  SnippetUI::Visualization_Chart *v79;
  const SnippetUI::Visualization_Chart *v80;
  SnippetUI::SummaryItem_Player *v81;
  const SnippetUI::SummaryItem_Player *v82;
  SnippetUI::SimpleItem_Player *v83;
  const SnippetUI::SimpleItem_Player *v84;
  SnippetUI::SimpleItem_ReverseRich *v85;
  const SnippetUI::SimpleItem_ReverseRich *v86;
  SnippetUI::SecondaryHeader_Emphasized *v87;
  const SnippetUI::SecondaryHeader_Emphasized *v88;
  SnippetUI::SummaryItem_Switch *v89;
  const SnippetUI::SummaryItem_Switch *v90;
  SnippetUI::SystemText_ClarificationTitle *v91;
  const SnippetUI::SystemText_ClarificationTitle *v92;
  SnippetUI::Visualization_Image *v93;
  const SnippetUI::Visualization_Image *v94;
  SnippetUI::Visualization_Map *v95;
  const SnippetUI::Visualization_Map *v96;
  int **v97;
  int **v98;
  SnippetUI::IntentsUI_Standard *v99;
  const SnippetUI::IntentsUI_Standard *v100;
  SnippetUI::Sash_Standard *v101;
  const SnippetUI::Sash_Standard *v102;
  SnippetUI::HeroHeader *v103;
  const SnippetUI::HeroHeader *v104;
  SnippetUI::HorizontalList_Standard *v105;
  const SnippetUI::HorizontalList_Standard *v106;
  SnippetUI::SectionHeader_Standard *v107;
  const SnippetUI::SectionHeader_Standard *v108;
  SnippetUI::SectionHeader_Rich *v109;
  const SnippetUI::SectionHeader_Rich *v110;
  int **v111;
  int **v112;
  SnippetUI::TertiaryHeader_Standard *v113;
  const SnippetUI::TertiaryHeader_Standard *v114;
  SnippetUI::SimpleItem_RichSearchResult *v115;
  const SnippetUI::SimpleItem_RichSearchResult *v116;
  SnippetUI::SummaryItem_PairNumberV2 *v117;
  const SnippetUI::SummaryItem_PairNumberV2 *v118;
  SnippetUI::SummaryItem_PairV2 *v119;
  const SnippetUI::SummaryItem_PairV2 *v120;
  SnippetUI::Control_PlayerButton *v121;
  const SnippetUI::Control_PlayerButton *v122;
  SnippetUI::SummaryItem_SwitchV2 *v123;
  const SnippetUI::SummaryItem_SwitchV2 *v124;

  *(_QWORD *)this = &off_1E79369F0;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 8) = 0;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::Response_Component *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  if (a2 == (const SnippetUI::Response_Component *)&SnippetUI::_Response_Component_default_instance_
    || *((_QWORD *)a2 + 2) == 0)
  {
    v6 = 0;
  }
  else
  {
    v6 = (SnippetUI::Separators *)operator new();
    SnippetUI::Separators::Separators(v6, *((const SnippetUI::Separators **)a2 + 2));
  }
  *((_QWORD *)this + 2) = v6;
  *((_DWORD *)this + 9) = 0;
  switch(*((_DWORD *)a2 + 9))
  {
    case 1:
      v7 = SnippetUI::Response_Component::_internal_mutable_custom_canvas(this);
      if (*((_DWORD *)a2 + 9) == 1)
        v8 = (const SnippetUI::CustomCanvas *)*((_QWORD *)a2 + 3);
      else
        v8 = (const SnippetUI::CustomCanvas *)&SnippetUI::_CustomCanvas_default_instance_;
      SnippetUI::CustomCanvas::MergeFrom(v7, v8);
      break;
    case 2:
      v9 = SnippetUI::Response_Component::_internal_mutable_fact_item_standard(this);
      if (*((_DWORD *)a2 + 9) == 2)
        v10 = (const SnippetUI::FactItem_Standard *)*((_QWORD *)a2 + 3);
      else
        v10 = (const SnippetUI::FactItem_Standard *)&SnippetUI::_FactItem_Standard_default_instance_;
      SnippetUI::FactItem_Standard::MergeFrom(v9, v10);
      break;
    case 3:
      v11 = SnippetUI::Response_Component::_internal_mutable_fact_item_short_number(this);
      if (*((_DWORD *)a2 + 9) == 3)
        v12 = (const SnippetUI::FactItem_ShortNumber *)*((_QWORD *)a2 + 3);
      else
        v12 = (const SnippetUI::FactItem_ShortNumber *)&SnippetUI::_FactItem_ShortNumber_default_instance_;
      SnippetUI::FactItem_ShortNumber::MergeFrom(v11, v12);
      break;
    case 4:
      v13 = SnippetUI::Response_Component::_internal_mutable_fact_item_hero_number(this);
      if (*((_DWORD *)a2 + 9) == 4)
        v14 = (const SnippetUI::FactItem_HeroNumber *)*((_QWORD *)a2 + 3);
      else
        v14 = (const SnippetUI::FactItem_HeroNumber *)&SnippetUI::_FactItem_HeroNumber_default_instance_;
      SnippetUI::FactItem_HeroNumber::MergeFrom(v13, v14);
      break;
    case 5:
      v15 = SnippetUI::Response_Component::_internal_mutable_summary_item_standard(this);
      if (*((_DWORD *)a2 + 9) == 5)
        v16 = (const SnippetUI::SummaryItem_Standard *)*((_QWORD *)a2 + 3);
      else
        v16 = (const SnippetUI::SummaryItem_Standard *)&SnippetUI::_SummaryItem_Standard_default_instance_;
      SnippetUI::SummaryItem_Standard::MergeFrom(v15, v16);
      break;
    case 6:
      v17 = SnippetUI::Response_Component::_internal_mutable_summary_item_short_number(this);
      if (*((_DWORD *)a2 + 9) == 6)
        v18 = (const SnippetUI::SummaryItem_ShortNumber *)*((_QWORD *)a2 + 3);
      else
        v18 = (const SnippetUI::SummaryItem_ShortNumber *)&SnippetUI::_SummaryItem_ShortNumber_default_instance_;
      SnippetUI::SummaryItem_ShortNumber::MergeFrom(v17, v18);
      break;
    case 7:
      v19 = SnippetUI::Response_Component::_internal_mutable_summary_item_text(this);
      if (*((_DWORD *)a2 + 9) == 7)
        v20 = (const SnippetUI::SummaryItem_Text *)*((_QWORD *)a2 + 3);
      else
        v20 = (const SnippetUI::SummaryItem_Text *)&SnippetUI::_SummaryItem_Text_default_instance_;
      SnippetUI::SummaryItem_Text::MergeFrom(v19, v20);
      break;
    case 8:
      v21 = SnippetUI::Response_Component::_internal_mutable_summary_item_large_text(this);
      if (*((_DWORD *)a2 + 9) == 8)
        v22 = (const SnippetUI::SummaryItem_LargeText *)*((_QWORD *)a2 + 3);
      else
        v22 = (const SnippetUI::SummaryItem_LargeText *)&SnippetUI::_SummaryItem_LargeText_default_instance_;
      SnippetUI::SummaryItem_LargeText::MergeFrom(v21, v22);
      break;
    case 9:
      v23 = SnippetUI::Response_Component::_internal_mutable_summary_item_detailed_text(this);
      if (*((_DWORD *)a2 + 9) == 9)
        v24 = (const SnippetUI::SummaryItem_DetailedText *)*((_QWORD *)a2 + 3);
      else
        v24 = (const SnippetUI::SummaryItem_DetailedText *)&SnippetUI::_SummaryItem_DetailedText_default_instance_;
      SnippetUI::SummaryItem_DetailedText::MergeFrom(v23, v24);
      break;
    case 0xA:
      v25 = SnippetUI::Response_Component::_internal_mutable_simple_item_standard(this);
      if (*((_DWORD *)a2 + 9) == 10)
        v26 = (const SnippetUI::SimpleItem_Standard *)*((_QWORD *)a2 + 3);
      else
        v26 = (const SnippetUI::SimpleItem_Standard *)&SnippetUI::_SimpleItem_Standard_default_instance_;
      SnippetUI::SimpleItem_Standard::MergeFrom(v25, v26);
      break;
    case 0xB:
      v27 = SnippetUI::Response_Component::_internal_mutable_simple_item_rich(this);
      if (*((_DWORD *)a2 + 9) == 11)
        v28 = (const SnippetUI::SimpleItem_Rich *)*((_QWORD *)a2 + 3);
      else
        v28 = (const SnippetUI::SimpleItem_Rich *)&SnippetUI::_SimpleItem_Rich_default_instance_;
      SnippetUI::SimpleItem_Rich::MergeFrom(v27, v28);
      break;
    case 0xC:
      v29 = SnippetUI::Response_Component::_internal_mutable_simple_item_visual(this);
      if (*((_DWORD *)a2 + 9) == 12)
        v30 = (const SnippetUI::SimpleItem_Visual *)*((_QWORD *)a2 + 3);
      else
        v30 = (const SnippetUI::SimpleItem_Visual *)&SnippetUI::_SimpleItem_Visual_default_instance_;
      SnippetUI::SimpleItem_Visual::MergeFrom(v29, v30);
      break;
    case 0xD:
      v31 = SnippetUI::Response_Component::_internal_mutable_primary_header_standard(this);
      if (*((_DWORD *)a2 + 9) == 13)
        v32 = (const SnippetUI::PrimaryHeader_Standard *)*((_QWORD *)a2 + 3);
      else
        v32 = (const SnippetUI::PrimaryHeader_Standard *)&SnippetUI::_PrimaryHeader_Standard_default_instance_;
      SnippetUI::PrimaryHeader_Standard::MergeFrom(v31, v32);
      break;
    case 0xE:
      v33 = SnippetUI::Response_Component::_internal_mutable_primary_header_marquee(this);
      if (*((_DWORD *)a2 + 9) == 14)
        v34 = (const SnippetUI::PrimaryHeader_Marquee *)*((_QWORD *)a2 + 3);
      else
        v34 = (const SnippetUI::PrimaryHeader_Marquee *)&SnippetUI::_PrimaryHeader_Marquee_default_instance_;
      SnippetUI::PrimaryHeader_Marquee::MergeFrom(v33, v34);
      break;
    case 0xF:
      v35 = SnippetUI::Response_Component::_internal_mutable_primary_header_rich(this);
      if (*((_DWORD *)a2 + 9) == 15)
        v36 = (const SnippetUI::PrimaryHeader_Rich *)*((_QWORD *)a2 + 3);
      else
        v36 = (const SnippetUI::PrimaryHeader_Rich *)&SnippetUI::_PrimaryHeader_Rich_default_instance_;
      SnippetUI::PrimaryHeader_Rich::MergeFrom(v35, v36);
      break;
    case 0x10:
      v37 = SnippetUI::Response_Component::_internal_mutable_secondary_header_standard(this);
      if (*((_DWORD *)a2 + 9) == 16)
        v38 = (const SnippetUI::SecondaryHeader_Standard *)*((_QWORD *)a2 + 3);
      else
        v38 = (const SnippetUI::SecondaryHeader_Standard *)&SnippetUI::_SecondaryHeader_Standard_default_instance_;
      SnippetUI::SecondaryHeader_Standard::MergeFrom(v37, v38);
      break;
    case 0x11:
      v39 = SnippetUI::Response_Component::_internal_mutable_button(this);
      if (*((_DWORD *)a2 + 9) == 17)
        v40 = (const SnippetUI::Button *)*((_QWORD *)a2 + 3);
      else
        v40 = (const SnippetUI::Button *)&SnippetUI::_Button_default_instance_;
      SnippetUI::Button::MergeFrom(v39, v40);
      break;
    case 0x12:
      v41 = SnippetUI::Response_Component::_internal_mutable_binary_button(this);
      if (*((_DWORD *)a2 + 9) == 18)
        v42 = (const SnippetUI::BinaryButton *)*((_QWORD *)a2 + 3);
      else
        v42 = (const SnippetUI::BinaryButton *)&SnippetUI::_BinaryButton_default_instance_;
      SnippetUI::BinaryButton::MergeFrom(v41, v42);
      break;
    case 0x13:
      v43 = SnippetUI::Response_Component::_internal_mutable_status_indicator_success(this);
      if (*((_DWORD *)a2 + 9) == 19)
        v44 = (const SnippetUI::StatusIndicator_Success *)*((_QWORD *)a2 + 3);
      else
        v44 = (const SnippetUI::StatusIndicator_Success *)&SnippetUI::_StatusIndicator_Success_default_instance_;
      SnippetUI::StatusIndicator_Success::MergeFrom(v43, v44);
      break;
    case 0x14:
      v45 = SnippetUI::Response_Component::_internal_mutable_status_indicator_error(this);
      if (*((_DWORD *)a2 + 9) == 20)
        v46 = (const SnippetUI::StatusIndicator_Error *)*((_QWORD *)a2 + 3);
      else
        v46 = (const SnippetUI::StatusIndicator_Error *)&SnippetUI::_StatusIndicator_Error_default_instance_;
      SnippetUI::StatusIndicator_Error::MergeFrom(v45, v46);
      break;
    case 0x15:
      v47 = SnippetUI::Response_Component::_internal_mutable_status_indicator_in_progress(this);
      if (*((_DWORD *)a2 + 9) == 21)
        v48 = (const SnippetUI::StatusIndicator_InProgress *)*((_QWORD *)a2 + 3);
      else
        v48 = (const SnippetUI::StatusIndicator_InProgress *)&SnippetUI::_StatusIndicator_InProgress_default_instance_;
      SnippetUI::StatusIndicator_InProgress::MergeFrom(v47, v48);
      break;
    case 0x16:
      v49 = SnippetUI::Response_Component::_internal_mutable_status_indicator_cancelled(this);
      if (*((_DWORD *)a2 + 9) == 22)
        v50 = (const SnippetUI::StatusIndicator_Cancelled *)*((_QWORD *)a2 + 3);
      else
        v50 = (const SnippetUI::StatusIndicator_Cancelled *)&SnippetUI::_StatusIndicator_Cancelled_default_instance_;
      SnippetUI::StatusIndicator_Cancelled::MergeFrom(v49, v50);
      break;
    case 0x17:
      v51 = SnippetUI::Response_Component::_internal_mutable_text_input(this);
      if (*((_DWORD *)a2 + 9) == 23)
        v52 = (const SnippetUI::TextInput *)*((_QWORD *)a2 + 3);
      else
        v52 = (const SnippetUI::TextInput *)&SnippetUI::_TextInput_default_instance_;
      SnippetUI::TextInput::MergeFrom(v51, v52);
      break;
    case 0x18:
      v53 = SnippetUI::Response_Component::_internal_mutable_control_switch(this);
      if (*((_DWORD *)a2 + 9) == 24)
        v54 = (const SnippetUI::Control_Switch *)*((_QWORD *)a2 + 3);
      else
        v54 = (const SnippetUI::Control_Switch *)&SnippetUI::_Control_Switch_default_instance_;
      SnippetUI::Control_Switch::MergeFrom(v53, v54);
      break;
    case 0x19:
      v55 = SnippetUI::Response_Component::_internal_mutable_control_slider(this);
      if (*((_DWORD *)a2 + 9) == 25)
        v56 = (const SnippetUI::Control_Slider *)*((_QWORD *)a2 + 3);
      else
        v56 = (const SnippetUI::Control_Slider *)&SnippetUI::_Control_Slider_default_instance_;
      SnippetUI::Control_Slider::MergeFrom(v55, v56);
      break;
    case 0x1A:
      SnippetUI::Response_Component::_internal_set_group_id(this, *((std::string **)a2 + 3));
      break;
    case 0x1B:
      v57 = SnippetUI::Response_Component::_internal_mutable_reference_standard(this);
      if (*((_DWORD *)a2 + 9) == 27)
        v58 = (const SnippetUI::Reference_Standard *)*((_QWORD *)a2 + 3);
      else
        v58 = (const SnippetUI::Reference_Standard *)&SnippetUI::_Reference_Standard_default_instance_;
      SnippetUI::Reference_Standard::MergeFrom(v57, v58);
      break;
    case 0x1C:
      v59 = SnippetUI::Response_Component::_internal_mutable_reference_logo(this);
      if (*((_DWORD *)a2 + 9) == 28)
        v60 = (const SnippetUI::Reference_Logo *)*((_QWORD *)a2 + 3);
      else
        v60 = (const SnippetUI::Reference_Logo *)&SnippetUI::_Reference_Logo_default_instance_;
      SnippetUI::Reference_Logo::MergeFrom(v59, v60);
      break;
    case 0x1D:
      v61 = SnippetUI::Response_Component::_internal_mutable_reference_rich(this);
      if (*((_DWORD *)a2 + 9) == 29)
        v62 = (const SnippetUI::Reference_Rich *)*((_QWORD *)a2 + 3);
      else
        v62 = (const SnippetUI::Reference_Rich *)&SnippetUI::_Reference_Rich_default_instance_;
      SnippetUI::Reference_Rich::MergeFrom(v61, v62);
      break;
    case 0x1E:
      v63 = SnippetUI::Response_Component::_internal_mutable_reference_button(this);
      if (*((_DWORD *)a2 + 9) == 30)
        v64 = (const SnippetUI::Reference_Button *)*((_QWORD *)a2 + 3);
      else
        v64 = (const SnippetUI::Reference_Button *)&SnippetUI::_Reference_Button_default_instance_;
      SnippetUI::Reference_Button::MergeFrom(v63, v64);
      break;
    case 0x1F:
      v65 = SnippetUI::Response_Component::_internal_mutable_summary_item_pair(this);
      if (*((_DWORD *)a2 + 9) == 31)
        v66 = (const SnippetUI::SummaryItem_Pair *)*((_QWORD *)a2 + 3);
      else
        v66 = (const SnippetUI::SummaryItem_Pair *)&SnippetUI::_SummaryItem_Pair_default_instance_;
      SnippetUI::SummaryItem_Pair::MergeFrom(v65, v66);
      break;
    case 0x20:
      v67 = SnippetUI::Response_Component::_internal_mutable_summary_item_pair_number(this);
      if (*((_DWORD *)a2 + 9) == 32)
        v68 = (const SnippetUI::SummaryItem_PairNumber *)*((_QWORD *)a2 + 3);
      else
        v68 = (const SnippetUI::SummaryItem_PairNumber *)&SnippetUI::_SummaryItem_PairNumber_default_instance_;
      SnippetUI::SummaryItem_PairNumber::MergeFrom(v67, v68);
      break;
    case 0x21:
      v69 = SnippetUI::Response_Component::_internal_mutable_summary_item_button(this);
      if (*((_DWORD *)a2 + 9) == 33)
        v70 = (const SnippetUI::SummaryItem_Button *)*((_QWORD *)a2 + 3);
      else
        v70 = (const SnippetUI::SummaryItem_Button *)&SnippetUI::_SummaryItem_Button_default_instance_;
      SnippetUI::SummaryItem_Button::MergeFrom(v69, v70);
      break;
    case 0x22:
      v71 = SnippetUI::Response_Component::_internal_mutable_fact_item_button(this);
      if (*((_DWORD *)a2 + 9) == 34)
        v72 = (const SnippetUI::FactItem_Button *)*((_QWORD *)a2 + 3);
      else
        v72 = (const SnippetUI::FactItem_Button *)&SnippetUI::_FactItem_Button_default_instance_;
      SnippetUI::FactItem_Button::MergeFrom(v71, v72);
      break;
    case 0x23:
      v73 = (int **)SnippetUI::Response_Component::_internal_mutable_table(this);
      if (*((_DWORD *)a2 + 9) == 35)
        v74 = (int **)*((_QWORD *)a2 + 3);
      else
        v74 = (int **)&SnippetUI::_Table_default_instance_;
      SnippetUI::Table::MergeFrom(v73, v74);
      break;
    case 0x24:
      v75 = SnippetUI::Response_Component::_internal_mutable_reference_footnote(this);
      if (*((_DWORD *)a2 + 9) == 36)
        v76 = (const SnippetUI::Reference_Footnote *)*((_QWORD *)a2 + 3);
      else
        v76 = (const SnippetUI::Reference_Footnote *)&SnippetUI::_Reference_Footnote_default_instance_;
      SnippetUI::Reference_Footnote::MergeFrom(v75, v76);
      break;
    case 0x25:
      v77 = SnippetUI::Response_Component::_internal_mutable_long_item_text(this);
      if (*((_DWORD *)a2 + 9) == 37)
        v78 = (const SnippetUI::LongItem_Text *)*((_QWORD *)a2 + 3);
      else
        v78 = (const SnippetUI::LongItem_Text *)&SnippetUI::_LongItem_Text_default_instance_;
      SnippetUI::LongItem_Text::MergeFrom(v77, v78);
      break;
    case 0x26:
      v79 = SnippetUI::Response_Component::_internal_mutable_visualization_chart(this);
      if (*((_DWORD *)a2 + 9) == 38)
        v80 = (const SnippetUI::Visualization_Chart *)*((_QWORD *)a2 + 3);
      else
        v80 = (const SnippetUI::Visualization_Chart *)&SnippetUI::_Visualization_Chart_default_instance_;
      SnippetUI::Visualization_Chart::MergeFrom(v79, v80);
      break;
    case 0x27:
      v81 = SnippetUI::Response_Component::_internal_mutable_summary_item_player(this);
      if (*((_DWORD *)a2 + 9) == 39)
        v82 = (const SnippetUI::SummaryItem_Player *)*((_QWORD *)a2 + 3);
      else
        v82 = (const SnippetUI::SummaryItem_Player *)&SnippetUI::_SummaryItem_Player_default_instance_;
      SnippetUI::SummaryItem_Player::MergeFrom(v81, v82);
      break;
    case 0x28:
      v83 = SnippetUI::Response_Component::_internal_mutable_simple_item_player(this);
      if (*((_DWORD *)a2 + 9) == 40)
        v84 = (const SnippetUI::SimpleItem_Player *)*((_QWORD *)a2 + 3);
      else
        v84 = (const SnippetUI::SimpleItem_Player *)&SnippetUI::_SimpleItem_Player_default_instance_;
      SnippetUI::SimpleItem_Player::MergeFrom(v83, v84);
      break;
    case 0x29:
      v85 = SnippetUI::Response_Component::_internal_mutable_simple_item_reverse_rich(this);
      if (*((_DWORD *)a2 + 9) == 41)
        v86 = (const SnippetUI::SimpleItem_ReverseRich *)*((_QWORD *)a2 + 3);
      else
        v86 = (const SnippetUI::SimpleItem_ReverseRich *)&SnippetUI::_SimpleItem_ReverseRich_default_instance_;
      SnippetUI::SimpleItem_ReverseRich::MergeFrom(v85, v86);
      break;
    case 0x2A:
      v87 = SnippetUI::Response_Component::_internal_mutable_secondary_header_emphasized(this);
      if (*((_DWORD *)a2 + 9) == 42)
        v88 = (const SnippetUI::SecondaryHeader_Emphasized *)*((_QWORD *)a2 + 3);
      else
        v88 = (const SnippetUI::SecondaryHeader_Emphasized *)&SnippetUI::_SecondaryHeader_Emphasized_default_instance_;
      SnippetUI::SecondaryHeader_Emphasized::MergeFrom(v87, v88);
      break;
    case 0x2B:
      v89 = SnippetUI::Response_Component::_internal_mutable_summary_item_switch(this);
      if (*((_DWORD *)a2 + 9) == 43)
        v90 = (const SnippetUI::SummaryItem_Switch *)*((_QWORD *)a2 + 3);
      else
        v90 = (const SnippetUI::SummaryItem_Switch *)&SnippetUI::_SummaryItem_Switch_default_instance_;
      SnippetUI::SummaryItem_Switch::MergeFrom(v89, v90);
      break;
    case 0x2C:
      v91 = SnippetUI::Response_Component::_internal_mutable_system_text_clarification_title(this);
      if (*((_DWORD *)a2 + 9) == 44)
        v92 = (const SnippetUI::SystemText_ClarificationTitle *)*((_QWORD *)a2 + 3);
      else
        v92 = (const SnippetUI::SystemText_ClarificationTitle *)&SnippetUI::_SystemText_ClarificationTitle_default_instance_;
      SnippetUI::SystemText_ClarificationTitle::MergeFrom(v91, v92);
      break;
    case 0x2D:
      v93 = SnippetUI::Response_Component::_internal_mutable_visualization_image(this);
      if (*((_DWORD *)a2 + 9) == 45)
        v94 = (const SnippetUI::Visualization_Image *)*((_QWORD *)a2 + 3);
      else
        v94 = (const SnippetUI::Visualization_Image *)&SnippetUI::_Visualization_Image_default_instance_;
      SnippetUI::Visualization_Image::MergeFrom(v93, v94);
      break;
    case 0x2E:
      v95 = SnippetUI::Response_Component::_internal_mutable_visualization_map(this);
      if (*((_DWORD *)a2 + 9) == 46)
        v96 = (const SnippetUI::Visualization_Map *)*((_QWORD *)a2 + 3);
      else
        v96 = (const SnippetUI::Visualization_Map *)&SnippetUI::_Visualization_Map_default_instance_;
      SnippetUI::Visualization_Map::MergeFrom(v95, v96);
      break;
    case 0x2F:
      v97 = (int **)SnippetUI::Response_Component::_internal_mutable_button_container(this);
      if (*((_DWORD *)a2 + 9) == 47)
        v98 = (int **)*((_QWORD *)a2 + 3);
      else
        v98 = (int **)&SnippetUI::_Button_Container_default_instance_;
      SnippetUI::Button_Container::MergeFrom(v97, v98);
      break;
    case 0x30:
      v99 = SnippetUI::Response_Component::_internal_mutable_intentsui_standard(this);
      if (*((_DWORD *)a2 + 9) == 48)
        v100 = (const SnippetUI::IntentsUI_Standard *)*((_QWORD *)a2 + 3);
      else
        v100 = (const SnippetUI::IntentsUI_Standard *)&SnippetUI::_IntentsUI_Standard_default_instance_;
      SnippetUI::IntentsUI_Standard::MergeFrom(v99, v100);
      break;
    case 0x31:
      v101 = SnippetUI::Response_Component::_internal_mutable_sash_standard(this);
      if (*((_DWORD *)a2 + 9) == 49)
        v102 = (const SnippetUI::Sash_Standard *)*((_QWORD *)a2 + 3);
      else
        v102 = (const SnippetUI::Sash_Standard *)&SnippetUI::_Sash_Standard_default_instance_;
      SnippetUI::Sash_Standard::MergeFrom(v101, v102);
      break;
    case 0x32:
      v103 = SnippetUI::Response_Component::_internal_mutable_hero_header(this);
      if (*((_DWORD *)a2 + 9) == 50)
        v104 = (const SnippetUI::HeroHeader *)*((_QWORD *)a2 + 3);
      else
        v104 = (const SnippetUI::HeroHeader *)&SnippetUI::_HeroHeader_default_instance_;
      SnippetUI::HeroHeader::MergeFrom(v103, v104);
      break;
    case 0x33:
      v105 = SnippetUI::Response_Component::_internal_mutable_horizontal_list_standard(this);
      if (*((_DWORD *)a2 + 9) == 51)
        v106 = (const SnippetUI::HorizontalList_Standard *)*((_QWORD *)a2 + 3);
      else
        v106 = (const SnippetUI::HorizontalList_Standard *)&SnippetUI::_HorizontalList_Standard_default_instance_;
      SnippetUI::HorizontalList_Standard::MergeFrom(v105, v106);
      break;
    case 0x34:
      v107 = SnippetUI::Response_Component::_internal_mutable_section_header_standard(this);
      if (*((_DWORD *)a2 + 9) == 52)
        v108 = (const SnippetUI::SectionHeader_Standard *)*((_QWORD *)a2 + 3);
      else
        v108 = (const SnippetUI::SectionHeader_Standard *)&SnippetUI::_SectionHeader_Standard_default_instance_;
      SnippetUI::SectionHeader_Standard::MergeFrom(v107, v108);
      break;
    case 0x35:
      v109 = SnippetUI::Response_Component::_internal_mutable_section_header_rich(this);
      if (*((_DWORD *)a2 + 9) == 53)
        v110 = (const SnippetUI::SectionHeader_Rich *)*((_QWORD *)a2 + 3);
      else
        v110 = (const SnippetUI::SectionHeader_Rich *)&SnippetUI::_SectionHeader_Rich_default_instance_;
      SnippetUI::SectionHeader_Rich::MergeFrom(v109, v110);
      break;
    case 0x36:
      v111 = (int **)SnippetUI::Response_Component::_internal_mutable_key_value_standard(this);
      if (*((_DWORD *)a2 + 9) == 54)
        v112 = (int **)*((_QWORD *)a2 + 3);
      else
        v112 = (int **)&SnippetUI::_KeyValue_Standard_default_instance_;
      SnippetUI::KeyValue_Standard::MergeFrom(v111, v112);
      break;
    case 0x37:
      v113 = SnippetUI::Response_Component::_internal_mutable_tertiary_header_standard(this);
      if (*((_DWORD *)a2 + 9) == 55)
        v114 = (const SnippetUI::TertiaryHeader_Standard *)*((_QWORD *)a2 + 3);
      else
        v114 = (const SnippetUI::TertiaryHeader_Standard *)&SnippetUI::_TertiaryHeader_Standard_default_instance_;
      SnippetUI::TertiaryHeader_Standard::MergeFrom(v113, v114);
      break;
    case 0x38:
      v115 = SnippetUI::Response_Component::_internal_mutable_simple_item_rich_search_result(this);
      if (*((_DWORD *)a2 + 9) == 56)
        v116 = (const SnippetUI::SimpleItem_RichSearchResult *)*((_QWORD *)a2 + 3);
      else
        v116 = (const SnippetUI::SimpleItem_RichSearchResult *)&SnippetUI::_SimpleItem_RichSearchResult_default_instance_;
      SnippetUI::SimpleItem_RichSearchResult::MergeFrom(v115, v116);
      break;
    case 0x3A:
      v117 = SnippetUI::Response_Component::_internal_mutable_summary_item_pair_number_v2(this);
      if (*((_DWORD *)a2 + 9) == 58)
        v118 = (const SnippetUI::SummaryItem_PairNumberV2 *)*((_QWORD *)a2 + 3);
      else
        v118 = (const SnippetUI::SummaryItem_PairNumberV2 *)&SnippetUI::_SummaryItem_PairNumberV2_default_instance_;
      SnippetUI::SummaryItem_PairNumberV2::MergeFrom(v117, v118);
      break;
    case 0x3B:
      v119 = SnippetUI::Response_Component::_internal_mutable_summary_item_pair_v2(this);
      if (*((_DWORD *)a2 + 9) == 59)
        v120 = (const SnippetUI::SummaryItem_PairV2 *)*((_QWORD *)a2 + 3);
      else
        v120 = (const SnippetUI::SummaryItem_PairV2 *)&SnippetUI::_SummaryItem_PairV2_default_instance_;
      SnippetUI::SummaryItem_PairV2::MergeFrom(v119, v120);
      break;
    case 0x3C:
      v121 = SnippetUI::Response_Component::_internal_mutable_control_player_button(this);
      if (*((_DWORD *)a2 + 9) == 60)
        v122 = (const SnippetUI::Control_PlayerButton *)*((_QWORD *)a2 + 3);
      else
        v122 = (const SnippetUI::Control_PlayerButton *)&SnippetUI::_Control_PlayerButton_default_instance_;
      SnippetUI::Control_PlayerButton::MergeFrom(v121, v122);
      break;
    case 0x3D:
      v123 = SnippetUI::Response_Component::_internal_mutable_summary_item_switch_v2(this);
      if (*((_DWORD *)a2 + 9) == 61)
        v124 = (const SnippetUI::SummaryItem_SwitchV2 *)*((_QWORD *)a2 + 3);
      else
        v124 = (const SnippetUI::SummaryItem_SwitchV2 *)&SnippetUI::_SummaryItem_SwitchV2_default_instance_;
      SnippetUI::SummaryItem_SwitchV2::MergeFrom(v123, v124);
      break;
    default:
      return this;
  }
  return this;
}

void sub_1BFBF7DC0(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;

  MEMORY[0x1C3B8D890](v2, 0x1081C40E1DA5700);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::Response_Component::CopyFrom(SnippetUI::Response_Component *this, const SnippetUI::Response_Component *a2)
{
  if (a2 != this)
  {
    SnippetUI::Response_Component::Clear(this);
    SnippetUI::Response_Component::MergeFrom(this, a2);
  }
}

void SnippetUI::Response_Component::InternalSwap(SnippetUI::Response_Component *this, SnippetUI::Response_Component *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  uint64_t v5;
  google::protobuf::UnknownFieldSet *v6;
  uint64_t v7;
  uint64_t v8;
  google::protobuf::UnknownFieldSet *v9;

  v4 = (SnippetUI::Response_Component *)((char *)this + 8);
  v5 = *((_QWORD *)a2 + 1);
  if ((*((_BYTE *)this + 8) & 1) != 0)
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v6 = v9;
      goto LABEL_6;
    }
  }
  else if ((v5 & 1) == 0)
  {
    goto LABEL_7;
  }
  v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
  google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
LABEL_7:
  v7 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v7;
  v8 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v8;
  LODWORD(v8) = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v8;
}

void SnippetUI::Response::clear_backgrounds(SnippetUI::Response *this)
{
  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::BackgroundElement>::TypeHandler>((uint64_t)this + 40);
}

void SnippetUI::Response::clear_ornaments(SnippetUI::Response *this)
{
  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::OrnamentElement>::TypeHandler>((uint64_t)this + 64);
}

SnippetUI::Response *SnippetUI::Response::Response(SnippetUI::Response *this, const SnippetUI::Response *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  uint64_t v5;

  *(_QWORD *)this = &off_1E7936AB0;
  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (SnippetUI::Response *)((char *)this + 8);
  *(_OWORD *)((char *)this + 24) = 0u;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<SnippetUI::Response_Section>::TypeHandler>((int **)this + 2, (uint64_t)a2 + 16);
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<SnippetUI::BackgroundElement>::TypeHandler>((int **)this + 5, (uint64_t)a2 + 40);
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<SnippetUI::OrnamentElement>::TypeHandler>((int **)this + 8, (uint64_t)a2 + 64);
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = 0;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<SnippetUI::Response_Group>::TypeHandler>((int **)this + 11, (uint64_t)a2 + 88);
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 16) = 0;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((int **)this + 14, (uint64_t)a2 + 112);
  *((_DWORD *)this + 35) = 0;
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom(v4, (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  *((_BYTE *)this + 136) = *((_BYTE *)a2 + 136);
  return this;
}

void sub_1BFBF7FC0(_Unwind_Exception *a1)
{
  uint64_t *v1;
  google::protobuf::internal::RepeatedPtrFieldBase *v2;
  google::protobuf::internal::RepeatedPtrFieldBase *v3;
  google::protobuf::internal::RepeatedPtrFieldBase *v4;
  google::protobuf::internal::RepeatedPtrFieldBase *v5;
  uint64_t v6;

  google::protobuf::RepeatedPtrField<std::string>::~RepeatedPtrField(v6);
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField(v5);
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField(v4);
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField(v3);
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void sub_1BFBF803C()
{
  google::protobuf::internal::ArenaImpl **v0;

  google::protobuf::internal::RepeatedPtrFieldBase::~RepeatedPtrFieldBase(v0);
  JUMPOUT(0x1BFBF802CLL);
}

void SnippetUI::Response::InternalSwap(SnippetUI::Response *this, SnippetUI::Response *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  uint64_t v5;
  google::protobuf::UnknownFieldSet *v6;
  char v7;
  google::protobuf::UnknownFieldSet *v8;

  v4 = (SnippetUI::Response *)((char *)this + 8);
  v5 = *((_QWORD *)a2 + 1);
  if ((*((_BYTE *)this + 8) & 1) != 0)
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v6 = v8;
      goto LABEL_6;
    }
  }
  else if ((v5 & 1) == 0)
  {
    goto LABEL_7;
  }
  v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
  google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
LABEL_7:
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((SnippetUI::Response *)((char *)this + 16), (SnippetUI::Response *)((char *)a2 + 16));
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((SnippetUI::Response *)((char *)this + 40), (SnippetUI::Response *)((char *)a2 + 40));
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((SnippetUI::Response *)((char *)this + 64), (SnippetUI::Response *)((char *)a2 + 64));
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((SnippetUI::Response *)((char *)this + 88), (SnippetUI::Response *)((char *)a2 + 88));
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((SnippetUI::Response *)((char *)this + 112), (SnippetUI::Response *)((char *)a2 + 112));
  v7 = *((_BYTE *)this + 136);
  *((_BYTE *)this + 136) = *((_BYTE *)a2 + 136);
  *((_BYTE *)a2 + 136) = v7;
}

void SnippetUI::IntentsUI_Standard_Slot::InitAsDefaultInstance(SnippetUI::IntentsUI_Standard_Slot *this)
{
  qword_1ED1D4860 = (uint64_t)&SnippetUI::_Response_Component_default_instance_;
}

uint64_t SnippetUI::IntentsUI_Standard_Slot::_Internal::fallback(SnippetUI::IntentsUI_Standard_Slot::_Internal *this, const SnippetUI::IntentsUI_Standard_Slot *a2)
{
  return *((_QWORD *)this + 5);
}

SnippetUI::IntentsUI_Standard_Slot *SnippetUI::IntentsUI_Standard_Slot::IntentsUI_Standard_Slot(SnippetUI::IntentsUI_Standard_Slot *this, const SnippetUI::IntentsUI_Standard_Slot *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  uint64_t v5;
  SnippetUI::Response_Component *v6;

  *(_QWORD *)this = &off_1E7936B70;
  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (SnippetUI::IntentsUI_Standard_Slot *)((char *)this + 8);
  *(_OWORD *)((char *)this + 24) = 0u;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((int **)this + 2, (uint64_t)a2 + 16);
  *((_DWORD *)this + 12) = 0;
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom(v4, (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  v6 = 0;
  if (a2 != (const SnippetUI::IntentsUI_Standard_Slot *)&SnippetUI::_IntentsUI_Standard_Slot_default_instance_
    && *((_QWORD *)a2 + 5))
  {
    v6 = (SnippetUI::Response_Component *)operator new();
    SnippetUI::Response_Component::Response_Component(v6, *((const SnippetUI::Response_Component **)a2 + 5));
  }
  *((_QWORD *)this + 5) = v6;
  return this;
}

void sub_1BFBF8210(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  MEMORY[0x1C3B8D890](v3, 0x10A1C40EE95837BLL);
  google::protobuf::RepeatedPtrField<std::string>::~RepeatedPtrField(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::IntentsUI_Standard_Slot::InternalSwap(SnippetUI::IntentsUI_Standard_Slot *this, SnippetUI::IntentsUI_Standard_Slot *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  uint64_t v5;
  google::protobuf::UnknownFieldSet *v6;
  uint64_t v7;
  google::protobuf::UnknownFieldSet *v8;

  v4 = (SnippetUI::IntentsUI_Standard_Slot *)((char *)this + 8);
  v5 = *((_QWORD *)a2 + 1);
  if ((*((_BYTE *)this + 8) & 1) != 0)
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v6 = v8;
      goto LABEL_6;
    }
  }
  else if ((v5 & 1) == 0)
  {
    goto LABEL_7;
  }
  v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
  google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
LABEL_7:
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((SnippetUI::IntentsUI_Standard_Slot *)((char *)this + 16), (SnippetUI::IntentsUI_Standard_Slot *)((char *)a2 + 16));
  v7 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v7;
}

void SnippetUI::IntentsUI_Standard::InitAsDefaultInstance(SnippetUI::IntentsUI_Standard *this)
{
  qword_1ED1D43B8 = (uint64_t)&SnippetUI::_ActionProperty_default_instance_;
}

uint64_t SnippetUI::IntentsUI_Standard::_Internal::action(SnippetUI::IntentsUI_Standard::_Internal *this, const SnippetUI::IntentsUI_Standard *a2)
{
  return *((_QWORD *)this + 7);
}

uint64_t SnippetUI::IntentsUI_Standard::clear_action(SnippetUI::IntentsUI_Standard *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 7);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 7) = 0;
  return result;
}

SnippetUI::IntentsUI_Standard *SnippetUI::IntentsUI_Standard::IntentsUI_Standard(SnippetUI::IntentsUI_Standard *this, const SnippetUI::IntentsUI_Standard *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  SnippetUI::ActionProperty *v11;

  *(_QWORD *)this = &off_1E7936C30;
  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (SnippetUI::IntentsUI_Standard *)((char *)this + 8);
  *(_OWORD *)((char *)this + 24) = 0u;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<SnippetUI::IntentsUI_Standard_Slot>::TypeHandler>((int **)this + 2, (uint64_t)a2 + 16);
  *((_DWORD *)this + 17) = 0;
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom(v4, (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  *((_QWORD *)this + 5) = &google::protobuf::internal::fixed_address_empty_string;
  v6 = *((_QWORD *)a2 + 5);
  if (*(char *)(v6 + 23) < 0)
    v7 = *(_QWORD *)(v6 + 8);
  else
    v7 = *(unsigned __int8 *)(v6 + 23);
  if ((uint64_t *)v6 != &google::protobuf::internal::fixed_address_empty_string && v7 != 0)
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 5, v6);
  *((_QWORD *)this + 6) = &google::protobuf::internal::fixed_address_empty_string;
  v9 = *((_QWORD *)a2 + 6);
  if (*(char *)(v9 + 23) < 0)
    v10 = *(_QWORD *)(v9 + 8);
  else
    v10 = *(unsigned __int8 *)(v9 + 23);
  if ((uint64_t *)v9 != &google::protobuf::internal::fixed_address_empty_string && v10)
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 6, v9);
  v11 = 0;
  if (a2 != (const SnippetUI::IntentsUI_Standard *)&SnippetUI::_IntentsUI_Standard_default_instance_
    && *((_QWORD *)a2 + 7))
  {
    v11 = (SnippetUI::ActionProperty *)operator new();
    SnippetUI::ActionProperty::ActionProperty(v11, *((const SnippetUI::ActionProperty **)a2 + 7));
  }
  *((_QWORD *)this + 7) = v11;
  *((_BYTE *)this + 64) = *((_BYTE *)a2 + 64);
  return this;
}

void sub_1BFBF8494(_Unwind_Exception *a1)
{
  uint64_t *v1;
  google::protobuf::internal::RepeatedPtrFieldBase *v2;
  uint64_t v3;

  MEMORY[0x1C3B8D890](v3, 0x10A1C40B18DE219);
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::IntentsUI_Standard::CopyFrom(SnippetUI::IntentsUI_Standard *this, const SnippetUI::IntentsUI_Standard *a2)
{
  if (a2 != this)
  {
    SnippetUI::IntentsUI_Standard::Clear(this);
    SnippetUI::IntentsUI_Standard::MergeFrom(this, a2);
  }
}

void SnippetUI::IntentsUI_Standard::InternalSwap(SnippetUI::IntentsUI_Standard *this, SnippetUI::IntentsUI_Standard *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  uint64_t v5;
  google::protobuf::UnknownFieldSet *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  google::protobuf::UnknownFieldSet *v20;

  v4 = (SnippetUI::IntentsUI_Standard *)((char *)this + 8);
  v5 = *((_QWORD *)a2 + 1);
  if ((*((_BYTE *)this + 8) & 1) != 0)
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v6 = v20;
      goto LABEL_6;
    }
LABEL_5:
    v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
    google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
    goto LABEL_7;
  }
  if ((v5 & 1) != 0)
    goto LABEL_5;
LABEL_7:
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((SnippetUI::IntentsUI_Standard *)((char *)this + 16), (SnippetUI::IntentsUI_Standard *)((char *)a2 + 16));
  v7 = (uint64_t *)*((_QWORD *)this + 5);
  v8 = (uint64_t **)((char *)a2 + 40);
  if (v7 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_13;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 5, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v7 = (uint64_t *)*((_QWORD *)this + 5);
  }
  v9 = *v8;
  if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 5, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v9 = *v8;
  }
  v10 = v7[2];
  v11 = *(_OWORD *)v7;
  v12 = v9[2];
  *(_OWORD *)v7 = *(_OWORD *)v9;
  v7[2] = v12;
  *(_OWORD *)v9 = v11;
  v9[2] = v10;
LABEL_13:
  v13 = (uint64_t *)*((_QWORD *)this + 6);
  v14 = (uint64_t **)((char *)a2 + 48);
  if (v13 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_19;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 6, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v13 = (uint64_t *)*((_QWORD *)this + 6);
  }
  v15 = *v14;
  if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 6, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v15 = *v14;
  }
  v16 = v13[2];
  v17 = *(_OWORD *)v13;
  v18 = v15[2];
  *(_OWORD *)v13 = *(_OWORD *)v15;
  v13[2] = v18;
  *(_OWORD *)v15 = v17;
  v15[2] = v16;
LABEL_19:
  v19 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v19;
  LOBYTE(v19) = *((_BYTE *)this + 64);
  *((_BYTE *)this + 64) = *((_BYTE *)a2 + 64);
  *((_BYTE *)a2 + 64) = v19;
}

BOOL siri::dialogengine::DeviceIsHomePod(siri::dialogengine *this, const siri::dialogengine::Context *a2)
{
  void *v3;
  uint64_t v4;
  _BOOL8 IsTrue;
  _BOOL8 v6;
  char *v7;
  const char *v8;
  void **v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *v14[2];
  char v15;
  void *__p[2];
  char v17;
  const void *v18;
  std::__shared_weak_count *v19;

  std::string::basic_string[abi:ne180100]<0>(__p, "device");
  siri::dialogengine::Context::FindVariable(&v18, this, __p);
  if (v17 < 0)
    operator delete(__p[0]);
  if (!v18
  {
    v6 = 0;
    goto LABEL_9;
  }
  v4 = (uint64_t)v3;
  std::string::basic_string[abi:ne180100]<0>(v14, "isHomePod");
  IsTrue = siri::dialogengine::DeviceFieldIsTrue(v4, (const void **)v14);
  v6 = IsTrue;
  if ((v15 & 0x80000000) == 0)
  {
    if (IsTrue)
      goto LABEL_22;
LABEL_9:
    v7 = "false";
    goto LABEL_10;
  }
  operator delete(v14[0]);
  if (!v6)
    goto LABEL_9;
LABEL_22:
  v7 = "true";
LABEL_10:
  std::string::basic_string[abi:ne180100]<0>(__p, v7);
  if (v17 >= 0)
    v9 = __p;
  else
    v9 = (void **)__p[0];
  siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"Is HomePod (from device.isHomePod): %s", v8, v9);
  if (v17 < 0)
    operator delete(__p[0]);
  v10 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  return v6;
}

void sub_1BFBF8800(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;

  if (a16 < 0)
    operator delete(__p);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](v22 - 32);
  _Unwind_Resume(a1);
}

void sub_1BFBF8844(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  JUMPOUT(0x1BFBF883CLL);
}

BOOL siri::dialogengine::DeviceFieldIsTrue(uint64_t a1, const void **a2)
{
  uint64_t v3;
  uint64_t v4;
  const void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _BYTE *v9;
  _BOOL8 v10;
  unint64_t *v11;
  unint64_t v12;

  v3 = std::__tree<std::string>::find<std::string>(a1 + 72, a2);
  if (a1 + 80 == v3)
    return 0;
  v4 = v3;
  v5 = *(const void **)(v3 + 56);
  v6 = *(std::__shared_weak_count **)(v4 + 64);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  if (v5
  {
    v10 = v9[66] != 0;
    if (!v6)
      return v10;
  }
  else
  {
    v10 = 0;
    if (!v6)
      return v10;
  }
  v11 = (unint64_t *)&v6->__shared_owners_;
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 - 1, v11));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  return v10;
}

uint64_t siri::dialogengine::DeviceIsHomePod(siri::dialogengine *this, siri::dialogengine::VariableObject *a2, siri::dialogengine::VariableObject *a3)
{
  uint64_t DeviceParameter;
  _BOOL8 IsTrue;
  char *v5;
  const char *v6;
  void **v7;
  void *v9[2];
  char v10;
  void *__p[2];
  char v12;

  DeviceParameter = (uint64_t)siri::dialogengine::GetDeviceParameter(this, a2, a3);
  if (DeviceParameter)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "isHomePod");
    IsTrue = siri::dialogengine::DeviceFieldIsTrue(DeviceParameter, (const void **)__p);
    DeviceParameter = IsTrue;
    if (v12 < 0)
    {
      operator delete(__p[0]);
      if ((DeviceParameter & 1) != 0)
        goto LABEL_4;
    }
    else if (IsTrue)
    {
LABEL_4:
      v5 = "true";
      goto LABEL_7;
    }
  }
  v5 = "false";
LABEL_7:
  std::string::basic_string[abi:ne180100]<0>(v9, v5);
  if (v10 >= 0)
    v7 = v9;
  else
    v7 = (void **)v9[0];
  siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"Is HomePod (from device.isHomePod): %s", v6, v7);
  if (v10 < 0)
    operator delete(v9[0]);
  return DeviceParameter;
}

void sub_1BFBF89E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

siri::dialogengine *siri::dialogengine::GetDeviceParameter(siri::dialogengine *this, siri::dialogengine::VariableObject *a2, siri::dialogengine::VariableObject *a3)
{
  siri::dialogengine *v3;
  uint64_t v5;
  const void *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD *v12;
  const void *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  void *__p[2];
  char v21;

  if (!this)
    goto LABEL_19;
  v3 = this;
  std::string::basic_string[abi:ne180100]<0>(__p, "device");
  v5 = std::__tree<std::string>::find<std::string>((uint64_t)v3 + 72, (const void **)__p);
  if ((siri::dialogengine *)((char *)v3 + 80) == (siri::dialogengine *)v5)
  {
    v6 = 0;
    v7 = 0;
  }
  else
  {
    v6 = *(const void **)(v5 + 56);
    v7 = *(std::__shared_weak_count **)(v5 + 64);
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
  }
  if (v21 < 0)
  {
    operator delete(__p[0]);
    if (v6)
    {
LABEL_11:
      if (!v7)
        goto LABEL_18;
      goto LABEL_15;
    }
  }
  else if (v6)
  {
    goto LABEL_11;
  }
  if (!v7)
    goto LABEL_18;
LABEL_15:
  v10 = (unint64_t *)&v7->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (v11)
  {
LABEL_18:
    if (v6)
      return v3;
    goto LABEL_19;
  }
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  if (v6)
    return v3;
LABEL_19:
  if (!a2)
    return 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "device");
  v12 = (_QWORD *)std::__tree<std::string>::find<std::string>((uint64_t)a2 + 72, (const void **)__p);
  if ((_QWORD *)((char *)a2 + 80) == v12)
  {
    v13 = 0;
    v14 = 0;
  }
  else
  {
    v13 = (const void *)v12[7];
    v14 = (std::__shared_weak_count *)v12[8];
    if (v14)
    {
      v15 = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
    }
  }
  if (v21 < 0)
    operator delete(__p[0]);
  if (v13)
  if (v14)
  {
    v17 = (unint64_t *)&v14->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
      if (v13)
        return v3;
      return 0;
    }
  }
  if (!v13)
    return 0;
  return v3;
}

uint64_t siri::dialogengine::DeviceIsWatch(siri::dialogengine *this, siri::dialogengine::VariableObject *a2, siri::dialogengine::VariableObject *a3)
{
  uint64_t DeviceParameter;
  _BOOL8 IsTrue;
  char *v5;
  const char *v6;
  void **v7;
  void *v9[2];
  char v10;
  void *__p[2];
  char v12;

  DeviceParameter = (uint64_t)siri::dialogengine::GetDeviceParameter(this, a2, a3);
  if (DeviceParameter)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "isWatch");
    IsTrue = siri::dialogengine::DeviceFieldIsTrue(DeviceParameter, (const void **)__p);
    DeviceParameter = IsTrue;
    if (v12 < 0)
    {
      operator delete(__p[0]);
      if ((DeviceParameter & 1) != 0)
        goto LABEL_4;
    }
    else if (IsTrue)
    {
LABEL_4:
      v5 = "true";
      goto LABEL_7;
    }
  }
  v5 = "false";
LABEL_7:
  std::string::basic_string[abi:ne180100]<0>(v9, v5);
  if (v10 >= 0)
    v7 = v9;
  else
    v7 = (void **)v9[0];
  siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"Is watch (from device.isWatch): %s", v6, v7);
  if (v10 < 0)
    operator delete(v9[0]);
  return DeviceParameter;
}

void sub_1BFBF8CA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::DialogPhoneNumber::toString(siri::dialogengine::DialogPhoneNumber *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  void *RequiredStringParameter;
  void *OptionalStringParameter;
  void *v7;
  std::string v8;
  std::string __p;
  void *v10;
  char v11;
  void *v12;
  char v13;
  void *v14;
  char v15;
  void *v16;
  char v17;
  void *v18;
  char v19;
  void *v20;
  char v21;
  std::string v22;

  std::string::basic_string[abi:ne180100]<0>(&__p, "value");
  RequiredStringParameter = siri::dialogengine::GetRequiredStringParameter((const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "countryCode");
  OptionalStringParameter = siri::dialogengine::GetOptionalStringParameter((const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (RequiredStringParameter)
    {
LABEL_5:
      (*(void (**)(std::string *__return_ptr, void *))(*(_QWORD *)RequiredStringParameter + 48))(&__p, RequiredStringParameter);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v22, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      else
        v22 = __p;
      if (v21 < 0)
        operator delete(v20);
      if (v19 < 0)
        operator delete(v18);
      if (v17 < 0)
        operator delete(v16);
      if (v15 < 0)
        operator delete(v14);
      if (v13 < 0)
        operator delete(v12);
      if (v11 < 0)
        operator delete(v10);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if (OptionalStringParameter)
          goto LABEL_24;
        goto LABEL_27;
      }
LABEL_23:
      if (OptionalStringParameter)
      {
LABEL_24:
        (*(void (**)(std::string *__return_ptr, void *))(*(_QWORD *)OptionalStringParameter + 48))(&__p, OptionalStringParameter);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v8, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
        else
          v8 = __p;
        if (v21 < 0)
          operator delete(v20);
        if (v19 < 0)
          operator delete(v18);
        if (v17 < 0)
          operator delete(v16);
        if (v15 < 0)
          operator delete(v14);
        if (v13 < 0)
          operator delete(v12);
        if (v11 < 0)
          operator delete(v10);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
LABEL_43:
        operator new();
        std::string::basic_string[abi:ne180100]<0>(&v7, "");
        siri::dialogengine::PhoneNumber::FormatNumber(this, (uint64_t)&v22, (uint64_t)&v8, (uint64_t)&__p);
      }
LABEL_27:
      std::string::basic_string[abi:ne180100]<0>(&v8, "");
      goto LABEL_43;
    }
  }
  else if (RequiredStringParameter)
  {
    goto LABEL_5;
  }
  std::string::basic_string[abi:ne180100]<0>(&v22, "");
  goto LABEL_23;
}

void sub_1BFBF8FE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;

  siri::dialogengine::SpeakableString::~SpeakableString((void **)&a22);
  if (*(char *)(v27 - 41) < 0)
    operator delete(*(void **)(v27 - 64));
  _Unwind_Resume(a1);
}

std::string *siri::dialogengine::DialogPhoneNumber::areaCode(siri::dialogengine::DialogPhoneNumber *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  void *RequiredStringParameter;
  void *OptionalStringParameter;
  std::string *v7;
  std::string v9;
  std::string v10;
  std::string __p;
  void *v12;
  char v13;
  void *v14;
  char v15;
  void *v16;
  char v17;
  void *v18;
  char v19;
  void *v20;
  char v21;
  void *v22;
  char v23;
  std::string v24;

  std::string::basic_string[abi:ne180100]<0>(&__p, "value");
  RequiredStringParameter = siri::dialogengine::GetRequiredStringParameter((const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "countryCode");
  OptionalStringParameter = siri::dialogengine::GetOptionalStringParameter((const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)a2);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (RequiredStringParameter)
      goto LABEL_5;
LABEL_8:
    std::string::basic_string[abi:ne180100]<0>(&v24, "");
    goto LABEL_23;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (!RequiredStringParameter)
    goto LABEL_8;
LABEL_5:
  (*(void (**)(std::string *__return_ptr, void *))(*(_QWORD *)RequiredStringParameter + 48))(&__p, RequiredStringParameter);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v24, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v24 = __p;
  if (v23 < 0)
    operator delete(v22);
  if (v21 < 0)
    operator delete(v20);
  if (v19 < 0)
    operator delete(v18);
  if (v17 < 0)
    operator delete(v16);
  if (v15 < 0)
    operator delete(v14);
  if (v13 < 0)
    operator delete(v12);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (OptionalStringParameter)
      goto LABEL_24;
LABEL_27:
    std::string::basic_string[abi:ne180100]<0>(&v10, "");
    goto LABEL_43;
  }
LABEL_23:
  if (!OptionalStringParameter)
    goto LABEL_27;
LABEL_24:
  (*(void (**)(std::string *__return_ptr, void *))(*(_QWORD *)OptionalStringParameter + 48))(&__p, OptionalStringParameter);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v10, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v10 = __p;
  if (v23 < 0)
    operator delete(v22);
  if (v21 < 0)
    operator delete(v20);
  if (v19 < 0)
    operator delete(v18);
  if (v17 < 0)
    operator delete(v16);
  if (v15 < 0)
    operator delete(v14);
  if (v13 < 0)
    operator delete(v12);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_43:
  v7 = (std::string *)operator new();
  std::string::basic_string[abi:ne180100]<0>(&v9, "");
  siri::dialogengine::PhoneNumber::AreaCode(this, (uint64_t *)&v24, (uint64_t)&v10, (uint64_t)&__p);
  siri::dialogengine::VariableString::VariableString(v7, &v9, (const siri::dialogengine::SpeakableString *)&__p);
  if (v23 < 0)
    operator delete(v22);
  if (v21 < 0)
    operator delete(v20);
  if (v19 < 0)
    operator delete(v18);
  if (v17 < 0)
    operator delete(v16);
  if (v15 < 0)
    operator delete(v14);
  if (v13 < 0)
    operator delete(v12);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__r_.__value_.__l.__data_);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  return v7;
}

void sub_1BFBF93B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;

  siri::dialogengine::SpeakableString::~SpeakableString((void **)&a22);
  if (*(char *)(v27 - 41) < 0)
    operator delete(*(void **)(v27 - 64));
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::WriteAssetDeliveryConfig(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *v8;
  const char *v9;
  void *v10;
  void *v11;
  uint64_t *v12;
  void *v13;
  void *v14;
  const char *v15;
  void *v16;
  void *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  id v25;
  id v26;
  void *v27;
  int v28;
  void *v29;
  int v30;
  id v31;
  char v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  const char *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  const char *v41;
  void *v42;
  uint64_t v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  const char *v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  const char *v52;
  void *v54;
  void *v55;
  id v56;
  id v57;
  id v58;
  const __CFString *v59;
  _QWORD v60[2];

  v60[1] = *MEMORY[0x1E0C80C00];
  if (*((char *)a2 + 23) >= 0)
    v8 = a2;
  else
    v8 = (uint64_t *)*a2;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v8);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  if (v10)
  {
    v11 = (void *)MEMORY[0x1E0C99E98];
    if (*((char *)a1 + 23) >= 0)
      v12 = a1;
    else
      v12 = (uint64_t *)*a1;
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v12);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "fileURLWithPath:isDirectory:", v13, 1);
    v14 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v14)
    {
      if (*((char *)a2 + 23) >= 0)
        v20 = a2;
      else
        v20 = (uint64_t *)*a2;
      if (*((char *)a1 + 23) >= 0)
        v21 = a1;
      else
        v21 = (uint64_t *)*a1;
      siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Failed to write asset delivery config with factor %s to invalid directory \"%s\"", v15, v20, v21);
      v19 = 0;
      goto LABEL_48;
    }
    objc_msgSend(v14, "URLByAppendingPathComponent:", CFSTR("DialogAssetDelivery.plist"));
    v55 = (void *)objc_claimAutoreleasedReturnValue();
    v59 = CFSTR("Factor");
    v60[0] = v10;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v60, &v59, 1);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v17 = (void *)objc_msgSend(v16, "mutableCopy");

    if (*((char *)a3 + 23) < 0)
    {
      if (!a3[1])
        goto LABEL_26;
      a3 = (uint64_t *)*a3;
    }
    else if (!*((_BYTE *)a3 + 23))
    {
LABEL_26:
      if (*((char *)a4 + 23) < 0)
      {
        if (!a4[1])
          goto LABEL_32;
        a4 = (uint64_t *)*a4;
      }
      else if (!*((_BYTE *)a4 + 23))
      {
LABEL_32:
        v58 = 0;
        objc_msgSend(MEMORY[0x1E0CB38B0], "dataWithPropertyList:format:options:error:", v17, 100, 0, &v58);
        v24 = objc_claimAutoreleasedReturnValue();
        v25 = v58;
        v54 = (void *)v24;
        if (!v24)
        {
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@"), v25);
          v37 = (void *)objc_claimAutoreleasedReturnValue();
          v38 = objc_msgSend(objc_retainAutorelease(v10), "UTF8String");
          objc_msgSend(v55, "path");
          v34 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
          v39 = objc_msgSend(v34, "UTF8String");
          v26 = objc_retainAutorelease(v37);
          v40 = objc_msgSend(v26, "UTF8String");
          siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Failed to serialize asset delivery config with factor %s to %s : \"%s\"", v41, v38, v39, v40);
LABEL_46:
          v19 = 0;
          goto LABEL_47;
        }
        objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
        v26 = (id)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v55, "path");
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        v28 = objc_msgSend(v26, "fileExistsAtPath:isDirectory:", v27, 0);

        if (!v28)
          goto LABEL_38;
        objc_msgSend(v55, "path");
        v29 = (void *)objc_claimAutoreleasedReturnValue();
        if (objc_msgSend(v26, "isDeletableFileAtPath:", v29))
        {
          v57 = v25;
          v30 = objc_msgSend(v26, "removeItemAtURL:error:", v55, &v57);
          v31 = v57;

          if (v30)
          {

            if (!v31)
            {
              v25 = 0;
LABEL_38:
              v56 = v25;
              v32 = objc_msgSend(v54, "writeToURL:options:error:", v55, 0, &v56);
              v31 = v56;

              if ((v32 & 1) != 0)
              {
                v33 = objc_msgSend(objc_retainAutorelease(v10), "UTF8String");
                objc_msgSend(v55, "path");
                v34 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
                v35 = objc_msgSend(v34, "UTF8String");
                siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"Wrote asset delivery config with factor %s to %s", v36, v33, v35);
                v19 = 1;
                v25 = v31;
LABEL_47:

LABEL_48:
                goto LABEL_49;
              }
              objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@"), v31);
              v42 = (void *)objc_claimAutoreleasedReturnValue();
              v43 = objc_msgSend(objc_retainAutorelease(v10), "UTF8String");
              objc_msgSend(v55, "path");
              v44 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
              v45 = objc_msgSend(v44, "UTF8String");
              v34 = objc_retainAutorelease(v42);
              v46 = objc_msgSend(v34, "UTF8String");
              siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Failed to write asset delivery config with factor %s to %s : \"%s\"", v47, v43, v45, v46);
              goto LABEL_45;
            }
LABEL_44:
            objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@"), v31);
            v48 = (void *)objc_claimAutoreleasedReturnValue();
            v49 = objc_msgSend(objc_retainAutorelease(v10), "UTF8String");
            objc_msgSend(v55, "path");
            v44 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
            v50 = objc_msgSend(v44, "UTF8String");
            v34 = objc_retainAutorelease(v48);
            v51 = objc_msgSend(v34, "UTF8String");
            siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Failed to remove existing config to replace with factor %s at %s : \"%s\"", v52, v49, v50, v51);
LABEL_45:
            v25 = v31;

            goto LABEL_46;
          }
        }
        else
        {
          v31 = v25;
        }

        goto LABEL_44;
      }
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", a4);
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v17, "setValue:forKey:", v23, CFSTR("Minimum Differential Update Version"));

      goto LABEL_32;
    }
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", a3);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "setValue:forKey:", v22, CFSTR("Version"));

    goto LABEL_26;
  }
  if (*((char *)a2 + 23) >= 0)
    v18 = a2;
  else
    v18 = (uint64_t *)*a2;
  siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Failed to write asset delivery config with invalid factor \"%s\"", v9, v18);
  v19 = 0;
LABEL_49:

  return v19;
}

void sub_1BFBF9984(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::ReadAssetDeliveryConfig(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v8;
  uint64_t *v9;
  void *v10;
  void *v11;
  const char *v12;
  void *v13;
  void *v14;
  void *v15;
  char v16;
  void *v17;
  id v18;
  void *v19;
  void *v20;
  void *v21;
  id v22;
  uint64_t *v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  const char *v27;
  void *v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  const char *v39;
  void *v40;
  void *v41;
  uint64_t v42;
  id v43;
  uint64_t v44;
  const char *v45;
  uint64_t v46;
  id v47;
  uint64_t v48;
  const char *v49;
  void *v51;
  id v52;

  if (a2)
    MEMORY[0x1C3B8D53C](a2, "");
  if (a3)
    MEMORY[0x1C3B8D53C](a3, "");
  if (a4)
    MEMORY[0x1C3B8D53C](a4, "");
  v8 = (void *)MEMORY[0x1E0C99E98];
  if (*((char *)a1 + 23) >= 0)
    v9 = a1;
  else
    v9 = (uint64_t *)*a1;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "fileURLWithPath:isDirectory:", v10, 1);
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  if (v11)
  {
    objc_msgSend(v11, "URLByAppendingPathComponent:", CFSTR("DialogAssetDelivery.plist"));
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "path");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = objc_msgSend(v14, "fileExistsAtPath:isDirectory:", v15, 0);

    if ((v16 & 1) == 0)
    {
      objc_msgSend(v13, "path");
      v25 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      v26 = objc_msgSend(v25, "UTF8String");
      siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"No Asset Delivery config found at \"%s\"", v27, v26);

      v24 = 0;
LABEL_34:

      goto LABEL_35;
    }
    v52 = 0;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithContentsOfURL:error:", v13, &v52);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = v52;
    v51 = v18;
    if (v17)
    {
      objc_msgSend(v17, "objectForKeyedSubscript:", CFSTR("Factor"));
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      v20 = v19;
      if (v19)
      {
        if (a2)
          MEMORY[0x1C3B8D53C](a2, objc_msgSend(objc_retainAutorelease(v19), "UTF8String"));
        objc_msgSend(v17, "objectForKeyedSubscript:", CFSTR("Version"));
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        v22 = v21;
        if (v21)
        {
          if (a3)
            MEMORY[0x1C3B8D53C](a3, objc_msgSend(objc_retainAutorelease(v21), "UTF8String"));
        }
        else
        {
          v36 = objc_msgSend(CFSTR("Version"), "UTF8String");
          objc_msgSend(v13, "path");
          v37 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
          v38 = objc_msgSend(v37, "UTF8String");
          siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"No value in asset delivery config for key %s from directory %s", v39, v36, v38, v51);

        }
        objc_msgSend(v17, "objectForKeyedSubscript:", CFSTR("Minimum Differential Update Version"));
        v40 = (void *)objc_claimAutoreleasedReturnValue();
        v41 = v40;
        if (v40)
        {
          if (a4)
            MEMORY[0x1C3B8D53C](a4, objc_msgSend(objc_retainAutorelease(v40), "UTF8String"));
        }
        else
        {
          v42 = objc_msgSend(CFSTR("Minimum Differential Update Version"), "UTF8String");
          objc_msgSend(v13, "path");
          v43 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
          v44 = objc_msgSend(v43, "UTF8String");
          siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"No value in asset delivery config for key %s from directory %s", v45, v42, v44);

        }
        v30 = objc_retainAutorelease(v20);
        v46 = objc_msgSend(v30, "UTF8String");
        objc_msgSend(v13, "path");
        v47 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
        v48 = objc_msgSend(v47, "UTF8String");
        siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"Read asset delivery config with factor %s from %s", v49, v46, v48);

        v24 = 1;
        goto LABEL_33;
      }
      v33 = objc_msgSend(CFSTR("Factor"), "UTF8String");
      objc_msgSend(v13, "path");
      v22 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      v34 = objc_msgSend(v22, "UTF8String");
      siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Failed to find value in asset delivery config for key %s from directory %s", v35, v33, v34, v51);
      v30 = 0;
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@"), v18);
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "path");
      v22 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      v29 = objc_msgSend(v22, "UTF8String");
      v30 = objc_retainAutorelease(v28);
      v31 = objc_msgSend(v30, "UTF8String");
      siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Failed to read asset delivery config from directory %s : \"%s\"", v32, v29, v31, v51);
    }
    v24 = 0;
LABEL_33:

    goto LABEL_34;
  }
  if (*((char *)a1 + 23) >= 0)
    v23 = a1;
  else
    v23 = (uint64_t *)*a1;
  siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Failed to read asset delivery config from invalid directory \"%s\"", v12, v23);
  v24 = 0;
LABEL_35:

  return v24;
}

void sub_1BFBF9E9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void sub_1BFBF9F48()
{
  void *v0;

  JUMPOUT(0x1BFBF9F40);
}

void siri::dialogengine::GetFrameworkResourcePath(std::string *a1@<X8>)
{
  unsigned __int8 v3;
  unsigned __int8 v4;
  unint64_t v5;
  __int128 v6;
  _QWORD *v7;
  char v8;
  char **v9;
  char *v10;

  if ((v3 & 1) == 0
  {
    __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE4AB8], &siri::dialogengine::GetFrameworkResourcePath(void)::sFrameworkResourcePathMutex, &dword_1BF794000);
  }
  std::mutex::lock(&siri::dialogengine::GetFrameworkResourcePath(void)::sFrameworkResourcePathMutex);
  if ((v4 & 1) == 0
  {
    v7 = (_QWORD *)operator new();
    *v7 = 0;
    siri::dialogengine::GetFrameworkResourcePath(void)::flag = (uint64_t)v7;
  }
  v5 = atomic_load((unint64_t *)siri::dialogengine::GetFrameworkResourcePath(void)::flag);
  if (v5 != -1)
  {
    v10 = &v8;
    v9 = &v10;
    std::__call_once((std::once_flag::_State_type *)siri::dialogengine::GetFrameworkResourcePath(void)::flag, &v9, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::GetFrameworkResourcePath(void)::$_0 &&>>);
  }
  if (siri::dialogengine::GetFrameworkResourcePath(void)::sFrameworkResourcePath)
  {
    if (*(char *)(siri::dialogengine::GetFrameworkResourcePath(void)::sFrameworkResourcePath + 23) < 0)
    {
      std::string::__init_copy_ctor_external(a1, *(const std::string::value_type **)siri::dialogengine::GetFrameworkResourcePath(void)::sFrameworkResourcePath, *(_QWORD *)(siri::dialogengine::GetFrameworkResourcePath(void)::sFrameworkResourcePath + 8));
    }
    else
    {
      v6 = *(_OWORD *)siri::dialogengine::GetFrameworkResourcePath(void)::sFrameworkResourcePath;
      a1->__r_.__value_.__r.__words[2] = *(_QWORD *)(siri::dialogengine::GetFrameworkResourcePath(void)::sFrameworkResourcePath
                                                   + 16);
      *(_OWORD *)&a1->__r_.__value_.__l.__data_ = v6;
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a1, "");
  }
  std::mutex::unlock(&siri::dialogengine::GetFrameworkResourcePath(void)::sFrameworkResourcePathMutex);
}

void sub_1BFBFA0A8(_Unwind_Exception *a1)
{
  std::mutex::unlock(&siri::dialogengine::GetFrameworkResourcePath(void)::sFrameworkResourcePathMutex);
  _Unwind_Resume(a1);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::GetFrameworkResourcePath(void)::$_0 &&>>()
{
  const char *v0;
  void *v1;
  uint64_t v2;
  id v3;
  const char *v4;
  id v5;

  +[DEBundle frameworkBundle](DEBundle, "frameworkBundle");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  if (v5 && (objc_msgSend(v5, "resourcePath"), (v1 = (void *)objc_claimAutoreleasedReturnValue()) != 0))
  {
    v2 = operator new();
    v3 = objc_retainAutorelease(v1);
    std::string::basic_string[abi:ne180100]<0>((_QWORD *)v2, (char *)objc_msgSend(v3, "UTF8String"));
    siri::dialogengine::GetFrameworkResourcePath(void)::sFrameworkResourcePath = v2;
    if (*(char *)(v2 + 23) < 0)
      v2 = *(_QWORD *)v2;
    siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"Initialized sFrameworkResourcePath to [%s]", v4, v2);

  }
  else
  {
    siri::dialogengine::Log::Warn((siri::dialogengine::Log *)"Failed to initialize sFrameworkResourcePath", v0);
  }

}

void sub_1BFBFA1A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void siri::dialogengine::GetCatutilPath(_QWORD *a1@<X8>)
{
  unsigned __int8 v3;
  unsigned __int8 v4;
  unint64_t v5;
  __int128 v6;
  _QWORD *v7;
  void *v8[2];
  char v9;
  void *v10[2];
  uint64_t v11;
  void *__p[2];
  char v13;
  void *v14[2];
  uint64_t v15;
  std::string __str;

  if ((v3 & 1) == 0
  {
    __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE4AB8], &siri::dialogengine::GetFrameworkPath(void)::sFrameworkPathMutex, &dword_1BF794000);
  }
  std::mutex::lock(&siri::dialogengine::GetFrameworkPath(void)::sFrameworkPathMutex);
  {
    v7 = (_QWORD *)operator new();
    *v7 = 0;
    siri::dialogengine::GetFrameworkPath(void)::flag = (uint64_t)v7;
  }
  v5 = atomic_load((unint64_t *)siri::dialogengine::GetFrameworkPath(void)::flag);
  if (v5 != -1)
  {
    v14[0] = v10;
    __p[0] = v14;
    std::__call_once((std::once_flag::_State_type *)siri::dialogengine::GetFrameworkPath(void)::flag, __p, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::GetFrameworkPath(void)::$_0 &&>>);
  }
  if (siri::dialogengine::GetFrameworkPath(void)::sFrameworkPath)
  {
    if (*(char *)(siri::dialogengine::GetFrameworkPath(void)::sFrameworkPath + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)siri::dialogengine::GetFrameworkPath(void)::sFrameworkPath, *(_QWORD *)(siri::dialogengine::GetFrameworkPath(void)::sFrameworkPath + 8));
    }
    else
    {
      v6 = *(_OWORD *)siri::dialogengine::GetFrameworkPath(void)::sFrameworkPath;
      __str.__r_.__value_.__r.__words[2] = *(_QWORD *)(siri::dialogengine::GetFrameworkPath(void)::sFrameworkPath + 16);
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v6;
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__str, "");
  }
  std::mutex::unlock(&siri::dialogengine::GetFrameworkPath(void)::sFrameworkPathMutex);
  std::string::basic_string[abi:ne180100]<0>(__p, "catutil");
  siri::dialogengine::JoinPath((uint64_t)&__str, (uint64_t)__p, (uint64_t)v14);
  if (v13 < 0)
    operator delete(__p[0]);
  if (siri::dialogengine::FileExists((uint64_t *)v14))
    goto LABEL_20;
  siri::dialogengine::DirName(&__str, (uint64_t)__p);
  std::string::basic_string[abi:ne180100]<0>(v8, "catutil");
  siri::dialogengine::JoinPath((uint64_t)__p, (uint64_t)v8, (uint64_t)v10);
  if (SHIBYTE(v15) < 0)
    operator delete(v14[0]);
  *(_OWORD *)v14 = *(_OWORD *)v10;
  v15 = v11;
  HIBYTE(v11) = 0;
  LOBYTE(v10[0]) = 0;
  if (v9 < 0)
    operator delete(v8[0]);
  if (siri::dialogengine::FileExists((uint64_t *)v14))
  {
    if (v13 < 0)
      operator delete(__p[0]);
LABEL_20:
    *(_OWORD *)a1 = *(_OWORD *)v14;
    a1[2] = v15;
    goto LABEL_21;
  }
  std::operator+<char>();
  siri::dialogengine::Log::LogWithLevel((uint64_t)v10, 3u);
  if (SHIBYTE(v11) < 0)
    operator delete(v10[0]);
  std::string::basic_string[abi:ne180100]<0>(a1, "");
  if (v13 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v15) < 0)
    operator delete(v14[0]);
LABEL_21:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void sub_1BFBFA478(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  std::mutex::unlock(&siri::dialogengine::GetFrameworkPath(void)::sFrameworkPathMutex);
  _Unwind_Resume(a1);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::GetFrameworkPath(void)::$_0 &&>>()
{
  const char *v0;
  void *v1;
  uint64_t v2;
  id v3;
  const char *v4;
  id v5;

  +[DEBundle frameworkBundle](DEBundle, "frameworkBundle");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  if (v5 && (objc_msgSend(v5, "bundlePath"), (v1 = (void *)objc_claimAutoreleasedReturnValue()) != 0))
  {
    v2 = operator new();
    v3 = objc_retainAutorelease(v1);
    std::string::basic_string[abi:ne180100]<0>((_QWORD *)v2, (char *)objc_msgSend(v3, "UTF8String"));
    siri::dialogengine::GetFrameworkPath(void)::sFrameworkPath = v2;
    if (*(char *)(v2 + 23) < 0)
      v2 = *(_QWORD *)v2;
    siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"Initialized sFrameworkPath to [%s]", v4, v2);

  }
  else
  {
    siri::dialogengine::Log::Warn((siri::dialogengine::Log *)"Failed to initialize sFrameworkPath", v0);
  }

}

void sub_1BFBFA604(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void siri::dialogengine::GetHolidayDatabaseFile(std::string *a1@<X8>)
{
  unsigned __int8 v3;
  unint64_t v4;
  __int128 v5;
  _QWORD *v6;
  char v7;
  char **v8;
  char *v9;

  {
    v6 = (_QWORD *)operator new();
    *v6 = 0;
    siri::dialogengine::GetHolidayDatabaseFile(void)::flag = (uint64_t)v6;
  }
  v4 = atomic_load((unint64_t *)siri::dialogengine::GetHolidayDatabaseFile(void)::flag);
  if (v4 != -1)
  {
    v9 = &v7;
    v8 = &v9;
    std::__call_once((std::once_flag::_State_type *)siri::dialogengine::GetHolidayDatabaseFile(void)::flag, &v8, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::GetHolidayDatabaseFile(void)::$_0 &&>>);
  }
  if (siri::dialogengine::GetHolidayDatabaseFile(void)::sHolidayDatabaseFile)
  {
    if (*(char *)(siri::dialogengine::GetHolidayDatabaseFile(void)::sHolidayDatabaseFile + 23) < 0)
    {
      std::string::__init_copy_ctor_external(a1, *(const std::string::value_type **)siri::dialogengine::GetHolidayDatabaseFile(void)::sHolidayDatabaseFile, *(_QWORD *)(siri::dialogengine::GetHolidayDatabaseFile(void)::sHolidayDatabaseFile + 8));
    }
    else
    {
      v5 = *(_OWORD *)siri::dialogengine::GetHolidayDatabaseFile(void)::sHolidayDatabaseFile;
      a1->__r_.__value_.__r.__words[2] = *(_QWORD *)(siri::dialogengine::GetHolidayDatabaseFile(void)::sHolidayDatabaseFile
                                                   + 16);
      *(_OWORD *)&a1->__r_.__value_.__l.__data_ = v5;
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a1, "");
  }
}

void sub_1BFBFA738(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::GetHolidayDatabaseFile(void)::$_0 &&>>()
{
  const char *v0;
  void *v1;
  uint64_t v2;
  id v3;
  const char *v4;
  id v5;

  objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithPath:", CFSTR("/System/Library/PrivateFrameworks/SiriInference.framework"));
  v5 = (id)objc_claimAutoreleasedReturnValue();
  if (v5
    && (objc_msgSend(v5, "pathForResource:ofType:", CFSTR("holidays"), CFSTR("sqlite3")),
        (v1 = (void *)objc_claimAutoreleasedReturnValue()) != 0))
  {
    v2 = operator new();
    v3 = objc_retainAutorelease(v1);
    std::string::basic_string[abi:ne180100]<0>((_QWORD *)v2, (char *)objc_msgSend(v3, "UTF8String"));
    siri::dialogengine::GetHolidayDatabaseFile(void)::sHolidayDatabaseFile = v2;
    if (*(char *)(v2 + 23) < 0)
      v2 = *(_QWORD *)v2;
    siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"Initialized sHolidayDatabaseFile to [%s]", v4, v2);

  }
  else
  {
    siri::dialogengine::Log::Warn((siri::dialogengine::Log *)"Failed to initialize sHolidayDatabaseFile", v0);
  }

}

void sub_1BFBFA830(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void siri::dialogengine::GetHolidayNamesDatabaseFile(std::string *a1@<X8>)
{
  unsigned __int8 v3;
  unint64_t v4;
  __int128 v5;
  _QWORD *v6;
  char v7;
  char **v8;
  char *v9;

  if ((v3 & 1) == 0
  {
    v6 = (_QWORD *)operator new();
    *v6 = 0;
    siri::dialogengine::GetHolidayNamesDatabaseFile(void)::flag = (uint64_t)v6;
  }
  v4 = atomic_load((unint64_t *)siri::dialogengine::GetHolidayNamesDatabaseFile(void)::flag);
  if (v4 != -1)
  {
    v9 = &v7;
    v8 = &v9;
    std::__call_once((std::once_flag::_State_type *)siri::dialogengine::GetHolidayNamesDatabaseFile(void)::flag, &v8, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::GetHolidayNamesDatabaseFile(void)::$_0 &&>>);
  }
  if (siri::dialogengine::GetHolidayNamesDatabaseFile(void)::sHolidayNamesDatabaseFile)
  {
    if (*(char *)(siri::dialogengine::GetHolidayNamesDatabaseFile(void)::sHolidayNamesDatabaseFile + 23) < 0)
    {
      std::string::__init_copy_ctor_external(a1, *(const std::string::value_type **)siri::dialogengine::GetHolidayNamesDatabaseFile(void)::sHolidayNamesDatabaseFile, *(_QWORD *)(siri::dialogengine::GetHolidayNamesDatabaseFile(void)::sHolidayNamesDatabaseFile + 8));
    }
    else
    {
      v5 = *(_OWORD *)siri::dialogengine::GetHolidayNamesDatabaseFile(void)::sHolidayNamesDatabaseFile;
      a1->__r_.__value_.__r.__words[2] = *(_QWORD *)(siri::dialogengine::GetHolidayNamesDatabaseFile(void)::sHolidayNamesDatabaseFile
                                                   + 16);
      *(_OWORD *)&a1->__r_.__value_.__l.__data_ = v5;
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a1, "");
  }
}

void sub_1BFBFA964(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::GetHolidayNamesDatabaseFile(void)::$_0 &&>>()
{
  const char *v0;
  std::string *v1;
  const char *v2;
  uint64_t v3;
  void *__p[2];
  char v5;
  std::string v6;
  __int128 v7;
  std::string::size_type v8;

  siri::dialogengine::GetFrameworkResourcePath(&v6);
  std::string::basic_string[abi:ne180100]<0>(__p, "holidayNames.sqlite3");
  siri::dialogengine::JoinPath((uint64_t)&v6, (uint64_t)__p, (uint64_t)&v7);
  if (v5 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  if (siri::dialogengine::FileExists((uint64_t *)&v7))
  {
    v1 = (std::string *)operator new();
    v3 = (uint64_t)v1;
    if (SHIBYTE(v8) < 0)
    {
      std::string::__init_copy_ctor_external(v1, (const std::string::value_type *)v7, *((std::string::size_type *)&v7 + 1));
    }
    else
    {
      *(_OWORD *)&v1->__r_.__value_.__l.__data_ = v7;
      v1->__r_.__value_.__r.__words[2] = v8;
    }
    siri::dialogengine::GetHolidayNamesDatabaseFile(void)::sHolidayNamesDatabaseFile = v3;
    if (*(char *)(v3 + 23) < 0)
      v3 = *(_QWORD *)v3;
    siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"Initialized sHolidayNamesDatabaseFile to [%s]", v2, v3);
  }
  else
  {
    siri::dialogengine::Log::Warn((siri::dialogengine::Log *)"Failed to initialize sHolidayNamesDatabaseFile", v0);
  }
  if (SHIBYTE(v8) < 0)
    operator delete((void *)v7);
}

void sub_1BFBFAA78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v23 = v21;
  MEMORY[0x1C3B8D890](v23, 0x1012C40EC159624);
  if (*(char *)(v22 - 17) < 0)
    operator delete(*(void **)(v22 - 40));
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::SiriKitApp::toString(siri::dialogengine::SiriKitApp *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  void *OptionalArrayParameter;
  const char *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  __int128 v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void *v14;
  unint64_t *v15;
  unint64_t v16;
  void *RequiredStringParameter;
  void *v18;
  _OWORD *v19;
  std::string::size_type size;
  _OWORD *v21;
  std::string::size_type i;
  std::string::size_type v23;
  int v24;
  BOOL v25;
  std::vector<std::string>::pointer end;
  const std::string::value_type *v27;
  std::string::size_type v28;
  BOOL v29;
  __int128 v31;
  std::string *v32;
  __int128 v33;
  std::string::size_type v34;
  std::string *v35;
  std::vector<std::string>::pointer v36;
  __int128 v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  std::string *v41;
  std::string *v42;
  __int128 v43;
  std::string *v44;
  unint64_t v45;
  unint64_t v46;
  std::__split_buffer<std::string>::pointer begin;
  unint64_t v48;
  uint64_t *NonSiriFallbackLocales;
  uint64_t v50;
  void *v52[2];
  uint64_t v53;
  std::vector<std::string> v54;
  std::string __str;
  std::string v56;
  std::__split_buffer<std::string> __p;
  char v58;
  void *v59;
  char v60;
  void *v61;
  char v62;
  void *v63;
  __int128 v64;
  void *v65;
  char v66;
  void *v67;
  char v68;
  std::string v69;
  uint64_t *v70;
  _QWORD *v71[2];
  uint64_t *v72;
  _QWORD *v73[2];
  __int128 v74;
  std::__split_buffer<std::string>::pointer v75;

  v74 = 0uLL;
  v75 = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "localizedAppNames");
  OptionalArrayParameter = siri::dialogengine::GetOptionalArrayParameter((const void **)&__p.__first_, (uint64_t)a2);
  v7 = (uint64_t)OptionalArrayParameter;
  if (SHIBYTE(__p.__end_) < 0)
  {
    operator delete(__p.__first_);
    if (!v7)
      return v7;
  }
  else if (!OptionalArrayParameter)
  {
    return v7;
  }
  v8 = 0;
  v73[0] = 0;
  v73[1] = 0;
  v71[1] = 0;
  v72 = (uint64_t *)v73;
  v70 = (uint64_t *)v71;
  v71[0] = 0;
  while (1)
  {
    v9 = *(_QWORD *)(v7 + 72);
    if (v8 >= (*(_QWORD *)(v7 + 80) - v9) >> 4)
      break;
    v10 = *(_OWORD *)(v9 + 16 * v8);
    v11 = *(std::__shared_weak_count **)(v9 + 16 * v8 + 8);
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
    }
    if ((_QWORD)v10)
    {
      if (!v11)
        goto LABEL_17;
    }
    else
    {
      v14 = 0;
      if (!v11)
        goto LABEL_17;
    }
    v15 = (unint64_t *)&v11->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      if (!v14)
        goto LABEL_85;
      goto LABEL_18;
    }
LABEL_17:
    if (!v14)
      goto LABEL_85;
LABEL_18:
    std::string::basic_string[abi:ne180100]<0>(&__p, "locale");
    RequiredStringParameter = siri::dialogengine::GetRequiredStringParameter((const void **)&__p.__first_, (uint64_t)v14);
    if (SHIBYTE(__p.__end_) < 0)
      operator delete(__p.__first_);
    std::string::basic_string[abi:ne180100]<0>(&__p, "appName");
    v18 = siri::dialogengine::GetRequiredStringParameter((const void **)&__p.__first_, (uint64_t)v14);
    if (SHIBYTE(__p.__end_) < 0)
    {
      operator delete(__p.__first_);
      if (!RequiredStringParameter)
        goto LABEL_85;
    }
    else if (!RequiredStringParameter)
    {
      goto LABEL_85;
    }
    if (v18)
    {
      (*(void (**)(std::__split_buffer<std::string> *__return_ptr, void *))(*(_QWORD *)RequiredStringParameter
                                                                                     + 48))(&__p, RequiredStringParameter);
      if (SHIBYTE(__p.__end_) < 0)
      {
        std::string::__init_copy_ctor_external(&__str, (const std::string::value_type *)__p.__first_, (std::string::size_type)__p.__begin_);
      }
      else
      {
        *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__first_;
        __str.__r_.__value_.__r.__words[2] = (std::string::size_type)__p.__end_;
      }
      siri::dialogengine::StringTrim(" \t\n\r", &__str, &v69);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      if (v68 < 0)
        operator delete(v67);
      if (v66 < 0)
        operator delete(v65);
      if (SHIBYTE(v64) < 0)
        operator delete(v63);
      if (v62 < 0)
        operator delete(v61);
      if (v60 < 0)
        operator delete(v59);
      if (v58 < 0)
        operator delete(__p.__end_cap_.__value_);
      if (SHIBYTE(__p.__end_) < 0)
        operator delete(__p.__first_);
      memset(&v54, 0, sizeof(v54));
      v52[0] = 0;
      v52[1] = 0;
      v53 = 0;
      morphun::util::ULocale::ULocale();
      morphun::util::ULocale::getFallback((morphun::util::ULocale *)&__str);
      if (SHIBYTE(v65) < 0)
      {
        std::string::__init_copy_ctor_external(&v56, (const std::string::value_type *)v64, *((std::string::size_type *)&v64 + 1));
      }
      else
      {
        *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v64;
        v56.__r_.__value_.__r.__words[2] = (std::string::size_type)v65;
      }
      morphun::util::ULocale::~ULocale((morphun::util::ULocale *)&__p);
      morphun::util::ULocale::~ULocale((morphun::util::ULocale *)&__str);
      if (SHIBYTE(v53) < 0)
        operator delete(v52[0]);
      if (SHIBYTE(v54.__end_cap_.__value_) < 0)
        operator delete(v54.__begin_);
      (*(void (**)(std::__split_buffer<std::string> *__return_ptr, void *))(*(_QWORD *)v18 + 48))(&__p, v18);
      if (SHIBYTE(__p.__end_) < 0)
      {
        std::string::__init_copy_ctor_external(&__str, (const std::string::value_type *)__p.__first_, (std::string::size_type)__p.__begin_);
      }
      else
      {
        *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__first_;
        __str.__r_.__value_.__r.__words[2] = (std::string::size_type)__p.__end_;
      }
      if (v68 < 0)
        operator delete(v67);
      if (v66 < 0)
        operator delete(v65);
      if (SHIBYTE(v64) < 0)
        operator delete(v63);
      if (v62 < 0)
        operator delete(v61);
      if (v60 < 0)
        operator delete(v59);
      if (v58 < 0)
        operator delete(__p.__end_cap_.__value_);
      if (SHIBYTE(__p.__end_) < 0)
        operator delete(__p.__first_);
      siri::dialogengine::StringToLower((uint64_t)&v69, (uint64_t)&__p);
      v54.__begin_ = (std::vector<std::string>::pointer)&__p;
      v19 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v72, (const void **)&__p.__first_, &v54);
      std::string::operator=((std::string *)((char *)v19 + 56), &__str);
      if (SHIBYTE(__p.__end_) < 0)
        operator delete(__p.__first_);
      size = HIBYTE(v56.__r_.__value_.__r.__words[2]);
      if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        size = v56.__r_.__value_.__l.__size_;
      if (size)
      {
        siri::dialogengine::GetCanonicalLocale(&v56, 0, (std::string *)&v54);
        siri::dialogengine::StringToLower((uint64_t)&v54, (uint64_t)&__p);
        v52[0] = &__p;
        v21 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v70, (const void **)&__p.__first_, (_OWORD **)v52);
        std::string::operator=((std::string *)((char *)v21 + 56), &__str);
        if (SHIBYTE(__p.__end_) < 0)
          operator delete(__p.__first_);
        if (SHIBYTE(v54.__end_cap_.__value_) < 0)
          operator delete(v54.__begin_);
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v56.__r_.__value_.__l.__data_);
      if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v69.__r_.__value_.__l.__data_);
    }
LABEL_85:
    ++v8;
  }
  siri::dialogengine::Context::GetLocale(this, v6, (uint64_t)&v69);
  siri::dialogengine::GetFallbackLocales((uint64_t)&v69, (uint64_t *)&v56);
  memset(&v54, 0, sizeof(v54));
  std::vector<std::string>::reserve(&v54, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v56.__r_.__value_.__l.__size_ - v56.__r_.__value_.__r.__words[0]) >> 3));
  v23 = v56.__r_.__value_.__l.__size_;
  for (i = v56.__r_.__value_.__r.__words[0]; i != v23; i += 24)
  {
    v24 = *(char *)(i + 23);
    if (v24 < 0)
    {
      v28 = *(_QWORD *)(i + 8);
      if (v28 != 5)
      {
        end = v54.__end_;
        if (v54.__end_ >= v54.__end_cap_.__value_)
          goto LABEL_111;
        goto LABEL_109;
      }
      v27 = *(const std::string::value_type **)i;
      v29 = **(_DWORD **)i == 1130328933 && *(_BYTE *)(*(_QWORD *)i + 4) == 76;
      end = v54.__end_;
      if (v29)
      {
        if (v54.__end_ < v54.__end_cap_.__value_)
        {
          v34 = 5;
          goto LABEL_124;
        }
LABEL_122:
        v35 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v54, (__int128 *)i);
LABEL_126:
        v54.__end_ = v35;
        std::string::basic_string[abi:ne180100]<0>(&__str, "es_419");
        v36 = v54.__end_;
        if (v54.__end_ >= v54.__end_cap_.__value_)
        {
          v38 = 0xAAAAAAAAAAAAAAABLL * (((char *)v54.__end_ - (char *)v54.__begin_) >> 3);
          v39 = v38 + 1;
          if (v38 + 1 > 0xAAAAAAAAAAAAAAALL)
            std::vector<BOOL>::__throw_length_error[abi:ne180100]();
          if (0x5555555555555556 * (((char *)v54.__end_cap_.__value_ - (char *)v54.__begin_) >> 3) > v39)
            v39 = 0x5555555555555556 * (((char *)v54.__end_cap_.__value_ - (char *)v54.__begin_) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * (((char *)v54.__end_cap_.__value_ - (char *)v54.__begin_) >> 3) >= 0x555555555555555)
            v40 = 0xAAAAAAAAAAAAAAALL;
          else
            v40 = v39;
          __p.__end_cap_.__value_ = (std::allocator<std::string> *)&v54.__end_cap_;
          if (v40)
            v41 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v54.__end_cap_, v40);
          else
            v41 = 0;
          v42 = v41 + v38;
          __p.__first_ = v41;
          __p.__begin_ = v42;
          __p.__end_cap_.__value_ = &v41[v40];
          v43 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
          v42->__r_.__value_.__r.__words[2] = __str.__r_.__value_.__r.__words[2];
          *(_OWORD *)&v42->__r_.__value_.__l.__data_ = v43;
          memset(&__str, 0, sizeof(__str));
          __p.__end_ = v42 + 1;
          std::vector<std::string>::__swap_out_circular_buffer(&v54, &__p);
          v44 = v54.__end_;
          std::__split_buffer<std::string>::~__split_buffer(&__p);
          v54.__end_ = v44;
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__str.__r_.__value_.__l.__data_);
        }
        else
        {
          v37 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
          v54.__end_->__r_.__value_.__r.__words[2] = __str.__r_.__value_.__r.__words[2];
          *(_OWORD *)&v36->__r_.__value_.__l.__data_ = v37;
          v54.__end_ = v36 + 1;
        }
        continue;
      }
    }
    else
    {
      if (v24 != 5)
      {
        end = v54.__end_;
        if (v54.__end_ >= v54.__end_cap_.__value_)
          goto LABEL_111;
        goto LABEL_107;
      }
      v25 = *(_DWORD *)i == 1130328933 && *(_BYTE *)(i + 4) == 76;
      end = v54.__end_;
      if (v25)
      {
        if (v54.__end_ >= v54.__end_cap_.__value_)
          goto LABEL_122;
LABEL_119:
        v33 = *(_OWORD *)i;
        end->__r_.__value_.__r.__words[2] = *(_QWORD *)(i + 16);
        *(_OWORD *)&end->__r_.__value_.__l.__data_ = v33;
LABEL_125:
        v35 = end + 1;
        goto LABEL_126;
      }
      v27 = (const std::string::value_type *)i;
    }
    if (*(_DWORD *)v27 == 1298101093 && v27[4] == 88)
    {
      if (end >= v54.__end_cap_.__value_)
        goto LABEL_122;
      if ((v24 & 0x80000000) == 0)
        goto LABEL_119;
      v27 = *(const std::string::value_type **)i;
      v34 = *(_QWORD *)(i + 8);
LABEL_124:
      std::string::__init_copy_ctor_external(end, v27, v34);
      goto LABEL_125;
    }
    if (end >= v54.__end_cap_.__value_)
    {
LABEL_111:
      v32 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v54, (__int128 *)i);
      goto LABEL_112;
    }
    if (v24 < 0)
    {
      v28 = *(_QWORD *)(i + 8);
LABEL_109:
      std::string::__init_copy_ctor_external(end, *(const std::string::value_type **)i, v28);
      goto LABEL_110;
    }
LABEL_107:
    v31 = *(_OWORD *)i;
    end->__r_.__value_.__r.__words[2] = *(_QWORD *)(i + 16);
    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v31;
LABEL_110:
    v32 = end + 1;
LABEL_112:
    v54.__end_ = v32;
  }
  std::vector<std::string>::__vdeallocate((std::vector<std::string> *)&v56);
  v56 = (std::string)v54;
  memset(&v54, 0, sizeof(v54));
  __p.__first_ = (std::__split_buffer<std::string>::pointer)&v54;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  siri::dialogengine::FindLocalizedAppName((std::string *)&__p, (uint64_t)&v72, (uint64_t)v56.__r_.__value_.__l.__data_, v56.__r_.__value_.__l.__size_);
  if (SHIBYTE(v75) < 0)
    operator delete((void *)v74);
  v75 = __p.__end_;
  v74 = *(_OWORD *)&__p.__first_;
  v45 = (unint64_t)__p.__end_ >> 56;
  LODWORD(v46) = SHIBYTE(__p.__end_);
  begin = __p.__begin_;
  if (SHIBYTE(__p.__end_) >= 0)
    v48 = (unint64_t)__p.__end_ >> 56;
  else
    v48 = *((_QWORD *)&v74 + 1);
  if (!v48)
  {
    NonSiriFallbackLocales = (uint64_t *)siri::dialogengine::GetNonSiriFallbackLocales();
    siri::dialogengine::FindLocalizedAppName((std::string *)&__p, (uint64_t)&v72, *NonSiriFallbackLocales, NonSiriFallbackLocales[1]);
    if ((v46 & 0x80000000) != 0)
      operator delete((void *)v74);
    v75 = __p.__end_;
    v74 = *(_OWORD *)&__p.__first_;
    v45 = (unint64_t)__p.__end_ >> 56;
    begin = __p.__begin_;
    v46 = (unint64_t)__p.__end_ >> 56;
  }
  if ((v46 & 0x80u) != 0)
    v45 = (unint64_t)begin;
  if (!v45)
  {
    siri::dialogengine::FindLocalizedAppName((std::string *)&__p, (uint64_t)&v70, (uint64_t)v56.__r_.__value_.__l.__data_, v56.__r_.__value_.__l.__size_);
    if ((v46 & 0x80) != 0)
      operator delete((void *)v74);
    v74 = *(_OWORD *)&__p.__first_;
    v75 = __p.__end_;
  }
  __p.__first_ = &v56;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v69.__r_.__value_.__l.__data_);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v71[0]);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v73[0]);
  v50 = HIBYTE(v75);
  if (SHIBYTE(v75) < 0)
    v50 = *((_QWORD *)&v74 + 1);
  if (!v50)
  {
    v7 = 0;
    if ((HIBYTE(v75) & 0x80) == 0)
      return v7;
    goto LABEL_162;
  }
  v7 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  siri::dialogengine::VariableString::VariableString(v7, (const std::string *)&__p, (uint64_t)&v74);
  if (SHIBYTE(__p.__end_) < 0)
    operator delete(__p.__first_);
  if ((HIBYTE(v75) & 0x80) != 0)
LABEL_162:
    operator delete((void *)v74);
  return v7;
}

void sub_1BFBFB43C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,uint64_t a55,void *__p,uint64_t a57,int a58,__int16 a59,char a60,char a61)
{
  uint64_t v61;

  a30 = &a49;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  if (*(char *)(v61 - 161) < 0)
    operator delete(*(void **)(v61 - 184));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*(_QWORD **)(v61 - 152));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*(_QWORD **)(v61 - 128));
  if (*(char *)(v61 - 89) < 0)
    operator delete(*(void **)(v61 - 112));
  _Unwind_Resume(a1);
}

void siri::dialogengine::FindLocalizedAppName(std::string *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  void *__p[2];
  char v11;

  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  if (a3 != a4)
  {
    v5 = a3;
    v8 = a2 + 8;
    while (1)
    {
      siri::dialogengine::StringToLower(v5, (uint64_t)__p);
      v9 = std::__tree<std::string>::find<std::string>(a2, (const void **)__p);
      if (v11 < 0)
        operator delete(__p[0]);
      if (v8 != v9)
        break;
      v5 += 24;
      if (v5 == a4)
        return;
    }
    std::string::operator=(a1, (const std::string *)(v9 + 56));
  }
}

void sub_1BFBFB728(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::SiriKitApp::isDesignedByApple(siri::dialogengine::SiriKitApp *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  void *OptionalStringParameter;
  void *v5;
  uint64_t v6;
  char v7;
  std::string __p;
  void *v10;
  char v11;
  void *v12;
  char v13;
  void *v14;
  char v15;
  void *v16;
  char v17;
  void *v18;
  char v19;
  void *v20;
  char v21;
  std::string v22;
  std::string __str;

  std::string::basic_string[abi:ne180100]<0>(&__p, "appId");
  OptionalStringParameter = siri::dialogengine::GetOptionalStringParameter((const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)a2);
  v5 = OptionalStringParameter;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v5)
      goto LABEL_3;
LABEL_6:
    std::string::basic_string[abi:ne180100]<0>(&__str, "");
    goto LABEL_24;
  }
  if (!OptionalStringParameter)
    goto LABEL_6;
LABEL_3:
  (*(void (**)(std::string *__return_ptr, void *))(*(_QWORD *)v5 + 48))(&__p, v5);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v22, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v22 = __p;
  siri::dialogengine::StringToLower((uint64_t)&v22, (uint64_t)&__str);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
  if (v21 < 0)
    operator delete(v20);
  if (v19 < 0)
    operator delete(v18);
  if (v17 < 0)
    operator delete(v16);
  if (v15 < 0)
    operator delete(v14);
  if (v13 < 0)
    operator delete(v12);
  if (v11 < 0)
    operator delete(v10);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_24:
  v6 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::basic_string[abi:ne180100]<0>(&v22, "com.apple.");
  v7 = siri::dialogengine::StringStartsWith(&__str, (unsigned __int8 *)&v22);
  siri::dialogengine::VariableBoolean::VariableBoolean(v6, &__p, v7);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  return v6;
}

void sub_1BFBFB910(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  siri::dialogengine::SpeakableString::~SpeakableString(&__p);
  _Unwind_Resume(a1);
}

std::string *siri::dialogengine::AutoTimer::AutoTimer(std::string *this, __int128 *a2)
{
  __int128 v3;
  timeval v5;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v3 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
  }
  gettimeofday(&v5, 0);
  *(double *)&this[1].__r_.__value_.__l.__data_ = (double)v5.tv_usec / 1000000.0 + (double)v5.tv_sec;
  return this;
}

void siri::dialogengine::AutoTimer::~AutoTimer(siri::dialogengine::AutoTimer *this)
{
  int v2;
  siri::dialogengine::AutoTimer *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  const std::locale::facet *v8;
  timeval v9;

  gettimeofday(&v9, 0);
  v2 = *((char *)this + 23);
  if (v2 >= 0)
    v3 = this;
  else
    v3 = *(siri::dialogengine::AutoTimer **)this;
  if (v2 >= 0)
    v4 = *((unsigned __int8 *)this + 23);
  else
    v4 = *((_QWORD *)this + 1);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A60], (uint64_t)v3, v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)": took ", 7);
  v6 = (_QWORD *)std::ostream::operator<<();
  v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" ms", 3);
  std::ios_base::getloc((const std::ios_base *)((char *)v7 + *(_QWORD *)(*v7 - 24)));
  v8 = std::locale::use_facet((const std::locale *)&v9, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 10);
  std::locale::~locale((std::locale *)&v9);
  std::ostream::put();
  std::ostream::flush();
  if (*((char *)this + 23) < 0)
    operator delete(*(void **)this);
}

void sub_1BFBFBB70(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  std::locale::~locale(&a9);
  __clang_call_terminate(a1);
}

double siri::dialogengine::AutoTimer::GetElapsed(siri::dialogengine::AutoTimer *this)
{
  timeval v3;

  gettimeofday(&v3, 0);
  return (double)v3.tv_usec / 1000000.0 + (double)v3.tv_sec - *((double *)this + 3);
}

double siri::dialogengine::AutoTimer::Reset(siri::dialogengine::AutoTimer *this)
{
  double result;
  timeval v3;

  gettimeofday(&v3, 0);
  result = (double)v3.tv_usec / 1000000.0 + (double)v3.tv_sec;
  *((double *)this + 3) = result;
  return result;
}

void siri::dialogengine::AutoTimer::GetName(siri::dialogengine::AutoTimer *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)this, *((_QWORD *)this + 1));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)this;
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 2);
  }
}

BOOL siri::dialogengine::ObjectProperty::operator==(uint64_t a1, const void *a2)
{
  _BOOL8 result;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  const void **v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  const void **v17;
  unsigned __int8 *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  const void **v23;
  unsigned __int8 *v24;
  unsigned __int8 *v25;
  unsigned __int8 *v26;
  unsigned __int8 *v27;

  result = siri::dialogengine::PropertyBase::operator==(a1, (uint64_t)a2);
  if (result)
  {
    if (v5)
    {
      v6 = v5;
      v7 = *(unsigned __int8 *)(a1 + 183);
      if ((v7 & 0x80u) == 0)
        v8 = *(unsigned __int8 *)(a1 + 183);
      else
        v8 = *(_QWORD *)(a1 + 168);
      v9 = v5[183];
      v10 = (char)v9;
      if ((v9 & 0x80u) != 0)
        v9 = *((_QWORD *)v5 + 21);
      if (v8 != v9)
        return 0;
      v11 = (const void **)(a1 + 160);
      if (v10 >= 0)
        v12 = v5 + 160;
      else
        v12 = (unsigned __int8 *)*((_QWORD *)v5 + 20);
      if ((v7 & 0x80) != 0)
      {
        if (memcmp(*v11, v12, *(_QWORD *)(a1 + 168)))
          return 0;
      }
      else if (*(_BYTE *)(a1 + 183))
      {
        while (*(unsigned __int8 *)v11 == *v12)
        {
          v11 = (const void **)((char *)v11 + 1);
          ++v12;
          if (!--v7)
            goto LABEL_18;
        }
        return 0;
      }
LABEL_18:
      if (*(unsigned __int8 *)(a1 + 232) != v6[232] || *(unsigned __int8 *)(a1 + 233) != v6[233])
        return 0;
      v13 = *(unsigned __int8 *)(a1 + 207);
      if ((v13 & 0x80u) == 0)
        v14 = *(unsigned __int8 *)(a1 + 207);
      else
        v14 = *(_QWORD *)(a1 + 192);
      v15 = v6[207];
      v16 = (char)v15;
      if ((v15 & 0x80u) != 0)
        v15 = *((_QWORD *)v6 + 24);
      if (v14 != v15)
        return 0;
      v17 = (const void **)(a1 + 184);
      if (v16 >= 0)
        v18 = v6 + 184;
      else
        v18 = (unsigned __int8 *)*((_QWORD *)v6 + 23);
      if ((v13 & 0x80) != 0)
      {
        if (memcmp(*v17, v18, *(_QWORD *)(a1 + 192)))
          return 0;
      }
      else if (*(_BYTE *)(a1 + 207))
      {
        while (*(unsigned __int8 *)v17 == *v18)
        {
          v17 = (const void **)((char *)v17 + 1);
          ++v18;
          if (!--v13)
            goto LABEL_35;
        }
        return 0;
      }
LABEL_35:
      v19 = *(unsigned __int8 *)(a1 + 231);
      if ((v19 & 0x80u) == 0)
        v20 = *(unsigned __int8 *)(a1 + 231);
      else
        v20 = *(_QWORD *)(a1 + 216);
      v21 = v6[231];
      v22 = (char)v21;
      if ((v21 & 0x80u) != 0)
        v21 = *((_QWORD *)v6 + 27);
      if (v20 != v21)
        return 0;
      v23 = (const void **)(a1 + 208);
      v26 = (unsigned __int8 *)*((_QWORD *)v6 + 26);
      v25 = v6 + 208;
      v24 = v26;
      if (v22 >= 0)
        v27 = v25;
      else
        v27 = v24;
      if ((v19 & 0x80) == 0)
      {
        if (*(_BYTE *)(a1 + 231))
        {
          while (*(unsigned __int8 *)v23 == *v27)
          {
            v23 = (const void **)((char *)v23 + 1);
            ++v27;
            if (!--v19)
              return 1;
          }
          return 0;
        }
        return 1;
      }
      if (memcmp(*v23, v27, *(_QWORD *)(a1 + 216)))
        return 0;
    }
    return 1;
  }
  return result;
}

void siri::dialogengine::ObjectProperty::GetSemanticConcept(siri::dialogengine::ObjectProperty *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 183) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 20), *((_QWORD *)this + 21));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 10);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 22);
  }
}

std::string *siri::dialogengine::ObjectProperty::SetSemanticConcept(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 160), a2);
}

void siri::dialogengine::ObjectProperty::GetValueFromCat(siri::dialogengine::ObjectProperty *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 207) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 23), *((_QWORD *)this + 24));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 184);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 25);
  }
}

std::string *siri::dialogengine::ObjectProperty::SetValueFromCat(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 184), a2);
}

uint64_t siri::dialogengine::ObjectProperty::IsIterator(siri::dialogengine::ObjectProperty *this)
{
  return *((unsigned __int8 *)this + 232);
}

uint64_t siri::dialogengine::ObjectProperty::SetIterator(uint64_t this, char a2)
{
  *(_BYTE *)(this + 232) = a2;
  return this;
}

uint64_t siri::dialogengine::ObjectProperty::IsOverridable(siri::dialogengine::ObjectProperty *this)
{
  return *((unsigned __int8 *)this + 233);
}

uint64_t siri::dialogengine::ObjectProperty::SetOverridable(uint64_t this, char a2)
{
  *(_BYTE *)(this + 233) = a2;
  return this;
}

void siri::dialogengine::ObjectProperty::GetDefaultValue(siri::dialogengine::ObjectProperty *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 231) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 26), *((_QWORD *)this + 27));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 13);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 28);
  }
}

std::string *siri::dialogengine::ObjectProperty::SetDefaultValue(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 208), a2);
}

void siri::dialogengine::ChunkText::~ChunkText(siri::dialogengine::ChunkText *this)
{
  *(_QWORD *)this = &off_1E7937608;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*((_QWORD **)this + 23));
  siri::dialogengine::SpeakableString::~SpeakableString((void **)this + 1);
}

{
  *(_QWORD *)this = &off_1E7937608;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*((_QWORD **)this + 23));
  siri::dialogengine::SpeakableString::~SpeakableString((void **)this + 1);
  JUMPOUT(0x1C3B8D890);
}

{
  *(_QWORD *)this = &off_1E7937608;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*((_QWORD **)this + 23));
  siri::dialogengine::SpeakableString::~SpeakableString((void **)this + 1);
}

uint64_t siri::dialogengine::ChunkText::Validate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::string *v4;
  char v5;
  char v6;
  std::string *v7;
  uint64_t v8;
  char v9;
  int v10;
  uint64_t i;
  std::string *v12;
  int v13;
  std::string *v14;
  __int128 v15;
  std::string *v16;
  __int128 v17;
  std::string *v19;
  void *__p[2];
  char v23;
  std::string v24;
  std::string v25;
  std::string v26;
  std::string v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v4 = (std::string *)(a1 + 8);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v26, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v26.__r_.__value_.__l.__data_ = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v26.__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 24);
  }
  if (*(char *)(a1 + 55) < 0)
    std::string::__init_copy_ctor_external(&v27, *(const std::string::value_type **)(a1 + 32), *(_QWORD *)(a1 + 40));
  else
    v27 = *(std::string *)(a1 + 32);
  v19 = v4;
  v5 = 0;
  v6 = 1;
  v7 = &v26;
  v8 = 1;
  do
  {
    v9 = v5;
    if (SHIBYTE(v7->__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v25, v7->__r_.__value_.__l.__data_, v7->__r_.__value_.__l.__size_);
    else
      v25 = *v7;
    std::string::basic_string[abi:ne180100]<0>(&v24, "${tts.");
    if ((siri::dialogengine::StringContains(&v25.__r_.__value_.__l.__data_, (char *)&v24) & 1) != 0)
    {
      v10 = 1;
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "${duc.");
      v10 = siri::dialogengine::StringContains(&v25.__r_.__value_.__l.__data_, (char *)__p);
      if (v23 < 0)
        operator delete(__p[0]);
    }
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v24.__r_.__value_.__l.__data_);
      if (!v10)
        goto LABEL_22;
    }
    else if (!v10)
    {
      goto LABEL_22;
    }
    std::operator+<char>();
    siri::dialogengine::Context::AddValidationError(a2, (__int128 *)&v24, a3);
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v24.__r_.__value_.__l.__data_);
    v6 = 0;
LABEL_22:
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v25.__r_.__value_.__l.__data_);
    if ((v10 & 1) != 0)
      break;
    v7 = &v26 + v8;
    v5 = 1;
    v8 = 2;
  }
  while ((v9 & 1) == 0);
  for (i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(v27.__r_.__value_.__r.__words[i + 2]) < 0)
      operator delete(*(void **)((char *)&v26 + i * 8 + 24));
  }
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v26, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
    v12 = v19;
  }
  else
  {
    v12 = v19;
    v26 = *v19;
  }
  std::string::basic_string[abi:ne180100]<0>(&v25, "/&gt;");
  if ((siri::dialogengine::StringContains(&v26.__r_.__value_.__l.__data_, (char *)&v25) & 1) != 0)
  {
    v13 = 1;
  }
  else
  {
    if (*(char *)(a1 + 31) < 0)
      std::string::__init_copy_ctor_external(&v24, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
    else
      v24 = *v12;
    std::string::basic_string[abi:ne180100]<0>(__p, "/>");
    v13 = siri::dialogengine::StringContains(&v24.__r_.__value_.__l.__data_, (char *)__p);
    if (v23 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v24.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v26.__r_.__value_.__l.__data_);
    if (v13)
      goto LABEL_48;
  }
  else
  {
    if (!v13)
      return v6 & 1;
LABEL_48:
    if (*(char *)(a1 + 31) < 0)
      std::string::__init_copy_ctor_external(&v24, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
    else
      v24 = *v12;
    v14 = std::string::insert(&v24, 0, "CAT file contains suspicious content that looks like malformed XML: '");
    v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v25.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    v16 = std::string::append(&v25, "'");
    v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v26.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Context::AddValidationWarning(a2, (__int128 *)&v26, a3);
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v26.__r_.__value_.__l.__data_);
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v25.__r_.__value_.__l.__data_);
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v24.__r_.__value_.__l.__data_);
    v6 = 0;
  }
  return v6 & 1;
}

void sub_1BFBFC37C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a27 < 0)
    operator delete(__p);
  if (a34 < 0)
    operator delete(a29);
  _Unwind_Resume(exception_object);
}

std::string *siri::dialogengine::ChunkText::Expand@<X0>(siri::dialogengine::ChunkText *this@<X0>, std::string *a2@<X8>)
{
  return siri::dialogengine::SpeakableString::SpeakableString(a2, (siri::dialogengine::ChunkText *)((char *)this + 8));
}

double siri::dialogengine::ChunkText::ChunkText(siri::dialogengine::ChunkText *this)
{
  double result;

  *(_QWORD *)this = &off_1E7937608;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *((_QWORD *)this + 24) = 0;
  *((_QWORD *)this + 23) = 0;
  *((_QWORD *)this + 21) = 0;
  *((_QWORD *)this + 22) = (char *)this + 184;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_1E7937608;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *((_QWORD *)this + 24) = 0;
  *((_QWORD *)this + 23) = 0;
  *((_QWORD *)this + 21) = 0;
  *((_QWORD *)this + 22) = (char *)this + 184;
  return result;
}

uint64_t siri::dialogengine::ChunkText::ChunkText(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = &off_1E7937608;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = a1 + 184;
  siri::dialogengine::ChunkText::SetText(a1, a2);
  return a1;
}

void sub_1BFBFC59C(_Unwind_Exception *a1)
{
  void **v1;
  _QWORD **v2;

  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*v2);
  siri::dialogengine::SpeakableString::~SpeakableString(v1);
  _Unwind_Resume(a1);
}

void siri::dialogengine::ChunkText::SetText(uint64_t a1, uint64_t a2)
{
  std::string __str;
  std::string v4;
  std::string v5;
  std::string v6;
  std::string v7;
  std::string v8;
  std::string __p;

  siri::dialogengine::SpeakableString::SpeakableString((uint64_t)&__str, a2);
  std::string::operator=((std::string *)(a1 + 8), &__str);
  std::string::operator=((std::string *)(a1 + 32), &v4);
  std::string::operator=((std::string *)(a1 + 56), &v5);
  std::string::operator=((std::string *)(a1 + 80), &v6);
  std::string::operator=((std::string *)(a1 + 104), &v7);
  std::string::operator=((std::string *)(a1 + 128), &v8);
  std::string::operator=((std::string *)(a1 + 152), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8.__r_.__value_.__l.__data_);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v4.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void sub_1BFBFC6B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  siri::dialogengine::SpeakableString::~SpeakableString((void **)va);
  _Unwind_Resume(a1);
}

siri::dialogengine::ChunkText *siri::dialogengine::ChunkText::ChunkText(siri::dialogengine::ChunkText *this, const std::string *a2)
{
  *(_QWORD *)this = &off_1E7937608;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *((_QWORD *)this + 23) = 0;
  *((_QWORD *)this + 24) = 0;
  *((_QWORD *)this + 21) = 0;
  *((_QWORD *)this + 22) = (char *)this + 184;
  siri::dialogengine::ChunkText::SetText(this, a2);
  return this;
}

void sub_1BFBFC748(_Unwind_Exception *a1)
{
  void **v1;
  _QWORD **v2;

  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*v2);
  siri::dialogengine::SpeakableString::~SpeakableString(v1);
  _Unwind_Resume(a1);
}

std::string *siri::dialogengine::ChunkText::SetText(siri::dialogengine::ChunkText *this, const std::string *a2)
{
  std::string::operator=((std::string *)((char *)this + 8), a2);
  std::string::operator=((std::string *)((char *)this + 32), a2 + 1);
  std::string::operator=((std::string *)((char *)this + 56), a2 + 2);
  std::string::operator=((std::string *)((char *)this + 80), a2 + 3);
  std::string::operator=((std::string *)((char *)this + 104), a2 + 4);
  std::string::operator=((std::string *)((char *)this + 128), a2 + 5);
  return std::string::operator=((std::string *)((char *)this + 152), a2 + 6);
}

std::string *siri::dialogengine::ChunkText::GetText@<X0>(siri::dialogengine::ChunkText *this@<X0>, std::string *a2@<X8>)
{
  return siri::dialogengine::SpeakableString::SpeakableString(a2, (siri::dialogengine::ChunkText *)((char *)this + 8));
}

uint64_t siri::dialogengine::ChunkText::GetAttributes@<X0>(const void ***this@<X0>, uint64_t a2@<X8>)
{
  return std::map<std::string,std::string>::map[abi:ne180100](a2, this + 22);
}

void siri::dialogengine::ChunkText::GetAttribute(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  void *__p[2];
  char v9;

  v5 = a1 + 176;
  siri::dialogengine::StringToLower(a2, (uint64_t)__p);
  v6 = std::__tree<std::string>::find<std::string>(v5, (const void **)__p);
  if (v9 < 0)
    operator delete(__p[0]);
  if (a1 + 184 == v6)
  {
    std::string::basic_string[abi:ne180100]<0>(a3, "");
  }
  else if (*(char *)(v6 + 79) < 0)
  {
    std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)(v6 + 56), *(_QWORD *)(v6 + 64));
  }
  else
  {
    v7 = *(_OWORD *)(v6 + 56);
    a3->__r_.__value_.__r.__words[2] = *(_QWORD *)(v6 + 72);
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v7;
  }
}

void siri::dialogengine::ChunkText::SetAttributes(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = a1 + 176;
  if (v2 != a2)
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>(v2, *(__int128 **)a2, (__int128 *)(a2 + 8));
}

std::string *siri::dialogengine::DialogPronoun::toString(siri::dialogengine::DialogPronoun *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  char *OptionalStringParameter;
  std::string::size_type size;
  char *v7;
  char *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v15;
  uint64_t v16;
  char v17;
  uint64_t i;
  void **v19;
  char v23;
  uint64_t v24;
  char v25;
  uint64_t j;
  void **v27;
  char *v29;
  char *v30;
  _OWORD *v31;
  std::string::size_type v32;
  std::string *v33;
  char v34;
  uint64_t v35;
  char v36;
  uint64_t k;
  void **v38;
  void *v39;
  void *v40;
  void *v42[2];
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  char **v53;
  char *v54;
  uint64_t v55;
  void *v56[2];
  char v57;
  std::string __dst;
  char **v59;
  char *v60;
  uint64_t v61;
  std::string v62;
  _BYTE v63[56];
  void ***v64;
  void **v65[2];
  _BYTE v66[32];
  __int128 v67;
  void *v68[2];
  void *v69[2];
  __int128 v70;
  void *v71[2];
  void *v72[2];
  __int128 v73;
  std::string v74;
  std::string __p;
  std::string v76;
  std::string v77;
  std::string v78;
  std::string v79;
  std::string v80;
  std::string v81[2];
  uint64_t v82;

  v82 = *MEMORY[0x1E0C80C00];
  v73 = 0u;
  memset(&v74, 0, sizeof(v74));
  *(_OWORD *)v71 = 0u;
  *(_OWORD *)v72 = 0u;
  *(_OWORD *)v69 = 0u;
  v70 = 0u;
  v67 = 0u;
  *(_OWORD *)v68 = 0u;
  memset(v66, 0, sizeof(v66));
  v65[0] = 0;
  v65[1] = 0;
  v64 = v65;
  memset(&v63[32], 0, 24);
  std::string::basic_string[abi:ne180100]<0>(&__p, "gender");
  OptionalStringParameter = (char *)siri::dialogengine::GetOptionalStringParameter((const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (OptionalStringParameter)
  {
    if (OptionalStringParameter[95] < 0)
      std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)OptionalStringParameter + 9), *((_QWORD *)OptionalStringParameter + 10));
    else
      __p = *(std::string *)(OptionalStringParameter + 3);
    if ((v63[55] & 0x80000000) != 0)
      operator delete(*(void **)&v63[32]);
    *(std::string *)&v63[32] = __p;
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = __p.__r_.__value_.__l.__size_;
    if (size)
    {
      std::basic_string<char16_t>::basic_string[abi:ne180100]<0>(&__dst, (char *)L"gender");
      *(_OWORD *)&v63[8] = 0uLL;
      *(_QWORD *)v63 = &v63[8];
      morphun::dialog::SemanticFeature::SemanticFeature();
      morphun::util::StringUtils::to_u16string();
      morphun::dialog::SemanticFeature::SemanticFeature();
      v78 = v62;
      memset(&v62, 0, sizeof(v62));
      std::__tree<std::__value_type<morphun::dialog::SemanticFeature,std::basic_string<char16_t>>,std::__map_value_compare<morphun::dialog::SemanticFeature,std::__value_type<morphun::dialog::SemanticFeature,std::basic_string<char16_t>>,std::less<morphun::dialog::SemanticFeature>,true>,std::allocator<std::__value_type<morphun::dialog::SemanticFeature,std::basic_string<char16_t>>>>::__emplace_hint_unique_key_args<morphun::dialog::SemanticFeature,std::pair<morphun::dialog::SemanticFeature const,std::basic_string<char16_t>> const&>((uint64_t **)&v64, (uint64_t *)v65, (uint64_t)&__p, (uint64_t)&__p);
      if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v78.__r_.__value_.__l.__data_);
      morphun::dialog::SemanticFeature::~SemanticFeature((morphun::dialog::SemanticFeature *)&__p);
      if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v62.__r_.__value_.__l.__data_);
      morphun::dialog::SemanticFeature::~SemanticFeature((morphun::dialog::SemanticFeature *)v42);
      std::__tree<std::string>::destroy(*(char **)&v63[8]);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__dst.__r_.__value_.__l.__data_);
    }
  }
  memset(v63, 0, 24);
  std::string::basic_string[abi:ne180100]<0>(&__p, "requestType");
  v7 = (char *)siri::dialogengine::GetOptionalStringParameter((const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)a2);
  v8 = v7;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!v8)
      goto LABEL_77;
  }
  else if (!v7)
  {
    goto LABEL_77;
  }
  if (v8[95] < 0)
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)v8 + 9), *((_QWORD *)v8 + 10));
  else
    __p = *(std::string *)(v8 + 3);
  *(std::string *)v63 = __p;
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (HIBYTE(__p.__r_.__value_.__r.__words[2]) != 11)
    {
      if (HIBYTE(__p.__r_.__value_.__r.__words[2]) != 13)
      {
        if (HIBYTE(__p.__r_.__value_.__r.__words[2]) != 19)
          goto LABEL_77;
        v9 = (uint64_t *)v63;
LABEL_34:
        v10 = *v9;
        v11 = v9[1];
        v12 = *(uint64_t *)((char *)v9 + 11);
        if (v10 != 0x2E74696B69726973 || v11 != 0x7453656369766544 || v12 != 0x6574617453656369)
          goto LABEL_77;
        std::basic_string<char16_t>::basic_string[abi:ne180100]<0>(&v62, "c");
        v60 = 0;
        v61 = 0;
        v59 = &v60;
        morphun::dialog::SemanticFeature::SemanticFeature();
        std::pair<morphun::dialog::SemanticFeature const,std::basic_string<char16_t>>::pair[abi:ne180100]<morphun::dialog::SemanticFeature,char16_t const(&)[9],0>((uint64_t)&__p);
        std::basic_string<char16_t>::basic_string[abi:ne180100]<0>(v56, (char *)L"person");
        v54 = 0;
        v55 = 0;
        v53 = &v54;
        morphun::dialog::SemanticFeature::SemanticFeature();
        std::pair<morphun::dialog::SemanticFeature const,std::basic_string<char16_t>>::pair[abi:ne180100]<morphun::dialog::SemanticFeature,char16_t const(&)[6],0>((uint64_t)&v79, (uint64_t)&__dst, (char *)L"first");
        v15 = 0;
        v16 = 0;
        do
        {
          v17 = v15;
          std::__tree<std::__value_type<morphun::dialog::SemanticFeature,std::basic_string<char16_t>>,std::__map_value_compare<morphun::dialog::SemanticFeature,std::__value_type<morphun::dialog::SemanticFeature,std::basic_string<char16_t>>,std::less<morphun::dialog::SemanticFeature>,true>,std::allocator<std::__value_type<morphun::dialog::SemanticFeature,std::basic_string<char16_t>>>>::__emplace_hint_unique_key_args<morphun::dialog::SemanticFeature,std::pair<morphun::dialog::SemanticFeature const,std::basic_string<char16_t>> const&>((uint64_t **)&v64, (uint64_t *)v65, (uint64_t)(&__p + 4 * v16), (uint64_t)(&__p + 4 * v16));
          v15 = 1;
          v16 = 1;
        }
        while ((v17 & 1) == 0);
        for (i = 0; i != -24; i -= 12)
        {
          v19 = (void **)((char *)&__p.__r_.__value_.__l.__data_ + i * 8);
          if (SHIBYTE(v81[1].__r_.__value_.__r.__words[i + 2]) < 0)
            operator delete(v19[21]);
          morphun::dialog::SemanticFeature::~SemanticFeature((morphun::dialog::SemanticFeature *)(v19 + 12));
        }
LABEL_98:
        morphun::dialog::SemanticFeature::~SemanticFeature((morphun::dialog::SemanticFeature *)&__dst);
        std::__tree<std::string>::destroy(v54);
        if (v57 < 0)
          operator delete(v56[0]);
        morphun::dialog::SemanticFeature::~SemanticFeature((morphun::dialog::SemanticFeature *)v42);
        std::__tree<std::string>::destroy(v60);
        if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
        {
          v39 = (void *)v62.__r_.__value_.__r.__words[0];
LABEL_102:
          operator delete(v39);
          goto LABEL_103;
        }
        goto LABEL_103;
      }
      if (*(_QWORD *)v63 != 0x502E676F6C616964 || *(_QWORD *)&v63[5] != 0x6E6F737265502E67)
        goto LABEL_77;
LABEL_158:
      std::basic_string<char16_t>::basic_string[abi:ne180100]<0>(&__dst, (char *)L"person");
      *(_OWORD *)&v62.__r_.__value_.__r.__words[1] = 0uLL;
      v62.__r_.__value_.__r.__words[0] = (std::string::size_type)&v62.__r_.__value_.__l.__size_;
      morphun::dialog::SemanticFeature::SemanticFeature();
      std::pair<morphun::dialog::SemanticFeature const,std::basic_string<char16_t>>::pair[abi:ne180100]<morphun::dialog::SemanticFeature,char16_t const(&)[6],0>((uint64_t)&__p, (uint64_t)v42, (char *)L"third");
      std::__tree<std::__value_type<morphun::dialog::SemanticFeature,std::basic_string<char16_t>>,std::__map_value_compare<morphun::dialog::SemanticFeature,std::__value_type<morphun::dialog::SemanticFeature,std::basic_string<char16_t>>,std::less<morphun::dialog::SemanticFeature>,true>,std::allocator<std::__value_type<morphun::dialog::SemanticFeature,std::basic_string<char16_t>>>>::__emplace_hint_unique_key_args<morphun::dialog::SemanticFeature,std::pair<morphun::dialog::SemanticFeature const,std::basic_string<char16_t>> const&>((uint64_t **)&v64, (uint64_t *)v65, (uint64_t)&__p, (uint64_t)&__p);
      if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v78.__r_.__value_.__l.__data_);
      morphun::dialog::SemanticFeature::~SemanticFeature((morphun::dialog::SemanticFeature *)&__p);
      morphun::dialog::SemanticFeature::~SemanticFeature((morphun::dialog::SemanticFeature *)v42);
      std::__tree<std::string>::destroy((char *)v62.__r_.__value_.__l.__size_);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      {
        v39 = (void *)__dst.__r_.__value_.__r.__words[0];
        goto LABEL_102;
      }
LABEL_103:
      memset(&__dst, 0, sizeof(__dst));
      v52 = 0;
      v50 = 0u;
      v51 = 0u;
      v48 = 0u;
      v49 = 0u;
      v46 = 0u;
      v47 = 0u;
      v44 = 0u;
      v45 = 0u;
      *(_OWORD *)v42 = 0u;
      v43 = 0u;
      siri::dialogengine::InflectPronoun(this, (siri::dialogengine::Context *)&__dst, (uint64_t)v42, (uint64_t)&__p);
      std::string::operator=((std::string *)v66, &__p);
      std::string::operator=((std::string *)&v66[24], &v76);
      std::string::operator=((std::string *)v68, &v77);
      std::string::operator=((std::string *)&v69[1], &v78);
      std::string::operator=((std::string *)v71, &v79);
      std::string::operator=((std::string *)&v72[1], &v80);
      std::string::operator=(&v74, v81);
      if (SHIBYTE(v81[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(v81[0].__r_.__value_.__l.__data_);
      if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v80.__r_.__value_.__l.__data_);
      if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v79.__r_.__value_.__l.__data_);
      if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v78.__r_.__value_.__l.__data_);
      if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v77.__r_.__value_.__l.__data_);
      if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v76.__r_.__value_.__l.__data_);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v42[0] = &__dst;
      std::vector<siri::dialogengine::SemanticFeatureConstraint>::__destroy_vector::operator()[abi:ne180100]((void ***)v42);
      v33 = (std::string *)operator new();
      std::string::basic_string[abi:ne180100]<0>(&__p, "");
      siri::dialogengine::VariableString::VariableString(v33, &__p, (const siri::dialogengine::SpeakableString *)v66);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        v40 = (void *)__p.__r_.__value_.__r.__words[0];
LABEL_138:
        operator delete(v40);
        goto LABEL_139;
      }
      goto LABEL_139;
    }
    if (*(_QWORD *)v63 != 0x552E676F6C616964 || *(_QWORD *)&v63[3] != 0x726573552E676F6CLL)
      goto LABEL_77;
LABEL_66:
    std::basic_string<char16_t>::basic_string[abi:ne180100]<0>(&v62, "c");
    v60 = 0;
    v61 = 0;
    v59 = &v60;
    morphun::dialog::SemanticFeature::SemanticFeature();
    std::pair<morphun::dialog::SemanticFeature const,std::basic_string<char16_t>>::pair[abi:ne180100]<morphun::dialog::SemanticFeature,char16_t const(&)[9],0>((uint64_t)&__p);
    std::basic_string<char16_t>::basic_string[abi:ne180100]<0>(v56, (char *)L"person");
    v54 = 0;
    v55 = 0;
    v53 = &v54;
    morphun::dialog::SemanticFeature::SemanticFeature();
    std::pair<morphun::dialog::SemanticFeature const,std::basic_string<char16_t>>::pair[abi:ne180100]<morphun::dialog::SemanticFeature,char16_t const(&)[7],0>((uint64_t)&v79);
    v23 = 0;
    v24 = 0;
    do
    {
      v25 = v23;
      std::__tree<std::__value_type<morphun::dialog::SemanticFeature,std::basic_string<char16_t>>,std::__map_value_compare<morphun::dialog::SemanticFeature,std::__value_type<morphun::dialog::SemanticFeature,std::basic_string<char16_t>>,std::less<morphun::dialog::SemanticFeature>,true>,std::allocator<std::__value_type<morphun::dialog::SemanticFeature,std::basic_string<char16_t>>>>::__emplace_hint_unique_key_args<morphun::dialog::SemanticFeature,std::pair<morphun::dialog::SemanticFeature const,std::basic_string<char16_t>> const&>((uint64_t **)&v64, (uint64_t *)v65, (uint64_t)(&__p + 4 * v24), (uint64_t)(&__p + 4 * v24));
      v23 = 1;
      v24 = 1;
    }
    while ((v25 & 1) == 0);
    for (j = 0; j != -24; j -= 12)
    {
      v27 = (void **)((char *)&__p.__r_.__value_.__l.__data_ + j * 8);
      if (SHIBYTE(v81[1].__r_.__value_.__r.__words[j + 2]) < 0)
        operator delete(v27[21]);
      morphun::dialog::SemanticFeature::~SemanticFeature((morphun::dialog::SemanticFeature *)(v27 + 12));
    }
    goto LABEL_98;
  }
  if (*(_QWORD *)&v63[8] == 11)
  {
    if (**(_QWORD **)v63 != 0x552E676F6C616964 || *(_QWORD *)(*(_QWORD *)v63 + 3) != 0x726573552E676F6CLL)
      goto LABEL_77;
    goto LABEL_66;
  }
  if (*(_QWORD *)&v63[8] != 13)
  {
    if (*(_QWORD *)&v63[8] != 19)
      goto LABEL_77;
    v9 = *(uint64_t **)v63;
    goto LABEL_34;
  }
  if (**(_QWORD **)v63 == 0x502E676F6C616964 && *(_QWORD *)(*(_QWORD *)v63 + 5) == 0x6E6F737265502E67)
    goto LABEL_158;
LABEL_77:
  std::string::basic_string[abi:ne180100]<0>(&__p, "initialPronoun");
  v29 = (char *)siri::dialogengine::GetOptionalStringParameter((const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)a2);
  v30 = v29;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!v30)
      goto LABEL_92;
  }
  else if (!v29)
  {
    goto LABEL_92;
  }
  v31 = v30 + 72;
  if (v30[95] < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)v30 + 9), *((_QWORD *)v30 + 10));
  }
  else
  {
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *v31;
    __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v30 + 11);
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v32 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v32 = __p.__r_.__value_.__l.__size_;
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v32)
      goto LABEL_89;
LABEL_92:
    std::basic_string<char16_t>::basic_string[abi:ne180100]<0>(&v62, "c");
    v60 = 0;
    v61 = 0;
    v59 = &v60;
    morphun::dialog::SemanticFeature::SemanticFeature();
    std::pair<morphun::dialog::SemanticFeature const,std::basic_string<char16_t>>::pair[abi:ne180100]<morphun::dialog::SemanticFeature,char16_t const(&)[9],0>((uint64_t)&__p);
    std::basic_string<char16_t>::basic_string[abi:ne180100]<0>(v56, (char *)L"person");
    v54 = 0;
    v55 = 0;
    v53 = &v54;
    morphun::dialog::SemanticFeature::SemanticFeature();
    std::pair<morphun::dialog::SemanticFeature const,std::basic_string<char16_t>>::pair[abi:ne180100]<morphun::dialog::SemanticFeature,char16_t const(&)[7],0>((uint64_t)&v79);
    v34 = 0;
    v35 = 0;
    do
    {
      v36 = v34;
      std::__tree<std::__value_type<morphun::dialog::SemanticFeature,std::basic_string<char16_t>>,std::__map_value_compare<morphun::dialog::SemanticFeature,std::__value_type<morphun::dialog::SemanticFeature,std::basic_string<char16_t>>,std::less<morphun::dialog::SemanticFeature>,true>,std::allocator<std::__value_type<morphun::dialog::SemanticFeature,std::basic_string<char16_t>>>>::__emplace_hint_unique_key_args<morphun::dialog::SemanticFeature,std::pair<morphun::dialog::SemanticFeature const,std::basic_string<char16_t>> const&>((uint64_t **)&v64, (uint64_t *)v65, (uint64_t)(&__p + 4 * v35), (uint64_t)(&__p + 4 * v35));
      v34 = 1;
      v35 = 1;
    }
    while ((v36 & 1) == 0);
    for (k = 0; k != -24; k -= 12)
    {
      v38 = (void **)((char *)&__p.__r_.__value_.__l.__data_ + k * 8);
      if (SHIBYTE(v81[1].__r_.__value_.__r.__words[k + 2]) < 0)
        operator delete(v38[21]);
      morphun::dialog::SemanticFeature::~SemanticFeature((morphun::dialog::SemanticFeature *)(v38 + 12));
    }
    goto LABEL_98;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (!v32)
    goto LABEL_92;
LABEL_89:
  v33 = (std::string *)operator new();
  std::string::basic_string[abi:ne180100]<0>(v42, "");
  if (v30[95] < 0)
  {
    std::string::__init_copy_ctor_external(&__dst, *((const std::string::value_type **)v30 + 9), *((_QWORD *)v30 + 10));
  }
  else
  {
    *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = *v31;
    __dst.__r_.__value_.__r.__words[2] = *((_QWORD *)v30 + 11);
  }
  siri::dialogengine::SpeakableString::SpeakableString((uint64_t)&__p, (uint64_t)&__dst);
  siri::dialogengine::VariableString::VariableString(v33, (const std::string *)v42, (const siri::dialogengine::SpeakableString *)&__p);
  if (SHIBYTE(v81[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v81[0].__r_.__value_.__l.__data_);
  if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v80.__r_.__value_.__l.__data_);
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v79.__r_.__value_.__l.__data_);
  if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v78.__r_.__value_.__l.__data_);
  if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v77.__r_.__value_.__l.__data_);
  if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v76.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  if (SBYTE7(v43) < 0)
  {
    v40 = v42[0];
    goto LABEL_138;
  }
LABEL_139:
  if ((v63[23] & 0x80000000) != 0)
    operator delete(*(void **)v63);
  if ((v63[55] & 0x80000000) != 0)
    operator delete(*(void **)&v63[32]);
  std::__tree<std::__value_type<morphun::dialog::SemanticFeature,std::basic_string<char16_t>>,std::__map_value_compare<morphun::dialog::SemanticFeature,std::__value_type<morphun::dialog::SemanticFeature,std::basic_string<char16_t>>,std::less<morphun::dialog::SemanticFeature>,true>,std::allocator<std::__value_type<morphun::dialog::SemanticFeature,std::basic_string<char16_t>>>>::destroy(v65[0]);
  if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v74.__r_.__value_.__l.__data_);
  if (SHIBYTE(v73) < 0)
    operator delete(v72[1]);
  if (SHIBYTE(v72[0]) < 0)
    operator delete(v71[0]);
  if (SHIBYTE(v70) < 0)
    operator delete(v69[1]);
  if (SHIBYTE(v69[0]) < 0)
    operator delete(v68[0]);
  if (SHIBYTE(v67) < 0)
    operator delete(*(void **)&v66[24]);
  if ((v66[23] & 0x80000000) != 0)
    operator delete(*(void **)v66);
  return v33;
}

void sub_1BFBFD450(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61,uint64_t a62,void *a63)
{
  char a68;
  uint64_t a70;
  void *a72;

  std::__destroy_at[abi:ne180100]<std::pair<morphun::dialog::SemanticFeature const,std::basic_string<char16_t>>,0>((void **)&STACK[0x260]);
  morphun::dialog::SemanticFeature::~SemanticFeature((morphun::dialog::SemanticFeature *)&a9);
  std::__tree<std::string>::destroy((char *)a54);
  if (a42 < 0)
    operator delete(__p);
  if (a61 < 0)
    operator delete(a56);
  if (a68 < 0)
    operator delete(a63);
  std::__tree<std::__value_type<morphun::dialog::SemanticFeature,std::basic_string<char16_t>>,std::__map_value_compare<morphun::dialog::SemanticFeature,std::__value_type<morphun::dialog::SemanticFeature,std::basic_string<char16_t>>,std::less<morphun::dialog::SemanticFeature>,true>,std::allocator<std::__value_type<morphun::dialog::SemanticFeature,std::basic_string<char16_t>>>>::destroy((void **)a70);
  siri::dialogengine::SpeakableString::~SpeakableString(&a72);
  _Unwind_Resume(a1);
}

uint64_t std::pair<morphun::dialog::SemanticFeature const,std::basic_string<char16_t>>::pair[abi:ne180100]<morphun::dialog::SemanticFeature,char16_t const(&)[9],0>(uint64_t a1)
{
  uint64_t v2;

  v2 = morphun::dialog::SemanticFeature::SemanticFeature();
  std::basic_string<char16_t>::basic_string[abi:ne180100]<0>((_QWORD *)(v2 + 72), "s");
  return a1;
}

void sub_1BFBFD8D4(_Unwind_Exception *a1)
{
  morphun::dialog::SemanticFeature *v1;

  morphun::dialog::SemanticFeature::~SemanticFeature(v1);
  _Unwind_Resume(a1);
}

uint64_t std::pair<morphun::dialog::SemanticFeature const,std::basic_string<char16_t>>::pair[abi:ne180100]<morphun::dialog::SemanticFeature,char16_t const(&)[7],0>(uint64_t a1)
{
  uint64_t v2;

  v2 = morphun::dialog::SemanticFeature::SemanticFeature();
  std::basic_string<char16_t>::basic_string[abi:ne180100]<0>((_QWORD *)(v2 + 72), "s");
  return a1;
}

void sub_1BFBFD91C(_Unwind_Exception *a1)
{
  morphun::dialog::SemanticFeature *v1;

  morphun::dialog::SemanticFeature::~SemanticFeature(v1);
  _Unwind_Resume(a1);
}

uint64_t std::pair<morphun::dialog::SemanticFeature const,std::basic_string<char16_t>>::pair[abi:ne180100]<morphun::dialog::SemanticFeature,char16_t const(&)[6],0>(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v5;

  v5 = morphun::dialog::SemanticFeature::SemanticFeature();
  std::basic_string<char16_t>::basic_string[abi:ne180100]<0>((_QWORD *)(v5 + 72), a3);
  return a1;
}

void sub_1BFBFD964(_Unwind_Exception *a1)
{
  morphun::dialog::SemanticFeature *v1;

  morphun::dialog::SemanticFeature::~SemanticFeature(v1);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::DialogPronoun::gender(siri::dialogengine::DialogPronoun *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  const void **v5;
  const char *v6;
  char *OptionalStringParameter;
  morphun::dialog::LocalizedCommonConceptFactoryProvider *v8;
  uint64_t DefaultCommonConceptFactoryProvider;
  uint64_t v10;
  void (***FeatureValue)(void **__return_ptr);
  uint64_t v12;
  void *v14[2];
  uint64_t v15;
  void *v16[2];
  char v17;
  void *__p;
  char *v19;
  uint64_t v20;
  std::string __dst;
  std::string v22[5];
  std::string v23;

  v5 = (const void **)std::string::basic_string[abi:ne180100]<0>(v22, "initialPronoun");
  OptionalStringParameter = (char *)siri::dialogengine::GetOptionalStringParameter(v5, (uint64_t)a2);
  if (SHIBYTE(v22[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22[0].__r_.__value_.__l.__data_);
  memset(&v23, 0, sizeof(v23));
  if (OptionalStringParameter)
  {
    siri::dialogengine::Context::GetLocale(this, v6, (uint64_t)v16);
    v14[0] = 0;
    v14[1] = 0;
    v15 = 0;
    memset(&__dst, 0, sizeof(__dst));
    __p = 0;
    v19 = 0;
    v20 = 0;
    v8 = (morphun::dialog::LocalizedCommonConceptFactoryProvider *)morphun::util::ULocale::ULocale();
    if (SHIBYTE(v20) < 0)
      operator delete(__p);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
    if (SHIBYTE(v15) < 0)
      operator delete(v14[0]);
    if (v17 < 0)
      operator delete(v16[0]);
    DefaultCommonConceptFactoryProvider = morphun::dialog::LocalizedCommonConceptFactoryProvider::getDefaultCommonConceptFactoryProvider(v8);
    v10 = (*(uint64_t (**)(uint64_t, std::string *))(*(_QWORD *)DefaultCommonConceptFactoryProvider + 24))(DefaultCommonConceptFactoryProvider, v22);
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10);
    if (OptionalStringParameter[95] < 0)
      std::string::__init_copy_ctor_external(&__dst, *((const std::string::value_type **)OptionalStringParameter + 9), *((_QWORD *)OptionalStringParameter + 10));
    else
      __dst = *(std::string *)(OptionalStringParameter + 3);
    morphun::util::StringUtils::to_u16string();
    morphun::dialog::PronounConcept::PronounConcept();
    if (SHIBYTE(v15) < 0)
      operator delete(v14[0]);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
    std::basic_string<char16_t>::basic_string[abi:ne180100]<0>(&__dst, (char *)L"gender");
    v19 = 0;
    v20 = 0;
    __p = &v19;
    morphun::dialog::SemanticFeature::SemanticFeature();
    std::__tree<std::string>::destroy(v19);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
    FeatureValue = (void (***)(void **__return_ptr))morphun::dialog::PronounConcept::getFeatureValue((morphun::dialog::PronounConcept *)v16, (const morphun::dialog::SemanticFeature *)v14);
    (**FeatureValue)(&__p);
    morphun::util::StringUtils::to_string();
    v23 = __dst;
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 0;
    __dst.__r_.__value_.__s.__data_[0] = 0;
    if (SHIBYTE(v20) < 0)
      operator delete(__p);
    morphun::dialog::SemanticFeature::~SemanticFeature((morphun::dialog::SemanticFeature *)v14);
    morphun::dialog::PronounConcept::~PronounConcept((morphun::dialog::PronounConcept *)v16);
    morphun::util::ULocale::~ULocale((morphun::util::ULocale *)v22);
  }
  v12 = operator new();
  std::string::basic_string[abi:ne180100]<0>(v22, "");
  siri::dialogengine::VariableString::VariableString(v12, v22, (uint64_t)&v23);
  if (SHIBYTE(v22[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22[0].__r_.__value_.__l.__data_);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
  return v12;
}

void sub_1BFBFDC1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  uint64_t v47;

  morphun::util::ULocale::~ULocale((morphun::util::ULocale *)(v47 - 192));
  if (*(char *)(v47 - 41) < 0)
    operator delete(*(void **)(v47 - 64));
  _Unwind_Resume(a1);
}

void InitDefaultsscc_info_Slider_Slider_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Slider.pb.cc", a4);
  SnippetUI::Slider::Slider((SnippetUI::Slider *)&SnippetUI::_Slider_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_Slider_default_instance_, v4);
  qword_1ED1D3BB0 = (uint64_t)&SnippetUI::_OptionalDouble_default_instance_;
  unk_1ED1D3BB8 = &SnippetUI::_OptionalDouble_default_instance_;
  qword_1ED1D3BC0 = (uint64_t)&SnippetUI::_VisualProperty_default_instance_;
  unk_1ED1D3BC8 = &SnippetUI::_VisualProperty_default_instance_;
}

SnippetUI::Slider *SnippetUI::Slider::Slider(SnippetUI::Slider *this)
{
  *(_QWORD *)this = &off_1E79376D0;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 20) = 0;
  if (atomic_load(scc_info_Slider_Slider_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Slider_Slider_2eproto);
  *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  return this;
}

void sub_1BFBFDE48(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::Slider::~Slider(SnippetUI::Slider *this)
{
  SnippetUI::Slider::~Slider(this);
  JUMPOUT(0x1C3B8D890);
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)this = &off_1E79376D0;
  v2 = *((_QWORD *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x1C3B8D890](v2, 0x1012C40EC159624);
  }
  v4 = *((_QWORD *)this + 3);
  if ((uint64_t *)v4 != &google::protobuf::internal::fixed_address_empty_string && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0)
      operator delete(*(void **)v4);
    MEMORY[0x1C3B8D890](v4, 0x1012C40EC159624);
  }
  if (this != (SnippetUI::Slider *)&SnippetUI::_Slider_default_instance_)
  {
    v6 = *((_QWORD *)this + 4);
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    v7 = *((_QWORD *)this + 5);
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    v8 = *((_QWORD *)this + 6);
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    v9 = *((_QWORD *)this + 7);
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

SnippetUI::Slider *SnippetUI::Slider::New(SnippetUI::Slider *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Slider>(0);
}

SnippetUI::Slider *SnippetUI::Slider::New(SnippetUI::Slider *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Slider>(a2);
}

void SnippetUI::Slider::Clear(SnippetUI::Slider *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  google::protobuf::internal::InternalMetadataWithArena *v9;
  char v10;

  v2 = *((_QWORD *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(_BYTE **)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v2 = 0;
      *(_BYTE *)(v2 + 23) = 0;
    }
  }
  v3 = *((_QWORD *)this + 3);
  if ((uint64_t *)v3 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v3 + 23) < 0)
    {
      **(_BYTE **)v3 = 0;
      *(_QWORD *)(v3 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v3 = 0;
      *(_BYTE *)(v3 + 23) = 0;
    }
  }
  v4 = *((_QWORD *)this + 4);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  *((_QWORD *)this + 4) = 0;
  v5 = *((_QWORD *)this + 5);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *((_QWORD *)this + 5) = 0;
  v6 = *((_QWORD *)this + 6);
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v8 = (_QWORD *)((char *)this + 56);
  v7 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 6) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v10 = *((_BYTE *)this + 8);
  v9 = (SnippetUI::Slider *)((char *)this + 8);
  *v8 = 0;
  v8[1] = 0;
  v8[2] = 0;
  if ((v10 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v9);
}

uint64_t SnippetUI::Slider::IsInitialized(SnippetUI::Slider *this)
{
  return 1;
}

char *SnippetUI::Slider::ByteSizeLong(SnippetUI::Slider *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  SnippetUI::OptionalDouble *v9;
  char *v10;
  SnippetUI::OptionalDouble *v11;
  char *v12;
  SnippetUI::VisualProperty *v13;
  char *v14;
  SnippetUI::VisualProperty *v15;
  char *v16;
  uint64_t v17;
  const google::protobuf::UnknownFieldSet *v18;

  v2 = *((_QWORD *)this + 2);
  v3 = *(unsigned __int8 *)(v2 + 23);
  if (*(char *)(v2 + 23) < 0)
  {
    if (*(_QWORD *)(v2 + 8))
      goto LABEL_3;
LABEL_7:
    v5 = 0;
    goto LABEL_8;
  }
  if (!*(_BYTE *)(v2 + 23))
    goto LABEL_7;
LABEL_3:
  v4 = *(_QWORD *)(v2 + 8);
  if ((v3 & 0x80u) == 0)
    v4 = v3;
  v5 = v4 + ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_8:
  v6 = *((_QWORD *)this + 3);
  v7 = *(unsigned __int8 *)(v6 + 23);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(_QWORD *)(v6 + 8))
      goto LABEL_13;
  }
  else if (!*(_BYTE *)(v6 + 23))
  {
    goto LABEL_13;
  }
  v8 = *(_QWORD *)(v6 + 8);
  if ((v7 & 0x80u) == 0)
    v8 = v7;
  v5 += v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_13:
  if (this != (SnippetUI::Slider *)&SnippetUI::_Slider_default_instance_)
  {
    v9 = (SnippetUI::OptionalDouble *)*((_QWORD *)this + 4);
    if (v9)
    {
      v10 = SnippetUI::OptionalDouble::ByteSizeLong(v9);
      v5 += (uint64_t)&v10[((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6) + 1];
    }
    v11 = (SnippetUI::OptionalDouble *)*((_QWORD *)this + 5);
    if (v11)
    {
      v12 = SnippetUI::OptionalDouble::ByteSizeLong(v11);
      v5 += (uint64_t)&v12[((9 * (__clz(v12 | 1) ^ 0x1F) + 73) >> 6) + 1];
    }
    v13 = (SnippetUI::VisualProperty *)*((_QWORD *)this + 6);
    if (v13)
    {
      v14 = SnippetUI::VisualProperty::ByteSizeLong(v13);
      v5 += (uint64_t)&v14[((9 * (__clz(v14 | 1) ^ 0x1F) + 73) >> 6) + 1];
    }
    v15 = (SnippetUI::VisualProperty *)*((_QWORD *)this + 7);
    if (v15)
    {
      v16 = SnippetUI::VisualProperty::ByteSizeLong(v15);
      v5 += (uint64_t)&v16[((9 * (__clz(v16 | 1) ^ 0x1F) + 73) >> 6) + 1];
    }
  }
  v17 = v5 + 9;
  if (*((double *)this + 8) == 0.0)
    v17 = v5;
  if (*((double *)this + 9) == 0.0)
    v18 = (const google::protobuf::UnknownFieldSet *)v17;
  else
    v18 = (const google::protobuf::UnknownFieldSet *)(v17 + 9);
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::Slider *)((char *)this + 8), v18, (_DWORD *)this + 20);
  *((_DWORD *)this + 20) = (_DWORD)v18;
  return (char *)v18;
}

uint64_t SnippetUI::Slider::GetCachedSize(SnippetUI::Slider *this)
{
  return *((unsigned int *)this + 20);
}

google::protobuf::internal *SnippetUI::Slider::_InternalParse(SnippetUI::Slider *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  std::string **v5;
  std::string **v6;
  uint64_t *v7;
  google::protobuf::internal::ParseContext *v8;
  char *TagFallback;
  char *v10;
  std::string *v11;
  char *v12;
  SnippetUI::OptionalDouble *v13;
  std::string *v14;
  SnippetUI::VisualProperty *v15;
  BOOL v16;
  google::protobuf::internal *v18;

  v18 = a2;
  v5 = (std::string **)((char *)this + 24);
  v6 = (std::string **)((char *)this + 16);
  v7 = (uint64_t *)((char *)this + 8);
  while (2)
  {
    if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v18, *((_DWORD *)a3 + 23)) & 1) != 0)
      return v18;
    TagFallback = (char *)v18 + 1;
    v10 = (char *)*(unsigned __int8 *)v18;
    if ((*(char *)v18 & 0x80000000) == 0)
      goto LABEL_6;
    v10 = (char *)(v10 + (*TagFallback << 7) - 128);
    if ((*TagFallback & 0x80000000) == 0)
    {
      TagFallback = (char *)v18 + 2;
LABEL_6:
      v18 = (google::protobuf::internal *)TagFallback;
      goto LABEL_7;
    }
    TagFallback = (char *)google::protobuf::internal::ReadTagFallback(v18, v10);
    v18 = (google::protobuf::internal *)TagFallback;
    if (!TagFallback)
      return (google::protobuf::internal *)TagFallback;
LABEL_7:
    switch(v10 >> 3)
    {
      case 1u:
        if (v10 != 10)
          goto LABEL_38;
        v11 = *v6;
        if (*v6 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v6, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v11 = *v6;
          TagFallback = (char *)v18;
        }
        v12 = google::protobuf::internal::InlineGreedyStringParserUTF8(v11, TagFallback, (uint64_t)a3, (google::protobuf::internal *)"SnippetUI.Slider.identifier");
        goto LABEL_43;
      case 2u:
        if (v10 != 17)
          goto LABEL_38;
        *((_QWORD *)this + 8) = *(_QWORD *)TagFallback;
        v18 = (google::protobuf::internal *)(TagFallback + 8);
        continue;
      case 3u:
        if (v10 != 25)
          goto LABEL_38;
        *((_QWORD *)this + 9) = *(_QWORD *)TagFallback;
        v18 = (google::protobuf::internal *)(TagFallback + 8);
        continue;
      case 4u:
        if (v10 != 34)
          goto LABEL_38;
        v13 = (SnippetUI::OptionalDouble *)*((_QWORD *)this + 4);
        if (v13)
          goto LABEL_25;
        v13 = (SnippetUI::OptionalDouble *)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::OptionalDouble>(0);
        *((_QWORD *)this + 4) = v13;
        goto LABEL_24;
      case 5u:
        if (v10 != 42)
          goto LABEL_38;
        v13 = (SnippetUI::OptionalDouble *)*((_QWORD *)this + 5);
        if (v13)
          goto LABEL_25;
        v13 = (SnippetUI::OptionalDouble *)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::OptionalDouble>(0);
        *((_QWORD *)this + 5) = v13;
LABEL_24:
        TagFallback = (char *)v18;
LABEL_25:
        v12 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::OptionalDouble>(a3, v13, (google::protobuf::internal *)TagFallback);
        goto LABEL_43;
      case 6u:
        if (v10 != 50)
          goto LABEL_38;
        v14 = *v5;
        if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v14 = *v5;
          TagFallback = (char *)v18;
        }
        v12 = google::protobuf::internal::InlineGreedyStringParser(v14, TagFallback, (uint64_t)a3);
        goto LABEL_43;
      case 7u:
        if (v10 != 58)
          goto LABEL_38;
        v15 = (SnippetUI::VisualProperty *)*((_QWORD *)this + 6);
        if (v15)
          goto LABEL_37;
        v15 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::VisualProperty>(0);
        *((_QWORD *)this + 6) = v15;
        goto LABEL_36;
      case 8u:
        if (v10 != 66)
          goto LABEL_38;
        v15 = (SnippetUI::VisualProperty *)*((_QWORD *)this + 7);
        if (v15)
          goto LABEL_37;
        v15 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::VisualProperty>(0);
        *((_QWORD *)this + 7) = v15;
LABEL_36:
        TagFallback = (char *)v18;
LABEL_37:
        v12 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::VisualProperty>(a3, v15, (google::protobuf::internal *)TagFallback);
        goto LABEL_43;
      default:
LABEL_38:
        if ((_DWORD)v10)
          v16 = (v10 & 7) == 4;
        else
          v16 = 1;
        if (v16)
        {
          *((_DWORD *)a3 + 20) = (_DWORD)v10 - 1;
          return (google::protobuf::internal *)TagFallback;
        }
        v12 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v10, v7, (google::protobuf::internal::InternalMetadataWithArena *)TagFallback, a3, v8);
LABEL_43:
        v18 = (google::protobuf::internal *)v12;
        if (v12)
          continue;
        TagFallback = 0;
        break;
    }
    return (google::protobuf::internal *)TagFallback;
  }
}

const google::protobuf::UnknownFieldSet *SnippetUI::Slider::InternalSerializeWithCachedSizesToArray(SnippetUI::Slider *this, unsigned __int8 *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  google::protobuf::internal *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  SnippetUI::OptionalDouble *v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  char *v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  unsigned int v18;
  unsigned int v19;
  SnippetUI::OptionalDouble *v20;
  unsigned int v21;
  unsigned __int8 *v22;
  unsigned int v23;
  unsigned __int8 *v24;
  unsigned __int8 *v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  SnippetUI::VisualProperty *v29;
  unsigned int v30;
  uint64_t v31;
  unsigned int v32;
  google::protobuf::UnknownFieldSet *v33;
  unsigned __int8 *v34;
  unsigned __int8 *v35;
  unsigned int v36;
  unsigned int v37;
  SnippetUI::VisualProperty *v38;
  unsigned int v39;
  unsigned __int8 *v40;
  unsigned int v41;
  unsigned __int8 *v42;
  unsigned __int8 *v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t v46;

  v7 = (google::protobuf::internal *)*((_QWORD *)this + 2);
  if (*((char *)v7 + 23) < 0)
  {
    v8 = (const char *)*((_QWORD *)v7 + 1);
    if (!v8)
      goto LABEL_7;
    v7 = *(google::protobuf::internal **)v7;
    goto LABEL_6;
  }
  v8 = (const char *)*((unsigned __int8 *)v7 + 23);
  if (*((_BYTE *)v7 + 23))
  {
LABEL_6:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v7, v8, 1, (google::protobuf::internal *)"SnippetUI.Slider.identifier");
    a2 = google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 1, *((_QWORD *)this + 2), (char *)a2);
  }
LABEL_7:
  if (*((double *)this + 8) != 0.0)
  {
    if ((unint64_t)a2 >= *(_QWORD *)a3)
      a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
    v9 = *((_QWORD *)this + 8);
    *a2 = 17;
    *(_QWORD *)(a2 + 1) = v9;
    a2 += 9;
  }
  if (*((double *)this + 9) != 0.0)
  {
    if ((unint64_t)a2 >= *(_QWORD *)a3)
      a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
    v10 = *((_QWORD *)this + 9);
    *a2 = 25;
    *(_QWORD *)(a2 + 1) = v10;
    a2 += 9;
  }
  if (this != (SnippetUI::Slider *)&SnippetUI::_Slider_default_instance_)
  {
    v11 = (SnippetUI::OptionalDouble *)*((_QWORD *)this + 4);
    if (!v11)
      goto LABEL_28;
    if ((unint64_t)a2 >= *(_QWORD *)a3)
    {
      a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      v11 = (SnippetUI::OptionalDouble *)*((_QWORD *)this + 4);
    }
    *a2 = 34;
    v12 = *((_DWORD *)v11 + 6);
    if (v12 > 0x7F)
    {
      a2[1] = v12 | 0x80;
      v14 = v12 >> 7;
      if (v12 >> 14)
      {
        v16 = a2 + 2;
        do
        {
          v17 = v16;
          *v16++ = v14 | 0x80;
          v18 = v14 >> 7;
          v19 = v14 >> 14;
          v14 >>= 7;
        }
        while (v19);
        v15 = (char *)(v17 + 2);
        *v16 = v18;
        goto LABEL_27;
      }
      a2[2] = v14;
      v13 = 3;
    }
    else
    {
      a2[1] = v12;
      v13 = 2;
    }
    v15 = (char *)&a2[v13];
LABEL_27:
    a2 = (unsigned __int8 *)SnippetUI::OptionalDouble::InternalSerializeWithCachedSizesToArray(v11, v15, a3, a4);
LABEL_28:
    v20 = (SnippetUI::OptionalDouble *)*((_QWORD *)this + 5);
    if (v20)
    {
      if ((unint64_t)a2 >= *(_QWORD *)a3)
      {
        a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
        v20 = (SnippetUI::OptionalDouble *)*((_QWORD *)this + 5);
      }
      *a2 = 42;
      v21 = *((_DWORD *)v20 + 6);
      if (v21 > 0x7F)
      {
        a2[1] = v21 | 0x80;
        v23 = v21 >> 7;
        if (v21 >> 14)
        {
          v24 = a2 + 2;
          do
          {
            v25 = v24;
            *v24++ = v23 | 0x80;
            v26 = v23 >> 7;
            v27 = v23 >> 14;
            v23 >>= 7;
          }
          while (v27);
          v22 = v25 + 2;
          *v24 = v26;
        }
        else
        {
          a2[2] = v23;
          v22 = a2 + 3;
        }
      }
      else
      {
        a2[1] = v21;
        v22 = a2 + 2;
      }
      a2 = (unsigned __int8 *)SnippetUI::OptionalDouble::InternalSerializeWithCachedSizesToArray(v20, (char *)v22, a3, a4);
    }
  }
  v28 = *((_QWORD *)this + 3);
  if ((*(char *)(v28 + 23) & 0x80000000) == 0)
  {
    if (!*(_BYTE *)(v28 + 23))
      goto LABEL_42;
    goto LABEL_41;
  }
  if (*(_QWORD *)(v28 + 8))
LABEL_41:
    a2 = google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 6, v28, (char *)a2);
LABEL_42:
  if (this == (SnippetUI::Slider *)&SnippetUI::_Slider_default_instance_)
    goto LABEL_68;
  v29 = (SnippetUI::VisualProperty *)*((_QWORD *)this + 6);
  if (v29)
  {
    if ((unint64_t)a2 >= *(_QWORD *)a3)
    {
      a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      v29 = (SnippetUI::VisualProperty *)*((_QWORD *)this + 6);
    }
    *a2 = 58;
    v30 = *((_DWORD *)v29 + 15);
    if (v30 > 0x7F)
    {
      a2[1] = v30 | 0x80;
      v32 = v30 >> 7;
      if (v30 >> 14)
      {
        v34 = a2 + 2;
        do
        {
          v35 = v34;
          *v34++ = v32 | 0x80;
          v36 = v32 >> 7;
          v37 = v32 >> 14;
          v32 >>= 7;
        }
        while (v37);
        v33 = (google::protobuf::UnknownFieldSet *)(v35 + 2);
        *v34 = v36;
        goto LABEL_56;
      }
      a2[2] = v32;
      v31 = 3;
    }
    else
    {
      a2[1] = v30;
      v31 = 2;
    }
    v33 = (google::protobuf::UnknownFieldSet *)&a2[v31];
LABEL_56:
    a2 = (unsigned __int8 *)SnippetUI::VisualProperty::InternalSerializeWithCachedSizesToArray(v29, v33, a3, a4);
  }
  v38 = (SnippetUI::VisualProperty *)*((_QWORD *)this + 7);
  if (v38)
  {
    if ((unint64_t)a2 >= *(_QWORD *)a3)
    {
      a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      v38 = (SnippetUI::VisualProperty *)*((_QWORD *)this + 7);
    }
    *a2 = 66;
    v39 = *((_DWORD *)v38 + 15);
    if (v39 > 0x7F)
    {
      a2[1] = v39 | 0x80;
      v41 = v39 >> 7;
      if (v39 >> 14)
      {
        v42 = a2 + 2;
        do
        {
          v43 = v42;
          *v42++ = v41 | 0x80;
          v44 = v41 >> 7;
          v45 = v41 >> 14;
          v41 >>= 7;
        }
        while (v45);
        v40 = v43 + 2;
        *v42 = v44;
      }
      else
      {
        a2[2] = v41;
        v40 = a2 + 3;
      }
    }
    else
    {
      a2[1] = v39;
      v40 = a2 + 2;
    }
    a2 = (unsigned __int8 *)SnippetUI::VisualProperty::InternalSerializeWithCachedSizesToArray(v38, (google::protobuf::UnknownFieldSet *)v40, a3, a4);
  }
LABEL_68:
  v46 = *((_QWORD *)this + 1);
  if ((v46 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v46 & 0xFFFFFFFFFFFFFFFELL), (const google::protobuf::UnknownFieldSet *)a2, a3, a4);
  else
    return (const google::protobuf::UnknownFieldSet *)a2;
}

void SnippetUI::Slider::CopyFrom(SnippetUI::Slider *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    SnippetUI::Slider::Clear(this);
    SnippetUI::Slider::MergeFrom(this, a2);
  }
}

void SnippetUI::Slider::MergeFrom(SnippetUI::Slider *this, const google::protobuf::Message *lpsrc)
{
  std::string *v4;
  const SnippetUI::Slider *v5;
  google::protobuf::Message *v6;
  char v7;
  std::string v8[2];

  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Slider.pb.cc", 493);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5)
    SnippetUI::Slider::MergeFrom(this, v5);
  else
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
}

void sub_1BFBFE8EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::Slider::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 80) = a2;
  return this;
}

uint64_t SnippetUI::Slider::GetMetadata(SnippetUI::Slider *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_Slider_2eproto);
  return file_level_metadata_Slider_2eproto;
}

void *SnippetUI::Slider::default_instance(SnippetUI::Slider *this)
{
  if (atomic_load(scc_info_Slider_Slider_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Slider_Slider_2eproto);
  return &SnippetUI::_Slider_default_instance_;
}

void SnippetUI::Slider::MergeFrom(SnippetUI::Slider *this, const SnippetUI::Slider *a2)
{
  std::string *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  const SnippetUI::OptionalDouble *v10;
  SnippetUI::OptionalDouble *v11;
  const SnippetUI::OptionalDouble *v12;
  const SnippetUI::OptionalDouble *v13;
  SnippetUI::OptionalDouble *v14;
  const SnippetUI::OptionalDouble *v15;
  int **v16;
  int **v17;
  int **v18;
  int **v19;
  int **v20;
  int **v21;
  double v22;
  double v23;
  char v24;
  std::string v25[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v25, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Slider.pb.cc", 508);
    v4 = google::protobuf::internal::LogMessage::operator<<(v25, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v24, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v25[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::Slider *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  v6 = *((_QWORD *)a2 + 2);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(_QWORD *)(v6 + 8))
      goto LABEL_13;
  }
  else if (!*(_BYTE *)(v6 + 23))
  {
    goto LABEL_13;
  }
  v7 = (uint64_t *)*((_QWORD *)this + 2);
  if (v7 != (uint64_t *)v6)
  {
    if (v7 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, v6);
    else
      std::string::operator=(*((std::string **)this + 2), (const std::string *)v6);
  }
LABEL_13:
  v8 = *((_QWORD *)a2 + 3);
  if (*(char *)(v8 + 23) < 0)
  {
    if (!*(_QWORD *)(v8 + 8))
      goto LABEL_21;
  }
  else if (!*(_BYTE *)(v8 + 23))
  {
    goto LABEL_21;
  }
  v9 = (uint64_t *)*((_QWORD *)this + 3);
  if (v9 != (uint64_t *)v8)
  {
    if (v9 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 3, v8);
    else
      std::string::operator=(*((std::string **)this + 3), (const std::string *)v8);
  }
LABEL_21:
  if (a2 != (const SnippetUI::Slider *)&SnippetUI::_Slider_default_instance_)
  {
    v10 = (const SnippetUI::OptionalDouble *)*((_QWORD *)a2 + 4);
    if (v10)
    {
      v11 = (SnippetUI::OptionalDouble *)*((_QWORD *)this + 4);
      if (!v11)
      {
        v11 = (SnippetUI::OptionalDouble *)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::OptionalDouble>(0);
        *((_QWORD *)this + 4) = v11;
        v10 = (const SnippetUI::OptionalDouble *)*((_QWORD *)a2 + 4);
      }
      if (v10)
        v12 = v10;
      else
        v12 = (const SnippetUI::OptionalDouble *)&SnippetUI::_OptionalDouble_default_instance_;
      SnippetUI::OptionalDouble::MergeFrom(v11, v12);
    }
    v13 = (const SnippetUI::OptionalDouble *)*((_QWORD *)a2 + 5);
    if (v13)
    {
      v14 = (SnippetUI::OptionalDouble *)*((_QWORD *)this + 5);
      if (!v14)
      {
        v14 = (SnippetUI::OptionalDouble *)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::OptionalDouble>(0);
        *((_QWORD *)this + 5) = v14;
        v13 = (const SnippetUI::OptionalDouble *)*((_QWORD *)a2 + 5);
      }
      if (v13)
        v15 = v13;
      else
        v15 = (const SnippetUI::OptionalDouble *)&SnippetUI::_OptionalDouble_default_instance_;
      SnippetUI::OptionalDouble::MergeFrom(v14, v15);
    }
    v16 = (int **)*((_QWORD *)a2 + 6);
    if (v16)
    {
      v17 = (int **)*((_QWORD *)this + 6);
      if (!v17)
      {
        v17 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::VisualProperty>(0);
        *((_QWORD *)this + 6) = v17;
        v16 = (int **)*((_QWORD *)a2 + 6);
      }
      if (v16)
        v18 = v16;
      else
        v18 = (int **)&SnippetUI::_VisualProperty_default_instance_;
      SnippetUI::VisualProperty::MergeFrom(v17, v18);
    }
    v19 = (int **)*((_QWORD *)a2 + 7);
    if (v19)
    {
      v20 = (int **)*((_QWORD *)this + 7);
      if (!v20)
      {
        v20 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::VisualProperty>(0);
        *((_QWORD *)this + 7) = v20;
        v19 = (int **)*((_QWORD *)a2 + 7);
      }
      if (v19)
        v21 = v19;
      else
        v21 = (int **)&SnippetUI::_VisualProperty_default_instance_;
      SnippetUI::VisualProperty::MergeFrom(v20, v21);
    }
  }
  v22 = *((double *)a2 + 8);
  if (v22 != 0.0)
    *((double *)this + 8) = v22;
  v23 = *((double *)a2 + 9);
  if (v23 != 0.0)
    *((double *)this + 9) = v23;
}

void sub_1BFBFEB74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

char *google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::OptionalDouble>(google::protobuf::internal::EpsCopyInputStream *this, SnippetUI::OptionalDouble *a2, google::protobuf::internal *a3)
{
  int v6;
  const char *v7;
  char *v8;
  char *result;
  int v10;
  int v11;
  int v12;
  BOOL v13;
  int v14;
  int v15;

  v6 = *(char *)a3;
  v7 = (const char *)*(unsigned __int8 *)a3;
  if (v6 < 0)
  {
    result = google::protobuf::internal::ReadSizeFallback(a3, v7);
    if (!result)
      return result;
    v8 = result;
    LODWORD(v7) = v10;
  }
  else
  {
    v8 = (char *)a3 + 1;
  }
  v11 = google::protobuf::internal::EpsCopyInputStream::PushLimit(this, v8, v7);
  v12 = *((_DWORD *)this + 22);
  v13 = __OFSUB__(v12--, 1);
  *((_DWORD *)this + 22) = v12;
  if (v12 < 0 != v13)
    return 0;
  v14 = v11;
  result = (char *)SnippetUI::OptionalDouble::_InternalParse(a2, (google::protobuf::internal *)v8, this);
  if (!result)
    return result;
  ++*((_DWORD *)this + 22);
  if (*((_DWORD *)this + 20))
    return 0;
  v15 = *((_DWORD *)this + 7) + v14;
  *((_DWORD *)this + 7) = v15;
  *(_QWORD *)this = *((_QWORD *)this + 1) + (v15 & (v15 >> 31));
  return result;
}

SnippetUI::Slider *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Slider>(google::protobuf::internal::ArenaImpl *this)
{
  SnippetUI::Slider *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (SnippetUI::Slider *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x58uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::Slider>);
    SnippetUI::Slider::Slider(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (SnippetUI::Slider *)operator new();
    SnippetUI::Slider::Slider(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_1BFBFECD4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D890](v1, 0x10A1C40C0C1F4CBLL);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::Slider>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

void SnippetUI::Slider::InitAsDefaultInstance(SnippetUI::Slider *this)
{
  qword_1ED1D3BB0 = (uint64_t)&SnippetUI::_OptionalDouble_default_instance_;
  unk_1ED1D3BB8 = &SnippetUI::_OptionalDouble_default_instance_;
  qword_1ED1D3BC0 = (uint64_t)&SnippetUI::_VisualProperty_default_instance_;
  unk_1ED1D3BC8 = &SnippetUI::_VisualProperty_default_instance_;
}

uint64_t SnippetUI::Slider::_Internal::step(SnippetUI::Slider::_Internal *this, const SnippetUI::Slider *a2)
{
  return *((_QWORD *)this + 4);
}

uint64_t SnippetUI::Slider::_Internal::initial_value(SnippetUI::Slider::_Internal *this, const SnippetUI::Slider *a2)
{
  return *((_QWORD *)this + 5);
}

uint64_t SnippetUI::Slider::_Internal::leading_thumbnail(SnippetUI::Slider::_Internal *this, const SnippetUI::Slider *a2)
{
  return *((_QWORD *)this + 6);
}

uint64_t SnippetUI::Slider::_Internal::trailing_thumbnail(SnippetUI::Slider::_Internal *this, const SnippetUI::Slider *a2)
{
  return *((_QWORD *)this + 7);
}

uint64_t SnippetUI::Slider::clear_step(SnippetUI::Slider *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 4);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 4) = 0;
  return result;
}

uint64_t SnippetUI::Slider::clear_initial_value(SnippetUI::Slider *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 5);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 5) = 0;
  return result;
}

uint64_t SnippetUI::Slider::clear_leading_thumbnail(SnippetUI::Slider *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 6);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 6) = 0;
  return result;
}

uint64_t SnippetUI::Slider::clear_trailing_thumbnail(SnippetUI::Slider *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 7);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 7) = 0;
  return result;
}

SnippetUI::Slider *SnippetUI::Slider::Slider(SnippetUI::Slider *this, const SnippetUI::Slider *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  SnippetUI::OptionalDouble *v10;
  SnippetUI::VisualProperty *v11;
  SnippetUI::OptionalDouble *v12;
  SnippetUI::VisualProperty *v13;

  *(_QWORD *)this = &off_1E79376D0;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 20) = 0;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::Slider *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  v5 = *((_QWORD *)a2 + 2);
  if (*(char *)(v5 + 23) < 0)
    v6 = *(_QWORD *)(v5 + 8);
  else
    v6 = *(unsigned __int8 *)(v5 + 23);
  if ((uint64_t *)v5 != &google::protobuf::internal::fixed_address_empty_string && v6 != 0)
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, v5);
  *((_QWORD *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  v8 = *((_QWORD *)a2 + 3);
  if (*(char *)(v8 + 23) < 0)
    v9 = *(_QWORD *)(v8 + 8);
  else
    v9 = *(unsigned __int8 *)(v8 + 23);
  if ((uint64_t *)v8 != &google::protobuf::internal::fixed_address_empty_string && v9)
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 3, v8);
  if (a2 == (const SnippetUI::Slider *)&SnippetUI::_Slider_default_instance_)
  {
    v11 = 0;
    *((_QWORD *)this + 4) = 0;
    *((_QWORD *)this + 5) = 0;
    *((_QWORD *)this + 6) = 0;
  }
  else
  {
    if (*((_QWORD *)a2 + 4))
    {
      v10 = (SnippetUI::OptionalDouble *)operator new();
      SnippetUI::OptionalDouble::OptionalDouble(v10, *((const SnippetUI::OptionalDouble **)a2 + 4));
    }
    else
    {
      v10 = 0;
    }
    *((_QWORD *)this + 4) = v10;
    if (*((_QWORD *)a2 + 5))
    {
      v12 = (SnippetUI::OptionalDouble *)operator new();
      SnippetUI::OptionalDouble::OptionalDouble(v12, *((const SnippetUI::OptionalDouble **)a2 + 5));
    }
    else
    {
      v12 = 0;
    }
    *((_QWORD *)this + 5) = v12;
    if (*((_QWORD *)a2 + 6))
    {
      v13 = (SnippetUI::VisualProperty *)operator new();
      SnippetUI::VisualProperty::VisualProperty(v13, *((const SnippetUI::VisualProperty **)a2 + 6));
    }
    else
    {
      v13 = 0;
    }
    *((_QWORD *)this + 6) = v13;
    if (*((_QWORD *)a2 + 7))
    {
      v11 = (SnippetUI::VisualProperty *)operator new();
      SnippetUI::VisualProperty::VisualProperty(v11, *((const SnippetUI::VisualProperty **)a2 + 7));
    }
    else
    {
      v11 = 0;
    }
  }
  *((_QWORD *)this + 7) = v11;
  *((_OWORD *)this + 4) = *((_OWORD *)a2 + 4);
  return this;
}

void sub_1BFBFF0F8(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;

  MEMORY[0x1C3B8D890](v2, 0x10A1C40BEC01B52);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::Slider::CopyFrom(SnippetUI::Slider *this, const SnippetUI::Slider *a2)
{
  if (a2 != this)
  {
    SnippetUI::Slider::Clear(this);
    SnippetUI::Slider::MergeFrom(this, a2);
  }
}

double SnippetUI::Slider::InternalSwap(SnippetUI::Slider *this, SnippetUI::Slider *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  uint64_t v5;
  google::protobuf::UnknownFieldSet *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double result;
  google::protobuf::UnknownFieldSet *v25;

  v4 = (SnippetUI::Slider *)((char *)this + 8);
  v5 = *((_QWORD *)a2 + 1);
  if ((*((_BYTE *)this + 8) & 1) != 0)
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v6 = v25;
      goto LABEL_6;
    }
LABEL_5:
    v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
    google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
    goto LABEL_7;
  }
  if ((v5 & 1) != 0)
    goto LABEL_5;
LABEL_7:
  v7 = (uint64_t *)*((_QWORD *)this + 2);
  v8 = (uint64_t **)((char *)a2 + 16);
  if (v7 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_13;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 2, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v7 = (uint64_t *)*((_QWORD *)this + 2);
  }
  v9 = *v8;
  if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 2, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v9 = *v8;
  }
  v10 = v7[2];
  v11 = *(_OWORD *)v7;
  v12 = v9[2];
  *(_OWORD *)v7 = *(_OWORD *)v9;
  v7[2] = v12;
  *(_OWORD *)v9 = v11;
  v9[2] = v10;
LABEL_13:
  v13 = (uint64_t *)*((_QWORD *)this + 3);
  v14 = (uint64_t **)((char *)a2 + 24);
  if (v13 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_19;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 3, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v13 = (uint64_t *)*((_QWORD *)this + 3);
  }
  v15 = *v14;
  if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 3, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v15 = *v14;
  }
  v16 = v13[2];
  v17 = *(_OWORD *)v13;
  v18 = v15[2];
  *(_OWORD *)v13 = *(_OWORD *)v15;
  v13[2] = v18;
  *(_OWORD *)v15 = v17;
  v15[2] = v16;
LABEL_19:
  v19 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v19;
  v20 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v20;
  v21 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v21;
  v22 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v22;
  v23 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v23;
  result = *((double *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((double *)a2 + 9) = result;
  return result;
}

void siri::dialogengine::GetConvertedUnitInfo<siri::dialogengine::Area>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  std::string *v8;
  char *RequiredStringParameter;
  char *v10;
  char *OptionalStringParameter;
  char *v12;
  uint64_t v13;
  _UNKNOWN **UserSpecifiedMeasurementSystem;
  uint64_t v15;
  void *__p;
  std::string v17;
  double v18;
  std::string v19;
  std::string __str;
  std::string v21;

  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v8 = (std::string *)(a3 + 8);
  *(_QWORD *)(a3 + 24) = 0;
  *(double *)(a3 + 32) = a4;
  std::string::basic_string[abi:ne180100]<0>(&__p, "units");
  RequiredStringParameter = (char *)siri::dialogengine::GetRequiredStringParameter((const void **)&__p, a2);
  v10 = RequiredStringParameter;
  if (v17.__r_.__value_.__s.__data_[15] < 0)
  {
    operator delete(__p);
    if (!v10)
      return;
  }
  else if (!RequiredStringParameter)
  {
    return;
  }
  if (v10[95] < 0)
    std::string::__init_copy_ctor_external(&__str, *((const std::string::value_type **)v10 + 9), *((_QWORD *)v10 + 10));
  else
    __str = *(std::string *)(v10 + 3);
  std::string::operator=(v8, &__str);
  *(_DWORD *)a3 = siri::dialogengine::ParseUnitLabel<siri::dialogengine::Area>((uint64_t)&__str);
  std::string::basic_string[abi:ne180100]<0>(&__p, "outputUnits");
  OptionalStringParameter = (char *)siri::dialogengine::GetOptionalStringParameter((const void **)&__p, a2);
  v12 = OptionalStringParameter;
  if (v17.__r_.__value_.__s.__data_[15] < 0)
  {
    operator delete(__p);
    if (!v12)
      goto LABEL_31;
LABEL_12:
    if (v12[95] < 0)
      std::string::__init_copy_ctor_external(&v19, *((const std::string::value_type **)v12 + 9), *((_QWORD *)v12 + 10));
    else
      v19 = *(std::string *)(v12 + 3);
    if (!siri::dialogengine::StringsEqual((uint64_t)&__str, (uint64_t)&v19))
    {
      memset(&v17, 0, sizeof(v17));
      LODWORD(__p) = siri::dialogengine::ParseUnitLabel<siri::dialogengine::Area>((uint64_t)&__str);
      std::string::operator=(&v17, &__str);
      v18 = a4;
      v13 = siri::dialogengine::ParseUnitLabel<siri::dialogengine::Area>((uint64_t)&v19);
      if ((_DWORD)v13 == -1)
      {
        UserSpecifiedMeasurementSystem = siri::dialogengine::GetUserSpecifiedMeasurementSystem(a1, (uint64_t)&v19);
        if (UserSpecifiedMeasurementSystem)
          v13 = (*((uint64_t (**)(_UNKNOWN **))*UserSpecifiedMeasurementSystem + 9))(UserSpecifiedMeasurementSystem);
        else
          v13 = 0xFFFFFFFFLL;
      }
      if (siri::dialogengine::CanConvertUnitValue<siri::dialogengine::Area>(__p, (const char *)v13))
      {
        v15 = __p;
        LODWORD(__p) = v13;
        siri::dialogengine::GetUnitLabel<siri::dialogengine::Area>(&v21, v13);
        if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v17.__r_.__value_.__l.__data_);
        v17 = v21;
        v18 = siri::dialogengine::ConvertUnitValue<siri::dialogengine::Area>(v15, (const char *)v13, a4);
      }
      else
      {
        std::operator+<char>();
        siri::dialogengine::Log::Debug((siri::dialogengine *)&v21);
        if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v21.__r_.__value_.__l.__data_);
      }
      *(_DWORD *)a3 = (_DWORD)__p;
      if (*(char *)(a3 + 31) < 0)
        operator delete(v8->__r_.__value_.__l.__data_);
      *v8 = v17;
      *(double *)(a3 + 32) = v18;
    }
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v19.__r_.__value_.__l.__data_);
    goto LABEL_31;
  }
  if (OptionalStringParameter)
    goto LABEL_12;
LABEL_31:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void sub_1BFBFF5EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  void **v33;
  uint64_t v34;

  if (a19 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  if (a33 < 0)
    operator delete(a28);
  if (*(char *)(v34 + 31) < 0)
    operator delete(*v33);
  _Unwind_Resume(exception_object);
}

_UNKNOWN **siri::dialogengine::GetUserSpecifiedMeasurementSystem(uint64_t a1, uint64_t a2)
{
  _BOOL4 v4;
  _BOOL4 v5;
  _UNKNOWN **MeasurementSystemForLocale;
  void *v7;
  _BOOL4 v8;
  _BOOL4 v9;
  void *v11[2];
  char v12;
  std::string __p[20];
  std::string v14;

  std::string::basic_string[abi:ne180100]<0>(__p, "region-specified");
  v4 = siri::dialogengine::StringsEqual(a2, (uint64_t)__p);
  v5 = v4;
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p[0].__r_.__value_.__l.__data_);
    if (v5)
    {
LABEL_3:
      siri::dialogengine::Context::GetDeviceLocale((siri::dialogengine::Context *)a1, __p);
      MeasurementSystemForLocale = siri::dialogengine::GetMeasurementSystemForLocale();
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      {
        v7 = (void *)__p[0].__r_.__value_.__r.__words[0];
LABEL_12:
        operator delete(v7);
        return MeasurementSystemForLocale;
      }
      return MeasurementSystemForLocale;
    }
  }
  else if (v4)
  {
    goto LABEL_3;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "device-specified");
  v8 = siri::dialogengine::StringsEqual(a2, (uint64_t)__p);
  v9 = v8;
  if ((SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v8)
      goto LABEL_8;
    return 0;
  }
  operator delete(__p[0].__r_.__value_.__l.__data_);
  if (!v9)
    return 0;
LABEL_8:
  siri::dialogengine::RequestInfo::RequestInfo((siri::dialogengine::RequestInfo *)__p, (const siri::dialogengine::RequestInfo *)(a1 + 8));
  std::string::basic_string[abi:ne180100]<0>(v11, "userMeasurementUnit");
  siri::dialogengine::RequestInfo::GetUserSetting((uint64_t)__p, (const void **)v11, &v14);
  if (v12 < 0)
    operator delete(v11[0]);
  siri::dialogengine::RequestInfo::~RequestInfo((void **)&__p[0].__r_.__value_.__l.__data_);
  MeasurementSystemForLocale = siri::dialogengine::GetMeasurementSystemByType((uint64_t)&v14);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
  {
    v7 = (void *)v14.__r_.__value_.__r.__words[0];
    goto LABEL_12;
  }
  return MeasurementSystemForLocale;
}

void sub_1BFBFF7E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;

  if (*(char *)(v20 - 33) < 0)
    operator delete(*(void **)(v20 - 56));
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::GetConvertedUnitInfo<siri::dialogengine::Speed>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  std::string *v8;
  char *RequiredStringParameter;
  char *v10;
  char *OptionalStringParameter;
  char *v12;
  uint64_t v13;
  _UNKNOWN **UserSpecifiedMeasurementSystem;
  uint64_t v15;
  void *__p;
  std::string v17;
  double v18;
  std::string v19;
  std::string __str;
  std::string v21;

  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v8 = (std::string *)(a3 + 8);
  *(_QWORD *)(a3 + 24) = 0;
  *(double *)(a3 + 32) = a4;
  std::string::basic_string[abi:ne180100]<0>(&__p, "units");
  RequiredStringParameter = (char *)siri::dialogengine::GetRequiredStringParameter((const void **)&__p, a2);
  v10 = RequiredStringParameter;
  if (v17.__r_.__value_.__s.__data_[15] < 0)
  {
    operator delete(__p);
    if (!v10)
      return;
  }
  else if (!RequiredStringParameter)
  {
    return;
  }
  if (v10[95] < 0)
    std::string::__init_copy_ctor_external(&__str, *((const std::string::value_type **)v10 + 9), *((_QWORD *)v10 + 10));
  else
    __str = *(std::string *)(v10 + 3);
  std::string::operator=(v8, &__str);
  *(_DWORD *)a3 = siri::dialogengine::ParseUnitLabel<siri::dialogengine::Speed>((uint64_t)&__str);
  std::string::basic_string[abi:ne180100]<0>(&__p, "outputUnits");
  OptionalStringParameter = (char *)siri::dialogengine::GetOptionalStringParameter((const void **)&__p, a2);
  v12 = OptionalStringParameter;
  if (v17.__r_.__value_.__s.__data_[15] < 0)
  {
    operator delete(__p);
    if (!v12)
      goto LABEL_31;
LABEL_12:
    if (v12[95] < 0)
      std::string::__init_copy_ctor_external(&v19, *((const std::string::value_type **)v12 + 9), *((_QWORD *)v12 + 10));
    else
      v19 = *(std::string *)(v12 + 3);
    if (!siri::dialogengine::StringsEqual((uint64_t)&__str, (uint64_t)&v19))
    {
      memset(&v17, 0, sizeof(v17));
      LODWORD(__p) = siri::dialogengine::ParseUnitLabel<siri::dialogengine::Speed>((uint64_t)&__str);
      std::string::operator=(&v17, &__str);
      v18 = a4;
      v13 = siri::dialogengine::ParseUnitLabel<siri::dialogengine::Speed>((uint64_t)&v19);
      if ((_DWORD)v13 == -1)
      {
        UserSpecifiedMeasurementSystem = siri::dialogengine::GetUserSpecifiedMeasurementSystem(a1, (uint64_t)&v19);
        if (UserSpecifiedMeasurementSystem)
          v13 = (*((uint64_t (**)(_UNKNOWN **))*UserSpecifiedMeasurementSystem + 6))(UserSpecifiedMeasurementSystem);
        else
          v13 = 0xFFFFFFFFLL;
      }
      if (siri::dialogengine::CanConvertUnitValue<siri::dialogengine::Speed>(__p, (const char *)v13))
      {
        v15 = __p;
        LODWORD(__p) = v13;
        siri::dialogengine::GetUnitLabel<siri::dialogengine::Speed>(&v21, v13);
        if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v17.__r_.__value_.__l.__data_);
        v17 = v21;
        v18 = siri::dialogengine::ConvertUnitValue<siri::dialogengine::Speed>(v15, (const char *)v13, a4);
      }
      else
      {
        std::operator+<char>();
        siri::dialogengine::Log::Debug((siri::dialogengine *)&v21);
        if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v21.__r_.__value_.__l.__data_);
      }
      *(_DWORD *)a3 = (_DWORD)__p;
      if (*(char *)(a3 + 31) < 0)
        operator delete(v8->__r_.__value_.__l.__data_);
      *v8 = v17;
      *(double *)(a3 + 32) = v18;
    }
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v19.__r_.__value_.__l.__data_);
    goto LABEL_31;
  }
  if (OptionalStringParameter)
    goto LABEL_12;
LABEL_31:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void sub_1BFBFFAD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  void **v33;
  uint64_t v34;

  if (a19 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  if (a33 < 0)
    operator delete(a28);
  if (*(char *)(v34 + 31) < 0)
    operator delete(*v33);
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::GetConvertedUnitInfo<siri::dialogengine::Temperature>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  std::string *v8;
  char *RequiredStringParameter;
  char *v10;
  char *OptionalStringParameter;
  char *v12;
  uint64_t v13;
  _UNKNOWN **UserSpecifiedMeasurementSystem;
  uint64_t v15;
  void *__p;
  std::string v17;
  double v18;
  std::string v19;
  std::string __str;
  std::string v21;

  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v8 = (std::string *)(a3 + 8);
  *(_QWORD *)(a3 + 24) = 0;
  *(double *)(a3 + 32) = a4;
  std::string::basic_string[abi:ne180100]<0>(&__p, "units");
  RequiredStringParameter = (char *)siri::dialogengine::GetRequiredStringParameter((const void **)&__p, a2);
  v10 = RequiredStringParameter;
  if (v17.__r_.__value_.__s.__data_[15] < 0)
  {
    operator delete(__p);
    if (!v10)
      return;
  }
  else if (!RequiredStringParameter)
  {
    return;
  }
  if (v10[95] < 0)
    std::string::__init_copy_ctor_external(&__str, *((const std::string::value_type **)v10 + 9), *((_QWORD *)v10 + 10));
  else
    __str = *(std::string *)(v10 + 3);
  std::string::operator=(v8, &__str);
  *(_DWORD *)a3 = siri::dialogengine::ParseUnitLabel<siri::dialogengine::Temperature>((uint64_t)&__str);
  std::string::basic_string[abi:ne180100]<0>(&__p, "outputUnits");
  OptionalStringParameter = (char *)siri::dialogengine::GetOptionalStringParameter((const void **)&__p, a2);
  v12 = OptionalStringParameter;
  if (v17.__r_.__value_.__s.__data_[15] < 0)
  {
    operator delete(__p);
    if (!v12)
      goto LABEL_31;
LABEL_12:
    if (v12[95] < 0)
      std::string::__init_copy_ctor_external(&v19, *((const std::string::value_type **)v12 + 9), *((_QWORD *)v12 + 10));
    else
      v19 = *(std::string *)(v12 + 3);
    if (!siri::dialogengine::StringsEqual((uint64_t)&__str, (uint64_t)&v19))
    {
      memset(&v17, 0, sizeof(v17));
      LODWORD(__p) = siri::dialogengine::ParseUnitLabel<siri::dialogengine::Temperature>((uint64_t)&__str);
      std::string::operator=(&v17, &__str);
      v18 = a4;
      v13 = siri::dialogengine::ParseUnitLabel<siri::dialogengine::Temperature>((uint64_t)&v19);
      if ((_DWORD)v13 == -1)
      {
        UserSpecifiedMeasurementSystem = siri::dialogengine::GetUserSpecifiedMeasurementSystem(a1, (uint64_t)&v19);
        if (UserSpecifiedMeasurementSystem)
          v13 = (*((uint64_t (**)(_UNKNOWN **))*UserSpecifiedMeasurementSystem + 4))(UserSpecifiedMeasurementSystem);
        else
          v13 = 0xFFFFFFFFLL;
      }
      if (siri::dialogengine::CanConvertUnitValue<siri::dialogengine::Temperature>(__p, (const char *)v13))
      {
        v15 = __p;
        LODWORD(__p) = v13;
        siri::dialogengine::GetUnitLabel<siri::dialogengine::Temperature>(&v21, v13);
        if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v17.__r_.__value_.__l.__data_);
        v17 = v21;
        v18 = siri::dialogengine::ConvertUnitValue<siri::dialogengine::Temperature>(v15, (const char *)v13, a4);
      }
      else
      {
        std::operator+<char>();
        siri::dialogengine::Log::Debug((siri::dialogengine *)&v21);
        if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v21.__r_.__value_.__l.__data_);
      }
      *(_DWORD *)a3 = (_DWORD)__p;
      if (*(char *)(a3 + 31) < 0)
        operator delete(v8->__r_.__value_.__l.__data_);
      *v8 = v17;
      *(double *)(a3 + 32) = v18;
    }
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v19.__r_.__value_.__l.__data_);
    goto LABEL_31;
  }
  if (OptionalStringParameter)
    goto LABEL_12;
LABEL_31:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void sub_1BFBFFE30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  void **v33;
  uint64_t v34;

  if (a19 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  if (a33 < 0)
    operator delete(a28);
  if (*(char *)(v34 + 31) < 0)
    operator delete(*v33);
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::GetConvertedUnitInfo<siri::dialogengine::Density>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  std::string *v8;
  char *RequiredStringParameter;
  char *v10;
  char *OptionalStringParameter;
  char *v12;
  const char *v13;
  uint64_t v14;
  void *__p;
  std::string v16;
  double v17;
  std::string v18;
  std::string __str;
  std::string v20;

  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v8 = (std::string *)(a3 + 8);
  *(_QWORD *)(a3 + 24) = 0;
  *(double *)(a3 + 32) = a4;
  std::string::basic_string[abi:ne180100]<0>(&__p, "units");
  RequiredStringParameter = (char *)siri::dialogengine::GetRequiredStringParameter((const void **)&__p, a2);
  v10 = RequiredStringParameter;
  if (v16.__r_.__value_.__s.__data_[15] < 0)
  {
    operator delete(__p);
    if (!v10)
      return;
  }
  else if (!RequiredStringParameter)
  {
    return;
  }
  if (v10[95] < 0)
    std::string::__init_copy_ctor_external(&__str, *((const std::string::value_type **)v10 + 9), *((_QWORD *)v10 + 10));
  else
    __str = *(std::string *)(v10 + 3);
  std::string::operator=(v8, &__str);
  *(_DWORD *)a3 = siri::dialogengine::ParseUnitLabel<siri::dialogengine::Density>((uint64_t)&__str);
  std::string::basic_string[abi:ne180100]<0>(&__p, "outputUnits");
  OptionalStringParameter = (char *)siri::dialogengine::GetOptionalStringParameter((const void **)&__p, a2);
  v12 = OptionalStringParameter;
  if (v16.__r_.__value_.__s.__data_[15] < 0)
  {
    operator delete(__p);
    if (!v12)
      goto LABEL_29;
LABEL_12:
    if (v12[95] < 0)
      std::string::__init_copy_ctor_external(&v18, *((const std::string::value_type **)v12 + 9), *((_QWORD *)v12 + 10));
    else
      v18 = *(std::string *)(v12 + 3);
    if (!siri::dialogengine::StringsEqual((uint64_t)&__str, (uint64_t)&v18))
    {
      memset(&v16, 0, sizeof(v16));
      LODWORD(__p) = siri::dialogengine::ParseUnitLabel<siri::dialogengine::Density>((uint64_t)&__str);
      std::string::operator=(&v16, &__str);
      v17 = a4;
      v13 = (const char *)siri::dialogengine::ParseUnitLabel<siri::dialogengine::Density>((uint64_t)&v18);
      if ((_DWORD)v13 == -1)
        siri::dialogengine::GetUserSpecifiedMeasurementSystem(a1, (uint64_t)&v18);
      if (siri::dialogengine::CanConvertUnitValue<siri::dialogengine::Density>(__p, v13))
      {
        v14 = __p;
        LODWORD(__p) = (_DWORD)v13;
        siri::dialogengine::GetUnitLabel<siri::dialogengine::Density>(&v20, (int)v13);
        if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v16.__r_.__value_.__l.__data_);
        v16 = v20;
        v17 = siri::dialogengine::ConvertUnitValue<siri::dialogengine::Density>(v14, v13, a4);
      }
      else
      {
        std::operator+<char>();
        siri::dialogengine::Log::Debug((siri::dialogengine *)&v20);
        if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v20.__r_.__value_.__l.__data_);
      }
      *(_DWORD *)a3 = (_DWORD)__p;
      if (*(char *)(a3 + 31) < 0)
        operator delete(v8->__r_.__value_.__l.__data_);
      *v8 = v16;
      *(double *)(a3 + 32) = v17;
    }
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v18.__r_.__value_.__l.__data_);
    goto LABEL_29;
  }
  if (OptionalStringParameter)
    goto LABEL_12;
LABEL_29:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void sub_1BFC0016C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  void **v33;
  uint64_t v34;

  if (a19 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  if (a33 < 0)
    operator delete(a28);
  if (*(char *)(v34 + 31) < 0)
    operator delete(*v33);
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::GetConvertedUnitInfo<siri::dialogengine::Pressure>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  std::string *v8;
  char *RequiredStringParameter;
  char *v10;
  char *OptionalStringParameter;
  char *v12;
  uint64_t v13;
  _UNKNOWN **UserSpecifiedMeasurementSystem;
  uint64_t v15;
  void *__p;
  std::string v17;
  double v18;
  std::string v19;
  std::string __str;
  std::string v21;

  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v8 = (std::string *)(a3 + 8);
  *(_QWORD *)(a3 + 24) = 0;
  *(double *)(a3 + 32) = a4;
  std::string::basic_string[abi:ne180100]<0>(&__p, "units");
  RequiredStringParameter = (char *)siri::dialogengine::GetRequiredStringParameter((const void **)&__p, a2);
  v10 = RequiredStringParameter;
  if (v17.__r_.__value_.__s.__data_[15] < 0)
  {
    operator delete(__p);
    if (!v10)
      return;
  }
  else if (!RequiredStringParameter)
  {
    return;
  }
  if (v10[95] < 0)
    std::string::__init_copy_ctor_external(&__str, *((const std::string::value_type **)v10 + 9), *((_QWORD *)v10 + 10));
  else
    __str = *(std::string *)(v10 + 3);
  std::string::operator=(v8, &__str);
  *(_DWORD *)a3 = siri::dialogengine::ParseUnitLabel<siri::dialogengine::Pressure>((uint64_t)&__str);
  std::string::basic_string[abi:ne180100]<0>(&__p, "outputUnits");
  OptionalStringParameter = (char *)siri::dialogengine::GetOptionalStringParameter((const void **)&__p, a2);
  v12 = OptionalStringParameter;
  if (v17.__r_.__value_.__s.__data_[15] < 0)
  {
    operator delete(__p);
    if (!v12)
      goto LABEL_31;
LABEL_12:
    if (v12[95] < 0)
      std::string::__init_copy_ctor_external(&v19, *((const std::string::value_type **)v12 + 9), *((_QWORD *)v12 + 10));
    else
      v19 = *(std::string *)(v12 + 3);
    if (!siri::dialogengine::StringsEqual((uint64_t)&__str, (uint64_t)&v19))
    {
      memset(&v17, 0, sizeof(v17));
      LODWORD(__p) = siri::dialogengine::ParseUnitLabel<siri::dialogengine::Pressure>((uint64_t)&__str);
      std::string::operator=(&v17, &__str);
      v18 = a4;
      v13 = siri::dialogengine::ParseUnitLabel<siri::dialogengine::Pressure>((uint64_t)&v19);
      if ((_DWORD)v13 == -1)
      {
        UserSpecifiedMeasurementSystem = siri::dialogengine::GetUserSpecifiedMeasurementSystem(a1, (uint64_t)&v19);
        if (UserSpecifiedMeasurementSystem)
          v13 = (*((uint64_t (**)(_UNKNOWN **))*UserSpecifiedMeasurementSystem + 7))(UserSpecifiedMeasurementSystem);
        else
          v13 = 0xFFFFFFFFLL;
      }
      if (siri::dialogengine::CanConvertUnitValue<siri::dialogengine::Pressure>(__p, (const char *)v13))
      {
        v15 = __p;
        LODWORD(__p) = v13;
        siri::dialogengine::GetUnitLabel<siri::dialogengine::Pressure>(&v21, v13);
        if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v17.__r_.__value_.__l.__data_);
        v17 = v21;
        v18 = siri::dialogengine::ConvertUnitValue<siri::dialogengine::Pressure>(v15, (const char *)v13, a4);
      }
      else
      {
        std::operator+<char>();
        siri::dialogengine::Log::Debug((siri::dialogengine *)&v21);
        if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v21.__r_.__value_.__l.__data_);
      }
      *(_DWORD *)a3 = (_DWORD)__p;
      if (*(char *)(a3 + 31) < 0)
        operator delete(v8->__r_.__value_.__l.__data_);
      *v8 = v17;
      *(double *)(a3 + 32) = v18;
    }
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v19.__r_.__value_.__l.__data_);
    goto LABEL_31;
  }
  if (OptionalStringParameter)
    goto LABEL_12;
LABEL_31:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void sub_1BFC004C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  void **v33;
  uint64_t v34;

  if (a19 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  if (a33 < 0)
    operator delete(a28);
  if (*(char *)(v34 + 31) < 0)
    operator delete(*v33);
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::GetConvertedUnitInfo<siri::dialogengine::Length>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  std::string *v8;
  char *RequiredStringParameter;
  char *v10;
  char *OptionalStringParameter;
  char *v12;
  uint64_t v13;
  _UNKNOWN **UserSpecifiedMeasurementSystem;
  uint64_t v15;
  void *__p;
  std::string v17;
  double v18;
  std::string v19;
  std::string __str;
  std::string v21;

  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v8 = (std::string *)(a3 + 8);
  *(_QWORD *)(a3 + 24) = 0;
  *(double *)(a3 + 32) = a4;
  std::string::basic_string[abi:ne180100]<0>(&__p, "units");
  RequiredStringParameter = (char *)siri::dialogengine::GetRequiredStringParameter((const void **)&__p, a2);
  v10 = RequiredStringParameter;
  if (v17.__r_.__value_.__s.__data_[15] < 0)
  {
    operator delete(__p);
    if (!v10)
      return;
  }
  else if (!RequiredStringParameter)
  {
    return;
  }
  if (v10[95] < 0)
    std::string::__init_copy_ctor_external(&__str, *((const std::string::value_type **)v10 + 9), *((_QWORD *)v10 + 10));
  else
    __str = *(std::string *)(v10 + 3);
  std::string::operator=(v8, &__str);
  *(_DWORD *)a3 = siri::dialogengine::ParseUnitLabel<siri::dialogengine::Length>((uint64_t)&__str);
  std::string::basic_string[abi:ne180100]<0>(&__p, "outputUnits");
  OptionalStringParameter = (char *)siri::dialogengine::GetOptionalStringParameter((const void **)&__p, a2);
  v12 = OptionalStringParameter;
  if (v17.__r_.__value_.__s.__data_[15] < 0)
  {
    operator delete(__p);
    if (!v12)
      goto LABEL_31;
LABEL_12:
    if (v12[95] < 0)
      std::string::__init_copy_ctor_external(&v19, *((const std::string::value_type **)v12 + 9), *((_QWORD *)v12 + 10));
    else
      v19 = *(std::string *)(v12 + 3);
    if (!siri::dialogengine::StringsEqual((uint64_t)&__str, (uint64_t)&v19))
    {
      memset(&v17, 0, sizeof(v17));
      LODWORD(__p) = siri::dialogengine::ParseUnitLabel<siri::dialogengine::Length>((uint64_t)&__str);
      std::string::operator=(&v17, &__str);
      v18 = a4;
      v13 = siri::dialogengine::ParseUnitLabel<siri::dialogengine::Length>((uint64_t)&v19);
      if ((_DWORD)v13 == -1)
      {
        UserSpecifiedMeasurementSystem = siri::dialogengine::GetUserSpecifiedMeasurementSystem(a1, (uint64_t)&v19);
        if (UserSpecifiedMeasurementSystem)
          v13 = (*((uint64_t (**)(_UNKNOWN **))*UserSpecifiedMeasurementSystem + 5))(UserSpecifiedMeasurementSystem);
        else
          v13 = 0xFFFFFFFFLL;
      }
      if (siri::dialogengine::CanConvertUnitValue<siri::dialogengine::Length>(__p, (const char *)v13))
      {
        v15 = __p;
        LODWORD(__p) = v13;
        siri::dialogengine::GetUnitLabel<siri::dialogengine::Length>(&v21, v13);
        if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v17.__r_.__value_.__l.__data_);
        v17 = v21;
        v18 = siri::dialogengine::ConvertUnitValue<siri::dialogengine::Length>(v15, (const char *)v13, a4);
      }
      else
      {
        std::operator+<char>();
        siri::dialogengine::Log::Debug((siri::dialogengine *)&v21);
        if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v21.__r_.__value_.__l.__data_);
      }
      *(_DWORD *)a3 = (_DWORD)__p;
      if (*(char *)(a3 + 31) < 0)
        operator delete(v8->__r_.__value_.__l.__data_);
      *v8 = v17;
      *(double *)(a3 + 32) = v18;
    }
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v19.__r_.__value_.__l.__data_);
    goto LABEL_31;
  }
  if (OptionalStringParameter)
    goto LABEL_12;
LABEL_31:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void sub_1BFC00818(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  void **v33;
  uint64_t v34;

  if (a19 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  if (a33 < 0)
    operator delete(a28);
  if (*(char *)(v34 + 31) < 0)
    operator delete(*v33);
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::GetConvertedUnitInfo<siri::dialogengine::Weight>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  std::string *v8;
  char *RequiredStringParameter;
  char *v10;
  char *OptionalStringParameter;
  char *v12;
  uint64_t v13;
  _UNKNOWN **UserSpecifiedMeasurementSystem;
  uint64_t v15;
  void *__p;
  std::string v17;
  double v18;
  std::string v19;
  std::string __str;
  std::string v21;

  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v8 = (std::string *)(a3 + 8);
  *(_QWORD *)(a3 + 24) = 0;
  *(double *)(a3 + 32) = a4;
  std::string::basic_string[abi:ne180100]<0>(&__p, "units");
  RequiredStringParameter = (char *)siri::dialogengine::GetRequiredStringParameter((const void **)&__p, a2);
  v10 = RequiredStringParameter;
  if (v17.__r_.__value_.__s.__data_[15] < 0)
  {
    operator delete(__p);
    if (!v10)
      return;
  }
  else if (!RequiredStringParameter)
  {
    return;
  }
  if (v10[95] < 0)
    std::string::__init_copy_ctor_external(&__str, *((const std::string::value_type **)v10 + 9), *((_QWORD *)v10 + 10));
  else
    __str = *(std::string *)(v10 + 3);
  std::string::operator=(v8, &__str);
  *(_DWORD *)a3 = siri::dialogengine::ParseUnitLabel<siri::dialogengine::Weight>((uint64_t)&__str);
  std::string::basic_string[abi:ne180100]<0>(&__p, "outputUnits");
  OptionalStringParameter = (char *)siri::dialogengine::GetOptionalStringParameter((const void **)&__p, a2);
  v12 = OptionalStringParameter;
  if (v17.__r_.__value_.__s.__data_[15] < 0)
  {
    operator delete(__p);
    if (!v12)
      goto LABEL_31;
LABEL_12:
    if (v12[95] < 0)
      std::string::__init_copy_ctor_external(&v19, *((const std::string::value_type **)v12 + 9), *((_QWORD *)v12 + 10));
    else
      v19 = *(std::string *)(v12 + 3);
    if (!siri::dialogengine::StringsEqual((uint64_t)&__str, (uint64_t)&v19))
    {
      memset(&v17, 0, sizeof(v17));
      LODWORD(__p) = siri::dialogengine::ParseUnitLabel<siri::dialogengine::Weight>((uint64_t)&__str);
      std::string::operator=(&v17, &__str);
      v18 = a4;
      v13 = siri::dialogengine::ParseUnitLabel<siri::dialogengine::Weight>((uint64_t)&v19);
      if ((_DWORD)v13 == -1)
      {
        UserSpecifiedMeasurementSystem = siri::dialogengine::GetUserSpecifiedMeasurementSystem(a1, (uint64_t)&v19);
        if (UserSpecifiedMeasurementSystem)
          v13 = (*((uint64_t (**)(_UNKNOWN **))*UserSpecifiedMeasurementSystem + 8))(UserSpecifiedMeasurementSystem);
        else
          v13 = 0xFFFFFFFFLL;
      }
      if (siri::dialogengine::CanConvertUnitValue<siri::dialogengine::Weight>(__p, (const char *)v13))
      {
        v15 = __p;
        LODWORD(__p) = v13;
        siri::dialogengine::GetUnitLabel<siri::dialogengine::Weight>(&v21, v13);
        if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v17.__r_.__value_.__l.__data_);
        v17 = v21;
        v18 = siri::dialogengine::ConvertUnitValue<siri::dialogengine::Weight>(v15, (const char *)v13, a4);
      }
      else
      {
        std::operator+<char>();
        siri::dialogengine::Log::Debug((siri::dialogengine *)&v21);
        if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v21.__r_.__value_.__l.__data_);
      }
      *(_DWORD *)a3 = (_DWORD)__p;
      if (*(char *)(a3 + 31) < 0)
        operator delete(v8->__r_.__value_.__l.__data_);
      *v8 = v17;
      *(double *)(a3 + 32) = v18;
    }
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v19.__r_.__value_.__l.__data_);
    goto LABEL_31;
  }
  if (OptionalStringParameter)
    goto LABEL_12;
LABEL_31:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void sub_1BFC00B70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  void **v33;
  uint64_t v34;

  if (a19 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  if (a33 < 0)
    operator delete(a28);
  if (*(char *)(v34 + 31) < 0)
    operator delete(*v33);
  _Unwind_Resume(exception_object);
}

uint64_t YAML::ScanVerbatimTag@<X0>(YAML *this@<X0>, std::string *a2@<X8>)
{
  std::string *v5;
  uint64_t v6;
  int v7;
  std::string *p_p;
  std::string::size_type size;
  _QWORD *exception;
  int v12;
  uint64_t v13;
  int v14;
  std::string __p;

  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  v5 = (std::string *)YAML::Stream::get(this);
  while (1)
  {
    v6 = *((_QWORD *)this + 8);
    if (*(_DWORD *)(*(_QWORD *)this + *(_QWORD *)(**(_QWORD **)this - 24) + 32))
    {
      if (!v6
        || *(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 4) + ((*((_QWORD *)this + 7) >> 9) & 0x7FFFFFFFFFFFF8))
                    + (*((_QWORD *)this + 7) & 0xFFFLL)) == 4)
      {
LABEL_18:
        exception = __cxa_allocate_exception(0x38uLL);
        v12 = *((_DWORD *)this + 4);
        v13 = *((_QWORD *)this + 1);
        v14 = v12;
        std::string::basic_string[abi:ne180100]<0>(&__p, "end of verbatim tag not found");
        YAML::Exception::Exception((uint64_t)exception, &v13, (__int128 *)&__p);
        *exception = &off_1E793AF28;
      }
    }
    else if (!v6)
    {
      goto LABEL_8;
    }
    if (*(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 4) + ((*((_QWORD *)this + 7) >> 9) & 0x7FFFFFFFFFFFF8))
                  + (*((_QWORD *)this + 7) & 0xFFFLL)) == 62)
      return YAML::Stream::get(this);
LABEL_8:
    YAML::Exp::URI((YAML::Exp *)v5);
    __p.__r_.__value_.__r.__words[0] = 0;
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)this;
    v7 = YAML::RegEx::Match<YAML::StreamCharSource>((uint64_t)&YAML::Exp::URI(void)::e, (unint64_t *)&__p);
    if (v7 < 1)
      goto LABEL_18;
    YAML::Stream::get(this, v7, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    v5 = std::string::append(a2, (const std::string::value_type *)p_p, size);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1BFC00DC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;

  if (*(char *)(v17 + 23) < 0)
    operator delete(*(void **)v17);
  _Unwind_Resume(exception_object);
}

void YAML::ScanTagHandle(YAML *this@<X0>, YAML::Stream *a2@<X1>, std::string *a3@<X8>)
{
  YAML *v5;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  std::string *p_p;
  std::string::size_type size;
  _QWORD *exception;
  std::string __p;
  uint64_t v16;
  int v17;

  v5 = this;
  v7 = 0;
  v8 = 0;
  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  *(_BYTE *)a2 = 1;
  while (1)
  {
    v9 = *((_QWORD *)v5 + 8);
    if (*(_DWORD *)(*(_QWORD *)v5 + *(_QWORD *)(**(_QWORD **)v5 - 24) + 32))
    {
      if (!v9
        || *(_BYTE *)(*(_QWORD *)(*((_QWORD *)v5 + 4) + ((*((_QWORD *)v5 + 7) >> 9) & 0x7FFFFFFFFFFFF8))
                    + (*((_QWORD *)v5 + 7) & 0xFFFLL)) == 4)
      {
        return;
      }
    }
    else if (!v9)
    {
      if (!*(_BYTE *)a2)
        goto LABEL_13;
      goto LABEL_9;
    }
    v10 = *(unsigned __int8 *)a2;
    if (*(_BYTE *)(*(_QWORD *)(*((_QWORD *)v5 + 4) + ((*((_QWORD *)v5 + 7) >> 9) & 0x7FFFFFFFFFFFF8))
                  + (*((_QWORD *)v5 + 7) & 0xFFFLL)) == 33)
      break;
    if (!*(_BYTE *)a2)
      goto LABEL_13;
LABEL_9:
    YAML::Exp::Word(this);
    __p.__r_.__value_.__r.__words[0] = 0;
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)v5;
    this = (YAML *)YAML::RegEx::Match<YAML::StreamCharSource>((uint64_t)YAML::Exp::Word(void)::e, (unint64_t *)&__p);
    v11 = (int)this;
    if ((int)this <= 0)
    {
      *(_BYTE *)a2 = 0;
      v8 = *((_QWORD *)v5 + 1);
      v7 = *((_DWORD *)v5 + 4);
    }
    else if (*(_BYTE *)a2)
    {
      goto LABEL_14;
    }
LABEL_13:
    YAML::Exp::Tag(this);
    __p.__r_.__value_.__r.__words[0] = 0;
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)v5;
    v11 = YAML::RegEx::Match<YAML::StreamCharSource>((uint64_t)&YAML::Exp::Tag(void)::e, (unint64_t *)&__p);
    if (v11 < 1)
      return;
LABEL_14:
    YAML::Stream::get(v5, v11, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    this = (YAML *)std::string::append(a3, (const std::string::value_type *)p_p, size);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  v16 = v8;
  v17 = v7;
  if (!v10)
  {
    exception = __cxa_allocate_exception(0x38uLL);
    std::string::basic_string[abi:ne180100]<0>(&__p, "illegal character found while scanning tag handle");
    YAML::Exception::Exception((uint64_t)exception, &v16, (__int128 *)&__p);
    *exception = &off_1E793AF28;
  }
}

void sub_1BFC01028(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  void *v16;
  int v17;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v17 & 1) == 0)
    {
LABEL_6:
      if (*(char *)(v15 + 23) < 0)
        operator delete(*(void **)v15);
      _Unwind_Resume(a1);
    }
  }
  else if (!v17)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v16);
  goto LABEL_6;
}

void YAML::ScanTagSuffix(std::string *this@<X0>, uint64_t a2@<X8>)
{
  YAML *v3;
  int v5;
  std::string *p_p;
  std::string::size_type size;
  uint64_t v8;
  _QWORD *exception;
  int v10;
  uint64_t v11;
  int v12;
  std::string __p;

  v3 = (YAML *)this;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  while (!*(_DWORD *)(*(_QWORD *)v3 + *(_QWORD *)(**(_QWORD **)v3 - 24) + 32)
       || *((_QWORD *)v3 + 8)
       && *(_BYTE *)(*(_QWORD *)(*((_QWORD *)v3 + 4) + ((*((_QWORD *)v3 + 7) >> 9) & 0x7FFFFFFFFFFFF8))
                   + (*((_QWORD *)v3 + 7) & 0xFFFLL)) != 4)
  {
    YAML::Exp::Tag((YAML::Exp *)this);
    __p.__r_.__value_.__r.__words[0] = 0;
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)v3;
    v5 = YAML::RegEx::Match<YAML::StreamCharSource>((uint64_t)&YAML::Exp::Tag(void)::e, (unint64_t *)&__p);
    if (v5 < 1)
      break;
    YAML::Stream::get(v3, v5, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    this = std::string::append((std::string *)a2, (const std::string::value_type *)p_p, size);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  v8 = *(unsigned __int8 *)(a2 + 23);
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(a2 + 8);
  if (!v8)
  {
    exception = __cxa_allocate_exception(0x38uLL);
    v10 = *((_DWORD *)v3 + 4);
    v11 = *((_QWORD *)v3 + 1);
    v12 = v10;
    std::string::basic_string[abi:ne180100]<0>(&__p, "tag handle with no suffix");
    YAML::Exception::Exception((uint64_t)exception, &v11, (__int128 *)&__p);
    *exception = &off_1E793AF28;
  }
}

void sub_1BFC01200(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;
  void *v18;
  int v19;

  if (a17 < 0)
  {
    operator delete(__p);
    if ((v19 & 1) == 0)
    {
LABEL_6:
      if (*(char *)(v17 + 23) < 0)
        operator delete(*(void **)v17);
      _Unwind_Resume(a1);
    }
  }
  else if (!v19)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v18);
  goto LABEL_6;
}

void siri::dialogengine::Variable::~Variable(void **this)
{
  siri::dialogengine::Variable::~Variable(this);
  JUMPOUT(0x1C3B8D890);
}

{
  *this = &off_1E7937820;
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

_QWORD *siri::dialogengine::Variable::GetSemanticConcept@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "");
}

uint64_t siri::dialogengine::Variable::IsEmpty(siri::dialogengine::Variable *this)
{
  return 1;
}

uint64_t siri::dialogengine::Variable::IsMutable(siri::dialogengine::Variable *this)
{
  return *((unsigned __int8 *)this + 64);
}

double siri::dialogengine::Variable::ToString@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)(a1 + 160) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

{
  double result;

  *(_QWORD *)(a1 + 160) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

siri::dialogengine::Variable *siri::dialogengine::Variable::Variable(siri::dialogengine::Variable *this)
{
  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)this = &off_1E7937820;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)this + 4, siri::dialogengine::TYPE_STRING[0]);
  *((_QWORD *)this + 7) = 0;
  *((_WORD *)this + 32) = 256;
  return this;
}

void sub_1BFC013A0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::Variable::Variable(uint64_t a1, const std::string *a2, const std::string *a3)
{
  std::string *v5;

  *(_QWORD *)a1 = &off_1E7937820;
  *(_OWORD *)(a1 + 8) = 0u;
  v5 = (std::string *)(a1 + 32);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  std::string::operator=((std::string *)(a1 + 8), a2);
  std::string::operator=(v5, a3);
  *(_QWORD *)(a1 + 56) = 0;
  *(_WORD *)(a1 + 64) = 256;
  return a1;
}

void sub_1BFC01430(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;

  if (*(char *)(v1 + 55) < 0)
    operator delete(*v3);
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

std::string *siri::dialogengine::Variable::SetName(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 8), a2);
}

std::string *siri::dialogengine::Variable::SetType(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 32), a2);
}

uint64_t siri::dialogengine::Variable::SetParent(uint64_t this, siri::dialogengine::Variable *a2)
{
  *(_QWORD *)(this + 56) = a2;
  return this;
}

uint64_t siri::dialogengine::Variable::SetIsMutable(uint64_t this, char a2)
{
  *(_BYTE *)(this + 64) = a2;
  return this;
}

uint64_t siri::dialogengine::Variable::SetRedacted(uint64_t this, char a2)
{
  *(_BYTE *)(this + 65) = a2;
  return this;
}

void siri::dialogengine::Variable::GetName(siri::dialogengine::Variable *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 31) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 1), *((_QWORD *)this + 2));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 8);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 3);
  }
}

void siri::dialogengine::Variable::GetFullName(siri::dialogengine::Variable *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t i;
  size_t v5;
  std::string *v6;
  const void *v7;
  int v8;
  const std::string::value_type *v9;
  std::string::size_type v10;
  std::string *v11;
  std::string::size_type v12;
  char v13;
  std::string v14;
  _QWORD v15[3];

  v15[2] = *MEMORY[0x1E0C80C00];
  if (*((char *)this + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)a2, *((const std::string::value_type **)this + 1), *((_QWORD *)this + 2));
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)((char *)this + 8);
    *(_QWORD *)(a2 + 16) = *((_QWORD *)this + 3);
  }
  for (i = *((_QWORD *)this + 7); i; i = *(_QWORD *)(i + 56))
  {
    if (*(char *)(i + 31) < 0)
    {
      if (!*(_QWORD *)(i + 16))
        return;
    }
    else if (!*(_BYTE *)(i + 31))
    {
      return;
    }
    if (*(char *)(i + 31) >= 0)
      v5 = *(unsigned __int8 *)(i + 31);
    else
      v5 = *(_QWORD *)(i + 16);
    std::string::basic_string[abi:ne180100]((uint64_t)&v14, v5 + 1);
    if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v6 = &v14;
    else
      v6 = (std::string *)v14.__r_.__value_.__r.__words[0];
    if (v5)
    {
      if (*(char *)(i + 31) >= 0)
        v7 = (const void *)(i + 8);
      else
        v7 = *(const void **)(i + 8);
      memmove(v6, v7, v5);
    }
    *(_WORD *)((char *)&v6->__r_.__value_.__l.__data_ + v5) = 46;
    v8 = *(char *)(a2 + 23);
    if (v8 >= 0)
      v9 = (const std::string::value_type *)a2;
    else
      v9 = *(const std::string::value_type **)a2;
    if (v8 >= 0)
      v10 = *(unsigned __int8 *)(a2 + 23);
    else
      v10 = *(_QWORD *)(a2 + 8);
    v11 = std::string::append(&v14, v9, v10);
    v12 = v11->__r_.__value_.__r.__words[0];
    v15[0] = v11->__r_.__value_.__l.__size_;
    *(_QWORD *)((char *)v15 + 7) = *(std::string::size_type *)((char *)&v11->__r_.__value_.__r.__words[1] + 7);
    v13 = HIBYTE(v11->__r_.__value_.__r.__words[2]);
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
    *(_QWORD *)a2 = v12;
    *(_QWORD *)(a2 + 8) = v15[0];
    *(_QWORD *)(a2 + 15) = *(_QWORD *)((char *)v15 + 7);
    *(_BYTE *)(a2 + 23) = v13;
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v14.__r_.__value_.__l.__data_);
  }
}

void sub_1BFC01654(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v15 + 23) < 0)
    operator delete(*(void **)v15);
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::Variable::GetType(siri::dialogengine::Variable *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 55) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 4), *((_QWORD *)this + 5));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 2);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 6);
  }
}

uint64_t siri::dialogengine::Variable::IsRedacted(uint64_t this)
{
  uint64_t v1;
  int v2;

  v1 = this;
  LOBYTE(this) = 1;
  do
  {
    v2 = *(unsigned __int8 *)(v1 + 65);
    v1 = *(_QWORD *)(v1 + 56);
    this = this & (v2 != 0);
  }
  while (v1);
  return this;
}

uint64_t siri::dialogengine::Variable::GetParent(siri::dialogengine::Variable *this)
{
  return *((_QWORD *)this + 7);
}

uint64_t siri::dialogengine::Variable::RemoveSelfAsParentOfChild(uint64_t this, siri::dialogengine::Variable *a2)
{
  if (*((_QWORD *)a2 + 7) == this)
    *((_QWORD *)a2 + 7) = 0;
  return this;
}

void sub_1BFC01AE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;

  _Unwind_Resume(a1);
}

void ___ZL11CATExecutorP8NSBundleP5NSURLP8NSStringS4_S4_P12NSDictionaryP11objc_objectPU22objcproto11CATCallback11objc_objectiU13block_pointerFvPK21DialogExecutionResultPK7NSErrorE_block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  char v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;

  v10 = a2;
  +[CATCommonApi DEResultToDialogExecutionResult:catId:](CATCommonApi, "DEResultToDialogExecutionResult:catId:");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "status");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "isEqualToString:", CFSTR("success"));

  v6 = *(_QWORD *)(a1 + 40);
  if ((v5 & 1) != 0)
  {
    +[CATCommonApi NSErrorFromString:errorCode:](CATCommonApi, "NSErrorFromString:errorCode:", &stru_1E793AF80, 0);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, void *, void *))(v6 + 16))(v6, v3, v7);
  }
  else
  {
    objc_msgSend(v10, "error");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "status");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    +[CATCommonApi NSErrorFromString:errorCode:](CATCommonApi, "NSErrorFromString:errorCode:", v7, v8);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, void *, void *))(v6 + 16))(v6, v3, v9);

  }
}

void sub_1BFC01CA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::TraceWriter::TraceWriter(uint64_t this)
{
  *(_BYTE *)this = 0;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 40) = 0;
  *(_QWORD *)(this + 32) = 0;
  *(_QWORD *)(this + 24) = this + 32;
  return this;
}

{
  *(_BYTE *)this = 0;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 40) = 0;
  *(_QWORD *)(this + 32) = 0;
  *(_QWORD *)(this + 24) = this + 32;
  return this;
}

uint64_t siri::dialogengine::TraceWriter::IsEnabled(siri::dialogengine::TraceWriter *this)
{
  return *(unsigned __int8 *)this;
}

void siri::dialogengine::TraceWriter::Initialize(siri::dialogengine::TraceWriter *this, siri::dialogengine::Context *a2)
{
  siri::dialogengine *v4;
  const char *v5;
  std::string *v6;
  const char *v7;
  __int128 v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  std::string *v13;
  const char *v14;
  std::string v15;
  void *v16[4];
  std::string v17;
  char v18;

  if (a2)
  {
    v4 = siri::dialogengine::RequestInfo::RequestInfo((siri::dialogengine::RequestInfo *)v16, (siri::dialogengine::Context *)((char *)a2 + 8));
    if ((v18 & 0x10) != 0 || siri::dialogengine::TraceEnabled(v4))
    {
      siri::dialogengine::Log::Info((siri::dialogengine::Log *)"CREATE TRACE: Trace creation is enabled", v5);
      *(_BYTE *)this = 1;
      if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v15, v17.__r_.__value_.__l.__data_, v17.__r_.__value_.__l.__size_);
      else
        v15 = v17;
      v6 = (std::string *)operator new(0x320uLL);
      v6->__r_.__value_.__l.__size_ = 0;
      v6->__r_.__value_.__r.__words[2] = 0;
      v6->__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E7937898;
      *(_QWORD *)&v8 = siri::dialogengine::Trace::Trace(v6 + 1, (__int128 *)&v15, 1, 0.0);
      *((_QWORD *)&v8 + 1) = v6;
      v9 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
      *(_OWORD *)((char *)this + 8) = v8;
      if (v9)
      {
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v15.__r_.__value_.__l.__data_);
      v12 = *((_QWORD *)this + 1);
      if (*(char *)(v12 + 55) < 0)
        std::string::__init_copy_ctor_external(&v15, *(const std::string::value_type **)(v12 + 32), *(_QWORD *)(v12 + 40));
      else
        v15 = *(std::string *)(v12 + 32);
      v13 = &v15;
      if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v13 = (std::string *)v15.__r_.__value_.__r.__words[0];
      siri::dialogengine::Log::Info((siri::dialogengine::Log *)"CREATE TRACE: Trace folder: %s", v7, v13);
      if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v15.__r_.__value_.__l.__data_);
      std::__tree<std::string>::destroy((uint64_t)this + 24, *((char **)this + 4));
      *((_QWORD *)this + 3) = (char *)this + 32;
      *((_QWORD *)this + 4) = 0;
      *((_QWORD *)this + 5) = 0;
      siri::dialogengine::Log::Info((siri::dialogengine::Log *)"CREATE TRACE: Write request info", v14);
      siri::dialogengine::Trace::WriteRequestInfo(*((siri::dialogengine::Trace **)this + 1), a2);
    }
    siri::dialogengine::RequestInfo::~RequestInfo(v16);
  }
}

void sub_1BFC01EE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18)
{
  siri::dialogengine::RequestInfo::~RequestInfo(&a18);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<siri::dialogengine::Trace>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E7937898;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<siri::dialogengine::Trace>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E7937898;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B8D890);
}

void std::__shared_ptr_emplace<siri::dialogengine::Trace>::__on_zero_shared(uint64_t a1)
{
  siri::dialogengine::Trace::~Trace((siri::dialogengine::Trace *)(a1 + 24));
}

void siri::dialogengine::TraceWriter::WriteExpandedParams(siri::dialogengine::Trace **this, siri::dialogengine::Context *a2)
{
  if (*(_BYTE *)this)
  {
    siri::dialogengine::Log::Info((siri::dialogengine::Log *)"CREATE TRACE: Write expanded params info", (const char *)a2);
    siri::dialogengine::Trace::WriteExpandedParams(this[1], a2);
  }
}

void siri::dialogengine::TraceWriter::WriteRequestJson(uint64_t a1, const char *a2)
{
  if (*(_BYTE *)a1)
  {
    siri::dialogengine::Log::Info((siri::dialogengine::Log *)"CREATE TRACE: Write request JSON", a2);
    siri::dialogengine::Trace::WriteRequestJson(*(siri::dialogengine::Trace **)(a1 + 8), (uint64_t)a2);
  }
}

uint64_t siri::dialogengine::TraceWriter::CopyParamsFile(uint64_t result, const void **a2)
{
  uint64_t v3;
  const char *v4;

  if (*(_BYTE *)result)
  {
    v3 = result;
    result = siri::dialogengine::TraceWriter::IsFileAlreadyCopied(result, a2);
    if ((result & 1) == 0)
    {
      siri::dialogengine::Log::Info((siri::dialogengine::Log *)"CREATE TRACE: Copy params file", v4);
      siri::dialogengine::Trace::CopyFile(*(siri::dialogengine::Trace **)(v3 + 8), (uint64_t)a2, *(_QWORD *)(v3 + 8) + 176);
      return (uint64_t)std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)(v3 + 24), a2, (uint64_t)a2);
    }
  }
  return result;
}

BOOL siri::dialogengine::TraceWriter::IsFileAlreadyCopied(uint64_t a1, const void **a2)
{
  const void **v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  const char *v8;
  void **v9;
  void *__p[2];
  char v12;

  v2 = a2;
  v4 = std::__tree<std::string>::find<std::string>(a1 + 24, a2);
  v5 = v4;
  v6 = a1 + 32;
  if (*((char *)v2 + 23) < 0)
    v2 = (const void **)*v2;
  if (v6 == v4)
    v7 = "false";
  else
    v7 = "true";
  std::string::basic_string[abi:ne180100]<0>(__p, v7);
  if (v12 >= 0)
    v9 = __p;
  else
    v9 = (void **)__p[0];
  siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"CREATE TRACE: File [%s] was already copied? %s", v8, v2, v9);
  if (v12 < 0)
    operator delete(__p[0]);
  return v6 != v5;
}

void sub_1BFC02118(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::TraceWriter::CopyLocaleFile(uint64_t result, const void **a2)
{
  uint64_t v3;
  const char *v4;

  if (*(_BYTE *)result)
  {
    v3 = result;
    result = siri::dialogengine::TraceWriter::IsFileAlreadyCopied(result, a2);
    if ((result & 1) == 0)
    {
      siri::dialogengine::Log::Info((siri::dialogengine::Log *)"CREATE TRACE: Copy locale file", v4);
      siri::dialogengine::Trace::CopyFile(*(siri::dialogengine::Trace **)(v3 + 8), (uint64_t)a2, *(_QWORD *)(v3 + 8) + 176);
      return (uint64_t)std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)(v3 + 24), a2, (uint64_t)a2);
    }
  }
  return result;
}

void siri::dialogengine::TraceWriter::WriteParamsString(uint64_t a1, const char *a2)
{
  if (*(_BYTE *)a1)
  {
    siri::dialogengine::Log::Info((siri::dialogengine::Log *)"CREATE TRACE: Write params string to file", a2);
    siri::dialogengine::Trace::WriteParamsXmlFile(*(siri::dialogengine::Trace **)(a1 + 8), (uint64_t)a2);
  }
}

void siri::dialogengine::TraceWriter::WriteLocaleString(uint64_t a1, const char *a2)
{
  if (*(_BYTE *)a1)
  {
    siri::dialogengine::Log::Info((siri::dialogengine::Log *)"CREATE TRACE: Write locale string to file", a2);
    siri::dialogengine::Trace::WriteLocaleXmlFile(*(siri::dialogengine::Trace **)(a1 + 8), (uint64_t)a2);
  }
}

void siri::dialogengine::TraceWriter::WriteVisualString(uint64_t a1, const char *a2)
{
  if (*(_BYTE *)a1)
  {
    siri::dialogengine::Log::Info((siri::dialogengine::Log *)"CREATE TRACE: Write visual string to file", a2);
    siri::dialogengine::Trace::WriteVisualXmlFile(*(siri::dialogengine::Trace **)(a1 + 8), (uint64_t)a2);
  }
}

uint64_t siri::dialogengine::TraceWriter::CopySchemaFile(uint64_t result, const void **a2)
{
  uint64_t v3;
  const char *v4;

  if (*(_BYTE *)result)
  {
    v3 = result;
    result = siri::dialogengine::TraceWriter::IsFileAlreadyCopied(result, a2);
    if ((result & 1) == 0)
    {
      siri::dialogengine::Log::Info((siri::dialogengine::Log *)"CREATE TRACE: Copy schema file", v4);
      siri::dialogengine::Trace::CopyFile(*(siri::dialogengine::Trace **)(v3 + 8), (uint64_t)a2, *(_QWORD *)(v3 + 8) + 152);
      return (uint64_t)std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)(v3 + 24), a2, (uint64_t)a2);
    }
  }
  return result;
}

uint64_t siri::dialogengine::TraceWriter::CopyMetadataFile(uint64_t result, std::string *a2)
{
  uint64_t v3;
  const char *v4;

  if (*(_BYTE *)result)
  {
    v3 = result;
    result = siri::dialogengine::TraceWriter::IsFileAlreadyCopied(result, (const void **)&a2->__r_.__value_.__l.__data_);
    if ((result & 1) == 0)
    {
      siri::dialogengine::Log::Info((siri::dialogengine::Log *)"CREATE TRACE: Copy metadata file", v4);
      siri::dialogengine::Trace::CopyMetadataFile(*(siri::dialogengine::Trace **)(v3 + 8), a2);
      return (uint64_t)std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)(v3 + 24), (const void **)&a2->__r_.__value_.__l.__data_, (uint64_t)a2);
    }
  }
  return result;
}

void siri::dialogengine::TraceWriter::WriteDialogStateToFile(uint64_t a1, char *a2, int a3)
{
  if (*(_BYTE *)a1)
  {
    siri::dialogengine::Log::Info((siri::dialogengine::Log *)"CREATE TRACE: Write dialog state", a2);
    siri::dialogengine::Trace::WriteDialogStateToFile(*(siri::dialogengine::Trace **)(a1 + 8), (siri::dialogengine::Context *)a2, a3);
  }
}

void siri::dialogengine::TraceWriter::WriteResponseJson(uint64_t a1, const char *a2)
{
  if (*(_BYTE *)a1)
  {
    siri::dialogengine::Log::Info((siri::dialogengine::Log *)"CREATE TRACE: Write response JSON", a2);
    siri::dialogengine::Trace::WriteResponseJson(*(siri::dialogengine::Trace **)(a1 + 8), (uint64_t)a2);
  }
}

void siri::dialogengine::TraceWriter::WriteRunScript(siri::dialogengine::Trace **this, const siri::dialogengine::Context *a2)
{
  if (*(_BYTE *)this)
  {
    siri::dialogengine::Log::Info((siri::dialogengine::Log *)"CREATE TRACE: Write run script", (const char *)a2);
    siri::dialogengine::Trace::WriteRunScript(this[1], a2);
  }
}

void siri::dialogengine::TraceWriter::GetTracePath(siri::dialogengine::TraceWriter *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v2;
  __int128 v3;

  v2 = *((_QWORD *)this + 1);
  if (v2)
  {
    if (*(char *)(v2 + 55) < 0)
    {
      std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)(v2 + 32), *(_QWORD *)(v2 + 40));
    }
    else
    {
      v3 = *(_OWORD *)(v2 + 32);
      a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(v2 + 48);
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v3;
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a2, "");
  }
}

YAML::Emitter *YAML::Emitter::Emitter(YAML::Emitter *this)
{
  YAML::EmitterState *v2;
  const std::vector<char>::value_type *v3;
  char v5;

  v2 = (YAML::EmitterState *)operator new();
  YAML::EmitterState::EmitterState(v2);
  *(_QWORD *)this = v2;
  v5 = 0;
  std::vector<char>::vector((std::vector<char> *)((char *)this + 8), (std::vector<char>::size_type)&v5, v3);
  *((_BYTE *)this + 64) = 0;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  return this;
}

void sub_1BFC024C8(_Unwind_Exception *a1)
{
  YAML::EmitterState **v1;

  std::unique_ptr<YAML::EmitterState>::reset[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

YAML::EmitterState *std::unique_ptr<YAML::EmitterState>::reset[abi:ne180100](YAML::EmitterState **a1)
{
  YAML::EmitterState *result;

  result = *a1;
  *a1 = 0;
  if (result)
  {
    YAML::EmitterState::~EmitterState(result);
    JUMPOUT(0x1C3B8D890);
  }
  return result;
}

uint64_t YAML::Emitter::Emitter(uint64_t a1, uint64_t a2)
{
  YAML::EmitterState *v4;

  v4 = (YAML::EmitterState *)operator new();
  YAML::EmitterState::EmitterState(v4);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = a2;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 64) = 0;
  return a1;
}

void sub_1BFC025A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D890](v1, 0x1032C409558ADD0);
  _Unwind_Resume(a1);
}

void YAML::Emitter::~Emitter(YAML::Emitter *this)
{
  void *v2;

  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
  {
    *((_QWORD *)this + 2) = v2;
    operator delete(v2);
  }
  std::unique_ptr<YAML::EmitterState>::reset[abi:ne180100]((YAML::EmitterState **)this);
}

{
  void *v2;

  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
  {
    *((_QWORD *)this + 2) = v2;
    operator delete(v2);
  }
  std::unique_ptr<YAML::EmitterState>::reset[abi:ne180100]((YAML::EmitterState **)this);
}

uint64_t YAML::Emitter::c_str(YAML::Emitter *this)
{
  if (*((_QWORD *)this + 4))
    return 0;
  *(_BYTE *)(*((_QWORD *)this + 1) + *((_QWORD *)this + 5)) = 0;
  return *((_QWORD *)this + 1);
}

uint64_t YAML::Emitter::size(YAML::Emitter *this)
{
  return *((_QWORD *)this + 5);
}

uint64_t YAML::Emitter::good(YAML::Emitter *this)
{
  return **(unsigned __int8 **)this;
}

void YAML::Emitter::GetLastError(YAML::Emitter *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v2;
  __int128 v3;

  v2 = *(_QWORD *)this;
  if (*(char *)(*(_QWORD *)this + 31) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)(v2 + 8), *(_QWORD *)(v2 + 16));
  }
  else
  {
    v3 = *(_OWORD *)(v2 + 8);
    a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(v2 + 24);
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v3;
  }
}

BOOL YAML::Emitter::SetOutputCharset(uint64_t *a1, int a2)
{
  unsigned int v2;

  v2 = a2 - 3;
  if ((a2 - 3) <= 1)
    YAML::EmitterState::_Set<YAML::EMITTER_MANIP>(*a1, (_DWORD *)(*a1 + 32), a2, 1);
  return v2 < 2;
}

uint64_t YAML::Emitter::SetStringFormat(uint64_t *a1, unsigned int a2)
{
  uint64_t v2;

  v2 = 0;
  if (a2 <= 7 && ((1 << a2) & 0xE1) != 0)
  {
    v2 = 1;
    YAML::EmitterState::_Set<YAML::EMITTER_MANIP>(*a1, (_DWORD *)(*a1 + 36), a2, 1);
  }
  return v2;
}

BOOL YAML::Emitter::SetBoolFormat(uint64_t *a1, int a2)
{
  unsigned int v4;
  uint64_t v5;
  _DWORD *v6;
  BOOL v7;

  v4 = a2 - 8;
  if ((a2 - 8) > 2)
  {
    if ((a2 - 11) > 2)
      goto LABEL_6;
    v5 = *a1;
    v6 = (_DWORD *)(*a1 + 48);
  }
  else
  {
    v5 = *a1;
    v6 = (_DWORD *)(*a1 + 40);
  }
  YAML::EmitterState::_Set<YAML::EMITTER_MANIP>(v5, v6, a2, 1);
LABEL_6:
  if ((a2 & 0xFFFFFFFE) == 0xE)
  {
    YAML::EmitterState::_Set<YAML::EMITTER_MANIP>(*a1, (_DWORD *)(*a1 + 44), a2, 1);
    v7 = 0;
  }
  else
  {
    v7 = v4 >= 6;
  }
  return !v7;
}

BOOL YAML::Emitter::SetIntBase(uint64_t *a1, int a2)
{
  unsigned int v2;

  v2 = a2 - 16;
  if ((a2 - 16) <= 2)
    YAML::EmitterState::_Set<YAML::EMITTER_MANIP>(*a1, (_DWORD *)(*a1 + 52), a2, 1);
  return v2 < 3;
}

BOOL YAML::Emitter::SetSeqFormat(uint64_t *a1, int a2)
{
  unsigned int v2;

  v2 = a2 - 23;
  if ((a2 - 23) <= 1)
    YAML::EmitterState::_Set<YAML::EMITTER_MANIP>(*a1, (_DWORD *)(*a1 + 80), a2, 1);
  return v2 < 2;
}

uint64_t YAML::Emitter::SetMapFormat(uint64_t *a1, int a2)
{
  unsigned int v4;
  uint64_t v5;
  _DWORD *v6;
  unsigned int v7;

  v4 = a2 - 23;
  if ((a2 - 23) <= 1)
    YAML::EmitterState::_Set<YAML::EMITTER_MANIP>(*a1, (_DWORD *)(*a1 + 84), a2, 1);
  if (a2 != 29 && a2)
  {
    v7 = 0;
  }
  else
  {
    v5 = *a1;
    v6 = (_DWORD *)(*a1 + 88);
    v7 = 1;
    YAML::EmitterState::_Set<YAML::EMITTER_MANIP>(v5, v6, a2, 1);
  }
  if (v4 < 2)
    return 1;
  else
    return v7;
}

BOOL YAML::Emitter::SetIndent(YAML::Emitter *this, unint64_t a2)
{
  if (a2 >= 2)
    YAML::EmitterState::_Set<unsigned long>(*(_QWORD *)this, (_QWORD *)(*(_QWORD *)this + 56), a2, 1);
  return a2 > 1;
}

BOOL YAML::Emitter::SetPreCommentIndent(YAML::Emitter *this, uint64_t a2)
{
  if (a2)
    YAML::EmitterState::_Set<unsigned long>(*(_QWORD *)this, (_QWORD *)(*(_QWORD *)this + 64), a2, 1);
  return a2 != 0;
}

BOOL YAML::Emitter::SetPostCommentIndent(YAML::Emitter *this, uint64_t a2)
{
  if (a2)
    YAML::EmitterState::_Set<unsigned long>(*(_QWORD *)this, (_QWORD *)(*(_QWORD *)this + 72), a2, 1);
  return a2 != 0;
}

BOOL YAML::Emitter::SetFloatPrecision(YAML::Emitter *this, unint64_t a2)
{
  if (a2 <= 9)
    YAML::EmitterState::_Set<unsigned long>(*(_QWORD *)this, (_QWORD *)(*(_QWORD *)this + 96), a2, 1);
  return a2 < 0xA;
}

BOOL YAML::Emitter::SetDoublePrecision(YAML::Emitter *this, unint64_t a2)
{
  if (a2 <= 0x11)
    YAML::EmitterState::_Set<unsigned long>(*(_QWORD *)this, (_QWORD *)(*(_QWORD *)this + 104), a2, 1);
  return a2 < 0x12;
}

YAML::Emitter *YAML::Emitter::SetLocalValue(YAML::Emitter *this, unsigned int a2)
{
  _BYTE *v3;

  v3 = *(_BYTE **)this;
  if (*v3)
  {
    switch(a2)
    {
      case 0x13u:
        YAML::Emitter::EmitBeginDoc(this);
        break;
      case 0x14u:
        YAML::Emitter::EmitEndDoc(this);
        break;
      case 0x15u:
        YAML::Emitter::EmitBeginSeq(this);
        break;
      case 0x16u:
        YAML::Emitter::EmitEndSeq(this);
        break;
      case 0x17u:
      case 0x18u:
        goto LABEL_7;
      case 0x19u:
        YAML::Emitter::EmitBeginMap(this);
        break;
      case 0x1Au:
        YAML::Emitter::EmitEndMap(this);
        break;
      case 0x1Bu:
      case 0x1Cu:
        return this;
      default:
        if (a2 == 1)
        {
          YAML::Emitter::EmitKindTag(this);
        }
        else if (a2 == 2)
        {
          YAML::Emitter::EmitNewline(this);
        }
        else
        {
LABEL_7:
          YAML::EmitterState::SetLocalValue((uint64_t)v3, a2);
        }
        break;
    }
  }
  return this;
}

void YAML::Emitter::EmitBeginDoc(YAML::Emitter *this)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  std::string __str;

  v1 = *(_QWORD *)this;
  if (**(_BYTE **)this)
  {
    v3 = *(_QWORD *)(v1 + 168);
    if (*(_QWORD *)(v1 + 160) != v3 && **(_DWORD **)(v3 - 8) || *(_BYTE *)(v1 + 192) || *(_BYTE *)(v1 + 193))
    {
      std::string::basic_string[abi:ne180100]<0>(&__str, "Unexpected begin document");
      *(_BYTE *)v1 = 0;
      std::string::operator=((std::string *)(v1 + 8), &__str);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
    }
    else
    {
      if (*((_QWORD *)this + 7))
        YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), "\n", 1uLL);
      YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), "---\n", 4uLL);
      v4 = *(_QWORD *)this;
      *(_WORD *)(v4 + 192) = 0;
      *(_BYTE *)(v4 + 194) = 0;
    }
  }
}

void sub_1BFC02BA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void YAML::Emitter::EmitEndDoc(YAML::Emitter *this)
{
  uint64_t v1;
  uint64_t v2;
  std::vector<char> *v3;
  std::string __str;

  v1 = *(_QWORD *)this;
  if (**(_BYTE **)this)
  {
    v2 = *(_QWORD *)(v1 + 168);
    if (*(_QWORD *)(v1 + 160) != v2 && **(_DWORD **)(v2 - 8) || *(_BYTE *)(v1 + 192) || *(_BYTE *)(v1 + 193))
    {
      std::string::basic_string[abi:ne180100]<0>(&__str, "Unexpected begin document");
      *(_BYTE *)v1 = 0;
      std::string::operator=((std::string *)(v1 + 8), &__str);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
    }
    else
    {
      v3 = (std::vector<char> *)((char *)this + 8);
      if (*((_QWORD *)this + 7))
        YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), "\n", 1uLL);
      YAML::ostream_wrapper::write(v3, "...\n", 4uLL);
    }
  }
}

void sub_1BFC02CAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void YAML::Emitter::EmitBeginSeq(YAML::Emitter *this)
{
  uint64_t v1;
  uint64_t v3;
  unsigned int v4;

  v1 = *(_QWORD *)this;
  if (**(_BYTE **)this)
  {
    v3 = *(_QWORD *)(v1 + 168);
    if (*(_QWORD *)(v1 + 160) == v3 || *(_DWORD *)(*(_QWORD *)(v3 - 8) + 4) != 1)
    {
      if (*(_DWORD *)(v1 + 80) == 24)
        v4 = 4;
      else
        v4 = 3;
    }
    else
    {
      v4 = 3;
    }
    YAML::Emitter::PrepareNode(this, v4);
    YAML::EmitterState::StartedGroup(*(_QWORD *)this, 1);
  }
}

void YAML::Emitter::EmitEndSeq(YAML::Emitter *this)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  char __src;

  v2 = *(_QWORD *)this;
  if (*(_BYTE *)v2)
  {
    v3 = *(_QWORD *)(v2 + 168);
    if (*(_QWORD *)(v2 + 160) == v3)
    {
      if (!*(_QWORD *)(v2 + 200))
        __assert_rtn("ForceFlow", "emitterstate.cpp", 69, "!m_groups.empty()");
    }
    else
    {
      if (!*(_QWORD *)(*(_QWORD *)(v3 - 8) + 16))
        *(_DWORD *)(*(_QWORD *)(v3 - 8) + 4) = 1;
      if (*(_DWORD *)(*(_QWORD *)(v3 - 8) + 4) == 1)
      {
        if (*((_BYTE *)this + 64))
        {
          YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), "\n", 1uLL);
          v2 = *(_QWORD *)this;
        }
        v4 = *(_QWORD *)(v2 + 184);
        if (*((_QWORD *)this + 7) < v4)
        {
          do
          {
            __src = 32;
            YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), &__src, 1uLL);
          }
          while (*((_QWORD *)this + 7) < v4);
          v2 = *(_QWORD *)this;
        }
        v5 = *(_QWORD *)(v2 + 168);
        if (*(_QWORD *)(v2 + 160) == v5)
          v6 = (_QWORD *)(v2 + 200);
        else
          v6 = (_QWORD *)(*(_QWORD *)(v5 - 8) + 16);
        if (!*v6)
          YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), "[", 1uLL);
        YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), "]", 1uLL);
        v2 = *(_QWORD *)this;
      }
    }
    YAML::EmitterState::EndedGroup(v2, 1);
  }
}

void YAML::Emitter::EmitBeginMap(YAML::Emitter *this)
{
  uint64_t v1;
  uint64_t v3;
  unsigned int v4;

  v1 = *(_QWORD *)this;
  if (**(_BYTE **)this)
  {
    v3 = *(_QWORD *)(v1 + 168);
    if (*(_QWORD *)(v1 + 160) == v3 || *(_DWORD *)(*(_QWORD *)(v3 - 8) + 4) != 1)
    {
      if (*(_DWORD *)(v1 + 84) == 24)
        v4 = 6;
      else
        v4 = 5;
    }
    else
    {
      v4 = 5;
    }
    YAML::Emitter::PrepareNode(this, v4);
    YAML::EmitterState::StartedGroup(*(_QWORD *)this, 2);
  }
}

void YAML::Emitter::EmitEndMap(YAML::Emitter *this)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  char __src;

  v2 = *(_QWORD *)this;
  if (*(_BYTE *)v2)
  {
    v3 = *(_QWORD *)(v2 + 168);
    if (*(_QWORD *)(v2 + 160) == v3)
    {
      if (!*(_QWORD *)(v2 + 200))
        __assert_rtn("ForceFlow", "emitterstate.cpp", 69, "!m_groups.empty()");
    }
    else
    {
      if (!*(_QWORD *)(*(_QWORD *)(v3 - 8) + 16))
        *(_DWORD *)(*(_QWORD *)(v3 - 8) + 4) = 1;
      if (*(_DWORD *)(*(_QWORD *)(v3 - 8) + 4) == 1)
      {
        if (*((_BYTE *)this + 64))
        {
          YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), "\n", 1uLL);
          v2 = *(_QWORD *)this;
        }
        v4 = *(_QWORD *)(v2 + 184);
        if (*((_QWORD *)this + 7) < v4)
        {
          do
          {
            __src = 32;
            YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), &__src, 1uLL);
          }
          while (*((_QWORD *)this + 7) < v4);
          v2 = *(_QWORD *)this;
        }
        v5 = *(_QWORD *)(v2 + 168);
        if (*(_QWORD *)(v2 + 160) == v5)
          v6 = (_QWORD *)(v2 + 200);
        else
          v6 = (_QWORD *)(*(_QWORD *)(v5 - 8) + 16);
        if (!*v6)
          YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), "{", 1uLL);
        YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), "}", 1uLL);
        v2 = *(_QWORD *)this;
      }
    }
    YAML::EmitterState::EndedGroup(v2, 2);
  }
}

void YAML::Emitter::EmitKindTag(YAML::Emitter *this)
{
  void *v2[2];
  char v3;
  std::string v4;
  void *__p;
  char v6;
  __int128 v7;
  char v8;

  std::string::basic_string[abi:ne180100]<0>(v2, "");
  std::string::basic_string[abi:ne180100]<0>(&v7, "");
  YAML::_Tag::_Tag(&v4, &v7, (__int128 *)v2, 1);
  if (v8 < 0)
    operator delete((void *)v7);
  YAML::Emitter::Write(this, (uint64_t)&v4);
  if (v6 < 0)
    operator delete(__p);
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v4.__r_.__value_.__l.__data_);
  if (v3 < 0)
    operator delete(v2[0]);
}

void sub_1BFC030F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  std::pair<std::string const,std::string>::~pair((uint64_t)&a16);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void YAML::Emitter::EmitNewline(YAML::Emitter *this)
{
  if (**(_BYTE **)this)
  {
    YAML::Emitter::PrepareNode(this, 0);
    YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), "\n", 1uLL);
    *(_BYTE *)(*(_QWORD *)this + 194) = 1;
  }
}

void YAML::Emitter::PrepareNode(YAML::Emitter *this, unsigned int a2)
{
  uint64_t v2;
  int *v3;
  int v4;
  BOOL v5;
  int v6;
  int v7;

  v2 = *(_QWORD *)(*(_QWORD *)this + 168);
  if (*(_QWORD *)(*(_QWORD *)this + 160) == v2)
  {
    YAML::Emitter::PrepareTopNode(this, a2);
  }
  else
  {
    v3 = *(int **)(v2 - 8);
    v4 = *v3;
    v5 = v3[1] == 1;
    if (v3[1] == 1)
      v6 = 5;
    else
      v6 = 6;
    if (v5)
      v7 = 3;
    else
      v7 = 4;
    if (v4 == 1)
      v6 = v7;
    switch(v6)
    {
      case 3:
        YAML::Emitter::FlowSeqPrepareNode(this, a2);
        break;
      case 4:
        YAML::Emitter::BlockSeqPrepareNode(this, a2);
        break;
      case 5:
        YAML::Emitter::FlowMapPrepareNode(this, a2);
        break;
      case 6:
        YAML::Emitter::BlockMapPrepareNode(this, a2);
        break;
      default:
        return;
    }
  }
}

void YAML::Emitter::PrepareTopNode(YAML::Emitter *this, unsigned int a2)
{
  uint64_t v4;
  _QWORD *v5;
  _BOOL4 v6;
  uint64_t v7;

  if (a2)
  {
    v4 = *(_QWORD *)(*(_QWORD *)this + 168);
    if (*(_QWORD *)(*(_QWORD *)this + 160) == v4)
      v5 = (_QWORD *)(*(_QWORD *)this + 200);
    else
      v5 = (_QWORD *)(*(_QWORD *)(v4 - 8) + 16);
    if (*v5 && *((_QWORD *)this + 7))
      YAML::Emitter::EmitBeginDoc(this);
    if (a2 <= 6)
    {
      if (((1 << a2) & 0x2E) != 0)
      {
        if (*(_BYTE *)(*(_QWORD *)this + 192))
          v6 = 1;
        else
          v6 = *(unsigned __int8 *)(*(_QWORD *)this + 193) != 0;
        YAML::Emitter::SpaceOrIndentTo(this, v6, 0);
      }
      else if (((1 << a2) & 0x50) != 0)
      {
        v7 = *(_QWORD *)this;
        if (*(_BYTE *)(*(_QWORD *)this + 192) || *(_BYTE *)(v7 + 193) || *(_BYTE *)(v7 + 194))
          YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), "\n", 1uLL);
      }
    }
  }
}

void YAML::Emitter::FlowSeqPrepareNode(YAML::Emitter *this, unsigned int a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  const char *v8;
  uint64_t v9;
  _BOOL4 v10;
  uint64_t v11;
  _QWORD *v12;
  char __src;

  v4 = *(_QWORD *)this;
  if (*(_QWORD *)(*(_QWORD *)this + 168) - *(_QWORD *)(*(_QWORD *)this + 160) >= 0x10uLL)
    v5 = *(_QWORD *)(v4 + 184) - *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 168) - 16) + 8);
  else
    v5 = 0;
  if (!*(_BYTE *)(v4 + 192) && !*(_BYTE *)(v4 + 193) && !*(_BYTE *)(v4 + 194))
  {
    if (*((_BYTE *)this + 64))
      YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), "\n", 1uLL);
    while (*((_QWORD *)this + 7) < v5)
    {
      __src = 32;
      YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), &__src, 1uLL);
    }
    v6 = *(_QWORD *)(*(_QWORD *)this + 168);
    if (*(_QWORD *)(*(_QWORD *)this + 160) == v6)
      v7 = (_QWORD *)(*(_QWORD *)this + 200);
    else
      v7 = (_QWORD *)(*(_QWORD *)(v6 - 8) + 16);
    if (*v7)
      v8 = ",";
    else
      v8 = "[";
    YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), v8, 1uLL);
  }
  if (a2 <= 6)
  {
    if (((1 << a2) & 0x2E) != 0)
    {
      v9 = *(_QWORD *)this;
      if (*(_BYTE *)(*(_QWORD *)this + 192) || *(_BYTE *)(v9 + 193))
      {
        v10 = 1;
      }
      else
      {
        v11 = *(_QWORD *)(v9 + 168);
        if (*(_QWORD *)(v9 + 160) == v11)
          v12 = (_QWORD *)(v9 + 200);
        else
          v12 = (_QWORD *)(*(_QWORD *)(v11 - 8) + 16);
        v10 = *v12 != 0;
      }
      YAML::Emitter::SpaceOrIndentTo(this, v10, v5);
    }
    else if (((1 << a2) & 0x50) != 0)
    {
      __assert_rtn("FlowSeqPrepareNode", "emitter.cpp", 336, "false");
    }
  }
}

void YAML::Emitter::BlockSeqPrepareNode(YAML::Emitter *this, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  _BOOL4 v10;
  char __src;

  v4 = *(_QWORD *)this;
  v6 = *(_QWORD *)(*(_QWORD *)this + 160);
  v5 = *(_QWORD *)(*(_QWORD *)this + 168);
  if (v6 == v5)
  {
    v7 = 0;
    if (!a2)
      return;
  }
  else
  {
    v7 = *(_QWORD *)(*(_QWORD *)(v5 - 8) + 8);
    if (!a2)
      return;
  }
  v8 = *(_QWORD *)(v4 + 184);
  if (!*(_BYTE *)(v4 + 192) && !*(_BYTE *)(v4 + 193))
  {
    if (v6 == v5)
      v9 = (_QWORD *)(v4 + 200);
    else
      v9 = (_QWORD *)(*(_QWORD *)(v5 - 8) + 16);
    if (*v9 || *((_BYTE *)this + 64))
      YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), "\n", 1uLL);
    while (*((_QWORD *)this + 7) < v8)
    {
      __src = 32;
      YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), &__src, 1uLL);
    }
    YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), "-", 1uLL);
  }
  switch(a2)
  {
    case 1:
    case 2:
    case 3:
    case 5:
      if (*(_BYTE *)(*(_QWORD *)this + 192))
        v10 = 1;
      else
        v10 = *(unsigned __int8 *)(*(_QWORD *)this + 193) != 0;
      YAML::Emitter::SpaceOrIndentTo(this, v10, v7 + v8);
      break;
    case 4:
      goto LABEL_24;
    case 6:
      if (*(_BYTE *)(*(_QWORD *)this + 192) || *(_BYTE *)(*(_QWORD *)this + 193) || *((_BYTE *)this + 64))
LABEL_24:
        YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), "\n", 1uLL);
      break;
    default:
      return;
  }
}

void YAML::Emitter::FlowMapPrepareNode(YAML::Emitter *this, unsigned int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)this;
  v6 = *(_QWORD *)(v4 + 160);
  v5 = *(_QWORD *)(v4 + 168);
  if (v6 == v5)
  {
    if ((*(_BYTE *)(v4 + 200) & 1) != 0)
    {
LABEL_11:
      YAML::Emitter::FlowMapPrepareSimpleKeyValue(this, a2);
      return;
    }
  }
  else if ((*(_BYTE *)(*(_QWORD *)(v5 - 8) + 16) & 1) != 0)
  {
    if (*(_BYTE *)(*(_QWORD *)(v5 - 8) + 24))
    {
      YAML::Emitter::FlowMapPrepareLongKeyValue(this, a2);
      return;
    }
    goto LABEL_11;
  }
  if (*(_DWORD *)(v4 + 88) == 29)
  {
    YAML::EmitterState::SetLongKey(v4);
    v6 = *(_QWORD *)(*(_QWORD *)this + 160);
    v5 = *(_QWORD *)(*(_QWORD *)this + 168);
  }
  if (v6 == v5 || !*(_BYTE *)(*(_QWORD *)(v5 - 8) + 24))
    YAML::Emitter::FlowMapPrepareSimpleKey(this, a2);
  else
    YAML::Emitter::FlowMapPrepareLongKey(this, a2);
}

void YAML::Emitter::BlockMapPrepareNode(YAML::Emitter *this, unsigned int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)this;
  v5 = *(_QWORD *)(v4 + 168);
  if (*(_QWORD *)(v4 + 160) == v5)
  {
    if ((*(_BYTE *)(v4 + 200) & 1) != 0)
    {
LABEL_13:
      YAML::Emitter::BlockMapPrepareSimpleKeyValue(this, a2);
      return;
    }
  }
  else if ((*(_BYTE *)(*(_QWORD *)(v5 - 8) + 16) & 1) != 0)
  {
    if (*(_BYTE *)(*(_QWORD *)(v5 - 8) + 24))
    {
      YAML::Emitter::BlockMapPrepareLongKeyValue(this, a2);
      return;
    }
    goto LABEL_13;
  }
  if (*(_DWORD *)(v4 + 88) == 29)
  {
    YAML::EmitterState::SetLongKey(v4);
    v4 = *(_QWORD *)this;
  }
  if ((a2 & 0xFFFFFFFD) == 4)
  {
    YAML::EmitterState::SetLongKey(v4);
    v4 = *(_QWORD *)this;
  }
  v6 = *(_QWORD *)(v4 + 168);
  if (*(_QWORD *)(v4 + 160) == v6 || !*(_BYTE *)(*(_QWORD *)(v6 - 8) + 24))
    YAML::Emitter::BlockMapPrepareSimpleKey(this, a2);
  else
    YAML::Emitter::BlockMapPrepareLongKey(this, a2);
}

void YAML::Emitter::BlockMapPrepareLongKey(YAML::Emitter *this, unsigned int a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  char __src;

  v4 = *(_QWORD *)this;
  v5 = *(_QWORD *)(*(_QWORD *)this + 168);
  if (*(_QWORD *)(*(_QWORD *)this + 160) == v5)
  {
    v6 = (_QWORD *)(v4 + 200);
    if (!a2)
      return;
  }
  else
  {
    v6 = (_QWORD *)(*(_QWORD *)(v5 - 8) + 16);
    if (!a2)
      return;
  }
  v7 = *(_QWORD *)(v4 + 184);
  if (!*(_BYTE *)(v4 + 192) && !*(_BYTE *)(v4 + 193))
  {
    if (*v6)
      YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), "\n", 1uLL);
    if (*((_BYTE *)this + 64))
      YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), "\n", 1uLL);
    while (*((_QWORD *)this + 7) < v7)
    {
      __src = 32;
      YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), &__src, 1uLL);
    }
    YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), "?", 1uLL);
  }
  if (a2 <= 5 && ((1 << a2) & 0x2E) != 0)
    YAML::Emitter::SpaceOrIndentTo(this, 1, v7 + 1);
}

void YAML::Emitter::BlockMapPrepareSimpleKey(YAML::Emitter *this, unsigned int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  _BOOL4 v10;

  v4 = *(_QWORD *)this;
  v5 = *(_QWORD *)(*(_QWORD *)this + 168);
  if (*(_QWORD *)(*(_QWORD *)this + 160) == v5)
  {
    v6 = (uint64_t *)(v4 + 200);
    if (!a2)
      return;
  }
  else
  {
    v6 = (uint64_t *)(*(_QWORD *)(v5 - 8) + 16);
    if (!a2)
      return;
  }
  v7 = *(_QWORD *)(v4 + 184);
  if (!*(_BYTE *)(v4 + 192) && !*(_BYTE *)(v4 + 193))
  {
    v8 = *v6;
    if (!*(_BYTE *)(v4 + 194) && v8 != 0)
      YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), "\n", 1uLL);
  }
  if (a2 <= 5 && ((1 << a2) & 0x2E) != 0)
  {
    if (*(_BYTE *)(*(_QWORD *)this + 192))
      v10 = 1;
    else
      v10 = *(unsigned __int8 *)(*(_QWORD *)this + 193) != 0;
    YAML::Emitter::SpaceOrIndentTo(this, v10, v7);
  }
}

void YAML::Emitter::BlockMapPrepareLongKeyValue(YAML::Emitter *this, unsigned int a2)
{
  unint64_t v4;
  char __src;

  if (a2)
  {
    v4 = *(_QWORD *)(*(_QWORD *)this + 184);
    if (!*(_BYTE *)(*(_QWORD *)this + 192) && !*(_BYTE *)(*(_QWORD *)this + 193))
    {
      YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), "\n", 1uLL);
      while (*((_QWORD *)this + 7) < v4)
      {
        __src = 32;
        YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), &__src, 1uLL);
      }
      YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), ":", 1uLL);
    }
    if (a2 <= 6)
      YAML::Emitter::SpaceOrIndentTo(this, 1, v4 + 1);
  }
}

void YAML::Emitter::BlockMapPrepareSimpleKeyValue(YAML::Emitter *this, unsigned int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)this;
  v5 = *(_QWORD *)(*(_QWORD *)this + 168);
  if (*(_QWORD *)(*(_QWORD *)this + 160) == v5)
    v6 = 0;
  else
    v6 = *(_QWORD *)(*(_QWORD *)(v5 - 8) + 8);
  v7 = *(_QWORD *)(v4 + 184);
  if (!*(_BYTE *)(v4 + 192) && !*(_BYTE *)(v4 + 193) && !*(_BYTE *)(v4 + 194))
    YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), ":", 1uLL);
  if (a2 <= 6)
  {
    if (((1 << a2) & 0x2E) != 0)
    {
      YAML::Emitter::SpaceOrIndentTo(this, 1, v6 + v7);
    }
    else if (((1 << a2) & 0x50) != 0)
    {
      YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), "\n", 1uLL);
    }
  }
}

void YAML::Emitter::SpaceOrIndentTo(YAML::Emitter *this, int a2, unint64_t a3)
{
  std::vector<char> *v6;
  unint64_t v7;
  BOOL v8;
  char __src;

  v6 = (std::vector<char> *)((char *)this + 8);
  if (*((_BYTE *)this + 64))
    YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), "\n", 1uLL);
  v7 = *((_QWORD *)this + 7);
  if (v7)
    v8 = a2 == 0;
  else
    v8 = 1;
  if (!v8)
  {
    YAML::ostream_wrapper::write(v6, " ", 1uLL);
    v7 = *((_QWORD *)this + 7);
  }
  if (v7 < a3)
  {
    do
    {
      __src = 32;
      YAML::ostream_wrapper::write(v6, &__src, 1uLL);
    }
    while (*((_QWORD *)this + 7) < a3);
  }
}

void YAML::Emitter::FlowMapPrepareLongKey(YAML::Emitter *this, unsigned int a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  const char *v8;
  uint64_t v9;
  _BOOL4 v10;
  uint64_t v11;
  _QWORD *v12;
  char __src;

  v4 = *(_QWORD *)this;
  if (*(_QWORD *)(*(_QWORD *)this + 168) - *(_QWORD *)(*(_QWORD *)this + 160) >= 0x10uLL)
    v5 = *(_QWORD *)(v4 + 184) - *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 168) - 16) + 8);
  else
    v5 = 0;
  if (!*(_BYTE *)(v4 + 192) && !*(_BYTE *)(v4 + 193) && !*(_BYTE *)(v4 + 194))
  {
    if (*((_BYTE *)this + 64))
      YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), "\n", 1uLL);
    while (*((_QWORD *)this + 7) < v5)
    {
      __src = 32;
      YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), &__src, 1uLL);
    }
    v6 = *(_QWORD *)(*(_QWORD *)this + 168);
    if (*(_QWORD *)(*(_QWORD *)this + 160) == v6)
      v7 = (_QWORD *)(*(_QWORD *)this + 200);
    else
      v7 = (_QWORD *)(*(_QWORD *)(v6 - 8) + 16);
    if (*v7)
      v8 = ", ?";
    else
      v8 = "{ ?";
    YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), v8, 3uLL);
  }
  if (a2 <= 6)
  {
    if (((1 << a2) & 0x2E) != 0)
    {
      v9 = *(_QWORD *)this;
      if (*(_BYTE *)(*(_QWORD *)this + 192) || *(_BYTE *)(v9 + 193))
      {
        v10 = 1;
      }
      else
      {
        v11 = *(_QWORD *)(v9 + 168);
        if (*(_QWORD *)(v9 + 160) == v11)
          v12 = (_QWORD *)(v9 + 200);
        else
          v12 = (_QWORD *)(*(_QWORD *)(v11 - 8) + 16);
        v10 = *v12 != 0;
      }
      YAML::Emitter::SpaceOrIndentTo(this, v10, v5);
    }
    else if (((1 << a2) & 0x50) != 0)
    {
      __assert_rtn("FlowMapPrepareLongKey", "emitter.cpp", 418, "false");
    }
  }
}

void YAML::Emitter::FlowMapPrepareSimpleKey(YAML::Emitter *this, unsigned int a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  const char *v8;
  uint64_t v9;
  _BOOL4 v10;
  uint64_t v11;
  _QWORD *v12;
  char __src;

  v4 = *(_QWORD *)this;
  if (*(_QWORD *)(*(_QWORD *)this + 168) - *(_QWORD *)(*(_QWORD *)this + 160) >= 0x10uLL)
    v5 = *(_QWORD *)(v4 + 184) - *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 168) - 16) + 8);
  else
    v5 = 0;
  if (!*(_BYTE *)(v4 + 192) && !*(_BYTE *)(v4 + 193) && !*(_BYTE *)(v4 + 194))
  {
    if (*((_BYTE *)this + 64))
      YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), "\n", 1uLL);
    while (*((_QWORD *)this + 7) < v5)
    {
      __src = 32;
      YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), &__src, 1uLL);
    }
    v6 = *(_QWORD *)(*(_QWORD *)this + 168);
    if (*(_QWORD *)(*(_QWORD *)this + 160) == v6)
      v7 = (_QWORD *)(*(_QWORD *)this + 200);
    else
      v7 = (_QWORD *)(*(_QWORD *)(v6 - 8) + 16);
    if (*v7)
      v8 = ",";
    else
      v8 = "{";
    YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), v8, 1uLL);
  }
  if (a2 <= 6)
  {
    if (((1 << a2) & 0x2E) != 0)
    {
      v9 = *(_QWORD *)this;
      if (*(_BYTE *)(*(_QWORD *)this + 192) || *(_BYTE *)(v9 + 193))
      {
        v10 = 1;
      }
      else
      {
        v11 = *(_QWORD *)(v9 + 168);
        if (*(_QWORD *)(v9 + 160) == v11)
          v12 = (_QWORD *)(v9 + 200);
        else
          v12 = (_QWORD *)(*(_QWORD *)(v11 - 8) + 16);
        v10 = *v12 != 0;
      }
      YAML::Emitter::SpaceOrIndentTo(this, v10, v5);
    }
    else if (((1 << a2) & 0x50) != 0)
    {
      __assert_rtn("FlowMapPrepareSimpleKey", "emitter.cpp", 477, "false");
    }
  }
}

void YAML::Emitter::FlowMapPrepareLongKeyValue(YAML::Emitter *this, unsigned int a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _BOOL4 v7;
  uint64_t v8;
  _QWORD *v9;
  char __src;

  v4 = *(_QWORD *)this;
  if (*(_QWORD *)(*(_QWORD *)this + 168) - *(_QWORD *)(*(_QWORD *)this + 160) >= 0x10uLL)
    v5 = *(_QWORD *)(v4 + 184) - *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 168) - 16) + 8);
  else
    v5 = 0;
  if (!*(_BYTE *)(v4 + 192) && !*(_BYTE *)(v4 + 193) && !*(_BYTE *)(v4 + 194))
  {
    if (*((_BYTE *)this + 64))
      YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), "\n", 1uLL);
    while (*((_QWORD *)this + 7) < v5)
    {
      __src = 32;
      YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), &__src, 1uLL);
    }
    YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), ":", 1uLL);
  }
  if (a2 <= 6)
  {
    if (((1 << a2) & 0x2E) != 0)
    {
      v6 = *(_QWORD *)this;
      if (*(_BYTE *)(*(_QWORD *)this + 192) || *(_BYTE *)(v6 + 193))
      {
        v7 = 1;
      }
      else
      {
        v8 = *(_QWORD *)(v6 + 168);
        if (*(_QWORD *)(v6 + 160) == v8)
          v9 = (_QWORD *)(v6 + 200);
        else
          v9 = (_QWORD *)(*(_QWORD *)(v8 - 8) + 16);
        v7 = *v9 != 0;
      }
      YAML::Emitter::SpaceOrIndentTo(this, v7, v5);
    }
    else if (((1 << a2) & 0x50) != 0)
    {
      __assert_rtn("FlowMapPrepareLongKeyValue", "emitter.cpp", 446, "false");
    }
  }
}

void YAML::Emitter::FlowMapPrepareSimpleKeyValue(YAML::Emitter *this, unsigned int a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _BOOL4 v7;
  uint64_t v8;
  _QWORD *v9;
  char __src;

  v4 = *(_QWORD *)this;
  if (*(_QWORD *)(*(_QWORD *)this + 168) - *(_QWORD *)(*(_QWORD *)this + 160) >= 0x10uLL)
    v5 = *(_QWORD *)(v4 + 184) - *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 168) - 16) + 8);
  else
    v5 = 0;
  if (!*(_BYTE *)(v4 + 192) && !*(_BYTE *)(v4 + 193) && !*(_BYTE *)(v4 + 194))
  {
    if (*((_BYTE *)this + 64))
      YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), "\n", 1uLL);
    while (*((_QWORD *)this + 7) < v5)
    {
      __src = 32;
      YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), &__src, 1uLL);
    }
    YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), ":", 1uLL);
  }
  if (a2 <= 6)
  {
    if (((1 << a2) & 0x2E) != 0)
    {
      v6 = *(_QWORD *)this;
      if (*(_BYTE *)(*(_QWORD *)this + 192) || *(_BYTE *)(v6 + 193))
      {
        v7 = 1;
      }
      else
      {
        v8 = *(_QWORD *)(v6 + 168);
        if (*(_QWORD *)(v6 + 160) == v8)
          v9 = (_QWORD *)(v6 + 200);
        else
          v9 = (_QWORD *)(*(_QWORD *)(v8 - 8) + 16);
        v7 = *v9 != 0;
      }
      YAML::Emitter::SpaceOrIndentTo(this, v7, v5);
    }
    else if (((1 << a2) & 0x50) != 0)
    {
      __assert_rtn("FlowMapPrepareSimpleKeyValue", "emitter.cpp", 505, "false");
    }
  }
}

YAML::Emitter *YAML::Emitter::Write(YAML::Emitter *a1, uint64_t a2)
{
  _BYTE *v3;
  int v5;
  std::vector<char> *v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  std::string __str;

  v3 = *(_BYTE **)a1;
  if (!**(_BYTE **)a1)
    return a1;
  if (v3[193])
  {
    std::string::basic_string[abi:ne180100]<0>(&__str, "invalid tag");
    *v3 = 0;
    std::string::operator=((std::string *)(v3 + 8), &__str);
    goto LABEL_12;
  }
  YAML::Emitter::PrepareNode(a1, 1u);
  v5 = *(_DWORD *)(a2 + 48);
  v6 = (std::vector<char> *)((char *)a1 + 8);
  if (v5 == 1)
  {
    v7 = (uint64_t *)(a2 + 24);
    v8 = 0;
  }
  else
  {
    if (v5)
    {
      if ((YAML::Utils::WriteTagWithPrefix(v6, (uint64_t *)a2, (uint64_t *)(a2 + 24)) & 1) != 0)
        goto LABEL_9;
      goto LABEL_11;
    }
    v7 = (uint64_t *)(a2 + 24);
    v8 = 1;
  }
  if ((YAML::Utils::WriteTag(v6, v7, v8) & 1) != 0)
  {
LABEL_9:
    *(_BYTE *)(*(_QWORD *)a1 + 193) = 1;
    return a1;
  }
LABEL_11:
  v9 = *(_QWORD *)a1;
  std::string::basic_string[abi:ne180100]<0>(&__str, "invalid tag");
  *(_BYTE *)v9 = 0;
  std::string::operator=((std::string *)(v9 + 8), &__str);
LABEL_12:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BFC04344(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *YAML::Emitter::SetLocalIndent(uint64_t *a1, int *a2)
{
  uint64_t v3;

  v3 = *a2;
  if (v3 >= 2)
    YAML::EmitterState::_Set<unsigned long>(*a1, (_QWORD *)(*a1 + 56), v3, 0);
  return a1;
}

uint64_t *YAML::Emitter::SetLocalPrecision(uint64_t *a1, unsigned int *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *a2;
  if (v4 <= 9)
    YAML::EmitterState::_Set<unsigned long>(*a1, (_QWORD *)(*a1 + 96), v4, 0);
  v5 = a2[1];
  if (v5 <= 0x11)
    YAML::EmitterState::_Set<unsigned long>(*a1, (_QWORD *)(*a1 + 104), v5, 0);
  return a1;
}

uint64_t YAML::Emitter::CanEmitNewline(YAML::Emitter *this)
{
  return 1;
}

_QWORD *YAML::Emitter::PrepareIntegralStream(_QWORD *result, uint64_t a2)
{
  int v3;
  int v4;
  uint64_t v5;

  v3 = *(_DWORD *)(*result + 52);
  switch(v3)
  {
    case 18:
      result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)(a2 + 16), (uint64_t)"0", 1);
      v4 = 64;
      break;
    case 17:
      result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)(a2 + 16), (uint64_t)"0x", 2);
      v4 = 8;
      break;
    case 16:
      v4 = 2;
      break;
    default:
      __assert_rtn("PrepareIntegralStream", "emitter.cpp", 666, "false");
  }
  v5 = a2 + 16 + *(_QWORD *)(*(_QWORD *)(a2 + 16) - 24);
  *(_DWORD *)(v5 + 8) = *(_DWORD *)(v5 + 8) & 0xFFFFFFB5 | v4;
  return result;
}

uint64_t **YAML::Emitter::StartedScalar(YAML::Emitter *this)
{
  uint64_t v1;

  v1 = *(_QWORD *)this;
  YAML::EmitterState::StartedNode(*(_QWORD *)this);
  return YAML::SettingChanges::clear((uint64_t **)(v1 + 112));
}

uint64_t YAML::Emitter::Write(uint64_t a1, char *a2)
{
  uint64_t v3;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;

  v3 = *(_QWORD *)a1;
  if (**(_BYTE **)a1)
  {
    v6 = *(_DWORD *)(v3 + 32);
    v5 = *(_DWORD *)(v3 + 36);
    v8 = *(_QWORD *)(v3 + 160);
    v7 = *(_QWORD *)(v3 + 168);
    if (v8 == v7)
      v9 = 0;
    else
      v9 = *(_DWORD *)(*(_QWORD *)(v7 - 8) + 4);
    v10 = YAML::Utils::ComputeStringFormat(a2, v5, v9, v6 == 4);
    if (v10 == 3)
    {
      YAML::EmitterState::_Set<YAML::EMITTER_MANIP>(*(_QWORD *)a1, (_DWORD *)(*(_QWORD *)a1 + 88), 29, 0);
      YAML::Emitter::PrepareNode((YAML::Emitter *)a1, 2u);
      YAML::Utils::WriteLiteralString((std::vector<char> *)(a1 + 8), (unsigned __int8 *)a2, (char *)(*(_QWORD *)(*(_QWORD *)a1 + 56) + *(_QWORD *)(*(_QWORD *)a1 + 184)));
    }
    else
    {
      v11 = v10;
      YAML::Emitter::PrepareNode((YAML::Emitter *)a1, 2u);
      switch(v11)
      {
        case 2:
          YAML::Utils::WriteDoubleQuotedString((std::vector<char> *)(a1 + 8), (unsigned __int8 *)a2, v6 == 4);
          break;
        case 1:
          YAML::Utils::WriteSingleQuotedString((std::vector<char> *)(a1 + 8), (unsigned __int8 *)a2);
          break;
        case 0:
          YAML::ostream_wrapper::write((std::vector<char> *)(a1 + 8), (const void **)a2);
          break;
      }
    }
    v12 = *(_QWORD *)a1;
    YAML::EmitterState::StartedNode(*(_QWORD *)a1);
    YAML::SettingChanges::clear((uint64_t **)(v12 + 112));
  }
  return a1;
}

uint64_t YAML::Emitter::GetFloatPrecision(YAML::Emitter *this)
{
  return *(_QWORD *)(*(_QWORD *)this + 96);
}

uint64_t YAML::Emitter::GetDoublePrecision(YAML::Emitter *this)
{
  return *(_QWORD *)(*(_QWORD *)this + 104);
}

const char *YAML::Emitter::ComputeFullBoolName(YAML::Emitter *this, int a2)
{
  uint64_t v2;
  int v3;
  const char *v4;
  const char *v5;
  int v6;

  v2 = *(_QWORD *)this;
  if (*(_DWORD *)(*(_QWORD *)this + 44) == 15)
  {
    v3 = *(_DWORD *)(v2 + 48);
    goto LABEL_3;
  }
  v6 = *(_DWORD *)(v2 + 40);
  v3 = *(_DWORD *)(v2 + 48);
  switch(v6)
  {
    case 10:
      switch(v3)
      {
        case 13:
          v4 = "Off";
          v5 = "On";
          break;
        case 12:
          v4 = "off";
          v5 = "on";
          break;
        case 11:
          v4 = "OFF";
          v5 = "ON";
          goto LABEL_22;
        default:
          goto LABEL_21;
      }
      break;
    case 9:
      switch(v3)
      {
        case 13:
          v4 = "False";
          v5 = "True";
          break;
        case 12:
          v4 = "false";
          v5 = "true";
          break;
        case 11:
          v4 = "FALSE";
          v5 = "TRUE";
          goto LABEL_22;
        default:
          goto LABEL_21;
      }
      break;
    case 8:
LABEL_3:
      switch(v3)
      {
        case 13:
          v4 = "No";
          v5 = "Yes";
          goto LABEL_22;
        case 12:
          v4 = "no";
          v5 = "yes";
          goto LABEL_22;
        case 11:
          v4 = "NO";
          v5 = "YES";
          goto LABEL_22;
      }
      goto LABEL_21;
    default:
LABEL_21:
      v4 = "n";
      v5 = "y";
      break;
  }
LABEL_22:
  if (a2)
    return v5;
  else
    return v4;
}

YAML::Emitter *YAML::Emitter::Write(YAML::Emitter *this, int a2)
{
  char *v4;
  uint64_t v5;
  void *__p[2];
  char v8;

  if (**(_BYTE **)this)
  {
    YAML::Emitter::PrepareNode(this, 2u);
    v4 = (char *)YAML::Emitter::ComputeFullBoolName(this, a2);
    if (*(_DWORD *)(*(_QWORD *)this + 44) == 15)
    {
      LOBYTE(__p[0]) = *v4;
      YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), (const char *)__p, 1uLL);
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(__p, v4);
      YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), (const void **)__p);
      if (v8 < 0)
        operator delete(__p[0]);
    }
    v5 = *(_QWORD *)this;
    YAML::EmitterState::StartedNode(*(_QWORD *)this);
    YAML::SettingChanges::clear((uint64_t **)(v5 + 112));
  }
  return this;
}

void sub_1BFC04824(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

YAML::Emitter *YAML::Emitter::Write(YAML::Emitter *this, YAML::ostream_wrapper *a2)
{
  uint64_t v4;

  if (**(_BYTE **)this)
  {
    YAML::Emitter::PrepareNode(this, 2u);
    YAML::Utils::WriteChar((std::vector<char> *)((char *)this + 8), a2);
    v4 = *(_QWORD *)this;
    YAML::EmitterState::StartedNode(*(_QWORD *)this);
    YAML::SettingChanges::clear((uint64_t **)(v4 + 112));
  }
  return this;
}

uint64_t *YAML::Emitter::Write(uint64_t *a1, unsigned __int8 *a2)
{
  uint64_t v3;
  BOOL v6;
  uint64_t v7;
  std::string __str;

  v3 = *a1;
  if (*(_BYTE *)*a1)
  {
    if (*(_BYTE *)(v3 + 192) || *(_BYTE *)(v3 + 193))
    {
      std::string::basic_string[abi:ne180100]<0>(&__str, "invalid alias");
      *(_BYTE *)v3 = 0;
      std::string::operator=((std::string *)(v3 + 8), &__str);
    }
    else
    {
      YAML::Emitter::PrepareNode((YAML::Emitter *)a1, 2u);
      YAML::ostream_wrapper::write((std::vector<char> *)(a1 + 1), "*", 1uLL);
      v7 = *a1;
      if (v6)
      {
        YAML::EmitterState::StartedNode(*a1);
        YAML::SettingChanges::clear((uint64_t **)(v7 + 112));
        return a1;
      }
      std::string::basic_string[abi:ne180100]<0>(&__str, "invalid alias");
      *(_BYTE *)v7 = 0;
      std::string::operator=((std::string *)(v7 + 8), &__str);
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
  }
  return a1;
}

{
  uint64_t v3;
  BOOL v5;
  uint64_t v6;
  std::string __str;

  v3 = *a1;
  if (*(_BYTE *)*a1)
  {
    if (*(_BYTE *)(v3 + 192))
    {
      std::string::basic_string[abi:ne180100]<0>(&__str, "invalid anchor");
      *(_BYTE *)v3 = 0;
      std::string::operator=((std::string *)(v3 + 8), &__str);
    }
    else
    {
      YAML::Emitter::PrepareNode((YAML::Emitter *)a1, 1u);
      YAML::ostream_wrapper::write((std::vector<char> *)(a1 + 1), "&", 1uLL);
      v6 = *a1;
      if (v5)
      {
        *(_BYTE *)(v6 + 192) = 1;
        return a1;
      }
      std::string::basic_string[abi:ne180100]<0>(&__str, "invalid anchor");
      *(_BYTE *)v6 = 0;
      std::string::operator=((std::string *)(v6 + 8), &__str);
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
  }
  return a1;
}

{
  uint64_t v4;
  uint64_t v5;
  char __src;

  if (*(_BYTE *)*a1)
  {
    YAML::Emitter::PrepareNode((YAML::Emitter *)a1, 0);
    v4 = *a1;
    if (a1[7])
    {
      v5 = *(_QWORD *)(v4 + 64);
      if (v5)
      {
        do
        {
          __src = 32;
          YAML::ostream_wrapper::write((std::vector<char> *)(a1 + 1), &__src, 1uLL);
          --v5;
        }
        while (v5);
        v4 = *a1;
      }
    }
    YAML::Utils::WriteComment((uint64_t)(a1 + 1), a2, *(_QWORD *)(v4 + 72));
    *(_BYTE *)(*a1 + 194) = 1;
  }
  return a1;
}

void sub_1BFC0498C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1BFC04A8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *YAML::Emitter::Write(uint64_t *a1)
{
  uint64_t v2;

  if (*(_BYTE *)*a1)
  {
    YAML::Emitter::PrepareNode((YAML::Emitter *)a1, 2u);
    YAML::ostream_wrapper::write((std::vector<char> *)(a1 + 1), "~", 1uLL);
    v2 = *a1;
    YAML::EmitterState::StartedNode(*a1);
    YAML::SettingChanges::clear((uint64_t **)(v2 + 112));
  }
  return a1;
}

uint64_t *YAML::Emitter::Write(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  void *v6[2];
  char v7;
  std::string v8;
  void *__p;
  char v10;
  __int128 v11;
  char v12;

  std::string::basic_string[abi:ne180100]<0>(v6, "binary");
  std::string::basic_string[abi:ne180100]<0>(&v11, "");
  YAML::_Tag::_Tag(&v8, &v11, (__int128 *)v6, 2);
  if (v12 < 0)
    operator delete((void *)v11);
  YAML::Emitter::Write((YAML::Emitter *)a1, (uint64_t)&v8);
  if (v10 < 0)
    operator delete(__p);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8.__r_.__value_.__l.__data_);
  if (v7 < 0)
    operator delete(v6[0]);
  if (*(_BYTE *)*a1)
  {
    YAML::Emitter::PrepareNode((YAML::Emitter *)a1, 2u);
    YAML::Utils::WriteBinary((std::vector<char> *)(a1 + 1), a2);
    v4 = *a1;
    YAML::EmitterState::StartedNode(*a1);
    YAML::SettingChanges::clear((uint64_t **)(v4 + 112));
  }
  return a1;
}

void sub_1BFC04C9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  std::pair<std::string const,std::string>::~pair((uint64_t)&a16);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

siri::dialogengine::RandomNumberGenerator *siri::dialogengine::RandomNumberGenerator::RandomNumberGenerator(siri::dialogengine::RandomNumberGenerator *this, unsigned int a2)
{
  unsigned int v2;
  uint64_t v4;
  uint64_t i;
  int v6;
  std::random_device v8;
  std::string __token;

  v2 = a2;
  if (!a2)
  {
    std::string::basic_string[abi:ne180100]<0>(&__token, "/dev/urandom");
    std::random_device::random_device(&v8, &__token);
    if (SHIBYTE(__token.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__token.__r_.__value_.__l.__data_);
    v2 = MEMORY[0x1C3B8D728](&v8);
    std::random_device::~random_device(&v8);
  }
  *(_DWORD *)this = v2;
  *((_DWORD *)this + 2) = v2;
  v4 = 1;
  for (i = 3; i != 626; ++i)
  {
    v6 = 1812433253 * (v2 ^ (v2 >> 30));
    v2 = v6 + v4;
    *((_DWORD *)this + i) = i + v6 - 2;
    ++v4;
  }
  *((_QWORD *)this + 313) = 0;
  return this;
}

void sub_1BFC04D94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, std::random_device a10, std::random_device __p, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  std::random_device::~random_device(&a10);
  _Unwind_Resume(a1);
}

unint64_t siri::dialogengine::RandomNumberGenerator::GenerateRandomNumber(siri::dialogengine::RandomNumberGenerator *this, uint64_t a2)
{
  char *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t result;
  _BYTE v8[64];

  if (!a2)
    return 0;
  v3 = (char *)this + 8;
  v4 = a2 + 1;
  if (a2 == -1)
  {
    std::__independent_bits_engine<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>,unsigned long>::__independent_bits_engine((uint64_t)v8, (uint64_t)v3, 0x40uLL);
    return std::__independent_bits_engine<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>,unsigned long>::__eval((uint64_t)v8);
  }
  else
  {
    v5 = __clz(v4);
    v6 = 63;
    if (((v4 << v5) & 0x7FFFFFFFFFFFFFFFLL) != 0)
      v6 = 64;
    std::__independent_bits_engine<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>,unsigned long>::__independent_bits_engine((uint64_t)v8, (uint64_t)v3, v6 - v5);
    do
      result = std::__independent_bits_engine<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>,unsigned long>::__eval((uint64_t)v8);
    while (result >= v4);
  }
  return result;
}

uint64_t std::__independent_bits_engine<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>,unsigned long>::__independent_bits_engine(uint64_t result, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unsigned int v6;
  unsigned int v7;

  *(_QWORD *)result = a2;
  *(_QWORD *)(result + 8) = a3;
  if ((a3 & 0x1F) != 0)
    v3 = (a3 >> 5) + 1;
  else
    v3 = a3 >> 5;
  v4 = a3 / v3;
  *(_QWORD *)(result + 16) = a3 / v3;
  *(_QWORD *)(result + 24) = v3;
  v5 = (-1 << (a3 / v3)) & 0x100000000;
  if (a3 / v3 >= 0x40)
    v5 = 0;
  *(_QWORD *)(result + 40) = v5;
  if ((v5 ^ 0x100000000) > v5 / v3)
  {
    ++v3;
    v4 = a3 / v3;
    *(_QWORD *)(result + 16) = a3 / v3;
    *(_QWORD *)(result + 24) = v3;
    if (a3 / v3 > 0x3F)
    {
      *(_QWORD *)(result + 32) = v3 - a3 + (v3 << 6);
      *(_QWORD *)(result + 40) = 0;
      LOBYTE(v4) = 64;
      goto LABEL_15;
    }
    *(_QWORD *)(result + 40) = (-1 << v4) & 0x100000000;
  }
  *(_QWORD *)(result + 32) = v3 + a3 / v3 * v3 - a3;
  if (v4 >= 0x3F)
  {
LABEL_15:
    *(_QWORD *)(result + 48) = 0;
    v6 = -1;
    *(_DWORD *)(result + 56) = 0xFFFFFFFF >> -(char)v4;
    goto LABEL_16;
  }
  *(_QWORD *)(result + 48) = 0x80000000uLL >> v4 << (v4 + 1);
  v6 = -1;
  v7 = 0xFFFFFFFF >> -(char)v4;
  if (!v4)
    v7 = 0;
  *(_DWORD *)(result + 56) = v7;
  if (v4 <= 0x1E)
    v6 = 0xFFFFFFFF >> ~(_BYTE)v4;
LABEL_16:
  *(_DWORD *)(result + 60) = v6;
  return result;
}

uint64_t std::__independent_bits_engine<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>,unsigned long>::__eval(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v8;
  unint64_t v9;
  uint64_t v10;

  if (*(_QWORD *)(a1 + 32))
  {
    v2 = 0;
    v3 = 0;
    do
    {
      do
        v4 = std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(*(std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> **)a1);
      while (*(_QWORD *)(a1 + 40) <= (unint64_t)v4);
      v5 = *(_QWORD *)(a1 + 16);
      if (v5 >= 0x40)
        v6 = 0;
      else
        v6 = v2 << v5;
      v2 = v6 + (*(_DWORD *)(a1 + 56) & v4);
      ++v3;
      v7 = *(_QWORD *)(a1 + 32);
    }
    while (v3 < v7);
  }
  else
  {
    v2 = 0;
    v7 = 0;
  }
  for (; v7 < *(_QWORD *)(a1 + 24); ++v7)
  {
    do
      v8 = std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(*(std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> **)a1);
    while (*(_QWORD *)(a1 + 48) <= (unint64_t)v8);
    v9 = *(_QWORD *)(a1 + 16);
    if (v9 >= 0x3F)
      v10 = 0;
    else
      v10 = v2 << (v9 + 1);
    v2 = v10 + (*(_DWORD *)(a1 + 60) & v8);
  }
  return v2;
}

std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *this)
{
  size_t i;
  size_t v2;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v3;

  i = this->__i_;
  v2 = (i + 1) % 0x270;
  v3 = this->__x_[(i + 397) % 0x270] ^ ((this->__x_[v2] & 0x7FFFFFFE | this->__x_[i] & 0x80000000) >> 1) ^ ((int)(this->__x_[v2] << 31) >> 31) & 0x9908B0DF;
  this->__x_[i] = v3;
  this->__i_ = v2;
  LODWORD(i) = ((v3 ^ (v3 >> 11)) << 7) & 0x9D2C5680 ^ v3 ^ (v3 >> 11);
  return ((_DWORD)i << 15) & 0xEFC60000 ^ i ^ ((((_DWORD)i << 15) & 0xEFC60000 ^ i) >> 18);
}

uint64_t siri::dialogengine::RandomNumberGenerator::GetSeed(siri::dialogengine::RandomNumberGenerator *this)
{
  return *(unsigned int *)this;
}

void InitDefaultsscc_info_VisualProperty_VisualProperty_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/VisualProperty.pb.cc", a4);
  SnippetUI::VisualProperty::VisualProperty((SnippetUI::VisualProperty *)&SnippetUI::_VisualProperty_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_VisualProperty_default_instance_, v4);
  qword_1ED1D49D8 = (uint64_t)&SnippetUI::_ActionProperty_default_instance_;
  unk_1ED1D49E0 = &SnippetUI::_ActionProperty_default_instance_;
}

SnippetUI::VisualProperty *SnippetUI::VisualProperty::VisualProperty(SnippetUI::VisualProperty *this)
{
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_QWORD *)this = &off_1E7937908;
  *((_DWORD *)this + 15) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  if (atomic_load(scc_info_VisualProperty_VisualProperty_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_VisualProperty_VisualProperty_2eproto);
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_WORD *)this + 28) = 0;
  return this;
}

void sub_1BFC0517C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t *v2;

  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((google::protobuf::internal::RepeatedPtrFieldBase *)(v1 + 16));
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v2);
  _Unwind_Resume(a1);
}

void SnippetUI::VisualProperty::~VisualProperty(SnippetUI::VisualProperty *this)
{
  SnippetUI::VisualProperty::~VisualProperty(this);
  JUMPOUT(0x1C3B8D890);
}

{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1E7937908;
  if (this != (SnippetUI::VisualProperty *)&SnippetUI::_VisualProperty_default_instance_)
  {
    v2 = *((_QWORD *)this + 5);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    v3 = *((_QWORD *)this + 6);
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((SnippetUI::VisualProperty *)((char *)this + 16));
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

SnippetUI::VisualProperty *SnippetUI::VisualProperty::New(SnippetUI::VisualProperty *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::VisualProperty>(0);
}

SnippetUI::VisualProperty *SnippetUI::VisualProperty::New(SnippetUI::VisualProperty *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::VisualProperty>(a2);
}

void SnippetUI::VisualProperty::Clear(SnippetUI::VisualProperty *this)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char v5;

  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::VisualElement>::TypeHandler>((uint64_t)this + 16);
  v2 = *((_QWORD *)this + 5);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)this + 5) = 0;
  v3 = *((_QWORD *)this + 6);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v5 = *((_BYTE *)this + 8);
  v4 = (char *)this + 8;
  *((_QWORD *)v4 + 5) = 0;
  *((_WORD *)v4 + 24) = 0;
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoClear((google::protobuf::internal::InternalMetadataWithArena *)v4);
}

uint64_t SnippetUI::VisualProperty::IsInitialized(SnippetUI::VisualProperty *this)
{
  return 1;
}

char *SnippetUI::VisualProperty::ByteSizeLong(SnippetUI::VisualProperty *this)
{
  uint64_t v2;
  uint64_t v3;
  SnippetUI::ImageElement ***v4;
  uint64_t v5;
  SnippetUI::ImageElement **v6;
  char *v7;
  SnippetUI::ActionProperty *v8;
  char *v9;
  SnippetUI::ActionProperty *v10;
  char *v11;
  uint64_t v12;
  const google::protobuf::UnknownFieldSet *v13;

  v2 = *((int *)this + 6);
  v3 = *((_QWORD *)this + 4);
  if (v3)
    v4 = (SnippetUI::ImageElement ***)(v3 + 8);
  else
    v4 = 0;
  if ((_DWORD)v2)
  {
    v5 = 8 * v2;
    do
    {
      v6 = *v4++;
      v7 = SnippetUI::VisualElement::ByteSizeLong(v6);
      v2 += (uint64_t)&v7[(9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6];
      v5 -= 8;
    }
    while (v5);
  }
  else
  {
    v2 = 0;
  }
  if (this != (SnippetUI::VisualProperty *)&SnippetUI::_VisualProperty_default_instance_)
  {
    v8 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 5);
    if (v8)
    {
      v9 = SnippetUI::ActionProperty::ByteSizeLong(v8);
      v2 += (uint64_t)&v9[((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6) + 1];
    }
    v10 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 6);
    if (v10)
    {
      v11 = SnippetUI::ActionProperty::ByteSizeLong(v10);
      v2 += (uint64_t)&v11[((9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6) + 1];
    }
  }
  if (*((_BYTE *)this + 56))
    v12 = v2 + 2;
  else
    v12 = v2;
  if (*((_BYTE *)this + 57))
    v13 = (const google::protobuf::UnknownFieldSet *)(v12 + 2);
  else
    v13 = (const google::protobuf::UnknownFieldSet *)v12;
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::VisualProperty *)((char *)this + 8), v13, (_DWORD *)this + 15);
  *((_DWORD *)this + 15) = (_DWORD)v13;
  return (char *)v13;
}

uint64_t SnippetUI::VisualProperty::GetCachedSize(SnippetUI::VisualProperty *this)
{
  return *((unsigned int *)this + 15);
}

google::protobuf::internal *SnippetUI::VisualProperty::_InternalParse(SnippetUI::VisualProperty *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  unsigned int *v5;
  uint64_t *v6;
  google::protobuf::internal::ParseContext *v7;
  google::protobuf::internal *TagFallback;
  char *v9;
  char *v10;
  google::protobuf::internal *v11;
  int *v12;
  uint64_t v13;
  int v14;
  SnippetUI::VisualElement *v15;
  uint64_t v16;
  uint64_t v17;
  google::protobuf::internal *v18;
  unint64_t v19;
  int v20;
  SnippetUI::ActionProperty *v21;
  char *v22;
  google::protobuf::internal *v23;
  unint64_t v24;
  int v25;
  BOOL v26;
  google::protobuf::internal *v27;
  uint64_t v28;
  google::protobuf::internal *v29;
  uint64_t v30;
  google::protobuf::internal *v32;

  v32 = a2;
  v5 = (unsigned int *)((char *)this + 16);
  v6 = (uint64_t *)((char *)this + 8);
LABEL_2:
  while (2)
  {
    if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v32, *((_DWORD *)a3 + 23)) & 1) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v32 + 1);
      v9 = (char *)*(unsigned __int8 *)v32;
      if (*(char *)v32 < 0)
      {
        v9 = (char *)(v9 + (*(unsigned __int8 *)TagFallback << 7) - 128);
        if (*(char *)TagFallback < 0)
        {
          TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v32, v9);
          v32 = TagFallback;
          if (!TagFallback)
            return TagFallback;
LABEL_7:
          switch(v9 >> 3)
          {
            case 1u:
              if (v9 != 10)
                goto LABEL_39;
              v10 = (char *)TagFallback - 1;
              break;
            case 2u:
              if (v9 != 16)
                goto LABEL_39;
              v18 = (google::protobuf::internal *)((char *)TagFallback + 1);
              v19 = *(unsigned __int8 *)TagFallback;
              if ((*(char *)TagFallback & 0x80000000) == 0)
                goto LABEL_25;
              v20 = *(char *)v18;
              v19 = v19 + (v20 << 7) - 128;
              if (v20 < 0)
              {
                v27 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(TagFallback, v19);
                v32 = v27;
                *((_BYTE *)this + 56) = v28 != 0;
                if (!v27)
                  return 0;
              }
              else
              {
                v18 = (google::protobuf::internal *)((char *)TagFallback + 2);
LABEL_25:
                v32 = v18;
                *((_BYTE *)this + 56) = v19 != 0;
              }
              continue;
            case 3u:
              if (v9 != 26)
                goto LABEL_39;
              v21 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 5);
              if (v21)
                goto LABEL_33;
              v21 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
              *((_QWORD *)this + 5) = v21;
              goto LABEL_32;
            case 4u:
              if (v9 != 34)
                goto LABEL_39;
              v21 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 6);
              if (v21)
                goto LABEL_33;
              v21 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
              *((_QWORD *)this + 6) = v21;
LABEL_32:
              TagFallback = v32;
LABEL_33:
              v22 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::ActionProperty>(a3, v21, TagFallback);
              goto LABEL_44;
            case 5u:
              if (v9 != 40)
                goto LABEL_39;
              v23 = (google::protobuf::internal *)((char *)TagFallback + 1);
              v24 = *(unsigned __int8 *)TagFallback;
              if ((*(char *)TagFallback & 0x80000000) == 0)
                goto LABEL_38;
              v25 = *(char *)v23;
              v24 = v24 + (v25 << 7) - 128;
              if (v25 < 0)
              {
                v29 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(TagFallback, v24);
                v32 = v29;
                *((_BYTE *)this + 57) = v30 != 0;
                if (!v29)
                  return 0;
              }
              else
              {
                v23 = (google::protobuf::internal *)((char *)TagFallback + 2);
LABEL_38:
                v32 = v23;
                *((_BYTE *)this + 57) = v24 != 0;
              }
              continue;
            default:
LABEL_39:
              if ((_DWORD)v9)
                v26 = (v9 & 7) == 4;
              else
                v26 = 1;
              if (v26)
              {
                *((_DWORD *)a3 + 20) = (_DWORD)v9 - 1;
                return TagFallback;
              }
              v22 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v9, v6, TagFallback, a3, v7);
LABEL_44:
              v32 = (google::protobuf::internal *)v22;
              if (v22)
                continue;
              return 0;
          }
          while (1)
          {
            v11 = (google::protobuf::internal *)(v10 + 1);
            v32 = (google::protobuf::internal *)(v10 + 1);
            v12 = (int *)*((_QWORD *)this + 4);
            if (!v12)
              break;
            v13 = *((int *)this + 6);
            v14 = *v12;
            if ((int)v13 >= *v12)
            {
              if (v14 == *((_DWORD *)this + 7))
              {
LABEL_15:
                google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v5, v14 + 1);
                v12 = (int *)*((_QWORD *)this + 4);
                v14 = *v12;
              }
              *v12 = v14 + 1;
              v15 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::VisualElement>(*((google::protobuf::internal::ArenaImpl **)this
                                                                                          + 2));
              v16 = *((_QWORD *)this + 4);
              v17 = *((int *)this + 6);
              *((_DWORD *)this + 6) = v17 + 1;
              *(_QWORD *)(v16 + 8 * v17 + 8) = v15;
              v11 = v32;
              goto LABEL_17;
            }
            *((_DWORD *)this + 6) = v13 + 1;
            v15 = *(SnippetUI::VisualElement **)&v12[2 * v13 + 2];
LABEL_17:
            v10 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::VisualElement>(a3, v15, v11);
            v32 = (google::protobuf::internal *)v10;
            if (!v10)
              return 0;
            if (*(_QWORD *)a3 <= (unint64_t)v10 || *v10 != 10)
              goto LABEL_2;
          }
          v14 = *((_DWORD *)this + 7);
          goto LABEL_15;
        }
        TagFallback = (google::protobuf::internal *)((char *)v32 + 2);
      }
      v32 = TagFallback;
      goto LABEL_7;
    }
    return v32;
  }
}

const google::protobuf::UnknownFieldSet *SnippetUI::VisualProperty::InternalSerializeWithCachedSizesToArray(SnippetUI::VisualProperty *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  int v7;
  int v8;
  std::string *v9;
  std::string *v10;
  SnippetUI::VisualElement *v11;
  unsigned int v12;
  char *v13;
  unsigned int v14;
  _BYTE *v15;
  _BYTE *v16;
  unsigned int v17;
  unsigned int v18;
  char v19;
  SnippetUI::ActionProperty *v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  google::protobuf::UnknownFieldSet *v24;
  _BYTE *v25;
  _BYTE *v26;
  unsigned int v27;
  unsigned int v28;
  SnippetUI::ActionProperty *v29;
  unsigned int v30;
  google::protobuf::UnknownFieldSet *v31;
  unsigned int v32;
  _BYTE *v33;
  _BYTE *v34;
  unsigned int v35;
  unsigned int v36;
  char v37;
  uint64_t v38;
  char v40;
  std::string v41[2];

  v7 = *((_DWORD *)this + 6);
  if (v7)
  {
    v8 = 0;
    while ((unint64_t)a2 < *(_QWORD *)a3)
    {
      if (v8 < 0)
        goto LABEL_5;
LABEL_6:
      if (*((_DWORD *)this + 6) <= v8)
      {
        google::protobuf::internal::LogMessage::LogMessage((uint64_t)v41, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1539);
        v10 = google::protobuf::internal::LogMessage::operator<<(v41, "CHECK failed: (index) < (current_size_): ");
        google::protobuf::internal::LogFinisher::operator=((int)&v40, (const char **)&v10->__r_.__value_.__l.__data_);
        google::protobuf::internal::LogMessage::~LogMessage((void **)&v41[0].__r_.__value_.__l.__data_);
      }
      v11 = *(SnippetUI::VisualElement **)(*((_QWORD *)this + 4) + 8 * v8 + 8);
      *(_BYTE *)a2 = 10;
      v12 = *((_DWORD *)v11 + 6);
      if (v12 > 0x7F)
      {
        *((_BYTE *)a2 + 1) = v12 | 0x80;
        v14 = v12 >> 7;
        if (v12 >> 14)
        {
          v15 = (char *)a2 + 2;
          do
          {
            v16 = v15;
            *v15++ = v14 | 0x80;
            v17 = v14 >> 7;
            v18 = v14 >> 14;
            v14 >>= 7;
          }
          while (v18);
          v13 = v16 + 2;
          *v15 = v17;
        }
        else
        {
          *((_BYTE *)a2 + 2) = v14;
          v13 = (char *)a2 + 3;
        }
      }
      else
      {
        *((_BYTE *)a2 + 1) = v12;
        v13 = (char *)a2 + 2;
      }
      a2 = SnippetUI::VisualElement::InternalSerializeWithCachedSizesToArray(v11, v13, a3, a4);
      if (++v8 == v7)
        goto LABEL_19;
    }
    a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_6;
LABEL_5:
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v41, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1538);
    v9 = google::protobuf::internal::LogMessage::operator<<(v41, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v40, (const char **)&v9->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v41[0].__r_.__value_.__l.__data_);
    goto LABEL_6;
  }
LABEL_19:
  if (*((_BYTE *)this + 56))
  {
    if ((unint64_t)a2 >= *(_QWORD *)a3)
    {
      a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      v19 = *((_BYTE *)this + 56);
    }
    else
    {
      v19 = 1;
    }
    *(_BYTE *)a2 = 16;
    *((_BYTE *)a2 + 1) = v19;
    a2 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 2);
  }
  if (this != (SnippetUI::VisualProperty *)&SnippetUI::_VisualProperty_default_instance_)
  {
    v20 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 5);
    if (!v20)
      goto LABEL_36;
    if ((unint64_t)a2 >= *(_QWORD *)a3)
    {
      a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      v20 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 5);
    }
    *(_BYTE *)a2 = 26;
    v21 = *((_DWORD *)v20 + 12);
    if (v21 > 0x7F)
    {
      *((_BYTE *)a2 + 1) = v21 | 0x80;
      v23 = v21 >> 7;
      if (v21 >> 14)
      {
        v25 = (char *)a2 + 2;
        do
        {
          v26 = v25;
          *v25++ = v23 | 0x80;
          v27 = v23 >> 7;
          v28 = v23 >> 14;
          v23 >>= 7;
        }
        while (v28);
        v24 = (google::protobuf::UnknownFieldSet *)(v26 + 2);
        *v25 = v27;
        goto LABEL_35;
      }
      *((_BYTE *)a2 + 2) = v23;
      v22 = 3;
    }
    else
    {
      *((_BYTE *)a2 + 1) = v21;
      v22 = 2;
    }
    v24 = (google::protobuf::UnknownFieldSet *)((char *)a2 + v22);
LABEL_35:
    a2 = SnippetUI::ActionProperty::InternalSerializeWithCachedSizesToArray(v20, v24, a3, a4);
LABEL_36:
    v29 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 6);
    if (v29)
    {
      if ((unint64_t)a2 >= *(_QWORD *)a3)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
        v29 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 6);
      }
      *(_BYTE *)a2 = 34;
      v30 = *((_DWORD *)v29 + 12);
      if (v30 > 0x7F)
      {
        *((_BYTE *)a2 + 1) = v30 | 0x80;
        v32 = v30 >> 7;
        if (v30 >> 14)
        {
          v33 = (char *)a2 + 2;
          do
          {
            v34 = v33;
            *v33++ = v32 | 0x80;
            v35 = v32 >> 7;
            v36 = v32 >> 14;
            v32 >>= 7;
          }
          while (v36);
          v31 = (google::protobuf::UnknownFieldSet *)(v34 + 2);
          *v33 = v35;
        }
        else
        {
          *((_BYTE *)a2 + 2) = v32;
          v31 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 3);
        }
      }
      else
      {
        *((_BYTE *)a2 + 1) = v30;
        v31 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 2);
      }
      a2 = SnippetUI::ActionProperty::InternalSerializeWithCachedSizesToArray(v29, v31, a3, a4);
    }
  }
  if (*((_BYTE *)this + 57))
  {
    if ((unint64_t)a2 >= *(_QWORD *)a3)
    {
      a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      v37 = *((_BYTE *)this + 57);
    }
    else
    {
      v37 = 1;
    }
    *(_BYTE *)a2 = 40;
    *((_BYTE *)a2 + 1) = v37;
    a2 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 2);
  }
  v38 = *((_QWORD *)this + 1);
  if ((v38 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v38 & 0xFFFFFFFFFFFFFFFELL), a2, a3, a4);
  else
    return a2;
}

void sub_1BFC05A28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void SnippetUI::VisualProperty::CopyFrom(int **this, int **a2)
{
  if (a2 != this)
  {
    SnippetUI::VisualProperty::Clear((SnippetUI::VisualProperty *)this);
    SnippetUI::VisualProperty::MergeFrom(this, a2);
  }
}

{
  if (a2 != this)
  {
    SnippetUI::VisualProperty::Clear((SnippetUI::VisualProperty *)this);
    SnippetUI::VisualProperty::MergeFrom(this, a2);
  }
}

void SnippetUI::VisualProperty::MergeFrom(int **this, int **lpsrc)
{
  std::string *v4;
  int **v5;
  google::protobuf::Message *v6;
  char v7;
  std::string v8[2];

  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/VisualProperty.pb.cc", 372);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5)
    SnippetUI::VisualProperty::MergeFrom(this, v5);
  else
    google::protobuf::internal::ReflectionOps::Merge((google::protobuf::internal::ReflectionOps *)lpsrc, (const google::protobuf::Message *)this, v6);
}

void sub_1BFC05B28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::VisualProperty::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 60) = a2;
  return this;
}

uint64_t SnippetUI::VisualProperty::GetMetadata(SnippetUI::VisualProperty *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_VisualProperty_2eproto);
  return file_level_metadata_VisualProperty_2eproto;
}

void *SnippetUI::VisualProperty::default_instance(SnippetUI::VisualProperty *this)
{
  if (atomic_load(scc_info_VisualProperty_VisualProperty_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_VisualProperty_VisualProperty_2eproto);
  return &SnippetUI::_VisualProperty_default_instance_;
}

void SnippetUI::VisualProperty::MergeFrom(int **this, int **a2)
{
  std::string *v4;
  unint64_t v5;
  int **v6;
  int **v7;
  int **v8;
  int **v9;
  int **v10;
  int **v11;
  char v12;
  std::string v13[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/VisualProperty.pb.cc", 387);
    v4 = google::protobuf::internal::LogMessage::operator<<(v13, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v12, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v13[0].__r_.__value_.__l.__data_);
  }
  v5 = (unint64_t)a2[1];
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((google::protobuf::internal::InternalMetadataWithArena *)(this + 1), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<SnippetUI::VisualElement>::TypeHandler>(this + 2, (uint64_t)(a2 + 2));
  if (a2 != (int **)&SnippetUI::_VisualProperty_default_instance_)
  {
    v6 = (int **)a2[5];
    if (v6)
    {
      v7 = (int **)this[5];
      if (!v7)
      {
        v7 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
        this[5] = (int *)v7;
        v6 = (int **)a2[5];
      }
      if (v6)
        v8 = v6;
      else
        v8 = (int **)&SnippetUI::_ActionProperty_default_instance_;
      SnippetUI::ActionProperty::MergeFrom(v7, v8);
    }
    v9 = (int **)a2[6];
    if (v9)
    {
      v10 = (int **)this[6];
      if (!v10)
      {
        v10 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
        this[6] = (int *)v10;
        v9 = (int **)a2[6];
      }
      if (v9)
        v11 = v9;
      else
        v11 = (int **)&SnippetUI::_ActionProperty_default_instance_;
      SnippetUI::ActionProperty::MergeFrom(v10, v11);
    }
  }
  if (*((_BYTE *)a2 + 56))
    *((_BYTE *)this + 56) = 1;
  if (*((_BYTE *)a2 + 57))
    *((_BYTE *)this + 57) = 1;
}

void sub_1BFC05CC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<SnippetUI::VisualElement>::TypeHandler>(int **this, uint64_t a2)
{
  std::string *v4;
  int v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  const SnippetUI::VisualElement **v13;
  SnippetUI::VisualElement **v14;
  const SnippetUI::VisualElement *v15;
  const SnippetUI::VisualElement *v16;
  SnippetUI::VisualElement *v17;
  google::protobuf::internal::ArenaImpl *v18;
  int v19;
  uint64_t v20;
  SnippetUI::VisualElement **v21;
  const SnippetUI::VisualElement **v22;
  const SnippetUI::VisualElement *v23;
  SnippetUI::VisualElement *v24;
  int v25;
  int *v26;
  char v27;
  std::string v28[2];

  if ((int **)a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1632);
    v4 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
  }
  v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    v6 = *(_QWORD *)(a2 + 16);
    v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)this, *(_DWORD *)(a2 + 8));
    v8 = v7;
    v9 = *this[2];
    v10 = *((int *)this + 2);
    v11 = v9 - v10;
    if ((int)v9 - (int)v10 >= v5)
      v12 = v5;
    else
      v12 = v11;
    if ((int)v12 >= 1)
    {
      v13 = (const SnippetUI::VisualElement **)(v6 + 8);
      v14 = (SnippetUI::VisualElement **)v7;
      do
      {
        v16 = *v13++;
        v15 = v16;
        v17 = *v14++;
        google::protobuf::internal::GenericTypeHandler<SnippetUI::VisualElement>::Merge(v15, v17);
        --v12;
      }
      while (v12);
    }
    if (v11 < v5)
    {
      v18 = (google::protobuf::internal::ArenaImpl *)*this;
      v19 = v10 + v5 - v9;
      v20 = 8 * v9 - 8 * v10;
      v21 = (SnippetUI::VisualElement **)((char *)v8 + v20);
      v22 = (const SnippetUI::VisualElement **)(v20 + v6 + 8);
      do
      {
        v23 = *v22++;
        v24 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::VisualElement>(v18);
        google::protobuf::internal::GenericTypeHandler<SnippetUI::VisualElement>::Merge(v23, v24);
        *v21++ = v24;
        --v19;
      }
      while (v19);
    }
    v25 = *((_DWORD *)this + 2) + v5;
    *((_DWORD *)this + 2) = v25;
    v26 = this[2];
    if (*v26 < v25)
      *v26 = v25;
  }
}

void sub_1BFC05E30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::GenericTypeHandler<SnippetUI::VisualElement>::Merge(const SnippetUI::VisualElement *a1, SnippetUI::VisualElement *a2)
{
  SnippetUI::VisualElement::MergeFrom(a2, a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::VisualElement>::TypeHandler>(uint64_t a1)
{
  uint64_t v1;
  SnippetUI::VisualElement **v3;
  SnippetUI::VisualElement *v4;
  std::string *v5;
  char v6;
  std::string v7[2];

  v1 = *(unsigned int *)(a1 + 8);
  if ((v1 & 0x80000000) != 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1613);
    v5 = google::protobuf::internal::LogMessage::operator<<(v7, "CHECK failed: (n) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v6, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v7[0].__r_.__value_.__l.__data_);
  }
  else if ((_DWORD)v1)
  {
    v3 = (SnippetUI::VisualElement **)(*(_QWORD *)(a1 + 16) + 8);
    do
    {
      v4 = *v3++;
      SnippetUI::VisualElement::Clear(v4);
      --v1;
    }
    while (v1);
    *(_DWORD *)(a1 + 8) = 0;
  }
}

void sub_1BFC05EEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

SnippetUI::VisualProperty *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::VisualProperty>(google::protobuf::internal::ArenaImpl *this)
{
  SnippetUI::VisualProperty *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (SnippetUI::VisualProperty *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x40uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::VisualProperty>);
    SnippetUI::VisualProperty::VisualProperty(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (SnippetUI::VisualProperty *)operator new();
    SnippetUI::VisualProperty::VisualProperty(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_1BFC05F88(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D890](v1, 0x10A1C40BEC01B52);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::VisualProperty>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

void SnippetUI::VisualProperty::InitAsDefaultInstance(SnippetUI::VisualProperty *this)
{
  qword_1ED1D49D8 = (uint64_t)&SnippetUI::_ActionProperty_default_instance_;
  unk_1ED1D49E0 = &SnippetUI::_ActionProperty_default_instance_;
}

uint64_t SnippetUI::VisualProperty::_Internal::focus_action(SnippetUI::VisualProperty::_Internal *this, const SnippetUI::VisualProperty *a2)
{
  return *((_QWORD *)this + 5);
}

uint64_t SnippetUI::VisualProperty::_Internal::selected_action(SnippetUI::VisualProperty::_Internal *this, const SnippetUI::VisualProperty *a2)
{
  return *((_QWORD *)this + 6);
}

void SnippetUI::VisualProperty::clear_visuals(SnippetUI::VisualProperty *this)
{
  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::VisualElement>::TypeHandler>((uint64_t)this + 16);
}

uint64_t SnippetUI::VisualProperty::clear_focus_action(SnippetUI::VisualProperty *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 5);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 5) = 0;
  return result;
}

uint64_t SnippetUI::VisualProperty::clear_selected_action(SnippetUI::VisualProperty *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 6);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 6) = 0;
  return result;
}

SnippetUI::VisualProperty *SnippetUI::VisualProperty::VisualProperty(SnippetUI::VisualProperty *this, const SnippetUI::VisualProperty *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  uint64_t v5;
  SnippetUI::ActionProperty *v6;
  SnippetUI::ActionProperty *v7;

  *(_QWORD *)this = &off_1E7937908;
  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (SnippetUI::VisualProperty *)((char *)this + 8);
  *(_OWORD *)((char *)this + 24) = 0u;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<SnippetUI::VisualElement>::TypeHandler>((int **)this + 2, (uint64_t)a2 + 16);
  *((_DWORD *)this + 15) = 0;
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom(v4, (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  if (a2 == (const SnippetUI::VisualProperty *)&SnippetUI::_VisualProperty_default_instance_)
  {
    v7 = 0;
    *((_QWORD *)this + 5) = 0;
  }
  else
  {
    if (*((_QWORD *)a2 + 5))
    {
      v6 = (SnippetUI::ActionProperty *)operator new();
      SnippetUI::ActionProperty::ActionProperty(v6, *((const SnippetUI::ActionProperty **)a2 + 5));
    }
    else
    {
      v6 = 0;
    }
    *((_QWORD *)this + 5) = v6;
    if (*((_QWORD *)a2 + 6))
    {
      v7 = (SnippetUI::ActionProperty *)operator new();
      SnippetUI::ActionProperty::ActionProperty(v7, *((const SnippetUI::ActionProperty **)a2 + 6));
    }
    else
    {
      v7 = 0;
    }
  }
  *((_QWORD *)this + 6) = v7;
  *((_WORD *)this + 28) = *((_WORD *)a2 + 28);
  return this;
}

void sub_1BFC061D4(_Unwind_Exception *a1)
{
  uint64_t *v1;
  google::protobuf::internal::RepeatedPtrFieldBase *v2;
  uint64_t v3;

  MEMORY[0x1C3B8D890](v3, 0x10A1C40B18DE219);
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::VisualProperty::InternalSwap(SnippetUI::VisualProperty *this, SnippetUI::VisualProperty *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  uint64_t v5;
  google::protobuf::UnknownFieldSet *v6;
  uint64_t v7;
  uint64_t v8;
  google::protobuf::UnknownFieldSet *v9;

  v4 = (SnippetUI::VisualProperty *)((char *)this + 8);
  v5 = *((_QWORD *)a2 + 1);
  if ((*((_BYTE *)this + 8) & 1) != 0)
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v6 = v9;
      goto LABEL_6;
    }
  }
  else if ((v5 & 1) == 0)
  {
    goto LABEL_7;
  }
  v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
  google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
LABEL_7:
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((SnippetUI::VisualProperty *)((char *)this + 16), (SnippetUI::VisualProperty *)((char *)a2 + 16));
  v7 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v7;
  v8 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v8;
  LOBYTE(v8) = *((_BYTE *)this + 56);
  *((_BYTE *)this + 56) = *((_BYTE *)a2 + 56);
  *((_BYTE *)a2 + 56) = v8;
  LOBYTE(v8) = *((_BYTE *)this + 57);
  *((_BYTE *)this + 57) = *((_BYTE *)a2 + 57);
  *((_BYTE *)a2 + 57) = v8;
}

void siri::dialogengine::ParsePatternXmlFile(__int128 **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void *__p;
  char v5;
  std::string v6;

  siri::dialogengine::FindPatternFile(a1, a2, (uint64_t)&v6);
  if (siri::dialogengine::FileExists((uint64_t *)&v6))
  {
    siri::dialogengine::ParsePatternXmlFile(&v6, (__int128 *)a3);
  }
  else
  {
    std::operator+<char>();
    siri::dialogengine::Log::LogWithLevel((uint64_t)&__p, 3u);
    if (v5 < 0)
      operator delete(__p);
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
  }
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
}

void sub_1BFC0639C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::ParsePatternXmlFile(std::string *a1@<X0>, __int128 *a2@<X8>)
{
  std::string *v2;
  xmlTextReaderPtr v4;
  siri::dialogengine *v5;
  char *v6;
  int data;
  char v8;
  int v9;
  int *v10;
  __int128 *v11;
  int v12;
  int v13;
  uint64_t v15;
  const std::string::value_type **v16;
  __int128 v17;
  uint64_t v18;
  int v19;
  __int128 *v20;
  int *v21;
  const char *v22;
  int v23;
  int v24;
  uint64_t *v26;
  __int128 *v27;
  uint64_t *v28;
  int v29;
  int v30;
  __int128 *v32;
  std::__shared_weak_count *v33;
  unint64_t *p_shared_owners;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  char *v49;
  std::string::size_type size;
  unint64_t *v51;
  unint64_t v52;
  char *v53;
  __int128 v54;
  int64x2_t v55;
  uint64_t v56;
  void *v57;
  unint64_t *v58;
  unint64_t v59;
  int v60;
  int v61;
  BOOL v62;
  __int128 *v63;
  uint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  __int128 *v70;
  int v71;
  int v72;
  BOOL v73;
  __int128 *v74;
  uint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  unint64_t *v79;
  unint64_t v80;
  __int128 *v81;
  int v82;
  int v83;
  BOOL v84;
  void *v85;
  std::string *v86;
  __int128 v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  xmlTextReader *v91;
  __int128 *v92;
  void *v93[2];
  char v94;
  void *v95[2];
  char v96;
  uint64_t v97[2];
  void *v98[2];
  char v99;
  void *v100[2];
  char v101;
  void *v102[2];
  char v103;
  void *v104[2];
  char v105;
  void *v106[2];
  char v107;
  void *v108[2];
  char v109;
  std::string __str;
  uint64_t v111;
  __int128 v112;
  __int16 v113;
  void *v114[2];
  char v115;
  void *v116[2];
  char v117;
  void *__p[2];
  char v119;
  std::string v120;
  int64x2_t v121;
  char *v122;
  int v123;
  __int128 v124;
  uint64_t v125;
  __int128 v126;
  __int16 v127;
  _BYTE v128[32];
  __int128 v129;
  xmlTextReader *v130;
  __int128 *v131[3];

  v2 = a1;
  if ((a1->__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    a1 = (std::string *)a1->__r_.__value_.__r.__words[0];
  v4 = xmlReaderForFile((const char *)a1, 0, 0);
  v130 = v4;
  if (!v4)
  {
    std::operator+<char>();
    siri::dialogengine::Log::LogWithLevel((uint64_t)&__str, 3u);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    *(_QWORD *)a2 = 0;
    *((_QWORD *)a2 + 1) = 0;
    return;
  }
  v5 = v4;
  v6 = (char *)operator new(0x100uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E79379E0;
  *(_QWORD *)&v129 = siri::dialogengine::PatternFile::PatternFile((siri::dialogengine::PatternFile *)(v6 + 24));
  *((_QWORD *)&v129 + 1) = v6;
  siri::dialogengine::CatPathToId((unsigned __int8 *)v2, &__str);
  std::string::operator=((std::string *)(v6 + 88), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  std::string::operator=((std::string *)(v6 + 112), v2);
  siri::dialogengine::XmlErrorHandler::XmlErrorHandler((siri::dialogengine::XmlErrorHandler *)v128, 0);
  v124 = 0uLL;
  v125 = 0;
  v121 = 0uLL;
  v122 = 0;
  siri::dialogengine::ReadNextNode(v5, (uint64_t)&__str);
  data = (int)__str.__r_.__value_.__l.__data_;
  v123 = (int)__str.__r_.__value_.__l.__data_;
  v124 = *(_OWORD *)&__str.__r_.__value_.__r.__words[1];
  v8 = 1;
  v125 = v111;
  v126 = v112;
  v127 = v113;
  while (data == 1)
  {
    v9 = HIBYTE(v125);
    if ((v8 & 1) != 0)
    {
      if (v125 < 0)
      {
        if (*((_QWORD *)&v124 + 1) != 7)
          goto LABEL_221;
        v10 = (int *)v124;
      }
      else
      {
        v10 = (int *)&v124;
        if (HIBYTE(v125) != 7)
          goto LABEL_221;
      }
      v12 = *v10;
      v13 = *(int *)((char *)v10 + 3);
      if (v12 != 1953784176 || v13 != 1852990836)
      {
LABEL_221:
        siri::dialogengine::GetXmlLineString((uint64_t)&v123, &v120);
        v86 = std::string::insert(&v120, 0, "Root node in XML file is not <pattern> ");
        v87 = *(_OWORD *)&v86->__r_.__value_.__l.__data_;
        __str.__r_.__value_.__r.__words[2] = v86->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v87;
        v86->__r_.__value_.__l.__size_ = 0;
        v86->__r_.__value_.__r.__words[2] = 0;
        v86->__r_.__value_.__r.__words[0] = 0;
        siri::dialogengine::Log::LogWithLevel((uint64_t)&__str, 3u);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0)
        {
          v85 = (void *)v120.__r_.__value_.__r.__words[0];
          goto LABEL_225;
        }
        goto LABEL_226;
      }
      v15 = v129;
      std::string::basic_string[abi:ne180100]<0>(__p, "type");
      siri::dialogengine::GetXmlAttr(v5, (const xmlChar *)__p, &__str);
      std::string::operator=((std::string *)(v15 + 112), &__str);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      if (v119 < 0)
        operator delete(__p[0]);
      std::string::basic_string[abi:ne180100]<0>(v116, "id");
      siri::dialogengine::GetXmlAttr(v5, (const xmlChar *)v116, &__str);
      std::string::operator=((std::string *)(v15 + 64), &__str);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      if (v117 < 0)
        operator delete(v116[0]);
      std::string::basic_string[abi:ne180100]<0>(v114, "xmlns");
      siri::dialogengine::GetXmlAttr(v5, (const xmlChar *)v114, &v120);
      siri::dialogengine::StringSplit((unsigned __int8 *)&v120, ":", &__str);
      if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v120.__r_.__value_.__l.__data_);
      if (v115 < 0)
        operator delete(v114[0]);
      if (__str.__r_.__value_.__l.__size_ != __str.__r_.__value_.__r.__words[0])
      {
        v16 = (const std::string::value_type **)(__str.__r_.__value_.__l.__size_ - 24);
        if (*(char *)(__str.__r_.__value_.__l.__size_ - 1) < 0)
        {
          std::string::__init_copy_ctor_external(&v120, *v16, *(_QWORD *)(__str.__r_.__value_.__l.__size_ - 16));
        }
        else
        {
          v17 = *(_OWORD *)v16;
          v120.__r_.__value_.__r.__words[2] = *(_QWORD *)(__str.__r_.__value_.__l.__size_ - 8);
          *(_OWORD *)&v120.__r_.__value_.__l.__data_ = v17;
        }
        if (siri::dialogengine::IsValidVersionNumber((char *)&v120))
          std::string::operator=((std::string *)(v15 + 136), &v120);
        else
          siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Pattern file does not define a valid version number in an xmlns attribute", v22);
        if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v120.__r_.__value_.__l.__data_);
      }
      v120.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v120);
      goto LABEL_211;
    }
    if (v125 < 0)
    {
      v18 = *((_QWORD *)&v124 + 1);
      if (*((_QWORD *)&v124 + 1) != 8)
      {
        if (!(_BYTE)v127)
          goto LABEL_198;
        goto LABEL_58;
      }
      v11 = (__int128 *)v124;
    }
    else
    {
      v11 = &v124;
      if (HIBYTE(v125) != 8)
      {
        if (!(_BYTE)v127)
          goto LABEL_198;
LABEL_45:
        v19 = v9;
        v20 = &v124;
        if (v9 == 4)
          goto LABEL_81;
        v21 = (int *)&v124;
        if (v9 != 7)
          goto LABEL_75;
        goto LABEL_60;
      }
    }
    if (*(_QWORD *)v11 == 0x746E656D6D6F6323)
    {
      std::string::basic_string[abi:ne180100]<0>(&v120, "XML comments are not supported in Pattern files. Use a <meta/> element instead");
      siri::dialogengine::LineNumberBase::LineNumberBase((uint64_t)&__str, *((uint64_t *)&v126 + 1), v2);
      siri::dialogengine::LineNumberBase::~LineNumberBase((void **)&__str.__r_.__value_.__l.__data_);
      if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v120.__r_.__value_.__l.__data_);
    }
    if (!(_BYTE)v127)
      goto LABEL_198;
    if ((v9 & 0x80) == 0)
      goto LABEL_45;
    v18 = *((_QWORD *)&v124 + 1);
LABEL_58:
    if (v18 != 7)
      goto LABEL_79;
    v21 = (int *)v124;
LABEL_60:
    v23 = *v21;
    v24 = *(int *)((char *)v21 + 3);
    if (v23 != 1953785203 || v24 != 1735289204)
      goto LABEL_72;
    std::string::basic_string[abi:ne180100]<0>(v108, "name");
    siri::dialogengine::GetXmlAttr(v5, (const xmlChar *)v108, &__str);
    if (v109 < 0)
      operator delete(v108[0]);
    std::string::basic_string[abi:ne180100]<0>(v106, "value");
    siri::dialogengine::GetXmlAttr(v5, (const xmlChar *)v106, &v120);
    if (v107 < 0)
      operator delete(v106[0]);
    v131[0] = (__int128 *)&__str;
    v26 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v129 + 160), (const void **)&__str.__r_.__value_.__l.__data_, v131);
    std::string::operator=((std::string *)(v26 + 7), &v120);
    if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v120.__r_.__value_.__l.__data_);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__str.__r_.__value_.__l.__data_);
      if ((v9 & 0x80) == 0)
      {
LABEL_73:
        if (v9 != 4)
        {
LABEL_75:
          if (v9 != 5)
            goto LABEL_103;
          v19 = 5;
          v27 = &v124;
          goto LABEL_97;
        }
        v19 = 4;
        v20 = &v124;
        goto LABEL_81;
      }
    }
    else
    {
LABEL_72:
      if ((v9 & 0x80) == 0)
        goto LABEL_73;
    }
    v18 = *((_QWORD *)&v124 + 1);
LABEL_79:
    if (v18 == 4)
    {
      v20 = (__int128 *)v124;
      v19 = v9;
LABEL_81:
      if (*(_DWORD *)v20 == 1635018093)
      {
        std::string::basic_string[abi:ne180100]<0>(v104, "name");
        siri::dialogengine::GetXmlAttr(v5, (const xmlChar *)v104, &__str);
        if (v105 < 0)
          operator delete(v104[0]);
        std::string::basic_string[abi:ne180100]<0>(v102, "value");
        siri::dialogengine::GetXmlAttr(v5, (const xmlChar *)v102, &v120);
        if (v103 < 0)
          operator delete(v102[0]);
        v131[0] = (__int128 *)&__str;
        v28 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v129 + 184), (const void **)&__str.__r_.__value_.__l.__data_, v131);
        std::string::operator=((std::string *)(v28 + 7), &v120);
        if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v120.__r_.__value_.__l.__data_);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        v19 = v9;
        if ((v9 & 0x80) == 0)
          goto LABEL_198;
      }
      else if ((v19 & 0x80) == 0)
      {
        goto LABEL_198;
      }
      v18 = *((_QWORD *)&v124 + 1);
      goto LABEL_95;
    }
    v19 = v9;
LABEL_95:
    if (v18 != 5)
      goto LABEL_153;
    v27 = (__int128 *)v124;
LABEL_97:
    v29 = *(_DWORD *)v27;
    v30 = *((unsigned __int8 *)v27 + 4);
    if (v29 == 1970238055 && v30 == 112)
    {
      v33 = (std::__shared_weak_count *)operator new(0xE8uLL);
      v92 = a2;
      v33->__shared_owners_ = 0;
      p_shared_owners = (unint64_t *)&v33->__shared_owners_;
      v33->__shared_weak_owners_ = 0;
      v33->__vftable = (std::__shared_weak_count_vtbl *)&off_1E7937A30;
      siri::dialogengine::LineNumberBase::LineNumberBase((uint64_t)&v33[1], *((uint64_t *)&v126 + 1), v2);
      v33[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E79309E0;
      *(_OWORD *)&v33[3].__shared_weak_owners_ = 0u;
      *(_OWORD *)&v33[4].__shared_owners_ = 0u;
      v33[5].std::__shared_count = 0u;
      *(_OWORD *)&v33[5].__shared_weak_owners_ = 0u;
      *(_OWORD *)&v33[6].__shared_owners_ = 0u;
      v33[7].std::__shared_count = 0u;
      *(_OWORD *)&v33[7].__shared_weak_owners_ = 0u;
      *(_OWORD *)&v33[8].__shared_owners_ = 0u;
      v33[9].std::__shared_count = 0u;
      v120.__r_.__value_.__r.__words[0] = (std::string::size_type)&v33[1];
      v120.__r_.__value_.__l.__size_ = (std::string::size_type)v33;
      std::string::basic_string[abi:ne180100]<0>(v100, "name");
      siri::dialogengine::GetXmlAttr(v5, (const xmlChar *)v100, &__str);
      std::string::operator=((std::string *)&v33[3].__shared_weak_owners_, &__str);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      if (v101 < 0)
        operator delete(v100[0]);
      std::string::basic_string[abi:ne180100]<0>(v98, "pattern");
      siri::dialogengine::GetXmlAttr(v5, (const xmlChar *)v98, &__str);
      std::string::operator=((std::string *)&v33[6].__shared_weak_owners_, &__str);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      if (v99 < 0)
        operator delete(v98[0]);
      v35 = v129;
      v97[0] = (uint64_t)&v33[1];
      v97[1] = (uint64_t)v33;
      do
        v36 = __ldxr(p_shared_owners);
      while (__stxr(v36 + 1, p_shared_owners));
      siri::dialogengine::PatternFile::AddPatternGroup(v35, v97);
      do
        v37 = __ldaxr(p_shared_owners);
      while (__stlxr(v37 - 1, p_shared_owners));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
      v38 = (_QWORD *)v121.i64[1];
      if (v121.i64[1] >= (unint64_t)v122)
      {
        v43 = (_QWORD *)v121.i64[0];
        v44 = (v121.i64[1] - v121.i64[0]) >> 4;
        v45 = v44 + 1;
        if ((unint64_t)(v44 + 1) >> 60)
          std::vector<BOOL>::__throw_length_error[abi:ne180100]();
        v46 = (uint64_t)&v122[-v121.i64[0]];
        if ((uint64_t)&v122[-v121.i64[0]] >> 3 > v45)
          v45 = v46 >> 3;
        if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFF0)
          v47 = 0xFFFFFFFFFFFFFFFLL;
        else
          v47 = v45;
        if (v47 >> 60)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v48 = (char *)operator new(16 * v47);
        v49 = &v48[16 * v44];
        size = v120.__r_.__value_.__l.__size_;
        *(_OWORD *)v49 = *(_OWORD *)&v120.__r_.__value_.__l.__data_;
        if (size)
        {
          v51 = (unint64_t *)(size + 8);
          do
            v52 = __ldxr(v51);
          while (__stxr(v52 + 1, v51));
          v38 = (_QWORD *)v121.i64[1];
        }
        if (v38 == v43)
        {
          v55 = vdupq_n_s64((unint64_t)v38);
          v53 = &v48[16 * v44];
        }
        else
        {
          v53 = &v48[16 * v44];
          do
          {
            v54 = *((_OWORD *)v38 - 1);
            v38 -= 2;
            *((_OWORD *)v53 - 1) = v54;
            v53 -= 16;
            *v38 = 0;
            v38[1] = 0;
          }
          while (v38 != v43);
          v55 = v121;
        }
        v42 = v49 + 16;
        v121.i64[0] = (uint64_t)v53;
        v121.i64[1] = (uint64_t)(v49 + 16);
        v122 = &v48[16 * v47];
        v56 = v55.i64[1];
        v57 = (void *)v55.i64[0];
        while ((void *)v56 != v57)
          v56 = std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](v56 - 16);
        if (v57)
          operator delete(v57);
        v39 = (std::__shared_weak_count *)v120.__r_.__value_.__l.__size_;
      }
      else
      {
        *(_QWORD *)v121.i64[1] = v120.__r_.__value_.__r.__words[0];
        v39 = (std::__shared_weak_count *)v120.__r_.__value_.__l.__size_;
        v38[1] = v120.__r_.__value_.__l.__size_;
        if (v39)
        {
          v40 = (unint64_t *)&v39->__shared_owners_;
          do
            v41 = __ldxr(v40);
          while (__stxr(v41 + 1, v40));
        }
        v42 = v38 + 2;
      }
      v121.i64[1] = (uint64_t)v42;
      if (v39)
      {
        v58 = (unint64_t *)&v39->__shared_owners_;
        do
          v59 = __ldaxr(v58);
        while (__stlxr(v59 - 1, v58));
        if (!v59)
        {
          ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
          std::__shared_weak_count::__release_weak(v39);
        }
      }
      v19 = HIBYTE(v125);
      a2 = v92;
      if ((v125 & 0x8000000000000000) == 0)
      {
LABEL_102:
        v9 = v19;
LABEL_103:
        v19 = v9;
        if (v9 != 6)
          goto LABEL_175;
        v32 = &v124;
        goto LABEL_155;
      }
    }
    else if ((v19 & 0x80) == 0)
    {
      goto LABEL_102;
    }
    v18 = *((_QWORD *)&v124 + 1);
LABEL_153:
    if (v18 != 6)
      goto LABEL_198;
    v32 = (__int128 *)v124;
LABEL_155:
    v60 = *(_DWORD *)v32;
    v61 = *((unsigned __int16 *)v32 + 2);
    v62 = v60 == 1818323300 && v61 == 26479;
    if (v62 && v121.i64[0] != v121.i64[1])
    {
      v63 = a2;
      v64 = *(_QWORD *)(v121.i64[1] - 16);
      v120.__r_.__value_.__r.__words[0] = v64;
      v65 = *(std::__shared_weak_count **)(v121.i64[1] - 8);
      v120.__r_.__value_.__l.__size_ = (std::string::size_type)v65;
      if (v65)
      {
        v66 = (unint64_t *)&v65->__shared_owners_;
        do
          v67 = __ldxr(v66);
        while (__stxr(v67 + 1, v66));
      }
      std::string::basic_string[abi:ne180100]<0>(v95, "id");
      siri::dialogengine::GetXmlAttr(v5, (const xmlChar *)v95, &__str);
      siri::dialogengine::PatternGroup::SetDialogIdWithComponent(v64, &__str);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      if (v96 < 0)
        operator delete(v95[0]);
      if (v65)
      {
        v68 = (unint64_t *)&v65->__shared_owners_;
        do
          v69 = __ldaxr(v68);
        while (__stlxr(v69 - 1, v68));
        if (!v69)
        {
          ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
          std::__shared_weak_count::__release_weak(v65);
        }
      }
      v19 = HIBYTE(v125);
      a2 = v63;
    }
    if ((v19 & 0x80) == 0)
    {
LABEL_175:
      v70 = &v124;
      if (v19 == 6)
        goto LABEL_179;
      goto LABEL_198;
    }
    if (*((_QWORD *)&v124 + 1) == 6)
    {
      v70 = (__int128 *)v124;
LABEL_179:
      v71 = *(_DWORD *)v70;
      v72 = *((unsigned __int16 *)v70 + 2);
      v73 = v71 == 1970497910 && v72 == 27745;
      if (v73 && v121.i64[0] != v121.i64[1])
      {
        v74 = a2;
        v75 = *(_QWORD *)(v121.i64[1] - 16);
        v120.__r_.__value_.__r.__words[0] = v75;
        v76 = *(std::__shared_weak_count **)(v121.i64[1] - 8);
        v120.__r_.__value_.__l.__size_ = (std::string::size_type)v76;
        if (v76)
        {
          v77 = (unint64_t *)&v76->__shared_owners_;
          do
            v78 = __ldxr(v77);
          while (__stxr(v78 + 1, v77));
        }
        std::string::basic_string[abi:ne180100]<0>(v93, "id");
        siri::dialogengine::GetXmlAttr(v5, (const xmlChar *)v93, &__str);
        siri::dialogengine::PatternGroup::SetVisualIdWithComponent(v75, &__str);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        if (v94 < 0)
          operator delete(v93[0]);
        if (v76)
        {
          v79 = (unint64_t *)&v76->__shared_owners_;
          do
            v80 = __ldaxr(v79);
          while (__stlxr(v80 - 1, v79));
          if (!v80)
          {
            ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
            std::__shared_weak_count::__release_weak(v76);
          }
        }
        a2 = v74;
      }
    }
LABEL_198:
    if (!HIBYTE(v127))
      goto LABEL_211;
    if (SHIBYTE(v125) < 0)
    {
      if (*((_QWORD *)&v124 + 1) != 5)
        goto LABEL_211;
      v81 = (__int128 *)v124;
    }
    else
    {
      v81 = &v124;
      if (SHIBYTE(v125) != 5)
        goto LABEL_211;
    }
    v82 = *(_DWORD *)v81;
    v83 = *((unsigned __int8 *)v81 + 4);
    v84 = v82 == 1970238055 && v83 == 112;
    if (v84 && v121.i64[0] != v121.i64[1])
      v121.i64[1] = std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](v121.i64[1] - 16);
LABEL_211:
    siri::dialogengine::ReadNextNode(v5, (uint64_t)&__str);
    data = (int)__str.__r_.__value_.__l.__data_;
    v123 = (int)__str.__r_.__value_.__l.__data_;
    if (SHIBYTE(v125) < 0)
      operator delete((void *)v124);
    v8 = 0;
    v124 = *(_OWORD *)&__str.__r_.__value_.__r.__words[1];
    v125 = v111;
    v126 = v112;
    v127 = v113;
  }
  if (!data)
  {
    *a2 = v129;
    a2 = &v129;
    goto LABEL_226;
  }
  std::operator+<char>();
  siri::dialogengine::Log::LogWithLevel((uint64_t)&__str, 3u);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    v85 = (void *)__str.__r_.__value_.__r.__words[0];
LABEL_225:
    operator delete(v85);
  }
LABEL_226:
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v121;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  if (SHIBYTE(v125) < 0)
    operator delete((void *)v124);
  siri::dialogengine::XmlErrorHandler::~XmlErrorHandler((siri::dialogengine::XmlErrorHandler *)v128);
  v88 = (std::__shared_weak_count *)*((_QWORD *)&v129 + 1);
  if (*((_QWORD *)&v129 + 1))
  {
    v89 = (unint64_t *)(*((_QWORD *)&v129 + 1) + 8);
    do
      v90 = __ldaxr(v89);
    while (__stlxr(v90 - 1, v89));
    if (!v90)
    {
      ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
      std::__shared_weak_count::__release_weak(v88);
    }
  }
  v91 = v130;
  v130 = 0;
  if (v91)
    xmlFreeTextReader(v91);
}

void sub_1BFC0709C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *__p,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *a61)
{
  uint64_t v61;

  if (a45 < 0)
    operator delete(__p);
  if (a16 < 0)
    operator delete(a11);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a61);
  __p = (void *)(v61 - 240);
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (*(char *)(v61 - 185) < 0)
    operator delete(*(void **)(v61 - 208));
  siri::dialogengine::XmlErrorHandler::~XmlErrorHandler((siri::dialogengine::XmlErrorHandler *)(v61 - 160));
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](v61 - 128);
  std::unique_ptr<_xmlTextReader,siri::dialogengine::xmlTextReaderDeleter>::reset[abi:ne180100]((xmlTextReader **)(v61 - 112));
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<siri::dialogengine::PatternGroup>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E7937A30;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<siri::dialogengine::PatternGroup>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E7937A30;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B8D890);
}

uint64_t std::__shared_ptr_emplace<siri::dialogengine::PatternGroup>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<siri::dialogengine::PatternFile>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E79379E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<siri::dialogengine::PatternFile>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E79379E0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B8D890);
}

uint64_t std::__shared_ptr_emplace<siri::dialogengine::PatternFile>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

BOOL siri::dialogengine::TimeStamp::IsValid(siri::dialogengine::TimeStamp *this)
{
  return *(_QWORD *)this != 0x7FFFFFFFFFFFFFFFLL;
}

void siri::dialogengine::GetICUTimeStamp(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  int v4;
  std::string::size_type v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  std::string *v9;

  v4 = *(char *)(a3 + 23);
  v5 = *(_QWORD *)(a3 + 8);
  v6 = *(unsigned __int8 *)(a3 + 23);
  if (v4 < 0)
    v6 = *(_QWORD *)(a3 + 8);
  if (v6)
    v7 = 1;
  else
    v7 = a1 == 0x7FFFFFFFFFFFFFFFLL;
  v8 = a2;
  if (v7)
    v8 = 0;
  *a4 = v8 + a1;
  v9 = (std::string *)(a4 + 1);
  if (v4 < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a3, v5);
  }
  else
  {
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    v9->__r_.__value_.__r.__words[2] = *(_QWORD *)(a3 + 16);
  }
}

void siri::dialogengine::GetICUTimeStamp(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  siri::dialogengine::GetICUTimeStamp(a1, 0, a2, a3);
}

double siri::dialogengine::GetSecsSinceEpoch(siri::dialogengine *this)
{
  timeval v2;

  gettimeofday(&v2, 0);
  return (double)v2.tv_usec / 1000000.0 + (double)v2.tv_sec;
}

double siri::dialogengine::GetUTCOffsetSecs(siri::dialogengine *this)
{
  time_t v1;
  time_t v2;
  tm v4;
  tm v5;
  time_t v6;

  v6 = time(0);
  gmtime_r(&v6, &v5);
  localtime_r(&v6, &v4);
  v5.tm_isdst = 0;
  v4.tm_isdst = 0;
  v1 = mktime(&v4);
  v2 = mktime(&v5);
  return difftime(v1, v2);
}

double siri::dialogengine::GetLocalTime(siri::dialogengine *this)
{
  time_t v1;
  timeval v3;
  tm v4;
  time_t v5;

  v5 = time(0);
  localtime_r(&v5, &v4);
  v1 = timegm(&v4);
  gettimeofday(&v3, 0);
  return (double)v3.tv_usec / 1000000.0 + (double)v1;
}

void siri::dialogengine::GetTimeStampFromString(const std::string *a1@<X0>, _BYTE *a2@<X1>, time_t *a3@<X8>)
{
  std::string *v6;
  _BOOL4 v7;
  std::string *p_str;
  int64_t size;
  _BYTE *v10;
  std::string *v11;
  _BYTE *v12;
  _BOOL4 v13;
  _BOOL4 v14;
  char v15;
  unint64_t v16;
  int v17;
  tm __p;
  std::string v19;
  std::string __str;
  void *v21;
  _BYTE *v22;
  char v23;
  std::string v24;
  char v25;

  *a3 = 0;
  v6 = (std::string *)(a3 + 1);
  std::string::basic_string[abi:ne180100]<0>(a3 + 1, "");
  siri::dialogengine::StringTrim(" \t\n\r", a1, (std::string *)&__p);
  siri::dialogengine::StringToUpper((uint64_t)&__p, (uint64_t)&v24);
  if (SHIBYTE(__p.tm_year) < 0)
    operator delete(*(void **)&__p.tm_sec);
  std::string::basic_string[abi:ne180100]<0>(&__p, "(");
  if (siri::dialogengine::StringStartsWith(&v24, (unsigned __int8 *)&__p))
  {
    std::string::basic_string[abi:ne180100]<0>(&v21, ")");
    v7 = !siri::dialogengine::StringEndsWith(&v24, (unsigned __int8 *)&v21);
    if (v23 < 0)
      operator delete(v21);
  }
  else
  {
    v7 = 1;
  }
  if ((SHIBYTE(__p.tm_year) & 0x80000000) == 0)
  {
    if (v7)
      goto LABEL_9;
LABEL_12:
    siri::dialogengine::StringTrim("()", &v24, (std::string *)&__p);
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v24.__r_.__value_.__l.__data_);
    *(_OWORD *)&v24.__r_.__value_.__l.__data_ = *(_OWORD *)&__p.tm_sec;
    v24.__r_.__value_.__r.__words[2] = *(_QWORD *)&__p.tm_mon;
    siri::dialogengine::StringSplit((unsigned __int8 *)&v24, ",", &v21);
    if (v21 == v22 || 0xAAAAAAAAAAAAAAABLL * ((v22 - (_BYTE *)v21) >> 3) >= 7)
    {
      if (a2)
        *a2 = 0;
LABEL_59:
      *(_QWORD *)&__p.tm_sec = &v21;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      goto LABEL_60;
    }
    p_str = &__str;
    siri::dialogengine::StringTrim(" \t\n\r", (const std::string *)((char *)v21 + 8 * ((v22 - (_BYTE *)v21) >> 3) - 24), &__str);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    else
      size = __str.__r_.__value_.__l.__size_;
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
    if (size >= 1)
    {
      v10 = (char *)p_str + size;
      v11 = p_str;
      while (1)
      {
        v12 = memchr(v11, 32, size);
        if (!v12)
          goto LABEL_45;
        if (*v12 == 32)
          break;
        v11 = (std::string *)(v12 + 1);
        size = v10 - (_BYTE *)v11;
        if (v10 - (_BYTE *)v11 < 1)
          goto LABEL_45;
      }
      if (v12 == v10 || v12 - (_BYTE *)p_str == -1)
        goto LABEL_45;
      std::string::basic_string(&v19, &__str, v12 - (_BYTE *)p_str, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v25);
      siri::dialogengine::StringTrim(" \t\n\r", &v19, (std::string *)&__p);
      if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v19.__r_.__value_.__l.__data_);
      std::string::basic_string[abi:ne180100]<0>(&v19, "UTC");
      v13 = siri::dialogengine::StringsEqual((uint64_t)&__p, (uint64_t)&v19);
      if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v19.__r_.__value_.__l.__data_);
      if (v13)
      {
        std::string::operator=(v6, (const std::string *)&__p);
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(&v19, "LOCAL");
        v14 = siri::dialogengine::StringsEqual((uint64_t)&__p, (uint64_t)&v19);
        if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v19.__r_.__value_.__l.__data_);
        if (!v14)
        {
          v15 = 0;
          if (a2)
            *a2 = 0;
LABEL_42:
          if (SHIBYTE(__p.tm_year) < 0)
            operator delete(*(void **)&__p.tm_sec);
          if ((v15 & 1) == 0)
            goto LABEL_57;
          goto LABEL_45;
        }
        MEMORY[0x1C3B8D53C](v6, "");
      }
      v15 = 1;
      goto LABEL_42;
    }
LABEL_45:
    memset(&__p, 0, sizeof(__p));
    v16 = 0xAAAAAAAAAAAAAAABLL * ((v22 - (_BYTE *)v21) >> 3);
    __p.tm_year = siri::dialogengine::StringToInt((const std::string *)v21, 0, 0) - 1900;
    if (v16 <= 1)
    {
      __p.tm_mon = 0;
    }
    else
    {
      __p.tm_mon = siri::dialogengine::StringToInt((const std::string *)v21 + 1, 0, 0) - 1;
      if (v16 >= 3)
      {
        __p.tm_mday = siri::dialogengine::StringToInt((const std::string *)v21 + 2, 0, 0);
        if (v16 >= 4)
        {
          __p.tm_hour = siri::dialogengine::StringToInt((const std::string *)v21 + 3, 0, 0);
          if (v16 >= 5)
          {
            __p.tm_min = siri::dialogengine::StringToInt((const std::string *)v21 + 4, 0, 0);
            if (v16 < 6)
              v17 = 0;
            else
              v17 = siri::dialogengine::StringToInt((const std::string *)v21 + 5, 0, 0);
            goto LABEL_55;
          }
LABEL_54:
          v17 = 0;
          __p.tm_min = 0;
LABEL_55:
          __p.tm_sec = v17;
          *a3 = timegm(&__p);
          if (a2)
            *a2 = 1;
LABEL_57:
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__str.__r_.__value_.__l.__data_);
          goto LABEL_59;
        }
LABEL_53:
        __p.tm_hour = 0;
        goto LABEL_54;
      }
    }
    __p.tm_mday = 1;
    goto LABEL_53;
  }
  operator delete(*(void **)&__p.tm_sec);
  if (!v7)
    goto LABEL_12;
LABEL_9:
  if (a2)
    *a2 = 0;
LABEL_60:
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
}

void sub_1BFC07A40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  uint64_t v36;
  void **v37;
  uint64_t v38;

  if (a24 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  if (a30 < 0)
    operator delete(a25);
  a9 = &a31;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  if (*(char *)(v38 - 57) < 0)
    operator delete(*(void **)(v38 - 80));
  if (*(char *)(v36 + 31) < 0)
    operator delete(*v37);
  _Unwind_Resume(a1);
}

siri::dialogengine::PatternFile *siri::dialogengine::PatternFile::PatternFile(siri::dialogengine::PatternFile *this)
{
  *((_QWORD *)this + 7) = 0;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *(_QWORD *)this = &off_1E7937A80;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_QWORD *)this + 16) = 0;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)this + 17, "1.0");
  *((_QWORD *)this + 21) = 0;
  *((_QWORD *)this + 20) = (char *)this + 168;
  *((_QWORD *)this + 24) = 0;
  *((_QWORD *)this + 22) = 0;
  *((_QWORD *)this + 23) = (char *)this + 192;
  *((_QWORD *)this + 28) = 0;
  *((_QWORD *)this + 27) = 0;
  *((_QWORD *)this + 25) = 0;
  *((_QWORD *)this + 26) = (char *)this + 216;
  return this;
}

void sub_1BFC07BD8(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 135) < 0)
    operator delete(*(void **)(v1 + 112));
  if (*(char *)(v1 + 111) < 0)
    operator delete(*(void **)(v1 + 88));
  if (*(char *)(v1 + 87) < 0)
    operator delete(*v2);
  siri::dialogengine::LineNumberBase::~LineNumberBase((void **)v1);
  _Unwind_Resume(a1);
}

void siri::dialogengine::PatternFile::~PatternFile(siri::dialogengine::PatternFile *this)
{
  siri::dialogengine::PatternFile::~PatternFile(this);
  JUMPOUT(0x1C3B8D890);
}

{
  *(_QWORD *)this = &off_1E7937A80;
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(*((_QWORD **)this + 27));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*((_QWORD **)this + 24));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*((_QWORD **)this + 21));
  if (*((char *)this + 159) < 0)
    operator delete(*((void **)this + 17));
  if (*((char *)this + 135) < 0)
    operator delete(*((void **)this + 14));
  if (*((char *)this + 111) < 0)
    operator delete(*((void **)this + 11));
  if (*((char *)this + 87) < 0)
    operator delete(*((void **)this + 8));
  siri::dialogengine::LineNumberBase::~LineNumberBase((void **)this);
}

void siri::dialogengine::PatternFile::GetName(siri::dialogengine::PatternFile *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 87) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 8), *((_QWORD *)this + 9));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 4);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 10);
  }
}

std::string *siri::dialogengine::PatternFile::SetName(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 64), a2);
}

void siri::dialogengine::PatternFile::GetPath(siri::dialogengine::PatternFile *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 111) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 11), *((_QWORD *)this + 12));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 88);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 13);
  }
}

std::string *siri::dialogengine::PatternFile::SetPath(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 88), a2);
}

void siri::dialogengine::PatternFile::GetType(siri::dialogengine::PatternFile *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 135) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 14), *((_QWORD *)this + 15));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 7);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 16);
  }
}

std::string *siri::dialogengine::PatternFile::SetType(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 112), a2);
}

void siri::dialogengine::PatternFile::GetFormatVersion(siri::dialogengine::PatternFile *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 159) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 17), *((_QWORD *)this + 18));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 136);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 19);
  }
}

std::string *siri::dialogengine::PatternFile::SetFormatVersion(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 136), a2);
}

uint64_t siri::dialogengine::PatternFile::GetSettings@<X0>(const void ***this@<X0>, uint64_t a2@<X8>)
{
  return std::map<std::string,std::string>::map[abi:ne180100](a2, this + 20);
}

void siri::dialogengine::PatternFile::GetSettingsAsVariables(siri::dialogengine::PatternFile *this@<X0>, uint64_t a2@<X8>)
{
  __int128 *v2;
  char *v3;
  uint64_t v6;
  uint64_t *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  __int128 *v11;
  __int128 *v12;
  BOOL v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  std::string v16;
  void *__p;
  char v18;
  std::string *v19;

  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = a2 + 8;
  v2 = (__int128 *)*((_QWORD *)this + 20);
  v3 = (char *)this + 168;
  if (v2 != (__int128 *)((char *)this + 168))
  {
    do
    {
      std::pair<std::string const,std::string>::pair[abi:ne180100](&v16, v2 + 2);
      siri::dialogengine::PatternFile::GetSettingAsVariable((uint64_t)this, &v16, (uint64_t)&v14);
      v6 = v14;
      if (v14)
      {
        v19 = &v16;
        v7 = std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::Variable>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::Variable>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::Variable>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a2, (const void **)&v16.__r_.__value_.__l.__data_, (__int128 **)&v19);
        v8 = v15;
        std::shared_ptr<siri::dialogengine::PatternSchemaUsage>::operator=[abi:ne180100](v7 + 7, v6, (uint64_t)v15);
        if (v8)
          goto LABEL_6;
      }
      else
      {
        v8 = v15;
        if (v15)
        {
LABEL_6:
          p_shared_owners = (unint64_t *)&v8->__shared_owners_;
          do
            v10 = __ldaxr(p_shared_owners);
          while (__stlxr(v10 - 1, p_shared_owners));
          if (!v10)
          {
            ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
            std::__shared_weak_count::__release_weak(v8);
          }
        }
      }
      if (v18 < 0)
        operator delete(__p);
      if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v16.__r_.__value_.__l.__data_);
      v11 = (__int128 *)*((_QWORD *)v2 + 1);
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = *(__int128 **)v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (__int128 *)*((_QWORD *)v2 + 2);
          v13 = *(_QWORD *)v12 == (_QWORD)v2;
          v2 = v12;
        }
        while (!v13);
      }
      v2 = v12;
    }
    while (v12 != (__int128 *)v3);
  }
}

void sub_1BFC07EF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  _QWORD **v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::pair<std::string const,std::string>::~pair((uint64_t)va1);
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(*v2);
  _Unwind_Resume(a1);
}

void siri::dialogengine::PatternFile::GetSettingAsVariable(uint64_t a1@<X0>, std::string *a2@<X1>, uint64_t a3@<X8>)
{
  std::string *v6;
  __int128 v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  void *__p[2];
  char v12;
  std::string v13;
  std::string v14;
  uint64_t v15[3];
  _BYTE v16[3512];

  siri::dialogengine::Context::Context((siri::dialogengine::Context *)v16);
  siri::dialogengine::PatternFile::GetSetting(a1, (const void **)&a2->__r_.__value_.__l.__data_, &v14);
  std::string::basic_string[abi:ne180100]<0>(&v13, "");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  siri::dialogengine::ResolveValue((uint64_t)v16, (uint64_t)&v14, 1, (uint64_t)&v13, (uint64_t)__p, v15);
  if (v12 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  if (v15[0])
  {
    std::string::operator=((std::string *)(v15[0] + 8), a2);
    *(_OWORD *)a3 = *(_OWORD *)v15;
  }
  else
  {
    std::operator+<char>();
    v6 = std::string::append(&v13, "'");
    v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v14.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Log::LogWithLevel((uint64_t)&v14, 3u);
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v14.__r_.__value_.__l.__data_);
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v13.__r_.__value_.__l.__data_);
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    v8 = (std::__shared_weak_count *)v15[1];
    if (v15[1])
    {
      v9 = (unint64_t *)(v15[1] + 8);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
  siri::dialogengine::Context::~Context((siri::dialogengine::Context *)v16);
}

void sub_1BFC080A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,char a31)
{
  if (a26 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a28);
  siri::dialogengine::Context::~Context((siri::dialogengine::Context *)&a31);
  _Unwind_Resume(a1);
}

void siri::dialogengine::PatternFile::GetSetting(uint64_t a1@<X0>, const void **a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v5;
  __int128 v6;

  v5 = std::__tree<std::string>::find<std::string>(a1 + 160, a2);
  if (a1 + 168 == v5)
  {
    std::string::basic_string[abi:ne180100]<0>(a3, "");
  }
  else if (*(char *)(v5 + 79) < 0)
  {
    std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)(v5 + 56), *(_QWORD *)(v5 + 64));
  }
  else
  {
    v6 = *(_OWORD *)(v5 + 56);
    a3->__r_.__value_.__r.__words[2] = *(_QWORD *)(v5 + 72);
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v6;
  }
}

void siri::dialogengine::PatternFile::SetSettings(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = a1 + 160;
  if (v2 != a2)
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>(v2, *(__int128 **)a2, (__int128 *)(a2 + 8));
}

std::string *siri::dialogengine::PatternFile::AddSetting(uint64_t a1, __int128 *a2, const std::string *a3)
{
  uint64_t *v4;
  __int128 *v6;

  v6 = a2;
  v4 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 160), (const void **)a2, &v6);
  return std::string::operator=((std::string *)(v4 + 7), a3);
}

uint64_t siri::dialogengine::PatternFile::GetPrintSupportingDialog(uint64_t a1, int a2)
{
  uint64_t v3;
  void *__p[2];
  char v6;
  std::string v7;

  if ((a2 - 3) > 1)
    return 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "printSupportingDialogInDisplayModes");
  siri::dialogengine::PatternFile::GetSetting(a1, (const void **)__p, &v7);
  if (v6 < 0)
    operator delete(__p[0]);
  v3 = siri::dialogengine::StringToBool(&v7);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  return v3;
}

void sub_1BFC082A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::PatternFile::GetMetadata@<X0>(const void ***this@<X0>, uint64_t a2@<X8>)
{
  return std::map<std::string,std::string>::map[abi:ne180100](a2, this + 23);
}

void siri::dialogengine::PatternFile::GetMetadata(uint64_t a1@<X0>, const void **a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v5;
  __int128 v6;

  v5 = std::__tree<std::string>::find<std::string>(a1 + 184, a2);
  if (a1 + 192 == v5)
  {
    std::string::basic_string[abi:ne180100]<0>(a3, 0);
  }
  else if (*(char *)(v5 + 79) < 0)
  {
    std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)(v5 + 56), *(_QWORD *)(v5 + 64));
  }
  else
  {
    v6 = *(_OWORD *)(v5 + 56);
    a3->__r_.__value_.__r.__words[2] = *(_QWORD *)(v5 + 72);
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v6;
  }
}

void siri::dialogengine::PatternFile::SetMetadata(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = a1 + 184;
  if (v2 != a2)
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>(v2, *(__int128 **)a2, (__int128 *)(a2 + 8));
}

std::string *siri::dialogengine::PatternFile::AddMetadata(uint64_t a1, __int128 *a2, const std::string *a3)
{
  uint64_t *v4;
  __int128 *v6;

  v6 = a2;
  v4 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 184), (const void **)a2, &v6);
  return std::string::operator=((std::string *)(v4 + 7), a3);
}

uint64_t siri::dialogengine::PatternFile::GetPatternGroups@<X0>(const void ***this@<X0>, uint64_t a2@<X8>)
{
  return std::map<std::string,std::shared_ptr<siri::dialogengine::PatternGroup>>::map[abi:ne180100](a2, this + 26);
}

uint64_t std::map<std::string,std::shared_ptr<siri::dialogengine::PatternGroup>>::map[abi:ne180100](uint64_t a1, const void ***a2)
{
  uint64_t **v3;
  const void ***v4;
  const void **v5;
  uint64_t v6;
  uint64_t **v7;
  uint64_t v8;
  BOOL v9;
  uint64_t **v10;
  const void **v11;
  const void ***v12;
  uint64_t *v14[3];
  _QWORD *v15;

  *(_QWORD *)(a1 + 8) = 0;
  v3 = (uint64_t **)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  v4 = a2 + 1;
  v5 = *a2;
  if (*a2 != (const void **)(a2 + 1))
  {
    while (1)
    {
      v6 = *(_QWORD *)(a1 + 8);
      if (*(uint64_t ***)a1 == v3)
        break;
      v7 = v3;
      if (v6)
      {
        do
        {
          v8 = v6;
          v6 = *(_QWORD *)(v6 + 8);
        }
        while (v6);
      }
      else
      {
        do
        {
          v8 = (uint64_t)v7[2];
          v9 = *(_QWORD *)v8 == (_QWORD)v7;
          v7 = (uint64_t **)v8;
        }
        while (v9);
      }
      if (std::less<std::string>::operator()[abi:ne180100](a1 + 16, (const void **)(v8 + 32), v5 + 4))
      {
        if (!*v3)
          goto LABEL_9;
LABEL_11:
        v15 = (_QWORD *)v8;
        v10 = (uint64_t **)(v8 + 8);
        goto LABEL_13;
      }
      v10 = (uint64_t **)std::__tree<std::string>::__find_equal<std::string>(a1, &v15, v5 + 4);
LABEL_13:
      if (!*v10)
        goto LABEL_14;
LABEL_15:
      v11 = (const void **)v5[1];
      if (v11)
      {
        do
        {
          v12 = (const void ***)v11;
          v11 = (const void **)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (const void ***)v5[2];
          v9 = *v12 == v5;
          v5 = (const void **)v12;
        }
        while (!v9);
      }
      v5 = (const void **)v12;
      if (v12 == v4)
        return a1;
    }
    v8 = (uint64_t)v3;
    if (!v6)
    {
LABEL_9:
      v15 = v3;
      v10 = v3;
LABEL_14:
      std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::PatternGroup>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::PatternGroup>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::PatternGroup>>>>::__construct_node<std::pair<std::string const,std::shared_ptr<siri::dialogengine::PatternGroup>> const&>((uint64_t)v14, a1, (__int128 *)v5 + 2);
      std::__tree<std::string>::__insert_node_at((uint64_t **)a1, (uint64_t)v15, v10, v14[0]);
      v14[0] = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,void *>>>>::reset[abi:ne180100]((uint64_t)v14);
      goto LABEL_15;
    }
    goto LABEL_11;
  }
  return a1;
}

void sub_1BFC0851C(_Unwind_Exception *a1)
{
  _QWORD **v1;

  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(*v1);
  _Unwind_Resume(a1);
}

std::string *std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::PatternGroup>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::PatternGroup>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::PatternGroup>>>>::__construct_node<std::pair<std::string const,std::shared_ptr<siri::dialogengine::PatternGroup>> const&>(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t v5;
  char *v6;
  std::string *result;

  v5 = a2 + 8;
  v6 = (char *)operator new(0x48uLL);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = 0;
  result = std::pair<std::string const,std::shared_ptr<siri::dialogengine::JSONValue>>::pair[abi:ne180100]((std::string *)(v6 + 32), a3);
  *(_BYTE *)(a1 + 16) = 1;
  return result;
}

void sub_1BFC08580(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,void *>>>>::reset[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::PatternFile::GetPatternGroup@<X0>(uint64_t a1@<X0>, const void **a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t result;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  result = std::__tree<std::string>::find<std::string>(a1 + 208, a2);
  if (a1 + 216 == result)
  {
    *a3 = 0;
    a3[1] = 0;
  }
  else
  {
    v6 = *(_QWORD *)(result + 64);
    *a3 = *(_QWORD *)(result + 56);
    a3[1] = v6;
    if (v6)
    {
      v7 = (unint64_t *)(v6 + 8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
  }
  return result;
}

void siri::dialogengine::PatternFile::SetPatternGroups(uint64_t a1, _QWORD *a2)
{
  uint64_t **v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t **leaf_high;
  _QWORD *v11;
  _QWORD *v12;
  BOOL v13;
  uint64_t *v14;
  uint64_t **v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t **v19;
  _QWORD *v20;
  _QWORD *v21;

  v2 = (uint64_t **)(a1 + 208);
  if ((_QWORD *)(a1 + 208) != a2)
  {
    v3 = a2 + 1;
    v4 = (_QWORD *)*a2;
    if (*(_QWORD *)(a1 + 224))
    {
      v6 = *(_QWORD *)(a1 + 216);
      v5 = (_QWORD *)(a1 + 216);
      v7 = (_QWORD *)*(v5 - 1);
      *(v5 - 1) = v5;
      *(_QWORD *)(v6 + 16) = 0;
      *v5 = 0;
      v5[1] = 0;
      if (v7[1])
        v8 = (_QWORD *)v7[1];
      else
        v8 = v7;
      v19 = v2;
      v20 = v8;
      v21 = v8;
      if (!v8 || (v20 = std::__tree<std::string>::_DetachedTreeCache::__detach_next((uint64_t)v8), v4 == v3))
      {
        v12 = v4;
      }
      else
      {
        do
        {
          std::string::operator=((std::string *)(v8 + 4), (const std::string *)(v4 + 4));
          std::shared_ptr<siri::dialogengine::PatternSchemaUsage>::operator=[abi:ne180100](v8 + 7, v4[7], v4[8]);
          v9 = v21;
          leaf_high = (uint64_t **)std::__tree<std::string>::__find_leaf_high((uint64_t)v2, &v18, (const void **)v21 + 4);
          std::__tree<std::string>::__insert_node_at(v2, v18, leaf_high, v9);
          v8 = v20;
          v21 = v20;
          if (v20)
            v20 = std::__tree<std::string>::_DetachedTreeCache::__detach_next((uint64_t)v20);
          v11 = (_QWORD *)v4[1];
          if (v11)
          {
            do
            {
              v12 = v11;
              v11 = (_QWORD *)*v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              v12 = (_QWORD *)v4[2];
              v13 = *v12 == (_QWORD)v4;
              v4 = v12;
            }
            while (!v13);
          }
          if (!v8)
            break;
          v4 = v12;
        }
        while (v12 != v3);
      }
      std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::PatternSetting>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::PatternSetting>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::PatternSetting>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v19);
      v4 = v12;
    }
    if (v4 != v3)
    {
      do
      {
        std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::PatternGroup>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::PatternGroup>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::PatternGroup>>>>::__construct_node<std::pair<std::string const,std::shared_ptr<siri::dialogengine::PatternGroup>> const&>((uint64_t)&v19, (uint64_t)v2, (__int128 *)v4 + 2);
        v14 = (uint64_t *)v19;
        v15 = (uint64_t **)std::__tree<std::string>::__find_leaf_high((uint64_t)v2, &v18, (const void **)v19 + 4);
        std::__tree<std::string>::__insert_node_at(v2, v18, v15, v14);
        v19 = 0;
        std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v19);
        v16 = (_QWORD *)v4[1];
        if (v16)
        {
          do
          {
            v17 = v16;
            v16 = (_QWORD *)*v16;
          }
          while (v16);
        }
        else
        {
          do
          {
            v17 = (_QWORD *)v4[2];
            v13 = *v17 == (_QWORD)v4;
            v4 = v17;
          }
          while (!v13);
        }
        v4 = v17;
      }
      while (v17 != v3);
    }
  }
}

void sub_1BFC087A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::PatternSetting>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::PatternSetting>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::PatternSetting>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void siri::dialogengine::PatternFile::AddPatternGroup(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t **v5;
  void **v6;
  _OWORD *v7;
  uint64_t **v8;
  std::string::size_type v9;
  std::string __p;
  _QWORD v11[2];
  char v12;
  uint64_t v13;

  v2 = *a2;
  if (*a2)
  {
    v5 = (uint64_t **)(a1 + 208);
    if (*(char *)(v2 + 87) < 0)
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v2 + 64), *(_QWORD *)(v2 + 72));
    else
      __p = *(std::string *)(v2 + 64);
    v6 = (void **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)v5, &v13, (const void **)&__p.__r_.__value_.__l.__data_);
    v7 = *v6;
    if (!*v6)
    {
      v8 = (uint64_t **)v6;
      v7 = operator new(0x48uLL);
      v11[1] = a1 + 216;
      v7[2] = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      v9 = __p.__r_.__value_.__r.__words[2];
      memset(&__p, 0, sizeof(__p));
      *((_QWORD *)v7 + 7) = 0;
      *((_QWORD *)v7 + 8) = 0;
      *((_QWORD *)v7 + 6) = v9;
      v12 = 1;
      std::__tree<std::string>::__insert_node_at(v5, v13, v8, (uint64_t *)v7);
      v11[0] = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,void *>>>>::reset[abi:ne180100]((uint64_t)v11);
    }
    std::shared_ptr<siri::dialogengine::PatternSchemaUsage>::operator=[abi:ne180100]((_QWORD *)v7 + 7, *a2, a2[1]);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1BFC088B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL siri::dialogengine::ValidateSettingValue(_QWORD *a1, uint64_t a2)
{
  int v3;
  BOOL v4;
  uint64_t v5;
  uint64_t *v7;
  uint64_t i;
  uint64_t m;
  _BOOL8 v14;
  uint64_t k;
  uint64_t j;
  _BYTE v18[16];
  uint64_t *v19;
  void *__p[2];
  char v21;
  unsigned __int8 v22[24];
  _QWORD v23[3];
  _QWORD v24[4];

  v24[3] = *MEMORY[0x1E0C80C00];
  siri::dialogengine::StringToLower(a2, (uint64_t)__p);
  if (*((char *)a1 + 23) < 0)
  {
    v5 = a1[1];
    if (v5 != 10)
    {
      if (v5 != 11)
      {
        if (v5 != 14)
          goto LABEL_49;
        if (*(_QWORD *)*a1 != 0x6F4C6C6175736976 || *(_QWORD *)(*a1 + 6) != 0x6E6F697461636F4CLL)
          goto LABEL_49;
LABEL_19:
        std::string::basic_string[abi:ne180100]<0>(v22, "conversationspace");
        std::string::basic_string[abi:ne180100]<0>(v23, "snippetspace");
        std::unordered_set<std::string>::unordered_set((uint64_t)v18, v22, 2);
        v7 = std::__find_impl[abi:ne180100]<std::__hash_const_iterator<std::__hash_node<std::string,void *> *>,std::__hash_const_iterator<std::__hash_node<std::string,void *> *>,std::string,std::__identity>(v19, (unsigned __int8 **)__p);
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v18);
        for (i = 0; i != -6; i -= 3)
        {
          if (SHIBYTE(v23[i + 2]) < 0)
            operator delete(*(void **)&v22[i * 8 + 24]);
        }
        goto LABEL_59;
      }
      if (*(_QWORD *)*a1 != 0x7242776F646E6977 || *(_QWORD *)(*a1 + 3) != 0x6B61657242776F64)
        goto LABEL_49;
LABEL_55:
      std::string::basic_string[abi:ne180100]<0>(v22, "sentence");
      std::string::basic_string[abi:ne180100]<0>(v23, "word");
      std::unordered_set<std::string>::unordered_set((uint64_t)v18, v22, 2);
      v7 = std::__find_impl[abi:ne180100]<std::__hash_const_iterator<std::__hash_node<std::string,void *> *>,std::__hash_const_iterator<std::__hash_node<std::string,void *> *>,std::string,std::__identity>(v19, (unsigned __int8 **)__p);
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v18);
      for (j = 0; j != -6; j -= 3)
      {
        if (SHIBYTE(v23[j + 2]) < 0)
          operator delete(*(void **)&v22[j * 8 + 24]);
      }
      goto LABEL_59;
    }
    a1 = (_QWORD *)*a1;
  }
  else
  {
    v3 = *((unsigned __int8 *)a1 + 23);
    if (v3 != 10)
    {
      if (v3 != 11)
      {
        if (v3 != 14
          || (*a1 == 0x6F4C6C6175736976 ? (v4 = *(_QWORD *)((char *)a1 + 6) == 0x6E6F697461636F4CLL) : (v4 = 0), !v4))
        {
LABEL_49:
          v14 = 1;
          goto LABEL_60;
        }
        goto LABEL_19;
      }
      if (*a1 != 0x7242776F646E6977 || *(_QWORD *)((char *)a1 + 3) != 0x6B61657242776F64)
        goto LABEL_49;
      goto LABEL_55;
    }
  }
  if (*a1 == 0x795474706D6F7270 && *((_WORD *)a1 + 4) == 25968)
  {
    std::string::basic_string[abi:ne180100]<0>(v22, "action");
    std::string::basic_string[abi:ne180100]<0>(v23, "continuation");
    std::unordered_set<std::string>::unordered_set((uint64_t)v18, v22, 2);
    v7 = std::__find_impl[abi:ne180100]<std::__hash_const_iterator<std::__hash_node<std::string,void *> *>,std::__hash_const_iterator<std::__hash_node<std::string,void *> *>,std::string,std::__identity>(v19, (unsigned __int8 **)__p);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v18);
    for (k = 0; k != -6; k -= 3)
    {
      if (SHIBYTE(v23[k + 2]) < 0)
        operator delete(*(void **)&v22[k * 8 + 24]);
    }
  }
  else
  {
    if (*a1 != 0x7954776F646E6977 || *((_WORD *)a1 + 4) != 25968)
      goto LABEL_49;
    std::string::basic_string[abi:ne180100]<0>(v22, "character");
    std::string::basic_string[abi:ne180100]<0>(v23, "sentence");
    std::string::basic_string[abi:ne180100]<0>(v24, "word");
    std::unordered_set<std::string>::unordered_set((uint64_t)v18, v22, 3);
    v7 = std::__find_impl[abi:ne180100]<std::__hash_const_iterator<std::__hash_node<std::string,void *> *>,std::__hash_const_iterator<std::__hash_node<std::string,void *> *>,std::string,std::__identity>(v19, (unsigned __int8 **)__p);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v18);
    for (m = 0; m != -9; m -= 3)
    {
      if (SHIBYTE(v24[m + 2]) < 0)
        operator delete((void *)v24[m]);
    }
  }
LABEL_59:
  v14 = v7 != 0;
LABEL_60:
  if (v21 < 0)
    operator delete(__p[0]);
  return v14;
}

void sub_1BFC08CC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  uint64_t v25;
  uint64_t v27;

  v27 = 0;
  while (1)
  {
    if (*(char *)(v25 + v27 + 71) < 0)
      operator delete(*(void **)(v25 + v27 + 48));
    v27 -= 24;
    if (v27 == -72)
    {
      if (a19 < 0)
        operator delete(__p);
      _Unwind_Resume(exception_object);
    }
  }
}

uint64_t *std::__find_impl[abi:ne180100]<std::__hash_const_iterator<std::__hash_node<std::string,void *> *>,std::__hash_const_iterator<std::__hash_node<std::string,void *> *>,std::string,std::__identity>(uint64_t *a1, unsigned __int8 **a2)
{
  uint64_t *v2;
  char v3;
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  uint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;

  v2 = a1;
  if (a1)
  {
    v3 = *((_BYTE *)a2 + 23);
    if (v3 >= 0)
      v4 = (unsigned __int8 *)*((unsigned __int8 *)a2 + 23);
    else
      v4 = a2[1];
    if (v3 >= 0)
      v5 = (unsigned __int8 *)a2;
    else
      v5 = *a2;
    do
    {
      v6 = *((unsigned __int8 *)v2 + 39);
      if ((v6 & 0x80u) == 0)
        v7 = (unsigned __int8 *)*((unsigned __int8 *)v2 + 39);
      else
        v7 = (unsigned __int8 *)v2[3];
      if (v7 == v4)
      {
        if ((v6 & 0x80) != 0)
        {
          if (!memcmp((const void *)v2[2], v5, v2[3]))
            return v2;
        }
        else
        {
          if (!*((_BYTE *)v2 + 39))
            return v2;
          v8 = 0;
          while (*((unsigned __int8 *)v2 + v8 + 16) == v5[v8])
          {
            if (v6 == ++v8)
              return v2;
          }
        }
      }
      v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  return v2;
}

uint64_t siri::dialogengine::PatternFile::Validate(siri::dialogengine::PatternFile *this, siri::dialogengine::Context *a2)
{
  uint64_t v2;
  Context *v3;
  uint64_t v4;
  std::string *v5;
  const char *v6;
  xmlDoc *v7;
  _BOOL4 v8;
  uint64_t v9;
  std::__split_buffer<std::string>::pointer v10;
  std::__split_buffer<std::string>::pointer end_high;
  int v12;
  unsigned __int8 *first;
  uint64_t v14;
  unsigned __int8 *v15;
  int v16;
  int v17;
  int v18;
  _BOOL4 v19;
  BOOL v20;
  int v21;
  std::string *v22;
  __int128 v23;
  const std::string::value_type *v24;
  std::string::size_type begin;
  std::string *v26;
  __int128 v27;
  std::string::size_type *v28;
  std::string::size_type v29;
  std::string::size_type v30;
  unint64_t *v31;
  unint64_t v32;
  __int128 v33;
  uint64_t v34;
  std::string::size_type v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  std::__split_buffer<std::string>::pointer v39;
  _QWORD *v40;
  std::string *v41;
  std::string::size_type v42;
  _QWORD *v43;
  _QWORD *v44;
  std::string *v45;
  std::string::size_type v46;
  _QWORD *v47;
  int v48;
  std::__split_buffer<std::string>::pointer v49;
  std::__split_buffer<std::string>::pointer v50;
  char v51;
  int v52;
  std::string::size_type v53;
  std::__shared_weak_count *v54;
  unint64_t *p_shared_owners;
  unint64_t v56;
  int v57;
  int v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  std::__split_buffer<std::string>::pointer v62;
  std::__split_buffer<std::string>::pointer v63;
  std::string *v64;
  __int128 v65;
  std::__split_buffer<std::string>::pointer v66;
  std::string *v67;
  __int128 v68;
  std::__split_buffer<std::string>::pointer v69;
  std::__split_buffer<std::string>::pointer v70;
  char v71;
  int v72;
  std::string::size_type v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  int v77;
  int v78;
  unint64_t *v79;
  unint64_t v80;
  uint64_t v81;
  std::__split_buffer<std::string>::pointer v82;
  std::string *v83;
  __int128 v84;
  std::__split_buffer<std::string>::pointer v85;
  std::string *v86;
  __int128 v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  __int128 *v94;
  std::__split_buffer<std::string>::pointer v95;
  std::__split_buffer<std::string>::pointer v96;
  _BOOL4 v97;
  std::string *v98;
  __int128 v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  __int128 *v106;
  __int128 *v107;
  std::string::size_type v108;
  uint64_t v109;
  uint64_t v110;
  std::string::size_type v111;
  int v112;
  unint64_t v113;
  uint64_t v114;
  __int128 v115;
  std::string::size_type v116;
  std::string *v117;
  __int128 v118;
  std::string *v119;
  __int128 v120;
  int v121;
  const std::string::value_type *v122;
  std::string::size_type v123;
  std::string *v124;
  __int128 v125;
  std::string *v126;
  __int128 v127;
  uint64_t v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  int v132;
  uint64_t v133;
  unint64_t *v134;
  unint64_t v135;
  std::__shared_weak_count *v136;
  uint64_t v137;
  unint64_t *v138;
  unint64_t v139;
  std::string *v140;
  std::string::size_type v141;
  std::string *v142;
  __int128 v143;
  std::string *v144;
  __int128 v145;
  unint64_t *v146;
  unint64_t v147;
  std::__shared_weak_count *v148;
  unint64_t *v149;
  unint64_t v150;
  std::string *v151;
  __int128 v152;
  std::string *v153;
  std::string::size_type v154;
  std::string *v155;
  __int128 v156;
  uint64_t v157;
  unint64_t *v158;
  unint64_t v159;
  std::__shared_weak_count *v160;
  uint64_t v161;
  unint64_t *v162;
  unint64_t v163;
  unint64_t *v164;
  unint64_t v165;
  std::__shared_weak_count *v166;
  unint64_t *v167;
  unint64_t v168;
  unint64_t *v169;
  unint64_t v170;
  std::string::size_type v171;
  std::string *v172;
  __int128 v173;
  std::string *v174;
  __int128 v175;
  std::string *v176;
  std::string::size_type v177;
  std::string *v178;
  __int128 v179;
  std::string *v180;
  __int128 v181;
  std::string *v182;
  __int128 v183;
  std::string *p_str;
  std::string::size_type v185;
  std::string *v186;
  __int128 v187;
  uint64_t v188;
  _OWORD *v189;
  std::string::size_type v190;
  int v191;
  std::string::size_type v192;
  int v193;
  uint64_t v194;
  std::__shared_weak_count *v195;
  unint64_t *v196;
  unint64_t v197;
  uint64_t v198;
  unint64_t *v199;
  unint64_t v200;
  uint64_t v201;
  std::__shared_weak_count *v202;
  unint64_t *v203;
  unint64_t v204;
  unint64_t *v205;
  unint64_t v206;
  std::__shared_weak_count *v207;
  unint64_t *v208;
  unint64_t v209;
  std::string *v210;
  __int128 v211;
  std::string *v212;
  __int128 v213;
  std::string *v214;
  __int128 v215;
  std::string *v216;
  std::string::size_type v217;
  std::string *v218;
  __int128 v219;
  std::string *v220;
  std::string::size_type v221;
  std::string *v222;
  __int128 v223;
  uint64_t v224;
  unint64_t *v225;
  unint64_t v226;
  uint64_t v227;
  std::__shared_weak_count *v228;
  unint64_t *v229;
  unint64_t v230;
  unint64_t *v231;
  unint64_t v232;
  std::__shared_weak_count *v233;
  unint64_t *v234;
  unint64_t v235;
  unint64_t *v236;
  unint64_t v237;
  _OWORD *v238;
  std::__split_buffer<std::string>::pointer v239;
  __n128 v240;
  __int128 v241;
  unint64_t *v242;
  unint64_t v243;
  uint64_t v244;
  unint64_t *v245;
  unint64_t v246;
  std::__shared_weak_count *v247;
  uint64_t v248;
  unint64_t *v249;
  unint64_t v250;
  std::string::size_type v251;
  std::string *v252;
  __int128 v253;
  std::string *v254;
  __int128 v255;
  std::string *v256;
  std::string::size_type v257;
  std::string *v258;
  __int128 v259;
  std::string *v260;
  __int128 v261;
  unint64_t *v262;
  unint64_t v263;
  unint64_t *v264;
  unint64_t v265;
  unint64_t *v266;
  unint64_t v267;
  std::__shared_weak_count *v268;
  unint64_t *v269;
  unint64_t v270;
  std::string::size_type v271;
  std::string *v272;
  siri::dialogengine::PatternSchema *v273;
  uint64_t v274;
  std::__shared_weak_count *v275;
  uint64_t v276;
  unint64_t *v277;
  unint64_t v278;
  std::string *v279;
  __int128 v280;
  std::__shared_weak_count *v281;
  unint64_t *v282;
  unint64_t v283;
  std::string *v284;
  std::string *v285;
  std::__split_buffer<std::string>::pointer v286;
  _QWORD *v287;
  int v288;
  uint64_t v289;
  uint64_t v290;
  _QWORD *v291;
  _QWORD *v292;
  std::string *v293;
  std::string::size_type v294;
  _QWORD *v295;
  _QWORD *v296;
  std::string *v297;
  std::string::size_type v298;
  uint64_t v299;
  size_t v300;
  size_t v301;
  std::string::size_type v302;
  std::string *v303;
  std::string::size_type v304;
  std::string::size_type v305;
  std::string *v306;
  std::string *v307;
  std::string *v308;
  __int128 v309;
  int v310;
  const std::string::value_type *v311;
  std::string::size_type v312;
  std::string *v313;
  __int128 v314;
  std::string *v315;
  __int128 v316;
  std::string *v317;
  std::string::size_type v318;
  std::string *v319;
  __int128 v320;
  void *v321;
  std::string *v322;
  __int128 v323;
  int v324;
  const std::string::value_type *v325;
  std::string::size_type v326;
  std::string *v327;
  __int128 v328;
  std::string *v329;
  __int128 v330;
  std::string *v331;
  std::string::size_type v332;
  std::string *v333;
  __int128 v334;
  std::string *v335;
  __int128 v336;
  std::string *v337;
  std::string::size_type v338;
  std::string *v339;
  __int128 v340;
  std::__split_buffer<std::string>::pointer v342;
  _BOOL4 v344;
  std::string *v345;
  __int128 v346;
  int v347;
  const std::string::value_type *v348;
  std::string::size_type v349;
  std::string *v350;
  __int128 v351;
  std::string **v352;
  std::string::size_type v353;
  _QWORD *i;
  uint64_t v355;
  _OWORD *v356;
  __int128 v357;
  unint64_t v358;
  unint64_t v359;
  unint64_t v360;
  std::string *v361;
  std::string *v362;
  __int128 v363;
  std::string::size_type v364;
  _QWORD *v365;
  int v366;
  uint64_t v367;
  uint64_t v368;
  _QWORD *v369;
  _QWORD *v370;
  std::string *v371;
  std::string::size_type v372;
  _QWORD *v373;
  std::string *v374;
  std::string *v375;
  std::__shared_weak_count *v376;
  unint64_t *v377;
  unint64_t v378;
  const void **v380;
  std::string *v381;
  std::string *v382;
  std::string *v383;
  std::string *v384;
  std::string *v385;
  _BOOL4 v386;
  int v387;
  std::string *v388;
  std::string *v389;
  std::string *v390;
  std::string *v391;
  std::__shared_weak_count *v392;
  std::string *v393;
  std::string *v394;
  uint64_t v395;
  std::string *v396;
  siri::dialogengine::RequestInfo *size;
  siri::dialogengine::RequestInfo *v398;
  Context *v399;
  std::__shared_weak_count *v400;
  uint64_t v401;
  std::__shared_weak_count *v402;
  std::string v403;
  uint64_t v404;
  std::__shared_weak_count *v405;
  __int128 *v406;
  _QWORD *v407[2];
  siri::dialogengine::PatternSchema *v408;
  std::__shared_weak_count *v409;
  void *__p[2];
  char v411;
  void *v412[8];
  void *v413[2];
  unsigned __int8 v414;
  std::string v415;
  uint64_t v416;
  std::__shared_weak_count *v417;
  std::string __str;
  std::string v419;
  std::__split_buffer<std::string> v420;
  char v421;
  uint64_t v422;
  uint64_t v423;
  void *v424;
  char v425;
  _BYTE v426[376];
  __int128 v427;
  std::string v428;
  std::string v429;
  std::string v430;
  std::string v431;
  std::string v432;
  std::string v433;
  std::string v434;
  __int128 v435;
  char v436;
  uint64_t v437;
  uint64_t v438;
  std::string v439[7];
  std::string v440[5];
  std::string v441[4];
  uint64_t v442;

  v2 = MEMORY[0x1E0C80A78](this);
  v399 = v3;
  v4 = v2;
  v442 = *MEMORY[0x1E0C80C00];
  v5 = (std::string *)(v2 + 88);
  siri::dialogengine::LineNumberBase::LineNumberBase((uint64_t)v412, 0, (const std::string *)(v2 + 88));
  std::string::basic_string[abi:ne180100]<0>(__p, "Pattern.dtd");
  if (*(char *)(v4 + 111) >= 0)
    v6 = (const char *)v5;
  else
    v6 = *(const char **)(v4 + 88);
  v7 = xmlParseFile(v6);
  v8 = siri::dialogengine::ValidateXmlDoc(v399, v7, (uint64_t)__p);
  if (v411 < 0)
    operator delete(__p[0]);
  siri::dialogengine::PatternRegistry::GetSchema((uint64_t *)v399, (const std::string::value_type **)(v4 + 112), (uint64_t *)&v408);
  if (v408)
  {
    siri::dialogengine::CatPathToId((unsigned __int8 *)v5, &v420);
    v380 = (const void **)(v4 + 64);
    v9 = *(unsigned __int8 *)(v4 + 87);
    if ((v9 & 0x80u) == 0)
      v10 = (std::__split_buffer<std::string>::pointer)*(unsigned __int8 *)(v4 + 87);
    else
      v10 = *(std::__split_buffer<std::string>::pointer *)(v4 + 72);
    end_high = (std::__split_buffer<std::string>::pointer)HIBYTE(v420.__end_);
    v12 = SHIBYTE(v420.__end_);
    if (SHIBYTE(v420.__end_) < 0)
      end_high = v420.__begin_;
    if (v10 == end_high)
    {
      if (SHIBYTE(v420.__end_) >= 0)
        first = (unsigned __int8 *)&v420;
      else
        first = (unsigned __int8 *)v420.__first_;
      if ((v9 & 0x80) != 0)
      {
        v19 = memcmp(*v380, first, *(_QWORD *)(v4 + 72)) != 0;
      }
      else if (*(_BYTE *)(v4 + 87))
      {
        v14 = v9 - 1;
        v15 = (unsigned __int8 *)(v4 + 64);
        do
        {
          v17 = *v15++;
          v16 = v17;
          v18 = *first++;
          v19 = v16 != v18;
          v20 = v16 != v18 || v14-- == 0;
        }
        while (!v20);
      }
      else
      {
        v19 = 0;
      }
    }
    else
    {
      v19 = 1;
    }
    if (v12 < 0)
      operator delete(v420.__first_);
    if (v19)
    {
      siri::dialogengine::DirName(v5, (uint64_t)&v403);
      siri::dialogengine::BaseName((uint64_t)&v403, &v434);
      siri::dialogengine::BaseName((uint64_t)v5, &v433);
      siri::dialogengine::JoinPath((uint64_t)&v434, (uint64_t)&v433, (uint64_t)&v420);
      if (SHIBYTE(v433.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v433.__r_.__value_.__l.__data_);
      if (SHIBYTE(v434.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v434.__r_.__value_.__l.__data_);
      if (SHIBYTE(v403.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v403.__r_.__value_.__l.__data_);
      std::operator+<char>();
      v22 = std::string::append(&v433, "' does not match file path: ");
      v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
      v403.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v403.__r_.__value_.__l.__data_ = v23;
      v22->__r_.__value_.__l.__size_ = 0;
      v22->__r_.__value_.__r.__words[2] = 0;
      v22->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v420.__end_) >= 0)
        v24 = (const std::string::value_type *)&v420;
      else
        v24 = (const std::string::value_type *)v420.__first_;
      if (SHIBYTE(v420.__end_) >= 0)
        begin = HIBYTE(v420.__end_);
      else
        begin = (std::string::size_type)v420.__begin_;
      v26 = std::string::append(&v403, v24, begin);
      v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
      v434.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v434.__r_.__value_.__l.__data_ = v27;
      v26->__r_.__value_.__l.__size_ = 0;
      v26->__r_.__value_.__r.__words[2] = 0;
      v26->__r_.__value_.__r.__words[0] = 0;
      siri::dialogengine::Context::AddValidationError((uint64_t)v399, (__int128 *)&v434, (uint64_t)v412);
      if (SHIBYTE(v434.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v434.__r_.__value_.__l.__data_);
      if (SHIBYTE(v403.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v403.__r_.__value_.__l.__data_);
      if (SHIBYTE(v433.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v433.__r_.__value_.__l.__data_);
      if (SHIBYTE(v420.__end_) < 0)
        operator delete(v420.__first_);
    }
    v381 = v5;
    v386 = v8;
    siri::dialogengine::PatternSchema::GetGroups((char *)v408, &v434);
    size = (siri::dialogengine::RequestInfo *)v434.__r_.__value_.__l.__size_;
    v28 = (std::string::size_type *)v434.__r_.__value_.__r.__words[0];
    if (v434.__r_.__value_.__r.__words[0] != v434.__r_.__value_.__l.__size_)
    {
      v385 = (std::string *)*MEMORY[0x1E0DE4F50];
      v383 = *(std::string **)(MEMORY[0x1E0DE4F50] + 72);
      v384 = *(std::string **)(MEMORY[0x1E0DE4F50] + 64);
      v382 = (std::string *)(MEMORY[0x1E0DE4FB8] + 16);
      do
      {
        v30 = *v28;
        v29 = v28[1];
        v432.__r_.__value_.__r.__words[0] = *v28;
        v432.__r_.__value_.__l.__size_ = v29;
        if (v29)
        {
          v31 = (unint64_t *)(v29 + 8);
          do
            v32 = __ldxr(v31);
          while (__stxr(v32 + 1, v31));
        }
        if (*(char *)(v30 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(&v403, *(const std::string::value_type **)(v30 + 8), *(_QWORD *)(v30 + 16));
        }
        else
        {
          v33 = *(_OWORD *)(v30 + 8);
          v403.__r_.__value_.__r.__words[2] = *(_QWORD *)(v30 + 24);
          *(_OWORD *)&v403.__r_.__value_.__l.__data_ = v33;
        }
        v34 = std::__tree<std::string>::find<std::string>(v4 + 208, (const void **)&v403.__r_.__value_.__l.__data_);
        if (v4 + 216 == v34)
        {
          v36 = 0;
          *(_OWORD *)&v431.__r_.__value_.__l.__data_ = 0uLL;
LABEL_74:
          LODWORD(v39) = 1;
          goto LABEL_95;
        }
        v36 = *(_QWORD *)(v34 + 56);
        v35 = *(_QWORD *)(v34 + 64);
        v431.__r_.__value_.__r.__words[0] = v36;
        v431.__r_.__value_.__l.__size_ = v35;
        if (v35)
        {
          v37 = (unint64_t *)(v35 + 8);
          do
            v38 = __ldxr(v37);
          while (__stxr(v38 + 1, v37));
        }
        if (!v36)
          goto LABEL_74;
        (*(void (**)(std::__split_buffer<std::string> *__return_ptr, std::string::size_type))(*(_QWORD *)v30 + 96))(&v420, v30);
        if (SHIBYTE(v420.__end_) >= 0)
          v39 = (std::__split_buffer<std::string>::pointer)HIBYTE(v420.__end_);
        else
          v39 = v420.__begin_;
        if (SHIBYTE(v420.__end_) < 0)
        {
          operator delete(v420.__first_);
          if (!v39)
            goto LABEL_95;
        }
        else if (!v39)
        {
          goto LABEL_95;
        }
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v420);
        v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v420.__end_, (uint64_t)"Pattern uses deprecated group '", 31);
        if ((v403.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v41 = &v403;
        else
          v41 = (std::string *)v403.__r_.__value_.__r.__words[0];
        if ((v403.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v42 = HIBYTE(v403.__r_.__value_.__r.__words[2]);
        else
          v42 = v403.__r_.__value_.__l.__size_;
        v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)v41, v42);
        v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"' (", 3);
        (*(void (**)(std::string *__return_ptr, std::string::size_type))(*(_QWORD *)v30 + 96))(&v433, v30);
        if ((v433.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v45 = &v433;
        else
          v45 = (std::string *)v433.__r_.__value_.__r.__words[0];
        if ((v433.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v46 = HIBYTE(v433.__r_.__value_.__r.__words[2]);
        else
          v46 = v433.__r_.__value_.__l.__size_;
        v47 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)v45, v46);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)")", 1);
        if (SHIBYTE(v433.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v433.__r_.__value_.__l.__data_);
        std::stringbuf::str();
        siri::dialogengine::Context::AddValidationWarning((uint64_t)v399, (__int128 *)&v433, v36);
        if (SHIBYTE(v433.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v433.__r_.__value_.__l.__data_);
        v420.__first_ = v385;
        *(std::__split_buffer<std::string>::pointer *)((char *)&v420.__first_ + v385[-1].__r_.__value_.__r.__words[0]) = v384;
        v420.__end_ = v383;
        v420.__end_cap_.__value_ = v382;
        if (v425 < 0)
          operator delete(v424);
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        MEMORY[0x1C3B8D80C](v426);
        LODWORD(v39) = 0;
        v386 = 0;
LABEL_95:
        (*(void (**)(std::__split_buffer<std::string> *__return_ptr, std::string::size_type))(*(_QWORD *)v30 + 40))(&v420, v30);
        v48 = siri::dialogengine::ResolveUsage((uint64_t)v399, v4, (int ***)&v420);
        v433.__r_.__value_.__r.__words[0] = (std::string::size_type)&v420;
        std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v433);
        if (v48 == 4)
        {
          if ((v39 & 1) == 0)
          {
            std::operator+<char>();
            siri::dialogengine::Context::AddValidationError((uint64_t)v399, (__int128 *)&v420, v36);
            goto LABEL_123;
          }
        }
        else if (v48 == 1 && (_DWORD)v39)
        {
          std::operator+<char>();
          siri::dialogengine::Context::AddValidationError((uint64_t)v399, (__int128 *)&v420, (uint64_t)v412);
LABEL_123:
          if ((SHIBYTE(v420.__end_) & 0x80000000) == 0)
            goto LABEL_206;
          v62 = v420.__first_;
          goto LABEL_125;
        }
        (*(void (**)(std::__split_buffer<std::string> *__return_ptr, std::string::size_type))(*(_QWORD *)v30 + 56))(&v420, v30);
        v50 = v420.__begin_;
        v49 = v420.__first_;
        if (v420.__first_ == v420.__begin_)
        {
          v433.__r_.__value_.__r.__words[0] = (std::string::size_type)&v420;
          std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v433);
          goto LABEL_156;
        }
        v51 = 0;
        v52 = 0;
        do
        {
          v53 = v49->__r_.__value_.__r.__words[0];
          v54 = (std::__shared_weak_count *)v49->__r_.__value_.__l.__size_;
          v430.__r_.__value_.__r.__words[0] = v49->__r_.__value_.__r.__words[0];
          v430.__r_.__value_.__l.__size_ = (std::string::size_type)v54;
          if (v54)
          {
            p_shared_owners = (unint64_t *)&v54->__shared_owners_;
            do
              v56 = __ldxr(p_shared_owners);
            while (__stxr(v56 + 1, p_shared_owners));
          }
          memset(&v433, 0, sizeof(v433));
          std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*,std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*>((char *)&v433, *(_QWORD **)(v53 + 24), *(_QWORD **)(v53 + 32), (uint64_t)(*(_QWORD *)(v53 + 32) - *(_QWORD *)(v53 + 24)) >> 4);
          v57 = siri::dialogengine::ResolveUsage((uint64_t)v399, v4, (int ***)&v433);
          v429.__r_.__value_.__r.__words[0] = (std::string::size_type)&v433;
          std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v429);
          if (v57 == 4)
            v58 = 1;
          else
            v58 = v52;
          if (v57 == 1)
            v51 = 1;
          else
            v52 = v58;
          if (v54)
          {
            v59 = (unint64_t *)&v54->__shared_owners_;
            do
              v60 = __ldaxr(v59);
            while (__stlxr(v60 - 1, v59));
            if (!v60)
            {
              ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
              std::__shared_weak_count::__release_weak(v54);
            }
          }
          v49 = (std::__split_buffer<std::string>::pointer)((char *)v49 + 16);
        }
        while (v49 != v50);
        v433.__r_.__value_.__r.__words[0] = (std::string::size_type)&v420;
        std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v433);
        if ((v51 & 1) != 0)
        {
          v61 = v431.__r_.__value_.__r.__words[0];
          if (!v431.__r_.__value_.__r.__words[0])
            goto LABEL_135;
          if (*(char *)(v431.__r_.__value_.__r.__words[0] + 111) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)&v420, *(const std::string::value_type **)(v431.__r_.__value_.__r.__words[0] + 88), *(_QWORD *)(v431.__r_.__value_.__r.__words[0] + 96));
          }
          else
          {
            *(_OWORD *)&v420.__first_ = *(_OWORD *)(v431.__r_.__value_.__r.__words[0] + 88);
            v420.__end_ = *(std::__split_buffer<std::string>::pointer *)(v431.__r_.__value_.__r.__words[0] + 104);
          }
          if (SHIBYTE(v420.__end_) >= 0)
            v63 = (std::__split_buffer<std::string>::pointer)HIBYTE(v420.__end_);
          else
            v63 = v420.__begin_;
          if (SHIBYTE(v420.__end_) < 0)
          {
            operator delete(v420.__first_);
            if (!v63)
            {
LABEL_135:
              std::operator+<char>();
              v64 = std::string::append(&v433, "' requires a dialog component but one is not defined.");
              v65 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
              v420.__end_ = (std::__split_buffer<std::string>::pointer)v64->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v420.__first_ = v65;
              v64->__r_.__value_.__l.__size_ = 0;
              v64->__r_.__value_.__r.__words[2] = 0;
              v64->__r_.__value_.__r.__words[0] = 0;
              siri::dialogengine::Context::AddValidationError((uint64_t)v399, (__int128 *)&v420, v61);
              if (SHIBYTE(v420.__end_) < 0)
                operator delete(v420.__first_);
              if (SHIBYTE(v433.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v433.__r_.__value_.__l.__data_);
              v386 = 0;
              if ((v52 & 1) == 0)
                goto LABEL_156;
              goto LABEL_140;
            }
          }
          else if (!v63)
          {
            goto LABEL_135;
          }
        }
        if ((v52 & 1) == 0)
          goto LABEL_156;
        v61 = v431.__r_.__value_.__r.__words[0];
LABEL_140:
        if (!v61)
          goto LABEL_156;
        if (*(char *)(v61 + 111) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&v420, *(const std::string::value_type **)(v61 + 88), *(_QWORD *)(v61 + 96));
        }
        else
        {
          *(_OWORD *)&v420.__first_ = *(_OWORD *)(v61 + 88);
          v420.__end_ = *(std::__split_buffer<std::string>::pointer *)(v61 + 104);
        }
        if (SHIBYTE(v420.__end_) >= 0)
          v66 = (std::__split_buffer<std::string>::pointer)HIBYTE(v420.__end_);
        else
          v66 = v420.__begin_;
        if (SHIBYTE(v420.__end_) < 0)
        {
          operator delete(v420.__first_);
          if (!v66)
            goto LABEL_156;
        }
        else if (!v66)
        {
          goto LABEL_156;
        }
        std::operator+<char>();
        v67 = std::string::append(&v433, "' disallows a dialog component but one is defined.");
        v68 = *(_OWORD *)&v67->__r_.__value_.__l.__data_;
        v420.__end_ = (std::__split_buffer<std::string>::pointer)v67->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v420.__first_ = v68;
        v67->__r_.__value_.__l.__size_ = 0;
        v67->__r_.__value_.__r.__words[2] = 0;
        v67->__r_.__value_.__r.__words[0] = 0;
        siri::dialogengine::Context::AddValidationError((uint64_t)v399, (__int128 *)&v420, v61);
        if (SHIBYTE(v420.__end_) < 0)
          operator delete(v420.__first_);
        if (SHIBYTE(v433.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v433.__r_.__value_.__l.__data_);
        v386 = 0;
LABEL_156:
        (*(void (**)(std::__split_buffer<std::string> *__return_ptr))(*(_QWORD *)v432.__r_.__value_.__l.__data_
                                                                               + 72))(&v420);
        v70 = v420.__begin_;
        v69 = v420.__first_;
        if (v420.__first_ == v420.__begin_)
        {
          v433.__r_.__value_.__r.__words[0] = (std::string::size_type)&v420;
          std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v433);
          goto LABEL_207;
        }
        v71 = 0;
        v72 = 0;
        do
        {
          v73 = v69->__r_.__value_.__r.__words[0];
          v74 = (std::__shared_weak_count *)v69->__r_.__value_.__l.__size_;
          v430.__r_.__value_.__r.__words[0] = v69->__r_.__value_.__r.__words[0];
          v430.__r_.__value_.__l.__size_ = (std::string::size_type)v74;
          if (v74)
          {
            v75 = (unint64_t *)&v74->__shared_owners_;
            do
              v76 = __ldxr(v75);
            while (__stxr(v76 + 1, v75));
          }
          memset(&v433, 0, sizeof(v433));
          std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*,std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*>((char *)&v433, *(_QWORD **)(v73 + 24), *(_QWORD **)(v73 + 32), (uint64_t)(*(_QWORD *)(v73 + 32) - *(_QWORD *)(v73 + 24)) >> 4);
          v77 = siri::dialogengine::ResolveUsage((uint64_t)v399, v4, (int ***)&v433);
          v429.__r_.__value_.__r.__words[0] = (std::string::size_type)&v433;
          std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v429);
          if (v77 == 4)
            v78 = 1;
          else
            v78 = v72;
          if (v77 == 1)
            v71 = 1;
          else
            v72 = v78;
          if (v74)
          {
            v79 = (unint64_t *)&v74->__shared_owners_;
            do
              v80 = __ldaxr(v79);
            while (__stlxr(v80 - 1, v79));
            if (!v80)
            {
              ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
              std::__shared_weak_count::__release_weak(v74);
            }
          }
          v69 = (std::__split_buffer<std::string>::pointer)((char *)v69 + 16);
        }
        while (v69 != v70);
        v433.__r_.__value_.__r.__words[0] = (std::string::size_type)&v420;
        std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v433);
        if ((v71 & 1) != 0)
        {
          v81 = v431.__r_.__value_.__r.__words[0];
          if (!v431.__r_.__value_.__r.__words[0])
            goto LABEL_187;
          if (*(char *)(v431.__r_.__value_.__r.__words[0] + 135) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)&v420, *(const std::string::value_type **)(v431.__r_.__value_.__r.__words[0] + 112), *(_QWORD *)(v431.__r_.__value_.__r.__words[0] + 120));
          }
          else
          {
            *(_OWORD *)&v420.__first_ = *(_OWORD *)(v431.__r_.__value_.__r.__words[0] + 112);
            v420.__end_ = *(std::__split_buffer<std::string>::pointer *)(v431.__r_.__value_.__r.__words[0] + 128);
          }
          if (SHIBYTE(v420.__end_) >= 0)
            v82 = (std::__split_buffer<std::string>::pointer)HIBYTE(v420.__end_);
          else
            v82 = v420.__begin_;
          if (SHIBYTE(v420.__end_) < 0)
          {
            operator delete(v420.__first_);
            if (!v82)
            {
LABEL_187:
              std::operator+<char>();
              v83 = std::string::append(&v433, "' requires a visual component but one is not defined.");
              v84 = *(_OWORD *)&v83->__r_.__value_.__l.__data_;
              v420.__end_ = (std::__split_buffer<std::string>::pointer)v83->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v420.__first_ = v84;
              v83->__r_.__value_.__l.__size_ = 0;
              v83->__r_.__value_.__r.__words[2] = 0;
              v83->__r_.__value_.__r.__words[0] = 0;
              siri::dialogengine::Context::AddValidationError((uint64_t)v399, (__int128 *)&v420, v81);
              if (SHIBYTE(v420.__end_) < 0)
                operator delete(v420.__first_);
              if (SHIBYTE(v433.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v433.__r_.__value_.__l.__data_);
              v386 = 0;
              if ((v72 & 1) == 0)
                goto LABEL_207;
              goto LABEL_192;
            }
          }
          else if (!v82)
          {
            goto LABEL_187;
          }
        }
        if ((v72 & 1) == 0)
          goto LABEL_207;
        v81 = v431.__r_.__value_.__r.__words[0];
LABEL_192:
        if (!v81)
          goto LABEL_207;
        if (*(char *)(v81 + 135) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&v420, *(const std::string::value_type **)(v81 + 112), *(_QWORD *)(v81 + 120));
        }
        else
        {
          *(_OWORD *)&v420.__first_ = *(_OWORD *)(v81 + 112);
          v420.__end_ = *(std::__split_buffer<std::string>::pointer *)(v81 + 128);
        }
        if (SHIBYTE(v420.__end_) >= 0)
          v85 = (std::__split_buffer<std::string>::pointer)HIBYTE(v420.__end_);
        else
          v85 = v420.__begin_;
        if (SHIBYTE(v420.__end_) < 0)
        {
          operator delete(v420.__first_);
          if (!v85)
            goto LABEL_207;
LABEL_203:
          std::operator+<char>();
          v86 = std::string::append(&v433, "' disallows a visual component but one is defined.");
          v87 = *(_OWORD *)&v86->__r_.__value_.__l.__data_;
          v420.__end_ = (std::__split_buffer<std::string>::pointer)v86->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v420.__first_ = v87;
          v86->__r_.__value_.__l.__size_ = 0;
          v86->__r_.__value_.__r.__words[2] = 0;
          v86->__r_.__value_.__r.__words[0] = 0;
          siri::dialogengine::Context::AddValidationError((uint64_t)v399, (__int128 *)&v420, v81);
          if (SHIBYTE(v420.__end_) < 0)
            operator delete(v420.__first_);
          if ((SHIBYTE(v433.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_206:
            v386 = 0;
            goto LABEL_207;
          }
          v62 = (std::__split_buffer<std::string>::pointer)v433.__r_.__value_.__r.__words[0];
LABEL_125:
          operator delete(v62);
          goto LABEL_206;
        }
        if (v85)
          goto LABEL_203;
LABEL_207:
        v88 = (std::__shared_weak_count *)v431.__r_.__value_.__l.__size_;
        if (v431.__r_.__value_.__l.__size_)
        {
          v89 = (unint64_t *)(v431.__r_.__value_.__l.__size_ + 8);
          do
            v90 = __ldaxr(v89);
          while (__stlxr(v90 - 1, v89));
          if (!v90)
          {
            ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
            std::__shared_weak_count::__release_weak(v88);
          }
        }
        if (SHIBYTE(v403.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v403.__r_.__value_.__l.__data_);
        v91 = (std::__shared_weak_count *)v432.__r_.__value_.__l.__size_;
        if (v432.__r_.__value_.__l.__size_)
        {
          v92 = (unint64_t *)(v432.__r_.__value_.__l.__size_ + 8);
          do
            v93 = __ldaxr(v92);
          while (__stlxr(v93 - 1, v92));
          if (!v93)
          {
            ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
            std::__shared_weak_count::__release_weak(v91);
          }
        }
        v28 += 2;
      }
      while (v28 != (std::string::size_type *)size);
    }
    v420.__first_ = &v434;
    std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v420);
    std::map<std::string,std::shared_ptr<siri::dialogengine::PatternGroup>>::map[abi:ne180100]((uint64_t)&v406, (const void ***)(v4 + 208));
    v94 = v406;
    v21 = v386;
    if (v406 != (__int128 *)v407)
    {
      v398 = (siri::dialogengine::RequestInfo *)((char *)v399 + 8);
      while (1)
      {
        std::pair<std::string const,std::shared_ptr<siri::dialogengine::JSONValue>>::pair[abi:ne180100](&v403, v94 + 2);
        v395 = v404;
        siri::dialogengine::PatternSchema::GetGroup((uint64_t)v408, (uint64_t)&v403, &v401);
        if (!v401)
        {
          std::operator+<char>();
          siri::dialogengine::Context::AddValidationError((uint64_t)v399, (__int128 *)&v420, v395);
          if (SHIBYTE(v420.__end_) < 0)
          {
            v95 = v420.__first_;
            goto LABEL_239;
          }
LABEL_240:
          v21 = 0;
          goto LABEL_241;
        }
        if (*(char *)(v395 + 111) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&v420, *(const std::string::value_type **)(v395 + 88), *(_QWORD *)(v395 + 96));
        }
        else
        {
          *(_OWORD *)&v420.__first_ = *(_OWORD *)(v395 + 88);
          v420.__end_ = *(std::__split_buffer<std::string>::pointer *)(v395 + 104);
        }
        v96 = (std::__split_buffer<std::string>::pointer)HIBYTE(v420.__end_);
        if (SHIBYTE(v420.__end_) < 0)
          v96 = v420.__begin_;
        if (v96)
        {
          v97 = 0;
          if ((HIBYTE(v420.__end_) & 0x80) == 0)
            goto LABEL_234;
          goto LABEL_269;
        }
        if (*(char *)(v395 + 135) < 0)
          std::string::__init_copy_ctor_external(&v434, *(const std::string::value_type **)(v395 + 112), *(_QWORD *)(v395 + 120));
        else
          v434 = *(std::string *)(v395 + 112);
        v108 = HIBYTE(v434.__r_.__value_.__r.__words[2]);
        if ((v434.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v108 = v434.__r_.__value_.__l.__size_;
        if (v108)
          break;
        if (*(char *)(v395 + 159) < 0)
          std::string::__init_copy_ctor_external(&v433, *(const std::string::value_type **)(v395 + 136), *(_QWORD *)(v395 + 144));
        else
          v433 = *(std::string *)(v395 + 136);
        v171 = v433.__r_.__value_.__l.__size_;
        if ((v433.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v171 = HIBYTE(v433.__r_.__value_.__r.__words[2]);
        v97 = v171 == 0;
        if (SHIBYTE(v433.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v433.__r_.__value_.__l.__data_);
        if ((*((_BYTE *)&v434.__r_.__value_.__s + 23) & 0x80) != 0)
          goto LABEL_267;
LABEL_268:
        if ((HIBYTE(v420.__end_) & 0x80) == 0)
        {
LABEL_234:
          if (v97)
            goto LABEL_235;
          goto LABEL_270;
        }
LABEL_269:
        operator delete(v420.__first_);
        if (v97)
        {
LABEL_235:
          std::operator+<char>();
          v98 = std::string::append(&v434, "' has no dialog or visual IDs");
          v99 = *(_OWORD *)&v98->__r_.__value_.__l.__data_;
          v420.__end_ = (std::__split_buffer<std::string>::pointer)v98->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v420.__first_ = v99;
          v98->__r_.__value_.__l.__size_ = 0;
          v98->__r_.__value_.__r.__words[2] = 0;
          v98->__r_.__value_.__r.__words[0] = 0;
          siri::dialogengine::Context::AddValidationError((uint64_t)v399, (__int128 *)&v420, v395);
          if (SHIBYTE(v420.__end_) < 0)
            operator delete(v420.__first_);
          if (SHIBYTE(v434.__r_.__value_.__r.__words[2]) < 0)
          {
            v95 = (std::__split_buffer<std::string>::pointer)v434.__r_.__value_.__r.__words[0];
LABEL_239:
            operator delete(v95);
          }
          goto LABEL_240;
        }
LABEL_270:
        v387 = v21;
        v109 = v404;
        v110 = v404 + 88;
        if (*(char *)(v404 + 111) < 0)
        {
          std::string::__init_copy_ctor_external(&v415, *(const std::string::value_type **)(v404 + 88), *(_QWORD *)(v404 + 96));
        }
        else
        {
          *(_OWORD *)&v415.__r_.__value_.__l.__data_ = *(_OWORD *)v110;
          v415.__r_.__value_.__r.__words[2] = *(_QWORD *)(v404 + 104);
        }
        v111 = HIBYTE(v415.__r_.__value_.__r.__words[2]);
        if ((v415.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v111 = v415.__r_.__value_.__l.__size_;
        if (!v111)
        {
          v112 = 1;
          if ((*((_BYTE *)&v415.__r_.__value_.__s + 23) & 0x80) == 0)
            goto LABEL_484;
LABEL_483:
          operator delete(v415.__r_.__value_.__l.__data_);
          goto LABEL_484;
        }
        if (*(char *)(v109 + 111) < 0)
          std::string::__init_copy_ctor_external(&v433, *(const std::string::value_type **)(v109 + 88), *(_QWORD *)(v109 + 96));
        else
          v433 = *(std::string *)v110;
        siri::dialogengine::CatIdToPath((uint64_t)&v433, &v434);
        siri::dialogengine::RequestInfo::RequestInfo((siri::dialogengine::RequestInfo *)&v420, v398);
        memset(&v432, 0, sizeof(v432));
        std::vector<siri::dialogengine::UpdatableDir>::__init_with_size[abi:ne180100]<siri::dialogengine::UpdatableDir*,siri::dialogengine::UpdatableDir*>(&v432, (uint64_t)v420.__begin_, (uint64_t)v420.__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)v420.__end_ - (char *)v420.__begin_) >> 5));
        siri::dialogengine::FindFileInUpdatableDirs((uint64_t)&v434, (uint64_t *)&v432, (uint64_t)v413);
        v431.__r_.__value_.__r.__words[0] = (std::string::size_type)&v432;
        std::vector<siri::dialogengine::UpdatableDir>::__destroy_vector::operator()[abi:ne180100]((void ***)&v431);
        siri::dialogengine::RequestInfo::~RequestInfo((void **)&v420.__first_);
        if (SHIBYTE(v434.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v434.__r_.__value_.__l.__data_);
        if (SHIBYTE(v433.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v433.__r_.__value_.__l.__data_);
        v113 = v414;
        if ((v414 & 0x80u) != 0)
          v113 = (unint64_t)v413[1];
        if (v113)
        {
          if (*(char *)(v109 + 111) < 0)
            std::string::__init_copy_ctor_external(&v433, *(const std::string::value_type **)(v109 + 88), *(_QWORD *)(v109 + 96));
          else
            v433 = *(std::string *)v110;
          siri::dialogengine::CatIdToPath((uint64_t)&v433, &v434);
          siri::dialogengine::RequestInfo::RequestInfo((siri::dialogengine::RequestInfo *)&v420, v398);
          memset(&v432, 0, sizeof(v432));
          std::vector<siri::dialogengine::UpdatableDir>::__init_with_size[abi:ne180100]<siri::dialogengine::UpdatableDir*,siri::dialogengine::UpdatableDir*>(&v432, (uint64_t)v420.__begin_, (uint64_t)v420.__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)v420.__end_ - (char *)v420.__begin_) >> 5));
          siri::dialogengine::FindFileInUpdatableDirs((uint64_t)&v434, (uint64_t *)&v432, (uint64_t)&__str);
          v431.__r_.__value_.__r.__words[0] = (std::string::size_type)&v432;
          std::vector<siri::dialogengine::UpdatableDir>::__destroy_vector::operator()[abi:ne180100]((void ***)&v431);
          siri::dialogengine::RequestInfo::~RequestInfo((void **)&v420.__first_);
          if (SHIBYTE(v434.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v434.__r_.__value_.__l.__data_);
          if (SHIBYTE(v433.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v433.__r_.__value_.__l.__data_);
          siri::dialogengine::RequestInfo::RequestInfo((siri::dialogengine::RequestInfo *)&v420, v398);
          memset(&v434, 0, sizeof(v434));
          std::vector<siri::dialogengine::UpdatableDir>::__init_with_size[abi:ne180100]<siri::dialogengine::UpdatableDir*,siri::dialogengine::UpdatableDir*>(&v434, (uint64_t)v420.__begin_, (uint64_t)v420.__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)v420.__end_ - (char *)v420.__begin_) >> 5));
          if (*(char *)(v109 + 111) < 0)
            std::string::__init_copy_ctor_external(&v433, *(const std::string::value_type **)(v109 + 88), *(_QWORD *)(v109 + 96));
          else
            v433 = *(std::string *)v110;
          siri::dialogengine::GetCatLocales((uint64_t *)&v434, (uint64_t)&v433, &v416);
          if (SHIBYTE(v433.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v433.__r_.__value_.__l.__data_);
          v433.__r_.__value_.__r.__words[0] = (std::string::size_type)&v434;
          std::vector<siri::dialogengine::UpdatableDir>::__destroy_vector::operator()[abi:ne180100]((void ***)&v433);
          siri::dialogengine::RequestInfo::~RequestInfo((void **)&v420.__first_);
          v114 = v416;
          v392 = v417;
          if ((std::__shared_weak_count *)v416 != v417)
          {
            v112 = 1;
            while (1)
            {
              siri::dialogengine::RequestInfo::RequestInfo((siri::dialogengine::RequestInfo *)&v420, v398);
              memset(&v433, 0, sizeof(v433));
              std::vector<siri::dialogengine::UpdatableDir>::__init_with_size[abi:ne180100]<siri::dialogengine::UpdatableDir*,siri::dialogengine::UpdatableDir*>(&v433, (uint64_t)v420.__begin_, (uint64_t)v420.__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)v420.__end_ - (char *)v420.__begin_) >> 5));
              siri::dialogengine::RequestInfo::~RequestInfo((void **)&v420.__first_);
              if (*(char *)(v109 + 111) < 0)
              {
                std::string::__init_copy_ctor_external((std::string *)&v420, *(const std::string::value_type **)(v109 + 88), *(_QWORD *)(v109 + 96));
              }
              else
              {
                *(_OWORD *)&v420.__first_ = *(_OWORD *)v110;
                v420.__end_ = *(std::__split_buffer<std::string>::pointer *)(v110 + 16);
              }
              siri::dialogengine::FindParamsFile((__int128 **)&v433, (uint64_t)&v420, (uint64_t)&v432);
              if (SHIBYTE(v420.__end_) < 0)
                operator delete(v420.__first_);
              if (*(char *)(v114 + 23) < 0)
              {
                std::string::__init_copy_ctor_external(&v434, *(const std::string::value_type **)v114, *(_QWORD *)(v114 + 8));
              }
              else
              {
                v115 = *(_OWORD *)v114;
                v434.__r_.__value_.__r.__words[2] = *(_QWORD *)(v114 + 16);
                *(_OWORD *)&v434.__r_.__value_.__l.__data_ = v115;
              }
              memset(&v420, 0, 24);
              v430.__r_.__value_.__r.__words[0] = (std::string::size_type)&v420;
              v430.__r_.__value_.__s.__data_[8] = 0;
              v420.__first_ = (std::__split_buffer<std::string>::pointer)operator new(0x18uLL);
              v420.__begin_ = v420.__first_;
              v420.__end_ = v420.__first_ + 1;
              v420.__begin_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v420.__end_, (__int128 *)&v434, &v435, v420.__first_);
              if (*(char *)(v109 + 111) < 0)
                std::string::__init_copy_ctor_external(&v430, *(const std::string::value_type **)(v109 + 88), *(_QWORD *)(v109 + 96));
              else
                v430 = *(std::string *)v110;
              siri::dialogengine::FindLocaleFile((__int128 **)&v433, (__int128 **)&v420, (uint64_t)&v430, (uint64_t)&v431);
              if (SHIBYTE(v430.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v430.__r_.__value_.__l.__data_);
              v430.__r_.__value_.__r.__words[0] = (std::string::size_type)&v420;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v430);
              if (SHIBYTE(v434.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v434.__r_.__value_.__l.__data_);
              v116 = HIBYTE(v431.__r_.__value_.__r.__words[2]);
              if ((v431.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v116 = v431.__r_.__value_.__l.__size_;
              if (!v116)
              {
                std::operator+<char>();
                v117 = std::string::append(&v429, "' locale file in CAT '");
                v118 = *(_OWORD *)&v117->__r_.__value_.__l.__data_;
                v430.__r_.__value_.__r.__words[2] = v117->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v430.__r_.__value_.__l.__data_ = v118;
                v117->__r_.__value_.__l.__size_ = 0;
                v117->__r_.__value_.__r.__words[2] = 0;
                v117->__r_.__value_.__r.__words[0] = 0;
                if (*(char *)(v109 + 111) < 0)
                  std::string::__init_copy_ctor_external(&v428, *(const std::string::value_type **)(v109 + 88), *(_QWORD *)(v109 + 96));
                else
                  v428 = *(std::string *)v110;
                if ((v428.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v140 = &v428;
                else
                  v140 = (std::string *)v428.__r_.__value_.__r.__words[0];
                if ((v428.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v141 = HIBYTE(v428.__r_.__value_.__r.__words[2]);
                else
                  v141 = v428.__r_.__value_.__l.__size_;
                v142 = std::string::append(&v430, (const std::string::value_type *)v140, v141);
                v143 = *(_OWORD *)&v142->__r_.__value_.__l.__data_;
                v434.__r_.__value_.__r.__words[2] = v142->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v434.__r_.__value_.__l.__data_ = v143;
                v142->__r_.__value_.__l.__size_ = 0;
                v142->__r_.__value_.__r.__words[2] = 0;
                v142->__r_.__value_.__r.__words[0] = 0;
                v144 = std::string::append(&v434, "'");
                v145 = *(_OWORD *)&v144->__r_.__value_.__l.__data_;
                v420.__end_ = (std::__split_buffer<std::string>::pointer)v144->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v420.__first_ = v145;
                v144->__r_.__value_.__l.__size_ = 0;
                v144->__r_.__value_.__r.__words[2] = 0;
                v144->__r_.__value_.__r.__words[0] = 0;
                siri::dialogengine::Context::AddValidationError((uint64_t)v399, (__int128 *)&v420, v109);
                if (SHIBYTE(v420.__end_) < 0)
                  operator delete(v420.__first_);
                if (SHIBYTE(v434.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v434.__r_.__value_.__l.__data_);
                if (SHIBYTE(v428.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v428.__r_.__value_.__l.__data_);
                if (SHIBYTE(v430.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v430.__r_.__value_.__l.__data_);
                if (SHIBYTE(v429.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v429.__r_.__value_.__l.__data_);
                v132 = 0;
                goto LABEL_431;
              }
              siri::dialogengine::Context::Context((siri::dialogengine::Context *)&v420);
              siri::dialogengine::RequestInfo::RequestInfo((siri::dialogengine::RequestInfo *)&v434);
              std::vector<siri::dialogengine::UpdatableDir>::__assign_with_size[abi:ne180100]<siri::dialogengine::UpdatableDir*,siri::dialogengine::UpdatableDir*>((uint64_t)&v434.__r_.__value_.__l.__size_, (std::string *)v433.__r_.__value_.__l.__data_, (std::string *)v433.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL* ((uint64_t)(v433.__r_.__value_.__l.__size_ - v433.__r_.__value_.__r.__words[0]) >> 5));
              std::string::operator=(v439, &v432);
              std::string::operator=(v440, &v431);
              LODWORD(v434.__r_.__value_.__l.__data_) = 0;
              siri::dialogengine::Context::SetRequestInfo((uint64_t)&v420, (uint64_t)&v434);
              siri::dialogengine::RequestInfo::~RequestInfo((void **)&v434.__r_.__value_.__l.__data_);
              if (*(char *)(v109 + 111) < 0)
                std::string::__init_copy_ctor_external(&v428, *(const std::string::value_type **)(v109 + 88), *(_QWORD *)(v109 + 96));
              else
                v428 = *(std::string *)v110;
              v119 = std::string::append(&v428, " (");
              v120 = *(_OWORD *)&v119->__r_.__value_.__l.__data_;
              v429.__r_.__value_.__r.__words[2] = v119->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v429.__r_.__value_.__l.__data_ = v120;
              v119->__r_.__value_.__l.__size_ = 0;
              v119->__r_.__value_.__r.__words[2] = 0;
              v119->__r_.__value_.__r.__words[0] = 0;
              v121 = *(char *)(v114 + 23);
              if (v121 >= 0)
                v122 = (const std::string::value_type *)v114;
              else
                v122 = *(const std::string::value_type **)v114;
              if (v121 >= 0)
                v123 = *(unsigned __int8 *)(v114 + 23);
              else
                v123 = *(_QWORD *)(v114 + 8);
              v124 = std::string::append(&v429, v122, v123);
              v125 = *(_OWORD *)&v124->__r_.__value_.__l.__data_;
              v430.__r_.__value_.__r.__words[2] = v124->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v430.__r_.__value_.__l.__data_ = v125;
              v124->__r_.__value_.__l.__size_ = 0;
              v124->__r_.__value_.__r.__words[2] = 0;
              v124->__r_.__value_.__r.__words[0] = 0;
              v126 = std::string::append(&v430, ")");
              v127 = *(_OWORD *)&v126->__r_.__value_.__l.__data_;
              v434.__r_.__value_.__r.__words[2] = v126->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v434.__r_.__value_.__l.__data_ = v127;
              v126->__r_.__value_.__l.__size_ = 0;
              v126->__r_.__value_.__r.__words[2] = 0;
              v126->__r_.__value_.__r.__words[0] = 0;
              if (SHIBYTE(v430.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v430.__r_.__value_.__l.__data_);
              if (SHIBYTE(v429.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v429.__r_.__value_.__l.__data_);
              if (SHIBYTE(v428.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v428.__r_.__value_.__l.__data_);
              if ((siri::dialogengine::Context::Load((siri::dialogengine::Context *)&v420) & 1) == 0)
              {
                v133 = v427;
                *(_OWORD *)&v429.__r_.__value_.__l.__data_ = v427;
                if (*((_QWORD *)&v427 + 1))
                {
                  v134 = (unint64_t *)(*((_QWORD *)&v427 + 1) + 8);
                  do
                    v135 = __ldxr(v134);
                  while (__stxr(v135 + 1, v134));
                }
                v137 = *((_QWORD *)v399 + 63);
                v136 = (std::__shared_weak_count *)*((_QWORD *)v399 + 64);
                v428.__r_.__value_.__r.__words[0] = v137;
                v428.__r_.__value_.__l.__size_ = (std::string::size_type)v136;
                if (v136)
                {
                  v138 = (unint64_t *)&v136->__shared_owners_;
                  do
                    v139 = __ldxr(v138);
                  while (__stxr(v139 + 1, v138));
                }
                siri::dialogengine::DirName(&v431, (uint64_t)&v430);
                siri::dialogengine::CopyValidationEntries(v133, v137, &v430);
                if (SHIBYTE(v430.__r_.__value_.__r.__words[2]) < 0)
                {
                  operator delete(v430.__r_.__value_.__l.__data_);
                  if (!v136)
                    goto LABEL_381;
                }
                else if (!v136)
                {
LABEL_381:
                  v148 = (std::__shared_weak_count *)v429.__r_.__value_.__l.__size_;
                  if (v429.__r_.__value_.__l.__size_)
                  {
                    v149 = (unint64_t *)(v429.__r_.__value_.__l.__size_ + 8);
                    do
                      v150 = __ldaxr(v149);
                    while (__stlxr(v150 - 1, v149));
                    if (!v150)
                    {
                      ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
                      std::__shared_weak_count::__release_weak(v148);
                    }
                  }
                  std::operator+<char>();
                  v151 = std::string::append(&v428, " for group: ");
                  v152 = *(_OWORD *)&v151->__r_.__value_.__l.__data_;
                  v429.__r_.__value_.__r.__words[2] = v151->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v429.__r_.__value_.__l.__data_ = v152;
                  v151->__r_.__value_.__l.__size_ = 0;
                  v151->__r_.__value_.__r.__words[2] = 0;
                  v151->__r_.__value_.__r.__words[0] = 0;
                  if (*(char *)(v109 + 87) < 0)
                    std::string::__init_copy_ctor_external(&v419, *(const std::string::value_type **)(v109 + 64), *(_QWORD *)(v109 + 72));
                  else
                    v419 = *(std::string *)(v109 + 64);
                  if ((v419.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v153 = &v419;
                  else
                    v153 = (std::string *)v419.__r_.__value_.__r.__words[0];
                  if ((v419.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v154 = HIBYTE(v419.__r_.__value_.__r.__words[2]);
                  else
                    v154 = v419.__r_.__value_.__l.__size_;
                  v155 = std::string::append(&v429, (const std::string::value_type *)v153, v154);
                  v156 = *(_OWORD *)&v155->__r_.__value_.__l.__data_;
                  v430.__r_.__value_.__r.__words[2] = v155->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v430.__r_.__value_.__l.__data_ = v156;
                  v155->__r_.__value_.__l.__size_ = 0;
                  v155->__r_.__value_.__r.__words[2] = 0;
                  v155->__r_.__value_.__r.__words[0] = 0;
                  siri::dialogengine::Context::AddValidationError((uint64_t)v399, (__int128 *)&v430, v109);
                  if (SHIBYTE(v430.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v430.__r_.__value_.__l.__data_);
                  if (SHIBYTE(v419.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v419.__r_.__value_.__l.__data_);
                  if (SHIBYTE(v429.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v429.__r_.__value_.__l.__data_);
                  if (SHIBYTE(v428.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v428.__r_.__value_.__l.__data_);
                  v132 = 0;
                  goto LABEL_428;
                }
                v146 = (unint64_t *)&v136->__shared_owners_;
                do
                  v147 = __ldaxr(v146);
                while (__stlxr(v147 - 1, v146));
                if (!v147)
                {
                  ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
                  std::__shared_weak_count::__release_weak(v136);
                }
                goto LABEL_381;
              }
              v129 = (std::__shared_weak_count *)*((_QWORD *)&v427 + 1);
              v128 = v427;
              *(_OWORD *)&v429.__r_.__value_.__l.__data_ = v427;
              if (*((_QWORD *)&v427 + 1))
              {
                v130 = (unint64_t *)(*((_QWORD *)&v427 + 1) + 8);
                do
                  v131 = __ldxr(v130);
                while (__stxr(v131 + 1, v130));
              }
              if (v128
                && ((*(uint64_t (**)(uint64_t, std::__split_buffer<std::string> *))(*(_QWORD *)v128 + 16))(v128, &v420) & 1) == 0)
              {
                break;
              }
              v132 = 1;
              if (v129)
                goto LABEL_424;
LABEL_428:
              if (SHIBYTE(v434.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v434.__r_.__value_.__l.__data_);
              siri::dialogengine::Context::~Context((siri::dialogengine::Context *)&v420);
LABEL_431:
              if (SHIBYTE(v431.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v431.__r_.__value_.__l.__data_);
              if (SHIBYTE(v432.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v432.__r_.__value_.__l.__data_);
              v420.__first_ = &v433;
              std::vector<siri::dialogengine::UpdatableDir>::__destroy_vector::operator()[abi:ne180100]((void ***)&v420);
              v112 &= v132;
              v114 += 24;
              if ((std::__shared_weak_count *)v114 == v392)
                goto LABEL_478;
            }
            v157 = v427;
            *(_OWORD *)&v428.__r_.__value_.__l.__data_ = v427;
            if (*((_QWORD *)&v427 + 1))
            {
              v158 = (unint64_t *)(*((_QWORD *)&v427 + 1) + 8);
              do
                v159 = __ldxr(v158);
              while (__stxr(v159 + 1, v158));
            }
            v161 = *((_QWORD *)v399 + 63);
            v160 = (std::__shared_weak_count *)*((_QWORD *)v399 + 64);
            v419.__r_.__value_.__r.__words[0] = v161;
            v419.__r_.__value_.__l.__size_ = (std::string::size_type)v160;
            if (v160)
            {
              v162 = (unint64_t *)&v160->__shared_owners_;
              do
                v163 = __ldxr(v162);
              while (__stxr(v163 + 1, v162));
            }
            siri::dialogengine::DirName(&v431, (uint64_t)&v430);
            siri::dialogengine::CopyValidationEntries(v157, v161, &v430);
            if (SHIBYTE(v430.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(v430.__r_.__value_.__l.__data_);
              if (v160)
                goto LABEL_414;
            }
            else
            {
              if (!v160)
                goto LABEL_418;
LABEL_414:
              v164 = (unint64_t *)&v160->__shared_owners_;
              do
                v165 = __ldaxr(v164);
              while (__stlxr(v165 - 1, v164));
              if (!v165)
              {
                ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
                std::__shared_weak_count::__release_weak(v160);
              }
            }
LABEL_418:
            v166 = (std::__shared_weak_count *)v428.__r_.__value_.__l.__size_;
            if (v428.__r_.__value_.__l.__size_)
            {
              v167 = (unint64_t *)(v428.__r_.__value_.__l.__size_ + 8);
              do
                v168 = __ldaxr(v167);
              while (__stlxr(v168 - 1, v167));
              if (!v168)
              {
                ((void (*)(std::__shared_weak_count *))v166->__on_zero_shared)(v166);
                std::__shared_weak_count::__release_weak(v166);
              }
            }
            v132 = 0;
            v129 = (std::__shared_weak_count *)v429.__r_.__value_.__l.__size_;
            if (!v429.__r_.__value_.__l.__size_)
              goto LABEL_428;
LABEL_424:
            v169 = (unint64_t *)&v129->__shared_owners_;
            do
              v170 = __ldaxr(v169);
            while (__stlxr(v170 - 1, v169));
            if (!v170)
            {
              ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
              std::__shared_weak_count::__release_weak(v129);
            }
            goto LABEL_428;
          }
          if (*(char *)(v109 + 87) < 0)
            std::string::__init_copy_ctor_external(&v432, *(const std::string::value_type **)(v109 + 64), *(_QWORD *)(v109 + 72));
          else
            v432 = *(std::string *)(v109 + 64);
          v180 = std::string::insert(&v432, 0, "Cannot find any locale files in CAT directory for group '");
          v181 = *(_OWORD *)&v180->__r_.__value_.__l.__data_;
          v433.__r_.__value_.__r.__words[2] = v180->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v433.__r_.__value_.__l.__data_ = v181;
          v180->__r_.__value_.__l.__size_ = 0;
          v180->__r_.__value_.__r.__words[2] = 0;
          v180->__r_.__value_.__r.__words[0] = 0;
          v182 = std::string::append(&v433, "': ");
          v183 = *(_OWORD *)&v182->__r_.__value_.__l.__data_;
          v434.__r_.__value_.__r.__words[2] = v182->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v434.__r_.__value_.__l.__data_ = v183;
          v182->__r_.__value_.__l.__size_ = 0;
          v182->__r_.__value_.__r.__words[2] = 0;
          v182->__r_.__value_.__r.__words[0] = 0;
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            p_str = &__str;
          else
            p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v185 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
          else
            v185 = __str.__r_.__value_.__l.__size_;
          v186 = std::string::append(&v434, (const std::string::value_type *)p_str, v185);
          v187 = *(_OWORD *)&v186->__r_.__value_.__l.__data_;
          v420.__end_ = (std::__split_buffer<std::string>::pointer)v186->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v420.__first_ = v187;
          v186->__r_.__value_.__l.__size_ = 0;
          v186->__r_.__value_.__r.__words[2] = 0;
          v186->__r_.__value_.__r.__words[0] = 0;
          siri::dialogengine::Context::AddValidationError((uint64_t)v399, (__int128 *)&v420, v109);
          if (SHIBYTE(v420.__end_) < 0)
            operator delete(v420.__first_);
          if (SHIBYTE(v434.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v434.__r_.__value_.__l.__data_);
          if (SHIBYTE(v433.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v433.__r_.__value_.__l.__data_);
          if (SHIBYTE(v432.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v432.__r_.__value_.__l.__data_);
          v112 = 0;
LABEL_478:
          v420.__first_ = (std::__split_buffer<std::string>::pointer)&v416;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v420);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__str.__r_.__value_.__l.__data_);
        }
        else
        {
          if (*(char *)(v109 + 87) < 0)
            std::string::__init_copy_ctor_external(&v432, *(const std::string::value_type **)(v109 + 64), *(_QWORD *)(v109 + 72));
          else
            v432 = *(std::string *)(v109 + 64);
          v172 = std::string::insert(&v432, 0, "CAT file for group '");
          v173 = *(_OWORD *)&v172->__r_.__value_.__l.__data_;
          v433.__r_.__value_.__r.__words[2] = v172->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v433.__r_.__value_.__l.__data_ = v173;
          v172->__r_.__value_.__l.__size_ = 0;
          v172->__r_.__value_.__r.__words[2] = 0;
          v172->__r_.__value_.__r.__words[0] = 0;
          v174 = std::string::append(&v433, "' does not exist: ");
          v175 = *(_OWORD *)&v174->__r_.__value_.__l.__data_;
          v434.__r_.__value_.__r.__words[2] = v174->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v434.__r_.__value_.__l.__data_ = v175;
          v174->__r_.__value_.__l.__size_ = 0;
          v174->__r_.__value_.__r.__words[2] = 0;
          v174->__r_.__value_.__r.__words[0] = 0;
          if ((v415.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v176 = &v415;
          else
            v176 = (std::string *)v415.__r_.__value_.__r.__words[0];
          if ((v415.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v177 = HIBYTE(v415.__r_.__value_.__r.__words[2]);
          else
            v177 = v415.__r_.__value_.__l.__size_;
          v178 = std::string::append(&v434, (const std::string::value_type *)v176, v177);
          v179 = *(_OWORD *)&v178->__r_.__value_.__l.__data_;
          v420.__end_ = (std::__split_buffer<std::string>::pointer)v178->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v420.__first_ = v179;
          v178->__r_.__value_.__l.__size_ = 0;
          v178->__r_.__value_.__r.__words[2] = 0;
          v178->__r_.__value_.__r.__words[0] = 0;
          siri::dialogengine::Context::AddValidationError((uint64_t)v399, (__int128 *)&v420, v109);
          if (SHIBYTE(v420.__end_) < 0)
            operator delete(v420.__first_);
          if (SHIBYTE(v434.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v434.__r_.__value_.__l.__data_);
          if (SHIBYTE(v433.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v433.__r_.__value_.__l.__data_);
          if (SHIBYTE(v432.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v432.__r_.__value_.__l.__data_);
          v112 = 0;
        }
        if ((char)v414 < 0)
          operator delete(v413[0]);
        if ((*((_BYTE *)&v415.__r_.__value_.__s + 23) & 0x80) != 0)
          goto LABEL_483;
LABEL_484:
        v188 = v404;
        v189 = (_OWORD *)(v404 + 112);
        if (*(char *)(v404 + 135) < 0)
        {
          std::string::__init_copy_ctor_external(&v428, *(const std::string::value_type **)(v404 + 112), *(_QWORD *)(v404 + 120));
        }
        else
        {
          *(_OWORD *)&v428.__r_.__value_.__l.__data_ = *v189;
          v428.__r_.__value_.__r.__words[2] = *(_QWORD *)(v404 + 128);
        }
        v190 = HIBYTE(v428.__r_.__value_.__r.__words[2]);
        if ((v428.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v190 = v428.__r_.__value_.__l.__size_;
        if (!v190)
        {
          v193 = 1;
          v191 = v387;
          if ((*((_BYTE *)&v428.__r_.__value_.__s + 23) & 0x80) == 0)
            goto LABEL_586;
LABEL_585:
          operator delete(v428.__r_.__value_.__l.__data_);
          goto LABEL_586;
        }
        siri::dialogengine::RequestInfo::RequestInfo((siri::dialogengine::RequestInfo *)&v420, v398);
        v191 = v387;
        memset(&v419, 0, sizeof(v419));
        std::vector<siri::dialogengine::UpdatableDir>::__init_with_size[abi:ne180100]<siri::dialogengine::UpdatableDir*,siri::dialogengine::UpdatableDir*>(&v419, (uint64_t)v420.__begin_, (uint64_t)v420.__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)v420.__end_ - (char *)v420.__begin_) >> 5));
        siri::dialogengine::RequestInfo::~RequestInfo((void **)&v420.__first_);
        siri::dialogengine::FindVisualFile((__int128 **)&v419, (uint64_t)&v428, (uint64_t)&__str);
        v192 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v192 = __str.__r_.__value_.__l.__size_;
        if (v192)
        {
          siri::dialogengine::RequestInfo::RequestInfo((siri::dialogengine::RequestInfo *)&v420, v398);
          memset(&v433, 0, sizeof(v433));
          std::vector<siri::dialogengine::UpdatableDir>::__init_with_size[abi:ne180100]<siri::dialogengine::UpdatableDir*,siri::dialogengine::UpdatableDir*>(&v433, (uint64_t)v420.__begin_, (uint64_t)v420.__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)v420.__end_ - (char *)v420.__begin_) >> 5));
          siri::dialogengine::RequestInfo::~RequestInfo((void **)&v420.__first_);
          siri::dialogengine::Context::Context((siri::dialogengine::Context *)&v420);
          siri::dialogengine::RequestInfo::RequestInfo((siri::dialogengine::RequestInfo *)&v434);
          std::vector<siri::dialogengine::UpdatableDir>::__assign_with_size[abi:ne180100]<siri::dialogengine::UpdatableDir*,siri::dialogengine::UpdatableDir*>((uint64_t)&v434.__r_.__value_.__l.__size_, (std::string *)v433.__r_.__value_.__l.__data_, (std::string *)v433.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v433.__r_.__value_.__l.__size_ - v433.__r_.__value_.__r.__words[0]) >> 5));
          std::string::operator=(v441, &__str);
          LODWORD(v434.__r_.__value_.__l.__data_) = 1;
          siri::dialogengine::Context::SetRequestInfo((uint64_t)&v420, (uint64_t)&v434);
          siri::dialogengine::RequestInfo::~RequestInfo((void **)&v434.__r_.__value_.__l.__data_);
          if (*(char *)(v188 + 135) < 0)
            std::string::__init_copy_ctor_external(&v434, *(const std::string::value_type **)(v188 + 112), *(_QWORD *)(v188 + 120));
          else
            v434 = *(std::string *)v189;
          if ((siri::dialogengine::Context::Load((siri::dialogengine::Context *)&v420) & 1) == 0)
          {
            v198 = v427;
            *(_OWORD *)&v432.__r_.__value_.__l.__data_ = v427;
            if (*((_QWORD *)&v427 + 1))
            {
              v199 = (unint64_t *)(*((_QWORD *)&v427 + 1) + 8);
              do
                v200 = __ldxr(v199);
              while (__stxr(v200 + 1, v199));
            }
            v201 = *((_QWORD *)v399 + 63);
            v202 = (std::__shared_weak_count *)*((_QWORD *)v399 + 64);
            v431.__r_.__value_.__r.__words[0] = v201;
            v431.__r_.__value_.__l.__size_ = (std::string::size_type)v202;
            if (v202)
            {
              v203 = (unint64_t *)&v202->__shared_owners_;
              do
                v204 = __ldxr(v203);
              while (__stxr(v204 + 1, v203));
            }
            siri::dialogengine::CopyValidationEntries(v198, v201, &__str);
            if (v202)
            {
              v205 = (unint64_t *)&v202->__shared_owners_;
              do
                v206 = __ldaxr(v205);
              while (__stlxr(v206 - 1, v205));
              if (!v206)
              {
                ((void (*)(std::__shared_weak_count *))v202->__on_zero_shared)(v202);
                std::__shared_weak_count::__release_weak(v202);
              }
            }
            v207 = (std::__shared_weak_count *)v432.__r_.__value_.__l.__size_;
            if (v432.__r_.__value_.__l.__size_)
            {
              v208 = (unint64_t *)(v432.__r_.__value_.__l.__size_ + 8);
              do
                v209 = __ldaxr(v208);
              while (__stlxr(v209 - 1, v208));
              if (!v209)
              {
                ((void (*)(std::__shared_weak_count *))v207->__on_zero_shared)(v207);
                std::__shared_weak_count::__release_weak(v207);
              }
            }
            std::operator+<char>();
            v210 = std::string::append(&v430, " for group: ");
            v211 = *(_OWORD *)&v210->__r_.__value_.__l.__data_;
            v431.__r_.__value_.__r.__words[2] = v210->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v431.__r_.__value_.__l.__data_ = v211;
            v210->__r_.__value_.__l.__size_ = 0;
            v210->__r_.__value_.__r.__words[2] = 0;
            v210->__r_.__value_.__r.__words[0] = 0;
            if (*(char *)(v188 + 87) < 0)
              std::string::__init_copy_ctor_external(&v429, *(const std::string::value_type **)(v188 + 64), *(_QWORD *)(v188 + 72));
            else
              v429 = *(std::string *)(v188 + 64);
            if ((v429.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v220 = &v429;
            else
              v220 = (std::string *)v429.__r_.__value_.__r.__words[0];
            if ((v429.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v221 = HIBYTE(v429.__r_.__value_.__r.__words[2]);
            else
              v221 = v429.__r_.__value_.__l.__size_;
            v222 = std::string::append(&v431, (const std::string::value_type *)v220, v221);
            v223 = *(_OWORD *)&v222->__r_.__value_.__l.__data_;
            v432.__r_.__value_.__r.__words[2] = v222->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v432.__r_.__value_.__l.__data_ = v223;
            v222->__r_.__value_.__l.__size_ = 0;
            v222->__r_.__value_.__r.__words[2] = 0;
            v222->__r_.__value_.__r.__words[0] = 0;
            siri::dialogengine::Context::AddValidationError((uint64_t)v399, (__int128 *)&v432, v188);
            if (SHIBYTE(v432.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v432.__r_.__value_.__l.__data_);
            if (SHIBYTE(v429.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v429.__r_.__value_.__l.__data_);
            if (SHIBYTE(v431.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v431.__r_.__value_.__l.__data_);
            if (SHIBYTE(v430.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v430.__r_.__value_.__l.__data_);
            v193 = 0;
            goto LABEL_579;
          }
          v195 = (std::__shared_weak_count *)*((_QWORD *)&v427 + 1);
          v194 = v427;
          *(_OWORD *)&v432.__r_.__value_.__l.__data_ = v427;
          if (*((_QWORD *)&v427 + 1))
          {
            v196 = (unint64_t *)(*((_QWORD *)&v427 + 1) + 8);
            do
              v197 = __ldxr(v196);
            while (__stxr(v197 + 1, v196));
          }
          if (v194
            && ((*(uint64_t (**)(uint64_t, std::__split_buffer<std::string> *))(*(_QWORD *)v194 + 16))(v194, &v420) & 1) == 0)
          {
            v224 = v427;
            *(_OWORD *)&v431.__r_.__value_.__l.__data_ = v427;
            if (*((_QWORD *)&v427 + 1))
            {
              v225 = (unint64_t *)(*((_QWORD *)&v427 + 1) + 8);
              do
                v226 = __ldxr(v225);
              while (__stxr(v226 + 1, v225));
            }
            v227 = *((_QWORD *)v399 + 63);
            v228 = (std::__shared_weak_count *)*((_QWORD *)v399 + 64);
            v430.__r_.__value_.__r.__words[0] = v227;
            v430.__r_.__value_.__l.__size_ = (std::string::size_type)v228;
            if (v228)
            {
              v229 = (unint64_t *)&v228->__shared_owners_;
              do
                v230 = __ldxr(v229);
              while (__stxr(v230 + 1, v229));
            }
            siri::dialogengine::CopyValidationEntries(v224, v227, &__str);
            if (v228)
            {
              v231 = (unint64_t *)&v228->__shared_owners_;
              do
                v232 = __ldaxr(v231);
              while (__stlxr(v232 - 1, v231));
              if (!v232)
              {
                ((void (*)(std::__shared_weak_count *))v228->__on_zero_shared)(v228);
                std::__shared_weak_count::__release_weak(v228);
              }
            }
            v233 = (std::__shared_weak_count *)v431.__r_.__value_.__l.__size_;
            if (v431.__r_.__value_.__l.__size_)
            {
              v234 = (unint64_t *)(v431.__r_.__value_.__l.__size_ + 8);
              do
                v235 = __ldaxr(v234);
              while (__stlxr(v235 - 1, v234));
              if (!v235)
              {
                ((void (*)(std::__shared_weak_count *))v233->__on_zero_shared)(v233);
                std::__shared_weak_count::__release_weak(v233);
              }
            }
            v193 = 0;
            v195 = (std::__shared_weak_count *)v432.__r_.__value_.__l.__size_;
            if (!v432.__r_.__value_.__l.__size_)
              goto LABEL_579;
          }
          else
          {
            v193 = 1;
            if (!v195)
            {
LABEL_579:
              if (SHIBYTE(v434.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v434.__r_.__value_.__l.__data_);
              siri::dialogengine::Context::~Context((siri::dialogengine::Context *)&v420);
              v420.__first_ = &v433;
              std::vector<siri::dialogengine::UpdatableDir>::__destroy_vector::operator()[abi:ne180100]((void ***)&v420);
              goto LABEL_582;
            }
          }
          v236 = (unint64_t *)&v195->__shared_owners_;
          do
            v237 = __ldaxr(v236);
          while (__stlxr(v237 - 1, v236));
          if (!v237)
          {
            ((void (*)(std::__shared_weak_count *))v195->__on_zero_shared)(v195);
            std::__shared_weak_count::__release_weak(v195);
          }
          goto LABEL_579;
        }
        if (*(char *)(v188 + 87) < 0)
          std::string::__init_copy_ctor_external(&v432, *(const std::string::value_type **)(v188 + 64), *(_QWORD *)(v188 + 72));
        else
          v432 = *(std::string *)(v188 + 64);
        v212 = std::string::insert(&v432, 0, "Visual CAT file for group '");
        v213 = *(_OWORD *)&v212->__r_.__value_.__l.__data_;
        v433.__r_.__value_.__r.__words[2] = v212->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v433.__r_.__value_.__l.__data_ = v213;
        v212->__r_.__value_.__l.__size_ = 0;
        v212->__r_.__value_.__r.__words[2] = 0;
        v212->__r_.__value_.__r.__words[0] = 0;
        v214 = std::string::append(&v433, "' does not exist: ");
        v215 = *(_OWORD *)&v214->__r_.__value_.__l.__data_;
        v434.__r_.__value_.__r.__words[2] = v214->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v434.__r_.__value_.__l.__data_ = v215;
        v214->__r_.__value_.__l.__size_ = 0;
        v214->__r_.__value_.__r.__words[2] = 0;
        v214->__r_.__value_.__r.__words[0] = 0;
        if ((v428.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v216 = &v428;
        else
          v216 = (std::string *)v428.__r_.__value_.__r.__words[0];
        if ((v428.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v217 = HIBYTE(v428.__r_.__value_.__r.__words[2]);
        else
          v217 = v428.__r_.__value_.__l.__size_;
        v218 = std::string::append(&v434, (const std::string::value_type *)v216, v217);
        v219 = *(_OWORD *)&v218->__r_.__value_.__l.__data_;
        v420.__end_ = (std::__split_buffer<std::string>::pointer)v218->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v420.__first_ = v219;
        v218->__r_.__value_.__l.__size_ = 0;
        v218->__r_.__value_.__r.__words[2] = 0;
        v218->__r_.__value_.__r.__words[0] = 0;
        siri::dialogengine::Context::AddValidationError((uint64_t)v399, (__int128 *)&v420, v188);
        if (SHIBYTE(v420.__end_) < 0)
          operator delete(v420.__first_);
        if (SHIBYTE(v434.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v434.__r_.__value_.__l.__data_);
        if (SHIBYTE(v433.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v433.__r_.__value_.__l.__data_);
        if (SHIBYTE(v432.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v432.__r_.__value_.__l.__data_);
        v193 = 0;
LABEL_582:
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        v420.__first_ = &v419;
        std::vector<siri::dialogengine::UpdatableDir>::__destroy_vector::operator()[abi:ne180100]((void ***)&v420);
        if ((*((_BYTE *)&v428.__r_.__value_.__s + 23) & 0x80) != 0)
          goto LABEL_585;
LABEL_586:
        v238 = (_OWORD *)(v395 + 136);
        if (*(char *)(v395 + 159) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&v420, *(const std::string::value_type **)(v395 + 136), *(_QWORD *)(v395 + 144));
        }
        else
        {
          *(_OWORD *)&v420.__first_ = *v238;
          v420.__end_ = *(std::__split_buffer<std::string>::pointer *)(v395 + 152);
        }
        v21 = v191 & v112 & v193;
        if (SHIBYTE(v420.__end_) < 0)
        {
          v239 = v420.__begin_;
          operator delete(v420.__first_);
          if (v239)
          {
LABEL_593:
            siri::dialogengine::DirName(v381, (uint64_t)&v432);
            siri::dialogengine::DirName(&v432, (uint64_t)&v433);
            siri::dialogengine::DirName(&v433, (uint64_t)&v434);
            siri::dialogengine::UpdatableDir::UpdatableDir((siri::dialogengine::UpdatableDir *)&v420, (__int128 *)&v434, 0);
            if (SHIBYTE(v434.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v434.__r_.__value_.__l.__data_);
            if (SHIBYTE(v433.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v433.__r_.__value_.__l.__data_);
            if (SHIBYTE(v432.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v432.__r_.__value_.__l.__data_);
            siri::dialogengine::UpdatableDir::UpdatableDir(&v434, (const siri::dialogengine::UpdatableDir *)&v420);
            memset(&v433, 0, sizeof(v433));
            v432.__r_.__value_.__r.__words[0] = (std::string::size_type)&v433;
            v432.__r_.__value_.__s.__data_[8] = 0;
            v433.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x60uLL);
            v433.__r_.__value_.__l.__size_ = v433.__r_.__value_.__r.__words[0];
            v433.__r_.__value_.__r.__words[2] = v433.__r_.__value_.__r.__words[0] + 96;
            v433.__r_.__value_.__l.__size_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<siri::dialogengine::UpdatableDir>,siri::dialogengine::UpdatableDir const*,siri::dialogengine::UpdatableDir const*,siri::dialogengine::UpdatableDir*>((uint64_t)&v433.__r_.__value_.__r.__words[2], (uint64_t)&v434, (uint64_t)&v439[0].__r_.__value_.__r.__words[2], (uint64_t)v433.__r_.__value_.__l.__data_);
            if (*(char *)(v395 + 159) < 0)
            {
              std::string::__init_copy_ctor_external(&v432, *(const std::string::value_type **)(v395 + 136), *(_QWORD *)(v395 + 144));
            }
            else
            {
              *(_OWORD *)&v432.__r_.__value_.__l.__data_ = *v238;
              v432.__r_.__value_.__r.__words[2] = *(_QWORD *)(v395 + 152);
            }
            siri::dialogengine::FindPatternFile((__int128 **)&v433, (uint64_t)&v432, (uint64_t)&v419);
            if (SHIBYTE(v432.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v432.__r_.__value_.__l.__data_);
            v432.__r_.__value_.__r.__words[0] = (std::string::size_type)&v433;
            std::vector<siri::dialogengine::UpdatableDir>::__destroy_vector::operator()[abi:ne180100]((void ***)&v432);
            v432.__r_.__value_.__r.__words[0] = (std::string::size_type)&v438;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v432);
            v432.__r_.__value_.__r.__words[0] = (std::string::size_type)&v437;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v432);
            if (v436 < 0)
              operator delete((void *)v435);
            if (SHIBYTE(v434.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v434.__r_.__value_.__l.__data_);
            v240 = siri::dialogengine::PatternFile::LoadFromPath((uint64_t *)v399, &v419, 0, (__n128 *)&__str);
            v241 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
            if (__str.__r_.__value_.__l.__size_)
            {
              v242 = (unint64_t *)(__str.__r_.__value_.__l.__size_ + 8);
              do
                v243 = __ldxr(v242);
              while (__stxr(v243 + 1, v242));
            }
            v244 = v401;
            v400 = v402;
            if (v402)
            {
              v245 = (unint64_t *)&v402->__shared_owners_;
              do
                v246 = __ldxr(v245);
              while (__stxr(v246 + 1, v245));
            }
            v248 = v404;
            v247 = v405;
            if (v405)
            {
              v249 = (unint64_t *)&v405->__shared_owners_;
              do
                v250 = __ldxr(v249);
              while (__stxr(v250 + 1, v249));
            }
            if (v399 && v248 && (_QWORD)v241)
            {
              (*(void (**)(std::string *__return_ptr, __n128))(*(_QWORD *)v244 + 48))(&v434, v240);
              if (*(char *)(v241 + 135) < 0)
                std::string::__init_copy_ctor_external(&v433, *(const std::string::value_type **)(v241 + 112), *(_QWORD *)(v241 + 120));
              else
                v433 = *(std::string *)(v241 + 112);
              v251 = v434.__r_.__value_.__l.__size_;
              if (std::__find_impl[abi:ne180100]<std::string *,std::string *,std::string,std::__identity>((uint64_t)v434.__r_.__value_.__l.__data_, v434.__r_.__value_.__l.__size_, (unsigned __int8 **)&v433) == v251)
              {
                if (*(char *)(v248 + 87) < 0)
                  std::string::__init_copy_ctor_external(&v428, *(const std::string::value_type **)(v248 + 64), *(_QWORD *)(v248 + 72));
                else
                  v428 = *(std::string *)(v248 + 64);
                v252 = std::string::insert(&v428, 0, "Group '");
                v253 = *(_OWORD *)&v252->__r_.__value_.__l.__data_;
                v429.__r_.__value_.__r.__words[2] = v252->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v429.__r_.__value_.__l.__data_ = v253;
                v252->__r_.__value_.__l.__size_ = 0;
                v252->__r_.__value_.__r.__words[2] = 0;
                v252->__r_.__value_.__r.__words[0] = 0;
                v254 = std::string::append(&v429, "' refers to a nested pattern of type '");
                v255 = *(_OWORD *)&v254->__r_.__value_.__l.__data_;
                v430.__r_.__value_.__r.__words[2] = v254->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v430.__r_.__value_.__l.__data_ = v255;
                v254->__r_.__value_.__l.__size_ = 0;
                v254->__r_.__value_.__r.__words[2] = 0;
                v254->__r_.__value_.__r.__words[0] = 0;
                if ((v433.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v256 = &v433;
                else
                  v256 = (std::string *)v433.__r_.__value_.__r.__words[0];
                if ((v433.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v257 = HIBYTE(v433.__r_.__value_.__r.__words[2]);
                else
                  v257 = v433.__r_.__value_.__l.__size_;
                v258 = std::string::append(&v430, (const std::string::value_type *)v256, v257);
                v259 = *(_OWORD *)&v258->__r_.__value_.__l.__data_;
                v431.__r_.__value_.__r.__words[2] = v258->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v431.__r_.__value_.__l.__data_ = v259;
                v258->__r_.__value_.__l.__size_ = 0;
                v258->__r_.__value_.__r.__words[2] = 0;
                v258->__r_.__value_.__r.__words[0] = 0;
                v260 = std::string::append(&v431, "' that is not supported.");
                v261 = *(_OWORD *)&v260->__r_.__value_.__l.__data_;
                v432.__r_.__value_.__r.__words[2] = v260->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v432.__r_.__value_.__l.__data_ = v261;
                v260->__r_.__value_.__l.__size_ = 0;
                v260->__r_.__value_.__r.__words[2] = 0;
                v260->__r_.__value_.__r.__words[0] = 0;
                siri::dialogengine::Context::AddValidationError((uint64_t)v399, (__int128 *)&v432, v248);
                if (SHIBYTE(v432.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v432.__r_.__value_.__l.__data_);
                if (SHIBYTE(v431.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v431.__r_.__value_.__l.__data_);
                if (SHIBYTE(v430.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v430.__r_.__value_.__l.__data_);
                if (SHIBYTE(v429.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v429.__r_.__value_.__l.__data_);
                if (SHIBYTE(v428.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v428.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v433.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v433.__r_.__value_.__l.__data_);
              v433.__r_.__value_.__r.__words[0] = (std::string::size_type)&v434;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v433);
            }
            if (v247)
            {
              v262 = (unint64_t *)&v247->__shared_owners_;
              do
                v263 = __ldaxr(v262);
              while (__stlxr(v263 - 1, v262));
              if (!v263)
              {
                ((void (*)(std::__shared_weak_count *, __n128))v247->__on_zero_shared)(v247, v240);
                std::__shared_weak_count::__release_weak(v247);
              }
            }
            if (v400)
            {
              v264 = (unint64_t *)&v400->__shared_owners_;
              do
                v265 = __ldaxr(v264);
              while (__stlxr(v265 - 1, v264));
              if (!v265)
              {
                ((void (*)(std::__shared_weak_count *, __n128))v400->__on_zero_shared)(v400, v240);
                std::__shared_weak_count::__release_weak(v400);
              }
            }
            if (*((_QWORD *)&v241 + 1))
            {
              v266 = (unint64_t *)(*((_QWORD *)&v241 + 1) + 8);
              do
                v267 = __ldaxr(v266);
              while (__stlxr(v267 - 1, v266));
              if (!v267)
              {
                (*(void (**)(_QWORD, __n128))(**((_QWORD **)&v241 + 1) + 16))(*((_QWORD *)&v241 + 1), v240);
                std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v241 + 1));
              }
            }
            v268 = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
            if (__str.__r_.__value_.__l.__size_)
            {
              v269 = (unint64_t *)(__str.__r_.__value_.__l.__size_ + 8);
              do
                v270 = __ldaxr(v269);
              while (__stlxr(v270 - 1, v269));
              if (!v270)
              {
                ((void (*)(std::__shared_weak_count *, __n128))v268->__on_zero_shared)(v268, v240);
                std::__shared_weak_count::__release_weak(v268);
              }
            }
            if (SHIBYTE(v419.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v419.__r_.__value_.__l.__data_);
            v434.__r_.__value_.__r.__words[0] = (std::string::size_type)&v423;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v434);
            v434.__r_.__value_.__r.__words[0] = (std::string::size_type)&v422;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v434);
            if (v421 < 0)
              operator delete(v420.__end_cap_.__value_);
            if (SHIBYTE(v420.__end_) < 0)
              operator delete(v420.__first_);
          }
        }
        else if (HIBYTE(v420.__end_))
        {
          goto LABEL_593;
        }
LABEL_241:
        v100 = v402;
        if (v402)
        {
          v101 = (unint64_t *)&v402->__shared_owners_;
          do
            v102 = __ldaxr(v101);
          while (__stlxr(v102 - 1, v101));
          if (!v102)
          {
            ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
            std::__shared_weak_count::__release_weak(v100);
          }
        }
        v103 = v405;
        if (v405)
        {
          v104 = (unint64_t *)&v405->__shared_owners_;
          do
            v105 = __ldaxr(v104);
          while (__stlxr(v105 - 1, v104));
          if (!v105)
          {
            ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
            std::__shared_weak_count::__release_weak(v103);
          }
        }
        if (SHIBYTE(v403.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v403.__r_.__value_.__l.__data_);
        v106 = (__int128 *)*((_QWORD *)v94 + 1);
        if (v106)
        {
          do
          {
            v107 = v106;
            v106 = *(__int128 **)v106;
          }
          while (v106);
        }
        else
        {
          do
          {
            v107 = (__int128 *)*((_QWORD *)v94 + 2);
            v20 = *(_QWORD *)v107 == (_QWORD)v94;
            v94 = v107;
          }
          while (!v20);
        }
        v94 = v107;
        if (v107 == (__int128 *)v407)
          goto LABEL_672;
      }
      v97 = 0;
      if ((*((_BYTE *)&v434.__r_.__value_.__s + 23) & 0x80) == 0)
        goto LABEL_268;
LABEL_267:
      operator delete(v434.__r_.__value_.__l.__data_);
      goto LABEL_268;
    }
LABEL_672:
    std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(v407[0]);
    std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)&v434, (const void ***)(v4 + 160));
    v271 = v434.__r_.__value_.__r.__words[0];
    if ((std::string::size_type *)v434.__r_.__value_.__l.__data_ != &v434.__r_.__value_.__r.__words[1])
    {
      v272 = (std::string *)*MEMORY[0x1E0DE4F50];
      v393 = *(std::string **)(MEMORY[0x1E0DE4F50] + 64);
      v390 = *(std::string **)(MEMORY[0x1E0DE4F50] + 72);
      v389 = (std::string *)(MEMORY[0x1E0DE4FB8] + 16);
      do
      {
        if (*(char *)(v271 + 55) < 0)
        {
          if (!*(_QWORD *)(v271 + 40))
          {
LABEL_684:
            std::string::basic_string[abi:ne180100]<0>(&v420, "Setting defined in file without a name");
            siri::dialogengine::Context::AddValidationError((uint64_t)v399, (__int128 *)&v420, 0);
            if (SHIBYTE(v420.__end_) < 0)
              operator delete(v420.__first_);
            LOBYTE(v21) = 0;
            goto LABEL_698;
          }
        }
        else if (!*(_BYTE *)(v271 + 55))
        {
          goto LABEL_684;
        }
        v273 = v408;
        v274 = std::__tree<std::string>::find<std::string>((uint64_t)v408 + 120, (const void **)(v271 + 32));
        if ((siri::dialogengine::PatternSchema *)((char *)v273 + 128) == (siri::dialogengine::PatternSchema *)v274)
        {
          v416 = 0;
          v417 = 0;
LABEL_688:
          std::operator+<char>();
          v279 = std::string::append(&v403, "'");
          v280 = *(_OWORD *)&v279->__r_.__value_.__l.__data_;
          v420.__end_ = (std::__split_buffer<std::string>::pointer)v279->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v420.__first_ = v280;
          v279->__r_.__value_.__l.__size_ = 0;
          v279->__r_.__value_.__r.__words[2] = 0;
          v279->__r_.__value_.__r.__words[0] = 0;
          siri::dialogengine::Context::AddValidationError((uint64_t)v399, (__int128 *)&v420, 0);
          if (SHIBYTE(v420.__end_) < 0)
            operator delete(v420.__first_);
          if (SHIBYTE(v403.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v403.__r_.__value_.__l.__data_);
          LOBYTE(v21) = 0;
          goto LABEL_693;
        }
        v276 = *(_QWORD *)(v274 + 56);
        v275 = *(std::__shared_weak_count **)(v274 + 64);
        v416 = v276;
        v417 = v275;
        if (v275)
        {
          v277 = (unint64_t *)&v275->__shared_owners_;
          do
            v278 = __ldxr(v277);
          while (__stxr(v278 + 1, v277));
        }
        if (!v276)
          goto LABEL_688;
        if (*(char *)(v276 + 151) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&v420, *(const std::string::value_type **)(v276 + 128), *(_QWORD *)(v276 + 136));
        }
        else
        {
          *(_OWORD *)&v420.__first_ = *(_OWORD *)(v276 + 128);
          v420.__end_ = *(std::__split_buffer<std::string>::pointer *)(v276 + 144);
        }
        if (SHIBYTE(v420.__end_) < 0)
        {
          v286 = v420.__begin_;
          operator delete(v420.__first_);
          if (!v286)
            goto LABEL_743;
        }
        else if (!HIBYTE(v420.__end_))
        {
          goto LABEL_743;
        }
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v420);
        v287 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v420.__end_, (uint64_t)"Setting '", 9);
        v288 = *(char *)(v271 + 55);
        if (v288 >= 0)
          v289 = v271 + 32;
        else
          v289 = *(_QWORD *)(v271 + 32);
        if (v288 >= 0)
          v290 = *(unsigned __int8 *)(v271 + 55);
        else
          v290 = *(_QWORD *)(v271 + 40);
        v291 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v287, v289, v290);
        v292 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v291, (uint64_t)"' in pattern '", 14);
        if (*(char *)(v4 + 87) < 0)
        {
          std::string::__init_copy_ctor_external(&v403, *(const std::string::value_type **)(v4 + 64), *(_QWORD *)(v4 + 72));
        }
        else
        {
          *(_OWORD *)&v403.__r_.__value_.__l.__data_ = *(_OWORD *)v380;
          v403.__r_.__value_.__r.__words[2] = *(_QWORD *)(v4 + 80);
        }
        if ((v403.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v293 = &v403;
        else
          v293 = (std::string *)v403.__r_.__value_.__r.__words[0];
        if ((v403.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v294 = HIBYTE(v403.__r_.__value_.__r.__words[2]);
        else
          v294 = v403.__r_.__value_.__l.__size_;
        v295 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v292, (uint64_t)v293, v294);
        v296 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v295, (uint64_t)"' is deprecated: ", 17);
        v276 = v416;
        if (*(char *)(v416 + 151) < 0)
          std::string::__init_copy_ctor_external(&v433, *(const std::string::value_type **)(v416 + 128), *(_QWORD *)(v416 + 136));
        else
          v433 = *(std::string *)(v416 + 128);
        if ((v433.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v297 = &v433;
        else
          v297 = (std::string *)v433.__r_.__value_.__r.__words[0];
        if ((v433.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v298 = HIBYTE(v433.__r_.__value_.__r.__words[2]);
        else
          v298 = v433.__r_.__value_.__l.__size_;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v296, (uint64_t)v297, v298);
        if (SHIBYTE(v433.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v433.__r_.__value_.__l.__data_);
        if (SHIBYTE(v403.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v403.__r_.__value_.__l.__data_);
        std::stringbuf::str();
        siri::dialogengine::Context::AddValidationWarning((uint64_t)v399, (__int128 *)&v403, (uint64_t)v412);
        if (SHIBYTE(v403.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v403.__r_.__value_.__l.__data_);
        v420.__first_ = v272;
        *(std::__split_buffer<std::string>::pointer *)((char *)&v420.__first_ + v272[-1].__r_.__value_.__r.__words[0]) = v393;
        v420.__end_ = v390;
        v420.__end_cap_.__value_ = v389;
        if (v425 < 0)
          operator delete(v424);
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        MEMORY[0x1C3B8D80C](v426);
LABEL_743:
        if (*(char *)(v271 + 79) < 0)
          v299 = *(_QWORD *)(v271 + 64);
        else
          v299 = *(unsigned __int8 *)(v271 + 79);
        if (!v299)
          goto LABEL_834;
        siri::dialogengine::Context::Context((siri::dialogengine::Context *)&v420);
        siri::dialogengine::ResolveType(0, (uint64_t)&v420, v271 + 56, 1, (uint64_t)&v403);
        if (*(char *)(v416 + 55) < 0)
          std::string::__init_copy_ctor_external(&v433, *(const std::string::value_type **)(v416 + 32), *(_QWORD *)(v416 + 40));
        else
          v433 = *(std::string *)(v416 + 32);
        v300 = strlen(siri::dialogengine::TYPE_UNKNOWN);
        v301 = v300;
        v302 = HIBYTE(v403.__r_.__value_.__r.__words[2]);
        if (SHIBYTE(v403.__r_.__value_.__r.__words[2]) < 0)
        {
          if (v300 != v403.__r_.__value_.__l.__size_)
            goto LABEL_757;
          if (v300 == -1)
            std::string::__throw_out_of_range[abi:ne180100]();
          v303 = (std::string *)v403.__r_.__value_.__r.__words[0];
        }
        else
        {
          if (v300 != HIBYTE(v403.__r_.__value_.__r.__words[2]))
            goto LABEL_757;
          v303 = &v403;
        }
        if (!memcmp(v303, siri::dialogengine::TYPE_UNKNOWN, v301))
        {
          std::operator+<char>();
          v308 = std::string::append(&v428, "' with value '");
          v309 = *(_OWORD *)&v308->__r_.__value_.__l.__data_;
          v429.__r_.__value_.__r.__words[2] = v308->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v429.__r_.__value_.__l.__data_ = v309;
          v308->__r_.__value_.__l.__size_ = 0;
          v308->__r_.__value_.__r.__words[2] = 0;
          v308->__r_.__value_.__r.__words[0] = 0;
          v310 = *(char *)(v271 + 79);
          if (v310 >= 0)
            v311 = (const std::string::value_type *)(v271 + 56);
          else
            v311 = *(const std::string::value_type **)(v271 + 56);
          if (v310 >= 0)
            v312 = *(unsigned __int8 *)(v271 + 79);
          else
            v312 = *(_QWORD *)(v271 + 64);
          v313 = std::string::append(&v429, v311, v312);
          v314 = *(_OWORD *)&v313->__r_.__value_.__l.__data_;
          v430.__r_.__value_.__r.__words[2] = v313->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v430.__r_.__value_.__l.__data_ = v314;
          v313->__r_.__value_.__l.__size_ = 0;
          v313->__r_.__value_.__r.__words[2] = 0;
          v313->__r_.__value_.__r.__words[0] = 0;
          v315 = std::string::append(&v430, "' has an unknown type. Expected it to be ");
          v316 = *(_OWORD *)&v315->__r_.__value_.__l.__data_;
          v431.__r_.__value_.__r.__words[2] = v315->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v431.__r_.__value_.__l.__data_ = v316;
          v315->__r_.__value_.__l.__size_ = 0;
          v315->__r_.__value_.__r.__words[2] = 0;
          v315->__r_.__value_.__r.__words[0] = 0;
          if ((v433.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v317 = &v433;
          else
            v317 = (std::string *)v433.__r_.__value_.__r.__words[0];
          if ((v433.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v318 = HIBYTE(v433.__r_.__value_.__r.__words[2]);
          else
            v318 = v433.__r_.__value_.__l.__size_;
          v319 = std::string::append(&v431, (const std::string::value_type *)v317, v318);
          v320 = *(_OWORD *)&v319->__r_.__value_.__l.__data_;
          v432.__r_.__value_.__r.__words[2] = v319->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v432.__r_.__value_.__l.__data_ = v320;
          v319->__r_.__value_.__l.__size_ = 0;
          v319->__r_.__value_.__r.__words[2] = 0;
          v319->__r_.__value_.__r.__words[0] = 0;
          siri::dialogengine::Context::AddValidationError((uint64_t)v399, (__int128 *)&v432, 0);
          if (SHIBYTE(v432.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v432.__r_.__value_.__l.__data_);
          if (SHIBYTE(v431.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v431.__r_.__value_.__l.__data_);
          if (SHIBYTE(v430.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v430.__r_.__value_.__l.__data_);
          if (SHIBYTE(v429.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v429.__r_.__value_.__l.__data_);
          if (SHIBYTE(v428.__r_.__value_.__r.__words[2]) < 0)
          {
            v321 = (void *)v428.__r_.__value_.__r.__words[0];
            goto LABEL_827;
          }
LABEL_828:
          LOBYTE(v21) = 0;
          goto LABEL_829;
        }
LABEL_757:
        if ((v302 & 0x80u) == 0)
          v304 = v302;
        else
          v304 = v403.__r_.__value_.__l.__size_;
        v305 = HIBYTE(v433.__r_.__value_.__r.__words[2]);
        if ((v433.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v305 = v433.__r_.__value_.__l.__size_;
        if (v304 != v305)
          goto LABEL_795;
        if ((v433.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v306 = &v433;
        else
          v306 = (std::string *)v433.__r_.__value_.__r.__words[0];
        if ((v302 & 0x80) != 0)
        {
          if (memcmp(v403.__r_.__value_.__l.__data_, v306, v403.__r_.__value_.__l.__size_))
            goto LABEL_795;
        }
        else if ((_DWORD)v302)
        {
          v307 = &v403;
          while (v307->__r_.__value_.__s.__data_[0] == v306->__r_.__value_.__s.__data_[0])
          {
            v307 = (std::string *)((char *)v307 + 1);
            v306 = (std::string *)((char *)v306 + 1);
            if (!--v302)
              goto LABEL_829;
          }
LABEL_795:
          std::operator+<char>();
          v322 = std::string::append(&__str, "' with value '");
          v323 = *(_OWORD *)&v322->__r_.__value_.__l.__data_;
          v419.__r_.__value_.__r.__words[2] = v322->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v419.__r_.__value_.__l.__data_ = v323;
          v322->__r_.__value_.__l.__size_ = 0;
          v322->__r_.__value_.__r.__words[2] = 0;
          v322->__r_.__value_.__r.__words[0] = 0;
          v324 = *(char *)(v271 + 79);
          if (v324 >= 0)
            v325 = (const std::string::value_type *)(v271 + 56);
          else
            v325 = *(const std::string::value_type **)(v271 + 56);
          if (v324 >= 0)
            v326 = *(unsigned __int8 *)(v271 + 79);
          else
            v326 = *(_QWORD *)(v271 + 64);
          v327 = std::string::append(&v419, v325, v326);
          v328 = *(_OWORD *)&v327->__r_.__value_.__l.__data_;
          v428.__r_.__value_.__r.__words[2] = v327->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v428.__r_.__value_.__l.__data_ = v328;
          v327->__r_.__value_.__l.__size_ = 0;
          v327->__r_.__value_.__r.__words[2] = 0;
          v327->__r_.__value_.__r.__words[0] = 0;
          v329 = std::string::append(&v428, "' is of type ");
          v330 = *(_OWORD *)&v329->__r_.__value_.__l.__data_;
          v429.__r_.__value_.__r.__words[2] = v329->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v429.__r_.__value_.__l.__data_ = v330;
          v329->__r_.__value_.__l.__size_ = 0;
          v329->__r_.__value_.__r.__words[2] = 0;
          v329->__r_.__value_.__r.__words[0] = 0;
          if ((v403.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v331 = &v403;
          else
            v331 = (std::string *)v403.__r_.__value_.__r.__words[0];
          if ((v403.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v332 = HIBYTE(v403.__r_.__value_.__r.__words[2]);
          else
            v332 = v403.__r_.__value_.__l.__size_;
          v333 = std::string::append(&v429, (const std::string::value_type *)v331, v332);
          v334 = *(_OWORD *)&v333->__r_.__value_.__l.__data_;
          v430.__r_.__value_.__r.__words[2] = v333->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v430.__r_.__value_.__l.__data_ = v334;
          v333->__r_.__value_.__l.__size_ = 0;
          v333->__r_.__value_.__r.__words[2] = 0;
          v333->__r_.__value_.__r.__words[0] = 0;
          v335 = std::string::append(&v430, " which is not ");
          v336 = *(_OWORD *)&v335->__r_.__value_.__l.__data_;
          v431.__r_.__value_.__r.__words[2] = v335->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v431.__r_.__value_.__l.__data_ = v336;
          v335->__r_.__value_.__l.__size_ = 0;
          v335->__r_.__value_.__r.__words[2] = 0;
          v335->__r_.__value_.__r.__words[0] = 0;
          if ((v433.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v337 = &v433;
          else
            v337 = (std::string *)v433.__r_.__value_.__r.__words[0];
          if ((v433.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v338 = HIBYTE(v433.__r_.__value_.__r.__words[2]);
          else
            v338 = v433.__r_.__value_.__l.__size_;
          v339 = std::string::append(&v431, (const std::string::value_type *)v337, v338);
          v340 = *(_OWORD *)&v339->__r_.__value_.__l.__data_;
          v432.__r_.__value_.__r.__words[2] = v339->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v432.__r_.__value_.__l.__data_ = v340;
          v339->__r_.__value_.__l.__size_ = 0;
          v339->__r_.__value_.__r.__words[2] = 0;
          v339->__r_.__value_.__r.__words[0] = 0;
          siri::dialogengine::Context::AddValidationError((uint64_t)v399, (__int128 *)&v432, 0);
          if (SHIBYTE(v432.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v432.__r_.__value_.__l.__data_);
          if (SHIBYTE(v431.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v431.__r_.__value_.__l.__data_);
          if (SHIBYTE(v430.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v430.__r_.__value_.__l.__data_);
          if (SHIBYTE(v429.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v429.__r_.__value_.__l.__data_);
          if (SHIBYTE(v428.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v428.__r_.__value_.__l.__data_);
          if (SHIBYTE(v419.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v419.__r_.__value_.__l.__data_);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          {
            v321 = (void *)__str.__r_.__value_.__r.__words[0];
LABEL_827:
            operator delete(v321);
          }
          goto LABEL_828;
        }
LABEL_829:
        if (SHIBYTE(v433.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v433.__r_.__value_.__l.__data_);
        if (SHIBYTE(v403.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v403.__r_.__value_.__l.__data_);
        siri::dialogengine::Context::~Context((siri::dialogengine::Context *)&v420);
        v276 = v416;
LABEL_834:
        if (*(char *)(v276 + 55) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&v420, *(const std::string::value_type **)(v276 + 32), *(_QWORD *)(v276 + 40));
        }
        else
        {
          *(_OWORD *)&v420.__first_ = *(_OWORD *)(v276 + 32);
          v420.__end_ = *(std::__split_buffer<std::string>::pointer *)(v276 + 48);
        }
        if (SHIBYTE(v420.__end_) < 0)
        {
          v342 = v420.__first_;
          if (v420.__begin_ != (std::__split_buffer<std::string>::pointer)13)
            goto LABEL_869;
          v344 = v420.__first_->__r_.__value_.__r.__words[0] != 0x532E676F6C616964
              || *(std::string::size_type *)((char *)v420.__first_->__r_.__value_.__r.__words + 5) != 0x676E697274532E67;
          operator delete(v420.__first_);
          if (!v344)
          {
LABEL_853:
            siri::dialogengine::StringTrim("'", (const std::string *)(v271 + 56), (std::string *)&v420);
            if (!siri::dialogengine::ValidateSettingValue((_QWORD *)(v271 + 32), (uint64_t)&v420))
            {
              std::operator+<char>();
              v345 = std::string::append(&v432, "' has an invalid value: ");
              v346 = *(_OWORD *)&v345->__r_.__value_.__l.__data_;
              v433.__r_.__value_.__r.__words[2] = v345->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v433.__r_.__value_.__l.__data_ = v346;
              v345->__r_.__value_.__l.__size_ = 0;
              v345->__r_.__value_.__r.__words[2] = 0;
              v345->__r_.__value_.__r.__words[0] = 0;
              v347 = *(char *)(v271 + 79);
              if (v347 >= 0)
                v348 = (const std::string::value_type *)(v271 + 56);
              else
                v348 = *(const std::string::value_type **)(v271 + 56);
              if (v347 >= 0)
                v349 = *(unsigned __int8 *)(v271 + 79);
              else
                v349 = *(_QWORD *)(v271 + 64);
              v350 = std::string::append(&v433, v348, v349);
              v351 = *(_OWORD *)&v350->__r_.__value_.__l.__data_;
              v403.__r_.__value_.__r.__words[2] = v350->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v403.__r_.__value_.__l.__data_ = v351;
              v350->__r_.__value_.__l.__size_ = 0;
              v350->__r_.__value_.__r.__words[2] = 0;
              v350->__r_.__value_.__r.__words[0] = 0;
              siri::dialogengine::Context::AddValidationError((uint64_t)v399, (__int128 *)&v403, 0);
              if (SHIBYTE(v403.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v403.__r_.__value_.__l.__data_);
              if (SHIBYTE(v433.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v433.__r_.__value_.__l.__data_);
              if (SHIBYTE(v432.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v432.__r_.__value_.__l.__data_);
              LOBYTE(v21) = 0;
            }
            if ((SHIBYTE(v420.__end_) & 0x80000000) == 0)
              goto LABEL_693;
            v342 = v420.__first_;
LABEL_869:
            operator delete(v342);
          }
        }
        else if (SHIBYTE(v420.__end_) == 13
               && v420.__first_ == (std::__split_buffer<std::string>::pointer)0x532E676F6C616964
               && *(std::__split_buffer<std::string>::pointer *)((char *)&v420.__first_ + 5) == (std::__split_buffer<std::string>::pointer)0x676E697274532E67)
        {
          goto LABEL_853;
        }
LABEL_693:
        v281 = v417;
        if (v417)
        {
          v282 = (unint64_t *)&v417->__shared_owners_;
          do
            v283 = __ldaxr(v282);
          while (__stlxr(v283 - 1, v282));
          if (!v283)
          {
            ((void (*)(std::__shared_weak_count *))v281->__on_zero_shared)(v281);
            std::__shared_weak_count::__release_weak(v281);
          }
        }
LABEL_698:
        v284 = *(std::string **)(v271 + 8);
        if (v284)
        {
          do
          {
            v285 = v284;
            v284 = (std::string *)v284->__r_.__value_.__r.__words[0];
          }
          while (v284);
        }
        else
        {
          do
          {
            v285 = *(std::string **)(v271 + 16);
            v20 = v285->__r_.__value_.__r.__words[0] == v271;
            v271 = (std::string::size_type)v285;
          }
          while (!v20);
        }
        v271 = (std::string::size_type)v285;
      }
      while (v285 != (std::string *)&v434.__r_.__value_.__r.__words[1]);
    }
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((_QWORD *)v434.__r_.__value_.__l.__size_);
    *(_OWORD *)&v434.__r_.__value_.__r.__words[1] = 0uLL;
    v434.__r_.__value_.__r.__words[0] = (std::string::size_type)&v434.__r_.__value_.__l.__size_;
    LOBYTE(v435) = 0;
    siri::dialogengine::RequestInfo::RequestInfo((siri::dialogengine::RequestInfo *)&v420, (const siri::dialogengine::RequestInfo *)((char *)v399 + 8));
    memset(&v403, 0, sizeof(v403));
    std::vector<siri::dialogengine::UpdatableDir>::__init_with_size[abi:ne180100]<siri::dialogengine::UpdatableDir*,siri::dialogengine::UpdatableDir*>(&v403, (uint64_t)v420.__begin_, (uint64_t)v420.__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)v420.__end_ - (char *)v420.__begin_) >> 5));
    v352 = (std::string **)MEMORY[0x1E0DE4F50];
    siri::dialogengine::GetParamsForPattern(v4, (std::string **)&v403, 2, 1, 1, (uint64_t)&v434);
    v433.__r_.__value_.__r.__words[0] = (std::string::size_type)&v403;
    std::vector<siri::dialogengine::UpdatableDir>::__destroy_vector::operator()[abi:ne180100]((void ***)&v433);
    siri::dialogengine::RequestInfo::~RequestInfo((void **)&v420.__first_);
    siri::dialogengine::ParameterCollection::GetConflictingParameters((uint64_t **)&v434, (siri::dialogengine::Context *)v399, (uint64_t **)&v403);
    v353 = v403.__r_.__value_.__r.__words[0];
    if ((std::string::size_type *)v403.__r_.__value_.__l.__data_ != &v403.__r_.__value_.__r.__words[1])
    {
      v396 = *v352;
      v391 = v352[9];
      v394 = v352[8];
      v388 = (std::string *)(MEMORY[0x1E0DE4FB8] + 16);
      do
      {
        memset(&v433, 0, sizeof(v433));
        for (i = *(_QWORD **)(v353 + 72); i; i = (_QWORD *)*i)
        {
          v355 = i[2];
          if (*(char *)(v355 + 279) < 0)
            std::string::__init_copy_ctor_external(&v431, *(const std::string::value_type **)(v355 + 256), *(_QWORD *)(v355 + 264));
          else
            v431 = *(std::string *)(v355 + 256);
          siri::dialogengine::CatPathToId((unsigned __int8 *)&v431, &v432);
          v356 = (_OWORD *)v433.__r_.__value_.__l.__size_;
          if (v433.__r_.__value_.__l.__size_ >= v433.__r_.__value_.__r.__words[2])
          {
            v358 = 0xAAAAAAAAAAAAAAABLL
                 * ((uint64_t)(v433.__r_.__value_.__l.__size_ - v433.__r_.__value_.__r.__words[0]) >> 3);
            v359 = v358 + 1;
            if (v358 + 1 > 0xAAAAAAAAAAAAAAALL)
              std::vector<BOOL>::__throw_length_error[abi:ne180100]();
            if (0x5555555555555556
               * ((uint64_t)(v433.__r_.__value_.__r.__words[2] - v433.__r_.__value_.__r.__words[0]) >> 3) > v359)
              v359 = 0x5555555555555556
                   * ((uint64_t)(v433.__r_.__value_.__r.__words[2] - v433.__r_.__value_.__r.__words[0]) >> 3);
            if (0xAAAAAAAAAAAAAAABLL
               * ((uint64_t)(v433.__r_.__value_.__r.__words[2] - v433.__r_.__value_.__r.__words[0]) >> 3) >= 0x555555555555555)
              v360 = 0xAAAAAAAAAAAAAAALL;
            else
              v360 = v359;
            v420.__end_cap_.__value_ = (std::allocator<std::string> *)&v433.__r_.__value_.__r.__words[2];
            if (v360)
              v361 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v433.__r_.__value_.__r.__words[2], v360);
            else
              v361 = 0;
            v362 = v361 + v358;
            v420.__first_ = v361;
            v420.__begin_ = v362;
            v420.__end_cap_.__value_ = &v361[v360];
            v363 = *(_OWORD *)&v432.__r_.__value_.__l.__data_;
            v362->__r_.__value_.__r.__words[2] = v432.__r_.__value_.__r.__words[2];
            *(_OWORD *)&v362->__r_.__value_.__l.__data_ = v363;
            memset(&v432, 0, sizeof(v432));
            v420.__end_ = v362 + 1;
            std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)&v433, &v420);
            v364 = v433.__r_.__value_.__l.__size_;
            std::__split_buffer<std::string>::~__split_buffer(&v420);
            v433.__r_.__value_.__l.__size_ = v364;
            if (SHIBYTE(v432.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v432.__r_.__value_.__l.__data_);
          }
          else
          {
            v357 = *(_OWORD *)&v432.__r_.__value_.__l.__data_;
            *(_QWORD *)(v433.__r_.__value_.__l.__size_ + 16) = *((_QWORD *)&v432.__r_.__value_.__l + 2);
            *v356 = v357;
            memset(&v432, 0, sizeof(v432));
            v433.__r_.__value_.__l.__size_ = (std::string::size_type)v356 + 24;
          }
          if (SHIBYTE(v431.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v431.__r_.__value_.__l.__data_);
        }
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v420);
        v365 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v420.__end_, (uint64_t)"The parameter '", 15);
        v366 = *(char *)(v353 + 55);
        if (v366 >= 0)
          v367 = v353 + 32;
        else
          v367 = *(_QWORD *)(v353 + 32);
        if (v366 >= 0)
          v368 = *(unsigned __int8 *)(v353 + 55);
        else
          v368 = *(_QWORD *)(v353 + 40);
        v369 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v365, v367, v368);
        v370 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v369, (uint64_t)"' is defined in multiple files with different types (", 53);
        std::string::basic_string[abi:ne180100]<0>(&v431, ", ");
        siri::dialogengine::StringJoinInternal<std::vector<std::string>>((uint64_t)&v432, (uint64_t)v433.__r_.__value_.__l.__data_, v433.__r_.__value_.__l.__size_, (uint64_t)&v431);
        if ((v432.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v371 = &v432;
        else
          v371 = (std::string *)v432.__r_.__value_.__r.__words[0];
        if ((v432.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v372 = HIBYTE(v432.__r_.__value_.__r.__words[2]);
        else
          v372 = v432.__r_.__value_.__l.__size_;
        v373 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v370, (uint64_t)v371, v372);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v373, (uint64_t)")", 1);
        if (SHIBYTE(v432.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v432.__r_.__value_.__l.__data_);
        if (SHIBYTE(v431.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v431.__r_.__value_.__l.__data_);
        std::stringbuf::str();
        siri::dialogengine::Context::AddValidationError((uint64_t)v399, (__int128 *)&v432, 0);
        if (SHIBYTE(v432.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v432.__r_.__value_.__l.__data_);
        v420.__first_ = v396;
        *(std::__split_buffer<std::string>::pointer *)((char *)&v420.__first_ + v396[-1].__r_.__value_.__r.__words[0]) = v394;
        v420.__end_ = v391;
        v420.__end_cap_.__value_ = v388;
        if (v425 < 0)
          operator delete(v424);
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        MEMORY[0x1C3B8D80C](v426);
        v420.__first_ = &v433;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v420);
        v374 = *(std::string **)(v353 + 8);
        if (v374)
        {
          do
          {
            v375 = v374;
            v374 = (std::string *)v374->__r_.__value_.__r.__words[0];
          }
          while (v374);
        }
        else
        {
          do
          {
            v375 = *(std::string **)(v353 + 16);
            v20 = v375->__r_.__value_.__r.__words[0] == v353;
            v353 = (std::string::size_type)v375;
          }
          while (!v20);
        }
        v353 = (std::string::size_type)v375;
      }
      while (v375 != (std::string *)&v403.__r_.__value_.__r.__words[1]);
      LOBYTE(v21) = 0;
    }
    std::__tree<std::__value_type<std::string,std::unordered_set<std::shared_ptr<siri::dialogengine::Parameter>,siri::dialogengine::ParameterCollection::ParameterHash,siri::dialogengine::ParameterCollection::ParameterEqual,std::allocator<std::shared_ptr<siri::dialogengine::Parameter>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unordered_set<std::shared_ptr<siri::dialogengine::Parameter>,siri::dialogengine::ParameterCollection::ParameterHash,siri::dialogengine::ParameterCollection::ParameterEqual,std::allocator<std::shared_ptr<siri::dialogengine::Parameter>>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,std::unordered_set<std::shared_ptr<siri::dialogengine::Parameter>,siri::dialogengine::ParameterCollection::ParameterHash,siri::dialogengine::ParameterCollection::ParameterEqual,std::allocator<std::shared_ptr<siri::dialogengine::Parameter>>>>>>::destroy((_QWORD *)v403.__r_.__value_.__l.__size_);
    std::__tree<std::__value_type<std::string,std::unordered_set<std::shared_ptr<siri::dialogengine::Parameter>,siri::dialogengine::ParameterCollection::ParameterHash,siri::dialogengine::ParameterCollection::ParameterEqual,std::allocator<std::shared_ptr<siri::dialogengine::Parameter>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unordered_set<std::shared_ptr<siri::dialogengine::Parameter>,siri::dialogengine::ParameterCollection::ParameterHash,siri::dialogengine::ParameterCollection::ParameterEqual,std::allocator<std::shared_ptr<siri::dialogengine::Parameter>>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,std::unordered_set<std::shared_ptr<siri::dialogengine::Parameter>,siri::dialogengine::ParameterCollection::ParameterHash,siri::dialogengine::ParameterCollection::ParameterEqual,std::allocator<std::shared_ptr<siri::dialogengine::Parameter>>>>>>::destroy((_QWORD *)v434.__r_.__value_.__l.__size_);
  }
  else
  {
    std::operator+<char>();
    siri::dialogengine::Context::AddValidationError((uint64_t)v399, (__int128 *)&v420, 0);
    if (SHIBYTE(v420.__end_) < 0)
      operator delete(v420.__first_);
    LOBYTE(v21) = 0;
  }
  v376 = v409;
  if (v409)
  {
    v377 = (unint64_t *)&v409->__shared_owners_;
    do
      v378 = __ldaxr(v377);
    while (__stlxr(v378 - 1, v377));
    if (!v378)
    {
      ((void (*)(std::__shared_weak_count *))v376->__on_zero_shared)(v376);
      std::__shared_weak_count::__release_weak(v376);
    }
  }
  siri::dialogengine::LineNumberBase::~LineNumberBase(v412);
  return v21 & 1;
}

void sub_1BFC0C820(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,char a33,uint64_t a34,char a35,uint64_t a36,char a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,_QWORD *a45,uint64_t a46,char a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,void *a60,uint64_t a61,uint64_t a62,void *a63)
{
  void *a70;
  uint64_t v70;

  if (*(char *)(v70 + 3703) < 0)
    operator delete((void *)STACK[0x1080]);
  STACK[0x1080] = (unint64_t)&STACK[0x10A0];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x1080]);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a31);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a33);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a35);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a70);
  if (SLOBYTE(STACK[0x217]) < 0)
    operator delete((void *)STACK[0x200]);
  siri::dialogengine::UpdatableDir::~UpdatableDir((void **)&STACK[0x220]);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a37);
  std::pair<std::string const,std::shared_ptr<siri::dialogengine::JSONValue>>::~pair((uint64_t)&a39);
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(a45);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a47);
  siri::dialogengine::LineNumberBase::~LineNumberBase(&a52);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::ResolveUsage(uint64_t a1, uint64_t a2, int ***a3)
{
  unsigned __int8 v5;
  int **v6;
  int **v7;
  std::__shared_weak_count *v8;
  int *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  __int128 *v12;
  __int128 v13;
  __int128 v14;
  std::string::size_type size;
  int v16;
  std::__shared_weak_count *v17;
  __int128 v18;
  __int128 v19;
  void **v20;
  int v21;
  uint64_t v22;
  char v23;
  std::string::size_type v24;
  unint64_t v25;
  int v26;
  void *v27;
  void **v28;
  std::string *p_s1;
  unint64_t v30;
  void **v31;
  void **v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  __int128 v36;
  std::string::size_type v37;
  int v38;
  BOOL v39;
  int v40;
  std::string *v41;
  __int128 v42;
  _BOOL4 v44;
  _BOOL4 v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t i;
  int **v51;
  const void ***v52;
  unsigned int v54;
  std::__shared_weak_count *v55;
  void *__p[2];
  unsigned __int8 v57;
  std::string __s1;
  void *v59[2];
  std::string::size_type v60;
  std::string v61;
  _QWORD v62[5];
  std::string v63;
  void *v64[2];
  unsigned __int8 v65;
  uint64_t v66[3];
  _QWORD v67[7];

  v67[4] = *MEMORY[0x1E0C80C00];
  if ((v5 & 1) == 0
  {
    std::string::basic_string[abi:ne180100]<0>(&v63, "defined");
    std::string::basic_string[abi:ne180100]<0>(v64, "undefined");
    std::string::basic_string[abi:ne180100]<0>(v66, "==");
    std::string::basic_string[abi:ne180100]<0>(v67, "!=");
    std::set<std::string>::set[abi:ne180100](&siri::dialogengine::ResolveUsage(siri::dialogengine::Context *,siri::dialogengine::PatternFile *,std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>> const&)::VALID_OPERATORS, (const void **)&v63.__r_.__value_.__l.__data_, 4);
    for (i = 0; i != -12; i -= 3)
    {
      if (SHIBYTE(v67[i + 2]) < 0)
        operator delete((void *)v67[i]);
    }
    __cxa_atexit((void (*)(void *))std::set<std::string>::~set[abi:ne180100], &siri::dialogengine::ResolveUsage(siri::dialogengine::Context *,siri::dialogengine::PatternFile *,std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>> const&)::VALID_OPERATORS, &dword_1BF794000);
  }
  v7 = *a3;
  v6 = a3[1];
  if (*a3 == v6)
    return 0;
  v51 = a3[1];
  v52 = (const void ***)(a2 + 160);
  while (1)
  {
    v9 = *v7;
    v8 = (std::__shared_weak_count *)v7[1];
    v62[3] = *v7;
    v62[4] = v8;
    v55 = v8;
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
    }
    v12 = (__int128 *)(v9 + 2);
    if (*((char *)v9 + 31) < 0)
    {
      std::string::__init_copy_ctor_external(&v63, *((const std::string::value_type **)v9 + 1), *((_QWORD *)v9 + 2));
    }
    else
    {
      v13 = *v12;
      v63.__r_.__value_.__r.__words[2] = *((_QWORD *)v9 + 3);
      *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v13;
    }
    if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
    {
      size = v63.__r_.__value_.__l.__size_;
      operator delete(v63.__r_.__value_.__l.__data_);
      if (!size)
        goto LABEL_15;
LABEL_12:
      if (*((char *)v9 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v63, *((const std::string::value_type **)v9 + 1), *((_QWORD *)v9 + 2));
      }
      else
      {
        v14 = *v12;
        v63.__r_.__value_.__r.__words[2] = *((_QWORD *)v9 + 3);
        *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v14;
      }
      siri::dialogengine::StringSplit((unsigned __int8 *)&v63, " \t\n\r", v62);
      if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v63.__r_.__value_.__l.__data_);
      if (((0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v62[1] - v62[0]) >> 3)) & 0xFFFFFFFFFFFFFFFELL) != 2)
      {
        if (*((char *)v9 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(&v61, *((const std::string::value_type **)v9 + 1), *((_QWORD *)v9 + 2));
        }
        else
        {
          v19 = *v12;
          v61.__r_.__value_.__r.__words[2] = *((_QWORD *)v9 + 3);
          *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v19;
        }
        v17 = v55;
        v33 = std::string::insert(&v61, 0, "Unsupported condition syntax for usage: ");
        v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
        v63.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v34;
        v33->__r_.__value_.__l.__size_ = 0;
        v33->__r_.__value_.__r.__words[2] = 0;
        v33->__r_.__value_.__r.__words[0] = 0;
        siri::dialogengine::Context::AddValidationError(a1, (__int128 *)&v63, 0);
        if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v63.__r_.__value_.__l.__data_);
        if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v61.__r_.__value_.__l.__data_);
        v54 = 0;
        v16 = 1;
LABEL_122:
        v63.__r_.__value_.__r.__words[0] = (std::string::size_type)v62;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v63);
        if (!v17)
          goto LABEL_127;
        goto LABEL_123;
      }
      if (*(char *)(v62[0] + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v61, *(const std::string::value_type **)v62[0], *(_QWORD *)(v62[0] + 8));
      }
      else
      {
        v18 = *(_OWORD *)v62[0];
        v61.__r_.__value_.__r.__words[2] = *(_QWORD *)(v62[0] + 16);
        *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v18;
      }
      std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)v59, v52);
      v20 = (void **)v59[0];
      if (v59[0] != &v59[1])
      {
        v21 = 0;
        while (1)
        {
          std::pair<std::string const,std::string>::pair[abi:ne180100](&v63, (__int128 *)v20 + 2);
          siri::dialogengine::StringToLower((uint64_t)&v63, (uint64_t)&__s1);
          siri::dialogengine::StringToLower((uint64_t)&v61, (uint64_t)__p);
          v22 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
          v23 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
          if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v24 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
          else
            v24 = __s1.__r_.__value_.__l.__size_;
          v25 = v57;
          v26 = (char)v57;
          if ((v57 & 0x80u) != 0)
            v25 = (unint64_t)__p[1];
          if (v24 == v25)
          {
            v27 = __p[0];
            if ((v57 & 0x80u) == 0)
              v28 = __p;
            else
              v28 = (void **)__p[0];
            if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
            {
              if (!memcmp(__s1.__r_.__value_.__l.__data_, v28, __s1.__r_.__value_.__l.__size_))
              {
LABEL_47:
                if ((v65 & 0x80u) == 0)
                  v30 = v65;
                else
                  v30 = (unint64_t)v64[1];
                if (v26 < 0)
                {
                  operator delete(v27);
                  if ((*((_BYTE *)&__s1.__r_.__value_.__s + 23) & 0x80) == 0)
                    goto LABEL_52;
                }
                else if ((v23 & 0x80) == 0)
                {
LABEL_52:
                  v21 |= v30 != 0;
                  goto LABEL_55;
                }
                operator delete(__s1.__r_.__value_.__l.__data_);
                goto LABEL_52;
              }
            }
            else
            {
              if (!*((_BYTE *)&__s1.__r_.__value_.__s + 23))
                goto LABEL_47;
              p_s1 = &__s1;
              while (p_s1->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v28)
              {
                p_s1 = (std::string *)((char *)p_s1 + 1);
                v28 = (void **)((char *)v28 + 1);
                if (!--v22)
                  goto LABEL_47;
              }
            }
          }
          if (v26 < 0)
          {
            operator delete(__p[0]);
            if ((*((_BYTE *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
LABEL_54:
              operator delete(__s1.__r_.__value_.__l.__data_);
          }
          else if (v23 < 0)
          {
            goto LABEL_54;
          }
LABEL_55:
          if ((char)v65 < 0)
            operator delete(v64[0]);
          if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v63.__r_.__value_.__l.__data_);
          v31 = (void **)v20[1];
          if (v31)
          {
            do
            {
              v32 = v31;
              v31 = (void **)*v31;
            }
            while (v31);
          }
          else
          {
            do
            {
              v32 = (void **)v20[2];
              v39 = *v32 == v20;
              v20 = v32;
            }
            while (!v39);
          }
          v20 = v32;
          if (v32 == &v59[1])
            goto LABEL_75;
        }
      }
      v21 = 0;
LABEL_75:
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((_QWORD *)v59[1]);
      siri::dialogengine::StringToLower(v62[0] + 24, (uint64_t)&v63);
      if ((_UNKNOWN *)std::__tree<std::string>::find<std::string>((uint64_t)&siri::dialogengine::ResolveUsage(siri::dialogengine::Context *,siri::dialogengine::PatternFile *,std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>> const&)::VALID_OPERATORS, (const void **)&v63.__r_.__value_.__l.__data_) == &unk_1EF5835B8)
      {
        if (*((char *)v9 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(&__s1, *((const std::string::value_type **)v9 + 1), *((_QWORD *)v9 + 2));
        }
        else
        {
          v36 = *v12;
          __s1.__r_.__value_.__r.__words[2] = *((_QWORD *)v9 + 3);
          *(_OWORD *)&__s1.__r_.__value_.__l.__data_ = v36;
        }
        v6 = v51;
        v17 = v55;
        v41 = std::string::insert(&__s1, 0, "Unsupported operator in usage condition: ");
        v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
        v60 = v41->__r_.__value_.__r.__words[2];
        *(_OWORD *)v59 = v42;
        v41->__r_.__value_.__l.__size_ = 0;
        v41->__r_.__value_.__r.__words[2] = 0;
        v41->__r_.__value_.__r.__words[0] = 0;
        siri::dialogengine::Context::AddValidationError(a1, (__int128 *)v59, 0);
        if (SHIBYTE(v60) < 0)
          operator delete(v59[0]);
        if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__s1.__r_.__value_.__l.__data_);
        v16 = 3;
        if ((*((_BYTE *)&v63.__r_.__value_.__s + 23) & 0x80) == 0)
          goto LABEL_120;
      }
      else
      {
        if ((SHIBYTE(v63.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          if (HIBYTE(v63.__r_.__value_.__r.__words[2]) == 7)
          {
            v44 = LODWORD(v63.__r_.__value_.__l.__data_) == 1768318308
               && *(_DWORD *)((char *)v63.__r_.__value_.__r.__words + 3) == 1684369001;
            if ((v44 & v21 & 1) != 0)
              goto LABEL_115;
          }
          else if (HIBYTE(v63.__r_.__value_.__r.__words[2]) == 9)
          {
            v35 = &v63;
            goto LABEL_85;
          }
          v16 = 0;
          v6 = v51;
          v17 = v55;
          goto LABEL_120;
        }
        if (v63.__r_.__value_.__l.__size_ == 7)
        {
          v46 = *(_DWORD *)v63.__r_.__value_.__l.__data_ == 1768318308
             && *(_DWORD *)(v63.__r_.__value_.__r.__words[0] + 3) == 1684369001;
          if ((v46 & v21 & 1) != 0)
            goto LABEL_115;
        }
        else if (v63.__r_.__value_.__l.__size_ == 9)
        {
          v35 = (std::string *)v63.__r_.__value_.__r.__words[0];
LABEL_85:
          v37 = v35->__r_.__value_.__r.__words[0];
          v38 = v35->__r_.__value_.__s.__data_[8];
          v39 = v37 == 0x656E696665646E75 && v38 == 100;
          v40 = !v39;
          if (((v40 | v21) & 1) != 0)
          {
            v16 = 0;
            goto LABEL_116;
          }
LABEL_115:
          v54 = *v9;
          v16 = 1;
LABEL_116:
          v6 = v51;
          v17 = v55;
          if ((*((_BYTE *)&v63.__r_.__value_.__s + 23) & 0x80) == 0)
            goto LABEL_120;
          goto LABEL_119;
        }
        v16 = 0;
        v6 = v51;
        v17 = v55;
      }
LABEL_119:
      operator delete(v63.__r_.__value_.__l.__data_);
LABEL_120:
      if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v61.__r_.__value_.__l.__data_);
      goto LABEL_122;
    }
    if (*((_BYTE *)&v63.__r_.__value_.__s + 23))
      goto LABEL_12;
LABEL_15:
    v54 = *v9;
    v16 = 1;
    v17 = v55;
    if (!v55)
      goto LABEL_127;
LABEL_123:
    v47 = (unint64_t *)&v17->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
LABEL_127:
    if (v16 != 3 && v16)
      return v54;
    v7 += 2;
    if (v7 == v6)
      return 0;
  }
}

void sub_1BFC0DE40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,char a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  uint64_t v47;
  uint64_t v49;

  v49 = 0;
  while (1)
  {
    if (*(char *)(v47 + v49 + 95) < 0)
      operator delete(*(void **)(v47 + v49 + 72));
    v49 -= 24;
    if (v49 == -96)
    {
      _Unwind_Resume(a1);
    }
  }
}

void siri::dialogengine::CopyValidationEntries(uint64_t a1, uint64_t a2, const std::string *a3)
{
  uint64_t v6;
  uint64_t i;
  __int128 v8;
  std::string::size_type size;
  uint64_t v10;
  std::string::size_type v11;
  uint64_t **v12;
  __int128 v13;
  std::string::size_type v14;
  std::string v15;
  std::string v16;
  uint64_t v17;
  uint64_t v18;

  if (a1 && a2)
  {
    std::vector<siri::dialogengine::ValidationEntry>::vector<std::__tree_const_iterator<siri::dialogengine::ValidationEntry,std::__tree_node<siri::dialogengine::ValidationEntry,void *> *,long>,0>(&v17, *(_QWORD **)(a1 + 592), (_QWORD *)(a1 + 600));
    v6 = v17;
    for (i = v18; v6 != i; v6 += 88)
    {
      if (*(char *)(v6 + 39) < 0)
      {
        std::string::__init_copy_ctor_external(&v16, *(const std::string::value_type **)(v6 + 16), *(_QWORD *)(v6 + 24));
      }
      else
      {
        v8 = *(_OWORD *)(v6 + 16);
        v16.__r_.__value_.__r.__words[2] = *(_QWORD *)(v6 + 32);
        *(_OWORD *)&v16.__r_.__value_.__l.__data_ = v8;
      }
      if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
      {
        size = v16.__r_.__value_.__l.__size_;
        operator delete(v16.__r_.__value_.__l.__data_);
        if (!size)
LABEL_11:
          siri::dialogengine::LineNumberBase::SetFullPath(v6, a3);
      }
      else if (!*((_BYTE *)&v16.__r_.__value_.__s + 23))
      {
        goto LABEL_11;
      }
      std::__tree<siri::dialogengine::ValidationEntry>::__emplace_unique_key_args<siri::dialogengine::ValidationEntry,siri::dialogengine::ValidationEntry const&>((uint64_t **)(a2 + 592), v6, v6);
    }
    std::vector<siri::dialogengine::ValidationEntry>::vector<std::__tree_const_iterator<siri::dialogengine::ValidationEntry,std::__tree_node<siri::dialogengine::ValidationEntry,void *> *,long>,0>(&v16, *(_QWORD **)(a1 + 568), (_QWORD *)(a1 + 576));
    v11 = v16.__r_.__value_.__l.__size_;
    v10 = v16.__r_.__value_.__r.__words[0];
    if (v16.__r_.__value_.__r.__words[0] != v16.__r_.__value_.__l.__size_)
    {
      v12 = (uint64_t **)(a2 + 568);
      do
      {
        if (*(char *)(v10 + 39) < 0)
        {
          std::string::__init_copy_ctor_external(&v15, *(const std::string::value_type **)(v10 + 16), *(_QWORD *)(v10 + 24));
        }
        else
        {
          v13 = *(_OWORD *)(v10 + 16);
          v15.__r_.__value_.__r.__words[2] = *(_QWORD *)(v10 + 32);
          *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v13;
        }
        if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
        {
          v14 = v15.__r_.__value_.__l.__size_;
          operator delete(v15.__r_.__value_.__l.__data_);
          if (!v14)
LABEL_22:
            siri::dialogengine::LineNumberBase::SetFullPath(v10, a3);
        }
        else if (!*((_BYTE *)&v15.__r_.__value_.__s + 23))
        {
          goto LABEL_22;
        }
        std::__tree<siri::dialogengine::ValidationEntry>::__emplace_unique_key_args<siri::dialogengine::ValidationEntry,siri::dialogengine::ValidationEntry const&>(v12, v10, v10);
        v10 += 88;
      }
      while (v10 != v11);
    }
    v15.__r_.__value_.__r.__words[0] = (std::string::size_type)&v16;
    std::vector<siri::dialogengine::ValidationEntry>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
    v16.__r_.__value_.__r.__words[0] = (std::string::size_type)&v17;
    std::vector<siri::dialogengine::ValidationEntry>::__destroy_vector::operator()[abi:ne180100]((void ***)&v16);
  }
  else
  {
    siri::dialogengine::Log::Warn((siri::dialogengine::Log *)"Either fromContext or toContext has no File", (const char *)a2);
  }
}

void sub_1BFC0E14C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15, char a16)
{
  a13 = (void **)&a16;
  std::vector<siri::dialogengine::ValidationEntry>::__destroy_vector::operator()[abi:ne180100](&a13);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<siri::dialogengine::UpdatableDir>,siri::dialogengine::UpdatableDir const*,siri::dialogengine::UpdatableDir const*,siri::dialogengine::UpdatableDir*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      siri::dialogengine::UpdatableDir::UpdatableDir((std::string *)(a4 + v7), (const siri::dialogengine::UpdatableDir *)(a2 + v7));
      v7 += 96;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

__n128 siri::dialogengine::PatternFile::LoadFromPath@<Q0>(uint64_t *a1@<X0>, std::string *a2@<X1>, char a3@<W2>, __n128 *a4@<X8>)
{
  uint64_t *v6;
  __n128 result;
  __int128 v8;
  std::string::size_type i;
  std::string::size_type size;
  std::string::size_type v11;
  std::string *v12;
  __int128 v13;
  int v14;
  const std::string::value_type *v15;
  std::string::size_type v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  __int128 v22;
  int v23;
  const std::string::value_type *v24;
  std::string::size_type v25;
  std::string *v26;
  __int128 v27;
  std::string *v28;
  __int128 v29;
  std::string *p_str;
  std::string::size_type v31;
  std::string *v32;
  __int128 v33;
  uint64_t *v34;
  const char *v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  _OWORD *v39;
  unint64_t *v40;
  unint64_t v41;
  const char *v42;
  const char *v43;
  std::string::size_type v44;
  uint64_t v45;
  std::string::size_type v46;
  _BOOL4 v47;
  _QWORD *v48;
  const char *v49;
  _QWORD *v50;
  uint64_t v51;
  std::string *v52;
  std::string::size_type v53;
  uint64_t v54;
  std::string::size_type v55;
  int v56;
  std::string::size_type v57;
  const char *v58;
  std::string *v59;
  std::string *v60;
  __int128 v61;
  std::string::size_type v62;
  uint64_t v63;
  std::string *v64;
  std::string *v65;
  void *v66;
  std::string *v67;
  std::string *v68;
  BOOL v69;
  std::string::size_type v70;
  char v71;
  _QWORD *v72;
  uint64_t v73;
  __int128 v74;
  std::string *v75;
  std::string *v76;
  uint64_t *v77;
  uint64_t v78;
  std::string::size_type v79;
  const char *v80;
  const char *v81;
  std::string::size_type v82;
  char v83;
  std::string *v84;
  _QWORD *v85;
  std::string::size_type v86;
  uint64_t v87;
  const char *v88;
  std::string::size_type v89;
  std::string::size_type v90;
  unint64_t *v91;
  unint64_t v92;
  std::string *v93;
  BOOL v94;
  std::string *v95;
  uint64_t *v96;
  int v97;
  _QWORD *v98;
  std::string *v99;
  std::string *v100;
  std::string::size_type v101;
  char v102;
  std::string *v103;
  _QWORD *v104;
  std::string *v105;
  std::string *v106;
  uint64_t *v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  __int128 v111;
  std::string *v112;
  std::string *v113;
  std::string *v114;
  std::string *v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  unint64_t *p_shared_owners;
  unint64_t v120;
  __n128 v123;
  std::string v124;
  std::string v125;
  std::string v126;
  std::string v127;
  std::string __str;
  std::string v129;
  std::string v130;
  void *v131;
  char v132;
  std::string v133;
  uint64_t v134;

  v134 = *MEMORY[0x1E0C80C00];
  if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v6 = (uint64_t *)a2;
  else
    v6 = (uint64_t *)a2->__r_.__value_.__r.__words[0];
  siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"Attempting to load a pattern file from path '%s'", (const char *)a2, v6);
  if (siri::dialogengine::HasPatternExtension(a2, 0))
    siri::dialogengine::ParsePatternXmlFile(a2, (__int128 *)&v130);
  else
    siri::dialogengine::ParsePatternBinaryFile(a2, (uint64_t *)&v130);
  v8 = *(_OWORD *)&v130.__r_.__value_.__l.__data_;
  v123 = *(__n128 *)&v130.__r_.__value_.__l.__data_;
  if (v130.__r_.__value_.__r.__words[0])
  {
    std::string::basic_string[abi:ne180100]<0>(&v130, "printSupportingDialogInDisplayOnly");
    std::string::basic_string[abi:ne180100]<0>(&v131, "printSupportingDialogInDisplayModes");
    memset(&v129, 0, sizeof(v129));
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v129;
    __str.__r_.__value_.__s.__data_[8] = 0;
    v129.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
    v129.__r_.__value_.__l.__size_ = v129.__r_.__value_.__r.__words[0];
    v129.__r_.__value_.__r.__words[2] = v129.__r_.__value_.__r.__words[0] + 48;
    v129.__r_.__value_.__l.__size_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string> const*,std::pair<std::string,std::string> const*,std::pair<std::string,std::string>*>((uint64_t)&v129.__r_.__value_.__r.__words[2], (uint64_t)&v130, (uint64_t)&v133, (uint64_t)v129.__r_.__value_.__l.__data_);
    if (v132 < 0)
      operator delete(v131);
    if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v130.__r_.__value_.__l.__data_);
    std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)&v130, (const void ***)(v8 + 160));
    size = v129.__r_.__value_.__l.__size_;
    for (i = v129.__r_.__value_.__r.__words[0]; i != size; i += 48)
    {
      siri::dialogengine::PatternFile::GetSetting(v8, (const void **)i, &__str);
      v11 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v11 = __str.__r_.__value_.__l.__size_;
      if (v11)
      {
        if (&v130.__r_.__value_.__r.__words[1] == (std::string::size_type *)std::__tree<std::string>::find<std::string>((uint64_t)&v130, (const void **)(i + 24)))
        {
          std::operator+<char>();
          v21 = std::string::append(&v124, "' from the value of old pattern setting '");
          v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
          v125.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v125.__r_.__value_.__l.__data_ = v22;
          v21->__r_.__value_.__l.__size_ = 0;
          v21->__r_.__value_.__r.__words[2] = 0;
          v21->__r_.__value_.__r.__words[0] = 0;
          v23 = *(char *)(i + 23);
          if (v23 >= 0)
            v24 = (const std::string::value_type *)i;
          else
            v24 = *(const std::string::value_type **)i;
          if (v23 >= 0)
            v25 = *(unsigned __int8 *)(i + 23);
          else
            v25 = *(_QWORD *)(i + 8);
          v26 = std::string::append(&v125, v24, v25);
          v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
          v126.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v126.__r_.__value_.__l.__data_ = v27;
          v26->__r_.__value_.__l.__size_ = 0;
          v26->__r_.__value_.__r.__words[2] = 0;
          v26->__r_.__value_.__r.__words[0] = 0;
          v28 = std::string::append(&v126, "': ");
          v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
          v127.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v127.__r_.__value_.__l.__data_ = v29;
          v28->__r_.__value_.__l.__size_ = 0;
          v28->__r_.__value_.__r.__words[2] = 0;
          v28->__r_.__value_.__r.__words[0] = 0;
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            p_str = &__str;
          else
            p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v31 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
          else
            v31 = __str.__r_.__value_.__l.__size_;
          v32 = std::string::append(&v127, (const std::string::value_type *)p_str, v31);
          v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
          v133.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v133.__r_.__value_.__l.__data_ = v33;
          v32->__r_.__value_.__l.__size_ = 0;
          v32->__r_.__value_.__r.__words[2] = 0;
          v32->__r_.__value_.__r.__words[0] = 0;
          siri::dialogengine::Log::LogWithLevel((uint64_t)&v133, 0);
          if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v133.__r_.__value_.__l.__data_);
          if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v127.__r_.__value_.__l.__data_);
          if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v126.__r_.__value_.__l.__data_);
          if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v125.__r_.__value_.__l.__data_);
          if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v124.__r_.__value_.__l.__data_);
          v133.__r_.__value_.__r.__words[0] = i + 24;
          v34 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v8 + 160), (const void **)(i + 24), (__int128 **)&v133);
          std::string::operator=((std::string *)(v34 + 7), &__str);
        }
        else
        {
          std::operator+<char>();
          v12 = std::string::append(&v125, "' and the new pattern setting '");
          v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
          v126.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v126.__r_.__value_.__l.__data_ = v13;
          v12->__r_.__value_.__l.__size_ = 0;
          v12->__r_.__value_.__r.__words[2] = 0;
          v12->__r_.__value_.__r.__words[0] = 0;
          v14 = *(char *)(i + 47);
          if (v14 >= 0)
            v15 = (const std::string::value_type *)(i + 24);
          else
            v15 = *(const std::string::value_type **)(i + 24);
          if (v14 >= 0)
            v16 = *(unsigned __int8 *)(i + 47);
          else
            v16 = *(_QWORD *)(i + 32);
          v17 = std::string::append(&v126, v15, v16);
          v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
          v127.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v127.__r_.__value_.__l.__data_ = v18;
          v17->__r_.__value_.__l.__size_ = 0;
          v17->__r_.__value_.__r.__words[2] = 0;
          v17->__r_.__value_.__r.__words[0] = 0;
          v19 = std::string::append(&v127, "'; Ignoring the old one");
          v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
          v133.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v133.__r_.__value_.__l.__data_ = v20;
          v19->__r_.__value_.__l.__size_ = 0;
          v19->__r_.__value_.__r.__words[2] = 0;
          v19->__r_.__value_.__r.__words[0] = 0;
          siri::dialogengine::Log::LogWithLevel((uint64_t)&v133, 1u);
          if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v133.__r_.__value_.__l.__data_);
          if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v127.__r_.__value_.__l.__data_);
          if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v126.__r_.__value_.__l.__data_);
          if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v125.__r_.__value_.__l.__data_);
        }
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
    }
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((_QWORD *)v130.__r_.__value_.__l.__size_);
    v130.__r_.__value_.__r.__words[0] = (std::string::size_type)&v129;
    std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v130);
    if ((a3 & 1) != 0)
    {
      v36 = (std::__shared_weak_count *)v123.n128_u64[1];
      if (v123.n128_u64[1])
      {
        v37 = (unint64_t *)(v123.n128_u64[1] + 8);
        do
          v38 = __ldxr(v37);
        while (__stxr(v38 + 1, v37));
      }
      if (v123.n128_u64[0])
      {
        if (a1)
        {
          v39 = (_OWORD *)(v123.n128_u64[0] + 112);
          if (*(char *)(v123.n128_u64[0] + 135) < 0)
          {
            std::string::__init_copy_ctor_external(&v130, *(const std::string::value_type **)(v123.n128_u64[0] + 112), *(_QWORD *)(v123.n128_u64[0] + 120));
          }
          else
          {
            *(_OWORD *)&v130.__r_.__value_.__l.__data_ = *v39;
            v130.__r_.__value_.__r.__words[2] = *(_QWORD *)(v123.n128_u64[0] + 128);
          }
          siri::dialogengine::PatternRegistry::GetSchema(a1, (const std::string::value_type **)&v130.__r_.__value_.__l.__data_, (uint64_t *)&v125);
          if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v130.__r_.__value_.__l.__data_);
          if (v125.__r_.__value_.__r.__words[0])
          {
            siri::dialogengine::PatternSchema::GetSettings((siri::dialogengine::PatternSchema *)v125.__r_.__value_.__l.__data_, (uint64_t)&v129);
            v44 = v129.__r_.__value_.__r.__words[0];
            if ((std::string::size_type *)v129.__r_.__value_.__l.__data_ == &v129.__r_.__value_.__r.__words[1])
              goto LABEL_278;
            while (1)
            {
              v45 = *(_QWORD *)(v44 + 56);
              if (*(char *)(v45 + 231) < 0)
                std::string::__init_copy_ctor_external(&v130, *(const std::string::value_type **)(v45 + 208), *(_QWORD *)(v45 + 216));
              else
                v130 = *(std::string *)(v45 + 208);
              v46 = HIBYTE(v130.__r_.__value_.__r.__words[2]);
              if ((v130.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v46 = v130.__r_.__value_.__l.__size_;
              if (!v46)
                break;
              v47 = 0;
              if ((*((_BYTE *)&v130.__r_.__value_.__s + 23) & 0x80) != 0)
                goto LABEL_85;
LABEL_86:
              v48 = (_QWORD *)(v44 + 32);
              if (v47)
              {
                if (*(char *)(v44 + 55) < 0)
                  v48 = (_QWORD *)*v48;
                if (*(char *)(v123.n128_u64[0] + 87) < 0)
                  std::string::__init_copy_ctor_external(&v130, *(const std::string::value_type **)(v123.n128_u64[0] + 64), *(_QWORD *)(v123.n128_u64[0] + 72));
                else
                  v130 = *(std::string *)(v123.n128_u64[0] + 64);
                if ((v130.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v52 = &v130;
                else
                  v52 = (std::string *)v130.__r_.__value_.__r.__words[0];
                siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"Setting '%s' in pattern '%s' has no default value", v43, v48, v52);
                goto LABEL_148;
              }
              siri::dialogengine::PatternFile::GetSetting(v123.n128_i64[0], (const void **)(v44 + 32), &v130);
              if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0)
              {
                v53 = v130.__r_.__value_.__l.__size_;
                operator delete(v130.__r_.__value_.__l.__data_);
                if (v53)
                {
LABEL_93:
                  v50 = (_QWORD *)(v44 + 32);
                  if (*(char *)(v44 + 55) < 0)
                    v50 = (_QWORD *)*v48;
                  if (*(char *)(v123.n128_u64[0] + 87) < 0)
                    std::string::__init_copy_ctor_external(&v130, *(const std::string::value_type **)(v123.n128_u64[0] + 64), *(_QWORD *)(v123.n128_u64[0] + 72));
                  else
                    v130 = *(std::string *)(v123.n128_u64[0] + 64);
                  v56 = SHIBYTE(v130.__r_.__value_.__r.__words[2]);
                  v57 = v130.__r_.__value_.__r.__words[0];
                  siri::dialogengine::PatternFile::GetSetting(v123.n128_i64[0], (const void **)(v44 + 32), &__str);
                  if (v56 >= 0)
                    v59 = &v130;
                  else
                    v59 = (std::string *)v57;
                  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v60 = &__str;
                  else
                    v60 = (std::string *)__str.__r_.__value_.__r.__words[0];
                  siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Not applying default value for setting '%s' in pattern '%s' because it already has a value: %s", v58, v50, v59, v60);
                  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(__str.__r_.__value_.__l.__data_);
                  goto LABEL_148;
                }
              }
              else if (*((_BYTE *)&v130.__r_.__value_.__s + 23))
              {
                goto LABEL_93;
              }
              v54 = *(_QWORD *)(v44 + 56);
              if (!v54)
              {
                if (*(char *)(v44 + 55) < 0)
                  v48 = (_QWORD *)*v48;
                if (*(char *)(v125.__r_.__value_.__r.__words[0] + 23) < 0)
                {
                  std::string::__init_copy_ctor_external(&v130, *(const std::string::value_type **)v125.__r_.__value_.__l.__data_, *(_QWORD *)(v125.__r_.__value_.__r.__words[0] + 8));
                }
                else
                {
                  v61 = *(_OWORD *)v125.__r_.__value_.__l.__data_;
                  v130.__r_.__value_.__r.__words[2] = *(_QWORD *)(v125.__r_.__value_.__r.__words[0] + 16);
                  *(_OWORD *)&v130.__r_.__value_.__l.__data_ = v61;
                }
                if ((v130.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v65 = &v130;
                else
                  v65 = (std::string *)v130.__r_.__value_.__r.__words[0];
                siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Found null setting for key '%s' in pattern schema '%s' (This should never happen!)", v49, v48, v65);
LABEL_148:
                if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0)
                {
                  v66 = (void *)v130.__r_.__value_.__r.__words[0];
                  goto LABEL_150;
                }
                goto LABEL_151;
              }
              if (*(char *)(v54 + 151) < 0)
                std::string::__init_copy_ctor_external(&v130, *(const std::string::value_type **)(v54 + 128), *(_QWORD *)(v54 + 136));
              else
                v130 = *(std::string *)(v54 + 128);
              if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0)
              {
                v62 = v130.__r_.__value_.__l.__size_;
                operator delete(v130.__r_.__value_.__l.__data_);
                if (v62)
                {
LABEL_131:
                  if (*(char *)(v44 + 55) < 0)
                    v48 = (_QWORD *)*v48;
                  if (*(char *)(v123.n128_u64[0] + 87) < 0)
                    std::string::__init_copy_ctor_external(&v130, *(const std::string::value_type **)(v123.n128_u64[0] + 64), *(_QWORD *)(v123.n128_u64[0] + 72));
                  else
                    v130 = *(std::string *)(v123.n128_u64[0] + 64);
                  if ((v130.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v64 = &v130;
                  else
                    v64 = (std::string *)v130.__r_.__value_.__r.__words[0];
                  siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Not applying default value for setting '%s' in pattern '%s' because the setting is deprecated", v49, v48, v64);
                  goto LABEL_148;
                }
              }
              else if (*((_BYTE *)&v130.__r_.__value_.__s + 23))
              {
                goto LABEL_131;
              }
              v63 = *(_QWORD *)(v44 + 56);
              if (*(char *)(v63 + 231) < 0)
                std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)(v63 + 208), *(_QWORD *)(v63 + 216));
              else
                __str = *(std::string *)(v63 + 208);
              v70 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
              v71 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
              if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v70 = __str.__r_.__value_.__l.__size_;
              if (v70)
              {
                v72 = (_QWORD *)(v44 + 32);
                if (*(char *)(v44 + 55) < 0)
                  v72 = (_QWORD *)*v48;
                if (*(char *)(v123.n128_u64[0] + 87) < 0)
                {
                  std::string::__init_copy_ctor_external(&v130, *(const std::string::value_type **)(v123.n128_u64[0] + 64), *(_QWORD *)(v123.n128_u64[0] + 72));
                  v71 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
                }
                else
                {
                  v130 = *(std::string *)(v123.n128_u64[0] + 64);
                }
                if ((v130.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v75 = &v130;
                else
                  v75 = (std::string *)v130.__r_.__value_.__r.__words[0];
                if (v71 >= 0)
                  v76 = &__str;
                else
                  v76 = (std::string *)__str.__r_.__value_.__r.__words[0];
                siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Applying default value for setting '%s' to pattern '%s': %s", v49, v72, v75, v76);
                if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v130.__r_.__value_.__l.__data_);
                v130.__r_.__value_.__r.__words[0] = v44 + 32;
                v77 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v123.n128_u64[0] + 160), (const void **)(v44 + 32), (__int128 **)&v130);
                std::string::operator=((std::string *)(v77 + 7), &__str);
                goto LABEL_276;
              }
              v73 = *(_QWORD *)(v44 + 56);
              if (*(char *)(v73 + 31) < 0)
              {
                std::string::__init_copy_ctor_external(&v133, *(const std::string::value_type **)(v73 + 8), *(_QWORD *)(v73 + 16));
              }
              else
              {
                v74 = *(_OWORD *)(v73 + 8);
                v133.__r_.__value_.__r.__words[2] = *(_QWORD *)(v73 + 24);
                *(_OWORD *)&v133.__r_.__value_.__l.__data_ = v74;
              }
              std::unordered_set<std::string>::unordered_set((uint64_t)&v130, (unsigned __int8 *)&v133, 1);
              if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v133.__r_.__value_.__l.__data_);
              v78 = *(_QWORD *)(v44 + 56);
              if (*(char *)(v78 + 359) < 0)
                std::string::__init_copy_ctor_external(&v133, *(const std::string::value_type **)(v78 + 336), *(_QWORD *)(v78 + 344));
              else
                v133 = *(std::string *)(v78 + 336);
              while (1)
              {
                v79 = HIBYTE(v133.__r_.__value_.__r.__words[2]);
                if ((v133.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                  v79 = v133.__r_.__value_.__l.__size_;
                if (!v79)
                  break;
                if (std::__find_impl[abi:ne180100]<std::__hash_const_iterator<std::__hash_node<std::string,void *> *>,std::__hash_const_iterator<std::__hash_node<std::string,void *> *>,std::string,std::__identity>((uint64_t *)v130.__r_.__value_.__r.__words[2], (unsigned __int8 **)&v133))
                {
                  if (*(char *)(v44 + 55) < 0)
                    v48 = (_QWORD *)*v48;
                  if (*(char *)(v125.__r_.__value_.__r.__words[0] + 23) < 0)
                  {
                    std::string::__init_copy_ctor_external(&v127, *(const std::string::value_type **)v125.__r_.__value_.__l.__data_, *(_QWORD *)(v125.__r_.__value_.__r.__words[0] + 8));
                  }
                  else
                  {
                    v111 = *(_OWORD *)v125.__r_.__value_.__l.__data_;
                    v127.__r_.__value_.__r.__words[2] = *(_QWORD *)(v125.__r_.__value_.__r.__words[0] + 16);
                    *(_OWORD *)&v127.__r_.__value_.__l.__data_ = v111;
                  }
                  v112 = &v127;
                  if ((v127.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                    v112 = (std::string *)v127.__r_.__value_.__r.__words[0];
                  siri::dialogengine::Log::Error((siri::dialogengine::Log *)"The setting '%s' in pattern schema '%s' is part of a cycle of references between settings", v80, v48, v112);
                  if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v127.__r_.__value_.__l.__data_);
                  break;
                }
                std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)&v130, (unsigned __int8 *)&v133, (uint64_t)&v133);
                siri::dialogengine::PatternFile::GetSetting(v123.n128_i64[0], (const void **)&v133.__r_.__value_.__l.__data_, &v127);
                v82 = HIBYTE(v127.__r_.__value_.__r.__words[2]);
                v83 = HIBYTE(v127.__r_.__value_.__r.__words[2]);
                if ((v127.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                  v82 = v127.__r_.__value_.__l.__size_;
                if (!v82)
                {
                  v86 = v125.__r_.__value_.__r.__words[0];
                  v87 = std::__tree<std::string>::find<std::string>(v125.__r_.__value_.__r.__words[0] + 120, (const void **)&v133.__r_.__value_.__l.__data_);
                  if (v86 + 128 == v87)
                  {
                    *(_OWORD *)&v124.__r_.__value_.__l.__data_ = 0uLL;
                  }
                  else
                  {
                    v90 = *(_QWORD *)(v87 + 56);
                    v89 = *(_QWORD *)(v87 + 64);
                    v124.__r_.__value_.__r.__words[0] = v90;
                    v124.__r_.__value_.__l.__size_ = v89;
                    if (v89)
                    {
                      v91 = (unint64_t *)(v89 + 8);
                      do
                        v92 = __ldxr(v91);
                      while (__stxr(v92 + 1, v91));
                    }
                    if (v90)
                    {
                      if (*(char *)(v90 + 231) < 0)
                        std::string::__init_copy_ctor_external(&v126, *(const std::string::value_type **)(v90 + 208), *(_QWORD *)(v90 + 216));
                      else
                        v126 = *(std::string *)(v90 + 208);
                      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(__str.__r_.__value_.__l.__data_);
                      __str = v126;
                      v101 = HIBYTE(v126.__r_.__value_.__r.__words[2]);
                      v102 = HIBYTE(v126.__r_.__value_.__r.__words[2]);
                      if ((v126.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                        v101 = v126.__r_.__value_.__l.__size_;
                      if (v101)
                      {
                        if ((v133.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                          v103 = &v133;
                        else
                          v103 = (std::string *)v133.__r_.__value_.__r.__words[0];
                        v104 = (_QWORD *)(v44 + 32);
                        if (*(char *)(v44 + 55) < 0)
                          v104 = (_QWORD *)*v48;
                        if (*(char *)(v123.n128_u64[0] + 87) < 0)
                        {
                          std::string::__init_copy_ctor_external(&v126, *(const std::string::value_type **)(v123.n128_u64[0] + 64), *(_QWORD *)(v123.n128_u64[0] + 72));
                          v102 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
                        }
                        else
                        {
                          v126 = *(std::string *)(v123.n128_u64[0] + 64);
                        }
                        v105 = &v126;
                        if ((v126.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                          v105 = (std::string *)v126.__r_.__value_.__r.__words[0];
                        if (v102 >= 0)
                          v106 = &__str;
                        else
                          v106 = (std::string *)__str.__r_.__value_.__r.__words[0];
                        siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Applying default value for setting '%s' to setting '%s' in pattern '%s': %s", v88, v103, v104, v105, v106);
                        if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) < 0)
                          operator delete(v126.__r_.__value_.__l.__data_);
                        v126.__r_.__value_.__r.__words[0] = v44 + 32;
                        v107 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v123.n128_u64[0] + 160), (const void **)(v44 + 32), (__int128 **)&v126);
                        std::string::operator=((std::string *)(v107 + 7), &__str);
                        goto LABEL_254;
                      }
                      if (*(char *)(v90 + 359) < 0)
                        std::string::__init_copy_ctor_external(&v126, *(const std::string::value_type **)(v90 + 336), *(_QWORD *)(v90 + 344));
                      else
                        v126 = *(std::string *)(v90 + 336);
                      if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(v133.__r_.__value_.__l.__data_);
                      v97 = 0;
                      v133 = v126;
LABEL_255:
                      v108 = (std::__shared_weak_count *)v124.__r_.__value_.__l.__size_;
                      if (v124.__r_.__value_.__l.__size_)
                      {
                        v109 = (unint64_t *)(v124.__r_.__value_.__l.__size_ + 8);
                        do
                          v110 = __ldaxr(v109);
                        while (__stlxr(v110 - 1, v109));
                        if (!v110)
                        {
                          ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
                          std::__shared_weak_count::__release_weak(v108);
                        }
                      }
                      goto LABEL_213;
                    }
                  }
                  v98 = (_QWORD *)(v44 + 32);
                  if (*(char *)(v44 + 55) < 0)
                    v98 = (_QWORD *)*v48;
                  if (*(char *)(v123.n128_u64[0] + 87) < 0)
                    std::string::__init_copy_ctor_external(&v126, *(const std::string::value_type **)(v123.n128_u64[0] + 64), *(_QWORD *)(v123.n128_u64[0] + 72));
                  else
                    v126 = *(std::string *)(v123.n128_u64[0] + 64);
                  v99 = &v126;
                  if ((v126.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                    v99 = (std::string *)v126.__r_.__value_.__r.__words[0];
                  v100 = &v133;
                  if ((v133.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                    v100 = (std::string *)v133.__r_.__value_.__r.__words[0];
                  siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Not applying default value for setting '%s' in pattern '%s' because the reference setting '%s' does not exist", v88, v98, v99, v100);
                  if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v126.__r_.__value_.__l.__data_);
LABEL_254:
                  v97 = 5;
                  goto LABEL_255;
                }
                if ((v133.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v84 = &v133;
                else
                  v84 = (std::string *)v133.__r_.__value_.__r.__words[0];
                v85 = (_QWORD *)(v44 + 32);
                if (*(char *)(v44 + 55) < 0)
                  v85 = (_QWORD *)*v48;
                if (*(char *)(v123.n128_u64[0] + 87) < 0)
                {
                  std::string::__init_copy_ctor_external(&v126, *(const std::string::value_type **)(v123.n128_u64[0] + 64), *(_QWORD *)(v123.n128_u64[0] + 72));
                  v83 = HIBYTE(v127.__r_.__value_.__r.__words[2]);
                }
                else
                {
                  v126 = *(std::string *)(v123.n128_u64[0] + 64);
                }
                v93 = &v126;
                if ((v126.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                  v93 = (std::string *)v126.__r_.__value_.__r.__words[0];
                v94 = v83 < 0;
                v95 = &v127;
                if (v94)
                  v95 = (std::string *)v127.__r_.__value_.__r.__words[0];
                siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Applying the value of pattern setting '%s' to setting '%s' in pattern '%s': %s", v81, v84, v85, v93, v95);
                if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v126.__r_.__value_.__l.__data_);
                v126.__r_.__value_.__r.__words[0] = v44 + 32;
                v96 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v123.n128_u64[0] + 160), (const void **)(v44 + 32), (__int128 **)&v126);
                std::string::operator=((std::string *)(v96 + 7), &v127);
                v97 = 5;
LABEL_213:
                if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0)
                {
                  operator delete(v127.__r_.__value_.__l.__data_);
                  if (v97)
                    break;
                }
                else if (v97)
                {
                  break;
                }
              }
              if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v133.__r_.__value_.__l.__data_);
              std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v130);
LABEL_276:
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
              {
                v66 = (void *)__str.__r_.__value_.__r.__words[0];
LABEL_150:
                operator delete(v66);
              }
LABEL_151:
              v67 = *(std::string **)(v44 + 8);
              if (v67)
              {
                do
                {
                  v68 = v67;
                  v67 = (std::string *)v67->__r_.__value_.__r.__words[0];
                }
                while (v67);
              }
              else
              {
                do
                {
                  v68 = *(std::string **)(v44 + 16);
                  v69 = v68->__r_.__value_.__r.__words[0] == v44;
                  v44 = (std::string::size_type)v68;
                }
                while (!v69);
              }
              v44 = (std::string::size_type)v68;
              if (v68 == (std::string *)&v129.__r_.__value_.__r.__words[1])
              {
LABEL_278:
                std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy((_QWORD *)v129.__r_.__value_.__l.__size_);
                goto LABEL_299;
              }
            }
            v51 = *(_QWORD *)(v44 + 56);
            if (*(char *)(v51 + 359) < 0)
              std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)(v51 + 336), *(_QWORD *)(v51 + 344));
            else
              __str = *(std::string *)(v51 + 336);
            v55 = __str.__r_.__value_.__l.__size_;
            if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v55 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
            v47 = v55 == 0;
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__str.__r_.__value_.__l.__data_);
            if ((*((_BYTE *)&v130.__r_.__value_.__s + 23) & 0x80) == 0)
              goto LABEL_86;
LABEL_85:
            operator delete(v130.__r_.__value_.__l.__data_);
            goto LABEL_86;
          }
          if (*(char *)(v123.n128_u64[0] + 135) < 0)
          {
            std::string::__init_copy_ctor_external(&v130, *(const std::string::value_type **)(v123.n128_u64[0] + 112), *(_QWORD *)(v123.n128_u64[0] + 120));
          }
          else
          {
            *(_OWORD *)&v130.__r_.__value_.__l.__data_ = *v39;
            v130.__r_.__value_.__r.__words[2] = *(_QWORD *)(v123.n128_u64[0] + 128);
          }
          if ((v130.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v114 = &v130;
          else
            v114 = (std::string *)v130.__r_.__value_.__r.__words[0];
          if (*(char *)(v123.n128_u64[0] + 87) < 0)
            std::string::__init_copy_ctor_external(&v129, *(const std::string::value_type **)(v123.n128_u64[0] + 64), *(_QWORD *)(v123.n128_u64[0] + 72));
          else
            v129 = *(std::string *)(v123.n128_u64[0] + 64);
          v115 = &v129;
          if ((v129.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v115 = (std::string *)v129.__r_.__value_.__r.__words[0];
          siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Failed to load schema '%s' for pattern '%s'", v42, v114, v115);
          if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v129.__r_.__value_.__l.__data_);
          if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v130.__r_.__value_.__l.__data_);
LABEL_299:
          v116 = (std::__shared_weak_count *)v125.__r_.__value_.__l.__size_;
          if (v125.__r_.__value_.__l.__size_)
          {
            v117 = (unint64_t *)(v125.__r_.__value_.__l.__size_ + 8);
            do
              v118 = __ldaxr(v117);
            while (__stlxr(v118 - 1, v117));
            if (!v118)
            {
              ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
              std::__shared_weak_count::__release_weak(v116);
            }
          }
          v36 = (std::__shared_weak_count *)v123.n128_u64[1];
        }
        else
        {
          if (*(char *)(v123.n128_u64[0] + 87) < 0)
            std::string::__init_copy_ctor_external(&v130, *(const std::string::value_type **)(v123.n128_u64[0] + 64), *(_QWORD *)(v123.n128_u64[0] + 72));
          else
            v130 = *(std::string *)(v123.n128_u64[0] + 64);
          v113 = &v130;
          if ((v130.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v113 = (std::string *)v130.__r_.__value_.__r.__words[0];
          siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Can't apply setting defaults to pattern '%s' because the given context is null", v35, v113);
          if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v130.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Can't apply setting defaults to a null pattern", v35);
      }
      if (v36)
      {
        p_shared_owners = (unint64_t *)&v36->__shared_owners_;
        do
          v120 = __ldaxr(p_shared_owners);
        while (__stlxr(v120 - 1, p_shared_owners));
        if (!v120)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
    }
    result = v123;
    *a4 = v123;
  }
  else
  {
    a4->n128_u64[0] = 0;
    a4->n128_u64[1] = 0;
    if (*((_QWORD *)&v8 + 1))
    {
      v40 = (unint64_t *)(*((_QWORD *)&v8 + 1) + 8);
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 - 1, v40));
      if (!v41)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v8 + 1) + 16))(*((_QWORD *)&v8 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v8 + 1));
      }
    }
  }
  return result;
}

void sub_1BFC0F1FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *__p,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  uint64_t v54;

  if (*(char *)(v54 - 105) < 0)
    operator delete(*(void **)(v54 - 128));
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v54 - 176);
  if (a54 < 0)
    operator delete(__p);
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(*(_QWORD **)(v54 - 200));
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a28);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void siri::dialogengine::PatternFile::LoadFromId(uint64_t *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, __n128 *a4@<X8>)
{
  int v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  std::string *v12;
  std::string::size_type size;
  std::string *v14;
  __int128 v15;
  std::string v16;
  std::string __p[20];
  __int128 v18;
  std::string::size_type v19;
  __int128 v20;
  std::string::size_type v21;

  v20 = 0uLL;
  v21 = 0;
  if (a1)
  {
    siri::dialogengine::RequestInfo::RequestInfo((siri::dialogengine::RequestInfo *)__p, (const siri::dialogengine::RequestInfo *)(a1 + 1));
    v18 = 0uLL;
    v19 = 0;
    std::vector<siri::dialogengine::UpdatableDir>::__init_with_size[abi:ne180100]<siri::dialogengine::UpdatableDir*,siri::dialogengine::UpdatableDir*>(&v18, __p[0].__r_.__value_.__l.__size_, __p[0].__r_.__value_.__r.__words[2], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(__p[0].__r_.__value_.__r.__words[2] - __p[0].__r_.__value_.__l.__size_) >> 5));
    std::vector<siri::dialogengine::UpdatableDir>::__vdeallocate((void **)&v20);
    v20 = v18;
    v21 = v19;
    v19 = 0;
    v18 = 0uLL;
    v16.__r_.__value_.__r.__words[0] = (std::string::size_type)&v18;
    std::vector<siri::dialogengine::UpdatableDir>::__destroy_vector::operator()[abi:ne180100]((void ***)&v16);
    siri::dialogengine::RequestInfo::~RequestInfo((void **)&__p[0].__r_.__value_.__l.__data_);
  }
  v8 = *(char *)(a2 + 23);
  v9 = *(_QWORD *)a2;
  siri::dialogengine::GetBaseDir((__int128 **)&v20, __p);
  if (v8 >= 0)
    v11 = a2;
  else
    v11 = v9;
  if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v12 = __p;
  else
    v12 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
  siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"Attempting to load a pattern file from Id '%s' and template dir '%s'", v10, v11, v12);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  siri::dialogengine::FindPatternFile((__int128 **)&v20, a2, (uint64_t)__p);
  size = HIBYTE(__p[0].__r_.__value_.__r.__words[2]);
  if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __p[0].__r_.__value_.__l.__size_;
  if (size)
  {
    siri::dialogengine::PatternFile::LoadFromPath(a1, __p, a3, a4);
  }
  else
  {
    std::operator+<char>();
    v14 = std::string::append(&v16, "'");
    v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v19 = v14->__r_.__value_.__r.__words[2];
    v18 = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Log::LogWithLevel((uint64_t)&v18, 3u);
    if (SHIBYTE(v19) < 0)
      operator delete((void *)v18);
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v16.__r_.__value_.__l.__data_);
    a4->n128_u64[0] = 0;
    a4->n128_u64[1] = 0;
  }
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v20;
  std::vector<siri::dialogengine::UpdatableDir>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
}

void sub_1BFC0F724(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;

  if (*(char *)(v23 - 121) < 0)
    operator delete(*(void **)(v23 - 144));
  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  a18 = (void *)(v23 - 112);
  std::vector<siri::dialogengine::UpdatableDir>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::PatternFile::Save(uint64_t *a1, uint64_t a2, uint64_t a3, int a4)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  uint64_t v14[2];
  uint64_t v15[2];

  if (a4)
  {
    v4 = (std::__shared_weak_count *)a1[1];
    v14[0] = *a1;
    v14[1] = (uint64_t)v4;
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
    }
    v7 = siri::dialogengine::WritePatternBinaryFile(v14, a2, a3);
    if (v4)
    {
      v8 = (unint64_t *)&v4->__shared_owners_;
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      goto LABEL_15;
    }
  }
  else
  {
    v4 = (std::__shared_weak_count *)a1[1];
    v15[0] = *a1;
    v15[1] = (uint64_t)v4;
    if (v4)
    {
      v10 = (unint64_t *)&v4->__shared_owners_;
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
    v7 = siri::dialogengine::WritePatternXmlFile(v15, a2, a3);
    if (v4)
    {
      v12 = (unint64_t *)&v4->__shared_owners_;
      do
        v9 = __ldaxr(v12);
      while (__stlxr(v9 - 1, v12));
LABEL_15:
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  return v7;
}

void sub_1BFC0F87C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::PatternFile::Save(uint64_t *a1, std::string *a2)
{
  int HasPatternExtension;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  uint64_t v16[2];
  uint64_t v17[2];

  HasPatternExtension = siri::dialogengine::HasPatternExtension(a2, 0);
  v5 = *a1;
  if (HasPatternExtension)
  {
    v6 = (std::__shared_weak_count *)a1[1];
    v17[0] = v5;
    v17[1] = (uint64_t)v6;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
    v9 = siri::dialogengine::WritePatternXmlFile(v17, a2);
    if (v6)
    {
      v10 = (unint64_t *)&v6->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      goto LABEL_15;
    }
  }
  else
  {
    v6 = (std::__shared_weak_count *)a1[1];
    v16[0] = v5;
    v16[1] = (uint64_t)v6;
    if (v6)
    {
      v12 = (unint64_t *)&v6->__shared_owners_;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
    v9 = siri::dialogengine::WritePatternBinaryFile(v16, a2);
    if (v6)
    {
      v14 = (unint64_t *)&v6->__shared_owners_;
      do
        v11 = __ldaxr(v14);
      while (__stlxr(v11 - 1, v14));
LABEL_15:
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  return v9;
}

void sub_1BFC0F98C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

std::string *siri::dialogengine::DialogWeight::toString(siri::dialogengine::DialogWeight *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  return siri::dialogengine::FormatWeight(this, (uint64_t)a2, 0);
}

std::string *siri::dialogengine::FormatWeight(_QWORD *a1, uint64_t a2, unsigned int a3)
{
  void *RequiredNumberParameter;
  void *v7;
  long double v8;
  char *OptionalStringParameter;
  char *v10;
  std::string *v11;
  void *v12;
  const char *v13;
  unsigned int v14;
  unsigned int data;
  siri::dialogengine *v16;
  double v17;
  double v18;
  unsigned int v19;
  char *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  void *size;
  int v26;
  std::string::size_type v27;
  std::string *p_p;
  std::string *v29;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  const void **v41[3];
  void *v42[2];
  char v43;
  std::string v44;
  char v45;
  double v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  void *v50[2];
  void *v51[2];
  __int128 v52;
  void *v53[2];
  void *v54[2];
  __int128 v55;
  std::string v56;
  std::string __p;
  std::string v58;
  void *v59;
  void *v60[2];
  uint64_t v61;
  char v62;
  std::string v63;
  std::string v64;
  std::string v65;
  __int128 v66;
  uint64_t v67[3];
  __int128 v68;
  uint64_t v69[3];
  __int128 v70;
  uint64_t v71[3];
  __int128 v72;
  uint64_t v73[3];
  __int128 v74;
  uint64_t v75[3];
  __int128 v76;
  uint64_t v77;

  v77 = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(&__p, "value");
  RequiredNumberParameter = siri::dialogengine::GetRequiredNumberParameter((const void **)&__p.__r_.__value_.__l.__data_, a2);
  v7 = RequiredNumberParameter;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v7)
    {
LABEL_3:
      v8 = *((double *)v7 + 9);
      std::string::basic_string[abi:ne180100]<0>(&__p, "units");
      OptionalStringParameter = (char *)siri::dialogengine::GetOptionalStringParameter((const void **)&__p.__r_.__value_.__l.__data_, a2);
      v10 = OptionalStringParameter;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if (v10)
        {
LABEL_5:
          if (v10[95] < 0)
            std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)v10 + 9), *((_QWORD *)v10 + 10));
          else
            __p = *(std::string *)(v10 + 3);
LABEL_15:
          v14 = siri::dialogengine::ParseUnitLabel<siri::dialogengine::Weight>((uint64_t)&__p);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          v55 = 0u;
          memset(&v56, 0, sizeof(v56));
          *(_OWORD *)v53 = 0u;
          *(_OWORD *)v54 = 0u;
          *(_OWORD *)v51 = 0u;
          v52 = 0u;
          v49 = 0u;
          *(_OWORD *)v50 = 0u;
          v47 = 0u;
          v48 = 0u;
          if (v14 == -1)
          {
            if (v10)
            {
              if (*(char *)(a2 + 31) < 0)
                std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
              else
                __p = *(std::string *)(a2 + 8);
              v26 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
              v27 = __p.__r_.__value_.__r.__words[0];
              if (v10[95] < 0)
                std::string::__init_copy_ctor_external(&v44, *((const std::string::value_type **)v10 + 9), *((_QWORD *)v10 + 10));
              else
                v44 = *(std::string *)(v10 + 3);
              p_p = &__p;
              if (v26 < 0)
                p_p = (std::string *)v27;
              v29 = &v44;
              if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v29 = (std::string *)v44.__r_.__value_.__r.__words[0];
              siri::dialogengine::Log::Warn((siri::dialogengine::Log *)"Unrecognized 'units' input for variable '%s' of type 'dialog.Weight': %s", v13, p_p, v29);
              if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v44.__r_.__value_.__l.__data_);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p.__r_.__value_.__l.__data_);
            }
            std::to_string(&__p, v8);
            siri::dialogengine::SpeakableString::SetString((uint64_t)&v47, (uint64_t)&__p);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            {
              size = (void *)__p.__r_.__value_.__r.__words[0];
              goto LABEL_74;
            }
          }
          else
          {
            siri::dialogengine::GetConvertedUnitInfo<siri::dialogengine::Weight>(v8, (uint64_t)a1, a2, (uint64_t)&v44);
            if (LODWORD(v44.__r_.__value_.__l.__data_) == -2)
            {
              data = v14;
            }
            else
            {
              v8 = v46;
              data = v44.__r_.__value_.__l.__data_;
            }
            if (v8 == 0.0)
              v16 = 0;
            else
              v16 = (siri::dialogengine *)(fmod(v8, 1000000.0) == 0.0);
            v17 = round(v8);
            v18 = fmod(v8, 1.0);
            if (fabs(v17) >= 1000.0)
              v19 = a3;
            else
              v19 = a3 & 0xFFFFFFF3;
            if (data > 0xA)
              v20 = "unit#unknownWeightValue";
            else
              v20 = off_1E7937AA8[data];
            std::string::basic_string[abi:ne180100]<0>(v42, v20);
            siri::dialogengine::CreateJSONBoolVal((siri::dialogengine *)(v19 & 1), (uint64_t *)&v40);
            std::string::basic_string[abi:ne180100]<0>(&__p, "abbreviated");
            *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v40;
            v40 = 0uLL;
            siri::dialogengine::CreateJSONBoolVal((siri::dialogengine *)((v19 >> 1) & 1), (uint64_t *)&v39);
            std::string::basic_string[abi:ne180100]<0>(&v58.__r_.__value_.__r.__words[2], "approximate");
            *(_OWORD *)v60 = v39;
            v39 = 0uLL;
            siri::dialogengine::CreateJSONBoolVal((siri::dialogengine *)((v19 >> 2) & 1), (uint64_t *)&v38);
            std::string::basic_string[abi:ne180100]<0>(&v61, "compactDecimalLong");
            *(_OWORD *)&v63.__r_.__value_.__r.__words[1] = v38;
            v38 = 0uLL;
            siri::dialogengine::CreateJSONBoolVal((siri::dialogengine *)((v19 >> 3) & 1), (uint64_t *)&v37);
            std::string::basic_string[abi:ne180100]<0>(&v64, "compactDecimalShort");
            *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v37;
            v37 = 0uLL;
            siri::dialogengine::CreateJSONBoolVal(v16, (uint64_t *)&v36);
            std::string::basic_string[abi:ne180100]<0>(&v65.__r_.__value_.__r.__words[2], "numberIsMultipleOfMillion");
            v66 = v36;
            v36 = 0uLL;
            siri::dialogengine::CreateJSONDoubleVal(v8, (uint64_t *)&v35);
            std::string::basic_string[abi:ne180100]<0>(v67, "number");
            v68 = v35;
            v35 = 0uLL;
            siri::dialogengine::CreateJSONDoubleVal(v17, (uint64_t *)&v34);
            std::string::basic_string[abi:ne180100]<0>(v69, "numberRounded");
            v70 = v34;
            v34 = 0uLL;
            siri::dialogengine::CreateJSONBoolVal((siri::dialogengine *)1, (uint64_t *)&v33);
            std::string::basic_string[abi:ne180100]<0>(v71, "primaryContent");
            v72 = v33;
            v33 = 0uLL;
            siri::dialogengine::CreateJSONDoubleVal(v18 * 100.0, (uint64_t *)&v32);
            std::string::basic_string[abi:ne180100]<0>(v73, "remainders");
            v74 = v32;
            v32 = 0uLL;
            siri::dialogengine::CreateJSONDoubleVal(v8 - v18, (uint64_t *)&v31);
            std::string::basic_string[abi:ne180100]<0>(v75, "wholeUnits");
            v76 = v31;
            v31 = 0uLL;
            std::map<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>::map[abi:ne180100]((uint64_t)v41, (const void **)&__p.__r_.__value_.__l.__data_, 10);
            v21 = 50;
            do
            {
              std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&v56.__r_.__value_.__r.__words[v21 + 2]);
              if (SHIBYTE(v56.__r_.__value_.__r.__words[v21 + 1]) < 0)
                operator delete(*(void **)((char *)&v55 + v21 * 8 + 8));
              v21 -= 5;
            }
            while (v21 * 8);
            v22 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
            if (*((_QWORD *)&v40 + 1))
            {
              v23 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
              do
                v24 = __ldaxr(v23);
              while (__stlxr(v24 - 1, v23));
              if (!v24)
              {
                ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
                std::__shared_weak_count::__release_weak(v22);
              }
            }
            siri::dialogengine::ExecuteSharedCat(a1, (uint64_t)v42, v41, (uint64_t)&__p);
            std::string::operator=((std::string *)&v47, &__p);
            std::string::operator=((std::string *)((char *)&v48 + 8), &v58);
            std::string::operator=((std::string *)v50, (const std::string *)&v59);
            std::string::operator=((std::string *)&v51[1], (const std::string *)&v60[1]);
            std::string::operator=((std::string *)v53, &v63);
            std::string::operator=((std::string *)&v54[1], &v64);
            std::string::operator=(&v56, &v65);
            if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v65.__r_.__value_.__l.__data_);
            if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v64.__r_.__value_.__l.__data_);
            if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v63.__r_.__value_.__l.__data_);
            if (v62 < 0)
              operator delete(v60[1]);
            if (SHIBYTE(v60[0]) < 0)
              operator delete(v59);
            if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v58.__r_.__value_.__l.__data_);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(v41[1]);
            if (v43 < 0)
              operator delete(v42[0]);
            if (v45 < 0)
            {
              size = (void *)v44.__r_.__value_.__l.__size_;
LABEL_74:
              operator delete(size);
            }
          }
          v11 = (std::string *)operator new();
          std::string::basic_string[abi:ne180100]<0>(&__p, "");
          siri::dialogengine::VariableString::VariableString(v11, &__p, (const siri::dialogengine::SpeakableString *)&v47);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v56.__r_.__value_.__l.__data_);
          if (SHIBYTE(v55) < 0)
            operator delete(v54[1]);
          if (SHIBYTE(v54[0]) < 0)
            operator delete(v53[0]);
          if (SHIBYTE(v52) < 0)
            operator delete(v51[1]);
          if (SHIBYTE(v51[0]) < 0)
            operator delete(v50[0]);
          if (SHIBYTE(v49) < 0)
            operator delete(*((void **)&v48 + 1));
          if (SBYTE7(v48) < 0)
          {
            v12 = (void *)v47;
            goto LABEL_91;
          }
          return v11;
        }
      }
      else if (OptionalStringParameter)
      {
        goto LABEL_5;
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, "");
      goto LABEL_15;
    }
  }
  else if (RequiredNumberParameter)
  {
    goto LABEL_3;
  }
  v11 = (std::string *)operator new();
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::basic_string[abi:ne180100]<0>(&v47, "");
  siri::dialogengine::VariableString::VariableString((uint64_t)v11, &__p, (uint64_t)&v47);
  if (SBYTE7(v48) < 0)
    operator delete((void *)v47);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    v12 = (void *)__p.__r_.__value_.__r.__words[0];
LABEL_91:
    operator delete(v12);
  }
  return v11;
}

void sub_1BFC10148(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *__p;
  char a70;

  if (a70 < 0)
    operator delete(__p);
  siri::dialogengine::SpeakableString::~SpeakableString(&a43);
  _Unwind_Resume(a1);
}

std::string *siri::dialogengine::DialogWeight::abbreviated(siri::dialogengine::DialogWeight *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  return siri::dialogengine::FormatWeight(this, (uint64_t)a2, 1u);
}

std::string *siri::dialogengine::DialogWeight::approximate(siri::dialogengine::DialogWeight *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  return siri::dialogengine::FormatWeight(this, (uint64_t)a2, 2u);
}

std::string *siri::dialogengine::DialogWeight::compactDecimalLong(siri::dialogengine::DialogWeight *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  return siri::dialogengine::FormatWeight(this, (uint64_t)a2, 4u);
}

std::string *siri::dialogengine::DialogWeight::compactDecimalShort(siri::dialogengine::DialogWeight *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  return siri::dialogengine::FormatWeight(this, (uint64_t)a2, 8u);
}

uint64_t siri::dialogengine::DialogWeight::units(siri::dialogengine::DialogWeight *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  uint64_t v3;
  std::string __p;
  _BYTE v6[8];
  void *v7;
  char v8;

  siri::dialogengine::GetConvertedUnitInfo<siri::dialogengine::Weight>(0.0, (uint64_t)this, (uint64_t)a2, (uint64_t)v6);
  v3 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  siri::dialogengine::VariableString::VariableString(v3, &__p, (uint64_t)&v7);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v8 < 0)
    operator delete(v7);
  return v3;
}

void sub_1BFC10490(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (a14 < 0)
    operator delete(__p);
  MEMORY[0x1C3B8D890](v21, 0x10B3C40D3060B95);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::DialogWeight::value(siri::dialogengine::DialogWeight *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  double *RequiredNumberParameter;
  double *v6;
  uint64_t v7;
  void *size;
  std::string __p;
  std::string v11;
  char v12;
  double v13;

  std::string::basic_string[abi:ne180100]<0>(&v11, "value");
  RequiredNumberParameter = (double *)siri::dialogengine::GetRequiredNumberParameter((const void **)&v11.__r_.__value_.__l.__data_, (uint64_t)a2);
  v6 = RequiredNumberParameter;
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v11.__r_.__value_.__l.__data_);
    if (v6)
    {
LABEL_3:
      siri::dialogengine::GetConvertedUnitInfo<siri::dialogengine::Weight>(round(v6[9]), (uint64_t)this, (uint64_t)a2, (uint64_t)&v11);
      v7 = operator new();
      std::string::basic_string[abi:ne180100]<0>(&__p, "");
      siri::dialogengine::VariableNumber::VariableNumber(v7, &__p, v13);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (v12 < 0)
      {
        size = (void *)v11.__r_.__value_.__l.__size_;
LABEL_10:
        operator delete(size);
        return v7;
      }
      return v7;
    }
  }
  else if (RequiredNumberParameter)
  {
    goto LABEL_3;
  }
  v7 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&v11, "");
  siri::dialogengine::VariableNumber::VariableNumber(v7, &v11, 0.0);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
  {
    size = (void *)v11.__r_.__value_.__r.__words[0];
    goto LABEL_10;
  }
  return v7;
}

void sub_1BFC10610(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, void *a16, int a17, __int16 a18, char a19, char a20,int a21,__int16 a22,char a23,char a24)
{
  uint64_t v24;

  if (a20 < 0)
    operator delete(__p);
  MEMORY[0x1C3B8D890](v24, 0x10B3C4030AE2ACELL);
  _Unwind_Resume(a1);
}

void siri::dialogengine::GetArrayElementType(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  BOOL v4;
  uint64_t v5;
  void *__p[2];
  char v7;

  std::string::basic_string[abi:ne180100]<0>(__p, "[]");
  v4 = siri::dialogengine::StringEndsWith((std::string *)a1, (unsigned __int8 *)__p);
  if (v7 < 0)
    operator delete(__p[0]);
  v5 = *(unsigned __int8 *)(a1 + 23);
  if (v4)
  {
    if ((v5 & 0x80u) != 0)
      v5 = *(_QWORD *)(a1 + 8);
    std::string::basic_string(a2, (const std::string *)a1, 0, v5 - 2, (std::allocator<char> *)__p);
  }
  else if ((v5 & 0x80) != 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 16);
  }
}

void sub_1BFC10768(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::SetArrayElementType(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _BOOL4 v4;
  _BOOL4 v5;
  size_t v6;
  const void *v7;
  void *__p[2];
  char v9;

  std::string::basic_string[abi:ne180100]<0>(__p, "[]");
  v4 = siri::dialogengine::StringEndsWith((std::string *)a1, (unsigned __int8 *)__p);
  v5 = v4;
  if (v9 < 0)
  {
    operator delete(__p[0]);
    if (v5)
    {
LABEL_3:
      if (*(char *)(a1 + 23) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)a2, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
      }
      else
      {
        *(_OWORD *)a2 = *(_OWORD *)a1;
        *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 16);
      }
      return;
    }
  }
  else if (v4)
  {
    goto LABEL_3;
  }
  if (*(char *)(a1 + 23) >= 0)
    v6 = *(unsigned __int8 *)(a1 + 23);
  else
    v6 = *(_QWORD *)(a1 + 8);
  std::string::basic_string[abi:ne180100](a2, v6 + 2);
  if (*(char *)(a2 + 23) < 0)
    a2 = *(_QWORD *)a2;
  if (v6)
  {
    if (*(char *)(a1 + 23) >= 0)
      v7 = (const void *)a1;
    else
      v7 = *(const void **)a1;
    memmove((void *)a2, v7, v6);
  }
  strcpy((char *)(a2 + v6), "[]");
}

void sub_1BFC1087C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::GetLiteralType(std::string *a1@<X0>, _QWORD *a2@<X8>)
{
  BOOL v4;
  char **v5;
  std::string *v6;
  int v7;
  int v8;
  _BOOL4 v10;
  int data;
  std::string __p;
  std::string v13;
  std::string v14;

  siri::dialogengine::StringTrim(" \t\n\r", a1, &v14);
  std::string::basic_string[abi:ne180100]<0>(&v13, "'");
  if (siri::dialogengine::StringStartsWith(a1, (unsigned __int8 *)&v13))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "'");
    v4 = siri::dialogengine::StringEndsWith(a1, (unsigned __int8 *)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v4 = 0;
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v13.__r_.__value_.__l.__data_);
    if (v4)
      goto LABEL_7;
  }
  else if (v4)
  {
LABEL_7:
    v5 = siri::dialogengine::TYPE_STRING;
LABEL_40:
    std::string::basic_string[abi:ne180100]<0>(a2, *v5);
    goto LABEL_41;
  }
  siri::dialogengine::StringToLower((uint64_t)&v14, (uint64_t)&v13);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  v14 = v13;
  if ((SHIBYTE(v13.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (HIBYTE(v13.__r_.__value_.__r.__words[2]) != 4)
    {
      if (HIBYTE(v13.__r_.__value_.__r.__words[2]) != 5)
        goto LABEL_22;
      v6 = &v14;
      goto LABEL_18;
    }
    data = (int)v14.__r_.__value_.__l.__data_;
LABEL_38:
    if (data != 1702195828)
      goto LABEL_22;
LABEL_39:
    v5 = &siri::dialogengine::TYPE_BOOLEAN;
    goto LABEL_40;
  }
  if (v14.__r_.__value_.__l.__size_ == 4)
  {
    data = *(_DWORD *)v14.__r_.__value_.__l.__data_;
    goto LABEL_38;
  }
  if (v14.__r_.__value_.__l.__size_ != 5)
    goto LABEL_22;
  v6 = (std::string *)v14.__r_.__value_.__r.__words[0];
LABEL_18:
  v7 = (int)v6->__r_.__value_.__l.__data_;
  v8 = v6->__r_.__value_.__s.__data_[4];
  if (v7 == 1936482662 && v8 == 101)
    goto LABEL_39;
LABEL_22:
  if (siri::dialogengine::IsStringANumber(&v14))
  {
    v5 = siri::dialogengine::TYPE_NUMBER;
    goto LABEL_40;
  }
  std::string::basic_string[abi:ne180100]<0>(&v13, "[");
  if (siri::dialogengine::StringStartsWith(a1, (unsigned __int8 *)&v13))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "]");
    v10 = siri::dialogengine::StringEndsWith(a1, (unsigned __int8 *)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v10 = 0;
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v13.__r_.__value_.__l.__data_);
    if (v10)
      goto LABEL_31;
LABEL_36:
    v5 = (char **)&siri::dialogengine::TYPE_UNKNOWN;
    goto LABEL_40;
  }
  if (!v10)
    goto LABEL_36;
LABEL_31:
  siri::dialogengine::StringTrim("[]", &v14, &__p);
  siri::dialogengine::ParseStringList((uint64_t *)&__p, 0, (uint64_t *)&v13);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v13.__r_.__value_.__r.__words[0] == v13.__r_.__value_.__l.__size_)
    std::string::basic_string[abi:ne180100]<0>(&__p, siri::dialogengine::TYPE_STRING[0]);
  else
    siri::dialogengine::GetLiteralType(&__p);
  siri::dialogengine::SetArrayElementType((uint64_t)&__p, (uint64_t)a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
LABEL_41:
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
}

void sub_1BFC10B4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0)
    operator delete(__p);
  __p = &a15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (a26 < 0)
    operator delete(a21);
  _Unwind_Resume(a1);
}

void siri::dialogengine::ResolveLiteral(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _BOOL4 v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  std::string *v9;
  int v10;
  int v12;
  std::string *v13;
  int v14;
  int v15;
  double v17;
  double v18;
  uint64_t v19;
  _BOOL4 v20;
  int data;
  _QWORD *v22;
  std::string::size_type i;
  std::string::size_type size;
  __int128 v25;
  _QWORD *v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  std::string *v36;
  char v37;
  _QWORD v38[2];
  uint64_t v39;
  std::__shared_weak_count *v40;
  char v41;
  std::string v42;
  std::string __p;
  std::string v44;
  std::string v45;

  siri::dialogengine::StringTrim(" \t\n\r", (const std::string *)a1, &v45);
  std::string::basic_string[abi:ne180100]<0>(&v44, "'");
  if (siri::dialogengine::StringStartsWith((std::string *)a1, (unsigned __int8 *)&v44))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "'");
    v4 = siri::dialogengine::StringEndsWith((std::string *)a1, (unsigned __int8 *)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v4 = 0;
  }
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v44.__r_.__value_.__l.__data_);
    if (v4)
      goto LABEL_7;
  }
  else if (v4)
  {
LABEL_7:
    v5 = operator new();
    std::string::basic_string[abi:ne180100]<0>(&v44, "");
    v6 = *(unsigned __int8 *)(a1 + 23);
    if ((v6 & 0x80u) != 0)
      v6 = *(_QWORD *)(a1 + 8);
    std::string::basic_string(&v42, (const std::string *)a1, 1uLL, v6 - 2, (std::allocator<char> *)&v39);
    memset(&__p, 0, sizeof(__p));
    if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v7 = HIBYTE(v42.__r_.__value_.__r.__words[2]);
    else
      v7 = v42.__r_.__value_.__r.__words[1];
    if (v7 >= 1)
    {
      LODWORD(v8) = 0;
      do
      {
        if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v9 = &v42;
        else
          v9 = (std::string *)v42.__r_.__value_.__r.__words[0];
        v10 = v9->__r_.__value_.__s.__data_[(int)v8];
        if (v10 == 92 && (int)v8 < v7 - 1)
        {
          v8 = (int)v8 + 1;
          v12 = v9->__r_.__value_.__s.__data_[v8];
          if (v12 == 116)
          {
            LOBYTE(v12) = 9;
          }
          else if (v12 == 110)
          {
            LOBYTE(v12) = 10;
          }
          std::string::push_back(&__p, v12);
        }
        else
        {
          std::string::push_back(&__p, v10);
        }
        LODWORD(v8) = v8 + 1;
      }
      while ((int)v8 < v7);
    }
    siri::dialogengine::VariableString::VariableString(v5, &v44, (uint64_t)&__p);
    std::shared_ptr<siri::dialogengine::Variable>::shared_ptr[abi:ne180100]<siri::dialogengine::VariableString,void>(a2, v5);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v42.__r_.__value_.__l.__data_);
    goto LABEL_92;
  }
  siri::dialogengine::StringToLower((uint64_t)&v45, (uint64_t)&v44);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  v45 = v44;
  if ((SHIBYTE(v44.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (HIBYTE(v44.__r_.__value_.__r.__words[2]) != 4)
    {
      if (HIBYTE(v44.__r_.__value_.__r.__words[2]) != 5)
        goto LABEL_46;
      v13 = &v45;
      goto LABEL_42;
    }
    data = (int)v45.__r_.__value_.__l.__data_;
LABEL_83:
    if (data != 1702195828)
      goto LABEL_46;
LABEL_84:
    v35 = operator new();
    std::string::basic_string[abi:ne180100]<0>(&v44, "");
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v45.__r_.__value_.__l.__size_ == 4)
      {
        v36 = (std::string *)v45.__r_.__value_.__r.__words[0];
        goto LABEL_89;
      }
    }
    else if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) == 4)
    {
      v36 = &v45;
LABEL_89:
      v37 = LODWORD(v36->__r_.__value_.__l.__data_) == 1702195828;
LABEL_91:
      siri::dialogengine::VariableBoolean::VariableBoolean(v35, &v44, v37);
      std::shared_ptr<siri::dialogengine::Variable>::shared_ptr[abi:ne180100]<siri::dialogengine::VariableBoolean,void>(a2, v35);
LABEL_92:
      if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v44.__r_.__value_.__l.__data_);
      goto LABEL_94;
    }
    v37 = 0;
    goto LABEL_91;
  }
  if (v45.__r_.__value_.__l.__size_ == 4)
  {
    data = *(_DWORD *)v45.__r_.__value_.__l.__data_;
    goto LABEL_83;
  }
  if (v45.__r_.__value_.__l.__size_ != 5)
    goto LABEL_46;
  v13 = (std::string *)v45.__r_.__value_.__r.__words[0];
LABEL_42:
  v14 = (int)v13->__r_.__value_.__l.__data_;
  v15 = v13->__r_.__value_.__s.__data_[4];
  if (v14 == 1936482662 && v15 == 101)
    goto LABEL_84;
LABEL_46:
  v41 = 1;
  v17 = siri::dialogengine::StringToDouble(&v45, &v41);
  if (v41)
  {
    v18 = v17;
    v19 = operator new();
    std::string::basic_string[abi:ne180100]<0>(&v44, "");
    siri::dialogengine::VariableNumber::VariableNumber(v19, &v44, v18);
    std::shared_ptr<siri::dialogengine::Variable>::shared_ptr[abi:ne180100]<siri::dialogengine::VariableNumber,void>(a2, v19);
    goto LABEL_92;
  }
  std::string::basic_string[abi:ne180100]<0>(&v44, "[");
  if (siri::dialogengine::StringStartsWith((std::string *)a1, (unsigned __int8 *)&v44))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "]");
    v20 = siri::dialogengine::StringEndsWith((std::string *)a1, (unsigned __int8 *)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v20 = 0;
  }
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v44.__r_.__value_.__l.__data_);
    if (v20)
      goto LABEL_55;
LABEL_98:
    *a2 = 0;
    a2[1] = 0;
    goto LABEL_94;
  }
  if (!v20)
    goto LABEL_98;
LABEL_55:
  v22 = (_QWORD *)operator new();
  std::string::basic_string[abi:ne180100]<0>(&v44, "");
  siri::dialogengine::VariableArray::VariableArray(v22, &v44);
  std::shared_ptr<siri::dialogengine::VariableArray>::shared_ptr[abi:ne180100]<siri::dialogengine::VariableArray,void>(&v42, (uint64_t)v22);
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v44.__r_.__value_.__l.__data_);
  siri::dialogengine::StringTrim("[]", &v45, &__p);
  siri::dialogengine::ParseStringList((uint64_t *)&__p, 0, (uint64_t *)&v44);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  size = v44.__r_.__value_.__l.__size_;
  for (i = v44.__r_.__value_.__r.__words[0]; i != size; i += 24)
  {
    if (*(char *)(i + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)i, *(_QWORD *)(i + 8));
    }
    else
    {
      v25 = *(_OWORD *)i;
      __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(i + 16);
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v25;
    }
    siri::dialogengine::ResolveLiteral(&v39, &__p);
    if (v39)
    {
      v26 = (_QWORD *)v42.__r_.__value_.__r.__words[0];
      v27 = v40;
      v38[0] = v39;
      v38[1] = v40;
      if (v40)
      {
        p_shared_owners = (unint64_t *)&v40->__shared_owners_;
        do
          v29 = __ldxr(p_shared_owners);
        while (__stxr(v29 + 1, p_shared_owners));
      }
      siri::dialogengine::VariableArray::AddItem(v26, v38);
      if (v27)
      {
        v30 = (unint64_t *)&v27->__shared_owners_;
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 - 1, v30));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
      }
    }
    v32 = v40;
    if (v40)
    {
      v33 = (unint64_t *)&v40->__shared_owners_;
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v44;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  *(_OWORD *)a2 = *(_OWORD *)&v42.__r_.__value_.__l.__data_;
LABEL_94:
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
}

void sub_1BFC111E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;

  if (a27 < 0)
    operator delete(__p);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  if (*(char *)(v33 - 73) < 0)
    operator delete(*(void **)(v33 - 96));
  _Unwind_Resume(a1);
}

BOOL siri::dialogengine::IsPrimitiveType(const void **a1)
{
  const void **v1;
  unsigned __int8 v2;
  int v5;
  uint64_t i;
  const void *v7[3];
  _QWORD v8[3];
  _QWORD v9[4];

  v1 = a1;
  v9[3] = *MEMORY[0x1E0C80C00];
  if ((v2 & 1) == 0)
  {
    v1 = a1;
    if (v5)
    {
      std::string::basic_string[abi:ne180100]<0>(v7, siri::dialogengine::TYPE_STRING[0]);
      std::string::basic_string[abi:ne180100]<0>(v8, siri::dialogengine::TYPE_NUMBER[0]);
      std::string::basic_string[abi:ne180100]<0>(v9, siri::dialogengine::TYPE_BOOLEAN);
      std::set<std::string>::set[abi:ne180100](&siri::dialogengine::IsPrimitiveType(std::string const&)::sPrimitiveTypes, v7, 3);
      for (i = 0; i != -9; i -= 3)
      {
        if (SHIBYTE(v9[i + 2]) < 0)
          operator delete((void *)v9[i]);
      }
      __cxa_atexit((void (*)(void *))std::set<std::string>::~set[abi:ne180100], &siri::dialogengine::IsPrimitiveType(std::string const&)::sPrimitiveTypes, &dword_1BF794000);
      v1 = a1;
    }
  }
  return std::__tree<std::string>::find<std::string>((uint64_t)&siri::dialogengine::IsPrimitiveType(std::string const&)::sPrimitiveTypes, v1) != (_QWORD)&unk_1EF580EA8;
}

void sub_1BFC1154C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = 0;
  while (1)
  {
    if (*(char *)(v1 + v3 + 71) < 0)
      operator delete(*(void **)(v1 + v3 + 48));
    v3 -= 24;
    if (v3 == -72)
    {
      _Unwind_Resume(a1);
    }
  }
}

BOOL siri::dialogengine::IsArrayType(std::string *a1)
{
  _BOOL8 v2;
  void *__p[2];
  char v5;

  std::string::basic_string[abi:ne180100]<0>(__p, "[]");
  v2 = siri::dialogengine::StringEndsWith(a1, (unsigned __int8 *)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  return v2;
}

void sub_1BFC11618(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL siri::dialogengine::IsObjectType(std::string *a1)
{
  return !siri::dialogengine::IsPrimitiveType((const void **)&a1->__r_.__value_.__l.__data_)
      && !siri::dialogengine::IsArrayType(a1);
}

BOOL siri::dialogengine::IsValidVariableName(uint64_t a1)
{
  uint64_t v1;
  int v2;
  unsigned __int8 *v3;
  int v4;
  unsigned __int8 *v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  const void *v11;
  _BOOL8 v12;
  void *v14;
  const void *__s1[2];
  unsigned __int8 v16;

  v1 = *(unsigned __int8 *)(a1 + 23);
  v2 = (char)v1;
  if ((v1 & 0x80u) != 0)
    v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v3 = v2 >= 0 ? (unsigned __int8 *)a1 : *(unsigned __int8 **)a1;
  v4 = *v3;
  if ((v4 - 97) >= 0x1A && v4 != 95 && (v4 - 65) > 0x19)
    return 0;
  v6 = v3 + 1;
  v7 = v1 - 1;
  if (v1 != 1)
  {
    do
    {
      v8 = *v6;
      if ((v8 - 97) >= 0x1A && v8 != 45)
      {
        v9 = v8 != 95 && (v8 - 65) >= 0x1A;
        if (v9 && (v8 - 48) > 9)
          break;
      }
      ++v6;
      --v7;
    }
    while (v7);
  }
  if (&v3[v1] != v6)
    return 0;
  siri::dialogengine::GetLiteralType((std::string *)a1, __s1);
  v11 = (const void *)strlen(siri::dialogengine::TYPE_UNKNOWN);
  if (((char)v16 & 0x80000000) == 0)
  {
    if (v11 == (const void *)v16)
      return memcmp(__s1, siri::dialogengine::TYPE_UNKNOWN, (size_t)v11) == 0;
    return 0;
  }
  if (v11 == __s1[1])
  {
    if (v11 == (const void *)-1)
      std::string::__throw_out_of_range[abi:ne180100]();
    v14 = (void *)__s1[0];
    v12 = memcmp(__s1[0], siri::dialogengine::TYPE_UNKNOWN, (size_t)v11) == 0;
  }
  else
  {
    v12 = 0;
    v14 = (void *)__s1[0];
  }
  operator delete(v14);
  return v12;
}

BOOL siri::dialogengine::IsValidCompoundVariableName(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  _BOOL8 IsValidVariableName;
  BOOL v6;
  std::string __p;
  uint64_t v9;
  uint64_t v10;

  v1 = *(unsigned __int8 *)(a1 + 23);
  if ((v1 & 0x80u) != 0)
    v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  siri::dialogengine::StringSplit((unsigned __int8 *)a1, ".", &v9);
  v2 = v10;
  if (v9 == v10)
  {
    IsValidVariableName = 1;
  }
  else
  {
    v3 = v9 + 24;
    do
    {
      if (*(char *)(v3 - 1) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v3 - 24), *(_QWORD *)(v3 - 16));
      }
      else
      {
        v4 = *(_OWORD *)(v3 - 24);
        __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(v3 - 8);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v4;
      }
      IsValidVariableName = siri::dialogengine::IsValidVariableName((uint64_t)&__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v6 = v3 != v2 && IsValidVariableName;
      v3 += 24;
    }
    while (v6);
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  return IsValidVariableName;
}

void sub_1BFC118A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  __p = &a15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

BOOL siri::dialogengine::IsValidTypeName(uint64_t a1)
{
  int v1;
  BOOL v2;
  _BYTE *v3;
  uint64_t v4;
  _BOOL8 result;
  uint64_t v7;
  _BYTE *v8;
  int v9;
  BOOL v10;
  _BYTE *v12;
  uint64_t v13;
  int v14;

  v1 = *(char *)(a1 + 23);
  v2 = v1 < 0;
  v3 = *(_BYTE **)a1;
  if (v1 >= 0)
    v3 = (_BYTE *)a1;
  v4 = *(unsigned __int8 *)(a1 + 23);
  if (v2)
    v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
    return 0;
  if ((*v3 & 0xDFu) - 91 < 0xFFFFFFE6 || v4 == 1)
    return 0;
  v7 = 0;
  v8 = v3 + 1;
  while (1)
  {
    v9 = v8[v7];
    if ((v9 - 97) >= 0x1A && (v9 - 45) >= 2)
    {
      v10 = v9 != 95 && (v9 - 65) >= 0x1A;
      if (v10 && (v9 - 48) > 9)
        break;
    }
    if (v4 - 1 == ++v7)
    {
      v7 = v4 - 1;
      v12 = &v3[v4];
      goto LABEL_24;
    }
  }
  v12 = &v8[v7];
LABEL_24:
  result = 0;
  if (v7 && &v3[v4] == v12)
  {
    v13 = 0;
    do
    {
      v14 = *v3++;
      if (v14 == 46)
        ++v13;
      --v4;
    }
    while (v4);
    return v13 != 0;
  }
  return result;
}

BOOL siri::dialogengine::IsBuiltinType(std::string *a1)
{
  _BOOL8 v2;
  void *__p[2];
  char v5;
  void *v6[2];
  char v7;

  std::string::basic_string[abi:ne180100]<0>(v6, "dialog.");
  if (siri::dialogengine::StringStartsWith(a1, (unsigned __int8 *)v6))
  {
    v2 = 1;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "sirikit.");
    v2 = siri::dialogengine::StringStartsWith(a1, (unsigned __int8 *)__p);
    if (v5 < 0)
      operator delete(__p[0]);
  }
  if (v7 < 0)
    operator delete(v6[0]);
  return v2;
}

void sub_1BFC11A3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

BOOL siri::dialogengine::IsValidType(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v9;
  std::__shared_weak_count *v10;
  std::string __p;

  v2 = *(unsigned __int8 *)(a2 + 23);
  if ((v2 & 0x80u) != 0)
    v2 = *(_QWORD *)(a2 + 8);
  if (!v2)
    return 0;
  siri::dialogengine::GetArrayElementType(a2, &__p);
  if (siri::dialogengine::IsPrimitiveType((const void **)&__p.__r_.__value_.__l.__data_))
  {
    v4 = 1;
  }
  else
  {
    siri::dialogengine::ObjectRegistry::GetObject(a1, (const std::string::value_type **)&__p.__r_.__value_.__l.__data_, &v9);
    v5 = v10;
    v4 = v9 != 0;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v4;
}

void sub_1BFC11B3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL siri::dialogengine::IsPropertyValidForType(_BOOL8 a1, unsigned __int8 *a2)
{
  unsigned __int8 v4;
  __int128 v5;
  char *v6;
  char *v7;
  void **v8;
  uint64_t i;
  void *__p[2];
  char v12;
  void *v13[2];
  char v14;
  uint64_t v15;
  void **v16;
  uint64_t v17[3];
  _QWORD v18[3];
  std::string v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if ((v4 & 1) == 0
  {
    std::string::basic_string[abi:ne180100]<0>(v13, "gender");
    std::string::basic_string[abi:ne180100]<0>(&v15, "dialog.String");
    std::string::basic_string[abi:ne180100]<0>(v17, "dialog.String[]");
    std::string::basic_string[abi:ne180100]<0>(v18, "dialog.Pronoun");
    std::set<std::string>::set[abi:ne180100]((uint64_t *)__p, (const void **)&v15, 3);
    std::pair<std::string const,std::set<std::string>>::pair[abi:ne180100]<true,0>(&v19, (__int128 *)v13, (const void ***)__p);
    std::map<std::string,std::set<std::string>>::map[abi:ne180100]((uint64_t)&siri::dialogengine::IsPropertyValidForType(siri::dialogengine::Context *,std::string const&)::validTypesForProperties, (const void **)&v19.__r_.__value_.__l.__data_, 1);
    std::pair<std::string const,std::set<std::string> const>::~pair((uint64_t)&v19);
    std::__tree<std::string>::destroy((uint64_t)__p, (char *)__p[1]);
    for (i = 0; i != -9; i -= 3)
    {
      if (SHIBYTE(v18[i + 2]) < 0)
        operator delete((void *)v18[i]);
    }
    if (v14 < 0)
      operator delete(v13[0]);
    __cxa_atexit((void (*)(void *))std::map<std::string,std::set<std::string>>::~map[abi:ne180100], &siri::dialogengine::IsPropertyValidForType(siri::dialogengine::Context *,std::string const&)::validTypesForProperties, &dword_1BF794000);
  }
  siri::dialogengine::StringSplit(a2, ".", &v15);
  if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)v16 - v15) >> 3) >= 2)
  {
    if (*((char *)v16 - 1) < 0)
    {
      std::string::__init_copy_ctor_external(&v19, (const std::string::value_type *)*(v16 - 3), (std::string::size_type)*(v16 - 2));
    }
    else
    {
      v5 = *(_OWORD *)(v16 - 3);
      v19.__r_.__value_.__r.__words[2] = (std::string::size_type)*(v16 - 1);
      *(_OWORD *)&v19.__r_.__value_.__l.__data_ = v5;
    }
    v6 = (char *)std::__tree<std::string>::find<std::string>((uint64_t)&siri::dialogengine::IsPropertyValidForType(siri::dialogengine::Context *,std::string const&)::validTypesForProperties, (const void **)&v19.__r_.__value_.__l.__data_);
    if (v6 == (char *)&unk_1EF5835D8)
    {
      a1 = 1;
    }
    else if (a1)
    {
      v7 = v6;
      v8 = v16 - 3;
      if (*((char *)v16 - 1) < 0)
        operator delete(*v8);
      v16 = v8;
      std::string::basic_string[abi:ne180100]<0>(__p, ".");
      siri::dialogengine::StringJoinInternal<std::vector<std::string>>((uint64_t)v13, v15, (uint64_t)v16, (uint64_t)__p);
      if (v12 < 0)
        operator delete(__p[0]);
      siri::dialogengine::ResolveType(0, a1, (uint64_t)v13, 1, (uint64_t)__p);
      a1 = v7 + 64 != (char *)std::__tree<std::string>::find<std::string>((uint64_t)(v7 + 56), (const void **)__p);
      if (v12 < 0)
        operator delete(__p[0]);
      if (v14 < 0)
        operator delete(v13[0]);
    }
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v19.__r_.__value_.__l.__data_);
  }
  else
  {
    a1 = 1;
  }
  v19.__r_.__value_.__r.__words[0] = (std::string::size_type)&v15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v19);
  return a1;
}

void sub_1BFC11E28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, char *a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  uint64_t v22;
  uint64_t v24;

  std::pair<std::string const,std::set<std::string> const>::~pair(v22 - 96);
  std::__tree<std::string>::destroy((uint64_t)&a10, a11);
  v24 = 0;
  while (1)
  {
    if (*(&a22 + v24 + 71) < 0)
      operator delete(*(void **)(&a22 + v24 + 48));
    v24 -= 24;
    if (v24 == -72)
    {
      if (a21 < 0)
        operator delete(__p);
      _Unwind_Resume(a1);
    }
  }
}

std::string *std::pair<std::string const,std::set<std::string>>::pair[abi:ne180100]<true,0>(std::string *this, __int128 *a2, const void ***a3)
{
  __int128 v5;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  std::set<std::string>::set[abi:ne180100]((uint64_t *)&this[1], a3);
  return this;
}

void sub_1BFC11FAC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::map<std::string,std::set<std::string>>::map[abi:ne180100](uint64_t a1, const void **a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = a1 + 8;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v6 = 48 * a3;
    do
    {
      std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::set<std::string>> const&>((uint64_t **)a1, v4, a2, (uint64_t)a2);
      a2 += 6;
      v6 -= 48;
    }
    while (v6);
  }
  return a1;
}

void sub_1BFC12030(_Unwind_Exception *a1)
{
  _QWORD **v1;

  std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::destroy(*v1);
  _Unwind_Resume(a1);
}

uint64_t std::map<std::string,std::set<std::string>>::~map[abi:ne180100](uint64_t a1)
{
  std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::destroy(*(_QWORD **)(a1 + 8));
  return a1;
}

void siri::dialogengine::ResolveType(void **this@<X2>, uint64_t a2@<X0>, uint64_t a3@<X1>, int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  size_t v11;
  size_t v12;
  __int128 *v13;
  const char *v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  uint64_t Parameter;
  siri::dialogengine::ObjectProperty *v20;
  size_t v21;
  size_t v22;
  const void *v23;
  void **v24;
  uint64_t GlobalParameter;
  siri::dialogengine::ObjectProperty *v26;
  unint64_t *v27;
  unint64_t v28;
  std::string v29;
  std::string v30;
  char v31;
  void **v32[2];
  std::string v33;
  std::string v34;
  char v35;
  void *v36;
  char v37;
  const std::string *v38;
  __int128 *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  __int128 v42;
  uint64_t v43;

  if (this && *((_BYTE *)this + 240))
  {
    siri::dialogengine::ObjectProperty::~ObjectProperty(this);
    *((_BYTE *)this + 240) = 0;
  }
  if (!a2)
    goto LABEL_11;
  v10 = *(unsigned __int8 *)(a3 + 23);
  if ((v10 & 0x80u) != 0)
    v10 = *(_QWORD *)(a3 + 8);
  if (!v10)
  {
LABEL_11:
    siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"ResolveType sanity check failed", (const char *)a3);
    std::string::basic_string[abi:ne180100]<0>((_QWORD *)a5, siri::dialogengine::TYPE_UNKNOWN);
    return;
  }
  siri::dialogengine::GetLiteralType((std::string *)a3, &v42);
  v11 = strlen(siri::dialogengine::TYPE_UNKNOWN);
  v12 = v11;
  if ((SHIBYTE(v43) & 0x80000000) == 0)
  {
    if (v11 == HIBYTE(v43))
    {
      v13 = &v42;
      goto LABEL_15;
    }
LABEL_16:
    *(_OWORD *)a5 = v42;
    *(_QWORD *)(a5 + 16) = v43;
    return;
  }
  if (v11 != *((_QWORD *)&v42 + 1))
    goto LABEL_16;
  if (v11 == -1)
    std::string::__throw_out_of_range[abi:ne180100]();
  v13 = (__int128 *)v42;
LABEL_15:
  if (memcmp(v13, siri::dialogengine::TYPE_UNKNOWN, v12))
    goto LABEL_16;
  v16 = *(_QWORD *)(a2 + 504);
  v15 = *(std::__shared_weak_count **)(a2 + 512);
  v40 = v16;
  v41 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v18 = __ldxr(p_shared_owners);
    while (__stxr(v18 + 1, p_shared_owners));
  }
  if (!v16)
  {
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"No file loaded for context - cannot determine type.", v14);
    std::string::basic_string[abi:ne180100]<0>((_QWORD *)a5, siri::dialogengine::TYPE_UNKNOWN);
    goto LABEL_75;
  }
  siri::dialogengine::StringSplit((unsigned __int8 *)a3, ".", &v38);
  if (v38 != (const std::string *)v39)
  {
    siri::dialogengine::ParseVariableReference(&v34, v38);
    std::string::basic_string[abi:ne180100]<0>((_QWORD *)a5, siri::dialogengine::TYPE_UNKNOWN);
    Parameter = siri::dialogengine::File::GetParameter(v16, (unsigned __int8 **)&v34);
    v20 = (siri::dialogengine::ObjectProperty *)Parameter;
    if (Parameter)
    {
      if (*(char *)(Parameter + 55) < 0)
        std::string::__init_copy_ctor_external(&v29, *(const std::string::value_type **)(Parameter + 32), *(_QWORD *)(Parameter + 40));
      else
        v29 = *(std::string *)(Parameter + 32);
      if (*(char *)(a5 + 23) < 0)
        operator delete(*(void **)a5);
      *(std::string *)a5 = v29;
      if (this)
        std::optional<siri::dialogengine::ObjectProperty>::operator=[abi:ne180100]<siri::dialogengine::Parameter const&,void>((siri::dialogengine::ObjectProperty *)this, v20);
    }
    v21 = strlen(siri::dialogengine::TYPE_UNKNOWN);
    v22 = v21;
    if (*(char *)(a5 + 23) < 0)
    {
      if (v21 != *(_QWORD *)(a5 + 8))
      {
LABEL_40:
        if (v35)
        {
          siri::dialogengine::GetArrayElementType(a5, &v29);
          if (*(char *)(a5 + 23) < 0)
            operator delete(*(void **)a5);
          *(std::string *)a5 = v29;
        }
        memset(&v33, 0, sizeof(v33));
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string const*>>(&v33, (__int128 *)&v38[1], v39, 0xAAAAAAAAAAAAAAABLL * (((char *)v39 - (char *)&v38[1]) >> 3));
        siri::dialogengine::ResolveTypeRecursive(&v29, (const char *)a2, a5, (uint64_t)&v33, (uint64_t)this);
        if (*(char *)(a5 + 23) < 0)
          operator delete(*(void **)a5);
        *(std::string *)a5 = v29;
        *((_BYTE *)&v29.__r_.__value_.__s + 23) = 0;
        v29.__r_.__value_.__s.__data_[0] = 0;
        v32[0] = (void **)&v33;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v32);
        if (a4 == 1 && siri::dialogengine::IsObjectType((std::string *)a5))
        {
          siri::dialogengine::ObjectRegistry::GetObject(a2, (const std::string::value_type **)a5, (uint64_t *)v32);
          v24 = v32[0];
          if (v32[0])
          {
            std::string::basic_string[abi:ne180100]<0>(&v33, (char *)siri::dialogengine::TO_STRING);
            siri::dialogengine::ObjectSchema::GetProperty((uint64_t)v24, (const char *)a2, (const void **)&v33.__r_.__value_.__l.__data_, 0, (siri::dialogengine::ObjectProperty *)&v29);
            if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v33.__r_.__value_.__l.__data_);
            if (v31)
            {
              if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
                std::string::__init_copy_ctor_external(&v33, v30.__r_.__value_.__l.__data_, v30.__r_.__value_.__l.__size_);
              else
                v33 = v30;
              if (*(char *)(a5 + 23) < 0)
                operator delete(*(void **)a5);
              *(std::string *)a5 = v33;
              if (this)
                std::optional<siri::dialogengine::ObjectProperty>::operator=[abi:ne180100]<siri::dialogengine::Parameter const&,void>((siri::dialogengine::ObjectProperty *)this, (siri::dialogengine::ObjectProperty *)&v29);
              if (v31)
                siri::dialogengine::ObjectProperty::~ObjectProperty((void **)&v29.__r_.__value_.__l.__data_);
            }
          }
          std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)v32);
        }
        if (v37 < 0)
          operator delete(v36);
        if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v34.__r_.__value_.__l.__data_);
        goto LABEL_74;
      }
      if (v21 == -1)
        std::string::__throw_out_of_range[abi:ne180100]();
      v23 = *(const void **)a5;
    }
    else
    {
      v23 = (const void *)a5;
      if (v22 != *(unsigned __int8 *)(a5 + 23))
        goto LABEL_40;
    }
    if (!memcmp(v23, siri::dialogengine::TYPE_UNKNOWN, v22))
    {
      GlobalParameter = siri::dialogengine::Context::GetGlobalParameter(a2, (const void **)&v34.__r_.__value_.__l.__data_);
      if (GlobalParameter)
      {
        v26 = (siri::dialogengine::ObjectProperty *)GlobalParameter;
        if (*(char *)(GlobalParameter + 55) < 0)
          std::string::__init_copy_ctor_external(&v29, *(const std::string::value_type **)(GlobalParameter + 32), *(_QWORD *)(GlobalParameter + 40));
        else
          v29 = *(std::string *)(GlobalParameter + 32);
        if (*(char *)(a5 + 23) < 0)
          operator delete(*(void **)a5);
        *(std::string *)a5 = v29;
        if (this)
          std::optional<siri::dialogengine::ObjectProperty>::operator=[abi:ne180100]<siri::dialogengine::Parameter const&,void>((siri::dialogengine::ObjectProperty *)this, v26);
      }
    }
    goto LABEL_40;
  }
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)a5, siri::dialogengine::TYPE_UNKNOWN);
LABEL_74:
  v29.__r_.__value_.__r.__words[0] = (std::string::size_type)&v38;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
LABEL_75:
  if (v15)
  {
    v27 = (unint64_t *)&v15->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (SHIBYTE(v43) < 0)
    operator delete((void *)v42);
}

void sub_1BFC12574(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  uint64_t v39;
  uint64_t v40;

  if (a39)
    siri::dialogengine::ObjectProperty::~ObjectProperty((void **)&a9);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](v40 - 240);
  if (*(char *)(v39 + 23) < 0)
    operator delete(*(void **)v39);
  siri::dialogengine::VariableReference::~VariableReference((void **)(v40 - 200));
  a9 = v40 - 144;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](v40 - 120);
  if (*(char *)(v40 - 81) < 0)
    operator delete(*(void **)(v40 - 104));
  _Unwind_Resume(a1);
}

void siri::dialogengine::ParseVariableReference(std::string *a1, const std::string *a2)
{
  char v4;
  int64_t size;
  const std::string *v6;
  char *v7;
  std::string *v8;
  char *v9;
  std::string::size_type v10;
  std::string *v11;
  std::string __p;
  std::string v13;
  std::string v14;
  char v15;

  v4 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  if (v4 >= 0)
    size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  else
    size = a2->__r_.__value_.__l.__size_;
  if (v4 >= 0)
    v6 = a2;
  else
    v6 = (const std::string *)a2->__r_.__value_.__r.__words[0];
  if (size >= 1)
  {
    v7 = (char *)v6 + size;
    v8 = (std::string *)v6;
    do
    {
      v9 = (char *)memchr(v8, 91, size);
      if (!v9)
        break;
      if (*v9 == 91)
      {
        if (v9 == v7)
          break;
        v10 = v9 - (char *)v6;
        if (v10 == -1)
          break;
        std::string::basic_string(&v13, a2, 0, v10, (std::allocator<char> *)&__p);
        siri::dialogengine::StringTrim(" \t\n\r", &v13, &v14);
        if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v13.__r_.__value_.__l.__data_);
        std::string::basic_string(&__p, a2, v10, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v15);
        siri::dialogengine::StringTrim("[]", &__p, &v13);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(a1, v14.__r_.__value_.__l.__data_, v14.__r_.__value_.__l.__size_);
        else
          *a1 = v14;
        a1[1].__r_.__value_.__s.__data_[0] = 1;
        v11 = (std::string *)((char *)a1 + 32);
        if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(v11, v13.__r_.__value_.__l.__data_, v13.__r_.__value_.__l.__size_);
          if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v13.__r_.__value_.__l.__data_);
        }
        else
        {
          *(_OWORD *)&v11->__r_.__value_.__l.__data_ = *(_OWORD *)&v13.__r_.__value_.__l.__data_;
          a1[2].__r_.__value_.__r.__words[0] = v13.__r_.__value_.__r.__words[2];
        }
        if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v14.__r_.__value_.__l.__data_);
        return;
      }
      v8 = (std::string *)(v9 + 1);
      size = v7 - (char *)v8;
    }
    while (v7 - (char *)v8 >= 1);
  }
  siri::dialogengine::StringTrim(" \t\n\r", a2, a1);
  a1[1].__r_.__value_.__s.__data_[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&a1[1].__r_.__value_.__l.__size_, "");
}

void sub_1BFC12808(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;

  if (*(char *)(v26 + 23) < 0)
    operator delete(*(void **)v26);
  if (a20 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  _Unwind_Resume(exception_object);
}

siri::dialogengine::ObjectProperty *std::optional<siri::dialogengine::ObjectProperty>::operator=[abi:ne180100]<siri::dialogengine::Parameter const&,void>(siri::dialogengine::ObjectProperty *this, siri::dialogengine::ObjectProperty *a2)
{
  char v4;

  if (*((_BYTE *)this + 240))
  {
    std::string::operator=((std::string *)((char *)this + 8), (const std::string *)((char *)a2 + 8));
    std::string::operator=((std::string *)((char *)this + 32), (const std::string *)((char *)a2 + 32));
    std::string::operator=((std::string *)((char *)this + 56), (const std::string *)((char *)a2 + 56));
    std::string::operator=((std::string *)((char *)this + 80), (const std::string *)((char *)a2 + 80));
    std::string::operator=((std::string *)((char *)this + 104), (const std::string *)((char *)a2 + 104));
    std::string::operator=((std::string *)((char *)this + 128), (const std::string *)((char *)a2 + 128));
    v4 = *((_BYTE *)a2 + 154);
    *((_WORD *)this + 76) = *((_WORD *)a2 + 76);
    *((_BYTE *)this + 154) = v4;
    std::string::operator=((std::string *)((char *)this + 160), (const std::string *)((char *)a2 + 160));
    std::string::operator=((std::string *)((char *)this + 184), (const std::string *)((char *)a2 + 184));
    std::string::operator=((std::string *)((char *)this + 208), (const std::string *)((char *)a2 + 208));
    *((_WORD *)this + 116) = *((_WORD *)a2 + 116);
  }
  else
  {
    siri::dialogengine::ObjectProperty::ObjectProperty(this, a2);
    *((_BYTE *)this + 240) = 1;
  }
  return this;
}

std::string *std::vector<std::string>::__init_with_size[abi:ne180100]<std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string const*>>(std::string *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  std::string *v6;

  if (a4)
  {
    v6 = result;
    std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_1BFC129BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void siri::dialogengine::ResolveTypeRecursive(std::string *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  std::string::size_type size;
  __int128 *v11;
  __int128 *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::string v16;
  std::string v17;
  std::string v18;
  char v19;
  std::string v20;
  char v21;
  void *v22;
  char v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  std::string v26;
  std::string v27;

  if (*(_QWORD *)a4 == *(_QWORD *)(a4 + 8))
  {
    if (*(char *)(a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(a1, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
    }
    else
    {
      *(_OWORD *)&a1->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
      a1->__r_.__value_.__r.__words[2] = *(_QWORD *)(a3 + 16);
    }
  }
  else
  {
    if (a5 && *(_BYTE *)(a5 + 240))
    {
      siri::dialogengine::ObjectProperty::~ObjectProperty((void **)a5);
      *(_BYTE *)(a5 + 240) = 0;
    }
    std::string::basic_string[abi:ne180100]<0>(&v27, "");
    if (siri::dialogengine::IsArrayType((std::string *)a3))
    {
      std::string::basic_string[abi:ne180100]<0>(&v26, (char *)siri::dialogengine::TYPE_ARRAY);
    }
    else if (*(char *)(a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v26, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
    }
    else
    {
      v26 = *(std::string *)a3;
    }
    siri::dialogengine::ObjectRegistry::GetObject((uint64_t)a2, (const std::string::value_type **)&v26.__r_.__value_.__l.__data_, &v24);
    if (v24)
    {
      siri::dialogengine::ParseVariableReference(&v20, *(const std::string **)a4);
      siri::dialogengine::ObjectSchema::GetProperty(v24, a2, (const void **)&v20.__r_.__value_.__l.__data_, 0, (siri::dialogengine::ObjectProperty *)&v17);
      if (v19)
      {
        if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v16, v18.__r_.__value_.__l.__data_, v18.__r_.__value_.__l.__size_);
        else
          v16 = v18;
        if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v27.__r_.__value_.__l.__data_);
        v27 = v16;
        if (v21)
        {
          siri::dialogengine::GetArrayElementType((uint64_t)&v27, &v16);
          if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v27.__r_.__value_.__l.__data_);
          v27 = v16;
        }
        if (a5)
          std::__optional_storage_base<siri::dialogengine::ObjectProperty,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<siri::dialogengine::ObjectProperty,false> const&>((siri::dialogengine::ObjectProperty *)a5, (siri::dialogengine::ObjectProperty *)&v17);
        if (v19)
          siri::dialogengine::ObjectProperty::~ObjectProperty((void **)&v17.__r_.__value_.__l.__data_);
      }
      if (v23 < 0)
        operator delete(v22);
      if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v20.__r_.__value_.__l.__data_);
    }
    size = HIBYTE(v27.__r_.__value_.__r.__words[2]);
    if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = v27.__r_.__value_.__l.__size_;
    if (size)
    {
      v11 = *(__int128 **)(a4 + 8);
      v12 = (__int128 *)(*(_QWORD *)a4 + 24);
      memset(&v17, 0, sizeof(v17));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string const*>>(&v17, v12, v11, 0xAAAAAAAAAAAAAAABLL * (((char *)v11 - (char *)v12) >> 3));
      siri::dialogengine::ResolveTypeRecursive(a1, a2, &v27, &v17, a5);
      v20.__r_.__value_.__r.__words[0] = (std::string::size_type)&v17;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(a1, siri::dialogengine::TYPE_UNKNOWN);
    }
    v13 = v25;
    if (v25)
    {
      p_shared_owners = (unint64_t *)&v25->__shared_owners_;
      do
        v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v26.__r_.__value_.__l.__data_);
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v27.__r_.__value_.__l.__data_);
  }
}

void sub_1BFC12CB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  uint64_t v43;

  if (a43)
    siri::dialogengine::ObjectProperty::~ObjectProperty(&a13);
  siri::dialogengine::VariableReference::~VariableReference((void **)(v43 - 184));
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](v43 - 128);
  if (*(char *)(v43 - 89) < 0)
    operator delete(*(void **)(v43 - 112));
  if (*(char *)(v43 - 57) < 0)
    operator delete(*(void **)(v43 - 80));
  _Unwind_Resume(a1);
}

void siri::dialogengine::VariableReference::~VariableReference(void **this)
{
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

uint64_t siri::dialogengine::IsPropertyValidForLocale(uint64_t a1, unsigned __int8 *a2)
{
  unsigned __int8 *v2;
  unsigned __int8 v4;
  uint64_t v5;
  __int128 v6;
  void **v7;
  uint64_t v8;
  int v10;
  unint64_t i;
  uint64_t j;
  const void **v14;
  char *v15;
  std::string v16;
  std::string __p;
  void *v18[2];
  char v19;
  void *v20[2];
  char v21;
  uint64_t v22;
  void **v23;
  uint64_t v24[3];
  uint64_t v25[3];
  uint64_t v26[3];
  uint64_t v27[3];
  uint64_t v28[3];
  _QWORD v29[3];
  std::string v30[2];
  std::string v31[2];
  uint64_t v32;

  v2 = a2;
  v32 = *MEMORY[0x1E0C80C00];
  if ((v4 & 1) == 0)
  {
    v2 = a2;
    if (v10)
    {
      std::string::basic_string[abi:ne180100]<0>(v18, siri::dialogengine::TYPE_STRING[0]);
      std::string::basic_string[abi:ne180100]<0>(&v22, "count");
      std::string::basic_string[abi:ne180100]<0>(v24, "number");
      std::string::basic_string[abi:ne180100]<0>(v25, "gender");
      std::string::basic_string[abi:ne180100]<0>(v26, "animacy");
      std::string::basic_string[abi:ne180100]<0>(v27, "case");
      std::string::basic_string[abi:ne180100]<0>(v28, "definiteness");
      std::string::basic_string[abi:ne180100]<0>(v29, "pos");
      std::set<std::string>::set[abi:ne180100]((uint64_t *)&__p, (const void **)&v22, 7);
      std::pair<std::string const,std::set<std::string>>::pair[abi:ne180100]<true,0>(v30, (__int128 *)v18, (const void ***)&__p);
      std::string::basic_string[abi:ne180100]<0>(&v16, "dialog.Array");
      std::string::basic_string[abi:ne180100]<0>(v20, "gender");
      std::set<std::string>::set[abi:ne180100]((uint64_t *)&v14, (const void **)v20, 1);
      std::pair<std::string const,std::set<std::string>>::pair[abi:ne180100]<true,0>(v31, (__int128 *)&v16, &v14);
      std::map<std::string,std::set<std::string>>::map[abi:ne180100]((uint64_t)&siri::dialogengine::IsPropertyValidForLocale(siri::dialogengine::Context *,std::string const&)::morphunProperties, (const void **)&v30[0].__r_.__value_.__l.__data_, 2);
      for (i = 48; i != -48; i -= 48)
        std::pair<std::string const,std::set<std::string> const>::~pair((uint64_t)&v30[i / 0x18]);
      std::__tree<std::string>::destroy((uint64_t)&v14, v15);
      if (v21 < 0)
        operator delete(v20[0]);
      if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v16.__r_.__value_.__l.__data_);
      std::__tree<std::string>::destroy((uint64_t)&__p, (char *)__p.__r_.__value_.__l.__size_);
      for (j = 0; j != -21; j -= 3)
      {
        if (SHIBYTE(v29[j + 2]) < 0)
          operator delete((void *)v29[j]);
      }
      if (v19 < 0)
        operator delete(v18[0]);
      __cxa_atexit((void (*)(void *))std::map<std::string,std::set<std::string>>::~map[abi:ne180100], &siri::dialogengine::IsPropertyValidForLocale(siri::dialogengine::Context *,std::string const&)::morphunProperties, &dword_1BF794000);
      v2 = a2;
    }
  }
  siri::dialogengine::StringSplit(v2, ".", &v22);
  v5 = (uint64_t)v23;
  if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)v23 - v22) >> 3) >= 2)
  {
    if (a1)
    {
      if (*((char *)v23 - 1) < 0)
      {
        std::string::__init_copy_ctor_external(v30, (const std::string::value_type *)*(v23 - 3), (std::string::size_type)*(v23 - 2));
        v5 = (uint64_t)v23;
      }
      else
      {
        v6 = *(_OWORD *)(v23 - 3);
        v30[0].__r_.__value_.__r.__words[2] = (std::string::size_type)*(v23 - 1);
        *(_OWORD *)&v30[0].__r_.__value_.__l.__data_ = v6;
      }
      v7 = (void **)(v5 - 24);
      if (*(char *)(v5 - 1) < 0)
        operator delete(*v7);
      v23 = v7;
      std::string::basic_string[abi:ne180100]<0>(&__p, ".");
      siri::dialogengine::StringJoinInternal<std::vector<std::string>>((uint64_t)v18, v22, (uint64_t)v23, (uint64_t)&__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      siri::dialogengine::ResolveType(0, a1, (uint64_t)v18, 0, (uint64_t)&__p);
      if (siri::dialogengine::IsArrayType(&__p))
      {
        std::string::basic_string[abi:ne180100]<0>(&v16, (char *)siri::dialogengine::TYPE_ARRAY);
      }
      else if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(&v16, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      }
      else
      {
        v16 = __p;
      }
      v8 = std::__tree<std::string>::find<std::string>((uint64_t)&siri::dialogengine::IsPropertyValidForLocale(siri::dialogengine::Context *,std::string const&)::morphunProperties, (const void **)&v16.__r_.__value_.__l.__data_);
      if ((_UNKNOWN *)v8 == &unk_1EF5835F8)
      {
        a1 = 1;
      }
      else
      {
        std::set<std::string>::set[abi:ne180100]((uint64_t *)&v14, (const void ***)(v8 + 56));
        a1 = &v15 == (char **)std::__tree<std::string>::find<std::string>((uint64_t)&v14, (const void **)&v30[0].__r_.__value_.__l.__data_)|| siri::dialogengine::IsValidFeatureValue((siri::dialogengine *)a1, (uint64_t)v30);
        std::__tree<std::string>::destroy((uint64_t)&v14, v15);
      }
      if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v16.__r_.__value_.__l.__data_);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (v19 < 0)
        operator delete(v18[0]);
      if (SHIBYTE(v30[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(v30[0].__r_.__value_.__l.__data_);
    }
  }
  else
  {
    a1 = 1;
  }
  v30[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v30);
  return a1;
}

void sub_1BFC131D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, char *a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,char *a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,char a38)
{
  uint64_t v38;
  uint64_t i;
  uint64_t v41;

  for (i = 48; i != -48; i -= 48)
    std::pair<std::string const,std::set<std::string> const>::~pair(v38 + i);
  std::__tree<std::string>::destroy((uint64_t)&a10, a11);
  if (a37 < 0)
    operator delete(__p);
  if (a18 < 0)
    operator delete(a13);
  std::__tree<std::string>::destroy((uint64_t)&a20, a21);
  v41 = 0;
  while (1)
  {
    if (*(&a38 + v41 + 167) < 0)
      operator delete(*(void **)(&a38 + v41 + 144));
    v41 -= 24;
    if (v41 == -168)
    {
      if (a31 < 0)
        operator delete(a26);
      _Unwind_Resume(a1);
    }
  }
}

void siri::dialogengine::ResolveValue(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  size_t v7;
  std::string *v13;
  const std::string::value_type *v14;
  std::string *v15;
  std::string::size_type size;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  int v21;
  const std::string::value_type *v22;
  std::string::size_type v23;
  std::string *v24;
  __int128 v25;
  std::string *v26;
  __int128 v27;
  int v28;
  const std::string::value_type *v29;
  std::string::size_type v30;
  std::string *v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  _BOOL4 IsArrayType;
  BOOL v38;
  __int128 v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  BOOL v46;
  char v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *p_shared_owners;
  unint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  void *v66[30];
  char v67;
  void *v68[2];
  char v69;
  std::string v70;
  std::string v71;
  uint64_t v72;
  std::__shared_weak_count *v73;
  std::string v74;
  uint64_t v75;
  void *__p;
  char v77;
  __int128 v78;
  std::string v79;
  uint64_t v80;
  std::__shared_weak_count *v81;
  char v82;
  char v83;
  std::string v84;
  std::string v85;
  std::string v86;
  std::string v87;
  std::string v88;
  __int128 v89;

  *(_QWORD *)&v89 = *MEMORY[0x1E0C80C00];
  if (*(char *)(a2 + 23) >= 0)
    v7 = *(unsigned __int8 *)(a2 + 23);
  else
    v7 = *(_QWORD *)(a2 + 8);
  if (a1 && v7)
  {
    v13 = &v88;
    std::string::basic_string[abi:ne180100]((uint64_t)&v88, v7 + 1);
    if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v13 = (std::string *)v88.__r_.__value_.__r.__words[0];
    if (*(char *)(a2 + 23) >= 0)
      v14 = (const std::string::value_type *)a2;
    else
      v14 = *(const std::string::value_type **)a2;
    memmove(v13, v14, v7);
    *(_WORD *)((char *)&v13->__r_.__value_.__l.__data_ + v7) = 35;
    std::to_string(&v84, a3);
    if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v15 = &v84;
    else
      v15 = (std::string *)v84.__r_.__value_.__r.__words[0];
    if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v84.__r_.__value_.__r.__words[2]);
    else
      size = v84.__r_.__value_.__l.__size_;
    v17 = std::string::append(&v88, (const std::string::value_type *)v15, size);
    v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v85.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v85.__r_.__value_.__l.__data_ = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    v19 = std::string::append(&v85, "#");
    v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v86.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v86.__r_.__value_.__l.__data_ = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    v21 = *(char *)(a4 + 23);
    if (v21 >= 0)
      v22 = (const std::string::value_type *)a4;
    else
      v22 = *(const std::string::value_type **)a4;
    if (v21 >= 0)
      v23 = *(unsigned __int8 *)(a4 + 23);
    else
      v23 = *(_QWORD *)(a4 + 8);
    v24 = std::string::append(&v86, v22, v23);
    v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    v74.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v74.__r_.__value_.__l.__data_ = v25;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    v26 = std::string::append(&v74, "#");
    v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
    v79.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v79.__r_.__value_.__l.__data_ = v27;
    v26->__r_.__value_.__l.__size_ = 0;
    v26->__r_.__value_.__r.__words[2] = 0;
    v26->__r_.__value_.__r.__words[0] = 0;
    v28 = *(char *)(a5 + 23);
    if (v28 >= 0)
      v29 = (const std::string::value_type *)a5;
    else
      v29 = *(const std::string::value_type **)a5;
    if (v28 >= 0)
      v30 = *(unsigned __int8 *)(a5 + 23);
    else
      v30 = *(_QWORD *)(a5 + 8);
    v31 = std::string::append(&v79, v29, v30);
    v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
    v87.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v87.__r_.__value_.__l.__data_ = v32;
    v31->__r_.__value_.__l.__size_ = 0;
    v31->__r_.__value_.__r.__words[2] = 0;
    v31->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v79.__r_.__value_.__l.__data_);
    if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v74.__r_.__value_.__l.__data_);
    if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v86.__r_.__value_.__l.__data_);
    if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v85.__r_.__value_.__l.__data_);
    if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v84.__r_.__value_.__l.__data_);
    if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v88.__r_.__value_.__l.__data_);
    v33 = std::__tree<std::string>::find<std::string>(a1 + 544, (const void **)&v87.__r_.__value_.__l.__data_);
    if (a1 + 552 == v33)
    {
      siri::dialogengine::StringSplit((unsigned __int8 *)a2, ".", &v86);
      if (v86.__r_.__value_.__r.__words[0] == v86.__r_.__value_.__l.__size_)
      {
        if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v79, v87.__r_.__value_.__l.__data_, v87.__r_.__value_.__l.__size_);
        else
          v79 = v87;
        v80 = 0;
        v81 = 0;
        std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::Variable>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::Variable>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::Variable>>>>::__emplace_unique_key_args<std::string,std::pair<std::string,std::shared_ptr<siri::dialogengine::Variable>>>((uint64_t **)(a1 + 544), (const void **)&v79.__r_.__value_.__l.__data_, (uint64_t)&v79);
        v49 = v81;
        if (v81)
        {
          p_shared_owners = (unint64_t *)&v81->__shared_owners_;
          do
            v51 = __ldaxr(p_shared_owners);
          while (__stlxr(v51 - 1, p_shared_owners));
          if (!v51)
          {
            ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
            std::__shared_weak_count::__release_weak(v49);
          }
        }
        if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v79.__r_.__value_.__l.__data_);
        *a6 = 0;
        a6[1] = 0;
      }
      else
      {
        v79.__r_.__value_.__s.__data_[0] = 0;
        v83 = 0;
        memset(&v85, 0, sizeof(v85));
        siri::dialogengine::ResolveLiteral(a2, &v78);
        if ((_QWORD)v78)
        {
          siri::dialogengine::GetLiteralType((std::string *)a2, &v74);
          if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v85.__r_.__value_.__l.__data_);
          v85 = v74;
          IsArrayType = siri::dialogengine::IsArrayType(&v85);
          v38 = IsArrayType;
          if (IsArrayType)
          {
            memset(&v74, 0, sizeof(v74));
          }
          else
          {
            if (*(char *)(a2 + 23) < 0)
              std::string::__init_copy_ctor_external(&v88, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
            else
              v88 = *(std::string *)a2;
            memset(&v74, 0, sizeof(v74));
            v84.__r_.__value_.__r.__words[0] = (std::string::size_type)&v74;
            v84.__r_.__value_.__s.__data_[8] = 0;
            v74.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
            v74.__r_.__value_.__l.__size_ = v74.__r_.__value_.__r.__words[0];
            v74.__r_.__value_.__r.__words[2] = v74.__r_.__value_.__r.__words[0] + 24;
            v74.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v74.__r_.__value_.__r.__words[2], (__int128 *)&v88, &v89, (std::string *)v74.__r_.__value_.__l.__data_);
          }
          std::vector<std::string>::__vdeallocate((std::vector<std::string> *)&v86);
          v86 = v74;
          memset(&v74, 0, sizeof(v74));
          v84.__r_.__value_.__r.__words[0] = (std::string::size_type)&v74;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v84);
          if (!v38 && SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v88.__r_.__value_.__l.__data_);
          v48 = v78;
          *(_BYTE *)(v78 + 65) = 0;
        }
        else
        {
          siri::dialogengine::ParseVariableReference(&v74, (const std::string *)v86.__r_.__value_.__l.__data_);
          siri::dialogengine::Context::FindVariable(&v88, a1, &v74);
          v39 = *(_OWORD *)&v88.__r_.__value_.__l.__data_;
          *(_OWORD *)&v88.__r_.__value_.__l.__data_ = 0uLL;
          v40 = (std::__shared_weak_count *)*((_QWORD *)&v78 + 1);
          v78 = v39;
          if (v40)
          {
            v41 = (unint64_t *)&v40->__shared_owners_;
            do
              v42 = __ldaxr(v41);
            while (__stlxr(v42 - 1, v41));
            if (!v42)
            {
              ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
              std::__shared_weak_count::__release_weak(v40);
            }
          }
          v43 = (std::__shared_weak_count *)v88.__r_.__value_.__l.__size_;
          if (v88.__r_.__value_.__l.__size_)
          {
            v44 = (unint64_t *)(v88.__r_.__value_.__l.__size_ + 8);
            do
              v45 = __ldaxr(v44);
            while (__stlxr(v45 - 1, v44));
            if (!v45)
            {
              ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
              std::__shared_weak_count::__release_weak(v43);
            }
          }
          siri::dialogengine::ResolveType((void **)&v79.__r_.__value_.__l.__data_, a1, (uint64_t)&v74, 0, (uint64_t)&v88);
          if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v85.__r_.__value_.__l.__data_);
          v85 = v88;
          if ((_QWORD)v78)
          {
            if (v83)
              v46 = v82 == 0;
            else
              v46 = 0;
            v47 = !v46;
            *(_BYTE *)(v78 + 65) = v47;
          }
          if (v77 < 0)
            operator delete(__p);
          if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v74.__r_.__value_.__l.__data_);
          v48 = v78;
        }
        v72 = v48;
        v73 = (std::__shared_weak_count *)*((_QWORD *)&v78 + 1);
        if (*((_QWORD *)&v78 + 1))
        {
          v52 = (unint64_t *)(*((_QWORD *)&v78 + 1) + 8);
          do
            v53 = __ldxr(v52);
          while (__stxr(v53 + 1, v52));
        }
        if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v71, v85.__r_.__value_.__l.__data_, v85.__r_.__value_.__l.__size_);
        else
          v71 = v85;
        memset(&v70, 0, sizeof(v70));
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v70, (__int128 *)v86.__r_.__value_.__l.__data_, (__int128 *)v86.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v86.__r_.__value_.__l.__size_ - v86.__r_.__value_.__r.__words[0]) >> 3));
        std::string::basic_string[abi:ne180100]<0>(v68, "");
        std::__optional_copy_base<siri::dialogengine::ObjectProperty,false>::__optional_copy_base[abi:ne180100]((siri::dialogengine::ObjectProperty *)v66, (const siri::dialogengine::ObjectProperty *)&v79);
        siri::dialogengine::ResolveValueRecursive(a6, (const char *)a1, &v72, (uint64_t)&v71, (uint64_t *)&v70, (uint64_t)v68, (uint64_t)v66, a3, (const std::string *)a4, a5);
        if (v67)
          siri::dialogengine::ObjectProperty::~ObjectProperty(v66);
        if (v69 < 0)
          operator delete(v68[0]);
        v74.__r_.__value_.__r.__words[0] = (std::string::size_type)&v70;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v74);
        if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v71.__r_.__value_.__l.__data_);
        v54 = v73;
        if (v73)
        {
          v55 = (unint64_t *)&v73->__shared_owners_;
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 - 1, v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v54);
          }
        }
        if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v74, v87.__r_.__value_.__l.__data_, v87.__r_.__value_.__l.__size_);
        else
          v74 = v87;
        v57 = (unint64_t *)a6[1];
        v75 = *a6;
        __p = v57;
        if (v57)
        {
          v58 = v57 + 1;
          do
            v59 = __ldxr(v58);
          while (__stxr(v59 + 1, v58));
        }
        std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::Variable>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::Variable>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::Variable>>>>::__emplace_unique_key_args<std::string,std::pair<std::string,std::shared_ptr<siri::dialogengine::Variable>>>((uint64_t **)(a1 + 544), (const void **)&v74.__r_.__value_.__l.__data_, (uint64_t)&v74);
        v60 = (std::__shared_weak_count *)__p;
        if (__p)
        {
          v61 = (unint64_t *)((char *)__p + 8);
          do
            v62 = __ldaxr(v61);
          while (__stlxr(v62 - 1, v61));
          if (!v62)
          {
            ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
            std::__shared_weak_count::__release_weak(v60);
          }
        }
        if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v74.__r_.__value_.__l.__data_);
        v63 = (std::__shared_weak_count *)*((_QWORD *)&v78 + 1);
        if (*((_QWORD *)&v78 + 1))
        {
          v64 = (unint64_t *)(*((_QWORD *)&v78 + 1) + 8);
          do
            v65 = __ldaxr(v64);
          while (__stlxr(v65 - 1, v64));
          if (!v65)
          {
            ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
            std::__shared_weak_count::__release_weak(v63);
          }
        }
        if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v85.__r_.__value_.__l.__data_);
        if (v83)
          siri::dialogengine::ObjectProperty::~ObjectProperty((void **)&v79.__r_.__value_.__l.__data_);
      }
      v79.__r_.__value_.__r.__words[0] = (std::string::size_type)&v86;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v79);
    }
    else
    {
      *a6 = *(_QWORD *)(v33 + 56);
      v34 = *(_QWORD *)(v33 + 64);
      a6[1] = v34;
      if (v34)
      {
        v35 = (unint64_t *)(v34 + 8);
        do
          v36 = __ldxr(v35);
        while (__stxr(v36 + 1, v35));
      }
    }
    if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v87.__r_.__value_.__l.__data_);
  }
  else
  {
    *a6 = 0;
    a6[1] = 0;
  }
}

void sub_1BFC13BAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *__p,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  void *a65;
  uint64_t v65;

  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a63);
  if (*(char *)(v65 - 201) < 0)
    operator delete(*(void **)(v65 - 224));
  if (LOBYTE(STACK[0x2B0]))
    siri::dialogengine::ObjectProperty::~ObjectProperty(&a65);
  a65 = (void *)(v65 - 192);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a65);
  if (*(char *)(v65 - 137) < 0)
    operator delete(*(void **)(v65 - 160));
  _Unwind_Resume(a1);
}

void sub_1BFC13D8C()
{
  JUMPOUT(0x1BFC13D84);
}

void std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::Variable>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::Variable>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::Variable>>>>::__emplace_unique_key_args<std::string,std::pair<std::string,std::shared_ptr<siri::dialogengine::Variable>>>(uint64_t **a1, const void **a2, uint64_t a3)
{
  uint64_t **v5;
  uint64_t **v6;
  _OWORD *v7;
  _QWORD v8[2];
  char v9;
  uint64_t v10;

  v5 = (uint64_t **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)a1, &v10, a2);
  if (!*v5)
  {
    v6 = v5;
    v7 = operator new(0x48uLL);
    v8[1] = a1 + 1;
    v7[2] = *(_OWORD *)a3;
    *((_QWORD *)v7 + 6) = *(_QWORD *)(a3 + 16);
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_OWORD *)((char *)v7 + 56) = *(_OWORD *)(a3 + 24);
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)(a3 + 24) = 0;
    *(_QWORD *)(a3 + 32) = 0;
    v9 = 1;
    std::__tree<std::string>::__insert_node_at(a1, v10, v6, (uint64_t *)v7);
    v8[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,void *>>>>::reset[abi:ne180100]((uint64_t)v8);
  }
}

void siri::dialogengine::ResolveValueRecursive(_QWORD *a1, const char *a2, _QWORD *a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8, const std::string *a9, uint64_t a10)
{
  char *v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  _QWORD *v22;
  std::__shared_weak_count *size;
  unint64_t *v24;
  unint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  _BOOL4 IsPrimitiveType;
  uint64_t v30;
  uint64_t v31;
  size_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  const char *v37;
  void *v38;
  int v39;
  _QWORD *v40;
  _QWORD *v41;
  std::string::size_type v42;
  unint64_t *v43;
  unint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  size_t v48;
  const void *v49;
  std::string::size_type v50;
  std::string::size_type v51;
  std::string::size_type v52;
  __int128 v53;
  std::string *v54;
  uint64_t v55;
  __int128 v56;
  _QWORD *v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::string *v61;
  uint64_t v62;
  __int128 v63;
  _QWORD *v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  BOOL v68;
  char v69;
  char v70;
  char *v71;
  size_t v72;
  const char *v73;
  void *v74;
  int v75;
  const std::string *v76;
  uint64_t v77;
  const char *v78;
  int v79;
  uint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *p_shared_owners;
  unint64_t v83;
  unint64_t *v84;
  unint64_t v85;
  std::string::size_type v86;
  unint64_t *v87;
  unint64_t v88;
  __int128 *v89;
  __int128 *v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  void *v97;
  uint64_t v98;
  unint64_t *v99;
  unint64_t v100;
  std::string::size_type v101;
  unint64_t *v102;
  unint64_t v103;
  std::string *v104;
  __int128 v105;
  int v106;
  void *v107;
  std::string::size_type v108;
  std::string::size_type v109;
  unint64_t *v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  std::string::size_type v114;
  unint64_t *v115;
  unint64_t v116;
  double *v117;
  char v118;
  double *v119;
  int v120;
  unint64_t *v121;
  unint64_t v122;
  __int128 *v123;
  __int128 *v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  void *v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  uint64_t v138;
  __int128 v139;
  unint64_t *v140;
  unint64_t v141;
  std::string *v142;
  __int128 v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  std::string *v150;
  __int128 v151;
  uint64_t v152;
  _QWORD *v153;
  __int128 *v154;
  __int128 *v155;
  unint64_t *v156;
  uint64_t v157;
  siri::dialogengine::Context *v158;
  uint64_t v159;
  void *v160[30];
  char v161;
  std::string v162;
  std::string v163;
  std::string v164;
  double *v165;
  std::__shared_weak_count *v166;
  std::string v167;
  void *v168;
  char v169;
  std::string __p;
  void *v171;
  void *v172;
  char v173;
  void *v174;
  char v175;
  void *v176;
  char v177;
  std::string v178;
  std::string v179;
  std::string v180;
  unsigned __int8 v181;
  void *v182[30];
  char v183;
  std::string v184;
  std::string v185;
  std::string v186;
  __int128 v187;
  void *v188[30];
  char v189;
  std::string v190;
  std::string v191;
  std::string v192;
  __int128 v193;
  _QWORD v194[2];
  void *v195[30];
  char v196;
  std::string v197;
  std::string v198;
  std::string v199;
  __int128 v200;
  _QWORD v201[2];
  std::string v202;
  double *v203;
  std::__shared_weak_count *v204;
  std::string __str;
  std::string v206;
  std::string v207;

  v18 = (char *)*a3;
  if (*a3)
  {
    v19 = *a5;
    goto LABEL_15;
  }
  if (!siri::dialogengine::IsPrimitiveType((const void **)a4)
    && !siri::dialogengine::IsArrayType((std::string *)a4)
    && 0xAAAAAAAAAAAAAAABLL * ((a5[1] - *a5) >> 3) >= 2)
  {
    v20 = a7;
    v21 = a2;
    v22 = (_QWORD *)operator new();
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    siri::dialogengine::VariableObject::VariableObject(v22, &__p);
    std::shared_ptr<siri::dialogengine::Variable>::shared_ptr[abi:ne180100]<siri::dialogengine::VariableObject,void>(&v167, (uint64_t)v22);
    std::shared_ptr<siri::dialogengine::JSONValue>::operator=[abi:ne180100]((uint64_t)a3, (__int128 *)&v167);
    size = (std::__shared_weak_count *)v167.__r_.__value_.__l.__size_;
    if (v167.__r_.__value_.__l.__size_)
    {
      v24 = (unint64_t *)(v167.__r_.__value_.__l.__size_ + 8);
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    a2 = v21;
    a7 = v20;
  }
  v18 = (char *)*a3;
  v19 = *a5;
  if (*a3)
  {
LABEL_15:
    if (v19 == a5[1])
    {
      v28 = a3[1];
      *a1 = v18;
      a1[1] = v28;
LABEL_206:
      *a3 = 0;
      a3[1] = 0;
      return;
    }
    v26 = *(char *)(a4 + 23);
    if (v26 < 0)
      v27 = *(_QWORD *)(a4 + 8);
    else
      v27 = *(unsigned __int8 *)(a4 + 23);
    if (v27)
    {
LABEL_25:
      if (v18[55] < 0)
        std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)v18 + 4), *((_QWORD *)v18 + 5));
      else
        __p = *(std::string *)(v18 + 32);
      v159 = a4;
      IsPrimitiveType = siri::dialogengine::IsPrimitiveType((const void **)&__p.__r_.__value_.__l.__data_);
      v30 = a10;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (IsPrimitiveType)
      {
        siri::dialogengine::PushKeyPath(&__p, a6, *a5);
        if (*(char *)(a6 + 23) < 0)
          operator delete(*(void **)a6);
        *(std::string *)a6 = __p;
        if (*(_BYTE *)(a7 + 240))
        {
          if (*(char *)(a7 + 183) < 0)
            std::string::__init_copy_ctor_external(&v167, *(const std::string::value_type **)(a7 + 160), *(_QWORD *)(a7 + 168));
          else
            v167 = *(std::string *)(a7 + 160);
        }
        else
        {
          std::string::basic_string[abi:ne180100]<0>(&v167, "");
        }
        v47 = *(unsigned __int8 *)(a10 + 23);
        if ((v47 & 0x80u) != 0)
          v47 = *(_QWORD *)(a10 + 8);
        if (v47)
          std::string::operator=(&v167, (const std::string *)a10);
        v48 = strlen(siri::dialogengine::TYPE_STRING[0]);
        v49 = (const void *)v159;
        if (*(char *)(v159 + 23) < 0)
        {
          if (v48 != *(_QWORD *)(v159 + 8))
            goto LABEL_208;
          if (v48 == -1)
            std::string::__throw_out_of_range[abi:ne180100]();
          v49 = *(const void **)v159;
        }
        else if (v48 != *(unsigned __int8 *)(v159 + 23))
        {
          goto LABEL_208;
        }
        if (memcmp(v49, siri::dialogengine::TYPE_STRING[0], v48))
          goto LABEL_208;
        v50 = HIBYTE(v167.__r_.__value_.__r.__words[2]);
        if ((v167.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v50 = v167.__r_.__value_.__l.__size_;
        if (!v50)
        {
LABEL_208:
          if (0xAAAAAAAAAAAAAAABLL * ((a5[1] - *a5) >> 3) > 1)
          {
            v80 = *a5 + 24;
            v81 = (std::__shared_weak_count *)a3[1];
            v201[0] = *a3;
            v201[1] = v81;
            if (v81)
            {
              p_shared_owners = (unint64_t *)&v81->__shared_owners_;
              do
                v83 = __ldxr(p_shared_owners);
              while (__stxr(v83 + 1, p_shared_owners));
            }
            siri::dialogengine::ConceptCallbacks::InvokePrimitiveMethod((uint64_t)a2, (const void **)v159, v80, v201, &__p);
            if (v81)
            {
              v84 = (unint64_t *)&v81->__shared_owners_;
              do
                v85 = __ldaxr(v84);
              while (__stlxr(v85 - 1, v84));
              if (!v85)
              {
                ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
                std::__shared_weak_count::__release_weak(v81);
              }
            }
            v86 = __p.__r_.__value_.__r.__words[0];
            if (__p.__r_.__value_.__r.__words[0])
            {
              v200 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
              if (__p.__r_.__value_.__l.__size_)
              {
                v87 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
                do
                  v88 = __ldxr(v87);
                while (__stxr(v88 + 1, v87));
              }
              if (*(char *)(v86 + 55) < 0)
                std::string::__init_copy_ctor_external(&v199, *(const std::string::value_type **)(v86 + 32), *(_QWORD *)(v86 + 40));
              else
                v199 = *(std::string *)(v86 + 32);
              v89 = (__int128 *)a5[1];
              v90 = (__int128 *)(*a5 + 24);
              memset(&v198, 0, sizeof(v198));
              std::vector<std::string>::__init_with_size[abi:ne180100]<std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string const*>>(&v198, v90, v89, 0xAAAAAAAAAAAAAAABLL * (((char *)v89 - (char *)v90) >> 3));
              if (*(char *)(a6 + 23) < 0)
                std::string::__init_copy_ctor_external(&v197, *(const std::string::value_type **)a6, *(_QWORD *)(a6 + 8));
              else
                v197 = *(std::string *)a6;
              std::__optional_copy_base<siri::dialogengine::ObjectProperty,false>::__optional_copy_base[abi:ne180100]((siri::dialogengine::ObjectProperty *)v195, (const siri::dialogengine::ObjectProperty *)a7);
              siri::dialogengine::ResolveValueRecursive(a1, a2, &v200, &v199, &v198, &v197, v195, a8, a9, v30);
              if (v196)
                siri::dialogengine::ObjectProperty::~ObjectProperty(v195);
              if (SHIBYTE(v197.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v197.__r_.__value_.__l.__data_);
              v207.__r_.__value_.__r.__words[0] = (std::string::size_type)&v198;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v207);
              if (SHIBYTE(v199.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v199.__r_.__value_.__l.__data_);
              v91 = (std::__shared_weak_count *)*((_QWORD *)&v200 + 1);
              if (*((_QWORD *)&v200 + 1))
              {
                v92 = (unint64_t *)(*((_QWORD *)&v200 + 1) + 8);
                do
                  v93 = __ldaxr(v92);
                while (__stlxr(v93 - 1, v92));
                if (!v93)
                {
                  ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
                  std::__shared_weak_count::__release_weak(v91);
                }
              }
            }
            else
            {
              *(_OWORD *)a1 = *(_OWORD *)a3;
              *a3 = 0;
              a3[1] = 0;
            }
            v94 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
            if (__p.__r_.__value_.__l.__size_)
            {
              v95 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
              do
                v96 = __ldaxr(v95);
              while (__stlxr(v96 - 1, v95));
              if (!v96)
              {
                ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
                std::__shared_weak_count::__release_weak(v94);
              }
            }
          }
          else
          {
            *(_OWORD *)a1 = *(_OWORD *)a3;
            *a3 = 0;
            a3[1] = 0;
          }
          if (SHIBYTE(v167.__r_.__value_.__r.__words[2]) < 0)
          {
            v97 = (void *)v167.__r_.__value_.__r.__words[0];
LABEL_247:
            operator delete(v97);
            return;
          }
          return;
        }
        v158 = (siri::dialogengine::Context *)a2;
        siri::dialogengine::StringSplit((unsigned __int8 *)&v167, "|", &v207);
        v51 = v207.__r_.__value_.__l.__size_;
        v52 = v207.__r_.__value_.__r.__words[0];
        if (v207.__r_.__value_.__r.__words[0] == v207.__r_.__value_.__l.__size_)
        {
LABEL_207:
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v207;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
          a2 = (const char *)v158;
          v30 = a10;
          goto LABEL_208;
        }
        while (1)
        {
          if (*(char *)(v52 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v206, *(const std::string::value_type **)v52, *(_QWORD *)(v52 + 8));
          }
          else
          {
            v53 = *(_OWORD *)v52;
            v206.__r_.__value_.__r.__words[2] = *(_QWORD *)(v52 + 16);
            *(_OWORD *)&v206.__r_.__value_.__l.__data_ = v53;
          }
          if ((_DWORD)a8)
          {
            (*(void (**)(std::string *__return_ptr))(*(_QWORD *)*a3 + 48))(&__p);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&__str, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
            else
              __str = __p;
            std::string::operator=(&v178, &__str);
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__str.__r_.__value_.__l.__data_);
            std::string::operator=(&v179, &v206);
            std::string::operator=(&v180, a9);
            v54 = (std::string *)operator new();
            v55 = *a3;
            if (*(char *)(*a3 + 31) < 0)
            {
              std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)(v55 + 8), *(_QWORD *)(v55 + 16));
            }
            else
            {
              v56 = *(_OWORD *)(v55 + 8);
              __str.__r_.__value_.__r.__words[2] = *(_QWORD *)(v55 + 24);
              *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v56;
            }
            siri::dialogengine::VariableString::VariableString(v54, &__str, (const siri::dialogengine::SpeakableString *)&__p);
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__str.__r_.__value_.__l.__data_);
            v54[2].__r_.__value_.__l.__size_ = *(_QWORD *)(*a3 + 56);
            __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v54;
            v57 = (_QWORD *)operator new();
            *v57 = &off_1E7937C00;
            v57[1] = 0;
            v57[2] = 0;
            v57[3] = v54;
            __str.__r_.__value_.__l.__size_ = (std::string::size_type)v57;
            std::shared_ptr<siri::dialogengine::JSONValue>::operator=[abi:ne180100]((uint64_t)a3, (__int128 *)&__str);
            v58 = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
            if (__str.__r_.__value_.__l.__size_)
            {
              v59 = (unint64_t *)(__str.__r_.__value_.__l.__size_ + 8);
              do
                v60 = __ldaxr(v59);
              while (__stlxr(v60 - 1, v59));
              if (!v60)
              {
                ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
                std::__shared_weak_count::__release_weak(v58);
              }
            }
            if (SHIBYTE(v180.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v180.__r_.__value_.__l.__data_);
            if (SHIBYTE(v179.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v179.__r_.__value_.__l.__data_);
            if (SHIBYTE(v178.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v178.__r_.__value_.__l.__data_);
            if (v177 < 0)
              operator delete(v176);
            if (v175 < 0)
              operator delete(v174);
            if (v173 < 0)
              operator delete(v171);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
          }
          else
          {
            (*(void (**)(std::string *__return_ptr))(*(_QWORD *)*a3 + 48))(&__p);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&__str, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
            else
              __str = __p;
            if (SHIBYTE(v180.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v180.__r_.__value_.__l.__data_);
            if (SHIBYTE(v179.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v179.__r_.__value_.__l.__data_);
            if (SHIBYTE(v178.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v178.__r_.__value_.__l.__data_);
            if (v177 < 0)
              operator delete(v176);
            if (v175 < 0)
              operator delete(v174);
            if (v173 < 0)
              operator delete(v171);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            siri::dialogengine::SemanticFeatureConstraint::FromString(&v203, v158, a9);
            siri::dialogengine::ApplySemanticConcept(v158, &v206, &__str, (__int128 **)&v203, &__p);
            v61 = (std::string *)operator new();
            v62 = *a3;
            if (*(char *)(*a3 + 31) < 0)
            {
              std::string::__init_copy_ctor_external(&v202, *(const std::string::value_type **)(v62 + 8), *(_QWORD *)(v62 + 16));
            }
            else
            {
              v63 = *(_OWORD *)(v62 + 8);
              v202.__r_.__value_.__r.__words[2] = *(_QWORD *)(v62 + 24);
              *(_OWORD *)&v202.__r_.__value_.__l.__data_ = v63;
            }
            siri::dialogengine::VariableString::VariableString(v61, &v202, (const siri::dialogengine::SpeakableString *)&__p);
            if (SHIBYTE(v202.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v202.__r_.__value_.__l.__data_);
            v61[2].__r_.__value_.__l.__size_ = *(_QWORD *)(*a3 + 56);
            v202.__r_.__value_.__r.__words[0] = (std::string::size_type)v61;
            v64 = (_QWORD *)operator new();
            *v64 = &off_1E7937C00;
            v64[1] = 0;
            v64[2] = 0;
            v64[3] = v61;
            v202.__r_.__value_.__l.__size_ = (std::string::size_type)v64;
            std::shared_ptr<siri::dialogengine::JSONValue>::operator=[abi:ne180100]((uint64_t)a3, (__int128 *)&v202);
            v65 = (std::__shared_weak_count *)v202.__r_.__value_.__l.__size_;
            if (v202.__r_.__value_.__l.__size_)
            {
              v66 = (unint64_t *)(v202.__r_.__value_.__l.__size_ + 8);
              do
                v67 = __ldaxr(v66);
              while (__stlxr(v67 - 1, v66));
              if (!v67)
              {
                ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
                std::__shared_weak_count::__release_weak(v65);
              }
            }
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&v202, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
            else
              v202 = __p;
            v68 = siri::dialogengine::StringsEqual((uint64_t)&v202, (uint64_t)&__str);
            if (SHIBYTE(v202.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v202.__r_.__value_.__l.__data_);
            if (SHIBYTE(v180.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v180.__r_.__value_.__l.__data_);
            if (SHIBYTE(v179.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v179.__r_.__value_.__l.__data_);
            if (SHIBYTE(v178.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v178.__r_.__value_.__l.__data_);
            if (v177 < 0)
              operator delete(v176);
            if (v175 < 0)
              operator delete(v174);
            if (v173 < 0)
              operator delete(v171);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v203;
            std::vector<siri::dialogengine::SemanticFeatureConstraint>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(__str.__r_.__value_.__l.__data_);
              if (!v68)
              {
LABEL_172:
                v69 = 1;
                goto LABEL_164;
              }
            }
            else if (!v68)
            {
              goto LABEL_172;
            }
          }
          v69 = 0;
LABEL_164:
          if (SHIBYTE(v206.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v206.__r_.__value_.__l.__data_);
          v52 += 24;
          if (v52 == v51)
            v70 = 1;
          else
            v70 = v69;
          if ((v70 & 1) != 0)
            goto LABEL_207;
        }
      }
      v31 = *a3;
      if (*(char *)(*a3 + 55) < 0)
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v31 + 32), *(_QWORD *)(v31 + 40));
      else
        __p = *(std::string *)(v31 + 32);
      v32 = strlen((const char *)siri::dialogengine::TYPE_ARRAY);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        if (v32 == __p.__r_.__value_.__l.__size_)
        {
          if (v32 == -1)
            std::string::__throw_out_of_range[abi:ne180100]();
          v33 = a6;
          v34 = a1;
          v35 = a7;
          v36 = a8;
          v37 = a2;
          v38 = (void *)__p.__r_.__value_.__r.__words[0];
          v39 = memcmp(__p.__r_.__value_.__l.__data_, (const void *)siri::dialogengine::TYPE_ARRAY, v32);
          operator delete(v38);
          a2 = v37;
          a8 = v36;
          a7 = v35;
          a1 = v34;
          a6 = v33;
          if (!v39)
          {
LABEL_51:
            if (*a3)
            {
              if (v40)
              {
                v41 = v40;
                v157 = (uint64_t)a2;
                v42 = a3[1];
                v206.__r_.__value_.__r.__words[0] = (std::string::size_type)v40;
                v206.__r_.__value_.__l.__size_ = v42;
                if (v42)
                {
                  v43 = (unint64_t *)(v42 + 8);
                  do
                    v44 = __ldxr(v43);
                  while (__stxr(v44 + 1, v43));
                }
                siri::dialogengine::ParseVariableReference(&__p, (const std::string *)*a5);
                if (!(_BYTE)v171)
                {
                  if (0xAAAAAAAAAAAAAAABLL * ((a5[1] - *a5) >> 3) < 2)
                  {
                    *(_OWORD *)a1 = *(_OWORD *)a3;
                    *a3 = 0;
                    a3[1] = 0;
                  }
                  else
                  {
                    std::string::basic_string[abi:ne180100]<0>(&v167, (char *)siri::dialogengine::TYPE_ARRAY);
                    v98 = *a5 + 24;
                    v194[0] = v41;
                    v194[1] = v42;
                    if (v42)
                    {
                      v99 = (unint64_t *)(v42 + 8);
                      do
                        v100 = __ldxr(v99);
                      while (__stxr(v100 + 1, v99));
                    }
                    siri::dialogengine::ConceptCallbacks::InvokePrimitiveMethod(v157, (const void **)&v167.__r_.__value_.__l.__data_, v98, v194, &v207);
                    std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)v194);
                    if (SHIBYTE(v167.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v167.__r_.__value_.__l.__data_);
                    v101 = v207.__r_.__value_.__r.__words[0];
                    if (v207.__r_.__value_.__r.__words[0])
                    {
                      v193 = *(_OWORD *)&v207.__r_.__value_.__l.__data_;
                      if (v207.__r_.__value_.__l.__size_)
                      {
                        v102 = (unint64_t *)(v207.__r_.__value_.__l.__size_ + 8);
                        do
                          v103 = __ldxr(v102);
                        while (__stxr(v103 + 1, v102));
                      }
                      if (*(char *)(v101 + 55) < 0)
                        std::string::__init_copy_ctor_external(&v192, *(const std::string::value_type **)(v101 + 32), *(_QWORD *)(v101 + 40));
                      else
                        v192 = *(std::string *)(v101 + 32);
                      v154 = (__int128 *)a5[1];
                      v155 = (__int128 *)(*a5 + 24);
                      memset(&v191, 0, sizeof(v191));
                      std::vector<std::string>::__init_with_size[abi:ne180100]<std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string const*>>(&v191, v155, v154, 0xAAAAAAAAAAAAAAABLL * (((char *)v154 - (char *)v155) >> 3));
                      if (*(char *)(a6 + 23) < 0)
                        std::string::__init_copy_ctor_external(&v190, *(const std::string::value_type **)a6, *(_QWORD *)(a6 + 8));
                      else
                        v190 = *(std::string *)a6;
                      std::__optional_copy_base<siri::dialogengine::ObjectProperty,false>::__optional_copy_base[abi:ne180100]((siri::dialogengine::ObjectProperty *)v188, (const siri::dialogengine::ObjectProperty *)a7);
                      siri::dialogengine::ResolveValueRecursive(a1, v157, &v193, &v192, &v191, &v190, v188, a8, a9, a10);
                      if (v189)
                        siri::dialogengine::ObjectProperty::~ObjectProperty(v188);
                      if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(v190.__r_.__value_.__l.__data_);
                      v167.__r_.__value_.__r.__words[0] = (std::string::size_type)&v191;
                      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v167);
                      if (SHIBYTE(v192.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(v192.__r_.__value_.__l.__data_);
                      std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&v193);
                    }
                    else
                    {
                      *(_OWORD *)a1 = *(_OWORD *)a3;
                      *a3 = 0;
                      a3[1] = 0;
                    }
                    std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&v207);
                  }
                  goto LABEL_400;
                }
                std::string::basic_string[abi:ne180100]<0>(&v167, "");
                std::string::basic_string[abi:ne180100]<0>(&v207, "");
                siri::dialogengine::ResolveValue(&__str, v157, &v172, 1, &v167, &v207);
                if (SHIBYTE(v207.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v207.__r_.__value_.__l.__data_);
                if (SHIBYTE(v167.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v167.__r_.__value_.__l.__data_);
                std::dynamic_pointer_cast[abi:ne180100]<siri::dialogengine::VariableNumber,siri::dialogengine::Variable>(&v203, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
                if (!v203)
                {
                  std::operator+<char>();
                  v104 = std::string::append(&v207, "'");
                  v105 = *(_OWORD *)&v104->__r_.__value_.__l.__data_;
                  v167.__r_.__value_.__r.__words[2] = v104->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v167.__r_.__value_.__l.__data_ = v105;
                  v104->__r_.__value_.__l.__size_ = 0;
                  v104->__r_.__value_.__r.__words[2] = 0;
                  v104->__r_.__value_.__r.__words[0] = 0;
                  siri::dialogengine::Log::LogWithLevel((uint64_t)&v167, 3u);
LABEL_349:
                  if (SHIBYTE(v167.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v167.__r_.__value_.__l.__data_);
                  if (SHIBYTE(v207.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v207.__r_.__value_.__l.__data_);
                  *a1 = 0;
                  a1[1] = 0;
                  goto LABEL_354;
                }
                v45 = (int)v203[9];
                if (v45 < 0)
                {
                  v46 = (v41[10] - v41[9]) >> 4;
                  v45 += v46;
                  if (v45 < 0)
                  {
LABEL_348:
                    std::to_string(&v207, v45);
                    v142 = std::string::insert(&v207, 0, "Out-of-bounds array index: ");
                    v143 = *(_OWORD *)&v142->__r_.__value_.__l.__data_;
                    v167.__r_.__value_.__r.__words[2] = v142->__r_.__value_.__r.__words[2];
                    *(_OWORD *)&v167.__r_.__value_.__l.__data_ = v143;
                    v142->__r_.__value_.__l.__size_ = 0;
                    v142->__r_.__value_.__r.__words[2] = 0;
                    v142->__r_.__value_.__r.__words[0] = 0;
                    siri::dialogengine::Log::LogWithLevel((uint64_t)&v167, 3u);
                    goto LABEL_349;
                  }
                }
                else
                {
                  v46 = (v41[10] - v41[9]) >> 4;
                }
                if (v45 < (int)v46)
                {
                  siri::dialogengine::GetArrayElementType(v159, &v167);
                  v138 = v41[9];
                  if (v45 >= (unint64_t)((v41[10] - v138) >> 4))
                  {
                    v187 = 0uLL;
                  }
                  else
                  {
                    v139 = *(_OWORD *)(v138 + 16 * v45);
                    v187 = v139;
                    if (*((_QWORD *)&v139 + 1))
                    {
                      v140 = (unint64_t *)(*((_QWORD *)&v139 + 1) + 8);
                      do
                        v141 = __ldxr(v140);
                      while (__stxr(v141 + 1, v140));
                    }
                  }
                  if (SHIBYTE(v167.__r_.__value_.__r.__words[2]) < 0)
                    std::string::__init_copy_ctor_external(&v186, v167.__r_.__value_.__l.__data_, v167.__r_.__value_.__l.__size_);
                  else
                    v186 = v167;
                  memset(&v185, 0, sizeof(v185));
                  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v185, (__int128 *)*a5, (__int128 *)a5[1], 0xAAAAAAAAAAAAAAABLL * ((a5[1] - *a5) >> 3));
                  if (*(char *)(a6 + 23) < 0)
                    std::string::__init_copy_ctor_external(&v184, *(const std::string::value_type **)a6, *(_QWORD *)(a6 + 8));
                  else
                    v184 = *(std::string *)a6;
                  std::__optional_copy_base<siri::dialogengine::ObjectProperty,false>::__optional_copy_base[abi:ne180100]((siri::dialogengine::ObjectProperty *)v182, (const siri::dialogengine::ObjectProperty *)a7);
                  siri::dialogengine::ResolveValueRecursive(a1, v157, &v187, &v186, &v185, &v184, v182, a8, a9, a10);
                  if (v183)
                    siri::dialogengine::ObjectProperty::~ObjectProperty(v182);
                  if (SHIBYTE(v184.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v184.__r_.__value_.__l.__data_);
                  v207.__r_.__value_.__r.__words[0] = (std::string::size_type)&v185;
                  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v207);
                  if (SHIBYTE(v186.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v186.__r_.__value_.__l.__data_);
                  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&v187);
                  if (SHIBYTE(v167.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v167.__r_.__value_.__l.__data_);
LABEL_354:
                  v144 = v204;
                  if (v204)
                  {
                    v145 = (unint64_t *)&v204->__shared_owners_;
                    do
                      v146 = __ldaxr(v145);
                    while (__stlxr(v146 - 1, v145));
                    if (!v146)
                    {
                      ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
                      std::__shared_weak_count::__release_weak(v144);
                    }
                  }
                  v147 = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
                  if (__str.__r_.__value_.__l.__size_)
                  {
                    v148 = (unint64_t *)(__str.__r_.__value_.__l.__size_ + 8);
                    do
                      v149 = __ldaxr(v148);
                    while (__stlxr(v149 - 1, v148));
                    if (!v149)
                    {
                      ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
                      std::__shared_weak_count::__release_weak(v147);
                    }
                  }
LABEL_400:
                  if (SHIBYTE(v174) < 0)
                    operator delete(v172);
                  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(__p.__r_.__value_.__l.__data_);
                  v135 = (std::__shared_weak_count *)v206.__r_.__value_.__l.__size_;
                  if (!v206.__r_.__value_.__l.__size_)
                    return;
                  v156 = (unint64_t *)(v206.__r_.__value_.__l.__size_ + 8);
                  do
                    v137 = __ldaxr(v156);
                  while (__stlxr(v137 - 1, v156));
LABEL_407:
                  if (!v137)
                  {
                    ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
                    std::__shared_weak_count::__release_weak(v135);
                  }
                  return;
                }
                goto LABEL_348;
              }
            }
            goto LABEL_205;
          }
        }
        else
        {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      else if (v32 == HIBYTE(__p.__r_.__value_.__r.__words[2])
             && !memcmp(&__p, (const void *)siri::dialogengine::TYPE_ARRAY, v32))
      {
        goto LABEL_51;
      }
      v71 = (char *)*a3;
      if (*(char *)(*a3 + 55) < 0)
        std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)v71 + 4), *((_QWORD *)v71 + 5));
      else
        __p = *(std::string *)(v71 + 32);
      v72 = strlen((const char *)siri::dialogengine::TYPE_OBJECT);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        if (v72 == __p.__r_.__value_.__l.__size_)
        {
          if (v72 == -1)
            std::string::__throw_out_of_range[abi:ne180100]();
          v73 = a2;
          v74 = (void *)__p.__r_.__value_.__r.__words[0];
          v75 = memcmp(__p.__r_.__value_.__l.__data_, (const void *)siri::dialogengine::TYPE_OBJECT, v72);
          operator delete(v74);
          a2 = v73;
          if (!v75)
          {
LABEL_184:
            siri::dialogengine::PushKeyPath(&__p, a6, *a5);
            if (*(char *)(a6 + 23) < 0)
              operator delete(*(void **)a6);
            *(std::string *)a6 = __p;
            siri::dialogengine::ObjectRegistry::GetObject((uint64_t)a2, (const std::string::value_type **)v159, (uint64_t *)&v206);
            v76 = (const std::string *)*a5;
            if (a5[1] - *a5 == 24)
            {
              v77 = v206.__r_.__value_.__r.__words[0];
              if (!v206.__r_.__value_.__r.__words[0])
                goto LABEL_252;
              v78 = a2;
              std::string::basic_string[abi:ne180100]<0>(&v167, (char *)siri::dialogengine::TO_STRING);
              siri::dialogengine::ObjectSchema::GetProperty(v77, a2, (const void **)&v167.__r_.__value_.__l.__data_, 0, (siri::dialogengine::ObjectProperty *)&__p);
              v79 = v181;
              if (v181)
                siri::dialogengine::ObjectProperty::~ObjectProperty((void **)&__p.__r_.__value_.__l.__data_);
              if (SHIBYTE(v167.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v167.__r_.__value_.__l.__data_);
              if (!v79)
              {
LABEL_252:
                *(_OWORD *)a1 = *(_OWORD *)a3;
                *a3 = 0;
                a3[1] = 0;
LABEL_336:
                v135 = (std::__shared_weak_count *)v206.__r_.__value_.__l.__size_;
                if (!v206.__r_.__value_.__l.__size_)
                  return;
                v136 = (unint64_t *)(v206.__r_.__value_.__l.__size_ + 8);
                do
                  v137 = __ldaxr(v136);
                while (__stlxr(v137 - 1, v136));
                goto LABEL_407;
              }
              a2 = v78;
              if (!siri::dialogengine::IsBuiltinType((std::string *)v159) && !*((_QWORD *)v78 + 99))
              {
                std::operator+<char>();
                v150 = std::string::append(&v167, ".toString' call. Returning empty string.");
                v151 = *(_OWORD *)&v150->__r_.__value_.__l.__data_;
                __p.__r_.__value_.__r.__words[2] = v150->__r_.__value_.__r.__words[2];
                *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v151;
                v150->__r_.__value_.__l.__size_ = 0;
                v150->__r_.__value_.__r.__words[2] = 0;
                v150->__r_.__value_.__r.__words[0] = 0;
                siri::dialogengine::Log::LogWithLevel((uint64_t)&__p, 3u);
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__p.__r_.__value_.__l.__data_);
                if (SHIBYTE(v167.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v167.__r_.__value_.__l.__data_);
                v152 = operator new();
                std::string::basic_string[abi:ne180100]<0>(&__p, "");
                std::string::basic_string[abi:ne180100]<0>(&v167, "");
                siri::dialogengine::VariableString::VariableString(v152, &__p, (uint64_t)&v167);
                v153 = std::shared_ptr<siri::dialogengine::VariableString>::shared_ptr[abi:ne180100]<siri::dialogengine::VariableString,void>(&v207, v152);
                *(_OWORD *)a1 = *(_OWORD *)&v207.__r_.__value_.__l.__data_;
                *(_OWORD *)&v207.__r_.__value_.__l.__data_ = 0uLL;
                std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)v153);
                if (SHIBYTE(v167.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v167.__r_.__value_.__l.__data_);
                if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  goto LABEL_336;
                v134 = (void *)__p.__r_.__value_.__r.__words[0];
LABEL_335:
                operator delete(v134);
                goto LABEL_336;
              }
              std::string::basic_string[abi:ne180100]<0>(&__p, (char *)siri::dialogengine::TO_STRING);
              std::vector<std::string>::push_back[abi:ne180100]((std::vector<std::string> *)a5, (__int128 *)&__p);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p.__r_.__value_.__l.__data_);
              v76 = (const std::string *)*a5;
            }
            siri::dialogengine::ParseVariableReference(&v167, v76 + 1);
            std::string::basic_string[abi:ne180100]<0>(&v207, "");
            if (!v206.__r_.__value_.__r.__words[0])
              goto LABEL_273;
            siri::dialogengine::ObjectSchema::GetProperty((uint64_t)v206.__r_.__value_.__l.__data_, a2, (const void **)&v167.__r_.__value_.__l.__data_, 0, (siri::dialogengine::ObjectProperty *)&__p);
            std::__optional_storage_base<siri::dialogengine::ObjectProperty,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<siri::dialogengine::ObjectProperty,false> const&>((siri::dialogengine::ObjectProperty *)a7, (siri::dialogengine::ObjectProperty *)&__p);
            if (v181)
              siri::dialogengine::ObjectProperty::~ObjectProperty((void **)&__p.__r_.__value_.__l.__data_);
            if (*(_BYTE *)(a7 + 240))
            {
              if (*(char *)(a7 + 55) < 0)
                std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a7 + 32), *(_QWORD *)(a7 + 40));
              else
                __p = *(std::string *)(a7 + 32);
              if (SHIBYTE(v207.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v207.__r_.__value_.__l.__data_);
              v207 = __p;
            }
            if (v206.__r_.__value_.__r.__words[0]
              && (siri::dialogengine::ObjectSchema::GetInput((uint64_t)v206.__r_.__value_.__l.__data_, a2, (const void **)&v167.__r_.__value_.__l.__data_, 0, (uint64_t)&__p), v180.__r_.__value_.__s.__data_[16]))
            {
              v106 = HIDWORD(v180.__r_.__value_.__r.__words[1]);
              siri::dialogengine::PropertyBase::~PropertyBase((void **)&__p.__r_.__value_.__l.__data_);
            }
            else
            {
LABEL_273:
              v106 = 1;
            }
            if (*a3
            {
              v108 = (std::string::size_type)v107;
              v109 = a3[1];
              __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v107;
              __str.__r_.__value_.__l.__size_ = v109;
              if (v109)
              {
                v110 = (unint64_t *)(v109 + 8);
                do
                  v111 = __ldxr(v110);
                while (__stxr(v111 + 1, v110));
              }
            }
            else
            {
              v108 = 0;
              *(_OWORD *)&__str.__r_.__value_.__l.__data_ = 0uLL;
            }
            v203 = 0;
            v204 = 0;
            if (v106 == 1)
            {
              v112 = std::__tree<std::string>::find<std::string>(v108 + 72, (const void **)&v167.__r_.__value_.__l.__data_);
              v113 = a10;
              if (v108 + 80 == v112)
              {
                *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
              }
              else
              {
                v114 = *(_QWORD *)(v112 + 64);
                __p.__r_.__value_.__r.__words[0] = *(_QWORD *)(v112 + 56);
                __p.__r_.__value_.__l.__size_ = v114;
                if (v114)
                {
                  v115 = (unint64_t *)(v114 + 8);
                  do
                    v116 = __ldxr(v115);
                  while (__stxr(v116 + 1, v115));
                }
              }
              std::shared_ptr<siri::dialogengine::JSONValue>::operator=[abi:ne180100]((uint64_t)&v203, (__int128 *)&__p);
              std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
              v117 = v203;
              if (v203)
                goto LABEL_299;
              v108 = __str.__r_.__value_.__r.__words[0];
            }
            else
            {
              v113 = a10;
            }
            siri::dialogengine::PushKeyPath(&__p, a6, (uint64_t)&v167);
            siri::dialogengine::ConceptCallbacks::InvokeCallback(a2, v159, &v167, v108, &__p);
            std::shared_ptr<siri::dialogengine::JSONValue>::operator=[abi:ne180100]((uint64_t)&v203, (__int128 *)&v202);
            std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&v202);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            v117 = v203;
            if (v203)
            {
              if (*(_BYTE *)(a7 + 240))
              {
                v118 = 1;
                v119 = v203;
                do
                {
                  v120 = *((unsigned __int8 *)v119 + 65);
                  v119 = (double *)*((_QWORD *)v119 + 7);
                  v118 &= v120 != 0;
                }
                while (v119);
                if ((v118 & 1) == 0)
                  *(_BYTE *)(a7 + 154) = 0;
              }
            }
LABEL_299:
            v165 = v117;
            v166 = v204;
            if (v204)
            {
              v121 = (unint64_t *)&v204->__shared_owners_;
              do
                v122 = __ldxr(v121);
              while (__stxr(v122 + 1, v121));
            }
            if (SHIBYTE(v207.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&v164, v207.__r_.__value_.__l.__data_, v207.__r_.__value_.__l.__size_);
            else
              v164 = v207;
            v123 = (__int128 *)a5[1];
            v124 = (__int128 *)(*a5 + 24);
            memset(&v163, 0, sizeof(v163));
            std::vector<std::string>::__init_with_size[abi:ne180100]<std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string const*>>(&v163, v124, v123, 0xAAAAAAAAAAAAAAABLL * (((char *)v123 - (char *)v124) >> 3));
            if (*(char *)(a6 + 23) < 0)
              std::string::__init_copy_ctor_external(&v162, *(const std::string::value_type **)a6, *(_QWORD *)(a6 + 8));
            else
              v162 = *(std::string *)a6;
            std::__optional_copy_base<siri::dialogengine::ObjectProperty,false>::__optional_copy_base[abi:ne180100]((siri::dialogengine::ObjectProperty *)v160, (const siri::dialogengine::ObjectProperty *)a7);
            siri::dialogengine::ResolveValueRecursive(a1, a2, &v165, &v164, &v163, &v162, v160, a8, a9, v113);
            if (v161)
              siri::dialogengine::ObjectProperty::~ObjectProperty(v160);
            if (SHIBYTE(v162.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v162.__r_.__value_.__l.__data_);
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v163;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
            if (SHIBYTE(v164.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v164.__r_.__value_.__l.__data_);
            v125 = v166;
            if (v166)
            {
              v126 = (unint64_t *)&v166->__shared_owners_;
              do
                v127 = __ldaxr(v126);
              while (__stlxr(v127 - 1, v126));
              if (!v127)
              {
                ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
                std::__shared_weak_count::__release_weak(v125);
              }
            }
            v128 = v204;
            if (v204)
            {
              v129 = (unint64_t *)&v204->__shared_owners_;
              do
                v130 = __ldaxr(v129);
              while (__stlxr(v130 - 1, v129));
              if (!v130)
              {
                ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
                std::__shared_weak_count::__release_weak(v128);
              }
            }
            v131 = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
            if (__str.__r_.__value_.__l.__size_)
            {
              v132 = (unint64_t *)(__str.__r_.__value_.__l.__size_ + 8);
              do
                v133 = __ldaxr(v132);
              while (__stlxr(v133 - 1, v132));
              if (!v133)
              {
                ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
                std::__shared_weak_count::__release_weak(v131);
              }
            }
            if (SHIBYTE(v207.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v207.__r_.__value_.__l.__data_);
            if (v169 < 0)
              operator delete(v168);
            if ((SHIBYTE(v167.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_336;
            v134 = (void *)v167.__r_.__value_.__r.__words[0];
            goto LABEL_335;
          }
        }
        else
        {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      else if (v72 == HIBYTE(__p.__r_.__value_.__r.__words[2])
             && !memcmp(&__p, (const void *)siri::dialogengine::TYPE_OBJECT, v72))
      {
        goto LABEL_184;
      }
LABEL_205:
      *(_OWORD *)a1 = *(_OWORD *)a3;
      goto LABEL_206;
    }
    if (v18[55] < 0)
    {
      std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)v18 + 4), *((_QWORD *)v18 + 5));
      if ((*(_BYTE *)(a4 + 23) & 0x80) == 0)
        goto LABEL_24;
    }
    else
    {
      __p = *(std::string *)(v18 + 32);
      if ((v26 & 0x80) == 0)
      {
LABEL_24:
        *(std::string *)a4 = __p;
        v18 = (char *)*a3;
        goto LABEL_25;
      }
    }
    operator delete(*(void **)a4);
    goto LABEL_24;
  }
  if (a5[1] - v19 != 24)
  {
LABEL_41:
    *a1 = 0;
    a1[1] = 0;
    return;
  }
  if (*(char *)(a6 + 23) < 0)
  {
    if (*(_QWORD *)(a6 + 8))
      goto LABEL_41;
  }
  else if (*(_BYTE *)(a6 + 23))
  {
    goto LABEL_41;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  siri::dialogengine::ConceptCallbacks::InvokeCallback(a2, a4, &__p, 0, *a5);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    v97 = (void *)__p.__r_.__value_.__r.__words[0];
    goto LABEL_247;
  }
}

void sub_1BFC15728(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,uint64_t a63)
{
  void *a69;
  uint64_t v69;

  a61 = &STACK[0x548];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a61);
  if (SLOBYTE(STACK[0x577]) < 0)
    operator delete((void *)STACK[0x560]);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x578]);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](v69 - 128);
  siri::dialogengine::VariableReference::~VariableReference(&a69);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](v69 - 160);
  _Unwind_Resume(a1);
}

void siri::dialogengine::PushKeyPath(std::string *this, uint64_t a2, uint64_t a3)
{
  std::string::size_type v6;
  char v7;
  std::string::size_type v8;
  uint64_t v9;
  uint64_t v10;
  const std::string::value_type *v11;
  std::string::size_type v12;

  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    *this = *(std::string *)a2;
  v6 = *(unsigned __int8 *)(a3 + 23);
  v7 = v6;
  v8 = *(_QWORD *)(a3 + 8);
  if ((v6 & 0x80u) == 0)
    v9 = *(unsigned __int8 *)(a3 + 23);
  else
    v9 = *(_QWORD *)(a3 + 8);
  if (v9)
  {
    v10 = *(unsigned __int8 *)(a2 + 23);
    if ((v10 & 0x80u) != 0)
      v10 = *(_QWORD *)(a2 + 8);
    if (v10)
    {
      std::string::append(this, ".");
      v6 = *(unsigned __int8 *)(a3 + 23);
      v8 = *(_QWORD *)(a3 + 8);
      v7 = *(_BYTE *)(a3 + 23);
    }
    if (v7 >= 0)
      v11 = (const std::string::value_type *)a3;
    else
      v11 = *(const std::string::value_type **)a3;
    if (v7 >= 0)
      v12 = v6;
    else
      v12 = v8;
    std::string::append(this, v11, v12);
  }
}

void sub_1BFC15DC0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::dynamic_pointer_cast[abi:ne180100]<siri::dialogengine::VariableNumber,siri::dialogengine::Variable>(_QWORD *result, void *lpsrc, uint64_t a3)
{
  _QWORD *v3;
  unint64_t *v5;
  unint64_t v6;

  v3 = result;
  if (lpsrc
  {
    *v3 = result;
    v3[1] = a3;
    if (a3)
    {
      v5 = (unint64_t *)(a3 + 8);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
    }
  }
  else
  {
    *v3 = 0;
    v3[1] = 0;
  }
  return result;
}

void std::vector<std::string>::push_back[abi:ne180100](std::vector<std::string> *a1, __int128 *a2)
{
  std::allocator<std::string> *p_end_cap;
  std::string *v5;
  std::string *value;
  unint64_t v7;
  __int128 v8;
  std::string *end;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  std::string *v14;
  std::string *v15;
  __int128 v16;
  std::__split_buffer<std::string> __v;

  value = a1->__end_cap_.__value_;
  p_end_cap = (std::allocator<std::string> *)&a1->__end_cap_;
  v5 = value;
  v7 = *((_QWORD *)p_end_cap - 1);
  if (v7 >= (unint64_t)value)
  {
    v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - (unint64_t)a1->__begin_) >> 3);
    v11 = v10 + 1;
    if (v10 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<BOOL>::__throw_length_error[abi:ne180100]();
    v12 = 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (char *)a1->__begin_) >> 3);
    if (2 * v12 > v11)
      v11 = 2 * v12;
    if (v12 >= 0x555555555555555)
      v13 = 0xAAAAAAAAAAAAAAALL;
    else
      v13 = v11;
    __v.__end_cap_.__value_ = p_end_cap;
    if (v13)
      v14 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)p_end_cap, v13);
    else
      v14 = 0;
    v15 = v14 + v10;
    __v.__first_ = v14;
    __v.__begin_ = v15;
    __v.__end_cap_.__value_ = &v14[v13];
    v16 = *a2;
    v15->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v16;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    __v.__end_ = v15 + 1;
    std::vector<std::string>::__swap_out_circular_buffer(a1, &__v);
    end = a1->__end_;
    std::__split_buffer<std::string>::~__split_buffer(&__v);
  }
  else
  {
    v8 = *a2;
    *(_QWORD *)(v7 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v7 = v8;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    end = (std::string *)(v7 + 24);
    a1->__end_ = (std::vector<std::string>::pointer)(v7 + 24);
  }
  a1->__end_ = end;
}

void sub_1BFC15F6C(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a10);
  _Unwind_Resume(a1);
}

void siri::dialogengine::VariableNumber::~VariableNumber(void **this)
{
  siri::dialogengine::Variable::~Variable(this);
  JUMPOUT(0x1C3B8D890);
}

uint64_t siri::dialogengine::VariableNumber::Accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, a1);
}

uint64_t siri::dialogengine::VariableNumber::IsEmpty(siri::dialogengine::VariableNumber *this)
{
  return 0;
}

void siri::dialogengine::VariableNumber::ToString(uint64_t a1@<X8>)
{
  void *__p[2];
  char v4;

  siri::dialogengine::StringFromDouble((siri::dialogengine *)0xFFFFFFFFLL, (uint64_t)__p);
  siri::dialogengine::SpeakableString::SpeakableString(a1, (uint64_t)__p);
  if (v4 < 0)
    operator delete(__p[0]);
}

void sub_1BFC16018(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::VariableNumber::ToString(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

siri::dialogengine::VariableNumber *siri::dialogengine::VariableNumber::VariableNumber(siri::dialogengine::VariableNumber *this)
{
  std::string __p;
  std::string v4;

  std::string::basic_string[abi:ne180100]<0>(&v4, "");
  std::string::basic_string[abi:ne180100]<0>(&__p, siri::dialogengine::TYPE_NUMBER[0]);
  siri::dialogengine::Variable::Variable((uint64_t)this, &v4, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v4.__r_.__value_.__l.__data_);
  *(_QWORD *)this = &off_1E7937DD0;
  *((_QWORD *)this + 9) = 0;
  return this;
}

void sub_1BFC160C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::VariableNumber::VariableNumber(uint64_t a1, const std::string *a2, double a3)
{
  std::string __p;

  std::string::basic_string[abi:ne180100]<0>(&__p, siri::dialogengine::TYPE_NUMBER[0]);
  siri::dialogengine::Variable::Variable(a1, a2, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *(_QWORD *)a1 = &off_1E7937DD0;
  *(double *)(a1 + 72) = a3;
  return a1;
}

void sub_1BFC16178(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::VariableNumber::SetValue(uint64_t this, double a2)
{
  *(double *)(this + 72) = a2;
  return this;
}

double siri::dialogengine::VariableNumber::GetValue(siri::dialogengine::VariableNumber *this)
{
  return *((double *)this + 9);
}

void siri::dialogengine::AllComputedParameterNames(uint64_t *a1@<X8>)
{
  uint64_t v3;
  uint64_t i;
  _QWORD v5[3];
  _QWORD v6[3];
  _QWORD v7[3];
  _QWORD v8[3];
  _QWORD v9[3];
  _QWORD v10[4];

  v10[3] = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(v5, "isConclusion");
  std::string::basic_string[abi:ne180100]<0>(v6, "isFirstWindow");
  std::string::basic_string[abi:ne180100]<0>(v7, "isLastWindow");
  std::string::basic_string[abi:ne180100]<0>(v8, "isNextWindowLastWindow");
  std::string::basic_string[abi:ne180100]<0>(v9, "nextWindowItemCount");
  std::string::basic_string[abi:ne180100]<0>(v10, "windowSize");
  v3 = 0;
  a1[1] = 0;
  a1[2] = 0;
  *a1 = (uint64_t)(a1 + 1);
  do
  {
    std::__tree<std::string>::__emplace_hint_unique_key_args<std::string,std::string const&>(a1, a1 + 1, &v5[v3], (uint64_t)&v5[v3]);
    v3 += 3;
  }
  while (v3 != 18);
  for (i = 0; i != -18; i -= 3)
  {
    if (SHIBYTE(v10[i + 2]) < 0)
      operator delete((void *)v10[i]);
  }
}

void sub_1BFC162E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::GetParamsForPattern(uint64_t a1, std::string **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  std::string::__raw *v12;
  std::string::size_type v13;
  std::string::size_type size;
  std::string::size_type v15;
  std::string::size_type v16;
  std::string::size_type v17;
  std::string::size_type v18;
  std::string::size_type v19;
  std::string::size_type v20;
  std::string::size_type v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::string *v25;
  std::string *v26;
  BOOL v27;
  siri::dialogengine::PatternSchema *v28;
  std::string::__raw *v29;
  std::string *v30;
  std::string *v31;
  std::string::__raw *v32;
  std::__shared_weak_count *v33;
  unint64_t *p_shared_owners;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  std::string *v38;
  std::string *v39;
  std::string::__raw *v40;
  std::string *v41;
  std::string *v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  __n128 v46;
  std::string v47;
  std::string v48;
  uint64_t v49[439];

  siri::dialogengine::Context::Context((siri::dialogengine::Context *)v49, a2);
  std::map<std::string,std::shared_ptr<siri::dialogengine::PatternGroup>>::map[abi:ne180100]((uint64_t)&v48, (const void ***)(a1 + 208));
  v12 = (std::string::__raw *)v48.__r_.__value_.__r.__words[0];
  if ((std::string::size_type *)v48.__r_.__value_.__l.__data_ != &v48.__r_.__value_.__r.__words[1])
  {
    do
    {
      v13 = v12[2].__words[1];
      if (*(char *)(v13 + 111) < 0)
        std::string::__init_copy_ctor_external(&v47, *(const std::string::value_type **)(v13 + 88), *(_QWORD *)(v13 + 96));
      else
        v47 = *(std::string *)(v13 + 88);
      if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
      {
        size = v47.__r_.__value_.__l.__size_;
        operator delete(v47.__r_.__value_.__l.__data_);
        if (!size)
          goto LABEL_14;
      }
      else if (!*((_BYTE *)&v47.__r_.__value_.__s + 23))
      {
        goto LABEL_14;
      }
      v15 = v12[2].__words[1];
      if (*(char *)(v15 + 111) < 0)
        std::string::__init_copy_ctor_external(&v47, *(const std::string::value_type **)(v15 + 88), *(_QWORD *)(v15 + 96));
      else
        v47 = *(std::string *)(v15 + 88);
      siri::dialogengine::GetParamsForDialogCat((uint64_t *)a2, (uint64_t)&v47, a6, 0);
      if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v47.__r_.__value_.__l.__data_);
LABEL_14:
      v16 = v12[2].__words[1];
      if (*(char *)(v16 + 135) < 0)
        std::string::__init_copy_ctor_external(&v47, *(const std::string::value_type **)(v16 + 112), *(_QWORD *)(v16 + 120));
      else
        v47 = *(std::string *)(v16 + 112);
      if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
      {
        v17 = v47.__r_.__value_.__l.__size_;
        operator delete(v47.__r_.__value_.__l.__data_);
        if (!v17)
          goto LABEL_26;
      }
      else if (!*((_BYTE *)&v47.__r_.__value_.__s + 23))
      {
        goto LABEL_26;
      }
      v18 = v12[2].__words[1];
      if (*(char *)(v18 + 135) < 0)
        std::string::__init_copy_ctor_external(&v47, *(const std::string::value_type **)(v18 + 112), *(_QWORD *)(v18 + 120));
      else
        v47 = *(std::string *)(v18 + 112);
      siri::dialogengine::GetParamsForVisualCat((uint64_t)a2);
      if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v47.__r_.__value_.__l.__data_);
LABEL_26:
      v19 = v12[2].__words[1];
      if (*(char *)(v19 + 159) < 0)
        std::string::__init_copy_ctor_external(&v47, *(const std::string::value_type **)(v19 + 136), *(_QWORD *)(v19 + 144));
      else
        v47 = *(std::string *)(v19 + 136);
      if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
      {
        v20 = v47.__r_.__value_.__l.__size_;
        operator delete(v47.__r_.__value_.__l.__data_);
        if (v20)
        {
LABEL_33:
          v21 = v12[2].__words[1];
          if (*(char *)(v21 + 159) < 0)
            std::string::__init_copy_ctor_external(&v47, *(const std::string::value_type **)(v21 + 136), *(_QWORD *)(v21 + 144));
          else
            v47 = *(std::string *)(v21 + 136);
          siri::dialogengine::PatternFile::LoadFromId(v49, (uint64_t)&v47, 0, &v46);
          if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v47.__r_.__value_.__l.__data_);
          if (v46.n128_u64[0])
            siri::dialogengine::GetParamsForPattern(v46.n128_u64[0], a2, a3, a4, a5, a6);
          v22 = (std::__shared_weak_count *)v46.n128_u64[1];
          if (v46.n128_u64[1])
          {
            v23 = (unint64_t *)(v46.n128_u64[1] + 8);
            do
              v24 = __ldaxr(v23);
            while (__stlxr(v24 - 1, v23));
            if (!v24)
            {
              ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
              std::__shared_weak_count::__release_weak(v22);
            }
          }
        }
      }
      else if (*((_BYTE *)&v47.__r_.__value_.__s + 23))
      {
        goto LABEL_33;
      }
      v25 = (std::string *)v12->__words[1];
      if (v25)
      {
        do
        {
          v26 = v25;
          v25 = (std::string *)v25->__r_.__value_.__r.__words[0];
        }
        while (v25);
      }
      else
      {
        do
        {
          v26 = (std::string *)v12->__words[2];
          v27 = v26->__r_.__value_.__r.__words[0] == (_QWORD)v12;
          v12 = (std::string::__raw *)v26;
        }
        while (!v27);
      }
      v12 = (std::string::__raw *)v26;
    }
    while (v26 != (std::string *)&v48.__r_.__value_.__r.__words[1]);
  }
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy((_QWORD *)v48.__r_.__value_.__l.__size_);
  if (*(char *)(a1 + 135) < 0)
    std::string::__init_copy_ctor_external(&v48, *(const std::string::value_type **)(a1 + 112), *(_QWORD *)(a1 + 120));
  else
    v48 = *(std::string *)(a1 + 112);
  siri::dialogengine::PatternRegistry::GetSchema(v49, (const std::string::value_type **)&v48.__r_.__value_.__l.__data_, (uint64_t *)&v47);
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v48.__r_.__value_.__l.__data_);
  v28 = (siri::dialogengine::PatternSchema *)v47.__r_.__value_.__r.__words[0];
  if ((_DWORD)a3 == 2 && v47.__r_.__value_.__r.__words[0])
  {
    std::map<std::string,std::shared_ptr<siri::dialogengine::Parameter>>::map[abi:ne180100]((uint64_t)&v48, (const void ***)(v47.__r_.__value_.__r.__words[0] + 168));
    v29 = (std::string::__raw *)v48.__r_.__value_.__r.__words[0];
    if ((std::string::size_type *)v48.__r_.__value_.__l.__data_ != &v48.__r_.__value_.__r.__words[1])
    {
      do
      {
        siri::dialogengine::ParameterCollection::AddParameter(a6, (uint64_t *)&v29[2].__words[1]);
        v30 = (std::string *)v29->__words[1];
        if (v30)
        {
          do
          {
            v31 = v30;
            v30 = (std::string *)v30->__r_.__value_.__r.__words[0];
          }
          while (v30);
        }
        else
        {
          do
          {
            v31 = (std::string *)v29->__words[2];
            v27 = v31->__r_.__value_.__r.__words[0] == (_QWORD)v29;
            v29 = (std::string::__raw *)v31;
          }
          while (!v27);
        }
        v29 = (std::string::__raw *)v31;
      }
      while (v31 != (std::string *)&v48.__r_.__value_.__r.__words[1]);
    }
    std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy((_QWORD *)v48.__r_.__value_.__l.__size_);
    v28 = (siri::dialogengine::PatternSchema *)v47.__r_.__value_.__r.__words[0];
  }
  if (v28 && (_DWORD)a4)
  {
    siri::dialogengine::PatternSchema::GetSettings(v28, (uint64_t)&v48);
    v32 = (std::string::__raw *)v48.__r_.__value_.__r.__words[0];
    if ((std::string::size_type *)v48.__r_.__value_.__l.__data_ != &v48.__r_.__value_.__r.__words[1])
    {
      do
      {
        if (*(_BYTE *)(v32[2].__words[1] + 233))
        {
          v33 = (std::__shared_weak_count *)v32[2].__words[2];
          v46.n128_u64[0] = v32[2].__words[1];
          v46.n128_u64[1] = (unint64_t)v33;
          if (v33)
          {
            p_shared_owners = (unint64_t *)&v33->__shared_owners_;
            do
              v35 = __ldxr(p_shared_owners);
            while (__stxr(v35 + 1, p_shared_owners));
          }
          siri::dialogengine::ParameterCollection::AddParameter(a6, (uint64_t *)&v46);
          if (v33)
          {
            v36 = (unint64_t *)&v33->__shared_owners_;
            do
              v37 = __ldaxr(v36);
            while (__stlxr(v37 - 1, v36));
            if (!v37)
            {
              ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
              std::__shared_weak_count::__release_weak(v33);
            }
          }
        }
        v38 = (std::string *)v32->__words[1];
        if (v38)
        {
          do
          {
            v39 = v38;
            v38 = (std::string *)v38->__r_.__value_.__r.__words[0];
          }
          while (v38);
        }
        else
        {
          do
          {
            v39 = (std::string *)v32->__words[2];
            v27 = v39->__r_.__value_.__r.__words[0] == (_QWORD)v32;
            v32 = (std::string::__raw *)v39;
          }
          while (!v27);
        }
        v32 = (std::string::__raw *)v39;
      }
      while (v39 != (std::string *)&v48.__r_.__value_.__r.__words[1]);
    }
    std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy((_QWORD *)v48.__r_.__value_.__l.__size_);
  }
  if ((_DWORD)a3 == 1)
  {
    siri::dialogengine::AllComputedParameterNames((uint64_t *)&v48);
    v40 = (std::string::__raw *)v48.__r_.__value_.__r.__words[0];
    if ((std::string::size_type *)v48.__r_.__value_.__l.__data_ != &v48.__r_.__value_.__r.__words[1])
    {
      do
      {
        siri::dialogengine::ParameterCollection::RemoveParameter(a6, &v40[1].__words[1]);
        v41 = (std::string *)v40->__words[1];
        if (v41)
        {
          do
          {
            v42 = v41;
            v41 = (std::string *)v41->__r_.__value_.__r.__words[0];
          }
          while (v41);
        }
        else
        {
          do
          {
            v42 = (std::string *)v40->__words[2];
            v27 = v42->__r_.__value_.__r.__words[0] == (_QWORD)v40;
            v40 = (std::string::__raw *)v42;
          }
          while (!v27);
        }
        v40 = (std::string::__raw *)v42;
      }
      while (v42 != (std::string *)&v48.__r_.__value_.__r.__words[1]);
    }
    std::__tree<std::string>::destroy((char *)v48.__r_.__value_.__l.__size_);
  }
  v43 = (std::__shared_weak_count *)v47.__r_.__value_.__l.__size_;
  if (v47.__r_.__value_.__l.__size_)
  {
    v44 = (unint64_t *)(v47.__r_.__value_.__l.__size_ + 8);
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  siri::dialogengine::Context::~Context((siri::dialogengine::Context *)v49);
}

void sub_1BFC1687C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  siri::dialogengine::Context::~Context((siri::dialogengine::Context *)&a24);
  _Unwind_Resume(a1);
}

std::string *siri::dialogengine::DialogPreciseTemperature::toString(siri::dialogengine::DialogPreciseTemperature *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  return siri::dialogengine::FormatTemperature(this, (uint64_t)a2, 2u, (const char *)1);
}

std::string *siri::dialogengine::DialogPreciseTemperature::longSpoken(siri::dialogengine::DialogPreciseTemperature *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  return siri::dialogengine::FormatTemperature(this, (uint64_t)a2, 2u, (const char *)1);
}

std::string *siri::dialogengine::DialogPreciseTemperature::shortSpoken(siri::dialogengine::DialogPreciseTemperature *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  return siri::dialogengine::FormatTemperature(this, (uint64_t)a2, 0, (const char *)1);
}

std::string *siri::dialogengine::DialogPreciseTemperature::mediumSpoken(siri::dialogengine::DialogPreciseTemperature *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  return siri::dialogengine::FormatTemperature(this, (uint64_t)a2, 1u, (const char *)1);
}

uint64_t siri::dialogengine::DialogPreciseTemperature::value(siri::dialogengine::DialogPreciseTemperature *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  return siri::dialogengine::GetRoundedValueFromTemperatureVar((uint64_t)this, (uint64_t)a2, (const char *)1);
}

std::string *siri::dialogengine::DialogPreciseTemperature::oneDigit(siri::dialogengine::DialogPreciseTemperature *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  return siri::dialogengine::FormatTemperature(this, (uint64_t)a2, 2u, (const char *)2);
}

std::string *siri::dialogengine::DialogPreciseTemperature::longSpokenOneDigit(siri::dialogengine::DialogPreciseTemperature *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  return siri::dialogengine::FormatTemperature(this, (uint64_t)a2, 2u, (const char *)2);
}

std::string *siri::dialogengine::DialogPreciseTemperature::shortSpokenOneDigit(siri::dialogengine::DialogPreciseTemperature *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  return siri::dialogengine::FormatTemperature(this, (uint64_t)a2, 0, (const char *)2);
}

std::string *siri::dialogengine::DialogPreciseTemperature::mediumSpokenOneDigit(siri::dialogengine::DialogPreciseTemperature *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  return siri::dialogengine::FormatTemperature(this, (uint64_t)a2, 1u, (const char *)2);
}

uint64_t siri::dialogengine::DialogPreciseTemperature::valueOneDigit(siri::dialogengine::DialogPreciseTemperature *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  return siri::dialogengine::GetRoundedValueFromTemperatureVar((uint64_t)this, (uint64_t)a2, (const char *)2);
}

std::string *siri::dialogengine::DialogPreciseTemperature::twoDigits(siri::dialogengine::DialogPreciseTemperature *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  return siri::dialogengine::FormatTemperature(this, (uint64_t)a2, 2u, (const char *)3);
}

std::string *siri::dialogengine::DialogPreciseTemperature::longSpokenTwoDigits(siri::dialogengine::DialogPreciseTemperature *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  return siri::dialogengine::FormatTemperature(this, (uint64_t)a2, 2u, (const char *)3);
}

std::string *siri::dialogengine::DialogPreciseTemperature::shortSpokenTwoDigits(siri::dialogengine::DialogPreciseTemperature *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  return siri::dialogengine::FormatTemperature(this, (uint64_t)a2, 0, (const char *)3);
}

std::string *siri::dialogengine::DialogPreciseTemperature::mediumSpokenTwoDigits(siri::dialogengine::DialogPreciseTemperature *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  return siri::dialogengine::FormatTemperature(this, (uint64_t)a2, 1u, (const char *)3);
}

uint64_t siri::dialogengine::DialogPreciseTemperature::valueTwoDigits(siri::dialogengine::DialogPreciseTemperature *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  return siri::dialogengine::GetRoundedValueFromTemperatureVar((uint64_t)this, (uint64_t)a2, (const char *)3);
}

_QWORD *siri::dialogengine::DialogPreciseTemperature::asTemperature(siri::dialogengine::DialogPreciseTemperature *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  _QWORD *v4;
  uint64_t v5;
  std::string *v6;
  std::string *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *size;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v23[2];
  std::string *v24;
  std::string *v25;
  _QWORD v26[2];
  char v27;
  std::string v28;
  _QWORD v29[3];
  _QWORD v30[3];
  __int128 v31;

  *(_QWORD *)&v31 = *MEMORY[0x1E0C80C00];
  v4 = (_QWORD *)operator new();
  if (*((char *)a2 + 31) < 0)
    std::string::__init_copy_ctor_external(&v28, *((const std::string::value_type **)a2 + 1), *((_QWORD *)a2 + 2));
  else
    v28 = *(std::string *)((char *)a2 + 8);
  siri::dialogengine::VariableObject::VariableObject(v4, &v28);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v28, "value");
  std::string::basic_string[abi:ne180100]<0>(v29, "units");
  std::string::basic_string[abi:ne180100]<0>(v30, "outputUnits");
  v24 = 0;
  v25 = 0;
  v26[0] = 0;
  v26[1] = &v24;
  v27 = 0;
  v24 = (std::string *)operator new(0x48uLL);
  v25 = v24;
  v26[0] = v24 + 3;
  v5 = 0;
  v25 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)v26, (__int128 *)&v28, &v31, v24);
  do
  {
    if (SHIBYTE(v30[v5 + 2]) < 0)
      operator delete((void *)v30[v5]);
    v5 -= 3;
  }
  while (v5 != -9);
  v6 = v24;
  v7 = v25;
  if (v24 != v25)
  {
    v8 = (char *)a2 + 72;
    v9 = (char *)a2 + 80;
    do
    {
      v10 = std::__tree<std::string>::find<std::string>((uint64_t)v8, (const void **)&v6->__r_.__value_.__l.__data_);
      if (v9 == (char *)v10)
      {
        *(_OWORD *)&v28.__r_.__value_.__l.__data_ = 0uLL;
      }
      else
      {
        v11 = *(_QWORD *)(v10 + 56);
        v12 = *(std::__shared_weak_count **)(v10 + 64);
        v28.__r_.__value_.__r.__words[0] = v11;
        v28.__r_.__value_.__l.__size_ = (std::string::size_type)v12;
        if (v12)
        {
          p_shared_owners = (unint64_t *)&v12->__shared_owners_;
          do
            v14 = __ldxr(p_shared_owners);
          while (__stxr(v14 + 1, p_shared_owners));
        }
        if (v11)
        {
          v23[0] = v11;
          v23[1] = (uint64_t)v12;
          if (v12)
          {
            v15 = (unint64_t *)&v12->__shared_owners_;
            do
              v16 = __ldxr(v15);
            while (__stxr(v16 + 1, v15));
          }
          siri::dialogengine::VariableObject::AddProperty((uint64_t)v4, v23);
          if (v12)
          {
            v17 = (unint64_t *)&v12->__shared_owners_;
            do
              v18 = __ldaxr(v17);
            while (__stlxr(v18 - 1, v17));
            if (!v18)
            {
              ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
              std::__shared_weak_count::__release_weak(v12);
            }
          }
        }
      }
      size = (std::__shared_weak_count *)v28.__r_.__value_.__l.__size_;
      if (v28.__r_.__value_.__l.__size_)
      {
        v20 = (unint64_t *)(v28.__r_.__value_.__l.__size_ + 8);
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
          std::__shared_weak_count::__release_weak(size);
        }
      }
      ++v6;
    }
    while (v6 != v7);
  }
  v28.__r_.__value_.__r.__words[0] = (std::string::size_type)&v24;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v28);
  return v4;
}

void sub_1BFC16C60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;

  MEMORY[0x1C3B8D890](v22, 0x10B3C40C1072A30);
  _Unwind_Resume(a1);
}

id siri::dialogengine::GetUAFAssetSet(siri::dialogengine *this)
{
  unsigned __int8 v1;
  unsigned __int8 v2;
  unint64_t v3;
  id v4;
  _QWORD *v6;
  char v7;
  char **v8;
  char *v9;

  if ((v1 & 1) == 0
  {
    __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE4AB8], &siri::dialogengine::GetUAFAssetSet(void)::assetSetMutex, &dword_1BF794000);
  }
  {
    v6 = (_QWORD *)operator new();
    *v6 = 0;
    siri::dialogengine::GetUAFAssetSet(void)::flag = (uint64_t)v6;
  }
  v3 = atomic_load((unint64_t *)siri::dialogengine::GetUAFAssetSet(void)::flag);
  if (v3 != -1)
  {
    v9 = &v7;
    v8 = &v9;
    std::__call_once((std::once_flag::_State_type *)siri::dialogengine::GetUAFAssetSet(void)::flag, &v8, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::GetUAFAssetSet(void)::$_0 &&>>);
  }
  std::mutex::lock(&siri::dialogengine::GetUAFAssetSet(void)::assetSetMutex);
  v4 = (id)siri::dialogengine::GetUAFAssetSet(void)::assetSet;
  std::mutex::unlock(&siri::dialogengine::GetUAFAssetSet(void)::assetSetMutex);
  return v4;
}

void sub_1BFC16E54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::GetUAFAssetSet(void)::$_0 &&>>()
{
  NSObject *v0;
  NSObject *v1;

  dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_UTILITY, 0);
  v1 = objc_claimAutoreleasedReturnValue();
  v0 = dispatch_queue_create("com.apple.siri.dialogengine.GetUAFAssetSet", v1);
  dispatch_async(v0, &__block_literal_global);

}

void ___ZZN4siri12dialogengine14GetUAFAssetSetEvENK3__0clEv_block_invoke()
{
  NSObject *v0;
  os_signpost_id_t v1;
  NSObject *v2;
  NSObject *v3;
  const char *v4;
  void *v5;
  void *v6;
  const char *v7;
  std::string *p_p;
  const char *v9;
  id v10;
  const char *v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  std::string *v16;
  NSObject *v17;
  NSObject *v18;
  std::string __p;
  uint8_t buf[8];
  uint64_t v21;
  uint64_t v22;
  char v23;
  char v24;

  v0 = os_log_create("com.apple.siri.DialogEngine", "UAFAssetSet");
  v1 = os_signpost_id_generate(v0);
  v2 = v0;
  v3 = v2;
  if (v1 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1BF794000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v1, "UAFAssetSet_Create", "", buf, 2u);
  }

  siri::dialogengine::Log::Info((siri::dialogengine::Log *)"UAFAssetSet creation begin", v4);
  v24 = 0;
  v21 = 0;
  v22 = 0;
  *(_QWORD *)buf = 0;
  v23 = 0;
  siri::dialogengine::ElapsedTimer::Reset((siri::dialogengine::ElapsedTimer *)buf);
  objc_msgSend(MEMORY[0x1E0DC5DE0], "sharedManager");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "retrieveAssetSet:usages:", CFSTR("com.apple.siri.dialog"), 0);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  siri::dialogengine::ElapsedTimer::Stop((siri::dialogengine **)buf);
  siri::dialogengine::ElapsedTimer::GetCombinedMSecsAsString((siri::dialogengine::ElapsedTimer *)buf, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  siri::dialogengine::Log::Info((siri::dialogengine::Log *)"UAFAssetSet creation time: %s", v7, p_p);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v6)
      goto LABEL_9;
LABEL_15:
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Failed to create UAFAssetSet for dialog updates", v9);
    goto LABEL_16;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (!v6)
    goto LABEL_15;
LABEL_9:
  v10 = (id)objc_msgSend(v6, "assetNamed:", CFSTR("com.apple.siri.dialog.dialogengine"));
  std::mutex::lock(&siri::dialogengine::GetUAFAssetSet(void)::assetSetMutex);
  objc_storeStrong((id *)&siri::dialogengine::GetUAFAssetSet(void)::assetSet, v6);
  std::mutex::unlock(&siri::dialogengine::GetUAFAssetSet(void)::assetSetMutex);
  siri::dialogengine::Log::Info((siri::dialogengine::Log *)"UAFAssetSet was created and is available", v11);
  siri::dialogengine::Log::Info((siri::dialogengine::Log *)"UAFAssetSetObserver creation begin", v12);
  siri::dialogengine::ElapsedTimer::Reset((siri::dialogengine::ElapsedTimer *)buf);
  v13 = objc_msgSend(objc_alloc(MEMORY[0x1E0DC5DF0]), "initWithAssetSet:queue:updateHandler:", CFSTR("com.apple.siri.dialog"), 0, &__block_literal_global_206);
  v14 = (void *)siri::dialogengine::GetUAFAssetSet(void)::assetSetObserver;
  siri::dialogengine::GetUAFAssetSet(void)::assetSetObserver = v13;

  siri::dialogengine::ElapsedTimer::Stop((siri::dialogengine **)buf);
  siri::dialogengine::ElapsedTimer::GetCombinedMSecsAsString((siri::dialogengine::ElapsedTimer *)buf, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v16 = &__p;
  else
    v16 = (std::string *)__p.__r_.__value_.__r.__words[0];
  siri::dialogengine::Log::Info((siri::dialogengine::Log *)"UAFAssetSetObserver creation time: %s", v15, v16);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_16:
  v17 = v3;
  v18 = v17;
  if (v1 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v17))
  {
    LOWORD(__p.__r_.__value_.__l.__data_) = 0;
    _os_signpost_emit_with_name_impl(&dword_1BF794000, v18, OS_SIGNPOST_INTERVAL_END, v1, "UAFAssetSet_Create", "", (uint8_t *)&__p, 2u);
  }

}

void sub_1BFC17160(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  void *v16;
  void *v17;

  if (a16 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void ___ZZN4siri12dialogengine14GetUAFAssetSetEvENK3__0clEv_block_invoke_205()
{
  void *v0;
  uint64_t v1;
  void *v2;
  siri::dialogengine *v3;
  siri::dialogengine::SemanticModelCache *SemanticModelCache;
  siri::dialogengine::ObjectRegistry *v5;
  siri::dialogengine *v6;
  siri::dialogengine *v7;
  const char *v8;

  std::mutex::lock(&siri::dialogengine::GetUAFAssetSet(void)::assetSetMutex);
  objc_msgSend(MEMORY[0x1E0DC5DE0], "sharedManager");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "retrieveAssetSet:usages:", CFSTR("com.apple.siri.dialog"), 0);
  v1 = objc_claimAutoreleasedReturnValue();
  v2 = (void *)siri::dialogengine::GetUAFAssetSet(void)::assetSet;
  siri::dialogengine::GetUAFAssetSet(void)::assetSet = v1;

  std::mutex::unlock(&siri::dialogengine::GetUAFAssetSet(void)::assetSetMutex);
  SemanticModelCache = (siri::dialogengine::SemanticModelCache *)siri::dialogengine::GetSemanticModelCache(v3);
  siri::dialogengine::SemanticModelCache::clear(SemanticModelCache);
  siri::dialogengine::ObjectRegistry::Clear(v5);
  siri::dialogengine::ClearSearchPathCaches(v6);
  siri::dialogengine::ClearTemplateDirsCache(v7);
  siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Dialog assets updated", v8);
}

void sub_1BFC17240(_Unwind_Exception *a1)
{
  void *v1;

  std::mutex::unlock(&siri::dialogengine::GetUAFAssetSet(void)::assetSetMutex);
  _Unwind_Resume(a1);
}

void siri::dialogengine::GetUpdatedTemplateDir(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  uint64_t AssetDeliveryConfig;
  const char *v5;
  void *v6;
  void **v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  id v16;
  char v17;
  const char *v18;
  const char *v19;
  const std::string::value_type *v20;
  void *v21;
  void *v22;
  id v23;
  uint64_t v24;
  const char *v25;
  void **v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  const char *v32;
  const std::string::value_type *v33;
  const std::string::value_type *v34;
  void *v35;
  void *v36;
  id v37;
  uint64_t v38;
  const char *v39;
  void **v40;
  const std::string::value_type *v41;
  void *v42;
  void *v43;
  id v44;
  uint64_t v45;
  const char *v46;
  void **v47;
  const std::string::value_type *v48;
  void *v49;
  void *v50;
  id v51;
  uint64_t v52;
  const char *v53;
  void **v54;
  int v55;
  const std::string::value_type *v56;
  void *v57;
  uint64_t v58;
  const char *v59;
  void **v60;
  void **v61;
  const std::string::value_type *v62;
  void *v63;
  uint64_t v64;
  const char *v65;
  void **v66;
  void **v67;
  uint64_t v68;
  const char *v69;
  void **v70;
  void **v71;
  void *__p[2];
  char v73;
  void *v74[2];
  uint64_t v75;
  void *v76[2];
  uint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  void *v81[2];
  uint64_t v82;

  v81[0] = 0;
  v81[1] = 0;
  v82 = 0;
  v78 = 0;
  v79 = 0;
  v80 = 0;
  AssetDeliveryConfig = siri::dialogengine::ReadAssetDeliveryConfig((uint64_t *)a1, (uint64_t)v81, (uint64_t)&v78, 0);
  if ((AssetDeliveryConfig & 1) != 0)
  {
    siri::dialogengine::GetUAFAssetSet((siri::dialogengine *)AssetDeliveryConfig);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v6)
    {
      siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Unable to check for dialog updates due to nil UAFAssetSet", v5);
      if (*(char *)(a1 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
      }
      else
      {
        *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
        a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 16);
      }
      goto LABEL_67;
    }
    if (v82 >= 0)
      v7 = v81;
    else
      v7 = (void **)v81[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "assetNamed:", v8);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = v9;
    if (!v9)
      goto LABEL_28;
    objc_msgSend(v9, "location");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v11)
      goto LABEL_28;
    objc_msgSend(v10, "location");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "path");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = objc_msgSend(v13, "length");

    if (!v14)
    {
LABEL_28:
      v27 = objc_msgSend(objc_retainAutorelease(v8), "UTF8String");
      siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Failed to find asset named \"%s\" with path", v28, v27);
      if (*(char *)(a1 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
      }
      else
      {
        *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
        a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 16);
      }
LABEL_66:

LABEL_67:
      goto LABEL_68;
    }
    v76[0] = 0;
    v76[1] = 0;
    v77 = 0;
    v74[0] = 0;
    v74[1] = 0;
    v75 = 0;
    objc_msgSend(v10, "location");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "path");
    v16 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)objc_msgSend(v16, "UTF8String"));
    v17 = siri::dialogengine::ReadAssetDeliveryConfig((uint64_t *)__p, 0, (uint64_t)v76, (uint64_t)v74);
    if (v73 < 0)
      operator delete(__p[0]);

    if ((v17 & 1) == 0)
    {
      v29 = objc_msgSend(objc_retainAutorelease(v8), "UTF8String");
      objc_msgSend(v10, "location");
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v22, "path");
      v30 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      v31 = objc_msgSend(v30, "UTF8String");
      siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Unexpected missing DialogAssetDelivery.plist in asset \"%s\" (directory \"%s\")", v32, v29, v31);

      goto LABEL_59;
    }
    if (SHIBYTE(v80) < 0)
    {
      if (v79)
      {
LABEL_14:
        if ((siri::dialogengine::IsValidVersionNumber((char *)&v78) & 1) != 0)
        {
          if ((siri::dialogengine::IsValidVersionNumber((char *)v76) & 1) == 0)
          {
            objc_msgSend(v10, "location");
            v22 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v22, "path");
            v23 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
            v45 = objc_msgSend(v23, "UTF8String");
            v47 = v76;
            if (v77 < 0)
              v47 = (void **)v76[0];
            siri::dialogengine::Log::Error((siri::dialogengine::Log *)"DialogAssetDelivery.plist in %s has invalid version \"%s\", preferring built in asset", v46, v45, v47);
            goto LABEL_58;
          }
          if (siri::dialogengine::VersionGreaterThan((uint64_t)&v78, (uint64_t)v76))
          {
            if (*(char *)(a1 + 23) >= 0)
              v20 = (const std::string::value_type *)a1;
            else
              v20 = *(const std::string::value_type **)a1;
            if (v80 >= 0)
              v21 = &v78;
            else
              v21 = v78;
            objc_msgSend(v10, "location");
            v22 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v22, "path");
            v23 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
            v24 = objc_msgSend(v23, "UTF8String");
            v26 = v76;
            if (v77 < 0)
              v26 = (void **)v76[0];
            siri::dialogengine::Log::Info((siri::dialogengine::Log *)"DialogAssetDelivery.plist in %s has has newer version \"%s\" than that in %s with version \"%s\", preferring built in asset", v25, v20, v21, v24, v26);
LABEL_58:

LABEL_59:
            if (*(char *)(a1 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
            }
            else
            {
              *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
              a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 16);
            }
LABEL_62:
            if (SHIBYTE(v75) < 0)
              operator delete(v74[0]);
            if (SHIBYTE(v77) < 0)
              operator delete(v76[0]);
            goto LABEL_66;
          }
          if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v74, ""))
          {
            if (*(char *)(a1 + 23) >= 0)
              v48 = (const std::string::value_type *)a1;
            else
              v48 = *(const std::string::value_type **)a1;
            if (v80 >= 0)
              v49 = &v78;
            else
              v49 = v78;
            objc_msgSend(v10, "location");
            v50 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v50, "path");
            v51 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
            v52 = objc_msgSend(v51, "UTF8String");
            v54 = v76;
            if (v77 < 0)
              v54 = (void **)v76[0];
            siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"DialogAssetDelivery.plist in %s has has older version \"%s\" than that in %s with version \"%s\" and not a differential update, preferring asset", v53, v48, v49, v52, v54);
          }
          else
          {
            if ((siri::dialogengine::IsValidVersionNumber((char *)v74) & 1) == 0)
            {
              if (*(char *)(a1 + 23) >= 0)
                v62 = (const std::string::value_type *)a1;
              else
                v62 = *(const std::string::value_type **)a1;
              if (v80 >= 0)
                v63 = &v78;
              else
                v63 = v78;
              objc_msgSend(v10, "location");
              v22 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v22, "path");
              v23 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
              v64 = objc_msgSend(v23, "UTF8String");
              v66 = v76;
              if (v77 < 0)
                v66 = (void **)v76[0];
              v67 = v74;
              if (v75 < 0)
                v67 = (void **)v74[0];
              siri::dialogengine::Log::Info((siri::dialogengine::Log *)"DialogAssetDelivery.plist in %s has has older version \"%s\" than that in %s with version \"%s\" and but differential update has invalid minimum version \"%s\", preferring built in asset", v65, v62, v63, v64, v66, v67);
              goto LABEL_58;
            }
            v55 = siri::dialogengine::VersionGreaterThan((uint64_t)v74, (uint64_t)&v78);
            if (*(char *)(a1 + 23) >= 0)
              v56 = (const std::string::value_type *)a1;
            else
              v56 = *(const std::string::value_type **)a1;
            if (v80 >= 0)
              v57 = &v78;
            else
              v57 = v78;
            if (v55)
            {
              objc_msgSend(v10, "location");
              v22 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v22, "path");
              v23 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
              v58 = objc_msgSend(v23, "UTF8String");
              v60 = v76;
              if (v77 < 0)
                v60 = (void **)v76[0];
              v61 = v74;
              if (v75 < 0)
                v61 = (void **)v74[0];
              siri::dialogengine::Log::Info((siri::dialogengine::Log *)"DialogAssetDelivery.plist in %s has has older version \"%s\" than that in %s with version \"%s\" and but differential update has newer minimum version \"%s\", preferring built in asset", v59, v56, v57, v58, v60, v61);
              goto LABEL_58;
            }
            objc_msgSend(v10, "location");
            v50 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v50, "path");
            v51 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
            v68 = objc_msgSend(v51, "UTF8String");
            v70 = v76;
            if (v77 < 0)
              v70 = (void **)v76[0];
            v71 = v74;
            if (v75 < 0)
              v71 = (void **)v74[0];
            siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"DialogAssetDelivery.plist in %s has has older version \"%s\" than that in %s with version \"%s\" and is newer than differential update with minimum version \"%s\", preferring asset", v69, v56, v57, v68, v70, v71);
          }

        }
        else
        {
          if (*(char *)(a1 + 23) >= 0)
            v34 = (const std::string::value_type *)a1;
          else
            v34 = *(const std::string::value_type **)a1;
          v35 = &v78;
          if (v80 < 0)
            v35 = v78;
          siri::dialogengine::Log::Error((siri::dialogengine::Log *)"DialogAssetDelivery.plist in %s has invalid version \"%s\", preferring asset", v19, v34, v35);
        }
LABEL_47:
        objc_msgSend(v10, "location");
        v36 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v36, "path");
        v37 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
        v38 = objc_msgSend(v37, "UTF8String");
        v40 = v76;
        if (v77 < 0)
          v40 = (void **)v76[0];
        if (*(char *)(a1 + 23) >= 0)
          v41 = (const std::string::value_type *)a1;
        else
          v41 = *(const std::string::value_type **)a1;
        v42 = &v78;
        if (v80 < 0)
          v42 = v78;
        siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Using updated template dir %s (version: \"%s\") instead of specified template dir %s (version: \"%s\")", v39, v38, v40, v41, v42);

        objc_msgSend(v10, "location");
        v43 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v43, "path");
        v44 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
        std::string::basic_string[abi:ne180100]<0>(a2, (char *)objc_msgSend(v44, "UTF8String"));

        goto LABEL_62;
      }
    }
    else if (HIBYTE(v80))
    {
      goto LABEL_14;
    }
    if (*(char *)(a1 + 23) >= 0)
      v33 = (const std::string::value_type *)a1;
    else
      v33 = *(const std::string::value_type **)a1;
    siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"DialogAssetDelivery.plist in %s lacks version, preferring asset", v18, v33);
    goto LABEL_47;
  }
  if (*(char *)(a1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 16);
  }
LABEL_68:
  if (SHIBYTE(v80) < 0)
    operator delete(v78);
  if (SHIBYTE(v82) < 0)
    operator delete(v81[0]);
}

void sub_1BFC17980(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  uint64_t v41;

  if (a25 < 0)
    operator delete(__p);
  if (a31 < 0)
    operator delete(a26);

  if (a37 < 0)
    operator delete(a32);
  if (*(char *)(v41 - 81) < 0)
    operator delete(*(void **)(v41 - 104));
  _Unwind_Resume(a1);
}

std::string *siri::dialogengine::DialogPercent::toString(siri::dialogengine::DialogPercent *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  return siri::dialogengine::FormatPercent(this, (uint64_t)a2, 0);
}

std::string *siri::dialogengine::FormatPercent(_QWORD *a1, uint64_t a2, unsigned int a3)
{
  double *RequiredNumberParameter;
  double *v7;
  char *OptionalStringParameter;
  char *v9;
  std::string *v10;
  _BOOL4 v12;
  const char *v14;
  std::string *v15;
  uint64_t i;
  std::__shared_weak_count *size;
  unint64_t *v18;
  unint64_t v19;
  std::string v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  std::string v25;
  std::string __p;
  __int128 v27;
  uint64_t v28;
  void *v29;
  __int128 v30;
  uint64_t v31;
  char v32;
  void *v33;
  __int128 v34;
  void *v35[2];
  char v36;
  void *v37[2];
  char v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(&__p, "value");
  RequiredNumberParameter = (double *)siri::dialogengine::GetRequiredNumberParameter((const void **)&__p.__r_.__value_.__l.__data_, a2);
  v7 = RequiredNumberParameter;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v7)
    {
LABEL_3:
      std::string::basic_string[abi:ne180100]<0>(&__p, "units");
      OptionalStringParameter = (char *)siri::dialogengine::GetOptionalStringParameter((const void **)&__p.__r_.__value_.__l.__data_, a2);
      v9 = OptionalStringParameter;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if (!v9)
          goto LABEL_56;
      }
      else if (!OptionalStringParameter)
      {
        goto LABEL_56;
      }
      if (v9[95] < 0)
        std::string::__init_copy_ctor_external(&v25, *((const std::string::value_type **)v9 + 9), *((_QWORD *)v9 + 10));
      else
        v25 = *(std::string *)(v9 + 3);
      siri::dialogengine::StringToLower((uint64_t)&v25, (uint64_t)&__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        v12 = __p.__r_.__value_.__l.__size_ != 7
           || *(_DWORD *)__p.__r_.__value_.__l.__data_ != 1668441456
           || *(_DWORD *)(__p.__r_.__value_.__r.__words[0] + 3) != 1953391971;
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      else
      {
        v12 = SHIBYTE(__p.__r_.__value_.__r.__words[2]) != 7
           || LODWORD(__p.__r_.__value_.__l.__data_) != 1668441456
           || *(_DWORD *)((char *)__p.__r_.__value_.__r.__words + 3) != 1953391971;
      }
      if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v25.__r_.__value_.__l.__data_);
        if (!v12)
          goto LABEL_56;
      }
      else if (!v12)
      {
LABEL_56:
        siri::dialogengine::CreateJSONDoubleVal(v7[9], (uint64_t *)&v21);
        std::string::basic_string[abi:ne180100]<0>(&__p, "number");
        v27 = *(_OWORD *)&v21.__r_.__value_.__l.__data_;
        *(_OWORD *)&v21.__r_.__value_.__l.__data_ = 0uLL;
        siri::dialogengine::CreateJSONBoolVal(0, (uint64_t *)&v24);
        std::string::basic_string[abi:ne180100]<0>(&v28, "abbreviated");
        v30 = v24;
        v24 = 0uLL;
        siri::dialogengine::CreateJSONBoolVal((siri::dialogengine *)(a3 & 1), (uint64_t *)&v23);
        std::string::basic_string[abi:ne180100]<0>(&v31, "roundToHundredths");
        v34 = v23;
        v23 = 0uLL;
        siri::dialogengine::CreateJSONBoolVal((siri::dialogengine *)((a3 >> 1) & 1), (uint64_t *)&v22);
        std::string::basic_string[abi:ne180100]<0>(v35, "roundToTenths");
        *(_OWORD *)v37 = v22;
        v22 = 0uLL;
        std::map<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>::map[abi:ne180100]((uint64_t)&v25, (const void **)&__p.__r_.__value_.__l.__data_, 4);
        for (i = 0; i != -20; i -= 5)
        {
          std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&v37[i]);
          if (*(&v36 + i * 8) < 0)
            operator delete(v35[i]);
        }
        size = (std::__shared_weak_count *)v21.__r_.__value_.__l.__size_;
        if (v21.__r_.__value_.__l.__size_)
        {
          v18 = (unint64_t *)(v21.__r_.__value_.__l.__size_ + 8);
          do
            v19 = __ldaxr(v18);
          while (__stlxr(v19 - 1, v18));
          if (!v19)
          {
            ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
            std::__shared_weak_count::__release_weak(size);
          }
        }
        std::string::basic_string[abi:ne180100]<0>(&v21, "unit#percentValue");
        siri::dialogengine::ExecuteSharedCat(a1, (uint64_t)&v21, (const void ***)&v25, (uint64_t)&__p);
        if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v21.__r_.__value_.__l.__data_);
        v10 = (std::string *)operator new();
        std::string::basic_string[abi:ne180100]<0>(&v21, "");
        siri::dialogengine::VariableString::VariableString(v10, &v21, (const siri::dialogengine::SpeakableString *)&__p);
        if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v21.__r_.__value_.__l.__data_);
        if (v38 < 0)
          operator delete(v37[0]);
        if (v36 < 0)
          operator delete(v35[0]);
        if (SHIBYTE(v34) < 0)
          operator delete(v33);
        if (v32 < 0)
          operator delete(*((void **)&v30 + 1));
        if (SBYTE7(v30) < 0)
          operator delete(v29);
        if (SHIBYTE(v28) < 0)
          operator delete((void *)v27);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy((_QWORD *)v25.__r_.__value_.__l.__size_);
        return v10;
      }
      (*(void (**)(std::string *__return_ptr, char *))(*(_QWORD *)v9 + 48))(&__p, v9);
      siri::dialogengine::SpeakableString::ToMultiplexedString((siri::dialogengine::SpeakableString *)&__p, &v25);
      if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v15 = &v25;
      else
        v15 = (std::string *)v25.__r_.__value_.__r.__words[0];
      siri::dialogengine::Log::Warn((siri::dialogengine::Log *)"Invalid 'units' property provided for 'dialog.Percent' object: %s", v14, v15);
      if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v25.__r_.__value_.__l.__data_);
      if (v38 < 0)
        operator delete(v37[0]);
      if (v36 < 0)
        operator delete(v35[0]);
      if (SHIBYTE(v34) < 0)
        operator delete(v33);
      if (v32 < 0)
        operator delete(*((void **)&v30 + 1));
      if (SBYTE7(v30) < 0)
        operator delete(v29);
      if (SHIBYTE(v28) < 0)
        operator delete((void *)v27);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      goto LABEL_56;
    }
  }
  else if (RequiredNumberParameter)
  {
    goto LABEL_3;
  }
  v10 = (std::string *)operator new();
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::basic_string[abi:ne180100]<0>(&v25, "");
  siri::dialogengine::VariableString::VariableString((uint64_t)v10, &__p, (uint64_t)&v25);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v10;
}

void sub_1BFC17FD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a29 < 0)
    operator delete(__p);
  siri::dialogengine::SpeakableString::~SpeakableString(&a31);
  _Unwind_Resume(a1);
}

std::string *siri::dialogengine::DialogPercent::roundToHundredths(siri::dialogengine::DialogPercent *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  return siri::dialogengine::FormatPercent(this, (uint64_t)a2, 1u);
}

std::string *siri::dialogengine::DialogPercent::roundToTenths(siri::dialogengine::DialogPercent *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  return siri::dialogengine::FormatPercent(this, (uint64_t)a2, 2u);
}

void InitDefaultsscc_info_Button_Container_Container_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Container.pb.cc", a4);
  SnippetUI::Button_Container::Button_Container((SnippetUI::Button_Container *)&SnippetUI::_Button_Container_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_Button_Container_default_instance_, v4);
}

void InitDefaultsscc_info_Button_Container_ButtonItem_Container_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Container.pb.cc", a4);
  SnippetUI::Button_Container_ButtonItem::Button_Container_ButtonItem((SnippetUI::Button_Container_ButtonItem *)&SnippetUI::_Button_Container_ButtonItem_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_Button_Container_ButtonItem_default_instance_, v4);
  qword_1ED1D4928 = (uint64_t)&SnippetUI::_Button_default_instance_;
  unk_1ED1D4930 = &SnippetUI::_PlayerButton_default_instance_;
  qword_1ED1D4938 = (uint64_t)&SnippetUI::_CustomCanvas_default_instance_;
}

SnippetUI::Button_Container_ButtonItem *SnippetUI::Button_Container_ButtonItem::Button_Container_ButtonItem(SnippetUI::Button_Container_ButtonItem *this)
{
  *(_QWORD *)this = &off_1E7937F28;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 6) = 0;
  if (atomic_load(scc_info_Button_Container_ButtonItem_Container_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Button_Container_ButtonItem_Container_2eproto);
  *((_DWORD *)this + 7) = 0;
  return this;
}

void sub_1BFC182E0(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::Button_Container_ButtonItem::~Button_Container_ButtonItem(SnippetUI::Button_Container_ButtonItem *this)
{
  SnippetUI::Button_Container_ButtonItem::~Button_Container_ButtonItem(this);
  JUMPOUT(0x1C3B8D890);
}

{
  *(_QWORD *)this = &off_1E7937F28;
  if (*((_DWORD *)this + 7))
    SnippetUI::Button_Container_ButtonItem::clear_value((uint64_t)this);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

SnippetUI::Button_Container_ButtonItem *SnippetUI::Button_Container_ButtonItem::New(SnippetUI::Button_Container_ButtonItem *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Button_Container_ButtonItem>(0);
}

SnippetUI::Button_Container_ButtonItem *SnippetUI::Button_Container_ButtonItem::New(SnippetUI::Button_Container_ButtonItem *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Button_Container_ButtonItem>(a2);
}

void SnippetUI::Button_Container_ButtonItem::Clear(SnippetUI::Button_Container_ButtonItem *this)
{
  google::protobuf::internal::InternalMetadataWithArena *v2;
  char v3;

  SnippetUI::Button_Container_ButtonItem::clear_value((uint64_t)this);
  v3 = *((_BYTE *)this + 8);
  v2 = (SnippetUI::Button_Container_ButtonItem *)((char *)this + 8);
  if ((v3 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v2);
}

uint64_t SnippetUI::Button_Container_ButtonItem::IsInitialized(SnippetUI::Button_Container_ButtonItem *this)
{
  return 1;
}

char *SnippetUI::Button_Container_ButtonItem::ByteSizeLong(SnippetUI::Button_Container_ButtonItem *this)
{
  int v2;
  char *v3;
  const google::protobuf::UnknownFieldSet *v4;

  v2 = *((_DWORD *)this + 7);
  switch(v2)
  {
    case 3:
      v3 = SnippetUI::CustomCanvas::ByteSizeLong(*((SnippetUI::CustomCanvas **)this + 2));
      goto LABEL_7;
    case 2:
      v3 = SnippetUI::PlayerButton::ByteSizeLong(*((SnippetUI::PlayerButton **)this + 2));
      goto LABEL_7;
    case 1:
      v3 = SnippetUI::Button::ByteSizeLong(*((SnippetUI::Button **)this + 2));
LABEL_7:
      v4 = (const google::protobuf::UnknownFieldSet *)&v3[((9 * (__clz(v3 | 1) ^ 0x1F) + 73) >> 6) + 1];
      goto LABEL_9;
  }
  v4 = 0;
LABEL_9:
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::Button_Container_ButtonItem *)((char *)this + 8), v4, (_DWORD *)this + 6);
  *((_DWORD *)this + 6) = (_DWORD)v4;
  return (char *)v4;
}

uint64_t SnippetUI::Button_Container_ButtonItem::GetCachedSize(SnippetUI::Button_Container_ButtonItem *this)
{
  return *((unsigned int *)this + 6);
}

google::protobuf::internal *SnippetUI::Button_Container_ButtonItem::_InternalParse(SnippetUI::Button_Container_ButtonItem *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  uint64_t *v5;
  google::protobuf::internal::ParseContext *v6;
  google::protobuf::internal *TagFallback;
  char *v8;
  unsigned int v9;
  char *v12;
  SnippetUI::CustomCanvas *v13;
  SnippetUI::PlayerButton *v14;
  SnippetUI::Button *v15;
  google::protobuf::internal *v17;

  v17 = a2;
  v5 = (uint64_t *)((char *)this + 8);
  while (1)
  {
    if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v17, *((_DWORD *)a3 + 23)) & 1) != 0)
      return v17;
    TagFallback = (google::protobuf::internal *)((char *)v17 + 1);
    v8 = (char *)*(unsigned __int8 *)v17;
    if ((*(char *)v17 & 0x80000000) == 0)
      goto LABEL_6;
    v8 = (char *)(v8 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v17 + 2);
LABEL_6:
      v17 = TagFallback;
      goto LABEL_7;
    }
    TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v17, v8);
    v17 = TagFallback;
    if (!TagFallback)
      return TagFallback;
LABEL_7:
    v9 = v8 >> 3;
    if (v8 >> 3 == 3)
    {
      if (v8 == 26)
      {
        if (*((_DWORD *)this + 7) == 3)
        {
          v13 = (SnippetUI::CustomCanvas *)*((_QWORD *)this + 2);
        }
        else
        {
          SnippetUI::Button_Container_ButtonItem::clear_value((uint64_t)this);
          *((_DWORD *)this + 7) = 3;
          v13 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::CustomCanvas>(0);
          *((_QWORD *)this + 2) = v13;
          TagFallback = v17;
        }
        v12 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::CustomCanvas>(a3, v13, TagFallback);
        goto LABEL_34;
      }
    }
    else if (v9 == 2)
    {
      if (v8 == 18)
      {
        if (*((_DWORD *)this + 7) == 2)
        {
          v14 = (SnippetUI::PlayerButton *)*((_QWORD *)this + 2);
        }
        else
        {
          SnippetUI::Button_Container_ButtonItem::clear_value((uint64_t)this);
          *((_DWORD *)this + 7) = 2;
          v14 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::PlayerButton>(0);
          *((_QWORD *)this + 2) = v14;
          TagFallback = v17;
        }
        v12 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::PlayerButton>(a3, v14, TagFallback);
        goto LABEL_34;
      }
    }
    else if (v9 == 1 && v8 == 10)
    {
      if (*((_DWORD *)this + 7) == 1)
      {
        v15 = (SnippetUI::Button *)*((_QWORD *)this + 2);
      }
      else
      {
        SnippetUI::Button_Container_ButtonItem::clear_value((uint64_t)this);
        *((_DWORD *)this + 7) = 1;
        v15 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Button>(0);
        *((_QWORD *)this + 2) = v15;
        TagFallback = v17;
      }
      v12 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::Button>(a3, v15, TagFallback);
      goto LABEL_34;
    }
    if (!(_DWORD)v8 || (v8 & 7) == 4)
      break;
    v12 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v8, v5, TagFallback, a3, v6);
LABEL_34:
    v17 = (google::protobuf::internal *)v12;
    if (!v12)
      return 0;
  }
  *((_DWORD *)a3 + 20) = (_DWORD)v8 - 1;
  return TagFallback;
}

const google::protobuf::UnknownFieldSet *SnippetUI::Button_Container_ButtonItem::InternalSerializeWithCachedSizesToArray(SnippetUI::Button_Container_ButtonItem *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  int v6;
  SnippetUI::Button *v7;
  unsigned int v8;
  unsigned __int8 *v9;
  unsigned int v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  unsigned int v13;
  unsigned int v14;
  SnippetUI::PlayerButton *v15;
  unsigned int v16;
  unsigned __int8 *v17;
  unsigned int v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  unsigned int v21;
  unsigned int v22;
  SnippetUI::CustomCanvas *v23;
  unsigned int v24;
  unsigned __int8 *v25;
  unsigned int v26;
  unsigned __int8 *v27;
  unsigned __int8 *v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;

  v6 = *((_DWORD *)this + 7);
  if (v6 == 1)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
    v7 = (SnippetUI::Button *)*((_QWORD *)this + 2);
    *a2 = 10;
    v8 = *((_DWORD *)v7 + 17);
    if (v8 > 0x7F)
    {
      a2[1] = v8 | 0x80;
      v10 = v8 >> 7;
      if (v8 >> 14)
      {
        v11 = (unsigned __int8 *)(a2 + 2);
        do
        {
          v12 = v11;
          *v11++ = v10 | 0x80;
          v13 = v10 >> 7;
          v14 = v10 >> 14;
          v10 >>= 7;
        }
        while (v14);
        v9 = v12 + 2;
        *v11 = v13;
      }
      else
      {
        a2[2] = v10;
        v9 = (unsigned __int8 *)(a2 + 3);
      }
    }
    else
    {
      a2[1] = v8;
      v9 = (unsigned __int8 *)(a2 + 2);
    }
    a2 = (char *)SnippetUI::Button::InternalSerializeWithCachedSizesToArray(v7, (google::protobuf::UnknownFieldSet *)v9, a3, a4);
    v6 = *((_DWORD *)this + 7);
  }
  if (v6 == 2)
  {
    if ((unint64_t)a2 >= *(_QWORD *)a3)
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
    v15 = (SnippetUI::PlayerButton *)*((_QWORD *)this + 2);
    *a2 = 18;
    v16 = *((_DWORD *)v15 + 8);
    if (v16 > 0x7F)
    {
      a2[1] = v16 | 0x80;
      v18 = v16 >> 7;
      if (v16 >> 14)
      {
        v19 = (unsigned __int8 *)(a2 + 2);
        do
        {
          v20 = v19;
          *v19++ = v18 | 0x80;
          v21 = v18 >> 7;
          v22 = v18 >> 14;
          v18 >>= 7;
        }
        while (v22);
        v17 = v20 + 2;
        *v19 = v21;
      }
      else
      {
        a2[2] = v18;
        v17 = (unsigned __int8 *)(a2 + 3);
      }
    }
    else
    {
      a2[1] = v16;
      v17 = (unsigned __int8 *)(a2 + 2);
    }
    a2 = (char *)SnippetUI::PlayerButton::InternalSerializeWithCachedSizesToArray(v15, (char *)v17, a3, a4);
    v6 = *((_DWORD *)this + 7);
  }
  if (v6 == 3)
  {
    if ((unint64_t)a2 >= *(_QWORD *)a3)
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
    v23 = (SnippetUI::CustomCanvas *)*((_QWORD *)this + 2);
    *a2 = 26;
    v24 = *((_DWORD *)v23 + 13);
    if (v24 > 0x7F)
    {
      a2[1] = v24 | 0x80;
      v26 = v24 >> 7;
      if (v24 >> 14)
      {
        v27 = (unsigned __int8 *)(a2 + 2);
        do
        {
          v28 = v27;
          *v27++ = v26 | 0x80;
          v29 = v26 >> 7;
          v30 = v26 >> 14;
          v26 >>= 7;
        }
        while (v30);
        v25 = v28 + 2;
        *v27 = v29;
      }
      else
      {
        a2[2] = v26;
        v25 = (unsigned __int8 *)(a2 + 3);
      }
    }
    else
    {
      a2[1] = v24;
      v25 = (unsigned __int8 *)(a2 + 2);
    }
    a2 = (char *)SnippetUI::CustomCanvas::InternalSerializeWithCachedSizesToArray(v23, (char *)v25, a3, a4);
  }
  v31 = *((_QWORD *)this + 1);
  if ((v31 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v31 & 0xFFFFFFFFFFFFFFFELL), (const google::protobuf::UnknownFieldSet *)a2, a3, a4);
  else
    return (const google::protobuf::UnknownFieldSet *)a2;
}

void SnippetUI::Button_Container_ButtonItem::CopyFrom(SnippetUI::Button_Container_ButtonItem *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    SnippetUI::Button_Container_ButtonItem::Clear(this);
    SnippetUI::Button_Container_ButtonItem::MergeFrom(this, a2);
  }
}

void SnippetUI::Button_Container_ButtonItem::MergeFrom(SnippetUI::Button_Container_ButtonItem *this, const google::protobuf::Message *lpsrc)
{
  std::string *v4;
  const SnippetUI::Button_Container_ButtonItem *v5;
  google::protobuf::Message *v6;
  char v7;
  std::string v8[2];

  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Container.pb.cc", 437);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5)
    SnippetUI::Button_Container_ButtonItem::MergeFrom(this, v5);
  else
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
}

void sub_1BFC18900(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::Button_Container_ButtonItem::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 24) = a2;
  return this;
}

uint64_t SnippetUI::Button_Container_ButtonItem::GetMetadata(SnippetUI::Button_Container_ButtonItem *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_Container_2eproto);
  return file_level_metadata_Container_2eproto;
}

void *SnippetUI::Button_Container_ButtonItem::default_instance(SnippetUI::Button_Container_ButtonItem *this)
{
  if (atomic_load(scc_info_Button_Container_ButtonItem_Container_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Button_Container_ButtonItem_Container_2eproto);
  return &SnippetUI::_Button_Container_ButtonItem_default_instance_;
}

void SnippetUI::Button_Container_ButtonItem::MergeFrom(SnippetUI::Button_Container_ButtonItem *this, const SnippetUI::Button_Container_ButtonItem *a2)
{
  std::string *v4;
  uint64_t v5;
  int v6;
  SnippetUI::CustomCanvas *v7;
  SnippetUI::Button *v8;
  SnippetUI::PlayerButton *v9;
  const SnippetUI::CustomCanvas *v10;
  const SnippetUI::Button *v11;
  const SnippetUI::PlayerButton *v12;
  char v13;
  std::string v14[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v14, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Container.pb.cc", 452);
    v4 = google::protobuf::internal::LogMessage::operator<<(v14, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v13, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v14[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::Button_Container_ButtonItem *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  v6 = *((_DWORD *)a2 + 7);
  if (v6 == 1)
  {
    if (*((_DWORD *)this + 7) == 1)
    {
      v8 = (SnippetUI::Button *)*((_QWORD *)this + 2);
    }
    else
    {
      SnippetUI::Button_Container_ButtonItem::clear_value((uint64_t)this);
      *((_DWORD *)this + 7) = 1;
      v8 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Button>(0);
      *((_QWORD *)this + 2) = v8;
      if (*((_DWORD *)a2 + 7) != 1)
      {
        v11 = (const SnippetUI::Button *)&SnippetUI::_Button_default_instance_;
        goto LABEL_23;
      }
    }
    v11 = (const SnippetUI::Button *)*((_QWORD *)a2 + 2);
LABEL_23:
    SnippetUI::Button::MergeFrom(v8, v11);
    return;
  }
  if (v6 != 2)
  {
    if (v6 != 3)
      return;
    if (*((_DWORD *)this + 7) == 3)
    {
      v7 = (SnippetUI::CustomCanvas *)*((_QWORD *)this + 2);
    }
    else
    {
      SnippetUI::Button_Container_ButtonItem::clear_value((uint64_t)this);
      *((_DWORD *)this + 7) = 3;
      v7 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::CustomCanvas>(0);
      *((_QWORD *)this + 2) = v7;
      if (*((_DWORD *)a2 + 7) != 3)
      {
        v10 = (const SnippetUI::CustomCanvas *)&SnippetUI::_CustomCanvas_default_instance_;
        goto LABEL_21;
      }
    }
    v10 = (const SnippetUI::CustomCanvas *)*((_QWORD *)a2 + 2);
LABEL_21:
    SnippetUI::CustomCanvas::MergeFrom(v7, v10);
    return;
  }
  if (*((_DWORD *)this + 7) == 2)
  {
    v9 = (SnippetUI::PlayerButton *)*((_QWORD *)this + 2);
  }
  else
  {
    SnippetUI::Button_Container_ButtonItem::clear_value((uint64_t)this);
    *((_DWORD *)this + 7) = 2;
    v9 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::PlayerButton>(0);
    *((_QWORD *)this + 2) = v9;
    if (*((_DWORD *)a2 + 7) != 2)
    {
      v12 = (const SnippetUI::PlayerButton *)&SnippetUI::_PlayerButton_default_instance_;
      goto LABEL_25;
    }
  }
  v12 = (const SnippetUI::PlayerButton *)*((_QWORD *)a2 + 2);
LABEL_25:
  SnippetUI::PlayerButton::MergeFrom(v9, v12);
}

void sub_1BFC18B14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::Button_Container_ButtonItem::clear_value(uint64_t this)
{
  uint64_t v1;
  int v2;

  v1 = this;
  v2 = *(_DWORD *)(this + 28);
  if (v2 == 3 || v2 == 2 || v2 == 1)
  {
    this = *(_QWORD *)(this + 16);
    if (this)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
  }
  *(_DWORD *)(v1 + 28) = 0;
  return this;
}

char *google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::PlayerButton>(google::protobuf::internal::EpsCopyInputStream *this, SnippetUI::PlayerButton *a2, google::protobuf::internal *a3)
{
  int v6;
  const char *v7;
  char *v8;
  char *result;
  int v10;
  int v11;
  int v12;
  BOOL v13;
  int v14;
  int v15;

  v6 = *(char *)a3;
  v7 = (const char *)*(unsigned __int8 *)a3;
  if (v6 < 0)
  {
    result = google::protobuf::internal::ReadSizeFallback(a3, v7);
    if (!result)
      return result;
    v8 = result;
    LODWORD(v7) = v10;
  }
  else
  {
    v8 = (char *)a3 + 1;
  }
  v11 = google::protobuf::internal::EpsCopyInputStream::PushLimit(this, v8, v7);
  v12 = *((_DWORD *)this + 22);
  v13 = __OFSUB__(v12--, 1);
  *((_DWORD *)this + 22) = v12;
  if (v12 < 0 != v13)
    return 0;
  v14 = v11;
  result = (char *)SnippetUI::PlayerButton::_InternalParse(a2, (google::protobuf::internal *)v8, this);
  if (!result)
    return result;
  ++*((_DWORD *)this + 22);
  if (*((_DWORD *)this + 20))
    return 0;
  v15 = *((_DWORD *)this + 7) + v14;
  *((_DWORD *)this + 7) = v15;
  *(_QWORD *)this = *((_QWORD *)this + 1) + (v15 & (v15 >> 31));
  return result;
}

SnippetUI::Button_Container_ButtonItem *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Button_Container_ButtonItem>(google::protobuf::internal::ArenaImpl *this)
{
  SnippetUI::Button_Container_ButtonItem *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (SnippetUI::Button_Container_ButtonItem *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x20uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::Button_Container_ButtonItem>);
    SnippetUI::Button_Container_ButtonItem::Button_Container_ButtonItem(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (SnippetUI::Button_Container_ButtonItem *)operator new();
    SnippetUI::Button_Container_ButtonItem::Button_Container_ButtonItem(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_1BFC18CC4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D890](v1, 0x10A1C406A65A86DLL);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::Button_Container_ButtonItem>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

SnippetUI::Button_Container *SnippetUI::Button_Container::Button_Container(SnippetUI::Button_Container *this)
{
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_QWORD *)this = &off_1E7937FE8;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_DWORD *)this + 10) = 0;
  if (atomic_load(scc_info_Button_Container_Container_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Button_Container_Container_2eproto);
  return this;
}

void sub_1BFC18DA4(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;

  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((google::protobuf::internal::RepeatedPtrFieldBase *)(v2 + 16));
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::Button_Container::~Button_Container(SnippetUI::Button_Container *this)
{
  uint64_t *v1;

  *(_QWORD *)this = &off_1E7937FE8;
  v1 = (uint64_t *)((char *)this + 8);
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((SnippetUI::Button_Container *)((char *)this + 16));
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
}

{
  uint64_t *v1;

  *(_QWORD *)this = &off_1E7937FE8;
  v1 = (uint64_t *)((char *)this + 8);
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((SnippetUI::Button_Container *)((char *)this + 16));
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  JUMPOUT(0x1C3B8D890);
}

{
  uint64_t *v1;

  *(_QWORD *)this = &off_1E7937FE8;
  v1 = (uint64_t *)((char *)this + 8);
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((SnippetUI::Button_Container *)((char *)this + 16));
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
}

SnippetUI::Button_Container *SnippetUI::Button_Container::New(SnippetUI::Button_Container *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Button_Container>(0);
}

SnippetUI::Button_Container *SnippetUI::Button_Container::New(SnippetUI::Button_Container *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Button_Container>(a2);
}

void SnippetUI::Button_Container::Clear(SnippetUI::Button_Container *this)
{
  uint64_t v2;
  SnippetUI::Button_Container_ButtonItem **v3;
  SnippetUI::Button_Container_ButtonItem *v4;
  std::string *v5;
  google::protobuf::internal::InternalMetadataWithArena *v6;
  char v7;
  char v8;
  std::string v9[2];

  v2 = *((unsigned int *)this + 6);
  if ((v2 & 0x80000000) != 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v9, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1613);
    v5 = google::protobuf::internal::LogMessage::operator<<(v9, "CHECK failed: (n) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v8, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v9[0].__r_.__value_.__l.__data_);
  }
  else if ((_DWORD)v2)
  {
    v3 = (SnippetUI::Button_Container_ButtonItem **)(*((_QWORD *)this + 4) + 8);
    do
    {
      v4 = *v3++;
      SnippetUI::Button_Container_ButtonItem::Clear(v4);
      --v2;
    }
    while (v2);
    *((_DWORD *)this + 6) = 0;
  }
  v7 = *((_BYTE *)this + 8);
  v6 = (SnippetUI::Button_Container *)((char *)this + 8);
  if ((v7 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v6);
}

void sub_1BFC18F14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::Button_Container::IsInitialized(SnippetUI::Button_Container *this)
{
  return 1;
}

char *SnippetUI::Button_Container::ByteSizeLong(SnippetUI::Button_Container *this)
{
  const google::protobuf::UnknownFieldSet *v2;
  uint64_t v3;
  SnippetUI::Button_Container_ButtonItem **v4;
  uint64_t v5;
  SnippetUI::Button_Container_ButtonItem *v6;
  char *v7;

  v2 = (const google::protobuf::UnknownFieldSet *)*((int *)this + 6);
  v3 = *((_QWORD *)this + 4);
  if (v3)
    v4 = (SnippetUI::Button_Container_ButtonItem **)(v3 + 8);
  else
    v4 = 0;
  if ((_DWORD)v2)
  {
    v5 = 8 * (_QWORD)v2;
    do
    {
      v6 = *v4++;
      v7 = SnippetUI::Button_Container_ButtonItem::ByteSizeLong(v6);
      v2 = (const google::protobuf::UnknownFieldSet *)((char *)v2
                                                     + (_QWORD)v7
                                                     + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6));
      v5 -= 8;
    }
    while (v5);
  }
  else
  {
    v2 = 0;
  }
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::Button_Container *)((char *)this + 8), v2, (_DWORD *)this + 10);
  *((_DWORD *)this + 10) = (_DWORD)v2;
  return (char *)v2;
}

uint64_t SnippetUI::Button_Container::GetCachedSize(SnippetUI::Button_Container *this)
{
  return *((unsigned int *)this + 10);
}

google::protobuf::internal *SnippetUI::Button_Container::_InternalParse(SnippetUI::Button_Container *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  uint64_t *v5;
  unsigned int *v6;
  google::protobuf::internal::ParseContext *v7;
  google::protobuf::internal *TagFallback;
  char *v9;
  BOOL v10;
  google::protobuf::internal *v11;
  google::protobuf::internal *v12;
  int *v13;
  uint64_t v14;
  int v15;
  SnippetUI::Button_Container_ButtonItem *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  char *v20;
  char *SizeFallback;
  unsigned int v22;
  int v23;
  int v24;
  BOOL v25;
  int v26;
  int v27;
  unint64_t v28;
  google::protobuf::internal *v30;

  v30 = a2;
  v5 = (uint64_t *)((char *)this + 8);
  v6 = (unsigned int *)((char *)this + 16);
  do
  {
LABEL_2:
    if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v30, *((_DWORD *)a3 + 23)) & 1) != 0)
      return v30;
    TagFallback = (google::protobuf::internal *)((char *)v30 + 1);
    v9 = (char *)*(unsigned __int8 *)v30;
    if ((*(char *)v30 & 0x80000000) == 0)
      goto LABEL_6;
    v9 = (char *)(v9 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v30 + 2);
LABEL_6:
      v30 = TagFallback;
      goto LABEL_7;
    }
    TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v30, v9);
    v30 = TagFallback;
    if (!TagFallback)
      return TagFallback;
LABEL_7:
    if ((_DWORD)v9 == 10)
    {
      v11 = (google::protobuf::internal *)((char *)TagFallback - 1);
      while (1)
      {
        v12 = (google::protobuf::internal *)((char *)v11 + 1);
        v30 = v12;
        v13 = (int *)*((_QWORD *)this + 4);
        if (!v13)
          break;
        v14 = *((int *)this + 6);
        v15 = *v13;
        if ((int)v14 < *v13)
        {
          *((_DWORD *)this + 6) = v14 + 1;
          v16 = *(SnippetUI::Button_Container_ButtonItem **)&v13[2 * v14 + 2];
          goto LABEL_22;
        }
        if (v15 == *((_DWORD *)this + 7))
          goto LABEL_20;
LABEL_21:
        *v13 = v15 + 1;
        v16 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Button_Container_ButtonItem>(*((google::protobuf::internal::ArenaImpl **)this
                                                                                                  + 2));
        v17 = *((_QWORD *)this + 4);
        v18 = *((int *)this + 6);
        *((_DWORD *)this + 6) = v18 + 1;
        *(_QWORD *)(v17 + 8 * v18 + 8) = v16;
        v12 = v30;
LABEL_22:
        v19 = *(unsigned __int8 *)v12;
        if (*(char *)v12 < 0)
        {
          SizeFallback = google::protobuf::internal::ReadSizeFallback(v12, (const char *)*(unsigned __int8 *)v12);
          if (!SizeFallback)
            return 0;
          v20 = SizeFallback;
          v19 = v22;
        }
        else
        {
          v20 = (char *)v12 + 1;
        }
        v23 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v20, v19);
        v24 = *((_DWORD *)a3 + 22);
        v25 = __OFSUB__(v24--, 1);
        *((_DWORD *)a3 + 22) = v24;
        if (v24 < 0 != v25)
          return 0;
        v26 = v23;
        v11 = SnippetUI::Button_Container_ButtonItem::_InternalParse(v16, (google::protobuf::internal *)v20, a3);
        if (!v11)
          return 0;
        ++*((_DWORD *)a3 + 22);
        if (*((_DWORD *)a3 + 20))
          return 0;
        v27 = *((_DWORD *)a3 + 7) + v26;
        *((_DWORD *)a3 + 7) = v27;
        v28 = *((_QWORD *)a3 + 1) + (v27 & (v27 >> 31));
        *(_QWORD *)a3 = v28;
        v30 = v11;
        if (v28 <= (unint64_t)v11 || *(_BYTE *)v11 != 10)
          goto LABEL_2;
      }
      v15 = *((_DWORD *)this + 7);
LABEL_20:
      google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v6, v15 + 1);
      v13 = (int *)*((_QWORD *)this + 4);
      v15 = *v13;
      goto LABEL_21;
    }
    if ((_DWORD)v9)
      v10 = (v9 & 7) == 4;
    else
      v10 = 1;
    if (v10)
    {
      *((_DWORD *)a3 + 20) = (_DWORD)v9 - 1;
      return TagFallback;
    }
    v30 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v9, v5, TagFallback, a3, v7);
  }
  while (v30);
  return 0;
}

const google::protobuf::UnknownFieldSet *SnippetUI::Button_Container::InternalSerializeWithCachedSizesToArray(SnippetUI::Button_Container *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  int v7;
  int v8;
  std::string *v9;
  std::string *v10;
  SnippetUI::Button_Container_ButtonItem *v11;
  unsigned int v12;
  char *v13;
  unsigned int v14;
  _BYTE *v15;
  _BYTE *v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  char v21;
  std::string v22[2];

  v7 = *((_DWORD *)this + 6);
  if (v7)
  {
    v8 = 0;
    while ((unint64_t)a2 < *(_QWORD *)a3)
    {
      if (v8 < 0)
        goto LABEL_5;
LABEL_6:
      if (*((_DWORD *)this + 6) <= v8)
      {
        google::protobuf::internal::LogMessage::LogMessage((uint64_t)v22, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1539);
        v10 = google::protobuf::internal::LogMessage::operator<<(v22, "CHECK failed: (index) < (current_size_): ");
        google::protobuf::internal::LogFinisher::operator=((int)&v21, (const char **)&v10->__r_.__value_.__l.__data_);
        google::protobuf::internal::LogMessage::~LogMessage((void **)&v22[0].__r_.__value_.__l.__data_);
      }
      v11 = *(SnippetUI::Button_Container_ButtonItem **)(*((_QWORD *)this + 4) + 8 * v8 + 8);
      *(_BYTE *)a2 = 10;
      v12 = *((_DWORD *)v11 + 6);
      if (v12 > 0x7F)
      {
        *((_BYTE *)a2 + 1) = v12 | 0x80;
        v14 = v12 >> 7;
        if (v12 >> 14)
        {
          v15 = (char *)a2 + 2;
          do
          {
            v16 = v15;
            *v15++ = v14 | 0x80;
            v17 = v14 >> 7;
            v18 = v14 >> 14;
            v14 >>= 7;
          }
          while (v18);
          v13 = v16 + 2;
          *v15 = v17;
        }
        else
        {
          *((_BYTE *)a2 + 2) = v14;
          v13 = (char *)a2 + 3;
        }
      }
      else
      {
        *((_BYTE *)a2 + 1) = v12;
        v13 = (char *)a2 + 2;
      }
      a2 = SnippetUI::Button_Container_ButtonItem::InternalSerializeWithCachedSizesToArray(v11, v13, a3, a4);
      if (++v8 == v7)
        goto LABEL_19;
    }
    a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_6;
LABEL_5:
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v22, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1538);
    v9 = google::protobuf::internal::LogMessage::operator<<(v22, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v21, (const char **)&v9->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v22[0].__r_.__value_.__l.__data_);
    goto LABEL_6;
  }
LABEL_19:
  v19 = *((_QWORD *)this + 1);
  if ((v19 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v19 & 0xFFFFFFFFFFFFFFFELL), a2, a3, a4);
  else
    return a2;
}

void sub_1BFC193E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void SnippetUI::Button_Container::CopyFrom(int **this, int **a2)
{
  if (a2 != this)
  {
    SnippetUI::Button_Container::Clear((SnippetUI::Button_Container *)this);
    SnippetUI::Button_Container::MergeFrom(this, a2);
  }
}

{
  if (a2 != this)
  {
    SnippetUI::Button_Container::Clear((SnippetUI::Button_Container *)this);
    SnippetUI::Button_Container::MergeFrom(this, a2);
  }
}

void SnippetUI::Button_Container::MergeFrom(int **this, int **lpsrc)
{
  std::string *v4;
  int **v5;
  google::protobuf::Message *v6;
  char v7;
  std::string v8[2];

  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Container.pb.cc", 645);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5)
    SnippetUI::Button_Container::MergeFrom(this, v5);
  else
    google::protobuf::internal::ReflectionOps::Merge((google::protobuf::internal::ReflectionOps *)lpsrc, (const google::protobuf::Message *)this, v6);
}

void sub_1BFC194E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::Button_Container::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 40) = a2;
  return this;
}

uint64_t SnippetUI::Button_Container::GetMetadata(SnippetUI::Button_Container *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_Container_2eproto);
  return qword_1EF583628;
}

void *SnippetUI::Button_Container::default_instance(SnippetUI::Button_Container *this)
{
  if (atomic_load(scc_info_Button_Container_Container_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Button_Container_Container_2eproto);
  return &SnippetUI::_Button_Container_default_instance_;
}

void SnippetUI::Button_Container::MergeFrom(int **this, int **a2)
{
  std::string *v4;
  unint64_t v5;
  char v6;
  std::string v7[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Container.pb.cc", 660);
    v4 = google::protobuf::internal::LogMessage::operator<<(v7, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v6, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v7[0].__r_.__value_.__l.__data_);
  }
  v5 = (unint64_t)a2[1];
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((google::protobuf::internal::InternalMetadataWithArena *)(this + 1), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<SnippetUI::Button_Container_ButtonItem>::TypeHandler>(this + 2, (uint64_t)(a2 + 2));
}

void sub_1BFC195F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<SnippetUI::Button_Container_ButtonItem>::TypeHandler>(int **this, uint64_t a2)
{
  std::string *v4;
  int v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  SnippetUI::Button_Container_ButtonItem **v13;
  SnippetUI::Button_Container_ButtonItem **v14;
  SnippetUI::Button_Container_ButtonItem *v15;
  SnippetUI::Button_Container_ButtonItem *v16;
  SnippetUI::Button_Container_ButtonItem *v17;
  google::protobuf::internal::ArenaImpl *v18;
  int v19;
  uint64_t v20;
  SnippetUI::Button_Container_ButtonItem **v21;
  SnippetUI::Button_Container_ButtonItem **v22;
  SnippetUI::Button_Container_ButtonItem *v23;
  SnippetUI::Button_Container_ButtonItem *v24;
  int v25;
  int *v26;
  char v27;
  std::string v28[2];

  if ((int **)a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1632);
    v4 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
  }
  v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    v6 = *(_QWORD *)(a2 + 16);
    v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)this, *(_DWORD *)(a2 + 8));
    v8 = v7;
    v9 = *this[2];
    v10 = *((int *)this + 2);
    v11 = v9 - v10;
    if ((int)v9 - (int)v10 >= v5)
      v12 = v5;
    else
      v12 = v11;
    if ((int)v12 >= 1)
    {
      v13 = (SnippetUI::Button_Container_ButtonItem **)(v6 + 8);
      v14 = (SnippetUI::Button_Container_ButtonItem **)v7;
      do
      {
        v16 = *v13++;
        v15 = v16;
        v17 = *v14++;
        google::protobuf::internal::GenericTypeHandler<SnippetUI::Button_Container_ButtonItem>::Merge(v15, v17);
        --v12;
      }
      while (v12);
    }
    if (v11 < v5)
    {
      v18 = (google::protobuf::internal::ArenaImpl *)*this;
      v19 = v10 + v5 - v9;
      v20 = 8 * v9 - 8 * v10;
      v21 = (SnippetUI::Button_Container_ButtonItem **)((char *)v8 + v20);
      v22 = (SnippetUI::Button_Container_ButtonItem **)(v20 + v6 + 8);
      do
      {
        v23 = *v22++;
        v24 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Button_Container_ButtonItem>(v18);
        google::protobuf::internal::GenericTypeHandler<SnippetUI::Button_Container_ButtonItem>::Merge(v23, v24);
        *v21++ = v24;
        --v19;
      }
      while (v19);
    }
    v25 = *((_DWORD *)this + 2) + v5;
    *((_DWORD *)this + 2) = v25;
    v26 = this[2];
    if (*v26 < v25)
      *v26 = v25;
  }
}

void sub_1BFC1975C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::GenericTypeHandler<SnippetUI::Button_Container_ButtonItem>::Merge(SnippetUI::Button_Container_ButtonItem *a1, SnippetUI::Button_Container_ButtonItem *this)
{
  SnippetUI::Button_Container_ButtonItem::MergeFrom(this, a1);
}

SnippetUI::Button_Container *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Button_Container>(google::protobuf::internal::ArenaImpl *this)
{
  SnippetUI::Button_Container *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (SnippetUI::Button_Container *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x30uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::Button_Container>);
    SnippetUI::Button_Container::Button_Container(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (SnippetUI::Button_Container *)operator new();
    SnippetUI::Button_Container::Button_Container(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_1BFC19808(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D890](v1, 0x10A1C40290C9B23);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::Button_Container>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

void SnippetUI::Button_Container_ButtonItem::InitAsDefaultInstance(SnippetUI::Button_Container_ButtonItem *this)
{
  qword_1ED1D4928 = (uint64_t)&SnippetUI::_Button_default_instance_;
  unk_1ED1D4930 = &SnippetUI::_PlayerButton_default_instance_;
  qword_1ED1D4938 = (uint64_t)&SnippetUI::_CustomCanvas_default_instance_;
}

uint64_t SnippetUI::Button_Container_ButtonItem::_Internal::button(SnippetUI::Button_Container_ButtonItem::_Internal *this, const SnippetUI::Button_Container_ButtonItem *a2)
{
  return *((_QWORD *)this + 2);
}

uint64_t SnippetUI::Button_Container_ButtonItem::_Internal::player_button(SnippetUI::Button_Container_ButtonItem::_Internal *this, const SnippetUI::Button_Container_ButtonItem *a2)
{
  return *((_QWORD *)this + 2);
}

uint64_t SnippetUI::Button_Container_ButtonItem::_Internal::custom_canvas(SnippetUI::Button_Container_ButtonItem::_Internal *this, const SnippetUI::Button_Container_ButtonItem *a2)
{
  return *((_QWORD *)this + 2);
}

uint64_t SnippetUI::Button_Container_ButtonItem::set_allocated_button(SnippetUI::Button_Container_ButtonItem *this, SnippetUI::Button *a2)
{
  uint64_t result;

  result = SnippetUI::Button_Container_ButtonItem::clear_value((uint64_t)this);
  if (a2)
  {
    *((_DWORD *)this + 7) = 1;
    *((_QWORD *)this + 2) = a2;
  }
  return result;
}

uint64_t SnippetUI::Button_Container_ButtonItem::clear_button(uint64_t this)
{
  uint64_t v1;

  if (*(_DWORD *)(this + 28) == 1)
  {
    v1 = this;
    this = *(_QWORD *)(this + 16);
    if (this)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
    *(_DWORD *)(v1 + 28) = 0;
  }
  return this;
}

uint64_t SnippetUI::Button_Container_ButtonItem::set_allocated_player_button(SnippetUI::Button_Container_ButtonItem *this, SnippetUI::PlayerButton *a2)
{
  uint64_t result;

  result = SnippetUI::Button_Container_ButtonItem::clear_value((uint64_t)this);
  if (a2)
  {
    *((_DWORD *)this + 7) = 2;
    *((_QWORD *)this + 2) = a2;
  }
  return result;
}

uint64_t SnippetUI::Button_Container_ButtonItem::clear_player_button(uint64_t this)
{
  uint64_t v1;

  if (*(_DWORD *)(this + 28) == 2)
  {
    v1 = this;
    this = *(_QWORD *)(this + 16);
    if (this)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
    *(_DWORD *)(v1 + 28) = 0;
  }
  return this;
}

uint64_t SnippetUI::Button_Container_ButtonItem::set_allocated_custom_canvas(SnippetUI::Button_Container_ButtonItem *this, SnippetUI::CustomCanvas *a2)
{
  uint64_t result;

  result = SnippetUI::Button_Container_ButtonItem::clear_value((uint64_t)this);
  if (a2)
  {
    *((_DWORD *)this + 7) = 3;
    *((_QWORD *)this + 2) = a2;
  }
  return result;
}

uint64_t SnippetUI::Button_Container_ButtonItem::clear_custom_canvas(uint64_t this)
{
  uint64_t v1;

  if (*(_DWORD *)(this + 28) == 3)
  {
    v1 = this;
    this = *(_QWORD *)(this + 16);
    if (this)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
    *(_DWORD *)(v1 + 28) = 0;
  }
  return this;
}

SnippetUI::Button_Container_ButtonItem *SnippetUI::Button_Container_ButtonItem::Button_Container_ButtonItem(SnippetUI::Button_Container_ButtonItem *this, const SnippetUI::Button_Container_ButtonItem *a2)
{
  uint64_t v4;
  int v5;
  SnippetUI::CustomCanvas *v6;
  const SnippetUI::CustomCanvas *v7;
  SnippetUI::Button *v8;
  const SnippetUI::Button *v9;
  SnippetUI::PlayerButton *v10;
  const SnippetUI::PlayerButton *v11;

  *(_QWORD *)this = &off_1E7937F28;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 6) = 0;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::Button_Container_ButtonItem *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  *((_DWORD *)this + 7) = 0;
  v5 = *((_DWORD *)a2 + 7);
  switch(v5)
  {
    case 1:
      SnippetUI::Button_Container_ButtonItem::clear_value((uint64_t)this);
      *((_DWORD *)this + 7) = 1;
      v8 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Button>(0);
      *((_QWORD *)this + 2) = v8;
      if (*((_DWORD *)a2 + 7) == 1)
        v9 = (const SnippetUI::Button *)*((_QWORD *)a2 + 2);
      else
        v9 = (const SnippetUI::Button *)&SnippetUI::_Button_default_instance_;
      SnippetUI::Button::MergeFrom(v8, v9);
      break;
    case 2:
      SnippetUI::Button_Container_ButtonItem::clear_value((uint64_t)this);
      *((_DWORD *)this + 7) = 2;
      v10 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::PlayerButton>(0);
      *((_QWORD *)this + 2) = v10;
      if (*((_DWORD *)a2 + 7) == 2)
        v11 = (const SnippetUI::PlayerButton *)*((_QWORD *)a2 + 2);
      else
        v11 = (const SnippetUI::PlayerButton *)&SnippetUI::_PlayerButton_default_instance_;
      SnippetUI::PlayerButton::MergeFrom(v10, v11);
      break;
    case 3:
      SnippetUI::Button_Container_ButtonItem::clear_value((uint64_t)this);
      *((_DWORD *)this + 7) = 3;
      v6 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::CustomCanvas>(0);
      *((_QWORD *)this + 2) = v6;
      if (*((_DWORD *)a2 + 7) == 3)
        v7 = (const SnippetUI::CustomCanvas *)*((_QWORD *)a2 + 2);
      else
        v7 = (const SnippetUI::CustomCanvas *)&SnippetUI::_CustomCanvas_default_instance_;
      SnippetUI::CustomCanvas::MergeFrom(v6, v7);
      break;
  }
  return this;
}

void sub_1BFC19B04(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::Button_Container_ButtonItem::CopyFrom(SnippetUI::Button_Container_ButtonItem *this, const SnippetUI::Button_Container_ButtonItem *a2)
{
  if (a2 != this)
  {
    SnippetUI::Button_Container_ButtonItem::Clear(this);
    SnippetUI::Button_Container_ButtonItem::MergeFrom(this, a2);
  }
}

void SnippetUI::Button_Container_ButtonItem::InternalSwap(SnippetUI::Button_Container_ButtonItem *this, SnippetUI::Button_Container_ButtonItem *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  uint64_t v5;
  google::protobuf::UnknownFieldSet *v6;
  uint64_t v7;
  google::protobuf::UnknownFieldSet *v8;

  v4 = (SnippetUI::Button_Container_ButtonItem *)((char *)this + 8);
  v5 = *((_QWORD *)a2 + 1);
  if ((*((_BYTE *)this + 8) & 1) != 0)
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v6 = v8;
      goto LABEL_6;
    }
  }
  else if ((v5 & 1) == 0)
  {
    goto LABEL_7;
  }
  v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
  google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
LABEL_7:
  v7 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v7;
  LODWORD(v7) = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v7;
}

SnippetUI::Button_Container *SnippetUI::Button_Container::Button_Container(SnippetUI::Button_Container *this, const SnippetUI::Button_Container *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  uint64_t v5;

  *(_QWORD *)this = &off_1E7937FE8;
  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (SnippetUI::Button_Container *)((char *)this + 8);
  *(_OWORD *)((char *)this + 24) = 0u;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<SnippetUI::Button_Container_ButtonItem>::TypeHandler>((int **)this + 2, (uint64_t)a2 + 16);
  *((_DWORD *)this + 10) = 0;
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom(v4, (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  return this;
}

void sub_1BFC19C4C(_Unwind_Exception *a1)
{
  uint64_t *v1;
  google::protobuf::internal::RepeatedPtrFieldBase *v2;

  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::Button_Container::InternalSwap(SnippetUI::Button_Container *this, SnippetUI::Button_Container *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  uint64_t v5;
  google::protobuf::UnknownFieldSet *v6;
  google::protobuf::UnknownFieldSet *v7;

  v4 = (SnippetUI::Button_Container *)((char *)this + 8);
  v5 = *((_QWORD *)a2 + 1);
  if ((*((_BYTE *)this + 8) & 1) != 0)
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v6 = v7;
      goto LABEL_6;
    }
  }
  else if ((v5 & 1) == 0)
  {
    goto LABEL_7;
  }
  v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
  google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
LABEL_7:
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((SnippetUI::Button_Container *)((char *)this + 16), (SnippetUI::Button_Container *)((char *)a2 + 16));
}

void InitDefaultsscc_info_Switch_Switch_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Switch.pb.cc", a4);
  SnippetUI::Switch::Switch((SnippetUI::Switch *)&SnippetUI::_Switch_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_Switch_default_instance_, v4);
  qword_1ED1D3C08 = (uint64_t)&SnippetUI::_ActionProperty_default_instance_;
  unk_1ED1D3C10 = &SnippetUI::_ActionProperty_default_instance_;
}

SnippetUI::Switch *SnippetUI::Switch::Switch(SnippetUI::Switch *this)
{
  *(_QWORD *)this = &off_1E7938168;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 13) = 0;
  if (atomic_load(scc_info_Switch_Switch_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Switch_Switch_2eproto);
  *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_BYTE *)this + 48) = 0;
  return this;
}

void sub_1BFC19E28(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::Switch::~Switch(SnippetUI::Switch *this)
{
  SnippetUI::Switch::~Switch(this);
  JUMPOUT(0x1C3B8D890);
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)this = &off_1E7938168;
  v2 = *((_QWORD *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x1C3B8D890](v2, 0x1012C40EC159624);
  }
  v4 = *((_QWORD *)this + 3);
  if ((uint64_t *)v4 != &google::protobuf::internal::fixed_address_empty_string && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0)
      operator delete(*(void **)v4);
    MEMORY[0x1C3B8D890](v4, 0x1012C40EC159624);
  }
  if (this != (SnippetUI::Switch *)&SnippetUI::_Switch_default_instance_)
  {
    v6 = *((_QWORD *)this + 4);
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    v7 = *((_QWORD *)this + 5);
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

SnippetUI::Switch *SnippetUI::Switch::New(SnippetUI::Switch *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Switch>(0);
}

SnippetUI::Switch *SnippetUI::Switch::New(SnippetUI::Switch *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Switch>(a2);
}

void SnippetUI::Switch::Clear(SnippetUI::Switch *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char v7;

  v2 = *((_QWORD *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(_BYTE **)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v2 = 0;
      *(_BYTE *)(v2 + 23) = 0;
    }
  }
  v3 = *((_QWORD *)this + 3);
  if ((uint64_t *)v3 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v3 + 23) < 0)
    {
      **(_BYTE **)v3 = 0;
      *(_QWORD *)(v3 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v3 = 0;
      *(_BYTE *)(v3 + 23) = 0;
    }
  }
  v4 = *((_QWORD *)this + 4);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  *((_QWORD *)this + 4) = 0;
  v5 = *((_QWORD *)this + 5);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v7 = *((_BYTE *)this + 8);
  v6 = (char *)this + 8;
  *((_QWORD *)v6 + 4) = 0;
  v6[40] = 0;
  if ((v7 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoClear((google::protobuf::internal::InternalMetadataWithArena *)v6);
}

uint64_t SnippetUI::Switch::IsInitialized(SnippetUI::Switch *this)
{
  return 1;
}

char *SnippetUI::Switch::ByteSizeLong(SnippetUI::Switch *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  SnippetUI::ActionProperty *v9;
  char *v10;
  SnippetUI::ActionProperty *v11;
  char *v12;
  const google::protobuf::UnknownFieldSet *v13;

  v2 = *((_QWORD *)this + 2);
  v3 = *(unsigned __int8 *)(v2 + 23);
  if (*(char *)(v2 + 23) < 0)
  {
    if (*(_QWORD *)(v2 + 8))
      goto LABEL_3;
LABEL_7:
    v5 = 0;
    goto LABEL_8;
  }
  if (!*(_BYTE *)(v2 + 23))
    goto LABEL_7;
LABEL_3:
  v4 = *(_QWORD *)(v2 + 8);
  if ((v3 & 0x80u) == 0)
    v4 = v3;
  v5 = v4 + ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_8:
  v6 = *((_QWORD *)this + 3);
  v7 = *(unsigned __int8 *)(v6 + 23);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(_QWORD *)(v6 + 8))
      goto LABEL_13;
  }
  else if (!*(_BYTE *)(v6 + 23))
  {
    goto LABEL_13;
  }
  v8 = *(_QWORD *)(v6 + 8);
  if ((v7 & 0x80u) == 0)
    v8 = v7;
  v5 += v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_13:
  if (this != (SnippetUI::Switch *)&SnippetUI::_Switch_default_instance_)
  {
    v9 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 4);
    if (v9)
    {
      v10 = SnippetUI::ActionProperty::ByteSizeLong(v9);
      v5 += (uint64_t)&v10[((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6) + 1];
    }
    v11 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 5);
    if (v11)
    {
      v12 = SnippetUI::ActionProperty::ByteSizeLong(v11);
      v5 += (uint64_t)&v12[((9 * (__clz(v12 | 1) ^ 0x1F) + 73) >> 6) + 1];
    }
  }
  if (*((_BYTE *)this + 48))
    v13 = (const google::protobuf::UnknownFieldSet *)(v5 + 2);
  else
    v13 = (const google::protobuf::UnknownFieldSet *)v5;
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::Switch *)((char *)this + 8), v13, (_DWORD *)this + 13);
  *((_DWORD *)this + 13) = (_DWORD)v13;
  return (char *)v13;
}

uint64_t SnippetUI::Switch::GetCachedSize(SnippetUI::Switch *this)
{
  return *((unsigned int *)this + 13);
}

google::protobuf::internal *SnippetUI::Switch::_InternalParse(SnippetUI::Switch *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  std::string **v5;
  std::string **v6;
  uint64_t *v7;
  google::protobuf::internal::ParseContext *v8;
  google::protobuf::internal *TagFallback;
  char *v10;
  std::string *v11;
  char *v12;
  SnippetUI::ActionProperty *v13;
  google::protobuf::internal *v14;
  unint64_t v15;
  int v16;
  std::string *v17;
  BOOL v18;
  google::protobuf::internal *v19;
  uint64_t v20;
  google::protobuf::internal *v22;

  v22 = a2;
  v5 = (std::string **)((char *)this + 24);
  v6 = (std::string **)((char *)this + 16);
  v7 = (uint64_t *)((char *)this + 8);
  while (2)
  {
    if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v22, *((_DWORD *)a3 + 23)) & 1) != 0)
      return v22;
    TagFallback = (google::protobuf::internal *)((char *)v22 + 1);
    v10 = (char *)*(unsigned __int8 *)v22;
    if ((*(char *)v22 & 0x80000000) == 0)
      goto LABEL_6;
    v10 = (char *)(v10 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v22 + 2);
LABEL_6:
      v22 = TagFallback;
      goto LABEL_7;
    }
    TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v22, v10);
    v22 = TagFallback;
    if (!TagFallback)
      return TagFallback;
LABEL_7:
    switch(v10 >> 3)
    {
      case 1u:
        if (v10 != 10)
          goto LABEL_29;
        v11 = *v6;
        if (*v6 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v6, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v11 = *v6;
          TagFallback = v22;
        }
        v12 = google::protobuf::internal::InlineGreedyStringParserUTF8(v11, (std::string::value_type *)TagFallback, (uint64_t)a3, (google::protobuf::internal *)"SnippetUI.Switch.identifier");
        goto LABEL_34;
      case 2u:
        if (v10 != 18)
          goto LABEL_29;
        v13 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 4);
        if (v13)
          goto LABEL_19;
        v13 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
        *((_QWORD *)this + 4) = v13;
        goto LABEL_18;
      case 3u:
        if (v10 != 26)
          goto LABEL_29;
        v13 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 5);
        if (v13)
          goto LABEL_19;
        v13 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
        *((_QWORD *)this + 5) = v13;
LABEL_18:
        TagFallback = v22;
LABEL_19:
        v12 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::ActionProperty>(a3, v13, TagFallback);
        goto LABEL_34;
      case 4u:
        if (v10 != 32)
          goto LABEL_29;
        v14 = (google::protobuf::internal *)((char *)TagFallback + 1);
        v15 = *(unsigned __int8 *)TagFallback;
        if ((*(char *)TagFallback & 0x80000000) == 0)
          goto LABEL_24;
        v16 = *(char *)v14;
        v15 = v15 + (v16 << 7) - 128;
        if (v16 < 0)
        {
          v19 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(TagFallback, v15);
          v22 = v19;
          *((_BYTE *)this + 48) = v20 != 0;
          if (!v19)
            goto LABEL_39;
        }
        else
        {
          v14 = (google::protobuf::internal *)((char *)TagFallback + 2);
LABEL_24:
          v22 = v14;
          *((_BYTE *)this + 48) = v15 != 0;
        }
        continue;
      case 5u:
        if (v10 != 42)
          goto LABEL_29;
        v17 = *v5;
        if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v17 = *v5;
          TagFallback = v22;
        }
        v12 = google::protobuf::internal::InlineGreedyStringParser(v17, (std::string::value_type *)TagFallback, (uint64_t)a3);
        goto LABEL_34;
      default:
LABEL_29:
        if ((_DWORD)v10)
          v18 = (v10 & 7) == 4;
        else
          v18 = 1;
        if (v18)
        {
          *((_DWORD *)a3 + 20) = (_DWORD)v10 - 1;
          return TagFallback;
        }
        v12 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v10, v7, TagFallback, a3, v8);
LABEL_34:
        v22 = (google::protobuf::internal *)v12;
        if (v12)
          continue;
LABEL_39:
        TagFallback = 0;
        break;
    }
    return TagFallback;
  }
}

const google::protobuf::UnknownFieldSet *SnippetUI::Switch::InternalSerializeWithCachedSizesToArray(SnippetUI::Switch *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  google::protobuf::internal *v7;
  const char *v8;
  SnippetUI::ActionProperty *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  google::protobuf::UnknownFieldSet *v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  unsigned int v16;
  unsigned int v17;
  SnippetUI::ActionProperty *v18;
  unsigned int v19;
  unsigned __int8 *v20;
  unsigned int v21;
  unsigned __int8 *v22;
  unsigned __int8 *v23;
  unsigned int v24;
  unsigned int v25;
  unsigned __int8 v26;
  uint64_t v27;
  uint64_t v28;

  v7 = (google::protobuf::internal *)*((_QWORD *)this + 2);
  if (*((char *)v7 + 23) < 0)
  {
    v8 = (const char *)*((_QWORD *)v7 + 1);
    if (!v8)
      goto LABEL_7;
    v7 = *(google::protobuf::internal **)v7;
    goto LABEL_6;
  }
  v8 = (const char *)*((unsigned __int8 *)v7 + 23);
  if (*((_BYTE *)v7 + 23))
  {
LABEL_6:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v7, v8, 1, (google::protobuf::internal *)"SnippetUI.Switch.identifier");
    a2 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 1, *((_QWORD *)this + 2), a2);
  }
LABEL_7:
  if (this == (SnippetUI::Switch *)&SnippetUI::_Switch_default_instance_)
    goto LABEL_31;
  v9 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 4);
  if (v9)
  {
    if ((unint64_t)a2 >= *(_QWORD *)a3)
    {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      v9 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 4);
    }
    *a2 = 18;
    v10 = *((_DWORD *)v9 + 12);
    if (v10 > 0x7F)
    {
      a2[1] = v10 | 0x80;
      v12 = v10 >> 7;
      if (v10 >> 14)
      {
        v14 = (unsigned __int8 *)(a2 + 2);
        do
        {
          v15 = v14;
          *v14++ = v12 | 0x80;
          v16 = v12 >> 7;
          v17 = v12 >> 14;
          v12 >>= 7;
        }
        while (v17);
        v13 = (google::protobuf::UnknownFieldSet *)(v15 + 2);
        *v14 = v16;
        goto LABEL_19;
      }
      a2[2] = v12;
      v11 = 3;
    }
    else
    {
      a2[1] = v10;
      v11 = 2;
    }
    v13 = (google::protobuf::UnknownFieldSet *)&a2[v11];
LABEL_19:
    a2 = (char *)SnippetUI::ActionProperty::InternalSerializeWithCachedSizesToArray(v9, v13, a3, a4);
  }
  v18 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 5);
  if (v18)
  {
    if ((unint64_t)a2 >= *(_QWORD *)a3)
    {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      v18 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 5);
    }
    *a2 = 26;
    v19 = *((_DWORD *)v18 + 12);
    if (v19 > 0x7F)
    {
      a2[1] = v19 | 0x80;
      v21 = v19 >> 7;
      if (v19 >> 14)
      {
        v22 = (unsigned __int8 *)(a2 + 2);
        do
        {
          v23 = v22;
          *v22++ = v21 | 0x80;
          v24 = v21 >> 7;
          v25 = v21 >> 14;
          v21 >>= 7;
        }
        while (v25);
        v20 = v23 + 2;
        *v22 = v24;
      }
      else
      {
        a2[2] = v21;
        v20 = (unsigned __int8 *)(a2 + 3);
      }
    }
    else
    {
      a2[1] = v19;
      v20 = (unsigned __int8 *)(a2 + 2);
    }
    a2 = (char *)SnippetUI::ActionProperty::InternalSerializeWithCachedSizesToArray(v18, (google::protobuf::UnknownFieldSet *)v20, a3, a4);
  }
LABEL_31:
  if (*((_BYTE *)this + 48))
  {
    if ((unint64_t)a2 >= *(_QWORD *)a3)
    {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      v26 = *((_BYTE *)this + 48);
    }
    else
    {
      v26 = 1;
    }
    *a2 = 32;
    a2[1] = v26;
    a2 += 2;
  }
  v27 = *((_QWORD *)this + 3);
  if ((*(char *)(v27 + 23) & 0x80000000) == 0)
  {
    if (!*(_BYTE *)(v27 + 23))
      goto LABEL_38;
    goto LABEL_37;
  }
  if (*(_QWORD *)(v27 + 8))
LABEL_37:
    a2 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 5, v27, a2);
LABEL_38:
  v28 = *((_QWORD *)this + 1);
  if ((v28 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v28 & 0xFFFFFFFFFFFFFFFELL), (const google::protobuf::UnknownFieldSet *)a2, a3, a4);
  else
    return (const google::protobuf::UnknownFieldSet *)a2;
}

