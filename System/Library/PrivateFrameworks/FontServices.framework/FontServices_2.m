uint64_t sub_1B097A960@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(result + 8);
  v5 = *(_QWORD *)(result + 16);
  if (__OFSUB__(v5, v4))
  {
    __break(1u);
  }
  else
  {
    *(_DWORD *)a4 = *(_DWORD *)result;
    *(_QWORD *)(a4 + 8) = v4;
    *(_QWORD *)(a4 + 16) = v5;
    *(_QWORD *)(a4 + 24) = v5 - v4;
    *(_QWORD *)(a4 + 32) = a2;
    *(_QWORD *)(a4 + 40) = a3;
    *(_QWORD *)(a4 + 48) = v4;
    *(_BYTE *)(a4 + 56) = 2;
    *(_QWORD *)(a4 + 64) = 0;
    *(_BYTE *)(a4 + 72) = 1;
  }
  return result;
}

uint64_t sub_1B097A99C(unsigned int a1)
{
  unint64_t v1;
  int v4;
  int v5;
  int v6;

  v1 = 0xD000000000000010;
  if (a1 == 1634758764)
    return 0xD000000000000017;
  if (a1 == 1651076196)
    return 0x726556206C6F6F54;
  sub_1B08E3F8C("wtrm", 4, &v6);
  if (v6 == a1)
    return 0x72616D7265746157;
  sub_1B08E3F8C("dlng", 4, &v5);
  if (v5 != a1)
  {
    sub_1B08E3F8C("slng", 4, &v4);
    if (v4 == a1)
      return 0xD000000000000013;
    else
      return _s10FontParser7SfntTagV11descriptionSSvg_0(a1);
  }
  return v1;
}

uint64_t sub_1B097AAC8()
{
  unsigned int *v0;

  return sub_1B097A99C(*v0);
}

BOOL sub_1B097AAD0(_DWORD *a1, _DWORD *a2)
{
  return *a1 < *a2;
}

BOOL sub_1B097AAE4(_DWORD *a1, _DWORD *a2)
{
  return *a2 >= *a1;
}

BOOL sub_1B097AAF8(_DWORD *a1, _DWORD *a2)
{
  return *a1 >= *a2;
}

BOOL sub_1B097AB0C(_DWORD *a1, _DWORD *a2)
{
  return *a2 < *a1;
}

unint64_t sub_1B097AB24()
{
  unint64_t result;

  result = qword_1EEEBC908;
  if (!qword_1EEEBC908)
  {
    result = MEMORY[0x1B5E0D530](&unk_1B0A3D1CC, &type metadata for MetadataKey);
    atomic_store(result, (unint64_t *)&qword_1EEEBC908);
  }
  return result;
}

unint64_t sub_1B097AB68()
{
  unint64_t result;

  result = qword_1EEEBC910;
  if (!qword_1EEEBC910)
  {
    result = MEMORY[0x1B5E0D530](MEMORY[0x1E0DEA9B8], MEMORY[0x1E0DEA968]);
    atomic_store(result, (unint64_t *)&qword_1EEEBC910);
  }
  return result;
}

unint64_t sub_1B097ABAC()
{
  unint64_t result;

  result = qword_1EEEBC918;
  if (!qword_1EEEBC918)
  {
    result = MEMORY[0x1B5E0D530](MEMORY[0x1E0DEBB28], MEMORY[0x1E0DEBAF0]);
    atomic_store(result, (unint64_t *)&qword_1EEEBC918);
  }
  return result;
}

uint64_t sub_1B097ABF0()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v0 = sub_1B0A1D294();
  MEMORY[0x1E0C80A78](v0);
  v2 = (char *)&v6 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = 761556597;
  v8 = 0xE400000000000000;
  sub_1B0A1D33C();
  LODWORD(v7) = 0;
  v3 = sub_1B0A1D4D4();
  *(_QWORD *)(v3 + 16) = 157;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 96) = 0u;
  *(_OWORD *)(v3 + 112) = 0u;
  *(_OWORD *)(v3 + 128) = 0u;
  *(_OWORD *)(v3 + 144) = 0u;
  *(_OWORD *)(v3 + 160) = 0u;
  *(_OWORD *)(v3 + 173) = 0u;
  sub_1B0A1D2AC();
  swift_bridgeObjectRelease();
  uloc_addLikelySubtags();
  swift_release();
  if ((int)v7 <= 0
    && (v4 = sub_1B0A1D4D4(),
        *(_QWORD *)(v4 + 16) = 12,
        *(_DWORD *)(v4 + 40) = 0,
        *(_QWORD *)(v4 + 32) = 0,
        uloc_getLanguage(),
        swift_bridgeObjectRelease(),
        (int)v7 <= 0))
  {
    sub_1B0A1D270();
    return sub_1B097B528(v4, v2);
  }
  else
  {
    swift_bridgeObjectRelease();
    return 0;
  }
}

void sub_1B097ADA8(uint64_t *a1, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t, uint64_t, __n128);
  uint64_t v20;
  void (*v21)(uint64_t, _QWORD);
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const __CFAllocator *v35;
  uint64_t v36;
  unint64_t v37;
  const __CFData *v38;
  CFPropertyListRef v39;
  void *v40;
  void *v41;
  id v42;
  id v43;
  id v44;
  void *v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  id v50[4];
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  v6 = sub_1B0A1CF4C();
  v7 = *(_QWORD *)(v6 - 8);
  v9.n128_f64[0] = MEMORY[0x1E0C80A78](v6);
  v11 = (char *)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *a1;
  v12 = a1[1];
  if (v12 < *a1)
  {
    __break(1u);
    goto LABEL_25;
  }
  if ((v13 & 0x8000000000000000) != 0)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v14 = a1[2];
  v15 = *(_QWORD *)(v14 + 16);
  if (v15 < v13 || (uint64_t)v15 < v12)
LABEL_26:
    __break(1u);
  v49 = v3;
  v47 = a3;
  v17 = v14 + v13 + 32;
  v18 = *MEMORY[0x1E0CB00C8];
  v19 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v7 + 104);
  v48 = v8;
  v19(v11, v18, v8, v9);
  swift_bridgeObjectRetain();
  sub_1B0A1CF40();
  v20 = v12 - v13;
  if (v20)
  {
    sub_1B0A1CEF8();
    swift_allocObject();
    swift_retain();
    v24 = sub_1B0A1CEA4();
    v22 = sub_1B090CBE0(v24, v20);
    v23 = v25;
    swift_release();
  }
  else
  {
    v21 = (void (*)(uint64_t, _QWORD))sub_1B0A1CF40();
    v21(v17, 0);
    swift_release();
    swift_release();
    v22 = 0;
    v23 = 0xC000000000000000;
  }
  (*(void (**)(char *, uint64_t))(v7 + 8))(v11, v48);
  v26 = sub_1B0A1CF64();
  v28 = v27;
  sub_1B08A3638(v22, v23);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v29 = v49;
  v30 = sub_1B0A1D06C();
  v32 = v31;
  v34 = v33;
  swift_bridgeObjectRelease();
  if (v29)
  {
    sub_1B08CBB10(v26, v28);
    return;
  }
  swift_bridgeObjectRelease();
  *a1 = v30;
  a1[1] = v32;
  a1[2] = v34;
  if (v28 >> 60 == 15)
  {
    sub_1B08F7810(MEMORY[0x1E0DEE9D8]);
    return;
  }
  v51 = v26;
  v52 = v28;
  sub_1B08A35B0(v26, v28);
  sub_1B097B1E8();
  if ((v47 & 1) != 0)
  {
    v40 = (void *)objc_opt_self();
    v36 = v51;
    v37 = v52;
    sub_1B08A35B0(v51, v52);
    v41 = (void *)sub_1B0A1CFC4();
    sub_1B08A3638(v36, v37);
    v50[0] = 0;
    v42 = objc_msgSend(v40, sel_JSONObjectWithData_options_error_, v41, 0, v50);

    if (!v42)
    {
      v44 = v50[0];
      v45 = (void *)sub_1B0A1CF10();

      swift_willThrow();
LABEL_22:
      sub_1B08F7810(MEMORY[0x1E0DEE9D8]);
LABEL_23:
      sub_1B08CBB10(v26, v28);
      sub_1B08A3638(v36, v37);
      return;
    }
    v43 = v50[0];
    sub_1B0A1D7EC();
    swift_unknownObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEBACD0);
LABEL_19:
    if (swift_dynamicCast())
      goto LABEL_23;
    goto LABEL_22;
  }
  v35 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v36 = v51;
  v37 = v52;
  sub_1B08A35B0(v51, v52);
  v38 = (const __CFData *)sub_1B0A1CFC4();
  sub_1B08A3638(v36, v37);
  v39 = CFPropertyListCreateWithData(v35, v38, 0, 0, 0);

  if (v39)
  {
    v50[0] = (id)v39;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEBACD0);
    goto LABEL_19;
  }
  __break(1u);
}

void sub_1B097B1E8()
{
  __asm { BR              X12 }
}

void sub_1B097B23C()
{
  uint64_t v0;

  if (BYTE6(v0))
  {
    if (qword_1EEEBA558 != -1)
      swift_once();
    if (*((_QWORD *)off_1EEEBC900 + 2))
      __asm { BR              X11 }
    __break(1u);
    JUMPOUT(0x1B097B4B0);
  }
}

uint64_t sub_1B097B528(uint64_t a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char v11;
  void (*v12)(char *, uint64_t);
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  char v21;
  id v22;
  uint64_t result;
  uint64_t v24;

  v4 = sub_1B0A1D294();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v24 - v9;
  sub_1B0A1D270();
  v11 = sub_1B0A1D264();
  v12 = *(void (**)(char *, uint64_t))(v5 + 8);
  v12(v10, v4);
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v7, a2, v4);
  if ((v11 & 1) != 0)
  {
    v12(v7, v4);
    goto LABEL_4;
  }
  sub_1B0A1D27C();
  v13 = sub_1B0A1D264();
  v12(v10, v4);
  v12(v7, v4);
  if ((v13 & 1) != 0)
  {
LABEL_4:
    v14 = sub_1B097C4DC(0, a1);
    if ((v15 & 1) == 0)
    {
      if ((v14 & 0x8000000000000000) == 0)
      {
        swift_bridgeObjectRetain();
        v16 = sub_1B0A1D2B8();
        v18 = v17;
        swift_unknownObjectRelease();
        if (v18)
        {
          sub_1B0A1D270();
          v19 = sub_1B0A1D264();
          v12(v10, v4);
          if ((v19 & 1) != 0 || (sub_1B0A1D87C() & 1) != 0)
          {
            swift_bridgeObjectRelease();
LABEL_15:
            v12(a2, v4);
            return v16;
          }
          swift_bridgeObjectRelease();
        }
        goto LABEL_11;
      }
      __break(1u);
    }
    __break(1u);
    goto LABEL_18;
  }
LABEL_11:
  v20 = sub_1B097C4DC(0, a1);
  if ((v21 & 1) == 0)
  {
    v22 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB3940]), sel_initWithBytes_length_encoding_, a1 + 32, v20, sub_1B0A1D288());
    swift_bridgeObjectRelease();
    if (v22)
    {
      v16 = sub_1B0A1D21C();

    }
    else
    {
      v16 = 0;
    }
    goto LABEL_15;
  }
LABEL_18:
  result = sub_1B0A1D984();
  __break(1u);
  return result;
}

void *sub_1B097B7C0()
{
  void *result;

  result = (void *)sub_1B097B7DC();
  off_1EEEBC8F8 = result;
  return result;
}

uint64_t sub_1B097B7DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  BOOL v21;
  char v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  char v44;
  unint64_t v45;
  char *v46;
  unint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  char isUniquelyReferenced_nonNull_native;
  char v70;
  unint64_t v71;
  uint64_t v72;
  _BOOL8 v73;
  uint64_t v74;
  char v75;
  unint64_t v76;
  char v77;
  unint64_t v78;
  uint64_t v79;
  char v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  _QWORD *v89;
  BOOL v90;
  char v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  char *v95;
  uint64_t (*v96)@<X0>(uint64_t *@<X8>);
  uint64_t (*v97)();
  uint64_t result;
  uint64_t v99;
  uint64_t (*v100)();
  unint64_t v101;
  uint64_t (*v102)@<X0>(uint64_t *@<X8>);
  uint64_t v103;
  char *v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  int v119;
  _QWORD v120[4];
  char *v121[4];

  v121[2] = *(char **)MEMORY[0x1E0C80C00];
  v0 = sub_1B0A1D294();
  MEMORY[0x1E0C80A78](v0);
  v104 = (char *)&v99 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v105 = sub_1B08F7BEC(MEMORY[0x1E0DEE9D8]);
  v121[1] = (char *)MEMORY[0x1E0DEE9E8];
  v2 = sub_1B0A1D4D4();
  *(_QWORD *)(v2 + 16) = 157;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_OWORD *)(v2 + 112) = 0u;
  *(_OWORD *)(v2 + 128) = 0u;
  *(_OWORD *)(v2 + 144) = 0u;
  *(_OWORD *)(v2 + 160) = 0u;
  *(_OWORD *)(v2 + 173) = 0u;
  v121[0] = (char *)v2;
  v3 = sub_1B0A1D4D4();
  *(_QWORD *)(v3 + 16) = 12;
  *(_QWORD *)(v3 + 32) = 0;
  *(_DWORD *)(v3 + 40) = 0;
  v4 = sub_1B0A1D4D4();
  *(_QWORD *)(v4 + 16) = 6;
  *(_DWORD *)(v4 + 32) = 0;
  v106 = v4;
  *(_WORD *)(v4 + 36) = 0;
  v5 = MEMORY[0x1B5E0BB5C]();
  v6 = v5;
  v7 = *(_QWORD *)(v5 + 16);
  if (v7)
  {
    v100 = 0;
    v101 = 0;
    v102 = 0;
    v103 = 0;
    v8 = 0;
    v112 = 0;
    v107 = v5 + 32;
    v108 = v7;
    v109 = v5;
    while (1)
    {
      if (v8 >= *(_QWORD *)(v6 + 16))
      {
        __break(1u);
LABEL_89:
        __break(1u);
LABEL_90:
        __break(1u);
LABEL_91:
        __break(1u);
LABEL_92:
        __break(1u);
      }
      swift_bridgeObjectRetain();
      v12 = sub_1B0A1D3E4();
      v14 = v13;
      v16 = v15;
      v18 = v17;
      swift_bridgeObjectRelease();
      v19 = v18 >> 14;
      v118 = v12;
      if (v12 >> 14 == v18 >> 14)
        goto LABEL_34;
      v117 = v12 >> 14;
      swift_bridgeObjectRetain();
      v115 = v18;
      v116 = v14;
      v21 = sub_1B0A1D6FC() == 95 && v20 == 0xE100000000000000;
      v114 = v16;
      if (v21)
        break;
      v22 = sub_1B0A1DA8C();
      swift_bridgeObjectRelease();
      if ((v22 & 1) != 0)
        goto LABEL_14;
      v18 = v115;
      v14 = v116;
      v78 = (unint64_t)sub_1B0A1D6E4() >> 14;
      if (v78 != v19)
      {
        if (sub_1B0A1D6FC() == 95 && v79 == 0xE100000000000000)
        {
LABEL_60:
          swift_bridgeObjectRelease();
        }
        else
        {
          while (1)
          {
            v81 = sub_1B0A1DA8C();
            swift_bridgeObjectRelease();
            if ((v81 & 1) != 0)
              break;
            v18 = v115;
            v14 = v116;
            v16 = v114;
            v78 = (unint64_t)sub_1B0A1D6E4() >> 14;
            if (v78 == v19)
              goto LABEL_51;
            if (sub_1B0A1D6FC() == 95 && v82 == 0xE100000000000000)
              goto LABEL_60;
          }
          v16 = v114;
        }
        swift_bridgeObjectRelease();
        v14 = v116;
        if (v78 < v117)
          goto LABEL_89;
        goto LABEL_15;
      }
LABEL_51:
      swift_bridgeObjectRelease();
      v7 = v108;
      v6 = v109;
LABEL_34:
      swift_bridgeObjectRetain();
      v42 = v118;
      v43 = v18;
      v44 = sub_1B097C65C((uint64_t)v120, v118, v18, v14, v16);
      swift_bridgeObjectRelease();
      if ((v44 & 1) == 0)
        goto LABEL_35;
      v119 = 0;
      swift_bridgeObjectRetain();
      v9 = MEMORY[0x1B5E0BE08](v42, v43, v14, v16);
      v10 = v112;
      sub_1B097DA8C(v9, v11, v121);
      v112 = v10;
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      if (v119 > 0)
        goto LABEL_4;
      v45 = *(_QWORD *)(v3 + 16);
      if (v45 >> 31)
        goto LABEL_90;
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v3 = (uint64_t)sub_1B08B66E4(0, v45, 0, (char *)v3);
      uloc_getLanguage();
      swift_bridgeObjectRelease();
      if (v119 > 0)
        goto LABEL_4;
      v46 = (char *)v106;
      v47 = *(_QWORD *)(v106 + 16);
      if (v47 >> 31)
        goto LABEL_91;
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v46 = sub_1B08B66E4(0, v47, 0, v46);
      v106 = (uint64_t)v46;
      uloc_getScript();
      swift_bridgeObjectRelease();
      if (v119 > 0)
        goto LABEL_4;
      swift_bridgeObjectRetain();
      v48 = v104;
      sub_1B0A1D270();
      v49 = sub_1B097B528(v3, v48);
      if (!v50)
        goto LABEL_4;
      v51 = v49;
      v52 = v50;
      v53 = v106;
      swift_bridgeObjectRetain();
      v54 = v104;
      sub_1B0A1D270();
      v55 = sub_1B097B528(v53, v54);
      if (v56)
      {
        v57 = v55;
        v58 = v56;
        v110 = v8;
        v111 = v3;
        swift_bridgeObjectRetain();
        v59 = sub_1B0A1D3E4();
        v61 = v60;
        v63 = v62;
        v65 = v64;
        swift_bridgeObjectRelease();
        v66 = swift_allocObject();
        *(_QWORD *)(v66 + 16) = v57;
        *(_QWORD *)(v66 + 24) = v58;
        sub_1B08A380C((uint64_t)v100);
        v67 = swift_allocObject();
        *(_QWORD *)(v67 + 16) = sub_1B097DC9C;
        *(_QWORD *)(v67 + 24) = v66;
        v117 = v66;
        sub_1B08A380C((uint64_t)v102);
        v68 = v105;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v120[0] = v68;
        v118 = v65;
        v71 = sub_1B08FA0B4(v59, v61, v63, v65);
        v72 = *(_QWORD *)(v68 + 16);
        v73 = (v70 & 1) == 0;
        v74 = v72 + v73;
        if (__OFADD__(v72, v73))
          goto LABEL_92;
        v75 = v70;
        if (*(_QWORD *)(v68 + 24) >= v74)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            sub_1B0900100();
        }
        else
        {
          sub_1B08FBA60(v74, isUniquelyReferenced_nonNull_native);
          v76 = sub_1B08FA0B4(v59, v61, v63, v118);
          if ((v75 & 1) != (v77 & 1))
          {
            result = sub_1B0A1DAD4();
            __break(1u);
            return result;
          }
          v71 = v76;
        }
        v83 = (_QWORD *)v120[0];
        swift_bridgeObjectRelease();
        v84 = swift_bridgeObjectRetain();
        if ((v75 & 1) == 0)
        {
          v85 = (*(uint64_t (**)(uint64_t))(v67 + 16))(v84);
          sub_1B08FCA80(v71, v59, v61, v63, v118, v85, v83);
          swift_bridgeObjectRetain();
        }
        v86 = v83[7];
        v105 = (unint64_t)v83;
        swift_bridgeObjectRelease();
        v87 = *(char **)(v86 + 8 * v71);
        v88 = *((_QWORD *)v87 + 2);
        if (v88)
        {
          v89 = v87 + 40;
          v3 = v111;
          v6 = v109;
          while (1)
          {
            v90 = *(v89 - 1) == v51 && v52 == *v89;
            if (v90 || (sub_1B0A1DA8C() & 1) != 0)
              break;
            v89 += 2;
            if (!--v88)
            {
              v87 = *(char **)(v86 + 8 * v71);
              goto LABEL_79;
            }
          }
        }
        else
        {
          v3 = v111;
          v6 = v109;
LABEL_79:
          swift_bridgeObjectRetain();
          v91 = swift_isUniquelyReferenced_nonNull_native();
          *(_QWORD *)(v86 + 8 * v71) = v87;
          v92 = v6;
          if ((v91 & 1) == 0)
          {
            v87 = sub_1B08B5E4C(0, *((_QWORD *)v87 + 2) + 1, 1, v87);
            *(_QWORD *)(v86 + 8 * v71) = v87;
          }
          v94 = *((_QWORD *)v87 + 2);
          v93 = *((_QWORD *)v87 + 3);
          if (v94 >= v93 >> 1)
          {
            v87 = sub_1B08B5E4C((char *)(v93 > 1), v94 + 1, 1, v87);
            *(_QWORD *)(v86 + 8 * v71) = v87;
          }
          *((_QWORD *)v87 + 2) = v94 + 1;
          v95 = &v87[16 * v94];
          *((_QWORD *)v95 + 4) = v51;
          *((_QWORD *)v95 + 5) = v52;
          v6 = v92;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v100 = sub_1B097DC9C;
        v101 = v117;
        v102 = sub_1B097DCB4;
        v103 = v67;
        v7 = v108;
        v8 = v110;
      }
      else
      {
LABEL_35:
        swift_bridgeObjectRelease();
      }
LABEL_4:
      if (++v8 == v7)
      {
        swift_bridgeObjectRelease();
        v96 = v102;
        v97 = v100;
        goto LABEL_87;
      }
    }
    swift_bridgeObjectRelease();
LABEL_14:
    swift_bridgeObjectRelease();
    v14 = v116;
LABEL_15:
    v110 = v8;
    v111 = v3;
    swift_bridgeObjectRetain();
    v23 = sub_1B0A1D708();
    v18 = v24;
    v26 = v25;
    v28 = v27;
    swift_bridgeObjectRelease();
    v29 = 0;
    v30 = v18 >> 14;
    v117 = v23 >> 14;
    while (1)
    {
      v31 = *((_QWORD *)&unk_1E61A9908 + 2 * v29 + 5);
      v32 = HIBYTE(v31) & 0xF;
      if ((v31 & 0x2000000000000000) == 0)
        v32 = *((_QWORD *)&unk_1E61A9908 + 2 * v29 + 4) & 0xFFFFFFFFFFFFLL;
      v120[0] = *((_QWORD *)&unk_1E61A9908 + 2 * v29 + 4);
      v120[1] = v31;
      v120[2] = 0;
      v120[3] = v32;
      swift_bridgeObjectRetain_n();
      if (v117 != v30)
        break;
LABEL_27:
      sub_1B0A1D354();
      v41 = v40;
      swift_bridgeObjectRelease();
      if (!v41)
        goto LABEL_33;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_29:
      if (++v29 == 3)
      {
        swift_arrayDestroy();
        swift_bridgeObjectRelease();
        v118 = v23;
        v14 = v26;
        v16 = v28;
        v8 = v110;
        v3 = v111;
        v7 = v108;
        v6 = v109;
        goto LABEL_34;
      }
    }
    v113 = v29;
    swift_bridgeObjectRetain();
    while (1)
    {
      v34 = sub_1B0A1D6FC();
      v36 = v35;
      v37 = sub_1B0A1D6E4();
      v38 = sub_1B0A1D354();
      if (!v39)
        break;
      if (v34 == v38 && v39 == v36)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v30 == v37 >> 14)
        {
LABEL_26:
          swift_bridgeObjectRelease();
          v29 = v113;
          v16 = v114;
          v14 = v116;
          goto LABEL_27;
        }
      }
      else
      {
        v33 = sub_1B0A1DA8C();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v33 & 1) == 0)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v29 = v113;
          v16 = v114;
          v14 = v116;
          goto LABEL_29;
        }
        if (v30 == v37 >> 14)
          goto LABEL_26;
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v16 = v114;
    v14 = v116;
LABEL_33:
    swift_bridgeObjectRelease();
    swift_arrayDestroy();
    swift_bridgeObjectRelease();
    v8 = v110;
    v3 = v111;
    v7 = v108;
    v6 = v109;
    v18 = v115;
    goto LABEL_34;
  }
  swift_bridgeObjectRelease();
  v97 = 0;
  v96 = 0;
LABEL_87:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B08A380C((uint64_t)v97);
  sub_1B08A380C((uint64_t)v96);
  return v105;
}

void sub_1B097C3A4(uint64_t a1, char **a2)
{
  char *v2;
  unint64_t v3;
  char isUniquelyReferenced_nonNull_native;

  v2 = *a2;
  v3 = *((_QWORD *)*a2 + 2);
  if (v3 >> 31)
  {
    __break(1u);
  }
  else
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *a2 = v2;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      v2 = sub_1B08B66E4(0, v3, 0, v2);
    *a2 = v2;
    uloc_addLikelySubtags();
  }
}

uint64_t sub_1B097C434()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v0 = sub_1B097ABF0();
  if (!v1)
    return MEMORY[0x1E0DEE9D8];
  v2 = v0;
  v3 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEBA9A0);
  result = swift_allocObject();
  *(_OWORD *)(result + 16) = xmmword_1B0A363D0;
  *(_QWORD *)(result + 32) = v2;
  *(_QWORD *)(result + 40) = v3;
  return result;
}

char *sub_1B097C490()
{
  char *result;

  result = sub_1B0979D18(0xD000000000000CAALL, 0x80000001B0A272B0);
  off_1EEEBC900 = result;
  return result;
}

uint64_t sub_1B097C4DC(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v2 = *(_QWORD *)(a2 + 16);
  if (!v2)
    return 0;
  if (*(unsigned __int8 *)(a2 + 32) == a1)
    return 0;
  if (v2 == 1)
    return 0;
  if (*(unsigned __int8 *)(a2 + 33) == a1)
    return 1;
  v4 = 0;
  v5 = v2 - 2;
  while (v5 != v4)
  {
    v6 = *(unsigned __int8 *)(a2 + 34 + v4++);
    if (v6 == a1)
      return v4 + 1;
  }
  return 0;
}

uint64_t sub_1B097C564(uint64_t *a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v14;

  v3 = v2;
  v6 = *v2;
  v7 = sub_1B0A1DB1C();
  v8 = -1 << *(_BYTE *)(v6 + 32);
  v9 = v7 & ~v8;
  if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
  {
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v14 = *v3;
    *v3 = 0x8000000000000000;
    sub_1B097CE08(a2, v9, isUniquelyReferenced_nonNull_native);
    *v3 = v14;
    swift_bridgeObjectRelease();
    result = 1;
    goto LABEL_8;
  }
  v10 = *(_QWORD *)(v6 + 48);
  if (*(_QWORD *)(v10 + 8 * v9) != a2)
  {
    v11 = ~v8;
    do
    {
      v9 = (v9 + 1) & v11;
      if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
        goto LABEL_7;
    }
    while (*(_QWORD *)(v10 + 8 * v9) != a2);
  }
  result = 0;
LABEL_8:
  *a1 = a2;
  return result;
}

uint64_t sub_1B097C65C(uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5)
{
  uint64_t *v5;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  BOOL v21;
  _QWORD *v22;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;

  v11 = *v5;
  swift_bridgeObjectRetain();
  v12 = sub_1B0A1D12C();
  v13 = -1 << *(_BYTE *)(v11 + 32);
  v14 = v12 & ~v13;
  v32 = a1;
  if (((*(_QWORD *)(v11 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) != 0)
  {
    v15 = *(_QWORD *)(v11 + 48);
    v16 = (_QWORD *)(v15 + 32 * v14);
    v17 = a2 >> 16;
    v18 = a3 >> 16;
    v21 = v16[2] == a4 && v16[3] == a5 && *v16 >> 16 == v17 && v16[1] >> 16 == v18;
    if (v21 || (sub_1B0A1DA5C() & 1) != 0)
    {
LABEL_25:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v26 = *(_QWORD *)(*v31 + 48) + 32 * v14;
      v28 = *(_QWORD *)(v26 + 16);
      v27 = *(_QWORD *)(v26 + 24);
      *(_OWORD *)v32 = *(_OWORD *)v26;
      *(_QWORD *)(v32 + 16) = v28;
      *(_QWORD *)(v32 + 24) = v27;
      swift_bridgeObjectRetain();
      return 0;
    }
    while (1)
    {
      v14 = (v14 + 1) & ~v13;
      if (((*(_QWORD *)(v11 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) == 0)
        break;
      v22 = (_QWORD *)(v15 + 32 * v14);
      v25 = v22[2] == a4 && v22[3] == a5 && *v22 >> 16 == v17 && v22[1] >> 16 == v18;
      if (v25 || (sub_1B0A1DA5C() & 1) != 0)
        goto LABEL_25;
    }
  }
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v33 = *v31;
  *v31 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  sub_1B097CF28(a2, a3, a4, a5, v14, isUniquelyReferenced_nonNull_native);
  *v31 = v33;
  swift_bridgeObjectRelease();
  *(_QWORD *)v32 = a2;
  *(_QWORD *)(v32 + 8) = a3;
  result = 1;
  *(_QWORD *)(v32 + 16) = a4;
  *(_QWORD *)(v32 + 24) = a5;
  return result;
}

uint64_t sub_1B097C880()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEBC928);
  result = sub_1B0A1D858();
  v4 = result;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 0;
    v6 = (uint64_t *)(v2 + 56);
    v7 = 1 << *(_BYTE *)(v2 + 32);
    v26 = -1 << v7;
    v27 = v1;
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v2 + 56);
    v28 = 1 << *(_BYTE *)(v2 + 32);
    v10 = (unint64_t)(v7 + 63) >> 6;
    v11 = result + 56;
    while (1)
    {
      if (v9)
      {
        v13 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v14 = v13 | (v5 << 6);
      }
      else
      {
        v15 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v10)
          goto LABEL_33;
        v16 = v6[v15];
        ++v5;
        if (!v16)
        {
          v5 = v15 + 1;
          if (v15 + 1 >= v10)
            goto LABEL_33;
          v16 = v6[v5];
          if (!v16)
          {
            v5 = v15 + 2;
            if (v15 + 2 >= v10)
              goto LABEL_33;
            v16 = v6[v5];
            if (!v16)
            {
              v17 = v15 + 3;
              if (v17 >= v10)
              {
LABEL_33:
                if (v28 >= 64)
                  bzero((void *)(v2 + 56), 8 * v10);
                else
                  *v6 = v26;
                v1 = v27;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v16 = v6[v17];
              if (!v16)
              {
                while (1)
                {
                  v5 = v17 + 1;
                  if (__OFADD__(v17, 1))
                    goto LABEL_39;
                  if (v5 >= v10)
                    goto LABEL_33;
                  v16 = v6[v5];
                  ++v17;
                  if (v16)
                    goto LABEL_23;
                }
              }
              v5 = v17;
            }
          }
        }
LABEL_23:
        v9 = (v16 - 1) & v16;
        v14 = __clz(__rbit64(v16)) + (v5 << 6);
      }
      v18 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v14);
      result = sub_1B0A1DB1C();
      v19 = -1 << *(_BYTE *)(v4 + 32);
      v20 = result & ~v19;
      v21 = v20 >> 6;
      if (((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6))) != 0)
      {
        v12 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v22 = 0;
        v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v24 = v21 == v23;
          if (v21 == v23)
            v21 = 0;
          v22 |= v24;
          v25 = *(_QWORD *)(v11 + 8 * v21);
        }
        while (v25 == -1);
        v12 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(_QWORD *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v12) = v18;
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_1B097CB00()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;
  int64_t v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;
  _QWORD *v33;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEBC920);
  v3 = sub_1B0A1D858();
  v4 = v3;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 1 << *(_BYTE *)(v2 + 32);
    v33 = (_QWORD *)(v2 + 56);
    if (v5 < 64)
      v6 = ~(-1 << v5);
    else
      v6 = -1;
    v7 = v6 & *(_QWORD *)(v2 + 56);
    v32 = (unint64_t)(v5 + 63) >> 6;
    v8 = v3 + 56;
    result = swift_retain();
    v10 = 0;
    while (1)
    {
      if (v7)
      {
        v13 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        v14 = v13 | (v10 << 6);
      }
      else
      {
        v15 = v10 + 1;
        if (__OFADD__(v10, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v32)
          goto LABEL_33;
        v16 = v33[v15];
        ++v10;
        if (!v16)
        {
          v10 = v15 + 1;
          if (v15 + 1 >= v32)
            goto LABEL_33;
          v16 = v33[v10];
          if (!v16)
          {
            v10 = v15 + 2;
            if (v15 + 2 >= v32)
              goto LABEL_33;
            v16 = v33[v10];
            if (!v16)
            {
              v17 = v15 + 3;
              if (v17 >= v32)
              {
LABEL_33:
                swift_release();
                v1 = v0;
                v31 = 1 << *(_BYTE *)(v2 + 32);
                if (v31 > 63)
                  bzero(v33, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v33 = -1 << v31;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v16 = v33[v17];
              if (!v16)
              {
                while (1)
                {
                  v10 = v17 + 1;
                  if (__OFADD__(v17, 1))
                    goto LABEL_39;
                  if (v10 >= v32)
                    goto LABEL_33;
                  v16 = v33[v10];
                  ++v17;
                  if (v16)
                    goto LABEL_23;
                }
              }
              v10 = v17;
            }
          }
        }
LABEL_23:
        v7 = (v16 - 1) & v16;
        v14 = __clz(__rbit64(v16)) + (v10 << 6);
      }
      v18 = v2;
      v19 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 32 * v14);
      v21 = *v19;
      v20 = v19[1];
      v23 = v19[2];
      v22 = v19[3];
      result = sub_1B0A1D12C();
      v24 = -1 << *(_BYTE *)(v4 + 32);
      v25 = result & ~v24;
      v26 = v25 >> 6;
      if (((-1 << v25) & ~*(_QWORD *)(v8 + 8 * (v25 >> 6))) != 0)
      {
        v11 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v8 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v27 = 0;
        v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v29 = v26 == v28;
          if (v26 == v28)
            v26 = 0;
          v27 |= v29;
          v30 = *(_QWORD *)(v8 + 8 * v26);
        }
        while (v30 == -1);
        v11 = __clz(__rbit64(~v30)) + (v26 << 6);
      }
      *(_QWORD *)(v8 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
      v12 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 32 * v11);
      *v12 = v21;
      v12[1] = v20;
      v12[2] = v23;
      v12[3] = v22;
      ++*(_QWORD *)(v4 + 16);
      v2 = v18;
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_1B097CE08(uint64_t result, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v5 = result;
  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0)
    goto LABEL_14;
  if ((a3 & 1) != 0)
  {
    sub_1B097C880();
  }
  else
  {
    if (v7 > v6)
    {
      result = (uint64_t)sub_1B097D11C();
      goto LABEL_14;
    }
    sub_1B097D468();
  }
  v8 = *v3;
  result = sub_1B0A1DB1C();
  v9 = -1 << *(_BYTE *)(v8 + 32);
  a2 = result & ~v9;
  if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v10 = *(_QWORD *)(v8 + 48);
    if (*(_QWORD *)(v10 + 8 * a2) == v5)
    {
LABEL_13:
      result = sub_1B0A1DAC8();
      __break(1u);
    }
    else
    {
      v11 = ~v9;
      while (1)
      {
        a2 = (a2 + 1) & v11;
        if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        if (*(_QWORD *)(v10 + 8 * a2) == v5)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v12 = *v3;
  *(_QWORD *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v12 + 48) + 8 * a2) = v5;
  v13 = *(_QWORD *)(v12 + 16);
  v14 = __OFADD__(v13, 1);
  v15 = v13 + 1;
  if (v14)
    __break(1u);
  else
    *(_QWORD *)(v12 + 16) = v15;
  return result;
}

uint64_t sub_1B097CF28(uint64_t result, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, char a6)
{
  uint64_t *v6;
  uint64_t *v7;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  BOOL v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v29;
  unint64_t *v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;

  v7 = v6;
  v11 = result;
  v12 = *(_QWORD *)(*v6 + 16);
  v13 = *(_QWORD *)(*v6 + 24);
  if (v13 > v12 && (a6 & 1) != 0)
    goto LABEL_34;
  if ((a6 & 1) != 0)
  {
    sub_1B097CB00();
  }
  else
  {
    if (v13 > v12)
    {
      result = (uint64_t)sub_1B097D2B0();
      goto LABEL_34;
    }
    sub_1B097D6C8();
  }
  v14 = *v6;
  result = sub_1B0A1D12C();
  v15 = -1 << *(_BYTE *)(v14 + 32);
  a5 = result & ~v15;
  v16 = v14 + 56;
  if (((*(_QWORD *)(v14 + 56 + ((a5 >> 3) & 0xFFFFFFFFFFFFF8)) >> a5) & 1) != 0)
  {
    v17 = *(_QWORD *)(v14 + 48);
    v18 = (_QWORD *)(v17 + 32 * a5);
    v19 = v11 >> 16;
    v20 = a2 >> 16;
    v23 = v18[2] == a3 && v18[3] == a4 && *v18 >> 16 == v19 && v18[1] >> 16 == v20;
    if (v23 || (result = sub_1B0A1DA5C(), (result & 1) != 0))
    {
LABEL_33:
      result = sub_1B0A1DAC8();
      __break(1u);
    }
    else
    {
      v24 = ~v15;
      while (1)
      {
        a5 = (a5 + 1) & v24;
        if (((*(_QWORD *)(v16 + ((a5 >> 3) & 0xFFFFFFFFFFFFF8)) >> a5) & 1) == 0)
          break;
        v25 = (_QWORD *)(v17 + 32 * a5);
        if (v25[2] != a3 || v25[3] != a4 || *v25 >> 16 != v19 || v25[1] >> 16 != v20)
        {
          result = sub_1B0A1DA5C();
          if ((result & 1) == 0)
            continue;
        }
        goto LABEL_33;
      }
    }
  }
LABEL_34:
  v29 = *v7;
  *(_QWORD *)(*v7 + 8 * (a5 >> 6) + 56) |= 1 << a5;
  v30 = (unint64_t *)(*(_QWORD *)(v29 + 48) + 32 * a5);
  *v30 = v11;
  v30[1] = a2;
  v30[2] = a3;
  v30[3] = a4;
  v31 = *(_QWORD *)(v29 + 16);
  v32 = __OFADD__(v31, 1);
  v33 = v31 + 1;
  if (v32)
    __break(1u);
  else
    *(_QWORD *)(v29 + 16) = v33;
  return result;
}

void *sub_1B097D11C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEBC928);
  v2 = *v0;
  v3 = sub_1B0A1D84C();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      v9 = v16 + 1;
      if (v16 + 1 >= v13)
        goto LABEL_28;
      v17 = *(_QWORD *)(v6 + 8 * v9);
      if (!v17)
      {
        v9 = v16 + 2;
        if (v16 + 2 >= v13)
          goto LABEL_28;
        v17 = *(_QWORD *)(v6 + 8 * v9);
        if (!v17)
          break;
      }
    }
LABEL_27:
    v12 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v15) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
  }
  v18 = v16 + 3;
  if (v18 >= v13)
    goto LABEL_28;
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v9);
    ++v18;
    if (v17)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_1B097D2B0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEBC920);
  v2 = *v0;
  v3 = sub_1B0A1D84C();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v21 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v21 >= v13)
      goto LABEL_28;
    v22 = *(_QWORD *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      v9 = v21 + 1;
      if (v21 + 1 >= v13)
        goto LABEL_28;
      v22 = *(_QWORD *)(v6 + 8 * v9);
      if (!v22)
      {
        v9 = v21 + 2;
        if (v21 + 2 >= v13)
          goto LABEL_28;
        v22 = *(_QWORD *)(v6 + 8 * v9);
        if (!v22)
          break;
      }
    }
LABEL_27:
    v12 = (v22 - 1) & v22;
    v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    v16 = 32 * v15;
    v17 = *(_QWORD *)(v2 + 48) + v16;
    v19 = *(_QWORD *)(v17 + 16);
    v18 = *(_QWORD *)(v17 + 24);
    v20 = *(_QWORD *)(v4 + 48) + v16;
    *(_OWORD *)v20 = *(_OWORD *)v17;
    *(_QWORD *)(v20 + 16) = v19;
    *(_QWORD *)(v20 + 24) = v18;
    result = (void *)swift_bridgeObjectRetain();
  }
  v23 = v21 + 3;
  if (v23 >= v13)
    goto LABEL_28;
  v22 = *(_QWORD *)(v6 + 8 * v23);
  if (v22)
  {
    v9 = v23;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v22 = *(_QWORD *)(v6 + 8 * v9);
    ++v23;
    if (v22)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_1B097D468()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t *v26;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEBC928);
  result = sub_1B0A1D858();
  v4 = result;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v4;
    return result;
  }
  v26 = v1;
  v5 = 0;
  v6 = v2 + 56;
  v7 = 1 << *(_BYTE *)(v2 + 32);
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v2 + 56);
  v10 = (unint64_t)(v7 + 63) >> 6;
  v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v14 = v13 | (v5 << 6);
      goto LABEL_24;
    }
    v15 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v10)
      goto LABEL_33;
    v16 = *(_QWORD *)(v6 + 8 * v15);
    ++v5;
    if (!v16)
    {
      v5 = v15 + 1;
      if (v15 + 1 >= v10)
        goto LABEL_33;
      v16 = *(_QWORD *)(v6 + 8 * v5);
      if (!v16)
      {
        v5 = v15 + 2;
        if (v15 + 2 >= v10)
          goto LABEL_33;
        v16 = *(_QWORD *)(v6 + 8 * v5);
        if (!v16)
          break;
      }
    }
LABEL_23:
    v9 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_24:
    v18 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v14);
    result = sub_1B0A1DB1C();
    v19 = -1 << *(_BYTE *)(v4 + 32);
    v20 = result & ~v19;
    v21 = v20 >> 6;
    if (((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6))) != 0)
    {
      v12 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v22 = 0;
      v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v24 = v21 == v23;
        if (v21 == v23)
          v21 = 0;
        v22 |= v24;
        v25 = *(_QWORD *)(v11 + 8 * v21);
      }
      while (v25 == -1);
      v12 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(_QWORD *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v12) = v18;
    ++*(_QWORD *)(v4 + 16);
  }
  v17 = v15 + 3;
  if (v17 >= v10)
  {
LABEL_33:
    result = swift_release();
    v1 = v26;
    goto LABEL_35;
  }
  v16 = *(_QWORD *)(v6 + 8 * v17);
  if (v16)
  {
    v5 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    v5 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v5 >= v10)
      goto LABEL_33;
    v16 = *(_QWORD *)(v6 + 8 * v5);
    ++v17;
    if (v16)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_1B097D6C8()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;
  int64_t i;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  int64_t v34;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEBC920);
  v3 = sub_1B0A1D858();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v4;
    return result;
  }
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v32 = v2 + 56;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  else
    v6 = -1;
  v7 = v6 & *(_QWORD *)(v2 + 56);
  v33 = (unint64_t)(v5 + 63) >> 6;
  v8 = v3 + 56;
  result = swift_retain();
  for (i = 0; ; i = v34)
  {
    if (v7)
    {
      v13 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v34 = i;
      v14 = v13 | (i << 6);
      goto LABEL_24;
    }
    v15 = i + 1;
    if (__OFADD__(i, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v33)
      goto LABEL_33;
    v16 = *(_QWORD *)(v32 + 8 * v15);
    v17 = i + 1;
    if (!v16)
    {
      v17 = i + 2;
      if (i + 2 >= v33)
        goto LABEL_33;
      v16 = *(_QWORD *)(v32 + 8 * v17);
      if (!v16)
      {
        v17 = i + 3;
        if (i + 3 >= v33)
          goto LABEL_33;
        v16 = *(_QWORD *)(v32 + 8 * v17);
        if (!v16)
          break;
      }
    }
LABEL_23:
    v7 = (v16 - 1) & v16;
    v34 = v17;
    v14 = __clz(__rbit64(v16)) + (v17 << 6);
LABEL_24:
    v19 = v2;
    v20 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 32 * v14);
    v22 = *v20;
    v21 = v20[1];
    v23 = v20[2];
    v24 = v20[3];
    swift_bridgeObjectRetain();
    result = sub_1B0A1D12C();
    v25 = -1 << *(_BYTE *)(v4 + 32);
    v26 = result & ~v25;
    v27 = v26 >> 6;
    if (((-1 << v26) & ~*(_QWORD *)(v8 + 8 * (v26 >> 6))) != 0)
    {
      v11 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v8 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v28 = 0;
      v29 = (unint64_t)(63 - v25) >> 6;
      do
      {
        if (++v27 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v30 = v27 == v29;
        if (v27 == v29)
          v27 = 0;
        v28 |= v30;
        v31 = *(_QWORD *)(v8 + 8 * v27);
      }
      while (v31 == -1);
      v11 = __clz(__rbit64(~v31)) + (v27 << 6);
    }
    *(_QWORD *)(v8 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
    v12 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 32 * v11);
    *v12 = v22;
    v12[1] = v21;
    v12[2] = v23;
    v12[3] = v24;
    ++*(_QWORD *)(v4 + 16);
    v2 = v19;
  }
  v18 = i + 4;
  if (i + 4 >= v33)
  {
LABEL_33:
    result = swift_release_n();
    v1 = v0;
    goto LABEL_35;
  }
  v16 = *(_QWORD *)(v32 + 8 * v18);
  if (v16)
  {
    v17 = i + 4;
    goto LABEL_23;
  }
  while (1)
  {
    v17 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v17 >= v33)
      goto LABEL_33;
    v16 = *(_QWORD *)(v32 + 8 * v17);
    ++v18;
    if (v16)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

unint64_t sub_1B097D9B0(unint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unsigned int v5;

  if ((a2 & 0x2000000000000000) != 0)
    v2 = HIBYTE(a2) & 0xF;
  else
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (v2)
  {
    sub_1B08A9010(0xFuLL, a1, a2);
    if ((a2 & 0x1000000000000000) != 0)
    {
      v5 = sub_1B0A1D894();
    }
    else
    {
      if ((a2 & 0x2000000000000000) == 0 && (a1 & 0x1000000000000000) == 0)
        sub_1B0A1D8B8();
      v5 = sub_1B0A1D8C4();
    }
  }
  else
  {
    v5 = 0;
  }
  return v5 | ((unint64_t)(v2 == 0) << 32);
}

void sub_1B097DA8C(uint64_t a1, uint64_t a2, char **a3)
{
  _QWORD *v4;
  _QWORD v5[2];

  if ((a2 & 0x1000000000000000) != 0 || !(a2 & 0x2000000000000000 | a1 & 0x1000000000000000))
  {
    sub_1B0A1D870();
  }
  else
  {
    if ((a2 & 0x2000000000000000) != 0)
    {
      v5[0] = a1;
      v5[1] = a2 & 0xFFFFFFFFFFFFFFLL;
      v4 = v5;
    }
    else if ((a1 & 0x1000000000000000) != 0)
    {
      v4 = (_QWORD *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
    }
    else
    {
      v4 = (_QWORD *)sub_1B0A1D8B8();
    }
    sub_1B097C3A4((uint64_t)v4, a3);
  }
}

uint64_t sub_1B097DB60(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x1E0DEE9D8];
  if (v1)
  {
    v11 = MEMORY[0x1E0DEE9D8];
    sub_1B08E82B4(0, v1, 0);
    v2 = v11;
    v4 = (uint64_t *)(a1 + 40);
    do
    {
      v9 = *(v4 - 1);
      v10 = *v4;
      swift_bridgeObjectRetain_n();
      sub_1B0A1D33C();
      sub_1B0A1D33C();
      swift_bridgeObjectRelease();
      v6 = *(_QWORD *)(v11 + 16);
      v5 = *(_QWORD *)(v11 + 24);
      if (v6 >= v5 >> 1)
        sub_1B08E82B4((char *)(v5 > 1), v6 + 1, 1);
      v4 += 2;
      *(_QWORD *)(v11 + 16) = v6 + 1;
      v7 = v11 + 16 * v6;
      *(_QWORD *)(v7 + 32) = v9;
      *(_QWORD *)(v7 + 40) = v10;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_1B097DC78()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1B097DC9C()
{
  return sub_1B097C434();
}

uint64_t sub_1B097DCA4()
{
  return swift_deallocObject();
}

uint64_t sub_1B097DCB4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = (*(uint64_t (**)(void))(v1 + 16))();
  *a1 = result;
  return result;
}

void sub_1B097DCDC(uint64_t a1)
{
  uint64_t v1;

  sub_1B097C3A4(a1, *(char ***)(v1 + 16));
}

uint64_t sub_1B097DCF4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  __int16 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[24];
  __int128 v21;
  uint64_t v22;
  __int16 v23;
  __int128 v24;
  uint64_t v25;

  sub_1B08A35B0(a1, a2);
  sub_1B08A35F4();
  result = sub_1B0A1D090();
  *(_QWORD *)&v24 = result;
  *((_QWORD *)&v24 + 1) = v6;
  v25 = v7;
  *(_QWORD *)v20 = result;
  *(_QWORD *)&v20[8] = v6;
  *(_QWORD *)&v20[16] = v7;
  if (v6 < result)
  {
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRetain_n();
    v9 = sub_1B08C1578((uint64_t *)v20, v8, 1);
    if (v3)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      return swift_bridgeObjectRelease();
    }
    else
    {
      v10 = v9;
      swift_bridgeObjectRelease();
      v24 = *(_OWORD *)v20;
      v25 = *(_QWORD *)&v20[16];
      v12 = v10;
      if (v10 == 1)
      {
        LOBYTE(v10) = 0;
        v13 = 1;
      }
      else if (v10)
      {
        v13 = sub_1B08F7810(MEMORY[0x1E0DEE9D8]);
        LOBYTE(v10) = 1;
      }
      else
      {
        v13 = 0;
      }
      v14 = sub_1B08C5CD4((uint64_t)v20, &v24, v11, (v12 << 32) | 0x101, 0x10101010101uLL, v13, v10);
      sub_1B097DFA8(v13, v10);
      swift_bridgeObjectRelease_n();
      v15 = *(_DWORD *)v20;
      v18 = v21;
      v19 = *(_OWORD *)&v20[8];
      v16 = v22;
      v17 = v23;
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      *(_DWORD *)a3 = v15;
      *(_OWORD *)(a3 + 8) = v19;
      *(_OWORD *)(a3 + 24) = v18;
      *(_QWORD *)(a3 + 40) = v16;
      *(_WORD *)(a3 + 48) = v17;
      *(_QWORD *)(a3 + 56) = v14;
    }
  }
  return result;
}

uint64_t sub_1B097DFA8(uint64_t a1, char a2)
{
  uint64_t result;

  if ((a2 & 1) != 0)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t TTRegisterStrike(uint64_t a1, _DWORD *a2)
{
  *a2 = 0;
  return 0;
}

uint64_t TTGetStrikeSpecs(uint64_t a1, const TStrikeDescription *a2, uint64_t a3)
{
  __int128 v5;
  os_unfair_lock_s *v6;
  os_unfair_lock_s *v7;
  __int128 v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  __int128 v16;
  __int128 v17;
  unint64_t v18;
  int32x4_t v19;
  os_unfair_lock_s *v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  _QWORD __b[115];
  _OWORD v32[4];
  unsigned int v33;

  *(_QWORD *)&v5 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v32[2] = v5;
  v32[3] = v5;
  v32[0] = v5;
  v32[1] = v5;
  cacheCallContext::cacheCallContext((uint64_t)v32, (uint64_t)a2, 0, 0);
  memset(__b, 170, sizeof(__b));
  memoryContext::memoryContext((memoryContext *)__b, (cacheCallContext *)v32);
  v30 = 0xAAAAAAAAAA000000;
  v27 = 0xAAAAAAAAAAAAAAAALL;
  v22 = __b;
  v23 = 1358921729;
  v24 = 1358921729;
  v25 = 1358921729;
  v26 = 0;
  v28 = 1358921729;
  v29 = 1358921729;
  v20 = (os_unfair_lock_s *)0xAAAAAAAAAAAAAAAALL;
  v21 = 0xAAAAAAAAAAAAAAAALL;
  ResolveCacheStrike(a2, &v20);
  v6 = v20 + 2;
  os_unfair_lock_lock(v20 + 2);
  AssureStrikeBlocks(&v22, (memoryContext *)__b, v20);
  v7 = (os_unfair_lock_s *)(v25 + 208);
  os_unfair_lock_lock((os_unfair_lock_t)(v25 + 208));
  SetUpProgramPtrs((uint64_t)&v22);
  GetFontMetrics((uint64_t)&v22, (memoryContext *)__b, (*(unsigned __int8 *)(*(_QWORD *)&v20[8]._os_unfair_lock_opaque + 16) >> 3) & 1, (char *)(a3 + 64));
  v19.i64[0] = 0xAAAAAAAAAAAAAAAALL;
  v19.i64[1] = 0xAAAAAAAAAAAAAAAALL;
  GetScalerVariationInfo((uint64_t)&v22, (uint64_t)__b, *(_DWORD *)(*(_QWORD *)&v20[6]._os_unfair_lock_opaque + 16), &v19);
  v18 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v8 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v16 = v8;
  v17 = v8;
  GetScalerTransformInfo((uint64_t)&v22, (memoryContext *)__b, (uint64_t)&v16);
  v9 = v24;
  v10 = *(unsigned __int16 *)(v23 + 40);
  *(_DWORD *)(a3 + 60) = 1;
  if (*(_BYTE *)(v9 + 56))
  {
    v33 = 0;
    TFontSurrogate::GetTableIndex((TFontSurrogate *)(__b[0] + 16), 1801810542, &v33);
    if (v33)
      *(_DWORD *)(a3 + 60) |= 1u;
  }
  v11 = v17;
  *(_OWORD *)a3 = v16;
  *(_OWORD *)(a3 + 16) = v11;
  *(_QWORD *)(a3 + 32) = v18;
  *(int32x4_t *)(a3 + 40) = v19;
  *(_DWORD *)(a3 + 56) = v10;
  ReleaseProgramPtrs((memoryContext *)__b, v25 + 208);
  os_unfair_lock_unlock(v7);
  os_unfair_lock_unlock(v6);
  v12 = (std::__shared_weak_count *)v21;
  if (v21)
  {
    v13 = (unint64_t *)(v21 + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  memoryContext::~memoryContext((memoryContext *)__b);
  UnCacheCurrentGlyph((cacheCallContext *)v32);
  return 0;
}

void sub_1B097E1E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  os_unfair_lock_s *v28;
  os_unfair_lock_s *v29;
  uint64_t v30;

  os_unfair_lock_unlock(v29);
  os_unfair_lock_unlock(v28);
  std::shared_ptr<cacheStrike>::~shared_ptr[abi:fe180100]((uint64_t)&a17);
  memoryContext::~memoryContext((memoryContext *)&a28);
  UnCacheCurrentGlyph((cacheCallContext *)(v30 - 128));
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1B097E1C4);
  }
  _Unwind_Resume(a1);
}

uint64_t TTGetFontSpecs(TFont *a1, uint64_t a2)
{
  __int128 v3;
  uint64_t v4;
  __int16 v5;
  uint64_t v6;
  int v7;
  __int16 v8;
  uint64_t v9;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE __b[920];
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;

  *(_QWORD *)&v3 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v24 = v3;
  v25 = v3;
  v22 = v3;
  v23 = v3;
  cacheCallContext::cacheCallContext((cacheCallContext *)&v22, a1, 0, 0);
  v21 = 0xAAAAAAAAAAAAAAAALL;
  CreateFontCacheNode(*((const TFont **)&v23 + 1), &v21);
  v4 = v21;
  if (v21)
  {
    memset(__b, 170, sizeof(__b));
    memoryContext::memoryContext((memoryContext *)__b, (cacheCallContext *)&v22);
    v16 = 0xAAAAAAAAAAAAAAAALL;
    v19 = 0xAAAAAAAAAA000000;
    v11 = __b;
    v12 = 1358921729;
    v13 = 1358921729;
    v14 = 1358921729;
    v15 = 0;
    v17 = 1358921729;
    v18 = 1358921729;
    AssureScalerFontBlock(&v11, (memoryContext *)__b, v4);
    v5 = *(_WORD *)(v4 + 16);
    *(_WORD *)(v4 + 16) = v5 + 1;
    v6 = v12;
    *(_WORD *)(a2 + 4) = *(_WORD *)(v12 + 130);
    v7 = (*(unsigned __int16 *)(v6 + 128) >> 7) & 0xF;
    *(_DWORD *)a2 = v7;
    if (*(_BYTE *)(v6 + 152))
      *(_DWORD *)a2 = v7 | 0x10;
    *(_WORD *)(a2 + 8) = *(_WORD *)(v6 + 140);
    *(_WORD *)(a2 + 6) = *(_WORD *)(v6 + 40);
    *(_WORD *)(v4 + 16) = v5;
    memoryContext::~memoryContext((memoryContext *)__b);
    v8 = 0;
    v9 = *(_QWORD *)(v4 + 8);
    if (v9)
      free((void *)(v9 - 8));
    MEMORY[0x1B5E0CD38](v4, 0x1080C40587D25DELL);
  }
  else
  {
    v8 = 20;
  }
  UnCacheCurrentGlyph((cacheCallContext *)&v22);
  return v8;
}

void sub_1B097E3C4(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  uint64_t v12;
  va_list va;

  va_start(va, a12);
  memoryContext::~memoryContext((memoryContext *)va);
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    if (!*(_QWORD *)(v12 - 104))
      JUMPOUT(0x1B097E3A4);
    JUMPOUT(0x1B097E374);
  }
  std::unique_ptr<fontBlockCacheNode>::reset[abi:fe180100]((uint64_t *)(v12 - 104), 0);
  UnCacheCurrentGlyph((cacheCallContext *)(v12 - 96));
  _Unwind_Resume(a1);
}

uint64_t TTGetQuickDrawMetrics(const TStrikeDescription *a1, uint64_t a2, int32x2_t *a3)
{
  __int128 v6;
  os_unfair_lock_s *v7;
  os_unfair_lock_s *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  os_unfair_lock_s *v13;
  unint64_t v14;
  _QWORD v15[3];
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _BYTE __b[920];
  _OWORD v23[4];

  *(_QWORD *)&v6 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v23[2] = v6;
  v23[3] = v6;
  v23[0] = v6;
  v23[1] = v6;
  cacheCallContext::cacheCallContext((uint64_t)v23, (uint64_t)a1, 0, 0);
  memset(__b, 170, sizeof(__b));
  memoryContext::memoryContext((memoryContext *)__b, (cacheCallContext *)v23);
  v21 = 0xAAAAAAAAAA000000;
  v18 = 0xAAAAAAAAAAAAAAAALL;
  v15[0] = __b;
  v15[1] = 1358921729;
  v15[2] = 1358921729;
  v16 = 1358921729;
  v17 = 0;
  v19 = 1358921729;
  v20 = 1358921729;
  v13 = (os_unfair_lock_s *)0xAAAAAAAAAAAAAAAALL;
  v14 = 0xAAAAAAAAAAAAAAAALL;
  ResolveCacheStrike(a1, &v13);
  v7 = v13 + 2;
  os_unfair_lock_lock(v13 + 2);
  AssureStrikeBlocks(v15, (memoryContext *)__b, v13);
  v8 = (os_unfair_lock_s *)(v16 + 208);
  os_unfair_lock_lock((os_unfair_lock_t)(v16 + 208));
  SetUpProgramPtrs((uint64_t)v15);
  ComputeQDMetrics((uint64_t)v15, a2, a3);
  ReleaseProgramPtrs((memoryContext *)__b, v16 + 208);
  os_unfair_lock_unlock(v8);
  os_unfair_lock_unlock(v7);
  v9 = (std::__shared_weak_count *)v14;
  if (v14)
  {
    v10 = (unint64_t *)(v14 + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  memoryContext::~memoryContext((memoryContext *)__b);
  UnCacheCurrentGlyph((cacheCallContext *)v23);
  return 0;
}

void sub_1B097E5D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  os_unfair_lock_s *v20;
  uint64_t v21;

  os_unfair_lock_unlock(v20);
  std::shared_ptr<cacheStrike>::~shared_ptr[abi:fe180100]((uint64_t)&a9);
  memoryContext::~memoryContext((memoryContext *)&a20);
  UnCacheCurrentGlyph((cacheCallContext *)(v21 - 112));
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1B097E5B0);
  }
  _Unwind_Resume(a1);
}

uint64_t TTGetRenderingSpecs(uint64_t a1, const TStrikeDescription *a2, int *a3, int *a4)
{
  __int128 v7;
  os_unfair_lock_s *v8;
  os_unfair_lock_s *v9;
  int v10;
  int v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  os_unfair_lock_s *v16;
  unint64_t v17;
  _QWORD v18[3];
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _BYTE __b[920];
  _OWORD v26[4];

  *(_QWORD *)&v7 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v26[2] = v7;
  v26[3] = v7;
  v26[0] = v7;
  v26[1] = v7;
  cacheCallContext::cacheCallContext((uint64_t)v26, (uint64_t)a2, 0, 0);
  memset(__b, 170, sizeof(__b));
  memoryContext::memoryContext((memoryContext *)__b, (cacheCallContext *)v26);
  v24 = 0xAAAAAAAAAA000000;
  v21 = 0xAAAAAAAAAAAAAAAALL;
  v18[0] = __b;
  v18[1] = 1358921729;
  v18[2] = 1358921729;
  v19 = 1358921729;
  v20 = 0;
  v22 = 1358921729;
  v23 = 1358921729;
  v16 = (os_unfair_lock_s *)0xAAAAAAAAAAAAAAAALL;
  v17 = 0xAAAAAAAAAAAAAAAALL;
  ResolveCacheStrike(a2, &v16);
  v8 = v16 + 2;
  os_unfair_lock_lock(v16 + 2);
  AssureStrikeBlocks(v18, (memoryContext *)__b, v16);
  v9 = (os_unfair_lock_s *)(v19 + 208);
  os_unfair_lock_lock((os_unfair_lock_t)(v19 + 208));
  SetUpProgramPtrs((uint64_t)v18);
  ComputeRenderingSpecs((uint64_t)v18, (uint64_t)__b, a3[1] == 1651335536, *((_QWORD *)a3 + 1) != 0, a4);
  v10 = *a3;
  if (*a3 == 1920298616 || v10 == 1919824760)
  {
    v11 = 32 * *a4;
    goto LABEL_6;
  }
  if (v10 == 1836343917)
  {
    v11 = *a4 + 36;
LABEL_6:
    *a4 = v11;
  }
  ReleaseProgramPtrs((memoryContext *)__b, v19 + 208);
  os_unfair_lock_unlock(v9);
  os_unfair_lock_unlock(v8);
  v12 = (std::__shared_weak_count *)v17;
  if (v17)
  {
    v13 = (unint64_t *)(v17 + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  memoryContext::~memoryContext((memoryContext *)__b);
  UnCacheCurrentGlyph((cacheCallContext *)v26);
  return 0;
}

void sub_1B097E834(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  os_unfair_lock_s *v20;
  uint64_t v21;

  os_unfair_lock_unlock(v20);
  std::shared_ptr<cacheStrike>::~shared_ptr[abi:fe180100]((uint64_t)&a9);
  memoryContext::~memoryContext((memoryContext *)&a20);
  UnCacheCurrentGlyph((cacheCallContext *)(v21 - 112));
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1B097E814);
  }
  _Unwind_Resume(a1);
}

uint64_t TTGetMetricSpecs(uint64_t a1, uint64_t a2, _DWORD *a3, int *a4)
{
  int v4;
  uint64_t result;

  if (*a3 == 1835430499)
  {
    v4 = 24;
    goto LABEL_5;
  }
  if (*a3 == 1836213362)
  {
    v4 = 36;
LABEL_5:
    result = 0;
    *a4 = v4;
    a4[1] = 1;
    return result;
  }
  return 12;
}

uint64_t TTGetGlyphMetrics(uint64_t a1)
{
  uint64_t v1;
  _DWORD *v2;
  unsigned int v3;
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned int v6;
  unsigned __int16 *v7;
  unsigned int v8;
  _DWORD *v9;
  const TStrikeDescription *v10;
  int v11;
  __int16 v12;
  __int128 v13;
  uint64_t v14;
  os_unfair_lock_s *v15;
  os_unfair_lock_s *v16;
  uint64_t v17;
  unsigned int v18;
  size_t *v19;
  unsigned int v20;
  __int128 v21;
  int v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  int32x2_t v27[3];
  _BYTE v28[32];
  int v29;
  __int128 v30;
  int v31;
  os_unfair_lock_s *v32;
  unint64_t v33;
  _BYTE *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  _BYTE __b[920];
  _OWORD v44[2];
  __int128 v45;
  __int128 v46;
  _BYTE v47[5120];
  uint64_t v48;

  MEMORY[0x1E0C80A78](a1);
  v48 = *MEMORY[0x1E0C80C00];
  if (!v3)
    return 8;
  if (!v5)
    return 19;
  v7 = v4;
  v8 = v3;
  v9 = v2;
  v10 = (const TStrikeDescription *)v1;
  v11 = **(_DWORD **)(v1 + 40);
  if (*v2 == 1836213362 && 36 * (unint64_t)v3 > v6)
    return 19;
  if (*v2 == 1835430499 && 24 * (unint64_t)v3 > v6)
    return 19;
  *(_QWORD *)&v13 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v13 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v46 = v13;
  v44[1] = v13;
  v45 = v13;
  v44[0] = v13;
  cacheCallContext::cacheCallContext((uint64_t)v44, v1, v5, v6);
  memset(__b, 170, sizeof(__b));
  memoryContext::memoryContext((memoryContext *)__b, (cacheCallContext *)v44);
  v14 = *((_QWORD *)&v45 + 1);
  v42 = 0xAAAAAAAAAA000000;
  v39 = 0xAAAAAAAAAAAAAAAALL;
  v34 = __b;
  v35 = 1358921729;
  v36 = 1358921729;
  v37 = 1358921729;
  v38 = 0;
  v40 = 1358921729;
  v41 = 1358921729;
  v32 = (os_unfair_lock_s *)0xAAAAAAAAAAAAAAAALL;
  v33 = 0xAAAAAAAAAAAAAAAALL;
  ResolveCacheStrike(v10, &v32);
  v15 = v32 + 2;
  os_unfair_lock_lock(v32 + 2);
  AssureStrikeBlocks(&v34, (memoryContext *)__b, v32);
  v16 = (os_unfair_lock_s *)(v37 + 208);
  os_unfair_lock_lock((os_unfair_lock_t)(v37 + 208));
  SetUpProgramPtrs((uint64_t)&v34);
  v31 = 1;
  v30 = xmmword_1B0A3D2DC;
  memset(v47, 170, sizeof(v47));
  if (*v9 == 1835430499)
  {
    v20 = *(_DWORD *)(v35 + 20);
    if (v20 < 0xA99)
      v19 = (size_t *)v47;
    else
      v19 = ScalerNewScratch((memoryContext *)__b, v20 + 2408, 1);
    v39 = (unint64_t)v19;
    v19[6] = (size_t)(v19 + 301);
    do
    {
      memset(v28, 170, 24);
      LODWORD(v30) = *v7;
      AssureGlyphBlock((uint64_t)&v34, (memoryContext *)__b, (int *)&v30);
      ComputeGlyphFractionalMetrics(&v34, (uint64_t)__b, (int32x2_t *)v28);
      *(_OWORD *)v14 = *(_OWORD *)v28;
      *(_QWORD *)(v14 + 16) = *(_QWORD *)&v28[16];
      ++v7;
      v14 += 24;
      --v8;
    }
    while (v8);
LABEL_31:
    v12 = 0;
    if (v19 && v19 != (size_t *)v47)
    {
      ScalerDisposeBlock((memoryContext *)__b, (char *)v19, -1);
      v12 = 0;
    }
    goto LABEL_34;
  }
  if (*v9 == 1836213362)
  {
    v17 = *((_QWORD *)v9 + 1);
    LOWORD(v42) = v17 != 0;
    if (v17)
      LOBYTE(v17) = *(_BYTE *)(v35 + 152) != 0;
    BYTE2(v42) = v17;
    v18 = *(_DWORD *)(v35 + 20);
    if (v18 < 0xA99)
      v19 = (size_t *)v47;
    else
      v19 = ScalerNewScratch((memoryContext *)__b, v18 + 2408, 1);
    v39 = (unint64_t)v19;
    v19[6] = (size_t)(v19 + 301);
    do
    {
      v29 = -1431655766;
      *(_QWORD *)&v21 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v21 + 1) = 0xAAAAAAAAAAAAAAAALL;
      *(_OWORD *)v28 = v21;
      *(_OWORD *)&v28[16] = v21;
      memset(v27, 170, sizeof(v27));
      LODWORD(v30) = *v7;
      AssureGlyphBlock((uint64_t)&v34, (memoryContext *)__b, (int *)&v30);
      ComputeGlyphBoundsAndMetrics(&v34, (int32x2_t *)v28, v27);
      *(int32x2_t *)v14 = v27[0];
      *(int32x2_t *)(v14 + 20) = v27[1];
      *(int32x2_t *)(v14 + 28) = v27[2];
      *(_QWORD *)(v14 + 8) = *(_QWORD *)&v28[8];
      LOWORD(v22) = *(_WORD *)&v28[28] - *(_WORD *)&v28[20];
      *(_WORD *)(v14 + 16) = *(_WORD *)&v28[28] - *(_WORD *)&v28[20];
      *(_WORD *)(v14 + 18) = *(_WORD *)&v28[24] - *(_WORD *)&v28[16];
      if ((v11 & 0x10) != 0)
      {
        v22 = (unsigned __int16)v22;
        if (!*(_WORD *)(v37 + 492) && !*(_WORD *)(v37 + 494))
        {
          ComputeQDAscentDescent((uint64_t)&v34, (memoryContext *)__b, (_WORD *)(v37 + 492), (_WORD *)(v37 + 494));
          v22 = *(unsigned __int16 *)(v14 + 16);
        }
        if (v22)
          SquishGlyphMetrics(v14, *(__int16 *)(v37 + 492), *(__int16 *)(v37 + 494));
      }
      ++v7;
      v14 += 36;
      --v8;
    }
    while (v8);
    goto LABEL_31;
  }
  v12 = 12;
LABEL_34:
  ReleaseProgramPtrs((memoryContext *)__b, v37 + 208);
  os_unfair_lock_unlock(v16);
  os_unfair_lock_unlock(v15);
  v23 = (std::__shared_weak_count *)v33;
  if (v33)
  {
    v24 = (unint64_t *)(v33 + 8);
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  memoryContext::~memoryContext((memoryContext *)__b);
  UnCacheCurrentGlyph((cacheCallContext *)v44);
  return v12;
}

void sub_1B097ED8C(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  os_unfair_lock_s *v34;
  os_unfair_lock_s *v35;

  os_unfair_lock_unlock(v35);
  os_unfair_lock_unlock(v34);
  std::shared_ptr<cacheStrike>::~shared_ptr[abi:fe180100]((uint64_t)&a23);
  memoryContext::~memoryContext((memoryContext *)&a34);
  UnCacheCurrentGlyph((cacheCallContext *)&STACK[0x460]);
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1B097ED48);
  }
  _Unwind_Resume(a1);
}

void ComputeQDAscentDescent(uint64_t a1, memoryContext *a2, _WORD *a3, _WORD *a4)
{
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  int v13;
  uint64_t v14;
  int v15;
  unsigned __int16 *v16;
  void *v17[2];
  __int128 v18;
  _BYTE v19[28];

  v8 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v8 + 490))
  {
    *(_QWORD *)&v9 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)&v19[12] = v9;
    v18 = v9;
    *(_OWORD *)v19 = v9;
    *(_OWORD *)v17 = v9;
    v10 = *(_QWORD *)(v8 + 80);
    if (v8 + 96 != v10)
    {
      v11 = *(_OWORD *)(v8 + 96);
      v12 = *(_OWORD *)(v8 + 112);
      *(_DWORD *)(v10 + 32) = *(_DWORD *)(v8 + 128);
      *(_OWORD *)v10 = v11;
      *(_OWORD *)(v10 + 16) = v12;
    }
    if (sbit_FontMatch(a2, a1, (uint64_t)v17, *(unsigned __int8 *)(v8 + 484), 1))
      *(_WORD *)(v8 + 489) = 514;
    v13 = HIDWORD(v17[1]);
    *a3 = (HIDWORD(v17[0]) + 0x8000) >> 16;
    *a4 = -((v13 + 0x8000) >> 16);
  }
  else
  {
    v17[0] = (void *)0xAAAAAAAAAAAAAAAALL;
    v14 = *(__int16 *)(*(_QWORD *)(a1 + 8) + 130);
    ScalerGetFontTable(a2, 1751672161, 0, v17, 0, 36);
    v15 = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 112);
    v16 = (unsigned __int16 *)v17[0];
    *a3 = (((__int16)(bswap32(*((unsigned __int16 *)v17[0] + 2)) >> 16) * (uint64_t)v15 / v14) + 0x8000) >> 16;
    *a4 = -((((__int16)(bswap32(v16[3]) >> 16) * (uint64_t)v15 / v14) + 0x8000) >> 16);
    ScalerReleaseFontTable(a2, v16);
  }
}

uint64_t SquishGlyphMetrics(uint64_t result, int a2, int a3)
{
  int v3;
  int v4;
  int v5;
  int v7;
  int v8;
  BOOL v9;
  int v10;
  int v11;
  BOOL v12;
  int v13;
  int v14;

  v3 = *(_DWORD *)(result + 12);
  v4 = *(unsigned __int16 *)(result + 16);
  v5 = v4 - (v3 >> 16);
  if (a2 < v3 >> 16 || v5 > a3)
  {
    v7 = v3 >> 16;
    v8 = a2 - (v3 >> 16);
    v9 = a2 < v3 >> 16 && v5 < -((__int16)(HIWORD(v3) + (v3 >> 31)) >> 1);
    if (v9
      || (v5 >= 0 ? (v10 = v4 - (v3 >> 16)) : (v10 = v5 + 1),
          (v11 = -(v10 >> 1), v8 = v5 - a3, v5 > a3) ? (v12 = v7 < v11) : (v12 = 0),
          v12))
    {
      *(_DWORD *)(result + 12) = v3 + (v8 << 16);
    }
    else
    {
      v13 = *(unsigned __int16 *)(result + 16);
      if (v3 >= 0x10000 && a2 < v7)
      {
        *(_DWORD *)(result + 12) = a2 << 16;
        if (v4 >= v7)
          v13 = a2 - v7 + v4;
        else
          v13 = ((a2 << 16) / v7 * v4) >> 16;
      }
      if (v4 != v7 && v5 > a3)
      {
        v14 = (a3 << 16) / v5;
        if (v3 < 0)
          *(_DWORD *)(result + 12) = v14 * v7;
        if (v13 >= v5)
          LOWORD(v13) = a3 - v5 + v13;
        else
          v13 = (v14 * v13) >> 16;
      }
      *(_WORD *)(result + 16) = v13;
    }
  }
  return result;
}

uint64_t TTRenderGlyphs(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  _DWORD *v7;
  _DWORD *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  const TStrikeDescription *v12;
  int v13;
  int v14;
  __int128 v15;
  int v16;
  uint64_t v17;
  size_t *v18;
  unsigned int v19;
  uint64_t v20;
  __int16 v21;
  __int16 *v22;
  int v23;
  int v24;
  char v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v30;
  int v31;
  __int128 v32;
  unsigned __int8 *v33;
  int v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  _BOOL4 v40;
  unsigned int v41;
  int v42;
  int v43;
  int v44;
  unsigned int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  unsigned __int8 *v52;
  int v53;
  int v54;
  unsigned __int8 *v55;
  _WORD *exception;
  _WORD *v57;
  int v58;
  int v59;
  unsigned __int8 *__dsta;
  unsigned __int8 *__dst;
  int v62;
  int v63;
  int v64;
  int v65;
  unsigned __int8 *__src;
  int v67;
  unsigned int v68;
  int v69;
  int v70;
  int v71;
  char *v72;
  char v73;
  os_unfair_lock_s *lock;
  os_unfair_lock_s *v75;
  unsigned __int8 *v76[2];
  __int128 v77;
  unsigned int v78;
  __int128 v79;
  _BYTE v80[20];
  int32x2_t v81[3];
  uint64_t v82;
  int v83;
  int v84;
  _BOOL4 v85;
  os_unfair_lock_s *v86;
  unint64_t v87;
  _BYTE *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  _BYTE __b[926];
  __int16 v98;
  _OWORD v99[2];
  __int128 v100;
  __int128 v101;
  int v102;
  _BYTE v103[5120];
  uint64_t v104;

  MEMORY[0x1E0C80A78](a1);
  v104 = *MEMORY[0x1E0C80C00];
  if (!v3)
    return 8;
  v8 = v7;
  v9 = v4;
  v10 = v3;
  v11 = v2;
  v12 = (const TStrikeDescription *)v1;
  v13 = *(_DWORD *)(v2 + 4);
  v14 = **(_DWORD **)(v1 + 40);
  *(_QWORD *)&v15 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v15 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v101 = v15;
  v100 = v15;
  v99[1] = v15;
  v99[0] = v15;
  cacheCallContext::cacheCallContext((uint64_t)v99, v1, v5, v6);
  BYTE13(v101) = *(_DWORD *)v11 == 1836343917;
  v98 = 0;
  memset(__b, 170, 0x398uLL);
  memoryContext::memoryContext((memoryContext *)__b, (cacheCallContext *)v99);
  v96 = 0xAAAAAAAAAA000000;
  v93 = 0xAAAAAAAAAAAAAAAALL;
  v88 = __b;
  v89 = 1358921729;
  v90 = 1358921729;
  v91 = 1358921729;
  v92 = 0;
  v94 = 1358921729;
  v95 = 1358921729;
  v86 = (os_unfair_lock_s *)0xAAAAAAAAAAAAAAAALL;
  v87 = 0xAAAAAAAAAAAAAAAALL;
  ResolveCacheStrike(v12, &v86);
  v75 = v86 + 2;
  os_unfair_lock_lock(v86 + 2);
  AssureStrikeBlocks(&v88, (memoryContext *)__b, v86);
  lock = (os_unfair_lock_s *)(v91 + 208);
  os_unfair_lock_lock((os_unfair_lock_t)(v91 + 208));
  SetUpProgramPtrs((uint64_t)&v88);
  v82 = 0;
  v16 = *(_DWORD *)(v11 + 4);
  v83 = 0;
  v84 = v16;
  v85 = v13 != 1651335536;
  *v8 = 0;
  v17 = *(_QWORD *)(v11 + 8);
  LOWORD(v96) = v17 != 0;
  if (v17)
    LOBYTE(v17) = *(_BYTE *)(v89 + 152) != 0;
  BYTE2(v96) = v17;
  v18 = (size_t *)v103;
  memset(v103, 170, sizeof(v103));
  v19 = *(_DWORD *)(v89 + 20);
  if (v19 >= 0xA99)
    v18 = ScalerNewScratch((memoryContext *)__b, v19 + 2408, 1);
  v93 = (unint64_t)v18;
  v18[6] = (size_t)(v18 + 301);
  v72 = (char *)v18;
  if (v13 == 1651335536)
  {
    v22 = *(__int16 **)(v11 + 16);
    if (v22 && (v23 = *v22, v24 = v22[1], v23 <= v24))
    {
      HIDWORD(v82) = v23;
      v83 = v24;
      v25 = 1;
    }
    else
    {
      v25 = 0;
      HIDWORD(v82) = 0;
      v83 = 0;
    }
    v30 = 0;
    v31 = v10;
    v73 = v14;
    while (1)
    {
      LODWORD(v82) = *(unsigned __int16 *)(v9 + 2 * v30);
      AssureGlyphBlock((uint64_t)&v88, (memoryContext *)__b, (int *)&v82);
      memset(v81, 170, sizeof(v81));
      *(_DWORD *)&v80[16] = -1431655766;
      *(_QWORD *)&v32 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v32 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v79 = v32;
      *(_OWORD *)v80 = v32;
      v78 = -1431655766;
      *(_OWORD *)v76 = v32;
      v77 = v32;
      ComputeGlyphBoundsAndMetrics(&v88, (int32x2_t *)v76, v81);
      v33 = (unsigned __int8 *)RenderBitmap((uint64_t)&v88, (memoryContext *)__b, &v82, (uint64_t)v76, 6);
      v76[0] = v33;
      if (*(_DWORD *)v11 == 1836343917)
      {
        *(_OWORD *)&v80[4] = *(_OWORD *)v81[1].i8;
        *(int32x2_t *)&v79 = v81[0];
        *((unsigned __int8 **)&v79 + 1) = v76[1];
        *(_WORD *)v80 = WORD6(v77) - WORD2(v77);
        *(_WORD *)&v80[2] = WORD4(v77) - v77;
        if ((v14 & 0x10) != 0)
        {
          v34 = (unsigned __int16)(WORD6(v77) - WORD2(v77));
          if (!*(_WORD *)(v91 + 492) && !*(_WORD *)(v91 + 494))
          {
            ComputeQDAscentDescent((uint64_t)&v88, (memoryContext *)__b, (_WORD *)(v91 + 492), (_WORD *)(v91 + 494));
            v34 = *(unsigned __int16 *)v80;
          }
          if (v34)
            SquishGlyphMetrics((uint64_t)&v79, *(__int16 *)(v91 + 492), *(__int16 *)(v91 + 494));
        }
        v33 = v76[0];
      }
      if (!v33)
      {
        if (*(_DWORD *)v11 == 1836343917)
        {
          v36 = DWORD2(v101);
          DWORD1(v101) = 36;
          if ((int)v101 - DWORD2(v101) < 36 || (DWORD2(v101) += 36, !*((_QWORD *)&v100 + 1)))
          {
            exception = __cxa_allocate_exception(2uLL);
            *exception = 19;
            __cxa_throw(exception, MEMORY[0x1E0DE4F10], 0);
          }
          v37 = *((_QWORD *)&v100 + 1) + v36;
          v38 = v79;
          v39 = *(_OWORD *)v80;
          *(_DWORD *)(v37 + 32) = *(_DWORD *)&v80[16];
          *(_OWORD *)v37 = v38;
          *(_OWORD *)(v37 + 16) = v39;
          if ((v25 & 1) != 0)
            goto LABEL_73;
        }
        else
        {
          DWORD1(v101) = 0;
          if ((v25 & 1) != 0)
            goto LABEL_73;
        }
LABEL_72:
        UnCacheCurrentGlyph((cacheCallContext *)v99);
        goto LABEL_73;
      }
      if ((v25 & 1) != 0)
      {
        v35 = 0;
        goto LABEL_71;
      }
      v40 = *(_QWORD *)(v11 + 8) == 0;
      v41 = *(_DWORD *)v11 == 1836343917 ? PackBitmap((uint64_t)v76, v40, &v79) : PackBitmap((uint64_t)v76, v40, 0);
      v35 = v41;
      if ((v14 & 0x10) != 0)
      {
        if (!*(_WORD *)(v91 + 492) && !*(_WORD *)(v91 + 494))
          ComputeQDAscentDescent((uint64_t)&v88, (memoryContext *)__b, (_WORD *)(v91 + 492), (_WORD *)(v91 + 494));
        v42 = HIDWORD(v77) - DWORD1(v77);
        if (SHIDWORD(v77) > SDWORD1(v77))
          break;
      }
LABEL_71:
      *(int32x2_t *)((char *)&v101 + 4) = vsub_s32(*(int32x2_t *)((char *)&v101 + 4), vdup_n_s32(v35));
      if ((v25 & 1) == 0)
        goto LABEL_72;
LABEL_73:
      v8[v30 + 1] = DWORD1(v101);
      ++*v8;
      if (v31 == (_DWORD)++v30)
      {
LABEL_12:
        if (v72 && v72 != v103)
          ScalerDisposeBlock((memoryContext *)__b, v72, -1);
        ReleaseProgramPtrs((memoryContext *)__b, v91 + 208);
        goto LABEL_20;
      }
    }
    v43 = *(__int16 *)(v91 + 492);
    v44 = *(__int16 *)(v91 + 494);
    v45 = v78;
    v46 = HIDWORD(v76[1]);
    v47 = v42 - (SHIDWORD(v76[1]) >> 16);
    if (v43 < SHIDWORD(v76[1]) >> 16 || v47 > v44)
    {
      v49 = SHIDWORD(v76[1]) >> 16;
      v50 = v43 - (SHIDWORD(v76[1]) >> 16);
      if (v43 >= SHIDWORD(v76[1]) >> 16 || v47 >= -((__int16)(HIWORD(v76[1]) + (HIDWORD(v76[1]) >> 31)) >> 1))
      {
        v51 = v47 >= 0 ? v42 - (SHIDWORD(v76[1]) >> 16) : v47 + 1;
        v50 = v47 - v44;
        if (v47 <= v44 || v49 >= -(v51 >> 1))
        {
          v102 = -1431655766;
          v52 = &v76[0][v49 * v78];
          v67 = v42 - (SHIDWORD(v76[1]) >> 16);
          v68 = v78;
          __src = v52;
          v62 = SHIDWORD(v76[1]) >> 16;
          if (v43 >= v49)
          {
            v54 = 0;
            if (SHIDWORD(v76[1]) < 0x10000)
              v55 = v76[0];
            else
              v55 = &v76[0][v49 * v78];
          }
          else
          {
            if (v42 >= v49)
              v53 = SHIDWORD(v76[1]) >> 16;
            else
              v53 = HIDWORD(v77) - DWORD1(v77);
            v58 = v53;
            __dsta = v76[0];
            v69 = HIDWORD(v77) - DWORD1(v77);
            v63 = v44;
            SquishInPlace(v76[0], v78, v53, (v43 << 16) / v49, &v102);
            v44 = v63;
            v47 = v67;
            v45 = v68;
            v54 = v58 - v102;
            HIDWORD(v76[1]) += (v58 - v102) << 16;
            v52 = __src;
            v42 = v69 - (v58 - v102);
            v55 = &__dsta[v102 * v68];
          }
          if (v47 > v44)
          {
            __dst = v55;
            v64 = v54;
            v70 = v42;
            v59 = (v44 << 16) / v47;
            SquishInPlace(v52, v45, v47, v59, &v102);
            if (v46 < 0)
              HIDWORD(v76[1]) = v59 * v62;
            v45 = v68;
            v42 = v70 - (v67 - v102);
            v54 = v67 - v102 + v64;
            v47 = v102;
            v52 = __src;
            v55 = __dst;
          }
          LOBYTE(v14) = v73;
          if (v55 < v52 && v47 >= 1)
          {
            v71 = v42;
            v65 = v54;
            memmove(v55, v52, v47 * v45);
            v54 = v65;
            v45 = v68;
            v42 = v71;
          }
          HIDWORD(v77) = SHIWORD(v76[1]);
          DWORD1(v77) = SHIWORD(v76[1]) - v42;
          v48 = v54 * v45;
          goto LABEL_70;
        }
      }
      v48 = 0;
      HIDWORD(v76[1]) += v50 << 16;
    }
    else
    {
      v48 = 0;
    }
    LOBYTE(v14) = v73;
LABEL_70:
    v35 += v48;
    goto LABEL_71;
  }
  if (!*(_BYTE *)(v89 + 152) && !*(_BYTE *)(v91 + 490))
  {
    v57 = __cxa_allocate_exception(2uLL);
    *v57 = 4;
    __cxa_throw(v57, MEMORY[0x1E0DE4F10], 0);
  }
  v20 = 0;
  while (1)
  {
    LODWORD(v82) = *(unsigned __int16 *)(v9 + 2 * v20);
    AssureGlyphBlock((uint64_t)&v88, (memoryContext *)__b, (int *)&v82);
    if (!RenderPath(&v88, (memoryContext *)__b, &v82, &v98))
      break;
    UnCacheCurrentGlyph((cacheCallContext *)v99);
    v8[v20 + 1] = DWORD1(v101);
    ++*v8;
    if (v10 == (_DWORD)++v20)
      goto LABEL_12;
  }
LABEL_20:
  os_unfair_lock_unlock(lock);
  os_unfair_lock_unlock(v75);
  v26 = (std::__shared_weak_count *)v87;
  if (v87)
  {
    v27 = (unint64_t *)(v87 + 8);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  memoryContext::~memoryContext((memoryContext *)__b);
  v21 = v98;
  if (v98 == 19)
  {
    v21 = 0;
    if (!*v8)
      v8[1] = DWORD1(v101);
  }
  UnCacheCurrentGlyph((cacheCallContext *)v99);
  return v21;
}

void sub_1B097F87C(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void sub_1B097F894(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_unfair_lock_s *lock, os_unfair_lock_s *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  os_unfair_lock_unlock(lock);
  os_unfair_lock_unlock(a18);
  std::shared_ptr<cacheStrike>::~shared_ptr[abi:fe180100]((uint64_t)&a36);
  memoryContext::~memoryContext((memoryContext *)&a47);
  if (a2 == 1)
  {
    LOWORD(STACK[0x4CE]) = *(_WORD *)__cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1B097F3A8);
  }
  UnCacheCurrentGlyph((cacheCallContext *)&STACK[0x4D0]);
  JUMPOUT(0x1B097F884);
}

uint64_t PackBitmap(uint64_t a1, int a2, __int128 *a3)
{
  unsigned int *v3;
  __int128 v4;
  __int128 v5;
  unsigned int *v6;
  int v7;
  int v8;
  int v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  char *v13;
  int v14;
  char v15;
  BOOL v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  int v23;
  unsigned int v25;
  unint64_t v26;
  _DWORD *exception;

  if (a3)
  {
    v3 = *(unsigned int **)a1;
    v4 = *a3;
    v5 = a3[1];
    *(v3 - 1) = *((_DWORD *)a3 + 8);
    *(_OWORD *)(v3 - 5) = v5;
    *(_OWORD *)(v3 - 9) = v4;
  }
  v6 = *(unsigned int **)a1;
  v8 = *(_DWORD *)(a1 + 24);
  v7 = *(_DWORD *)(a1 + 28);
  v10 = *(_DWORD *)(a1 + 16);
  v9 = *(_DWORD *)(a1 + 20);
  v11 = v7 - v9;
  v12 = v8 - v10;
  if (a2)
  {
    if (v8 != v10)
    {
      if (v12 <= 8)
      {
        v13 = (char *)v6 + 3;
        v14 = v9 - v7;
        do
        {
          v15 = *v13;
          v13 += 4;
          *(_BYTE *)v6 = v15;
          v6 = (unsigned int *)((char *)v6 + 1);
          v16 = __CFADD__(v14++, 1);
        }
        while (!v16);
        v17 = 3 * v11 - (v11 & 1);
        v18 = 1;
LABEL_19:
        *(_DWORD *)(a1 + 32) = v18;
        return v17;
      }
      if (v12 <= 0x10)
      {
        v22 = 0;
        v23 = v9 - v7;
        do
        {
          *(_WORD *)((char *)v6 + v22 * 2) = bswap32(HIWORD(v6[v22])) >> 16;
          ++v22;
          v16 = __CFADD__(v23++, 1);
        }
        while (!v16);
        v17 = 2 * v11;
        v18 = 2;
        goto LABEL_19;
      }
      v25 = *(_DWORD *)(a1 + 32);
      if (v25 >> 30 || (v26 = v11 * (unint64_t)(v25 >> 2), (v26 & 0xFFFFFFFF00000000) != 0))
      {
        exception = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)exception = &off_1E6176998;
        exception[2] = 4;
      }
      for (; (_DWORD)v26; LODWORD(v26) = v26 - 1)
      {
        *v6 = bswap32(*v6);
        ++v6;
      }
    }
  }
  else
  {
    v19 = ((v12 + 7) >> 1) & 0x7FFFFFFC;
    *(_DWORD *)(a1 + 32) = v19;
    v20 = v19 * v11;
    if (v20)
    {
      v21 = v20 >> 2;
      do
      {
        *v6 = bswap32(*v6);
        ++v6;
        --v21;
      }
      while (v21);
    }
  }
  return 0;
}

uint64_t TTKernGlyphs()
{
  return 1;
}

uint64_t TTFontRenderingQuery(uint64_t a1, unsigned int a2, uint64_t a3, _DWORD *a4)
{
  int v4;
  int *v5;
  uint64_t i;
  int v7;
  int v8;

  v4 = 0;
  if (a2)
  {
    v5 = (int *)(a3 + 4);
    for (i = a2; i; --i)
    {
      v7 = *(v5 - 1);
      if (v7 == 1885434984)
      {
        *a4 = *v5 == 1735946356;
      }
      else
      {
        if (v7 != 1651335536)
          goto LABEL_17;
        v8 = *v5;
        if (*v5 <= 1885960243)
        {
          if (v8 != 1668112752 && v8 != 1836343917)
          {
LABEL_17:
            *a4 = 0;
            ++v4;
            goto LABEL_18;
          }
LABEL_16:
          *a4 = 1;
          goto LABEL_18;
        }
        if (v8 == 1885960244)
          goto LABEL_16;
        if (v8 != 1920298616 && v8 != 1919824760)
          goto LABEL_17;
        *a4 = 2;
      }
LABEL_18:
      ++a4;
      v5 += 2;
    }
  }
  if (v4 == a2)
    return 13;
  else
    return 0;
}

uint64_t TTGetGlyphNameFromGlyphID(TFont *a1, uint64_t a2, unsigned __int16 *a3, unsigned int *a4, _BYTE *a5)
{
  __int128 v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  int GlyphNameFromGlyphID;
  __int16 v14;
  uint64_t v15;
  _QWORD v17[9];
  _BYTE __b[924];
  unsigned int v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;

  *(_QWORD *)&v9 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v23 = v9;
  v24 = v9;
  v21 = v9;
  v22 = v9;
  cacheCallContext::cacheCallContext((cacheCallContext *)&v21, a1, 0, 0);
  v20 = 0xAAAAAAAAAAAAAAAALL;
  CreateFontCacheNode(*((const TFont **)&v22 + 1), &v20);
  v10 = v20;
  if (v20)
  {
    v11 = *a4;
    v19 = *a4;
    memset(__b, 170, 0x398uLL);
    memoryContext::memoryContext((memoryContext *)__b, (cacheCallContext *)&v21);
    v17[8] = 0xAAAAAAAAAA000000;
    v17[5] = 0xAAAAAAAAAAAAAAAALL;
    v17[0] = __b;
    v17[1] = 1358921729;
    v17[2] = 1358921729;
    v17[3] = 1358921729;
    v17[4] = 0;
    v17[6] = 1358921729;
    v17[7] = 1358921729;
    AssureScalerFontBlock(v17, (memoryContext *)__b, v10);
    v12 = 0;
    ++*(_WORD *)(v10 + 16);
    do
    {
      GlyphNameFromGlyphID = GetGlyphNameFromGlyphID((uint64_t)v17, (memoryContext *)__b, a2, a3, &v19, a5);
      v14 = GlyphNameFromGlyphID;
      if (GlyphNameFromGlyphID)
        break;
      a5 += v19;
      ++a3;
      v11 -= v19;
      v12 += v19;
      v19 = v11;
      a2 = (a2 - 1);
    }
    while ((_DWORD)a2);
    *a4 = v12;
    --*(_WORD *)(v10 + 16);
    memoryContext::~memoryContext((memoryContext *)__b);
    v15 = *(_QWORD *)(v10 + 8);
    if (v15)
      free((void *)(v15 - 8));
    MEMORY[0x1B5E0CD38](v10, 0x1080C40587D25DELL);
  }
  else
  {
    v14 = 20;
  }
  UnCacheCurrentGlyph((cacheCallContext *)&v21);
  return v14;
}

void sub_1B097FD40(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  memoryContext::~memoryContext((memoryContext *)va);
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    if (!*(_QWORD *)(v11 - 152))
      JUMPOUT(0x1B097FD14);
    JUMPOUT(0x1B097FCE4);
  }
  std::unique_ptr<fontBlockCacheNode>::reset[abi:fe180100]((uint64_t *)(v11 - 152), 0);
  UnCacheCurrentGlyph((cacheCallContext *)(v11 - 144));
  _Unwind_Resume(a1);
}

uint64_t TTGetGlyphIDFromGlyphName(TFont *a1, char *a2, unsigned int *a3, uint64_t a4)
{
  __int128 v7;
  uint64_t v8;
  __int16 GlyphIDFromGlyphName;
  uint64_t v10;
  _QWORD v12[9];
  _BYTE __b[920];
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;

  *(_QWORD *)&v7 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v17 = v7;
  v18 = v7;
  v15 = v7;
  v16 = v7;
  cacheCallContext::cacheCallContext((cacheCallContext *)&v15, a1, 0, 0);
  v14 = 0xAAAAAAAAAAAAAAAALL;
  CreateFontCacheNode(*((const TFont **)&v16 + 1), &v14);
  v8 = v14;
  if (v14)
  {
    memset(__b, 170, sizeof(__b));
    memoryContext::memoryContext((memoryContext *)__b, (cacheCallContext *)&v15);
    v12[5] = 0xAAAAAAAAAAAAAAAALL;
    v12[8] = 0xAAAAAAAAAA000000;
    v12[0] = __b;
    v12[1] = 1358921729;
    v12[2] = 1358921729;
    v12[3] = 1358921729;
    v12[4] = 0;
    v12[6] = 1358921729;
    v12[7] = 1358921729;
    AssureScalerFontBlock(v12, (memoryContext *)__b, v8);
    ++*(_WORD *)(v8 + 16);
    GlyphIDFromGlyphName = GetGlyphIDFromGlyphName((uint64_t)v12, (memoryContext *)__b, a2, a3, a4);
    --*(_WORD *)(v8 + 16);
    memoryContext::~memoryContext((memoryContext *)__b);
    v10 = *(_QWORD *)(v8 + 8);
    if (v10)
      free((void *)(v10 - 8));
    MEMORY[0x1B5E0CD38](v8, 0x1080C40587D25DELL);
  }
  else
  {
    GlyphIDFromGlyphName = 20;
  }
  UnCacheCurrentGlyph((cacheCallContext *)&v15);
  return GlyphIDFromGlyphName;
}

void sub_1B097FF24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  uint64_t v19;

  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    if (!*(_QWORD *)(v19 - 120))
      JUMPOUT(0x1B097FF00);
    JUMPOUT(0x1B097FED0);
  }
  std::unique_ptr<fontBlockCacheNode>::reset[abi:fe180100]((uint64_t *)(v19 - 120), 0);
  UnCacheCurrentGlyph((cacheCallContext *)(v19 - 112));
  _Unwind_Resume(a1);
}

uint64_t TTGetVariationScalars(const TStrikeDescription *a1, int a2, uint64_t a3)
{
  __int128 v6;
  os_unfair_lock_s *v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  os_unfair_lock_s *v14;
  unint64_t v15;
  _QWORD v16[9];
  _BYTE __b[920];
  _OWORD v18[4];

  *(_QWORD *)&v6 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v18[2] = v6;
  v18[3] = v6;
  v18[0] = v6;
  v18[1] = v6;
  cacheCallContext::cacheCallContext((uint64_t)v18, (uint64_t)a1, 0, 0);
  memset(__b, 170, sizeof(__b));
  memoryContext::memoryContext((memoryContext *)__b, (cacheCallContext *)v18);
  v16[8] = 0xAAAAAAAAAA000000;
  v16[5] = 0xAAAAAAAAAAAAAAAALL;
  v16[0] = __b;
  v16[1] = 1358921729;
  v16[2] = 1358921729;
  v16[3] = 1358921729;
  v16[4] = 0;
  v16[6] = 1358921729;
  v16[7] = 1358921729;
  v14 = (os_unfair_lock_s *)0xAAAAAAAAAAAAAAAALL;
  v15 = 0xAAAAAAAAAAAAAAAALL;
  ResolveCacheStrike(a1, &v14);
  v7 = v14 + 2;
  os_unfair_lock_lock(v14 + 2);
  AssureStrikeBlocks(v16, (memoryContext *)__b, v14);
  if (*(_QWORD *)&v14[4]._os_unfair_lock_opaque
    && *(_QWORD *)&v14[6]._os_unfair_lock_opaque
    && *(_QWORD *)&v14[8]._os_unfair_lock_opaque)
  {
    if (a2 >= 1)
    {
      v8 = 0;
      do
      {
        *(_DWORD *)(a3 + 4 * v8) = GetVariationScalar((uint64_t)v16, (__int16)v8);
        ++v8;
      }
      while ((unsigned __int16)a2 != v8);
    }
    v9 = 0;
  }
  else
  {
    v9 = 20;
  }
  os_unfair_lock_unlock(v7);
  v10 = (std::__shared_weak_count *)v15;
  if (v15)
  {
    v11 = (unint64_t *)(v15 + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  memoryContext::~memoryContext((memoryContext *)__b);
  UnCacheCurrentGlyph((cacheCallContext *)v18);
  return v9;
}

void sub_1B0980140(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  os_unfair_lock_s *v20;
  uint64_t v21;

  os_unfair_lock_unlock(v20);
  std::shared_ptr<cacheStrike>::~shared_ptr[abi:fe180100]((uint64_t)&a9);
  memoryContext::~memoryContext((memoryContext *)&a20);
  UnCacheCurrentGlyph((cacheCallContext *)(v21 - 112));
  _Unwind_Resume(a1);
}

uint64_t TTGetVariationValues(const TStrikeDescription *a1, uint64_t a2, void *a3)
{
  __int128 v6;
  os_unfair_lock_s *v7;
  int v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  os_unfair_lock_s *v14;
  unint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _BYTE __b[920];
  _OWORD v26[4];

  *(_QWORD *)&v6 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v26[2] = v6;
  v26[3] = v6;
  v26[0] = v6;
  v26[1] = v6;
  cacheCallContext::cacheCallContext((uint64_t)v26, (uint64_t)a1, 0, 0);
  memset(__b, 170, sizeof(__b));
  memoryContext::memoryContext((memoryContext *)__b, (cacheCallContext *)v26);
  v24 = 0xAAAAAAAAAA000000;
  v21 = 0xAAAAAAAAAAAAAAAALL;
  v16 = __b;
  v17 = 1358921729;
  v18 = 1358921729;
  v19 = 1358921729;
  v20 = 0;
  v22 = 1358921729;
  v23 = 1358921729;
  v14 = (os_unfair_lock_s *)0xAAAAAAAAAAAAAAAALL;
  v15 = 0xAAAAAAAAAAAAAAAALL;
  ResolveCacheStrike(a1, &v14);
  v7 = v14 + 2;
  os_unfair_lock_lock(v14 + 2);
  AssureStrikeBlocks(&v16, (memoryContext *)__b, v14);
  if (!*(_QWORD *)&v14[4]._os_unfair_lock_opaque
    || !*(_QWORD *)&v14[6]._os_unfair_lock_opaque
    || !*(_QWORD *)&v14[8]._os_unfair_lock_opaque)
  {
    v8 = 6;
LABEL_10:
    v9 = OFAErrors(v8);
    goto LABEL_11;
  }
  v8 = 4;
  if (!a3 || *(_DWORD *)(v17 + 72) != a2)
    goto LABEL_10;
  if (a2)
    memmove(a3, *(const void **)(v18 + 16), 2 * a2);
  v9 = 0;
LABEL_11:
  os_unfair_lock_unlock(v7);
  v10 = (std::__shared_weak_count *)v15;
  if (v15)
  {
    v11 = (unint64_t *)(v15 + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  memoryContext::~memoryContext((memoryContext *)__b);
  UnCacheCurrentGlyph((cacheCallContext *)v26);
  return v9;
}

void sub_1B0980318(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  os_unfair_lock_s *v20;
  uint64_t v21;

  os_unfair_lock_unlock(v20);
  std::shared_ptr<cacheStrike>::~shared_ptr[abi:fe180100]((uint64_t)&a9);
  memoryContext::~memoryContext((memoryContext *)&a20);
  UnCacheCurrentGlyph((cacheCallContext *)(v21 - 112));
  _Unwind_Resume(a1);
}

uint64_t TTGetTupleCount(const TStrikeDescription *a1, _WORD *a2)
{
  __int128 v4;
  os_unfair_lock_s *v5;
  uint64_t v6;
  int v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  os_unfair_lock_s *v12;
  unint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _BYTE __b[920];
  _OWORD v24[4];

  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v24[2] = v4;
  v24[3] = v4;
  v24[0] = v4;
  v24[1] = v4;
  cacheCallContext::cacheCallContext((uint64_t)v24, (uint64_t)a1, 0, 0);
  memset(__b, 170, sizeof(__b));
  memoryContext::memoryContext((memoryContext *)__b, (cacheCallContext *)v24);
  v22 = 0xAAAAAAAAAA000000;
  v19 = 0xAAAAAAAAAAAAAAAALL;
  v14 = __b;
  v15 = 1358921729;
  v16 = 1358921729;
  v17 = 1358921729;
  v18 = 0;
  v20 = 1358921729;
  v21 = 1358921729;
  v12 = (os_unfair_lock_s *)0xAAAAAAAAAAAAAAAALL;
  v13 = 0xAAAAAAAAAAAAAAAALL;
  ResolveCacheStrike(a1, &v12);
  v5 = v12 + 2;
  os_unfair_lock_lock(v12 + 2);
  AssureStrikeBlocks(&v14, (memoryContext *)__b, v12);
  if (!*(_QWORD *)&v12[4]._os_unfair_lock_opaque
    || !*(_QWORD *)&v12[6]._os_unfair_lock_opaque
    || !*(_QWORD *)&v12[8]._os_unfair_lock_opaque)
  {
    v7 = 6;
LABEL_7:
    v6 = OFAErrors(v7);
    goto LABEL_8;
  }
  if (!a2)
  {
    v7 = 4;
    goto LABEL_7;
  }
  v6 = 0;
  *a2 = *(_DWORD *)(v15 + 76);
LABEL_8:
  os_unfair_lock_unlock(v5);
  v8 = (std::__shared_weak_count *)v13;
  if (v13)
  {
    v9 = (unint64_t *)(v13 + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  memoryContext::~memoryContext((memoryContext *)__b);
  UnCacheCurrentGlyph((cacheCallContext *)v24);
  return v6;
}

void sub_1B09804C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  os_unfair_lock_s *v20;
  uint64_t v21;

  os_unfair_lock_unlock(v20);
  std::shared_ptr<cacheStrike>::~shared_ptr[abi:fe180100]((uint64_t)&a9);
  memoryContext::~memoryContext((memoryContext *)&a20);
  UnCacheCurrentGlyph((cacheCallContext *)(v21 - 96));
  _Unwind_Resume(a1);
}

_BYTE *SquishInPlace(_BYTE *result, unsigned int a2, int a3, int a4, int *a5)
{
  int v5;
  int v6;
  char *v7;
  int v8;
  int v9;
  int v10;
  int v11;
  char *v12;
  _BYTE *v13;
  unsigned int v14;
  char v15;
  unsigned int v16;
  char v17;

  if (a3 < 1)
  {
    v11 = 0;
  }
  else
  {
    v5 = 0;
    v6 = 0;
    v7 = &result[a2];
    v8 = a2 * (a3 - 2) + 1;
    v9 = 1;
    do
    {
      v10 = v9;
      v11 = (v9 * a4 + 0x8000) >> 16;
      if (v11 == v9 - v5)
      {
        result += a2;
        v7 += a2;
      }
      else
      {
        v12 = v7;
        v13 = result;
        if ((int)a2 >= 1)
        {
          v14 = a2 + 1;
          v13 = result;
          v12 = v7;
          do
          {
            v15 = *v12++;
            *v13++ |= v15;
            --v14;
          }
          while (v14 > 1);
        }
        if ((int)((a3 - 2 - v6) * a2) >= 1)
        {
          v16 = v8;
          do
          {
            v17 = *v12++;
            *v13++ = v17;
            --v16;
          }
          while (v16 > 1);
        }
        ++v5;
      }
      v9 = v10 + 1;
      v8 -= a2;
      v6 = v10;
    }
    while (v10 != a3);
  }
  *a5 = v11;
  return result;
}

uint64_t std::shared_ptr<cacheStrike>::~shared_ptr[abi:fe180100](uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

uint64_t *std::unique_ptr<fontBlockCacheNode>::reset[abi:fe180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
      free((void *)(v3 - 8));
    JUMPOUT(0x1B5E0CD38);
  }
  return result;
}

size_t sfp_decompress_brotli(uint8_t *a1, size_t a2, const uint8_t *a3, size_t a4)
{
  return compression_decode_buffer(a1, a2, a3, a4, 0, COMPRESSION_BROTLI);
}

uint64_t BytesToCard(const unsigned __int8 *a1, int a2)
{
  const unsigned __int8 *v2;
  uint64_t result;
  int v4;
  int v5;

  if (!a2)
    return 0;
  v2 = a1;
  result = *a1;
  if (a2 != 2)
  {
    if (a2 != 3)
    {
      if (a2 != 4)
        return result;
      v4 = *++v2;
      LODWORD(result) = v4 | ((_DWORD)result << 8);
    }
    v5 = *++v2;
    LODWORD(result) = v5 | ((_DWORD)result << 8);
  }
  return v2[1] | ((_DWORD)result << 8);
}

unint64_t IntToPString(unint64_t result, unsigned __int8 *a2)
{
  unint64_t *v2;
  BOOL v3;
  unsigned __int8 *v4;
  unsigned __int8 v5;
  unsigned int v6;
  unint64_t *v7;
  unsigned __int8 *v8;
  unsigned __int8 v9;
  char v10;
  unint64_t v11;
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if ((result & 0x80000000) != 0)
  {
    v6 = -(int)result;
    v11 = 0xAAAAAAAAAAAAAAAALL;
    v12 = -1431655766;
    v7 = (unint64_t *)&v10;
    do
    {
      *((_BYTE *)v7 + 1) = (v6 % 0xA) | 0x30;
      v7 = (unint64_t *)((char *)v7 + 1);
      v3 = v6 > 9;
      v6 /= 0xAu;
    }
    while (v3);
    LOBYTE(v8) = (_BYTE)a2 + 2;
    if (v7 >= &v11)
    {
      v8 = a2 + 2;
      do
      {
        v9 = *(_BYTE *)v7;
        v7 = (unint64_t *)((char *)v7 - 1);
        *v8++ = v9;
      }
      while (v7 >= &v11);
    }
    *a2 = (_BYTE)v8 - ((_BYTE)a2 + 2) + 1;
    a2[1] = 45;
  }
  else
  {
    v11 = 0xAAAAAAAAAAAAAAAALL;
    v12 = -1431655766;
    v2 = (unint64_t *)&v10;
    do
    {
      *((_BYTE *)v2 + 1) = (result % 0xA) | 0x30;
      v2 = (unint64_t *)((char *)v2 + 1);
      v3 = result > 9;
      result = result / 0xAuLL;
    }
    while (v3);
    LOBYTE(v4) = (_BYTE)a2 + 1;
    if (v2 >= &v11)
    {
      v4 = a2 + 1;
      do
      {
        v5 = *(_BYTE *)v2;
        v2 = (unint64_t *)((char *)v2 - 1);
        *v4++ = v5;
      }
      while (v2 >= &v11);
    }
    *a2 = (_BYTE)v4 - ((_BYTE)a2 + 1);
  }
  return result;
}

uint64_t FixedToPString(unsigned int a1, int a2, unsigned __int8 *a3)
{
  uint64_t result;
  int v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  char *v10;
  BOOL v11;
  char v12;
  unsigned __int8 *v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  unsigned int v16;
  char *v17;
  unsigned __int8 *v18;
  unsigned __int8 v19;
  size_t v20;
  unsigned __int8 *v21;
  unsigned __int8 __n[9];
  char v23;
  unint64_t v24;
  int v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v23 = -86;
  *(_QWORD *)&__n[1] = 0xAAAAAAAAAAAAAAAALL;
  __n[0] = 0;
  if ((a1 & 0x80000000) != 0)
  {
    v7 = -a1;
    result = -65536 * a1;
    if ((_DWORD)result)
    {
      result = FractionalToPString(result, a2, __n);
      v8 = (unsigned __int16)result;
    }
    else
    {
      v8 = 0;
    }
    v16 = v8 + HIWORD(v7);
    v24 = 0xAAAAAAAAAAAAAAAALL;
    v25 = -1431655766;
    v17 = &v23;
    do
    {
      *++v17 = (v16 % 0xA) | 0x30;
      v11 = v16 > 9;
      v16 /= 0xAu;
    }
    while (v11);
    LOBYTE(v18) = (_BYTE)a3 + 2;
    if (v17 >= (char *)&v24)
    {
      v18 = a3 + 2;
      do
      {
        v19 = *v17--;
        *v18++ = v19;
      }
      while (v17 >= (char *)&v24);
    }
    v15 = (_BYTE)v18 - ((_BYTE)a3 + 2) + 1;
    *a3 = v15;
    a3[1] = 45;
  }
  else
  {
    result = a1 << 16;
    if ((_DWORD)result)
    {
      result = FractionalToPString(result, a2, __n);
      v6 = (unsigned __int16)result;
    }
    else
    {
      v6 = 0;
    }
    v9 = v6 + HIWORD(a1);
    v24 = 0xAAAAAAAAAAAAAAAALL;
    v25 = -1431655766;
    v10 = &v23;
    do
    {
      *++v10 = (v9 % 0xA) | 0x30;
      v11 = v9 > 9;
      v9 /= 0xAu;
    }
    while (v11);
    v12 = (_BYTE)a3 + 1;
    LOBYTE(v13) = (_BYTE)a3 + 1;
    if (v10 >= (char *)&v24)
    {
      v13 = a3 + 1;
      do
      {
        v14 = *v10--;
        *v13++ = v14;
      }
      while (v10 >= (char *)&v24);
    }
    v15 = (_BYTE)v13 - v12;
    *a3 = (_BYTE)v13 - v12;
  }
  v20 = __n[0];
  if (__n[0])
  {
    v21 = &a3[v15];
    v21[1] = 46;
    result = (uint64_t)memcpy(v21 + 2, &__n[1], v20);
    *a3 += v20 + 1;
  }
  return result;
}

BOOL FractionalToPString(int a1, int a2, unsigned __int8 *a3)
{
  unsigned int v3;
  unsigned int v4;
  BOOL v5;
  int v6;
  uint32x4_t v7;
  int32x4_t v8;
  int32x4_t v9;
  int8x16_t v10;
  int8x16_t v11;
  unint64_t *v12;
  unsigned int v13;
  unsigned __int8 *v14;
  int v15;
  _BOOL8 result;
  _BYTE v17[3];
  unint64_t v18;
  __int16 v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = 1000000000;
  if (a1)
  {
    v4 = 500000000;
    do
    {
      v3 += v4 & (a1 >> 31);
      a1 *= 2;
      if (!a1)
        break;
      v5 = v4 > 1;
      v4 >>= 1;
    }
    while (v5);
  }
  if (a2 <= 7)
  {
    v6 = 0;
    v7 = (uint32x4_t)vdupq_n_s32(7 - a2);
    v8 = (int32x4_t)xmmword_1B0A3D2F0;
    v9.i64[0] = 0xA0000000ALL;
    v9.i64[1] = 0xA0000000ALL;
    do
    {
      v10 = (int8x16_t)v8;
      v8 = vmulq_s32(v8, v9);
      v6 += 4;
    }
    while (((11 - a2) & 0xFFFFFFFC) != v6);
    v11 = vbslq_s8((int8x16_t)vcgtq_u32((uint32x4_t)vorrq_s8((int8x16_t)vdupq_n_s32(v6 - 4), (int8x16_t)xmmword_1B0A3D300), v7), v10, (int8x16_t)v8);
    *(int32x2_t *)v11.i8 = vmul_s32(*(int32x2_t *)v11.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v11, v11, 8uLL));
    v3 += v11.i32[0] * v11.i32[1];
  }
  v18 = 0xAAAAAAAAAAAAAAAALL;
  v19 = -21846;
  v12 = (unint64_t *)v17;
  v13 = v3;
  do
  {
    *((_BYTE *)v12 + 3) = (v13 % 0xA) | 0x30;
    v12 = (unint64_t *)((char *)v12 + 1);
    v5 = v13 > 9;
    v13 /= 0xAu;
  }
  while (v5);
  LOBYTE(v14) = (_BYTE)a3 + 1;
  if (a2 >= 1)
  {
    LOBYTE(v14) = (_BYTE)a3 + 1;
    if ((unint64_t *)((char *)v12 + 1) >= &v18)
    {
      LOWORD(v15) = 0;
      v14 = a3 + 1;
      do
      {
        *v14++ = *((_BYTE *)v12 + 1);
        if (v12 < &v18)
          break;
        v15 = (__int16)(v15 + 1);
        v12 = (unint64_t *)((char *)v12 - 1);
      }
      while (v15 < a2);
    }
  }
  result = v3 > 0x773593FF;
  *a3 = (_BYTE)v14 - ((_BYTE)a3 + 1);
  return result;
}

uint64_t FractToPString(unsigned int a1, int a2, unsigned __int8 *a3)
{
  uint64_t result;
  char v6;
  unsigned int v7;
  char v8;
  uint64_t v9;
  size_t v10;
  unsigned __int8 *v11;
  unsigned __int8 __n[10];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  __n[9] = -86;
  *(_QWORD *)&__n[1] = 0xAAAAAAAAAAAAAAAALL;
  __n[0] = 0;
  if ((a1 & 0x80000000) != 0)
  {
    v7 = -a1;
    result = -4 * a1;
    if ((_DWORD)result)
    {
      result = FractionalToPString(result, a2, __n);
      v8 = result;
    }
    else
    {
      v8 = 0;
    }
    a3[2] = (v8 + (v7 >> 30)) | 0x30;
    *(_WORD *)a3 = 11522;
    v9 = 2;
  }
  else
  {
    result = 4 * a1;
    if ((_DWORD)result)
    {
      result = FractionalToPString(result, a2, __n);
      v6 = result;
    }
    else
    {
      v6 = 0;
    }
    a3[1] = (v6 + (a1 >> 30)) | 0x30;
    v9 = 1;
    *a3 = 1;
  }
  v10 = __n[0];
  if (__n[0])
  {
    v11 = &a3[v9];
    v11[1] = 46;
    result = (uint64_t)memcpy(v11 + 2, &__n[1], v10);
    *a3 += v10 + 1;
  }
  return result;
}

uint64_t StringToInt(const char *a1)
{
  int v1;
  _BOOL4 v2;
  int v3;
  unsigned int v4;
  const char *v5;
  int v6;

  v1 = *(unsigned __int8 *)a1;
  if (v1 == 45 || v1 == 43)
  {
    v2 = v1 == 45;
    v3 = *(unsigned __int8 *)++a1;
    v1 = v3;
  }
  else
  {
    v2 = 0;
  }
  if ((v1 - 48) > 9)
  {
    v4 = 0;
  }
  else
  {
    v4 = 0;
    v5 = a1 + 1;
    do
    {
      v4 = v1 + 10 * v4 - 48;
      v6 = *(unsigned __int8 *)v5++;
      v1 = v6;
    }
    while ((v6 - 48) < 0xA);
  }
  if (v2)
    return -v4;
  else
    return v4;
}

uint64_t HexToInt(const char *a1)
{
  char v1;
  uint64_t result;
  const char *v4;
  int v5;
  int v6;
  int v7;

  v1 = *a1;
  if (!*a1)
    return 0;
  result = 0;
  v4 = a1 + 1;
  do
  {
    v5 = v1;
    if ((v1 - 48) >= 0xAu)
    {
      if ((v1 - 65) >= 6)
      {
        if ((v1 - 97) > 5)
          return result;
        v6 = -87;
      }
      else
      {
        v6 = -55;
      }
    }
    else
    {
      v6 = -48;
    }
    result = (v5 + 16 * result + v6);
    v7 = *(unsigned __int8 *)v4++;
    v1 = v7;
  }
  while (v7);
  return result;
}

void *BlendHintBlock(unsigned __int16 *a1, uint64_t a2, void *__dst)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int32x4_t v7;
  unsigned __int16 *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int16 *v11;
  uint64_t v12;
  unsigned __int16 *v13;
  unsigned __int16 *v14;
  unsigned __int16 *v15;
  int32x4_t v16;
  uint64_t v17;
  int32x4_t v18;
  float64x2_t v19;
  double v20;
  int *v21;
  _DWORD *v22;
  uint64_t v23;
  int v24;
  int *v25;
  _DWORD *v26;
  uint64_t v27;
  int v28;
  unsigned __int16 *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  int v33;
  unsigned __int16 *v34;
  uint64_t v35;
  int64x2_t v36;
  double v37;
  unsigned __int16 *v38;
  int32x2_t *v39;
  uint64_t v40;
  uint64_t v41;
  int64x2_t v42;
  unsigned __int16 *v43;
  int32x2_t *v44;
  uint64_t v45;
  uint64_t v46;
  int64x2_t v47;
  int64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  unsigned int v52;
  int32x4_t *v53;
  void *result;
  int32x4_t v55;
  int32x4_t v56;
  int32x4_t v57;
  _OWORD v58[6];
  __int128 v59;
  _OWORD v60[6];
  _OWORD v61[6];
  uint64_t v62;

  if (a2 && (v4 = a1[36], v4 >= 2))
  {
    v5 = 0;
    v6 = 0;
    v62 = 0;
    v7 = 0uLL;
    memset(v61, 0, sizeof(v61));
    memset(v60, 0, sizeof(v60));
    v59 = 0u;
    v57 = 0u;
    memset(v58, 0, sizeof(v58));
    v55 = 0u;
    v56 = 0u;
    v8 = a1 + 44;
    v9 = a1[31];
    v10 = a1[32];
    v11 = a1 + 70;
    v12 = a1[33];
    v13 = a1 + 94;
    v14 = a1 + 124;
    v15 = a1 + 172;
    v16 = 0uLL;
    v17 = a1[34];
    v18 = 0uLL;
    v19 = (float64x2_t)vdupq_n_s64(0x3EF0000000000000uLL);
    do
    {
      v20 = (double)*(int *)(a2 + 4 * v5) * 0.0000152587891;
      v21 = (int *)v11;
      v22 = (_DWORD *)v58 + 1;
      v23 = v9;
      if ((_DWORD)v9)
      {
        do
        {
          v24 = *v21++;
          *v22++ += vcvtd_n_s64_f64(v20 * ((double)v24 * 0.0000152587891), 0x10uLL);
          --v23;
        }
        while (v23);
      }
      v25 = (int *)v13;
      v26 = (_DWORD *)&v58[3] + 1;
      v27 = v10;
      if ((_DWORD)v10)
      {
        do
        {
          v28 = *v25++;
          *v26++ += vcvtd_n_s64_f64(v20 * ((double)v28 * 0.0000152587891), 0x10uLL);
          --v27;
        }
        while (v27);
      }
      v29 = &v8[180 * v5];
      v31 = *(_OWORD *)v29;
      v30 = *((_OWORD *)v29 + 1);
      v32 = *((_OWORD *)v29 + 2);
      v33 = *((_DWORD *)v29 + 12);
      v34 = &v8[180 * v5];
      v35 = *(_QWORD *)(v34 + 74);
      v36.i64[0] = (int)v35;
      v36.i64[1] = SHIDWORD(v35);
      v37 = (double)*((int *)v34 + 39);
      *(int32x2_t *)((char *)&v59 + 4) = vadd_s32(*(int32x2_t *)((char *)&v59 + 4), vmovn_s64(vcvtq_n_s64_f64(vmulq_n_f64(vmulq_f64(vcvtq_f64_s64(v36), v19), v20), 0x10uLL)));
      HIDWORD(v59) += vcvtd_n_s64_f64(v20 * (v37 * 0.0000152587891), 0x10uLL);
      v38 = v14;
      v39 = (int32x2_t *)v60;
      v40 = v12;
      if ((_DWORD)v12)
      {
        do
        {
          v41 = *(_QWORD *)v38;
          v38 += 4;
          v42.i64[0] = (int)v41;
          v42.i64[1] = SHIDWORD(v41);
          *v39 = vadd_s32(*v39, vmovn_s64(vcvtq_n_s64_f64(vmulq_n_f64(vmulq_f64(vcvtq_f64_s64(v42), v19), v20), 0x10uLL)));
          ++v39;
          --v40;
        }
        while (v40);
      }
      v43 = v15;
      v44 = (int32x2_t *)v61;
      v45 = v17;
      if ((_DWORD)v17)
      {
        do
        {
          v46 = *(_QWORD *)v43;
          v43 += 4;
          v47.i64[0] = (int)v46;
          v47.i64[1] = SHIDWORD(v46);
          *v44 = vadd_s32(*v44, vmovn_s64(vcvtq_n_s64_f64(vmulq_n_f64(vmulq_f64(vcvtq_f64_s64(v47), v19), v20), 0x10uLL)));
          ++v44;
          --v45;
        }
        while (v45);
      }
      v48.i64[0] = (int)v31;
      v48.i64[1] = SDWORD1(v31);
      v49 = vcvtq_f64_s64(v48);
      v48.i64[0] = SDWORD2(v31);
      v48.i64[1] = SHIDWORD(v31);
      v7 = vaddq_s32(v7, vuzp1q_s32((int32x4_t)vcvtq_n_s64_f64(vmulq_n_f64(vmulq_f64(v49, v19), v20), 0x10uLL), (int32x4_t)vcvtq_n_s64_f64(vmulq_n_f64(vmulq_f64(vcvtq_f64_s64(v48), v19), v20), 0x10uLL)));
      v48.i64[0] = (int)v30;
      v48.i64[1] = SDWORD1(v30);
      v50 = vcvtq_f64_s64(v48);
      v48.i64[0] = SDWORD2(v30);
      v48.i64[1] = SHIDWORD(v30);
      v16 = vaddq_s32(v16, vuzp1q_s32((int32x4_t)vcvtq_n_s64_f64(vmulq_n_f64(vmulq_f64(v50, v19), v20), 0x10uLL), (int32x4_t)vcvtq_n_s64_f64(vmulq_n_f64(vmulq_f64(vcvtq_f64_s64(v48), v19), v20), 0x10uLL)));
      v48.i64[0] = (int)v32;
      v48.i64[1] = SDWORD1(v32);
      v51 = vcvtq_f64_s64(v48);
      v48.i64[0] = SDWORD2(v32);
      v48.i64[1] = SHIDWORD(v32);
      v6 += vcvtd_n_s64_f64(v20 * ((double)v33 * 0.0000152587891), 0x10uLL);
      v52 = vcvtd_n_s64_f64(v20 * ((double)*(int *)&v8[180 * v5++ + 176] * 0.0000152587891), 0x10uLL);
      v11 += 180;
      v18 = vaddq_s32(v18, vuzp1q_s32((int32x4_t)vcvtq_n_s64_f64(vmulq_n_f64(vmulq_f64(v51, v19), v20), 0x10uLL), (int32x4_t)vcvtq_n_s64_f64(vmulq_n_f64(vmulq_f64(vcvtq_f64_s64(v48), v19), v20), 0x10uLL)));
      LODWORD(v62) = v62 + v52;
      v13 += 180;
      v14 += 180;
      v15 += 180;
    }
    while (v5 != v4);
    v55 = v7;
    v56 = v16;
    v57 = v18;
    LODWORD(v58[0]) = v6;
    v53 = &v55;
  }
  else
  {
    v53 = (int32x4_t *)(a1 + 44);
  }
  result = memcpy(__dst, v53, 0x168uLL);
  if ((*((_DWORD *)__dst + 4) & 0x80000000) != 0)
    *((_DWORD *)__dst + 4) = 0;
  if ((*((_DWORD *)__dst + 5) & 0x80000000) != 0)
    *((_DWORD *)__dst + 5) = 0;
  return result;
}

uint64_t ComputeUnscaledBounds(uint64_t result, uint64_t a2)
{
  int v2;
  __int16 *v3;
  __int16 *v4;
  __int16 v5;
  __int16 v6;
  __int16 v7;
  __int16 v8;
  int v9;
  int v10;
  int v11;
  int v12;

  v2 = *(_DWORD *)(result + 4);
  v3 = *(__int16 **)(result + 72);
  v4 = *(__int16 **)(result + 80);
  *(_QWORD *)a2 = 0x800080007FFF7FFFLL;
  v5 = 0x7FFF;
  v6 = 0x8000;
  v7 = 0x8000;
  v8 = 0x7FFF;
  do
  {
    v10 = *v3++;
    v9 = v10;
    if (v10 < v8)
    {
      *(_WORD *)a2 = v9;
      v8 = v9;
    }
    if (v9 > v7)
    {
      *(_WORD *)(a2 + 4) = v9;
      v7 = v9;
    }
    v12 = *v4++;
    v11 = v12;
    if (v12 < v5)
    {
      *(_WORD *)(a2 + 2) = v11;
      v5 = v11;
    }
    if (v11 > v6)
    {
      *(_WORD *)(a2 + 6) = v11;
      v6 = v11;
    }
    --v2;
  }
  while (v2);
  return result;
}

uint64_t OffsetOutline(uint64_t result, _DWORD *a2, _DWORD *a3, int a4, int a5)
{
  int v5;
  _WORD *exception;

  v5 = *(_DWORD *)(result + 4);
  if (v5 < 1)
  {
    if (!v5)
      return result;
LABEL_8:
    exception = __cxa_allocate_exception(2uLL);
    *exception = 5;
    __cxa_throw(exception, MEMORY[0x1E0DE4F10], 0);
  }
  if (v5 >= *(_DWORD *)(result + 112))
    goto LABEL_8;
  if (a4 && a5)
  {
    do
    {
      *a2++ += a4;
      *a3++ += a5;
      --v5;
    }
    while (v5);
  }
  else if (a4)
  {
    do
    {
      *a2++ += a4;
      --v5;
    }
    while (v5);
  }
  else if (a5)
  {
    do
    {
      *a3++ += a5;
      --v5;
    }
    while (v5);
  }
  return result;
}

uint64_t ScaleGlyphOutline(uint64_t result, float a2, float a3)
{
  int v3;
  __int16 *v4;
  __int16 *v5;
  _DWORD *v6;
  _DWORD *v7;
  int v8;
  int v9;

  v3 = *(_DWORD *)(result + 4) + 8;
  v4 = *(__int16 **)(result + 72);
  v5 = *(__int16 **)(result + 80);
  v6 = *(_DWORD **)(result + 8);
  v7 = *(_DWORD **)(result + 16);
  do
  {
    v8 = *v4++;
    *v6++ = llroundf((float)(v8 << 6) * a2);
    v9 = *v5++;
    *v7++ = llroundf((float)(v9 << 6) * a3);
    --v3;
  }
  while (v3);
  return result;
}

uint64_t RoundPhantomPoints(uint64_t a1, int a2, int a3)
{
  uint64_t v5;
  _DWORD *v6;
  _DWORD *v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;

  v5 = *(int *)(a1 + 4);
  v6 = *(_DWORD **)(a1 + 8);
  v7 = *(_DWORD **)(a1 + 16);
  v8 = &v6[v5];
  v9 = &v7[v5];
  v10 = (unsigned int *)(*(_QWORD *)(a1 + 56) + 4 * v5);
  v11 = (unsigned int *)(*(_QWORD *)(a1 + 64) + 4 * v5);
  v12 = *v8;
  v13 = (*v8 + 32) & 0xFFFFFFC0;
  *v8 = v13;
  *v10 = v13;
  v10[1] = v8[1] - v12 + *v8;
  v8[1] = *v8 + ((a2 + 32) & 0xFFFFFFC0);
  v11[3] = v9[3];
  v14 = v9[2];
  v9[3] = (v9[3] + 32) & 0xFFFFFFC0;
  v11[2] = v14;
  v9[2] = v9[3] + ((a3 + 32) & 0xFFFFFFC0);
  *v11 = *v9;
  v15 = v9[1];
  *v9 = (*v9 + 32) & 0xFFFFFFC0;
  v11[1] = v15;
  v9[1] = (v9[1] + 32) & 0xFFFFFFC0;
  v10[2] = v8[2];
  v16 = v8[3];
  v8[2] = (v8[2] + 32) & 0xFFFFFFC0;
  v10[3] = v16;
  v8[3] = (v8[3] + 32) & 0xFFFFFFC0;
  return OffsetOutline(a1, v6, v7, *v8 - v12, 0);
}

void UnfoldGlyphOutline(uint64_t a1, uint64_t a2, unsigned __int16 *a3, unsigned int a4, _WORD *a5, unsigned __int16 **a6)
{
  int v6;
  int v7;
  _WORD *v9;
  unsigned __int16 *v10;
  unsigned __int16 v11;
  unsigned __int16 v12;
  unsigned __int16 *v13;
  int v14;
  unint64_t v15;
  unsigned __int16 v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  signed int v20;
  unsigned __int16 *v21;
  unsigned __int16 *v22;
  unsigned int v23;
  int64_t v24;
  _BYTE *v25;
  unint64_t v26;
  unsigned __int8 *v27;
  _BYTE *v28;
  int v29;
  void *v30;
  int64_t v31;
  char *v32;
  int v33;
  _WORD *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char v38;
  char v39;
  unsigned int v40;
  int v41;
  int v42;
  int v43;
  _WORD *v44;
  char v45;
  unsigned int v46;
  int v47;
  int v48;
  _WORD *exception;

  v6 = bswap32(*a3);
  if (*(_DWORD *)(a2 + 108) < v6 >> 16
    || (v7 = v6 >> 16, v7 < 0)
    || (v10 = *(unsigned __int16 **)(a2 + 24), v9 = *(_WORD **)(a2 + 32), v9 - v10 < v7))
  {
LABEL_51:
    exception = __cxa_allocate_exception(2uLL);
    *exception = 5;
    __cxa_throw(exception, MEMORY[0x1E0DE4F10], 0);
  }
  if (!*a3)
  {
LABEL_49:
    *(_QWORD *)(a2 + 92) = 0;
    *a5 = 0;
    *a6 = 0;
    return;
  }
  v11 = 0;
  v12 = 0;
  *(_DWORD *)a2 = v7;
  *(_DWORD *)(a2 + 4) = 0;
  v13 = a3 + 7;
  v14 = v7;
  v15 = (unint64_t)a3 + a4;
  do
  {
    v16 = v12;
    v12 = v11;
    if (v11 < v16)
      goto LABEL_51;
    *v10++ = v11;
    if ((unint64_t)v13 > v15)
      goto LABEL_51;
    v17 = bswap32(*(v13 - 2)) >> 16;
    *v9 = v17;
    if (v17 < v12)
      goto LABEL_49;
    ++v9;
    v11 = v17 + 1;
    ++v13;
    --v14;
  }
  while (v14);
  v18 = bswap32(*(v13 - 3)) >> 16;
  v19 = v18 + 1;
  *(_DWORD *)(a2 + 4) = v19;
  v20 = *(_DWORD *)(a2 + 112);
  if (v20 <= (int)v18 || v20 - (int)v19 <= 7)
  {
    *(_QWORD *)a2 = 0;
    goto LABEL_49;
  }
  *(_WORD *)(a2 + 92) = bswap32(a3[1]) >> 16;
  *(_WORD *)(a2 + 94) = bswap32(a3[2]) >> 16;
  *(_WORD *)(a2 + 96) = bswap32(a3[3]) >> 16;
  *(_WORD *)(a2 + 98) = bswap32(a3[4]) >> 16;
  v21 = &a3[(unsigned __int16)v7 + 5];
  v23 = *v21;
  v22 = v21 + 1;
  v24 = bswap32(v23) >> 16;
  *a5 = v24;
  if ((char *)a3 + a4 - (char *)v22 < v24)
    goto LABEL_51;
  *a6 = v22;
  v25 = *(_BYTE **)(a2 + 40);
  v26 = (unint64_t)&v25[v19];
  v27 = (unsigned __int8 *)v22 + v24;
  v28 = v25;
  do
  {
    if ((unint64_t)v27 >= v15)
      goto LABEL_51;
    v29 = *v27;
    *v28 = v29;
    v30 = v28 + 1;
    if ((v29 & 8) != 0)
    {
      if ((unint64_t)(v27 + 1) >= v15)
        goto LABEL_51;
      v31 = v27[1];
      if ((uint64_t)(v26 - (_QWORD)v30) < v31)
        goto LABEL_51;
      v27 += 2;
      if ((_DWORD)v31)
      {
        memset(v30, v29, v31);
        v28 += (v31 - 1) + 2;
        continue;
      }
    }
    else
    {
      ++v27;
    }
    ++v28;
  }
  while ((unint64_t)v28 < v26);
  v32 = *(char **)(a2 + 40);
  if (v28 - v32 != v19)
    goto LABEL_51;
  if ((unint64_t)v32 < v26)
  {
    v33 = 0;
    v34 = *(_WORD **)(a2 + 72);
    v35 = &v25[v18] - v32 + 1;
    v36 = v35;
    v37 = *(char **)(a2 + 40);
    do
    {
      v39 = *v37++;
      v38 = v39;
      if ((v39 & 2) != 0)
      {
        if ((v38 & 0x10) != 0)
        {
          if ((unint64_t)v27 >= v15)
            goto LABEL_51;
          v42 = *v27++;
          v33 += v42;
        }
        else
        {
          if ((unint64_t)v27 >= v15)
            goto LABEL_51;
          v41 = *v27++;
          v33 -= v41;
        }
      }
      else if ((v38 & 0x10) == 0)
      {
        if ((unint64_t)(v27 + 1) >= v15)
          goto LABEL_51;
        v40 = *(unsigned __int16 *)v27;
        v27 += 2;
        v33 += bswap32(v40) >> 16;
      }
      *v34++ = v33;
      --v36;
    }
    while (v36);
    v43 = 0;
    v44 = *(_WORD **)(a2 + 80);
    do
    {
      v45 = *v32;
      if ((*v32 & 4) != 0)
      {
        if ((*v32 & 0x20) != 0)
        {
          if ((unint64_t)v27 >= v15)
            goto LABEL_51;
          v48 = *v27++;
          v43 += v48;
        }
        else
        {
          if ((unint64_t)v27 >= v15)
            goto LABEL_51;
          v47 = *v27++;
          v43 -= v47;
        }
      }
      else if ((*v32 & 0x20) == 0)
      {
        if ((unint64_t)(v27 + 1) >= v15)
          goto LABEL_51;
        v46 = *(unsigned __int16 *)v27;
        v27 += 2;
        v43 += bswap32(v46) >> 16;
      }
      *v44++ = v43;
      *v32++ = v45 & 1;
      --v35;
    }
    while (v35);
  }
}

unsigned __int16 *UnfoldComponent(unsigned __int16 *a1, unint64_t a2, unsigned int a3, _WORD *a4, _WORD *a5, uint64_t a6, _BYTE *a7)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int16 *v11;
  BOOL v12;
  __int16 v13;
  unsigned __int16 *result;
  int v15;
  unsigned int v16;
  _DWORD *exception;

  v8 = 1;
  if ((a3 & 1) != 0)
    v8 = 2;
  v9 = v8 + ((a3 >> 3) & 1);
  if ((a3 & 0x40) != 0)
    v9 = v8 + 2;
  v10 = v8 | 4;
  if ((a3 & 0x80) == 0)
    v10 = v9;
  v11 = &a1[v10];
  v12 = v11 < a1 || (unint64_t)v11 > a2;
  if (v12 && ((unint64_t)(a1 + 1) > a2 || (a2 - (unint64_t)a1) >> 1 != v10))
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 5;
    __cxa_throw(exception, MEMORY[0x1E0DE4EF8], 0);
  }
  if ((a3 & 1) != 0)
  {
    *a4 = bswap32(*a1) >> 16;
    result = a1 + 2;
    *a5 = bswap32(a1[1]) >> 16;
  }
  else
  {
    if ((a3 & 2) != 0)
    {
      *a4 = *(char *)a1;
      v13 = *((char *)a1 + 1);
    }
    else
    {
      *a4 = *(unsigned __int8 *)a1;
      v13 = *((unsigned __int8 *)a1 + 1);
    }
    *a5 = v13;
    result = a1 + 1;
  }
  if ((a3 & 0xC8) != 0)
  {
    *a7 = 1;
    if ((__int128 *)a6 != &identityMatrix)
    {
      *(_OWORD *)a6 = identityMatrix;
      *(_OWORD *)(a6 + 16) = unk_1B0AAC51C;
      *(_DWORD *)(a6 + 32) = 0x40000000;
    }
    v15 = 4 * ((int)bswap32(*result) >> 16);
    *(_DWORD *)a6 = v15;
    if ((a3 & 0x80) != 0)
    {
      *(_DWORD *)(a6 + 4) = 4 * ((int)bswap32(result[1]) >> 16);
      *(_DWORD *)(a6 + 12) = 4 * ((int)bswap32(result[2]) >> 16);
      v16 = result[3];
      result += 4;
    }
    else
    {
      if ((a3 & 0x40) == 0)
      {
        *(_DWORD *)(a6 + 16) = v15;
        return ++result;
      }
      v16 = result[1];
      result += 2;
    }
    *(_DWORD *)(a6 + 16) = 4 * ((int)bswap32(v16) >> 16);
  }
  else
  {
    *a7 = 0;
  }
  return result;
}

uint64_t AppendToGlyphOutline(uint64_t a1, _QWORD *a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int32x2_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;

  v2 = HIDWORD(*(_QWORD *)a1);
  v3 = *(_QWORD *)(a1 + 8) + 4 * v2;
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 48);
  v6 = vsub_s32(*(int32x2_t *)(a1 + 108), *(int32x2_t *)a1);
  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 24) + 2 * v7;
  v9 = *(_QWORD *)(a1 + 56);
  v10 = *(_QWORD *)(a1 + 64);
  v11 = *(_QWORD *)(a1 + 32) + 2 * v7;
  v13 = *(_QWORD *)(a1 + 72);
  v12 = *(_QWORD *)(a1 + 80);
  v14 = *(_QWORD *)(a1 + 16) + 4 * v2;
  result = *(_QWORD *)(a1 + 120);
  a2[15] = result;
  a2[1] = v3;
  a2[2] = v14;
  a2[3] = v8;
  a2[4] = v11;
  a2[5] = v4 + v2;
  a2[6] = v5 + v2;
  a2[7] = v9 + 4 * v2;
  a2[8] = v10 + 4 * v2;
  a2[9] = v13 + 2 * v2;
  a2[10] = v12 + 2 * v2;
  *(int32x2_t *)((char *)a2 + 108) = v6;
  return result;
}

uint64_t MapF26Dot6(int a1, int *a2, int *a3, int *a4)
{
  int v7;
  uint64_t result;
  int v9;
  int v10;
  int v11;

  v7 = a1 + 8;
  result = M3x3Flags(a4);
  if ((_DWORD)result == 2)
  {
    v10 = *a4;
    v11 = a4[4];
    do
    {
      *a2 = (unint64_t)(*a2 * (uint64_t)v10 + 0x8000) >> 16;
      ++a2;
      *a3 = (unint64_t)(*a3 * (uint64_t)v11 + 0x8000) >> 16;
      ++a3;
      --v7;
    }
    while (v7);
  }
  else if ((_DWORD)result == 4)
  {
    do
    {
      v9 = ((unint64_t)(a4[4] * (uint64_t)*a3 + 0x8000) >> 16)
         + ((unint64_t)(a4[1] * (uint64_t)*a2 + 0x8000) >> 16);
      *a2 = ((unint64_t)(*a3 * (uint64_t)a4[3] + 0x8000) >> 16)
          + ((unint64_t)(*a2 * (uint64_t)*a4 + 0x8000) >> 16);
      ++a2;
      *a3++ = v9;
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t MapOriginalOutline(uint64_t a1, int *a2)
{
  int v2;
  __int16 *v4;
  __int16 *v5;
  uint64_t result;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  _WORD *exception;

  v2 = *(_DWORD *)(a1 + 4);
  if (v2 > *(_DWORD *)(a1 + 112))
  {
    exception = __cxa_allocate_exception(2uLL);
    *exception = 5;
    __cxa_throw(exception, MEMORY[0x1E0DE4F10], 0);
  }
  v4 = *(__int16 **)(a1 + 72);
  v5 = *(__int16 **)(a1 + 80);
  result = M3x3Flags(a2);
  if ((_DWORD)result == 2)
  {
    v13 = *a2;
    v14 = a2[4];
    do
    {
      *v4 = (*v4 * v13 + 0x8000) >> 16;
      ++v4;
      *v5 = (*v5 * v14 + 0x8000) >> 16;
      ++v5;
      --v2;
    }
    while (v2);
  }
  else if ((_DWORD)result == 4)
  {
    v7 = *a2;
    v8 = a2[1];
    v9 = a2[3];
    v10 = a2[4];
    do
    {
      v11 = *v4;
      v12 = *v5;
      *v4++ = ((v12 * v9 + 0x8000) >> 16) + ((v11 * v7 + 0x8000) >> 16);
      *v5++ = ((v12 * v10 + 0x8000) >> 16) + ((v11 * v8 + 0x8000) >> 16);
      --v2;
    }
    while (v2);
  }
  return result;
}

uint64_t OffsetOriginalOutline(uint64_t result, int a2, int a3)
{
  uint64_t v3;
  _WORD *v4;
  _WORD *v5;
  _WORD *exception;

  v3 = *(int *)(result + 4) + 4;
  if (*(_DWORD *)(result + 4) != -4)
  {
    if ((int)v3 >= *(_DWORD *)(result + 112)
      || (v4 = *(_WORD **)(result + 80), (unint64_t)&v4[v3] >= *(_QWORD *)(result + 120)))
    {
      exception = __cxa_allocate_exception(2uLL);
      *exception = 5;
      __cxa_throw(exception, MEMORY[0x1E0DE4F10], 0);
    }
    v5 = *(_WORD **)(result + 72);
    if (a2 && a3)
    {
      do
      {
        *v5++ += a2;
        *v4++ += a3;
        LODWORD(v3) = v3 - 1;
      }
      while ((_DWORD)v3);
    }
    else if (a2)
    {
      do
      {
        *v5++ += a2;
        LODWORD(v3) = v3 - 1;
      }
      while ((_DWORD)v3);
    }
    else if (a3)
    {
      do
      {
        *v4++ += a3;
        LODWORD(v3) = v3 - 1;
      }
      while ((_DWORD)v3);
    }
  }
  return result;
}

double ScaleAndMapOutline(uint64_t a1, int *a2, int a3, int a4)
{
  int *v7;
  int *v8;
  unsigned int *v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int16 *v13;
  unsigned __int16 *v14;
  int16x4_t *v15;
  int16x4_t v16;
  int16x4_t v17;
  int32x4_t *v18;
  uint64_t v19;
  int *v20;
  unsigned __int16 *v21;
  uint64_t v22;
  int v23;
  unsigned int v24;
  double result;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _WORD *v41;
  int v42;
  int v43;
  unsigned int v44;
  _WORD *v45;
  int v46;
  int v47;
  unsigned int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  double v55;
  _WORD *exception;

  if (!a3)
  {
    exception = __cxa_allocate_exception(2uLL);
    *exception = 5;
    __cxa_throw(exception, MEMORY[0x1E0DE4F10], 0);
  }
  v8 = *(int **)(a1 + 56);
  v7 = *(int **)(a1 + 64);
  v10 = *(unsigned int **)(a1 + 8);
  v9 = *(unsigned int **)(a1 + 16);
  v11 = *(int *)(a1 + 4);
  v12 = v11 + 8;
  v14 = *(unsigned __int16 **)(a1 + 72);
  v13 = *(unsigned __int16 **)(a1 + 80);
  v15 = (int16x4_t *)&v14[v11];
  v16 = *v15;
  v17 = v15[1];
  v18 = (int32x4_t *)&v8[v11];
  *v18 = vshll_n_s16(v16, 6uLL);
  v18[1] = vshll_n_s16(v17, 6uLL);
  v19 = *(int *)(a1 + 4);
  if ((_DWORD)v19 != (_DWORD)v11 + 8)
  {
    v20 = &v7[v19];
    v21 = &v13[v19];
    v22 = 2 * v11 - 2 * v19 + 16;
    do
    {
      v23 = (__int16)*v21++;
      *v20++ = v23 << 6;
      v22 -= 2;
    }
    while (v22);
  }
  v24 = M3x3Flags(a2);
  if (v24 >= 4)
  {
    if (v24 - 4 >= 2)
    {
      if (v24 == 6)
      {
        v37 = (unint64_t)(a2[8] + 0x2000) >> 14;
        v38 = *(int *)(a1 + 4);
        if ((_DWORD)v38)
        {
          v39 = 4 * v38;
          v40 = 4 * v38;
          v41 = v14;
          do
          {
            v42 = *v8++;
            v43 = v42 + 32;
            v44 = v42 + 95;
            if (v42 >= -32)
              v44 = v43;
            *v41++ = v44 >> 6;
            v40 -= 4;
          }
          while (v40);
          v45 = v13;
          do
          {
            v46 = *v7++;
            v47 = v46 + 32;
            v48 = v46 + 95;
            if (v46 >= -32)
              v48 = v47;
            *v45++ = v48 >> 6;
            v39 -= 4;
          }
          while (v39);
        }
        v49 = a3 >> 1;
        v50 = v37;
        OffsetOriginalOutline(a1, (__int16)-v14[(int)(v38 + 2 * (a4 != 0))], (__int16)-v13[(int)(v38 + 2 * (a4 != 0))]);
        do
        {
          v51 = *v14++;
          v52 = (v49 + (v51 << 16)) / a3;
          v53 = *v13++;
          v54 = (v49 + (v53 << 16)) / a3;
          v55 = (double)(int)(((unint64_t)(a2[2] * (uint64_t)v52 + 0x20000000) >> 30)
                            + v50
                            + ((unint64_t)(a2[5] * (uint64_t)v54 + 0x20000000) >> 30))
              * 0.0000152587891;
          result = (double)(int)(a2[7]
                               + ((unint64_t)(a2[1] * (uint64_t)v52 + 0x8000) >> 16)
                               + ((unint64_t)(a2[4] * (uint64_t)v54 + 0x8000) >> 16))
                 * 0.0000152587891
                 / v55;
          *v10++ = (vcvtd_n_s64_f64((double)(int)(a2[6]+ ((unint64_t)(*a2 * (uint64_t)v52 + 0x8000) >> 16)+ ((unint64_t)(a2[3] * (uint64_t)v54 + 0x8000) >> 16))* 0.0000152587891/ v55, 0x10uLL)+ 512) >> 10;
          *v9++ = (vcvtd_n_s64_f64(result, 0x10uLL) + 512) >> 10;
          LODWORD(v12) = v12 - 1;
        }
        while ((_DWORD)v12);
      }
    }
    else
    {
      v28 = *a2 / a3;
      v29 = a2[3] / a3;
      v30 = a2[1] / a3;
      v31 = a2[4] / a3;
      do
      {
        v33 = *v8++;
        v32 = v33;
        v34 = *v7++;
        *v10++ = ((unint64_t)(v29 * (uint64_t)v34 + 0x8000) >> 16)
               + ((unint64_t)(v28 * (uint64_t)v32 + 0x8000) >> 16);
        *v9++ = ((unint64_t)(v31 * (uint64_t)v34 + 0x8000) >> 16)
              + ((unint64_t)(v30 * (uint64_t)v32 + 0x8000) >> 16);
        LODWORD(v12) = v12 - 1;
      }
      while ((_DWORD)v12);
    }
  }
  else
  {
    v26 = *a2 / a3;
    v27 = a2[4] / a3;
    if (v26 == 0x10000 && a2[4] / a3 == 0x10000)
    {
      if ((_DWORD)v12)
      {
        memmove(v10, v8, 4 * v12);
        memmove(v9, v7, 4 * v12);
      }
    }
    else
    {
      do
      {
        v35 = *v8++;
        *v10++ = (unint64_t)(v26 * (uint64_t)v35 + 0x8000) >> 16;
        v36 = *v7++;
        *v9++ = (unint64_t)(v27 * (uint64_t)v36 + 0x8000) >> 16;
        LODWORD(v12) = v12 - 1;
      }
      while ((_DWORD)v12);
    }
  }
  return result;
}

void GetHmtxData(uint64_t a1, int a2, _WORD *a3, _WORD *a4, _WORD *a5, _WORD *a6)
{
  uint64_t v10;
  int v11;
  unsigned __int16 *v13;
  int TableParts;
  void *v16;
  BOOL v17;
  int v18;
  unsigned __int16 *v19;
  int v20;
  void *v21;
  BOOL v22;
  void *v23;
  void *v24;

  v23 = (void *)0xAAAAAAAAAAAAAAAALL;
  v24 = (void *)0xAAAAAAAAAAAAAAAALL;
  v10 = *(_QWORD *)(a1 + 8);
  v11 = *(unsigned __int16 *)(v10 + 146);
  *a5 = v11;
  if (a3 && v11)
  {
    if (v11 <= a2)
    {
      ScalerGetTableParts(*(memoryContext **)a1, *(_DWORD *)(v10 + 112), 4 * v11 - 4, 4u, &v24, 0);
      v13 = (unsigned __int16 *)v24;
      *a3 = bswap32(*(unsigned __int16 *)v24) >> 16;
      TableParts = ScalerGetTableParts(*(memoryContext **)a1, *(_DWORD *)(*(_QWORD *)(a1 + 8) + 112), 2 * (a2 - (unsigned __int16)*a5) + 4 * v11, 2u, &v23, 1);
      v16 = v23;
      if (TableParts)
        v17 = v23 == 0;
      else
        v17 = 1;
      if (v17)
      {
        a3[1] = 0;
      }
      else
      {
        a3[1] = bswap32(*(unsigned __int16 *)v23) >> 16;
        ScalerReleaseFontTable(*(memoryContext **)a1, v16);
      }
    }
    else
    {
      ScalerGetTableParts(*(memoryContext **)a1, *(_DWORD *)(v10 + 112), 4 * a2, 4u, &v24, 0);
      v13 = (unsigned __int16 *)v24;
      *a3 = bswap32(*(unsigned __int16 *)v24) >> 16;
      a3[1] = bswap32(v13[1]) >> 16;
    }
    ScalerReleaseFontTable(*(memoryContext **)a1, v13);
  }
  v18 = *(unsigned __int16 *)(v10 + 148);
  *a6 = v18;
  if (a4 && v18)
  {
    if (v18 <= a2)
    {
      ScalerGetTableParts(*(memoryContext **)a1, *(_DWORD *)(*(_QWORD *)(a1 + 8) + 116), 4 * v18 - 4, 4u, &v24, 0);
      v19 = (unsigned __int16 *)v24;
      *a4 = bswap32(*(unsigned __int16 *)v24) >> 16;
      v20 = ScalerGetTableParts(*(memoryContext **)a1, *(_DWORD *)(*(_QWORD *)(a1 + 8) + 116), 2 * (a2 - (unsigned __int16)*a6) + 4 * v18, 2u, &v23, 0);
      v21 = v23;
      if (v20)
        v22 = v23 == 0;
      else
        v22 = 1;
      if (v22)
      {
        a4[1] = 0;
      }
      else
      {
        a4[1] = bswap32(*(unsigned __int16 *)v23) >> 16;
        ScalerReleaseFontTable(*(memoryContext **)a1, v21);
      }
    }
    else
    {
      ScalerGetTableParts(*(memoryContext **)a1, *(_DWORD *)(*(_QWORD *)(a1 + 8) + 116), 4 * a2, 4u, &v24, 0);
      v19 = (unsigned __int16 *)v24;
      *a4 = bswap32(*(unsigned __int16 *)v24) >> 16;
      a4[1] = bswap32(v19[1]) >> 16;
    }
    ScalerReleaseFontTable(*(memoryContext **)a1, v19);
  }
}

uint64_t CountGlyphComponents(const __int16 *a1, unint64_t a2, unsigned int *a3)
{
  uint64_t v3;
  const __int16 *v4;
  const __int16 *v5;
  unsigned int v6;
  uint64_t v7;
  _WORD *exception;

  if (a3)
    *a3 = 10;
  LODWORD(v3) = 0;
  v4 = a1;
  do
  {
    if (v4 < a1 || (unint64_t)(v4 + 1) > a2)
    {
      exception = __cxa_allocate_exception(2uLL);
      *exception = 5;
      __cxa_throw(exception, MEMORY[0x1E0DE4F10], 0);
    }
    v5 = v4 + 3;
    v6 = bswap32(*(unsigned __int16 *)v4) >> 16;
    if ((v6 & 1) != 0)
    {
      v5 = v4 + 4;
    }
    else if (a3 && (v6 & 2) != 0)
    {
      *a3 += 2;
    }
    if ((v6 & 0x40) != 0)
      v7 = 2;
    else
      v7 = 1;
    v4 = &v5[v7];
    if ((v6 & 0x80) != 0)
      v4 = v5 + 4;
    if ((v6 & 0xC8) == 0)
      v4 = v5;
    v3 = (v3 + 1);
  }
  while ((v6 & 0x20) != 0);
  if (a3)
    *a3 += (_DWORD)v4 - (_DWORD)a1;
  return v3;
}

void StretchGlyph(uint64_t *a1, uint64_t a2, uint64_t a3, int32x2_t **a4, unsigned int a5, _BYTE *a6, unsigned int a7)
{
  uint64_t v13;
  unsigned __int16 *v14;
  unsigned __int16 *v15;
  unsigned __int16 *v16;
  uint64_t v17;
  __int16 *v18;
  _DWORD *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  __int16 *v23;
  _DWORD *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int32x4_t *v30;
  int16x8_t v31;
  float32x4_t v32;
  int32x4_t *v33;
  int16x8_t v34;
  float v35;
  float v36;
  size_t v37;
  int32x2_t *v38;
  __int128 v39;
  unsigned __int16 *v40;
  signed int v41;
  int v42;
  size_t v43;
  int32x2_t *v44;
  _WORD *v45;
  _WORD *v46;
  char v47;
  double v48;
  int8x8_t v49;
  int32x2_t v50;
  int32x4_t v51;
  __int128 v52;
  unsigned __int16 *v53;
  unsigned int v54;
  unsigned int v55;
  int v56;
  unsigned int v57;
  unsigned __int16 *v58;
  uint64_t v59;
  __int128 *v60;
  __int128 v61;
  __int16 v62;
  __int16 v63;
  unsigned int v64;
  int v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  int v77;
  int v78;
  uint64_t v79;
  int16x4_t v80;
  int32x4_t v81;
  int v82;
  int32x2_t *v83;
  int32x2_t v84;
  int16x4_t v85;
  uint64_t v86;
  unsigned int v87;
  int32x2_t v88;
  _WORD *v89;
  _WORD *v90;
  int v91;
  int v92;
  int v93;
  int v94;
  int32x2_t *v95;
  float v96;
  float v97;
  float v98;
  int v99;
  float32x4_t v100;
  float32x4_t v101;
  float32x4_t v102;
  float32x4_t v103;
  float32x4_t v104;
  float32x4_t v105;
  int32x2_t *v106;
  _WORD *v107;
  __int16 *v108;
  uint64_t v109;
  _DWORD *v110;
  uint64_t v111;
  int v112;
  __int16 *v113;
  _DWORD *v114;
  uint64_t v115;
  int v116;
  float v117;
  float v118;
  uint64_t v119;
  int32x2_t *v120;
  unsigned __int16 *v121;
  uint64_t v122;
  size_t v123;
  _WORD *exception;
  _WORD *v125;
  _WORD *v126;
  _WORD *v127;
  _WORD *v128;
  _WORD *v129;
  int32x4_t v130;
  int v131;
  char v132;
  unsigned int v133;
  unsigned int v134;
  uint64_t v135;
  int32x2_t *v136;
  int32x2_t *v137;
  unint64_t v138;
  int v139;
  int32x2_t *v141;
  int32x2_t *v142;
  __int128 v143;
  __int128 v144;
  int v145;
  __int128 v146[2];
  int v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  _BYTE v152[44];
  __int16 v153;
  __int16 v154;
  __int128 v155;
  __int128 v156;
  int v157;
  char v158;
  char v159;
  unsigned __int8 *v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  unint64_t v168;
  unsigned __int16 *v169;
  unsigned int v170;
  unsigned int v171;
  __int128 v172;
  __int128 v173;
  int v174;
  uint64_t v175;

  v175 = *MEMORY[0x1E0C80C00];
  v139 = *(__int16 *)(a1[1] + 130);
  *(_QWORD *)a2 = 0;
  *a6 = 0;
  v170 = -1431655766;
  v171 = -1431655766;
  if ((GetSfntGlyph((uint64_t)a1, *(_DWORD *)(a2 + 88), &v171, &v170) & 1) == 0)
  {
    exception = __cxa_allocate_exception(2uLL);
    *exception = 5;
    __cxa_throw(exception, MEMORY[0x1E0DE4F10], 0);
  }
  v169 = 0;
  v13 = v170;
  if (!v170
    || (ScalerGetTableParts((memoryContext *)*a1, *(_DWORD *)(a1[1] + 104), v171, v170, &v169, 1), (v14 = v169) == 0))
  {
    v14 = 0;
    v160 = 0;
    LOWORD(v148) = 0;
    *(_QWORD *)(a2 + 92) = 0;
LABEL_11:
    LoadGlyphMetrics((uint64_t)a1, a2);
    if (!*(_BYTE *)(a1[2] + 56) || !*(_BYTE *)(a1[1] + 156) || !ApplyFeaturesToOutline((uint64_t)a1, a2))
    {
      v17 = *(int *)(a2 + 4);
      if ((_DWORD)v17)
      {
        v18 = *(__int16 **)(a2 + 72);
        v19 = *(_DWORD **)(a2 + 56);
        v20 = 2 * v17;
        do
        {
          v21 = *v18++;
          *v19++ = llroundf((float)v21 * 64.0);
          v20 -= 2;
        }
        while (v20);
        v22 = *(int *)(a2 + 4);
        if ((_DWORD)v22)
        {
          v23 = *(__int16 **)(a2 + 80);
          v24 = *(_DWORD **)(a2 + 64);
          v25 = 2 * v22;
          do
          {
            v26 = *v23++;
            *v24++ = llroundf((float)v26 * 64.0);
            v25 -= 2;
          }
          while (v25);
        }
      }
    }
    ConstructPhantomPoints((_WORD *)a1[1], a2, (__int16)(*(_WORD *)(a2 + 92) - *(_WORD *)(a2 + 102)));
    if (a5)
    {
      v27 = *(int *)(a2 + 4);
      v28 = 2 * v27;
      v29 = *(_QWORD *)(a2 + 80);
      v30 = (int32x4_t *)(*(_QWORD *)(a2 + 56) + 4 * v27);
      v31 = *(int16x8_t *)(*(_QWORD *)(a2 + 72) + v28);
      v32 = (float32x4_t)vdupq_n_s32(0x42800000u);
      *v30 = vcvtq_s32_f32(vrndaq_f32(vmulq_f32(vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v31.i8)), v32)));
      v30[1] = vcvtq_s32_f32(vrndaq_f32(vmulq_f32(vcvtq_f32_s32(vmovl_high_s16(v31)), v32)));
      v33 = (int32x4_t *)(*(_QWORD *)(a2 + 64) + 4 * *(int *)(a2 + 4));
      v34 = *(int16x8_t *)(v29 + v28);
      *v33 = vcvtq_s32_f32(vrndaq_f32(vmulq_f32(vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v34.i8)), v32)));
      v33[1] = vcvtq_s32_f32(vrndaq_f32(vmulq_f32(vcvtq_f32_s32(vmovl_high_s16(v34)), v32)));
      v35 = (double)*(int *)(a3 + 36) * 0.0000152587891 / (double)v139;
      v36 = (double)*(int *)(a3 + 52) * 0.0000152587891 / (double)v139;
      ScaleGlyphOutline(a2, v35, v36);
      RoundPhantomPoints(a2, llroundf((float)(v35 * (float)*(__int16 *)(a2 + 100)) * 64.0), llroundf((float)(v36 * (float)*(__int16 *)(a2 + 104)) * 64.0));
      if ((_WORD)v148)
      {
        v37 = 4 * *(_DWORD *)(a2 + 4);
        memcpy(*(void **)(a2 + 56), *(const void **)(a2 + 8), v37);
        memcpy(*(void **)(a2 + 64), *(const void **)(a2 + 16), v37);
        RunGlyphProgram(a1, a2, a3, (unsigned __int16)v148, v160, 0);
      }
    }
    if (a4)
    {
      v38 = *a4;
      *a4 = 0;
      if (v38)
        MEMORY[0x1B5E0CD14](v38, 0x1000C8052888210);
    }
    v141 = 0;
    goto LABEL_27;
  }
  v15 = (unsigned __int16 *)((char *)v169 + v13);
  v16 = v169 + 1;
  if ((*v169 & 0x80) == 0)
  {
    v160 = 0;
    LOWORD(v148) = 0;
    if (((unint64_t)v169 > 0xFFFFFFFFFFFFFFF5 || v169 + 5 > v15) && ((v13 & 0xFFFFFFFE) != 0xA || v16 > v15))
    {
      v45 = __cxa_allocate_exception(2uLL);
      *v45 = 5;
      __cxa_throw(v45, MEMORY[0x1E0DE4F10], 0);
    }
    UnfoldGlyphOutline((uint64_t)a1, a2, v169, v13, &v148, (unsigned __int16 **)&v160);
    goto LABEL_11;
  }
  if (*(unsigned __int16 *)(a1[1] + 66) <= a7)
  {
    v126 = __cxa_allocate_exception(2uLL);
    *v126 = 5;
    __cxa_throw(v126, MEMORY[0x1E0DE4F10], 0);
  }
  v168 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v39 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v39 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v167 = v39;
  v166 = v39;
  v165 = v39;
  v164 = v39;
  v163 = v39;
  v162 = v39;
  v161 = v39;
  v160 = 0;
  if (((unint64_t)v16 > 0xFFFFFFFFFFFFFFF7 || v169 + 5 > v15) && ((v13 & 0xFFFFFFFE) != 0xA || v169 + 2 > v15))
  {
    v46 = __cxa_allocate_exception(2uLL);
    *v46 = 5;
    __cxa_throw(v46, MEMORY[0x1E0DE4F10], 0);
  }
  v134 = a5;
  *(_WORD *)(a2 + 92) = bswap32(v169[1]) >> 16;
  *(_WORD *)(a2 + 94) = bswap32(v14[2]) >> 16;
  *(_WORD *)(a2 + 96) = bswap32(v14[3]) >> 16;
  v40 = v14 + 5;
  v169 = v14 + 5;
  *(_WORD *)(a2 + 98) = bswap32(v14[4]) >> 16;
  v135 = a3;
  v138 = (unint64_t)v14 + v13;
  if (*(_BYTE *)(a1[2] + 56))
  {
    v41 = CountGlyphComponents((const __int16 *)v14 + 5, (unint64_t)v15, 0);
    v42 = v41 + 4;
    if (v41 < -4)
      v43 = -1;
    else
      v43 = 8 * v42;
    v44 = (int32x2_t *)operator new[]();
    bzero(v44, v43);
    v137 = (int32x2_t *)((char *)v44 + 4 * v42);
    v136 = v44;
    if (ApplyFeaturesToComponents((uint64_t)a1, *(_DWORD *)(a2 + 88), *(__int16 **)(a1[2] + 16), v41, v44, v137))
    {
      v142 = v44;
    }
    else
    {
      MEMORY[0x1B5E0CD14](v44, 0x1000C8052888210);
      v142 = 0;
    }
  }
  else
  {
    v142 = 0;
    v136 = 0;
    v137 = 0;
  }
  v131 = 0;
  v47 = 0;
  v133 = a7 + 1;
  v48 = (double)(v139 << 10);
  v49 = (int8x8_t)0xAAAAAAAAAAAAAAAALL;
  v50 = (int32x2_t)0xAAAAAAAAAAAAAAAALL;
  v51.i64[0] = 0xAAAAAAAAAAAAAAAALL;
  v51.i64[1] = 0xAAAAAAAAAAAAAAAALL;
  v130 = v51;
  do
  {
    if ((v14 > v40 || (unint64_t)v40 > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v40 + 2) > v138)
      && (v14 > v40 || (unint64_t)(v40 + 1) > v138 || ((v138 - (_QWORD)v40) & 0xFFFFFFFFFFFFFFFELL) != 4))
    {
      v169 = v40;
      goto LABEL_138;
    }
    v159 = -86;
    v158 = -86;
    v157 = -1431655766;
    *(_QWORD *)&v52 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v52 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v155 = v52;
    v156 = v52;
    v154 = -21846;
    v153 = -21846;
    *(_OWORD *)&v152[28] = v52;
    *(_OWORD *)v152 = v52;
    *(_OWORD *)&v152[16] = v52;
    v150 = v52;
    v151 = v52;
    v148 = v52;
    v149 = v52;
    v53 = v40 + 2;
    v54 = *v40;
    v55 = bswap32(v40[1]) >> 16;
    v56 = *(_DWORD *)(a2 + 88);
    LODWORD(v166) = v55;
    if (v56 == v55 || v55 >= *(unsigned __int16 *)(a1[1] + 40) || *(_DWORD *)(a2 + 4) > *(_DWORD *)(a2 + 112))
      goto LABEL_161;
    v57 = bswap32(v54) >> 16;
    v58 = UnfoldComponent(v53, v138, v57, &v154, &v153, (uint64_t)&v155, &v159);
    v40 = v58;
    if (v159)
    {
      *a6 = 1;
      if (v134)
      {
        v148 = v155;
        v149 = v156;
        LODWORD(v150) = v157;
        v172 = v155;
        v173 = v156;
        v174 = v157;
        if (M3x3Concat((__int128 *)v135, -1, &v148, -1))
        {
          v148 = v172;
          v149 = v173;
          LODWORD(v150) = v174;
        }
        v132 = 0;
        v59 = DecomposeMapping((uint64_t)&v148, (*(unsigned __int8 *)(a1[1] + 128) >> 3) & 1) == 0;
        v60 = &v148;
      }
      else
      {
        v132 = 1;
        v59 = 0;
        v60 = 0;
      }
    }
    else
    {
      v59 = v134;
      if (v134)
      {
        v132 = 0;
        v60 = (__int128 *)v135;
      }
      else
      {
        v60 = 0;
        v132 = 1;
      }
    }
    AppendToGlyphOutline(a2, &v160);
    bzero((char *)&v166 + 4, 8uLL);
    StretchGlyph(a1, &v160, v60, 0, v59, &v158, v133);
    if (v159)
    {
      if ((_DWORD)v59)
      {
        v147 = -1431655766;
        *(_QWORD *)&v61 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v61 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v146[0] = v61;
        v146[1] = v61;
        v143 = *(_OWORD *)&v152[8];
        v144 = *(_OWORD *)&v152[24];
        v145 = *(_DWORD *)&v152[40];
        InvertRemainder((uint64_t)v146, (int *)(v135 + 72));
        v172 = *(_OWORD *)&v152[8];
        v173 = *(_OWORD *)&v152[24];
        v174 = *(_DWORD *)&v152[40];
        if (M3x3Concat(v146, -1, &v143, -1))
        {
          v143 = v172;
          v144 = v173;
          v145 = v174;
        }
        if (!CheckVitalElements((uint64_t)a1, (uint64_t)&v160))
        {
          v169 = v58;
          v127 = __cxa_allocate_exception(2uLL);
          *v127 = 5;
          __cxa_throw(v127, MEMORY[0x1E0DE4F10], 0);
        }
        MapF26Dot6(SHIDWORD(v160), (int *)v164, *((int **)&v164 + 1), (int *)&v143);
        MapF26Dot6(SHIDWORD(v160), (int *)v161, *((int **)&v161 + 1), (int *)&v143);
      }
      if (HIDWORD(v160))
        MapOriginalOutline((uint64_t)&v160, (int *)&v155);
    }
    if ((v57 & 2) != 0)
    {
      if (v142)
      {
        v66 = roundf(*(float *)v136->i32 + (float)v154);
        if (v66 <= 32767.0)
          v67 = v66;
        else
          v67 = 32767.0;
        if (v66 >= -32768.0)
          v68 = v67;
        else
          v68 = -32768.0;
        v154 = (int)v68;
        v69 = *(float *)v137->i32;
        v136 = (int32x2_t *)((char *)v136 + 4);
        v137 = (int32x2_t *)((char *)v137 + 4);
        v70 = roundf(v69 + (float)v153);
        if (v70 <= 32767.0)
          v71 = v70;
        else
          v71 = 32767.0;
        if (v70 >= -32768.0)
          v72 = v71;
        else
          v72 = -32768.0;
        v153 = (int)v72;
      }
      if ((v57 & 0x1800) == 0x800 && v159)
      {
        v73 = sqrt((double)(int)v155 * (double)(int)v155 + (double)SDWORD1(v155) * (double)SDWORD1(v155));
        LODWORD(v74) = (int)((double)(int)v155 * (double)(int)v156 / (double)(int)v73)
                     - (int)((double)SDWORD1(v155) * (double)SHIDWORD(v155) / (double)(int)v73);
        if ((int)v74 >= 0)
          v74 = v74;
        else
          v74 = ((int)((double)SDWORD1(v155) * (double)SHIDWORD(v155) / (double)(int)v73)
                             - (int)((double)(int)v155 * (double)(int)v156 / (double)(int)v73));
        v75 = (unint64_t)(v73 * v154 + 0x8000) >> 16;
        v154 = v75;
        v76 = (unint64_t)(v74 * v153 + 0x8000) >> 16;
        v153 = v76;
        if (!(_DWORD)v59)
        {
LABEL_109:
          v64 = 0;
          v65 = 0;
          goto LABEL_112;
        }
      }
      else
      {
        LOWORD(v75) = v154;
        LOWORD(v76) = v153;
        if (!(_DWORD)v59)
          goto LABEL_109;
      }
      v77 = (int)((double)(__int16)v75 * (double)*(int *)(v135 + 36) / v48);
      v78 = (int)((double)(__int16)v76 * (double)*(int *)(v135 + 52) / v48);
      if ((v57 & 4) != 0)
        v64 = (v77 + 32) & 0xFFFFFFC0;
      else
        v64 = v77;
      if ((v57 & 4) != 0)
        v65 = (v78 + 32) & 0xFFFFFFC0;
      else
        v65 = v78;
      OffsetOutline((uint64_t)&v160, (_DWORD *)v161, *((_DWORD **)&v161 + 1), v64, v65);
      LOWORD(v75) = v154;
      LOWORD(v76) = v153;
    }
    else
    {
      v62 = v154;
      if ((v47 & (v154 >= 0)) != 1
        || *(_DWORD *)(a2 + 112) <= (int)(unsigned __int16)v154
        || (v63 = v153, v153 < 0)
        || SDWORD2(v167) <= v153)
      {
        v53 = v58;
LABEL_161:
        v169 = v53;
        v125 = __cxa_allocate_exception(2uLL);
        *v125 = 5;
        __cxa_throw(v125, MEMORY[0x1E0DE4F10], 0);
      }
      if ((_DWORD)v59)
      {
        v64 = *(_DWORD *)(*(_QWORD *)(a2 + 8) + 4 * (unsigned __int16)v154)
            - *(_DWORD *)(v161 + 4 * (unsigned __int16)v153);
        v65 = *(_DWORD *)(*(_QWORD *)(a2 + 16) + 4 * (unsigned __int16)v154)
            - *(_DWORD *)(*((_QWORD *)&v161 + 1) + 4 * (unsigned __int16)v153);
        OffsetOutline((uint64_t)&v160, (_DWORD *)v161, *((_DWORD **)&v161 + 1), v64, v65);
        v62 = v154;
        v63 = v153;
      }
      else
      {
        v64 = 0;
        v65 = 0;
      }
      v79 = v63;
      LOWORD(v75) = *(_WORD *)(*(_QWORD *)(a2 + 72) + 2 * v62) - *(_WORD *)(v165 + 2 * v63);
      LOWORD(v76) = *(_WORD *)(*(_QWORD *)(a2 + 80) + 2 * v62) - *(_WORD *)(*((_QWORD *)&v165 + 1) + 2 * v79);
      v136 = (int32x2_t *)((char *)v136 + 4);
      v137 = (int32x2_t *)((char *)v137 + 4);
    }
LABEL_112:
    OffsetOriginalOutline((uint64_t)&v160, (__int16)v75, (__int16)v76);
    v82 = HIDWORD(v160);
    if ((v57 & 0x200) != 0 && (_DWORD)v59)
    {
      v80.i32[0] = 0;
      v83 = (int32x2_t *)(*((_QWORD *)&v161 + 1) + 4 * SHIDWORD(v160));
      v84 = *v83;
      v85 = (int16x4_t)v83[1];
      v86 = a1[1];
      if (*(_WORD *)(v86 + 148))
        v87 = 0;
      else
        v87 = v64;
      v81.i64[0] = __PAIR64__(v87, v64);
      v130 = vaddq_s32(*(int32x4_t *)(v161 + 4 * SHIDWORD(v160)), vzip1q_s32(v81, v81));
      v88 = vdup_n_s32(v65);
      v50 = vadd_s32((int32x2_t)v85, v88);
      v85.i16[0] = *(_WORD *)(v86 + 146);
      v49 = vbsl_s8((int8x8_t)vdup_lane_s16(vceq_s16(v85, v80), 0), (int8x8_t)vadd_s32(v84, v88), (int8x8_t)v84);
      v131 = 1;
    }
    if (HIDWORD(v160))
    {
      v90 = (_WORD *)*((_QWORD *)&v162 + 1);
      v89 = (_WORD *)v162;
      v91 = (int)v160;
      v92 = *(_DWORD *)(a2 + 4);
      v93 = (int)v160;
      do
      {
        *v89++ += v92;
        *v90++ += v92;
        --v93;
      }
      while (v93);
      *(_DWORD *)a2 += v91;
      *(_DWORD *)(a2 + 4) = v92 + v82;
    }
    v47 = 1;
  }
  while ((v57 & 0x20) != 0);
  v169 = v58;
  v94 = *(_DWORD *)(a2 + 4);
  if (v94 < 1)
    goto LABEL_126;
  if (v94 > *(_DWORD *)(a1[1] + 32))
  {
LABEL_138:
    v107 = __cxa_allocate_exception(2uLL);
    *v107 = 5;
    __cxa_throw(v107, MEMORY[0x1E0DE4F10], 0);
  }
  ComputeUnscaledBounds(a2, a2 + 92);
LABEL_126:
  LoadGlyphMetrics((uint64_t)a1, a2);
  v95 = v142;
  if (v142)
  {
    v96 = roundf(COERCE_FLOAT(*v136));
    if (v96 <= 32767.0)
      v97 = v96;
    else
      v97 = 32767.0;
    if (v96 >= -32768.0)
      v98 = v97;
    else
      v98 = -32768.0;
    v99 = (int)v98;
    v100 = vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)(a2 + 100)));
    *(int32x2_t *)v101.f32 = vrev64_s32(*v136);
    *(int32x2_t *)&v101.u32[2] = vrev64_s32(v137[1]);
    v102 = vaddq_f32(v101, v100);
    v103 = vsubq_f32(v100, v101);
    v103.i32[0] = v102.i32[0];
    v103.i32[3] = v102.i32[3];
    v104 = vrndaq_f32(v103);
    v102.i64[0] = 0xC7000000C7000000;
    v102.i64[1] = 0xC7000000C7000000;
    v105 = (float32x4_t)vdupq_n_s32(0x46FFFE00u);
    *(int16x4_t *)(a2 + 100) = vmovn_s32(vcvtq_s32_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v102, v104), (int8x16_t)v102, vbslq_s8((int8x16_t)vcgtq_f32(v104, v105), (int8x16_t)v105, (int8x16_t)v104))));
    if (a4)
    {
      v106 = *a4;
      *a4 = v142;
      if (v106)
        MEMORY[0x1B5E0CD14](v106, 0x1000C8052888210);
      v95 = 0;
    }
  }
  else
  {
    v99 = 0;
  }
  v108 = *(__int16 **)(a2 + 72);
  v109 = *(int *)(a2 + 4);
  if (v108 != &v108[v109 + 8])
  {
    v110 = *(_DWORD **)(a2 + 56);
    v111 = 2 * v109 + 16;
    do
    {
      v112 = *v108++;
      *v110++ = llroundf((float)v112 * 64.0);
      v111 -= 2;
    }
    while (v111);
    v109 = *(int *)(a2 + 4);
  }
  v113 = *(__int16 **)(a2 + 80);
  if (v113 != &v113[v109 + 8])
  {
    v114 = *(_DWORD **)(a2 + 64);
    v115 = 2 * v109 + 16;
    do
    {
      v116 = *v113++;
      *v114++ = llroundf((float)v116 * 64.0);
      v115 -= 2;
    }
    while (v115);
  }
  v141 = v95;
  ConstructPhantomPoints((_WORD *)a1[1], a2, v99);
  if ((v132 & 1) == 0)
  {
    v117 = (double)*(int *)(v135 + 36) * 0.0000152587891 / (double)v139;
    v118 = (double)*(int *)(v135 + 52) * 0.0000152587891 / (double)v139;
    AppendToGlyphOutline(a2, &v160);
    HIDWORD(v160) = 0;
    ScaleGlyphOutline((uint64_t)&v160, v117, v118);
    RoundPhantomPoints((uint64_t)&v160, llroundf((float)(v117 * (float)*(__int16 *)(a2 + 100)) * 64.0), llroundf((float)(v118 * (float)*(__int16 *)(a2 + 104)) * 64.0));
    if (v131)
    {
      v119 = a1[1];
      if (*(_WORD *)(v119 + 146))
      {
        *(int32x4_t *)v161 = v130;
        v119 = a1[1];
      }
      if (*(_WORD *)(v119 + 148))
      {
        v120 = (int32x2_t *)*((_QWORD *)&v161 + 1);
        **((_QWORD **)&v161 + 1) = v49;
        v120[1] = v50;
      }
    }
    if ((v57 & 0x100) != 0)
    {
      if (v14 > v58 || (v121 = v58 + 1, (unint64_t)(v58 + 1) > v138))
      {
        v128 = __cxa_allocate_exception(2uLL);
        *v128 = 5;
        __cxa_throw(v128, MEMORY[0x1E0DE4F10], 0);
      }
      v122 = bswap32(*v58) >> 16;
      if ((unint64_t)v121 + v122 > v138 || (unsigned __int16 *)((char *)v121 + v122) < v121)
      {
        v129 = __cxa_allocate_exception(2uLL);
        *v129 = 5;
        __cxa_throw(v129, MEMORY[0x1E0DE4F10], 0);
      }
      v123 = 4 * *(_DWORD *)(a2 + 4);
      memcpy(*(void **)(a2 + 56), *(const void **)(a2 + 8), v123);
      memcpy(*(void **)(a2 + 64), *(const void **)(a2 + 16), v123);
      RunGlyphProgram(a1, a2, v135, v122, (unsigned __int8 *)v58 + 2, 1);
    }
  }
LABEL_27:
  if (v14)
    ScalerReleaseFontTable((memoryContext *)*a1, v14);
  if (v141)
    MEMORY[0x1B5E0CD14](v141, 0x1000C8052888210);
}

#error "1B0983254: call analysis failed (funcsize=68)"

void sub_1B0983300()
{
  __cxa_end_catch();
  JUMPOUT(0x1B098330CLL);
}

BOOL CheckVitalElements(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 result;
  int v4;
  int v5;

  v2 = *(_QWORD *)(a1 + 8);
  if (*(_DWORD *)a2 > *(_DWORD *)(v2 + 28))
    return 0;
  result = 0;
  v4 = *(_DWORD *)(a2 + 4);
  if ((v4 & 0x80000000) == 0)
  {
    v5 = *(_DWORD *)(v2 + 32);
    if (v5 >= v4 && v5 - v4 >= 8)
    {
      if (!*(_QWORD *)(a2 + 72) || !*(_QWORD *)(a2 + 80) || !*(_QWORD *)(a2 + 8))
        return 0;
      return *(_QWORD *)(a2 + 16) != 0;
    }
  }
  return result;
}

void LoadGlyphMetrics(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  _BOOL4 v7;
  BOOL v8;
  __int16 v9;
  _WORD *v10;
  unsigned int FontTable;
  unsigned int v12;
  unsigned int v13;
  __int16 v14;
  __int16 v15;
  void *v16;
  void *v17;
  __int16 v18;
  __int16 v19;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_DWORD *)(a2 + 88);
  v7 = *(__int16 *)(a2 + 96) > *(__int16 *)(a2 + 92) && *(__int16 *)(a2 + 98) > *(__int16 *)(a2 + 94);
  v19 = -21846;
  v18 = -21846;
  if (v5)
    v8 = v5 == 1358921729;
  else
    v8 = 1;
  if (v8 || !*(_BYTE *)(v5 + 488))
  {
    GetHmtxData(a1, v6, (_WORD *)(a2 + 100), 0, &v19, &v18);
LABEL_10:
    if (v19)
      return;
    v9 = *(_WORD *)(v4 + 142);
    *(_WORD *)(a2 + 102) = v9;
    if (v7)
    {
LABEL_12:
      *(_WORD *)(a2 + 100) = *(_WORD *)(a2 + 96) + 2 * v9 - *(_WORD *)(a2 + 92);
      return;
    }
    v10 = (_WORD *)(a2 + 100);
    v14 = *(_WORD *)(a2 + 104);
    goto LABEL_20;
  }
  v10 = (_WORD *)(a2 + 100);
  GetHmtxData(a1, v6, (_WORD *)(a2 + 100), (_WORD *)(a2 + 104), &v19, &v18);
  if (v18)
    goto LABEL_10;
  if (!v7)
  {
    v15 = *(_WORD *)(v4 + 142);
    *(_WORD *)(a2 + 106) = v15;
    v14 = *(_WORD *)(a2 + 100);
    *(_WORD *)(a2 + 104) = v14;
    if (v19)
      return;
    *(_WORD *)(a2 + 102) = v15;
LABEL_20:
    *v10 = v14;
    return;
  }
  v17 = (void *)0xAAAAAAAAAAAAAAAALL;
  FontTable = ScalerGetFontTable(*(memoryContext **)a1, 1330851634, 0, &v17, 1, 0);
  if (v17)
  {
    if (FontTable < 0x48)
    {
      v12 = 0;
      v13 = 0;
    }
    else
    {
      v12 = bswap32(*((unsigned __int16 *)v17 + 34)) >> 16;
      v13 = bswap32(*((unsigned __int16 *)v17 + 35)) >> 16;
    }
    ScalerReleaseFontTable(*(memoryContext **)a1, v17);
  }
  else
  {
    v12 = 0;
    v13 = 0;
  }
  if (!(v12 | v13))
  {
    v16 = (void *)0xAAAAAAAAAAAAAAAALL;
    ScalerGetFontTable(*(memoryContext **)a1, 1751672161, 0, &v16, 1, 36);
    if (v16)
    {
      v12 = bswap32(*((unsigned __int16 *)v16 + 2)) >> 16;
      v13 = bswap32(*((unsigned __int16 *)v16 + 3)) >> 16;
      ScalerReleaseFontTable(*(memoryContext **)a1, v16);
    }
    else
    {
      LOWORD(v12) = 0;
      LOWORD(v13) = 0;
    }
  }
  *(_WORD *)(a2 + 106) = v12 - *(_WORD *)(a2 + 98);
  *(_WORD *)(a2 + 104) = v12 - v13;
  if (!v19)
  {
    v9 = *(_WORD *)(v4 + 142);
    *(_WORD *)(a2 + 102) = v9;
    goto LABEL_12;
  }
}

_WORD *ConstructPhantomPoints(_WORD *result, uint64_t a2, int a3)
{
  __int16 v3;
  uint64_t v5;
  _WORD *v6;
  _WORD *v7;
  int v8;
  int v9;
  __int16 v10;
  int v11;
  int v12;

  v3 = a3;
  v5 = *(int *)(a2 + 4);
  v6 = (_WORD *)(*(_QWORD *)(a2 + 72) + 2 * v5);
  v7 = (_WORD *)(*(_QWORD *)(a2 + 80) + 2 * v5);
  if ((result[64] & 1) != 0)
    goto LABEL_5;
  LOWORD(v8) = result[74];
  if (!(_WORD)v8)
    goto LABEL_6;
  v9 = *(__int16 *)(a2 + 104);
  if (v9 < 1)
LABEL_5:
    LOWORD(v8) = 0;
  else
    v8 = *(unsigned __int16 *)(a2 + 98) - ((unsigned __int16)(v9 & 0xFFFE) >> 1) + *(unsigned __int16 *)(a2 + 106);
LABEL_6:
  *v6 = a3;
  *v7 = v8;
  v6[4] = *(_WORD *)(a2 + 92);
  v7[4] = v8;
  v6[1] = *(_WORD *)(a2 + 100) + a3;
  v7[1] = v8;
  v6[5] = *(_WORD *)(a2 + 96);
  v7[5] = v8;
  v10 = *(_WORD *)(a2 + 106) + *(_WORD *)(a2 + 98);
  if ((result[64] & 0x20) != 0)
  {
    LOWORD(v11) = 0;
  }
  else
  {
    LOWORD(v11) = result[73];
    if ((_WORD)v11)
      v11 = *(unsigned __int16 *)(a2 + 92) - *(unsigned __int16 *)(a2 + 102) + (*(__int16 *)(a2 + 100) >> 1);
  }
  v6[2] = v11;
  v7[2] = v10;
  v6[6] = v11;
  v7[6] = *(_WORD *)(a2 + 98);
  v6[3] = v11;
  v7[3] = v10 - *(_WORD *)(a2 + 104);
  v6[7] = v11;
  v7[7] = *(_WORD *)(a2 + 94);
  if (a3)
  {
    v12 = -a3;
    OffsetOriginalOutline(a2, (__int16)-(__int16)a3, 0);
    result = (_WORD *)OffsetOutline(a2, *(_DWORD **)(a2 + 56), *(_DWORD **)(a2 + 64), v12 << 6, 0);
    *(_WORD *)(a2 + 92) -= v3;
    *(_WORD *)(a2 + 96) -= v3;
  }
  else if ((_WORD)v8)
  {
    if (v10)
    {
      OffsetOriginalOutline(a2, 0, (__int16)-v10);
      result = (_WORD *)OffsetOutline(a2, *(_DWORD **)(a2 + 56), *(_DWORD **)(a2 + 64), 0, -64 * v10);
      *(_WORD *)(a2 + 94) -= v10;
      *(_WORD *)(a2 + 98) -= v10;
    }
  }
  return result;
}

double CreateGlyphOutline(uint64_t *a1, int a2, unsigned int a3)
{
  uint64_t v5;
  uint64_t v6;
  double result;
  _WORD *exception;
  char v9;

  v5 = a1[3];
  v6 = a1[5];
  *(_DWORD *)(v6 + 272) = a2;
  StretchGlyph(a1, v6 + 184, v5 + 96, 0, a3, &v9, 0);
  if (!CheckVitalElements((uint64_t)a1, v6 + 184))
  {
    exception = __cxa_allocate_exception(2uLL);
    *exception = 5;
    __cxa_throw(exception, MEMORY[0x1E0DE4F10], 0);
  }
  if (!a3)
    return ScaleAndMapOutline(v6 + 184, (int *)(v5 + 96), *(__int16 *)(a1[1] + 130), *(unsigned __int8 *)(v5 + 488));
  MapF26Dot6(*(_DWORD *)(v6 + 188), *(int **)(v6 + 192), *(int **)(v6 + 200), (int *)(v5 + 168));
  return result;
}

void TException::~TException(TException *this)
{
  JUMPOUT(0x1B5E0CD38);
}

void THeap::THeap(THeap *this)
{
  *(_QWORD *)this = off_1E6176958;
}

void TDefaultHeap::~TDefaultHeap(TDefaultHeap *this)
{
  JUMPOUT(0x1B5E0CD38);
}

void TDataReference::TDataReference(TDataReference *this, uint64_t a2)
{
  *(_QWORD *)this = &off_1E6176770;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  TDataReference::operator=(this, a2);
}

{
  *(_QWORD *)this = &off_1E6176770;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  TDataReference::operator=(this, a2);
}

void __clang_call_terminate(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

void TNameString::~TNameString(void **this)
{
  TStringRef::~TStringRef(this);
  JUMPOUT(0x1B5E0CD38);
}

void TFontNameString::~TFontNameString(TFontNameString *this)
{
  const void *v2;
  const void *v3;

  *(_QWORD *)this = &off_1E61768B8;
  v2 = (const void *)*((_QWORD *)this + 10);
  if (v2)
    CFRelease(v2);
  v3 = (const void *)*((_QWORD *)this + 11);
  if (v3)
    CFRelease(v3);
  TStringRef::~TStringRef((void **)this);
}

{
  TFontNameString::~TFontNameString(this);
  JUMPOUT(0x1B5E0CD38);
}

void TFontNameString::TFontNameString(TFontNameString *this, __int16 a2, CFStringRef theString, CFLocaleIdentifier a4, CFStringEncoding encoding)
{
  const char *CStringPtr;
  CFIndex Length;
  char *v12;
  unsigned __int16 v13;
  const __CFAllocator *v14;
  CFLocaleIdentifier CanonicalLocaleIdentifierFromScriptManagerCodes;
  unsigned int v16;
  CFTypeRef v17;
  uint64_t v18;
  uint64_t v19;
  const UniChar *CharactersPtr;
  CFIndex v21;
  CFIndex v22;
  UniChar *v23;
  void (**v24)(TNameString *__hidden);
  void *v25;
  uint64_t v26;
  char v27;
  void (**v28)(TDataReference *__hidden);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  CFRange v33;

  CStringPtr = CFStringGetCStringPtr(theString, encoding);
  Length = CFStringGetLength(theString);
  *((_QWORD *)this + 1) = CStringPtr;
  *((_QWORD *)this + 2) = Length;
  *((_BYTE *)this + 24) = 0;
  *((_QWORD *)this + 5) = 0;
  v12 = (char *)this + 40;
  *((_QWORD *)this + 4) = &off_1E6176770;
  *((_BYTE *)this + 64) = 1;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *(_QWORD *)this = &off_1E61768B8;
  *((_WORD *)this + 33) = a2;
  *((_DWORD *)this + 17) = -65536;
  if (a4)
  {
    v13 = 0;
    v14 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    while (1)
    {
      v24 = (void (**)(TNameString *__hidden))0xAAAAAAAAAAAAAAAALL;
      CanonicalLocaleIdentifierFromScriptManagerCodes = CFLocaleCreateCanonicalLocaleIdentifierFromScriptManagerCodes(v14, v13, -128);
      v24 = (void (**)(TNameString *__hidden))CanonicalLocaleIdentifierFromScriptManagerCodes;
      if (CanonicalLocaleIdentifierFromScriptManagerCodes)
      {
        if (CanonicalLocaleIdentifierFromScriptManagerCodes == a4
          || CFEqual(CanonicalLocaleIdentifierFromScriptManagerCodes, a4))
        {
          break;
        }
      }
      TCFString::~TCFString((const void **)&v24);
      v16 = v13++;
      if (v16 >= 0x8B)
        goto LABEL_7;
    }
    TCFString::~TCFString((const void **)&v24);
  }
  else
  {
LABEL_7:
    v13 = -1;
  }
  *((_WORD *)this + 36) = v13;
  *((_QWORD *)this + 10) = CFRetain(theString);
  if (a4)
    v17 = CFRetain(a4);
  else
    v17 = 0;
  *((_QWORD *)this + 11) = v17;
  v18 = *((_QWORD *)this + 1);
  if (v18)
  {
    if (encoding)
      goto LABEL_19;
  }
  else
  {
    if (!*(_QWORD *)v12)
      goto LABEL_19;
    v19 = *(_QWORD *)(*(_QWORD *)v12 + 8);
    if (!v19)
      goto LABEL_19;
    v18 = v19 + *((_QWORD *)this + 6);
    if (encoding)
      goto LABEL_19;
  }
  if (v18)
  {
    *((_DWORD *)this + 17) = 1;
    return;
  }
LABEL_19:
  CharactersPtr = CFStringGetCharactersPtr(theString);
  if (CharactersPtr)
  {
    v21 = CFStringGetLength(theString);
    v25 = (void *)CharactersPtr;
    v26 = 2 * v21;
  }
  else
  {
    v22 = CFStringGetLength(theString);
    v23 = (UniChar *)malloc_type_malloc(2 * v22, 0x1000040BDFB0063uLL);
    v33.location = 0;
    v33.length = v22;
    CFStringGetCharacters(theString, v33, v23);
    v25 = v23;
    v26 = 2 * v22;
  }
  v27 = 1;
  v28 = &off_1E6176770;
  v29 = 0;
  v30 = 0;
  v31 = 0;
  v24 = &off_1E61768D8;
  v32 = 2;
  TStringRef::operator=((uint64_t)this, (uint64_t)&v24);
  *((_BYTE *)this + 64) = v32;
  TStringRef::~TStringRef((void **)&v24);
}

void sub_1B0983BB8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void **v2;
  va_list va;

  va_start(va, a2);
  TStringRef::~TStringRef((void **)va);
  TStringRef::~TStringRef(v2);
  _Unwind_Resume(a1);
}

void MDataReference::~MDataReference(MDataReference *this)
{
  JUMPOUT(0x1B5E0CD38);
}

void MDataReference::MDataReference(MDataReference *this, const MDataReference *a2, int a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  BOOL v8;
  _DWORD *exception;

  v4 = *((_QWORD *)a2 + 2);
  v5 = *((_QWORD *)a2 + 1) + a3;
  *(_QWORD *)this = &off_1E6176898;
  *((_QWORD *)this + 1) = v5;
  *((_QWORD *)this + 2) = v4;
  if (v4)
  {
    v6 = v4 >= a3;
    v8 = v4 == a3;
    v7 = v4 - a3;
    if (v8 || !v6)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)exception = &off_1E6176998;
      exception[2] = 4;
    }
    v8 = v7 <= a4 || a4 == 0;
    if (!v8)
      v7 = a4;
    *((_QWORD *)this + 2) = v7;
  }
}

void MFileReference::~MFileReference(MFileReference *this)
{
  char *v2;

  *(_QWORD *)this = &off_1E6176878;
  v2 = (char *)*((_QWORD *)this + 1);
  if (v2 != (char *)this + 16)
    free(v2);
}

{
  char *v2;

  *(_QWORD *)this = &off_1E6176878;
  v2 = (char *)*((_QWORD *)this + 1);
  if (v2 != (char *)this + 16)
    free(v2);
  JUMPOUT(0x1B5E0CD38);
}

void `non-virtual thunk to'TFragment::~TFragment(TFragment *this)
{
  JUMPOUT(0x1B5E0CD38);
}

void TFileDescriptorContext::~TFileDescriptorContext(TFileDescriptorContext *this)
{
  int v1;

  if (*((_BYTE *)this + 4))
  {
    v1 = *(_DWORD *)this;
    if ((v1 & 0x80000000) == 0)
      close(v1);
  }
}

void TFileFragmentReference::~TFileFragmentReference(TFileFragmentReference *this)
{
  char *v2;

  *(_QWORD *)this = &off_1E61767B0;
  *((_QWORD *)this + 3) = &unk_1E61767E0;
  *((_QWORD *)this + 5) = &off_1E6176878;
  v2 = (char *)*((_QWORD *)this + 6);
  if (v2 != (char *)this + 56)
    free(v2);
}

{
  char *v2;

  *(_QWORD *)this = &off_1E61767B0;
  *((_QWORD *)this + 3) = &unk_1E61767E0;
  *((_QWORD *)this + 5) = &off_1E6176878;
  v2 = (char *)*((_QWORD *)this + 6);
  if (v2 != (char *)this + 56)
    free(v2);
  JUMPOUT(0x1B5E0CD38);
}

void `non-virtual thunk to'TFileFragmentReference::~TFileFragmentReference(TFileFragmentReference *this)
{
  char *v2;

  *((_QWORD *)this - 3) = &off_1E61767B0;
  *(_QWORD *)this = &unk_1E61767E0;
  *((_QWORD *)this + 2) = &off_1E6176878;
  v2 = (char *)*((_QWORD *)this + 3);
  if (v2 != (char *)this + 32)
    free(v2);
}

{
  TFileFragmentReference::~TFileFragmentReference((TFileFragmentReference *)((char *)this - 24));
}

_QWORD *TFileFragmentReference::GetFileData@<X0>(_QWORD *this@<X0>, int a2@<W1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (this[1] && (v4 = a3 + a2, !__CFADD__(a3, a2)) && v4 <= this[2])
  {
    v5 = v4 & 0xFFFFFFFFFFFFFF00;
    v6 = (a3 + a2);
    if (!a3)
      v6 = 0;
    return TDataReference::TDataReference(a4, (uint64_t)this, a2, v6 | v5, a3 != 0);
  }
  else
  {
    *a4 = &off_1E6176770;
    a4[1] = 0;
    a4[2] = 0;
    a4[3] = 0;
  }
  return this;
}

uint64_t TFileFragmentReference::IsFileFragmentRef(TFileFragmentReference *this)
{
  return 1;
}

void TFileFragmentCachable::~TFileFragmentCachable(TFileFragmentCachable *this)
{
  uint64_t v2;

  v2 = *(_QWORD *)this;
  if (v2 && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)(v2 + 24) + 32))(v2 + 24))
  {
    if (*(_QWORD *)this)
      (*(void (**)(_QWORD))(**(_QWORD **)this + 8))(*(_QWORD *)this);
  }
}

void TFileFragmentCache::~TFileFragmentCache(TFileFragmentCache *this)
{
  void **v1;

  v1 = (void **)((char *)this + 8);
  std::vector<TFileFragmentCachable>::__destroy_vector::operator()[abi:fe180100](&v1);
}

{
  void **v1;

  v1 = (void **)((char *)this + 8);
  std::vector<TFileFragmentCachable>::__destroy_vector::operator()[abi:fe180100](&v1);
  JUMPOUT(0x1B5E0CD38);
}

void TFragmentCache::~TFragmentCache(TFragmentCache *this)
{
  *(_QWORD *)this = &off_1E61B2000;
  if (TFragmentCache::GetCache(void)const::once != -1)
    dispatch_once(&TFragmentCache::GetCache(void)const::once, &__block_literal_global);
  os_unfair_lock_unlock((os_unfair_lock_t)TFragmentCache::GetCache(void)const::gFileFragmentCache + 8);
}

{
  TFragmentCache::~TFragmentCache(this);
  JUMPOUT(0x1B5E0CD38);
}

void PurgeFileFragmentCache(const char *a1)
{
  _BYTE v1[8];

  TFragmentCache::TFragmentCache((TFragmentCache *)v1);
  TFragmentCache::RemoveAll((TFragmentCache *)v1);
  TFragmentCache::~TFragmentCache((TFragmentCache *)v1);
}

void TFragmentCache::RemoveAll(TFragmentCache *this)
{
  _QWORD *v1;
  uint64_t i;
  uint64_t v3;

  if (TFragmentCache::GetCache(void)const::once != -1)
    dispatch_once(&TFragmentCache::GetCache(void)const::once, &__block_literal_global);
  v1 = TFragmentCache::GetCache(void)const::gFileFragmentCache;
  v3 = *((_QWORD *)TFragmentCache::GetCache(void)const::gFileFragmentCache + 1);
  for (i = *((_QWORD *)TFragmentCache::GetCache(void)const::gFileFragmentCache + 2);
        i != v3;
  v1[2] = v3;
}

void dFPPrintFileFragmentCache(void)
{
  _BYTE v0[8];

  TFragmentCache::TFragmentCache((TFragmentCache *)v0);
  if (TFragmentCache::GetCache(void)const::once != -1)
    dispatch_once(&TFragmentCache::GetCache(void)const::once, &__block_literal_global);
  TFragmentCache::~TFragmentCache((TFragmentCache *)v0);
}

void TDataReference::DucRefCount(TDataReference *this)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  _BYTE v5[8];

  v2 = *((_QWORD *)this + 1);
  if (v2 && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)(v2 + 24) + 32))(v2 + 24))
  {
    if (!(*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1))
      || (TFragmentCache::TFragmentCache((TFragmentCache *)v5),
          v3 = TFragmentCache::RemoveValue((TFragmentCache *)v5, *((const TFileFragmentReference **)this + 1)),
          TFragmentCache::~TFragmentCache((TFragmentCache *)v5),
          (v3 & 1) == 0))
    {
      v4 = *((_QWORD *)this + 1);
      if (v4)
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    }
    *((_QWORD *)this + 1) = 0;
  }
}

void sub_1B09841BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  TFragmentCache::~TFragmentCache((TFragmentCache *)va);
  _Unwind_Resume(a1);
}

_QWORD *TDataReference::TDataReference(_QWORD *a1, uint64_t a2, int a3, unint64_t a4, char a5)
{
  unint64_t v5;
  _DWORD *exception;

  *a1 = &off_1E6176770;
  a1[1] = a2;
  a1[2] = a3;
  v5 = *(_QWORD *)(a2 + 16);
  if (a5)
    v5 = a4;
  a1[3] = v5;
  if (v5 < a3)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E6176998;
    exception[2] = 2;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)(a2 + 24) + 24))(a2 + 24);
  return a1;
}

uint64_t TDataReference::AddRefCount(TDataReference *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 1);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(result + 24) + 24))(result + 24);
  return result;
}

__n128 TDataReference::TDataReference(__n128 *a1, __n128 *a2)
{
  unint64_t v2;
  __n128 result;

  v2 = a2->n128_u64[1];
  a2->n128_u64[1] = 0;
  a1->n128_u64[0] = (unint64_t)&off_1E6176770;
  a1->n128_u64[1] = v2;
  result = a2[1];
  a1[1] = result;
  return result;
}

{
  unint64_t v2;
  __n128 result;

  v2 = a2->n128_u64[1];
  a2->n128_u64[1] = 0;
  a1->n128_u64[0] = (unint64_t)&off_1E6176770;
  a1->n128_u64[1] = v2;
  result = a2[1];
  a1[1] = result;
  return result;
}

_QWORD *TDataReference::TDataReference(_QWORD *a1, _QWORD *a2, int a3, uint64_t a4, char a5)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _DWORD *exception;

  v6 = a2[1];
  v7 = a2[2];
  *a1 = &off_1E6176770;
  a1[1] = v6;
  v8 = v7 + a3;
  a1[2] = v8;
  v9 = a2[2] + a4;
  if (!a5)
    v9 = a2[3];
  a1[3] = v9;
  if (v6)
  {
    if (v8 > v9)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)exception = &off_1E6176998;
      exception[2] = 4;
    }
    (*(void (**)(uint64_t))(*(_QWORD *)(v6 + 24) + 24))(v6 + 24);
  }
  return a1;
}

_QWORD *TDataReference::SubdataFrom@<X0>(_QWORD *this@<X0>, int a2@<W1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  char v7;

  v4 = this[2];
  v5 = __CFADD__(v4, a2);
  v6 = v4 + a2;
  v7 = v5;
  if (this[1] && (v7 & 1) == 0 && (unint64_t)(v6 + a3) <= this[3])
    return TDataReference::TDataReference(a4, this, a2, a2 + a3, 1);
  *a4 = &off_1E6176770;
  a4[1] = 0;
  a4[2] = 0;
  a4[3] = 0;
  return this;
}

uint64_t TFragmentCache::RemoveValue(TFragmentCache *this, const TFileFragmentReference *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (TFragmentCache::GetCache(void)const::once != -1)
    dispatch_once(&TFragmentCache::GetCache(void)const::once, &__block_literal_global);
  v3 = *((_QWORD *)TFragmentCache::GetCache(void)const::gFileFragmentCache + 1);
  v4 = *((_QWORD *)TFragmentCache::GetCache(void)const::gFileFragmentCache + 2);
  if (v3 == v4)
    return 0;
  v5 = 0;
  while (*(const TFileFragmentReference **)(v3 + v5) != a2)
  {
    v5 += 24;
    if (v3 + v5 == v4)
      return 0;
  }
  if (v5 < -23)
    return 0;
  TFileFragmentCache::RemoveIndex((TFileFragmentCache *)TFragmentCache::GetCache(void)const::gFileFragmentCache, 0xAAAAAAAAAAAAAAABLL * (v5 >> 3));
  return 1;
}

void TDataReference::Reset(TDataReference *this)
{
  TDataReference::DucRefCount(this);
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
}

BOOL TDataReference::operator==(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = a1[2];
  v3 = a2[2];
  if (a1[3] - v2 != a2[3] - v3)
    return 0;
  v4 = a1[1];
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 8);
    v6 = v5 + v2;
    if (!v5)
      v6 = 0;
  }
  else
  {
    v6 = 0;
  }
  v8 = a2[1];
  if (v8)
  {
    v9 = *(_QWORD *)(v8 + 8);
    v10 = v9 + v3;
    if (!v9)
      v10 = 0;
  }
  else
  {
    v10 = 0;
  }
  return v6 == v10;
}

BOOL TFileDataReference::Map(TFileDataReference *this, const char *a2)
{
  size_t v3;
  void *v4;
  _BOOL8 v5;
  void *v6;
  int v8[2];
  size_t v9;

  *(_QWORD *)v8 = 0xAAAAAAAAAAAAAAAALL;
  v9 = 0xAAAAAAAAAAAAAAAALL;
  TFileDescriptorContext::TFileDescriptorContext((TFileDescriptorContext *)v8, a2);
  v3 = v9;
  *((_QWORD *)this + 2) = v9;
  v4 = mmap(0, v3, 1, 16386, v8[0], 0);
  v5 = v4 != (void *)-1;
  if (v4 == (void *)-1)
    v6 = 0;
  else
    v6 = v4;
  *((_QWORD *)this + 1) = v6;
  TFileDescriptorContext::~TFileDescriptorContext((TFileDescriptorContext *)v8);
  return v5;
}

void sub_1B09845C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  TFileDescriptorContext::~TFileDescriptorContext((TFileDescriptorContext *)&a9);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'TFileDataReference::~TFileDataReference(TFileDataReference *this)
{
  TFileDataReference::~TFileDataReference((TFileDataReference *)((char *)this - 24));
}

{
  TFileDataReference::~TFileDataReference((TFileDataReference *)((char *)this - 24));
  JUMPOUT(0x1B5E0CD38);
}

void TFileDataSurrogate::TFileDataSurrogate(TFileDataSurrogate *this, const char *a2, timespec a3)
{
  uint64_t tv_nsec;
  __darwin_time_t tv_sec;
  uint64_t *Value;
  uint64_t *v8;
  TFileDataReference *v9;
  TFileFragmentReference *v10;
  unint64_t v11;
  timespec v12;
  timespec v13;

  tv_nsec = a3.tv_nsec;
  tv_sec = a3.tv_sec;
  *(_QWORD *)this = &off_1E61766C0;
  v11 = 0xAAAAAAAAAAAAAAAALL;
  TFragmentCache::TFragmentCache((TFragmentCache *)&v11);
  v12.tv_sec = tv_sec;
  v12.tv_nsec = tv_nsec;
  Value = TFragmentCache::FindValue((TFragmentCache *)&v11, a2, v12, 0);
  v8 = Value;
  if (Value)
  {
    (*(void (**)(uint64_t *))(Value[3] + 24))(Value + 3);
  }
  else
  {
    v9 = (TFileDataReference *)operator new(0x78uLL, MEMORY[0x1E0DE4E10]);
    if (v9)
    {
      v10 = v9;
      TFileDataReference::TFileDataReference(v9, a2);
      v13.tv_sec = tv_sec;
      v13.tv_nsec = tv_nsec;
      v8 = TFragmentCache::AddValue((TFragmentCache *)&v11, v10, v13);
      if (v8)
        (*(void (**)(TFileFragmentReference *))(*(_QWORD *)v10 + 8))(v10);
      else
        v8 = (uint64_t *)v10;
      (*(void (**)(uint64_t *))(v8[3] + 24))(v8 + 3);
    }
    else
    {
      v8 = 0;
    }
  }
  TFragmentCache::~TFragmentCache((TFragmentCache *)&v11);
  *((_QWORD *)this + 1) = v8;
}

void sub_1B0984738(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  TFragmentCache::~TFragmentCache((TFragmentCache *)va);
  _Unwind_Resume(a1);
}

void TFileDataSurrogate::TFileDataSurrogate(TFileDataSurrogate *this, const TFileFragmentReference *a2)
{
  *(_QWORD *)this = &off_1E61766C0;
  *((_QWORD *)this + 1) = a2;
  (*(void (**)(char *))(*((_QWORD *)a2 + 3) + 24))((char *)a2 + 24);
}

{
  *(_QWORD *)this = &off_1E61766C0;
  *((_QWORD *)this + 1) = a2;
}

{
  *(_QWORD *)this = &off_1E61766C0;
  *((_QWORD *)this + 1) = a2;
}

void TFileDataSurrogate::TFileDataSurrogate(TFileDataSurrogate *this)
{
  *(_QWORD *)this = &off_1E61766C0;
}

{
  *(_QWORD *)this = &off_1E61766C0;
}

uint64_t TFileDataSurrogate::operator=(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE v8[8];

  if (a1 != a2)
  {
    if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24) + 32))(*(_QWORD *)(a1 + 8) + 24))
    {
      TFragmentCache::TFragmentCache((TFragmentCache *)v8);
      v4 = TFragmentCache::RemoveValue((TFragmentCache *)v8, *(const TFileFragmentReference **)(a1 + 8));
      TFragmentCache::~TFragmentCache((TFragmentCache *)v8);
      if ((v4 & 1) == 0)
      {
        v5 = *(_QWORD *)(a1 + 8);
        if (v5)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      }
    }
    v6 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 8) = v6;
    (*(void (**)(uint64_t))(*(_QWORD *)(v6 + 24) + 24))(v6 + 24);
  }
  return a1;
}

void sub_1B09848A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  TFragmentCache::~TFragmentCache((TFragmentCache *)va);
  _Unwind_Resume(a1);
}

_QWORD *TFileDataSurrogate::GetDataReference@<X0>(TFileDataSurrogate *this@<X0>, int a2@<W1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  return TFileFragmentReference::GetFileData(*((_QWORD **)this + 1), a2, a3, a4);
}

uint64_t TInMemoryDataReference::TInMemoryDataReference(uint64_t a1, const __CFData **a2, int a3)
{
  uint64_t v6;
  const __CFData *Length;
  const UInt8 *BytePtr;
  unsigned int *v9;
  unsigned int v10;

  *(_QWORD *)a1 = &off_1E6176678;
  v6 = operator new();
  Length = *a2;
  if (*a2)
  {
    BytePtr = CFDataGetBytePtr(Length);
    Length = *a2;
    if (*a2)
      Length = (const __CFData *)CFDataGetLength(Length);
  }
  else
  {
    BytePtr = 0;
  }
  *(_DWORD *)(v6 + 32) = 0;
  v9 = (unsigned int *)(v6 + 32);
  *(_QWORD *)v6 = &off_1E6176818;
  *(_QWORD *)(v6 + 8) = BytePtr;
  *(_QWORD *)(v6 + 16) = Length;
  *(_QWORD *)(v6 + 24) = &unk_1E6176840;
  *(_DWORD *)(v6 + 36) = 0;
  *(_QWORD *)(a1 + 8) = v6;
  *(_DWORD *)(a1 + 16) = a3;
  do
    v10 = __ldxr(v9);
  while (__stxr(v10 + 1, v9));
  return a1;
}

void sub_1B0984980(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E0CD38](v1, 0x10C1C408451B1F9);
  _Unwind_Resume(a1);
}

void TInMemoryDataReference::~TInMemoryDataReference(TInMemoryDataReference *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1E6176678;
  v2 = *((_QWORD *)this + 1);
  if (v2 && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)(v2 + 24) + 32))(v2 + 24))
  {
    v3 = *((_QWORD *)this + 1);
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
}

{
  TInMemoryDataReference::~TInMemoryDataReference(this);
  JUMPOUT(0x1B5E0CD38);
}

_QWORD *TInMemoryDataReference::GetDataReference@<X0>(_QWORD *this@<X0>, int a2@<W1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  int v6;
  BOOL v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;

  v5 = this[1];
  v6 = a3 + a2;
  if (*(_QWORD *)(v5 + 8))
    v7 = v6 < (int)a3;
  else
    v7 = 1;
  v8 = v7 || v6 < a2;
  if (v8 || v6 > *(_DWORD *)(v5 + 16))
  {
    *a4 = &off_1E6176770;
    a4[1] = 0;
    a4[2] = 0;
    a4[3] = 0;
  }
  else
  {
    v9 = (a3 + a2);
    v10 = (int)(v6 & 0xFFFFFF00);
    if (!a3)
      v9 = 0;
    return TDataReference::TDataReference(a4, v5, a2, v9 | v10, a3 != 0);
  }
  return this;
}

uint64_t TInMemoryDataReference::GetFileSize(TInMemoryDataReference *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 1) + 16);
}

uint64_t TInMemoryDataReference::GetDataSize(TInMemoryDataReference *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 1) + 16);
}

void TDataForkFileDataReference::~TDataForkFileDataReference(const TFileFragmentReference **this)
{
  TFileDataSurrogate::~TFileDataSurrogate(this);
  JUMPOUT(0x1B5E0CD38);
}

void `non-virtual thunk to'TResourceForkFileReference::~TResourceForkFileReference(TResourceForkFileReference *this)
{
  TResourceForkFileReference::~TResourceForkFileReference((TResourceForkFileReference *)((char *)this - 24));
}

{
  TResourceForkFileReference::~TResourceForkFileReference((TResourceForkFileReference *)((char *)this - 24));
  JUMPOUT(0x1B5E0CD38);
}

uint64_t TResourceForkFileReference::IsResourceFile(TResourceForkFileReference *this)
{
  return 1;
}

uint64_t TResourceForkFileReference::GetMappedResourceFork(TResourceForkFileReference *this, unint64_t *a2)
{
  uint64_t result;

  result = *((_QWORD *)this + 1);
  if (result)
    *a2 = *((_QWORD *)this + 2);
  return result;
}

void TResourceForkSurrogate::TResourceForkSurrogate(TResourceForkSurrogate *this, const char *a2, timespec a3, char a4)
{
  uint64_t tv_nsec;
  __darwin_time_t tv_sec;
  uint64_t *Value;
  uint64_t *v10;
  TResourceForkFileReference *v11;
  TFileFragmentReference *v12;
  unint64_t v13;
  timespec v14;
  timespec v15;

  tv_nsec = a3.tv_nsec;
  tv_sec = a3.tv_sec;
  v13 = 0xAAAAAAAAAAAAAAAALL;
  TFragmentCache::TFragmentCache((TFragmentCache *)&v13);
  v14.tv_sec = tv_sec;
  v14.tv_nsec = tv_nsec;
  Value = TFragmentCache::FindValue((TFragmentCache *)&v13, a2, v14, 1);
  v10 = Value;
  if (Value)
  {
    (*(void (**)(uint64_t *))(Value[3] + 24))(Value + 3);
  }
  else
  {
    v11 = (TResourceForkFileReference *)operator new(0x80uLL, MEMORY[0x1E0DE4E10]);
    if (v11)
    {
      v12 = v11;
      TResourceForkFileReference::TResourceForkFileReference(v11, a2, a4);
      v15.tv_sec = tv_sec;
      v15.tv_nsec = tv_nsec;
      v10 = TFragmentCache::AddValue((TFragmentCache *)&v13, v12, v15);
      if (v10)
        (*(void (**)(TFileFragmentReference *))(*(_QWORD *)v12 + 8))(v12);
      else
        v10 = (uint64_t *)v12;
      (*(void (**)(uint64_t *))(v10[3] + 24))(v10 + 3);
    }
    else
    {
      v10 = 0;
    }
  }
  TFragmentCache::~TFragmentCache((TFragmentCache *)&v13);
  *(_QWORD *)this = &off_1E6176580;
  *((_QWORD *)this + 1) = v10;
}

void sub_1B0984C88(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  TFragmentCache::~TFragmentCache((TFragmentCache *)va);
  _Unwind_Resume(a1);
}

void TResourceForkSurrogate::TResourceForkSurrogate(TResourceForkSurrogate *this, const TResourceForkFileReference *a2)
{
  *(_QWORD *)this = &off_1E61766C0;
  *((_QWORD *)this + 1) = a2;
  (*(void (**)(char *))(*((_QWORD *)a2 + 3) + 24))((char *)a2 + 24);
  *(_QWORD *)this = &off_1E6176580;
}

{
  *(_QWORD *)this = &off_1E61766C0;
  *((_QWORD *)this + 1) = a2;
  (*(void (**)(char *))(*((_QWORD *)a2 + 3) + 24))((char *)a2 + 24);
  *(_QWORD *)this = &off_1E6176580;
}

void TResourceForkSurrogate::~TResourceForkSurrogate(const TFileFragmentReference **this)
{
  TFileDataSurrogate::~TFileDataSurrogate(this);
  JUMPOUT(0x1B5E0CD38);
}

void `non-virtual thunk to'TResourceFileDataReference::~TResourceFileDataReference(TResourceFileDataReference *this)
{
  *((_QWORD *)this - 3) = &off_1E6176518;
  *(_QWORD *)this = &unk_1E6176548;
  TFileDataSurrogate::~TFileDataSurrogate((const TFileFragmentReference **)this + 2);
}

{
  *((_QWORD *)this - 3) = &off_1E6176518;
  *(_QWORD *)this = &unk_1E6176548;
  TFileDataSurrogate::~TFileDataSurrogate((const TFileFragmentReference **)this + 2);
  JUMPOUT(0x1B5E0CD38);
}

_QWORD *TResourceFileDataReference::GetDataReference@<X0>(_QWORD *this@<X0>, int a2@<W1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (this[1] && (v4 = a3 + a2, !__CFADD__(a3, a2)) && v4 <= this[2])
  {
    v5 = v4 & 0xFFFFFFFFFFFFFF00;
    v6 = (a3 + a2);
    if (!a3)
      v6 = 0;
    return TDataReference::TDataReference(a4, (uint64_t)this, a2, v6 | v5, a3 != 0);
  }
  else
  {
    *a4 = &off_1E6176770;
    a4[1] = 0;
    a4[2] = 0;
    a4[3] = 0;
  }
  return this;
}

void TResourceFileDataSurrogate::TResourceFileDataSurrogate(TResourceFileDataSurrogate *this, const TResourceForkSurrogate *a2, int a3, unsigned __int8 *a4)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int *NamedResource;
  char v11;
  __int16 v12;

  *(_QWORD *)this = &off_1E61764D0;
  v8 = operator new();
  *(_QWORD *)(v8 + 8) = 0;
  *(_QWORD *)(v8 + 16) = 0;
  *(_QWORD *)(v8 + 24) = &unk_1E6176548;
  *(_QWORD *)(v8 + 32) = 0;
  *(_QWORD *)v8 = &off_1E6176518;
  v9 = *((_QWORD *)a2 + 1);
  *(_QWORD *)(v8 + 40) = &off_1E61766C0;
  *(_QWORD *)(v8 + 48) = v9;
  (*(void (**)(uint64_t))(*(_QWORD *)(v9 + 24) + 24))(v9 + 24);
  *(_QWORD *)(v8 + 40) = &off_1E6176580;
  *(_DWORD *)(v8 + 56) = 0;
  v12 = -21846;
  NamedResource = TResourceForkFileReference::GetNamedResource(*(unsigned int ***)(v8 + 48), a3, a4, &v12, (unint64_t *)(v8 + 16));
  *(_QWORD *)(v8 + 8) = NamedResource;
  if (NamedResource)
  {
    *(_DWORD *)(v8 + 56) = v12;
    v11 = *a4 + 1;
    memcpy((void *)(v8 + 60), a4, *a4 + 1);
    *(_BYTE *)(v8 + 60) = v11;
  }
  *((_QWORD *)this + 1) = v8;
  (*(void (**)(uint64_t))(*(_QWORD *)(v8 + 24) + 24))(v8 + 24);
}

void sub_1B0984F84(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E0CD38](v1, 0x10E1C4062A34129);
  _Unwind_Resume(a1);
}

uint64_t TResourceFileDataSurrogate::GetDataReference(TResourceFileDataSurrogate *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 24))(*((_QWORD *)this + 1));
}

uint64_t TFileFragmentReference::IsResourceFile(TFileFragmentReference *this)
{
  return 0;
}

uint64_t TInMemoryDataReference::GetPath(TInMemoryDataReference *this)
{
  return 0;
}

uint64_t TInMemoryDataReference::GetSFNTDirectoryOffset(TInMemoryDataReference *this)
{
  return *((unsigned int *)this + 4);
}

void TCFString::~TCFString(const void **this)
{
  const void *v1;

  v1 = *this;
  if (v1)
    CFRelease(v1);
}

uint64_t getFSFontFileDescriptorForPathSymbolLoc(void)
{
  uint64_t v0;
  _QWORD v2[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2000000000;
  v0 = qword_1ECDE6AD0;
  v6 = qword_1ECDE6AD0;
  if (!qword_1ECDE6AD0)
  {
    v2[0] = MEMORY[0x1E0C809B0];
    v2[1] = 0x40000000;
    v2[2] = ___ZL39getFSFontFileDescriptorForPathSymbolLocv_block_invoke;
    v2[3] = &unk_1E61B2050;
    v2[4] = &v3;
    ___ZL39getFSFontFileDescriptorForPathSymbolLocv_block_invoke((uint64_t)v2);
    v0 = v4[3];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1B09850C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void std::vector<TFileFragmentCachable>::__destroy_vector::operator()[abi:fe180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = v2;
    if (v4 != v2)
    {
      do
        TFileFragmentCachable::~TFileFragmentCachable((TFileFragmentCachable *)(v4 - 24));
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t ___ZNK14TFragmentCache8GetCacheEv_block_invoke()
{
  uint64_t result;

  result = operator new();
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)result = &off_1E6176790;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 32) = 0;
  TFragmentCache::GetCache(void)const::gFileFragmentCache = (_UNKNOWN *)result;
  return result;
}

void TFragmentCache::TFragmentCache(TFragmentCache *this)
{
  *(_QWORD *)this = &off_1E61B2000;
  if (TFragmentCache::GetCache(void)const::once != -1)
    dispatch_once(&TFragmentCache::GetCache(void)const::once, &__block_literal_global);
  os_unfair_lock_lock((os_unfair_lock_t)TFragmentCache::GetCache(void)const::gFileFragmentCache + 8);
}

void TFileFragmentCache::RemoveIndex(TFileFragmentCache *this, uint64_t a2)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if ((a2 & 0x8000000000000000) == 0)
  {
    v4 = (uint64_t *)*((_QWORD *)this + 2);
    v5 = (uint64_t *)(*((_QWORD *)this + 1) + 24 * a2);
    if (v4 == v5)
    {
      __break(1u);
    }
    else
    {
      std::__unwrap_and_dispatch[abi:fe180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,TFileFragmentCachable *,TFileFragmentCachable *,TFileFragmentCachable *,0>(v5 + 3, v4, v5);
      v7 = v6;
      v8 = *((_QWORD *)this + 2);
      if (v8 != v6)
      {
        do
          TFileFragmentCachable::~TFileFragmentCachable((TFileFragmentCachable *)(v8 - 24));
        while (v8 != v7);
      }
      *((_QWORD *)this + 2) = v7;
    }
  }
}

uint64_t *std::__unwrap_and_dispatch[abi:fe180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,TFileFragmentCachable *,TFileFragmentCachable *,TFileFragmentCachable *,0>(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  __int128 v4;

  if (result != a2)
  {
    do
    {
      if (result != a3)
      {
        v3 = *a3;
        *a3 = *result;
        *result = v3;
        v4 = *(_OWORD *)(a3 + 1);
        *(_OWORD *)(a3 + 1) = *(_OWORD *)(result + 1);
        *(_OWORD *)(result + 1) = v4;
      }
      result += 3;
      a3 += 3;
    }
    while (result != a2);
    return a2;
  }
  return result;
}

void std::vector<char,TInlineBufferAllocator<char,1024ul>>::__destroy_vector::operator()[abi:fe180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v3;
  BOOL v4;
  BOOL v5;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v1[1] = v2;
    v3 = v1 + 131;
    if (v1 + 3 <= v2)
    {
      v4 = v3 >= v2;
      v5 = v3 == v2;
    }
    else
    {
      v4 = 0;
      v5 = 0;
    }
    if (!v5 && v4)
    {
      if (v1[2] == v1[131])
        *v3 = v2;
    }
    else
    {
      operator delete(v2);
    }
  }
}

uint64_t *TFragmentCache::FindValue(TFragmentCache *this, const char *a2, timespec a3, int a4)
{
  uint64_t tv_nsec;
  __darwin_time_t tv_sec;
  uint64_t *v9;
  uint64_t *v10;
  timespec v12;
  timespec v13;

  tv_nsec = a3.tv_nsec;
  tv_sec = a3.tv_sec;
  if (TFragmentCache::GetCache(void)const::once != -1)
    dispatch_once(&TFragmentCache::GetCache(void)const::once, &__block_literal_global);
  v12.tv_sec = tv_sec;
  v12.tv_nsec = tv_nsec;
  v9 = TFileFragmentCache::FindByKey((TFileFragmentCache *)TFragmentCache::GetCache(void)const::gFileFragmentCache, a2, v12);
  v10 = v9;
  if (v9 && (*(unsigned int (**)(uint64_t *))(*v9 + 24))(v9) != a4)
  {
    v13.tv_sec = tv_sec;
    v13.tv_nsec = tv_nsec;
    TFragmentCache::RemoveByKey(this, a2, v13);
    return 0;
  }
  return v10;
}

uint64_t *TFragmentCache::AddValue(TFragmentCache *this, TFileFragmentReference *a2, timespec a3)
{
  uint64_t tv_nsec;
  __darwin_time_t tv_sec;
  const char *v6;
  uint64_t *v7;
  timespec v9;
  timespec v10;

  tv_nsec = a3.tv_nsec;
  tv_sec = a3.tv_sec;
  v6 = (const char *)*((_QWORD *)a2 + 6);
  if (TFragmentCache::GetCache(void)const::once != -1)
    dispatch_once(&TFragmentCache::GetCache(void)const::once, &__block_literal_global);
  v9.tv_sec = tv_sec;
  v9.tv_nsec = tv_nsec;
  v7 = TFileFragmentCache::FindByKey((TFileFragmentCache *)TFragmentCache::GetCache(void)const::gFileFragmentCache, v6, v9);
  if (!v7)
  {
    if (TFragmentCache::GetCache(void)const::once != -1)
      dispatch_once(&TFragmentCache::GetCache(void)const::once, &__block_literal_global);
    v10.tv_sec = tv_sec;
    v10.tv_nsec = tv_nsec;
    TFileFragmentCache::AddValue((TFileFragmentCache *)TFragmentCache::GetCache(void)const::gFileFragmentCache, a2, v10);
  }
  return v7;
}

uint64_t *TFileFragmentCache::FindByKey(TFileFragmentCache *this, const char *a2, timespec a3)
{
  uint64_t tv_nsec;
  __darwin_time_t tv_sec;
  uint64_t *v7;
  TFileFragmentCachable *v8;
  uint64_t *result;
  uint64_t *v10;
  char *v11;
  timespec v12;

  tv_nsec = a3.tv_nsec;
  tv_sec = a3.tv_sec;
  v7 = (uint64_t *)*((_QWORD *)this + 2);
  v8 = (TFileFragmentCachable *)v7;
  do
  {
    if (v8 == *((TFileFragmentCachable **)this + 1))
      return 0;
    v8 = (TFileFragmentCachable *)((char *)v8 - 24);
    v12.tv_sec = tv_sec;
    v12.tv_nsec = tv_nsec;
    result = (uint64_t *)TFileFragmentCachable::Compare(v8, a2, v12);
    v7 -= 3;
  }
  while (!(_DWORD)result);
  v10 = (uint64_t *)*((_QWORD *)this + 2);
  v11 = (char *)v8 + 24;
  if ((uint64_t *)((char *)v8 + 24) != v10)
  {
    result = std::__rotate_forward[abi:fe180100]<std::_ClassicAlgPolicy,std::__wrap_iter<TFileFragmentCachable *>>(v7, v7 + 3, v10);
    v11 = (char *)*((_QWORD *)this + 2);
  }
  if (*((char **)this + 1) != v11)
    return (uint64_t *)*((_QWORD *)v11 - 3);
  __break(1u);
  return result;
}

void TFragmentCache::RemoveByKey(TFragmentCache *this, const char *a2, timespec a3)
{
  uint64_t tv_nsec;
  __darwin_time_t tv_sec;
  TFileFragmentCache *v6;
  _QWORD *v7;
  TFileFragmentCachable *v8;
  uint64_t v9;
  uint64_t v10;
  timespec v11;

  tv_nsec = a3.tv_nsec;
  tv_sec = a3.tv_sec;
  if (TFragmentCache::GetCache(void)const::once != -1)
    dispatch_once(&TFragmentCache::GetCache(void)const::once, &__block_literal_global);
  v6 = (TFileFragmentCache *)TFragmentCache::GetCache(void)const::gFileFragmentCache;
  v7 = TFragmentCache::GetCache(void)const::gFileFragmentCache;
  v8 = (TFileFragmentCachable *)*((_QWORD *)TFragmentCache::GetCache(void)const::gFileFragmentCache + 2);
  v9 = -(uint64_t)v8;
  while (v8 != (TFileFragmentCachable *)v7[1])
  {
    v8 = (TFileFragmentCachable *)((char *)v8 - 24);
    v11.tv_sec = tv_sec;
    v11.tv_nsec = tv_nsec;
    v9 += 24;
    if (TFileFragmentCachable::Compare(v8, a2, v11))
    {
      v10 = 0xAAAAAAAAAAAAAAABLL * (-(v7[1] + v9) >> 3);
      goto LABEL_8;
    }
  }
  v10 = -1;
LABEL_8:
  TFileFragmentCache::RemoveIndex(v6, v10);
}

BOOL TFileFragmentCachable::Compare(TFileFragmentCachable *this, const char *a2, timespec a3)
{
  return *((_QWORD *)this + 1) == a3.tv_sec
      && *((_QWORD *)this + 2) == a3.tv_nsec
      && strcmp(*(const char **)(*(_QWORD *)this + 48), a2) == 0;
}

uint64_t *std::__rotate_forward[abi:fe180100]<std::_ClassicAlgPolicy,std::__wrap_iter<TFileFragmentCachable *>>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t *v6;
  uint64_t *i;
  uint64_t *v8;
  uint64_t *v9;

  v4 = a2;
  std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:fe180100]<std::__wrap_iter<TFileFragmentCachable *> &,std::__wrap_iter<TFileFragmentCachable *> &>(a1, a2);
  v6 = a1 + 3;
  for (i = v4 + 3; i != a3; i += 3)
  {
    if (v6 == v4)
      v4 = i;
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:fe180100]<std::__wrap_iter<TFileFragmentCachable *> &,std::__wrap_iter<TFileFragmentCachable *> &>(v6, i);
    v6 += 3;
  }
  if (v6 != v4)
  {
    v8 = v6;
    v9 = v4;
    do
    {
      while (1)
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:fe180100]<std::__wrap_iter<TFileFragmentCachable *> &,std::__wrap_iter<TFileFragmentCachable *> &>(v8, v4);
        v8 += 3;
        v4 += 3;
        if (v4 == a3)
          break;
        if (v8 == v9)
          v9 = v4;
      }
      v4 = v9;
    }
    while (v8 != v9);
  }
  return v6;
}

void std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:fe180100]<std::__wrap_iter<TFileFragmentCachable *> &,std::__wrap_iter<TFileFragmentCachable *> &>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  __int128 v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;

  v2 = *a1;
  *a1 = 0;
  v6 = v2;
  v7 = *(_OWORD *)(a1 + 1);
  if (a1 != a2)
  {
    *a1 = *a2;
    *a2 = 0;
    v3 = *(_OWORD *)(a1 + 1);
    *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
    *(_OWORD *)(a2 + 1) = v3;
  }
  if (&v6 != a2)
  {
    v4 = *a2;
    *a2 = v2;
    v6 = v4;
    v5 = *(_OWORD *)(a2 + 1);
    *(_OWORD *)(a2 + 1) = v7;
    v7 = v5;
  }
  TFileFragmentCachable::~TFileFragmentCachable((TFileFragmentCachable *)&v6);
}

uint64_t *TFileFragmentCache::AddValue(TFileFragmentCache *this, TFileFragmentReference *a2, timespec a3)
{
  uint64_t tv_nsec;
  __darwin_time_t tv_sec;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t *result;
  unint64_t v12;
  uint64_t v13;
  TFileFragmentReference *v14;
  __int128 v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  TFileFragmentReference *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  TFileFragmentReference *v34;
  _BYTE v35[24];
  char *v36;

  tv_nsec = a3.tv_nsec;
  tv_sec = a3.tv_sec;
  v7 = *((_QWORD *)this + 1);
  v8 = *((_QWORD *)this + 2);
  v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - v7) >> 3);
  if (v9 <= 0x27)
  {
    v10 = *((_QWORD *)this + 3);
    if (v8 < v10)
    {
      *(_QWORD *)v8 = a2;
      *(timespec *)(v8 + 8) = a3;
      result = (uint64_t *)(*(uint64_t (**)(char *))(*((_QWORD *)a2 + 3) + 24))((char *)a2 + 24);
      v12 = v8 + 24;
      *((_QWORD *)this + 2) = v8 + 24;
LABEL_19:
      *((_QWORD *)this + 2) = v12;
      return result;
    }
    v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - v7) >> 3);
    v18 = 2 * v17;
    if (2 * v17 <= v9 + 1)
      v18 = v9 + 1;
    if (v17 >= 0x555555555555555)
      v19 = 0xAAAAAAAAAAAAAAALL;
    else
      v19 = v18;
    v36 = (char *)this + 24;
    if (v19 <= 0xAAAAAAAAAAAAAAALL)
    {
      v20 = 3 * v19;
      v21 = (TFileFragmentReference *)operator new(24 * v19);
      v22 = (_QWORD *)((char *)v21 + 24 * v9);
      v34 = v21;
      *(_QWORD *)v35 = v22;
      *(_QWORD *)&v35[8] = v22;
      *(_QWORD *)&v35[16] = (char *)v21 + 8 * v20;
      *v22 = a2;
      v22[1] = tv_sec;
      v22[2] = tv_nsec;
      (*(void (**)(char *))(*((_QWORD *)a2 + 3) + 24))((char *)a2 + 24);
      v23 = 0;
      v24 = *(_QWORD *)v35;
      *(_QWORD *)&v35[8] += 24;
      v26 = *((_QWORD *)this + 1);
      v25 = *((_QWORD *)this + 2);
      while (1)
      {
        v27 = v25 + v23;
        if (v25 + v23 == v26)
          break;
        v28 = v24 + v23;
        v29 = *(_QWORD *)(v27 - 24);
        *(_QWORD *)(v28 - 24) = v29;
        *(_OWORD *)(v28 - 16) = *(_OWORD *)(v27 - 16);
        v23 -= 24;
        (*(void (**)(uint64_t))(*(_QWORD *)(v29 + 24) + 24))(v29 + 24);
      }
      v30 = *((_QWORD *)this + 3);
      v31 = *(_OWORD *)&v35[8];
      v33 = *(_QWORD *)&v35[8];
      v32 = *(_OWORD *)((char *)this + 8);
      *((_QWORD *)this + 1) = v24 + v23;
      *(_OWORD *)v35 = v32;
      *((_OWORD *)this + 1) = v31;
      *(_QWORD *)&v35[16] = v30;
      v34 = (TFileFragmentReference *)v32;
      result = (uint64_t *)std::__split_buffer<TFileFragmentCachable>::~__split_buffer((uint64_t)&v34);
      v12 = v33;
      goto LABEL_19;
    }
LABEL_22:
    std::__throw_bad_array_new_length[abi:fe180100]();
  }
  v34 = a2;
  *(timespec *)v35 = a3;
  (*(void (**)(char *))(*((_QWORD *)a2 + 3) + 24))((char *)a2 + 24);
  v13 = *((_QWORD *)this + 1);
  if (v13 == *((_QWORD *)this + 2))
  {
    __break(1u);
    goto LABEL_22;
  }
  if ((TFileFragmentReference **)v13 != &v34)
  {
    v14 = *(TFileFragmentReference **)v13;
    *(_QWORD *)v13 = a2;
    v34 = v14;
    v15 = *(_OWORD *)(v13 + 8);
    *(_OWORD *)(v13 + 8) = *(_OWORD *)v35;
    *(_OWORD *)v35 = v15;
  }
  TFileFragmentCachable::~TFileFragmentCachable((TFileFragmentCachable *)&v34);
  result = (uint64_t *)*((_QWORD *)this + 1);
  v16 = (uint64_t *)*((_QWORD *)this + 2);
  if (result + 3 != v16)
    return std::__rotate_forward[abi:fe180100]<std::_ClassicAlgPolicy,std::__wrap_iter<TFileFragmentCachable *>>(result, result + 3, v16);
  return result;
}

void sub_1B0985A50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::__split_buffer<TFileFragmentCachable>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__throw_length_error[abi:fe180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:fe180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E6175D10, MEMORY[0x1E0DE42D0]);
}

void sub_1B0985AD0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:fe180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5020] + 16);
  return result;
}

void std::__throw_bad_array_new_length[abi:fe180100]()
{
  std::bad_array_new_length *exception;
  std::bad_array_new_length *v1;

  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x1E0DE4E98], MEMORY[0x1E0DE4390]);
}

uint64_t std::__split_buffer<TFileFragmentCachable>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 24;
    TFileFragmentCachable::~TFileFragmentCachable((TFileFragmentCachable *)(i - 24));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *std::vector<char,TInlineBufferAllocator<char,1024ul>>::vector(_QWORD *a1, size_t a2, _BYTE *a3)
{
  size_t v5;
  _BYTE *v6;
  _BYTE *v7;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  a1[131] = a1 + 3;
  if (a2)
  {
    v5 = a2;
    std::vector<char,TInlineBufferAllocator<char,1024ul>>::__vallocate[abi:fe180100](a1, a2);
    v6 = (_BYTE *)a1[1];
    v7 = &v6[v5];
    do
    {
      *v6++ = *a3;
      --v5;
    }
    while (v5);
    a1[1] = v7;
  }
  return a1;
}

void sub_1B0985BF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<char,TInlineBufferAllocator<char,1024ul>>::__destroy_vector::operator()[abi:fe180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<char,TInlineBufferAllocator<char,1024ul>>::__vallocate[abi:fe180100](_QWORD *a1, size_t __sz)
{
  _QWORD *v4;
  char *result;

  if ((__sz & 0x8000000000000000) != 0)
    std::vector<char,TInlineBufferAllocator<char,1024ul>>::__throw_length_error[abi:fe180100]();
  v4 = a1 + 131;
  result = (char *)a1[131];
  if (&result[__sz] <= (char *)a1 + 1048)
    *v4 = &result[__sz];
  else
    result = (char *)operator new(__sz);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[__sz];
  return result;
}

void std::vector<char,TInlineBufferAllocator<char,1024ul>>::__throw_length_error[abi:fe180100]()
{
  std::__throw_length_error[abi:fe180100]("vector");
}

CFTypeRef FPFontCreateMemorySafeWithData(TFPFontSwift *a1, uint64_t a2, const __CFString *a3)
{
  __CFArray *v3;
  const __CFArray *v4;
  const void *ValueAtIndex;
  CFTypeRef v6;
  CFArrayRef theArray;

  v3 = TFPFontSwift::Create(a1, 0, a3);
  if (!v3)
  {
    theArray = 0;
LABEL_7:
    TCFRetained<__CFArray const*>::~TCFRetained((const void **)&theArray);
    return 0;
  }
  v4 = (const __CFArray *)CFRetain(v3);
  theArray = v4;
  if (!v4 || CFArrayGetCount(v4) < 1)
    goto LABEL_7;
  ValueAtIndex = CFArrayGetValueAtIndex(theArray, 0);
  if (ValueAtIndex)
    v6 = CFRetain(ValueAtIndex);
  else
    v6 = 0;
  TCFRetained<__CFArray const*>::~TCFRetained((const void **)&theArray);
  return v6;
}

void sub_1B0985D00(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  TCFRetained<__CFArray const*>::~TCFRetained((const void **)va);
  _Unwind_Resume(a1);
}

__CFArray *TFPFontSwift::Create(TFPFontSwift *this, const __CFData *a2, const __CFString *a3)
{
  id v5;
  __CFArray *Mutable;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  void *v10;
  _DWORD *v11;
  CFTypeRef v12;
  CFTypeRef v13;
  __int128 v14;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[128];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v5 = +[AnyVectorFont anyVectorFontsWithData:path:](_TtC10FontParser13AnyVectorFont, "anyVectorFontsWithData:path:", this, a2);
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], objc_msgSend(v5, "count"), &TFPFontImpl::GetArrayCallBacks(void)::sCFArrayCallBacks);
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
  if (v7)
  {
    v8 = *(_QWORD *)v17;
    do
    {
      for (i = 0; i != v7; ++i)
      {
        if (*(_QWORD *)v17 != v8)
          objc_enumerationMutation(v5);
        v10 = *(void **)(*((_QWORD *)&v16 + 1) + 8 * i);
        v11 = (_DWORD *)operator new();
        v11[2] = 0;
        *(_QWORD *)v11 = &off_1E61B28C0;
        *((_QWORD *)v11 + 2) = v10;
        *((_QWORD *)v11 + 3) = 0;
        if (this)
          v12 = CFRetain(this);
        else
          v12 = 0;
        *((_QWORD *)v11 + 4) = v12;
        if (a2)
          v13 = CFRetain(a2);
        else
          v13 = 0;
        *((_QWORD *)v11 + 5) = v13;
        if (v10)
        {
          objc_msgSend(v10, "fontInfo");
          v14 = 0uLL;
        }
        else
        {
          *((_QWORD *)v11 + 22) = 0;
          v14 = 0uLL;
          *((_OWORD *)v11 + 9) = 0u;
          *((_OWORD *)v11 + 10) = 0u;
          *((_OWORD *)v11 + 7) = 0u;
          *((_OWORD *)v11 + 8) = 0u;
          *((_OWORD *)v11 + 5) = 0u;
          *((_OWORD *)v11 + 6) = 0u;
          *((_OWORD *)v11 + 3) = 0u;
          *((_OWORD *)v11 + 4) = 0u;
        }
        v11[46] = 0;
        *((_OWORD *)v11 + 12) = v14;
        *((_OWORD *)v11 + 13) = v14;
        v11[56] = 1065353216;
        *((_QWORD *)v11 + 30) = 0;
        *((_QWORD *)v11 + 31) = 0;
        *((_QWORD *)v11 + 29) = 0;
        CFArrayAppendValue(Mutable, v11);
      }
      v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
    }
    while (v7);
  }
  return Mutable;
}

void sub_1B0985F08(_Unwind_Exception *a1)
{
  uint64_t v1;
  const void **v2;

  TCFRetained<__CFString const*>::~TCFRetained(v2);
  TCFRetained<__CFData const*>::~TCFRetained((const void **)(v1 + 32));
  TCFRetained<TFPFontSwift const*>::~TCFRetained((const void **)(v1 + 24));
  MEMORY[0x1B5E0CD38](v1, 0x10E1C4001F63121);
  _Unwind_Resume(a1);
}

__CFArray *FPFontCreateMemorySafeFontsFromData(TFPFontSwift *a1, uint64_t a2, const __CFString *a3)
{
  return TFPFontSwift::Create(a1, 0, a3);
}

__CFArray *FPFontCreateMemorySafeFontsWithPath(const __CFData *a1)
{
  __CFArray *result;
  const __CFString *v3;

  result = (__CFArray *)objc_msgSend(MEMORY[0x1E0C99D50], "dataWithContentsOfFile:", a1);
  if (result)
    return TFPFontSwift::Create(result, a1, v3);
  return result;
}

void TFPFontSwift::~TFPFontSwift(TFPFontSwift *this)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  const void **v8;
  const void **v9;
  void *v10;

  v2 = *((_QWORD *)this + 29);
  if (v2)
  {
    v3 = *(void **)v2;
    if (*(_QWORD *)v2)
    {
      *(_QWORD *)(v2 + 8) = v3;
      operator delete(v3);
    }
    MEMORY[0x1B5E0CD38](v2, 0x20C40960023A9);
  }
  v4 = *((_QWORD *)this + 30);
  if (v4)
  {
    v5 = *(void **)v4;
    if (*(_QWORD *)v4)
    {
      *(_QWORD *)(v4 + 8) = v5;
      operator delete(v5);
    }
    MEMORY[0x1B5E0CD38](v4, 0x20C40960023A9);
  }
  v6 = *((_QWORD *)this + 31);
  if (v6)
  {
    v7 = *(void **)v6;
    if (*(_QWORD *)v6)
    {
      *(_QWORD *)(v6 + 8) = v7;
      operator delete(v7);
    }
    MEMORY[0x1B5E0CD38](v6, 0x10C402FEFCB83);
  }
  v8 = (const void **)*((_QWORD *)this + 26);
  if (v8)
  {
    do
    {
      v9 = (const void **)*v8;
      TCFRetained<CGPath const*>::~TCFRetained(v8 + 3);
      operator delete(v8);
      v8 = v9;
    }
    while (v9);
  }
  v10 = (void *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v10)
    operator delete(v10);
  TCFRetained<__CFString const*>::~TCFRetained((const void **)this + 5);
  TCFRetained<__CFData const*>::~TCFRetained((const void **)this + 4);
  TCFRetained<TFPFontSwift const*>::~TCFRetained((const void **)this + 3);
}

{
  TFPFontSwift::~TFPFontSwift(this);
  JUMPOUT(0x1B5E0CD38);
}

uint64_t TFPFontSwift::CreateCopyWithVariation()
{
  return 0;
}

id TFPFontSwift::CreateVariationFromPostScriptNameSuffix(id *this, const __CFString *a2)
{
  return (id)objc_msgSend(this[2], "variationWithPostScriptNameSuffix:", a2);
}

uint64_t TFPFontSwift::IsSFNT(id *this)
{
  return objc_msgSend(this[2], "isSFNT");
}

id TFPFontSwift::CopySFNTData(id *this)
{
  return (id)objc_msgSend(this[2], "sfntData");
}

__CFArray *TFPFontSwift::CopyTableTags(id *this)
{
  void *v1;
  __CFArray *Mutable;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const __CFNumber *v7;
  const void *valuePtr;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v1 = (void *)objc_msgSend(this[2], "tableTags");
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], objc_msgSend(v1, "count"), 0);
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v3 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v11;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v11 != v5)
          objc_enumerationMutation(v1);
        v7 = *(const __CFNumber **)(*((_QWORD *)&v10 + 1) + 8 * v6);
        valuePtr = (const void *)0xAAAAAAAAAAAAAAAALL;
        CFNumberGetValue(v7, kCFNumberCFIndexType, &valuePtr);
        CFArrayAppendValue(Mutable, valuePtr);
        ++v6;
      }
      while (v4 != v6);
      v4 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    }
    while (v4);
  }
  return Mutable;
}

uint64_t TFPFontSwift::CopyTable(id *this, uint64_t a2)
{
  return objc_msgSend(this[2], "copyTableDataWithTag:", a2);
}

id TFPFontSwift::CopyMetadata(id *this)
{
  return (id)objc_msgSend(this[2], "metadata");
}

uint64_t TFPFontSwift::GetPostScriptName(id *this)
{
  return objc_msgSend((id)objc_msgSend(this[2], "postScriptName"), "UTF8String");
}

id TFPFontSwift::CopyPostScriptName(id *this)
{
  return (id)objc_msgSend(this[2], "postScriptName");
}

id TFPFontSwift::CopyNameTablePostScriptName(id *this)
{
  return (id)objc_msgSend(this[2], "nameTablePostScriptName");
}

id TFPFontSwift::CopyVariationPostScriptNamePrefix(id *this)
{
  return (id)objc_msgSend(this[2], "variationPostScriptNamePrefix");
}

id TFPFontSwift::CopyAdditionalPostScriptNames(id *this)
{
  return (id)objc_msgSend(this[2], "additionalPostScriptNames");
}

id TFPFontSwift::CopyAllNames(id *this)
{
  return (id)objc_msgSend(this[2], "allNames");
}

id TFPFontSwift::CopyFullName(id *this)
{
  return (id)objc_msgSend(this[2], "fullName");
}

id TFPFontSwift::CopyFamilyName(id *this)
{
  return (id)objc_msgSend(this[2], "familyName");
}

CFTypeRef TFPFontSwift::CopyNames(id *this)
{
  return CFRetain((CFTypeRef)objc_msgSend(this[2], "names"));
}

uint64_t TFPFontSwift::GetDefaultInstance(TFPFontSwift *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 3);
  if (v1)
    (*(void (**)(_QWORD))(*(_QWORD *)v1 + 24))(*((_QWORD *)this + 3));
  return v1;
}

uint64_t TFPFontSwift::IsNamedInstanceAPI(id *this)
{
  return objc_msgSend(this[2], "isNamedInstance");
}

uint64_t TFPFontSwift::GetInstanceNameIDAPI(id *this)
{
  return objc_msgSend(this[2], "instanceNameID");
}

uint64_t TFPFontSwift::HasNamedInstanceWithOpticalSize(id *this)
{
  return objc_msgSend(this[2], "hasNamedInstanceWithOpticalSize");
}

uint64_t TFPFontSwift::GetVariations(TFPFontSwift *this, unint64_t *a2)
{
  return 0;
}

uint64_t TFPFontSwift::GetVariationAxes(TFPFontSwift *this, unint64_t *a2)
{
  return 0;
}

uint64_t TFPFontSwift::GetVariationAxisFlags(id *this, uint64_t a2)
{
  return objc_msgSend(this[2], "variationAxisFlagsWithTag:", a2);
}

uint64_t TFPFontSwift::GetVariationAxisNameID(id *this, uint64_t a2)
{
  return objc_msgSend(this[2], "variationAxisNameIDWithTag:", a2);
}

uint64_t TFPFontSwift::GetVariationValues(TFPFontSwift *this, unint64_t *a2)
{
  return 0;
}

uint64_t TFPFontSwift::GetVMetrics(TFPFontSwift *this, FPFontVMetrics *a2)
{
  void *v3;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  CGFloat v9;

  v3 = (void *)*((_QWORD *)this + 2);
  if (v3)
  {
    objc_msgSend(v3, "vMetrics");
  }
  else
  {
    v9 = 0.0;
    v7 = 0u;
    v8 = 0u;
    v5 = 0u;
    v6 = 0u;
  }
  *(_OWORD *)&a2->var7 = v7;
  *(_OWORD *)&a2->var8.origin.y = v8;
  a2->var8.size.height = v9;
  *(_OWORD *)&a2->var0 = v5;
  *(_OWORD *)&a2->var4 = v6;
  return 1;
}

uint64_t TFPFontSwift::GetFontInfo(TFPFontSwift *this)
{
  return (uint64_t)this + 48;
}

uint64_t TFPFontSwift::GetNumberOfGlyphs(id *this)
{
  return objc_msgSend(this[2], "numberOfGlyphs");
}

uint64_t TFPFontSwift::GetUnitsPerEm(id *this)
{
  return objc_msgSend(this[2], "unitsPerEm");
}

double TFPFontSwift::GetTypoMetrics(id *this, double *a2, double *a3, double *a4)
{
  double result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;

  v10 = -1;
  v11 = NAN;
  v9 = -1;
  if (objc_msgSend(this[2], "getTypoMetricsInto:", &v9))
  {
    v8 = v10;
    *(_QWORD *)a2 = v9;
    *(_QWORD *)a3 = v8;
    result = v11;
    *a4 = v11;
  }
  return result;
}

double TFPFontSwift::GetWinMetrics(id *this, double *a2, double *a3)
{
  double result;
  uint64_t v6;
  double v7;
  uint64_t v8;

  v7 = NAN;
  v8 = -1;
  if (objc_msgSend(this[2], "getWindowsMetricsInto:", &v7))
  {
    result = v7;
    v6 = v8;
    *a2 = v7;
    *(_QWORD *)a3 = v6;
  }
  return result;
}

double TFPFontSwift::GetSubscriptX(id *this, double *a2, double *a3)
{
  __int128 v5;
  double result;
  uint64_t v7;
  __int128 v8;
  __int128 v9;

  *(_QWORD *)&v5 = -1;
  *((_QWORD *)&v5 + 1) = -1;
  v8 = v5;
  v9 = v5;
  if (objc_msgSend(this[2], "getSubscriptInto:", &v8))
  {
    result = *(double *)&v9;
    v7 = v8;
    *(_QWORD *)a2 = v9;
    *(_QWORD *)a3 = v7;
  }
  return result;
}

double TFPFontSwift::GetSubscriptY(id *this, double *a2, double *a3)
{
  __int128 v5;
  double result;
  uint64_t v7;
  __int128 v8;
  __int128 v9;

  *(_QWORD *)&v5 = -1;
  *((_QWORD *)&v5 + 1) = -1;
  v8 = v5;
  v9 = v5;
  if (objc_msgSend(this[2], "getSubscriptInto:", &v8))
  {
    result = *((double *)&v9 + 1);
    v7 = *((_QWORD *)&v8 + 1);
    *a2 = *((double *)&v9 + 1);
    *(_QWORD *)a3 = v7;
  }
  return result;
}

double TFPFontSwift::GetSuperscriptX(id *this, double *a2, double *a3)
{
  __int128 v5;
  double result;
  uint64_t v7;
  __int128 v8;
  __int128 v9;

  *(_QWORD *)&v5 = -1;
  *((_QWORD *)&v5 + 1) = -1;
  v8 = v5;
  v9 = v5;
  if (objc_msgSend(this[2], "getSuperscriptInto:", &v8))
  {
    result = *(double *)&v9;
    v7 = v8;
    *(_QWORD *)a2 = v9;
    *(_QWORD *)a3 = v7;
  }
  return result;
}

double TFPFontSwift::GetSuperscriptY(id *this, double *a2, double *a3)
{
  __int128 v5;
  double result;
  uint64_t v7;
  __int128 v8;
  __int128 v9;

  *(_QWORD *)&v5 = -1;
  *((_QWORD *)&v5 + 1) = -1;
  v8 = v5;
  v9 = v5;
  if (objc_msgSend(this[2], "getSuperscriptInto:", &v8))
  {
    result = *((double *)&v9 + 1);
    v7 = *((_QWORD *)&v8 + 1);
    *a2 = *((double *)&v9 + 1);
    *(_QWORD *)a3 = v7;
  }
  return result;
}

double TFPFontSwift::GetStrikeout(id *this, double *a2, double *a3)
{
  double result;
  uint64_t v6;
  double v7;
  uint64_t v8;

  v7 = NAN;
  v8 = -1;
  if (objc_msgSend(this[2], "getStrikeoutInto:", &v7))
  {
    result = v7;
    v6 = v8;
    *a3 = v7;
    *(_QWORD *)a2 = v6;
  }
  return result;
}

double TFPFontSwift::GetStems(id *this, double *a2, double *a3)
{
  double result;
  uint64_t v6;
  double v7;
  uint64_t v8;

  v7 = 0.0;
  v8 = 0;
  objc_msgSend(this[2], "getStemsInto:", &v7);
  result = v7;
  v6 = v8;
  *a2 = v7;
  *(_QWORD *)a3 = v6;
  return result;
}

uint64_t TFPFontSwift::CopyRegistryOrderingSupplement(id *this, const __CFString **a2, const __CFString **a3, int *a4)
{
  uint64_t v7;
  _DWORD v9[5];

  memset(v9, 170, sizeof(v9));
  v7 = objc_msgSend(this[2], "getRegistryOrderingSupplement:::", &v9[3], &v9[1], v9);
  if ((_DWORD)v7)
  {
    if (a2)
      *a2 = (const __CFString *)*(id *)&v9[3];
    if (a3)
      *a3 = (const __CFString *)*(id *)&v9[1];
    if (a4)
      *a4 = v9[0];
  }
  return v7;
}

uint64_t TFPFontSwift::IsBitmapOnly(id *this)
{
  return objc_msgSend(this[2], "isBitmapOnly");
}

uint64_t TFPFontSwift::IsSuitcase(id *this)
{
  return objc_msgSend(this[2], "isSuitcase");
}

CFTypeRef TFPFontSwift::CopyPath(TFPFontSwift *this)
{
  CFTypeRef result;

  result = (CFTypeRef)*((_QWORD *)this + 5);
  if (result)
    return CFRetain(result);
  return result;
}

CFTypeRef TFPFontSwift::CopyCharacterSet(id *this)
{
  return CFRetain((CFTypeRef)objc_msgSend(this[2], "characterSet"));
}

uint64_t TFPFontSwift::GetOS2UnicodeRanges(id *this, unsigned int *a2, float a3)
{
  uint64_t result;
  uint64_t v5;

  result = objc_msgSend(this[2], "getOS2UnicodeRangesWithMinCoveragePercent:");
  *(_QWORD *)a2 = result;
  *((_QWORD *)a2 + 1) = v5;
  return result;
}

uint64_t TFPFontSwift::GetProtectionInfo(id *this)
{
  return objc_msgSend(this[2], "protectionInfo");
}

BOOL TFPFontSwift::GetType1Encoding(id *this, unsigned __int16 *a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v4 = objc_msgSend((id)objc_msgSend(this[2], "type1Encoding"), "count");
  if (!v4)
    return v4 != 0;
  v16 = 0u;
  v17 = 0u;
  v14 = 0u;
  v15 = 0u;
  v5 = (void *)objc_msgSend(this[2], "type1Encoding", 0);
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
  if (!v6)
  {
    v12 = 0;
LABEL_12:
    bzero((char *)a2 + (2 * v12), ((2 * v12) ^ 0x1FEu) + 2);
    return v4 != 0;
  }
  v7 = v6;
  v8 = 0;
  v9 = *(_QWORD *)v15;
  do
  {
    v10 = 0;
    v11 = v8;
    do
    {
      if (*(_QWORD *)v15 != v9)
        objc_enumerationMutation(v5);
      a2[(v11 + v10)] = objc_msgSend(*(id *)(*((_QWORD *)&v14 + 1) + 8 * v10), "unsignedShortValue");
      ++v10;
    }
    while (v7 != v10);
    v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
    v8 = v11 + v10;
  }
  while (v7);
  v12 = v11 + v10;
  if ((v11 + v10) <= 0xFF)
    goto LABEL_12;
  return v4 != 0;
}

uint64_t TFPFontSwift::GetTrueTypeEncoding(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend(*(id *)(a1 + 16), "getTrueTypeEncodingWithPlatform:script:indexMap:", a2, a3, a4);
}

uint64_t TFPFontSwift::GetUnicharsForGlyph(id *this, unsigned __int16 a2, unsigned __int16 *a3, uint64_t a4)
{
  return objc_msgSend(this[2], "getUnicharsWithGlyph:unicodes:count:", a2, a3, a4);
}

uint64_t TFPFontSwift::GetGlyphsForText(id *this, FPEncoding a2, const char *a3, unsigned __int16 *a4, uint64_t a5)
{
  return objc_msgSend(this[2], "getGlyphsWithEncoding:text:glyphs:count:", *(_QWORD *)&a2.var0 & 0xFFFFFFFFFFFFLL, a3, a4, a5);
}

uint64_t TFPFontSwift::GetGlyphsForCharacters(id *this, const unsigned __int16 *a2, unsigned __int16 *a3, uint64_t a4)
{
  return objc_msgSend(this[2], "getGlyphsWithCharacters:glyphs:count:", a2, a3, a4);
}

uint64_t TFPFontSwift::GetLongGlyphsForCharacters(id *this, const unsigned __int16 *a2, unsigned int *a3, uint64_t a4)
{
  return objc_msgSend(this[2], "getGlyphsWithCharacters:longGlyphs:count:", a2, a3, a4);
}

uint64_t TFPFontSwift::GetGlyphsForCharacterRange(id *this, unsigned __int16 *a2, CFRange a3)
{
  return objc_msgSend(this[2], "getGlyphsWithCharacterRange:glyphs:", a3.location, a3.length, a2);
}

uint64_t TFPFontSwift::GetLongGlyphsForCharacterRange(id *this, unsigned int *a2, CFRange a3)
{
  return objc_msgSend(this[2], "getGlyphsWithCharacterRange:longGlyphs:", a3.location, a3.length, a2);
}

uint64_t TFPFontSwift::GetGlyphsForCIDs(id *this, const unsigned __int16 *a2, unsigned __int16 *a3, uint64_t a4)
{
  return objc_msgSend(this[2], "getGlyphsWithCids:glyphs:count:", a2, a3, a4);
}

uint64_t TFPFontSwift::GetCIDsForGlyphs(id *this, const unsigned __int16 *a2, unsigned __int16 *a3, uint64_t a4)
{
  return objc_msgSend(this[2], "getCIDsWithGlyphs:cids:count:", a2, a3, a4);
}

BOOL TFPFontSwift::GetFontSubsetFormat(id *this)
{
  return !objc_msgSend(this[2], "encodingType") && (objc_msgSend(this[2], "dataResidence") & 0xFFFFFFFFFFFFFFFDLL) == 0;
}

uint64_t TFPFontSwift::GetFormat(id *this)
{
  uint64_t v3;
  unsigned int v4;

  if (objc_msgSend(this[2], "encodingType"))
    return 0;
  v3 = objc_msgSend(this[2], "dataResidence");
  if (v3 == 2)
    v4 = 9;
  else
    v4 = 0;
  if (v3)
    return v4;
  else
    return 11;
}

id TFPFontSwift::CreateFontSubset(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, __CFArray *a7)
{
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  id v18;
  id v19;
  _BYTE v20[128];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  if (a2 != 1)
    return 0;
  v18 = 0;
  v19 = 0;
  objc_msgSend(*(id *)(a1 + 16), "createSubsetWithName:glyphBits:glyphBitsSize:cmap_1_0:remapArray:data:", a3, a5, a4, a6, &v19, &v18);
  v16 = 0u;
  v17 = 0u;
  v14 = 0u;
  v15 = 0u;
  v8 = v19;
  v9 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v14, v20, 16);
  if (v9)
  {
    v10 = v9;
    v11 = *(_QWORD *)v15;
    do
    {
      v12 = 0;
      do
      {
        if (*(_QWORD *)v15 != v11)
          objc_enumerationMutation(v8);
        CFArrayAppendValue(a7, (const void *)objc_msgSend(*(id *)(*((_QWORD *)&v14 + 1) + 8 * v12++), "unsignedIntValue"));
      }
      while (v10 != v12);
      v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v14, v20, 16);
    }
    while (v10);
  }
  return v18;
}

uint64_t TFPFontSwift::CanCreatePostScriptSubset(id *this, unsigned int a2)
{
  return objc_msgSend(this[2], "canCreatePostScriptSubsetWithFormat:", a2);
}

id TFPFontSwift::CreatePostScriptSubset(id *this, const __CFString *a2, CGFontPostScriptFormat a3, const unsigned __int16 *a4, uint64_t a5, const unsigned __int16 *a6)
{
  return (id)objc_msgSend(this[2], "createPostScriptSubsetWithFormat:name:glyphs:glyphCount:encoding:", a3, a2, a4, a5, a6);
}

id TFPFontSwift::CreatePostScriptEncoding(id *this, const unsigned __int16 *a2)
{
  return (id)objc_msgSend(this[2], "createPostScriptEncoding:", a2);
}

uint64_t TFPFontSwift::GetGlyphsXo(id *this, unsigned __int16 *a2, unsigned __int16 *a3)
{
  return objc_msgSend(this[2], "getGlyphX:o:", a2, a3);
}

uint64_t TFPFontSwift::GetGlyphsForGlyphNames(id *this, const char *const *a2, unsigned __int16 *a3, uint64_t a4)
{
  return objc_msgSend(this[2], "getGlyphsWithGlyphNames:glyphs:count:", a2, a3, a4);
}

id TFPFontSwift::CopyGlyphNameForGlyph(id *this, unsigned __int16 a2)
{
  return (id)objc_msgSend(this[2], "glyphNameWithGlyph:", a2);
}

uint64_t TFPFontSwift::GetGlyphForGlyphName(id *this, CFStringRef theString)
{
  __int128 v4;
  uint64_t result;
  unsigned __int16 v6;
  void *CStringPtr;
  char buffer[16];
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v26 = v4;
  v27 = v4;
  v24 = v4;
  v25 = v4;
  v22 = v4;
  v23 = v4;
  v20 = v4;
  v21 = v4;
  v18 = v4;
  v19 = v4;
  v16 = v4;
  v17 = v4;
  v14 = v4;
  v15 = v4;
  v12 = v4;
  v13 = v4;
  v10 = v4;
  v11 = v4;
  *(_OWORD *)buffer = v4;
  v9 = v4;
  CStringPtr = (void *)CFStringGetCStringPtr(theString, 0x8000100u);
  if (!CStringPtr)
  {
    buffer[0] = 0;
    result = CFStringGetCString(theString, buffer, 320, 0x8000100u);
    if (!(_DWORD)result)
      return result;
    CStringPtr = buffer;
  }
  v6 = 0;
  objc_msgSend(this[2], "getGlyphsWithGlyphNames:glyphs:count:", &CStringPtr, &v6, 1);
  return v6;
}

uint64_t TFPFontSwift::GetGlyphIdealAdvanceWidths(id *this, const unsigned __int16 *a2, double *a3, uint64_t a4)
{
  return objc_msgSend(this[2], "getGlyphIdealAdvanceWidthsWithGlyphs:advances:count:", a2, a3, a4);
}

uint64_t TFPFontSwift::GetGlyphIdealAdvanceAndSideBearing(id *this, uint64_t a2, double *a3)
{
  uint64_t result;
  uint64_t v5;

  result = objc_msgSend(this[2], "getIdealAdvanceAndSideBearingWithGlyph:vertical:", a2);
  if (a3)
    *(_QWORD *)a3 = v5;
  return result;
}

uint64_t TFPFontSwift::GetGlyphIdealBounds(id *this, uint64_t a2)
{
  return objc_msgSend(this[2], "getIdealBoundsWithGlyph:", a2);
}

uint64_t TFPFontSwift::GetGlyphIdealVerticalBounds(id *this, uint64_t a2)
{
  return objc_msgSend(this[2], "getIdealVerticalBoundsWithGlyph:", a2);
}

uint64_t TFPFontSwift::GetGlyphDeviceAdvance(id *this, const CGAffineTransform *a2, uint64_t a3)
{
  return objc_msgSend(this[2], "getDeviceAdvanceWithGlyph:transform:", a3, a2);
}

uint64_t TFPFontSwift::GetGlyphDeviceVerticalAdvance(id *this, const CGAffineTransform *a2, uint64_t a3)
{
  return objc_msgSend(this[2], "getVerticalDeviceAdvanceWithGlyph:transform:", a3, a2);
}

uint64_t TFPFontSwift::GetGlyphDeviceBounds(id *this, const CGAffineTransform *a2, uint64_t a3)
{
  return objc_msgSend(this[2], "getDeviceBoundsWithGlyph:transform:", a3, a2);
}

uint64_t TFPFontSwift::GetGlyphDeviceVerticalBounds(id *this, const CGAffineTransform *a2, uint64_t a3)
{
  return objc_msgSend(this[2], "getVerticalDeviceBoundsWithGlyph:transform:", a3, a2);
}

uint64_t TFPFontSwift::CopyGlyphBitmap(id *this, const CGAffineTransform *a2, uint64_t a3, uint64_t a4, CGRect *a5, unint64_t *a6)
{
  uint64_t result;
  unint64_t v8;

  v8 = 0xAAAAAAAAAAAAAAAALL;
  result = objc_msgSend(this[2], "copyBitmapWithGlyph:transform:options:bounds:bytesPerRow:", a3, a2, a4, a5, &v8);
  if (a6)
    *a6 = v8;
  return result;
}

uint64_t TFPFontSwift::GetGlyphVerticalTranslate(id *this, uint64_t a2)
{
  return objc_msgSend(this[2], "getVerticalTranslateWithGlyph:", a2);
}

CFTypeRef TFPFontSwift::CopyGlyphPath(id *this, float64x2_t *a2, uint64_t a3)
{
  float64x2_t v5;
  const CGAffineTransform *v6;
  float64x2_t v7;
  float64x2_t v8;
  float64x2_t v9;
  float64x2_t v11;
  float64x2_t v12;
  __int128 v13;

  v5 = *(float64x2_t *)(MEMORY[0x1E0C9BAA8] + 16);
  v11 = *(float64x2_t *)MEMORY[0x1E0C9BAA8];
  v12 = v5;
  v13 = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 32);
  if (a2)
  {
    v6 = (const CGAffineTransform *)a2;
    v7 = (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)objc_msgSend(this[2], "unitsPerEm", *(_OWORD *)&v11, *(_OWORD *)&v12, v13)), 0);
    v8 = vdivq_f64(*(float64x2_t *)&v6->a, v7);
    v9 = vdivq_f64(*(float64x2_t *)&v6->c, v7);
    v11 = v8;
    v12 = v9;
    v13 = *(_OWORD *)&v6->tx;
    a2 = &v11;
  }
  return TFPFontSwift::CopyOriginalGlyphPath((TFPFontSwift *)this, (const CGAffineTransform *)a2, a3);
}

CFTypeRef TFPFontSwift::CopyOriginalGlyphPath(TFPFontSwift *this, const CGAffineTransform *a2, uint64_t a3)
{
  os_unfair_lock_s *v6;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  uint64_t **v11;
  uint64_t *i;
  unint64_t v13;
  void *v14;
  void *v15;
  const void *v16;
  unint64_t v17;
  uint8x8_t v18;
  unint64_t v19;
  CFTypeRef v20;
  uint64_t **v21;
  uint64_t *j;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  CFTypeRef v26;
  float v27;
  float v28;
  _BOOL8 v29;
  unint64_t v30;
  unint64_t v31;
  int8x8_t prime;
  void *v33;
  void *v34;
  uint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  uint8x8_t v38;
  unint64_t v39;
  uint8x8_t v40;
  uint64_t v41;
  const void *v42;
  _QWORD *v43;
  unint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  unint64_t v48;
  __int128 v49;
  void *v51;
  CGAffineTransform v52;
  unint64_t v53;
  uint64_t v54;
  _QWORD v55[2];
  unint64_t v56;

  v53 = 0xAAAAAAAAAAAAAAAALL;
  v6 = (os_unfair_lock_s *)((char *)this + 184);
  os_unfair_lock_lock((os_unfair_lock_t)this + 46);
  v7 = a3;
  v8 = *((_QWORD *)this + 25);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v10 = a3;
      if (v8 <= a3)
        v10 = a3 % v8;
    }
    else
    {
      v10 = ((_DWORD)v8 - 1) & a3;
    }
    v11 = *(uint64_t ***)(*((_QWORD *)this + 24) + 8 * v10);
    if (v11)
    {
      for (i = *v11; i; i = (uint64_t *)*i)
      {
        v13 = i[1];
        if (v13 == a3)
        {
          if (*((_DWORD *)i + 4) == (_DWORD)a3)
          {
            v42 = (const void *)i[3];
            if (v42)
              v20 = CFRetain(v42);
            else
              v20 = 0;
            v53 = (unint64_t)v20;
            os_unfair_lock_unlock(v6);
            if (!v20)
              goto LABEL_101;
LABEL_98:
            if (a2)
            {
              v49 = *(_OWORD *)&a2->c;
              *(_OWORD *)&v52.a = *(_OWORD *)&a2->a;
              *(_OWORD *)&v52.c = v49;
              *(_OWORD *)&v52.tx = *(_OWORD *)&a2->tx;
              if (!CGAffineTransformIsIdentity(&v52))
              {
                v20 = (CFTypeRef)MEMORY[0x1B5E0CB70](v20, a2);
                goto LABEL_101;
              }
            }
LABEL_100:
            v53 = 0;
            goto LABEL_101;
          }
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v13 >= v8)
              v13 %= v8;
          }
          else
          {
            v13 &= v8 - 1;
          }
          if (v13 != v10)
            break;
        }
      }
    }
  }
  os_unfair_lock_unlock(v6);
  v14 = (void *)objc_msgSend(*((id *)this + 2), "copyOriginalPathWithGlyph:", a3);
  if (!v14)
  {
    v20 = 0;
    goto LABEL_100;
  }
  v15 = v14;
  v54 = objc_msgSend(v14, "copyPath");

  os_unfair_lock_lock(v6);
  v16 = (const void *)v54;
  v17 = *((_QWORD *)this + 25);
  if (v17)
  {
    v18 = (uint8x8_t)vcnt_s8((int8x8_t)v17);
    v18.i16[0] = vaddlv_u8(v18);
    if (v18.u32[0] > 1uLL)
    {
      v19 = a3;
      if (v17 <= a3)
        v19 = a3 % v17;
    }
    else
    {
      v19 = ((_DWORD)v17 - 1) & a3;
    }
    v21 = *(uint64_t ***)(*((_QWORD *)this + 24) + 8 * v19);
    if (v21)
    {
      for (j = *v21; j; j = (uint64_t *)*j)
      {
        v23 = j[1];
        if (v23 == a3)
        {
          if (*((_DWORD *)j + 4) == (_DWORD)a3)
            goto LABEL_97;
        }
        else
        {
          if (v18.u32[0] > 1uLL)
          {
            if (v23 >= v17)
              v23 %= v17;
          }
          else
          {
            v23 &= v17 - 1;
          }
          if (v23 != v19)
            break;
        }
      }
    }
  }
  else
  {
    v19 = 0xAAAAAAAAAAAAAAAALL;
  }
  v56 = 0xAAAAAAAAAAAAAA00;
  v24 = operator new(0x20uLL);
  v25 = (_QWORD *)((char *)this + 208);
  v55[0] = v24;
  v55[1] = (char *)this + 208;
  *v24 = 0;
  v24[1] = a3;
  *((_DWORD *)v24 + 4) = a3;
  if (v16)
    v26 = CFRetain(v16);
  else
    v26 = 0;
  v24[3] = v26;
  LOBYTE(v56) = 1;
  v27 = (float)(unint64_t)(*((_QWORD *)this + 27) + 1);
  v28 = *((float *)this + 56);
  if (!v17 || (float)(v28 * (float)v17) < v27)
  {
    v29 = 1;
    if (v17 >= 3)
      v29 = (v17 & (v17 - 1)) != 0;
    v30 = v29 | (2 * v17);
    v31 = vcvtps_u32_f32(v27 / v28);
    if (v30 <= v31)
      prime = (int8x8_t)v31;
    else
      prime = (int8x8_t)v30;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v17 = *((_QWORD *)this + 25);
    if (*(_QWORD *)&prime > v17)
      goto LABEL_51;
    if (*(_QWORD *)&prime < v17)
    {
      v39 = vcvtps_u32_f32((float)*((unint64_t *)this + 27) / *((float *)this + 56));
      if (v17 < 3 || (v40 = (uint8x8_t)vcnt_s8((int8x8_t)v17), v40.i16[0] = vaddlv_u8(v40), v40.u32[0] > 1uLL))
      {
        v39 = std::__next_prime(v39);
      }
      else
      {
        v41 = 1 << -(char)__clz(v39 - 1);
        if (v39 >= 2)
          v39 = v41;
      }
      if (*(_QWORD *)&prime <= v39)
        prime = (int8x8_t)v39;
      if (*(_QWORD *)&prime >= v17)
      {
        v17 = *((_QWORD *)this + 25);
      }
      else
      {
        if (prime)
        {
LABEL_51:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:fe180100]();
          v33 = operator new(8 * *(_QWORD *)&prime);
          v34 = (void *)*((_QWORD *)this + 24);
          *((_QWORD *)this + 24) = v33;
          if (v34)
            operator delete(v34);
          v35 = 0;
          *((int8x8_t *)this + 25) = prime;
          do
            *(_QWORD *)(*((_QWORD *)this + 24) + 8 * v35++) = 0;
          while (*(_QWORD *)&prime != v35);
          v36 = (_QWORD *)*v25;
          if (*v25)
          {
            v37 = v36[1];
            v38 = (uint8x8_t)vcnt_s8(prime);
            v38.i16[0] = vaddlv_u8(v38);
            if (v38.u32[0] > 1uLL)
            {
              if (v37 >= *(_QWORD *)&prime)
                v37 %= *(_QWORD *)&prime;
            }
            else
            {
              v37 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*((_QWORD *)this + 24) + 8 * v37) = v25;
            v43 = (_QWORD *)*v36;
            if (*v36)
            {
              do
              {
                v44 = v43[1];
                if (v38.u32[0] > 1uLL)
                {
                  if (v44 >= *(_QWORD *)&prime)
                    v44 %= *(_QWORD *)&prime;
                }
                else
                {
                  v44 &= *(_QWORD *)&prime - 1;
                }
                if (v44 != v37)
                {
                  v45 = *((_QWORD *)this + 24);
                  if (!*(_QWORD *)(v45 + 8 * v44))
                  {
                    *(_QWORD *)(v45 + 8 * v44) = v36;
                    goto LABEL_78;
                  }
                  *v36 = *v43;
                  *v43 = **(_QWORD **)(*((_QWORD *)this + 24) + 8 * v44);
                  **(_QWORD **)(*((_QWORD *)this + 24) + 8 * v44) = v43;
                  v43 = v36;
                }
                v44 = v37;
LABEL_78:
                v36 = v43;
                v43 = (_QWORD *)*v43;
                v37 = v44;
              }
              while (v43);
            }
          }
          v17 = (unint64_t)prime;
          goto LABEL_82;
        }
        v51 = (void *)*((_QWORD *)this + 24);
        *((_QWORD *)this + 24) = 0;
        if (v51)
          operator delete(v51);
        v17 = 0;
        *((_QWORD *)this + 25) = 0;
      }
    }
LABEL_82:
    if ((v17 & (v17 - 1)) != 0)
    {
      if (v17 <= v7)
        v19 = v7 % v17;
      else
        v19 = v7;
    }
    else
    {
      v19 = ((_DWORD)v17 - 1) & v7;
    }
  }
  v46 = *(_QWORD **)(*((_QWORD *)this + 24) + 8 * v19);
  v47 = v55[0];
  if (v46)
  {
    *(_QWORD *)v55[0] = *v46;
LABEL_95:
    *v46 = v47;
    goto LABEL_96;
  }
  *(_QWORD *)v55[0] = *((_QWORD *)this + 26);
  *((_QWORD *)this + 26) = v47;
  *(_QWORD *)(*((_QWORD *)this + 24) + 8 * v19) = v25;
  if (*(_QWORD *)v47)
  {
    v48 = *(_QWORD *)(*(_QWORD *)v47 + 8);
    if ((v17 & (v17 - 1)) != 0)
    {
      if (v48 >= v17)
        v48 %= v17;
    }
    else
    {
      v48 &= v17 - 1;
    }
    v46 = (_QWORD *)(*((_QWORD *)this + 24) + 8 * v48);
    goto LABEL_95;
  }
LABEL_96:
  v55[0] = 0;
  ++*((_QWORD *)this + 27);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned int,TCFRetained<CGPath const*>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,TCFRetained<CGPath const*>>,void *>>>>::reset[abi:fe180100]((uint64_t)v55);
  v16 = (const void *)v54;
LABEL_97:
  v53 = (unint64_t)v16;
  v54 = 0;
  os_unfair_lock_unlock(v6);
  TCFRetained<CGPath const*>::~TCFRetained((const void **)&v54);
  v20 = v16;
  if (v16)
    goto LABEL_98;
LABEL_101:
  TCFRetained<CGPath const*>::~TCFRetained((const void **)&v53);
  return v20;
}

void sub_1B098742C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, int a17, __int16 a18, char a19, char a20,int a21,__int16 a22,char a23,char a24)
{
  os_unfair_lock_s *v24;

  os_unfair_lock_unlock(v24);
  _Unwind_Resume(a1);
}

id TFPFontSwift::CopySplicedStash(id *this)
{
  return (id)objc_msgSend(this[2], "splicedStash");
}

uint64_t TFPFontSwift::GetVariationScalar(id *this, int a2)
{
  return objc_msgSend(this[2], "variationScalarWithTupleIndex:", a2);
}

uint64_t TFPFontSwift::GetVariationScalars(id *this, int a2, double *a3)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  __int16 v8;
  uint64_t v9;
  uint64_t v10;
  __int16 v11;
  __int16 v12;
  uint64_t v13;
  double *v14;
  double v15;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _BYTE v21[128];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v5 = (void *)objc_msgSend(this[2], "variationScalars");
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
  if (v6)
  {
    v7 = v6;
    v8 = 0;
    v9 = *(_QWORD *)v18;
LABEL_3:
    v10 = 0;
    v11 = v8;
    v12 = v8;
    if (v8 <= a2)
      v12 = a2;
    v13 = (unsigned __int16)(v12 - v8);
    v14 = &a3[v8];
    while (1)
    {
      if (*(_QWORD *)v18 != v9)
        objc_enumerationMutation(v5);
      if (v13 == v10)
        break;
      objc_msgSend(*(id *)(*((_QWORD *)&v17 + 1) + 8 * v10), "doubleValue");
      v14[v10++] = v15;
      if (v7 == v10)
      {
        v8 = v11 + v10;
        v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
        if (v7)
          goto LABEL_3;
        return 1;
      }
    }
  }
  return 1;
}

uint64_t TFPFontSwift::GetTupleCount(id *this)
{
  uint64_t v1;

  v1 = objc_msgSend((id)objc_msgSend(this[2], "variationScalars"), "count");
  if (v1 ^ (__int16)v1 | ((uint64_t)(__int16)v1 >> 63))
    return 0x7FFF;
  else
    return (__int16)v1;
}

uint64_t TFPFontSwift::GetControlPoints(id *this, uint64_t a2, unsigned int *a3, CGPoint *a4)
{
  unsigned int v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  CGPoint *v15;
  unsigned int v16;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[128];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v6 = *a3;
  v7 = (void *)objc_msgSend(this[2], "controlPointsWithGlyph:", a2);
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
  if (v8)
  {
    v9 = v8;
    v10 = 0;
    v11 = *(_QWORD *)v19;
LABEL_3:
    v12 = 0;
    v13 = v10;
    if (v6 >= v10)
      v14 = v6 - v10;
    else
      v14 = 0;
    v15 = &a4[v10];
    while (1)
    {
      if (*(_QWORD *)v19 != v11)
        objc_enumerationMutation(v7);
      if (v14 == v12)
        break;
      objc_msgSend(*(id *)(*((_QWORD *)&v18 + 1) + 8 * v12++), "getValue:size:", v15++, 16);
      if (v9 == v12)
      {
        v10 = v13 + v12;
        v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
        if (v9)
          goto LABEL_3;
        break;
      }
    }
    v16 = v13 + v12;
  }
  else
  {
    v16 = 0;
  }
  *a3 = v16;
  return 1;
}

const void **TCFRetained<CGPath const*>::~TCFRetained(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

const void **TCFRetained<__CFArray const*>::~TCFRetained(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

const void **TCFRetained<TFPFontSwift const*>::~TCFRetained(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

const void **TCFRetained<__CFData const*>::~TCFRetained(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

const void **TCFRetained<__CFString const*>::~TCFRetained(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned int,TCFRetained<CGPath const*>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,TCFRetained<CGPath const*>>,void *>>>>::reset[abi:fe180100](uint64_t a1)
{
  const void **v1;

  v1 = *(const void ***)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      TCFRetained<CGPath const*>::~TCFRetained(v1 + 3);
    operator delete(v1);
  }
}

void TType1PDTCFont::~TType1PDTCFont(TType1PDTCFont *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E61CC0A8;
  v2 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

{
  uint64_t v2;

  *(_QWORD *)this = off_1E61CC0A8;
  v2 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x1B5E0CD38);
}

uint64_t TType1PDTCFont::GetFontDataTableTag(TType1PDTCFont *this)
{
  return 1346655299;
}

void *TType1LWFNParsingContext::CharStringIndex(TType1LWFNParsingContext *this, int a2, unsigned int a3, size_t __n, const char *__src)
{
  unsigned int v6;
  unsigned int v9;
  int v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *result;
  int v17;
  _DWORD *v18;
  _DWORD *exception;

  v6 = __n;
  v9 = *((_DWORD *)this + 230);
  v10 = __n + 2;
  v11 = v9 + (_DWORD)__n + 2;
  *((_QWORD *)this + 107) = v11;
  if (*((_QWORD *)this + 108) >= v11)
  {
    v15 = *((_QWORD *)this + 106);
  }
  else
  {
    v12 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 105) + 48))((char *)this + 840);
    v13 = *((_QWORD *)this + 106);
    v14 = *((_QWORD *)this + 105);
    if (v13)
      v15 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 40))((char *)this + 840, v13, v12);
    else
      v15 = (*(uint64_t (**)(char *, uint64_t))(v14 + 16))((char *)this + 840, v12);
    *((_QWORD *)this + 106) = v15;
    if (!v15)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)exception = &off_1E6176998;
      exception[2] = 2;
    }
    *((_QWORD *)this + 108) = v12;
    v9 = *((_DWORD *)this + 230);
  }
  result = memcpy((void *)(v15 + v9), __src, v6);
  v17 = *((_DWORD *)this + 230);
  v18 = (_DWORD *)(*((_QWORD *)this + 79) + 8 * a2);
  *v18 = v17;
  v18[1] = v6;
  *((_DWORD *)this + 230) = v17 + v10;
  return result;
}

BOOL TSortedStringTable::GetValue(const char ***this, const char *a2, unsigned int *a3)
{
  const char **v4;
  const char **v5;
  const char *v7;

  v7 = a2;
  v4 = std::__equal_range[abi:fe180100]<std::_ClassicAlgPolicy,TSortedStringTable::LessThan &,std::pair<char const*,unsigned int> const*,std::pair<char const*,unsigned int> const*,char const*,std::__identity>(this[1], &this[1][2 * (_QWORD)*this], &v7);
  if (v4 != v5)
    *a3 = *((_DWORD *)v4 + 2);
  return v4 != v5;
}

uint64_t TType1LWFNParsingContext::BlendItalicAngle(TType1LWFNParsingContext *this, int a2, int a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *exception;

  v6 = 4 * *((unsigned __int16 *)this + 355);
  *((_QWORD *)this + 111) = v6;
  if (*((_QWORD *)this + 112) >= v6)
  {
    v10 = *((_QWORD *)this + 110);
  }
  else
  {
    v7 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 109) + 48))((char *)this + 872);
    v8 = *((_QWORD *)this + 110);
    v9 = *((_QWORD *)this + 109);
    if (v8)
      v10 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 40))((char *)this + 872, v8, v7);
    else
      v10 = (*(uint64_t (**)(char *, uint64_t))(v9 + 16))((char *)this + 872, v7);
    *((_QWORD *)this + 110) = v10;
    if (!v10)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)exception = &off_1E6176998;
      exception[2] = 2;
    }
    *((_QWORD *)this + 112) = v7;
  }
  *(_DWORD *)(v10 + 4 * a2) = a3;
  return 1;
}

void TLWFNType1Font::TLWFNType1Font(TLWFNType1Font *this, const TResourceForkSurrogate *a2)
{
  _QWORD *v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _WORD *v9;
  _WORD *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t **v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  const char *v18;
  size_t v19;
  unsigned int v20;
  size_t v21;
  int v22;
  uint64_t v23;
  signed int v24;
  uint64_t v25;
  unsigned __int8 *v26;
  BOOL v27;
  _WORD *v28;
  __int128 v29;
  __int128 v30;
  const char *v31[4];
  _OWORD __b[58];
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  *((_DWORD *)this + 2) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 21) = 0;
  *((_QWORD *)this + 23) = 0;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 27) = 0;
  *((_QWORD *)this + 28) = 0;
  *(_QWORD *)this = &off_1E6176BD0;
  *((_QWORD *)this + 2) = &unk_1E6176DE8;
  *(_OWORD *)((char *)this + 232) = 0u;
  v4 = (_QWORD *)((char *)this + 232);
  *(_OWORD *)((char *)this + 248) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  *((_QWORD *)this + 32) = 850045863;
  *((_QWORD *)this + 39) = 0;
  *((_QWORD *)this + 40) = &off_1E6176770;
  *((_QWORD *)this + 41) = 0;
  *((_QWORD *)this + 42) = 0;
  *(_OWORD *)((char *)this + 392) = 0u;
  *(_OWORD *)((char *)this + 376) = 0u;
  *(_OWORD *)((char *)this + 360) = 0u;
  *((_QWORD *)this + 43) = 0;
  *((_QWORD *)this + 44) = 850045863;
  *((_QWORD *)this + 51) = 0;
  *((_QWORD *)this + 52) = &off_1E6176770;
  *((_QWORD *)this + 54) = 0;
  *((_QWORD *)this + 55) = 0;
  *((_QWORD *)this + 53) = 0;
  TResourceFileDataSurrogate::TResourceFileDataSurrogate((TLWFNType1Font *)((char *)this + 448), a2);
  *((_QWORD *)this + 58) = 0;
  *((_QWORD *)this + 59) = 0;
  *(_QWORD *)&v5 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v29 = v5;
  v30 = v5;
  TResourceFileDataSurrogate::TResourceFileDataSurrogate((TResourceFileDataSurrogate *)&v29, a2, 1347375956, 501);
  *(_QWORD *)&v30 = 0;
  *((_QWORD *)&v30 + 1) = a2;
  memset(__b, 170, sizeof(__b));
  (*(void (**)(const char **__return_ptr, _QWORD, _QWORD, _QWORD))(**((_QWORD **)&v29 + 1) + 24))(v31, *((_QWORD *)&v29 + 1), 0, 0);
  TParsingContext::TParsingContext((TParsingContext *)__b, (const TDataReference *)v31, 256);
  *(_QWORD *)&__b[0] = &off_1E617D7C8;
  *((_QWORD *)&__b[46] + 1) = 0;
  *((_QWORD *)&__b[47] + 1) = 0;
  LOBYTE(__b[48]) = 0;
  memset(&__b[49], 0, 24);
  *((_QWORD *)&__b[50] + 1) = 4096;
  *((_QWORD *)&__b[48] + 1) = &off_1E61C8D98;
  __b[51] = 0uLL;
  *(_QWORD *)&__b[52] = this;
  v31[0] = (const char *)&off_1E6176770;
  TDataReference::DucRefCount((TDataReference *)v31);
  *(_QWORD *)&__b[0] = &off_1E617D488;
  *((_QWORD *)&__b[52] + 1) = &off_1E617A658;
  memset(&__b[53], 0, 24);
  *((_QWORD *)&__b[54] + 1) = &off_1E617A658;
  memset(&__b[55], 0, 32);
  *(_QWORD *)&__b[57] = &v29;
  DWORD2(__b[57]) = 0;
  TType1ParsingContext::ParseType1Font((TType1Font **)__b);
  v6 = *(_QWORD *)&__b[54];
  if (*(_QWORD *)&__b[54])
  {
    v6 = *(_QWORD *)&__b[53];
    memset(&__b[53], 0, 24);
  }
  *v4 = v6;
  v7 = *(_QWORD *)&__b[56];
  if (*(_QWORD *)&__b[56])
  {
    v7 = *(_QWORD *)&__b[55];
    memset(&__b[55], 0, 24);
  }
  *((_QWORD *)this + 30) = v7;
  v8 = *((_QWORD *)this + 28);
  if (v8 && !*((_QWORD *)this + 31) && *((_QWORD *)this + 6) && *((_QWORD *)this + 24))
  {
    v9 = malloc_type_calloc(0x200uLL, 1uLL, 0x6D556E4EuLL);
    v10 = v9;
    *((_QWORD *)this + 31) = v9;
    if (*((_QWORD *)&__b[51] + 1))
    {
      if (*((_DWORD *)this + 35))
      {
        v11 = 0;
        do
        {
          v12 = *(unsigned int *)(*((_QWORD *)this + 24) + 4 * v11);
          if ((int)v12 >= 1)
          {
            v31[0] = (const char *)(*((_QWORD *)this + 6) + v12 + 1);
            v13 = std::__hash_table<std::__hash_value_type<char const*,unsigned int>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,unsigned int>,TType1ParsingContext::HashCString,TType1ParsingContext::EqualCString,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,unsigned int>,TType1ParsingContext::EqualCString,TType1ParsingContext::HashCString,true>,std::allocator<std::__hash_value_type<char const*,unsigned int>>>::find<char const*>(*((_QWORD **)&__b[51] + 1), v31);
            if (v13)
            {
              v14 = *((unsigned int *)v13 + 6);
              if (v14 <= 0xFF)
                *(_WORD *)(*((_QWORD *)this + 31) + 2 * v14) = v11;
            }
          }
          ++v11;
        }
        while (v11 < *((unsigned int *)this + 35));
      }
    }
    else
    {
      v15 = 0;
      v16 = 1;
      v28 = v9;
      do
      {
        v17 = *(int *)(v8 + 4 * v15);
        if ((_DWORD)v17)
        {
          v18 = (const char *)(v17 + *((_QWORD *)this + 28) + 1);
          v19 = strlen(v18);
          v20 = *((_DWORD *)this + 35);
          if (v20)
          {
            v21 = v19;
            v22 = 0;
            v23 = *((_QWORD *)this + 24);
            while (1)
            {
              v24 = (v16 + v22) % v20;
              v25 = *(unsigned int *)(v23 + 4 * v24);
              if ((int)v25 >= 1)
              {
                v26 = (unsigned __int8 *)(*((_QWORD *)this + 6) + v25);
                v27 = *v26 && v21 == *v26;
                if (v27 && !memcmp(v18, v26 + 1, v21))
                  break;
              }
              if (v20 == ++v22)
              {
                LOWORD(v24) = -1;
                goto LABEL_34;
              }
            }
            v16 = (__int16)v24 + 1;
LABEL_34:
            v10 = v28;
          }
          else
          {
            LOWORD(v24) = -1;
          }
          v10[v15] = v24;
        }
        ++v15;
      }
      while (v15 != 256);
    }
  }
  TType1LWFNParsingContext::~TType1LWFNParsingContext((TType1LWFNParsingContext *)__b);
  TResourceFileDataSurrogate::~TResourceFileDataSurrogate((TResourceFileDataSurrogate *)&v29);
}

void sub_1B09880AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t *v3;
  TResourceFileDataSurrogate *v4;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  TType1LWFNParsingContext::~TType1LWFNParsingContext((TType1LWFNParsingContext *)va1);
  TResourceFileDataSurrogate::~TResourceFileDataSurrogate((TResourceFileDataSurrogate *)va);
  v6 = v3 + 58;
  v7 = v3[59];
  v3[59] = 0;
  if (v7)
    MEMORY[0x1B5E0CD14](v7, 0x1000C80BDFB0063);
  v8 = *v6;
  *v6 = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  TResourceFileDataSurrogate::~TResourceFileDataSurrogate(v4);
  TDataReference::~TDataReference((TDataReference *)(v3 + 52));
  TDataReference::~TDataReference((TDataReference *)(v3 + 40));
  TType1Font::~TType1Font((TType1Font *)v3);
  _Unwind_Resume(a1);
}

void sub_1B0988160()
{
  JUMPOUT(0x1B098813CLL);
}

unsigned __int8 *TLWFNType1Font::GetCharString@<X0>(TLWFNType1Font *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  unsigned __int8 *result;
  unsigned int v7;
  uint64_t v8;
  size_t v9;
  __int128 v10;
  _DWORD *exception;

  result = (unsigned __int8 *)(*(uint64_t (**)(TLWFNType1Font *))(*(_QWORD *)this + 168))(this);
  if (result >= 0xFFFF)
    v7 = 0xFFFF;
  else
    v7 = result;
  if (v7 <= a2 || (v8 = *((_QWORD *)this + 13)) == 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E6176998;
    exception[2] = 4;
  }
  v9 = *(unsigned int *)(v8 + 8 * a2 + 4);
  if ((_DWORD)v9)
  {
    *(_QWORD *)&v10 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)(a3 + 32) = v10;
    *(_OWORD *)(a3 + 48) = v10;
    *(_OWORD *)a3 = v10;
    *(_OWORD *)(a3 + 16) = v10;
    TCharString::TCharString((TCharString *)a3, a2, v9, 0);
    return LenIVDecrypt(*(unsigned __int8 **)(a3 + 8), (unsigned __int8 *)(*((_QWORD *)this + 29) + *(unsigned int *)(v8 + 8 * a2)), v9, *(__int16 *)(*((_QWORD *)this + 16) + 56));
  }
  else
  {
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)a3 = &off_1E61C8568;
    *(_QWORD *)(a3 + 8) = 0;
    *(_DWORD *)(a3 + 24) = 0;
    *(_BYTE *)(a3 + 28) = 0;
    *(_QWORD *)(a3 + 32) = &off_1E6176770;
    *(_QWORD *)(a3 + 40) = 0;
    *(_QWORD *)(a3 + 48) = 0;
    *(_QWORD *)(a3 + 56) = 0;
  }
  return result;
}

void sub_1B0988280(_Unwind_Exception *a1)
{
  void **v1;

  TCharString::~TCharString(v1);
  _Unwind_Resume(a1);
}

BOOL TLWFNType1Font::GetType1Encoding(TLWFNType1Font *this, unsigned __int16 *__dst)
{
  const void *v2;

  v2 = (const void *)*((_QWORD *)this + 31);
  if (v2)
    memmove(__dst, v2, 0x200uLL);
  return v2 != 0;
}

void `non-virtual thunk to'TLWFNType1Font::~TLWFNType1Font(TLWFNType1Font *this)
{
  TLWFNType1Font::~TLWFNType1Font((TLWFNType1Font *)((char *)this - 16));
}

{
  TLWFNType1Font::~TLWFNType1Font((TLWFNType1Font *)((char *)this - 16));
  JUMPOUT(0x1B5E0CD38);
}

uint64_t TLWFNType1Font::GetVariationAxes(_WORD *a1, void **a2)
{
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  unsigned int v13;
  int v14;
  __int128 v15;
  unsigned int v16;
  unsigned __int8 *v17;
  unint64_t v18;
  int v19;
  unsigned int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  __int16 v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  __int16 v28;
  __int16 v29;
  __int16 v30;
  int v33;
  int v34;
  double v36;
  double v37;
  double v38;
  char *v39;
  char *v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  int v45;
  int v46;
  double v48;
  double v49;
  double v50;
  char *v51;
  char *v52;
  double v53;
  int v54;
  uint64_t v55;
  int v56;
  char *v58;
  char *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char *v64;
  uint64_t v65;
  char *v66;
  char *v67;
  char *v68;
  char *v69;
  __int128 v70;
  double v71;
  double v72;
  char *v73;
  double v74;
  double v75;
  char *v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  char *v81;
  __int128 v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  char *v87;
  __int128 v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  char *v93;
  __int128 v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t v98;
  char *v99;
  __int128 v100;
  signed int v102;
  uint64_t v103;
  uint64_t v104;
  unsigned int *v105;
  __int16 *v106;
  unsigned int v107;
  __int128 v108;
  __int128 v109;
  __int16 v110[8];
  __int128 v111;
  uint64_t v112;

  v112 = *MEMORY[0x1E0C80C00];
  if (!a1[74])
    return 0;
  *(_QWORD *)&v3 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v108 = v3;
  v109 = v3;
  (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)a1 + 480))(&v108);
  if (!*((_QWORD *)&v108 + 1)
    || ((v4 = *(_QWORD *)(*((_QWORD *)&v108 + 1) + 8), v5 = v4 + v109, v4) ? (v6 = v4 + v109) : (v6 = 0), !v4))
  {
LABEL_119:
    *(_QWORD *)&v108 = &off_1E6176770;
    TDataReference::DucRefCount((TDataReference *)&v108);
    return 0;
  }
  v7 = v6 + *((_QWORD *)&v109 + 1) - v109;
  v8 = bswap32(*(unsigned __int16 *)(v5 + 4));
  v9 = v8 >> 16;
  v10 = SHIWORD(v8);
  v11 = SHIWORD(v8) + 3;
  if ((int)v11 <= (int)bswap32(*(unsigned __int16 *)(v5 + 12)) >> 16)
  {
    v14 = *(unsigned __int16 *)(v5 + (int)bswap32(*(_DWORD *)(v5 + 4 * v10 + 22)));
    *(_QWORD *)&v15 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v15 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)v110 = v15;
    v111 = v15;
    v13 = *(unsigned __int16 *)(v5 + 10);
    if (!*(_WORD *)(v5 + 10))
    {
      if (!v14)
        goto LABEL_123;
      v102 = bswap32(*(_DWORD *)(v5 + 4 * (int)v11 + 14));
      v103 = *(unsigned __int8 *)(v5 + v102) + v5 + v102 + 1;
      v17 = (unsigned __int8 *)(v103 + ((v103 ^ v5) & 1));
LABEL_13:
      LocalGetMMFondNameCoords(v17 + 1, v10, v110);
      goto LABEL_14;
    }
LABEL_11:
    v16 = __rev16(v13);
    v17 = (unsigned __int8 *)(v5 + (int)bswap32(*(_DWORD *)(v5 + 4 * v11 + 14)));
    do
    {
      --v16;
      v17 += *v17 + (((*v17 + (_BYTE)v17 + 1) ^ v5) & 1) + 1;
    }
    while ((_WORD)v16);
    goto LABEL_13;
  }
  *(_QWORD *)&v12 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)v110 = v12;
  v111 = v12;
  v13 = *(unsigned __int16 *)(v5 + 10);
  if (*(_WORD *)(v5 + 10))
    goto LABEL_11;
LABEL_123:
  if (v9 >= 1)
  {
    v104 = (unsigned __int16)v9;
    v105 = (unsigned int *)(v109 + v4 + 14);
    v106 = v110;
    do
    {
      v107 = *v105++;
      *v106++ = bswap32(*(unsigned __int16 *)(v5 + 2 + (int)bswap32(v107))) >> 16;
      --v104;
    }
    while (v104);
  }
LABEL_14:
  v18 = v7 - (v5 + (int)bswap32(*(_DWORD *)(v5 + 14)));
  v19 = (v18 * (unsigned __int128)0x2492492492492493uLL) >> 64;
  LODWORD(v18) = v19 + ((v18 - v19) >> 1);
  v20 = v18 >> 2;
  v21 = (__int16)((int)v18 >> 2);
  if (v9 < (__int16)v20)
    v21 = v9;
  if (v21 < 1)
    goto LABEL_119;
  v22 = 0;
  v23 = (unsigned __int16)v21;
  v24 = 256;
  do
  {
    v25 = v5 + (int)bswap32(*(_DWORD *)(v5 + 4 * v22 + 14));
    v26 = bswap32(*(unsigned __int16 *)(v25 + 2)) >> 16;
    v27 = bswap32(*(unsigned __int16 *)(v25 + 4)) >> 16;
    if (v110[v22])
      v28 = v26;
    else
      v28 = v26 + 1;
    if (v110[v22])
      v29 = v27;
    else
      v29 = v27 + 1;
    if ((unsigned __int16)v110[v22] <= 1u)
      v30 = 1;
    else
      v30 = v110[v22];
    switch(*(_BYTE *)(v25 + 6))
    {
      case 5:
        if (*(_DWORD *)(v25 + 7) == 1952737623 && *(_BYTE *)(v25 + 11) == 104)
        {
          v71 = (double)v30;
          v49 = (double)v28 / v71;
          v72 = (double)v29;
          v51 = (char *)a2[1];
          v73 = (char *)a2[2];
          v53 = v72 / v71;
          if (v51 < v73)
          {
            v54 = 2003072104;
            goto LABEL_77;
          }
          v77 = (v51 - (_BYTE *)*a2) >> 5;
          v78 = v77 + 1;
          if ((unint64_t)(v77 + 1) >> 59)
            std::vector<char,TInlineBufferAllocator<char,1024ul>>::__throw_length_error[abi:fe180100]();
          v79 = v73 - (_BYTE *)*a2;
          if (v79 >> 4 > v78)
            v78 = v79 >> 4;
          if ((unint64_t)v79 >= 0x7FFFFFFFFFFFFFE0)
            v80 = 0x7FFFFFFFFFFFFFFLL;
          else
            v80 = v78;
          v64 = (char *)std::__allocate_at_least[abi:fe180100]<std::allocator<TVariationAxis>>((uint64_t)(a2 + 2), v80);
          v66 = &v64[32 * v77];
          *(_DWORD *)v66 = 2003072104;
          *((_WORD *)v66 + 2) = 0;
          *((_WORD *)v66 + 3) = v24;
          *((double *)v66 + 1) = v49;
          *((double *)v66 + 2) = v53;
          *((_QWORD *)v66 + 3) = 0x3FF0000000000000;
          v81 = (char *)*a2;
          v67 = (char *)a2[1];
          v69 = v66;
          if (v67 != *a2)
          {
            do
            {
              v82 = *((_OWORD *)v67 - 1);
              *((_OWORD *)v69 - 2) = *((_OWORD *)v67 - 2);
              *((_OWORD *)v69 - 1) = v82;
              v69 -= 32;
              v67 -= 32;
            }
            while (v67 != v81);
            goto LABEL_113;
          }
          goto LABEL_114;
        }
        if (*(_DWORD *)(v25 + 7) == 1769104723 && *(_BYTE *)(v25 + 11) == 102)
        {
          v74 = (double)v30;
          v49 = (double)v28 / v74;
          v75 = (double)v29;
          v51 = (char *)a2[1];
          v76 = (char *)a2[2];
          v53 = v75 / v74;
          if (v51 < v76)
          {
            v54 = 1936028262;
            goto LABEL_77;
          }
          v89 = (v51 - (_BYTE *)*a2) >> 5;
          v90 = v89 + 1;
          if ((unint64_t)(v89 + 1) >> 59)
            std::vector<char,TInlineBufferAllocator<char,1024ul>>::__throw_length_error[abi:fe180100]();
          v91 = v76 - (_BYTE *)*a2;
          if (v91 >> 4 > v90)
            v90 = v91 >> 4;
          if ((unint64_t)v91 >= 0x7FFFFFFFFFFFFFE0)
            v92 = 0x7FFFFFFFFFFFFFFLL;
          else
            v92 = v90;
          v64 = (char *)std::__allocate_at_least[abi:fe180100]<std::allocator<TVariationAxis>>((uint64_t)(a2 + 2), v92);
          v66 = &v64[32 * v89];
          *(_DWORD *)v66 = 1936028262;
          *((_WORD *)v66 + 2) = 0;
          *((_WORD *)v66 + 3) = v24;
          *((double *)v66 + 1) = v49;
          *((double *)v66 + 2) = v53;
          *((_QWORD *)v66 + 3) = 0x3FF0000000000000;
          v93 = (char *)*a2;
          v67 = (char *)a2[1];
          v69 = v66;
          if (v67 != *a2)
          {
            do
            {
              v94 = *((_OWORD *)v67 - 1);
              *((_OWORD *)v69 - 2) = *((_OWORD *)v67 - 2);
              *((_OWORD *)v69 - 1) = v94;
              v69 -= 32;
              v67 -= 32;
            }
            while (v67 != v93);
            goto LABEL_113;
          }
          goto LABEL_114;
        }
        v33 = *(_DWORD *)(v25 + 7);
        v34 = *(unsigned __int8 *)(v25 + 11);
        if (v33 == 1819898963 && v34 == 101)
        {
          v36 = (double)v28;
          v37 = (double)v29;
          v38 = (double)v30;
          v39 = (char *)a2[1];
          v40 = (char *)a2[2];
          if (v39 < v40)
          {
            v41 = 1937013100;
            goto LABEL_63;
          }
          v95 = (v39 - (_BYTE *)*a2) >> 5;
          v96 = v95 + 1;
          if ((unint64_t)(v95 + 1) >> 59)
            std::vector<char,TInlineBufferAllocator<char,1024ul>>::__throw_length_error[abi:fe180100]();
          v97 = v40 - (_BYTE *)*a2;
          if (v97 >> 4 > v96)
            v96 = v97 >> 4;
          if ((unint64_t)v97 >= 0x7FFFFFFFFFFFFFE0)
            v98 = 0x7FFFFFFFFFFFFFFLL;
          else
            v98 = v96;
          v64 = (char *)std::__allocate_at_least[abi:fe180100]<std::allocator<TVariationAxis>>((uint64_t)(a2 + 2), v98);
          v66 = &v64[32 * v95];
          *(_DWORD *)v66 = 1937013100;
          *((_WORD *)v66 + 2) = 0;
          *((_WORD *)v66 + 3) = v24;
          *((double *)v66 + 1) = v36;
          *((double *)v66 + 2) = v37;
          *((double *)v66 + 3) = v38;
          v99 = (char *)*a2;
          v67 = (char *)a2[1];
          v69 = v66;
          if (v67 != *a2)
          {
            do
            {
              v100 = *((_OWORD *)v67 - 1);
              *((_OWORD *)v69 - 2) = *((_OWORD *)v67 - 2);
              *((_OWORD *)v69 - 1) = v100;
              v69 -= 32;
              v67 -= 32;
            }
            while (v67 != v99);
            goto LABEL_113;
          }
          goto LABEL_114;
        }
        break;
      case 6:
        v45 = *(_DWORD *)(v25 + 7);
        v46 = *(unsigned __int16 *)(v25 + 11);
        if (v45 == 1734960471 && v46 == 29800)
        {
          v48 = (double)v30;
          v49 = (double)v28 / v48;
          v50 = (double)v29;
          v51 = (char *)a2[1];
          v52 = (char *)a2[2];
          v53 = v50 / v48;
          if (v51 < v52)
          {
            v54 = 2003265652;
LABEL_77:
            *(_DWORD *)v51 = v54;
            *((_WORD *)v51 + 2) = 0;
            *((_WORD *)v51 + 3) = v24;
            *((double *)v51 + 1) = v49;
            *((double *)v51 + 2) = v53;
            v59 = v51 + 32;
            *((_QWORD *)v51 + 3) = 0x3FF0000000000000;
            goto LABEL_116;
          }
          v83 = (v51 - (_BYTE *)*a2) >> 5;
          v84 = v83 + 1;
          if ((unint64_t)(v83 + 1) >> 59)
            std::vector<char,TInlineBufferAllocator<char,1024ul>>::__throw_length_error[abi:fe180100]();
          v85 = v52 - (_BYTE *)*a2;
          if (v85 >> 4 > v84)
            v84 = v85 >> 4;
          if ((unint64_t)v85 >= 0x7FFFFFFFFFFFFFE0)
            v86 = 0x7FFFFFFFFFFFFFFLL;
          else
            v86 = v84;
          v64 = (char *)std::__allocate_at_least[abi:fe180100]<std::allocator<TVariationAxis>>((uint64_t)(a2 + 2), v86);
          v66 = &v64[32 * v83];
          *(_DWORD *)v66 = 2003265652;
          *((_WORD *)v66 + 2) = 0;
          *((_WORD *)v66 + 3) = v24;
          *((double *)v66 + 1) = v49;
          *((double *)v66 + 2) = v53;
          *((_QWORD *)v66 + 3) = 0x3FF0000000000000;
          v87 = (char *)*a2;
          v67 = (char *)a2[1];
          v69 = v66;
          if (v67 != *a2)
          {
            do
            {
              v88 = *((_OWORD *)v67 - 1);
              *((_OWORD *)v69 - 2) = *((_OWORD *)v67 - 2);
              *((_OWORD *)v69 - 1) = v88;
              v69 -= 32;
              v67 -= 32;
            }
            while (v67 != v87);
            goto LABEL_113;
          }
          goto LABEL_114;
        }
        break;
      case 0xB:
        v42 = *(_QWORD *)(v25 + 7);
        v43 = *(_QWORD *)(v25 + 10);
        if (v42 == 0x536C61636974704FLL && v43 == 0x657A69536C616369)
          goto LABEL_61;
        break;
      case 0xC:
        v55 = *(_QWORD *)(v25 + 7);
        v56 = *(_DWORD *)(v25 + 15);
        if (v55 == 0x206C61636974704FLL && v56 == 1702521171)
        {
LABEL_61:
          v36 = (double)v28;
          v37 = (double)v29;
          v38 = (double)v30;
          v39 = (char *)a2[1];
          v58 = (char *)a2[2];
          if (v39 >= v58)
          {
            v60 = (v39 - (_BYTE *)*a2) >> 5;
            v61 = v60 + 1;
            if ((unint64_t)(v60 + 1) >> 59)
              std::vector<char,TInlineBufferAllocator<char,1024ul>>::__throw_length_error[abi:fe180100]();
            v62 = v58 - (_BYTE *)*a2;
            if (v62 >> 4 > v61)
              v61 = v62 >> 4;
            if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFE0)
              v63 = 0x7FFFFFFFFFFFFFFLL;
            else
              v63 = v61;
            v64 = (char *)std::__allocate_at_least[abi:fe180100]<std::allocator<TVariationAxis>>((uint64_t)(a2 + 2), v63);
            v66 = &v64[32 * v60];
            *(_DWORD *)v66 = 1869640570;
            *((_WORD *)v66 + 2) = 0;
            *((_WORD *)v66 + 3) = v24;
            *((double *)v66 + 1) = v36;
            *((double *)v66 + 2) = v37;
            *((double *)v66 + 3) = v38;
            v68 = (char *)*a2;
            v67 = (char *)a2[1];
            v69 = v66;
            if (v67 != *a2)
            {
              do
              {
                v70 = *((_OWORD *)v67 - 1);
                *((_OWORD *)v69 - 2) = *((_OWORD *)v67 - 2);
                *((_OWORD *)v69 - 1) = v70;
                v69 -= 32;
                v67 -= 32;
              }
              while (v67 != v68);
LABEL_113:
              v67 = (char *)*a2;
            }
LABEL_114:
            v59 = v66 + 32;
            *a2 = v69;
            a2[1] = v66 + 32;
            a2[2] = &v64[32 * v65];
            if (v67)
              operator delete(v67);
          }
          else
          {
            v41 = 1869640570;
LABEL_63:
            *(_DWORD *)v39 = v41;
            *((_WORD *)v39 + 2) = 0;
            *((_WORD *)v39 + 3) = v24;
            *((double *)v39 + 1) = v36;
            *((double *)v39 + 2) = v37;
            v59 = v39 + 32;
            *((double *)v39 + 3) = v38;
          }
LABEL_116:
          a2[1] = v59;
          ++v24;
        }
        break;
      default:
        break;
    }
    ++v22;
  }
  while (v22 != v23);
  *(_QWORD *)&v108 = &off_1E6176770;
  TDataReference::DucRefCount((TDataReference *)&v108);
  return 1;
}

void sub_1B0988C38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  TDataReference::~TDataReference((TDataReference *)&a9);
  _Unwind_Resume(a1);
}

void TLWFNType1Font::GetVariationInstances(_WORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void **a4@<X8>)
{
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  signed int v11;
  unsigned int v12;
  __int128 v13;
  uint64_t v14;
  unsigned int v15;
  unsigned __int8 *v16;
  signed int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unsigned __int16 v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  int v28;
  int v29;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  unint64_t v37;
  double *v38;
  double *v39;
  double *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  double *v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char *v55;
  unint64_t *v56;
  char *v57;
  char *v58;
  unint64_t v59;
  unint64_t **v60;
  uint64_t v61;
  uint64_t v62;
  void **v63;
  _WORD __b[16];
  __int128 v65;
  __int128 v66;
  __int16 v67[8];
  __int128 v68;
  uint64_t v69;

  v69 = *MEMORY[0x1E0C80C00];
  if (!a1[74])
    goto LABEL_12;
  *(_QWORD *)&v7 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v65 = v7;
  v66 = v7;
  (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)a1 + 480))(&v65);
  if (!*((_QWORD *)&v65 + 1)
    || (v8 = *(_QWORD *)(*((_QWORD *)&v65 + 1) + 8)) == 0
    || (v9 = v8 + v66, a2 != (__int16)(bswap32(*(unsigned __int16 *)(v8 + v66 + 4)) >> 16))
    || (v10 = (int)a2 + 3, (int)v10 > (int)bswap32(*(unsigned __int16 *)(v9 + 12)) >> 16)
    || (v11 = bswap32(*(_DWORD *)(v9 + (((a2 << 32) + 0x200000000) >> 30) + 14)),
        v12 = *(unsigned __int16 *)(v9 + v11),
        !*(_WORD *)(v9 + v11)))
  {
    *(_QWORD *)&v65 = &off_1E6176770;
    TDataReference::DucRefCount((TDataReference *)&v65);
LABEL_12:
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    return;
  }
  *(_QWORD *)&v13 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v13 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)v67 = v13;
  v68 = v13;
  v14 = v9 + 4 * (int)v10;
  v63 = a4;
  if (*(_WORD *)(v9 + 10))
  {
    v15 = __rev16(*(unsigned __int16 *)(v9 + 10));
    v16 = (unsigned __int8 *)(v9 + (int)bswap32(*(_DWORD *)(v9 + 4 * v10 + 14)));
    do
    {
      --v15;
      v16 += *v16 + (((*v16 + (_BYTE)v16 + 1) ^ v9) & 1) + 1;
    }
    while ((_WORD)v15);
  }
  else
  {
    v17 = bswap32(*(_DWORD *)(v14 + 14));
    v18 = *(unsigned __int8 *)(v9 + v17) + v9 + v17 + 1;
    v16 = (unsigned __int8 *)(v18 + ((v18 ^ v9) & 1));
  }
  LocalGetMMFondNameCoords(v16 + 1, (__int16)a2, v67);
  memset_pattern16(__b, &unk_1B0A3D5D0, 0x20uLL);
  if (a2)
  {
    v19 = 0;
    v20 = 0;
    v21 = 256;
    do
    {
      v22 = 0;
      v23 = v9 + (int)bswap32(*(_DWORD *)(v9 + (v19 >> 30) + 14));
      if ((unsigned __int16)v67[v20] <= 1u)
        v24 = 1;
      else
        v24 = v67[v20];
      switch(*(_BYTE *)(v23 + 6))
      {
        case 5:
          if (*(_DWORD *)(v23 + 7) == 1952737623 && *(_BYTE *)(v23 + 11) == 104)
            goto LABEL_39;
          if (*(_DWORD *)(v23 + 7) == 1769104723 && *(_BYTE *)(v23 + 11) == 102)
            goto LABEL_39;
          v22 = *(_DWORD *)(v23 + 7) == 1819898963 && *(_BYTE *)(v23 + 11) == 101;
          break;
        case 6:
          v28 = *(_DWORD *)(v23 + 7);
          v29 = *(unsigned __int16 *)(v23 + 11);
          if (v28 != 1734960471 || v29 != 29800)
            goto LABEL_45;
LABEL_39:
          if (v20 >= 0x10)
            goto LABEL_97;
          __b[v20] = v24;
LABEL_51:
          v22 = 1;
          break;
        case 0xB:
          if (*(_QWORD *)(v23 + 7) != 0x536C61636974704FLL || *(_QWORD *)(v23 + 10) != 0x657A69536C616369)
            goto LABEL_45;
          goto LABEL_51;
        case 0xC:
          if (*(_QWORD *)(v23 + 7) == 0x206C61636974704FLL && *(_DWORD *)(v23 + 15) == 1702521171)
            goto LABEL_51;
LABEL_45:
          v22 = 0;
          break;
        default:
          break;
      }
      v21 += v22;
      ++v20;
      v19 += 0x100000000;
    }
    while (a2 != v20);
  }
  else
  {
    v21 = 256;
  }
  v63[2] = 0;
  v33 = __rev16(v12);
  *v63 = 0;
  v63[1] = 0;
  std::vector<TVariationInstance>::reserve(v63, (__int16)v33);
  std::vector<double>::reserve((void **)a3, (__int16)v33 * a2);
  v34 = v9 + (int)bswap32(*(_DWORD *)(v14 + 14));
  v61 = a2 << 48;
  while (1)
  {
    v62 = *(unsigned __int8 *)v34 + v34 + 1 + (((*(_BYTE *)v34 + v34 + 1) ^ v9) & 1);
    LocalGetMMFondNameCoords((unsigned __int8 *)(v62 + 1), (__int16)a2, v67);
    if (a2)
      break;
LABEL_76:
    v49 = (unint64_t *)v63[1];
    v48 = (unint64_t)v63[2];
    if ((unint64_t)v49 >= v48)
    {
      v51 = ((char *)v49 - (_BYTE *)*v63) >> 3;
      if ((unint64_t)(v51 + 1) >> 61)
        std::vector<char,TInlineBufferAllocator<char,1024ul>>::__throw_length_error[abi:fe180100]();
      v52 = v48 - (_QWORD)*v63;
      v53 = v52 >> 2;
      if (v52 >> 2 <= (unint64_t)(v51 + 1))
        v53 = v51 + 1;
      if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFF8)
        v54 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v54 = v53;
      if (v54)
        v55 = (char *)std::__allocate_at_least[abi:fe180100]<std::allocator<TVariationInstance>>((uint64_t)(v63 + 2), v54);
      else
        v55 = 0;
      v56 = (unint64_t *)&v55[8 * v51];
      *v56 = v61 | ((unint64_t)v21 << 16);
      v50 = v56 + 1;
      v58 = (char *)*v63;
      v57 = (char *)v63[1];
      if (v57 == *v63)
      {
        v60 = (unint64_t **)v63;
      }
      else
      {
        do
        {
          v59 = *((_QWORD *)v57 - 1);
          v57 -= 8;
          *--v56 = v59;
        }
        while (v57 != v58);
        v60 = (unint64_t **)v63;
        v57 = (char *)*v63;
      }
      *v60 = v56;
      v60[1] = v50;
      v60[2] = (unint64_t *)&v55[8 * v54];
      if (v57)
        operator delete(v57);
    }
    else
    {
      *v49 = v61 | ((unint64_t)v21 << 16);
      v50 = v49 + 1;
    }
    --v33;
    v34 = v62;
    v63[1] = v50;
    ++v21;
    if (!(_WORD)v33)
    {
      *(_QWORD *)&v65 = &off_1E6176770;
      TDataReference::DucRefCount((TDataReference *)&v65);
      return;
    }
  }
  v35 = 0;
  while (v35 != 16)
  {
    v36 = (double)v67[v35] / (double)(__int16)__b[v35];
    v38 = *(double **)(a3 + 8);
    v37 = *(_QWORD *)(a3 + 16);
    if ((unint64_t)v38 >= v37)
    {
      v40 = *(double **)a3;
      v41 = ((uint64_t)v38 - *(_QWORD *)a3) >> 3;
      v42 = v41 + 1;
      if ((unint64_t)(v41 + 1) >> 61)
        std::vector<char,TInlineBufferAllocator<char,1024ul>>::__throw_length_error[abi:fe180100]();
      v43 = v37 - (_QWORD)v40;
      if (v43 >> 2 > v42)
        v42 = v43 >> 2;
      if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFF8)
        v44 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v44 = v42;
      if (v44)
      {
        v45 = (char *)std::__allocate_at_least[abi:fe180100]<std::allocator<TVariationInstance>>(a3 + 16, v44);
        v40 = *(double **)a3;
        v38 = *(double **)(a3 + 8);
      }
      else
      {
        v45 = 0;
      }
      v46 = (double *)&v45[8 * v41];
      *v46 = v36;
      v39 = v46 + 1;
      while (v38 != v40)
      {
        v47 = *((_QWORD *)v38-- - 1);
        *((_QWORD *)v46-- - 1) = v47;
      }
      *(_QWORD *)a3 = v46;
      *(_QWORD *)(a3 + 8) = v39;
      *(_QWORD *)(a3 + 16) = &v45[8 * v44];
      if (v40)
        operator delete(v40);
    }
    else
    {
      *v38 = v36;
      v39 = v38 + 1;
    }
    *(_QWORD *)(a3 + 8) = v39;
    if (++v35 == a2)
      goto LABEL_76;
  }
LABEL_97:
  __break(1u);
}

void sub_1B0989244(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void std::vector<TVariationInstance>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 3)
  {
    if (a2 >> 61)
      std::vector<char,TInlineBufferAllocator<char,1024ul>>::__throw_length_error[abi:fe180100]();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::__allocate_at_least[abi:fe180100]<std::allocator<TVariationInstance>>(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    v9 = &v6[8 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *((_QWORD *)v10 - 1);
        v10 -= 8;
        *((_QWORD *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

void std::vector<double>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 3)
  {
    if (a2 >> 61)
      std::vector<char,TInlineBufferAllocator<char,1024ul>>::__throw_length_error[abi:fe180100]();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::__allocate_at_least[abi:fe180100]<std::allocator<TVariationInstance>>(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    v9 = &v6[8 * v8];
    v10 = (char *)*a1;
    v11 = (char *)a1[1];
    v12 = v7;
    if (v11 != *a1)
    {
      v12 = v7;
      do
      {
        v13 = *((_QWORD *)v11 - 1);
        v11 -= 8;
        *((_QWORD *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

void TLWFNType1Font::GetNames(TLWFNType1Font *this@<X0>, void *a2@<X8>)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  unsigned __int8 *v16;
  int v19;
  int v20;
  BOOL v21;
  int v22;
  int v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  int v29;
  int v31;
  unsigned __int8 *v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;

  memset(a2, 170, 24);
  TType1Font::GetNames((uint64_t)this, (uint64_t *)a2);
  if (*((_WORD *)this + 74))
  {
    *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v34 = v4;
    v35 = v4;
    (*(void (**)(__int128 *__return_ptr, TLWFNType1Font *))(*(_QWORD *)this + 480))(&v34, this);
    if (*((_QWORD *)&v34 + 1))
    {
      v5 = *(_QWORD *)(*((_QWORD *)&v34 + 1) + 8);
      if (v5)
      {
        v6 = v5 + v35;
        v7 = bswap32(*(unsigned __int16 *)(v5 + v35 + 4));
        v8 = HIWORD(v7);
        v9 = v7 >> 16;
        v33 = (__int16)v8 + 3;
        if ((int)v33 <= (int)bswap32(*(unsigned __int16 *)(v5 + v35 + 12)) >> 16)
          v10 = bswap32(*(unsigned __int16 *)(v6 + (int)bswap32(*(_DWORD *)(v6 + 4 * (__int16)v8 + 22)))) >> 16;
        else
          LOWORD(v10) = 0;
        if (v9 < 1)
        {
          v13 = 256;
        }
        else
        {
          v11 = (unsigned __int16)v9;
          v12 = (unsigned int *)(v35 + v5 + 14);
          v13 = 256;
          do
          {
            v14 = *v12++;
            v15 = v6 + (int)bswap32(v14);
            v16 = (unsigned __int8 *)(v15 + 6);
            switch(*(_BYTE *)(v15 + 6))
            {
              case 5:
                if (*(_DWORD *)(v15 + 7) == 1952737623 && *(_BYTE *)(v15 + 11) == 104)
                  goto LABEL_37;
                if (*(_DWORD *)(v15 + 7) == 1769104723 && *(_BYTE *)(v15 + 11) == 102)
                  goto LABEL_37;
                v19 = *(_DWORD *)(v15 + 7);
                v20 = *(unsigned __int8 *)(v15 + 11);
                v21 = v19 == 1819898963;
                v22 = 101;
                goto LABEL_20;
              case 6:
                v23 = *(_DWORD *)(v15 + 7);
                v20 = *(unsigned __int16 *)(v15 + 11);
                v21 = v23 == 1734960471;
                v22 = 29800;
LABEL_20:
                if (!v21 || v20 != v22)
                  break;
                goto LABEL_37;
              case 0xB:
                v25 = *(_QWORD *)(v15 + 7);
                v26 = *(_QWORD *)(v15 + 10);
                if (v25 != 0x536C61636974704FLL || v26 != 0x657A69536C616369)
                  break;
                goto LABEL_37;
              case 0xC:
                v28 = *(_QWORD *)(v15 + 7);
                v29 = *(_DWORD *)(v15 + 15);
                if (v28 != 0x206C61636974704FLL || v29 != 1702521171)
                  break;
LABEL_37:
                TType1Font::AddName((uint64_t *)a2, v16, v13++);
                break;
              default:
                break;
            }
            --v11;
          }
          while (v11);
        }
        if ((__int16)v10 > 0)
        {
          LOWORD(v31) = 0;
          v32 = (unsigned __int8 *)(v6 + (int)bswap32(*(_DWORD *)(v6 + 4 * v33 + 14)));
          do
          {
            v32 += *v32 + (((*v32 + (_BYTE)v32 + 1) ^ v6) & 1) + 1;
            TType1Font::AddName((uint64_t *)a2, v32, v13++);
            v31 = (__int16)(v31 + 1);
          }
          while (v31 < (__int16)v10);
        }
      }
    }
    *(_QWORD *)&v34 = &off_1E6176770;
    TDataReference::DucRefCount((TDataReference *)&v34);
  }
}

void sub_1B0989678(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::vector<TFontNameString>::__destroy_vector::operator()[abi:fe180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t TParsingContext::IsCFF2(TParsingContext *this)
{
  return 0;
}

uint64_t TFont::GetSFNTFont(TFont *this)
{
  return 0;
}

void TFont::FindFontMetaData(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t TFont::GetRefCon(TFont *this)
{
  return 0;
}

const char **std::__equal_range[abi:fe180100]<std::_ClassicAlgPolicy,TSortedStringTable::LessThan &,std::pair<char const*,unsigned int> const*,std::pair<char const*,unsigned int> const*,char const*,std::__identity>(const char **a1, const char **a2, const char **a3)
{
  const char **v3;
  const char **v5;
  unint64_t v6;
  const char *v7;
  unint64_t v8;
  const char **v9;
  const char *v10;

  v3 = a2;
  if (a2 != a1)
  {
    v5 = a1;
    v6 = ((char *)a2 - (char *)a1) >> 4;
    v7 = *a3;
    while (1)
    {
      v8 = v6 >> 1;
      v9 = &v5[2 * (v6 >> 1)];
      v10 = *v9;
      if (strcmp(*v9, v7) < 0)
      {
        v5 = v9 + 2;
        v8 = v6 + ~v8;
      }
      else
      {
        if ((strcmp(v7, v10) & 0x80000000) == 0)
        {
          v5 = std::__lower_bound[abi:fe180100]<std::_ClassicAlgPolicy,std::pair<char const*,unsigned int> const*,std::pair<char const*,unsigned int> const*,char const*,std::__identity,TSortedStringTable::LessThan>(v5, &v5[2 * (v6 >> 1)], a3);
          std::__upper_bound[abi:fe180100]<std::_ClassicAlgPolicy,TSortedStringTable::LessThan &,std::pair<char const*,unsigned int> const*,std::pair<char const*,unsigned int> const*,char const*,std::__identity &>(v9 + 2, v3, a3);
          return v5;
        }
        v3 = &v5[2 * (v6 >> 1)];
      }
      v6 = v8;
      if (!v8)
        return v5;
    }
  }
  return a2;
}

const char **std::__lower_bound[abi:fe180100]<std::_ClassicAlgPolicy,std::pair<char const*,unsigned int> const*,std::pair<char const*,unsigned int> const*,char const*,std::__identity,TSortedStringTable::LessThan>(const char **a1, const char **a2, const char **a3)
{
  const char **v3;
  unint64_t v4;
  const char *v5;
  const char **v6;
  const char **v7;
  const char *v8;

  v3 = a2;
  if (a2 != a1)
  {
    v4 = ((char *)a2 - (char *)a1) >> 4;
    v5 = *a3;
    v3 = a1;
    do
    {
      v6 = &v3[2 * (v4 >> 1)];
      v8 = *v6;
      v7 = v6 + 2;
      if (strcmp(v8, v5) >= 0)
      {
        v4 >>= 1;
      }
      else
      {
        v3 = v7;
        v4 += ~(v4 >> 1);
      }
    }
    while (v4);
  }
  return v3;
}

const char **std::__upper_bound[abi:fe180100]<std::_ClassicAlgPolicy,TSortedStringTable::LessThan &,std::pair<char const*,unsigned int> const*,std::pair<char const*,unsigned int> const*,char const*,std::__identity &>(const char **a1, const char **a2, const char **a3)
{
  const char **v3;
  unint64_t v4;
  const char *v5;
  const char **v6;
  const char **v7;
  const char *v8;

  v3 = a2;
  if (a2 != a1)
  {
    v4 = ((char *)a2 - (char *)a1) >> 4;
    v5 = *a3;
    v3 = a1;
    do
    {
      v6 = &v3[2 * (v4 >> 1)];
      v8 = *v6;
      v7 = v6 + 2;
      if (strcmp(v5, v8) < 0)
      {
        v4 >>= 1;
      }
      else
      {
        v3 = v7;
        v4 += ~(v4 >> 1);
      }
    }
    while (v4);
  }
  return v3;
}

void *std::__allocate_at_least[abi:fe180100]<std::allocator<TVariationAxis>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 59)
    std::__throw_bad_array_new_length[abi:fe180100]();
  return operator new(32 * a2);
}

void *std::__allocate_at_least[abi:fe180100]<std::allocator<TVariationInstance>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61)
    std::__throw_bad_array_new_length[abi:fe180100]();
  return operator new(8 * a2);
}

void TFontNameString::TFontNameString(TFontNameString *this, const TFontNameString *a2)
{
  uint64_t v4;
  CFTypeRef v5;
  CFTypeRef v6;

  v4 = TStringRef::TStringRef((uint64_t)this, (uint64_t)a2);
  *(_BYTE *)(v4 + 64) = *((_BYTE *)a2 + 64);
  *(_QWORD *)v4 = &off_1E61768B8;
  *(_QWORD *)(v4 + 66) = *(_QWORD *)((char *)a2 + 66);
  v5 = (CFTypeRef)*((_QWORD *)a2 + 10);
  if (v5)
    v5 = CFRetain(v5);
  *((_QWORD *)this + 10) = v5;
  v6 = (CFTypeRef)*((_QWORD *)a2 + 11);
  if (v6)
    v6 = CFRetain(v6);
  *((_QWORD *)this + 11) = v6;
}

void sub_1B098996C(_Unwind_Exception *a1)
{
  void **v1;

  TStringRef::~TStringRef(v1);
  _Unwind_Resume(a1);
}

void std::vector<TFontNameString>::__destroy_vector::operator()[abi:fe180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  char *v7;
  void (**v8)(char *);
  BOOL v9;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = v4 - 96;
      v7 = v4 - 96;
      do
      {
        v8 = *(void (***)(char *))v7;
        v7 -= 96;
        (*v8)(v6);
        v9 = v6 == v2;
        v6 = v7;
      }
      while (!v9);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void ResolveCacheStrike(const TStrikeDescription *a1@<X0>, os_unfair_lock_s **a2@<X8>)
{
  os_unfair_lock_s *v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  os_unfair_lock_s *v8;
  os_unfair_lock_s *v9;
  int v10;
  int *v11;
  int v12;
  int v13;
  int *v14;
  int v15;
  BOOL v16;
  _DWORD *v17;
  _DWORD *v18;
  char *v19;
  uint64_t v20;
  int v21;
  _DWORD *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _WORD *v29;
  _WORD *v30;
  uint64_t v31;
  int v32;
  uint64_t *v33;
  int v34;
  int v35;
  int *v36;
  int v37;
  char *v38;
  _DWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  __int128 *v42;
  uint64_t v43;
  int v44;
  char *v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  _OWORD *v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  __int128 v57;
  __int128 v58;

  os_unfair_lock_lock((os_unfair_lock_t)&ResolveCacheStrike(TStrikeDescription const&)::lock);
  *a2 = (os_unfair_lock_s *)0xAAAAAAAAAAAAAAAALL;
  a2[1] = (os_unfair_lock_s *)0xAAAAAAAAAAAAAAAALL;
  v4 = (os_unfair_lock_s *)*((_QWORD *)a1 + 1);
  v5 = *((_QWORD *)a1 + 2);
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  *a2 = v4;
  a2[1] = (os_unfair_lock_s *)v5;
  if (v4)
  {
    v8 = v4 + 2;
    os_unfair_lock_lock(v4 + 2);
    v9 = *a2;
    v10 = *((_DWORD *)a1 + 6);
    if (v10)
    {
      v11 = (int *)*((_QWORD *)a1 + 4);
      v12 = -2 * v10;
      v13 = *((_DWORD *)a1 + 6);
      v14 = v11;
      do
      {
        v15 = *v14++;
        v13 ^= v15;
        v16 = __CFADD__(v12++, 1);
      }
      while (!v16);
      v17 = *(_DWORD **)&v9[6]._os_unfair_lock_opaque;
      if (*v17 == v13 && v17[4] == v10)
      {
        v18 = v17 + 5;
        while (*v18 == *v11 && v18[1] == v11[1])
        {
          v18 += 2;
          v11 += 2;
          if (!--v10)
            goto LABEL_15;
        }
      }
    }
    else
    {
LABEL_15:
      v19 = (char *)*((_QWORD *)a1 + 5);
      if (!v19)
        goto LABEL_33;
      v20 = 0;
      v21 = 0;
      do
      {
        v21 ^= *(_DWORD *)&v19[v20];
        v20 += 4;
      }
      while ((_DWORD)v20 != 60);
      v22 = *(_DWORD **)&v9[8]._os_unfair_lock_opaque;
      if (*v22 == v21 && !memcmp(v22 + 4, v19, 0x3CuLL))
      {
LABEL_33:
        os_unfair_lock_unlock(v8);
        goto LABEL_58;
      }
    }
    v58 = 0uLL;
    std::shared_ptr<cacheStrike>::operator=[abi:fe180100]((uint64_t)a2, &v58);
    v23 = (std::__shared_weak_count *)*((_QWORD *)&v58 + 1);
    if (*((_QWORD *)&v58 + 1))
    {
      v24 = (unint64_t *)(*((_QWORD *)&v58 + 1) + 8);
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    os_unfair_lock_unlock(v8);
  }
  v26 = operator new(0x28uLL, MEMORY[0x1E0DE4E10]);
  if (v26)
  {
    v27 = v26;
    *v26 = &off_1E61B2D10;
    *((_DWORD *)v26 + 2) = 0;
    v26[2] = 0;
    v28 = v26 + 2;
    v26[3] = 0;
    v26[4] = 0;
    v29 = operator new(0x18uLL, MEMORY[0x1E0DE4E10]);
    if (v29)
    {
      v30 = v29;
      v31 = *((_QWORD *)a1 + 8);
      v30[8] = 0;
      *(_DWORD *)v30 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v31 + 384))(v31);
      *((_QWORD *)v30 + 1) = 0;
      *v28 = v30;
      v32 = *((_DWORD *)a1 + 6);
      v33 = (uint64_t *)*((_QWORD *)a1 + 4);
      if (v32)
      {
        v34 = -2 * v32;
        v35 = *((_DWORD *)a1 + 6);
        v36 = (int *)*((_QWORD *)a1 + 4);
        do
        {
          v37 = *v36++;
          v35 ^= v37;
          v16 = __CFADD__(v34++, 1);
        }
        while (!v16);
      }
      else
      {
        v35 = 0;
      }
      v38 = (char *)malloc_type_calloc(1uLL, (8 * v32 + 36) + 8, 0x690B61C8uLL);
      if (v38)
      {
        *(_QWORD *)v38 = (8 * v32 + 36) + 8;
        v39 = v38 + 8;
        *((_DWORD *)v38 + 6) = v32;
        if (v32)
        {
          v40 = v38 + 28;
          do
          {
            v41 = *v33++;
            *v40++ = v41;
            --v32;
          }
          while (v32);
        }
        *v39 = v35;
        v27[3] = v39;
        v42 = (__int128 *)*((_QWORD *)a1 + 5);
        if (!v42)
          goto LABEL_47;
        v43 = 0;
        v44 = 0;
        do
        {
          v44 ^= *(_DWORD *)((char *)v42 + v43);
          v43 += 4;
        }
        while ((_DWORD)v43 != 60);
        v45 = (char *)malloc_type_calloc(1uLL, 0x58uLL, 0x690B61C8uLL);
        if (v45)
        {
          *(_QWORD *)v45 = 88;
          v46 = *v42;
          v47 = v42[1];
          v48 = v42[2];
          v49 = *(__int128 *)((char *)v42 + 44);
          *((_DWORD *)v45 + 2) = v44;
          v50 = v45 + 8;
          *(_OWORD *)((char *)v50 + 60) = v49;
          v50[2] = v47;
          v50[3] = v48;
          v50[1] = v46;
          v27[4] = v50;
          goto LABEL_48;
        }
        v28 = v27 + 4;
      }
      else
      {
        v28 = v27 + 3;
      }
    }
    *v28 = 0;
LABEL_47:
    puts("ResolveCacheStrike: AssureStrikeNodes() failed!");
LABEL_48:
    MScalerCache::SetCacheData(a1, (MCacheData *)v27, (uint64_t *)&v57);
    v58 = v57;
    v57 = 0uLL;
    std::shared_ptr<cacheStrike>::operator=[abi:fe180100]((uint64_t)a2, &v58);
    v51 = (std::__shared_weak_count *)*((_QWORD *)&v58 + 1);
    if (*((_QWORD *)&v58 + 1))
    {
      v52 = (unint64_t *)(*((_QWORD *)&v58 + 1) + 8);
      do
        v53 = __ldaxr(v52);
      while (__stlxr(v53 - 1, v52));
      if (!v53)
      {
        ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
        std::__shared_weak_count::__release_weak(v51);
      }
    }
    v54 = (std::__shared_weak_count *)*((_QWORD *)&v57 + 1);
    if (*((_QWORD *)&v57 + 1))
    {
      v55 = (unint64_t *)(*((_QWORD *)&v57 + 1) + 8);
      do
        v56 = __ldaxr(v55);
      while (__stlxr(v56 - 1, v55));
      if (!v56)
      {
        ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
        std::__shared_weak_count::__release_weak(v54);
      }
    }
  }
LABEL_58:
  os_unfair_lock_unlock((os_unfair_lock_t)&ResolveCacheStrike(TStrikeDescription const&)::lock);
}

void sub_1B0989DC0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  MEMORY[0x1B5E0CD2C](v2, MEMORY[0x1E0DE4E10]);
  std::shared_ptr<cacheStrike>::~shared_ptr[abi:fe180100](v1);
  os_unfair_lock_unlock((os_unfair_lock_t)&ResolveCacheStrike(TStrikeDescription const&)::lock);
  _Unwind_Resume(a1);
}

uint64_t std::shared_ptr<cacheStrike>::operator=[abi:fe180100](uint64_t a1, __int128 *a2)
{
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v3 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v4 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = v3;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return a1;
}

void AssureScalerFontBlock(_QWORD *a1, memoryContext *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *ScalerFontBlock;

  v3 = *(_QWORD *)(a3 + 8);
  if (v3)
  {
    a1[1] = v3;
    v4 = v3 + *(unsigned int *)(v3 + 4);
    v5 = v3 + *(unsigned int *)(v3 + 8);
    a1[6] = v4;
    a1[7] = v5;
  }
  else
  {
    ScalerFontBlock = CreateScalerFontBlock(a1, a2);
    *(_QWORD *)(a3 + 8) = ScalerFontBlock;
    ScalerDetachBlock(a2, ScalerFontBlock);
  }
}

void cacheStrike::~cacheStrike(cacheStrike *this)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;

  *(_QWORD *)this = &off_1E61B2D10;
  v2 = *((_QWORD *)this + 2);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
      free((void *)(v3 - 8));
    MEMORY[0x1B5E0CD38](v2, 0x1080C40587D25DELL);
  }
  v4 = (_QWORD *)*((_QWORD *)this + 4);
  if (v4)
    DisposeBlockCacheNode(v4);
  v5 = (_QWORD *)*((_QWORD *)this + 3);
  if (v5)
    DisposeBlockCacheNode(v5);
}

{
  cacheStrike::~cacheStrike(this);
  JUMPOUT(0x1B5E0CD38);
}

void DisposeBlockCacheNode(_QWORD *a1)
{
  uint64_t v2;

  CleanUpTransformBlock(a1);
  v2 = a1[1];
  if (v2)
    free((void *)(v2 - 8));
  a1[1] = 0;
  free(a1 - 1);
}

uint64_t AssureStrikeBlocks(_QWORD *a1, memoryContext *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  _QWORD *ScalerVariationBlock;
  uint64_t v10;
  uint64_t v11;
  _QWORD *ScalerTransformBlock;
  _WORD *exception;
  __int16 v15;

  if (!a3)
  {
    exception = __cxa_allocate_exception(2uLL);
    v15 = 1;
LABEL_14:
    *exception = v15;
    __cxa_throw(exception, MEMORY[0x1E0DE4F10], 0);
  }
  v4 = a3[2];
  if (!v4 || !a3[3] || !a3[4])
  {
    exception = __cxa_allocate_exception(2uLL);
    v15 = 20;
    goto LABEL_14;
  }
  AssureScalerFontBlock(a1, a2, v4);
  v7 = a3[3];
  v8 = *(_QWORD *)(v7 + 8);
  if (v8)
  {
    a1[2] = v8;
    *(_QWORD *)(v8 + 16) = v8 + *(unsigned int *)(v8 + 8);
    *(_QWORD *)(v8 + 32) = v8 + *(unsigned int *)(v8 + 24);
    *(_QWORD *)(v8 + 48) = v8 + *(unsigned int *)(v8 + 40);
  }
  else
  {
    ScalerVariationBlock = CreateScalerVariationBlock((uint64_t)a1, a2, *(_DWORD *)(v7 + 16), (uint64_t *)(v7 + 20));
    *(_QWORD *)(a3[3] + 8) = ScalerVariationBlock;
    ScalerDetachBlock(a2, ScalerVariationBlock);
  }
  v10 = a3[4];
  v11 = *(_QWORD *)(v10 + 8);
  if (v11)
  {
    a1[3] = v11;
    *(_QWORD *)(v11 + 16) = v11 + *(unsigned int *)(v11 + 8);
    *(_QWORD *)(v11 + 32) = v11 + *(unsigned int *)(v11 + 24);
    *(_QWORD *)(v11 + 48) = v11 + *(unsigned int *)(v11 + 40);
    *(_QWORD *)(v11 + 64) = v11 + *(unsigned int *)(v11 + 56);
    *(_QWORD *)(v11 + 80) = v11 + *(unsigned int *)(v11 + 72);
  }
  else
  {
    ScalerTransformBlock = CreateScalerTransformBlock(a1, a2, *(_DWORD *)(v10 + 16), *(_DWORD *)(v10 + 20), (__int128 *)(v10 + 24), (int *)(v10 + 60), (int *)(v10 + 68));
    *(_QWORD *)(a3[4] + 8) = ScalerTransformBlock;
    ScalerDetachBlock(a2, ScalerTransformBlock);
  }
  return 1;
}

uint64_t OFAErrors(int a1)
{
  __int16 v1;

  if (a1 == 1028)
  {
    return 14;
  }
  else
  {
    v1 = 0;
    if (a1 && a1 <= 20)
    {
      if ((a1 - 5) > 0xF)
        return 1;
      else
        return (__int16)word_1B0AC61E6[a1 - 5];
    }
  }
  return v1;
}

void AssureGlyphBlock(uint64_t a1, memoryContext *a2, int *a3)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  _QWORD *ScalerGlyphBlock;

  v6 = *(_QWORD *)a2;
  v7 = *(unsigned __int16 *)a3;
  if (!*(_BYTE *)(*(_QWORD *)(a1 + 24) + 490) || *(_BYTE *)(a1 + 66))
    v7 |= 0x80000000;
  v8 = *(_QWORD *)(v6 + 8);
  if (*(_DWORD *)v6 == v7)
  {
    if (v8)
    {
      *(_QWORD *)(a1 + 32) = v8;
      *(_QWORD *)(v8 + 8) = v8 + 136;
      SetupGlyphElementPointers(a1, v8, a3);
      return;
    }
  }
  else if (v8)
  {
    free((void *)(v8 - 8));
    *(_QWORD *)(v6 + 8) = 0;
  }
  ScalerGlyphBlock = CreateScalerGlyphBlock(a1, a2, a3);
  *(_QWORD *)(v6 + 8) = ScalerGlyphBlock;
  ScalerDetachBlock(a2, ScalerGlyphBlock);
}

void UnCacheCurrentGlyph(cacheCallContext *a1)
{
  uint64_t v2;

  CleanUpTransformBlock(a1);
  v2 = *((_QWORD *)a1 + 1);
  if (v2)
    free((void *)(v2 - 8));
  *((_QWORD *)a1 + 1) = 0;
  *(_DWORD *)a1 = 0;
}

_WORD *CreateFontCacheNode@<X0>(const TFont *a1@<X0>, uint64_t *a2@<X8>)
{
  _WORD *result;
  uint64_t v5;

  result = operator new(0x18uLL, MEMORY[0x1E0DE4E10]);
  v5 = (uint64_t)result;
  if (result)
  {
    result[8] = 0;
    result = (_WORD *)(*(uint64_t (**)(const TFont *))(*(_QWORD *)a1 + 384))(a1);
    *(_DWORD *)v5 = (_DWORD)result;
    *(_QWORD *)(v5 + 8) = 0;
  }
  *a2 = v5;
  return result;
}

void sub_1B098A27C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E0CD2C](v1, MEMORY[0x1E0DE4E10]);
  _Unwind_Resume(a1);
}

uint64_t woff2::Read255UShort(uint64_t *a1, unsigned int *a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  int v9;
  int v10;

  v2 = a1[1];
  v3 = a1[2];
  v4 = v3 + 1;
  if (v3 + 1 > v2)
    return 0;
  v6 = *a1;
  v7 = *(unsigned __int8 *)(*a1 + v3);
  a1[2] = v4;
  switch(v7)
  {
    case 0xFFu:
      if (v3 + 2 <= v2)
      {
        v9 = *(unsigned __int8 *)(v6 + v4);
        a1[2] = v3 + 2;
        v7 = v9 + 253;
        break;
      }
      return 0;
    case 0xFEu:
      if (v3 + 2 <= v2)
      {
        v10 = *(unsigned __int8 *)(v6 + v4);
        a1[2] = v3 + 2;
        v7 = v10 + 506;
        break;
      }
      return 0;
    case 0xFDu:
      v8 = v3 + 3;
      if (v8 <= v2)
      {
        v7 = bswap32(*(unsigned __int16 *)(v6 + v4)) >> 16;
        a1[2] = v8;
        break;
      }
      return 0;
  }
  *a2 = v7;
  return 1;
}

uint64_t woff2::ReadBase128(_QWORD *a1, int *a2)
{
  unint64_t v2;
  unsigned int v3;
  unint64_t v4;
  uint64_t v5;
  _BOOL4 v6;
  unint64_t v7;
  int v8;
  BOOL v9;
  BOOL v10;
  char v11;
  int v12;
  int v13;

  v2 = 0;
  v3 = 0;
  v4 = a1[1];
  v5 = a1[2];
  v6 = 1;
  while (1)
  {
    v7 = v5 + v2 + 1;
    if (v7 > v4
      || ((v8 = *(unsigned __int8 *)(*a1 + v5 + v2), a1[2] = v7, v8 == 128) ? (v9 = v2 == 0) : (v9 = 0),
          !v9 ? (v10 = v3 >> 25 == 0) : (v10 = 0),
          !v10))
    {
LABEL_13:
      v13 = 0;
      return v6 & v13;
    }
    v11 = v8;
    v12 = v8 & 0x7F | (v3 << 7);
    if ((v11 & 0x80) == 0)
      break;
    v6 = v2++ < 4;
    v3 = v12;
    if (v2 == 5)
      goto LABEL_13;
  }
  *a2 = v12;
  v13 = 1;
  return v6 & v13;
}

void std::vector<unsigned char>::__throw_length_error[abi:fe180100]()
{
  std::__throw_length_error[abi:fe180100]("vector");
}

int *ComputeDestBitmap(int *result, uint64_t a2, uint64_t a3)
{
  int v5;
  unsigned int v6;
  __int128 v7;
  int *v8;
  int v9;
  __int32 v10;
  __int32 v11;
  __int32 v12;
  int v13;
  int v14;
  int v15;
  __int32 v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  int32x2_t v22;
  int32x2_t v23;
  int32x2_t v24;
  int32x2_t v25;

  v5 = *(_DWORD *)(a2 + 16);
  if (v5 == *(_DWORD *)(a2 + 24))
  {
    v6 = 0;
    v7 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a2;
    *(_OWORD *)(a3 + 16) = v7;
  }
  else
  {
    v8 = result;
    v9 = M3x3Flags(result);
    v10 = *(_DWORD *)(a2 + 28) << 16;
    v25.i32[0] = v5 << 16;
    v25.i32[1] = v10;
    M3x3Mul(v8, v9, &v25, (const int *)1);
    v24 = vshl_n_s32(*(int32x2_t *)(a2 + 24), 0x10uLL);
    M3x3Mul(v8, v9, &v24, (const int *)1);
    v23 = vshl_n_s32(*(int32x2_t *)(a2 + 16), 0x10uLL);
    M3x3Mul(v8, v9, &v23, (const int *)1);
    v22 = vrev64_s32(vshl_n_s32(*(int32x2_t *)(a2 + 20), 0x10uLL));
    result = (int *)M3x3Mul(v8, v9, &v22, (const int *)1);
    v11 = v25.i32[0];
    v12 = v25.i32[1];
    if (v25.i32[1] >= v24.i32[1])
      v13 = v24.i32[1];
    else
      v13 = v25.i32[1];
    if (v25.i32[1] <= v24.i32[1])
      v12 = v24.i32[1];
    if (v25.i32[0] >= v24.i32[0])
      v14 = v24.i32[0];
    else
      v14 = v25.i32[0];
    if (v25.i32[0] <= v24.i32[0])
      v11 = v24.i32[0];
    if (v23.i32[0] < v14)
      v14 = v23.i32[0];
    if (v22.i32[0] < v14)
      v14 = v22.i32[0];
    if (v23.i32[1] < v13)
      v13 = v23.i32[1];
    if (v22.i32[1] < v13)
      v13 = v22.i32[1];
    if (v23.i32[0] > v11)
      v11 = v23.i32[0];
    if (v22.i32[0] <= v11)
      v15 = v11;
    else
      v15 = v22.i32[0];
    if (v23.i32[1] <= v12)
      v16 = v12;
    else
      v16 = v23.i32[1];
    if (v22.i32[1] <= v16)
      v17 = v16;
    else
      v17 = v22.i32[1];
    v18 = -((0x8000 - v14) >> 16);
    if (v14 >= 0)
      v18 = (v14 + 0x8000) >> 16;
    v19 = -((0x8000 - v15) >> 16);
    if (v15 >= 0)
      v19 = (v15 + 0x8000) >> 16;
    v20 = -((0x8000 - v13) >> 16);
    if (v13 >= 0)
      v20 = (v13 + 0x8000) >> 16;
    *(_DWORD *)(a3 + 16) = v18;
    *(_DWORD *)(a3 + 20) = v20;
    v21 = -((0x8000 - v17) >> 16);
    if (v17 >= 0)
      v21 = (v17 + 0x8000) >> 16;
    *(_DWORD *)(a3 + 24) = v19;
    *(_DWORD *)(a3 + 28) = v21;
    if (v19 == v18)
    {
      v19 = v18 + 1;
      *(_DWORD *)(a3 + 24) = v18 + 1;
    }
    if (v21 == v20)
      *(_DWORD *)(a3 + 28) = v20 + 1;
    v6 = ((int)(v19 - v18 + 31) >> 3) & 0xFFFFFFFC;
  }
  *(_DWORD *)(a3 + 32) = v6;
  return result;
}

uint64_t TransformScalerBitmap(int *a1, uint64_t *a2, uint64_t a3, int a4, int a5)
{
  uint64_t result;
  unint64_t v10;
  int v11;
  int v12;
  unint64_t v13;
  int v14;
  int v15;
  int v16;
  int v17;
  __int32 v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  unsigned int v24;
  _DWORD *v25;
  int v26;
  int v27;
  int32x2_t v28;
  int32x2_t v29;
  int64x2_t v30;
  int32x2_t v31;
  unsigned int v32;
  BOOL v33;
  unsigned int v34;
  int v35;
  double v36;
  unsigned int v37;
  unsigned int v38;
  int v39;
  int v40;
  _DWORD *v41;
  int v42;
  int v43;
  int v44;
  int v45;
  unsigned int v46;
  int v47;
  float64x2_t v48;
  uint64_t v49;
  float64x2_t v50;
  int v51;
  int v52;
  int v53;
  _DWORD *v54;
  int v55;
  uint64_t v57;
  uint64_t *v58;
  int v59;
  int32x2_t v60;
  int32x2_t v61;

  v61 = (int32x2_t)0xAAAAAAAAAAAAAAAALL;
  result = M3x3Flags(a1);
  v54 = *(_DWORD **)a3;
  v57 = *a2;
  v58 = a2;
  v11 = *(_DWORD *)(a3 + 28);
  v10 = *(unsigned int *)(a3 + 32);
  v12 = (_DWORD)v10 << 19;
  v13 = v10 >> 2;
  v14 = *((_DWORD *)a2 + 7);
  v59 = 8 * *((_DWORD *)a2 + 8);
  v15 = *((_DWORD *)a2 + 5);
  v16 = *((_DWORD *)a2 + 6) << 16;
  v17 = *((_DWORD *)a2 + 4) << 16;
  v18 = v14 << 16;
  v19 = v15 << 16;
  v20 = *(_DWORD *)(a3 + 16) << 16;
  v21 = v20 + ((_DWORD)v10 << 19);
  v22 = v11 - a4;
  v52 = v11 - a4 - a5;
  if ((_DWORD)result)
  {
    if (a5 >= 1)
    {
      v23 = result;
      v55 = v20 | 0x8000;
      v51 = v21 | 0x8000;
      v50 = (float64x2_t)vdupq_n_s64(0x3EF0000000000000uLL);
      v49 = v13;
      v24 = (v14 - v15) * v59;
      v48 = (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)v12 * 0.0000152587891), 0);
      do
      {
        v25 = v54;
        v53 = v22;
        v26 = (v22 << 16) - 0x8000;
        v60 = (int32x2_t)__PAIR64__(v26, v55);
        M3x3Mul(a1, v23, &v60, (const int *)1);
        v61 = (int32x2_t)__PAIR64__(v26, v51);
        result = M3x3Mul(a1, v23, &v61, (const int *)1);
        v27 = 0;
        v28 = v60;
        v29 = vsub_s32(v61, v60);
        v30.i64[0] = v29.i32[0];
        v30.i64[1] = v29.i32[1];
        v31 = vmovn_s64(vcvtq_n_s64_f64(vdivq_f64(vmulq_f64(vcvtq_f64_s64(v30), v50), v48), 0x10uLL));
        v54 += v49;
        do
        {
          *v25 = 0;
          v32 = 0x80000000;
          do
          {
            if (v28.i32[0] >= v17 && v28.i32[0] <= v16)
            {
              v33 = v28.i32[1] > v19 && v28.i32[1] <= v18;
              if (v33)
              {
                v34 = (*((_DWORD *)v58 + 7) - ((v28.i32[1] + 0xFFFF) >> 16)) * v59 + (v28.i32[0] >> 16);
                if (v34 >= v24)
                  v34 = v24 - 1;
                if (((bswap32(*(unsigned __int16 *)(v57 + 2 * (v34 >> 4))) >> 16 << (v34 & 0xF)) & 0x8000) != 0)
                  *v25 |= v32;
              }
            }
            if (v23 == 6)
            {
              v60.i32[0] = v55 + (++v27 << 16);
              v60.i32[1] = v26;
              result = M3x3Mul(a1, 6, &v60, (const int *)1);
              v28 = v60;
            }
            else
            {
              v28 = vadd_s32(v28, v31);
            }
            v33 = v32 > 1;
            v32 >>= 1;
          }
          while (v33);
          ++v25;
        }
        while (v25 != v54);
        v22 = v53 - 1;
      }
      while (v53 - 1 > v52);
    }
  }
  else if (a5 >= 1)
  {
    v35 = v20 | 0x8000;
    v36 = (double)v12 * 0.0000152587891;
    v37 = vcvtd_n_s64_f64((double)((v21 | 0x8000) - v35) * 0.0000152587891 / v36, 0x10uLL);
    v38 = vcvtd_n_s64_f64(0.0 / v36, 0x10uLL);
    v39 = 32 * v38;
    v40 = ((v11 << 16) - (a4 << 16)) | 0x7FFF;
    do
    {
      v41 = v54;
      v42 = (v22 << 16) - 0x8000;
      v54 += v13;
      v43 = v40;
      LODWORD(result) = v35;
      do
      {
        v44 = 0;
        v45 = 0;
        *v41 = 0;
        v46 = 0x80000000;
        v47 = result;
        do
        {
          if (v47 >= v17
            && v47 <= v16
            && v42 + v44 > v19
            && v42 + v44 <= v18
            && ((bswap32(*(unsigned __int16 *)(v57
                                             + 2
                                             * (((*((_DWORD *)v58 + 7) - ((v43 + v44) >> 16)) * v59
                                                             + (v47 >> 16)) >> 4))) >> 16 << (((*((_BYTE *)v58 + 28)
                                                                                              - ((v43 + v44) >> 16))
                                                                                             * v59
                                                                                             + BYTE2(v47)) & 0xF)) & 0x8000) != 0)
          {
            v45 |= v46;
            *v41 = v45;
          }
          v47 += v37;
          v44 += v38;
          v33 = v46 > 1;
          v46 >>= 1;
        }
        while (v33);
        result = result + 32 * v37;
        v42 += v39;
        ++v41;
        v43 += v39;
      }
      while (v41 != v54);
      --v22;
      v40 -= 0x10000;
    }
    while (v22 > v52);
  }
  return result;
}

unsigned int *MoveBitsSmall(unsigned int *result, const void *a2, int a3, unsigned int *a4, int a5)
{
  int v5;
  unsigned int *v7;
  unsigned int *v8;
  int v9;
  int v10;
  int v11;
  unsigned int *v12;
  int v13;
  int v14;
  _QWORD v15[2];
  uint64_t (*v16)(uint64_t, unsigned int *);
  void *v17;
  const void *v18;
  int v19;

  if (a5)
  {
    v5 = a5;
    v7 = (unsigned int *)(((unint64_t)result + (a3 >> 3)) & 0xFFFFFFFFFFFFFFFCLL);
    if (v7 < result)
      v7 = result;
    if (a3)
      v8 = v7;
    else
      v8 = result;
    if (a3)
      v9 = a3 + 8 * ((_DWORD)result - (_DWORD)v7);
    else
      v9 = 0;
    v15[0] = MEMORY[0x1E0C809B0];
    v15[1] = 0x40000000;
    v16 = ___Z13MoveBitsSmallPKvS0_iPvi_block_invoke;
    v17 = &__block_descriptor_tmp;
    v18 = a2;
    v19 = 0;
    v10 = -1 << v9;
    result = (unsigned int *)___Z13MoveBitsSmallPKvS0_iPvi_block_invoke((uint64_t)v15, v8);
    v11 = bswap32(*result) << v9;
    v12 = v8 + 1;
    if (v5 < 33)
    {
      if (v5 <= 0)
        return result;
      v14 = v5 - 32;
    }
    else
    {
      do
      {
        v13 = v11;
        result = (unsigned int *)v16((uint64_t)v15, v12);
        v11 = __ROR4__(bswap32(*result), -(char)v9);
        *a4++ = bswap32(v11 & ~v10 | v13 & v10);
        ++v12;
        v5 -= 32;
        v14 = v5 - 32;
      }
      while (v5 > 0x20);
    }
    if (v14 > -v9)
    {
      result = (unsigned int *)v16((uint64_t)v15, v12);
      v11 = __ROR4__(bswap32(*result), -(char)v9) & ~v10 | v11 & v10;
    }
    *a4 = bswap32(bswap32(*a4) & ~(-1 << -(char)v5) | v11 & (-1 << -(char)v5));
  }
  return result;
}

uint64_t ___Z13MoveBitsSmallPKvS0_iPvi_block_invoke(uint64_t a1, _DWORD *a2)
{
  unint64_t v3;
  _WORD *exception;

  v3 = *(_QWORD *)(a1 + 32);
  if ((unint64_t)(a2 + 1) <= v3)
  {
    *(_DWORD *)(a1 + 40) = *a2;
  }
  else
  {
    if (v3 <= (unint64_t)a2)
    {
      exception = __cxa_allocate_exception(2uLL);
      *exception = 5;
      __cxa_throw(exception, MEMORY[0x1E0DE4F10], 0);
    }
    memcpy((void *)(a1 + 40), a2, v3 - (_QWORD)a2);
  }
  return a1 + 40;
}

void MakeOutlineFromBitmap(memoryContext *a1, uint64_t a2, uint64_t a3, int *a4, int a5, int *a6, _QWORD *a7, int a8, int a9)
{
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  BOOL v20;
  uint64_t v21;
  char *v22;
  __int16 v23;
  char *v24;
  int v25;
  int v26;
  unsigned __int16 v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  _WORD *v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  char *v39;
  int v40;
  int v41;
  int v42;
  unsigned int v43;
  __int16 v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  _WORD *v49;
  int v50;
  int v51;
  char *v52;
  _QWORD *v53;
  __int128 v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  uint64_t v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  uint64_t v64;
  char *v65;
  int v66;
  uint64_t v67;
  char *v68;
  _WORD *v69;
  int v70;
  int v71;
  char *v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  char *v79;
  uint64_t v80;
  char *v81;
  _WORD *v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  char *v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  _WORD *v93;
  int v94;
  int v95;
  char *v96;
  BOOL v97;
  char v98;
  __int16 v99;
  char *v100;
  uint64_t v101;
  char *v102;
  _WORD *v103;
  int v104;
  int v105;
  char *v106;
  int v107;
  unsigned __int16 v108;
  int v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  char *v113;
  _WORD *v114;
  int v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  char *v119;
  int v120;
  int v121;
  int v122;
  unsigned int v123;
  __int16 v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  _WORD *v129;
  int v130;
  int v131;
  char *v132;
  int v133;
  int v134;
  int v135;
  signed int v136;
  int v137;
  int v138;
  _QWORD *v139;
  _QWORD *v140;
  __int128 v141;
  int *v142;
  int v143;
  int v144;
  uint64_t v145;
  int v146;
  int v147;
  int v148;
  __int16 v149;
  char v150;
  int *v151;
  int32x2_t *v152;
  char *v153;
  int v154;
  int v155;
  _WORD *exception;
  _QWORD *v157;
  uint64_t v158;
  int v159;
  int v160;
  int v161;
  int v162;
  int v163;
  int v165;
  uint64_t v166;
  int v167;
  int v168;
  int32x2_t v170;
  __int16 v171;

  v14 = a4[2];
  v13 = a4[3];
  v16 = *a4;
  v15 = a4[1];
  if (a5 >= -3)
    v17 = a5 + 3;
  else
    v17 = a5 + 6;
  v170.i32[0] = 0;
  v170.i32[1] = v13 << 16;
  v163 = M3x3Flags(a6);
  M3x3Mul(a6, v163, &v170, (const int *)1);
  v165 = a8;
  if (a8)
    v170.i32[1] = -v170.i32[1];
  if (!a3
    || ((v18 = v14 - v16, v19 = v13 - v15, (_WORD)v18) ? (v20 = (unsigned __int16)(v13 - v15) == 0) : (v20 = 1), v20))
  {
    v53 = ScalerNewBlock(a1, 28, a9, 0, 0, 0, 0);
    *v53 = 0x200000001;
    *((_DWORD *)v53 + 2) = 0;
    *(int32x2_t *)&v54 = v170;
    *((int32x2_t *)&v54 + 1) = v170;
    *(_OWORD *)((char *)v53 + 12) = v54;
    *a7 = v53;
  }
  else
  {
    v21 = a3;
    v161 = (__int16)v13;
    v171 = -21846;
    v168 = v18;
    v22 = (char *)ScalerNewBlock(a1, 0x8000, -1, 0, 0, 0, 0);
    v23 = v168;
    v24 = v22;
    v25 = (__int16)v168;
    v160 = v168 << 16;
    v157 = a7;
    if (v168 << 16 < 0)
    {
      v29 = 0x8000;
      v28 = 0;
      v36 = 2048;
    }
    else
    {
      v26 = 0;
      v27 = 0;
      v28 = 0;
      v29 = 0x8000;
      v30 = 2048;
      do
      {
        if ((v27 & 0x8000) != 0
          || v25 <= (__int16)v27
          || ((bswap32(*(_DWORD *)(a3 + 4 * (v27 >> 5))) << v27) & 0x80000000) == 0)
        {
          v36 = v30;
          v30 = v28;
        }
        else
        {
          v31 = &v24[16 * (int)v28];
          *((_WORD *)v31 + 7) = 1;
          *(_DWORD *)v31 = v26;
          *((_DWORD *)v31 + 1) = v161;
          *((_WORD *)v31 + 4) = v28 + 1;
          *(_DWORD *)(v31 + 10) = 0x1FFFF;
          if ((int)((_DWORD)v28 << 16) >= 1)
          {
            v32 = (unsigned __int16)v28 + 1;
            while (1)
            {
              if (*(_DWORD *)&v24[16 * (v32 - 2)] == *(_DWORD *)&v24[16 * (unsigned __int16)v28])
              {
                v33 = &v24[16 * (v32 - 2)];
                v35 = *((__int16 *)v33 + 5);
                v34 = v33 + 10;
                if (v35 == -1)
                  break;
              }
              if ((unint64_t)--v32 <= 1)
                goto LABEL_26;
            }
            *v34 = v28;
            *(_WORD *)&v24[16 * (unsigned __int16)v28 + 10] = v32 - 2;
          }
LABEL_26:
          v37 = (int)v28 + 1;
          if ((_DWORD)v37 == (_DWORD)v30)
          {
            v38 = v29 + 0x4000;
            v39 = (char *)ScalerNewBlock(a1, v29 + 0x4000, -1, v24, 0, 0, 0);
            v25 = (__int16)v168;
            v23 = v168;
            v24 = v39;
            v29 = v38;
            v30 = (v38 >> 4);
          }
          v40 = v27;
          v41 = (__int16)(v27 + 1);
          if (v25 <= v41)
            ++v27;
          else
            v27 = v25;
          v42 = v41 - 1;
          while (1)
          {
            v43 = 0x80000000 >> v40;
            if (v25 <= v40 || (bswap32(*(_DWORD *)(a3 + 4 * (v40 >> 5))) & v43) == 0)
              break;
            ++v40;
            ++v42;
            if ((__int16)v40 >= v23)
            {
              v44 = 0;
              v40 = v42;
              goto LABEL_37;
            }
          }
          v44 = (bswap32(*(_DWORD *)(a3 + 4 * ((unsigned __int16)v40 >> 5))) & v43) != 0;
          v27 = v40;
LABEL_37:
          v45 = &v24[16 * v37];
          *((_WORD *)v45 + 7) = v44;
          *(_DWORD *)v45 = v40;
          *((_DWORD *)v45 + 1) = v161;
          *((_WORD *)v45 + 4) = v28;
          *(_DWORD *)(v45 + 10) = 0x1FFFF;
          if ((int)((_DWORD)v37 << 16) >= 1)
          {
            v46 = (unsigned __int16)(v28 + 1);
            v47 = v46 + 1;
            while (1)
            {
              if (*(_DWORD *)&v24[16 * (v47 - 2)] == *(_DWORD *)&v24[16 * (unsigned __int16)(v28 + 1)])
              {
                v48 = &v24[16 * (v47 - 2)];
                v50 = *((__int16 *)v48 + 5);
                v49 = v48 + 10;
                if (v50 == -1)
                  break;
              }
              if ((unint64_t)--v47 <= 1)
                goto LABEL_44;
            }
            *v49 = v37;
            *(_WORD *)&v24[16 * v46 + 10] = v47 - 2;
          }
LABEL_44:
          if ((_DWORD)v28 + 2 == (_DWORD)v30)
          {
            v51 = v29 + 0x4000;
            v52 = (char *)ScalerNewBlock(a1, v29 + 0x4000, -1, v24, 0, 0, 0);
            v25 = (__int16)v168;
            v23 = v168;
            v24 = v52;
            v29 = v51;
            v36 = (v51 >> 4);
          }
          else
          {
            v36 = v30;
            v30 = (v28 + 2);
          }
        }
        v28 = v30;
        v26 = (__int16)++v27;
        v30 = v36;
      }
      while (v25 >= (__int16)v27);
    }
    v159 = (__int16)v19;
    if (v19 << 16 <= 0x10000)
    {
      v64 = v36;
    }
    else
    {
      v158 = v17 >> 2;
      v55 = 1;
      v56 = 1;
      do
      {
        v162 = v56;
        a3 = v21 + 4 * v158;
        if (v160 < 0)
        {
          v64 = v36;
        }
        else
        {
          v57 = 0;
          LOWORD(v58) = 0;
          v59 = v161 - v55;
          v167 = v161 - v55;
          v166 = v21 + 4 * v158;
          do
          {
            if ((v58 & 0x8000) != 0
              || v25 <= (__int16)v58
              || (v60 = (unsigned __int16)v58 >> 5,
                  v61 = 0x80000000 >> v58,
                  v62 = bswap32(*(_DWORD *)(v21 + 4 * v60)) & (0x80000000 >> v58),
                  v63 = bswap32(*(_DWORD *)(a3 + 4 * v60)) & (0x80000000 >> v58),
                  (v62 == 0) ^ (v63 != 0)))
            {
              v64 = v36;
              v36 = v28;
            }
            else
            {
              v65 = &v24[16 * (int)v28];
              *((_WORD *)v65 + 7) = v63 != 0;
              *(_DWORD *)v65 = v57;
              *((_DWORD *)v65 + 1) = v59;
              v66 = v28 + 1;
              *((_WORD *)v65 + 4) = v28 + 1;
              *(_DWORD *)(v65 + 10) = 0x1FFFF;
              if ((int)((_DWORD)v28 << 16) >= 1)
              {
                v67 = (unsigned __int16)v28 + 1;
                while (1)
                {
                  if (*(_DWORD *)&v24[16 * (v67 - 2)] == *(_DWORD *)&v24[16 * (unsigned __int16)v28])
                  {
                    v68 = &v24[16 * (v67 - 2)];
                    v70 = *((__int16 *)v68 + 5);
                    v69 = v68 + 10;
                    if (v70 == -1)
                      break;
                  }
                  if ((unint64_t)--v67 <= 1)
                    goto LABEL_66;
                }
                *v69 = v28;
                *(_WORD *)&v24[16 * (unsigned __int16)v28 + 10] = v67 - 2;
              }
LABEL_66:
              if (v66 == (_DWORD)v36)
              {
                v71 = v29 + 0x4000;
                v72 = (char *)ScalerNewBlock(a1, v29 + 0x4000, -1, v24, 0, 0, 0);
                v59 = v167;
                v25 = (__int16)v168;
                v23 = v168;
                v24 = v72;
                v29 = v71;
                v36 = (v71 >> 4);
                v62 = bswap32(*(_DWORD *)(v21 + 4 * v60)) & v61;
                v63 = bswap32(*(_DWORD *)(a3 + 4 * v60)) & v61;
              }
              v73 = (unsigned __int16)v58;
              v74 = v62 != 0;
              v75 = v63 != 0;
              if (v25 > (unsigned __int16)v58 && v74 != v75)
              {
                v58 = (unsigned __int16)v58;
                while (1)
                {
                  v73 = (__int16)++v58;
                  if ((__int16)v58 >= v23)
                  {
                    v99 = 0;
                    LOWORD(v58) = v23;
                    goto LABEL_101;
                  }
                  v60 = v58 >> 5;
                  v61 = 0x80000000 >> v58;
                  v76 = (bswap32(*(_DWORD *)(v21 + 4 * v60)) & (0x80000000 >> v58)) != 0;
                  v77 = (bswap32(*(_DWORD *)(a3 + 4 * v60)) & (0x80000000 >> v58)) != 0;
                  if ((v74 & 1) != v76 && v76 != v77)
                  {
                    v79 = &v24[16 * v66];
                    *((_WORD *)v79 + 7) = v77;
                    *(_DWORD *)v79 = v58;
                    *((_DWORD *)v79 + 1) = v59;
                    *((_WORD *)v79 + 4) = v66 - 1;
                    *(_DWORD *)(v79 + 10) = 0x1FFFF;
                    if (v66 << 16 >= 1)
                    {
                      v80 = (unsigned __int16)v66 + 1;
                      while (1)
                      {
                        if (*(_DWORD *)&v24[16 * (v80 - 2)] == *(_DWORD *)&v24[16 * (unsigned __int16)v66])
                        {
                          v81 = &v24[16 * (v80 - 2)];
                          v83 = *((__int16 *)v81 + 5);
                          v82 = v81 + 10;
                          if (v83 == -1)
                            break;
                        }
                        if ((unint64_t)--v80 <= 1)
                          goto LABEL_83;
                      }
                      *v82 = v66;
                      *(_WORD *)&v24[16 * (unsigned __int16)v66 + 10] = v80 - 2;
                    }
LABEL_83:
                    v84 = v21;
                    v85 = v66 + 1;
                    if ((_DWORD)v85 == (_DWORD)v36)
                    {
                      v86 = v29 + 0x4000;
                      v87 = (char *)ScalerNewBlock(a1, v29 + 0x4000, -1, v24, 0, 0, 0);
                      v59 = v167;
                      v24 = v87;
                      v29 = v86;
                      v88 = (v86 >> 4);
                    }
                    else
                    {
                      v88 = v36;
                    }
                    v89 = &v24[16 * v85];
                    *((_WORD *)v89 + 7) = v77;
                    *(_DWORD *)v89 = v58;
                    *((_DWORD *)v89 + 1) = v59;
                    *((_WORD *)v89 + 4) = v66 + 2;
                    *(_DWORD *)(v89 + 10) = 0x1FFFF;
                    if ((int)((_DWORD)v85 << 16) >= 1)
                    {
                      v90 = (unsigned __int16)(v66 + 1);
                      v91 = v90 + 1;
                      while (1)
                      {
                        if (*(_DWORD *)&v24[16 * (v91 - 2)] == *(_DWORD *)&v24[16
                                                                                            * (unsigned __int16)(v66 + 1)])
                        {
                          v92 = &v24[16 * (v91 - 2)];
                          v94 = *((__int16 *)v92 + 5);
                          v93 = v92 + 10;
                          if (v94 == -1)
                            break;
                        }
                        if ((unint64_t)--v91 <= 1)
                          goto LABEL_93;
                      }
                      *v93 = v85;
                      *(_WORD *)&v24[16 * v90 + 10] = v91 - 2;
                    }
LABEL_93:
                    v66 += 2;
                    if (v66 == (_DWORD)v88)
                    {
                      v95 = v29 + 0x4000;
                      v96 = (char *)ScalerNewBlock(a1, v29 + 0x4000, -1, v24, 0, 0, 0);
                      v59 = v167;
                      v24 = v96;
                      v29 = v95;
                      v36 = (v95 >> 4);
                      v66 = v88;
                    }
                    else
                    {
                      v36 = v88;
                    }
                    v25 = (__int16)v168;
                    v23 = v168;
                    v21 = v84;
                    a3 = v166;
                  }
                  LOBYTE(v74) = (bswap32(*(_DWORD *)(v21 + 4 * v60)) & v61) != 0;
                  v97 = (bswap32(*(_DWORD *)(a3 + 4 * v60)) & v61) != 0;
                  if (v25 <= v58)
                    break;
                  v98 = v74 ^ v97;
                  v73 = v58;
                  if ((v98 & 1) == 0)
                    goto LABEL_99;
                }
                v73 = v58;
              }
LABEL_99:
              v99 = (bswap32(*(_DWORD *)(a3 + 4 * (v60 & 0x7FF))) & v61) != 0;
LABEL_101:
              v100 = &v24[16 * v66];
              *((_WORD *)v100 + 7) = v99;
              *(_DWORD *)v100 = v73;
              *((_DWORD *)v100 + 1) = v59;
              *((_WORD *)v100 + 4) = v66 - 1;
              *(_DWORD *)(v100 + 10) = 0x1FFFF;
              if (v66 << 16 >= 1)
              {
                v101 = (unsigned __int16)v66 + 1;
                while (1)
                {
                  if (*(_DWORD *)&v24[16 * (v101 - 2)] == *(_DWORD *)&v24[16 * (unsigned __int16)v66])
                  {
                    v102 = &v24[16 * (v101 - 2)];
                    v104 = *((__int16 *)v102 + 5);
                    v103 = v102 + 10;
                    if (v104 == -1)
                      break;
                  }
                  if ((unint64_t)--v101 <= 1)
                    goto LABEL_108;
                }
                *v103 = v66;
                *(_WORD *)&v24[16 * (unsigned __int16)v66 + 10] = v101 - 2;
              }
LABEL_108:
              if (v66 + 1 == (_DWORD)v36)
              {
                v105 = v29 + 0x4000;
                v106 = (char *)ScalerNewBlock(a1, v29 + 0x4000, -1, v24, 0, 0, 0);
                v59 = v167;
                v25 = (__int16)v168;
                v23 = v168;
                v24 = v106;
                v29 = v105;
                v64 = (v105 >> 4);
              }
              else
              {
                v64 = v36;
                v36 = (v66 + 1);
              }
            }
            v28 = v36;
            LOWORD(v58) = v58 + 1;
            v57 = (__int16)v58;
            v36 = v64;
          }
          while (v25 >= (__int16)v58);
        }
        v56 = v162 + 1;
        v55 = (__int16)(v162 + 1);
        v21 = a3;
        v36 = v64;
      }
      while (v159 > v55);
    }
    if (v160 < 0)
    {
      LOWORD(v110) = v28;
    }
    else
    {
      v107 = 0;
      v108 = 0;
      v109 = v161 - v159;
      v110 = v28;
      do
      {
        if ((v108 & 0x8000) != 0
          || v25 <= (__int16)v108
          || ((bswap32(*(_DWORD *)(a3 + 4 * (v108 >> 5))) << v108) & 0x80000000) == 0)
        {
          v116 = v64;
          v64 = v110;
        }
        else
        {
          v111 = &v24[16 * (int)v110];
          *((_WORD *)v111 + 7) = 1;
          *(_DWORD *)v111 = v107;
          *((_DWORD *)v111 + 1) = v109;
          *((_WORD *)v111 + 4) = v110 + 1;
          *(_DWORD *)(v111 + 10) = 0x1FFFF;
          if ((int)((_DWORD)v110 << 16) >= 1)
          {
            v112 = (unsigned __int16)v110 + 1;
            while (1)
            {
              if (*(_DWORD *)&v24[16 * (v112 - 2)] == *(_DWORD *)&v24[16 * (unsigned __int16)v110])
              {
                v113 = &v24[16 * (v112 - 2)];
                v115 = *((__int16 *)v113 + 5);
                v114 = v113 + 10;
                if (v115 == -1)
                  break;
              }
              if ((unint64_t)--v112 <= 1)
                goto LABEL_131;
            }
            *v114 = v110;
            *(_WORD *)&v24[16 * (unsigned __int16)v110 + 10] = v112 - 2;
          }
LABEL_131:
          v117 = (int)v110 + 1;
          if ((_DWORD)v117 == (_DWORD)v64)
          {
            v118 = v29 + 0x4000;
            v119 = (char *)ScalerNewBlock(a1, v29 + 0x4000, -1, v24, 0, 0, 0);
            v25 = (__int16)v168;
            v23 = v168;
            v24 = v119;
            v29 = v118;
            v64 = (v118 >> 4);
          }
          v120 = v108;
          v121 = (__int16)(v108 + 1);
          if (v25 <= v121)
            ++v108;
          else
            v108 = v25;
          v122 = v121 - 1;
          while (1)
          {
            v123 = 0x80000000 >> v120;
            if (v25 <= v120 || (bswap32(*(_DWORD *)(a3 + 4 * (v120 >> 5))) & v123) == 0)
              break;
            ++v120;
            ++v122;
            if ((__int16)v120 >= v23)
            {
              v124 = 0;
              v120 = v122;
              goto LABEL_142;
            }
          }
          v124 = (bswap32(*(_DWORD *)(a3 + 4 * ((unsigned __int16)v120 >> 5))) & v123) != 0;
          v108 = v120;
LABEL_142:
          v125 = &v24[16 * v117];
          *((_WORD *)v125 + 7) = v124;
          *(_DWORD *)v125 = v120;
          *((_DWORD *)v125 + 1) = v109;
          *((_WORD *)v125 + 4) = v110;
          *(_DWORD *)(v125 + 10) = 0x1FFFF;
          if ((int)((_DWORD)v117 << 16) >= 1)
          {
            v126 = (unsigned __int16)(v110 + 1);
            v127 = v126 + 1;
            while (1)
            {
              if (*(_DWORD *)&v24[16 * (v127 - 2)] == *(_DWORD *)&v24[16 * (unsigned __int16)(v110 + 1)])
              {
                v128 = &v24[16 * (v127 - 2)];
                v130 = *((__int16 *)v128 + 5);
                v129 = v128 + 10;
                if (v130 == -1)
                  break;
              }
              if ((unint64_t)--v127 <= 1)
                goto LABEL_149;
            }
            *v129 = v117;
            *(_WORD *)&v24[16 * v126 + 10] = v127 - 2;
          }
LABEL_149:
          if ((_DWORD)v110 + 2 == (_DWORD)v64)
          {
            v131 = v29 + 0x4000;
            v132 = (char *)ScalerNewBlock(a1, v29 + 0x4000, -1, v24, 0, 0, 0);
            v25 = (__int16)v168;
            v23 = v168;
            v24 = v132;
            v29 = v131;
            v116 = (v131 >> 4);
          }
          else
          {
            v116 = v64;
            v64 = (v110 + 2);
          }
        }
        v110 = v64;
        v107 = (__int16)++v108;
        v64 = v116;
      }
      while (v25 >= (__int16)v108);
    }
    v133 = (__int16)v110;
    v134 = CountPointsInContour((uint64_t)v24, 2u, (__int16)v110, &v171);
    v135 = 0;
    v136 = 28;
    if (v134)
    {
      v137 = a9;
      do
      {
        ++v135;
        v138 = v134 + 31;
        if (v134 < -31)
          v138 = v134 + 62;
        v136 += 8 * v134 + 4 * (v138 >> 5) + 4;
        v134 = CountPointsInContour((uint64_t)v24, 2u, (__int16)v110, &v171);
      }
      while (v134);
    }
    else
    {
      v137 = a9;
    }
    v139 = ScalerNewBlock(a1, v136, v137, 0, 0, 1, 0);
    v140 = v139;
    *(_DWORD *)v139 = v135 + 1;
    *(_QWORD *)((char *)v139 + 4) = 2;
    *(int32x2_t *)&v141 = v170;
    *((int32x2_t *)&v141 + 1) = v170;
    *(_OWORD *)((char *)v139 + 12) = v141;
    if ((_WORD)v135)
    {
      v142 = (int *)v139 + 7;
      do
      {
        v143 = CountPointsInContour((uint64_t)v24, 3u, v133, &v171);
        v144 = v143;
        v145 = v171;
        *v142++ = v143;
        v146 = v143 + 62;
        if (v143 >= -31)
          v146 = v143 + 31;
        if (v143 >= 1)
        {
          v147 = 0;
          v148 = v146 >> 5;
          do
          {
            *v142++ = 0;
            ++v147;
          }
          while (v148 > (__int16)v147);
        }
        if (v143)
        {
          v149 = v145;
          v150 = *(unsigned __int16 *)&v24[16 * v145 + 14] == 0;
          do
          {
            v151 = v142;
            v152 = (int32x2_t *)&v24[16 * v149];
            *v152 = vshl_n_s32(*v152, 0x10uLL);
            M3x3Mul(a6, v163, v152, (const int *)1);
            if (v165)
              v152->i32[1] = -v152->i32[1];
            *v142 = v152->i32[0];
            v153 = &v24[16 * v149];
            v142[1] = *((_DWORD *)v153 + 1);
            *((_WORD *)v153 + 6) = 0;
            v154 = *((__int16 *)v153 + 5);
            if (v154 < 0 || (v155 = *((__int16 *)v153 + 4), v155 < 0))
            {
              exception = __cxa_allocate_exception(2uLL);
              *exception = 5;
              __cxa_throw(exception, MEMORY[0x1E0DE4F10], 0);
            }
            if ((v150 & 1) != 0)
              v149 = v154;
            else
              v149 = v155;
            v150 ^= 1u;
            v142 += 2;
            --v144;
          }
          while (v144);
          v142 = v151 + 2;
        }
        --v135;
      }
      while ((_WORD)v135);
    }
    *v157 = v140;
    ScalerDisposeBlock(a1, v24, -1);
  }
}

uint64_t CountPointsInContour(uint64_t a1, unsigned __int16 a2, int a3, __int16 *a4)
{
  __int16 *v4;
  uint64_t v5;
  int v6;
  int v7;
  BOOL v8;
  char v9;
  int v10;
  __int16 v11;
  uint64_t v12;
  int v13;
  _WORD *exception;

  v4 = (__int16 *)(a1 + 12);
  v5 = -1;
  do
  {
    ++v5;
    v7 = *v4;
    v4 += 8;
    v6 = v7;
    if (v7)
      v8 = v6 == a2;
    else
      v8 = 1;
    v9 = v8;
  }
  while (v5 < a3 && (v9 & 1) != 0);
  if (v5 >= a3)
    return 0;
  v10 = 0;
  v11 = 0;
  *a4 = v5;
  do
  {
    v12 = a1 + 16 * (__int16)v5;
    *(_WORD *)(v12 + 12) = a2;
    v13 = *(__int16 *)(v12 + 10);
    if (v13 < 0 || (LODWORD(v5) = *(__int16 *)(a1 + 16 * (__int16)v5 + 8), (v5 & 0x80000000) != 0))
    {
      exception = __cxa_allocate_exception(2uLL);
      *exception = 5;
      __cxa_throw(exception, MEMORY[0x1E0DE4F10], 0);
    }
    ++v11;
    if (v10)
      LOWORD(v5) = v13;
    v10 ^= 1u;
  }
  while (*a4 != (unsigned __int16)v5);
  return v11;
}

uint64_t ComputeRenderingSpecs(uint64_t result, uint64_t a2, int a3, int a4, int *a5)
{
  int *v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  unsigned int v16;
  BOOL v17;
  int v18;
  int v19;
  int v20;
  __int16 v21;
  int v22;
  __int128 v23;
  __int128 v24;

  if (a3)
  {
    v7 = (int *)(*(_QWORD *)(result + 24) + 96);
    v8 = M3x3Flags(v7);
    v23 = xmmword_1B0A3D700;
    v24 = xmmword_1B0A3D710;
    result = M3x3Mul(v7, v8, (int32x2_t *)&v23, (const int *)4);
    v9 = v23;
    v10 = DWORD1(v23);
    if (SDWORD1(v23) >= SDWORD1(v24))
      v11 = DWORD1(v24);
    else
      v11 = DWORD1(v23);
    if (SDWORD1(v23) <= SDWORD1(v24))
      v10 = DWORD1(v24);
    if ((int)v23 >= (int)v24)
      v12 = v24;
    else
      v12 = v23;
    if ((int)v23 <= (int)v24)
      v9 = v24;
    if (SDWORD2(v24) < v12)
      v12 = DWORD2(v24);
    if (SDWORD2(v23) < v12)
      v12 = DWORD2(v23);
    if (SHIDWORD(v24) < v11)
      v11 = HIDWORD(v24);
    if (SHIDWORD(v23) < v11)
      v11 = HIDWORD(v23);
    if (SDWORD2(v24) > v9)
      v9 = DWORD2(v24);
    if (SDWORD2(v23) > v9)
      v9 = DWORD2(v23);
    if (SHIDWORD(v24) > v10)
      v10 = HIDWORD(v24);
    if (SHIDWORD(v23) > v10)
      v10 = HIDWORD(v23);
    v13 = v9 - v12;
    v14 = v10 - v11 + 0x8000;
    v15 = (v13 + 0x8000) >> 16;
    v16 = ((v15 + 31) >> 3) & 0x1FFFFFFC;
    v18 = v15 + 7;
    v17 = v15 < -7;
    v19 = v15 + 14;
    if (!v17)
      v19 = v18;
    v20 = v19 >> 3;
    if (v13 < 1081344)
      v21 = v20;
    else
      v21 = v16;
    if (a4)
      v21 = (v18 >> 1) & 0xFFFC;
    v22 = v21 * (v14 >> 16);
  }
  else
  {
    v22 = 4 * *(_DWORD *)(*(_QWORD *)(result + 8) + 28)
        + 8 * *(_DWORD *)(*(_QWORD *)(result + 8) + 32)
        + 4 * ((*(_DWORD *)(*(_QWORD *)(result + 8) + 32) + 31) >> 5)
        + 4;
  }
  *a5 = v22;
  a5[1] = 0;
  return result;
}

uint64_t TType1SFNTFont::GetFontDataTableTag(TType1SFNTFont *this)
{
  return 1415139377;
}

void TType1Exception::~TType1Exception(TType1Exception *this)
{
  JUMPOUT(0x1B5E0CD38);
}

void CreateGlyphElement(uint64_t a1, int a2, unsigned int a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int16 v23;

  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 40);
  if (a3)
  {
    v10 = *(_QWORD *)(a1 + 24);
    v11 = *(unsigned __int16 *)(v8 + 52);
    *(_DWORD *)(v9 + 56) = 1;
    *(_DWORD *)(v9 + 60) = v11;
    v12 = *(_QWORD *)(v10 + 48);
    v13 = v12 + 4 * v11;
    *(_QWORD *)(v9 + 64) = v12;
    *(_QWORD *)(v9 + 72) = v13;
    v14 = v13 + 4 * v11;
    *(_QWORD *)(v9 + 80) = v14;
    *(_QWORD *)(v9 + 88) = v14 + 2;
    v15 = v14 + 4;
    v16 = v14 + 4 + v11;
    *(_QWORD *)(v9 + 96) = v15;
    *(_QWORD *)(v9 + 104) = v16;
    *(_DWORD *)(v9 + 164) = 1;
    *(_DWORD *)(v9 + 168) = v11;
    if (v12)
    {
      v17 = v16 + v11;
      v18 = v17 + 4 * v11;
      v19 = v18 + 4 * v11;
      v20 = v19 + 2 * v11;
      v21 = v20 + 2 * v11;
    }
    else
    {
      v17 = 1358921729;
      v18 = 1358921729;
      v19 = 1358921729;
      v20 = 1358921729;
      v21 = 1358921729;
    }
    *(_QWORD *)(v9 + 112) = v17;
    *(_QWORD *)(v9 + 120) = v18;
    *(_QWORD *)(v9 + 128) = v19;
    *(_QWORD *)(v9 + 136) = v20;
    *(_QWORD *)(v9 + 176) = v21;
    *(_QWORD *)(v10 + 248) = gInstructionJumpTable;
    *(_OWORD *)(v10 + 256) = *(_OWORD *)(a1 + 48);
    v22 = *(_QWORD *)(v10 + 16);
    *(_QWORD *)(v10 + 224) = *(_QWORD *)(v10 + 32);
    *(_QWORD *)(v10 + 232) = v22;
    *(_QWORD *)(v10 + 240) = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 16);
    if (*(_DWORD *)(v8 + 120) && !*(_BYTE *)(v8 + 154))
    {
      RunFontProgram((uint64_t *)a1, 0);
      *(_BYTE *)(v8 + 154) = 1;
    }
    if (*(_WORD *)(v8 + 150) && !*(_BYTE *)(v10 + 487))
    {
      PrepareTheCVT(a1, (int)((double)*(int *)(v10 + 288) * 64.0 / (double)*(__int16 *)(v8 + 130)));
      *(_BYTE *)(v10 + 487) = 1;
    }
    if (*(_DWORD *)(v8 + 124) && !*(_BYTE *)(v10 + 486))
    {
      RunPreProgram((uint64_t *)a1, v10 + 96, 0);
      *(_BYTE *)(v10 + 486) = 1;
    }
  }
  if (a4)
  {
    if (*(unsigned __int16 *)(v8 + 40) <= a2)
      v23 = 0;
    else
      v23 = a2;
    CreateGlyphOutline((uint64_t *)a1, v23, a3);
  }
  *(_QWORD *)(v9 + 256) = 1358921729;
  *(_QWORD *)(v9 + 264) = 1358921729;
  *(_QWORD *)(v9 + 240) = 1358921729;
  *(_QWORD *)(v9 + 248) = 1358921729;
  *(_QWORD *)(v9 + 232) = 1358921729;
}

uint64_t SetupGlyphElementPointers(uint64_t result, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!*(_BYTE *)(a2 + 128))
    return sbit_IsThereAGlyphImage(result, (int *)(a2 + 120));
  v3 = *(_QWORD *)(result + 40);
  *(_QWORD *)(v3 + 184) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(v3 + 276) = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v3 + 284) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(v3 + 288) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(v3 + 272) = *a3;
  v4 = *(_QWORD *)(result + 8);
  v6 = *(int *)(v4 + 28);
  v5 = *(int *)(v4 + 32);
  v7 = *(_QWORD *)(a2 + 8);
  v8 = v7 + 4 * v5;
  *(_QWORD *)(v3 + 192) = v7;
  *(_QWORD *)(v3 + 200) = v8;
  v9 = v8 + 4 * v5;
  v10 = v9 + 2 * v6;
  *(_QWORD *)(v3 + 208) = v9;
  *(_QWORD *)(v3 + 216) = v10;
  v11 = v10 + 2 * v6;
  *(_QWORD *)(v3 + 224) = v11;
  *(_QWORD *)(v3 + 232) = v11 + v5;
  *(_DWORD *)(v3 + 292) = v6;
  *(_DWORD *)(v3 + 296) = v5;
  *(_QWORD *)(v3 + 240) = 1358921729;
  *(_QWORD *)(v3 + 248) = 1358921729;
  *(_QWORD *)(v3 + 256) = 1358921729;
  *(_QWORD *)(v3 + 264) = 1358921729;
  *(_QWORD *)(v3 + 304) = 1358921729;
  return result;
}

_QWORD *CreateScalerGlyphBlock(uint64_t a1, memoryContext *a2, int *a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _WORD *exception;

  if (*(_BYTE *)(*(_QWORD *)(a1 + 24) + 490) && !*(_BYTE *)(a1 + 66))
  {
    v6 = ScalerNewBlock(a2, 136, 4, 0, 0, 1, 0);
    *((_DWORD *)v6 + 30) = *a3;
    if (sbit_IsThereAGlyphImage(a1, (int *)v6 + 30))
    {
      v22 = 0;
    }
    else
    {
      v6 = ScalerNewBlock(a2, *(_DWORD *)(*(_QWORD *)(a1 + 8) + 24) + 136, 4, v6, 0, 1, 0);
      v6[1] = v6 + 17;
      v24 = *(_QWORD *)(a1 + 40);
      *(_DWORD *)(v24 + 184) = 0;
      *(_DWORD *)(v24 + 188) = 0;
      v25 = *(_QWORD *)(a1 + 8);
      v27 = *(int *)(v25 + 28);
      v26 = *(int *)(v25 + 32);
      v28 = *(_QWORD *)(v24 + 48);
      v29 = (uint64_t)v6 + 4 * v26 + 136;
      *(_QWORD *)(v24 + 192) = v6 + 17;
      *(_QWORD *)(v24 + 200) = v29;
      v30 = v29 + 4 * v26;
      v31 = v30 + 2 * v27;
      *(_QWORD *)(v24 + 208) = v30;
      *(_QWORD *)(v24 + 216) = v31;
      v32 = v31 + 2 * v27;
      *(_QWORD *)(v24 + 224) = v32;
      *(_QWORD *)(v24 + 232) = v32 + v26;
      *(_DWORD *)(v24 + 292) = v27;
      *(_DWORD *)(v24 + 296) = v26;
      v33 = 1358921729;
      v34 = v28 + 4 * v26;
      v35 = v34 + 4 * v26;
      v36 = v35 + 2 * v26;
      v37 = v36 + 2 * v26;
      if (v28)
      {
        v33 = v37;
      }
      else
      {
        v28 = 1358921729;
        v34 = 1358921729;
        v35 = 1358921729;
        v36 = 1358921729;
      }
      *(_QWORD *)(v24 + 240) = v28;
      *(_QWORD *)(v24 + 248) = v34;
      *(_QWORD *)(v24 + 256) = v35;
      *(_QWORD *)(v24 + 264) = v36;
      *(_QWORD *)(v24 + 304) = v33;
      v22 = 1;
      CreateGlyphElement(a1, *a3, *(unsigned __int8 *)(*(_QWORD *)(a1 + 24) + 484), 1);
      v6[2] = *(_QWORD *)(v24 + 184);
      v6[3] = *(_QWORD *)(v24 + 276);
      *((_DWORD *)v6 + 8) = *(_DWORD *)(v24 + 284);
      *((_DWORD *)v6 + 9) = *(_DWORD *)(v24 + 288);
      *((_DWORD *)v6 + 10) = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 412);
      CalculateFractionalBounds(v6, (unsigned int *)(v24 + 184));
    }
  }
  else
  {
    v6 = ScalerNewBlock(a2, *(_DWORD *)(*(_QWORD *)(a1 + 8) + 24) + 136, 4, 0, 0, 1, 0);
    *(_DWORD *)v6 = 1735162214;
    v6[1] = v6 + 17;
    v7 = *(_QWORD *)(a1 + 40);
    *(_DWORD *)(v7 + 184) = 0;
    *(_DWORD *)(v7 + 188) = 0;
    v8 = *(_QWORD *)(a1 + 8);
    v10 = *(int *)(v8 + 28);
    v9 = *(int *)(v8 + 32);
    v11 = *(_QWORD *)(v7 + 48);
    v12 = (uint64_t)v6 + 4 * v9 + 136;
    *(_QWORD *)(v7 + 192) = v6 + 17;
    *(_QWORD *)(v7 + 200) = v12;
    v13 = v12 + 4 * v9;
    v14 = v13 + 2 * v10;
    *(_QWORD *)(v7 + 208) = v13;
    *(_QWORD *)(v7 + 216) = v14;
    v15 = v14 + 2 * v10;
    *(_QWORD *)(v7 + 224) = v15;
    *(_QWORD *)(v7 + 232) = v15 + v9;
    *(_DWORD *)(v7 + 292) = v10;
    *(_DWORD *)(v7 + 296) = v9;
    v16 = 1358921729;
    v17 = v11 + 4 * v9;
    v18 = v17 + 4 * v9;
    v19 = v18 + 2 * v9;
    v20 = v19 + 2 * v9;
    if (v11)
    {
      v16 = v20;
    }
    else
    {
      v11 = 1358921729;
      v17 = 1358921729;
      v18 = 1358921729;
      v19 = 1358921729;
    }
    *(_QWORD *)(v7 + 240) = v11;
    *(_QWORD *)(v7 + 248) = v17;
    *(_QWORD *)(v7 + 256) = v18;
    *(_QWORD *)(v7 + 264) = v19;
    *(_QWORD *)(v7 + 304) = v16;
    CreateGlyphElement(a1, *a3, *(unsigned __int8 *)(*(_QWORD *)(a1 + 24) + 484), 1);
    v6[2] = *(_QWORD *)(v7 + 184);
    v6[3] = *(_QWORD *)(v7 + 276);
    *((_DWORD *)v6 + 8) = *(_DWORD *)(v7 + 284);
    *((_DWORD *)v6 + 9) = *(_DWORD *)(v7 + 288);
    *((_DWORD *)v6 + 10) = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 412);
    v21 = *(_QWORD *)(a1 + 8);
    if (*(_DWORD *)(v7 + 184) > *(_DWORD *)(v21 + 28) || *(_DWORD *)(v7 + 188) > *(_DWORD *)(v21 + 32))
    {
      exception = __cxa_allocate_exception(2uLL);
      *exception = 5;
      __cxa_throw(exception, MEMORY[0x1E0DE4F10], 0);
    }
    CalculateFractionalBounds(v6, (unsigned int *)(v7 + 184));
    v22 = 1;
  }
  *((_BYTE *)v6 + 128) = v22;
  *(_QWORD *)(a1 + 32) = v6;
  v6[1] = v6 + 17;
  return v6;
}

_DWORD *CalculateFractionalBounds(_DWORD *result, unsigned int *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  int *v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  int *v22;
  int v23;
  int v24;
  int v25;
  _WORD *exception;

  v2 = *a2;
  if ((int)v2 <= 0)
  {
    v18 = 0;
    v17 = 0;
    result[26] = 0;
    result[28] = 0;
  }
  else
  {
    v3 = 0;
    v4 = 0;
    v5 = 0;
    v7 = *((_QWORD *)a2 + 3);
    v6 = *((_QWORD *)a2 + 4);
    v8 = 1;
    do
    {
      v9 = *(unsigned __int16 *)(v6 + 2 * v3);
      v10 = *(unsigned __int16 *)(v7 + 2 * v3);
      v11 = v9 - v10;
      if (v9 < v10 || (int)a2[28] <= (int)v9)
      {
        exception = __cxa_allocate_exception(2uLL);
        *exception = 5;
        __cxa_throw(exception, MEMORY[0x1E0DE4F10], 0);
      }
      if ((_DWORD)v10 != v9)
      {
        v12 = (int *)(*((_QWORD *)a2 + 1) + 4 * v10);
        if (v8)
        {
          v4 = *v12;
          v5 = *v12;
        }
        v8 = v11 + 1;
        do
        {
          v14 = *v12++;
          v13 = v14;
          if (v14 >= v5)
            v15 = v5;
          else
            v15 = v13;
          if (v13 > v4)
            v4 = v13;
          else
            v5 = v15;
          --v8;
        }
        while (v8);
      }
      ++v3;
    }
    while (v3 != v2);
    v16 = 0;
    v17 = 0;
    v18 = 0;
    result[26] = v5;
    result[28] = v4;
    v19 = 1;
    do
    {
      v20 = *(unsigned __int16 *)(v6 + 2 * v16);
      v21 = *(unsigned __int16 *)(v7 + 2 * v16);
      if ((_DWORD)v21 != v20)
      {
        v22 = (int *)(*((_QWORD *)a2 + 2) + 4 * v21);
        if (v19)
        {
          v18 = *v22;
          v17 = *v22;
        }
        if (v21 <= v20)
        {
          v19 = v20 - v21 + 1;
          do
          {
            v24 = *v22++;
            v23 = v24;
            if (v24 >= v18)
              v25 = v18;
            else
              v25 = v23;
            if (v23 > v17)
              v17 = v23;
            else
              v18 = v25;
            --v19;
          }
          while (v19);
        }
        else
        {
          v19 = 0;
        }
      }
      ++v16;
    }
    while (v16 != v2);
  }
  result[27] = v18;
  result[29] = v17;
  return result;
}

uint64_t ComputeGlyphBoundsAndMetrics(_QWORD *a1, int32x2_t *a2, int32x2_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  _QWORD v10[2];
  int v11;

  v5 = a1[4];
  if (*(_BYTE *)(v5 + 128))
  {
    v6 = a1[5];
    v8 = *(_DWORD *)(v6 + 184);
    v7 = v6 + 184;
    if (v8 >= 1 && (*(_DWORD *)(v5 + 104) || *(_DWORD *)(v5 + 112) || *(_DWORD *)(v5 + 108) || *(_DWORD *)(v5 + 116)))
      CalculateGlyphImageBounds((uint64_t)a1, v7, (uint64_t)a2);
    else
      bzero(a2, 0x24uLL);
    return fs_FindMetrics((uint64_t)a1, v7, a3, *(unsigned __int8 *)(a1[3] + 484));
  }
  else
  {
    v11 = -1431655766;
    v10[0] = 2863311530;
    v10[1] = 0xAAAAAAAA00000000;
    return sbit_GetBitMapInfo(a1, (uint64_t)v10, *(_DWORD *)(v5 + 120), a2, a3, *(unsigned __int8 *)(a1[3] + 484));
  }
}

uint64_t CalculateGlyphImageBounds(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  uint64_t result;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  unsigned int v17;

  v6 = *(_DWORD *)(a2 + 4);
  v7 = *(unsigned __int8 *)(a1 + 64);
  v8 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 104);
  if (v7)
    v9 = 7;
  else
    v9 = 31;
  if (v7)
    v10 = 56;
  else
    v10 = 32;
  *(_DWORD *)(a3 + 16) = (int)CheckedF26Dot6Add(v8, v9) >> 6;
  *(_DWORD *)(a3 + 20) = (int)CheckedF26Dot6Add(*(_DWORD *)(*(_QWORD *)(a1 + 32) + 108), v9) >> 6;
  *(_DWORD *)(a3 + 24) = (int)CheckedF26Dot6Add(*(_DWORD *)(*(_QWORD *)(a1 + 32) + 112), v10) >> 6;
  result = CheckedF26Dot6Add(*(_DWORD *)(*(_QWORD *)(a1 + 32) + 116), v10);
  v12 = (int)result >> 6;
  *(_DWORD *)(a3 + 28) = (int)result >> 6;
  v13 = *(_DWORD *)(a3 + 16);
  if (*(_BYTE *)(*(_QWORD *)(a1 + 24) + 488))
    v14 = v6 + 2;
  else
    v14 = v6;
  v15 = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a3 + 8) = (v13 << 16) - (*(_DWORD *)(*(_QWORD *)(a2 + 8) + 4 * v14) << 10);
  *(_DWORD *)(a3 + 12) = (v12 << 16) - (*(_DWORD *)(v15 + 4 * v14) << 10);
  v16 = *(_DWORD *)(a3 + 24);
  if (v16 == v13)
  {
    v16 = v13 + 1;
    *(_DWORD *)(a3 + 24) = v13 + 1;
  }
  if (v12 == *(_DWORD *)(a3 + 20))
    *(_DWORD *)(a3 + 28) = v12 + 1;
  v17 = ((v16 - v13 + 31) >> 3) & 0xFFFFFFFC;
  if (!v17)
    v17 = 4;
  *(_DWORD *)(a3 + 32) = v17;
  *(_QWORD *)a3 = 0;
  return result;
}

uint64_t fs_FindMetrics(uint64_t result, uint64_t a2, int32x2_t *a3, int a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  int *v14;
  int *v15;
  unsigned int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  int *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;

  if (a3)
  {
    v6 = *(_QWORD *)(result + 24);
    v7 = *(int *)(a2 + 4);
    if (*(_BYTE *)(v6 + 488))
    {
      if (a4)
      {
        v8 = *(_QWORD *)(a2 + 8);
        v9 = *(_QWORD *)(a2 + 16);
        v10 = v7 + 3;
        v11 = v7 + 2;
        v12 = v7 + 6;
        v13 = *(_BYTE *)(v6 + 491) & 1;
        v14 = (int *)a3;
        return fs_SetDeviceMetrics(v13, v14, v8, v9, v10, v11, v12);
      }
      v15 = (int *)(v6 + 96);
      v16 = -vcvtd_n_s64_f64((double)*(__int16 *)(a2 + 104)* 0.0000152587891/ ((double)*(__int16 *)(*(_QWORD *)(result + 8) + 130)* 0.0000152587891), 0x10uLL);
      a3->i32[0] = 0;
      a3->i32[1] = v16;
      v17 = M3x3Flags(v15);
      result = M3x3Mul(v15, v17, a3, (const int *)1);
      v18 = *(_QWORD *)(a2 + 8);
      v19 = *(_QWORD *)(a2 + 16);
      a3[1].i32[0] = (*(_DWORD *)(v18 + 4 * ((int)v7 + 6)) - *(_DWORD *)(v18 + 4 * ((int)v7 + 2))) << 10;
      a3[1].i32[1] = (*(_DWORD *)(v19 + 4 * ((int)v7 + 6)) - *(_DWORD *)(v19 + 4 * ((int)v7 + 2))) << 10;
      a3[2].i32[0] = (*(_DWORD *)(v18 + 4 * ((int)v7 + 7)) - *(_DWORD *)(v18 + 4 * ((int)v7 + 3))) << 10;
      v20 = *(_DWORD *)(v19 + 4 * ((int)v7 + 7));
      v21 = *(_DWORD *)(v19 + 4 * ((int)v7 + 3));
    }
    else
    {
      if (a4)
      {
        v8 = *(_QWORD *)(a2 + 8);
        v9 = *(_QWORD *)(a2 + 16);
        v10 = v7 + 1;
        v12 = v7 + 4;
        v13 = *(_BYTE *)(v6 + 491) & 1;
        v14 = (int *)a3;
        v11 = v7;
        return fs_SetDeviceMetrics(v13, v14, v8, v9, v10, v11, v12);
      }
      v22 = (int *)(v6 + 96);
      a3->i32[0] = vcvtd_n_s64_f64((double)*(__int16 *)(a2 + 100)* 0.0000152587891/ ((double)*(__int16 *)(*(_QWORD *)(result + 8) + 130)* 0.0000152587891), 0x10uLL);
      a3->i32[1] = 0;
      v23 = M3x3Flags((_DWORD *)(v6 + 96));
      result = M3x3Mul(v22, v23, a3, (const int *)1);
      v24 = *(_QWORD *)(a2 + 8);
      v25 = *(_QWORD *)(a2 + 16);
      a3[1].i32[0] = (*(_DWORD *)(v24 + 4 * ((int)v7 + 4)) - *(_DWORD *)(v24 + 4 * v7)) << 10;
      a3[1].i32[1] = (*(_DWORD *)(v25 + 4 * ((int)v7 + 4)) - *(_DWORD *)(v25 + 4 * v7)) << 10;
      a3[2].i32[0] = (*(_DWORD *)(v24 + 4 * ((int)v7 + 5)) - *(_DWORD *)(v24 + 4 * ((int)v7 + 1))) << 10;
      v20 = *(_DWORD *)(v25 + 4 * ((int)v7 + 5));
      v21 = *(_DWORD *)(v25 + 4 * ((int)v7 + 1));
    }
    a3[2].i32[1] = (v20 - v21) << 10;
  }
  return result;
}

uint64_t ComputeGlyphFractionalMetrics(_QWORD *a1, uint64_t a2, int32x2_t *a3)
{
  uint64_t v3;
  __int128 v5;
  _QWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;

  v3 = a1[4];
  if (*(_BYTE *)(v3 + 128))
    return fs_FindMetrics((uint64_t)a1, a1[5] + 184, a3, 0);
  v9 = -1431655766;
  *(_QWORD *)&v5 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v8[0] = v5;
  v8[1] = v5;
  v7 = -1431655766;
  v6[0] = 2863311530;
  v6[1] = 0xAAAAAAAA00000000;
  return sbit_GetBitMapInfo(a1, (uint64_t)v6, *(_DWORD *)(v3 + 120), (int32x2_t *)v8, a3, 0);
}

_QWORD *RenderBitmap(uint64_t a1, memoryContext *a2, _DWORD *a3, uint64_t a4, int a5)
{
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  _DWORD *v19;
  _DWORD *v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  unsigned int v27;
  int v28;
  int v29;
  _QWORD *v30;
  __int16 v31;
  uint64_t v32;
  int v33;
  int v34;
  int v35;
  BOOL v36;
  int v37;
  BOOL v38;
  int v39;
  _DWORD *v40;
  int v41;
  int v42;
  signed int v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  int v48;
  int v49;
  signed int v50;
  int v51;
  int v52;
  signed int v53;
  _QWORD *v54;
  int v55;
  signed int v56;
  unsigned int v57;
  BOOL v58;
  uint64_t v59;
  int v61;
  unint64_t v62;
  int v63;
  uint64_t v64;
  char *v65;
  int v66;
  int v67;
  int v68;
  char *v69;
  unint64_t v70;
  unsigned int *v71;
  _DWORD *v72;
  unsigned int *v73;
  unsigned int *v74;
  unsigned int *v75;
  unsigned int *v76;
  int v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  _QWORD *v87;
  int v88;
  unsigned int v89;
  unsigned int v90;
  unsigned int v91;
  uint64_t v92;
  _BYTE *v93;
  _WORD *v94;
  unsigned int v95;
  unsigned int v96;
  _WORD *v97;
  _WORD *exception;

  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_QWORD *)(a1 + 40);
  if (*(_BYTE *)(v9 + 128))
  {
    v11 = *(_DWORD *)(v10 + 184);
    if (!v11)
      return 0;
    v12 = *(_DWORD *)(v9 + 104);
    if (!v12 && !*(_DWORD *)(v9 + 112) && !*(_DWORD *)(v9 + 108) && !*(_DWORD *)(v9 + 116))
      return 0;
    if (*(_BYTE *)(a1 + 64))
    {
      if (v11 >= 1)
      {
        v13 = 0;
        v14 = (*(_BYTE *)(a1 + 65) != 0) << 7;
        v16 = *(_QWORD *)(v10 + 208);
        v15 = *(_QWORD *)(v10 + 216);
        do
        {
          v17 = *(unsigned __int16 *)(v15 + 2 * v13);
          v18 = *(unsigned __int16 *)(v16 + 2 * v13);
          if (v18 < v17)
          {
            v19 = (_DWORD *)(*(_QWORD *)(v10 + 200) + 4 * v18);
            v20 = (_DWORD *)(*(_QWORD *)(v10 + 192) + 4 * v18);
            v21 = v17 - v18 + 1;
            do
            {
              *v20 = v14 + 4 * *v20;
              ++v20;
              *v19 = v14 + 4 * *v19;
              ++v19;
              --v21;
            }
            while (v21);
            v11 = *(_DWORD *)(v10 + 184);
          }
          ++v13;
        }
        while (v13 < v11);
        v12 = *(_DWORD *)(v9 + 104);
      }
      v22 = ((int)CheckedF26Dot6Add(v12, 7) >> 4) & 0xFFFFFFFC;
      v23 = ((int)CheckedF26Dot6Add(*(_DWORD *)(*(_QWORD *)(a1 + 32) + 108), 7) >> 4) & 0xFFFFFFFC;
      v24 = ((int)CheckedF26Dot6Add(*(_DWORD *)(*(_QWORD *)(a1 + 32) + 112), 56) >> 4) & 0xFFFFFFFC;
      v25 = ((int)CheckedF26Dot6Add(*(_DWORD *)(*(_QWORD *)(a1 + 32) + 116), 56) >> 4) & 0xFFFFFFFC;
    }
    else
    {
      v22 = (int)CheckedF26Dot6Add(v12, 31) >> 6;
      v23 = (int)CheckedF26Dot6Add(*(_DWORD *)(*(_QWORD *)(a1 + 32) + 108), 31) >> 6;
      v24 = (int)CheckedF26Dot6Add(*(_DWORD *)(*(_QWORD *)(a1 + 32) + 112), 32) >> 6;
      v25 = (int)CheckedF26Dot6Add(*(_DWORD *)(*(_QWORD *)(a1 + 32) + 116), 32) >> 6;
    }
    if (v22 >= -32767 && v23 >= -32767 && v24 < 0x8000 && v25 < 0x8000)
    {
      *(_WORD *)(v9 + 92) = v24;
      *(_WORD *)(v9 + 88) = v22;
      *(_WORD *)(v9 + 94) = v25;
      *(_WORD *)(v9 + 90) = v23;
      *(_WORD *)(v9 + 100) = v25 - v23;
      v31 = (v24 - v22 + 31) & 0xFFE0;
      if (v24 == v22)
        v31 = 32;
      *(_WORD *)(v9 + 102) = v31;
      v32 = *(_QWORD *)(a1 + 32);
      v33 = fs_dropOutVal(*(_DWORD *)(*(_QWORD *)(a1 + 24) + 480), *(unsigned int *)(v32 + 40));
      sc_FindExtrema4(v10 + 184, (__int16 *)(v32 + 48), v33, (memoryContext **)a1);
      v34 = a3[1];
      v35 = a3[2];
      v36 = __OFSUB__(v34, v35);
      v37 = v34 - v35;
      if ((v37 < 0) ^ v36 | (v37 == 0))
        LOWORD(v37) = *(_WORD *)(v32 + 100);
      else
        LOWORD(v37) = v37 + 1;
      if ((v37 & 0xFFFE) != 0)
        v37 = (unsigned __int16)v37;
      else
        v37 = 1;
      v38 = (v37 & 3) != 0 && *(_BYTE *)(a1 + 64) == 1;
      v39 = ((_WORD)v37 + 3) & 0xFFFC;
      if (!v38)
        v39 = v37;
      v40 = *(_DWORD **)(a1 + 40);
      *v40 = v39 * (*(unsigned __int16 *)(v32 + 102) >> 3);
      v40[4] = (2 * *(unsigned __int16 *)(v32 + 98) + 12) * v39;
      if (v33)
        v41 = (2 * *(unsigned __int16 *)(v32 + 96) + 12) * (*(__int16 *)(v32 + 92) - *(__int16 *)(v32 + 88));
      else
        v41 = 0;
      v40[8] = v41;
      *(_QWORD *)(v10 + 24) = 0;
      if (*(_BYTE *)(*(_QWORD *)(a1 + 32) + 128))
        *(_QWORD *)(v10 + 24) = ScalerNewScratch(a2, *(_DWORD *)(v10 + 16), 0);
      *(_QWORD *)(v10 + 8) = 0;
      if (*(_DWORD *)v10)
      {
        v42 = *(_BYTE *)(a1 + 64) ? -1 : a5;
        *(_QWORD *)(v10 + 8) = ScalerNewBlock(a2, *(_DWORD *)v10, v42, 0, 0, 1, 0);
        if (*(_DWORD *)v10)
        {
          *(_QWORD *)(v10 + 40) = 0;
          v43 = *(_DWORD *)(v10 + 32);
          if (v43)
          {
            v44 = (char *)ScalerNewBlock(a2, v43, -1, 0, 1, 0, 0);
            *(_QWORD *)(v10 + 40) = v44;
          }
          else
          {
            v44 = 0;
          }
          v45 = *(_QWORD *)(a1 + 32);
          v46 = *(_QWORD *)(a1 + 40);
          v47 = *(__int16 *)(v45 + 92);
          v48 = *(__int16 *)(v45 + 88);
          v49 = fs_dropOutVal(*(_DWORD *)(*(_QWORD *)(a1 + 24) + 480), *(unsigned int *)(v45 + 40));
          v51 = a3[1];
          v50 = a3[2];
          v52 = *(__int16 *)(v45 + 94);
          v53 = *(__int16 *)(v45 + 90);
          if (v51 <= v50)
          {
            v50 = *(__int16 *)(v45 + 90);
            v51 = *(__int16 *)(v45 + 94);
          }
          v54 = (_QWORD *)(v45 + 48);
          if (v51 >= v52)
            v55 = *(__int16 *)(v45 + 94);
          else
            v55 = v51;
          if (v50 <= v53)
            v56 = *(__int16 *)(v45 + 90);
          else
            v56 = v50;
          v57 = v55 - v56;
          if (v55 < v56)
            goto LABEL_79;
          v58 = v51 >= v52 && v50 <= v53;
          v59 = *(_QWORD *)(v46 + 40);
          if (!v58 || v59 == 0)
            v61 = 0;
          else
            v61 = v49;
          *v54 = *(_QWORD *)(v46 + 8);
          if (v61)
          {
            v62 = (unint64_t)(v47 - v48) << 32;
            *(_QWORD *)(v45 + 56) = v59;
            if ((unsigned __int16)v47 == (unsigned __int16)v48)
              v62 = 0x100000000;
            *(_QWORD *)(v45 + 72) = v59 + ((uint64_t)((*(unsigned __int16 *)(v45 + 96) + 2) * v62) >> 31);
            v57 = v52 - v53;
          }
          if (v57 <= 1)
            v63 = 1;
          else
            v63 = v57;
          v64 = *(_QWORD *)(v46 + 24);
          *(_QWORD *)(v45 + 64) = v64;
          *(_QWORD *)(v45 + 80) = v64 + 2 * (*(unsigned __int16 *)(v45 + 98) + 2) * v63;
          if (!sc_ScanChar2((int *)(v10 + 184), (int *)(v46 + 312), v45 + 48, v56, v55, v61))
          {
            v44 = *(char **)(v10 + 40);
LABEL_79:
            v30 = (_QWORD *)*v54;
            if (v44)
              ScalerDisposeBlock(a2, v44, -1);
            v65 = *(char **)(v10 + 24);
            if (v65)
              ScalerDisposeBlock(a2, v65, -1);
            if (*(_BYTE *)(a1 + 64))
            {
              v66 = (int)CheckedF26Dot6Add(*(_DWORD *)(*(_QWORD *)(a1 + 32) + 116), 56) >> 6;
              v67 = CheckedF26Dot6Add(*(_DWORD *)(*(_QWORD *)(a1 + 32) + 108), 7);
              if (v66 == v67 >> 6)
                v68 = 1;
              else
                v68 = v66 - (v67 >> 6);
              v30 = ScalerNewBlock(a2, v68 * (*(unsigned __int16 *)(*(_QWORD *)(a1 + 32) + 102) >> 3), 6, 0, 0, 0, 0);
              v69 = *(char **)(v10 + 8);
              v70 = (unint64_t)*(unsigned __int16 *)(*(_QWORD *)(a1 + 32) + 102) >> 3;
              v71 = (unsigned int *)v69;
              v72 = v30;
              do
              {
                v73 = (unsigned int *)((char *)v71 + v70);
                v74 = (unsigned int *)((char *)v71 + v70 + v70);
                v75 = v71;
                v71 = (unsigned int *)((char *)v74 + v70);
                v76 = v73;
                do
                {
                  v77 = 0;
                  v78 = *v75;
                  v79 = *v76;
                  v80 = *v74;
                  v81 = -4;
                  v82 = *v71;
                  do
                  {
                    v81 += 4;
                    v83 = gCount4Bits[v78 & 0xF];
                    v78 >>= 4;
                    v84 = gCount4Bits[v79 & 0xF] + v83;
                    v85 = gCount4Bits[v80 & 0xF];
                    v79 >>= 4;
                    v80 >>= 4;
                    v86 = v85 + gCount4Bits[v82 & 0xF];
                    v82 >>= 4;
                    v77 |= (v84 + v86 - ((v84 + v86) >> 4)) << v81;
                  }
                  while (v81 < 0x19);
                  ++v75;
                  ++v76;
                  ++v74;
                  ++v71;
                  *v72++ = v77;
                }
                while (v75 < v73);
                --v68;
              }
              while (v68);
              ScalerDisposeBlock(a2, v69, -1);
            }
            return v30;
          }
        }
      }
    }
    exception = __cxa_allocate_exception(2uLL);
    *exception = 5;
    __cxa_throw(exception, MEMORY[0x1E0DE4F10], 0);
  }
  v27 = *(_DWORD *)v10;
  if (*(_DWORD *)v10)
  {
    if (*(_BYTE *)(a1 + 64))
    {
      v28 = *(_DWORD *)(a4 + 28) - *(_DWORD *)(a4 + 20);
      v29 = *(_DWORD *)(a4 + 24) - *(_DWORD *)(a4 + 16);
      v27 = (((4 * v29 + 31) >> 3) & 0x1FFFFFFC) * v28;
    }
    else
    {
      v29 = 0;
      v28 = 0;
    }
    v87 = ScalerNewBlock(a2, v27, a5, 0, 0, 1, 0);
    v10 = *(_QWORD *)(a1 + 40);
  }
  else
  {
    v87 = 0;
    v29 = 0;
    v28 = 0;
  }
  *(_QWORD *)(v10 + 8) = v87;
  sbit_GetBitMapData(a1, a3, (_QWORD *)a4, 0, 1, 0);
  v30 = *(_QWORD **)a4;
  if (*(_BYTE *)(a1 + 64) && v30 && v28)
  {
    v88 = 0;
    v89 = (v29 + 7) >> 3;
    v90 = ((v29 + 31) >> 3) & 0x1FFFFFFC;
    v91 = ((4 * v29 + 31) >> 3) & 0x1FFFFFFC;
    v92 = -(uint64_t)(v90 - v89);
    v93 = (char *)v30 + v90 * v28 - 1;
    v94 = (_WORD *)((char *)v30 + v91 * v28 - 2);
    if (v89 <= 1)
      v89 = 1;
    do
    {
      v93 += v92;
      v94 -= (v91 - 4 * ((v29 + 7) >> 3)) >> 1;
      if ((v29 + 7) >= 8)
      {
        v95 = v89;
        do
        {
          *v94 = ExpandTo4Bits(void *,unsigned int,unsigned int)::expandedValues[*v93 & 0xF];
          v96 = *v93--;
          v97 = v94 - 2;
          *(v94 - 1) = *(_WORD *)((char *)ExpandTo4Bits(void *,unsigned int,unsigned int)::expandedValues
                                + (((unint64_t)v96 >> 3) & 0x1E));
          v94 -= 2;
          --v95;
        }
        while (v95);
        v94 = v97;
      }
      ++v88;
    }
    while (v88 != v28);
  }
  return v30;
}

_QWORD *RenderPath(_QWORD *a1, memoryContext *a2, _DWORD *a3, _WORD *a4)
{
  uint64_t v6;
  unsigned int *v7;
  _QWORD *result;
  __int128 v10;
  int32x2_t v11[3];
  _OWORD v12[2];
  int v13;
  unint64_t v14;

  v6 = a1[4];
  if (*(_BYTE *)(v6 + 128))
  {
    v7 = (unsigned int *)(a1[5] + 184);
    LOWORD(v12[0]) = 0;
    result = OutlineToPath(a2, v7, v12);
    *a4 = v12[0];
  }
  else
  {
    v14 = 0xAAAAAAAAAAAAAAAALL;
    *(_QWORD *)(a1[5] + 8) = 0;
    if (!*(_BYTE *)(v6 + 124))
    {
      v13 = -1431655766;
      *(_QWORD *)&v10 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v12[0] = v10;
      v12[1] = v10;
      memset(v11, 170, sizeof(v11));
      sbit_GetBitMapInfo(a1, (uint64_t)a3, *(_DWORD *)(v6 + 120), (int32x2_t *)v12, v11, *(unsigned __int8 *)(a1[3] + 484));
    }
    sbit_GetBitMapData((uint64_t)a1, a3, 0, &v14, 1, 5);
    return (_QWORD *)v14;
  }
  return result;
}

void sub_1B098CE58(void *a1)
{
  _WORD *v1;

  *v1 = *(_WORD *)__cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B098CE44);
}

uint64_t CheckedF26Dot6Add(int a1, int a2)
{
  BOOL v2;
  uint64_t result;
  _WORD *exception;

  v2 = __OFADD__(a1, a2);
  result = (a1 + a2);
  if (v2)
  {
    exception = __cxa_allocate_exception(2uLL);
    *exception = 5;
    __cxa_throw(exception, MEMORY[0x1E0DE4F10], 0);
  }
  return result;
}

uint64_t fs_SetDeviceMetrics(uint64_t result, int *a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7)
{
  int v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;

  v7 = (*(_DWORD *)(a3 + 4 * a5) - *(_DWORD *)(a3 + 4 * a6)) << 10;
  *a2 = v7;
  v8 = (*(_DWORD *)(a4 + 4 * a5) - *(_DWORD *)(a4 + 4 * a6)) << 10;
  a2[1] = v8;
  v9 = (*(_DWORD *)(a3 + 4 * a7) - *(_DWORD *)(a3 + 4 * a6)) << 10;
  a2[2] = v9;
  v10 = (*(_DWORD *)(a4 + 4 * a7) - *(_DWORD *)(a4 + 4 * a6)) << 10;
  a2[3] = v10;
  v11 = 4 * a7 + 4;
  v12 = (*(_DWORD *)(a3 + v11) - *(_DWORD *)(a3 + 4 * a5)) << 10;
  a2[4] = v12;
  v13 = (*(_DWORD *)(a4 + v11) - *(_DWORD *)(a4 + 4 * a5)) << 10;
  a2[5] = v13;
  if ((_DWORD)result)
  {
    *a2 = (v7 + 0x8000) >> 16;
    a2[1] = (v8 + 0x8000) >> 16;
    a2[2] = (v9 + 0x8000) >> 16;
    a2[3] = (v10 + 0x8000) >> 16;
    a2[4] = (v12 + 0x8000) >> 16;
    a2[5] = (v13 + 0x8000) >> 16;
  }
  return result;
}

uint64_t fs_dropOutVal(__int16 a1, uint64_t a2)
{
  uint64_t v2;

  v2 = 0;
  if ((a2 & 0x3F00) != 0 && (a2 & 0xFFFF0000) != 0x20000)
  {
    if ((a2 & 0x800) != 0 && a1 > a2
      || (a2 & 0x1000) != 0 && (a1 & 0x400) == 0
      || (a2 & 0x2000) != 0 && (a1 & 0x1000) == 0)
    {
      return 0;
    }
    else if ((a2 & 0x100) != 0
           && (a2 == 255 || a1 <= a2)
           || (a2 & 0x200) != 0 && (a1 & 0x400) != 0)
    {
      return a2;
    }
    else if ((a1 & 0x1000) == 0 || (a2 & 0x400) == 0)
    {
      return 0;
    }
    else
    {
      return a2;
    }
  }
  return v2;
}

uint64_t FPGetStandardEncodingSID(int a1)
{
  return (unsigned __int16)FPGetStandardEncodingSID(unsigned char)::gStdSIDs[a1];
}

__n128 TCFF2ParsingContext::SwipeCFF2ResultsToFont(TCFF2ParsingContext *this, TSFNTOpenTypeCFF2Font *a2, const ItemVariationStore *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 result;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;

  TParsingContext::SwipeResultsToFont(this, a2);
  v6 = *((_QWORD *)a2 + 23);
  *((_QWORD *)a2 + 23) = 0;
  *((_QWORD *)a2 + 24) = 0;
  if (v6)
    MEMORY[0x1B5E0CD14](v6, 0x1000C8052888210);
  v7 = *((_QWORD *)this + 112);
  *((_QWORD *)this + 112) = 0;
  v8 = *((_QWORD *)a2 + 36);
  *((_QWORD *)a2 + 36) = v7;
  if (v8)
  {
    MEMORY[0x1B5E0CD14](v8, 0x1000C80BDFB0063);
    v7 = *((_QWORD *)a2 + 36);
  }
  if (v7)
    v7 = *((_QWORD *)this + 98);
  *((_QWORD *)a2 + 37) = v7;
  *((_BYTE *)a2 + 304) = *((_BYTE *)this + 792);
  *((_BYTE *)a2 + 305) = *((_BYTE *)this + 848);
  *((_WORD *)a2 + 153) = *((_WORD *)this + 425);
  *((_DWORD *)a2 + 77) = *((_DWORD *)this + 213);
  *((_DWORD *)a2 + 78) = *((_DWORD *)this + 214);
  *((_BYTE *)a2 + 316) = *(_BYTE *)(*((_QWORD *)this + 86) + 2);
  *((_BYTE *)a2 + 317) = *((_BYTE *)this + 861);
  *((_WORD *)a2 + 159) = *((_WORD *)this + 431);
  *((_OWORD *)a2 + 20) = *((_OWORD *)this + 55);
  v9 = *((_QWORD *)this + 115);
  *((_QWORD *)this + 115) = 0;
  v10 = *((_QWORD *)a2 + 76);
  *((_QWORD *)a2 + 76) = v9;
  if (v10)
    std::default_delete<FDArrayEntity []>::operator()[abi:fe180100]<FDArrayEntity>((uint64_t)a2 + 608, v10);
  *((_WORD *)a2 + 308) = *((_WORD *)this + 458);
  v11 = operator new[]();
  v13 = *((_QWORD *)a2 + 78);
  *((_QWORD *)a2 + 78) = v11;
  if (v13)
    MEMORY[0x1B5E0CD14](v13, 0x1000C8052888210);
  v14 = *((unsigned __int16 *)this + 458);
  if (*((_WORD *)this + 458))
  {
    v15 = (_DWORD *)*((_QWORD *)a2 + 78);
    v16 = (_DWORD *)(*((_QWORD *)a2 + 76) + 8);
    do
    {
      *v15++ = *v16;
      v16 += 122;
      --v14;
    }
    while (v14);
  }
  v17 = *((_QWORD *)this + 116);
  *((_QWORD *)this + 116) = 0;
  v18 = *((_QWORD *)a2 + 79);
  *((_QWORD *)a2 + 79) = v17;
  if (v18)
    MEMORY[0x1B5E0CD14](v18, 0x1000C8052888210);
  *((_DWORD *)a2 + 160) = *((_DWORD *)this + 235);
  *((_DWORD *)a2 + 161) = *((_QWORD *)this + 118);
  if (*(_QWORD *)a3)
  {
    result = *(__n128 *)a3;
    v19 = *((_OWORD *)a3 + 1);
    *(_OWORD *)((char *)a2 + 264) = *((_OWORD *)a3 + 2);
    *(_OWORD *)((char *)a2 + 248) = v19;
    *(__n128 *)((char *)a2 + 232) = result;
    *((_WORD *)a2 + 140) = *(_WORD *)(*((_QWORD *)this + 93) + 448);
  }
  return result;
}

void TOpenTypeFont::TOpenTypeFont(TOpenTypeFont *this, const TType1CFFDescriptor *a2)
{
  int v4;
  uint64_t v5;
  unsigned int v6;
  _BYTE v7[920];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  *((_DWORD *)this + 2) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 21) = 0;
  *((_QWORD *)this + 23) = 0;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 27) = 0;
  *((_QWORD *)this + 28) = 0;
  *(_QWORD *)this = off_1E6178938;
  *((_QWORD *)this + 2) = &unk_1E6178B58;
  *(_OWORD *)((char *)this + 248) = 0u;
  *((_WORD *)this + 140) = 0;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *((_QWORD *)this + 36) = 0;
  *((_QWORD *)this + 37) = 0;
  *((_QWORD *)this + 40) = 0;
  *((_QWORD *)this + 41) = 0;
  *((_BYTE *)this + 336) = 0;
  memset(v7, 170, sizeof(v7));
  v4 = *((_DWORD *)a2 + 661);
  TParsingContext::TParsingContext((TParsingContext *)v7, (const TType1CFFDescriptor *)((char *)a2 + 2952), 0);
  *(_QWORD *)v7 = &off_1E617D138;
  *(_QWORD *)&v7[744] = (char *)a2 + 312;
  *(_OWORD *)&v7[752] = 0u;
  *(_DWORD *)&v7[768] = -1;
  *(_OWORD *)&v7[776] = 0u;
  v7[792] = -1;
  memset(&v7[808], 0, 24);
  *(_QWORD *)&v7[800] = &off_1E61C8D98;
  *(_OWORD *)&v7[832] = xmmword_1B0A3D7A0;
  v7[848] = 0;
  memset(&v7[850], 0, 54);
  *(_QWORD *)&v7[904] = this;
  *(_DWORD *)&v7[912] = v4;
  TCFFParsingContext::ParseCFFdata((uint64_t)v7);
  v5 = 0;
  *((_QWORD *)this + 12) = 256;
  do
  {
    if (FPGetStandardEncodingSID(unsigned char)::gStdSIDs[v5])
    {
      v6 = *(unsigned __int16 *)(*((_QWORD *)this + 37)
                               + 2 * (unsigned __int16)FPGetStandardEncodingSID(unsigned char)::gStdSIDs[v5]);
      if (*((_DWORD *)this + 35) > v6)
        *(_WORD *)(*((_QWORD *)this + 11) + v5 * 2) = v6;
    }
    ++v5;
  }
  while (v5 != 256);
  TCFFParsingContext::~TCFFParsingContext((TCFFParsingContext *)v7);
}

void sub_1B098D3D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  TType1Font *v9;
  uint64_t v11;

  TCFFParsingContext::~TCFFParsingContext((TCFFParsingContext *)&a9);
  v11 = *((_QWORD *)v9 + 36);
  *((_QWORD *)v9 + 36) = 0;
  if (v11)
    MEMORY[0x1B5E0CD14](v11, 0x1000C80BDFB0063);
  TType1Font::~TType1Font(v9);
  _Unwind_Resume(a1);
}

void TOpenTypeFont::~TOpenTypeFont(TOpenTypeFont *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E6178938;
  *((_QWORD *)this + 2) = &unk_1E6178B58;
  *((_QWORD *)this + 14) = 0;
  v2 = *((_QWORD *)this + 36);
  *((_QWORD *)this + 36) = 0;
  if (v2)
    MEMORY[0x1B5E0CD14](v2, 0x1000C80BDFB0063);
  TType1Font::~TType1Font(this);
}

uint64_t TOpenTypeFont::GetCFFData(TOpenTypeFont *this)
{
  return (*(uint64_t (**)(TOpenTypeFont *))(*(_QWORD *)this + 48))(this);
}

void TOpenTypeFont::GetCharString(TOpenTypeFont *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  unsigned int *v7;
  int v8;
  _DWORD *exception;
  _QWORD v10[4];

  if (*((_DWORD *)this + 35) <= a2 || (v4 = *((_QWORD *)this + 13)) == 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E6176998;
    exception[2] = 4;
  }
  v6 = v4 + 8 * a2;
  v8 = *(_DWORD *)(v6 + 4);
  v7 = (unsigned int *)(v6 + 4);
  if (v8)
  {
    (*(void (**)(_QWORD *__return_ptr, TOpenTypeFont *, _QWORD))(*(_QWORD *)this + 520))(v10, this, *(unsigned int *)(v4 + 8 * a2));
    TCharString::TCharString((TCharString *)a3, a2, (const TDataReference *)v10, *v7);
    v10[0] = &off_1E6176770;
    TDataReference::DucRefCount((TDataReference *)v10);
  }
  else
  {
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)a3 = &off_1E61C8568;
    *(_QWORD *)(a3 + 8) = 0;
    *(_DWORD *)(a3 + 24) = 0;
    *(_BYTE *)(a3 + 28) = 0;
    *(_QWORD *)(a3 + 32) = &off_1E6176770;
    *(_QWORD *)(a3 + 40) = 0;
    *(_QWORD *)(a3 + 48) = 0;
    *(_QWORD *)(a3 + 56) = 0;
  }
}

void sub_1B098D598(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  TDataReference::~TDataReference((TDataReference *)&a9);
  _Unwind_Resume(a1);
}

BOOL TOpenTypeFont::GetType1Encoding(TOpenTypeFont *this, unsigned __int16 *a2)
{
  uint64_t v2;
  uint64_t i;
  uint64_t v6;
  uint64_t v7;

  v2 = *((_QWORD *)this + 28);
  if (v2)
  {
    for (i = 0; i != 256; ++i)
    {
      v6 = *(int *)(v2 + 4 * i);
      if ((_DWORD)v6)
      {
        v7 = (*(uint64_t (**)(TOpenTypeFont *, uint64_t))(*(_QWORD *)this + 352))(this, v6 + *((_QWORD *)this + 28) + 1);
        if ((v7 & 0xFF00000000) != 0)
          a2[i] = v7;
      }
    }
  }
  return v2 != 0;
}

unint64_t TOpenTypeFont::GetStringOffsets(TOpenTypeFont *this, unsigned int a2)
{
  __int128 v3;
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  unint64_t v21;
  __int128 v23;
  __int128 v24;

  if (*((unsigned __int16 *)this + 153) <= a2)
    goto LABEL_16;
  *(_QWORD *)&v3 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v23 = v3;
  v24 = v3;
  (*(void (**)(__int128 *__return_ptr, TOpenTypeFont *, _QWORD, uint64_t))(*(_QWORD *)this + 520))(&v23, this, *((_DWORD *)this + 77) + *((unsigned __int8 *)this + 305) * a2, 2 * *((unsigned __int8 *)this + 305));
  if (!*((_QWORD *)&v23 + 1) || (v4 = *(_QWORD *)(*((_QWORD *)&v23 + 1) + 8)) == 0)
  {
    *(_QWORD *)&v23 = &off_1E6176770;
    TDataReference::DucRefCount((TDataReference *)&v23);
LABEL_16:
    v21 = 0;
    v7 = 0xFFFFFFFFLL;
    return v21 | v7;
  }
  v5 = (unsigned __int8 *)(v4 + v24);
  v6 = *((unsigned __int8 *)this + 305);
  v7 = 0xFFFFFFFFLL;
  v8 = v6 - 1;
  v9 = 0;
  v10 = 0;
  switch(v8)
  {
    case 0:
      goto LABEL_8;
    case 1:
      goto LABEL_7;
    case 2:
      goto LABEL_6;
    case 3:
      v11 = *v5++;
      v9 = v11 << 8;
LABEL_6:
      v12 = *v5++;
      v10 = (v9 | v12) << 8;
LABEL_7:
      v13 = *v5++;
      LODWORD(v7) = ((v10 | v13) << 8) - 1;
LABEL_8:
      v14 = *v5++;
      v7 = (v7 + v14);
      break;
    default:
      break;
  }
  v15 = 0;
  v16 = 0;
  v17 = 0;
  switch(v8)
  {
    case 0:
      goto LABEL_13;
    case 1:
      goto LABEL_12;
    case 2:
      goto LABEL_11;
    case 3:
      v18 = *v5++;
      v15 = v18 << 8;
LABEL_11:
      v19 = *v5++;
      v16 = (v15 | v19) << 8;
LABEL_12:
      v20 = *v5++;
      v17 = (v16 | v20) << 8;
LABEL_13:
      v21 = ((unint64_t)(v17 | *v5) << 32) - 0x100000000;
      break;
    default:
      v21 = 0xFFFFFFFF00000000;
      break;
  }
  *(_QWORD *)&v23 = &off_1E6176770;
  TDataReference::DucRefCount((TDataReference *)&v23);
  return v21 | v7;
}

void TOpenTypeFont::GetGlyphName(TOpenTypeFont *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  unint64_t v6;
  const char *v7;
  size_t v8;
  unint64_t StringOffsets;
  uint64_t v10;
  _QWORD v11[4];

  v4 = *((_QWORD *)this + 36);
  if (!v4 || *((_DWORD *)this + 35) <= a2)
  {
LABEL_6:
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    goto LABEL_7;
  }
  v6 = *(unsigned __int16 *)(v4 + 2 * a2);
  if (v6 > 0x186)
  {
    StringOffsets = TOpenTypeFont::GetStringOffsets(this, (unsigned __int16)(v6 - 391));
    if (StringOffsets <= HIDWORD(StringOffsets))
    {
      v10 = (HIDWORD(StringOffsets) - StringOffsets);
      (*(void (**)(_QWORD *__return_ptr, TOpenTypeFont *, _QWORD, uint64_t))(*(_QWORD *)this + 520))(v11, this, (*((_DWORD *)this + 78) + StringOffsets), v10);
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = v10;
      *(_QWORD *)a3 = &off_1E61768F8;
      *(_BYTE *)(a3 + 24) = 0;
      *(_QWORD *)(a3 + 32) = &off_1E6176770;
      *(_QWORD *)(a3 + 48) = 0;
      *(_QWORD *)(a3 + 56) = 0;
      *(_QWORD *)(a3 + 40) = 0;
      TDataReference::operator=((TDataReference *)(a3 + 32), (uint64_t)v11);
      v11[0] = &off_1E6176770;
      TDataReference::DucRefCount((TDataReference *)v11);
      return;
    }
    goto LABEL_6;
  }
  v7 = *(const char **)(kStdStrs + 8 * v6);
  v8 = strlen(v7);
  *(_QWORD *)(a3 + 8) = v7;
  *(_QWORD *)(a3 + 16) = v8;
LABEL_7:
  *(_QWORD *)a3 = &off_1E61768F8;
  *(_BYTE *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = &off_1E6176770;
  *(_QWORD *)(a3 + 40) = 0;
  *(_QWORD *)(a3 + 48) = 0;
  *(_QWORD *)(a3 + 56) = 0;
}

void sub_1B098D8C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  TDataReference::~TDataReference((TDataReference *)&a9);
  _Unwind_Resume(a1);
}

uint64_t TOpenTypeFont::VerifyGlyphName(TOpenTypeFont *this, uint64_t a2, const char *__s2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v7;
  unint64_t StringOffsets;
  size_t v9;
  const char *v10;
  int v11;
  void (**v13)(TDataReference *__hidden);
  unsigned __int8 *v14;
  uint64_t v15;

  v3 = *((_QWORD *)this + 36);
  if (v3)
  {
    v4 = a2;
    if (*((_DWORD *)this + 35) > a2)
    {
      v7 = *(unsigned __int16 *)(v3 + 2 * a2);
      if (v7 > 0x186)
      {
        StringOffsets = TOpenTypeFont::GetStringOffsets(this, (unsigned __int16)(v7 - 391));
        if (StringOffsets <= HIDWORD(StringOffsets))
        {
          v9 = (HIDWORD(StringOffsets) - StringOffsets);
          (*(void (**)(void (***__return_ptr)(TDataReference *__hidden), TOpenTypeFont *, _QWORD, size_t))(*(_QWORD *)this + 520))(&v13, this, (*((_DWORD *)this + 78) + StringOffsets), v9);
          v10 = (const char *)v14;
          if (v14)
          {
            v10 = (const char *)*((_QWORD *)v14 + 1);
            if (v10)
              v10 += v15;
          }
          if (v9 == *(unsigned __int8 *)v10)
          {
            v11 = strncmp(__s2, v10 + 1, v9);
            v13 = &off_1E6176770;
            TDataReference::DucRefCount((TDataReference *)&v13);
            if (!v11)
              return v4;
          }
          else
          {
            v13 = &off_1E6176770;
            TDataReference::DucRefCount((TDataReference *)&v13);
          }
        }
      }
      else if (!strcmp(*(const char **)(kStdStrs + 8 * v7), __s2))
      {
        return v4;
      }
    }
  }
  return 0;
}

void TOpenTypeCIDFont::TOpenTypeCIDFont(TOpenTypeCIDFont *this, const TType1CFFDescriptor *a2)
{
  _QWORD __b[135];

  __b[134] = *MEMORY[0x1E0C80C00];
  *((_DWORD *)this + 2) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 21) = 0;
  *((_QWORD *)this + 23) = 0;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 27) = 0;
  *((_QWORD *)this + 28) = 0;
  *(_OWORD *)((char *)this + 248) = 0u;
  *((_WORD *)this + 140) = 0;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *((_QWORD *)this + 36) = 0;
  *((_QWORD *)this + 37) = 0;
  *((_QWORD *)this + 40) = 0;
  *((_QWORD *)this + 41) = 0;
  *((_BYTE *)this + 336) = 0;
  *((_DWORD *)this + 101) = 0;
  *(_QWORD *)((char *)this + 388) = 0;
  *(_QWORD *)((char *)this + 396) = 0;
  *(_QWORD *)((char *)this + 412) = -1;
  *((_QWORD *)this + 53) = -1;
  *((_DWORD *)this + 108) = 65534;
  *(_QWORD *)this = off_1E6178698;
  *((_QWORD *)this + 2) = &unk_1E61788E0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 43) = &unk_1E6178900;
  *((_QWORD *)this + 59) = 0;
  *((_DWORD *)this + 120) = 0;
  *((_QWORD *)this + 56) = 0;
  *((_QWORD *)this + 57) = 0;
  *((_DWORD *)this + 116) = 0;
  *((_QWORD *)this + 55) = 0;
  memset(__b, 170, 0x430uLL);
  TCFFCIDParsingContext::TCFFCIDParsingContext((uint64_t)__b, (const TType1CFFDescriptor *)((char *)a2 + 2952), (uint64_t)this, (uint64_t)a2 + 312);
  TCFFCIDParsingContext::ParseCFFCIDdata(__b, (uint64_t)a2, 0, 0);
  TCFFCIDParsingContext::~TCFFCIDParsingContext((TCFFCIDParsingContext *)__b);
}

void sub_1B098DB50(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  va_list va;

  va_start(va, a2);
  TCFFCIDParsingContext::~TCFFCIDParsingContext((TCFFCIDParsingContext *)va);
  v4 = v2[57];
  v2[57] = 0;
  if (v4)
    MEMORY[0x1B5E0CD14](v4, 0x1000C8077774924);
  v5 = v2 + 55;
  v6 = v2[56];
  v2[56] = 0;
  if (v6)
    MEMORY[0x1B5E0CD14](v6, 0x1000C8052888210);
  v7 = *v5;
  *v5 = 0;
  if (v7)
    MEMORY[0x1B5E0CD14](v7, 0x1000C8052888210);
  MType1CIDFont::~MType1CIDFont((MType1CIDFont *)(v2 + 43));
  TOpenTypeFont::~TOpenTypeFont((TOpenTypeFont *)v2);
  _Unwind_Resume(a1);
}

void TOpenTypeCIDFont::~TOpenTypeCIDFont(TOpenTypeCIDFont *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)this = off_1E6178698;
  *((_QWORD *)this + 2) = &unk_1E61788E0;
  *((_QWORD *)this + 43) = &unk_1E6178900;
  v2 = *((_QWORD *)this + 59);
  if (v2)
    MEMORY[0x1B5E0CD14](v2, 0x1000C80BDFB0063);
  v3 = *((_QWORD *)this + 57);
  *((_QWORD *)this + 57) = 0;
  if (v3)
    MEMORY[0x1B5E0CD14](v3, 0x1000C8077774924);
  v4 = *((_QWORD *)this + 56);
  *((_QWORD *)this + 56) = 0;
  if (v4)
    MEMORY[0x1B5E0CD14](v4, 0x1000C8052888210);
  v5 = *((_QWORD *)this + 55);
  *((_QWORD *)this + 55) = 0;
  if (v5)
    MEMORY[0x1B5E0CD14](v5, 0x1000C8052888210);
  MType1CIDFont::~MType1CIDFont((TOpenTypeCIDFont *)((char *)this + 344));
  TOpenTypeFont::~TOpenTypeFont(this);
}

void TOpenTypeCIDFont::GetGlyphName(TOpenTypeCIDFont *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  unsigned __int16 v3;
  __int128 v6;
  _OWORD v7[2];
  __int128 v8;
  __int128 v9;

  v3 = a2;
  *(_QWORD *)&v6 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v8 = v6;
  v9 = v6;
  v7[0] = v6;
  v7[1] = v6;
  TOpenTypeFont::GetGlyphName(this, a2, (uint64_t)v7);
  if (*((_QWORD *)&v7[0] + 1) || *((_QWORD *)&v8 + 1) && *(_QWORD *)(*((_QWORD *)&v8 + 1) + 8))
    TStringRef::TStringRef(a3, (uint64_t)v7);
  else
    MType1CIDFont::GetCIDGlyphName((TOpenTypeCIDFont *)((char *)this + 344), v3, a3);
  TStringRef::~TStringRef((void **)v7);
}

void sub_1B098DD48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  TStringRef::~TStringRef(&a9);
  _Unwind_Resume(a1);
}

uint64_t TOpenTypeCIDFont::GetGlyphID(TOpenTypeCIDFont *this, const char *a2)
{
  uint64_t CIDForGlyphName;
  unsigned int v4;
  unsigned __int16 v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;

  CIDForGlyphName = MType1CIDFont::GetCIDForGlyphName((TOpenTypeCIDFont *)((char *)this + 344), a2);
  if ((CIDForGlyphName & 0xFF0000) == 0)
  {
LABEL_6:
    v4 = 0;
    goto LABEL_7;
  }
  v4 = *((_DWORD *)this + 35);
  if (!v4)
  {
LABEL_7:
    v8 = 0;
    v9 = 0;
    return v8 | v9 | v4;
  }
  v5 = CIDForGlyphName;
  v6 = 0;
  v7 = 0;
  while ((*(unsigned int (**)(TOpenTypeCIDFont *, uint64_t))(*(_QWORD *)this + 560))(this, v6) != v5)
  {
    v6 = (unsigned __int16)++v7;
    if (*((_DWORD *)this + 35) <= (unsigned __int16)v7)
      goto LABEL_6;
  }
  v4 = v6 & 0xFF00;
  v9 = v6;
  v8 = 0x100000000;
  return v8 | v9 | v4;
}

uint64_t TOpenTypeCIDFont::GetCID(TOpenTypeCIDFont *this, unsigned int a2)
{
  unsigned int v2;
  _WORD *CFFCharSet;

  if (*((_DWORD *)this + 35) <= a2)
  {
    LOWORD(v2) = 0;
  }
  else
  {
    v2 = a2;
    CFFCharSet = TOpenTypeCIDFont::GetCFFCharSet(this);
    if (CFFCharSet)
      LOWORD(v2) = CFFCharSet[v2];
  }
  return (unsigned __int16)v2;
}

_WORD *TOpenTypeCIDFont::GetCFFCharSet(TOpenTypeCIDFont *this)
{
  unint64_t *v1;
  _WORD *v2;
  uint64_t v4;
  __int128 v5;
  int Type;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  __int16 v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char v18;
  _DWORD *exception;
  void (**v20)(TDataReference *__hidden);
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;

  v1 = (unint64_t *)((char *)this + 472);
  v2 = (_WORD *)atomic_load((unint64_t *)this + 59);
  if (!v2)
  {
    v4 = *((unsigned int *)this + 120);
    if ((_DWORD)v4 && *((_DWORD *)this + 35))
    {
      *(_QWORD *)&v5 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v23 = v5;
      v24 = v5;
      (*(void (**)(__int128 *__return_ptr, TOpenTypeCIDFont *, uint64_t, uint64_t))(*(_QWORD *)this + 520))(&v23, this, v4, 1);
      if (*((_QWORD *)&v23 + 1) && *(_QWORD *)(*((_QWORD *)&v23 + 1) + 8) && *((_QWORD *)&v24 + 1) != (_QWORD)v24)
      {
        Type = ReadTypeInc<unsigned char>((void (***)(TDataReference *__hidden))&v23);
        v2 = (_WORD *)operator new[]();
        *v2 = 0;
        v8 = (v4 + 1);
        if ((Type - 1) >= 2)
        {
          if (Type)
          {
            exception = __cxa_allocate_exception(0x10uLL);
            *(_QWORD *)exception = &off_1E6176998;
            exception[2] = 4;
          }
          (*(void (**)(void (***__return_ptr)(TDataReference *__hidden), TOpenTypeCIDFont *, uint64_t, uint64_t))(*(_QWORD *)this + 520))(&v20, this, v8, 2 * (*((_DWORD *)this + 35) - 1));
          TDataReference::DucRefCount((TDataReference *)&v23);
          *((_QWORD *)&v23 + 1) = v21;
          v24 = v22;
          v20 = &off_1E6176770;
          v21 = 0;
          TDataReference::DucRefCount((TDataReference *)&v20);
          if (*((_DWORD *)this + 35) >= 2u)
          {
            v16 = 1;
            do
              v2[v16++] = ReadTypeInc<unsigned short>((void (***)(TDataReference *__hidden))&v23);
            while (v16 < *((unsigned int *)this + 35));
          }
        }
        else
        {
          if (Type == 1)
            v9 = 3;
          else
            v9 = 4;
          if (*((_DWORD *)this + 35) >= 2u)
          {
            v10 = 1;
            do
            {
              (*(void (**)(void (***__return_ptr)(TDataReference *__hidden), TOpenTypeCIDFont *, uint64_t, uint64_t))(*(_QWORD *)this + 520))(&v20, this, v8, v9);
              TDataReference::DucRefCount((TDataReference *)&v23);
              *((_QWORD *)&v23 + 1) = v21;
              v24 = v22;
              v20 = &off_1E6176770;
              v21 = 0;
              TDataReference::DucRefCount((TDataReference *)&v20);
              v11 = ReadTypeInc<unsigned short>((void (***)(TDataReference *__hidden))&v23);
              if (Type == 1)
                v12 = ReadTypeInc<unsigned char>((void (***)(TDataReference *__hidden))&v23);
              else
                v12 = ReadTypeInc<unsigned short>((void (***)(TDataReference *__hidden))&v23);
              v13 = 0;
              v14 = v10 + v12 + 1;
              v15 = *((unsigned int *)this + 35);
              do
              {
                v2[v10 + v13] = v11;
                if (!(_WORD)v12)
                  goto LABEL_24;
                LOWORD(v12) = v12 - 1;
                ++v11;
                ++v13;
              }
              while ((unint64_t)v10 + v13 < v15);
              v14 = v10 + v13;
LABEL_24:
              v8 = (v8 + v9);
              v10 = v14;
            }
            while (v14 < v15);
          }
        }
        while (1)
        {
          v17 = __ldaxr(v1);
          if (v17)
            break;
          if (!__stlxr((unint64_t)v2, v1))
          {
            v18 = 1;
            goto LABEL_34;
          }
        }
        v18 = 0;
        __clrex();
LABEL_34:
        if ((v18 & 1) == 0)
        {
          MEMORY[0x1B5E0CD14](v2, 0x1000C80BDFB0063);
          v2 = (_WORD *)v17;
        }
      }
      else
      {
        v2 = 0;
      }
      *(_QWORD *)&v23 = &off_1E6176770;
      TDataReference::DucRefCount((TDataReference *)&v23);
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

void sub_1B098E118(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;

  TDataReference::~TDataReference((TDataReference *)&a9);
  MEMORY[0x1B5E0CD14](v13, 0x1000C80BDFB0063);
  TDataReference::~TDataReference((TDataReference *)&a13);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'TOpenTypeCIDFont::GetCID(TOpenTypeCIDFont *this, unsigned int a2)
{
  unsigned int v2;
  _WORD *CFFCharSet;

  if (*((_DWORD *)this - 51) <= a2)
  {
    LOWORD(v2) = 0;
  }
  else
  {
    v2 = a2;
    CFFCharSet = TOpenTypeCIDFont::GetCFFCharSet((TOpenTypeCIDFont *)((char *)this - 344));
    if (CFFCharSet)
      LOWORD(v2) = CFFCharSet[v2];
  }
  return (unsigned __int16)v2;
}

void TOpenTypeCFFMemoryFont::TOpenTypeCFFMemoryFont(TOpenTypeCFFMemoryFont *this, const TType1CFFDescriptor *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;

  TOpenTypeFont::TOpenTypeFont(this, a2);
  *v4 = &off_1E6178458;
  v4[2] = &unk_1E6178678;
  v5 = *((_QWORD *)a2 + 370);
  if (v5 && (v6 = *(_QWORD *)(v5 + 8)) != 0)
    v7 = v6 + *((_QWORD *)a2 + 371);
  else
    v7 = 0;
  v8 = *((_QWORD *)a2 + 372);
  v9 = *((_QWORD *)a2 + 371);
  *((_QWORD *)this + 43) = &off_1E6176678;
  v10 = operator new();
  *(_DWORD *)(v10 + 32) = 0;
  v11 = (unsigned int *)(v10 + 32);
  *(_QWORD *)v10 = &off_1E6176818;
  *(_QWORD *)(v10 + 8) = v7;
  *(_QWORD *)(v10 + 16) = v8 - v9;
  *(_QWORD *)(v10 + 24) = &unk_1E6176840;
  *(_DWORD *)(v10 + 36) = 0;
  *((_QWORD *)this + 44) = v10;
  *((_DWORD *)this + 90) = 0;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
}

void sub_1B098E290(_Unwind_Exception *a1)
{
  TOpenTypeFont *v1;

  TOpenTypeFont::~TOpenTypeFont(v1);
  _Unwind_Resume(a1);
}

void TOpenTypeCFFMemoryFont::~TOpenTypeCFFMemoryFont(TOpenTypeCFFMemoryFont *this)
{
  *(_QWORD *)this = &off_1E6178458;
  *((_QWORD *)this + 2) = &unk_1E6178678;
  TInMemoryDataReference::~TInMemoryDataReference((TOpenTypeCFFMemoryFont *)((char *)this + 344));
  TOpenTypeFont::~TOpenTypeFont(this);
}

{
  *(_QWORD *)this = &off_1E6178458;
  *((_QWORD *)this + 2) = &unk_1E6178678;
  TInMemoryDataReference::~TInMemoryDataReference((TOpenTypeCFFMemoryFont *)((char *)this + 344));
  TOpenTypeFont::~TOpenTypeFont(this);
  JUMPOUT(0x1B5E0CD38);
}

void `non-virtual thunk to'TOpenTypeCFFMemoryFont::~TOpenTypeCFFMemoryFont(TOpenTypeCFFMemoryFont *this)
{
  *(_QWORD *)this = &unk_1E6178678;
  *((_QWORD *)this - 2) = &off_1E6178458;
  TInMemoryDataReference::~TInMemoryDataReference((TOpenTypeCFFMemoryFont *)((char *)this + 328));
  TOpenTypeFont::~TOpenTypeFont((TOpenTypeCFFMemoryFont *)((char *)this - 16));
}

{
  TOpenTypeCFFMemoryFont::~TOpenTypeCFFMemoryFont((TOpenTypeCFFMemoryFont *)((char *)this - 16));
}

uint64_t TOpenTypeCFFMemoryFont::GetKind(TOpenTypeCFFMemoryFont *this)
{
  return 25;
}

uint64_t TOpenTypeCFFMemoryFont::GetFontRef(TOpenTypeCFFMemoryFont *this)
{
  return (uint64_t)this + 344;
}

void TOpenTypeCFFCIDMemoryFont::TOpenTypeCFFCIDMemoryFont(TOpenTypeCFFCIDMemoryFont *this, const TType1CFFDescriptor *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;

  TOpenTypeCIDFont::TOpenTypeCIDFont(this, a2);
  *v4 = &off_1E61781B8;
  v4[2] = &unk_1E6178400;
  v4[43] = &unk_1E6178420;
  v5 = *((_QWORD *)a2 + 370);
  if (v5 && (v6 = *(_QWORD *)(v5 + 8)) != 0)
    v7 = v6 + *((_QWORD *)a2 + 371);
  else
    v7 = 0;
  v8 = *((_QWORD *)a2 + 372);
  v9 = *((_QWORD *)a2 + 371);
  *((_QWORD *)this + 61) = &off_1E6176678;
  v10 = operator new();
  *(_DWORD *)(v10 + 32) = 0;
  v11 = (unsigned int *)(v10 + 32);
  *(_QWORD *)v10 = &off_1E6176818;
  *(_QWORD *)(v10 + 8) = v7;
  *(_QWORD *)(v10 + 16) = v8 - v9;
  *(_QWORD *)(v10 + 24) = &unk_1E6176840;
  *(_DWORD *)(v10 + 36) = 0;
  *((_QWORD *)this + 62) = v10;
  *((_DWORD *)this + 126) = 0;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
}

void sub_1B098E458(_Unwind_Exception *a1)
{
  TOpenTypeCIDFont *v1;

  TOpenTypeCIDFont::~TOpenTypeCIDFont(v1);
  _Unwind_Resume(a1);
}

void TOpenTypeCFFCIDMemoryFont::~TOpenTypeCFFCIDMemoryFont(TOpenTypeCFFCIDMemoryFont *this)
{
  *(_QWORD *)this = &off_1E61781B8;
  *((_QWORD *)this + 2) = &unk_1E6178400;
  *((_QWORD *)this + 43) = &unk_1E6178420;
  TInMemoryDataReference::~TInMemoryDataReference((TOpenTypeCFFCIDMemoryFont *)((char *)this + 488));
  TOpenTypeCIDFont::~TOpenTypeCIDFont(this);
}

{
  *(_QWORD *)this = &off_1E61781B8;
  *((_QWORD *)this + 2) = &unk_1E6178400;
  *((_QWORD *)this + 43) = &unk_1E6178420;
  TInMemoryDataReference::~TInMemoryDataReference((TOpenTypeCFFCIDMemoryFont *)((char *)this + 488));
  TOpenTypeCIDFont::~TOpenTypeCIDFont(this);
  JUMPOUT(0x1B5E0CD38);
}

void `non-virtual thunk to'TOpenTypeCFFCIDMemoryFont::~TOpenTypeCFFCIDMemoryFont(TOpenTypeCFFCIDMemoryFont *this)
{
  *(_QWORD *)this = &unk_1E6178400;
  *((_QWORD *)this + 41) = &unk_1E6178420;
  *((_QWORD *)this - 2) = &off_1E61781B8;
  TInMemoryDataReference::~TInMemoryDataReference((TOpenTypeCFFCIDMemoryFont *)((char *)this + 472));
  TOpenTypeCIDFont::~TOpenTypeCIDFont((TOpenTypeCFFCIDMemoryFont *)((char *)this - 16));
}

{
  TOpenTypeCIDFont *v1;

  v1 = (TOpenTypeCFFCIDMemoryFont *)((char *)this - 344);
  *((_QWORD *)this - 43) = &off_1E61781B8;
  *((_QWORD *)this - 41) = &unk_1E6178400;
  *(_QWORD *)this = &unk_1E6178420;
  TInMemoryDataReference::~TInMemoryDataReference((TOpenTypeCFFCIDMemoryFont *)((char *)this + 144));
  TOpenTypeCIDFont::~TOpenTypeCIDFont(v1);
}

{
  TOpenTypeCFFCIDMemoryFont::~TOpenTypeCFFCIDMemoryFont((TOpenTypeCFFCIDMemoryFont *)((char *)this - 16));
}

{
  TOpenTypeCFFCIDMemoryFont::~TOpenTypeCFFCIDMemoryFont((TOpenTypeCFFCIDMemoryFont *)((char *)this - 344));
}

uint64_t TOpenTypeCFFCIDMemoryFont::GetKind(TOpenTypeCFFCIDMemoryFont *this)
{
  return 27;
}

uint64_t TOpenTypeCFFCIDMemoryFont::GetFontRef(TOpenTypeCFFCIDMemoryFont *this)
{
  return (uint64_t)this + 488;
}

void TOpenTypeFileDataFont::TOpenTypeFileDataFont(TOpenTypeFileDataFont *this, const TFileDataSurrogate *a2, const TType1CFFDescriptor *a3)
{
  _QWORD *v5;
  uint64_t v6;

  TOpenTypeFont::TOpenTypeFont(this, a3);
  *v5 = &off_1E6177F78;
  v5[2] = &unk_1E6178198;
  v6 = *((_QWORD *)a2 + 1);
  *((_QWORD *)this + 43) = &off_1E61766C0;
  *((_QWORD *)this + 44) = v6;
  (*(void (**)(uint64_t))(*(_QWORD *)(v6 + 24) + 24))(v6 + 24);
}

void sub_1B098E610(_Unwind_Exception *a1)
{
  TOpenTypeFont *v1;

  TOpenTypeFont::~TOpenTypeFont(v1);
  _Unwind_Resume(a1);
}

void TOpenTypeFileDataFont::~TOpenTypeFileDataFont(TOpenTypeFileDataFont *this)
{
  *(_QWORD *)this = &off_1E6177F78;
  *((_QWORD *)this + 2) = &unk_1E6178198;
  TFileDataSurrogate::~TFileDataSurrogate((const TFileFragmentReference **)this + 43);
  TOpenTypeFont::~TOpenTypeFont(this);
}

{
  *(_QWORD *)this = &off_1E6177F78;
  *((_QWORD *)this + 2) = &unk_1E6178198;
  TFileDataSurrogate::~TFileDataSurrogate((const TFileFragmentReference **)this + 43);
  TOpenTypeFont::~TOpenTypeFont(this);
  JUMPOUT(0x1B5E0CD38);
}

void `non-virtual thunk to'TOpenTypeFileDataFont::~TOpenTypeFileDataFont(TOpenTypeFileDataFont *this)
{
  *(_QWORD *)this = &unk_1E6178198;
  *((_QWORD *)this - 2) = &off_1E6177F78;
  TFileDataSurrogate::~TFileDataSurrogate((const TFileFragmentReference **)this + 41);
  TOpenTypeFont::~TOpenTypeFont((TOpenTypeFileDataFont *)((char *)this - 16));
}

{
  TOpenTypeFileDataFont::~TOpenTypeFileDataFont((TOpenTypeFileDataFont *)((char *)this - 16));
}

uint64_t TOpenTypeFileDataFont::GetKind(TOpenTypeFileDataFont *this)
{
  return 26;
}

uint64_t TOpenTypeFileDataFont::GetFontRef(TOpenTypeFileDataFont *this)
{
  return (uint64_t)this + 344;
}

void TOpenTypeCIDFileDataFont::TOpenTypeCIDFileDataFont(TOpenTypeCIDFileDataFont *this, const TFileDataSurrogate *a2, const TType1CFFDescriptor *a3)
{
  _QWORD *v5;
  uint64_t v6;

  TOpenTypeCIDFont::TOpenTypeCIDFont(this, a3);
  *v5 = &off_1E6177CD8;
  v5[2] = &unk_1E6177F20;
  v5[43] = &unk_1E6177F40;
  v6 = *((_QWORD *)a2 + 1);
  *((_QWORD *)this + 61) = &off_1E61766C0;
  *((_QWORD *)this + 62) = v6;
  (*(void (**)(uint64_t))(*(_QWORD *)(v6 + 24) + 24))(v6 + 24);
}

void sub_1B098E76C(_Unwind_Exception *a1)
{
  TOpenTypeCIDFont *v1;

  TOpenTypeCIDFont::~TOpenTypeCIDFont(v1);
  _Unwind_Resume(a1);
}

void TOpenTypeCIDFileDataFont::~TOpenTypeCIDFileDataFont(TOpenTypeCIDFileDataFont *this)
{
  *(_QWORD *)this = &off_1E6177CD8;
  *((_QWORD *)this + 2) = &unk_1E6177F20;
  *((_QWORD *)this + 43) = &unk_1E6177F40;
  TFileDataSurrogate::~TFileDataSurrogate((const TFileFragmentReference **)this + 61);
  TOpenTypeCIDFont::~TOpenTypeCIDFont(this);
}

{
  *(_QWORD *)this = &off_1E6177CD8;
  *((_QWORD *)this + 2) = &unk_1E6177F20;
  *((_QWORD *)this + 43) = &unk_1E6177F40;
  TFileDataSurrogate::~TFileDataSurrogate((const TFileFragmentReference **)this + 61);
  TOpenTypeCIDFont::~TOpenTypeCIDFont(this);
  JUMPOUT(0x1B5E0CD38);
}

void `non-virtual thunk to'TOpenTypeCIDFileDataFont::~TOpenTypeCIDFileDataFont(TOpenTypeCIDFileDataFont *this)
{
  *(_QWORD *)this = &unk_1E6177F20;
  *((_QWORD *)this + 41) = &unk_1E6177F40;
  *((_QWORD *)this - 2) = &off_1E6177CD8;
  TFileDataSurrogate::~TFileDataSurrogate((const TFileFragmentReference **)this + 59);
  TOpenTypeCIDFont::~TOpenTypeCIDFont((TOpenTypeCIDFileDataFont *)((char *)this - 16));
}

{
  TOpenTypeCIDFont *v1;

  v1 = (TOpenTypeCIDFileDataFont *)((char *)this - 344);
  *((_QWORD *)this - 43) = &off_1E6177CD8;
  *((_QWORD *)this - 41) = &unk_1E6177F20;
  *(_QWORD *)this = &unk_1E6177F40;
  TFileDataSurrogate::~TFileDataSurrogate((const TFileFragmentReference **)this + 18);
  TOpenTypeCIDFont::~TOpenTypeCIDFont(v1);
}

{
  TOpenTypeCIDFileDataFont::~TOpenTypeCIDFileDataFont((TOpenTypeCIDFileDataFont *)((char *)this - 16));
}

{
  TOpenTypeCIDFileDataFont::~TOpenTypeCIDFileDataFont((TOpenTypeCIDFileDataFont *)((char *)this - 344));
}

uint64_t TOpenTypeCIDFileDataFont::GetKind(TOpenTypeCIDFileDataFont *this)
{
  return 28;
}

uint64_t TOpenTypeCIDFileDataFont::GetFontRef(TOpenTypeCIDFileDataFont *this)
{
  return (uint64_t)this + 488;
}

void `non-virtual thunk to'TSFNTOpenTypeData::~TSFNTOpenTypeData(TSFNTOpenTypeData *this)
{
  TSFNTFont::~TSFNTFont((TSFNTOpenTypeData *)((char *)this - 16));
}

{
  TSFNTFont::~TSFNTFont((TSFNTOpenTypeData *)((char *)this - 16));
  JUMPOUT(0x1B5E0CD38);
}

void TSFNTOpenTypeData::~TSFNTOpenTypeData(TSFNTOpenTypeData *this)
{
  TSFNTFont::~TSFNTFont(this);
  JUMPOUT(0x1B5E0CD38);
}

uint64_t TSFNTOpenTypeData::GetNumberOfGlyphs(TSFNTOpenTypeData *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 26) + 168))(*((_QWORD *)this + 26));
}

uint64_t TheadTable::GetUnitsPerEm(TheadTable *this)
{
  unsigned int v1;
  _DWORD *exception;

  v1 = bswap32(*(unsigned __int16 *)(TheadTable::GetHead(this) + 18));
  if ((unsigned __int16)(HIWORD(v1) - 16385) <= 0xC00Eu)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E6176998;
    exception[2] = 4;
  }
  return HIWORD(v1);
}

void OTFSetupHFMXAndVFMX(TSFNTFont *a1, int a2, uint64_t *a3, uint64_t *a4)
{
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t TableEnd;
  uint64_t v12;
  _WORD *v13;
  unsigned int v14;
  __int16 v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _WORD *v22;
  uint64_t v23;
  _DWORD *exception;
  _DWORD *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  unint64_t v29;

  v29 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v8 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v27 = v8;
  v28 = v8;
  v26 = v8;
  TsfntTable::TsfntTable((TsfntTable *)&v26, a1, 1751672161);
  if (*((_QWORD *)&v26 + 1))
  {
    v9 = *(_QWORD *)(*((_QWORD *)&v26 + 1) + 8);
    if (v9)
    {
      v10 = v27;
      TableEnd = TsfntTable::GetTableEnd((TsfntTable *)&v26);
      v12 = *((_QWORD *)&v26 + 1);
      if (*((_QWORD *)&v26 + 1))
      {
        v12 = *(_QWORD *)(*((_QWORD *)&v26 + 1) + 8);
        if (v12)
          v12 += v27;
      }
      if (TableEnd - v12 <= 0x23)
      {
        exception = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)exception = &off_1E6176998;
        exception[2] = 4;
      }
      v13 = (_WORD *)operator new[]();
      *v13 = *(_WORD *)(v9 + v10 + 4);
      v13[1] = *(_WORD *)(v9 + v10 + 6);
      v13[2] = *(_WORD *)(v9 + v10 + 8);
      v14 = bswap32(18 * (-a2 >> 8)) >> 16;
      if (a2)
        v15 = -6141;
      else
        v15 = 256;
      if (!a2)
        LOWORD(v14) = 0;
      v13[3] = v15;
      v13[4] = v14;
      v13[5] = 0;
      v16 = *a3;
      *a3 = (uint64_t)v13;
      if (v16)
        MEMORY[0x1B5E0CD14](v16, 0x1000C80BDFB0063);
    }
  }
  *(_QWORD *)&v26 = &off_1E6176770;
  TDataReference::DucRefCount((TDataReference *)&v26);
  v29 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v17 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v17 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v27 = v17;
  v28 = v17;
  v26 = v17;
  TsfntTable::TsfntTable((TsfntTable *)&v26, a1, 1986553185);
  if (*((_QWORD *)&v26 + 1))
  {
    v18 = *(_QWORD *)(*((_QWORD *)&v26 + 1) + 8);
    if (v18)
    {
      v19 = v27;
      v20 = TsfntTable::GetTableEnd((TsfntTable *)&v26);
      v21 = *((_QWORD *)&v26 + 1);
      if (*((_QWORD *)&v26 + 1))
      {
        v21 = *(_QWORD *)(*((_QWORD *)&v26 + 1) + 8);
        if (v21)
          v21 += v27;
      }
      if (v20 - v21 <= 0x23)
      {
        v25 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v25 = &off_1E6176998;
        v25[2] = 4;
      }
      v22 = (_WORD *)operator new[]();
      *v22 = *(_WORD *)(v18 + v19 + 4);
      v22[1] = bswap32((bswap32(*(unsigned __int16 *)(v18 + v19 + 6)) >> 16)- (bswap32(*(unsigned __int16 *)(v18 + v19 + 8)) >> 16)) >> 16;
      v22[2] = *(_WORD *)(v18 + v19 + 18);
      v22[3] = *(_WORD *)(v18 + v19 + 20);
      v22[4] = *(_WORD *)(v18 + v19 + 22);
      v23 = *a4;
      *a4 = (uint64_t)v22;
      if (v23)
        MEMORY[0x1B5E0CD14](v23, 0x1000C80BDFB0063);
    }
  }
  *(_QWORD *)&v26 = &off_1E6176770;
  TDataReference::DucRefCount((TDataReference *)&v26);
}

void sub_1B098ECA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __cxa_end_catch();
  TsfntTable::~TsfntTable((TsfntTable *)&a9);
  _Unwind_Resume(a1);
}

void sub_1B098ECF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __cxa_end_catch();
  TsfntTable::~TsfntTable((TsfntTable *)&a9);
  _Unwind_Resume(a1);
}

void sub_1B098ED10()
{
  JUMPOUT(0x1B098ED18);
}

void TSFNTOpenTypeFont::~TSFNTOpenTypeFont(TSFNTOpenTypeFont *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = off_1E6177A98;
  *((_QWORD *)this + 2) = &unk_1E6177CB8;
  v2 = *((_QWORD *)this + 75);
  *((_QWORD *)this + 75) = 0;
  if (v2)
    MEMORY[0x1B5E0CD14](v2, 0x1000C80BDFB0063);
  v3 = *((_QWORD *)this + 74);
  *((_QWORD *)this + 74) = 0;
  if (v3)
    MEMORY[0x1B5E0CD14](v3, 0x1000C80BDFB0063);
  *((_QWORD *)this + 70) = &off_1E6176770;
  TDataReference::DucRefCount((TSFNTOpenTypeFont *)((char *)this + 560));
  TSFNTFont::~TSFNTFont((TSFNTOpenTypeFont *)((char *)this + 344));
  TOpenTypeFont::~TOpenTypeFont(this);
}

void TSFNTOpenTypeFont::GetNames(TSFNTOpenTypeFont *this@<X0>, _QWORD *a2@<X8>)
{
  TSFNTFont::GetNames((TSFNTOpenTypeFont *)((char *)this + 344), a2);
}

void TSFNTOpenTypeFont::GetSomeNames(TSFNTOpenTypeFont *this@<X0>, uint64_t *a2@<X8>)
{
  TSFNTFont::GetSomeNames((TSFNTOpenTypeFont *)((char *)this + 344), a2);
}

double TSFNTOpenTypeFont::GetCaretInfo(TSFNTOpenTypeFont *this, __int16 *a2, __int16 *a3, unsigned __int16 *a4)
{
  double result;

  TSFNTFont::GetCaretInfo((TSFNTOpenTypeFont *)((char *)this + 344), a2, a3, a4);
  if (!*a3)
    return TType1Font::GetCaretInfo(this, a2, a3, a4);
  return result;
}

uint64_t TSFNTOpenTypeFont::GetHFMX(TSFNTOpenTypeFont *this)
{
  return *((_QWORD *)this + 74);
}

_QWORD *TSFNTOpenTypeFont::GetCFFData@<X0>(TSFNTOpenTypeFont *this@<X0>, int a2@<W1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  return TDataReference::SubdataFrom((_QWORD *)this + 70, a2, a3, a4);
}

void TSFNTOpenTypeFont::GetGlyphName(TSFNTOpenTypeFont *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  __int128 v6;
  _OWORD v7[2];
  __int128 v8;
  __int128 v9;

  *(_QWORD *)&v6 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v8 = v6;
  v9 = v6;
  v7[0] = v6;
  v7[1] = v6;
  TOpenTypeFont::GetGlyphName(this, a2, (uint64_t)v7);
  if (*((_QWORD *)&v7[0] + 1) || *((_QWORD *)&v8 + 1) && *(_QWORD *)(*((_QWORD *)&v8 + 1) + 8))
    TStringRef::TStringRef(a3, (uint64_t)v7);
  else
    TSFNTFont::GetGlyphName((TSFNTOpenTypeFont *)((char *)this + 344), a2, a3);
  TStringRef::~TStringRef((void **)v7);
}

void sub_1B098EED8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  TStringRef::~TStringRef(&a9);
  _Unwind_Resume(a1);
}

uint64_t TSFNTOpenTypeFont::VerifyGlyphName(TSFNTOpenTypeFont *this, uint64_t a2, const char *a3)
{
  uint64_t result;

  result = TOpenTypeFont::VerifyGlyphName(this, a2, a3);
  if (!(_DWORD)result)
    return TSFNTFont::VerifyGlyphName((TSFNTOpenTypeFont *)((char *)this + 344), a2, a3);
  return result;
}

uint64_t TSFNTOpenTypeFont::GetGlyphsForCharacterRange(TSFNTOpenTypeFont *this, unsigned __int16 *a2, CFRange a3)
{
  return TSFNTFont::GetGlyphsForCharacterRange((TSFNTOpenTypeFont *)((char *)this + 344), a2, a3);
}

uint64_t TSFNTOpenTypeFont::GetCharactersPerGlyphs(TSFNTOpenTypeFont *this, const unsigned __int16 *a2, unsigned __int16 *a3, unint64_t a4)
{
  return TSFNTFont::GetCharactersPerGlyphs((TSFNTOpenTypeFont *)((char *)this + 344), a2, a3, a4);
}

__CFCharacterSet *TSFNTOpenTypeFont::CopyCharacterSet(TSFNTOpenTypeFont *this, unsigned int a2)
{
  TSFNTFont *v3;
  __CFCharacterSet *Mutable;

  v3 = (TSFNTOpenTypeFont *)((char *)this + 344);
  Mutable = CFCharacterSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00]);
  return TSFNTFont::FillCharacterSet(v3, Mutable, a2);
}

__CFCharacterSet *TSFNTOpenTypeFont::GetOS2UnicodeRanges(TSFNTOpenTypeFont *this, unsigned int a2, unsigned int *a3, __n128 a4)
{
  return TSFNTFont::GetOS2UnicodeRanges((TSFNTOpenTypeFont *)((char *)this + 344), a2, a3, a4);
}

unint64_t TSFNTOpenTypeFont::GetCharactersForGlyph(TSFNTOpenTypeFont *this, unsigned __int16 a2, unsigned __int16 *a3, unint64_t a4)
{
  return TSFNTFont::GetCharactersForGlyph((TSFNTOpenTypeFont *)((char *)this + 344), a2, a3, a4);
}

void TOpenTypeDataForkFont::~TOpenTypeDataForkFont(TOpenTypeDataForkFont *this)
{
  *(_QWORD *)this = &off_1E6177858;
  *((_QWORD *)this + 2) = &unk_1E6177A78;
  TFileDataSurrogate::~TFileDataSurrogate((const TFileFragmentReference **)this + 76);
  TSFNTOpenTypeFont::~TSFNTOpenTypeFont(this);
}

{
  *(_QWORD *)this = &off_1E6177858;
  *((_QWORD *)this + 2) = &unk_1E6177A78;
  TFileDataSurrogate::~TFileDataSurrogate((const TFileFragmentReference **)this + 76);
  TSFNTOpenTypeFont::~TSFNTOpenTypeFont(this);
  JUMPOUT(0x1B5E0CD38);
}

void `non-virtual thunk to'TOpenTypeDataForkFont::~TOpenTypeDataForkFont(TOpenTypeDataForkFont *this)
{
  *(_QWORD *)this = &unk_1E6177A78;
  *((_QWORD *)this - 2) = &off_1E6177858;
  TFileDataSurrogate::~TFileDataSurrogate((const TFileFragmentReference **)this + 74);
  TSFNTOpenTypeFont::~TSFNTOpenTypeFont((TOpenTypeDataForkFont *)((char *)this - 16));
}

{
  TOpenTypeDataForkFont::~TOpenTypeDataForkFont((TOpenTypeDataForkFont *)((char *)this - 16));
}

uint64_t TOpenTypeDataForkFont::GetRefCon(TOpenTypeDataForkFont *this)
{
  return *((unsigned int *)this + 156);
}

uint64_t TOpenTypeMemoryFont::TOpenTypeMemoryFont(uint64_t a1, uint64_t a2)
{
  void (**v5)(TSFNTData *__hidden);
  int v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (**v11)(TDataReference *__hidden);
  __int128 v12;
  __int128 v13;
  int v14;
  void (**v15)(TDataReference *__hidden);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  int v20;
  char v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;

  v6 = 0;
  v9 = 0;
  v10 = 0;
  v11 = &off_1E6176770;
  v12 = 0u;
  v13 = 0u;
  v14 = 0;
  v20 = 0;
  v21 = 0;
  v22 = 0u;
  v23 = 0u;
  v24 = 0;
  v15 = &off_1E6176770;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v25 = -1;
  v26 = 0;
  v5 = &off_1E6178EE0;
  v7 = &unk_1E61790E8;
  v8 = 0;
  v27 = a2;
  TSFNTOpenTypeFont::TSFNTOpenTypeFont((TSFNTOpenTypeFont *)a1, (const TSFNTData *)&v5);
  TSFNTFont::~TSFNTFont((TSFNTFont *)&v5);
  *(_QWORD *)a1 = &off_1E6177618;
  *(_QWORD *)(a1 + 16) = &unk_1E6177838;
  *(_QWORD *)(a1 + 608) = &off_1E6176678;
  *(_QWORD *)(a1 + 616) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 624) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  TDataReference::DucRefCount((TDataReference *)(a1 + 392));
  *(_QWORD *)(a1 + 400) = 0;
  *(_QWORD *)(a1 + 408) = 0;
  *(_QWORD *)(a1 + 416) = 0;
  *(_QWORD *)(a1 + 544) = a1 + 608;
  return a1;
}

void sub_1B098F168(_Unwind_Exception *a1)
{
  TSFNTOpenTypeFont *v1;
  TInMemoryDataReference *v2;

  TInMemoryDataReference::~TInMemoryDataReference(v2);
  TSFNTOpenTypeFont::~TSFNTOpenTypeFont(v1);
  _Unwind_Resume(a1);
}

void TOpenTypeMemoryFont::~TOpenTypeMemoryFont(TOpenTypeMemoryFont *this)
{
  *(_QWORD *)this = &off_1E6177618;
  *((_QWORD *)this + 2) = &unk_1E6177838;
  TInMemoryDataReference::~TInMemoryDataReference((TOpenTypeMemoryFont *)((char *)this + 608));
  TSFNTOpenTypeFont::~TSFNTOpenTypeFont(this);
}

{
  *(_QWORD *)this = &off_1E6177618;
  *((_QWORD *)this + 2) = &unk_1E6177838;
  TInMemoryDataReference::~TInMemoryDataReference((TOpenTypeMemoryFont *)((char *)this + 608));
  TSFNTOpenTypeFont::~TSFNTOpenTypeFont(this);
}

{
  *(_QWORD *)this = &off_1E6177618;
  *((_QWORD *)this + 2) = &unk_1E6177838;
  TInMemoryDataReference::~TInMemoryDataReference((TOpenTypeMemoryFont *)((char *)this + 608));
  TSFNTOpenTypeFont::~TSFNTOpenTypeFont(this);
  JUMPOUT(0x1B5E0CD38);
}

void `non-virtual thunk to'TOpenTypeMemoryFont::~TOpenTypeMemoryFont(TOpenTypeMemoryFont *this)
{
  *(_QWORD *)this = &unk_1E6177838;
  *((_QWORD *)this - 2) = &off_1E6177618;
  TInMemoryDataReference::~TInMemoryDataReference((TOpenTypeMemoryFont *)((char *)this + 592));
  TSFNTOpenTypeFont::~TSFNTOpenTypeFont((TOpenTypeMemoryFont *)((char *)this - 16));
}

{
  TOpenTypeMemoryFont::~TOpenTypeMemoryFont((TOpenTypeMemoryFont *)((char *)this - 16));
}

uint64_t TOpenTypeMemoryFont::GetKind(TOpenTypeMemoryFont *this)
{
  return 18;
}

uint64_t TOpenTypeMemoryFont::GetFontRef(TOpenTypeMemoryFont *this)
{
  return (uint64_t)this + 608;
}

void TOpenTypeWOFFFont::TOpenTypeWOFFFont(TOpenTypeWOFFFont *this, CFDataRef theData, int a3)
{
  const UInt8 *BytePtr;
  CFIndex Length;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  _QWORD v11[2];
  int v12;

  BytePtr = CFDataGetBytePtr(theData);
  Length = CFDataGetLength(theData);
  v11[0] = &off_1E6176678;
  v8 = operator new();
  *(_QWORD *)v8 = &off_1E6176818;
  *(_QWORD *)(v8 + 8) = BytePtr;
  *(_QWORD *)(v8 + 16) = Length;
  *(_QWORD *)(v8 + 24) = &unk_1E6176840;
  *(_DWORD *)(v8 + 36) = 0;
  v11[1] = v8;
  *(_DWORD *)(v8 + 32) = 0;
  v9 = (unsigned int *)(v8 + 32);
  v12 = a3;
  do
    v10 = __ldxr(v9);
  while (__stxr(v10 + 1, v9));
  TOpenTypeMemoryFont::TOpenTypeMemoryFont((uint64_t)this, (uint64_t)v11);
  TInMemoryDataReference::~TInMemoryDataReference((TInMemoryDataReference *)v11);
  *(_QWORD *)this = &off_1E61B2FC0;
  *((_QWORD *)this + 2) = &unk_1E61B31E0;
  *((_QWORD *)this + 79) = CFRetain(theData);
}

void sub_1B098F394(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  TOpenTypeMemoryFont *v10;

  TOpenTypeMemoryFont::~TOpenTypeMemoryFont(v10);
  _Unwind_Resume(a1);
}

void TOpenTypeWOFFFont::~TOpenTypeWOFFFont(TOpenTypeWOFFFont *this)
{
  *(_QWORD *)this = &off_1E61B2FC0;
  *((_QWORD *)this + 2) = &unk_1E61B31E0;
  CFRelease(*((CFTypeRef *)this + 79));
  *(_QWORD *)this = &off_1E6177618;
  *((_QWORD *)this + 2) = &unk_1E6177838;
  TInMemoryDataReference::~TInMemoryDataReference((TOpenTypeWOFFFont *)((char *)this + 608));
  TSFNTOpenTypeFont::~TSFNTOpenTypeFont(this);
}

{
  TOpenTypeWOFFFont::~TOpenTypeWOFFFont(this);
  JUMPOUT(0x1B5E0CD38);
}

void `non-virtual thunk to'TOpenTypeWOFFFont::~TOpenTypeWOFFFont(TOpenTypeWOFFFont *this)
{
  TOpenTypeWOFFFont::~TOpenTypeWOFFFont((TOpenTypeWOFFFont *)((char *)this - 16));
}

{
  TOpenTypeWOFFFont::~TOpenTypeWOFFFont((TOpenTypeWOFFFont *)((char *)this - 16));
  JUMPOUT(0x1B5E0CD38);
}

void TOpenTypeCIDWOFFFont::TOpenTypeCIDWOFFFont(TOpenTypeCIDWOFFFont *this, CFDataRef theData, int a3)
{
  const UInt8 *BytePtr;
  CFIndex Length;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  _QWORD v11[2];
  int v12;

  BytePtr = CFDataGetBytePtr(theData);
  Length = CFDataGetLength(theData);
  v11[0] = &off_1E6176678;
  v8 = operator new();
  *(_QWORD *)v8 = &off_1E6176818;
  *(_QWORD *)(v8 + 8) = BytePtr;
  *(_QWORD *)(v8 + 16) = Length;
  *(_QWORD *)(v8 + 24) = &unk_1E6176840;
  *(_DWORD *)(v8 + 36) = 0;
  v11[1] = v8;
  *(_DWORD *)(v8 + 32) = 0;
  v9 = (unsigned int *)(v8 + 32);
  v12 = a3;
  do
    v10 = __ldxr(v9);
  while (__stxr(v10 + 1, v9));
  TOpenTypeCIDMemoryFont::TOpenTypeCIDMemoryFont((uint64_t)this, (uint64_t)v11);
  TInMemoryDataReference::~TInMemoryDataReference((TInMemoryDataReference *)v11);
  *(_QWORD *)this = &off_1E61B3200;
  *((_QWORD *)this + 2) = &unk_1E61B3448;
  *((_QWORD *)this + 43) = &unk_1E61B3468;
  *((_QWORD *)this + 97) = CFRetain(theData);
}

void sub_1B098F558(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  TOpenTypeCIDMemoryFont *v10;

  TOpenTypeCIDMemoryFont::~TOpenTypeCIDMemoryFont(v10);
  _Unwind_Resume(a1);
}

uint64_t TOpenTypeCIDMemoryFont::TOpenTypeCIDMemoryFont(uint64_t a1, uint64_t a2)
{
  void (**v5)(TSFNTData *__hidden);
  int v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (**v11)(TDataReference *__hidden);
  __int128 v12;
  __int128 v13;
  int v14;
  void (**v15)(TDataReference *__hidden);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  int v20;
  char v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;

  v6 = 0;
  v9 = 0;
  v10 = 0;
  v11 = &off_1E6176770;
  v12 = 0u;
  v13 = 0u;
  v14 = 0;
  v20 = 0;
  v21 = 0;
  v22 = 0u;
  v23 = 0u;
  v24 = 0;
  v15 = &off_1E6176770;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v25 = -1;
  v26 = 0;
  v5 = &off_1E6178EE0;
  v7 = &unk_1E61790E8;
  v8 = 0;
  v27 = a2;
  TSFNTOpenTypeCIDFont::TSFNTOpenTypeCIDFont((TSFNTOpenTypeCIDFont *)a1, (const TSFNTData *)&v5);
  TSFNTFont::~TSFNTFont((TSFNTFont *)&v5);
  *(_QWORD *)a1 = &off_1E6176E38;
  *(_QWORD *)(a1 + 16) = &unk_1E6177080;
  *(_QWORD *)(a1 + 344) = &unk_1E61770A0;
  *(_QWORD *)(a1 + 752) = &off_1E6176678;
  *(_QWORD *)(a1 + 760) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 768) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  TDataReference::DucRefCount((TDataReference *)(a1 + 536));
  *(_QWORD *)(a1 + 552) = 0;
  *(_QWORD *)(a1 + 544) = 0;
  *(_QWORD *)(a1 + 560) = 0;
  *(_QWORD *)(a1 + 688) = a1 + 752;
  return a1;
}

void sub_1B098F680(_Unwind_Exception *a1)
{
  TSFNTOpenTypeCIDFont *v1;
  TInMemoryDataReference *v2;

  TInMemoryDataReference::~TInMemoryDataReference(v2);
  TSFNTOpenTypeCIDFont::~TSFNTOpenTypeCIDFont(v1);
  _Unwind_Resume(a1);
}

void TOpenTypeCIDMemoryFont::~TOpenTypeCIDMemoryFont(TOpenTypeCIDMemoryFont *this)
{
  *(_QWORD *)this = &off_1E6176E38;
  *((_QWORD *)this + 2) = &unk_1E6177080;
  *((_QWORD *)this + 43) = &unk_1E61770A0;
  TInMemoryDataReference::~TInMemoryDataReference((TOpenTypeCIDMemoryFont *)((char *)this + 752));
  TSFNTOpenTypeCIDFont::~TSFNTOpenTypeCIDFont(this);
}

{
  *(_QWORD *)this = &off_1E6176E38;
  *((_QWORD *)this + 2) = &unk_1E6177080;
  *((_QWORD *)this + 43) = &unk_1E61770A0;
  TInMemoryDataReference::~TInMemoryDataReference((TOpenTypeCIDMemoryFont *)((char *)this + 752));
  TSFNTOpenTypeCIDFont::~TSFNTOpenTypeCIDFont(this);
}

{
  *(_QWORD *)this = &off_1E6176E38;
  *((_QWORD *)this + 2) = &unk_1E6177080;
  *((_QWORD *)this + 43) = &unk_1E61770A0;
  TInMemoryDataReference::~TInMemoryDataReference((TOpenTypeCIDMemoryFont *)((char *)this + 752));
  TSFNTOpenTypeCIDFont::~TSFNTOpenTypeCIDFont(this);
  JUMPOUT(0x1B5E0CD38);
}

void TOpenTypeCIDWOFFFont::~TOpenTypeCIDWOFFFont(TOpenTypeCIDWOFFFont *this)
{
  *(_QWORD *)this = &off_1E61B3200;
  *((_QWORD *)this + 2) = &unk_1E61B3448;
  *((_QWORD *)this + 43) = &unk_1E61B3468;
  CFRelease(*((CFTypeRef *)this + 97));
  *(_QWORD *)this = &off_1E6176E38;
  *((_QWORD *)this + 2) = &unk_1E6177080;
  *((_QWORD *)this + 43) = &unk_1E61770A0;
  TInMemoryDataReference::~TInMemoryDataReference((TOpenTypeCIDWOFFFont *)((char *)this + 752));
  TSFNTOpenTypeCIDFont::~TSFNTOpenTypeCIDFont(this);
}

{
  TOpenTypeCIDWOFFFont::~TOpenTypeCIDWOFFFont(this);
  JUMPOUT(0x1B5E0CD38);
}

void `non-virtual thunk to'TOpenTypeCIDWOFFFont::~TOpenTypeCIDWOFFFont(TOpenTypeCIDWOFFFont *this)
{
  TOpenTypeCIDWOFFFont::~TOpenTypeCIDWOFFFont((TOpenTypeCIDWOFFFont *)((char *)this - 16));
}

{
  TOpenTypeCIDWOFFFont::~TOpenTypeCIDWOFFFont((TOpenTypeCIDWOFFFont *)((char *)this - 344));
}

{
  TOpenTypeCIDWOFFFont::~TOpenTypeCIDWOFFFont((TOpenTypeCIDWOFFFont *)((char *)this - 16));
  JUMPOUT(0x1B5E0CD38);
}

{
  TOpenTypeCIDWOFFFont::~TOpenTypeCIDWOFFFont((TOpenTypeCIDWOFFFont *)((char *)this - 344));
  JUMPOUT(0x1B5E0CD38);
}

void `non-virtual thunk to'TSFNTOpenTypeCIDData::~TSFNTOpenTypeCIDData(TSFNTOpenTypeCIDData *this)
{
  TSFNTFont::~TSFNTFont((TSFNTOpenTypeCIDData *)((char *)this - 16));
}

{
  TSFNTFont::~TSFNTFont((TSFNTOpenTypeCIDData *)((char *)this - 16));
  JUMPOUT(0x1B5E0CD38);
}

void TSFNTOpenTypeCIDData::~TSFNTOpenTypeCIDData(TSFNTOpenTypeCIDData *this)
{
  TSFNTFont::~TSFNTFont(this);
  JUMPOUT(0x1B5E0CD38);
}

uint64_t TSFNTOpenTypeCIDData::GetNumberOfGlyphs(TSFNTOpenTypeCIDData *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 26) + 168))(*((_QWORD *)this + 26));
}

void TSFNTOpenTypeCIDFont::~TSFNTOpenTypeCIDFont(TSFNTOpenTypeCIDFont *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = off_1E6177378;
  *((_QWORD *)this + 2) = &unk_1E61775C0;
  *((_QWORD *)this + 43) = &unk_1E61775E0;
  v2 = *((_QWORD *)this + 93);
  *((_QWORD *)this + 93) = 0;
  if (v2)
    MEMORY[0x1B5E0CD14](v2, 0x1000C80BDFB0063);
  v3 = *((_QWORD *)this + 92);
  *((_QWORD *)this + 92) = 0;
  if (v3)
    MEMORY[0x1B5E0CD14](v3, 0x1000C80BDFB0063);
  *((_QWORD *)this + 88) = &off_1E6176770;
  TDataReference::DucRefCount((TSFNTOpenTypeCIDFont *)((char *)this + 704));
  TSFNTFont::~TSFNTFont((TSFNTOpenTypeCIDFont *)((char *)this + 488));
  TOpenTypeCIDFont::~TOpenTypeCIDFont(this);
}

uint64_t TSFNTOpenTypeCIDFont::GetCID(TSFNTOpenTypeCIDFont *this, unsigned int a2)
{
  unsigned int v2;
  _WORD *CFFCharSet;

  if (*((_DWORD *)this + 35) <= a2)
  {
    LOWORD(v2) = 0;
  }
  else
  {
    v2 = a2;
    CFFCharSet = TOpenTypeCIDFont::GetCFFCharSet(this);
    if (CFFCharSet)
      LOWORD(v2) = CFFCharSet[v2];
  }
  return (unsigned __int16)v2;
}

uint64_t `non-virtual thunk to'TSFNTOpenTypeCIDFont::GetCID(TSFNTOpenTypeCIDFont *this, unsigned int a2)
{
  unsigned int v2;
  _WORD *CFFCharSet;

  if (*((_DWORD *)this - 51) <= a2)
  {
    LOWORD(v2) = 0;
  }
  else
  {
    v2 = a2;
    CFFCharSet = TOpenTypeCIDFont::GetCFFCharSet((TSFNTOpenTypeCIDFont *)((char *)this - 344));
    if (CFFCharSet)
      LOWORD(v2) = CFFCharSet[v2];
  }
  return (unsigned __int16)v2;
}

uint64_t TSFNTOpenTypeCIDFont::GetGlyphsForCIDs(os_unfair_lock_s *this, unsigned __int16 *a2, uint64_t a3, unsigned __int16 *a4)
{
  _WORD *CIDGTable;
  unsigned int v10;
  unint64_t v11;
  int v12;
  unsigned __int16 v13;
  unint64_t v14;

  v14 = 0xAAAAAAAAAAAAAAAALL;
  CIDGTable = (_WORD *)TSFNTFont::GetCIDGTable(this + 122, &v14);
  if (CIDGTable && v14 >= 0x90 && !*CIDGTable)
  {
    v10 = bswap32((unsigned __int16)CIDGTable[71]);
    v11 = v14 >> 1;
    if (&CIDGTable[HIWORD(v10) + 72] <= (_WORD *)((char *)CIDGTable + v14))
      v11 = HIWORD(v10);
    if (v11)
    {
      for (; a3; --a3)
      {
        v12 = *a2++;
        *a4++ = bswap32((unsigned __int16)CIDGTable[v12 + 72]) >> 16;
      }
    }
    else
    {
      for (; a3; --a3)
      {
        v13 = *a2++;
        *a4++ = v13;
      }
    }
  }
  else
  {
    TOpenTypeCIDFont::GetGlyphsForCIDs((TOpenTypeCIDFont *)this, a2, a3, a4);
  }
  return 1;
}

uint64_t TOpenTypeCIDFont::GetGlyphsForCIDs(TOpenTypeCIDFont *this, unsigned __int16 *a2, uint64_t a3, unsigned __int16 *a4)
{
  int v8;
  int v9;
  uint64_t v10;
  unsigned __int16 v11;

  if (TOpenTypeCIDFont::GetCFFCharSet(this))
  {
    for (; a3; --a3)
    {
      v9 = *a2++;
      v8 = v9;
      if (*((_DWORD *)this + 35))
      {
        v10 = 0;
        while ((*(unsigned int (**)(TOpenTypeCIDFont *, uint64_t))(*(_QWORD *)this + 560))(this, v10) != v8)
        {
          v10 = (v10 + 1);
          if (v10 >= *((_DWORD *)this + 35))
            goto LABEL_7;
        }
      }
      else
      {
LABEL_7:
        LOWORD(v10) = -1;
      }
      *a4++ = v10;
    }
  }
  else
  {
    for (; a3; --a3)
    {
      v11 = *a2++;
      *a4++ = v11;
    }
  }
  return 1;
}

void TSFNTOpenTypeCIDFont::GetNames(TSFNTOpenTypeCIDFont *this@<X0>, _QWORD *a2@<X8>)
{
  TSFNTFont::GetNames((TSFNTOpenTypeCIDFont *)((char *)this + 488), a2);
}

void TSFNTOpenTypeCIDFont::GetSomeNames(TSFNTOpenTypeCIDFont *this@<X0>, uint64_t *a2@<X8>)
{
  TSFNTFont::GetSomeNames((TSFNTOpenTypeCIDFont *)((char *)this + 488), a2);
}

double TSFNTOpenTypeCIDFont::GetCaretInfo(TSFNTOpenTypeCIDFont *this, __int16 *a2, __int16 *a3, unsigned __int16 *a4)
{
  double result;

  TSFNTFont::GetCaretInfo((TSFNTOpenTypeCIDFont *)((char *)this + 488), a2, a3, a4);
  if (!*a3)
    return TType1Font::GetCaretInfo(this, a2, a3, a4);
  return result;
}

__n128 TSFNTOpenTypeCIDFont::GetVerticalMetrics(TSFNTOpenTypeCIDFont *this, int *a2, int *a3, int *a4, unsigned int *a5, int *a6, int *a7, int *a8, int *a9, double *a10, double *a11, double *a12, double *a13)
{
  __n128 result;

  TSFNTFont::GetVerticalMetrics((TSFNTOpenTypeCIDFont *)((char *)this + 488), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
  return result;
}

uint64_t TSFNTOpenTypeCIDFont::GetHFMX(TSFNTOpenTypeCIDFont *this)
{
  return *((_QWORD *)this + 92);
}

_QWORD *TSFNTOpenTypeCIDFont::GetCFFData@<X0>(TSFNTOpenTypeCIDFont *this@<X0>, int a2@<W1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  return TDataReference::SubdataFrom((_QWORD *)this + 88, a2, a3, a4);
}

void TSFNTOpenTypeCIDFont::GetGlyphName(TSFNTOpenTypeCIDFont *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;

  *(_QWORD *)&v6 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v9 = v6;
  v10 = v6;
  v7 = v6;
  v8 = v6;
  TOpenTypeCIDFont::GetGlyphName(this, a2, (uint64_t)&v7);
  if ((_QWORD)v8)
    TStringRef::TStringRef(a3, (uint64_t)&v7);
  else
    TSFNTFont::GetGlyphName((TSFNTOpenTypeCIDFont *)((char *)this + 488), a2, a3);
  TStringRef::~TStringRef((void **)&v7);
}

void sub_1B098FC2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  TStringRef::~TStringRef(&a9);
  _Unwind_Resume(a1);
}

uint64_t TSFNTOpenTypeCIDFont::VerifyGlyphName(TSFNTOpenTypeCIDFont *this, uint64_t a2, const char *a3)
{
  uint64_t result;

  result = TOpenTypeFont::VerifyGlyphName(this, a2, a3);
  if (!(_DWORD)result)
    return TSFNTFont::VerifyGlyphName((TSFNTOpenTypeCIDFont *)((char *)this + 488), a2, a3);
  return result;
}

unint64_t TSFNTOpenTypeCIDFont::GetGlyphID(TSFNTOpenTypeCIDFont *this, const char *a2)
{
  unint64_t result;

  result = TOpenTypeCIDFont::GetGlyphID(this, a2);
  if (!HIDWORD(result))
    return TSFNTFont::GetGlyphID((TSFNTOpenTypeCIDFont *)((char *)this + 488), a2);
  return result;
}

uint64_t TSFNTOpenTypeCIDFont::GetGlyphsForCharacterRange(TSFNTOpenTypeCIDFont *this, unsigned __int16 *a2, CFRange a3)
{
  return TSFNTFont::GetGlyphsForCharacterRange((TSFNTOpenTypeCIDFont *)((char *)this + 488), a2, a3);
}

uint64_t TSFNTOpenTypeCIDFont::GetCharactersPerGlyphs(TSFNTOpenTypeCIDFont *this, const unsigned __int16 *a2, unsigned __int16 *a3, unint64_t a4)
{
  return TSFNTFont::GetCharactersPerGlyphs((TSFNTOpenTypeCIDFont *)((char *)this + 488), a2, a3, a4);
}

__CFCharacterSet *TSFNTOpenTypeCIDFont::CopyCharacterSet(TSFNTOpenTypeCIDFont *this, unsigned int a2)
{
  TSFNTFont *v3;
  __CFCharacterSet *Mutable;

  v3 = (TSFNTOpenTypeCIDFont *)((char *)this + 488);
  Mutable = CFCharacterSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00]);
  return TSFNTFont::FillCharacterSet(v3, Mutable, a2);
}

__CFCharacterSet *TSFNTOpenTypeCIDFont::GetOS2UnicodeRanges(TSFNTOpenTypeCIDFont *this, unsigned int a2, unsigned int *a3, __n128 a4)
{
  return TSFNTFont::GetOS2UnicodeRanges((TSFNTOpenTypeCIDFont *)((char *)this + 488), a2, a3, a4);
}

unint64_t TSFNTOpenTypeCIDFont::GetCharactersForGlyph(TSFNTOpenTypeCIDFont *this, unsigned __int16 a2, unsigned __int16 *a3, unint64_t a4)
{
  return TSFNTFont::GetCharactersForGlyph((TSFNTOpenTypeCIDFont *)((char *)this + 488), a2, a3, a4);
}

void TOpenTypeCIDDataForkFont::~TOpenTypeCIDDataForkFont(TOpenTypeCIDDataForkFont *this)
{
  *(_QWORD *)this = &off_1E61770D8;
  *((_QWORD *)this + 2) = &unk_1E6177320;
  *((_QWORD *)this + 43) = &unk_1E6177340;
  TFileDataSurrogate::~TFileDataSurrogate((const TFileFragmentReference **)this + 94);
  TSFNTOpenTypeCIDFont::~TSFNTOpenTypeCIDFont(this);
}

{
  *(_QWORD *)this = &off_1E61770D8;
  *((_QWORD *)this + 2) = &unk_1E6177320;
  *((_QWORD *)this + 43) = &unk_1E6177340;
  TFileDataSurrogate::~TFileDataSurrogate((const TFileFragmentReference **)this + 94);
  TSFNTOpenTypeCIDFont::~TSFNTOpenTypeCIDFont(this);
  JUMPOUT(0x1B5E0CD38);
}

void `non-virtual thunk to'TOpenTypeCIDDataForkFont::~TOpenTypeCIDDataForkFont(TOpenTypeCIDDataForkFont *this)
{
  *(_QWORD *)this = &unk_1E6177320;
  *((_QWORD *)this + 41) = &unk_1E6177340;
  *((_QWORD *)this - 2) = &off_1E61770D8;
  TFileDataSurrogate::~TFileDataSurrogate((const TFileFragmentReference **)this + 92);
  TSFNTOpenTypeCIDFont::~TSFNTOpenTypeCIDFont((TOpenTypeCIDDataForkFont *)((char *)this - 16));
}

{
  TSFNTOpenTypeCIDFont *v1;

  v1 = (TOpenTypeCIDDataForkFont *)((char *)this - 344);
  *((_QWORD *)this - 43) = &off_1E61770D8;
  *((_QWORD *)this - 41) = &unk_1E6177320;
  *(_QWORD *)this = &unk_1E6177340;
  TFileDataSurrogate::~TFileDataSurrogate((const TFileFragmentReference **)this + 51);
  TSFNTOpenTypeCIDFont::~TSFNTOpenTypeCIDFont(v1);
}

{
  TOpenTypeCIDDataForkFont::~TOpenTypeCIDDataForkFont((TOpenTypeCIDDataForkFont *)((char *)this - 16));
}

{
  TOpenTypeCIDDataForkFont::~TOpenTypeCIDDataForkFont((TOpenTypeCIDDataForkFont *)((char *)this - 344));
}

uint64_t TOpenTypeCIDDataForkFont::GetRefCon(TOpenTypeCIDDataForkFont *this)
{
  return *((unsigned int *)this + 192);
}

void `non-virtual thunk to'TOpenTypeCIDMemoryFont::~TOpenTypeCIDMemoryFont(TOpenTypeCIDMemoryFont *this)
{
  *(_QWORD *)this = &unk_1E6177080;
  *((_QWORD *)this + 41) = &unk_1E61770A0;
  *((_QWORD *)this - 2) = &off_1E6176E38;
  TInMemoryDataReference::~TInMemoryDataReference((TOpenTypeCIDMemoryFont *)((char *)this + 736));
  TSFNTOpenTypeCIDFont::~TSFNTOpenTypeCIDFont((TOpenTypeCIDMemoryFont *)((char *)this - 16));
}

{
  TSFNTOpenTypeCIDFont *v1;

  v1 = (TOpenTypeCIDMemoryFont *)((char *)this - 344);
  *((_QWORD *)this - 43) = &off_1E6176E38;
  *((_QWORD *)this - 41) = &unk_1E6177080;
  *(_QWORD *)this = &unk_1E61770A0;
  TInMemoryDataReference::~TInMemoryDataReference((TOpenTypeCIDMemoryFont *)((char *)this + 408));
  TSFNTOpenTypeCIDFont::~TSFNTOpenTypeCIDFont(v1);
}

{
  TOpenTypeCIDMemoryFont::~TOpenTypeCIDMemoryFont((TOpenTypeCIDMemoryFont *)((char *)this - 16));
}

{
  TOpenTypeCIDMemoryFont::~TOpenTypeCIDMemoryFont((TOpenTypeCIDMemoryFont *)((char *)this - 344));
}

uint64_t TOpenTypeCIDMemoryFont::GetKind(TOpenTypeCIDMemoryFont *this)
{
  return 19;
}

uint64_t TOpenTypeCIDMemoryFont::GetFontRef(TOpenTypeCIDMemoryFont *this)
{
  return (uint64_t)this + 752;
}

void TSFNTOpenTypeCFF2Font::TSFNTOpenTypeCFF2Font(TSFNTOpenTypeCFF2Font *this, const TSFNTData *a2)
{
  __int128 v4;
  _DWORD *exception;
  _OWORD v6[3];
  unint64_t v7;
  _BYTE v8[960];
  _QWORD __b[375];

  __b[374] = *MEMORY[0x1E0C80C00];
  *((_DWORD *)this + 2) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 21) = 0;
  *((_QWORD *)this + 23) = 0;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 36) = 0;
  *((_QWORD *)this + 37) = 0;
  *((_QWORD *)this + 40) = 0;
  *((_QWORD *)this + 41) = 0;
  *((_BYTE *)this + 336) = 0;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 248) = 0u;
  *((_WORD *)this + 140) = 0;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_QWORD *)this = off_1E6177A98;
  *((_QWORD *)this + 2) = &unk_1E6177CB8;
  *((_DWORD *)this + 88) = 0;
  *((_QWORD *)this + 47) = 0;
  *((_QWORD *)this + 48) = 0;
  *((_QWORD *)this + 43) = off_1E6179108;
  *((_QWORD *)this + 45) = &unk_1E6179310;
  *((_QWORD *)this + 46) = 0;
  *((_QWORD *)this + 49) = &off_1E6176770;
  *((_OWORD *)this + 25) = 0u;
  *((_OWORD *)this + 26) = 0u;
  *((_DWORD *)this + 108) = 0;
  *((_QWORD *)this + 55) = &off_1E6176770;
  *((_QWORD *)this + 56) = 0;
  *((_QWORD *)this + 57) = 0;
  *((_QWORD *)this + 58) = 0;
  *((_BYTE *)this + 472) = 0;
  *((_DWORD *)this + 119) = *((_DWORD *)a2 + 33);
  *((_BYTE *)this + 480) = 0;
  *(_OWORD *)((char *)this + 488) = 0u;
  *(_OWORD *)((char *)this + 504) = 0u;
  *((_QWORD *)this + 65) = 0;
  *((_DWORD *)this + 132) = *((_DWORD *)a2 + 46);
  *(_QWORD *)((char *)this + 532) = 0xFFFFFFFFLL;
  *((_QWORD *)this + 68) = *((_QWORD *)a2 + 25);
  *((_QWORD *)this + 43) = &off_1E61B2D98;
  *((_QWORD *)this + 45) = &unk_1E61B2FA0;
  *((_QWORD *)this + 69) = this;
  TSFNTFont::GetTable((TSFNTOpenTypeCFF2Font *)((char *)this + 344), 1128678962, 0, (_QWORD *)this + 70);
  *((_OWORD *)this + 37) = 0u;
  if (TSFNTFont::GetFormat(a2) != 1330926671)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E6176998;
    exception[2] = 4;
  }
  *((_BYTE *)this + 336) = 1;
  *(_QWORD *)this = off_1E61CBE40;
  *((_QWORD *)this + 2) = &unk_1E61CC070;
  *((_QWORD *)this + 76) = 0;
  *((_WORD *)this + 308) = 0;
  *((_QWORD *)this + 78) = 0;
  *((_QWORD *)this + 80) = 0;
  *((_QWORD *)this + 79) = 0;
  memset(__b, 170, 0xBB0uLL);
  TSFNTType1CFFDescriptor::TSFNTType1CFFDescriptor((TSFNTType1CFFDescriptor *)__b, a2, 1128678962, 1);
  __b[0] = &off_1E61CA568;
  memset(v8, 170, sizeof(v8));
  TCFF2ParsingContext::TCFF2ParsingContext((uint64_t)v8, (const TDataReference *)&__b[369], (uint64_t)this, (uint64_t)&__b[39], SHIDWORD(__b[330]));
  TCFF2ParsingContext::ParseCFF2data((uint64_t)v8, (uint64_t)__b);
  v7 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v6[1] = v4;
  v6[2] = v4;
  v6[0] = v4;
  TheadTable::TheadTable((TheadTable *)v6, a2);
  if (*((_QWORD *)&v6[0] + 1) && *(_QWORD *)(*((_QWORD *)&v6[0] + 1) + 8))
    *((_WORD *)this + 68) = TheadTable::GetUnitsPerEm((TheadTable *)v6);
  *(_QWORD *)&v6[0] = &off_1E6176770;
  TDataReference::DucRefCount((TDataReference *)v6);
  TCFF2ParsingContext::~TCFF2ParsingContext((TCFF2ParsingContext *)v8);
  TType1CFFDescriptor::~TType1CFFDescriptor((TType1CFFDescriptor *)__b);
}

void sub_1B0990278(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  uint64_t *v16;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;

  TheadTable::~TheadTable((TheadTable *)&a9);
  TCFF2ParsingContext::~TCFF2ParsingContext((TCFF2ParsingContext *)&a16);
  TType1CFFDescriptor::~TType1CFFDescriptor((TType1CFFDescriptor *)&STACK[0x3F8]);
  v18 = v16 + 78;
  v19 = v16[79];
  v16[79] = 0;
  if (v19)
    MEMORY[0x1B5E0CD14](v19, 0x1000C8052888210);
  v20 = v16 + 76;
  v21 = *v18;
  *v18 = 0;
  if (v21)
    MEMORY[0x1B5E0CD14](v21, 0x1000C8052888210);
  v22 = *v20;
  *v20 = 0;
  if (v22)
    std::default_delete<FDArrayEntity []>::operator()[abi:fe180100]<FDArrayEntity>((uint64_t)(v16 + 76), v22);
  TSFNTOpenTypeFont::~TSFNTOpenTypeFont((TSFNTOpenTypeFont *)v16);
  _Unwind_Resume(a1);
}

void TSFNTOpenTypeCFF2Font::~TSFNTOpenTypeCFF2Font(TSFNTOpenTypeCFF2Font *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = off_1E61CBE40;
  *((_QWORD *)this + 2) = &unk_1E61CC070;
  v2 = *((_QWORD *)this + 79);
  *((_QWORD *)this + 79) = 0;
  if (v2)
    MEMORY[0x1B5E0CD14](v2, 0x1000C8052888210);
  v3 = *((_QWORD *)this + 78);
  *((_QWORD *)this + 78) = 0;
  if (v3)
    MEMORY[0x1B5E0CD14](v3, 0x1000C8052888210);
  v4 = *((_QWORD *)this + 76);
  *((_QWORD *)this + 76) = 0;
  if (v4)
    std::default_delete<FDArrayEntity []>::operator()[abi:fe180100]<FDArrayEntity>((uint64_t)this + 608, v4);
  TSFNTOpenTypeFont::~TSFNTOpenTypeFont(this);
}

uint64_t TSFNTOpenTypeCFF2Font::GetHorizontalMetrics(TSFNTOpenTypeCFF2Font *this, int *a2, int *a3, int *a4, int *a5, int *a6, int *a7, int *a8, int *a9, int *a10, BOOL *a11, BOOL *a12, double *a13, int *a14, int *a15, double *a16, double *a17, double *a18, double *a19, __int16 *a20,__int16 *a21)
{
  return TType1Font::GetHorizontalMetrics(this, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21);
}

uint64_t TSFNTOpenTypeCFF2Font::GetNumberOfGlyphs(TSFNTOpenTypeCFF2Font *this)
{
  return *((unsigned int *)this + 35);
}

uint64_t TSFNTOpenTypeCFF2Font::GetKind(TSFNTOpenTypeCFF2Font *this)
{
  return 33;
}

uint64_t TOpenTypeCFF2MemoryFont::TOpenTypeCFF2MemoryFont(uint64_t a1, uint64_t a2)
{
  void (**v5)(TSFNTData *__hidden);
  int v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (**v11)(TDataReference *__hidden);
  __int128 v12;
  __int128 v13;
  int v14;
  void (**v15)(TDataReference *__hidden);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  int v20;
  char v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;

  v6 = 0;
  v9 = 0;
  v10 = 0;
  v11 = &off_1E6176770;
  v12 = 0u;
  v13 = 0u;
  v14 = 0;
  v20 = 0;
  v21 = 0;
  v22 = 0u;
  v23 = 0u;
  v24 = 0;
  v15 = &off_1E6176770;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v25 = -1;
  v26 = 0;
  v5 = &off_1E6178EE0;
  v7 = &unk_1E61790E8;
  v8 = 0;
  v27 = a2;
  TSFNTOpenTypeCFF2Font::TSFNTOpenTypeCFF2Font((TSFNTOpenTypeCFF2Font *)a1, (const TSFNTData *)&v5);
  TSFNTFont::~TSFNTFont((TSFNTFont *)&v5);
  *(_QWORD *)a1 = &off_1E61B36C8;
  *(_QWORD *)(a1 + 16) = &unk_1E61B38F8;
  *(_QWORD *)(a1 + 648) = &off_1E6176678;
  *(_QWORD *)(a1 + 656) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 664) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  TDataReference::DucRefCount((TDataReference *)(a1 + 392));
  *(_QWORD *)(a1 + 400) = 0;
  *(_QWORD *)(a1 + 408) = 0;
  *(_QWORD *)(a1 + 416) = 0;
  *(_QWORD *)(a1 + 544) = a1 + 648;
  return a1;
}

void sub_1B0990570(_Unwind_Exception *a1)
{
  TSFNTOpenTypeCFF2Font *v1;
  TInMemoryDataReference *v2;

  TInMemoryDataReference::~TInMemoryDataReference(v2);
  TSFNTOpenTypeCFF2Font::~TSFNTOpenTypeCFF2Font(v1);
  _Unwind_Resume(a1);
}

void TOpenTypeCFF2MemoryFont::~TOpenTypeCFF2MemoryFont(TOpenTypeCFF2MemoryFont *this)
{
  *(_QWORD *)this = &off_1E61B36C8;
  *((_QWORD *)this + 2) = &unk_1E61B38F8;
  TInMemoryDataReference::~TInMemoryDataReference((TOpenTypeCFF2MemoryFont *)((char *)this + 648));
  TSFNTOpenTypeCFF2Font::~TSFNTOpenTypeCFF2Font(this);
}

{
  *(_QWORD *)this = &off_1E61B36C8;
  *((_QWORD *)this + 2) = &unk_1E61B38F8;
  TInMemoryDataReference::~TInMemoryDataReference((TOpenTypeCFF2MemoryFont *)((char *)this + 648));
  TSFNTOpenTypeCFF2Font::~TSFNTOpenTypeCFF2Font(this);
}

{
  *(_QWORD *)this = &off_1E61B36C8;
  *((_QWORD *)this + 2) = &unk_1E61B38F8;
  TInMemoryDataReference::~TInMemoryDataReference((TOpenTypeCFF2MemoryFont *)((char *)this + 648));
  TSFNTOpenTypeCFF2Font::~TSFNTOpenTypeCFF2Font(this);
  JUMPOUT(0x1B5E0CD38);
}

void `non-virtual thunk to'TOpenTypeCFF2MemoryFont::~TOpenTypeCFF2MemoryFont(TOpenTypeCFF2MemoryFont *this)
{
  *(_QWORD *)this = &unk_1E61B38F8;
  *((_QWORD *)this - 2) = &off_1E61B36C8;
  TInMemoryDataReference::~TInMemoryDataReference((TOpenTypeCFF2MemoryFont *)((char *)this + 632));
  TSFNTOpenTypeCFF2Font::~TSFNTOpenTypeCFF2Font((TOpenTypeCFF2MemoryFont *)((char *)this - 16));
}

{
  TOpenTypeCFF2MemoryFont::~TOpenTypeCFF2MemoryFont((TOpenTypeCFF2MemoryFont *)((char *)this - 16));
}

uint64_t TOpenTypeCFF2MemoryFont::GetFontRef(TOpenTypeCFF2MemoryFont *this)
{
  return (uint64_t)this + 648;
}

void TOpenTypeCFF2WOFFFont::TOpenTypeCFF2WOFFFont(TOpenTypeCFF2WOFFFont *this, CFDataRef theData, int a3)
{
  const UInt8 *BytePtr;
  CFIndex Length;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  _QWORD v11[2];
  int v12;

  BytePtr = CFDataGetBytePtr(theData);
  Length = CFDataGetLength(theData);
  v11[0] = &off_1E6176678;
  v8 = operator new();
  *(_QWORD *)v8 = &off_1E6176818;
  *(_QWORD *)(v8 + 8) = BytePtr;
  *(_QWORD *)(v8 + 16) = Length;
  *(_QWORD *)(v8 + 24) = &unk_1E6176840;
  *(_DWORD *)(v8 + 36) = 0;
  v11[1] = v8;
  *(_DWORD *)(v8 + 32) = 0;
  v9 = (unsigned int *)(v8 + 32);
  v12 = a3;
  do
    v10 = __ldxr(v9);
  while (__stxr(v10 + 1, v9));
  TOpenTypeCFF2MemoryFont::TOpenTypeCFF2MemoryFont((uint64_t)this, (uint64_t)v11);
  TInMemoryDataReference::~TInMemoryDataReference((TInMemoryDataReference *)v11);
  *(_QWORD *)this = &off_1E61B3918;
  *((_QWORD *)this + 2) = &unk_1E61B3B48;
  *((_QWORD *)this + 84) = CFRetain(theData);
}

void sub_1B0990794(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  TOpenTypeCFF2MemoryFont *v10;

  TOpenTypeCFF2MemoryFont::~TOpenTypeCFF2MemoryFont(v10);
  _Unwind_Resume(a1);
}

void TOpenTypeCFF2WOFFFont::~TOpenTypeCFF2WOFFFont(TOpenTypeCFF2WOFFFont *this)
{
  *(_QWORD *)this = &off_1E61B3918;
  *((_QWORD *)this + 2) = &unk_1E61B3B48;
  CFRelease(*((CFTypeRef *)this + 84));
  *(_QWORD *)this = &off_1E61B36C8;
  *((_QWORD *)this + 2) = &unk_1E61B38F8;
  TInMemoryDataReference::~TInMemoryDataReference((TOpenTypeCFF2WOFFFont *)((char *)this + 648));
  TSFNTOpenTypeCFF2Font::~TSFNTOpenTypeCFF2Font(this);
}

{
  TOpenTypeCFF2WOFFFont::~TOpenTypeCFF2WOFFFont(this);
  JUMPOUT(0x1B5E0CD38);
}

void `non-virtual thunk to'TOpenTypeCFF2WOFFFont::~TOpenTypeCFF2WOFFFont(TOpenTypeCFF2WOFFFont *this)
{
  TOpenTypeCFF2WOFFFont::~TOpenTypeCFF2WOFFFont((TOpenTypeCFF2WOFFFont *)((char *)this - 16));
}

{
  TOpenTypeCFF2WOFFFont::~TOpenTypeCFF2WOFFFont((TOpenTypeCFF2WOFFFont *)((char *)this - 16));
  JUMPOUT(0x1B5E0CD38);
}

void TOpenTypeCFF2DataForkFont::TOpenTypeCFF2DataForkFont(TOpenTypeCFF2DataForkFont *this, const TFileDataSurrogate *a2)
{
  int v4;
  uint64_t v5;
  void (**v6)(TSFNTData *__hidden);
  int v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (**v12)(TDataReference *__hidden);
  __int128 v13;
  __int128 v14;
  int v15;
  void (**v16)(TDataReference *__hidden);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  int v21;
  char v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  const TFileDataSurrogate *v28;

  v7 = 0;
  v10 = 0;
  v11 = 0;
  v12 = &off_1E6176770;
  v13 = 0u;
  v14 = 0u;
  v15 = 0;
  v21 = 0;
  v22 = 0;
  v23 = 0u;
  v24 = 0u;
  v25 = 0;
  v16 = &off_1E6176770;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v26 = -1;
  v27 = 0;
  v6 = &off_1E6178EE0;
  v8 = &unk_1E61790E8;
  v9 = 0;
  v28 = a2;
  TSFNTOpenTypeCFF2Font::TSFNTOpenTypeCFF2Font(this, (const TSFNTData *)&v6);
  TSFNTFont::~TSFNTFont((TSFNTFont *)&v6);
  *(_QWORD *)this = &off_1E61B3B68;
  *((_QWORD *)this + 2) = &unk_1E61B3D98;
  v4 = (*(uint64_t (**)(const TFileDataSurrogate *))(*(_QWORD *)a2 + 48))(a2);
  *((_QWORD *)this + 81) = &off_1E61766C0;
  v5 = *((_QWORD *)a2 + 1);
  *((_QWORD *)this + 82) = v5;
  (*(void (**)(uint64_t))(*(_QWORD *)(v5 + 24) + 24))(v5 + 24);
  *((_QWORD *)this + 81) = &off_1E6176630;
  *((_DWORD *)this + 166) = v4;
  TDataReference::DucRefCount((TOpenTypeCFF2DataForkFont *)((char *)this + 392));
  *((_QWORD *)this + 50) = 0;
  *((_QWORD *)this + 51) = 0;
  *((_QWORD *)this + 52) = 0;
  *((_QWORD *)this + 68) = (char *)this + 648;
}

void sub_1B099098C(_Unwind_Exception *a1)
{
  TSFNTOpenTypeCFF2Font *v1;
  const TFileFragmentReference **v2;
  const TFileFragmentReference **v3;

  v3 = v2;
  TFileDataSurrogate::~TFileDataSurrogate(v3);
  TSFNTOpenTypeCFF2Font::~TSFNTOpenTypeCFF2Font(v1);
  _Unwind_Resume(a1);
}

void TOpenTypeCFF2DataForkFont::~TOpenTypeCFF2DataForkFont(TOpenTypeCFF2DataForkFont *this)
{
  *(_QWORD *)this = &off_1E61B3B68;
  *((_QWORD *)this + 2) = &unk_1E61B3D98;
  TFileDataSurrogate::~TFileDataSurrogate((const TFileFragmentReference **)this + 81);
  TSFNTOpenTypeCFF2Font::~TSFNTOpenTypeCFF2Font(this);
}

{
  *(_QWORD *)this = &off_1E61B3B68;
  *((_QWORD *)this + 2) = &unk_1E61B3D98;
  TFileDataSurrogate::~TFileDataSurrogate((const TFileFragmentReference **)this + 81);
  TSFNTOpenTypeCFF2Font::~TSFNTOpenTypeCFF2Font(this);
  JUMPOUT(0x1B5E0CD38);
}

void `non-virtual thunk to'TOpenTypeCFF2DataForkFont::~TOpenTypeCFF2DataForkFont(TOpenTypeCFF2DataForkFont *this)
{
  *(_QWORD *)this = &unk_1E61B3D98;
  *((_QWORD *)this - 2) = &off_1E61B3B68;
  TFileDataSurrogate::~TFileDataSurrogate((const TFileFragmentReference **)this + 79);
  TSFNTOpenTypeCFF2Font::~TSFNTOpenTypeCFF2Font((TOpenTypeCFF2DataForkFont *)((char *)this - 16));
}

{
  TOpenTypeCFF2DataForkFont::~TOpenTypeCFF2DataForkFont((TOpenTypeCFF2DataForkFont *)((char *)this - 16));
}

uint64_t TOpenTypeCFF2DataForkFont::GetFontRef(TOpenTypeCFF2DataForkFont *this)
{
  return (uint64_t)this + 648;
}

uint64_t TSFNTOpenTypeCFF2Font::GetFDIndexCFF2(TSFNTOpenTypeCFF2Font *this, unsigned int a2)
{
  __int128 v3;
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;
  unsigned int v7;
  unint64_t v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  unint64_t v11;
  unsigned int *v12;
  char *v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  unint64_t v20;
  unsigned __int8 *v21;
  char *v22;
  unsigned int v23;
  _DWORD *exception;
  _DWORD *v26;
  _DWORD *v27;
  _DWORD *v28;
  __int128 v29;
  __int128 v30;

  if (*((_DWORD *)this + 35) <= a2)
    goto LABEL_34;
  if (*((_DWORD *)this + 161))
  {
    *(_QWORD *)&v3 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v29 = v3;
    v30 = v3;
    (*(void (**)(__int128 *__return_ptr, TSFNTOpenTypeCFF2Font *, _QWORD))(*(_QWORD *)this + 520))(&v29, this, *((unsigned int *)this + 160));
    if (!*((_QWORD *)&v29 + 1) || (v4 = *(_QWORD *)(*((_QWORD *)&v29 + 1) + 8)) == 0)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)exception = &off_1E6176998;
      exception[2] = 4;
    }
    v5 = (unsigned __int8 *)(v4 + v30);
    v6 = *v5;
    if (!*v5)
    {
      v15 = v5[a2 + 1];
LABEL_30:
      *(_QWORD *)&v29 = &off_1E6176770;
      TDataReference::DucRefCount((TDataReference *)&v29);
      return v15;
    }
    if (v6 == 3)
    {
      v16 = *(unsigned __int16 *)(v5 + 1);
      v17 = __rev16(v16);
      v18 = v5 + 3;
      if (v16)
      {
        v19 = v18;
        do
        {
          v20 = v17 >> 1;
          v21 = &v19[3 * (v17 >> 1)];
          v23 = *(unsigned __int16 *)v21;
          v22 = (char *)(v21 + 3);
          v17 += ~(v17 >> 1);
          if (bswap32(v23) >> 16 > (unsigned __int16)a2)
            v17 = v20;
          else
            v19 = (unsigned __int8 *)v22;
        }
        while (v17);
      }
      else
      {
        v19 = &v18[2 * v17 + v17];
      }
      if (v19 == v18)
      {
        v27 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v27 = &off_1E6176998;
        v27[2] = 4;
      }
      v15 = *(v19 - 1);
      goto LABEL_30;
    }
    if (v6 == 4)
    {
      v7 = *(_DWORD *)(v5 + 1);
      v8 = bswap32(v7);
      v9 = v5 + 5;
      if (v7)
      {
        v10 = v9;
        do
        {
          v11 = v8 >> 1;
          v12 = (unsigned int *)&v10[6 * (v8 >> 1)];
          v14 = *v12;
          v13 = (char *)v12 + 6;
          v8 += ~(v8 >> 1);
          if (bswap32(v14) > (unsigned __int16)a2)
            v8 = v11;
          else
            v10 = (unsigned __int8 *)v13;
        }
        while (v8);
      }
      else
      {
        v10 = &v9[6 * v8];
      }
      if (v10 == v9)
      {
        v28 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v28 = &off_1E6176998;
        v28[2] = 4;
      }
      v15 = bswap32(*((unsigned __int16 *)v10 - 1)) >> 16;
      goto LABEL_30;
    }
    TDataReference::~TDataReference((TDataReference *)&v29);
LABEL_34:
    v26 = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)v26 = &off_1E6176998;
    v26[2] = 4;
  }
  return 0;
}

void sub_1B0990D04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  TDataReference::~TDataReference((TDataReference *)&a9);
  _Unwind_Resume(a1);
}

uint64_t TSFNTOpenTypeCFF2Font::GetLocalSubrOffsetsAndData(TSFNTOpenTypeCFF2Font *this, unsigned int a2, unsigned __int16 *a3, unsigned __int16 *a4, unsigned __int16 *a5, TDataReference *a6, TDataReference *a7)
{
  uint64_t v8;
  int v9;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  __int16 v16;
  unsigned __int16 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unsigned __int8 *v23;
  uint64_t v24;
  unsigned __int8 *v25;
  int v26;
  int v27;
  unsigned int v28;
  int v29;
  unsigned __int8 *v30;
  int v31;
  int v32;
  int v33;
  uint64_t v34;
  __int128 v35;
  _DWORD *exception;
  __int128 v38;
  __int128 v39;

  if ((int)a2 >= *((__int16 *)this + 308))
    goto LABEL_31;
  v8 = *((_QWORD *)this + 76);
  v9 = *(unsigned __int16 *)(v8 + 488 * a2 + 4);
  *a3 = v9;
  if (v9)
  {
    v13 = a2;
    v14 = v8 + 488 * a2;
    *a4 = *(_WORD *)(v14 + 2);
    v15 = *a3;
    if (v15 >= 0x846C)
      v16 = 0x8000;
    else
      v16 = 1131;
    if (v15 >= 0x4D8)
      v17 = v16;
    else
      v17 = 107;
    *a5 = v17;
    v18 = *a4 + *a4 * *a3;
    (*(void (**)(__int128 *__return_ptr, TSFNTOpenTypeCFF2Font *, _QWORD, uint64_t))(*(_QWORD *)this + 520))(&v38, this, *(unsigned int *)(v14 + 8), v18);
    if (&v38 != (__int128 *)a6)
    {
      TDataReference::DucRefCount(a6);
      v19 = *((_QWORD *)&v38 + 1);
      *((_QWORD *)&v38 + 1) = 0;
      *((_QWORD *)a6 + 1) = v19;
      *((_OWORD *)a6 + 1) = v39;
    }
    *(_QWORD *)&v38 = &off_1E6176770;
    TDataReference::DucRefCount((TDataReference *)&v38);
    v20 = *((_QWORD *)a6 + 1);
    if (v20)
    {
      v21 = *(_QWORD *)(v20 + 8);
      if (v21)
      {
        v22 = 0;
        v23 = (unsigned __int8 *)(v21 + *((_QWORD *)a6 + 2));
        v24 = *a4;
        v25 = v23;
        switch(*a4)
        {
          case 1u:
            goto LABEL_17;
          case 2u:
            goto LABEL_16;
          case 3u:
            goto LABEL_15;
          case 4u:
            v25 = v23 + 1;
            v22 = *v23 << 8;
LABEL_15:
            v26 = *v25++;
            v22 = (v22 | v26) << 8;
LABEL_16:
            v27 = *v25++;
            v22 = (v22 | v27) << 8;
LABEL_17:
            v22 |= *v25;
            break;
          default:
            break;
        }
        v28 = 0;
        v29 = v24 - 1;
        v30 = &v23[v18 - v24];
        switch(v29)
        {
          case 0:
            goto LABEL_22;
          case 1:
            goto LABEL_21;
          case 2:
            goto LABEL_20;
          case 3:
            v31 = *v30++;
            v28 = v31 << 8;
LABEL_20:
            v32 = *v30++;
            v28 = (v28 | v32) << 8;
LABEL_21:
            v33 = *v30++;
            v28 = (v28 | v33) << 8;
LABEL_22:
            v28 |= *v30;
            break;
          default:
            break;
        }
        if (v22)
        {
          v34 = v28 - v22;
          if (v28 > v22)
          {
            *(_QWORD *)&v35 = 0xAAAAAAAAAAAAAAAALL;
            *((_QWORD *)&v35 + 1) = 0xAAAAAAAAAAAAAAAALL;
            v38 = v35;
            v39 = v35;
            (*(void (**)(__int128 *__return_ptr, TSFNTOpenTypeCFF2Font *, _QWORD, uint64_t))(*(_QWORD *)this + 520))(&v38, this, *(unsigned int *)(*((_QWORD *)this + 79) + 4 * v13), v34);
            if (*((_QWORD *)&v38 + 1) && *(_QWORD *)(*((_QWORD *)&v38 + 1) + 8))
            {
              TDataReference::operator=(a7, (uint64_t)&v38);
              *(_QWORD *)&v38 = &off_1E6176770;
              TDataReference::DucRefCount((TDataReference *)&v38);
              return (v34 + v18);
            }
            TDataReference::~TDataReference((TDataReference *)&v38);
          }
        }
      }
    }
LABEL_31:
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E6176998;
    exception[2] = 4;
  }
  return 0;
}

void sub_1B0990FA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  TDataReference::~TDataReference((TDataReference *)&a9);
  _Unwind_Resume(a1);
}

uint64_t ReadTypeInc<unsigned char>(void (***a1)(TDataReference *__hidden this))
{
  void (**v1)(TDataReference *__hidden);
  void (**v2)(TDataReference *__hidden);
  uint64_t v4;
  void (**v5)(TDataReference *__hidden);
  _DWORD *exception;
  void (**v8)(TDataReference *__hidden);
  void (**v9)(TDataReference *__hidden);
  __int128 v10;

  v2 = a1[2];
  v1 = a1[3];
  if (v1 == v2)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E6176998;
    exception[2] = 4;
  }
  v4 = *((unsigned __int8 *)v2 + (_QWORD)a1[1][1]);
  TDataReference::SubdataFrom(a1, 1, (uint64_t)v1 + ~(unint64_t)v2, &v8);
  if (&v8 != a1)
  {
    TDataReference::DucRefCount((TDataReference *)a1);
    v5 = v9;
    v9 = 0;
    a1[1] = v5;
    *((_OWORD *)a1 + 1) = v10;
  }
  v8 = &off_1E6176770;
  TDataReference::DucRefCount((TDataReference *)&v8);
  return v4;
}

void sub_1B0991098(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  TDataReference::~TDataReference((TDataReference *)&a9);
  _Unwind_Resume(a1);
}

uint64_t ReadTypeInc<unsigned short>(void (***a1)(TDataReference *__hidden this))
{
  void (**v1)(TDataReference *__hidden);
  unint64_t v2;
  unsigned __int8 *v4;
  int v5;
  int v6;
  void (**v7)(TDataReference *__hidden);
  _DWORD *exception;
  void (**v10)(TDataReference *__hidden);
  void (**v11)(TDataReference *__hidden);
  __int128 v12;

  v1 = a1[2];
  v2 = (char *)a1[3] - (char *)v1;
  if (v2 <= 1)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E6176998;
    exception[2] = 4;
  }
  v4 = (unsigned __int8 *)v1 + (_QWORD)a1[1][1];
  v5 = *v4;
  v6 = v4[1];
  TDataReference::SubdataFrom(a1, 2, v2 - 2, &v10);
  if (&v10 != a1)
  {
    TDataReference::DucRefCount((TDataReference *)a1);
    v7 = v11;
    v11 = 0;
    a1[1] = v7;
    *((_OWORD *)a1 + 1) = v12;
  }
  v10 = &off_1E6176770;
  TDataReference::DucRefCount((TDataReference *)&v10);
  return v6 | (v5 << 8);
}

void sub_1B0991188(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  TDataReference::~TDataReference((TDataReference *)&a9);
  _Unwind_Resume(a1);
}

uint64_t TOpenTypeCIDFont::GetLocalSubrOffsetsAndData(TOpenTypeCIDFont *this, unsigned int a2, unsigned __int16 *a3, unsigned __int16 *a4, unsigned __int16 *a5, TDataReference *a6, TDataReference *a7)
{
  uint64_t v8;
  int v9;
  uint64_t v13;
  unsigned int v14;
  __int16 v15;
  unsigned __int16 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned __int8 *v22;
  uint64_t v23;
  unsigned __int8 *v24;
  int v25;
  int v26;
  unsigned int v27;
  int v28;
  unsigned __int8 *v29;
  int v30;
  int v31;
  int v32;
  uint64_t v33;
  __int128 v34;
  _DWORD *exception;
  __int128 v37;
  __int128 v38;

  if ((int)a2 >= *((__int16 *)this + 181))
    goto LABEL_31;
  v8 = *((_QWORD *)this + 50);
  v9 = *(unsigned __int16 *)(v8 + 488 * a2 + 4);
  *a3 = v9;
  if (v9)
  {
    v13 = a2;
    *a4 = *(_WORD *)(v8 + 488 * a2 + 2);
    v14 = *a3;
    if (v14 >= 0x846C)
      v15 = 0x8000;
    else
      v15 = 1131;
    if (v14 >= 0x4D8)
      v16 = v15;
    else
      v16 = 107;
    *a5 = v16;
    v17 = *a4 + *a4 * *a3;
    (*(void (**)(__int128 *__return_ptr, TOpenTypeCIDFont *, _QWORD, uint64_t))(*(_QWORD *)this + 520))(&v37, this, *(unsigned int *)(*((_QWORD *)this + 55) + 4 * a2), v17);
    if (&v37 != (__int128 *)a6)
    {
      TDataReference::DucRefCount(a6);
      v18 = *((_QWORD *)&v37 + 1);
      *((_QWORD *)&v37 + 1) = 0;
      *((_QWORD *)a6 + 1) = v18;
      *((_OWORD *)a6 + 1) = v38;
    }
    *(_QWORD *)&v37 = &off_1E6176770;
    TDataReference::DucRefCount((TDataReference *)&v37);
    v19 = *((_QWORD *)a6 + 1);
    if (v19)
    {
      v20 = *(_QWORD *)(v19 + 8);
      if (v20)
      {
        v21 = 0;
        v22 = (unsigned __int8 *)(v20 + *((_QWORD *)a6 + 2));
        v23 = *a4;
        v24 = v22;
        switch(*a4)
        {
          case 1u:
            goto LABEL_17;
          case 2u:
            goto LABEL_16;
          case 3u:
            goto LABEL_15;
          case 4u:
            v24 = v22 + 1;
            v21 = *v22 << 8;
LABEL_15:
            v25 = *v24++;
            v21 = (v21 | v25) << 8;
LABEL_16:
            v26 = *v24++;
            v21 = (v21 | v26) << 8;
LABEL_17:
            v21 |= *v24;
            break;
          default:
            break;
        }
        v27 = 0;
        v28 = v23 - 1;
        v29 = &v22[v17 - v23];
        switch(v28)
        {
          case 0:
            goto LABEL_22;
          case 1:
            goto LABEL_21;
          case 2:
            goto LABEL_20;
          case 3:
            v30 = *v29++;
            v27 = v30 << 8;
LABEL_20:
            v31 = *v29++;
            v27 = (v27 | v31) << 8;
LABEL_21:
            v32 = *v29++;
            v27 = (v27 | v32) << 8;
LABEL_22:
            v27 |= *v29;
            break;
          default:
            break;
        }
        if (v21)
        {
          v33 = v27 - v21;
          if (v27 > v21)
          {
            *(_QWORD *)&v34 = 0xAAAAAAAAAAAAAAAALL;
            *((_QWORD *)&v34 + 1) = 0xAAAAAAAAAAAAAAAALL;
            v37 = v34;
            v38 = v34;
            (*(void (**)(__int128 *__return_ptr, TOpenTypeCIDFont *, _QWORD, uint64_t))(*(_QWORD *)this + 520))(&v37, this, *(unsigned int *)(*((_QWORD *)this + 56) + 4 * v13), v33);
            if (*((_QWORD *)&v37 + 1) && *(_QWORD *)(*((_QWORD *)&v37 + 1) + 8))
            {
              TDataReference::operator=(a7, (uint64_t)&v37);
              *(_QWORD *)&v37 = &off_1E6176770;
              TDataReference::DucRefCount((TDataReference *)&v37);
              return (v33 + v17);
            }
            TDataReference::~TDataReference((TDataReference *)&v37);
          }
        }
      }
    }
LABEL_31:
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E6176998;
    exception[2] = 4;
  }
  return 0;
}

void sub_1B0991428(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  TDataReference::~TDataReference((TDataReference *)&a9);
  _Unwind_Resume(a1);
}

uint64_t TOpenTypeCIDFont::GetCIDSubrData(TOpenTypeCIDFont *this, unsigned __int16 a2, unsigned __int16 *a3, unsigned __int16 *a4, unint64_t *a5)
{
  uint64_t v9;
  __int16 v11;

  v11 = -21846;
  v9 = (*(uint64_t (**)(TOpenTypeCIDFont *))(*(_QWORD *)this + 552))(this);
  return (*(uint64_t (**)(TOpenTypeCIDFont *, uint64_t, unsigned __int16 *, unsigned __int16 *, __int16 *, unint64_t *))(*(_QWORD *)this + 536))(this, v9, a3, a4, &v11, a5);
}

uint64_t `non-virtual thunk to'TOpenTypeCIDFont::GetCIDSubrData(TOpenTypeCIDFont *this, unsigned __int16 a2, unsigned __int16 *a3, unsigned __int16 *a4, unint64_t *a5)
{
  char *v8;
  uint64_t v9;
  __int16 v11;

  v8 = (char *)this - 344;
  v11 = -21846;
  v9 = (*(uint64_t (**)(char *))(*((_QWORD *)this - 43) + 552))((char *)this - 344);
  return (*(uint64_t (**)(char *, uint64_t, unsigned __int16 *, unsigned __int16 *, __int16 *, unint64_t *))(*(_QWORD *)v8 + 536))(v8, v9, a3, a4, &v11, a5);
}

void TOpenTypeCIDFont::GetCharString(TOpenTypeCIDFont *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int v4;
  __int128 v7;
  uint64_t v8;
  int v9;
  unsigned __int8 *v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  _DWORD *exception;
  _QWORD v20[4];
  __int128 v21;
  __int128 v22;

  v4 = *((_DWORD *)this + 89);
  if ((2 * v4) > 8)
  {
LABEL_19:
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E6176998;
    exception[2] = 4;
  }
  *(_QWORD *)&v7 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v21 = v7;
  v22 = v7;
  (*(void (**)(__int128 *__return_ptr, TOpenTypeCIDFont *, _QWORD))(*(_QWORD *)this + 520))(&v21, this, (*((_DWORD *)this + 94) + v4 * a2));
  if (!*((_QWORD *)&v21 + 1) || (v8 = *(_QWORD *)(*((_QWORD *)&v21 + 1) + 8)) == 0)
  {
    TDataReference::~TDataReference((TDataReference *)&v21);
    goto LABEL_19;
  }
  v9 = 0;
  v10 = (unsigned __int8 *)(v8 + v22);
  switch((unsigned __int16)*((_DWORD *)this + 89))
  {
    case 1u:
      goto LABEL_8;
    case 2u:
      goto LABEL_7;
    case 3u:
      goto LABEL_6;
    case 4u:
      v11 = *v10++;
      v9 = v11 << 8;
LABEL_6:
      v12 = *v10++;
      v9 = (v9 | v12) << 8;
LABEL_7:
      v13 = *v10++;
      v9 = (v9 | v13) << 8;
LABEL_8:
      v14 = *v10++;
      v9 |= v14;
      break;
    default:
      break;
  }
  v15 = 0;
  switch((unsigned __int16)*((_DWORD *)this + 89))
  {
    case 1u:
      goto LABEL_13;
    case 2u:
      goto LABEL_12;
    case 3u:
      goto LABEL_11;
    case 4u:
      v16 = *v10++;
      v15 = v16 << 8;
LABEL_11:
      v17 = *v10++;
      v15 = (v15 | v17) << 8;
LABEL_12:
      v18 = *v10++;
      v15 = (v15 | v18) << 8;
LABEL_13:
      v15 |= *v10;
      break;
    default:
      break;
  }
  if (v15 - v9 < 1)
  {
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)a3 = &off_1E61C8568;
    *(_QWORD *)(a3 + 8) = 0;
    *(_DWORD *)(a3 + 24) = 0;
    *(_BYTE *)(a3 + 28) = 0;
    *(_QWORD *)(a3 + 32) = &off_1E6176770;
    *(_QWORD *)(a3 + 40) = 0;
    *(_QWORD *)(a3 + 48) = 0;
    *(_QWORD *)(a3 + 56) = 0;
  }
  else
  {
    (*(void (**)(_QWORD *__return_ptr, TOpenTypeCIDFont *, _QWORD))(*(_QWORD *)this + 520))(v20, this, (v9 + *((_DWORD *)this + 91) - 1));
    TCharString::TCharString((TCharString *)a3, a2, (const TDataReference *)v20);
    v20[0] = &off_1E6176770;
    TDataReference::DucRefCount((TDataReference *)v20);
  }
  *(_QWORD *)&v21 = &off_1E6176770;
  TDataReference::DucRefCount((TDataReference *)&v21);
}

void sub_1B099171C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  TDataReference::~TDataReference((TDataReference *)&a9);
  TDataReference::~TDataReference((TDataReference *)&a13);
  _Unwind_Resume(a1);
}

uint64_t TOpenTypeFont::GetSFNTFont(TOpenTypeFont *this)
{
  return 0;
}

uint64_t TType1Font::GetHFMX(TType1Font *this)
{
  return 0;
}

uint64_t TOpenTypeCIDFont::GetStringBuffer(TOpenTypeCIDFont *this)
{
  return *((_QWORD *)this + 6);
}

uint64_t `non-virtual thunk to'TOpenTypeCIDFont::GetStringBuffer(TOpenTypeCIDFont *this)
{
  return *((_QWORD *)this - 37);
}

uint64_t TSFNTOpenTypeFont::GetSFNTFont(TSFNTOpenTypeFont *this)
{
  return (uint64_t)this + 344;
}

void TSFNTOpenTypeFont::FindFontMetaData(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t TSFNTOpenTypeCIDFont::GetSFNTFont(TSFNTOpenTypeCIDFont *this)
{
  return (uint64_t)this + 488;
}

void TSFNTOpenTypeCIDFont::FindFontMetaData(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t TSFNTOpenTypeCFF2Font::GetInstanceNames(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 432))(a1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 96))(v3, a2);
}

uint64_t TSFNTOpenTypeCFF2Font::GetAscent(TSFNTOpenTypeCFF2Font *this)
{
  uint64_t v1;

  v1 = (*(uint64_t (**)(TSFNTOpenTypeCFF2Font *))(*(_QWORD *)this + 432))(this);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 184))(v1);
}

uint64_t TSFNTOpenTypeCFF2Font::GetDescent(TSFNTOpenTypeCFF2Font *this)
{
  uint64_t v1;

  v1 = (*(uint64_t (**)(TSFNTOpenTypeCFF2Font *))(*(_QWORD *)this + 432))(this);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 192))(v1);
}

uint64_t TSFNTOpenTypeCFF2Font::GetLineGap(TSFNTOpenTypeCFF2Font *this)
{
  uint64_t v1;

  v1 = (*(uint64_t (**)(TSFNTOpenTypeCFF2Font *))(*(_QWORD *)this + 432))(this);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 200))(v1);
}

uint64_t TSFNTOpenTypeCFF2Font::GetMaxAdvance(TSFNTOpenTypeCFF2Font *this)
{
  uint64_t v1;

  v1 = (*(uint64_t (**)(TSFNTOpenTypeCFF2Font *))(*(_QWORD *)this + 432))(this);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 208))(v1);
}

uint64_t TSFNTOpenTypeCFF2Font::GetAvgAdvance(TSFNTOpenTypeCFF2Font *this)
{
  uint64_t v1;

  v1 = (*(uint64_t (**)(TSFNTOpenTypeCFF2Font *))(*(_QWORD *)this + 432))(this);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 216))(v1);
}

uint64_t TSFNTOpenTypeCFF2Font::GetXHeight(TSFNTOpenTypeCFF2Font *this)
{
  uint64_t v1;

  v1 = (*(uint64_t (**)(TSFNTOpenTypeCFF2Font *))(*(_QWORD *)this + 432))(this);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 224))(v1);
}

uint64_t TSFNTOpenTypeCFF2Font::GetCapHeight(TSFNTOpenTypeCFF2Font *this)
{
  uint64_t v1;

  v1 = (*(uint64_t (**)(TSFNTOpenTypeCFF2Font *))(*(_QWORD *)this + 432))(this);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 232))(v1);
}

uint64_t TSFNTOpenTypeCFF2Font::GetMinLeftSideBearing(TSFNTOpenTypeCFF2Font *this)
{
  uint64_t v1;

  v1 = (*(uint64_t (**)(TSFNTOpenTypeCFF2Font *))(*(_QWORD *)this + 432))(this);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 240))(v1);
}

uint64_t TSFNTOpenTypeCFF2Font::GetMinRightSideBearing(TSFNTOpenTypeCFF2Font *this)
{
  uint64_t v1;

  v1 = (*(uint64_t (**)(TSFNTOpenTypeCFF2Font *))(*(_QWORD *)this + 432))(this);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 248))(v1);
}

uint64_t TSFNTOpenTypeCFF2Font::GetStemH(TSFNTOpenTypeCFF2Font *this)
{
  uint64_t v1;

  v1 = (*(uint64_t (**)(TSFNTOpenTypeCFF2Font *))(*(_QWORD *)this + 432))(this);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 256))(v1);
}

uint64_t TSFNTOpenTypeCFF2Font::GetStemV(TSFNTOpenTypeCFF2Font *this)
{
  uint64_t v1;

  v1 = (*(uint64_t (**)(TSFNTOpenTypeCFF2Font *))(*(_QWORD *)this + 432))(this);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 264))(v1);
}

uint64_t TSFNTOpenTypeCFF2Font::GetCaretInfo(TSFNTOpenTypeCFF2Font *this, __int16 *a2, __int16 *a3, unsigned __int16 *a4)
{
  uint64_t v7;

  v7 = (*(uint64_t (**)(TSFNTOpenTypeCFF2Font *))(*(_QWORD *)this + 432))(this);
  return (*(uint64_t (**)(uint64_t, __int16 *, __int16 *, unsigned __int16 *))(*(_QWORD *)v7 + 272))(v7, a2, a3, a4);
}

uint64_t TSFNTOpenTypeCFF2Font::GetBounds(TSFNTOpenTypeCFF2Font *this, double *a2, double *a3, double *a4, double *a5)
{
  uint64_t v9;

  v9 = (*(uint64_t (**)(TSFNTOpenTypeCFF2Font *))(*(_QWORD *)this + 432))(this);
  return (*(uint64_t (**)(uint64_t, double *, double *, double *, double *))(*(_QWORD *)v9 + 280))(v9, a2, a3, a4, a5);
}

uint64_t TSFNTOpenTypeCFF2Font::GetItalicAngle(TSFNTOpenTypeCFF2Font *this)
{
  uint64_t v1;

  v1 = (*(uint64_t (**)(TSFNTOpenTypeCFF2Font *))(*(_QWORD *)this + 432))(this);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 288))(v1);
}

uint64_t TSFNTOpenTypeCFF2Font::GetUnderlinePosition(TSFNTOpenTypeCFF2Font *this)
{
  uint64_t v1;

  v1 = (*(uint64_t (**)(TSFNTOpenTypeCFF2Font *))(*(_QWORD *)this + 432))(this);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 296))(v1);
}

uint64_t TSFNTOpenTypeCFF2Font::GetUnderlineThickness(TSFNTOpenTypeCFF2Font *this)
{
  uint64_t v1;

  v1 = (*(uint64_t (**)(TSFNTOpenTypeCFF2Font *))(*(_QWORD *)this + 432))(this);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 304))(v1);
}

uint64_t TSFNTOpenTypeCFF2Font::IsMonospaced(TSFNTOpenTypeCFF2Font *this)
{
  uint64_t v1;

  v1 = (*(uint64_t (**)(TSFNTOpenTypeCFF2Font *))(*(_QWORD *)this + 432))(this);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 312))(v1);
}

uint64_t TSFNTOpenTypeCFF2Font::IsItalic(TSFNTOpenTypeCFF2Font *this)
{
  uint64_t v1;

  v1 = (*(uint64_t (**)(TSFNTOpenTypeCFF2Font *))(*(_QWORD *)this + 432))(this);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 320))(v1);
}

uint64_t TSFNTOpenTypeCFF2Font::GetVerticalMetrics(TSFNTOpenTypeCFF2Font *this, int *a2, int *a3, int *a4, int *a5, int *a6, int *a7, int *a8, int *a9, double *a10, double *a11, double *a12, double *a13)
{
  uint64_t v18;

  v18 = (*(uint64_t (**)(TSFNTOpenTypeCFF2Font *))(*(_QWORD *)this + 432))(this);
  return (*(uint64_t (**)(uint64_t, int *, int *, int *, int *, int *, int *, int *, int *, double *, double *, double *, double *))(*(_QWORD *)v18 + 328))(v18, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
}

uint64_t TSFNTOpenTypeCFF2Font::GetGlyphName(TSFNTOpenTypeCFF2Font *this, uint64_t a2)
{
  uint64_t v3;

  v3 = (*(uint64_t (**)(TSFNTOpenTypeCFF2Font *))(*(_QWORD *)this + 432))(this);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 336))(v3, a2);
}

uint64_t TSFNTOpenTypeCFF2Font::VerifyGlyphName(TSFNTOpenTypeCFF2Font *this, uint64_t a2, const char *a3)
{
  uint64_t v5;

  v5 = (*(uint64_t (**)(TSFNTOpenTypeCFF2Font *))(*(_QWORD *)this + 432))(this);
  return (*(uint64_t (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v5 + 344))(v5, a2, a3);
}

uint64_t TSFNTOpenTypeCFF2Font::GetGlyphID(TSFNTOpenTypeCFF2Font *this, const char *a2)
{
  uint64_t v3;

  v3 = (*(uint64_t (**)(TSFNTOpenTypeCFF2Font *))(*(_QWORD *)this + 432))(this);
  return (*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)v3 + 352))(v3, a2);
}

uint64_t TSFNTOpenTypeCFF2Font::GetVariationAxes(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 432))(a1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 392))(v3, a2);
}

uint64_t TSFNTOpenTypeCFF2Font::GetVariationInstances(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 432))(a1);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5 + 400))(v5, a2, a3);
}

uint64_t TSFNTOpenTypeCFF2Font::Normalize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 432))(a1);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 408))(v7, a2, a3, a4);
}

uint64_t TSFNTOpenTypeCFF2Font::GetPostScriptNameSuffixForVariation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 432))(a1);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 416))(v7, a2, a3, a4);
}

uint64_t TSFNTOpenTypeCFF2Font::GotTable(TSFNTOpenTypeCFF2Font *this, uint64_t a2)
{
  uint64_t v3;

  v3 = (*(uint64_t (**)(TSFNTOpenTypeCFF2Font *))(*(_QWORD *)this + 432))(this);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 472))(v3, a2);
}

uint64_t TSFNTOpenTypeCFF2Font::GetTable(TSFNTOpenTypeCFF2Font *this, uint64_t a2, unint64_t *a3)
{
  uint64_t v5;

  v5 = (*(uint64_t (**)(TSFNTOpenTypeCFF2Font *))(*(_QWORD *)this + 432))(this);
  return (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *))(*(_QWORD *)v5 + 480))(v5, a2, a3);
}

void std::vector<int,TInlineBufferAllocator<int,3ul>>::__destroy_vector::operator()[abi:fe180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v3;
  BOOL v4;
  BOOL v5;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v1[1] = v2;
    v3 = (void **)((char *)v1 + 36);
    if (v1 + 3 <= v2)
    {
      v4 = v3 >= v2;
      v5 = v3 == v2;
    }
    else
    {
      v4 = 0;
      v5 = 0;
    }
    if (!v5 && v4)
    {
      if (v1[2] == v1[5])
        v1[5] = v2;
    }
    else
    {
      operator delete(v2);
    }
  }
}

void std::default_delete<FDArrayEntity []>::operator()[abi:fe180100]<FDArrayEntity>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (a2)
  {
    v2 = *(_QWORD *)(a2 - 8);
    if (v2)
    {
      v3 = a2 - 472;
      v4 = 488 * v2;
      do
      {
        free(*(void **)(v3 + v4));
        v4 -= 488;
      }
      while (v4);
    }
    JUMPOUT(0x1B5E0CD14);
  }
}

uint64_t TTPerformStreamingTypeQuery(uint64_t a1, unsigned int *a2)
{
  __int128 v3;
  uint64_t v4;
  int v5;
  __int16 v6;
  uint64_t v7;
  _QWORD v9[9];
  _BYTE __b[920];
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  *(_QWORD *)&v3 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v14 = v3;
  v15 = v3;
  v12 = v3;
  v13 = v3;
  cacheCallContext::cacheCallContext((cacheCallContext *)&v12, *(const TFont **)(a1 + 64), 0, 0);
  v11 = 0xAAAAAAAAAAAAAAAALL;
  CreateFontCacheNode(*((const TFont **)&v13 + 1), &v11);
  v4 = v11;
  if (v11)
  {
    memset(__b, 170, sizeof(__b));
    memoryContext::memoryContext((memoryContext *)__b, (cacheCallContext *)&v12);
    v9[5] = 0xAAAAAAAAAAAAAAAALL;
    v9[8] = 0xAAAAAAAAAA000000;
    v9[0] = __b;
    v9[1] = 1358921729;
    v9[2] = 1358921729;
    v9[3] = 1358921729;
    v9[4] = 0;
    v9[6] = 1358921729;
    v9[7] = 1358921729;
    AssureScalerFontBlock(v9, (memoryContext *)__b, v4);
    ++*(_WORD *)(v4 + 16);
    v5 = SelectStreamType((uint64_t)v9, (uint64_t)__b, a2);
    v6 = v5;
    if (!v5)
      --*(_WORD *)(v4 + 16);
    memoryContext::~memoryContext((memoryContext *)__b);
    v7 = *(_QWORD *)(v4 + 8);
    if (v7)
      free((void *)(v7 - 8));
    MEMORY[0x1B5E0CD38](v4, 0x1080C40587D25DELL);
  }
  else
  {
    v6 = 20;
  }
  UnCacheCurrentGlyph((cacheCallContext *)&v12);
  return v6;
}

void sub_1B0991F68(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  uint64_t v12;
  va_list va;

  va_start(va, a12);
  memoryContext::~memoryContext((memoryContext *)va);
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    if (!*(_QWORD *)(v12 - 104))
      JUMPOUT(0x1B0991F48);
    JUMPOUT(0x1B0991F18);
  }
  std::unique_ptr<fontBlockCacheNode>::reset[abi:fe180100]((uint64_t *)(v12 - 104), 0);
  UnCacheCurrentGlyph((cacheCallContext *)(v12 - 96));
  _Unwind_Resume(a1);
}

uint64_t TTPerformStreamingSizeQuery()
{
  return 1;
}

uint64_t TTPerformPrerequisiteQuery(uint64_t a1, unsigned int *a2, void *a3, int a4, _DWORD *a5)
{
  __int128 v8;
  uint64_t v9;
  __int16 v10;
  unsigned int v11;
  int v12;
  __int16 v13;
  uint64_t v14;
  _WORD *exception;
  unsigned int v17[4];
  uint64_t v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  _QWORD v23[9];
  _BYTE __b[920];
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;

  *(_QWORD *)&v8 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v28 = v8;
  v29 = v8;
  v26 = v8;
  v27 = v8;
  cacheCallContext::cacheCallContext((cacheCallContext *)&v26, *(const TFont **)(a1 + 64), a3, a4);
  v25 = 0xAAAAAAAAAAAAAAAALL;
  CreateFontCacheNode(*((const TFont **)&v27 + 1), &v25);
  v9 = v25;
  if (!v25)
  {
    exception = __cxa_allocate_exception(2uLL);
    *exception = 20;
    __cxa_throw(exception, MEMORY[0x1E0DE4F10], 0);
  }
  memset(__b, 170, sizeof(__b));
  memoryContext::memoryContext((memoryContext *)__b, (cacheCallContext *)&v26);
  v23[5] = 0xAAAAAAAAAAAAAAAALL;
  v23[8] = 0xAAAAAAAAAA000000;
  v23[0] = __b;
  v23[1] = 1358921729;
  v23[2] = 1358921729;
  v23[3] = 1358921729;
  v23[4] = 0;
  v23[6] = 1358921729;
  v23[7] = 1358921729;
  AssureScalerFontBlock(v23, (memoryContext *)__b, v9);
  v10 = *(_WORD *)(v9 + 16);
  *(_WORD *)(v9 + 16) = v10 + 1;
  v22 = -1431655766;
  v21 = 0xAAAAAAAAAAAAAAAALL;
  v17[0] = *a2;
  v17[1] = 0;
  v11 = *(_DWORD *)(a1 + 24);
  v17[2] = 0;
  v17[3] = v11;
  v18 = *(_QWORD *)(a1 + 32);
  v19 = 0;
  v20 = *((_QWORD *)&v28 + 1);
  v12 = SelectStreamType((uint64_t)v23, (uint64_t)__b, v17);
  v13 = v12;
  if (!v12)
  {
    *a2 = v17[0];
    *a5 = 0;
    *(_WORD *)(v9 + 16) = v10;
  }
  memoryContext::~memoryContext((memoryContext *)__b);
  v14 = *(_QWORD *)(v9 + 8);
  if (v14)
    free((void *)(v14 - 8));
  MEMORY[0x1B5E0CD38](v9, 0x1080C40587D25DELL);
  UnCacheCurrentGlyph((cacheCallContext *)&v26);
  return v13;
}

void sub_1B09921A0(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;

  memoryContext::~memoryContext((memoryContext *)&a27);
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    if (!*(_QWORD *)(v27 - 120))
      JUMPOUT(0x1B0992154);
    JUMPOUT(0x1B099212CLL);
  }
  std::unique_ptr<fontBlockCacheNode>::reset[abi:fe180100]((uint64_t *)(v27 - 120), 0);
  UnCacheCurrentGlyph((cacheCallContext *)(v27 - 112));
  _Unwind_Resume(a1);
}

uint64_t TTPerformStreamVariationQuery(uint64_t a1, int *a2, uint64_t a3, _DWORD *a4)
{
  __int128 v8;
  uint64_t v9;
  int v10;
  int v11;
  _BOOL4 v12;
  int v13;
  uint64_t v14;
  _WORD *exception;
  memoryContext *v17[3];
  _QWORD v18[2];
  int v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _BYTE __b[920];
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;

  *(_QWORD *)&v8 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v40 = v8;
  v41 = v8;
  v38 = v8;
  v39 = v8;
  cacheCallContext::cacheCallContext((cacheCallContext *)&v38, *(const TFont **)(a1 + 64), 0, 0);
  v37 = 0xAAAAAAAAAAAAAAAALL;
  CreateFontCacheNode(*((const TFont **)&v39 + 1), &v37);
  v9 = v37;
  if (!v37)
  {
    exception = __cxa_allocate_exception(2uLL);
    *exception = 20;
    __cxa_throw(exception, MEMORY[0x1E0DE4F10], 0);
  }
  memset(__b, 170, sizeof(__b));
  memoryContext::memoryContext((memoryContext *)__b, (cacheCallContext *)&v38);
  v35 = 0xAAAAAAAAAA000000;
  v32 = 0xAAAAAAAAAAAAAAAALL;
  v27 = __b;
  v28 = 1358921729;
  v29 = 1358921729;
  v30 = 1358921729;
  v31 = 0;
  v33 = 1358921729;
  v34 = 1358921729;
  AssureScalerFontBlock(&v27, (memoryContext *)__b, v9);
  ++*(_WORD *)(v9 + 16);
  v10 = *a2;
  v18[0] = 0;
  v18[1] = a3;
  v19 = v10;
  v20 = 0;
  v11 = *(_DWORD *)(a1 + 24);
  v21 = 0;
  v22 = v11;
  v23 = *(_QWORD *)(a1 + 32);
  v24 = 0;
  v25 = 0;
  v26 = 0;
  memset(v17, 170, sizeof(v17));
  TStreamerContext::TStreamerContext(v17, (uint64_t)&v27, (memoryContext *)__b, (uint64_t)v18);
  v12 = (v19 & 1) == 0 && *(_BYTE *)(v28 + 155);
  LODWORD(v24) = v12;
  TStreamerContext::~TStreamerContext((TStreamerContext *)v17);
  v13 = v24;
  *a2 = v19;
  *a4 = v13;
  --*(_WORD *)(v9 + 16);
  memoryContext::~memoryContext((memoryContext *)__b);
  v14 = *(_QWORD *)(v9 + 8);
  if (v14)
    free((void *)(v14 - 8));
  MEMORY[0x1B5E0CD38](v9, 0x1080C40587D25DELL);
  UnCacheCurrentGlyph((cacheCallContext *)&v38);
  return 0;
}

void sub_1B0992414(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;

  memoryContext::~memoryContext((memoryContext *)&a29);
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    if (!*(_QWORD *)(v29 - 136))
      JUMPOUT(0x1B09923C8);
    JUMPOUT(0x1B09923A0);
  }
  std::unique_ptr<fontBlockCacheNode>::reset[abi:fe180100]((uint64_t *)(v29 - 136), 0);
  UnCacheCurrentGlyph((cacheCallContext *)(v29 - 128));
  _Unwind_Resume(a1);
}

uint64_t TTPerformStreamingPSPrereqItem(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, int a5)
{
  __int128 v8;
  uint64_t v9;
  __int16 v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  __int16 v14;
  uint64_t v15;
  unsigned int v17[4];
  uint64_t v18;
  _BYTE v19[24];
  _QWORD v20[9];
  _BYTE __b[920];
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;

  *(_QWORD *)&v8 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v25 = v8;
  v26 = v8;
  v23 = v8;
  v24 = v8;
  cacheCallContext::cacheCallContext((cacheCallContext *)&v23, *(const TFont **)(a1 + 64), 0, 0);
  v22 = 0xAAAAAAAAAAAAAAAALL;
  CreateFontCacheNode(*((const TFont **)&v24 + 1), &v22);
  v9 = v22;
  if (v22)
  {
    BYTE12(v26) = 1;
    memset(__b, 170, sizeof(__b));
    memoryContext::memoryContext((memoryContext *)__b, (cacheCallContext *)&v23);
    v20[5] = 0xAAAAAAAAAAAAAAAALL;
    v20[8] = 0xAAAAAAAAAA000000;
    v20[0] = __b;
    v20[1] = 1358921729;
    v20[2] = 1358921729;
    v20[3] = 1358921729;
    v20[4] = 0;
    v20[6] = 1358921729;
    v20[7] = 1358921729;
    AssureScalerFontBlock(v20, (memoryContext *)__b, v9);
    v10 = *(_WORD *)(v9 + 16);
    *(_WORD *)(v9 + 16) = v10 + 1;
    v11 = *a2;
    v12 = *(_DWORD *)(a1 + 24);
    v17[2] = 0;
    v17[3] = v12;
    v17[0] = v11;
    v17[1] = 0;
    v18 = *(_QWORD *)(a1 + 32);
    memset(&v19[4], 170, 20);
    *(_DWORD *)v19 = a5;
    v13 = SelectStreamType((uint64_t)v20, (uint64_t)__b, v17);
    v14 = v13;
    if (!v13)
    {
      *a2 = v17[0];
      *(_WORD *)(v9 + 16) = v10;
    }
    memoryContext::~memoryContext((memoryContext *)__b);
    v15 = *(_QWORD *)(v9 + 8);
    if (v15)
      free((void *)(v15 - 8));
    MEMORY[0x1B5E0CD38](v9, 0x1080C40587D25DELL);
  }
  else
  {
    v14 = 20;
  }
  UnCacheCurrentGlyph((cacheCallContext *)&v23);
  return v14;
}

void sub_1B099263C(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;

  memoryContext::~memoryContext((memoryContext *)&a27);
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    if (!*(_QWORD *)(v27 - 136))
      JUMPOUT(0x1B0992614);
    JUMPOUT(0x1B09925E4);
  }
  std::unique_ptr<fontBlockCacheNode>::reset[abi:fe180100]((uint64_t *)(v27 - 136), 0);
  UnCacheCurrentGlyph((cacheCallContext *)(v27 - 128));
  _Unwind_Resume(a1);
}

uint64_t TTPerformStreamingPSVariationOperator(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  unsigned int *v9;
  size_t *v10;
  __int16 v11;
  uint64_t v12;
  memoryContext *v14[3];
  _QWORD v15[2];
  int v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  memoryContext *v24[5];
  __int128 v25;
  __int128 v26;
  _BYTE __b[920];
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;

  *(_QWORD *)&v6 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v31 = v6;
  v32 = v6;
  v29 = v6;
  v30 = v6;
  cacheCallContext::cacheCallContext((cacheCallContext *)&v29, *(const TFont **)(a1 + 64), 0, 0);
  v28 = 0xAAAAAAAAAAAAAAAALL;
  CreateFontCacheNode(*((const TFont **)&v30 + 1), &v28);
  v7 = v28;
  if (v28)
  {
    ++*(_WORD *)(v28 + 16);
    BYTE12(v32) = 1;
    memset(__b, 170, sizeof(__b));
    memoryContext::memoryContext((memoryContext *)__b, (cacheCallContext *)&v29);
    *(_QWORD *)&v8 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v26 = v8;
    v25 = v8;
    WORD4(v26) = 0;
    BYTE10(v26) = 0;
    v24[2] = (memoryContext *)1358921729;
    v24[3] = (memoryContext *)1358921729;
    v24[4] = 0;
    v9 = *(unsigned int **)(v7 + 8);
    v24[0] = (memoryContext *)__b;
    v24[1] = (memoryContext *)v9;
    *((_QWORD *)&v25 + 1) = (char *)v9 + v9[1];
    *(_QWORD *)&v26 = (char *)v9 + v9[2];
    LODWORD(v9) = *a2;
    v15[0] = a3;
    v15[1] = 0;
    v16 = (int)v9;
    v17 = 0;
    LODWORD(v9) = *(_DWORD *)(a1 + 24);
    v18 = 0;
    v19 = (int)v9;
    v20 = *(_QWORD *)(a1 + 32);
    v21 = 0;
    v22 = 0;
    v23 = 0;
    memset(v14, 170, sizeof(v14));
    TStreamerContext::TStreamerContext(v14, (uint64_t)v24, (memoryContext *)__b, (uint64_t)v15);
    if ((v16 & 1) != 0)
    {
      v10 = ScalerNewScratch((memoryContext *)__b, 0x20030u, 0);
      *((_DWORD *)v10 + 32778) = 0;
      *v10 = (size_t)__b;
      v10[1] = (size_t)v15;
      v10[2] = 0;
      v10[3] = (size_t)(v10 + 5);
      v10[4] = (size_t)(v10 + 5);
      StreamVariationPSOperator(v24, (uint64_t)v10);
      DisposeStreamBuffer(v10);
    }
    TStreamerContext::~TStreamerContext((TStreamerContext *)v14);
    *a2 = v16;
    memoryContext::~memoryContext((memoryContext *)__b);
    v11 = 0;
    --*(_WORD *)(v7 + 16);
    v12 = *(_QWORD *)(v7 + 8);
    if (v12)
      free((void *)(v12 - 8));
    MEMORY[0x1B5E0CD38](v7, 0x1080C40587D25DELL);
  }
  else
  {
    v11 = 20;
  }
  UnCacheCurrentGlyph((cacheCallContext *)&v29);
  return v11;
}

void sub_1B09928C0(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;

  memoryContext::~memoryContext((memoryContext *)&a29);
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1B0992860);
  }
  std::unique_ptr<fontBlockCacheNode>::reset[abi:fe180100]((uint64_t *)(v29 - 120), 0);
  UnCacheCurrentGlyph((cacheCallContext *)(v29 - 112));
  _Unwind_Resume(a1);
}

uint64_t TTPerformStreamingPSEncoding(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __int128 v10;
  uint64_t v11;
  int v12;
  int v13;
  size_t *v14;
  unsigned int FontTable;
  const void *v16;
  __int16 v17;
  uint64_t v18;
  const void *v20;
  memoryContext *v21[3];
  _QWORD v22[2];
  int v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[9];
  _BYTE __b[920];
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;

  *(_QWORD *)&v10 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v36 = v10;
  v37 = v10;
  v34 = v10;
  v35 = v10;
  cacheCallContext::cacheCallContext((cacheCallContext *)&v34, *(const TFont **)(a1 + 64), 0, 0);
  v33 = 0xAAAAAAAAAAAAAAAALL;
  CreateFontCacheNode(*((const TFont **)&v35 + 1), &v33);
  v11 = v33;
  if (v33)
  {
    BYTE12(v37) = 1;
    memset(__b, 170, sizeof(__b));
    memoryContext::memoryContext((memoryContext *)__b, (cacheCallContext *)&v34);
    v31[8] = 0xAAAAAAAAAA000000;
    v31[5] = 0xAAAAAAAAAAAAAAAALL;
    v31[0] = __b;
    v31[1] = 1358921729;
    v31[2] = 1358921729;
    v31[3] = 1358921729;
    v31[4] = 0;
    v31[6] = 1358921729;
    v31[7] = 1358921729;
    AssureScalerFontBlock(v31, (memoryContext *)__b, v11);
    ++*(_WORD *)(v11 + 16);
    v12 = *a2;
    v22[0] = a3;
    v22[1] = 0;
    v23 = v12;
    v24 = 0;
    v13 = *(_DWORD *)(a1 + 24);
    v25 = 0;
    v26 = v13;
    v27 = *(_QWORD *)(a1 + 32);
    v28 = a5;
    v29 = a4;
    v30 = 0;
    memset(v21, 170, sizeof(v21));
    TStreamerContext::TStreamerContext(v21, (uint64_t)v31, (memoryContext *)__b, (uint64_t)v22);
    v14 = ScalerNewScratch((memoryContext *)__b, 0x20030u, 0);
    *v14 = (size_t)__b;
    v14[1] = (size_t)v22;
    *((_DWORD *)v14 + 32778) = 0;
    v14[2] = 0;
    v14[3] = (size_t)(v14 + 5);
    v14[4] = (size_t)(v14 + 5);
    v20 = (const void *)0xAAAAAAAAAAAAAAAALL;
    FontTable = ScalerGetFontTable((memoryContext *)__b, 1886352244, 0, &v20, 1, 0);
    v16 = v20;
    DumpFontEncoding((memoryContext *)__b, (uint64_t)v14, (uint64_t)v20, FontTable);
    if (v16)
      ScalerReleaseFontTable((memoryContext *)__b, v16);
    DisposeStreamBuffer(v14);
    TStreamerContext::~TStreamerContext((TStreamerContext *)v21);
    *a2 = v23;
    --*(_WORD *)(v11 + 16);
    memoryContext::~memoryContext((memoryContext *)__b);
    v17 = 0;
    v18 = *(_QWORD *)(v11 + 8);
    if (v18)
      free((void *)(v18 - 8));
    MEMORY[0x1B5E0CD38](v11, 0x1080C40587D25DELL);
  }
  else
  {
    v17 = 20;
  }
  UnCacheCurrentGlyph((cacheCallContext *)&v34);
  return v17;
}

void sub_1B0992B9C(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  uint64_t v31;

  memoryContext::~memoryContext((memoryContext *)&a31);
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    if (!*(_QWORD *)(v31 - 136))
      JUMPOUT(0x1B0992B74);
    JUMPOUT(0x1B0992B44);
  }
  std::unique_ptr<fontBlockCacheNode>::reset[abi:fe180100]((uint64_t *)(v31 - 136), 0);
  UnCacheCurrentGlyph((cacheCallContext *)(v31 - 128));
  _Unwind_Resume(a1);
}

uint64_t TTPerformStreamingFlatteningDownload(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __int128 v10;
  uint64_t v11;
  int v12;
  int v13;
  size_t *v14;
  int v15;
  int v16;
  __int16 v17;
  uint64_t v18;
  memoryContext *v20[3];
  _QWORD v21[2];
  int v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  memoryContext *v30[9];
  _BYTE __b[920];
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;

  *(_QWORD *)&v10 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v35 = v10;
  v36 = v10;
  v33 = v10;
  v34 = v10;
  cacheCallContext::cacheCallContext((cacheCallContext *)&v33, *(const TFont **)(a1 + 64), 0, 0);
  v32 = 0xAAAAAAAAAAAAAAAALL;
  CreateFontCacheNode(*((const TFont **)&v34 + 1), &v32);
  v11 = v32;
  if (!v32)
  {
    v17 = 20;
    goto LABEL_11;
  }
  BYTE12(v36) = 1;
  memset(__b, 170, sizeof(__b));
  memoryContext::memoryContext((memoryContext *)__b, (cacheCallContext *)&v33);
  v30[8] = (memoryContext *)0xAAAAAAAAAA000000;
  v30[5] = (memoryContext *)0xAAAAAAAAAAAAAAAALL;
  v30[0] = (memoryContext *)__b;
  v30[1] = (memoryContext *)1358921729;
  v30[2] = (memoryContext *)1358921729;
  v30[3] = (memoryContext *)1358921729;
  v30[4] = 0;
  v30[6] = (memoryContext *)1358921729;
  v30[7] = (memoryContext *)1358921729;
  AssureScalerFontBlock(v30, (memoryContext *)__b, v11);
  ++*(_WORD *)(v11 + 16);
  v12 = *a2;
  v21[0] = a3;
  v21[1] = a4;
  v22 = v12;
  v23 = 0;
  v13 = *(_DWORD *)(a1 + 24);
  v24 = 0;
  v25 = v13;
  v26 = *(_QWORD *)(a1 + 32);
  v27 = 0;
  v28 = a5;
  v29 = 0;
  memset(v20, 170, sizeof(v20));
  TStreamerContext::TStreamerContext(v20, (uint64_t)v30, (memoryContext *)__b, (uint64_t)v21);
  v14 = ScalerNewScratch((memoryContext *)__b, 0x20030u, 0);
  *v14 = (size_t)__b;
  v14[1] = (size_t)v21;
  *((_DWORD *)v14 + 32778) = 0;
  v14[2] = 0;
  v14[3] = (size_t)(v14 + 5);
  v14[4] = (size_t)(v14 + 5);
  v15 = v22 & 0xFFF;
  if (v15 == 64)
  {
    v16 = 0;
    goto LABEL_7;
  }
  if (v15 == 128)
  {
    v16 = 1;
LABEL_7:
    StreamFlatFont(v30, (uint64_t)v14, v16, 0, 0);
  }
  DisposeStreamBuffer(v14);
  TStreamerContext::~TStreamerContext((TStreamerContext *)v20);
  *a2 = v22;
  --*(_WORD *)(v11 + 16);
  memoryContext::~memoryContext((memoryContext *)__b);
  v17 = 0;
  v18 = *(_QWORD *)(v11 + 8);
  if (v18)
    free((void *)(v18 - 8));
  MEMORY[0x1B5E0CD38](v11, 0x1080C40587D25DELL);
LABEL_11:
  UnCacheCurrentGlyph((cacheCallContext *)&v33);
  return v17;
}

void sub_1B0992E68(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;

  memoryContext::~memoryContext((memoryContext *)&a29);
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    if (!*(_QWORD *)(v29 - 136))
      JUMPOUT(0x1B0992E40);
    JUMPOUT(0x1B0992E18);
  }
  std::unique_ptr<fontBlockCacheNode>::reset[abi:fe180100]((uint64_t *)(v29 - 136), 0);
  UnCacheCurrentGlyph((cacheCallContext *)(v29 - 128));
  _Unwind_Resume(a1);
}

uint64_t TTPerformStreamingPSDownload(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, uint64_t a9, __CFArray *a10)
{
  __int128 v18;
  uint64_t v19;
  int v20;
  int v21;
  size_t *v22;
  unsigned int v23;
  __int16 v24;
  int v25;
  uint64_t v26;
  memoryContext *v28[3];
  _QWORD v29[2];
  int v30;
  int v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  memoryContext *v38[9];
  _BYTE __b[920];
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;

  *(_QWORD *)&v18 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v18 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v43 = v18;
  v44 = v18;
  v41 = v18;
  v42 = v18;
  cacheCallContext::cacheCallContext((cacheCallContext *)&v41, *(const TFont **)(a1 + 64), 0, 0);
  v40 = 0xAAAAAAAAAAAAAAAALL;
  CreateFontCacheNode(*((const TFont **)&v42 + 1), &v40);
  v19 = v40;
  if (!v40)
  {
    v24 = 20;
    goto LABEL_18;
  }
  BYTE12(v44) = 1;
  memset(__b, 170, sizeof(__b));
  memoryContext::memoryContext((memoryContext *)__b, (cacheCallContext *)&v41);
  v38[8] = (memoryContext *)0xAAAAAAAAAA000000;
  v38[5] = (memoryContext *)0xAAAAAAAAAAAAAAAALL;
  v38[0] = (memoryContext *)__b;
  v38[1] = (memoryContext *)1358921729;
  v38[2] = (memoryContext *)1358921729;
  v38[3] = (memoryContext *)1358921729;
  v38[4] = 0;
  v38[6] = (memoryContext *)1358921729;
  v38[7] = (memoryContext *)1358921729;
  AssureScalerFontBlock(v38, (memoryContext *)__b, v19);
  ++*(_WORD *)(v19 + 16);
  v20 = *a2;
  v29[0] = a3;
  v29[1] = a4;
  v30 = v20;
  v31 = 0;
  v21 = *(_DWORD *)(a1 + 24);
  v32 = 0;
  v33 = v21;
  v34 = *(_QWORD *)(a1 + 32);
  v35 = a7;
  v36 = a6;
  v37 = a5;
  memset(v28, 170, sizeof(v28));
  TStreamerContext::TStreamerContext(v28, (uint64_t)v38, (memoryContext *)__b, (uint64_t)v29);
  v22 = ScalerNewScratch((memoryContext *)__b, 0x20030u, 0);
  *v22 = (size_t)__b;
  v22[1] = (size_t)v29;
  *((_DWORD *)v22 + 32778) = 0;
  v22[2] = 0;
  v22[3] = (size_t)(v22 + 5);
  v22[4] = (size_t)(v22 + 5);
  v23 = v30 & 0xFFF;
  if (v23 <= 0x1F)
  {
    switch(v30 & 0xFFF)
    {
      case 1:
      case 8:
        StreamTTFont((uint64_t)v38, (uint64_t)v22, 0, a8);
        break;
      case 2:
        StreamT1Font((uint64_t)v38, (uint64_t)v22, 0);
        break;
      case 4:
        StreamT3Font((uint64_t)v38, (uint64_t)v22, a8);
        break;
      default:
        goto LABEL_15;
    }
    goto LABEL_15;
  }
  switch(v23)
  {
    case 0x20u:
      StreamPortableTTFont((uint64_t)v38, (uint64_t)v22);
      break;
    case 0x40u:
      v25 = 0;
      goto LABEL_14;
    case 0x80u:
      v25 = 1;
LABEL_14:
      StreamFlatFont(v38, (uint64_t)v22, v25, a9, a10);
      break;
  }
LABEL_15:
  DisposeStreamBuffer(v22);
  TStreamerContext::~TStreamerContext((TStreamerContext *)v28);
  *a2 = v30;
  --*(_WORD *)(v19 + 16);
  memoryContext::~memoryContext((memoryContext *)__b);
  v24 = 0;
  v26 = *(_QWORD *)(v19 + 8);
  if (v26)
    free((void *)(v26 - 8));
  MEMORY[0x1B5E0CD38](v19, 0x1080C40587D25DELL);
LABEL_18:
  UnCacheCurrentGlyph((cacheCallContext *)&v41);
  return v24;
}

void sub_1B09931C8(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;

  memoryContext::~memoryContext((memoryContext *)&a29);
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    if (!*(_QWORD *)(v29 - 168))
      JUMPOUT(0x1B099319CLL);
    JUMPOUT(0x1B0993174);
  }
  std::unique_ptr<fontBlockCacheNode>::reset[abi:fe180100]((uint64_t *)(v29 - 168), 0);
  UnCacheCurrentGlyph((cacheCallContext *)(v29 - 160));
  _Unwind_Resume(a1);
}

memoryContext **TStreamerContext::TStreamerContext(memoryContext **a1, uint64_t a2, memoryContext *a3, uint64_t a4)
{
  int v8;
  size_t *v9;
  size_t v10;
  __int16 v12;
  _WORD *exception;

  *a1 = a3;
  a1[1] = (memoryContext *)a4;
  v8 = SelectStreamType(a2, (uint64_t)a3, (unsigned int *)(a4 + 16));
  if (v8)
  {
    v12 = v8;
    exception = __cxa_allocate_exception(2uLL);
    *exception = v12;
    __cxa_throw(exception, MEMORY[0x1E0DE4F10], 0);
  }
  if (*(_QWORD *)(a4 + 48))
  {
    v9 = 0;
  }
  else
  {
    v10 = ((*(unsigned __int16 *)(*(_QWORD *)(a2 + 8) + 40) + 31) >> 3) & 0x3FFC;
    v9 = ScalerNewScratch(a3, v10, 0);
    memset(v9, 255, v10);
    *(_QWORD *)(a4 + 48) = v9;
  }
  a1[2] = (memoryContext *)v9;
  return a1;
}

void TStreamerContext::~TStreamerContext(TStreamerContext *this)
{
  char *v2;

  v2 = (char *)*((_QWORD *)this + 2);
  if (v2)
  {
    ScalerDisposeBlock(*(memoryContext **)this, v2, -1);
    *(_QWORD *)(*((_QWORD *)this + 1) + 48) = 0;
  }
}

void TLWFNFontObjectSurrogate::TLWFNFontObjectSurrogate(TLWFNFontObjectSurrogate *this, const TFont *a2)
{
  _WORD *exception;

  *(_QWORD *)this = &off_1E61B3E60;
  *((_QWORD *)this + 1) = a2;
  *((_QWORD *)this + 2) = 0;
  if (a2)
  {
    if ((*(unsigned int (**)(const TFont *))(*(_QWORD *)a2 + 40))(a2) != 22)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)exception = &off_1E61B2D68;
      exception[4] = 4;
    }
  }
}

void sub_1B09933EC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v1 + 16) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  _Unwind_Resume(exception_object);
}

void TLWFNFontObjectSurrogate::~TLWFNFontObjectSurrogate(TLWFNFontObjectSurrogate *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1E61B3E60;
  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_1E61B3E60;
  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x1B5E0CD38);
}

uint64_t TLWFNFontObjectSurrogate::GetTableOffset(TLWFNFontObjectSurrogate *this, unsigned int a2, unsigned int *a3)
{
  return 0xFFFFFFFFLL;
}

uint64_t TLWFNFontObjectSurrogate::GetTable@<X0>(TLWFNFontObjectSurrogate *this@<X0>, unsigned int *a2@<X3>, int a3@<W1>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  uint64_t result;
  uint64_t (*v9)(void);
  uint64_t v10;
  uint64_t v11;
  TResourceFileDataSurrogate *v12;
  uint64_t v13;
  _WORD *exception;

  if (a3 != 1112297028)
  {
    if ((*(unsigned int (**)(TLWFNFontObjectSurrogate *))(*(_QWORD *)this + 16))(this) != a3)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)exception = &off_1E61B2D68;
      exception[4] = 4;
    }
    if (a2)
    {
      v10 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 56))(*((_QWORD *)this + 1));
      *a2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10);
    }
    v9 = *(uint64_t (**)(void))(**((_QWORD **)this + 1) + 48);
    return v9();
  }
  v7 = *((_QWORD *)this + 2);
  if (v7)
  {
    if (!a2)
    {
LABEL_7:
      v9 = *(uint64_t (**)(void))(*(_QWORD *)v7 + 32);
      return v9();
    }
    LODWORD(result) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7);
LABEL_5:
    *a2 = result;
LABEL_6:
    v7 = *((_QWORD *)this + 2);
    goto LABEL_7;
  }
  v11 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 56))(*((_QWORD *)this + 1));
  result = FPRMGetResourceCount(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v11 + 8) + 48) + 120), 1112297028);
  if ((_DWORD)result == 1)
  {
    v12 = (TResourceFileDataSurrogate *)operator new(0x10uLL, MEMORY[0x1E0DE4E10]);
    if (v12)
    {
      v13 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 56))(*((_QWORD *)this + 1));
      TResourceFileDataSurrogate::TResourceFileDataSurrogate(v12, (const TResourceForkSurrogate *)(*(_QWORD *)(v13 + 8) + 40), 1112297028, 0);
    }
    result = *((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = v12;
    if (result)
    {
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      v12 = (TResourceFileDataSurrogate *)*((_QWORD *)this + 2);
    }
    if (v12)
    {
      result = (*(uint64_t (**)(TResourceFileDataSurrogate *))(*(_QWORD *)v12 + 24))(v12);
      if (result)
      {
        if (!a2)
          goto LABEL_6;
        goto LABEL_5;
      }
    }
  }
  *a4 = &off_1E6176770;
  a4[1] = 0;
  a4[2] = 0;
  a4[3] = 0;
  return result;
}

void sub_1B0993674(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E0CD2C](v1, MEMORY[0x1E0DE4E10]);
  _Unwind_Resume(a1);
}

void TLWFNResourceReference::~TLWFNResourceReference(const TFileFragmentReference **this)
{
  *this = (const TFileFragmentReference *)&off_1E61B3EC0;
  TFileDataSurrogate::~TFileDataSurrogate(this + 3);
}

{
  *this = (const TFileFragmentReference *)&off_1E61B3EC0;
  TFileDataSurrogate::~TFileDataSurrogate(this + 3);
  JUMPOUT(0x1B5E0CD38);
}

uint64_t TLWFNFontTableContext::GetData(TLWFNFontTableContext *this, unsigned int a2, unsigned int *a3, unsigned int *a4)
{
  unsigned int v8;
  uint64_t v9;
  __int128 v10;
  unsigned int i;
  unsigned int v12;
  unsigned int v13;
  uint64_t result;
  _QWORD v15[3];
  const TFileFragmentReference *v16[2];
  int v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v8 = *((_DWORD *)this + 79);
  if (v8 > a2 && *((_WORD *)this + 157))
  {
    *((_DWORD *)this + 79) = 0;
    *((_WORD *)this + 157) = 0;
    TLWFNResourceReference::TLWFNResourceReference((TLWFNResourceReference *)v15, *(const TResourceForkSurrogate **)this, 501);
    v9 = v15[2];
    *((_QWORD *)this + 2) = v15[1];
    *((_QWORD *)this + 3) = v9;
    TFileDataSurrogate::operator=((uint64_t)this + 32, (uint64_t)v16);
    *((_DWORD *)this + 12) = v17;
    *(_OWORD *)((char *)this + 244) = v30;
    *(_OWORD *)((char *)this + 180) = v26;
    *(_OWORD *)((char *)this + 196) = v27;
    *(_OWORD *)((char *)this + 212) = v28;
    *(_OWORD *)((char *)this + 228) = v29;
    *(_OWORD *)((char *)this + 116) = v22;
    *(_OWORD *)((char *)this + 132) = v23;
    *(_OWORD *)((char *)this + 148) = v24;
    *(_OWORD *)((char *)this + 164) = v25;
    *(_OWORD *)((char *)this + 52) = v18;
    *(_OWORD *)((char *)this + 68) = v19;
    *(_OWORD *)((char *)this + 84) = v20;
    *(_OWORD *)((char *)this + 100) = v21;
    *(_OWORD *)((char *)this + 260) = v31;
    v10 = v33;
    *(_OWORD *)((char *)this + 276) = v32;
    *(_OWORD *)((char *)this + 292) = v10;
    v15[0] = &off_1E61B3EC0;
    TFileDataSurrogate::~TFileDataSurrogate(v16);
    *((_WORD *)this + 156) = *((_QWORD *)this + 3);
    v8 = *((_DWORD *)this + 79);
  }
  for (i = a2 - v8; ; i -= v12)
  {
    v12 = *((unsigned __int16 *)this + 156);
    if (i < v12)
      break;
    if (!*((_QWORD *)TType1LWFNResourceChain::GetNextResource(this) + 1))
    {
      result = 0;
      *a4 = 0;
      *a3 = 0;
      return result;
    }
  }
  v13 = v12 - i - *a3;
  if (v12 - i < *a3)
  {
    v13 = 0;
    *a3 = v12 - i;
  }
  *a4 = v13;
  return *((_QWORD *)this + 2) + i;
}

void sub_1B09938C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  const TFileFragmentReference **v10;

  TFileDataSurrogate::~TFileDataSurrogate(v10);
  _Unwind_Resume(a1);
}

void TType1LWFNFont::~TType1LWFNFont(TType1LWFNFont *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E61CC0A8;
  v2 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

{
  uint64_t v2;

  *(_QWORD *)this = off_1E61CC0A8;
  v2 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x1B5E0CD38);
}

TLWFNFontObjectSurrogate *TType1LWFNFont::GetFontObject(TType1LWFNFont *this)
{
  TLWFNFontObjectSurrogate *v1;
  TLWFNFontObjectSurrogate *v3;
  uint64_t v4;
  _WORD *exception;

  v1 = (TLWFNFontObjectSurrogate *)*((_QWORD *)this + 3);
  if (!v1)
  {
    v3 = (TLWFNFontObjectSurrogate *)operator new(0x18uLL, MEMORY[0x1E0DE4E10]);
    if (v3)
    {
      v1 = v3;
      TLWFNFontObjectSurrogate::TLWFNFontObjectSurrogate(v3, *((const TFont **)this + 4));
      v4 = *((_QWORD *)this + 3);
      *((_QWORD *)this + 3) = v1;
      if (!v4)
        return v1;
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
      v1 = (TLWFNFontObjectSurrogate *)*((_QWORD *)this + 3);
      if (v1)
        return v1;
    }
    else
    {
      *((_QWORD *)this + 3) = 0;
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E61B2D68;
    exception[4] = 5;
  }
  return v1;
}

void sub_1B0993A20(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E0CD2C](v1, MEMORY[0x1E0DE4E10]);
  _Unwind_Resume(a1);
}

uint64_t TType1LWFNFont::GetFontDataTableTag(TType1LWFNFont *this)
{
  return 1280788046;
}

uint64_t TType1LWFNFont::GetSubrCount(TType1LWFNFont *this)
{
  return *(unsigned __int16 *)(*((_QWORD *)this + 4) + 144);
}

uint64_t TType1LWFNFont::GetSubrData(TType1LWFNFont *this, const unsigned __int8 **a2, __int16 *a3, const unsigned __int8 **a4)
{
  uint64_t v4;
  const unsigned __int8 *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *((_QWORD *)this + 4);
  *a3 = *(_WORD *)(v4 + 146);
  v7 = v4 + 112;
  v5 = *(const unsigned __int8 **)(v4 + 112);
  v6 = *(_QWORD *)(v7 + 8);
  *a2 = v5;
  *a4 = &v5[v6];
  return (uint64_t)*a2;
}

uint64_t TType1LWFNFont::GetGlobalSubrCount(TType1LWFNFont *this)
{
  return 0;
}

uint64_t TType1LWFNFont::GetGlobalSubrArrayAndObjectData(TType1LWFNFont *this, __int16 *a2, const unsigned __int8 **a3, const unsigned __int8 **a4, const unsigned __int8 **a5, const unsigned __int8 **a6)
{
  *a2 = 0;
  *a3 = 0;
  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  return 0;
}

unsigned __int8 *TType1LWFNFont::GetCharOutline@<X0>(TType1LWFNFont *this@<X0>, unsigned __int16 *a2@<X2>, unsigned int a3@<W1>, unsigned __int8 **a4@<X8>)
{
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  int *v11;
  unsigned __int8 *v12;
  unsigned __int8 *result;
  _WORD *exception;

  v8 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 168))(*((_QWORD *)this + 4));
  if (v8 >= 0xFFFF)
    v9 = 0xFFFF;
  else
    v9 = v8;
  if (v9 <= a3)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E61B2D68;
    exception[4] = 8;
  }
  v10 = *(_QWORD *)(*((_QWORD *)this + 4) + 104);
  *a4 = (unsigned __int8 *)0xAAAAAAAAAAAAAAAALL;
  v11 = (int *)(v10 + 8 * a3 + 4);
  v12 = (unsigned __int8 *)operator new[]();
  *a4 = v12;
  result = LenIVDecrypt(v12, (unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)this + 4) + 232) + *(unsigned int *)(v10 + 8 * a3)), *v11, *((__int16 *)this + 8));
  *a2 = *v11;
  return result;
}

void sub_1B0993B8C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  *v1 = 0;
  MEMORY[0x1B5E0CD14](v2, 0x1000C8077774924);
  _Unwind_Resume(a1);
}

BOOL TType1LWFNFont::GetFontEncoding(TType1LWFNFont *this, unsigned __int16 *__dst)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *((_QWORD *)this + 4);
  v3 = *(_QWORD *)(v2 + 248);
  if (v3)
    memcpy(__dst, *(const void **)(v2 + 248), 0x200uLL);
  return v3 != 0;
}

void *TType1LWFNFont::FindCharName(TType1LWFNFont *this, unsigned int a2, unsigned __int8 *a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 *v6;
  void *result;
  _WORD *exception;

  v3 = *((_QWORD *)this + 4);
  v4 = *(unsigned int *)(*(_QWORD *)(v3 + 192) + 4 * a2);
  if ((v4 & 0x80000000) != 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E61B2D68;
    exception[4] = 5;
  }
  v6 = (unsigned __int8 *)(*(_QWORD *)(v3 + 48) + v4);
  result = memcpy(a3 + 2, v6 + 1, *v6);
  a3[1] = 47;
  *a3 = *v6 + 1;
  return result;
}

uint64_t TType1LWFNFont::GetGlyphName(TType1LWFNFont *this, unsigned int a2, unsigned int a3, char *a4)
{
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _WORD *exception;
  __int16 v17;

  *a4 = 0;
  v8 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 168))(*((_QWORD *)this + 4));
  if (v8 >= 0xFFFF)
    v9 = 0xFFFF;
  else
    v9 = v8;
  if (v9 <= a2)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E61B2D68;
    v17 = 8;
    goto LABEL_15;
  }
  if (a2)
  {
    v10 = *((_QWORD *)this + 4);
    v11 = *(unsigned int *)(*(_QWORD *)(v10 + 192) + 4 * a2);
    if ((v11 & 0x80000000) == 0)
    {
      v12 = *(_QWORD *)(v10 + 48);
      v13 = (char *)(v12 + v11 + 1);
      v14 = *(unsigned __int8 *)(v12 + v11);
      if (!*(_BYTE *)(v12 + v11))
        return v14;
      goto LABEL_10;
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E61B2D68;
    v17 = 5;
LABEL_15:
    exception[4] = v17;
  }
  v14 = 7;
  v13 = ".notdef";
LABEL_10:
  if (v14 < a3)
  {
    memcpy(a4, v13, v14);
    a4[v14] = 0;
  }
  return v14;
}

void TType1LWFNFont::SetupGlyphBits(TType1LWFNFont *this@<X0>, const unsigned int *a2@<X2>, _QWORD *a3@<X8>)
{
  if (a2)
  {
    (*(void (**)(TType1LWFNFont *))(*(_QWORD *)this + 40))(this);
    TType1PSFont::SetupGlyphBits(this, a2, a3);
  }
  else
  {
    *a3 = 0;
  }
}

void TLWFNCharStringContext::~TLWFNCharStringContext(TLWFNCharStringContext *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1E61B4018;
  v2 = *((_QWORD *)this + 37);
  *((_QWORD *)this + 37) = 0;
  if (v2)
    MEMORY[0x1B5E0CD14](v2, 0x1000C8077774924);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_1E61B4018;
  v2 = *((_QWORD *)this + 37);
  *((_QWORD *)this + 37) = 0;
  if (v2)
    MEMORY[0x1B5E0CD14](v2, 0x1000C8077774924);
  JUMPOUT(0x1B5E0CD38);
}

void TBufferedLWFNCharStringStreamingContext::~TBufferedLWFNCharStringStreamingContext(TBufferedLWFNCharStringStreamingContext *this)
{
  TBufferedCharStringStreamingContext::~TBufferedCharStringStreamingContext(this);
  JUMPOUT(0x1B5E0CD38);
}

uint64_t TBufferedLWFNCharStringStreamingContext::StreamDecryptedCharString(TBufferedLWFNCharStringStreamingContext *this, const TType1PSFont *a2, uint64_t a3, char *a4, int *a5)
{
  __int128 v10;
  unint64_t v11;
  unint64_t v12;
  BOOL v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t result;
  _WORD *exception;
  unint64_t v19;
  __int16 v20;
  void (**v21)(TLWFNCharStringContext *__hidden);
  _OWORD v22[16];
  char *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v10 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v22[15] = v10;
  v22[14] = v10;
  v22[13] = v10;
  v22[12] = v10;
  v22[11] = v10;
  v22[10] = v10;
  v22[9] = v10;
  v22[8] = v10;
  v22[7] = v10;
  v22[5] = v10;
  v22[6] = v10;
  v22[3] = v10;
  v22[4] = v10;
  v22[1] = v10;
  v22[2] = v10;
  v22[0] = v10;
  v23 = "/.notdef";
  v24 = 8;
  v25 = 0;
  v26 = 0;
  v21 = &off_1E61B4018;
  v27 = 0;
  (*(void (**)(const TType1PSFont *, uint64_t, _OWORD *))(*(_QWORD *)a2 + 232))(a2, a3, v22);
  v23 = (char *)v22 + 1;
  v24 = LOBYTE(v22[0]);
  v26 = *(unsigned int *)(*(_QWORD *)(*((_QWORD *)a2 + 4) + 104) + 8 * a3 + 4);
  v20 = -21846;
  v19 = 0xAAAAAAAAAAAAAAAALL;
  (*(void (**)(unint64_t *__return_ptr, const TType1PSFont *, uint64_t, __int16 *))(*(_QWORD *)a2 + 128))(&v19, a2, a3, &v20);
  v11 = v19;
  v25 = v19;
  if (*((__int16 *)a2 + 8) >= 1)
  {
    v12 = *((unsigned __int16 *)a2 + 8);
    v13 = v26 >= v12;
    v14 = v26 - v12;
    if (!v13)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)exception = &off_1E61B2D68;
      exception[4] = 5;
    }
    v26 = v14;
  }
  v19 = 0;
  v15 = v27;
  v27 = v11;
  if (v15)
  {
    MEMORY[0x1B5E0CD14](v15, 0x1000C8077774924);
    v16 = v19;
    v19 = 0;
    if (v16)
      MEMORY[0x1B5E0CD14](v16, 0x1000C8077774924);
  }
  TBufferedCharStringStreamingContext::DoCharString(this, (uint64_t)&v21, a4, (uint64_t)a5);
  result = v27;
  v21 = &off_1E61B4018;
  v27 = 0;
  if (result)
    return MEMORY[0x1B5E0CD14](result, 0x1000C8077774924);
  return result;
}

void sub_1B09940B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49)
{
  if (a10)
    MEMORY[0x1B5E0CD14](a10, 0x1000C8077774924);
  if (a49)
    MEMORY[0x1B5E0CD14](a49, 0x1000C8077774924);
  _Unwind_Resume(exception_object);
}

uint64_t TType1LWFNFont::StreamPSFont(unsigned __int8 *a1, uint64_t a2, int a3, char a4, uint64_t a5, uint64_t a6, const char *a7, uint64_t a8, int *a9, unsigned __int8 *a10)
{
  uint64_t v15;
  __int32 *v16;
  unsigned int v17;
  const char *v18;
  unsigned __int16 *v19;
  __int128 v20;
  uint64_t v21;
  _OWORD *v22;
  int v23;
  int v24;
  unsigned int v25;
  __int32 *v26;
  __int128 v27;
  int v28;
  uint64_t v29;
  __int128 v30;
  unsigned int v31;
  char v32;
  BOOL v33;
  BOOL v34;
  char v35;
  _BYTE *Data;
  unsigned int v37;
  uint64_t v38;
  unsigned __int8 *v39;
  unsigned int *v40;
  unsigned int *v41;
  unint64_t v42;
  uint64_t v43;
  const unsigned __int8 *v44;
  _BOOL4 v45;
  __int128 v46;
  __int128 v47;
  unsigned __int8 *v48;
  unint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t result;
  _WORD *v53;
  _WORD *v54;
  _WORD *exception;
  _WORD *v56;
  unsigned __int8 *v57;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62[3];
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unsigned __int8 *v66[7];
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  _QWORD v72[3];
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  _OWORD __b[44];
  _OWORD v81[32];
  uint64_t v82;

  v82 = *MEMORY[0x1E0C80C00];
  v15 = (*(uint64_t (**)(unsigned __int8 *, _QWORD))(*(_QWORD *)a1 + 48))(a1, *a9);
  *a9 = v15;
  v65 = 0xAAAAAAAAAAAAAAAALL;
  (*(void (**)(unint64_t *__return_ptr, unsigned __int8 *, uint64_t, uint64_t))(*(_QWORD *)a1 + 240))(&v65, a1, v15, a8);
  v16 = (__int32 *)v65;
  v17 = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 4) + 168))(*((_QWORD **)a1 + 4));
  *(_QWORD *)&v20 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v20 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v81[31] = v20;
  v81[30] = v20;
  if (v17 >= 0xFFFF)
    v21 = 0xFFFFLL;
  else
    v21 = v17;
  v81[29] = v20;
  v81[28] = v20;
  v81[27] = v20;
  v81[26] = v20;
  v81[25] = v20;
  v81[24] = v20;
  v81[23] = v20;
  v81[22] = v20;
  v81[21] = v20;
  v81[19] = v20;
  v81[20] = v20;
  v81[17] = v20;
  v81[18] = v20;
  v81[15] = v20;
  v81[16] = v20;
  v81[13] = v20;
  v81[14] = v20;
  v81[11] = v20;
  v81[12] = v20;
  v81[9] = v20;
  v81[10] = v20;
  v81[7] = v20;
  v81[8] = v20;
  v81[5] = v20;
  v81[6] = v20;
  v81[3] = v20;
  v81[4] = v20;
  v81[1] = v20;
  v81[2] = v20;
  v22 = (_OWORD *)a5;
  v81[0] = v20;
  if (!a5)
  {
    v22 = v81;
    TType1PSFont::SetEncoding(v21, v16, (const unsigned int *)v81, v19);
  }
  v23 = *a9;
  if ((*a9 & 0x200) != 0)
  {
    *(_QWORD *)&v46 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v46 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v71 = v46;
    v70 = v46;
    v69 = v46;
    v67 = v46;
    v68 = v46;
    v66[0] = (unsigned __int8 *)&off_1E61B63B8;
    v66[1] = a1;
    v66[2] = (unsigned __int8 *)v16;
    v66[3] = (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)a1 + 40))(a1);
    v66[4] = a10;
    v66[5] = (unsigned __int8 *)operator new[]();
    v66[6] = 0;
    LODWORD(v67) = 0;
    *(_DWORD *)((char *)&v67 + 6) = 0;
    *(_QWORD *)&v47 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v47 + 1) = 0xAAAAAAAAAAAAAAAALL;
    __b[22] = v47;
    __b[23] = v47;
    __b[20] = v47;
    __b[21] = v47;
    __b[18] = v47;
    __b[19] = v47;
    __b[16] = v47;
    __b[17] = v47;
    __b[14] = v47;
    __b[15] = v47;
    __b[12] = v47;
    __b[13] = v47;
    __b[10] = v47;
    __b[11] = v47;
    __b[8] = v47;
    __b[9] = v47;
    __b[6] = v47;
    __b[7] = v47;
    __b[4] = v47;
    __b[5] = v47;
    __b[2] = v47;
    __b[3] = v47;
    __b[0] = v47;
    __b[1] = v47;
    TCFFFontSet::TCFFFontSet((TCFFFontSet *)__b, 1, 0, 1, a7);
    *(_QWORD *)&__b[0] = &off_1E61CB900;
    (*(void (**)(unsigned __int8 *, __int32 *, _OWORD *, _OWORD *, uint64_t))(*(_QWORD *)a1 + 264))(a1, v16, v22, __b, 255);
    TCFFFontSet::StreamOut((TCFFFontSet *)__b, (TBufferedStreamingContext *)v66);
    TCFFFontSet::~TCFFFontSet((TCFFFontSet *)__b);
    TBufferedStreamingContext::~TBufferedStreamingContext((TBufferedStreamingContext *)v66);
  }
  else
  {
    if ((*((_WORD *)a1 + 4) & 1) != 0)
    {
      if ((a4 & 1) != 0 || (TType1PSFont::PrinterIsBad(a2, v18) & 1) != 0)
      {
        exception = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)exception = &off_1E61B2D68;
        exception[4] = 8;
      }
      v23 = *a9;
    }
    if ((v23 & 2) == 0)
      goto LABEL_21;
    if (!v16)
      goto LABEL_20;
    v24 = 0;
    if ((_DWORD)v21)
    {
      v25 = (v21 + 31) >> 5;
      v26 = v16;
      do
      {
        if (*v26)
        {
          LODWORD(v20) = *v26;
          *(int8x8_t *)&v20 = vcnt_s8(*(int8x8_t *)&v20);
          LOWORD(v20) = vaddlv_u8(*(uint8x8_t *)&v20);
          v24 += v20;
        }
        ++v26;
        --v25;
      }
      while (v25);
    }
    if (v24 == (_DWORD)v21)
    {
LABEL_20:
      if ((a3 & 1) != 0 || (*((_WORD *)a1 + 4) & 0x4000) == 0)
      {
LABEL_21:
        v63 = 0xAAAAAAAAAAAAAAAALL;
        v64 = 0xAAAAAAAAAAAAAAAALL;
        *(_QWORD *)&v62[1] = 0xAAAAAAAAAAAAAAAALL;
        TLWFNFontObjectSurrogate::TLWFNFontObjectSurrogate((TLWFNFontObjectSurrogate *)&v62[1], *((const TFont **)a1 + 4));
        *(_QWORD *)&v27 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v27 + 1) = 0xAAAAAAAAAAAAAAAALL;
        __b[18] = v27;
        __b[19] = v27;
        __b[16] = v27;
        __b[17] = v27;
        __b[14] = v27;
        __b[15] = v27;
        __b[12] = v27;
        __b[13] = v27;
        __b[10] = v27;
        __b[11] = v27;
        __b[8] = v27;
        __b[9] = v27;
        __b[6] = v27;
        __b[7] = v27;
        __b[4] = v27;
        __b[5] = v27;
        __b[2] = v27;
        __b[3] = v27;
        __b[0] = v27;
        __b[1] = v27;
        v28 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)a1 + 120))(a1);
        *(_QWORD *)&__b[0] = *(_QWORD *)((*(uint64_t (**)(unint64_t))(*(_QWORD *)v63 + 56))(v63) + 8)
                           + 40;
        v29 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v63 + 56))(v63);
        TLWFNResourceReference::TLWFNResourceReference((TLWFNResourceReference *)((char *)__b + 8), (const TResourceForkSurrogate *)(*(_QWORD *)(v29 + 8) + 40), 501);
        *((_QWORD *)&__b[19] + 1) = WORD4(__b[1]);
        if (v28 == 1280788046)
        {
          *(_QWORD *)&v30 = 0xAAAAAAAAAAAAAAAALL;
          *((_QWORD *)&v30 + 1) = 0xAAAAAAAAAAAAAAAALL;
          v79 = v30;
          v78 = v30;
          v77 = v30;
          v76 = v30;
          v75 = v30;
          v74 = v30;
          v73 = v30;
          v72[0] = &off_1E61B63B8;
          v72[1] = a1;
          v72[2] = v16;
          v57 = a1;
          *(_QWORD *)&v73 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)a1 + 40))(a1);
          *((_QWORD *)&v73 + 1) = a10;
          v31 = 0;
          v32 = 0;
          v74 = (unint64_t)operator new[]();
          LODWORD(v75) = 0;
          *(_DWORD *)((char *)&v75 + 6) = 0;
          if (a5)
            v33 = 1;
          else
            v33 = a7 == 0;
          v34 = !v33;
          v35 = 1;
          while (2)
          {
            v61 = -1431655766;
            v62[0] = 2;
            Data = (_BYTE *)TLWFNFontTableContext::GetData((TLWFNFontTableContext *)__b, v31, v62, &v61);
            if (v62[0] == 2 && !Data[1])
            {
              v31 += 2;
              switch(*Data)
              {
                case 0:
                case 3:
                  v31 += v61;
                  continue;
                case 1:
                  v37 = v61;
                  v62[0] = v61;
                  v60 = v61;
                  v38 = TLWFNFontTableContext::GetData((TLWFNFontTableContext *)__b, v31, &v60, &v61);
                  if (!v61 && v37 == v60)
                  {
                    v39 = (unsigned __int8 *)v38;
                    if ((v32 & 1) != 0)
                      TBufferedStreamingContext::EndEexec((uint64_t)v72);
                    TBufferedStreamingContext::StreamBuffer((uint64_t)v72);
                    v66[0] = v39;
                    if ((v35 & 1) != 0)
                    {
                      v39 = (unsigned __int8 *)TBufferedStreamingContext::StreamSubstituteHeaderComment((TBufferedStreamingContext *)v72, a7, (char *)v39, v62);
                      v66[0] = v39;
                    }
                    if (v34)
                    {
                      v34 = !TBufferedStreamingContext::StreamTillSubstitutedFontName((TBufferedStreamingContext *)v72, a7, (const unsigned __int8 **)v66, v62, v40, v41);
                      v39 = v66[0];
                    }
                    else
                    {
                      v34 = 0;
                    }
                    TBufferedStreamingContext::BufferString((uint64_t)v72, v39, v62[0]);
                    v32 = 0;
                    v35 = 0;
                    v31 += v37;
                  }
                  continue;
                case 2:
                  v42 = v61;
                  v60 = v61;
                  v43 = TLWFNFontTableContext::GetData((TLWFNFontTableContext *)__b, v31, &v60, &v61);
                  if (!v61 && (_DWORD)v42 == v60)
                  {
                    v44 = (const unsigned __int8 *)v43;
                    if ((v32 & 1) == 0)
                    {
                      if (a3)
                        v45 = (*((_WORD *)v57 + 4) & 0x4000) == 0;
                      else
                        v45 = 0;
                      TBufferedStreamingContext::BeginEexec((TBufferedStreamingContext *)v72, v45, (*a9 & 0x10000) == 0);
                    }
                    TBufferedStreamingContext::BufferString((uint64_t)v72, v44, v42);
                    v31 += v42;
                    v32 = 1;
                  }
                  continue;
                case 5:
                  TBufferedStreamingContext::StreamBuffer((uint64_t)v72);
                  if (a5)
                  {
                    strncpy((char *)v66 + 1, a7, 0xFFuLL);
                    LOBYTE(v66[0]) = strlen(a7);
                    v48 = (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v57 + 112))(v57);
                    TType1PSFont::StreamReEncodeFont((uint64_t)v57, a5, v48, (unsigned __int8 *)v66, (uint64_t *)a10);
                  }
                  TBufferedStreamingContext::~TBufferedStreamingContext((TBufferedStreamingContext *)v72);
                  *((_QWORD *)&__b[0] + 1) = &off_1E61B3EC0;
                  TFileDataSurrogate::~TFileDataSurrogate((const TFileFragmentReference **)&__b[2]);
                  v49 = v64;
                  *(_QWORD *)&v62[1] = &off_1E61B3E60;
                  v64 = 0;
                  if (v49)
                    (*(void (**)(unint64_t))(*(_QWORD *)v49 + 8))(v49);
                  goto LABEL_60;
                default:
                  v54 = __cxa_allocate_exception(0x10uLL);
                  *(_QWORD *)v54 = &off_1E61B2D68;
                  v54[4] = 5;
              }
            }
            break;
          }
          v53 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v53 = &off_1E61B2D68;
          v53[4] = 5;
        }
        v56 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v56 = &off_1E61B2D68;
        v56[4] = 5;
      }
    }
    memset(__b, 170, 0x2B8uLL);
    TBufferedCharStringStreamingContext::TBufferedCharStringStreamingContext((uint64_t)__b, (uint64_t)a1, (uint64_t)v16, (uint64_t)a10);
    *(_QWORD *)&__b[0] = &off_1E61B4098;
    v50 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)a1 + 40))(a1);
    if ((*a9 & 0x10000) != 0)
      v51 = 0;
    else
      v51 = a3;
    TType1PSFont::StreamType1Font(a1, v50, a7, 0, (uint64_t)v22, a3, v51, (uint64_t)__b);
    TBufferedCharStringStreamingContext::~TBufferedCharStringStreamingContext((TBufferedCharStringStreamingContext *)__b);
  }
LABEL_60:
  result = v65;
  v65 = 0;
  if (result)
    return MEMORY[0x1B5E0CD14](result, 0x1000C8052888210);
  return result;
}

void sub_1B099490C()
{
  JUMPOUT(0x1B0994AE0);
}

void sub_1B0994A20(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_1B0994A28()
{
  JUMPOUT(0x1B0994ABCLL);
}

void sub_1B0994A40(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,__int16 a62)
{
  uint64_t v62;
  _WORD *v64;
  _WORD *exception;

  if (a2 == 1)
  {
    v64 = __cxa_begin_catch(a1);
    a62 = v64[4];
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E61B2D68;
    exception[4] = v64[4];
  }
  TBufferedStreamingContext::~TBufferedStreamingContext((TBufferedStreamingContext *)&a54);
  *(_QWORD *)(v62 + 8) = &off_1E61B3EC0;
  TFileDataSurrogate::~TFileDataSurrogate((const TFileFragmentReference **)&STACK[0x210]);
  if (a20)
    (*(void (**)(uint64_t))(*(_QWORD *)a20 + 8))(a20);
  if (a21)
    MEMORY[0x1B5E0CD14](a21, 0x1000C8052888210);
  _Unwind_Resume(a1);
}

void sub_1B0994A94()
{
  __cxa_end_catch();
  JUMPOUT(0x1B0994A9CLL);
}

void sub_1B0994B04(void *a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1B0994B0CLL);
  __clang_call_terminate(a1);
}

_QWORD *TType1LWFNFont::StreamFontEncoding(_QWORD *result, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(result[4] + 248);
  if (v3)
    return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t, _QWORD, uint64_t))(*result + 256))(result, v3, 0, a2);
  return result;
}

void TLWFNResourceReference::TLWFNResourceReference(TLWFNResourceReference *this, const TResourceForkSurrogate *a2, int a3)
{
  unint64_t *v5;
  _QWORD *v6;
  uint64_t v7;

  *((_QWORD *)this + 2) = 0;
  v5 = (unint64_t *)((char *)this + 16);
  *((_QWORD *)this + 3) = &off_1E61766C0;
  v6 = (_QWORD *)((char *)this + 24);
  *(_QWORD *)this = &off_1E61B3EC0;
  *((_QWORD *)this + 1) = 0;
  v7 = *((_QWORD *)a2 + 1);
  *((_QWORD *)this + 4) = v7;
  (*(void (**)(uint64_t))(*(_QWORD *)(v7 + 24) + 24))(v7 + 24);
  *v6 = &off_1E6176580;
  *((_DWORD *)this + 10) = a3;
  *((_QWORD *)this + 1) = TResourceForkFileReference::GetResource(*((unsigned int ***)this + 4), 1347375956, a3, v5, (unsigned __int8 *)this + 44);
}

void sub_1B0994BDC(_Unwind_Exception *a1)
{
  const TFileFragmentReference **v1;

  TFileDataSurrogate::~TFileDataSurrogate(v1);
  _Unwind_Resume(a1);
}

void TType1OTFFont::~TType1OTFFont(TType1OTFFont *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E61CC0A8;
  v2 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

{
  uint64_t v2;

  *(_QWORD *)this = off_1E61CC0A8;
  v2 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x1B5E0CD38);
}

void TType1OTFFont::GetGlyphIDs(TType1OTFFont *this, int a2, const char *__s, unsigned __int16 *a4)
{
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  __int128 v16;
  const TFontObjectSurrogate *v17;
  uint64_t v18;
  __int128 v19;
  const TFontObjectSurrogate *v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int16 v29;
  unsigned int v30;
  const unsigned __int8 *v31;
  unsigned int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  unsigned __int16 v38;
  unsigned __int8 *v39;
  TType1OTFFont *v40;
  uint64_t v41;
  int v42;
  unsigned __int16 *v43;
  _OWORD v44[2];
  __int128 v45;
  unint64_t v46;
  _OWORD v47[2];
  __int128 v48;
  unint64_t v49;

  v8 = 0;
  if (a2)
  {
    v9 = kStdStrs;
    while (1)
    {
      v10 = 0;
      v11 = strlen(__s);
      if (v11)
      {
        while (strlen(*(const char **)(v9 + 8 * v10)) != v11
             || strcmp(*(const char **)(v9 + 8 * v10), __s))
        {
          if (++v10 == 391)
            goto LABEL_11;
        }
        if ((unsigned __int16)v10 > 0x186u)
          break;
      }
      *a4++ = *(_WORD *)(*(_QWORD *)(*((_QWORD *)this + 4) + 296) + 2 * (unsigned __int16)v10);
      __s += (v11 + 1);
      if (++v8 == a2)
      {
        v8 = a2;
        break;
      }
    }
  }
LABEL_11:
  v12 = a2 - v8;
  if (a2 == v8)
    return;
  v13 = *((_QWORD *)this + 4);
  v14 = *(unsigned __int8 *)(v13 + 305);
  v15 = *(unsigned __int16 *)(v13 + 306) * v14;
  v49 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v16 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v16 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v47[1] = v16;
  v48 = v16;
  v47[0] = v16;
  v17 = (const TFontObjectSurrogate *)(*(uint64_t (**)(TType1OTFFont *))(*(_QWORD *)this + 216))(this);
  v18 = (*(uint64_t (**)(TType1OTFFont *))(*(_QWORD *)this + 120))(this);
  TFontObjectTable::TFontObjectTable((TFontObjectTable *)v47, v17, v18, *(unsigned int *)(*((_QWORD *)this + 4) + 308), v15 + v14);
  v46 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v19 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v19 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v44[1] = v19;
  v45 = v19;
  v44[0] = v19;
  v20 = (const TFontObjectSurrogate *)(*(uint64_t (**)(TType1OTFFont *))(*(_QWORD *)this + 216))(this);
  v21 = (*(uint64_t (**)(TType1OTFFont *))(*(_QWORD *)this + 120))(this);
  v22 = BytesToCard((const unsigned __int8 *)(*((_QWORD *)&v48 + 1) + v15), v14);
  TFontObjectTable::TFontObjectTable((TFontObjectTable *)v44, v20, v21, *(unsigned int *)(*((_QWORD *)this + 4) + 312), v22);
  v23 = 0;
  v24 = *((_QWORD *)&v45 + 1);
  v39 = (unsigned __int8 *)*((_QWORD *)&v48 + 1);
  v40 = this;
  v25 = v12;
  do
  {
    v26 = strlen(__s);
    if (!v26)
      goto LABEL_32;
    v42 = v25;
    v43 = a4;
    v27 = *((_QWORD *)v40 + 4);
    v41 = v27;
    v28 = *(unsigned __int8 *)(v27 + 305);
    if (*(_BYTE *)(v27 + 305))
    {
      v29 = 0;
      v30 = BytesToCard(v39, *(unsigned __int8 *)(v27 + 305)) - 1;
      v31 = &v39[v28];
      while (1)
      {
        v32 = BytesToCard(v31, v28) - 1;
        if (v32 - v30 == v26 && !memcmp((const void *)(v24 + v30), __s, v26))
          break;
        ++v29;
        v31 += v28;
        v30 = v32;
        if (v28 <= v29)
          goto LABEL_19;
      }
      if (*(unsigned __int16 *)(v41 + 306) + 391 <= (unsigned __int16)(v29 + 391))
        v38 = 0;
      else
        v38 = *(_WORD *)(*(_QWORD *)(v41 + 296) + 2 * (unsigned __int16)(v29 + 391));
      v25 = v42;
      *v43 = v38;
      a4 = v43 + 1;
      goto LABEL_33;
    }
LABEL_19:
    if (!v23)
    {
      a4 = v43;
      v25 = v42;
LABEL_32:
      *a4++ = 0;
LABEL_33:
      __s += v26 + 1;
      --v25;
      v37 = v23 + 1;
      goto LABEL_34;
    }
    v33 = 0;
    v34 = kStdStrs;
    a4 = v43;
    while (1)
    {
      v35 = 0;
      v36 = strlen(__s);
      if (v36)
      {
        while (strlen(*(const char **)(v34 + 8 * v35)) != v36
             || strcmp(*(const char **)(v34 + 8 * v35), __s))
        {
          if (++v35 == 391)
            goto LABEL_29;
        }
        if ((unsigned __int16)v35 > 0x186u)
          break;
      }
      *a4++ = *(_WORD *)(*(_QWORD *)(v41 + 296) + 2 * (unsigned __int16)v35);
      __s += (v36 + 1);
      if (++v33 == v42)
      {
        v33 = v42;
        break;
      }
    }
LABEL_29:
    v23 = 0;
    v37 = 0;
    v25 = v42 - v33;
    if (!v33)
      goto LABEL_32;
LABEL_34:
    v23 = v37;
  }
  while (v25);
  *((_QWORD *)&v44[0] + 1) = &off_1E6176770;
  TDataReference::DucRefCount((TDataReference *)((char *)v44 + 8));
  *((_QWORD *)&v47[0] + 1) = &off_1E6176770;
  TDataReference::DucRefCount((TDataReference *)((char *)v47 + 8));
}

void sub_1B0995020(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  TFontObjectTable::~TFontObjectTable((TFontObjectTable *)va);
  _Unwind_Resume(a1);
}

void TType1OTFFont::FindCharName(TType1OTFFont *this, unsigned int a2, char *a3)
{
  unsigned int v4;

  v4 = 254;
  TType1OTFFont::FindGlyphName(this, a2, a3 + 2, &v4);
  a3[1] = 47;
  *a3 = v4 + 1;
}

void TType1OTFFont::FindGlyphName(TType1OTFFont *this, unsigned int a2, char *a3, unsigned int *a4)
{
  uint64_t v6;
  unint64_t v7;
  const char *v8;
  unsigned int v9;
  unsigned __int16 v10;
  int v12;
  uint64_t v13;
  __int128 v14;
  const TFontObjectSurrogate *v15;
  uint64_t v16;
  const unsigned __int8 *v17;
  int v18;
  size_t v19;
  __int128 v20;
  const TFontObjectSurrogate *v21;
  uint64_t v22;
  _WORD *exception;
  __int128 v24;
  __int128 v25;
  void *__src[2];
  unint64_t v27;

  *a3 = 0;
  v6 = *((_QWORD *)this + 4);
  v7 = *(unsigned __int16 *)(*(_QWORD *)(v6 + 288) + 2 * a2);
  if (v7 > 0x186)
  {
    v10 = v7 - 391;
    if (*(unsigned __int16 *)(v6 + 306) <= v10)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)exception = &off_1E61B2D68;
      exception[4] = 8;
    }
    v12 = v10;
    v13 = *(unsigned __int8 *)(v6 + 305);
    v27 = 0xAAAAAAAAAAAAAAAALL;
    *(_QWORD *)&v14 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v14 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v25 = v14;
    *(_OWORD *)__src = v14;
    v24 = v14;
    v15 = (const TFontObjectSurrogate *)(*(uint64_t (**)(TType1OTFFont *))(*(_QWORD *)this + 216))(this);
    v16 = (*(uint64_t (**)(TType1OTFFont *))(*(_QWORD *)this + 120))(this);
    TFontObjectTable::TFontObjectTable((TFontObjectTable *)&v24, v15, v16, (*(_DWORD *)(*((_QWORD *)this + 4) + 308) + v13 * v12), 2 * v13);
    v17 = (const unsigned __int8 *)__src[1];
    v18 = BytesToCard((const unsigned __int8 *)__src[1], v13);
    LODWORD(v13) = BytesToCard(&v17[v13], v13);
    *((_QWORD *)&v24 + 1) = &off_1E6176770;
    TDataReference::DucRefCount((TDataReference *)((char *)&v24 + 8));
    v19 = (v13 - v18);
    if (*a4 > v19)
    {
      *a4 = v19;
      v27 = 0xAAAAAAAAAAAAAAAALL;
      *(_QWORD *)&v20 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v20 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v25 = v20;
      *(_OWORD *)__src = v20;
      v24 = v20;
      v21 = (const TFontObjectSurrogate *)(*(uint64_t (**)(TType1OTFFont *))(*(_QWORD *)this + 216))(this);
      v22 = (*(uint64_t (**)(TType1OTFFont *))(*(_QWORD *)this + 120))(this);
      TFontObjectTable::TFontObjectTable((TFontObjectTable *)&v24, v21, v22, (v18 - 1 + *(_DWORD *)(*((_QWORD *)this + 4) + 312)), v19);
      memcpy(a3, __src[1], v19);
      *((_QWORD *)&v24 + 1) = &off_1E6176770;
      TDataReference::DucRefCount((TDataReference *)((char *)&v24 + 8));
    }
  }
  else
  {
    v8 = *(const char **)(kStdStrs + 8 * v7);
    v9 = strlen(v8);
    if (*a4 > v9)
    {
      *a4 = v9;
      memcpy(a3, v8, v9);
    }
  }
}

uint64_t TType1OTFFont::GetGlyphName(TType1OTFFont *this, unsigned int a2, unsigned int a3, char *a4)
{
  unsigned int v7;
  unsigned int v8;
  uint64_t result;
  _WORD *exception;
  unsigned int v11;

  v11 = a3;
  if (!a4
    || ((v7 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 168))(*((_QWORD *)this + 4)), v7 >= 0xFFFF)
      ? (v8 = 0xFFFF)
      : (v8 = v7),
        v8 <= a2))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E61B2D68;
    exception[4] = 8;
  }
  TType1OTFFont::FindGlyphName(this, a2, a4, &v11);
  result = v11;
  a4[v11] = 0;
  return result;
}

uint64_t TType1OTFFont::GetGlyphID(TType1OTFFont *this, const char *a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  __int128 v11;
  const TFontObjectSurrogate *v12;
  uint64_t v13;
  __int128 v14;
  const TFontObjectSurrogate *v15;
  uint64_t v16;
  int v17;
  unsigned __int16 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 *v22;
  unsigned int v23;
  const unsigned __int8 *v24;
  unsigned int v25;
  _OWORD v27[2];
  __int128 v28;
  unint64_t v29;
  _OWORD v30[2];
  unsigned __int8 *v31[2];
  unint64_t v32;

  if (a3)
  {
    v6 = 0;
    v7 = kStdStrs;
    while (strlen(*(const char **)(v7 + 8 * v6)) != a3 || strcmp(*(const char **)(v7 + 8 * v6), a2))
    {
      if (++v6 == 391)
        goto LABEL_9;
    }
    if ((unsigned __int16)v6 < 0x187u)
      return (unsigned __int16)v6;
LABEL_9:
    v8 = *((_QWORD *)this + 4);
    v9 = *(unsigned __int8 *)(v8 + 305);
    v10 = *(unsigned __int16 *)(v8 + 306) * v9;
    v32 = 0xAAAAAAAAAAAAAAAALL;
    *(_QWORD *)&v11 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v11 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v30[1] = v11;
    *(_OWORD *)v31 = v11;
    v30[0] = v11;
    v12 = (const TFontObjectSurrogate *)(*(uint64_t (**)(TType1OTFFont *))(*(_QWORD *)this + 216))(this);
    v13 = (*(uint64_t (**)(TType1OTFFont *))(*(_QWORD *)this + 120))(this);
    TFontObjectTable::TFontObjectTable((TFontObjectTable *)v30, v12, v13, *(unsigned int *)(*((_QWORD *)this + 4) + 308), v10 + v9);
    v29 = 0xAAAAAAAAAAAAAAAALL;
    *(_QWORD *)&v14 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v14 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v27[1] = v14;
    v28 = v14;
    v27[0] = v14;
    v15 = (const TFontObjectSurrogate *)(*(uint64_t (**)(TType1OTFFont *))(*(_QWORD *)this + 216))(this);
    v16 = (*(uint64_t (**)(TType1OTFFont *))(*(_QWORD *)this + 120))(this);
    v17 = BytesToCard(&v31[1][v10], v9);
    TFontObjectTable::TFontObjectTable((TFontObjectTable *)v27, v15, v16, *(unsigned int *)(*((_QWORD *)this + 4) + 312), v17);
    v18 = v6 - 391;
    v19 = *((_QWORD *)this + 4);
    v20 = *(unsigned __int8 *)(v19 + 305);
    if (v20 <= v18)
      goto LABEL_17;
    v21 = *((_QWORD *)&v28 + 1);
    v22 = v31[1];
    v23 = BytesToCard(v31[1], *(unsigned __int8 *)(v19 + 305)) - 1;
    v24 = &v22[v20];
    while (1)
    {
      v25 = BytesToCard(v24, v20) - 1;
      if (v25 - v23 == a3 && !memcmp((const void *)(v21 + v23), a2, a3))
        break;
      ++v18;
      v24 += v20;
      v23 = v25;
      if (v20 <= v18)
        goto LABEL_17;
    }
    if (*(unsigned __int16 *)(v19 + 306) + 391 <= (unsigned __int16)(v18 + 391))
LABEL_17:
      LOWORD(v6) = 0;
    else
      LOWORD(v6) = *(_WORD *)(*(_QWORD *)(v19 + 296) + 2 * (unsigned __int16)(v18 + 391));
    *((_QWORD *)&v27[0] + 1) = &off_1E6176770;
    TDataReference::DucRefCount((TDataReference *)((char *)v27 + 8));
    *((_QWORD *)&v30[0] + 1) = &off_1E6176770;
    TDataReference::DucRefCount((TDataReference *)((char *)v30 + 8));
  }
  else
  {
    LOWORD(v6) = 0;
  }
  return (unsigned __int16)v6;
}

void sub_1B0995594(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  TFontObjectTable::~TFontObjectTable((TFontObjectTable *)va);
  _Unwind_Resume(a1);
}

uint64_t TType1OTFFont::GetFontDataTableTag(TType1OTFFont *this)
{
  return 1128678944;
}

void TType1OTFFont::FastSearchForSeac(TType1OTFFont *this, unsigned __int8 *a2, int a3, unsigned __int8 *a4, __int16 *a5)
{
  int v7;
  int v8;
  const unsigned __int8 **v9;
  const unsigned __int8 *v10;
  uint64_t v11;
  __int16 v12;
  unsigned int v13;
  __int16 v14;
  __int16 v15;
  unsigned __int8 *v16;
  _QWORD v17[2];

  v17[1] = *MEMORY[0x1E0C80C00];
  v17[0] = 0;
  if (a3 < 1)
    return;
  v7 = 0;
  v8 = 0;
  v9 = (const unsigned __int8 **)&a2[a3];
  while (1)
  {
    v10 = a2++;
    v16 = a2;
    v11 = *v10;
    if (v11 >= 0x20)
    {
      *(_DWORD *)((unint64_t)v17 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v8 & 1))) = TType1PSFont::EvaluateCharCode(v11, &v16, v9, a4);
      ++v7;
      a2 = v16;
      ++v8;
      goto LABEL_9;
    }
    if ((_DWORD)v11 != 14)
    {
      v7 = 0;
      goto LABEL_9;
    }
    if (v7 >= 4)
      break;
LABEL_9:
    if (a2 >= (unsigned __int8 *)v9)
      return;
  }
  v12 = v17[0];
  v13 = HIDWORD(v17[0]);
  v14 = LOWORD(v17[0]) + 2412;
  if (BYTE1(v17[0]) > 0xFAu)
    v14 = -1388 - LOWORD(v17[0]);
  if (LODWORD(v17[0]) <= 0xFF)
    v14 = LOWORD(v17[0]) - 139;
  if (LODWORD(v17[0]) < 0x10000)
    v12 = v14;
  *(_WORD *)a4 = v12;
  if (BYTE1(v13) <= 0xFAu)
    v15 = v13 + 2412;
  else
    v15 = -1388 - v13;
  if (v13 <= 0xFF)
    v15 = v13 - 139;
  if (v13 >= 0x10000)
    v15 = v13;
  *a5 = v15;
}

uint64_t TType1OTFFont::GetFontEncoding(TType1OTFFont *this, unsigned __int16 *a2)
{
  _WORD *exception;

  if (*(_BYTE *)(*((_QWORD *)this + 4) + 304))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E61B2D68;
    exception[4] = 24;
  }
  return 0;
}

uint64_t TType1OTFFont::GetStandardEncoding(uint64_t this, unsigned __int16 *a2)
{
  uint64_t v2;
  uint64_t v3;

  if (a2)
  {
    v2 = 0;
    v3 = *(_QWORD *)(*(_QWORD *)(this + 32) + 296);
    do
    {
      a2[v2] = *(_WORD *)(v3
                        + 2
                        * (unsigned __int16)TType1OTFFont::GetStandardEncoding(unsigned short *)const::gStdSIDs[v2]);
      ++v2;
    }
    while (v2 != 256);
  }
  return this;
}

void TType1OTFFont::StreamFontEncoding(uint64_t a1)
{
  int v1;
  _WORD *exception;
  __int16 v3;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 304);
  exception = __cxa_allocate_exception(0x10uLL);
  *(_QWORD *)exception = &off_1E61B2D68;
  if (v1)
    v3 = 24;
  else
    v3 = 23;
  exception[4] = v3;
}

uint64_t TType1OTFFont::GetPSStreamType(TType1OTFFont *this, int a2)
{
  if ((a2 & 0x200) != 0)
    return a2 & 0xFFFFF000 | 0x200;
  else
    return TType1PSFont::GetPSStreamType(this, a2);
}

uint64_t TType1OTFFont::CheckSubrs(TType1OTFFont *this, unsigned int *a2)
{
  *a2 = 2;
  return 1;
}

void TType2ToType1CharStringConvertionContext::~TType2ToType1CharStringConvertionContext(TType2ToType1CharStringConvertionContext *this)
{
  *(_QWORD *)this = &off_1E61B4240;
  *((_QWORD *)this + 38) = &unk_1E61B4278;
  free(*((void **)this + 35));
}

{
  *(_QWORD *)this = &off_1E61B4240;
  *((_QWORD *)this + 38) = &unk_1E61B4278;
  free(*((void **)this + 35));
  JUMPOUT(0x1B5E0CD38);
}

void `non-virtual thunk to'TType2ToType1CharStringConvertionContext::~TType2ToType1CharStringConvertionContext(TType2ToType1CharStringConvertionContext *this)
{
  *((_QWORD *)this - 38) = &off_1E61B4240;
  *(_QWORD *)this = &unk_1E61B4278;
  free(*((void **)this - 3));
}

{
  *((_QWORD *)this - 38) = &off_1E61B4240;
  *(_QWORD *)this = &unk_1E61B4278;
  free(*((void **)this - 3));
  JUMPOUT(0x1B5E0CD38);
}

uint64_t TType2ToType1CharStringConvertionContext::ConvertT2ToT1CharString(uint64_t this, unsigned int a2, BOOL *a3)
{
  BOOL *v3;
  uint64_t v4;
  unsigned __int8 *v5;
  unint64_t v6;
  unint64_t v7;
  char *v8;
  _BOOL4 v9;
  int v12;
  int32x2_t *v13;
  int *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  int *v19;
  TType2ToType1CharStringConvertionContext *v20;
  int *v21;
  int *v22;
  int *v23;
  int *v24;
  int *v25;
  int *v26;
  TType2ToType1CharStringConvertionContext *v27;
  int *v28;
  unsigned int v29;
  unsigned int v30;
  int *v31;
  BOOL v32;
  TType2ToType1CharStringConvertionContext *v33;
  char v34;
  uint64_t v35;
  int v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int v39;
  int v40;
  _DWORD *v41;
  unsigned __int8 *v42;
  unsigned __int8 *v43;
  unsigned int v45;
  unsigned int v46;
  char *v47;
  BOOL *v48;
  uint64_t v49;
  unsigned __int16 v50;
  unsigned int v51;
  int *v52;
  int *v53;
  int *v54;
  int *v55;
  int *v56;
  unsigned int v57;
  uint64_t v58;
  unsigned int v59;
  int v60;
  unsigned __int16 v61;
  unsigned int v62;
  uint64_t v63;
  unsigned int v64;
  unsigned int v65;
  unsigned __int16 *v66;
  char v67;
  unsigned __int8 *v68;
  int *v69;
  int32x2_t v70;
  int32x2_t v71;
  int v72;
  int v73;
  int *v74;
  int *v75;
  int *v76;
  int *v77;
  BOOL *v78;
  int *v79;
  int *v80;
  int *v81;
  int *v82;
  int *v83;
  unsigned int v84;
  int *v85;
  int *v86;
  int *v87;
  int *v88;
  unsigned int v89;
  int *v90;
  int *v91;
  int *v92;
  int *v93;
  unsigned int v94;
  _WORD *exception;
  int *v96;
  int *v97;
  int *v98;
  int *v99;
  int *v100;
  int *v101;
  _DWORD *v103;
  int *v104;
  int *v105;
  int *v106;
  int *v107;
  unsigned __int16 v108;
  int *v109;
  int *v110;
  int *v111;
  int *v112;
  int *v113;
  int *v114;
  int *v115;
  int *v116;
  int *v117;
  int *v118;
  int32x2_t *v119;
  int *v120;
  int *v121;
  unsigned __int8 *v122;
  int v123;
  unsigned __int8 v124[4];

  if (a2 > 0xA)
  {
LABEL_137:
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E61B2D68;
    exception[4] = 5;
  }
  v3 = a3;
  v4 = this;
  v6 = *(_QWORD *)(this + 328);
  v5 = *(unsigned __int8 **)(this + 336);
  v122 = v5;
  v7 = *(_QWORD *)(this + 320);
  v8 = (char *)(v5 + 1);
  v9 = !*a3;
  if (v6 <= (unint64_t)v5 && (unint64_t)v8 <= v7 && !*a3)
  {
    v12 = 0;
    v13 = (int32x2_t *)(this + 364);
    v108 = a2 + 1;
    v14 = (int *)(this + 2220);
    v117 = (int *)(this + 376);
    v118 = (int *)(this + 368);
    v112 = (int *)(this + 392);
    v107 = (int *)(this + 2228);
    v116 = (int *)(this + 372);
    v114 = (int *)(this + 384);
    v115 = (int *)(this + 380);
    v113 = (int *)(this + 388);
    v110 = (int *)(this + 2224);
    v111 = (int *)(this + 396);
    v109 = (int *)(this + 404);
    v105 = (int *)(this + 408);
    v106 = (int *)(this + 400);
    v103 = (_DWORD *)(this + 572);
    v104 = (int *)(this + 412);
    while (1)
    {
      *(_QWORD *)(v4 + 336) = v8;
      v15 = *v5;
      if (v15 < 0x20)
      {
        if (v15 == 12)
        {
          if ((unint64_t)v8 >= v7)
            goto LABEL_137;
          *(_QWORD *)(v4 + 336) = v5 + 2;
          LOWORD(v15) = *v8 | 0xC00;
        }
        else if (v15 == 28)
        {
          v5 += 3;
          *(_QWORD *)(v4 + 336) = v5;
          ++v12;
          goto LABEL_130;
        }
        *(_WORD *)(v4 + 354) = v15;
        v16 = *(unsigned __int16 *)(v4 + 556);
        LOWORD(v17) = v12 + v16;
        if (v12 + (int)v16 > 48)
          goto LABEL_137;
        if (v12 >= 1)
        {
          do
          {
            this = TType2ToType1CharStringConvertionContext::ArgPtrToFixed((TType2ToType1CharStringConvertionContext *)&v122, *(const unsigned __int8 ***)(v4 + 320), (const unsigned __int8 *)a3);
            v13->i32[v16++] = this;
            v17 = *(unsigned __int16 *)(v4 + 556) + (uint64_t)v12;
          }
          while (v16 < v17);
          LOWORD(v15) = *(_WORD *)(v4 + 354);
        }
        v18 = (unsigned __int16)v17;
        *(_WORD *)(v4 + 556) = v17;
        switch((__int16)v15)
        {
          case 1:
          case 18:
            TType2ToType1CharStringConvertionContext::StateChange((int *)v4, 0, 0, 1, v17 & 0xFFFE);
            this = TType2ToType1CharStringConvertionContext::AddToHintMap(v4, 1);
            goto LABEL_126;
          case 2:
          case 9:
          case 12:
          case 13:
          case 15:
          case 16:
          case 17:
          case 28:
            goto LABEL_137;
          case 3:
          case 23:
            this = TType2ToType1CharStringConvertionContext::WriteVStem((TType2ToType1CharStringConvertionContext *)v4);
            goto LABEL_126;
          case 4:
            TType2ToType1CharStringConvertionContext::StateChange((int *)v4, 1, 1, 1, 1u);
            v26 = (int *)v13 + *(unsigned __int16 *)(v4 + 556) - 1;
            v27 = (TType2ToType1CharStringConvertionContext *)v4;
            v28 = v14;
            goto LABEL_75;
          case 5:
            this = (uint64_t)TType2ToType1CharStringConvertionContext::StateChange((int *)v4, 2, 1, 0, 0);
            if (v18 >= 2)
            {
              v29 = v18 >> 1;
              v30 = 1;
              v31 = v118;
              do
              {
                this = (uint64_t)TType2ToType1CharStringConvertionContext::RLineTo((TType2ToType1CharStringConvertionContext *)v4, v31 - 1, v31);
                v31 += 2;
                v32 = v30++ >= v29;
              }
              while (!v32);
            }
            goto LABEL_126;
          case 6:
            v33 = (TType2ToType1CharStringConvertionContext *)v4;
            v34 = 1;
            goto LABEL_42;
          case 7:
            v33 = (TType2ToType1CharStringConvertionContext *)v4;
            v34 = 0;
LABEL_42:
            this = (uint64_t)TType2ToType1CharStringConvertionContext::WriteHLineToAndVLineTo(v33, v34);
            goto LABEL_126;
          case 8:
            if ((unsigned __int16)v17 >= 6u)
            {
              v35 = 0;
              v119 = v13;
              v36 = 1;
              v120 = v14;
              do
              {
                TType2ToType1CharStringConvertionContext::StateChange((int *)v4, 2, 1, 0, 0);
                v13 = v119;
                v14 = v120;
                this = (uint64_t)TType2ToType1CharStringConvertionContext::RRCurveTo((TType2ToType1CharStringConvertionContext *)v4, (int *)(v4 + v35 + 364), (int *)(v4 + v35 + 368), (int *)(v4 + v35 + 372), (int *)(v4 + v35 + 376), (int *)(v4 + v35 + 380), (int *)(v4 + v35 + 384));
                v35 += 24;
                v32 = v36++ >= (715827883 * (unint64_t)v18) >> 32;
              }
              while (!v32);
            }
            goto LABEL_126;
          case 10:
            if (!(_WORD)v17)
              goto LABEL_137;
            this = (*(uint64_t (**)(uint64_t, _QWORD, BOOL *))(*(_QWORD *)v4 + 24))(v4, v108, v3);
            goto LABEL_126;
          case 11:
            if (!a2)
              goto LABEL_137;
            return this;
          case 14:
            if ((unsigned __int16)v17 > 3u)
            {
              TType2ToType1CharStringConvertionContext::StateChange((int *)v4, 0, 0, 1, 4u);
              TCharStringConversionContext::WriteFixed((TCharStringConversionContext *)v4, v14);
              TCharStringConversionContext::WriteFixed((TCharStringConversionContext *)v4, (int *)v13);
              TCharStringConversionContext::WriteFixed((TCharStringConversionContext *)v4, v118);
              TCharStringConversionContext::WriteFixed((TCharStringConversionContext *)v4, v116);
              TCharStringConversionContext::WriteFixed((TCharStringConversionContext *)v4, v117);
              v37 = 3078;
            }
            else
            {
              TType2ToType1CharStringConvertionContext::StateChange((int *)v4, 1, 1, 1, 0);
              v37 = 14;
            }
            this = (uint64_t)TCharStringConversionContext::WriteOpCode((TCharStringConversionContext *)v4, v37);
            goto LABEL_126;
          case 19:
            if ((_WORD)v17)
              TType2ToType1CharStringConvertionContext::WriteVStem((TType2ToType1CharStringConvertionContext *)v4);
            if (*(_BYTE *)(v4 + 353))
            {
              *(_DWORD *)(v4 + 348) = 1;
            }
            else
            {
              *(_DWORD *)v124 = 0x40000;
              *(_DWORD *)(v4 + 348) = 2;
              TCharStringConversionContext::WriteFixed((TCharStringConversionContext *)v4, (int *)v124);
              LOWORD(v123) = 2572;
              TCharStringConversionContext::WriteData((TCharStringConversionContext *)v4, (const unsigned __int8 *)&v123 + 1, 1u);
            }
            this = (uint64_t)TType2ToType1CharStringConvertionContext::WriteHints((_WORD *)v4, 0);
            *(_DWORD *)(v4 + 348) = 2;
            goto LABEL_126;
          case 20:
            if ((_WORD)v17)
              this = TType2ToType1CharStringConvertionContext::WriteVStem((TType2ToType1CharStringConvertionContext *)v4);
            v38 = *(unsigned __int16 *)(v4 + 2096);
            if (!*(_WORD *)(v4 + 2096))
              goto LABEL_72;
            v39 = 0;
            v40 = 0;
            v41 = v103;
            break;
          case 21:
            TType2ToType1CharStringConvertionContext::StateChange((int *)v4, 1, 1, 1, 2u);
            v47 = (char *)v13 + 4 * *(unsigned __int16 *)(v4 + 556);
            v28 = (int *)(v47 - 8);
            v26 = (int *)(v47 - 4);
            v27 = (TType2ToType1CharStringConvertionContext *)v4;
            goto LABEL_75;
          case 22:
            TType2ToType1CharStringConvertionContext::StateChange((int *)v4, 1, 1, 1, 1u);
            v28 = (int *)v13 + *(unsigned __int16 *)(v4 + 556) - 1;
            v27 = (TType2ToType1CharStringConvertionContext *)v4;
            v26 = v14;
LABEL_75:
            this = (uint64_t)TType2ToType1CharStringConvertionContext::RMoveTo(v27, v28, v26);
            goto LABEL_126;
          case 24:
            if ((unsigned __int16)v17 < 3u)
            {
              v49 = 0;
              v57 = (unsigned __int16)v17;
              v51 = 2;
              v58 = 1;
            }
            else
            {
              v121 = v14;
              v48 = v3;
              LODWORD(v49) = 0;
              v50 = 0;
              v51 = 2;
              do
              {
                v52 = (int *)v13 + (v49 | 1);
                v53 = (int *)v13 + v51;
                v54 = (int *)v13 + (v49 + 3);
                v55 = (int *)v13 + (v49 + 4);
                v56 = (int *)v13 + (v49 + 5);
                TType2ToType1CharStringConvertionContext::StateChange((int *)v4, 2, 1, 0, 0);
                this = (uint64_t)TType2ToType1CharStringConvertionContext::RRCurveTo((TType2ToType1CharStringConvertionContext *)v4, (int *)&v13[v50 / 2u], v52, v53, v54, v55, v56);
                v50 += 6;
                v49 = v50;
                v51 = v50 + 2;
                v57 = *(unsigned __int16 *)(v4 + 556);
              }
              while (v51 < v57);
              v58 = v50 | 1u;
              v3 = v48;
              v14 = v121;
            }
            if (v51 <= v57)
              this = (uint64_t)TType2ToType1CharStringConvertionContext::RLineTo((TType2ToType1CharStringConvertionContext *)v4, (int *)v13 + v49, (int *)v13 + v58);
            goto LABEL_126;
          case 25:
            this = (uint64_t)TType2ToType1CharStringConvertionContext::StateChange((int *)v4, 2, 1, 0, 0);
            v59 = *(unsigned __int16 *)(v4 + 556);
            if (v59 < 7)
            {
              v63 = 0;
              v60 = 0;
              v62 = 6;
            }
            else
            {
              v60 = 0;
              v61 = 0;
              do
              {
                this = (uint64_t)TType2ToType1CharStringConvertionContext::RLineTo((TType2ToType1CharStringConvertionContext *)v4, (int *)&v13[v61 / 2u], (int *)v13 + (v60 | 1u));
                v61 += 2;
                v60 = v61;
                v62 = v61 + 6;
                v59 = *(unsigned __int16 *)(v4 + 556);
              }
              while (v62 < v59);
              v63 = v61;
            }
            if (v62 <= v59)
            {
              v74 = (int *)v13 + v63;
              v75 = (int *)v13 + (v60 | 1u);
              v76 = (int *)v13 + (v60 + 2);
              v77 = (int *)v13 + (v60 + 3);
              v78 = v3;
              v79 = (int *)v13 + (v60 + 4);
              v80 = v14;
              v81 = (int *)v13 + (v60 + 5);
              TType2ToType1CharStringConvertionContext::StateChange((int *)v4, 2, 1, 0, 0);
              v82 = v79;
              v3 = v78;
              v83 = v81;
              v14 = v80;
              this = (uint64_t)TType2ToType1CharStringConvertionContext::RRCurveTo((TType2ToType1CharStringConvertionContext *)v4, v74, v75, v76, v77, v82, v83);
            }
            goto LABEL_126;
          case 26:
            if ((v17 & 1) != 0)
            {
              TType2ToType1CharStringConvertionContext::StateChange((int *)v4, 2, 1, 0, 0);
              this = (uint64_t)TType2ToType1CharStringConvertionContext::RRCurveTo((TType2ToType1CharStringConvertionContext *)v4, (int *)v13, v118, v116, v117, v14, v115);
              v18 = *(unsigned __int16 *)(v4 + 556);
              v64 = 5;
            }
            else
            {
              v64 = 0;
            }
            LOWORD(v84) = v64 + 4;
            if (v64 + 4 <= v18)
            {
              do
              {
                v85 = (int *)v13 + v64;
                v86 = (int *)v13 + v64 + 1;
                v87 = (int *)&v13[1] + v64;
                v88 = (int *)&v13[1] + v64 + 1;
                TType2ToType1CharStringConvertionContext::StateChange((int *)v4, 2, 1, 0, 0);
                this = (uint64_t)TType2ToType1CharStringConvertionContext::RRCurveTo((TType2ToType1CharStringConvertionContext *)v4, v14, v85, v86, v87, v14, v88);
                v64 = (unsigned __int16)v84;
                v84 = (unsigned __int16)v84 + 4;
              }
              while (v84 <= *(unsigned __int16 *)(v4 + 556));
            }
            goto LABEL_126;
          case 27:
            if ((v17 & 1) != 0)
            {
              TType2ToType1CharStringConvertionContext::StateChange((int *)v4, 2, 1, 0, 0);
              this = (uint64_t)TType2ToType1CharStringConvertionContext::RRCurveTo((TType2ToType1CharStringConvertionContext *)v4, v118, (int *)v13, v116, v117, v115, v14);
              v18 = *(unsigned __int16 *)(v4 + 556);
              v65 = 5;
            }
            else
            {
              v65 = 0;
            }
            LOWORD(v89) = v65 + 4;
            if (v65 + 4 <= v18)
            {
              do
              {
                v90 = (int *)v13 + v65;
                v91 = (int *)v13 + v65 + 1;
                v92 = (int *)&v13[1] + v65;
                v93 = (int *)&v13[1] + v65 + 1;
                TType2ToType1CharStringConvertionContext::StateChange((int *)v4, 2, 1, 0, 0);
                this = (uint64_t)TType2ToType1CharStringConvertionContext::RRCurveTo((TType2ToType1CharStringConvertionContext *)v4, v90, v14, v91, v92, v93, v14);
                v65 = (unsigned __int16)v89;
                v89 = (unsigned __int16)v89 + 4;
              }
              while (v89 <= *(unsigned __int16 *)(v4 + 556));
            }
            goto LABEL_126;
          case 29:
            if (!(_WORD)v17)
              goto LABEL_137;
            this = (*(uint64_t (**)(uint64_t, _QWORD, BOOL *))(*(_QWORD *)v4 + 32))(v4, v108, v3);
            goto LABEL_126;
          case 30:
            v66 = (unsigned __int16 *)v4;
            v67 = 0;
            goto LABEL_92;
          case 31:
            v66 = (unsigned __int16 *)v4;
            v67 = 1;
LABEL_92:
            this = (uint64_t)TType2ToType1CharStringConvertionContext::WriteHVorVHCurveTo(v66, v67);
            goto LABEL_126;
          default:
            switch((__int16)v15)
            {
              case 3106:
                if ((unsigned __int16)v17 != 7)
                  goto LABEL_137;
                *(_DWORD *)(v4 + 2228) = *(_DWORD *)(v4 + 2220) - *(_DWORD *)(v4 + 372);
                v100 = v14;
                v101 = v110;
                v98 = v107;
                v99 = v113;
                v19 = v115;
                v96 = v14;
                v97 = v114;
                v20 = (TType2ToType1CharStringConvertionContext *)v4;
                v21 = (int *)v13;
                v22 = v14;
                v24 = v117;
                v23 = v118;
                v25 = v116;
                goto LABEL_100;
              case 3107:
                if ((unsigned __int16)v17 != 13)
                  goto LABEL_137;
                v100 = v105;
                v101 = v104;
                v68 = (unsigned __int8 *)v109;
                goto LABEL_122;
              case 3108:
                if ((unsigned __int16)v17 != 9)
                  goto LABEL_137;
                *(_DWORD *)(v4 + 2228) = *(_DWORD *)(v4 + 2220)
                                       - (*(_DWORD *)(v4 + 368)
                                        + *(_DWORD *)(v4 + 376))
                                       + *(_DWORD *)(v4 + 392);
                v100 = v107;
                v101 = v110;
                v98 = v112;
                v99 = v111;
                v19 = v114;
                v96 = v14;
                v97 = v113;
                v20 = (TType2ToType1CharStringConvertionContext *)v4;
                v21 = (int *)v13;
                v25 = v117;
                v22 = v118;
                v23 = v116;
                v24 = v115;
LABEL_100:
                v69 = v14;
                goto LABEL_123;
              case 3109:
                if ((unsigned __int16)v17 != 11)
                  goto LABEL_137;
                v70 = vadd_s32(vadd_s32(vadd_s32(v13[1], *v13), vadd_s32(v13[2], v13[3])), v13[4]);
                v71 = vabs_s32(v70);
                if ((vcgt_u32((uint32x2_t)v71, (uint32x2_t)vdup_lane_s32(v71, 1)).u8[0] & 1) != 0)
                {
                  v72 = *v109;
                  v73 = *v14 - v70.i32[1];
                }
                else
                {
                  v72 = *v14 - v70.i32[0];
                  v73 = *v109;
                }
                v123 = v73;
                *(_DWORD *)v124 = v72;
                v100 = &v123;
                v101 = v110;
                v68 = v124;
LABEL_122:
                v99 = (int *)v68;
                v97 = v111;
                v98 = v106;
                v19 = v113;
                v96 = v112;
                v20 = (TType2ToType1CharStringConvertionContext *)v4;
                v21 = (int *)v13;
                v25 = v117;
                v22 = v118;
                v23 = v116;
                v69 = v114;
                v24 = v115;
LABEL_123:
                this = (uint64_t)TType2ToType1CharStringConvertionContext::WriteExpandedFlexCurveTo(v20, v21, v22, v23, v25, v24, v69, v19, v96, v97, v98, v99, v100, v101);
                break;
              default:
                if ((unsigned __int16)v15 != 3072 || (_WORD)v17)
                  goto LABEL_137;
                TType2ToType1CharStringConvertionContext::StateChange((int *)v4, 1, 1, 0, 0);
                *(_WORD *)v124 = 12;
                this = (uint64_t)TCharStringConversionContext::WriteData((TCharStringConversionContext *)v4, v124, 2u);
                break;
            }
            goto LABEL_126;
        }
        do
        {
          if (!v39)
          {
            v42 = *(unsigned __int8 **)(v4 + 336);
            v43 = v42 + 1;
            if (*(_QWORD *)(v4 + 328) > (unint64_t)v42 || (unint64_t)v43 > *(_QWORD *)(v4 + 320))
              goto LABEL_137;
            *(_QWORD *)(v4 + 336) = v43;
            v40 = *v42;
            v39 = 128;
          }
          if ((v39 & v40) != 0)
          {
            v45 = *(_DWORD *)(v4 + 2100);
            if (v45 > 0x1F)
              goto LABEL_137;
            *v41 |= 1 << v45;
            v46 = v45 + 1;
            if (*((_WORD *)v41 - 2) == 1)
              *(_DWORD *)(v4 + 2104) = v46;
            else
              *(_DWORD *)(v4 + 2108) = v46;
          }
          v39 >>= 1;
          v41 += 4;
          --v38;
        }
        while (v38);
LABEL_72:
        ++*(_DWORD *)(v4 + 2100);
LABEL_126:
        v94 = *(unsigned __int16 *)(v4 + 354);
        if (v94 > 0x1D || ((1 << v94) & 0x20010C00) == 0)
          *(_WORD *)(v4 + 556) = 0;
        v5 = *(unsigned __int8 **)(v4 + 336);
        v122 = v5;
        if (v94 == 14)
        {
          *v3 = 1;
          return this;
        }
        v12 = 0;
        v7 = *(_QWORD *)(v4 + 320);
        v6 = *(_QWORD *)(v4 + 328);
      }
      else
      {
        ++v12;
        if (v15 == 255)
        {
          v5 += 5;
LABEL_20:
          *(_QWORD *)(v4 + 336) = v5;
          goto LABEL_130;
        }
        if (v15 >= 0xF7)
        {
          v5 += 2;
          goto LABEL_20;
        }
        v5 = (unsigned __int8 *)v8;
      }
LABEL_130:
      v9 = !*v3;
      if (v6 <= (unint64_t)v5)
      {
        v8 = (char *)(v5 + 1);
        if ((unint64_t)(v5 + 1) <= v7 && !*v3)
          continue;
      }
      break;
    }
  }
  if (v9)
    goto LABEL_137;
  return this;
}

int TType2ToType1CharStringConvertionContext::ArgPtrToFixed(TType2ToType1CharStringConvertionContext *this, const unsigned __int8 **a2, const unsigned __int8 *a3)
{
  unsigned __int8 *v4;
  unsigned int v5;
  const unsigned __int8 *v6;
  int result;
  int v8;
  int v9;
  int v10;
  int v11;
  _WORD *exception;
  _QWORD v13[4];

  v13[3] = *MEMORY[0x1E0C80C00];
  v4 = *(unsigned __int8 **)this;
  v6 = (const unsigned __int8 *)(*(_QWORD *)this + 1);
  v5 = **(unsigned __int8 **)this;
  if (v5 < 0x20)
  {
    if (v5 == 30)
    {
      memset(v13, 170, 18);
      v6 = BCDtoASCII(v6, (const unsigned __int8 *)a2, (char (*)[18])v13);
      result = vcvtd_n_s64_f64(atof_l((const char *)v13, 0), 0x10uLL);
    }
    else
    {
      if (v5 == 29)
      {
        v8 = v4[3];
        v6 = v4 + 5;
        v9 = v4[4];
      }
      else
      {
        if (v5 != 28)
        {
          exception = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)exception = &off_1E61B2D68;
          exception[4] = 5;
        }
        v8 = v4[1];
        v6 = v4 + 3;
        v9 = v4[2];
      }
      result = (v8 << 24) | (v9 << 16);
    }
  }
  else
  {
    if (v5 > 0xF6)
    {
      if (v5 > 0xFA)
      {
        if (v5 == 255)
        {
          v6 = v4 + 5;
          result = bswap32(*(_DWORD *)(v4 + 1));
          goto LABEL_17;
        }
        v6 = v4 + 2;
        v10 = -9109504 - ((v4[1] << 16) | (v5 << 24));
        v11 = -81854464;
      }
      else
      {
        v6 = v4 + 2;
        v10 = (v4[1] << 16) | (v5 << 24);
        v11 = 158072832;
      }
      result = v10 + v11;
      goto LABEL_17;
    }
    result = (v5 << 16) - 9109504;
  }
LABEL_17:
  *(_QWORD *)this = v6;
  return result;
}

uint64_t TType2ToType1CharStringConvertionContext::WriteVStem(TType2ToType1CharStringConvertionContext *this)
{
  TType2ToType1CharStringConvertionContext::StateChange((int *)this, 0, 0, 1, *((_WORD *)this + 278) & 0xFFFE);
  return TType2ToType1CharStringConvertionContext::AddToHintMap((uint64_t)this, 3);
}

void *TType2ToType1CharStringConvertionContext::WriteHLineToAndVLineTo(TType2ToType1CharStringConvertionContext *this, char a2)
{
  void *result;
  uint64_t v5;
  int v6;
  char *v7;
  int *v8;
  int *v9;

  result = TType2ToType1CharStringConvertionContext::StateChange((int *)this, 2, 1, 0, 0);
  if (*((_WORD *)this + 278))
  {
    v5 = 1;
    v6 = 1;
    do
    {
      v7 = (char *)this + 4 * v5 + 364;
      v8 = (int *)(v7 - 4);
      if ((a2 & 1) != 0)
      {
        v9 = (int *)(v7 - 4);
        v8 = (int *)((char *)this + 2220);
      }
      else
      {
        v9 = (int *)((char *)this + 2220);
      }
      result = TType2ToType1CharStringConvertionContext::RLineTo(this, v9, v8);
      a2 ^= 1u;
      v5 = (unsigned __int16)++v6;
    }
    while (*((unsigned __int16 *)this + 278) >= (unsigned __int16)v6);
  }
  return result;
}

unsigned __int16 *TType2ToType1CharStringConvertionContext::WriteHVorVHCurveTo(unsigned __int16 *this, char a2)
{
  unsigned int v2;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int *v7;
  char *v8;
  unsigned int v9;
  int *v10;
  int *v11;
  int *v12;
  int *v13;
  int *v14;
  int *v15;

  v2 = this[278];
  if (v2 >= 4)
  {
    v4 = (uint64_t)this;
    v5 = 0;
    v6 = 0;
    v7 = (int *)(this + 1110);
    v8 = (char *)(this + 182);
    v9 = 4;
    do
    {
      if (v5 + 5 == v2)
      {
        v10 = (int *)&v8[4 * v6];
        v11 = (int *)&v8[4 * (v5 + 2)];
        TType2ToType1CharStringConvertionContext::StateChange((int *)v4, 2, 1, 0, 0);
        if ((a2 & 1) != 0)
        {
          this = (unsigned __int16 *)TType2ToType1CharStringConvertionContext::RRCurveTo((TType2ToType1CharStringConvertionContext *)v4, v10, v7, (int *)&v8[4 * (v5 + 1)], v11, (int *)&v8[4 * v9], (int *)&v8[4 * (v5 + 3)]);
          a2 = 1;
        }
        else
        {
          this = (unsigned __int16 *)TType2ToType1CharStringConvertionContext::RRCurveTo((TType2ToType1CharStringConvertionContext *)v4, v7, v10, (int *)&v8[4 * (v5 + 1)], v11, (int *)&v8[4 * (v5 + 3)], (int *)&v8[4 * v9]);
          a2 = 0;
        }
        LOWORD(v9) = v2;
      }
      else
      {
        TType2ToType1CharStringConvertionContext::StateChange((int *)v4, 2, 1, 0, 0);
        v12 = (int *)&v8[4 * v6];
        v13 = (int *)&v8[4 * (v5 + 3)];
        if ((a2 & 1) != 0)
        {
          v14 = (int *)&v8[4 * v6];
          v12 = v7;
          v15 = v7;
        }
        else
        {
          v14 = v7;
          v15 = (int *)&v8[4 * (v5 + 3)];
          v13 = v7;
        }
        this = (unsigned __int16 *)TType2ToType1CharStringConvertionContext::RRCurveTo((TType2ToType1CharStringConvertionContext *)v4, v14, v12, (int *)&v8[4 * (v5 + 1)], (int *)&v8[4 * (v5 + 2)], v15, v13);
        a2 ^= 1u;
      }
      v6 = (unsigned __int16)v9;
      v5 = (unsigned __int16)v9;
      v9 = (unsigned __int16)v9 + 4;
      v2 = *(unsigned __int16 *)(v4 + 556);
    }
    while (v9 <= v2);
  }
  return this;
}

__n128 TType2ToType1CharStringConvertionContext::FlattenSubr(__n128 *this, unsigned int a2, BOOL *a3)
{
  unsigned __int16 v6;
  unsigned __int16 v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  int v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  BOOL v16;
  const unsigned __int8 *v17;
  unint64_t v18;
  const unsigned __int8 *v19;
  BOOL v20;
  unint64_t v21;
  unsigned int v22;
  int v23;
  unint64_t v24;
  unint64_t v25;
  BOOL v26;
  BOOL v27;
  unint64_t v28;
  __n128 result;
  _WORD *exception;
  __n128 v31;
  unint64_t v32;
  _WORD v33[5];

  v6 = this[34].n128_u16[6] - 1;
  this[34].n128_u16[6] = v6;
  v7 = this[244].n128_u16[2] + this[22].n128_u16[2 * v6 + 7];
  v8 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)this[19].n128_u64[1] + 144))(this[19].n128_u64[1]);
  if (v7 >= v8)
    goto LABEL_23;
  v9 = v8;
  *(_QWORD *)&v33[1] = 0;
  v33[0] = -21846;
  v32 = 0xAAAAAAAAAAAAAAAALL;
  v10 = (*(uint64_t (**)(unint64_t, unint64_t *, _WORD *, _WORD *))(*(_QWORD *)this[19].n128_u64[1]
                                                                                          + 136))(this[19].n128_u64[1], &v32, v33, &v33[1]);
  if (!v10 || v32 == 0)
    goto LABEL_23;
  v12 = v33[0];
  v13 = v12 + v12 * v9;
  v14 = *(_QWORD *)&v33[1];
  v15 = v32 + v13;
  v16 = v15 < v32 || v15 > *(_QWORD *)&v33[1];
  if (v16 || v33[0] * v7 < 0)
    goto LABEL_23;
  v17 = (const unsigned __int8 *)(v32 + v33[0] * v7);
  v18 = v32 + v13;
  v19 = &v17[2 * v33[0]];
  v20 = v19 < v17 || (unint64_t)v19 > v18;
  if (v20
    || ((v21 = v10,
         v22 = BytesToCard(v17, v33[0]),
         v23 = BytesToCard(&v17[v12], v12),
         v24 = v21 + v22 - 1,
         v25 = v24 + v23 - v22,
         v21 <= v24)
      ? (v26 = v25 >= v24)
      : (v26 = 0),
        v26 ? (v27 = v25 > v14) : (v27 = 1),
        v27))
  {
LABEL_23:
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E61B2D68;
    exception[4] = 5;
  }
  v28 = this[21].n128_u64[0];
  v31 = this[20];
  this[20].n128_u64[1] = v24;
  this[21].n128_u64[0] = v24;
  this[20].n128_u64[0] = v25;
  TType2ToType1CharStringConvertionContext::ConvertT2ToT1CharString((uint64_t)this, a2, a3);
  result = v31;
  this[20] = v31;
  this[21].n128_u64[0] = v28;
  return result;
}

__n128 TType2ToType1CharStringConvertionContext::FlattenGlobalSubr(__n128 *this, unsigned int a2, BOOL *a3)
{
  unsigned __int16 v3;
  unsigned __int16 v4;
  unint64_t v8;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  BOOL v18;
  unint64_t v20;
  __n128 result;
  _WORD *exception;
  __n128 v23;
  unint64_t v24;
  __int16 v25;
  _QWORD v26[3];

  v3 = this[34].n128_u16[6] - 1;
  this[34].n128_u16[6] = v3;
  v4 = this[244].n128_u16[3] + this[22].n128_u16[2 * v3 + 7];
  if (this[244].n128_u16[4] <= v4)
    goto LABEL_17;
  memset(v26, 170, sizeof(v26));
  v25 = -21846;
  v24 = 0xAAAAAAAAAAAAAAAALL;
  v8 = (*(uint64_t (**)(unint64_t, __int16 *, _QWORD *, unint64_t *, _QWORD *, _QWORD *))(*(_QWORD *)this[19].n128_u64[1] + 152))(this[19].n128_u64[1], &v25, &v26[2], &v24, &v26[1], v26);
  if (v26[2] < v8 || v26[2] > v26[0])
    goto LABEL_17;
  v10 = v4;
  v11 = v25;
  v12 = v8 + v25 * (uint64_t)v10;
  v13 = v12 + 2 * v25;
  if (v13 > v26[2] || v25 * (uint64_t)v10 < 0 || v13 < v12)
    goto LABEL_17;
  v14 = BytesToCard((const unsigned __int8 *)(v8 + v25 * (uint64_t)v10), v25);
  v15 = BytesToCard((const unsigned __int8 *)(v12 + v11), v11);
  v16 = v24 + v14 - 1;
  v17 = v16 + v15 - v14;
  v18 = v24 <= v16 && v17 >= v16;
  if (!v18 || v17 > v26[1])
  {
LABEL_17:
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E61B2D68;
    exception[4] = 5;
  }
  v20 = this[21].n128_u64[0];
  v23 = this[20];
  this[20].n128_u64[1] = v16;
  this[21].n128_u64[0] = v16;
  this[20].n128_u64[0] = v17;
  TType2ToType1CharStringConvertionContext::ConvertT2ToT1CharString((uint64_t)this, a2, a3);
  result = v23;
  this[20] = v23;
  this[21].n128_u64[0] = v20;
  return result;
}

int *TType2ToType1CharStringConvertionContext::StateChange(int *this, int a2, int a3, int a4, unsigned int a5)
{
  uint64_t v8;
  int v9;
  unint64_t v10;
  int v11;
  __int16 v12;

  v8 = (uint64_t)this;
  if (a2 == 2)
  {
    if (!this[86])
      this = (int *)TType2ToType1CharStringConvertionContext::RMoveTo((TType2ToType1CharStringConvertionContext *)this, this + 555, this + 555);
    v9 = 2;
  }
  else
  {
    if (a2 != 1)
      goto LABEL_10;
    if (this[86] == 2)
    {
      v12 = 2316;
      this = (int *)TCharStringConversionContext::WriteData((TCharStringConversionContext *)this, (const unsigned __int8 *)&v12 + 1, 1u);
    }
    v9 = 1;
  }
  *(_DWORD *)(v8 + 344) = v9;
LABEL_10:
  if (a3 == 1)
  {
    if (*(_DWORD *)(v8 + 348) == 1)
      this = (int *)TType2ToType1CharStringConvertionContext::WriteHints((_WORD *)v8, 1);
    *(_DWORD *)(v8 + 348) = 0;
  }
  if (*(_BYTE *)(v8 + 352) && a4)
  {
    *(_BYTE *)(v8 + 352) = 0;
    if (*(unsigned __int16 *)(v8 + 556) <= a5)
    {
      return (int *)TType2ToType1CharStringConvertionContext::Hsbw((TType2ToType1CharStringConvertionContext *)v8, (int *)(v8 + 2220), (int *)(v8 + 3776));
    }
    else
    {
      v11 = *(_DWORD *)(v8 + 3772) + *(_DWORD *)(v8 + 364);
      this = (int *)TType2ToType1CharStringConvertionContext::Hsbw((TType2ToType1CharStringConvertionContext *)v8, (int *)(v8 + 2220), &v11);
      v10 = *(unsigned __int16 *)(v8 + 556);
      if (v10 >= 2)
        this = (int *)memmove((void *)(v8 + 364), (const void *)(v8 + 368), ((4 * v10 + 0x3FFFFFFF8) & 0x3FFFFFFFCLL) + 4);
      *(_WORD *)(v8 + 556) = v10 - 1;
    }
  }
  return this;
}

void *TType2ToType1CharStringConvertionContext::RMoveTo(TType2ToType1CharStringConvertionContext *this, int *a2, int *a3)
{
  int v6;
  unsigned int v7;
  void *result;

  if (*a2)
  {
    v6 = *a3;
    TCharStringConversionContext::WriteFixed(this, a2);
    if (!v6)
    {
      v7 = 22;
      goto LABEL_7;
    }
    v7 = 21;
  }
  else
  {
    v7 = 4;
  }
  TCharStringConversionContext::WriteFixed(this, a3);
LABEL_7:
  result = TCharStringConversionContext::WriteOpCode(this, v7);
  *((_DWORD *)this + 89) += *a2;
  *((_DWORD *)this + 90) += *a3;
  return result;
}

_WORD *TType2ToType1CharStringConvertionContext::WriteHints(_WORD *this, char a2)
{
  uint64_t v3;
  unint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  __int128 v9;
  char *v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  int *v14;
  _WORD *exception;
  unsigned __int8 v16[2];
  int v17[4];
  __int128 v18;
  __int128 v19;
  int v20[4];
  __int128 v21;
  int v22[6];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if (this[1048])
  {
    v3 = (uint64_t)this;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    v7 = 0;
    v8 = 0;
    *(_QWORD *)&v9 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v21 = v9;
    *(_OWORD *)v22 = v9;
    v19 = v9;
    *(_OWORD *)v20 = v9;
    *(_OWORD *)v17 = v9;
    v18 = v9;
    v10 = (char *)(this + 280);
    do
    {
      if ((a2 & 1) == 0 && !v7)
      {
        v11 = *(unsigned __int8 **)(v3 + 336);
        v12 = v11 + 1;
        if (*(_QWORD *)(v3 + 328) > (unint64_t)v11 || (unint64_t)v12 > *(_QWORD *)(v3 + 320))
          goto LABEL_38;
        *(_QWORD *)(v3 + 336) = v12;
        v8 = *v11;
        v7 = 128;
      }
      if ((a2 & 1) != 0 || (v7 & v8) != 0)
      {
        if (*((_DWORD *)v10 + 3) && !*(_DWORD *)(v3 + 2216))
        {
          if (*((_WORD *)v10 + 4) == 1)
          {
            if (v6 > 2)
              goto LABEL_38;
            *(_OWORD *)&v20[4 * v6++] = *(_OWORD *)v10;
          }
          else
          {
            if (v5 > 2)
              goto LABEL_38;
            *(_OWORD *)&v17[4 * v5++] = *(_OWORD *)v10;
          }
        }
        else
        {
          v14 = (int *)(v10 + 4);
          if (*((_WORD *)v10 + 4) == 1)
            this = TType2ToType1CharStringConvertionContext::HStem((TType2ToType1CharStringConvertionContext *)v3, (int *)v10, v14);
          else
            this = TType2ToType1CharStringConvertionContext::VStem((TType2ToType1CharStringConvertionContext *)v3, (int *)v10, v14);
        }
      }
      v7 >>= 1;
      ++v4;
      v10 += 16;
    }
    while (v4 < *(unsigned __int16 *)(v3 + 2096));
    if (v6 >= 4)
      goto LABEL_38;
    switch(v6)
    {
      case 1u:
        this = TType2ToType1CharStringConvertionContext::HStem((TType2ToType1CharStringConvertionContext *)v3, v20, &v20[1]);
        break;
      case 2u:
        TType2ToType1CharStringConvertionContext::HStem((TType2ToType1CharStringConvertionContext *)v3, v20, &v20[1]);
        this = TType2ToType1CharStringConvertionContext::HStem((TType2ToType1CharStringConvertionContext *)v3, (int *)&v21, (int *)&v21 + 1);
        break;
      case 3u:
        TCharStringConversionContext::WriteFixed((TCharStringConversionContext *)v3, v20);
        TCharStringConversionContext::WriteFixed((TCharStringConversionContext *)v3, &v20[1]);
        TCharStringConversionContext::WriteFixed((TCharStringConversionContext *)v3, (int *)&v21);
        TCharStringConversionContext::WriteFixed((TCharStringConversionContext *)v3, (int *)&v21 + 1);
        TCharStringConversionContext::WriteFixed((TCharStringConversionContext *)v3, v22);
        TCharStringConversionContext::WriteFixed((TCharStringConversionContext *)v3, &v22[1]);
        *(_WORD *)v16 = 524;
        this = TCharStringConversionContext::WriteData((TCharStringConversionContext *)v3, v16, 2u);
        *(_BYTE *)(v3 + 353) = 0;
        break;
    }
    if (v5 > 3)
    {
LABEL_38:
      exception = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)exception = &off_1E61B2D68;
      exception[4] = 5;
    }
    switch(v5)
    {
      case 1u:
        return TType2ToType1CharStringConvertionContext::VStem((TType2ToType1CharStringConvertionContext *)v3, v17, &v17[1]);
      case 2u:
        TType2ToType1CharStringConvertionContext::VStem((TType2ToType1CharStringConvertionContext *)v3, v17, &v17[1]);
        return TType2ToType1CharStringConvertionContext::VStem((TType2ToType1CharStringConvertionContext *)v3, (int *)&v18, (int *)&v18 + 1);
      case 3u:
        TCharStringConversionContext::WriteFixed((TCharStringConversionContext *)v3, v17);
        TCharStringConversionContext::WriteFixed((TCharStringConversionContext *)v3, &v17[1]);
        TCharStringConversionContext::WriteFixed((TCharStringConversionContext *)v3, (int *)&v18);
        TCharStringConversionContext::WriteFixed((TCharStringConversionContext *)v3, (int *)&v18 + 1);
        TCharStringConversionContext::WriteFixed((TCharStringConversionContext *)v3, (int *)&v19);
        TCharStringConversionContext::WriteFixed((TCharStringConversionContext *)v3, (int *)&v19 + 1);
        *(_WORD *)v16 = 268;
        this = TCharStringConversionContext::WriteData((TCharStringConversionContext *)v3, v16, 2u);
        *(_BYTE *)(v3 + 353) = 0;
        break;
    }
  }
  return this;
}

void *TType2ToType1CharStringConvertionContext::Hsbw(TType2ToType1CharStringConvertionContext *this, int *a2, int *a3)
{
  __int16 v6;

  TCharStringConversionContext::WriteFixed(this, a2);
  TCharStringConversionContext::WriteFixed(this, a3);
  HIBYTE(v6) = 13;
  return TCharStringConversionContext::WriteData(this, (const unsigned __int8 *)&v6 + 1, 1u);
}

uint64_t TType2ToType1CharStringConvertionContext::AddToHintMap(uint64_t this, __int16 a2)
{
  unsigned int v2;
  int v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  _DWORD *v8;
  unsigned int v9;
  int v10;
  int v11;
  _WORD *exception;

  v2 = *(unsigned __int16 *)(this + 556);
  if (v2 >= 2)
  {
    v3 = 0;
    v4 = v2 >> 1;
    v5 = *(unsigned __int16 *)(this + 2096);
    if (v5 <= 0x60)
      v6 = 96;
    else
      v6 = *(unsigned __int16 *)(this + 2096);
    v7 = (int *)(this + 368);
    v8 = (_DWORD *)(this + 16 * v5 + 572);
    v9 = 1;
    do
    {
      if (v6 == v5)
      {
        exception = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)exception = &off_1E61B2D68;
        exception[4] = 5;
      }
      v10 = *(v7 - 1) + v3;
      v11 = *v7;
      v7 += 2;
      *(v8 - 3) = v10;
      *(v8 - 2) = v11;
      *((_WORD *)v8 - 2) = a2;
      *v8 = 0;
      v8 += 4;
      v3 = v10 + v11;
      *(_WORD *)(this + 2096) = ++v5;
    }
    while (v9++ < v4);
  }
  return this;
}

void *TType2ToType1CharStringConvertionContext::RLineTo(TType2ToType1CharStringConvertionContext *this, int *a2, int *a3)
{
  int v6;
  unsigned int v7;
  void *result;

  if (*a2)
  {
    v6 = *a3;
    TCharStringConversionContext::WriteFixed(this, a2);
    if (!v6)
    {
      v7 = 6;
      goto LABEL_7;
    }
    v7 = 5;
  }
  else
  {
    v7 = 7;
  }
  TCharStringConversionContext::WriteFixed(this, a3);
LABEL_7:
  result = TCharStringConversionContext::WriteOpCode(this, v7);
  *((_DWORD *)this + 89) += *a2;
  *((_DWORD *)this + 90) += *a3;
  return result;
}

void *TType2ToType1CharStringConvertionContext::RRCurveTo(TType2ToType1CharStringConvertionContext *this, int *a2, int *a3, int *a4, int *a5, int *a6, int *a7)
{
  int *v12;
  int *v14;
  int *v15;
  int *v16;
  void *result;
  unsigned int v18;

  v12 = a2;
  if (!(*a3 | *a6))
  {
    v18 = 31;
    v14 = a4;
    v15 = a5;
LABEL_6:
    v16 = a7;
    goto LABEL_7;
  }
  if (*a2 | *a7)
  {
    TCharStringConversionContext::WriteFixed(this, a2);
    TCharStringConversionContext::WriteFixed(this, a3);
    v18 = 8;
    a2 = a4;
    v14 = a5;
    v15 = a6;
    goto LABEL_6;
  }
  v18 = 30;
  a2 = a3;
  v14 = a4;
  v15 = a5;
  v16 = a6;
LABEL_7:
  TCharStringConversionContext::WriteFixed(this, a2);
  TCharStringConversionContext::WriteFixed(this, v14);
  TCharStringConversionContext::WriteFixed(this, v15);
  TCharStringConversionContext::WriteFixed(this, v16);
  result = TCharStringConversionContext::WriteOpCode(this, v18);
  *((_DWORD *)this + 89) += *a4 + *v12 + *a6;
  *((_DWORD *)this + 90) += *a5 + *a3 + *a7;
  return result;
}

void *TType2ToType1CharStringConvertionContext::WriteExpandedFlexCurveTo(TType2ToType1CharStringConvertionContext *this, int *a2, int *a3, int *a4, int *a5, int *a6, int *a7, int *a8, int *a9, int *a10, int *a11, int *a12, int *a13, int *a14)
{
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  unsigned int v27;
  unsigned int v28;
  void *result;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  __int16 v37;

  v20 = *((_DWORD *)this + 89);
  v21 = *a2 + v20;
  v22 = v21 + *a4 + *a6;
  v23 = v22 + *a8 + *a10 + *a12;
  v24 = *((_DWORD *)this + 90);
  v25 = *a3 + v24 + *a5 + *a7;
  v26 = v25 + *a9 + *a11 + *a13;
  v34 = v26;
  v35 = v23;
  v27 = v23 - v20;
  if (v23 - v20 < 0)
    v27 = v20 - v23;
  v28 = v26 - v24;
  if (v26 - v24 < 0)
    v28 = v24 - v26;
  if (v27 <= v28)
    v22 = v23;
  else
    v25 = v26;
  v33 = v22 - v20;
  v32 = v25 - v24;
  *a2 = v21 - v22;
  *a3 += *((_DWORD *)this + 90) - v25;
  TType2ToType1CharStringConvertionContext::StateChange((int *)this, 2, 1, 0, 0);
  v36 = 0x10000;
  TCharStringConversionContext::WriteFixed(this, &v36);
  v37 = 2572;
  TCharStringConversionContext::WriteData(this, (const unsigned __int8 *)&v37 + 1, 1u);
  TType2ToType1CharStringConvertionContext::WriteFlexCoordinate(this, &v33, &v32);
  TType2ToType1CharStringConvertionContext::WriteFlexCoordinate(this, a2, a3);
  TType2ToType1CharStringConvertionContext::WriteFlexCoordinate(this, a4, a5);
  TType2ToType1CharStringConvertionContext::WriteFlexCoordinate(this, a6, a7);
  TType2ToType1CharStringConvertionContext::WriteFlexCoordinate(this, a8, a9);
  TType2ToType1CharStringConvertionContext::WriteFlexCoordinate(this, a10, a11);
  TType2ToType1CharStringConvertionContext::WriteFlexCoordinate(this, a12, a13);
  TCharStringConversionContext::WriteFixed(this, a14);
  TCharStringConversionContext::WriteFixed(this, &v35);
  TCharStringConversionContext::WriteFixed(this, &v34);
  TCharStringConversionContext::WriteFixed(this, (int *)this + 555);
  v37 = 2572;
  result = TCharStringConversionContext::WriteData(this, (const unsigned __int8 *)&v37 + 1, 1u);
  *((_DWORD *)this + 89) = v23;
  *((_DWORD *)this + 90) = v26;
  return result;
}

void *TType2ToType1CharStringConvertionContext::HStem(TType2ToType1CharStringConvertionContext *this, int *a2, int *a3)
{
  void *result;
  __int16 v6;

  TCharStringConversionContext::WriteFixed(this, a2);
  TCharStringConversionContext::WriteFixed(this, a3);
  HIBYTE(v6) = 1;
  result = TCharStringConversionContext::WriteData(this, (const unsigned __int8 *)&v6 + 1, 1u);
  *((_BYTE *)this + 353) = 0;
  return result;
}

void *TType2ToType1CharStringConvertionContext::VStem(TType2ToType1CharStringConvertionContext *this, int *a2, int *a3)
{
  void *result;
  __int16 v6;

  TCharStringConversionContext::WriteFixed(this, a2);
  TCharStringConversionContext::WriteFixed(this, a3);
  HIBYTE(v6) = 3;
  result = TCharStringConversionContext::WriteData(this, (const unsigned __int8 *)&v6 + 1, 1u);
  *((_BYTE *)this + 353) = 0;
  return result;
}

void *TType2ToType1CharStringConvertionContext::WriteFlexCoordinate(TType2ToType1CharStringConvertionContext *this, int *a2, int *a3)
{
  int v5;
  unsigned int v6;
  int v8;
  __int16 v9;

  if (*a2)
  {
    v5 = *a3;
    TCharStringConversionContext::WriteFixed(this, a2);
    if (!v5)
    {
      v6 = 22;
      goto LABEL_7;
    }
    v6 = 21;
  }
  else
  {
    v6 = 4;
  }
  TCharStringConversionContext::WriteFixed(this, a3);
LABEL_7:
  TCharStringConversionContext::WriteOpCode(this, v6);
  v8 = 0x20000;
  TCharStringConversionContext::WriteFixed(this, &v8);
  v9 = 2572;
  return TCharStringConversionContext::WriteData(this, (const unsigned __int8 *)&v9 + 1, 1u);
}

void TT2T1ConvertingBufferedStreamingContext::~TT2T1ConvertingBufferedStreamingContext(TT2T1ConvertingBufferedStreamingContext *this)
{
  TBufferedCharStringStreamingContext::~TBufferedCharStringStreamingContext(this);
  JUMPOUT(0x1B5E0CD38);
}

void TT2T1ConvertingBufferedStreamingContext::StreamCharString(TT2T1ConvertingBufferedStreamingContext *this, const TType1SFNTFont *a2, uint64_t a3, char *a4, int *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  __int16 v14;
  uint64_t v15;
  unsigned int v16;
  __int16 v17;
  int v18;
  uint64_t v19;
  __int128 v20;
  const TFontObjectSurrogate *v21;
  uint64_t v22;
  unsigned int *v23;
  uint64_t v24;
  BOOL v25;
  _OWORD v26[2];
  __int128 v27;
  unint64_t v28;
  _QWORD v29[492];

  v29[491] = *MEMORY[0x1E0C80C00];
  memset(&v29[1], 170, 0xF48uLL);
  v29[33] = "/.notdef";
  v29[34] = 8;
  memset(&v29[35], 0, 20);
  v29[39] = a2;
  bzero(&v29[40], 0xD7CuLL);
  HIDWORD(v29[43]) = 1;
  LOWORD(v29[44]) = 257;
  v10 = (*(uint64_t (**)(const TType1SFNTFont *))(*(_QWORD *)a2 + 40))(a2);
  LODWORD(v29[277]) = *(unsigned __int16 *)(v10 + 70);
  HIDWORD(v29[471]) = *(_DWORD *)(v10 + 440);
  LODWORD(v29[472]) = *(_DWORD *)(v10 + 120);
  *(_QWORD *)((char *)&v29[277] + 4) = 0x32000000000000;
  *(_QWORD *)((char *)&v29[44] + 4) = 0;
  v29[0] = &off_1E61B4240;
  v29[38] = &unk_1E61B4278;
  v11 = (*(uint64_t (**)(const TType1SFNTFont *))(*(_QWORD *)a2 + 216))(a2);
  v12 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 8) + 56))(*(_QWORD *)(v11 + 8));
  v29[490] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12);
  v13 = (*(uint64_t (**)(const TType1SFNTFont *))(*(_QWORD *)a2 + 144))(a2);
  if (v13 >= 0x8408)
    v14 = -1;
  else
    v14 = 1131;
  if (v13 < 0x4D8)
    v14 = 107;
  WORD2(v29[488]) = v14;
  v15 = *((_QWORD *)a2 + 4);
  v16 = *(unsigned __int16 *)(v15 + 318);
  if (v16 >= 0x846C)
    v17 = 0x8000;
  else
    v17 = 1131;
  if (v16 < 0x4D8)
    v17 = 107;
  HIWORD(v29[488]) = v17;
  LOWORD(v29[489]) = v16;
  if ((_DWORD)a3)
  {
    v18 = (*(uint64_t (**)(const TType1SFNTFont *, uint64_t, uint64_t, char *))(*(_QWORD *)a2 + 184))(a2, a3, 127, (char *)&v29[472] + 5);
    BYTE4(v29[472]) = 47;
    v29[33] = (char *)&v29[472] + 4;
    v29[34] = (v18 + 1);
    v15 = *((_QWORD *)a2 + 4);
  }
  v19 = *(_QWORD *)(v15 + 104);
  v28 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v20 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v20 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v26[1] = v20;
  v27 = v20;
  v26[0] = v20;
  v21 = (const TFontObjectSurrogate *)(*(uint64_t (**)(const TType1SFNTFont *))(*(_QWORD *)a2 + 216))(a2);
  v22 = (*(uint64_t (**)(const TType1SFNTFont *))(*(_QWORD *)a2 + 120))(a2);
  v23 = (unsigned int *)(v19 + 8 * a3);
  TFontObjectTable::TFontObjectTable((TFontObjectTable *)v26, v21, v22, *v23, v23[1]);
  v29[41] = *((_QWORD *)&v27 + 1);
  v29[42] = *((_QWORD *)&v27 + 1);
  v24 = v23[1];
  v29[40] = *((_QWORD *)&v27 + 1) + v24;
  LODWORD(v29[37]) = malloc_good_size((4 * v24));
  v29[35] = AllocateMemory(LODWORD(v29[37]), 0);
  v29[36] = 0;
  v25 = 0;
  TType2ToType1CharStringConvertionContext::ConvertT2ToT1CharString((uint64_t)v29, 0, &v25);
  *((_QWORD *)&v26[0] + 1) = &off_1E6176770;
  TDataReference::DucRefCount((TDataReference *)((char *)v26 + 8));
  TBufferedCharStringStreamingContext::DoCharString(this, (uint64_t)v29, a4, (uint64_t)a5);
  v29[0] = &off_1E61B4240;
  v29[38] = &unk_1E61B4278;
  free((void *)v29[35]);
}

void sub_1B09979C8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 304) = v2 + 56;
  free(*(void **)(v1 + 280));
  _Unwind_Resume(a1);
}

void TOTFCharStringContext::~TOTFCharStringContext(TOTFCharStringContext *this)
{
  *(_QWORD *)this = &off_1E61B42E8;
  *((_QWORD *)this + 41) = &off_1E6176770;
  TDataReference::DucRefCount((TOTFCharStringContext *)((char *)this + 328));
}

{
  *(_QWORD *)this = &off_1E61B42E8;
  *((_QWORD *)this + 41) = &off_1E6176770;
  TDataReference::DucRefCount((TOTFCharStringContext *)((char *)this + 328));
  JUMPOUT(0x1B5E0CD38);
}

void TOTFCFFFontSet::~TOTFCFFFontSet(TOTFCFFFontSet *this)
{
  TCFFFontSet::~TCFFFontSet(this);
  JUMPOUT(0x1B5E0CD38);
}

uint64_t TOTFCFFFontSet::AddCharString(TOTFCFFFontSet *this, const TType1PSFont *a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  _OWORD v12[16];
  char *v13;
  unsigned int v14[2];
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  _OWORD v19[2];
  __int128 v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v6 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v19[1] = v6;
  v20 = v6;
  v18 = v6;
  v19[0] = v6;
  v17 = v6;
  v12[15] = v6;
  v12[14] = v6;
  v12[13] = v6;
  v12[12] = v6;
  v12[11] = v6;
  v12[10] = v6;
  v12[9] = v6;
  v12[8] = v6;
  v12[7] = v6;
  v12[6] = v6;
  v12[5] = v6;
  v12[4] = v6;
  v12[3] = v6;
  v12[2] = v6;
  v12[1] = v6;
  v12[0] = v6;
  v13 = "/.notdef";
  *(_QWORD *)v14 = 8;
  v15 = 0;
  v16 = 0;
  *(_QWORD *)&v17 = (*(uint64_t (**)(const TType1PSFont *))(*(_QWORD *)a2 + 216))(a2);
  v7 = *((_QWORD *)a2 + 4);
  *((_QWORD *)&v17 + 1) = *(_QWORD *)(v7 + 104) + 8 * a3;
  LOWORD(v18) = *(_WORD *)(*(_QWORD *)(v7 + 288) + 2 * a3);
  v8 = (*(uint64_t (**)(const TType1PSFont *))(*(_QWORD *)a2 + 120))(a2);
  TFontObjectTable::TFontObjectTable((TFontObjectTable *)((char *)&v18 + 8), (const TFontObjectSurrogate *)v17, v8, **((_DWORD **)&v17 + 1), *(_DWORD *)(*((_QWORD *)&v17 + 1) + 4));
  v9 = (*(uint64_t (**)(const TType1PSFont *, uint64_t, uint64_t, _OWORD *))(*(_QWORD *)a2 + 184))(a2, a3, 256, v12);
  if (v9)
  {
    v13 = (char *)v12;
    *(_QWORD *)v14 = v9;
  }
  v15 = v20;
  v10 = *(_DWORD *)(*((_QWORD *)&v17 + 1) + 4);
  v16 = v10;
  TCFFArray::Add((TOTFCFFFontSet *)((char *)this + 240), v10, (const unsigned __int8 *)v20);
  if ((_DWORD)a3)
  {
    a3 = (unsigned __int16)v18;
    if ((unsigned __int16)v18 >= 0x187u)
      a3 = TCFFStringArray::AddString((TOTFCFFFontSet *)((char *)this + 152), v14[0], v13);
  }
  *(_QWORD *)&v19[0] = &off_1E6176770;
  TDataReference::DucRefCount((TDataReference *)v19);
  return a3;
}

void sub_1B0997CB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  TFontObjectTable *v9;

  TFontObjectTable::~TFontObjectTable(v9);
  _Unwind_Resume(a1);
}

_QWORD *TOTFCFFFontSet::AddGlobalSubrs(TOTFCFFFontSet *this, const TType1PSFont *a2, unsigned int a3, const unsigned __int8 *a4, const unsigned __int8 *a5, uint64_t a6)
{
  uint64_t v12;
  unsigned int v13;
  size_t v14;
  _QWORD *result;

  v12 = operator new();
  v13 = *(unsigned __int16 *)(*((_QWORD *)a2 + 4) + 318);
  *(_QWORD *)v12 = &off_1E61CB6C0;
  *(_WORD *)(v12 + 8) = __rev16(v13);
  *(_BYTE *)(v12 + 10) = a3;
  v14 = a3 + v13 * (unint64_t)a3;
  *(_QWORD *)(v12 + 24) = 0;
  *(_QWORD *)(v12 + 32) = 0;
  *(_QWORD *)(v12 + 16) = 0;
  result = std::vector<unsigned char>::__init_with_size[abi:fe180100]<unsigned char const*,unsigned char const*>((_QWORD *)(v12 + 16), a4, (uint64_t)&a4[v14], v14);
  *(_BYTE *)(v12 + 40) = 1;
  *(_QWORD *)(v12 + 48) = a5;
  *(_QWORD *)(v12 + 56) = a6 - v14;
  *((_QWORD *)this + 27) = v12;
  return result;
}

void sub_1B0997DAC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E0CD38](v1, 0x1091C4015871C78);
  _Unwind_Resume(a1);
}

uint64_t TType1OTFFont::StreamPSFont(_QWORD *a1, uint64_t a2, int a3, uint64_t a4, unsigned int *a5, uint64_t a6, const char *a7, uint64_t a8, unsigned int *a9, uint64_t a10)
{
  __int32 *v14;
  __int128 v15;
  unsigned int v16;
  unsigned __int16 *v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  __int128 v22;
  int8x8_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  __int32 *v29;
  __int128 v30;
  const TFontObjectSurrogate *v31;
  __int128 v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  unint64_t v36;
  const TFontObjectSurrogate *v37;
  uint64_t result;
  _OWORD v39[2];
  __int128 v40;
  unint64_t v41;
  unint64_t v42;
  _BYTE __b[696];
  _QWORD v44[3];
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  unsigned int v52[4];
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  uint64_t v84;

  v84 = *MEMORY[0x1E0C80C00];
  v42 = 0xAAAAAAAAAAAAAAAALL;
  (*(void (**)(unint64_t *__return_ptr, _QWORD *, _QWORD, uint64_t))(*a1 + 240))(&v42, a1, *a9, a8);
  v14 = (__int32 *)v42;
  *a9 = (*(uint64_t (**)(_QWORD *, _QWORD))(*a1 + 48))(a1, *a9);
  *(_QWORD *)&v15 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v15 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v83 = v15;
  v82 = v15;
  v81 = v15;
  v80 = v15;
  v79 = v15;
  v78 = v15;
  v77 = v15;
  v76 = v15;
  v75 = v15;
  v74 = v15;
  v73 = v15;
  v72 = v15;
  v71 = v15;
  v70 = v15;
  v69 = v15;
  v68 = v15;
  v67 = v15;
  v66 = v15;
  v65 = v15;
  v64 = v15;
  v63 = v15;
  v62 = v15;
  v61 = v15;
  v59 = v15;
  v60 = v15;
  v57 = v15;
  v58 = v15;
  v55 = v15;
  v56 = v15;
  v53 = v15;
  v54 = v15;
  *(_OWORD *)v52 = v15;
  v16 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)a1[4] + 168))(a1[4]);
  if (v16 >= 0xFFFF)
    v18 = 0xFFFFLL;
  else
    v18 = v16;
  if (!a5)
  {
    a5 = v52;
    TType1PSFont::SetEncoding(v18, v14, v52, v17);
  }
  if ((*((_BYTE *)a9 + 1) & 2) != 0)
  {
    v21 = (*(uint64_t (**)(_QWORD *))(*a1 + 120))(a1);
    *(_QWORD *)&v22 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v22 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v51 = v22;
    v50 = v22;
    v49 = v22;
    v48 = v22;
    v47 = v22;
    v46 = v22;
    v45 = v22;
    v44[0] = &off_1E61B63B8;
    v44[1] = a1;
    v44[2] = v14;
    *(_QWORD *)&v45 = (*(uint64_t (**)(_QWORD *))(*a1 + 40))(a1);
    *((_QWORD *)&v45 + 1) = a10;
    v46 = (unint64_t)operator new[]();
    LODWORD(v47) = 0;
    *(_DWORD *)((char *)&v47 + 6) = 0;
    v24 = a1[4];
    v25 = *(int *)(v24 + 76);
    if ((_DWORD)v25 != -1)
    {
      v26 = *(_QWORD *)(v24 + 48);
      if (v26)
      {
        if (strcmp(a7, (const char *)(v26 + v25 + 1)))
          goto LABEL_21;
      }
    }
    if (!v14)
      goto LABEL_22;
    v27 = 0;
    if ((_DWORD)v18)
    {
      v28 = (v18 + 31) >> 5;
      v29 = v14;
      do
      {
        if (*v29)
        {
          v23.i32[0] = *v29;
          v23 = vcnt_s8(v23);
          v23.i16[0] = vaddlv_u8((uint8x8_t)v23);
          v27 += v23.i32[0];
        }
        ++v29;
        --v28;
      }
      while (v28);
    }
    if (v27 >= v18)
    {
LABEL_22:
      v33 = (*(uint64_t (**)(_QWORD *))(*a1 + 216))(a1);
      v34 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v33 + 64))(v33, v21);
      if (v34)
      {
        v35 = 0;
        do
        {
          if (v34 - v35 >= 0x4000)
            v36 = 0x4000;
          else
            v36 = v34 - v35;
          v37 = (const TFontObjectSurrogate *)(*(uint64_t (**)(_QWORD *))(*a1 + 216))(a1);
          TFontObjectTable::TFontObjectTable((TFontObjectTable *)__b, v37, v21, v35, v36);
          TBufferedStreamingContext::BufferString((uint64_t)v44, *(const unsigned __int8 **)&__b[40], v36);
          *(_QWORD *)&__b[8] = &off_1E6176770;
          TDataReference::DucRefCount((TDataReference *)&__b[8]);
          v35 = (v36 + v35);
        }
        while (v35 < v34);
      }
    }
    else
    {
LABEL_21:
      v41 = 0xAAAAAAAAAAAAAAAALL;
      *(_QWORD *)&v30 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v30 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v39[1] = v30;
      v40 = v30;
      v39[0] = v30;
      v31 = (const TFontObjectSurrogate *)(*(uint64_t (**)(_QWORD *))(*a1 + 216))(a1);
      TFontObjectTable::TFontObjectTable((TFontObjectTable *)v39, v31, v21, 0, 4);
      *(_QWORD *)&v32 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v32 + 1) = 0xAAAAAAAAAAAAAAAALL;
      *(_OWORD *)&__b[352] = v32;
      *(_OWORD *)&__b[368] = v32;
      *(_OWORD *)&__b[320] = v32;
      *(_OWORD *)&__b[336] = v32;
      *(_OWORD *)&__b[288] = v32;
      *(_OWORD *)&__b[304] = v32;
      *(_OWORD *)&__b[256] = v32;
      *(_OWORD *)&__b[272] = v32;
      *(_OWORD *)&__b[224] = v32;
      *(_OWORD *)&__b[240] = v32;
      *(_OWORD *)&__b[192] = v32;
      *(_OWORD *)&__b[208] = v32;
      *(_OWORD *)&__b[160] = v32;
      *(_OWORD *)&__b[176] = v32;
      *(_OWORD *)&__b[128] = v32;
      *(_OWORD *)&__b[144] = v32;
      *(_OWORD *)&__b[96] = v32;
      *(_OWORD *)&__b[112] = v32;
      *(_OWORD *)&__b[64] = v32;
      *(_OWORD *)&__b[80] = v32;
      *(_OWORD *)&__b[32] = v32;
      *(_OWORD *)&__b[48] = v32;
      *(_OWORD *)__b = v32;
      *(_OWORD *)&__b[16] = v32;
      TCFFFontSet::TCFFFontSet((TCFFFontSet *)__b, **((_BYTE **)&v40 + 1), *(_BYTE *)(*((_QWORD *)&v40 + 1) + 1), *(_BYTE *)(*((_QWORD *)&v40 + 1) + 3), a7);
      *(_QWORD *)__b = &off_1E61B4308;
      (*(void (**)(_QWORD *, __int32 *, unsigned int *, _BYTE *, _QWORD))(*a1 + 264))(a1, v14, a5, __b, *(unsigned __int8 *)(a1[4] + 304));
      TCFFFontSet::StreamOut((TCFFFontSet *)__b, (TBufferedStreamingContext *)v44);
      TCFFFontSet::~TCFFFontSet((TCFFFontSet *)__b);
      *((_QWORD *)&v39[0] + 1) = &off_1E6176770;
      TDataReference::DucRefCount((TDataReference *)((char *)v39 + 8));
    }
    TBufferedStreamingContext::~TBufferedStreamingContext((TBufferedStreamingContext *)v44);
  }
  else
  {
    memset(__b, 170, sizeof(__b));
    TBufferedCharStringStreamingContext::TBufferedCharStringStreamingContext((uint64_t)__b, (uint64_t)a1, (uint64_t)v14, a10);
    *(_QWORD *)__b = &off_1E61B4298;
    v19 = (*(uint64_t (**)(_QWORD *))(*a1 + 40))(a1);
    if ((*a9 & 0x10000) != 0)
      v20 = 0;
    else
      v20 = a3;
    TType1PSFont::StreamType1Font(a1, v19, a7, 0, (uint64_t)a5, a3, v20, (uint64_t)__b);
    TBufferedCharStringStreamingContext::~TBufferedCharStringStreamingContext((TBufferedCharStringStreamingContext *)__b);
  }
  result = v42;
  v42 = 0;
  if (result)
    return MEMORY[0x1B5E0CD14](result, 0x1000C8052888210);
  return result;
}

void sub_1B0998270(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

uint64_t TType2ToType1CharStringConvertionContext::GetOutputType(TType2ToType1CharStringConvertionContext *this)
{
  return 1;
}

float ComputeVectorScalar(int a1, const __int16 *a2, const __int16 *a3)
{
  float v3;
  unsigned int v4;
  float v5;
  int v6;
  int v7;
  float result;
  float v9;

  v3 = 0.0;
  while (1)
  {
    v4 = *(unsigned __int16 *)a3++;
    v5 = (float)((int)bswap32(v4) >> 16) * 0.000061035;
    v7 = *a2++;
    v6 = v7;
    if (v5 != 0.0)
      break;
LABEL_3:
    result = v3;
    if (!--a1)
      return result;
  }
  v9 = (float)v6 * 0.000061035;
  result = 0.0;
  if (v9 != 0.0 && ((LODWORD(v9) ^ LODWORD(v5)) & 0x80000000) == 0)
  {
    if (v5 >= 0.0)
    {
      if (v3 == 0.0)
      {
        v3 = (float)v6 * 0.000061035;
      }
      else if (v9 != 1.0)
      {
        v3 = v3 * v9;
      }
    }
    else if (v3 == 0.0)
    {
      v3 = -v9;
    }
    else if (v9 != -1.0)
    {
      v3 = -(float)(v9 * v3);
    }
    goto LABEL_3;
  }
  return result;
}

float ComputeTupleScalar(int a1, uint64_t a2, int a3, unint64_t a4, __int16 *a5, unint64_t a6)
{
  unsigned int v6;
  const __int16 *v7;
  unint64_t v8;
  unint64_t v9;
  float result;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int16 *v14;
  unsigned __int16 *v15;
  BOOL v18;
  unint64_t v19;
  unint64_t v20;
  BOOL v21;
  BOOL v23;
  unint64_t v24;
  unsigned int v25;
  float v26;
  int v27;
  int v28;
  float v29;
  float v30;
  BOOL v32;
  float v33;
  _DWORD *exception;

  v6 = bswap32(*(unsigned __int16 *)(a4 + 2)) >> 16;
  if ((v6 & 0x1000) != 0)
    return 0.0;
  if ((v6 & 0x8000) != 0)
  {
    v7 = (const __int16 *)(a4 + 4);
    v8 = a4 + 4 + 2 * a1;
    if (v8 < a4 + 4 || v8 > a6)
    {
      v9 = a4 + 6 <= a6 ? (a6 - (unint64_t)v7) >> 1 : 0;
      if (v9 != a1)
        goto LABEL_65;
    }
  }
  else
  {
    if ((unsigned __int16)(v6 & 0xFFF) >= a3)
      goto LABEL_65;
    v7 = (const __int16 *)(a2 + 2 * (int)((v6 & 0xFFF) * a1));
  }
  if ((v6 & 0x4000) == 0)
    return ComputeVectorScalar(a1, a5, v7);
  v11 = (__int16)v6;
  v12 = a1;
  if (v11 < 0)
    v13 = a1;
  else
    v13 = 0;
  v14 = (unsigned __int16 *)(a4 + 2 * v13 + 4);
  v15 = &v14[a1];
  if ((unint64_t)v14 < a4 || v15 < v14 || (unint64_t)v15 > a6)
  {
    v18 = (unint64_t)(v14 + 1) <= a6 && (unint64_t)v14 >= a4;
    v19 = (a6 - (unint64_t)v14) >> 1;
    if (!v18)
      v19 = 0;
    if (v19 != a1)
      goto LABEL_65;
  }
  v20 = (unint64_t)&v15[a1];
  v21 = (unint64_t)v15 >= a4 && v20 >= (unint64_t)v15;
  if (!v21 || v20 > a6)
  {
    v23 = (unint64_t)(v15 + 1) <= a6 && (unint64_t)v15 >= a4;
    v24 = (a6 - (unint64_t)v15) >> 1;
    if (!v23)
      v24 = 0;
    if (v24 != a1)
    {
LABEL_65:
      exception = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)exception = &off_1E6176998;
      exception[2] = 4;
    }
  }
  result = 1.0;
  if (a1 >= 1)
  {
    do
    {
      v25 = *(unsigned __int16 *)v7++;
      v26 = (float)((int)bswap32(v25) >> 16) * 0.000061035;
      v28 = *a5++;
      v27 = v28;
      v29 = (float)((int)bswap32(*v14) >> 16) * 0.000061035;
      v30 = (float)((int)bswap32(v14[v12]) >> 16) * 0.000061035;
      if (v26 >= v29 && v30 >= v26)
      {
        v32 = v29 < 0.0;
        if (v30 <= 0.0)
          v32 = 0;
        if (v26 != 0.0 && !v32)
        {
          v33 = (float)v27 * 0.000061035;
          if (v33 < v29 || v30 < v33)
            return 0.0;
          if (v33 != v26)
          {
            if (v33 >= v26)
              v29 = v30;
            result = result * (float)((float)(v33 - v29) / (float)(v26 - v29));
          }
        }
      }
      ++v14;
      --a1;
    }
    while (a1);
  }
  return result;
}

unsigned __int16 *ApplyFeaturesToComponents(uint64_t a1, int a2, __int16 *a3, unsigned int a4, void *a5, void *a6)
{
  unsigned __int16 *result;
  unsigned __int16 *v12;
  uint64_t v13;
  unsigned int v14;

  v14 = 0;
  result = (unsigned __int16 *)GetGlyphVariationPtr(a1, a2, &v14);
  if (result)
  {
    v12 = result;
    v13 = ApplyVariationsToGlyph(*(_DWORD *)(*(_QWORD *)(a1 + 8) + 76), *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), v14, result, *(_DWORD *)(*(_QWORD *)(a1 + 8) + 72), a3, a4, a4, 0, a5, a6, 0, 0, 0, 0, a4 + 4);
    ScalerReleaseFontTable(*(memoryContext **)a1, v12);
    return (unsigned __int16 *)v13;
  }
  return result;
}

unint64_t GetGlyphVariationPtr(uint64_t a1, int a2, unsigned int *a3)
{
  unsigned int FontTable;
  char *v7;
  unsigned int *v8;
  char *v9;
  BOOL v12;
  _DWORD *exception;
  unsigned int *v15;
  BOOL v18;
  int v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unint64_t v26;
  void *v27;

  v27 = (void *)0xAAAAAAAAAAAAAAAALL;
  FontTable = ScalerGetFontTable(*(memoryContext **)a1, 1735811442, 0, &v27, 1, *(_DWORD *)(*(_QWORD *)(a1 + 8) + 68));
  *a3 = FontTable;
  if (!v27)
    return 0;
  v7 = (char *)v27 + 20;
  v8 = (unsigned int *)((char *)v27 + FontTable);
  if ((*((_WORD *)v27 + 7) & 0x100) != 0)
  {
    v15 = (unsigned int *)&v7[4 * a2];
    if (v27 > v15 || (unint64_t)v15 > 0xFFFFFFFFFFFFFFF7 || v15 + 2 > v8)
    {
      v18 = v27 > v15 || v15 + 1 > v8;
      if (v18 || (((char *)v8 - (char *)v15) & 0xFFFFFFFFFFFFFFFCLL) != 8)
      {
LABEL_18:
        exception = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)exception = &off_1E6176998;
        exception[2] = 4;
      }
    }
    v20 = bswap32(*v15);
    v21 = bswap32(v15[1]) - v20;
  }
  else
  {
    v9 = &v7[2 * a2];
    if (v27 > v9 || (unint64_t)v9 > 0xFFFFFFFFFFFFFFFBLL || v9 + 4 > (char *)v8)
    {
      v12 = v27 > v9 || v9 + 2 > (char *)v8;
      if (v12 || (((char *)v8 - v9) & 0xFFFFFFFFFFFFFFFELL) != 4)
        goto LABEL_18;
    }
    v22 = bswap32(*(unsigned __int16 *)v9);
    v20 = 2 * HIWORD(v22);
    v21 = 2 * ((bswap32(*((unsigned __int16 *)v9 + 1)) >> 16) - HIWORD(v22));
  }
  v23 = *((_DWORD *)v27 + 4);
  ScalerReleaseFontTable(*(memoryContext **)a1, v27);
  if (!v21)
    return 0;
  v24 = bswap32(v23) + v20;
  v26 = 0xAAAAAAAAAAAAAAAALL;
  ScalerGetFontTable(*(memoryContext **)a1, 1735811442, v24, &v26, 0, v21);
  *a3 -= v24;
  return v26;
}

uint64_t ApplyVariationsToGlyph(int a1, uint64_t a2, unsigned int a3, unsigned __int16 *a4, int a5, __int16 *a6, unsigned int a7, int a8, const unsigned __int16 *a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, int a16)
{
  __int128 v19;
  size_t v20;
  const char *v21;
  unsigned int v22;
  char *v23;
  int PackedShort;
  int v25;
  int v26;
  int v27;
  unsigned __int8 v28;
  unsigned __int16 *v29;
  char *v30;
  float v31;
  float v32;
  const char *v33;
  float *v34;
  float *v35;
  float *v36;
  int v37;
  float v38;
  float v39;
  float v40;
  float *v41;
  float *v42;
  float *v43;
  int v44;
  float v45;
  float v46;
  float v47;
  int v48;
  int v49;
  const char *v50;
  const char *v51;
  const char *v52;
  float *v53;
  float *v54;
  float *v55;
  int v56;
  float v57;
  float v58;
  float v59;
  float *v60;
  float *v61;
  float *v62;
  int v63;
  float v64;
  float v65;
  float v66;
  const char *v67;
  const char *v68;
  const char *v69;
  char *v70;
  int v71;
  int v72;
  _DWORD *v74;
  _DWORD *v75;
  _DWORD *v76;
  _DWORD *exception;
  _DWORD *v78;
  unsigned __int16 *v79;
  uint64_t __len;
  int v82;
  unsigned __int16 *v83;
  unsigned __int16 *v84;
  int v85;
  int v86;
  int v91[2];
  char *v92;
  unsigned __int16 *v93;
  unsigned __int16 *v94;
  unsigned __int16 *v95;
  _OWORD v96[13];
  _QWORD v97[3];

  v97[1] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)v91 = a8 + 4;
  __len = 4 * v91[0];
  if (a9 && a8 != -4)
  {
    memmove(a12, a10, __len);
    memmove(a13, a11, __len);
  }
  *(_QWORD *)&v19 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v19 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v96[12] = v19;
  v96[11] = v19;
  v96[10] = v19;
  v96[9] = v19;
  v96[8] = v19;
  v96[7] = v19;
  v96[6] = v19;
  v96[5] = v19;
  v96[4] = v19;
  v96[3] = v19;
  v96[2] = v19;
  v96[1] = v19;
  v96[0] = v19;
  v94 = 0;
  v95 = 0;
  v93 = 0;
  v84 = (unsigned __int16 *)v96;
  v97[0] = v96;
  if (v91[0])
  {
    if (a8 <= -5)
      std::vector<char,TInlineBufferAllocator<char,1024ul>>::__throw_length_error[abi:fe180100]();
    if ((_QWORD *)((char *)v96 + 4 * *(_QWORD *)v91) <= v97)
    {
      v97[0] = (char *)v96 + 4 * *(_QWORD *)v91;
      v20 = 4 * *(_QWORD *)v91;
    }
    else
    {
      v20 = 4 * *(_QWORD *)v91;
      v84 = (unsigned __int16 *)operator new(4 * *(_QWORD *)v91);
    }
    v93 = v84;
    v95 = &v84[2 * *(_QWORD *)v91];
    bzero(v84, v20);
    v94 = v95;
  }
  else
  {
    v84 = 0;
  }
  if ((unint64_t)a4 > 0xFFFFFFFFFFFFFFFBLL || (v21 = (char *)a4 + a3, a4 + 2 > (unsigned __int16 *)v21))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E6176998;
    exception[2] = 4;
  }
  v83 = &v84[v91[0]];
  v22 = bswap32(*a4);
  v23 = (char *)a4 + (bswap32(a4[1]) >> 16);
  v92 = v23;
  if ((v22 & 0x80000000) == 0)
    goto LABEL_19;
  if (v23 + 1 > v21)
  {
LABEL_85:
    v78 = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)v78 = &off_1E6176998;
    v78[2] = 4;
  }
  PackedShort = ReadPackedShort((const char **)&v92, (unint64_t)a4 + a3);
  if (PackedShort < 1 || (v25 = (unsigned __int16)PackedShort, v91[0] < (unsigned __int16)PackedShort))
  {
    if (!PackedShort)
    {
LABEL_19:
      v25 = 0;
      goto LABEL_20;
    }
    goto LABEL_85;
  }
  v92 = (char *)UnpackPointNumbers((unsigned __int16)PackedShort, v83, v92, v91[0], (const char *)a4 + a3);
LABEL_20:
  v86 = HIWORD(v22) & 0xFFF;
  if (!v86)
  {
    v28 = 0;
    goto LABEL_79;
  }
  v85 = v25;
  v26 = 0;
  v27 = 0;
  v82 = 0;
  v28 = 0;
  v29 = a4 + 2;
  v30 = v92;
  v79 = a4;
  do
  {
    if (v30 < (char *)a4 || v30 + 1 > v21)
    {
      v76 = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)v76 = &off_1E6176998;
      v76[2] = 4;
    }
    if (v29 < a4 || v29 + 4 > (unsigned __int16 *)v21)
    {
      v75 = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)v75 = &off_1E6176998;
      v75[2] = 4;
    }
    v31 = ComputeTupleScalar(a5, a2, a1, (unint64_t)v29, a6, (unint64_t)v21);
    v32 = v31;
    if (v31 != 0.0)
    {
      if ((v29[1] & 0x20) != 0)
      {
        if (a9 && v82)
        {
          InterpolateOutline(a7, a9, (float *)a10, (float *)a11, (const float *)a12, (const float *)a13, v85, v83, a16);
          v82 = 0;
        }
        v48 = ReadPackedShort((const char **)&v92, (unint64_t)v21);
        if (v92 < (char *)a4 || v92 + 1 > v21)
        {
LABEL_80:
          v74 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v74 = &off_1E6176998;
          v74[2] = 4;
        }
        if (v48)
        {
          v49 = (unsigned __int16)v48;
          if (v91[0] < (unsigned __int16)v48)
            goto LABEL_80;
          v50 = UnpackPointNumbers((unsigned __int16)v48, v84, v92, v91[0], v21);
          v51 = v50;
          if (v50 < (const char *)a4 || v50 + 1 > v21)
            goto LABEL_80;
          if (a9)
          {
            if (v91[0])
            {
              memmove(a14, a12, __len);
              a4 = v79;
              memmove(a15, a13, __len);
            }
            v52 = (const char *)ApplySparsePointDeltas(v49, v84, (float *)a14, v51, v32, v21);
            if (v52 < (const char *)a4 || v52 + 1 > v21)
              goto LABEL_80;
            v92 = (char *)ApplySparsePointDeltas(v49, v84, (float *)a15, v52, v32, v21);
            InterpolateOutline(a7, a9, (float *)a14, (float *)a15, (const float *)a12, (const float *)a13, v49, v84, a16);
            v53 = (float *)a10;
            v54 = (float *)a12;
            v55 = (float *)a14;
            v56 = v91[0];
            do
            {
              v57 = *v55++;
              v58 = v57;
              v59 = *v54++;
              *v53 = *v53 + (float)(v58 - v59);
              ++v53;
              --v56;
            }
            while (v56);
            v61 = (float *)a15;
            v60 = (float *)a11;
            v62 = (float *)a13;
            v63 = v91[0];
            do
            {
              v64 = *v61++;
              v65 = v64;
              v66 = *v62++;
              *v60 = *v60 + (float)(v65 - v66);
              ++v60;
              --v63;
            }
            while (v63);
          }
          else
          {
            v70 = (char *)ApplySparsePointDeltas(v49, v84, (float *)a10, v50, v32, v21);
            v92 = v70;
            if (v70 < (char *)a4 || v70 + 1 > v21)
              goto LABEL_80;
            ApplySparsePointDeltas(v49, v84, (float *)a11, v70, v32, v21);
          }
        }
        else
        {
          v68 = (const char *)ApplyAllPointDeltas(v91[0], (float *)a10, v92, v32, v21);
          if (v68 < (const char *)a4 || v68 + 1 > v21)
            goto LABEL_80;
          ApplyAllPointDeltas(v91[0], (float *)a11, v68, v32, v21);
        }
        goto LABEL_71;
      }
      if (v85)
      {
        if (a9 && v27)
        {
          if (v91[0])
          {
            memmove(a14, a12, __len);
            memmove(a15, a13, __len);
          }
          v33 = (const char *)ApplySparsePointDeltas(v85, v83, (float *)a14, v30, v32, v21);
          if (v33 < (const char *)a4 || v33 + 1 > v21)
            goto LABEL_80;
          v92 = (char *)ApplySparsePointDeltas(v85, v83, (float *)a15, v33, v32, v21);
          InterpolateOutline(a7, a9, (float *)a14, (float *)a15, (const float *)a12, (const float *)a13, v85, v83, a16);
          v34 = (float *)a10;
          v35 = (float *)a12;
          v36 = (float *)a14;
          v37 = v91[0];
          do
          {
            v38 = *v36++;
            v39 = v38;
            v40 = *v35++;
            *v34 = *v34 + (float)(v39 - v40);
            ++v34;
            --v37;
          }
          while (v37);
          v42 = (float *)a15;
          v41 = (float *)a11;
          v43 = (float *)a13;
          v44 = v91[0];
          do
          {
            v45 = *v42++;
            v46 = v45;
            v47 = *v43++;
            *v41 = *v41 + (float)(v46 - v47);
            ++v41;
            --v44;
          }
          while (v44);
LABEL_71:
          v28 = 1;
          v27 = 1;
          goto LABEL_72;
        }
        v69 = (const char *)ApplySparsePointDeltas(v85, v83, (float *)a10, v30, v31, v21);
        if (v69 < (const char *)a4 || v69 + 1 > v21)
          goto LABEL_80;
        ApplySparsePointDeltas(v85, v83, (float *)a11, v69, v32, v21);
        v28 = 1;
        v82 = 1;
      }
      else
      {
        v67 = (const char *)ApplyAllPointDeltas(v91[0], (float *)a10, v30, v31, v21);
        if (v67 < (const char *)a4 || v67 + 1 > v21)
          goto LABEL_80;
        ApplyAllPointDeltas(v91[0], (float *)a11, v67, v32, v21);
        v28 = 1;
      }
    }
LABEL_72:
    v30 += bswap32(*v29) >> 16;
    v92 = v30;
    v71 = bswap32(v29[1]);
    v72 = 2 * a5 + 4;
    if (v71 >> 16 >= 0)
      v72 = 4;
    v29 = (unsigned __int16 *)((char *)v29 + ((4 * a5) & ((2 * v71) >> 31)) + v72);
    ++v26;
  }
  while (v26 != v86);
  if (a9 && v82)
    InterpolateOutline(a7, a9, (float *)a10, (float *)a11, (const float *)a12, (const float *)a13, v85, v83, a16);
LABEL_79:
  std::vector<unsigned short,TInlineBufferAllocator<unsigned short,104ul>>::__destroy_vector::operator()[abi:fe180100]((uint64_t)&v93);
  return v28;
}

void sub_1B09991B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  std::vector<unsigned short,TInlineBufferAllocator<unsigned short,104ul>>::__destroy_vector::operator()[abi:fe180100]((uint64_t)&a31);
  _Unwind_Resume(a1);
}

BOOL ApplyFeaturesToOutline(uint64_t a1, uint64_t a2)
{
  unint64_t GlyphVariationPtr;
  uint64_t v5;
  uint64_t v6;
  float *v7;
  float *v8;
  float *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  __int16 *v13;
  __int16 **v14;
  uint64_t v15;
  __int16 *v16;
  __int16 **v17;
  uint64_t v18;
  float *v19;
  int v20;
  uint64_t v21;
  float *v22;
  int v23;
  uint64_t v24;
  __int16 *v25;
  _DWORD *v26;
  float *v27;
  float v28;
  uint64_t v29;
  uint64_t v30;
  __int16 *v31;
  __int16 *v32;
  float v33;
  __int16 *v34;
  __int16 *v35;
  float v36;
  int v37;
  uint64_t v38;
  unsigned __int16 v39;
  uint64_t v40;
  unsigned __int16 v41;
  unsigned __int16 v42;
  __int16 v43;
  __int16 v44;
  __int16 v45;
  __int16 v46;
  __int16 *v47;
  __int16 *v48;
  int v49;
  int v50;
  BOOL v51;
  int v52;
  int v53;
  BOOL v54;
  unint64_t v55;
  __int16 *v56;
  __int16 *v57;
  uint64_t v59;
  uint64_t v60;
  unsigned __int16 *v61;
  uint64_t v62;
  unsigned int v63;
  float *v64;
  float *v65;
  float *v66;
  _QWORD v67[156];
  _QWORD v68[3];

  v68[1] = *MEMORY[0x1E0C80C00];
  v63 = 0;
  GlyphVariationPtr = GetGlyphVariationPtr(a1, *(_DWORD *)(a2 + 88), &v63);
  if (!GlyphVariationPtr)
    return GlyphVariationPtr != 0;
  v5 = *(int *)(a2 + 4);
  v6 = v5 + 4;
  v7 = (float *)v67;
  memset(v67, 170, sizeof(v67));
  v65 = 0;
  v66 = 0;
  v64 = 0;
  v68[0] = v67;
  v61 = (unsigned __int16 *)GlyphVariationPtr;
  v62 = a1;
  if ((_DWORD)v5 == -4)
  {
    v7 = 0;
    v8 = (float *)(4 * v6);
    v9 = (float *)(8 * v6);
    v60 = 12 * v6;
    v10 = (void *)(16 * v6);
    v59 = 20 * v6;
    v11 = *(_QWORD *)(a1 + 16);
    goto LABEL_9;
  }
  if ((unint64_t)(6 * v6) >> 62)
    std::vector<char,TInlineBufferAllocator<char,1024ul>>::__throw_length_error[abi:fe180100]();
  if (&v67[3 * v6] <= v68)
    v68[0] = &v67[3 * v6];
  else
    v7 = (float *)operator new(24 * v6);
  v64 = v7;
  v66 = &v7[6 * v6];
  bzero(v7, 24 * (int)v5 + 96);
  v65 = &v7[6 * v6];
  v8 = &v7[v6];
  v9 = &v8[v6];
  v60 = (uint64_t)&v9[v6];
  v10 = (void *)(v60 + 4 * v6);
  v59 = (uint64_t)v10 + 4 * v6;
  v11 = *(_QWORD *)(a1 + 16);
  if ((_DWORD)v5)
  {
LABEL_9:
    ComputeUnscaledBounds(a2, a2 + 92);
    v12 = *(int *)(a2 + 4);
    v14 = (__int16 **)(a2 + 72);
    v13 = *(__int16 **)(a2 + 72);
    v15 = v12;
    *(_QWORD *)&v13[v15] = 0;
    v17 = (__int16 **)(a2 + 80);
    v16 = *(__int16 **)(a2 + 80);
    *(_QWORD *)&v16[v15] = 0;
    if ((_DWORD)v5 == -4)
      goto LABEL_16;
    goto LABEL_12;
  }
  LODWORD(v12) = 0;
  v14 = (__int16 **)(a2 + 72);
  v13 = *(__int16 **)(a2 + 72);
  *(_QWORD *)v13 = 0;
  v17 = (__int16 **)(a2 + 80);
  v16 = *(__int16 **)(a2 + 80);
  *(_QWORD *)v16 = 0;
LABEL_12:
  v18 = 2 * v5 + 8;
  v19 = v7;
  do
  {
    v20 = *v13++;
    *v19++ = (float)v20;
    v18 -= 2;
  }
  while (v18);
  v21 = 2 * v5 + 8;
  v22 = v8;
  do
  {
    v23 = *v16++;
    *v22++ = (float)v23;
    v21 -= 2;
  }
  while (v21);
LABEL_16:
  v24 = *(_QWORD *)(v11 + 32);
  v25 = *(__int16 **)(v11 + 16);
  GlyphVariationPtr = (unint64_t)v61;
  ApplyVariationsToGlyph(*(_DWORD *)(*(_QWORD *)(v62 + 8) + 76), v24, v63, v61, *(_DWORD *)(*(_QWORD *)(v62 + 8) + 72), v25, *(_DWORD *)a2, v12, *(const unsigned __int16 **)(a2 + 32), v7, v8, v9, (void *)v60, v10, (void *)v59, v6);
  if ((_DWORD)v5 == -4)
  {
    v31 = *v14;
    v34 = *v17;
  }
  else
  {
    v26 = *(_DWORD **)(a2 + 56);
    v27 = v7;
    do
    {
      v28 = *v27++;
      *v26++ = llroundf(v28 * 64.0);
    }
    while (v27 != v8);
    v29 = 0;
    v30 = *(_QWORD *)(a2 + 64);
    do
    {
      *(_DWORD *)(v30 + v29 * 4) = llroundf(v8[v29] * 64.0);
      ++v29;
    }
    while (&v8[v29] != v9);
    v31 = *v14;
    v32 = *v14;
    do
    {
      v33 = *v7++;
      *v32++ = llroundf(v33);
    }
    while (v7 != v8);
    v34 = *v17;
    v35 = *v17;
    do
    {
      v36 = *v8++;
      *v35++ = llroundf(v36);
    }
    while (v8 != v9);
  }
  v37 = *(_DWORD *)(a2 + 4);
  if (v37)
  {
    v38 = v37;
    v39 = 0x7FFF;
    LODWORD(v40) = 0x8000;
    v41 = 0x8000;
    v42 = 0x7FFF;
    v43 = 0x8000;
    v44 = 0x7FFF;
    v45 = 0x8000;
    v46 = 0x7FFF;
    v47 = v31;
    v48 = v34;
    do
    {
      v50 = *v47++;
      v49 = v50;
      v51 = v46 < v50;
      if (v46 > v50)
        v42 = v49;
      if (!v51)
        v46 = v49;
      if (v45 < v49)
        v41 = v49;
      if (v45 <= v49)
        v45 = v49;
      v53 = *v48++;
      v52 = v53;
      v54 = v44 < v53;
      if (v44 > v53)
        v39 = v52;
      if (!v54)
        v44 = v52;
      if (v43 >= v52)
        v40 = v40;
      else
        v40 = v52;
      if (v43 <= v52)
        v43 = v52;
      --v37;
    }
    while (v37);
    v55 = ((unint64_t)v41 << 32) | (v40 << 48) | ((unint64_t)v39 << 16) | v42;
  }
  else
  {
    v55 = 0;
    LOWORD(v40) = 0;
    v42 = 0;
    v38 = 0;
  }
  v56 = &v31[v38];
  v57 = &v34[v38];
  *(_WORD *)(a2 + 102) += v42 - *(_WORD *)(a2 + 92) - *v56;
  *(_WORD *)(a2 + 100) += v56[1] - *v56;
  *(_WORD *)(a2 + 106) += *(_WORD *)(a2 + 98) - v40 + v57[2];
  *(_WORD *)(a2 + 104) += v57[2] - v57[3];
  *(_QWORD *)(a2 + 92) = v55;
  ScalerReleaseFontTable(*(memoryContext **)v62, v61);
  std::vector<float,TInlineBufferAllocator<float,312ul>>::__destroy_vector::operator()[abi:fe180100]((uint64_t)&v64);
  return GlyphVariationPtr != 0;
}

void sub_1B099960C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  std::vector<float,TInlineBufferAllocator<float,312ul>>::__destroy_vector::operator()[abi:fe180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void ApplyVariationToCVT(unsigned __int16 *a1, int a2, uint64_t a3, int a4, __int16 *a5, int a6, __int16 *a7, const char *a8)
{
  unsigned int v13;
  char *v14;
  int PackedShort;
  int v16;
  int v17;
  uint64_t v18;
  float *v19;
  __int16 *v20;
  int v21;
  unsigned __int16 *v22;
  char *v23;
  float v24;
  float v25;
  int v26;
  int v27;
  const char *v28;
  int v29;
  int v30;
  uint64_t v31;
  float *v32;
  float v33;
  _DWORD *v34;
  _DWORD *exception;
  _DWORD *v36;
  _DWORD *v37;
  uint64_t v38;
  unsigned __int16 *v39;
  int v40;
  unsigned __int16 *v41;
  int v42;
  float *v43;
  char *v47;

  v41 = (unsigned __int16 *)operator new[]();
  v13 = bswap32(a1[2]);
  v14 = (char *)a1 + (bswap32(a1[3]) >> 16);
  v47 = v14;
  if ((v13 & 0x80000000) == 0)
    goto LABEL_7;
  if (v14 + 1 <= a8)
  {
    PackedShort = ReadPackedShort((const char **)&v47, (unint64_t)a8);
    if (PackedShort >= 1)
    {
      v16 = (unsigned __int16)PackedShort;
      if ((unsigned __int16)PackedShort <= a6)
      {
        v39 = &v41[a6];
        v47 = (char *)UnpackPointNumbers((unsigned __int16)PackedShort, v39, v47, a6, a8);
        goto LABEL_8;
      }
    }
    if (!PackedShort)
    {
LABEL_7:
      v16 = 0;
      v39 = 0;
LABEL_8:
      v43 = (float *)operator new[]();
      v40 = v16;
      v17 = HIWORD(v13) & 0xFFF;
      v42 = a6;
      if (a6)
      {
        v18 = 2 * a6;
        v19 = v43;
        v20 = a7;
        do
        {
          v21 = *v20++;
          *v19++ = (float)v21;
          v18 -= 2;
        }
        while (v18);
      }
      v38 = a6;
      if (v17)
      {
        v22 = a1 + 4;
        v23 = v47;
        do
        {
          if (v23 < (char *)a1 || v23 + 1 > a8)
          {
            exception = __cxa_allocate_exception(0x10uLL);
            *(_QWORD *)exception = &off_1E6176998;
            exception[2] = 4;
          }
          if (v22 < a1 || v22 + 4 > (unsigned __int16 *)a8)
          {
            v34 = __cxa_allocate_exception(0x10uLL);
            *(_QWORD *)v34 = &off_1E6176998;
            v34[2] = 4;
          }
          v24 = ComputeTupleScalar(a4, a3, a2, (unint64_t)v22, a5, (unint64_t)a8);
          v25 = v24;
          if (v24 != 0.0)
          {
            if ((v22[1] & 0x20) != 0)
            {
              v26 = ReadPackedShort((const char **)&v47, (unint64_t)a8);
              if (v26)
              {
                v27 = (unsigned __int16)v26;
                if ((unsigned __int16)v26 > v42
                  || (v28 = UnpackPointNumbers((unsigned __int16)v26, v41, v47, v42, a8), v28 < (const char *)a1)
                  || v28 + 1 > a8)
                {
                  v36 = __cxa_allocate_exception(0x10uLL);
                  *(_QWORD *)v36 = &off_1E6176998;
                  v36[2] = 4;
                }
                ApplySparsePointDeltas(v27, v41, v43, v28, v25, a8);
              }
              else
              {
                ApplyAllPointDeltas(v42, v43, v47, v25, a8);
              }
            }
            else if (v40)
            {
              ApplySparsePointDeltas(v40, v39, v43, v23, v24, a8);
            }
            else
            {
              ApplyAllPointDeltas(v42, v43, v23, v24, a8);
            }
          }
          v23 += bswap32(*v22) >> 16;
          v47 = v23;
          v29 = bswap32(v22[1]);
          if (v29 >> 16 < 0)
            v30 = 2 * a4 + 4;
          else
            v30 = 4;
          v22 = (unsigned __int16 *)((char *)v22 + ((4 * a4) & ((2 * v29) >> 31)) + v30);
          --v17;
        }
        while (v17);
      }
      if (v42)
      {
        v31 = 4 * v38;
        v32 = v43;
        do
        {
          v33 = *v32++;
          *a7++ = llroundf(v33);
          v31 -= 4;
        }
        while (v31);
      }
      MEMORY[0x1B5E0CD14](v43, 0x1000C8052888210);
      JUMPOUT(0x1B5E0CD14);
    }
  }
  v37 = __cxa_allocate_exception(0x10uLL);
  *(_QWORD *)v37 = &off_1E6176998;
  v37[2] = 4;
}

void sub_1B0999A30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  MEMORY[0x1B5E0CD14](a12, 0x1000C80BDFB0063);
  _Unwind_Resume(a1);
}

uint64_t ReadPackedShort(const char **a1, unint64_t a2)
{
  unsigned __int8 *v3;
  const char *v4;
  uint64_t result;
  const char *v6;
  _DWORD *exception;

  v3 = (unsigned __int8 *)*a1;
  v4 = *a1 + 1;
  *a1 = v4;
  result = *v3;
  if ((char)*v3 < 0)
  {
    v6 = (const char *)(v3 + 2);
    if ((unint64_t)v6 > a2)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)exception = &off_1E6176998;
      exception[2] = 4;
    }
    *a1 = v6;
    return *(unsigned __int8 *)v4 | ((result & 0x7F) << 8);
  }
  return result;
}

const char *UnpackPointNumbers(int a1, unsigned __int16 *a2, const char *a3, int a4, const char *a5)
{
  int v5;
  int v6;
  const char *v7;
  const char *v8;
  char v9;
  char v10;
  int v11;
  int v12;
  unint64_t v13;
  BOOL v15;
  _BOOL4 v16;
  unint64_t v17;
  BOOL v18;
  BOOL v19;
  _DWORD *exception;

  v5 = 0;
  v6 = 0;
  v7 = a3;
  v8 = a3;
  do
  {
    v10 = *v8++;
    v9 = v10;
    v11 = v10 & 0x7F;
    v12 = v11 + 1;
    if (a1 > v11)
    {
      v13 = (v11 + 1);
    }
    else
    {
      v6 = v12 - a1;
      v13 = a1;
    }
    if ((int)v13 < 1)
      goto LABEL_40;
    if ((v9 & 0x80000000) == 0)
    {
      v15 = &v8[v13] >= v8 && &v8[v13] <= a5 && v8 >= a3;
      v16 = v7 + 2 <= a5 && v8 >= a3;
      if (a5 - v8 != v13)
        v16 = 0;
      if (v15 || v16)
      {
        while (1)
        {
          v5 += *(unsigned __int8 *)v8;
          if (v5 < 0 || v5 >= a4)
            break;
          ++v8;
          *a2++ = v5;
          LODWORD(v13) = v13 - 1;
          if (!(_DWORD)v13)
            goto LABEL_36;
        }
      }
LABEL_40:
      exception = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)exception = &off_1E6176998;
      exception[2] = 4;
    }
    if (v8 < a3
      || ((v17 = (unint64_t)&v8[2 * v13], v17 >= (unint64_t)v8)
        ? (v18 = v17 > (unint64_t)a5)
        : (v18 = 1),
          v18))
    {
      if (v8 < a3 || v7 + 3 > a5 || (unint64_t)(a5 - v8) >> 1 != v13)
        goto LABEL_40;
    }
    do
    {
      v5 += bswap32(*(unsigned __int16 *)v8) >> 16;
      if (v5 < 0 || v5 >= a4)
        goto LABEL_40;
      v8 += 2;
      *a2++ = v5;
      LODWORD(v13) = v13 - 1;
    }
    while ((_DWORD)v13);
LABEL_36:
    if (a1 <= v11)
      break;
    v7 = v8;
    v19 = __OFSUB__(a1, v12);
    a1 -= v12;
  }
  while (!((a1 < 0) ^ v19 | (a1 == 0)));
  return &v8[v6];
}

uint64_t ApplySparsePointDeltas(int a1, const unsigned __int16 *a2, float *a3, const char *a4, float a5, const char *a6)
{
  int v6;
  const char *v7;
  unsigned __int16 *v8;
  int v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  BOOL v14;
  _BOOL4 v15;
  int v16;
  float v17;
  int v18;
  unint64_t v19;
  BOOL v20;
  unsigned int v21;
  float v22;
  int v23;
  BOOL v24;
  _DWORD *exception;

  v6 = 0;
  v7 = a4;
  do
  {
    v8 = (unsigned __int16 *)(v7 + 1);
    v9 = *v7 & 0x3F;
    v10 = v9 + 1;
    if (a1 > v9)
    {
      v11 = (v9 + 1);
    }
    else
    {
      v6 = v9 + 1 - a1;
      v11 = a1;
    }
    if ((int)v11 < 1)
    {
LABEL_39:
      exception = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)exception = &off_1E6176998;
      exception[2] = 4;
    }
    if ((*v7 & 0xC0) == 0x40)
    {
      if (v8 < (unsigned __int16 *)a4
        || ((v19 = (unint64_t)&v8[v11], v19 >= (unint64_t)v8)
          ? (v20 = v19 > (unint64_t)a6)
          : (v20 = 1),
            v20))
      {
        if (v8 < (unsigned __int16 *)a4 || v7 + 3 > a6 || (unint64_t)(a6 - (const char *)v8) >> 1 != v11)
          goto LABEL_39;
      }
      do
      {
        v21 = *v8++;
        v22 = (float)((int)bswap32(v21) >> 16);
        v23 = *a2++;
        a3[v23] = a3[v23] + (float)(a5 * v22);
        LODWORD(v11) = v11 - 1;
      }
      while ((_DWORD)v11);
      v6 *= 2;
    }
    else if ((*v7 & 0xC0) != 0)
    {
      a2 += v11;
    }
    else
    {
      v12 = (unint64_t)v8 + v11;
      v14 = v12 >= (unint64_t)v8 && v12 <= (unint64_t)a6 && v8 >= (unsigned __int16 *)a4;
      v15 = v7 + 2 <= a6 && v8 >= (unsigned __int16 *)a4;
      if (a6 - (const char *)v8 != v11)
        v15 = 0;
      if (!v14 && !v15)
        goto LABEL_39;
      do
      {
        v16 = *(char *)v8;
        v8 = (unsigned __int16 *)((char *)v8 + 1);
        v17 = (float)v16;
        v18 = *a2++;
        a3[v18] = a3[v18] + (float)(a5 * v17);
        LODWORD(v11) = v11 - 1;
      }
      while ((_DWORD)v11);
    }
    v7 = (const char *)v8;
    if (a1 <= v9)
      break;
    v24 = __OFSUB__(a1, v10);
    a1 -= v10;
  }
  while (!((a1 < 0) ^ v24 | (a1 == 0)));
  return (uint64_t)v8 + v6;
}

uint64_t ApplyAllPointDeltas(int a1, float *a2, const char *a3, float a4, const char *a5)
{
  int v5;
  const char *v6;
  unsigned __int16 *v7;
  int v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  BOOL v13;
  _BOOL4 v14;
  int v15;
  unint64_t v16;
  BOOL v17;
  unsigned int v18;
  BOOL v19;
  _DWORD *exception;

  v5 = 0;
  v6 = a3;
  do
  {
    v7 = (unsigned __int16 *)(v6 + 1);
    v8 = *v6 & 0x3F;
    v9 = v8 + 1;
    if (a1 > v8)
    {
      v10 = (v8 + 1);
    }
    else
    {
      v5 = v8 + 1 - a1;
      v10 = a1;
    }
    if ((int)v10 < 1)
    {
LABEL_39:
      exception = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)exception = &off_1E6176998;
      exception[2] = 4;
    }
    if ((*v6 & 0xC0) == 0x40)
    {
      if (v7 < (unsigned __int16 *)a3
        || ((v16 = (unint64_t)&v7[v10], v16 >= (unint64_t)v7)
          ? (v17 = v16 > (unint64_t)a5)
          : (v17 = 1),
            v17))
      {
        if (v7 < (unsigned __int16 *)a3 || v6 + 3 > a5 || (unint64_t)(a5 - (const char *)v7) >> 1 != v10)
          goto LABEL_39;
      }
      do
      {
        v18 = *v7++;
        *a2 = *a2 + (float)(a4 * (float)((int)bswap32(v18) >> 16));
        ++a2;
        LODWORD(v10) = v10 - 1;
      }
      while ((_DWORD)v10);
      v5 *= 2;
    }
    else if ((*v6 & 0xC0) != 0)
    {
      a2 += v10;
    }
    else
    {
      v11 = (unint64_t)v7 + v10;
      v13 = v11 >= (unint64_t)v7 && v11 <= (unint64_t)a5 && v7 >= (unsigned __int16 *)a3;
      v14 = v6 + 2 <= a5 && v7 >= (unsigned __int16 *)a3;
      if (a5 - (const char *)v7 != v10)
        v14 = 0;
      if (!v13 && !v14)
        goto LABEL_39;
      do
      {
        v15 = *(char *)v7;
        v7 = (unsigned __int16 *)((char *)v7 + 1);
        *a2 = *a2 + (float)(a4 * (float)v15);
        ++a2;
        LODWORD(v10) = v10 - 1;
      }
      while ((_DWORD)v10);
    }
    v6 = (const char *)v7;
    if (a1 <= v8)
      break;
    v19 = __OFSUB__(a1, v9);
    a1 -= v9;
  }
  while (!((a1 < 0) ^ v19 | (a1 == 0)));
  return (uint64_t)v7 + v5;
}

void ApplyStyleToCVT(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  memoryContext *v4;
  int v5;
  __int16 *v6;
  __int16 *v7;
  unsigned int FontTable;
  unsigned __int16 *v9;
  unsigned __int16 *v10;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 16);
  v4 = *(memoryContext **)a1;
  v5 = *(unsigned __int16 *)(v2 + 150);
  v6 = (__int16 *)v3[2];
  v7 = (__int16 *)v3[6];
  v10 = (unsigned __int16 *)0xAAAAAAAAAAAAAAAALL;
  FontTable = ScalerGetFontTable(v4, 1668702578, 0, &v10, 0, 8);
  v9 = v10;
  ApplyVariationToCVT(v10, *(_DWORD *)(*(_QWORD *)(a1 + 8) + 76), v3[4], *(_DWORD *)(*(_QWORD *)(a1 + 8) + 72), v6, v5, v7, (const char *)v10 + FontTable);
  ScalerReleaseFontTable(*(memoryContext **)a1, v9);
}

uint64_t InterpolateOutline(uint64_t result, const unsigned __int16 *a2, float *a3, float *a4, const float *a5, const float *a6, int a7, const unsigned __int16 *a8, int a9)
{
  int v9;
  int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  int v16;
  uint64_t v17;
  const unsigned __int16 *v18;
  unsigned int v19;
  _DWORD *exception;

  if ((_DWORD)result)
  {
    v9 = a7;
    if (a7)
    {
      v12 = result;
      v13 = 0;
      do
      {
        v15 = *a2++;
        v14 = v15;
        if (v15 >= a9 || (v16 = v14 - v13, (int)(v14 - v13) <= -2))
        {
          exception = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)exception = &off_1E6176998;
          exception[2] = 4;
        }
        if (v16 < a9)
          v17 = (v16 + 1);
        else
          v17 = a9;
        if (*a8 <= v14)
        {
          v18 = a8;
          do
          {
            v19 = v18[1];
            ++v18;
          }
          while (v19 <= v14 && v9-- != 1);
          if ((int)v17 >= 3 && v18 > a8)
          {
            InterpolateContour(v17, a3, a5, a8, v18 - 1, v13);
            result = InterpolateContour(v17, a4, a6, a8, v18 - 1, v13);
          }
          a8 = v18;
        }
        if (!--v12)
          break;
        v13 = v14 + 1;
      }
      while (v9);
    }
  }
  return result;
}

void std::vector<unsigned short,TInlineBufferAllocator<unsigned short,104ul>>::__destroy_vector::operator()[abi:fe180100](uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  BOOL v4;
  BOOL v5;

  v2 = *(_QWORD **)a1;
  if (v2)
  {
    *(_QWORD *)(a1 + 8) = v2;
    v3 = (_QWORD *)(a1 + 232);
    if (a1 + 24 <= (unint64_t)v2)
    {
      v4 = v3 >= v2;
      v5 = v3 == v2;
    }
    else
    {
      v4 = 0;
      v5 = 0;
    }
    if (!v5 && v4)
    {
      if (*(_QWORD *)(a1 + 16) == *(_QWORD *)(a1 + 232))
        *v3 = v2;
    }
    else
    {
      operator delete(v2);
    }
  }
}

uint64_t InterpolateContour(uint64_t result, float *a2, const float *a3, const unsigned __int16 *a4, const unsigned __int16 *a5, unsigned int a6)
{
  const unsigned __int16 *v6;
  unint64_t v7;
  unsigned int v8;
  float *v9;
  float *v10;
  float *v11;
  uint64_t v12;
  int64_t v13;
  float *v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float *v21;
  float v22;
  float v24;
  BOOL v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  uint64_t v32;
  float v33;
  float *v34;
  float v35;
  float v36;
  float v37;
  float v38;
  int v39;
  float v40;
  float *v41;
  float *v42;
  float v43;
  float *v44;
  float *v45;
  float v46;
  BOOL v47;
  float v48;
  float v49;
  float v50;
  float *v51;
  float *v52;
  float v53;
  float v54;
  float v55;
  float *v56;
  float *v57;
  float v58;
  float v59;
  float v60;

  v8 = *a4;
  v6 = a4 + 1;
  v7 = v8;
  v9 = &a2[v8];
  if (v6 <= a5)
  {
    v10 = v9;
    do
    {
      v11 = v10;
      v12 = *v6;
      v10 = &a2[v12];
      v13 = (char *)v11 - (char *)a2;
      v15 = *v11;
      v14 = v11 + 1;
      v16 = v15;
      v17 = *v10 - v15;
      v18 = *(const float *)((char *)a3 + v13);
      v19 = a3[v12];
      v20 = v19 - v18;
      v21 = (float *)((char *)a3 + (char *)v14 - (char *)a2);
      if (v17 == (float)(v19 - v18))
      {
        v22 = v16 - v18;
        if (v22 != 0.0 && v14 < v10)
        {
          do
          {
            v24 = *v21++;
            *v14++ = v22 + v24;
          }
          while (v14 < v10);
        }
      }
      else if (v20 != 0.0)
      {
        v25 = v19 <= v18;
        v26 = *v10 - v19;
        if (v19 > v18)
          v27 = *(const float *)((char *)a3 + v13);
        else
          v27 = v19;
        if (v19 > v18)
        {
          v28 = v16 - v18;
        }
        else
        {
          v19 = *(const float *)((char *)a3 + v13);
          v28 = v26;
        }
        if (v25)
          v26 = v16 - v18;
        while (v14 < v10)
        {
          v29 = *v21++;
          v30 = v29;
          if (v29 >= v27)
          {
            if (v30 <= v19)
              v31 = v16 + (float)((float)(v17 * (float)(v30 - v18)) / v20);
            else
              v31 = v26 + *v14;
          }
          else
          {
            v31 = v28 + *v14;
          }
          *v14++ = v31;
        }
      }
      ++v6;
    }
    while (v6 <= a5);
  }
  v32 = *a5;
  v33 = a2[v7];
  v34 = &a2[v32];
  v35 = a3[v7];
  v36 = a3[v32];
  v37 = v33 - *v34;
  v38 = v35 - v36;
  v39 = a6 + result + ~(_DWORD)v32;
  if (v37 == (float)(v35 - v36))
  {
    v40 = v33 - v35;
    if (a6 < v7)
    {
      v41 = (float *)&a3[a6];
      v42 = &a2[a6];
      do
      {
        v43 = *v41++;
        *v42++ = v40 + v43;
      }
      while (v42 < v9);
    }
    if (v39)
    {
      v44 = v34 + 1;
      v45 = (float *)((char *)a3 + (char *)(v34 + 1) - (char *)a2);
      do
      {
        v46 = *v45++;
        *v44++ = v40 + v46;
        --v39;
      }
      while (v39);
    }
  }
  else if (v38 != 0.0)
  {
    v47 = v36 <= v35;
    v48 = *v34 - v36;
    if (v36 > v35)
      v49 = a3[v7];
    else
      v49 = v36;
    if (v36 > v35)
    {
      v50 = v33 - v35;
    }
    else
    {
      v36 = a3[v7];
      v50 = v48;
    }
    if (v47)
      v48 = v33 - v35;
    if (a6 < v7)
    {
      v51 = &a2[a6];
      v52 = (float *)&a3[a6];
      do
      {
        v53 = *v52++;
        v54 = v53;
        if (v53 >= v49)
        {
          if (v54 <= v36)
            v55 = v33 + (float)((float)(v37 * (float)(v54 - v35)) / v38);
          else
            v55 = v48 + *v51;
        }
        else
        {
          v55 = v50 + *v51;
        }
        *v51++ = v55;
      }
      while (v51 < v9);
    }
    if (v39)
    {
      v56 = v34 + 1;
      v57 = (float *)((char *)a3 + (char *)(v34 + 1) - (char *)a2);
      do
      {
        v58 = *v57++;
        v59 = v58;
        if (v58 >= v49)
        {
          if (v59 <= v36)
            v60 = v33 + (float)((float)(v37 * (float)(v59 - v35)) / v38);
          else
            v60 = v48 + *v56;
        }
        else
        {
          v60 = v50 + *v56;
        }
        *v56++ = v60;
        --v39;
      }
      while (v39);
    }
  }
  return result;
}

void std::vector<float,TInlineBufferAllocator<float,312ul>>::__destroy_vector::operator()[abi:fe180100](uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  BOOL v4;
  BOOL v5;

  v2 = *(_QWORD **)a1;
  if (v2)
  {
    *(_QWORD *)(a1 + 8) = v2;
    v3 = (_QWORD *)(a1 + 1272);
    if (a1 + 24 <= (unint64_t)v2)
    {
      v4 = v3 >= v2;
      v5 = v3 == v2;
    }
    else
    {
      v4 = 0;
      v5 = 0;
    }
    if (!v5 && v4)
    {
      if (*(_QWORD *)(a1 + 16) == *(_QWORD *)(a1 + 1272))
        *v3 = v2;
    }
    else
    {
      operator delete(v2);
    }
  }
}

size_t *AllocRawMemory(unsigned int a1, int a2)
{
  size_t v2;
  size_t *result;

  v2 = a1 + 8;
  if (a2)
  {
    result = (size_t *)malloc_type_calloc(1uLL, v2, 0x690B61C8uLL);
    if (!result)
      return result;
  }
  else
  {
    result = (size_t *)malloc_type_malloc(a1 + 8, 0x68FCFC2DuLL);
    if (!result)
      return result;
  }
  *result++ = v2;
  return result;
}

_QWORD *ResizeRawMemory(_QWORD *a1, unsigned int a2, int a3)
{
  unint64_t v4;
  char *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;

  if (a1)
    v4 = *(a1 - 1) - 8;
  else
    v4 = 0;
  if (a1)
    v5 = (char *)(a1 - 1);
  else
    v5 = 0;
  v6 = a2;
  v7 = malloc_type_realloc(v5, a2 + 8, 0xD048CD25uLL);
  if (v7)
  {
    *v7 = v6;
    v8 = v7 + 1;
    if (v6 > v4)
      bzero((char *)v8 + v4, v6 - v4);
  }
  else
  {
    if (!a3)
      free(v5);
    return 0;
  }
  return v8;
}

__CFData *TSFNTFont::CopyData(TSFNTFont *this)
{
  __int128 v2;
  uint64_t v3;
  uint64_t v4;
  const UInt8 *v5;
  __int128 v6;
  uint64_t v7;
  unint64_t v8;
  unsigned __int16 *Directory;
  unsigned int v10;
  unint64_t v11;
  unsigned int v12;
  __int16 v13;
  __CFData *Mutable;
  unsigned int v15;
  char *v16;
  char *v17;
  int8x16_t *v18;
  unsigned __int16 *v19;
  unsigned int *v20;
  _QWORD *v21;
  unint64_t v22;
  uint64_t v23;
  BOOL v24;
  unsigned int v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  unsigned int v30;
  int v31;
  __int128 v32;
  uint64_t v33;
  const UInt8 *v34;
  __int128 v36;
  __int128 v37;
  UInt8 bytes[16];
  __int128 v39;

  *(_QWORD *)&v2 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v2 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v36 = v2;
  v37 = v2;
  v3 = (*(uint64_t (**)(TSFNTFont *))(*(_QWORD *)this + 56))(this);
  (*(void (**)(__int128 *__return_ptr, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v3 + 32))(&v36, v3, 0, 0);
  if (*((_QWORD *)&v36 + 1) && (v4 = *(_QWORD *)(*((_QWORD *)&v36 + 1) + 8)) != 0)
    v5 = (const UInt8 *)(v4 + v37);
  else
    v5 = 0;
  v6 = v37;
  v7 = (*(uint64_t (**)(TSFNTFont *))(*(_QWORD *)this + 56))(this);
  v8 = *((_QWORD *)&v6 + 1) - v6;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v7 + 48))(v7))
  {
    Directory = TSFNTFont::GetDirectory(this);
    v10 = Directory[2];
    v11 = __rev16(v10);
    v12 = __clz(v11) ^ 0x1F;
    if (Directory[2])
      v13 = v12;
    else
      v13 = 0;
    Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
    if (Mutable)
    {
      v15 = (16 * v11) | 0xC;
      v16 = (char *)malloc_type_malloc(v15, 0x4DB2EA94uLL);
      v17 = v16;
      if (v16)
      {
        *(_DWORD *)v16 = *(_DWORD *)Directory;
        *((_WORD *)v16 + 2) = v10;
        *((_WORD *)v16 + 3) = bswap32(16 << v13) >> 16;
        *((_WORD *)v16 + 4) = v13 << 8;
        *((_WORD *)v16 + 5) = bswap32(16 * v11 - (16 << v13)) >> 16;
        CFDataAppendBytes(Mutable, (const UInt8 *)v16, 12);
        v18 = (int8x16_t *)(v17 + 12);
        if (v10)
        {
          v19 = Directory + 6;
          v20 = (unsigned int *)v19;
          v21 = v17 + 12;
          do
          {
            v22 = bswap32(v20[2]);
            v23 = bswap32(v20[3]);
            v24 = v8 > v22 && v8 >= (v23 + v22);
            if (!v24 || (v25 = v23 + v15, __CFADD__((_DWORD)v23, v15)))
            {
              v26 = 0;
            }
            else
            {
              v26 = v15 | (unint64_t)(v23 << 32);
              v29 = v23 & 3;
              if (v29)
                v15 = v25 - v29 + 4;
              else
                v15 = v25;
            }
            v27 = *v20;
            v28 = v20[1];
            v20 += 4;
            *v21 = bswap64(v28 | (v27 << 32));
            v21[1] = v26;
            v21 += 2;
          }
          while (v20 != (unsigned int *)&v19[8 * v11]);
          std::__introsort<std::_ClassicAlgPolicy,TSFNTFont::CopyData(void)::$_1 &,sfntDirectoryEntry *,false>((uint64_t)(v17 + 12), (unsigned int *)&v18[v11], 126 - 2 * __clz(v11), 1);
          v30 = v11 + 1;
          do
          {
            *(int8x16_t *)bytes = vrev32q_s8(*v18);
            CFDataAppendBytes(Mutable, bytes, 16);
            ++v18;
            --v30;
          }
          while (v30 > 1);
          v31 = v11 + 1;
          do
          {
            *(_QWORD *)&v32 = 0xAAAAAAAAAAAAAAAALL;
            *((_QWORD *)&v32 + 1) = 0xAAAAAAAAAAAAAAAALL;
            *(_OWORD *)bytes = v32;
            v39 = v32;
            TSFNTFont::GetTable(this, bswap32(*(_DWORD *)v19), 0, bytes);
            if (*(_QWORD *)&bytes[8] && (v33 = *(_QWORD *)(*(_QWORD *)&bytes[8] + 8)) != 0)
              v34 = (const UInt8 *)(v33 + v39);
            else
              v34 = 0;
            CFDataAppendBytes(Mutable, v34, bswap32(*((_DWORD *)v19 + 3)));
            if ((*((_BYTE *)v19 + 15) & 3) != 0)
              CFDataIncreaseLength(Mutable, 4 - (*((_BYTE *)v19 + 15) & 3));
            *(_QWORD *)bytes = &off_1E6176770;
            TDataReference::DucRefCount((TDataReference *)bytes);
            --v31;
            v19 += 8;
          }
          while (v31 > 1);
        }
        else
        {
          std::__introsort<std::_ClassicAlgPolicy,TSFNTFont::CopyData(void)::$_1 &,sfntDirectoryEntry *,false>((uint64_t)(v17 + 12), (unsigned int *)&v18[v11], 0, 1);
        }
        free(v17);
      }
      else
      {
        CFRelease(Mutable);
        Mutable = 0;
      }
    }
  }
  else
  {
    Mutable = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v5, v8);
  }
  *(_QWORD *)&v36 = &off_1E6176770;
  TDataReference::DucRefCount((TDataReference *)&v36);
  return Mutable;
}

void sub_1B099A820(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  TDataReference::~TDataReference((TDataReference *)&a9);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B099A7E4);
}

uint64_t TSFNTFont::GetTableOffset(TSFNTFont *this, int a2, unint64_t *a3)
{
  unsigned __int16 *Directory;
  unsigned int *v6;
  uint64_t v7;

  Directory = TSFNTFont::GetDirectory(this);
  if (!Directory || !Directory[2])
    return 0xFFFFFFFFLL;
  v6 = (unsigned int *)(Directory + 12);
  v7 = 16 * __rev16(Directory[2]);
  while (bswap32(*(v6 - 3)) != a2)
  {
    v6 += 4;
    v7 -= 16;
    if (!v7)
      return 0xFFFFFFFFLL;
  }
  if (a3)
    *a3 = bswap32(*v6);
  return bswap32(*(v6 - 1));
}

uint64_t TSFNTFont::EnumerateTableTags(TSFNTFont *a1, uint64_t a2)
{
  uint64_t result;
  unsigned int *v4;
  uint64_t v5;
  unsigned int v6;
  BOOL v7;
  char v8;

  result = (uint64_t)TSFNTFont::GetDirectory(a1);
  if (result && *(_WORD *)(result + 4))
  {
    v4 = (unsigned int *)(result + 12);
    v5 = 16 * __rev16(*(unsigned __int16 *)(result + 4)) - 16;
    do
    {
      v8 = 0;
      v6 = *v4;
      v4 += 4;
      result = std::function<void ()(unsigned int,BOOL *)>::operator()(a2, bswap32(v6), (uint64_t)&v8);
      if (v8)
        v7 = 1;
      else
        v7 = v5 == 0;
      v5 -= 16;
    }
    while (!v7);
  }
  return result;
}

uint64_t std::function<void ()(unsigned int,BOOL *)>::operator()(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  int v6;

  v6 = a2;
  v5 = a3;
  v3 = *(_QWORD *)(a1 + 24);
  if (!v3)
    std::__throw_bad_function_call[abi:fe180100]();
  return (*(uint64_t (**)(uint64_t, int *, uint64_t *))(*(_QWORD *)v3 + 48))(v3, &v6, &v5);
}

BOOL TSFNTFont::HasTableTags(TSFNTFont *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v6;
  _QWORD v7[2];
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v7[0] = a2;
  v7[1] = a3;
  v6 = a3;
  v8[0] = &off_1E61B48E8;
  v8[1] = v7;
  v8[2] = &v6;
  v9 = v8;
  TSFNTFont::EnumerateTableTags(a1, (uint64_t)v8);
  v3 = v9;
  if (v9 == v8)
  {
    v4 = 4;
    v3 = v8;
    goto LABEL_5;
  }
  if (v9)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v6 == 0;
}

void sub_1B099AA5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t TSFNTFont::GetTable@<X0>(TSFNTFont *this@<X0>, int a2@<W1>, int a3@<W2>, _QWORD *a4@<X8>)
{
  uint64_t result;
  unint64_t v8;

  v8 = 0;
  result = TSFNTFont::GetTableOffset(this, a2, &v8);
  if ((_DWORD)result != -1)
    return (*(uint64_t (**)(TSFNTFont *, _QWORD, unint64_t))(*(_QWORD *)this + 48))(this, (result + a3), v8);
  *a4 = &off_1E6176770;
  a4[1] = 0;
  a4[2] = 0;
  a4[3] = 0;
  return result;
}

uint64_t TSFNTFont::FindPostscriptName(TSFNTFont *this, const unsigned __int16 *a2, uint64_t a3, const char *a4)
{
  uint64_t PostscriptName;
  _QWORD v9[7];

  TsfntTable::TsfntTable((TsfntTable *)v9, this, 1851878757);
  v9[0] = &off_1E6179520;
  PostscriptName = TnameTable::FindPostscriptName((TnameTable *)v9, a2, a3, a4);
  v9[0] = &off_1E6176770;
  TDataReference::DucRefCount((TDataReference *)v9);
  return PostscriptName;
}

void sub_1B099ABA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  TnameTable::~TnameTable((TnameTable *)va);
  _Unwind_Resume(a1);
}

void TSFNTFont::GetSomeNames(TSFNTFont *this@<X0>, uint64_t *a2@<X8>)
{
  _QWORD v3[7];

  TsfntTable::TsfntTable((TsfntTable *)v3, this, 1851878757);
  v3[0] = &off_1E6179520;
  TnameTable::GetSomeNames((TnameTable *)v3, a2);
  v3[0] = &off_1E6176770;
  TDataReference::DucRefCount((TDataReference *)v3);
}

void sub_1B099AC20(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  TnameTable::~TnameTable((TnameTable *)va);
  _Unwind_Resume(a1);
}

void TSFNTFont::GetNames(TSFNTFont *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD v3[7];

  TsfntTable::TsfntTable((TsfntTable *)v3, this, 1851878757);
  v3[0] = &off_1E6179520;
  TnameTable::GetAllNames((TnameTable *)v3, a2);
  v3[0] = &off_1E6176770;
  TDataReference::DucRefCount((TDataReference *)v3);
}

void sub_1B099ACA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  TnameTable::~TnameTable((TnameTable *)va);
  _Unwind_Resume(a1);
}

void TSFNTFont::GetInstanceNames(const TSFNTFont *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v8;
  BOOL v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  __int16 v23;
  char *v24;
  char *v25;
  __int16 v26;
  char *v27;
  void **v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  char *v36;
  __int16 v37;
  char *v38;
  char *v39;
  unsigned int v40;
  unsigned int v41;
  void (**v42)(TDataReference *__hidden);
  void **v43;
  char *v44;
  char *v45;
  _OWORD *v46;
  char *v47;
  char *v48;
  char *v49;
  _OWORD v50[4];
  _OWORD *v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  v4 = *a2;
  v5 = a2[1] - *a2;
  if (v5)
  {
    *(_QWORD *)&v8 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v50[3] = v8;
    v50[2] = v8;
    v50[1] = v8;
    v50[0] = v8;
    v48 = 0;
    v49 = 0;
    v47 = 0;
    v51 = v50;
    v9 = *(unsigned __int16 *)(v4 + 4) == 0;
    v10 = 2;
    if (v9)
      v10 = 3;
    std::vector<unsigned short,TInlineBufferAllocator<unsigned short,30ul>>::reserve(&v47, v5 >> v10);
    v11 = *a2;
    v12 = a2[1];
    if (*a2 == v12)
    {
      v13 = v48;
    }
    else
    {
      v13 = v48;
      do
      {
        if (v13 >= v49)
        {
          v14 = (void **)v47;
          v15 = v13 - v47;
          if (v13 - v47 <= -3)
            std::vector<char,TInlineBufferAllocator<char,1024ul>>::__throw_length_error[abi:fe180100]();
          v16 = v15 >> 1;
          if (v49 - v47 <= (unint64_t)((v15 >> 1) + 1))
            v17 = v16 + 1;
          else
            v17 = v49 - v47;
          if ((unint64_t)(v49 - v47) >= 0x7FFFFFFFFFFFFFFELL)
            v18 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v18 = v17;
          v46 = v50;
          if (v18)
          {
            v19 = (char *)TInlineBufferAllocator<unsigned short,30ul>::allocate((uint64_t)v50, v18);
            v14 = (void **)v47;
            v13 = v48;
          }
          else
          {
            v19 = 0;
          }
          v20 = &v19[2 * v16];
          *(_WORD *)v20 = *(_WORD *)(v11 + 2);
          if (v13 == (char *)v14)
          {
            v22 = &v19[2 * v16];
          }
          else
          {
            v21 = v13;
            v22 = &v19[2 * v16];
            do
            {
              v23 = *((_WORD *)v21 - 1);
              v21 -= 2;
              *((_WORD *)v22 - 1) = v23;
              v22 -= 2;
            }
            while (v21 != (char *)v14);
          }
          v24 = v20 + 2;
          v47 = v22;
          v48 = v20 + 2;
          v25 = v49;
          v49 = &v19[2 * v18];
          v44 = v13;
          v45 = v25;
          v42 = (void (**)(TDataReference *__hidden))v14;
          v43 = v14;
          std::__split_buffer<unsigned short,TInlineBufferAllocator<unsigned short,30ul> &>::~__split_buffer((uint64_t)&v42);
          v13 = v24;
        }
        else
        {
          *(_WORD *)v13 = *(_WORD *)(v11 + 2);
          v13 += 2;
        }
        v48 = v13;
        if (*(_WORD *)(v11 + 4))
        {
          v26 = *(_WORD *)(v11 + 4) - 1;
          if (v13 >= v49)
          {
            v28 = (void **)v47;
            v29 = v13 - v47;
            if (v13 - v47 <= -3)
              std::vector<char,TInlineBufferAllocator<char,1024ul>>::__throw_length_error[abi:fe180100]();
            v30 = v29 >> 1;
            if (v49 - v47 <= (unint64_t)((v29 >> 1) + 1))
              v31 = v30 + 1;
            else
              v31 = v49 - v47;
            if ((unint64_t)(v49 - v47) >= 0x7FFFFFFFFFFFFFFELL)
              v32 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v32 = v31;
            v46 = v50;
            if (v32)
            {
              v33 = (char *)TInlineBufferAllocator<unsigned short,30ul>::allocate((uint64_t)v50, v32);
              v28 = (void **)v47;
              v13 = v48;
            }
            else
            {
              v33 = 0;
            }
            v34 = &v33[2 * v30];
            *(_WORD *)v34 = v26;
            if (v13 == (char *)v28)
            {
              v36 = &v33[2 * v30];
            }
            else
            {
              v35 = v13;
              v36 = &v33[2 * v30];
              do
              {
                v37 = *((_WORD *)v35 - 1);
                v35 -= 2;
                *((_WORD *)v36 - 1) = v37;
                v36 -= 2;
              }
              while (v35 != (char *)v28);
            }
            v27 = v34 + 2;
            v47 = v36;
            v48 = v34 + 2;
            v38 = v49;
            v49 = &v33[2 * v32];
            v44 = v13;
            v45 = v38;
            v42 = (void (**)(TDataReference *__hidden))v28;
            v43 = v28;
            std::__split_buffer<unsigned short,TInlineBufferAllocator<unsigned short,30ul> &>::~__split_buffer((uint64_t)&v42);
            v13 = v27;
          }
          else
          {
            *(_WORD *)v13 = v26;
            v13 += 2;
            v27 = v13;
          }
          v48 = v27;
        }
        v11 += 8;
      }
      while (v11 != v12);
    }
    if (v47 != v13)
    {
      v39 = v47 + 2;
      while (v39 != v13)
      {
        v40 = *(unsigned __int16 *)v39;
        v41 = *((unsigned __int16 *)v39 - 1);
        v39 += 2;
        if (v40 < v41)
        {
          LOBYTE(v42) = -86;
          std::__sort<std::__less<unsigned short,unsigned short> &,unsigned short *>();
          break;
        }
      }
    }
    TsfntTable::TsfntTable((TsfntTable *)&v42, a1, 1851878757);
    v42 = &off_1E6179520;
    TnameTable::GetNames((TnameTable *)&v42, (const unsigned __int16 *)v47, (v48 - v47) >> 1, a3);
    v42 = &off_1E6176770;
    TDataReference::DucRefCount((TDataReference *)&v42);
    v42 = (void (**)(TDataReference *__hidden))&v47;
    std::vector<unsigned short,TInlineBufferAllocator<unsigned short,30ul>>::__destroy_vector::operator()[abi:fe180100]((void ***)&v42);
  }
  else
  {
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_DWORD *)(a3 + 32) = 1065353216;
  }
}

void sub_1B099B000(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

char **std::vector<unsigned short,TInlineBufferAllocator<unsigned short,30ul>>::reserve(char **result, unint64_t a2)
{
  char **v3;
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  __int16 v10;
  char *v11;
  _QWORD v12[5];

  if (a2 > (result[2] - *result) >> 1)
  {
    v3 = result;
    if ((a2 & 0x8000000000000000) != 0)
      std::vector<char,TInlineBufferAllocator<char,1024ul>>::__throw_length_error[abi:fe180100]();
    v4 = result[1] - *result;
    v12[4] = result + 3;
    v5 = (char *)TInlineBufferAllocator<unsigned short,30ul>::allocate((uint64_t)(result + 3), a2);
    v7 = *v3;
    v6 = v3[1];
    v8 = &v5[v4 & 0xFFFFFFFFFFFFFFFELL];
    if (v6 != *v3)
    {
      v9 = v3[1];
      v8 = &v5[v4 & 0xFFFFFFFFFFFFFFFELL];
      do
      {
        v10 = *((_WORD *)v9 - 1);
        v9 -= 2;
        *((_WORD *)v8 - 1) = v10;
        v8 -= 2;
      }
      while (v9 != v7);
    }
    *v3 = v8;
    v3[1] = &v5[v4 & 0xFFFFFFFFFFFFFFFELL];
    v11 = v3[2];
    v3[2] = &v5[2 * a2];
    v12[2] = v6;
    v12[3] = v11;
    v12[0] = v7;
    v12[1] = v7;
    return (char **)std::__split_buffer<unsigned short,TInlineBufferAllocator<unsigned short,30ul> &>::~__split_buffer((uint64_t)v12);
  }
  return result;
}

uint64_t TSFNTFont::GetLongGlyphsPerCharacters(TSFNTFont *this, const unsigned __int16 *a2, unsigned int *a3, unsigned int a4)
{
  __int128 v6;
  uint64_t v7;
  _OWORD v9[4];
  __int128 v10;
  unint64_t v11;
  unsigned int v12;

  v12 = a4;
  v11 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v6 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v9[3] = v6;
  v10 = v6;
  v9[1] = v6;
  v9[2] = v6;
  v9[0] = v6;
  TcmapUnicodeTable::TcmapUnicodeTable((TcmapUnicodeTable *)v9, this);
  if ((_QWORD)v10)
  {
    TcmapUnicodeTable::MapGlyphs<unsigned int>((uint64_t)v9, (uint64_t)a2, a3, &v12);
    v7 = v12;
    *(_QWORD *)&v9[0] = &off_1E6176770;
    TDataReference::DucRefCount((TDataReference *)v9);
  }
  else
  {
    *(_QWORD *)&v9[0] = &off_1E6176770;
    TDataReference::DucRefCount((TDataReference *)v9);
    return 0;
  }
  return v7;
}

void sub_1B099B1BC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  TcmapUnicodeTable::~TcmapUnicodeTable((TcmapUnicodeTable *)&a9);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B099B19CLL);
}

uint64_t TSFNTFont::GetGlyphsForCharacterRange(TSFNTFont *this, unsigned __int16 *a2, CFRange a3)
{
  CFIndex length;
  CFIndex location;
  uint64_t v6;
  _QWORD v8[11];
  CFRange v9;

  length = a3.length;
  location = a3.location;
  TcmapUnicodeTable::TcmapUnicodeTable((TcmapUnicodeTable *)v8, this);
  v9.location = location;
  v9.length = length;
  v6 = TcmapUnicodeTable::MapRange((TcmapUnicodeTable *)v8, v9, a2);
  v8[0] = &off_1E6176770;
  TDataReference::DucRefCount((TDataReference *)v8);
  return v6;
}

void sub_1B099B258(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  TcmapUnicodeTable::~TcmapUnicodeTable((TcmapUnicodeTable *)va);
  _Unwind_Resume(a1);
}

uint64_t TSFNTFont::GetLongGlyphsForCharacterRange(TSFNTFont *this, unsigned int *a2, CFRange a3)
{
  CFIndex length;
  CFIndex location;
  uint64_t v6;
  _QWORD v8[11];
  CFRange v9;

  length = a3.length;
  location = a3.location;
  TcmapUnicodeTable::TcmapUnicodeTable((TcmapUnicodeTable *)v8, this);
  v9.location = location;
  v9.length = length;
  v6 = TcmapUnicodeTable::MapRange((TcmapUnicodeTable *)v8, v9, a2);
  v8[0] = &off_1E6176770;
  TDataReference::DucRefCount((TDataReference *)v8);
  return v6;
}

void sub_1B099B2E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  TcmapUnicodeTable::~TcmapUnicodeTable((TcmapUnicodeTable *)va);
  _Unwind_Resume(a1);
}

unint64_t TSFNTFont::GetGlyphToUnicodeMap(TSFNTFont *this, const __CFDictionary **a2)
{
  unsigned int v4;
  unsigned int *v5;
  unsigned int *v6;
  __CFDictionary *Mutable;
  __int128 v8;
  unsigned int *v9;
  unint64_t *v10;
  unint64_t *v12;
  const __CFDictionary *v14;
  _OWORD v16[4];
  __int128 v17;
  unint64_t v18;

  if ((*((_BYTE *)this + 136) & 1) != 0)
    goto LABEL_21;
  v4 = (*(uint64_t (**)(TSFNTFont *))(*(_QWORD *)this + 168))(this);
  v5 = (unsigned int *)operator new[]();
  v6 = v5;
  if (v4)
    memset(v5, 255, 4 * v4);
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, MEMORY[0x1E0C9B3A0]);
  v18 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v8 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v16[3] = v8;
  v17 = v8;
  v16[1] = v8;
  v16[2] = v8;
  v16[0] = v8;
  TcmapUnicodeTable::TcmapUnicodeTable((TcmapUnicodeTable *)v16, this);
  if ((_QWORD)v17)
  {
    v9 = TcmapUnicodeTable::FillInverseMap((void (****)(TcmapTableFileData32 *__hidden))v16, v6, Mutable, v4);
    *(_QWORD *)&v16[0] = &off_1E6176770;
    TDataReference::DucRefCount((TDataReference *)v16);
    if (v9)
    {
      v10 = (unint64_t *)((char *)this + 144);
      while (!__ldaxr(v10))
      {
        if (!__stlxr((unint64_t)v9, v10))
          goto LABEL_13;
      }
      __clrex();
      MEMORY[0x1B5E0CD14](v6, 0x1000C8052888210);
LABEL_13:
      v12 = (unint64_t *)((char *)this + 152);
      while (!__ldaxr(v12))
      {
        if (!__stlxr((unint64_t)Mutable, v12))
          goto LABEL_20;
      }
      __clrex();
      goto LABEL_18;
    }
  }
  else
  {
    *(_QWORD *)&v16[0] = &off_1E6176770;
    TDataReference::DucRefCount((TDataReference *)v16);
  }
  MEMORY[0x1B5E0CD14](v6, 0x1000C8052888210);
LABEL_18:
  if (Mutable)
    CFRelease(Mutable);
LABEL_20:
  atomic_store(1u, (unsigned __int8 *)this + 136);
LABEL_21:
  if (a2)
  {
    v14 = (const __CFDictionary *)atomic_load((unint64_t *)this + 19);
    *a2 = v14;
  }
  return atomic_load((unint64_t *)this + 18);
}

void sub_1B099B4D0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  TcmapUnicodeTable::~TcmapUnicodeTable((TcmapUnicodeTable *)&a9);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B099B41CLL);
}

__CFCharacterSet *TSFNTFont::FillCharacterSet(TSFNTFont *this, __CFCharacterSet *a2, unsigned int a3)
{
  unint64_t v6;
  __int128 v7;
  char v8;
  __CFCharacterSet *v9;
  unsigned int *GlyphToUnicodeMap;
  const __CFDictionary *v11;
  uint64_t v12;
  CFIndex v13;
  unsigned int v14;
  unsigned int RangeBit;
  unint64_t *v16;
  CFDictionaryRef theDict;
  _OWORD context[4];
  __int128 v21;
  unint64_t v22;
  CFRange v23;

  v6 = operator new();
  *(_QWORD *)(v6 + 8) = 0;
  *(_QWORD *)(v6 + 16) = 0;
  *(_QWORD *)v6 = &off_1E6179378;
  *(_DWORD *)(v6 + 24) = 0;
  v22 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v7 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  context[3] = v7;
  v21 = v7;
  context[1] = v7;
  context[2] = v7;
  context[0] = v7;
  TcmapUnicodeTable::TcmapUnicodeTable((TcmapUnicodeTable *)context, this);
  if (!(_QWORD)v21)
  {
    *(_QWORD *)&context[0] = &off_1E6176770;
    TDataReference::DucRefCount((TDataReference *)context);
    v9 = 0;
    goto LABEL_5;
  }
  v8 = TcmapUnicodeTable::FillCharacterSet((TFormat14UVSTable **)context, a2, a3, (TOS2UnicodeRanges *)v6);
  *(_QWORD *)&context[0] = &off_1E6176770;
  TDataReference::DucRefCount((TDataReference *)context);
  v9 = a2;
  if ((v8 & 1) == 0)
  {
LABEL_5:
    theDict = (CFDictionaryRef)0xAAAAAAAAAAAAAAAALL;
    GlyphToUnicodeMap = (unsigned int *)TSFNTFont::GetGlyphToUnicodeMap(this, &theDict);
    if (GlyphToUnicodeMap && (v11 = theDict) != 0)
    {
      if (a3)
      {
        v12 = a3;
        do
        {
          v14 = *GlyphToUnicodeMap++;
          v13 = v14;
          if (a2 && WORD1(v13) <= 0x10u)
          {
            v23.location = v13;
            v23.length = 1;
            CFCharacterSetAddCharactersInRange(a2, v23);
          }
          RangeBit = TOS2UnicodeRanges::GetRangeBit((TOS2UnicodeRanges *)v6, v13);
          if (RangeBit != -1)
            *(_DWORD *)(v6 + 4 * (RangeBit >> 5) + 8) |= 1 << RangeBit;
          --v12;
        }
        while (v12);
        v11 = theDict;
      }
      *(_QWORD *)&context[0] = a2;
      *((_QWORD *)&context[0] + 1) = v6;
      CFDictionaryApplyFunction(v11, (CFDictionaryApplierFunction)TSFNTFont::FillCharacterSet(__CFCharacterSet *,unsigned int)const::$_0::__invoke, context);
    }
    else
    {
      a2 = v9;
    }
  }
  v16 = (unint64_t *)((char *)this + 176);
  if (!HIWORD(a3))
    v16 = (unint64_t *)((char *)this + 168);
  while (!__ldaxr(v16))
  {
    if (!__stlxr(v6, v16))
      return a2;
  }
  __clrex();
  (*(void (**)(unint64_t))(*(_QWORD *)v6 + 8))(v6);
  return a2;
}

void sub_1B099B6DC(void *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B099B6B8);
}

__CFCharacterSet *TSFNTFont::CopyCharacterSet(TSFNTFont *this, unsigned int a2)
{
  __CFCharacterSet *Mutable;

  Mutable = CFCharacterSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00]);
  return TSFNTFont::FillCharacterSet(this, Mutable, a2);
}

__CFCharacterSet *TSFNTFont::GetOS2UnicodeRanges(__CFCharacterSet *this, unsigned int a2, unsigned int *a3, __n128 a4)
{
  uint64_t v5;
  unint64_t *v6;
  _DWORD *v7;
  TSFNTFont *v8;
  unsigned int v9;
  unsigned int v10;

  v5 = 168;
  if (HIWORD(a2))
    v5 = 176;
  v6 = (unint64_t *)((char *)this + v5);
  v7 = (_DWORD *)atomic_load((unint64_t *)((char *)this + v5));
  if (v7
    || ((v8 = this,
         v9 = (*(uint64_t (**)(__CFCharacterSet *, __n128))(*(_QWORD *)this + 168))(this, a4),
         v9 >= 0xFFFF)
      ? (v10 = 0xFFFF)
      : (v10 = v9),
        this = TSFNTFont::FillCharacterSet(v8, 0, v10),
        (v7 = (_DWORD *)atomic_load(v6)) != 0))
  {
    *a3 = v7[2];
    a3[1] = v7[3];
    a3[2] = v7[4];
    a3[3] = v7[5];
  }
  else
  {
    *(_QWORD *)a3 = 0;
    *((_QWORD *)a3 + 1) = 0;
  }
  return this;
}

unint64_t TSFNTFont::GetCharactersForGlyph(TSFNTFont *this, unsigned __int16 a2, unsigned __int16 *a3, unint64_t a4)
{
  unint64_t CharacterForGlyphUsingMap;
  unint64_t GlyphToUnicodeMap;
  unsigned int *v10;
  __int128 v11;
  __CFDictionary *v12;
  unsigned int v13;
  __int128 v14;
  uint64_t v15;
  __CFDictionary *v16;
  unsigned int v17;
  _OWORD v19[5];
  unint64_t v20;
  _OWORD v21[4];
  __int128 v22;
  unint64_t v23;
  __CFDictionary *v24;

  if ((*(unsigned int (**)(TSFNTFont *, uint64_t))(*(_QWORD *)this + 472))(this, 1516335206))
  {
    TzapfTable::TzapfTable((TzapfTable *)v21, this);
    CharacterForGlyphUsingMap = TzapfTable::MapToCharacters((TzapfTable *)v21, a2, a3, a4);
    *(_QWORD *)&v21[0] = &off_1E6176770;
    TDataReference::DucRefCount((TDataReference *)v21);
  }
  else
  {
    v24 = (__CFDictionary *)0xAAAAAAAAAAAAAAAALL;
    GlyphToUnicodeMap = TSFNTFont::GetGlyphToUnicodeMap(this, &v24);
    if (GlyphToUnicodeMap && v24)
    {
      v10 = (unsigned int *)GlyphToUnicodeMap;
      v23 = 0xAAAAAAAAAAAAAAAALL;
      *(_QWORD *)&v11 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v11 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v21[3] = v11;
      v22 = v11;
      v21[1] = v11;
      v21[2] = v11;
      v21[0] = v11;
      TcmapUnicodeTable::TcmapUnicodeTable((TcmapUnicodeTable *)v21, this);
      if ((_QWORD)v22)
      {
        v12 = v24;
        v13 = (*(uint64_t (**)(TSFNTFont *))(*(_QWORD *)this + 168))(this);
        CharacterForGlyphUsingMap = GetCharacterForGlyphUsingMap(v10, v12, v13, (void *)a2, a3, a4);
      }
      else
      {
        v20 = 0xAAAAAAAAAAAAAAAALL;
        *(_QWORD *)&v14 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v14 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v19[3] = v14;
        v19[4] = v14;
        v19[1] = v14;
        v19[2] = v14;
        v19[0] = v14;
        v15 = (*(uint64_t (**)(TSFNTFont *))(*(_QWORD *)this + 440))(this);
        TcmapEncodingTable::TcmapEncodingTable((uint64_t)v19, this, v15);
        v16 = v24;
        v17 = (*(uint64_t (**)(TSFNTFont *))(*(_QWORD *)this + 168))(this);
        CharacterForGlyphUsingMap = GetCharacterForGlyphUsingMap(v10, v16, v17, (void *)a2, a3, a4);
        *(_QWORD *)&v19[0] = &off_1E6176770;
        TDataReference::DucRefCount((TDataReference *)v19);
      }
      *(_QWORD *)&v21[0] = &off_1E6176770;
      TDataReference::DucRefCount((TDataReference *)v21);
    }
    else
    {
      return 0;
    }
  }
  return CharacterForGlyphUsingMap;
}

uint64_t TSFNTFont::GetNumberOfGlyphs(TSFNTFont *this)
{
  uint64_t NumGlyphs;
  _QWORD v4[7];

  NumGlyphs = *((unsigned int *)this + 33);
  if (!(_DWORD)NumGlyphs)
  {
    TsfntTable::TsfntTable((TsfntTable *)v4, this, 1835104368);
    v4[0] = &off_1E6179438;
    NumGlyphs = TmaxpTable::GetNumGlyphs((TmaxpTable *)v4);
    v4[0] = &off_1E6176770;
    TDataReference::DucRefCount((TDataReference *)v4);
    *((_DWORD *)this + 33) = NumGlyphs;
  }
  return NumGlyphs;
}

void sub_1B099BAAC(void *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  TmaxpTable::~TmaxpTable((TmaxpTable *)va);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B099BA94);
}

uint64_t TSFNTFont::GetMaxAdvance(TSFNTFont *this)
{
  uint64_t Hhea;
  uint64_t v2;
  _QWORD v4[10];

  ThmtxTable::ThmtxTable((uint64_t)v4, this, 0);
  Hhea = ThmtxTable::GetHhea((ThmtxTable *)v4);
  if (Hhea)
    v2 = bswap32(*(unsigned __int16 *)(Hhea + 10)) >> 16;
  else
    v2 = 0;
  v4[0] = &off_1E6176770;
  TDataReference::DucRefCount((TDataReference *)v4);
  return v2;
}

void sub_1B099BB44(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  ThmtxTable::~ThmtxTable((ThmtxTable *)&a9);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B099BB2CLL);
}

uint64_t TSFNTFont::GetStemH(TSFNTFont *this)
{
  return 0;
}

uint64_t TSFNTFont::GetStemV(TSFNTFont *this)
{
  return 0;
}

void TSFNTFont::GetCaretInfo(TSFNTFont *this, __int16 *a2, __int16 *a3, unsigned __int16 *a4)
{
  _QWORD v7[10];

  ThmtxTable::ThmtxTable((uint64_t)v7, this, 0);
  ThmtxTable::GetCaretInfo((ThmtxTable *)v7, a2, a3, a4);
  v7[0] = &off_1E6176770;
  TDataReference::DucRefCount((TDataReference *)v7);
}

void sub_1B099BBF0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _WORD *v9;
  _WORD *v10;
  _WORD *v11;

  ThmtxTable::~ThmtxTable((ThmtxTable *)&a9);
  __cxa_begin_catch(a1);
  *v11 = 1;
  *v10 = 0;
  *v9 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B099BBD8);
}

unsigned __int16 *ThmtxTable::GetCaretInfo(ThmtxTable *this, __int16 *a2, __int16 *a3, unsigned __int16 *a4)
{
  unsigned __int16 *result;
  unsigned int v8;

  result = (unsigned __int16 *)ThmtxTable::GetHhea(this);
  if (result)
  {
    *a2 = bswap32(result[9]) >> 16;
    *a3 = bswap32(result[10]) >> 16;
    v8 = bswap32(result[11]) >> 16;
  }
  else
  {
    LOWORD(v8) = 0;
    *a2 = 1;
    *a3 = 0;
  }
  *a4 = v8;
  return result;
}

void TSFNTFont::GetBounds(TSFNTFont *this, double *a2, double *a3, double *a4, double *a5)
{
  _QWORD v9[7];

  TheadTable::TheadTable((TheadTable *)v9, this);
  TheadTable::GetBounds((TheadTable *)v9, a2, a3, a4, a5);
  v9[0] = &off_1E6176770;
  TDataReference::DucRefCount((TDataReference *)v9);
}

void sub_1B099BD1C(void *a1, uint64_t a2, ...)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  va_list va;

  va_start(va, a2);
  TheadTable::~TheadTable((TheadTable *)va);
  __cxa_begin_catch(a1);
  *v5 = 0;
  *v4 = 0;
  *v3 = 0;
  *v2 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B099BD00);
}

uint64_t TSFNTFont::GetUnderlinePosition(TSFNTFont *this)
{
  unsigned int v1;
  _BYTE v3[64];

  TpostTable::TpostTable((TpostTable *)v3, this);
  v1 = bswap32(*(unsigned __int16 *)(TpostTable::GetPost((TpostTable *)v3) + 8)) >> 16;
  TpostTable::~TpostTable((TpostTable *)v3);
  return (__int16)v1;
}

void sub_1B099BD9C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  TpostTable::~TpostTable((TpostTable *)&a9);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B099BD88);
}

uint64_t TSFNTFont::GetUnderlineThickness(TSFNTFont *this)
{
  uint64_t v1;
  _BYTE v3[64];

  TpostTable::TpostTable((TpostTable *)v3, this);
  v1 = bswap32(*(unsigned __int16 *)(TpostTable::GetPost((TpostTable *)v3) + 10)) >> 16;
  TpostTable::~TpostTable((TpostTable *)v3);
  return v1;
}

void sub_1B099BE10(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  TpostTable::~TpostTable((TpostTable *)&a9);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B099BDFCLL);
}

BOOL TSFNTFont::IsMonospaced(TSFNTFont *this)
{
  _BOOL8 v1;
  _BYTE v3[64];

  TpostTable::TpostTable((TpostTable *)v3, this);
  v1 = *(_DWORD *)(TpostTable::GetPost((TpostTable *)v3) + 12) != 0;
  TpostTable::~TpostTable((TpostTable *)v3);
  return v1;
}

void sub_1B099BE84(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  TpostTable::~TpostTable((TpostTable *)&a9);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B099BE70);
}

BOOL TsfntTable::operator BOOL(TsfntTable *a1)
{
  uint64_t v1;
  unint64_t TableEnd;
  uint64_t v4;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1 || !*(_QWORD *)(v1 + 8))
    return 0;
  TableEnd = TsfntTable::GetTableEnd(a1);
  v4 = *((_QWORD *)a1 + 1);
  if (v4)
  {
    v4 = *(_QWORD *)(v4 + 8);
    if (v4)
      v4 += *((_QWORD *)a1 + 2);
  }
  return TableEnd != v4;
}

void TSFNTFont::GetGlyphName(TSFNTFont *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  __int128 v5;
  uint64_t v6;
  _BYTE v7[64];

  *(_QWORD *)&v5 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)(a3 + 32) = v5;
  *(_OWORD *)(a3 + 48) = v5;
  *(_OWORD *)a3 = v5;
  *(_OWORD *)(a3 + 16) = v5;
  TpostTable::TpostTable((TpostTable *)v7, this);
  TpostTable::GetGlyphName((TpostTable *)v7, a2, a3);
  TpostTable::~TpostTable((TpostTable *)v7);
  if (!*(_QWORD *)(a3 + 8))
  {
    v6 = *(_QWORD *)(a3 + 40);
    if (!v6 || !*(_QWORD *)(v6 + 8))
    {
      TStringRef::~TStringRef((void **)a3);
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)a3 = &off_1E61768F8;
      *(_BYTE *)(a3 + 24) = 0;
      *(_QWORD *)(a3 + 32) = &off_1E6176770;
      *(_QWORD *)(a3 + 40) = 0;
      *(_QWORD *)(a3 + 48) = 0;
      *(_QWORD *)(a3 + 56) = 0;
    }
  }
}

void sub_1B099BFA4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  TpostTable::~TpostTable((TpostTable *)&a9);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B099BF6CLL);
}

uint64_t TSFNTFont::VerifyGlyphName(TSFNTFont *this, uint64_t a2, const char *a3)
{
  uint64_t v5;
  _BYTE v7[64];

  TpostTable::TpostTable((TpostTable *)v7, this);
  v5 = TpostTable::VerifyGlyphName((TpostTable *)v7, a2, a3);
  TpostTable::~TpostTable((TpostTable *)v7);
  return v5;
}

void sub_1B099C01C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  TpostTable::~TpostTable((TpostTable *)&a9);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B099C008);
}

uint64_t TSFNTFont::GetRegistryOrderingSupplementFromCIDG(os_unfair_lock_s *this, TStringRef *a2, TStringRef *a3, unsigned int *a4)
{
  uint64_t CIDGTable;
  uint64_t result;
  char *v9;
  size_t v10;
  void (**v11)(TStringRef *__hidden);
  char *v12;
  size_t v13;
  char v14;
  void (**v15)(TDataReference *__hidden);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;

  v19 = 0xAAAAAAAAAAAAAAAALL;
  CIDGTable = TSFNTFont::GetCIDGTable(this, &v19);
  result = 0;
  if (CIDGTable && v19 >= 0x90)
  {
    if (*(_WORD *)CIDGTable)
    {
      return 0;
    }
    else
    {
      v12 = strndup((const char *)(CIDGTable + 10), 0x40uLL);
      v13 = strnlen((const char *)(CIDGTable + 10), 0x40uLL);
      v11 = &off_1E61768F8;
      v14 = 1;
      v15 = &off_1E6176770;
      v16 = 0;
      v17 = 0;
      v18 = 0;
      TStringRef::operator=((uint64_t)a2, (uint64_t)&v11);
      TStringRef::~TStringRef((void **)&v11);
      v9 = strndup((const char *)(CIDGTable + 76), 0x40uLL);
      v10 = strnlen((const char *)(CIDGTable + 76), 0x40uLL);
      v12 = v9;
      v13 = v10;
      v11 = &off_1E61768F8;
      v14 = 1;
      v15 = &off_1E6176770;
      v16 = 0;
      v17 = 0;
      v18 = 0;
      TStringRef::operator=((uint64_t)a3, (uint64_t)&v11);
      TStringRef::~TStringRef((void **)&v11);
      *a4 = bswap32(*(unsigned __int16 *)(CIDGTable + 140)) >> 16;
      return 1;
    }
  }
  return result;
}

void sub_1B099C17C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  TStringRef::~TStringRef((void **)va);
  _Unwind_Resume(a1);
}

uint64_t TSFNTFont::GetCIDGTable(os_unfair_lock_s *this, unint64_t *a2)
{
  os_unfair_lock_s *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (**v10)(TDataReference *__hidden);
  uint64_t v11;
  __int128 v12;

  v4 = this + 22;
  os_unfair_lock_lock(this + 22);
  if (!LOBYTE(this[32]._os_unfair_lock_opaque))
  {
    TSFNTFont::GetTable((TSFNTFont *)this, 1667851367, 0, &v10);
    if (&this[24] != (os_unfair_lock_s *)&v10)
    {
      TDataReference::DucRefCount((TDataReference *)&this[24]);
      v5 = v11;
      v11 = 0;
      *(_QWORD *)&this[26]._os_unfair_lock_opaque = v5;
      *(_OWORD *)&this[28]._os_unfair_lock_opaque = v12;
    }
    v10 = &off_1E6176770;
    TDataReference::DucRefCount((TDataReference *)&v10);
    LOBYTE(this[32]._os_unfair_lock_opaque) = 1;
  }
  *a2 = *(_QWORD *)&this[30]._os_unfair_lock_opaque - *(_QWORD *)&this[28]._os_unfair_lock_opaque;
  v6 = *(_QWORD *)&this[26]._os_unfair_lock_opaque;
  if (v6 && (v7 = *(_QWORD *)(v6 + 8)) != 0)
    v8 = v7 + *(_QWORD *)&this[28]._os_unfair_lock_opaque;
  else
    v8 = 0;
  os_unfair_lock_unlock(v4);
  return v8;
}

void sub_1B099C270(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  os_unfair_lock_s *v9;

  TDataReference::~TDataReference((TDataReference *)&a9);
  os_unfair_lock_unlock(v9);
  _Unwind_Resume(a1);
}

BOOL TSFNTFont::GetGlyphsForCIDs(TSFNTFont *this, const unsigned __int16 *a2, uint64_t a3, unsigned __int16 *a4)
{
  const char *v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  _BOOL8 v13;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  int GlyphForCID;
  _QWORD v21[3];
  int v22;
  void (**v23)(TStringRef *__hidden);
  const char *v24;
  uint64_t v25;
  unint64_t v26;
  void (**v27)(TDataReference *__hidden);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (**v31)(TStringRef *__hidden);
  const char *v32;
  uint64_t v33;
  unint64_t v34;
  void (**v35)(TDataReference *__hidden);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v33 = 0;
  v34 = 0xAAAAAAAAAAAAAA00;
  v31 = &off_1E61768F8;
  v32 = 0;
  v35 = &off_1E6176770;
  v36 = 0;
  v37 = 0;
  v38 = 0;
  v25 = 0;
  v26 = 0xAAAAAAAAAAAAAA00;
  v23 = &off_1E61768F8;
  v24 = 0;
  v27 = &off_1E6176770;
  v28 = 0;
  v29 = 0;
  v30 = 0;
  v22 = -1431655766;
  (*(void (**)(TSFNTFont *, void (***)(TStringRef *__hidden), void (***)(TStringRef *__hidden), int *))(*(_QWORD *)this + 360))(this, &v31, &v23, &v22);
  v8 = v32;
  if (!v32)
  {
    if (v36 && (v9 = *(_QWORD *)(v36 + 8)) != 0)
      v8 = (const char *)(v9 + v37);
    else
      v8 = 0;
  }
  v10 = v24;
  if (!v24)
  {
    if (v28 && (v11 = *(_QWORD *)(v28 + 8)) != 0)
      v10 = (const char *)(v11 + v29);
    else
      v10 = 0;
  }
  v12 = DetermineROS(v8, v10);
  if ((v12 & 0xFF00000000) != 0
    && (v12 & 0xFFFFFFFC) == 0
    && (v15 = 8 * (int)v12,
        v16 = *(_QWORD *)&aLv[v15],
        v17 = *(uint64_t *)((char *)&off_1E61B4A28 + v15),
        v21[1] = off_1E61B4A48[v15 / 8],
        v21[2] = v16,
        v21[0] = v17,
        a3))
  {
    v18 = 0;
    do
    {
      v19 = *a2++;
      GlyphForCID = GetGlyphForCID((uint64_t)this, (uint64_t)v21, v19);
      *a4++ = GlyphForCID;
      if (GlyphForCID)
        ++v18;
      --a3;
    }
    while (a3);
    v13 = v18 != 0;
  }
  else
  {
    v13 = 0;
  }
  TStringRef::~TStringRef((void **)&v23);
  TStringRef::~TStringRef((void **)&v31);
  return v13;
}

void sub_1B099C420(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  void *v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, void *);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  TStringRef::~TStringRef((void **)va);
  TStringRef::~TStringRef((void **)va1);
  _Unwind_Resume(a1);
}

uint64_t GetGlyphForCID(uint64_t a1, uint64_t a2, unsigned int a3)
{
  const char *v4;
  int v5;
  size_t v6;
  unint64_t v7;
  uint64_t v9;
  __int16 v10;
  unint64_t v11;
  __int16 v12;
  __int16 v13;
  int v14;
  unsigned int v16;
  unsigned int v17;
  UChar32 v18;
  int v20;
  BOOL v21;
  int v22;
  uint64_t result;
  int v24;
  unint64_t v25;
  _QWORD v26[2];

  v26[1] = *MEMORY[0x1E0C80C00];
  v26[0] = 0xAAAAAAAAAAAAAAAALL;
  if (*(unsigned __int16 *)(a2 + 16) <= a3)
    return 0;
  v4 = (const char *)(*(_QWORD *)a2 + 4 * a3);
  v5 = *v4;
  if (v5 < 0)
  {
    v4 = (const char *)(*(_QWORD *)(a2 + 8) + bswap32(*(_DWORD *)v4 & 0xFFFFFF7F));
    v6 = strlen(v4);
    LOBYTE(v5) = *v4;
  }
  else
  {
    v6 = 4 * (v5 != 0);
  }
  v7 = 16;
  if (v6 < 0x10)
    v7 = v6;
  if (!(_BYTE)v5 || v7 == 0)
    return 0;
  v9 = 0;
  v10 = 0;
  v11 = 1;
  do
  {
    v12 = (char)v5;
    if ((v5 - 48) >= 0xAu)
    {
      if (((char)v5 - 65) >= 6)
      {
        if (((char)v5 - 97) > 5)
          return 0;
        v13 = -87;
      }
      else
      {
        v13 = -55;
      }
    }
    else
    {
      v13 = -48;
    }
    v10 = v12 + 16 * v10 + v13;
    if ((v11 & 3) == 0)
      *((_WORD *)v26 + v9++) = v10;
    if (v11 >= v7)
      break;
    v5 = v4[v11++];
  }
  while (v5);
  if (!(_DWORD)v9)
    return 0;
  if ((WORD1(v26[0]) & 0xFC00) == 0xDC00)
    v14 = 2;
  else
    v14 = 1;
  if ((v26[0] & 0xFC00) != 0xD800 || (_DWORD)v9 == 1)
    v16 = 1;
  else
    v16 = v14;
  if (v16 == (_DWORD)v9)
    goto LABEL_44;
  v17 = v16 + 1;
  v18 = *((unsigned __int16 *)v26 + v16);
  if ((v18 & 0xFC00) == 0xD800 && v17 != (_DWORD)v9)
  {
    v20 = *((unsigned __int16 *)v26 + v17);
    v21 = (v20 & 0xFC00) == 56320;
    v22 = v20 + (v18 << 10) - 56613888;
    if (v21)
      v17 = v16 + 2;
    else
      v17 = v16 + 1;
    if (v21)
      v18 = v22;
  }
  result = u_hasBinaryProperty(v18, UCHAR_VARIATION_SELECTOR);
  LODWORD(v9) = v17;
  if ((_DWORD)result)
  {
LABEL_44:
    v25 = 0xAAAAAAAAAAAAAAAALL;
    v24 = v9;
    (*(void (**)(uint64_t, _QWORD *, unint64_t *, int *, _QWORD))(*(_QWORD *)a1 + 120))(a1, v26, &v25, &v24, 0);
    if (v24 == (_DWORD)v9)
      return (unsigned __int16)v25;
    return 0;
  }
  return result;
}

BOOL TSFNTFont::GetCIDsForGlyphs(TSFNTFont *this, const unsigned __int16 *a2, uint64_t a3, unsigned __int16 *a4)
{
  const char *v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  _BOOL8 v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  unint64_t *v19;
  unsigned __int16 *v20;
  int v21;
  unsigned __int16 v22;
  int GlyphForCID;
  unint64_t v24;
  uint64_t i;
  uint64_t v26;
  unsigned int v27;
  int v28;
  _QWORD v30[2];
  uint64_t v31;
  int v32;
  void (**v33)(TStringRef *__hidden);
  const char *v34;
  uint64_t v35;
  unint64_t v36;
  void (**v37)(TDataReference *__hidden);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (**v41)(TStringRef *__hidden);
  const char *v42;
  uint64_t v43;
  unint64_t v44;
  void (**v45)(TDataReference *__hidden);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v43 = 0;
  v44 = 0xAAAAAAAAAAAAAA00;
  v41 = &off_1E61768F8;
  v42 = 0;
  v45 = &off_1E6176770;
  v46 = 0;
  v47 = 0;
  v48 = 0;
  v35 = 0;
  v36 = 0xAAAAAAAAAAAAAA00;
  v33 = &off_1E61768F8;
  v34 = 0;
  v37 = &off_1E6176770;
  v38 = 0;
  v39 = 0;
  v40 = 0;
  v32 = -1431655766;
  (*(void (**)(TSFNTFont *, void (***)(TStringRef *__hidden), void (***)(TStringRef *__hidden), int *))(*(_QWORD *)this + 360))(this, &v41, &v33, &v32);
  v8 = v42;
  if (!v42)
  {
    if (v46 && (v9 = *(_QWORD *)(v46 + 8)) != 0)
      v8 = (const char *)(v9 + v47);
    else
      v8 = 0;
  }
  v10 = v34;
  if (!v34)
  {
    if (v38 && (v11 = *(_QWORD *)(v38 + 8)) != 0)
      v10 = (const char *)(v11 + v39);
    else
      v10 = 0;
  }
  v12 = DetermineROS(v8, v10);
  if ((v12 & 0xFF00000000) != 0 && (v12 & 0xFFFFFFFC) == 0)
  {
    v14 = 8 * (int)v12;
    v15 = *(_QWORD *)&aLv[v14];
    v16 = *(uint64_t *)((char *)&off_1E61B4A28 + v14);
    v30[1] = off_1E61B4A48[v14 / 8];
    v31 = v15;
    v30[0] = v16;
    v17 = (*(uint64_t (**)(TSFNTFont *))(*(_QWORD *)this + 168))(this);
    if (v17 >= 0xFFFF)
      v18 = 0xFFFF;
    else
      v18 = v17;
    v19 = (unint64_t *)((char *)this + 160);
    v20 = (unsigned __int16 *)atomic_load((unint64_t *)this + 20);
    if (!v20)
    {
      v20 = (unsigned __int16 *)operator new[]();
      bzero(v20, 2 * v18);
      v21 = (unsigned __int16)v31;
      if ((unsigned __int16)v31 != 1)
      {
        v22 = 1;
        do
        {
          GlyphForCID = GetGlyphForCID((uint64_t)this, (uint64_t)v30, v22);
          if (GlyphForCID && !v20[GlyphForCID])
            v20[GlyphForCID] = v22 + 1;
          ++v22;
        }
        while (v21 != v22);
      }
      while (1)
      {
        v24 = __ldaxr(v19);
        if (v24)
          break;
        if (!__stlxr((unint64_t)v20, v19))
          goto LABEL_28;
      }
      __clrex();
      MEMORY[0x1B5E0CD14](v20, 0x1000C80BDFB0063);
      v20 = (unsigned __int16 *)v24;
    }
LABEL_28:
    for (i = 0; a3; --a3)
    {
      *a4 = -1;
      v27 = *a2++;
      v26 = v27;
      if (v27 < v18)
      {
        v28 = v20[v26];
        if (v28)
        {
          *a4 = v28 - 1;
          ++i;
        }
      }
      ++a4;
    }
    v13 = i != 0;
  }
  else
  {
    v13 = 0;
  }
  TStringRef::~TStringRef((void **)&v33);
  TStringRef::~TStringRef((void **)&v41);
  return v13;
}

void sub_1B099C8D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  void *v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, void *);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  TStringRef::~TStringRef((void **)va);
  TStringRef::~TStringRef((void **)va1);
  _Unwind_Resume(a1);
}

uint64_t TSFNTFont::GetVariationAxes(TSFNTFont *a1, _QWORD *a2)
{
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t TableEnd;
  unsigned __int16 *v7;
  unint64_t v8;
  int8x8_t *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char *i8;
  float64x2_t v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  double v19;
  int8x8_t v20;
  int64x2_t v21;
  int8x16_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  int8x16_t *v29;
  char *v30;
  char *v31;
  int8x16_t *v32;
  int8x16_t v33;
  uint64_t v34;
  _DWORD *exception;
  _DWORD *v37;
  _DWORD *v38;
  _DWORD *v39;
  float64x2_t v40;
  int8x16_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  unint64_t v45;

  v45 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v3 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v43 = v3;
  v44 = v3;
  v42 = v3;
  TsfntTable::TsfntTable((TsfntTable *)&v42, a1, 1719034226);
  if (!*((_QWORD *)&v42 + 1))
    goto LABEL_29;
  v4 = *(_QWORD *)(*((_QWORD *)&v42 + 1) + 8);
  if (!v4)
    goto LABEL_29;
  v5 = v43;
  TableEnd = TsfntTable::GetTableEnd((TsfntTable *)&v42);
  v7 = (unsigned __int16 *)(v4 + v5);
  if (v4 + v5 + 16 > TableEnd)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E6176998;
    exception[2] = 4;
  }
  if (!v7[4])
    goto LABEL_29;
  v8 = __rev16(v7[4]);
  if (v8 >= 0x101)
  {
    v37 = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)v37 = &off_1E6176998;
    v37[2] = 4;
  }
  v9 = (int8x8_t *)((char *)v7 + (bswap32(v7[2]) >> 16));
  if ((unint64_t)&v9[2] + 4 > TableEnd)
  {
    v38 = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)v38 = &off_1E6176998;
    v38[2] = 4;
  }
  v10 = bswap32(v7[5]) >> 16;
  if (v10 <= 0x13)
  {
    v39 = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)v39 = &off_1E6176998;
    v39[2] = 4;
  }
  v11 = (TableEnd - (unint64_t)v9) / v10 >= v8 ? v8 : (TableEnd - (unint64_t)v9) / v10;
  if (v11)
  {
    v12 = 0;
    v13 = a2 + 2;
    i8 = (char *)a2[1];
    v15 = (float64x2_t)vdupq_n_s64(0x3EF0000000000000uLL);
    v40 = v15;
    do
    {
      v16 = bswap32(v9->i32[0]);
      v17 = bswap32(v9[2].u16[0]) >> 16;
      v18 = bswap32(v9[2].u16[1]) >> 16;
      v19 = (double)(int)bswap32(v9->u32[1]) * 0.0000152587891;
      v20 = vrev32_s8(v9[1]);
      v21.i64[0] = v20.i32[0];
      v21.i64[1] = v20.i32[1];
      v22 = (int8x16_t)vmulq_f64(vcvtq_f64_s64(v21), v15);
      if ((unint64_t)i8 >= *v13)
      {
        v41 = v22;
        v23 = (uint64_t)&i8[-*a2] >> 5;
        if ((unint64_t)(v23 + 1) >> 59)
          std::vector<char,TInlineBufferAllocator<char,1024ul>>::__throw_length_error[abi:fe180100]();
        v24 = *v13 - *a2;
        v25 = v24 >> 4;
        if (v24 >> 4 <= (unint64_t)(v23 + 1))
          v25 = v23 + 1;
        if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFE0)
          v26 = 0x7FFFFFFFFFFFFFFLL;
        else
          v26 = v25;
        v27 = (char *)std::__allocate_at_least[abi:fe180100]<std::allocator<TVariationAxis>>((uint64_t)(a2 + 2), v26);
        v29 = (int8x16_t *)&v27[32 * v23];
        v29->i32[0] = v16;
        v29->i16[2] = v17;
        v29->i16[3] = v18;
        *(double *)&v29->i64[1] = v19;
        v29[1] = vextq_s8(v41, v41, 8uLL);
        v31 = (char *)*a2;
        v30 = (char *)a2[1];
        v32 = v29;
        if (v30 != (char *)*a2)
        {
          do
          {
            v33 = *((int8x16_t *)v30 - 1);
            v32[-2] = *((int8x16_t *)v30 - 2);
            v32[-1] = v33;
            v32 -= 2;
            v30 -= 32;
          }
          while (v30 != v31);
          v30 = (char *)*a2;
        }
        i8 = v29[2].i8;
        *a2 = v32;
        a2[1] = v29 + 2;
        a2[2] = &v27[32 * v28];
        if (v30)
          operator delete(v30);
        v15 = v40;
      }
      else
      {
        *(_DWORD *)i8 = v16;
        *((_WORD *)i8 + 2) = v17;
        *((_WORD *)i8 + 3) = v18;
        *((double *)i8 + 1) = v19;
        *((int8x16_t *)i8 + 1) = vextq_s8(v22, v22, 8uLL);
        i8 += 32;
      }
      a2[1] = i8;
      v9 = (int8x8_t *)((char *)v9 + v10);
      ++v12;
    }
    while (v12 != v11);
    v34 = 1;
  }
  else
  {
LABEL_29:
    v34 = 0;
  }
  *(_QWORD *)&v42 = &off_1E6176770;
  TDataReference::DucRefCount((TDataReference *)&v42);
  return v34;
}

void sub_1B099CC78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  TsfntTable::~TsfntTable((TsfntTable *)va);
  _Unwind_Resume(a1);
}

void TSFNTFont::GetVariationInstances(TSFNTFont *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, void **a4@<X8>)
{
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t TableEnd;
  unint64_t v11;
  unsigned __int16 *v12;
  char *v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unsigned __int16 *v20;
  unint64_t v21;
  BOOL v24;
  unint64_t v25;
  uint64_t v26;
  double *v27;
  double v28;
  double *v29;
  double *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  double *v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  _QWORD *v44;
  void **v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  unint64_t *v51;
  char *v52;
  char *v53;
  unint64_t v54;
  _DWORD *v55;
  _DWORD *exception;
  _DWORD *v57;
  _DWORD *v58;
  _DWORD *v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unsigned __int16 *v64;
  void **v65;
  unsigned int v66;
  unsigned int v67;
  unint64_t v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  unint64_t v72;

  v72 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v7 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v70 = v7;
  v71 = v7;
  v69 = v7;
  TsfntTable::TsfntTable((TsfntTable *)&v69, a1, 1719034226);
  if (!*((_QWORD *)&v69 + 1))
    goto LABEL_71;
  v8 = *(_QWORD *)(*((_QWORD *)&v69 + 1) + 8);
  if (!v8)
    goto LABEL_71;
  v9 = v70;
  TableEnd = TsfntTable::GetTableEnd((TsfntTable *)&v69);
  v11 = TableEnd;
  v12 = (unsigned __int16 *)(v8 + v9);
  if ((unint64_t)(v12 + 8) > TableEnd)
    goto LABEL_76;
  if (bswap32(v12[4]) >> 16 != a2)
  {
LABEL_71:
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    goto LABEL_72;
  }
  if (a2 >= 0x101)
  {
LABEL_76:
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E6176998;
    exception[2] = 4;
  }
  v13 = (char *)v12 + (bswap32(v12[2]) >> 16);
  if ((unint64_t)(v13 + 20) > TableEnd)
  {
    v57 = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)v57 = &off_1E6176998;
    v57[2] = 4;
  }
  v14 = &v13[(bswap32(v12[5]) >> 16) * a2];
  if ((unint64_t)v14 > TableEnd)
  {
    v58 = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)v58 = &off_1E6176998;
    v58[2] = 4;
  }
  if (!v12[7])
  {
    v59 = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)v59 = &off_1E6176998;
    v59[2] = 4;
  }
  v15 = __rev16(v12[7]);
  v16 = bswap32(v12[6]) >> 16;
  v68 = v15;
  if ((TableEnd - (unint64_t)v14) / v15 >= v16)
    v17 = v16;
  else
    v17 = (TableEnd - (unint64_t)v14) / v15;
  if (!v17)
    goto LABEL_71;
  a4[2] = 0;
  v60 = (uint64_t)(a4 + 2);
  *a4 = 0;
  a4[1] = 0;
  v65 = a4;
  std::vector<TVariationInstance>::reserve(a4, v17);
  std::vector<double>::reserve((void **)a3, v17 * a2);
  v18 = 0;
  v61 = v11;
  v64 = v12;
  v19 = (_QWORD *)(a3 + 16);
  v62 = a2 << 48;
  v63 = v17;
  do
  {
    v20 = (unsigned __int16 *)(v14 + 4);
    v21 = (unint64_t)&v14[4 * a2 + 4];
    if (v12 > (unsigned __int16 *)v14 + 2 || v21 < (unint64_t)v20 || v21 > v11)
    {
      v24 = (unint64_t)(v14 + 8) > v11 || v12 > v20;
      v25 = (v11 - (unint64_t)v20) >> 2;
      if (v24)
        v25 = 0;
      if (v25 != a2)
      {
        v55 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v55 = &off_1E6176998;
        v55[2] = 4;
      }
    }
    v66 = *(unsigned __int16 *)v14;
    v67 = *((unsigned __int16 *)v14 + 1);
    if (a2)
    {
      v26 = 0;
      v27 = *(double **)(a3 + 8);
      do
      {
        v28 = (double)(int)bswap32(*(_DWORD *)&v14[4 * v26 + 4]) * 0.0000152587891;
        if ((unint64_t)v27 >= *v19)
        {
          v30 = *(double **)a3;
          v31 = ((uint64_t)v27 - *(_QWORD *)a3) >> 3;
          v32 = v31 + 1;
          if ((unint64_t)(v31 + 1) >> 61)
            std::vector<char,TInlineBufferAllocator<char,1024ul>>::__throw_length_error[abi:fe180100]();
          v33 = *v19 - (_QWORD)v30;
          if (v33 >> 2 > v32)
            v32 = v33 >> 2;
          if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8)
            v34 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v34 = v32;
          if (v34)
          {
            v35 = (char *)std::__allocate_at_least[abi:fe180100]<std::allocator<TVariationInstance>>(a3 + 16, v34);
            v30 = *(double **)a3;
            v27 = *(double **)(a3 + 8);
          }
          else
          {
            v35 = 0;
          }
          v36 = (double *)&v35[8 * v31];
          *v36 = v28;
          v29 = v36 + 1;
          while (v27 != v30)
          {
            v37 = *((_QWORD *)v27-- - 1);
            *((_QWORD *)v36-- - 1) = v37;
          }
          *(_QWORD *)a3 = v36;
          *(_QWORD *)(a3 + 8) = v29;
          *(_QWORD *)(a3 + 16) = &v35[8 * v34];
          if (v30)
            operator delete(v30);
        }
        else
        {
          *v27 = v28;
          v29 = v27 + 1;
        }
        *(_QWORD *)(a3 + 8) = v29;
        ++v26;
        v27 = v29;
      }
      while (v26 != a2);
    }
    if (4 * a2 + 6 <= v68)
      v38 = (bswap32(*(unsigned __int16 *)&v14[4 * a2 + 4]) >> 16) + 1;
    else
      LOWORD(v38) = 0;
    v39 = bswap32(v66) >> 16;
    v40 = bswap32(v67) >> 16;
    v42 = (unint64_t *)v65[1];
    v41 = (unint64_t)v65[2];
    if ((unint64_t)v42 >= v41)
    {
      v46 = ((char *)v42 - (_BYTE *)*v65) >> 3;
      if ((unint64_t)(v46 + 1) >> 61)
        std::vector<char,TInlineBufferAllocator<char,1024ul>>::__throw_length_error[abi:fe180100]();
      v47 = v41 - (_QWORD)*v65;
      v48 = v47 >> 2;
      if (v47 >> 2 <= (unint64_t)(v46 + 1))
        v48 = v46 + 1;
      if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF8)
        v49 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v49 = v48;
      if (v49)
        v50 = (char *)std::__allocate_at_least[abi:fe180100]<std::allocator<TVariationInstance>>(v60, v49);
      else
        v50 = 0;
      v51 = (unint64_t *)&v50[8 * v46];
      *v51 = ((unint64_t)v39 << 16) | ((unint64_t)(unsigned __int16)v38 << 32) | v40 | v62;
      v44 = v51 + 1;
      v45 = v65;
      v53 = (char *)*v65;
      v52 = (char *)v65[1];
      if (v52 == *v65)
      {
        v11 = v61;
      }
      else
      {
        v11 = v61;
        do
        {
          v54 = *((_QWORD *)v52 - 1);
          v52 -= 8;
          *--v51 = v54;
        }
        while (v52 != v53);
        v52 = (char *)*v65;
      }
      *v65 = v51;
      v65[1] = v44;
      v65[2] = &v50[8 * v49];
      if (v52)
        operator delete(v52);
    }
    else
    {
      v43 = ((unint64_t)v39 << 16) | ((unint64_t)(unsigned __int16)v38 << 32);
      v11 = v61;
      *v42 = v43 | v40 | v62;
      v44 = v42 + 1;
      v45 = v65;
    }
    v45[1] = v44;
    v14 += v68;
    ++v18;
    v12 = v64;
  }
  while (v18 != v63);
LABEL_72:
  *(_QWORD *)&v69 = &off_1E6176770;
  TDataReference::DucRefCount((TDataReference *)&v69);
}

void sub_1B099D1F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  TsfntTable::~TsfntTable((TsfntTable *)va);
  _Unwind_Resume(a1);
}

uint64_t TSFNTFont::Normalize(TSFNTFont *a1, uint64_t a2, uint64_t a3, _WORD *a4)
{
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  unsigned __int16 *v13;
  _BOOL4 v14;
  _BOOL4 v15;
  unint64_t v16;
  __int128 v17;
  _OWORD *v18;
  size_t v19;
  unint64_t v20;
  uint64_t v21;
  double *v22;
  _DWORD *v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int *v26;
  BOOL v27;
  unint64_t v28;
  BOOL v29;
  unsigned int *v30;
  _WORD *v31;
  unsigned __int16 *v32;
  unsigned __int16 *v33;
  int v34;
  uint64_t v35;
  unint64_t v36;
  _BOOL4 v37;
  _BOOL4 v38;
  unsigned int v39;
  uint64_t v40;
  int v41;
  int v42;
  uint64_t v43;
  unsigned __int16 *v44;
  int v45;
  int v46;
  BOOL v47;
  int v49;
  uint64_t v50;
  uint64_t v52;
  int v53;
  unsigned int v54;
  DeltaSetIndexMap *v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  __int128 v61;
  uint64_t v62;
  double *v63;
  uint64_t i;
  int v65;
  unsigned int v66;
  int v67;
  uint64_t v68;
  int v69;
  int v70;
  BOOL v71;
  _DWORD *v73;
  _DWORD *v74;
  _DWORD *exception;
  unsigned __int16 *v76;
  unint64_t v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  ItemVariationStore::VariationRegionList *v83[2];
  __int128 v84;
  double **v85;
  double *v86[2];
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  _OWORD *v103;
  char *v104;
  char *v105;
  _OWORD v106[15];
  _QWORD v107[4];

  v107[1] = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    *(_QWORD *)&v8 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v80 = v8;
    v81 = v8;
    TSFNTFont::GetTable(a1, 1719034226, 0, &v80);
    if (*((_QWORD *)&v80 + 1) && (v9 = *(_QWORD *)(*((_QWORD *)&v80 + 1) + 8)) != 0)
      v10 = v9 + v81;
    else
      v10 = 0;
    v11 = *((_QWORD *)&v81 + 1) - v81;
    if (*((_QWORD *)&v81 + 1) == (_QWORD)v81)
    {
      bzero(a4, 2 * a2);
LABEL_111:
      *(_QWORD *)&v80 = &off_1E6176770;
      TDataReference::DucRefCount((TDataReference *)&v80);
      return v11 & 1;
    }
    *(_QWORD *)&v12 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v78 = v12;
    v79 = v12;
    TSFNTFont::GetTable(a1, 1635148146, 0, &v78);
    v13 = (unsigned __int16 *)*((_QWORD *)&v78 + 1);
    if (*((_QWORD *)&v78 + 1))
    {
      v13 = *(unsigned __int16 **)(*((_QWORD *)&v78 + 1) + 8);
      if (v13)
        v13 = (unsigned __int16 *)((char *)v13 + v79);
    }
    v14 = *((_QWORD *)&v79 + 1) != (_QWORD)v79;
    v15 = v13 + 4 <= (unsigned __int16 *)((char *)v13 + *((_QWORD *)&v79 + 1) - v79);
    if (v14 && v15)
      v16 = (unint64_t)v13 + *((_QWORD *)&v79 + 1) - v79;
    else
      v16 = 0;
    if (!v14 || !v15)
      v13 = 0;
    v76 = v13;
    if (a2 != bswap32(*(unsigned __int16 *)(v10 + 8)) >> 16)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)exception = &off_1E6176998;
      exception[2] = 4;
    }
    *(_QWORD *)&v17 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v17 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v106[14] = v17;
    v106[13] = v17;
    v18 = v106;
    v106[12] = v17;
    v106[11] = v17;
    v106[10] = v17;
    v106[9] = v17;
    v106[8] = v17;
    v106[7] = v17;
    v106[6] = v17;
    v106[5] = v17;
    v106[4] = v17;
    v106[3] = v17;
    v106[2] = v17;
    v106[1] = v17;
    v106[0] = v17;
    v103 = 0;
    v104 = 0;
    v105 = 0;
    v107[0] = v106;
    if ((_QWORD *)((char *)v106 + 8 * a2) <= v107)
    {
      v107[0] = (char *)v106 + 8 * a2;
      v19 = 8 * a2;
    }
    else
    {
      v19 = 8 * a2;
      v18 = operator new(8 * a2);
    }
    v20 = v10 + v11;
    v103 = v18;
    v105 = (char *)v18 + 8 * a2;
    bzero(v18, v19);
    v104 = (char *)v18 + 8 * a2;
    v21 = 16 * a2;
    v22 = (double *)(a3 + 8);
    v23 = v18;
    do
    {
      v24 = vcvtd_n_s64_f64(*v22, 0x10uLL);
      *v23 = *((_DWORD *)v22 - 2);
      v23[1] = v24;
      v23 += 2;
      v22 += 2;
      v21 -= 16;
    }
    while (v21);
    v25 = (unsigned int *)(v10 + (bswap32(*(unsigned __int16 *)(v10 + 4)) >> 16));
    v26 = &v25[5 * a2];
    v27 = v26 < v25 || (unint64_t)v26 > v20;
    v28 = a2;
    if (v27)
    {
      if ((unint64_t)(v25 + 5) > v20)
      {
        v77 = a2;
        if (!v76)
        {
          LOBYTE(v11) = 0;
          goto LABEL_110;
        }
        v29 = 0;
        v32 = v76 + 4;
LABEL_71:
        if (bswap32(*v76) >> 16 >= 2 && v32 + 2 >= v76 && (unint64_t)(v32 + 4) <= v16)
        {
          v54 = *((_DWORD *)v32 + 1);
          *(_OWORD *)v83 = 0u;
          v84 = 0u;
          v82 = 0u;
          if (v54)
          {
            if (ItemVariationStore::Initialize(&v82, (uint64_t)v76 + bswap32(v54), v16))
            {
              if (*(_DWORD *)v32)
              {
                v55 = (DeltaSetIndexMap *)((char *)v76 + bswap32(*(_DWORD *)v32));
                if ((unint64_t)v55 + 1 > v16)
                  goto LABEL_109;
                v56 = *(unsigned __int8 *)v55;
                v57 = 6;
                if (v56 != 1)
                  v57 = 0;
                v71 = v56 == 0;
                v58 = 4;
                if (!v71)
                  v58 = v57;
                v59 = (char *)v55 + v58;
                if (v59 < (char *)v55 || (unint64_t)v59 > v16)
                  goto LABEL_109;
              }
              else
              {
                v55 = 0;
              }
              *(_QWORD *)&v61 = 0xAAAAAAAAAAAAAAAALL;
              *((_QWORD *)&v61 + 1) = 0xAAAAAAAAAAAAAAAALL;
              v101 = v61;
              v102 = v61;
              v99 = v61;
              v100 = v61;
              v97 = v61;
              v98 = v61;
              v95 = v61;
              v96 = v61;
              v93 = v61;
              v94 = v61;
              v91 = v61;
              v92 = v61;
              v89 = v61;
              v90 = v61;
              v87 = v61;
              v88 = v61;
              *(_OWORD *)v86 = v61;
              v85 = 0;
              std::vector<double,TInlineBufferAllocator<double,30ul>>::vector(v86, (unint64_t)v83[0], &v85);
              if (v83[0])
              {
                v62 = 0;
                v63 = v86[0];
                do
                {
                  v63[v62] = ItemVariationStore::VariationRegionList::ComputeScalar(v83[1], v62, v77, a4);
                  ++v62;
                }
                while ((ItemVariationStore::VariationRegionList *)v62 != v83[0]);
              }
              for (i = 0; i != v77; ++i)
              {
                v65 = i;
                if (v55)
                  v65 = DeltaSetIndexMap::IndexForValue(v55, i, v16);
                v66 = llround(ItemVariationStore::ValueForDeltaSet((ItemVariationStore *)&v82, HIWORD(v65), (unsigned __int16)v65, 0, 0, v86[0]));
                if (v66)
                {
                  v67 = (__int16)a4[i] + v66;
                  if (v67 >= 0x4000)
                    v67 = 0x4000;
                  if (v67 <= -16384)
                    LOWORD(v67) = -16384;
                  a4[i] = v67;
                }
              }
              v68 = 2 * v77 - 2;
              do
              {
                v70 = (unsigned __int16)*a4++;
                v69 = v70;
                if (v70)
                  v71 = 1;
                else
                  v71 = v68 == 0;
                v68 -= 2;
              }
              while (!v71);
              v29 = v69 != 0;
              v85 = v86;
              std::vector<double,TInlineBufferAllocator<double,30ul>>::__destroy_vector::operator()[abi:fe180100]((void ***)&v85);
            }
          }
        }
LABEL_109:
        LOBYTE(v11) = v29;
LABEL_110:
        std::vector<std::pair<unsigned int,int>,TInlineBufferAllocator<std::pair<unsigned int,int>,30ul>>::__destroy_vector::operator()[abi:fe180100]((uint64_t)&v103);
        *(_QWORD *)&v78 = &off_1E6176770;
        TDataReference::DucRefCount((TDataReference *)&v78);
        goto LABEL_111;
      }
      v28 = (v20 - (unint64_t)v25) / 0x14;
    }
    if (!v76)
    {
      LOBYTE(v11) = 0;
      if (v28)
      {
        v52 = 20 * v28;
        do
        {
          v53 = NormalizedAxisCoord(v25, a2, (uint64_t)v18);
          LOBYTE(v11) = (v53 != 0) | v11;
          *a4++ = (v53 + 2) >> 2;
          v25 += 5;
          v52 -= 20;
        }
        while (v52);
      }
      goto LABEL_110;
    }
    v77 = a2;
    v29 = 0;
    if (v28)
    {
      v30 = &v25[5 * v28];
      v31 = a4;
      v32 = v76 + 4;
      do
      {
        if (v76 + 4 > v32 || (v33 = v32 + 1, (unint64_t)(v32 + 1) > v16))
        {
          v73 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v73 = &off_1E6176998;
          v73[2] = 4;
        }
        v34 = NormalizedAxisCoord(v25, a2, (uint64_t)v18);
        if (v34)
        {
          v35 = bswap32(*v32) >> 16;
          v36 = (unint64_t)&v33[2 * v35];
          v37 = v36 >= (unint64_t)v33;
          v38 = v36 <= v16;
          v39 = (v16 - (_DWORD)v33) >> 2;
          if ((unint64_t)(v32 + 3) > v16)
            LOWORD(v39) = 0;
          v40 = (unsigned __int16)v39;
          if (v37 && v38)
            v40 = v35;
          else
            LOWORD(v35) = v39;
          if ((unsigned __int16)v35 >= 2u)
          {
            v41 = 4 * ((int)bswap32(v32[1]) >> 16);
            v42 = 4 * ((int)bswap32(v32[2]) >> 16);
            v43 = v40 - 1;
            v44 = v32 + 4;
            while (1)
            {
              v45 = 4 * ((int)bswap32(*(v44 - 1)) >> 16);
              v46 = 4 * ((int)bswap32(*v44) >> 16);
              v47 = v45 < v34 || v45 <= v41;
              if (!v47 && v46 >= v42)
                break;
              v44 += 2;
              v29 = 1;
              v42 = v46;
              v41 = v45;
              if (!--v43)
                goto LABEL_59;
            }
            v49 = v42 + (v46 - v42) * (uint64_t)(v34 - v41) / (v45 - v41);
            if (v49 >= 0x10000)
              v49 = 0x10000;
            if (v49 <= -65536)
              v34 = -65536;
            else
              v34 = v49;
          }
          v29 = 1;
        }
LABEL_59:
        *v31 = (v34 + 2) >> 2;
        v50 = (4 * (bswap32(*v32) >> 16)) | 2;
        if ((unint64_t)v32 + v50 > v16 || (unsigned __int16 *)((char *)v32 + v50) < v32)
        {
          v74 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v74 = &off_1E6176998;
          v74[2] = 4;
        }
        ++v31;
        v32 = (unsigned __int16 *)((char *)v32 + v50);
        v25 += 5;
      }
      while (v25 != v30);
    }
    else
    {
      v32 = v76 + 4;
    }
    goto LABEL_71;
  }
  LOBYTE(v11) = 0;
  return v11 & 1;
}

void sub_1B099D96C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62)
{
  std::vector<std::pair<unsigned int,int>,TInlineBufferAllocator<std::pair<unsigned int,int>,30ul>>::__destroy_vector::operator()[abi:fe180100]((uint64_t)&a62);
  TDataReference::~TDataReference((TDataReference *)&a11);
  TDataReference::~TDataReference((TDataReference *)&a15);
  _Unwind_Resume(a1);
}

BOOL TSFNTFont::HasBadvmtxTables(TSFNTFont *this)
{
  int v1;
  __int128 v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  v1 = *((_DWORD *)this + 46);
  if (v1 < 0)
  {
    *(_QWORD *)&v3 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v13 = v3;
    v14 = v3;
    TSFNTFont::GetTable(this, 1751672161, 0, &v13);
    v4 = *((_QWORD *)&v13 + 1);
    if (*((_QWORD *)&v13 + 1))
    {
      v4 = *(_QWORD *)(*((_QWORD *)&v13 + 1) + 8);
      if (v4)
        v4 += v14;
    }
    *(_QWORD *)&v5 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
    if (*((_QWORD *)&v14 + 1) - (_QWORD)v14 <= 0x23uLL)
      v6 = 0;
    else
      v6 = v4;
    v11 = v5;
    v12 = v5;
    TSFNTFont::GetTable(this, 1986553185, 0, &v11);
    v7 = *((_QWORD *)&v11 + 1);
    if (*((_QWORD *)&v11 + 1))
    {
      v7 = *(_QWORD *)(*((_QWORD *)&v11 + 1) + 8);
      if (v7)
        v7 += v12;
    }
    if (*((_QWORD *)&v12 + 1) - (_QWORD)v12 >= 0x24uLL)
    {
      v1 = 0;
      if (!v6 || !v7)
        goto LABEL_21;
      if (*(unsigned __int16 *)(v6 + 4) == *(unsigned __int16 *)(v7 + 4))
      {
        v8 = (int)bswap32(*(unsigned __int16 *)(v6 + 6)) >> 16;
        v9 = (int)bswap32(*(unsigned __int16 *)(v7 + 6)) >> 16;
        if (v8 < 0)
          v8 = -v8;
        if (v9 < 0)
          v9 = -v9;
        v1 = (unsigned __int16)v8 == (unsigned __int16)v9;
        goto LABEL_21;
      }
    }
    v1 = 0;
LABEL_21:
    *((_DWORD *)this + 46) = v1;
    *(_QWORD *)&v11 = &off_1E6176770;
    TDataReference::DucRefCount((TDataReference *)&v11);
    *(_QWORD *)&v13 = &off_1E6176770;
    TDataReference::DucRefCount((TDataReference *)&v13);
  }
  return v1 != 0;
}

void sub_1B099DB3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  TDataReference::~TDataReference((TDataReference *)va);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'TSFNTData::~TSFNTData(TSFNTData *this)
{
  TSFNTFont::~TSFNTFont((TSFNTData *)((char *)this - 16));
}

{
  TSFNTFont::~TSFNTFont((TSFNTData *)((char *)this - 16));
  JUMPOUT(0x1B5E0CD38);
}

void TSFNTData::~TSFNTData(TSFNTData *this)
{
  TSFNTFont::~TSFNTFont(this);
  JUMPOUT(0x1B5E0CD38);
}

uint64_t TSFNTData::GetKind(TSFNTData *this)
{
  return 2;
}

BOOL TSBITFont::IsSBITFont(TSBITFont *this, TSFNTFont *a2, const TSFNTFont *a3)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  char v9;
  int v10;
  int v11;
  int v12;
  _BYTE v13[24];
  _BYTE *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if ((_DWORD)this != 0x10000 && (_DWORD)this != 1954115633 && (_DWORD)this != 1953658213)
    return 0;
  v11 = 3;
  v12 = 3;
  v10 = 3;
  v9 = 0;
  v4 = operator new(0x28uLL);
  *v4 = &off_1E61B4978;
  v4[1] = &v12;
  v4[2] = &v11;
  v4[3] = &v10;
  v4[4] = &v9;
  v14 = v4;
  TSFNTFont::EnumerateTableTags(a2, (uint64_t)v13);
  v5 = v14;
  if (v14 == v13)
  {
    v6 = 4;
    v5 = v13;
    goto LABEL_8;
  }
  if (v14)
  {
    v6 = 5;
LABEL_8:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  if (v9 || v12)
    return 0;
  return !v11 || v10 == 0;
}

void sub_1B099DCCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v15;
  char *v17;
  uint64_t v18;

  v17 = a15;
  if (a15 == v15)
  {
    v18 = 4;
    v17 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v18 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void `non-virtual thunk to'TSBITFont::~TSBITFont(TSBITFont *this)
{
  TSFNTFont::~TSFNTFont((TSBITFont *)((char *)this - 16));
}

{
  TSFNTFont::~TSFNTFont((TSBITFont *)((char *)this - 16));
  JUMPOUT(0x1B5E0CD38);
}

void TSBITFont::~TSBITFont(TSBITFont *this)
{
  TSFNTFont::~TSFNTFont(this);
  JUMPOUT(0x1B5E0CD38);
}

void TSBITFont::GetHorizontalMetrics(TSBITFont *this, int *a2, int *a3, int *a4, int *a5, int *a6, int *a7, int *a8, int *a9, int *a10, BOOL *a11, BOOL *a12, double *a13, int *a14, int *a15, double *a16, double *a17, double *a18, double *a19, __int16 *a20,__int16 *a21)
{
  __int128 v29;
  BOOL v30;
  _OWORD v31[5];

  (*(void (**)(TSBITFont *, double *, double *, double *, double *))(*(_QWORD *)this + 280))(this, a16, a17, a18, a19);
  *a2 = *((__int16 *)this + 112);
  *a3 = *((__int16 *)this + 113);
  *a4 = *((__int16 *)this + 114);
  *a7 = *((__int16 *)this + 115);
  *a9 = 0;
  *a10 = 0;
  *a5 = 0;
  *a6 = 0;
  *a8 = (*(uint64_t (**)(TSBITFont *))(*(_QWORD *)this + 216))(this);
  *(_QWORD *)&v29 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v29 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v31[2] = v29;
  v31[3] = v29;
  v31[0] = v29;
  v31[1] = v29;
  TpostTable::TpostTable((TpostTable *)v31, this);
  if (*((_QWORD *)&v31[0] + 1) && *(_QWORD *)(*((_QWORD *)&v31[0] + 1) + 8))
  {
    *a14 = (int)bswap32(*(unsigned __int16 *)(TpostTable::GetPost((TpostTable *)v31) + 8)) >> 16;
    *a15 = bswap32(*(unsigned __int16 *)(TpostTable::GetPost((TpostTable *)v31) + 10)) >> 16;
    v30 = *(_DWORD *)(TpostTable::GetPost((TpostTable *)v31) + 12) != 0;
  }
  else
  {
    v30 = 0;
    *a14 = *a3 / 2;
    *a15 = 0;
  }
  *a11 = v30;
  *a13 = (*(double (**)(TSBITFont *))(*(_QWORD *)this + 288))(this);
  *a12 = (*(uint64_t (**)(TSBITFont *))(*(_QWORD *)this + 320))(this);
  *a20 = (int)*((double *)this + 27);
  *a21 = (int)*((double *)this + 26);
  TpostTable::~TpostTable((TpostTable *)v31);
}

void sub_1B099DF20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  TpostTable::~TpostTable((TpostTable *)va);
  _Unwind_Resume(a1);
}

uint64_t TSBITFont::GetAscent(TSBITFont *this)
{
  return *((__int16 *)this + 112);
}

uint64_t TSBITFont::GetDescent(TSBITFont *this)
{
  return *((__int16 *)this + 113);
}

uint64_t TSBITFont::GetLineGap(TSBITFont *this)
{
  return *((__int16 *)this + 114);
}

uint64_t TSBITFont::GetMaxAdvance(TSBITFont *this)
{
  return *((unsigned __int16 *)this + 115);
}

uint64_t TSBITFont::GetAvgAdvance(TSBITFont *this)
{
  int AvgAdvance;
  double v3;

  AvgAdvance = TSFNTFont::GetAvgAdvance(this);
  if (AvgAdvance)
  {
    v3 = *((double *)this + 26);
    if (v3 > (double)AvgAdvance)
      AvgAdvance = (int)(v3 * (double)AvgAdvance);
  }
  else
  {
    LOWORD(AvgAdvance) = *((_WORD *)this + 115);
  }
  return (__int16)AvgAdvance;
}

uint64_t TSBITFont::GetStemH(TSBITFont *this)
{
  return (int)*((double *)this + 27);
}

uint64_t TSBITFont::GetStemV(TSBITFont *this)
{
  return (int)*((double *)this + 26);
}

_WORD *TSBITFont::GetCaretInfo(_WORD *this, __int16 *a2, __int16 *a3, unsigned __int16 *a4)
{
  *a2 = this[116];
  *a3 = this[117];
  *a4 = this[118];
  return this;
}

void TSBITFont::GetBounds(TSBITFont *this, double *a2, double *a3, double *a4, double *a5)
{
  double v10;

  TSFNTFont::GetBounds(this, a2, a3, a4, a5);
  if (*a4 == 0.0 || *a5 == 0.0)
  {
    *a2 = 0.0;
    *a3 = (double)*((__int16 *)this + 113);
    *a4 = (double)*((__int16 *)this + 115);
    v10 = (double)*((__int16 *)this + 112) - *a3;
LABEL_4:
    *a5 = v10;
    return;
  }
  if (*a5 < *((double *)this + 27))
  {
    *a2 = *((double *)this + 26) * *a2;
    *a3 = *((double *)this + 27) * *a3;
    *a4 = *((double *)this + 26) * *a4;
    v10 = *((double *)this + 27) * *a5;
    goto LABEL_4;
  }
}

uint64_t TSBITFont::GetKind(TSBITFont *this)
{
  return 5;
}

void TOS2UnicodeRanges::~TOS2UnicodeRanges(TOS2UnicodeRanges *this)
{
  JUMPOUT(0x1B5E0CD38);
}

uint64_t TOS2UnicodeRanges::GetRangeBit(TOS2UnicodeRanges *this, unsigned int a2)
{
  unint64_t i;
  uint64_t v3;
  uint64_t v4;

  for (i = *((unsigned int *)this + 6); i > 0xAA; i = 0)
LABEL_8:
    *((_DWORD *)this + 6) = 0;
  v3 = 3 * i;
  do
  {
    if (kUnicodeRanges[v3 + 1] <= a2 && kUnicodeRanges[v3 + 2] >= a2)
    {
      v4 = kUnicodeRanges[v3];
      *((_DWORD *)this + 6) = v4;
      return v4;
    }
    v3 += 3;
  }
  while (v3 != 513);
  if (i)
    goto LABEL_8;
  return 0xFFFFFFFFLL;
}

uint64_t TOS2UnicodeRanges::SetRangeBit(TOS2UnicodeRanges *this, CFRange a2)
{
  CFIndex length;
  int location;
  uint64_t result;
  int v6;
  unsigned int v7;
  unsigned int v8;

  length = a2.length;
  location = a2.location;
  result = TOS2UnicodeRanges::GetRangeBit(this, a2.location);
  v6 = result;
  if ((_DWORD)result != -1)
    *((_DWORD *)this + (result >> 5) + 2) |= 1 << result;
  v7 = result;
  if (length >= 2)
  {
    result = TOS2UnicodeRanges::GetRangeBit(this, location + (int)length - 1);
    v7 = result;
    if ((_DWORD)result != -1)
      *((_DWORD *)this + (result >> 5) + 2) |= 1 << result;
  }
  v8 = v6 + 1;
  if (v6 + 1 < v7 && v7 - v6 - 3 <= 0x7D)
  {
    do
    {
      result = TOS2UnicodeRanges::GetRangeBit(this, v8);
      if ((_DWORD)result != -1)
        *((_DWORD *)this + (result >> 5) + 2) |= 1 << result;
      ++v8;
    }
    while (v7 != v8);
  }
  return result;
}

void TwOFFStream::TwOFFStream(TwOFFStream *this, const TFileReference *a2)
{
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const UInt8 *BytePtr;
  CFIndex Length;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  __CFData *Mutable;
  __CFData *v15;
  __int16 v16;
  int v17;
  int *v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  int v23;
  size_t v24;
  UInt8 *v25;
  unsigned int v26;
  size_t v27;
  unsigned int v28;
  _BOOL4 v29;
  BOOL v31;
  unint64_t v32;
  UInt8 *MutableBytePtr;
  const uint8_t *v35;
  UInt8 *v36;
  const __CFData *v37;
  _DWORD *v38;
  _DWORD *v39;
  _DWORD *v40;
  _DWORD *v41;
  _DWORD *v42;
  _DWORD *exception;
  unint64_t v44;
  unint64_t capacity;
  int v46;
  CFMutableDataRef theData;
  int v48;
  unint64_t v49;
  UInt8 bytes[4];
  __int16 v51;
  __int16 v52;
  __int16 v53;
  _BYTE v54[10];
  uint64_t v55;
  __int128 v56;
  __int128 v57;

  *((_DWORD *)this + 2) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = &off_1E6176770;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_DWORD *)this + 22) = 0;
  *((_DWORD *)this + 33) = 0;
  *((_BYTE *)this + 136) = 0;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_QWORD *)this + 22) = 0;
  *((_QWORD *)this + 12) = &off_1E6176770;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 15) = 0;
  *((_BYTE *)this + 128) = 0;
  *((_QWORD *)this + 23) = -1;
  *((_DWORD *)this + 48) = 0;
  *((_QWORD *)this + 25) = a2;
  *(_QWORD *)this = &off_1E61B4408;
  *((_QWORD *)this + 2) = &unk_1E61B4610;
  *((_QWORD *)this + 3) = 0;
  *(_QWORD *)&v3 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v56 = v3;
  v57 = v3;
  (*(void (**)(__int128 *__return_ptr, const TFileReference *, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(&v56, a2, 0, 0);
  if (!*((_QWORD *)&v56 + 1))
    goto LABEL_4;
  v4 = *(_QWORD *)(*((_QWORD *)&v56 + 1) + 8);
  if (!v4)
    goto LABEL_4;
  v5 = v57;
  v6 = v4 + v57;
  if (*(_WORD *)(v4 + v57 + 14))
    goto LABEL_4;
  v12 = *(unsigned __int16 *)(v6 + 12);
  if (!*(_WORD *)(v6 + 12))
    goto LABEL_4;
  v13 = __rev16(v12);
  v44 = *((_QWORD *)&v57 + 1) - v57;
  if (*((_QWORD *)&v57 + 1) - (_QWORD)v57 <= 20 * (unint64_t)v13 + 44)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E6176998;
    exception[2] = 4;
  }
  capacity = bswap32(*(_DWORD *)(v6 + 16));
  v49 = 16 * (v13 - 1) + 28;
  if (v49 < capacity
    && (Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], capacity), (v15 = Mutable) != 0))
  {
    *(_QWORD *)&v54[2] = 0;
    v55 = 0;
    *(_DWORD *)bytes = *(_DWORD *)(v6 + 4);
    v51 = v12;
    v16 = __clz(v13) ^ 0x1F;
    v52 = bswap32(16 * (1 << v16)) >> 16;
    v53 = v16 << 8;
    *(_QWORD *)v54 = bswap32(16 * (v13 - (1 << v16))) >> 16;
    CFDataAppendBytes(Mutable, bytes, 12);
    CFDataSetLength(v15, capacity);
    v17 = 0;
    v18 = (int *)(v5 + v4 + 60);
    theData = v15;
    v48 = 12;
    do
    {
      v46 = v17;
      v19 = v6;
      v21 = *(v18 - 2);
      v20 = *(v18 - 1);
      v22 = *(v18 - 4);
      v23 = *v18;
      v24 = bswap32(v20);
      v25 = &CFDataGetMutableBytePtr(v15)[v48];
      *(_DWORD *)v25 = v22;
      *((_DWORD *)v25 + 1) = v23;
      *((_DWORD *)v25 + 2) = bswap32(v49);
      *((_DWORD *)v25 + 3) = v20;
      v26 = (v24 + 3) & 0xFFFFFFFC;
      if (v26 < v24)
      {
        CFRelease(theData);
        v39 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v39 = &off_1E6176998;
        v39[2] = 4;
      }
      v27 = bswap32(v21);
      v28 = bswap32(*(v18 - 3));
      v29 = __CFADD__(v28, (_DWORD)v27);
      v31 = v44 < v28 + v27 || v29 || (int)v27 - 1 >= v24;
      v32 = v49 + v26;
      if (v31 || v32 > capacity)
      {
        CFRelease(theData);
        v38 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v38 = &off_1E6176998;
        v38[2] = 4;
      }
      MutableBytePtr = CFDataGetMutableBytePtr(theData);
      v35 = (const uint8_t *)(v19 + v28);
      v6 = v19;
      v36 = &MutableBytePtr[v49 & 0xFFFFFFFC];
      if (v21 == v20)
      {
        if (__CFADD__((_DWORD)v49, (_DWORD)v27) || (int)v49 + (int)v27 > capacity)
        {
          CFRelease(theData);
          v41 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v41 = &off_1E6176998;
          v41[2] = 4;
        }
        memcpy(v36, v35, v27);
      }
      else
      {
        if (v27 <= 1)
        {
          CFRelease(theData);
          v42 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v42 = &off_1E6176998;
          v42[2] = 4;
        }
        if (compression_decode_buffer(v36, v24, v35 + 2, (v27 - 2), 0, COMPRESSION_ZLIB) != v24)
        {
          CFRelease(theData);
          v40 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v40 = &off_1E6176998;
          v40[2] = 4;
        }
      }
      v18 += 5;
      v48 += 16;
      v49 = v32;
      v17 = v46 + 1;
      v15 = theData;
    }
    while (v13 > (unsigned __int16)(v46 + 1));
    *(_QWORD *)&v56 = &off_1E6176770;
    TDataReference::DucRefCount((TDataReference *)&v56);
    *((_QWORD *)this + 26) = theData;
    BytePtr = CFDataGetBytePtr(theData);
    v37 = (const __CFData *)*((_QWORD *)this + 26);
    if (v37)
      Length = CFDataGetLength(v37);
    else
      Length = 0;
  }
  else
  {
LABEL_4:
    *(_QWORD *)&v56 = &off_1E6176770;
    TDataReference::DucRefCount((TDataReference *)&v56);
    BytePtr = 0;
    Length = 0;
    *((_QWORD *)this + 26) = 0;
  }
  *((_QWORD *)this + 27) = &off_1E6176678;
  v9 = operator new();
  *(_DWORD *)(v9 + 32) = 0;
  v10 = (unsigned int *)(v9 + 32);
  *(_QWORD *)v9 = &off_1E6176818;
  *(_QWORD *)(v9 + 8) = BytePtr;
  *(_QWORD *)(v9 + 16) = Length;
  *(_QWORD *)(v9 + 24) = &unk_1E6176840;
  *(_DWORD *)(v9 + 36) = 0;
  *((_QWORD *)this + 28) = v9;
  *((_DWORD *)this + 58) = 0;
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 + 1, v10));
}

void sub_1B099E750(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  TSFNTFont *v11;
  va_list va;

  va_start(va, a11);
  TDataReference::~TDataReference((TDataReference *)va);
  TSFNTFont::~TSFNTFont(v11);
  _Unwind_Resume(a1);
}

void TwOFFStream::TwOFFStream(TwOFFStream *this, const TFileReference *a2, CFDataRef theData)
{
  const __CFData *Length;
  const UInt8 *BytePtr;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;

  Length = theData;
  *((_DWORD *)this + 2) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = &off_1E6176770;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_DWORD *)this + 22) = 0;
  *((_DWORD *)this + 33) = 0;
  *((_BYTE *)this + 136) = 0;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_QWORD *)this + 22) = 0;
  *((_QWORD *)this + 12) = &off_1E6176770;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 15) = 0;
  *((_BYTE *)this + 128) = 0;
  *((_QWORD *)this + 23) = -1;
  *((_DWORD *)this + 48) = 0;
  *(_QWORD *)this = &off_1E61B4408;
  *((_QWORD *)this + 2) = &unk_1E61B4610;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 25) = a2;
  *((_QWORD *)this + 26) = theData;
  if (theData)
  {
    BytePtr = CFDataGetBytePtr(theData);
    Length = (const __CFData *)CFDataGetLength(Length);
  }
  else
  {
    BytePtr = 0;
  }
  *((_QWORD *)this + 27) = &off_1E6176678;
  v6 = operator new();
  *(_DWORD *)(v6 + 32) = 0;
  v7 = (unsigned int *)(v6 + 32);
  *(_QWORD *)v6 = &off_1E6176818;
  *(_QWORD *)(v6 + 8) = BytePtr;
  *(_QWORD *)(v6 + 16) = Length;
  *(_QWORD *)(v6 + 24) = &unk_1E6176840;
  *(_DWORD *)(v6 + 36) = 0;
  *((_QWORD *)this + 28) = v6;
  *((_DWORD *)this + 58) = 0;
  do
    v8 = __ldxr(v7);
  while (__stxr(v8 + 1, v7));
}

void sub_1B099E8B4(_Unwind_Exception *a1)
{
  TSFNTFont *v1;

  TSFNTFont::~TSFNTFont(v1);
  _Unwind_Resume(a1);
}

void TwOFFStream::~TwOFFStream(TwOFFStream *this)
{
  const void *v2;

  *(_QWORD *)this = &off_1E61B4408;
  *((_QWORD *)this + 2) = &unk_1E61B4610;
  v2 = (const void *)*((_QWORD *)this + 26);
  if (v2)
    CFRelease(v2);
  TInMemoryDataReference::~TInMemoryDataReference((TwOFFStream *)((char *)this + 216));
  TSFNTFont::~TSFNTFont(this);
}

{
  TwOFFStream::~TwOFFStream(this);
  JUMPOUT(0x1B5E0CD38);
}

void `non-virtual thunk to'TwOFFStream::~TwOFFStream(TwOFFStream *this)
{
  TwOFFStream::~TwOFFStream((TwOFFStream *)((char *)this - 16));
}

{
  TwOFFStream::~TwOFFStream((TwOFFStream *)((char *)this - 16));
  JUMPOUT(0x1B5E0CD38);
}

uint64_t TwOFFStream::GetKind(TwOFFStream *this)
{
  return 6;
}

uint64_t TwOFFStream::GetFontRef(TwOFFStream *this)
{
  return (uint64_t)this + 216;
}

void WOFF2CFDataOut::~WOFF2CFDataOut(WOFF2CFDataOut *this)
{
  const void *v1;

  *(_QWORD *)this = &off_1E61B4630;
  v1 = (const void *)*((_QWORD *)this + 1);
  if (v1)
    CFRelease(v1);
}

{
  WOFF2CFDataOut::~WOFF2CFDataOut(this);
  JUMPOUT(0x1B5E0CD38);
}

void TwOFF2Stream::TwOFF2Stream(TwOFF2Stream *this, const TFileReference *a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  const __CFData *v7;
  _DWORD *exception;
  void (**v9)(TDataReference *__hidden);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;

  (*(void (**)(void (***__return_ptr)(TDataReference *__hidden), const TFileReference *, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(&v9, a2, 0, 0);
  v13 = 0xAAAAAAAAAAAAAAAALL;
  v14 = 0xAAAAAAAAAAAAAAAALL;
  WOFF2CFDataOut::WOFF2CFDataOut((WOFF2CFDataOut *)&v13);
  if (v10 && (v4 = *(_QWORD *)(v10 + 8)) != 0)
    v5 = v4 + v11;
  else
    v5 = 0;
  woff2::ConvertWOFF2ToTTF(v5, v12 - v11, (uint64_t)&v13);
  if ((v6 & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E6176998;
    exception[2] = 4;
  }
  v7 = (const __CFData *)v14;
  v14 = 0;
  WOFF2CFDataOut::~WOFF2CFDataOut((WOFF2CFDataOut *)&v13);
  TwOFFStream::TwOFFStream(this, a2, v7);
  v9 = &off_1E6176770;
  TDataReference::DucRefCount((TDataReference *)&v9);
  *(_QWORD *)this = &off_1E61B4668;
  *((_QWORD *)this + 2) = &unk_1E61B4870;
}

void sub_1B099EAFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  WOFF2CFDataOut::~WOFF2CFDataOut((WOFF2CFDataOut *)&a13);
  TDataReference::~TDataReference((TDataReference *)&a9);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'TwOFF2Stream::~TwOFF2Stream(TwOFF2Stream *this)
{
  TwOFFStream::~TwOFFStream((TwOFF2Stream *)((char *)this - 16));
}

{
  TwOFFStream::~TwOFFStream((TwOFF2Stream *)((char *)this - 16));
  JUMPOUT(0x1B5E0CD38);
}

void TwOFF2Stream::~TwOFF2Stream(TwOFF2Stream *this)
{
  TwOFFStream::~TwOFFStream(this);
  JUMPOUT(0x1B5E0CD38);
}

uint64_t TwOFF2Stream::GetKind(TwOFF2Stream *this)
{
  return 7;
}

uint64_t WOFF2CFDataOut::Write(CFMutableDataRef *this, const UInt8 *a2, CFIndex a3)
{
  CFDataAppendBytes(this[1], a2, a3);
  return 1;
}

uint64_t WOFF2CFDataOut::Write(CFMutableDataRef *this, UInt8 *newBytes, CFIndex range, CFIndex newLength)
{
  CFRange v7;

  v7.location = range;
  v7.length = newLength;
  CFDataReplaceBytes(this[1], v7, newBytes, newLength);
  return 1;
}

CFIndex WOFF2CFDataOut::Size(CFDataRef *this)
{
  return CFDataGetLength(this[1]);
}

void std::__introsort<std::_ClassicAlgPolicy,TSFNTFont::CopyData(void)::$_1 &,sfntDirectoryEntry *,false>(uint64_t a1, unsigned int *a2, uint64_t a3, char a4)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int *v12;
  __int128 v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unsigned int *v18;
  unsigned int v19;
  unint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  unint64_t v24;
  int v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  BOOL v30;
  uint64_t v31;
  int v32;
  unsigned int *v33;
  unsigned int v34;
  unint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t v46;
  _OWORD *v47;
  _OWORD *v48;
  _OWORD *v49;
  unsigned int v50;
  unsigned int v51;
  uint64_t v52;
  unsigned int v53;
  int v54;
  uint64_t v55;
  unsigned int v56;
  int v57;
  uint64_t v58;
  unsigned int v59;
  int v60;
  uint64_t v61;
  unsigned int *v62;
  BOOL v64;
  uint64_t v65;
  unint64_t v66;
  unsigned int *v67;
  unsigned int v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  unsigned int v72;
  uint64_t v73;
  int64_t v74;
  int64_t v75;
  int64_t v76;
  uint64_t v77;
  unsigned int *v78;
  unsigned int v79;
  unsigned int v80;
  unint64_t v81;
  unsigned int v82;
  uint64_t v83;
  unsigned int v84;
  unsigned int *v85;
  uint64_t v86;
  unsigned int v87;
  unsigned int v88;
  uint64_t v89;
  uint64_t v90;
  unsigned int *v91;
  unsigned int v92;
  unsigned int v93;
  unsigned int v94;
  unsigned int v95;
  _OWORD *v96;
  unsigned int *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  unsigned int *v102;
  unsigned int *v103;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  unsigned int v108;
  uint64_t v109;
  unsigned int v110;
  uint64_t v111;
  unsigned int *v112;
  unsigned int *v114;
  unsigned int v115;

LABEL_1:
  v8 = a1;
  while (2)
  {
    a1 = v8;
    v9 = (uint64_t)a2 - v8;
    v10 = (uint64_t)((uint64_t)a2 - v8) >> 4;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v44 = *(_DWORD *)v8;
        if (*(a2 - 4) < *(_DWORD *)v8)
        {
          v45 = *(_DWORD *)(v8 + 12);
          v46 = *(_QWORD *)(v8 + 4);
          *(_OWORD *)v8 = *((_OWORD *)a2 - 1);
          *(a2 - 4) = v44;
          *(_QWORD *)(a2 - 3) = v46;
          *(a2 - 1) = v45;
        }
        return;
      case 3uLL:
        std::__sort3[abi:fe180100]<std::_ClassicAlgPolicy,TSFNTFont::CopyData(void)::$_1 &,sfntDirectoryEntry *>((unsigned int *)v8, (unsigned int *)(v8 + 16), a2 - 4);
        return;
      case 4uLL:
        std::__sort4[abi:fe180100]<std::_ClassicAlgPolicy,TSFNTFont::CopyData(void)::$_1 &,sfntDirectoryEntry *>(v8, v8 + 16, v8 + 32, (uint64_t)(a2 - 4));
        return;
      case 5uLL:
        v47 = (_OWORD *)(v8 + 16);
        v48 = (_OWORD *)(v8 + 32);
        v49 = (_OWORD *)(v8 + 48);
        std::__sort4[abi:fe180100]<std::_ClassicAlgPolicy,TSFNTFont::CopyData(void)::$_1 &,sfntDirectoryEntry *>(v8, v8 + 16, v8 + 32, v8 + 48);
        v50 = *(_DWORD *)(v8 + 48);
        if (*(a2 - 4) < v50)
        {
          v51 = *(_DWORD *)(v8 + 60);
          v52 = *(_QWORD *)(v8 + 52);
          *v49 = *((_OWORD *)a2 - 1);
          *(a2 - 4) = v50;
          *(_QWORD *)(a2 - 3) = v52;
          *(a2 - 1) = v51;
          v53 = *(_DWORD *)(v8 + 32);
          if (*(_DWORD *)(v8 + 48) < v53)
          {
            v54 = *(_DWORD *)(v8 + 44);
            v55 = *(_QWORD *)(v8 + 36);
            *v48 = *v49;
            *(_DWORD *)(v8 + 48) = v53;
            *(_QWORD *)(v8 + 52) = v55;
            *(_DWORD *)(v8 + 60) = v54;
            v56 = *(_DWORD *)(v8 + 16);
            if (*(_DWORD *)(v8 + 32) < v56)
            {
              v57 = *(_DWORD *)(v8 + 28);
              v58 = *(_QWORD *)(v8 + 20);
              *v47 = *v48;
              *(_DWORD *)(v8 + 32) = v56;
              *(_QWORD *)(v8 + 36) = v58;
              *(_DWORD *)(v8 + 44) = v57;
              v59 = *(_DWORD *)v8;
              if (*(_DWORD *)(v8 + 16) < *(_DWORD *)v8)
              {
                v60 = *(_DWORD *)(v8 + 12);
                v61 = *(_QWORD *)(v8 + 4);
                *(_OWORD *)v8 = *v47;
                *(_DWORD *)(v8 + 16) = v59;
                *(_QWORD *)(v8 + 20) = v61;
                *(_DWORD *)(v8 + 28) = v60;
              }
            }
          }
        }
        return;
      default:
        if (v9 <= 383)
        {
          v62 = (unsigned int *)(v8 + 16);
          v64 = (unsigned int *)v8 == a2 || v62 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v64)
            {
              v65 = 0;
              v66 = v8;
              do
              {
                v67 = v62;
                v68 = *v62;
                if (v68 < *(_DWORD *)v66)
                {
                  v69 = *(_QWORD *)(v66 + 20);
                  v70 = *(_DWORD *)(v66 + 28);
                  v71 = v65;
                  while (1)
                  {
                    *(_OWORD *)(v8 + v71 + 16) = *(_OWORD *)(v8 + v71);
                    if (!v71)
                      break;
                    v72 = *(_DWORD *)(v8 + v71 - 16);
                    v71 -= 16;
                    if (v68 >= v72)
                    {
                      v73 = v8 + v71 + 16;
                      goto LABEL_88;
                    }
                  }
                  v73 = v8;
LABEL_88:
                  *(_DWORD *)v73 = v68;
                  *(_QWORD *)(v73 + 4) = v69;
                  *(_DWORD *)(v73 + 12) = v70;
                }
                v62 = v67 + 4;
                v65 += 16;
                v66 = (unint64_t)v67;
              }
              while (v67 + 4 != a2);
            }
          }
          else if (!v64)
          {
            v105 = -2;
            v106 = 1;
            v107 = v8;
            while (1)
            {
              v108 = *v62;
              if (*v62 < *(_DWORD *)v107)
                break;
LABEL_137:
              v107 = v8 + 16 * v106++;
              v62 += 4;
              --v105;
              if (v62 == a2)
                return;
            }
            v109 = *(_QWORD *)(v107 + 20);
            v110 = *(_DWORD *)(v107 + 28);
            v111 = v105;
            v112 = v62;
            while (1)
            {
              *(_OWORD *)v112 = *((_OWORD *)v112 - 1);
              if (__CFADD__(v111++, 1))
                break;
              v114 = v112 - 4;
              v115 = *(v112 - 8);
              v112 -= 4;
              if (v108 >= v115)
              {
                *v114 = v108;
                *(_QWORD *)(v114 + 1) = v109;
                v114[3] = v110;
                goto LABEL_137;
              }
            }
LABEL_139:
            __break(1u);
          }
          return;
        }
        if (!a3)
        {
          if ((unsigned int *)v8 == a2)
            return;
          v74 = (v10 - 2) >> 1;
          v75 = v74;
          do
          {
            v76 = v75;
            if (v74 >= v75)
            {
              v77 = (2 * v75) | 1;
              v78 = (unsigned int *)(v8 + 16 * v77);
              if (2 * v76 + 2 >= (uint64_t)v10)
              {
                v79 = *v78;
              }
              else
              {
                v79 = *v78;
                v80 = v78[4];
                if (*v78 <= v80)
                  v79 = v78[4];
                if (*v78 < v80)
                {
                  v78 += 4;
                  v77 = 2 * v76 + 2;
                }
              }
              v81 = v8 + 16 * v76;
              v82 = *(_DWORD *)v81;
              if (v79 >= *(_DWORD *)v81)
              {
                v83 = *(_QWORD *)(v81 + 4);
                v84 = *(_DWORD *)(v81 + 12);
                do
                {
                  v85 = v78;
                  *(_OWORD *)v81 = *(_OWORD *)v78;
                  if (v74 < v77)
                    break;
                  v86 = (2 * v77) | 1;
                  v78 = (unsigned int *)(v8 + 16 * v86);
                  v77 = 2 * v77 + 2;
                  if (v77 >= (uint64_t)v10)
                  {
                    v87 = *v78;
                    v77 = v86;
                  }
                  else
                  {
                    v87 = *v78;
                    v88 = v78[4];
                    if (*v78 <= v88)
                      v87 = v78[4];
                    if (*v78 >= v88)
                      v77 = v86;
                    else
                      v78 += 4;
                  }
                  v81 = (unint64_t)v85;
                }
                while (v87 >= v82);
                *v85 = v82;
                *(_QWORD *)(v85 + 1) = v83;
                v85[3] = v84;
              }
            }
            v75 = v76 - 1;
          }
          while (v76);
          v89 = (unint64_t)v9 >> 4;
          while (2)
          {
            v90 = 0;
            v91 = a2;
            v93 = *(_DWORD *)v8;
            v92 = *(_DWORD *)(v8 + 4);
            v94 = *(_DWORD *)(v8 + 8);
            v95 = *(_DWORD *)(v8 + 12);
            v96 = (_OWORD *)v8;
            do
            {
              v97 = (unsigned int *)&v96[v90 + 1];
              v98 = (2 * v90) | 1;
              v99 = 2 * v90 + 2;
              if (v99 < v89 && *v97 < v97[4])
              {
                v97 += 4;
                v98 = v99;
              }
              *v96 = *(_OWORD *)v97;
              v96 = v97;
              v90 = v98;
            }
            while (v98 <= (uint64_t)((unint64_t)(v89 - 2) >> 1));
            a2 -= 4;
            if (v97 == v91 - 4)
            {
LABEL_126:
              *v97 = v93;
              v97[1] = v92;
              v97[2] = v94;
              v97[3] = v95;
            }
            else
            {
              *(_OWORD *)v97 = *(_OWORD *)a2;
              *(v91 - 4) = v93;
              *(v91 - 3) = v92;
              *(v91 - 2) = v94;
              *(v91 - 1) = v95;
              v100 = (uint64_t)v97 - v8 + 16;
              if (v100 >= 17)
              {
                v101 = (((unint64_t)v100 >> 4) - 2) >> 1;
                v102 = (unsigned int *)(v8 + 16 * v101);
                v93 = *v97;
                if (*v102 < *v97)
                {
                  v92 = v97[1];
                  v94 = v97[2];
                  v103 = v97;
                  v95 = v97[3];
                  do
                  {
                    v97 = v102;
                    *(_OWORD *)v103 = *(_OWORD *)v102;
                    if (!v101)
                      break;
                    v101 = (v101 - 1) >> 1;
                    v102 = (unsigned int *)(v8 + 16 * v101);
                    v103 = v97;
                  }
                  while (*v102 < v93);
                  goto LABEL_126;
                }
              }
            }
            if (v89-- <= 2)
              return;
            continue;
          }
        }
        v11 = v10 >> 1;
        v12 = (unsigned int *)(v8 + 16 * (v10 >> 1));
        if ((unint64_t)v9 < 0x801)
        {
          std::__sort3[abi:fe180100]<std::_ClassicAlgPolicy,TSFNTFont::CopyData(void)::$_1 &,sfntDirectoryEntry *>((unsigned int *)(a1 + 16 * (v10 >> 1)), (unsigned int *)a1, a2 - 4);
        }
        else
        {
          std::__sort3[abi:fe180100]<std::_ClassicAlgPolicy,TSFNTFont::CopyData(void)::$_1 &,sfntDirectoryEntry *>((unsigned int *)a1, (unsigned int *)(a1 + 16 * (v10 >> 1)), a2 - 4);
          std::__sort3[abi:fe180100]<std::_ClassicAlgPolicy,TSFNTFont::CopyData(void)::$_1 &,sfntDirectoryEntry *>((unsigned int *)(a1 + 16), v12 - 4, a2 - 8);
          std::__sort3[abi:fe180100]<std::_ClassicAlgPolicy,TSFNTFont::CopyData(void)::$_1 &,sfntDirectoryEntry *>((unsigned int *)(a1 + 32), (unsigned int *)(a1 + 16 + 16 * v11), a2 - 12);
          std::__sort3[abi:fe180100]<std::_ClassicAlgPolicy,TSFNTFont::CopyData(void)::$_1 &,sfntDirectoryEntry *>(v12 - 4, v12, (unsigned int *)(a1 + 16 + 16 * v11));
          v13 = *(_OWORD *)a1;
          *(_OWORD *)a1 = *(_OWORD *)v12;
          *(_OWORD *)v12 = v13;
        }
        --a3;
        v14 = *(_DWORD *)a1;
        if ((a4 & 1) == 0 && *(_DWORD *)(a1 - 16) >= v14)
        {
          v31 = *(_QWORD *)(a1 + 4);
          v32 = *(_DWORD *)(a1 + 12);
          if (v14 >= *(a2 - 4))
          {
            v35 = a1 + 16;
            do
            {
              v8 = v35;
              if (v35 >= (unint64_t)a2)
                break;
              v35 += 16;
            }
            while (v14 >= *(_DWORD *)v8);
          }
          else
          {
            v33 = (unsigned int *)(a1 + 16);
            do
            {
              if (v33 == a2)
                goto LABEL_139;
              v34 = *v33;
              v33 += 4;
            }
            while (v14 >= v34);
            v8 = (unint64_t)(v33 - 4);
          }
          v36 = a2;
          if (v8 < (unint64_t)a2)
          {
            v36 = a2;
            while (v36 != (unsigned int *)a1)
            {
              v37 = *(v36 - 4);
              v36 -= 4;
              if (v14 >= v37)
                goto LABEL_49;
            }
            goto LABEL_139;
          }
LABEL_49:
          if (v8 < (unint64_t)v36)
          {
            v38 = *(_DWORD *)v8;
            do
            {
              v39 = *(_DWORD *)(v8 + 12);
              v40 = *(_QWORD *)(v8 + 4);
              *(_OWORD *)v8 = *(_OWORD *)v36;
              *v36 = v38;
              *(_QWORD *)(v36 + 1) = v40;
              v36[3] = v39;
              v41 = (unsigned int *)(v8 + 16);
              do
              {
                if (v41 == a2)
                  goto LABEL_139;
                v42 = *v41;
                v41 += 4;
                v38 = v42;
              }
              while (v14 >= v42);
              v8 = (unint64_t)(v41 - 4);
              do
              {
                if (v36 == (unsigned int *)a1)
                  goto LABEL_139;
                v43 = *(v36 - 4);
                v36 -= 4;
              }
              while (v14 < v43);
            }
            while (v8 < (unint64_t)v36);
          }
          if (v8 - 16 != a1)
            *(_OWORD *)a1 = *(_OWORD *)(v8 - 16);
          a4 = 0;
          *(_DWORD *)(v8 - 16) = v14;
          *(_QWORD *)(v8 - 12) = v31;
          *(_DWORD *)(v8 - 4) = v32;
          continue;
        }
        v15 = 0;
        v16 = *(_QWORD *)(a1 + 4);
        v17 = *(_DWORD *)(a1 + 12);
        do
        {
          v18 = (unsigned int *)(a1 + v15 + 16);
          if (v18 == a2)
            goto LABEL_139;
          v19 = *v18;
          v15 += 16;
        }
        while (*v18 < v14);
        v20 = a1 + v15;
        v21 = a2;
        if (v15 != 16)
        {
          while (v21 != (unsigned int *)a1)
          {
            v22 = *(v21 - 4);
            v21 -= 4;
            if (v22 < v14)
              goto LABEL_20;
          }
          goto LABEL_139;
        }
        v21 = a2;
        do
        {
          if (v20 >= (unint64_t)v21)
            break;
          v23 = *(v21 - 4);
          v21 -= 4;
        }
        while (v23 >= v14);
LABEL_20:
        if (v20 >= (unint64_t)v21)
        {
          v8 = a1 + v15;
        }
        else
        {
          v24 = (unint64_t)v21;
          v8 = v20;
          do
          {
            v25 = *(_DWORD *)(v8 + 12);
            v26 = *(_QWORD *)(v8 + 4);
            *(_OWORD *)v8 = *(_OWORD *)v24;
            *(_DWORD *)v24 = v19;
            *(_QWORD *)(v24 + 4) = v26;
            *(_DWORD *)(v24 + 12) = v25;
            v27 = (unsigned int *)(v8 + 16);
            do
            {
              if (v27 == a2)
                goto LABEL_139;
              v28 = *v27;
              v27 += 4;
              v19 = v28;
            }
            while (v28 < v14);
            v8 = (unint64_t)(v27 - 4);
            do
            {
              if (v24 == a1)
                goto LABEL_139;
              v29 = *(_DWORD *)(v24 - 16);
              v24 -= 16;
            }
            while (v29 >= v14);
          }
          while (v8 < v24);
        }
        if (v8 - 16 != a1)
          *(_OWORD *)a1 = *(_OWORD *)(v8 - 16);
        *(_DWORD *)(v8 - 16) = v14;
        *(_QWORD *)(v8 - 12) = v16;
        *(_DWORD *)(v8 - 4) = v17;
        if (v20 < (unint64_t)v21)
        {
LABEL_36:
          std::__introsort<std::_ClassicAlgPolicy,TSFNTFont::CopyData(void)::$_1 &,sfntDirectoryEntry *,false>(a1, v8 - 16, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v30 = std::__insertion_sort_incomplete[abi:fe180100]<std::_ClassicAlgPolicy,TSFNTFont::CopyData(void)::$_1 &,sfntDirectoryEntry *>(a1, v8 - 16);
        if (!std::__insertion_sort_incomplete[abi:fe180100]<std::_ClassicAlgPolicy,TSFNTFont::CopyData(void)::$_1 &,sfntDirectoryEntry *>(v8, (uint64_t)a2))
        {
          if (v30)
            continue;
          goto LABEL_36;
        }
        a2 = (unsigned int *)(v8 - 16);
        if (!v30)
          goto LABEL_1;
        return;
    }
  }
}

  v8 = a1;
  while (2)
  {
    a1 = v8;
    v9 = a2 - v8;
    v10 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2 - v8) >> 3);
    switch(v10)
    {
      case 0:
      case 1:
        return;
      case 2:
        v47 = *(_DWORD *)(a2 - 40);
        v46 = a2 - 40;
        if (v47 < *(_DWORD *)v8)
        {
          v132 = *(_QWORD *)(v8 + 32);
          v116 = *(_OWORD *)v8;
          v124 = *(_OWORD *)(v8 + 16);
          v48 = *(_OWORD *)v46;
          v49 = *(_OWORD *)(v46 + 16);
          *(_QWORD *)(v8 + 32) = *(_QWORD *)(v46 + 32);
          *(_OWORD *)v8 = v48;
          *(_OWORD *)(v8 + 16) = v49;
          *(_QWORD *)(v46 + 32) = v132;
          *(_OWORD *)v46 = v116;
          *(_OWORD *)(v46 + 16) = v124;
        }
        return;
      case 3:
        std::__sort3[abi:fe180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,woff2::Table *>((__int128 *)v8, (unsigned int *)(v8 + 40), (unsigned int *)(a2 - 40));
        return;
      case 4:
        std::__sort4[abi:fe180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,woff2::Table *>(v8, v8 + 40, v8 + 80, a2 - 40);
        return;
      case 5:
        std::__sort5[abi:fe180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,woff2::Table *>(v8, v8 + 40, v8 + 80, v8 + 120, a2 - 40);
        return;
      default:
        if (v9 > 959)
        {
          if (!a3)
          {
            if (v8 != a2)
            {
              v61 = (unint64_t)(v10 - 2) >> 1;
              v62 = v61;
              do
              {
                v63 = v62;
                if (v61 >= v62)
                {
                  v64 = (2 * v62) | 1;
                  v65 = v8 + 40 * v64;
                  if (2 * v63 + 2 >= v10)
                  {
                    v66 = *(_DWORD *)v65;
                  }
                  else
                  {
                    v66 = *(_DWORD *)v65;
                    v67 = *(_DWORD *)(v65 + 40);
                    if (*(_DWORD *)v65 <= v67)
                      v66 = *(_DWORD *)(v65 + 40);
                    if (*(_DWORD *)v65 < v67)
                    {
                      v65 += 40;
                      v64 = 2 * v63 + 2;
                    }
                  }
                  v68 = v8 + 40 * v63;
                  v69 = *(_DWORD *)v68;
                  if (v66 >= *(_DWORD *)v68)
                  {
                    v134 = *(_DWORD *)(v68 + 36);
                    v118 = *(_OWORD *)(v68 + 4);
                    v126 = *(_OWORD *)(v68 + 20);
                    do
                    {
                      v70 = v65;
                      v71 = *(_OWORD *)v65;
                      v72 = *(_OWORD *)(v65 + 16);
                      *(_QWORD *)(v68 + 32) = *(_QWORD *)(v65 + 32);
                      *(_OWORD *)v68 = v71;
                      *(_OWORD *)(v68 + 16) = v72;
                      if (v61 < v64)
                        break;
                      v73 = (2 * v64) | 1;
                      v65 = v8 + 40 * v73;
                      v64 = 2 * v64 + 2;
                      if (v64 >= v10)
                      {
                        v74 = *(_DWORD *)v65;
                        v64 = v73;
                      }
                      else
                      {
                        v74 = *(_DWORD *)v65;
                        v75 = *(_DWORD *)(v65 + 40);
                        if (*(_DWORD *)v65 <= v75)
                          v74 = *(_DWORD *)(v65 + 40);
                        if (*(_DWORD *)v65 >= v75)
                          v64 = v73;
                        else
                          v65 += 40;
                      }
                      v68 = v70;
                    }
                    while (v74 >= v69);
                    *(_DWORD *)v70 = v69;
                    *(_DWORD *)(v70 + 36) = v134;
                    *(_OWORD *)(v70 + 20) = v126;
                    *(_OWORD *)(v70 + 4) = v118;
                  }
                }
                v62 = v63 - 1;
              }
              while (v63);
              v76 = v9 / 0x28uLL;
              do
              {
                v77 = 0;
                v135 = *(_QWORD *)(v8 + 32);
                v119 = *(_OWORD *)v8;
                v127 = *(_OWORD *)(v8 + 16);
                v78 = v8;
                do
                {
                  v79 = v78 + 40 * v77 + 40;
                  v80 = (2 * v77) | 1;
                  v81 = 2 * v77 + 2;
                  if (v81 < v76 && *(_DWORD *)v79 < *(_DWORD *)(v79 + 40))
                  {
                    v79 += 40;
                    v80 = v81;
                  }
                  v82 = *(_OWORD *)v79;
                  v83 = *(_OWORD *)(v79 + 16);
                  *(_QWORD *)(v78 + 32) = *(_QWORD *)(v79 + 32);
                  *(_OWORD *)v78 = v82;
                  *(_OWORD *)(v78 + 16) = v83;
                  v78 = v79;
                  v77 = v80;
                }
                while (v80 <= (uint64_t)((unint64_t)(v76 - 2) >> 1));
                a2 -= 40;
                if (v79 == a2)
                {
                  *(_QWORD *)(v79 + 32) = v135;
                  *(_OWORD *)v79 = v119;
                  *(_OWORD *)(v79 + 16) = v127;
                }
                else
                {
                  v84 = *(_OWORD *)a2;
                  v85 = *(_OWORD *)(a2 + 16);
                  *(_QWORD *)(v79 + 32) = *(_QWORD *)(a2 + 32);
                  *(_OWORD *)v79 = v84;
                  *(_OWORD *)(v79 + 16) = v85;
                  *(_QWORD *)(a2 + 32) = v135;
                  *(_OWORD *)a2 = v119;
                  *(_OWORD *)(a2 + 16) = v127;
                  v86 = v79 - v8 + 40;
                  if (v86 >= 41)
                  {
                    v87 = (v86 / 0x28uLL - 2) >> 1;
                    v88 = v8 + 40 * v87;
                    v89 = *(_DWORD *)v79;
                    if (*(_DWORD *)v88 < *(_DWORD *)v79)
                    {
                      v112 = *(_DWORD *)(v79 + 36);
                      v106 = *(_OWORD *)(v79 + 4);
                      v109 = *(_OWORD *)(v79 + 20);
                      do
                      {
                        v90 = v88;
                        v91 = *(_OWORD *)v88;
                        v92 = *(_OWORD *)(v88 + 16);
                        *(_QWORD *)(v79 + 32) = *(_QWORD *)(v88 + 32);
                        *(_OWORD *)v79 = v91;
                        *(_OWORD *)(v79 + 16) = v92;
                        if (!v87)
                          break;
                        v87 = (v87 - 1) >> 1;
                        v88 = v8 + 40 * v87;
                        v79 = v90;
                      }
                      while (*(_DWORD *)v88 < v89);
                      *(_DWORD *)v90 = v89;
                      *(_DWORD *)(v90 + 36) = v112;
                      *(_OWORD *)(v90 + 20) = v109;
                      *(_OWORD *)(v90 + 4) = v106;
                    }
                  }
                }
              }
              while (v76-- > 2);
            }
            return;
          }
          v11 = (unint64_t)v10 >> 1;
          v12 = v8 + 40 * ((unint64_t)v10 >> 1);
          if ((unint64_t)v9 < 0x1401)
          {
            std::__sort3[abi:fe180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,woff2::Table *>((__int128 *)v12, (unsigned int *)a1, (unsigned int *)(a2 - 40));
          }
          else
          {
            std::__sort3[abi:fe180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,woff2::Table *>((__int128 *)a1, (unsigned int *)v12, (unsigned int *)(a2 - 40));
            v13 = 5 * v11;
            v14 = (unsigned int *)(a1 + 40 * v11 - 40);
            std::__sort3[abi:fe180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,woff2::Table *>((__int128 *)(a1 + 40), v14, (unsigned int *)(a2 - 80));
            v15 = (unsigned int *)(a1 + 40 + 8 * v13);
            std::__sort3[abi:fe180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,woff2::Table *>((__int128 *)(a1 + 80), v15, (unsigned int *)(a2 - 120));
            std::__sort3[abi:fe180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,woff2::Table *>((__int128 *)v14, (unsigned int *)v12, v15);
            v129 = *(_QWORD *)(a1 + 32);
            v113 = *(_OWORD *)a1;
            v121 = *(_OWORD *)(a1 + 16);
            v16 = *(_OWORD *)v12;
            v17 = *(_OWORD *)(v12 + 16);
            *(_QWORD *)(a1 + 32) = *(_QWORD *)(v12 + 32);
            *(_OWORD *)a1 = v16;
            *(_OWORD *)(a1 + 16) = v17;
            *(_QWORD *)(v12 + 32) = v129;
            *(_OWORD *)v12 = v113;
            *(_OWORD *)(v12 + 16) = v121;
          }
          --a3;
          v18 = *(_DWORD *)a1;
          if ((a4 & 1) == 0 && *(_DWORD *)(a1 - 40) >= v18)
          {
            v111 = *(_DWORD *)(a1 + 36);
            v105 = *(_OWORD *)(a1 + 4);
            v108 = *(_OWORD *)(a1 + 20);
            if (v18 >= *(_DWORD *)(a2 - 40))
            {
              v36 = a1 + 40;
              do
              {
                v8 = v36;
                if (v36 >= a2)
                  break;
                v36 += 40;
              }
              while (v18 >= *(_DWORD *)v8);
            }
            else
            {
              v34 = (unsigned int *)(a1 + 40);
              do
              {
                if (v34 == (unsigned int *)a2)
                  goto LABEL_135;
                v35 = *v34;
                v34 += 10;
              }
              while (v18 >= v35);
              v8 = (unint64_t)(v34 - 10);
            }
            v37 = a2;
            if (v8 < a2)
            {
              v37 = a2;
              while (v37 != a1)
              {
                v38 = *(_DWORD *)(v37 - 40);
                v37 -= 40;
                if (v18 >= v38)
                  goto LABEL_56;
              }
LABEL_135:
              __break(1u);
            }
LABEL_56:
            if (v8 < v37)
            {
              v131 = *(_QWORD *)(v8 + 32);
              v115 = *(_OWORD *)v8;
              v123 = *(_OWORD *)(v8 + 16);
              v39 = *(_OWORD *)v37;
              v40 = *(_OWORD *)(v37 + 16);
              *(_QWORD *)(v8 + 32) = *(_QWORD *)(v37 + 32);
              *(_OWORD *)v8 = v39;
              *(_OWORD *)(v8 + 16) = v40;
              *(_QWORD *)(v37 + 32) = v131;
              *(_OWORD *)v37 = v115;
              *(_OWORD *)(v37 + 16) = v123;
              v41 = (unsigned int *)(v8 + 40);
              do
              {
                if (v41 == (unsigned int *)a2)
                  goto LABEL_135;
                v42 = *v41;
                v41 += 10;
              }
              while (v18 >= v42);
              v8 = (unint64_t)(v41 - 10);
              while (v37 != a1)
              {
                v43 = *(_DWORD *)(v37 - 40);
                v37 -= 40;
                if (v18 >= v43)
                  goto LABEL_56;
              }
              goto LABEL_135;
            }
            if (v8 - 40 != a1)
            {
              v44 = *(_OWORD *)(v8 - 40);
              v45 = *(_OWORD *)(v8 - 24);
              *(_QWORD *)(a1 + 32) = *(_QWORD *)(v8 - 8);
              *(_OWORD *)a1 = v44;
              *(_OWORD *)(a1 + 16) = v45;
            }
            a4 = 0;
            *(_DWORD *)(v8 - 40) = v18;
            *(_DWORD *)(v8 - 4) = v111;
            *(_OWORD *)(v8 - 20) = v108;
            *(_OWORD *)(v8 - 36) = v105;
            continue;
          }
          v19 = 0;
          v110 = *(_DWORD *)(a1 + 36);
          v104 = *(_OWORD *)(a1 + 4);
          v107 = *(_OWORD *)(a1 + 20);
          do
          {
            v20 = (unsigned int *)(a1 + v19 + 40);
            if (v20 == (unsigned int *)a2)
              goto LABEL_135;
            v19 += 40;
          }
          while (*v20 < v18);
          v21 = a1 + v19;
          v22 = a2;
          if (v19 != 40)
          {
            while (v22 != a1)
            {
              v23 = *(_DWORD *)(v22 - 40);
              v22 -= 40;
              if (v23 < v18)
                goto LABEL_20;
            }
            goto LABEL_135;
          }
          v22 = a2;
          do
          {
            if (v21 >= v22)
              break;
            v24 = *(_DWORD *)(v22 - 40);
            v22 -= 40;
          }
          while (v24 >= v18);
LABEL_20:
          if (v21 >= v22)
          {
            v8 = a1 + v19;
          }
          else
          {
            v25 = v22;
            v8 = v21;
            do
            {
              v130 = *(_QWORD *)(v8 + 32);
              v114 = *(_OWORD *)v8;
              v122 = *(_OWORD *)(v8 + 16);
              v26 = *(_OWORD *)v25;
              v27 = *(_OWORD *)(v25 + 16);
              *(_QWORD *)(v8 + 32) = *(_QWORD *)(v25 + 32);
              *(_OWORD *)v8 = v26;
              *(_OWORD *)(v8 + 16) = v27;
              *(_QWORD *)(v25 + 32) = v130;
              *(_OWORD *)v25 = v114;
              *(_OWORD *)(v25 + 16) = v122;
              v28 = (unsigned int *)(v8 + 40);
              do
              {
                if (v28 == (unsigned int *)a2)
                  goto LABEL_135;
                v29 = *v28;
                v28 += 10;
              }
              while (v29 < v18);
              v8 = (unint64_t)(v28 - 10);
              do
              {
                if (v25 == a1)
                  goto LABEL_135;
                v30 = *(_DWORD *)(v25 - 40);
                v25 -= 40;
              }
              while (v30 >= v18);
            }
            while (v8 < v25);
          }
          if (v8 - 40 != a1)
          {
            v31 = *(_OWORD *)(v8 - 40);
            v32 = *(_OWORD *)(v8 - 24);
            *(_QWORD *)(a1 + 32) = *(_QWORD *)(v8 - 8);
            *(_OWORD *)a1 = v31;
            *(_OWORD *)(a1 + 16) = v32;
          }
          *(_DWORD *)(v8 - 40) = v18;
          *(_DWORD *)(v8 - 4) = v110;
          *(_OWORD *)(v8 - 20) = v107;
          *(_OWORD *)(v8 - 36) = v104;
          if (v21 < v22)
          {
LABEL_36:
            std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,woff2::Table *,false>(a1, v8 - 40, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          v33 = std::__insertion_sort_incomplete[abi:fe180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,woff2::Table *>(a1, v8 - 40);
          if (!std::__insertion_sort_incomplete[abi:fe180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,woff2::Table *>(v8, a2))
          {
            if (!v33)
              goto LABEL_36;
            continue;
          }
          a2 = v8 - 40;
          if (v33)
            return;
          goto LABEL_1;
        }
        v50 = (_DWORD *)(v8 + 40);
        v52 = v8 == a2 || v50 == (_DWORD *)a2;
        if ((a4 & 1) != 0)
        {
          if (!v52)
          {
            v53 = 0;
            v54 = v8;
            do
            {
              v55 = v50;
              v56 = *v50;
              if (v56 < *(_DWORD *)v54)
              {
                v117 = *(_OWORD *)(v54 + 44);
                v125 = *(_OWORD *)(v54 + 60);
                v133 = *(_DWORD *)(v54 + 76);
                v57 = v53;
                while (1)
                {
                  v58 = v8 + v57;
                  v59 = *(_OWORD *)(v8 + v57 + 16);
                  *(_OWORD *)(v58 + 40) = *(_OWORD *)(v8 + v57);
                  *(_OWORD *)(v58 + 56) = v59;
                  *(_QWORD *)(v58 + 72) = *(_QWORD *)(v8 + v57 + 32);
                  if (!v57)
                    break;
                  v57 -= 40;
                  if (v56 >= *(_DWORD *)(v58 - 40))
                  {
                    v60 = v8 + v57 + 40;
                    goto LABEL_83;
                  }
                }
                v60 = v8;
LABEL_83:
                *(_DWORD *)v60 = v56;
                *(_DWORD *)(v60 + 36) = v133;
                *(_OWORD *)(v60 + 20) = v125;
                *(_OWORD *)(v60 + 4) = v117;
              }
              v50 = v55 + 10;
              v53 += 40;
              v54 = (unint64_t)v55;
            }
            while (v55 + 10 != (_DWORD *)a2);
          }
        }
        else if (!v52)
        {
          v94 = -2;
          v95 = 1;
          v96 = v8;
          do
          {
            v97 = *v50;
            if (*v50 < *(_DWORD *)v96)
            {
              v120 = *(_OWORD *)(v96 + 44);
              v128 = *(_OWORD *)(v96 + 60);
              v136 = *(_DWORD *)(v96 + 76);
              v98 = v94;
              v99 = v50;
              do
              {
                v100 = *(_OWORD *)(v99 - 6);
                *(_OWORD *)v99 = *(_OWORD *)(v99 - 10);
                *((_OWORD *)v99 + 1) = v100;
                *((_QWORD *)v99 + 4) = *((_QWORD *)v99 - 1);
                if (__CFADD__(v98++, 1))
                  goto LABEL_135;
                v102 = v99 - 10;
                v103 = *(v99 - 20);
                v99 -= 10;
              }
              while (v97 < v103);
              *v102 = v97;
              v102[9] = v136;
              *(_OWORD *)(v102 + 5) = v128;
              *(_OWORD *)(v102 + 1) = v120;
            }
            v96 = v8 + 40 * v95++;
            v50 += 10;
            --v94;
          }
          while (v50 != (_DWORD *)a2);
        }
        return;
    }
  }
}

unsigned int *std::__sort3[abi:fe180100]<std::_ClassicAlgPolicy,TSFNTFont::CopyData(void)::$_1 &,sfntDirectoryEntry *>(unsigned int *result, unsigned int *a2, unsigned int *a3)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  uint64_t v13;

  v3 = *a2;
  v4 = *result;
  v5 = *a3;
  if (*a2 >= *result)
  {
    if (v5 < v3)
    {
      v9 = a2[3];
      v10 = *(_QWORD *)(a2 + 1);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *a3 = v3;
      *(_QWORD *)(a3 + 1) = v10;
      a3[3] = v9;
      v11 = *result;
      if (*a2 < *result)
      {
        v12 = result[3];
        v13 = *(_QWORD *)(result + 1);
        *(_OWORD *)result = *(_OWORD *)a2;
        *a2 = v11;
        *(_QWORD *)(a2 + 1) = v13;
        a2[3] = v12;
      }
    }
  }
  else
  {
    v7 = result[1];
    v6 = result[2];
    v8 = result[3];
    if (v5 >= v3)
    {
      *(_OWORD *)result = *(_OWORD *)a2;
      *a2 = v4;
      a2[1] = v7;
      a2[2] = v6;
      a2[3] = v8;
      if (*a3 >= v4)
        return result;
      *(_OWORD *)a2 = *(_OWORD *)a3;
    }
    else
    {
      *(_OWORD *)result = *(_OWORD *)a3;
    }
    *a3 = v4;
    a3[1] = v7;
    a3[2] = v6;
    a3[3] = v8;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:fe180100]<std::_ClassicAlgPolicy,TSFNTFont::CopyData(void)::$_1 &,sfntDirectoryEntry *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  unsigned int v6;
  int v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  _OWORD *v19;
  _OWORD *v20;
  _OWORD *v21;
  unsigned int v22;
  int v23;
  uint64_t v24;
  unsigned int v25;
  int v26;
  uint64_t v27;
  unsigned int v28;
  int v29;
  uint64_t v30;
  unsigned int v31;
  int v32;
  uint64_t v33;

  v4 = (a2 - a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(_DWORD *)a1;
      if (*(_DWORD *)(a2 - 16) < *(_DWORD *)a1)
      {
        v7 = *(_DWORD *)(a1 + 12);
        v8 = *(_QWORD *)(a1 + 4);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 16);
        *(_DWORD *)(a2 - 16) = v6;
        *(_QWORD *)(a2 - 12) = v8;
        *(_DWORD *)(a2 - 4) = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:fe180100]<std::_ClassicAlgPolicy,TSFNTFont::CopyData(void)::$_1 &,sfntDirectoryEntry *>((unsigned int *)a1, (unsigned int *)(a1 + 16), (unsigned int *)(a2 - 16));
      return 1;
    case 4:
      std::__sort4[abi:fe180100]<std::_ClassicAlgPolicy,TSFNTFont::CopyData(void)::$_1 &,sfntDirectoryEntry *>(a1, a1 + 16, a1 + 32, a2 - 16);
      return 1;
    case 5:
      v19 = (_OWORD *)(a1 + 16);
      v20 = (_OWORD *)(a1 + 32);
      v21 = (_OWORD *)(a1 + 48);
      std::__sort4[abi:fe180100]<std::_ClassicAlgPolicy,TSFNTFont::CopyData(void)::$_1 &,sfntDirectoryEntry *>(a1, a1 + 16, a1 + 32, a1 + 48);
      v22 = *(_DWORD *)(a1 + 48);
      if (*(_DWORD *)(a2 - 16) < v22)
      {
        v23 = *(_DWORD *)(a1 + 60);
        v24 = *(_QWORD *)(a1 + 52);
        *v21 = *(_OWORD *)(a2 - 16);
        *(_DWORD *)(a2 - 16) = v22;
        *(_QWORD *)(a2 - 12) = v24;
        *(_DWORD *)(a2 - 4) = v23;
        v25 = *(_DWORD *)(a1 + 32);
        if (*(_DWORD *)(a1 + 48) < v25)
        {
          v26 = *(_DWORD *)(a1 + 44);
          v27 = *(_QWORD *)(a1 + 36);
          *v20 = *v21;
          *(_DWORD *)(a1 + 48) = v25;
          *(_QWORD *)(a1 + 52) = v27;
          *(_DWORD *)(a1 + 60) = v26;
          v28 = *(_DWORD *)(a1 + 16);
          if (*(_DWORD *)(a1 + 32) < v28)
          {
            v29 = *(_DWORD *)(a1 + 28);
            v30 = *(_QWORD *)(a1 + 20);
            *v19 = *v20;
            *(_DWORD *)(a1 + 32) = v28;
            *(_QWORD *)(a1 + 36) = v30;
            *(_DWORD *)(a1 + 44) = v29;
            v31 = *(_DWORD *)a1;
            if (*(_DWORD *)(a1 + 16) < *(_DWORD *)a1)
            {
              v32 = *(_DWORD *)(a1 + 12);
              v33 = *(_QWORD *)(a1 + 4);
              *(_OWORD *)a1 = *v19;
              *(_DWORD *)(a1 + 16) = v31;
              *(_QWORD *)(a1 + 20) = v33;
              *(_DWORD *)(a1 + 28) = v32;
            }
          }
        }
      }
      return 1;
    default:
      v9 = (_DWORD *)(a1 + 32);
      std::__sort3[abi:fe180100]<std::_ClassicAlgPolicy,TSFNTFont::CopyData(void)::$_1 &,sfntDirectoryEntry *>((unsigned int *)a1, (unsigned int *)(a1 + 16), (unsigned int *)(a1 + 32));
      v10 = a1 + 48;
      if (a1 + 48 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    v13 = *(_DWORD *)v10;
    if (*(_DWORD *)v10 < *v9)
    {
      v14 = *(_QWORD *)(v10 + 4);
      v15 = *(_DWORD *)(v10 + 12);
      v16 = v11;
      while (1)
      {
        *(_OWORD *)(a1 + v16 + 48) = *(_OWORD *)(a1 + v16 + 32);
        if (v16 == -32)
          break;
        v17 = *(_DWORD *)(a1 + v16 + 16);
        v16 -= 16;
        if (v13 >= v17)
        {
          v18 = a1 + v16 + 48;
          goto LABEL_13;
        }
      }
      v18 = a1;
LABEL_13:
      *(_DWORD *)v18 = v13;
      *(_QWORD *)(v18 + 4) = v14;
      *(_DWORD *)(v18 + 12) = v15;
      if (++v12 == 8)
        return v10 + 16 == a2;
    }
    v9 = (_DWORD *)v10;
    v11 += 16;
    v10 += 16;
    if (v10 == a2)
      return 1;
  }
}

double std::__sort4[abi:fe180100]<std::_ClassicAlgPolicy,TSFNTFont::CopyData(void)::$_1 &,sfntDirectoryEntry *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  double result;
  unsigned int v9;
  int v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  int v14;

  std::__sort3[abi:fe180100]<std::_ClassicAlgPolicy,TSFNTFont::CopyData(void)::$_1 &,sfntDirectoryEntry *>((unsigned int *)a1, (unsigned int *)a2, (unsigned int *)a3);
  v9 = *(_DWORD *)a3;
  if (*(_DWORD *)a4 < *(_DWORD *)a3)
  {
    v10 = *(_DWORD *)(a3 + 12);
    result = *(double *)(a3 + 4);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_DWORD *)a4 = v9;
    *(double *)(a4 + 4) = result;
    *(_DWORD *)(a4 + 12) = v10;
    v11 = *(_DWORD *)a2;
    if (*(_DWORD *)a3 < *(_DWORD *)a2)
    {
      v12 = *(_DWORD *)(a2 + 12);
      result = *(double *)(a2 + 4);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_DWORD *)a3 = v11;
      *(double *)(a3 + 4) = result;
      *(_DWORD *)(a3 + 12) = v12;
      v13 = *(_DWORD *)a1;
      if (*(_DWORD *)a2 < *(_DWORD *)a1)
      {
        v14 = *(_DWORD *)(a1 + 12);
        result = *(double *)(a1 + 4);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_DWORD *)a2 = v13;
        *(double *)(a2 + 4) = result;
        *(_DWORD *)(a2 + 12) = v14;
      }
    }
  }
  return result;
}

void *TInlineBufferAllocator<unsigned int,30ul>::allocate(uint64_t a1, unint64_t a2)
{
  unint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v4 = *(_QWORD *)(a1 + 120);
  v2 = (unint64_t *)(a1 + 120);
  v3 = v4;
  v5 = v4 + 4 * a2;
  if (v5 <= (unint64_t)v2)
  {
    *v2 = v5;
    return (void *)v3;
  }
  else
  {
    if (a2 >> 62)
      std::__throw_bad_array_new_length[abi:fe180100]();
    return operator new(4 * a2);
  }
}

uint64_t std::__split_buffer<unsigned int,TInlineBufferAllocator<unsigned int,30ul> &>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  _QWORD *v6;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
    *(_QWORD *)(a1 + 16) = v2 + ((v3 - v2 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  v4 = *(_QWORD **)a1;
  if (*(_QWORD *)a1)
  {
    v5 = *(_QWORD *)(a1 + 32);
    v6 = (_QWORD *)(v5 + 120);
    if (v5 <= (unint64_t)v4 && v6 > v4)
    {
      if (*(_QWORD *)(a1 + 24) == *v6)
        *v6 = v4;
    }
    else
    {
      operator delete(v4);
    }
  }
  return a1;
}

void std::vector<unsigned int,TInlineBufferAllocator<unsigned int,30ul>>::__destroy_vector::operator()[abi:fe180100](uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  BOOL v4;
  BOOL v5;

  v2 = *(_QWORD **)a1;
  if (v2)
  {
    *(_QWORD *)(a1 + 8) = v2;
    v3 = (_QWORD *)(a1 + 144);
    if (a1 + 24 <= (unint64_t)v2)
    {
      v4 = v3 >= v2;
      v5 = v3 == v2;
    }
    else
    {
      v4 = 0;
      v5 = 0;
    }
    if (!v5 && v4)
    {
      if (*(_QWORD *)(a1 + 16) == *(_QWORD *)(a1 + 144))
        *v3 = v2;
    }
    else
    {
      operator delete(v2);
    }
  }
}

void *TInlineBufferAllocator<unsigned short,30ul>::allocate(uint64_t a1, uint64_t a2)
{
  void *result;
  unint64_t v4;

  result = *(void **)(a1 + 64);
  v4 = (unint64_t)result + 2 * a2;
  if (v4 <= a1 + 60)
  {
    *(_QWORD *)(a1 + 64) = v4;
  }
  else
  {
    if (a2 < 0)
      std::__throw_bad_array_new_length[abi:fe180100]();
    return operator new(2 * a2);
  }
  return result;
}

uint64_t std::__split_buffer<unsigned short,TInlineBufferAllocator<unsigned short,30ul> &>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
    *(_QWORD *)(a1 + 16) = v2 + ((v3 - v2 + 1) & 0xFFFFFFFFFFFFFFFELL);
  v4 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    v5 = *(_QWORD *)(a1 + 32);
    if (v5 <= (unint64_t)v4 && v5 + 60 > (unint64_t)v4)
    {
      if (*(_QWORD *)(a1 + 24) == *(_QWORD *)(v5 + 64))
        *(_QWORD *)(v5 + 64) = v4;
    }
    else
    {
      operator delete(v4);
    }
  }
  return a1;
}

void std::vector<unsigned short,TInlineBufferAllocator<unsigned short,30ul>>::__destroy_vector::operator()[abi:fe180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v3;
  BOOL v4;
  BOOL v5;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v1[1] = v2;
    v3 = (void **)((char *)v1 + 84);
    if (v1 + 3 <= v2)
    {
      v4 = v3 >= v2;
      v5 = v3 == v2;
    }
    else
    {
      v4 = 0;
      v5 = 0;
    }
    if (!v5 && v4)
    {
      if (v1[2] == v1[11])
        v1[11] = v2;
    }
    else
    {
      operator delete(v2);
    }
  }
}

void TSFNTFont::FillCharacterSet(__CFCharacterSet *,unsigned int)const::$_0::__invoke(int a1, CFArrayRef theArray, void *a3)
{
  CFRange v5;

  v5.length = CFArrayGetCount(theArray);
  v5.location = 0;
  CFArrayApplyFunction(theArray, v5, (CFArrayApplierFunction)TSFNTFont::FillCharacterSet(__CFCharacterSet *,unsigned int)::$_0::operator() const(void const*,void const*,void *)::{lambda(void const*,void *)#1}::__invoke, a3);
}

uint64_t TSFNTFont::FillCharacterSet(__CFCharacterSet *,unsigned int)::$_0::operator() const(void const*,void const*,void *)::{lambda(void const*,void *)#1}::__invoke(const __CFString *a1, CFMutableCharacterSetRef *a2)
{
  unsigned int v3;
  BOOL v4;
  TOS2UnicodeRanges *v5;
  uint64_t result;
  CFStringRef v7;
  CFRange v8;

  v7 = a1;
  v3 = TCFStr::FirstCharacter(&v7);
  if (*a2)
    v4 = HIWORD(v3) > 0x10u;
  else
    v4 = 1;
  if (!v4)
  {
    v8.location = v3;
    v8.length = 1;
    CFCharacterSetAddCharactersInRange(*a2, v8);
  }
  v5 = a2[1];
  result = TOS2UnicodeRanges::GetRangeBit(v5, v3);
  if ((_DWORD)result != -1)
    *((_DWORD *)v5 + (result >> 5) + 2) |= 1 << result;
  return result;
}

uint64_t TCFStr::FirstCharacter(CFStringRef *this)
{
  const __CFString *v2;
  CFIndex Length;
  CFIndex v4;
  uint64_t result;
  UniChar buffer[2];
  CFRange v8;

  v2 = *this;
  if (!v2)
    return 0xFFFFFFFFLL;
  *(_DWORD *)buffer = -1431655766;
  Length = CFStringGetLength(v2);
  if (Length >= 2)
    v4 = 2;
  else
    v4 = Length;
  v8.location = 0;
  v8.length = v4;
  CFStringGetCharacters(*this, v8, buffer);
  result = buffer[0];
  if (v4 != 1 && (buffer[0] & 0xFC00) == 55296)
  {
    if ((buffer[1] & 0xFC00) == 0xDC00)
      return buffer[1] + (buffer[0] << 10) - 56613888;
    else
      return buffer[0];
  }
  return result;
}

uint64_t TmaxpTable::GetNumGlyphs(TmaxpTable *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _DWORD *exception;

  v1 = *((_QWORD *)this + 1);
  if (!v1
    || (v2 = *(_QWORD *)(v1 + 8)) == 0
    || (v3 = v2 + *((_QWORD *)this + 2), v3 + 6 > TsfntTable::GetTableEnd(this)))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E6176998;
    exception[2] = 4;
  }
  return bswap32(*(unsigned __int16 *)(v3 + 4)) >> 16;
}

uint64_t ThmtxTable::GetHhea(ThmtxTable *this)
{
  unint64_t TableEnd;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  TableEnd = TsfntTable::GetTableEnd(this);
  v3 = *((_QWORD *)this + 1);
  if (!v3)
    return 0;
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4)
    return 0;
  v5 = v4 + *((_QWORD *)this + 2);
  if (TableEnd - v5 >= 0x24)
    return v5;
  else
    return 0;
}

uint64_t NormalizedAxisCoord(unsigned int *a1, uint64_t a2, uint64_t a3)
{
  unsigned int v3;
  signed int *v4;
  uint64_t v5;
  signed int v6;
  signed int v7;
  signed int v8;
  signed int v9;
  BOOL v12;
  int v13;
  int v14;
  uint64_t v15;

  v3 = bswap32(*a1);
  v4 = (signed int *)(a3 + 4);
  v5 = 8 * a2;
  while (*(v4 - 1) != v3)
  {
    v4 += 2;
    v5 -= 8;
    if (!v5)
      return 0;
  }
  v6 = *v4;
  v7 = bswap32(a1[1]);
  v8 = bswap32(a1[3]);
  if (v6 <= v7)
    v6 = v7;
  if (v6 >= v8)
    v6 = v8;
  v9 = bswap32(a1[2]);
  if (v6 == v9 || v9 < v7 || v8 < v9)
    return 0;
  v12 = __OFSUB__(v6, v9);
  v13 = v6 - v9;
  if (v13 < 0 == v12)
  {
    if (!((v13 < 0) ^ v12 | (v13 == 0)))
    {
      v14 = v8 - v9;
      goto LABEL_21;
    }
    return 0;
  }
  v14 = v9 - v7;
LABEL_21:
  v15 = ((uint64_t)v13 << 16) / v14;
  if ((int)v15 >= 0x10000)
    LODWORD(v15) = 0x10000;
  if ((int)v15 <= -65536)
    return 4294901760;
  else
    return v15;
}

uint64_t ItemVariationStore::Initialize(_QWORD *a1, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v7;
  uint64_t v8;
  unsigned __int16 *v9;
  uint64_t v10;
  unint64_t v11;

  if (!a2)
    return 1;
  v3 = a2 + 8;
  if (a2 + 8 > a3)
    return 0;
  v4 = bswap32(*(unsigned __int16 *)(a2 + 6)) >> 16;
  v5 = v3 + 4 * v4;
  if (v5 < v3 || v5 > a3)
  {
    v7 = a2 + 12 <= a3 ? (a3 - v3) >> 2 : 0;
    if (v7 != v4)
      return 0;
  }
  v8 = *(unsigned int *)(a2 + 2);
  if ((_DWORD)v8)
  {
    v9 = (unsigned __int16 *)(a2 + bswap32(v8));
    if ((unint64_t)(v9 + 2) <= a3)
    {
      v10 = bswap32(v9[1]) >> 16;
      v11 = (unint64_t)&v9[3 * (bswap32(*v9) >> 16) * v10 + 2];
      if (v11 >= (unint64_t)v9 && v11 <= a3)
      {
        *a1 = a2;
        a1[1] = a3;
        a1[2] = v10;
        a1[3] = v9;
        v8 = 1;
        a1[4] = v4;
        a1[5] = v3;
        return v8;
      }
    }
    return 0;
  }
  return v8;
}

uint64_t DeltaSetIndexMap::IndexForValue(DeltaSetIndexMap *this, uint64_t a2, unint64_t a3)
{
  unsigned int v3;
  char *v4;
  unsigned int v5;
  unint64_t v6;
  uint64_t v7;
  unsigned __int8 *v8;
  unsigned int v10;
  int v11;

  if (*(_BYTE *)this == 1)
  {
    v3 = bswap32(*(_DWORD *)((char *)this + 2));
    v4 = (char *)this + 6;
    if (!v3)
      return a2;
  }
  else
  {
    if (*(_BYTE *)this)
      return a2;
    v3 = bswap32(*((unsigned __int16 *)this + 1)) >> 16;
    v4 = (char *)this + 4;
    if (!v3)
      return a2;
  }
  v5 = v3 - 1;
  if (v5 >= a2)
    a2 = a2;
  else
    a2 = v5;
  v6 = *((unsigned __int8 *)this + 1);
  v7 = ((v6 >> 4) & 3) + 1;
  v8 = (unsigned __int8 *)&v4[v7 * (unint64_t)a2];
  if (&v8[v7] >= v8 && (unint64_t)&v8[v7] <= a3)
  {
    v10 = 0;
    do
    {
      v11 = *v8++;
      v10 = v11 | (v10 << 8);
      --v7;
    }
    while (v7);
    return v10 & ((-1 << ((v6 & 0xF) + 1)) & 0xFFFE ^ 0xFFFF) | (v10 >> ((v6 & 0xF) + 1) << 16);
  }
  return a2;
}

void std::vector<std::pair<unsigned int,int>,TInlineBufferAllocator<std::pair<unsigned int,int>,30ul>>::__destroy_vector::operator()[abi:fe180100](uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  BOOL v4;
  BOOL v5;

  v2 = *(_QWORD **)a1;
  if (v2)
  {
    *(_QWORD *)(a1 + 8) = v2;
    v3 = (_QWORD *)(a1 + 264);
    if (a1 + 24 <= (unint64_t)v2)
    {
      v4 = v3 >= v2;
      v5 = v3 == v2;
    }
    else
    {
      v4 = 0;
      v5 = 0;
    }
    if (!v5 && v4)
    {
      if (*(_QWORD *)(a1 + 16) == *(_QWORD *)(a1 + 264))
        *v3 = v2;
    }
    else
    {
      operator delete(v2);
    }
  }
}

_QWORD *std::vector<double,TInlineBufferAllocator<double,30ul>>::vector(_QWORD *a1, unint64_t a2, _QWORD *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  a1[33] = a1 + 3;
  if (a2)
  {
    std::vector<double,TInlineBufferAllocator<double,30ul>>::__vallocate[abi:fe180100](a1, a2);
    v6 = (_QWORD *)a1[1];
    v7 = &v6[a2];
    v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_1B099FE84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<double,TInlineBufferAllocator<double,30ul>>::__destroy_vector::operator()[abi:fe180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<double,TInlineBufferAllocator<double,30ul>>::__vallocate[abi:fe180100](_QWORD *a1, unint64_t a2)
{
  char *result;

  if (a2 >> 61)
    std::vector<char,TInlineBufferAllocator<char,1024ul>>::__throw_length_error[abi:fe180100]();
  result = (char *)TInlineBufferAllocator<double,30ul>::allocate((uint64_t)(a1 + 3), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * a2];
  return result;
}

void *TInlineBufferAllocator<double,30ul>::allocate(uint64_t a1, unint64_t a2)
{
  unint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v4 = *(_QWORD *)(a1 + 240);
  v2 = (unint64_t *)(a1 + 240);
  v3 = v4;
  v5 = v4 + 8 * a2;
  if (v5 <= (unint64_t)v2)
  {
    *v2 = v5;
    return (void *)v3;
  }
  else
  {
    if (a2 >> 61)
      std::__throw_bad_array_new_length[abi:fe180100]();
    return operator new(8 * a2);
  }
}

void std::vector<double,TInlineBufferAllocator<double,30ul>>::__destroy_vector::operator()[abi:fe180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v3;
  BOOL v4;
  BOOL v5;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v1[1] = v2;
    v3 = v1 + 33;
    if (v1 + 3 <= v2)
    {
      v4 = v3 >= v2;
      v5 = v3 == v2;
    }
    else
    {
      v4 = 0;
      v5 = 0;
    }
    if (!v5 && v4)
    {
      if (v1[2] == v1[33])
        *v3 = v2;
    }
    else
    {
      operator delete(v2);
    }
  }
}

double ItemVariationStore::VariationRegionList::ComputeScalar(ItemVariationStore::VariationRegionList *this, uint64_t a2, unint64_t a3, const __int16 *a4)
{
  unint64_t v4;
  unint64_t v5;
  ItemVariationStore::RegionAxisCoordinates *v7;
  double v8;
  int v9;
  double v10;

  v4 = bswap32(*(unsigned __int16 *)this) >> 16;
  if (v4 >= a3)
    v5 = a3;
  else
    v5 = v4;
  if (!v5)
    return 1.0;
  v7 = (ItemVariationStore::VariationRegionList *)((char *)this + 6 * v4 * a2 + 4);
  v8 = 1.0;
  while (1)
  {
    v9 = *a4++;
    v10 = ItemVariationStore::RegionAxisCoordinates::ComputeScalar(v7, v9);
    if (v10 == 0.0)
      break;
    v8 = v8 * v10;
    v7 = (ItemVariationStore::RegionAxisCoordinates *)((char *)v7 + 6);
    if (!--v5)
      return v8;
  }
  return 0.0;
}

double ItemVariationStore::RegionAxisCoordinates::ComputeScalar(ItemVariationStore::RegionAxisCoordinates *this, int a2)
{
  int v2;
  unsigned int v3;
  int v4;
  double result;
  int v6;
  int v7;
  BOOL v8;
  double v11;
  int v12;

  v2 = bswap32(*(unsigned __int16 *)this);
  v3 = *((unsigned __int16 *)this + 1);
  v4 = (int)bswap32(v3) >> 16;
  result = 1.0;
  if (v4 >= v2 >> 16)
  {
    v6 = (int)bswap32(*((unsigned __int16 *)this + 2)) >> 16;
    if (v6 >= v4)
    {
      v7 = v2 >> 16;
      v8 = v6 > 0 && v7 < 0;
      if (!v8 && v3 != 0)
      {
        result = 0.0;
        if (v7 <= a2 && v6 >= a2)
        {
          result = 1.0;
          if (v4 != a2)
          {
            if (v4 <= a2)
            {
              v11 = (double)(v6 - a2);
              v12 = v6 - v4;
            }
            else
            {
              v11 = (double)(a2 - v7);
              v12 = v4 - v7;
            }
            return v11 / (double)v12;
          }
        }
      }
    }
  }
  return result;
}

double ItemVariationStore::ValueForDeltaSet(ItemVariationStore *this, unsigned int a2, unsigned int a3, unint64_t a4, const __int16 *a5, const double *a6)
{
  double v6;
  unint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned __int16 *v11;
  unint64_t v12;
  unsigned __int16 *v13;
  unint64_t v14;
  unsigned int v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  BOOL v20;
  int v24;
  unsigned int *v25;
  char *v26;
  unint64_t v27;
  unsigned int v28;
  unint64_t v29;
  double v30;
  unsigned int v31;
  unint64_t v32;
  unsigned __int16 *v33;
  unsigned int v34;
  unint64_t v35;
  double v36;
  unsigned int v37;
  unint64_t v38;
  unsigned int v39;
  unint64_t v40;
  double v41;
  unsigned int v42;
  unint64_t v43;
  unsigned __int16 *v44;
  unsigned int v45;
  unint64_t v46;
  double v47;
  int v48;
  unsigned int *v50;
  unsigned int *v51;
  uint64_t v52;
  uint64_t v53;

  v6 = 0.0;
  if ((a3 & a2) != 0xFFFF)
  {
    v8 = *(_QWORD *)this;
    if (*(_QWORD *)this)
    {
      if (*((_QWORD *)this + 4) > (unint64_t)a2)
      {
        v9 = *(_DWORD *)(*((_QWORD *)this + 5) + 4 * a2);
        if (v9)
        {
          v10 = bswap32(v9);
          v11 = (unsigned __int16 *)(v8 + v10);
          v12 = *((_QWORD *)this + 1);
          v13 = (unsigned __int16 *)(v8 + v10 + 6);
          if ((unint64_t)v13 <= v12)
          {
            v14 = bswap32(v11[2]) >> 16;
            v15 = bswap32(*v11) >> 16;
            v16 = bswap32(v11[1]);
            v17 = HIWORD(v16) & 0x7FFF;
            v18 = (v17 + v14) << (v16 < 0);
            v19 = (unint64_t)&v11[v14 + 3] + v18 * (unint64_t)v15;
            v20 = v19 < (unint64_t)v11 || v19 > v12;
            if (!v20)
            {
              if (v15 <= a3)
              {
                v25 = 0;
                v17 = 0xAAAAAAAAAAAAAAAALL;
                v24 = 170;
                v14 = 0xAAAAAAAAAAAAAAAALL;
                v18 = 0xAAAAAAAAAAAAAAAALL;
              }
              else
              {
                v24 = v16 >> 31;
                v25 = (unsigned int *)((char *)&v13[v14] + v18 * (unint64_t)a3);
              }
              v26 = (char *)v25 + v18;
              if ((unint64_t)v26 <= v12 && v8 <= (unint64_t)v25 && v26 >= (char *)v25)
              {
                if (v24)
                {
                  if (v17)
                  {
                    v50 = &v25[v17];
                    v52 = v10;
                    v27 = v17;
                    while (1)
                    {
                      v28 = *v13++;
                      v29 = bswap32(v28) >> 16;
                      if (*((_QWORD *)this + 2) <= v29)
                        break;
                      if (a6)
                        v30 = a6[v29];
                      else
                        v30 = ItemVariationStore::VariationRegionList::ComputeScalar(*((ItemVariationStore::VariationRegionList **)this + 3), v29, a4, a5);
                      v31 = *v25++;
                      v6 = v6 + v30 * (double)(int)bswap32(v31);
                      if (!--v27)
                      {
                        v25 = v50;
                        v10 = v52;
                        goto LABEL_24;
                      }
                    }
                  }
                  else
                  {
LABEL_24:
                    v20 = v14 > v17;
                    v32 = v14 - v17;
                    if (!v20)
                      return v6;
                    v33 = (unsigned __int16 *)(v10 + 2 * v17 + v8 + 6);
                    while (1)
                    {
                      v34 = *v33++;
                      v35 = bswap32(v34) >> 16;
                      if (*((_QWORD *)this + 2) <= v35)
                        break;
                      if (a6)
                        v36 = a6[v35];
                      else
                        v36 = ItemVariationStore::VariationRegionList::ComputeScalar(*((ItemVariationStore::VariationRegionList **)this + 3), v35, a4, a5);
                      v37 = *(unsigned __int16 *)v25;
                      v25 = (unsigned int *)((char *)v25 + 2);
                      v6 = v6 + v36 * (double)((int)bswap32(v37) >> 16);
                      if (!--v32)
                        return v6;
                    }
                  }
                }
                else if (v17)
                {
                  v51 = (unsigned int *)((char *)v25 + 2 * v17);
                  v53 = v10;
                  v38 = v17;
                  while (1)
                  {
                    v39 = *v13++;
                    v40 = bswap32(v39) >> 16;
                    if (*((_QWORD *)this + 2) <= v40)
                      break;
                    if (a6)
                      v41 = a6[v40];
                    else
                      v41 = ItemVariationStore::VariationRegionList::ComputeScalar(*((ItemVariationStore::VariationRegionList **)this + 3), v40, a4, a5);
                    v42 = *(unsigned __int16 *)v25;
                    v25 = (unsigned int *)((char *)v25 + 2);
                    v6 = v6 + v41 * (double)((int)bswap32(v42) >> 16);
                    if (!--v38)
                    {
                      v25 = v51;
                      v10 = v53;
                      goto LABEL_41;
                    }
                  }
                }
                else
                {
LABEL_41:
                  v20 = v14 > v17;
                  v43 = v14 - v17;
                  if (!v20)
                    return v6;
                  v44 = (unsigned __int16 *)(v10 + 2 * v17 + v8 + 6);
                  while (1)
                  {
                    v45 = *v44++;
                    v46 = bswap32(v45) >> 16;
                    if (*((_QWORD *)this + 2) <= v46)
                      break;
                    if (a6)
                      v47 = a6[v46];
                    else
                      v47 = ItemVariationStore::VariationRegionList::ComputeScalar(*((ItemVariationStore::VariationRegionList **)this + 3), v46, a4, a5);
                    v48 = *(char *)v25;
                    v25 = (unsigned int *)((char *)v25 + 1);
                    v6 = v6 + v47 * (double)v48;
                    if (!--v43)
                      return v6;
                  }
                }
                return 0.0;
              }
            }
          }
        }
      }
    }
  }
  return v6;
}

void WOFF2CFDataOut::WOFF2CFDataOut(WOFF2CFDataOut *this)
{
  CFMutableDataRef Mutable;
  _DWORD *exception;

  *(_QWORD *)this = &off_1E61B4630;
  Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  *((_QWORD *)this + 1) = Mutable;
  if (!Mutable)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E6176998;
    exception[2] = 2;
  }
}

void std::__throw_bad_function_call[abi:fe180100]()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
}

void std::bad_function_call::~bad_function_call(std::bad_function_call *this)
{
  std::exception::~exception(this);
  JUMPOUT(0x1B5E0CD38);
}

void std::__function::__func<TSFNTFont::HasTableTags(std::initializer_list<unsigned int>)::$_0,std::allocator<TSFNTFont::HasTableTags(std::initializer_list<unsigned int>)::$_0>,void ()(unsigned int,BOOL *)>::~__func()
{
  JUMPOUT(0x1B5E0CD38);
}

__n128 std::__function::__func<TSFNTFont::HasTableTags(std::initializer_list<unsigned int>)::$_0,std::allocator<TSFNTFont::HasTableTags(std::initializer_list<unsigned int>)::$_0>,void ()(unsigned int,BOOL *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E61B48E8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<TSFNTFont::HasTableTags(std::initializer_list<unsigned int>)::$_0,std::allocator<TSFNTFont::HasTableTags(std::initializer_list<unsigned int>)::$_0>,void ()(unsigned int,BOOL *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E61B48E8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__int32 *std::__function::__func<TSFNTFont::HasTableTags(std::initializer_list<unsigned int>)::$_0,std::allocator<TSFNTFont::HasTableTags(std::initializer_list<unsigned int>)::$_0>,void ()(unsigned int,BOOL *)>::operator()(uint64_t a1, __int32 *a2, BOOL **a3)
{
  BOOL *v4;
  uint64_t v5;
  size_t v6;
  uint64_t v7;
  __int32 *result;
  uint64_t v9;
  _QWORD *v10;
  BOOL v12;

  v4 = *a3;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(v5 + 8);
  v7 = *(_QWORD *)v5 + 4 * v6;
  result = wmemchr(*(__int32 **)v5, *a2, v6);
  if (result)
    v9 = (uint64_t)result;
  else
    v9 = v7;
  if (v9 != **(_QWORD **)(a1 + 8) + 4 * *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8))
  {
    v10 = *(_QWORD **)(a1 + 16);
    v12 = (*v10)-- == 1;
    *v4 = v12;
  }
  return result;
}

uint64_t std::__function::__func<TSFNTFont::HasTableTags(std::initializer_list<unsigned int>)::$_0,std::allocator<TSFNTFont::HasTableTags(std::initializer_list<unsigned int>)::$_0>,void ()(unsigned int,BOOL *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<TSFNTFont::HasTableTags(std::initializer_list<unsigned int>)::$_0,std::allocator<TSFNTFont::HasTableTags(std::initializer_list<unsigned int>)::$_0>,void ()(unsigned int,BOOL *)>::target_type()
{
}

BOOL std::type_info::operator==[abi:fe180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  if (v2 == v3)
    return 1;
  if ((v3 & v2) < 0 != __OFSUB__(v2, v3))
    return strcmp((const char *)(v2 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  return 0;
}

void std::__function::__func<TSBITFont::IsSBITFont(unsigned int,TSFNTFont const&)::$_0,std::allocator<TSBITFont::IsSBITFont(unsigned int,TSFNTFont const&)::$_0>,void ()(unsigned int,BOOL *)>::~__func()
{
  JUMPOUT(0x1B5E0CD38);
}

__n128 std::__function::__func<TSBITFont::IsSBITFont(unsigned int,TSFNTFont const&)::$_0,std::allocator<TSBITFont::IsSBITFont(unsigned int,TSFNTFont const&)::$_0>,void ()(unsigned int,BOOL *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_1E61B4978;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<TSBITFont::IsSBITFont(unsigned int,TSFNTFont const&)::$_0,std::allocator<TSBITFont::IsSBITFont(unsigned int,TSFNTFont const&)::$_0>,void ()(unsigned int,BOOL *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E61B4978;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<TSBITFont::IsSBITFont(unsigned int,TSFNTFont const&)::$_0,std::allocator<TSBITFont::IsSBITFont(unsigned int,TSFNTFont const&)::$_0>,void ()(unsigned int,BOOL *)>::operator()(uint64_t result, int *a2, _BYTE **a3)
{
  int v3;
  _DWORD *v6;
  _BYTE *v9;

  v3 = *a2;
  if (*a2 <= 1668112751)
  {
    if (v3 <= 1650745715)
    {
      if (v3 == 1161970772 || v3 == 1161972803)
      {
LABEL_29:
        v6 = *(_DWORD **)(result + 24);
        goto LABEL_30;
      }
    }
    else if (v3 == 1650745716 || v3 == 1651008868 || v3 == 1651273571)
    {
      v6 = *(_DWORD **)(result + 16);
LABEL_30:
      --*v6;
    }
  }
  else
  {
    if (v3 <= 1819239264)
    {
      if (v3 != 1668112752)
      {
        if (v3 != 1735162214)
        {
          if (v3 != 1751474532)
            return result;
          goto LABEL_29;
        }
LABEL_31:
        v9 = *a3;
        **(_BYTE **)(result + 32) = 1;
        *v9 = 1;
        return result;
      }
LABEL_23:
      v6 = *(_DWORD **)(result + 8);
      goto LABEL_30;
    }
    if (v3 == 1819239265)
      goto LABEL_31;
    if (v3 == 1851878757 || v3 == 1835104368)
      goto LABEL_23;
  }
  return result;
}

uint64_t std::__function::__func<TSBITFont::IsSBITFont(unsigned int,TSFNTFont const&)::$_0,std::allocator<TSBITFont::IsSBITFont(unsigned int,TSFNTFont const&)::$_0>,void ()(unsigned int,BOOL *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<TSBITFont::IsSBITFont(unsigned int,TSFNTFont const&)::$_0,std::allocator<TSBITFont::IsSBITFont(unsigned int,TSFNTFont const&)::$_0>,void ()(unsigned int,BOOL *)>::target_type()
{
}

unint64_t TnameTable::EnumerateNames(TsfntTable *a1, uint64_t a2)
{
  unint64_t result;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  _DWORD *exception;
  char v23;
  char *v24;
  uint64_t v25;
  unsigned int v26;

  result = TsfntTable::GetTableEnd(a1);
  v5 = *((_QWORD *)a1 + 1);
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 8);
    if (v6)
    {
      v7 = v6 + *((_QWORD *)a1 + 2);
      if (result != v7)
      {
        result = TsfntTable::GetTableEnd(a1);
        if (v7 + 6 > result)
          goto LABEL_19;
        v8 = *(unsigned __int16 *)(v7 + 4);
        v9 = *(unsigned __int16 *)(v7 + 2);
        v23 = 0;
        if (!v9)
          return result;
        v10 = result;
        v11 = v7 + 18;
        if (v7 + 6 < v7 || v11 > result)
        {
LABEL_19:
          exception = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)exception = &off_1E6176998;
          exception[2] = 4;
        }
        v13 = 0;
        v14 = bswap32(v8) >> 16;
        v15 = __rev16(v9);
        while (1)
        {
          v16 = *(unsigned __int16 *)(v11 - 2);
          v17 = *(unsigned __int16 *)(v11 - 4);
          result = TsfntTable::GetTableEnd(a1);
          v18 = *((_QWORD *)a1 + 1);
          if (v18)
          {
            v18 = *(_QWORD *)(v18 + 8);
            if (v18)
              v18 += *((_QWORD *)a1 + 2);
          }
          v19 = bswap32(v17);
          v20 = v14 + (bswap32(v16) >> 16);
          if (result - v18 >= v20 + HIWORD(v19))
          {
            v21 = *(_QWORD *)(a2 + 24);
            v26 = v20;
            v24 = &v23;
            v25 = HIWORD(v19);
            if (!v21)
              std::__throw_bad_function_call[abi:fe180100]();
            result = (*(uint64_t (**)(uint64_t, unint64_t, unsigned int *, uint64_t *, char **))(*(_QWORD *)v21 + 48))(v21, v11 - 12, &v26, &v25, &v24);
            if (v23)
              break;
          }
          if (v15 <= (unsigned __int16)++v13)
            break;
          v11 += 12;
          if (v11 > v10)
            goto LABEL_19;
        }
      }
    }
  }
  return result;
}

uint64_t TFontNameString::operator=(uint64_t a1, uint64_t a2)
{
  const void *v4;
  CFTypeRef v5;
  const void *v6;
  CFTypeRef v7;

  if (a1 != a2)
  {
    TStringRef::operator=(a1, a2);
    *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
    *(_QWORD *)(a1 + 66) = *(_QWORD *)(a2 + 66);
    v4 = *(const void **)(a1 + 80);
    if (v4)
      CFRelease(v4);
    v5 = *(CFTypeRef *)(a2 + 80);
    if (v5)
      v5 = CFRetain(v5);
    *(_QWORD *)(a1 + 80) = v5;
    v6 = *(const void **)(a1 + 88);
    if (v6)
      CFRelease(v6);
    v7 = *(CFTypeRef *)(a2 + 88);
    if (v7)
      v7 = CFRetain(v7);
    *(_QWORD *)(a1 + 88) = v7;
  }
  return a1;
}

uint64_t TnameTable::FindPostscriptName(TnameTable *this, const unsigned __int16 *a2, uint64_t a3, const char *a4)
{
  const unsigned __int16 *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unsigned int v12;
  _BYTE v13[24];
  _BYTE *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v7 = &a2[a3];
  v12 = -1442797056;
  v8 = operator new(0x30uLL);
  *v8 = &off_1E61B4CC0;
  v8[1] = this;
  v8[2] = &v12;
  v8[3] = a2;
  v8[4] = v7;
  v8[5] = a4;
  v14 = v8;
  TnameTable::EnumerateNames(this, (uint64_t)v13);
  v9 = v14;
  if (v14 == v13)
  {
    v10 = 4;
    v9 = v13;
    goto LABEL_5;
  }
  if (v14)
  {
    v10 = 5;
LABEL_5:
    (*(void (**)(void))(*v9 + 8 * v10))();
  }
  return v12;
}

void sub_1B09A0B60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t TnameTable::GetNames@<X0>(TnameTable *this@<X0>, const unsigned __int16 *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _OWORD v16[2];
  int v17;
  int v18;
  _BYTE v19[24];
  _BYTE *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_QWORD *)(a4 + 32) = 0xAAAAAAAA3F800000;
  std::__hash_table<std::__hash_value_type<unsigned short,TFontNameString>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,TFontNameString>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,TFontNameString>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,TFontNameString>>>::__rehash<true>(a4, (unint64_t)(float)a3);
  memset(v16, 0, sizeof(v16));
  v17 = 1065353216;
  v18 = -1431655766;
  v8 = operator new(0x30uLL);
  *v8 = &off_1E61B4DC0;
  v8[1] = this;
  v8[2] = a4;
  v8[3] = v16;
  v8[4] = a2;
  v8[5] = &a2[a3];
  v20 = v8;
  TnameTable::EnumerateNames(this, (uint64_t)v19);
  v13 = v20;
  if (v20 == v19)
  {
    v14 = 4;
    v13 = v19;
    goto LABEL_5;
  }
  if (v20)
  {
    v14 = 5;
LABEL_5:
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t))(*v13 + 8 * v14))(v13, v9, v10, v11, v12);
  }
  std::__hash_table<std::__hash_value_type<unsigned short,TFontNameString>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,TFontNameString>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,TFontNameString>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,TFontNameString>>>::__node_handle_merge_unique[abi:fe180100]<std::__hash_table<std::__hash_value_type<unsigned short,TFontNameString>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,TFontNameString>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,TFontNameString>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,TFontNameString>>>>((_QWORD *)a4, v16);
  return std::__hash_table<std::__hash_value_type<unsigned short,TFontNameString>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,TFontNameString>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,TFontNameString>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,TFontNameString>>>::~__hash_table((uint64_t)v16);
}

void sub_1B09A0CB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  uint64_t v17;
  char *v18;
  char *v20;
  uint64_t v21;

  v20 = a17;
  if (a17 == v18)
  {
    v21 = 4;
    v20 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v21 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
LABEL_6:
  std::__hash_table<std::__hash_value_type<unsigned short,TFontNameString>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,TFontNameString>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,TFontNameString>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,TFontNameString>>>::~__hash_table((uint64_t)&a9);
  std::__hash_table<std::__hash_value_type<unsigned short,TFontNameString>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,TFontNameString>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,TFontNameString>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,TFontNameString>>>::~__hash_table(v17);
  _Unwind_Resume(a1);
}

void TnameTable::GetSomeNames(TnameTable *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  __int16 v5;
  __int128 v6;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;

  v4 = 0;
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  do
  {
    v5 = word_1B0A3E9AA[v4];
    *(_QWORD *)&v6 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v15 = v6;
    v16 = v6;
    v13 = v6;
    v14 = v6;
    v11 = v6;
    v12 = v6;
    TnameTable::FindName(this, v5, 0, 4, 0, (uint64_t)&v11);
    if (TFontNameString::IsValid((TFontNameString *)&v11))
    {
      v7 = a2[1];
      if (v7 >= a2[2])
        goto LABEL_12;
    }
    else
    {
      TFontNameString::~TFontNameString((TFontNameString *)&v11);
      *(_QWORD *)&v8 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v15 = v8;
      v16 = v8;
      v13 = v8;
      v14 = v8;
      v11 = v8;
      v12 = v8;
      TnameTable::FindName(this, v5, 0, 3, 0, (uint64_t)&v11);
      if (TFontNameString::IsValid((TFontNameString *)&v11))
      {
        v7 = a2[1];
        if (v7 >= a2[2])
          goto LABEL_12;
      }
      else
      {
        TFontNameString::~TFontNameString((TFontNameString *)&v11);
        *(_QWORD *)&v9 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v15 = v9;
        v16 = v9;
        v13 = v9;
        v14 = v9;
        v11 = v9;
        v12 = v9;
        TnameTable::GetName(this, v5, 0xFFFF, 0xFFFF, 0xFFFF, (uint64_t)&v11);
        if (!TFontNameString::IsValid((TFontNameString *)&v11))
          goto LABEL_14;
        v7 = a2[1];
        if (v7 >= a2[2])
        {
LABEL_12:
          v10 = std::vector<TFontNameString>::__push_back_slow_path<TFontNameString const&>(a2, (const TFontNameString *)&v11);
          goto LABEL_13;
        }
      }
    }
    TFontNameString::TFontNameString((TFontNameString *)a2[1], (const TFontNameString *)&v11);
    v10 = v7 + 96;
    a2[1] = v7 + 96;
LABEL_13:
    a2[1] = v10;
LABEL_14:
    TFontNameString::~TFontNameString((TFontNameString *)&v11);
    ++v4;
  }
  while (v4 != 3);
}

void sub_1B09A0EB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  TFontNameString::~TFontNameString((TFontNameString *)&a9);
  a9 = v9;
  std::vector<TFontNameString>::__destroy_vector::operator()[abi:fe180100]((void ***)&a9);
  _Unwind_Resume(a1);
}

BOOL TFontNameString::IsValid(TFontNameString *this)
{
  unint64_t v1;
  unsigned __int16 *v2;
  int v3;

  v1 = *((unsigned __int8 *)this + 64);
  if (*((_QWORD *)this + 2) < v1)
    return 0;
  v2 = (unsigned __int16 *)*((_QWORD *)this + 1);
  if (!v2)
  {
    v2 = (unsigned __int16 *)*((_QWORD *)this + 5);
    if (v2)
    {
      v2 = (unsigned __int16 *)*((_QWORD *)v2 + 1);
      if (v2)
        v2 = (unsigned __int16 *)((char *)v2 + *((_QWORD *)this + 6));
    }
  }
  if ((_DWORD)v1 == 4)
  {
    v3 = *(_DWORD *)v2;
    return v3 != 0;
  }
  if ((_DWORD)v1 == 2)
  {
    v3 = *v2;
    return v3 != 0;
  }
  if ((_DWORD)v1 != 1)
    return 0;
  v3 = *(unsigned __int8 *)v2;
  return v3 != 0;
}

_QWORD *TnameTable::GetAllNames@<X0>(TnameTable *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v3;
  _QWORD v4[3];
  _QWORD *v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4[0] = &off_1E61B4E40;
  v4[1] = this;
  v4[2] = a2;
  v5 = v4;
  TnameTable::EnumerateNames(this, (uint64_t)v4);
  result = v5;
  if (v5 == v4)
  {
    v3 = 4;
    result = v4;
  }
  else
  {
    if (!v5)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_1B09A1010(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  std::vector<TFontNameString>::__destroy_vector::operator()[abi:fe180100](&a9);
  _Unwind_Resume(a1);
}

unint64_t TcmapUnicodeTable::GetUnicodeSubtable(TcmapUnicodeTable *this, unsigned int *a2, unsigned int *a3)
{
  unint64_t CMapHeader;
  unint64_t TableEnd;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unint64_t result;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v18;
  int v19;
  unsigned int *v20;
  int v21;
  int EncodingWeight;
  uint64_t v23;
  uint64_t v24;
  unsigned int *v25;

  CMapHeader = TcmapTable::GetCMapHeader(this);
  TableEnd = TsfntTable::GetTableEnd(this);
  if (!CMapHeader)
    return 0;
  v8 = TableEnd;
  v9 = CMapHeader + 4;
  if (CMapHeader + 4 > TableEnd)
    return 0;
  v10 = *a2;
  if ((_DWORD)v10 == -1)
  {
    v14 = *(unsigned __int16 *)(CMapHeader + 2);
    LODWORD(v15) = __rev16(v14);
    v16 = CMapHeader + 12 * v15;
    if (v16 < CMapHeader || v16 > TableEnd)
    {
      if (CMapHeader + 12 > TableEnd)
        LODWORD(v15) = 0;
      else
        v15 = (TableEnd - CMapHeader) / 0xC;
      v14 = bswap32(v15) >> 16;
    }
    if (!v14)
      return 0;
    v25 = a2;
    v18 = 0;
    v19 = (v15 & 0xFFFE) != 0 ? (unsigned __int16)v15 : 1;
    v20 = (unsigned int *)(CMapHeader + 8);
    v12 = -1;
    v21 = 0x10000;
    do
    {
      EncodingWeight = TcmapUnicodeTable::GetEncodingWeight((TcmapUnicodeTable *)(bswap32(*((unsigned __int16 *)v20 - 2)) >> 16), bswap32(*((unsigned __int16 *)v20 - 1)) >> 16);
      if (EncodingWeight == 10)
      {
        v23 = bswap32(*v20);
        *a3 = v23;
        v24 = CMapHeader + v23;
        *((_QWORD *)this + 9) = v24;
        if (v24 + 2 > v8)
        {
          *((_QWORD *)this + 9) = 0;
          *a3 = 0;
        }
      }
      else if (EncodingWeight < v21)
      {
        *((_BYTE *)this + 80) = EncodingWeight == 8;
        v12 = v18;
        v21 = EncodingWeight;
      }
      ++v18;
      v20 += 2;
    }
    while (v19 != v18);
    a2 = v25;
    if (v12 == -1)
      return 0;
    v10 = v12;
  }
  else
  {
    v11 = *a3;
    if ((_DWORD)v11)
      *((_QWORD *)this + 9) = CMapHeader + v11;
    if (TcmapUnicodeTable::GetEncodingWeight((TcmapUnicodeTable *)(bswap32(*(unsigned __int16 *)(v9 + 8 * v10)) >> 16), bswap32(*(unsigned __int16 *)(v9 + 8 * v10 + 2)) >> 16) == 8)*((_BYTE *)this + 80) = 1;
    v12 = v10;
  }
  *a2 = v12;
  result = CMapHeader + bswap32(*(_DWORD *)(v9 + 8 * v10 + 4));
  if (result + 2 > v8)
    return 0;
  return result;
}

uint64_t TcmapUnicodeTable::GetEncodingWeight(TcmapUnicodeTable *this, unsigned int a2)
{
  if ((_DWORD)this != 3)
  {
    if (!(_DWORD)this && a2 < 7)
      return *(unsigned int *)&asc_1B0A3F198[4 * (__int16)a2];
    return 0x10000;
  }
  if (a2 == 10)
    return 0;
  if (a2 != 1)
  {
    if (!a2)
      return 8;
    return 0x10000;
  }
  return 3;
}

void TcmapTableFileData16::~TcmapTableFileData16(TcmapTableFileData16 *this)
{
  JUMPOUT(0x1B5E0CD38);
}

void TcmapTableFileData32::~TcmapTableFileData32(TcmapTableFileData32 *this)
{
  JUMPOUT(0x1B5E0CD38);
}

uint64_t TcmapUnicodeTable::MapGlyphs<unsigned short>(uint64_t a1, uint64_t a2, _WORD *a3, unsigned int *a4)
{
  unint64_t TableEnd;
  uint64_t v9;
  unint64_t v10;
  unsigned __int16 *v11;
  uint64_t v12;
  unint64_t DataP;
  uint64_t v14;
  unint64_t v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned __int16 *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned __int16 v23;
  unsigned __int16 *v24;
  unsigned int v25;
  unsigned int v26;
  unint64_t v27;
  unsigned __int16 *v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int *v32;
  unsigned int v33;
  unint64_t v34;
  BOOL v36;
  unsigned int v37;
  unsigned int v38;
  unint64_t v39;
  _WORD *v40;
  uint64_t v41;
  unsigned int v42;
  int v43;
  _BOOL4 v44;
  uint64_t v45;
  int v46;
  int v47;
  BOOL v48;
  int v49;
  int v50;
  unsigned int *v51;
  unsigned int *v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int *v56;
  unint64_t v57;
  unint64_t v59;
  unint64_t v60;
  unsigned int v61;
  _WORD *v62;
  unint64_t v63;
  unsigned int v64;
  int v66;
  BOOL v67;
  unsigned int v68;
  unint64_t v69;
  unsigned int *v70;
  unint64_t v71;
  unsigned int *v72;
  unsigned int *v73;
  unsigned int v74;
  unsigned int *v75;
  unsigned int v76;
  BOOL v77;
  unsigned int v78;
  _WORD *v79;
  unsigned int v80;
  unint64_t v81;
  unsigned int v82;
  unsigned int v83;
  int v84;
  BOOL v85;
  unsigned int v86;
  int v87;
  unsigned int v88;
  uint64_t v89;
  _WORD *v91;
  _WORD *v92;
  unsigned int *v93;
  void (***v94)(TcmapTableFileData32 *__hidden);
  _QWORD *v95;
  int v96;
  unsigned int v97;
  void (**v98)(TcmapTableFileData32 *__hidden);
  char *v99;
  uint64_t v100;
  unint64_t v101;
  _QWORD v102[3];
  _QWORD v103[4];

  TableEnd = TsfntTable::GetTableEnd((TsfntTable *)a1);
  v103[0] = &off_1E61794D0;
  v103[1] = TableEnd;
  v9 = *(_QWORD *)(a1 + 64);
  if (v9)
    v10 = v9 + 6;
  else
    v10 = 0;
  v103[2] = *(_QWORD *)(a1 + 64);
  v103[3] = v10;
  v102[0] = &off_1E6179730;
  v102[1] = TsfntTable::GetTableEnd((TsfntTable *)a1);
  v11 = *(unsigned __int16 **)(a1 + 64);
  v12 = *(_QWORD *)(a1 + 72);
  v102[2] = v12;
  if (v11)
  {
    v93 = a4;
    switch(bswap32(*v11) >> 16)
    {
      case 2u:
        v99 = (char *)v103;
        v100 = 0;
        v98 = &off_1E61B4C08;
        DataP = TcmapTableFileData16::GetDataP((TcmapTableFileData16 *)v103, 0);
        TcmapTableDataRef::validateArray<FPBigEndianScalar<unsigned short>>(&v99, DataP, 256);
        v14 = *a4;
        LODWORD(v101) = v14;
        HIDWORD(v101) = v14;
        v91 = a3;
        if ((_DWORD)v14)
        {
          v15 = 0;
          v16 = v14;
          do
          {
            v17 = *(unsigned __int16 *)(a2 + 2 * v15);
            v18 = bswap32(*(unsigned __int16 *)(DataP + 2 * (v17 >> 8))) >> 16;
            if (v17 < 0x100 || v18 >= 8)
            {
              v20 = (unsigned __int16 *)(DataP + 512 + ((unsigned __int16)v18 & 0xFFFE));
              TcmapTableDataRef::validateArray<FPBigEndianScalar<unsigned short>>(&v99, (unint64_t)v20, 4);
              v21 = bswap32(*v20);
              if (v17 < HIWORD(v21))
                goto LABEL_17;
              v22 = HIWORD(v21);
              if (v22 + (bswap32(v20[1]) >> 16) <= v17)
                goto LABEL_17;
              v23 = v17 - (_WORD)v22;
              v25 = v20[3];
              v24 = v20 + 3;
              v26 = bswap32(*(v24 - 1));
              v27 = (unint64_t)v24 + ((bswap32(v25) >> 16) & 0xFFFE);
              TcmapTableDataRef::validateArray<FPBigEndianScalar<unsigned short>>(&v99, v27, 1);
              v28 = (unsigned __int16 *)(v27 + 2 * v23);
              TcmapTableDataRef::validateArray<FPBigEndianScalar<unsigned short>>(&v99, (unint64_t)v28, 1);
              v29 = (bswap32(*v28) >> 16) + HIWORD(v26);
              a4 = v93;
              if ((_WORD)v29)
              {
                *a3++ = v29;
              }
              else
              {
LABEL_17:
                *a3++ = 0;
                --v16;
                if ((int)v14 >= (unsigned __int16)v15)
                  v14 = (unsigned __int16)v15;
                else
                  v14 = v14;
                v101 = __PAIR64__(v16, v14);
              }
            }
            ++v15;
          }
          while (v15 < *a4);
        }
        else
        {
          v16 = 0;
        }
        *a4 = v16;
        a3 = v91;
        goto LABEL_146;
      case 4u:
        v98 = (void (**)(TcmapTableFileData32 *__hidden))v103;
        v99 = (char *)v102;
        goto LABEL_25;
      case 6u:
        v98 = (void (**)(TcmapTableFileData32 *__hidden))v103;
        v99 = 0;
LABEL_25:
        v14 = v30;
        goto LABEL_146;
      case 0xCu:
        v100 = v9;
        v101 = v10;
        v98 = &off_1E61794A0;
        v99 = (char *)TableEnd;
        if (v9)
          v101 = v9 + 12;
        v94 = &v98;
        v95 = v102;
        v31 = (unsigned int *)TcmapTableFileData16::GetDataP((TcmapTableFileData16 *)&v98, 0);
        TcmapTableDataRef::validateArray<FPBigEndianScalar<unsigned int>>(&v94, (unint64_t)v31, 1);
        v32 = v31 + 1;
        v33 = bswap32(*v31);
        v34 = (unint64_t)&v31[3 * v33 + 1];
        v36 = v34 >= (unint64_t)(v31 + 1) && v34 <= (unint64_t)v99;
        if (v12)
        {
          if (!v36)
          {
            if (v31 + 4 <= (unsigned int *)v99)
              v33 = (v99 - (char *)v32) / 0xCuLL;
            else
              v33 = 0;
          }
          v37 = *a4;
          v96 = v37;
          v97 = v37;
          if (v37)
          {
            v38 = 0;
            v39 = (unint64_t)&v32[3 * v33];
            v40 = a3;
            v92 = a3;
            while (1)
            {
              v41 = v38;
              v42 = *(unsigned __int16 *)(a2 + 2 * v38++);
              if (v38 != v37
                && (v42 & 0xFC00) == 0xD800
                && (v43 = *(unsigned __int16 *)(a2 + 2 * v38), (v43 & 0xFC00) == 0xDC00))
              {
                v38 = v41 + 2;
                v42 = (v42 << 10) - 56613888 + v43;
              }
              else
              {
                if (v42 >> 9 < 0x7F)
                  goto LABEL_60;
                if (v42 >> 4 < 0xFE1)
                {
                  v44 = 1;
                  if (!(_DWORD)v41)
                    goto LABEL_60;
                  goto LABEL_50;
                }
              }
              v44 = v42 - 917760 < 0xF0;
              if (!(_DWORD)v41)
                goto LABEL_60;
LABEL_50:
              if (!v44)
              {
LABEL_60:
                {
                  v50 = v96;
                  if (v96 >= (unsigned __int16)v41)
                    v50 = (unsigned __int16)v41;
                  v96 = v50;
                  --v97;
                }
                goto LABEL_64;
              }
              v45 = v41 - 1;
              v46 = *(unsigned __int16 *)(a2 + 2 * (v41 - 1));
              if (v41 >= 2 && (v46 & 0xFC00) == 0xDC00)
              {
                v47 = *(unsigned __int16 *)(a2 + 2 * (v41 - 2));
                v48 = (v47 & 0xFC00) == 55296;
                v49 = v46 - 56613888 + (v47 << 10);
                if (v48)
                  v45 = v41 - 2;
                if (v48)
                  v46 = v49;
              }
              *v40 = (__int16)((unsigned __int16)TFormat14UVSTable::Map<unsigned short>(v95[2], v95[1], v46, v42, &v40[v45 - v41]) << 15) >> 15;
LABEL_64:
              if (v42 >= 0x10000)
              {
                v40[1] = 0;
                v40 += 2;
              }
              else
              {
                ++v40;
              }
              v37 = *a4;
              if (v38 >= *a4)
                goto LABEL_141;
            }
          }
        }
        else
        {
          if (!v36)
          {
            if (v31 + 4 <= (unsigned int *)v99)
              v33 = (v99 - (char *)v32) / 0xCuLL;
            else
              v33 = 0;
          }
          v78 = *a4;
          v96 = v78;
          v97 = v78;
          if (v78)
          {
            v79 = a3;
            v80 = 0;
            v81 = (unint64_t)&v32[3 * v33];
            v92 = v79;
            do
            {
              v82 = v80 + 1;
              v83 = *(unsigned __int16 *)(a2 + 2 * v80);
              if (v80 + 1 != v78 && (v83 & 0xFC00) == 0xD800)
              {
                v84 = *(unsigned __int16 *)(a2 + 2 * v82);
                v85 = (v84 & 0xFC00) == 56320;
                v86 = (v83 << 10) - 56613888 + v84;
                v82 = v85 ? v80 + 2 : v80 + 1;
                if (v85)
                  v83 = v86;
              }
              {
                v87 = v96;
                if (v96 >= (unsigned __int16)v80)
                  v87 = (unsigned __int16)v80;
                v96 = v87;
                --v97;
              }
              if (v83 >= 0x10000)
              {
                v79[1] = 0;
                v79 += 2;
              }
              else
              {
                ++v79;
              }
              v78 = *a4;
              v80 = v82;
            }
            while (v82 < *a4);
LABEL_141:
            v88 = v97;
            a3 = v92;
            goto LABEL_143;
          }
        }
        v88 = 0;
LABEL_143:
        *a4 = v88;
        v14 = v96;
LABEL_146:
        if ((_DWORD)v14 == -1)
          goto LABEL_147;
        return v14;
      case 0xDu:
        v100 = v9;
        v101 = v10;
        v98 = &off_1E61794A0;
        v99 = (char *)TableEnd;
        if (v9)
          v101 = v9 + 12;
        v94 = &v98;
        v95 = 0;
        v51 = (unsigned int *)TcmapTableFileData16::GetDataP((TcmapTableFileData16 *)&v98, 0);
        TcmapTableDataRef::validateArray<FPBigEndianScalar<unsigned int>>(&v94, (unint64_t)v51, 1);
        v52 = v51 + 4;
        v54 = *v51;
        v53 = v51 + 1;
        v55 = bswap32(v54);
        v56 = &v53[3 * v55];
        if (v52 <= (unsigned int *)v99)
          LODWORD(v57) = (v99 - (char *)v53) / 0xCuLL;
        else
          LODWORD(v57) = 0;
        if (v56 < v53 || v56 > (unsigned int *)v99)
          v57 = v57;
        else
          v57 = v55;
        v59 = *a4;
        if (!(_DWORD)v59)
        {
          v14 = 0;
          v61 = 0;
          goto LABEL_145;
        }
        v60 = 0;
        v14 = *a4;
        v61 = *a4;
        v62 = a3;
        break;
      default:
        goto LABEL_147;
    }
    while (1)
    {
      v63 = v60 + 1;
      v64 = *(unsigned __int16 *)(a2 + 2 * v60);
      if ((v64 & 0xFC00) == 0xD800 && v63 != v59)
      {
        v66 = *(unsigned __int16 *)(a2 + 2 * v63);
        v67 = (v66 & 0xFC00) == 56320;
        v68 = (v64 << 10) - 56613888 + v66;
        v63 = (v66 & 0xFC00) == 0xDC00 ? v60 + 2 : v60 + 1;
        if (v67)
          v64 = v68;
      }
      if (!(_DWORD)v57)
        goto LABEL_104;
      v69 = v57;
      v70 = v53;
      do
      {
        v71 = v69 >> 1;
        v72 = &v70[3 * (v69 >> 1)];
        v74 = *v72;
        v73 = v72 + 3;
        v69 += ~(v69 >> 1);
        if (bswap32(v74) > v64)
          v69 = v71;
        else
          v70 = v73;
      }
      while (v69);
      v75 = v70 == v53 ? v53 : v70 - 3;
      if (((a4 = v93, v75 != v53) || bswap32(*v53) <= v64) && bswap32(v75[1]) >= v64)
      {
        v76 = bswap32(v75[2]);
        v77 = v76 >= 0xFFFF;
        if (v76 >= 0xFFFF)
          LOWORD(v76) = 0;
        *v62 = v76;
        if (!v77)
          goto LABEL_108;
      }
      else
      {
LABEL_104:
        *v62 = 0;
      }
      --v61;
      if ((int)v14 >= (unsigned __int16)v60)
        v14 = (unsigned __int16)v60;
      else
        v14 = v14;
LABEL_108:
      if (v64 >= 0x10000)
      {
        v62[1] = 0;
        v62 += 2;
      }
      else
      {
        ++v62;
      }
      v60 = v63;
      if (v63 >= v59)
      {
LABEL_145:
        *a4 = v61;
        goto LABEL_146;
      }
    }
  }
LABEL_147:
  v89 = *a4;
  if ((_DWORD)v89)
    bzero(a3, 2 * v89);
  *a4 = 0;
  return 0xFFFFFFFFLL;
}

uint64_t TcmapUnicodeTable::MapGlyphs<unsigned int>(uint64_t a1, uint64_t a2, unsigned int *a3, unsigned int *a4)
{
  unint64_t TableEnd;
  unint64_t v9;
  unint64_t v10;
  unsigned __int16 *v11;
  uint64_t v12;
  unint64_t DataP;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned __int16 *v21;
  unsigned int v22;
  unsigned int v23;
  unsigned __int16 v24;
  unsigned __int16 *v25;
  unsigned int v26;
  unint64_t v27;
  unsigned int *v28;
  unsigned int *v29;
  unsigned int v30;
  unint64_t v31;
  unsigned __int16 *v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  int v36;
  unsigned __int16 *v37;
  uint64_t v38;
  unint64_t v39;
  unsigned __int16 *v40;
  unsigned int v41;
  uint64_t v42;
  unsigned int v43;
  unsigned __int16 *v44;
  unsigned int v45;
  unsigned int v46;
  unint64_t v47;
  unsigned int v48;
  unsigned __int16 *v49;
  unsigned int v50;
  unsigned int v51;
  unsigned __int16 *v52;
  unsigned int v53;
  unsigned int *v54;
  unsigned int *v55;
  unsigned int v56;
  unint64_t v57;
  BOOL v59;
  int v60;
  unsigned int v61;
  unint64_t v62;
  unsigned int *v63;
  uint64_t v64;
  unsigned int v65;
  int v66;
  _BOOL4 v67;
  uint64_t v68;
  int v69;
  int v70;
  BOOL v71;
  int v72;
  int v73;
  int v74;
  unsigned int *v75;
  unsigned int *v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v80;
  unint64_t v81;
  unsigned int *v82;
  unint64_t v83;
  unsigned int v84;
  int v86;
  BOOL v87;
  unsigned int v88;
  unint64_t v89;
  unsigned int *v90;
  unint64_t v91;
  unsigned int *v92;
  unsigned int *v93;
  unsigned int v94;
  uint64_t v95;
  unsigned int v96;
  BOOL v97;
  unsigned __int16 *v98;
  unsigned int v99;
  unint64_t v100;
  unsigned __int16 *v101;
  unsigned int v102;
  uint64_t v103;
  unsigned int v104;
  int v105;
  unsigned int *v106;
  unsigned int v107;
  unint64_t v108;
  unsigned int v109;
  unsigned int v110;
  int v111;
  BOOL v112;
  unsigned int v113;
  int v114;
  unsigned int v115;
  uint64_t v116;
  unint64_t v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unsigned int *v122;
  unint64_t v123;
  unsigned int v124;
  int v125;
  unsigned int v126;
  _BOOL4 v127;
  unsigned __int16 *v128;
  uint64_t v129;
  int v130;
  unsigned __int16 *v131;
  unsigned int v132;
  unint64_t v133;
  unint64_t v134;
  unsigned __int16 *v135;
  unsigned __int16 *v136;
  unsigned __int16 *v137;
  unsigned int v138;
  BOOL v139;
  unsigned __int16 *v140;
  unsigned int v141;
  unsigned __int16 *v142;
  unsigned int v143;
  unsigned __int16 *v144;
  unsigned __int16 *v145;
  unsigned int v147;
  unsigned int v149;
  unsigned int v150;
  unsigned int v151;
  unint64_t v152;
  uint64_t v153;
  int v154;
  unsigned int *v155;
  unsigned __int16 v156;
  unsigned __int16 *v157;
  unsigned int v158;
  unint64_t v159;
  unint64_t v160;
  unsigned __int16 *v161;
  unsigned __int16 *v162;
  unsigned __int16 *v163;
  unsigned int v164;
  BOOL v165;
  unsigned __int16 *v166;
  unsigned int v167;
  unsigned __int16 *v168;
  unsigned int v169;
  unsigned __int16 *v170;
  unsigned __int16 *v171;
  unsigned int v173;
  unsigned int v174;
  unsigned __int16 v176;
  unsigned int v177;
  _DWORD *exception;
  int v179;
  uint64_t v180;
  uint64_t v181;
  unsigned int v182;
  uint64_t v183;
  unsigned int v184;
  unsigned int *v185;
  unsigned int *v186;
  uint64_t v187;
  void (***v188)(TcmapTableFileData32 *__hidden);
  _QWORD *v189;
  int v190;
  unsigned int v191;
  void (**v192)(TcmapTableFileData32 *__hidden);
  void (***v193)(TcmapTableFileData16 *__hidden);
  unint64_t v194;
  unint64_t v195;
  _QWORD v196[3];
  void (**v197)(TcmapTableFileData16 *__hidden);
  unint64_t v198;
  uint64_t v199;
  unint64_t v200;

  TableEnd = TsfntTable::GetTableEnd((TsfntTable *)a1);
  v197 = &off_1E61794D0;
  v198 = TableEnd;
  v9 = *(_QWORD *)(a1 + 64);
  if (v9)
    v10 = v9 + 6;
  else
    v10 = 0;
  v199 = *(_QWORD *)(a1 + 64);
  v200 = v10;
  v196[0] = &off_1E6179730;
  v196[1] = TsfntTable::GetTableEnd((TsfntTable *)a1);
  v11 = *(unsigned __int16 **)(a1 + 64);
  v12 = *(_QWORD *)(a1 + 72);
  v196[2] = v12;
  if (v11)
  {
    switch(bswap32(*v11) >> 16)
    {
      case 2u:
        v193 = &v197;
        v194 = 0;
        v192 = &off_1E61B4C08;
        DataP = TcmapTableFileData16::GetDataP((TcmapTableFileData16 *)&v197, 0);
        TcmapTableDataRef::validateArray<FPBigEndianScalar<unsigned short>>(&v193, DataP, 256);
        v14 = *a4;
        LODWORD(v195) = v14;
        HIDWORD(v195) = v14;
        if (v14)
        {
          v15 = 0;
          v16 = DataP + 512;
          v17 = a3;
          v187 = a2;
          do
          {
            v18 = *(unsigned __int16 *)(a2 + 2 * v15);
            v19 = bswap32(*(unsigned __int16 *)(DataP + 2 * (v18 >> 8))) >> 16;
            if (v18 < 0x100 || v19 >= 8)
            {
              v21 = (unsigned __int16 *)(v16 + ((unsigned __int16)v19 & 0xFFFE));
              TcmapTableDataRef::validateArray<FPBigEndianScalar<unsigned short>>(&v193, (unint64_t)v21, 4);
              v22 = bswap32(*v21);
              if (v18 < HIWORD(v22))
                goto LABEL_17;
              v23 = HIWORD(v22);
              if (v23 + (bswap32(v21[1]) >> 16) <= v18)
                goto LABEL_17;
              v24 = v18 - (_WORD)v23;
              v26 = v21[3];
              v25 = v21 + 3;
              v27 = v16;
              v28 = a4;
              v29 = a3;
              v30 = bswap32(*(v25 - 1));
              v31 = (unint64_t)v25 + ((bswap32(v26) >> 16) & 0xFFFE);
              TcmapTableDataRef::validateArray<FPBigEndianScalar<unsigned short>>(&v193, v31, 1);
              v32 = (unsigned __int16 *)(v31 + 2 * v24);
              TcmapTableDataRef::validateArray<FPBigEndianScalar<unsigned short>>(&v193, (unint64_t)v32, 1);
              v33 = (bswap32(*v32) >> 16) + HIWORD(v30);
              a3 = v29;
              a4 = v28;
              v16 = v27;
              a2 = v187;
              if ((_WORD)v33)
              {
                *v17++ = (unsigned __int16)v33;
              }
              else
              {
LABEL_17:
                *v17++ = 0;
                v34 = v195;
                if ((int)v195 >= (unsigned __int16)v15)
                  v34 = (unsigned __int16)v15;
                v195 = __PAIR64__(HIDWORD(v195), v34) - 0x100000000;
              }
            }
            ++v15;
          }
          while (v15 < *a4);
          v35 = v195;
          v14 = HIDWORD(v195);
        }
        else
        {
          v35 = 0;
        }
        goto LABEL_165;
      case 4u:
        v192 = (void (**)(TcmapTableFileData32 *__hidden))&v197;
        v193 = (void (***)(TcmapTableFileData16 *__hidden))v196;
        v36 = *(unsigned __int8 *)(a1 + 80);
        v35 = *a4;
        LODWORD(v194) = v35;
        HIDWORD(v194) = v35;
        if (v12)
        {
          if ((_DWORD)v35)
          {
            v37 = (unsigned __int16 *)TcmapTableFileData16::GetDataP((TcmapTableFileData16 *)&v197, 0);
            TcmapTableDataRef::validateArray<FPBigEndianScalar<unsigned short>>(&v192, (unint64_t)v37, 1);
            v38 = bswap32(*v37) >> 16;
            if ((v38 & 1) == 0)
            {
              v39 = v198;
              v40 = v37 + 4;
              if (v38 < 0x10)
              {
                v43 = 0;
                v184 = 0;
                LODWORD(v42) = 0;
                goto LABEL_174;
              }
              v41 = __clz(v38);
              v42 = (1 << (v41 ^ 0x1F));
              if ((unint64_t)v40 + v42 + 2 <= v198)
              {
                v43 = 30 - v41;
                v184 = bswap32(*(unsigned __int16 *)((char *)v40 + v42)) >> 16;
                v37 = (unsigned __int16 *)((char *)v40 + (v38 - v42));
LABEL_174:
                v118 = *a4;
                v104 = v35;
                if (!(_DWORD)v118)
                  goto LABEL_138;
                v119 = 0;
                v120 = v38 >> 1;
                v121 = (unsigned __int16)v38 & 0xFFFE;
                v122 = a3;
                v179 = v42;
                v180 = v121;
                v183 = v42;
                v186 = a3;
                v182 = v43;
                v181 = v120;
                while (1)
                {
                  v123 = v119 + 1;
                  v124 = *(unsigned __int16 *)(a2 + 2 * v119);
                  if (v119 + 1 != v118 && (v124 & 0xFC00) == 0xD800)
                  {
                    v125 = *(unsigned __int16 *)(a2 + 2 * v123);
                    if ((v125 & 0xFC00) == 0xDC00)
                      break;
                  }
                  if (v124 >> 9 < 0x7F)
                    goto LABEL_192;
                  if (v124 >> 4 >= 0xFE1)
                  {
                    v126 = *(unsigned __int16 *)(a2 + 2 * v119);
LABEL_185:
                    v127 = v126 - 917760 < 0xF0;
                    if (!v119)
                      goto LABEL_192;
                    goto LABEL_186;
                  }
                  v127 = 1;
                  v126 = *(unsigned __int16 *)(a2 + 2 * v119);
                  if (!v119)
                    goto LABEL_192;
LABEL_186:
                  if (v127)
                  {
                    v128 = v40;
                    v129 = v38;
                    if (TFormat14UVSTable::Map<unsigned int>((uint64_t)v193[2], (unint64_t)v193[1], *(unsigned __int16 *)(a2 + 2 * v119 - 2), v126, v122 - 1))v130 = 0xFFFFFF;
                    else
                      v130 = 0;
                    *v122 = v130;
                    if (v126 >= 0x10000)
                    {
                      v122[1] = 0;
                      v122 += 2;
                      v123 = v119 + 2;
                    }
                    else
                    {
                      ++v122;
                    }
                    v38 = v129;
                    v40 = v128;
                    a3 = v186;
                    v43 = v182;
                    v121 = v180;
                    v120 = v181;
                    goto LABEL_229;
                  }
LABEL_192:
                  v131 = v40;
                  if (v38 >= 0x10)
                  {
                    if (v124 >= v184)
                      v131 = v37;
                    else
                      v131 = v40;
                    if ((unint64_t)v131 + v183 > v39)
                      goto LABEL_136;
                    if (v43 >= 4)
                    {
                      v132 = v43;
                      LODWORD(v133) = v179;
                      do
                      {
                        v134 = v133;
                        v133 = (unint64_t)v133 >> 1;
                        v135 = (unsigned __int16 *)((char *)v131 + (v134 >> 1));
                        if (v124 > bswap32(*v135) >> 16)
                          v131 = v135;
                        --v132;
                      }
                      while (v132 > 3);
                    }
                  }
                  if ((unint64_t)(v131 + 1) <= v39)
                  {
                    do
                    {
                      v136 = v131 + 1;
                      v138 = *v131;
                      v137 = v131 + 2;
                      v139 = v124 <= bswap32(v138) >> 16 || (unint64_t)v137 > v39;
                      v131 = v136;
                    }
                    while (!v139);
                    v131 = v136;
                  }
                  v140 = &v131[v120];
                  if ((unint64_t)&v140[v121 + 1] > v39 || (v141 = bswap32(*v140), v124 < HIWORD(v141)))
                  {
LABEL_226:
                    *v122++ = 0;
                    v149 = v194;
                    if ((int)v194 >= (unsigned __int16)v119)
                      v149 = (unsigned __int16)v119;
                    v194 = __PAIR64__(HIDWORD(v194), v149) - 0x100000000;
                    goto LABEL_229;
                  }
                  v142 = &v140[v120];
                  v143 = bswap32(*v142) >> 16;
                  v144 = &v142[v120];
                  if (*v144)
                  {
                    v145 = (unsigned __int16 *)((char *)&v144[(unsigned __int16)(v124 - HIWORD(v141))] + __rev16(*v144));
                    if (v145 <= v40 || (unint64_t)(v145 + 1) > v39)
                      goto LABEL_226;
                    v147 = *v145;
                    v71 = v147 == 0;
                    v124 = (unsigned __int16)(v143 + (bswap32(v147) >> 16));
                    if (v71 || v124 == 0)
                      goto LABEL_226;
                  }
                  else
                  {
                    LOWORD(v124) = v143 + v124;
                    if (!(_WORD)v124)
                      goto LABEL_226;
                    v124 = (unsigned __int16)v124;
                  }
                  *v122++ = v124;
LABEL_229:
                  v118 = *a4;
                  v119 = v123;
                  if (v123 >= v118)
                  {
                    v35 = v194;
                    v104 = HIDWORD(v194);
                    goto LABEL_138;
                  }
                }
                v126 = (v124 << 10) - 56613888 + v125;
                goto LABEL_185;
              }
              goto LABEL_136;
            }
LABEL_278:
            exception = __cxa_allocate_exception(0x10uLL);
            *(_QWORD *)exception = &off_1E6176998;
            exception[2] = 4;
          }
LABEL_137:
          v104 = 0;
          goto LABEL_138;
        }
        if (!(_DWORD)v35)
          goto LABEL_137;
        v98 = (unsigned __int16 *)TcmapTableFileData16::GetDataP((TcmapTableFileData16 *)&v197, 0);
        TcmapTableDataRef::validateArray<FPBigEndianScalar<unsigned short>>(&v192, (unint64_t)v98, 1);
        v99 = bswap32(*v98) >> 16;
        if ((v99 & 1) != 0)
          goto LABEL_278;
        v100 = v198;
        v101 = v98 + 4;
        if (v99 < 0x10)
        {
          LODWORD(v103) = 0;
          v150 = 0;
          v151 = 0;
        }
        else
        {
          v102 = __clz(v99);
          v103 = (1 << (v102 ^ 0x1F));
          if ((unint64_t)v101 + v103 + 2 > v198)
          {
LABEL_136:
            v35 = 0;
            goto LABEL_137;
          }
          v150 = 30 - v102;
          v151 = bswap32(*(unsigned __int16 *)((char *)v101 + v103)) >> 16;
          v98 = (unsigned __int16 *)((char *)v101 + v99 - v103);
        }
        if (*a4)
        {
          v152 = 0;
          v153 = v99 >> 1;
          v154 = v35;
          v104 = v35;
          v155 = a3;
          do
          {
            v156 = *(_WORD *)(a2 + 2 * v152);
            do
            {
              v157 = v101;
              if (v99 >= 0x10)
              {
                if (v151 <= v156)
                  v157 = v98;
                else
                  v157 = v101;
                if ((unint64_t)v157 + v103 > v100)
                  goto LABEL_136;
                if (v150 >= 4)
                {
                  v158 = v150;
                  LODWORD(v159) = v103;
                  do
                  {
                    v160 = v159;
                    v159 = (unint64_t)v159 >> 1;
                    v161 = (unsigned __int16 *)((char *)v157 + (v160 >> 1));
                    if (v156 > bswap32(*v161) >> 16)
                      v157 = v161;
                    --v158;
                  }
                  while (v158 > 3);
                }
              }
              if ((unint64_t)(v157 + 1) <= v100)
              {
                do
                {
                  v162 = v157 + 1;
                  v164 = *v157;
                  v163 = v157 + 2;
                  v165 = v156 <= bswap32(v164) >> 16 || (unint64_t)v163 > v100;
                  v157 = v162;
                }
                while (!v165);
                v157 = v162;
              }
              v166 = &v157[v153];
              if ((unint64_t)&v166[(v99 & 0xFFFE) + 1] <= v100)
              {
                v167 = bswap32(*v166) >> 16;
                if (v167 <= v156)
                {
                  v168 = &v166[v153];
                  v169 = bswap32(*v168) >> 16;
                  v170 = &v168[v153];
                  if (*v170)
                  {
                    v171 = (unsigned __int16 *)((char *)&v170[(unsigned __int16)(v156 - v167)] + __rev16(*v170));
                    if (v171 > v101 && (unint64_t)(v171 + 1) <= v100)
                    {
                      v173 = *v171;
                      v174 = (unsigned __int16)(v169 + (bswap32(v173) >> 16));
                      if (v173 && v174 != 0)
                      {
                        *v155 = v174;
                        goto LABEL_273;
                      }
                    }
                  }
                  else
                  {
                    v176 = v169 + v156;
                    if (v176)
                    {
                      *v155 = v176;
                      goto LABEL_273;
                    }
                  }
                }
              }
              if (!v36)
                break;
              v177 = v156;
              v156 -= 4096;
            }
            while (v177 < 0x100);
            *v155 = 0;
            --v104;
            if (v154 <= (unsigned __int16)v152)
              v35 = v35;
            else
              v35 = (unsigned __int16)v152;
            if (v154 >= (unsigned __int16)v152)
              v154 = (unsigned __int16)v152;
LABEL_273:
            ++v155;
            ++v152;
          }
          while (v152 < *a4);
        }
        else
        {
          v104 = v35;
        }
LABEL_138:
        *a4 = v104;
        goto LABEL_168;
      case 6u:
        v192 = (void (**)(TcmapTableFileData32 *__hidden))&v197;
        v193 = 0;
        v44 = (unsigned __int16 *)TcmapTableFileData16::GetDataP((TcmapTableFileData16 *)&v197, 0);
        TcmapTableDataRef::validateArray<FPBigEndianScalar<unsigned short>>(&v192, (unint64_t)v44, 1);
        v45 = *v44;
        TcmapTableDataRef::validateArray<FPBigEndianScalar<unsigned short>>(&v192, (unint64_t)(v44 + 1), 1);
        v46 = v44[1];
        v35 = *a4;
        LODWORD(v194) = v35;
        HIDWORD(v194) = v35;
        if ((_DWORD)v35)
        {
          v47 = 0;
          v48 = bswap32(v45) >> 16;
          v49 = v44 + 2;
          v50 = bswap32(v46) >> 16;
          v51 = v35;
          do
          {
            if (v50 <= (unsigned __int16)(*(_WORD *)(a2 + 2 * v47) - v48))
            {
              v53 = 0;
              --v51;
              if ((int)v35 >= (unsigned __int16)v47)
                v35 = (unsigned __int16)v47;
              else
                v35 = v35;
              v194 = __PAIR64__(v51, v35);
            }
            else
            {
              v52 = &v49[(unsigned __int16)(*(_WORD *)(a2 + 2 * v47) - v48)];
              TcmapTableDataRef::validateArray<FPBigEndianScalar<unsigned short>>(&v192, (unint64_t)v52, 1);
              v53 = bswap32(*v52) >> 16;
            }
            a3[v47++] = v53;
          }
          while (v47 < *a4);
        }
        else
        {
          v51 = 0;
        }
        *a4 = v51;
        goto LABEL_168;
      case 0xCu:
        v194 = v9;
        v195 = v10;
        v192 = &off_1E61794A0;
        v193 = (void (***)(TcmapTableFileData16 *__hidden))TableEnd;
        if (v9)
          v195 = v9 + 12;
        v188 = &v192;
        v189 = v196;
        v54 = (unsigned int *)TcmapTableFileData16::GetDataP((TcmapTableFileData16 *)&v192, 0);
        TcmapTableDataRef::validateArray<FPBigEndianScalar<unsigned int>>(&v188, (unint64_t)v54, 1);
        v55 = v54 + 1;
        v56 = bswap32(*v54);
        v57 = (unint64_t)&v54[3 * v56 + 1];
        v59 = v57 >= (unint64_t)(v54 + 1) && v57 <= (unint64_t)v193;
        if (v12)
        {
          if (!v59)
          {
            if (v54 + 4 <= (unsigned int *)v193)
              v56 = ((char *)v193 - (char *)v55) / 0xCuLL;
            else
              v56 = 0;
          }
          v60 = *a4;
          v190 = v60;
          v191 = v60;
          if (v60)
          {
            v61 = 0;
            v62 = (unint64_t)&v55[3 * v56];
            v185 = a3;
            v63 = a3;
            while (1)
            {
              v64 = v61;
              v65 = *(unsigned __int16 *)(a2 + 2 * v61++);
              if (v61 != v60
                && (v65 & 0xFC00) == 0xD800
                && (v66 = *(unsigned __int16 *)(a2 + 2 * v61), (v66 & 0xFC00) == 0xDC00))
              {
                v61 = v64 + 2;
                v65 = (v65 << 10) - 56613888 + v66;
              }
              else
              {
                if (v65 >> 9 < 0x7F)
                  goto LABEL_75;
                if (v65 >> 4 < 0xFE1)
                {
                  v67 = 1;
                  if (!(_DWORD)v64)
                    goto LABEL_75;
                  goto LABEL_62;
                }
              }
              v67 = v65 - 917760 < 0xF0;
              if (!(_DWORD)v64)
                goto LABEL_75;
LABEL_62:
              if (!v67)
              {
LABEL_75:
                {
                  v74 = v190;
                  if (v190 >= (unsigned __int16)v64)
                    v74 = (unsigned __int16)v64;
                  v190 = v74;
                  --v191;
                }
                goto LABEL_79;
              }
              v68 = v64 - 1;
              v69 = *(unsigned __int16 *)(a2 + 2 * (v64 - 1));
              if (v64 >= 2 && (v69 & 0xFC00) == 0xDC00)
              {
                v70 = *(unsigned __int16 *)(a2 + 2 * (v64 - 2));
                v71 = (v70 & 0xFC00) == 55296;
                v72 = v69 - 56613888 + (v70 << 10);
                if (v71)
                  v68 = v64 - 2;
                if (v71)
                  v69 = v72;
              }
              if (TFormat14UVSTable::Map<unsigned int>(v189[2], v189[1], v69, v65, &v63[v68 - v64]))
                v73 = 0xFFFFFF;
              else
                v73 = 0;
              *v63 = v73;
LABEL_79:
              if (v65 >= 0x10000)
              {
                v63[1] = 0;
                v63 += 2;
              }
              else
              {
                ++v63;
              }
              v60 = *a4;
              if (v61 >= *a4)
                goto LABEL_163;
            }
          }
        }
        else
        {
          if (!v59)
          {
            if (v54 + 4 <= (unsigned int *)v193)
              v56 = ((char *)v193 - (char *)v55) / 0xCuLL;
            else
              v56 = 0;
          }
          v105 = *a4;
          v190 = v105;
          v191 = v105;
          if (v105)
          {
            v106 = a3;
            v107 = 0;
            v108 = (unint64_t)&v55[3 * v56];
            v185 = v106;
            do
            {
              v109 = v107 + 1;
              v110 = *(unsigned __int16 *)(a2 + 2 * v107);
              if (v107 + 1 != v105 && (v110 & 0xFC00) == 0xD800)
              {
                v111 = *(unsigned __int16 *)(a2 + 2 * v109);
                v112 = (v111 & 0xFC00) == 56320;
                v113 = (v110 << 10) - 56613888 + v111;
                v109 = v112 ? v107 + 2 : v107 + 1;
                if (v112)
                  v110 = v113;
              }
              {
                v114 = v190;
                if (v190 >= (unsigned __int16)v107)
                  v114 = (unsigned __int16)v107;
                v190 = v114;
                --v191;
              }
              if (v110 >= 0x10000)
              {
                v106[1] = 0;
                v106 += 2;
              }
              else
              {
                ++v106;
              }
              v105 = *a4;
              v107 = v109;
            }
            while (v109 < *a4);
LABEL_163:
            v115 = v191;
            a3 = v185;
            goto LABEL_167;
          }
        }
        v115 = 0;
LABEL_167:
        *a4 = v115;
        v35 = v190;
        goto LABEL_168;
      case 0xDu:
        v194 = v9;
        v195 = v10;
        v192 = &off_1E61794A0;
        v193 = (void (***)(TcmapTableFileData16 *__hidden))TableEnd;
        if (v9)
          v195 = v9 + 12;
        v188 = &v192;
        v189 = 0;
        v75 = (unsigned int *)TcmapTableFileData16::GetDataP((TcmapTableFileData16 *)&v192, 0);
        TcmapTableDataRef::validateArray<FPBigEndianScalar<unsigned int>>(&v188, (unint64_t)v75, 1);
        v76 = v75 + 1;
        LODWORD(v77) = bswap32(*v75);
        v78 = (unint64_t)&v75[3 * v77 + 1];
        if (v78 < (unint64_t)(v75 + 1) || v78 > (unint64_t)v193)
        {
          if (v75 + 4 > (unsigned int *)v193)
            LODWORD(v77) = 0;
          else
            v77 = ((char *)v193 - (char *)v76) / 0xCuLL;
        }
        v80 = *a4;
        v190 = v80;
        v191 = v80;
        if ((_DWORD)v80)
        {
          v81 = 0;
          v82 = a3;
          while (1)
          {
            v83 = v81 + 1;
            v84 = *(unsigned __int16 *)(a2 + 2 * v81);
            if ((v84 & 0xFC00) == 0xD800 && v83 != v80)
            {
              v86 = *(unsigned __int16 *)(a2 + 2 * v83);
              v87 = (v86 & 0xFC00) == 56320;
              v88 = (v84 << 10) - 56613888 + v86;
              v83 = (v86 & 0xFC00) == 0xDC00 ? v81 + 2 : v81 + 1;
              if (v87)
                v84 = v88;
            }
            if (!(_DWORD)v77)
              goto LABEL_117;
            v89 = v77;
            v90 = v75 + 1;
            do
            {
              v91 = v89 >> 1;
              v92 = &v90[3 * (v89 >> 1)];
              v94 = *v92;
              v93 = v92 + 3;
              v89 += ~(v89 >> 1);
              if (bswap32(v94) > v84)
                v89 = v91;
              else
                v90 = v93;
            }
            while (v89);
            v95 = (uint64_t)(v90 == v76 ? v75 + 1 : v90 - 3);
            if (((unsigned int *)v95 != v76 || bswap32(*v76) <= v84) && bswap32(*(_DWORD *)(v95 + 4)) >= v84)
            {
              v96 = bswap32(*(_DWORD *)(v95 + 8));
              v97 = v96 >= 0xFFFFFF;
              if (v96 >= 0xFFFFFF)
                v96 = 0;
              *v82 = v96;
              if (!v97)
                goto LABEL_122;
            }
            else
            {
LABEL_117:
              *v82 = 0;
            }
            if (v190 >= (unsigned __int16)v81)
              LODWORD(v81) = (unsigned __int16)v81;
            else
              LODWORD(v81) = v190;
            v190 = v81;
            --v191;
LABEL_122:
            if (v84 >= 0x10000)
            {
              v82[1] = 0;
              v82 += 2;
            }
            else
            {
              ++v82;
            }
            v80 = *a4;
            v81 = v83;
            if (v83 >= v80)
            {
              v35 = v190;
              v14 = v191;
              goto LABEL_165;
            }
          }
        }
        v35 = 0;
        v14 = 0;
LABEL_165:
        *a4 = v14;
LABEL_168:
        if ((_DWORD)v35 == -1)
          break;
        return v35;
      default:
        break;
    }
  }
  v116 = *a4;
  if ((_DWORD)v116)
    bzero(a3, 4 * v116);
  *a4 = 0;
  return 0xFFFFFFFFLL;
}

uint64_t TcmapUnicodeTable::MapRange(TcmapUnicodeTable *this, CFRange a2, unsigned __int16 *a3)
{
  CFIndex length;
  unint64_t location;
  unint64_t TableEnd;
  unsigned __int16 *v8;
  unsigned __int16 *v9;
  unsigned int v10;
  uint64_t v11;
  CFIndex v13;
  CFIndex v14;
  unint64_t v15;
  CFRange v16;
  unsigned int *DataP;
  unsigned int *v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int *v23;
  unsigned int *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v28;
  unsigned int v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  unint64_t v33;
  unsigned int *v34;
  unsigned int *v35;
  unsigned int v36;
  unint64_t v37;
  unsigned int *v38;
  unint64_t v39;
  unint64_t v40;
  unsigned int *v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int *v46;
  unsigned int v47;
  unint64_t v48;
  unsigned int *v49;
  unsigned int v50;
  uint64_t v51;
  unsigned int *v52;
  unint64_t v53;
  unsigned int *v54;
  unsigned int *v55;
  unsigned int v56;
  unint64_t v57;
  unsigned int *v58;
  unint64_t v59;
  unint64_t v60;
  unsigned int *v61;
  unsigned int *v62;
  unsigned int v63;
  unsigned int *v64;
  unsigned int v65;
  unsigned int *v66;
  unsigned int v67;
  unsigned int v68;
  unsigned __int16 v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  unint64_t v74;
  unsigned int v75;
  unsigned int v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int v85;
  unsigned __int16 v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  unint64_t v91;
  unsigned int v92;
  int v93;
  unsigned __int16 v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unsigned int v99;
  int v100;
  unsigned __int16 v101;
  void (**v102)(TcmapTableFileData32 *__hidden);
  unint64_t v103;
  unsigned __int16 *v104;
  unsigned __int16 *v105;
  void (***v106)(TcmapTableFileData32 *__hidden);
  uint64_t v107;
  _QWORD v108[4];
  CFRange v109;

  length = a2.length;
  location = a2.location;
  TableEnd = TsfntTable::GetTableEnd(this);
  v108[0] = &off_1E61794D0;
  v108[1] = TableEnd;
  v8 = (unsigned __int16 *)*((_QWORD *)this + 8);
  v9 = v8 + 3;
  if (!v8)
    v9 = 0;
  v108[2] = *((_QWORD *)this + 8);
  v108[3] = v9;
  if (!v8)
    return 0;
  v10 = bswap32(*v8) >> 16;
  if (v10 == 13)
  {
    v102 = &off_1E61794A0;
    v103 = TableEnd;
    v104 = v8;
    v105 = v8 + 6;
    v106 = &v102;
    v107 = 0;
    DataP = (unsigned int *)TcmapTableFileData16::GetDataP((TcmapTableFileData16 *)&v102, 0);
    TcmapTableDataRef::validateArray<FPBigEndianScalar<unsigned int>>(&v106, (unint64_t)DataP, 1);
    v19 = DataP + 1;
    v20 = bswap32(*DataP);
    v21 = (unint64_t)&DataP[3 * v20 + 1];
    if (v21 < (unint64_t)(DataP + 1) || v21 > v103)
    {
      if ((unint64_t)(DataP + 4) > v103)
        goto LABEL_177;
      v28 = (v103 - (unint64_t)v19) / 0xC;
      v20 = v28;
    }
    else
    {
      LODWORD(v28) = v20;
    }
    v29 = location + length - 1;
    if ((_DWORD)v28)
    {
      v30 = &v19[3 * v20];
      v31 = bswap32(*(v30 - 2));
      if (v31 >= location)
      {
        v32 = DataP + 1;
        do
        {
          v33 = v20 >> 1;
          v34 = &v32[3 * (v20 >> 1)];
          v36 = *v34;
          v35 = v34 + 3;
          v20 += ~(v20 >> 1);
          if (bswap32(v36) > location)
            v20 = v33;
          else
            v32 = v35;
        }
        while (v20);
        if (v31 >= v29)
          v37 = v29;
        else
          v37 = v31;
        if (v32 != v19)
          v19 = v32 - 3;
        v38 = v30;
        if (v30 != v19)
        {
          v39 = 0xAAAAAAAAAAAAAAABLL * (v30 - v19);
          v38 = v19;
          do
          {
            v40 = v39 >> 1;
            v41 = &v38[3 * (v39 >> 1)];
            v43 = *v41;
            v42 = v41 + 3;
            v39 += ~(v39 >> 1);
            if (bswap32(v43) > v29)
              v39 = v40;
            else
              v38 = v42;
          }
          while (v39);
        }
        v44 = v38 - 3;
        if (v38 == v19)
          v44 = v19;
        v45 = bswap32(v19[1]);
        if (v45 >= location)
        {
          v47 = location;
          v46 = v19;
          if (bswap32(*v19) < location)
          {
            if (v45 >= v37)
              v67 = v37;
            else
              v67 = v45;
            v47 = location;
            if (v67 >= location)
            {
              v68 = bswap32(v19[2]);
              if (v68 >= 0xFFFF)
                v69 = 0;
              else
                v69 = v68;
              v47 = location;
              do
                a3[v47++ - location] = v69;
              while (v47 <= v67);
            }
            v46 = v19 + 3;
          }
        }
        else
        {
          v46 = v19 + 3;
          v47 = location;
        }
        for (; v46 < v44; v46 += 3)
        {
          if (v47 <= v37)
          {
            v70 = bswap32(*v46);
            if (v47 < v70)
            {
              v71 = 0;
              v72 = v47;
              v73 = v47 - location;
              do
              {
                v74 = v72 + v71;
                a3[(v73 + v71++)] = 0;
              }
              while (v74 < v37 && v74 + 1 < v70);
              v47 = v72 + v71;
            }
          }
          v75 = bswap32(v46[1]);
          if (v75 >= v37)
            v75 = v37;
          if (v47 <= v75)
          {
            v76 = bswap32(v46[2]);
            if (v76 >= 0xFFFF)
              LOWORD(v76) = 0;
            do
              a3[v47++ - location] = v76;
            while (v47 <= v75);
          }
        }
        if (v46 != v19)
        {
          if (v29 >= bswap32(*v44))
            v77 = 0;
          else
            v77 = -1;
          v19 = &v46[3 * v77];
        }
        if (v19 != v30)
        {
          if (v47 <= v37)
          {
            v78 = bswap32(*v19);
            if (v47 < v78)
            {
              v79 = 0;
              do
              {
                v80 = v47 + v79;
                a3[v47 - location + v79++] = 0;
              }
              while (v80 < v37 && v80 + 1 < v78);
              v47 += v79;
            }
          }
          v81 = bswap32(v19[1]);
          if (v81 < v37)
            LODWORD(v37) = v81;
          if (v47 <= v37)
          {
            v82 = bswap32(v19[2]);
            if (v82 >= 0xFFFF)
              LOWORD(v82) = 0;
            do
              a3[v47++ - location] = v82;
            while (v47 <= v37);
          }
        }
        goto LABEL_64;
      }
    }
    goto LABEL_63;
  }
  if (v10 == 12)
  {
    v102 = &off_1E61794A0;
    v103 = TableEnd;
    v104 = v8;
    v105 = v8 + 6;
    v106 = &v102;
    v107 = 0;
    v23 = (unsigned int *)TcmapTableFileData16::GetDataP((TcmapTableFileData16 *)&v102, 0);
    TcmapTableDataRef::validateArray<FPBigEndianScalar<unsigned int>>(&v106, (unint64_t)v23, 1);
    v24 = v23 + 1;
    v25 = bswap32(*v23);
    v26 = (unint64_t)&v23[3 * v25 + 1];
    if (v26 >= (unint64_t)(v23 + 1) && v26 <= v103)
    {
      LODWORD(v48) = v25;
LABEL_61:
      v29 = location + length - 1;
      if ((_DWORD)v48)
      {
        v49 = &v24[3 * v25];
        v50 = bswap32(*(v49 - 2));
        if (v50 >= location)
        {
          v52 = v23 + 1;
          do
          {
            v53 = v25 >> 1;
            v54 = &v52[3 * (v25 >> 1)];
            v56 = *v54;
            v55 = v54 + 3;
            v25 += ~(v25 >> 1);
            if (bswap32(v56) > location)
              v25 = v53;
            else
              v52 = v55;
          }
          while (v25);
          if (v50 >= v29)
            v57 = v29;
          else
            v57 = v50;
          if (v52 != v24)
            v24 = v52 - 3;
          v58 = v49;
          if (v49 != v24)
          {
            v59 = 0xAAAAAAAAAAAAAAABLL * (v49 - v24);
            v58 = v24;
            do
            {
              v60 = v59 >> 1;
              v61 = &v58[3 * (v59 >> 1)];
              v63 = *v61;
              v62 = v61 + 3;
              v59 += ~(v59 >> 1);
              if (bswap32(v63) > v29)
                v59 = v60;
              else
                v58 = v62;
            }
            while (v59);
          }
          v64 = v58 - 3;
          if (v58 == v24)
            v64 = v24;
          v65 = bswap32(v24[1]);
          if (v65 >= location)
          {
            v83 = bswap32(*v24);
            v47 = location;
            v66 = v24;
            if (v83 < location)
            {
              if (v65 >= v57)
                v84 = v57;
              else
                v84 = v65;
              v47 = location;
              if (v84 >= location)
              {
                v85 = bswap32(v24[2]) - v83;
                v47 = location;
                do
                {
                  v86 = v85 + v47;
                  if (v85 + v47 >= 0xFFFF)
                    v86 = 0;
                  a3[v47++ - location] = v86;
                }
                while (v47 <= v84);
              }
              v66 = v24 + 3;
            }
          }
          else
          {
            v66 = v24 + 3;
            v47 = location;
          }
          for (; v66 < v64; v66 += 3)
          {
            v87 = bswap32(*v66);
            if (v47 <= v57 && v47 < v87)
            {
              v88 = 0;
              v89 = v47;
              v90 = v47 - location;
              do
              {
                v91 = v89 + v88;
                a3[(v90 + v88++)] = 0;
              }
              while (v91 < v57 && v91 + 1 < v87);
              v47 = v89 + v88;
            }
            v92 = bswap32(v66[1]);
            if (v92 >= v57)
              v92 = v57;
            if (v47 <= v92)
            {
              v93 = bswap32(v66[2]) - v87;
              do
              {
                v94 = v93 + v47;
                if (v93 + v47 >= 0xFFFF)
                  v94 = 0;
                a3[v47++ - location] = v94;
              }
              while (v47 <= v92);
            }
          }
          if (v66 != v24)
          {
            if (v29 >= bswap32(*v64))
              v95 = 0;
            else
              v95 = -1;
            v24 = &v66[3 * v95];
          }
          if (v24 != v49)
          {
            v96 = bswap32(*v24);
            if (v47 <= v57 && v47 < v96)
            {
              v97 = 0;
              do
              {
                v98 = v47 + v97;
                a3[v47 - location + v97++] = 0;
              }
              while (v98 < v57 && v98 + 1 < v96);
              v47 += v97;
            }
            v99 = bswap32(v24[1]);
            if (v99 < v57)
              LODWORD(v57) = v99;
            if (v47 <= v57)
            {
              v100 = bswap32(v24[2]) - v96;
              do
              {
                v101 = v100 + v47;
                if (v100 + v47 >= 0xFFFF)
                  v101 = 0;
                a3[v47++ - location] = v101;
              }
              while (v47 <= v57);
            }
          }
          goto LABEL_64;
        }
      }
LABEL_63:
      v47 = location;
LABEL_64:
      if (v47 <= v29)
      {
        v51 = v29 + 1;
        if (v51 != v47)
          bzero(&a3[v47 - location], 2 * (v51 - v47));
      }
      return 1;
    }
    if ((unint64_t)(v23 + 4) <= v103)
    {
      v48 = (v103 - (unint64_t)v24) / 0xC;
      v25 = v48;
      goto LABEL_61;
    }
LABEL_177:
    v29 = location + length - 1;
    goto LABEL_63;
  }
  if (v10 != 4)
    return 0;
  v102 = (void (**)(TcmapTableFileData32 *__hidden))v108;
  v103 = 0;
  v109.location = location;
  v109.length = length;
  if (*((_BYTE *)this + 80))
  {
    v11 = 256;
    if ((uint64_t)(location + length) < 256)
      v11 = location + length;
    if ((uint64_t)(location + length) > 0 && (uint64_t)location < 1)
      v13 = v11;
    else
      v13 = 0;
    v14 = v11 - location;
    if (location <= 0xFF)
      v15 = location;
    else
      v15 = 0;
    if (location <= 0xFF)
      v16.length = v14;
    else
      v16.length = v13;
    if (v16.length >= 1)
    {
      v102 = (void (**)(TcmapTableFileData32 *__hidden))v108;
      v103 = 0;
      v16.location = v15 + 61440;
    }
  }
  return 1;
}

void `anonymous namespace'::TFormat4UTF16cmapTable::MapRange(_anonymous_namespace_::TFormat4UTF16cmapTable *this, CFRange a2, unsigned __int16 *a3)
{
  int length;
  CFIndex location;
  unsigned __int16 *v7;
  unsigned __int16 *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unsigned __int16 *v20;
  unsigned int v21;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  unint64_t v26;
  CFIndex v27;
  unsigned int v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  unint64_t v33;
  unsigned int v34;
  char *v35;
  char *v36;
  unsigned int v37;
  CFIndex v38;
  int v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int v42;
  unsigned int v43;
  char *v44;
  unint64_t v45;
  uint64_t v46;
  int v47;
  unint64_t v48;
  unsigned __int16 *v49;
  unsigned int v50;

  length = a2.length;
  location = a2.location;
  v7 = (unsigned __int16 *)(*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)this + 16))(*(_QWORD *)this, 0, 4);
  TcmapTableDataRef::validateArray<FPBigEndianScalar<unsigned short>>(this, (unint64_t)v7, 1);
  v8 = v7 + 4;
  v9 = bswap32(*v7) >> 16;
  v10 = (location + length - 1);
  v11 = location;
  if ((v9 & 1) == 0)
  {
    TcmapTableDataRef::validateArray<FPBigEndianScalar<unsigned short>>(this, (unint64_t)v8 + v9 - 4, 1);
    v12 = bswap32(*(unsigned __int16 *)((char *)v8 + v9 - 4));
    v11 = location;
    if (location <= HIWORD(v12))
    {
      if (v10 >= HIWORD(v12))
        v13 = HIWORD(v12);
      else
        v13 = v10;
      v49 = (unsigned __int16 *)((char *)v8 + v9 + 2);
      v14 = v9 >> 1;
      v44 = (char *)v49 + v9;
      v48 = (unint64_t)v49 + v9 + v9;
      TcmapTableDataRef::validateArray<FPBigEndianScalar<unsigned short>>(this, v48, v14);
      v15 = bswap32(*v49) >> 16;
      if (v9 < 2 || v15 > location)
      {
        LODWORD(v17) = 0;
        v18 = v9 >> 1;
      }
      else
      {
        v17 = 0;
        if (v14 <= 1)
          v19 = 1;
        else
          v19 = v14;
        v20 = (unsigned __int16 *)((char *)v7 + v9 + 12);
        v18 = v9 >> 1;
        while (1)
        {
          v21 = bswap32(v7[v17 + 4]) >> 16;
          if (location >= bswap32(*(v20 - 1)) >> 16 && location <= v21)
            break;
          v23 = v17 + 1;
          if (location > v21 && (v23 >= v14 || location < bswap32(*v20) >> 16))
          {
            LODWORD(v17) = v17 + 1;
            break;
          }
          ++v20;
          ++v17;
          if (v19 == v23)
          {
            v11 = location;
            goto LABEL_3;
          }
        }
      }
      v11 = location;
      v25 = (char *)v49 + v9 + v9;
      v24 = (uint64_t)v8 + v9 + 2;
      if (v17 < v18)
      {
        v11 = location;
        if (v13 >= location)
        {
          v26 = v17;
          v27 = -location;
          v11 = location;
          v46 = v10;
          v47 = location;
          v45 = v18;
          do
          {
            v28 = bswap32(*(unsigned __int16 *)(v24 + 2 * v26));
            v29 = HIWORD(v28);
            if (v11 < HIWORD(v28))
            {
              v30 = 0;
              v31 = v11;
              v32 = v27 + v11;
              do
              {
                v33 = v31 + v30;
                a3[(v32 + v30++)] = 0;
              }
              while (v33 < v13 && v33 + 1 < v29);
              v11 = v31 + v30;
            }
            v34 = bswap32(v8[v26]) >> 16;
            v35 = &v25[2 * v26];
            if (*(_WORD *)v35)
            {
              if (v34 >= v13)
                v34 = v13;
              if (v11 <= v34)
              {
                v36 = &v35[__rev16(*(unsigned __int16 *)v35) & 0xFFFE];
                v50 = v34 + 1;
                v37 = v34 + 1 - v11;
                v38 = v27 + v11;
                v39 = v11 - v29;
                do
                {
                  TcmapTableDataRef::validateArray<FPBigEndianScalar<unsigned short>>(this, (unint64_t)&v36[2 * v39], 1);
                  a3[v38++] = bswap32(*(unsigned __int16 *)&v36[2 * v39++]) >> 16;
                  --v37;
                }
                while (v37);
                v11 = v50;
                v10 = v46;
                LODWORD(location) = v47;
                v18 = v45;
                v8 = v7 + 4;
                v25 = (char *)v48;
                v24 = (uint64_t)v49;
              }
            }
            else
            {
              if (v34 >= v13)
                v34 = v13;
              if (v11 <= v34)
              {
                v40 = bswap32(*(unsigned __int16 *)&v44[2 * v26]) >> 16;
                v41 = v11;
                v42 = v34 + 1;
                v43 = v42 - v11;
                do
                {
                  a3[(v27 + v41)] = v40 + v41;
                  ++v41;
                  --v43;
                }
                while (v43);
                v11 = v42;
              }
            }
            ++v26;
          }
          while (v26 < v18 && v11 <= v13);
        }
      }
    }
  }
LABEL_3:
  if (v11 <= v10 && v10 + 1 != v11)
    bzero(&a3[v11 - location], 2 * (v10 + 1 - v11));
}

uint64_t TcmapUnicodeTable::MapRange(TcmapUnicodeTable *this, CFRange a2, unsigned int *a3)
{
  int length;
  unsigned int location;
  unint64_t TableEnd;
  unsigned __int16 *v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int *v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int *DataP;
  unsigned int *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int *v25;
  unint64_t v26;
  unsigned int *v27;
  unsigned int *v28;
  unsigned int v29;
  unint64_t v30;
  unsigned int *v31;
  unint64_t v32;
  unint64_t v33;
  unsigned int *v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int *v39;
  unsigned int v40;
  unint64_t v41;
  unsigned int *v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int *v45;
  unint64_t v46;
  unsigned int *v47;
  unsigned int *v48;
  unsigned int v49;
  unint64_t v50;
  unsigned int *v51;
  unint64_t v52;
  unint64_t v53;
  unsigned int *v54;
  unsigned int *v55;
  unsigned int v56;
  unsigned int *v57;
  unsigned int v58;
  unsigned int *v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int v67;
  unint64_t v68;
  unsigned int v69;
  int v70;
  unsigned int v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unsigned int v76;
  int v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unsigned int v85;
  unint64_t v86;
  unsigned int v87;
  unsigned int v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unsigned int v93;
  unsigned int v94;
  void (**v95)(TcmapTableFileData32 *__hidden);
  unint64_t v96;
  unsigned __int16 *v97;
  unsigned __int16 *v98;
  void (***v99)(TcmapTableFileData32 *__hidden);
  uint64_t v100;

  length = a2.length;
  location = a2.location;
  TableEnd = TsfntTable::GetTableEnd(this);
  v8 = (unsigned __int16 *)*((_QWORD *)this + 8);
  if (!v8)
    return 0;
  v9 = bswap32(*v8) >> 16;
  if (v9 == 13)
  {
    v95 = &off_1E61794A0;
    v96 = TableEnd;
    v97 = v8;
    v98 = v8 + 6;
    v99 = &v95;
    v100 = 0;
    DataP = (unsigned int *)TcmapTableFileData16::GetDataP((TcmapTableFileData16 *)&v95, 0);
    TcmapTableDataRef::validateArray<FPBigEndianScalar<unsigned int>>(&v99, (unint64_t)DataP, 1);
    v17 = DataP + 1;
    v18 = bswap32(*DataP);
    v19 = (unint64_t)&DataP[3 * v18 + 1];
    if (v19 < (unint64_t)(DataP + 1) || v19 > v96)
    {
      if ((unint64_t)(DataP + 4) > v96)
        goto LABEL_157;
      v41 = (v96 - (unint64_t)v17) / 0xC;
      v18 = v41;
    }
    else
    {
      LODWORD(v41) = v18;
    }
    v22 = location + length - 1;
    if ((_DWORD)v41)
    {
      v42 = &v17[3 * v18];
      v43 = bswap32(*(v42 - 2));
      if (v43 >= location)
      {
        v45 = DataP + 1;
        do
        {
          v46 = v18 >> 1;
          v47 = &v45[3 * (v18 >> 1)];
          v49 = *v47;
          v48 = v47 + 3;
          v18 += ~(v18 >> 1);
          if (bswap32(v49) > location)
            v18 = v46;
          else
            v45 = v48;
        }
        while (v18);
        if (v43 >= v22)
          v50 = v22;
        else
          v50 = v43;
        if (v45 != v17)
          v17 = v45 - 3;
        v51 = v42;
        if (v42 != v17)
        {
          v52 = 0xAAAAAAAAAAAAAAABLL * (v42 - v17);
          v51 = v17;
          do
          {
            v53 = v52 >> 1;
            v54 = &v51[3 * (v52 >> 1)];
            v56 = *v54;
            v55 = v54 + 3;
            v52 += ~(v52 >> 1);
            if (bswap32(v56) > v22)
              v52 = v53;
            else
              v51 = v55;
          }
          while (v52);
        }
        v57 = v51 - 3;
        if (v51 == v17)
          v57 = v17;
        v58 = bswap32(v17[1]);
        if (v58 >= location)
        {
          v40 = location;
          v59 = v17;
          if (bswap32(*v17) < location)
          {
            if (v58 >= v50)
              v79 = v50;
            else
              v79 = v58;
            v40 = location;
            if (v79 >= location)
            {
              v80 = bswap32(v17[2]);
              if (v80 >= 0xFFFFFF)
                v81 = 0;
              else
                v81 = v80;
              v40 = location;
              do
                a3[v40++ - location] = v81;
              while (v40 <= v79);
            }
            v59 = v17 + 3;
          }
        }
        else
        {
          v59 = v17 + 3;
          v40 = location;
        }
        for (; v59 < v57; v59 += 3)
        {
          if (v40 <= v50)
          {
            v82 = bswap32(*v59);
            if (v40 < v82)
            {
              v83 = 0;
              v84 = v40;
              v85 = v40 - location;
              do
              {
                v86 = v84 + v83;
                a3[v85 + v83++] = 0;
              }
              while (v86 < v50 && v86 + 1 < v82);
              v40 = v84 + v83;
            }
          }
          v87 = bswap32(v59[1]);
          if (v87 >= v50)
            v87 = v50;
          if (v40 <= v87)
          {
            v88 = bswap32(v59[2]);
            if (v88 >= 0xFFFFFF)
              v88 = 0;
            do
              a3[v40++ - location] = v88;
            while (v40 <= v87);
          }
        }
        if (v59 != v17)
        {
          if (v22 >= bswap32(*v57))
            v89 = 0;
          else
            v89 = -1;
          v17 = &v59[3 * v89];
        }
        if (v17 != v42)
        {
          if (v40 <= v50)
          {
            v90 = bswap32(*v17);
            if (v40 < v90)
            {
              v91 = 0;
              do
              {
                v92 = v40 + v91;
                a3[v40 - location + v91++] = 0;
              }
              while (v92 < v50 && v92 + 1 < v90);
              v40 += v91;
            }
          }
          v93 = bswap32(v17[1]);
          if (v93 < v50)
            LODWORD(v50) = v93;
          if (v40 <= v50)
          {
            v94 = bswap32(v17[2]);
            if (v94 >= 0xFFFFFF)
              v94 = 0;
            do
              a3[v40++ - location] = v94;
            while (v40 <= v50);
          }
        }
        goto LABEL_44;
      }
    }
    goto LABEL_43;
  }
  if (v9 != 12)
    return 0;
  v95 = &off_1E61794A0;
  v96 = TableEnd;
  v97 = v8;
  v98 = v8 + 6;
  v99 = &v95;
  v100 = 0;
  v10 = (unsigned int *)TcmapTableFileData16::GetDataP((TcmapTableFileData16 *)&v95, 0);
  TcmapTableDataRef::validateArray<FPBigEndianScalar<unsigned int>>(&v99, (unint64_t)v10, 1);
  v11 = v10 + 1;
  v12 = bswap32(*v10);
  v13 = (unint64_t)&v10[3 * v12 + 1];
  if (v13 < (unint64_t)(v10 + 1) || v13 > v96)
  {
    if ((unint64_t)(v10 + 4) <= v96)
    {
      v21 = (v96 - (unint64_t)v11) / 0xC;
      v12 = v21;
      goto LABEL_19;
    }
LABEL_157:
    v22 = location + length - 1;
    goto LABEL_43;
  }
  LODWORD(v21) = v12;
LABEL_19:
  v22 = location + length - 1;
  if ((_DWORD)v21)
  {
    v23 = &v11[3 * v12];
    v24 = bswap32(*(v23 - 2));
    if (v24 >= location)
    {
      v25 = v10 + 1;
      do
      {
        v26 = v12 >> 1;
        v27 = &v25[3 * (v12 >> 1)];
        v29 = *v27;
        v28 = v27 + 3;
        v12 += ~(v12 >> 1);
        if (bswap32(v29) > location)
          v12 = v26;
        else
          v25 = v28;
      }
      while (v12);
      if (v24 >= v22)
        v30 = v22;
      else
        v30 = v24;
      if (v25 != v11)
        v11 = v25 - 3;
      v31 = v23;
      if (v23 != v11)
      {
        v32 = 0xAAAAAAAAAAAAAAABLL * (v23 - v11);
        v31 = v11;
        do
        {
          v33 = v32 >> 1;
          v34 = &v31[3 * (v32 >> 1)];
          v36 = *v34;
          v35 = v34 + 3;
          v32 += ~(v32 >> 1);
          if (bswap32(v36) > v22)
            v32 = v33;
          else
            v31 = v35;
        }
        while (v32);
      }
      v37 = v31 - 3;
      if (v31 == v11)
        v37 = v11;
      v38 = bswap32(v11[1]);
      if (v38 >= location)
      {
        v60 = bswap32(*v11);
        v40 = location;
        v39 = v11;
        if (v60 < location)
        {
          if (v38 >= v30)
            v61 = v30;
          else
            v61 = v38;
          v40 = location;
          if (v61 >= location)
          {
            v62 = bswap32(v11[2]) - v60;
            v40 = location;
            do
            {
              v63 = v62 + v40;
              if (v62 + v40 >= 0xFFFFFF)
                v63 = 0;
              a3[v40++ - location] = v63;
            }
            while (v40 <= v61);
          }
          v39 = v11 + 3;
        }
      }
      else
      {
        v39 = v11 + 3;
        v40 = location;
      }
      for (; v39 < v37; v39 += 3)
      {
        v64 = bswap32(*v39);
        if (v40 <= v30 && v40 < v64)
        {
          v65 = 0;
          v66 = v40;
          v67 = v40 - location;
          do
          {
            v68 = v66 + v65;
            a3[v67 + v65++] = 0;
          }
          while (v68 < v30 && v68 + 1 < v64);
          v40 = v66 + v65;
        }
        v69 = bswap32(v39[1]);
        if (v69 >= v30)
          v69 = v30;
        if (v40 <= v69)
        {
          v70 = bswap32(v39[2]) - v64;
          do
          {
            v71 = v70 + v40;
            if (v70 + v40 >= 0xFFFFFF)
              v71 = 0;
            a3[v40++ - location] = v71;
          }
          while (v40 <= v69);
        }
      }
      if (v39 != v11)
      {
        if (v22 >= bswap32(*v37))
          v72 = 0;
        else
          v72 = -1;
        v11 = &v39[3 * v72];
      }
      if (v11 != v23)
      {
        v73 = bswap32(*v11);
        if (v40 <= v30 && v40 < v73)
        {
          v74 = 0;
          do
          {
            v75 = v40 + v74;
            a3[v40 - location + v74++] = 0;
          }
          while (v75 < v30 && v75 + 1 < v73);
          v40 += v74;
        }
        v76 = bswap32(v11[1]);
        if (v76 < v30)
          LODWORD(v30) = v76;
        if (v40 <= v30)
        {
          v77 = bswap32(v11[2]) - v73;
          do
          {
            v78 = v77 + v40;
            if (v77 + v40 >= 0xFFFFFF)
              v78 = 0;
            a3[v40++ - location] = v78;
          }
          while (v40 <= v30);
        }
      }
      goto LABEL_44;
    }
  }
LABEL_43:
  v40 = location;
LABEL_44:
  if (v40 <= v22)
  {
    v44 = v22 + 1;
    if (v44 != v40)
      bzero(&a3[v40 - location], 4 * (v44 - v40));
  }
  return 1;
}

unsigned int *TcmapUnicodeTable::FillInverseMap(void (****this)(TcmapTableFileData32 *__hidden this), unsigned int *a2, __CFDictionary *a3, unsigned int a4)
{
  unint64_t TableEnd;
  void (***v9)(TcmapTableFileData32 *__hidden);
  uint64_t v10;
  void (***v11)(TcmapTableFileData32 *__hidden);
  unsigned int *result;
  unint64_t DataP;
  uint64_t v14;
  const __CFDictionary *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int *v18;
  uint64_t v19;
  unsigned __int16 *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  unint64_t v32;
  unsigned __int16 *v33;
  unsigned int v34;
  unsigned int v35;
  unsigned __int16 *v36;
  unsigned int v37;
  unsigned int v38;
  unsigned __int16 *v39;
  unsigned int v40;
  unsigned int v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  unint64_t v47;
  uint64_t v48;
  unsigned int v49;
  unsigned int v50;
  BOOL v51;
  unsigned int v52;
  unsigned int v53;
  uint64_t v54;
  void *v55;
  unsigned int v56;
  unint64_t v57;
  TFormat14UVSTable *v58;
  unsigned int *v59;
  const __CFDictionary *v60;
  unsigned int v61;
  unsigned int *v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int *v65;
  unsigned int v66;
  unint64_t v67;
  int v68;
  int v70;
  unsigned int *v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int *v74;
  unsigned int v75;
  void *v76;
  int v77;
  int v79;
  _DWORD *exception;
  int v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unsigned __int16 *v86;
  unsigned __int16 *v87;
  __CFDictionary *v88;
  unint64_t v89;
  unsigned int *v90;
  unsigned int v91;
  uint64_t v92;
  unsigned int v93;
  void (**v94)(TUVSTable *__hidden);
  unint64_t v95;
  void (***v96)(TcmapTableFileData32 *__hidden);
  _QWORD v97[4];
  void (***v98)(TcmapTableFileData32 *__hidden);
  void (***v99)(TUVSTable *__hidden);
  void (**v100)(TcmapTableFileData32 *__hidden);
  void (***v101)(TUVSTable *__hidden);
  void (***v102)(TcmapTableFileData32 *__hidden);
  uint64_t v103;
  _QWORD v104[3];

  TableEnd = TsfntTable::GetTableEnd((TsfntTable *)this);
  v97[0] = &off_1E61794D0;
  v97[1] = TableEnd;
  v9 = this[8];
  if (v9)
    v10 = (uint64_t)v9 + 6;
  else
    v10 = 0;
  v97[2] = this[8];
  v97[3] = v10;
  v94 = &off_1E6179730;
  v95 = TsfntTable::GetTableEnd((TsfntTable *)this);
  v11 = this[8];
  v96 = this[9];
  result = 0;
  if (v11)
  {
    v93 = a4;
    switch(bswap32(*(unsigned __int16 *)v11) >> 16)
    {
      case 2u:
        v88 = a3;
        v90 = a2;
        v101 = (void (***)(TUVSTable *__hidden))v97;
        v102 = 0;
        v100 = &off_1E61B4C08;
        DataP = TcmapTableFileData16::GetDataP((TcmapTableFileData16 *)v97, 0);
        TcmapTableDataRef::validateArray<FPBigEndianScalar<unsigned short>>(&v101, DataP, 256);
        v14 = 0;
        v84 = DataP + 512;
        v86 = (unsigned __int16 *)DataP;
        v82 = DataP + 518;
        break;
      case 4u:
        v100 = (void (**)(TcmapTableFileData32 *__hidden))v97;
        v101 = &v94;
        v39 = (unsigned __int16 *)TcmapTableFileData16::GetDataP((TcmapTableFileData16 *)v97, 0);
        v40 = bswap32(*v39) >> 16;
        if ((v40 & 1) != 0)
        {
          exception = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)exception = &off_1E6176998;
          exception[2] = 4;
        }
        v41 = v40 >> 1;
        v87 = v39 + 4;
        v42 = (unint64_t)&v39[(v40 >> 1) + 5];
        TcmapTableDataRef::validateArray<FPBigEndianScalar<unsigned short>>(&v100, v42, 1);
        v85 = v42;
        v43 = v42 + 2 * (v40 >> 1);
        TcmapTableDataRef::validateArray<FPBigEndianScalar<unsigned short>>(&v100, v43, 1);
        v89 = v43 + 2 * (v40 >> 1);
        TcmapTableDataRef::validateArray<FPBigEndianScalar<unsigned short>>(&v100, v89, v40 >> 1);
        if (v40 >= 2)
        {
          v44 = 0;
          LODWORD(v45) = 0;
          v46 = 0;
          v47 = v89 + 2 * v41;
          if (v41 <= 1)
            v48 = 1;
          else
            v48 = v41;
          v83 = v48;
          v81 = -v41;
          do
          {
            v49 = v45;
            v50 = bswap32(*(unsigned __int16 *)(v85 + 2 * v44));
            v45 = bswap32(v87[v44]) >> 16;
            v51 = v46 > HIWORD(v50) || v49 > v45;
            if (v51)
              break;
            v52 = HIWORD(v50);
            v91 = HIWORD(v50);
            if (*(_WORD *)(v89 + 2 * v44))
            {
              if (v52 <= v45)
              {
                v53 = v81 + (__rev16(*(unsigned __int16 *)(v89 + 2 * v44)) >> 1);
                v54 = HIWORD(v50);
                do
                {
                  TcmapTableDataRef::validateArray<FPBigEndianScalar<unsigned short>>(&v100, v47 + 2 * (unsigned __int16)(v44 + v53), 1);
                  a4 = v93;
                  v55 = (void *)(bswap32(*(unsigned __int16 *)(v47 + 2 * (unsigned __int16)(v44 + v53))) >> 16);
                  if (v55 < v93)
                    SetUVSForGlyphInMap(a2, a3, v55, v54, 0, v93);
                  ++v54;
                  LOWORD(v53) = v53 + 1;
                }
                while (v45 + 1 != v54);
              }
            }
            else if (v52 <= v45)
            {
              v56 = HIWORD(v50);
              do
              {
                v57 = (unsigned __int16)(v56 + (bswap32(*(unsigned __int16 *)(v43 + 2 * v44)) >> 16));
                if (v57 < a4)
                  SetUVSForGlyphInMap(a2, a3, (void *)v57, v56, 0, a4);
                ++v56;
              }
              while ((_DWORD)v45 + 1 != v56);
            }
            ++v44;
            v46 = v91;
          }
          while (v44 != v83);
        }
        if (!v96 || *(_WORD *)v96 != 3584)
          return a2;
        v98 = v96;
        v99 = (void (***)(TUVSTable *__hidden))v95;
        v58 = (TFormat14UVSTable *)&v98;
        v59 = a2;
        v60 = a3;
        v61 = a4;
        goto LABEL_65;
      case 6u:
        v100 = (void (**)(TcmapTableFileData32 *__hidden))v97;
        v101 = 0;
        v33 = (unsigned __int16 *)TcmapTableFileData16::GetDataP((TcmapTableFileData16 *)v97, 0);
        TcmapTableDataRef::validateArray<FPBigEndianScalar<unsigned short>>(&v100, (unint64_t)v33, 1);
        v34 = *v33;
        TcmapTableDataRef::validateArray<FPBigEndianScalar<unsigned short>>(&v100, (unint64_t)(v33 + 1), 1);
        if (v33[1])
        {
          v35 = __rev16(v33[1]);
          v36 = v33 + 2;
          v37 = __rev16(v34);
          do
          {
            --v35;
            TcmapTableDataRef::validateArray<FPBigEndianScalar<unsigned short>>(&v100, (unint64_t)v36, 1);
            v38 = *v36++;
            SetUVSForGlyphInMap(a2, a3, (void *)(bswap32(v38) >> 16), (unsigned __int16)v37++, 0, a4);
          }
          while ((_WORD)v35);
        }
        return a2;
      case 0xCu:
        v102 = v9;
        v103 = v10;
        v100 = &off_1E61794A0;
        v101 = (void (***)(TUVSTable *__hidden))TableEnd;
        if (v9)
          v103 = (uint64_t)v9 + 12;
        v98 = &v100;
        v99 = &v94;
        v62 = (unsigned int *)TcmapTableFileData16::GetDataP((TcmapTableFileData16 *)&v100, 0);
        v63 = (unsigned __int16)a4;
        TcmapTableDataRef::validateArray<FPBigEndianScalar<unsigned int>>(&v98, (unint64_t)v62, 1);
        if (*v62)
        {
          v64 = bswap32(*v62);
          v65 = v62 + 1;
          do
          {
            TcmapTableDataRef::validateArray<FPBigEndianScalar<unsigned int>>(&v98, (unint64_t)v65, 3);
            v66 = bswap32(*v65);
            v67 = bswap32(v65[2]);
            v68 = TcmapTableDataRef::RangeSizePerTuple((TcmapTableDataRef *)bswap32(v65[1]), v66, v67, v63);
            if (v66 <= 0x10FFFF && v68 != 0)
            {
              v70 = v68 - 1;
              do
              {
                SetUVSForGlyphInMap(a2, a3, (void *)v67, v66, 0, v63);
                if (!v70)
                  break;
                v67 = (v67 + 1);
                --v70;
                v51 = v66++ > 0x10FFFE;
              }
              while (!v51);
            }
            v65 += 3;
            --v64;
          }
          while (v64);
        }
        if (v96 && *(_WORD *)v96 == 3584)
        {
          v104[0] = v96;
          v104[1] = v95;
          v58 = (TFormat14UVSTable *)v104;
          v59 = a2;
          v60 = a3;
          v61 = v63;
LABEL_65:
          TFormat14UVSTable::AddToInverseMap(v58, v59, v60, v61);
        }
        return a2;
      case 0xDu:
        v102 = v9;
        v103 = v10;
        v100 = &off_1E61794A0;
        v101 = (void (***)(TUVSTable *__hidden))TableEnd;
        if (v9)
          v103 = (uint64_t)v9 + 12;
        v98 = &v100;
        v99 = 0;
        v71 = (unsigned int *)TcmapTableFileData16::GetDataP((TcmapTableFileData16 *)&v100, 0);
        TcmapTableDataRef::validateArray<FPBigEndianScalar<unsigned int>>(&v98, (unint64_t)v71, 1);
        if (*v71)
        {
          v72 = (unsigned __int16)a4;
          v73 = bswap32(*v71);
          v74 = v71 + 1;
          do
          {
            TcmapTableDataRef::validateArray<FPBigEndianScalar<unsigned int>>(&v98, (unint64_t)v74, 3);
            v75 = bswap32(*v74);
            v76 = (void *)bswap32(v74[2]);
            v77 = TcmapTableDataRef::RangeSizePerFormat13Tuple((TcmapTableDataRef *)bswap32(v74[1]), v75, v76, v72);
            if (v75 <= 0x10FFFF && v77 != 0)
            {
              v79 = v77 - 1;
              do
              {
                SetUVSForGlyphInMap(a2, a3, v76, v75, 0, v72);
                if (!v79)
                  break;
                --v79;
                v51 = v75++ > 0x10FFFE;
              }
              while (!v51);
            }
            v74 += 3;
            --v73;
          }
          while (v73);
        }
        return a2;
      default:
        return result;
    }
    while (1)
    {
      v92 = v14;
      if (!v14)
        break;
      v15 = v88;
      v16 = bswap32(v86[v14]) >> 16;
      v17 = v93;
      v18 = v90;
      if (v16 >= 8)
        goto LABEL_11;
LABEL_17:
      v14 = v92 + 1;
      if (v92 == 255)
        return v90;
    }
    v15 = v88;
    v16 = bswap32(*v86) >> 16;
    v17 = v93;
    v18 = v90;
LABEL_11:
    v19 = v16 >> 1;
    v20 = (unsigned __int16 *)(v84 + 2 * v19);
    TcmapTableDataRef::validateArray<FPBigEndianScalar<unsigned short>>(&v101, (unint64_t)v20, 4);
    v21 = *v20;
    v22 = v20[1];
    v23 = v20[2];
    v24 = bswap32(v20[3]) >> 17;
    TcmapTableDataRef::validateArray<FPBigEndianScalar<unsigned short>>(&v101, (unint64_t)&v20[v24 + 3], 1);
    if (v22)
    {
      v25 = 0;
      v26 = v19;
      v27 = 0;
      v28 = bswap32(v23) >> 16;
      v29 = __rev16(v22);
      v30 = __rev16(v21) + ((_DWORD)v92 << 8);
      if (v29 <= 1)
        v31 = 1;
      else
        v31 = v29;
      v32 = v82 + 2 * v26 + 2 * v24;
      do
      {
        TcmapTableDataRef::validateArray<FPBigEndianScalar<unsigned short>>(&v101, v32 + v25, 1);
        SetUVSForGlyphInMap(v18, v15, (void *)(unsigned __int16)(v28 + (bswap32(*(unsigned __int16 *)(v32 + 2 * v27)) >> 16)), (unsigned __int16)(v30 + v27), 0, v17);
        ++v27;
        v25 += 2;
      }
      while (v31 != v27);
    }
    goto LABEL_17;
  }
  return result;
}

uint64_t TcmapUnicodeTable::FillCharacterSet(TFormat14UVSTable **this, __CFCharacterSet *a2, unsigned int a3, TOS2UnicodeRanges *a4)
{
  unint64_t TableEnd;
  TFormat14UVSTable *v9;
  uint64_t v10;
  TFormat14UVSTable *v11;
  uint64_t result;
  unsigned __int16 *DataP;
  unsigned int v14;
  unsigned int v15;
  unsigned __int16 *v16;
  unint64_t v17;
  unint64_t v18;
  void (***v19)(TUVSTable *__hidden);
  unsigned int *v20;
  unsigned int v21;
  unsigned int *v22;
  CFIndex v23;
  unsigned int v24;
  CFIndex v25;
  TFormat14UVSTable *v27;
  __CFCharacterSet *v28;
  unsigned __int16 *v29;
  unsigned int v30;
  unsigned __int16 *v31;
  unsigned int v32;
  uint64_t v33;
  CFIndex v34;
  CFIndex v35;
  unsigned int v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int *v39;
  CFIndex v40;
  unsigned int v41;
  CFIndex v42;
  uint64_t v44;
  CFIndex v45;
  CFIndex v46;
  CFIndex v47;
  unsigned int v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unsigned int v52;
  unsigned int v53;
  CFIndex v55;
  CFIndex v56;
  int v57;
  int v58;
  _DWORD *exception;
  unint64_t v60;
  unsigned int v61;
  unsigned __int16 *v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  __CFCharacterSet *theSet;
  TOS2UnicodeRanges *v67;
  CFIndex theRange;
  unsigned int theRange_12;
  void (**v70)(TUVSTable *__hidden);
  unint64_t v71;
  TFormat14UVSTable *v72;
  _QWORD v73[4];
  void (**v74)(TcmapTableFileData32 *__hidden);
  void (***v75)(TUVSTable *__hidden);
  TFormat14UVSTable *v76;
  uint64_t v77;
  void (***v78)(TcmapTableFileData32 *__hidden);
  void (***v79)(TUVSTable *__hidden);
  __int16 v80;
  __int16 v81[5];
  CFRange v82;
  CFRange v83;
  CFRange v84;
  CFRange v85;
  CFRange v86;
  CFRange v87;
  CFRange v88;
  CFRange v89;
  CFRange v90;
  CFRange v91;
  CFRange v92;
  CFRange v93;
  CFRange v94;
  CFRange v95;
  CFRange v96;
  CFRange v97;
  CFRange v98;

  TableEnd = TsfntTable::GetTableEnd((TsfntTable *)this);
  v73[0] = &off_1E61794D0;
  v73[1] = TableEnd;
  v9 = this[8];
  if (v9)
    v10 = (uint64_t)v9 + 6;
  else
    v10 = 0;
  v73[2] = this[8];
  v73[3] = v10;
  v70 = &off_1E6179730;
  v71 = TsfntTable::GetTableEnd((TsfntTable *)this);
  v11 = this[8];
  v72 = this[9];
  result = 0;
  if (v11)
  {
    switch(bswap32(*(unsigned __int16 *)v11) >> 16)
    {
      case 4u:
        v74 = (void (**)(TcmapTableFileData32 *__hidden))v73;
        v75 = &v70;
        DataP = (unsigned __int16 *)TcmapTableFileData16::GetDataP((TcmapTableFileData16 *)v73, 0);
        TcmapTableDataRef::validateArray<FPBigEndianScalar<unsigned short>>(&v74, (unint64_t)DataP, 1);
        v14 = bswap32(*DataP) >> 16;
        if ((v14 & 1) != 0)
        {
          exception = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)exception = &off_1E6176998;
          exception[2] = 4;
        }
        v15 = v14 >> 1;
        v16 = DataP + 4;
        TcmapTableDataRef::validateArray<FPBigEndianScalar<unsigned short>>(&v74, (unint64_t)&DataP[(v14 >> 1) + 5], 1);
        v64 = (uint64_t)&DataP[(v14 >> 1) + 5];
        v17 = v64 + 2 * (v14 >> 1);
        TcmapTableDataRef::validateArray<FPBigEndianScalar<unsigned short>>(&v74, v17, 1);
        v60 = v17;
        v18 = v17 + 2 * (v14 >> 1);
        TcmapTableDataRef::validateArray<FPBigEndianScalar<unsigned short>>(&v74, v18, v14 >> 1);
        if (v14 < 2)
        {
          v19 = &v70;
          goto LABEL_103;
        }
        theRange_12 = a3;
        v44 = 0;
        v45 = 0;
        v46 = 0;
        v47 = 0;
        v67 = a4;
        LODWORD(theRange) = 0;
        v48 = 0;
        if (v15 <= 1)
          v49 = 1;
        else
          v49 = v15;
        v65 = v49;
        theSet = a2;
        v61 = v15;
        v62 = v16;
        v63 = v18;
        v50 = v18 + 2 * v15;
        v51 = v64;
        break;
      case 6u:
        v74 = (void (**)(TcmapTableFileData32 *__hidden))v73;
        v75 = 0;
        v29 = (unsigned __int16 *)TcmapTableFileData16::GetDataP((TcmapTableFileData16 *)v73, 0);
        TcmapTableDataRef::validateArray<FPBigEndianScalar<unsigned short>>(&v74, (unint64_t)v29, 1);
        v30 = *v29;
        v31 = v29 + 2;
        TcmapTableDataRef::validateArray<FPBigEndianScalar<unsigned short>>(&v74, (unint64_t)(v29 + 1), 1);
        v32 = v29[1];
        v33 = __rev16(v32);
        TcmapTableDataRef::validateArray<FPBigEndianScalar<unsigned short>>(&v74, (unint64_t)(v29 + 2), v33);
        if (!v32)
          return 1;
        v34 = 0;
        v35 = 0;
        v36 = __rev16(v30);
        do
        {
          ++v31;
          while (a3 > bswap32(*(v31 - 1)) >> 16)
          {
            if (*(v31 - 1))
            {
              if (!v35)
                v34 = (unsigned __int16)v36;
              ++v35;
              break;
            }
            if (v35 < 1)
              break;
            if (a2)
            {
              v84.location = v34;
              v84.length = v35;
              CFCharacterSetAddCharactersInRange(a2, v84);
            }
            ++v31;
            v85.location = v34;
            v85.length = v35;
            TOS2UnicodeRanges::SetRangeBit(a4, v85);
            v35 = 0;
            LODWORD(v33) = v33 - 1;
            ++v36;
            if (!(_WORD)v33)
              return 1;
          }
          LODWORD(v33) = v33 - 1;
          ++v36;
        }
        while ((_WORD)v33);
        if (v35 >= 1)
        {
          if (a2)
          {
            v86.location = v34;
            v86.length = v35;
            CFCharacterSetAddCharactersInRange(a2, v86);
          }
          v87.location = v34;
          v87.length = v35;
          TOS2UnicodeRanges::SetRangeBit(a4, v87);
        }
        return 1;
      case 0xCu:
        v76 = v9;
        v77 = v10;
        v74 = &off_1E61794A0;
        v75 = (void (***)(TUVSTable *__hidden))TableEnd;
        if (v9)
          v77 = (uint64_t)v9 + 12;
        v78 = &v74;
        v79 = &v70;
        v20 = (unsigned int *)TcmapTableFileData16::GetDataP((TcmapTableFileData16 *)&v74, 0);
        TcmapTableDataRef::validateArray<FPBigEndianScalar<unsigned int>>(&v78, (unint64_t)v20, 1);
        if (*v20)
        {
          v21 = bswap32(*v20);
          v22 = v20 + 1;
          do
          {
            TcmapTableDataRef::validateArray<FPBigEndianScalar<unsigned int>>(&v78, (unint64_t)v22, 3);
            v23 = bswap32(*v22);
            v24 = TcmapTableDataRef::RangeSizePerTuple((TcmapTableDataRef *)bswap32(v22[1]), v23, bswap32(v22[2]), a3);
            if (v24)
            {
              v25 = v24;
              if (a2)
              {
                if (WORD1(v23) <= 0x10u && (v23 + v24 - 1) >> 16 <= 0x10)
                {
                  v82.location = v23;
                  v82.length = v24;
                  CFCharacterSetAddCharactersInRange(a2, v82);
                }
              }
              v83.location = v23;
              v83.length = v25;
              TOS2UnicodeRanges::SetRangeBit(a4, v83);
            }
            v22 += 3;
            --v21;
          }
          while (v21);
        }
        v27 = v72;
        if (v72 && *(_WORD *)v72 == 3584)
        {
          v28 = (__CFCharacterSet *)v71;
LABEL_106:
          TFormat14UVSTable::AddCharactersToSet(v27, v28, a2, a4);
        }
        return 1;
      case 0xDu:
        v76 = v9;
        v77 = v10;
        v74 = &off_1E61794A0;
        v75 = (void (***)(TUVSTable *__hidden))TableEnd;
        if (v9)
          v77 = (uint64_t)v9 + 12;
        v78 = &v74;
        v79 = 0;
        v37 = (unsigned int *)TcmapTableFileData16::GetDataP((TcmapTableFileData16 *)&v74, 0);
        TcmapTableDataRef::validateArray<FPBigEndianScalar<unsigned int>>(&v78, (unint64_t)v37, 1);
        if (*v37)
        {
          v38 = bswap32(*v37);
          v39 = v37 + 1;
          do
          {
            TcmapTableDataRef::validateArray<FPBigEndianScalar<unsigned int>>(&v78, (unint64_t)v39, 3);
            v40 = bswap32(*v39);
            v41 = TcmapTableDataRef::RangeSizePerFormat13Tuple((TcmapTableDataRef *)bswap32(v39[1]), v40, bswap32(v39[2]), a3);
            if (v41)
            {
              v42 = v41;
              if (a2)
              {
                if (WORD1(v40) <= 0x10u && (v40 + v41 - 1) >> 16 <= 0x10)
                {
                  v88.location = v40;
                  v88.length = v41;
                  CFCharacterSetAddCharactersInRange(a2, v88);
                }
              }
              v89.location = v40;
              v89.length = v42;
              TOS2UnicodeRanges::SetRangeBit(a4, v89);
            }
            v39 += 3;
            --v38;
          }
          while (v38);
        }
        return 1;
      default:
        return result;
    }
    while (1)
    {
      v52 = v48;
      v53 = bswap32(*(unsigned __int16 *)(v51 + 2 * v44));
      v48 = bswap32(v16[v44]) >> 16;
      if (theRange > HIWORD(v53) || v52 > v48)
      {
LABEL_102:
        v19 = v75;
        if (!v75)
          return 1;
LABEL_103:
        v27 = (TFormat14UVSTable *)v19[2];
        if (v27 && *(_WORD *)v27 == 3584)
        {
          v28 = (__CFCharacterSet *)v19[1];
          goto LABEL_106;
        }
        return 1;
      }
      theRange = HIWORD(v53);
      if ((v48 & theRange) == 0xFFFF)
      {
        v81[0] = v48;
        v80 = -21846;
        LODWORD(v78) = 1;
        if (v80)
        {
          if (a2)
          {
            v90.location = v45;
            v90.length = v46;
            CFCharacterSetAddCharactersInRange(a2, v90);
          }
          v91.location = v45;
          v91.length = v46;
          TOS2UnicodeRanges::SetRangeBit(a4, v91);
        }
        v48 = 0xFFFF;
        goto LABEL_101;
      }
      if (!*(_WORD *)(v63 + 2 * v44))
      {
        if (theRange <= v48)
        {
          v46 = v48 - theRange + 1;
          if (a2)
          {
            v92.location = HIWORD(v53);
            v92.length = v48 - theRange + 1;
            CFCharacterSetAddCharactersInRange(a2, v92);
          }
          v93.location = theRange;
          v93.length = v48 - theRange + 1;
          TOS2UnicodeRanges::SetRangeBit(a4, v93);
          v57 = -(theRange + (bswap32(*(unsigned __int16 *)(v60 + 2 * v44)) >> 16));
          v45 = theRange + (unsigned __int16)v57;
          if (v45 <= v48)
          {
            if (a2)
            {
              v98.location = theRange + (unsigned __int16)v57;
              v98.length = 1;
              CFCharacterSetRemoveCharactersInRange(a2, v98);
            }
            v46 = 1;
          }
          else
          {
            v45 = theRange;
          }
        }
        goto LABEL_100;
      }
      v55 = HIWORD(v53);
      if (theRange <= v48)
        break;
      v56 = v47;
LABEL_92:
      if (v56 > 0)
      {
        a2 = theSet;
        a4 = v67;
        v51 = v64;
        if (theSet)
        {
          v96.location = v45;
          v96.length = v56;
          CFCharacterSetAddCharactersInRange(theSet, v96);
        }
        v97.location = v45;
        v97.length = v56;
        TOS2UnicodeRanges::SetRangeBit(v67, v97);
        v47 = 0;
        v46 = v56;
        v16 = v62;
        goto LABEL_101;
      }
      v47 = v56;
      a2 = theSet;
      a4 = v67;
      v16 = v62;
LABEL_100:
      v51 = v64;
LABEL_101:
      if (++v44 == v65)
        goto LABEL_102;
    }
    v58 = v44 - v61 - theRange + (__rev16(*(unsigned __int16 *)(v63 + 2 * v44)) >> 1);
    while (1)
    {
      TcmapTableDataRef::validateArray<FPBigEndianScalar<unsigned short>>(&v74, v50 + 2 * (unsigned __int16)(v58 + v55), 1);
      if (theRange_12 > bswap32(*(unsigned __int16 *)(v50 + 2 * (unsigned __int16)(v58 + v55))) >> 16)
      {
        if (*(_WORD *)(v50 + 2 * (unsigned __int16)(v58 + v55)))
        {
          if (!v47)
            v45 = v55;
          v56 = v47 + 1;
          goto LABEL_90;
        }
        if (v47 >= 1)
        {
          if (theSet)
          {
            v94.location = v45;
            v94.length = v47;
            CFCharacterSetAddCharactersInRange(theSet, v94);
          }
          v95.location = v45;
          v95.length = v47;
          TOS2UnicodeRanges::SetRangeBit(v67, v95);
          v56 = 0;
          goto LABEL_91;
        }
      }
      v56 = v47;
LABEL_90:
      v47 = v46;
LABEL_91:
      ++v55;
      v46 = v47;
      v47 = v56;
      if (v48 + 1 == v55)
        goto LABEL_92;
    }
  }
  return result;
}

uint64_t GetCharacterForGlyphUsingMap(unsigned int *a1, CFDictionaryRef theDict, unsigned int a3, void *key, unsigned __int16 *a5, unint64_t a6)
{
  uint64_t v9;
  const __CFArray *Value;
  const __CFArray *v11;
  const __CFString *ValueAtIndex;
  unint64_t Length;
  unsigned int v15;
  CFRange v16;

  if (key >= a3)
    return 0;
  v9 = key;
  Value = (const __CFArray *)CFDictionaryGetValue(theDict, (const void *)key);
  if (!Value)
  {
    v15 = a1[v9];
    if (a5 && a6)
    {
      if (!HIWORD(v15))
      {
        *a5 = v15;
        return 1;
      }
      if (a6 < 2 || HIWORD(v15) > 0x10u)
      {
        a6 = 0;
        *a5 = -1;
        return a6;
      }
      *a5 = (v15 >> 10) - 10304;
      a5[1] = v15 & 0x3FF | 0xDC00;
    }
    else if (v15 - 0x10000 >= 0x100000)
    {
      return v15 < 0x10000;
    }
    return 2;
  }
  v11 = Value;
  if (CFArrayGetCount(Value) < 1)
    return 0;
  ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v11, 0);
  Length = CFStringGetLength(ValueAtIndex);
  if (Length < a6)
    a6 = Length;
  v16.location = 0;
  v16.length = a6;
  CFStringGetCharacters(ValueAtIndex, v16, a5);
  return a6;
}

void TUVSTable::~TUVSTable(TUVSTable *this)
{
  JUMPOUT(0x1B5E0CD38);
}

void TFormat14UVSTable::AddCharactersToSet(TFormat14UVSTable *this, __CFCharacterSet *a2, CFMutableCharacterSetRef theSet, TOS2UnicodeRanges *a4)
{
  __CFCharacterSet *v4;
  uint64_t v7;
  unint64_t v8;
  unsigned __int8 *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int RangeBit;
  CFRange v14;

  v4 = (TFormat14UVSTable *)((char *)this + 10);
  if ((TFormat14UVSTable *)((char *)this + 10) <= a2)
  {
    v7 = bswap32(*(_DWORD *)((char *)this + 6));
    v8 = (unint64_t)v4 + 11 * v7;
    if (v8 < (unint64_t)v4 || v8 > (unint64_t)a2)
    {
      if ((TFormat14UVSTable *)((char *)this + 21) > a2)
        return;
      v7 = ((a2 - v4) / 0xBuLL);
      if (!((a2 - v4) / 0xBuLL))
        return;
    }
    else if (!(_DWORD)v7)
    {
      return;
    }
    v10 = (unsigned __int8 *)this + 12;
    do
    {
      v11 = (*(v10 - 2) << 16) | (*(v10 - 1) << 8);
      if (v11 >> 9 >= 0x7F)
      {
        v12 = v11 | *v10;
        if (v12 >> 4 < 0xFE1 || v12 - 917760 <= 0xEF)
        {
          if (theSet)
          {
            v14.location = v11 | *v10;
            v14.length = 1;
            CFCharacterSetAddCharactersInRange(theSet, v14);
          }
          if (a4)
          {
            RangeBit = TOS2UnicodeRanges::GetRangeBit(a4, v12);
            if (RangeBit != -1)
              *((_DWORD *)a4 + (RangeBit >> 5) + 2) |= 1 << RangeBit;
          }
        }
      }
      v10 += 11;
      --v7;
    }
    while (v7);
  }
}

void TFormat14UVSTable::AddToInverseMap(TFormat14UVSTable *this, unsigned int *a2, CFDictionaryRef theDict, unsigned int a4)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  unsigned __int8 *v15;
  unsigned int v16;
  uint64_t v17;
  unint64_t v18;
  unsigned int *v19;
  unsigned int *v20;
  unint64_t v21;
  unint64_t v22;
  unsigned __int16 *v24;

  v5 = *(_QWORD *)this;
  v4 = *((_QWORD *)this + 1);
  v6 = *(_QWORD *)this + 10;
  if (v6 <= v4)
  {
    v11 = bswap32(*(_DWORD *)(v5 + 6));
    v12 = v6 + 11 * v11;
    if (v12 < v6 || v12 > v4)
    {
      if (v5 + 21 <= v4)
      {
        v11 = ((v4 - v6) / 0xB);
        if (((v4 - v6) / 0xB))
          goto LABEL_11;
      }
    }
    else if ((_DWORD)v11)
    {
LABEL_11:
      v14 = 0;
      while (1)
      {
        v15 = (unsigned __int8 *)(v6 + 11 * v14);
        v16 = *(_DWORD *)(v15 + 7);
        if (v16)
        {
          v17 = bswap32(v16);
          v18 = *((_QWORD *)this + 1);
          v19 = (unsigned int *)(*(_QWORD *)this + v17);
          v20 = v19 + 1;
          if ((unint64_t)(v19 + 1) <= v18)
          {
            v21 = bswap32(*v19);
            v22 = (unint64_t)&v20[v21] + v21;
            if (v22 >= (unint64_t)v20 && v22 <= v18)
              goto LABEL_21;
            if ((unint64_t)v19 + 9 <= v18)
              break;
          }
        }
LABEL_24:
        if (++v14 == v11)
          return;
      }
      v21 = (v18 - (unint64_t)v20) / 5;
LABEL_21:
      if ((_DWORD)v21)
      {
        v24 = (unsigned __int16 *)(*(_QWORD *)this + v17 + 7);
        do
        {
          SetUVSForGlyphInMap(a2, theDict, (void *)(bswap32(*v24) >> 16), (*((unsigned __int8 *)v24 - 3) << 16) | (*((unsigned __int8 *)v24 - 2) << 8) | *((unsigned __int8 *)v24 - 1), (*v15 << 16) | (v15[1] << 8) | v15[2], a4);
          v24 = (unsigned __int16 *)((char *)v24 + 5);
          LODWORD(v21) = v21 - 1;
        }
        while ((_DWORD)v21);
      }
      goto LABEL_24;
    }
  }
}

void TFormat4cmapTable::~TFormat4cmapTable(TFormat4cmapTable *this)
{
  JUMPOUT(0x1B5E0CD38);
}

uint64_t TFormat4cmapTable::DecomposeMacCmap(TFormat4cmapTable *this, unsigned __int8 *a2, int a3, unint64_t *a4, unsigned __int16 *a5, unint64_t *a6)
{
  _QWORD *v11;
  unsigned __int16 *v12;
  unsigned int v13;
  unsigned __int8 *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unint64_t v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v23;
  unsigned int v24;
  _WORD *v25;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unint64_t v31;
  unsigned __int16 *v32;
  unint64_t v33;
  _DWORD *exception;
  unint64_t v36;
  int v37;
  unint64_t v38;
  unsigned int v39;
  uint64_t v40;
  unsigned __int16 *v41;
  unsigned __int8 *v42;
  unsigned int v43;
  _QWORD *v44;
  unsigned int v45;
  unsigned int v46;
  unint64_t v47;
  unsigned __int8 *v48;
  unint64_t v49;

  v11 = (_QWORD *)((char *)this + 8);
  v12 = (unsigned __int16 *)(*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), 0, 4);
  TcmapTableDataRef::validateArray<FPBigEndianScalar<unsigned short>>(v11, (unint64_t)v12, 1);
  v13 = bswap32(*v12) >> 16;
  if ((v13 & 1) != 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E6176998;
    exception[2] = 4;
  }
  v49 = *a6;
  *a6 = 0;
  LODWORD(v14) = (_DWORD)a2;
  if (v13 >= 2)
  {
    v44 = v11;
    v15 = 0;
    v16 = 0;
    v17 = 0;
    v46 = 0;
    v18 = v13 >> 1;
    v48 = &a2[a3];
    v19 = 2 * (v13 >> 1);
    v41 = v12 + 4;
    v42 = a2;
    v40 = (uint64_t)&v12[v19 / 2 + 5];
    v36 = v40 + v19;
    v38 = v40 + v19 + v19;
    v47 = v38 + v19;
    v39 = v18;
    v37 = -v18;
    v14 = a2;
    do
    {
      v43 = v16;
      TcmapTableDataRef::validateArray<FPBigEndianScalar<unsigned short>>(v44, v40 + 2 * v15, 1);
      v20 = bswap32(*(unsigned __int16 *)(v40 + 2 * v15));
      TcmapTableDataRef::validateArray<FPBigEndianScalar<unsigned short>>(v44, (unint64_t)&v41[v15], 1);
      v21 = bswap32(v41[v15]) >> 16;
      if (v46 > HIWORD(v20) || v17 > v21)
        break;
      v23 = v21;
      v24 = HIWORD(v20);
      v25 = (_WORD *)(v38 + 2 * v15);
      TcmapTableDataRef::validateArray<FPBigEndianScalar<unsigned short>>(v44, (unint64_t)v25, 1);
      v46 = HIWORD(v20);
      v45 = v15;
      if (*v25)
      {
        v17 = v23;
        if (v24 <= v23 && *a6 < v49 && v14 < v48)
        {
          v28 = v37 + v43 + (__rev16((unsigned __int16)*v25) >> 1);
          v29 = v24;
          do
          {
            TcmapTableDataRef::validateArray<FPBigEndianScalar<unsigned short>>(v44, v47 + 2 * (unsigned __int16)v28, 1);
            v30 = *(unsigned __int16 *)(v47 + 2 * (unsigned __int16)v28);
            if (a4)
              *a4++ = v14 - v42;
            if (a5)
              *a5++ = bswap32(v30) >> 16;
            if ((unsigned __int16)v29 < 0x100u)
            {
              *v14++ = v29;
            }
            else
            {
              *(_WORD *)v14 = bswap32(v29) >> 16;
              v14 += 2;
            }
            v31 = *a6 + 1;
            *a6 = v31;
            if (v29 >= v23)
              break;
            if (v31 >= v49)
              break;
            ++v29;
            LOWORD(v28) = v28 + 1;
          }
          while (v14 < v48);
        }
      }
      else
      {
        v17 = v23;
        if (v24 <= v23 && *a6 < v49 && v14 < v48)
        {
          v32 = (unsigned __int16 *)(v36 + 2 * v15);
          do
          {
            if (a4)
              *a4++ = v14 - v42;
            if (a5)
            {
              TcmapTableDataRef::validateArray<FPBigEndianScalar<unsigned short>>(v44, (unint64_t)v32, 1);
              *a5++ = v24 + (bswap32(*v32) >> 16);
            }
            if ((unsigned __int16)v24 < 0x100u)
            {
              *v14++ = v24;
            }
            else
            {
              *(_WORD *)v14 = bswap32(v24) >> 16;
              v14 += 2;
            }
            v33 = *a6 + 1;
            *a6 = v33;
            if (v24 >= v23)
              break;
            if (v33 >= v49)
              break;
            ++v24;
          }
          while (v14 < v48);
        }
      }
      v16 = v45 + 1;
      v15 = (unsigned __int16)(v45 + 1);
    }
    while (v15 < v39);
    LODWORD(a2) = (_DWORD)v42;
  }
  return ((_DWORD)v14 - (_DWORD)a2);
}

void TFormat4_816cmapTable::~TFormat4_816cmapTable(TFormat4_816cmapTable *this)
{
  JUMPOUT(0x1B5E0CD38);
}

BOOL TFormat6cmapTable::VerifyCMAP(TFormat6cmapTable *this)
{
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;

  v2 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)this + 16))(*(_QWORD *)this, 0, 4);
  v3 = *(unsigned __int16 *)(v2 - 4);
  TcmapTableDataRef::validateArray<FPBigEndianScalar<unsigned short>>(this, v2 + 2, 1);
  if (*(_WORD *)(v2 + 2)
    && (v4 = v2 + 2 * __rev16(*(unsigned __int16 *)(v2 + 2)) + 4, v2 + (unint64_t)__rev16(v3) - 6 >= v4))
  {
    return v4 <= *(_QWORD *)(*(_QWORD *)this + 8);
  }
  else
  {
    return 0;
  }
}

uint64_t TcmapEncodingTable::Map<unsigned short>(uint64_t a1, uint64_t *a2, uint64_t a3, _WORD *a4, unsigned int *a5)
{
  unsigned __int16 *v10;
  unsigned __int16 *v11;
  uint64_t DataP;
  uint64_t v13;
  size_t v14;
  uint64_t v15;
  int v17;
  unint64_t v18;
  unsigned __int8 *v19;
  uint64_t v20;
  char *v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unint64_t v32;
  _BYTE *v33;
  int v34;
  uint64_t v35;
  unsigned int v36;
  _BYTE *v37;
  int v39;
  unsigned __int16 *v40;
  _BYTE *v41;
  unsigned int v42;
  unsigned int v43;
  unint64_t v44;
  unsigned __int8 *v45;
  uint64_t v46;
  uint64_t v47;
  unsigned __int16 *v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v53;
  unsigned __int16 v55;
  unsigned __int16 *v56;
  unsigned int v57;
  unsigned int v58;
  _WORD *v59;
  unint64_t v60;
  uint64_t v61;
  char *v62;
  unsigned int v63;
  unsigned int v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unsigned __int8 *v68;
  uint64_t v69;
  int v70;
  unsigned int v71;
  unsigned int v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unsigned int v77;
  unsigned __int16 *v78;
  unsigned int v79;
  unsigned __int8 *v80;
  unsigned __int8 *v81;
  uint64_t v82;
  unsigned __int16 v83;
  unsigned int v84;
  _BYTE *v85;
  uint64_t v86;
  char v87;
  _WORD *v88;
  _WORD *v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t *v93;
  unsigned int *v94;
  void (**v95)(TcmapTableFileData16 *__hidden);
  unint64_t TableEnd;
  uint64_t v97;
  unsigned __int16 *v98;
  void (**v99)(TFormat4cmapTable *__hidden);
  void (***v100)(TcmapTableFileData16 *__hidden);
  uint64_t v101;
  int v102;
  int v103;

  v95 = &off_1E61794D0;
  TableEnd = TsfntTable::GetTableEnd((TsfntTable *)a1);
  v10 = *(unsigned __int16 **)(a1 + 64);
  v11 = v10 + 3;
  if (!v10)
    v11 = 0;
  v97 = *(_QWORD *)(a1 + 64);
  v98 = v11;
  if (!v10)
  {
LABEL_8:
    v15 = *a5;
    if ((_DWORD)v15)
    {
      v14 = 2 * v15;
LABEL_10:
      bzero(a4, v14);
    }
LABEL_11:
    v13 = 0;
    *a5 = 0;
    return v13;
  }
  v94 = a5;
  switch(bswap32(*v10) >> 16)
  {
    case 0u:
      DataP = TcmapTableFileData16::GetDataP((TcmapTableFileData16 *)&v95, 0);
      v13 = *a5;
      if (DataP + 256 <= TableEnd)
      {
        if (v13 > a3)
        {
          *a5 = a3;
          v13 = a3;
        }
        if ((_DWORD)v13)
        {
          v25 = ((uint64_t (*)(void (***)(TcmapTableFileData16 *__hidden), _QWORD, uint64_t))v95[2])(&v95, 0, 4);
          v26 = *a5;
          if ((_DWORD)v26)
          {
            v27 = 0;
            v28 = *a2;
            v29 = v13;
            do
            {
              v30 = *(unsigned __int8 *)(v25 + *(unsigned __int8 *)(v28 + v27));
              v31 = (unsigned __int16)v27;
              if ((int)v13 < (unsigned __int16)v27)
                v31 = v13;
              a4[v27] = v30;
              if (v30)
                v13 = v13;
              else
                v13 = v31;
              v29 = (__PAIR64__(v29, v30) - 1) >> 32;
              ++v27;
            }
            while (v26 != v27);
          }
          else
          {
            v29 = v13;
          }
        }
        else
        {
          v29 = 0;
        }
        goto LABEL_151;
      }
      if (!(_DWORD)v13)
        goto LABEL_11;
      v14 = 2 * v13;
      goto LABEL_10;
    case 2u:
      v100 = &v95;
      v101 = 0;
      v99 = &off_1E61B4C08;
      if (*(_WORD *)(a1 + 72) != 1)
      {
        v32 = TcmapTableFileData16::GetDataP((TcmapTableFileData16 *)&v95, 0);
        TcmapTableDataRef::validateArray<FPBigEndianScalar<unsigned short>>(&v100, v32, 256);
        v91 = v32 + 512;
        v92 = v32;
        v19 = (unsigned __int8 *)*a2;
        v20 = *a5;
        v21 = (char *)&a4[v20];
        v13 = v20;
        goto LABEL_40;
      }
      v17 = *(__int16 *)(a1 + 74);
      v18 = TcmapTableFileData16::GetDataP((TcmapTableFileData16 *)&v95, 0);
      TcmapTableDataRef::validateArray<FPBigEndianScalar<unsigned short>>(&v100, v18, 256);
      v91 = v18 + 512;
      v92 = v18;
      v19 = (unsigned __int8 *)*a2;
      v20 = *a5;
      v13 = v20;
      v21 = (char *)&a4[v20];
      if (v17 > 2)
      {
        if (v17 == 3)
        {
          v87 = 0;
          v33 = &gKoreanHighBytes;
          goto LABEL_64;
        }
        if (v17 == 25)
          goto LABEL_43;
LABEL_40:
        v33 = 0;
        v87 = 1;
        goto LABEL_64;
      }
      if (v17 == 1)
      {
        v87 = 0;
        v33 = &gJapaneseHighBytes;
        goto LABEL_64;
      }
      if (v17 != 2)
        goto LABEL_40;
LABEL_43:
      v87 = 0;
      v33 = &gSimplifiedChineseHighBytes;
LABEL_64:
      v102 = v13;
      v103 = v13;
      v88 = a4;
      v90 = (unint64_t)v21;
      v86 = v20;
      if (!(_DWORD)v13)
      {
        v43 = 0;
        v44 = (unint64_t)a4;
        goto LABEL_97;
      }
      v85 = v33;
      v93 = a2;
      v42 = 0;
      v43 = v13;
      v44 = (unint64_t)a4;
      v45 = v19;
      while ((int)v45 - *(_DWORD *)a2 < a3)
      {
        v46 = a3;
        v19 = v45 + 1;
        v47 = *v45;
        v48 = (unsigned __int16 *)(v91 + ((bswap32(*(unsigned __int16 *)(v92 + 2 * v47)) >> 16) & 0xFFFE));
        TcmapTableDataRef::validateArray<FPBigEndianScalar<unsigned short>>(&v100, (unint64_t)v48, 4);
        v49 = bswap32(*v48) >> 16;
        v50 = bswap32(v48[1]) >> 16;
        if (*(_WORD *)(v92 + 2 * v47))
        {
          if ((int)v19 - *(_DWORD *)v93 >= v46)
          {
            a2 = v93;
            a5 = v94;
            goto LABEL_97;
          }
          LODWORD(v47) = *v19;
          v51 = v50 + v49;
          if (v49 > v47 || v51 <= v47)
            goto LABEL_85;
          v19 = v45 + 2;
        }
        else
        {
          v53 = v50 + v49;
          if (v49 > v47 || v53 <= v47)
            goto LABEL_85;
          if ((v87 & 1) == 0 && v85[v47])
          {
            v19 = v45 + 2;
LABEL_85:
            *(_WORD *)v44 = 0;
            --v43;
            if ((int)v13 >= (unsigned __int16)v42)
              v13 = (unsigned __int16)v42;
            else
              v13 = v13;
            v102 = v13;
            v103 = v43;
            goto LABEL_89;
          }
        }
        v55 = v47 - v49;
        v57 = v48[3];
        v56 = v48 + 3;
        v58 = *(v56 - 1);
        v59 = (unsigned __int16 *)((char *)&v56[v55] + ((bswap32(v57) >> 16) & 0xFFFE));
        TcmapTableDataRef::validateArray<FPBigEndianScalar<unsigned short>>(&v100, (unint64_t)v59, 1);
        if (!*v59)
          goto LABEL_85;
        *(_WORD *)v44 = __rev16((unsigned __int16)*v59) + (bswap32(v58) >> 16);
LABEL_89:
        a3 = v46;
        a2 = v93;
        a5 = v94;
        v44 += 2;
        ++v42;
        v45 = v19;
        if (v42 >= *v94)
          goto LABEL_97;
      }
      --v43;
      if ((int)v13 >= (unsigned __int16)v42)
        v13 = (unsigned __int16)v42;
      else
        v13 = v13;
      v19 = v45;
LABEL_97:
      if (v44 < v90)
      {
        v60 = (unint64_t)&v88[v86];
        if (v60 <= v44 + 2)
          v60 = v44 + 2;
        bzero((void *)v44, ((v60 + ~v44) & 0xFFFFFFFFFFFFFFFELL) + 2);
      }
      *a2 = (uint64_t)v19;
      *a5 = v43;
      return v13;
    case 4u:
      v22 = *(unsigned __int16 *)(a1 + 72);
      if (v22 == 3)
        goto LABEL_21;
      if (v22 != 1)
      {
        if (!*(_WORD *)(a1 + 72))
        {
LABEL_21:
          v99 = (void (**)(TFormat4cmapTable *__hidden))&v95;
          v100 = 0;
          goto LABEL_26;
        }
        goto LABEL_50;
      }
      v34 = *(unsigned __int16 *)(a1 + 74);
      if (v34 > 0x19 || ((1 << v34) & 0x200000E) == 0)
      {
LABEL_50:
        v100 = &v95;
        v101 = 0;
        v99 = &off_1E6179458;
        return TFormat4cmapTable::Map<unsigned short>((TFormat4cmapTable *)&v99, a2, a3, a4, a5);
      }
      v100 = &v95;
      v101 = 0;
      v99 = &off_1E61796F0;
      v35 = *a5;
      if (v34 > 2)
      {
        if (v34 != 3)
        {
          if (v34 == 25)
            goto LABEL_49;
LABEL_104:
          v36 = a3;
          v37 = 0;
          goto LABEL_112;
        }
        v36 = a3;
        v37 = &gKoreanHighBytes;
      }
      else
      {
        if (v34 != 1)
        {
          if (v34 == 2)
          {
LABEL_49:
            v36 = a3;
            v37 = &gSimplifiedChineseHighBytes;
            goto LABEL_112;
          }
          goto LABEL_104;
        }
        v36 = a3;
        v37 = &gJapaneseHighBytes;
      }
LABEL_112:
      v62 = (char *)&a4[v35];
      v89 = a4;
      if ((_DWORD)v35)
      {
        v63 = 0;
        v64 = 0;
        v65 = (unint64_t)a4;
        v66 = *a2;
        v13 = *a5;
        v67 = v36;
        while (1)
        {
          v68 = (unsigned __int8 *)*a2;
          if (*a2 - v66 >= v67)
            goto LABEL_128;
          *a2 = (uint64_t)(v68 + 1);
          v69 = *v68;
          if (v37[v69])
          {
            if ((unint64_t)&v68[-v66 + 1] >= v67)
            {
              *a2 = (uint64_t)v68;
              goto LABEL_128;
            }
            *a2 = (uint64_t)(v68 + 2);
            LODWORD(v69) = v68[1] | ((_DWORD)v69 << 8);
          }
          v70 = TFormat4cmapTable::ComputeIndex((TFormat4cmapTable *)&v99, v69);
          v71 = *v94;
          if ((_DWORD)v13 == *v94)
            v72 = v63;
          else
            v72 = v13;
          if (v70)
          {
            ++v64;
            v13 = v13;
          }
          else
          {
            v13 = v72;
          }
          *(_WORD *)v65 = v70;
          v65 += 2;
          if (++v63 >= v71)
            goto LABEL_128;
        }
      }
      v64 = 0;
      v13 = 0;
      v65 = (unint64_t)a4;
LABEL_128:
      if (v65 < (unint64_t)v62)
      {
        v73 = (unint64_t)&v89[v35];
        if (v73 <= v65 + 2)
          v73 = v65 + 2;
        bzero((void *)v65, ((v73 + ~v65) & 0xFFFFFFFFFFFFFFFELL) + 2);
      }
      *v94 = v64;
      return v13;
    case 6u:
      v24 = *(unsigned __int16 *)(a1 + 72);
      if (v24 == 3)
        goto LABEL_25;
      if (v24 != 1)
      {
        if (!*(_WORD *)(a1 + 72))
        {
LABEL_25:
          v99 = (void (**)(TFormat4cmapTable *__hidden))&v95;
          v100 = 0;
LABEL_26:
          v13 = v23;
          *a2 += 2 * *a5;
          return v13;
        }
        goto LABEL_58;
      }
      v39 = *(unsigned __int16 *)(a1 + 74);
      if (v39 > 0x19 || ((1 << v39) & 0x200000E) == 0)
      {
LABEL_58:
        v99 = (void (**)(TFormat4cmapTable *__hidden))&v95;
        v100 = 0;
        return TFormat6cmapTable::Map<unsigned short>((TFormat6cmapTable *)&v99, a2, a3, a4, a5);
      }
      v99 = (void (**)(TFormat4cmapTable *__hidden))&v95;
      v100 = 0;
      if (!TFormat6cmapTable::VerifyCMAP((TFormat6cmapTable *)&v99))
      {
        v61 = *a5;
        if ((_DWORD)v61)
          bzero(a4, 2 * v61);
        goto LABEL_150;
      }
      v40 = (unsigned __int16 *)((uint64_t (*)(void (***)(TcmapTableFileData16 *__hidden), _QWORD, uint64_t))v95[2])(&v95, 0, 4);
      if (v39 > 2)
      {
        if (v39 != 3)
        {
          if (v39 == 25)
            goto LABEL_57;
LABEL_109:
          v41 = 0;
          goto LABEL_135;
        }
        v41 = &gKoreanHighBytes;
      }
      else
      {
        if (v39 != 1)
        {
          if (v39 == 2)
          {
LABEL_57:
            v41 = &gSimplifiedChineseHighBytes;
            goto LABEL_135;
          }
          goto LABEL_109;
        }
        v41 = &gJapaneseHighBytes;
      }
LABEL_135:
      v74 = *a5;
      if ((_DWORD)v74)
      {
        v75 = 0;
        v29 = 0;
        v76 = *a2;
        v77 = bswap32(*v40) >> 16;
        v78 = v40 + 2;
        v79 = bswap32(v40[1]) >> 16;
        v13 = *a5;
        v80 = (unsigned __int8 *)*a2;
        while (1)
        {
          if ((unint64_t)&v80[-v76] >= a3)
            goto LABEL_151;
          v81 = v80 + 1;
          *a2 = (uint64_t)(v80 + 1);
          v82 = *v80;
          if (v41[v82])
          {
            if ((unint64_t)&v81[-v76] >= a3)
            {
              *a2 = (uint64_t)v80;
              goto LABEL_151;
            }
            v81 = v80 + 2;
            *a2 = (uint64_t)(v80 + 2);
            LOWORD(v82) = v80[1] | (unsigned __int16)((_WORD)v82 << 8);
          }
          v80 = v81;
          v83 = v82 - v77;
          if (v79 <= v83)
            break;
          v84 = v78[v83];
          if (!v84)
            goto LABEL_145;
          LOWORD(v84) = __rev16(v84);
          ++v29;
LABEL_148:
          a4[v75++] = v84;
          if (v74 == v75)
            goto LABEL_151;
        }
        LOWORD(v84) = 0;
LABEL_145:
        if ((_DWORD)v13 == (_DWORD)v74)
          v13 = v75;
        else
          v13 = v13;
        goto LABEL_148;
      }
LABEL_150:
      v29 = 0;
      v13 = 0;
LABEL_151:
      *a5 = v29;
      return v13;
    default:
      goto LABEL_8;
  }
}

uint64_t ThmtxTable::ThmtxTable(uint64_t a1, const TSFNTFont *a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t Hhea;
  unsigned int v8;

  TsfntTable::TsfntTable((TsfntTable *)a1, a2, 1751672161);
  *v6 = &off_1E6179408;
  if ((a3 & 0xFF00000000) == 0)
    LODWORD(a3) = (*(uint64_t (**)(const TSFNTFont *))(*(_QWORD *)a2 + 168))(a2);
  *(_DWORD *)(a1 + 56) = a3;
  Hhea = ThmtxTable::GetHhea((ThmtxTable *)a1);
  if (Hhea)
    v8 = bswap32(*(unsigned __int16 *)(Hhea + 34)) >> 16;
  else
    v8 = 0;
  *(_DWORD *)(a1 + 60) = a3 - v8;
  *(_DWORD *)(a1 + 64) = TSFNTFont::GetTableOffset(a2, 1752003704, (unint64_t *)(a1 + 72));
  return a1;
}

void sub_1B09A5AB4(_Unwind_Exception *a1)
{
  TDataReference *v1;

  TDataReference::~TDataReference(v1);
  _Unwind_Resume(a1);
}

uint64_t ThmtxTable::ThmtxTable(uint64_t a1, const TSFNTFont *a2, uint64_t a3, int a4, uint64_t a5)
{
  int v7;
  _QWORD *v10;
  uint64_t Hhea;
  unsigned int v12;
  uint64_t v13;
  void (**v15)(TDataReference *__hidden);
  uint64_t v16;
  __int128 v17;

  v7 = a3;
  TsfntTable::TsfntTable((TsfntTable *)a1, a2, a3);
  *v10 = &off_1E6179408;
  if ((a5 & 0xFF00000000) == 0)
    LODWORD(a5) = (*(uint64_t (**)(const TSFNTFont *))(*(_QWORD *)a2 + 168))(a2);
  *(_DWORD *)(a1 + 56) = a5;
  Hhea = ThmtxTable::GetHhea((ThmtxTable *)a1);
  if (Hhea)
    v12 = bswap32(*(unsigned __int16 *)(Hhea + 34)) >> 16;
  else
    v12 = 0;
  *(_DWORD *)(a1 + 60) = a5 - v12;
  if (v7 == 1986553185 && ThmtxTable::GetHhea((ThmtxTable *)a1) && TSFNTFont::HasBadvmtxTables(a2))
  {
    v15 = &off_1E6176770;
    v16 = 0;
    v17 = 0uLL;
    if (&v15 != (void (***)(TDataReference *__hidden))a1)
    {
      TDataReference::DucRefCount((TDataReference *)a1);
      v13 = v16;
      v16 = 0;
      *(_QWORD *)(a1 + 8) = v13;
      *(_OWORD *)(a1 + 16) = v17;
    }
    v15 = &off_1E6176770;
    TDataReference::DucRefCount((TDataReference *)&v15);
  }
  else
  {
    *(_DWORD *)(a1 + 64) = TSFNTFont::GetTableOffset(a2, a4, (unint64_t *)(a1 + 72));
  }
  return a1;
}

void sub_1B09A5BF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  TDataReference *v9;

  TDataReference::~TDataReference((TDataReference *)&a9);
  TDataReference::~TDataReference(v9);
  _Unwind_Resume(a1);
}

uint64_t ThmtxTable::GetAdvance(ThmtxTable *this, unsigned int a2)
{
  uint64_t Advance;
  _BYTE v5[16];
  void (**v6)(TDataReference *__hidden);

  TMetricsTableContext::TMetricsTableContext((TMetricsTableContext *)v5, this);
  Advance = TMetricsTableContext::GetAdvance((TMetricsTableContext *)v5, a2);
  v6 = &off_1E6176770;
  TDataReference::DucRefCount((TDataReference *)&v6);
  return Advance;
}

void sub_1B09A5CC4(_Unwind_Exception *a1)
{
  uint64_t v1;

  TDataReference::~TDataReference((TDataReference *)(v1 + 16));
  _Unwind_Resume(a1);
}

uint64_t TMetricsTableContext::GetAdvance(TMetricsTableContext *this, unsigned int a2)
{
  uint64_t v2;
  unint64_t v3;
  unsigned int v4;
  unsigned int v5;
  unsigned __int16 *v6;
  _DWORD *exception;

  v2 = *((_QWORD *)this + 6);
  v3 = v2 + *(_QWORD *)(*(_QWORD *)this + 72);
  v4 = *((_DWORD *)this + 2);
  if (v4 <= a2)
    v5 = v4 - 1;
  else
    v5 = a2;
  v6 = (unsigned __int16 *)(v2 + 4 * v5);
  if ((unint64_t)(v6 + 2) > v3)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E6176998;
    exception[2] = 4;
  }
  return bswap32(*v6) >> 16;
}

uint64_t ThmtxTable::GetRawMetrics(ThmtxTable *this, unsigned int a2, __int16 *a3)
{
  uint64_t RawMetrics;
  _BYTE v7[16];
  void (**v8)(TDataReference *__hidden);

  TMetricsTableContext::TMetricsTableContext((TMetricsTableContext *)v7, this);
  RawMetrics = TMetricsTableContext::GetRawMetrics((TMetricsTableContext *)v7, a2, a3);
  v8 = &off_1E6176770;
  TDataReference::DucRefCount((TDataReference *)&v8);
  return RawMetrics;
}

void sub_1B09A5DCC(_Unwind_Exception *a1)
{
  uint64_t v1;

  TDataReference::~TDataReference((TDataReference *)(v1 + 16));
  _Unwind_Resume(a1);
}

uint64_t TMetricsTableContext::GetRawMetrics(TMetricsTableContext *this, unsigned int a2, __int16 *a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned __int16 *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned __int16 *v13;
  unsigned __int16 *v15;
  unsigned __int16 *v16;
  _DWORD *exception;

  v3 = *((_QWORD *)this + 6);
  v4 = v3 + *(_QWORD *)(*(_QWORD *)this + 72);
  v5 = *((unsigned int *)this + 2);
  v6 = v5 - 1;
  if (a2 >= v5)
    v7 = v6;
  else
    v7 = a2;
  v8 = (unsigned __int16 *)(v3 + 4 * v7);
  if ((unint64_t)(v8 + 2) > v4)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E6176998;
    exception[2] = 4;
  }
  v9 = v3 + 4 * v5;
  v10 = v3 + 4 * v6 + 2;
  v11 = (v4 - v9) >> 1;
  v12 = a2 - v5;
  if (v11 <= v12)
    LODWORD(v12) = v11 - 1;
  v13 = (unsigned __int16 *)(v9 + 2 * v12);
  if (v9 + 2 <= v4 && v4 - v9 >= 2)
    v15 = v13;
  else
    v15 = (unsigned __int16 *)v10;
  v16 = (unsigned __int16 *)(v3 + 4 * v7 + 2);
  if ((_DWORD)v7 != a2)
    v16 = v15;
  *a3 = bswap32(*v16) >> 16;
  return bswap32(*v8) >> 16;
}

void TVORGTable::~TVORGTable(TVORGTable *this)
{
  *(_QWORD *)this = &off_1E6176770;
  TDataReference::DucRefCount(this);
}

{
  *(_QWORD *)this = &off_1E6176770;
  TDataReference::DucRefCount(this);
  JUMPOUT(0x1B5E0CD38);
}

void TMVARTable::TMVARTable(TMVARTable *this, const TSFNTFont *a2, uint64_t a3, const __int16 *a4)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t TableEnd;
  _WORD *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _DWORD *exception;
  _DWORD *v20;

  TsfntTable::TsfntTable(this, a2, 1297498450);
  *(_QWORD *)v7 = &off_1E61B4AA8;
  *(_OWORD *)(v7 + 88) = 0u;
  v8 = (_QWORD *)(v7 + 88);
  *(_OWORD *)(v7 + 56) = 0u;
  *(_OWORD *)(v7 + 72) = 0u;
  *(_OWORD *)(v7 + 104) = 0u;
  *(_OWORD *)(v7 + 120) = 0u;
  v9 = *(_QWORD *)(v7 + 8);
  if (v9)
  {
    v10 = *(_QWORD *)(v9 + 8);
    if (v10)
    {
      v11 = *((_QWORD *)this + 2);
      TableEnd = TsfntTable::GetTableEnd(this);
      v13 = (_WORD *)(v10 + v11);
      v14 = v10 + v11 + 12;
      if (v14 > TableEnd)
      {
        exception = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)exception = &off_1E6176998;
        exception[2] = 4;
      }
      if (*v13 == 256 && v13[3])
      {
        v15 = __rev16((unsigned __int16)v13[3]);
        if (v15 < 8)
          goto LABEL_17;
        if (v13[4] && v13[5])
        {
          v16 = __rev16((unsigned __int16)v13[4]);
          v17 = v14 + v16 * (unint64_t)v15;
          if (v17 >= v14 && v17 <= TableEnd)
          {
            if (ItemVariationStore::Initialize(v8, (uint64_t)v13 + __rev16((unsigned __int16)v13[5]), TableEnd))
            {
              *((_QWORD *)this + 7) = a3;
              *((_QWORD *)this + 8) = a4;
              *((_QWORD *)this + 9) = v15;
              *((_QWORD *)this + 10) = v16;
            }
            return;
          }
LABEL_17:
          v20 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v20 = &off_1E6176998;
          v20[2] = 4;
        }
      }
    }
  }
}

void sub_1B09A60F8(void *a1)
{
  TDataReference *v1;
  _QWORD *v2;

  __cxa_begin_catch(a1);
  TDataReference::DucRefCount(v1);
  *v2 = 0;
  v2[1] = 0;
  v2[2] = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B09A606CLL);
}

void sub_1B09A611C(_Unwind_Exception *a1)
{
  TDataReference *v1;

  __cxa_end_catch();
  TDataReference::~TDataReference(v1);
  _Unwind_Resume(a1);
}

void TMVARTable::~TMVARTable(TMVARTable *this)
{
  *(_QWORD *)this = &off_1E6176770;
  TDataReference::DucRefCount(this);
}

{
  *(_QWORD *)this = &off_1E6176770;
  TDataReference::DucRefCount(this);
  JUMPOUT(0x1B5E0CD38);
}

uint64_t TMVARTable::GetDeltaSetIndexForTag(TMVARTable *this, int a2)
{
  uint64_t v2;
  size_t v3;
  size_t v4;
  _DWORD *v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int __key;

  __key = a2;
  v2 = *((_QWORD *)this + 1);
  if (!v2)
    goto LABEL_8;
  v2 = *(_QWORD *)(v2 + 8);
  if (!v2)
    goto LABEL_8;
  v3 = *((_QWORD *)this + 10);
  if (!v3
    || (v4 = *((_QWORD *)this + 9)) == 0
    || (v5 = bsearch(&__key, (const void *)(v2 + *((_QWORD *)this + 2) + 12), v3, v4, (int (__cdecl *)(const void *, const void *))TMVARTable::GetDeltaSetIndexForTagconst::$_0::__invoke)) == 0)
  {
    v2 = 0;
LABEL_8:
    v8 = 0;
    v7 = 0;
    return v2 | v7 | v8;
  }
  v6 = bswap32(v5[1]);
  v7 = v6 & 0xFFFFFF00;
  v8 = v6;
  v2 = 0x100000000;
  return v2 | v7 | v8;
}

void THVARTable::THVARTable(THVARTable *this, const TSFNTFont *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t TableEnd;
  unint64_t v12;
  unint64_t v13;
  unsigned int v15;
  BOOL v16;
  unsigned __int8 *v17;
  unsigned int v19;
  unsigned __int8 *v20;
  int v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 *v25;
  int v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int8 *v30;
  _DWORD *exception;

  TsfntTable::TsfntTable(this, a2, a3);
  *(_QWORD *)v6 = &off_1E61B4AC8;
  *(_OWORD *)(v6 + 56) = 0u;
  v7 = (_QWORD *)(v6 + 56);
  *(_OWORD *)(v6 + 72) = 0u;
  *(_OWORD *)(v6 + 88) = 0u;
  *(_OWORD *)(v6 + 104) = 0u;
  v8 = *(_QWORD *)(v6 + 8);
  if (v8)
  {
    v9 = *(_QWORD *)(v8 + 8);
    if (v9)
    {
      v10 = *((_QWORD *)this + 2);
      TableEnd = TsfntTable::GetTableEnd(this);
      v12 = TableEnd;
      v13 = v9 + v10;
      if (v13 + a4 < v13 || v13 + a4 > TableEnd)
      {
        exception = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)exception = &off_1E6176998;
        exception[2] = 4;
      }
      if (*(_WORD *)v13 == 256
        && ItemVariationStore::Initialize(v7, v13 + bswap32(*(_DWORD *)(v13 + 4)), TableEnd))
      {
        v15 = *(_DWORD *)(v13 + 8);
        v16 = v15 == 0;
        v17 = (unsigned __int8 *)(v13 + bswap32(v15));
        if (!v16 && (unint64_t)(v17 + 1) <= v12)
        {
          v22 = *v17;
          v23 = 6;
          if (v22 != 1)
            v23 = 0;
          v16 = v22 == 0;
          v24 = 4;
          if (!v16)
            v24 = v23;
          v25 = &v17[v24];
          if (v25 >= v17 && (unint64_t)v25 <= v12)
            *((_QWORD *)this + 13) = v17;
        }
        v19 = *(_DWORD *)(v13 + 12);
        v16 = v19 == 0;
        v20 = (unsigned __int8 *)(v13 + bswap32(v19));
        if (!v16 && (unint64_t)(v20 + 1) <= v12)
        {
          v27 = *v20;
          v28 = 6;
          if (v27 != 1)
            v28 = 0;
          v16 = v27 == 0;
          v29 = 4;
          if (!v16)
            v29 = v28;
          v30 = &v20[v29];
          if (v30 >= v20 && (unint64_t)v30 <= v12)
            *((_QWORD *)this + 14) = v20;
        }
      }
    }
  }
}

void sub_1B09A63E0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void (**a9)(TDataReference *__hidden this), uint64_t a10, __int128 a11)
{
  uint64_t v11;
  uint64_t v12;

  __cxa_begin_catch(a1);
  a9 = &off_1E6176770;
  a10 = 0;
  a11 = 0uLL;
  if (&a9 != (void (***)(TDataReference *__hidden))v11)
  {
    TDataReference::DucRefCount((TDataReference *)v11);
    v12 = a10;
    a10 = 0;
    *(_QWORD *)(v11 + 8) = v12;
    *(_OWORD *)(v11 + 16) = a11;
  }
  TDataReference::~TDataReference((TDataReference *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x1B09A6324);
}

void sub_1B09A6434(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  TDataReference *v9;

  TDataReference::~TDataReference((TDataReference *)&a9);
  __cxa_end_catch();
  TDataReference::~TDataReference(v9);
  _Unwind_Resume(a1);
}

void THVARTable::~THVARTable(THVARTable *this)
{
  *(_QWORD *)this = &off_1E6176770;
  TDataReference::DucRefCount(this);
}

{
  *(_QWORD *)this = &off_1E6176770;
  TDataReference::DucRefCount(this);
  JUMPOUT(0x1B5E0CD38);
}

double THVARTable::GetDelta(THVARTable *this, uint64_t a2, const DeltaSetIndexMap *a3, unint64_t a4, const __int16 *a5, const double *a6)
{
  unint64_t TableEnd;

  if (a3)
  {
    TableEnd = TsfntTable::GetTableEnd(this);
    LODWORD(a2) = DeltaSetIndexMap::IndexForValue(a3, a2, TableEnd);
  }
  return ItemVariationStore::ValueForDeltaSet((THVARTable *)((char *)this + 56), WORD1(a2), (unsigned __int16)a2, a4, a5, a6);
}

void TVVARTable::TVVARTable(TVVARTable *this, const TSFNTFont *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t TableEnd;
  unsigned __int8 *v9;
  int v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  unsigned __int8 *v14;

  THVARTable::THVARTable(this, a2, 1448493394, 24);
  *v3 = &off_1E61B4AE8;
  v3[15] = 0;
  if (v3[7])
  {
    v4 = *((_QWORD *)this + 1);
    if (v4 && (v5 = *(_QWORD *)(v4 + 8)) != 0)
      v6 = v5 + *((_QWORD *)this + 2);
    else
      v6 = 0;
    v7 = *(_DWORD *)(v6 + 20);
    if (v7)
    {
      TableEnd = TsfntTable::GetTableEnd(this);
      v9 = (unsigned __int8 *)(v6 + bswap32(v7));
      if ((unint64_t)(v9 + 1) <= TableEnd)
      {
        v10 = *v9;
        v11 = 6;
        if (v10 != 1)
          v11 = 0;
        v12 = v10 == 0;
        v13 = 4;
        if (!v12)
          v13 = v11;
        v14 = &v9[v13];
        if (v14 >= v9 && (unint64_t)v14 <= TableEnd)
          *((_QWORD *)this + 15) = v9;
      }
    }
  }
}

void sub_1B09A661C(_Unwind_Exception *a1)
{
  TDataReference *v1;

  TDataReference::~TDataReference(v1);
  _Unwind_Resume(a1);
}

void TVVARTable::~TVVARTable(TVVARTable *this)
{
  *(_QWORD *)this = &off_1E6176770;
  TDataReference::DucRefCount(this);
}

{
  *(_QWORD *)this = &off_1E6176770;
  TDataReference::DucRefCount(this);
  JUMPOUT(0x1B5E0CD38);
}

unint64_t TpostTable::GetGlyphName@<X0>(TpostTable *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  unint64_t result;
  unint64_t v7;
  unsigned int v8;
  uint64_t Post;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned __int8 *v14;
  __int16 i;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unsigned __int16 v19;
  unint64_t TableEnd;
  uint64_t v21;
  unsigned int v22;
  char *DefaultPostName;
  unsigned int v24;
  uint64_t v25;
  uint64_t v27;
  char *v28;
  char __s1[16];
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  result = TpostTable::GetPost(this);
  HIDWORD(v7) = bswap32(*(_DWORD *)result);
  LODWORD(v7) = HIDWORD(v7) - 0x10000;
  switch((v7 >> 15))
  {
    case 0u:
      if (a2 > 0x101)
        goto LABEL_39;
      v8 = (unsigned __int16)a2;
      goto LABEL_29;
    case 2u:
      Post = TpostTable::GetPost(this);
      result = TsfntTable::validate<FPBigEndianScalar<unsigned short>>(this, Post + 32, 0);
      v10 = bswap32(*(unsigned __int16 *)(Post + 32));
      v11 = HIWORD(v10);
      if (v11 <= a2)
        goto LABEL_38;
      TsfntTable::validate<FPBigEndianScalar<unsigned short>>(this, Post + 32, HIWORD(v10));
      if (!a2)
      {
        v13 = 0;
LABEL_26:
        v8 = v13;
LABEL_29:
        DefaultPostName = GetDefaultPostName(v8);
        v24 = *DefaultPostName;
        result = (unint64_t)(DefaultPostName + 1);
        *(_QWORD *)(a3 + 8) = result;
        *(_QWORD *)(a3 + 16) = v24;
        goto LABEL_30;
      }
      v12 = Post + 34;
      v13 = bswap32(*(unsigned __int16 *)(Post + 34 + 2 * a2)) >> 16;
      if (v13 <= 0x101)
        goto LABEL_26;
      result = TsfntTable::GetTableEnd(this);
      v14 = (unsigned __int8 *)(v12 + 2 * v11);
      for (i = v13 - 258; i; --i)
      {
        if ((unint64_t)v14 >= result)
          goto LABEL_38;
        v14 += *v14 + 1;
      }
      if ((unint64_t)v14 < result)
      {
        v25 = *v14;
        if (*v14 && (unint64_t)&v14[v25] < result)
        {
          result = IsValidPostName(v14 + 1, v25);
          if ((_DWORD)result)
          {
            v27 = *v14;
            *(_QWORD *)(a3 + 8) = v14 + 1;
            *(_QWORD *)(a3 + 16) = v27;
LABEL_30:
            *(_QWORD *)a3 = &off_1E61768F8;
LABEL_42:
            *(_BYTE *)(a3 + 24) = 0;
            goto LABEL_43;
          }
        }
      }
LABEL_38:
      if (!a2)
      {
LABEL_41:
        *(_QWORD *)(a3 + 8) = ".notdef";
        *(_QWORD *)(a3 + 16) = 7;
        *(_QWORD *)a3 = &off_1E61768F8;
        goto LABEL_42;
      }
LABEL_39:
      memset(__s1, 170, sizeof(__s1));
      snprintf_l(__s1, 0x10uLL, 0, "gid%d", a2);
LABEL_40:
      v28 = strndup(__s1, 0xFuLL);
      result = strnlen(__s1, 0xFuLL);
      *(_QWORD *)(a3 + 8) = v28;
      *(_QWORD *)(a3 + 16) = result;
      *(_QWORD *)a3 = &off_1E61768F8;
      *(_BYTE *)(a3 + 24) = 1;
LABEL_43:
      *(_QWORD *)(a3 + 32) = &off_1E6176770;
      *(_QWORD *)(a3 + 40) = 0;
      *(_QWORD *)(a3 + 48) = 0;
      *(_QWORD *)(a3 + 56) = 0;
      return result;
    case 3u:
      v16 = TpostTable::GetPost(this);
      result = TsfntTable::validate<FPBigEndianScalar<unsigned short>>(this, v16 + 32, 0);
      v17 = bswap32(*(unsigned __int16 *)(v16 + 32)) >> 16;
      if (v17 >= 0x102)
        v17 = 258;
      if (v17 <= a2)
        goto LABEL_38;
      v18 = v16 + 34;
      TsfntTable::validate<signed char>(this, v18, v17 - 1);
      if (a2)
        v19 = *(char *)(v18 + a2) + (_WORD)a2;
      else
        v19 = 0;
      v8 = v19;
      goto LABEL_29;
    case 6u:
      if (!a2)
        goto LABEL_41;
      TableEnd = TsfntTable::GetTableEnd(this);
      v21 = *((_QWORD *)this + 1);
      if (v21)
      {
        v21 = *(_QWORD *)(v21 + 8);
        if (v21)
          v21 += *((_QWORD *)this + 2);
      }
      if (2 * (unint64_t)(a2 + 1) + 32 > TableEnd - v21)
        goto LABEL_39;
      v22 = *(unsigned __int16 *)(TpostTable::GetPost(this) + 2 * a2 + 32);
      memset(__s1, 170, sizeof(__s1));
      if (v22 == 0xFFFF)
        goto LABEL_39;
      if (__rev16(v22) >= 0x100)
        snprintf_l(__s1, 0x10uLL, 0, "a%04x");
      else
        snprintf_l(__s1, 0x10uLL, 0, "a%02x");
      goto LABEL_40;
    default:
      goto LABEL_38;
  }
}

unint64_t TsfntTable::validate<FPBigEndianScalar<unsigned short>>(TsfntTable *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  _DWORD *exception;

  v4 = *((_QWORD *)a1 + 1);
  if (v4 && (v5 = *(_QWORD *)(v4 + 8)) != 0 && v5 + *((_QWORD *)a1 + 2) > a2
    || a2 + 2 * a3 + 2 > TsfntTable::GetTableEnd(a1))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E6176998;
    exception[2] = 4;
  }
  return a2;
}

BOOL IsValidPostName(const unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  _BOOL8 result;
  BOOL v10;

  if (!a2)
    return 1;
  v3 = a2 - 1;
  v4 = MEMORY[0x1E0C80978];
  do
  {
    v6 = *(char *)a1++;
    v5 = v6;
    if ((v6 & 0x80000000) != 0)
      v7 = __maskrune(v5, 0x800uLL);
    else
      v7 = *(_DWORD *)(v4 + 4 * v5 + 60) & 0x800;
    result = v7 != 0;
    v10 = v3-- != 0;
  }
  while (v7 && v10);
  return result;
}

unint64_t TsfntTable::validate<signed char>(TsfntTable *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  _DWORD *exception;

  v4 = *((_QWORD *)a1 + 1);
  if (v4 && (v5 = *(_QWORD *)(v4 + 8)) != 0 && v5 + *((_QWORD *)a1 + 2) > a2
    || a2 + a3 + 1 > TsfntTable::GetTableEnd(a1))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E6176998;
    exception[2] = 4;
  }
  return a2;
}

uint64_t TpostTable::VerifyGlyphName(TpostTable *this, uint64_t a2, const char *a3)
{
  unsigned int v6;
  unsigned int v7;
  uint64_t Post;
  unsigned int v9;
  unint64_t v10;
  unsigned __int16 v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t TableEnd;
  const char *v18;
  __int16 i;
  char *DefaultPostName;
  size_t v21;

  v6 = bswap32(*(_DWORD *)TpostTable::GetPost(this));
  if (v6 == 163840)
  {
    Post = TpostTable::GetPost(this);
    TsfntTable::validate<FPBigEndianScalar<unsigned short>>(this, Post + 32, 0);
    v9 = bswap32(*(unsigned __int16 *)(Post + 32)) >> 16;
    if (v9 >= 0x102)
      v9 = 258;
    if (v9 <= a2)
      return 0;
    v10 = Post + 34;
    TsfntTable::validate<signed char>(this, v10, v9 - 1);
    if ((_DWORD)a2)
      v11 = *(char *)(v10 + a2) + (_WORD)a2;
    else
      v11 = 0;
    v7 = v11;
  }
  else if (v6 == 0x20000)
  {
    v12 = TpostTable::GetPost(this);
    TsfntTable::validate<FPBigEndianScalar<unsigned short>>(this, v12 + 32, 0);
    v13 = bswap32(*(unsigned __int16 *)(v12 + 32));
    v14 = HIWORD(v13);
    if (v14 <= a2)
      return 0;
    TsfntTable::validate<FPBigEndianScalar<unsigned short>>(this, v12 + 32, HIWORD(v13));
    if ((_DWORD)a2)
    {
      v15 = v12 + 34;
      v16 = bswap32(*(unsigned __int16 *)(v12 + 34 + 2 * a2)) >> 16;
      if (v16 > 0x101)
      {
        TableEnd = TsfntTable::GetTableEnd(this);
        v18 = (const char *)(v15 + 2 * v14);
        for (i = v16 - 258; i; --i)
        {
          if ((unint64_t)v18 >= TableEnd)
            return 0;
          v18 += *(unsigned __int8 *)v18 + 1;
        }
        if ((unint64_t)v18 >= TableEnd
          || (unint64_t)&v18[*(unsigned __int8 *)v18] >= TableEnd
          || !PStringCompare(v18, a3))
        {
          return 0;
        }
        return a2;
      }
    }
    else
    {
      v16 = 0;
    }
    v7 = v16;
  }
  else
  {
    if (v6 != 0x10000 || a2 > 0x101)
      return 0;
    v7 = (unsigned __int16)a2;
  }
  DefaultPostName = GetDefaultPostName(v7);
  v21 = *DefaultPostName;
  if (strlen(a3) != v21 || strncmp(a3, DefaultPostName + 1, v21))
    return 0;
  return a2;
}

BOOL PStringCompare(const char *a1, const char *__s)
{
  size_t v4;

  v4 = *(unsigned __int8 *)a1;
  return strlen(__s) == v4 && strncmp(__s, a1 + 1, v4) == 0;
}

void *TBinarySearch::DoBinarySearch(TBinarySearch *this, __int16 a2)
{
  _WORD *v2;
  size_t v3;
  size_t v4;
  unint64_t v5;
  _QWORD v8[5];
  __int16 __key;

  __key = a2;
  v2 = *(_WORD **)this;
  if (!**(_WORD **)this)
    return 0;
  v3 = __rev16(**(unsigned __int16 **)this);
  v4 = bswap32((unsigned __int16)v2[1]) >> 16;
  v5 = (unint64_t)v2 + v4 * (unint64_t)v3 + 10;
  if (v5 < (unint64_t)(v2 + 5) || v5 > *((_QWORD *)this + 1))
    return 0;
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 0x40000000;
  v8[2] = ___ZNK13TBinarySearch14DoBinarySearchEt_block_invoke;
  v8[3] = &__block_descriptor_tmp_0;
  v8[4] = this;
  return bsearch_b(&__key, v2 + 5, v4, v3, v8);
}

uint64_t ___ZNK13TBinarySearch14DoBinarySearchEt_block_invoke(uint64_t a1, unsigned __int16 *a2, unsigned __int16 *a3)
{
  unsigned int v3;
  unsigned int v4;
  BOOL v6;
  unsigned int v7;

  v3 = *a2;
  v4 = bswap32(*a3) >> 16;
  if (v4 < v3)
    return 1;
  v6 = v3 >= bswap32(a3[1]) >> 16;
  if (v3 < v4)
    v7 = -1;
  else
    v7 = 1;
  if (v6)
    return 0;
  else
    return v7;
}

void *TBinarySingleSearch::DoBinarySearch(TBinarySingleSearch *this, __int16 a2)
{
  _WORD *v2;
  size_t v3;
  size_t v4;
  unint64_t v5;
  __int16 __key;

  __key = a2;
  v2 = *(_WORD **)this;
  if (!**(_WORD **)this)
    return 0;
  v3 = __rev16(**(unsigned __int16 **)this);
  v4 = bswap32((unsigned __int16)v2[1]) >> 16;
  v5 = (unint64_t)v2 + v4 * (unint64_t)v3 + 10;
  if (v5 < (unint64_t)(v2 + 5) || v5 > *((_QWORD *)this + 1))
    return 0;
  else
    return bsearch_b(&__key, v2 + 5, v4, v3, &__block_literal_global_0);
}

uint64_t ___ZNK19TBinarySingleSearch14DoBinarySearchEt_block_invoke(uint64_t a1, unsigned __int16 *a2, unsigned __int16 *a3)
{
  unsigned int v3;
  unsigned int v4;
  BOOL v5;
  unsigned int v6;

  v3 = *a2;
  v4 = bswap32(*a3);
  v5 = v3 == HIWORD(v4);
  if (v3 < HIWORD(v4))
    v6 = -1;
  else
    v6 = 1;
  if (v5)
    return 0;
  else
    return v6;
}

unint64_t TsfntTable::validate<sfntZapfHeader_BE>(TsfntTable *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  _DWORD *exception;

  v4 = *((_QWORD *)a1 + 1);
  if (v4 && (v5 = *(_QWORD *)(v4 + 8)) != 0 && v5 + *((_QWORD *)a1 + 2) > a2
    || a2 + 8 * a3 + 8 > TsfntTable::GetTableEnd(a1))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E6176998;
    exception[2] = 4;
  }
  return a2;
}

unint64_t TzapfTable::GetUnicharsForGlyph(TsfntTable *a1, uint64_t a2, _WORD *a3, unint64_t a4)
{
  unint64_t v5;
  unsigned __int16 *v7;
  _WORD *v8;
  unint64_t v9;
  unsigned int v10;

  if (!a2)
    return 0;
  v5 = __rev16(*(unsigned __int16 *)(a2 + 8));
  if (a3 && *(_WORD *)(a2 + 8))
  {
    v7 = (unsigned __int16 *)(a2 + 10);
    TsfntTable::validate<FPBigEndianScalar<unsigned short>>(a1, a2 + 10, v5);
    if (v5 >= a4)
      v5 = a4;
    if (v5)
    {
      v8 = a3;
      v9 = v5;
      do
      {
        v10 = *v7++;
        *v8++ = bswap32(v10) >> 16;
        --v9;
      }
      while (v9);
    }
    if ((a3[v5 - 1] & 0xFC00) == 0xD800)
      a3[--v5] = -1;
  }
  return v5;
}

uint64_t TzapfTable::LookupOffsetP(TsfntTable *a1, unsigned __int16 *a2, signed int a3)
{
  __int16 v3;
  void *v4;
  uint64_t result;
  void *v6;
  unsigned int v7;
  signed int v8;
  unsigned __int16 *v9;
  unint64_t TableEnd;

  v3 = a3;
  switch(bswap32(*a2) >> 16)
  {
    case 0u:
      result = (uint64_t)&a2[2 * a3 + 1];
      break;
    case 2u:
    case 4u:
      v9 = a2 + 1;
      TableEnd = TsfntTable::GetTableEnd(a1);
      v4 = TBinarySearch::DoBinarySearch((TBinarySearch *)&v9, v3);
      if (!v4)
        goto LABEL_10;
      result = (uint64_t)v4 + 4;
      break;
    case 6u:
      v9 = a2 + 1;
      TableEnd = TsfntTable::GetTableEnd(a1);
      v6 = TBinarySingleSearch::DoBinarySearch((TBinarySingleSearch *)&v9, v3);
      if (!v6)
        goto LABEL_10;
      result = (uint64_t)v6 + 2;
      break;
    case 8u:
      v7 = bswap32(a2[1]);
      if (a3 < (int)HIWORD(v7))
        goto LABEL_10;
      v8 = a3 - HIWORD(v7);
      if (v8 >= (int)(bswap32(a2[2]) >> 16))
        goto LABEL_10;
      result = (uint64_t)&a2[2 * v8 + 3];
      break;
    default:
LABEL_10:
      result = 0;
      break;
  }
  return result;
}

unint64_t TsfntTable::validate<LookupTable>(TsfntTable *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  _DWORD *exception;

  v4 = *((_QWORD *)a1 + 1);
  if (v4 && (v5 = *(_QWORD *)(v4 + 8)) != 0 && v5 + *((_QWORD *)a1 + 2) > a2
    || a2 + 12 * a3 + 12 > TsfntTable::GetTableEnd(a1))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E6176998;
    exception[2] = 4;
  }
  return a2;
}

unint64_t TsfntTable::validate<FPBigEndianScalar<unsigned int>>(TsfntTable *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  _DWORD *exception;

  v4 = *((_QWORD *)a1 + 1);
  if (v4 && (v5 = *(_QWORD *)(v4 + 8)) != 0 && v5 + *((_QWORD *)a1 + 2) > a2
    || a2 + 4 * a3 + 4 > TsfntTable::GetTableEnd(a1))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E6176998;
    exception[2] = 4;
  }
  return a2;
}

unint64_t TzapfTable::Map(TzapfTable *this, const unsigned __int16 *a2, unsigned __int16 *a3, unint64_t *a4)
{
  unint64_t v5;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unsigned int *GlyphInfo;
  unsigned __int16 *v14;
  int v15;
  unsigned int v16;
  int v17;
  BOOL v18;
  unsigned int v19;
  int v20;
  BOOL v21;
  unsigned __int16 *v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  uint64_t v26;

  v5 = *a4;
  if (*a4)
  {
    v9 = 0;
    v10 = *a4;
    v11 = *a4;
    while (1)
    {
      v12 = a2[v9];
      if (v12 < *((unsigned __int16 *)this + 28))
        break;
      *a3++ = -1;
LABEL_25:
      v24 = *(a3 - 1);
      if (v11 >= v9)
        v25 = v9;
      else
        v25 = v11;
      v18 = v24 == 0xFFFF;
      v26 = v24 == 0xFFFF;
      if (v18)
        v11 = v25;
      v10 -= v26;
      if (++v9 >= v5)
        goto LABEL_33;
    }
    GlyphInfo = TzapfTable::GetGlyphInfo(this, v12);
    v14 = a3;
    if (GlyphInfo)
    {
      if (**((_DWORD **)this + 8) == 512)
      {
        v14 = a3;
        if ((char)GlyphInfo[2] < 0)
        {
          v15 = *((unsigned __int8 *)GlyphInfo + 9);
          v14 = a3;
          if (*((_BYTE *)GlyphInfo + 9))
          {
            v16 = bswap32(*((unsigned __int16 *)GlyphInfo + 5)) >> 16;
            *a3 = v16;
            v17 = v16 & 0xFC00;
            v18 = v15 != 1 && v17 == 55296;
            v14 = a3;
            if (v18)
            {
              a3[1] = bswap32(*((unsigned __int16 *)GlyphInfo + 6)) >> 16;
              v14 = a3 + 1;
            }
          }
        }
      }
      else
      {
        v14 = a3;
        if (*((_WORD *)GlyphInfo + 4))
        {
          v19 = bswap32(*((unsigned __int16 *)GlyphInfo + 5)) >> 16;
          *a3 = v19;
          v20 = v19 & 0xFC00;
          v21 = bswap32(*((unsigned __int16 *)GlyphInfo + 4)) >> 16 >= 2 && v20 == 55296;
          v22 = a3;
          if (v21)
          {
            a3[1] = bswap32(*((unsigned __int16 *)GlyphInfo + 6)) >> 16;
            v22 = a3 + 1;
          }
          v23 = v22 - a3 + 1;
          goto LABEL_24;
        }
      }
    }
    *v14 = -1;
    v23 = 1;
LABEL_24:
    a3 += v23;
    v5 = *a4;
    goto LABEL_25;
  }
  v11 = 0;
  v10 = 0;
LABEL_33:
  *a4 = v10;
  return v11;
}

unint64_t TzapfTable::MapToCharacters(TzapfTable *this, unsigned int a2, unsigned __int16 *a3, unint64_t a4)
{
  unsigned int *GlyphInfo;

  if (*((unsigned __int16 *)this + 28) <= a2)
    return 0;
  GlyphInfo = TzapfTable::GetGlyphInfo(this, a2);
  return TzapfTable::GetUnicharsForGlyph(this, (uint64_t)GlyphInfo, a3, a4);
}

uint64_t Tos2Table::GetSubscriptX(Tos2Table *this)
{
  return (bswap32(*(unsigned __int16 *)(TpostTable::GetPost(this) + 10)) >> 16) | 0x7362787300000000;
}

uint64_t Tos2Table::GetSubscriptY(Tos2Table *this)
{
  return (bswap32(*(unsigned __int16 *)(TpostTable::GetPost(this) + 12)) >> 16) | 0x7362797300000000;
}

uint64_t Tos2Table::GetSuperscriptX(Tos2Table *this)
{
  return (bswap32(*(unsigned __int16 *)(TpostTable::GetPost(this) + 18)) >> 16) | 0x7370787300000000;
}

uint64_t Tos2Table::GetSuperscriptY(Tos2Table *this)
{
  return (bswap32(*(unsigned __int16 *)(TpostTable::GetPost(this) + 20)) >> 16) | 0x7370797300000000;
}

uint64_t Tos2Table::GetStrikeout(Tos2Table *this)
{
  return (bswap32(*(unsigned __int16 *)(TpostTable::GetPost(this) + 26)) >> 16) | 0x7374727300000000;
}

uint64_t TcmapTableFileData16::GetDataP(TcmapTableFileData16 *this, int a2)
{
  uint64_t v2;
  _DWORD *exception;

  v2 = *((_QWORD *)this + 3);
  if (!v2)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E6176998;
    exception[2] = 4;
  }
  return v2 + a2;
}

uint64_t TUVSTable::GetDataP(TUVSTable *this, int a2)
{
  return *((_QWORD *)this + 2) + a2;
}

uint64_t TUVSTable::GetHead(TUVSTable *this)
{
  return *((_QWORD *)this + 2);
}

uint64_t std::vector<TFontNameString>::__push_back_slow_path<TFontNameString const&>(uint64_t *a1, const TFontNameString *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v13;
  TFontNameString *v14;
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 5);
  v5 = v4 + 1;
  if (v4 + 1 > 0x2AAAAAAAAAAAAAALL)
    std::vector<char,TInlineBufferAllocator<char,1024ul>>::__throw_length_error[abi:fe180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 5);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x155555555555555)
    v9 = 0x2AAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:fe180100]<std::allocator<TFontNameString>>(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = (TFontNameString *)&v10[96 * v4];
  v16 = &v10[96 * v9];
  TFontNameString::TFontNameString(v14, a2);
  v15 = (char *)v14 + 96;
  std::vector<TFontNameString>::__swap_out_circular_buffer(a1, &v13);
  v11 = a1[1];
  std::__split_buffer<TFontNameString>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_1B09A7784(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<TFontNameString>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<TFontNameString>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:fe180100]<std::allocator<TFontNameString>,std::reverse_iterator<TFontNameString*>,std::reverse_iterator<TFontNameString*>,std::reverse_iterator<TFontNameString*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:fe180100]<std::allocator<TFontNameString>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x2AAAAAAAAAAAAABLL)
    std::__throw_bad_array_new_length[abi:fe180100]();
  return operator new(96 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:fe180100]<std::allocator<TFontNameString>,std::reverse_iterator<TFontNameString*>,std::reverse_iterator<TFontNameString*>,std::reverse_iterator<TFontNameString*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  TFontNameString *v12;

  v10 = 0;
  v11 = a7 - 96;
  while (a3 + v10 != a5)
  {
    v12 = (TFontNameString *)(v11 + v10);
    v10 -= 96;
    TFontNameString::TFontNameString(v12, (const TFontNameString *)(v10 + a3));
  }
  return a6;
}

uint64_t std::__split_buffer<TFontNameString>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  void (**v4)(void);

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    v4 = *(void (***)(void))(i - 96);
    *(_QWORD *)(a1 + 16) = i - 96;
    (*v4)();
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void `anonymous namespace'::TFormat2cmapTable::~TFormat2cmapTable(_anonymous_namespace_::TFormat2cmapTable *this)
{
  JUMPOUT(0x1B5E0CD38);
}

uint64_t `anonymous namespace'::TFormat2cmapTable::DecomposeMacCmap(_anonymous_namespace_::TFormat2cmapTable *this, unsigned __int8 *a2, int a3, unint64_t *a4, unsigned __int16 *a5, unint64_t *a6)
{
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int v13;
  __int16 *v14;
  __int16 v15;
  unsigned int v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unint64_t v23;
  unint64_t v24;
  unsigned int v25;
  char v26;
  int v28;
  unint64_t v29;
  unint64_t v30;
  unsigned int v31;
  uint64_t v32;
  unsigned __int16 *v33;
  unsigned __int8 *v34;
  char v37;
  _QWORD *v38;

  v9 = (_QWORD *)((char *)this + 8);
  v10 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), 0, 4);
  v38 = v9;
  TcmapTableDataRef::validateArray<FPBigEndianScalar<unsigned short>>(v9, v10, 256);
  v11 = 0;
  v12 = 0;
  v33 = (unsigned __int16 *)v10;
  v34 = a2;
  v29 = v10 + 518;
  v30 = v10 + 512;
  v28 = a3;
  do
  {
    if (v11)
    {
      v13 = bswap32(v33[v11]) >> 16;
      if (v13 < 8)
        goto LABEL_27;
    }
    else
    {
      v13 = bswap32(*v33) >> 16;
    }
    v32 = v13 >> 1;
    v14 = (__int16 *)(v30 + 2 * v32);
    TcmapTableDataRef::validateArray<FPBigEndianScalar<unsigned short>>(v38, (unint64_t)v14, 4);
    v15 = *v14;
    v16 = (unsigned __int16)v14[1];
    v31 = (unsigned __int16)v14[2];
    v17 = bswap32((unsigned __int16)v14[3]) >> 17;
    TcmapTableDataRef::validateArray<FPBigEndianScalar<unsigned short>>(v38, (unint64_t)&v14[v17 + 3], 1);
    if (v16)
      v18 = a3 == 0;
    else
      v18 = 1;
    if (!v18 && *a6 != 0)
    {
      v37 = HIBYTE(v15);
      v20 = 0;
      v21 = 0;
      v22 = bswap32(v31) >> 16;
      v23 = __rev16(v16);
      v24 = v29 + 2 * v32 + 2 * v17;
      while (1)
      {
        TcmapTableDataRef::validateArray<FPBigEndianScalar<unsigned short>>(v38, v24 + v20, 1);
        v25 = v22 + (bswap32(*(unsigned __int16 *)(v24 + 2 * v21)) >> 16);
        if (!(_WORD)v25)
          goto LABEL_24;
        if (a4)
          a4[v12] = a2 - v34;
        if (a5)
          a5[v12] = v25;
        --*a6;
        ++v12;
        if (!v11)
          break;
        *a2++ = v11;
        --a3;
        v26 = v37;
        if (a3)
          goto LABEL_23;
LABEL_24:
        if (++v21 < v23)
        {
          if (a3)
          {
            v20 += 2;
            if (*a6)
              continue;
          }
        }
        goto LABEL_27;
      }
      v26 = v37;
LABEL_23:
      *a2++ = v21 + v26;
      --a3;
      goto LABEL_24;
    }
LABEL_27:
    ++v11;
  }
  while (v11 != 256);
  *a6 = v12;
  return (v28 - a3);
}

unint64_t TcmapTableDataRef::validateArray<FPBigEndianScalar<unsigned short>>(_QWORD *a1, unint64_t a2, uint64_t a3)
{
  _DWORD *exception;

  if ((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 24))(*a1) > a2 || a2 + 2 * a3 > *(_QWORD *)(*a1 + 8))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E6176998;
    exception[2] = 4;
  }
  return a2;
}

void SetUVSForGlyphInMap(unsigned int *a1, CFDictionaryRef theDict, void *key, unsigned int a4, int a5, unsigned int a6)
{
  unint64_t v10;
  unint64_t v11;
  __CFArray *Value;
  CFAllocatorRef *v13;
  CFMutableArrayRef Mutable;
  _BOOL4 v15;
  const __CFAllocator *v16;
  UChar32 v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  CFIndex v21;
  CFStringRef v22;
  CFIndex Count;
  unsigned int v24;
  CFIndex v25;
  unsigned int v26;
  uint64_t v27;
  CFStringRef v28;
  int v29;
  UChar32 v30;
  UChar32 v31;
  CFStringRef ValueAtIndex;
  UniChar chars;
  int v34;
  __int16 v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  if ((_DWORD)key && HIWORD(a4) <= 0x10u && key < a6)
  {
    v10 = key;
    if (!a5 && a1[key] == -1)
    {
      a1[key] = a4;
      return;
    }
    v11 = 0xAAAAAAAAAAAAAA00;
    Value = (__CFArray *)CFDictionaryGetValue(theDict, (const void *)key);
    v13 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
    if (Value)
    {
      Mutable = Value;
    }
    else
    {
      v16 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
      CFDictionaryAddValue(theDict, (const void *)v10, Mutable);
      CFRelease(Mutable);
      v17 = a1[v10];
      if (v17 != -1)
      {
        v18 = u_charType(v17);
        v15 = v18 == 17;
        if (v18 == 17)
          v11 = 0;
        LOWORD(v34) = -21846;
        v19 = a1[v10];
        if ((v19 - 0x10000) >> 20)
        {
          v21 = 1;
          v20 = a1[v10];
        }
        else
        {
          v20 = ((v19 + 67043328) >> 10) - 10240;
          LOWORD(v34) = v19 & 0x3FF | 0xDC00;
          v21 = 2;
        }
        chars = v20;
        v22 = CFStringCreateWithCharacters(v16, &chars, v21);
        CFArrayAppendValue(Mutable, v22);
        CFRelease(v22);
LABEL_17:
        Count = CFArrayGetCount(Mutable);
        if (Count > 63)
          return;
        v35 = -21846;
        v34 = -1431655766;
        if ((a4 - 0x10000) >> 20)
        {
          v25 = 1;
          LOWORD(v24) = a4;
        }
        else
        {
          v24 = ((a4 + 67043328) >> 10) - 10240;
          LOWORD(v34) = a4 & 0x3FF | 0xDC00;
          v25 = 2;
        }
        chars = v24;
        if (a5)
        {
          if ((a5 - 0x10000) >> 20)
          {
            v27 = 1;
            LOWORD(v26) = a5;
          }
          else
          {
            v26 = ((a5 + 67043328) >> 10) - 10240;
            *(&chars + v25 + 1) = a5 & 0x3FF | 0xDC00;
            v27 = 2;
          }
          *(&chars + v25) = v26;
          v25 += v27;
        }
        v28 = CFStringCreateWithCharacters(*v13, &chars, v25);
        if (!v15)
        {
          v29 = u_charType(a4);
          if (Count < 1
            || v29 == 17
            || (ValueAtIndex = (CFStringRef)CFArrayGetValueAtIndex(Mutable, Count - 1),
                v30 = TCFStr::FirstCharacter(&ValueAtIndex),
                u_charType(v30) != 17))
          {
            CFArrayAppendValue(Mutable, v28);
            goto LABEL_36;
          }
          v11 = Count;
          while (v11 >= 2)
          {
            ValueAtIndex = (CFStringRef)CFArrayGetValueAtIndex(Mutable, v11 - 2);
            v31 = TCFStr::FirstCharacter(&ValueAtIndex);
            --v11;
            if (u_charType(v31) != 17)
              goto LABEL_27;
          }
          v11 = 0;
        }
LABEL_27:
        CFArrayInsertValueAtIndex(Mutable, v11, v28);
LABEL_36:
        CFRelease(v28);
        return;
      }
    }
    v15 = 0;
    goto LABEL_17;
  }
}

unint64_t TcmapTableDataRef::validateArray<FPBigEndianScalar<unsigned int>>(_QWORD *a1, unint64_t a2, uint64_t a3)
{
  _DWORD *exception;

  if ((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 24))(*a1) > a2 || a2 + 4 * a3 > *(_QWORD *)(*a1 + 8))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E6176998;
    exception[2] = 4;
  }
  return a2;
}

uint64_t TcmapTableDataRef::RangeSizePerTuple(TcmapTableDataRef *this, unsigned int a2, unsigned int a3, unsigned int a4)
{
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  _DWORD *exception;

  if (this < a2)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E6176998;
    exception[2] = 4;
  }
  v4 = (_DWORD)this - a2 + a3;
  if (v4 + 1 < a4)
    v5 = v4 + 1;
  else
    v5 = a4;
  v6 = v5 - a3;
  if (a3 < a4)
    return v6;
  else
    return 0;
}

uint64_t TcmapTableDataRef::RangeSizePerFormat13Tuple(TcmapTableDataRef *this, unsigned int a2, unsigned int a3, unsigned int a4)
{
  _DWORD *exception;

  if (this < a2)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E6176998;
    exception[2] = 4;
  }
  if (a3 < a4)
    return this - a2 + 1;
  else
    return 0;
}

uint64_t `anonymous namespace'::TFormat4UTF16cmapTable::MapT<false,unsigned short>(_DWORD *a1, uint64_t a2, _WORD *a3, unsigned int *a4, int a5)
{
  int v7;
  unsigned __int16 *v11;
  unsigned int v12;
  unint64_t v13;
  unsigned __int16 *v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unint64_t v20;
  uint64_t v21;
  unsigned __int16 v22;
  unsigned __int16 *v23;
  unsigned int v24;
  unint64_t v25;
  unint64_t v26;
  unsigned __int16 *v27;
  unsigned __int16 *v28;
  unsigned __int16 *v29;
  unsigned int v30;
  BOOL v31;
  unsigned __int16 *v32;
  unsigned int v33;
  unsigned __int16 *v34;
  unsigned int v35;
  unsigned __int16 *v36;
  unsigned __int16 *v37;
  unsigned int v39;
  unsigned int v41;
  int v42;
  _DWORD *exception;

  v7 = *a4;
  a1[4] = *a4;
  a1[5] = v7;
  if (!*a4)
  {
LABEL_47:
    v17 = a1[5];
    goto LABEL_48;
  }
  v11 = (unsigned __int16 *)(*(uint64_t (**)(void))(**(_QWORD **)a1 + 16))();
  TcmapTableDataRef::validateArray<FPBigEndianScalar<unsigned short>>(a1, (unint64_t)v11, 1);
  v12 = bswap32(*v11) >> 16;
  if ((v12 & 1) != 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E6176998;
    exception[2] = 4;
  }
  v13 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  v14 = v11 + 4;
  if (v12 < 0x10)
  {
    LODWORD(v16) = 0;
    v18 = 0;
    v19 = 0;
    goto LABEL_8;
  }
  v15 = __clz(v12);
  v16 = (1 << (v15 ^ 0x1F));
  if ((unint64_t)v14 + v16 + 2 <= v13)
  {
    v18 = 30 - v15;
    v19 = bswap32(*(unsigned __int16 *)((char *)v14 + v16)) >> 16;
    v11 = (unsigned __int16 *)((char *)v14 + v12 - v16);
LABEL_8:
    if (*a4)
    {
      v20 = 0;
      v21 = v12 >> 1;
      do
      {
        v22 = *(_WORD *)(a2 + 2 * v20);
        do
        {
          v23 = v14;
          if (v12 >= 0x10)
          {
            if (v19 <= v22)
              v23 = v11;
            else
              v23 = v14;
            if ((unint64_t)v23 + v16 > v13)
              goto LABEL_5;
            if (v18 >= 4)
            {
              v24 = v18;
              LODWORD(v25) = v16;
              do
              {
                v26 = v25;
                v25 = (unint64_t)v25 >> 1;
                v27 = (unsigned __int16 *)((char *)v23 + (v26 >> 1));
                if (v22 > bswap32(*v27) >> 16)
                  v23 = v27;
                --v24;
              }
              while (v24 > 3);
            }
          }
          if ((unint64_t)(v23 + 1) <= v13)
          {
            do
            {
              v28 = v23 + 1;
              v30 = *v23;
              v29 = v23 + 2;
              v31 = v22 <= bswap32(v30) >> 16 || (unint64_t)v29 > v13;
              v23 = v28;
            }
            while (!v31);
            v23 = v28;
          }
          v32 = &v23[v21];
          if ((unint64_t)&v32[(v12 & 0xFFFE) + 1] <= v13)
          {
            v33 = bswap32(*v32) >> 16;
            if (v33 <= v22)
            {
              v34 = &v32[v21];
              v35 = bswap32(*v34) >> 16;
              v36 = &v34[v21];
              if (*v36)
              {
                v37 = (unsigned __int16 *)((char *)&v36[(unsigned __int16)(v22 - v33)] + __rev16(*v36));
                if (v37 > v14 && (unint64_t)(v37 + 1) <= v13)
                {
                  v39 = *v37;
                  v35 += bswap32(v39) >> 16;
                  if (v39 && (unsigned __int16)v35 != 0)
                  {
LABEL_45:
                    *a3 = v35;
                    goto LABEL_46;
                  }
                }
              }
              else
              {
                LOWORD(v35) = v35 + v22;
                if ((_WORD)v35)
                  goto LABEL_45;
              }
            }
          }
          if (!a5)
            break;
          v41 = v22;
          v22 -= 4096;
        }
        while (v41 < 0x100);
        *a3 = 0;
        v42 = a1[4];
        --a1[5];
        if (v42 > (unsigned __int16)v20)
          a1[4] = (unsigned __int16)v20;
LABEL_46:
        ++a3;
        ++v20;
      }
      while (v20 < *a4);
    }
    goto LABEL_47;
  }
LABEL_5:
  v17 = 0;
  *((_QWORD *)a1 + 2) = 0;
LABEL_48:
  *a4 = v17;
  return a1[4];
}

void TMetricsTableContext::TMetricsTableContext(TMetricsTableContext *this, const ThmtxTable *a2)
{
  uint64_t Hhea;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *exception;

  *(_QWORD *)this = a2;
  Hhea = ThmtxTable::GetHhea(a2);
  if (Hhea)
    v5 = bswap32(*(unsigned __int16 *)(Hhea + 34)) >> 16;
  else
    v5 = 0;
  *((_DWORD *)this + 2) = v5;
  ThmtxTable::GetHmtxTableData(a2);
  v6 = *((_QWORD *)this + 3);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 8)) == 0)
  {
    *((_QWORD *)this + 6) = 0;
LABEL_9:
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E6176998;
    exception[2] = 4;
  }
  *((_QWORD *)this + 6) = v7 + *((_QWORD *)this + 4);
  if (!*((_DWORD *)this + 2))
    goto LABEL_9;
}

void sub_1B09A83BC(_Unwind_Exception *a1)
{
  TDataReference *v1;

  TDataReference::~TDataReference(v1);
  _Unwind_Resume(a1);
}

uint64_t ThmtxTable::GetHmtxTableData(ThmtxTable *this)
{
  uint64_t v1;
  _DWORD *exception;

  v1 = *((unsigned int *)this + 16);
  if ((_DWORD)v1 == -1)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E6176998;
    exception[2] = 4;
  }
  return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)this + 4) + 48))(*((_QWORD *)this + 4), v1, *((_QWORD *)this + 9));
}

uint64_t TMVARTable::GetDeltaSetIndexForTag(unsigned int)const::$_0::__invoke(unsigned int *a1, unsigned int *a2)
{
  unsigned int v2;

  v2 = bswap32(*a2);
  if (*a1 < v2)
    return 0xFFFFFFFFLL;
  else
    return *a1 > v2;
}

void TCFCharacterSet::~TCFCharacterSet(const void **this)
{
  const void *v1;

  v1 = *this;
  if (v1)
    CFRelease(v1);
}

void std::__function::__func<TnameTable::FindName(unsigned short,unsigned short,unsigned short,unsigned short)::$_0,std::allocator<TnameTable::FindName(unsigned short,unsigned short,unsigned short,unsigned short)::$_0>,void ()(sfntNameRecord_BE const&,int,unsigned long,BOOL *)>::~__func()
{
  JUMPOUT(0x1B5E0CD38);
}

__n128 std::__function::__func<TnameTable::FindName(unsigned short,unsigned short,unsigned short,unsigned short)::$_0,std::allocator<TnameTable::FindName(unsigned short,unsigned short,unsigned short,unsigned short)::$_0>,void ()(sfntNameRecord_BE const&,int,unsigned long,BOOL *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E61B4C30;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<TnameTable::FindName(unsigned short,unsigned short,unsigned short,unsigned short)::$_0,std::allocator<TnameTable::FindName(unsigned short,unsigned short,unsigned short,unsigned short)::$_0>,void ()(sfntNameRecord_BE const&,int,unsigned long,BOOL *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E61B4C30;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<TnameTable::FindName(unsigned short,unsigned short,unsigned short,unsigned short)::$_0,std::allocator<TnameTable::FindName(unsigned short,unsigned short,unsigned short,unsigned short)::$_0>,void ()(sfntNameRecord_BE const&,int,unsigned long,BOOL *)>::operator()(uint64_t a1, unsigned __int16 *a2, int *a3, uint64_t *a4, _BYTE **a5)
{
  int v5;
  int v8;
  uint64_t v9;
  _BYTE *v10;
  _QWORD *v11;
  int v12;
  int v13;
  int v14;
  __int128 v15;
  _QWORD v16[4];
  _OWORD v17[6];

  v5 = *(unsigned __int16 *)(a1 + 24);
  if (v5 == bswap32(a2[3]) >> 16)
  {
    v8 = *a3;
    v9 = *a4;
    v10 = *a5;
    v11 = *(_QWORD **)(a1 + 8);
    v12 = *(unsigned __int16 *)(a1 + 26);
    if (v12 == 0xFFFF || v12 == bswap32(*a2) >> 16)
    {
      v13 = *(unsigned __int16 *)(a1 + 28);
      if (v13 == 0xFFFF || v13 == bswap32(a2[1]) >> 16)
      {
        v14 = *(unsigned __int16 *)(a1 + 30);
        if (v14 == 0xFFFF || v14 == bswap32(a2[2]) >> 16)
        {
          *(_QWORD *)&v15 = 0xAAAAAAAAAAAAAAAALL;
          *((_QWORD *)&v15 + 1) = 0xAAAAAAAAAAAAAAAALL;
          v17[4] = v15;
          v17[5] = v15;
          v17[2] = v15;
          v17[3] = v15;
          v17[0] = v15;
          v17[1] = v15;
          TDataReference::TDataReference(v16, v11, v8, 0, 0);
          TFontNameString::TFontNameString((TFontNameString *)v17, v5, (const TDataReference *)v16, v9, bswap32(*a2) >> 16, bswap32(a2[1]) >> 16, bswap32(a2[2]) >> 16);
          v16[0] = &off_1E6176770;
          TDataReference::DucRefCount((TDataReference *)v16);
          if (TFontNameString::IsValid((TFontNameString *)v17))
          {
            TFontNameString::operator=(*(_QWORD *)(a1 + 16), (uint64_t)v17);
            *v10 = 1;
          }
          TFontNameString::~TFontNameString((TFontNameString *)v17);
        }
      }
    }
  }
}

void sub_1B09A8654(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  TDataReference::~TDataReference((TDataReference *)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<TnameTable::FindName(unsigned short,unsigned short,unsigned short,unsigned short)::$_0,std::allocator<TnameTable::FindName(unsigned short,unsigned short,unsigned short,unsigned short)::$_0>,void ()(sfntNameRecord_BE const&,int,unsigned long,BOOL *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<TnameTable::FindName(unsigned short,unsigned short,unsigned short,unsigned short)::$_0,std::allocator<TnameTable::FindName(unsigned short,unsigned short,unsigned short,unsigned short)::$_0>,void ()(sfntNameRecord_BE const&,int,unsigned long,BOOL *)>::target_type()
{
}

void std::__function::__func<TnameTable::FindPostscriptName(unsigned short const*,unsigned long,char const*)::$_0,std::allocator<TnameTable::FindPostscriptName(unsigned short const*,unsigned long,char const*)::$_0>,void ()(sfntNameRecord_BE const&,int,unsigned long,BOOL *)>::~__func()
{
  JUMPOUT(0x1B5E0CD38);
}

__n128 std::__function::__func<TnameTable::FindPostscriptName(unsigned short const*,unsigned long,char const*)::$_0,std::allocator<TnameTable::FindPostscriptName(unsigned short const*,unsigned long,char const*)::$_0>,void ()(sfntNameRecord_BE const&,int,unsigned long,BOOL *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_1E61B4CC0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 std::__function::__func<TnameTable::FindPostscriptName(unsigned short const*,unsigned long,char const*)::$_0,std::allocator<TnameTable::FindPostscriptName(unsigned short const*,unsigned long,char const*)::$_0>,void ()(sfntNameRecord_BE const&,int,unsigned long,BOOL *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_1E61B4CC0;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<TnameTable::FindPostscriptName(unsigned short const*,unsigned long,char const*)::$_0,std::allocator<TnameTable::FindPostscriptName(unsigned short const*,unsigned long,char const*)::$_0>,void ()(sfntNameRecord_BE const&,int,unsigned long,BOOL *)>::operator()(uint64_t a1, unsigned __int16 *a2, int *a3, uint64_t *a4, _BYTE **a5)
{
  unsigned __int16 *v5;
  unsigned __int16 *v6;
  int v9;
  uint64_t v10;
  _BYTE *v11;
  _QWORD *v12;
  unsigned int v13;
  unint64_t v14;
  unint64_t v15;
  unsigned __int16 *v16;
  unsigned __int16 *v17;
  unsigned int v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  _OWORD v22[6];
  _OWORD v23[4];
  void *v24;
  char *__s2;
  uint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v5 = *(unsigned __int16 **)(a1 + 24);
  v6 = *(unsigned __int16 **)(a1 + 32);
  if (v6 != v5)
  {
    v9 = *a3;
    v10 = *a4;
    v11 = *a5;
    v12 = *(_QWORD **)(a1 + 8);
    v13 = bswap32(a2[3]) >> 16;
    v14 = v6 - v5;
    do
    {
      v15 = v14 >> 1;
      v16 = &v5[v14 >> 1];
      v18 = *v16;
      v17 = v16 + 1;
      v14 += ~(v14 >> 1);
      if (v18 >= v13)
        v14 = v15;
      else
        v5 = v17;
    }
    while (v14);
    if (v5 != v6 && *v5 == v13)
    {
      *(_QWORD *)&v19 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v19 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v22[4] = v19;
      v22[5] = v19;
      v22[2] = v19;
      v22[3] = v19;
      v22[0] = v19;
      v22[1] = v19;
      TDataReference::TDataReference(v23, v12, v9, 0, 0);
      TFontNameString::TFontNameString((TFontNameString *)v22, v13, (const TDataReference *)v23, v10, bswap32(*a2) >> 16, bswap32(a2[1]) >> 16, bswap32(a2[2]) >> 16);
      *(_QWORD *)&v23[0] = &off_1E6176770;
      TDataReference::DucRefCount((TDataReference *)v23);
      if (TFontNameString::IsValid((TFontNameString *)v22))
      {
        *(_QWORD *)&v20 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v20 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v23[2] = v20;
        v23[3] = v20;
        v23[0] = v20;
        v23[1] = v20;
        v24 = 0;
        __s2 = (char *)v23;
        v26 = 0;
        TPostScriptNameString::operator=((uint64_t)v23, (TFontNameString *)v22);
        if (!strcmp(*(const char **)(a1 + 40), __s2))
        {
          v21 = *(_QWORD *)(a1 + 16);
          *(_WORD *)v21 = v13;
          *(_BYTE *)(v21 + 2) = 1;
          *v11 = 1;
        }
        free(v24);
      }
      TFontNameString::~TFontNameString((TFontNameString *)v22);
    }
  }
}

void sub_1B09A88F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  TFontNameString::~TFontNameString((TFontNameString *)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<TnameTable::FindPostscriptName(unsigned short const*,unsigned long,char const*)::$_0,std::allocator<TnameTable::FindPostscriptName(unsigned short const*,unsigned long,char const*)::$_0>,void ()(sfntNameRecord_BE const&,int,unsigned long,BOOL *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<TnameTable::FindPostscriptName(unsigned short const*,unsigned long,char const*)::$_0,std::allocator<TnameTable::FindPostscriptName(unsigned short const*,unsigned long,char const*)::$_0>,void ()(sfntNameRecord_BE const&,int,unsigned long,BOOL *)>::target_type()
{
}

void std::__function::__func<TnameTable::GetName(unsigned short,unsigned short,unsigned short,unsigned short)::$_0,std::allocator<TnameTable::GetName(unsigned short,unsigned short,unsigned short,unsigned short)::$_0>,void ()(sfntNameRecord_BE const&,int,unsigned long,BOOL *)>::~__func()
{
  JUMPOUT(0x1B5E0CD38);
}

__n128 std::__function::__func<TnameTable::GetName(unsigned short,unsigned short,unsigned short,unsigned short)::$_0,std::allocator<TnameTable::GetName(unsigned short,unsigned short,unsigned short,unsigned short)::$_0>,void ()(sfntNameRecord_BE const&,int,unsigned long,BOOL *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E61B4D40;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<TnameTable::GetName(unsigned short,unsigned short,unsigned short,unsigned short)::$_0,std::allocator<TnameTable::GetName(unsigned short,unsigned short,unsigned short,unsigned short)::$_0>,void ()(sfntNameRecord_BE const&,int,unsigned long,BOOL *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E61B4D40;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<TnameTable::GetName(unsigned short,unsigned short,unsigned short,unsigned short)::$_0,std::allocator<TnameTable::GetName(unsigned short,unsigned short,unsigned short,unsigned short)::$_0>,void ()(sfntNameRecord_BE const&,int,unsigned long,BOOL *)>::operator()(uint64_t a1, unsigned __int16 *a2, int *a3, uint64_t *a4, _BYTE **a5)
{
  unsigned int v5;
  int v7;
  uint64_t v8;
  _BYTE *v9;
  _QWORD *v10;
  unsigned int v11;
  unsigned int v12;
  __int16 v13;
  int v14;
  __int128 v15;
  _QWORD v16[4];
  _OWORD v17[6];

  v5 = bswap32(a2[3]) >> 16;
  if (v5 != *(unsigned __int16 *)(a1 + 24))
    return;
  v7 = *a3;
  v8 = *a4;
  v9 = *a5;
  v10 = *(_QWORD **)(a1 + 8);
  v11 = *a2;
  v12 = a2[1];
  v13 = __rev16(a2[2]);
  if (v11 != 256)
  {
    if (v11 == 768 && v12 == 256 && v13 == 9)
      goto LABEL_8;
LABEL_9:
    if (TFontNameString::IsValid(*(TFontNameString **)(a1 + 16)))
      return;
    v14 = 0;
    goto LABEL_11;
  }
  if (a2[2])
    goto LABEL_9;
LABEL_8:
  v14 = 1;
LABEL_11:
  *(_QWORD *)&v15 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v15 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v17[4] = v15;
  v17[5] = v15;
  v17[2] = v15;
  v17[3] = v15;
  v17[0] = v15;
  v17[1] = v15;
  TDataReference::TDataReference(v16, v10, v7, 0, 0);
  TFontNameString::TFontNameString((TFontNameString *)v17, v5, (const TDataReference *)v16, v8, __rev16(v11), __rev16(v12), v13);
  v16[0] = &off_1E6176770;
  TDataReference::DucRefCount((TDataReference *)v16);
  if (TFontNameString::IsValid((TFontNameString *)v17))
  {
    TFontNameString::operator=(*(_QWORD *)(a1 + 16), (uint64_t)v17);
    if (v14)
      *v9 = 1;
  }
  TFontNameString::~TFontNameString((TFontNameString *)v17);
}

void sub_1B09A8B50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  TDataReference::~TDataReference((TDataReference *)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<TnameTable::GetName(unsigned short,unsigned short,unsigned short,unsigned short)::$_0,std::allocator<TnameTable::GetName(unsigned short,unsigned short,unsigned short,unsigned short)::$_0>,void ()(sfntNameRecord_BE const&,int,unsigned long,BOOL *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<TnameTable::GetName(unsigned short,unsigned short,unsigned short,unsigned short)::$_0,std::allocator<TnameTable::GetName(unsigned short,unsigned short,unsigned short,unsigned short)::$_0>,void ()(sfntNameRecord_BE const&,int,unsigned long,BOOL *)>::target_type()
{
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned short,TFontNameString>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,TFontNameString>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,TFontNameString>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,TFontNameString>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<unsigned short,TFontNameString>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,TFontNameString>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,TFontNameString>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,TFontNameString>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<unsigned short,TFontNameString>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,TFontNameString>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,TFontNameString>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,TFontNameString>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      TFontNameString::~TFontNameString((TFontNameString *)(v2 + 3));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void std::__hash_table<std::__hash_value_type<unsigned short,TFontNameString>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,TFontNameString>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,TFontNameString>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,TFontNameString>>>::__rehash<true>(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  uint64_t v7;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(_QWORD *)&v4)
    goto LABEL_16;
  if (prime < *(_QWORD *)&v4)
  {
    v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      v5 = std::__next_prime(v5);
    }
    else
    {
      v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2)
        v5 = v7;
    }
    if (prime <= v5)
      prime = v5;
    if (prime < *(_QWORD *)&v4)
LABEL_16:
      std::__hash_table<std::__hash_value_type<unsigned short,TFontNameString>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,TFontNameString>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,TFontNameString>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,TFontNameString>>>::__do_rehash<true>(a1, prime);
  }
}

void std::__hash_table<std::__hash_value_type<unsigned short,TFontNameString>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,TFontNameString>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,TFontNameString>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,TFontNameString>>>::__do_rehash<true>(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint8x8_t v9;
  void *v10;
  _QWORD *v11;
  unint64_t v12;

  if (a2)
  {
    if (a2 >> 61)
      std::__throw_bad_array_new_length[abi:fe180100]();
    v4 = operator new(8 * a2);
    v5 = *(void **)a1;
    *(_QWORD *)a1 = v4;
    if (v5)
      operator delete(v5);
    v6 = 0;
    *(_QWORD *)(a1 + 8) = a2;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    v7 = *(_QWORD **)(a1 + 16);
    if (v7)
    {
      v8 = v7[1];
      v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2)
          v8 %= a2;
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v8) = a1 + 16;
      v11 = (_QWORD *)*v7;
      if (*v7)
      {
        do
        {
          v12 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= a2)
              v12 %= a2;
          }
          else
          {
            v12 &= a2 - 1;
          }
          if (v12 != v8)
          {
            if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v12))
            {
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v12) = v7;
              goto LABEL_24;
            }
            *v7 = *v11;
            *v11 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v12);
            **(_QWORD **)(*(_QWORD *)a1 + 8 * v12) = v11;
            v11 = v7;
          }
          v12 = v8;
LABEL_24:
          v7 = v11;
          v11 = (_QWORD *)*v11;
          v8 = v12;
        }
        while (v11);
      }
    }
  }
  else
  {
    v10 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v10)
      operator delete(v10);
    *(_QWORD *)(a1 + 8) = 0;
  }
}

void std::__function::__func<TnameTable::GetNames(unsigned short const*,unsigned long)::$_0,std::allocator<TnameTable::GetNames(unsigned short const*,unsigned long)::$_0>,void ()(sfntNameRecord_BE const&,int,unsigned long,BOOL *)>::~__func()
{
  JUMPOUT(0x1B5E0CD38);
}

__n128 std::__function::__func<TnameTable::GetNames(unsigned short const*,unsigned long)::$_0,std::allocator<TnameTable::GetNames(unsigned short const*,unsigned long)::$_0>,void ()(sfntNameRecord_BE const&,int,unsigned long,BOOL *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_1E61B4DC0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 std::__function::__func<TnameTable::GetNames(unsigned short const*,unsigned long)::$_0,std::allocator<TnameTable::GetNames(unsigned short const*,unsigned long)::$_0>,void ()(sfntNameRecord_BE const&,int,unsigned long,BOOL *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_1E61B4DC0;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<TnameTable::GetNames(unsigned short const*,unsigned long)::$_0,std::allocator<TnameTable::GetNames(unsigned short const*,unsigned long)::$_0>,void ()(sfntNameRecord_BE const&,int,unsigned long,BOOL *)>::operator()(_QWORD *a1, unsigned __int16 *a2, int *a3, uint64_t *a4)
{
  int v5;
  uint64_t v6;
  _QWORD *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned __int16 *v10;
  unsigned __int16 *v11;
  unint64_t v13;
  unint64_t v14;
  unsigned __int16 *v15;
  unsigned __int16 *v16;
  unsigned int v17;
  __int128 v18;
  uint64_t *v19;
  _QWORD v20[4];
  _OWORD v21[4];
  __int128 v22;
  __int128 v23;
  __int16 v24;

  v5 = *a3;
  v6 = *a4;
  v7 = (_QWORD *)a1[1];
  v8 = bswap32(a2[3]);
  v9 = HIWORD(v8);
  v24 = HIWORD(v8);
  v10 = (unsigned __int16 *)a1[4];
  v11 = (unsigned __int16 *)a1[5];
  if (v11 != v10)
  {
    v13 = v11 - v10;
    do
    {
      v14 = v13 >> 1;
      v15 = &v10[v13 >> 1];
      v17 = *v15;
      v16 = v15 + 1;
      v13 += ~(v13 >> 1);
      if (v17 >= v9)
        v13 = v14;
      else
        v10 = v16;
    }
    while (v13);
    if (v10 != v11 && *v10 == v9)
    {
      *(_QWORD *)&v18 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v18 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v22 = v18;
      v23 = v18;
      v21[2] = v18;
      v21[3] = v18;
      v21[0] = v18;
      v21[1] = v18;
      TDataReference::TDataReference(v20, v7, v5, 0, 0);
      TFontNameString::TFontNameString((TFontNameString *)v21, v9, (const TDataReference *)v20, v6, bswap32(*a2) >> 16, bswap32(a2[1]) >> 16, bswap32(a2[2]) >> 16);
      v20[0] = &off_1E6176770;
      TDataReference::DucRefCount((TDataReference *)v20);
      if (!TFontNameString::IsValid((TFontNameString *)v21))
      {
LABEL_19:
        TFontNameString::~TFontNameString((TFontNameString *)v21);
        return;
      }
      if (WORD2(v22) == 1)
      {
        if (!WORD4(v22))
        {
LABEL_16:
          v19 = a1 + 2;
LABEL_18:
          std::__hash_table<std::__hash_value_type<unsigned short,TFontNameString>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,TFontNameString>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,TFontNameString>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,TFontNameString>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<TFontNameString&>>(*v19, v9, &v24, (const TFontNameString *)v21);
          goto LABEL_19;
        }
      }
      else if (BYTE8(v22) == 9 && WORD2(v22) == 3 && WORD3(v22) == 1)
      {
        goto LABEL_16;
      }
      v19 = a1 + 3;
      goto LABEL_18;
    }
  }
}

void sub_1B09A906C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  TDataReference::~TDataReference((TDataReference *)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<TnameTable::GetNames(unsigned short const*,unsigned long)::$_0,std::allocator<TnameTable::GetNames(unsigned short const*,unsigned long)::$_0>,void ()(sfntNameRecord_BE const&,int,unsigned long,BOOL *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<TnameTable::GetNames(unsigned short const*,unsigned long)::$_0,std::allocator<TnameTable::GetNames(unsigned short const*,unsigned long)::$_0>,void ()(sfntNameRecord_BE const&,int,unsigned long,BOOL *)>::target_type()
{
}

void std::__hash_table<std::__hash_value_type<unsigned short,TFontNameString>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,TFontNameString>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,TFontNameString>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,TFontNameString>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<TFontNameString&>>(uint64_t a1, unsigned __int16 a2, _WORD *a3, const TFontNameString *a4)
{
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  uint64_t ***v11;
  uint64_t **i;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  uint64_t v24[2];
  unint64_t v25;

  v7 = a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v10 = a2;
      if (v8 <= a2)
        v10 = a2 % v8;
    }
    else
    {
      v10 = ((_DWORD)v8 - 1) & a2;
    }
    v11 = *(uint64_t ****)(*(_QWORD *)a1 + 8 * v10);
    if (v11)
    {
      for (i = *v11; i; i = (uint64_t **)*i)
      {
        v13 = (unint64_t)i[1];
        if (v13 == a2)
        {
          if (*((unsigned __int16 *)i + 8) == a2)
            return;
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v13 >= v8)
              v13 %= v8;
          }
          else
          {
            v13 &= v8 - 1;
          }
          if (v13 != v10)
            break;
        }
      }
    }
  }
  else
  {
    v10 = 0xAAAAAAAAAAAAAAAALL;
  }
  v14 = a1 + 16;
  v25 = 0xAAAAAAAAAAAAAA00;
  v15 = operator new(0x78uLL);
  v24[0] = (uint64_t)v15;
  v24[1] = a1 + 16;
  *v15 = 0;
  v15[1] = v7;
  *((_WORD *)v15 + 8) = *a3;
  TFontNameString::TFontNameString((TFontNameString *)(v15 + 3), a4);
  LOBYTE(v25) = 1;
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v8 || (float)(v17 * (float)v8) < v16)
  {
    v18 = 1;
    if (v8 >= 3)
      v18 = (v8 & (v8 - 1)) != 0;
    v19 = v18 | (2 * v8);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    std::__hash_table<std::__hash_value_type<unsigned short,TFontNameString>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,TFontNameString>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,TFontNameString>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,TFontNameString>>>::__rehash<true>(a1, v21);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v10 = v7 % v8;
      else
        v10 = v7;
    }
    else
    {
      v10 = ((_DWORD)v8 - 1) & v7;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v10);
  if (v22)
  {
    *(_QWORD *)v24[0] = *v22;
    *v22 = v24[0];
  }
  else
  {
    *(_QWORD *)v24[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v24[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v10) = v14;
    if (*(_QWORD *)v24[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v24[0] + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v23 >= v8)
          v23 %= v8;
      }
      else
      {
        v23 &= v8 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v24[0];
    }
  }
  v24[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned short,TFontNameString>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned short,TFontNameString>,void *>>>>::reset[abi:fe180100](v24, 0);
}

void sub_1B09A932C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned short,TFontNameString>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned short,TFontNameString>,void *>>>>::reset[abi:fe180100]((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned short,TFontNameString>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned short,TFontNameString>,void *>>>>::reset[abi:fe180100](uint64_t *a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = a2;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
      TFontNameString::~TFontNameString((TFontNameString *)(v2 + 24));
    operator delete((void *)v2);
  }
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned short,TFontNameString>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,TFontNameString>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,TFontNameString>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,TFontNameString>>>::__node_handle_merge_unique[abi:fe180100]<std::__hash_table<std::__hash_value_type<unsigned short,TFontNameString>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,TFontNameString>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,TFontNameString>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,TFontNameString>>>>(_QWORD *result, _QWORD *a2)
{
  unsigned __int16 *v2;
  _QWORD *v4;
  unint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7[3];

  v2 = (unsigned __int16 *)a2[2];
  if (v2)
  {
    v4 = result;
    do
    {
      v5 = v2[8];
      result = std::__hash_table<std::__hash_value_type<unsigned short,TFontNameString>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,TFontNameString>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,TFontNameString>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,TFontNameString>>>::__node_insert_unique_prepare[abi:fe180100]((uint64_t)v4, v5, v2 + 8);
      v6 = *(unsigned __int16 **)v2;
      if (!result)
      {
        std::__hash_table<std::__hash_value_type<unsigned short,TFontNameString>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,TFontNameString>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,TFontNameString>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,TFontNameString>>>::remove(a2, v2, (uint64_t)v7);
        v7[0] = 0;
        std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned short,TFontNameString>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned short,TFontNameString>,void *>>>>::reset[abi:fe180100](v7, 0);
        *((_QWORD *)v2 + 1) = v5;
        result = std::__hash_table<std::__hash_value_type<unsigned short,TFontNameString>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,TFontNameString>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,TFontNameString>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,TFontNameString>>>::__node_insert_unique_perform[abi:fe180100](v4, v2);
      }
      v2 = v6;
    }
    while (v6);
  }
  return result;
}

uint64_t **std::__hash_table<std::__hash_value_type<unsigned short,TFontNameString>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,TFontNameString>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,TFontNameString>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,TFontNameString>>>::__node_insert_unique_prepare[abi:fe180100](uint64_t a1, unint64_t a2, unsigned __int16 *a3)
{
  unint64_t v3;
  uint8x8_t v4;
  uint64_t v5;
  uint64_t ***v6;
  uint64_t **i;
  unint64_t v8;
  float v9;
  float v10;
  uint64_t v11;
  _BOOL8 v12;
  size_t v13;
  unint64_t v14;
  size_t v15;

  v3 = *(_QWORD *)(a1 + 8);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8((int8x8_t)v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
      v5 = v3 <= a2 ? a2 % v3 : a2;
    else
      v5 = (v3 - 1) & a2;
    v6 = *(uint64_t ****)(*(_QWORD *)a1 + 8 * v5);
    if (v6)
    {
      for (i = *v6; i; i = (uint64_t **)*i)
      {
        v8 = (unint64_t)i[1];
        if (v8 == a2)
        {
          if (*((unsigned __int16 *)i + 8) == *a3)
            return i;
        }
        else
        {
          if (v4.u32[0] > 1uLL)
          {
            if (v8 >= v3)
              v8 %= v3;
          }
          else
          {
            v8 &= v3 - 1;
          }
          if (v8 != v5)
            break;
        }
      }
    }
  }
  v9 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v10 = *(float *)(a1 + 32);
  if (!v3 || (float)(v10 * (float)v3) < v9)
  {
    v11 = 2 * v3;
    v12 = v3 < 3 || (v3 & (v3 - 1)) != 0;
    v13 = v12 | v11;
    v14 = vcvtps_u32_f32(v9 / v10);
    if (v13 <= v14)
      v15 = v14;
    else
      v15 = v13;
    std::__hash_table<std::__hash_value_type<unsigned short,TFontNameString>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,TFontNameString>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,TFontNameString>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,TFontNameString>>>::__rehash<true>(a1, v15);
  }
  return 0;
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned short,TFontNameString>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,TFontNameString>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,TFontNameString>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,TFontNameString>>>::remove@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  int8x8_t v3;
  unint64_t v4;
  uint8x8_t v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v3 = (int8x8_t)result[1];
  v4 = a2[1];
  v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(_QWORD *)&v3)
      v4 %= *(_QWORD *)&v3;
  }
  else
  {
    v4 &= *(_QWORD *)&v3 - 1;
  }
  v6 = *(_QWORD **)(*result + 8 * v4);
  do
  {
    v7 = v6;
    v6 = (_QWORD *)*v6;
  }
  while (v6 != a2);
  if (v7 == result + 2)
    goto LABEL_18;
  v8 = v7[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v8 >= *(_QWORD *)&v3)
      v8 %= *(_QWORD *)&v3;
  }
  else
  {
    v8 &= *(_QWORD *)&v3 - 1;
  }
  if (v8 != v4)
  {
LABEL_18:
    if (!*a2)
      goto LABEL_19;
    v9 = *(_QWORD *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= *(_QWORD *)&v3)
        v9 %= *(_QWORD *)&v3;
    }
    else
    {
      v9 &= *(_QWORD *)&v3 - 1;
    }
    if (v9 != v4)
LABEL_19:
      *(_QWORD *)(*result + 8 * v4) = 0;
  }
  v10 = *a2;
  if (*a2)
  {
    v11 = *(_QWORD *)(v10 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v11 >= *(_QWORD *)&v3)
        v11 %= *(_QWORD *)&v3;
    }
    else
    {
      v11 &= *(_QWORD *)&v3 - 1;
    }
    if (v11 != v4)
    {
      *(_QWORD *)(*result + 8 * v11) = v7;
      v10 = *a2;
    }
  }
  *v7 = v10;
  *a2 = 0;
  --result[3];
  *(_QWORD *)a3 = a2;
  *(_QWORD *)(a3 + 8) = result + 2;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned short,TFontNameString>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,TFontNameString>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,TFontNameString>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,TFontNameString>>>::__node_insert_unique_perform[abi:fe180100](_QWORD *result, _QWORD *a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  _QWORD *v5;
  unint64_t v6;

  v2 = (int8x8_t)result[1];
  v3 = a2[1];
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    if (v3 >= *(_QWORD *)&v2)
      v3 %= *(_QWORD *)&v2;
  }
  else
  {
    v3 &= *(_QWORD *)&v2 - 1;
  }
  v5 = *(_QWORD **)(*result + 8 * v3);
  if (v5)
  {
    *a2 = *v5;
LABEL_13:
    *v5 = a2;
    goto LABEL_14;
  }
  *a2 = result[2];
  result[2] = a2;
  *(_QWORD *)(*result + 8 * v3) = result + 2;
  if (*a2)
  {
    v6 = *(_QWORD *)(*a2 + 8);
    if (v4.u32[0] > 1uLL)
    {
      if (v6 >= *(_QWORD *)&v2)
        v6 %= *(_QWORD *)&v2;
    }
    else
    {
      v6 &= *(_QWORD *)&v2 - 1;
    }
    v5 = (_QWORD *)(*result + 8 * v6);
    goto LABEL_13;
  }
LABEL_14:
  ++result[3];
  return result;
}

void std::__function::__func<TnameTable::GetAllNames(void)::$_0,std::allocator<TnameTable::GetAllNames(void)::$_0>,void ()(sfntNameRecord_BE const&,int,unsigned long,BOOL *)>::~__func()
{
  JUMPOUT(0x1B5E0CD38);
}

__n128 std::__function::__func<TnameTable::GetAllNames(void)::$_0,std::allocator<TnameTable::GetAllNames(void)::$_0>,void ()(sfntNameRecord_BE const&,int,unsigned long,BOOL *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E61B4E40;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<TnameTable::GetAllNames(void)::$_0,std::allocator<TnameTable::GetAllNames(void)::$_0>,void ()(sfntNameRecord_BE const&,int,unsigned long,BOOL *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E61B4E40;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<TnameTable::GetAllNames(void)::$_0,std::allocator<TnameTable::GetAllNames(void)::$_0>,void ()(sfntNameRecord_BE const&,int,unsigned long,BOOL *)>::operator()(uint64_t a1, unsigned __int16 *a2, int *a3, uint64_t *a4)
{
  int v6;
  uint64_t v7;
  _QWORD *v8;
  __int128 v9;
  unsigned int v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD v14[4];
  _OWORD v15[6];

  v6 = *a3;
  v7 = *a4;
  v8 = *(_QWORD **)(a1 + 8);
  *(_QWORD *)&v9 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v15[4] = v9;
  v15[5] = v9;
  v15[2] = v9;
  v15[3] = v9;
  v15[0] = v9;
  v15[1] = v9;
  v10 = bswap32(a2[3]) >> 16;
  TDataReference::TDataReference(v14, v8, v6, 0, 0);
  TFontNameString::TFontNameString((TFontNameString *)v15, v10, (const TDataReference *)v14, v7, bswap32(*a2) >> 16, bswap32(a2[1]) >> 16, bswap32(a2[2]) >> 16);
  v14[0] = &off_1E6176770;
  TDataReference::DucRefCount((TDataReference *)v14);
  if (TFontNameString::IsValid((TFontNameString *)v15))
  {
    v11 = *(uint64_t **)(a1 + 16);
    v12 = v11[1];
    if (v12 >= v11[2])
    {
      v13 = std::vector<TFontNameString>::__push_back_slow_path<TFontNameString const&>(v11, (const TFontNameString *)v15);
    }
    else
    {
      TFontNameString::TFontNameString((TFontNameString *)v11[1], (const TFontNameString *)v15);
      v13 = v12 + 96;
      v11[1] = v12 + 96;
    }
    v11[1] = v13;
  }
  TFontNameString::~TFontNameString((TFontNameString *)v15);
}

void sub_1B09A9894(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  va_list va;

  va_start(va, a5);
  v7 = v6;
  *(_QWORD *)(v5 + 8) = v7;
  TFontNameString::~TFontNameString((TFontNameString *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<TnameTable::GetAllNames(void)::$_0,std::allocator<TnameTable::GetAllNames(void)::$_0>,void ()(sfntNameRecord_BE const&,int,unsigned long,BOOL *)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<TnameTable::GetAllNames(void)::$_0,std::allocator<TnameTable::GetAllNames(void)::$_0>,void ()(sfntNameRecord_BE const&,int,unsigned long,BOOL *)>::target_type()
{
}

uint64_t `anonymous namespace'::TFormat4UTF16cmapTable::Map<unsigned short>(_QWORD *a1, uint64_t a2, _WORD *a3, unsigned int *a4, int a5)
{
  _WORD *v6;
  uint64_t v7;
  unsigned int v8;
  _QWORD *v9;
  unsigned __int16 *v10;
  uint64_t v11;
  unint64_t v12;
  unsigned __int16 *v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  _BOOL4 v28;
  unsigned __int16 *v29;
  uint64_t v30;
  _QWORD *v31;
  unsigned __int16 *v32;
  unsigned int v33;
  unint64_t v34;
  unint64_t v35;
  unsigned __int16 *v36;
  unsigned __int16 *v37;
  unsigned __int16 *v38;
  unsigned int v39;
  BOOL v40;
  unsigned __int16 *v41;
  unsigned int v42;
  unsigned __int16 *v43;
  unsigned int v44;
  unsigned __int16 *v45;
  unsigned __int16 *v46;
  unsigned int v48;
  BOOL v49;
  int v50;
  _DWORD *exception;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  unsigned int v56;

  v6 = a3;
  v7 = a1[1];
  if (!v7 || !*(_QWORD *)(v7 + 16))
  v8 = *a4;
  *((_DWORD *)a1 + 4) = *a4;
  *((_DWORD *)a1 + 5) = v8;
  if (!*a4)
    goto LABEL_63;
  v9 = a1;
  v10 = (unsigned __int16 *)(*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(*(_QWORD *)*a1 + 16))(*a1, 0, 4);
  TcmapTableDataRef::validateArray<FPBigEndianScalar<unsigned short>>(v9, (unint64_t)v10, 1);
  v11 = bswap32(*v10) >> 16;
  if ((v11 & 1) != 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E6176998;
    exception[2] = 4;
  }
  v12 = *(_QWORD *)(*v9 + 8);
  v13 = v10 + 4;
  v14 = a2;
  a1 = v9;
  if (v11 < 0x10)
  {
    v19 = 0;
    v56 = 0;
    v52 = 0;
    goto LABEL_11;
  }
  v15 = __clz(v11);
  v16 = (1 << (v15 ^ 0x1F));
  if ((unint64_t)v13 + v16 + 2 <= v12)
  {
    v19 = 30 - v15;
    v52 = 1 << (v15 ^ 0x1F);
    v56 = bswap32(*(unsigned __int16 *)((char *)v13 + v16)) >> 16;
    v10 = (unsigned __int16 *)((char *)v13 + (v11 - v16));
LABEL_11:
    v20 = *a4;
    if ((_DWORD)v20)
    {
      v21 = 0;
      v22 = v11 >> 1;
      v23 = (unsigned __int16)v11 & 0xFFFE;
      v55 = v19;
      v53 = v23;
      v54 = v22;
      while (1)
      {
        v24 = v21 + 1;
        v25 = *(unsigned __int16 *)(v14 + 2 * v21);
        if (v21 + 1 != v20 && (v25 & 0xFC00) == 0xD800)
        {
          v26 = *(unsigned __int16 *)(v14 + 2 * v24);
          if ((v26 & 0xFC00) == 0xDC00)
            break;
        }
        if (v25 >> 9 < 0x7F)
          goto LABEL_26;
        if (v25 >> 4 >= 0xFE1)
        {
          v27 = *(unsigned __int16 *)(v14 + 2 * v21);
LABEL_22:
          v28 = v27 - 917760 < 0xF0;
          if (!v21)
            goto LABEL_26;
          goto LABEL_23;
        }
        v28 = 1;
        v27 = *(unsigned __int16 *)(v14 + 2 * v21);
        if (!v21)
          goto LABEL_26;
LABEL_23:
        if (v28)
        {
          v29 = v13;
          v30 = v11;
          v31 = a1;
          *v6 = (__int16)((unsigned __int16)TFormat14UVSTable::Map<unsigned short>(*(_QWORD *)(a1[1] + 16), *(_QWORD *)(a1[1] + 8), *(unsigned __int16 *)(v14 + 2 * v21 - 2), v27, v6 - 1) << 15) >> 15;
          if (v27 >= 0x10000)
          {
            v6[1] = 0;
            v6 += 2;
            v24 = v21 + 2;
          }
          else
          {
            ++v6;
          }
          v11 = v30;
          v13 = v29;
          v14 = a2;
          v19 = v55;
          a1 = v31;
          v23 = v53;
          v22 = v54;
          goto LABEL_59;
        }
LABEL_26:
        v32 = v13;
        if (v11 >= 0x10)
        {
          if (v25 >= v56)
            v32 = v10;
          else
            v32 = v13;
          if ((unint64_t)v32 + v52 > v12)
            goto LABEL_7;
          if (v19 >= 4)
          {
            v33 = v19;
            LODWORD(v34) = v52;
            do
            {
              v35 = v34;
              v34 = (unint64_t)v34 >> 1;
              v36 = (unsigned __int16 *)((char *)v32 + (v35 >> 1));
              if (v25 > bswap32(*v36) >> 16)
                v32 = v36;
              --v33;
            }
            while (v33 > 3);
          }
        }
        if ((unint64_t)(v32 + 1) <= v12)
        {
          do
          {
            v37 = v32 + 1;
            v39 = *v32;
            v38 = v32 + 2;
            v40 = v25 <= bswap32(v39) >> 16 || (unint64_t)v38 > v12;
            v32 = v37;
          }
          while (!v40);
          v32 = v37;
        }
        v41 = &v32[v22];
        if ((unint64_t)&v41[v23 + 1] > v12 || (v42 = bswap32(*v41), v25 < HIWORD(v42)))
        {
LABEL_55:
          *v6++ = 0;
          v50 = *((_DWORD *)a1 + 4);
          --*((_DWORD *)a1 + 5);
          if (v50 > (unsigned __int16)v21)
            *((_DWORD *)a1 + 4) = (unsigned __int16)v21;
          goto LABEL_59;
        }
        v43 = &v41[v22];
        v44 = bswap32(*v43) >> 16;
        v45 = &v43[v22];
        if (*v45)
        {
          v46 = (unsigned __int16 *)((char *)&v45[(unsigned __int16)(v25 - HIWORD(v42))] + __rev16(*v45));
          if (v46 <= v13 || (unint64_t)(v46 + 1) > v12)
            goto LABEL_55;
          v48 = *v46;
          v49 = v48 == 0;
          v25 = v44 + (bswap32(v48) >> 16);
          v49 = v49 || (unsigned __int16)v25 == 0;
          if (v49)
            goto LABEL_55;
        }
        else
        {
          LOWORD(v25) = v44 + v25;
          if (!(_WORD)v25)
            goto LABEL_55;
        }
        *v6++ = v25;
LABEL_59:
        v20 = *a4;
        v21 = v24;
        if (v24 >= v20)
          goto LABEL_63;
      }
      v27 = v26 + (v25 << 10) - 56613888;
      goto LABEL_22;
    }
LABEL_63:
    v17 = *((_DWORD *)a1 + 5);
    goto LABEL_64;
  }
LABEL_7:
  v17 = 0;
  a1[2] = 0;
LABEL_64:
  *a4 = v17;
  return *((unsigned int *)a1 + 4);
}

uint64_t `anonymous namespace'::TFormat6UTF16cmapTable::Map<unsigned short>(_QWORD *a1, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  unsigned __int16 *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unint64_t v12;
  unsigned int v13;
  unsigned __int16 *v14;
  unsigned int v15;
  unsigned __int16 *v16;
  int v17;

  v8 = (unsigned __int16 *)(*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(*(_QWORD *)*a1 + 16))(*a1, 0, 4);
  TcmapTableDataRef::validateArray<FPBigEndianScalar<unsigned short>>(a1, (unint64_t)v8, 1);
  v9 = *v8;
  TcmapTableDataRef::validateArray<FPBigEndianScalar<unsigned short>>(a1, (unint64_t)(v8 + 1), 1);
  v10 = v8[1];
  v11 = *a4;
  *((_DWORD *)a1 + 4) = *a4;
  *((_DWORD *)a1 + 5) = v11;
  if (*a4)
  {
    v12 = 0;
    v13 = bswap32(v9) >> 16;
    v14 = v8 + 2;
    v15 = bswap32(v10) >> 16;
    do
    {
      if (v15 <= (unsigned __int16)(*(_WORD *)(a2 + 2 * v12) - v13))
      {
        *(_WORD *)(a3 + 2 * v12) = 0;
        v17 = *((_DWORD *)a1 + 4);
        --*((_DWORD *)a1 + 5);
        if (v17 > (unsigned __int16)v12)
          *((_DWORD *)a1 + 4) = (unsigned __int16)v12;
      }
      else
      {
        v16 = &v14[(unsigned __int16)(*(_WORD *)(a2 + 2 * v12) - v13)];
        TcmapTableDataRef::validateArray<FPBigEndianScalar<unsigned short>>(a1, (unint64_t)v16, 1);
        *(_WORD *)(a3 + 2 * v12) = bswap32(*v16) >> 16;
      }
      ++v12;
    }
    while (v12 < *a4);
    v11 = *((_DWORD *)a1 + 5);
  }
  *a4 = v11;
  return *((unsigned int *)a1 + 4);
}

uint64_t TFormat14UVSTable::Map<unsigned short>(uint64_t a1, unint64_t a2, int a3, int a4, _WORD *a5)
{
  unsigned __int8 *v6;
  unsigned int v10;
  unsigned __int8 *v11;
  unsigned int v12;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned __int8 *v19;
  uint64_t v20;
  unsigned __int8 *v21;
  uint64_t v22;
  unsigned __int8 *v24;
  unsigned __int8 *v25;
  unsigned int v27;
  unsigned int *v28;
  unsigned __int8 *v29;
  uint64_t v30;
  unsigned __int8 *v31;
  int v32;
  unsigned __int8 *v34;
  unsigned __int8 *v35;
  int v36;
  int v37;

  v6 = (unsigned __int8 *)(a1 + 10);
  if ((unint64_t)v6 > a2)
    return 0;
  v10 = bswap32(*(_DWORD *)(a1 + 6));
  v11 = &v6[11 * v10];
  if (a1 + 21 <= a2)
    v12 = (a2 - (unint64_t)v6) / 0xB;
  else
    v12 = 0;
  if (v11 < v6 || (unint64_t)v11 > a2)
    v10 = v12;
  v14 = std::__equal_range[abi:fe180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TFormat14UVSTable::VarSelectorRecord const*,TFormat14UVSTable::VarSelectorRecord const*,int,std::__identity>(v6, &v6[11 * v10], a4);
  if (v14 == v15)
    return 0;
  v16 = v14;
  v17 = *(_DWORD *)(v14 + 3);
  if (v17)
  {
    v18 = (unsigned int *)(a1 + bswap32(v17));
    v19 = (unsigned __int8 *)(v18 + 1);
    if ((unint64_t)(v18 + 1) <= a2)
    {
      v20 = bswap32(*v18);
      v21 = &v19[4 * v20];
      if ((unint64_t)(v18 + 2) <= a2)
        v22 = ((a2 - (unint64_t)v19) >> 2);
      else
        v22 = 0;
      if (v21 >= v19 && (unint64_t)v21 <= a2)
        v22 = v20;
      v24 = std::__equal_range[abi:fe180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TFormat14UVSTable::UnicodeValueRange const*,TFormat14UVSTable::UnicodeValueRange const*,int,std::__identity>(v19, &v19[4 * v22], a3);
      if (v24 != v25)
        return 1;
      goto LABEL_24;
    }
    return 0;
  }
LABEL_24:
  v27 = *(_DWORD *)(v16 + 7);
  if (!v27)
    goto LABEL_37;
  v28 = (unsigned int *)(a1 + bswap32(v27));
  v29 = (unsigned __int8 *)(v28 + 1);
  if ((unint64_t)(v28 + 1) > a2)
  {
    v36 = 0;
    v37 = 0;
    return v36 | v37;
  }
  v30 = bswap32(*v28);
  v31 = &v29[4 * v30 + v30];
  v32 = (unint64_t)v28 + 9 <= a2 ? (a2 - (unint64_t)v29) / 5 : 0;
  if (v31 >= v29 && (unint64_t)v31 <= a2)
    v32 = v30;
  v34 = std::__equal_range[abi:fe180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TFormat14UVSTable::UVSMapping const*,TFormat14UVSTable::UVSMapping const*,int,std::__identity>(v29, &v29[5 * v32], a3);
  if (v34 == v35)
  {
LABEL_37:
    v36 = 1;
  }
  else
  {
    v36 = 0;
    *a5 = bswap32(*(unsigned __int16 *)(v34 + 3)) >> 16;
  }
  v37 = 1;
  return v36 | v37;
}

unsigned __int8 *std::__equal_range[abi:fe180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TFormat14UVSTable::VarSelectorRecord const*,TFormat14UVSTable::VarSelectorRecord const*,int,std::__identity>(unsigned __int8 *result, unsigned __int8 *a2, int a3)
{
  unint64_t v3;
  unint64_t v4;
  unsigned __int8 *v5;
  int v6;
  unsigned __int8 *v7;
  unint64_t v8;
  unsigned __int8 *v9;
  int v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  unint64_t v13;
  unint64_t v14;
  unsigned __int8 *v15;
  int v16;
  unsigned __int8 *v17;

  if (a2 == result)
    return a2;
  v3 = 0x2E8BA2E8BA2E8BA3 * (a2 - result);
  while (1)
  {
    v4 = v3 >> 1;
    v5 = &result[11 * (v3 >> 1)];
    v6 = (*v5 << 16) | (v5[1] << 8) | v5[2];
    if (v6 >= a3)
      break;
    result = v5 + 11;
    v4 = v3 + ~v4;
LABEL_7:
    v3 = v4;
    if (!v4)
      return result;
  }
  if (v6 > a3)
  {
    a2 = &result[11 * (v3 >> 1)];
    goto LABEL_7;
  }
  v7 = &result[11 * (v3 >> 1)];
  if (v3 >= 2)
  {
    v7 = result;
    do
    {
      v8 = v4 >> 1;
      v9 = &v7[11 * (v4 >> 1)];
      v10 = (*v9 << 16) | (v9[1] << 8) | v9[2];
      v11 = v9 + 11;
      v4 += ~(v4 >> 1);
      if (v10 >= a3)
        v4 = v8;
      else
        v7 = v11;
    }
    while (v4);
  }
  v12 = v5 + 11;
  if (a2 == v12)
    return v7;
  v13 = 0x2E8BA2E8BA2E8BA3 * (a2 - v12);
  do
  {
    v14 = v13 >> 1;
    v15 = &v12[11 * (v13 >> 1)];
    v16 = (*v15 << 16) | (v15[1] << 8) | v15[2];
    v17 = v15 + 11;
    v13 += ~(v13 >> 1);
    if (v16 > a3)
      v13 = v14;
    else
      v12 = v17;
  }
  while (v13);
  return v7;
}

unsigned __int8 *std::__equal_range[abi:fe180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TFormat14UVSTable::UnicodeValueRange const*,TFormat14UVSTable::UnicodeValueRange const*,int,std::__identity>(unsigned __int8 *result, unsigned __int8 *a2, int a3)
{
  unint64_t v3;
  unint64_t v4;
  unsigned __int8 *v5;
  int v6;
  unsigned __int8 *v7;
  unint64_t v8;
  unsigned __int8 *v9;
  int v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  unint64_t v13;
  unint64_t v14;
  unsigned __int8 *v15;
  int v16;
  unsigned __int8 *v17;

  if (a2 == result)
    return a2;
  v3 = (a2 - result) >> 2;
  while (1)
  {
    v4 = v3 >> 1;
    v5 = &result[4 * (v3 >> 1)];
    v6 = (*v5 << 16) | (v5[1] << 8) | v5[2];
    if (v6 + v5[3] >= a3)
      break;
    result = v5 + 4;
    v4 = v3 + ~v4;
LABEL_7:
    v3 = v4;
    if (!v4)
      return result;
  }
  if (v6 > a3)
  {
    a2 = &result[4 * (v3 >> 1)];
    goto LABEL_7;
  }
  v7 = &result[4 * (v3 >> 1)];
  if (v3 >= 2)
  {
    v7 = result;
    do
    {
      v8 = v4 >> 1;
      v9 = &v7[4 * (v4 >> 1)];
      v10 = ((*v9 << 16) | (v9[1] << 8) | v9[2]) + v9[3];
      v11 = v9 + 4;
      v4 += ~(v4 >> 1);
      if (v10 >= a3)
        v4 = v8;
      else
        v7 = v11;
    }
    while (v4);
  }
  v12 = v5 + 4;
  if (a2 == v12)
    return v7;
  v13 = (a2 - v12) >> 2;
  do
  {
    v14 = v13 >> 1;
    v15 = &v12[4 * (v13 >> 1)];
    v16 = (*v15 << 16) | (v15[1] << 8) | v15[2];
    v17 = v15 + 4;
    v13 += ~(v13 >> 1);
    if (v16 > a3)
      v13 = v14;
    else
      v12 = v17;
  }
  while (v13);
  return v7;
}

unsigned __int8 *std::__equal_range[abi:fe180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TFormat14UVSTable::UVSMapping const*,TFormat14UVSTable::UVSMapping const*,int,std::__identity>(unsigned __int8 *result, unsigned __int8 *a2, int a3)
{
  unint64_t v3;
  unint64_t v4;
  unsigned __int8 *v5;
  int v6;
  unsigned __int8 *v7;
  unint64_t v8;
  unsigned __int8 *v9;
  int v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  unint64_t v13;
  unint64_t v14;
  unsigned __int8 *v15;
  int v16;
  unsigned __int8 *v17;

  if (a2 == result)
    return a2;
  v3 = 0xCCCCCCCCCCCCCCCDLL * (a2 - result);
  while (1)
  {
    v4 = v3 >> 1;
    v5 = &result[5 * (v3 >> 1)];
    v6 = (*v5 << 16) | (v5[1] << 8) | v5[2];
    if (v6 >= a3)
      break;
    result = v5 + 5;
    v4 = v3 + ~v4;
LABEL_7:
    v3 = v4;
    if (!v4)
      return result;
  }
  if (v6 > a3)
  {
    a2 = &result[5 * (v3 >> 1)];
    goto LABEL_7;
  }
  v7 = &result[5 * (v3 >> 1)];
  if (v3 >= 2)
  {
    v7 = result;
    do
    {
      v8 = v4 >> 1;
      v9 = &v7[5 * (v4 >> 1)];
      v10 = (*v9 << 16) | (v9[1] << 8) | v9[2];
      v11 = v9 + 5;
      v4 += ~(v4 >> 1);
      if (v10 >= a3)
        v4 = v8;
      else
        v7 = v11;
    }
    while (v4);
  }
  v12 = v5 + 5;
  if (a2 == v12)
    return v7;
  v13 = 0xCCCCCCCCCCCCCCCDLL * (a2 - v12);
  do
  {
    v14 = v13 >> 1;
    v15 = &v12[5 * (v13 >> 1)];
    v16 = (*v15 << 16) | (v15[1] << 8) | v15[2];
    v17 = v15 + 5;
    v13 += ~(v13 >> 1);
    if (v16 > a3)
      v13 = v14;
    else
      v12 = v17;
  }
  while (v13);
  return v7;
}

BOOL ComputeIndex12or13<(`anonymous namespace'::SubtableFormat12or13)0,unsigned short>(unsigned int *a1, unint64_t a2, unsigned int a3, _WORD *a4)
{
  unint64_t v4;
  unsigned int *v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  _BOOL8 result;

  if ((unint64_t)a1 >= a2)
    goto LABEL_12;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - (_QWORD)a1) >> 2);
  v5 = a1;
  do
  {
    v6 = v4 >> 1;
    v7 = &v5[3 * (v4 >> 1)];
    v9 = *v7;
    v8 = v7 + 3;
    v4 += ~(v4 >> 1);
    if (bswap32(v9) > a3)
      v4 = v6;
    else
      v5 = v8;
  }
  while (v4);
  v10 = v5 - 3;
  if (v5 == a1)
    v10 = a1;
  if (v10 == a1 && bswap32(*a1) > a3 || bswap32(v10[1]) < a3)
  {
LABEL_12:
    LOWORD(v11) = 0;
    result = 0;
  }
  else
  {
    v11 = bswap32(v10[2]) + a3 - bswap32(*v10);
    result = v11 < 0xFFFF;
    if (v11 >= 0xFFFF)
      LOWORD(v11) = 0;
  }
  *a4 = v11;
  return result;
}

uint64_t TFormat14UVSTable::Map<unsigned int>(uint64_t a1, unint64_t a2, int a3, int a4, unsigned int *a5)
{
  unsigned __int8 *v6;
  unsigned int v10;
  unsigned __int8 *v11;
  unsigned int v12;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned __int8 *v19;
  uint64_t v20;
  unsigned __int8 *v21;
  uint64_t v22;
  unsigned __int8 *v24;
  unsigned __int8 *v25;
  unsigned int v27;
  unsigned int *v28;
  unsigned __int8 *v29;
  uint64_t v30;
  unsigned __int8 *v31;
  int v32;
  unsigned __int8 *v34;
  unsigned __int8 *v35;
  int v36;
  int v37;

  v6 = (unsigned __int8 *)(a1 + 10);
  if ((unint64_t)v6 > a2)
    return 0;
  v10 = bswap32(*(_DWORD *)(a1 + 6));
  v11 = &v6[11 * v10];
  if (a1 + 21 <= a2)
    v12 = (a2 - (unint64_t)v6) / 0xB;
  else
    v12 = 0;
  if (v11 < v6 || (unint64_t)v11 > a2)
    v10 = v12;
  v14 = std::__equal_range[abi:fe180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TFormat14UVSTable::VarSelectorRecord const*,TFormat14UVSTable::VarSelectorRecord const*,int,std::__identity>(v6, &v6[11 * v10], a4);
  if (v14 == v15)
    return 0;
  v16 = v14;
  v17 = *(_DWORD *)(v14 + 3);
  if (v17)
  {
    v18 = (unsigned int *)(a1 + bswap32(v17));
    v19 = (unsigned __int8 *)(v18 + 1);
    if ((unint64_t)(v18 + 1) <= a2)
    {
      v20 = bswap32(*v18);
      v21 = &v19[4 * v20];
      if ((unint64_t)(v18 + 2) <= a2)
        v22 = ((a2 - (unint64_t)v19) >> 2);
      else
        v22 = 0;
      if (v21 >= v19 && (unint64_t)v21 <= a2)
        v22 = v20;
      v24 = std::__equal_range[abi:fe180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TFormat14UVSTable::UnicodeValueRange const*,TFormat14UVSTable::UnicodeValueRange const*,int,std::__identity>(v19, &v19[4 * v22], a3);
      if (v24 != v25)
        return 1;
      goto LABEL_24;
    }
    return 0;
  }
LABEL_24:
  v27 = *(_DWORD *)(v16 + 7);
  if (!v27)
    goto LABEL_37;
  v28 = (unsigned int *)(a1 + bswap32(v27));
  v29 = (unsigned __int8 *)(v28 + 1);
  if ((unint64_t)(v28 + 1) > a2)
  {
    v36 = 0;
    v37 = 0;
    return v36 | v37;
  }
  v30 = bswap32(*v28);
  v31 = &v29[4 * v30 + v30];
  v32 = (unint64_t)v28 + 9 <= a2 ? (a2 - (unint64_t)v29) / 5 : 0;
  if (v31 >= v29 && (unint64_t)v31 <= a2)
    v32 = v30;
  v34 = std::__equal_range[abi:fe180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TFormat14UVSTable::UVSMapping const*,TFormat14UVSTable::UVSMapping const*,int,std::__identity>(v29, &v29[5 * v32], a3);
  if (v34 == v35)
  {
LABEL_37:
    v36 = 1;
  }
  else
  {
    v36 = 0;
    *a5 = bswap32(*(unsigned __int16 *)(v34 + 3)) >> 16;
  }
  v37 = 1;
  return v36 | v37;
}

BOOL ComputeIndex12or13<(`anonymous namespace'::SubtableFormat12or13)0,unsigned int>(unsigned int *a1, unint64_t a2, unsigned int a3, unsigned int *a4)
{
  unint64_t v4;
  unsigned int *v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  _BOOL8 result;

  if ((unint64_t)a1 >= a2)
    goto LABEL_12;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - (_QWORD)a1) >> 2);
  v5 = a1;
  do
  {
    v6 = v4 >> 1;
    v7 = &v5[3 * (v4 >> 1)];
    v9 = *v7;
    v8 = v7 + 3;
    v4 += ~(v4 >> 1);
    if (bswap32(v9) > a3)
      v4 = v6;
    else
      v5 = v8;
  }
  while (v4);
  v10 = v5 - 3;
  if (v5 == a1)
    v10 = a1;
  if (v10 == a1 && bswap32(*a1) > a3 || bswap32(v10[1]) < a3)
  {
LABEL_12:
    v11 = 0;
    result = 0;
  }
  else
  {
    v11 = bswap32(v10[2]) + a3 - bswap32(*v10);
    result = v11 < 0xFFFFFF;
    if (v11 >= 0xFFFFFF)
      v11 = 0;
  }
  *a4 = v11;
  return result;
}

uint64_t TFormat4cmapTable::Map<unsigned short>(TFormat4cmapTable *this, _QWORD *a2, unsigned int a3, _WORD *a4, unsigned int *a5)
{
  unsigned int v6;
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;
  _WORD *v13;
  unsigned __int8 *v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  unint64_t v19;
  uint64_t v21;
  unint64_t v23;

  v6 = 0;
  v21 = *a5;
  v23 = (unint64_t)&a4[v21];
  if (a3 && *a5)
  {
    v6 = 0;
    v10 = 1;
    v11 = (unint64_t)a4;
    LODWORD(v12) = *a5;
    v13 = a4;
    do
    {
      v14 = (unsigned __int8 *)(*a2)++;
      v15 = TFormat4cmapTable::ComputeIndex(this, *v14);
      v16 = *a5;
      if ((_DWORD)v12 == *a5)
        v17 = v10 - 1;
      else
        v17 = v12;
      if (v15)
      {
        ++v6;
        v12 = v12;
      }
      else
      {
        v12 = v17;
      }
      *v13++ = v15;
      v11 += 2;
      if (v10 >= a3)
        break;
    }
    while (v10++ < v16);
  }
  else
  {
    v11 = (unint64_t)a4;
    v13 = a4;
    v12 = *a5;
  }
  if ((unint64_t)v13 < v23)
  {
    v19 = (unint64_t)&a4[v21];
    if (v19 <= v11 + 2)
      v19 = v11 + 2;
    bzero(v13, ((v19 + ~v11) & 0xFFFFFFFFFFFFFFFELL) + 2);
  }
  *a5 = v6;
  return v12;
}

uint64_t TFormat4cmapTable::ComputeIndex(TFormat4cmapTable *this, unsigned int a2)
{
  _QWORD *v3;
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unint64_t v8;
  unsigned __int16 *v9;
  unsigned __int16 *v10;
  uint64_t v11;
  unsigned __int16 *v12;
  unint64_t v13;
  unsigned __int16 *v14;
  unsigned int v15;
  unsigned int v17;
  unsigned int v18;
  _WORD *v19;
  unsigned int v20;
  _DWORD *exception;

  v3 = (_QWORD *)((char *)this + 8);
  v4 = (unsigned __int16 *)(*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), 0, 4);
  TcmapTableDataRef::validateArray<FPBigEndianScalar<unsigned short>>(v3, (unint64_t)v4, 1);
  v5 = bswap32(*v4) >> 16;
  if ((v5 & 1) != 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E6176998;
    exception[2] = 4;
  }
  if (v5 < 0x10)
  {
    v12 = v4 + 4;
  }
  else
  {
    v6 = __clz(v5 >> 1);
    v7 = v6 ^ 0x1F;
    LODWORD(v8) = 2 << (v6 ^ 0x1F);
    v9 = v4 + 4;
    v10 = &v4[(1 << (v6 ^ 0x1F)) + 4];
    TcmapTableDataRef::validateArray<FPBigEndianScalar<unsigned short>>(v3, (unint64_t)v10, 1);
    if (a2 >= bswap32(*v10) >> 16)
      v11 = (v5 - v8) >> 1;
    else
      v11 = 0;
    v12 = &v9[v11];
    if (v7 >= 4)
    {
      do
      {
        v13 = v8;
        v8 = (unint64_t)v8 >> 1;
        v14 = (unsigned __int16 *)((char *)v12 + (v13 >> 1));
        TcmapTableDataRef::validateArray<FPBigEndianScalar<unsigned short>>(v3, (unint64_t)v14, 1);
        if (a2 > bswap32(*v14) >> 16)
          v12 = v14;
        --v7;
      }
      while (v7 > 3);
    }
  }
  do
  {
    TcmapTableDataRef::validateArray<FPBigEndianScalar<unsigned short>>(v3, (unint64_t)v12, 1);
    v15 = *v12++;
  }
  while (a2 > bswap32(v15) >> 16);
  TcmapTableDataRef::validateArray<FPBigEndianScalar<unsigned short>>(v3, (unint64_t)v12 + v5, 1);
  if (a2 >= bswap32(*(unsigned __int16 *)((char *)v12 + v5)) >> 16)
  {
    TcmapTableDataRef::validateArray<FPBigEndianScalar<unsigned short>>(v3, (unint64_t)v12 + v5, 1);
    v17 = *(unsigned __int16 *)((char *)v12 + v5);
    TcmapTableDataRef::validateArray<FPBigEndianScalar<unsigned short>>(v3, (unint64_t)&v12[v5], 1);
    v18 = bswap32(v12[v5]) >> 16;
    TcmapTableDataRef::validateArray<FPBigEndianScalar<unsigned short>>(v3, (unint64_t)v12 + 3 * v5, 1);
    if (a2 == 0xFFFF || !*(unsigned __int16 *)((char *)v12 + 3 * v5))
    {
      return (unsigned __int16)(v18 + a2);
    }
    else
    {
      TcmapTableDataRef::validateArray<FPBigEndianScalar<unsigned short>>(v3, (unint64_t)v12 + 3 * v5, 1);
      v19 = (unsigned __int16 *)((char *)v12
                               + 3 * v5
                               + 2 * (unsigned __int16)(a2 - (bswap32(v17) >> 16))
                               + (bswap32(*(unsigned __int16 *)((char *)v12 + 3 * v5)) >> 16));
      TcmapTableDataRef::validateArray<FPBigEndianScalar<unsigned short>>(v3, (unint64_t)v19, 1);
      v20 = v18 + (bswap32((unsigned __int16)*v19) >> 16);
      if (*v19)
        return (unsigned __int16)v20;
      else
        return 0;
    }
  }
  else
  {
    return 0;
  }
}

uint64_t TFormat6cmapTable::Map<unsigned short>(TFormat6cmapTable *a1, uint64_t *a2, unsigned int a3, _WORD *a4, unsigned int *a5)
{
  uint64_t v10;
  unsigned __int16 *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned __int16 *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _WORD *v22;
  unsigned int v23;
  unint64_t v24;

  if (TFormat6cmapTable::VerifyCMAP(a1))
  {
    v10 = *a5;
    v11 = (unsigned __int16 *)(*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)a1 + 16))(*(_QWORD *)a1, 0, 4);
    v12 = *a5;
    if (*a5 >= a3)
      v13 = a3;
    else
      v13 = *a5;
    if (v13)
    {
      v14 = 0;
      v15 = 0;
      v16 = bswap32(*v11) >> 16;
      v17 = bswap32(v11[1]) >> 16;
      v18 = v11 + 2;
      v19 = *a2 + 1;
      v20 = (unint64_t)a4;
      v21 = *a5;
      v22 = a4;
      while (1)
      {
        *a2 = v19;
        if (v17 <= (unsigned __int16)(*(unsigned __int8 *)(v19 - 1) - (_WORD)v16))
          break;
        v23 = v18[(unsigned __int16)(*(unsigned __int8 *)(v19 - 1) - (_WORD)v16)];
        if (!v18[(unsigned __int16)(*(unsigned __int8 *)(v19 - 1) - (_WORD)v16)])
          goto LABEL_11;
        LOWORD(v23) = __rev16(v23);
        ++v15;
LABEL_14:
        ++v19;
        *v22++ = v23;
        ++v14;
        v20 += 2;
        if (v13 == v14)
          goto LABEL_18;
      }
      LOWORD(v23) = 0;
LABEL_11:
      if ((_DWORD)v21 == v12)
        v21 = v14;
      else
        v21 = v21;
      goto LABEL_14;
    }
    v15 = 0;
    v20 = (unint64_t)a4;
    v22 = a4;
    v21 = *a5;
LABEL_18:
    if (v22 < &a4[v10])
    {
      v24 = (unint64_t)&a4[v10];
      if (v24 <= v20 + 2)
        v24 = v20 + 2;
      bzero(v22, ((v24 + ~v20) & 0xFFFFFFFFFFFFFFFELL) + 2);
    }
  }
  else
  {
    v15 = 0;
    v21 = 0;
  }
  *a5 = v15;
  return v21;
}

void StreamTTFont(uint64_t a1, uint64_t a2, int a3, int a4)
{
  memoryContext *v7;
  unsigned int FontProtectionInfo;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  size_t v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  int v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  int v47;
  int *v48;
  unsigned int v49;
  int v50;
  int v51;
  unsigned int v52;
  unsigned int *v53;
  __int128 v54;
  uint64_t v55;
  int v56;
  char v57;
  int v58;
  int v59;
  __int128 v60;
  unsigned int v61;
  unsigned int *v62;
  _WORD *v63;
  int v64;
  char v65;
  _DWORD *v66;
  _WORD *v67;
  unsigned int v68;
  int v69;
  int NewGlyphSize;
  int v71;
  int v72;
  char *v73;
  int v74;
  unsigned int v75;
  unsigned int *v76;
  unsigned int v77;
  int v78;
  char v79;
  _DWORD *v80;
  int v81;
  const void *v82;
  unsigned int v83;
  unsigned int v84;
  _DWORD *v85;
  int v86;
  unsigned __int16 *v87;
  unsigned int v88;
  char *v89;
  unsigned int v90;
  char *v91;
  int v92;
  unsigned int *v93;
  unsigned int v94;
  char v95;
  uint64_t v96;
  unsigned int v97;
  unsigned int v98;
  __int128 v99;
  int v100;
  BOOL v101;
  int v103;
  unsigned int v104;
  void **v105;
  unsigned int v106;
  int v107;
  int v108;
  uint64_t v109;
  void **v110;
  int v111;
  char *v112;
  int v113;
  char v114;
  uint64_t v115;
  unsigned int *v116;
  unsigned int v117;
  unsigned int v118;
  uint64_t v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  int v125;
  const void *v126;
  unsigned int v127;
  void **v128;
  char *v129;
  unint64_t v130;
  unsigned __int16 *v131;
  int v132;
  char *v133;
  char *v134;
  char *v135;
  char *v136;
  unsigned int v137;
  const void *v138;
  unsigned __int16 *v139;
  int v140;
  unsigned int NewGlyphData;
  unsigned int v142;
  char *v143;
  char *v145;
  unint64_t v146;
  BOOL v147;
  unsigned int v148;
  int v149;
  unsigned int v150;
  int v151;
  signed int v152;
  unsigned int v153;
  unsigned int v154;
  char *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  char *v160;
  BOOL v161;
  void *v162;
  unsigned int v163;
  char *v164;
  unsigned int v165;
  unsigned int v166;
  unsigned int v167;
  unsigned int v168;
  int v169;
  const void *v170;
  int v171;
  unsigned __int16 *v172;
  const void *v173;
  unsigned int v174;
  int GlyphVariationOffsetAndSize;
  int v176;
  char *v177;
  void *v178;
  char *v179;
  const void *v180;
  unsigned int v181;
  unsigned int v182;
  uint64_t v183;
  int v184;
  char *v185;
  int v186;
  char *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  char *v201;
  uint64_t v202;
  char *v203;
  char *v204;
  char *v205;
  _WORD *v206;
  _WORD *v207;
  _WORD *exception;
  _WORD *v209;
  _WORD *v210;
  int v211;
  __int16 v212;
  unsigned int v213;
  unsigned int v214;
  __int16 v215;
  char v216;
  unsigned int v217;
  unsigned int v218;
  unsigned int v219;
  size_t count;
  char *v221;
  memoryContext *v222;
  _DWORD *v223;
  int v224;
  char *v225;
  uint64_t v226;
  void *v227;
  unsigned int FontTable;
  int v229;
  unsigned int v230;
  int v231;
  uint64_t v232;
  unsigned int v233;
  uint64_t v234;
  memoryContext *v235;
  unsigned int v236;
  unsigned int v237;
  unsigned int v239;
  uint64_t v240;
  int v241;
  uint64_t v242;
  void *v243;
  void *v244;
  void *v245[2];
  __int128 v246;
  _BYTE v247[22];
  unsigned int v248;
  void *v249;
  unsigned int v250;
  int v251;
  _QWORD __src[4];
  unsigned int *v253;
  int v254[4];
  __int128 v255;
  __int128 v256;
  __int128 v257;
  __int128 v258;
  __int128 v259;
  __int128 v260;
  __int128 v261;
  __int128 v262;
  __int128 v263;
  __int128 v264;
  __int128 v265;
  __int128 v266;
  __int128 v267;
  __int128 v268;
  __int128 v269;
  _OWORD v270[5];
  void *v271[2];
  void *v272[2];
  __int128 v273;
  int v274;
  int v275;
  void *v276[2];
  __int128 v277;
  __int128 v278;
  __int128 v279;
  __int128 v280;
  __int128 v281;
  __int128 v282;
  __int128 v283;
  __int128 v284;
  __int128 v285;
  __int128 v286;
  __int128 v287;
  __int128 v288;
  char v289[16];
  __int128 v290;
  __int128 v291;
  __int128 v292;
  __int128 v293;
  __int128 v294;
  __int128 v295;
  __int128 v296;
  uint64_t v297;

  v297 = *MEMORY[0x1E0C80C00];
  v7 = *(memoryContext **)a1;
  v243 = 0;
  v244 = 0;
  FontProtectionInfo = TFontSurrogate::GetFontProtectionInfo((TFontSurrogate *)(*(_QWORD *)v7 + 16), 0);
  v242 = a2;
  if (!*(_QWORD *)(*(_QWORD *)(a2 + 8) + 56))
  {
    exception = __cxa_allocate_exception(2uLL);
    *exception = 1;
    __cxa_throw(exception, MEMORY[0x1E0DE4F10], 0);
  }
  v9 = FontProtectionInfo;
  v222 = v7;
  ScalerGetFontTable(v7, 1751474532, 0, &v243, 0, 54);
  FontTable = ScalerGetFontTable(v7, 1886352244, 0, &v244, 1, 0);
  v10 = HIWORD(v9) & 0x30E;
  v11 = *(_QWORD *)(a2 + 8);
  v18 = strlen(*(const char **)(v11 + 56));
  if (a3)
    goto LABEL_3;
  if ((*(_BYTE *)(v11 + 16) & 8) == 0)
  {
    if (*(_DWORD *)(v11 + 28) == -1)
    {
      v254[0] = -1431655766;
      v89 = (char *)ZGetString(41, v254);
      StreamBytesThroughBuffer(v242, v254[0], v89);
    }
LABEL_3:
    v19 = v243;
    ZWriteStringF(v242, 0, v12, v13, v14, v15, v16, v17, v18);
    goto LABEL_4;
  }
  v19 = v243;
  ZWriteStringF(v242, 1, v12, v13, v14, v15, v16, v17, bswap32(*(_DWORD *)v243));
LABEL_4:
  if ((_DWORD)v10)
    ZWriteStringF(v242, 203, v20, v21, v22, v23, v24, v25, v10);
  ZWriteStringF(v242, 2, v20, v21, v22, v23, v24, v25, v18);
  v254[0] = -1431655766;
  v26 = (char *)ZGetString(3, v254);
  StreamBytesThroughBuffer(v242, v254[0], v26);
  v254[0] = -1431655766;
  v27 = (char *)ZGetString(7, v254);
  StreamBytesThroughBuffer(v242, v254[0], v27);
  v227 = v244;
  DumpFontEncoding(v222, v242, (uint64_t)v244, FontTable);
  v254[0] = -1431655766;
  v28 = (char *)ZGetString(8, v254);
  StreamBytesThroughBuffer(v242, v254[0], v28);
  if (a3)
  {
    v254[0] = -1431655766;
    v29 = (char *)ZGetString(200, v254);
    StreamBytesThroughBuffer(v242, v254[0], v29);
  }
  if ((*(_DWORD *)(*(_QWORD *)(v242 + 8) + 16) & 8) != 0)
    v30 = 5;
  else
    v30 = 4;
  v254[0] = -1431655766;
  v31 = (char *)ZGetString(v30, v254);
  StreamBytesThroughBuffer(v242, v254[0], v31);
  v254[0] = -1431655766;
  v32 = (char *)ZGetString(9, v254);
  StreamBytesThroughBuffer(v242, v254[0], v32);
  ZWriteStringF(v242, 10, v33, v34, v35, v36, v37, v38, bswap32(*((unsigned __int16 *)v19 + 9)) >> 16);
  v45 = *(_QWORD *)(v242 + 8);
  if ((*(_BYTE *)(v45 + 16) & 8) == 0)
  {
    v46 = bswap32(v19[2]);
    v47 = *(_DWORD *)(v45 + 28);
    if (v47 >= 1)
    {
      v48 = *(int **)(v45 + 32);
      v49 = v47 + 1;
      do
      {
        v50 = *v48;
        v51 = v48[1];
        v48 += 2;
        v46 += v50 + v51;
        --v49;
      }
      while (v49 > 1);
    }
    ZWriteStringF(v242, 13, v39, v40, v41, v42, v43, v44, v46 & 0x7FFFFF | 0x800000);
    v45 = *(_QWORD *)(v242 + 8);
  }
  v235 = *(memoryContext **)a1;
  v223 = v19;
  v52 = *((__int16 *)v19 + 25);
  v53 = *(unsigned int **)(v45 + 48);
  *(_QWORD *)&v54 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v54 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)v272 = v54;
  v273 = v54;
  v270[4] = v54;
  *(_OWORD *)v271 = v54;
  v270[2] = v54;
  v270[3] = v54;
  v270[0] = v54;
  v270[1] = v54;
  v268 = v54;
  v269 = v54;
  v266 = v54;
  v267 = v54;
  v264 = v54;
  v265 = v54;
  v262 = v54;
  v263 = v54;
  v260 = v54;
  v261 = v54;
  v258 = v54;
  v259 = v54;
  v256 = v54;
  v257 = v54;
  *(_OWORD *)v254 = v54;
  v255 = v54;
  InitGlyphDataContext(a1, v45, (uint64_t)v254);
  v55 = *(_QWORD *)(a1 + 8);
  v56 = *(_DWORD *)(v55 + 100);
  v274 = v56;
  if (!v56)
  {
    v209 = __cxa_allocate_exception(2uLL);
    *v209 = 5;
    __cxa_throw(v209, MEMORY[0x1E0DE4F10], 0);
  }
  if (v56 == -1)
  {
    v210 = __cxa_allocate_exception(2uLL);
    *v210 = 4;
    __cxa_throw(v210, MEMORY[0x1E0DE4F10], 0);
  }
  if (v52)
    v57 = 2;
  else
    v57 = 1;
  v58 = (v56 >> v57) - 1;
  v59 = *(unsigned __int16 *)(v55 + 40);
  if (v58 < v59)
    v59 = v58;
  v274 = v59;
  *(_QWORD *)&v60 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v60 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v295 = v60;
  v296 = v60;
  v293 = v60;
  v294 = v60;
  v291 = v60;
  v292 = v60;
  *(_OWORD *)v289 = v60;
  v290 = v60;
  *v53 |= 0x80000000;
  v276[0] = 0;
  ScalerGetFontTable(v235, 1751672161, 0, v276, 0, 36);
  v61 = *((unsigned __int16 *)v276[0] + 17);
  ScalerReleaseFontTable(v235, v276[0]);
  v253 = (unsigned int *)0xAAAAAAAAAAAAAAAALL;
  ScalerGetFontTable(v235, 1819239265, 0, &v253, 0, 0);
  v62 = v253;
  v230 = AccumulateComponentGlyphBits(v235, &v274, v53, v253, v52, 0);
  v63 = malloc_type_calloc((unsigned __int16)v230, 2uLL, 0x1000040BDFB0063uLL);
  count = (unsigned __int16)v230 + 1;
  v225 = (char *)malloc_type_calloc(count, 4uLL, 0x100004052888210uLL);
  v239 = 0;
  v241 = 0;
  v64 = 0;
  v65 = 0;
  *(_DWORD *)v225 = 0;
  v66 = v225 + 4;
  v240 = (unsigned __int16)((bswap32(v61) >> 16) - 1);
  v67 = v63;
  do
  {
    if (*v53)
    {
      v68 = 0x80000000;
      v69 = v274;
      do
      {
        if ((*v53 & v68) != 0)
        {
          v65 |= (_DWORD)v240 == v64;
          if (v64 >= v69)
            break;
          NewGlyphSize = GetNewGlyphSize((uint64_t)v254, *(memoryContext **)a1, (unsigned __int16)v64, (uint64_t)v62, v52);
          *v67++ = v64;
          v239 += NewGlyphSize;
          *v66++ = bswap32(v239);
          v71 = v241;
          if (v64 <= (int)v240)
            v71 = v241 + 1;
          v241 = v71;
          v69 = v274;
        }
        ++v64;
        if (v68 < 2)
          break;
        v68 >>= 1;
      }
      while (v64 < v69);
    }
    else
    {
      v64 += 32;
      v69 = v274;
    }
    ++v53;
  }
  while (v64 < v69);
  v72 = 2 * ((unsigned __int16)v230 - (unsigned __int16)v241) + 4 * (unsigned __int16)v241 + 2;
  if (((unsigned __int16)v241 >= (unsigned __int16)v230) | v65 & 1)
    v72 = 2 * ((unsigned __int16)v230 - (unsigned __int16)v241) + 4 * (unsigned __int16)v241;
  v216 = ((unsigned __int16)v241 >= (unsigned __int16)v230) | v65;
  v217 = v72;
  ScalerReleaseFontTable(v235, v62);
  v73 = v225;
  v74 = (unsigned __int16)v230;
  if (bswap32(*(_DWORD *)&v225[4 * (unsigned __int16)v230]) >> 17)
  {
    v215 = 256;
    v78 = 4;
    v79 = 2;
  }
  else
  {
    v75 = (unsigned __int16)v230 + 2;
    v76 = (unsigned int *)v225;
    do
    {
      v77 = *v76++;
      *(_WORD *)v73 = bswap32(bswap32(v77) >> 1) >> 16;
      v73 += 2;
      --v75;
    }
    while (v75 > 1);
    v215 = 0;
    v78 = 2;
    v79 = 1;
  }
  if (BYTE1(v271[0]))
  {
    LODWORD(v276[0]) = 0;
    TFontSurrogate::GetTableIndex((TFontSurrogate *)(*(_QWORD *)v235 + 16), 1735811442, (unsigned int *)v276);
    if (LODWORD(v276[0]))
    {
      v276[0] = (void *)0xAAAAAAAAAAAAAAAALL;
      ScalerGetFontTable(v235, 1735811442, 0, v276, 0, 36);
      v80 = malloc_type_calloc(count, 4uLL, 0x100004052888210uLL);
      v221 = (char *)v80;
      v81 = v78;
      v82 = v276[0];
      v236 = *((_DWORD *)v276[0] + 4);
      v83 = *((_DWORD *)v276[0] + 2);
      *v80 = 0;
      if ((_WORD)v230)
      {
        v84 = 0;
        v85 = v80 + 1;
        v86 = count;
        v87 = v63;
        do
        {
          v88 = *v87++;
          v84 += GetGlyphVariationOffsetAndSize(v88, (uint64_t)v82, 0);
          *v85++ = bswap32(v84);
          --v86;
        }
        while (v86 > 1);
      }
      else
      {
        v84 = 0;
      }
      v91 = v221;
      if (bswap32(*(_DWORD *)&v221[4 * (unsigned __int16)v230]) >> 17)
      {
        v95 = 2;
        v233 = 1;
        v78 = v81;
      }
      else
      {
        v92 = (unsigned __int16)v230 + 2;
        v93 = (unsigned int *)v221;
        v78 = v81;
        do
        {
          v94 = *v93++;
          *(_WORD *)v91 = bswap32(bswap32(v94) >> 1) >> 16;
          v91 += 2;
          --v92;
        }
        while (v92 > 1);
        v233 = 0;
        v95 = 1;
      }
      ScalerReleaseFontTable(v235, v82);
      v90 = bswap32(v236) - bswap32(v83) + v84 + ((_DWORD)count << v95) + 20;
    }
    else
    {
      v233 = 0;
      v221 = 0;
      v90 = 0;
    }
    v74 = (unsigned __int16)v230;
  }
  else
  {
    v233 = 0;
    v221 = 0;
    v90 = 0;
  }
  v96 = 0;
  v97 = 0;
  v98 = 0;
  memset(__src, 170, 28);
  v224 = (v74 << v79) + v78;
  *(_QWORD *)&v99 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v99 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v287 = v99;
  v288 = v99;
  v285 = v99;
  v286 = v99;
  v100 = v239;
  if (!v239)
    v100 = 4;
  v237 = v100;
  v283 = v99;
  v284 = v99;
  v281 = v99;
  v282 = v99;
  v279 = v99;
  v280 = v99;
  v277 = v99;
  v278 = v99;
  *(_OWORD *)v276 = v99;
  do
  {
    if (BYTE1(v271[0]))
      v101 = 1;
    else
      v101 = (unsigned __int16)v96 > 6u;
    if (v101 || ((1 << v96) & 0x53) == 0)
    {
      v103 = DumpFontData(fsg_SplineKey *,streamBuffer *,sfntFontHeader const*,sfntPostScriptInfo const*,unsigned int,BOOL)::fontTables[v96];
      LODWORD(v245[0]) = 0;
      TFontSurrogate::GetTableIndex((TFontSurrogate *)(*(_QWORD *)v235 + 16), v103, (unsigned int *)v245);
      v104 = v245[0];
      if (((uint64_t)v245[0] & 0x80000000) == 0)
      {
        v105 = &v276[2 * (__int16)v98];
        *(_DWORD *)v105 = v103;
        *((_DWORD *)v105 + 1) = 0;
        *((_DWORD *)v105 + 2) = v97;
        if (v103 > 1751672160)
        {
          if (v103 <= 1819239264)
          {
            if (v103 == 1751672161)
            {
              v106 = 36;
            }
            else
            {
              v106 = v104;
              if (v103 == 1752003704)
                v106 = v217;
            }
            goto LABEL_96;
          }
          v106 = v224;
          if (v103 == 1819239265)
            goto LABEL_96;
          if (v103 == 1835104368)
          {
            v106 = 32;
            goto LABEL_96;
          }
          v106 = v104;
          v107 = 1886545264;
        }
        else
        {
          if (v103 > 1735162213)
          {
            v106 = v237;
            if (v103 != 1735162214)
            {
              v106 = v90;
              if (v103 != 1735811442)
              {
                v106 = v104;
                if (v103 == 1751474532)
                  v106 = 54;
              }
            }
            goto LABEL_96;
          }
          if (v103 == 1668707360)
            goto LABEL_88;
          v106 = v104;
          v107 = 1718642541;
        }
        if (v103 == v107)
        {
LABEL_88:
          if (v104)
            v106 = v104;
          else
            v106 = 4;
        }
LABEL_96:
        v97 = (v97 + v106 + 3) & 0xFFFFFFFC;
        HIDWORD(v276[2 * (__int16)v98++ + 1]) = bswap32(v106);
      }
    }
    ++v96;
  }
  while (v96 != 13);
  v108 = (16 * (__int16)v98) | 0xC;
  if ((__int16)v98 >= 1)
  {
    v109 = (unsigned __int16)v98;
    v110 = &v276[1];
    do
    {
      *(_DWORD *)v110 = bswap32(*(_DWORD *)v110 + v108);
      *((_DWORD *)v110 - 2) = bswap32(*((_DWORD *)v110 - 2));
      v110 += 2;
      --v109;
    }
    while (v109);
  }
  LODWORD(__src[0]) = 1702195828;
  WORD2(__src[0]) = bswap32(v98) >> 16;
  *(_DWORD *)((char *)__src + 6) = 0;
  WORD1(__src[1]) = 0;
  *(_DWORD *)(v242 + 131112) = 0;
  v251 = 0;
  if (a4)
    v111 = 14;
  else
    v111 = 119;
  LODWORD(v245[0]) = -1431655766;
  v112 = (char *)ZGetString(v111, (int *)v245);
  StreamBytesThroughBuffer(v242, (int)v245[0], v112);
  ZWriteDataHex(v242, 12, (char *)__src, a4);
  ZWriteDataHex(v242, 16 * (__int16)v98, (char *)v276, a4);
  if ((__int16)v98 > 0)
  {
    if (a4)
      v113 = 15;
    else
      v113 = 120;
    v229 = v113;
    v219 = bswap32(v230) >> 16;
    v214 = bswap32(v241 + ((v216 & 1) == 0)) >> 16;
    if (v233)
      v114 = 2;
    else
      v114 = 1;
    v211 = (_DWORD)count << v114;
    v218 = ((_DWORD)count << v114) + 20;
    v213 = bswap32(v218);
    v212 = __rev16(v233);
    v226 = (unsigned __int16)v98;
    v115 = 0;
    do
    {
      v232 = v115;
      v116 = (unsigned int *)&v276[2 * v115];
      v117 = *v116;
      v118 = bswap32(*v116);
      if (bswap32(v116[3]) + v108 >= 0xFFFF && v118 != 1735162214 && v118 != 1735811442)
      {
        LODWORD(v245[0]) = -1431655766;
        v135 = (char *)ZGetString(v229, (int *)v245);
        StreamBytesThroughBuffer(v242, (int)v245[0], v135);
        v108 = 0;
        v117 = *v116;
      }
      v234 = (unint64_t)v116 | 0xC;
      v121 = bswap32(v117);
      if ((int)v121 > 1751672160)
      {
        if ((int)v121 <= 1819239264)
        {
          if ((_DWORD)v121 != 1751672161)
          {
            if ((_DWORD)v121 == 1752003704)
            {
              v128 = v272;
              if (v271[1])
                v129 = (char *)v271[1];
              else
                v129 = (char *)v268;
              if (!v271[1])
                v128 = (void **)v270 + 1;
              v130 = (unint64_t)*v128;
              v131 = v63;
              if ((_WORD)v241)
              {
                v132 = 0;
                v131 = v63;
                do
                {
                  v133 = &v129[4 * *v131];
                  if ((unint64_t)(v133 + 4) <= v130)
                    ZWriteDataHex(v242, 4, v133, a4);
                  else
                    ZWriteDataHex(v242, 4, DumpFontData(fsg_SplineKey *,streamBuffer *,sfntFontHeader const*,sfntPostScriptInfo const*,unsigned int,BOOL)::kZeroLongMetrics, a4);
                  ++v131;
                  ++v132;
                }
                while ((unsigned __int16)v132 < (unsigned __int16)v241);
              }
              if ((unsigned __int16)v241 < (unsigned __int16)v230)
              {
                if ((v216 & 1) == 0)
                {
                  v134 = &v129[4 * v240];
                  if ((unint64_t)(v134 + 2) <= v130)
                    ZWriteDataHex(v242, 2, v134, a4);
                  else
                    ZWriteDataHex(v242, 2, DumpFontData(fsg_SplineKey *,streamBuffer *,sfntFontHeader const*,sfntPostScriptInfo const*,unsigned int,BOOL)::kZeroLongMetrics, a4);
                }
                v183 = (uint64_t)&v129[4 * v240 + 2 + -2 * v240];
                v184 = v241;
                do
                {
                  if (v183 + 2 * (unint64_t)*v131 + 2 <= v130)
                    v185 = (char *)(v183 + 2 * *v131);
                  else
                    v185 = DumpFontData(fsg_SplineKey *,streamBuffer *,sfntFontHeader const*,sfntPostScriptInfo const*,unsigned int,BOOL)::kZeroLongMetrics;
                  ZWriteDataHex(v242, 2, v185, a4);
                  ++v131;
                  ++v184;
                }
                while ((unsigned __int16)v184 < (unsigned __int16)v230);
              }
              v108 += v217;
              if (v271[1])
              {
                free(v271[1]);
                v271[1] = 0;
                v272[0] = 0;
              }
              goto LABEL_226;
            }
LABEL_207:
            v245[0] = 0;
            ScalerGetFontTable(v235, v121, 0, v245, 0, 0);
            v180 = v245[0];
            ZWriteDataHex(v242, bswap32(*(_DWORD *)v234), (char *)v245[0], a4);
            v127 = *(_DWORD *)v234;
            ScalerReleaseFontTable(v235, v180);
LABEL_208:
            v181 = bswap32(v127);
            goto LABEL_210;
          }
          v245[0] = 0;
          ScalerGetFontTable(v235, 1751672161, 0, v245, 0, 36);
          v138 = v245[0];
          ZWriteDataHex(v242, 34, (char *)v245[0], a4);
          LOWORD(v249) = v214;
          ZWriteDataHex(v242, 2, (char *)&v249, a4);
          ScalerReleaseFontTable(v235, v138);
          v108 += 36;
        }
        else if ((_DWORD)v121 == 1819239265)
        {
          ZWriteDataHex(v242, v224, v225, a4);
          v108 += v224;
        }
        else
        {
          if ((_DWORD)v121 != 1835104368)
          {
            v125 = 1886545264;
LABEL_132:
            if ((_DWORD)v121 != v125)
              goto LABEL_207;
            v245[0] = 0;
            if (ScalerGetFontTable(v235, v121, 0, v245, 1, 0))
            {
              v126 = v245[0];
              ZWriteDataHex(v242, bswap32(*(_DWORD *)v234), (char *)v245[0], a4);
              v127 = *(_DWORD *)v234;
              ScalerReleaseFontTable(v235, v126);
              goto LABEL_208;
            }
            v249 = 0;
            ZWriteDataHex(v242, bswap32(*(_DWORD *)v234), (char *)&v249, a4);
            v181 = bswap32(*(_DWORD *)v234);
LABEL_210:
            v108 += v181;
            goto LABEL_226;
          }
          v245[0] = 0;
          LOWORD(v249) = v219;
          ScalerGetFontTable(v235, 1835104368, 0, v245, 0, 32);
          v179 = (char *)v245[0];
          ZWriteDataHex(v242, 4, (char *)v245[0], a4);
          ZWriteDataHex(v242, 2, (char *)&v249, a4);
          ZWriteDataHex(v242, 26, v179 + 6, a4);
          ScalerReleaseFontTable(v235, v179);
          v108 += 32;
        }
      }
      else
      {
        if ((int)v121 <= 1735162213)
        {
          if ((_DWORD)v121 == 1668707360)
          {
            v136 = (char *)v272[1];
            v245[0] = v272[1];
            if (v272[1])
            {
              v137 = *(_DWORD *)v234;
LABEL_212:
              ZWriteDataHex(v242, bswap32(v137), v136, a4);
              v182 = bswap32(*(_DWORD *)v234);
              if (v272[1])
              {
                free(v136);
                v272[1] = 0;
              }
              else
              {
                ScalerReleaseFontTable(v235, v136);
              }
            }
            else
            {
              ScalerGetFontTable(v235, 1668707360, 0, v245, 1, 0);
              v136 = (char *)v245[0];
              v137 = *(_DWORD *)v234;
              if (v245[0])
                goto LABEL_212;
              v249 = 0;
              ZWriteDataHex(v242, bswap32(v137), (char *)&v249, a4);
              v182 = bswap32(*(_DWORD *)v234);
            }
            v108 += v182;
            goto LABEL_226;
          }
          v125 = 1718642541;
          goto LABEL_132;
        }
        if ((_DWORD)v121 == 1735162214)
        {
          if (v239)
          {
            v139 = v63;
            v140 = (unsigned __int16)v230;
            do
            {
              v245[0] = (void *)0xAAAAAAAAAAAAAAAALL;
              NewGlyphData = GetNewGlyphData(*v139, (uint64_t)v254, v245);
              v142 = NewGlyphData;
              v143 = (char *)v245[0];
              if (NewGlyphData >= 0xB && v245[0] != 0)
              {
                if (NewGlyphData + v108 >= 0xFFFF)
                {
                  LODWORD(v249) = -1431655766;
                  v145 = (char *)ZGetString(v229, (int *)&v249);
                  StreamBytesThroughBuffer(v242, (int)v249, v145);
                  v108 = 0;
                }
                v231 = v108 + v142;
                if ((*(_WORD *)v143 & 0x80) == 0)
                  goto LABEL_189;
                ZWriteDataHex(v242, 10, v143, a4);
                v146 = (unint64_t)&v143[v142];
                v143 += 10;
                do
                {
                  LOWORD(v249) = -21846;
                  if ((unint64_t)v143 > 0xFFFFFFFFFFFFFFF9
                    || (v245[0] <= v143 ? (v147 = (unint64_t)(v143 + 6) > v146) : (v147 = 1), v147))
                  {
                    v206 = __cxa_allocate_exception(2uLL);
                    *v206 = 5;
                    __cxa_throw(v206, MEMORY[0x1E0DE4F10], 0);
                  }
                  v148 = *(unsigned __int16 *)v143;
                  ZWriteDataHex(v242, 2, v143, a4);
                  if ((_WORD)v230)
                  {
                    v149 = 0;
                    v150 = bswap32(*((unsigned __int16 *)v143 + 1)) >> 16;
                    v151 = (unsigned __int16)v230 - 1;
                    do
                    {
                      v152 = (v151 + v149) >> 1;
                      v153 = (unsigned __int16)v63[v152];
                      if (v153 >= v150)
                      {
                        if (v153 <= v150)
                          goto LABEL_178;
                        v151 = v152 - 1;
                      }
                      else
                      {
                        v149 = v152 + 1;
                      }
                    }
                    while (v149 <= v151);
                  }
                  v152 = -1;
LABEL_178:
                  LOWORD(v249) = bswap32(v152) >> 16;
                  ZWriteDataHex(v242, 2, (char *)&v249, a4);
                  v154 = bswap32(v148) >> 16;
                  v155 = v143 + 4;
                  v156 = 1;
                  if ((v154 & 1) != 0)
                    v156 = 2;
                  v157 = v156 + ((v154 >> 3) & 1);
                  if ((v154 & 0x40) != 0)
                    v157 = v156 + 2;
                  v158 = v156 | 4;
                  if ((v154 & 0x80) != 0)
                    v159 = v158;
                  else
                    v159 = v157;
                  v160 = &v155[2 * v159];
                  if (v160 < v155 || (unint64_t)v160 > v146)
                  {
                    v207 = __cxa_allocate_exception(2uLL);
                    *v207 = 5;
                    __cxa_throw(v207, MEMORY[0x1E0DE4F10], 0);
                  }
                  ZWriteDataHex(v242, 2 * v159, v155, a4);
                  v143 = &v155[2 * v159];
                }
                while ((v154 & 0x20) != 0);
                v142 -= (__int16)((_WORD)v143 - LOWORD(v245[0]));
                if (v142)
LABEL_189:
                  ZWriteDataHex(v242, v142, v143, a4);
                v108 = v231;
              }
              ++v139;
              v161 = __OFSUB__(v140--, 1);
            }
            while (!((v140 < 0) ^ v161 | (v140 == 0)));
          }
          else
          {
            LODWORD(v245[0]) = 0;
            ZWriteDataHex(v242, 4, (char *)v245, a4);
          }
          goto LABEL_226;
        }
        if ((_DWORD)v121 == 1735811442)
        {
          v245[0] = 0;
          v250 = -1431655766;
          ScalerGetFontTable(v235, 1735811442, 0, v245, 0, 36);
          v162 = v245[0];
          v163 = bswap32(*((_DWORD *)v245[0] + 4)) + v218 - bswap32(*((_DWORD *)v245[0] + 2));
          if ((int)(v163 + v108) >= 0xFFFF)
          {
            LODWORD(v249) = -1431655766;
            v164 = (char *)ZGetString(v229, (int *)&v249);
            StreamBytesThroughBuffer(v242, (int)v249, v164);
            v108 = 0;
          }
          ZWriteDataHex(v242, 8, (char *)v162, a4);
          v250 = v213;
          ZWriteDataHex(v242, 4, (char *)&v250, a4);
          LOWORD(v249) = v219;
          ZWriteDataHex(v242, 2, (char *)&v249, a4);
          LOWORD(v249) = v212;
          ZWriteDataHex(v242, 2, (char *)&v249, a4);
          v250 = bswap32(bswap32(*((_DWORD *)v162 + 4)) + v218 - bswap32(*((_DWORD *)v162 + 2)));
          ZWriteDataHex(v242, 4, (char *)&v250, a4);
          ZWriteDataHex(v242, v211, v221, a4);
          v165 = *((_DWORD *)v162 + 4);
          v166 = *((_DWORD *)v162 + 2);
          ScalerReleaseFontTable(v235, v162);
          v167 = bswap32(v165);
          v168 = bswap32(v166);
          v169 = v167 - v168;
          v245[0] = 0;
          if ((int)(v167 - v168) >= 1)
          {
            ScalerGetFontTable(v235, 1735811442, v168, v245, 0, v167 - v168);
            v170 = v245[0];
            ZWriteDataHex(v242, v169, (char *)v245[0], a4);
            ScalerReleaseFontTable(v235, v170);
            v245[0] = 0;
          }
          ScalerGetFontTable(v235, 1735811442, 0, v245, 0, v168);
          v108 += v163;
          v249 = (void *)0xAAAAAAAAAAAAAAAALL;
          v248 = -1431655766;
          v171 = count;
          v172 = v63;
          v173 = v245[0];
          do
          {
            v174 = *v172++;
            GlyphVariationOffsetAndSize = GetGlyphVariationOffsetAndSize(v174, (uint64_t)v173, &v248);
            if (GlyphVariationOffsetAndSize)
            {
              v176 = GlyphVariationOffsetAndSize;
              ScalerGetFontTable(v235, 1735811442, v248, &v249, 0, GlyphVariationOffsetAndSize);
              if (v176 + v108 >= 0xFFFF)
              {
                v275 = -1431655766;
                v177 = (char *)ZGetString(v229, &v275);
                StreamBytesThroughBuffer(v242, v275, v177);
                v108 = 0;
              }
              v178 = v249;
              ZWriteDataHex(v242, v176, (char *)v249, a4);
              ScalerReleaseFontTable(v235, v178);
              v108 += v176;
            }
            --v171;
          }
          while (v171 > 1);
          ScalerReleaseFontTable(v235, v173);
          goto LABEL_226;
        }
        if ((_DWORD)v121 != 1751474532)
          goto LABEL_207;
        v122 = *(_OWORD *)v223;
        v123 = *((_OWORD *)v223 + 1);
        v124 = *((_OWORD *)v223 + 2);
        *(_QWORD *)&v247[14] = *(_QWORD *)((char *)v223 + 46);
        v246 = v123;
        *(_OWORD *)v247 = v124;
        *(_OWORD *)v245 = v122;
        *(_WORD *)&v247[18] = v215;
        ZWriteDataHex(v242, 54, (char *)v245, a4);
        v108 += 54;
      }
LABEL_226:
      if ((*(_BYTE *)(v234 + 3) & 3) != 0)
      {
        ZWriteDataHex(v242, 4 - (*(_BYTE *)(v234 + 3) & 3), (char *)&v251, a4);
        v108 = v108 - (*(_BYTE *)(v234 + 3) & 3) + 4;
      }
      v115 = v232 + 1;
    }
    while (v232 + 1 != v226);
  }
  if (a4)
    v186 = 16;
  else
    v186 = 121;
  LODWORD(v245[0]) = -1431655766;
  v187 = (char *)ZGetString(v186, (int *)v245);
  StreamBytesThroughBuffer(v242, (int)v245[0], v187);
  ZWriteStringF(v242, 17, v188, v189, v190, v191, v192, v193, (unsigned __int16)v230);
  LOBYTE(v245[0]) = -86;
  if ((_WORD)v230)
  {
    v194 = 0;
    do
    {
      ZGetGlyphName((uint64_t)v227, FontTable, (unsigned __int16)v274, (unsigned __int16)v63[v194], (char *)v245, v289, 0x80uLL);
      if (LOBYTE(v245[0]))
        ZWriteStringF(v242, 18, v195, v196, v197, v198, v199, v200, LOBYTE(v245[0]));
      ++v194;
    }
    while ((unsigned __int16)v230 != (_DWORD)v194);
  }
  LODWORD(v245[0]) = -1431655766;
  v201 = (char *)ZGetString(19, (int *)v245);
  StreamBytesThroughBuffer(v242, (int)v245[0], v201);
  free(v221);
  free(v225);
  free(v63);
  UninitGlyphDataContext((memoryContext **)a1, (uint64_t)v254);
  v202 = v242;
  if ((*(_BYTE *)(*(_QWORD *)(v242 + 8) + 16) & 1) != 0)
  {
    v254[0] = -1431655766;
    v203 = (char *)ZGetString(20, v254);
    StreamBytesThroughBuffer(v242, v254[0], v203);
    v254[0] = -1431655766;
    v204 = (char *)ZGetString(21, v254);
    StreamBytesThroughBuffer(v242, v254[0], v204);
    v202 = v242;
  }
  v254[0] = -1431655766;
  v205 = (char *)ZGetString(22, v254);
  StreamBytesThroughBuffer(v202, v254[0], v205);
  if (v244)
    ScalerReleaseFontTable(v222, v244);
  ScalerReleaseFontTable(v222, v243);
}

uint64_t StreamPortableTTFont(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  char *v6;
  char *v7;
  uint64_t result;
  int v9;
  int v10;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_DWORD *)(v4 + 16) & 0xFFFFF000;
  *(_DWORD *)(v4 + 16) = v5 | 8;
  StreamTTFont(a1, a2, 1, 1);
  v9 = -1431655766;
  v6 = (char *)ZGetString(201, &v9);
  StreamBytesThroughBuffer(a2, v9, v6);
  *(_DWORD *)(*(_QWORD *)(a2 + 8) + 16) = v5 | 2;
  StreamT1Font(a1, a2, 1);
  v10 = -1431655766;
  v7 = (char *)ZGetString(202, &v10);
  result = StreamBytesThroughBuffer(a2, v10, v7);
  *(_DWORD *)(*(_QWORD *)(a2 + 8) + 16) = v5 | 0x20;
  return result;
}

void StreamVariationPSOperator(memoryContext **a1, uint64_t a2)
{
  __int128 v4;
  char *v5;
  char *v6;
  __int128 v7;
  void *v8[2];
  __int128 v9;
  unint64_t v10;
  int v11;

  v10 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)v8 = v4;
  v9 = v4;
  v7 = v4;
  if (InitVariationInfo((uint64_t)a1, (uint64_t)&v7, *(_DWORD *)(*(_QWORD *)(a2 + 8) + 28), *(uint64_t **)(*(_QWORD *)(a2 + 8) + 32)))
  {
    v11 = -1431655766;
    v5 = (char *)ZGetString(44, &v11);
    StreamBytesThroughBuffer(a2, v11, v5);
    StreamBinaryThroughBuffer(a2, 8 * *(_DWORD *)(*(_QWORD *)(a2 + 8) + 28), *(char **)(*(_QWORD *)(a2 + 8) + 32));
    v11 = -1431655766;
    v6 = (char *)ZGetString(45, &v11);
    StreamBytesThroughBuffer(a2, v11, v6);
    ScalerDisposeBlock(*a1, (char *)v8[1], -1);
  }
}

void StreamFlatFont(memoryContext **a1, uint64_t a2, int a3, uint64_t a4, __CFArray *a5)
{
  __int128 v7;
  _QWORD *v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int *v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  int v15;
  char v16;
  int v17;
  const void *v18;
  _DWORD *v19;
  int v20;
  uint64_t v21;
  _DWORD *v22;
  _WORD *v23;
  unsigned int v24;
  int NewGlyphSize;
  _BOOL4 v26;
  __int128 v27;
  __int128 v28;
  unsigned int v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  int v33;
  __int128 v34;
  unsigned int v35;
  const char *v36;
  size_t v37;
  size_t v38;
  int v39;
  uint64_t v40;
  void *v41;
  unsigned int v42;
  uint64_t v43;
  BOOL v44;
  int v45;
  int v46;
  unsigned __int16 *v47;
  _WORD *v48;
  unsigned int *v49;
  int FontTable;
  _QWORD *v51;
  int v52;
  unsigned int v53;
  char *v54;
  unint64_t v55;
  unint64_t v56;
  int v57;
  void *v58;
  _QWORD *v59;
  _OWORD *v60;
  unsigned int v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  const char *v65;
  uint64_t v67;
  unsigned int v68;
  unsigned int v69;
  char *v70;
  unsigned __int16 *v71;
  unsigned __int16 *v72;
  char *v73;
  int v74;
  unsigned __int16 *v75;
  unsigned __int16 *v76;
  uint64_t v77;
  uint64_t v78;
  unsigned int v79;
  uint64_t v80;
  unsigned int v81;
  unsigned int v82;
  size_t v83;
  uint64_t v84;
  unsigned int v85;
  unsigned int v86;
  char *v87;
  _WORD *v88;
  char *v89;
  unsigned int v90;
  __int16 v91;
  unsigned __int16 *v92;
  unsigned __int16 *v93;
  uint64_t v94;
  unint64_t v95;
  unsigned __int16 *v96;
  unsigned int NewGlyphData;
  char *v98;
  BOOL v99;
  uint64_t v100;
  BOOL v101;
  unsigned int v102;
  int v103;
  unsigned __int16 *v104;
  unsigned __int16 *v105;
  unint64_t v106;
  unsigned int v107;
  unsigned int v108;
  _WORD *v109;
  unsigned __int16 *v110;
  unsigned int v111;
  unsigned int v112;
  uint64_t v113;
  unsigned int v114;
  unsigned int v115;
  unsigned int v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  _QWORD *v120;
  int v121;
  uint64_t v122;
  _QWORD *v123;
  unsigned int v124;
  unint64_t v125;
  uint64_t v126;
  unint64_t v127;
  unint64_t v128;
  uint64_t v131;
  unsigned int v132;
  uint64_t v133;
  unsigned int v134;
  BOOL v135;
  int v136;
  int v137;
  BOOL v138;
  _QWORD *v140;
  int v141;
  _QWORD *v142;
  char *v143;
  __int16 v144;
  char *v145;
  uint64_t v146;
  unsigned __int16 v147;
  unsigned int v148;
  unsigned int v149;
  uint64_t v150;
  _WORD *v151;
  unsigned __int16 *v152;
  _WORD *v153;
  uint64_t v154;
  uint64_t v155;
  unsigned int v156;
  char *v157;
  char *v158;
  _QWORD *v160;
  __int128 v161;
  int v162;
  char *v163;
  _WORD *v164;
  unsigned __int16 *v165;
  uint64_t v166;
  const char *v167;
  void *v168;
  uint64_t v169;
  unsigned int v170;
  BOOL v172;
  int v174;
  char *v175;
  uint64_t v176;
  _WORD *v177;
  __int128 v178;
  uint64_t v179;
  const char *v180;
  void *v181;
  uint64_t v182;
  size_t v183;
  const char *v184;
  unsigned int v185;
  _WORD *v186;
  char v187;
  unsigned int v188;
  int v189;
  uint64_t v190;
  unsigned int v191;
  __int16 v192;
  __int16 v193;
  int v194;
  unsigned int v195;
  __int16 v196;
  unsigned int v197;
  uint64_t v198;
  unsigned int v199;
  uint64_t v200;
  _QWORD *v201;
  int v202;
  int v203;
  uint64_t v204;
  int v205;
  _QWORD *v206;
  unsigned int v207;
  char *v208;
  _DWORD *v209;
  uint64_t v210;
  uint64_t v211;
  _QWORD *v212;
  char *v213;
  int v214;
  int v215;
  _WORD *v216;
  _WORD *v217;
  _WORD *v218;
  _WORD *v219;
  _DWORD *v220;
  _WORD *v221;
  _WORD *exception;
  _WORD *v223;
  int v224;
  uint64_t v225;
  int v226;
  uint64_t v227;
  memoryContext **v229;
  BOOL v230;
  int v231;
  unsigned int v233;
  char *__src;
  char *v235;
  char *v236;
  void *v237;
  _WORD *v238;
  const char *v239;
  unsigned __int16 v240;
  signed int v241;
  _QWORD *v242;
  uint64_t v243;
  unsigned int v244;
  int v245[2];
  _WORD *v246;
  _WORD *v248;
  memoryContext *v249;
  unsigned int v250;
  char v251[9];
  _OWORD v252[2];
  int v253;
  _OWORD v254[2];
  _BYTE v255[22];
  _BYTE v256[28];
  unsigned __int16 v257;
  __int16 v258;
  uint64_t v259;
  int v260;
  void *v261;
  int v262;
  _OWORD v263[14];
  __int128 v264;
  __int128 v265;
  __int128 v266;
  __int128 v267;
  __int128 v268;
  __int128 v269;
  __int128 v270;
  __int128 v271;
  __int128 v272;
  __int128 v273;
  _OWORD __n[8];
  _DWORD v275[4];
  __int128 v276;
  __int128 v277;
  __int128 v278;
  __int128 v279;
  __int128 v280;
  __int128 v281;
  __int128 v282;
  unsigned int v283[4];
  _OWORD v284[8];
  int v285;
  _QWORD __dst[55];

  __dst[52] = *MEMORY[0x1E0C80C00];
  v249 = *a1;
  *(_QWORD *)&v7 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v272 = v7;
  v273 = v7;
  v270 = v7;
  v271 = v7;
  v268 = v7;
  v269 = v7;
  v266 = v7;
  v267 = v7;
  v264 = v7;
  v265 = v7;
  v263[12] = v7;
  v263[13] = v7;
  v263[10] = v7;
  v263[11] = v7;
  v263[8] = v7;
  v263[9] = v7;
  v263[6] = v7;
  v263[7] = v7;
  v263[4] = v7;
  v263[5] = v7;
  v263[2] = v7;
  v263[3] = v7;
  v263[0] = v7;
  v263[1] = v7;
  v8 = a1 + 1;
  v9 = *((unsigned __int16 *)a1[1] + 20);
  v262 = v9;
  v10 = *(_QWORD *)(a2 + 8);
  v11 = *(unsigned int **)(v10 + 48);
  memcpy(__dst, "fpaZ", 0x1A0uLL);
  v229 = a1;
  InitGlyphDataContext((uint64_t)a1, v10, (uint64_t)v263);
  __src = (char *)malloc_type_calloc(1uLL, 0xDCuLL, 0xA7917466uLL);
  v261 = 0;
  v12 = *v8;
  v13 = *(_DWORD *)(*v8 + 100);
  *v11 |= 0x80000000;
  v14 = *(__int16 *)(v12 + 144);
  v260 = 0;
  v259 = 0;
  if (v13)
  {
    v15 = *(_DWORD *)(v12 + 100);
    if (v14)
      v16 = 2;
    else
      v16 = 1;
    v17 = v15 >> v16;
    if (v17 < 2)
    {
      exception = __cxa_allocate_exception(2uLL);
      *exception = 5;
      __cxa_throw(exception, MEMORY[0x1E0DE4F10], 0);
    }
    if (v17 <= v9)
      v262 = v17 - 1;
    *(_QWORD *)v275 = 0;
    ScalerGetFontTable(v249, 1819239265, 0, v275, 0, 0);
    v283[0] = 0;
    TFontSurrogate::GetTableIndex((TFontSurrogate *)(*(_QWORD *)v249 + 16), 1735162214, v283);
    v18 = *(const void **)v275;
    v241 = AccumulateComponentGlyphBits(v249, &v262, v11, *(unsigned int **)v275, v14, &v259);
    v248 = malloc_type_calloc(v241, 2uLL, 0x1000040BDFB0063uLL);
    v19 = malloc_type_calloc(v241 + 1, 4uLL, 0x100004052888210uLL);
    v246 = v19;
    *v19 = 0;
    v20 = v262;
    if (v262 < 1)
    {
      v250 = 0;
    }
    else
    {
      LODWORD(v21) = 0;
      v250 = 0;
      v22 = v19 + 1;
      v23 = v248;
      do
      {
        v21 = (int)v21;
        v24 = 0x80000000;
        do
        {
          if ((*v11 & v24) != 0)
          {
            NewGlyphSize = GetNewGlyphSize((uint64_t)v263, v249, (unsigned __int16)v21, (uint64_t)v18, v14);
            if (a5)
              CFArrayAppendValue(a5, (const void *)v21);
            *v23++ = v21;
            v250 += NewGlyphSize;
            *v22++ = bswap32(v250);
            v20 = v262;
          }
          ++v21;
          if (v24 < 2)
            break;
          v24 >>= 1;
        }
        while (v21 < v20);
        ++v11;
      }
      while (v20 > (int)v21);
    }
    v26 = (v250 & 0xFFFE0000) != 0;
    ScalerReleaseFontTable(v249, v18);
  }
  else
  {
    v248 = malloc_type_calloc(1uLL, 2uLL, 0x1000040BDFB0063uLL);
    v246 = malloc_type_calloc(1uLL, 4uLL, 0x100004052888210uLL);
    v26 = 0;
    v241 = 0;
    v250 = 0;
  }
  v285 = -1431655766;
  *(_QWORD *)&v27 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v27 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v284[7] = v27;
  v284[6] = v27;
  v284[5] = v27;
  v284[4] = v27;
  v284[3] = v27;
  v284[2] = v27;
  v284[1] = v27;
  v284[0] = v27;
  *(_OWORD *)v283 = v27;
  *(_QWORD *)v275 = 0;
  ScalerGetFontTable(v249, 1835104368, 0, v275, 0, 32);
  v28 = *(_OWORD *)(*(_QWORD *)v275 + 12);
  *(_OWORD *)v256 = **(_OWORD **)v275;
  *(_OWORD *)&v256[12] = v28;
  ScalerReleaseFontTable(v249, *(const void **)v275);
  v29 = bswap32(v241);
  v233 = HIWORD(v29);
  *(_DWORD *)&v256[4] = HIWORD(v29);
  *(_WORD *)&v256[8] = 0;
  *(_WORD *)&v256[10] = bswap32((unsigned __int16)v259) >> 16;
  *(_WORD *)&v256[12] = bswap32(WORD2(v259)) >> 16;
  v257 = 0;
  v258 = bswap32((unsigned __int16)v260) >> 16;
  __dst[38] = v256;
  HIDWORD(__dst[37]) = 32;
  *(_QWORD *)v275 = 0;
  ScalerGetFontTable(v249, 1751474532, 0, v275, 0, 54);
  v31 = *(_OWORD *)(*(_QWORD *)v275 + 16);
  v30 = *(_OWORD *)(*(_QWORD *)v275 + 32);
  v32 = **(_OWORD **)v275;
  *(_QWORD *)&v255[14] = *(_QWORD *)(*(_QWORD *)v275 + 46);
  v254[1] = v31;
  *(_OWORD *)v255 = v30;
  v254[0] = v32;
  *(_WORD *)&v255[18] = v26 << 8;
  ScalerReleaseFontTable(v249, *(const void **)v275);
  __dst[22] = v254;
  HIDWORD(__dst[21]) = 54;
  *(_QWORD *)v275 = 0;
  ScalerGetFontTable(v249, 1751672161, 0, v275, 0, 36);
  v33 = *(_DWORD *)(*(_QWORD *)v275 + 32);
  v34 = *(_OWORD *)(*(_QWORD *)v275 + 16);
  v252[0] = **(_OWORD **)v275;
  v252[1] = v34;
  v253 = v33;
  ScalerReleaseFontTable(v249, *(const void **)v275);
  v35 = HIWORD(v253);
  HIWORD(v253) = v233;
  __dst[26] = v252;
  HIDWORD(__dst[25]) = 36;
  __dst[42] = v283;
  v36 = *(const char **)(*(_QWORD *)(a2 + 8) + 56);
  v37 = strlen(v36);
  *(_QWORD *)v283 = 0x100120001000000;
  if (v37 >= 0x7F)
    v38 = 127;
  else
    v38 = v37;
  v283[2] = 0;
  LOWORD(v283[3]) = 1536;
  HIWORD(v283[3]) = (_WORD)v38 << 8;
  LOWORD(v284[0]) = 0;
  memcpy((char *)v284 + 2, v36, v38);
  v39 = (v38 + 21) & 0xFC;
  if (v39 != (_DWORD)v38 + 18)
    bzero((char *)v283 + (v38 + 18), (v39 - (v38 + 18)));
  HIDWORD(__dst[41]) = (v38 + 21) & 0xFC;
  *(_QWORD *)&v251[1] = 0;
  v40 = 0;
  v235 = 0;
  v236 = 0;
  v242 = 0;
  v41 = 0;
  v42 = bswap32(v35) >> 16;
  v238 = 0;
  v226 = 4 * v241 + 8;
  *(_QWORD *)v245 = ScalerGetFontTable(v249, 1886352244, 0, &v251[1], 1, 0);
  v43 = 2 * v241;
  v225 = v43 + 34;
  v227 = v43 + 37;
  v44 = v26;
  v45 = 4 * v241 + 4;
  if (!v26)
    v45 = 2 * v241 + 2;
  v231 = v45;
  if (v241 < 0)
    v44 = 1;
  v230 = v44;
  v46 = v241 + 1;
  v47 = v248;
  v48 = v246;
  do
  {
    v49 = (unsigned int *)&__dst[4 * v40];
    if (*((_BYTE *)v49 + 25))
    {
      *(_QWORD *)v275 = 0;
      FontTable = ScalerGetFontTable(v249, *v49, 0, v275, *((unsigned __int8 *)v49 + 24) == 0, 0);
      v51 = &__dst[4 * v40];
      v51[2] = *(_QWORD *)v275;
      *((_DWORD *)v51 + 3) = FontTable;
      v47 = v248;
      v48 = v246;
LABEL_266:
      v46 = v241 + 1;
      goto LABEL_267;
    }
    v52 = *v49;
    if (v52 <= 1735162213)
    {
      v244 = v42;
      if (v52 == 1516335206)
      {
        *(_QWORD *)v275 = 0xAAAAAAAAAAAAAAAALL;
        v68 = ScalerGetFontTable(v249, 1516335206, 0, v275, 1, 0);
        v69 = v68;
        if (!v68)
          goto LABEL_265;
        v70 = *(char **)v275;
        if (v68 >= 9 && **(_DWORD **)v275 == 256)
        {
          v71 = (unsigned __int16 *)malloc_type_calloc(v241, 2uLL, 0x1000040BDFB0063uLL);
          v72 = v71;
          v73 = v70 + 8;
          v74 = 0;
          if (v241 > 0)
          {
            v75 = v248;
            v76 = v71;
            v77 = v241;
            do
            {
              v79 = *v75++;
              v78 = v79;
              if (4 * (unint64_t)v79 + 12 <= v69
                && (v80 = bswap32(*(_DWORD *)&v73[4 * v78]), v80 + 10 <= (unint64_t)v69))
              {
                v82 = bswap32(*(unsigned __int16 *)&v70[v80 + 8]) >> 16;
                if ((unint64_t)((2 * v82 + 15) & 0x3FFFC) + v80 <= v69)
                  v81 = v82;
                else
                  v81 = 0;
              }
              else
              {
                v81 = 0;
              }
              *v76++ = v81;
              v74 += (2 * v81 + 15) & 0x3FFFC;
              --v77;
            }
            while (v77);
          }
          LODWORD(v83) = v74 + v226;
          v242 = malloc_type_calloc(1uLL, (v74 + v226), 0x5CCC55FDuLL);
          *v242 = 256;
          if (v241 > 0)
          {
            v84 = 0;
            v85 = 4 * v241 + 8;
            do
            {
              *((_DWORD *)v242 + v84 + 2) = bswap32(v85);
              v86 = v72[v84];
              v87 = (char *)v242 + v85;
              *(_QWORD *)v87 = -1;
              v88 = v87 + 10;
              *((_WORD *)v87 + 4) = __rev16(v86);
              if (v86)
              {
                v89 = &v70[bswap32(*(_DWORD *)&v73[4 * (unsigned __int16)v248[v84]]) + 10];
                v90 = v86;
                do
                {
                  v91 = *(_WORD *)v89;
                  v89 += 2;
                  *v88++ = v91;
                  --v90;
                }
                while (v90);
              }
              *v88 = 0;
              v85 += (2 * v86 + 15) & 0x3FFFC;
              ++v84;
            }
            while (v84 != v241);
          }
          free(v72);
        }
        else
        {
          LODWORD(v83) = 0;
          v242 = 0;
        }
        ScalerReleaseFontTable(v249, v70);
        v142 = &__dst[4 * v40];
        v143 = (char *)v242;
LABEL_264:
        v142[2] = v143;
        *((_DWORD *)v142 + 3) = v83;
        goto LABEL_265;
      }
      if (v52 != 1668112752)
      {
        if (v52 != 1668707360)
        {
          v47 = v248;
          goto LABEL_175;
        }
        v57 = ScalerGetFontTable(v249, 1668707360, 0, &v261, 1, 0);
        v58 = v261;
        if (*((_QWORD *)&v272 + 1))
        {
          ScalerReleaseFontTable(v249, v261);
          v58 = (void *)*((_QWORD *)&v272 + 1);
          v261 = (void *)*((_QWORD *)&v272 + 1);
        }
        v59 = &__dst[4 * v40];
        v59[2] = v58;
        *((_DWORD *)v59 + 3) = v57;
        goto LABEL_265;
      }
      if (a3)
      {
        *(_QWORD *)v275 = 0xAAAAAAAAAAAAAAAALL;
        v124 = ScalerGetFontTable(v249, 1668112752, 0, v275, 1, 4);
        if (*(_QWORD *)v275)
        {
          v125 = *(_QWORD *)v275 + v124;
          v126 = __rev16(*(unsigned __int16 *)(*(_QWORD *)v275 + 2));
          v127 = *(_QWORD *)v275 + 4 + 8 * v126;
          v128 = ((unint64_t)v124 - 4) >> 3;
          if (*(_QWORD *)v275 + 12 > v125)
            v128 = 0;
          if ((v127 > v125 || v127 < *(_QWORD *)v275 + 4) && v128 != v126)
          {
            v223 = __cxa_allocate_exception(2uLL);
            *v223 = 5;
            __cxa_throw(v223, MEMORY[0x1E0DE4F10], 0);
          }
          if (*(_WORD *)(*(_QWORD *)v275 + 2))
          {
            v131 = 0;
            v132 = 0;
            if (v126 <= 1)
              LODWORD(v126) = 1;
            v133 = 8 * v126;
            do
            {
              if (*(_WORD *)(*(_QWORD *)v275 + v131 + 4) == 256)
              {
                v134 = bswap32(*(unsigned __int16 *)(*(_QWORD *)v275 + v131 + 6)) >> 16;
                v135 = v134 > 0x19 || ((1 << v134) & 0x200000E) == 0;
                v136 = v135;
                if (!v135)
                  v132 = v134;
                v99 = v134 > 0x19;
                v137 = (1 << v134) & 0x200000E;
                v138 = v99 || v137 == 0;
                if (!v138 && v136 == 0)
                  break;
              }
              v131 += 8;
            }
            while (v133 != v131);
            ScalerReleaseFontTable(v249, *(const void **)v275);
            if ((_WORD)v132)
            {
              v236 = (char *)malloc_type_calloc(1uLL, 0x1AuLL, 0x677CC8C4uLL);
              *(_DWORD *)v236 = 0x1000000;
              *((_WORD *)v236 + 2) = 256;
              *((_WORD *)v236 + 3) = bswap32(v132) >> 16;
              *((_QWORD *)v236 + 1) = 0xC0006000C000000;
              *(_DWORD *)(v236 + 18) = 0x1000000;
              *((_WORD *)v236 + 11) = 0;
              v140 = &__dst[4 * v40];
              v140[2] = v236;
              v141 = 26;
              goto LABEL_234;
            }
          }
          else
          {
            ScalerReleaseFontTable(v249, *(const void **)v275);
          }
        }
LABEL_265:
        v47 = v248;
        v48 = v246;
        v42 = v244;
        goto LABEL_266;
      }
      bzero(v275, 0x400uLL);
      if (a4)
      {
        if (v241 < 1)
        {
          v148 = 0;
          goto LABEL_258;
        }
        v146 = 0;
        v147 = 0;
        v148 = 0;
        v149 = 0xFFFF;
        do
        {
          v150 = 0;
          while (*(unsigned __int16 *)(a4 + 2 * v150) != (unsigned __int16)v248[v146])
          {
            if (++v150 == 256)
              goto LABEL_198;
          }
          v151 = &v275[v147];
          *v151 = v150;
          v151[1] = v146;
          ++v147;
          if ((unsigned __int16)v150 >= (unsigned __int16)v149)
            v149 = (unsigned __int16)v149;
          else
            v149 = (unsigned __int16)v150;
          if ((unsigned __int16)v150 <= (unsigned __int16)v148)
            v148 = (unsigned __int16)v148;
          else
            v148 = (unsigned __int16)v150;
LABEL_198:
          ++v146;
        }
        while (v146 < v241 && v147 < 0x100u);
      }
      else
      {
        v148 = 0;
        v177 = v248;
        v237 = *(void **)&v251[1];
        if (!*(_QWORD *)&v251[1] || !v245[0])
          goto LABEL_258;
        *(_QWORD *)&v178 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v178 + 1) = 0xAAAAAAAAAAAAAAAALL;
        __n[6] = v178;
        __n[7] = v178;
        __n[4] = v178;
        __n[5] = v178;
        __n[2] = v178;
        __n[3] = v178;
        __n[0] = v178;
        __n[1] = v178;
        if (v241 < 1)
        {
          v148 = 0;
          v240 = 0;
          v149 = 0xFFFF;
        }
        else
        {
          v179 = 0;
          v240 = 0;
          v148 = 0;
          v149 = 0xFFFF;
          do
          {
            v251[0] = -86;
            v180 = ZGetGlyphName((uint64_t)v237, v245[0], (unsigned __int16)v262, (unsigned __int16)v177[v179], v251, (char *)__n, 0x80uLL);
            v181 = v41;
            v182 = 0;
            v183 = v251[0];
            v184 = "space";
            while (*(v184 - 1) != (_DWORD)v183 || strncmp(v184, v180, v183))
            {
              ++v182;
              v184 += 16;
              if (v182 == 207)
                goto LABEL_250;
            }
            v185 = (unsigned __int16)pdfMacRomanCharIDs[v182];
            v186 = &v275[v240];
            *v186 = v185;
            v186[1] = v179;
            ++v240;
            if (v185 >= (unsigned __int16)v149)
              v149 = (unsigned __int16)v149;
            else
              v149 = v185;
            if (v185 <= (unsigned __int16)v148)
              v148 = (unsigned __int16)v148;
            else
              v148 = v185;
LABEL_250:
            ++v179;
            v177 = v248;
            v41 = v181;
          }
          while (v179 < v241 && v240 < 0xCFu);
        }
        v147 = v240;
      }
      if (v147)
      {
        v187 = 0;
        goto LABEL_259;
      }
LABEL_258:
      v147 = 0;
      v149 = 0;
      v187 = 1;
LABEL_259:
      v188 = v148 - v149 + 1;
      v83 = 2 * (unsigned __int16)(v148 - v149 + 1) + 24;
      v236 = (char *)malloc_type_calloc(1uLL, v83, 0x14022726uLL);
      *(_QWORD *)v236 = 0x10001000000;
      *((_DWORD *)v236 + 2) = 201326592;
      *((_WORD *)v236 + 6) = 1536;
      *((_WORD *)v236 + 9) = bswap32(v149) >> 16;
      *((_WORD *)v236 + 10) = bswap32(v188) >> 16;
      *((_WORD *)v236 + 7) = bswap32(2 * v188 + 10) >> 16;
      if ((v187 & 1) == 0 && v147)
      {
        v189 = 0;
        do
        {
          *(_WORD *)&v236[2 * (LOWORD(v275[(__int16)v189]) - (unint64_t)(unsigned __int16)v149) + 22] = bswap32(HIWORD(v275[(__int16)v189])) >> 16;
          ++v189;
        }
        while (v147 > (__int16)v189);
      }
      v142 = &__dst[4 * v40];
      v143 = v236;
      goto LABEL_264;
    }
    if (v52 <= 1819239264)
    {
      if (v52 != 1735162214)
      {
        if (v52 == 1752003704)
        {
          v53 = v262;
          v54 = (char *)*((_QWORD *)&v271 + 1);
          if (*((_QWORD *)&v271 + 1))
          {
            v55 = v272;
            if (*((_QWORD *)&v271 + 1) + 4 <= (unint64_t)v272)
              v56 = ((_QWORD)v272 - *((_QWORD *)&v271 + 1)) >> 2;
            else
              v56 = 0;
            if (v56 < v42)
              v42 = v56;
          }
          else
          {
            v54 = (char *)v264;
            if (v42 >= WORD4(v264))
              v42 = WORD4(v264);
            if (!(_QWORD)v264)
              goto LABEL_217;
            v55 = *((_QWORD *)&v266 + 1);
          }
          v238 = malloc_type_calloc(v241, 4uLL, 0x100004052888210uLL);
          v144 = 0;
          v145 = 0;
          if (v42)
          {
            v47 = v248;
            if (v42 < v53)
            {
              v145 = &v54[4 * v42];
              v144 = *(_WORD *)&v54[4 * v42 - 4];
            }
          }
          else
          {
            v47 = v248;
          }
          v46 = v241 + 1;
          if (v241 >= 1)
          {
            v152 = v47;
            v153 = v238;
            v154 = v241;
            do
            {
              v156 = *v152++;
              v155 = v156;
              if (v42 <= v156)
              {
                *v153 = v144;
                if (v145)
                {
                  v158 = &v145[2 * v155 + -2 * v42];
                  if (v54 <= v158 && (unint64_t)(v158 + 2) <= v55)
                    v153[1] = *(_WORD *)v158;
                }
              }
              else
              {
                v157 = &v54[4 * v155];
                if ((unint64_t)(v157 + 4) <= v55)
                  *(_DWORD *)v153 = *(_DWORD *)v157;
              }
              v153 += 2;
              --v154;
            }
            while (v154);
          }
          if (*((_QWORD *)&v271 + 1))
          {
            free(v54);
            *((_QWORD *)&v271 + 1) = 0;
            *(_QWORD *)&v272 = 0;
          }
          v160 = &__dst[4 * v40];
          v160[2] = v238;
          *((_DWORD *)v160 + 3) = 4 * v241;
        }
LABEL_217:
        v48 = v246;
        goto LABEL_267;
      }
      if ((int)v250 < 1)
        goto LABEL_217;
      v244 = v42;
      v92 = (unsigned __int16 *)malloc_type_calloc(1uLL, v250, 0xFB4C0EC6uLL);
      v41 = v92;
      *(_QWORD *)v275 = 0xAAAAAAAAAAAAAAAALL;
      v93 = v92;
      v47 = v248;
      if (v241 > 0)
      {
        v94 = 0;
        v95 = (unint64_t)v92 + v250;
        v96 = v92;
        do
        {
          NewGlyphData = GetNewGlyphData(v47[v94], (uint64_t)v263, v275);
          v98 = (char *)v96 + NewGlyphData;
          v99 = v98 < (char *)v96 || (unint64_t)v98 > v95;
          if (v99)
          {
            v218 = __cxa_allocate_exception(2uLL);
            *v218 = 5;
            __cxa_throw(v218, MEMORY[0x1E0DE4F10], 0);
          }
          v100 = NewGlyphData;
          v101 = NewGlyphData < 0xB || *(_QWORD *)v275 == 0;
          v47 = v248;
          if (v101)
          {
            v93 = v96;
          }
          else
          {
            memcpy(v96, *(const void **)v275, NewGlyphData);
            if ((int)bswap32(v96[1]) >> 16 > (int)bswap32(v96[3]) >> 16)
            {
              v96[1] = 0;
              v96[3] = 0;
            }
            v102 = *v96;
            if ((int)bswap32(v96[2]) >> 16 > (int)bswap32(v96[4]) >> 16)
            {
              v96[2] = 0;
              v96[4] = 0;
            }
            v93 = (unsigned __int16 *)((char *)v96 + v100);
            v103 = (int)bswap32(v102) >> 16;
            v104 = v96 + 5;
            if (v103 < 0)
            {
              v108 = 0;
              do
              {
                if (v96 > v104 || (v109 = v104 + 1, (unint64_t)(v104 + 1) > v95))
                {
                  v217 = __cxa_allocate_exception(2uLL);
                  *v217 = 5;
                  __cxa_throw(v217, MEMORY[0x1E0DE4F10], 0);
                }
                v112 = *v104;
                v110 = v104 + 2;
                v111 = v112;
                if ((unint64_t)v110 > v95)
                {
                  v216 = __cxa_allocate_exception(2uLL);
                  *v216 = 5;
                  __cxa_throw(v216, MEMORY[0x1E0DE4F10], 0);
                }
                v113 = 0;
                v114 = bswap32(v111) >> 16;
                ++v108;
                v115 = bswap32((unsigned __int16)*v109) >> 16;
                while ((unsigned __int16)v248[v113] != v115)
                {
                  if (v241 == ++v113)
                  {
                    LOWORD(v116) = 0;
                    goto LABEL_121;
                  }
                }
                v116 = bswap32(v113) >> 16;
LABEL_121:
                *v109 = v116;
                if ((v114 & 1) != 0)
                  v117 = 2;
                else
                  v117 = 1;
                v118 = v117 + ((v114 >> 3) & 1);
                if ((v114 & 0x40) != 0)
                  v118 = v117 + 2;
                v119 = v117 | 4;
                if ((v114 & 0x80) == 0)
                  v119 = v118;
                v104 = &v110[v119];
              }
              while ((v114 & 0x20) != 0);
              if ((unsigned __int16)v108 > bswap32(v257) >> 16)
                v257 = bswap32(v108) >> 16;
            }
            else
            {
              if (v103 > (int)(bswap32(*(unsigned __int16 *)&v256[8]) >> 16))
                *(_WORD *)&v256[8] = v102;
              v105 = &v104[(unsigned __int16)v103];
              if (v105 < v104 || (unint64_t)v105 > v95)
              {
                v106 = (unint64_t)(v96 + 6) <= v95 ? (v95 - (unint64_t)v104) >> 1 : 0;
                if (v106 != (unsigned __int16)v103)
                {
                  v220 = __cxa_allocate_exception(0x10uLL);
                  *(_QWORD *)v220 = &off_1E6176998;
                  v220[2] = 4;
                }
              }
              v107 = (bswap32(v104[v103 - 1]) >> 16) + 1;
              if ((unsigned __int16)v107 > bswap32(*(unsigned __int16 *)&v256[6]) >> 16)
                *(_WORD *)&v256[6] = bswap32(v107) >> 16;
            }
          }
          ++v94;
          v96 = v93;
        }
        while (v94 != v241);
      }
      v46 = v241 + 1;
      if ((char *)v93 - (_BYTE *)v41 > v250)
      {
        v221 = __cxa_allocate_exception(2uLL);
        *v221 = 5;
        __cxa_throw(v221, MEMORY[0x1E0DE4F10], 0);
      }
      v120 = &__dst[4 * v40];
      v120[2] = v41;
      *((_DWORD *)v120 + 3) = v250;
      v48 = v246;
LABEL_175:
      v42 = v244;
      goto LABEL_267;
    }
    if (v52 != 1819239265)
    {
      if (v52 != 1886352244)
        goto LABEL_267;
      v60 = *(_OWORD **)&v251[1];
      if (!*(_QWORD *)&v251[1])
        goto LABEL_217;
      if (v245[0] < 0x20u)
        goto LABEL_217;
      v61 = bswap32(**(_DWORD **)&v251[1]);
      if (v61 != 0x10000 && v61 != 163840 && v61 != 0x20000)
        goto LABEL_217;
      v244 = v42;
      *(_QWORD *)&v62 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v62 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v281 = v62;
      v282 = v62;
      v279 = v62;
      v280 = v62;
      v277 = v62;
      v278 = v62;
      *(_OWORD *)v275 = v62;
      v276 = v62;
      LOBYTE(__n[0]) = -86;
      if (v241 < 1)
      {
        v63 = 0;
      }
      else
      {
        v63 = 0;
        v64 = v241;
        do
        {
          v65 = ZGetGlyphName((uint64_t)v60, v245[0], (unsigned __int16)v262, *v47, (char *)__n, (char *)v275, 0x80uLL);
          if (*v47++)
          {
            v67 = LOBYTE(__n[0]);
            if (!ZGetCanonIndexFromGlyphName(v65, LOBYTE(__n[0])))
              v63 += v67 + 1;
          }
          --v64;
        }
        while (v64);
      }
      v224 = (v227 + v63) & 0xFFFFFFFC;
      v235 = (char *)malloc_type_calloc(1uLL, (v227 + v63) & 0xFFFFFFFFFFFFFFFCLL, 0xF3D8D7A3uLL);
      v161 = v60[1];
      *(_OWORD *)v235 = *v60;
      *((_OWORD *)v235 + 1) = v161;
      *(_DWORD *)v235 = 512;
      *((_WORD *)v235 + 16) = v233;
      if (v241 > 0)
      {
        v162 = 0;
        v239 = (char *)v60 + *(_QWORD *)v245;
        v163 = &v235[v225];
        v164 = v235 + 34;
        v165 = v248;
        v166 = v241;
        v243 = v40;
        do
        {
          v167 = ZGetGlyphName(*(uint64_t *)&v251[1], v245[0], (unsigned __int16)v262, *v165, (char *)__n, (char *)v275, 0x80uLL);
          v168 = v41;
          v169 = LOBYTE(__n[0]);
          v170 = ZGetCanonIndexFromGlyphName(v167, LOBYTE(__n[0]));
          if (*v165++)
            v172 = v170 == 0;
          else
            v172 = 0;
          if (v172)
          {
            if (v167 != (const char *)v275 && &v167[v169] > v239)
            {
              v219 = __cxa_allocate_exception(2uLL);
              *v219 = 5;
              __cxa_throw(v219, MEMORY[0x1E0DE4F10], 0);
            }
            v174 = v162 + 1;
            *v164 = bswap32(v162 + 258) >> 16;
            *v163 = v169;
            v175 = v163 + 1;
            v176 = LOBYTE(__n[0]);
            memcpy(v175, v167, LOBYTE(__n[0]));
            v163 = &v175[v176];
            v162 = v174;
          }
          else
          {
            *v164 = bswap32(v170) >> 16;
          }
          ++v164;
          --v166;
          v41 = v168;
          v40 = v243;
        }
        while (v166);
      }
      v140 = &__dst[4 * v40];
      v140[2] = v235;
      v141 = v224;
LABEL_234:
      *((_DWORD *)v140 + 3) = v141;
      goto LABEL_265;
    }
    v121 = v231;
    if (!v230)
    {
      v122 = 0;
      do
      {
        v48[v122] = bswap32(bswap32(*(_DWORD *)&v48[2 * v122]) >> 1) >> 16;
        ++v122;
      }
      while (v46 != (_DWORD)v122);
      v121 = 2 * v241 + 2;
    }
    v123 = &__dst[4 * v40];
    v123[2] = v48;
    *((_DWORD *)v123 + 3) = v121;
LABEL_267:
    ++v40;
  }
  while (v40 != 13);
  if (*(_QWORD *)&v251[1])
    ScalerReleaseFontTable(v249, *(const void **)&v251[1]);
  v190 = 0;
  v191 = 0;
  do
  {
    if (LOBYTE(__dst[v190 + 3]) || __dst[v190 + 2] && HIDWORD(__dst[v190 + 1]))
      ++v191;
    v190 += 4;
  }
  while (v190 != 52);
  *(_DWORD *)__src = 1702195828;
  *((_WORD *)__src + 2) = bswap32(v191) >> 16;
  if (v191)
  {
    v192 = __clz(v191);
    v193 = v192 ^ 0x1F;
    v194 = -1 << (v192 ^ 0x1F);
    v195 = bswap32(16 << (v192 ^ 0x1F)) >> 16;
    v196 = v193 << 8;
    v197 = bswap32(16 * (v194 + v191)) >> 16;
  }
  else
  {
    LOWORD(v195) = 0;
    v196 = 0;
    LOWORD(v197) = 0;
  }
  v198 = 0;
  *((_WORD *)__src + 3) = v195;
  *((_WORD *)__src + 4) = v196;
  v199 = 220;
  *((_WORD *)__src + 5) = v197;
  while (2)
  {
    v200 = dword_1B0A3F1C8[v198];
    v201 = &__dst[4 * v200];
    if (*((_BYTE *)v201 + 24))
    {
      v202 = *((_DWORD *)v201 + 3);
LABEL_284:
      LODWORD(__dst[4 * v200 + 1]) = v199;
      if (v202)
        v203 = v202;
      else
        v203 = 4;
      v199 = (v199 + v203 + 3) & 0xFFFFFFFC;
    }
    else if (v201[2])
    {
      v202 = HIDWORD(__dst[4 * v200 + 1]);
      if (v202)
        goto LABEL_284;
    }
    if (++v198 != 13)
      continue;
    break;
  }
  v204 = 0;
  v205 = 0;
  while (2)
  {
    v206 = &__dst[v204];
    if (LOBYTE(__dst[v204 + 3]))
    {
      v207 = *((_DWORD *)v206 + 3);
      goto LABEL_295;
    }
    if (v206[2])
    {
      v207 = HIDWORD(__dst[v204 + 1]);
      if (v207)
      {
LABEL_295:
        v208 = &__src[16 * v205];
        *(_QWORD *)(v208 + 12) = bswap32(__dst[v204]);
        *((_DWORD *)v208 + 5) = bswap32(__dst[v204 + 1]);
        *((_DWORD *)v208 + 6) = bswap32(v207);
        ++v205;
      }
    }
    v204 += 4;
    if (v204 != 52)
      continue;
    break;
  }
  v209 = (_DWORD *)(a2 + 131112);
  *(_DWORD *)(a2 + 131112) = 0;
  StreamBytesThroughBuffer(a2, 220, __src);
  v210 = 0;
  v275[0] = 0;
  do
  {
    v211 = dword_1B0A3F1C8[v210];
    v212 = &__dst[4 * v211];
    v213 = (char *)v212[2];
    if (v213 && (v214 = *((_DWORD *)v212 + 3)) != 0)
    {
      *v209 = 0;
      StreamBytesThroughBuffer(a2, v214, v213);
      v215 = ((v214 + 3) & 0xFFFFFFFC) - v214;
      if (v215 >= 1)
      {
        *v209 = 0;
        StreamBytesThroughBuffer(a2, v215, (char *)v275);
      }
      if (BYTE1(__dst[4 * v211 + 3]))
        ScalerReleaseFontTable(v249, v213);
    }
    else if (*((_BYTE *)v212 + 24))
    {
      *v209 = 0;
      StreamBytesThroughBuffer(a2, 4, (char *)v275);
    }
    ++v210;
  }
  while (v210 != 13);
  free(v248);
  free(__src);
  free(v246);
  free(v238);
  free(v41);
  free(v236);
  free(v235);
  free(v242);
  if (*((_QWORD *)&v272 + 1))
  {
    free(v261);
    *((_QWORD *)&v272 + 1) = 0;
  }
  else if (v261)
  {
    ScalerReleaseFontTable(v249, v261);
  }
  UninitGlyphDataContext(v229, (uint64_t)v263);
}

uint64_t InitGlyphDataContext(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL v5;
  unsigned int v6;
  uint64_t inited;
  unsigned int FontTable;
  _WORD *v9;
  _WORD *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  _WORD *v16;
  unsigned __int16 *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned __int16 *v20;
  size_t v21;
  void *v22;
  void *v23;
  unsigned __int16 *v25;
  void *__src;

  v5 = 0;
  *(_BYTE *)(a3 + 336) = 0;
  v6 = *(_DWORD *)(a2 + 28);
  if (v6 == -1)
    v5 = (*(_BYTE *)(a2 + 16) & 8) == 0;
  *(_BYTE *)(a3 + 337) = v5;
  *(_QWORD *)(a3 + 344) = 0;
  *(_QWORD *)(a3 + 360) = 0;
  *(_QWORD *)(a3 + 376) = 0;
  inited = InitVariationInfo(a1, a3 + 280, v6, *(uint64_t **)(a2 + 32));
  if (inited)
  {
    *(_BYTE *)(a3 + 336) = 1;
    if (*(_BYTE *)(*(_QWORD *)(a1 + 8) + 157))
    {
      __src = (void *)0xAAAAAAAAAAAAAAAALL;
      FontTable = ScalerGetFontTable(*(memoryContext **)a1, 1668707360, 0, &__src, 0, 0);
      v9 = malloc_type_calloc(1uLL, FontTable, 0x2387A6DFuLL);
      v10 = v9;
      *(_QWORD *)(a3 + 360) = v9;
      v11 = *(_QWORD *)(a1 + 8);
      v12 = *(unsigned __int16 *)(v11 + 150);
      v13 = __src;
      v14 = 2 * v12;
      if (*(_WORD *)(v11 + 150))
      {
        v15 = 2 * v12;
        v16 = v9;
        v17 = (unsigned __int16 *)__src;
        do
        {
          v18 = *v17++;
          *v16++ = bswap32(v18) >> 16;
          v15 -= 2;
        }
        while (v15);
      }
      ScalerReleaseFontTable(*(memoryContext **)a1, v13);
      v25 = (unsigned __int16 *)0xAAAAAAAAAAAAAAAALL;
      v19 = ScalerGetFontTable(*(memoryContext **)a1, 1668702578, 0, &v25, 0, 8);
      v20 = v25;
      ApplyVariationToCVT(v25, *(_DWORD *)(*(_QWORD *)(a1 + 8) + 76), *(_QWORD *)(inited + 16), *(_DWORD *)(*(_QWORD *)(a1 + 8) + 72), *(__int16 **)(inited + 8), *(unsigned __int16 *)(*(_QWORD *)(a1 + 8) + 150), *(__int16 **)(a3 + 360), (const char *)v25 + v19);
      if ((_DWORD)v12)
      {
        do
        {
          *v10 = bswap32((unsigned __int16)*v10) >> 16;
          ++v10;
          v14 -= 2;
        }
        while (v14);
      }
      ScalerReleaseFontTable(*(memoryContext **)a1, v20);
    }
    __src = (void *)0xAAAAAAAAAAAAAAAALL;
    v21 = ScalerGetFontTable(*(memoryContext **)a1, 1752003704, 0, &__src, 0, 0);
    v22 = malloc_type_calloc(1uLL, v21, 0x30FAC058uLL);
    *(_QWORD *)(a3 + 344) = v22;
    v23 = __src;
    memcpy(v22, __src, v21);
    *(_QWORD *)(a3 + 352) = *(_QWORD *)(a3 + 344) + v21;
    ScalerReleaseFontTable(*(memoryContext **)a1, v23);
  }
  return InitGlyphInfo(a1, a3, inited);
}

uint64_t GetNewGlyphSize(uint64_t a1, memoryContext *a2, unsigned int a3, uint64_t a4, int a5)
{
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned __int16 *v10;
  unsigned int v11;
  unsigned int FontTable;
  const __int16 *v13;
  BOOL v14;
  unsigned int v15;
  unint64_t v17;
  int v18;
  const __int16 *v19;
  const __int16 *v20;
  BOOL v21;
  _DWORD *exception;
  void *v23;
  unsigned int v24;

  if (a5)
  {
    v7 = (unsigned int *)(a4 + 4 * a3);
    v8 = bswap32(*v7);
    v9 = bswap32(v7[1]) - v8;
  }
  else
  {
    v10 = (unsigned __int16 *)(a4 + 2 * a3);
    v11 = bswap32(*v10);
    v8 = 2 * HIWORD(v11);
    v9 = 2 * ((bswap32(v10[1]) >> 16) - HIWORD(v11));
  }
  v24 = v9;
  if (v9 < 0xB)
    return 0;
  v23 = (void *)0xAAAAAAAAAAAAAAAALL;
  FontTable = ScalerGetFontTable(a2, 1735162214, v8, &v23, 0, v9);
  v13 = (const __int16 *)v23;
  v14 = __CFADD__(v8, v9);
  v15 = v8 + v9;
  if (v14 || v15 > FontTable && v15 > ScalerGetBlockSize(a2, v23))
  {
    v24 = 0;
  }
  else if (*v13 && *(_BYTE *)(a1 + 336))
  {
    v17 = (unint64_t)v13 + v9;
    v18 = (int)bswap32(*(unsigned __int16 *)v13) >> 16;
    v19 = v13 + 5;
    if (v18 < 1)
    {
      CountGlyphComponents(v19, v17, &v24);
    }
    else
    {
      v20 = &v19[(unsigned __int16)v18];
      v21 = v20 < v19 || (unint64_t)v20 > v17;
      if (v21 && ((unint64_t)(v13 + 6) > v17 || ((unint64_t)v9 - 10) >> 1 != (unsigned __int16)v18))
      {
        exception = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)exception = &off_1E6176998;
        exception[2] = 4;
      }
      v24 = 2 * (unsigned __int16)v18
          + (bswap32((unsigned __int16)v19[v18]) >> 16)
          + 5 * (unsigned __int16)((bswap32((unsigned __int16)v19[v18 - 1]) >> 16) + 1)
          + 12;
    }
  }
  ScalerReleaseFontTable(a2, v13);
  return (v24 & 1) + v24;
}

uint64_t GetNewGlyphData(unsigned int a1, uint64_t a2, _QWORD *a3)
{
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  _WORD *v9;
  unsigned int GlyphOffsetAndSize;
  unsigned int v11;
  unsigned int FontTable;
  BOOL v13;
  unsigned int v14;
  int v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  void *v24;
  _WORD *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t i;
  uint64_t v31;
  uint64_t v32;
  int v33;
  char *v34;
  unsigned __int16 *v35;
  int v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  int v40;
  int v41;
  uint64_t v42;
  _WORD *v43;
  uint64_t v44;
  _WORD *exception;
  _WORD *v46;
  _WORD *v47;
  unsigned int v48;
  unsigned int v49;

  v49 = 0;
  FreeGlyphData(*(memoryContext ***)(a2 + 248), a2);
  *(_QWORD *)(a2 + 376) = 0;
  if (*(_BYTE *)(a2 + 336))
  {
    GetGlyphForStreaming(a1, (unsigned int *)a2, 0, 0);
    v6 = *(unsigned __int16 *)(a2 + 8);
    if (v6 > 0xA)
    {
      v16 = *(__int16 *)(a2 + 24);
      if (v16 < 0)
      {
        v44 = *(_QWORD *)(a2 + 64);
        if (v44)
        {
          *(_DWORD *)(a2 + 368) = 2;
          *a3 = v44;
          *(_WORD *)(*(_QWORD *)(a2 + 64) + 10) |= 0x400u;
          CountGlyphComponents((const __int16 *)(*(_QWORD *)(a2 + 16) + 10), *(_QWORD *)(a2 + 16) + *(unsigned __int16 *)(a2 + 8), &v49);
        }
      }
      else
      {
        v17 = *(unsigned __int16 *)(a2 + 26);
        if (*(_DWORD *)(a2 + 192) < (signed int)v17)
          goto LABEL_50;
        if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 248) + 8) + 28) < v16)
          goto LABEL_50;
        v18 = 2 * v16;
        v13 = __CFADD__(v18, 10);
        v19 = v18 + 10;
        v49 = v19;
        if (v13)
          goto LABEL_50;
        v13 = __CFADD__(v19, 2);
        v20 = v19 + 2;
        v49 = v20;
        if (v13)
          goto LABEL_50;
        v21 = *(unsigned __int16 *)(a2 + 48);
        v13 = __CFADD__(v20, v21);
        v22 = v20 + v21;
        v49 = v22;
        if (v13
          || (v13 = __CFADD__(v22, 5 * v17), v23 = v22 + 5 * v17, v49 = v23, v13)
          || (v23 & 1) != 0 && (v13 = __CFADD__(v23, 1), ++v23, v49 = v23, v13))
        {
LABEL_50:
          exception = __cxa_allocate_exception(2uLL);
          *exception = 5;
          __cxa_throw(exception, MEMORY[0x1E0DE4F10], 0);
        }
        v24 = malloc_type_calloc(1uLL, v23, 0xA88DF300uLL);
        *a3 = v24;
        *(_QWORD *)(a2 + 376) = v24;
        *(_DWORD *)(a2 + 368) = 0;
        v25 = (_WORD *)*a3;
        *v25 = bswap32(*(unsigned __int16 *)(a2 + 24)) >> 16;
        v25[1] = bswap32(*(unsigned __int16 *)(a2 + 28)) >> 16;
        v25[2] = bswap32(*(unsigned __int16 *)(a2 + 30)) >> 16;
        v25[3] = bswap32(*(unsigned __int16 *)(a2 + 32)) >> 16;
        v25[4] = bswap32(*(unsigned __int16 *)(a2 + 34)) >> 16;
        v26 = (char *)(v25 + 5);
        if (*(__int16 *)(a2 + 24) >= 1)
        {
          memcpy(v26, *(const void **)(a2 + 40), 2 * *(unsigned __int16 *)(a2 + 24));
          v26 += 2 * *(__int16 *)(a2 + 24);
        }
        *(_WORD *)v26 = bswap32(*(unsigned __int16 *)(a2 + 48)) >> 16;
        v27 = v26 + 2;
        if (*(_WORD *)(a2 + 48))
        {
          memcpy(v27, *(const void **)(a2 + 56), *(unsigned __int16 *)(a2 + 48));
          v27 += *(unsigned __int16 *)(a2 + 48);
        }
        if (*(__int16 *)(a2 + 24) >= 1)
        {
          **(_BYTE **)(a2 + 120) |= 0x40u;
          memcpy(v27, *(const void **)(a2 + 120), *(unsigned __int16 *)(a2 + 26));
          v28 = *(unsigned __int16 *)(a2 + 26);
          v29 = *(_QWORD *)(*(_QWORD *)(a2 + 248) + 8);
          if (*(_BYTE *)(v29 + 159) && *(_DWORD *)(v29 + 84) == a1)
          {
            for (i = 0; i != 8; ++i)
            {
              if (v17 <= *(unsigned __int8 *)(v29 + 88 + i))
              {
                v46 = __cxa_allocate_exception(2uLL);
                *v46 = 5;
                __cxa_throw(v46, MEMORY[0x1E0DE4F10], 0);
              }
            }
            v32 = *(_QWORD *)(a2 + 152);
            v31 = *(_QWORD *)(a2 + 160);
            *(_WORD *)(a2 + 312) = *(_WORD *)(v31 + 2 * *(unsigned __int8 *)(v29 + 88));
            *(_WORD *)(a2 + 314) = *(_WORD *)(v31 + 2 * *(unsigned __int8 *)(v29 + 89));
            *(_WORD *)(a2 + 316) = *(_WORD *)(v31 + 2 * *(unsigned __int8 *)(v29 + 90))
                                 - *(_WORD *)(v31 + 2 * *(unsigned __int8 *)(v29 + 91));
            *(_WORD *)(a2 + 318) = *(_WORD *)(v32 + 2 * *(unsigned __int8 *)(v29 + 90))
                                 - *(_WORD *)(v32 + 2 * *(unsigned __int8 *)(v29 + 91));
            *(_WORD *)(a2 + 320) = *(_WORD *)(v32 + 2 * *(unsigned __int8 *)(v29 + 91));
            *(_WORD *)(a2 + 322) = *(_WORD *)(v32 + 2 * *(unsigned __int8 *)(v29 + 92));
            *(_WORD *)(a2 + 324) = *(_WORD *)(v32 + 2 * *(unsigned __int8 *)(v29 + 93));
            *(_WORD *)(a2 + 326) = *(_WORD *)(v32 + 2 * *(unsigned __int8 *)(v29 + 94))
                                 - *(_WORD *)(v32 + 2 * *(unsigned __int8 *)(v29 + 95));
            *(_WORD *)(a2 + 328) = *(_WORD *)(v31 + 2 * *(unsigned __int8 *)(v29 + 94))
                                 - *(_WORD *)(v31 + 2 * *(unsigned __int8 *)(v29 + 95));
            *(_WORD *)(a2 + 330) = *(_WORD *)(v31 + 2 * *(unsigned __int8 *)(v29 + 95));
          }
          if ((_DWORD)v28)
          {
            v33 = 0;
            v34 = &v27[v28];
            v35 = *(unsigned __int16 **)(a2 + 152);
            do
            {
              v36 = *v35++;
              *(_WORD *)v34 = bswap32(v36 - v33) >> 16;
              v34 += 2;
              v33 = v36;
              LODWORD(v28) = v28 - 1;
            }
            while ((_DWORD)v28);
            if (*(_WORD *)(a2 + 26))
            {
              v37 = 0;
              v38 = 0;
              v39 = *(_QWORD *)(a2 + 160);
              v40 = 2 * *(unsigned __int16 *)(a2 + 26);
              do
              {
                v41 = *(unsigned __int16 *)(v39 + v37);
                *(_WORD *)&v34[v37] = bswap32(v41 - v38) >> 16;
                v37 += 2;
                v38 = v41;
              }
              while (v40 != (_DWORD)v37);
            }
          }
        }
      }
    }
    else
    {
      *(_DWORD *)(a2 + 368) = 1;
      *a3 = *(_QWORD *)(a2 + 16);
      v49 = v6;
    }
    v7 = *(_QWORD *)(a2 + 344);
    if (!v7)
    {
      v47 = __cxa_allocate_exception(2uLL);
      *v47 = 5;
      __cxa_throw(v47, MEMORY[0x1E0DE4F10], 0);
    }
    v8 = *(unsigned __int16 *)(a2 + 232);
    if (v8 <= a1)
    {
      v42 = 2 * v8 - 2;
      if (!*(_WORD *)(a2 + 232))
        v42 = 0;
      v43 = (_WORD *)(v7 + 2 * v42);
      if ((unint64_t)&v43[(int)(a1 - v8) + 3] <= *(_QWORD *)(a2 + 352))
      {
        *v43 = bswap32(*(unsigned __int16 *)(a2 + 234)) >> 16;
        v43[a1 - *(unsigned __int16 *)(a2 + 232) + 2] = bswap32(*(unsigned __int16 *)(a2 + 236)) >> 16;
      }
    }
    else
    {
      v9 = (_WORD *)(v7 + 4 * a1);
      if ((unint64_t)(v9 + 2) <= *(_QWORD *)(a2 + 352))
      {
        *v9 = bswap32(*(unsigned __int16 *)(a2 + 234)) >> 16;
        v9[1] = bswap32(*(unsigned __int16 *)(a2 + 236)) >> 16;
      }
    }
  }
  else
  {
    v48 = -1431655766;
    GlyphOffsetAndSize = GetGlyphOffsetAndSize(a1, *(char **)(a2 + 208), *(_WORD *)(a2 + 216) != 0, &v48, *(_QWORD *)(a2 + 272));
    v49 = GlyphOffsetAndSize;
    if (GlyphOffsetAndSize >= 0xB)
    {
      v11 = GlyphOffsetAndSize;
      FontTable = ScalerGetFontTable(**(memoryContext ***)(a2 + 248), 1735162214, v48, a3, 1, GlyphOffsetAndSize);
      v13 = __CFADD__(v48, v11);
      v14 = v48 + v11;
      if (v13
        || v14 > FontTable && v14 > ScalerGetBlockSize(**(memoryContext ***)(a2 + 248), (const void *)*a3))
      {
        return 0;
      }
      *(_QWORD *)(a2 + 376) = *a3;
      *(_DWORD *)(a2 + 368) = 1;
    }
  }
  return (v49 & 1) + v49;
}

void sub_1B09AE788(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B09AE6FCLL);
}

void UninitGlyphDataContext(memoryContext **a1, uint64_t a2)
{
  UninitGlyphInfo(a1, a2);
  FreeGlyphData(a1, a2);
  free(*(void **)(a2 + 344));
  free(*(void **)(a2 + 360));
}

uint64_t GetGlyphVariationOffsetAndSize(unsigned int a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v3;
  unsigned __int16 *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t result;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  v3 = a2 + 20;
  if ((*(_WORD *)(a2 + 14) & 0x100) != 0)
  {
    v8 = (unsigned int *)(v3 + 4 * a1);
    v9 = v8[1];
    v10 = bswap32(*v8);
    v6 = bswap32(*(_DWORD *)(a2 + 16)) + v10;
    result = bswap32(v9) - v10;
    if (!a3)
      return result;
    goto LABEL_5;
  }
  v4 = (unsigned __int16 *)(v3 + 2 * a1);
  v5 = bswap32(*v4);
  v6 = bswap32(*(_DWORD *)(a2 + 16)) + 2 * HIWORD(v5);
  result = 2 * ((bswap32(v4[1]) >> 16) - HIWORD(v5));
  if (a3)
LABEL_5:
    *a3 = v6;
  return result;
}

void FreeGlyphData(memoryContext **a1, uint64_t a2)
{
  int v2;

  if (*(_QWORD *)(a2 + 376))
  {
    v2 = *(_DWORD *)(a2 + 368);
    if (v2 == 1)
    {
      ScalerReleaseFontTable(*a1, *(const void **)(a2 + 376));
    }
    else if (!v2)
    {
      free(*(void **)(a2 + 376));
    }
  }
}

void TType1PDC0Font::~TType1PDC0Font(TType1PDC0Font *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E61CC0A8;
  v2 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

{
  uint64_t v2;

  *(_QWORD *)this = off_1E61CC0A8;
  v2 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x1B5E0CD38);
}

uint64_t TType1PDC0Font::GetFontDataTableTag(TType1PDC0Font *this)
{
  return 1346650928;
}

uint64_t fnt_SDPVTL(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  __int16 v9;
  __int16 v10;
  uint64_t result;
  FILE **v12;
  FILE *v13;
  uint64_t v14;
  _WORD *exception;

  if (!*(_QWORD *)(a1 + 16) || !*(_QWORD *)(a1 + 8))
  {
    v12 = (FILE **)MEMORY[0x1E0C80C10];
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "CHECK_ASSERTION: interpreter assertion failed \"%s\"");
    goto LABEL_14;
  }
  CHECK_STACK_POINTER_BASE(a1, *(_QWORD *)(a1 + 56));
  v2 = *(_QWORD *)(a1 + 56);
  v4 = *(_DWORD *)(v2 - 4);
  v2 -= 4;
  v3 = v4;
  *(_QWORD *)(a1 + 56) = v2;
  CHECK_STACK_POINTER_BASE(a1, v2);
  v5 = *(_QWORD *)(a1 + 56);
  v6 = *(unsigned int *)(v5 - 4);
  *(_QWORD *)(a1 + 56) = v5 - 4;
  v7 = *(int **)(a1 + 16);
  CHECK_ELEMENTPTR(a1, v7);
  if ((v4 & 0x80000000) != 0 || v7[28] <= (int)v3)
  {
    v12 = (FILE **)MEMORY[0x1E0C80C10];
    v13 = (FILE *)*MEMORY[0x1E0C80C10];
LABEL_13:
    fprintf(v13, "CHECK_RANGE_INDEX: %d not in range (%d - %d), interpreter value out of range");
LABEL_14:
    v14 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8);
    if (v14)
      fprintf(*v12, "(glyph = %d)\n", *(_DWORD *)(v14 + 88));
    fputc(10, *v12);
    exception = __cxa_allocate_exception(2uLL);
    *exception = 1;
    __cxa_throw(exception, MEMORY[0x1E0DE4F10], 0);
  }
  v8 = *(_QWORD *)(a1 + 8);
  if ((v6 & 0x80000000) != 0 || *(_DWORD *)(v8 + 112) <= (int)v6)
  {
    v12 = (FILE **)MEMORY[0x1E0C80C10];
    v13 = (FILE *)*MEMORY[0x1E0C80C10];
    goto LABEL_13;
  }
  fnt_Normalize(a1, *(_DWORD *)(*(_QWORD *)(v8 + 8) + 4 * v6) - *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) + 4 * v3), *(_DWORD *)(*(_QWORD *)(v8 + 16) + 4 * v6) - *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 16) + 4 * v3), (_WORD *)(a1 + 24));
  fnt_Normalize(a1, *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56) + 4 * v6)- *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 56) + 4 * v3), *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 4 * v6)- *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 64) + 4 * v3), (_WORD *)(a1 + 32));
  *(_BYTE *)(a1 + 364) = 0;
  if ((*(_BYTE *)(a1 + 363) & 1) != 0)
  {
    v9 = *(_WORD *)(a1 + 26);
    *(_WORD *)(a1 + 26) = *(_WORD *)(a1 + 24);
    *(_WORD *)(a1 + 24) = -v9;
    v10 = *(_WORD *)(a1 + 34);
    *(_WORD *)(a1 + 34) = *(_WORD *)(a1 + 32);
    *(_WORD *)(a1 + 32) = -v10;
    *(_BYTE *)(a1 + 364) = 1;
  }
  result = fnt_ComputeAndCheck_PF_Proj(a1);
  *(_QWORD *)(a1 + 120) = fnt_MovePoint;
  *(_QWORD *)(a1 + 128) = fnt_Project;
  *(_QWORD *)(a1 + 136) = fnt_OldProject;
  return result;
}

uint64_t CHECK_STACK_POINTER_BASE(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  FILE **v3;
  FILE *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  _WORD *exception;

  v2 = *(_QWORD *)(result + 80);
  if (*(int *)(v2 + 4) <= 0)
  {
    v3 = (FILE **)MEMORY[0x1E0C80C10];
    v4 = (FILE *)*MEMORY[0x1E0C80C10];
    v5 = "ERROR: trying to pop an empty stack";
    goto LABEL_6;
  }
  if (*(_QWORD *)(v2 + 8) >= a2)
  {
    v3 = (FILE **)MEMORY[0x1E0C80C10];
    v4 = (FILE *)*MEMORY[0x1E0C80C10];
    v5 = "ERROR: trying to pop below the stack base";
LABEL_6:
    v6 = result;
    fprintf(v4, "CHECK_ASSERTION: interpreter assertion failed \"%s\"", v5);
    v7 = *(_QWORD *)(*(_QWORD *)(v6 + 72) + 8);
    if (v7)
      fprintf(*v3, "(glyph = %d)\n", *(_DWORD *)(v7 + 88));
    fputc(10, *v3);
    exception = __cxa_allocate_exception(2uLL);
    *exception = 1;
    __cxa_throw(exception, MEMORY[0x1E0DE4F10], 0);
  }
  return result;
}

uint64_t fnt_ISECT(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  unsigned int v34;
  unsigned int v35;
  signed int v36;
  unsigned int v37;
  unsigned int v38;
  signed int v39;
  double v40;
  signed int v41;
  FILE **v42;
  FILE *v43;
  const char *v44;
  uint64_t v45;
  _WORD *exception;
  int v47;

  v2 = *a1;
  v3 = a1[7];
  CHECK_STACK_POINTER_BASE((uint64_t)a1, v3);
  v4 = *(unsigned int *)(v3 - 4);
  CHECK_STACK_POINTER_BASE((uint64_t)a1, v3 - 4);
  if (!v2
    || (v5 = *(unsigned int *)(v3 - 8), (v5 & 0x80000000) != 0)
    || (v6 = *(_DWORD *)(v2 + 112), (int)v5 >= v6)
    || (v4 & 0x80000000) != 0
    || (int)v4 >= v6)
  {
    v42 = (FILE **)MEMORY[0x1E0C80C10];
    v43 = (FILE *)*MEMORY[0x1E0C80C10];
    v44 = "ERROR: arg1 or arg2 out of range(CE0)";
    goto LABEL_49;
  }
  v7 = *(_QWORD *)(v2 + 8);
  v8 = *(_QWORD *)(v2 + 16);
  v9 = *(_DWORD *)(v7 + 4 * v4);
  v47 = *(_DWORD *)(v7 + 4 * v5);
  v10 = *(_DWORD *)(v8 + 4 * v4);
  v11 = *(_DWORD *)(v8 + 4 * v5);
  v12 = a1[1];
  CHECK_STACK_POINTER_BASE((uint64_t)a1, v3 - 8);
  v13 = *(unsigned int *)(v3 - 12);
  CHECK_STACK_POINTER_BASE((uint64_t)a1, v3 - 12);
  if (!v12
    || (v14 = *(unsigned int *)(v3 - 16), (v14 & 0x80000000) != 0)
    || (v15 = *(_DWORD *)(v12 + 112), (int)v14 >= v15)
    || (v13 & 0x80000000) != 0
    || (int)v13 >= v15)
  {
    v42 = (FILE **)MEMORY[0x1E0C80C10];
    v43 = (FILE *)*MEMORY[0x1E0C80C10];
    v44 = "ERROR: arg1 or arg2 out of range(CE1)";
    goto LABEL_49;
  }
  v16 = *(_QWORD *)(v12 + 8);
  v17 = *(_QWORD *)(v12 + 16);
  v18 = *(_DWORD *)(v16 + 4 * v13);
  v19 = *(_DWORD *)(v16 + 4 * v14);
  v20 = *(_DWORD *)(v17 + 4 * v13);
  v21 = *(_DWORD *)(v17 + 4 * v14);
  v22 = a1[2];
  result = CHECK_STACK_POINTER_BASE((uint64_t)a1, v3 - 16);
  v24 = *(unsigned int *)(v3 - 20);
  a1[7] = v3 - 20;
  if (!v22 || (v24 & 0x80000000) != 0 || (int)v24 >= *(_DWORD *)(v22 + 112))
  {
    v42 = (FILE **)MEMORY[0x1E0C80C10];
    v43 = (FILE *)*MEMORY[0x1E0C80C10];
    v44 = "ERROR: arg1 out of range(CE2)";
LABEL_49:
    fprintf(v43, "CHECK_ASSERTION: interpreter assertion failed \"%s\"", v44);
    v45 = *(_QWORD *)(a1[9] + 8);
    if (v45)
      fprintf(*v42, "(glyph = %d)\n", *(_DWORD *)(v45 + 88));
    fputc(10, *v42);
    exception = __cxa_allocate_exception(2uLL);
    *exception = 1;
    __cxa_throw(exception, MEMORY[0x1E0DE4F10], 0);
  }
  v25 = v9 - v47;
  v26 = v10 - v11;
  v27 = v18 - v19;
  v28 = v20 - v21;
  *(_BYTE *)(*(_QWORD *)(a1[2] + 48) + v24) |= 3u;
  v29 = a1[2];
  v31 = *(_QWORD *)(v29 + 8);
  v30 = *(_QWORD *)(v29 + 16);
  if (v10 == v11)
  {
    if (v18 == v19)
    {
      *(_DWORD *)(v31 + 4 * v24) = v18;
      goto LABEL_45;
    }
    v32 = v21 - v10;
    v33 = v21 - v20;
    if (!v28)
    {
LABEL_43:
      *(_DWORD *)(v31 + 4 * v24) = (v47 + (v25 >> 1) + v19 + (v27 >> 1)) >> 1;
      v10 = (v11 + (v26 >> 1) + v21 + (v28 >> 1)) >> 1;
      goto LABEL_45;
    }
  }
  else if (v9 == v47)
  {
    if (v20 == v21)
    {
      *(_DWORD *)(v31 + 4 * v24) = v9;
      v10 = v20;
      goto LABEL_45;
    }
    v32 = v19 - v9;
    v33 = v19 - v18;
    if (!v27)
      goto LABEL_43;
  }
  else
  {
    if (v25 >= 0)
      v34 = v9 - v47;
    else
      v34 = v47 - v9;
    if (v26 >= 0)
      v35 = v10 - v11;
    else
      v35 = v11 - v10;
    if (v34 <= v35)
    {
      v41 = vcvtd_n_s64_f64((double)v25 * 9.31322575e-10 / ((double)v26 * 9.31322575e-10), 0x1EuLL);
      result = (v47 - v19);
      v32 = result + ((unint64_t)((v21 - v11) * (uint64_t)v41 + 0x20000000) >> 30);
      v33 = v27 - ((unint64_t)(v28 * (uint64_t)v41 + 0x20000000) >> 30);
      if (!v33)
        goto LABEL_43;
    }
    else
    {
      v36 = vcvtd_n_s64_f64((double)v26 * 9.31322575e-10 / ((double)v25 * 9.31322575e-10), 0x1EuLL);
      result = (v21 - v11);
      v32 = result - ((unint64_t)((v19 - v47) * (uint64_t)v36 + 0x20000000) >> 30);
      v33 = ((unint64_t)(v27 * (uint64_t)v36 + 0x20000000) >> 30) - v28;
      if (!v33)
        goto LABEL_43;
    }
  }
  if (v32 >= 0)
    v37 = v32;
  else
    v37 = -v32;
  if (v33 >= 0)
    v38 = v33;
  else
    v38 = -v33;
  if (v37 >= v38)
  {
    if (v32)
    {
      v40 = (double)(int)vcvtd_n_s64_f64((double)v33 * 9.31322575e-10 / ((double)v32 * 9.31322575e-10), 0x1EuLL)
          * 9.31322575e-10;
      *(_DWORD *)(v31 + 4 * v24) = v19 + vcvtd_n_s64_f64((double)v27 * 9.31322575e-10 / v40, 0x1EuLL);
      v10 = v21 + vcvtd_n_s64_f64((double)v28 * 9.31322575e-10 / v40, 0x1EuLL);
    }
    else
    {
      *(_DWORD *)(v31 + 4 * v24) = v19;
      v10 = v21;
    }
  }
  else
  {
    v39 = vcvtd_n_s64_f64((double)v32 * 9.31322575e-10 / ((double)v33 * 9.31322575e-10), 0x1EuLL);
    *(_DWORD *)(v31 + 4 * v24) = v19 + ((unint64_t)(v39 * (uint64_t)v27 + 0x20000000) >> 30);
    v10 = v21 + ((unint64_t)(v39 * (uint64_t)v28 + 0x20000000) >> 30);
  }
LABEL_45:
  *(_DWORD *)(v30 + 4 * v24) = v10;
  return result;
}

uint64_t fnt_SROUND(uint64_t a1)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t result;

  CHECK_STACK_POINTER_BASE(a1, *(_QWORD *)(a1 + 56));
  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_DWORD *)(v2 - 4);
  *(_QWORD *)(a1 + 56) = v2 - 4;
  v4 = *(_QWORD *)(a1 + 80);
  result = fnt_SetRoundValues(v4, v3, 1);
  *(_QWORD *)(v4 + 216) = fnt_SuperRound;
  return result;
}

uint64_t fnt_SetRoundValues(uint64_t a1, unsigned int a2, int a3)
{
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  __int16 v8;

  v3 = a2 & 0xC0;
  if (!a3)
  {
    *(_DWORD *)(a1 + 228) = 759250125;
    if ((a2 & 0xC0) != 0)
    {
      if (v3 == 64)
      {
        v8 = 45;
        goto LABEL_23;
      }
      if (v3 == 128)
        v7 = 1518500250;
      else
        v7 = 999;
      if (v3 == 128)
        v8 = 91;
      else
        v8 = 0;
    }
    else
    {
      v8 = 23;
      v7 = 379625062;
    }
    *(_DWORD *)(a1 + 228) = v7;
LABEL_23:
    *(_WORD *)(a1 + 232) = v8;
    return ((uint64_t (*)(void))((char *)sub_1B09AF0E8 + 4 * asc_1B0A40275[(a2 >> 4) & 3]))();
  }
  if (v3 == 64)
    v4 = 64;
  else
    v4 = 999;
  if (v3 == 128)
    v5 = 128;
  else
    v5 = v4;
  if ((a2 & 0xC0) != 0)
    v6 = v5;
  else
    v6 = 32;
  *(_WORD *)(a1 + 232) = v6;
  *(_DWORD *)(a1 + 224) = -v6;
  return ((uint64_t (*)(void))((char *)sub_1B09AF0E8 + 4 * asc_1B0A40275[(a2 >> 4) & 3]))();
}

uint64_t sub_1B09AF0E8@<X0>(uint64_t result@<X0>, char a2@<W1>, unsigned int a3@<W8>)
{
  *(_WORD *)(result + 234) = (a3 + 2) >> 2;
  if ((a2 & 0xF) != 0)
    a3 = (((a2 & 0xF) + 524284) * a3 + 4) >> 3;
  else
    LOWORD(a3) = a3 - 1;
  *(_WORD *)(result + 236) = a3;
  return result;
}

uint64_t fnt_S45ROUND(uint64_t a1)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t result;

  CHECK_STACK_POINTER_BASE(a1, *(_QWORD *)(a1 + 56));
  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_DWORD *)(v2 - 4);
  *(_QWORD *)(a1 + 56) = v2 - 4;
  v4 = *(_QWORD *)(a1 + 80);
  result = fnt_SetRoundValues(v4, v3, 0);
  *(_QWORD *)(v4 + 216) = fnt_Super45Round;
  return result;
}

uint64_t fnt_RAW(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _DWORD *v6;
  FILE **v7;
  uint64_t v8;
  _WORD *exception;

  v2 = *(_QWORD *)(a1[9] + 8);
  if (!v2)
  {
    v7 = (FILE **)MEMORY[0x1E0C80C10];
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "CHECK_ASSERTION: interpreter assertion failed \"%s\"", "ERROR: elements[GLYPHELEMENT] == NULL");
    v8 = *(_QWORD *)(a1[9] + 8);
    if (v8)
      fprintf(*v7, "(glyph = %d)\n", *(_DWORD *)(v8 + 88));
    fputc(10, *v7);
    exception = __cxa_allocate_exception(2uLL);
    *exception = 1;
    __cxa_throw(exception, MEMORY[0x1E0DE4F10], 0);
  }
  v3 = *(_QWORD *)(v2 + 56);
  v4 = *(int *)(v2 + 4);
  GrowStackForPush(a1, 1);
  result = CHECK_STACK_POINTER_END((uint64_t)a1, a1[7]);
  v6 = (_DWORD *)a1[7];
  *v6 = *(_DWORD *)(v3 + 4 * v4 + 4) - *(_DWORD *)(v3 + 4 * v4);
  a1[7] = v6 + 1;
  return result;
}

uint64_t CHECK_STACK_POINTER_END(uint64_t result, unint64_t a2)
{
  FILE **v2;
  FILE *v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  _WORD *exception;

  if (*(int *)(*(_QWORD *)(result + 80) + 4) <= 0)
  {
    v2 = (FILE **)MEMORY[0x1E0C80C10];
    v3 = (FILE *)*MEMORY[0x1E0C80C10];
    v4 = "ERROR: trying to pop an empty stack";
    goto LABEL_6;
  }
  if (*(_QWORD *)(result + 48) <= a2)
  {
    v2 = (FILE **)MEMORY[0x1E0C80C10];
    v3 = (FILE *)*MEMORY[0x1E0C80C10];
    v4 = "ERROR: trying to push beyond the end of stack";
LABEL_6:
    v5 = result;
    fprintf(v3, "CHECK_ASSERTION: interpreter assertion failed \"%s\"", v4);
    v6 = *(_QWORD *)(*(_QWORD *)(v5 + 72) + 8);
    if (v6)
      fprintf(*v2, "(glyph = %d)\n", *(_DWORD *)(v6 + 88));
    fputc(10, *v2);
    exception = __cxa_allocate_exception(2uLL);
    *exception = 1;
    __cxa_throw(exception, MEMORY[0x1E0DE4F10], 0);
  }
  return result;
}

uint64_t fnt_SANGW(uint64_t a1)
{
  uint64_t result;

  result = CHECK_STACK_POINTER_BASE(a1, *(_QWORD *)(a1 + 56));
  *(_QWORD *)(a1 + 56) -= 4;
  return result;
}

uint64_t fnt_AA(uint64_t a1)
{
  uint64_t result;

  result = CHECK_STACK_POINTER_BASE(a1, *(_QWORD *)(a1 + 56));
  *(_QWORD *)(a1 + 56) -= 4;
  return result;
}

uint64_t fnt_DEBUG(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  CHECK_STACK_POINTER_BASE(a1, *(_QWORD *)(a1 + 56));
  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(int *)(v2 - 4);
  *(_QWORD *)(a1 + 56) = v2 - 4;
  return printf("fnt_DEBUG: DEBUG opcode: %08lX\n", v3);
}

uint64_t fnt_UTP(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int *v4;
  uint64_t result;
  uint64_t v6;
  FILE **v7;
  uint64_t v8;
  _WORD *exception;

  CHECK_STACK_POINTER_BASE(a1, *(_QWORD *)(a1 + 56));
  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(unsigned int *)(v2 - 4);
  *(_QWORD *)(a1 + 56) = v2 - 4;
  v4 = *(int **)a1;
  if (!*(_QWORD *)a1)
  {
    v7 = (FILE **)MEMORY[0x1E0C80C10];
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "CHECK_ASSERTION: interpreter assertion failed \"%s\"");
    goto LABEL_11;
  }
  result = CHECK_ELEMENTPTR(a1, *(int **)a1);
  if ((v3 & 0x80000000) != 0 || v4[28] <= (int)v3)
  {
    v7 = (FILE **)MEMORY[0x1E0C80C10];
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "CHECK_RANGE_INDEX: %d not in range (%d - %d), interpreter value out of range");
LABEL_11:
    v8 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8);
    if (v8)
      fprintf(*v7, "(glyph = %d)\n", *(_DWORD *)(v8 + 88));
    fputc(10, *v7);
    exception = __cxa_allocate_exception(2uLL);
    *exception = 1;
    __cxa_throw(exception, MEMORY[0x1E0DE4F10], 0);
  }
  v6 = *(_QWORD *)(*(_QWORD *)a1 + 48);
  if (*(_WORD *)(a1 + 28))
    *(_BYTE *)(v6 + v3) &= ~1u;
  if (*(_WORD *)(a1 + 30))
    *(_BYTE *)(v6 + v3) &= ~2u;
  return result;
}

uint64_t fnt_SDB(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  int v4;

  result = CHECK_STACK_POINTER_BASE(a1, *(_QWORD *)(a1 + 56));
  v3 = *(_QWORD *)(a1 + 56);
  v4 = *(_DWORD *)(v3 - 4);
  *(_QWORD *)(a1 + 56) = v3 - 4;
  *(_WORD *)(*(_QWORD *)(a1 + 80) + 238) = v4;
  return result;
}

uint64_t fnt_SDS(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  int v4;

  result = CHECK_STACK_POINTER_BASE(a1, *(_QWORD *)(a1 + 56));
  v3 = *(_QWORD *)(a1 + 56);
  v4 = *(_DWORD *)(v3 - 4);
  *(_QWORD *)(a1 + 56) = v3 - 4;
  *(_WORD *)(*(_QWORD *)(a1 + 80) + 240) = v4;
  return result;
}

uint64_t fnt_FLIPPT(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t result;
  int v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  FILE **v10;
  uint64_t v11;
  _WORD *exception;

  v2 = *(_QWORD *)a1;
  if (!*(_QWORD *)a1)
  {
    v10 = (FILE **)MEMORY[0x1E0C80C10];
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "CHECK_ASSERTION: interpreter assertion failed \"%s\"");
    goto LABEL_9;
  }
  v3 = *(_QWORD *)(v2 + 40);
  v4 = *(_QWORD *)(a1 + 56);
  result = CHECK_ELEMENTPTR(a1, (int *)v2);
  v6 = *(_DWORD *)(a1 + 112);
  if ((v6 & 0x80000000) == 0)
  {
    v7 = v6 + 1;
    while (1)
    {
      result = CHECK_STACK_POINTER_BASE(a1, v4);
      v9 = *(_DWORD *)(v4 - 4);
      v4 -= 4;
      v8 = v9;
      if ((v9 & 0x80000000) != 0 || *(_DWORD *)(*(_QWORD *)a1 + 112) <= (int)v8)
        break;
      *(_BYTE *)(v3 + v8) ^= 1u;
      if (--v7 <= 0)
        goto LABEL_7;
    }
    v10 = (FILE **)MEMORY[0x1E0C80C10];
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "CHECK_RANGE_INDEX: %d not in range (%d - %d), interpreter value out of range");
LABEL_9:
    v11 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8);
    if (v11)
      fprintf(*v10, "(glyph = %d)\n", *(_DWORD *)(v11 + 88));
    fputc(10, *v10);
    exception = __cxa_allocate_exception(2uLL);
    *exception = 1;
    __cxa_throw(exception, MEMORY[0x1E0DE4F10], 0);
  }
LABEL_7:
  *(_DWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 56) = v4;
  return result;
}

uint64_t CHECK_ELEMENTPTR(uint64_t result, int *a2)
{
  int **v2;
  FILE **v3;
  uint64_t v4;
  uint64_t v5;
  _WORD *exception;
  unsigned __int16 *v7;
  int v8;
  int v9;
  unsigned int v10;
  int v12;
  FILE **v14;
  FILE *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;

  if (!a2)
  {
LABEL_4:
    v3 = (FILE **)MEMORY[0x1E0C80C10];
    v4 = result;
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "CHECK_ASSERTION: interpreter assertion failed \"%s\"", "Bad element ptr");
    v5 = *(_QWORD *)(*(_QWORD *)(v4 + 72) + 8);
    if (v5)
      fprintf(*v3, "(glyph = %d)\n", *(_DWORD *)(v5 + 88));
    fputc(10, *v3);
    exception = __cxa_allocate_exception(2uLL);
    *exception = 1;
    goto LABEL_26;
  }
  v2 = *(int ***)(result + 72);
  if (v2[1] == a2)
  {
    v7 = *(unsigned __int16 **)(*(_QWORD *)(result + 80) + 248);
    if (v7[4] <= v7[6])
      v8 = v7[6];
    else
      v8 = v7[4];
    v9 = v7[3];
    v10 = v7[5];
    if (v9 <= v10)
      v9 = v10;
    if (*a2 >= 1 && *a2 <= v8)
    {
      v12 = a2[1];
      if (v12 >= 1 && v12 <= v9)
        return result;
      v14 = (FILE **)MEMORY[0x1E0C80C10];
      v15 = (FILE *)*MEMORY[0x1E0C80C10];
      v19 = v9;
      v18 = a2[1];
    }
    else
    {
      v14 = (FILE **)MEMORY[0x1E0C80C10];
      v15 = (FILE *)*MEMORY[0x1E0C80C10];
      v19 = v8;
      v18 = *a2;
    }
    v16 = result;
    fprintf(v15, "CHECK_RANGE: %d not in range (%d - %d), interpreter value out of range", v18, v19, 1);
    v17 = *(_QWORD *)(*(_QWORD *)(v16 + 72) + 8);
    if (v17)
      fprintf(*v14, "(glyph = %d)\n", *(_DWORD *)(v17 + 88));
    fputc(10, *v14);
    exception = __cxa_allocate_exception(2uLL);
    *exception = 1;
LABEL_26:
    __cxa_throw(exception, MEMORY[0x1E0DE4F10], 0);
  }
  if (*v2 != a2)
    goto LABEL_4;
  return result;
}

uint64_t fnt_FLIPRGON(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  _BYTE *v10;
  int v11;
  FILE **v13;
  FILE *v14;
  uint64_t v15;
  _WORD *exception;

  if (!*a1)
  {
    v13 = (FILE **)MEMORY[0x1E0C80C10];
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "CHECK_ASSERTION: interpreter assertion failed \"%s\"");
    goto LABEL_15;
  }
  v2 = *(_QWORD *)(*a1 + 40);
  v3 = a1[7];
  CHECK_STACK_POINTER_BASE((uint64_t)a1, v3);
  v4 = *(_DWORD *)(v3 - 4);
  v5 = *a1;
  CHECK_ELEMENTPTR((uint64_t)a1, (int *)*a1);
  if (v4 < 0 || *(_DWORD *)(v5 + 112) <= v4)
  {
    v13 = (FILE **)MEMORY[0x1E0C80C10];
    v14 = (FILE *)*MEMORY[0x1E0C80C10];
LABEL_14:
    fprintf(v14, "CHECK_RANGE_INDEX: %d not in range (%d - %d), interpreter value out of range");
LABEL_15:
    v15 = *(_QWORD *)(a1[9] + 8);
    if (v15)
      fprintf(*v13, "(glyph = %d)\n", *(_DWORD *)(v15 + 88));
    fputc(10, *v13);
    exception = __cxa_allocate_exception(2uLL);
    *exception = 1;
    __cxa_throw(exception, MEMORY[0x1E0DE4F10], 0);
  }
  result = CHECK_STACK_POINTER_BASE((uint64_t)a1, v3 - 4);
  v9 = *(_DWORD *)(v3 - 8);
  v8 = v3 - 8;
  v7 = v9;
  if ((v9 & 0x80000000) != 0 || *(_DWORD *)(*a1 + 112) <= (int)v7)
  {
    v13 = (FILE **)MEMORY[0x1E0C80C10];
    v14 = (FILE *)*MEMORY[0x1E0C80C10];
    goto LABEL_14;
  }
  if (v4 - (int)v7 >= 0)
  {
    v10 = (_BYTE *)(v2 + v7);
    v11 = ~v4 + v7;
    do
      *v10++ |= 1u;
    while (!__CFADD__(v11++, 1));
  }
  a1[7] = v8;
  return result;
}

uint64_t fnt_FLIPRGOFF(unint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  int v4;
  unint64_t v5;
  uint64_t result;
  unint64_t v7;
  uint64_t v8;
  unsigned int v9;
  _BYTE *v10;
  int v11;
  FILE **v13;
  FILE *v14;
  uint64_t v15;
  _WORD *exception;

  if (!*a1)
  {
    v13 = (FILE **)MEMORY[0x1E0C80C10];
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "CHECK_ASSERTION: interpreter assertion failed \"%s\"");
    goto LABEL_15;
  }
  v2 = *(_QWORD *)(*a1 + 40);
  CHECK_STACK_POINTER_BASE((uint64_t)a1, a1[7]);
  v3 = a1[7];
  v4 = *(_DWORD *)(v3 - 4);
  a1[7] = v3 - 4;
  v5 = *a1;
  CHECK_ELEMENTPTR((uint64_t)a1, (int *)*a1);
  if (v4 < 0 || *(_DWORD *)(v5 + 112) <= v4)
  {
    v13 = (FILE **)MEMORY[0x1E0C80C10];
    v14 = (FILE *)*MEMORY[0x1E0C80C10];
LABEL_14:
    fprintf(v14, "CHECK_RANGE_INDEX: %d not in range (%d - %d), interpreter value out of range");
LABEL_15:
    v15 = *(_QWORD *)(a1[9] + 8);
    if (v15)
      fprintf(*v13, "(glyph = %d)\n", *(_DWORD *)(v15 + 88));
    fputc(10, *v13);
    exception = __cxa_allocate_exception(2uLL);
    *exception = 1;
    __cxa_throw(exception, MEMORY[0x1E0DE4F10], 0);
  }
  result = CHECK_STACK_POINTER_BASE((uint64_t)a1, a1[7]);
  v7 = a1[7];
  v9 = *(_DWORD *)(v7 - 4);
  v8 = v9;
  a1[7] = v7 - 4;
  if ((v9 & 0x80000000) != 0 || *(_DWORD *)(*a1 + 112) <= (int)v8)
  {
    v13 = (FILE **)MEMORY[0x1E0C80C10];
    v14 = (FILE *)*MEMORY[0x1E0C80C10];
    goto LABEL_14;
  }
  if (v4 - (int)v8 >= 0)
  {
    v10 = (_BYTE *)(v2 + v8);
    v11 = ~v4 + v8;
    do
      *v10++ &= ~1u;
    while (!__CFADD__(v11++, 1));
  }
  return result;
}

uint64_t fnt_MPS(_QWORD *a1)
{
  uint64_t result;
  _DWORD *v3;

  GrowStackForPush(a1, 1);
  result = CHECK_STACK_POINTER_END((uint64_t)a1, a1[7]);
  v3 = (_DWORD *)a1[7];
  *v3 = *(_DWORD *)(a1[10] + 120);
  a1[7] = v3 + 1;
  return result;
}

__n128 fnt_IDefPatch(uint64_t a1)
{
  uint64_t v2;
  int v3;
  int v4;
  unsigned __int8 *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  __n128 result;
  FILE **v10;
  uint64_t v11;
  _WORD *exception;
  __n128 v13;

  v2 = *(_QWORD *)(a1 + 80);
  v3 = *(_DWORD *)(v2 + 124);
  if (v3 < 1)
LABEL_5:
    fnt_IllegalInstruction();
  v4 = v3 + 1;
  v5 = (unsigned __int8 *)(*(_QWORD *)(v2 + 56) + 7);
  while (*v5 != *(unsigned __int8 *)(a1 + 363))
  {
    --v4;
    v5 += 8;
    if (v4 <= 1)
      goto LABEL_5;
  }
  v6 = *(v5 - 1);
  if (v6 >= 2)
  {
    v10 = (FILE **)MEMORY[0x1E0C80C10];
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "CHECK_PROGRAM: %d is neither a fontProgramIndex(%d) nor preProgramIndex(%d)", v6, 0, 1);
    v11 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8);
    if (v11)
      fprintf(*v10, "(glyph = %d)\n", *(_DWORD *)(v11 + 88));
    fputc(10, *v10);
    exception = __cxa_allocate_exception(2uLL);
    *exception = 1;
    __cxa_throw(exception, MEMORY[0x1E0DE4F10], 0);
  }
  v7 = *(_QWORD *)(a1 + 64);
  v8 = *(_QWORD *)(v2 + 8 * *(v5 - 1) + 64) + *(int *)(v5 - 7);
  v13 = *(__n128 *)(a1 + 368);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(a1 + 144))(a1, v8, v8 + *(unsigned __int16 *)(v5 - 3));
  *(_QWORD *)(a1 + 64) = v7;
  result = v13;
  *(__n128 *)(a1 + 368) = v13;
  return result;
}

unsigned __int8 *fnt_IDEF(unint64_t *a1)
{
  unint64_t v2;
  int v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  unsigned __int8 *result;
  FILE **v13;
  uint64_t v14;
  _WORD *exception;

  CHECK_STACK_POINTER_BASE((uint64_t)a1, a1[7]);
  v2 = a1[7];
  v3 = *(unsigned __int8 *)(v2 - 4);
  a1[7] = v2 - 4;
  v4 = a1[10];
  v5 = *(int *)(v4 + 124);
  if ((int)v5 < 1)
  {
LABEL_5:
    v6 = 0;
  }
  else
  {
    v6 = *(_QWORD *)(v4 + 56);
    v7 = v5 + 1;
    while (*(unsigned __int8 *)(v6 + 7) != v3)
    {
      v6 += 8;
      if (--v7 <= 1)
        goto LABEL_5;
    }
  }
  v8 = *(int *)(v4 + 128);
  if (v8 >= 2)
  {
    v13 = (FILE **)MEMORY[0x1E0C80C10];
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "CHECK_PROGRAM: %d is neither a fontProgramIndex(%d) nor preProgramIndex(%d)", v8, 0, 1);
    v14 = *(_QWORD *)(a1[9] + 8);
    if (v14)
      fprintf(*v13, "(glyph = %d)\n", *(_DWORD *)(v14 + 88));
    fputc(10, *v13);
    exception = __cxa_allocate_exception(2uLL);
    *exception = 1;
LABEL_17:
    __cxa_throw(exception, MEMORY[0x1E0DE4F10], 0);
  }
  v9 = *(_QWORD *)(v4 + 8 * v8 + 64);
  v10 = (unsigned __int8 *)a1[8];
  if (v6)
    goto LABEL_10;
  if ((int)v5 >= *(unsigned __int16 *)(*(_QWORD *)(v4 + 248) + 22) + 4)
  {
    exception = __cxa_allocate_exception(2uLL);
    *exception = 5;
    goto LABEL_17;
  }
  v11 = *(_QWORD *)(v4 + 56);
  *(_DWORD *)(v4 + 124) = v5 + 1;
  v6 = v11 + 8 * v5;
LABEL_10:
  if ((_DWORD)v8 == 1)
    *(_BYTE *)(v4 + 265) = 1;
  *(_BYTE *)(v6 + 6) = v8;
  *(_BYTE *)(v6 + 7) = v3;
  *(_DWORD *)v6 = (_DWORD)v10 - v9;
  result = fnt_FindENDF((uint64_t)a1, v10);
  *(_WORD *)(v6 + 4) = ~*((_WORD *)a1 + 32) + (_WORD)result;
  a1[8] = (unint64_t)result;
  return result;
}

uint64_t TTrueTypeFont::IsTrueTypeFont(TTrueTypeFont *this, TSFNTFont *a2, const TSFNTFont *a3)
{
  int v4;
  uint64_t result;
  const TSFNTFont *v6;
  _BYTE v7[24];
  uint64_t v8;

  v4 = (int)this;
  result = 0;
  v8 = *MEMORY[0x1E0C80C00];
  if (v4 < 0x10000)
  {
    if (v4 != -1519689116 && v4 != -1519619212)
      return result;
LABEL_7:
    qmemcpy(v7, "pxamdaehaehhxtmhacolfylg", sizeof(v7));
    result = TSFNTFont::HasTableTags(a2, (uint64_t)v7, 6);
    if ((_DWORD)result)
      return TTrueTypeFont::ThrowIfInvalid(a2, v6);
    return result;
  }
  if (v4 == 1953658213 || v4 == 0x10000)
    goto LABEL_7;
  return result;
}

uint64_t TTrueTypeFont::ThrowIfInvalid(TTrueTypeFont *this, const TSFNTFont *a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;

  *(_QWORD *)&v10 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v3 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v8 = v3;
  v9 = v3;
  v7 = v3;
  TsfntTable::TsfntTable((TsfntTable *)&v7, this, 1835104368);
  *(_QWORD *)&v7 = &off_1E6179438;
  if (TsfntTable::operator BOOL((TsfntTable *)&v7))
    TmaxpTable::GetNumGlyphs((TmaxpTable *)&v7);
  *(_QWORD *)&v7 = &off_1E6176770;
  TDataReference::DucRefCount((TDataReference *)&v7);
  *(_QWORD *)&v10 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v8 = v4;
  v9 = v4;
  v7 = v4;
  TheadTable::TheadTable((TheadTable *)&v7, this);
  if (TsfntTable::operator BOOL((TsfntTable *)&v7)
    && (TheadTable::GetUnitsPerEm((TheadTable *)&v7), *(_WORD *)(TheadTable::GetHead((TheadTable *)&v7) + 52)))
  {
    *(_QWORD *)&v7 = &off_1E6176770;
    TDataReference::DucRefCount((TDataReference *)&v7);
    return 0;
  }
  else
  {
    *(_QWORD *)&v7 = &off_1E6176770;
    TDataReference::DucRefCount((TDataReference *)&v7);
    *(_QWORD *)&v6 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v10 = v6;
    v11 = v6;
    v8 = v6;
    v9 = v6;
    v7 = v6;
    ThmtxTable::ThmtxTable((uint64_t)&v7, this, 0);
    if (TsfntTable::operator BOOL((TsfntTable *)&v7))
      ThmtxTable::GetHhea((ThmtxTable *)&v7);
    *(_QWORD *)&v7 = &off_1E6176770;
    TDataReference::DucRefCount((TDataReference *)&v7);
    return 1;
  }
}

void sub_1B09B0008(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  TheadTable::~TheadTable((TheadTable *)&a9);
  __cxa_begin_catch(a1);
  __cxa_rethrow();
}

void sub_1B09B0064(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t TTrueTypeMemoryFont::TTrueTypeMemoryFont(uint64_t a1, uint64_t a2, CFTypeRef cf)
{
  CFTypeRef v4;
  const void *v6;

  *(_DWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = &off_1E6176770;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_DWORD *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 132) = 0;
  *(_BYTE *)(a1 + 136) = 0;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 96) = &off_1E6176770;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_BYTE *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 184) = -1;
  *(_QWORD *)(a1 + 200) = &off_1E6176678;
  *(_DWORD *)(a1 + 192) = 0;
  *(_QWORD *)a1 = &off_1E6179BC8;
  *(_QWORD *)(a1 + 16) = &unk_1E6179DD0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 216) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  if (cf)
    v4 = CFRetain(cf);
  else
    v4 = 0;
  v6 = v4;
  TInMemoryDataReference::TInMemoryDataReference(a1 + 224, (const __CFData **)&v6, 0);
  TCFData::~TCFData(&v6);
  return a1;
}

void sub_1B09B0160(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  TSFNTFont *v10;
  TInMemoryDataReference *v11;

  TInMemoryDataReference::~TInMemoryDataReference(v11);
  TSFNTFont::~TSFNTFont(v10);
  _Unwind_Resume(a1);
}

void TTrueTypeMemoryFont::~TTrueTypeMemoryFont(TTrueTypeMemoryFont *this)
{
  *(_QWORD *)this = &off_1E6179BC8;
  *((_QWORD *)this + 2) = &unk_1E6179DD0;
  TInMemoryDataReference::~TInMemoryDataReference((TTrueTypeMemoryFont *)((char *)this + 224));
  TInMemoryDataReference::~TInMemoryDataReference((TTrueTypeMemoryFont *)((char *)this + 200));
  TSFNTFont::~TSFNTFont(this);
}

{
  TTrueTypeMemoryFont::~TTrueTypeMemoryFont(this);
  JUMPOUT(0x1B5E0CD38);
}

void `non-virtual thunk to'TTrueTypeMemoryFont::~TTrueTypeMemoryFont(TTrueTypeMemoryFont *this)
{
  TTrueTypeMemoryFont::~TTrueTypeMemoryFont((TTrueTypeMemoryFont *)((char *)this - 16));
}

{
  TTrueTypeMemoryFont::~TTrueTypeMemoryFont((TTrueTypeMemoryFont *)((char *)this - 16));
  JUMPOUT(0x1B5E0CD38);
}

uint64_t TTrueTypeMemoryFont::GetKind(TTrueTypeMemoryFont *this)
{
  return 9;
}

BOOL TTrueTypeMemoryFont::GotTable(TTrueTypeMemoryFont *this, int a2)
{
  BOOL v2;

  if (a2 == 1516335206)
    v2 = *(_QWORD *)(*((_QWORD *)this + 29) + 16) == 0;
  else
    v2 = TSFNTFont::GetTableOffset(this, a2, 0) == -1;
  return !v2;
}

_QWORD *TTrueTypeMemoryFont::GetTable@<X0>(TTrueTypeMemoryFont *this@<X0>, unint64_t *a2@<X2>, int a3@<W1>, uint64_t a4@<X8>)
{
  __int128 v8;
  uint64_t v9;
  _QWORD *result;
  uint64_t v11;
  uint64_t v12;

  if (a3 == 1516335206)
  {
    *(_QWORD *)&v8 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)a4 = v8;
    *(_OWORD *)(a4 + 16) = v8;
    v9 = *((_QWORD *)this + 29);
    if (!*(_QWORD *)(v9 + 8) || (*(_BYTE *)(v9 + 19) & 0x80) != 0)
    {
      *(_QWORD *)(a4 + 8) = 0;
      *(_QWORD *)(a4 + 16) = 0;
      *(_QWORD *)(a4 + 24) = 0;
    }
    else
    {
      result = TDataReference::TDataReference((_QWORD *)a4, v9, 0, 0, 0);
      v11 = *(_QWORD *)(a4 + 24) - *(_QWORD *)(a4 + 16);
      if (v11 >= 1)
      {
        v12 = *(_QWORD *)(a4 + 8);
        if (v12)
        {
          if (*(_QWORD *)(v12 + 8))
          {
            *a2 = v11;
            return result;
          }
        }
      }
    }
    *(_QWORD *)a4 = &off_1E6176770;
    TDataReference::DucRefCount((TDataReference *)a4);
  }
  return (_QWORD *)TSFNTFont::GetTable(this, a2, a3, (_QWORD *)a4);
}

uint64_t TTrueTypeMemoryFont::GetFontRef(TTrueTypeMemoryFont *this)
{
  return (uint64_t)this + 200;
}

void TTrueTypeWOFFFont::TTrueTypeWOFFFont(TTrueTypeWOFFFont *this, CFDataRef theData, int a3)
{
  const UInt8 *BytePtr;
  CFIndex Length;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  CFTypeRef v11;
  _QWORD v12[2];
  int v13;

  BytePtr = CFDataGetBytePtr(theData);
  Length = CFDataGetLength(theData);
  v12[0] = &off_1E6176678;
  v8 = operator new();
  *(_QWORD *)v8 = &off_1E6176818;
  *(_QWORD *)(v8 + 8) = BytePtr;
  *(_QWORD *)(v8 + 16) = Length;
  *(_QWORD *)(v8 + 24) = &unk_1E6176840;
  *(_DWORD *)(v8 + 36) = 0;
  v12[1] = v8;
  *(_DWORD *)(v8 + 32) = 0;
  v9 = (unsigned int *)(v8 + 32);
  v13 = a3;
  do
    v10 = __ldxr(v9);
  while (__stxr(v10 + 1, v9));
  TTrueTypeMemoryFont::TTrueTypeMemoryFont((uint64_t)this, (uint64_t)v12, 0);
  TInMemoryDataReference::~TInMemoryDataReference((TInMemoryDataReference *)v12);
  *(_QWORD *)this = &off_1E61B58C0;
  *((_QWORD *)this + 2) = &unk_1E61B5AC8;
  if (theData)
    v11 = CFRetain(theData);
  else
    v11 = 0;
  *((_QWORD *)this + 31) = v11;
}

void sub_1B09B0444(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  TTrueTypeMemoryFont *v10;

  TTrueTypeMemoryFont::~TTrueTypeMemoryFont(v10);
  _Unwind_Resume(a1);
}

void TTrueTypeWOFFFont::~TTrueTypeWOFFFont(TTrueTypeWOFFFont *this)
{
  *(_QWORD *)this = &off_1E61B58C0;
  *((_QWORD *)this + 2) = &unk_1E61B5AC8;
  TCFData::~TCFData((const void **)this + 31);
  TTrueTypeMemoryFont::~TTrueTypeMemoryFont(this);
}

{
  *(_QWORD *)this = &off_1E61B58C0;
  *((_QWORD *)this + 2) = &unk_1E61B5AC8;
  TCFData::~TCFData((const void **)this + 31);
  TTrueTypeMemoryFont::~TTrueTypeMemoryFont(this);
}

{
  *(_QWORD *)this = &off_1E61B58C0;
  *((_QWORD *)this + 2) = &unk_1E61B5AC8;
  TCFData::~TCFData((const void **)this + 31);
  TTrueTypeMemoryFont::~TTrueTypeMemoryFont(this);
  JUMPOUT(0x1B5E0CD38);
}

void `non-virtual thunk to'TTrueTypeWOFFFont::~TTrueTypeWOFFFont(TTrueTypeWOFFFont *this)
{
  TTrueTypeMemoryFont *v1;

  *((_QWORD *)this - 2) = &off_1E61B58C0;
  v1 = (TTrueTypeWOFFFont *)((char *)this - 16);
  *(_QWORD *)this = &unk_1E61B5AC8;
  TCFData::~TCFData((const void **)this + 29);
  TTrueTypeMemoryFont::~TTrueTypeMemoryFont(v1);
}

{
  TTrueTypeWOFFFont::~TTrueTypeWOFFFont((TTrueTypeWOFFFont *)((char *)this - 16));
}

void `non-virtual thunk to'TTrueTypeDataForkFont::~TTrueTypeDataForkFont(TTrueTypeDataForkFont *this)
{
  TSFNTFont *v1;

  *((_QWORD *)this - 2) = &off_1E61799A0;
  v1 = (TTrueTypeDataForkFont *)((char *)this - 16);
  *(_QWORD *)this = &unk_1E6179BA8;
  TFileDataSurrogate::~TFileDataSurrogate((const TFileFragmentReference **)this + 23);
  TSFNTFont::~TSFNTFont(v1);
}

{
  TTrueTypeDataForkFont::~TTrueTypeDataForkFont((TTrueTypeDataForkFont *)((char *)this - 16));
}

void TTrueTypeFont::GetGlyphName(TTrueTypeFont *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  __int128 v6;
  BOOL v7;
  char *v8;
  size_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  char __s1[16];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v6 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v12 = v6;
  v13 = v6;
  v10 = v6;
  v11 = v6;
  TSFNTFont::GetGlyphName(this, a2, (uint64_t)&v10);
  if (*((_QWORD *)&v10 + 1))
  {
    if (!(_QWORD)v11)
      goto LABEL_10;
  }
  else if (!*((_QWORD *)&v12 + 1)
         || (*(_QWORD *)(*((_QWORD *)&v12 + 1) + 8) ? (v7 = (_QWORD)v11 == 0) : (v7 = 1), v7))
  {
LABEL_10:
    if (a2)
    {
      if ((*(unsigned int (**)(TTrueTypeFont *))(*(_QWORD *)this + 168))(this) <= a2)
      {
        *(_QWORD *)(a3 + 8) = 0;
        *(_QWORD *)(a3 + 16) = 0;
        *(_QWORD *)a3 = &off_1E61768F8;
        *(_BYTE *)(a3 + 24) = 0;
        goto LABEL_17;
      }
      memset(__s1, 170, sizeof(__s1));
      snprintf_l(__s1, 0x10uLL, 0, "gid%d", a2);
      v8 = strndup(__s1, 0xFuLL);
      v9 = strnlen(__s1, 0xFuLL);
      *(_QWORD *)(a3 + 8) = v8;
      *(_QWORD *)(a3 + 16) = v9;
      *(_QWORD *)a3 = &off_1E61768F8;
    }
    else
    {
      *(_QWORD *)(a3 + 8) = strdup(".notdef");
      *(_QWORD *)(a3 + 16) = 7;
      *(_QWORD *)a3 = &off_1E61768F8;
    }
    *(_BYTE *)(a3 + 24) = 1;
LABEL_17:
    *(_QWORD *)(a3 + 32) = &off_1E6176770;
    *(_QWORD *)(a3 + 40) = 0;
    *(_QWORD *)(a3 + 48) = 0;
    *(_QWORD *)(a3 + 56) = 0;
    goto LABEL_18;
  }
  TStringRef::TStringRef(a3, (uint64_t)&v10);
LABEL_18:
  TStringRef::~TStringRef((void **)&v10);
}

void sub_1B09B07B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  TStringRef::~TStringRef((void **)va);
  _Unwind_Resume(a1);
}

size_t TSFNTFont::GetPostScriptNameSuffixForVariation(TSFNTFont *a1, uint64_t *a2, char *a3, _QWORD *a4)
{
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  unsigned __int16 *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  double *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int *v28;
  char *v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned __int16 *v33;
  unint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  double *v41;
  unint64_t v42;
  double v43;
  double v44;
  double v45;
  double v46;
  int v47;
  uint64_t v48;
  unint64_t v49;
  unsigned int v50;
  unint64_t v51;
  unint64_t v52;
  char *v54;
  unint64_t v55;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  unsigned int v62;
  uint64_t v63;
  unsigned int v64;
  size_t v65;
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  unsigned __int8 *v70;
  unsigned __int8 *v71;
  char v72;
  int v73;
  _DWORD *exception;
  __int128 v75;
  __int128 v76;
  char __source[16];
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  unsigned int __dst[256];
  _OWORD v110[4];
  void *v111;
  unsigned __int8 *v112;
  unint64_t v113;
  uint64_t v114;

  v114 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v8 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v75 = v8;
  v76 = v8;
  TSFNTFont::GetTable(a1, 1719034226, 0, &v75);
  if (!*((_QWORD *)&v75 + 1))
    goto LABEL_73;
  v9 = *(_QWORD *)(*((_QWORD *)&v75 + 1) + 8);
  if (!v9)
    goto LABEL_73;
  v10 = v76;
  v11 = (unsigned __int16 *)(v9 + v76);
  memcpy(__dst, &unk_1B0A402A0, sizeof(__dst));
  v12 = *(unsigned __int16 *)(v9 + v76 + 8);
  v13 = __rev16(v12);
  if (v13 > 0x3F)
    goto LABEL_73;
  v14 = bswap32(v11[2]) >> 16;
  if (*(_WORD *)(v9 + v76 + 8))
  {
    if (v13 <= 1)
      v15 = 1;
    else
      v15 = v13;
    v16 = (double *)&__dst[2];
    v17 = (unsigned int *)(v76 + v14 + v9 + 8);
    do
    {
      *((_DWORD *)v16 - 2) = bswap32(*(v17 - 2));
      v18 = *v17;
      v17 += 5;
      *v16 = (double)(int)bswap32(v18) * 0.0000152587891;
      v16 += 2;
      --v15;
    }
    while (v15);
  }
  v19 = v11[5];
  v20 = v11[6];
  v21 = v11[7];
  v22 = *a2;
  if (*a2)
  {
    v23 = 0;
    v24 = 0;
    v25 = a2[1];
    if (v13 <= 1)
      v26 = 1;
    else
      v26 = v13;
    do
    {
      if (v12)
      {
        v27 = 0;
        v28 = &__dst[2];
        while (*(_DWORD *)(v25 + 16 * v23) != *(v28 - 2))
        {
          ++v27;
          v28 += 4;
          if (v26 == v27)
          {
            LOWORD(v27) = v26;
            goto LABEL_21;
          }
        }
        *(_QWORD *)v28 = *(_QWORD *)(v25 + 16 * v23 + 8);
      }
      else
      {
        LOWORD(v27) = 0;
      }
LABEL_21:
      v24 |= v13 == (unsigned __int16)v27;
      ++v23;
    }
    while (v23 != v22);
    if ((v24 & 1) != 0)
      goto LABEL_73;
  }
  else if (v13 <= 1)
  {
    v26 = 1;
  }
  else
  {
    v26 = v13;
  }
  v29 = (char *)v11 + v14;
  if (!v20)
  {
LABEL_43:
    v107 = 0u;
    v108 = 0u;
    v105 = 0u;
    v106 = 0u;
    v103 = 0u;
    v104 = 0u;
    v101 = 0u;
    v102 = 0u;
    v99 = 0u;
    v100 = 0u;
    v97 = 0u;
    v98 = 0u;
    v95 = 0u;
    v96 = 0u;
    v93 = 0u;
    v94 = 0u;
    v91 = 0u;
    v92 = 0u;
    v89 = 0u;
    v90 = 0u;
    v87 = 0u;
    v88 = 0u;
    v85 = 0u;
    v86 = 0u;
    v83 = 0u;
    v84 = 0u;
    v81 = 0u;
    v82 = 0u;
    v79 = 0u;
    v80 = 0u;
    *(_OWORD *)__source = 0u;
    v78 = 0u;
    if (!v12)
      goto LABEL_73;
    v48 = 0;
    v49 = 0;
    while (1)
    {
      v50 = 0;
      v51 = __dst[4 * v48];
      v52 = v49 + 1;
      __source[v49] = 95;
      do
      {
        if ((v51 - 805306368) >> 25 >= 5 && ((v51 & 0xDF000000) - 1090519040) >> 25 > 0xC)
        {
          v54 = &__source[v52];
          v54[1] = TSFNTFont::GetPostScriptNameSuffixForVariation(TVariationsRef const&,char *,std::unordered_map<unsigned short,TFontNameString> const*)const::nibbleToHex[(unint64_t)v51 >> 28];
          v55 = v52 + 3;
          v54[2] = TSFNTFont::GetPostScriptNameSuffixForVariation(TVariationsRef const&,char *,std::unordered_map<unsigned short,TFontNameString> const*)const::nibbleToHex[(v51 >> 24) & 0xF];
          LOBYTE(v54) = 37;
        }
        else
        {
          LODWORD(v54) = BYTE3(v51);
          v55 = v52 + 1;
        }
        __source[v52] = (char)v54;
        v51 = ((_DWORD)v51 << 8);
        v52 = v55;
      }
      while (v50++ < 3);
      v57 = *(double *)&__dst[4 * v48 + 2];
      v58 = (double)(int)bswap32(*(_DWORD *)&v29[20 * v48 + 8]) * 0.0000152587891;
      v59 = vabdd_f64(v57, v58);
      if (v59 < 0.0001)
        goto LABEL_63;
      v60 = fabs(v57);
      v61 = fabs(v58);
      if (v60 >= v61)
        v61 = v60;
      if (v59 / v61 < 0.0001)
        goto LABEL_63;
      v62 = vcvtd_n_s64_f64(v57, 0x10uLL);
      if (v62)
        break;
      v49 = v55 + 1;
      __source[v55] = 48;
LABEL_64:
      if (v49 <= 0xFF && ++v48 != v26)
        continue;
      if (v49 - 1 <= 0xFE)
      {
        v65 = strlcpy(a3, __source, 0x100uLL);
        goto LABEL_74;
      }
LABEL_73:
      v65 = 0;
      goto LABEL_74;
    }
    if (v62 >> 28)
    {
      v63 = 8;
      do
      {
LABEL_69:
        v49 = v55 + 1;
        __source[v55] = TSFNTFont::GetPostScriptNameSuffixForVariation(TVariationsRef const&,char *,std::unordered_map<unsigned short,TFontNameString> const*)const::nibbleToHex[(unint64_t)v62 >> 28];
        v62 *= 16;
        ++v55;
        --v63;
      }
      while (v63);
      goto LABEL_64;
    }
    v63 = 8;
    do
    {
      v64 = HIBYTE(v62);
      v62 *= 16;
      --v63;
    }
    while (!v64);
    if (v63)
      goto LABEL_69;
LABEL_63:
    v49 = v55;
    goto LABEL_64;
  }
  v30 = bswap32(v19) >> 16;
  v31 = __rev16(v20);
  v32 = bswap32(v21);
  v33 = (unsigned __int16 *)&v29[v30 * (unint64_t)v13];
  v34 = v9 + *((_QWORD *)&v10 + 1);
  v35 = HIWORD(v32);
  v36 = a3 + 1;
  v37 = v30 * (unint64_t)v13 + v14;
  v38 = (unint64_t)v11 + v37 + 4;
  v39 = v37 + v10 + v9 + 8;
  while (1)
  {
    if (v12)
    {
      if (v38 < (unint64_t)v11)
        goto LABEL_86;
      v40 = 0;
      v41 = (double *)&__dst[2];
      v42 = v39;
      while (1)
      {
        if (v42 > v34)
          goto LABEL_86;
        v43 = (double)(int)bswap32(*(_DWORD *)(v42 - 4)) * 0.0000152587891;
        v44 = vabdd_f64(*v41, v43);
        if (v44 >= 0.0001)
        {
          v45 = fabs(*v41);
          v46 = fabs(v43);
          if (v45 < v46)
            v45 = v46;
          if (v44 / v45 >= 0.0001)
            break;
        }
        --v40;
        v42 += 4;
        v41 += 2;
        if (-v26 == v40)
        {
          LOWORD(v47) = v26;
          goto LABEL_41;
        }
      }
      v47 = -(int)v40;
    }
    else
    {
      LOWORD(v47) = 0;
    }
LABEL_41:
    if (v13 == (unsigned __int16)v47)
      break;
    --v31;
    v33 = (unsigned __int16 *)((char *)v33 + v35);
    v38 += v35;
    v39 += v35;
    if (!(_WORD)v31)
      goto LABEL_43;
  }
  if (v11 > v33 || (unint64_t)(v33 + 1) > v34)
  {
LABEL_86:
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E6176998;
    exception[2] = 4;
  }
  *(_QWORD *)&v67 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v67 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v81 = v67;
  v82 = v67;
  v79 = v67;
  v80 = v67;
  *(_OWORD *)__source = v67;
  v78 = v67;
  TFont::GetNameUsingMap((uint64_t)a1, bswap32(*v33) >> 16, a4, (TFontNameString *)__source);
  *a3 = 95;
  *(_QWORD *)&v68 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v68 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v110[2] = v68;
  v110[3] = v68;
  v110[0] = v68;
  v110[1] = v68;
  v111 = 0;
  v112 = (unsigned __int8 *)v110;
  v113 = 0;
  TPostScriptNameString::operator=((uint64_t)v110, (TFontNameString *)__source);
  if (v113 >= 0xFE)
    v69 = 254;
  else
    v69 = v113;
  if (v69)
  {
    v70 = v112;
    v71 = &v112[v69];
    do
    {
      v73 = *v70++;
      v72 = v73;
      if (v73 == 32)
        v72 = 45;
      *v36++ = v72;
    }
    while (v70 < v71);
  }
  *v36 = 0;
  free(v111);
  TFontNameString::~TFontNameString((TFontNameString *)__source);
  v65 = v69 + 1;
LABEL_74:
  *(_QWORD *)&v75 = &off_1E6176770;
  TDataReference::DucRefCount((TDataReference *)&v75);
  return v65;
}

void sub_1B09B0DB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  TDataReference::~TDataReference((TDataReference *)&a9);
  _Unwind_Resume(a1);
}

void TSBITDataForkFont::~TSBITDataForkFont(TSBITDataForkFont *this)
{
  *(_QWORD *)this = &off_1E6179778;
  *((_QWORD *)this + 2) = &unk_1E6179980;
  TSFNTFont::~TSFNTFont((TSBITDataForkFont *)((char *)this + 224));
  *(_QWORD *)this = &off_1E61799A0;
  *((_QWORD *)this + 2) = &unk_1E6179BA8;
  TFileDataSurrogate::~TFileDataSurrogate((const TFileFragmentReference **)this + 25);
  TSFNTFont::~TSFNTFont(this);
}

{
  TSBITDataForkFont::~TSBITDataForkFont(this);
  JUMPOUT(0x1B5E0CD38);
}

void `non-virtual thunk to'TSBITDataForkFont::~TSBITDataForkFont(TSBITDataForkFont *this)
{
  TSBITDataForkFont::~TSBITDataForkFont((TSBITDataForkFont *)((char *)this - 16));
}

{
  TSBITDataForkFont::~TSBITDataForkFont((TSBITDataForkFont *)((char *)this - 16));
  JUMPOUT(0x1B5E0CD38);
}

__n128 TSBITDataForkFont::GetHorizontalMetrics(TSBITDataForkFont *this, int *a2, int *a3, int *a4, int *a5, int *a6, int *a7, int *a8, int *a9, int *a10, BOOL *a11, BOOL *a12, double *a13, int *a14, int *a15, double *a16, double *a17, double *a18, double *a19, __int16 *a20,__int16 *a21)
{
  __n128 result;

  TSBITFont::GetHorizontalMetrics((TSBITDataForkFont *)((char *)this + 224), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20,
    a21);
  return result;
}

uint64_t TSBITDataForkFont::GetAscent(TSBITDataForkFont *this)
{
  return *((__int16 *)this + 224);
}

uint64_t TSBITDataForkFont::GetDescent(TSBITDataForkFont *this)
{
  return *((__int16 *)this + 225);
}

uint64_t TSBITDataForkFont::GetLineGap(TSBITDataForkFont *this)
{
  return *((__int16 *)this + 226);
}

uint64_t TSBITDataForkFont::GetMaxAdvance(TSBITDataForkFont *this)
{
  return *((unsigned __int16 *)this + 227);
}

uint64_t TSBITDataForkFont::GetAvgAdvance(TSBITDataForkFont *this)
{
  return TSBITFont::GetAvgAdvance((TSBITDataForkFont *)((char *)this + 224));
}

uint64_t TSBITDataForkFont::GetStemH(TSBITDataForkFont *this)
{
  return (int)*((double *)this + 55);
}

uint64_t TSBITDataForkFont::GetStemV(TSBITDataForkFont *this)
{
  return (int)*((double *)this + 54);
}

_WORD *TSBITDataForkFont::GetCaretInfo(_WORD *this, __int16 *a2, __int16 *a3, unsigned __int16 *a4)
{
  *a2 = this[228];
  *a3 = this[229];
  *a4 = this[230];
  return this;
}

void TSBITDataForkFont::GetBounds(TSBITDataForkFont *this, double *a2, double *a3, double *a4, double *a5)
{
  TSBITFont::GetBounds((TSBITDataForkFont *)((char *)this + 224), a2, a3, a4, a5);
}

void TSBITWOFFFont::TSBITWOFFFont(TSBITWOFFFont *this, const __CFData *a2, int a3)
{
  _QWORD *v4;

  TTrueTypeWOFFFont::TTrueTypeWOFFFont(this, a2, a3);
  *v4 = &off_1E61B5AE8;
  v4[2] = &unk_1E61B5CF0;
  TSBITFont::TSBITFont((TSBITFont *)(v4 + 32), this);
}

void sub_1B09B0F94(_Unwind_Exception *a1)
{
  TTrueTypeWOFFFont *v1;

  TTrueTypeWOFFFont::~TTrueTypeWOFFFont(v1);
  _Unwind_Resume(a1);
}

void TSBITWOFFFont::~TSBITWOFFFont(TSBITWOFFFont *this)
{
  *(_QWORD *)this = &off_1E61B5AE8;
  *((_QWORD *)this + 2) = &unk_1E61B5CF0;
  TSFNTFont::~TSFNTFont((TSBITWOFFFont *)((char *)this + 256));
  *(_QWORD *)this = &off_1E61B58C0;
  *((_QWORD *)this + 2) = &unk_1E61B5AC8;
  TCFData::~TCFData((const void **)this + 31);
  TTrueTypeMemoryFont::~TTrueTypeMemoryFont(this);
}

{
  TSBITWOFFFont::~TSBITWOFFFont(this);
  JUMPOUT(0x1B5E0CD38);
}

void `non-virtual thunk to'TSBITWOFFFont::~TSBITWOFFFont(TSBITWOFFFont *this)
{
  TSBITWOFFFont::~TSBITWOFFFont((TSBITWOFFFont *)((char *)this - 16));
}

{
  TSBITWOFFFont::~TSBITWOFFFont((TSBITWOFFFont *)((char *)this - 16));
  JUMPOUT(0x1B5E0CD38);
}

__n128 TSBITWOFFFont::GetHorizontalMetrics(TSBITWOFFFont *this, int *a2, int *a3, int *a4, int *a5, int *a6, int *a7, int *a8, int *a9, int *a10, BOOL *a11, BOOL *a12, double *a13, int *a14, int *a15, double *a16, double *a17, double *a18, double *a19, __int16 *a20,__int16 *a21)
{
  __n128 result;

  TSBITFont::GetHorizontalMetrics((TSBITWOFFFont *)((char *)this + 256), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20,
    a21);
  return result;
}

uint64_t TSBITWOFFFont::GetAscent(TSBITWOFFFont *this)
{
  return *((__int16 *)this + 240);
}

uint64_t TSBITWOFFFont::GetDescent(TSBITWOFFFont *this)
{
  return *((__int16 *)this + 241);
}

uint64_t TSBITWOFFFont::GetLineGap(TSBITWOFFFont *this)
{
  return *((__int16 *)this + 242);
}

uint64_t TSBITWOFFFont::GetMaxAdvance(TSBITWOFFFont *this)
{
  return *((unsigned __int16 *)this + 243);
}

uint64_t TSBITWOFFFont::GetAvgAdvance(TSBITWOFFFont *this)
{
  return TSBITFont::GetAvgAdvance((TSBITWOFFFont *)((char *)this + 256));
}

uint64_t TSBITWOFFFont::GetStemH(TSBITWOFFFont *this)
{
  return (int)*((double *)this + 59);
}

uint64_t TSBITWOFFFont::GetStemV(TSBITWOFFFont *this)
{
  return (int)*((double *)this + 58);
}

_WORD *TSBITWOFFFont::GetCaretInfo(_WORD *this, __int16 *a2, __int16 *a3, unsigned __int16 *a4)
{
  *a2 = this[244];
  *a3 = this[245];
  *a4 = this[246];
  return this;
}

void TSBITWOFFFont::GetBounds(TSBITWOFFFont *this, double *a2, double *a3, double *a4, double *a5)
{
  TSBITFont::GetBounds((TSBITWOFFFont *)((char *)this + 256), a2, a3, a4, a5);
}

const TSFNTFont *TSBITMemoryFont::TSBITMemoryFont(const TSFNTFont *a1, uint64_t a2)
{
  _QWORD *v3;

  v3 = (_QWORD *)TTrueTypeMemoryFont::TTrueTypeMemoryFont((uint64_t)a1, a2, 0);
  *v3 = &off_1E61B5D10;
  v3[2] = &unk_1E61B5F18;
  TSBITFont::TSBITFont((TSBITFont *)(v3 + 31), a1);
  return a1;
}

void sub_1B09B1144(_Unwind_Exception *a1)
{
  TTrueTypeMemoryFont *v1;

  TTrueTypeMemoryFont::~TTrueTypeMemoryFont(v1);
  _Unwind_Resume(a1);
}

void TSBITMemoryFont::~TSBITMemoryFont(TSBITMemoryFont *this)
{
  *(_QWORD *)this = &off_1E61B5D10;
  *((_QWORD *)this + 2) = &unk_1E61B5F18;
  TSFNTFont::~TSFNTFont((TSBITMemoryFont *)((char *)this + 248));
  TTrueTypeMemoryFont::~TTrueTypeMemoryFont(this);
}

{
  *(_QWORD *)this = &off_1E61B5D10;
  *((_QWORD *)this + 2) = &unk_1E61B5F18;
  TSFNTFont::~TSFNTFont((TSBITMemoryFont *)((char *)this + 248));
  TTrueTypeMemoryFont::~TTrueTypeMemoryFont(this);
  JUMPOUT(0x1B5E0CD38);
}

void `non-virtual thunk to'TSBITMemoryFont::~TSBITMemoryFont(TSBITMemoryFont *this)
{
  TTrueTypeMemoryFont *v1;

  *((_QWORD *)this - 2) = &off_1E61B5D10;
  v1 = (TSBITMemoryFont *)((char *)this - 16);
  *(_QWORD *)this = &unk_1E61B5F18;
  TSFNTFont::~TSFNTFont((TSBITMemoryFont *)((char *)this + 232));
  TTrueTypeMemoryFont::~TTrueTypeMemoryFont(v1);
}

{
  TSBITMemoryFont::~TSBITMemoryFont((TSBITMemoryFont *)((char *)this - 16));
}

__n128 TSBITMemoryFont::GetHorizontalMetrics(TSBITMemoryFont *this, int *a2, int *a3, int *a4, int *a5, int *a6, int *a7, int *a8, int *a9, int *a10, BOOL *a11, BOOL *a12, double *a13, int *a14, int *a15, double *a16, double *a17, double *a18, double *a19, __int16 *a20,__int16 *a21)
{
  __n128 result;

  TSBITFont::GetHorizontalMetrics((TSBITMemoryFont *)((char *)this + 248), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20,
    a21);
  return result;
}

uint64_t TSBITMemoryFont::GetAscent(TSBITMemoryFont *this)
{
  return *((__int16 *)this + 236);
}

uint64_t TSBITMemoryFont::GetDescent(TSBITMemoryFont *this)
{
  return *((__int16 *)this + 237);
}

uint64_t TSBITMemoryFont::GetLineGap(TSBITMemoryFont *this)
{
  return *((__int16 *)this + 238);
}

uint64_t TSBITMemoryFont::GetMaxAdvance(TSBITMemoryFont *this)
{
  return *((unsigned __int16 *)this + 239);
}

uint64_t TSBITMemoryFont::GetAvgAdvance(TSBITMemoryFont *this)
{
  return TSBITFont::GetAvgAdvance((TSBITMemoryFont *)((char *)this + 248));
}

uint64_t TSBITMemoryFont::GetStemH(TSBITMemoryFont *this)
{
  return (int)*((double *)this + 58);
}

uint64_t TSBITMemoryFont::GetStemV(TSBITMemoryFont *this)
{
  return (int)*((double *)this + 57);
}

_WORD *TSBITMemoryFont::GetCaretInfo(_WORD *this, __int16 *a2, __int16 *a3, unsigned __int16 *a4)
{
  *a2 = this[240];
  *a3 = this[241];
  *a4 = this[242];
  return this;
}

void TSBITMemoryFont::GetBounds(TSBITMemoryFont *this, double *a2, double *a3, double *a4, double *a5)
{
  TSBITFont::GetBounds((TSBITMemoryFont *)((char *)this + 248), a2, a3, a4, a5);
}

void TCFData::~TCFData(const void **this)
{
  const void *v1;

  v1 = *this;
  if (v1)
    CFRelease(v1);
}

uint32x2_t ComputeQDMetrics(uint64_t a1, uint64_t a2, int32x2_t *a3)
{
  int32x2_t *v3;
  unint64_t v6;
  int32x2_t *v7;
  int32x2_t *v8;
  __int16 v9;
  uint64_t v10;
  __int16 v11;
  memoryContext *v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  int v17;
  memoryContext *v18;
  const void *v19;
  int v20;
  int v21;
  uint64_t v22;
  unsigned int v23;
  char *v24;
  int v25;
  unsigned __int16 *v26;
  double v27;
  unsigned int *v28;
  uint64_t v29;
  unsigned int v30;
  int v31;
  int32x2_t *v32;
  uint64_t v33;
  unsigned int v34;
  int v35;
  memoryContext *v36;
  uint64_t v37;
  int v38;
  unsigned __int16 *v39;
  double v40;
  __int128 v41;
  uint64_t v42;
  __int128 *v43;
  __int128 v44;
  __int128 v45;
  _BOOL4 v46;
  int v47;
  __int32 v48;
  char Metrics;
  int32x2_t *v50;
  int v51;
  char v52;
  unsigned __int32 v53;
  int v54;
  int v55;
  int v56;
  __int32 v57;
  uint64_t v58;
  uint32x2_t result;
  uint64_t i;
  unsigned int *v61;
  unsigned int v62;
  int32x2_t *v63;
  int32x2_t *v64;
  int v65;
  signed int v66;
  void *v67[2];
  __int128 v68;
  _BYTE v69[28];
  void *v70[2];
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  unint64_t v78;
  int v79;
  unint64_t v80;
  int32x2_t v81[3];
  _OWORD v82[3];
  unint64_t v83;

  v3 = a3;
  v66 = *(_DWORD *)a2;
  v6 = (unint64_t)&a3[132];
  v7 = a3 + 132;
  memmove(&a3[132], (const void *)(a2 + 276), 0x200uLL);
  v3[2].i32[0] = *(unsigned __int8 *)(a2 + 273);
  v8 = v3 + 4;
  v9 = *(_WORD *)(*(_QWORD *)(a1 + 8) + 130);
  v10 = *(_QWORD *)(a1 + 24);
  if (!*(_BYTE *)(v10 + 490))
    goto LABEL_4;
  v11 = *(_WORD *)(a2 + 274);
  if ((v11 & 1) == 0)
  {
LABEL_27:
    v83 = 0xAAAAAAAAAAAAAAAALL;
    *(_QWORD *)&v41 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v41 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v82[1] = v41;
    v82[2] = v41;
    v82[0] = v41;
    memset(v81, 170, sizeof(v81));
    v80 = 0xAAAAAAAAAAAAAAAALL;
    v78 = 0xAAAAAAAAAAAAAAAALL;
    v76 = v41;
    v77 = v41;
    v74 = v41;
    v75 = v41;
    v72 = v41;
    v73 = v41;
    *(_OWORD *)v70 = v41;
    v71 = v41;
    v42 = *(_QWORD *)(v10 + 80);
    *(_OWORD *)&v69[12] = v41;
    v68 = v41;
    *(_OWORD *)v69 = v41;
    v43 = (__int128 *)(v10 + 96);
    *(_OWORD *)v67 = v41;
    if (v43 != (__int128 *)v42)
    {
      v44 = *v43;
      v45 = v43[1];
      *(_DWORD *)(v42 + 32) = *((_DWORD *)v43 + 8);
      *(_OWORD *)v42 = v44;
      *(_OWORD *)(v42 + 16) = v45;
    }
    if (!sbit_FontMatch(*(memoryContext **)a1, a1, (uint64_t)v67, 1, 0))
      *(_WORD *)(*(_QWORD *)(a1 + 24) + 489) = 0;
    v65 = M3x3Flags((_DWORD *)v42);
    v46 = *(_DWORD *)(v42 + 36) == 1 && *(_DWORD *)(v42 + 40) == 1;
    v47 = -HIDWORD(v67[1]);
    v3->i32[0] = HIDWORD(v67[0]);
    v3->i32[1] = v47;
    v48 = *(_DWORD *)v69;
    v3[1].i32[0] = *(_DWORD *)&v69[12];
    v3[1].i32[1] = v48;
    *(_QWORD *)(a1 + 32) = v70;
    v79 = v3[132].u16[0];
    if (!sbit_IsThereAGlyphImage(a1, &v79))
      *(_BYTE *)(*(_QWORD *)(a1 + 24) + 490) = 0;
    Metrics = sbit_GetMetrics(v82, v81, (int *)&v80, a1, v79, (v11 & 0x100) == 0);
    v64 = v3;
    if (v66)
    {
      if (!Metrics)
      {
        v66 = vcvtd_n_s64_f64((double)v66 * 0.0000152587891 / ((double)*(int *)&v69[16] * 0.0000152587891), 0x10uLL);
        if ((v11 & 0x100) == 0)
          v66 = (v66 + 0x8000) & 0xFFFF0000;
      }
    }
    v50 = v3 + 4;
    do
    {
      v51 = v7->u16[0];
      v7 = (int32x2_t *)((char *)v7 + 2);
      v79 = v51;
      if (!sbit_IsThereAGlyphImage(a1, &v79))
        *(_BYTE *)(*(_QWORD *)(a1 + 24) + 490) = 0;
      v52 = sbit_GetMetrics(v82, v81, (int *)&v80, a1, v79, (v11 & 0x100) == 0);
      if (v46)
        M3x3Mul((int *)v42, v65, v81, (const int *)1);
      v53 = v81[0].i32[0];
      if ((v11 & 0x100) == 0)
        v53 = (v81[0].i32[0] + 0x8000) & 0xFFFF0000;
      v50->i32[0] = v53 + v66;
      v50 = (int32x2_t *)((char *)v50 + 4);
    }
    while ((unint64_t)v50 < v6);
    *(_QWORD *)(a1 + 32) = 0;
    if (v52)
      v54 = 1;
    else
      v54 = v46;
    v55 = *(_DWORD *)&v69[16];
    if (v54)
    {
      v55 = 0x10000;
      v56 = 0x10000;
    }
    else
    {
      v56 = *(_DWORD *)&v69[20];
    }
    v57 = *(_DWORD *)&v69[24];
    v3 = v64;
    v64[3].i32[0] = v56;
    v64[3].i32[1] = v57;
    v64[2].i32[0] |= 0x80000000;
    v64[2].i32[1] = v55;
    goto LABEL_55;
  }
  v12 = *(memoryContext **)a1;
  LODWORD(v70[0]) = 0;
  TFontSurrogate::GetTableIndex((TFontSurrogate *)(*(_QWORD *)v12 + 16), 1752003704, (unsigned int *)v70);
  if (!LODWORD(v70[0]))
  {
    v11 = *(_WORD *)(a2 + 274);
    v10 = *(_QWORD *)(a1 + 24);
    goto LABEL_27;
  }
LABEL_4:
  v67[0] = (void *)0xAAAAAAAAAAAAAAAALL;
  ScalerGetFontTable(*(memoryContext **)a1, 1752003704, 0, v67, 0, 4);
  v13 = 0;
  v14 = *(_QWORD *)(a1 + 8);
  v15 = *(unsigned __int16 *)(v14 + 146);
  v16 = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 96);
  if (v15 < *(unsigned __int16 *)(v14 + 40))
    v13 = *(_DWORD *)a2
        + (int)((double)v16 * (double)((int)bswap32(*((unsigned __int16 *)v67[0] + 2 * v15 - 2)) >> 16) / (double)v9);
  if ((*(_WORD *)(a2 + 274) & 0x100) != 0)
  {
    v26 = (unsigned __int16 *)v67[0];
    v27 = (double)v9;
    v32 = v3 + 4;
    do
    {
      v34 = v7->u16[0];
      v7 = (int32x2_t *)((char *)v7 + 2);
      v33 = v34;
      v35 = v13;
      if (v34 < v15)
        v35 = v66 + (int)((double)v16 * (double)((int)bswap32(v26[2 * v33]) >> 16) / v27);
      v32->i32[0] = v35;
      v32 = (int32x2_t *)((char *)v32 + 4);
    }
    while ((unint64_t)v32 < v6);
  }
  else
  {
    v63 = v3;
    v17 = v66 + 0x8000;
    if (v16 < 16678912)
    {
      v18 = *(memoryContext **)a1;
      v70[0] = (void *)0xAAAAAAAAAAAAAAAALL;
      ScalerGetFontTable(v18, 1751412088, 0, v70, 1, 0);
      v19 = v70[0];
      if (v70[0])
      {
        v20 = (int)bswap32(*((unsigned __int16 *)v70[0] + 1)) >> 16;
        if (v20 >= 1)
        {
          v21 = (v16 + 0x8000) >> 16;
          v22 = bswap32(*((_DWORD *)v70[0] + 1));
          v23 = (unsigned __int16)v20 + 1;
          v24 = (char *)v70[0] + 10;
          do
          {
            v25 = *(v24 - 2);
            if (v21 < v25)
              break;
            if (v21 == v25)
            {
              for (i = 0; i != 256; ++i)
              {
                v61 = (unsigned int *)(v6 + 4 * i - 1024);
                v62 = (v17 + (v24[v7->u16[i]] << 16)) & 0xFFFF0000;
                *v61 = v62;
              }
              ScalerReleaseFontTable(v18, v19);
              v26 = (unsigned __int16 *)v67[0];
              v27 = (double)v9;
              goto LABEL_20;
            }
            --v23;
            v24 += v22;
          }
          while (v23 > 1);
        }
        ScalerReleaseFontTable(v18, v70[0]);
      }
    }
    v26 = (unsigned __int16 *)v67[0];
    v27 = (double)v9;
    v28 = (unsigned int *)v8;
    do
    {
      v30 = v7->u16[0];
      v7 = (int32x2_t *)((char *)v7 + 2);
      v29 = v30;
      v31 = v13 + 0x8000;
      if (v30 < v15)
        v31 = v17 + (int)((double)v16 * (double)((int)bswap32(v26[2 * v29]) >> 16) / v27);
      *v28++ = v31 & 0xFFFF0000;
    }
    while ((unint64_t)v28 < v6);
    v66 += 0x8000;
LABEL_20:
    v3 = v63;
  }
  ScalerReleaseFontTable(*(memoryContext **)a1, v26);
  v36 = *(memoryContext **)a1;
  v37 = *(_QWORD *)(a1 + 24);
  v70[0] = (void *)0xAAAAAAAAAAAAAAAALL;
  ScalerGetFontTable(v36, 1751672161, 0, v70, 0, 36);
  v38 = *(_DWORD *)(v37 + 96);
  v39 = (unsigned __int16 *)v70[0];
  v40 = (double)*(int *)(v37 + 112);
  v3->i32[0] = ((int)(v40 * (double)((int)bswap32(*((unsigned __int16 *)v70[0] + 2)) >> 16) / v27) + 0x8000) & 0xFFFF0000;
  v3->i32[1] = -(((int)(v40 * (double)((int)bswap32(v39[3]) >> 16) / v27) + 0x8000) & 0xFFFF0000);
  v3[1].i32[0] = ((int)(v40 * (double)((int)bswap32(v39[4]) >> 16) / v27) + 0x8000) & 0xFFFF0000;
  v3[1].i32[1] = ((int)((double)v38 * (double)(bswap32(v39[5]) >> 16) / v27) + 0xFFFF) & 0xFFFF0000;
  ScalerReleaseFontTable(v36, v39);
LABEL_55:
  if (v66 < 0)
  {
    do
    {
      if (v8->i32[0] < 0)
        v8->i32[0] = 0;
      v8 = (int32x2_t *)((char *)v8 + 4);
    }
    while ((unint64_t)v8 < v6);
  }
  v58 = *(_QWORD *)(a1 + 24);
  result = vshr_n_u32((uint32x2_t)vadd_s32(*v3, (int32x2_t)0x800000008000), 0x10uLL);
  *(_WORD *)(v58 + 494) = result.i16[2];
  *(_WORD *)(v58 + 492) = result.i16[0];
  return result;
}

void TType1OTFCIDFont::~TType1OTFCIDFont(TType1OTFCIDFont *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E61CC0A8;
  v2 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

{
  uint64_t v2;

  *(_QWORD *)this = off_1E61CC0A8;
  v2 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x1B5E0CD38);
}

uint64_t TType1OTFCIDFont::GetFontDataTableTag(TType1OTFCIDFont *this)
{
  return 1128678944;
}

void TType1OTFCIDFont::GetAltGlyphMetricsParametres(TType1OTFCIDFont *this, unsigned __int16 *a2, int *a3, int *a4, int *a5, int *a6, int *a7, int *a8, int *a9, int *a10, int *a11)
{
  unsigned __int16 *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  const TFontObjectSurrogate *v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  unsigned int v25;
  unsigned int v26;
  unint64_t v27;
  unsigned int v28;
  __int128 v29;
  unsigned int v30;
  unsigned int v31;
  __int128 v32;
  unsigned int v33;
  uint64_t v34;
  unsigned __int16 *v35;
  unsigned int v36;
  _WORD *exception;
  _WORD *v38;
  _WORD *v39;
  _OWORD v43[2];
  __int128 v44;
  unint64_t v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  unint64_t v49;
  _OWORD v50[3];
  unint64_t v51;

  v16 = (unsigned __int16 *)*((_QWORD *)this + 4);
  v17 = v16[180];
  v18 = *a2;
  v19 = (*(uint64_t (**)(unsigned __int16 *))(*(_QWORD *)v16 + 168))(v16);
  if (v19 >= 0xFFFF)
    v20 = 0xFFFF;
  else
    v20 = v19;
  if (v18 >= v20
    && (*(unsigned int (**)(_QWORD, _QWORD))(**((_QWORD **)this + 4) + 560))(*((_QWORD *)this + 4), *a2) >= v17)
  {
    *a2 = 0;
  }
  *a6 = 0;
  *a4 = 0;
  *a11 = 2097152001;
  *a10 = 2097152001;
  *a9 = 2097152001;
  *a8 = 2097152001;
  *a7 = 2097152001;
  *a5 = 2097152001;
  *a3 = 2097152001;
  v21 = (const TFontObjectSurrogate *)(*(uint64_t (**)(TType1OTFCIDFont *))(*(_QWORD *)this + 216))(this);
  v22 = *a2;
  v51 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v23 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v23 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v50[1] = v23;
  v50[2] = v23;
  v50[0] = v23;
  TFontObjectTable::TFontObjectTable((TFontObjectTable *)v50, v21, 1751672161);
  if (LODWORD(v50[0]) <= 0x23)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E61B2D68;
    exception[4] = 5;
  }
  v49 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v24 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v24 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v47 = v24;
  v48 = v24;
  v46 = v24;
  TFontObjectTable::TFontObjectTable((TFontObjectTable *)&v46, v21, 1448038983);
  v25 = bswap32(*(unsigned __int16 *)(*((_QWORD *)&v48 + 1) + 4)) >> 16;
  v26 = bswap32(*(unsigned __int16 *)(*((_QWORD *)&v48 + 1) + 6)) >> 16;
  v27 = *((_QWORD *)&v48 + 1) + 12;
  while (1)
  {
    v26 = (unsigned __int16)v26 + 0xFFFF;
    if ((v26 & 0x10000) == 0 || v27 > *((_QWORD *)&v48 + 1) + (unint64_t)DWORD1(v46))
      break;
    v28 = bswap32(*(unsigned __int16 *)(v27 - 4));
    v27 += 4;
    if ((_DWORD)v22 == HIWORD(v28))
    {
      v25 = bswap32(*(unsigned __int16 *)(v27 - 6)) >> 16;
      break;
    }
  }
  *((_QWORD *)&v46 + 1) = &off_1E6176770;
  TDataReference::DucRefCount((TDataReference *)((char *)&v46 + 8));
  v49 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v29 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v29 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v47 = v29;
  v48 = v29;
  v46 = v29;
  TFontObjectTable::TFontObjectTable((TFontObjectTable *)&v46, v21, 1986553185);
  if (v46 <= 0x23)
  {
    v38 = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)v38 = &off_1E61B2D68;
    v38[4] = 5;
  }
  v30 = *(unsigned __int16 *)(*((_QWORD *)&v48 + 1) + 6);
  v31 = *(unsigned __int16 *)(*((_QWORD *)&v48 + 1) + 34);
  v45 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v32 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v32 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v43[1] = v32;
  v44 = v32;
  v43[0] = v32;
  TFontObjectTable::TFontObjectTable((TFontObjectTable *)v43, v21, 1986884728);
  v33 = __rev16(v31);
  if (v33 > (unsigned __int16)(LODWORD(v43[0]) >> 2))
    LOWORD(v33) = LODWORD(v43[0]) >> 2;
  if (v22 >= (unsigned __int16)v33)
    v34 = (unsigned __int16)v33 - 1;
  else
    v34 = v22;
  if (v34 < 0
    || (v35 = (unsigned __int16 *)(*((_QWORD *)&v44 + 1) + 4 * v34),
        (unint64_t)(v35 + 2) > *((_QWORD *)&v44 + 1) + (unint64_t)LODWORD(v43[0])))
  {
    v39 = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)v39 = &off_1E61B2D68;
    v39[4] = 5;
  }
  v36 = *v35;
  *((_QWORD *)&v43[0] + 1) = &off_1E6176770;
  TDataReference::DucRefCount((TDataReference *)((char *)v43 + 8));
  *((_QWORD *)&v46 + 1) = &off_1E6176770;
  TDataReference::DucRefCount((TDataReference *)((char *)&v46 + 8));
  *a8 = v25 << 16;
  *a7 = -65536 * (bswap32(v30) >> 16);
  *a11 = -65536 * __rev16(v36);
  *((_QWORD *)&v50[0] + 1) = &off_1E6176770;
  TDataReference::DucRefCount((TDataReference *)((char *)v50 + 8));
  *a5 = *a11;
}

void sub_1B09B1DC8(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,__int128 a21)
{
  uint64_t v21;

  TFontObjectTable::~TFontObjectTable((TFontObjectTable *)&a13);
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1B09B1C94);
  }
  TFontObjectTable::~TFontObjectTable((TFontObjectTable *)&a21);
  TFontObjectTable::~TFontObjectTable((TFontObjectTable *)(v21 - 144));
  _Unwind_Resume(a1);
}

void sub_1B09B1F08()
{
  uint64_t v0;

  TFontObjectTable::~TFontObjectTable((TFontObjectTable *)(v0 - 144));
  JUMPOUT(0x1B09B1F88);
}

void sub_1B09B1F80()
{
  JUMPOUT(0x1B09B1F88);
}

uint64_t TType1OTFCIDFont::GetPSStreamType(TType1OTFCIDFont *this, int a2)
{
  if ((a2 & 0x100) != 0)
    return a2 & 0xFFFFF000 | 0x100;
  else
    return TType1CIDFont::GetPSStreamType(this, a2);
}

void TT2T1CIDConvertingBufferedStreamingContext::~TT2T1CIDConvertingBufferedStreamingContext(TT2T1CIDConvertingBufferedStreamingContext *this)
{
  void **v2;

  *(_QWORD *)this = off_1E61B6138;
  v2 = (void **)((char *)this + 696);
  std::vector<CompFDInfo>::__destroy_vector::operator()[abi:fe180100](&v2);
  TBufferedCharStringStreamingContext::~TBufferedCharStringStreamingContext(this);
}

{
  void **v2;

  *(_QWORD *)this = off_1E61B6138;
  v2 = (void **)((char *)this + 696);
  std::vector<CompFDInfo>::__destroy_vector::operator()[abi:fe180100](&v2);
  TBufferedCharStringStreamingContext::~TBufferedCharStringStreamingContext(this);
  MEMORY[0x1B5E0CD38]();
}

void TT2T1CIDConvertingBufferedStreamingContext::StreamCharString(TT2T1CIDConvertingBufferedStreamingContext *this, const TType1SFNTFont *a2, uint64_t a3, const unsigned __int8 *a4, int *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  __int16 v17;
  unsigned int v18;
  __int16 v19;
  __int16 v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  _QWORD v28[498];
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  memset(&v28[1], 170, 0xF88uLL);
  v28[33] = "/.notdef";
  v28[34] = 8;
  memset(&v28[35], 0, 20);
  v28[39] = a2;
  bzero(&v28[40], 0xD7CuLL);
  HIDWORD(v28[43]) = 1;
  LOWORD(v28[44]) = 257;
  v10 = (*(uint64_t (**)(const TType1SFNTFont *))(*(_QWORD *)a2 + 40))(a2);
  LODWORD(v28[277]) = *(unsigned __int16 *)(v10 + 70);
  HIDWORD(v28[471]) = *(_DWORD *)(v10 + 440);
  LODWORD(v28[472]) = *(_DWORD *)(v10 + 120);
  *(_QWORD *)((char *)&v28[44] + 4) = 0;
  *(_QWORD *)((char *)&v28[277] + 4) = 0x32000000000000;
  v11 = (*(uint64_t (**)(const TType1SFNTFont *))(*(_QWORD *)a2 + 216))(a2);
  v12 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 8) + 56))(*(_QWORD *)(v11 + 8));
  v28[490] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12);
  v28[0] = &off_1E61B6190;
  v28[38] = &unk_1E61B61C8;
  v28[491] = 0;
  LOBYTE(v28[497]) = (_DWORD)a3 == 0;
  v29 = 0;
  v26 = -1431655766;
  v27 = -1431655766;
  v13 = (*(uint64_t (**)(const TType1SFNTFont *, uint64_t, unsigned int *, unsigned int *))(*(_QWORD *)a2 + 336))(a2, a3, &v27, &v26);
  WORD1(v28[497]) = v13;
  v14 = (*(uint64_t (**)(const TType1SFNTFont *, uint64_t))(*(_QWORD *)a2 + 312))(a2, v13);
  LODWORD(v28[277]) = *(unsigned __int16 *)(v14 + 70);
  HIDWORD(v28[471]) = *(_DWORD *)(v14 + 440);
  LODWORD(v28[472]) = *(_DWORD *)(v14 + 120);
  v15 = *((_QWORD *)a2 + 4);
  v16 = *(unsigned __int16 *)(*(_QWORD *)(v15 + 400) + 488 * (int)v13 + 4);
  if (v16 >= 0x8408)
    v17 = 0x8000;
  else
    v17 = 1131;
  if (v16 < 0x4D8)
    v17 = 107;
  WORD2(v28[488]) = v17;
  v18 = *(unsigned __int16 *)(v15 + 318);
  if (v18 >= 0x846C)
    v19 = 0x8000;
  else
    v19 = 1131;
  if (v18 >= 0x4D8)
    v20 = v19;
  else
    v20 = 107;
  HIWORD(v28[488]) = v20;
  LOWORD(v28[489]) = v18;
  if ((_DWORD)a3)
  {
    v21 = (*(uint64_t (**)(const TType1SFNTFont *, uint64_t, uint64_t, char *))(*(_QWORD *)a2 + 184))(a2, a3, 127, (char *)&v28[472] + 5);
    BYTE4(v28[472]) = 47;
    v28[33] = (char *)&v28[472] + 4;
    v28[34] = (v21 + 1);
    LOBYTE(v28[497]) = 0;
    LOWORD(v13) = WORD1(v28[497]);
  }
  (*(void (**)(uint64_t *__return_ptr, const TType1SFNTFont *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)a2 + 352))(&v25, a2, (__int16)v13, v27, v26);
  v22 = v25;
  v25 = 0;
  v23 = v29;
  v29 = v22;
  if (v23)
  {
    MEMORY[0x1B5E0CD14](v23, 0x1000C8077774924);
    v24 = v25;
    v25 = 0;
    if (v24)
      MEMORY[0x1B5E0CD14](v24, 0x1000C8077774924);
  }
  v28[41] = v29;
  v28[42] = v29;
  v28[40] = v29 + v26;
  LODWORD(v28[37]) = malloc_good_size(4 * v26);
  v28[35] = AllocateMemory(LODWORD(v28[37]), 0);
  v28[36] = 0;
  LOBYTE(v25) = 0;
  TType2ToType1CharStringConvertionContext::ConvertT2ToT1CharString((uint64_t)v28, 0, (BOOL *)&v25);
  (*(void (**)(TT2T1CIDConvertingBufferedStreamingContext *, _QWORD *, const unsigned __int8 *, int *))(*(_QWORD *)this + 64))(this, v28, a4, a5);
  TType2CIDToType1CharStringConvertionContext::~TType2CIDToType1CharStringConvertionContext((TType2CIDToType1CharStringConvertionContext *)v28);
}

void sub_1B09B2390(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  TType2CIDToType1CharStringConvertionContext::~TType2CIDToType1CharStringConvertionContext((TType2CIDToType1CharStringConvertionContext *)va);
  _Unwind_Resume(a1);
}

uint64_t TT2T1CIDConvertingBufferedStreamingContext::DoCharString(TBufferedCharStringStreamingContext *this, uint64_t a2, char *__src, uint64_t a4)
{
  char *v8;
  uint64_t v9;
  char v10;
  char v11;
  __int16 v12;
  uint64_t result;

  v8 = (char *)this + 136;
  v9 = a2 + 3780;
  v10 = 1;
  do
  {
    v11 = v10;
    *((_QWORD *)this + 67) = a4;
    v12 = *((_WORD *)this + 260);
    if ((*((__int16 *)this + 261) & 0x80000000) == 0)
      std::vector<unsigned char>::__insert_with_size[abi:fe180100]<unsigned char const*,unsigned char const*>((uint64_t)v8, *((char **)this + 18), __src, &__src[*((unsigned __int16 *)this + 261)], *((unsigned __int16 *)this + 261));
    TBufferedCharStringStreamingContext::ProcessCharString((uint64_t)this, *(const unsigned __int8 **)(a2 + 280), *(_DWORD *)(a2 + 288), 0);
    TBufferedCharStringStreamingContext::StreamCharHeader((uint64_t)this, a2, *((_DWORD *)this + 36) - *((_DWORD *)this + 34));
    std::vector<unsigned char>::__insert_with_size[abi:fe180100]<unsigned char const*,unsigned char const*>((uint64_t)v8, *((char **)this + 18), " ND\r", "", 4);
    *((_WORD *)this + 260) = v12;
    result = TBufferedCharStringStreamingContext::BufferCharBuffer((uint64_t)this);
    if (!*(_BYTE *)(a2 + 3976))
      break;
    v10 = 0;
    *(_WORD *)(a2 + 3780) = 26415;
    *(_BYTE *)(a2 + 3782) = 48;
    *(_QWORD *)(a2 + 264) = v9;
    *(_QWORD *)(a2 + 272) = 3;
  }
  while ((v11 & 1) != 0);
  return result;
}

void TType2CIDToType1CharStringConvertionContext::~TType2CIDToType1CharStringConvertionContext(TType2CIDToType1CharStringConvertionContext *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1E61B6190;
  *((_QWORD *)this + 38) = &unk_1E61B61C8;
  v2 = *((_QWORD *)this + 498);
  *((_QWORD *)this + 498) = 0;
  if (v2)
    MEMORY[0x1B5E0CD14](v2, 0x1000C8077774924);
  *(_QWORD *)this = &off_1E61B4240;
  *((_QWORD *)this + 38) = &unk_1E61B4278;
  free(*((void **)this + 35));
}

{
  TType2CIDToType1CharStringConvertionContext::~TType2CIDToType1CharStringConvertionContext(this);
  JUMPOUT(0x1B5E0CD38);
}

void `non-virtual thunk to'TType2CIDToType1CharStringConvertionContext::~TType2CIDToType1CharStringConvertionContext(TType2CIDToType1CharStringConvertionContext *this)
{
  TType2CIDToType1CharStringConvertionContext::~TType2CIDToType1CharStringConvertionContext((TType2CIDToType1CharStringConvertionContext *)((char *)this - 304));
}

{
  TType2CIDToType1CharStringConvertionContext::~TType2CIDToType1CharStringConvertionContext((TType2CIDToType1CharStringConvertionContext *)((char *)this - 304));
  JUMPOUT(0x1B5E0CD38);
}

__n128 TType2CIDToType1CharStringConvertionContext::FlattenSubr(__n128 *this, unsigned int a2, BOOL *a3)
{
  unint64_t v6;
  unsigned __int16 v7;
  unsigned __int16 v8;
  unint64_t v9;
  int v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  BOOL v19;
  unint64_t v21;
  __n128 result;
  _WORD *exception;
  __n128 v24;

  v6 = this[245].n128_u64[1];
  if (!v6)
  {
    v6 = (*(uint64_t (**)(unint64_t, _QWORD, __int8 *, __int8 *, __n128 *, __n128 *, __int8 *, __n128 *))(*(_QWORD *)this[19].n128_u64[1] + 368))(this[19].n128_u64[1], this[248].n128_i16[5], &this[248].n128_i8[12], &this[246].n128_i8[8], this + 247, this + 246, &this[247].n128_i8[8], this + 248);
    this[245].n128_u64[1] = v6;
    if (!v6)
      goto LABEL_17;
  }
  v7 = this[34].n128_u16[6] - 1;
  this[34].n128_u16[6] = v7;
  v8 = this[244].n128_u16[2] + this[22].n128_u16[2 * v7 + 7];
  if (this[248].n128_u16[6] <= v8)
    goto LABEL_17;
  v9 = this[247].n128_u64[0];
  if (v9 < v6)
    goto LABEL_17;
  if (v9 > this[248].n128_u64[0])
    goto LABEL_17;
  v10 = this[246].n128_i16[4];
  v11 = v10 * v8;
  v12 = v6 + v11;
  v13 = v12 + 2 * this[246].n128_i16[4];
  if (v13 > v9 || v11 < 0 || v13 < v12)
    goto LABEL_17;
  v14 = BytesToCard((const unsigned __int8 *)(v6 + v11), this[246].n128_i16[4]);
  v15 = BytesToCard((const unsigned __int8 *)(v12 + v10), v10);
  v16 = this[246].n128_u64[0];
  v17 = v16 + v14 - 1;
  v18 = v17 + v15 - v14;
  v19 = v16 <= v17 && v18 >= v17;
  if (!v19 || v18 > this[247].n128_u64[1])
  {
LABEL_17:
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E61B2D68;
    exception[4] = 5;
  }
  v21 = this[21].n128_u64[0];
  v24 = this[20];
  this[20].n128_u64[1] = v17;
  this[21].n128_u64[0] = v17;
  this[20].n128_u64[0] = v18;
  TType2ToType1CharStringConvertionContext::ConvertT2ToT1CharString((uint64_t)this, a2, a3);
  result = v24;
  this[20] = v24;
  this[21].n128_u64[0] = v21;
  return result;
}

void TOTFCIDCFFFontSet::~TOTFCIDCFFFontSet(TOTFCIDCFFFontSet *this)
{
  TCIDCFFFontSet::~TCIDCFFFontSet(this);
  JUMPOUT(0x1B5E0CD38);
}

uint64_t TOTFCIDCFFFontSet::AddCharString(TOTFCIDCFFFontSet *this, const TType1PSFont *a2, uint64_t a3)
{
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned __int8 *v9;
  _WORD *exception;
  unsigned __int8 *v12;
  unsigned int v13;
  unsigned int v14;

  v6 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 4) + 168))(*((_QWORD *)a2 + 4));
  if (v6 >= 0xFFFF)
    v7 = 0xFFFF;
  else
    v7 = v6;
  if (v7 <= a3)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E61B2D68;
    exception[4] = 8;
  }
  v13 = -1431655766;
  v14 = -1431655766;
  v8 = (*(uint64_t (**)(const TType1PSFont *, uint64_t, unsigned int *, unsigned int *))(*(_QWORD *)a2 + 336))(a2, a3, &v14, &v13);
  v12 = (unsigned __int8 *)0xAAAAAAAAAAAAAAAALL;
  (*(void (**)(unsigned __int8 **__return_ptr, const TType1PSFont *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 352))(&v12, a2, v8, v14, v13);
  TCFFArray::Add((TOTFCIDCFFFontSet *)((char *)this + 240), v13, v12);
  v9 = v12;
  v12 = 0;
  if (v9)
    MEMORY[0x1B5E0CD14](v9, 0x1000C8077774924);
  return (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 4) + 560))(*((_QWORD *)a2 + 4), a3);
}

void sub_1B09B2880(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
    MEMORY[0x1B5E0CD14](a9, 0x1000C8077774924);
  _Unwind_Resume(exception_object);
}

_QWORD *TOTFCIDCFFFontSet::AddGlobalSubrs(TOTFCIDCFFFontSet *this, const TType1PSFont *a2, unsigned int a3, const unsigned __int8 *a4, const unsigned __int8 *a5, uint64_t a6)
{
  uint64_t v12;
  unsigned int v13;
  size_t v14;
  _QWORD *result;

  v12 = operator new();
  v13 = *(unsigned __int16 *)(*((_QWORD *)a2 + 4) + 318);
  *(_QWORD *)v12 = &off_1E61CB6C0;
  *(_WORD *)(v12 + 8) = __rev16(v13);
  *(_BYTE *)(v12 + 10) = a3;
  v14 = a3 + v13 * (unint64_t)a3;
  *(_QWORD *)(v12 + 24) = 0;
  *(_QWORD *)(v12 + 32) = 0;
  *(_QWORD *)(v12 + 16) = 0;
  result = std::vector<unsigned char>::__init_with_size[abi:fe180100]<unsigned char const*,unsigned char const*>((_QWORD *)(v12 + 16), a4, (uint64_t)&a4[v14], v14);
  *(_BYTE *)(v12 + 40) = 1;
  *(_QWORD *)(v12 + 48) = a5;
  *(_QWORD *)(v12 + 56) = a6 - v14;
  *((_QWORD *)this + 27) = v12;
  return result;
}

void sub_1B09B2964(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E0CD38](v1, 0x1091C4015871C78);
  _Unwind_Resume(a1);
}

uint64_t TType1OTFCIDFont::EncodeCIDGlyph(TType1OTFCIDFont *this, uint64_t a2, char *a3)
{
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t result;

  v6 = (const char *)((*(uint64_t (**)(TType1OTFCIDFont *))(*(_QWORD *)this + 320))(this) + 1);
  v7 = (*(uint64_t (**)(TType1OTFCIDFont *))(*(_QWORD *)this + 328))(this);
  v8 = DetermineROS(v6, (const char *)(v7 + 1));
  if ((v8 & 0xFF00000000) != 0)
    v9 = v8;
  else
    v9 = 0xFFFF;
  if (v9 != 0xFFFF)
    LODWORD(a2) = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 4) + 560))(*((_QWORD *)this + 4), a2);
  result = MakeGlyphNameForCIDPerROS(a2, v9, a3 + 1, 0xFFuLL);
  *a3 = result;
  return result;
}

uint64_t TType1OTFCIDFont::GetGlyphID(TType1OTFCIDFont *this, const unsigned __int8 *a2, unsigned int a3)
{
  uint64_t result;
  unsigned __int16 v6;

  result = TType1CIDFont::GetGlyphID(this, a2, a3);
  v6 = result;
  if (*a2 != 97)
  {
    (*(void (**)(_QWORD, unsigned __int16 *, uint64_t, unsigned __int16 *))(**((_QWORD **)this + 4) + 368))(*((_QWORD *)this + 4), &v6, 1, &v6);
    return v6;
  }
  return result;
}

uint64_t TType1OTFCIDFont::StreamPSFont(const void **a1, uint64_t a2, int a3, uint64_t a4, unsigned int *a5, uint64_t a6, const char *a7, uint64_t a8, unsigned int *a9, uint64_t a10)
{
  uint64_t v16;
  __int32 *v17;
  __int128 v18;
  unsigned int v19;
  unsigned __int16 *v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  int8x8_t v29;
  __int128 v30;
  const TFontObjectSurrogate *v31;
  __int128 v32;
  unsigned int v33;
  unsigned int v34;
  __int32 *v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  unint64_t v39;
  const TFontObjectSurrogate *v40;
  uint64_t result;
  _OWORD v42[2];
  __int128 v43;
  unint64_t v44;
  unint64_t v45;
  _BYTE __b[728];
  void (**v47)(TBufferedStreamingContext *__hidden);
  unint64_t v48;
  __int32 *v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  unsigned int v57[4];
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;

  v89 = *MEMORY[0x1E0C80C00];
  v16 = (*((uint64_t (**)(const void **, _QWORD))*a1 + 6))(a1, *a9);
  *a9 = v16;
  v45 = 0xAAAAAAAAAAAAAAAALL;
  (*((void (**)(unint64_t *__return_ptr, const void **, uint64_t, uint64_t))*a1 + 30))(&v45, a1, v16, a8);
  v17 = (__int32 *)v45;
  *(_QWORD *)&v18 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v18 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v88 = v18;
  v87 = v18;
  v86 = v18;
  v85 = v18;
  v84 = v18;
  v83 = v18;
  v82 = v18;
  v81 = v18;
  v80 = v18;
  v79 = v18;
  v78 = v18;
  v77 = v18;
  v76 = v18;
  v75 = v18;
  v74 = v18;
  v73 = v18;
  v72 = v18;
  v71 = v18;
  v70 = v18;
  v69 = v18;
  v68 = v18;
  v67 = v18;
  v66 = v18;
  v65 = v18;
  v64 = v18;
  v62 = v18;
  v63 = v18;
  v60 = v18;
  v61 = v18;
  v58 = v18;
  v59 = v18;
  *(_OWORD *)v57 = v18;
  v19 = (*(uint64_t (**)(const void *))(*(_QWORD *)a1[4] + 168))(a1[4]);
  if (v19 >= 0xFFFF)
    v21 = 0xFFFFLL;
  else
    v21 = v19;
  if (!a5)
  {
    a5 = v57;
    TType1PSFont::SetEncoding(v21, v17, v57, v20);
  }
  if ((*a9 & 0x100) != 0)
  {
    v26 = (*((uint64_t (**)(const void **))*a1 + 15))(a1);
    *(_QWORD *)&v27 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v27 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v56 = v27;
    v55 = v27;
    v54 = v27;
    v53 = v27;
    v52 = v27;
    v51 = v27;
    v50 = v27;
    v47 = &off_1E61B63B8;
    v48 = (unint64_t)a1;
    v49 = v17;
    *(_QWORD *)&v50 = (*((uint64_t (**)(const void **))*a1 + 5))(a1);
    *((_QWORD *)&v50 + 1) = a10;
    v51 = (unint64_t)operator new[]();
    LODWORD(v52) = 0;
    *(_DWORD *)((char *)&v52 + 6) = 0;
    v28 = (*((uint64_t (**)(const void **))*a1 + 14))(a1);
    if (strcmp(a7, (const char *)(v28 + 1)))
      goto LABEL_12;
    if (!v17)
      goto LABEL_21;
    v33 = 0;
    if ((_DWORD)v21)
    {
      v34 = (v21 + 31) >> 5;
      v35 = v17;
      do
      {
        if (*v35)
        {
          v29.i32[0] = *v35;
          v29 = vcnt_s8(v29);
          v29.i16[0] = vaddlv_u8((uint8x8_t)v29);
          v33 += v29.i32[0];
        }
        ++v35;
        --v34;
      }
      while (v34);
    }
    if (v33 < v21)
    {
LABEL_12:
      v44 = 0xAAAAAAAAAAAAAAAALL;
      *(_QWORD *)&v30 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v30 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v42[1] = v30;
      v43 = v30;
      v42[0] = v30;
      v31 = (const TFontObjectSurrogate *)(*((uint64_t (**)(const void **))*a1 + 27))(a1);
      TFontObjectTable::TFontObjectTable((TFontObjectTable *)v42, v31, v26, 0, 4);
      *(_QWORD *)&v32 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v32 + 1) = 0xAAAAAAAAAAAAAAAALL;
      *(_OWORD *)&__b[480] = v32;
      *(_OWORD *)&__b[496] = v32;
      *(_OWORD *)&__b[448] = v32;
      *(_OWORD *)&__b[464] = v32;
      *(_OWORD *)&__b[416] = v32;
      *(_OWORD *)&__b[432] = v32;
      *(_OWORD *)&__b[384] = v32;
      *(_OWORD *)&__b[400] = v32;
      *(_OWORD *)&__b[352] = v32;
      *(_OWORD *)&__b[368] = v32;
      *(_OWORD *)&__b[320] = v32;
      *(_OWORD *)&__b[336] = v32;
      *(_OWORD *)&__b[288] = v32;
      *(_OWORD *)&__b[304] = v32;
      *(_OWORD *)&__b[256] = v32;
      *(_OWORD *)&__b[272] = v32;
      *(_OWORD *)&__b[224] = v32;
      *(_OWORD *)&__b[240] = v32;
      *(_OWORD *)&__b[192] = v32;
      *(_OWORD *)&__b[208] = v32;
      *(_OWORD *)&__b[160] = v32;
      *(_OWORD *)&__b[176] = v32;
      *(_OWORD *)&__b[128] = v32;
      *(_OWORD *)&__b[144] = v32;
      *(_OWORD *)&__b[96] = v32;
      *(_OWORD *)&__b[112] = v32;
      *(_OWORD *)&__b[64] = v32;
      *(_OWORD *)&__b[80] = v32;
      *(_OWORD *)&__b[32] = v32;
      *(_OWORD *)&__b[48] = v32;
      *(_OWORD *)__b = v32;
      *(_OWORD *)&__b[16] = v32;
      TCIDCFFFontSet::TCIDCFFFontSet((TCIDCFFFontSet *)__b, **((_BYTE **)&v43 + 1), *(_BYTE *)(*((_QWORD *)&v43 + 1) + 1), *(_BYTE *)(*((_QWORD *)&v43 + 1) + 3), a7, *((__int16 *)a1[4] + 181));
      *(_QWORD *)__b = &off_1E61B61E8;
      (*((void (**)(const void **, __int32 *, unsigned int *, _BYTE *, uint64_t))*a1 + 33))(a1, v17, a5, __b, 255);
      TCIDCFFFontSet::StreamOut((TCIDCFFFontSet *)__b, (TBufferedStreamingContext *)&v47);
      TCIDCFFFontSet::~TCIDCFFFontSet((TCIDCFFFontSet *)__b);
      *((_QWORD *)&v42[0] + 1) = &off_1E6176770;
      TDataReference::DucRefCount((TDataReference *)((char *)v42 + 8));
    }
    else
    {
LABEL_21:
      v36 = (*((uint64_t (**)(const void **))*a1 + 27))(a1);
      v37 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v36 + 64))(v36, v26);
      if (v37)
      {
        v38 = 0;
        do
        {
          if (v37 - v38 >= 0x4000)
            v39 = 0x4000;
          else
            v39 = v37 - v38;
          v40 = (const TFontObjectSurrogate *)(*((uint64_t (**)(const void **))*a1 + 27))(a1);
          TFontObjectTable::TFontObjectTable((TFontObjectTable *)__b, v40, v26, v38, v39);
          TBufferedStreamingContext::BufferString((uint64_t)&v47, *(const unsigned __int8 **)&__b[40], v39);
          *(_QWORD *)&__b[8] = &off_1E6176770;
          TDataReference::DucRefCount((TDataReference *)&__b[8]);
          v38 = (v39 + v38);
        }
        while (v38 < v37);
      }
    }
    TBufferedStreamingContext::~TBufferedStreamingContext((TBufferedStreamingContext *)&v47);
  }
  else if ((*a9 & 4) != 0)
  {
    memset(__b, 170, sizeof(__b));
    TBufferedCharStringStreamingContext::TBufferedCharStringStreamingContext((uint64_t)__b, (uint64_t)a1, (uint64_t)v17, a10);
    *(_QWORD *)__b = off_1E61B6138;
    v22 = *((__int16 *)TType1CIDFont::GetCIDFont(a1) + 9);
    memset(&__b[696], 0, 24);
    v48 = 0xAAAAAAAAAAAAAA00;
    v47 = (void (**)(TBufferedStreamingContext *__hidden))&__b[696];
    if (v22)
    {
      if ((v22 & 0x80000000) != 0)
        std::vector<char,TInlineBufferAllocator<char,1024ul>>::__throw_length_error[abi:fe180100]();
      v23 = (char *)std::__allocate_at_least[abi:fe180100]<std::allocator<CompFDInfo>>((uint64_t)&__b[712], v22);
      *(_QWORD *)&__b[696] = v23;
      *(_QWORD *)&__b[712] = &v23[16 * v24];
      bzero(v23, 16 * v22);
      *(_QWORD *)&__b[704] = &v23[16 * v22];
      v25 = *(_QWORD *)&__b[696];
    }
    else
    {
      v25 = 0;
    }
    *(_QWORD *)&__b[720] = a2;
    TType1CIDFont::StreamCIDFontDicts((uint64_t)a1, (uint64_t)__b, a3, (uint64_t)a5, a7, (uint64_t)v17, a9, v25);
    *(_QWORD *)__b = off_1E61B6138;
    v47 = (void (**)(TBufferedStreamingContext *__hidden))&__b[696];
    std::vector<CompFDInfo>::__destroy_vector::operator()[abi:fe180100]((void ***)&v47);
    TBufferedCharStringStreamingContext::~TBufferedCharStringStreamingContext((TBufferedCharStringStreamingContext *)__b);
  }
  result = v45;
  v45 = 0;
  if (result)
    return MEMORY[0x1B5E0CD14](result, 0x1000C8052888210);
  return result;
}

void sub_1B09B2FB4()
{
  __break(1u);
}

void sub_1B09B3100()
{
  __cxa_end_catch();
  JUMPOUT(0x1B09B3108);
}

uint64_t TType1OTFCIDFont::GetLocalSubrArrayAndObjectData(TType1OTFCIDFont *this, unsigned __int8 a2, unsigned __int16 *a3, __int16 *a4, const unsigned __int8 **a5, const unsigned __int8 **a6, const unsigned __int8 **a7, const unsigned __int8 **a8)
{
  uint64_t result;
  int v15;
  const unsigned __int8 *v16;
  const unsigned __int8 *v17;
  unint64_t v18;
  __int16 v19;
  __int16 v20;

  v20 = -21846;
  v19 = -21846;
  v18 = 0xAAAAAAAAAAAAAAAALL;
  result = (*(uint64_t (**)(_QWORD, _QWORD, unsigned __int16 *, __int16 *, __int16 *, unint64_t *))(**((_QWORD **)this + 4) + 536))(*((_QWORD *)this + 4), a2, a3, &v19, &v20, &v18);
  v15 = v19;
  *a4 = v19;
  if (a3 && result)
  {
    v16 = (const unsigned __int8 *)(result + v15 + v15 * *a3);
    v17 = (const unsigned __int8 *)(result + v18);
  }
  else
  {
    v16 = 0;
    v17 = 0;
    result = 0;
    *a3 = 0;
  }
  *a6 = v16;
  *a5 = v16;
  *a7 = v17;
  *a8 = v17;
  return result;
}

uint64_t TType1OTFCIDFont::GetGlyphCountForStreaming(TType1OTFCIDFont *this)
{
  uint64_t result;

  LODWORD(result) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 168))(*((_QWORD *)this + 4));
  if (result >= 0xFFFF)
    return 0xFFFFLL;
  else
    return result;
}

void TType1OTFCIDFont::StreamCharData(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v12;
  std::vector<int>::size_type v13;
  uint64_t v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;
  __int16 v18;
  int v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  unsigned __int16 v24;
  std::vector<int>::pointer begin;
  std::vector<int> v26;
  int v27;
  int v28;
  int v29;

  v12 = 0x4FBCDA3AC10C9715 * ((a2 - *(_QWORD *)(*(_QWORD *)(a1 + 32) + 400) - 36) >> 3);
  if (*(_WORD *)(a2 + 80))
    v13 = *(unsigned __int16 *)(a2 + 80);
  else
    v13 = 32;
  memset(&v26, 170, sizeof(v26));
  std::vector<int>::vector(&v26, v13);
  v14 = *(_QWORD *)(a3 + 696);
  if ((__int16)v12 >= (unint64_t)((*(_QWORD *)(a3 + 704) - v14) >> 4))
  {
    __break(1u);
  }
  else
  {
    begin = v26.__begin_;
    v15 = *(_QWORD *)(a3 + 8);
    v16 = *(_WORD *)(v14 + 16 * (__int16)v12);
    TBufferedStreamingContext::BufferString(a3, (const unsigned __int8 *)"2 index /CharStrings ", 0x15uLL);
    IntToPString((unsigned __int16)(v16 + 2), (unsigned __int8 *)(a3 + 66));
    TBufferedStreamingContext::BufferString(a3, (const unsigned __int8 *)(a3 + 67), *(unsigned __int8 *)(a3 + 66));
    TBufferedStreamingContext::BufferString(a3, " dict dup begin\r", 0x10uLL);
    TBufferedStreamingContext::StreamBuffer(a3);
    v17 = 0;
    v29 = 0;
    v18 = 4330;
    do
    {
      v19 = *((unsigned __int8 *)&v29 + v17) ^ ((unsigned __int16)(v18 & 0xFF00) >> 8);
      v18 = 22719 - 12691 * (v18 + (*((_BYTE *)&v29 + v17) ^ ((unsigned __int16)(v18 & 0xFF00) >> 8)));
      *((_BYTE *)&v29 + v17++) = v19;
    }
    while (v17 != 4);
    v20 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a3 + 8) + 32) + 168))(*(_QWORD *)(*(_QWORD *)(a3 + 8) + 32));
    if (v20 >= 0xFFFF)
      v21 = 0xFFFF;
    else
      v21 = v20;
    if (v21)
    {
      v22 = 0;
      v23 = *(_QWORD *)(a3 + 16);
      do
      {
        if (!v22 || ((*(_DWORD *)(v23 + 4 * (v22 >> 5)) << v22) & 0x80000000) != 0)
        {
          v27 = -1431655766;
          v28 = -1431655766;
          v24 = (*(uint64_t (**)(uint64_t, _QWORD, int *, int *))(*(_QWORD *)v15 + 336))(v15, (unsigned __int16)v22, &v28, &v27);
          if (!v22 || v24 == (unsigned __int16)v12)
          {
            *(_WORD *)(a3 + 522) = 4;
            *(_WORD *)(a3 + 520) = v18;
            *(_DWORD *)(a3 + 544) = 0;
            *(_WORD *)(a3 + 529) = 257;
            *(_BYTE *)(a3 + 548) = 0;
            *(_OWORD *)(a3 + 648) = 0u;
            *(_OWORD *)(a3 + 664) = 0u;
            *(_DWORD *)(a3 + 680) = 0;
            (*(void (**)(uint64_t, uint64_t, _QWORD, int *, std::vector<int>::pointer))(*(_QWORD *)a3 + 56))(a3, v15, (unsigned __int16)v22, &v29, begin);
          }
        }
        ++v22;
      }
      while (v21 != v22);
    }
    TBufferedStreamingContext::BufferString(a3, "end\r", 4uLL);
    if (v26.__begin_)
    {
      v26.__end_ = v26.__begin_;
      operator delete(v26.__begin_);
    }
  }
}

void sub_1B09B34E0()
{
  __cxa_end_catch();
  JUMPOUT(0x1B09B34E8);
}

uint64_t TType1OTFCIDFont::CheckSubrs(TType1OTFCIDFont *this, unsigned int *a2)
{
  *a2 = 2;
  return 1;
}

BOOL TType1OTFCIDFont::GetEmbeddedCharMetrics(TType1OTFCIDFont *this, uint64_t a2, const unsigned __int8 *a3, int a4, int *a5, int *a6)
{
  unsigned __int8 v7[16];
  __int128 v8;
  __int128 v9;
  unsigned __int16 v10;
  BOOL v11;
  int v12[4];
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v11 = 0;
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  v16 = 0u;
  v17 = 0u;
  v14 = 0u;
  v15 = 0u;
  *(_OWORD *)v12 = 0u;
  v13 = 0u;
  v10 = 0;
  v8 = 0u;
  v9 = 0u;
  *(_OWORD *)v7 = 0u;
  TType1OTFCIDFont::ParseType2CharString((uint64_t)this, a2, a3, v7, a4, 0, v12, &v10, &v11, a5, a6);
  return v11;
}

uint64_t TType1OTFCIDFont::ParseType2CharString(uint64_t this, uint64_t a2, const unsigned __int8 *a3, unsigned __int8 *a4, int a5, unsigned int a6, int *a7, unsigned __int16 *a8, BOOL *a9, int *a10, int *a11)
{
  const unsigned __int8 *v11;
  TType1OTFCIDFont *v15;
  __int16 v16;
  const unsigned __int8 **v17;
  const unsigned __int8 *v18;
  unsigned int v19;
  _BOOL4 v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  __int16 v24;
  unsigned int v25;
  __int16 v26;
  __int16 v27;
  unint64_t v28;
  unint64_t v29;
  int v30;
  uint64_t v31;
  const unsigned __int8 *v32;
  const unsigned __int8 *v33;
  unsigned int v34;
  uint64_t v35;
  const unsigned __int8 *v36;
  const unsigned __int8 *v37;
  BOOL *v40;
  unsigned int v41;
  __int16 v42;
  __int16 v43;
  unsigned __int16 v44;
  uint64_t v45;
  int v46;
  int v47;
  const unsigned __int8 *v48;
  const unsigned __int8 *v49;
  unsigned int v51;
  const unsigned __int8 *v52;
  BOOL v53;
  int v56;
  _WORD *exception;
  _WORD *v58;
  _WORD *v59;
  const unsigned __int8 *v60;
  int v61;
  const unsigned __int8 *v62;
  const unsigned __int8 *v63;
  const unsigned __int8 *v64;
  const unsigned __int8 *v65;
  const unsigned __int8 *v66;
  unsigned __int16 v67;
  const unsigned __int8 *v69;
  unint64_t v70;
  _QWORD v71[3];
  __int16 v72[5];

  if (a6 > 0xA)
  {
LABEL_78:
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E61B2D68;
    exception[4] = 5;
  }
  v11 = a3;
  v69 = a3;
  if (a5 && !*a9)
  {
    v15 = (TType1OTFCIDFont *)this;
    v16 = 0;
    v17 = (const unsigned __int8 **)&a3[a5];
    v67 = a6 + 1;
    v61 = a2;
    v60 = a4 + 18;
    v63 = a4 + 8;
    v64 = a4 + 16;
    v62 = a4 + 32;
    v65 = a4 + 40;
    v66 = a4 + 24;
    while (1)
    {
      v18 = v11 + 1;
      v19 = *v11;
      if (v19 >= 0x20)
        break;
      if (v19 == 12)
      {
        v21 = v11[1];
        v11 += 2;
        v19 = v21 | 0xC00;
      }
      else
      {
        if (v19 == 28)
        {
          v20 = 0;
          v11 += 3;
LABEL_14:
          ++v16;
          goto LABEL_63;
        }
        ++v11;
      }
      v22 = *a8;
      LODWORD(v23) = v22 + v16;
      if ((int)v23 > 48)
        goto LABEL_78;
      if (v16 >= 1)
      {
        do
        {
          this = TType2ToType1CharStringConvertionContext::ArgPtrToFixed((TType2ToType1CharStringConvertionContext *)&v69, v17, a3);
          a7[v22++] = this;
          v23 = *a8 + (uint64_t)v16;
        }
        while (v22 < v23);
      }
      *a8 = v23;
      switch(v19)
      {
        case 1u:
        case 3u:
        case 0x12u:
        case 0x17u:
          *a11 = 0;
          this = (*(uint64_t (**)(TType1OTFCIDFont *))(*(_QWORD *)v15 + 40))(v15);
          if (((unsigned __int16)v23 & 0xFFFEu) < (unsigned __int16)v23)
            goto LABEL_69;
          goto LABEL_71;
        case 2u:
        case 5u:
        case 6u:
        case 7u:
        case 8u:
        case 9u:
        case 0xCu:
        case 0xDu:
        case 0xFu:
        case 0x10u:
        case 0x11u:
        case 0x13u:
        case 0x14u:
          goto LABEL_61;
        case 4u:
        case 0x16u:
          *a11 = 0;
          this = (*(uint64_t (**)(TType1OTFCIDFont *))(*(_QWORD *)v15 + 40))(v15);
          if ((unsigned __int16)v23 <= 1u)
            goto LABEL_71;
          goto LABEL_69;
        case 0xAu:
          v24 = HIWORD(a7[(unsigned __int16)v23 - 1]);
          v25 = *(unsigned __int16 *)(*(_QWORD *)(*((_QWORD *)v15 + 4) + 400) + 488 * v61 + 4);
          v26 = 0x8000;
          if (v25 < 0x8408)
            v26 = 1131;
          if (v25 >= 0x4D8)
            v27 = v26;
          else
            v27 = 107;
          *a8 = v23 - 1;
          v28 = *(_QWORD *)a4;
          if (!*(_QWORD *)a4)
          {
            v28 = (*(uint64_t (**)(TType1OTFCIDFont *, uint64_t, const unsigned __int8 *, const unsigned __int8 *, const unsigned __int8 *, const unsigned __int8 *, const unsigned __int8 *, const unsigned __int8 *))(*(_QWORD *)v15 + 368))(v15, a2, v60, v64, v66, v63, v62, v65);
            *(_QWORD *)a4 = v28;
          }
          v29 = *(_QWORD *)v66;
          if (*(_QWORD *)v66 < v28
            || v29 > *(_QWORD *)v65
            || (v30 = (unsigned __int16)(v27 + v24),
                v31 = *(__int16 *)v64,
                v32 = (const unsigned __int8 *)(v28 + (unsigned __int16)(v27 + v24) * v31),
                v33 = &v32[2 * (int)v31],
                (unint64_t)v33 > v29)
            || v30 * (uint64_t)(int)v31 < 0
            || v33 < v32)
          {
            v58 = __cxa_allocate_exception(0x10uLL);
            *(_QWORD *)v58 = &off_1E61B2D68;
            v58[4] = 5;
          }
          v34 = BytesToCard(v32, *(__int16 *)v64);
          v35 = BytesToCard(&v32[v31], v31) - v34;
          v36 = (const unsigned __int8 *)(*(_QWORD *)v63 + v34 - 1);
          v37 = &v36[v35];
          if (*(_QWORD *)v63 > (unint64_t)v36 || v37 < v36 || (unint64_t)v37 > *(_QWORD *)v62)
          {
            v59 = __cxa_allocate_exception(0x10uLL);
            *(_QWORD *)v59 = &off_1E61B2D68;
            v59[4] = 5;
          }
          goto LABEL_40;
        case 0xBu:
          return this;
        case 0xEu:
          *a11 = 0;
          this = (*(uint64_t (**)(TType1OTFCIDFont *))(*(_QWORD *)v15 + 40))(v15);
          if (!(_WORD)v23)
            goto LABEL_71;
          goto LABEL_69;
        case 0x15u:
          *a11 = 0;
          this = (*(uint64_t (**)(TType1OTFCIDFont *))(*(_QWORD *)v15 + 40))(v15);
          if ((unsigned __int16)v23 > 2u)
LABEL_69:
            v56 = *a7 + *(_DWORD *)(this + 440);
          else
LABEL_71:
            v56 = *(_DWORD *)(this + 120);
          *a10 = v56;
          *a9 = 1;
          return this;
        default:
          if (v19 == 29)
          {
            v41 = *(unsigned __int16 *)(*((_QWORD *)v15 + 4) + 318);
            if (v41 >= 0x846C)
              v42 = 0x8000;
            else
              v42 = 1131;
            if (v41 >= 0x4D8)
              v43 = v42;
            else
              v43 = 107;
            v44 = v43 + HIWORD(a7[(unsigned __int16)v23 - 1]);
            *a8 = v23 - 1;
            v72[0] = -21846;
            memset(v71, 170, sizeof(v71));
            v70 = 0xAAAAAAAAAAAAAAAALL;
            v45 = (*(uint64_t (**)(TType1OTFCIDFont *, __int16 *, _QWORD *, _QWORD *, _QWORD *, unint64_t *))(*(_QWORD *)v15 + 152))(v15, v72, &v71[1], &v71[2], v71, &v70);
            v46 = v72[0];
            v47 = v44 * v72[0];
            if (v47 < 0)
              goto LABEL_78;
            v48 = (const unsigned __int8 *)(v45 + v47);
            v49 = &v48[2 * v72[0]];
            if (v49 < v48 || (unint64_t)v49 > v71[1])
              goto LABEL_78;
            v51 = BytesToCard(v48, v72[0]);
            v35 = BytesToCard(&v48[v46], v46) - v51;
            v36 = (const unsigned __int8 *)(v71[2] + v51 - 1);
            v52 = &v36[v35];
            v53 = v71[2] <= (unint64_t)v36 && v52 >= v36;
            if (!v53 || (unint64_t)v52 > v71[0])
              goto LABEL_78;
LABEL_40:
            v40 = a9;
            this = TType1OTFCIDFont::ParseType2CharString(v15, a2, v36, a4, v35, v67, a7, a8, a9, a10, a11);
          }
          else
          {
LABEL_61:
            *a8 = 0;
            v40 = a9;
          }
          v16 = 0;
          v69 = v11;
          v20 = *v40;
          break;
      }
LABEL_63:
      if (v11 >= (const unsigned __int8 *)v17 || v20)
        return this;
    }
    v20 = 0;
    if (v19 > 0xF6)
      v18 = v11 + 2;
    if (v19 == 255)
      v11 += 5;
    else
      v11 = v18;
    goto LABEL_14;
  }
  return this;
}

void sub_1B09B3B40(_Unwind_Exception *a1)
{
  void *v1;

  free(v1);
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:fe180100]<std::allocator<CompFDInfo>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60)
    std::__throw_bad_array_new_length[abi:fe180100]();
  return operator new(16 * a2);
}

void std::vector<CompFDInfo>::__destroy_vector::operator()[abi:fe180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<CompFDInfo>::__base_destruct_at_end[abi:fe180100]((uint64_t)v2, (uint64_t)*v2);
    operator delete(**a1);
  }
}

uint64_t std::vector<CompFDInfo>::__base_destruct_at_end[abi:fe180100](uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t i;

  v3 = result;
  for (i = *(_QWORD *)(result + 8); i != a2; i -= 16)
  {
    result = *(_QWORD *)(i - 8);
    *(_QWORD *)(i - 8) = 0;
    if (result)
      result = MEMORY[0x1B5E0CD14](result, 0x1000C80BDFB0063);
  }
  *(_QWORD *)(v3 + 8) = a2;
  return result;
}

std::vector<int> *__cdecl std::vector<int>::vector(std::vector<int> *this, std::vector<int>::size_type __n)
{
  std::vector<int>::pointer end;

  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<int>::__vallocate[abi:fe180100](this, __n);
    end = this->__end_;
    bzero(end, 4 * __n);
    this->__end_ = &end[__n];
  }
  return this;
}

void sub_1B09B3C8C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<int>::__vallocate[abi:fe180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 62)
    std::vector<char,TInlineBufferAllocator<char,1024ul>>::__throw_length_error[abi:fe180100]();
  result = (char *)std::__allocate_at_least[abi:fe180100]<std::allocator<int>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

void *std::__allocate_at_least[abi:fe180100]<std::allocator<int>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62)
    std::__throw_bad_array_new_length[abi:fe180100]();
  return operator new(4 * a2);
}

uint64_t TTResetScalerCache(void)
{
  return 0;
}

int *TTScalerOpen()
{
  unsigned __int8 v0;

  {
    TTScalerInfo(void)::ourInfo = 1953658213;
    unk_1ECDE6B64 = "TrueType";
    unk_1ECDE6B6C = xmmword_1B0A407D0;
    unk_1ECDE6B7C = "eurt";
    dword_1ECDE6B84 = 3;
    qword_1ECDE6B88 = (uint64_t)&TTScalerInfo(void)::ourCapabilities;
    dword_1ECDE6B90 = 2;
    unk_1ECDE6B94 = &TTScalerInfo(void)::ourMetrics;
    dword_1ECDE6B9C = 4;
    qword_1ECDE6BA0 = (uint64_t)"pambpamchtaptpxg";
    unk_1ECDE6BA8 = TTScalerGetProto::theThing;
  }
  return &TTScalerInfo(void)::ourInfo;
}

_QWORD *OutlineToPath(memoryContext *a1, unsigned int *a2, _WORD *a3)
{
  uint64_t v4;
  unsigned __int16 *v5;
  signed int v6;
  int v7;
  signed int v8;
  int v9;
  signed int v10;
  uint64_t v11;
  int *v12;
  int *v13;
  _QWORD *result;
  uint64_t v15;
  int v16;
  _DWORD *v17;
  uint64_t v18;
  int v19;
  int v20;
  int *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  int v27;
  int v28;
  int v29;
  _WORD *exception;

  v4 = *a2;
  if ((int)v4 >= 1)
  {
    v5 = (unsigned __int16 *)*((_QWORD *)a2 + 4);
    v6 = a2[1];
    v7 = -1;
    v8 = 4;
    while (1)
    {
      v10 = *v5++;
      v9 = v10;
      if (v6 <= v10)
        break;
      v8 += 8 * (v9 - v7) + 4 * ((v9 - v7 + 31) >> 5) + 4;
      v7 = v9;
      if (!--v4)
        goto LABEL_7;
    }
LABEL_22:
    exception = __cxa_allocate_exception(2uLL);
    *exception = 5;
    __cxa_throw(exception, MEMORY[0x1E0DE4F10], 0);
  }
  v8 = 4;
LABEL_7:
  v11 = *((_QWORD *)a2 + 5);
  v12 = (int *)*((_QWORD *)a2 + 1);
  v13 = (int *)*((_QWORD *)a2 + 2);
  result = ScalerNewBlock(a1, v8, 5, 0, 0, 0, a3);
  if (result)
  {
    *(_DWORD *)result = *a2;
    if ((int)*a2 >= 1)
    {
      v15 = 0;
      v16 = 0;
      v17 = (_DWORD *)result + 1;
      v18 = *((_QWORD *)a2 + 4);
      while (1)
      {
        v19 = *(unsigned __int16 *)(v18 + 2 * v15);
        v20 = v16 + v19;
        if (v16 + v19 < 0)
          goto LABEL_22;
        *v17 = v20 + 1;
        v21 = v17 + 1;
        do
        {
          v22 = 0;
          v23 = 0;
          v24 = v11;
          while (1)
          {
            v25 = v22;
            v23 = (*(_BYTE *)(v11 + v22) == 0) | (2 * v23);
            if ((_DWORD)v22 == 31)
              break;
            ++v22;
            if ((v20 & ~(v20 >> 31)) + 1 == (_DWORD)v25 + 1)
            {
              *v21++ = v23 << -(char)v22;
              goto LABEL_18;
            }
          }
          *v21++ = v23;
          v11 += v22 + 1;
          v26 = v20 == 31;
          v20 -= 32;
        }
        while (!v26);
LABEL_18:
        v11 = v24 + v25 + 1;
        v27 = v16 + v19 + 1;
        do
        {
          v28 = *v12++;
          *v21 = v28 << 10;
          v29 = *v13++;
          v17 = v21 + 2;
          v21[1] = -1024 * v29;
          --v27;
          v21 += 2;
        }
        while (v27 > 0);
        v16 = ~v19;
        if (++v15 >= (int)*a2)
          return result;
      }
    }
  }
  return result;
}

int32x4_t GetScalerVariationInfo(uint64_t a1, uint64_t a2, int a3, int32x4_t *a4)
{
  uint64_t v4;
  float64x2_t v5;
  int32x4_t v6;
  int64x2_t v7;
  float64x2_t v8;
  float64x2_t v9;
  int32x4_t result;

  v4 = *(_QWORD *)(a1 + 8);
  if (a3 && *(_BYTE *)(v4 + 156))
  {
    a4->i64[0] = 0;
    a4->i64[1] = 0;
  }
  else
  {
    v5 = (float64x2_t)vdupq_n_s64(0x3EF0000000000000uLL);
    v6 = vmovl_s16(*(int16x4_t *)(v4 + 132));
    v7.i64[0] = v6.i32[0];
    v7.i64[1] = v6.i32[1];
    v8 = vcvtq_f64_s64(v7);
    v7.i64[0] = v6.i32[2];
    v7.i64[1] = v6.i32[3];
    v9 = (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)*(__int16 *)(v4 + 130) * 0.0000152587891), 0);
    result = vuzp1q_s32((int32x4_t)vcvtq_n_s64_f64(vdivq_f64(vmulq_f64(v8, v5), v9), 0x10uLL), (int32x4_t)vcvtq_n_s64_f64(vdivq_f64(vmulq_f64(vcvtq_f64_s64(v7), v5), v9), 0x10uLL));
    *a4 = result;
  }
  return result;
}

_QWORD *CreateScalerVariationBlock(uint64_t a1, memoryContext *a2, unsigned int a3, uint64_t *a4)
{
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  BOOL v15;
  signed int v16;
  _BOOL4 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  const void *v22;
  __int128 v23;
  double *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  _WORD *exception;
  __int128 v33;
  void *__src[2];
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v8 = ScalerNewBlock(a2, 64, 2, 0, 0, 0, 0);
  v9 = v8;
  *(_DWORD *)v8 = 1986097769;
  *((_BYTE *)v8 + 56) = 0;
  *(_QWORD *)(a1 + 16) = v8;
  if (a3)
  {
    v10 = *(_QWORD *)(a1 + 8);
    if (*(_BYTE *)(v10 + 155))
    {
      v11 = *(unsigned __int16 *)(v10 + 150);
      *((_DWORD *)v8 + 2) = 64;
      v12 = 2 * *(_DWORD *)(v10 + 72);
      *((_DWORD *)v8 + 6) = v12 + 64;
      v13 = *(_DWORD *)(v10 + 76) * v12;
      v14 = v13 + v12 + 64;
      v15 = __CFADD__(v13, v12 + 64);
      *((_DWORD *)v8 + 10) = v14;
      v16 = v14 + 2 * v11;
      v17 = __CFADD__(v14, 2 * v11);
      if (v12 > 0xFFFFFFBF || v15 || v17)
      {
        exception = __cxa_allocate_exception(2uLL);
        *exception = 5;
        __cxa_throw(exception, MEMORY[0x1E0DE4F10], 0);
      }
      v9 = ScalerNewBlock(a2, v16, 2, v8, 0, 0, 0);
      *(_QWORD *)(a1 + 16) = v9;
      v9[2] = (char *)v9 + *((unsigned int *)v9 + 2);
      v18 = *((unsigned int *)v9 + 6);
      v9[4] = (char *)v9 + v18;
      v19 = *((unsigned int *)v9 + 10);
      v9[6] = (char *)v9 + v19;
      v20 = *(_QWORD *)(a1 + 8);
      if (*(_DWORD *)(v20 + 76))
      {
        __src[0] = (void *)0xAAAAAAAAAAAAAAAALL;
        v21 = v19 - v18;
        ScalerGetFontTable(a2, 1735811442, *(_DWORD *)(v20 + 68), __src, 0, v19 - v18);
        v22 = __src[0];
        memcpy((void *)v9[4], __src[0], v21);
        ScalerReleaseFontTable(a2, v22);
      }
      *(_QWORD *)&v23 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v23 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v38 = v23;
      v39 = v23;
      v36 = v23;
      v37 = v23;
      *(_OWORD *)__src = v23;
      v35 = v23;
      v33 = 0uLL;
      std::vector<CGFontVariation,TInlineBufferAllocator<CGFontVariation,4ul>>::vector(__src, a3, &v33);
      v24 = (double *)__src[0];
      v25 = 8 * a3;
      do
      {
        v26 = *a4++;
        *(_QWORD *)v24 = v26;
        v24[1] = (double)SHIDWORD(v26) * 0.0000152587891;
        v24 += 2;
        v25 -= 8;
      }
      while (v25);
      v27 = (*(uint64_t (**)(_QWORD, _QWORD, void *, _QWORD))(**(_QWORD **)(*(_QWORD *)a2 + 24) + 408))(*(_QWORD *)(*(_QWORD *)a2 + 24), a3, __src[0], v9[2]);
      *((_BYTE *)v9 + 56) = v27;
      if (v27)
      {
        if ((_DWORD)v11)
        {
          if (*(_BYTE *)(*(_QWORD *)(a1 + 8) + 157))
          {
            *(_QWORD *)&v33 = 0;
            ScalerGetFontTable(a2, 1668707360, 0, &v33, 0, 0);
            v28 = (char *)v33;
            if ((_QWORD)v33)
            {
              v29 = 0;
              v30 = v9[6];
              do
              {
                *(_WORD *)(v30 + v29) = bswap32(*(unsigned __int16 *)&v28[v29]) >> 16;
                v29 += 2;
              }
              while (2 * v11 != v29);
              ScalerReleaseFontTable(a2, v28);
              ApplyStyleToCVT(a1);
            }
          }
        }
      }
      *(_QWORD *)&v33 = __src;
      std::vector<CGFontVariation,TInlineBufferAllocator<CGFontVariation,4ul>>::__destroy_vector::operator()[abi:fe180100]((void ***)&v33);
    }
  }
  return v9;
}

void sub_1B09B42E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  a9 = (void **)&a11;
  std::vector<CGFontVariation,TInlineBufferAllocator<CGFontVariation,4ul>>::__destroy_vector::operator()[abi:fe180100](&a9);
  _Unwind_Resume(a1);
}

unsigned int GetVariationScalar(uint64_t a1, int a2)
{
  uint64_t v2;
  double v3;

  if (a2 < 0)
    return 1;
  v2 = *(_QWORD *)(a1 + 8);
  if (*(_DWORD *)(v2 + 76) <= a2)
    return 1;
  v3 = ComputeVectorScalar(*(_DWORD *)(v2 + 72), *(const __int16 **)(*(_QWORD *)(a1 + 16) + 16), (const __int16 *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32) + 2 * *(_DWORD *)(v2 + 72) * a2));
  if (v3 <= *(double *)"")
    return vcvtd_n_s64_f64(v3, 0x10uLL);
  else
    return 0x7FFFFFFF;
}

void std::vector<CGFontVariation,TInlineBufferAllocator<CGFontVariation,4ul>>::__destroy_vector::operator()[abi:fe180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v3;
  BOOL v4;
  BOOL v5;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v1[1] = v2;
    v3 = v1 + 11;
    if (v1 + 3 <= v2)
    {
      v4 = v3 >= v2;
      v5 = v3 == v2;
    }
    else
    {
      v4 = 0;
      v5 = 0;
    }
    if (!v5 && v4)
    {
      if (v1[2] == v1[11])
        *v3 = v2;
    }
    else
    {
      operator delete(v2);
    }
  }
}

_QWORD *std::vector<CGFontVariation,TInlineBufferAllocator<CGFontVariation,4ul>>::vector(_QWORD *a1, unint64_t a2, _OWORD *a3)
{
  _OWORD *v6;
  _OWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  a1[11] = a1 + 3;
  if (a2)
  {
    std::vector<CGFontVariation,TInlineBufferAllocator<CGFontVariation,4ul>>::__vallocate[abi:fe180100](a1, a2);
    v6 = (_OWORD *)a1[1];
    v7 = &v6[a2];
    v8 = 16 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 16;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_1B09B4444(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<CGFontVariation,TInlineBufferAllocator<CGFontVariation,4ul>>::__destroy_vector::operator()[abi:fe180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<CGFontVariation,TInlineBufferAllocator<CGFontVariation,4ul>>::__vallocate[abi:fe180100](_QWORD *a1, unint64_t a2)
{
  char *result;

  if (a2 >> 60)
    std::vector<char,TInlineBufferAllocator<char,1024ul>>::__throw_length_error[abi:fe180100]();
  result = (char *)TInlineBufferAllocator<CGFontVariation,4ul>::allocate((uint64_t)(a1 + 3), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * a2];
  return result;
}

void *TInlineBufferAllocator<CGFontVariation,4ul>::allocate(uint64_t a1, unint64_t a2)
{
  unint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v4 = *(_QWORD *)(a1 + 64);
  v2 = (unint64_t *)(a1 + 64);
  v3 = v4;
  v5 = v4 + 16 * a2;
  if (v5 <= (unint64_t)v2)
  {
    *v2 = v5;
    return (void *)v3;
  }
  else
  {
    if (a2 >> 60)
      std::__throw_bad_array_new_length[abi:fe180100]();
    return operator new(16 * a2);
  }
}

uint64_t TType1SFNTFont::GetSubrCount(TType1SFNTFont *this)
{
  return *(unsigned __int16 *)(*((_QWORD *)this + 4) + 144);
}

uint64_t TType1SFNTFont::GetSubrData(TType1SFNTFont *this, const unsigned __int8 **a2, __int16 *a3, const unsigned __int8 **a4)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  const unsigned __int8 *v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t result;

  v4 = *((_QWORD *)this + 4);
  v5 = *(unsigned __int16 *)(v4 + 146);
  *a3 = v5;
  v8 = v4 + 112;
  v7 = *(const unsigned __int8 **)(v4 + 112);
  v6 = *(_QWORD *)(v8 + 8);
  *a2 = v7;
  if (v7)
    v9 = v5 == 0;
  else
    v9 = 1;
  if (v9)
  {
    result = 0;
    *a4 = 0;
  }
  else
  {
    *a4 = &v7[v6];
    v10 = (uint64_t)*a2;
    return v10 + *a3 + *a3 * (uint64_t)(*(int (**)(TType1SFNTFont *))(*(_QWORD *)this + 144))(this);
  }
  return result;
}

uint64_t TType1SFNTFont::GetGlobalSubrCount(TType1SFNTFont *this)
{
  return 0;
}

uint64_t TType1SFNTFont::GetGlobalSubrArrayAndObjectData(TType1SFNTFont *this, __int16 *a2, const unsigned __int8 **a3, const unsigned __int8 **a4, const unsigned __int8 **a5, const unsigned __int8 **a6)
{
  *a2 = 0;
  *a3 = 0;
  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  return 0;
}

void TType1SFNTFont::GetCharOutline(TType1SFNTFont *this@<X0>, unsigned __int16 *a2@<X2>, unsigned int a3@<W1>, unsigned __int8 **a4@<X8>)
{
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  __int128 v13;
  const TFontObjectSurrogate *v14;
  uint64_t v15;
  unsigned __int8 *v16;
  _WORD *exception;
  _OWORD v18[2];
  unsigned __int8 *v19[2];
  unint64_t v20;

  v8 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 168))(*((_QWORD *)this + 4));
  if (v8 >= 0xFFFF)
    v9 = 0xFFFF;
  else
    v9 = v8;
  if (v9 <= a3)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E61B2D68;
    exception[4] = 8;
  }
  v10 = *(_QWORD *)(*((_QWORD *)this + 4) + 104);
  v11 = *(_DWORD *)(v10 + 8 * a3 + 4);
  if (v11)
  {
    v12 = 8 * a3;
    v20 = 0xAAAAAAAAAAAAAAAALL;
    *(_QWORD *)&v13 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v13 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v18[1] = v13;
    *(_OWORD *)v19 = v13;
    v18[0] = v13;
    v14 = (const TFontObjectSurrogate *)(*(uint64_t (**)(TType1SFNTFont *))(*(_QWORD *)this + 216))(this);
    v15 = (*(uint64_t (**)(TType1SFNTFont *))(*(_QWORD *)this + 120))(this);
    TFontObjectTable::TFontObjectTable((TFontObjectTable *)v18, v14, v15, *(unsigned int *)(v10 + v12), v11);
    *a4 = (unsigned __int8 *)0xAAAAAAAAAAAAAAAALL;
    v16 = (unsigned __int8 *)operator new[]();
    *a4 = v16;
    LenIVDecrypt(v16, v19[1], v11, *((__int16 *)this + 8));
    *a2 = v11;
    *((_QWORD *)&v18[0] + 1) = &off_1E6176770;
    TDataReference::DucRefCount((TDataReference *)((char *)v18 + 8));
  }
  else
  {
    *a4 = 0;
  }
}

void sub_1B09B46E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  uint64_t v10;

  *v9 = 0;
  MEMORY[0x1B5E0CD14](v10, 0x1000C8077774924);
  TFontObjectTable::~TFontObjectTable((TFontObjectTable *)&a9);
  _Unwind_Resume(a1);
}

uint64_t cacheCallContext::cacheCallContext(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  _WORD *exception;

  *(_DWORD *)result = 0;
  v4 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = &off_1E617B598;
  *(_QWORD *)(result + 24) = v4;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = a3;
  *(_DWORD *)(result + 48) = a4;
  *(_WORD *)(result + 60) = 0;
  *(_QWORD *)(result + 52) = 0;
  if (!v4)
  {
    exception = __cxa_allocate_exception(2uLL);
    *exception = 5;
    __cxa_throw(exception, MEMORY[0x1E0DE4F10], 0);
  }
  return result;
}

void cacheCallContext::cacheCallContext(cacheCallContext *this, const TFont *a2, void *a3, int a4)
{
  _WORD *exception;

  *(_DWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = &off_1E617B598;
  *((_QWORD *)this + 3) = a2;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = a3;
  *((_DWORD *)this + 12) = a4;
  *(_QWORD *)((char *)this + 52) = 0;
  *((_WORD *)this + 30) = 0;
  if (!a2)
  {
    exception = __cxa_allocate_exception(2uLL);
    *exception = 5;
    __cxa_throw(exception, MEMORY[0x1E0DE4F10], 0);
  }
}

_QWORD *CreateScalerFontBlock(_QWORD *a1, memoryContext *a2)
{
  unint64_t v4;
  unsigned int v5;
  _QWORD *v6;
  _QWORD *v7;
  int8x16_t v8;
  unsigned int v9;
  int TableIndex;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  _BOOL4 v27;
  _BOOL4 v28;
  BOOL v29;
  int v30;
  int v31;
  unsigned int FontTable;
  unsigned __int16 *v33;
  unsigned int v34;
  unsigned int v35;
  void *v36;
  void *v37;
  unsigned int *v38;
  int v39;
  unsigned int v40;
  int v41;
  void *v42;
  unsigned int v43;
  unsigned __int16 *v44;
  __int16 v45;
  int v46;
  int v47;
  int v48;
  int v49;
  _WORD *exception;
  void *v52;
  void *v53;
  unint64_t v54;

  v54 = 0xAAAAAAAAAAAAAAAALL;
  if (ScalerGetFontTable(a2, 1835104368, 0, &v54, 0, 32) <= 0x1F)
    goto LABEL_54;
  v4 = v54;
  v5 = ((bswap32(*(unsigned __int16 *)(v54 + 20)) >> 13) & 0x7FFF8) + 228;
  v6 = ScalerNewBlock(a2, v5 + 8 * (bswap32(*(unsigned __int16 *)(v54 + 22)) >> 16) + 32, 1, 0, 0, 1, 0);
  v7 = v6;
  *(_DWORD *)v6 = 1718578804;
  *((_DWORD *)v6 + 9) = bswap32(*(_DWORD *)v4);
  v8 = vrev16q_s8(*(int8x16_t *)(v4 + 4));
  *(int8x16_t *)(v6 + 5) = v8;
  v6[7] = vrev16_s8(*(int8x8_t *)(v4 + 20));
  *((_WORD *)v6 + 32) = bswap32(*(unsigned __int16 *)(v4 + 28)) >> 16;
  v9 = bswap32(*(unsigned __int16 *)(v4 + 30)) >> 16;
  *((_WORD *)v6 + 33) = v9;
  if (v8.u16[5] >= 3u)
    *((_WORD *)v6 + 25) = 2;
  if (v9 >= 0x11)
    *((_WORD *)v6 + 33) = 16;
  *((_DWORD *)v6 + 1) = 180;
  *((_DWORD *)v6 + 2) = v5;
  LODWORD(v53) = 0;
  TableIndex = TFontSurrogate::GetTableIndex((TFontSurrogate *)(*(_QWORD *)a2 + 16), 1819239265, (unsigned int *)&v53);
  v11 = (int)v53;
  *((_DWORD *)v7 + 24) = TableIndex;
  *((_DWORD *)v7 + 25) = v11;
  LODWORD(v53) = 0;
  v12 = TFontSurrogate::GetTableIndex((TFontSurrogate *)(*(_QWORD *)a2 + 16), 1735162214, (unsigned int *)&v53);
  v13 = (int)v53;
  *((_DWORD *)v7 + 26) = v12;
  *((_DWORD *)v7 + 27) = v13;
  a1[1] = v7;
  a1[6] = (char *)v7 + *((unsigned int *)v7 + 1);
  a1[7] = (char *)v7 + *((unsigned int *)v7 + 2);
  *((_DWORD *)v7 + 3) = 4 * *((unsigned __int16 *)v7 + 27);
  LODWORD(v53) = 0;
  TFontSurrogate::GetTableIndex((TFontSurrogate *)(*(_QWORD *)a2 + 16), 1668707360, (unsigned int *)&v53);
  *((_WORD *)v7 + 75) = v53 >> 1;
  v14 = *((unsigned __int16 *)v7 + 26);
  v15 = 12 * v14;
  v14 *= 5;
  v16 = v15 + 2 * v14;
  v17 = v16 + 4;
  v18 = (v16 + 7) & 0x3FFFFC;
  v19 = ((2 * v14) & 2) != 0 ? v18 : v17;
  *((_DWORD *)v7 + 4) = v19;
  v20 = *((unsigned __int16 *)v7 + 22) <= *((unsigned __int16 *)v7 + 24)
      ? *((unsigned __int16 *)v7 + 24)
      : *((unsigned __int16 *)v7 + 22);
  v21 = *((unsigned __int16 *)v7 + 21) <= *((unsigned __int16 *)v7 + 23)
      ? *((unsigned __int16 *)v7 + 23)
      : *((unsigned __int16 *)v7 + 21);
  *((_DWORD *)v7 + 7) = v20 + 8;
  *((_DWORD *)v7 + 8) = v21 + 8;
  if (v20 > 0xFFF7 || v21 >= 0xFFF8)
    goto LABEL_54;
  v22 = (unsigned __int16)(v21 + 8);
  *((_DWORD *)v7 + 5) = 12 * v22 + 8 * *((unsigned __int16 *)v7 + 32) + 10;
  *((_DWORD *)v7 + 6) = 4 * (unsigned __int16)(v20 + 8) + 10 * v22;
  ScalerReleaseFontTable(a2, (const void *)v4);
  *((_BYTE *)v7 + 154) = 0;
  LODWORD(v53) = 0;
  v23 = TFontSurrogate::GetTableIndex((TFontSurrogate *)(*(_QWORD *)a2 + 16), 1651273571, (unsigned int *)&v53);
  v24 = (int)v53;
  LODWORD(v53) = 0;
  v25 = TFontSurrogate::GetTableIndex((TFontSurrogate *)(*(_QWORD *)a2 + 16), 1161972803, (unsigned int *)&v53);
  v26 = (int)v53;
  v27 = (_DWORD)v53 != 0;
  v28 = v24 == 0;
  v29 = !v28 || !v27;
  if (v28 && v27)
    v30 = v25;
  else
    v30 = v23;
  if (v29)
    v26 = v24;
  if (v24 != 0 && v27)
  {
    v31 = 0;
  }
  else
  {
    v23 = v30;
    v31 = v26;
  }
  *((_BYTE *)v7 + 153) = v31 != 0;
  v53 = 0;
  FontTable = ScalerGetFontTable(a2, 1751474532, 0, &v53, 1, 54);
  if (!FontTable)
    FontTable = ScalerGetFontTable(a2, 1651008868, 0, &v53, 1, 54);
  v33 = (unsigned __int16 *)v53;
  if (v53 && FontTable >= 0x36)
  {
    v34 = bswap32(*((unsigned __int16 *)v53 + 9));
    if ((unsigned __int16)(HIWORD(v34) - 16385) <= 0xC03Eu)
      goto LABEL_54;
    v35 = HIWORD(v34);
    *((_WORD *)v7 + 65) = v35;
    *((_WORD *)v7 + 66) = bswap32(v33[18]) >> 16;
    *((_WORD *)v7 + 67) = bswap32(v33[19]) >> 16;
    *((_WORD *)v7 + 68) = bswap32(v33[20]) >> 16;
    *((_WORD *)v7 + 69) = bswap32(v33[21]) >> 16;
    *((_WORD *)v7 + 71) = vcvtd_n_s64_f64((double)v35 * 0.0000152587891 * 0.0500030518, 0x10uLL);
    *((_WORD *)v7 + 70) = bswap32(v33[23]) >> 16;
    *((_WORD *)v7 + 64) = bswap32(v33[8]) >> 16;
    *((_WORD *)v7 + 72) = bswap32(v33[25]) >> 16;
    *((_BYTE *)v7 + 152) = *((_DWORD *)v7 + 27) != 0;
    ScalerReleaseFontTable(a2, v33);
  }
  else
  {
    if (!*((_DWORD *)v7 + 42))
      goto LABEL_54;
    *((_DWORD *)v7 + 32) = 302383104;
    *((_WORD *)v7 + 72) = 0;
    *((_BYTE *)v7 + 152) = 0;
    *(_QWORD *)((char *)v7 + 132) = 0;
    *((_DWORD *)v7 + 35) = 15073280;
  }
  v53 = (void *)0xAAAAAAAAAAAAAAAALL;
  *(_DWORD *)((char *)v7 + 146) = 0;
  LODWORD(v52) = 0;
  *((_DWORD *)v7 + 28) = TFontSurrogate::GetTableIndex((TFontSurrogate *)(*(_QWORD *)a2 + 16), 1752003704, (unsigned int *)&v52);
  ScalerGetFontTable(a2, 1751672161, 0, &v53, 1, 36);
  v36 = v53;
  if (v53)
  {
    *((_WORD *)v7 + 73) = bswap32(*((unsigned __int16 *)v53 + 17)) >> 16;
    ScalerReleaseFontTable(a2, v36);
  }
  LODWORD(v52) = 0;
  *((_DWORD *)v7 + 29) = TFontSurrogate::GetTableIndex((TFontSurrogate *)(*(_QWORD *)a2 + 16), 1986884728, (unsigned int *)&v52);
  if ((_DWORD)v52)
  {
    ScalerGetFontTable(a2, 1986553185, 0, &v53, 1, 36);
    v37 = v53;
    if (v53)
    {
      *((_WORD *)v7 + 74) = bswap32(*((unsigned __int16 *)v53 + 17)) >> 16;
      ScalerReleaseFontTable(a2, v37);
    }
  }
  v53 = 0;
  ScalerGetFontTable(a2, 1718449272, 0, &v53, 1, 16);
  v38 = (unsigned int *)v53;
  *((_BYTE *)v7 + 159) = v53 != 0;
  if (v38)
  {
    v39 = bswap32(*v38);
    if (v39 < 0x20000)
    {
      *((_BYTE *)v7 + 159) = 0;
LABEL_43:
      ScalerReleaseFontTable(a2, v38);
      goto LABEL_44;
    }
    *((_DWORD *)v7 + 20) = v39;
    v40 = bswap32(v38[1]);
    *((_DWORD *)v7 + 21) = v40;
    v7[11] = *((_QWORD *)v38 + 1);
    if (v40 < *((unsigned __int16 *)v7 + 20))
      goto LABEL_43;
LABEL_54:
    exception = __cxa_allocate_exception(2uLL);
    *exception = 5;
    __cxa_throw(exception, MEMORY[0x1E0DE4F10], 0);
  }
LABEL_44:
  LODWORD(v53) = 0;
  TFontSurrogate::GetTableIndex((TFontSurrogate *)(*(_QWORD *)a2 + 16), 1718642541, (unsigned int *)&v53);
  *((_DWORD *)v7 + 30) = (_DWORD)v53;
  LODWORD(v53) = 0;
  TFontSurrogate::GetTableIndex((TFontSurrogate *)(*(_QWORD *)a2 + 16), 1886545264, (unsigned int *)&v53);
  *((_DWORD *)v7 + 31) = (_DWORD)v53;
  LODWORD(v53) = 0;
  TFontSurrogate::GetTableIndex((TFontSurrogate *)(*(_QWORD *)a2 + 16), 1719034226, (unsigned int *)&v53);
  v41 = (int)v53;
  *((_BYTE *)v7 + 155) = (_DWORD)v53 != 0;
  if (v41)
  {
    v53 = (void *)0xAAAAAAAAAAAAAAAALL;
    ScalerGetFontTable(a2, 1719034226, 0, &v53, 0, 16);
    v42 = v53;
    *((_DWORD *)v7 + 18) = bswap32(*((unsigned __int16 *)v53 + 4)) >> 16;
    ScalerReleaseFontTable(a2, v42);
    LODWORD(v52) = 0;
    v43 = TFontSurrogate::GetTableIndex((TFontSurrogate *)(*(_QWORD *)a2 + 16), 1735811442, (unsigned int *)&v52);
    *((_BYTE *)v7 + 156) = v43 != 0;
    if (v43)
    {
      v52 = (void *)0xAAAAAAAAAAAAAAAALL;
      ScalerGetTableParts(a2, v43, 0, 0x14u, &v52, 0);
      v44 = (unsigned __int16 *)v52;
      *((_DWORD *)v7 + 17) = bswap32(*((_DWORD *)v52 + 2));
      *((_DWORD *)v7 + 19) = bswap32(v44[3]) >> 16;
      ScalerReleaseFontTable(a2, v44);
    }
    v45 = *((_WORD *)v7 + 75);
    if (v45)
    {
      LODWORD(v52) = 0;
      TFontSurrogate::GetTableIndex((TFontSurrogate *)(*(_QWORD *)a2 + 16), 1668702578, (unsigned int *)&v52);
      LOBYTE(v45) = (_DWORD)v52 != 0;
    }
    *((_BYTE *)v7 + 157) = v45;
    LODWORD(v52) = 0;
    TFontSurrogate::GetTableIndex((TFontSurrogate *)(*(_QWORD *)a2 + 16), 1635148146, (unsigned int *)&v52);
    *((_BYTE *)v7 + 158) = (_BYTE)v52;
  }
  if (*((_BYTE *)v7 + 153) == 1)
  {
    *((_DWORD *)v7 + 41) = v23;
    *((_DWORD *)v7 + 42) = v31;
    LODWORD(v53) = 0;
    v46 = TFontSurrogate::GetTableIndex((TFontSurrogate *)(*(_QWORD *)a2 + 16), 1650745716, (unsigned int *)&v53);
    v47 = (int)v53;
    *((_DWORD *)v7 + 43) = v46;
    *((_DWORD *)v7 + 44) = v47;
    if (!v47)
    {
      LODWORD(v53) = 0;
      v48 = TFontSurrogate::GetTableIndex((TFontSurrogate *)(*(_QWORD *)a2 + 16), 1161970772, (unsigned int *)&v53);
      v49 = (int)v53;
      *((_DWORD *)v7 + 43) = v48;
      *((_DWORD *)v7 + 44) = v49;
    }
  }
  return v7;
}

void GetFontMetrics(uint64_t a1, memoryContext *a2, int a3, char *a4)
{
  uint64_t v4;
  uint64_t v7;
  float64x2_t v8;
  int32x4_t v9;
  int64x2_t v10;
  float64x2_t v11;
  float64x2_t v12;
  int *v13;
  int v14;
  uint64_t v15;
  unsigned __int16 *v16;
  double v17;
  double v18;
  int v19;
  double v20;
  double v21;
  __int32 v22;
  int v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  unsigned int v40;
  int v41;
  int v42;
  int v43;
  unsigned int v44;
  int v45;
  unsigned int *v46;
  double v47;
  int v48;
  __int32 v49;
  int v50;
  int v51;
  int v52;
  unsigned int FontTable;
  char *v54;
  unsigned int v55;
  char *v56;
  unsigned int v57;
  unsigned int v59;
  int v60;
  int v61;
  unsigned int *v62;
  unsigned int v63;
  uint64_t v64;
  unsigned int v65;
  unsigned int TableParts;
  void *v67;
  char *v68;
  unsigned int v69;
  uint64_t v70;
  char *v71;
  unint64_t v73;
  int v74;
  _WORD *v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int v80;
  _BOOL4 v81;
  int v82;
  int v83;
  _WORD *exception;
  _WORD *v85;
  _WORD *v86;
  uint64_t v89;
  unsigned __int16 *v90;
  void *v91;
  void *v92[2];
  __int128 v93;
  _BYTE v94[28];
  int32x4_t v95;
  uint64_t v96;
  __int16 v97;
  uint64_t v98;

  v98 = *MEMORY[0x1E0C80C00];
  v89 = 0;
  v90 = 0;
  v4 = *(_QWORD *)(a1 + 8);
  if (!*(_WORD *)(v4 + 130))
  {
    exception = __cxa_allocate_exception(2uLL);
    *exception = 5;
    __cxa_throw(exception, MEMORY[0x1E0DE4F10], 0);
  }
  v7 = *(_QWORD *)(a1 + 24);
  bzero(a4, 0x4CuLL);
  v8 = (float64x2_t)vdupq_n_s64(0x3EF0000000000000uLL);
  v9 = vmovl_s16(*(int16x4_t *)(v4 + 132));
  v10.i64[0] = v9.i32[0];
  v10.i64[1] = v9.i32[1];
  v11 = vcvtq_f64_s64(v10);
  v10.i64[0] = v9.i32[2];
  v10.i64[1] = v9.i32[3];
  v12 = (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)*(__int16 *)(v4 + 130) * 0.0000152587891), 0);
  v95 = vuzp1q_s32((int32x4_t)vcvtq_n_s64_f64(vdivq_f64(vmulq_f64(v11, v8), v12), 0x10uLL), (int32x4_t)vcvtq_n_s64_f64(vdivq_f64(vmulq_f64(vcvtq_f64_s64(v10), v8), v12), 0x10uLL));
  v13 = (int *)(v7 + 96);
  v14 = M3x3Flags((_DWORD *)(v7 + 96));
  M3x3Mul((int *)(v7 + 96), v14, (int32x2_t *)&v95, (const int *)2);
  *(int32x4_t *)(a4 + 56) = v95;
  if (a3)
    v15 = 1986553185;
  else
    v15 = 1751672161;
  ScalerGetFontTable(a2, v15, 0, &v90, 1, 36);
  v16 = v90;
  if (v90)
  {
    v17 = (double)((int)bswap32(v90[2]) >> 16);
    v18 = (double)*(__int16 *)(v4 + 130) * 0.0000152587891;
    v95.i32[0] = 0;
    *(uint64_t *)((char *)v95.i64 + 4) = vcvtd_n_s64_f64(v17 * 0.0000152587891 / v18, 0x10uLL);
    v95.i32[3] = vcvtd_n_s64_f64((double)((int)bswap32(v90[3]) >> 16) * 0.0000152587891 / v18, 0x10uLL);
    M3x3Mul((int *)(v7 + 96), v14, (int32x2_t *)&v95, (const int *)2);
    v19 = *(_DWORD *)((unint64_t)&v95 | 0xC);
    *(_DWORD *)a4 = v95.i32[1];
    *((_DWORD *)a4 + 1) = v19;
    v95.i32[0] = 0;
    v20 = (double)*(__int16 *)(v4 + 130) * 0.0000152587891;
    v95.i32[1] = vcvtd_n_s64_f64((double)((int)bswap32(v16[4]) >> 16) * 0.0000152587891 / v20, 0x10uLL);
    v95.i32[2] = vcvtd_n_s64_f64((double)(bswap32(v16[5]) >> 16) * 0.0000152587891 / v20, 0x10uLL);
    *(_DWORD *)((unint64_t)&v95 | 0xC) = 0;
    M3x3Mul(v13, v14, (int32x2_t *)&v95, (const int *)2);
    *((_DWORD *)a4 + 2) = v95.i32[1];
    *((_DWORD *)a4 + 4) = v95.i32[2];
    v21 = (double)*(__int16 *)(v4 + 130) * 0.0000152587891;
    v95.i64[0] = vcvtd_n_s64_f64((double)((int)bswap32(v16[6]) >> 16) * 0.0000152587891 / v21, 0x10uLL);
    v95.i32[2] = vcvtd_n_s64_f64((double)((int)bswap32(v16[7]) >> 16) * 0.0000152587891 / v21, 0x10uLL);
    *(_DWORD *)((unint64_t)&v95 | 0xC) = 0;
    M3x3Mul(v13, v14, (int32x2_t *)&v95, (const int *)2);
    v22 = v95.i32[2];
    *((_DWORD *)a4 + 5) = v95.i32[0];
    *((_DWORD *)a4 + 6) = v22;
    ScalerReleaseFontTable(a2, v16);
    if (a3)
    {
      v23 = *((_DWORD *)a4 + 15) - *((_DWORD *)a4 + 17);
      v24 = *((_DWORD *)a4 + 16) - *((_DWORD *)a4 + 14);
      v25 = v24 + 65537;
      v26 = v24 + 0x10000;
      if (v26 < 0)
        v26 = v25;
      *((_QWORD *)a4 + 8) = (v26 >> 1);
      *((_DWORD *)a4 + 14) = -(v26 >> 1);
      *((_DWORD *)a4 + 15) = v23;
      goto LABEL_27;
    }
  }
  else
  {
    v27 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v27 + 490))
    {
      *(_QWORD *)&v28 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v28 + 1) = 0xAAAAAAAAAAAAAAAALL;
      *(_OWORD *)&v94[12] = v28;
      v93 = v28;
      *(_OWORD *)v94 = v28;
      *(_OWORD *)v92 = v28;
      v29 = *(_QWORD *)(v27 + 80);
      if (v27 + 96 != v29)
      {
        v30 = *(_OWORD *)(v27 + 96);
        v31 = *(_OWORD *)(v27 + 112);
        *(_DWORD *)(v29 + 32) = *(_DWORD *)(v27 + 128);
        *(_OWORD *)v29 = v30;
        *(_OWORD *)(v29 + 16) = v31;
        v27 = *(_QWORD *)(a1 + 24);
      }
      if (sbit_FontMatch(a2, a1, (uint64_t)v92, *(unsigned __int8 *)(v27 + 484), 1))
        *(_WORD *)(*(_QWORD *)(a1 + 24) + 489) = 514;
      v32 = HIDWORD(v92[0]);
      v33 = HIDWORD(v92[1]);
      *(_DWORD *)a4 = HIDWORD(v92[0]);
      *((_DWORD *)a4 + 1) = v33;
      v34 = *(_DWORD *)v94;
      *((_DWORD *)a4 + 2) = *(_DWORD *)&v94[12];
      *((_DWORD *)a4 + 4) = v34;
      if (*((_DWORD *)a4 + 14) == *((_DWORD *)a4 + 16) || *((_DWORD *)a4 + 15) == *((_DWORD *)a4 + 17))
      {
        *((_DWORD *)a4 + 14) = 0;
        *((_DWORD *)a4 + 15) = v33;
        *((_DWORD *)a4 + 16) = v34;
        *((_DWORD *)a4 + 17) = v32 - v33;
      }
      if (a3)
        goto LABEL_27;
    }
    else
    {
      if (a3)
      {
        v35 = *((_DWORD *)a4 + 17);
        v36 = *((_DWORD *)a4 + 15);
        v37 = *((_DWORD *)a4 + 16) - *((_DWORD *)a4 + 14);
        v38 = v37 + 65537;
        v39 = v37 + 0x10000;
        if (v39 < 0)
          v39 = v38;
        v40 = v39 >> 1;
        v41 = -(v39 >> 1);
        *(_DWORD *)a4 = v40;
        *((_DWORD *)a4 + 1) = v41;
        *((_DWORD *)a4 + 2) = 0;
        v42 = v36 - v35;
        *((_QWORD *)a4 + 8) = v40;
        *((_DWORD *)a4 + 14) = v41;
        *((_DWORD *)a4 + 15) = v42;
        *((_DWORD *)a4 + 5) = 0;
        *((_DWORD *)a4 + 6) = 0;
        *((_DWORD *)a4 + 4) = -v42;
        goto LABEL_27;
      }
      v43 = *((_DWORD *)a4 + 16);
      v45 = *((_DWORD *)a4 + 14);
      v44 = *((_DWORD *)a4 + 15);
      *(_DWORD *)a4 = *((_DWORD *)a4 + 17);
      *(_QWORD *)(a4 + 4) = v44;
      *((_DWORD *)a4 + 5) = 0;
      *((_DWORD *)a4 + 6) = 0;
      *((_DWORD *)a4 + 4) = v43 - v45;
    }
  }
  ScalerGetFontTable(a2, 1886352244, 0, &v89, 1, 12);
  v46 = (unsigned int *)v89;
  if (v89)
  {
    v47 = (double)*(__int16 *)(v4 + 130) * 0.0000152587891;
    *(uint64_t *)((char *)v95.i64 + 4) = vcvtd_n_s64_f64((double)((int)bswap32(*(unsigned __int16 *)(v89 + 8)) >> 16)* 0.0000152587891/ v47, 0x10uLL);
    v48 = bswap32(*(unsigned __int16 *)(v89 + 10));
    v95.i32[0] = 0;
    v95.i32[3] = vcvtd_n_s64_f64((double)(v48 >> 16) * 0.0000152587891 / v47, 0x10uLL);
    M3x3Mul(v13, v14, (int32x2_t *)&v95, (const int *)2);
    v49 = v95.i32[1];
    *((_DWORD *)a4 + 11) = bswap32(v46[1]);
    *((_DWORD *)a4 + 12) = v49;
    *((_DWORD *)a4 + 13) = *(_DWORD *)((unint64_t)&v95 | 0xC);
    ScalerReleaseFontTable(a2, v46);
    goto LABEL_31;
  }
LABEL_27:
  *((_DWORD *)a4 + 11) = 0;
  v50 = *((_DWORD *)a4 + 1);
  v51 = (*(_DWORD *)a4 - v50) / 20;
  *((_DWORD *)a4 + 13) = v51;
  if (a3)
    v52 = v50 - v51;
  else
    v52 = v50 / 2;
  *((_DWORD *)a4 + 12) = v52;
LABEL_31:
  *((_DWORD *)a4 + 3) = 0;
  *(_QWORD *)(a4 + 36) = 0;
  *(_QWORD *)(a4 + 28) = 0;
  v92[0] = (void *)0xAAAAAAAAAAAAAAAALL;
  FontTable = ScalerGetFontTable(a2, 1717859171, 0, v92, 1, 8);
  if (v92[0])
  {
    v54 = (char *)v92[0] + FontTable;
    v55 = bswap32(*((_DWORD *)v92[0] + 1));
    v56 = (char *)v92[0] + 8 * v55 + 8;
    if ((char *)v92[0] + 16 <= v54)
      v57 = ((unint64_t)FontTable + 0x7FFFFFFF8) >> 3;
    else
      v57 = 0;
    if (v56 <= v54 && v56 >= (char *)v92[0] + 8)
      v59 = v55;
    else
      v59 = v57;
    if (v59)
    {
      v60 = 0;
      v61 = 0;
      v62 = (unsigned int *)((char *)v92[0] + 12);
      do
      {
        v63 = bswap32(*(v62 - 1));
        if (v63 == 1936486004)
        {
          v61 = bswap32(*v62);
        }
        else if (v63 == 1851878502 && *v62)
        {
          v60 |= 4u;
        }
        v62 += 2;
        --v59;
      }
      while (v59);
    }
    else
    {
      v61 = 0;
      v60 = 0;
    }
    ScalerReleaseFontTable(a2, v92[0]);
  }
  else
  {
    v61 = 0;
    v60 = 0;
  }
  v97 = 0;
  v96 = 0;
  v92[0] = 0;
  v92[1] = 0;
  LODWORD(v93) = 0;
  v64 = *(_QWORD *)(a1 + 8);
  v65 = *(_DWORD *)(v64 + 112);
  if (v65)
  {
    v91 = (void *)0xAAAAAAAAAAAAAAAALL;
    TableParts = ScalerGetTableParts(a2, v65, 0, 0, &v91, 0);
    v67 = v91;
    v68 = (char *)v91 + TableParts;
    v69 = *(unsigned __int16 *)(v64 + 146);
    if (v69 >= 0x64)
      v70 = 100;
    else
      v70 = *(unsigned __int16 *)(v64 + 146);
    v71 = (char *)v91 + 4 * v70;
    if (v71 < v91 || v71 > v68)
    {
      v73 = (char *)v91 + 4 <= v68 ? (unint64_t)TableParts >> 2 : 0;
      if (v73 != v70)
      {
        v86 = __cxa_allocate_exception(2uLL);
        *v86 = 5;
        __cxa_throw(v86, MEMORY[0x1E0DE4F10], 0);
      }
    }
    if (!(_DWORD)v70)
    {
      v85 = __cxa_allocate_exception(2uLL);
      *v85 = 5;
      __cxa_throw(v85, MEMORY[0x1E0DE4F10], 0);
    }
    v74 = 0;
    v75 = v91;
    do
    {
      v76 = __rev16((unsigned __int16)*v75);
      if (*v75)
      {
        v77 = 0;
        while (*((unsigned __int16 *)&v96 + v77) != v76)
        {
          if (!*((_WORD *)&v96 + v77))
          {
            *((_WORD *)&v96 + v77) = v76;
            break;
          }
          if (++v77 == 5)
            goto LABEL_76;
        }
        ++*((_DWORD *)v92 + v77);
      }
LABEL_76:
      v75 += 2;
      ++v74;
    }
    while (v74 != (_DWORD)v70);
    if (v69 <= 0x63)
    {
      v78 = 0;
      LODWORD(v70) = *(unsigned __int16 *)(v64 + 40);
      if (v70 >= 0x64)
        LODWORD(v70) = 100;
      while (*((unsigned __int16 *)&v96 + v78) != v76)
      {
        if (++v78 == 5)
          goto LABEL_84;
      }
      *((_DWORD *)v92 + v78) += v70 - v69;
    }
LABEL_84:
    v79 = 0;
    v80 = 0;
    do
    {
      if (*(_DWORD *)((char *)v92 + v79) > v80)
        v80 = *(_DWORD *)((char *)v92 + v79);
      v79 += 4;
    }
    while (v79 != 20);
    if ((_DWORD)v70)
    {
      v81 = 100 * v80 / v70 < 0x60;
      ScalerReleaseFontTable(a2, v67);
      if (!v81)
        v60 |= 1u;
    }
    else
    {
      ScalerReleaseFontTable(a2, v67);
    }
  }
  if (!v61)
  {
    v92[0] = 0;
    if (!ScalerGetFontTable(a2, 1751474532, 0, v92, 1, 54))
      ScalerGetFontTable(a2, 1651008868, 0, v92, 1, 54);
    if (v92[0])
    {
      v82 = *((unsigned __int16 *)v92[0] + 22);
      ScalerReleaseFontTable(a2, v92[0]);
      v61 = (v82 << 22 >> 31) & 0xF0000;
    }
    else
    {
      v61 = 0;
    }
  }
  v83 = v60 | 0x40;
  if (v61 < 786432)
    v83 = v60;
  *((_DWORD *)a4 + 18) = v83;
  if (!*((_DWORD *)a4 + 11))
  {
    if (v61)
      *((_DWORD *)a4 + 11) = -v61;
  }
}

uint64_t TType1PSFont::SetEncoding(uint64_t this, __int32 *a2, const unsigned int *a3, unsigned __int16 *a4)
{
  int8x8_t v4;
  unsigned int v5;
  int v6;
  unsigned int v7;
  int v8;
  int v9;
  __int16 v10;
  unsigned int v11;
  __int32 *v12;
  unsigned int v13;
  unsigned __int16 v14;
  unsigned __int16 v15;

  v4.i32[1] = 0;
  *((_OWORD *)a3 + 30) = 0u;
  *((_OWORD *)a3 + 31) = 0u;
  *((_OWORD *)a3 + 28) = 0u;
  *((_OWORD *)a3 + 29) = 0u;
  *((_OWORD *)a3 + 26) = 0u;
  *((_OWORD *)a3 + 27) = 0u;
  *((_OWORD *)a3 + 24) = 0u;
  *((_OWORD *)a3 + 25) = 0u;
  *((_OWORD *)a3 + 22) = 0u;
  *((_OWORD *)a3 + 23) = 0u;
  *((_OWORD *)a3 + 20) = 0u;
  *((_OWORD *)a3 + 21) = 0u;
  *((_OWORD *)a3 + 18) = 0u;
  *((_OWORD *)a3 + 19) = 0u;
  *((_OWORD *)a3 + 16) = 0u;
  *((_OWORD *)a3 + 17) = 0u;
  *((_OWORD *)a3 + 14) = 0u;
  *((_OWORD *)a3 + 15) = 0u;
  *((_OWORD *)a3 + 12) = 0u;
  *((_OWORD *)a3 + 13) = 0u;
  *((_OWORD *)a3 + 10) = 0u;
  *((_OWORD *)a3 + 11) = 0u;
  *((_OWORD *)a3 + 8) = 0u;
  *((_OWORD *)a3 + 9) = 0u;
  *((_OWORD *)a3 + 6) = 0u;
  *((_OWORD *)a3 + 7) = 0u;
  *((_OWORD *)a3 + 4) = 0u;
  *((_OWORD *)a3 + 5) = 0u;
  *((_OWORD *)a3 + 2) = 0u;
  *((_OWORD *)a3 + 3) = 0u;
  *(_OWORD *)a3 = 0u;
  *((_OWORD *)a3 + 1) = 0u;
  if (a2)
  {
    if ((this + 31) >= 0x20)
    {
      v5 = 0;
      v11 = (this + 31) >> 5;
      v12 = a2;
      do
      {
        if (*v12)
        {
          v4.i32[0] = *v12;
          v4 = vcnt_s8(v4);
          v4.i16[0] = vaddlv_u8((uint8x8_t)v4);
          v5 += v4.i32[0];
        }
        ++v12;
        --v11;
      }
      while (v11);
      if (v5 > 0xFF)
        v5 = 256;
    }
    else
    {
      v5 = 0;
    }
    if ((_DWORD)this && v5)
    {
      v13 = 0;
      v14 = 0;
      v15 = 0;
      do
      {
        if (a2[v13 >> 5] << v13 < 0)
          *((_WORD *)a3 + v15++) = v14;
        v13 = ++v14;
      }
      while (v14 < this && v5 > v15);
    }
  }
  else
  {
    if ((int)this >= 255)
      v6 = 255;
    else
      v6 = (__int16)this;
    if (v6 >= 1)
    {
      v7 = (256 - v6) >> 1;
      v8 = (256 - v6) >> 1;
      v9 = v6 + v8;
      v10 = v7;
      do
      {
        *((_WORD *)a3 + v10) = v10 - v7;
        v10 = v8 + 1;
        v8 = (__int16)(v8 + 1);
      }
      while (v8 < v9);
    }
  }
  return this;
}

uint64_t TType1PSFont::EvaluateCharCode(uint64_t this, unsigned __int8 **a2, const unsigned __int8 **a3, const unsigned __int8 *a4)
{
  unsigned __int8 *v4;
  int v5;
  int v6;

  if (this >= 0xF7)
  {
    v4 = *a2;
    if ((_DWORD)this == 255 || v4 >= (unsigned __int8 *)a3)
    {
      if (v4 + 3 >= (unsigned __int8 *)a3)
      {
        return 0;
      }
      else
      {
        *a2 = v4 + 2;
        v5 = v4[1];
        *a2 = v4 + 3;
        v6 = v4[2];
        *a2 = v4 + 4;
        return (v5 << 24) | (v6 << 16) | (v4[3] << 8);
      }
    }
    else
    {
      *a2 = v4 + 1;
      return *v4 | ((_DWORD)this << 8);
    }
  }
  return this;
}

void TType1PSFont::FastSearchForSeac(TType1PSFont *this, const unsigned __int8 *a2, int a3, unsigned __int8 *a4, __int16 *a5)
{
  int v7;
  const unsigned __int8 **v8;
  const unsigned __int8 *v9;
  uint64_t v10;
  __int16 v12;
  unsigned int v13;
  __int16 v14;
  __int16 v15;
  unsigned __int8 *v16;
  _QWORD v17[2];

  v17[1] = *MEMORY[0x1E0C80C00];
  v17[0] = 0;
  if (a3 < 1)
    return;
  v7 = 0;
  v8 = (const unsigned __int8 **)&a2[a3];
  while (1)
  {
    v9 = a2 + 1;
    v16 = (unsigned __int8 *)(a2 + 1);
    v10 = *a2;
    if (v10 < 0x20)
      break;
    *(_DWORD *)((unint64_t)v17 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v7 & 1))) = TType1PSFont::EvaluateCharCode(v10, &v16, v8, a4);
    v9 = v16;
    ++v7;
LABEL_10:
    a2 = v9;
    if (v9 >= (const unsigned __int8 *)v8)
      return;
  }
  if ((_DWORD)v10 != 12 || v9 >= (const unsigned __int8 *)v8)
    goto LABEL_10;
  v9 = a2 + 2;
  v16 = (unsigned __int8 *)(a2 + 2);
  if (a2[1] != 6)
    goto LABEL_10;
  v12 = v17[0];
  v13 = HIDWORD(v17[0]);
  v14 = LOWORD(v17[0]) + 2412;
  if (BYTE1(v17[0]) > 0xFAu)
    v14 = -1388 - LOWORD(v17[0]);
  if (LODWORD(v17[0]) <= 0xFF)
    v14 = LOWORD(v17[0]) - 139;
  if (LODWORD(v17[0]) < 0x10000)
    v12 = v14;
  *(_WORD *)a4 = v12;
  if (BYTE1(v13) <= 0xFAu)
    v15 = v13 + 2412;
  else
    v15 = -1388 - v13;
  if (v13 <= 0xFF)
    v15 = v13 - 139;
  if (v13 >= 0x10000)
    v15 = v13;
  *a5 = v15;
}

unsigned int *TType1PSFont::GetStreamMap(TType1PSFont *this, const unsigned int *a2, int a3, unsigned int *a4)
{
  unsigned int v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v13;
  unint64_t v14;
  char v16;
  unint64_t v17;
  char v18;
  int v19;
  int v20;
  unint64_t v22;
  __int16 v23;
  int v24;

  v8 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 168))(*((_QWORD *)this + 4));
  if (v8 >= 0xFFFF)
    v9 = 0xFFFF;
  else
    v9 = v8;
  if (v9)
  {
    v10 = 0;
    do
    {
      while (1)
      {
        if (((a2[(unsigned __int16)v10 >> 5] << v10) & 0x80000000) != 0)
        {
          v11 = *(unsigned int *)(*(_QWORD *)(*((_QWORD *)this + 4) + 104) + 8 * (unsigned __int16)v10 + 4);
          if ((_DWORD)v11)
          {
            if (v11 < 0x30 || (*((_WORD *)this + 4) & 1) != 0)
              break;
          }
        }
        if ((unsigned __int16)++v10 >= (unsigned __int16)v9)
          return a4;
      }
      v24 = 0;
      v23 = 0;
      v22 = 0xAAAAAAAAAAAAAAAALL;
      (*(void (**)(unint64_t *__return_ptr, TType1PSFont *, _QWORD, __int16 *))(*(_QWORD *)this + 128))(&v22, this, (unsigned __int16)v10, &v23);
      (*(void (**)(TType1PSFont *, unint64_t, uint64_t, char *, int *))(*(_QWORD *)this + 288))(this, v22, v11, (char *)&v24 + 2, &v24);
      if ((SHIWORD(v24) & 0x80000000) == 0)
      {
        v13 = *(_QWORD *)(*((_QWORD *)this + 4) + 88);
        v14 = *(_QWORD *)(*((_QWORD *)this + 4) + 96);
        if (v14 > HIWORD(v24) && v13 != 0)
        {
          v16 = 0;
          v19 = *(__int16 *)(v13 + 2 * HIWORD(v24));
          if (v19 < 0 || v19 >> 5 >= a3)
            goto LABEL_19;
          a4[v19 >> 5] |= 0x80000000 >> v19;
          if ((__int16)v24 < 0 || v14 <= (unsigned __int16)v24)
          {
            v16 = 0;
            goto LABEL_19;
          }
          v16 = 0;
          v20 = *(__int16 *)(v13 + 2 * (unsigned __int16)v24);
          if (v20 < 0 || v20 >> 5 >= a3)
            goto LABEL_19;
          a4[v20 >> 5] |= 0x80000000 >> v20;
          v24 = 0;
        }
      }
      v16 = 1;
LABEL_19:
      v17 = v22;
      v22 = 0;
      if (v17)
        MEMORY[0x1B5E0CD14](v17, 0x1000C8077774924);
      if ((unsigned __int16)++v10 < (unsigned __int16)v9)
        v18 = v16;
      else
        v18 = 0;
    }
    while ((v18 & 1) != 0);
  }
  return a4;
}

void sub_1B09B5D3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
    MEMORY[0x1B5E0CD14](a9, 0x1000C8077774924);
  _Unwind_Resume(exception_object);
}

uint64_t TType1PSFont::PrinterIsBad(uint64_t this, const char *a2)
{
  uint64_t v2;
  int v3;
  char *v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  int v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  int v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char v18;
  char *v19;
  uint64_t v20;
  size_t v21;
  uint64_t v22;
  size_t v23;
  size_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  _OWORD v30[4];
  _OWORD v31[2];
  char v32;
  _QWORD v33[5];

  *(_QWORD *)((char *)&v33[3] + 7) = *MEMORY[0x1E0C80C00];
  if (this)
  {
    v2 = 0;
    do
    {
      if ((_DWORD)v2 == 127)
        break;
      v3 = *(unsigned __int8 *)(this + v2);
      TType1PSFont::PrinterIsBad(char const*)::gMMBugPrinter[v2++] = v3;
    }
    while (v3);
    v4 = &TType1PSFont::PrinterIsBad(char const*)::gMMBugPrinter[v2];
    v5 = 0;
    *v4 = 0;
    memset(v33, 170, 31);
    *(_QWORD *)&v6 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v31[0] = v6;
    v31[1] = v6;
    v30[2] = v6;
    v30[3] = v6;
    v30[0] = v6;
    v30[1] = v6;
    do
    {
      v7 = v5;
      v8 = *(unsigned __int8 *)(this + v5);
      if ((v8 & 0xFFFFFFDF) == 0)
      {
        v9 = (char *)v33 + v7;
        goto LABEL_10;
      }
      *((_BYTE *)v33 + v7) = v8;
      v5 = v7 + 1;
    }
    while (v7 != 30);
    v9 = (char *)v33 + v5;
LABEL_10:
    v10 = 0;
    v11 = &v9[~(unint64_t)&v32];
    v32 = (char)v11;
    do
    {
      v12 = v10;
      v13 = *(unsigned __int8 *)(this + v10 + v7 + 1);
      if ((v13 & 0xFFFFFFDF) == 0)
      {
        v14 = (char *)v31 + v12 + 1;
        goto LABEL_15;
      }
      *((_BYTE *)v31 + v12 + 1) = v13;
      v10 = v12 + 1;
    }
    while (v12 != 30);
    v14 = (char *)v31 + v10 + 1;
LABEL_15:
    v15 = 0;
    v16 = &v14[~(unint64_t)v31];
    LOBYTE(v31[0]) = (_BYTE)v16;
    v17 = (char *)(this + v7 + v12 + 2);
    while (1)
    {
      v18 = *v17;
      if (!*v17)
        break;
      ++v17;
      *((_BYTE *)v30 + ++v15) = v18;
      if (v15 == 63)
      {
        v19 = (char *)v31;
        goto LABEL_20;
      }
    }
    v19 = (char *)v30 + v15 + 1;
LABEL_20:
    v20 = 0;
    LOBYTE(v30[0]) = (_BYTE)v19 + ~(unint64_t)v30;
    v21 = (char)v11;
    v22 = (char)v11 + 1;
    v23 = (char)v16;
    v29 = (char)v16 + 1;
    v24 = SLOBYTE(v30[0]);
    while (1)
    {
      v25 = off_1E61B6358[v20] + 1;
      if (!memcmp(v33, v25, v21))
      {
        v26 = &v25[v22];
        if (*v26 == 42)
        {
          v27 = 2;
        }
        else
        {
          v28 = memcmp((char *)v31 + 1, v26, v23);
          v27 = v29;
          if (v28)
            goto LABEL_26;
        }
        if (!memcmp((char *)v30 + 1, &v26[v27], v24))
          return 1;
      }
LABEL_26:
      if (++v20 == 6)
        return 0;
    }
  }
  return this;
}

uint64_t TType1PSFont::GetPSStreamType(TType1PSFont *this, int a2)
{
  int v2;
  _WORD *exception;

  if ((a2 & 0x22) != 0)
  {
    v2 = 2;
  }
  else
  {
    if ((a2 & 0x200) == 0 || *(unsigned __int16 *)(*((_QWORD *)this + 4) + 150) >= 2u)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)exception = &off_1E61B2D68;
      exception[4] = 10;
    }
    v2 = 512;
  }
  return v2 | a2 & 0xFFFFF000;
}

void TType1PSFont::SetupGlyphBits(TType1PSFont *this@<X0>, const unsigned int *a2@<X2>, _QWORD *a3@<X8>)
{
  unsigned int v6;
  int v7;
  int v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  std::vector<unsigned int>::pointer begin;
  uint64_t v13;
  _WORD *exception;
  std::vector<unsigned int> v15;

  if (a2)
  {
    v6 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 168))(*((_QWORD *)this + 4));
    if (v6 >= 0xFFFF)
      v7 = 0xFFFF;
    else
      v7 = v6;
    if (!v7)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)exception = &off_1E61B2D68;
      exception[4] = 5;
    }
    v8 = v7 + 31;
    v9 = (v7 + 31) >> 5;
    v10 = (_DWORD *)operator new[]();
    bzero(v10, 4 * v9);
    v11 = *(_QWORD *)(*((_QWORD *)this + 4) + 88);
    if (v11)
    {
      memset(&v15, 170, sizeof(v15));
      std::vector<unsigned int>::vector(&v15, v8 >> 5);
      begin = v15.__begin_;
      TType1PSFont::GetStreamMap(this, a2, (__int16)(v8 >> 5), v15.__begin_);
      v13 = 0;
      *v10 |= 0x80000000;
      do
      {
        v10[v13] |= begin[v13] | a2[v13];
        ++v13;
      }
      while (v9 != v13);
      if (v15.__begin_)
      {
        v15.__end_ = v15.__begin_;
        operator delete(v15.__begin_);
      }
    }
    else
    {
      *v10 |= 0x80000000;
      do
      {
        v10[v11] |= a2[v11];
        ++v11;
      }
      while (v9 != v11);
    }
  }
  else
  {
    v10 = 0;
  }
  *a3 = v10;
}

void sub_1B09B61AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;

  if (__p)
    operator delete(__p);
  MEMORY[0x1B5E0CD14](v11, 0x1000C8052888210);
  _Unwind_Resume(a1);
}

uint64_t TStreamEncodingContext::TStreamEncodingContext(uint64_t a1, uint64_t a2, char a3, char a4)
{
  _BYTE *v8;
  uint64_t v9;
  char *v10;
  int v11;
  char v12;
  char *v13;
  int v14;
  char v15;

  *(_QWORD *)a1 = &off_1E61B6398;
  std::vector<unsigned char>::vector((_QWORD *)(a1 + 8), 0x64uLL);
  *(_QWORD *)(a1 + 32) = a2;
  *(_BYTE *)(a1 + 48) = a4;
  *(_BYTE *)(a1 + 49) = a3;
  v8 = *(_BYTE **)(a1 + 8);
  if ((a4 & 1) != 0)
  {
    v9 = 17;
    v10 = "StandardEncoding\r";
    v11 = 17;
    do
    {
      --v11;
      v12 = *v10++;
      *v8++ = v12;
    }
    while ((_BYTE)v11);
  }
  else
  {
    v9 = 50;
    v13 = "256 array 0 1 255 {1 index exch /.notdef put} for\r";
    v14 = 50;
    do
    {
      --v14;
      v15 = *v13++;
      *v8++ = v15;
    }
    while ((_BYTE)v14);
  }
  *v8 = 0;
  *(_QWORD *)(a1 + 40) = v9;
  return a1;
}

uint64_t TStreamEncodingContext::TStreamEncodingContext(uint64_t a1, uint64_t a2, char a3)
{
  int v6;
  char *v7;
  _BYTE *v8;
  char v9;

  *(_QWORD *)a1 = &off_1E61B6398;
  std::vector<unsigned char>::vector((_QWORD *)(a1 + 8), 0x1388uLL);
  *(_QWORD *)(a1 + 32) = a2;
  *(_BYTE *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 49) = a3;
  v6 = 50;
  v7 = "256 array 0 1 255 {1 index exch /.notdef put} for\r";
  v8 = *(_BYTE **)(a1 + 8);
  do
  {
    --v6;
    v9 = *v7++;
    *v8++ = v9;
  }
  while ((_BYTE)v6);
  *v8 = 0;
  *(_QWORD *)(a1 + 40) = 50;
  return a1;
}

uint64_t TStreamEncodingContext::AddEncodingText(uint64_t this, int a2, const char *a3)
{
  _QWORD *v5;
  unint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;

  if (!*(_BYTE *)(this + 48))
  {
    v5 = (_QWORD *)this;
    v8 = *(_QWORD *)(this + 8);
    v6 = (unint64_t *)(this + 8);
    v7 = v8;
    v9 = v6[4];
    v10 = v6[1];
    v11 = v10 - v8;
    if (v9 + 100 > v10 - v8)
    {
      if (v11 > 0xFFFFFFFFFFFFF63BLL)
      {
        v10 = v11 + v7 + 2500;
        v5[2] = v10;
      }
      else
      {
        std::vector<unsigned char>::__append(v6, 0x9C4uLL);
        v9 = v5[5];
        v7 = v5[1];
        v10 = v5[2];
      }
    }
    this = snprintf_l((char *)(v7 + v9), v10 - v9 - v7, 0, "dup %d %.*s put\r", a2, *(unsigned __int8 *)a3, a3 + 1);
    v5[5] += (int)this;
  }
  return this;
}

uint64_t TStreamEncodingContext::DumpPSEncoding(TStreamEncodingContext *this)
{
  uint64_t v2;
  unint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  _BYTE *v6;
  int v7;
  char *v8;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t result;
  __int16 v13;
  _WORD *exception;

  v2 = *((_QWORD *)this + 5);
  if (!*((_BYTE *)this + 49))
  {
    v4 = *((_QWORD *)this + 1);
    v3 = (unint64_t *)((char *)this + 8);
    v5 = *((_QWORD *)this + 2) - v4;
    if (v2 + 13 > v5)
    {
      std::vector<unsigned char>::__append(v3, v2 + 13 - v5);
      v4 = *((_QWORD *)this + 1);
      v2 = *((_QWORD *)this + 5);
    }
    v6 = (_BYTE *)(v4 + v2);
    v7 = 13;
    v8 = "readonly def\r";
    do
    {
      --v7;
      v9 = *v8++;
      *v6++ = v9;
    }
    while ((_BYTE)v7);
    *v6 = 0;
    v2 = *((_QWORD *)this + 5) + 13;
    *((_QWORD *)this + 5) = v2;
  }
  v10 = (uint64_t *)*((_QWORD *)this + 4);
  if (!v10 || (v11 = *v10) == 0 || !*(_DWORD *)v11)
  {
    v13 = 9;
    goto LABEL_14;
  }
  result = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(v11 + 20))(*(_QWORD *)(v11 + 28), v2, *((_QWORD *)this + 1));
  if ((_WORD)result)
  {
    v13 = result;
LABEL_14:
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E61B2D68;
    exception[4] = v13;
  }
  return result;
}

void TStreamEncodingContext::~TStreamEncodingContext(TStreamEncodingContext *this)
{
  void *v2;

  *(_QWORD *)this = &off_1E61B6398;
  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
  {
    *((_QWORD *)this + 2) = v2;
    operator delete(v2);
  }
}

{
  void *v2;

  *(_QWORD *)this = &off_1E61B6398;
  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
  {
    *((_QWORD *)this + 2) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1B5E0CD38);
}

void TType1PSFont::StreamEncoding(uint64_t a1, const void *a2, char a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t i;
  unint64_t v11;
  _WORD __dst[256];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(v7 + 88);
  if (v8)
  {
    v9 = *(_QWORD *)(v7 + 96);
    memcpy(__dst, a2, sizeof(__dst));
    for (i = 0; i != 29; ++i)
    {
      v11 = kComponentCodes[i];
      if ((__int16)__dst[v11] == -1 && v9 > v11)
        __dst[v11] = *(_WORD *)(v8 + 2 * v11);
    }
    TType1PSFont::StreamEncodingData((_QWORD **)a1, (uint64_t)__dst, a3, a4);
  }
  else
  {
    TType1PSFont::StreamEncodingData((_QWORD **)a1, (uint64_t)a2, a3, a4);
  }
}

void TType1PSFont::StreamEncodingData(_QWORD **a1, uint64_t a2, char a3, uint64_t a4)
{
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  void *__p[2];
  __int128 v13;
  __int128 v14;
  unint64_t v15;
  unsigned __int8 v16[16];
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v15 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v6 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v13 = v6;
  v14 = v6;
  *(_OWORD *)__p = v6;
  TStreamEncodingContext::TStreamEncodingContext((uint64_t)__p, a4, a3);
  v7 = 0;
  *(_QWORD *)&v8 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v30 = v8;
  v31 = v8;
  v28 = v8;
  v29 = v8;
  v26 = v8;
  v27 = v8;
  v24 = v8;
  v25 = v8;
  v22 = v8;
  v23 = v8;
  v20 = v8;
  v21 = v8;
  v18 = v8;
  v19 = v8;
  *(_OWORD *)v16 = v8;
  v17 = v8;
  do
  {
    v9 = *(unsigned __int16 *)(a2 + 2 * v7);
    if (*(_WORD *)(a2 + 2 * v7))
    {
      v10 = (*(uint64_t (**)(_QWORD *))(*a1[4] + 168))(a1[4]);
      v11 = v10 >= 0xFFFF ? 0xFFFF : v10;
      if (v9 < v11)
      {
        ((void (*)(_QWORD **, uint64_t, unsigned __int8 *))(*a1)[29])(a1, v9, v16);
        TStreamEncodingContext::AddEncodingText((uint64_t)__p, v7, (const char *)v16);
      }
    }
    ++v7;
  }
  while ((_DWORD)v7 != 256);
  TStreamEncodingContext::DumpPSEncoding((TStreamEncodingContext *)__p);
  __p[0] = &off_1E61B6398;
  if (__p[1])
  {
    *(void **)&v13 = __p[1];
    operator delete(__p[1]);
  }
}

void sub_1B09B6788(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t TType1PSFont::StreamPSEncoding(_QWORD **a1, unsigned int *a2, uint64_t a3, char a4, _DWORD *a5, uint64_t a6)
{
  uint64_t result;
  uint64_t v12;
  __int32 *v13;
  __int128 v14;
  uint64_t v15;
  unsigned __int16 *v16;
  unint64_t v17;
  unsigned int v18[4];
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  if ((a4 & 1) != 0)
    return ((uint64_t (*)(_QWORD **, uint64_t))(*a1)[31])(a1, a6);
  v12 = ((uint64_t (*)(_QWORD **, _QWORD))(*a1)[6])(a1, *a5);
  *a5 = v12;
  v17 = 0xAAAAAAAAAAAAAAAALL;
  ((void (*)(unint64_t *__return_ptr, _QWORD **, uint64_t, uint64_t))(*a1)[30])(&v17, a1, v12, a3);
  v13 = (__int32 *)v17;
  *(_QWORD *)&v14 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v14 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v48 = v14;
  v49 = v14;
  v46 = v14;
  v47 = v14;
  v44 = v14;
  v45 = v14;
  v42 = v14;
  v43 = v14;
  v40 = v14;
  v41 = v14;
  v38 = v14;
  v39 = v14;
  v36 = v14;
  v37 = v14;
  v34 = v14;
  v35 = v14;
  v32 = v14;
  v33 = v14;
  v30 = v14;
  v31 = v14;
  v28 = v14;
  v29 = v14;
  v26 = v14;
  v27 = v14;
  v24 = v14;
  v25 = v14;
  v22 = v14;
  v23 = v14;
  v20 = v14;
  v21 = v14;
  *(_OWORD *)v18 = v14;
  v19 = v14;
  if (!a2)
  {
    LODWORD(v15) = (*(uint64_t (**)(_QWORD *))(*a1[4] + 168))(a1[4]);
    if (v15 >= 0xFFFF)
      v15 = 0xFFFFLL;
    else
      v15 = v15;
    a2 = v18;
    TType1PSFont::SetEncoding(v15, v13, v18, v16);
  }
  ((void (*)(_QWORD **, unsigned int *, uint64_t, uint64_t))(*a1)[32])(a1, a2, 1, a6);
  result = v17;
  v17 = 0;
  if (result)
    return MEMORY[0x1B5E0CD14](result, 0x1000C8052888210);
  return result;
}

void sub_1B09B6964(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  _Unwind_Resume(exception_object);
}

uint64_t TType1PSFont::StreamReEncodeFont(uint64_t a1, uint64_t a2, unsigned __int8 *a3, unsigned __int8 *a4, uint64_t *a5)
{
  uint64_t v6;
  uint64_t result;
  uint64_t v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  uint64_t v19;
  __int16 v20;
  __int16 v21;
  __int16 v22;
  _WORD *exception;

  if (!a5)
    goto LABEL_25;
  v6 = *a5;
  if (!*a5 || !*(_DWORD *)v6)
    goto LABEL_25;
  LOWORD(result) = (*(uint64_t (**)(_QWORD, uint64_t, void *))(v6 + 20))(*(_QWORD *)(v6 + 28), 2, &kCRAndSlash);
  if ((_WORD)result)
  {
LABEL_31:
    v21 = result;
    goto LABEL_32;
  }
  v12 = *a5;
  if (!*a5 || !*(_DWORD *)v12)
    goto LABEL_24;
  v13 = (*(uint64_t (**)(_QWORD, _QWORD, unsigned __int8 *))(v12 + 20))(*(_QWORD *)(v12 + 28), *a3, a3 + 1);
  if (v13)
    goto LABEL_27;
  v14 = *a5;
  if (!*a5 || !*(_DWORD *)v14)
    goto LABEL_24;
  v13 = (*(uint64_t (**)(_QWORD, uint64_t, char *))(v14 + 20))(*(_QWORD *)(v14 + 28), 9, " findfont");
  if (v13)
  {
LABEL_27:
    v20 = v13;
    goto LABEL_28;
  }
  v15 = *a5;
  if (!*a5 || !*(_DWORD *)v15)
  {
LABEL_24:
    v20 = 9;
LABEL_28:
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E61B2D68;
    exception[4] = v20;
    goto LABEL_33;
  }
  v13 = (*(uint64_t (**)(_QWORD, uint64_t, void *))(v15 + 20))(*(_QWORD *)(v15 + 28), 2, &kCRAndSlash);
  if (v13)
    goto LABEL_27;
  v16 = *a5;
  if (!*a5 || !*(_DWORD *)v16)
    goto LABEL_26;
  v17 = (*(uint64_t (**)(_QWORD, _QWORD, unsigned __int8 *))(v16 + 20))(*(_QWORD *)(v16 + 28), *a4, a4 + 1);
  if (v17)
  {
LABEL_29:
    v22 = v17;
    goto LABEL_30;
  }
  v18 = *a5;
  if (!*a5 || !*(_DWORD *)v18)
  {
LABEL_26:
    v22 = 9;
LABEL_30:
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E61B2D68;
    exception[4] = v22;
    goto LABEL_33;
  }
  v17 = (*(uint64_t (**)(_QWORD, uint64_t, void *))(v18 + 20))(*(_QWORD *)(v18 + 28), 1, &kCRAndSlash);
  if (v17)
    goto LABEL_29;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 256))(a1, a2, 1, a5);
  v19 = *a5;
  if (!*a5 || !*(_DWORD *)v19)
  {
LABEL_25:
    v21 = 9;
LABEL_32:
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E61B2D68;
    exception[4] = v21;
LABEL_33:
  }
  result = (*(uint64_t (**)(_QWORD, uint64_t, const char *))(v19 + 20))(*(_QWORD *)(v19 + 28), 207, "3 -1 roll dup length dict exch {exch dup dup /FID ne exch /Encoding ne and {2 index 3 1 roll exch put} {pop pop} ifelse} forall\rdup 3 -1 roll /Encoding exch put 2 copy exch /FontName exch put definefont pop\r");
  if ((_WORD)result)
    goto LABEL_31;
  return result;
}

unsigned __int8 *TType1PSFont::GetStandardEncoding(unsigned __int8 *this, unsigned __int16 *a2)
{
  uint64_t v3;
  uint64_t i;

  if (a2)
  {
    v3 = (uint64_t)this;
    for (i = 0; i != 256; ++i)
    {
      if ((_BYTE)i)
      {
        this = (unsigned __int8 *)TParsingContext::GetStandardEncodeName((TParsingContext *)i);
        if (this)
          this = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, unsigned __int8 *, _QWORD))(*(_QWORD *)v3 + 192))(v3, this + 1, *this);
      }
      else
      {
        this = 0;
      }
      a2[i] = (unsigned __int16)this;
    }
  }
  return this;
}

uint64_t TType1PSFont::GetFontEncoding(TType1PSFont *this, unsigned __int16 *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  int v10;
  char *v11;
  const char *v12;
  char v13;
  int v14;
  char *v15;
  unsigned __int16 v16;
  uint64_t v17;
  size_t v18;
  int v19;
  __int16 v21;
  _WORD *exception;
  int *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(_QWORD *, size_t, void *);
  void **v28;
  __int16 v29;
  void *__p[2];
  __int128 v31;
  char v32[4];

  *(_OWORD *)__p = 0u;
  v31 = 0u;
  v24 = 1;
  v26 = 0;
  v25 = 0;
  v27 = LocalStreamer;
  v28 = __p;
  v29 = 0;
  v23 = &v24;
  (*(void (**)(TType1PSFont *, int **))(*(_QWORD *)this + 248))(this, &v23);
  if (a2)
  {
    bzero(a2, 0x200uLL);
    v4 = (char *)__p[1];
    *((_BYTE *)__p[1] + (unint64_t)__p[0]) = 0;
    if (strstr(v4, "StandardEncoding"))
    {
      v21 = 23;
LABEL_33:
      exception = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)exception = &off_1E61B2D68;
      exception[4] = v21;
    }
    v5 = strstr(v4, "dup");
    if (v5)
    {
      while (1)
      {
        v6 = 0;
        *(_DWORD *)v32 = -1431655766;
        v7 = v5 + 3;
        v8 = v32;
        while (1)
        {
          v9 = &v5[v6];
          v10 = v5[v6 + 3];
          if (!v5[v6 + 3] || v10 == 47)
            break;
          if ((char)v10 >= 33)
          {
            if ((v10 - 48) > 9)
              break;
            if (v8 - v32 <= 2)
              *v8++ = v10;
          }
          ++v6;
          ++v7;
        }
        *v8 = 0;
        if (!v32[0])
        {
          if (v6 == -3)
            v15 = v5 + 1;
          else
            v15 = v5;
          v11 = &v15[v6 + 3];
          goto LABEL_28;
        }
        v11 = v9 + 3;
        if (v9[3] == 47)
          break;
        v12 = 0;
        if (v9[3])
          goto LABEL_23;
LABEL_24:
        v16 = atoi(v32);
        if ((v16 & 0xFF00) != 0)
        {
          v21 = 5;
          goto LABEL_33;
        }
        v17 = v16;
        a2[v16] = 0;
        if (v12)
        {
          v18 = strlen(v12);
          v19 = (*(uint64_t (**)(TType1PSFont *, const char *, size_t))(*(_QWORD *)this + 192))(this, v12, v18);
          if (v19 != 0xFFFF)
            a2[v17] = v19;
        }
LABEL_28:
        v5 = strstr(v11, "dup");
        if (!v5)
          goto LABEL_29;
      }
      v12 = &v5[v6 + 4];
      do
      {
        v14 = *++v7;
        v13 = v14;
      }
      while (v14 > 32);
      v11 = v7;
      if (!v13)
        goto LABEL_24;
LABEL_23:
      *v11++ = 0;
      goto LABEL_24;
    }
  }
LABEL_29:
  if (__p[1])
  {
    *(void **)&v31 = __p[1];
    operator delete(__p[1]);
  }
  return 1;
}

void sub_1B09B6E80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (a2 == 1)
  {
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x1B09B6E10);
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t LocalStreamer(_QWORD *a1, size_t __len, void *__src)
{
  unsigned int v4;
  uint64_t v6;
  unint64_t v7;
  std::vector<char> *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;

  if (!(_DWORD)__len)
    return 0;
  if (!__src)
    return 8;
  v4 = __len;
  v6 = *a1;
  v7 = *a1 + __len + 1;
  v10 = a1[1];
  v8 = (std::vector<char> *)(a1 + 1);
  v9 = v10;
  v11 = a1[2] - v10;
  if (v7 > v11)
  {
    std::vector<char>::__append(v8, v7 - v11);
    v6 = *a1;
    v9 = a1[1];
  }
  memmove((void *)(v9 + v6), __src, v4);
  result = 0;
  *a1 += v4;
  return result;
}

void sub_1B09B6F50(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B09B6F40);
}

size_t TType1PSFont::FindValueForKey(TType1PSFont *this, const char *a2, const char *a3, _DWORD *a4, unsigned int *a5, unsigned int *a6)
{
  const char *v8;
  const char *v10;
  size_t result;
  TType1PSFont *v12;
  int v13;
  int v14;
  TType1PSFont *v15;
  TType1PSFont *v16;
  int v17;
  int v18;
  int v19;
  const char *v20;
  int v21;
  unsigned int v22;
  int v23;
  unsigned int v24;

  v8 = a2;
  v10 = &a2[a3];
  result = strlen((const char *)this);
  v12 = (TType1PSFont *)((char *)this + result);
  v13 = ~(_DWORD)v8;
  do
  {
    if (v8 >= v10)
    {
      *a5 = -1;
      return result;
    }
    v14 = (int)v8;
    v15 = this;
    while (1)
    {
      v16 = v15;
      if (v15 >= v12)
        break;
      v17 = *(unsigned __int8 *)v8++;
      v15 = (TType1PSFont *)((char *)v15 + 1);
      ++v14;
      if (v17 != *(unsigned __int8 *)v16)
        goto LABEL_25;
    }
    do
    {
      v18 = *v8++;
      ++v14;
    }
    while (v18 < 33);
    *a4 = v13 + v14;
    if ((*(v8 - 1) & 0xDF) != 0x5B)
    {
      do
        v23 = *v8++;
      while (v23 > 32);
      goto LABEL_22;
    }
    if (v8 >= v10)
      goto LABEL_21;
    v19 = 1;
    v20 = v8;
    while (1)
    {
      v21 = *(unsigned __int8 *)v20++;
      v22 = v21 & 0xFFFFFFDF;
      if ((v21 & 0xFFFFFFDF) != 0x5D)
      {
        if (v22 == 91)
          ++v19;
        goto LABEL_16;
      }
      if (!--v19)
        break;
LABEL_16:
      v8 = v20;
      if (v20 >= v10)
      {
        v8 = v10;
        goto LABEL_21;
      }
    }
    ++v8;
LABEL_21:
    if (++v8 >= v10)
      v24 = -1;
    else
LABEL_22:
      v24 = (_DWORD)v8 - v14;
    *a5 = v24;
LABEL_25:
    ;
  }
  while (v16 < v12);
  return result;
}

size_t TType1PSFont::FindNameRange(TType1PSFont *this, const char *a2, _DWORD *a3, unsigned int *a4, unsigned int *a5, unsigned int *a6)
{
  size_t result;

  result = TType1PSFont::FindValueForKey((TType1PSFont *)"/FontName", (const char *)this, a2, a3, a4, a6);
  if (*a4 != -1)
  {
    ++*a3;
    --*a4;
  }
  return result;
}

const unsigned __int8 *TType1PSFont::ScanForKey(TType1PSFont *this, char *a2, const unsigned __int8 *a3, unsigned int *a4, unsigned int *a5, unsigned int *a6)
{
  int v9;
  const unsigned __int8 *result;
  int v11;
  _WORD *exception;
  unsigned __int8 *v13;

  v9 = (int)a2;
  v13 = (unsigned __int8 *)a2;
  result = FindKey((const char *)this, *(_DWORD *)a3, (const unsigned __int8 **)&v13);
  if (!result)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E61B2D68;
    exception[4] = 5;
  }
  v11 = (int)v13;
  *a4 = (_DWORD)v13 - v9;
  *a5 = (_DWORD)result - v11;
  *(_DWORD *)a3 -= *a4;
  return result;
}

const unsigned __int8 *FindKey(const char *a1, int a2, const unsigned __int8 **a3)
{
  const unsigned __int8 *v6;
  size_t v7;
  unint64_t v8;
  const unsigned __int8 *v9;
  size_t v10;
  const char *v11;

  v6 = *a3;
  v7 = strlen(a1);
  if (a2)
  {
    v8 = (unint64_t)&v6[a2];
    v9 = v6;
    do
    {
      v10 = v7;
      v11 = a1;
      while ((unint64_t)v9 < v8)
      {
        if (*v9 != *v11)
        {
          ++v9;
          break;
        }
        ++v11;
        ++v9;
        if (!--v10)
          return &v6[v7];
      }
      *a3 = v9;
      v6 = v9;
    }
    while ((unint64_t)v9 < v8);
  }
  return 0;
}

void TBufferedStreamingContext::~TBufferedStreamingContext(TBufferedStreamingContext *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1E61B63B8;
  if (!*((_WORD *)this + 32))
    TBufferedStreamingContext::StreamBuffer((uint64_t)this);
  v2 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v2)
    MEMORY[0x1B5E0CD14](v2, 0x1000C8077774924);
}

{
  TBufferedStreamingContext::~TBufferedStreamingContext(this);
  JUMPOUT(0x1B5E0CD38);
}

uint64_t TBufferedStreamingContext::StreamBuffer(uint64_t this)
{
  uint64_t v1;
  __int128 v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _BYTE *v8;
  unint64_t v9;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  __int16 v13;
  BOOL v14;
  uint64_t *v15;
  uint64_t v16;
  __int16 v17;
  uint64_t *v18;
  uint64_t v19;
  __int16 v20;
  _WORD *exception;
  _WORD *v22;
  _WORD *v23;
  _OWORD v24[16];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  if (!*(_WORD *)(this + 64))
  {
    v1 = this;
    if (*(_BYTE *)(this + 63))
    {
      *(_QWORD *)&v2 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v2 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v24[14] = v2;
      v24[15] = v2;
      v24[12] = v2;
      v24[13] = v2;
      v24[10] = v2;
      v24[11] = v2;
      v24[8] = v2;
      v24[9] = v2;
      v24[6] = v2;
      v24[7] = v2;
      v24[4] = v2;
      v24[5] = v2;
      v24[2] = v2;
      v24[3] = v2;
      v24[0] = v2;
      v24[1] = v2;
      v3 = *(_QWORD *)(this + 48);
      if (v3 >= 1)
      {
        v4 = 0;
        v5 = *(_QWORD *)(this + 40);
        v6 = v5 + v3;
        v7 = v5 + 1;
        v8 = v24;
        do
        {
          while (1)
          {
            v9 = *(unsigned __int8 *)(v7 - 1);
            v10 = kHexChar[v9 >> 4];
            LOBYTE(v9) = kHexChar[v9 & 0xF];
            *v8 = v10;
            v8[1] = v9;
            LODWORD(v9) = *(_DWORD *)(v1 + 56) + 1;
            *(_DWORD *)(v1 + 56) = v9;
            if (v9 < 0x30)
            {
              v8 += 2;
              v4 += 2;
            }
            else
            {
              *(_DWORD *)(v1 + 56) = 0;
              v8[2] = 13;
              v8 += 3;
              v4 += 3;
            }
            if (v4 < 0xFE)
              break;
            v11 = *(uint64_t **)(v1 + 32);
            if (!v11 || (v12 = *v11) == 0 || !*(_DWORD *)v12)
            {
              v13 = 9;
LABEL_30:
              exception = __cxa_allocate_exception(0x10uLL);
              *(_QWORD *)exception = &off_1E61B2D68;
              exception[4] = v13;
            }
            this = (*(uint64_t (**)(_QWORD))(v12 + 20))(*(_QWORD *)(v12 + 28));
            v13 = this;
            if ((_WORD)this)
              goto LABEL_30;
            v4 = 0;
            v8 = v24;
            v14 = v7++ >= v6;
            if (v14)
              goto LABEL_27;
          }
          v14 = v7++ >= v6;
        }
        while (!v14);
        v15 = *(uint64_t **)(v1 + 32);
        if (!v15 || (v16 = *v15) == 0 || !*(_DWORD *)v16)
        {
          v17 = 9;
          goto LABEL_34;
        }
        this = (*(uint64_t (**)(_QWORD))(v16 + 20))(*(_QWORD *)(v16 + 28));
        v17 = this;
        if ((_WORD)this)
        {
LABEL_34:
          v23 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v23 = &off_1E61B2D68;
          v23[4] = v17;
        }
      }
      goto LABEL_27;
    }
    v18 = *(uint64_t **)(this + 32);
    if (v18 && (v19 = *v18) != 0 && *(_DWORD *)v19)
    {
      this = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v19 + 20))(*(_QWORD *)(v19 + 28), *(unsigned int *)(this + 48), *(_QWORD *)(this + 40));
      v20 = this;
      if (!(_WORD)this)
      {
LABEL_27:
        *(_QWORD *)(v1 + 48) = 0;
        return this;
      }
    }
    else
    {
      v20 = 9;
    }
    v22 = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)v22 = &off_1E61B2D68;
    v22[4] = v20;
  }
  return this;
}

void sub_1B09B7514(_Unwind_Exception *exception_object, int a2)
{
  uint64_t v2;
  _WORD *v3;
  _WORD *exception;

  if (a2 == 1)
  {
    v3 = __cxa_begin_catch(exception_object);
    *(_WORD *)(v2 + 64) = v3[4];
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E61B2D68;
    exception[4] = v3[4];
  }
  _Unwind_Resume(exception_object);
}

void sub_1B09B757C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_1B09B7588(void *a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1B09B7590);
  __clang_call_terminate(a1);
}

char *TBufferedStreamingContext::StreamSubstituteHeaderComment(TBufferedStreamingContext *this, const char *a2, char *__s1, unsigned int *a4)
{
  char *v5;
  size_t v8;
  char *v9;
  int v10;
  int v11;
  int v13;
  unsigned __int8 v16;
  unsigned __int8 v17;

  v5 = __s1;
  if (!strncmp(__s1, "%!", 2uLL))
  {
    TBufferedStreamingContext::BufferString((uint64_t)this, (const unsigned __int8 *)"%!FontType1-1.0: ", 0x11uLL);
    v8 = strlen(a2);
    TBufferedStreamingContext::BufferString((uint64_t)this, (const unsigned __int8 *)a2, v8);
    v16 = 32;
    TBufferedStreamingContext::BufferString((uint64_t)this, &v16, 1uLL);
    TBufferedStreamingContext::BufferString((uint64_t)this, (const unsigned __int8 *)"001.003", 7uLL);
    v17 = 13;
    TBufferedStreamingContext::BufferString((uint64_t)this, &v17, 1uLL);
    v9 = &v5[*a4];
    while (v5 < v9)
    {
      v11 = *v5++;
      v10 = v11;
      if (v11 == 13 || v10 == 10)
      {
        if (v5 < v9)
        {
          v13 = *v5;
          if (v13 == 13 || v13 == 10)
            ++v5;
        }
        break;
      }
    }
    *a4 = (_DWORD)v9 - (_DWORD)v5;
  }
  return v5;
}

uint64_t TBufferedStreamingContext::BufferString(uint64_t this, const unsigned __int8 *a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  __int16 v9;
  _BYTE *v10;
  const unsigned __int8 *v11;
  size_t v12;
  char v13;
  char v14;
  size_t v15;

  if (a3)
  {
    v3 = a3;
    v5 = this;
    v6 = 0;
    do
    {
      v7 = *(_QWORD *)(v5 + 48);
      if (1024 - v7 >= v3)
        v8 = v3;
      else
        v8 = 1024 - v7;
      if (*(_BYTE *)(v5 + 62))
      {
        v9 = *(_WORD *)(v5 + 60);
        if (v8)
        {
          v10 = (_BYTE *)(*(_QWORD *)(v5 + 40) + v7);
          v11 = &a2[v6];
          v12 = v8;
          do
          {
            v13 = *v11++;
            v14 = HIBYTE(v9);
            v9 = 22719 - 12691 * (v9 + (v13 ^ ((unsigned __int16)(v9 & 0xFF00) >> 8)));
            *v10++ = v13 ^ v14;
            --v12;
          }
          while (v12);
        }
        *(_WORD *)(v5 + 60) = v9;
      }
      else
      {
        this = (uint64_t)memcpy((void *)(*(_QWORD *)(v5 + 40) + v7), &a2[v6], v8);
      }
      v15 = *(_QWORD *)(v5 + 48) + v8;
      *(_QWORD *)(v5 + 48) = v15;
      if (v15 == 1024)
        this = TBufferedStreamingContext::StreamBuffer(v5);
      v6 += v8;
      v3 -= v8;
    }
    while (v3);
  }
  return this;
}

BOOL TBufferedStreamingContext::StreamTillSubstitutedFontName(TBufferedStreamingContext *this, const char *a2, const unsigned __int8 **a3, unsigned int *a4, unsigned int *a5, unsigned int *a6)
{
  unsigned int v10;
  int v11;
  size_t v12;
  uint64_t v13;
  unsigned int v15;
  unint64_t v16;

  v15 = -1431655766;
  LODWORD(v16) = -1431655766;
  TType1PSFont::FindNameRange((TType1PSFont *)*a3, (const char *)*a4, &v16, &v15, a5, a6);
  v10 = v15;
  if (v15 != -1)
  {
    v11 = v16;
    TBufferedStreamingContext::BufferString((uint64_t)this, *a3, v16);
    v12 = strlen(a2);
    TBufferedStreamingContext::BufferString((uint64_t)this, (const unsigned __int8 *)a2, v12);
    v13 = v11 + v10;
    *a3 += v13;
    *a4 -= v13;
  }
  return v10 != -1;
}

uint64_t TBufferedStreamingContext::BeginEexec(TBufferedStreamingContext *this, int a2, char a3)
{
  char v4;
  uint64_t result;
  unsigned __int8 v7[4];

  v4 = a2;
  if (a2)
  {
    TBufferedStreamingContext::BufferString((uint64_t)this, "currentfile eexec\r", 0x12uLL);
    TBufferedStreamingContext::StreamBuffer((uint64_t)this);
    *((_BYTE *)this + 62) = v4;
    *((_BYTE *)this + 63) = a3;
    *((_DWORD *)this + 14) = 0;
    *((_WORD *)this + 30) = -9871;
    *(_DWORD *)v7 = 0;
    return TBufferedStreamingContext::BufferString((uint64_t)this, v7, 4uLL);
  }
  else
  {
    result = TBufferedStreamingContext::StreamBuffer((uint64_t)this);
    *((_BYTE *)this + 62) = v4;
    *((_BYTE *)this + 63) = a3;
    *((_DWORD *)this + 14) = 0;
    *((_WORD *)this + 30) = -9871;
  }
  return result;
}

uint64_t TBufferedStreamingContext::EndEexec(uint64_t this)
{
  uint64_t v1;
  unsigned int v2;
  unsigned __int8 v4;

  if (!*(_WORD *)(this + 64))
  {
    v1 = this;
    if (*(_BYTE *)(this + 62))
      TBufferedStreamingContext::BufferString(this, (const unsigned __int8 *)"mark currentfile closefile\r", 0x1BuLL);
    this = TBufferedStreamingContext::StreamBuffer(v1);
    *(_BYTE *)(v1 + 63) = 0;
    if (*(_BYTE *)(v1 + 62))
    {
      *(_BYTE *)(v1 + 62) = 0;
      if (*(_DWORD *)(v1 + 56))
      {
        v4 = 13;
        TBufferedStreamingContext::BufferString(v1, &v4, 1uLL);
      }
      v2 = 0;
      do
        TBufferedStreamingContext::BufferString(v1, (const unsigned __int8 *)"0000000000000000000000000000000000000000000000000000000000000000\r", 0x41uLL);
      while (v2++ < 7);
      return TBufferedStreamingContext::BufferString(v1, "cleartomark\r", 0xCuLL);
    }
  }
  return this;
}

uint64_t TBufferedStreamingContext::BufferPSString(TBufferedStreamingContext *this, const unsigned __int8 *a2, int a3)
{
  unsigned int v6;
  unsigned int v7;
  unsigned __int8 *v9;
  TBufferedStreamingContext *v10;
  unint64_t v11;
  uint64_t v12;
  unsigned __int8 v14;
  __int16 v15;
  char v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  char v19;
  unsigned __int8 v20;

  v17 = 40;
  TBufferedStreamingContext::BufferString((uint64_t)this, &v17, 1uLL);
  for (; a3; --a3)
  {
    v7 = *a2++;
    v6 = v7;
    if (v7 - 32 > 0x5E)
    {
      v16 = -86;
      v15 = -21846;
      v12 = 3;
      v14 = 92;
      do
      {
        *(&v14 + v12) = v6 & 7 | 0x30;
        v6 >>= 3;
        --v12;
      }
      while (v12);
      v9 = &v14;
      v10 = this;
      v11 = 4;
    }
    else
    {
      if (v6 - 40 <= 0x34 && ((1 << (v6 - 40)) & 0x10000000000003) != 0)
      {
        v18 = 92;
        TBufferedStreamingContext::BufferString((uint64_t)this, &v18, 1uLL);
      }
      v19 = v6;
      v9 = (unsigned __int8 *)&v19;
      v10 = this;
      v11 = 1;
    }
    TBufferedStreamingContext::BufferString((uint64_t)v10, v9, v11);
  }
  v20 = 41;
  return TBufferedStreamingContext::BufferString((uint64_t)this, &v20, 1uLL);
}

uint64_t TBufferedStreamingContext::BufferInt(TBufferedStreamingContext *this, unsigned int a2)
{
  unint64_t *v2;
  BOOL v3;
  const unsigned __int8 *v4;
  char *v5;
  char v6;
  char v8;
  unint64_t v9;
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v10 = -1431655766;
  v9 = 0xAAAAAAAAAAAAAAAALL;
  v2 = (unint64_t *)&v8;
  do
  {
    *((_BYTE *)v2 + 1) = (a2 % 0xA) | 0x30;
    v2 = (unint64_t *)((char *)v2 + 1);
    v3 = a2 > 9;
    a2 /= 0xAu;
  }
  while (v3);
  v4 = (const unsigned __int8 *)this + 67;
  LOBYTE(v5) = (_BYTE)this + 67;
  if (v2 >= &v9)
  {
    v5 = (char *)this + 67;
    do
    {
      v6 = *(_BYTE *)v2;
      v2 = (unint64_t *)((char *)v2 - 1);
      *v5++ = v6;
    }
    while (v2 >= &v9);
  }
  *((_BYTE *)this + 66) = (_BYTE)v5 - (_BYTE)v4;
  return TBufferedStreamingContext::BufferString((uint64_t)this, v4, ((_BYTE)v5 - (_BYTE)v4));
}

uint64_t TBufferedStreamingContext::BufferUnitEmFixed(TBufferedStreamingContext *this, int a2)
{
  unsigned __int8 v5;

  v5 = 32;
  TBufferedStreamingContext::BufferString((uint64_t)this, &v5, 1uLL);
  FixedToPString(a2 / 1000, 3, (unsigned __int8 *)this + 66);
  return TBufferedStreamingContext::BufferString((uint64_t)this, (const unsigned __int8 *)this + 67, *((unsigned __int8 *)this + 66));
}

uint64_t TBufferedCharStringStreamingContext::TBufferedCharStringStreamingContext(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  *(_QWORD *)a1 = &off_1E61B63B8;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a3;
  *(_QWORD *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
  *(_QWORD *)(a1 + 32) = a4;
  *(_QWORD *)(a1 + 40) = operator new[]();
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 62) = 0;
  *(_QWORD *)a1 = off_1E61B63D8;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
  memcpy((void *)(a1 + 160), (const void *)(v7 + 88), 0x168uLL);
  *(_WORD *)(a1 + 522) = -1;
  *(_BYTE *)(a1 + 528) = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 176))(*(_QWORD *)(a1 + 8), a1 + 524);
  return a1;
}

void sub_1B09B7D00(_Unwind_Exception *a1)
{
  TBufferedStreamingContext *v1;
  void **v2;
  void **v3;
  void *v5;

  v3 = v2;
  v5 = *v3;
  if (*v3)
  {
    *((_QWORD *)v1 + 18) = v5;
    operator delete(v5);
  }
  TBufferedStreamingContext::~TBufferedStreamingContext(v1);
  _Unwind_Resume(a1);
}

void TBufferedCharStringStreamingContext::~TBufferedCharStringStreamingContext(TBufferedCharStringStreamingContext *this)
{
  void *v2;

  *(_QWORD *)this = off_1E61B63D8;
  v2 = (void *)*((_QWORD *)this + 17);
  if (v2)
  {
    *((_QWORD *)this + 18) = v2;
    operator delete(v2);
  }
  TBufferedStreamingContext::~TBufferedStreamingContext(this);
}

uint64_t TBufferedCharStringStreamingContext::BufferBlueValues(uint64_t this, const unsigned __int8 *a2, int a3)
{
  uint64_t v3;
  int v4;
  uint64_t v7;
  int v8;
  uint64_t v9;
  unsigned __int8 *v10;
  const unsigned __int8 *v11;
  int v12;
  char v13;
  int i;
  signed int v15;
  unsigned int v16;
  unsigned __int8 *v17;
  unsigned __int8 v18;
  unsigned __int8 v19;

  v3 = *(_QWORD *)(this + 24);
  v4 = *(unsigned __int16 *)(v3 + 66);
  if (!*(_WORD *)(v3 + 66))
    return this;
  v7 = this;
  v8 = 0;
  v9 = this + 320;
  v17 = (unsigned __int8 *)(a2 + 1);
  v10 = (unsigned __int8 *)(this + 66);
  v11 = (const unsigned __int8 *)(this + 67);
  v12 = 1;
  v13 = 1;
  while (2)
  {
    v9 += 8;
    for (i = v12; ; i *= 2)
    {
      v12 = 2 * i;
      if (!(_WORD)v8)
        break;
      if (((*(_DWORD *)(v3 + 32) & i) == 0) != a3)
        goto LABEL_10;
LABEL_8:
      ++v8;
      v9 += 8;
      if (v4 <= (__int16)v8)
      {
        if ((v13 & 1) != 0)
          return this;
        return TBufferedStreamingContext::BufferString(v7, "] def\r", 6uLL);
      }
    }
    if ((a3 & 1) != 0)
      goto LABEL_8;
LABEL_10:
    if ((v13 & 1) != 0)
      TBufferedStreamingContext::BufferString(v7, v17, *a2);
    v15 = *(_DWORD *)(v9 - 8);
    if (*(_DWORD *)(v9 - 4) >= v15)
      v16 = *(_DWORD *)(v9 - 8);
    else
      v16 = *(_DWORD *)(v9 - 4);
    FixedToPString(v16, 3, v10);
    TBufferedStreamingContext::BufferString(v7, v11, *(unsigned __int8 *)(v7 + 66));
    v18 = 32;
    TBufferedStreamingContext::BufferString(v7, &v18, 1uLL);
    FixedToPString(v15, 3, v10);
    TBufferedStreamingContext::BufferString(v7, v11, *(unsigned __int8 *)(v7 + 66));
    v19 = 32;
    this = TBufferedStreamingContext::BufferString(v7, &v19, 1uLL);
    v13 = 0;
    v3 = *(_QWORD *)(v7 + 24);
    ++v8;
    v4 = *(unsigned __int16 *)(v3 + 66);
    if (v4 > (__int16)v8)
      continue;
    return TBufferedStreamingContext::BufferString(v7, "] def\r", 6uLL);
  }
}

uint64_t TBufferedCharStringStreamingContext::BufferFamilyBlues(uint64_t this, const unsigned __int8 *a2, int a3)
{
  uint64_t v3;
  int v4;
  uint64_t v7;
  int v8;
  uint64_t v9;
  unsigned __int8 *v10;
  const unsigned __int8 *v11;
  int v12;
  char v13;
  int i;
  signed int v15;
  unsigned int v16;
  unsigned __int8 *v17;
  unsigned __int8 v18;
  unsigned __int8 v19;

  v3 = *(_QWORD *)(this + 24);
  v4 = *(unsigned __int16 *)(v3 + 68);
  if (!*(_WORD *)(v3 + 68))
    return this;
  v7 = this;
  v8 = 0;
  v9 = this + 416;
  v17 = (unsigned __int8 *)(a2 + 1);
  v10 = (unsigned __int8 *)(this + 66);
  v11 = (const unsigned __int8 *)(this + 67);
  v12 = 1;
  v13 = 1;
  while (2)
  {
    v9 += 8;
    for (i = v12; ; i *= 2)
    {
      v12 = 2 * i;
      if (!(_WORD)v8)
        break;
      if (((*(_DWORD *)(v3 + 36) & i) == 0) != a3)
        goto LABEL_10;
LABEL_8:
      ++v8;
      v9 += 8;
      if (v4 <= (__int16)v8)
      {
        if ((v13 & 1) != 0)
          return this;
        return TBufferedStreamingContext::BufferString(v7, "] def\r", 6uLL);
      }
    }
    if ((a3 & 1) != 0)
      goto LABEL_8;
LABEL_10:
    if ((v13 & 1) != 0)
      TBufferedStreamingContext::BufferString(v7, v17, *a2);
    v15 = *(_DWORD *)(v9 - 8);
    if (*(_DWORD *)(v9 - 4) >= v15)
      v16 = *(_DWORD *)(v9 - 8);
    else
      v16 = *(_DWORD *)(v9 - 4);
    FixedToPString(v16, 3, v10);
    TBufferedStreamingContext::BufferString(v7, v11, *(unsigned __int8 *)(v7 + 66));
    v18 = 32;
    TBufferedStreamingContext::BufferString(v7, &v18, 1uLL);
    FixedToPString(v15, 3, v10);
    TBufferedStreamingContext::BufferString(v7, v11, *(unsigned __int8 *)(v7 + 66));
    v19 = 32;
    this = TBufferedStreamingContext::BufferString(v7, &v19, 1uLL);
    v13 = 0;
    v3 = *(_QWORD *)(v7 + 24);
    ++v8;
    v4 = *(unsigned __int16 *)(v3 + 68);
    if (v4 > (__int16)v8)
      continue;
    return TBufferedStreamingContext::BufferString(v7, "] def\r", 6uLL);
  }
}

uint64_t TBufferedCharStringStreamingContext::BufferStdW(uint64_t this)
{
  uint64_t v1;
  unsigned int v2;
  unsigned int v3;

  v1 = this;
  v2 = *(_DWORD *)(this + 176);
  if (v2)
  {
    TBufferedStreamingContext::BufferString(this, (const unsigned __int8 *)"/StdHW [", 8uLL);
    FixedToPString(v2, 3, (unsigned __int8 *)(v1 + 66));
    TBufferedStreamingContext::BufferString(v1, (const unsigned __int8 *)(v1 + 67), *(unsigned __int8 *)(v1 + 66));
    this = TBufferedStreamingContext::BufferString(v1, "] def\r", 6uLL);
  }
  v3 = *(_DWORD *)(v1 + 180);
  if (v3)
  {
    TBufferedStreamingContext::BufferString(v1, (const unsigned __int8 *)"/StdVW [", 8uLL);
    FixedToPString(v3, 3, (unsigned __int8 *)(v1 + 66));
    TBufferedStreamingContext::BufferString(v1, (const unsigned __int8 *)(v1 + 67), *(unsigned __int8 *)(v1 + 66));
    return TBufferedStreamingContext::BufferString(v1, "] def\r", 6uLL);
  }
  return this;
}

uint64_t TBufferedCharStringStreamingContext::BufferBlueStuff(uint64_t this)
{
  uint64_t v1;
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;

  v1 = this;
  v2 = *(_DWORD *)(this + 308);
  if (v2 != 2597)
  {
    TBufferedStreamingContext::BufferString(this, (const unsigned __int8 *)"/BlueScale ", 0xBuLL);
    FixedToPString(v2, 6, (unsigned __int8 *)(v1 + 66));
    TBufferedStreamingContext::BufferString(v1, (const unsigned __int8 *)(v1 + 67), *(unsigned __int8 *)(v1 + 66));
    this = TBufferedStreamingContext::BufferString(v1, " def\r", 5uLL);
  }
  v3 = *(_DWORD *)(v1 + 312);
  if (v3 != 0x10000)
  {
    TBufferedStreamingContext::BufferString(v1, (const unsigned __int8 *)"/BlueFuzz ", 0xAuLL);
    FixedToPString(v3, 6, (unsigned __int8 *)(v1 + 66));
    TBufferedStreamingContext::BufferString(v1, (const unsigned __int8 *)(v1 + 67), *(unsigned __int8 *)(v1 + 66));
    this = TBufferedStreamingContext::BufferString(v1, " def\r", 5uLL);
  }
  v4 = *(_DWORD *)(v1 + 316);
  if (v4 != 458752)
  {
    TBufferedStreamingContext::BufferString(v1, (const unsigned __int8 *)"/BlueShift ", 0xBuLL);
    FixedToPString(v4, 2, (unsigned __int8 *)(v1 + 66));
    TBufferedStreamingContext::BufferString(v1, (const unsigned __int8 *)(v1 + 67), *(unsigned __int8 *)(v1 + 66));
    return TBufferedStreamingContext::BufferString(v1, " def\r", 5uLL);
  }
  return this;
}

uint64_t TBufferedCharStringStreamingContext::BufferForceBold(uint64_t this)
{
  int v1;
  const char *v2;
  unint64_t v3;

  v1 = *(_DWORD *)(this + 516);
  if ((v1 & 2) != 0)
  {
    if ((v1 & 1) != 0)
    {
      v2 = "/ForceBold true def\r";
      v3 = 20;
    }
    else
    {
      v2 = "/ForceBold false def\r";
      v3 = 21;
    }
    return TBufferedStreamingContext::BufferString(this, (const unsigned __int8 *)v2, v3);
  }
  return this;
}

uint64_t TBufferedCharStringStreamingContext::BufferStemSnap(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  unsigned __int8 v10;

  v1 = this;
  v2 = *(_QWORD *)(this + 24);
  v3 = *(unsigned __int16 *)(v2 + 62);
  if (*(_WORD *)(v2 + 62))
  {
    TBufferedStreamingContext::BufferString(this, "/StemSnapH [", 0xCuLL);
    v4 = 0;
    v5 = 4 * v3;
    do
    {
      FixedToPString(*(_DWORD *)(v1 + v4 + 212), 3, (unsigned __int8 *)(v1 + 66));
      TBufferedStreamingContext::BufferString(v1, (const unsigned __int8 *)(v1 + 67), *(unsigned __int8 *)(v1 + 66));
      v9 = 32;
      TBufferedStreamingContext::BufferString(v1, &v9, 1uLL);
      v4 += 4;
    }
    while (v5 != v4);
    this = TBufferedStreamingContext::BufferString(v1, "] def\r", 6uLL);
    v2 = *(_QWORD *)(v1 + 24);
  }
  v6 = *(unsigned __int16 *)(v2 + 64);
  if (*(_WORD *)(v2 + 64))
  {
    TBufferedStreamingContext::BufferString(v1, "/StemSnapV [", 0xCuLL);
    v7 = 0;
    v8 = 4 * v6;
    do
    {
      FixedToPString(*(_DWORD *)(v1 + v7 + 260), 3, (unsigned __int8 *)(v1 + 66));
      TBufferedStreamingContext::BufferString(v1, (const unsigned __int8 *)(v1 + 67), *(unsigned __int8 *)(v1 + 66));
      v10 = 32;
      TBufferedStreamingContext::BufferString(v1, &v10, 1uLL);
      v7 += 4;
    }
    while (v8 != v7);
    return TBufferedStreamingContext::BufferString(v1, "] def\r", 6uLL);
  }
  return this;
}

uint64_t TBufferedCharStringStreamingContext::BufferSubrs(TBufferedCharStringStreamingContext *this)
{
  __int128 v2;
  uint64_t v3;
  int v4;
  char v5;
  uint64_t v6;
  int v7;
  char v8;
  uint64_t v9;
  int v10;
  char v11;
  uint64_t v12;
  int v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  char v18;
  uint64_t v19;
  int v20;
  char v21;
  unsigned __int8 v23[4];
  _BYTE v24[24];
  __int128 v25;
  __int128 v26;
  int v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v27 = -1431655766;
  *(_QWORD *)&v2 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v2 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v26 = v2;
  v25 = v2;
  *(_OWORD *)&v24[8] = v2;
  TBufferedStreamingContext::BufferString((uint64_t)this, (const unsigned __int8 *)"/Subrs 5 array\r", 0xFuLL);
  TBufferedStreamingContext::BufferString((uint64_t)this, (const unsigned __int8 *)"dup 0 15 RD ", 0xCuLL);
  v3 = 0;
  *(_DWORD *)v23 = 0;
  *(_QWORD *)v24 = 0x110C110C100C8B8ELL;
  *(_DWORD *)&v24[7] = 186715153;
  v4 = 4330;
  do
  {
    v5 = BYTE1(v4);
    v4 = 22719 - 12691 * (v4 + (v23[v3] ^ ((unsigned __int16)(v4 & 0xFF00) >> 8)));
    v23[v3++] ^= v5;
  }
  while (v3 != 15);
  TBufferedStreamingContext::BufferString((uint64_t)this, v23, 0xFuLL);
  TBufferedStreamingContext::BufferString((uint64_t)this, " NP\r", 4uLL);
  TBufferedStreamingContext::BufferString((uint64_t)this, (const unsigned __int8 *)"dup 1 9 RD ", 0xBuLL);
  v6 = 0;
  *(_DWORD *)v23 = 0;
  *(_DWORD *)v24 = 269257867;
  v24[4] = 11;
  v7 = 4330;
  do
  {
    v8 = BYTE1(v7);
    v7 = 22719 - 12691 * (v7 + (v23[v6] ^ ((unsigned __int16)(v7 & 0xFF00) >> 8)));
    v23[v6++] ^= v8;
  }
  while (v6 != 9);
  TBufferedStreamingContext::BufferString((uint64_t)this, v23, 9uLL);
  TBufferedStreamingContext::BufferString((uint64_t)this, " NP\r", 4uLL);
  TBufferedStreamingContext::BufferString((uint64_t)this, (const unsigned __int8 *)"dup 2 9 RD ", 0xBuLL);
  v9 = 0;
  *(_DWORD *)v23 = 0;
  *(_DWORD *)v24 = 269258123;
  v24[4] = 11;
  v10 = 4330;
  do
  {
    v11 = BYTE1(v10);
    v10 = 22719 - 12691 * (v10 + (v23[v9] ^ ((unsigned __int16)(v10 & 0xFF00) >> 8)));
    v23[v9++] ^= v11;
  }
  while (v9 != 9);
  TBufferedStreamingContext::BufferString((uint64_t)this, v23, 9uLL);
  TBufferedStreamingContext::BufferString((uint64_t)this, " NP\r", 4uLL);
  TBufferedStreamingContext::BufferString((uint64_t)this, (const unsigned __int8 *)"dup 3 5 RD ", 0xBuLL);
  v12 = 0;
  *(_DWORD *)v23 = 0;
  v24[0] = 11;
  v13 = 4330;
  do
  {
    v14 = BYTE1(v13);
    v13 = 22719 - 12691 * (v13 + (v23[v12] ^ ((unsigned __int16)(v13 & 0xFF00) >> 8)));
    v23[v12++] ^= v14;
  }
  while (v12 != 5);
  TBufferedStreamingContext::BufferString((uint64_t)this, v23, 5uLL);
  TBufferedStreamingContext::BufferString((uint64_t)this, " NP\r", 4uLL);
  if (*((_DWORD *)this + 131) == 1)
  {
    v15 = 12;
    TBufferedStreamingContext::BufferString((uint64_t)this, (const unsigned __int8 *)"dup 4 12 RD ", 0xCuLL);
    v16 = 0;
    *(_DWORD *)v23 = 0;
    *(_QWORD *)v24 = 0xB0A110C100C8E8CLL;
    v17 = 4330;
    do
    {
      v18 = BYTE1(v17);
      v17 = 22719 - 12691 * (v17 + (v23[v16] ^ ((unsigned __int16)(v17 & 0xFF00) >> 8)));
      v23[v16++] ^= v18;
    }
    while (v16 != 12);
  }
  else
  {
    TBufferedStreamingContext::BufferString((uint64_t)this, (const unsigned __int8 *)"dup 4 13 RD ", 0xCuLL);
    v19 = 0;
    *(_DWORD *)v23 = 0;
    *(_QWORD *)v24 = 0xA110C100C8E8C8ELL;
    v24[8] = 11;
    v20 = 4330;
    v15 = 13;
    do
    {
      v21 = BYTE1(v20);
      v20 = 22719 - 12691 * (v20 + (v23[v19] ^ ((unsigned __int16)(v20 & 0xFF00) >> 8)));
      v23[v19++] ^= v21;
    }
    while (v19 != 13);
  }
  TBufferedStreamingContext::BufferString((uint64_t)this, v23, v15);
  TBufferedStreamingContext::BufferString((uint64_t)this, " NP\r", 4uLL);
  return TBufferedStreamingContext::BufferString((uint64_t)this, (const unsigned __int8 *)"ND\r", 3uLL);
}

uint64_t TBufferedCharStringStreamingContext::StreamCharHeader(uint64_t a1, uint64_t a2, unsigned int a3)
{
  unsigned __int8 *v5;
  BOOL v6;
  BOOL v7;
  const unsigned __int8 *v8;
  _BYTE *v9;
  char v10;
  char v12;
  unsigned __int8 v13[16];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  TBufferedStreamingContext::BufferString(a1, *(const unsigned __int8 **)(a2 + 264), *(_QWORD *)(a2 + 272));
  v13[0] = 32;
  TBufferedStreamingContext::BufferString(a1, v13, 1uLL);
  memset(v13, 170, 12);
  v5 = (unsigned __int8 *)&v12;
  do
  {
    *++v5 = (a3 % 0xA) | 0x30;
    v6 = a3 >= 9;
    v7 = a3 == 9;
    a3 /= 0xAu;
  }
  while (!v7 && v6);
  v8 = (const unsigned __int8 *)(a1 + 67);
  LOBYTE(v9) = a1 + 67;
  if (v5 >= v13)
  {
    v9 = (_BYTE *)(a1 + 67);
    do
    {
      v10 = *v5--;
      *v9++ = v10;
    }
    while (v5 >= v13);
  }
  *(_BYTE *)(a1 + 66) = (_BYTE)v9 - (_BYTE)v8;
  TBufferedStreamingContext::BufferString(a1, v8, ((_BYTE)v9 - (_BYTE)v8));
  TBufferedStreamingContext::BufferString(a1, (const unsigned __int8 *)" RD ", 4uLL);
  return TBufferedStreamingContext::StreamBuffer(a1);
}

uint64_t TBufferedCharStringStreamingContext::BufferCharBuffer(uint64_t this)
{
  const unsigned __int8 *v1;
  const unsigned __int8 *v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(const unsigned __int8 **)(this + 136);
  v2 = *(const unsigned __int8 **)(this + 144);
  if (v2 != v1)
  {
    v3 = this;
    TBufferedStreamingContext::BufferString(this, v1, v2 - v1);
    this = TBufferedStreamingContext::StreamBuffer(v3);
    v4 = *(_QWORD *)(v3 + 136);
    if (*(_QWORD *)(v3 + 144) != v4)
      *(_QWORD *)(v3 + 144) = v4;
  }
  return this;
}

char *TBufferedCharStringStreamingContext::CharBufferAndEncrypt(TBufferedCharStringStreamingContext *this, char *__src, unsigned int a3)
{
  char *v5;
  char *v6;
  uint64_t v7;
  int64_t v8;
  char *result;
  __int16 v10;
  unsigned __int8 *v11;
  int v12;

  v7 = *((_QWORD *)this + 17);
  v5 = (char *)*((_QWORD *)this + 18);
  v6 = (char *)this + 136;
  v8 = a3;
  result = std::vector<unsigned char>::__insert_with_size[abi:fe180100]<unsigned char const*,unsigned char const*>((uint64_t)this + 136, v5, __src, &__src[v8], v8);
  v10 = *((_WORD *)v6 + 192);
  if (a3)
  {
    v11 = (unsigned __int8 *)(*(_QWORD *)v6 + ((_DWORD)v5 - v7));
    do
    {
      v12 = *v11 ^ ((unsigned __int16)(v10 & 0xFF00) >> 8);
      *v11++ ^= (unsigned __int16)(v10 & 0xFF00) >> 8;
      v10 = 22719 - 12691 * (v10 + v12);
      --v8;
    }
    while (v8);
  }
  *((_WORD *)this + 260) = v10;
  return result;
}

char *TBufferedCharStringStreamingContext::BufferCharData(TBufferedCharStringStreamingContext *this, unsigned int a2, int a3, int *a4)
{
  __int128 v4;
  _BYTE *v5;
  int v6;
  int v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;
  int64_t v12;
  __int16 v13;
  unsigned __int8 *v14;
  int64_t v15;
  int v16;
  _WORD *exception;
  _OWORD v19[3];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (a3 >= 7)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E61B2D68;
    exception[4] = 5;
  }
  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v19[1] = v4;
  v19[2] = v4;
  v19[0] = v4;
  v5 = v19;
  if (a3 >= 1)
  {
    do
    {
      v7 = *a4++;
      v6 = v7;
      if ((v7 + 7012352) >> 16 > 0xD6)
      {
        if ((v6 - 7077888) >> 26)
        {
          if ((v6 + 74121216) >> 26)
          {
            *v5 = -1;
            v5[1] = v6 >> 31;
            v5[2] = v6 >> 31;
            v5[3] = HIBYTE(v6);
            v5[4] = BYTE2(v6);
            v5 += 5;
            goto LABEL_11;
          }
          v8 = -((v6 + 7077888) >> 16);
          v9 = (v8 >> 8) - 5;
        }
        else
        {
          v8 = HIWORD(v6) - 108;
          v9 = (v8 >> 8) - 9;
        }
        *v5 = v9;
        v5[1] = v8;
        v5 += 2;
      }
      else
      {
        *v5++ = BYTE2(v6) - 117;
      }
LABEL_11:
      v10 = (unsigned __int16)a3--;
    }
    while (v10 > 1);
  }
  if (a2 < 0x20)
  {
    v11 = (_DWORD)v5 + 1;
  }
  else
  {
    v11 = (_DWORD)v5 + 2;
    v5[1] = a2 - 32;
    LOBYTE(a2) = 12;
  }
  *v5 = a2;
  v12 = v11 - v19;
  if ((*((__int16 *)this + 261) & 0x80000000) == 0)
  {
    v13 = *((_WORD *)this + 260);
    if (v11 != v19)
    {
      v14 = (unsigned __int8 *)v19;
      v15 = v12;
      do
      {
        v16 = *v14 ^ ((unsigned __int16)(v13 & 0xFF00) >> 8);
        *v14++ ^= (unsigned __int16)(v13 & 0xFF00) >> 8;
        v13 = 22719 - 12691 * (v13 + v16);
        --v15;
      }
      while (v15);
    }
    *((_WORD *)this + 260) = v13;
  }
  return std::vector<unsigned char>::__insert_with_size[abi:fe180100]<unsigned char const*,unsigned char const*>((uint64_t)this + 136, *((char **)this + 18), (char *)v19, (char *)v19 + v12, v12);
}

uint64_t TBufferedCharStringStreamingContext::BlendVal(uint64_t this, int *a2, int a3)
{
  int v3;
  uint64_t v4;

  if (a3)
  {
    do
    {
      --a3;
      v3 = *a2++;
      v4 = *(int *)(this + 648);
      *(_DWORD *)(this + 648) = v4 + 1;
      *(_DWORD *)(this + 4 * v4 + 552) = v3;
    }
    while ((_WORD)a3);
  }
  return this;
}

unint64_t TBufferedCharStringStreamingContext::GetStreamableSubrData(TBufferedCharStringStreamingContext *this, int a2, unsigned int *a3)
{
  uint64_t v6;
  BOOL v7;
  unint64_t v8;
  int v9;
  int v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  BOOL v14;
  const unsigned __int8 *v15;
  unint64_t v16;
  const unsigned __int8 *v17;
  unsigned int v19;
  int v20;
  unint64_t result;
  uint64_t v22;
  unint64_t v23;
  BOOL v24;
  _WORD *exception;
  unint64_t v27;
  _WORD v28[5];

  memset(v28, 170, sizeof(v28));
  v27 = 0xAAAAAAAAAAAAAAAALL;
  v6 = (*(uint64_t (**)(_QWORD, unint64_t *, _WORD *, _WORD *))(**((_QWORD **)this + 1) + 136))(*((_QWORD *)this + 1), &v27, v28, &v28[1]);
  if (v6)
    v7 = v27 == 0;
  else
    v7 = 1;
  if (v7)
    goto LABEL_22;
  v8 = v6;
  v9 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 144))(*((_QWORD *)this + 1));
  v10 = v28[0];
  v11 = v10 + v10 * v9;
  v12 = *(_QWORD *)&v28[1];
  v13 = v27 + v11;
  v14 = v13 < v27 || v13 > *(_QWORD *)&v28[1];
  if (v14 || v28[0] * a2 < 0)
    goto LABEL_22;
  v15 = (const unsigned __int8 *)(v27 + v28[0] * a2);
  v16 = v27 + v11;
  v17 = &v15[2 * v28[0]];
  if (v17 < v15 || (unint64_t)v17 > v16)
    goto LABEL_22;
  v19 = BytesToCard(v15, v28[0]);
  v20 = BytesToCard(&v15[v10], v10);
  result = v8 + v19 - 1;
  v22 = v20 - v19;
  *a3 = v22;
  v23 = result + v22;
  v24 = v8 <= result && v23 >= result;
  if (!v24 || v23 > v12)
  {
LABEL_22:
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E61B2D68;
    exception[4] = 5;
  }
  return result;
}

uint64_t TBufferedCharStringStreamingContext::ProcessCharString(uint64_t this, const unsigned __int8 *a2, int a3, int a4)
{
  int32x2_t *v5;
  uint64_t v6;
  __int128 v7;
  unint64_t v8;
  __int16 v9;
  const unsigned __int8 *v10;
  uint64_t v11;
  const unsigned __int8 *v12;
  unsigned int v13;
  __int32 v14;
  int v15;
  unsigned int v16;
  int32x2_t v17;
  int32x2_t v18;
  int32x2_t v19;
  __int32 v20;
  int v21;
  unsigned int v22;
  __int32 v23;
  int v24;
  __int32 v25;
  int v26;
  int32x2_t v27;
  int8x8_t v28;
  const unsigned __int8 *v29;
  int v30;
  __int32 v31;
  int v32;
  __int32 v33;
  uint64_t v34;
  uint64_t v35;
  __int32 v36;
  __int32 v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  BOOL v43;
  BOOL v44;
  BOOL v45;
  unsigned __int32 v46;
  unsigned __int32 v47;
  unsigned __int32 v48;
  unsigned __int32 v49;
  __int32 v50;
  int v51;
  unsigned int v52;
  unsigned __int32 v53;
  __int32 v54;
  int v55;
  __int32 v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  __int32 v60;
  unsigned int v61;
  int32x2_t v62;
  int32x2_t v63;
  int32x2_t v64;
  int32x2_t v65;
  __int128 v66;
  int32x2_t v67;
  int32x2_t v68;
  int32x4_t v69;
  __int32 v70;
  int v71;
  uint64_t v72;
  __int32 v73;
  int v74;
  int v75;
  int v76;
  unsigned int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unsigned int v81;
  const unsigned __int8 *v82;
  int32x4_t v83;
  int32x4_t v84;
  int8x16_t v85;
  int8x16_t v86;
  __int32 v87;
  int32x2_t *v88;
  int v89;
  __int32 v90;
  unsigned int v91;
  __int32 v92;
  __int32 v93;
  int32x2_t *v94;
  __int32 v95;
  __int32 v96;
  unsigned int v97;
  unsigned __int32 v98;
  int *v99;
  __int32 v100;
  uint64_t v101;
  __int32 v102;
  unsigned __int32 v103;
  char *v104;
  uint64_t v105;
  int v106;
  __int32 v107;
  unsigned int v108;
  int32x2_t *v109;
  int v110;
  unsigned __int32 v111;
  unsigned int v112;
  int v113;
  uint64_t v114;
  int v115;
  int v116;
  unsigned int v117;
  int v118;
  _DWORD *v119;
  int *v120;
  __int32 v121;
  int v122;
  int32x2_t *v123;
  __int32 v124;
  int v125;
  __int32 v126;
  int v127;
  int v128;
  BOOL v129;
  int v130;
  int v131;
  int v132;
  __int32 v133;
  int v134;
  unsigned __int32 v135;
  char *v136;
  int v137;
  int v138;
  __int32 v139;
  int32x2_t *v140;
  int v141;
  unsigned __int32 v142;
  double v143;
  __int32 v144;
  int v145;
  int v146;
  int32x2_t v147;
  int v148;
  unsigned int v149;
  __int32 v150;
  __int32 v151;
  unsigned int v152;
  __int32 v153;
  int v154;
  __int32 v155;
  _WORD *v156;
  _WORD *v157;
  _WORD *v158;
  _WORD *v159;
  _WORD *v160;
  _WORD *v161;
  _WORD *v162;
  _WORD *v163;
  _WORD *v164;
  _WORD *v165;
  _WORD *v166;
  _WORD *v167;
  _WORD *v168;
  _WORD *v169;
  _WORD *exception;
  _WORD *v171;
  _WORD *v172;
  _WORD *v173;
  _WORD *v174;
  _WORD *v175;
  _WORD *v176;
  _WORD *v177;
  _WORD *v178;
  _WORD *v179;
  _WORD *v180;
  _WORD *v181;
  _WORD *v182;
  _WORD *v183;
  _WORD *v184;
  _WORD *v185;
  _WORD *v186;
  _WORD *v187;
  _WORD *v188;
  _WORD *v189;
  _WORD *v190;
  _WORD *v191;
  _WORD *v192;
  _WORD *v193;
  _WORD *v194;
  _WORD *v195;
  _WORD *v196;
  _WORD *v197;
  _WORD *v198;
  _WORD *v199;
  _WORD *v200;
  _WORD *v201;
  _WORD *v202;
  _WORD *v203;
  _WORD *v204;
  _WORD *v205;
  _WORD *v206;
  _WORD *v207;
  _WORD *v208;
  uint64_t v209;
  unsigned int v210;
  _BYTE v211[32];
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  uint64_t v222;

  v222 = *MEMORY[0x1E0C80C00];
  if (a4 >= 11)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E61B2D68;
    exception[4] = 5;
  }
  v5 = (int32x2_t *)this;
  v6 = this + 552;
  *(_QWORD *)&v7 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v220 = v7;
  v221 = v7;
  v218 = v7;
  v219 = v7;
  if (a3)
    v8 = (unint64_t)&a2[a3];
  else
    v8 = 0xFFFFFFFFLL;
  v216 = v7;
  v217 = v7;
  v209 = this + 548;
  v214 = v7;
  v215 = v7;
  v212 = v7;
  v213 = v7;
  v9 = a4 + 1;
  *(_OWORD *)v211 = v7;
  *(_OWORD *)&v211[16] = v7;
  v10 = a2;
  while (2)
  {
    v11 = v5[81].u32[0];
    if (v11 >= 0x30)
    {
      v157 = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)v157 = &off_1E61B2D68;
      v157[4] = 5;
    }
    if (v10 < a2 || (v12 = v10 + 1, (unint64_t)(v10 + 1) > v8))
    {
      v156 = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)v156 = &off_1E61B2D68;
      v156[4] = 5;
    }
    v13 = *v10;
    switch(*v10)
    {
      case 1u:
        if ((_DWORD)v11 != 2)
        {
          v169 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v169 = &off_1E61B2D68;
          v169[4] = 5;
        }
        v25 = v5[69].i32[1];
        v5[81].i32[0] = 0;
        v26 = v5[69].i32[0] + v5[84].i32[0] + 0x8000;
        *(_DWORD *)v211 = (v26 & 0xFFFF0000) - v5[85].i32[0];
        *(_DWORD *)&v211[4] = ((v26 + v25) & 0xFFFF0000) - (v26 & 0xFFFF0000);
        this = (uint64_t)TBufferedCharStringStreamingContext::BufferCharData((TBufferedCharStringStreamingContext *)v5, 1u, 2, (int *)v211);
        goto LABEL_90;
      case 2u:
        v5[66].i8[1] = 0;
        v161 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v161 = &off_1E61B2D68;
        v161[4] = 5;
      case 3u:
        if ((_DWORD)v11 != 2)
        {
          v168 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v168 = &off_1E61B2D68;
          v168[4] = 5;
        }
        v23 = v5[69].i32[1];
        v5[81].i32[0] = 0;
        v24 = v5[69].i32[0] + v5[83].i32[1] + 0x8000;
        *(_DWORD *)v211 = (v24 & 0xFFFF0000) - v5[84].i32[1];
        *(_DWORD *)&v211[4] = ((v24 + v23) & 0xFFFF0000) - (v24 & 0xFFFF0000);
        this = (uint64_t)TBufferedCharStringStreamingContext::BufferCharData((TBufferedCharStringStreamingContext *)v5, 3u, 2, (int *)v211);
        goto LABEL_90;
      case 4u:
      case 7u:
        if ((_DWORD)v11 != 1)
        {
          v160 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v160 = &off_1E61B2D68;
          v160[4] = 5;
        }
        v5[81].i32[0] = 0;
        v14 = v5[83].i32[0];
        v15 = v5[82].i32[0] + v5[69].i32[0];
        v5[82].i32[0] = v15;
        v16 = (v15 + 0x8000) & 0xFFFF0000;
        v5[83].i32[0] = v16;
        *(_DWORD *)v211 = v16 - v14;
        this = (uint64_t)TBufferedCharStringStreamingContext::BufferCharData((TBufferedCharStringStreamingContext *)v5, v13, 1, (int *)v211);
        goto LABEL_90;
      case 5u:
      case 0x15u:
        if ((_DWORD)v11 != 2)
        {
          v159 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v159 = &off_1E61B2D68;
          v159[4] = 5;
        }
        v5[81].i32[0] = 0;
        v17 = vadd_s32(*(int32x2_t *)(v6 + 100), v5[69]);
        *(int32x2_t *)(v6 + 100) = v17;
        v18 = (int32x2_t)vand_s8((int8x8_t)vadd_s32(v17, (int32x2_t)0x800000008000), (int8x8_t)0xFFFF0000FFFF0000);
        v19 = *(int32x2_t *)(v6 + 108);
        *(int32x2_t *)(v6 + 108) = v18;
        *(int32x2_t *)v211 = vsub_s32(v18, v19);
        this = (uint64_t)TBufferedCharStringStreamingContext::BufferCharData((TBufferedCharStringStreamingContext *)v5, v13, 2, (int *)v211);
        goto LABEL_90;
      case 6u:
      case 0x16u:
        if ((_DWORD)v11 != 1)
        {
          v158 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v158 = &off_1E61B2D68;
          v158[4] = 5;
        }
        v5[81].i32[0] = 0;
        v20 = v5[82].i32[1];
        v21 = v5[81].i32[1] + v5[69].i32[0];
        v5[81].i32[1] = v21;
        v22 = (v21 + 0x8000) & 0xFFFF0000;
        v5[82].i32[1] = v22;
        *(_DWORD *)v211 = v22 - v20;
        this = (uint64_t)TBufferedCharStringStreamingContext::BufferCharData((TBufferedCharStringStreamingContext *)v5, v13, 1, (int *)v211);
        goto LABEL_90;
      case 8u:
        if ((_DWORD)v11 != 6)
        {
          v167 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v167 = &off_1E61B2D68;
          v167[4] = 5;
        }
        v5[81].i32[0] = 0;
        v62 = vadd_s32(*(int32x2_t *)(v6 + 100), v5[69]);
        v63 = (int32x2_t)vand_s8((int8x8_t)vadd_s32(v62, (int32x2_t)0x800000008000), (int8x8_t)0xFFFF0000FFFF0000);
        v64 = vadd_s32(v62, v5[70]);
        v65 = (int32x2_t)vand_s8((int8x8_t)vadd_s32(v64, (int32x2_t)0x800000008000), (int8x8_t)0xFFFF0000FFFF0000);
        *(int32x2_t *)v211 = vsub_s32(v63, *(int32x2_t *)(v6 + 108));
        *(int32x2_t *)&v211[8] = vsub_s32(v65, v63);
        *(int32x2_t *)&v66 = vadd_s32(v64, v5[71]);
        *((int8x8_t *)&v66 + 1) = vand_s8((int8x8_t)vadd_s32(*(int32x2_t *)&v66, (int32x2_t)0x800000008000), (int8x8_t)0xFFFF0000FFFF0000);
        *(_OWORD *)&v5[81].u8[4] = v66;
        *(int32x2_t *)&v211[16] = vsub_s32(*(int32x2_t *)((char *)&v66 + 8), v65);
        this = (uint64_t)TBufferedCharStringStreamingContext::BufferCharData((TBufferedCharStringStreamingContext *)v5, 8u, 6, (int *)v211);
        goto LABEL_90;
      case 9u:
        this = (uint64_t)TBufferedCharStringStreamingContext::BufferCharData((TBufferedCharStringStreamingContext *)v5, 9u, 0, (int *)v211);
        goto LABEL_90;
      case 0xAu:
        if (!(_DWORD)v11)
        {
          v166 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v166 = &off_1E61B2D68;
          v166[4] = 5;
        }
        LODWORD(v11) = v11 - 1;
        v5[81].i32[0] = v11;
        v71 = v5[69].i32[v11];
        v72 = (v71 >> 16);
        if (!v5[66].i8[0])
          goto LABEL_89;
        while (2)
        {
          if (v71 < 0x40000)
          {
            if (!(_DWORD)v72)
            {
              v78 = (int)v11 - 1;
              v5[81].i32[0] = v78;
              LODWORD(v78) = v5[69].i32[v78];
              v79 = (int)v11 - 2;
              v5[81].i32[0] = v79;
              LODWORD(v79) = v5[69].i32[v79];
              v80 = (int)v11 - 3;
              v5[81].i32[0] = v80;
              LODWORD(v80) = v5[69].i32[v80];
              v5[82].i32[0] = v78;
              v5[81].i32[1] = v79;
              LODWORD(v78) = (v78 + 0x8000) & 0xFFFF0000;
              v5[83].i32[0] = v78;
              v5[82].i32[1] = (v79 + 0x8000) & 0xFFFF0000;
              *(_DWORD *)v211 = v80;
              *(_DWORD *)&v211[4] = (v79 + 0x8000) & 0xFFFF0000;
              *(_DWORD *)&v211[8] = v78;
              *(_DWORD *)&v211[12] = 0;
              this = (uint64_t)TBufferedCharStringStreamingContext::BufferCharData((TBufferedCharStringStreamingContext *)v5, 0xAu, 4, (int *)v211);
              if (v5[66].i8[0])
                goto LABEL_90;
              v72 = 0;
              goto LABEL_89;
            }
            v76 = (_DWORD)v72 << 16;
          }
          else
          {
            if ((_DWORD)v72 != 4)
              goto LABEL_89;
            v73 = v5[65].i32[1];
            if (v73 == 1)
            {
              *(_QWORD *)v211 = 0x4000000030000;
              this = (uint64_t)TBufferedCharStringStreamingContext::BufferCharData((TBufferedCharStringStreamingContext *)v5, 0xAu, 2, (int *)v211);
              v11 = v5[81].i32[0] - 1;
              v5[81].i32[0] = v11;
              v71 = v5[69].i32[v11];
              v72 = (v71 >> 16);
              if (v71 >= 327680)
                goto LABEL_89;
              continue;
            }
            if (v73 != 2)
            {
              if (v5[66].i8[0])
              {
LABEL_87:
                if (v73)
                  goto LABEL_90;
              }
              v72 = 4;
              goto LABEL_89;
            }
            v76 = 0x40000;
            v72 = 4;
          }
          break;
        }
        *(_DWORD *)v211 = v76;
        this = (uint64_t)TBufferedCharStringStreamingContext::BufferCharData((TBufferedCharStringStreamingContext *)v5, 0xAu, 1, (int *)v211);
        if (v5[66].i8[0] && (int)v72 <= 4)
        {
          if ((_DWORD)v72 != 4)
            goto LABEL_90;
          v73 = v5[65].i32[1];
          goto LABEL_87;
        }
LABEL_89:
        v210 = -1431655766;
        v82 = (const unsigned __int8 *)(*(uint64_t (**)(int32x2_t *, uint64_t, unsigned int *))(*(_QWORD *)v5 + 48))(v5, v72, &v210);
        this = TBufferedCharStringStreamingContext::ProcessCharString((TBufferedCharStringStreamingContext *)v5, v82, v210, v9);
LABEL_90:
        v29 = v12;
        goto LABEL_91;
      case 0xBu:
        return this;
      case 0xCu:
        v29 = v10 + 2;
        if ((unint64_t)(v10 + 2) > v8)
        {
          v165 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v165 = &off_1E61B2D68;
          v165[4] = 5;
        }
        v30 = *v12;
        switch(*v12)
        {
          case 0u:
            this = (uint64_t)TBufferedCharStringStreamingContext::BufferCharData((TBufferedCharStringStreamingContext *)v5, 0x20u, 0, (int *)v211);
            goto LABEL_91;
          case 1u:
          case 2u:
            if ((_DWORD)v11 != 6)
            {
              v173 = __cxa_allocate_exception(0x10uLL);
              *(_QWORD *)v173 = &off_1E61B2D68;
              v173[4] = 5;
            }
            v5[81].i32[0] = 0;
            v31 = v5[69].i32[0];
            v32 = v5[69].i32[1];
            v33 = v5[70].i32[1];
            v34 = 170;
            if (v30 == 1)
              v34 = 169;
            v35 = 168;
            if (v30 == 1)
              v35 = 167;
            this = v5->u32[v35];
            v36 = v5->i32[v34];
            v37 = v5[71].i32[1];
            v38 = this + v31;
            v39 = this + v31 + v32;
            v40 = this + v5[70].i32[0];
            v41 = v40 + v33;
            v42 = this + v5[71].i32[0];
            if ((v32 & 0x80000000) == 0
              && v39 <= v40
              && (v33 & 0x80000000) == 0
              && v41 <= v42
              && (v37 & 0x80000000) == 0
              || v32 <= 0
              && (v39 >= v40 ? (v43 = v33 <= 0) : (v43 = 0),
                  v43 ? (v44 = v41 < v42) : (v44 = 1),
                  !v44 ? (v45 = v37 <= 0) : (v45 = 0),
                  v45))
            {
              v46 = ((v38 + 0x8000) & 0xFFFF0000) - v36;
              v47 = ((v39 + 0x8000) & 0xFFFF0000) - v36;
              v48 = ((v40 + 0x8000) & 0xFFFF0000) - v36;
              v49 = ((v41 + 0x8000) & 0xFFFF0000) - v36;
              *(_DWORD *)v211 = v46;
              *(_DWORD *)&v211[4] = v47 - v46;
              *(_DWORD *)&v211[8] = v48;
              *(_DWORD *)&v211[12] = v49 - v48;
              *(_DWORD *)&v211[16] = v49 + v48 - v47;
              *(_DWORD *)&v211[20] = v47 - v46;
              this = (uint64_t)TBufferedCharStringStreamingContext::BufferCharData((TBufferedCharStringStreamingContext *)v5, (v30 + 32), 6, (int *)v211);
            }
            goto LABEL_91;
          case 6u:
            if ((_DWORD)v11 != 5)
            {
              v186 = __cxa_allocate_exception(0x10uLL);
              *(_QWORD *)v186 = &off_1E61B2D68;
              v186[4] = 5;
            }
            v5[81].i32[0] = 0;
            v108 = (v5[70].i32[0] + 0x8000) & 0xFFFF0000;
            *(int8x8_t *)v211 = vand_s8((int8x8_t)vadd_s32(v5[69], (int32x2_t)0x800000008000), (int8x8_t)0xFFFF0000FFFF0000);
            *(_DWORD *)&v211[8] = v108;
            *(int8x8_t *)&v211[12] = vand_s8(*(int8x8_t *)(v6 + 12), (int8x8_t)0xFFFF0000FFFF0000);
            this = (uint64_t)TBufferedCharStringStreamingContext::BufferCharData((TBufferedCharStringStreamingContext *)v5, 0x26u, 5, (int *)v211);
            goto LABEL_91;
          case 7u:
            if ((_DWORD)v11 != 4)
            {
              v185 = __cxa_allocate_exception(0x10uLL);
              *(_QWORD *)v185 = &off_1E61B2D68;
              v185[4] = 5;
            }
            v5[81].i32[0] = 0;
            v83 = *(int32x4_t *)v6;
            v84.i64[0] = 0x800000008000;
            v84.i64[1] = 0x800000008000;
            v85.i64[0] = 0xFFFF0000FFFF0000;
            v85.i64[1] = 0xFFFF0000FFFF0000;
            v86 = vandq_s8((int8x16_t)vaddq_s32(*(int32x4_t *)v6, v84), v85);
            v83.i64[1] = v86.i64[0];
            *(int32x4_t *)&v5[83].u8[4] = v83;
            *(int32x4_t *)&v5[81].u8[4] = v83;
            *(int8x16_t *)v211 = v86;
            this = (uint64_t)TBufferedCharStringStreamingContext::BufferCharData((TBufferedCharStringStreamingContext *)v5, 0x27u, 4, (int *)v211);
            goto LABEL_91;
          case 0xAu:
            v87 = v11 - 1;
            v5[81].i32[0] = v11 - 1;
            v88 = v5 + 69;
            v107 = v5[68].i32[(int)v11 + 1];
            v90 = v11 - 2;
            v5[81].i32[0] = v90;
            v91 = v5[69].i32[v90] + v107;
            goto LABEL_109;
          case 0xBu:
            v87 = v11 - 1;
            v5[81].i32[0] = v11 - 1;
            v88 = v5 + 69;
            v92 = v5[68].i32[(int)v11 + 1];
            v90 = v11 - 2;
            v5[81].i32[0] = v90;
            v91 = v5[69].i32[v90] - v92;
            goto LABEL_109;
          case 0xCu:
            v93 = v11 - 1;
            if (v11 <= 1)
            {
              v184 = __cxa_allocate_exception(0x10uLL);
              *(_QWORD *)v184 = &off_1E61B2D68;
              v184[4] = 5;
            }
            v5[81].i32[0] = v93;
            v109 = v5 + 69;
            v110 = v5[69].i32[v93];
            v111 = v11 - 2;
            v5[81].i32[0] = v111;
            if (!v5[68].i8[4])
              goto LABEL_119;
            v110 >>= 16;
            goto LABEL_118;
          case 0x10u:
            v112 = v11 - 1;
            if (v11 > 1)
            {
              v5[81].i32[0] = v112;
              v113 = v5[69].i32[v112];
              switch(v113 >> 16)
              {
                case 0:
                case 1:
                case 2:
                case 12:
                case 13:
                  v114 = (v11 - 2);
                  v5[81].i32[0] = v114;
                  v115 = v5[69].i32[v114];
                  if (v115 < 0 || (v116 = v115 >> 16, (int)v114 < v115 >> 16))
                  {
                    v189 = __cxa_allocate_exception(0x10uLL);
                    *(_QWORD *)v189 = &off_1E61B2D68;
                    v189[4] = 5;
                  }
                  v117 = v113 & 0xFFFF0000;
                  v118 = v116 + 1;
                  *(_DWORD *)&v211[4 * (v116 + 1)] = v117;
                  *(_DWORD *)&v211[4 * v116] = v115 & 0xFFFF0000;
                  if (v115 >= 0x10000)
                  {
                    v119 = &v211[4 * (v116 - 1)];
                    v120 = (int *)(v209 + 4 * v114);
                    v121 = v11 - 3;
                    do
                    {
                      v5[81].i32[0] = v121;
                      v122 = *v120--;
                      *v119-- = v122;
                      --v118;
                      --v121;
                    }
                    while (v118 > 1);
                  }
                  this = (uint64_t)TBufferedCharStringStreamingContext::BufferCharData((TBufferedCharStringStreamingContext *)v5, 0x30u, (__int16)(HIWORD(v115) + 2), (int *)v211);
                  goto LABEL_91;
                case 3:
                  v150 = v11 - 2;
                  v5[81].i32[0] = v150;
                  if (v5[69].u16[2 * v150 + 1] << 16 != 0x10000)
                  {
                    v206 = __cxa_allocate_exception(0x10uLL);
                    *(_QWORD *)v206 = &off_1E61B2D68;
                    v206[4] = 5;
                  }
                  if (v5[66].i8[2])
                  {
                    *(_QWORD *)v211 = 0x1000000030000;
                    *(_DWORD *)&v211[8] = 196608;
                    TBufferedCharStringStreamingContext::BufferCharData((TBufferedCharStringStreamingContext *)v5, 0x30u, 3, (int *)v211);
                    TBufferedCharStringStreamingContext::BufferCharData((TBufferedCharStringStreamingContext *)v5, 0x31u, 0, (int *)v211);
                    this = (uint64_t)TBufferedCharStringStreamingContext::BufferCharData((TBufferedCharStringStreamingContext *)v5, 0xAu, 0, (int *)v211);
                  }
                  goto LABEL_91;
                case 4:
                  v5[81].i32[0] = v11 - 2;
                  if (v5[69].u16[2 * (v11 - 2) + 1] << 16 != 0x10000)
                  {
                    v208 = __cxa_allocate_exception(0x10uLL);
                    *(_QWORD *)v208 = &off_1E61B2D68;
                    v208[4] = 5;
                  }
                  if (v5[68].i8[4])
                    v5[68].i8[4] = 0;
                  v125 = v11 - 3;
                  goto LABEL_132;
                case 6:
                  v153 = v11 - 2;
                  v5[81].i32[0] = v153;
                  if (v5[69].i32[v153])
                  {
                    v207 = __cxa_allocate_exception(0x10uLL);
                    *(_QWORD *)v207 = &off_1E61B2D68;
                    v207[4] = 5;
                  }
                  *(_QWORD *)v211 = 0x6000000000000;
                  this = (uint64_t)TBufferedCharStringStreamingContext::BufferCharData((TBufferedCharStringStreamingContext *)v5, 0x30u, 2, (int *)v211);
                  goto LABEL_91;
                case 7:
                case 8:
                case 9:
                case 10:
                case 11:
                  v188 = __cxa_allocate_exception(0x10uLL);
                  *(_QWORD *)v188 = &off_1E61B2D68;
                  v188[4] = 5;
                case 14:
                case 15:
                case 16:
                case 17:
                case 18:
                  v126 = v11 - 2;
                  v5[81].i32[0] = v126;
                  v127 = v5[69].i32[v126];
                  if (v127 < 0
                    || (v128 = v127 >> 16,
                        v129 = __OFSUB__(v126, v127 >> 16),
                        v130 = v126 - (v127 >> 16),
                        (v130 < 0) ^ v129))
                  {
                    v190 = __cxa_allocate_exception(0x10uLL);
                    *(_QWORD *)v190 = &off_1E61B2D68;
                    v190[4] = 5;
                  }
                  v5[81].i32[0] = v130;
                  v131 = HIWORD(v113) - 13;
                  if (v113 >> 16 == 18)
                    LOWORD(v131) = 6;
                  if (v128 < *(unsigned __int16 *)(*(_QWORD *)&v5[3] + 72) * (unsigned __int16)v131)
                  {
                    v191 = __cxa_allocate_exception(0x10uLL);
                    *(_QWORD *)v191 = &off_1E61B2D68;
                    v191[4] = 5;
                  }
                  this = (*(uint64_t (**)(int32x2_t *, uint64_t, _QWORD))(*(_QWORD *)v5 + 40))(v5, (uint64_t)&v5[69] + 4 * v130, (__int16)v131);
                  goto LABEL_91;
                case 19:
                  if (v112 <= 1)
                  {
                    v199 = __cxa_allocate_exception(0x10uLL);
                    *(_QWORD *)v199 = &off_1E61B2D68;
                    v199[4] = 5;
                  }
                  v144 = v11 - 3;
                  v5[81].i32[0] = v144;
                  v145 = v5[69].i32[v144];
                  if (v145 < 0
                    || (v146 = v145 >> 16,
                        v147 = v5[3],
                        v148 = *(unsigned __int16 *)(*(_QWORD *)&v147 + 80),
                        v146 >= v148)
                    || v146 + *(unsigned __int16 *)(*(_QWORD *)&v147 + 72) >= v148)
                  {
                    v194 = __cxa_allocate_exception(0x10uLL);
                    *(_QWORD *)v194 = &off_1E61B2D68;
                    v194[4] = 5;
                  }
                  this = (*(uint64_t (**)(int32x2_t *))(*(_QWORD *)v5 + 32))(v5);
                  goto LABEL_91;
                case 20:
                  if (v112 <= 2)
                  {
                    v204 = __cxa_allocate_exception(0x10uLL);
                    *(_QWORD *)v204 = &off_1E61B2D68;
                    v204[4] = 5;
                  }
                  v139 = v11 - 3;
                  v5[81].i32[0] = v11 - 3;
                  v140 = v5 + 69;
                  v155 = v5[69].i32[(v11 - 3)];
                  v142 = v11 - 4;
                  v5[81].i32[0] = v142;
                  v152 = v5[69].i32[v142] + v155;
                  goto LABEL_180;
                case 21:
                  if (v112 <= 2)
                  {
                    v202 = __cxa_allocate_exception(0x10uLL);
                    *(_QWORD *)v202 = &off_1E61B2D68;
                    v202[4] = 5;
                  }
                  v139 = v11 - 3;
                  v5[81].i32[0] = v11 - 3;
                  v140 = v5 + 69;
                  v151 = v5[69].i32[(v11 - 3)];
                  v142 = v11 - 4;
                  v5[81].i32[0] = v142;
                  v152 = v5[69].i32[v142] - v151;
                  goto LABEL_180;
                case 22:
                  if (v112 <= 2)
                  {
                    v197 = __cxa_allocate_exception(0x10uLL);
                    *(_QWORD *)v197 = &off_1E61B2D68;
                    v197[4] = 5;
                  }
                  v139 = v11 - 3;
                  v5[81].i32[0] = v11 - 3;
                  v140 = v5 + 69;
                  v141 = v5[69].i32[(v11 - 3)];
                  v142 = v11 - 4;
                  v5[81].i32[0] = v142;
                  v143 = (double)v141 * 0.0000152587891 * ((double)v5[69].i32[v142] * 0.0000152587891);
                  goto LABEL_177;
                case 23:
                  if (v112 <= 2)
                  {
                    v203 = __cxa_allocate_exception(0x10uLL);
                    *(_QWORD *)v203 = &off_1E61B2D68;
                    v203[4] = 5;
                  }
                  if (v5[68].i8[4])
                    v5[68].i8[4] = 0;
                  v139 = v11 - 3;
                  v5[81].i32[0] = v11 - 3;
                  v140 = v5 + 69;
                  v154 = v5[69].i32[(v11 - 3)];
                  v142 = v11 - 4;
                  v5[81].i32[0] = v142;
                  v143 = (double)v5[69].i32[v142] * 0.0000152587891 / ((double)v154 * 0.0000152587891);
LABEL_177:
                  v152 = vcvtd_n_s64_f64(v143, 0x10uLL);
LABEL_180:
                  v5[81].i32[0] = v139;
                  v140->i32[v142] = v152;
                  goto LABEL_91;
                case 24:
                case 26:
                  if (v112 <= 2)
                  {
                    v192 = __cxa_allocate_exception(0x10uLL);
                    *(_QWORD *)v192 = &off_1E61B2D68;
                    v192[4] = 5;
                  }
                  v5[81].i32[0] = v11 - 3;
                  v132 = v5[69].i32[(v11 - 3)];
                  v133 = v11 - 4;
                  v5[81].i32[0] = v133;
                  if (v132 < 0 || (v134 = v132 >> 16, v134 >= *(unsigned __int16 *)(*(_QWORD *)&v5[3] + 80)))
                  {
                    v193 = __cxa_allocate_exception(0x10uLL);
                    *(_QWORD *)v193 = &off_1E61B2D68;
                    v193[4] = 5;
                  }
                  *(_DWORD *)(*(_QWORD *)&v5[67] + 4 * v134) = v5[69].i32[v133];
                  goto LABEL_91;
                case 25:
                  v5[66].i8[1] = 0;
                  v93 = v11 - 2;
                  if (v11 <= 2)
                  {
                    v195 = __cxa_allocate_exception(0x10uLL);
                    *(_QWORD *)v195 = &off_1E61B2D68;
                    v195[4] = 5;
                  }
                  v135 = v11 - 3;
                  v5[81].i32[0] = v135;
                  v136 = (char *)v5 + 4 * v135;
                  v137 = *((_DWORD *)v136 + 138);
                  if (v137 < 0 || (v138 = v137 >> 16, v138 >= *(unsigned __int16 *)(*(_QWORD *)&v5[3] + 80)))
                  {
                    v196 = __cxa_allocate_exception(0x10uLL);
                    *(_QWORD *)v196 = &off_1E61B2D68;
                    v196[4] = 5;
                  }
                  v99 = (int *)(v136 + 552);
                  v97 = *(_DWORD *)(*(_QWORD *)&v5[67] + 4 * v138);
                  goto LABEL_120;
                case 27:
                  v5[66].i8[1] = 0;
                  v93 = v11 - 5;
                  if (v11 <= 5)
                  {
                    v200 = __cxa_allocate_exception(0x10uLL);
                    *(_QWORD *)v200 = &off_1E61B2D68;
                    v200[4] = 5;
                  }
                  v5[81].i32[0] = v11 - 3;
                  v94 = v5 + 69;
                  v95 = v5[69].i32[(v11 - 3)];
                  v5[81].i32[0] = v11 - 4;
                  v96 = v5[69].i32[(v11 - 4)];
                  v5[81].i32[0] = v93;
                  v97 = v5[69].u32[v93];
                  v98 = v11 - 6;
                  goto LABEL_100;
                case 28:
                  v5[66].i8[1] = 0;
                  v149 = 1103515245 * v5[68].i32[0] + 12345;
                  v5[68].i32[0] = v149;
                  v5[81].i32[0] = v112;
                  v5[69].i32[(v11 - 2)] = HIWORD(v149) + 1;
                  goto LABEL_91;
                case 29:
                  v5[81].i32[0] = v11 - 2;
                  if ((_DWORD)v11 == 2)
                  {
                    v198 = __cxa_allocate_exception(0x10uLL);
                    *(_QWORD *)v198 = &off_1E61B2D68;
                    v198[4] = 5;
                  }
                  v5[69].i32[(v11 - 2)] = v5[69].i32[(v11 - 3)];
                  goto LABEL_131;
                case 30:
                  if (v11 <= 2)
                  {
                    v201 = __cxa_allocate_exception(0x10uLL);
                    *(_QWORD *)v201 = &off_1E61B2D68;
                    v201[4] = 5;
                  }
                  v5[81].i32[0] = v11 - 3;
                  v123 = v5 + 69;
                  v124 = v5[69].i32[(v11 - 3)];
                  v5[69].i32[(v11 - 3)] = v5[67].i32[(int)v11];
                  goto LABEL_130;
                default:
                  v205 = __cxa_allocate_exception(0x10uLL);
                  *(_QWORD *)v205 = &off_1E61B2D68;
                  v205[4] = 5;
              }
            }
            v183 = __cxa_allocate_exception(0x10uLL);
            *(_QWORD *)v183 = &off_1E61B2D68;
            v183[4] = 5;
          case 0x11u:
            goto LABEL_91;
          case 0x13u:
            v182 = __cxa_allocate_exception(0x10uLL);
            *(_QWORD *)v182 = &off_1E61B2D68;
            v182[4] = 5;
          case 0x18u:
            v87 = v11 - 1;
            v5[81].i32[0] = v11 - 1;
            v88 = v5 + 69;
            v89 = v5[68].i32[(int)v11 + 1];
            v90 = v11 - 2;
            v5[81].i32[0] = v90;
            v91 = vcvtd_n_s64_f64((double)v89 * 0.0000152587891 * ((double)v5[69].i32[v90] * 0.0000152587891), 0x10uLL);
LABEL_109:
            v5[81].i32[0] = v87;
            v88->i32[v90] = v91;
            goto LABEL_91;
          case 0x19u:
            v93 = v11 - 1;
            if (v11 <= 1)
            {
              v181 = __cxa_allocate_exception(0x10uLL);
              *(_QWORD *)v181 = &off_1E61B2D68;
              v181[4] = 5;
            }
            v5[81].i32[0] = v93;
            v109 = v5 + 69;
            v110 = v5[69].i32[v93];
            v111 = v11 - 2;
            v5[81].i32[0] = v111;
            if (v5[68].i8[4])
LABEL_118:
              v5[68].i8[4] = 0;
LABEL_119:
            v99 = (int *)v109 + v111;
            v97 = vcvtd_n_s64_f64((double)*v99 * 0.0000152587891 / ((double)v110 * 0.0000152587891), 0x10uLL);
            goto LABEL_120;
          case 0x1Au:
            v5[69].i32[v11] = v5[68].i32[(int)v11 + 1];
            goto LABEL_131;
          case 0x1Bu:
            v5[81].i32[0] = v11 - 1;
            v123 = v5 + 69;
            v124 = v5[68].i32[(int)v11 + 1];
            v5[68].i32[(int)v11 + 1] = v5[68].i32[(int)v11];
LABEL_130:
            v123->i32[v5[81].i32[0] - 1] = v124;
LABEL_131:
            v125 = v5[81].i32[0] + 1;
LABEL_132:
            v5[81].i32[0] = v125;
            break;
          case 0x1Cu:
            v100 = v11 - 1;
            if (v11 <= 1)
            {
              v180 = __cxa_allocate_exception(0x10uLL);
              *(_QWORD *)v180 = &off_1E61B2D68;
              v180[4] = 5;
            }
            v5[81].i32[0] = v100;
            v101 = v5[69].u32[v100];
            v102 = v11 - 2;
            v5[81].i32[0] = v102;
            if (v101 >= *(unsigned __int16 *)(*(_QWORD *)&v5[3] + 80))
            {
              v179 = __cxa_allocate_exception(0x10uLL);
              *(_QWORD *)v179 = &off_1E61B2D68;
              v179[4] = 5;
            }
            *(_DWORD *)(*(_QWORD *)&v5[67] + 4 * v101) = v5[69].i32[v102];
            break;
          case 0x1Du:
            v5[66].i8[1] = 0;
            v103 = v11 - 1;
            if (v11 <= 1)
            {
              v178 = __cxa_allocate_exception(0x10uLL);
              *(_QWORD *)v178 = &off_1E61B2D68;
              v178[4] = 5;
            }
            v5[81].i32[0] = v103;
            v104 = (char *)v5 + 4 * v103;
            v105 = *((unsigned int *)v104 + 138);
            if (v105 >= *(unsigned __int16 *)(*(_QWORD *)&v5[3] + 80))
            {
              v177 = __cxa_allocate_exception(0x10uLL);
              *(_QWORD *)v177 = &off_1E61B2D68;
              v177[4] = 5;
            }
            v106 = *(_DWORD *)(*(_QWORD *)&v5[67] + 4 * v105);
            v5[81].i32[0] = v11;
            *((_DWORD *)v104 + 138) = v106;
            break;
          case 0x1Eu:
            v5[66].i8[1] = 0;
            v93 = v11 - 3;
            if (v11 <= 3)
            {
              v176 = __cxa_allocate_exception(0x10uLL);
              *(_QWORD *)v176 = &off_1E61B2D68;
              v176[4] = 5;
            }
            v5[81].i32[0] = v11 - 1;
            v94 = v5 + 69;
            v95 = v5[69].i32[(v11 - 1)];
            v5[81].i32[0] = v11 - 2;
            v96 = v5[69].i32[(v11 - 2)];
            v5[81].i32[0] = v93;
            v97 = v5[69].u32[v93];
            v98 = v11 - 4;
LABEL_100:
            v5[81].i32[0] = v98;
            v99 = (int *)v94 + v98;
            if (v96 <= v95)
              v97 = *v99;
LABEL_120:
            v5[81].i32[0] = v93;
            *v99 = v97;
            break;
          case 0x21u:
            v175 = __cxa_allocate_exception(0x10uLL);
            *(_QWORD *)v175 = &off_1E61B2D68;
            v175[4] = 5;
          default:
            v187 = __cxa_allocate_exception(0x10uLL);
            *(_QWORD *)v187 = &off_1E61B2D68;
            v187[4] = 5;
        }
        goto LABEL_91;
      case 0xDu:
        if ((_DWORD)v11 != 2)
        {
          v164 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v164 = &off_1E61B2D68;
          v164[4] = 5;
        }
        v5[81].i32[0] = 0;
        v5[84].i32[0] = 0;
        v5[85].i32[0] = 0;
        v5[82].i32[0] = 0;
        v5[83].i32[0] = 0;
        v27 = v5[69];
        v5[83].i32[1] = v27.i32[0];
        v28 = vand_s8((int8x8_t)vadd_s32(v27, (int32x2_t)0x800000008000), (int8x8_t)0xFFFF0000FFFF0000);
        v5[84].i32[1] = v28.i32[0];
        v5[81].i32[1] = v27.i32[0];
        v5[82].i32[1] = v28.i32[0];
        *(int8x8_t *)v211 = v28;
        this = (uint64_t)TBufferedCharStringStreamingContext::BufferCharData((TBufferedCharStringStreamingContext *)v5, 0xDu, 2, (int *)v211);
        goto LABEL_90;
      case 0xEu:
        this = (uint64_t)TBufferedCharStringStreamingContext::BufferCharData((TBufferedCharStringStreamingContext *)v5, 0xEu, 0, (int *)v211);
        goto LABEL_90;
      case 0x1Eu:
        if ((_DWORD)v11 != 4)
        {
          v163 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v163 = &off_1E61B2D68;
          v163[4] = 5;
        }
        v67 = vadd_s32(vrev64_s32(*(int32x2_t *)(v6 + 100)), v5[69]);
        v68 = (int32x2_t)vand_s8((int8x8_t)vadd_s32(v67, (int32x2_t)0x800000008000), (int8x8_t)0xFFFF0000FFFF0000);
        *(int32x2_t *)v69.i8 = vadd_s32(v67, v5[70]);
        v5[81].i32[0] = 0;
        v70 = v5[82].i32[1];
        *(_DWORD *)v211 = v68.i32[0] - v5[83].i32[0];
        *(_DWORD *)&v211[4] = v68.i32[1] - v70;
        v69.u64[1] = (unint64_t)vand_s8((int8x8_t)vadd_s32(*(int32x2_t *)v69.i8, (int32x2_t)0x800000008000), (int8x8_t)0xFFFF0000FFFF0000);
        *(int32x4_t *)&v5[81].u8[4] = vrev64q_s32(v69);
        *(int32x2_t *)&v211[8] = vsub_s32((int32x2_t)v69.u64[1], v68);
        this = (uint64_t)TBufferedCharStringStreamingContext::BufferCharData((TBufferedCharStringStreamingContext *)v5, 0x1Eu, 4, (int *)v211);
        goto LABEL_90;
      case 0x1Fu:
        if ((_DWORD)v11 != 4)
        {
          v162 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v162 = &off_1E61B2D68;
          v162[4] = 5;
        }
        v5[81].i32[0] = 0;
        v50 = v5[70].i32[1];
        v51 = v5[81].i32[1] + v5[69].i32[0];
        v52 = (v51 + 0x8000) & 0xFFFF0000;
        v53 = v52 - v5[82].i32[1];
        v54 = v51 + v5[69].i32[1];
        v55 = v5[82].i32[0] + v5[70].i32[0];
        v56 = v5[83].i32[0];
        v5[81].i32[1] = v54;
        v57 = (v54 + 0x8000) & 0xFFFF0000;
        v5[82].i32[1] = v57;
        v58 = v57 - v52;
        v59 = (v55 + 0x8000) & 0xFFFF0000;
        *(_DWORD *)v211 = v53;
        *(_DWORD *)&v211[4] = v58;
        v60 = v55 + v50;
        v5[82].i32[0] = v60;
        v61 = (v60 + 0x8000) & 0xFFFF0000;
        v5[83].i32[0] = v61;
        *(_DWORD *)&v211[8] = v59 - v56;
        *(_DWORD *)&v211[12] = v61 - v59;
        this = (uint64_t)TBufferedCharStringStreamingContext::BufferCharData((TBufferedCharStringStreamingContext *)v5, 0x1Fu, 4, (int *)v211);
        goto LABEL_90;
      default:
        if (v13 <= 0xF6)
        {
          v5[81].i32[0] = v11 + 1;
          v5[69].i32[v11] = (v13 << 16) - 9109504;
          goto LABEL_90;
        }
        if (v13 <= 0xFA)
        {
          v29 = v10 + 2;
          if ((unint64_t)(v10 + 2) > v8)
          {
            v171 = __cxa_allocate_exception(0x10uLL);
            *(_QWORD *)v171 = &off_1E61B2D68;
            v171[4] = 5;
          }
          v74 = (*v12 << 16) | (v13 << 24);
          v75 = 158072832;
LABEL_72:
          v77 = v74 + v75;
LABEL_73:
          v5[81].i32[0] = v11 + 1;
          v5[69].i32[v11] = v77;
          goto LABEL_91;
        }
        if (v13 != 255)
        {
          v29 = v10 + 2;
          if ((unint64_t)(v10 + 2) > v8)
          {
            v172 = __cxa_allocate_exception(0x10uLL);
            *(_QWORD *)v172 = &off_1E61B2D68;
            v172[4] = 5;
          }
          v74 = -9109504 - ((*v12 << 16) | (v13 << 24));
          v75 = -81854464;
          goto LABEL_72;
        }
        if ((unint64_t)v12 > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v10 + 5) > v8)
        {
          v174 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v174 = &off_1E61B2D68;
          v174[4] = 5;
        }
        v29 = v10 + 5;
        v81 = bswap32(*(_DWORD *)(v10 + 1));
        if (v81 + 32000 <= 0xFA00)
        {
          v77 = v81 << 16;
          goto LABEL_73;
        }
        v5[81].i32[0] = v11 + 1;
        v5[69].i32[v11] = v81;
        v5[68].i8[4] = 1;
LABEL_91:
        v10 = v29;
        if ((unint64_t)v29 < v8)
          continue;
        return this;
    }
  }
}

uint64_t TBufferedCharStringStreamingContext::DoCharString(TBufferedCharStringStreamingContext *this, uint64_t a2, char *a3, uint64_t a4)
{
  __int16 v6;
  const unsigned __int8 *v7;
  uint64_t v8;
  char *v9;
  unsigned int v10;
  TBufferedCharStringStreamingContext *v11;
  char *v12;
  int64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char __src;
  char v19;
  uint64_t v20;

  *((_QWORD *)this + 67) = a4;
  v6 = *((_WORD *)this + 260);
  if ((*((__int16 *)this + 261) & 0x80000000) == 0)
    std::vector<unsigned char>::__insert_with_size[abi:fe180100]<unsigned char const*,unsigned char const*>((uint64_t)this + 136, *((char **)this + 18), a3, &a3[*((unsigned __int16 *)this + 261)], *((unsigned __int16 *)this + 261));
  v7 = *(const unsigned __int8 **)(a2 + 280);
  if (v7)
  {
    TBufferedCharStringStreamingContext::ProcessCharString((uint64_t)this, v7, *(_DWORD *)(a2 + 288), 0);
  }
  else if (*((_BYTE *)this + 530))
  {
    if (*((__int16 *)this + 261) == -1)
    {
      __src = 14;
      std::vector<unsigned char>::__insert_with_size[abi:fe180100]<unsigned char const*,unsigned char const*>((uint64_t)this + 136, *((char **)this + 18), &__src, &v19, 1);
    }
    else
    {
      TBufferedCharStringStreamingContext::CharBufferAndEncrypt(this, kEndChar, 1u);
    }
  }
  if (*((_BYTE *)this + 530))
  {
    TBufferedCharStringStreamingContext::StreamCharHeader((uint64_t)this, a2, *((_DWORD *)this + 36) - *((_DWORD *)this + 34));
  }
  else
  {
    v8 = *(_QWORD *)(a2 + 288);
    if (*((__int16 *)this + 261) < 0)
    {
      TBufferedCharStringStreamingContext::StreamCharHeader((uint64_t)this, a2, v8);
      v12 = *(char **)(a2 + 280);
      if (v12)
      {
        v13 = *(unsigned int *)(a2 + 288);
        v14 = (char *)this + 136;
        v15 = (char *)*((_QWORD *)this + 18);
        v16 = &v12[v13];
      }
      else
      {
        v19 = 14;
        v14 = (char *)this + 136;
        v15 = (char *)*((_QWORD *)this + 18);
        v16 = (char *)&v20;
        v12 = &v19;
        v13 = 1;
      }
      std::vector<unsigned char>::__insert_with_size[abi:fe180100]<unsigned char const*,unsigned char const*>((uint64_t)v14, v15, v12, v16, v13);
    }
    else
    {
      TBufferedCharStringStreamingContext::StreamCharHeader((uint64_t)this, a2, v8 + *((unsigned __int16 *)this + 261));
      v9 = *(char **)(a2 + 280);
      if (v9)
      {
        v10 = *(_DWORD *)(a2 + 288);
        v11 = this;
      }
      else
      {
        v9 = kEndChar;
        v11 = this;
        v10 = 1;
      }
      TBufferedCharStringStreamingContext::CharBufferAndEncrypt(v11, v9, v10);
    }
  }
  std::vector<unsigned char>::__insert_with_size[abi:fe180100]<unsigned char const*,unsigned char const*>((uint64_t)this + 136, *((char **)this + 18), " ND\r", "", 4);
  *((_WORD *)this + 260) = v6;
  return TBufferedCharStringStreamingContext::BufferCharBuffer((uint64_t)this);
}

BOOL TType1PSFont::CheckSubrs(TType1PSFont *this, unsigned int *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  const unsigned __int8 *v6;
  const unsigned __int8 *v7;
  const unsigned __int8 *v8;
  _BOOL4 v9;
  _BOOL8 result;
  unsigned int v11;
  _WORD *exception;

  v2 = *((_QWORD *)this + 4);
  v3 = *(unsigned __int16 *)(v2 + 144);
  if (v3 < 4)
    return 0;
  if (*(_WORD *)(v2 + 146) != 4)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E61B2D68;
    exception[4] = 8;
  }
  v4 = *(_QWORD *)(v2 + 120);
  if (!v4)
    return 0;
  v6 = *(const unsigned __int8 **)(v2 + 112);
  v7 = &v6[v4];
  v8 = &v6[4 * v3 + 4];
  v9 = CheckSubr(0, v6, v8, &v6[v4], (const char *)&SUBR0, 0xBuLL);
  result = 0;
  if (v9)
  {
    result = CheckSubr(1, v6, v8, v7, (const char *)&SUBR1, 5uLL);
    if (result)
    {
      result = CheckSubr(2, v6, v8, v7, (const char *)&SUBR2, 5uLL);
      if (result)
      {
        result = CheckSubr(3, v6, v8, v7, "\v", 1uLL);
        if (result)
        {
          *a2 = 0;
          if (v3 >= 5)
          {
            if (CheckSubr(4, v6, v8, v7, SUBR4V1, 8uLL))
            {
              v11 = 1;
LABEL_15:
              *a2 = v11;
              return 1;
            }
            if (CheckSubr(4, v6, v8, v7, (const char *)&SUBR4V2, 9uLL))
            {
              v11 = 2;
              goto LABEL_15;
            }
          }
          return 1;
        }
      }
    }
  }
  return result;
}

BOOL CheckSubr(int a1, const unsigned __int8 *a2, const unsigned __int8 *a3, const unsigned __int8 *a4, const char *__s1, size_t __n)
{
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  const unsigned __int8 *v9;
  unint64_t v10;
  BOOL v11;
  BOOL v12;

  v6 = (unsigned int *)&a2[4 * a1];
  v7 = v6[1];
  v8 = bswap32(*v6);
  if (bswap32(v7) - (_DWORD)v8 == (_DWORD)__n
    && ((v9 = &a3[v8 - 1], v10 = (unint64_t)&v9[__n], v10 <= (unint64_t)a4)
      ? (v11 = v9 >= a3)
      : (v11 = 0),
        v11 ? (v12 = v10 >= (unint64_t)v9) : (v12 = 0),
        v12))
  {
    return memcmp(__s1, v9, __n) == 0;
  }
  else
  {
    return 0;
  }
}

uint64_t TType1PSFont::StreamType1Font(_QWORD *a1, uint64_t a2, const char *a3, const char *a4, uint64_t a5, int a6, char a7, uint64_t a8)
{
  uint64_t v14;
  const char *v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  unint64_t v22;
  __int128 v23;
  int v24;
  int v25;
  unsigned __int8 *v26;
  size_t v27;
  unsigned __int8 *v28;
  size_t v29;
  _DWORD *v30;
  unsigned int v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  size_t v36;
  _WORD *exception;
  _WORD *v38;
  const char *v39;
  tm v42;
  time_t v43;
  unsigned __int8 v44;
  char v45[16];
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  char __str[16];
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;

  v69 = *MEMORY[0x1E0C80C00];
  v14 = (*(uint64_t (**)(_QWORD *))(*a1 + 88))(a1);
  if (v14)
    v15 = (const char *)v14;
  else
    v15 = "\a001.003";
  v43 = time(0);
  memset(&v42, 0, sizeof(v42));
  if (v43 != -1)
    gmtime_r(&v43, &v42);
  *(_QWORD *)&v16 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v16 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v67 = v16;
  v68 = v16;
  v65 = v16;
  v66 = v16;
  v63 = v16;
  v64 = v16;
  v61 = v16;
  v62 = v16;
  v59 = v16;
  v60 = v16;
  v57 = v16;
  v58 = v16;
  v55 = v16;
  v56 = v16;
  *(_OWORD *)__str = v16;
  v54 = v16;
  v17 = a1[4];
  v18 = *(int *)(v17 + 76);
  if ((_DWORD)v18 == -1 || (v19 = *(_QWORD *)(v17 + 48)) == 0)
  {
    if (a3)
    {
      v22 = strlen(a3);
      v21 = (char *)a3;
    }
    else
    {
      v21 = __str;
      v22 = snprintf(__str, 0xFFuLL, "Font_%ld", v43);
    }
LABEL_18:
    if (v22 >= 0x100)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)exception = &off_1E61B2D68;
      exception[4] = 8;
    }
    goto LABEL_19;
  }
  v20 = v19 + v18;
  if (a3)
    v21 = (char *)a3;
  else
    v21 = (char *)(v20 + 1);
  if (!a4 || a3 && strcmp(a3, (const char *)(v20 + 1)))
  {
    v22 = strlen(v21);
    goto LABEL_18;
  }
  v36 = strlen(v21);
  v22 = v36 + strlen(a4) + 1;
  if (v22 >= 0x100)
  {
    v38 = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)v38 = &off_1E61B2D68;
    v38[4] = 8;
  }
  v39 = v21;
  v21 = __str;
  snprintf(__str, 0xFFuLL, "%s_%s", v39, a4);
LABEL_19:
  TBufferedStreamingContext::BufferString(a8, (const unsigned __int8 *)"%!FontType1-1.0: ", 0x11uLL);
  TBufferedStreamingContext::BufferString(a8, (const unsigned __int8 *)v21, v22);
  v45[0] = 32;
  TBufferedStreamingContext::BufferString(a8, (const unsigned __int8 *)v45, 1uLL);
  TBufferedStreamingContext::BufferString(a8, (const unsigned __int8 *)v15 + 1, *(unsigned __int8 *)v15);
  v45[0] = 13;
  TBufferedStreamingContext::BufferString(a8, (const unsigned __int8 *)v45, 1uLL);
  TBufferedStreamingContext::BufferString(a8, (const unsigned __int8 *)"%%CreationDate: ", 0x10uLL);
  *(_QWORD *)&v23 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v23 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v51 = v23;
  v52 = v23;
  v49 = v23;
  v50 = v23;
  v47 = v23;
  v48 = v23;
  *(_OWORD *)v45 = v23;
  v46 = v23;
  v24 = snprintf(v45, 0x7FuLL, "%d/%d/%02d", v42.tm_mon + 1, v42.tm_mday, v42.tm_year % 100);
  TBufferedStreamingContext::BufferString(a8, (const unsigned __int8 *)v45, v24);
  v44 = 13;
  TBufferedStreamingContext::BufferString(a8, &v44, 1uLL);
  v25 = snprintf(v45, 0x7FuLL, "%% Copyright %d Apple Inc. and its licensors, all rights reserved.\r", v42.tm_year + 1900);
  TBufferedStreamingContext::BufferString(a8, (const unsigned __int8 *)v45, v25);
  TBufferedStreamingContext::BufferString(a8, (const unsigned __int8 *)"11 dict begin\r/FontInfo 9 dict dup begin\r", 0x29uLL);
  TBufferedStreamingContext::BufferString(a8, (const unsigned __int8 *)"/version (", 0xAuLL);
  TBufferedStreamingContext::BufferString(a8, (const unsigned __int8 *)v15 + 1, *(unsigned __int8 *)v15);
  TBufferedStreamingContext::BufferString(a8, (const unsigned __int8 *)") readonly def\r", 0xFuLL);
  TBufferedStreamingContext::BufferString(a8, (const unsigned __int8 *)"/FullName (", 0xBuLL);
  v26 = (unsigned __int8 *)(*(uint64_t (**)(_QWORD *))(*a1 + 72))(a1);
  if (v26 || (v26 = (unsigned __int8 *)(*(uint64_t (**)(_QWORD *))(*a1 + 80))(a1)) != 0)
    TBufferedStreamingContext::BufferString(a8, v26 + 1, *v26);
  else
    TBufferedStreamingContext::BufferString(a8, (const unsigned __int8 *)v21, v22);
  if (a4)
  {
    v44 = 32;
    TBufferedStreamingContext::BufferString(a8, &v44, 1uLL);
    v27 = strlen(a4);
    TBufferedStreamingContext::BufferString(a8, (const unsigned __int8 *)a4, v27);
  }
  TBufferedStreamingContext::BufferString(a8, (const unsigned __int8 *)") readonly def\r", 0xFuLL);
  v28 = (unsigned __int8 *)(*(uint64_t (**)(_QWORD *))(*a1 + 80))(a1);
  if (v28)
  {
    TBufferedStreamingContext::BufferString(a8, (const unsigned __int8 *)"/FamilyName (", 0xDuLL);
    TBufferedStreamingContext::BufferString(a8, v28 + 1, *v28);
    if (a4)
    {
      v44 = 32;
      TBufferedStreamingContext::BufferString(a8, &v44, 1uLL);
      v29 = strlen(a4);
      TBufferedStreamingContext::BufferString(a8, (const unsigned __int8 *)a4, v29);
    }
    TBufferedStreamingContext::BufferString(a8, (const unsigned __int8 *)") readonly def\r", 0xFuLL);
  }
  TBufferedStreamingContext::BufferString(a8, (const unsigned __int8 *)"/Weight (SnapShot) readonly def\r", 0x20uLL);
  v30 = (_DWORD *)a1[4];
  v31 = v30[38];
  if (v31)
  {
    TBufferedStreamingContext::BufferString(a8, (const unsigned __int8 *)"/ItalicAngle ", 0xDuLL);
    FixedToPString(v31, 2, (unsigned __int8 *)(a8 + 66));
    TBufferedStreamingContext::BufferString(a8, (const unsigned __int8 *)(a8 + 67), *(unsigned __int8 *)(a8 + 66));
    TBufferedStreamingContext::BufferString(a8, " def\r", 5uLL);
    v30 = (_DWORD *)a1[4];
  }
  if ((*(unsigned int (**)(_DWORD *))(*(_QWORD *)v30 + 312))(v30))
    TBufferedStreamingContext::BufferString(a8, (const unsigned __int8 *)"/isFixedPitch true def\r", 0x17uLL);
  else
    TBufferedStreamingContext::BufferString(a8, (const unsigned __int8 *)"/isFixedPitch false def\r", 0x18uLL);
  TBufferedStreamingContext::BufferString(a8, (const unsigned __int8 *)"/UnderlinePosition ", 0x13uLL);
  v32 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)a1[4] + 296))(a1[4]);
  IntToPString(v32, (unsigned __int8 *)(a8 + 66));
  TBufferedStreamingContext::BufferString(a8, (const unsigned __int8 *)(a8 + 67), *(unsigned __int8 *)(a8 + 66));
  TBufferedStreamingContext::BufferString(a8, " def\r", 5uLL);
  TBufferedStreamingContext::BufferString(a8, (const unsigned __int8 *)"/UnderlineThickness ", 0x14uLL);
  v33 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)a1[4] + 304))(a1[4]);
  IntToPString(v33, (unsigned __int8 *)(a8 + 66));
  TBufferedStreamingContext::BufferString(a8, (const unsigned __int8 *)(a8 + 67), *(unsigned __int8 *)(a8 + 66));
  TBufferedStreamingContext::BufferString(a8, " def\r", 5uLL);
  v34 = *(_WORD *)(a1[4] + 178) & 0x30E;
  if ((*(_WORD *)(a1[4] + 178) & 0x30E) != 0)
  {
    TBufferedStreamingContext::BufferString(a8, (const unsigned __int8 *)"/FSType ", 8uLL);
    IntToPString(v34, (unsigned __int8 *)(a8 + 66));
    TBufferedStreamingContext::BufferString(a8, (const unsigned __int8 *)(a8 + 67), *(unsigned __int8 *)(a8 + 66));
    TBufferedStreamingContext::BufferString(a8, " def\r", 5uLL);
  }
  TBufferedStreamingContext::BufferString(a8, (const unsigned __int8 *)"end readonly def\r", 0x11uLL);
  TBufferedStreamingContext::BufferString(a8, (const unsigned __int8 *)"/FontName /", 0xBuLL);
  TBufferedStreamingContext::BufferString(a8, (const unsigned __int8 *)v21, v22);
  TBufferedStreamingContext::BufferString(a8, " def\r", 5uLL);
  TBufferedStreamingContext::BufferString(a8, (const unsigned __int8 *)"/PaintType ", 0xBuLL);
  IntToPString(*(unsigned __int16 *)(a2 + 60), (unsigned __int8 *)(a8 + 66));
  TBufferedStreamingContext::BufferString(a8, (const unsigned __int8 *)(a8 + 67), *(unsigned __int8 *)(a8 + 66));
  TBufferedStreamingContext::BufferString(a8, " def\r", 5uLL);
  TBufferedStreamingContext::BufferString(a8, (const unsigned __int8 *)"/FontType 1 def\r", 0x10uLL);
  TBufferedStreamingContext::BufferString(a8, (const unsigned __int8 *)"/FontMatrix [", 0xDuLL);
  FractToPString(*(_DWORD *)(*(_QWORD *)(a8 + 24) + 4), 4, (unsigned __int8 *)(a8 + 66));
  TBufferedStreamingContext::BufferString(a8, (const unsigned __int8 *)(a8 + 67), *(unsigned __int8 *)(a8 + 66));
  v44 = 32;
  TBufferedStreamingContext::BufferString(a8, &v44, 1uLL);
  FractToPString(*(_DWORD *)(*(_QWORD *)(a8 + 24) + 8), 4, (unsigned __int8 *)(a8 + 66));
  TBufferedStreamingContext::BufferString(a8, (const unsigned __int8 *)(a8 + 67), *(unsigned __int8 *)(a8 + 66));
  v44 = 32;
  TBufferedStreamingContext::BufferString(a8, &v44, 1uLL);
  FractToPString(*(_DWORD *)(*(_QWORD *)(a8 + 24) + 12), 4, (unsigned __int8 *)(a8 + 66));
  TBufferedStreamingContext::BufferString(a8, (const unsigned __int8 *)(a8 + 67), *(unsigned __int8 *)(a8 + 66));
  v44 = 32;
  TBufferedStreamingContext::BufferString(a8, &v44, 1uLL);
  FractToPString(*(_DWORD *)(*(_QWORD *)(a8 + 24) + 16), 4, (unsigned __int8 *)(a8 + 66));
  TBufferedStreamingContext::BufferString(a8, (const unsigned __int8 *)(a8 + 67), *(unsigned __int8 *)(a8 + 66));
  v44 = 32;
  TBufferedStreamingContext::BufferString(a8, &v44, 1uLL);
  FractToPString(*(_DWORD *)(*(_QWORD *)(a8 + 24) + 20), 4, (unsigned __int8 *)(a8 + 66));
  TBufferedStreamingContext::BufferString(a8, (const unsigned __int8 *)(a8 + 67), *(unsigned __int8 *)(a8 + 66));
  v44 = 32;
  TBufferedStreamingContext::BufferString(a8, &v44, 1uLL);
  FractToPString(*(_DWORD *)(*(_QWORD *)(a8 + 24) + 24), 4, (unsigned __int8 *)(a8 + 66));
  TBufferedStreamingContext::BufferString(a8, (const unsigned __int8 *)(a8 + 67), *(unsigned __int8 *)(a8 + 66));
  TBufferedStreamingContext::BufferString(a8, (const unsigned __int8 *)"] readonly def\r", 0xFuLL);
  TBufferedStreamingContext::BufferString(a8, (const unsigned __int8 *)"/Encoding ", 0xAuLL);
  TBufferedStreamingContext::StreamBuffer(a8);
  TBufferedStreamingContext::StreamBuffer(a8);
  (*(void (**)(_QWORD *, uint64_t, _QWORD, _QWORD))(*a1 + 256))(a1, a5, 0, *(_QWORD *)(a8 + 32));
  TBufferedStreamingContext::BufferString(a8, (const unsigned __int8 *)"/FontBBox {", 0xBuLL);
  FixedToPString(*(_DWORD *)(a8 + 160), 3, (unsigned __int8 *)(a8 + 66));
  TBufferedStreamingContext::BufferString(a8, (const unsigned __int8 *)(a8 + 67), *(unsigned __int8 *)(a8 + 66));
  v44 = 32;
  TBufferedStreamingContext::BufferString(a8, &v44, 1uLL);
  FixedToPString(*(_DWORD *)(a8 + 164), 3, (unsigned __int8 *)(a8 + 66));
  TBufferedStreamingContext::BufferString(a8, (const unsigned __int8 *)(a8 + 67), *(unsigned __int8 *)(a8 + 66));
  v44 = 32;
  TBufferedStreamingContext::BufferString(a8, &v44, 1uLL);
  FixedToPString(*(_DWORD *)(a8 + 168), 3, (unsigned __int8 *)(a8 + 66));
  TBufferedStreamingContext::BufferString(a8, (const unsigned __int8 *)(a8 + 67), *(unsigned __int8 *)(a8 + 66));
  v44 = 32;
  TBufferedStreamingContext::BufferString(a8, &v44, 1uLL);
  FixedToPString(*(_DWORD *)(a8 + 172), 3, (unsigned __int8 *)(a8 + 66));
  TBufferedStreamingContext::BufferString(a8, (const unsigned __int8 *)(a8 + 67), *(unsigned __int8 *)(a8 + 66));
  TBufferedStreamingContext::BufferString(a8, (const unsigned __int8 *)"} readonly def\r", 0xFuLL);
  TBufferedStreamingContext::BufferString(a8, (const unsigned __int8 *)"currentdict end\r", 0x10uLL);
  if (a6)
  {
    TBufferedStreamingContext::BeginEexec((TBufferedStreamingContext *)a8, 1, a7);
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(*a1 + 272))(a1, a2, a8);
    TBufferedStreamingContext::BufferString(a8, (const unsigned __int8 *)"noaccess put\rdup /FontName get exch definefont pop\r", 0x33uLL);
    return TBufferedStreamingContext::EndEexec(a8);
  }
  else
  {
    TBufferedStreamingContext::BufferString(a8, "systemdict begin\r", 0x11uLL);
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(*a1 + 272))(a1, a2, a8);
    TBufferedStreamingContext::BufferString(a8, (const unsigned __int8 *)"noaccess put\rdup /FontName get exch definefont pop\r", 0x33uLL);
    return TBufferedStreamingContext::BufferString(a8, "end\r", 4uLL);
  }
}

void sub_1B09BB624(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t TType1PSFont::StreamPrivateFontDict(uint64_t a1, uint64_t a2, TBufferedStreamingContext *this)
{
  TBufferedStreamingContext::BufferString((uint64_t)this, (const unsigned __int8 *)"dup /Private 20 dict dup begin\r", 0x1FuLL);
  TBufferedStreamingContext::BufferString((uint64_t)this, (const unsigned __int8 *)"/RD {string currentfile exch readstring pop} executeonly def\r", 0x3DuLL);
  TBufferedStreamingContext::BufferString((uint64_t)this, (const unsigned __int8 *)"/ND {noaccess def} executeonly def\r", 0x23uLL);
  TBufferedStreamingContext::BufferString((uint64_t)this, (const unsigned __int8 *)"/NP {noaccess put} executeonly def\r", 0x23uLL);
  TBufferedStreamingContext::BufferString((uint64_t)this, (const unsigned __int8 *)"/MinFeature {16 16} def\r", 0x18uLL);
  TBufferedStreamingContext::BufferString((uint64_t)this, (const unsigned __int8 *)"/password 5839 def\r", 0x13uLL);
  TBufferedCharStringStreamingContext::BufferBlueValues((uint64_t)this, "\r/BlueValues [", 0);
  TBufferedCharStringStreamingContext::BufferBlueValues((uint64_t)this, "\r/OtherBlues [", 1);
  TBufferedCharStringStreamingContext::BufferFamilyBlues((uint64_t)this, kFamilyBluesString, 0);
  TBufferedCharStringStreamingContext::BufferFamilyBlues((uint64_t)this, kFamilyOtherBluesString, 1);
  TBufferedCharStringStreamingContext::BufferStdW((uint64_t)this);
  TBufferedCharStringStreamingContext::BufferStemSnap((uint64_t)this);
  if (*(_WORD *)(a2 + 70))
  {
    TBufferedStreamingContext::BufferString((uint64_t)this, (const unsigned __int8 *)"/LanguageGroup ", 0xFuLL);
    IntToPString(*(unsigned __int16 *)(a2 + 70), (unsigned __int8 *)this + 66);
    TBufferedStreamingContext::BufferString((uint64_t)this, (const unsigned __int8 *)this + 67, *((unsigned __int8 *)this + 66));
    TBufferedStreamingContext::BufferString((uint64_t)this, " def\r", 5uLL);
    if (*(_WORD *)(a2 + 70) == 1)
      TBufferedStreamingContext::BufferString((uint64_t)this, (const unsigned __int8 *)"/RndStemUp false def\r", 0x15uLL);
    if (*(_DWORD *)(a2 + 44))
    {
      TBufferedStreamingContext::BufferString((uint64_t)this, (const unsigned __int8 *)"/ExpansionFactor ", 0x11uLL);
      FixedToPString(*(_DWORD *)(a2 + 44), 3, (unsigned __int8 *)this + 66);
      TBufferedStreamingContext::BufferString((uint64_t)this, (const unsigned __int8 *)this + 67, *((unsigned __int8 *)this + 66));
      TBufferedStreamingContext::BufferString((uint64_t)this, " def\r", 5uLL);
    }
  }
  TBufferedCharStringStreamingContext::BufferBlueStuff((uint64_t)this);
  TBufferedCharStringStreamingContext::BufferForceBold((uint64_t)this);
  TBufferedStreamingContext::BufferString((uint64_t)this, otherSubrs, 0x14E2uLL);
  (*(void (**)(TBufferedStreamingContext *))(*(_QWORD *)this + 16))(this);
  (*(void (**)(uint64_t, uint64_t, TBufferedStreamingContext *))(*(_QWORD *)a1 + 280))(a1, a2, this);
  return TBufferedStreamingContext::BufferString((uint64_t)this, (const unsigned __int8 *)"end\rreadonly put\r", 0x11uLL);
}

void TType1PSFont::StreamCharData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4;
  std::vector<int>::size_type v5;
  std::vector<int>::pointer begin;
  unsigned int v7;
  int8x8_t v8;
  int v9;
  __int32 *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  __int16 v14;
  int v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  std::vector<int> __p;
  int v21;

  v4 = *(unsigned __int16 *)(a2 + 80);
  __p.__end_ = (std::vector<int>::pointer)0xAAAAAAAAAAAAAAAALL;
  __p.__end_cap_.__value_ = (int *)0xAAAAAAAAAAAAAAAALL;
  if (v4)
    v5 = v4;
  else
    v5 = 32;
  __p.__begin_ = (std::vector<int>::pointer)0xAAAAAAAAAAAAAAAALL;
  std::vector<int>::vector(&__p, v5);
  begin = __p.__begin_;
  v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a3 + 8) + 32) + 168))(*(_QWORD *)(*(_QWORD *)(a3 + 8) + 32));
  if (v7 >= 0xFFFF)
    v9 = 0xFFFF;
  else
    v9 = v7;
  v10 = *(__int32 **)(a3 + 16);
  if (v10 && v9)
  {
    v11 = v9 + 31;
    LOWORD(v9) = 0;
    v12 = v11 >> 5;
    do
    {
      if (*v10)
      {
        v8.i32[0] = *v10;
        v8 = vcnt_s8(v8);
        LOWORD(v9) = vaddlv_u8((uint8x8_t)v8) + v9;
      }
      ++v10;
      --v12;
    }
    while (v12);
  }
  TBufferedStreamingContext::BufferString(a3, (const unsigned __int8 *)"2 index /CharStrings ", 0x15uLL);
  IntToPString((unsigned __int16)v9, (unsigned __int8 *)(a3 + 66));
  TBufferedStreamingContext::BufferString(a3, (const unsigned __int8 *)(a3 + 67), *(unsigned __int8 *)(a3 + 66));
  TBufferedStreamingContext::BufferString(a3, " dict dup begin\r", 0x10uLL);
  TBufferedStreamingContext::StreamBuffer(a3);
  v13 = 0;
  v21 = 0;
  v14 = 4330;
  do
  {
    v15 = *((unsigned __int8 *)&v21 + v13) ^ ((unsigned __int16)(v14 & 0xFF00) >> 8);
    v14 = 22719 - 12691 * (v14 + (*((_BYTE *)&v21 + v13) ^ ((unsigned __int16)(v14 & 0xFF00) >> 8)));
    *((_BYTE *)&v21 + v13++) = v15;
  }
  while (v13 != 4);
  v16 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a3 + 8) + 32) + 168))(*(_QWORD *)(*(_QWORD *)(a3 + 8) + 32));
  if (v16 >= 0xFFFF)
    v17 = 0xFFFF;
  else
    v17 = v16;
  if (v17)
  {
    v18 = 0;
    v19 = *(_QWORD *)(a3 + 16);
    do
    {
      if (((*(_DWORD *)(v19 + 4 * (v18 >> 5)) << v18) & 0x80000000) != 0)
      {
        *(_WORD *)(a3 + 522) = 4;
        *(_WORD *)(a3 + 520) = v14;
        *(_DWORD *)(a3 + 544) = 0;
        *(_WORD *)(a3 + 529) = 257;
        *(_BYTE *)(a3 + 548) = 0;
        *(_OWORD *)(a3 + 648) = 0u;
        *(_OWORD *)(a3 + 664) = 0u;
        *(_DWORD *)(a3 + 680) = 0;
        (*(void (**)(uint64_t, _QWORD, _QWORD, int *, std::vector<int>::pointer))(*(_QWORD *)a3 + 24))(a3, *(_QWORD *)(a3 + 8), (unsigned __int16)v18, &v21, begin);
      }
      ++v18;
    }
    while (v17 != v18);
  }
  TBufferedStreamingContext::BufferString(a3, "end\r", 4uLL);
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
}

void sub_1B09BBA8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  uint64_t v10;
  _WORD *v12;
  _WORD *exception;

  if (a2 == 1)
  {
    v12 = __cxa_begin_catch(exception_object);
    *(_WORD *)(v10 + 64) = v12[4];
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E61B2D68;
    exception[4] = v12[4];
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void MStreamSnapShotContext::~MStreamSnapShotContext(MStreamSnapShotContext *this)
{
  JUMPOUT(0x1B5E0CD38);
}

const char *MStreamSnapShotContext::MakeInstanceName(MStreamSnapShotContext *this, char *__s, uint64_t a3)
{
  const char *v3;
  uint64_t v6;
  int v7;
  int v8;
  size_t v9;
  size_t v10;

  v3 = __s;
  if (__s)
  {
    if (*((_QWORD *)this + 2))
    {
      *__s = 0;
      if (*((__int16 *)this + 12) >= 1)
      {
        v6 = 0;
        do
        {
          v7 = *(_DWORD *)(*((_QWORD *)this + 2) + 4 * v6);
          if (v7 >= -32)
            v8 = (1000 * v7 + 0x8000) >> 16;
          else
            v8 = -((1000 * v7 + 0x8000) >> 16);
          if (v6)
          {
            v9 = strlen(v3);
            snprintf((char *)&v3[v9], a3 - v9, "_");
          }
          v10 = strlen(v3);
          snprintf((char *)&v3[v10], a3 - v10, "%x", v8);
          ++v6;
        }
        while (v6 < *((__int16 *)this + 12));
      }
    }
    else
    {
      return 0;
    }
  }
  return v3;
}

uint64_t MStreamSnapShotContext::BlendValue(uint64_t this, TBufferedCharStringStreamingContext *a2, int *a3, int a4)
{
  int *v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int *v11;
  int v12;
  int *v13;
  int v14;
  double v15;
  int v16;
  uint64_t v17;

  if (a4)
  {
    v4 = &a3[a4];
    v5 = *(unsigned __int16 *)(this + 24);
    v6 = v5 - 1;
    v7 = 4 * (unsigned __int16)(v5 - 2) + 4;
    v8 = *(_QWORD *)(this + 16) + 4;
    do
    {
      v10 = *a3++;
      v9 = v10;
      if ((_WORD)v6)
      {
        v11 = (int *)v8;
        v12 = v6;
        v13 = v4;
        do
        {
          v14 = *v11++;
          v15 = (double)v14 * 0.0000152587891;
          v16 = *v13++;
          v9 += vcvtd_n_s64_f64(v15 * ((double)v16 * 0.0000152587891), 0x10uLL);
          --v12;
        }
        while ((_WORD)v12);
        v4 = (int *)((char *)v4 + v7);
      }
      --a4;
      v17 = *((int *)a2 + 162);
      *((_DWORD *)a2 + 162) = v17 + 1;
      *((_DWORD *)a2 + v17 + 138) = v9;
    }
    while ((_WORD)a4);
  }
  return this;
}

std::vector<unsigned int> *__cdecl std::vector<unsigned int>::vector(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __n)
{
  std::vector<unsigned int>::pointer end;

  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<unsigned int>::__vallocate[abi:fe180100](this, __n);
    end = this->__end_;
    bzero(end, 4 * __n);
    this->__end_ = &end[__n];
  }
  return this;
}

void sub_1B09BBD1C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned int>::__vallocate[abi:fe180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 62)
    std::vector<unsigned int>::__throw_length_error[abi:fe180100]();
  result = (char *)std::__allocate_at_least[abi:fe180100]<std::allocator<int>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

void std::vector<unsigned int>::__throw_length_error[abi:fe180100]()
{
  std::__throw_length_error[abi:fe180100]("vector");
}

_QWORD *std::vector<unsigned char>::vector(_QWORD *a1, size_t a2)
{
  char *v4;
  char *v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned char>::__vallocate[abi:fe180100](a1, a2);
    v4 = (char *)a1[1];
    v5 = &v4[a2];
    bzero(v4, a2);
    a1[1] = v5;
  }
  return a1;
}

void sub_1B09BBDE0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned char>::__vallocate[abi:fe180100](_QWORD *a1, size_t __sz)
{
  char *result;

  if ((__sz & 0x8000000000000000) != 0)
    std::vector<unsigned char>::__throw_length_error[abi:fe180100]();
  result = (char *)operator new(__sz);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[__sz];
  return result;
}

void std::vector<unsigned char>::__append(unint64_t *a1, size_t a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  size_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char v15;

  v5 = (char *)a1[1];
  v4 = (char *)a1[2];
  if (v4 - v5 >= a2)
  {
    if (a2)
    {
      bzero((void *)a1[1], a2);
      v5 += a2;
    }
    a1[1] = (unint64_t)v5;
  }
  else
  {
    v6 = *a1;
    v7 = &v5[-*a1];
    v8 = (unint64_t)&v7[a2];
    if ((uint64_t)&v7[a2] < 0)
      std::vector<unsigned char>::__throw_length_error[abi:fe180100]();
    v9 = (unint64_t)&v4[-v6];
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL)
      v10 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
      v11 = (unint64_t)operator new(v10);
    else
      v11 = 0;
    v12 = &v7[v11];
    v13 = (char *)(v11 + v10);
    bzero(v12, a2);
    if (v5 == (char *)v6)
    {
      v11 = (unint64_t)v12;
    }
    else
    {
      v14 = &v5[~v6];
      do
      {
        v15 = *--v5;
        (v14--)[v11] = v15;
      }
      while (v5 != (char *)v6);
      v5 = (char *)*a1;
    }
    *a1 = v11;
    a1[1] = (unint64_t)&v12[a2];
    a1[2] = (unint64_t)v13;
    if (v5)
      operator delete(v5);
  }
}

void std::vector<char>::__append(std::vector<char> *this, std::vector<char>::size_type __n)
{
  char *value;
  char *end;
  std::vector<char>::pointer begin;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  size_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char v15;

  end = this->__end_;
  value = this->__end_cap_.__value_;
  if (value - end >= __n)
  {
    if (__n)
    {
      bzero(this->__end_, __n);
      end += __n;
    }
    this->__end_ = end;
  }
  else
  {
    begin = this->__begin_;
    v7 = end - this->__begin_;
    v8 = v7 + __n;
    if ((uint64_t)(v7 + __n) < 0)
      std::vector<unsigned int>::__throw_length_error[abi:fe180100]();
    v9 = value - begin;
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL)
      v10 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
      v11 = (char *)operator new(v10);
    else
      v11 = 0;
    v12 = &v11[v7];
    v13 = &v11[v10];
    bzero(v12, __n);
    if (end == begin)
    {
      v11 = v12;
    }
    else
    {
      v14 = &end[~(unint64_t)begin];
      do
      {
        v15 = *--end;
        (v14--)[(_QWORD)v11] = v15;
      }
      while (end != begin);
      end = this->__begin_;
    }
    this->__begin_ = v11;
    this->__end_ = &v12[__n];
    this->__end_cap_.__value_ = v13;
    if (end)
      operator delete(end);
  }
}

char *std::vector<unsigned char>::__insert_with_size[abi:fe180100]<unsigned char const*,unsigned char const*>(uint64_t a1, char *__dst, char *__src, char *a4, int64_t a5)
{
  char *v5;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  size_t v15;
  size_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  int64_t v25;
  char v26;
  char *v27;
  char *v28;
  size_t v29;
  char *v30;
  char *v31;
  char *v32;

  v5 = __dst;
  if (a5 < 1)
    return v5;
  v10 = *(char **)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  if (v9 - (uint64_t)v10 < a5)
  {
    v11 = *(char **)a1;
    v12 = (uint64_t)&v10[a5 - *(_QWORD *)a1];
    if (v12 < 0)
      std::vector<unsigned char>::__throw_length_error[abi:fe180100]();
    v13 = (char *)(__dst - v11);
    v14 = v9 - (_QWORD)v11;
    if (2 * v14 > v12)
      v12 = 2 * v14;
    if (v14 >= 0x3FFFFFFFFFFFFFFFLL)
      v15 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v15 = v12;
    if (v15)
    {
      v16 = v15;
      v17 = (char *)operator new(v15);
    }
    else
    {
      v16 = 0;
      v17 = 0;
    }
    v27 = &v13[(_QWORD)v17];
    memcpy(&v13[(_QWORD)v17], __src, a5);
    v28 = &v13[(_QWORD)v17];
    v29 = v16;
    if (v11 != v5)
    {
      do
      {
        v13[(_QWORD)v17 - 1] = v13[(_QWORD)(v11 - 1)];
        --v13;
      }
      while (v13);
      v10 = *(char **)(a1 + 8);
      v28 = v17;
    }
    v30 = &v27[a5];
    v31 = &v17[v29];
    if (v10 != v5)
      memmove(v30, v5, v10 - v5);
    v32 = *(char **)a1;
    *(_QWORD *)a1 = v28;
    *(_QWORD *)(a1 + 8) = &v30[v10 - v5];
    *(_QWORD *)(a1 + 16) = v31;
    if (v32)
      operator delete(v32);
    return v27;
  }
  v18 = v10 - __dst;
  if (v10 - __dst >= a5)
  {
    v19 = &__src[a5];
    v21 = *(char **)(a1 + 8);
LABEL_17:
    v22 = &v5[a5];
    v23 = &v21[-a5];
    v24 = v21;
    if (&v21[-a5] < v10)
    {
      v25 = &v10[a5] - v21;
      v24 = v21;
      do
      {
        v26 = *v23++;
        *v24++ = v26;
        --v25;
      }
      while (v25);
    }
    *(_QWORD *)(a1 + 8) = v24;
    if (v21 != v22)
      memmove(&v5[a5], v5, v21 - v22);
    if (v19 != __src)
      memmove(v5, __src, v19 - __src);
    return v5;
  }
  v19 = &__src[v18];
  v20 = a4 - &__src[v18];
  if (a4 != &__src[v18])
    memmove(*(void **)(a1 + 8), &__src[v18], a4 - &__src[v18]);
  v21 = &v10[v20];
  *(_QWORD *)(a1 + 8) = &v10[v20];
  if (v18 >= 1)
    goto LABEL_17;
  return v5;
}

void DisposeStreamBuffer(_DWORD *a1)
{
  if (a1)
  {
    if ((a1[5] - 131073) >= 0xFFFE0000 && *((_DWORD **)a1 + 3) == a1 + 10)
      FlushStreamBuffer((uint64_t)a1);
    ScalerDisposeBlock(*(memoryContext **)a1, (char *)a1, -1);
  }
}

uint64_t FlushStreamBuffer(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  _WORD *exception;

  v1 = **(uint64_t ***)(a1 + 8);
  if (!v1
    || (v2 = *v1) == 0
    || !*(_DWORD *)v2
    || (result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v2 + 20))(*(_QWORD *)(v2 + 28), *(unsigned int *)(a1 + 20), *(_QWORD *)(a1 + 24)), (_WORD)result))
  {
    exception = __cxa_allocate_exception(2uLL);
    *exception = 0;
    __cxa_throw(exception, MEMORY[0x1E0DE4F10], 0);
  }
  *(_DWORD *)(a1 + 20) = 0;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  return result;
}

uint64_t StreamBytesThroughBuffer(uint64_t result, int a2, char *__src)
{
  int v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  BOOL v9;

  if (a2 >= 1)
  {
    v4 = a2;
    v5 = result;
    v6 = 0x20000 - *(_DWORD *)(result + 20);
    do
    {
      if (v6 >= v4)
        v7 = v4;
      else
        v7 = v6;
      result = (uint64_t)memmove(*(void **)(v5 + 32), __src, v7);
      *(_QWORD *)(v5 + 32) += v7;
      v8 = *(_DWORD *)(v5 + 20) + v7;
      *(_DWORD *)(v5 + 20) = v8;
      if (v8 >= 0x20000)
      {
        result = FlushStreamBuffer(v5);
        v6 = 0x20000 - *(_DWORD *)(v5 + 20);
      }
      else
      {
        v6 -= v7;
      }
      __src += v7;
      v9 = __OFSUB__(v4, v7);
      v4 -= v7;
    }
    while (!((v4 < 0) ^ v9 | (v4 == 0)));
  }
  return result;
}

uint64_t StreamBinaryThroughBuffer(uint64_t result, int a2, char *__src)
{
  int v3;
  uint64_t v5;
  char *v6;
  char *v7;
  unsigned int v8;
  const char *v9;

  v3 = (int)__src;
  v5 = result;
  v6 = __src;
  v7 = __src;
  do
  {
    v8 = *v6;
    if (v8 > 0x27)
    {
      switch(v8)
      {
        case '(':
          v9 = "\x02\\(";
          break;
        case '\\':
          v9 = "\x02\\\\";
          break;
        case ')':
          v9 = "\x02\\)";
          break;
        default:
          goto LABEL_18;
      }
    }
    else
    {
      switch(v8)
      {
        case 4u:
          v9 = "\x04\\004";
          break;
        case 0xAu:
          v9 = "\x02\\n";
          break;
        case 0xDu:
          v9 = "\x02\\r";
          break;
        default:
          goto LABEL_18;
      }
    }
    if (v7 < v6)
      StreamBytesThroughBuffer(v5, v3 - (_DWORD)v7, v7);
    v7 = v6 + 1;
    result = StreamBytesThroughBuffer(v5, *(unsigned __int8 *)v9, (char *)v9 + 1);
LABEL_18:
    ++v6;
    ++v3;
    --a2;
  }
  while (a2);
  if (v7 < v6)
    return StreamBytesThroughBuffer(v5, v3 - (int)v7, v7);
  return result;
}

uint64_t StreamHexThroughBuffer(uint64_t result, int a2, char *a3)
{
  int v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  _BYTE *v11;
  int v12;
  char *v13;
  char v14;
  int v15;
  int v16;

  v4 = a2;
  v5 = result;
  v6 = *(_DWORD *)(result + 20);
  v7 = 0x20000 - v6;
  v8 = 131073 - v6;
  if (v7 >= 0)
    v8 = v7;
  v9 = v8 >> 1;
  if (v9 >= a2)
    v10 = a2;
  else
    v10 = v9;
  do
  {
    v11 = *(_BYTE **)(v5 + 32);
    if (v10)
    {
      v12 = v10;
      v13 = a3;
      do
      {
        *v11 = str_6_0[(unint64_t)*v13 >> 4];
        v14 = *v13++;
        v11[1] = str_6_0[v14 & 0xF];
        v11 += 2;
        --v12;
      }
      while (v12);
      v11 = *(_BYTE **)(v5 + 32);
    }
    *(_QWORD *)(v5 + 32) = &v11[2 * v10];
    v15 = *(_DWORD *)(v5 + 20) + 2 * v10;
    *(_DWORD *)(v5 + 20) = v15;
    v4 -= v10;
    if (v4 >= 0x10000)
      v16 = 0x10000;
    else
      v16 = v4;
    if (v15 >= 0x1FFFF)
      result = FlushStreamBuffer(v5);
    a3 += v10;
    v10 = v16;
  }
  while (v4);
  return result;
}

void DumpFontEncoding(memoryContext *a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  __int128 v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int FontTable;
  void *v22;
  unsigned int v23;
  unsigned __int16 *v24;
  char *v25;
  BOOL v26;
  _WORD *v27;
  BOOL v28;
  uint64_t v29;
  unsigned __int16 *v30;
  int v31;
  int v32;
  __int16 v33;
  unsigned __int16 *v34;
  int v36;
  unsigned int v37;
  unsigned int v38;
  BOOL v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _WORD *v47;
  unsigned __int8 *v48;
  char v49;
  void *v50;
  char v51[16];
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v8 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v57 = v8;
  v58 = v8;
  v55 = v8;
  v56 = v8;
  v53 = v8;
  v54 = v8;
  *(_OWORD *)v51 = v8;
  v52 = v8;
  StreamBytesThroughBuffer(a2, 49, "256 array 0 1 255 {1 index exch/.notdef put} for\n");
  v9 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)a1 + 24) + 168))(*(_QWORD *)(*(_QWORD *)a1 + 24));
  if (v9 >= 0xFFFF)
    v10 = 0xFFFF;
  else
    v10 = v9;
  v11 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 40);
  if (!v11)
  {
    v50 = 0;
    FontTable = ScalerGetFontTable(a1, 1668112752, 0, &v50, 0, 12);
    v22 = v50;
    v23 = (bswap32(*((unsigned __int16 *)v50 + 1)) >> 16) - 1;
    if ((v23 & 0x8000) != 0)
      goto LABEL_53;
    v24 = (unsigned __int16 *)((char *)v50 + FontTable);
    if ((char *)v50 + 12 > (char *)v24)
      goto LABEL_53;
    v25 = (char *)v50 + 20;
    while (*((_WORD *)v25 - 8) != 256 || *((_WORD *)v25 - 7))
    {
      if ((__int16)v23 >= 1)
      {
        LOWORD(v23) = v23 - 1;
        v26 = v25 > (char *)v24;
        v25 += 8;
        if (!v26)
          continue;
      }
      goto LABEL_53;
    }
    v27 = (char *)v50 + bswap32(*((_DWORD *)v25 - 3));
    v48 = (unsigned __int8 *)(v27 + 3);
    if (v27 + 3 > v24)
      goto LABEL_53;
    if (*v27 == 1536)
    {
      v32 = bswap32((unsigned __int16)v27[3]);
      v30 = v27 + 5;
      v31 = (__int16)((bswap32((unsigned __int16)v27[4]) >> 16) + HIWORD(v32));
      if (v31 >= 255)
        v31 = 255;
      if (v31 >= v32 >> 16)
        v33 = HIWORD(v32);
      else
        v33 = 255;
      v29 = v33;
      v34 = &v30[(__int16)(v31 + 1) - (uint64_t)v33];
      if ((int)v29 > v31 || v34 >= v24)
        goto LABEL_53;
      v48 = 0;
    }
    else
    {
      if (*v27)
        v28 = 1;
      else
        v28 = v27 + 131 >= v24;
      if (v28)
      {
LABEL_53:
        ScalerReleaseFontTable(a1, v22);
        return;
      }
      v29 = 0;
      v30 = 0;
      LOWORD(v31) = 255;
    }
    v36 = (__int16)v31 + 1;
    v47 = v27;
    do
    {
      if (*v27)
      {
        v37 = *v30++;
        v38 = bswap32(v37) >> 16;
      }
      else
      {
        v38 = *v48++;
      }
      if (v38)
        v39 = v38 >= v10;
      else
        v39 = 1;
      if (!v39)
      {
        v49 = -86;
        v40 = ZGetGlyphName(a3, a4, (unsigned __int16)v10, v38, &v49, v51, 0x80uLL);
        if (v49 && (v49 != 7 || strncmp(v40, ".notdef", 7uLL)))
          ZWriteStringF(a2, 25, v41, v42, v43, v44, v45, v46, v29);
        v27 = v47;
      }
      v29 = (v29 + 1);
    }
    while (v36 != (_DWORD)v29);
    goto LABEL_53;
  }
  v12 = 0;
  do
  {
    LOBYTE(v50) = -86;
    v13 = *(unsigned __int16 *)(v11 + 2 * v12);
    if (v13 != 0xFFFF)
    {
      v14 = ZGetGlyphName(a3, a4, (unsigned __int16)v10, v13, (char *)&v50, v51, 0x80uLL);
      if ((_BYTE)v50)
      {
        if (v50 != 7 || strncmp(v14, ".notdef", 7uLL))
          ZWriteStringF(a2, 25, v15, v16, v17, v18, v19, v20, v12);
      }
    }
    ++v12;
  }
  while ((_DWORD)v12 != 256);
}

const char *ZGetGlyphName(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4, char *a5, char *a6, size_t a7)
{
  const char *v7;
  unint64_t v9;
  unint64_t v10;
  char v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  BOOL v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  BOOL v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unsigned int v27;
  unsigned __int16 v29;
  unsigned int v30;
  uint64_t v31;
  const char *v32;
  unsigned __int8 *v33;
  uint64_t v34;
  uint64_t v35;

  v7 = a6;
  *a5 = 0;
  if (a1 && a2 >= 0x20)
  {
    HIDWORD(v9) = bswap32(*(_DWORD *)a1);
    LODWORD(v9) = HIDWORD(v9) - 0x10000;
    v10 = a1 + a2;
    switch((v9 >> 15))
    {
      case 0u:
        if (a4 > 0x101)
          goto LABEL_60;
        v7 = &CanonGlyphNameTable[18 * a4];
        v11 = strlen(v7);
        goto LABEL_63;
      case 2u:
        if (a2 < 0x22)
          break;
        v12 = a1 + 34;
        v13 = bswap32(*(unsigned __int16 *)(a1 + 32)) >> 16;
        v14 = a1 + 34 + 2 * v13;
        v15 = ((unint64_t)a2 - 34) >> 1;
        if (a2 < 0x24)
          v15 = 0;
        v16 = v14 <= v10 && v14 >= v12;
        if (v16)
          v15 = v13;
        if (v15 <= a4)
          break;
        if (!a4)
          goto LABEL_62;
        v17 = __rev16(*(unsigned __int16 *)(v12 + 2 * a4));
        if (v17 <= 0x101)
        {
          if (!*(_WORD *)(v12 + 2 * a4))
            goto LABEL_60;
          v7 = &CanonGlyphNameTable[18 * v17];
LABEL_32:
          v11 = strlen(v7);
          goto LABEL_63;
        }
        v33 = (unsigned __int8 *)(v12 + 2 * v15);
        if ((_DWORD)v17 != 258 && (unint64_t)v33 < v10)
        {
          v34 = v17 - 259;
          do
          {
            v33 += *v33 + 1;
            v16 = v34-- != 0;
          }
          while (v16 && (unint64_t)v33 < v10);
        }
        if ((unint64_t)v33 < v10 && *v33)
        {
          v7 = (const char *)(v33 + 1);
          v35 = v10 - (_QWORD)(v33 + 1);
          if (v35 >= *v33)
            v11 = *v33;
          else
            v11 = v35;
          goto LABEL_63;
        }
        break;
      case 3u:
        if (a2 < 0x22)
          break;
        v18 = a1 + 34;
        v19 = bswap32(*(unsigned __int16 *)(a1 + 32)) >> 16;
        v20 = a1 + 34 + 2 * v19;
        v21 = ((unint64_t)a2 - 34) >> 1;
        if (a2 < 0x24)
          v21 = 0;
        v22 = v20 <= v10 && v20 >= v18;
        v23 = v22 ? v19 : v21;
        if (v23 <= a4)
          break;
        if (!a4)
          goto LABEL_62;
        v24 = *(char *)(v18 + a4) + (unint64_t)a4;
        if (v24 - 258 < 0xFFFFFFFFFFFFFEFFLL)
          goto LABEL_60;
        v7 = &CanonGlyphNameTable[18 * (int)v24];
        goto LABEL_32;
      case 6u:
        v25 = a1 + 32;
        v26 = a1 + 32 + 2 * a3;
        v27 = (a2 + 131040) >> 1;
        if (a2 < 0x22)
          LOWORD(v27) = 0;
        if (v26 <= v10 && v26 >= v25)
          v29 = a3;
        else
          v29 = v27;
        if (a4 >= v29)
          break;
        if (!a4)
          goto LABEL_62;
        v30 = *(unsigned __int16 *)(v25 + 2 * a4);
        if (v30 == 0xFFFF)
          goto LABEL_60;
        v31 = __rev16(v30);
        if (v31 >= 0x100)
          v32 = "a%04x";
        else
          v32 = "a%02x";
        v11 = snprintf_l(a6, a7, 0, v32, v31);
        goto LABEL_63;
      default:
        break;
    }
  }
  if (a4)
  {
LABEL_60:
    v11 = snprintf_l(a6, a7, 0, "gid%d");
  }
  else
  {
LABEL_62:
    v7 = ".notdef";
    v11 = 7;
  }
LABEL_63:
  *a5 = v11;
  return v7;
}

const char *ZWriteStringF(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  const char *result;
  int v11;
  char *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  char *v16;
  __int128 v17;
  int v18;
  double *v19;
  char *v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  double *v25;
  int v26;
  int v27;
  double *v28;
  char __s[16];
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  int v35;
  char v36[16];
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v27 = -1431655766;
  memset(v36, 170, sizeof(v36));
  v28 = (double *)&a9;
  *(_DWORD *)(a1 + 131112) = 0;
  result = ZGetString(a2, &v27);
  v11 = v27;
  if (v27 >= 1)
  {
    v12 = (char *)result;
    while (2)
    {
      while (2)
      {
        while (2)
        {
          v13 = 0;
          v14 = v11;
          v15 = 1;
          while (v12[v13] != 94)
          {
            ++v13;
            if (v14 + (int)--v15 <= 1)
              return (const char *)StreamBytesThroughBuffer(a1, v13, v12);
          }
          if ((_DWORD)v13)
            StreamBytesThroughBuffer(a1, v13, v12);
          v11 = v14 - v13;
          v16 = &v12[v13 + 1];
          if (v14 - (int)v13 <= 0)
          {
            v12 += v13 + 1;
            continue;
          }
          break;
        }
        v35 = -1431655766;
        *(_QWORD *)&v17 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v17 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v33 = v17;
        v34 = v17;
        v31 = v17;
        v32 = v17;
        *(_OWORD *)__s = v17;
        v30 = v17;
        v12 += v13 + 2;
        v18 = *v16;
        if (v18 > 104)
        {
          if (v18 != 105)
          {
            if (v18 != 115)
              continue;
            v25 = v28++;
            v22 = *(_DWORD *)v25;
            v28 = v25 + 2;
            v20 = (char *)*((_QWORD *)v25 + 1);
            goto LABEL_25;
          }
          ++v28;
          v20 = v36;
          v26 = snprintf_l(v36, 0x10uLL, 0, "%d");
        }
        else
        {
          if (v18 != 100)
          {
            if (v18 != 102)
              continue;
            v19 = v28++;
            v20 = __s;
            snprintf_l(__s, 0x64uLL, 0, "%.15f", *v19);
            v21 = strlen(__s);
            v22 = v21;
            if (v21 >= 4)
            {
              v23 = v21 + 1;
              while (1)
              {
                v24 = (v23 - 2);
                v20 = __s;
                if (__s[v24] != 48)
                  break;
                __s[v24] = 0;
                --v22;
                if ((unint64_t)--v23 <= 4)
                {
                  v22 = 3;
                  goto LABEL_25;
                }
              }
            }
            goto LABEL_25;
          }
          ++v28;
          v20 = v36;
          v26 = snprintf_l(v36, 0x10uLL, 0, "%.4f");
        }
        break;
      }
      v22 = v26;
LABEL_25:
      StreamBytesThroughBuffer(a1, v22, v20);
      v11 = v14 - v13 - 2;
      continue;
    }
  }
  return result;
}

uint64_t ZWriteDataHex(uint64_t a1, int a2, char *__src, int a4)
{
  int *v7;
  int v8;
  int v9;
  uint64_t result;
  int v11;
  char *v12;
  int v13;

  if (!a4)
    return StreamBinaryThroughBuffer(a1, a2, __src);
  v7 = (int *)(a1 + 131112);
  v8 = *(_DWORD *)(a1 + 131112);
  if (v8 + a2 > 1024)
  {
    v9 = 1024 - v8;
  }
  else
  {
    *v7 = v8 + a2;
    v9 = a2;
  }
  result = StreamHexThroughBuffer(a1, v9, __src);
  v11 = a2 - v9;
  if (a2 != v9)
  {
    v12 = &__src[v9];
    do
    {
      *v7 = 0;
      StreamBytesThroughBuffer(a1, 2, "\n\r");
      if (v11 > 1024)
      {
        v13 = 1024;
      }
      else
      {
        *v7 = v11;
        v13 = v11;
      }
      result = StreamHexThroughBuffer(a1, v13, v12);
      v12 += v13;
      v11 -= v13;
    }
    while (v11);
  }
  return result;
}

const char *ZGetString(int a1, int *a2)
{
  const char *result;
  int v5;

  result = "%!FontType1-1.0: ^s ^d.^d\n";
  v5 = 26;
  switch(a1)
  {
    case 0:
      break;
    case 1:
      result = "%!PS-TrueTypeFont-^d-^d-2\n";
      break;
    case 2:
      result = "14 dict begin\n/FontName /^s def\n";
      v5 = 32;
      break;
    case 3:
      result = "/PaintType 0 def\n";
      goto LABEL_20;
    case 4:
      result = "/FontType 3 def\n";
      goto LABEL_55;
    case 5:
      result = "/FontType 42 def\n";
      goto LABEL_20;
    case 6:
      result = "/FontType 1 def\n";
      goto LABEL_55;
    case 7:
      result = "/Encoding ";
      goto LABEL_84;
    case 8:
    case 106:
      result = "readonly def\n";
      v5 = 13;
      break;
    case 9:
    case 102:
      result = "/FontMatrix matrix def\n";
      goto LABEL_53;
    case 10:
      result = "/FontBBox[^i ^i 1 index div ^i 2 index div ^i 3 index div ^i 5 -1 roll div]cvx def\n";
      v5 = 83;
      break;
    case 11:
      result = "/FontMatrix [ ^f 0 0 ^f 0 0 ] readonly def\n";
      v5 = 43;
      break;
    case 12:
      result = "/FontBBox {^i ^i ^i ^i} readonly def\n";
      v5 = 37;
      break;
    case 13:
      result = "/UniqueID ^i def\n";
LABEL_20:
      v5 = 17;
      break;
    case 14:
      result = "/sfnts [<\n";
      goto LABEL_84;
    case 15:
      result = "\n00><\n";
      goto LABEL_81;
    case 16:
      result = "\n00>] def\n";
LABEL_84:
      v5 = 10;
      break;
    case 17:
    case 109:
      result = "/CharStrings ^i dict dup begin\n";
      goto LABEL_63;
    case 18:
      result = "/^s ^i def\n";
      v5 = 11;
      break;
    case 19:
      result = " end readonly def\n";
      goto LABEL_57;
    case 20:
      result = "/TrueState 271 string def TrueDict begin sfnts save 72 0 matrix defaultmatrix dtransform dup mul exch dup"
               " mul add sqrt cvi 0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt cvi 3 -1 roll restor"
               "e TrueState initer end\n";
      v5 = 233;
      break;
    case 21:
      result = "/BuildChar{exch begin Encoding 1 index get CharStrings dup 2 index known{exch}{exch pop /.notdef}ifelse g"
               "et dup xcheck{currentdict systemdict begin begin exec end end}{exch pop TrueDict begin /bander load cvlit"
               " exch TrueState render end}ifelse end} bind def\n";
      v5 = 258;
      break;
    case 22:
      result = "currentdict dup/FontName get exch definefont pop end\n";
      v5 = 53;
      break;
    case 23:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
LABEL_8:
      v5 = 0;
      result = 0;
      break;
    case 24:
      result = "256 array 0 1 255 {1 index exch/.notdef put} for\n";
      v5 = 49;
      break;
    case 25:
    case 105:
      result = "dup ^i /^s put\n";
      v5 = 15;
      break;
    case 26:
      result = "currentfile eexec\n";
      goto LABEL_57;
    case 27:
      result = "0000000000000000000000000000000000000000000000000000000000000000\n";
      v5 = 65;
      break;
    case 28:
      result = "cleartomark\n";
      goto LABEL_67;
    case 29:
      result = "dup/Private 13 dict dup begin/RD{string currentfile exch readstring pop}executeonly def/ND{noaccess def}e"
               "xecuteonly def/NP{noaccess put}executeonly def/BlueValues[]def/MinFeature{16 16}def/password 5839 def/Oth"
               "erSubrs[{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{16384 div 4 1 roll 16384 div 4 1 roll 16384 div 4 1 roll"
               " 16384 div 4 1 roll 0 0 matrix astore matrix currentmatrix exch concat}executeonly{setmatrix}executeonly]noaccess def\n";
      v5 = 433;
      break;
    case 30:
      result = "/Subrs ";
      goto LABEL_36;
    case 31:
      result = " array\n";
LABEL_36:
      v5 = 7;
      break;
    case 32:
      result = "dup ";
      goto LABEL_41;
    case 33:
      result = " RD ";
      goto LABEL_41;
    case 34:
      result = " NP\n";
      goto LABEL_41;
    case 35:
      result = " ND\n";
LABEL_41:
      v5 = 4;
      break;
    case 36:
      result = "2 index/CharStrings ";
      v5 = 20;
      break;
    case 37:
      result = " dict dup begin\n";
      goto LABEL_55;
    case 38:
      result = "/.notdef 8 RD ";
      v5 = 14;
      break;
    case 39:
      result = "end end readonly put\nnoaccess put\ndup/FontName get exch definefont pop\nmark currentfile closefile\n";
      v5 = 98;
      break;
    case 40:
      result = "systemdict/product 2 copy known{get dup(LaserWriter IIf)eq exch(LaserWriter IIg)eq or version(2010.113)eq"
               " and not}{pop pop true}ifelse{/UniqueID ^i def}if\n";
      v5 = 155;
      break;
    case 41:
      result = "userdict/TTMakeVariationFont known userdict begin/TTMakeVariationFontDefined exch def end\n"
               "TTMakeVariationFontDefined{save}if userdict begin/TTMakeVariationFont{exch dup length 1 add dict exch{exc"
               "h dup dup/FID ne exch/UniqueID ne and{2 index 4 1 roll exch put}{pop pop}ifelse} forall begin/Variations "
               "exch def currentdict end/GXVariationfont exch definefont} bind def end TTMakeVariationFontDefined{restore}if\n";
      v5 = 409;
      break;
    case 42:
      result = "<";
      goto LABEL_51;
    case 43:
      result = "00> TTMakeVariationFont\n";
      goto LABEL_69;
    case 44:
      result = "(";
LABEL_51:
      v5 = 1;
      break;
    case 45:
      result = (const char *)&unk_1B0A432CC;
LABEL_53:
      v5 = 23;
      break;
    case 46:
      result = "currentdict end\n";
LABEL_55:
      v5 = 16;
      break;
    case 100:
      result = "14 dict dup begin\n";
LABEL_57:
      v5 = 18;
      break;
    case 101:
      result = "/FontType 3 def\n/PaintType 0 def\n/StrokeWidth 0 def\n";
      v5 = 52;
      break;
    case 103:
      result = "/FontBBox[^d ^d ^d ^d]def\n";
      break;
    case 104:
      result = "/Encoding 256 array 0 1 255 {1 index exch/.notdef put} for\n";
LABEL_86:
      v5 = 59;
      break;
    case 107:
      result = "/BuildChar{exch begin Encoding exch get CharStrings dup 2 index known{exch}{exch pop /.notdef}ifelse get "
               "dup xcheck{currentdict systemdict begin begin exec end end}{dup 0 get 0 2 index 1 4 getinterval aload pop"
               " setcachedevice dup 6 get exch dup 5 get 3 -1 roll true yopmatrix dup 4 6 index 7 get put dup 5 6 index 8"
               " get put 5 -1 roll 9 1 getinterval cvx imagemask}ifelse end}bind def\n";
      v5 = 384;
      break;
    case 108:
      result = "/yopmatrix [^i 0 0 ^i 0 0] def\n";
LABEL_63:
      v5 = 31;
      break;
    case 110:
      result = "/^s [^d ^d ^d ^d ^d ^i ^i ^d ^d <";
      goto LABEL_79;
    case 111:
      result = ">]def\n";
      goto LABEL_81;
    case 112:
      result = "end def end\n";
LABEL_67:
      v5 = 12;
      break;
    case 113:
      result = "/^s exch definefont pop\n";
LABEL_69:
      v5 = 24;
      break;
    case 114:
      result = "/yopmatrix[^i 0 ^i .25 mul ^i 0 0]def\n";
      v5 = 38;
      break;
    case 115:
      result = "/FontMatrix[1 0 .25 1 0 0]def\n";
      v5 = 30;
      break;
    case 116:
      result = "/GetShort {2 copy get 256 mul\n"
               "3 1 roll\n"
               "1 add\n"
               "get add\n"
               "} bind def\n"
               "/SignedByte {dup 127 gt {256 sub\n"
               "} if\n"
               "} bind def\n"
               "/LocalVariables 3 dict dup begin/theString null def\n"
               "/strInd 0 def\n"
               "/doingY false def\n"
               "end def/DrawGlyph {exec\n"
               "LocalVariables begin\n"
               "/theString exch def \n"
               "/strInd 0 def\n"
               "theString strInd GetShort\n"
               "/strInd strInd 2 add def\n";
      v5 = 328;
      break;
    case 117:
      result = "{theString strInd GetShort\n"
               "/strInd strInd 2 add def\n"
               "dup 0 gt {\n"
               "1 sub 2 mul\n"
               "theString strInd get SignedByte\n"
               "theString strInd 1 add get SignedByte moveto\n"
               "/strInd strInd 2 add def\n"
               "/doingY false def\n"
               "dup strInd add\texch\n"
               "theString strInd 3 -1 roll getinterval\n"
               "{SignedByte\n"
               "doingY {rlineto /doingY false def}\n"
               " {/doingY true def} ifelse \n"
               "} forall\n"
               "closepath \n"
               "/strInd exch def\n"
               "} if\n"
               "} repeat\n"
               "PaintType 2 eq { StrokeWidth\n"
               "setlinewidth stroke\n"
               "} {eofill\n"
               "} ifelse\n"
               "end\n";
      v5 = 452;
      break;
    case 118:
      result = "} bind def\n"
               "/BuildChar{exch begin Encoding exch get CharStrings dup 2 index known{exch}{exch pop /.notdef}ifelse get\n"
               "dup 0 get\n"
               " 0\n"
               "3 -1 roll\n"
               "dup 1 get exch dup 2 get exch dup 3 get exch dup 4 get exch\n"
               "7 1 roll\n"
               "setcachedevice\n"
               "yopmatrix matrix invertmatrix concat\n"
               "9 get DrawGlyph\n"
               "end}bind def\n";
      v5 = 289;
      break;
    case 119:
      result = "/sfnts [(";
      v5 = 9;
      break;
    case 120:
      result = (const char *)&unk_1B0A432F0;
      v5 = 3;
      break;
    case 121:
      result = (const char *)&unk_1B0A432C3;
      v5 = 8;
      break;
    case 122:
      result = "/^s [^d ^d ^d ^d ^d ^i ^i ^d ^d (";
LABEL_79:
      v5 = 33;
      break;
    case 123:
      result = ")]def\n";
LABEL_81:
      v5 = 6;
      break;
    default:
      switch(a1)
      {
        case 200:
          result = "42/FontType resourcestatus{pop pop false}{true}ifelse\n"
                   "%APLsfntBegin\n"
                   "{currentfile 0(%APLsfntEnd\\n)/SubFileDecode filter flushfile}if\n";
          v5 = 132;
          break;
        case 201:
          result = "%APLsfntEnd\n"
                   "42/FontType resourcestatus{pop pop true}{false}ifelse\n"
                   "{currentfile 0(%APLT1End\\n)/SubFileDecode filter flushfile}if\n";
          v5 = 128;
          break;
        case 202:
          result = "%APLT1End\n";
          goto LABEL_84;
        case 203:
          result = "/FontInfo 1 dict dup begin\n/FSType ^i def\nend readonly def\n";
          goto LABEL_86;
        default:
          goto LABEL_8;
      }
      break;
  }
  *a2 = v5;
  return result;
}

BOOL ZGetGlyphID(uint64_t a1, unsigned int a2, char *__s, unsigned int a4, unsigned __int16 *a5)
{
  unsigned int v10;
  int v11;
  unsigned int v12;
  BOOL v13;
  unsigned int v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unsigned int v19;
  unint64_t v20;
  uint64_t v21;
  unsigned int v22;
  const char *v23;
  uint64_t v24;
  BOOL v25;
  unsigned __int8 *v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  unsigned int v32;
  const char *v33;
  int v34;
  unsigned int v35;
  char *v36;
  int v37;
  _BOOL8 result;
  int v39;
  int v40;
  unsigned int v41;
  char *v42;
  int v43;
  int Hex;
  unsigned __int16 v45;
  char *i;
  unsigned int v47;
  int v48;
  unsigned __int16 v49;
  int v50;
  size_t __n;
  int v52;

  v10 = strlen(__s);
  v11 = v10;
  if (a1 && a2 >= 0x20 && v10)
  {
    v12 = bswap32(*(_DWORD *)a1) - 0x10000;
    v13 = *(_DWORD *)a1 != 512 || a2 >= 0x21;
    if (v13)
      v14 = v12;
    else
      v14 = 0;
    HIDWORD(v15) = v14;
    LODWORD(v15) = v14;
    switch((v15 >> 15))
    {
      case 0u:
        *a5 = ZGetCanonIndexFromGlyphName(__s, v10);
        return 1;
      case 2u:
        if (!*(_WORD *)(a1 + 32))
          goto LABEL_42;
        v16 = 0;
        v17 = a1 + 34;
        v18 = a1 + a2;
        v19 = __rev16(*(unsigned __int16 *)(a1 + 32));
        v20 = a1 + 34 + 2 * v19;
        __n = v10;
        if (v19 <= 1)
          v21 = 1;
        else
          v21 = v19;
        while (2)
        {
          v22 = bswap32(*(unsigned __int16 *)(v17 + 2 * v16)) >> 16;
          if (v22 > 0x101)
          {
            v25 = v22 == 258 || v20 >= v18;
            v26 = (unsigned __int8 *)v20;
            if (!v25)
            {
              v27 = v22 - 259;
              v26 = (unsigned __int8 *)v20;
              do
              {
                v26 += *v26 + 1;
                v13 = v27-- != 0;
              }
              while (v13 && (unint64_t)v26 < v18);
            }
            if ((unint64_t)v26 >= v18)
              return 0;
            v23 = (const char *)(v26 + 1);
            v24 = *v26;
            if ((unint64_t)&v26[v24] >= v18)
              return 0;
          }
          else
          {
            v23 = &CanonGlyphNameTable[18 * v22];
            LODWORD(v24) = strlen(v23);
          }
          if (v11 != (_DWORD)v24 || *__s != *v23 || strncmp(v23, __s, __n))
          {
            if (++v16 == v21)
              goto LABEL_42;
            continue;
          }
          break;
        }
        *a5 = v16;
        return 1;
      case 3u:
        if (!*(_WORD *)(a1 + 32))
          goto LABEL_42;
        v28 = 0;
        v29 = a1 + 34;
        v30 = __rev16(*(unsigned __int16 *)(a1 + 32));
        if (v30 <= 1)
          v31 = 1;
        else
          v31 = v30;
        while (1)
        {
          v32 = v28 + *(char *)(v29 + v28);
          if (v32 <= 0x101)
          {
            v33 = &CanonGlyphNameTable[18 * v32];
            if (v11 == strlen(v33) && *__s == *v33 && !strcmp(__s, v33))
              break;
          }
          if (v31 == ++v28)
            goto LABEL_42;
        }
        *a5 = v28;
        return 1;
      case 6u:
        if (v10 == 7 && !strncmp(__s, ".notdef", 7uLL))
          goto LABEL_65;
        v39 = *__s;
        if (v39 == 97)
        {
          if (v11 != 5 && v11 != 3)
            goto LABEL_52;
          v52 = 0;
          Hex = SimpleGetHex(__s + 1, &v52);
          if (!a4 || !Hex)
            goto LABEL_52;
          v45 = 0;
          while (v52 != bswap32(*(unsigned __int16 *)(a1 + 32 + 2 * v45)) >> 16)
          {
            if (a4 <= ++v45)
              goto LABEL_52;
          }
          *a5 = v45;
        }
        else
        {
          if (v39 != 117)
          {
            if (v39 == 103 && __s[1] == 105 && __s[2] == 100)
            {
              v40 = __s[3];
              if (__s[3])
              {
                v41 = 0;
                v42 = __s + 4;
                while ((v40 - 58) >= 0xFFFFFFF6)
                {
                  v41 = v40 + 10 * v41 - 48;
                  v43 = *v42++;
                  v40 = v43;
                  if (!v43)
                    goto LABEL_97;
                }
                result = 0;
                LOWORD(v41) = 0;
              }
              else
              {
                v41 = 0;
LABEL_97:
                result = v41 < a4;
                if (v41 >= a4)
                  LOWORD(v41) = 0;
              }
              *a5 = v41;
              return result;
            }
            goto LABEL_52;
          }
          if (__s[1] != 110 || __s[2] != 105 || v11 < 9)
            goto LABEL_52;
          for (i = __s + 5; ; ++i)
          {
            if ((*(i - 2) - 58) <= 0xF5u)
            {
              v47 = *(i - 2) - 46;
              if (v47 > 0x38)
                goto LABEL_52;
              if (((1 << v47) & 0x1F8000001F80000) == 0)
                break;
            }
          }
          if (*(i - 2) != 46)
            goto LABEL_52;
          v48 = *(i - 1);
          if (*(i - 1))
          {
            v49 = 0;
            do
            {
              if ((v48 - 58) < 0xFFFFFFF6)
                goto LABEL_52;
              v49 = v48 + 10 * v49 - 48;
              v50 = *i++;
              v48 = v50;
            }
            while (v50);
          }
          else
          {
            v49 = 0;
          }
          *a5 = v49;
        }
        break;
      default:
        goto LABEL_42;
    }
    return 1;
  }
LABEL_42:
  if (*__s == 103 && __s[1] == 105 && __s[2] == 100)
  {
    v34 = __s[3];
    if (__s[3])
    {
      v35 = 0;
      v36 = __s + 4;
      while ((v34 - 58) >= 0xFFFFFFF6)
      {
        v35 = v34 + 10 * v35 - 48;
        v37 = *v36++;
        v34 = v37;
        if (!v37)
          goto LABEL_68;
      }
      goto LABEL_52;
    }
    v35 = 0;
LABEL_68:
    if (v35 >= a4)
      goto LABEL_52;
    *a5 = v35;
  }
  else
  {
    if (v11 != 7 || strncmp(__s, ".notdef", 7uLL))
    {
LABEL_52:
      result = 0;
      *a5 = 0;
      return result;
    }
LABEL_65:
    *a5 = 0;
  }
  return 1;
}

uint64_t ZGetCanonIndexFromGlyphName(const char *a1, unsigned int a2)
{
  uint64_t v3;
  size_t v4;
  const char *i;

  v3 = 0;
  v4 = a2;
  for (i = ".notdef"; strlen(i) != v4 || strncmp(i, a1, v4); i += 18)
  {
    if (++v3 == 258)
      return 0;
  }
  return v3;
}

uint64_t SimpleGetHex(const char *a1, int *a2)
{
  int v2;
  int v3;
  const char *v4;
  int v5;
  int v6;

  v2 = *(unsigned __int8 *)a1;
  if (*a1)
  {
    v3 = 0;
    v4 = a1 + 1;
    while (1)
    {
      if ((v2 - 58) > 0xFFFFFFF5)
      {
        v5 = -48;
      }
      else if ((v2 - 71) > 0xFFFFFFF9)
      {
        v5 = -55;
      }
      else
      {
        if ((v2 - 103) < 0xFFFFFFFA)
          return 0;
        v5 = -87;
      }
      v3 = v2 + 16 * v3 + v5;
      v6 = *(unsigned __int8 *)v4++;
      v2 = v6;
      if (!v6)
        goto LABEL_12;
    }
  }
  v3 = 0;
LABEL_12:
  *a2 = v3;
  return 1;
}

uint64_t ZMergeAndCountLongBits(unsigned int *a1, unsigned int *a2, int a3)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  int v6;

  v3 = 0;
  if (a3)
  {
    do
    {
      v4 = *a2++;
      v5 = *a1 | v4;
      *a1 = v5;
      if (v5)
      {
        v6 = 32;
        do
        {
          v3 = (v5 & 1) + v3;
          if (v5 < 2)
            break;
          v5 >>= 1;
          --v6;
        }
        while ((_WORD)v6);
      }
      ++a1;
      a3 = (__int16)(a3 - 1);
    }
    while (a3 > 0);
  }
  return v3;
}

size_t *ENewBuffer(uint64_t a1, memoryContext **a2)
{
  size_t *result;
  uint64_t v5;
  int v6;
  __int16 v7;
  char v8;
  int v9;

  result = ScalerNewScratch(*a2, 0x400u, 0);
  v5 = 0;
  *(_QWORD *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 16) = 0;
  v6 = 4;
  *(_QWORD *)(a1 + 24) = a2;
  v9 = 1998898061;
  v7 = -9871;
  do
  {
    v8 = HIBYTE(v7);
    v7 = 22719 - 12691 * (v7 + (*((_BYTE *)&v9 + v5) ^ ((unsigned __int16)(v7 & 0xFF00) >> 8)));
    *((_BYTE *)result + v5) = *((_BYTE *)&v9 + v5) ^ v8;
    --v6;
    ++v5;
  }
  while ((_WORD)v6);
  *(_QWORD *)a1 = (char *)result + v5;
  *(_DWORD *)(a1 + 16) += 4;
  *(_WORD *)(a1 + 20) = v7;
  return result;
}

uint64_t EDumpBuffer(uint64_t result)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;

  v1 = *(_DWORD *)(result + 16);
  if (v1)
  {
    v2 = result;
    v3 = *(_QWORD *)(result + 24);
    v4 = *(char **)(v2 + 8);
    if ((*(_BYTE *)(*(_QWORD *)(v3 + 8) + 18) & 1) == 0)
    {
      StreamHexThroughBuffer(v3, v1, v4);
      v3 = *(_QWORD *)(v2 + 24);
      v4 = "\n\r";
      v1 = 2;
    }
    result = StreamBytesThroughBuffer(v3, v1, v4);
    *(_QWORD *)v2 = *(_QWORD *)(v2 + 8);
    *(_DWORD *)(v2 + 16) = 0;
  }
  return result;
}

uint64_t EWriteByte(uint64_t result, __int16 a2)
{
  unsigned __int16 v2;
  unsigned int v3;

  v2 = *(_WORD *)(result + 20);
  *(_WORD *)(result + 20) = -12691 * (v2 + (a2 ^ HIBYTE(v2))) + 22719;
  *(_BYTE *)(*(_QWORD *)result)++ = a2 ^ HIBYTE(v2);
  v3 = *(_DWORD *)(result + 16) + 1;
  *(_DWORD *)(result + 16) = v3;
  if (v3 >= 0x400)
    return EDumpBuffer(result);
  return result;
}

uint64_t EWriteBytesAny(uint64_t result, int a2, char *a3)
{
  int v4;
  uint64_t v5;
  unsigned int v6;
  int v7;
  __int16 v8;
  _BYTE *v9;
  char *v10;
  int v11;
  char v12;
  char v13;
  BOOL v14;

  if (a2)
  {
    v4 = a2;
    v5 = result;
    do
    {
      v6 = *(_DWORD *)(v5 + 16);
      if (v4 >= (int)(1024 - v6))
        v7 = 1024 - v6;
      else
        v7 = v4;
      if ((_WORD)v7)
      {
        v8 = *(_WORD *)(v5 + 20);
        v9 = *(_BYTE **)v5;
        v10 = a3;
        LOWORD(v11) = v7;
        do
        {
          v12 = *v10++;
          v13 = HIBYTE(v8);
          v8 = 22719 - 12691 * (v8 + (v12 ^ ((unsigned __int16)(v8 & 0xFF00) >> 8)));
          *v9++ = v12 ^ v13;
          v11 = (__int16)(v11 - 1);
        }
        while (v11 > 0);
        *(_QWORD *)v5 = v9;
        v6 = *(_DWORD *)(v5 + 16) + v7;
        *(_DWORD *)(v5 + 16) = v6;
        *(_WORD *)(v5 + 20) = v8;
      }
      if (v6 >= 0x400)
        result = EDumpBuffer(v5);
      a3 += v7;
      v14 = __OFSUB__(v4, v7);
      v4 -= v7;
    }
    while (!((v4 < 0) ^ v14 | (v4 == 0)));
  }
  return result;
}

uint64_t EWriteGlyphName(uint64_t a1, char *a2, int a3)
{
  EWriteByte(a1, 47);
  EWriteBytesAny(a1, a3, a2);
  return EWriteByte(a1, 32);
}

_QWORD *EGrowCSBuffer(uint64_t a1, int a2)
{
  signed int v3;
  _QWORD *result;

  v3 = *(_DWORD *)(a1 + 20) + 32 * a2;
  result = ScalerNewBlock(**(memoryContext ***)(a1 + 32), v3, -1, *(_QWORD **)(a1 + 8), 0, 0, 0);
  *(_DWORD *)(a1 + 20) = v3;
  *(_QWORD *)a1 = (char *)result + *(unsigned int *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

_QWORD *EWriteCSByte(_QWORD *result, char a2)
{
  _QWORD *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = result;
  v4 = *((_DWORD *)result + 5);
  if (v4 <= *((_DWORD *)result + 4) + 1)
  {
    v5 = v4 + 32;
    result = ScalerNewBlock(*(memoryContext **)result[4], v4 + 32, -1, (_QWORD *)result[1], 0, 0, 0);
    *((_DWORD *)v3 + 5) = v5;
    *v3 = (char *)result + *((unsigned int *)v3 + 4);
    v3[1] = result;
  }
  if (!*((_DWORD *)v3 + 6))
  {
    *(_BYTE *)(*v3)++ = a2;
    ++*((_DWORD *)v3 + 4);
  }
  return result;
}

_QWORD *EWriteCSByte2(_QWORD *result, char a2)
{
  _QWORD *v3;
  unsigned int v4;
  unsigned int v5;
  _BYTE *v6;

  v3 = result;
  v4 = *((_DWORD *)result + 5);
  if (v4 <= *((_DWORD *)result + 4) + 2)
  {
    v5 = v4 + 64;
    result = ScalerNewBlock(*(memoryContext **)result[4], v4 + 64, -1, (_QWORD *)result[1], 0, 0, 0);
    *((_DWORD *)v3 + 5) = v5;
    *v3 = (char *)result + *((unsigned int *)v3 + 4);
    v3[1] = result;
  }
  if (!*((_DWORD *)v3 + 6))
  {
    v6 = (_BYTE *)*v3;
    *v6 = 12;
    v6[1] = a2;
    *v3 = v6 + 2;
    *((_DWORD *)v3 + 4) += 2;
  }
  return result;
}

_QWORD *EWriteCSNumber(_QWORD *result, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v10;
  _BYTE *v11;
  int v12;
  int *v13;
  int v14;
  uint64_t *v15;

  v10 = result;
  v15 = &a9;
  if (*((_DWORD *)result + 5) <= (*((_DWORD *)result + 4) + 5 * a2))
    result = EGrowCSBuffer((uint64_t)result, a2);
  if (!*((_DWORD *)v10 + 6))
  {
    v11 = (_BYTE *)*v10;
    v12 = a2 + 1;
    while (1)
    {
      v13 = (int *)v15++;
      v14 = *v13;
      if ((v14 + 107) > 0xD6)
      {
        if ((v14 - 108) > 0x3FF)
        {
          if ((v14 + 1131) > 0x3FF)
          {
            *v11 = -1;
            v11[1] = HIBYTE(v14);
            v11[2] = BYTE2(v14);
            v11[3] = BYTE1(v14);
            v11[4] = v14;
            v11 += 5;
            goto LABEL_13;
          }
          *v11 = ((unsigned __int16)(-108 - v14) >> 8) - 5;
          v11[1] = -108 - v14;
        }
        else
        {
          *v11 = ((unsigned __int16)(v14 - 108) >> 8) - 9;
          v11[1] = v14 - 108;
        }
        v11 += 2;
      }
      else
      {
        *v11++ = v14 - 117;
      }
LABEL_13:
      if (--v12 <= 1)
      {
        *((_DWORD *)v10 + 4) += (_DWORD)v11 - *(_DWORD *)v10;
        *v10 = v11;
        return result;
      }
    }
  }
  return result;
}

uint64_t EWriteCSString(uint64_t a1, uint64_t a2)
{
  int v4;
  int *v5;
  int v6;
  char v7;
  int v8;
  _BYTE *v9;
  char v10;
  int v12;

  v12 = 1869051240;
  v4 = 4;
  v5 = &v12;
  v6 = 4330;
  do
  {
    v7 = BYTE1(v6);
    v6 = 22719 - 12691 * (v6 + (*(_BYTE *)v5 ^ ((unsigned __int16)(v6 & 0xFF00) >> 8)));
    *(_BYTE *)v5 ^= v7;
    v5 = (int *)((char *)v5 + 1);
    --v4;
  }
  while ((_WORD)v4);
  v8 = *(_DWORD *)(a2 + 16);
  if ((_WORD)v8)
  {
    v9 = *(_BYTE **)(a2 + 8);
    do
    {
      v10 = BYTE1(v6);
      v6 = 22719 - 12691 * (v6 + (*v9 ^ ((unsigned __int16)(v6 & 0xFF00) >> 8)));
      *v9++ ^= v10;
      v8 = (__int16)(v8 - 1);
    }
    while (v8 > 0);
  }
  EWriteBytesAny(a1, 4, (char *)&v12);
  return EWriteBytesAny(a1, *(_DWORD *)(a2 + 16), *(char **)(a2 + 8));
}

uint64_t GetGlyphOffsetAndSize(int a1, char *a2, int a3, unsigned int *a4, unint64_t a5)
{
  unsigned int *v5;
  int v8;
  uint64_t result;
  char *v10;
  unsigned int v13;

  if (!a3)
  {
    v10 = &a2[2 * a1];
    if (a5)
    {
      if (((unint64_t)v10 > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v10 + 4) > a5)
        && ((unint64_t)(v10 + 2) > a5 || ((a5 - (_QWORD)v10) & 0xFFFFFFFFFFFFFFFELL) != 4))
      {
        return 0;
      }
    }
    v13 = bswap32(*(unsigned __int16 *)v10);
    v8 = 2 * HIWORD(v13);
    result = 2 * ((bswap32(*((unsigned __int16 *)v10 + 1)) >> 16) - HIWORD(v13));
    if (!a4)
      return result;
LABEL_27:
    *a4 = v8;
    return result;
  }
  v5 = (unsigned int *)&a2[4 * a1];
  if (a5)
  {
    if (((unint64_t)v5 > 0xFFFFFFFFFFFFFFF7 || (unint64_t)(v5 + 2) > a5)
      && ((unint64_t)(v5 + 1) > a5 || ((a5 - (_QWORD)v5) & 0xFFFFFFFFFFFFFFFCLL) != 8))
    {
      return 0;
    }
  }
  v8 = bswap32(*v5);
  result = bswap32(v5[1]) - v8;
  if (a4)
    goto LABEL_27;
  return result;
}

uint64_t InitVariationInfo(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t *a4)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  size_t *v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const void *v18;
  __int128 __src;
  _OWORD v21[6];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if ((int)a3 < 1)
    return 0;
  v5 = *(_QWORD *)(a1 + 8);
  if (!*(_BYTE *)(v5 + 155))
    return 0;
  v9 = *(int *)(v5 + 72);
  v10 = *(int *)(v5 + 76) * (uint64_t)(int)v9;
  v11 = 2 * v10;
  v12 = ScalerNewScratch(*(memoryContext **)a1, 2 * (int)v10 + 2 * (int)v9, 0);
  *(_QWORD *)(a2 + 8) = v12;
  *(_QWORD *)(a2 + 16) = (char *)v12 + 2 * v9;
  *(_QWORD *)(a2 + 24) = v12;
  *(_DWORD *)a2 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 72);
  *(_QWORD *)&v13 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v13 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v21[4] = v13;
  v21[5] = v13;
  v21[2] = v13;
  v21[3] = v13;
  v21[0] = v13;
  v21[1] = v13;
  __src = 0uLL;
  std::vector<CGFontVariation,TInlineBufferAllocator<CGFontVariation,4ul>>::vector(v21, a3, &__src);
  v14 = *(_QWORD *)&v21[0];
  v15 = 8 * a3;
  do
  {
    v16 = *a4++;
    *(_QWORD *)v14 = v16;
    *(double *)(v14 + 8) = (double)SHIDWORD(v16) * 0.0000152587891;
    v14 += 16;
    v15 -= 8;
  }
  while (v15);
  (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(**(_QWORD **)a1 + 24) + 408))(*(_QWORD *)(**(_QWORD **)a1 + 24), a3, *(_QWORD *)&v21[0], *(_QWORD *)(a2 + 8));
  v17 = *(_QWORD *)(a1 + 8);
  if (*(_DWORD *)(v17 + 76))
  {
    *(_QWORD *)&__src = 0xAAAAAAAAAAAAAAAALL;
    ScalerGetFontTable(*(memoryContext **)a1, 1735811442, *(_DWORD *)(v17 + 68), &__src, 0, v11);
    v18 = (const void *)__src;
    memcpy(*(void **)(a2 + 16), (const void *)__src, v11);
    ScalerReleaseFontTable(*(memoryContext **)a1, v18);
  }
  *(_QWORD *)&__src = v21;
  std::vector<CGFontVariation,TInlineBufferAllocator<CGFontVariation,4ul>>::__destroy_vector::operator()[abi:fe180100]((void ***)&__src);
  return a2;
}

void sub_1B09BE1F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  a9 = (void **)&a11;
  std::vector<CGFontVariation,TInlineBufferAllocator<CGFontVariation,4ul>>::__destroy_vector::operator()[abi:fe180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t InitGlyphInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  memoryContext *v5;
  unsigned __int16 *v6;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  size_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  memoryContext *v22;
  uint64_t v23;
  unsigned int FontTable;
  const void *v25;
  size_t v26;
  size_t *v27;
  uint64_t result;
  _WORD *exception;
  unint64_t v30;

  v5 = *(memoryContext **)a1;
  v6 = *(unsigned __int16 **)(a1 + 8);
  v8 = v6[21];
  if (v8 <= v6[23])
    v8 = v6[23];
  v9 = v6[22];
  v10 = v6[24];
  if (v9 <= v10)
    v11 = v10;
  else
    v11 = v9;
  *(_DWORD *)a2 = -1;
  v12 = v8 + 8;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 240) = a3;
  *(_QWORD *)(a2 + 248) = a1;
  *(_BYTE *)(a2 + 260) = 0;
  v13 = ScalerNewScratch(v5, 22 * v12 + 4 * v11, 1);
  *(_QWORD *)(a2 + 72) = v13;
  v14 = (uint64_t)v13 + 4 * v12 + 4 * v12;
  v15 = v14 + 2 * v11;
  *(_QWORD *)(a2 + 104) = v14;
  *(_QWORD *)(a2 + 112) = v15;
  v16 = v15 + 2 * v11;
  *(_QWORD *)(a2 + 120) = v16;
  *(_QWORD *)(a2 + 128) = v16 + v12;
  *(_DWORD *)(a2 + 188) = v11;
  *(_DWORD *)(a2 + 192) = v12;
  if (v13)
  {
    v17 = v16 + v12 + v12;
    v18 = v17 + 4 * v12;
    v19 = v18 + 4 * v12;
    v20 = v19 + 2 * v12;
    v21 = v20 + 2 * v12;
  }
  else
  {
    v17 = 1358921729;
    v18 = 1358921729;
    v19 = 1358921729;
    v20 = 1358921729;
    v21 = 1358921729;
  }
  *(_QWORD *)(a2 + 136) = v17;
  *(_QWORD *)(a2 + 144) = v18;
  *(_QWORD *)(a2 + 152) = v19;
  *(_QWORD *)(a2 + 160) = v20;
  *(_QWORD *)(a2 + 200) = v21;
  *(_QWORD *)(a2 + 88) = 1358921729;
  *(_QWORD *)(a2 + 96) = 1358921729;
  v22 = *(memoryContext **)a1;
  v23 = *(_QWORD *)(a1 + 8);
  *(_WORD *)(a2 + 232) = *(_WORD *)(v23 + 146);
  *(_WORD *)(a2 + 216) = *(_WORD *)(v23 + 144);
  v30 = 0xAAAAAAAAAAAAAAAALL;
  FontTable = ScalerGetFontTable(v22, 1752003704, 0, &v30, 1, 0);
  if (FontTable && (v25 = (const void *)v30) != 0)
  {
    v26 = FontTable;
    if (FontTable < 4 * (unint64_t)*(unsigned __int16 *)(a2 + 232))
      *(_WORD *)(a2 + 232) = FontTable >> 2;
    v27 = ScalerNewScratch(*(memoryContext **)a1, FontTable, 0);
    *(_QWORD *)(a2 + 224) = v27;
    memcpy(v27, v25, v26);
    *(_QWORD *)(a2 + 264) = *(_QWORD *)(a2 + 224) + v26;
    ScalerReleaseFontTable(*(memoryContext **)a1, v25);
  }
  else
  {
    *(_QWORD *)(a2 + 224) = 0;
    *(_QWORD *)(a2 + 264) = 0;
  }
  result = ScalerGetFontTable(*(memoryContext **)a1, 1819239265, 0, (_QWORD *)(a2 + 208), 1, 0);
  if ((_DWORD)result != *(_DWORD *)(*(_QWORD *)(a1 + 8) + 100))
  {
    exception = __cxa_allocate_exception(2uLL);
    *exception = 5;
    __cxa_throw(exception, MEMORY[0x1E0DE4F10], 0);
  }
  *(_QWORD *)(a2 + 272) = *(_QWORD *)(a2 + 208) + result;
  return result;
}

void UninitGlyphInfo(memoryContext **a1, uint64_t a2)
{
  char *v4;
  const void *v5;
  uint64_t v6;

  v4 = *(char **)(a2 + 224);
  if (v4)
    ScalerDisposeBlock(*a1, v4, -1);
  v5 = *(const void **)(a2 + 208);
  if (v5)
    ScalerReleaseFontTable(*a1, v5);
  if (*(_BYTE *)(a2 + 260))
  {
    ScalerReleaseFontTable(*a1, *(const void **)(a2 + 16));
    *(_BYTE *)(a2 + 260) = 0;
  }
  ScalerDisposeBlock(*a1, *(char **)(a2 + 72), -1);
  v6 = *(_QWORD *)(a2 + 240);
  if (v6)
    ScalerDisposeBlock(*a1, *(char **)(v6 + 24), -1);
}

void GetGlyphForStreaming(unsigned int a1, unsigned int *a2, int a3, int a4)
{
  uint64_t v6;
  unsigned __int16 GlyphOffsetAndSize;
  uint64_t v10;
  uint64_t v11;
  unsigned __int16 *v12;
  unsigned __int16 *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  int FontTable;
  unsigned __int16 *v19;
  unint64_t v20;
  unsigned __int16 *v21;
  int v22;
  _WORD *v23;
  __int128 v24;
  int v25;
  unint64_t v26;
  unsigned __int16 *v27;
  unsigned int v28;
  uint64_t v29;
  unint64_t v30;
  _WORD *v31;
  __int128 v32;
  unsigned int v33;
  int *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  char v39;
  int v40;
  unsigned __int16 *v41;
  unsigned __int16 *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  unsigned int v50;
  unsigned int v52;
  unsigned int v53;
  float *v54;
  _WORD *v55;
  float *v56;
  _WORD *v57;
  _WORD *v58;
  unsigned int v59;
  __int16 v60;
  int v61;
  int v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  unint64_t v69;
  _WORD *v70;
  _WORD *v71;
  _WORD *v72;
  unint64_t v73;
  _WORD *v74;
  _WORD *v75;
  _WORD *exception;
  int32x2_t *v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;

  if ((a1 & 0x80000000) != 0)
    goto LABEL_112;
  v6 = *((_QWORD *)a2 + 31);
  if (*(unsigned __int16 *)(*(_QWORD *)(v6 + 8) + 40) < a1)
    goto LABEL_112;
  if (!(a4 | a3) && *a2 == a1)
    return;
  *a2 = a1;
  if (*((_BYTE *)a2 + 260))
  {
    ScalerReleaseFontTable(*(memoryContext **)v6, *((const void **)a2 + 2));
    *((_BYTE *)a2 + 260) = 0;
  }
  GlyphOffsetAndSize = GetGlyphOffsetAndSize((unsigned __int16)a1, *((char **)a2 + 26), *((_WORD *)a2 + 108) != 0, a2 + 1, *((_QWORD *)a2 + 34));
  *((_WORD *)a2 + 4) = GlyphOffsetAndSize;
  a2[64] = 0;
  *((_QWORD *)a2 + 8) = 0;
  v10 = *((_QWORD *)a2 + 28);
  if (!v10)
  {
LABEL_112:
    exception = __cxa_allocate_exception(2uLL);
    *exception = 5;
    __cxa_throw(exception, MEMORY[0x1E0DE4F10], 0);
  }
  v11 = *((unsigned __int16 *)a2 + 116);
  if (a1 >= v11)
  {
    v15 = v10 + 4 * v11;
    *((_WORD *)a2 + 117) = bswap32(*(unsigned __int16 *)(v15 - 4)) >> 16;
    v16 = v15 - 4 + 2 * (int)(a1 - v11);
    if ((unint64_t)(v16 + 6) > *((_QWORD *)a2 + 33))
    {
      LOWORD(v17) = 0;
      goto LABEL_14;
    }
    v13 = (unsigned __int16 *)(v16 + 4);
  }
  else
  {
    v12 = (unsigned __int16 *)(v10 + 4 * a1);
    v14 = *v12;
    v13 = v12 + 1;
    *((_WORD *)a2 + 117) = bswap32(v14) >> 16;
  }
  v17 = bswap32(*v13) >> 16;
LABEL_14:
  *((_WORD *)a2 + 118) = v17;
  if (GlyphOffsetAndSize < 0xBu)
  {
    v20 = 0;
    goto LABEL_26;
  }
  FontTable = ScalerGetFontTable(*(memoryContext **)v6, 1735162214, a2[1], (_QWORD *)a2 + 2, 0, GlyphOffsetAndSize);
  v19 = (unsigned __int16 *)*((_QWORD *)a2 + 2);
  v20 = (unint64_t)v19 + FontTable - a2[1];
  *((_BYTE *)a2 + 260) = 1;
  if (!v19)
  {
LABEL_26:
    LOWORD(v28) = 0;
    v21 = 0;
    v25 = 0;
    a2[6] = 0;
    v23 = a2 + 6;
    *(_QWORD *)&v32 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v32 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v80 = v32;
    v81 = v32;
    v78 = v32;
    v79 = v32;
    v77 = 0;
    goto LABEL_27;
  }
  if ((unint64_t)(v19 + 1) > v20)
    goto LABEL_112;
  v21 = v19 + 5;
  v22 = bswap32(*v19);
  *((_WORD *)a2 + 12) = HIWORD(v22);
  v23 = a2 + 6;
  *(_QWORD *)&v24 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v24 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v80 = v24;
  v81 = v24;
  v25 = v22 >> 16;
  v78 = v24;
  v79 = v24;
  v77 = 0;
  if (v25 > 0)
  {
    if (v25 > *(unsigned __int16 *)(*(_QWORD *)(v6 + 8) + 44)
      || *((unsigned __int16 *)a2 + 4) <= 2 * (unint64_t)(v25 + 1))
    {
      LOWORD(v28) = 0;
      v25 = 0;
      *((_QWORD *)a2 + 5) = 0;
      *((_WORD *)a2 + 24) = 0;
      *((_QWORD *)a2 + 7) = 0;
      v26 = (unint64_t)(v19 + 5);
      a2[6] = 0;
    }
    else
    {
      *((_QWORD *)a2 + 5) = v21;
      v26 = (unint64_t)&v21[(unsigned __int16)v25 + 1];
      if (v26 > v20
        || (v27 = &v21[(unsigned __int16)v25],
            v28 = (bswap32(*(v27 - 1)) >> 16) + 1,
            *((_WORD *)a2 + 13) = v28,
            v29 = bswap32(*v27) >> 16,
            *((_WORD *)a2 + 24) = v29,
            *((_QWORD *)a2 + 7) = v26,
            (unint64_t)v19 > v26)
        || (v30 = v29 + v26, v30 < v26)
        || v30 > v20)
      {
        v31 = __cxa_allocate_exception(2uLL);
        *v31 = 5;
        __cxa_throw(v31, MEMORY[0x1E0DE4F10], 0);
      }
    }
    goto LABEL_28;
  }
  LOWORD(v28) = *((_WORD *)a2 + 13);
LABEL_27:
  *((_WORD *)a2 + 24) = 0;
  *((_QWORD *)a2 + 7) = v21;
  v26 = (unint64_t)v21;
LABEL_28:
  v33 = *a2;
  a2[20] = v25;
  v34 = (int *)(a2 + 20);
  a2[42] = v33;
  a2[21] = (unsigned __int16)v28;
  v35 = *((_QWORD *)a2 + 30);
  if (v35)
  {
    v36 = *(_QWORD *)(v35 + 8);
    v37 = *(_QWORD *)(v35 + 16);
    LOBYTE(v35) = 1;
  }
  else
  {
    v37 = 1358921729;
    v36 = 1358921729;
  }
  *(_QWORD *)&v81 = 1358921729;
  *(_QWORD *)&v80 = v37;
  *(_QWORD *)&v79 = v36;
  BYTE8(v81) = v35;
  *(_QWORD *)(v6 + 16) = &v78;
  *(_QWORD *)(v6 + 24) = 1358921729;
  *(_QWORD *)(v6 + 32) = 1358921729;
  *(_QWORD *)(v6 + 40) = 1358921729;
  StretchGlyph((uint64_t *)v6, (uint64_t)(a2 + 20), 0, &v77, 0, (_BYTE *)a2 + 258, 0);
  if (a3)
    v38 = *((_BYTE *)a2 + 258) == 0;
  else
    v38 = 1;
  v39 = !v38;
  v40 = *v34;
  if (*v34 >= 1)
  {
    v41 = (unsigned __int16 *)*((_QWORD *)a2 + 13);
    v42 = (unsigned __int16 *)*((_QWORD *)a2 + 14);
    v43 = *((_QWORD *)a2 + 19);
    v44 = *((_QWORD *)a2 + 20);
    v45 = *((_QWORD *)a2 + 15);
    v46 = a2[48];
    do
    {
      v48 = *v41++;
      v47 = v48;
      v50 = *v42++;
      v49 = v50;
      if (v50 < v47 || v46 <= (int)v49)
      {
        v75 = __cxa_allocate_exception(2uLL);
        *v75 = 5;
        __cxa_throw(v75, MEMORY[0x1E0DE4F10], 0);
      }
      if (*(unsigned __int16 *)(v43 + 2 * v47) == *(unsigned __int16 *)(v43 + 2 * v49)
        && *(unsigned __int16 *)(v44 + 2 * v47) == *(unsigned __int16 *)(v44 + 2 * v49)
        && *(unsigned __int8 *)(v45 + v47) != *(unsigned __int8 *)(v45 + v49))
      {
        *(_BYTE *)(v45 + v49) = 1;
        *(_BYTE *)(v45 + v47) = 1;
      }
      --v40;
    }
    while (v40);
  }
  if (a4)
    v39 = 1;
  if ((v39 & 1) != 0)
  {
    v52 = a2[20];
    v53 = a2[21];
    *((_WORD *)a2 + 12) = v52;
    *((_WORD *)a2 + 13) = v53;
    *((_WORD *)a2 + 24) = 0;
  }
  else
  {
    LOWORD(v52) = *v23;
  }
  *(_QWORD *)(a2 + 7) = *(_QWORD *)(a2 + 43);
  *(unsigned int *)((char *)a2 + 234) = a2[45];
  if ((v52 & 0x8000u) == 0)
    v39 = 1;
  v54 = (float *)v77;
  if ((v39 & 1) == 0)
  {
    v55 = (_WORD *)*((_QWORD *)a2 + 9);
    *((_QWORD *)a2 + 8) = v55;
    if (v54)
      v56 = &v54[(int)(CountGlyphComponents((const __int16 *)v26, v20, 0) + 4)];
    else
      v56 = 0;
    v57 = v55 + 5;
    if ((unint64_t)(v55 + 5) > *((_QWORD *)a2 + 25))
    {
LABEL_110:
      v74 = __cxa_allocate_exception(2uLL);
      *v74 = 5;
      __cxa_throw(v74, MEMORY[0x1E0DE4F10], 0);
    }
    *v55 = -1;
    v55[1] = bswap32(*((unsigned __int16 *)a2 + 14)) >> 16;
    v55[2] = bswap32(*((unsigned __int16 *)a2 + 15)) >> 16;
    v55[3] = bswap32(*((unsigned __int16 *)a2 + 16)) >> 16;
    v55[4] = bswap32(*((unsigned __int16 *)a2 + 17)) >> 16;
    while (1)
    {
      ++*((_WORD *)a2 + 128);
      v58 = (_WORD *)(v26 + 6);
      if (v26 + 6 > v20)
        goto LABEL_110;
      v59 = __rev16(*(_WORD *)v26 & 0xFFFE);
      v60 = *(_WORD *)(v26 + 2);
      if ((v59 & 2) != 0)
      {
        if ((v59 & 1) == 0)
        {
          v61 = *(char *)(v26 + 4);
          v62 = *(char *)(v26 + 5);
          v59 |= 1u;
          goto LABEL_69;
        }
      }
      else
      {
        *((_BYTE *)a2 + 259) = 1;
        if ((v59 & 1) == 0)
        {
          v61 = *(unsigned __int8 *)(v26 + 4);
          v62 = *(unsigned __int8 *)(v26 + 5);
          goto LABEL_69;
        }
      }
      v58 = (_WORD *)(v26 + 8);
      if (v26 + 8 > v20)
        goto LABEL_110;
      v61 = bswap32(*(unsigned __int16 *)(v26 + 4)) >> 16;
      v62 = bswap32(*(unsigned __int16 *)(v26 + 6)) >> 16;
LABEL_69:
      if (v77)
      {
        if ((v59 & 2) != 0)
        {
          v63 = roundf(*v54 + (float)(__int16)v61);
          if (v63 <= 32767.0)
            v64 = v63;
          else
            v64 = 32767.0;
          if (v63 >= -32768.0)
            v65 = v64;
          else
            v65 = -32768.0;
          v61 = (int)v65;
          v66 = roundf(*v56 + (float)(__int16)v62);
          if (v66 <= 32767.0)
            v67 = v66;
          else
            v67 = 32767.0;
          if (v66 >= -32768.0)
            v68 = v67;
          else
            v68 = -32768.0;
          v62 = (int)v68;
        }
        ++v54;
        ++v56;
      }
      v69 = *((_QWORD *)a2 + 25);
      if ((unint64_t)(v57 + 2) > v69)
        goto LABEL_110;
      *v57 = __rev16(v59);
      v57[1] = v60;
      if ((v59 & 1) != 0)
      {
        v70 = v57 + 4;
        if ((unint64_t)(v57 + 4) > v69)
          goto LABEL_110;
        v57[2] = bswap32(v61) >> 16;
        v57[3] = bswap32(v62) >> 16;
      }
      else
      {
        v70 = v57 + 3;
        if ((unint64_t)(v57 + 3) > v69)
          goto LABEL_110;
        *((_BYTE *)v57 + 4) = v61;
        *((_BYTE *)v57 + 5) = v62;
      }
      v57 = v70;
      if ((v59 & 0xC8) == 0)
        goto LABEL_103;
      v71 = v58 + 1;
      if ((unint64_t)(v58 + 1) > v20)
        goto LABEL_110;
      v72 = v57 + 1;
      v73 = *((_QWORD *)a2 + 25);
      if ((unint64_t)(v57 + 1) > v73)
        goto LABEL_110;
      *v57 = *v58;
      if ((v59 & 0x80) != 0)
      {
        if ((unint64_t)(v58 + 4) > v20 || (unint64_t)(v57 + 4) > v73)
          goto LABEL_110;
        v57[1] = v58[1];
        v71 = v58 + 3;
        v72 = v57 + 3;
        v57[2] = v58[2];
        v58 += 4;
        v57 += 4;
        goto LABEL_102;
      }
      if ((v59 & 0x40) != 0)
      {
        v58 += 2;
        if ((unint64_t)v58 > v20)
          goto LABEL_110;
        v57 += 2;
        if ((unint64_t)v57 > v73)
          goto LABEL_110;
LABEL_102:
        *v72 = *v71;
        goto LABEL_103;
      }
      ++v58;
      ++v57;
LABEL_103:
      v26 = (unint64_t)v58;
      if ((v59 & 0x20) == 0)
      {
        v54 = (float *)v77;
        break;
      }
    }
  }
  v77 = 0;
  if (v54)
    MEMORY[0x1B5E0CD14](v54, 0x1000C8052888210);
}

void sub_1B09BEBC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    MEMORY[0x1B5E0CD14](a10, 0x1000C8052888210);
  _Unwind_Resume(exception_object);
}

uint64_t AccumulateComponentGlyphBits(memoryContext *a1, int *a2, unsigned int *a3, unsigned int *a4, unsigned int a5, _DWORD *a6)
{
  int v6;
  unsigned int *v8;
  int v9;
  unsigned int *v10;
  int v11;
  unsigned int v12;
  int v13;
  int v14;
  uint64_t v15;
  unsigned int *v17;
  int *v18;
  unsigned int v23;
  unsigned int v24[2];

  v6 = *a2;
  if (!*a2)
    return 0;
  v18 = a2;
  HIDWORD(v17) = v6 + 31;
  v8 = (unsigned int *)ScalerNewScratch(a1, ((v6 + 31) >> 3) & 0xFFFFFFFC, 1);
  v9 = 0;
  v10 = a3;
  do
  {
    if (*v10)
    {
      v11 = 0;
      v12 = 0x80000000;
      do
      {
        if ((*v10 & v12) != 0)
        {
          v13 = v9 + v11;
          if (v9 + v11 >= v6)
          {
            a3[v13 >> 5] &= ~(0x80000000 >> v11);
          }
          else if ((v8[v13 >> 5] & (0x80000000 >> v11)) == 0)
          {
            *(_QWORD *)v24 = 0;
            v23 = 0;
            LODWORD(v17) = 0;
            if (SetComponentGlyphs(a1, (unsigned __int16)(v9 + v11), v6, v8, a4, (const void *)a5, 0, &v24[1], v24, &v23, v17, v18))
            {
              if (a6)
              {
                if (*a6 < v24[1])
                  *a6 = v24[1];
                if (a6[1] < v24[0])
                  a6[1] = v24[0];
                if (a6[2] < v23)
                  a6[2] = v23;
              }
            }
            else
            {
              a3[(uint64_t)v13 >> 5] &= ~(0x80000000 >> v11);
            }
          }
        }
        v12 >>= 1;
        ++v11;
      }
      while (v11 != 32);
    }
    v9 += 32;
    ++v10;
  }
  while (v9 < v6);
  v14 = ZMergeAndCountLongBits(a3, v8, (__int16)(SHIDWORD(v17) >> 5));
  if (v14 >= v6)
    v15 = v6;
  else
    v15 = v14;
  *v18 = v6;
  ScalerDisposeBlock(a1, (char *)v8, -1);
  return v15;
}

uint64_t SetComponentGlyphs(memoryContext *a1, unsigned int a2, int a3, unsigned int *a4, unsigned int *a5, const void *a6, int a7, _DWORD *a8, unsigned int *a9, unsigned int *a10, unsigned int *a11, unsigned int a12)
{
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned __int16 *v21;
  unsigned int v22;
  int FontTable;
  char *v24;
  uint64_t v25;
  unsigned __int16 *v26;
  unsigned __int16 *v27;
  int v28;
  uint64_t v29;
  unsigned __int16 *v30;
  unint64_t v32;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _DWORD *v40;
  _DWORD *exception;
  _DWORD *v42;
  _DWORD *v43;
  unsigned int *v44;
  uint64_t v45;
  void *v47;

  if (a11 >= 0x10)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E6176998;
    exception[2] = 4;
  }
  if ((_DWORD)a6)
  {
    v18 = &a5[a2];
    v19 = bswap32(*v18);
    v20 = bswap32(v18[1]) - v19;
  }
  else
  {
    v21 = (unsigned __int16 *)a5 + a2;
    v22 = bswap32(*v21);
    v19 = 2 * HIWORD(v22);
    v20 = 2 * ((bswap32(v21[1]) >> 16) - HIWORD(v22));
  }
  if (v20 < 0xB)
    return 1;
  v47 = 0;
  FontTable = ScalerGetFontTable(a1, 1735162214, v19, &v47, 1, v20);
  v24 = (char *)v47;
  if (!v47)
    return 0;
  v25 = FontTable - v19;
  v26 = (unsigned __int16 *)((char *)v47 + v25);
  if ((char *)v47 + 2 > (char *)v47 + v25)
  {
    v42 = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)v42 = &off_1E6176998;
    v42[2] = 4;
  }
  v27 = (unsigned __int16 *)((char *)v47 + 10);
  v28 = (int)bswap32(*(unsigned __int16 *)v47) >> 16;
  if (v28 < 0)
  {
    HIDWORD(v45) = (_DWORD)a11 + 1;
    if (*a10 <= a11)
      *a10 = HIDWORD(v45);
    do
    {
      if ((unint64_t)v27 > 0xFFFFFFFFFFFFFFFBLL || v24 > (char *)v27 || v27 + 2 > v26)
      {
        v40 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v40 = &off_1E6176998;
        v40[2] = 4;
      }
      v34 = bswap32(*v27);
      if (a7 && (v34 & 0xC80000) != 0)
        break;
      v35 = bswap32(v27[1]);
      if ((int)HIWORD(v35) < a3)
      {
        a4[v35 >> 21] |= 0x80000000 >> SBYTE2(v35);
        LODWORD(v44) = HIDWORD(v45);
        SetComponentGlyphs(a1, HIWORD(v35), a3, a4, a5, a6, a7, a8, a9, a10, v44, v45);
      }
      if ((v34 & 0x10000) != 0)
        v36 = 2;
      else
        v36 = 1;
      v37 = v36 + ((v34 >> 19) & 1);
      if ((v34 & 0x400000) != 0)
        v37 = v36 + 2;
      v38 = v36 | 4;
      if ((v34 & 0x800000) == 0)
        v38 = v37;
      v27 += v38 + 2;
    }
    while ((v34 & 0x200000) != 0);
    v29 = 1;
  }
  else
  {
    v29 = 1;
    if ((_DWORD)a11 && *(_WORD *)v47)
    {
      *a9 += v28;
      v30 = &v27[(unsigned __int16)v28];
      if (v30 < v27 || v30 > v26)
      {
        v32 = (unint64_t)(v25 - 10) >> 1;
        if (v24 + 12 > (char *)v26 || v32 != (unsigned __int16)v28)
        {
          v43 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v43 = &off_1E6176998;
          v43[2] = 4;
        }
      }
      *a8 += (bswap32(v27[v28 - 1]) >> 16) + 1;
    }
  }
  ScalerReleaseFontTable(a1, v24);
  return v29;
}

void sub_1B09BF144(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B09BF02CLL);
}

memoryContext *FindComponentsFromGlyfTable(memoryContext *result, int a2, unsigned int *a3, unsigned int *a4, unsigned int *a5, void *a6, int a7)
{
  memoryContext *v13;
  int v14;
  int v15;
  unsigned int v16;
  BOOL v17;
  unsigned int *v18;
  unsigned int v19[2];

  v13 = result;
  v14 = 0;
  do
  {
    if (*a3)
    {
      v15 = 0;
      v16 = 0x80000000;
      do
      {
        v17 = v14 + v15 >= a2 || (*a3 & v16) == 0;
        if (!v17 && ((a4[(v14 + v15) >> 5] << v15) & 0x80000000) == 0)
          result = (memoryContext *)SetComponentGlyphs(v13, (unsigned __int16)(v14 + v15), a2, a4, a5, a6, a7, &v19[1], v19, (unsigned int *)&v18 + 1, 0, 0);
        v16 >>= 1;
        ++v15;
      }
      while (v15 != 32);
    }
    v14 += 32;
    ++a3;
  }
  while (v14 < a2);
  return result;
}

void TType1PDT1Font::~TType1PDT1Font(TType1PDT1Font *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E61CC0A8;
  v2 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

{
  uint64_t v2;

  *(_QWORD *)this = off_1E61CC0A8;
  v2 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x1B5E0CD38);
}

void TType1PDT1Font::TType1PDT1Font(TType1PDT1Font *this, const TType1Font *a2)
{
  _QWORD *FontObject;
  uint64_t v4;
  _WORD *exception;

  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = a2;
  *(_QWORD *)this = &off_1E61B64C0;
  *((_WORD *)this + 4) = 0;
  FontObject = TType1PSFont::GetFontObject(this);
  v4 = (*(uint64_t (**)(TType1PDT1Font *))(*(_QWORD *)this + 120))(this);
  if ((*(unsigned int (**)(_QWORD *, uint64_t))(*FontObject + 64))(FontObject, v4) + 1 <= 1)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E61B2D68;
    exception[4] = 5;
  }
  *((_WORD *)this + 8) = *(_WORD *)(*(_QWORD *)(*((_QWORD *)this + 4) + 128) + 56);
}

void sub_1B09BF398(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v3;

  *v1 = off_1E61CC0A8;
  v3 = v1[3];
  v1[3] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  _Unwind_Resume(exception_object);
}

uint64_t TType1PDT1Font::GetFontDataTableTag(TType1PDT1Font *this)
{
  return 1346655281;
}

uint64_t TType1PDT1Font::GetFontDataHeaderSize(TType1PDT1Font *this)
{
  return 0;
}

uint64_t TType1PDT1Font::GetFontDataLength(TType1PDT1Font *this, unsigned int *a2, unsigned int *a3)
{
  __int128 v6;
  const TFontObjectSurrogate *v7;
  uint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unsigned int *v13;
  const unsigned __int8 *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  char *v18;
  int v19;
  BOOL v20;
  unsigned int v21;
  const unsigned __int8 *v22;
  const unsigned __int8 *v23;
  int v24;
  unsigned int v25;
  int v26;
  const unsigned __int8 *v27;
  int v28;
  _WORD *exception;
  unsigned __int8 v31[4];
  unsigned int v32;
  unsigned int v33;
  _OWORD v34[2];
  char *v35[2];
  unint64_t v36;

  v36 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v6 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v34[1] = v6;
  *(_OWORD *)v35 = v6;
  v34[0] = v6;
  v7 = (const TFontObjectSurrogate *)(*(uint64_t (**)(TType1PDT1Font *))(*(_QWORD *)this + 216))(this);
  v8 = (*(uint64_t (**)(TType1PDT1Font *))(*(_QWORD *)this + 120))(this);
  TFontObjectTable::TFontObjectTable((TFontObjectTable *)v34, v7, v8);
  v10 = LODWORD(v34[0]);
  v32 = -1431655766;
  v33 = -1431655766;
  v11 = *(_QWORD *)(*((_QWORD *)this + 4) + 200);
  if (v11)
    v12 = "currentfile eexec";
  else
    v12 = "systemdict begin";
  *(_DWORD *)v31 = v34[0];
  v14 = TType1PSFont::ScanForKey((TType1PSFont *)v12, v35[1], v31, &v32, &v33, v9);
  v15 = v33;
  v16 = *(_DWORD *)v31;
  v17 = *(_DWORD *)v31 - v33;
  v20 = *(_DWORD *)v31 == v33;
  *(_DWORD *)v31 -= v33;
  v18 = (char *)v14;
  if (!v20)
  {
    do
    {
      v19 = *v18;
      v20 = v19 == 13 || v19 == 10;
      if (!v20)
      {
        v16 = v15;
        goto LABEL_12;
      }
      ++v18;
      ++v15;
      --v17;
    }
    while (v17);
    v15 = v16;
LABEL_12:
    v33 = v16;
    *(_DWORD *)v31 = v17;
  }
  v21 = v32 + v15;
  *a2 = v21;
  if (v11)
  {
    v22 = TType1PSFont::ScanForKey((TType1PSFont *)"cleartomark", v18, v31, &v32, &v33, v13);
    v23 = &v22[-v33 - 1];
    v24 = 511;
    v25 = v32;
    do
    {
      v26 = v24;
      --v25;
      v27 = v23;
      while (1)
      {
        v28 = *v27--;
        v32 = v25;
        if (v28 == 48)
          break;
        --v25;
        v23 = v27;
        if (v27 <= v14)
        {
          exception = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)exception = &off_1E61B2D68;
          exception[4] = 5;
        }
      }
      v24 = v26 - 1;
      --v23;
    }
    while (v26);
  }
  else
  {
    v25 = v10 - v21;
  }
  *a3 = v25;
  *((_QWORD *)&v34[0] + 1) = &off_1E6176770;
  TDataReference::DucRefCount((TDataReference *)((char *)v34 + 8));
  return v10;
}

void sub_1B09BF5CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  TFontObjectTable::~TFontObjectTable((TFontObjectTable *)va);
  _Unwind_Resume(a1);
}

void TType1PDT1Font::GetCharOutline(TType1PDT1Font *this@<X0>, unsigned __int16 *a2@<X2>, _QWORD *a3@<X8>)
{
  __int128 v5;
  __int16 v6;
  void *v7;
  void *__src[2];
  __int128 v9;
  __int128 v10;
  __int128 v11;

  *(_QWORD *)&v5 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v10 = v5;
  v11 = v5;
  *(_OWORD *)__src = v5;
  v9 = v5;
  (*(void (**)(void **__return_ptr))(**((_QWORD **)this + 4) + 488))(__src);
  v6 = v9;
  *a2 = v9;
  if (v6)
  {
    *a3 = 0xAAAAAAAAAAAAAAAALL;
    v7 = (void *)operator new[]();
    *a3 = v7;
    memcpy(v7, __src[1], *a2);
  }
  else
  {
    *a3 = 0;
  }
  TCharString::~TCharString(__src);
}

void sub_1B09BF67C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  TCharString::~TCharString(&a9);
  _Unwind_Resume(a1);
}

void *TType1PDT1Font::FindCharName(TType1PDT1Font *this, unsigned int a2, unsigned __int8 *a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 *v6;
  void *result;
  _WORD *exception;

  v3 = *((_QWORD *)this + 4);
  v4 = *(unsigned int *)(*(_QWORD *)(v3 + 192) + 4 * a2);
  if ((v4 & 0x80000000) != 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E61B2D68;
    exception[4] = 5;
  }
  v6 = (unsigned __int8 *)(*(_QWORD *)(v3 + 48) + v4);
  result = memcpy(a3 + 2, v6 + 1, *v6);
  a3[1] = 47;
  *a3 = *v6 + 1;
  return result;
}

uint64_t TType1PDT1Font::GetGlyphID(TType1PDT1Font *this, const unsigned __int8 *a2, int a3)
{
  _QWORD *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  size_t v13;

  v6 = (_QWORD *)*((_QWORD *)this + 4);
  v7 = v6[24];
  v8 = (*(uint64_t (**)(_QWORD *))(*v6 + 168))(v6);
  if (v8 >= 0xFFFF)
    v9 = 0xFFFFLL;
  else
    v9 = v8;
  if ((_DWORD)v9)
  {
    v10 = 0;
    while (1)
    {
      v11 = *(unsigned int *)(v7 + 4 * v10);
      if ((v11 & 0x80000000) == 0)
      {
        v12 = (unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)this + 4) + 48) + v11);
        v13 = *v12;
        if ((_DWORD)v13 == a3 && !memcmp(v12 + 1, a2, v13))
          break;
      }
      if (v9 == ++v10)
        goto LABEL_10;
    }
  }
  else
  {
LABEL_10:
    LOWORD(v10) = 0;
  }
  return (unsigned __int16)v10;
}

void TPDT1CharStringContext::~TPDT1CharStringContext(TPDT1CharStringContext *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1E61B6608;
  v2 = *((_QWORD *)this + 37);
  *((_QWORD *)this + 37) = 0;
  if (v2)
    MEMORY[0x1B5E0CD14](v2, 0x1000C8077774924);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_1E61B6608;
  v2 = *((_QWORD *)this + 37);
  *((_QWORD *)this + 37) = 0;
  if (v2)
    MEMORY[0x1B5E0CD14](v2, 0x1000C8077774924);
  JUMPOUT(0x1B5E0CD38);
}

void TBufferedPDT1CharStringStreamingContext::~TBufferedPDT1CharStringStreamingContext(TBufferedPDT1CharStringStreamingContext *this)
{
  TBufferedCharStringStreamingContext::~TBufferedCharStringStreamingContext(this);
  JUMPOUT(0x1B5E0CD38);
}

uint64_t TBufferedPDT1CharStringStreamingContext::StreamDecryptedCharString(TBufferedPDT1CharStringStreamingContext *this, const TType1PSFont *a2, uint64_t a3, char *a4, int *a5)
{
  __int128 v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  BOOL v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t result;
  _WORD *exception;
  unint64_t v20;
  __int16 v21;
  void (**v22)(TPDT1CharStringContext *__hidden);
  _OWORD v23[16];
  char *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v10 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v23[15] = v10;
  v23[14] = v10;
  v23[13] = v10;
  v23[12] = v10;
  v23[11] = v10;
  v23[10] = v10;
  v23[9] = v10;
  v23[8] = v10;
  v23[7] = v10;
  v23[5] = v10;
  v23[6] = v10;
  v23[3] = v10;
  v23[4] = v10;
  v23[1] = v10;
  v23[2] = v10;
  v23[0] = v10;
  v24 = "/.notdef";
  v25 = 8;
  v26 = 0;
  v27 = 0;
  v22 = &off_1E61B6608;
  v28 = 0;
  v11 = *(_QWORD *)(*((_QWORD *)a2 + 4) + 104);
  (*(void (**)(const TType1PSFont *, uint64_t, _OWORD *))(*(_QWORD *)a2 + 232))(a2, a3, v23);
  v24 = (char *)v23 + 1;
  v25 = LOBYTE(v23[0]);
  v27 = *(unsigned int *)(v11 + 8 * a3 + 4);
  v21 = -21846;
  v20 = 0xAAAAAAAAAAAAAAAALL;
  (*(void (**)(unint64_t *__return_ptr, const TType1PSFont *, uint64_t, __int16 *))(*(_QWORD *)a2 + 128))(&v20, a2, a3, &v21);
  v12 = v20;
  v26 = v20;
  if (*((__int16 *)a2 + 8) >= 1)
  {
    v13 = *((unsigned __int16 *)a2 + 8);
    v14 = v27 >= v13;
    v15 = v27 - v13;
    if (!v14)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)exception = &off_1E61B2D68;
      exception[4] = 5;
    }
    v27 = v15;
  }
  v20 = 0;
  v16 = v28;
  v28 = v12;
  if (v16)
  {
    MEMORY[0x1B5E0CD14](v16, 0x1000C8077774924);
    v17 = v20;
    v20 = 0;
    if (v17)
      MEMORY[0x1B5E0CD14](v17, 0x1000C8077774924);
  }
  TBufferedCharStringStreamingContext::DoCharString(this, (uint64_t)&v22, a4, (uint64_t)a5);
  result = v28;
  v22 = &off_1E61B6608;
  v28 = 0;
  if (result)
    return MEMORY[0x1B5E0CD14](result, 0x1000C8077774924);
  return result;
}

void sub_1B09BFAA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49)
{
  if (a10)
    MEMORY[0x1B5E0CD14](a10, 0x1000C8077774924);
  if (a49)
    MEMORY[0x1B5E0CD14](a49, 0x1000C8077774924);
  _Unwind_Resume(exception_object);
}

uint64_t TType1PDT1Font::StreamPSFont(_QWORD **a1, uint64_t a2, int a3, uint64_t a4, unsigned int *a5, uint64_t a6, const char *a7, uint64_t a8, _DWORD *a9, uint64_t a10)
{
  uint64_t v15;
  __int32 *v16;
  __int128 v17;
  unsigned int v18;
  unsigned __int16 *v19;
  int8x8_t v20;
  uint64_t v21;
  unsigned int *v22;
  int v23;
  unsigned int v24;
  __int32 *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  const TFontObjectSurrogate *v29;
  uint64_t v30;
  unsigned __int8 *v31;
  __int128 v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int *v37;
  unsigned __int8 *v38;
  _BOOL4 v39;
  uint64_t v40;
  char v41;
  char v42;
  unsigned __int8 *v43;
  uint64_t result;
  int v45;
  unsigned __int8 *v46;
  unsigned int v47[2];
  _OWORD v48[2];
  __int128 v49;
  unint64_t v50;
  unint64_t v51;
  _BYTE __b[696];
  void (**v53)(TBufferedStreamingContext *__hidden);
  _QWORD **v54;
  __int32 *v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  unsigned int v63[4];
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  uint64_t v95;

  v95 = *MEMORY[0x1E0C80C00];
  v15 = ((uint64_t (*)(_QWORD **, _QWORD))(*a1)[6])(a1, *a9);
  *a9 = v15;
  v51 = 0xAAAAAAAAAAAAAAAALL;
  ((void (*)(unint64_t *__return_ptr, _QWORD **, uint64_t, uint64_t))(*a1)[30])(&v51, a1, v15, a8);
  v16 = (__int32 *)v51;
  *(_QWORD *)&v17 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v17 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v94 = v17;
  v93 = v17;
  v92 = v17;
  v91 = v17;
  v90 = v17;
  v89 = v17;
  v88 = v17;
  v87 = v17;
  v86 = v17;
  v85 = v17;
  v84 = v17;
  v83 = v17;
  v82 = v17;
  v81 = v17;
  v80 = v17;
  v79 = v17;
  v78 = v17;
  v77 = v17;
  v76 = v17;
  v75 = v17;
  v74 = v17;
  v73 = v17;
  v72 = v17;
  v71 = v17;
  v70 = v17;
  v68 = v17;
  v69 = v17;
  v66 = v17;
  v67 = v17;
  v64 = v17;
  v65 = v17;
  *(_OWORD *)v63 = v17;
  v18 = (*(uint64_t (**)(_QWORD *))(*a1[4] + 168))(a1[4]);
  if (v18 >= 0xFFFF)
    v21 = 0xFFFFLL;
  else
    v21 = v18;
  v22 = a5;
  if (!a5)
  {
    v22 = v63;
    TType1PSFont::SetEncoding(v21, v16, v63, v19);
  }
  if ((*a9 & 0x200) != 0)
  {
    *(_QWORD *)&v26 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v26 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v62 = v26;
    v61 = v26;
    v60 = v26;
    v59 = v26;
    v58 = v26;
    v53 = &off_1E61B63B8;
    v54 = a1;
    v55 = v16;
    *(_QWORD *)&v56 = ((uint64_t (*)(_QWORD **))(*a1)[5])(a1);
    *((_QWORD *)&v56 + 1) = a10;
    v57 = (unint64_t)operator new[]();
    LODWORD(v58) = 0;
    *(_DWORD *)((char *)&v58 + 6) = 0;
    *(_QWORD *)&v27 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v27 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)&__b[352] = v27;
    *(_OWORD *)&__b[368] = v27;
    *(_OWORD *)&__b[320] = v27;
    *(_OWORD *)&__b[336] = v27;
    *(_OWORD *)&__b[288] = v27;
    *(_OWORD *)&__b[304] = v27;
    *(_OWORD *)&__b[256] = v27;
    *(_OWORD *)&__b[272] = v27;
    *(_OWORD *)&__b[224] = v27;
    *(_OWORD *)&__b[240] = v27;
    *(_OWORD *)&__b[192] = v27;
    *(_OWORD *)&__b[208] = v27;
    *(_OWORD *)&__b[160] = v27;
    *(_OWORD *)&__b[176] = v27;
    *(_OWORD *)&__b[128] = v27;
    *(_OWORD *)&__b[144] = v27;
    *(_OWORD *)&__b[96] = v27;
    *(_OWORD *)&__b[112] = v27;
    *(_OWORD *)&__b[64] = v27;
    *(_OWORD *)&__b[80] = v27;
    *(_OWORD *)&__b[32] = v27;
    *(_OWORD *)&__b[48] = v27;
    *(_OWORD *)__b = v27;
    *(_OWORD *)&__b[16] = v27;
    TCFFFontSet::TCFFFontSet((TCFFFontSet *)__b, 1, 0, 1, a7);
    *(_QWORD *)__b = &off_1E61CB900;
    ((void (*)(_QWORD **, __int32 *, unsigned int *, _BYTE *, uint64_t))(*a1)[33])(a1, v16, v22, __b, 255);
    TCFFFontSet::StreamOut((TCFFFontSet *)__b, (TBufferedStreamingContext *)&v53);
    TCFFFontSet::~TCFFFontSet((TCFFFontSet *)__b);
    TBufferedStreamingContext::~TBufferedStreamingContext((TBufferedStreamingContext *)&v53);
    goto LABEL_35;
  }
  if ((*a9 & 2) == 0)
    goto LABEL_35;
  if (v16)
  {
    v23 = 0;
    if ((_DWORD)v21)
    {
      v24 = (v21 + 31) >> 5;
      v25 = v16;
      do
      {
        if (*v25)
        {
          v20.i32[0] = *v25;
          v20 = vcnt_s8(v20);
          v20.i16[0] = vaddlv_u8((uint8x8_t)v20);
          v23 += v20.i32[0];
        }
        ++v25;
        --v24;
      }
      while (v24);
    }
    if (a5 || v23 != (_DWORD)v21)
      goto LABEL_26;
  }
  else if (a5)
  {
    goto LABEL_26;
  }
  if ((a3 & 1) == 0 && ((_WORD)a1[1] & 0x4000) != 0)
  {
LABEL_26:
    memset(__b, 170, sizeof(__b));
    TBufferedCharStringStreamingContext::TBufferedCharStringStreamingContext((uint64_t)__b, (uint64_t)a1, (uint64_t)v16, a10);
    *(_QWORD *)__b = &off_1E61B67A0;
    v40 = ((uint64_t (*)(_QWORD **))(*a1)[5])(a1);
    if ((*a9 & 0x10000) != 0)
      v41 = 0;
    else
      v41 = a3;
    TType1PSFont::StreamType1Font(a1, v40, a7, 0, (uint64_t)v22, a3, v41, (uint64_t)__b);
    TBufferedCharStringStreamingContext::~TBufferedCharStringStreamingContext((TBufferedCharStringStreamingContext *)__b);
    goto LABEL_35;
  }
  v50 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v28 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v28 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v48[1] = v28;
  v49 = v28;
  v48[0] = v28;
  v29 = (const TFontObjectSurrogate *)((uint64_t (*)(_QWORD **))(*a1)[27])(a1);
  v30 = ((uint64_t (*)(_QWORD **))(*a1)[15])(a1);
  TFontObjectTable::TFontObjectTable((TFontObjectTable *)v48, v29, v30);
  v47[0] = -1431655766;
  v47[1] = -1431655766;
  v45 = ((uint64_t (*)(_QWORD **, unsigned int *, unsigned int *))(*a1)[37])(a1, &v47[1], v47);
  v31 = (unsigned __int8 *)*((_QWORD *)&v49 + 1);
  v46 = (unsigned __int8 *)*((_QWORD *)&v49 + 1);
  *(_QWORD *)&v32 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v32 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v62 = v32;
  v61 = v32;
  v60 = v32;
  v59 = v32;
  v58 = v32;
  v57 = v32;
  v56 = v32;
  v53 = &off_1E61B63B8;
  v54 = a1;
  v55 = v16;
  *(_QWORD *)&v56 = ((uint64_t (*)(_QWORD **))(*a1)[5])(a1);
  *((_QWORD *)&v56 + 1) = a10;
  v57 = (unint64_t)operator new[]();
  LODWORD(v58) = 0;
  *(_DWORD *)((char *)&v58 + 6) = 0;
  v33 = v47[0];
  v34 = v47[1];
  if (a7)
  {
    v35 = ((uint64_t (*)(_QWORD **))(*a1)[14])(a1);
    if (strcmp(a7, (const char *)(v35 + 1)))
    {
      v46 = (unsigned __int8 *)TBufferedStreamingContext::StreamSubstituteHeaderComment((TBufferedStreamingContext *)&v53, a7, (char *)v31, &v47[1]);
      TBufferedStreamingContext::StreamTillSubstitutedFontName((TBufferedStreamingContext *)&v53, a7, (const unsigned __int8 **)&v46, &v47[1], v36, v37);
      v31 = v46;
    }
  }
  TBufferedStreamingContext::BufferString((uint64_t)&v53, v31, v47[1]);
  v38 = &v31[v47[1]];
  v46 = v38;
  if (a3)
    v39 = a1[4][25] == 0;
  else
    v39 = 0;
  if ((*a9 & 0x10000) != 0)
    v42 = 0;
  else
    v42 = a3;
  TBufferedStreamingContext::BeginEexec((TBufferedStreamingContext *)&v53, v39, v42);
  TBufferedStreamingContext::BufferString((uint64_t)&v53, v38, v47[0]);
  v43 = &v38[v47[0]];
  v46 = v43;
  TBufferedStreamingContext::EndEexec((uint64_t)&v53);
  TBufferedStreamingContext::BufferString((uint64_t)&v53, v43, v45 - (v34 + v33));
  TBufferedStreamingContext::StreamBuffer((uint64_t)&v53);
  TBufferedStreamingContext::~TBufferedStreamingContext((TBufferedStreamingContext *)&v53);
  *((_QWORD *)&v48[0] + 1) = &off_1E6176770;
  TDataReference::DucRefCount((TDataReference *)((char *)v48 + 8));
LABEL_35:
  result = v51;
  v51 = 0;
  if (result)
    return MEMORY[0x1B5E0CD14](result, 0x1000C8052888210);
  return result;
}

void sub_1B09C00E4(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void TType1PFAFont::TType1PFAFont(TType1PFAFont *this, const TType1Font *a2)
{
  uint64_t v3;
  _WORD *exception;

  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = a2;
  *(_QWORD *)this = &off_1E61B6628;
  *((_WORD *)this + 4) = 0;
  v3 = (*(uint64_t (**)(const TType1Font *))(*(_QWORD *)a2 + 56))(a2);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3) + 1 <= 1)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E61B2D68;
    exception[4] = 5;
  }
  *((_WORD *)this + 8) = *(_WORD *)(*(_QWORD *)(*((_QWORD *)this + 4) + 128) + 56);
}

void sub_1B09C0384(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v3;

  *v1 = off_1E61CC0A8;
  v3 = v1[3];
  v1[3] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  _Unwind_Resume(exception_object);
}

void TType1PFAFont::~TType1PFAFont(TType1PFAFont *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E61CC0A8;
  v2 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

{
  uint64_t v2;

  *(_QWORD *)this = off_1E61CC0A8;
  v2 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x1B5E0CD38);
}

const unsigned __int8 *TType1OTFFont::GetSubrData(TType1OTFFont *this, const unsigned __int8 **a2, __int16 *a3, const unsigned __int8 **a4)
{
  uint64_t v4;
  int v5;
  const unsigned __int8 *v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  const unsigned __int8 *result;

  v4 = *((_QWORD *)this + 4);
  v5 = *(unsigned __int16 *)(v4 + 146);
  *a3 = v5;
  v8 = v4 + 112;
  v6 = *(const unsigned __int8 **)(v4 + 112);
  v7 = *(_QWORD *)(v8 + 8);
  *a2 = v6;
  *a4 = &v6[v7];
  if (*a2)
    v9 = v5 == 0;
  else
    v9 = 1;
  if (!v9)
    return &v6[(__int16)v5 + (__int16)v5 * (unint64_t)*(unsigned __int16 *)(*((_QWORD *)this + 4) + 144)];
  result = 0;
  *a4 = 0;
  return result;
}

uint64_t TType1OTFFont::GetGlobalSubrCount(TType1OTFFont *this)
{
  return *(unsigned __int16 *)(*((_QWORD *)this + 4) + 318);
}

uint64_t TType1OTFFont::GetGlobalSubrArrayAndObjectData(TType1OTFFont *this, __int16 *a2, const unsigned __int8 **a3, const unsigned __int8 **a4, const unsigned __int8 **a5, const unsigned __int8 **a6)
{
  uint64_t v6;
  uint64_t result;
  __int16 v8;
  unint64_t v9;
  unint64_t v10;
  const unsigned __int8 *v11;
  const unsigned __int8 *v12;

  v6 = *((_QWORD *)this + 4);
  result = *(_QWORD *)(v6 + 320);
  if (result
    && (v8 = *(unsigned __int8 *)(v6 + 317),
        v9 = *(_QWORD *)(v6 + 328),
        v10 = *(unsigned __int8 *)(v6 + 317)
            + *(unsigned __int16 *)(v6 + 318) * (unint64_t)*(unsigned __int8 *)(v6 + 317),
        v9 > v10))
  {
    v11 = (const unsigned __int8 *)(result + v10);
    *a2 = v8;
    *a3 = v11;
    *a4 = v11;
    v12 = (const unsigned __int8 *)(result + v9);
  }
  else
  {
    v12 = 0;
    result = 0;
    *a2 = 0;
    *a3 = 0;
    *a4 = 0;
  }
  *a5 = v12;
  *a6 = v12;
  return result;
}

uint64_t DetermineROS(const char *a1, const char *a2)
{
  uint64_t v3;
  uint64_t v4;

  if (!a1 || !a2 || strcmp(a1, "Adobe"))
    goto LABEL_4;
  if (!strcmp(a2, "Japan1"))
  {
    v3 = 0x100000000;
    v4 = 2;
    return v4 | v3;
  }
  if (!strcmp(a2, "GB1"))
  {
    v4 = 0;
    v3 = 0x100000000;
    return v4 | v3;
  }
  if (!strcmp(a2, "CNS1"))
  {
    v3 = 0x100000000;
    v4 = 1;
    return v4 | v3;
  }
  if (!strcmp(a2, "Korea1"))
  {
    v3 = 0x100000000;
    v4 = 3;
  }
  else
  {
LABEL_4:
    v3 = 0;
    v4 = 0;
  }
  return v4 | v3;
}

uint64_t MakeGlyphNameForCIDPerROS(unsigned int a1, int a2, char *a3, size_t a4)
{
  const char *v6;
  const char *v7;
  unint64_t v8;
  const char *v11;
  size_t v12;
  size_t v13;
  __int128 v14;
  unsigned __int16 *v15;
  uint64_t v16;
  const char *v17;
  int v18;
  __int16 v19;
  uint64_t v20;
  __int16 v21;
  __int16 v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v31;
  unint64_t v32;
  int v33;
  int v34;
  int v35;
  char *v36;
  size_t v37;
  int v38;
  void **v39;
  _OWORD v40[6];
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v6 = "90CEFE00";
  v7 = (const char *)&str_4634;
  v8 = 30284;
  switch(a2)
  {
    case 0:
      goto LABEL_7;
    case 1:
      v6 = "D840DCCC";
      v8 = 19179;
      v7 = (const char *)&str_4636;
      goto LABEL_7;
    case 2:
      v6 = "0030FE00";
      v8 = 23060;
      v7 = (const char *)&str_4638;
      goto LABEL_7;
    case 3:
      v6 = "00280028";
      v8 = 18352;
      v7 = str_4640;
LABEL_7:
      if (v8 <= a1)
        return snprintf_l(a3, a4, 0, "cid%d");
      v11 = &v7[4 * a1];
      if ((*v11 & 0x80000000) == 0)
      {
        v12 = 4 * (*v11 != 0);
        if (*v11)
          goto LABEL_10;
        return snprintf_l(a3, a4, 0, "cid%d");
      }
      v11 = &v6[bswap32(*(_DWORD *)v11 & 0xFFFFFF7F)];
      v12 = strlen(v11);
      if (!*v11)
        return snprintf_l(a3, a4, 0, "cid%d");
LABEL_10:
      if (v12 < 5)
        return snprintf_l(a3, a4, 0, "uni%.*s.%d");
      v13 = v12 >> 2;
      *(_QWORD *)&v14 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v14 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v40[4] = v14;
      v40[5] = v14;
      v40[2] = v14;
      v40[3] = v14;
      v40[0] = v14;
      v40[1] = v14;
      LOWORD(v39) = 0;
      std::vector<unsigned short,TInlineBufferAllocator<unsigned short,30ul>>::vector(v40, v12 >> 2, &v39);
      v15 = *(unsigned __int16 **)&v40[0];
      if ((uint64_t)v12 >= 1)
      {
        v16 = 0;
        v17 = &v11[v12];
        do
        {
          LOBYTE(v18) = *v11;
          if (*v11)
          {
            v19 = 0;
            v20 = 1;
            do
            {
              v21 = (char)v18;
              if ((v18 - 48) >= 0xAu)
              {
                if (((char)v18 - 65) >= 6)
                {
                  if (((char)v18 - 97) > 5)
                    goto LABEL_24;
                  v22 = -87;
                }
                else
                {
                  v22 = -55;
                }
              }
              else
              {
                v22 = -48;
              }
              v19 = v21 + 16 * v19 + v22;
              if ((v20 - 1) > 2)
                break;
              v18 = v11[v20++];
            }
            while (v18);
          }
          else
          {
LABEL_24:
            v19 = -1;
          }
          v15[v16++] = v19;
          v11 += 4;
        }
        while (v11 < v17);
      }
      v23 = *v15;
      v24 = v23;
      v38 = a1;
      if ((v23 & 0xF800) != 0xD800)
        goto LABEL_37;
      v24 = 65533;
      if (v13 == 1 || (v23 & 0x400) != 0)
        goto LABEL_37;
      v25 = v15[1];
      if ((v25 & 0xFC00) != 0xDC00)
      {
        v24 = 65533;
LABEL_37:
        v26 = snprintf_l(a3, a4, 0, "uni%04X", v24);
        v27 = 1;
        v28 = 1;
        goto LABEL_38;
      }
      v26 = snprintf_l(a3, a4, 0, "u%X", v25 + (v23 << 10) - 56613888);
      v27 = 0;
      v28 = 2;
LABEL_38:
      v31 = v26;
      if (v28 < v13)
      {
        do
        {
          v32 = v28 + 1;
          v33 = v15[v28];
          if ((v33 & 0xF800) != 0xD800
            || (v33 & 0x400) != 0
            || v32 == v13
            || (v34 = v15[v32], (v34 & 0xFC00) != 0xDC00))
          {
            v36 = &a3[v31];
            v37 = a4 - v31;
            if (v27)
              v35 = snprintf_l(v36, v37, 0, "%04X");
            else
              v35 = snprintf_l(v36, v37, 0, "_uni%04X");
            v27 = 1;
          }
          else
          {
            v35 = snprintf_l(&a3[v31], a4 - v31, 0, "_u%X", (v33 << 10) - 56613888 + v34);
            v27 = 0;
            v32 = v28 + 2;
          }
          v31 += v35;
          v28 = v32;
        }
        while (v32 < v13);
      }
      v29 = v31 + snprintf_l(&a3[v31], a4 - v31, 0, ".%d", v38);
      v39 = (void **)v40;
      std::vector<unsigned short,TInlineBufferAllocator<unsigned short,30ul>>::__destroy_vector::operator()[abi:fe180100](&v39);
      return v29;
    default:
      if (a2 != 0xFFFF)
        return snprintf_l(a3, a4, 0, "cid%d");
      return snprintf_l(a3, a4, 0, "gid%d");
  }
}

void sub_1B09C09D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  _Unwind_Resume(exception_object);
}

char *GenerateGlyphNameForCIDPerROS(unsigned int a1, int a2, char *a3)
{
  MakeGlyphNameForCIDPerROS(a1, a2, a3, 0xFFuLL);
  return a3;
}

uint64_t TGlyphNameToUnicodeTaxisLookup::GetUnicodes(const char ***this, const char *a2, unsigned int (*a3)[4])
{
  uint64_t v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v8;

  v8 = -1431655766;
  if (!TSortedStringTable::GetValue(this, a2, &v8))
    return 0;
  if (HIWORD(v8) > 0x10u)
  {
    v5 = v8 - 1114112;
    if (v8 - 1114112 <= 0x56)
    {
      *(_QWORD *)&(*a3)[2] = 0;
      v6 = (unsigned int *)((char *)&gGlyphNamesUnicodeSequences + 20 * v5);
      v4 = *v6;
      memcpy(a3, v6 + 1, 4 * v4);
      return v4;
    }
    return 0;
  }
  (*a3)[0] = v8;
  return 1;
}

_QWORD *std::vector<unsigned short,TInlineBufferAllocator<unsigned short,30ul>>::vector(_QWORD *a1, uint64_t a2, _WORD *a3)
{
  _WORD *v6;
  _WORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  a1[11] = a1 + 3;
  if (a2)
  {
    std::vector<unsigned short,TInlineBufferAllocator<unsigned short,30ul>>::__vallocate[abi:fe180100](a1, a2);
    v6 = (_WORD *)a1[1];
    v7 = &v6[a2];
    v8 = 2 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 2;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_1B09C0BB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<unsigned short,TInlineBufferAllocator<unsigned short,30ul>>::__destroy_vector::operator()[abi:fe180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<unsigned short,TInlineBufferAllocator<unsigned short,30ul>>::__vallocate[abi:fe180100](_QWORD *a1, uint64_t a2)
{
  char *result;

  if (a2 < 0)
    std::vector<char,TInlineBufferAllocator<char,1024ul>>::__throw_length_error[abi:fe180100]();
  result = (char *)TInlineBufferAllocator<unsigned short,30ul>::allocate((uint64_t)(a1 + 3), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[2 * a2];
  return result;
}

uint64_t TType1Font::AddName(uint64_t *a1, unsigned __int8 *a2, __int16 a3)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t result;
  uint64_t v7;
  unsigned __int8 *v8;
  __int16 v9;

  v9 = a3;
  v4 = *a2;
  v7 = v4;
  v8 = a2 + 1;
  v5 = a1[1];
  if (v5 >= a1[2])
  {
    result = std::vector<TFontNameString>::__emplace_back_slow_path<unsigned short &,void const*,unsigned long>(a1, &v9, (uint64_t *)&v8, &v7);
  }
  else
  {
    *(_QWORD *)(v5 + 16) = v4;
    *(_BYTE *)(v5 + 24) = 0;
    *(_QWORD *)(v5 + 32) = &off_1E6176770;
    *(_QWORD *)(v5 + 40) = 0;
    *(_QWORD *)(v5 + 48) = 0;
    *(_QWORD *)(v5 + 56) = 0;
    *(_BYTE *)(v5 + 64) = 1;
    *(_QWORD *)v5 = &off_1E61768B8;
    *(_QWORD *)(v5 + 8) = a2 + 1;
    *(_WORD *)(v5 + 66) = a3;
    *(_DWORD *)(v5 + 68) = 1;
    *(_WORD *)(v5 + 72) = 0;
    result = v5 + 96;
    *(_QWORD *)(v5 + 80) = 0;
    *(_QWORD *)(v5 + 88) = 0;
  }
  a1[1] = result;
  return result;
}

uint64_t TType1Font::GetNames@<X0>(uint64_t this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[6];

  v2 = this;
  a2[2] = 0;
  v4 = (uint64_t)(a2 + 2);
  *a2 = 0;
  a2[1] = 0;
  v5 = *(int *)(this + 80);
  if ((_DWORD)v5 != -1)
    this = TType1Font::AddName(a2, (unsigned __int8 *)(*(_QWORD *)(this + 48) + v5), 0);
  v6 = *(int *)(v2 + 60);
  if ((_DWORD)v6 != -1)
  {
    this = TType1Font::AddName(a2, (unsigned __int8 *)(*(_QWORD *)(v2 + 48) + v6), 1);
    v7 = *(int *)(v2 + 56);
    if ((_DWORD)v7 != -1)
    {
      this = (uint64_t)DeriveStyleName((const unsigned __int8 *)(*(_QWORD *)(v2 + 48) + *(int *)(v2 + 60)), (const unsigned __int8 *)(*(_QWORD *)(v2 + 48) + v7));
      if (this)
      {
        v8 = this;
        this = strlen((const char *)this);
        v9 = this;
        v10 = a2[1];
        v11 = a2[2];
        if (v10 >= v11)
        {
          v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - *a2) >> 5);
          v14 = v13 + 1;
          if (v13 + 1 > 0x2AAAAAAAAAAAAAALL)
            std::vector<char,TInlineBufferAllocator<char,1024ul>>::__throw_length_error[abi:fe180100]();
          v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - *a2) >> 5);
          if (2 * v15 > v14)
            v14 = 2 * v15;
          if (v15 >= 0x155555555555555)
            v16 = 0x2AAAAAAAAAAAAAALL;
          else
            v16 = v14;
          v23[4] = v4;
          if (v16)
            v17 = (char *)std::__allocate_at_least[abi:fe180100]<std::allocator<TFontNameString>>(v4, v16);
          else
            v17 = 0;
          v18 = &v17[96 * v13];
          v23[0] = v17;
          v23[1] = v18;
          v23[3] = &v17[96 * v16];
          *((_QWORD *)v18 + 2) = v9;
          v18[24] = 0;
          *((_QWORD *)v18 + 4) = &off_1E6176770;
          *((_QWORD *)v18 + 5) = 0;
          *((_QWORD *)v18 + 6) = 0;
          *((_QWORD *)v18 + 7) = 0;
          v18[64] = 1;
          *(_QWORD *)v18 = &off_1E61768B8;
          *((_QWORD *)v18 + 1) = v8;
          *(_QWORD *)(v18 + 66) = 65538;
          *((_QWORD *)v18 + 10) = 0;
          *((_QWORD *)v18 + 11) = 0;
          v23[2] = v18 + 96;
          std::vector<TFontNameString>::__swap_out_circular_buffer(a2, v23);
          v12 = a2[1];
          this = std::__split_buffer<TFontNameString>::~__split_buffer((uint64_t)v23);
        }
        else
        {
          *(_QWORD *)(v10 + 16) = this;
          *(_BYTE *)(v10 + 24) = 0;
          *(_QWORD *)(v10 + 32) = &off_1E6176770;
          *(_QWORD *)(v10 + 40) = 0;
          *(_QWORD *)(v10 + 48) = 0;
          *(_QWORD *)(v10 + 56) = 0;
          *(_BYTE *)(v10 + 64) = 1;
          *(_QWORD *)v10 = &off_1E61768B8;
          *(_QWORD *)(v10 + 8) = v8;
          *(_QWORD *)(v10 + 66) = 65538;
          *(_QWORD *)(v10 + 80) = 0;
          *(_QWORD *)(v10 + 88) = 0;
          v12 = v10 + 96;
          a2[1] = v10 + 96;
        }
        a2[1] = v12;
      }
    }
  }
  v19 = *(int *)(v2 + 56);
  if ((_DWORD)v19 != -1)
  {
    TType1Font::AddName(a2, (unsigned __int8 *)(*(_QWORD *)(v2 + 48) + v19), 3);
    this = TType1Font::AddName(a2, (unsigned __int8 *)(*(_QWORD *)(v2 + 48) + *(int *)(v2 + 56)), 4);
  }
  v20 = *(int *)(v2 + 64);
  if ((_DWORD)v20 != -1)
    this = TType1Font::AddName(a2, (unsigned __int8 *)(*(_QWORD *)(v2 + 48) + v20), 5);
  v21 = *(int *)(v2 + 76);
  if ((_DWORD)v21 != -1)
    this = TType1Font::AddName(a2, (unsigned __int8 *)(*(_QWORD *)(v2 + 48) + v21), 6);
  v22 = *(int *)(v2 + 72);
  if ((_DWORD)v22 != -1)
    return TType1Font::AddName(a2, (unsigned __int8 *)(*(_QWORD *)(v2 + 48) + v22), 7);
  return this;
}

void sub_1B09C0F4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14)
{
  std::__split_buffer<TFontNameString>::~__split_buffer((uint64_t)&a9);
  std::vector<TFontNameString>::__destroy_vector::operator()[abi:fe180100](&a14);
  _Unwind_Resume(a1);
}

uint64_t TType1Font::GetSomeNames(TType1Font *this)
{
  return (*(uint64_t (**)(TType1Font *))(*(_QWORD *)this + 104))(this);
}

uint64_t TType1Font::GetNumberOfGlyphs(TType1Font *this)
{
  return *((unsigned int *)this + 35);
}

double TType1Font::GetCaretInfo(TType1Font *this, __int16 *a2, __int16 *a3, unsigned __int16 *a4)
{
  int v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double result;
  double v14[2];
  uint64_t v15;
  double v16;

  *(double *)&v15 = NAN;
  v16 = NAN;
  TType1Font::ApplyFontMatrix((uint64_t)this, 0.0, 0.0, (double *)&v15);
  v8 = *((_DWORD *)this + 38);
  if (v8)
  {
    v9 = (double)((18 * (-v8 >> 8)) >> 16);
    v10 = 1000.0;
  }
  else
  {
    v9 = 0.0;
    v10 = 1.0;
  }
  TType1Font::ApplyFontMatrix((uint64_t)this, v9, v10, v14);
  v11 = v14[0];
  v12 = *(double *)&v15;
  *a2 = llround(v14[1] - v16);
  result = v11 - v12;
  *a3 = llround(result);
  *a4 = 0;
  return result;
}

_QWORD *TType1Font::GetGlyphName@<X0>(_QWORD *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  _QWORD *v5;
  unsigned int v6;
  uint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;

  if (!this[24]
    || ((v5 = this,
         this = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 168))(this),
         this >= 0xFFFF)
      ? (v6 = 0xFFFF)
      : (v6 = this),
        v6 <= a2 || (v7 = *(int *)(v5[24] + 4 * a2), (_DWORD)v7 == -1)))
  {
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
  }
  else
  {
    v8 = (unsigned __int8 *)(v5[6] + v7);
    v9 = *v8;
    *(_QWORD *)(a3 + 8) = v8 + 1;
    *(_QWORD *)(a3 + 16) = v9;
  }
  *(_QWORD *)a3 = &off_1E61768F8;
  *(_BYTE *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = &off_1E6176770;
  *(_QWORD *)(a3 + 40) = 0;
  *(_QWORD *)(a3 + 48) = 0;
  *(_QWORD *)(a3 + 56) = 0;
  return this;
}

uint64_t TType1Font::VerifyGlyphName(TType1Font *this, uint64_t a2, const char *a3)
{
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  const char *v9;
  size_t v10;

  if (!*((_QWORD *)this + 24))
    return 0;
  v6 = (*(uint64_t (**)(TType1Font *))(*(_QWORD *)this + 168))(this);
  v7 = v6 >= 0xFFFF ? 0xFFFF : v6;
  if (v7 <= a2)
    return 0;
  v8 = *(int *)(*((_QWORD *)this + 24) + 4 * a2);
  if ((_DWORD)v8 == -1)
    return 0;
  v9 = (const char *)(*((_QWORD *)this + 6) + v8);
  v10 = *(unsigned __int8 *)v9;
  if (strlen(a3) != v10 || strncmp(a3, v9 + 1, v10))
    return 0;
  return a2;
}

void TType1Font::GetMMVR(_QWORD *a1@<X8>)
{
  *a1 = &off_1E6176770;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
}

void TType1Font::GetBLND(_QWORD *a1@<X8>)
{
  *a1 = &off_1E6176770;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
}

void TType1Font::GetCharString(TType1Font *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  unsigned int *v7;
  size_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  const unsigned __int8 *v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  unsigned __int8 *v18;
  _DWORD *exception;
  __int128 v20;
  __int128 v21;

  if (*((_DWORD *)this + 35) <= a2 || (v5 = *((_QWORD *)this + 13)) == 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E6176998;
    exception[2] = 4;
  }
  v7 = (unsigned int *)(v5 + 8 * a2);
  v8 = v7[1];
  if ((_DWORD)v8)
  {
    v9 = *(__int16 *)(*((_QWORD *)this + 16) + 56);
    v10 = *((_QWORD *)this + 25);
    if (v10)
    {
      *(_QWORD *)&v11 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v11 + 1) = 0xAAAAAAAAAAAAAAAALL;
      *(_OWORD *)(a3 + 32) = v11;
      *(_OWORD *)(a3 + 48) = v11;
      *(_OWORD *)a3 = v11;
      *(_OWORD *)(a3 + 16) = v11;
      TCharString::TCharString((TCharString *)a3, a2, v8, 0);
      *(_QWORD *)&v12 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v20 = v12;
      v21 = v12;
      (*(void (**)(__int128 *__return_ptr, TType1Font *, _QWORD, size_t))(*(_QWORD *)this + 48))(&v20, this, *v7, v8);
      if (*((_QWORD *)&v20 + 1) && (v13 = *(_QWORD *)(*((_QWORD *)&v20 + 1) + 8)) != 0)
        v14 = (const unsigned __int8 *)(v13 + v21);
      else
        v14 = 0;
      EexecDecrypt(*(unsigned __int8 **)(a3 + 8), v14, (int)v8, *(unsigned int *)(v10 + 4 * a2), *((unsigned __int8 *)this + 208));
      LenIVDecrypt(*(unsigned __int8 **)(a3 + 8), *(unsigned __int8 **)(a3 + 8), v8, v9);
      *(_QWORD *)&v20 = &off_1E6176770;
      TDataReference::DucRefCount((TDataReference *)&v20);
    }
    else if (*(_WORD *)(*((_QWORD *)this + 16) + 56))
    {
      *(_QWORD *)&v15 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v15 + 1) = 0xAAAAAAAAAAAAAAAALL;
      *(_OWORD *)(a3 + 32) = v15;
      *(_OWORD *)(a3 + 48) = v15;
      *(_OWORD *)a3 = v15;
      *(_OWORD *)(a3 + 16) = v15;
      TCharString::TCharString((TCharString *)a3, a2, v8 - v9, 0);
      *(_QWORD *)&v16 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v16 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v20 = v16;
      v21 = v16;
      (*(void (**)(__int128 *__return_ptr, TType1Font *, _QWORD, size_t))(*(_QWORD *)this + 48))(&v20, this, *v7, v8);
      if (*((_QWORD *)&v20 + 1) && (v17 = *(_QWORD *)(*((_QWORD *)&v20 + 1) + 8)) != 0)
        v18 = (unsigned __int8 *)(v17 + v21);
      else
        v18 = 0;
      LenIVDecrypt(*(unsigned __int8 **)(a3 + 8), v18, v8, v9);
      *(_QWORD *)&v20 = &off_1E6176770;
      TDataReference::DucRefCount((TDataReference *)&v20);
    }
    else
    {
      (*(void (**)(__int128 *__return_ptr, TType1Font *, _QWORD, _QWORD))(*(_QWORD *)this + 48))(&v20, this, *v7, v7[1]);
      TCharString::TCharString((TCharString *)a3, a2, (const TDataReference *)&v20);
      *(_QWORD *)&v20 = &off_1E6176770;
      TDataReference::DucRefCount((TDataReference *)&v20);
    }
  }
  else
  {
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)a3 = &off_1E61C8568;
    *(_DWORD *)(a3 + 24) = 0;
    *(_BYTE *)(a3 + 28) = 0;
    *(_QWORD *)(a3 + 32) = &off_1E6176770;
    *(_QWORD *)(a3 + 40) = 0;
    *(_QWORD *)(a3 + 48) = 0;
    *(_QWORD *)(a3 + 56) = 0;
  }
}

void sub_1B09C1414(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  TDataReference::~TDataReference((TDataReference *)&a9);
  _Unwind_Resume(a1);
}

void TCharString::TCharString(TCharString *this)
{
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = &off_1E61C8568;
  *((_DWORD *)this + 6) = 0;
  *((_BYTE *)this + 28) = 0;
  *((_QWORD *)this + 4) = &off_1E6176770;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
}

{
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = &off_1E61C8568;
  *((_DWORD *)this + 6) = 0;
  *((_BYTE *)this + 28) = 0;
  *((_QWORD *)this + 4) = &off_1E6176770;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
}

BOOL TType1Font::GetType1Encoding(TType1Font *this, unsigned __int16 *a2)
{
  uint64_t v2;
  uint64_t i;
  uint64_t v6;
  uint64_t v7;

  v2 = *((_QWORD *)this + 28);
  if (v2)
  {
    for (i = 0; i != 256; ++i)
    {
      v6 = *(int *)(v2 + 4 * i);
      if ((_DWORD)v6)
      {
        v7 = (*(uint64_t (**)(TType1Font *, uint64_t))(*(_QWORD *)this + 352))(this, v6 + *((_QWORD *)this + 28) + 1);
        if ((v7 & 0xFF00000000) != 0)
          a2[i] = v7;
      }
    }
  }
  return v2 != 0;
}

void TType1Font::GetStandardEncoding(TType1Font *this, unsigned __int16 *a2)
{
  uint64_t v4;
  __int128 v5;
  _BYTE *StandardEncodeName;
  size_t v7;
  char *v8;
  unint64_t v9;
  _BYTE *v10;
  _BYTE *v11;
  int64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  size_t v16;
  char v17;
  char *v18;
  char *v19;
  int64_t v20;
  char *v21;
  char v22;
  char *v23;
  int64_t v24;
  int64_t v25;
  unint64_t v26;
  size_t v27;
  _BYTE *v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  char v33;
  int64x2_t v34;
  char *v35;
  uint64_t v36;
  void **v37;
  int64x2_t v38;
  char *v39;
  __int128 *v40;
  void *__dst[2];
  char *v42;
  __int128 v43;
  __int128 v44;
  char *v45;
  uint64_t v46;

  v4 = 0;
  v46 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v5 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v44 = v5;
  v43 = v5;
  __dst[1] = 0;
  v42 = 0;
  __dst[0] = 0;
  v45 = (char *)&v43;
  do
  {
    if ((_BYTE)v4)
    {
      StandardEncodeName = (_BYTE *)TParsingContext::GetStandardEncodeName((TParsingContext *)v4);
      if (StandardEncodeName)
      {
        v8 = StandardEncodeName + 1;
        v7 = *StandardEncodeName;
        v9 = (unint64_t)v42;
        v10 = __dst[0];
        if (v42 - (char *)__dst[0] >= v7)
        {
          v11 = __dst[1];
          v12 = (char *)__dst[1] - (char *)__dst[0];
          if ((char *)__dst[1] - (char *)__dst[0] >= v7)
          {
            if (*StandardEncodeName)
              memmove(__dst[0], v8, v7);
            v14 = &v10[v7];
          }
          else
          {
            if (__dst[1] == __dst[0])
            {
              v13 = (char *)__dst[0];
            }
            else
            {
              memmove(__dst[0], v8, (char *)__dst[1] - (char *)__dst[0]);
              v13 = (char *)__dst[1];
            }
            v18 = &v8[v12];
            v19 = v13;
            if (&v8[v12] != &v8[v7])
            {
              v20 = &v10[v7] - v11;
              v19 = (char *)(&v10[v7 + (_QWORD)v13] - v11);
              v21 = v13;
              do
              {
                v22 = *v18++;
                *v21++ = v22;
                --v20;
              }
              while (v20);
            }
            v14 = v19;
          }
        }
        else
        {
          if (__dst[0])
          {
            __dst[1] = __dst[0];
            if (&v43 > __dst[0] || (char *)&v44 + 14 <= __dst[0])
            {
              operator delete(__dst[0]);
            }
            else if (v42 == v45)
            {
              v45 = (char *)__dst[0];
            }
            v9 = 0;
            __dst[0] = 0;
            __dst[1] = 0;
            v42 = 0;
          }
          v15 = 2 * v9;
          if (2 * v9 <= v7)
            v15 = v7;
          if (v9 >= 0x3FFFFFFFFFFFFFFFLL)
            v16 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v16 = v15;
          std::vector<char,TInlineBufferAllocator<char,30ul>>::__vallocate[abi:fe180100]((char *)__dst, v16);
          v14 = (char *)__dst[1];
          do
          {
            v17 = *v8++;
            *v14++ = v17;
            --v7;
          }
          while (v7);
        }
        __dst[1] = v14;
        if (v14 >= v42)
        {
          v24 = v14 - (char *)__dst[0];
          v25 = v14 - (char *)__dst[0] + 1;
          if (v25 < 0)
            std::vector<char,TInlineBufferAllocator<char,1024ul>>::__throw_length_error[abi:fe180100]();
          v26 = v42 - (char *)__dst[0];
          if (2 * (v42 - (char *)__dst[0]) > (unint64_t)v25)
            v25 = 2 * v26;
          if (v26 >= 0x3FFFFFFFFFFFFFFFLL)
            v27 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v27 = v25;
          v40 = &v43;
          if (v27)
          {
            v28 = v45;
            if (&v45[v27] <= (char *)&v44 + 14)
              v45 += v27;
            else
              v28 = operator new(v27);
          }
          else
          {
            v28 = 0;
          }
          v29 = &v28[v24];
          v30 = &v28[v27];
          v39 = &v28[v27];
          v28[v24] = 0;
          v23 = &v28[v24 + 1];
          v38.i64[1] = (uint64_t)v23;
          v32 = (char *)__dst[0];
          v31 = (char *)__dst[1];
          if (__dst[1] == __dst[0])
          {
            v34 = vdupq_n_s64((unint64_t)__dst[1]);
          }
          else
          {
            do
            {
              v33 = *--v31;
              *--v29 = v33;
            }
            while (v31 != v32);
            v34 = *(int64x2_t *)__dst;
            v23 = (char *)v38.i64[1];
            v30 = v39;
          }
          __dst[0] = v29;
          __dst[1] = v23;
          v38 = v34;
          v35 = v42;
          v42 = v30;
          v39 = v35;
          v37 = (void **)v34.i64[0];
          std::__split_buffer<char,TInlineBufferAllocator<char,30ul> &>::~__split_buffer((uint64_t)&v37);
        }
        else
        {
          *v14 = 0;
          v23 = v14 + 1;
        }
        __dst[1] = v23;
        v36 = (*(uint64_t (**)(TType1Font *, void *))(*(_QWORD *)this + 352))(this, __dst[0]);
        if ((v36 & 0xFF00000000) != 0)
          a2[v4] = v36;
      }
    }
    ++v4;
  }
  while (v4 != 256);
  v37 = __dst;
  std::vector<char,TInlineBufferAllocator<char,30ul>>::__destroy_vector::operator()[abi:fe180100](&v37);
}

void sub_1B09C1814(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14, char a15)
{
  a14 = (void **)&a15;
  std::vector<char,TInlineBufferAllocator<char,30ul>>::__destroy_vector::operator()[abi:fe180100](&a14);
  _Unwind_Resume(a1);
}

_QWORD *TType1Font::GetPostScriptNameSuffixForVariation(unsigned __int16 *a1, _QWORD *a2, char *a3, _QWORD *a4)
{
  BOOL v4;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  int64_t v13;
  uint64_t v14;
  double *v15;
  uint64_t v16;
  double *v17;
  double v18;
  double v19;
  double v20;
  double v21;
  __int128 v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  __int128 v27;
  int v28;
  unsigned int v29;
  double *v30;
  double v31;
  __int128 v32;
  unsigned __int8 *v33;
  uint64_t v34;
  unsigned __int8 *v35;
  char v36;
  int v37;
  __int128 v39;
  __int128 v40;
  void *__p[3];
  void *v42;
  _BYTE *v43;
  uint64_t v44;
  char __source[16];
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  if (*a2)
    v4 = a2[1] == 0;
  else
    v4 = 1;
  if (v4)
    return 0;
  v42 = 0;
  v43 = 0;
  v44 = 0;
  memset(__p, 170, sizeof(__p));
  (*(void (**)(void **__return_ptr, unsigned __int16 *, _QWORD, void **))(*(_QWORD *)a1 + 400))(__p, a1, a1[74], &v42);
  if (__p[1] != __p[0])
  {
    v9 = 0;
    v10 = 0;
    v11 = ((char *)__p[1] - (char *)__p[0]) >> 3;
    v12 = a3 + 1;
    if (v11 <= 1)
      v13 = 1;
    else
      v13 = ((char *)__p[1] - (char *)__p[0]) >> 3;
    v14 = a1[74];
    v15 = (double *)v42;
    while (1)
    {
      v16 = 0;
      if (a1[74])
        break;
LABEL_19:
      if (v16 == v14)
      {
LABEL_32:
        *(_QWORD *)&v32 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v32 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v49 = v32;
        v50 = v32;
        v47 = v32;
        v48 = v32;
        *(_OWORD *)__source = v32;
        v46 = v32;
        if (v11 > v10)
        {
          TFont::GetNameUsingMap((uint64_t)a1, *((_WORD *)__p[0] + 4 * v10 + 1), a4, (TFontNameString *)__source);
          *a3 = 95;
          v33 = *(unsigned __int8 **)&__source[8];
          if (!*(_QWORD *)&__source[8])
          {
            v33 = (unsigned __int8 *)*((_QWORD *)&v47 + 1);
            if (*((_QWORD *)&v47 + 1))
            {
              v33 = *(unsigned __int8 **)(*((_QWORD *)&v47 + 1) + 8);
              if (v33)
                v33 += v48;
            }
          }
          if ((unint64_t)v46 >= 0xFE)
            v34 = 254;
          else
            v34 = v46;
          if (v34)
          {
            v35 = &v33[v34];
            do
            {
              v37 = *v33++;
              v36 = v37;
              if (v37 == 32)
                v36 = 95;
              *v12++ = v36;
            }
            while (v33 < v35);
          }
          *v12 = 0;
          TFontNameString::~TFontNameString((TFontNameString *)__source);
          a4 = (_QWORD *)(v34 + 1);
          v28 = 1;
          goto LABEL_50;
        }
LABEL_57:
        __break(1u);
      }
      ++v10;
      v15 += v14;
      v9 += v14;
      if (v10 == v13)
        goto LABEL_21;
    }
    v17 = (double *)(a2[1] + 8);
    while ((v43 - (_BYTE *)v42) >> 3 > (unint64_t)(v9 + v16))
    {
      v18 = v15[v16];
      v19 = vabdd_f64(*v17, v18);
      if (v19 >= 0.0001)
      {
        v20 = fabs(*v17);
        v21 = fabs(v18);
        if (v20 < v21)
          v20 = v21;
        if (v19 / v20 >= 0.0001)
          goto LABEL_19;
      }
      ++v16;
      v17 += 2;
      if (v14 == v16)
        goto LABEL_32;
    }
    goto LABEL_57;
  }
LABEL_21:
  *(_QWORD *)&v22 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v22 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v39 = v22;
  v40 = v22;
  (*(void (**)(__int128 *__return_ptr, unsigned __int16 *))(*(_QWORD *)a1 + 472))(&v39, a1);
  if (*((_QWORD *)&v39 + 1) && (v23 = *(_QWORD *)(*((_QWORD *)&v39 + 1) + 8)) != 0)
  {
    v24 = a1[74];
    if (a1[74])
    {
      v25 = 0;
      a4 = 0;
      v26 = v23 + v40;
      *(_QWORD *)&v27 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v27 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v28 = 1;
      while (1)
      {
        v29 = bswap32(*(_DWORD *)(v26 + 8 * v25));
        v30 = (double *)(a2[1] + 8);
        while (*((_DWORD *)v30 - 2) != v29)
        {
          v30 += 2;
          if (!--v24)
            goto LABEL_48;
        }
        if (!v24)
          break;
        v31 = *v30 * (double)((int)bswap32(*(unsigned __int16 *)(v26 + 8 * v25 + 6)) >> 16);
        v47 = v27;
        v48 = v27;
        *(_OWORD *)__source = v27;
        v46 = v27;
        snprintf_l(__source, 0x40uLL, 0, "_%d", llround(v31));
        a4 = (_QWORD *)((char *)a4 + strlcat(a3, __source, 0x100uLL));
        ++v25;
        v24 = a1[74];
        *(_QWORD *)&v27 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v27 + 1) = 0xAAAAAAAAAAAAAAAALL;
        if (v25 >= v24)
          goto LABEL_49;
      }
    }
    else
    {
      a4 = 0;
    }
LABEL_48:
    v28 = 1;
  }
  else
  {
    v28 = 0;
  }
LABEL_49:
  *(_QWORD *)&v39 = &off_1E6176770;
  TDataReference::DucRefCount((TDataReference *)&v39);
LABEL_50:
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v42)
  {
    v43 = v42;
    operator delete(v42);
  }
  if (!v28)
    return 0;
  return a4;
}

void sub_1B09C1BAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19)
{
  TDataReference::~TDataReference((TDataReference *)&a11);
  if (__p)
  {
    a16 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a18)
  {
    a19 = (uint64_t)a18;
    operator delete(a18);
  }
  _Unwind_Resume(a1);
}

uint64_t TType1Font::GetCharactersPerGlyphs(TType1Font *this, const unsigned __int16 *a2, unsigned __int16 *a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v8;
  unsigned int v9;
  unsigned __int16 *v10;
  uint64_t v11;
  unsigned int v12;

  if (!a4)
    return 0;
  if (*((_QWORD *)this + 23))
  {
    v5 = a4;
    v8 = (*(uint64_t (**)(TType1Font *))(*(_QWORD *)this + 168))(this);
    if (v8 >= 0xFFFF)
      v9 = 0xFFFF;
    else
      v9 = v8;
    v10 = a3;
    while (1)
    {
      v11 = *a2;
      if (v11 >= v9)
        break;
      v12 = *(_DWORD *)(*((_QWORD *)this + 23) + 4 * v11);
      if ((v12 - 0x10000) >> 20)
      {
        if (HIWORD(v12))
          break;
        *v10 = v12;
      }
      else
      {
        *v10 = (v12 >> 10) - 10304;
        v10[1] = v12 & 0x3FF | 0xDC00;
        ++v10;
      }
LABEL_13:
      ++a2;
      ++v10;
      if (!--v5)
        return v10 - a3;
    }
    *v10 = -1;
    goto LABEL_13;
  }
  return 0;
}

CFMutableCharacterSetRef TType1Font::CopyCharacterSet(TType1Font *this)
{
  unsigned int v2;
  unint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v7;
  CFMutableCharacterSetRef v8;
  unint64_t v9;
  unsigned int v10;
  CFMutableCharacterSetRef theSet;
  CFRange v14;
  CFRange v15;

  v2 = (*(uint64_t (**)(TType1Font *))(*(_QWORD *)this + 168))(this);
  if (v2 >= 0xFFFF)
    v3 = 0xFFFFLL;
  else
    v3 = v2;
  if (!(_DWORD)v3 || !*((_QWORD *)this + 23))
    return 0;
  theSet = CFCharacterSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00]);
  if (!theSet)
  {
    TCFCharacterSet::~TCFCharacterSet((const void **)&theSet);
    return 0;
  }
  v4 = 0;
  v5 = -1;
  while (v5 == 0xFFFF || v5 == -1)
  {
    v5 = *(_DWORD *)(*((_QWORD *)this + 23) + 4 * v4++);
    if (v3 == v4)
    {
      v7 = v5 + 1;
      goto LABEL_31;
    }
  }
  v7 = v5 + 1;
  if (v3 > (unsigned __int16)v4)
  {
    do
    {
      v9 = (unsigned __int16)v4;
      while (1)
      {
        v10 = *(_DWORD *)(*((_QWORD *)this + 23) + 4 * v9);
        if (v10 == -1 || v10 == 0xFFFF)
          break;
        if (v7 != v10)
        {
          if (HIWORD(v5) <= 0x10u && (v7 - 1) >> 16 <= 0x10)
          {
            v14.length = v7 - v5;
            v14.location = v5;
            CFCharacterSetAddCharactersInRange(theSet, v14);
          }
          v7 = v10 + 1;
          v5 = v10;
          break;
        }
        ++v9;
        ++v7;
        if (v9 >= v3)
          goto LABEL_31;
      }
      LOWORD(v4) = v9 + 1;
    }
    while (v3 > (unsigned __int16)(v9 + 1));
  }
LABEL_31:
  if (v5 != -1 && v5 != 0xFFFF && HIWORD(v5) <= 0x10u && (v7 - 1) >> 16 <= 0x10)
  {
    v15.length = v7 - v5;
    v15.location = v5;
    CFCharacterSetAddCharactersInRange(theSet, v15);
  }
  v8 = theSet;
  theSet = 0;
  TCFCharacterSet::~TCFCharacterSet((const void **)&theSet);
  return v8;
}

void sub_1B09C1E64(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  TCFCharacterSet::~TCFCharacterSet((const void **)va);
  _Unwind_Resume(a1);
}

void TType1Font::GetOS2UnicodeRanges(TType1Font *this, unsigned int a2, unsigned int *a3, float a4)
{
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
}

uint64_t TType1Font::GetCharactersForGlyph(TType1Font *this, unsigned int a2, unsigned __int16 *a3)
{
  uint64_t v3;
  uint64_t v4;
  int v6;
  __int16 v7;
  uint64_t v8;
  uint64_t v9;

  if (a2 > 0xFFFE)
    return 0;
  v8 = v3;
  v9 = v4;
  v7 = a2;
  v6 = -1431655766;
  if (!a3)
    a3 = (unsigned __int16 *)&v6;
  return (*(uint64_t (**)(TType1Font *, __int16 *, unsigned __int16 *, uint64_t))(*(_QWORD *)this + 160))(this, &v7, a3, 1);
}

void TCharString::TCharString(TCharString *this, int a2, size_t size, const void *a4)
{
  void *v5;
  _DWORD *exception;

  *((_QWORD *)this + 1) = a4;
  *((_QWORD *)this + 2) = size;
  *(_QWORD *)this = &off_1E61C8568;
  *((_DWORD *)this + 6) = a2;
  *((_QWORD *)this + 4) = &off_1E6176770;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_BYTE *)this + 28) = a4 == 0;
  if (!a4)
  {
    v5 = malloc_type_malloc(size, 0x528EA017uLL);
    *((_QWORD *)this + 1) = v5;
    if (!v5)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)exception = &off_1E6176998;
      exception[2] = 2;
    }
  }
}

void sub_1B09C1F8C(_Unwind_Exception *a1)
{
  TDataReference *v1;

  TDataReference::~TDataReference(v1);
  _Unwind_Resume(a1);
}

void TCharString::TCharString(TCharString *this, int a2, const TDataReference *a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *((_QWORD *)a3 + 1);
  if (v3)
  {
    v3 = *(_QWORD *)(v3 + 8);
    if (v3)
      v3 += *((_QWORD *)a3 + 2);
  }
  v4 = *((_QWORD *)a3 + 3) - *((_QWORD *)a3 + 2);
  *((_QWORD *)this + 1) = v3;
  *((_QWORD *)this + 2) = v4;
  *(_QWORD *)this = &off_1E61C8568;
  *((_DWORD *)this + 6) = a2;
  *((_BYTE *)this + 28) = 0;
  *((_QWORD *)this + 4) = &off_1E6176770;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 5) = 0;
  TDataReference::operator=((TCharString *)((char *)this + 32), (uint64_t)a3);
}

void TCharString::TCharString(TCharString *this, int a2, const TDataReference *a3, uint64_t a4)
{
  uint64_t v4;

  v4 = *((_QWORD *)a3 + 1);
  if (v4)
  {
    v4 = *(_QWORD *)(v4 + 8);
    if (v4)
      v4 += *((_QWORD *)a3 + 2);
  }
  *((_QWORD *)this + 1) = v4;
  *((_QWORD *)this + 2) = a4;
  *(_QWORD *)this = &off_1E61C8568;
  *((_DWORD *)this + 6) = a2;
  *((_BYTE *)this + 28) = 0;
  *((_QWORD *)this + 4) = &off_1E6176770;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 5) = 0;
  TDataReference::operator=((TCharString *)((char *)this + 32), (uint64_t)a3);
}

void TType1DataParsingContext::~TType1DataParsingContext(TType1DataParsingContext *this)
{
  TType1ParsingContext::~TType1ParsingContext(this);
  JUMPOUT(0x1B5E0CD38);
}

uint64_t TType1DataParsingContext::BlendNumberAxes(TType1DataParsingContext *this)
{
  return 0;
}

void **TType1DataParsingContext::CharStringIndex(void **this, int a2, int a3, unsigned int a4, const char *a5)
{
  uint64_t v8;
  unsigned int v9;
  char *v10;
  uint64_t v11;
  _DWORD *v12;
  _DWORD *exception;

  v8 = (uint64_t)this;
  if (a3 | a2 || a4 || a5)
  {
    v9 = a4 + 2;
    v10 = (char *)reallocf(this[105], *((_DWORD *)this + 212) + a4 + 2);
    *(_QWORD *)(v8 + 840) = v10;
    if (!v10)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)exception = &off_1E6176998;
      exception[2] = 2;
    }
    v11 = *(unsigned int *)(v8 + 848);
    this = (void **)memcpy(&v10[v11], a5, a4);
    v12 = (_DWORD *)(*(_QWORD *)(v8 + 632) + 8 * a2);
    *v12 = v11;
    v12[1] = a4;
    *(_DWORD *)(v8 + 848) = v11 + v9;
  }
  return this;
}

void TType1DataFont::~TType1DataFont(TType1DataFont *this)
{
  *(_QWORD *)this = off_1E61C8588;
  *((_QWORD *)this + 2) = &unk_1E61C87A0;
  free(*((void **)this + 29));
  TType1Font::~TType1Font(this);
}

unsigned __int8 *TType1DataFont::GetCharString@<X0>(TType1DataFont *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  unsigned __int8 *result;
  unsigned int v7;
  uint64_t v8;
  size_t v9;
  __int128 v10;
  _DWORD *exception;

  result = (unsigned __int8 *)(*(uint64_t (**)(TType1DataFont *))(*(_QWORD *)this + 168))(this);
  if (result >= 0xFFFF)
    v7 = 0xFFFF;
  else
    v7 = result;
  if (v7 <= a2 || (v8 = *((_QWORD *)this + 13)) == 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E6176998;
    exception[2] = 4;
  }
  v9 = *(unsigned int *)(v8 + 8 * a2 + 4);
  if ((_DWORD)v9)
  {
    *(_QWORD *)&v10 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)(a3 + 32) = v10;
    *(_OWORD *)(a3 + 48) = v10;
    *(_OWORD *)a3 = v10;
    *(_OWORD *)(a3 + 16) = v10;
    TCharString::TCharString((TCharString *)a3, a2, v9, 0);
    return LenIVDecrypt(*(unsigned __int8 **)(a3 + 8), (unsigned __int8 *)(*((_QWORD *)this + 29) + *(unsigned int *)(v8 + 8 * a2)), v9, *(__int16 *)(*((_QWORD *)this + 16) + 56));
  }
  else
  {
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)a3 = &off_1E61C8568;
    *(_DWORD *)(a3 + 24) = 0;
    *(_BYTE *)(a3 + 28) = 0;
    *(_QWORD *)(a3 + 32) = &off_1E6176770;
    *(_QWORD *)(a3 + 40) = 0;
    *(_QWORD *)(a3 + 48) = 0;
    *(_QWORD *)(a3 + 56) = 0;
  }
  return result;
}

void sub_1B09C2338(_Unwind_Exception *a1)
{
  void **v1;

  TCharString::~TCharString(v1);
  _Unwind_Resume(a1);
}

void TType1MemoryFont::TType1MemoryFont(TType1MemoryFont *this, const void *a2, uint64_t a3)
{
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  _QWORD v10[4];
  TType1Font *__b[108];

  __b[107] = *(TType1Font **)MEMORY[0x1E0C80C00];
  *((_DWORD *)this + 2) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 21) = 0;
  *((_QWORD *)this + 23) = 0;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_QWORD *)this + 28) = 0;
  *((_QWORD *)this + 29) = 0;
  *((_QWORD *)this + 27) = 0;
  *(_QWORD *)this = &off_1E617A0C0;
  *((_QWORD *)this + 2) = &unk_1E617A2D8;
  *((_QWORD *)this + 30) = &off_1E6176678;
  v6 = operator new();
  *(_DWORD *)(v6 + 32) = 0;
  v7 = (unsigned int *)(v6 + 32);
  *(_QWORD *)v6 = &off_1E6176818;
  *(_QWORD *)(v6 + 8) = a2;
  *(_QWORD *)(v6 + 16) = a3;
  *(_QWORD *)(v6 + 24) = &unk_1E6176840;
  *(_DWORD *)(v6 + 36) = 0;
  *((_QWORD *)this + 31) = v6;
  *((_DWORD *)this + 64) = 0;
  do
    v8 = __ldxr(v7);
  while (__stxr(v8 + 1, v7));
  memset(__b, 170, 0x358uLL);
  v9 = (*(uint64_t (**)(TType1MemoryFont *))(*(_QWORD *)this + 56))(this);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v9 + 32))(v10, v9, 0, 0);
  TParsingContext::TParsingContext((TParsingContext *)__b, (const TDataReference *)v10, 256);
  __b[95] = 0;
  LOBYTE(__b[96]) = 0;
  memset(&__b[98], 0, 24);
  __b[101] = (TType1Font *)4096;
  __b[97] = (TType1Font *)&off_1E61C8D98;
  __b[103] = 0;
  __b[102] = 0;
  __b[104] = this;
  __b[93] = 0;
  __b[0] = (TType1Font *)&off_1E61C8A10;
  __b[105] = 0;
  LODWORD(__b[106]) = 0;
  *((_WORD *)__b[86] + 28) = -1;
  v10[0] = &off_1E6176770;
  TDataReference::DucRefCount((TDataReference *)v10);
  TType1ParsingContext::ParseType1Font(__b);
  *((TType1Font **)this + 29) = __b[105];
  TType1ParsingContext::~TType1ParsingContext((TType1ParsingContext *)__b);
}

void sub_1B09C2528(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  TType1DataFont *v5;
  TInMemoryDataReference *v6;
  va_list va;

  va_start(va, a5);
  TType1ParsingContext::~TType1ParsingContext((TType1ParsingContext *)va);
  TInMemoryDataReference::~TInMemoryDataReference(v6);
  TType1DataFont::~TType1DataFont(v5);
  _Unwind_Resume(a1);
}

void TType1MemoryFont::~TType1MemoryFont(TType1MemoryFont *this)
{
  *(_QWORD *)this = &off_1E617A0C0;
  *((_QWORD *)this + 2) = &unk_1E617A2D8;
  TInMemoryDataReference::~TInMemoryDataReference((TType1MemoryFont *)((char *)this + 240));
  *(_QWORD *)this = off_1E61C8588;
  *((_QWORD *)this + 2) = &unk_1E61C87A0;
  free(*((void **)this + 29));
  TType1Font::~TType1Font(this);
}

{
  TType1MemoryFont::~TType1MemoryFont(this);
  JUMPOUT(0x1B5E0CD38);
}

void `non-virtual thunk to'TType1MemoryFont::~TType1MemoryFont(TType1MemoryFont *this)
{
  TType1MemoryFont::~TType1MemoryFont((TType1MemoryFont *)((char *)this - 16));
}

{
  TType1MemoryFont::~TType1MemoryFont((TType1MemoryFont *)((char *)this - 16));
  JUMPOUT(0x1B5E0CD38);
}

uint64_t TType1MemoryFont::GetKind(TType1MemoryFont *this)
{
  return 23;
}

uint64_t TType1MemoryFont::GetFontRef(TType1MemoryFont *this)
{
  return (uint64_t)this + 240;
}

void TType1PFBParsingContext::~TType1PFBParsingContext(TType1PFBParsingContext *this)
{
  TType1ParsingContext::~TType1ParsingContext(this);
  JUMPOUT(0x1B5E0CD38);
}

uint64_t TType1PFBParsingContext::GetBytes(TType1PFBParsingContext *this, unint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  BOOL v12;
  unint64_t v13;

  v2 = *((_QWORD *)this + 6);
  v3 = *((_QWORD *)this + 7);
  if (v2)
  {
    v4 = *(_QWORD *)(v2 + 8);
    if (v4)
      v5 = v4 + v3;
    else
      v5 = 0;
  }
  else
  {
    v5 = 0;
  }
  v6 = 0;
  v7 = *((int *)this + 18);
  if ((v7 & 0x80000000) == 0)
  {
    v8 = v5 + *((_QWORD *)this + 8) - v3;
    v9 = v5 + v7;
    v10 = v9 + 6;
    if (v9 + 6 <= v8)
    {
      v11 = *(unsigned int *)(v9 + 2);
      *a2 = v11;
      *((_DWORD *)this + 18) = v7 + v11 + 6;
      v12 = __CFADD__(v11, v10);
      v13 = v11 + v10;
      if (v12)
      {
        return 0;
      }
      else if (v13 > v8)
      {
        return 0;
      }
      else
      {
        return v9 + 6;
      }
    }
  }
  return v6;
}

void TType1BinaryMemoryFont::TType1BinaryMemoryFont(TType1BinaryMemoryFont *this, const void *a2, uint64_t a3)
{
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  _QWORD v9[4];
  TType1Font *__b[108];

  __b[107] = *(TType1Font **)MEMORY[0x1E0C80C00];
  *((_DWORD *)this + 2) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 21) = 0;
  *((_QWORD *)this + 23) = 0;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_QWORD *)this + 28) = 0;
  *((_QWORD *)this + 29) = 0;
  *((_QWORD *)this + 27) = 0;
  *(_QWORD *)this = &off_1E61C87C0;
  *((_QWORD *)this + 2) = &unk_1E61C89D8;
  *((_QWORD *)this + 30) = &off_1E6176678;
  v6 = operator new();
  *(_DWORD *)(v6 + 32) = 0;
  v7 = (unsigned int *)(v6 + 32);
  *(_QWORD *)v6 = &off_1E6176818;
  *(_QWORD *)(v6 + 8) = a2;
  *(_QWORD *)(v6 + 16) = a3;
  *(_QWORD *)(v6 + 24) = &unk_1E6176840;
  *(_DWORD *)(v6 + 36) = 0;
  *((_QWORD *)this + 31) = v6;
  *((_DWORD *)this + 64) = 0;
  do
    v8 = __ldxr(v7);
  while (__stxr(v8 + 1, v7));
  memset(__b, 170, 0x358uLL);
  if (!a2 || (a3 & 0x80000000) != 0)
  {
    v9[0] = &off_1E6176770;
    memset(&v9[1], 0, 24);
  }
  else
  {
    TDataReference::TDataReference(v9, v6, 0, 0, 0);
  }
  TParsingContext::TParsingContext((TParsingContext *)__b, (const TDataReference *)v9, 256);
  __b[95] = 0;
  LOBYTE(__b[96]) = 0;
  memset(&__b[98], 0, 24);
  __b[101] = (TType1Font *)4096;
  __b[97] = (TType1Font *)&off_1E61C8D98;
  __b[103] = 0;
  __b[102] = 0;
  __b[104] = this;
  __b[105] = 0;
  LODWORD(__b[106]) = 0;
  __b[93] = 0;
  *((_WORD *)__b[86] + 28) = -1;
  __b[0] = (TType1Font *)&off_1E617C440;
  v9[0] = &off_1E6176770;
  TDataReference::DucRefCount((TDataReference *)v9);
  TType1ParsingContext::ParseType1Font(__b);
  *((TType1Font **)this + 29) = __b[105];
  TType1ParsingContext::~TType1ParsingContext((TType1ParsingContext *)__b);
}

void sub_1B09C28D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  TType1DataFont *v13;
  TInMemoryDataReference *v14;

  TInMemoryDataReference::~TInMemoryDataReference(v14);
  TType1DataFont::~TType1DataFont(v13);
  _Unwind_Resume(a1);
}

void TType1BinaryMemoryFont::~TType1BinaryMemoryFont(TType1BinaryMemoryFont *this)
{
  *(_QWORD *)this = &off_1E61C87C0;
  *((_QWORD *)this + 2) = &unk_1E61C89D8;
  TInMemoryDataReference::~TInMemoryDataReference((TType1BinaryMemoryFont *)((char *)this + 240));
  *(_QWORD *)this = off_1E61C8588;
  *((_QWORD *)this + 2) = &unk_1E61C87A0;
  free(*((void **)this + 29));
  TType1Font::~TType1Font(this);
}

{
  TType1BinaryMemoryFont::~TType1BinaryMemoryFont(this);
  JUMPOUT(0x1B5E0CD38);
}

void `non-virtual thunk to'TType1BinaryMemoryFont::~TType1BinaryMemoryFont(TType1BinaryMemoryFont *this)
{
  TType1BinaryMemoryFont::~TType1BinaryMemoryFont((TType1BinaryMemoryFont *)((char *)this - 16));
}

{
  TType1BinaryMemoryFont::~TType1BinaryMemoryFont((TType1BinaryMemoryFont *)((char *)this - 16));
  JUMPOUT(0x1B5E0CD38);
}

uint64_t TType1BinaryMemoryFont::GetKind(TType1BinaryMemoryFont *this)
{
  return 23;
}

uint64_t TType1BinaryMemoryFont::GetFontRef(TType1BinaryMemoryFont *this)
{
  return (uint64_t)this + 240;
}

void TType1FileDataFont::TType1FileDataFont(TType1FileDataFont *this, const TFileDataSurrogate *a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[4];
  TType1Font *__b[108];

  __b[107] = *(TType1Font **)MEMORY[0x1E0C80C00];
  *((_DWORD *)this + 2) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 21) = 0;
  *((_QWORD *)this + 23) = 0;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_QWORD *)this + 28) = 0;
  *((_QWORD *)this + 29) = 0;
  *((_QWORD *)this + 27) = 0;
  *((_QWORD *)this + 30) = &off_1E61766C0;
  *(_QWORD *)this = &off_1E6179E88;
  *((_QWORD *)this + 2) = &unk_1E617A0A0;
  v3 = *((_QWORD *)a2 + 1);
  *((_QWORD *)this + 31) = v3;
  (*(void (**)(uint64_t))(*(_QWORD *)(v3 + 24) + 24))(v3 + 24);
  memset(__b, 170, 0x358uLL);
  v4 = (*(uint64_t (**)(TType1FileDataFont *))(*(_QWORD *)this + 56))(this);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v4 + 32))(v5, v4, 0, 0);
  TParsingContext::TParsingContext((TParsingContext *)__b, (const TDataReference *)v5, 256);
  __b[95] = 0;
  LOBYTE(__b[96]) = 0;
  memset(&__b[98], 0, 24);
  __b[101] = (TType1Font *)4096;
  __b[97] = (TType1Font *)&off_1E61C8D98;
  __b[103] = 0;
  __b[102] = 0;
  __b[104] = this;
  __b[93] = 0;
  __b[0] = (TType1Font *)&off_1E61C8A10;
  __b[105] = 0;
  LODWORD(__b[106]) = 0;
  *((_WORD *)__b[86] + 28) = -1;
  v5[0] = &off_1E6176770;
  TDataReference::DucRefCount((TDataReference *)v5);
  TType1ParsingContext::ParseType1Font(__b);
  *((TType1Font **)this + 29) = __b[105];
  TType1ParsingContext::~TType1ParsingContext((TType1ParsingContext *)__b);
}

void sub_1B09C2B80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  TType1DataFont *v5;
  const TFileFragmentReference **v6;
  va_list va;

  va_start(va, a5);
  TType1ParsingContext::~TType1ParsingContext((TType1ParsingContext *)va);
  TFileDataSurrogate::~TFileDataSurrogate(v6);
  TType1DataFont::~TType1DataFont(v5);
  _Unwind_Resume(a1);
}

void TType1FileDataFont::~TType1FileDataFont(TType1FileDataFont *this)
{
  *(_QWORD *)this = &off_1E6179E88;
  *((_QWORD *)this + 2) = &unk_1E617A0A0;
  TFileDataSurrogate::~TFileDataSurrogate((const TFileFragmentReference **)this + 30);
  *(_QWORD *)this = off_1E61C8588;
  *((_QWORD *)this + 2) = &unk_1E61C87A0;
  free(*((void **)this + 29));
  TType1Font::~TType1Font(this);
}

{
  TType1FileDataFont::~TType1FileDataFont(this);
  JUMPOUT(0x1B5E0CD38);
}

void `non-virtual thunk to'TType1FileDataFont::~TType1FileDataFont(TType1FileDataFont *this)
{
  TType1FileDataFont::~TType1FileDataFont((TType1FileDataFont *)((char *)this - 16));
}

{
  TType1FileDataFont::~TType1FileDataFont((TType1FileDataFont *)((char *)this - 16));
  JUMPOUT(0x1B5E0CD38);
}

uint64_t TType1FileDataFont::GetKind(TType1FileDataFont *this)
{
  return 24;
}

uint64_t TType1FileDataFont::GetFontRef(TType1FileDataFont *this)
{
  return (uint64_t)this + 240;
}

uint64_t MType1CIDFont::GetCIDGlyphName@<X0>(MType1CIDFont *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  __int128 v6;
  int ROS;
  char *v8;
  uint64_t result;
  _OWORD v10[8];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if ((_DWORD)a2)
  {
    v4 = a2;
    *(_QWORD *)&v6 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v10[6] = v6;
    v10[7] = v6;
    v10[4] = v6;
    v10[5] = v6;
    v10[2] = v6;
    v10[3] = v6;
    v10[0] = v6;
    v10[1] = v6;
    ROS = MType1CIDFont::GetROS(this);
    if (ROS != 0xFFFF)
      LODWORD(v4) = (*(uint64_t (**)(MType1CIDFont *, uint64_t))(*(_QWORD *)this + 32))(this, v4);
    MakeGlyphNameForCIDPerROS(v4, ROS, (char *)v10, 0x80uLL);
    v8 = strndup((const char *)v10, 0x7FuLL);
    result = strnlen((const char *)v10, 0x7FuLL);
    *(_QWORD *)(a3 + 8) = v8;
    *(_QWORD *)(a3 + 16) = result;
  }
  else
  {
    result = (uint64_t)strdup(".notdef");
    *(_QWORD *)(a3 + 8) = result;
    *(_QWORD *)(a3 + 16) = 7;
  }
  *(_QWORD *)a3 = &off_1E61768F8;
  *(_BYTE *)(a3 + 24) = 1;
  *(_QWORD *)(a3 + 32) = &off_1E6176770;
  *(_QWORD *)(a3 + 40) = 0;
  *(_QWORD *)(a3 + 48) = 0;
  *(_QWORD *)(a3 + 56) = 0;
  return result;
}

uint64_t MType1CIDFont::GetCID(MType1CIDFont *this, unsigned int a2)
{
  if (*((unsigned __int16 *)this + 8) <= a2)
    return 0;
  else
    return (unsigned __int16)a2;
}

uint64_t std::vector<TFontNameString>::__emplace_back_slow_path<unsigned short &,void const*,unsigned long>(uint64_t *a1, __int16 *a2, uint64_t *a3, _QWORD *a4)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  __int16 v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v20[5];

  v5 = *a1;
  v6 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 5);
  v7 = v6 + 1;
  if (v6 + 1 > 0x2AAAAAAAAAAAAAALL)
    std::vector<char,TInlineBufferAllocator<char,1024ul>>::__throw_length_error[abi:fe180100]();
  v11 = (uint64_t)(a1 + 2);
  v12 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v5) >> 5);
  if (2 * v12 > v7)
    v7 = 2 * v12;
  if (v12 >= 0x155555555555555)
    v13 = 0x2AAAAAAAAAAAAAALL;
  else
    v13 = v7;
  v20[4] = a1 + 2;
  if (v13)
    v14 = (char *)std::__allocate_at_least[abi:fe180100]<std::allocator<TFontNameString>>(v11, v13);
  else
    v14 = 0;
  v15 = &v14[96 * v6];
  v20[0] = v14;
  v20[1] = v15;
  v20[3] = &v14[96 * v13];
  v16 = *a2;
  v17 = *a3;
  *((_QWORD *)v15 + 2) = *a4;
  v15[24] = 0;
  *((_QWORD *)v15 + 6) = 0;
  *((_QWORD *)v15 + 7) = 0;
  *((_QWORD *)v15 + 4) = &off_1E6176770;
  *((_QWORD *)v15 + 5) = 0;
  v15[64] = 1;
  *(_QWORD *)v15 = &off_1E61768B8;
  *((_QWORD *)v15 + 1) = v17;
  *((_WORD *)v15 + 33) = v16;
  *((_DWORD *)v15 + 17) = 1;
  *((_WORD *)v15 + 36) = 0;
  *((_QWORD *)v15 + 10) = 0;
  *((_QWORD *)v15 + 11) = 0;
  v20[2] = v15 + 96;
  std::vector<TFontNameString>::__swap_out_circular_buffer(a1, v20);
  v18 = a1[1];
  std::__split_buffer<TFontNameString>::~__split_buffer((uint64_t)v20);
  return v18;
}

void sub_1B09C2F08(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<TFontNameString>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL TFractMatrix::IsIdentity(TFractMatrix *this)
{
  return (*(_DWORD *)this - 1073741) <= 1
      && !*((_DWORD *)this + 1)
      && !*((_DWORD *)this + 2)
      && (*((_DWORD *)this + 3) - 1073741) <= 1
      && !*((_DWORD *)this + 4)
      && *((_DWORD *)this + 5) == 0;
}

char *std::vector<char,TInlineBufferAllocator<char,30ul>>::__vallocate[abi:fe180100](char *a1, size_t __sz)
{
  char *result;

  if ((__sz & 0x8000000000000000) != 0)
    std::vector<char,TInlineBufferAllocator<char,1024ul>>::__throw_length_error[abi:fe180100]();
  result = (char *)*((_QWORD *)a1 + 7);
  if (&result[__sz] <= a1 + 54)
    *((_QWORD *)a1 + 7) = &result[__sz];
  else
    result = (char *)operator new(__sz);
  *(_QWORD *)a1 = result;
  *((_QWORD *)a1 + 1) = result;
  *((_QWORD *)a1 + 2) = &result[__sz];
  return result;
}

uint64_t std::__split_buffer<char,TInlineBufferAllocator<char,30ul> &>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)(a1 + 16) != v2)
    *(_QWORD *)(a1 + 16) = v2;
  v3 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    v4 = *(_QWORD *)(a1 + 32);
    if (v4 <= (unint64_t)v3 && v4 + 30 > (unint64_t)v3)
    {
      if (*(_QWORD *)(a1 + 24) == *(_QWORD *)(v4 + 32))
        *(_QWORD *)(v4 + 32) = v3;
    }
    else
    {
      operator delete(v3);
    }
  }
  return a1;
}

void std::vector<char,TInlineBufferAllocator<char,30ul>>::__destroy_vector::operator()[abi:fe180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v3;
  BOOL v4;
  BOOL v5;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v1[1] = v2;
    v3 = (void **)((char *)v1 + 54);
    if (v1 + 3 <= v2)
    {
      v4 = v3 >= v2;
      v5 = v3 == v2;
    }
    else
    {
      v4 = 0;
      v5 = 0;
    }
    if (!v5 && v4)
    {
      if (v1[2] == v1[7])
        v1[7] = v2;
    }
    else
    {
      operator delete(v2);
    }
  }
}

TBlendRec *std::unique_ptr<TBlendRec>::reset[abi:fe180100](TBlendRec **a1, TBlendRec *a2)
{
  TBlendRec *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    TBlendRec::~TBlendRec(result);
    JUMPOUT(0x1B5E0CD38);
  }
  return result;
}

void std::__tree<std::__value_type<unsigned int,unsigned short>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned short>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned short>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<unsigned int,unsigned short>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned short>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned short>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<unsigned int,unsigned short>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned short>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned short>>>::destroy(a1, a2[1]);
    operator delete(a2);
  }
}

uint64_t *std::unique_ptr<std::map<unsigned int,unsigned short>>::reset[abi:fe180100](uint64_t *result)
{
  uint64_t v1;

  v1 = *result;
  *result = 0;
  if (v1)
  {
    std::__tree<std::__value_type<unsigned int,unsigned short>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned short>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned short>>>::destroy(v1, *(_QWORD **)(v1 + 8));
    JUMPOUT(0x1B5E0CD38);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<unsigned int,unsigned short>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned short>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned short>>>::__insert_node_at(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  uint64_t *v5;
  uint64_t *result;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  result = std::__tree_balance_after_insert[abi:fe180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

uint64_t *std::__tree_balance_after_insert[abi:fe180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *((_BYTE *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      v2 = (uint64_t *)a2[2];
      if (*((_BYTE *)v2 + 24))
        return result;
      v3 = (uint64_t *)v2[2];
      v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), v5 = (_BYTE *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            v9 = (uint64_t **)a2[2];
          }
          else
          {
            v9 = (uint64_t **)v2[1];
            v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = v9;
            *v9 = v2;
            v2[2] = (uint64_t)v9;
            v3 = v9[2];
            v2 = (uint64_t *)*v3;
          }
          *((_BYTE *)v9 + 24) = 1;
          *((_BYTE *)v3 + 24) = 0;
          v13 = v2[1];
          *v3 = v13;
          if (v13)
            *(_QWORD *)(v13 + 16) = v3;
          v2[2] = v3[2];
          *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          v11 = a2[1];
          *v2 = v11;
          if (v11)
          {
            *(_QWORD *)(v11 + 16) = v2;
            v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((_BYTE *)a2 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v2 = (uint64_t *)v3[1];
        v12 = *v2;
        v3[1] = *v2;
        if (v12)
          *(_QWORD *)(v12 + 16) = v3;
        v2[2] = v3[2];
        *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
        *v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((_BYTE *)v2 + 24) = 1;
      a2 = v3;
      *((_BYTE *)v3 + 24) = v3 == result;
      *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

double TType1PSFont::GetORUTransform(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)&result = 0x10000;
  *(_OWORD *)a2 = xmmword_1B0AAA880;
  *(_QWORD *)(a2 + 16) = 0;
  return result;
}

uint64_t TParsingContext::SetPGFontType(char **this)
{
  int Integer;
  uint64_t result;

  Integer = TParsingContext::GetInteger(this);
  if (*((_DWORD *)this + 88) != 4 || Integer != 0)
    TParsingContext::ParseError((TParsingContext *)this, 4);
  result = (*((uint64_t (**)(char **, uint64_t))*this + 10))(this, 1000);
  if ((result & 1) == 0)
    TParsingContext::ParseError((TParsingContext *)this, 1);
  *((_WORD *)this[86] + 1) = 1;
  return result;
}

uint64_t TParsingContext::SetCDevProc(const char **this)
{
  uint64_t CDevProc;
  uint64_t result;

  CDevProc = TParsingContext::GetCDevProc(this);
  result = (*((uint64_t (**)(const char **, uint64_t))*this + 42))(this, CDevProc);
  if ((result & 1) == 0)
    TParsingContext::ParseError((TParsingContext *)this, 1);
  return result;
}

uint64_t TParsingContext::SetCharOffsets(TParsingContext *this)
{
  char *BinaryString;
  uint64_t result;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;

  *((_DWORD *)this + 124) = 2;
  BinaryString = TParsingContext::GetBinaryString((char **)this, &v6, &v5, &v4);
  *((_DWORD *)this + 124) = 0;
  result = (*(uint64_t (**)(TParsingContext *, char *, _QWORD))(*(_QWORD *)this + 408))(this, BinaryString, *((_QWORD *)this + 63));
  if ((result & 1) == 0)
    TParsingContext::ParseError(this, 1);
  return result;
}

uint64_t TParsingContext::SetPGFArray(TParsingContext *this)
{
  uint64_t v2;
  int Token;
  int v4;
  uint64_t result;

  if (!(*(unsigned int (**)(TParsingContext *, uint64_t))(*(_QWORD *)this + 392))(this, 0xFFFFFFFFLL))
    goto LABEL_8;
  v2 = 0;
  while (1)
  {
    Token = TParsingContext::GetToken(this);
    if (Token == 6)
      break;
    if (Token == 2)
    {
      v4 = (*(uint64_t (**)(TParsingContext *, uint64_t, _QWORD))(*(_QWORD *)this + 400))(this, v2, *((_QWORD *)this + 31));
      v2 = (v2 + 1);
      if (!v4)
        goto LABEL_8;
    }
  }
  result = (*(uint64_t (**)(TParsingContext *, uint64_t))(*(_QWORD *)this + 392))(this, v2);
  if ((result & 1) == 0)
LABEL_8:
    TParsingContext::ParseError(this, 1);
  return result;
}

uint64_t TParsingContext::SetSubsVector(TParsingContext *this)
{
  uint64_t StringToken;
  uint64_t result;

  StringToken = TParsingContext::GetStringToken(this);
  result = (*(uint64_t (**)(TParsingContext *, _QWORD, uint64_t))(*(_QWORD *)this + 368))(this, *((unsigned int *)this + 48), StringToken);
  if ((result & 1) == 0)
    TParsingContext::ParseError(this, 1);
  return result;
}

uint64_t TParsingContext::SetFDepVector(char **this)
{
  int Token;
  uint64_t v3;
  int v4;
  char v5;
  uint64_t v6;
  int v7;
  uint64_t result;
  __int128 v9;
  uint64_t v10;
  int v11;
  char *v12;
  _BOOL8 v13;
  uint64_t Integer;
  char *BinaryString;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  char __dst[16];
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  Token = TParsingContext::GetToken((TParsingContext *)this);
  if (Token != 4)
  {
    if (Token != 5)
      TParsingContext::ParseError((TParsingContext *)this, 4);
    if ((*((unsigned int (**)(char **, uint64_t))*this + 47))(this, 0xFFFFFFFFLL))
    {
      v3 = 0;
      while (1)
      {
        v4 = TParsingContext::GetToken((TParsingContext *)this);
        if (v4 == 6)
          break;
        if (v4 == 2)
        {
          v5 = (*((uint64_t (**)(char **, uint64_t, char *))*this + 48))(this, v3, this[31]);
          v3 = (v3 + 1);
          if ((v5 & 1) == 0)
            goto LABEL_20;
        }
      }
      result = (*((uint64_t (**)(char **, uint64_t))*this + 47))(this, v3);
      if ((result & 1) != 0)
        return result;
    }
LABEL_20:
    TParsingContext::ParseError((TParsingContext *)this, 1);
  }
  v6 = TParsingContext::InterpretInteger((TParsingContext *)this, this[31]);
  if (!(*((unsigned int (**)(char **, uint64_t))*this + 47))(this, v6))
    goto LABEL_20;
  do
    TParsingContext::SkipTo((TParsingContext *)this, 15);
  while (strcmp(this[31], "dup"));
  while (1)
  {
    while (1)
    {
      v7 = TParsingContext::GetToken((TParsingContext *)this);
      if (v7 != 4)
        break;
      *(_QWORD *)&v9 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v25 = v9;
      v26 = v9;
      v23 = v9;
      v24 = v9;
      v21 = v9;
      v22 = v9;
      *(_OWORD *)__dst = v9;
      v20 = v9;
      v10 = TParsingContext::InterpretInteger((TParsingContext *)this, this[31]);
      TParsingContext::GetToken((TParsingContext *)this);
      strlcpy(__dst, this[31], 0x80uLL);
      v11 = TParsingContext::GetToken((TParsingContext *)this);
      v12 = this[31];
      if (v11 == 15 && !strcmp(this[31], "findfont"))
      {
        if (((*((uint64_t (**)(char **, uint64_t, char *))*this + 48))(this, v10, __dst) & 1) == 0)
          goto LABEL_20;
      }
      else
      {
        v13 = TParsingContext::InterpretBoolean((TParsingContext *)this, v12);
        Integer = TParsingContext::GetInteger(this);
        BinaryString = TParsingContext::GetBinaryString(this, &v18, &v17, &v16);
        if (((*((uint64_t (**)(char **, uint64_t, char *, _BOOL8, uint64_t, char *, char *))*this + 60))(this, v10, __dst, v13, Integer, BinaryString, this[63]) & 1) == 0)goto LABEL_20;
      }
    }
    if (v7 == 15)
    {
      result = strcmp(this[31], "def");
      if (!(_DWORD)result)
        return result;
    }
  }
}

uint64_t TParsingContext::SetMDFV(const char **this)
{
  uint64_t i;
  int Token;
  __int128 v4;
  uint64_t v5;
  int v6;
  char v7;
  uint64_t CDevProc;
  uint64_t result;
  _QWORD v10[3];
  _QWORD v11[2];
  char v12[16];
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _OWORD __dst[8];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  if (TParsingContext::GetToken((TParsingContext *)this) != 5)
    goto LABEL_20;
  if (!(*((unsigned int (**)(const char **, uint64_t))*this + 56))(this, 0xFFFFFFFFLL))
    goto LABEL_21;
  for (i = 0; ; i = (i + 1))
  {
    Token = TParsingContext::GetToken((TParsingContext *)this);
    if (Token != 5)
      break;
    *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
    __dst[6] = v4;
    __dst[7] = v4;
    __dst[4] = v4;
    __dst[5] = v4;
    __dst[2] = v4;
    __dst[3] = v4;
    __dst[0] = v4;
    __dst[1] = v4;
    v18 = v4;
    v19 = v4;
    v16 = v4;
    v17 = v4;
    v14 = v4;
    v15 = v4;
    *(_OWORD *)v12 = v4;
    v13 = v4;
    if (TParsingContext::GetToken((TParsingContext *)this) != 2)
      goto LABEL_20;
    strlcpy((char *)__dst, this[31], 0x80uLL);
    if (TParsingContext::GetToken((TParsingContext *)this) != 2)
      goto LABEL_20;
    strlcpy(v12, this[31], 0x80uLL);
    v11[0] = 0xAAAAAAAAAAAAAAAALL;
    v11[1] = 0xAAAAAAAAAAAAAAAALL;
    TParsingContext::DoFontBBox((TParsingContext *)this, v11);
    if (TParsingContext::GetToken((TParsingContext *)this) != 5)
      goto LABEL_20;
    if (!(*((unsigned int (**)(const char **, uint64_t, _OWORD *, char *, _QWORD *))*this + 57))(this, i, __dst, v12, v11))goto LABEL_21;
    v5 = 0;
    while (1)
    {
      v6 = TParsingContext::GetToken((TParsingContext *)this);
      if (v6 != 2)
        break;
      v7 = (*((uint64_t (**)(const char **, uint64_t, const char *))*this + 58))(this, v5, this[31]);
      v5 = (v5 + 1);
      if ((v7 & 1) == 0)
        goto LABEL_21;
    }
    if (v6 != 6)
      goto LABEL_20;
    memset(v10, 170, sizeof(v10));
    TParsingContext::DoFontMatrix((TParsingContext *)this, (TFractMatrix *)v10);
    CDevProc = TParsingContext::GetCDevProc(this);
    if (((*((uint64_t (**)(const char **, uint64_t, _QWORD *, uint64_t))*this + 59))(this, v5, v10, CDevProc) & 1) == 0)
      goto LABEL_21;
    if (TParsingContext::GetToken((TParsingContext *)this) != 6)
      goto LABEL_20;
  }
  if (Token != 6)
LABEL_20:
    TParsingContext::ParseError((TParsingContext *)this, 4);
  result = (*((uint64_t (**)(const char **, uint64_t))*this + 56))(this, i);
  if ((result & 1) == 0)
LABEL_21:
    TParsingContext::ParseError((TParsingContext *)this, 1);
  return result;
}

uint64_t TParsingContext::BlendStemSnap(TParsingContext *this, int **a2, unsigned int a3, unsigned __int16 *a4)
{
  uint64_t Token;
  uint64_t v9;
  __int128 v10;
  int *v11;
  int **v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t result;
  _DWORD *exception;
  _DWORD *v19;
  _DWORD *v20;
  unint64_t v21;
  TParsingContext *v22;
  int v23[4];
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v21 = 0xAAAAAAAAAAAAAAAALL;
  v22 = (TParsingContext *)0xAAAAAAAAAAAAAAAALL;
  TParseOpenCloseGetTokenScope::TParseOpenCloseGetTokenScope((TParseOpenCloseGetTokenScope *)&v21, this);
  Token = TParsingContext::GetToken(v22);
  LODWORD(v21) = Token;
  if ((_DWORD)Token == 5)
  {
    v9 = 0;
    *(_QWORD *)&v10 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v25 = v10;
    v26 = v10;
    *(_OWORD *)v23 = v10;
    v24 = v10;
    do
    {
      if (v9 == 12)
      {
        exception = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)exception = &off_1E6176998;
        exception[2] = 4;
      }
      if (TParsingContext::GetOpenFixedArray(this, v23, a3) != a3)
      {
        v19 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v19 = &off_1E6176998;
        v19[2] = 4;
      }
      if (a3)
      {
        v11 = v23;
        v12 = a2;
        v13 = a3;
        do
        {
          v15 = *v11++;
          v14 = v15;
          v16 = (uint64_t)*v12++;
          *(_DWORD *)(v16 + 4 * v9) = v14;
          --v13;
        }
        while (v13);
      }
      Token = TParsingContext::GetToken(v22);
      ++v9;
      LODWORD(v21) = Token;
    }
    while ((_DWORD)Token == 5);
  }
  else
  {
    LODWORD(v9) = 0;
  }
  result = TParseOpenCloseGetTokenScope::Close(Token);
  if (v9 < *a4)
  {
    v20 = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)v20 = &off_1E6176998;
    v20[2] = 4;
  }
  *a4 = v9;
  return result;
}

uint64_t TParsingContext::DoBFChar(uint64_t this)
{
  int v1;
  uint64_t v2;
  uint64_t Integer;
  char *v4;
  uint64_t v5;
  int Token;
  uint64_t v7;
  uint64_t v8;

  v1 = *(_DWORD *)(this + 360);
  if (v1)
  {
    v2 = this;
    do
    {
      Integer = TParsingContext::GetInteger((char **)v2);
      if (*(_DWORD *)(v2 + 356) == 3)
      {
        v4 = *(char **)(v2 + 248);
        v5 = ((int)(strchr(v4, 62) - (_DWORD)v4) >> 1);
      }
      else
      {
        v5 = 1;
      }
      Token = TParsingContext::GetToken((TParsingContext *)v2);
      if (Token == 2)
      {
        this = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v2 + 760))(v2, Integer, v5, *(_QWORD *)(v2 + 248));
        if ((this & 1) == 0)
          goto LABEL_16;
      }
      else
      {
        if (Token == 3)
        {
          v8 = strtol_l(*(const char **)(v2 + 248), 0, 16, 0);
          this = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2 + 752))(v2, Integer, v5, v8);
        }
        else
        {
          if (Token != 4)
            TParsingContext::ParseError((TParsingContext *)v2, 4);
          v7 = TParsingContext::InterpretInteger((TParsingContext *)v2, *(char **)(v2 + 248));
          this = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2 + 752))(v2, Integer, v5, v7);
        }
        if ((this & 1) == 0)
LABEL_16:
          TParsingContext::ParseError((TParsingContext *)v2, 1);
      }
      --v1;
    }
    while (v1);
  }
  return this;
}

uint64_t TParsingContext::DoBFRange(uint64_t this)
{
  int v1;
  uint64_t v2;
  uint64_t Integer;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  int Token;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = *(_DWORD *)(this + 360);
  if (v1)
  {
    v2 = this;
    do
    {
      Integer = TParsingContext::GetInteger((char **)v2);
      if (*(_DWORD *)(v2 + 356) == 3)
      {
        v4 = *(char **)(v2 + 248);
        v5 = ((int)(strchr(v4, 62) - (_DWORD)v4) >> 1);
      }
      else
      {
        v5 = 1;
      }
      v6 = TParsingContext::GetInteger((char **)v2);
      if (*(_DWORD *)(v2 + 356) == 3)
      {
        v7 = *(char **)(v2 + 248);
        v8 = ((int)(strchr(v7, 62) - (_DWORD)v7) >> 1);
      }
      else
      {
        v8 = 1;
      }
      Token = TParsingContext::GetToken((TParsingContext *)v2);
      switch(Token)
      {
        case 3:
          v11 = strtol_l(*(const char **)(v2 + 248), 0, 16, 0);
          this = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2 + 736))(v2, Integer, v5, v6, v8, v11);
          break;
        case 4:
          v12 = TParsingContext::InterpretInteger((TParsingContext *)v2, *(char **)(v2 + 248));
          this = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2 + 736))(v2, Integer, v5, v6, v8, v12);
          break;
        case 5:
          v10 = 0;
          while (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v2 + 744))(v2, Integer, v5, v6, v8, v10, *(_QWORD *)(v2 + 248)) & 1) != 0)
          {
            this = TParsingContext::GetToken((TParsingContext *)v2);
            v10 = (v10 + 1);
            if ((_DWORD)this == 6)
              goto LABEL_19;
          }
LABEL_21:
          TParsingContext::ParseError((TParsingContext *)v2, 1);
        default:
          TParsingContext::ParseError((TParsingContext *)v2, 4);
      }
      if ((this & 1) == 0)
        goto LABEL_21;
LABEL_19:
      --v1;
    }
    while (v1);
  }
  return this;
}

uint64_t TParsingContext::DoCIDChar(uint64_t this)
{
  uint64_t v1;
  int v2;
  uint64_t Integer;
  char *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = this;
  v2 = *(_DWORD *)(this + 360) + 1;
  while (--v2)
  {
    Integer = TParsingContext::GetInteger((char **)v1);
    if (*(_DWORD *)(v1 + 356) == 3)
    {
      v4 = *(char **)(v1 + 248);
      v5 = ((int)(strchr(v4, 62) - (_DWORD)v4) >> 1);
    }
    else
    {
      v5 = 1;
    }
    v6 = TParsingContext::GetInteger((char **)v1);
    this = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1 + 664))(v1, Integer, v5, v6);
    if ((this & 1) == 0)
      TParsingContext::ParseError((TParsingContext *)v1, 1);
  }
  return this;
}

uint64_t TParsingContext::DoCIDRange(uint64_t this)
{
  uint64_t v1;
  int v2;
  uint64_t Integer;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;

  v1 = this;
  v2 = *(_DWORD *)(this + 360) + 1;
  while (--v2)
  {
    Integer = TParsingContext::GetInteger((char **)v1);
    if (*(_DWORD *)(v1 + 356) == 3)
    {
      v4 = *(char **)(v1 + 248);
      v5 = ((int)(strchr(v4, 62) - (_DWORD)v4) >> 1);
    }
    else
    {
      v5 = 1;
    }
    v6 = TParsingContext::GetInteger((char **)v1);
    if (*(_DWORD *)(v1 + 356) == 3)
    {
      v7 = *(char **)(v1 + 248);
      v8 = ((int)(strchr(v7, 62) - (_DWORD)v7) >> 1);
    }
    else
    {
      v8 = 1;
    }
    v9 = TParsingContext::GetInteger((char **)v1);
    this = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1 + 656))(v1, Integer, v5, v6, v8, v9);
    if ((this & 1) == 0)
      TParsingContext::ParseError((TParsingContext *)v1, 1);
  }
  return this;
}

uint64_t TParsingContext::DoCodeSpaceRange(uint64_t this)
{
  uint64_t v1;
  int v2;
  uint64_t Integer;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;

  v1 = this;
  v2 = *(_DWORD *)(this + 360) + 1;
  while (--v2)
  {
    Integer = TParsingContext::GetInteger((char **)v1);
    if (*(_DWORD *)(v1 + 356) == 3)
    {
      v4 = *(char **)(v1 + 248);
      v5 = ((int)(strchr(v4, 62) - (_DWORD)v4) >> 1);
    }
    else
    {
      v5 = 1;
    }
    v6 = TParsingContext::GetInteger((char **)v1);
    if (*(_DWORD *)(v1 + 356) == 3)
    {
      v7 = *(char **)(v1 + 248);
      v8 = ((int)(strchr(v7, 62) - (_DWORD)v7) >> 1);
    }
    else
    {
      v8 = 1;
    }
    this = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1 + 688))(v1, Integer, v5, v6, v8);
    if ((this & 1) == 0)
      TParsingContext::ParseError((TParsingContext *)v1, 1);
  }
  return this;
}

uint64_t TParsingContext::DoNotDefChar(uint64_t this)
{
  uint64_t v1;
  int v2;
  uint64_t Integer;
  char *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = this;
  v2 = *(_DWORD *)(this + 360) + 1;
  while (--v2)
  {
    Integer = TParsingContext::GetInteger((char **)v1);
    if (*(_DWORD *)(v1 + 356) == 3)
    {
      v4 = *(char **)(v1 + 248);
      v5 = ((int)(strchr(v4, 62) - (_DWORD)v4) >> 1);
    }
    else
    {
      v5 = 1;
    }
    if (TParsingContext::GetToken((TParsingContext *)v1) != 4)
      TParsingContext::ParseError((TParsingContext *)v1, 4);
    v6 = TParsingContext::InterpretInteger((TParsingContext *)v1, *(char **)(v1 + 248));
    this = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1 + 672))(v1, Integer, v5, v6);
    if ((this & 1) == 0)
      TParsingContext::ParseError((TParsingContext *)v1, 1);
  }
  return this;
}

uint64_t TParsingContext::DoNotDefRange(uint64_t this)
{
  uint64_t v1;
  int v2;
  uint64_t Integer;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;

  v1 = this;
  v2 = *(_DWORD *)(this + 360) + 1;
  while (--v2)
  {
    Integer = TParsingContext::GetInteger((char **)v1);
    if (*(_DWORD *)(v1 + 356) == 3)
    {
      v4 = *(char **)(v1 + 248);
      v5 = ((int)(strchr(v4, 62) - (_DWORD)v4) >> 1);
    }
    else
    {
      v5 = 1;
    }
    v6 = TParsingContext::GetInteger((char **)v1);
    if (*(_DWORD *)(v1 + 356) == 3)
    {
      v7 = *(char **)(v1 + 248);
      v8 = ((int)(strchr(v7, 62) - (_DWORD)v7) >> 1);
    }
    else
    {
      v8 = 1;
    }
    v9 = TParsingContext::GetInteger((char **)v1);
    this = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1 + 680))(v1, Integer, v5, v6, v8, v9);
    if ((this & 1) == 0)
      TParsingContext::ParseError((TParsingContext *)v1, 1);
  }
  return this;
}

uint64_t TParsingContext::DoUseMatrix(TParsingContext *this)
{
  _DWORD v3[6];

  if (TParsingContext::GetToken(this) != 5
    || (v3[0] = TParsingContext::GetFixed(this),
        v3[1] = TParsingContext::GetFixed(this),
        v3[2] = TParsingContext::GetFixed(this),
        v3[3] = TParsingContext::GetFixed(this),
        v3[4] = TParsingContext::GetFixed(this),
        v3[5] = TParsingContext::GetFixed(this),
        TParsingContext::GetToken(this) != 6))
  {
    TParsingContext::ParseError(this, 4);
  }
  if (((*(uint64_t (**)(TParsingContext *, _QWORD, _DWORD *))(*(_QWORD *)this + 720))(this, *((unsigned int *)this + 90), v3) & 1) == 0)TParsingContext::ParseError(this, 1);
  return TParsingContext::GetToken(this);
}

void TParserDictionary::~TParserDictionary(TParserDictionary *this)
{
  JUMPOUT(0x1B5E0CD38);
}

void TParserPrivateDictionary::~TParserPrivateDictionary(TParserPrivateDictionary *this)
{
  JUMPOUT(0x1B5E0CD38);
}

void ParserBlendDictionary::~ParserBlendDictionary(ParserBlendDictionary *this)
{
  JUMPOUT(0x1B5E0CD38);
}

void ParserPrivateBlendDictionary::~ParserPrivateBlendDictionary(ParserPrivateBlendDictionary *this)
{
  JUMPOUT(0x1B5E0CD38);
}

void TGrowableBlocksBuffer::~TGrowableBlocksBuffer(TGrowableBlocksBuffer *this)
{
  void *v1;

  *(_QWORD *)this = &off_1E617A658;
  v1 = (void *)*((_QWORD *)this + 1);
  if (v1)
    free(v1);
}

{
  void *v1;

  *(_QWORD *)this = &off_1E617A658;
  v1 = (void *)*((_QWORD *)this + 1);
  if (v1)
    free(v1);
  JUMPOUT(0x1B5E0CD38);
}

void TGrowableOffsetsAndStringsBuffer::~TGrowableOffsetsAndStringsBuffer(TGrowableOffsetsAndStringsBuffer *this)
{
  void *v1;

  *(_QWORD *)this = &off_1E617A658;
  v1 = (void *)*((_QWORD *)this + 1);
  if (v1)
    free(v1);
}

{
  void *v1;

  *(_QWORD *)this = &off_1E617A658;
  v1 = (void *)*((_QWORD *)this + 1);
  if (v1)
    free(v1);
  JUMPOUT(0x1B5E0CD38);
}

uint64_t EexecDecrypt(unsigned __int8 *a1, const unsigned __int8 *a2, uint64_t a3, uint64_t a4, int a5)
{
  const unsigned __int8 *v5;
  const unsigned __int8 *v6;
  const unsigned __int8 *v7;
  int v8;
  int v9;
  int v10;
  char v11;
  int v12;
  unsigned int v13;
  const unsigned __int8 *v14;
  int v15;
  unsigned int v16;

  if (a5)
  {
    if (2 * a3 >= 1)
    {
      v5 = &a2[2 * a3];
      do
      {
        v6 = a2 - 1;
        v7 = a2 + 1;
        do
        {
          a2 = v7;
          v8 = *++v6;
          v9 = kCharType[v8];
          ++v7;
        }
        while ((v9 & 0x10) != 0);
        do
        {
          v10 = *a2++;
          v11 = kCharType[v10];
        }
        while ((v11 & 0x10) != 0);
        v12 = v11 & 0xF | (16 * v9);
        v13 = v12 ^ (a4 >> 8);
        a4 = 52845 * (a4 + v12) + 22719;
        *a1++ = v13;
      }
      while (a2 < v5);
    }
  }
  else if (a3 >= 1)
  {
    v14 = &a2[a3];
    do
    {
      v15 = *a2++;
      v16 = v15 ^ (a4 >> 8);
      a4 = (52845 * (a4 + v15) + 22719);
      *a1++ = v16;
    }
    while (a2 < v14);
  }
  return a4;
}

void TParsingContext::TParsingContext(TParsingContext *this, const TDataReference *a2, uint64_t a3)
{
  _OWORD *v5;

  *((_QWORD *)this + 2) = this;
  *((_QWORD *)this + 3) = &off_1E617A5A0;
  *((_QWORD *)this + 4) = this;
  *(_QWORD *)this = &off_1E617CAA0;
  *((_QWORD *)this + 1) = &off_1E617A5D8;
  *((_QWORD *)this + 5) = &off_1E6176770;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 6) = 0;
  TDataReference::operator=((TParsingContext *)((char *)this + 40), (uint64_t)a2);
  *((_DWORD *)this + 18) = 0;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *((_QWORD *)this + 27) = 0;
  *((_QWORD *)this + 28) = 0;
  *((_QWORD *)this + 25) = &off_1E617A610;
  *((_QWORD *)this + 26) = 0;
  *((_QWORD *)this + 31) = 0;
  *((_QWORD *)this + 32) = 0;
  *((_QWORD *)this + 29) = 4096;
  *((_QWORD *)this + 30) = &off_1E617A610;
  *((_QWORD *)this + 33) = 0;
  *((_QWORD *)this + 34) = 4096;
  *((_WORD *)this + 256) = 0;
  *((_BYTE *)this + 514) = 0;
  *((_QWORD *)this + 68) = 0;
  *((_QWORD *)this + 66) = 0;
  *((_QWORD *)this + 67) = 0;
  *((_QWORD *)this + 65) = &off_1E617A610;
  *((_QWORD *)this + 69) = 64;
  *((_QWORD *)this + 70) = -1;
  *((_QWORD *)this + 71) = -1;
  *((_QWORD *)this + 72) = -1;
  *((_DWORD *)this + 146) = -1;
  *((_QWORD *)this + 74) = &off_1E617A658;
  *((_QWORD *)this + 75) = malloc_type_calloc(8uLL, 1uLL, 0x165F8858uLL);
  *((_OWORD *)this + 38) = xmmword_1B0AAACB0;
  *((_QWORD *)this + 78) = a3;
  *((_QWORD *)this + 79) = 0;
  *((_QWORD *)this + 80) = &off_1E617A658;
  *((_QWORD *)this + 81) = 0;
  *((_QWORD *)this + 83) = 0;
  *((_QWORD *)this + 82) = 0;
  v5 = (_OWORD *)operator new[]();
  v5[26] = 0u;
  v5[27] = 0u;
  v5[24] = 0u;
  v5[25] = 0u;
  v5[22] = 0u;
  v5[23] = 0u;
  v5[20] = 0u;
  v5[21] = 0u;
  v5[18] = 0u;
  v5[19] = 0u;
  v5[16] = 0u;
  v5[17] = 0u;
  v5[14] = 0u;
  v5[15] = 0u;
  v5[12] = 0u;
  v5[13] = 0u;
  v5[10] = 0u;
  v5[11] = 0u;
  v5[8] = 0u;
  v5[9] = 0u;
  v5[6] = 0u;
  v5[7] = 0u;
  v5[4] = 0u;
  v5[5] = 0u;
  v5[2] = 0u;
  v5[3] = 0u;
  *v5 = 0u;
  v5[1] = 0u;
  *((_QWORD *)this + 84) = v5;
  *((_QWORD *)this + 85) = 448;
  *((_QWORD *)this + 86) = v5;
  *((_QWORD *)this + 87) = 65536000;
  *((_QWORD *)this + 88) = 0x1000000040000;
  *((_QWORD *)this + 91) = 0;
  *((_QWORD *)this + 89) = 0;
  *((_BYTE *)this + 720) = 0;
  *((_DWORD *)this + 184) = 14;
  if (InitParserDictionarys(void)::once != -1)
    dispatch_once(&InitParserDictionarys(void)::once, &__block_literal_global_2);
}

void sub_1B09C4754(_Unwind_Exception *a1)
{
  _QWORD *v1;
  TDataReference *v2;
  uint64_t v3;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  v1[80] = v3;
  v5 = (void *)v1[81];
  if (v5)
    free(v5);
  v1[74] = v3;
  v6 = (void *)v1[75];
  if (v6)
    free(v6);
  v1[65] = v3;
  v7 = (void *)v1[66];
  if (v7)
    free(v7);
  v1[30] = v3;
  v8 = (void *)v1[31];
  if (v8)
    free(v8);
  v1[25] = v3;
  v9 = (void *)v1[26];
  if (v9)
    free(v9);
  TInputBufferRef::~TInputBufferRef((TInputBufferRef *)(v1 + 10));
  TDataReference::~TDataReference(v2);
  *v1 = &off_1E617C780;
  _Unwind_Resume(a1);
}

void TInputBufferRef::~TInputBufferRef(TInputBufferRef *this)
{
  void *v2;
  void *v3;

  v2 = (void *)*((_QWORD *)this + 10);
  if (v2)
  {
    *((_QWORD *)this + 11) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 7);
  if (v3)
  {
    *((_QWORD *)this + 8) = v3;
    operator delete(v3);
  }
}

void TParsingContext::HexConvert(TParsingContext *this)
{
  unint64_t v2;
  unsigned __int8 *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  int v10;
  void **v11;
  unsigned __int8 *v12;
  _BYTE *v13;
  unsigned __int8 *v14;
  int v15;
  char v16;
  int v17;
  int v18;
  unint64_t v19;
  char *v20;
  _DWORD *v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  int *v28;
  int v29;
  unsigned __int8 *v30;
  int v31;
  _DWORD *exception;
  int v33;
  int v34;

  v3 = (unsigned __int8 *)*((_QWORD *)this + 11);
  v2 = *((_QWORD *)this + 12);
  v4 = v2 - (_QWORD)v3;
  *((_QWORD *)this + 27) = (int)v2 - (int)v3;
  if (*((_QWORD *)this + 28) >= (unint64_t)((int)v2 - (int)v3))
  {
    v9 = (_BYTE *)*((_QWORD *)this + 26);
  }
  else
  {
    v5 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 25) + 48))((char *)this + 200);
    v7 = *((_QWORD *)this + 25);
    v6 = *((_QWORD *)this + 26);
    if (v6)
      v8 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 40))((char *)this + 200, v6, v5);
    else
      v8 = (*(uint64_t (**)(char *, uint64_t))(v7 + 16))((char *)this + 200, v5);
    v9 = (_BYTE *)v8;
    *((_QWORD *)this + 26) = v8;
    if (!v8)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)exception = &off_1E6176998;
      v33 = 2;
      goto LABEL_39;
    }
    *((_QWORD *)this + 28) = v5;
  }
  v10 = *((_DWORD *)this + 28);
  if ((unint64_t)v3 < v2)
  {
    v34 = v2;
    v11 = (void **)((char *)this + 160);
    v12 = &v3[v4];
    v13 = v9;
    v14 = v3;
    while (1)
    {
      v15 = *v14++;
      v16 = kCharType[v15];
      if ((v16 & 0x10) != 0)
      {
        v18 = ~(_DWORD)v9 + (_DWORD)v13;
        v20 = (char *)*((_QWORD *)this + 21);
        v19 = *((_QWORD *)this + 22);
        if ((unint64_t)v20 >= v19)
        {
          v22 = (char *)*v11;
          v23 = (v20 - (_BYTE *)*v11) >> 2;
          v24 = v23 + 1;
          if ((unint64_t)(v23 + 1) >> 62)
            std::vector<unsigned int>::__throw_length_error[abi:fe180100]();
          v25 = v19 - (_QWORD)v22;
          if (v25 >> 1 > v24)
            v24 = v25 >> 1;
          if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFFCLL)
            v26 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v26 = v24;
          if (v26)
          {
            v27 = (char *)std::__allocate_at_least[abi:fe180100]<std::allocator<int>>((uint64_t)this + 176, v26);
            v22 = (char *)*((_QWORD *)this + 20);
            v20 = (char *)*((_QWORD *)this + 21);
          }
          else
          {
            v27 = 0;
          }
          v28 = (int *)&v27[4 * v23];
          *v28 = v18;
          v21 = v28 + 1;
          while (v20 != v22)
          {
            v29 = *((_DWORD *)v20 - 1);
            v20 -= 4;
            *--v28 = v29;
          }
          *((_QWORD *)this + 20) = v28;
          *((_QWORD *)this + 21) = v21;
          *((_QWORD *)this + 22) = &v27[4 * v26];
          if (v22)
            operator delete(v22);
        }
        else
        {
          *(_DWORD *)v20 = v18;
          v21 = v20 + 4;
        }
        *((_QWORD *)this + 21) = v21;
      }
      else
      {
        if ((v16 & 0x80) == 0)
        {
          v30 = &v3[-(v10 >= 0)];
          if ((unint64_t)v30 >= *((_QWORD *)this + 11))
          {
            v31 = v34 - (_DWORD)v30;
            memmove(v13, v30, v34 - (int)v30);
            *((_QWORD *)this + 13) = &v13[v31];
            goto LABEL_37;
          }
          exception = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)exception = &off_1E6176998;
          v33 = 4;
LABEL_39:
          exception[2] = v33;
        }
        v17 = v16 & 0xF;
        if (v10 < 0)
        {
          v10 = 16 * v17;
        }
        else
        {
          *v13++ = v17 | v10;
          v10 = -1;
        }
      }
      v3 = v14;
      if (v14 == v12)
        goto LABEL_37;
    }
  }
  v13 = v9;
LABEL_37:
  *((_DWORD *)this + 28) = v10;
  *((_QWORD *)this + 11) = v9;
  *((_QWORD *)this + 12) = v13;
  *((_QWORD *)this + 23) = v9;
  *((_DWORD *)this + 49) += (_DWORD)v9 - (_DWORD)v13;
}

void TParsingContext::ParseError(TParsingContext *this, int a2)
{
  _DWORD *exception;

  exception = __cxa_allocate_exception(0x10uLL);
  *(_QWORD *)exception = &off_1E6176998;
  exception[2] = a2;
}

uint64_t TParsingContext::DoCIDProtect(TParsingContext *this)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t result;

  v2 = *((_QWORD *)this + 11);
  v3 = *((_QWORD *)this + 12);
  v4 = v2 + 1;
  *((_QWORD *)this + 11) = v2 + 1;
  if (v2 >= v3)
  {
    TParsingContext::FillBuf(this);
    v4 = *((_QWORD *)this + 11);
  }
  result = (*(uint64_t (**)(TParsingContext *, uint64_t, unint64_t))(*(_QWORD *)this + 504))(this, 22, v4);
  if ((_DWORD)result)
    *((_QWORD *)this + 11) += 22;
  return result;
}

uint64_t TParsingContext::DoFontProtect(TParsingContext *this)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t result;

  v2 = *((_QWORD *)this + 11);
  v3 = *((_QWORD *)this + 12);
  v4 = v2 + 1;
  *((_QWORD *)this + 11) = v2 + 1;
  if (v2 >= v3)
  {
    TParsingContext::FillBuf(this);
    v4 = *((_QWORD *)this + 11);
  }
  result = (*(uint64_t (**)(TParsingContext *, uint64_t, unint64_t))(*(_QWORD *)this + 504))(this, 10, v4);
  if ((_DWORD)result)
    *((_QWORD *)this + 11) += 10;
  return result;
}

uint64_t TParsingContext::SkipBinaryString(char **this)
{
  int Integer;
  uint64_t result;
  char *v4;
  char *v5;

  Integer = TParsingContext::GetInteger(this);
  for (result = TParsingContext::GetToken((TParsingContext *)this); Integer; --Integer)
  {
    v4 = this[11];
    v5 = this[12];
    this[11] = v4 + 1;
    if (v4 >= v5)
      result = TParsingContext::FillBuf((TParsingContext *)this);
  }
  return result;
}

void MParserProtocols::~MParserProtocols(MParserProtocols *this)
{
  *(_QWORD *)this = &off_1E617C780;
}

{
  *(_QWORD *)this = &off_1E617C780;
  JUMPOUT(0x1B5E0CD38);
}

void TEncodingProtocol::~TEncodingProtocol(TEncodingProtocol *this)
{
  JUMPOUT(0x1B5E0CD38);
}

void TAccentEncodingProtocol::~TAccentEncodingProtocol(TAccentEncodingProtocol *this)
{
  JUMPOUT(0x1B5E0CD38);
}

uint64_t TAccentEncodingProtocol::UseStandard(TAccentEncodingProtocol *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 48))(*((_QWORD *)this + 1));
}

uint64_t TAccentEncodingProtocol::UseSpecial(TAccentEncodingProtocol *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 56))(*((_QWORD *)this + 1));
}

uint64_t TAccentEncodingProtocol::Special(TAccentEncodingProtocol *this, uint64_t a2, const char *a3)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, const char *))(**((_QWORD **)this + 1) + 64))(*((_QWORD *)this + 1), a2, a3);
}

uint64_t TParsingContext::GetCDevProc(const char **this)
{
  int Token;
  uint64_t result;

  Token = TParsingContext::GetToken((TParsingContext *)this);
  if (Token == 15)
  {
    result = strcmp(this[31], "null");
    if (!(_DWORD)result)
      return result;
    goto LABEL_8;
  }
  if (Token == 5)
  {
    TParsingContext::SkipTo((TParsingContext *)this, 6);
    return 0xFFFFFFFFLL;
  }
  if (Token != 2)
LABEL_8:
    TParsingContext::ParseError((TParsingContext *)this, 4);
  if (!strcmp(this[31], "StandardCDevProc"))
    return 1;
  else
    return 0xFFFFFFFFLL;
}

uint64_t MParserProtocols::GetBytes(MParserProtocols *this, unint64_t *a2)
{
  *a2 = 0;
  return 0;
}

uint64_t MParserProtocols::UseSpecialEncoding(MParserProtocols *this)
{
  return 1;
}

uint64_t MParserProtocols::SpecialEncoding(MParserProtocols *this, int a2, const char *a3)
{
  return 1;
}

uint64_t MParserProtocols::UseStandardAccentEncoding(MParserProtocols *this)
{
  return 1;
}

uint64_t MParserProtocols::UseSpecialAccentEncoding(MParserProtocols *this)
{
  return 1;
}

uint64_t MParserProtocols::SpecialAccentEncoding(MParserProtocols *this, int a2, const char *a3)
{
  return 1;
}

uint64_t MParserProtocols::StartEexecSection(MParserProtocols *this)
{
  return 1;
}

uint64_t MParserProtocols::FontName(MParserProtocols *this, const char *a2)
{
  return 1;
}

uint64_t MParserProtocols::Notice(MParserProtocols *this, const char *a2)
{
  return 1;
}

uint64_t MParserProtocols::FullName(MParserProtocols *this, const char *a2)
{
  return 1;
}

uint64_t MParserProtocols::FamilyName(MParserProtocols *this, const char *a2)
{
  return 1;
}

uint64_t MParserProtocols::Weight(MParserProtocols *this, const char *a2)
{
  return 1;
}

uint64_t MParserProtocols::Version(MParserProtocols *this, const char *a2)
{
  return 1;
}

uint64_t MParserProtocols::ItalicAngle(MParserProtocols *this)
{
  return 1;
}

uint64_t MParserProtocols::FixedPitch(MParserProtocols *this)
{
  return 1;
}

uint64_t MParserProtocols::UnderlinePosition(MParserProtocols *this)
{
  return 1;
}

uint64_t MParserProtocols::UnderlineThickness(MParserProtocols *this)
{
  return 1;
}

uint64_t MParserProtocols::Copyright(MParserProtocols *this, const char *a2)
{
  return 1;
}

uint64_t MParserProtocols::FSType(MParserProtocols *this)
{
  return 1;
}

uint64_t MParserProtocols::AllocCharStrings(MParserProtocols *this)
{
  return 1;
}

uint64_t MParserProtocols::CharString(MParserProtocols *this, unsigned int a2, unsigned int a3, unsigned int a4, const char *a5, const char *a6)
{
  return 1;
}

uint64_t MParserProtocols::ShareCharStrings(MParserProtocols *this, const char *a2)
{
  return 1;
}

uint64_t MParserProtocols::AllocSubroutines(MParserProtocols *this)
{
  return 1;
}

uint64_t MParserProtocols::Subroutine()
{
  return 1;
}

uint64_t MParserProtocols::ShareSubroutines(MParserProtocols *this, const char *a2)
{
  return 1;
}

uint64_t MParserProtocols::WeightVector(MParserProtocols *this, int *a2)
{
  return 1;
}

uint64_t MParserProtocols::ResizeFontDesc()
{
  return 1;
}

uint64_t MParserProtocols::BlendNumberDesigns(MParserProtocols *this)
{
  return 1;
}

uint64_t MParserProtocols::BlendNumberAxes(MParserProtocols *this)
{
  return 1;
}

uint64_t MParserProtocols::BlendAxisType(MParserProtocols *this, unsigned int a2, const char *a3)
{
  return 1;
}

uint64_t MParserProtocols::BlendDesignMapping(MParserProtocols *this, unsigned int a2, int a3, int *a4, int *a5)
{
  return 1;
}

uint64_t MParserProtocols::BlendDesignPositions(MParserProtocols *this, int a2, int *a3)
{
  return 1;
}

uint64_t MParserProtocols::BlendUnderlinePosition(MParserProtocols *this)
{
  return 1;
}

uint64_t MParserProtocols::BlendUnderlineThickness(MParserProtocols *this)
{
  return 1;
}

uint64_t MParserProtocols::BlendItalicAngle(MParserProtocols *this)
{
  return 1;
}

uint64_t MParserProtocols::UseNamedEncoding(MParserProtocols *this, const char *a2)
{
  return 1;
}

uint64_t MParserProtocols::WritingMode(MParserProtocols *this)
{
  return 1;
}

uint64_t MParserProtocols::CDevProc(MParserProtocols *this)
{
  return 1;
}

uint64_t MParserProtocols::OriginalFont(MParserProtocols *this, const char *a2)
{
  return 1;
}

uint64_t MParserProtocols::FMapType(MParserProtocols *this)
{
  return 1;
}

uint64_t MParserProtocols::EscChar(MParserProtocols *this)
{
  return 1;
}

uint64_t MParserProtocols::SubsVector(MParserProtocols *this, int a2, const unsigned __int8 *a3)
{
  return 1;
}

uint64_t MParserProtocols::AllocFDepVector(MParserProtocols *this)
{
  return 1;
}

uint64_t MParserProtocols::FDepVector(MParserProtocols *this, int a2, const char *a3)
{
  return 1;
}

uint64_t MParserProtocols::AllocPGFArray(MParserProtocols *this)
{
  return 1;
}

uint64_t MParserProtocols::PGFArray(MParserProtocols *this, int a2, const char *a3)
{
  return 1;
}

uint64_t MParserProtocols::CharOffsets(MParserProtocols *this, int a2, const unsigned __int8 *a3)
{
  return 1;
}

uint64_t MParserProtocols::UseNamedCharStrings(MParserProtocols *this, const char *a2)
{
  return 1;
}

uint64_t MParserProtocols::PrefEnc(MParserProtocols *this, const char *a2)
{
  return 1;
}

uint64_t MParserProtocols::NumericEncoding(MParserProtocols *this)
{
  return 1;
}

uint64_t MParserProtocols::MDID(MParserProtocols *this)
{
  return 1;
}

uint64_t MParserProtocols::AllocMDFV(MParserProtocols *this)
{
  return 1;
}

uint64_t MParserProtocols::MDFVBegin()
{
  return 1;
}

uint64_t MParserProtocols::MDFVFont(MParserProtocols *this, int a2, const char *a3)
{
  return 1;
}

uint64_t MParserProtocols::MDFVEnd(MParserProtocols *this, int a2, TFractMatrix *a3)
{
  return 1;
}

uint64_t MParserProtocols::FDepVector_MDFF(MParserProtocols *this, int a2, const char *a3, BOOL a4, int a5, int a6, const unsigned __int8 *a7)
{
  return 1;
}

uint64_t MParserProtocols::PGFontID(MParserProtocols *this)
{
  return 1;
}

uint64_t MParserProtocols::RunInt(MParserProtocols *this, const char *a2)
{
  return 1;
}

uint64_t MParserProtocols::FontProtection(MParserProtocols *this, int a2, const unsigned __int8 *a3)
{
  return 1;
}

uint64_t MParserProtocols::GDBytes(MParserProtocols *this)
{
  return 1;
}

uint64_t MParserProtocols::FDBytes(MParserProtocols *this)
{
  return 1;
}

uint64_t MParserProtocols::CIDCount(MParserProtocols *this)
{
  return 1;
}

uint64_t MParserProtocols::CIDMapOffset(MParserProtocols *this)
{
  return 1;
}

uint64_t MParserProtocols::CIDFontVersion(MParserProtocols *this)
{
  return 1;
}

uint64_t MParserProtocols::Registry(MParserProtocols *this, const char *a2)
{
  return 1;
}

uint64_t MParserProtocols::Ordering(MParserProtocols *this, const char *a2)
{
  return 1;
}

uint64_t MParserProtocols::Supplement(MParserProtocols *this)
{
  return 1;
}

uint64_t MParserProtocols::FDArrayFontName(MParserProtocols *this, const char *a2)
{
  return 1;
}

uint64_t MParserProtocols::CIDFDArray(MParserProtocols *this)
{
  return 1;
}

uint64_t MParserProtocols::BeginCIDFontDict()
{
  return 0;
}

uint64_t MParserProtocols::EndCIDFontDict(MParserProtocols *this)
{
  return 1;
}

uint64_t MParserProtocols::CIDStartData(MParserProtocols *this)
{
  return 1;
}

uint64_t MParserProtocols::UIDBase(MParserProtocols *this)
{
  return 1;
}

uint64_t MParserProtocols::XUID(MParserProtocols *this, int a2, int *a3)
{
  return 1;
}

uint64_t MParserProtocols::SDBytes(MParserProtocols *this)
{
  return 1;
}

uint64_t MParserProtocols::SubrMapOffset(MParserProtocols *this)
{
  return 1;
}

uint64_t MParserProtocols::SubrCount(MParserProtocols *this)
{
  return 1;
}

uint64_t MParserProtocols::cidrange(MParserProtocols *this)
{
  return 1;
}

uint64_t MParserProtocols::cidchar(MParserProtocols *this)
{
  return 1;
}

uint64_t MParserProtocols::notdefchar(MParserProtocols *this)
{
  return 1;
}

uint64_t MParserProtocols::notdefrange(MParserProtocols *this)
{
  return 1;
}

uint64_t MParserProtocols::codespacerange(MParserProtocols *this)
{
  return 1;
}

uint64_t MParserProtocols::rearrangedfont(MParserProtocols *this, const char *a2)
{
  return 1;
}

uint64_t MParserProtocols::componentfont(MParserProtocols *this, int a2, const char *a3)
{
  return 1;
}

uint64_t MParserProtocols::endcomponentfont(MParserProtocols *this)
{
  return 1;
}

uint64_t MParserProtocols::usematrix()
{
  return 1;
}

uint64_t MParserProtocols::usefont(MParserProtocols *this)
{
  return 1;
}

uint64_t MParserProtocols::bfrange_code(MParserProtocols *this)
{
  return 1;
}

uint64_t MParserProtocols::bfrange_name(MParserProtocols *this, unsigned int a2, int a3, unsigned int a4, int a5, int a6, const char *a7)
{
  return 1;
}

uint64_t MParserProtocols::bfchar_code(MParserProtocols *this)
{
  return 1;
}

uint64_t MParserProtocols::bfchar_name(MParserProtocols *this, unsigned int a2, int a3, const char *a4)
{
  return 1;
}

uint64_t MParserProtocols::UseCMap(MParserProtocols *this, const char *a2)
{
  return 1;
}

uint64_t MParserProtocols::HostSupport(MParserProtocols *this, const char *a2)
{
  return 1;
}

uint64_t TParsingContext::GetStandardEncodeName(TParsingContext *this)
{
  int v1;
  uint64_t v2;
  char *v3;
  int v4;
  unsigned __int16 *i;

  v1 = (int)this;
  v2 = TParsingContext::EncodeTable(void)::gEncodeTableP;
  v3 = (char *)TParsingContext::EncodeTable(void)::gEncodeTableP;
  if (!TParsingContext::EncodeTable(void)::gEncodeTableP)
  {
    v3 = TParsingContext::BuildMacEncTable(0);
    v2 = (uint64_t)v3;
    TParsingContext::EncodeTable(void)::gEncodeTableP = (uint64_t)v3;
    if (!v3)
    {
      v3 = TParsingContext::BuildMacEncTable(0);
      v2 = 0;
      TParsingContext::EncodeTable(void)::gEncodeTableP = (uint64_t)v3;
    }
  }
  v4 = *((_DWORD *)v3 + 2);
  if (!v4)
    return 0;
  for (i = (unsigned __int16 *)(v2 + 24); *((unsigned __int8 *)i + 3) != v1; i += 3)
  {
    if (!--v4)
      return 0;
  }
  if (!v3)
  {
    v3 = TParsingContext::BuildMacEncTable(0);
    TParsingContext::EncodeTable(void)::gEncodeTableP = (uint64_t)v3;
  }
  return *(_QWORD *)v3 + *i;
}

uint64_t FPGetStandardEncodingName(TParsingContext *a1)
{
  if ((_DWORD)a1)
    return TParsingContext::GetStandardEncodeName(a1);
  else
    return 0;
}

uint64_t TParsingContext::ShareCharStrings(TParsingContext *this, const char *a2)
{
  return 0;
}

uint64_t TParsingContext::ShareSubroutines(TParsingContext *this, const char *a2)
{
  return 0;
}

uint64_t TParsingContext::GetType1DataOffset(TParsingContext *this)
{
  return 0;
}

uint64_t TParsingContext::CharStringIndex(uint64_t this, int a2, int a3, int a4, const char *a5)
{
  _DWORD *v5;

  v5 = (_DWORD *)(*(_QWORD *)(this + 632) + 8 * a2);
  *v5 = a3;
  v5[1] = a4;
  return this;
}

BOOL TParsingContext::Subroutine(uint64_t a1, unsigned int a2, unsigned __int8 *a3, int a4, uint64_t *a5)
{
  int v8;
  int v9;
  int v10;
  unsigned __int8 *v13;
  unint64_t v14;
  unint64_t v15;
  uint8x8_t v16;
  unint64_t v17;
  uint64_t **v19;
  uint64_t *v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  float v24;
  float v25;
  _BOOL8 v26;
  unint64_t v27;
  unint64_t v28;
  int8x8_t prime;
  void *v30;
  void *v31;
  uint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  uint8x8_t v35;
  unint64_t v36;
  uint8x8_t v37;
  uint64_t v38;
  _QWORD *v39;
  unint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  unint64_t v43;
  uint64_t v44;
  void *v45;

  if ((a2 & 0x80000000) != 0 || *(unsigned __int16 *)(a1 + 704) <= a2)
    return 0;
  v8 = *(__int16 *)(*(_QWORD *)(a1 + 688) + 56);
  v9 = v8 & ~(v8 >> 31);
  v10 = a4 - v9;
  if (a4 - v9 < 1)
    return a4 == v9;
  v13 = (unsigned __int8 *)operator new[]();
  LenIVDecrypt(v13, a3, a4, *(__int16 *)(*(_QWORD *)(a1 + 688) + 56));
  v14 = a2;
  v15 = a5[1];
  if (!v15)
  {
    v17 = 0xAAAAAAAAAAAAAAAALL;
    goto LABEL_23;
  }
  v16 = (uint8x8_t)vcnt_s8((int8x8_t)v15);
  v16.i16[0] = vaddlv_u8(v16);
  if (v16.u32[0] > 1uLL)
  {
    v17 = a2;
    if (v15 <= a2)
      v17 = a2 % v15;
  }
  else
  {
    v17 = ((_DWORD)v15 - 1) & a2;
  }
  v19 = *(uint64_t ***)(*a5 + 8 * v17);
  if (!v19 || (v20 = *v19) == 0)
  {
LABEL_23:
    v22 = operator new(0x28uLL);
    v23 = a5 + 2;
    *v22 = 0;
    v22[1] = a2;
    *((_DWORD *)v22 + 4) = a2;
    v22[3] = v13;
    *((_DWORD *)v22 + 8) = v10;
    v24 = (float)(unint64_t)(a5[3] + 1);
    v25 = *((float *)a5 + 8);
    if (v15 && (float)(v25 * (float)v15) >= v24)
    {
      v14 = v17;
      goto LABEL_69;
    }
    v26 = 1;
    if (v15 >= 3)
      v26 = (v15 & (v15 - 1)) != 0;
    v27 = v26 | (2 * v15);
    v28 = vcvtps_u32_f32(v24 / v25);
    if (v27 <= v28)
      prime = (int8x8_t)v28;
    else
      prime = (int8x8_t)v27;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v15 = a5[1];
    }
    if (*(_QWORD *)&prime <= v15)
    {
      if (*(_QWORD *)&prime >= v15)
        goto LABEL_65;
      v36 = vcvtps_u32_f32((float)(unint64_t)a5[3] / *((float *)a5 + 8));
      if (v15 < 3 || (v37 = (uint8x8_t)vcnt_s8((int8x8_t)v15), v37.i16[0] = vaddlv_u8(v37), v37.u32[0] > 1uLL))
      {
        v36 = std::__next_prime(v36);
      }
      else
      {
        v38 = 1 << -(char)__clz(v36 - 1);
        if (v36 >= 2)
          v36 = v38;
      }
      if (*(_QWORD *)&prime <= v36)
        prime = (int8x8_t)v36;
      if (*(_QWORD *)&prime >= v15)
      {
        v15 = a5[1];
        goto LABEL_65;
      }
      if (!*(_QWORD *)&prime)
      {
        v45 = (void *)*a5;
        *a5 = 0;
        if (v45)
          operator delete(v45);
        v15 = 0;
        a5[1] = 0;
        goto LABEL_65;
      }
    }
    if (*(_QWORD *)&prime >> 61)
      std::__throw_bad_array_new_length[abi:fe180100]();
    v30 = operator new(8 * *(_QWORD *)&prime);
    v31 = (void *)*a5;
    *a5 = (uint64_t)v30;
    if (v31)
      operator delete(v31);
    v32 = 0;
    a5[1] = (uint64_t)prime;
    do
      *(_QWORD *)(*a5 + 8 * v32++) = 0;
    while (*(_QWORD *)&prime != v32);
    v33 = (_QWORD *)*v23;
    if (*v23)
    {
      v34 = v33[1];
      v35 = (uint8x8_t)vcnt_s8(prime);
      v35.i16[0] = vaddlv_u8(v35);
      if (v35.u32[0] > 1uLL)
      {
        if (v34 >= *(_QWORD *)&prime)
          v34 %= *(_QWORD *)&prime;
      }
      else
      {
        v34 &= *(_QWORD *)&prime - 1;
      }
      *(_QWORD *)(*a5 + 8 * v34) = v23;
      v39 = (_QWORD *)*v33;
      if (*v33)
      {
        do
        {
          v40 = v39[1];
          if (v35.u32[0] > 1uLL)
          {
            if (v40 >= *(_QWORD *)&prime)
              v40 %= *(_QWORD *)&prime;
          }
          else
          {
            v40 &= *(_QWORD *)&prime - 1;
          }
          if (v40 != v34)
          {
            if (!*(_QWORD *)(*a5 + 8 * v40))
            {
              *(_QWORD *)(*a5 + 8 * v40) = v33;
              goto LABEL_61;
            }
            *v33 = *v39;
            *v39 = **(_QWORD **)(*a5 + 8 * v40);
            **(_QWORD **)(*a5 + 8 * v40) = v39;
            v39 = v33;
          }
          v40 = v34;
LABEL_61:
          v33 = v39;
          v39 = (_QWORD *)*v39;
          v34 = v40;
        }
        while (v39);
      }
    }
    v15 = (unint64_t)prime;
LABEL_65:
    if ((v15 & (v15 - 1)) != 0)
    {
      if (v15 <= a2)
        v14 = a2 % v15;
    }
    else
    {
      v14 = ((_DWORD)v15 - 1) & a2;
    }
LABEL_69:
    v41 = *a5;
    v42 = *(_QWORD **)(*a5 + 8 * v14);
    if (v42)
    {
      *v22 = *v42;
    }
    else
    {
      *v22 = *v23;
      *v23 = v22;
      *(_QWORD *)(v41 + 8 * v14) = v23;
      if (!*v22)
      {
LABEL_78:
        ++a5[3];
        return 1;
      }
      v43 = *(_QWORD *)(*v22 + 8);
      if ((v15 & (v15 - 1)) != 0)
      {
        if (v43 >= v15)
          v43 %= v15;
      }
      else
      {
        v43 &= v15 - 1;
      }
      v42 = (_QWORD *)(*a5 + 8 * v43);
    }
    *v42 = v22;
    goto LABEL_78;
  }
  while (1)
  {
    v21 = v20[1];
    if (v21 == a2)
      break;
    if (v16.u32[0] > 1uLL)
    {
      if (v21 >= v15)
        v21 %= v15;
    }
    else
    {
      v21 &= v15 - 1;
    }
    if (v21 != v17)
      goto LABEL_23;
LABEL_22:
    v20 = (uint64_t *)*v20;
    if (!v20)
      goto LABEL_23;
  }
  if (*((_DWORD *)v20 + 4) != a2)
    goto LABEL_22;
  v44 = v20[3];
  v20[3] = (uint64_t)v13;
  if (v44)
    MEMORY[0x1B5E0CD14](v44, 0x1000C8077774924);
  *((_DWORD *)v20 + 8) = v10;
  return 1;
}

void sub_1B09C5588(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<int,std::pair<std::unique_ptr<unsigned char const[]>,int>>,void *>>>::operator()[abi:fe180100](1, v1);
  _Unwind_Resume(a1);
}

uint64_t TParsingContext::FixedPitch(TParsingContext *this, int a2)
{
  if (a2)
    *((_BYTE *)this + 720) = 1;
  return 1;
}

uint64_t TParsingContext::AllocCharStrings(TParsingContext *this, unsigned int a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *exception;

  if (a2 - 1 > 0x3FFFFFFD)
    return 0;
  v4 = 8 * a2 + 512;
  *((_QWORD *)this + 76) = v4;
  if (*((_QWORD *)this + 77) >= v4)
  {
    v8 = *((_QWORD *)this + 75);
  }
  else
  {
    v5 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 74) + 48))((char *)this + 592);
    v6 = *((_QWORD *)this + 75);
    v7 = *((_QWORD *)this + 74);
    if (v6)
      v8 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 40))((char *)this + 592, v6, v5);
    else
      v8 = (*(uint64_t (**)(char *, uint64_t))(v7 + 16))((char *)this + 592, v5);
    *((_QWORD *)this + 75) = v8;
    if (!v8)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)exception = &off_1E6176998;
      exception[2] = 2;
    }
    *((_QWORD *)this + 77) = v5;
  }
  *((_QWORD *)this + 79) = v8 + 512;
  *(_QWORD *)(v8 + 512) = 0;
  *((_DWORD *)this + 175) = a2;
  return 1;
}

uint64_t TParsingContext::FSType(TParsingContext *this, int a2)
{
  *((_DWORD *)this + 184) |= a2 << 16;
  return 1;
}

uint64_t TType1ParsingContext::AllocCharStrings(TType1ParsingContext *this, unsigned int a2)
{
  TType1ParsingContext *v3;
  uint64_t v4;
  uint64_t result;
  char *v6;
  char *v7;
  uint64_t v8;
  const void *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  _OWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint8x8_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t **v25;
  TType1ParsingContext *v26;
  uint64_t *v27;
  unint64_t v28;
  _QWORD *v29;
  float v30;
  float v31;
  _BOOL8 v32;
  unint64_t v33;
  unint64_t v34;
  size_t v35;
  uint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  _DWORD *exception;
  uint64_t v42;
  _QWORD *v43;

  v3 = this;
  v4 = *((unsigned int *)this + 175);
  result = TParsingContext::AllocCharStrings(this, a2);
  if ((_DWORD)result)
  {
    v6 = (char *)operator new[]();
    v7 = v6;
    v8 = *((_QWORD *)v3 + 93);
    if ((_DWORD)v4)
    {
      memmove(v6, *((const void **)v3 + 93), 4 * v4);
      memmove(&v7[4 * a2], *((const void **)v3 + 94), 4 * v4);
      v9 = (const void *)*((_QWORD *)v3 + 95);
      if (v9)
        memmove(&v7[8 * a2], v9, 4 * v4);
    }
    *((_QWORD *)v3 + 93) = v7;
    if (v8)
    {
      MEMORY[0x1B5E0CD14](v8, 0x1000C8052888210);
      v7 = (char *)*((_QWORD *)v3 + 93);
    }
    v10 = &v7[4 * a2];
    *((_QWORD *)v3 + 94) = v10;
    v11 = &v10[4 * v4];
    v12 = &v10[4 * a2];
    if (v12 - v11 >= 1)
      memset(v11, 255, 4 * (((unint64_t)(v12 - v11) >> 2) - ((unint64_t)(v12 - v11) > 3)) + 4);
    if (*((_QWORD *)v3 + 95))
      *((_QWORD *)v3 + 95) = v12;
    v13 = *((_QWORD *)v3 + 98);
    if (v13)
    {
      v14 = operator new(0x28uLL, MEMORY[0x1E0DE4E10]);
      if (!v14)
      {
        exception = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)exception = &off_1E6176998;
        exception[2] = 2;
      }
      v15 = (uint64_t)v14;
      *v14 = 0u;
      v14[1] = 0u;
      *((_DWORD *)v14 + 8) = 1065353216;
      std::__hash_table<std::__hash_value_type<char const*,unsigned int>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,unsigned int>,TType1ParsingContext::HashCString,TType1ParsingContext::EqualCString,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,unsigned int>,TType1ParsingContext::EqualCString,TType1ParsingContext::HashCString,true>,std::allocator<std::__hash_value_type<char const*,unsigned int>>>::__rehash<true>((uint64_t)v14, 0x100uLL);
      v16 = 0;
      v42 = v13;
      v43 = (_QWORD *)(v15 + 16);
      while (1)
      {
        v17 = *(int *)(v13 + 4 * v16);
        if ((_DWORD)v17)
          break;
LABEL_56:
        if (++v16 == 256)
        {
          v39 = (uint64_t *)((char *)v3 + 824);
          v40 = v15;
          goto LABEL_59;
        }
      }
      v18 = (const char *)(*((_QWORD *)v3 + 98) + v17 + 1);
      strlen(v18);
      v19 = CFStringHashCString();
      v20 = v19;
      v21 = *(_QWORD *)(v15 + 8);
      if (v21)
      {
        v22 = (uint8x8_t)vcnt_s8((int8x8_t)v21);
        v22.i16[0] = vaddlv_u8(v22);
        v23 = v22.u32[0];
        if (v22.u32[0] > 1uLL)
        {
          v24 = v19;
          if (v19 >= v21)
            v24 = v19 % v21;
        }
        else
        {
          v24 = (v21 - 1) & v19;
        }
        v25 = *(uint64_t ***)(*(_QWORD *)v15 + 8 * v24);
        if (v25)
        {
          v26 = v3;
          v27 = *v25;
          if (!*v25)
          {
            v3 = v26;
            goto LABEL_34;
          }
          while (1)
          {
            v28 = v27[1];
            if (v28 == v20)
            {
              if (!strcmp((const char *)v27[2], v18))
              {
                *((_DWORD *)v27 + 6) = v16;
                v3 = v26;
                v13 = v42;
                goto LABEL_56;
              }
            }
            else
            {
              if (v23 > 1)
              {
                if (v28 >= v21)
                  v28 %= v21;
              }
              else
              {
                v28 &= v21 - 1;
              }
              if (v28 != v24)
              {
LABEL_32:
                v3 = v26;
                v13 = v42;
                break;
              }
            }
            v27 = (uint64_t *)*v27;
            if (!v27)
              goto LABEL_32;
          }
        }
      }
      else
      {
        v24 = 0xAAAAAAAAAAAAAAAALL;
      }
LABEL_34:
      v29 = operator new(0x20uLL);
      *v29 = 0;
      v29[1] = v20;
      v29[2] = v18;
      *((_DWORD *)v29 + 6) = v16;
      v30 = (float)(unint64_t)(*(_QWORD *)(v15 + 24) + 1);
      v31 = *(float *)(v15 + 32);
      if (!v21 || (float)(v31 * (float)v21) < v30)
      {
        v32 = (v21 & (v21 - 1)) != 0;
        if (v21 < 3)
          v32 = 1;
        v33 = v32 | (2 * v21);
        v34 = vcvtps_u32_f32(v30 / v31);
        if (v33 <= v34)
          v35 = v34;
        else
          v35 = v33;
        std::__hash_table<std::__hash_value_type<char const*,unsigned int>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,unsigned int>,TType1ParsingContext::HashCString,TType1ParsingContext::EqualCString,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,unsigned int>,TType1ParsingContext::EqualCString,TType1ParsingContext::HashCString,true>,std::allocator<std::__hash_value_type<char const*,unsigned int>>>::__rehash<true>(v15, v35);
        v21 = *(_QWORD *)(v15 + 8);
        if ((v21 & (v21 - 1)) != 0)
        {
          if (v20 >= v21)
            v24 = v20 % v21;
          else
            v24 = v20;
        }
        else
        {
          v24 = (v21 - 1) & v20;
        }
      }
      v36 = *(_QWORD *)v15;
      v37 = *(_QWORD **)(*(_QWORD *)v15 + 8 * v24);
      if (v37)
      {
        *v29 = *v37;
      }
      else
      {
        *v29 = *v43;
        *v43 = v29;
        *(_QWORD *)(v36 + 8 * v24) = v43;
        if (!*v29)
        {
LABEL_55:
          ++*(_QWORD *)(v15 + 24);
          goto LABEL_56;
        }
        v38 = *(_QWORD *)(*v29 + 8);
        if ((v21 & (v21 - 1)) != 0)
        {
          if (v38 >= v21)
            v38 %= v21;
        }
        else
        {
          v38 &= v21 - 1;
        }
        v37 = (_QWORD *)(*(_QWORD *)v15 + 8 * v38);
      }
      *v37 = v29;
      goto LABEL_55;
    }
    v39 = (uint64_t *)((char *)v3 + 824);
    v40 = 0;
LABEL_59:
    std::unique_ptr<TType1ParsingContext::NameToUnicodeMap const>::reset[abi:fe180100](v39, v40);
    return 1;
  }
  return result;
}

void sub_1B09C5B24(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = std::__hash_table<std::__hash_value_type<char const*,unsigned int>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,unsigned int>,TType1ParsingContext::HashCString,TType1ParsingContext::EqualCString,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,unsigned int>,TType1ParsingContext::EqualCString,TType1ParsingContext::HashCString,true>,std::allocator<std::__hash_value_type<char const*,unsigned int>>>::~__hash_table(v1);
  MEMORY[0x1B5E0CD2C](v3, MEMORY[0x1E0DE4E10]);
  _Unwind_Resume(a1);
}

uint64_t std::unique_ptr<TType1ParsingContext::NameToUnicodeMap const>::reset[abi:fe180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    std::__hash_table<std::__hash_value_type<char const*,unsigned int>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,unsigned int>,TType1ParsingContext::HashCString,TType1ParsingContext::EqualCString,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,unsigned int>,TType1ParsingContext::EqualCString,TType1ParsingContext::HashCString,true>,std::allocator<std::__hash_value_type<char const*,unsigned int>>>::~__hash_table(result);
    JUMPOUT(0x1B5E0CD38);
  }
  return result;
}

uint64_t TType1ParsingContext::CharString(TType1ParsingContext *this, int a2, int a3, unsigned int a4, char *a5, const char *a6, unsigned __int16 a7)
{
  int v10;
  uint64_t result;
  unsigned int v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t **v15;
  unsigned int v16;
  unsigned int v17;
  char *v18;

  v10 = *((unsigned __int8 *)this + 514);
  result = TParsingContext::CharString(this, a2, a3, a4, a5, a6, a7);
  if ((_DWORD)result)
  {
    v12 = *((unsigned __int16 *)this + 256);
    if (!v10 && *((_BYTE *)this + 514))
      v12 = 0;
    result = TParsingContext::DoFontInfoString(this, a5, (int *)(*((_QWORD *)this + 94) + 4 * v12));
    if ((_DWORD)result)
    {
      v13 = *((_QWORD *)this + 95);
      if (v13)
        *(_DWORD *)(v13 + 4 * v12) = a4;
      v17 = 0xFFFF;
      v14 = (_QWORD *)*((_QWORD *)this + 103);
      if (v14)
      {
        v18 = a5;
        v15 = std::__hash_table<std::__hash_value_type<char const*,unsigned int>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,unsigned int>,TType1ParsingContext::HashCString,TType1ParsingContext::EqualCString,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,unsigned int>,TType1ParsingContext::EqualCString,TType1ParsingContext::HashCString,true>,std::allocator<std::__hash_value_type<char const*,unsigned int>>>::find<char const*>(v14, (const char **)&v18);
        if (v15)
        {
          v16 = *((_DWORD *)v15 + 6);
          if (v16 > 0xFF)
          {
            if (GetLatinEncodingDictionary(void)::once == -1)
              goto LABEL_14;
            goto LABEL_19;
          }
        }
        else
        {
          v16 = 0;
        }
        v17 = gMacCustomEncode[v16];
        goto LABEL_17;
      }
      if (GetLatinEncodingDictionary(void)::once == -1)
      {
LABEL_14:
        TSortedStringTable::GetValue((const char ***)GetLatinEncodingDictionary(void)::gLatinEncodingDict, a5, &v17);
LABEL_17:
        *(_DWORD *)(*((_QWORD *)this + 93) + 4 * v12) = v17;
        return 1;
      }
LABEL_19:
      dispatch_once(&GetLatinEncodingDictionary(void)::once, &__block_literal_global_1);
      goto LABEL_14;
    }
  }
  return result;
}

uint64_t TType1ParsingContext::GDBytes(TType1ParsingContext *this)
{
  return 0;
}

uint64_t TType1ParsingContext::FDBytes(TType1ParsingContext *this)
{
  return 0;
}

uint64_t TType1ParsingContext::CIDCount(TType1ParsingContext *this)
{
  return 0;
}

uint64_t TType1ParsingContext::CIDMapOffset(TType1ParsingContext *this)
{
  return 0;
}

uint64_t TType1ParsingContext::CIDFontVersion(TType1ParsingContext *this)
{
  return 0;
}

uint64_t TType1ParsingContext::Registry(TType1ParsingContext *this, const char *a2)
{
  return 0;
}

uint64_t TType1ParsingContext::Ordering(TType1ParsingContext *this, const char *a2)
{
  return 0;
}

uint64_t TType1ParsingContext::Supplement(TType1ParsingContext *this)
{
  return 0;
}

uint64_t TType1ParsingContext::FDArrayFontName(TType1ParsingContext *this, const char *a2)
{
  return 0;
}

uint64_t TType1ParsingContext::CIDFDArray(TType1ParsingContext *this)
{
  return 0;
}

uint64_t TType1ParsingContext::BeginCIDFontDict()
{
  return 0;
}

uint64_t TType1ParsingContext::EndCIDFontDict(TType1ParsingContext *this)
{
  return 0;
}

uint64_t TType1ParsingContext::CIDStartData(TType1ParsingContext *this)
{
  return 0;
}

uint64_t TType1ParsingContext::UIDBase(TType1ParsingContext *this)
{
  return 0;
}

uint64_t TType1ParsingContext::XUID(TType1ParsingContext *this, int a2, int *a3)
{
  return 0;
}

uint64_t TType1ParsingContext::GetBytes(TType1ParsingContext *this, unint64_t *a2)
{
  unint64_t v2;
  int v3;
  uint64_t v4;

  v2 = *((_QWORD *)this + 8) - *((_QWORD *)this + 7);
  *a2 = v2;
  v3 = *((_DWORD *)this + 18);
  if (v3 >= (int)v2)
  {
    v4 = 0;
    *a2 = 0;
  }
  else
  {
    v4 = *((_QWORD *)this + 6);
    if (v4)
    {
      v4 = *(_QWORD *)(v4 + 8);
      if (v4)
        v4 += *((_QWORD *)this + 7);
    }
    *((_DWORD *)this + 18) = v3 + v2;
  }
  return v4;
}

void std::__hash_table<std::__hash_value_type<char const*,unsigned int>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,unsigned int>,TType1ParsingContext::HashCString,TType1ParsingContext::EqualCString,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,unsigned int>,TType1ParsingContext::EqualCString,TType1ParsingContext::HashCString,true>,std::allocator<std::__hash_value_type<char const*,unsigned int>>>::__rehash<true>(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  _QWORD *v8;
  size_t v9;
  uint8x8_t v10;
  unint64_t v11;
  uint8x8_t v12;
  uint64_t v13;
  _QWORD *v14;
  size_t v15;
  void *v16;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime <= *(_QWORD *)&v4)
  {
    if (prime >= *(_QWORD *)&v4)
      return;
    v11 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v12 = (uint8x8_t)vcnt_s8(v4), v12.i16[0] = vaddlv_u8(v12), v12.u32[0] > 1uLL))
    {
      v11 = std::__next_prime(v11);
    }
    else
    {
      v13 = 1 << -(char)__clz(v11 - 1);
      if (v11 >= 2)
        v11 = v13;
    }
    if (prime <= v11)
      prime = v11;
    if (prime >= *(_QWORD *)&v4)
      return;
    if (!prime)
    {
      v16 = *(void **)a1;
      *(_QWORD *)a1 = 0;
      if (v16)
        operator delete(v16);
      *(_QWORD *)(a1 + 8) = 0;
      return;
    }
  }
  if (prime >> 61)
    std::__throw_bad_array_new_length[abi:fe180100]();
  v5 = operator new(8 * prime);
  v6 = *(void **)a1;
  *(_QWORD *)a1 = v5;
  if (v6)
    operator delete(v6);
  v7 = 0;
  *(_QWORD *)(a1 + 8) = prime;
  do
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v7++) = 0;
  while (prime != v7);
  v8 = *(_QWORD **)(a1 + 16);
  if (v8)
  {
    v9 = v8[1];
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)prime);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      if (v9 >= prime)
        v9 %= prime;
    }
    else
    {
      v9 &= prime - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v9) = a1 + 16;
    v14 = (_QWORD *)*v8;
    if (*v8)
    {
      do
      {
        v15 = v14[1];
        if (v10.u32[0] > 1uLL)
        {
          if (v15 >= prime)
            v15 %= prime;
        }
        else
        {
          v15 &= prime - 1;
        }
        if (v15 != v9)
        {
          if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v15))
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v15) = v8;
            goto LABEL_31;
          }
          *v8 = *v14;
          *v14 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v15);
          **(_QWORD **)(*(_QWORD *)a1 + 8 * v15) = v14;
          v14 = v8;
        }
        v15 = v9;
LABEL_31:
        v8 = v14;
        v14 = (_QWORD *)*v14;
        v9 = v15;
      }
      while (v14);
    }
  }
}

uint64_t std::__hash_table<std::__hash_value_type<char const*,unsigned int>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,unsigned int>,TType1ParsingContext::HashCString,TType1ParsingContext::EqualCString,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,unsigned int>,TType1ParsingContext::EqualCString,TType1ParsingContext::HashCString,true>,std::allocator<std::__hash_value_type<char const*,unsigned int>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

_QWORD *std::vector<int,TInlineBufferAllocator<int,3ul>>::__assign_with_size[abi:fe180100]<int *,int *>(_QWORD *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = (char *)*result;
  if (a4 > (uint64_t)(result[2] - *result) >> 2)
  {
    std::vector<int,TInlineBufferAllocator<int,3ul>>::__vdeallocate((uint64_t)result);
    if (a4 >> 62)
      std::vector<char,TInlineBufferAllocator<char,1024ul>>::__throw_length_error[abi:fe180100]();
    v9 = v7[2] - *v7;
    v10 = v9 >> 1;
    if (v9 >> 1 <= a4)
      v10 = a4;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFFCLL)
      v11 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<int,TInlineBufferAllocator<int,3ul>>::__vallocate[abi:fe180100](v7, v11);
    v13 = (char *)v7[1];
    v12 = (char **)(v7 + 1);
    v8 = v13;
LABEL_14:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v8;
      v19 = __src;
      goto LABEL_16;
    }
    goto LABEL_17;
  }
  v12 = (char **)(result + 1);
  v14 = (_BYTE *)result[1];
  v15 = (v14 - v8) >> 2;
  if (v15 >= a4)
    goto LABEL_14;
  v16 = &__src[4 * v15];
  if (v14 != v8)
  {
    result = memmove((void *)*result, __src, v14 - v8);
    v8 = *v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v8;
    v19 = v16;
LABEL_16:
    result = memmove(v18, v19, v17);
  }
LABEL_17:
  *v12 = &v8[v17];
  return result;
}

void std::vector<int,TInlineBufferAllocator<int,3ul>>::__vdeallocate(uint64_t a1)
{
  void *v2;

  v2 = *(void **)a1;
  if (v2)
  {
    *(_QWORD *)(a1 + 8) = v2;
    if (a1 + 24 <= (unint64_t)v2 && a1 + 36 > (unint64_t)v2)
    {
      if (*(_QWORD *)(a1 + 16) == *(_QWORD *)(a1 + 40))
        *(_QWORD *)(a1 + 40) = v2;
    }
    else
    {
      operator delete(v2);
    }
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
}

char *std::vector<int,TInlineBufferAllocator<int,3ul>>::__vallocate[abi:fe180100](_QWORD *a1, unint64_t a2)
{
  char *result;

  if (a2 >> 62)
    std::vector<char,TInlineBufferAllocator<char,1024ul>>::__throw_length_error[abi:fe180100]();
  result = (char *)TInlineBufferAllocator<int,3ul>::allocate((uint64_t)(a1 + 3), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * a2];
  return result;
}

void *TInlineBufferAllocator<int,3ul>::allocate(uint64_t a1, unint64_t a2)
{
  void *result;
  unint64_t v4;

  result = *(void **)(a1 + 16);
  v4 = (unint64_t)result + 4 * a2;
  if (v4 <= a1 + 12)
  {
    *(_QWORD *)(a1 + 16) = v4;
  }
  else
  {
    if (a2 >> 62)
      std::__throw_bad_array_new_length[abi:fe180100]();
    return operator new(4 * a2);
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<int,std::pair<std::unique_ptr<unsigned char const[]>,int>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::pair<std::unique_ptr<unsigned char const[]>,int>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::pair<std::unique_ptr<unsigned char const[]>,int>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::pair<std::unique_ptr<unsigned char const[]>,int>>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      v4 = v2[3];
      v2[3] = 0;
      if (v4)
        MEMORY[0x1B5E0CD14](v4, 0x1000C8077774924);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v5 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v5)
    operator delete(v5);
  return a1;
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<int,std::pair<std::unique_ptr<unsigned char const[]>,int>>,void *>>>::operator()[abi:fe180100](char a1, _QWORD *__p)
{
  uint64_t v3;

  if (a1)
  {
    v3 = __p[3];
    __p[3] = 0;
    if (v3)
      MEMORY[0x1B5E0CD14](v3, 0x1000C8077774924);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

uint64_t **std::__hash_table<std::__hash_value_type<char const*,unsigned int>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,unsigned int>,TType1ParsingContext::HashCString,TType1ParsingContext::EqualCString,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,unsigned int>,TType1ParsingContext::EqualCString,TType1ParsingContext::HashCString,true>,std::allocator<std::__hash_value_type<char const*,unsigned int>>>::find<char const*>(_QWORD *a1, const char **a2)
{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t ***v10;
  uint64_t **v11;
  const char *v12;
  unint64_t v13;

  strlen(*a2);
  v4 = CFStringHashCString();
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(uint64_t ****)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  v11 = *v10;
  if (*v10)
  {
    v12 = *a2;
    do
    {
      v13 = (unint64_t)v11[1];
      if (v6 == v13)
      {
        if (!strcmp((const char *)v11[2], v12))
          return v11;
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(_QWORD *)&v5)
            v13 %= *(_QWORD *)&v5;
        }
        else
        {
          v13 &= *(_QWORD *)&v5 - 1;
        }
        if (v13 != v9)
          return 0;
      }
      v11 = (uint64_t **)*v11;
    }
    while (v11);
  }
  return v11;
}

void THandlerStreamingBuffers::~THandlerStreamingBuffers(void **this)
{
  *this = &off_1E61C8E38;
  THandlerStreamingBuffers::FlushBuffer((THandlerStreamingBuffers *)this);
  free(this[4]);
}

{
  THandlerStreamingBuffers::~THandlerStreamingBuffers(this);
  JUMPOUT(0x1B5E0CD38);
}

uint64_t THandlerStreamingBuffers::FlushBuffer(THandlerStreamingBuffers *this)
{
  uint64_t (*v1)(void);
  uint64_t result;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  int v8;
  _DWORD *exception;

  v1 = (uint64_t (*)(void))*((_QWORD *)this + 6);
  if (!v1)
    return 0;
  result = *((_QWORD *)this + 7);
  if (result)
  {
    v4 = *((_QWORD *)this + 4);
    if (v4
      && (v5 = *((_QWORD *)this + 1), v5 >= v4)
      && (v6 = *((_QWORD *)this + 5), v5 <= v4 + v6)
      && (v7 = *((_QWORD *)this + 2), v7 - 1 < v6)
      && v7 == v5 - v4)
    {
      v8 = v1();
      *((_QWORD *)this + 1) = *((_QWORD *)this + 4);
      *((_QWORD *)this + 2) = 0;
      if (!v8)
      {
        exception = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)exception = &off_1E6176998;
        exception[2] = 4;
      }
    }
    else
    {
      *((_QWORD *)this + 1) = v4;
      *((_QWORD *)this + 2) = 0;
    }
    return 1;
  }
  return result;
}

uint64_t THandlerStreamingBuffers::InitFlushBufferCallback(uint64_t this, unsigned __int8 (*a2)(void *, unsigned int, void *), void *a3)
{
  *(_QWORD *)(this + 48) = a2;
  *(_QWORD *)(this + 56) = a3;
  return this;
}

uint64_t THandlerStreamingBuffers::ResetBufferForReUse(THandlerStreamingBuffers *this)
{
  uint64_t result;

  result = THandlerStreamingBuffers::FlushBuffer(this);
  *((_QWORD *)this + 3) = 0;
  return result;
}

uint64_t THandlerStreamingBuffers::WriteBytes(THandlerStreamingBuffers *this, unint64_t a2, unsigned __int8 *a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t result;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;

  v3 = *((_QWORD *)this + 4);
  if (!v3)
    return 0;
  v5 = *((_QWORD *)this + 1);
  v6 = v5 - v3;
  if (v5 < v3)
    return 0;
  v7 = *((_QWORD *)this + 5);
  if (v5 > v3 + v7)
    return 0;
  v8 = *((_QWORD *)this + 2);
  v9 = v7 - v8;
  if (v7 < v8)
    return 0;
  result = 0;
  if (a2 && v8 == v6)
  {
    v13 = a2;
    do
    {
      if (v9 >= v13)
        v14 = v13;
      else
        v14 = v9;
      (*(void (**)(THandlerStreamingBuffers *, unint64_t, unsigned __int8 *, _QWORD))(*(_QWORD *)this + 32))(this, v14, a3, *((_QWORD *)this + 1));
      v15 = *((_QWORD *)this + 2) + v14;
      *((_QWORD *)this + 1) += v14;
      *((_QWORD *)this + 2) = v15;
      if (v15 >= *((_QWORD *)this + 5))
      {
        v13 -= v14;
        if (!(*(unsigned int (**)(THandlerStreamingBuffers *, unint64_t))(*(_QWORD *)this + 24))(this, v13))return 0;
        v9 = *((_QWORD *)this + 5) - *((_QWORD *)this + 2);
      }
      else
      {
        v9 -= v14;
        v13 -= v14;
      }
      a3 += v14;
    }
    while (v13);
    *((_QWORD *)this + 3) += a2;
    return *((_QWORD *)this + 1);
  }
  return result;
}

void *THandlerStreamingBuffers::BlockMove(THandlerStreamingBuffers *this, size_t __len, unsigned __int8 *__src, unsigned __int8 *__dst)
{
  return memmove(__dst, __src, __len);
}

const char *THandlerStreamingBuffers::GetZString(THandlerStreamingBuffers *this, uint64_t *a2, unint64_t *a3)
{
  int v3;
  int v4;
  const char *result;
  uint64_t v6;

  v3 = (int)this;
  v4 = (int)this;
  result = "%!FontType1-1.0: ^s ^i.^i\n";
  v6 = 26;
  switch(v4)
  {
    case 0:
      break;
    case 1:
      result = "%!PS-TrueTypeFont-^d-^d-2\n";
      goto LABEL_61;
    case 2:
      result = "14 dict begin\n/FontName /^s def\n";
      v6 = 32;
      break;
    case 3:
      result = "/PaintType 0 def\n";
      goto LABEL_20;
    case 4:
      result = "/FontType 3 def\n";
      goto LABEL_54;
    case 5:
      result = "/FontType 42 def\n";
      goto LABEL_20;
    case 6:
      result = "/FontType 1 def\n";
      goto LABEL_54;
    case 7:
      result = "/Encoding ";
      goto LABEL_85;
    case 8:
    case 106:
      result = "readonly def\n";
      v6 = 13;
      break;
    case 9:
    case 102:
      result = "/FontMatrix matrix def\n";
      goto LABEL_56;
    case 10:
      result = "/FontBBox[^i ^i 1 index div ^i 2 index div ^i 3 index div ^i 5 -1 roll div]cvx def\n";
      v6 = 83;
      break;
    case 11:
      result = "/FontMatrix [ ^f 0 0 ^f 0 0 ] readonly def\n";
      v6 = 43;
      break;
    case 12:
      result = "/FontBBox {^i ^i ^i ^i} readonly def\n";
      v6 = 37;
      break;
    case 13:
      result = "/UniqueID ^i def\n";
LABEL_20:
      v6 = 17;
      break;
    case 14:
      result = "/sfnts [<\n";
      goto LABEL_85;
    case 15:
      result = "\n00><\n";
      goto LABEL_83;
    case 16:
      result = "\n00>] def\n";
LABEL_85:
      v6 = 10;
      break;
    case 17:
    case 109:
      result = "/CharStrings ^i dict dup begin\n";
      goto LABEL_65;
    case 18:
      result = "/^s ^i def\n";
      v6 = 11;
      break;
    case 19:
      result = " end readonly def\n";
      goto LABEL_58;
    case 20:
      result = "/TrueState 271 string def TrueDict begin sfnts save 72 0 matrix defaultmatrix dtransform dup mul exch dup"
               " mul add sqrt cvi 0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt cvi 3 -1 roll restor"
               "e TrueState initer end\n";
      v6 = 233;
      break;
    case 21:
      result = "/BuildChar{exch begin Encoding 1 index get CharStrings dup 2 index known{exch}{exch pop /.notdef}ifelse g"
               "et dup xcheck{currentdict systemdict begin begin exec end end}{exch pop TrueDict begin /bander load cvlit"
               " exch TrueState render end}ifelse end} bind def\n";
      v6 = 258;
      break;
    case 22:
      result = "currentdict dup/FontName get exch definefont pop end\n";
      v6 = 53;
      break;
    case 23:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
LABEL_8:
      v6 = 0;
      result = 0;
      break;
    case 24:
      result = "256 array 0 1 255 {1 index exch/.notdef put} for\n";
      v6 = 49;
      break;
    case 25:
    case 105:
      result = "dup ^i /^s put\n";
      v6 = 15;
      break;
    case 26:
      result = "currentfile eexec\n";
      goto LABEL_58;
    case 27:
      result = "0000000000000000000000000000000000000000000000000000000000000000\n";
      v6 = 65;
      break;
    case 28:
      result = "cleartomark\n";
      goto LABEL_69;
    case 29:
      result = "dup/Private 13 dict dup begin/RD{string currentfile exch readstring pop}executeonly def/ND{noaccess def}e"
               "xecuteonly def/NP{noaccess put}executeonly def/BlueValues[]def/MinFeature{16 16}def/password 5839 def/Oth"
               "erSubrs[{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{16384 div 4 1 roll 16384 div 4 1 roll 16384 div 4 1 roll"
               " 16384 div 4 1 roll 0 0 matrix astore matrix currentmatrix exch concat}executeonly{setmatrix}executeonly]noaccess def\n";
      v6 = 433;
      break;
    case 30:
      result = "/Subrs ";
      goto LABEL_36;
    case 31:
      result = " array\n";
LABEL_36:
      v6 = 7;
      break;
    case 32:
      result = "dup ";
      goto LABEL_41;
    case 33:
      result = " RD ";
      goto LABEL_41;
    case 34:
      result = " NP\n";
      goto LABEL_41;
    case 35:
      result = " ND\n";
LABEL_41:
      v6 = 4;
      break;
    case 36:
      result = "2 index/CharStrings ";
      v6 = 20;
      break;
    case 37:
      result = " dict dup begin\n";
      goto LABEL_54;
    case 38:
      result = "/.notdef 8 RD ";
      v6 = 14;
      break;
    case 39:
      result = "end end readonly put\nnoaccess put\ndup/FontName get exch definefont pop\nmark currentfile closefile\n";
      v6 = 98;
      break;
    case 40:
      result = "systemdict/product 2 copy known{get dup(LaserWriter IIf)eq exch(LaserWriter IIg)eq or version(2010.113)eq"
               " and not}{pop pop true}ifelse{/UniqueID ^i def}if\n";
      v6 = 155;
      break;
    case 41:
      result = "userdict/TTMakeVariationFont known userdict begin/TTMakeVariationFontDefined exch def end\n"
               "TTMakeVariationFontDefined{save}if userdict begin/TTMakeVariationFont{exch dup length 1 add dict exch{exc"
               "h dup dup/FID ne exch/UniqueID ne and{2 index 4 1 roll exch put}{pop pop}ifelse} forall begin/Variations "
               "exch def currentdict end/GXVariationfont exch definefont} bind def end TTMakeVariationFontDefined{restore}if\n";
      v6 = 409;
      break;
    case 42:
      result = "<";
      goto LABEL_51;
    case 43:
      result = "00> TTMakeVariationFont\n";
      goto LABEL_71;
    case 44:
      result = "(";
LABEL_51:
      v6 = 1;
      break;
    case 45:
      result = (const char *)&unk_1B0AAAE05;
      goto LABEL_56;
    case 46:
      result = "currentdict end\n";
LABEL_54:
      v6 = 16;
      break;
    case 47:
      result = "%!FontType1-1.0: ^s ^d\n";
LABEL_56:
      v6 = 23;
      break;
    case 100:
      result = "14 dict dup begin\n";
LABEL_58:
      v6 = 18;
      break;
    case 101:
      result = "/FontType 3 def\n/PaintType 0 def\n/StrokeWidth 0 def\n";
      v6 = 52;
      break;
    case 103:
      result = "/FontBBox[^d ^d ^d ^d]def\n";
LABEL_61:
      v6 = 26;
      break;
    case 104:
      result = "/Encoding 256 array 0 1 255 {1 index exch/.notdef put} for\n";
LABEL_87:
      v6 = 59;
      break;
    case 107:
      result = "/BuildChar{exch begin Encoding exch get CharStrings dup 2 index known{exch}{exch pop /.notdef}ifelse get "
               "dup xcheck{currentdict systemdict begin begin exec end end}{dup 0 get 0 2 index 1 4 getinterval aload pop"
               " setcachedevice dup 6 get exch dup 5 get 3 -1 roll true yopmatrix dup 4 6 index 7 get put dup 5 6 index 8"
               " get put 5 -1 roll 9 1 getinterval cvx imagemask}ifelse end}bind def\n";
      v6 = 384;
      break;
    case 108:
      result = "/yopmatrix [^i 0 0 ^i 0 0] def\n";
LABEL_65:
      v6 = 31;
      break;
    case 110:
      result = "/^s [^d ^d ^d ^d ^d ^i ^i ^d ^d <";
      goto LABEL_81;
    case 111:
      result = ">]def\n";
      goto LABEL_83;
    case 112:
      result = "end def end\n";
LABEL_69:
      v6 = 12;
      break;
    case 113:
      result = "/^s exch definefont pop\n";
LABEL_71:
      v6 = 24;
      break;
    case 114:
      result = "/yopmatrix[^i 0 ^i .25 mul ^i 0 0]def\n";
      v6 = 38;
      break;
    case 115:
      result = "/FontMatrix[1 0 .25 1 0 0]def\n";
      v6 = 30;
      break;
    case 116:
      result = "/GetShort {2 copy get 256 mul\n"
               "3 1 roll\n"
               "1 add\n"
               "get add\n"
               "} bind def\n"
               "/SignedByte {dup 127 gt {256 sub\n"
               "} if\n"
               "} bind def\n"
               "/LocalVariables 3 dict dup begin/theString null def\n"
               "/strInd 0 def\n"
               "/doingY false def\n"
               "end def/DrawGlyph {exec\n"
               "LocalVariables begin\n"
               "/theString exch def \n"
               "/strInd 0 def\n"
               "theString strInd GetShort\n"
               "/strInd strInd 2 add def\n";
      v6 = 328;
      break;
    case 117:
      result = "{theString strInd GetShort\n"
               "/strInd strInd 2 add def\n"
               "dup 0 gt {\n"
               "1 sub 2 mul\n"
               "theString strInd get SignedByte\n"
               "theString strInd 1 add get SignedByte moveto\n"
               "/strInd strInd 2 add def\n"
               "/doingY false def\n"
               "dup strInd add\texch\n"
               "theString strInd 3 -1 roll getinterval\n"
               "{SignedByte\n"
               "doingY {rlineto /doingY false def}\n"
               " {/doingY true def} ifelse \n"
               "} forall\n"
               "closepath \n"
               "/strInd exch def\n"
               "} if\n"
               "} repeat\n"
               "PaintType 2 eq { StrokeWidth\n"
               "setlinewidth stroke\n"
               "} {eofill\n"
               "} ifelse\n"
               "end\n";
      v6 = 452;
      break;
    case 118:
      result = "} bind def\n"
               "/BuildChar{exch begin Encoding exch get CharStrings dup 2 index known{exch}{exch pop /.notdef}ifelse get\n"
               "dup 0 get\n"
               " 0\n"
               "3 -1 roll\n"
               "dup 1 get exch dup 2 get exch dup 3 get exch dup 4 get exch\n"
               "7 1 roll\n"
               "setcachedevice\n"
               "yopmatrix matrix invertmatrix concat\n"
               "9 get DrawGlyph\n"
               "end}bind def\n";
      v6 = 289;
      break;
    case 119:
      result = "/sfnts [(";
      v6 = 9;
      break;
    case 120:
      result = (const char *)&unk_1B0A432F0;
      v6 = 3;
      break;
    case 121:
      result = (const char *)&unk_1B0AAADFC;
      v6 = 8;
      break;
    case 122:
      result = "/^s [^d ^d ^d ^d ^d ^i ^i ^d ^d (";
LABEL_81:
      v6 = 33;
      break;
    case 123:
      result = ")]def\n";
LABEL_83:
      v6 = 6;
      break;
    default:
      switch(v3)
      {
        case 200:
          result = "42/FontType resourcestatus{pop pop false}{true}ifelse\n"
                   "%APLsfntBegin\n"
                   "{currentfile 0(%APLsfntEnd\\n)/SubFileDecode filter flushfile}if\n";
          v6 = 132;
          break;
        case 201:
          result = "%APLsfntEnd\n"
                   "42/FontType resourcestatus{pop pop true}{false}ifelse\n"
                   "{currentfile 0(%APLT1End\\n)/SubFileDecode filter flushfile}if\n";
          v6 = 128;
          break;
        case 202:
          result = "%APLT1End\n";
          goto LABEL_85;
        case 203:
          result = "/FontInfo 1 dict dup begin\n/FSType ^i def\nend readonly def\n";
          goto LABEL_87;
        default:
          goto LABEL_8;
      }
      break;
  }
  *a2 = v6;
  return result;
}

unsigned __int8 *THandlerStreamingBuffers::WriteStringF(THandlerStreamingBuffers *this, THandlerStreamingBuffers *a2, unint64_t *a3, ...)
{
  unsigned __int8 *result;
  uint64_t v5;
  unint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unint64_t v9;
  __int128 v10;
  int v11;
  double *v12;
  unsigned __int8 *v13;
  size_t v14;
  char *v15;
  size_t *v16;
  int v17;
  uint64_t v18;
  va_list v19;
  char __s[16];
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  int v26;
  char v27[16];
  uint64_t v28;
  va_list va;

  va_start(va, a3);
  v28 = *MEMORY[0x1E0C80C00];
  v18 = 0xAAAAAAAAAAAAAAAALL;
  memset(v27, 170, sizeof(v27));
  va_copy(v19, va);
  result = (unsigned __int8 *)THandlerStreamingBuffers::GetZString(a2, &v18, a3);
  v5 = v18;
  if (v18)
  {
    do
    {
LABEL_2:
      v6 = 0;
      v7 = result;
      v8 = v5;
      while (result[v6] != 94)
      {
        if (v5 == ++v6)
        {
          if (v6)
            return (unsigned __int8 *)THandlerStreamingBuffers::WriteBytes(this, v6, result);
          return result;
        }
      }
      if (v6)
        THandlerStreamingBuffers::WriteBytes(this, v6, result);
      v5 = 0;
      result = &v7[v6 + 1];
      v9 = v8 - v6;
    }
    while (v8 == v6);
    v5 = v8 - v6;
    v26 = -1431655766;
    *(_QWORD *)&v10 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v24 = v10;
    v25 = v10;
    v22 = v10;
    v23 = v10;
    *(_OWORD *)__s = v10;
    v21 = v10;
    v11 = (char)*result;
    if (v11 > 104)
    {
      if (v11 != 105)
      {
        if (v11 != 115)
          goto LABEL_23;
        v16 = (size_t *)v19;
        v19 += 8;
        v14 = *v16;
        v19 = (va_list)(v16 + 2);
        v13 = (unsigned __int8 *)v16[1];
LABEL_22:
        THandlerStreamingBuffers::WriteBytes(this, v14, v13);
        v5 = v9 - 2;
        goto LABEL_23;
      }
      v19 += 8;
      v13 = (unsigned __int8 *)v27;
      v17 = snprintf_l(v27, 0x10uLL, 0, "%d");
    }
    else
    {
      if (v11 != 100)
      {
        if (v11 == 102)
        {
          v12 = (double *)v19;
          v19 += 8;
          v13 = (unsigned __int8 *)__s;
          snprintf_l(__s, 0x64uLL, 0, "%.15f", *v12);
          v14 = strlen(__s);
          if (v14 >= 4)
          {
            while (1)
            {
              v13 = (unsigned __int8 *)__s;
              v15 = &__s[v14];
              if (__s[v14 - 1] != 48)
                break;
              --v14;
              *(v15 - 1) = 0;
              if (v14 <= 3)
              {
                v13 = (unsigned __int8 *)__s;
                v14 = 3;
                goto LABEL_22;
              }
            }
          }
          goto LABEL_22;
        }
LABEL_23:
        result = &v7[v6 + 2];
        goto LABEL_2;
      }
      v19 += 8;
      v13 = (unsigned __int8 *)v27;
      v17 = snprintf_l(v27, 0x10uLL, 0, "%.4f");
    }
    v14 = v17;
    goto LABEL_22;
  }
  return result;
}

uint64_t THandlerStreamingBuffersEncrypted::ResetBufferForReUse(THandlerStreamingBuffersEncrypted *this)
{
  THandlerStreamingBuffers::FlushBuffer(this);
  *((_QWORD *)this + 3) = 0;
  return (*(uint64_t (**)(THandlerStreamingBuffersEncrypted *))(*(_QWORD *)this + 48))(this);
}

uint64_t THandlerStreamingBuffersEncrypted::ResetEncryption(uint64_t this)
{
  *(_WORD *)(this + 66) = *(_WORD *)(this + 64);
  return this;
}

uint64_t THandlerStreamingBuffersEncrypted::BlockMove(uint64_t this, uint64_t a2, unsigned __int8 *a3, unsigned __int8 *a4)
{
  char v4;
  __int16 v5;

  for (; a2; --a2)
  {
    v4 = *a3++;
    v5 = *(_WORD *)(this + 66);
    *(_WORD *)(this + 66) = 22719 - 12691 * (v5 + (v4 ^ HIBYTE(v5)));
    *a4++ = v4 ^ HIBYTE(v5);
  }
  return this;
}

void THandlerStreamBuffer::~THandlerStreamBuffer(void **this)
{
  THandlerStreamingBuffers::~THandlerStreamingBuffers(this);
  JUMPOUT(0x1B5E0CD38);
}

void THandlerEExecBuffer::~THandlerEExecBuffer(void **this)
{
  THandlerStreamingBuffers::~THandlerStreamingBuffers(this);
  JUMPOUT(0x1B5E0CD38);
}

uint64_t THandlerEExecBuffer::WriteNumber(THandlerEExecBuffer *this, int a2)
{
  int v3;
  char v5[16];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  memset(v5, 170, sizeof(v5));
  v3 = snprintf_l(v5, 0x10uLL, 0, "%d", a2);
  return THandlerStreamingBuffers::WriteBytes(this, v3, (unsigned __int8 *)v5);
}

uint64_t THandlerEExecBuffer::WriteSize(THandlerEExecBuffer *this, uint64_t a2)
{
  int v3;
  char v5[24];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  memset(v5, 170, 20);
  v3 = snprintf_l(v5, 0x14uLL, 0, "%zu", a2);
  return THandlerStreamingBuffers::WriteBytes(this, v3, (unsigned __int8 *)v5);
}

uint64_t THandlerEExecBuffer::WriteGlyphName(THandlerEExecBuffer *this, char *__s)
{
  size_t v4;
  unsigned __int8 v6;
  unsigned __int8 v7;

  v4 = strlen(__s);
  v7 = 47;
  v6 = 32;
  THandlerStreamingBuffers::WriteBytes(this, 1uLL, &v7);
  THandlerStreamingBuffers::WriteBytes(this, v4, (unsigned __int8 *)__s);
  return THandlerStreamingBuffers::WriteBytes(this, 1uLL, &v6);
}

void THandlerCharStringBuffer::~THandlerCharStringBuffer(void **this)
{
  THandlerStreamingBuffers::~THandlerStreamingBuffers(this);
  JUMPOUT(0x1B5E0CD38);
}

uint64_t THandlerCharStringBuffer::OnBufferFull(THandlerCharStringBuffer *this)
{
  return (*(uint64_t (**)(THandlerCharStringBuffer *))(*(_QWORD *)this + 56))(this);
}

uint64_t THandlerCharStringBuffer::ResizeBuffer(THandlerCharStringBuffer *this, uint64_t a2)
{
  size_t v3;
  uint64_t result;

  v3 = malloc_good_size(*((_QWORD *)this + 5) + 32 * a2);
  result = (uint64_t)reallocf(*((void **)this + 4), v3);
  *((_QWORD *)this + 4) = result;
  if (result)
  {
    *((_QWORD *)this + 5) = v3;
    *((_QWORD *)this + 1) = result + *((_QWORD *)this + 2);
    return 1;
  }
  return result;
}

void THandlerCharStringBuffer::WriteNumbers(THandlerStreamingBuffers *a1, int *a2, unsigned __int8 *a3)
{
  __int128 v3;
  int *v4;
  unsigned __int8 *v5;
  int *v6;
  int v7;
  unsigned __int8 v8;
  int64_t v9;
  int64_t v10;
  unint64_t v11;
  size_t v12;
  _BYTE *v13;
  unsigned int v14;
  unsigned int v15;
  int64_t v16;
  int64_t v17;
  unint64_t v18;
  size_t v19;
  _BYTE *v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  char *v23;
  unsigned __int8 *v24;
  unsigned __int8 *v25;
  unsigned __int8 v26;
  int64_t v27;
  int64_t v28;
  unint64_t v29;
  size_t v30;
  _BYTE *v31;
  int64_t v32;
  int64_t v33;
  unint64_t v34;
  size_t v35;
  _BYTE *v36;
  unsigned __int8 *v37;
  char *v38;
  unsigned __int8 *v39;
  unsigned __int8 *v40;
  unsigned __int8 v41;
  int64x2_t v42;
  char *v43;
  int64_t v44;
  int64_t v45;
  unint64_t v46;
  size_t v47;
  _BYTE *v48;
  unsigned __int8 *v49;
  unsigned __int8 v50;
  unsigned __int8 *v51;
  char *v52;
  unsigned __int8 *v53;
  unsigned __int8 *v54;
  unsigned __int8 v55;
  int64x2_t v56;
  char *v57;
  int64_t v58;
  int64_t v59;
  unint64_t v60;
  size_t v61;
  _BYTE *v62;
  unsigned __int8 *v63;
  char *v64;
  unsigned __int8 *v65;
  unsigned __int8 *v66;
  unsigned __int8 v67;
  int64x2_t v68;
  char *v69;
  unsigned __int8 *v70;
  int64_t v71;
  int64_t v72;
  unint64_t v73;
  size_t v74;
  _BYTE *v75;
  unsigned __int8 *v76;
  unsigned __int8 v77;
  unsigned __int8 *v78;
  char *v79;
  unsigned __int8 *v80;
  unsigned __int8 *v81;
  unsigned __int8 v82;
  int64x2_t v83;
  char *v84;
  unsigned __int8 *v85;
  int64_t v86;
  int64_t v87;
  unint64_t v88;
  size_t v89;
  _BYTE *v90;
  unsigned __int8 *v91;
  char *v92;
  unsigned __int8 *v93;
  unsigned __int8 *v94;
  unsigned __int8 v95;
  int64x2_t v96;
  char *v97;
  unsigned __int8 *v98;
  int64_t v99;
  int64_t v100;
  unint64_t v101;
  size_t v102;
  _BYTE *v103;
  unsigned __int8 *v104;
  char *v105;
  unsigned __int8 *v106;
  unsigned __int8 *v107;
  unsigned __int8 v108;
  int64x2_t v109;
  char *v110;
  int64_t v111;
  int64_t v112;
  unint64_t v113;
  size_t v114;
  _BYTE *v115;
  unsigned __int8 *v116;
  unsigned __int8 v117;
  int64x2_t v118;
  char *v119;
  THandlerStreamingBuffers *v120;
  uint64_t v121;
  int64x2_t v122;
  char *v123;
  __int128 *v124;
  unsigned __int8 *v125[2];
  unint64_t v126;
  __int128 v127;
  __int128 v128;
  __int128 *v129;
  uint64_t v130;

  v130 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v3 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v128 = v3;
  v127 = v3;
  v125[1] = 0;
  v126 = 0;
  v125[0] = 0;
  v129 = &v127;
  if (!a3)
  {
    v5 = 0;
    goto LABEL_181;
  }
  v4 = a2;
  v120 = a1;
  v5 = 0;
  v6 = &a2[(_QWORD)a3];
  do
  {
    v7 = *v4;
    if ((*v4 + 107) > 0xD6)
    {
      v8 = v7 - 108;
      if ((v7 - 108) > 0x3FF)
      {
        if ((v7 + 1131) > 0x3FF)
        {
          if ((unint64_t)v5 >= v126)
          {
            v32 = v5 - v125[0];
            v33 = v5 - v125[0] + 1;
            if (v33 < 0)
              std::vector<char,TInlineBufferAllocator<char,1024ul>>::__throw_length_error[abi:fe180100]();
            v34 = v126 - (unint64_t)v125[0];
            if (2 * (v126 - (unint64_t)v125[0]) > v33)
              v33 = 2 * v34;
            if (v34 >= 0x3FFFFFFFFFFFFFFFLL)
              v35 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v35 = v33;
            v124 = &v127;
            if (v35)
            {
              v36 = v129;
              if ((char *)v129 + v35 <= (char *)&v128 + 14)
                v129 = (__int128 *)((char *)v129 + v35);
              else
                v36 = operator new(v35);
            }
            else
            {
              v36 = 0;
            }
            v63 = &v36[v32];
            v64 = &v36[v35];
            v123 = &v36[v35];
            v36[v32] = -1;
            v21 = &v36[v32 + 1];
            v122.i64[1] = (uint64_t)v21;
            v66 = v125[0];
            v65 = v125[1];
            if (v125[1] == v125[0])
            {
              v68 = vdupq_n_s64((unint64_t)v125[1]);
            }
            else
            {
              do
              {
                v67 = *--v65;
                *--v63 = v67;
              }
              while (v65 != v66);
              v68 = *(int64x2_t *)v125;
              v21 = (unsigned __int8 *)v122.i64[1];
              v64 = v123;
            }
            v125[0] = v63;
            v125[1] = v21;
            v122 = v68;
            v69 = (char *)v126;
            v126 = (unint64_t)v64;
            v123 = v69;
            v121 = v68.i64[0];
            std::__split_buffer<char,TInlineBufferAllocator<char,30ul> &>::~__split_buffer((uint64_t)&v121);
          }
          else
          {
            *v5 = -1;
            v21 = v5 + 1;
          }
          v125[1] = v21;
          if ((unint64_t)v21 >= v126)
          {
            v71 = v21 - v125[0];
            v72 = v21 - v125[0] + 1;
            if (v72 < 0)
              std::vector<char,TInlineBufferAllocator<char,1024ul>>::__throw_length_error[abi:fe180100]();
            v73 = v126 - (unint64_t)v125[0];
            if (2 * (v126 - (unint64_t)v125[0]) > v72)
              v72 = 2 * v73;
            if (v73 >= 0x3FFFFFFFFFFFFFFFLL)
              v74 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v74 = v72;
            v124 = &v127;
            if (v74)
            {
              v75 = v129;
              if ((char *)v129 + v74 <= (char *)&v128 + 14)
                v129 = (__int128 *)((char *)v129 + v74);
              else
                v75 = operator new(v74);
            }
            else
            {
              v75 = 0;
            }
            v78 = &v75[v71];
            v79 = &v75[v74];
            v123 = &v75[v74];
            v75[v71] = HIBYTE(v7);
            v70 = &v75[v71 + 1];
            v122.i64[1] = (uint64_t)v70;
            v81 = v125[0];
            v80 = v125[1];
            if (v125[1] == v125[0])
            {
              v83 = vdupq_n_s64((unint64_t)v125[1]);
            }
            else
            {
              do
              {
                v82 = *--v80;
                *--v78 = v82;
              }
              while (v80 != v81);
              v83 = *(int64x2_t *)v125;
              v70 = (unsigned __int8 *)v122.i64[1];
              v79 = v123;
            }
            v125[0] = v78;
            v125[1] = v70;
            v122 = v83;
            v84 = (char *)v126;
            v126 = (unint64_t)v79;
            v123 = v84;
            v121 = v83.i64[0];
            std::__split_buffer<char,TInlineBufferAllocator<char,30ul> &>::~__split_buffer((uint64_t)&v121);
          }
          else
          {
            *v21 = HIBYTE(v7);
            v70 = v21 + 1;
          }
          v125[1] = v70;
          if ((unint64_t)v70 >= v126)
          {
            v86 = v70 - v125[0];
            v87 = v70 - v125[0] + 1;
            if (v87 < 0)
              std::vector<char,TInlineBufferAllocator<char,1024ul>>::__throw_length_error[abi:fe180100]();
            v88 = v126 - (unint64_t)v125[0];
            if (2 * (v126 - (unint64_t)v125[0]) > v87)
              v87 = 2 * v88;
            if (v88 >= 0x3FFFFFFFFFFFFFFFLL)
              v89 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v89 = v87;
            v124 = &v127;
            if (v89)
            {
              v90 = v129;
              if ((char *)v129 + v89 <= (char *)&v128 + 14)
                v129 = (__int128 *)((char *)v129 + v89);
              else
                v90 = operator new(v89);
            }
            else
            {
              v90 = 0;
            }
            v91 = &v90[v86];
            v92 = &v90[v89];
            v123 = &v90[v89];
            v90[v86] = BYTE2(v7);
            v85 = &v90[v86 + 1];
            v122.i64[1] = (uint64_t)v85;
            v94 = v125[0];
            v93 = v125[1];
            if (v125[1] == v125[0])
            {
              v96 = vdupq_n_s64((unint64_t)v125[1]);
            }
            else
            {
              do
              {
                v95 = *--v93;
                *--v91 = v95;
              }
              while (v93 != v94);
              v96 = *(int64x2_t *)v125;
              v85 = (unsigned __int8 *)v122.i64[1];
              v92 = v123;
            }
            v125[0] = v91;
            v125[1] = v85;
            v122 = v96;
            v97 = (char *)v126;
            v126 = (unint64_t)v92;
            v123 = v97;
            v121 = v96.i64[0];
            std::__split_buffer<char,TInlineBufferAllocator<char,30ul> &>::~__split_buffer((uint64_t)&v121);
          }
          else
          {
            *v70 = BYTE2(v7);
            v85 = v70 + 1;
          }
          v125[1] = v85;
          if ((unint64_t)v85 >= v126)
          {
            v99 = v85 - v125[0];
            v100 = v85 - v125[0] + 1;
            if (v100 < 0)
              std::vector<char,TInlineBufferAllocator<char,1024ul>>::__throw_length_error[abi:fe180100]();
            v101 = v126 - (unint64_t)v125[0];
            if (2 * (v126 - (unint64_t)v125[0]) > v100)
              v100 = 2 * v101;
            if (v101 >= 0x3FFFFFFFFFFFFFFFLL)
              v102 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v102 = v100;
            v124 = &v127;
            if (v102)
            {
              v103 = v129;
              if ((char *)v129 + v102 <= (char *)&v128 + 14)
                v129 = (__int128 *)((char *)v129 + v102);
              else
                v103 = operator new(v102);
            }
            else
            {
              v103 = 0;
            }
            v104 = &v103[v99];
            v105 = &v103[v102];
            v123 = &v103[v102];
            v103[v99] = BYTE1(v7);
            v98 = &v103[v99 + 1];
            v122.i64[1] = (uint64_t)v98;
            v107 = v125[0];
            v106 = v125[1];
            if (v125[1] == v125[0])
            {
              v109 = vdupq_n_s64((unint64_t)v125[1]);
            }
            else
            {
              do
              {
                v108 = *--v106;
                *--v104 = v108;
              }
              while (v106 != v107);
              v109 = *(int64x2_t *)v125;
              v98 = (unsigned __int8 *)v122.i64[1];
              v105 = v123;
            }
            v125[0] = v104;
            v125[1] = v98;
            v122 = v109;
            v110 = (char *)v126;
            v126 = (unint64_t)v105;
            v123 = v110;
            v121 = v109.i64[0];
            std::__split_buffer<char,TInlineBufferAllocator<char,30ul> &>::~__split_buffer((uint64_t)&v121);
          }
          else
          {
            *v85 = BYTE1(v7);
            v98 = v85 + 1;
          }
          v125[1] = v98;
          if ((unint64_t)v98 < v126)
          {
            *v98 = v7;
            v5 = v98 + 1;
            goto LABEL_178;
          }
          v111 = v98 - v125[0];
          v112 = v98 - v125[0] + 1;
          if (v112 < 0)
            std::vector<char,TInlineBufferAllocator<char,1024ul>>::__throw_length_error[abi:fe180100]();
          v113 = v126 - (unint64_t)v125[0];
          if (2 * (v126 - (unint64_t)v125[0]) > v112)
            v112 = 2 * v113;
          if (v113 >= 0x3FFFFFFFFFFFFFFFLL)
            v114 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v114 = v112;
          v124 = &v127;
          if (v114)
          {
            v115 = v129;
            if ((char *)v129 + v114 <= (char *)&v128 + 14)
              v129 = (__int128 *)((char *)v129 + v114);
            else
              v115 = operator new(v114);
          }
          else
          {
            v115 = 0;
          }
          v22 = &v115[v111];
          v23 = &v115[v114];
          v123 = &v115[v114];
          v115[v111] = v7;
          v5 = &v115[v111 + 1];
          v122.i64[1] = (uint64_t)v5;
          v116 = v125[0];
          v24 = v125[1];
          if (v125[1] == v125[0])
          {
LABEL_176:
            v118 = vdupq_n_s64((unint64_t)v24);
            goto LABEL_177;
          }
          do
          {
            v117 = *--v24;
            *--v22 = v117;
          }
          while (v24 != v116);
        }
        else
        {
          v15 = ((65428 - v7) >> 8) - 5;
          if ((unint64_t)v5 >= v126)
          {
            v27 = v5 - v125[0];
            v28 = v5 - v125[0] + 1;
            if (v28 < 0)
              std::vector<char,TInlineBufferAllocator<char,1024ul>>::__throw_length_error[abi:fe180100]();
            v29 = v126 - (unint64_t)v125[0];
            if (2 * (v126 - (unint64_t)v125[0]) > v28)
              v28 = 2 * v29;
            if (v29 >= 0x3FFFFFFFFFFFFFFFLL)
              v30 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v30 = v28;
            v124 = &v127;
            if (v30)
            {
              v31 = v129;
              if ((char *)v129 + v30 <= (char *)&v128 + 14)
                v129 = (__int128 *)((char *)v129 + v30);
              else
                v31 = operator new(v30);
            }
            else
            {
              v31 = 0;
            }
            v51 = &v31[v27];
            v52 = &v31[v30];
            v123 = &v31[v30];
            v31[v27] = v15;
            v5 = &v31[v27 + 1];
            v122.i64[1] = (uint64_t)v5;
            v54 = v125[0];
            v53 = v125[1];
            if (v125[1] == v125[0])
            {
              v56 = vdupq_n_s64((unint64_t)v125[1]);
            }
            else
            {
              do
              {
                v55 = *--v53;
                *--v51 = v55;
              }
              while (v53 != v54);
              v56 = *(int64x2_t *)v125;
              v5 = (unsigned __int8 *)v122.i64[1];
              v52 = v123;
            }
            v125[0] = v51;
            v125[1] = v5;
            v122 = v56;
            v57 = (char *)v126;
            v126 = (unint64_t)v52;
            v123 = v57;
            v121 = v56.i64[0];
            std::__split_buffer<char,TInlineBufferAllocator<char,30ul> &>::~__split_buffer((uint64_t)&v121);
          }
          else
          {
            *v5++ = v15;
          }
          v125[1] = v5;
          v8 = -108 - v7;
          if ((unint64_t)v5 < v126)
          {
LABEL_85:
            *v5++ = v8;
            goto LABEL_178;
          }
          v58 = v5 - v125[0];
          v59 = v5 - v125[0] + 1;
          if (v59 < 0)
            std::vector<char,TInlineBufferAllocator<char,1024ul>>::__throw_length_error[abi:fe180100]();
          v60 = v126 - (unint64_t)v125[0];
          if (2 * (v126 - (unint64_t)v125[0]) > v59)
            v59 = 2 * v60;
          if (v60 >= 0x3FFFFFFFFFFFFFFFLL)
            v61 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v61 = v59;
          v124 = &v127;
          if (v61)
          {
            v62 = v129;
            if ((char *)v129 + v61 <= (char *)&v128 + 14)
              v129 = (__int128 *)((char *)v129 + v61);
            else
              v62 = operator new(v61);
          }
          else
          {
            v62 = 0;
          }
          v22 = &v62[v58];
          v23 = &v62[v61];
          v123 = &v62[v61];
          v62[v58] = v8;
          v5 = &v62[v58 + 1];
          v122.i64[1] = (uint64_t)v5;
          v76 = v125[0];
          v24 = v125[1];
          if (v125[1] == v125[0])
            goto LABEL_176;
          do
          {
            v77 = *--v24;
            *--v22 = v77;
          }
          while (v24 != v76);
        }
      }
      else
      {
        v14 = ((v7 + 65428) >> 8) - 9;
        if ((unint64_t)v5 >= v126)
        {
          v16 = v5 - v125[0];
          v17 = v5 - v125[0] + 1;
          if (v17 < 0)
            std::vector<char,TInlineBufferAllocator<char,1024ul>>::__throw_length_error[abi:fe180100]();
          v18 = v126 - (unint64_t)v125[0];
          if (2 * (v126 - (unint64_t)v125[0]) > v17)
            v17 = 2 * v18;
          if (v18 >= 0x3FFFFFFFFFFFFFFFLL)
            v19 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v19 = v17;
          v124 = &v127;
          if (v19)
          {
            v20 = v129;
            if ((char *)v129 + v19 <= (char *)&v128 + 14)
              v129 = (__int128 *)((char *)v129 + v19);
            else
              v20 = operator new(v19);
          }
          else
          {
            v20 = 0;
          }
          v37 = &v20[v16];
          v38 = &v20[v19];
          v123 = &v20[v19];
          v20[v16] = v14;
          v5 = &v20[v16 + 1];
          v122.i64[1] = (uint64_t)v5;
          v40 = v125[0];
          v39 = v125[1];
          if (v125[1] == v125[0])
          {
            v42 = vdupq_n_s64((unint64_t)v125[1]);
          }
          else
          {
            do
            {
              v41 = *--v39;
              *--v37 = v41;
            }
            while (v39 != v40);
            v42 = *(int64x2_t *)v125;
            v5 = (unsigned __int8 *)v122.i64[1];
            v38 = v123;
          }
          v125[0] = v37;
          v125[1] = v5;
          v122 = v42;
          v43 = (char *)v126;
          v126 = (unint64_t)v38;
          v123 = v43;
          v121 = v42.i64[0];
          std::__split_buffer<char,TInlineBufferAllocator<char,30ul> &>::~__split_buffer((uint64_t)&v121);
        }
        else
        {
          *v5++ = v14;
        }
        v125[1] = v5;
        if ((unint64_t)v5 < v126)
          goto LABEL_85;
        v44 = v5 - v125[0];
        v45 = v5 - v125[0] + 1;
        if (v45 < 0)
          std::vector<char,TInlineBufferAllocator<char,1024ul>>::__throw_length_error[abi:fe180100]();
        v46 = v126 - (unint64_t)v125[0];
        if (2 * (v126 - (unint64_t)v125[0]) > v45)
          v45 = 2 * v46;
        if (v46 >= 0x3FFFFFFFFFFFFFFFLL)
          v47 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v47 = v45;
        v124 = &v127;
        if (v47)
        {
          v48 = v129;
          if ((char *)v129 + v47 <= (char *)&v128 + 14)
            v129 = (__int128 *)((char *)v129 + v47);
          else
            v48 = operator new(v47);
        }
        else
        {
          v48 = 0;
        }
        v22 = &v48[v44];
        v23 = &v48[v47];
        v123 = &v48[v47];
        v48[v44] = v8;
        v5 = &v48[v44 + 1];
        v122.i64[1] = (uint64_t)v5;
        v49 = v125[0];
        v24 = v125[1];
        if (v125[1] == v125[0])
          goto LABEL_176;
        do
        {
          v50 = *--v24;
          *--v22 = v50;
        }
        while (v24 != v49);
      }
    }
    else
    {
      v8 = v7 - 117;
      if ((unint64_t)v5 < v126)
        goto LABEL_85;
      v9 = v5 - v125[0];
      v10 = v5 - v125[0] + 1;
      if (v10 < 0)
        std::vector<char,TInlineBufferAllocator<char,1024ul>>::__throw_length_error[abi:fe180100]();
      v11 = v126 - (unint64_t)v125[0];
      if (2 * (v126 - (unint64_t)v125[0]) > v10)
        v10 = 2 * v11;
      if (v11 >= 0x3FFFFFFFFFFFFFFFLL)
        v12 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v12 = v10;
      v124 = &v127;
      if (v12)
      {
        v13 = v129;
        if ((char *)v129 + v12 <= (char *)&v128 + 14)
          v129 = (__int128 *)((char *)v129 + v12);
        else
          v13 = operator new(v12);
      }
      else
      {
        v13 = 0;
      }
      v22 = &v13[v9];
      v23 = &v13[v12];
      v123 = &v13[v12];
      v13[v9] = v8;
      v5 = &v13[v9 + 1];
      v122.i64[1] = (uint64_t)v5;
      v25 = v125[0];
      v24 = v125[1];
      if (v125[1] == v125[0])
        goto LABEL_176;
      do
      {
        v26 = *--v24;
        *--v22 = v26;
      }
      while (v24 != v25);
    }
    v118 = *(int64x2_t *)v125;
    v5 = (unsigned __int8 *)v122.i64[1];
    v23 = v123;
LABEL_177:
    v125[0] = v22;
    v125[1] = v5;
    v122 = v118;
    v119 = (char *)v126;
    v126 = (unint64_t)v23;
    v123 = v119;
    v121 = v118.i64[0];
    std::__split_buffer<char,TInlineBufferAllocator<char,30ul> &>::~__split_buffer((uint64_t)&v121);
LABEL_178:
    v125[1] = v5;
    ++v4;
  }
  while (v4 != v6);
  a3 = v125[0];
  a1 = v120;
LABEL_181:
  THandlerStreamingBuffers::WriteBytes(a1, v5 - a3, a3);
  std::vector<unsigned char,TInlineBufferAllocator<unsigned char,30ul>>::__destroy_vector::operator()[abi:fe180100]((uint64_t)v125);
}

void sub_1B09C7ACC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::vector<unsigned char,TInlineBufferAllocator<unsigned char,30ul>>::__destroy_vector::operator()[abi:fe180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<unsigned char,TInlineBufferAllocator<unsigned char,30ul>>::__destroy_vector::operator()[abi:fe180100](uint64_t a1)
{
  void *v2;
  void *v3;
  BOOL v4;
  BOOL v5;

  v2 = *(void **)a1;
  if (v2)
  {
    *(_QWORD *)(a1 + 8) = v2;
    v3 = (void *)(a1 + 54);
    if (a1 + 24 <= (unint64_t)v2)
    {
      v4 = v3 >= v2;
      v5 = v3 == v2;
    }
    else
    {
      v4 = 0;
      v5 = 0;
    }
    if (!v5 && v4)
    {
      if (*(_QWORD *)(a1 + 16) == *(_QWORD *)(a1 + 56))
        *(_QWORD *)(a1 + 56) = v2;
    }
    else
    {
      operator delete(v2);
    }
  }
}

void fnt_Normalize(uint64_t a1, int a2, int a3, _WORD *a4)
{
  unsigned int v4;
  unsigned int v5;
  char v6;
  BOOL v7;
  double v8;
  double v9;
  int v10;
  double v11;
  unsigned int v12;
  unsigned int v13;

  if (a2 >= 0)
    v4 = a2;
  else
    v4 = -a2;
  if (a3 >= 0)
    v5 = a3;
  else
    v5 = -a3;
  if (v4 > v5)
    v5 = v4;
  if (v5)
  {
    v6 = 30;
    do
    {
      --v6;
      v7 = v5 > 1;
      v5 >>= 1;
    }
    while (v7);
  }
  else
  {
    v6 = 30;
  }
  v8 = (double)(a2 << v6);
  v9 = (double)(a3 << v6);
  v10 = sqrt(v8 * v8 + v9 * v9);
  if (v10)
  {
    v11 = (double)v10 * 9.31322575e-10;
    v12 = (vcvtd_n_s64_f64(v8 * 9.31322575e-10 / v11, 0x1EuLL) + 0x8000) >> 16;
    v13 = (vcvtd_n_s64_f64(v9 * 9.31322575e-10 / v11, 0x1EuLL) + 0x8000) >> 16;
  }
  else
  {
    LOWORD(v13) = 0;
    LOWORD(v12) = 0x4000;
  }
  *a4 = v12;
  a4[1] = v13;
}

unsigned __int8 *fnt_SkipPushCrap(uint64_t a1, unsigned __int8 *a2)
{
  int v2;
  unsigned __int8 *v3;
  uint64_t v4;
  FILE **v6;
  uint64_t v8;
  _WORD *exception;

  v2 = *(unsigned __int8 *)(a1 + 363);
  if (v2 == 65)
  {
    if (*(_QWORD *)(a1 + 368) <= (unint64_t)a2 && *(_QWORD *)(a1 + 376) > (unint64_t)a2)
    {
      v3 = &a2[2 * *a2];
      return v3 + 1;
    }
LABEL_16:
    v6 = (FILE **)MEMORY[0x1E0C80C10];
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "CHECK_ASSERTION: interpreter assertion failed \"%s\"", "ERROR: trying to access beyond the inst array");
    v8 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8);
    if (v8)
      fprintf(*v6, "(glyph = %d)\n", *(_DWORD *)(v8 + 88));
    fputc(10, *v6);
    exception = __cxa_allocate_exception(2uLL);
    *exception = 1;
    __cxa_throw(exception, MEMORY[0x1E0DE4F10], 0);
  }
  if (v2 != 64)
  {
    if ((v2 & 0xF8) == 0xB8)
    {
      v4 = (2 * v2 - 366);
    }
    else
    {
      if ((v2 & 0xF8) != 0xB0)
        return a2;
      v4 = (v2 - 175);
    }
    a2 += v4;
    return a2;
  }
  if (*(_QWORD *)(a1 + 368) > (unint64_t)a2 || *(_QWORD *)(a1 + 376) <= (unint64_t)a2)
    goto LABEL_16;
  v3 = &a2[*a2];
  return v3 + 1;
}

unsigned __int8 *fnt_FindENDF(uint64_t a1, unsigned __int8 *a2)
{
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  int v5;
  FILE **v6;
  uint64_t v7;
  _WORD *exception;
  __int16 v9;

  if (*(_QWORD *)(a1 + 368) > (unint64_t)a2)
  {
LABEL_8:
    v6 = (FILE **)MEMORY[0x1E0C80C10];
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "CHECK_ASSERTION: interpreter assertion failed \"%s\"", "ERROR: trying to access beyond the inst array");
    v7 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8);
    if (v7)
      fprintf(*v6, "(glyph = %d)\n", *(_DWORD *)(v7 + 88));
    fputc(10, *v6);
    exception = __cxa_allocate_exception(2uLL);
    v9 = 1;
LABEL_13:
    *exception = v9;
    __cxa_throw(exception, MEMORY[0x1E0DE4F10], 0);
  }
  v3 = a2;
  while (1)
  {
    if (*(_QWORD *)(a1 + 376) <= (unint64_t)v3)
      goto LABEL_8;
    v4 = v3 + 1;
    v5 = *v3;
    *(_BYTE *)(a1 + 363) = v5;
    if (v5 == 45)
      return v4;
    if (v5 == 137 || v5 == 44)
    {
      exception = __cxa_allocate_exception(2uLL);
      v9 = 5;
      goto LABEL_13;
    }
    v3 = fnt_SkipPushCrap(a1, v4);
    if (*(_QWORD *)(a1 + 368) > (unint64_t)v3)
      goto LABEL_8;
  }
}

uint64_t fnt_RoundToDoubleGrid(int a1)
{
  unsigned int v1;

  if (a1 < 0)
    v1 = -((16 - a1) & 0xFFFFFFE0);
  else
    v1 = (a1 + 16) & 0xFFFFFFE0;
  if (((v1 ^ a1) & 0x80000000) == 0 || v1 == 0)
    return v1;
  else
    return 0;
}

uint64_t fnt_RoundDownToGrid(int a1)
{
  unsigned int v1;

  v1 = a1 & 0xFFFFFFC0;
  if (a1 < 0)
    v1 = -(-a1 & 0xFFFFFFC0);
  if (((v1 ^ a1) & 0x80000000) == 0 || v1 == 0)
    return v1;
  else
    return 0;
}

uint64_t fnt_RoundUpToGrid(int a1)
{
  unsigned int v1;

  if (a1 < 0)
    v1 = -((63 - a1) & 0xFFFFFFC0);
  else
    v1 = (a1 + 63) & 0xFFFFFFC0;
  if (((v1 ^ a1) & 0x80000000) == 0 || v1 == 0)
    return v1;
  else
    return 0;
}

uint64_t fnt_RoundToGrid(int a1)
{
  unsigned int v1;

  if (a1 < 0)
    v1 = -((32 - a1) & 0xFFFFFFC0);
  else
    v1 = (a1 + 32) & 0xFFFFFFC0;
  if (((v1 ^ a1) & 0x80000000) == 0 || v1 == 0)
    return v1;
  else
    return 0;
}

uint64_t fnt_RoundToHalfGrid(int a1)
{
  unsigned int v1;
  unsigned int v2;

  v1 = -a1 & 0xFFFFFFC0 ^ 0xFFFFFFE0;
  if (a1 >= 0)
    v1 = a1 & 0xFFFFFFC0 | 0x20;
  if (a1 > 0)
    v2 = 32;
  else
    v2 = -32;
  if (((v1 ^ a1) & 0x80000000) == 0)
    return v1;
  else
    return v2;
}

uint64_t fnt_SuperRound(int a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;

  v2 = *(_QWORD *)(a2 + 80);
  v3 = *(__int16 *)(v2 + 236);
  v4 = *(__int16 *)(v2 + 234);
  LODWORD(v2) = *(_DWORD *)(v2 + 224);
  v5 = -v4 - ((v3 - (v4 + a1)) & v2);
  v6 = ((v3 + a1 - v4) & v2) + v4;
  if (a1 < 0)
    v6 = v5;
  if (a1 <= 0)
    v4 = -v4;
  if (((v6 ^ a1) & 0x80000000) == 0 || v6 == 0)
    return v6;
  else
    return v4;
}

uint64_t fnt_Super45Round(int a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unsigned int v4;
  double v5;
  unsigned int v6;
  unsigned int v7;

  v2 = *(_QWORD *)(a2 + 80);
  v3 = *(__int16 *)(v2 + 236);
  v4 = *(__int16 *)(v2 + 234);
  LODWORD(v2) = *(_DWORD *)(v2 + 228);
  v5 = (double)(int)v2 * 9.31322575e-10;
  v6 = -v4
     - ((unint64_t)((int)v2
                         * (uint64_t)(int)(vcvtd_n_s64_f64((double)(int)(v3 - (v4 + a1)) * 9.31322575e-10 / v5, 0x1EuLL) & 0xFFFFFFC0)
                         + 0x20000000) >> 30);
  v7 = ((unint64_t)((int)v2
                         * (uint64_t)(int)(vcvtd_n_s64_f64((double)(int)(v3 + a1 - v4) * 9.31322575e-10 / v5, 0x1EuLL) & 0xFFFFFFC0)
                         + 0x20000000) >> 30)
     + v4;
  if (a1 < 0)
    v7 = v6;
  if (a1 <= 0)
    v4 = -v4;
  if (((v7 ^ a1) & 0x80000000) == 0 || v7 == 0)
    return v7;
  else
    return v4;
}

uint64_t fnt_MovePoint(uint64_t result, uint64_t a2, unsigned int a3, int a4)
{
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;

  v7 = result;
  v8 = *(__int16 *)(result + 360);
  v9 = *(__int16 *)(result + 28);
  v10 = *(__int16 *)(result + 30);
  if (!*(_BYTE *)(result + 365))
    result = fprintf((FILE *)*MEMORY[0x1E0C80C10], "CHECK_PFPROJ: non-valid_pfProj (pfProj = %f)\n", (float)((float)(int)v8 * 0.000061035));
  if ((_DWORD)v8 == 0x4000)
  {
    if (v9)
    {
      v11 = ShortFracMul(a4, v9);
      result = fnt_XMovePoint(v7, a2, a3, v11);
    }
    if (v10)
    {
      LODWORD(v12) = ShortFracMul(a4, v10);
      return fnt_YMovePoint(v7, a2, a3, v12);
    }
  }
  else
  {
    if (v9)
      result = fnt_XMovePoint(v7, a2, a3, v9 * (uint64_t)a4 / v8);
    if (v10)
    {
      v12 = v10 * (uint64_t)a4 / v8;
      return fnt_YMovePoint(v7, a2, a3, v12);
    }
  }
  return result;
}

uint64_t fnt_XMovePoint(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  uint64_t result;
  int v9;
  uint64_t v10;
  int v11;
  FILE **v12;
  uint64_t v13;
  _WORD *exception;
  __int16 v15;

  result = CHECK_ELEMENTPTR(a1, (int *)a2);
  v9 = *(_DWORD *)(a2 + 112);
  if ((a3 & 0x80000000) != 0 || v9 <= (int)a3)
  {
    v12 = (FILE **)MEMORY[0x1E0C80C10];
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "CHECK_RANGE_INDEX: %d not in range (%d - %d), interpreter value out of range", a3, v9, 0);
    v13 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8);
    if (v13)
      fprintf(*v12, "(glyph = %d)\n", *(_DWORD *)(v13 + 88));
    fputc(10, *v12);
    exception = __cxa_allocate_exception(2uLL);
    v15 = 1;
LABEL_9:
    *exception = v15;
    __cxa_throw(exception, MEMORY[0x1E0DE4F10], 0);
  }
  v10 = *(_QWORD *)(a2 + 8);
  v11 = *(_DWORD *)(v10 + 4 * a3);
  *(_DWORD *)(v10 + 4 * a3) = v11 + a4;
  if (__OFADD__(v11, a4))
  {
    exception = __cxa_allocate_exception(2uLL);
    v15 = 5;
    goto LABEL_9;
  }
  *(_BYTE *)(*(_QWORD *)(a2 + 48) + a3) |= 1u;
  return result;
}

uint64_t fnt_YMovePoint(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  uint64_t result;
  int v9;
  uint64_t v10;
  int v11;
  FILE **v12;
  uint64_t v13;
  _WORD *exception;
  __int16 v15;

  result = CHECK_ELEMENTPTR(a1, (int *)a2);
  v9 = *(_DWORD *)(a2 + 112);
  if ((a3 & 0x80000000) != 0 || v9 <= (int)a3)
  {
    v12 = (FILE **)MEMORY[0x1E0C80C10];
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "CHECK_RANGE_INDEX: %d not in range (%d - %d), interpreter value out of range", a3, v9, 0);
    v13 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8);
    if (v13)
      fprintf(*v12, "(glyph = %d)\n", *(_DWORD *)(v13 + 88));
    fputc(10, *v12);
    exception = __cxa_allocate_exception(2uLL);
    v15 = 1;
LABEL_9:
    *exception = v15;
    __cxa_throw(exception, MEMORY[0x1E0DE4F10], 0);
  }
  v10 = *(_QWORD *)(a2 + 16);
  v11 = *(_DWORD *)(v10 + 4 * a3);
  *(_DWORD *)(v10 + 4 * a3) = v11 + a4;
  if (__OFADD__(v11, a4))
  {
    exception = __cxa_allocate_exception(2uLL);
    v15 = 5;
    goto LABEL_9;
  }
  *(_BYTE *)(*(_QWORD *)(a2 + 48) + a3) |= 2u;
  return result;
}

uint64_t fnt_Project(uint64_t a1, int a2, int a3)
{
  int v5;

  v5 = ShortFracMul(a2, *(__int16 *)(a1 + 24));
  return ShortFracMul(a3, *(__int16 *)(a1 + 26)) + v5;
}

uint64_t fnt_OldProject(uint64_t a1, int a2, int a3)
{
  int v5;

  v5 = ShortFracMul(a2, *(__int16 *)(a1 + 32));
  return ShortFracMul(a3, *(__int16 *)(a1 + 34)) + v5;
}

uint64_t fnt_XProject(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t fnt_YProject(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

uint64_t fnt_GetCVTScale(uint64_t a1)
{
  uint64_t v1;
  __int16 v2;
  __int16 v3;
  int v4;
  int v5;
  int v7;
  int v8;
  int v9;
  int v10;

  v1 = *(_QWORD *)(a1 + 80);
  v2 = *(_WORD *)(a1 + 26);
  if (!v2)
    return *(unsigned int *)(v1 + 108);
  v3 = *(_WORD *)(a1 + 24);
  if (!v3)
    return *(unsigned int *)(v1 + 112);
  if (*(_BYTE *)(a1 + 364))
  {
    v4 = ShortFracMul(*(_DWORD *)(v1 + 108), v3);
    v5 = ShortFracMul(*(_DWORD *)(v1 + 112), v2);
    return sqrt((double)v4 * (double)v4 + (double)v5 * (double)v5);
  }
  else
  {
    v7 = *(_DWORD *)(v1 + 112);
    v8 = ShortFracMul(v7, v3);
    v9 = *(_DWORD *)(v1 + 108);
    v10 = ShortFracMul(v9, v2);
    return (int)((double)v7
                             * (double)v9
                             / (double)(int)sqrt((double)v8 * (double)v8 + (double)v10 * (double)v10));
  }
}

uint64_t fnt_GetCVTEntryFast(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  int v3;
  FILE **v5;
  uint64_t v7;
  _WORD *exception;

  v2 = *(_QWORD *)(a1 + 80);
  v3 = *(_DWORD *)(v2 + 256);
  if ((a2 & 0x80000000) != 0 || v3 <= (int)a2)
  {
    v5 = (FILE **)MEMORY[0x1E0C80C10];
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "CHECK_RANGE_INDEX: %d not in range (%d - %d), interpreter value out of range", a2, v3, 0);
    v7 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8);
    if (v7)
      fprintf(*v5, "(glyph = %d)\n", *(_DWORD *)(v7 + 88));
    fputc(10, *v5);
    exception = __cxa_allocate_exception(2uLL);
    *exception = 1;
    __cxa_throw(exception, MEMORY[0x1E0DE4F10], 0);
  }
  return *(unsigned int *)(*(_QWORD *)(v2 + 24) + 4 * a2);
}

unint64_t fnt_GetCVTEntrySlow(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  int v3;
  FILE **v5;
  uint64_t v7;
  _WORD *exception;

  v2 = *(_QWORD *)(a1 + 80);
  v3 = *(_DWORD *)(v2 + 256);
  if ((a2 & 0x80000000) != 0 || v3 <= (int)a2)
  {
    v5 = (FILE **)MEMORY[0x1E0C80C10];
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "CHECK_RANGE_INDEX: %d not in range (%d - %d), interpreter value out of range", a2, v3, 0);
    v7 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8);
    if (v7)
      fprintf(*v5, "(glyph = %d)\n", *(_DWORD *)(v7 + 88));
    fputc(10, *v5);
    exception = __cxa_allocate_exception(2uLL);
    *exception = 1;
    __cxa_throw(exception, MEMORY[0x1E0DE4F10], 0);
  }
  return (unint64_t)(*(int *)(*(_QWORD *)(v2 + 24) + 4 * a2) * (uint64_t)(int)fnt_GetCVTScale(a1) + 0x8000) >> 16;
}

uint64_t fnt_GetSingleWidthFast(uint64_t a1)
{
  return *(unsigned int *)(*(_QWORD *)(a1 + 80) + 200);
}

unint64_t fnt_GetSingleWidthSlow(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(*(_QWORD *)(a1 + 80) + 200);
  return (unint64_t)(v1 * (uint64_t)(int)fnt_GetCVTScale(a1) + 0x8000) >> 16;
}

uint64_t fnt_ChangeCvt(uint64_t result, uint64_t a2, unsigned int a3, int a4)
{
  uint64_t v4;
  int v5;
  FILE **v6;
  uint64_t v7;
  uint64_t v8;
  _WORD *exception;

  v4 = *(_QWORD *)(result + 80);
  v5 = *(_DWORD *)(v4 + 256);
  if ((a3 & 0x80000000) != 0 || v5 <= (int)a3)
  {
    v6 = (FILE **)MEMORY[0x1E0C80C10];
    v7 = result;
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "CHECK_RANGE_INDEX: %d not in range (%d - %d), interpreter value out of range", a3, v5, 0);
    v8 = *(_QWORD *)(*(_QWORD *)(v7 + 72) + 8);
    if (v8)
      fprintf(*v6, "(glyph = %d)\n", *(_DWORD *)(v8 + 88));
    fputc(10, *v6);
    exception = __cxa_allocate_exception(2uLL);
    *exception = 1;
    __cxa_throw(exception, MEMORY[0x1E0DE4F10], 0);
  }
  *(_DWORD *)(*(_QWORD *)(v4 + 24) + 4 * a3) += a4;
  return result;
}

uint64_t fnt_ComputeAndCheck_PF_Proj(uint64_t result)
{
  int v1;
  unsigned int v2;

  *(_BYTE *)(result + 365) = 1;
  v1 = *(__int16 *)(result + 30);
  v2 = ((v1 * *(__int16 *)(result + 26) + 0x2000) >> 14)
     + ((*(__int16 *)(result + 28) * *(__int16 *)(result + 24) + 0x2000) >> 14);
  if ((unsigned __int16)(((v1 * *(__int16 *)(result + 26) + 0x2000) >> 14)
                        + ((*(__int16 *)(result + 28) * *(__int16 *)(result + 24) + 0x2000) >> 14)
                        + 1023) <= 0x7FEu)
  {
    LOWORD(v2) = v2 & 0x8000 | 0x4000;
    *(_BYTE *)(result + 365) = 0;
  }
  *(_WORD *)(result + 360) = v2;
  return result;
}

void fnt_IllegalInstruction()
{
  _WORD *exception;

  exception = __cxa_allocate_exception(2uLL);
  *exception = 1;
  __cxa_throw(exception, MEMORY[0x1E0DE4F10], 0);
}

uint64_t fnt_NilFunction()
{
  return 0;
}

uint64_t fnt_InnerExecute(uint64_t result, unsigned __int8 *a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  unint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  FILE **v10;
  uint64_t v11;
  _WORD *exception;
  __int128 v13;

  v3 = result;
  v4 = *(_QWORD *)(result + 64);
  v5 = *(_OWORD *)(result + 368);
  *(_QWORD *)(result + 64) = a2;
  if (*(_QWORD *)(result + 384) >= a3)
    v6 = a3;
  else
    v6 = *(_QWORD *)(result + 384);
  *(_QWORD *)(result + 368) = a2;
  *(_QWORD *)(result + 376) = v6;
  v7 = *(_QWORD *)(*(_QWORD *)(result + 80) + 40);
  if (!v7)
  {
    v10 = (FILE **)MEMORY[0x1E0C80C10];
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "CHECK_ASSERTION: interpreter assertion failed \"%s\"", 0);
    goto LABEL_13;
  }
  v8 = *(_DWORD *)(result + 392);
  *(_DWORD *)(result + 392) = v8 + 1;
  if (v8 > 0x40)
  {
    v10 = (FILE **)MEMORY[0x1E0C80C10];
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "CHECK_ASSERTION: interpreter assertion failed \"%s\"", "gs->fntCallStack overage");
LABEL_13:
    v11 = *(_QWORD *)(*(_QWORD *)(v3 + 72) + 8);
    if (v11)
      fprintf(*v10, "(glyph = %d)\n", *(_DWORD *)(v11 + 88));
    fputc(10, *v10);
    exception = __cxa_allocate_exception(2uLL);
    *exception = 1;
    __cxa_throw(exception, MEMORY[0x1E0DE4F10], 0);
  }
  if (v6 > (unint64_t)a2)
  {
    v13 = v5;
    do
    {
      *(_QWORD *)(v3 + 64) = a2 + 1;
      v9 = *a2;
      *(_BYTE *)(v3 + 363) = v9;
      result = (*(uint64_t (**)(uint64_t))(v7 + 8 * v9))(v3);
      a2 = *(unsigned __int8 **)(v3 + 64);
    }
    while ((unint64_t)a2 < v6);
    v8 = *(_DWORD *)(v3 + 392) - 1;
    v5 = v13;
  }
  *(_DWORD *)(v3 + 392) = v8;
  *(_QWORD *)(v3 + 64) = v4;
  *(_OWORD *)(v3 + 368) = v5;
  return result;
}

uint64_t CorrectUnscaledOutline(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  unsigned int v5;
  unsigned int v6;
  int *v7;
  int *v8;
  _WORD *v9;
  _WORD *v10;
  _WORD *v11;
  int v12;
  int v13;

  v1 = *(_QWORD *)(*(_QWORD *)(result + 72) + 8);
  v2 = *(int *)(v1 + 4);
  if ((_DWORD)v2)
  {
    v3 = *(_QWORD *)(result + 80);
    v4 = *(_DWORD *)(v3 + 104);
    v5 = vcvtd_n_s64_f64(1.0 / ((double)*(int *)(v3 + 100) * 0.0000152587891), 0x10uLL);
    v6 = vcvtd_n_s64_f64(1.0 / ((double)v4 * 0.0000152587891), 0x10uLL);
    v7 = *(int **)(v1 + 8);
    v8 = *(int **)(v1 + 16);
    v9 = *(_WORD **)(v1 + 72);
    v10 = *(_WORD **)(v1 + 80);
    v11 = &v9[v2];
    do
    {
      v12 = *v7++;
      *v9++ = (v12 * v5 + 0x8000) >> 16;
      v13 = *v8++;
      *v10++ = (v13 * v6 + 0x8000) >> 16;
    }
    while (v9 < v11);
  }
  *(_BYTE *)(result + 362) = 0;
  return result;
}

void fnt_Execute(uint64_t a1, uint64_t a2, unsigned __int8 *a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, BOOL a9)
{
  BOOL v11;
  __int128 v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;

  v11 = a9;
  *(_QWORD *)&v12 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v49 = v12;
  v50 = v12;
  v47 = v12;
  v48 = v12;
  v45 = v12;
  v46 = v12;
  v43 = v12;
  v44 = v12;
  v41 = v12;
  v42 = v12;
  v39 = v12;
  v40 = v12;
  v37 = v12;
  v38 = v12;
  v35 = v12;
  v36 = v12;
  v33 = v12;
  v34 = v12;
  v30 = 0xAAAAAAAAAAAAAAAALL;
  v32 = 0xAAAAAAAAAAAAAAAALL;
  v26 = v12;
  v27 = 0xAAAAAAAAAAAAAAAALL;
  v25 = v12;
  v28 = a1;
  v29 = a2;
  v31 = 0;
  v22 = *(_QWORD *)(a1 + 8);
  v23 = v22;
  v21 = v22;
  LODWORD(v25) = 0x4000;
  v24 = 0x400000004000;
  WORD4(v48) = 0x4000;
  *((_QWORD *)&v33 + 1) = fnt_XMovePoint;
  *(_QWORD *)&v34 = fnt_XProject;
  *((_QWORD *)&v34 + 1) = fnt_XProject;
  LODWORD(v32) = 0;
  LODWORD(v33) = 0;
  WORD6(v48) = 256;
  if (a9)
    v11 = *(_BYTE *)(a2 + 264) != 0;
  BYTE10(v48) = v11;
  if (*(_DWORD *)(a2 + 128))
  {
    if (*(_BYTE *)(a2 + 266))
      v13 = fnt_GetCVTEntryFast;
    else
      v13 = fnt_GetCVTEntrySlow;
    v14 = fnt_GetSingleWidthFast;
    if (!*(_BYTE *)(a2 + 266))
      v14 = fnt_GetSingleWidthSlow;
    *((_QWORD *)&v35 + 1) = v13;
    *(_QWORD *)&v36 = v14;
    if (*(_WORD *)(a2 + 242))
      *(_DWORD *)(a2 + 200) = (unint64_t)(*(int *)(a2 + 100) * (uint64_t)*(__int16 *)(a2 + 242) + 0x8000) >> 16;
  }
  else
  {
    *((_QWORD *)&v35 + 1) = fnt_NilFunction;
    *(_QWORD *)&v36 = fnt_NilFunction;
  }
  v15 = *(_QWORD *)(a2 + 8);
  v16 = v15 + *(int *)(a2 + 4);
  *((_QWORD *)&v25 + 1) = a6;
  *(_QWORD *)&v26 = v16;
  *((_QWORD *)&v26 + 1) = v15;
  v27 = 0;
  DWORD2(v50) = 0;
  v49 = 0uLL;
  *(_QWORD *)&v17 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v17 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v19 = v17;
  v20 = v17;
  (*(void (**)(__int128 *__return_ptr, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)a6 + 24) + 48))(&v19, *(_QWORD *)(*(_QWORD *)a6 + 24), 0, 0);
  v18 = *((_QWORD *)&v19 + 1);
  if (*((_QWORD *)&v19 + 1))
  {
    v18 = *(_QWORD *)(*((_QWORD *)&v19 + 1) + 8);
    if (v18)
      v18 += v20;
  }
  *(_QWORD *)&v50 = v18 + *((_QWORD *)&v20 + 1) - v20;
  *(_QWORD *)&v35 = fnt_InnerExecute;
  fnt_InnerExecute((uint64_t)&v21, a3, a4);
  *(_QWORD *)&v19 = &off_1E6176770;
  TDataReference::DucRefCount((TDataReference *)&v19);
}

void sub_1B09C8B7C(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  size_t v4;

  __cxa_begin_catch(a1);
  if (*(_DWORD *)(v2 + 128) == 3)
  {
    v3 = *(_QWORD *)(v1 + 8);
    if (v3)
    {
      v4 = 4 * *(_DWORD *)(v3 + 4) + 16;
      memcpy(*(void **)(v3 + 8), *(const void **)(v3 + 56), v4);
      memcpy(*(void **)(v3 + 16), *(const void **)(v3 + 64), v4);
    }
  }
  __cxa_end_catch();
  JUMPOUT(0x1B09C8B48);
}

void sub_1B09C8BCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  TDataReference::~TDataReference((TDataReference *)&a9);
  _Unwind_Resume(a1);
}

char *GrowStackForPush(_QWORD *a1, int a2)
{
  char *result;
  size_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _WORD *exception;

  result = (char *)a1[7];
  if ((unint64_t)&result[4 * a2] > a1[6])
  {
    if (4 * a2 <= 1024)
      v4 = 1024;
    else
      v4 = (4 * a2);
    v5 = (char *)malloc_type_realloc(*(void **)(a1[10] + 8), *(int *)(a1[10] + 4) + v4, 0x3BFC4A7FuLL);
    if (!v5)
    {
      exception = __cxa_allocate_exception(2uLL);
      *exception = 20;
      __cxa_throw(exception, MEMORY[0x1E0DE4F10], 0);
    }
    v6 = v5;
    bzero(&v5[*(int *)(a1[10] + 4)], v4);
    v7 = a1[10];
    v8 = *(int *)(v7 + 4) + (uint64_t)(int)v4;
    *(_DWORD *)(v7 + 4) = v8;
    result = &v6[a1[7] - *(_QWORD *)(v7 + 8)];
    a1[6] = &v6[v8];
    a1[7] = result;
    *(_QWORD *)(v7 + 8) = v6;
  }
  return result;
}

void TGlyphOutlineContext::~TGlyphOutlineContext(CGPathRef *this)
{
  *this = (CGPathRef)&off_1E617B948;
  CGPathRelease(this[2]);
}

{
  TGlyphOutlineContext::~TGlyphOutlineContext(this);
  JUMPOUT(0x1B5E0CD38);
}

uint64_t TFontHandler::CopyGlyphPath(TFontHandler *this, uint64_t a2, BOOL *a3)
{
  __int128 v6;
  uint64_t v7;
  __int128 v9;
  __int128 v10;
  unint64_t v11;

  v11 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v6 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v9 = v6;
  v10 = v6;
  TGlyphOutlineContext::TGlyphOutlineContext((TGlyphOutlineContext *)&v9, 0);
  (*(void (**)(TFontHandler *, uint64_t, __int128 *, BOOL *))(*(_QWORD *)this + 72))(this, a2, &v9, a3);
  v7 = v10;
  *(_QWORD *)&v10 = 0;
  *(_QWORD *)&v9 = &off_1E617B948;
  CGPathRelease(0);
  return v7;
}

void sub_1B09C8DA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, CGPathRef path)
{
  CGPathRelease(path);
  _Unwind_Resume(a1);
}

uint64_t TFontHandler::CreateFontHandler(const void *a1, int a2, uint64_t a3)
{
  const TSFNTFont *v6;
  const TSFNTFont *v7;
  unsigned int v8;
  int IndexToLocFormat;
  TTrueTypeFontDataHandler *v10;
  _QWORD v12[7];

  if (!v6)
    return (*(uint64_t (**)(const void *, uint64_t))(*(_QWORD *)a1 + 64))(a1, a3);
  if (!a2)
    return 0;
  v7 = v6;
  if ((*(unsigned int (**)(const void *))(*(_QWORD *)a1 + 72))(a1) == 1024)
  {
    TheadTable::TheadTable((TheadTable *)v12, v7);
    v8 = *(unsigned __int16 *)(TheadTable::GetHead((TheadTable *)v12) + 46);
    v12[0] = &off_1E6176770;
    TDataReference::DucRefCount((TDataReference *)v12);
    if (__rev16(v8) > 0x12)
      return 0;
  }
  TheadTable::TheadTable((TheadTable *)v12, v7);
  v12[0] = &off_1E617B4F0;
  IndexToLocFormat = TRenderingHeaderTable::GetIndexToLocFormat((TRenderingHeaderTable *)v12);
  v12[0] = &off_1E6176770;
  TDataReference::DucRefCount((TDataReference *)v12);
  if (IndexToLocFormat)
  {
    v10 = (TTrueTypeFontDataHandler *)operator new();
    TTrueTypeFontDataHandler::TTrueTypeFontDataHandler(v10, v7);
    *(_QWORD *)v10 = &off_1E617B2E0;
  }
  else
  {
    v10 = (TTrueTypeFontDataHandler *)operator new();
    TTrueTypeFontDataHandler::TTrueTypeFontDataHandler(v10, v7);
  }
  return (uint64_t)v10;
}

uint64_t TRenderingHeaderTable::GetIndexToLocFormat(TRenderingHeaderTable *this)
{
  _DWORD *exception;

  if (*((_QWORD *)this + 5) <= 0x33uLL)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E6176998;
    exception[2] = 4;
  }
  return ((int)bswap32(*(unsigned __int16 *)(TheadTable::GetHead(this) + 50)) >> 16);
}

uint64_t TFontHandler::GetHorizontalAdvances(uint64_t this, const unsigned __int16 *a2, double *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;

  if (a4)
  {
    v4 = a4;
    v7 = this;
    v8 = 8 * a4;
    do
    {
      v9 = *a2++;
      this = (*(uint64_t (**)(uint64_t, _QWORD, double *, _QWORD, _QWORD))(*(_QWORD *)v7 + 40))(v7, v9, a3, 0, 0);
      if ((this & 1) == 0)
        *a3 = 0.0;
      ++a3;
      v8 -= 8;
      --v4;
    }
    while (v4);
  }
  return this;
}

double TFontHandler::GetFontInfo(TFontHandler *this, FPFontInfo *a2)
{
  double v3;
  double v4;
  double v5;
  double result;
  CGFloat v7;
  CGFloat v8;
  CGFloat v9;
  CGFloat v10;
  __int16 v11;
  __int16 v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;

  v18 = -1;
  v19 = NAN;
  v16 = -1;
  v17 = -1;
  v15 = -1;
  v13 = -1431655766;
  v14 = -1431655766;
  v12 = -21846;
  v11 = -21846;
  (*(void (**)(_QWORD, int *, int *, int *, int *, int *, int *, int *, int *, int *, BOOL *, BOOL *, double *, int *, int *, uint64_t *, uint64_t *, uint64_t *, uint64_t *, __int16 *, __int16 *))(**((_QWORD **)this + 1) + 176))(*((_QWORD *)this + 1), &a2->var2, &a2->var3, &a2->var4, &a2->var5, &a2->var6, &a2->var7, &a2->var8, &a2->var9, &a2->var10, &a2->var11, &a2->var12, &v19, &v14, &v13, &v18, &v17, &v16, &v15,
    &v12,
    &v11);
  v3 = (double)v12;
  v4 = (double)v11;
  a2->var13 = v19;
  a2->var14 = v3;
  v5 = (double)v14;
  a2->var15 = v4;
  a2->var16 = v5;
  result = (double)v13;
  v8 = *(double *)&v17;
  v7 = *(double *)&v18;
  v10 = *(double *)&v15;
  v9 = *(double *)&v16;
  a2->var17 = (double)v13;
  a2->var18.origin.x = v7;
  a2->var18.origin.y = v8;
  a2->var18.size.width = v9;
  a2->var18.size.height = v10;
  return result;
}

double TFontHandler::GetFontBounds(TFontHandler *this, double *a2, double *a3, double *a4, double *a5, int a6)
{
  double result;

  (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 280))(*((_QWORD *)this + 1));
  if (a6)
  {
    *a2 = *a2 + *a4 * -0.5;
    result = -*a5;
    *a3 = result;
  }
  return result;
}

uint64_t TFontHandler::GetFontMetrics(TFontHandler *this, int *a2, int *a3, int *a4)
{
  return 0;
}

void *TFontHandler::GetEncoding@<X0>(TFontHandler *this@<X0>, const unsigned int *a2@<X1>, const unsigned __int16 *__src@<X2>, _OWORD *a4@<X8>)
{
  void *result;
  int8x8_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  const unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  signed int v16;
  signed int v17;
  __int16 v18;

  if (__src)
    return memcpy(a4, __src, 0x200uLL);
  a4[30] = 0u;
  a4[31] = 0u;
  a4[28] = 0u;
  a4[29] = 0u;
  a4[26] = 0u;
  a4[27] = 0u;
  a4[24] = 0u;
  a4[25] = 0u;
  a4[22] = 0u;
  a4[23] = 0u;
  a4[20] = 0u;
  a4[21] = 0u;
  a4[18] = 0u;
  a4[19] = 0u;
  a4[16] = 0u;
  a4[17] = 0u;
  a4[14] = 0u;
  a4[15] = 0u;
  a4[12] = 0u;
  a4[13] = 0u;
  a4[10] = 0u;
  a4[11] = 0u;
  a4[8] = 0u;
  a4[9] = 0u;
  a4[6] = 0u;
  a4[7] = 0u;
  a4[4] = 0u;
  a4[5] = 0u;
  a4[2] = 0u;
  a4[3] = 0u;
  *a4 = 0u;
  a4[1] = 0u;
  result = (void *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 168))(*((_QWORD *)this + 1));
  if (result >= 0xFFFF)
    v8 = 0xFFFF;
  else
    v8 = result;
  if (a2)
  {
    if (v8)
    {
      LOWORD(v9) = 0;
      v10 = (v8 + 31) >> 5;
      v11 = a2;
      do
      {
        if (*v11)
        {
          v7.i32[0] = *v11;
          v7 = vcnt_s8(v7);
          LOWORD(v9) = vaddlv_u8((uint8x8_t)v7) + v9;
        }
        ++v11;
        --v10;
      }
      while (v10);
      if ((v9 & 0xFF00) != 0)
        v9 = 256;
      else
        v9 = (unsigned __int16)v9;
      if (v9)
      {
        v12 = 0;
        v13 = 1;
        do
        {
          if (((a2[(v13 - 1) >> 5] << (v13 - 1)) & 0x80000000) != 0)
            *((_WORD *)a4 + v12++) = v13 - 1;
          if (v8 <= v13)
            break;
          ++v13;
        }
        while (v12 < v9);
      }
    }
  }
  else
  {
    if (result >= 0xFF)
      v14 = 255;
    else
      v14 = (int)result;
    if (v14)
    {
      v15 = (256 - v14) >> 1;
      v16 = v14 + v15;
      LOWORD(v17) = v15;
      v18 = v15;
      do
      {
        *((_WORD *)a4 + v18) = v18 - v15;
        v18 = v17 + 1;
        v17 = (__int16)(v17 + 1);
      }
      while (v17 < v16);
    }
  }
  return result;
}

void TFontHandler::CreateStreamer(TFontHandler *this@<X0>, __CFData *a2@<X1>, THandlerStreamingContext **a3@<X8>)
{
  THandlerStreamingContext *v6;

  v6 = (THandlerStreamingContext *)operator new();
  THandlerStreamingContext::THandlerStreamingContext(v6, this, a2);
  *a3 = v6;
}

void sub_1B09C93E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E0CD38](v1, 0x10E1C4094539FFCLL);
  _Unwind_Resume(a1);
}

void TType1FontHandler::CreateStreamer(TType1FontHandler *this@<X0>, __CFData *a2@<X1>, THandlerStreamingContext **a3@<X8>)
{
  THandlerStreamingContext *v6;

  v6 = (THandlerStreamingContext *)operator new();
  THandlerStreamingContext::THandlerStreamingContext(v6, this, a2);
  *(_QWORD *)v6 = &off_1E61CBA80;
  *((_QWORD *)v6 + 70) = this;
  *a3 = v6;
}

void sub_1B09C9474(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E0CD38](v1, 0x10E1C409F79DE80);
  _Unwind_Resume(a1);
}

BOOL TFontHandler::CreatePostScriptEncoding(TFontHandler *this, const unsigned __int16 *a2, __CFData *a3)
{
  _QWORD *v5;
  unint64_t *v6;
  unint64_t v7;
  _OWORD v9[32];
  unint64_t v10;

  v10 = 0xAAAAAAAAAAAAAAAALL;
  (*(void (**)(unint64_t *__return_ptr, TFontHandler *, __CFData *))(*(_QWORD *)this + 120))(&v10, this, a3);
  v5 = (_QWORD *)v10;
  if (v10)
  {
    TFontHandler::GetEncoding(this, 0, a2, v9);
    THandlerStreamingContext::StreamPSEncoding(v5, (uint64_t)v9, v6);
    v7 = v10;
    v10 = 0;
    if (v7)
      (*(void (**)(unint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  return v5 != 0;
}

void sub_1B09C9530(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 - 40);
  *(_QWORD *)(v1 - 40) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  _Unwind_Resume(exception_object);
}

uint64_t TFontHandler::T1StreamPSDownload(TType1PSFont **this, int a2, const char *a3, const unsigned int *a4, const unsigned __int16 *a5, const int *a6, __CFData *a7)
{
  char *v13;
  const TFont *v14;
  uint64_t v15;
  uint64_t v17;
  void *v18;
  int v19;

  v19 = a2;
  v13 = (char *)malloc_type_calloc(1uLL, 0x26uLL, 0x108004086473A5EuLL);
  *(_DWORD *)v13 = 1;
  *(_QWORD *)(v13 + 20) = AppendBytes;
  *(_QWORD *)(v13 + 28) = a7;
  v17 = 0xAAAAAAAAAAAAAAAALL;
  v18 = v13;
  TType1PSFont::GetFont(this[1], v14, &v17);
  v15 = v17;
  if (v17)
  {
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t, const unsigned __int16 *, const int *, const char *, const unsigned int *, int *, void **))(*(_QWORD *)v17 + 64))(v17, 0, 1, 1, a5, a6, a3, a4, &v19, &v18);
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    free(v18);
    return 1;
  }
  else
  {
    free(v13);
    return 0;
  }
}

void sub_1B09C9664(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  __CFData *v13;
  uint64_t v14;

  (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  free(a13);
  __cxa_begin_catch(a1);
  CFDataSetLength(v13, 0);
  __cxa_end_catch();
  JUMPOUT(0x1B09C9644);
}

void sub_1B09C96B4(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t AppendBytes(__CFData *a1, CFIndex length, UInt8 *bytes)
{
  CFDataAppendBytes(a1, bytes, length);
  return 0;
}

{
  CFDataAppendBytes(a1, bytes, length);
  return 0;
}

{
  CFDataAppendBytes(a1, bytes, length);
  return 0;
}

uint64_t TFontHandler::StreamPSDownload(TFontHandler *a1, uint64_t a2, __int16 a3, char *a4, unsigned int *a5, const unsigned __int16 *a6, uint64_t a7)
{
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  _OWORD v17[32];
  unint64_t v18;

  v18 = 0xAAAAAAAAAAAAAAAALL;
  (*(void (**)(unint64_t *__return_ptr, TFontHandler *, uint64_t))(*(_QWORD *)a1 + 120))(&v18, a1, a7);
  v13 = v18;
  v14 = (a3 & 0xFFF) != 2 || v18 == 0;
  v15 = !v14;
  if (!v14)
  {
    TFontHandler::GetEncoding(a1, a5, a6, v17);
    THandlerStreamingContext::StreamT1Font(v13, a2, a4, a5, (uint64_t)v17, 0);
    v13 = v18;
  }
  v18 = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  return v15;
}

void sub_1B09C97C0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 - 72);
  *(_QWORD *)(v1 - 72) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  _Unwind_Resume(exception_object);
}

uint64_t TFontHandler::GetVariationValues(TFontHandler *this)
{
  return 0;
}

uint64_t TFontHandler::CanStreamPostScriptType1(TFontHandler *this)
{
  return 0;
}

void TSFNTFontHandler::~TSFNTFontHandler(TSFNTFontHandler *this)
{
  *(_QWORD *)this = off_1E61C8FC0;
  *((_QWORD *)this + 2) = &off_1E6176770;
  TDataReference::DucRefCount((TSFNTFontHandler *)((char *)this + 16));
}

uint64_t TSFNTFontHandler::GetRawMetrics(TSFNTFontHandler *this, uint64_t a2, double *a3, double *a4)
{
  uint64_t v7;

  if (a4)
    *a4 = (double)(*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 72))(*((_QWORD *)this + 1))
        * 0.0498046875;
  v7 = (*(uint64_t (**)(TSFNTFontHandler *))(*(_QWORD *)this + 128))(this);
  *a3 = (double)(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a2);
  return 1;
}

uint64_t TSFNTFontHandler::GetBounds(TSFNTFontHandler *this, unsigned int a2, double *a3, double *a4, double *a5, double *a6)
{
  return 0;
}

uint64_t TSFNTFontHandler::GetHorizontalToVerticalTranslate()
{
  return 0;
}

void TTrueTypeFontHandler::TTrueTypeFontHandler(TTrueTypeFontHandler *this, const TTrueTypeFont *a2)
{
  *(_QWORD *)this = off_1E61C8FC0;
  *((_QWORD *)this + 1) = a2;
  ThmtxTable::ThmtxTable((uint64_t)this + 16, a2, 0);
  *(_QWORD *)this = off_1E617B440;
  *((_DWORD *)this + 24) = (*(uint64_t (**)(const TTrueTypeFont *))(*(_QWORD *)a2 + 168))(a2);
}

void sub_1B09C9984(_Unwind_Exception *a1)
{
  _QWORD *v1;
  ThmtxTable *v2;
  uint64_t v3;

  *v1 = v3;
  ThmtxTable::~ThmtxTable(v2);
  _Unwind_Resume(a1);
}

uint64_t TTrueTypeFontHandler::GetRawMetrics(TTrueTypeFontHandler *this, uint64_t a2, double *a3, double *a4)
{
  __int128 v8;
  uint64_t v9;
  _WORD *v10;
  int v11;
  const TSFNTFont *v12;
  __int128 v13;
  __int128 v15;
  unsigned int v16;
  unsigned int v17;
  ThmtxTable *v18;
  uint64_t Hhea;
  ThmtxTable *v20;
  uint64_t v21;
  __int16 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;

  *(_QWORD *)&v8 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v29 = v8;
  v30 = v8;
  v28 = v8;
  (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)this + 144))(&v28);
  DWORD2(v30) = a2;
  if (*((_QWORD *)&v28 + 1)
    && (v9 = *(_QWORD *)(*((_QWORD *)&v28 + 1) + 8)) != 0
    && (unint64_t)v30 >= 0xA
    && (v10 = (_WORD *)(v9 + v29), *v10)
    && (int)bswap32((unsigned __int16)v10[3]) >> 16 > (int)bswap32((unsigned __int16)v10[1]) >> 16
    && (v11 = (int)bswap32((unsigned __int16)v10[4]) >> 16, v11 > (int)bswap32((unsigned __int16)v10[2]) >> 16))
  {
    v12 = (const TSFNTFont *)*((_QWORD *)this + 1);
    *(_QWORD *)&v13 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v13 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v26 = v13;
    v27 = v13;
    v24 = v13;
    v25 = v13;
    v23 = v13;
    ThmtxTable::ThmtxTable((uint64_t)&v23, v12, 1986553185, 1986884728, *((unsigned int *)this + 24) | 0x100000000);
    *(_QWORD *)&v23 = &off_1E61B4A78;
    if (TsfntTable::operator BOOL((TsfntTable *)&v23))
    {
      v22 = -21846;
      *a3 = (double)ThmtxTable::GetRawMetrics((ThmtxTable *)&v23, a2, &v22);
      if (a4)
        *a4 = (double)v22;
      *(_QWORD *)&v23 = &off_1E6176770;
      TDataReference::DucRefCount((TDataReference *)&v23);
    }
    else
    {
      *(_QWORD *)&v23 = &off_1E6176770;
      TDataReference::DucRefCount((TDataReference *)&v23);
      *(_QWORD *)&v15 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v15 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v25 = v15;
      v26 = v15;
      v23 = v15;
      v24 = v15;
      Tos2Table::Tos2Table((Tos2Table *)&v23, v12);
      if (TsfntTable::operator BOOL((TsfntTable *)&v23))
      {
        v16 = __rev16(*(unsigned __int16 *)(TpostTable::GetPost((TpostTable *)&v23) + 68));
        v17 = bswap32(*(unsigned __int16 *)(TpostTable::GetPost((TpostTable *)&v23) + 70)) >> 16;
      }
      else
      {
        v16 = 0;
        v17 = 0;
      }
      *(_QWORD *)&v23 = &off_1E6176770;
      TDataReference::DucRefCount((TDataReference *)&v23);
      if (!(v16 | v17))
      {
        v18 = (ThmtxTable *)(*(uint64_t (**)(TTrueTypeFontHandler *))(*(_QWORD *)this + 128))(this);
        Hhea = ThmtxTable::GetHhea(v18);
        if (Hhea)
          v16 = bswap32(*(unsigned __int16 *)(Hhea + 4)) >> 16;
        else
          LOWORD(v16) = 0;
        v20 = (ThmtxTable *)(*(uint64_t (**)(TTrueTypeFontHandler *))(*(_QWORD *)this + 128))(this);
        v21 = ThmtxTable::GetHhea(v20);
        if (v21)
          v17 = bswap32(*(unsigned __int16 *)(v21 + 6)) >> 16;
        else
          LOWORD(v17) = 0;
      }
      if (a4)
        *a4 = (double)((__int16)v16 - v11);
      *a3 = (double)((__int16)v16 - (__int16)v17);
    }
  }
  else
  {
    TSFNTFontHandler::GetRawMetrics(this, a2, a3, a4);
  }
  *(_QWORD *)&v28 = &off_1E6176770;
  TDataReference::DucRefCount((TDataReference *)&v28);
  return 1;
}

void sub_1B09C9C44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  TDataReference::~TDataReference((TDataReference *)va);
  _Unwind_Resume(a1);
}

_QWORD *TTrueTypeFontDataHandler::GetGlyphData@<X0>(_QWORD *this@<X0>, unint64_t *a2@<X2>, unsigned int a3@<W1>, _QWORD *a4@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int16 *v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  _DWORD *exception;

  if (*((_DWORD *)this + 24) <= a3)
    goto LABEL_13;
  v6 = this;
  v7 = this[14];
  if (!v7)
    goto LABEL_13;
  v8 = *(_QWORD *)(v7 + 8);
  if (!v8)
    goto LABEL_13;
  v9 = (unsigned __int16 *)(v8 + this[15] + 2 * a3);
  this = (_QWORD *)TsfntTable::validate<FPBigEndianScalar<unsigned short>>((TsfntTable *)(this + 13), (unint64_t)v9, 1);
  if (!this)
    goto LABEL_13;
  this = (_QWORD *)TsfntTable::GetTableEnd((TsfntTable *)(v6 + 20));
  v10 = v6[21];
  if (v10)
  {
    v10 = *(_QWORD *)(v10 + 8);
    if (v10)
      v10 += v6[22];
  }
  v11 = (_DWORD)this - v10;
  v12 = (bswap32(*v9) >> 15) & 0x1FFFE;
  v13 = (bswap32(v9[1]) >> 15) & 0x1FFFE;
  if (v12 > v13 || v13 > v11)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E6176998;
    exception[2] = 4;
  }
  if ((_DWORD)v13 != v12)
  {
    *a2 = v13 - v12;
    return TDataReference::TDataReference(a4, v6 + 20, v12, 0, 0);
  }
  else
  {
LABEL_13:
    *a2 = 0;
    *a4 = &off_1E6176770;
    a4[1] = 0;
    a4[2] = 0;
    a4[3] = 0;
  }
  return this;
}

_QWORD *TTrueTypeFontLongDataHandler::GetGlyphData@<X0>(_QWORD *this@<X0>, unint64_t *a2@<X2>, unsigned int a3@<W1>, _QWORD *a4@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  _DWORD *exception;

  if (*((_DWORD *)this + 24) <= a3)
    goto LABEL_13;
  v6 = this;
  v7 = this[14];
  if (!v7)
    goto LABEL_13;
  v8 = *(_QWORD *)(v7 + 8);
  if (!v8)
    goto LABEL_13;
  v9 = (unsigned int *)(v8 + this[15] + 4 * a3);
  if ((unint64_t)(v9 + 2) > TsfntTable::GetTableEnd((TsfntTable *)(this + 13)))
    goto LABEL_15;
  this = (_QWORD *)TsfntTable::GetTableEnd((TsfntTable *)(v6 + 20));
  v10 = v6[21];
  if (v10)
  {
    v10 = *(_QWORD *)(v10 + 8);
    if (v10)
      v10 += v6[22];
  }
  v11 = (_DWORD)this - v10;
  v12 = v9[1];
  v13 = bswap32(*v9);
  v14 = bswap32(v12);
  if (v13 > v14 || v14 > v11)
  {
LABEL_15:
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E6176998;
    exception[2] = 4;
  }
  if (v12 != *v9)
  {
    *a2 = v14 - v13;
    return TDataReference::TDataReference(a4, v6 + 20, v13, 0, 0);
  }
  else
  {
LABEL_13:
    *a2 = 0;
    *a4 = &off_1E6176770;
    a4[1] = 0;
    a4[2] = 0;
    a4[3] = 0;
  }
  return this;
}

uint64_t TTrueTypeFontHandler::GetHorizontalToVerticalTranslate(const TSFNTFont **a1, uint64_t a2, double *a3)
{
  __int128 v6;
  uint64_t v7;
  _WORD *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  int v13;
  __int16 v14;
  unsigned int v15;
  int v16;
  double v17;
  double v18;
  _QWORD v20[7];
  uint64_t v21;
  double v22;
  __int16 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;

  *(_QWORD *)&v6 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v25 = v6;
  v26 = v6;
  v24 = v6;
  (*((void (**)(__int128 *__return_ptr))*a1 + 18))(&v24);
  DWORD2(v26) = a2;
  if (*((_QWORD *)&v24 + 1)
    && (v7 = *(_QWORD *)(*((_QWORD *)&v24 + 1) + 8)) != 0
    && (unint64_t)v26 >= 0xA
    && (v8 = (_WORD *)(v7 + v25), *v8))
  {
    v9 = (unsigned __int16)v8[1];
    v10 = (unsigned __int16)v8[4];
    v23 = 0;
    v11 = (*((uint64_t (**)(const TSFNTFont **))*a1 + 16))(a1);
    v12 = (*(uint64_t (**)(uint64_t, uint64_t, __int16 *))(*(_QWORD *)v11 + 24))(v11, a2, &v23);
    v21 = 0;
    v22 = 0.0;
    (*((void (**)(const TSFNTFont **, uint64_t, uint64_t *, double *, uint64_t))*a1 + 5))(a1, a2, &v21, &v22, 1);
    v13 = v23;
    TheadTable::TheadTable((TheadTable *)v20, a1[1]);
    v14 = *(_WORD *)(TheadTable::GetHead((TheadTable *)v20) + 16);
    v20[0] = &off_1E6176770;
    TDataReference::DucRefCount((TDataReference *)v20);
    v15 = bswap32(v10) >> 16;
    v16 = (__int16)(bswap32(v9) >> 16);
    v17 = (double)(v16 - v13);
    if ((v14 & 0x2000) == 0)
      v17 = v17 - (double)(v16 + ((__int16)(v12 + (v12 >> 15)) >> 1) - v23);
    v18 = 0.0 - (v22 + (double)(__int16)v15);
    *a3 = v17;
    a3[1] = v18;
  }
  else
  {
    *a3 = 0.0;
    a3[1] = 0.0;
  }
  *(_QWORD *)&v24 = &off_1E6176770;
  TDataReference::DucRefCount((TDataReference *)&v24);
  return 1;
}

void sub_1B09CA0D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  TheadTable::~TheadTable((TheadTable *)&a9);
  TDataReference::~TDataReference((TDataReference *)&a19);
  _Unwind_Resume(a1);
}

uint64_t TTrueTypeFontHandler::GetBounds(const TSFNTFont **this, uint64_t a2, double *a3, double *a4, double *a5, double *a6, char a7)
{
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  _WORD *v17;
  uint64_t v18;
  int v19;
  __int16 v20;
  double v21;
  int v22;
  _QWORD v24[7];
  double v25;
  double v26;
  __int16 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;

  *(_QWORD *)&v14 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v14 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v29 = v14;
  v30 = v14;
  v28 = v14;
  (*((void (**)(__int128 *__return_ptr))*this + 18))(&v28);
  DWORD2(v30) = a2;
  if (*((_QWORD *)&v28 + 1) && (v15 = *(_QWORD *)(*((_QWORD *)&v28 + 1) + 8)) != 0 && (unint64_t)v30 >= 2)
  {
    v16 = 0;
    if ((unint64_t)v30 >= 0xA)
    {
      v17 = (_WORD *)(v15 + v29);
      if (*v17)
      {
        *a3 = (double)((int)bswap32((unsigned __int16)v17[1]) >> 16);
        *a4 = (double)((int)bswap32((unsigned __int16)v17[2]) >> 16);
        *a5 = (double)((int)bswap32((unsigned __int16)v17[3]) >> 16);
        *a6 = (double)((int)bswap32((unsigned __int16)v17[4]) >> 16);
        v27 = 0;
        v18 = (*((uint64_t (**)(const TSFNTFont **))*this + 16))(this);
        (*(void (**)(uint64_t, uint64_t, __int16 *))(*(_QWORD *)v18 + 24))(v18, a2, &v27);
        if ((a7 & 1) != 0)
        {
          v25 = 0.0;
          v26 = 0.0;
          (*((void (**)(const TSFNTFont **, uint64_t, double *, double *, uint64_t))*this + 5))(this, a2, &v25, &v26, 1);
          v19 = (int)(*a6 + v26);
          if (v19)
          {
            *a4 = *a4 - (double)v19;
            *a6 = *a6 - (double)v19;
          }
          TheadTable::TheadTable((TheadTable *)v24, this[1]);
          v20 = *(_WORD *)(TheadTable::GetHead((TheadTable *)v24) + 16);
          v24[0] = &off_1E6176770;
          TDataReference::DucRefCount((TDataReference *)v24);
          if ((v20 & 0x2000) != 0)
            goto LABEL_15;
          v21 = *a3;
          v22 = (int)(*a3 - (double)v27 + v25 * 0.5);
        }
        else
        {
          v21 = *a3;
          v22 = (int)(*a3 - (double)v27);
          if (!v22)
          {
LABEL_15:
            v16 = 1;
            goto LABEL_12;
          }
        }
        *a3 = v21 - (double)v22;
        *a5 = *a5 - (double)v22;
        goto LABEL_15;
      }
    }
  }
  else
  {
    v16 = 0;
  }
LABEL_12:
  *(_QWORD *)&v28 = &off_1E6176770;
  TDataReference::DucRefCount((TDataReference *)&v28);
  return v16;
}

void sub_1B09CA344(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  TheadTable::~TheadTable((TheadTable *)&a9);
  TDataReference::~TDataReference((TDataReference *)&a19);
  _Unwind_Resume(a1);
}

void TTrueTypeTransformedQuadOutlineContext::~TTrueTypeTransformedQuadOutlineContext(TTrueTypeTransformedQuadOutlineContext *this)
{
  JUMPOUT(0x1B5E0CD38);
}

uint64_t TTrueTypeTransformedQuadOutlineContext::GetKind(TTrueTypeTransformedQuadOutlineContext *this)
{
  return *((unsigned int *)this + 34);
}

uint64_t TTrueTypeTransformedQuadOutlineContext::CurveTo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  void (*v6)(double *__return_ptr, _QWORD *);
  _QWORD *v7;
  uint64_t v8;
  void (*v9)(double *__return_ptr, _QWORD *, uint64_t);
  _QWORD *v10;
  double v12[2];
  double v13[2];

  v6 = *(void (**)(double *__return_ptr, _QWORD *))(a1 + 120);
  v5 = *(_QWORD *)(a1 + 128);
  v7 = (_QWORD *)(a1 + (v5 >> 1));
  if ((v5 & 1) != 0)
    v6 = *(void (**)(double *__return_ptr, _QWORD *))(*v7 + v6);
  v6(v13, v7);
  v9 = *(void (**)(double *__return_ptr, _QWORD *, uint64_t))(a1 + 120);
  v8 = *(_QWORD *)(a1 + 128);
  v10 = (_QWORD *)(a1 + (v8 >> 1));
  if ((v8 & 1) != 0)
    v9 = *(void (**)(double *__return_ptr, _QWORD *, uint64_t))(*v10 + v9);
  v9(v12, v10, a3);
  return (*(uint64_t (**)(_QWORD, double, double, double, double))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8), v13[0], v13[1], v12[0], v12[1]);
}

uint64_t TTrueTypeTransformedQuadOutlineContext::LineTo(uint64_t a1)
{
  uint64_t v2;
  void (*v3)(double *__return_ptr, _QWORD *);
  _QWORD *v4;
  double v6[2];

  v3 = *(void (**)(double *__return_ptr, _QWORD *))(a1 + 120);
  v2 = *(_QWORD *)(a1 + 128);
  v4 = (_QWORD *)(a1 + (v2 >> 1));
  if ((v2 & 1) != 0)
    v3 = *(void (**)(double *__return_ptr, _QWORD *))(*v4 + v3);
  v3(v6, v4);
  return (*(uint64_t (**)(_QWORD, double, double))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), v6[0], v6[1]);
}

uint64_t TTrueTypeTransformedQuadOutlineContext::MoveTo(uint64_t a1)
{
  uint64_t v2;
  void (*v3)(double *__return_ptr, _QWORD *);
  _QWORD *v4;
  double v6[2];

  v3 = *(void (**)(double *__return_ptr, _QWORD *))(a1 + 120);
  v2 = *(_QWORD *)(a1 + 128);
  v4 = (_QWORD *)(a1 + (v2 >> 1));
  if ((v2 & 1) != 0)
    v3 = *(void (**)(double *__return_ptr, _QWORD *))(*v4 + v3);
  v3(v6, v4);
  return (*(uint64_t (**)(_QWORD, double, double))(**(_QWORD **)(a1 + 8) + 8))(*(_QWORD *)(a1 + 8), v6[0], v6[1]);
}

float64x2_t TTrueTypeTransformedQuadOutlineContext::TranslateTransformPoint@<Q0>(uint64_t a1@<X0>, float64x2_t *a2@<X1>, float64x2_t *a3@<X8>)
{
  float64x2_t result;

  result = vaddq_f64(*(float64x2_t *)(a1 + 104), *a2);
  *a3 = result;
  return result;
}

float64x2_t TTrueTypeTransformedQuadOutlineContext::ScaleTransformPoint@<Q0>(uint64_t a1@<X0>, float64x2_t *a2@<X1>, float64x2_t *a3@<X8>)
{
  float64x2_t result;

  result.f64[0] = *(float64_t *)(a1 + 72);
  result.f64[1] = *(float64_t *)(a1 + 96);
  *a3 = vmlaq_f64(*(float64x2_t *)(a1 + 104), *a2, result);
  return result;
}

float64x2_t TTrueTypeTransformedQuadOutlineContext::AffineTransformPoint@<Q0>(uint64_t a1@<X0>, double *a2@<X1>, float64x2_t *a3@<X8>)
{
  float64x2_t result;

  result = vaddq_f64(*(float64x2_t *)(a1 + 104), vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)(a1 + 88), a2[1]), *(float64x2_t *)(a1 + 72), *a2));
  *a3 = result;
  return result;
}

void TTrueTypeBufferedQuadOutlineContext::~TTrueTypeBufferedQuadOutlineContext(TTrueTypeBufferedQuadOutlineContext *this)
{
  JUMPOUT(0x1B5E0CD38);
}

uint64_t *TTrueTypeBufferedQuadOutlineContext::AddPoint(uint64_t *this, int a2, int a3, int a4)
{
  uint64_t *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  v4 = (uint64_t *)this[9];
  v5 = *((unsigned __int16 *)this + 40);
  *((_WORD *)this + 40) = v5 + 1;
  v6 = *v4;
  v7 = v4[1];
  if (v6 != v7)
  {
    while (*(_DWORD *)v6 != v5 || *(_DWORD *)(v6 + 4) != *((unsigned __int16 *)this + 41))
    {
      v6 += 12;
      if (v6 == v7)
        return TTrueTypeQuadOutlineContext::AddPoint(this, a2, (unsigned __int16)a3, (unsigned __int16)a4);
    }
  }
  if (v6 != v7 && v6 != 0)
  {
    *(_WORD *)(v6 + 8) = a3;
    *(_WORD *)(v6 + 10) = a4;
  }
  return TTrueTypeQuadOutlineContext::AddPoint(this, a2, (unsigned __int16)a3, (unsigned __int16)a4);
}

uint64_t TTrueTypeFontHandler::ParseOutline(TTrueTypeFontHandler *this, uint64_t a2, TTrueTypeQuadOutlineContext *a3, BOOL *a4)
{
  return (*(uint64_t (**)(TTrueTypeFontHandler *, uint64_t, TTrueTypeQuadOutlineContext *, _QWORD, BOOL *))(*(_QWORD *)this + 152))(this, a2, a3, 0, a4);
}

void TTrueTypeFontHandler::RenderGlyph(const TSFNTFont **this, int a2, TTrueTypeQuadOutlineContext *a3, unsigned int a4, BOOL *a5)
{
  __int128 v9;
  unint64_t v10;
  uint64_t v11;
  unsigned __int16 *v12;
  const unsigned __int8 *v13;
  unsigned __int16 *v14;
  unsigned int v15;
  int v16;
  unsigned __int16 *v17;
  const unsigned __int8 *v18;
  uint64_t v19;
  unsigned __int16 *v20;
  BOOL v21;
  uint64_t v22;
  const unsigned __int8 *v23;
  unsigned __int16 *v24;
  unint64_t v25;
  unsigned int v27;
  __int16 v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int16 *v31;
  __int128 v32;
  unsigned __int16 *v33;
  const unsigned __int8 *v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned __int16 *v40;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  unsigned int v48;
  const TSFNTFont **v49;
  unsigned __int16 *v50;
  char *v51;
  unsigned int v52;
  uint64_t v53;
  int v54;
  int v55;
  unsigned int v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;
  unsigned __int16 *v63;
  int v64;
  const unsigned __int8 *v65;
  unsigned __int16 *v66;
  int v67;
  uint64_t v68;
  unint64_t v69;
  BOOL v70;
  uint64_t v71;
  const unsigned __int8 *v72;
  unint64_t v73;
  BOOL v74;
  BOOL v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  const unsigned __int8 *v79;
  unsigned __int8 v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  __int128 v87;
  BOOL v88;
  __int16 v89;
  __int16 v90;
  unint64_t v91;
  unint64_t Point;
  uint64_t v93;
  int v94;
  int v95;
  int v96;
  int v97;
  unsigned __int16 *v98;
  unsigned int v99;
  double v100;
  char v101;
  float64x2_t TransformFunction;
  double v103;
  double v104;
  double v105;
  double v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  const unsigned __int8 *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  __int128 v117;
  unint64_t v118;
  unint64_t v119;
  BOOL v120;
  unint64_t v121;
  unsigned int v122;
  unint64_t v123;
  unsigned __int16 *v124;
  unsigned __int16 *v125;
  unsigned int v126;
  uint64_t v127;
  int v128;
  int v129;
  uint64_t v130;
  int v131;
  int v132;
  unsigned __int16 *v133;
  unsigned int v134;
  double v135;
  char v136;
  _BOOL4 v138;
  uint64_t v139;
  float64x2_t v140;
  double v141;
  double v142;
  double v143;
  double v144;
  _DWORD *v145;
  _DWORD *v146;
  _DWORD *v147;
  _DWORD *v148;
  _DWORD *v149;
  _DWORD *v150;
  _DWORD *v151;
  _DWORD *v152;
  _DWORD *v153;
  _DWORD *exception;
  _DWORD *v155;
  _DWORD *v156;
  _DWORD *v157;
  unsigned __int16 *v158;
  __int16 v159;
  unsigned int v161;
  unsigned int v162;
  unint64_t v163;
  unint64_t v164;
  __int128 v165;
  __int128 v166;
  unsigned __int8 v167[16];
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int16 v172;
  __int16 v173;
  int v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  void *__p[2];
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  unint64_t v186;
  unsigned __int8 v187[8];
  uint64_t v188;
  uint64_t v189;
  _OWORD v190[3];
  _OWORD *v191;
  uint64_t v192;

  v192 = *MEMORY[0x1E0C80C00];
  v186 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v9 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v184 = v9;
  v185 = v9;
  (*((void (**)(__int128 *__return_ptr))*this + 18))(&v184);
  v10 = v186;
  if (!v186)
    goto LABEL_256;
  if (*((_QWORD *)&v184 + 1) && (v11 = *(_QWORD *)(*((_QWORD *)&v184 + 1) + 8)) != 0)
    v12 = (unsigned __int16 *)(v11 + v185);
  else
    v12 = 0;
  v13 = (const unsigned __int8 *)v12 + v186;
  v14 = v12 + 5;
  if (v12 + 5 > (unsigned __int16 *)((char *)v12 + v186))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E6176998;
    exception[2] = 4;
  }
  v15 = *v12;
  v16 = (int)bswap32(v15) >> 16;
  if (a5)
  {
    if (v16 < 0)
    {
      if (v12 + 6 <= (unsigned __int16 *)v13)
      {
        v15 = (*v14 >> 2) & 1;
        goto LABEL_16;
      }
    }
    else
    {
      if (!*v12)
      {
LABEL_16:
        *a5 = v15;
        goto LABEL_17;
      }
      v17 = &v14[v16];
      if (v17 + 1 <= (unsigned __int16 *)v13)
      {
        v18 = (const unsigned __int8 *)v12 + 2 * v16 + (bswap32(*v17) >> 16) + 12;
        if (v18 < v13)
        {
          v15 = (*v18 >> 6) & 1;
          goto LABEL_16;
        }
      }
    }
    LOBYTE(v15) = 0;
    goto LABEL_16;
  }
LABEL_17:
  v162 = a2;
  if (v16 < 1)
  {
    if ((v16 & 0x80000000) == 0)
      goto LABEL_256;
    if (a4 >= 0x10)
    {
      v157 = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)v157 = &off_1E6176998;
      v157[2] = 4;
    }
    v31 = v12 + 5;
    *(_QWORD *)&v32 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v32 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v190[2] = v32;
    v161 = a4 + 1;
    v190[1] = v32;
    v190[0] = v32;
    v188 = 0;
    v189 = 0;
    v191 = v190;
    v33 = v12 + 5;
    *(_QWORD *)v187 = 0;
    do
    {
      v34 = (const unsigned __int8 *)(v33 + 2);
      if (v33 + 2 > (unsigned __int16 *)v13)
      {
        v150 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v150 = &off_1E6176998;
        v150[2] = 4;
      }
      v35 = bswap32(*v33);
      v36 = HIWORD(v35);
      if ((v35 & 0x20000000) != 0)
        v34 = (const unsigned __int8 *)v33 + 5;
      if ((v35 & 0x10000) != 0)
        v37 = 2;
      else
        v37 = 1;
      v38 = v37 + ((v36 >> 3) & 1);
      if ((v36 & 0x40) != 0)
        v38 = v37 + 2;
      v39 = v37 | 4;
      if ((v36 & 0x80) == 0)
        v39 = v38;
      v40 = (unsigned __int16 *)&v34[2 * v39];
      if ((v40 < (unsigned __int16 *)v34 || v40 > (unsigned __int16 *)v13)
        && (v34 + 2 > v13 || (unint64_t)(v13 - v34) >> 1 != v39))
      {
        v152 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v152 = &off_1E6176998;
        v152[2] = 4;
      }
      if ((v36 & 2) == 0)
      {
        if ((v36 & 1) != 0)
        {
          v43 = bswap32(*(unsigned __int16 *)v34) >> 16;
          v44 = bswap32(*((unsigned __int16 *)v34 + 1)) >> 16;
        }
        else
        {
          v43 = *v34;
          v44 = v34[1];
        }
        TSparseCoordsListPerComposits::AddCoords((TSparseCoordsListPerComposits *)v187, v43, a2);
        if ((v36 & 0x2000) != 0)
        {
          if ((char *)v33 + 5 > (char *)v13)
          {
            v153 = __cxa_allocate_exception(0x10uLL);
            *(_QWORD *)v153 = &off_1E6176998;
            v153[2] = 4;
          }
          v45 = 0;
          v46 = 0;
          do
            v46 = *((unsigned __int8 *)v33 + v45++ + 2) | (v46 << 8);
          while (v45 != 3);
          TSparseCoordsListPerComposits::AddCoords((TSparseCoordsListPerComposits *)v187, v44, v46);
        }
        else
        {
          TSparseCoordsListPerComposits::AddCoords((TSparseCoordsListPerComposits *)v187, v44, bswap32(v33[1]) >> 16);
        }
      }
      v33 = v40;
    }
    while ((v36 & 0x20) != 0);
    if (*(_QWORD *)v187 != v188)
    {
      *(_OWORD *)v167 = xmmword_1B0AAAEE8;
      v168 = unk_1B0AAAEF8;
      v169 = xmmword_1B0AAAF08;
      v170 = unk_1B0AAAF18;
      v171 = xmmword_1B0AAAF28;
      v47 = *((_QWORD *)a3 + 1);
      LOBYTE(v171) = 0;
      *(_QWORD *)v167 = &off_1E617B290;
      *(_QWORD *)&v167[8] = v47;
      *((_QWORD *)&v171 + 1) = v187;
      v174 = -1431655766;
      v172 = 0;
      v48 = a2;
      v173 = a2;
      v49 = this;
      v50 = v31;
      while (1)
      {
        v51 = (char *)(v50 + 2);
        v52 = bswap32(*v50) >> 16;
        if ((v52 & 0x2000) != 0)
        {
          v57 = 0;
          LODWORD(v53) = 0;
          do
            v53 = *((unsigned __int8 *)v50 + v57++ + 2) | ((_DWORD)v53 << 8);
          while (v57 != 3);
          v51 = (char *)v50 + 5;
          if ((v52 & 1) == 0)
          {
LABEL_74:
            v50 = (unsigned __int16 *)(v51 + 2);
            v55 = *v51;
            v58 = v51[1];
            if ((v52 & 2) != 0)
            {
              v64 = 0;
              goto LABEL_158;
            }
            LOWORD(v55) = *v51;
            v56 = v51[1];
            goto LABEL_76;
          }
        }
        else
        {
          v53 = bswap32(v50[1]) >> 16;
          if ((v52 & 1) == 0)
            goto LABEL_74;
        }
        v54 = bswap32(*((unsigned __int16 *)v51 + 1));
        v50 = (unsigned __int16 *)(v51 + 4);
        v55 = (int)bswap32(*(unsigned __int16 *)v51) >> 16;
        if ((v52 & 2) != 0)
        {
          v64 = 0;
          v58 = v54 >> 16;
          goto LABEL_158;
        }
        v56 = HIWORD(v54);
LABEL_76:
        v59 = *(_QWORD *)v187;
        if (*(_QWORD *)v187 != v188)
        {
          while (*(_DWORD *)v59 != (unsigned __int16)v55 || *(_DWORD *)(v59 + 4) != v48)
          {
            v59 += 12;
            if (v59 == v188)
              goto LABEL_258;
          }
        }
        if (v59 == v188 || !v59)
        {
LABEL_258:
          v146 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v146 = &off_1E6176998;
          v146[2] = 4;
        }
        *(_QWORD *)&v60 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v60 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v165 = v60;
        v166 = v60;
        (*((void (**)(__int128 *__return_ptr, const TSFNTFont **, uint64_t, unint64_t *))*v49 + 18))(&v165, v49, v53, &v186);
        v159 = v52;
        v61 = *(_QWORD *)v187;
        if (*(_QWORD *)v187 != v188)
        {
          while (*(_DWORD *)v61 != v56 || *(_DWORD *)(v61 + 4) != (_DWORD)v53)
          {
            v61 += 12;
            if (v61 == v188)
              goto LABEL_257;
          }
        }
        if (!v186 || v61 == v188 || !v61)
          goto LABEL_257;
        if (*((_QWORD *)&v165 + 1))
        {
          v62 = *(_QWORD *)(*((_QWORD *)&v165 + 1) + 8);
          v63 = (unsigned __int16 *)(v62 + v166);
          if (!v62)
            v63 = 0;
        }
        else
        {
          v63 = 0;
        }
        v65 = (const unsigned __int8 *)v63 + v186;
        v66 = v63 + 5;
        if (v63 + 5 > (unsigned __int16 *)((char *)v63 + v186))
          goto LABEL_259;
        v67 = (int)bswap32(*v63) >> 16;
        if (v67 < 1)
          goto LABEL_257;
        v68 = (v67 + 1);
        v69 = (unint64_t)&v66[v68];
        v70 = v69 < (unint64_t)v66 || v69 > (unint64_t)v65;
        if (v70 && (v63 + 6 > (unsigned __int16 *)v65 || (v186 - 10) >> 1 != v68)
          || ((v71 = (uint64_t)&v66[v67] + (bswap32(v66[(unsigned __int16)v67]) >> 16),
               v72 = (const unsigned __int8 *)(v71 + 2),
               v73 = v71 + 3,
               v63 + 6 <= (unsigned __int16 *)v72)
            ? (v74 = v73 > (unint64_t)v65)
            : (v74 = 1),
              !v74 ? (v75 = v72 >= v65) : (v75 = 1),
              v75))
        {
LABEL_259:
          v147 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v147 = &off_1E6176998;
          v147[2] = 4;
        }
        v76 = 0;
        v77 = 0;
        v163 = bswap32(v66[v67 - 1]) >> 16;
        v78 = v163 + 1;
        v79 = v72;
        while (1)
        {
          v80 = *v79;
          if ((*v79 & 8) != 0)
            break;
          v81 = v77 + 2;
          if ((*v79 & 0x10) != 0)
            v81 = v77;
          if ((*v79 & 2) != 0)
            ++v77;
          else
            v77 = v81;
          v82 = v76 + 2;
          if ((*v79 & 0x20) != 0)
            v82 = v76;
          if ((*v79 & 4) != 0)
            ++v76;
          else
            v76 = v82;
          --v78;
          ++v79;
          if (!v78)
            goto LABEL_141;
LABEL_140:
          if (v79 >= v65)
            goto LABEL_141;
        }
        if (v79 + 1 >= v65)
          goto LABEL_259;
        v83 = v79[1];
        if (!v79[1])
          goto LABEL_259;
        v79 += 2;
        v84 = v83 + 1;
        v85 = v77 + 2 * v84;
        if ((v80 & 0x10) != 0)
          v85 = v77;
        v77 += v84;
        if ((v80 & 2) == 0)
          v77 = v85;
        v86 = v76 + 2 * v84;
        if ((v80 & 0x20) != 0)
          v86 = v76;
        if ((v80 & 4) != 0)
          v76 += v84;
        else
          v76 = v86;
        v78 -= v84;
        if (v78)
          goto LABEL_140;
LABEL_141:
        if (v78)
          goto LABEL_259;
        v158 = v50;
        *(_QWORD *)&v179 = 0xAAAAAAAAAAAAAAAALL;
        *(_QWORD *)&v87 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v87 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v177 = v87;
        *(_OWORD *)__p = v87;
        v175 = v87;
        v176 = v87;
        TPointParser::TPointParser((TPointParser *)&v175, v72, v79, &v79[v77], v76, v65);
        v88 = 0;
        v89 = 0;
        v90 = 0;
        v91 = 0;
        while (1)
        {
          Point = TPointParser::GetPoint((TPointParser *)&v175, v91, 0);
          v90 += Point;
          v89 += WORD2(Point);
          if (v56 == v91)
            break;
          v88 = v91++ >= v163;
          if (v163 + 1 == v91)
          {
            v88 = 1;
            goto LABEL_154;
          }
        }
        v93 = *(_QWORD *)v187;
        if (*(_QWORD *)v187 != v188)
        {
          while (*(_DWORD *)v93 != v56 || *(_DWORD *)(v93 + 4) != (_DWORD)v53)
          {
            v93 += 12;
            if (v93 == v188)
              goto LABEL_154;
          }
        }
        if (v93 != v188 && v93)
        {
          *(_WORD *)(v93 + 8) = v90;
          *(_WORD *)(v93 + 10) = v89;
        }
LABEL_154:
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        if (v88)
        {
LABEL_257:
          v145 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v145 = &off_1E6176998;
          v145[2] = 4;
        }
        v94 = *(__int16 *)(v59 + 8);
        v95 = *(__int16 *)(v61 + 8);
        v96 = *(__int16 *)(v59 + 10);
        v97 = *(__int16 *)(v61 + 10);
        *(_QWORD *)&v165 = &off_1E6176770;
        TDataReference::DucRefCount((TDataReference *)&v165);
        v58 = v96 - v97;
        v55 = v94 - v95;
        v64 = 1;
        v49 = this;
        v50 = v158;
        v48 = v162;
        LOWORD(v52) = v159;
LABEL_158:
        if ((v52 & 0xC8) != 0)
        {
          v98 = v50;
          v99 = *v50++;
          v100 = (double)((int)bswap32(v99) >> 16) * 0.0000610351562;
          if ((v52 & 0x80) != 0)
          {
            v103 = (double)((int)bswap32(v98[1]) >> 16) * 0.0000610351562;
            v104 = (double)((int)bswap32(v98[2]) >> 16) * 0.0000610351562;
            v105 = (double)((int)bswap32(v98[3]) >> 16) * 0.0000610351562;
            v181 = xmmword_1B0AAAFA0;
            v182 = unk_1B0AAAFB0;
            v183 = xmmword_1B0AAAFC0;
            v177 = xmmword_1B0AAAF60;
            *(_OWORD *)__p = unk_1B0AAAF70;
            v179 = xmmword_1B0AAAF80;
            v180 = unk_1B0AAAF90;
            v175 = xmmword_1B0AAAF40;
            v176 = unk_1B0AAAF50;
            TTrueTypeTransformedQuadOutlineContext::TTrueTypeTransformedQuadOutlineContext((TTrueTypeTransformedQuadOutlineContext *)&v175, (const TTrueTypeQuadOutlineContext *)v167, v100, v103, v104, v105, v55, v58, (v52 & 0x1800) == 2048);
            (*((void (**)(const TSFNTFont **, uint64_t, __int128 *, _QWORD, _QWORD))*v49 + 19))(v49, v53, &v175, v161, 0);
            v50 = v98 + 4;
            if ((v52 & 0x20) == 0)
              goto LABEL_255;
          }
          else
          {
            if ((v52 & 0x40) == 0)
            {
              v181 = xmmword_1B0AAAFA0;
              v182 = unk_1B0AAAFB0;
              v183 = xmmword_1B0AAAFC0;
              v177 = xmmword_1B0AAAF60;
              *(_OWORD *)__p = unk_1B0AAAF70;
              v179 = xmmword_1B0AAAF80;
              v180 = unk_1B0AAAF90;
              v175 = xmmword_1B0AAAF40;
              v176 = unk_1B0AAAF50;
              TTrueTypeTransformedQuadOutlineContext::TTrueTypeTransformedQuadOutlineContext((TTrueTypeTransformedQuadOutlineContext *)&v175, (const TTrueTypeQuadOutlineContext *)v167, v100, v55, v58, (v52 & 0x1800) == 2048);
              (*((void (**)(const TSFNTFont **, uint64_t, __int128 *, _QWORD, _QWORD))*v49 + 19))(v49, v53, &v175, v161, 0);
              goto LABEL_172;
            }
            v106 = (double)((int)bswap32(v98[1]) >> 16) * 0.0000610351562;
            v181 = xmmword_1B0AAAFA0;
            v182 = unk_1B0AAAFB0;
            v183 = xmmword_1B0AAAFC0;
            v177 = xmmword_1B0AAAF60;
            *(_OWORD *)__p = unk_1B0AAAF70;
            v179 = xmmword_1B0AAAF80;
            v180 = unk_1B0AAAF90;
            v175 = xmmword_1B0AAAF40;
            v176 = unk_1B0AAAF50;
            TTrueTypeTransformedQuadOutlineContext::TTrueTypeTransformedQuadOutlineContext((TTrueTypeTransformedQuadOutlineContext *)&v175, (const TTrueTypeQuadOutlineContext *)v167, v100, v106, v55, v58, (v52 & 0x1800) == 2048);
            (*((void (**)(const TSFNTFont **, uint64_t, __int128 *, _QWORD, _QWORD))*v49 + 19))(v49, v53, &v175, v161, 0);
            v50 = v98 + 2;
            if ((v52 & 0x20) == 0)
            {
LABEL_255:
              std::vector<TCoordPairs,TInlineBufferAllocator<TCoordPairs,4ul>>::__destroy_vector::operator()[abi:fe180100]((uint64_t)v187);
              goto LABEL_256;
            }
          }
        }
        else
        {
          v101 = (v55 == 0) & ~(_BYTE)v64;
          if (v58)
            v101 = 0;
          if (v55 != v58)
            v64 = 0;
          if ((v101 & 1) != 0 || v64)
          {
            (*((void (**)(const TSFNTFont **, uint64_t, unsigned __int8 *, _QWORD, _QWORD))*v49 + 19))(v49, v53, v167, v161, 0);
          }
          else
          {
            *((_QWORD *)&v182 + 1) = unk_1B0AAAFB8;
            v183 = xmmword_1B0AAAFC0;
            v177 = xmmword_1B0AAAF60;
            *(_OWORD *)__p = unk_1B0AAAF70;
            *(_QWORD *)&v179 = 0xAAAAAAAAAAAAAA00;
            v176 = unk_1B0AAAF50;
            *(_QWORD *)&v175 = &off_1E61C9070;
            *((_QWORD *)&v175 + 1) = *(_QWORD *)&v167[8];
            *((_QWORD *)&v179 + 1) = 0x3FF0000000000000;
            v180 = 0uLL;
            *(_QWORD *)&v181 = 0x3FF0000000000000;
            *((double *)&v181 + 1) = (double)v55;
            *(double *)&v182 = (double)v58;
            TransformFunction = TTrueTypeTransformedQuadOutlineContext::ConcatMatricesAndGetTransformFunction((TTrueTypeTransformedQuadOutlineContext *)&v175, (const TTrueTypeQuadOutlineContext *)v167, 1);
            (*((void (**)(const TSFNTFont **, uint64_t, __int128 *, _QWORD, _QWORD, float64x2_t))*v49 + 19))(v49, v53, &v175, v161, 0, TransformFunction);
          }
LABEL_172:
          if ((v52 & 0x20) == 0)
            goto LABEL_255;
        }
      }
    }
    v124 = v31;
    while (1)
    {
      v125 = v124 + 2;
      v126 = bswap32(*v124) >> 16;
      if ((v126 & 0x2000) != 0)
      {
        v130 = 0;
        LODWORD(v127) = 0;
        do
          v127 = *((unsigned __int8 *)v124 + v130++ + 2) | ((_DWORD)v127 << 8);
        while (v130 != 3);
        v125 = (unsigned __int16 *)((char *)v124 + 5);
        if ((v126 & 1) != 0)
        {
LABEL_223:
          v124 = v125 + 2;
          v128 = (int)bswap32(*v125) >> 16;
          v129 = (int)bswap32(v125[1]) >> 16;
          goto LABEL_233;
        }
      }
      else
      {
        v127 = bswap32(v124[1]) >> 16;
        if ((v126 & 1) != 0)
          goto LABEL_223;
      }
      v124 = v125 + 1;
      v131 = *(char *)v125;
      v132 = *((char *)v125 + 1);
      if ((v126 & 2) != 0)
        v128 = v131;
      else
        v128 = v131;
      if ((v126 & 2) != 0)
        v129 = v132;
      else
        v129 = v132;
LABEL_233:
      if ((v126 & 0xC8) == 0)
      {
        if (v129)
          v136 = 0;
        else
          v136 = (v128 == 0) & (v126 >> 1);
        v138 = (v126 & 2) == 0 && v128 == v129;
        if ((v136 & 1) != 0 || v138)
        {
          (*((void (**)(const TSFNTFont **, uint64_t, TTrueTypeQuadOutlineContext *, _QWORD, _QWORD))*this + 19))(this, v127, a3, v161, 0);
        }
        else
        {
          v182 = unk_1B0AAAFB0;
          v183 = xmmword_1B0AAAFC0;
          v177 = xmmword_1B0AAAF60;
          *(_OWORD *)__p = unk_1B0AAAF70;
          v180 = unk_1B0AAAF90;
          v181 = xmmword_1B0AAAFA0;
          v179 = xmmword_1B0AAAF80;
          v175 = xmmword_1B0AAAF40;
          v176 = unk_1B0AAAF50;
          v139 = *((_QWORD *)a3 + 1);
          LOBYTE(v179) = 0;
          *(_QWORD *)&v175 = &off_1E61C9070;
          *((_QWORD *)&v175 + 1) = v139;
          *((_QWORD *)&v179 + 1) = 0x3FF0000000000000;
          v180 = 0uLL;
          *(_QWORD *)&v181 = 0x3FF0000000000000;
          *((double *)&v181 + 1) = (double)v128;
          *(double *)&v182 = (double)v129;
          v140 = TTrueTypeTransformedQuadOutlineContext::ConcatMatricesAndGetTransformFunction((TTrueTypeTransformedQuadOutlineContext *)&v175, a3, 1);
          (*((void (**)(const TSFNTFont **, uint64_t, __int128 *, _QWORD, _QWORD, float64x2_t))*this + 19))(this, v127, &v175, v161, 0, v140);
        }
        goto LABEL_252;
      }
      v133 = v124;
      v134 = *v124++;
      v135 = (double)((int)bswap32(v134) >> 16) * 0.0000610351562;
      if ((v126 & 0x80) != 0)
      {
        v141 = (double)((int)bswap32(v133[1]) >> 16) * 0.0000610351562;
        v142 = (double)((int)bswap32(v133[2]) >> 16) * 0.0000610351562;
        v143 = (double)((int)bswap32(v133[3]) >> 16) * 0.0000610351562;
        v181 = xmmword_1B0AAAFA0;
        v182 = unk_1B0AAAFB0;
        v183 = xmmword_1B0AAAFC0;
        v177 = xmmword_1B0AAAF60;
        *(_OWORD *)__p = unk_1B0AAAF70;
        v179 = xmmword_1B0AAAF80;
        v180 = unk_1B0AAAF90;
        v175 = xmmword_1B0AAAF40;
        v176 = unk_1B0AAAF50;
        TTrueTypeTransformedQuadOutlineContext::TTrueTypeTransformedQuadOutlineContext((TTrueTypeTransformedQuadOutlineContext *)&v175, a3, v135, v141, v142, v143, v128, v129, (v126 & 0x1800) == 2048);
        (*((void (**)(const TSFNTFont **, uint64_t, __int128 *, _QWORD, _QWORD))*this + 19))(this, v127, &v175, v161, 0);
        v124 = v133 + 4;
        if ((v126 & 0x20) == 0)
          goto LABEL_255;
      }
      else if ((v126 & 0x40) != 0)
      {
        v144 = (double)((int)bswap32(v133[1]) >> 16) * 0.0000610351562;
        v181 = xmmword_1B0AAAFA0;
        v182 = unk_1B0AAAFB0;
        v183 = xmmword_1B0AAAFC0;
        v177 = xmmword_1B0AAAF60;
        *(_OWORD *)__p = unk_1B0AAAF70;
        v179 = xmmword_1B0AAAF80;
        v180 = unk_1B0AAAF90;
        v175 = xmmword_1B0AAAF40;
        v176 = unk_1B0AAAF50;
        TTrueTypeTransformedQuadOutlineContext::TTrueTypeTransformedQuadOutlineContext((TTrueTypeTransformedQuadOutlineContext *)&v175, a3, v135, v144, v128, v129, (v126 & 0x1800) == 2048);
        (*((void (**)(const TSFNTFont **, uint64_t, __int128 *, _QWORD, _QWORD))*this + 19))(this, v127, &v175, v161, 0);
        v124 = v133 + 2;
        if ((v126 & 0x20) == 0)
          goto LABEL_255;
      }
      else
      {
        v181 = xmmword_1B0AAAFA0;
        v182 = unk_1B0AAAFB0;
        v183 = xmmword_1B0AAAFC0;
        v177 = xmmword_1B0AAAF60;
        *(_OWORD *)__p = unk_1B0AAAF70;
        v179 = xmmword_1B0AAAF80;
        v180 = unk_1B0AAAF90;
        v175 = xmmword_1B0AAAF40;
        v176 = unk_1B0AAAF50;
        TTrueTypeTransformedQuadOutlineContext::TTrueTypeTransformedQuadOutlineContext((TTrueTypeTransformedQuadOutlineContext *)&v175, a3, v135, v128, v129, (v126 & 0x1800) == 2048);
        (*((void (**)(const TSFNTFont **, uint64_t, __int128 *, _QWORD, _QWORD))*this + 19))(this, v127, &v175, v161, 0);
LABEL_252:
        if ((v126 & 0x20) == 0)
          goto LABEL_255;
      }
    }
  }
  v167[0] = 0;
  v19 = (v16 + 1);
  v20 = &v14[v19];
  v21 = v20 < v14 || v20 > (unsigned __int16 *)v13;
  if (v21 && (v12 + 6 > (unsigned __int16 *)v13 || (v10 - 10) >> 1 != v19))
  {
    v156 = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)v156 = &off_1E6176998;
    v156[2] = 4;
  }
  v22 = (uint64_t)&v14[v16] + (bswap32(v14[(unsigned __int16)v16]) >> 16);
  v23 = (const unsigned __int8 *)(v22 + 2);
  v24 = v12 + 6;
  v25 = v22 + 3;
  if (v12 + 6 > (unsigned __int16 *)v23 || v25 > (unint64_t)v13)
  {
    v155 = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)v155 = &off_1E6176998;
    v155[2] = 4;
  }
  v27 = v14[v16 - 1];
  TheadTable::TheadTable((TheadTable *)&v175, this[1]);
  v28 = *(_WORD *)(TheadTable::GetHead((TheadTable *)&v175) + 16);
  *(_QWORD *)&v175 = &off_1E6176770;
  TDataReference::DucRefCount((TDataReference *)&v175);
  if ((v28 & 0x2000) != 0)
  {
    LODWORD(v30) = 0;
  }
  else
  {
    LOWORD(v175) = 0;
    v29 = (*((uint64_t (**)(const TSFNTFont **))*this + 16))(this);
    (*(void (**)(uint64_t, _QWORD, __int128 *))(*(_QWORD *)v29 + 24))(v29, v162, &v175);
    LODWORD(v30) = (__int16)v175 - ((int)bswap32(v12[1]) >> 16);
  }
  if (v23 >= v13)
    goto LABEL_260;
  v107 = 0;
  v108 = 0;
  v164 = bswap32(v27) >> 16;
  v109 = v164 + 1;
  v110 = v23;
  while (1)
  {
    v167[0] = *v110;
    if ((v167[0] & 8) != 0)
      break;
    v111 = v108 + 2;
    if ((v167[0] & 0x10) != 0)
      v111 = v108;
    if ((v167[0] & 2) != 0)
      ++v108;
    else
      v108 = v111;
    v112 = v107 + 2;
    if ((v167[0] & 0x20) != 0)
      v112 = v107;
    if ((v167[0] & 4) != 0)
      ++v107;
    else
      v107 = v112;
    --v109;
    ++v110;
    if (!v109)
      goto LABEL_205;
LABEL_204:
    if (v110 >= v13)
      goto LABEL_205;
  }
  if (v110 + 1 >= v13)
    goto LABEL_260;
  v113 = v110[1];
  if (!v110[1])
  {
    v149 = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)v149 = &off_1E6176998;
    v149[2] = 4;
  }
  v110 += 2;
  v114 = v113 + 1;
  v115 = v108 + 2 * v114;
  if ((v167[0] & 0x10) != 0)
    v115 = v108;
  v108 += v114;
  if ((v167[0] & 2) == 0)
    v108 = v115;
  v116 = v107 + 2 * v114;
  if ((v167[0] & 0x20) != 0)
    v116 = v107;
  if ((v167[0] & 4) != 0)
    v107 += v114;
  else
    v107 = v116;
  v109 -= v114;
  if (v109)
    goto LABEL_204;
LABEL_205:
  if (v109)
  {
LABEL_260:
    v148 = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)v148 = &off_1E6176998;
    v148[2] = 4;
  }
  *(_QWORD *)&v179 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v117 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v117 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v177 = v117;
  *(_OWORD *)__p = v117;
  v175 = v117;
  v176 = v117;
  TPointParser::TPointParser((TPointParser *)&v175, v23, v110, &v110[v108], v107, v13);
  LODWORD(v23) = 0;
  v118 = 0;
  v119 = bswap32(*v14) >> 16;
  v120 = 1;
  do
  {
    v121 = TPointParser::GetPoint((TPointParser *)&v175, v118, (char *)v167);
    v30 = (v30 + v121);
    v23 = (const unsigned __int8 *)((_DWORD)v23 + HIDWORD(v121));
    if (!v120 || (*((_BYTE *)a3 + 64) = 1, (v167[0] & 1) != 0) || v118 == v119)
    {
      (*(void (**)(TTrueTypeQuadOutlineContext *))(*(_QWORD *)a3 + 16))(a3);
    }
    else
    {
      if (v119 > v164)
      {
        v151 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v151 = &off_1E6176998;
        v151[2] = 4;
      }
      v187[0] = -86;
      v123 = TPointParser::GetPoint((TPointParser *)&v175, v119, (char *)v187);
      (*(void (**)(TTrueTypeQuadOutlineContext *, _QWORD, _QWORD, uint64_t, const unsigned __int8 *, _QWORD))(*(_QWORD *)a3 + 24))(a3, (v30 + v123), ((_DWORD)v23 + HIDWORD(v123)), v30, v23, v187[0] & 1);
    }
    v120 = v118 == v119;
    if (v118 == v119)
    {
      v122 = *v24++;
      v119 = bswap32(v122) >> 16;
      if (!*((_BYTE *)a3 + 66))
        (*(void (**)(TTrueTypeQuadOutlineContext *, char *, char *))(*(_QWORD *)a3 + 40))(a3, (char *)a3 + 16, (char *)a3 + 48);
    }
    ++v118;
  }
  while (v164 + 1 != v118);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
LABEL_256:
  *(_QWORD *)&v184 = &off_1E6176770;
  TDataReference::DucRefCount((TDataReference *)&v184);
}

void sub_1B09CB8C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40)
{
  uint64_t v40;

  TDataReference::~TDataReference((TDataReference *)(v40 - 224));
  _Unwind_Resume(a1);
}

unint64_t TPointParser::GetPoint(TPointParser *this, unint64_t a2, char *a3)
{
  char *v4;
  char *v5;
  unint64_t v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  _DWORD *v16;
  _DWORD *v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  _DWORD *v33;
  _DWORD *v34;
  uint64_t v35;
  int v36;
  char *v37;
  uint64_t v38;
  char v39;
  char *v40;
  char *v41;
  int v42;
  unsigned int v43;
  unsigned __int8 *v44;
  unsigned int v45;
  char *v46;
  int v47;
  uint64_t v48;
  unsigned __int8 *v49;
  unsigned int v50;
  unint64_t v51;
  unint64_t v52;
  char *v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  char *v58;
  uint64_t v59;
  char *v60;
  _DWORD *v61;
  _DWORD *v62;
  char *v63;
  uint64_t v64;
  int v65;
  unint64_t v66;
  _DWORD *exception;

  v5 = (char *)*((_QWORD *)this + 6);
  v4 = (char *)*((_QWORD *)this + 7);
  v6 = (v4 - v5) / 12;
  if (v6 > a2)
  {
    v7 = &v5[12 * a2];
    v8 = *(_QWORD *)(v7 + 4);
    if (a3)
      *a3 = *v7;
    v9 = HIDWORD(v8);
    return v8 | (v9 << 32);
  }
  v11 = *((_QWORD *)this + 5);
  if (v11 > a2)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E6176998;
    exception[2] = 4;
  }
  if (v11 >= a2)
    goto LABEL_34;
  v12 = a2 + 1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 8) - (_QWORD)v5) >> 2) < a2 + 1)
  {
    if (v12 > 0x1555555555555555)
      goto LABEL_74;
    v13 = (char *)std::__allocate_at_least[abi:fe180100]<std::allocator<std::pair<unsigned char,IntPoint>>>(v12);
    v4 = &v13[12 * v6];
    v15 = &v13[12 * v14];
    v17 = (_DWORD *)*((_QWORD *)this + 6);
    v16 = (_DWORD *)*((_QWORD *)this + 7);
    v5 = v4;
    if (v16 != v17)
    {
      do
      {
        v18 = *(_QWORD *)(v16 - 3);
        v16 -= 3;
        v19 = v16[2];
        *(_QWORD *)(v5 - 12) = v18;
        v5 -= 12;
        *((_DWORD *)v5 + 2) = v19;
      }
      while (v16 != v17);
      v16 = (_DWORD *)*((_QWORD *)this + 6);
    }
    *((_QWORD *)this + 6) = v5;
    *((_QWORD *)this + 7) = v4;
    *((_QWORD *)this + 8) = v15;
    if (v16)
    {
      operator delete(v16);
      v5 = (char *)*((_QWORD *)this + 6);
      v4 = (char *)*((_QWORD *)this + 7);
    }
  }
  v20 = *((_QWORD *)this + 5);
  v21 = 0xAAAAAAAAAAAAAAABLL * ((v4 - v5) >> 2);
  v22 = v20 - v21;
  if (v20 <= v21)
  {
    if (v20 < v21)
      *((_QWORD *)this + 7) = &v5[12 * v20];
    goto LABEL_34;
  }
  v23 = *((_QWORD *)this + 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v23 - (uint64_t)v4) >> 2) < v22)
  {
    if (v20 <= 0x1555555555555555)
    {
      v24 = 0xAAAAAAAAAAAAAAABLL * ((v23 - (uint64_t)v5) >> 2);
      v25 = 0x5555555555555556 * ((v23 - (uint64_t)v5) >> 2);
      if (v25 <= v20)
        v25 = *((_QWORD *)this + 5);
      if (v24 >= 0xAAAAAAAAAAAAAAALL)
        v26 = 0x1555555555555555;
      else
        v26 = v25;
      v27 = (char *)std::__allocate_at_least[abi:fe180100]<std::allocator<std::pair<unsigned char,IntPoint>>>(v26);
      v29 = &v27[12 * v21];
      v30 = &v27[12 * v20];
      v31 = v29;
      do
      {
        *v31 = 0;
        *((_DWORD *)v31 + 1) = 0;
        *((_DWORD *)v31 + 2) = 0;
        v31 += 12;
      }
      while (v31 != v30);
      v32 = &v27[12 * v28];
      v34 = (_DWORD *)*((_QWORD *)this + 6);
      v33 = (_DWORD *)*((_QWORD *)this + 7);
      if (v33 != v34)
      {
        do
        {
          v35 = *(_QWORD *)(v33 - 3);
          v33 -= 3;
          v36 = v33[2];
          *(_QWORD *)(v29 - 12) = v35;
          v29 -= 12;
          *((_DWORD *)v29 + 2) = v36;
        }
        while (v33 != v34);
        v33 = (_DWORD *)*((_QWORD *)this + 6);
      }
      *((_QWORD *)this + 6) = v29;
      *((_QWORD *)this + 7) = v30;
      *((_QWORD *)this + 8) = v32;
      if (v33)
        operator delete(v33);
      goto LABEL_34;
    }
LABEL_74:
    std::vector<char,TInlineBufferAllocator<char,1024ul>>::__throw_length_error[abi:fe180100]();
  }
  v37 = &v4[12 * v22];
  do
  {
    *v4 = 0;
    *((_DWORD *)v4 + 1) = 0;
    *((_DWORD *)v4 + 2) = 0;
    v4 += 12;
  }
  while (v4 != v37);
  *((_QWORD *)this + 7) = v37;
LABEL_34:
  LODWORD(v8) = 0;
  LODWORD(v9) = 0;
  do
  {
    v38 = *((_QWORD *)this + 4);
    if (v38)
    {
      *((_QWORD *)this + 4) = v38 - 1;
      v39 = *((_BYTE *)this + 24);
    }
    else
    {
      v40 = (char *)(*(_QWORD *)this)++;
      v39 = *v40;
      *((_BYTE *)this + 24) = *v40;
      if ((v39 & 8) != 0)
      {
        *(_QWORD *)this = v40 + 2;
        *((_QWORD *)this + 4) = v40[1];
      }
    }
    if ((v39 & 2) != 0)
    {
      v44 = (unsigned __int8 *)*((_QWORD *)this + 1);
      *((_QWORD *)this + 1) = v44 + 1;
      v45 = *v44;
      if ((v39 & 0x10) != 0)
        v43 = v45;
      else
        v43 = -v45;
      if ((v39 & 4) != 0)
      {
LABEL_50:
        v49 = (unsigned __int8 *)*((_QWORD *)this + 2);
        *((_QWORD *)this + 2) = v49 + 1;
        v50 = *v49;
        if ((v39 & 0x20) != 0)
          v48 = v50;
        else
          v48 = -v50;
        goto LABEL_54;
      }
    }
    else if ((v39 & 0x10) != 0)
    {
      v43 = 0;
      if ((v39 & 4) != 0)
        goto LABEL_50;
    }
    else
    {
      v41 = (char *)*((_QWORD *)this + 1);
      *((_QWORD *)this + 1) = v41 + 1;
      v42 = *v41;
      *((_QWORD *)this + 1) = v41 + 2;
      v43 = v41[1] | (v42 << 8);
      if ((v39 & 4) != 0)
        goto LABEL_50;
    }
    if ((v39 & 0x20) != 0)
    {
      v48 = 0;
    }
    else
    {
      v46 = (char *)*((_QWORD *)this + 2);
      *((_QWORD *)this + 2) = v46 + 1;
      v47 = *v46;
      *((_QWORD *)this + 2) = v46 + 2;
      v48 = v46[1] | (v47 << 8);
    }
LABEL_54:
    if (v11 < a2)
    {
      v51 = *((_QWORD *)this + 7);
      v52 = *((_QWORD *)this + 8);
      if (v51 >= v52)
      {
        v54 = *((_QWORD *)this + 6);
        v55 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v51 - v54) >> 2);
        v56 = v55 + 1;
        if (v55 + 1 > 0x1555555555555555)
          goto LABEL_74;
        if (0x5555555555555556 * ((uint64_t)(v52 - v54) >> 2) > v56)
          v56 = 0x5555555555555556 * ((uint64_t)(v52 - v54) >> 2);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v52 - v54) >> 2) >= 0xAAAAAAAAAAAAAAALL)
          v57 = 0x1555555555555555;
        else
          v57 = v56;
        v58 = (char *)std::__allocate_at_least[abi:fe180100]<std::allocator<std::pair<unsigned char,IntPoint>>>(v57);
        v60 = &v58[12 * v55];
        *v60 = *((_BYTE *)this + 24);
        *(_QWORD *)(v60 + 4) = v43 | (unint64_t)(v48 << 32);
        v62 = (_DWORD *)*((_QWORD *)this + 6);
        v61 = (_DWORD *)*((_QWORD *)this + 7);
        v63 = v60;
        if (v61 != v62)
        {
          do
          {
            v64 = *(_QWORD *)(v61 - 3);
            v61 -= 3;
            v65 = v61[2];
            *(_QWORD *)(v63 - 12) = v64;
            v63 -= 12;
            *((_DWORD *)v63 + 2) = v65;
          }
          while (v61 != v62);
          v61 = (_DWORD *)*((_QWORD *)this + 6);
        }
        v53 = v60 + 12;
        *((_QWORD *)this + 6) = v63;
        *((_QWORD *)this + 7) = v60 + 12;
        *((_QWORD *)this + 8) = &v58[12 * v59];
        if (v61)
          operator delete(v61);
      }
      else
      {
        *(_BYTE *)v51 = v39;
        *(_QWORD *)(v51 + 4) = v43 | (unint64_t)(v48 << 32);
        v53 = (char *)(v51 + 12);
      }
      *((_QWORD *)this + 7) = v53;
    }
    LODWORD(v8) = v43 + v8;
    v9 = (v48 + v9);
    v66 = *((_QWORD *)this + 5);
    *((_QWORD *)this + 5) = v66 + 1;
  }
  while (v66 < a2);
  if (a3)
    *a3 = *((_BYTE *)this + 24);
  return v8 | (v9 << 32);
}

void TTrueTypeQuadOutlineContext::~TTrueTypeQuadOutlineContext(TTrueTypeQuadOutlineContext *this)
{
  JUMPOUT(0x1B5E0CD38);
}

uint64_t TTrueTypeQuadOutlineContext::GetKind(TTrueTypeQuadOutlineContext *this)
{
  return 0;
}

uint64_t TTrueTypeQuadOutlineContext::AddOffCurveStartPoint(TTrueTypeQuadOutlineContext *this, int a2, int a3, int a4, int a5, int a6)
{
  double v7;
  double v8;
  double v9;
  double v10;
  uint64_t result;

  v7 = (double)a2;
  v8 = (double)a3;
  v9 = (double)a4;
  v10 = (double)a5;
  if (!a6)
  {
    v8 = ((double)a3 + (double)a5) * 0.5;
    v7 = ((double)a2 + (double)a4) * 0.5;
  }
  result = (*(uint64_t (**)(TTrueTypeQuadOutlineContext *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)this + 16))(this, 0, (int)v7, (int)v8);
  *((double *)this + 2) = v9;
  *((double *)this + 3) = v10;
  return result;
}

uint64_t TTrueTypeFontHandler::GetOutlinePath(uint64_t a1, uint64_t a2, void (***a3)(_QWORD), uint64_t a4)
{
  void (**v8)(TTrueTypeQuadOutlineContext *__hidden);
  void (***v9)(_QWORD);
  __int128 v10;
  __int128 v11;
  __int128 v12;
  unint64_t v13;

  v13 = 0xAAAAAAAAAAAAAA00;
  v10 = unk_1B0AAAFE0;
  v11 = xmmword_1B0AAAFF0;
  v12 = unk_1B0AAB000;
  v8 = &off_1E617B240;
  v9 = a3;
  (**a3)(a3);
  (*(void (**)(uint64_t, uint64_t, void (***)(TTrueTypeQuadOutlineContext *__hidden), uint64_t))(*(_QWORD *)a1 + 136))(a1, a2, &v8, a4);
  return ((uint64_t (*)(_QWORD))(*v9)[5])(v9);
}

void TTrueTypeFontHandler::CreateStreamer(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t TSFNTFontHandler::GetHorizontalMetricsTable(TSFNTFontHandler *this)
{
  return (uint64_t)this + 16;
}

void TPointParser::TPointParser(TPointParser *this, const unsigned __int8 *a2, const unsigned __int8 *a3, const unsigned __int8 *a4, uint64_t a5, const unsigned __int8 *a6)
{
  _DWORD *exception;

  *(_QWORD *)this = a2;
  *((_QWORD *)this + 1) = a3;
  *((_QWORD *)this + 2) = a4;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_QWORD *)this + 8) = 0;
  if (&a4[a5] > a6)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E6176998;
    exception[2] = 4;
  }
}

void sub_1B09CC044(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void *v11;

  v11 = *(void **)(a10 + 48);
  if (v11)
  {
    *(_QWORD *)(a10 + 56) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(exception_object);
}

void *std::__allocate_at_least[abi:fe180100]<std::allocator<std::pair<unsigned char,IntPoint>>>(unint64_t a1)
{
  if (a1 >= 0x1555555555555556)
    std::__throw_bad_array_new_length[abi:fe180100]();
  return operator new(12 * a1);
}

void TSparseCoordsListPerComposits::AddCoords(TSparseCoordsListPerComposits *this, int a2, int a3)
{
  char *v6;
  char *v7;
  char *v8;
  unint64_t v10;
  _DWORD *v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  int v19;
  char *v20;

  v6 = *(char **)this;
  v7 = (char *)*((_QWORD *)this + 1);
  v8 = *(char **)this;
  if (*(char **)this != v7)
  {
    v8 = *(char **)this;
    while (*(_DWORD *)v8 != a2 || *((_DWORD *)v8 + 1) != a3)
    {
      v8 += 12;
      if (v8 == v7)
        goto LABEL_12;
    }
  }
  if (v8 == v7 || v8 == 0)
  {
LABEL_12:
    v10 = *((_QWORD *)this + 2);
    if ((unint64_t)v7 >= v10)
    {
      v12 = 0xAAAAAAAAAAAAAAABLL * ((v7 - v6) >> 2) + 1;
      if (v12 > 0x1555555555555555)
        std::vector<char,TInlineBufferAllocator<char,1024ul>>::__throw_length_error[abi:fe180100]();
      if (0x5555555555555556 * ((uint64_t)(v10 - (_QWORD)v6) >> 2) > v12)
        v12 = 0x5555555555555556 * ((uint64_t)(v10 - (_QWORD)v6) >> 2);
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - (_QWORD)v6) >> 2) >= 0xAAAAAAAAAAAAAAALL)
        v13 = 0x1555555555555555;
      else
        v13 = v12;
      if (v13)
      {
        v14 = (char *)*((_QWORD *)this + 9);
        v15 = &v14[12 * v13];
        if (v15 <= (char *)this + 72)
        {
          *((_QWORD *)this + 9) = v15;
        }
        else
        {
          if (v13 > 0x1555555555555555)
            std::__throw_bad_array_new_length[abi:fe180100]();
          v14 = (char *)operator new(12 * v13);
        }
      }
      else
      {
        v14 = 0;
      }
      v16 = &v14[4 * ((v7 - v6) >> 2)];
      *(_DWORD *)v16 = a2;
      *((_DWORD *)v16 + 1) = a3;
      *((_DWORD *)v16 + 2) = 0;
      v17 = v16;
      if (v6 != v7)
      {
        do
        {
          v18 = *(_QWORD *)(v7 - 12);
          v7 -= 12;
          v19 = *((_DWORD *)v7 + 2);
          *(_QWORD *)(v17 - 12) = v18;
          v17 -= 12;
          *((_DWORD *)v17 + 2) = v19;
        }
        while (v7 != v6);
        v6 = *(char **)this;
        v10 = *((_QWORD *)this + 2);
      }
      v11 = v16 + 12;
      *(_QWORD *)this = v17;
      *((_QWORD *)this + 1) = v16 + 12;
      *((_QWORD *)this + 2) = &v14[12 * v13];
      if (v6)
      {
        v20 = (char *)this + 72;
        if ((char *)this + 24 <= v6 && v20 > v6)
        {
          if (v10 == *(_QWORD *)v20)
            *(_QWORD *)v20 = v6;
        }
        else
        {
          operator delete(v6);
        }
      }
    }
    else
    {
      *(_DWORD *)v7 = a2;
      *((_DWORD *)v7 + 1) = a3;
      v11 = v7 + 12;
      *((_DWORD *)v7 + 2) = 0;
    }
    *((_QWORD *)this + 1) = v11;
  }
}

void std::vector<TCoordPairs,TInlineBufferAllocator<TCoordPairs,4ul>>::__destroy_vector::operator()[abi:fe180100](uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  BOOL v4;
  BOOL v5;

  v2 = *(_QWORD **)a1;
  if (v2)
  {
    *(_QWORD *)(a1 + 8) = v2;
    v3 = (_QWORD *)(a1 + 72);
    if (a1 + 24 <= (unint64_t)v2)
    {
      v4 = v3 >= v2;
      v5 = v3 == v2;
    }
    else
    {
      v4 = 0;
      v5 = 0;
    }
    if (!v5 && v4)
    {
      if (*(_QWORD *)(a1 + 16) == *(_QWORD *)(a1 + 72))
        *v3 = v2;
    }
    else
    {
      operator delete(v2);
    }
  }
}

float64x2_t TTrueTypeTransformedQuadOutlineContext::ConcatMatricesAndGetTransformFunction(TTrueTypeTransformedQuadOutlineContext *this, const TTrueTypeQuadOutlineContext *a2, int a3)
{
  int v6;
  float64x2_t result;
  void *v8;
  int v9;
  int v10;
  float64x2_t v11;
  double v12;
  double v13;
  float64x2_t v14;

  v6 = (*(uint64_t (**)(const TTrueTypeQuadOutlineContext *))(*(_QWORD *)a2 + 32))(a2);
  if (v6 <= a3)
  {
    *((_DWORD *)this + 34) = a3;
    v8 = TTrueTypeTransformedQuadOutlineContext::AffineTransformPoint;
    if (a3 == 2)
    {
      v8 = TTrueTypeTransformedQuadOutlineContext::ScaleTransformPoint;
      v10 = 2;
    }
    else
    {
      v10 = a3;
    }
    if (a3 == 1)
    {
      v8 = TTrueTypeTransformedQuadOutlineContext::TranslateTransformPoint;
      v9 = 1;
    }
    else
    {
      v9 = v10;
    }
  }
  else
  {
    *((_DWORD *)this + 34) = v6;
    v8 = TTrueTypeTransformedQuadOutlineContext::ScaleTransformPoint;
    if (v6 != 2)
      v8 = TTrueTypeTransformedQuadOutlineContext::AffineTransformPoint;
    v9 = v6;
  }
  *((_QWORD *)this + 15) = v8;
  *((_QWORD *)this + 16) = 0;
  if (v6)
  {
    if (v9 == 3)
    {
      v11 = *(float64x2_t *)((char *)a2 + 88);
      *(float64x2_t *)((char *)this + 72) = vmlaq_n_f64(vmulq_n_f64(v11, *((double *)this + 10)), *(float64x2_t *)((char *)a2 + 72), *((double *)this + 9));
      v12 = *((double *)this + 13);
      v13 = *((double *)this + 14);
      v14 = *(float64x2_t *)((char *)a2 + 72);
      *(float64x2_t *)((char *)this + 88) = vmlaq_n_f64(vmulq_n_f64(v11, *((double *)this + 12)), v14, *((double *)this + 11));
      result = vaddq_f64(*(float64x2_t *)((char *)a2 + 104), vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)((char *)a2 + 88), v13), v14, v12));
LABEL_17:
      *(float64x2_t *)((char *)this + 104) = result;
      return result;
    }
    if (v9 != 2)
    {
      if (v9 != 1)
        return result;
      result = vaddq_f64(*(float64x2_t *)((char *)a2 + 104), *(float64x2_t *)((char *)this + 104));
      goto LABEL_17;
    }
    *((double *)this + 9) = *((double *)a2 + 9) * *((double *)this + 9);
    *((double *)this + 12) = *((double *)a2 + 12) * *((double *)this + 12);
    result.f64[0] = *((float64_t *)a2 + 9);
    result.f64[1] = *((float64_t *)a2 + 12);
    *(float64x2_t *)((char *)this + 104) = vmlaq_f64(*(float64x2_t *)((char *)a2 + 104), result, *(float64x2_t *)((char *)this + 104));
  }
  return result;
}

void TTrueTypeTransformedQuadOutlineContext::TTrueTypeTransformedQuadOutlineContext(TTrueTypeTransformedQuadOutlineContext *this, const TTrueTypeQuadOutlineContext *a2, double a3, double a4, double a5, double a6, int a7, int a8, int a9)
{
  uint64_t v9;
  double v10;

  v9 = *((_QWORD *)a2 + 1);
  *((_BYTE *)this + 64) = 0;
  *(_QWORD *)this = &off_1E61C9070;
  *((_QWORD *)this + 1) = v9;
  *((double *)this + 9) = a3;
  *((double *)this + 10) = a4;
  *((double *)this + 11) = a5;
  *((double *)this + 12) = a6;
  *((double *)this + 13) = (double)a7;
  *((double *)this + 14) = (double)a8;
  if (a9)
  {
    if (a3 == 0.0)
    {
      v10 = fabs(a4);
    }
    else if (a4 == 0.0)
    {
      v10 = fabs(a3);
    }
    else
    {
      v10 = sqrt(a4 * a4 + a3 * a3);
    }
    *((double *)this + 13) = v10 * (double)a7;
    *((double *)this + 14) = fabs((a4 * a5 + a3 * a6) / v10) * (double)a8;
  }
  TTrueTypeTransformedQuadOutlineContext::ConcatMatricesAndGetTransformFunction(this, a2, 3);
}

void TTrueTypeTransformedQuadOutlineContext::TTrueTypeTransformedQuadOutlineContext(TTrueTypeTransformedQuadOutlineContext *this, const TTrueTypeQuadOutlineContext *a2, double a3, double a4, int a5, int a6, int a7)
{
  uint64_t v7;

  v7 = *((_QWORD *)a2 + 1);
  *((_BYTE *)this + 64) = 0;
  *(_QWORD *)this = &off_1E61C9070;
  *((_QWORD *)this + 1) = v7;
  *((double *)this + 9) = a3;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = 0;
  *((double *)this + 12) = a4;
  *((double *)this + 13) = (double)a5;
  *((double *)this + 14) = (double)a6;
  if (a7)
  {
    *((double *)this + 13) = fabs(a3) * (double)a5;
    *((double *)this + 14) = fabs(a3 * a4 / a3) * (double)a6;
  }
  TTrueTypeTransformedQuadOutlineContext::ConcatMatricesAndGetTransformFunction(this, a2, 2);
}

void TTrueTypeTransformedQuadOutlineContext::TTrueTypeTransformedQuadOutlineContext(TTrueTypeTransformedQuadOutlineContext *this, const TTrueTypeQuadOutlineContext *a2, double a3, int a4, int a5, int a6)
{
  uint64_t v6;
  double v7;

  v6 = *((_QWORD *)a2 + 1);
  *((_BYTE *)this + 64) = 0;
  *(_QWORD *)this = &off_1E61C9070;
  *((_QWORD *)this + 1) = v6;
  *((double *)this + 9) = a3;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = 0;
  *((double *)this + 12) = a3;
  *((double *)this + 13) = (double)a4;
  *((double *)this + 14) = (double)a5;
  if (a6)
  {
    v7 = fabs(a3);
    *((double *)this + 13) = v7 * (double)a4;
    *((double *)this + 14) = v7 * (double)a5;
  }
  TTrueTypeTransformedQuadOutlineContext::ConcatMatricesAndGetTransformFunction(this, a2, 2);
}

uint64_t DecomposeMapping(uint64_t a1, int a2)
{
  int64x2_t v2;
  float64x2_t v3;
  signed int v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  int64x2_t v8;
  float64x2_t v9;
  int32x2_t v10;
  int v11;
  int v12;
  float64x2_t v13;

  v2.i64[0] = (int)*(_QWORD *)a1;
  v2.i64[1] = (int)HIDWORD(*(_QWORD *)a1);
  v3 = vcvtq_f64_s64(v2);
  v4 = sqrt(vaddvq_f64(vmulq_f64(v3, v3)));
  v5 = 1;
  if (v4)
  {
    v6 = (double)v4;
    v7 = *(_QWORD *)(a1 + 12);
    v8.i64[0] = (int)v7;
    v8.i64[1] = SHIDWORD(v7);
    v9 = vcvtq_f64_s64(v8);
    v10 = vmovn_s64(vcvtq_s64_f64(vdivq_f64(vmulq_f64((float64x2_t)vextq_s8((int8x16_t)v9, (int8x16_t)v9, 8uLL), v3), (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)v4), 0))));
    v11 = v10.i32[0] - v10.i32[1];
    if (v10.i32[0] != v10.i32[1])
    {
      if (v11 < 0)
        v11 = v10.i32[1] - v10.i32[0];
      if ((__int128 *)(a1 + 36) != &identityMatrix)
      {
        *(_OWORD *)(a1 + 36) = identityMatrix;
        *(_OWORD *)(a1 + 52) = unk_1B0AAC51C;
        *(_DWORD *)(a1 + 68) = 0x40000000;
      }
      if (a2)
      {
        v4 = (v4 + 0x8000) & 0xFFFF0000;
        v12 = (v11 + 0x8000) & 0x7FFF0000;
      }
      else
      {
        v12 = v11;
      }
      *(_DWORD *)(a1 + 36) = v4;
      *(_DWORD *)(a1 + 52) = v12;
      if ((__int128 *)(a1 + 72) != &identityMatrix)
      {
        *(_OWORD *)(a1 + 72) = identityMatrix;
        *(_OWORD *)(a1 + 88) = unk_1B0AAC51C;
        *(_DWORD *)(a1 + 104) = 0x40000000;
      }
      v5 = 0;
      v13 = (float64x2_t)vdupq_n_s64(0x3EF0000000000000uLL);
      *(int32x2_t *)(a1 + 72) = vmovn_s64(vcvtq_n_s64_f64(vdivq_f64(vmulq_f64(v3, v13), (float64x2_t)vdupq_lane_s64(COERCE__INT64(v6 * 0.0000152587891), 0)), 0x10uLL));
      *(int32x2_t *)(a1 + 84) = vmovn_s64(vcvtq_n_s64_f64(vdivq_f64(vmulq_f64(v9, v13), (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)v11 * 0.0000152587891), 0)), 0x10uLL));
    }
  }
  return v5;
}

__n128 InvertRemainder(uint64_t a1, int *a2)
{
  signed int v2;
  signed int v3;
  BOOL v4;
  int v5;
  int v6;
  __n128 result;
  __int128 v8;

  v2 = vcvtd_n_s64_f64((double)*a2 * 0.0000152587891 * ((double)a2[4] * 0.0000152587891), 0x10uLL);
  v3 = vcvtd_n_s64_f64((double)a2[3] * 0.0000152587891 * ((double)a2[1] * 0.0000152587891), 0x10uLL);
  v4 = v2 < v3;
  if (v2 < v3)
    v5 = 1;
  else
    v5 = -1;
  if (v4)
    v6 = -1;
  else
    v6 = 1;
  result = *(__n128 *)a2;
  v8 = *((_OWORD *)a2 + 1);
  *(_DWORD *)(a1 + 32) = a2[8];
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v8;
  *(_DWORD *)a1 = v6 * a2[4];
  *(_DWORD *)(a1 + 12) = v5 * a2[3];
  *(_DWORD *)(a1 + 4) = v5 * a2[1];
  *(_DWORD *)(a1 + 16) = *a2 * v6;
  return result;
}

uint64_t TType1CIDFont::GetPSStreamType(TType1CIDFont *this, int a2)
{
  int v2;
  _WORD *exception;

  if ((a2 & 4) != 0)
  {
    v2 = 4;
  }
  else
  {
    if ((a2 & 0x100) == 0)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)exception = &off_1E61B2D68;
      exception[4] = 10;
    }
    v2 = 256;
  }
  return v2 | a2 & 0xFFFFF000;
}

uint64_t TType1CIDFont::CheckFontProtectionAndStreamType(TType1CIDFont *this, const unsigned int *a2, uint64_t a3)
{
  uint64_t v5;
  unsigned int v6;
  int8x8_t v7;
  int v8;
  int v9;
  unsigned int v10;
  _WORD *exception;

  v5 = (*(uint64_t (**)(TType1CIDFont *, uint64_t))(*(_QWORD *)this + 48))(this, a3);
  if ((v5 & 0x100) != 0)
  {
    v6 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 168))(*((_QWORD *)this + 4));
    v8 = v6 >= 0xFFFF ? 0xFFFF : v6;
    if ((*(_BYTE *)(*((_QWORD *)this + 4) + 176) & 0x40) != 0)
    {
      if (!a2)
        goto LABEL_14;
      v9 = 0;
      if (v8)
      {
        v10 = (v8 + 31) >> 5;
        do
        {
          if (*a2)
          {
            v7.i32[0] = *a2;
            v7 = vcnt_s8(v7);
            v7.i16[0] = vaddlv_u8((uint8x8_t)v7);
            v9 += v7.i32[0];
          }
          ++a2;
          --v10;
        }
        while (v10);
      }
      if (v9 == v8)
      {
LABEL_14:
        exception = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)exception = &off_1E61B2D68;
        exception[4] = 10;
      }
    }
  }
  return v5;
}

uint64_t TType1CIDFont::StreamPSEncoding(TType1CIDFont *a1, unsigned int *a2, uint64_t a3, char a4, _DWORD *a5, uint64_t a6)
{
  uint64_t v11;
  __int32 *v12;
  __int128 v13;
  uint64_t v14;
  unsigned __int16 *v15;
  uint64_t result;
  _WORD *exception;
  unint64_t v18;
  unsigned int v19[4];
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  if ((a4 & 1) != 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E61B2D68;
    exception[4] = 6;
  }
  v11 = TType1CIDFont::CheckFontProtectionAndStreamType(a1, 0, *a5);
  *a5 = v11;
  v18 = 0xAAAAAAAAAAAAAAAALL;
  (*(void (**)(unint64_t *__return_ptr, TType1CIDFont *, uint64_t, uint64_t))(*(_QWORD *)a1 + 240))(&v18, a1, v11, a3);
  v12 = (__int32 *)v18;
  *(_QWORD *)&v13 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v13 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v49 = v13;
  v50 = v13;
  v47 = v13;
  v48 = v13;
  v45 = v13;
  v46 = v13;
  v43 = v13;
  v44 = v13;
  v41 = v13;
  v42 = v13;
  v39 = v13;
  v40 = v13;
  v37 = v13;
  v38 = v13;
  v35 = v13;
  v36 = v13;
  v33 = v13;
  v34 = v13;
  v31 = v13;
  v32 = v13;
  v29 = v13;
  v30 = v13;
  v27 = v13;
  v28 = v13;
  v25 = v13;
  v26 = v13;
  v23 = v13;
  v24 = v13;
  v21 = v13;
  v22 = v13;
  *(_OWORD *)v19 = v13;
  v20 = v13;
  if (!a2)
  {
    LODWORD(v14) = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 4) + 168))(*((_QWORD **)a1 + 4));
    if (v14 >= 0xFFFF)
      v14 = 0xFFFFLL;
    else
      v14 = v14;
    a2 = v19;
    TType1PSFont::SetEncoding(v14, v12, v19, v15);
  }
  (*(void (**)(TType1CIDFont *, unsigned int *, uint64_t, uint64_t))(*(_QWORD *)a1 + 256))(a1, a2, 1, a6);
  result = v18;
  v18 = 0;
  if (result)
    return MEMORY[0x1B5E0CD14](result, 0x1000C8052888210);
  return result;
}

void sub_1B09CCA08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  _Unwind_Resume(exception_object);
}

void TType1CIDFont::StreamEncoding(_QWORD **a1, uint64_t a2, char a3, uint64_t a4)
{
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  void *__p[2];
  __int128 v13;
  __int128 v14;
  unint64_t v15;
  unsigned __int8 v16[16];
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v15 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v6 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v13 = v6;
  v14 = v6;
  *(_OWORD *)__p = v6;
  TStreamEncodingContext::TStreamEncodingContext((uint64_t)__p, a4, a3);
  v7 = 0;
  *(_QWORD *)&v8 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v30 = v8;
  v31 = v8;
  v28 = v8;
  v29 = v8;
  v26 = v8;
  v27 = v8;
  v24 = v8;
  v25 = v8;
  v22 = v8;
  v23 = v8;
  v20 = v8;
  v21 = v8;
  v18 = v8;
  v19 = v8;
  *(_OWORD *)v16 = v8;
  v17 = v8;
  do
  {
    v9 = *(unsigned __int16 *)(a2 + 2 * v7);
    if ((unsigned __int16)(v9 + 1) >= 2u)
    {
      v10 = (*(uint64_t (**)(_QWORD *))(*a1[4] + 168))(a1[4]);
      v11 = v10 >= 0xFFFF ? 0xFFFF : v10;
      if (v9 < v11)
      {
        ((void (*)(_QWORD **, uint64_t, unsigned __int8 *))(*a1)[29])(a1, v9, v16);
        TStreamEncodingContext::AddEncodingText((uint64_t)__p, v7, (const char *)v16);
      }
    }
    ++v7;
  }
  while ((_DWORD)v7 != 256);
  TStreamEncodingContext::DumpPSEncoding((TStreamEncodingContext *)__p);
  __p[0] = &off_1E61B6398;
  if (__p[1])
  {
    *(void **)&v13 = __p[1];
    operator delete(__p[1]);
  }
}

void sub_1B09CCB78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t TType1CIDFont::SetupGlyphBits@<X0>(uint64_t this@<X0>, const unsigned int *a2@<X2>, _QWORD *a3@<X8>)
{
  const void **v5;
  unsigned int v6;
  _DWORD *v7;
  unsigned int v8;
  unsigned __int16 v9;

  if (a2
    && ((v5 = (const void **)this,
         this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(this + 32) + 168))(*(_QWORD *)(this + 32)),
         this >= 0xFFFF)
      ? (v6 = 0xFFFF)
      : (v6 = this),
        v6))
  {
    v7 = (_DWORD *)operator new[]();
    memcpy(v7, a2, ((v6 + 31) >> 3) & 0x3FFC);
    *v7 |= 0x80000000;
    this = (uint64_t)TType1CIDFont::GetCIDFont(v5);
    v8 = *(unsigned __int16 *)(this + 16);
    if (v8 < v6)
    {
      do
      {
        if (((v7[v8 >> 5] << v8) & 0x80000000) != 0)
        {
          v9 = v8;
          this = TType1CIDFont::GetAltGlyphFDIndex(v5, &v9);
          *(_DWORD *)((char *)v7 + (((unint64_t)v9 >> 3) & 0x1FFC)) |= 1 << ~(_BYTE)v9;
        }
        ++v8;
      }
      while (v6 != (unsigned __int16)v8);
    }
  }
  else
  {
    v7 = 0;
  }
  *a3 = v7;
  return this;
}

void sub_1B09CCCBC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E0CD14](v1, 0x1000C8052888210);
  _Unwind_Resume(a1);
}

void *TType1CIDFont::GetCIDFont(const void **this)
{
  void *result;

  if (!result)
    __cxa_bad_cast();
  return result;
}

BOOL TType1CIDFont::GetNextZapCIDMap(const void **this, const TFontObjectSurrogate *a2, const unsigned int *a3, unsigned __int16 *a4, unsigned int *a5, unsigned int *a6)
{
  int v10;
  int v11;
  unsigned __int8 *v12;
  int v13;
  unsigned int v14;
  unsigned __int16 v15;
  unsigned __int16 v16;
  __int128 v17;
  uint64_t v18;
  unsigned int *v19;
  _OWORD v23[2];
  TType1CIDFont *v24[2];
  unint64_t v25;

  v10 = *((_DWORD *)TType1CIDFont::GetCIDFont(this) + 5);
  v11 = *((_DWORD *)TType1CIDFont::GetCIDFont(this) + 8) + v10;
  v12 = (unsigned __int8 *)*((unsigned int *)TType1CIDFont::GetCIDFont(this) + 2);
  v13 = *((_DWORD *)TType1CIDFont::GetCIDFont(this) + 3);
  v14 = *((unsigned __int16 *)TType1CIDFont::GetCIDFont(this) + 8);
  v15 = *a4;
  if (v14 <= (unsigned __int16)(*a4 + 1))
    v16 = v15 + 1;
  else
    v16 = v14;
  while (v14 > ++v15)
  {
    if (((a3[v15 >> 5] << v15) & 0x80000000) == 0)
    {
      *a4 = v15;
      v25 = 0xAAAAAAAAAAAAAAAALL;
      *(_QWORD *)&v17 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v17 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v23[1] = v17;
      *(_OWORD *)v24 = v17;
      v23[0] = v17;
      v18 = (*((uint64_t (**)(const void **))*this + 15))(this);
      TFontObjectTable::TFontObjectTable((TFontObjectTable *)v23, a2, v18, v11 + (v13 + (_DWORD)v12) * *a4, 2 * (v13 + (_DWORD)v12));
      TType1CIDFont::GetCIDFDIndex(v24[1], v12, v13, a5, a6, v19);
      *((_QWORD *)&v23[0] + 1) = &off_1E6176770;
      TDataReference::DucRefCount((TDataReference *)((char *)v23 + 8));
      return v14 > v15;
    }
  }
  *a4 = v16;
  return v14 > v15;
}

uint64_t TType1CIDFont::GetMappedFDIndex(const void **this, unsigned __int16 *a2)
{
  unsigned int v4;
  uint64_t AltGlyphFDIndex;
  uint64_t v6;
  _WORD *exception;

  v4 = *a2;
  if (v4 >= *((unsigned __int16 *)TType1CIDFont::GetCIDFont(this) + 8))
    AltGlyphFDIndex = TType1CIDFont::GetAltGlyphFDIndex(this, a2);
  else
    AltGlyphFDIndex = (*((uint64_t (**)(const void **, _QWORD))*this + 43))(this, *a2);
  v6 = AltGlyphFDIndex;
  if ((AltGlyphFDIndex & 0x80000000) != 0
    || *((unsigned __int16 *)TType1CIDFont::GetCIDFont(this) + 9) <= (unsigned __int16)AltGlyphFDIndex)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E61B2D68;
    exception[4] = 5;
  }
  return v6;
}

uint64_t TType1CIDFont::GetFontDataLength(TType1CIDFont *this, unsigned int *a2, unsigned int *a3)
{
  __int128 v6;
  const TFontObjectSurrogate *v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD v11[2];
  __int128 v12;
  unint64_t v13;

  v13 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v6 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v11[1] = v6;
  v12 = v6;
  v11[0] = v6;
  v7 = (const TFontObjectSurrogate *)(*(uint64_t (**)(TType1CIDFont *))(*(_QWORD *)this + 216))(this);
  v8 = (*(uint64_t (**)(TType1CIDFont *))(*(_QWORD *)this + 120))(this);
  TFontObjectTable::TFontObjectTable((TFontObjectTable *)v11, v7, v8, 0, 22);
  v9 = *((_QWORD *)&v12 + 1);
  *a2 = bswap32(*(_DWORD *)(*((_QWORD *)&v12 + 1) + 12));
  *a3 = bswap32(*(_DWORD *)(v9 + 16));
  LODWORD(a3) = *(_DWORD *)(v9 + 8);
  *((_QWORD *)&v11[0] + 1) = &off_1E6176770;
  TDataReference::DucRefCount((TDataReference *)((char *)v11 + 8));
  return bswap32(a3);
}

uint64_t TType1CIDFont::GetFontDataHeaderSize(TType1CIDFont *this)
{
  return 22;
}

uint64_t TType1CIDFont::GetLocalSubrArrayAndObjectData(TType1CIDFont *this, __int16 a2, unsigned __int16 *a3, __int16 *a4, const unsigned __int8 **a5, const unsigned __int8 **a6, const unsigned __int8 **a7, const unsigned __int8 **a8)
{
  *a3 = 0;
  *a4 = 0;
  *a7 = 0;
  *a5 = 0;
  *a8 = 0;
  *a6 = 0;
  return 0;
}

void TCIDASCII85EncodableStreamingContext::~TCIDASCII85EncodableStreamingContext(TCIDASCII85EncodableStreamingContext *this)
{
  void **v2;

  *(_QWORD *)this = off_1E61C90D8;
  v2 = (void **)((char *)this + 696);
  std::vector<CompFDInfo>::__destroy_vector::operator()[abi:fe180100](&v2);
  TBufferedCharStringStreamingContext::~TBufferedCharStringStreamingContext(this);
}

{
  void **v2;

  *(_QWORD *)this = off_1E61C90D8;
  v2 = (void **)((char *)this + 696);
  std::vector<CompFDInfo>::__destroy_vector::operator()[abi:fe180100](&v2);
  TBufferedCharStringStreamingContext::~TBufferedCharStringStreamingContext(this);
  MEMORY[0x1B5E0CD38]();
}

uint64_t TCIDASCII85EncodableStreamingContext::BufferString(uint64_t this, const unsigned __int8 *a2, unsigned int a3)
{
  unsigned int v3;
  const unsigned __int8 *v4;
  _DWORD *v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  uint64_t i;
  unsigned int v10;
  unsigned __int8 v11[7];
  unsigned __int8 v12;

  v3 = a3;
  v4 = a2;
  v5 = (_DWORD *)this;
  if (!*(_BYTE *)(this + 728))
    return TBufferedStreamingContext::BufferString(this, a2, a3);
  if (a3)
  {
    v6 = *(_DWORD *)(this + 740);
    v7 = *(_DWORD *)(this + 732);
    do
    {
      v8 = *v4++;
      v6 = v8 | (v6 << 8);
      v5[185] = v6;
      v5[183] = ++v7;
      if (v7 >= 4)
      {
        memset(v11, 170, 5);
        for (i = 4; i != -1; --i)
        {
          v11[i] = v6 % 0x55 + 33;
          v6 /= 0x55u;
        }
        this = TBufferedStreamingContext::BufferString((uint64_t)v5, v11, 5uLL);
        v10 = v5[184] + 5;
        v5[184] = v10;
        if (v10 >= 0x50)
        {
          v12 = 13;
          this = TBufferedStreamingContext::BufferString((uint64_t)v5, &v12, 1uLL);
          v5[184] = 0;
        }
        v7 = 0;
        v6 = 0;
        v5[183] = 0;
        v5[185] = 0;
      }
      --v3;
    }
    while (v3);
  }
  return this;
}

unsigned __int8 *MakeFontNameFromID(unsigned __int8 *a1, unsigned __int8 *a2, unsigned int a3)
{
  unsigned int v3;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned __int8 *v9;
  unsigned __int8 v10;
  const unsigned __int8 *v11;
  unsigned __int8 v12;
  unsigned int v13;
  unsigned __int8 v14;
  uint64_t v15;

  v3 = a3;
  v5 = *a2;
  if (v5 >= 8 && a2[7] == 43)
  {
    v6 = 6;
    while (a2[v6] - 65 < 0x1A)
    {
      if (!(_DWORD)--v6)
      {
        v7 = 1;
        do
          LODWORD(v6) = a2[v7++] + 26 * v6 - 65;
        while ((_DWORD)v7 != 7);
        v3 = a3 + 32 * v6;
        v8 = v5 + 1;
        if ((v8 & 0x100) == 0)
        {
          v9 = a1;
          do
          {
            --v8;
            v10 = *a2++;
            *v9++ = v10;
          }
          while ((_BYTE)v8);
        }
        goto LABEL_15;
      }
    }
  }
  a1[7] = 43;
  *a1 = 7;
  v13 = *a2;
  v11 = a2 + 1;
  v12 = v13;
  v14 = v13 + 7;
  if (v13 >= 0xF9)
  {
    v14 = -1;
    v12 = -8;
  }
  *a1 = v14;
  memcpy(a1 + 8, v11, v12);
LABEL_15:
  v15 = 6;
  do
  {
    a1[v15] = v3 % 0x1A + 65;
    v3 /= 0x1Au;
    --v15;
  }
  while (v15);
  a1[*a1 + 1] = 0;
  return a1;
}

uint64_t TType1CIDFont::GetEmbeddedCharMetrics(TType1CIDFont *this, __int16 a2, const unsigned __int8 *a3, int a4, int *a5, int *a6)
{
  int v6;
  const unsigned __int8 *v7;
  const unsigned __int8 *v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  const unsigned __int8 *v12;
  uint64_t v13;
  _WORD *exception;
  __int128 v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v16 = 0uLL;
  if (!a4)
    return 0;
  v6 = 0;
  v7 = a3;
  v8 = &a3[a4];
  while (1)
  {
    v10 = *v7++;
    v9 = v10;
    if (v10 == 12)
    {
      if (*v7 == 7)
      {
        if ((__int16)v6 <= 3)
        {
          *a5 = *((_DWORD *)&v16 + (__int16)v6 - 2);
          v13 = (__int16)v6 - 4;
          goto LABEL_28;
        }
LABEL_30:
        exception = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)exception = &off_1E61B2D68;
        exception[4] = 5;
      }
      return 0;
    }
    if (v9 == 13)
      break;
    if (v9 < 0x20)
      return 0;
    if ((__int16)v6 >= 4)
    {
      *(_QWORD *)&v16 = *(_QWORD *)((char *)&v16 + 4);
      DWORD2(v16) = HIDWORD(v16);
      --v6;
    }
    if (v9 > 0xF6)
    {
      if (v9 > 0xFA)
      {
        if (v9 == 255)
        {
          if (a3[1])
          {
            if (a3[1] != 255 || (a3[2] + 1) > 1u)
              goto LABEL_30;
            v12 = a3 + 3;
          }
          else
          {
            v12 = a3 + 2;
          }
          v7 = v12 + 2;
          v11 = (*v12 << 24) | (v12[1] << 16);
        }
        else
        {
          v7 = a3 + 2;
          v11 = -90963968 - ((a3[1] << 16) | (v9 << 24));
        }
      }
      else
      {
        v7 = a3 + 2;
        v11 = ((a3[1] << 16) | (v9 << 24)) + 158072832;
      }
    }
    else
    {
      v11 = (v9 << 16) - 9109504;
    }
    *((_DWORD *)&v16 + (__int16)v6++) = v11;
    a3 = v7;
    if (v7 >= v8)
      return 0;
  }
  if ((__int16)v6 < 2)
    goto LABEL_30;
  *a5 = *((_DWORD *)&v16 + (unsigned __int16)(v6 - 1));
  v13 = (unsigned __int16)(v6 - 2);
LABEL_28:
  *a6 = *((_DWORD *)&v16 + v13);
  return 1;
}

uint64_t TType1CIDFont::StreamCharProcs(const void **a1, uint64_t a2, TBufferedStreamingContext *this)
{
  __int32 *v5;
  int v6;
  int8x8_t v7;
  unsigned int v8;
  unsigned int v9;
  __int32 *v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  int v16;
  _BOOL4 v17;
  int v18;
  BOOL v19;
  int v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  signed __int16 v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int *v28;
  const char *v29;
  const char *v30;
  char *v31;
  unint64_t v32;
  _WORD *exception;
  __int32 *v35;
  unsigned __int8 *v36;
  unsigned __int8 *v37;
  int v38;
  unsigned __int8 v40[4];
  unsigned int v41;
  unsigned int v42;
  int v43;
  int v44;
  int v45;
  _DWORD v46[6];
  unsigned __int16 v47;
  _OWORD v48[16];
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  TBufferedStreamingContext::BufferString((uint64_t)this, (const unsigned __int8 *)"/CharProcs ", 0xBuLL);
  v5 = (__int32 *)*((_QWORD *)this + 2);
  v6 = (*((uint64_t (**)(const void **))*a1 + 51))(a1);
  if (v5)
  {
    v8 = v6 + 31;
    if ((v6 + 31) >= 0x20)
    {
      v6 = 0;
      v9 = v8 >> 5;
      v10 = v5;
      do
      {
        if (*v10)
        {
          v7.i32[0] = *v10;
          v7 = vcnt_s8(v7);
          v7.i16[0] = vaddlv_u8((uint8x8_t)v7);
          v6 += v7.i32[0];
        }
        ++v10;
        --v9;
      }
      while (v9);
    }
    else
    {
      v6 = 0;
    }
  }
  TBufferedStreamingContext::BufferInt(this, v6 + 1);
  TBufferedStreamingContext::BufferString((uint64_t)this, (const unsigned __int8 *)" dict\r", 6uLL);
  v11 = (*(uint64_t (**)(const void *))(*(_QWORD *)a1[4] + 168))(a1[4]);
  if (v11 >= 0xFFFF)
    v12 = 0xFFFF;
  else
    v12 = v11;
  v38 = v12;
  if (v12)
  {
    v13 = 0;
    v37 = (unsigned __int8 *)this + 66;
    v35 = v5;
    v36 = (unsigned __int8 *)this + 67;
    while (v5 && ((v5[v13 >> 5] << v13) & 0x80000000) == 0)
    {
LABEL_67:
      if (++v13 == v38)
        goto LABEL_68;
    }
    v47 = v13;
    memset(v46, 170, sizeof(v46));
    v44 = -1431655766;
    v45 = -1431655766;
    v43 = -1431655766;
    (*((void (**)(const void **, unsigned __int16 *, _DWORD *, _DWORD *, _DWORD *, _DWORD *, _DWORD *, _DWORD *, int *, int *, int *))*a1
     + 45))(a1, &v47, &v46[5], &v46[4], &v46[3], &v46[2], &v46[1], v46, &v44, &v45, &v43);
    v41 = -1431655766;
    v42 = -1431655766;
    v14 = (*((uint64_t (**)(const void **, _QWORD, unsigned int *, unsigned int *))*a1 + 42))(a1, v47, &v42, &v41);
    v15 = v44;
    v16 = v46[5];
    v17 = v46[5] < 2097152000;
    if (v44 <= 2097151999 && v46[5] >= 2097152000)
      v46[5] = 0x10000;
    v18 = v46[4];
    if (a2)
      v19 = v46[4] == 0;
    else
      v19 = 0;
    v20 = !v19;
    if (v16 >= 2097152000 && v20)
    {
      *(_QWORD *)&v48[0] = 0xAAAAAAAAAAAAAAAALL;
      (*((void (**)(_OWORD *__return_ptr, const void **, uint64_t, _QWORD, _QWORD))*a1 + 44))(v48, a1, v14, v42, v41);
      *(_DWORD *)v40 = -1431655766;
      if (((*((uint64_t (**)(const void **, uint64_t, _QWORD, _QWORD, _DWORD *, unsigned __int8 *))*a1 + 52))(a1, v14, *(_QWORD *)&v48[0], v41, &v46[5], v40) & 1) == 0)v46[5] = *(_DWORD *)(*((_QWORD *)TType1CIDFont::GetCIDFont(a1) + 7) + 488 * (int)v14 + 156);
      v21 = *(_QWORD *)&v48[0];
      *(_QWORD *)&v48[0] = 0;
      if (v21)
        MEMORY[0x1B5E0CD14](v21, 0x1000C8077774924);
      v17 = 1;
    }
    TBufferedStreamingContext::BufferString((uint64_t)this, (const unsigned __int8 *)"dup ", 4uLL);
    *(_QWORD *)&v22 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v22 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v48[14] = v22;
    v48[15] = v22;
    v48[12] = v22;
    v48[13] = v22;
    v48[10] = v22;
    v48[11] = v22;
    v48[8] = v22;
    v48[9] = v22;
    v48[6] = v22;
    v48[7] = v22;
    v48[5] = v22;
    v48[3] = v22;
    v48[4] = v22;
    v48[1] = v22;
    v48[2] = v22;
    v48[0] = v22;
    (*((void (**)(const void **, _QWORD, _OWORD *))*a1 + 29))(a1, (unsigned __int16)v13, v48);
    TBufferedStreamingContext::BufferString((uint64_t)this, (const unsigned __int8 *)v48 + 1, LOBYTE(v48[0]));
    TBufferedStreamingContext::BufferString((uint64_t)this, (const unsigned __int8 *)" {", 2uLL);
    if (a2)
    {
      v23 = a2 + 16 * (int)v14;
      if (!*(_WORD *)(v23 + 6))
        goto LABEL_69;
      v24 = 0;
      v25 = *(_QWORD *)(a2 + 16 * (int)v14 + 8);
LABEL_34:
      v26 = 0;
      while (*(unsigned __int16 *)(v25 + 2 * v26) != v47)
      {
        if ((_DWORD)++v26 == 256)
        {
          ++v24;
          v25 += 512;
          if (*(unsigned __int16 *)(v23 + 6) <= v24)
          {
LABEL_69:
            exception = __cxa_allocate_exception(0x10uLL);
            *(_QWORD *)exception = &off_1E61B2D68;
            exception[4] = 5;
          }
          goto LABEL_34;
        }
      }
      v40[0] = v26;
      TBufferedStreamingContext::BufferPSString(this, v40, 1);
    }
    else
    {
      IntToPString(v47, v37);
      TBufferedStreamingContext::BufferString((uint64_t)this, v36, *((unsigned __int8 *)this + 66));
      v23 = 0;
      v24 = 0;
    }
    v27 = v15 < 2097152000 || v17;
    if (v27 == 1 && (TBufferedStreamingContext::BufferUnitEmFixed(this, v46[5]), v15 < 2097152000))
    {
      TBufferedStreamingContext::BufferUnitEmFixed(this, v44 + v46[1]);
      v28 = v46;
    }
    else
    {
      if (!v18)
      {
LABEL_50:
        v40[0] = 32;
        TBufferedStreamingContext::BufferString((uint64_t)this, v40, 1uLL);
        if (a2)
        {
          IntToPString((*(__int16 *)(v23 + 2) + v24), v37);
          TBufferedStreamingContext::BufferString((uint64_t)this, v36, *((unsigned __int8 *)this + 66));
        }
        else
        {
          v40[0] = 48;
          TBufferedStreamingContext::BufferString((uint64_t)this, v40, 1uLL);
        }
        v40[0] = 32;
        TBufferedStreamingContext::BufferString((uint64_t)this, v40, 1uLL);
        v29 = "\x03$SP";
        if (v17)
          v29 = "\x04$SPW";
        if (v18)
          v29 = "\x05$SPTW";
        if (v15 >= 2097152000)
          v30 = v29;
        else
          v30 = "\x03$RP";
        TBufferedStreamingContext::BufferString((uint64_t)this, (const unsigned __int8 *)v30 + 1, *(unsigned __int8 *)v30);
        if (v13)
          v31 = "} put\r";
        else
          v31 = "} 2 index /.notdef 2 index put put\r";
        if (v13)
          v32 = 6;
        else
          v32 = 35;
        TBufferedStreamingContext::BufferString((uint64_t)this, (const unsigned __int8 *)v31, v32);
        v5 = v35;
        goto LABEL_67;
      }
      v28 = &v46[4];
    }
    TBufferedStreamingContext::BufferUnitEmFixed(this, *v28);
    goto LABEL_50;
  }
LABEL_68:
  TBufferedStreamingContext::BufferString((uint64_t)this, " def\r", 5uLL);
  return TBufferedStreamingContext::BufferString((uint64_t)this, (const unsigned __int8 *)" end dup /FontName get exch definefont pop\r", 0x2BuLL);
}

void sub_1B09CDAA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  if (a25)
    MEMORY[0x1B5E0CD14](a25, 0x1000C8077774924);
  _Unwind_Resume(exception_object);
}

uint64_t TCFFFDSelect::GetStreamOutFormat(TCFFFDSelect *this)
{
  return *((unsigned __int8 *)this + 8);
}

void TCFFFDSelect0::~TCFFFDSelect0(TCFFFDSelect0 *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1E61C9128;
  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    MEMORY[0x1B5E0CD14](v2, 0x1000C8077774924);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_1E61C9128;
  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    MEMORY[0x1B5E0CD14](v2, 0x1000C8077774924);
  JUMPOUT(0x1B5E0CD38);
}

uint64_t TCFFFDSelect0::StreamOut(TCFFFDSelect0 *this, TBufferedStreamingContext *a2)
{
  unsigned __int8 v5;

  v5 = *((_BYTE *)this + 8);
  TBufferedStreamingContext::BufferString((uint64_t)a2, &v5, 1uLL);
  return TBufferedStreamingContext::BufferString((uint64_t)a2, *((const unsigned __int8 **)this + 2), *((unsigned __int16 *)this + 5));
}

uint64_t TCFFFDSelect0::GetLength(TCFFFDSelect0 *this)
{
  return *((unsigned __int16 *)this + 5) + 1;
}

void TCIDCFFFontSet::TCIDCFFFontSet(TCIDCFFFontSet *this, char a2, char a3, char a4, const char *a5, int a6)
{
  uint64_t v8;
  uint64_t v9;

  TCFFFontSet::TCFFFontSet(this, a2, a3, a4, a5);
  *(_QWORD *)v8 = off_1E61C9160;
  *(_WORD *)(v8 + 384) = 0;
  *(_WORD *)(v8 + 386) = a6;
  *(_BYTE *)(v8 + 392) = 0;
  *(_BYTE *)(v8 + 416) = 0;
  *((_QWORD *)this + 53) = AllocateMemory(24 * a6, 1);
  TCFFArray::TCFFArray((TCIDCFFFontSet *)((char *)this + 448), 1u);
  v9 = *((_QWORD *)this + 53) + 8 * a6;
  *((_QWORD *)this + 54) = v9;
  *((_QWORD *)this + 55) = v9 + 8 * a6;
  *((_QWORD *)this + 56) = &off_1E61CB7C0;
}

void sub_1B09CDC78(_Unwind_Exception *a1)
{
  TCFFFontSet *v1;
  uint64_t v2;

  std::optional<TCFFFDSelect0>::~optional(v2);
  TCFFFontSet::~TCFFFontSet(v1);
  _Unwind_Resume(a1);
}

uint64_t std::optional<TCFFFDSelect0>::~optional(uint64_t a1)
{
  uint64_t v2;

  if (*(_BYTE *)(a1 + 24))
  {
    *(_QWORD *)a1 = &off_1E61C9128;
    v2 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    if (v2)
      MEMORY[0x1B5E0CD14](v2, 0x1000C8077774924);
  }
  return a1;
}

void TCIDCFFFontSet::~TCIDCFFFontSet(TCIDCFFFontSet *this)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)this = off_1E61C9160;
  v2 = (void *)*((_QWORD *)this + 53);
  if (v2)
  {
    if (*((__int16 *)this + 193) >= 1)
    {
      v3 = 0;
      do
      {
        v4 = *(_QWORD *)(*((_QWORD *)this + 53) + 8 * v3);
        if (v4)
          (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
        v5 = *(_QWORD *)(*((_QWORD *)this + 55) + 8 * v3);
        if (v5)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
        v6 = *(_QWORD *)(*((_QWORD *)this + 54) + 8 * v3);
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
        ++v3;
      }
      while (v3 < *((__int16 *)this + 193));
      v2 = (void *)*((_QWORD *)this + 53);
    }
    free(v2);
  }
  TCFFArray::~TCFFArray((void **)this + 56);
  if (*((_BYTE *)this + 416))
  {
    *((_QWORD *)this + 49) = &off_1E61C9128;
    v7 = *((_QWORD *)this + 51);
    *((_QWORD *)this + 51) = 0;
    if (v7)
      MEMORY[0x1B5E0CD14](v7, 0x1000C8077774924);
  }
  TCFFFontSet::~TCFFFontSet(this);
}

uint64_t TCIDCFFFontSet::AddBlueValues(uint64_t a1, __int16 a2, unsigned int a3, uint64_t a4, int a5, int a6)
{
  return TCFFFontSet::AddBlueValuesToDict(a2, a3, a4, a5, a6, *(const void ***)(*(_QWORD *)(a1 + 432) + 8 * *(unsigned __int16 *)(a1 + 384)));
}

uint64_t TCIDCFFFontSet::AddStemSnap(TCIDCFFFontSet *this, TCFFFontSet *a2, int a3, int *a4, TCFFDict *a5)
{
  return TCFFFontSet::AddStemSnapToDict(a2, a3, a4, *(const void ***)(*((_QWORD *)this + 54) + 8 * *((unsigned __int16 *)this + 192)), a5);
}

uint64_t TCIDCFFFontSet::AddSubrs(TCIDCFFFontSet *this, TCFFFontSet *a2, unsigned int a3, const unsigned __int8 *a4, const unsigned __int8 *a5, unsigned __int8 *a6, uint64_t a7, uint64_t a8, BOOL a9)
{
  return TCFFFontSet::AddSubrsToDict(a2, a3, a4, a5, a6, (uint64_t *)(*((_QWORD *)this + 55) + 8 * *((unsigned __int16 *)this + 192)), *(TCFFArray ***)(*((_QWORD *)this + 54) + 8 * *((unsigned __int16 *)this + 192)), (TCFFDict *)1, a9);
}

void TCIDCFFFontSet::StreamOut(TCIDCFFFontSet *this, TBufferedStreamingContext *a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD v10[4];
  unsigned __int8 v11[2];

  LOBYTE(v10[0]) = *((_BYTE *)this + 8);
  TBufferedStreamingContext::BufferString((uint64_t)a2, (const unsigned __int8 *)v10, 1uLL);
  LOBYTE(v10[0]) = *((_BYTE *)this + 9);
  TBufferedStreamingContext::BufferString((uint64_t)a2, (const unsigned __int8 *)v10, 1uLL);
  LOBYTE(v10[0]) = *((_BYTE *)this + 10);
  TBufferedStreamingContext::BufferString((uint64_t)a2, (const unsigned __int8 *)v10, 1uLL);
  LOBYTE(v10[0]) = *((_BYTE *)this + 11);
  TBufferedStreamingContext::BufferString((uint64_t)a2, (const unsigned __int8 *)v10, 1uLL);
  TCFFArray::StreamOut((TCIDCFFFontSet *)((char *)this + 16), a2);
  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v10[2] = v4;
  v10[3] = v4;
  v10[0] = v4;
  v10[1] = v4;
  TCFFDictArray::TCFFDictArray((TCFFDictArray *)v10, (TCIDCFFFontSet *)((char *)this + 80));
  TCFFDictArray::StreamOut((TCFFDictArray *)v10, a2);
  TCFFArray::StreamOut((TCIDCFFFontSet *)((char *)this + 152), a2);
  v5 = *((_QWORD *)this + 27);
  if (v5)
  {
    (*(void (**)(uint64_t, TBufferedStreamingContext *))(*(_QWORD *)v5 + 32))(v5, a2);
  }
  else
  {
    *(_WORD *)v11 = 0;
    TBufferedStreamingContext::BufferString((uint64_t)a2, v11, 2uLL);
  }
  v6 = *((_QWORD *)this + 29);
  if (v6)
    (*(void (**)(uint64_t, TBufferedStreamingContext *))(*(_QWORD *)v6 + 24))(v6, a2);
  if (*((_BYTE *)this + 416))
    (*(void (**)(char *, TBufferedStreamingContext *))(*((_QWORD *)this + 49) + 24))((char *)this + 392, a2);
  TCFFArray::StreamOut((TCIDCFFFontSet *)((char *)this + 240), a2);
  TCFFDictArray::StreamOut((TCIDCFFFontSet *)((char *)this + 448), a2);
  if (*((__int16 *)this + 193) >= 1)
  {
    v7 = 0;
    do
    {
      v8 = *(_QWORD *)(*((_QWORD *)this + 54) + 8 * v7);
      if (v8)
      {
        (*(void (**)(uint64_t, TBufferedStreamingContext *))(*(_QWORD *)v8 + 32))(v8, a2);
        v9 = *(_QWORD *)(*((_QWORD *)this + 55) + 8 * v7);
        if (v9)
          (*(void (**)(uint64_t, TBufferedStreamingContext *))(*(_QWORD *)v9 + 32))(v9, a2);
      }
      ++v7;
    }
    while (v7 < *((__int16 *)this + 193));
  }
  TCFFArray::~TCFFArray((void **)v10);
}

void sub_1B09CDFF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  TCFFArray::~TCFFArray(&a9);
  _Unwind_Resume(a1);
}

uint64_t TType1CIDFont::BuildCFFFontSet(TType1CIDFont *this, const unsigned int *a2, const unsigned __int16 *a3, TCFFFontSet *a4)
{
  TType1CIDFont *v5;
  uint64_t v6;
  uint64_t v7;
  const unsigned __int8 *v8;
  const void **v9;
  const unsigned __int8 *v10;
  const unsigned __int8 *v11;
  const unsigned __int8 *v12;
  _QWORD *v13;
  uint64_t v14;
  unsigned int *v15;
  TCFFDict *v16;
  TCFFDict *v17;
  TCFFDict *v18;
  int v19;
  void *CIDFont;
  unsigned __int8 *v21;
  TCFFDict *v22;
  TCFFDict *v23;
  uint64_t v24;
  unsigned int v25;
  int8x8_t v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  const unsigned int *v30;
  __int16 v31;
  uint64_t v32;
  unsigned int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  TCFFDict *v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  unsigned __int8 *v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  int v48;
  int v49;
  int32x4_t v50;
  unsigned int v51;
  int v52;
  int v53;
  int v54;
  double v55;
  double v56;
  double v57;
  double v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  TCFFDict *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  TCFFDict *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unsigned int v81;
  unsigned __int16 v82;
  unsigned __int16 v83;
  uint64_t v84;
  _WORD *v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  unsigned __int16 i;
  uint64_t v91;
  int Length;
  int v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  int v97;
  int v98;
  int v99;
  unsigned __int16 v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  int v104;
  uint64_t v105;
  int v106;
  int v107;
  int v108;
  int v109;
  unsigned int v110;
  int v111;
  unsigned int v112;
  unsigned int v113;
  unsigned int v114;
  unsigned __int8 v115;
  unsigned __int8 v116;
  int v117;
  unsigned int v118;
  _BOOL4 v119;
  int v120;
  int v121;
  int v122;
  int v123;
  int v124;
  unsigned __int8 v125;
  unsigned __int8 *v126;
  char v127;
  unsigned __int16 v128;
  int v129;
  const TCFFDict *v130;
  uint64_t v131;
  TCFFDict *v132;
  int v133;
  unsigned __int8 *v134;
  int v135;
  unsigned __int8 *v136;
  int v137;
  uint64_t v138;
  int v139;
  unsigned int v140;
  int v141;
  unsigned __int8 *v142;
  unsigned int v143;
  int v144;
  unsigned __int8 *v145;
  unsigned int v146;
  uint64_t result;
  unsigned __int8 *v148;
  unsigned int v149;
  _WORD *exception;
  int v151;
  const void **v152;
  TType1CIDFont *v153;
  TCFFArray *v154;
  void *v155;
  int v156;
  int v158;
  int v159;
  int v160;
  unsigned __int16 v161;
  int v162;
  int v163;
  int v164;
  int v165;
  unsigned __int16 v166;
  _BYTE v167[24];
  unint64_t v168;
  __int16 v169;
  _QWORD v170[3];
  unsigned __int8 v171[16];
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  int v187[3];
  uint64_t v188;

  v5 = this;
  v188 = *MEMORY[0x1E0C80C00];
  v6 = (*(uint64_t (**)(TType1CIDFont *, const unsigned int *, const unsigned __int16 *))(*(_QWORD *)this
                                                                                                  + 320))(this, a2, a3);
  v187[0] = (*(uint64_t (**)(char *, uint64_t))(*((_QWORD *)a4 + 19) + 56))((char *)a4 + 152, v6 + 1);
  v7 = (*(uint64_t (**)(TType1CIDFont *))(*(_QWORD *)v5 + 328))(v5);
  v187[1] = (*(uint64_t (**)(char *, uint64_t))(*((_QWORD *)a4 + 19) + 56))((char *)a4 + 152, v7 + 1);
  v187[2] = *((_DWORD *)TType1CIDFont::GetCIDFont((const void **)v5) + 16);
  v154 = (TCFFFontSet *)((char *)a4 + 152);
  v152 = (const void **)((char *)a4 + 80);
  TCFFDict::AddNumericArrayEntry((const void **)a4 + 10, 62, 3, (unsigned __int8 *)v187, 0);
  v8 = (const unsigned __int8 *)(*(uint64_t (**)(TType1CIDFont *))(*(_QWORD *)v5 + 104))(v5);
  v9 = (const void **)((char *)a4 + 80);
  TCFFDict::AddStringIDEntry((uint64_t)a4 + 80, 1, v8, (TCFFFontSet *)((char *)a4 + 152));
  v10 = (const unsigned __int8 *)(*(uint64_t (**)(TType1CIDFont *))(*(_QWORD *)v5 + 72))(v5);
  TCFFDict::AddStringIDEntry((uint64_t)a4 + 80, 2, v10, (TCFFFontSet *)((char *)a4 + 152));
  v11 = (const unsigned __int8 *)(*(uint64_t (**)(TType1CIDFont *))(*(_QWORD *)v5 + 80))(v5);
  TCFFDict::AddStringIDEntry((uint64_t)a4 + 80, 3, v11, (TCFFFontSet *)((char *)a4 + 152));
  v12 = (const unsigned __int8 *)(*(uint64_t (**)(TType1CIDFont *))(*(_QWORD *)v5 + 96))(v5);
  TCFFDict::AddStringIDEntry((uint64_t)a4 + 80, 4, v12, (TCFFFontSet *)((char *)a4 + 152));
  v13 = (_QWORD *)*((_QWORD *)v5 + 4);
  v14 = v13[16];
  if ((*(unsigned int (**)(_QWORD *))(*v13 + 312))(v13))
    TCFFDict::AddNumericEntry(v9, 33, (TCFFDict *)1);
  v15 = (unsigned int *)*((_QWORD *)v5 + 4);
  v16 = (TCFFDict *)v15[38];
  if ((_DWORD)v16)
  {
    TCFFDict::AddNumericEntry(v9, 34, v16, (unsigned __int8 *)0x10);
    v15 = (unsigned int *)*((_QWORD *)v5 + 4);
  }
  v17 = (TCFFDict *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v15 + 296))(v15);
  if ((_DWORD)v17 != -100)
    TCFFDict::AddNumericEntry(v9, 35, v17);
  v18 = (TCFFDict *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)v5 + 4) + 304))(*((_QWORD *)v5 + 4));
  if ((_DWORD)v18 != 50)
    TCFFDict::AddNumericEntry(v9, 36, v18);
  TCFFDict::AddNumericArrayEntry(v9, 5, 4, (unsigned __int8 *)(v14 + 88), (unsigned __int8 *)0x10);
  v19 = *((_DWORD *)TType1CIDFont::GetCIDFont((const void **)v5) + 11);
  CIDFont = TType1CIDFont::GetCIDFont((const void **)v5);
  if (v19)
  {
    v21 = (unsigned __int8 *)*((_QWORD *)CIDFont + 6);
    if (v21)
      TCFFDict::AddNumericArrayEntry(v9, 14, v19, v21, 0);
  }
  v22 = (TCFFDict *)*((unsigned int *)TType1CIDFont::GetCIDFont((const void **)v5) + 19);
  if ((_DWORD)v22)
    TCFFDict::AddNumericEntry(v9, 63, v22);
  v23 = (TCFFDict *)*((unsigned int *)TType1CIDFont::GetCIDFont((const void **)v5) + 10);
  if ((_DWORD)v23 != -1)
    TCFFDict::AddNumericEntry(v9, 67, v23);
  memset(v170, 170, sizeof(v170));
  v169 = -21846;
  v168 = 0xAAAAAAAAAAAAAAAALL;
  v24 = (*(uint64_t (**)(TType1CIDFont *, __int16 *, _QWORD *, unint64_t *, _QWORD *, _QWORD *))(*(_QWORD *)v5 + 152))(v5, &v169, &v170[2], &v168, &v170[1], v170);
  if (v24)
    (*(void (**)(TCFFFontSet *, TType1CIDFont *, _QWORD, uint64_t, unint64_t, uint64_t))(*(_QWORD *)a4 + 24))(a4, v5, v169, v24, v168, v170[0] - v24);
  v25 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v5 + 4) + 168))(*((_QWORD *)v5 + 4));
  if (v25 >= 0xFFFF)
    v27 = 0xFFFF;
  else
    v27 = v25;
  if (a2)
  {
    v28 = 0;
    if (v27)
    {
      v29 = (v27 + 31) >> 5;
      v30 = a2;
      do
      {
        if (*v30)
        {
          v26.i32[0] = *v30;
          v26 = vcnt_s8(v26);
          v26.i16[0] = vaddlv_u8((uint8x8_t)v26);
          v28 += v26.i32[0];
        }
        ++v30;
        --v29;
      }
      while (v29);
    }
  }
  else
  {
    v28 = v27;
  }
  v31 = v28 - 1;
  v155 = (void *)operator new[]();
  if (v28 != 1)
    bzero(v155, 2 * (v28 - 1));
  v32 = operator new[]();
  if (!v27)
  {
    v83 = 0;
    goto LABEL_91;
  }
  v33 = 0;
  v161 = 0;
  v34 = 0;
  v153 = v5;
  v159 = v27;
  do
  {
    if (v33 && ((a2[v33 >> 5] << v33) & 0x80000000) == 0)
      goto LABEL_87;
    v163 = v34;
    v35 = (*(uint64_t (**)(TType1CIDFont *, _QWORD))(*(_QWORD *)v5 + 344))(v5, (unsigned __int16)v33);
    v37 = v35;
    if (*((__int16 *)a4 + 193) <= (int)(unsigned __int16)v35)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)exception = &off_1E61B2D68;
      exception[4] = 5;
    }
    *((_WORD *)a4 + 192) = v35;
    v38 = (unsigned __int16)v35;
    if (!*(_QWORD *)(*((_QWORD *)a4 + 53) + 8 * (unsigned __int16)v35))
    {
      v39 = (TCFFDict *)operator new();
      TCFFDict::TCFFDict(v39);
      *(_QWORD *)(*((_QWORD *)a4 + 53) + 8 * v38) = v39;
      v40 = *((_QWORD *)TType1CIDFont::GetCIDFont((const void **)v5) + 7);
      *(_QWORD *)&v41 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v41 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v185 = v41;
      v186 = v41;
      v183 = v41;
      v184 = v41;
      v181 = v41;
      v182 = v41;
      v179 = v41;
      v180 = v41;
      v177 = v41;
      v178 = v41;
      v175 = v41;
      v176 = v41;
      v173 = v41;
      v174 = v41;
      *(_OWORD *)v171 = v41;
      v172 = v41;
      v42 = *(_QWORD *)(*((_QWORD *)a4 + 53) + 8 * *((unsigned __int16 *)a4 + 192));
      v43 = (unsigned __int8 *)(*(uint64_t (**)(TType1CIDFont *))(*(_QWORD *)v5 + 112))(v5);
      MakeFontNameFromID(v171, v43, (unsigned __int16)v37);
      (*(void (**)(uint64_t, uint64_t, unsigned __int8 *, TCFFArray *))(*(_QWORD *)v42 + 96))(v42, 70, v171, v154);
      v44 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v5 + 4) + 72))(*((_QWORD *)v5 + 4));
      v45 = v40 + 488 * v38;
      *(_QWORD *)&v167[16] = 0xAAAAAAAAAAAAAAAALL;
      memset(v167, 170, 16);
      v46 = *(_QWORD *)(v45 + 56);
      *(_OWORD *)v167 = *(_OWORD *)(v45 + 40);
      *(_QWORD *)&v167[16] = v46;
      v47 = *(_DWORD *)&v167[4];
      v48 = *(_DWORD *)&v167[8];
      v49 = v46;
      v50.i64[0] = __PAIR64__(*(unsigned int *)&v167[8], *(unsigned int *)v167);
      v50.i64[1] = *(_QWORD *)&v167[12];
      if (v44)
        v51 = v44;
      else
        v51 = 1000;
      if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(v50, (int32x4_t)xmmword_1B0AAB110)))) & 1) == 0
        && !*(_DWORD *)&v167[4]
        && !*(_DWORD *)&v167[20]
        && v51 == 1000)
      {
        goto LABEL_58;
      }
      if (*(int *)v167 >= 0)
        v52 = *(_DWORD *)v167;
      else
        v52 = -*(_DWORD *)v167;
      if (*(int *)&v167[12] >= 0)
        v53 = *(_DWORD *)&v167[12];
      else
        v53 = -*(_DWORD *)&v167[12];
      if (v52 == v53)
      {
        v54 = v52 - 0x40000000 / v51;
        if (v54 < 0)
          v54 = -v54;
        if (v54 < 2)
          goto LABEL_57;
        v55 = (double)*(int *)&v167[12];
        v56 = fabs((double)*(int *)&v167[12] * 9.31322575e-10);
        v57 = (double)*(int *)v167;
      }
      else
      {
        v57 = (double)*(int *)v167;
        v55 = (double)*(int *)&v167[12];
        v151 = *(_DWORD *)&v167[16];
        v56 = hypot((double)*(int *)v167 * 9.31322575e-10, (double)*(int *)&v167[12] * 9.31322575e-10);
        v49 = v151;
      }
      v58 = 1.0 / v56 / (double)v51;
      *(_DWORD *)v167 = (int)(v57 * v58);
      *(_DWORD *)&v167[4] = (int)(v58 * (double)v47);
      *(_DWORD *)&v167[8] = (int)(v58 * (double)v48);
      *(_DWORD *)&v167[12] = (int)(v55 * v58);
      *(_DWORD *)&v167[16] = (int)(v58 * (double)v49);
      *(_DWORD *)&v167[20] = (int)(v58 * (double)*(int *)&v167[20]);
LABEL_57:
      v59 = *(_QWORD *)(*((_QWORD *)a4 + 53) + 8 * *((unsigned __int16 *)a4 + 192));
      (*(void (**)(uint64_t, uint64_t, uint64_t, _BYTE *, uint64_t))(*(_QWORD *)v59 + 88))(v59, 39, 6, v167, 30);
LABEL_58:
      if (*(_WORD *)(v40 + 488 * v38 + 96))
      {
        v60 = *(_QWORD *)(*((_QWORD *)a4 + 53) + 8 * *((unsigned __int16 *)a4 + 192));
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v60 + 72))(v60, 37);
      }
      v61 = *(_QWORD *)(*((_QWORD *)a4 + 53) + 8 * *((unsigned __int16 *)a4 + 192));
      (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v61 + 72))(v61, 13, *(unsigned int *)(v40 + 488 * v38 + 64));
      v62 = *(_QWORD *)(*((_QWORD *)a4 + 53) + 8 * *((unsigned __int16 *)a4 + 192));
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v62 + 88))(v62, 5, 4, v40 + 488 * v38 + 124, 16);
      v63 = *(unsigned int *)(v40 + 488 * v38 + 76);
      if ((_DWORD)v63)
      {
        v64 = *(_QWORD *)(*((_QWORD *)a4 + 53) + 8 * *((unsigned __int16 *)a4 + 192));
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v64 + 80))(v64, 40, v63, 16);
      }
      v65 = (TCFFDict *)operator new();
      TCFFDict::TCFFDict(v65);
      *(_QWORD *)(*((_QWORD *)a4 + 54) + 8 * v38) = v65;
      (*(void (**)(TCFFFontSet *, uint64_t, _QWORD, uint64_t, _QWORD, _QWORD))(*(_QWORD *)a4 + 40))(a4, 6, *(unsigned __int16 *)(v40 + 488 * v38 + 102), v40 + 488 * v38 + 284, *(unsigned int *)(v40 + 488 * v38 + 68), 0);
      v66 = *(_QWORD *)(*((_QWORD *)a4 + 54) + 8 * *((unsigned __int16 *)a4 + 192));
      (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v66 + 80))(v66, 41, *(unsigned int *)(v40 + 488 * v38 + 272), 16);
      v67 = *(unsigned int *)(v40 + 488 * v38 + 280);
      if ((_DWORD)v67 != 458752)
      {
        v68 = *(_QWORD *)(*((_QWORD *)a4 + 54) + 8 * *((unsigned __int16 *)a4 + 192));
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v68 + 80))(v68, 42, v67, 16);
      }
      v69 = *(unsigned int *)(v40 + 488 * v38 + 276);
      if ((_DWORD)v69 != 0x10000)
      {
        v70 = *(_QWORD *)(*((_QWORD *)a4 + 54) + 8 * *((unsigned __int16 *)a4 + 192));
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v70 + 80))(v70, 43, v69, 16);
      }
      v71 = *(_QWORD *)(*((_QWORD *)a4 + 54) + 8 * *((unsigned __int16 *)a4 + 192));
      (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v71 + 80))(v71, 10, *(unsigned int *)(v40 + 488 * v38 + 140), 16);
      v72 = *(_QWORD *)(*((_QWORD *)a4 + 54) + 8 * *((unsigned __int16 *)a4 + 192));
      (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v72 + 80))(v72, 11, *(unsigned int *)(v40 + 488 * v38 + 144), 16);
      if (*(_WORD *)(v40 + 488 * v38 + 98))
        (*(void (**)(TCFFFontSet *, uint64_t))(*(_QWORD *)a4 + 48))(a4, 44);
      if (*(_WORD *)(v40 + 488 * v38 + 100))
        (*(void (**)(TCFFFontSet *, uint64_t))(*(_QWORD *)a4 + 48))(a4, 45);
      if (*(_WORD *)(v40 + 488 * v38 + 106))
      {
        v73 = *(_QWORD *)(*((_QWORD *)a4 + 54) + 8 * *((unsigned __int16 *)a4 + 192));
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v73 + 72))(v73, 49);
      }
      if ((*(_DWORD *)(v40 + 488 * v38 + 80) & 0xFFFFFFFE) == 0xF5C)
      {
        v74 = *(_QWORD *)(*((_QWORD *)a4 + 54) + 8 * *((unsigned __int16 *)a4 + 192));
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v74 + 80))(v74, 50);
      }
      v75 = (TCFFDict *)*(unsigned int *)(v40 + 488 * v38 + 88);
      if ((_DWORD)v75)
        TCFFDict::AddNumericEntry((const void **)a4 + 38, 51, v75, (unsigned __int8 *)0x10);
      v76 = *(unsigned int *)(v40 + 488 * v38 + 156);
      if ((_DWORD)v76)
      {
        v77 = *(_QWORD *)(*((_QWORD *)a4 + 54) + 8 * *((unsigned __int16 *)a4 + 192));
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v77 + 80))(v77, 20, v76, 16);
      }
      v78 = *(unsigned int *)(v40 + 488 * v38 + 476);
      if ((_DWORD)v78)
      {
        v79 = *(_QWORD *)(*((_QWORD *)a4 + 54) + 8 * *((unsigned __int16 *)a4 + 192));
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v79 + 80))(v79, 21, v78, 16);
      }
      v166 = -21846;
      v5 = v153;
      v80 = (*(uint64_t (**)(TType1CIDFont *, uint64_t, unsigned __int16 *, __int16 *, _QWORD *, unint64_t *, _QWORD *, _QWORD *))(*(_QWORD *)v153 + 368))(v153, v37, &v166, &v169, &v170[2], &v168, &v170[1], v170);
      v36 = v80;
      if (v80)
        (*(void (**)(TCFFFontSet *, _QWORD, _QWORD, uint64_t, unint64_t, uint64_t))(*(_QWORD *)a4 + 56))(a4, v169, v166, v80, v168, v170[0] - v80);
    }
    v81 = (*(uint64_t (**)(TCFFFontSet *, TType1CIDFont *, _QWORD, uint64_t))(*(_QWORD *)a4 + 16))(a4, v5, (unsigned __int16)v33, v36);
    if ((_WORD)v163)
    {
      *((_WORD *)v155 + (unsigned __int16)v163 - 1) = __rev16(v81);
      v82 = v161;
      if (v161 <= v81)
        v82 = v81;
      v161 = v82;
    }
    *(_BYTE *)(v32 + (unsigned __int16)v163) = v37;
    v34 = v163 + 1;
    v27 = v159;
LABEL_87:
    ++v33;
  }
  while (v27 != v33);
  v83 = v161;
  v31 = v28 - 1;
  if (v161 != 8719)
LABEL_91:
    TCFFDict::AddNumericEntry(v152, 66, (TCFFDict *)(v83 + 1));
  v84 = operator new();
  *(_BYTE *)(v84 + 8) = 0;
  *(_QWORD *)v84 = &off_1E61CB870;
  *(_WORD *)(v84 + 10) = v31;
  *(_QWORD *)(v84 + 16) = v155;
  *((_QWORD *)a4 + 29) = v84;
  v85 = TType1CIDFont::GetCIDFont((const void **)v5);
  v86 = (unsigned __int16)v85[9];
  if (v85[9])
  {
    v87 = 0;
    v88 = 0;
    v89 = *((_QWORD *)a4 + 53);
    do
    {
      if (*(_QWORD *)(v89 + 8 * v87))
      {
        if (v28 && v88 != (_DWORD)v87)
        {
          for (i = 0; i < v28; ++i)
          {
            if (v87 == *(unsigned __int8 *)(v32 + i))
              *(_BYTE *)(v32 + i) = v88;
          }
        }
        ++v88;
      }
      ++v87;
    }
    while (v87 != v86);
    *((_WORD *)a4 + 192) = v86 - 1;
  }
  else
  {
    v88 = 0;
  }
  if (*((_BYTE *)a4 + 416))
  {
    *((_QWORD *)a4 + 49) = &off_1E61C9128;
    v91 = *((_QWORD *)a4 + 51);
    *((_QWORD *)a4 + 51) = 0;
    if (v91)
      MEMORY[0x1B5E0CD14](v91, 0x1000C8077774924);
    *((_BYTE *)a4 + 416) = 0;
  }
  *((_BYTE *)a4 + 400) = 0;
  *((_QWORD *)a4 + 49) = &off_1E61C9128;
  *((_WORD *)a4 + 201) = v28;
  *((_QWORD *)a4 + 51) = v32;
  *((_BYTE *)a4 + 416) = 1;
  Length = TCFFArray::GetLength((TCFFFontSet *)((char *)a4 + 16));
  v93 = TCFFArray::GetLength(v154);
  v94 = *((_QWORD *)a4 + 27);
  if (v94)
    v95 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v94 + 16))(v94);
  else
    v95 = 2;
  v156 = TCFFDict::GetLength((TCFFDict *)v152);
  v96 = *((_QWORD *)a4 + 29);
  v164 = Length + v93 + 7 + v95;
  if (v96)
  {
    v158 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v96 + 32))(v96);
    v164 += v158;
    v97 = 3;
  }
  else
  {
    v158 = 0;
    v97 = 2;
  }
  if (*((_BYTE *)a4 + 416))
  {
    v160 = (*(uint64_t (**)(char *))(*((_QWORD *)a4 + 49) + 32))((char *)a4 + 392);
    ++v97;
    v164 += v160;
  }
  else
  {
    v160 = 0;
  }
  v162 = TCFFArray::GetLength((TCFFFontSet *)((char *)a4 + 240));
  *((_WORD *)a4 + 192) = 0;
  if ((_DWORD)v86)
  {
    v98 = 0;
    v99 = 0;
    v100 = 0;
    do
    {
      v101 = *(_QWORD *)(*((_QWORD *)a4 + 53) + 8 * v100);
      if (v101)
      {
        v102 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v101 + 16))(v101);
        v103 = *(_QWORD *)(*((_QWORD *)a4 + 54) + 8 * *((unsigned __int16 *)a4 + 192));
        v104 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v103 + 16))(v103);
        v105 = *(_QWORD *)(*((_QWORD *)a4 + 55) + 8 * *((unsigned __int16 *)a4 + 192));
        if (v105)
          LODWORD(v105) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v105 + 16))(v105);
        if (v104 == (__int16)v104)
          v106 = 3;
        else
          v106 = 5;
        if ((unsigned __int16)(v104 + 107) < 0xD7u)
          v107 = 1;
        else
          v107 = 2;
        if ((v104 + 1131) <= 0x8D6)
          v108 = v107;
        else
          v108 = v106;
        v98 += v104 + v105;
        v99 += v102 + v108 + 2;
        v100 = *((_WORD *)a4 + 192);
      }
      *((_WORD *)a4 + 192) = ++v100;
    }
    while (v86 > v100);
  }
  else
  {
    v99 = 0;
    v98 = 0;
  }
  v109 = v88 + 1;
  v110 = v156 + 2 * v97 + 2;
  if (v110 < 0xFFFFFF)
    v111 = 3;
  else
    v111 = 4;
  if (v110 < 0xFFFF)
    v111 = 2;
  if (v110 >= 0xFF)
    v112 = v111;
  else
    v112 = 1;
  v113 = v88 + v99 + 4;
  v114 = v162 + v164 + v110 + v98 + v113 + 2 * v112;
  v115 = 1;
  v116 = 1;
  do
  {
    while (1)
    {
      if (v110 < 0xFFFFFF)
        v117 = 3;
      else
        v117 = 4;
      if (v110 < 0xFFFF)
        v117 = 2;
      if (v110 >= 0xFF)
        v118 = v117;
      else
        v118 = 1;
      v119 = v118 <= v112;
      v120 = 2 * (v118 - v112);
      if (v118 <= v112)
        v120 = 0;
      v114 += v120;
      if (v112 <= v118)
        v112 = v118;
      if (v114 >= 0x8000)
        v121 = 5;
      else
        v121 = 3;
      if (v114 < 0x6C)
        v121 = 1;
      if (v121 != v116)
      {
        v119 = 0;
        v122 = v121 - v116;
        v123 = v122 * v88;
        v113 += v122 * v88;
        v124 = v122 * v97;
        v110 += v124;
        v114 += v123 + v124;
        v116 = v121;
      }
      if (v113 < 0xFFFFFF)
        v125 = 3;
      else
        v125 = 4;
      if (v113 < 0xFFFF)
        v125 = 2;
      if (v113 < 0xFF)
        v125 = 1;
      v126 = (unsigned __int8 *)(v125 - v115);
      if (v125 == v115)
        break;
      v113 += (_DWORD)v126 * v109;
      v114 += (_DWORD)v126 * v109;
      v115 = v125;
    }
  }
  while (!v119);
  if (v114 >= 0xFF)
  {
    if (v114 >= 0xFFFF)
    {
      if (v114 < 0xFFFFFF)
        v127 = 3;
      else
        v127 = 4;
    }
    else
    {
      v127 = 2;
    }
  }
  else
  {
    v127 = 1;
  }
  *((_BYTE *)a4 + 11) = v127;
  v165 = v114 - v98;
  memset(v171, 170, sizeof(v171));
  *((_WORD *)a4 + 192) = 0;
  if ((_DWORD)v86)
  {
    v128 = 0;
    v129 = v165;
    do
    {
      v130 = *(const TCFFDict **)(*((_QWORD *)a4 + 53) + 8 * v128);
      if (v130)
      {
        v131 = *(_QWORD *)(*((_QWORD *)a4 + 54) + 8 * v128);
        v132 = (TCFFDict *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v131 + 16))(v131);
        v133 = (int)v132;
        v135 = TCFFDict::EncodeNumber(v132, v171, v134);
        v137 = TCFFDict::EncodeNumber(v116, v129, &v171[v135], v136);
        (*(void (**)(const TCFFDict *, uint64_t, _QWORD, unsigned __int8 *))(*(_QWORD *)v130 + 64))(v130, 18, (v137 + v135), v171);
        v138 = *(_QWORD *)(*((_QWORD *)a4 + 55) + 8 * *((unsigned __int16 *)a4 + 192));
        if (v138)
          v139 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v138 + 16))(v138);
        else
          v139 = 0;
        TCFFDictArray::Add((TCFFFontSet *)((char *)a4 + 448), v130);
        v129 += v133 + v139;
        v128 = *((_WORD *)a4 + 192);
      }
      *((_WORD *)a4 + 192) = ++v128;
    }
    while (v86 > v128);
  }
  v140 = TCFFDict::EncodeNumber(v116, v165 - v113, v171, v126);
  TCFFDict::AddOpcode(v152, 68);
  TCFFArray::Add((TCFFArray *)v152, v140, v171);
  v141 = v165 - v113 - v162;
  v143 = TCFFDict::EncodeNumber(v116, v141, v171, v142);
  TCFFDict::AddOpcode(v152, 17);
  TCFFArray::Add((TCFFArray *)v152, v143, v171);
  v144 = v141 - v160;
  v146 = TCFFDict::EncodeNumber(v116, v141 - v160, v171, v145);
  TCFFDict::AddOpcode(v152, 69);
  result = TCFFArray::Add((TCFFArray *)v152, v146, v171);
  if (*((_QWORD *)a4 + 29))
  {
    v149 = TCFFDict::EncodeNumber(v116, v144 - v158, v171, v148);
    TCFFDict::AddOpcode(v152, 15);
    return TCFFArray::Add((TCFFArray *)v152, v149, v171);
  }
  return result;
}

void sub_1B09CF07C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E0CD14](v1, 0x1000C8077774924);
  _Unwind_Resume(a1);
}

void std::vector<int>::resize(std::vector<int> *this, std::vector<int>::size_type __sz)
{
  std::vector<int>::size_type v2;

  v2 = this->__end_ - this->__begin_;
  if (__sz <= v2)
  {
    if (__sz < v2)
      this->__end_ = &this->__begin_[__sz];
  }
  else
  {
    std::vector<int>::__append(this, __sz - v2);
  }
}

void TType1ToType2CIDCharStringConversionContext::~TType1ToType2CIDCharStringConversionContext(TType1ToType2CIDCharStringConversionContext *this)
{
  void *v2;

  *(_QWORD *)this = &off_1E61C91B8;
  v2 = (void *)*((_QWORD *)this + 117);
  if (v2)
  {
    *((_QWORD *)this + 118) = v2;
    operator delete(v2);
  }
  TType1ToType2CharStringConversionContext::~TType1ToType2CharStringConversionContext((void **)this);
}

{
  TType1ToType2CIDCharStringConversionContext::~TType1ToType2CIDCharStringConversionContext(this);
  JUMPOUT(0x1B5E0CD38);
}

void TType1ToType2CIDCharStringConversionContext::FlattenSubroutine(TType1ToType2CIDCharStringConversionContext *this, __int16 a2, uint64_t a3, BOOL *a4)
{
  uint64_t v7;
  int v8;
  std::vector<char>::pointer CIDSubr;
  _WORD *exception;

  v7 = *((_QWORD *)this + 58);
  v8 = *((_DWORD *)this + 142);
  CIDSubr = TType1CIDFont::LoadCIDSubr(*((const void ***)this + 55), *((__int16 *)this + 481), (std::vector<char> *)this + 39, a3);
  *((_QWORD *)this + 58) = CIDSubr;
  if (!CIDSubr)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E61B2D68;
    exception[4] = 5;
  }
  *((_DWORD *)this + 142) = *((_DWORD *)this + 236) - (_DWORD)CIDSubr;
  TType1ToType2CharStringConversionContext::ConvertT1ToT2CharString(this, (unsigned __int16)(a2 + 1), a4);
  *((_QWORD *)this + 58) = v7;
  *((_DWORD *)this + 142) = v8;
}

void TType1CIDCFFFontSet::~TType1CIDCFFFontSet(TType1CIDCFFFontSet *this)
{
  TCIDCFFFontSet::~TCIDCFFFontSet(this);
  JUMPOUT(0x1B5E0CD38);
}

uint64_t TType1CIDCFFFontSet::AddCharString(TType1CIDCFFFontSet *this, const TType1PSFont *a2, uint64_t a3)
{
  uint64_t v6;
  unsigned int v7;
  std::vector<int>::size_type v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  unsigned int v14;
  BOOL v15;
  _QWORD v16[121];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  memset(&v16[1], 170, 0x3C0uLL);
  v16[34] = 8;
  memset(&v16[35], 0, 20);
  BYTE5(v16[53]) = 1;
  *(_DWORD *)((char *)&v16[53] + 6) = 0;
  v16[55] = a2;
  v16[57] = 0;
  LOBYTE(v16[69]) = 0;
  LOWORD(v16[70]) = 0;
  *(_QWORD *)((char *)&v16[73] + 4) = 0;
  LOBYTE(v16[99]) = 0;
  LOBYTE(v16[112]) = 0;
  memset(&v16[113], 0, 24);
  memset(&v16[60], 0, 25);
  v16[33] = "/.notdef";
  v16[0] = &off_1E61C91B8;
  memset(&v16[117], 0, 24);
  v15 = 0;
  v14 = -1431655766;
  WORD1(v16[120]) = (*(uint64_t (**)(const TType1PSFont *, uint64_t, unsigned int *, _QWORD *))(*(_QWORD *)a2 + 336))(a2, a3, &v14, &v16[71]);
  v6 = (*(uint64_t (**)(const TType1PSFont *))(*(_QWORD *)a2 + 312))(a2);
  v16[56] = v6;
  if ((_DWORD)a3)
  {
    v7 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, char *))(*(_QWORD *)v16[55] + 184))(v16[55], a3, 127, (char *)&v16[37] + 4);
    v16[33] = (char *)&v16[37] + 4;
    v16[34] = v7;
    v6 = v16[56];
  }
  else
  {
    ++v16[33];
    --v16[34];
  }
  if (*(_WORD *)(v6 + 80))
    v8 = *(unsigned __int16 *)(v6 + 80);
  else
    v8 = 32;
  std::vector<int>::resize((std::vector<int> *)&v16[60], v8);
  (*(void (**)(uint64_t *__return_ptr, const TType1PSFont *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)a2 + 352))(&v13, a2, SWORD1(v16[120]), v14, LODWORD(v16[71]));
  v9 = v13;
  v13 = 0;
  v10 = v16[57];
  v16[57] = v9;
  if (v10)
  {
    MEMORY[0x1B5E0CD14](v10, 0x1000C8077774924);
    v11 = v13;
    v13 = 0;
    if (v11)
      MEMORY[0x1B5E0CD14](v11, 0x1000C8077774924);
  }
  v16[58] = v16[57];
  LODWORD(v16[37]) = malloc_good_size(LODWORD(v16[71]));
  v16[35] = AllocateMemory(LODWORD(v16[37]), 0);
  v16[36] = 0;
  v16[59] = v16[58];
  TType1ToType2CharStringConversionContext::ConvertT1ToT2CharString((TType1ToType2CharStringConversionContext *)v16, 0, &v15);
  TCFFArray::Add((TType1CIDCFFFontSet *)((char *)this + 240), v16[36], (const unsigned __int8 *)v16[35]);
  TType1ToType2CIDCharStringConversionContext::~TType1ToType2CIDCharStringConversionContext((TType1ToType2CIDCharStringConversionContext *)v16);
  return a3;
}

void sub_1B09CF504(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  TType1ToType2CIDCharStringConversionContext::~TType1ToType2CIDCharStringConversionContext((TType1ToType2CIDCharStringConversionContext *)va);
  _Unwind_Resume(a1);
}

unint64_t TType1CIDFont::StreamPSFont(uint64_t a1, const char *a2, int a3, int a4, unsigned int *a5, int a6, const char *a7, unsigned int *a8, unsigned int *a9, unsigned __int8 *a10)
{
  uint64_t v15;
  __int32 *v16;
  __int128 v17;
  uint64_t v18;
  unsigned __int16 *v19;
  BOOL v20;
  __int128 v21;
  __int128 v22;
  __int16 *CIDFont;
  uint64_t v24;
  __int128 v25;
  const TFontObjectSurrogate *v26;
  int v27;
  int v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned __int8 *v50;
  __int128 v51;
  uint64_t v52;
  unsigned int *v53;
  const unsigned __int8 *v54;
  unint64_t v55;
  int v56;
  int v57;
  uint64_t v58;
  unsigned int *v59;
  int v60;
  uint64_t v61;
  unsigned int *v62;
  int v63;
  uint64_t v64;
  int v65;
  __int128 v66;
  int v67;
  unsigned int v68;
  int v69;
  int v70;
  int v71;
  __int128 v72;
  int v73;
  int v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int v78;
  const void **v79;
  __int128 v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  int v84;
  int v85;
  int v86;
  uint64_t v87;
  unsigned int v88;
  int v89;
  __int128 v90;
  uint64_t v91;
  const unsigned __int8 *v92;
  _BYTE *v93;
  int v94;
  unsigned int v95;
  char v96;
  int v97;
  unsigned int v98;
  uint64_t v99;
  unsigned int v100;
  uint64_t v101;
  const void **v102;
  int CIDBytes;
  __int128 v104;
  uint64_t v105;
  int v106;
  __int128 v107;
  uint64_t v108;
  unsigned int v109;
  int v110;
  unint64_t v112;
  unint64_t result;
  int v114;
  uint64_t i;
  unsigned int v116;
  __int128 v117;
  uint64_t v118;
  unsigned int v119;
  unsigned __int8 *v120;
  __int128 v121;
  _WORD *v122;
  _WORD *exception;
  _WORD *v124;
  unsigned int v125;
  unsigned int v126;
  unsigned int v127;
  unsigned int *v129;
  int v130;
  unsigned int v131;
  unsigned int v132;
  int v133;
  int v134;
  unsigned int v135;
  const void **v136;
  int v137;
  int v138;
  TFontObjectSurrogate *v139;
  unsigned int *v140;
  unint64_t v141;
  unsigned __int8 v142[2];
  unsigned __int8 v143[4];
  unsigned __int8 v144[16];
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  _OWORD __b[47];
  unsigned int v161[4];
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  _BYTE __p[32];
  __int128 v194;
  __int128 v195;
  char __s[16];
  __int128 v197;
  unsigned __int8 *v198[2];
  _BYTE v199[96];
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  uint64_t v207;

  v207 = *MEMORY[0x1E0C80C00];
  v15 = TType1CIDFont::CheckFontProtectionAndStreamType((TType1CIDFont *)a1, a8, *a9);
  *a9 = v15;
  v141 = 0xAAAAAAAAAAAAAAAALL;
  (*(void (**)(unint64_t *__return_ptr, uint64_t, uint64_t, unsigned int *))(*(_QWORD *)a1 + 240))(&v141, a1, v15, a8);
  v16 = (__int32 *)v141;
  *(_QWORD *)&v17 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v17 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v192 = v17;
  v191 = v17;
  v190 = v17;
  v189 = v17;
  v188 = v17;
  v187 = v17;
  v186 = v17;
  v185 = v17;
  v184 = v17;
  v183 = v17;
  v182 = v17;
  v181 = v17;
  v180 = v17;
  v179 = v17;
  v178 = v17;
  v177 = v17;
  v176 = v17;
  v175 = v17;
  v174 = v17;
  v173 = v17;
  v172 = v17;
  v171 = v17;
  v170 = v17;
  v169 = v17;
  v168 = v17;
  v167 = v17;
  v166 = v17;
  v165 = v17;
  v164 = v17;
  v163 = v17;
  v162 = v17;
  *(_OWORD *)v161 = v17;
  if (!a5)
  {
    LODWORD(v18) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 168))(*(_QWORD *)(a1 + 32));
    if (v18 >= 0xFFFF)
      v18 = 0xFFFFLL;
    else
      v18 = v18;
    a5 = v161;
    TType1PSFont::SetEncoding(v18, v16, v161, v19);
  }
  v129 = a5;
  if ((*((_BYTE *)a9 + 1) & 1) != 0)
  {
    *(_QWORD *)&v21 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v21 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)&v199[72] = v21;
    *(_OWORD *)&v199[56] = v21;
    *(_OWORD *)&v199[40] = v21;
    *(_OWORD *)&v199[24] = v21;
    *(_OWORD *)&v199[8] = v21;
    *(_QWORD *)__s = &off_1E61B63B8;
    *(_QWORD *)&__s[8] = a1;
    *(_QWORD *)&v197 = v16;
    *((_QWORD *)&v197 + 1) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
    v198[0] = a10;
    v198[1] = (unsigned __int8 *)operator new[]();
    *(_QWORD *)v199 = 0;
    *(_DWORD *)&v199[8] = 0;
    *(_DWORD *)&v199[14] = 0;
    *(_QWORD *)&v22 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v22 + 1) = 0xAAAAAAAAAAAAAAAALL;
    __b[30] = v22;
    __b[31] = v22;
    __b[28] = v22;
    __b[29] = v22;
    __b[26] = v22;
    __b[27] = v22;
    __b[24] = v22;
    __b[25] = v22;
    __b[22] = v22;
    __b[23] = v22;
    __b[20] = v22;
    __b[21] = v22;
    __b[18] = v22;
    __b[19] = v22;
    __b[16] = v22;
    __b[17] = v22;
    __b[14] = v22;
    __b[15] = v22;
    __b[12] = v22;
    __b[13] = v22;
    __b[10] = v22;
    __b[11] = v22;
    __b[8] = v22;
    __b[9] = v22;
    __b[6] = v22;
    __b[7] = v22;
    __b[4] = v22;
    __b[5] = v22;
    __b[2] = v22;
    __b[3] = v22;
    __b[0] = v22;
    __b[1] = v22;
    CIDFont = (__int16 *)TType1CIDFont::GetCIDFont((const void **)a1);
    TCIDCFFFontSet::TCIDCFFFontSet((TCIDCFFFontSet *)__b, 1, 0, 1, a7, CIDFont[9]);
    *(_QWORD *)&__b[0] = &off_1E61C91E8;
    (*(void (**)(uint64_t, __int32 *, unsigned int *, _OWORD *, uint64_t))(*(_QWORD *)a1 + 264))(a1, v16, a5, __b, 255);
    TCIDCFFFontSet::StreamOut((TCIDCFFFontSet *)__b, (TBufferedStreamingContext *)__s);
    TCIDCFFFontSet::~TCIDCFFFontSet((TCIDCFFFontSet *)__b);
    TBufferedStreamingContext::~TBufferedStreamingContext((TBufferedStreamingContext *)__s);
    goto LABEL_112;
  }
  if (a2)
    v20 = (int)StringToInt(a2) > 2014;
  else
    v20 = 0;
  memset(__b, 170, 0x2E8uLL);
  TBufferedCharStringStreamingContext::TBufferedCharStringStreamingContext((uint64_t)__b, a1, (uint64_t)v16, (uint64_t)a10);
  *(_QWORD *)&__b[0] = off_1E61C90D8;
  *((_QWORD *)&__b[43] + 1) = 0;
  __b[44] = 0uLL;
  BYTE8(__b[45]) = 0;
  *(_QWORD *)((char *)&__b[45] + 12) = 0;
  DWORD1(__b[46]) = 0;
  if (!v20)
  {
    v31 = *((__int16 *)TType1CIDFont::GetCIDFont((const void **)a1) + 9);
    v32 = *(_QWORD *)&__b[44];
    v33 = (uint64_t)(*(_QWORD *)&__b[44] - *((_QWORD *)&__b[43] + 1)) >> 4;
    if (v31 <= v33)
    {
      v24 = (uint64_t)v129;
      if (v31 >= v33)
        goto LABEL_110;
      v48 = *((_QWORD *)&__b[43] + 1) + 16 * v31;
      while (v32 != v48)
      {
        v49 = *(_QWORD *)(v32 - 8);
        *(_QWORD *)(v32 - 8) = 0;
        if (v49)
          MEMORY[0x1B5E0CD14](v49, 0x1000C80BDFB0063);
        v32 -= 16;
      }
      *(_QWORD *)&__b[44] = v48;
    }
    else
    {
      v34 = v31 - v33;
      if (v31 - v33 > (uint64_t)(*((_QWORD *)&__b[44] + 1) - *(_QWORD *)&__b[44]) >> 4)
      {
        if ((v31 & 0x80000000) != 0)
          std::vector<char,TInlineBufferAllocator<char,1024ul>>::__throw_length_error[abi:fe180100]();
        v35 = *((_QWORD *)&__b[44] + 1) - *((_QWORD *)&__b[43] + 1);
        if ((uint64_t)(*((_QWORD *)&__b[44] + 1) - *((_QWORD *)&__b[43] + 1)) >> 3 > v31)
          v31 = v35 >> 3;
        if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF0)
          v36 = 0xFFFFFFFFFFFFFFFLL;
        else
          v36 = v31;
        v37 = (char *)std::__allocate_at_least[abi:fe180100]<std::allocator<CompFDInfo>>((uint64_t)&__b[44] + 8, v36);
        v38 = &v37[16 * v33];
        v40 = &v37[16 * v39];
        bzero(v38, 16 * v34);
        v41 = &v38[16 * v34];
        v42 = *(_QWORD **)&__b[44];
        v43 = (_QWORD *)*((_QWORD *)&__b[43] + 1);
        if (*(_QWORD *)&__b[44] == *((_QWORD *)&__b[43] + 1))
        {
          *((_QWORD *)&__b[43] + 1) = v38;
          *(_QWORD *)&__b[44] = &v38[16 * v34];
          *((_QWORD *)&__b[44] + 1) = v40;
        }
        else
        {
          do
          {
            v44 = *(v42 - 2);
            v42 -= 2;
            *((_QWORD *)v38 - 2) = v44;
            v38 -= 16;
            v45 = v42[1];
            v42[1] = 0;
            *((_QWORD *)v38 + 1) = v45;
          }
          while (v42 != v43);
          v42 = (_QWORD *)*((_QWORD *)&__b[43] + 1);
          v46 = *(_QWORD **)&__b[44];
          *((_QWORD *)&__b[43] + 1) = v38;
          *(_QWORD *)&__b[44] = v41;
          *((_QWORD *)&__b[44] + 1) = v40;
          while (v46 != v42)
          {
            v47 = *(v46 - 1);
            *(v46 - 1) = 0;
            if (v47)
              MEMORY[0x1B5E0CD14](v47, 0x1000C80BDFB0063);
            v46 -= 2;
          }
        }
        v24 = (uint64_t)v129;
        if (v42)
          operator delete(v42);
        goto LABEL_110;
      }
      bzero(*(void **)&__b[44], 16 * v34);
      *(_QWORD *)&__b[44] = v32 + 16 * v34;
    }
    v24 = (uint64_t)v129;
    goto LABEL_110;
  }
  v24 = (uint64_t)v129;
  if (!*(_WORD *)(a1 + 40))
  {
    *(_QWORD *)&v25 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v25 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v158 = v25;
    v159 = v25;
    v156 = v25;
    v157 = v25;
    v154 = v25;
    v155 = v25;
    v152 = v25;
    v153 = v25;
    v150 = v25;
    v151 = v25;
    v148 = v25;
    v149 = v25;
    v146 = v25;
    v147 = v25;
    *(_OWORD *)v144 = v25;
    v145 = v25;
    v26 = (const TFontObjectSurrogate *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 216))(a1);
    *(_WORD *)v143 = -1;
    *(_DWORD *)__p = -1431655766;
    v136 = (const void **)a1;
    v27 = 0;
    if (!TType1CIDFont::GetNextZapCIDMap((const void **)a1, v26, (const unsigned int *)v16, (unsigned __int16 *)v143, (unsigned int *)__s, (unsigned int *)__p))goto LABEL_41;
    do
      v27 += *(_DWORD *)__p;
    while (TType1CIDFont::GetNextZapCIDMap((const void **)a1, v26, (const unsigned int *)v16, (unsigned __int16 *)v143, (unsigned int *)__s, (unsigned int *)__p));
    if (v27)
    {
      if (((MakeFontNameID(void)::nextFontNameID + 1) & 0xFFFE) != 0)
        v28 = (unsigned __int16)(MakeFontNameID(void)::nextFontNameID + 1);
      else
        v28 = 1;
      v127 = v28;
      MakeFontNameID(void)::nextFontNameID = v28;
      v29 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
      v30 = v144;
      MakeFontNameFromID(v144, v29, v127);
    }
    else
    {
LABEL_41:
      v30 = 0;
      v127 = 0;
    }
    __s[0] = 47;
    TBufferedStreamingContext::BufferString((uint64_t)__b, (const unsigned __int8 *)__s, 1uLL);
    v50 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
    TBufferedStreamingContext::BufferString((uint64_t)__b, v50 + 1, *v50);
    TBufferedStreamingContext::BufferString((uint64_t)__b, (const unsigned __int8 *)" /CIDFont resourcestatus {pop pop save true}{false}ifelse\r", 0x3AuLL);
    v139 = (TFontObjectSurrogate *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 216))(a1);
    v135 = *((_DWORD *)TType1CIDFont::GetCIDFont((const void **)a1) + 5);
    *(_QWORD *)v199 = 0xAAAAAAAAAAAAAAAALL;
    *(_QWORD *)&v51 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v51 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)v198 = v51;
    v197 = v51;
    *(_OWORD *)__s = v51;
    v52 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
    TFontObjectTable::TFontObjectTable((TFontObjectTable *)__s, v139, v52, 0, v135);
    v54 = v198[1] + 22;
    v55 = v135 - 22;
    *(_DWORD *)__p = -1;
    *(_DWORD *)v143 = 0;
    if (v30)
    {
      TType1PSFont::FindValueForKey((TType1PSFont *)"/CIDFontName", (const char *)v198[1] + 22, (const char *)(v135 - 22), v143, (unsigned int *)__p, v53);
      v56 = *(_DWORD *)__p;
      if (*(_DWORD *)__p != -1)
      {
        v57 = *(_DWORD *)v143;
        TCIDASCII85EncodableStreamingContext::BufferString((uint64_t)__b, v54, *(unsigned int *)v143);
        v142[0] = 47;
        TBufferedStreamingContext::BufferString((uint64_t)__b, v142, 1uLL);
        TBufferedStreamingContext::BufferString((uint64_t)__b, v30 + 1, *v30);
        v58 = (v57 + v56);
        v54 += v58;
        v55 = (v55 - v58);
      }
      *(_DWORD *)__p = -1;
    }
    TType1PSFont::FindValueForKey((TType1PSFont *)"/XUID", (const char *)v54, (const char *)v55, v143, (unsigned int *)__p, v53);
    if (*(_DWORD *)__p != -1)
    {
      TCIDASCII85EncodableStreamingContext::BufferString((uint64_t)__b, v54, *(unsigned int *)v143);
      v60 = *(_DWORD *)__p;
      v61 = (*(_DWORD *)__p + *(_DWORD *)v143);
      v54 += v61;
      v55 = (v55 - v61);
      if (*(_DWORD *)__p)
      {
        do
        {
          v142[0] = 32;
          TBufferedStreamingContext::BufferString((uint64_t)__b, v142, 1uLL);
          --v60;
        }
        while (v60);
      }
    }
    *(_DWORD *)__p = -1;
    TType1PSFont::FindValueForKey((TType1PSFont *)"/UIDBase", (const char *)v54, (const char *)v55, v143, (unsigned int *)__p, v59);
    if (*(_DWORD *)__p != -1)
    {
      TCIDASCII85EncodableStreamingContext::BufferString((uint64_t)__b, v54, *(unsigned int *)v143);
      v63 = *(_DWORD *)__p;
      v64 = (*(_DWORD *)__p + *(_DWORD *)v143);
      v54 += v64;
      v55 = (v55 - v64);
      --*(_DWORD *)__p;
      if (v63)
      {
        do
        {
          v142[0] = 32;
          TBufferedStreamingContext::BufferString((uint64_t)__b, v142, 1uLL);
          --v63;
        }
        while (v63);
        *(_DWORD *)__p = -1;
      }
    }
    TType1PSFont::FindValueForKey((TType1PSFont *)"%%BeginData:", (const char *)v54, (const char *)v55, v143, (unsigned int *)__p, v62);
    if ((*(_DWORD *)__p - 1) > 0xFFFFFFFD)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)exception = &off_1E61B2D68;
      exception[4] = 5;
    }
    --*(_DWORD *)v143;
    TCIDASCII85EncodableStreamingContext::BufferString((uint64_t)__b, v54, *(unsigned int *)v143);
    v65 = *(_DWORD *)v143;
    v125 = *(_DWORD *)__s;
    *(_QWORD *)&__s[8] = &off_1E6176770;
    TDataReference::DucRefCount((TDataReference *)&__s[8]);
    *(_QWORD *)&v66 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v66 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)v199 = v66;
    *(_OWORD *)v198 = v66;
    v197 = v66;
    *(_OWORD *)__s = v66;
    v67 = *((_DWORD *)TType1CIDFont::GetCIDFont(v136) + 6) - v27;
    snprintf_l(__s, 0x40uLL, 0, "(Binary) %d StartData ", v67);
    v68 = v67 + strlen(__s);
    if ((a3 & 1) != 0)
    {
      v69 = 5 * (v68 >> 2);
      v70 = v68 & 3;
      if (v70)
        v71 = v70 + 1;
      else
        v71 = 0;
      v68 = v71 + v69 + (v71 + v69 + 79) / 0x50u + 45;
    }
    *(_QWORD *)&v72 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v72 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v195 = v72;
    v194 = v72;
    *(_OWORD *)&__p[16] = v72;
    *(_OWORD *)__p = v72;
    snprintf_l(__p, 0x40uLL, 0, " %d Binary Bytes\r", v68);
    if (!v30)
    {
      v73 = strlen(__p);
      v74 = v55 - (v65 + strlen(__s) + v73);
      if (v74 < 0)
      {
        v124 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v124 = &off_1E61B2D68;
        v124[4] = 5;
      }
      if (v74)
      {
        v75 = v74 + 1;
        do
        {
          v143[0] = 32;
          TBufferedStreamingContext::BufferString((uint64_t)__b, v143, 1uLL);
          --v75;
        }
        while (v75 > 1);
      }
    }
    v76 = strlen(__p);
    TCIDASCII85EncodableStreamingContext::BufferString((uint64_t)__b, __p, v76);
    if (a3)
    {
      TBufferedStreamingContext::BufferString((uint64_t)__b, (const unsigned __int8 *)"currentfile /ASCII85Decode filter cvx exec\r", 0x2BuLL);
      BYTE8(__b[45]) = 1;
      *(_QWORD *)((char *)&__b[45] + 12) = 0;
      DWORD1(__b[46]) = 0;
    }
    v77 = strlen(__s);
    TCIDASCII85EncodableStreamingContext::BufferString((uint64_t)__b, (const unsigned __int8 *)__s, v77);
    v78 = *((_DWORD *)TType1CIDFont::GetCIDFont(v136) + 8);
    v79 = v136;
    if (v78)
    {
      *(_QWORD *)v199 = 0xAAAAAAAAAAAAAAAALL;
      *(_QWORD *)&v80 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v80 + 1) = 0xAAAAAAAAAAAAAAAALL;
      *(_OWORD *)v198 = v80;
      v197 = v80;
      *(_OWORD *)__s = v80;
      v81 = (*((uint64_t (**)(const void **))*v136 + 15))(v136);
      TFontObjectTable::TFontObjectTable((TFontObjectTable *)__s, v139, v81, v135, v78);
      TCIDASCII85EncodableStreamingContext::BufferString((uint64_t)__b, v198[1], v78);
      *(_QWORD *)&__s[8] = &off_1E6176770;
      TDataReference::DucRefCount((TDataReference *)&__s[8]);
      v79 = v136;
    }
    v140 = *(unsigned int **)&__b[1];
    v82 = *((_DWORD *)TType1CIDFont::GetCIDFont(v79) + 2);
    v83 = *((int *)TType1CIDFont::GetCIDFont(v136) + 3);
    v133 = 5120 / ((int)v83 + v82);
    v134 = v83 + v82;
    memset(__p, 170, 24);
    std::vector<unsigned char>::vector(__p, v133 * ((int)v83 + v82));
    v84 = 0;
    v85 = 0;
    v86 = 0;
    v87 = v78 + v135;
    v88 = *((unsigned __int16 *)TType1CIDFont::GetCIDFont(v136) + 8);
    *(_WORD *)v142 = 0;
    v131 = v88;
    v132 = v88 + 1;
    v130 = v83;
    v126 = v78 + v135;
    do
    {
      if (v133 >= (__int16)(v132 - v84))
        v89 = v132 - v84;
      else
        v89 = 5120 / ((int)v83 + v82);
      if (!(_WORD)v89)
      {
        v122 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v122 = &off_1E61B2D68;
        v122[4] = 5;
      }
      *(_QWORD *)v199 = 0xAAAAAAAAAAAAAAAALL;
      *(_QWORD *)&v90 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v90 + 1) = 0xAAAAAAAAAAAAAAAALL;
      *(_OWORD *)v198 = v90;
      v197 = v90;
      *(_OWORD *)__s = v90;
      v91 = (*((uint64_t (**)(const void **))*v136 + 15))(v136);
      v138 = v134 * (__int16)v89;
      TFontObjectTable::TFontObjectTable((TFontObjectTable *)__s, v139, v91, v87, v138);
      v137 = v87;
      v92 = v198[1];
      v93 = *(_BYTE **)__p;
      v94 = v85;
      do
      {
        if (v82 >= 1)
        {
          v95 = v82 + 1;
          do
          {
            v96 = *v92++;
            *v93++ = v96;
            --v95;
          }
          while (v95 > 1);
          v84 = *(unsigned __int16 *)v142;
        }
        v97 = BytesToCard(v92, v83);
        v85 = v97;
        if ((_WORD)v84 && ((v140[(unsigned __int16)(v84 - 1) >> 5] << (v84 - 1)) & 0x80000000) == 0)
          v86 = v86 + v94 - v97;
        if ((int)v83 >= 1)
        {
          v98 = v86 + v97;
          v99 = v83 + 1;
          do
          {
            v93[(v99 - 2)] = v98;
            v98 >>= 8;
            --v99;
          }
          while (v99 > 1);
          v84 = *(unsigned __int16 *)v142;
        }
        --v89;
        v92 += v83;
        v93 += v83;
        *(_WORD *)v142 = ++v84;
        v94 = v97;
      }
      while ((_WORD)v89);
      TCIDASCII85EncodableStreamingContext::BufferString((uint64_t)__b, *(const unsigned __int8 **)__p, v138);
      *(_QWORD *)&__s[8] = &off_1E6176770;
      TDataReference::DucRefCount((TDataReference *)&__s[8]);
      v87 = (v138 + v137);
    }
    while (v131 >= (unsigned __int16)v84);
    if (*(_QWORD *)__p)
    {
      *(_QWORD *)&__p[8] = *(_QWORD *)__p;
      operator delete(*(void **)__p);
    }
    *(_DWORD *)__p = -1431655766;
    v100 = *((unsigned __int16 *)TType1CIDFont::GetCIDFont(v136) + 8);
    *(_WORD *)v142 = -1;
    v101 = v82 + v126 + v134 * v100;
    v102 = v136;
    do
    {
      *(_DWORD *)v143 = -1431655766;
      if (TType1CIDFont::GetNextZapCIDMap(v136, v139, v140, (unsigned __int16 *)v142, (unsigned int *)v143, (unsigned int *)__p))
      {
        CIDBytes = *(_DWORD *)v143;
      }
      else
      {
        *(_WORD *)v142 = v100;
        *(_QWORD *)v199 = 0xAAAAAAAAAAAAAAAALL;
        *(_QWORD *)&v104 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v104 + 1) = 0xAAAAAAAAAAAAAAAALL;
        *(_OWORD *)v198 = v104;
        v197 = v104;
        *(_OWORD *)__s = v104;
        v105 = (*((uint64_t (**)(const void **))*v136 + 15))(v136);
        TFontObjectTable::TFontObjectTable((TFontObjectTable *)__s, v139, v105, v101, v130);
        CIDBytes = TType1CIDFont::GetCIDBytes((TType1CIDFont *)&v198[1], (unsigned __int8 **)(unsigned __int16)v130);
        *(_DWORD *)v143 = CIDBytes;
        *(_DWORD *)__p = 0;
        *(_QWORD *)&__s[8] = &off_1E6176770;
        TDataReference::DucRefCount((TDataReference *)&__s[8]);
      }
      v106 = CIDBytes + v135;
      if (CIDBytes + v135 != (_DWORD)v87)
      {
        *(_QWORD *)v199 = 0xAAAAAAAAAAAAAAAALL;
        *(_QWORD *)&v107 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v107 + 1) = 0xAAAAAAAAAAAAAAAALL;
        *(_OWORD *)v198 = v107;
        v197 = v107;
        *(_OWORD *)__s = v107;
        v108 = (*((uint64_t (**)(const void **))*v136 + 15))(v136);
        TFontObjectTable::TFontObjectTable((TFontObjectTable *)__s, v139, v108, v87, v106 - v87);
        TCIDASCII85EncodableStreamingContext::BufferString((uint64_t)__b, v198[1], v106 - v87);
        *(_QWORD *)&__s[8] = &off_1E6176770;
        TDataReference::DucRefCount((TDataReference *)&__s[8]);
        LODWORD(v87) = CIDBytes + v135;
      }
      v87 = (*(_DWORD *)__p + v87);
    }
    while (*(unsigned __int16 *)v142 == 0xFFFF || *(unsigned __int16 *)v142 < v100);
    if (BYTE8(__b[45]))
    {
      memset(__s, 170, 5);
      if (HIDWORD(__b[45]))
      {
        v109 = DWORD1(__b[46]);
        if (HIDWORD(__b[45]) > 3)
        {
          v112 = (HIDWORD(__b[45]) + 1);
        }
        else
        {
          v110 = HIDWORD(__b[45]) - 4;
          do
            v109 <<= 8;
          while (!__CFADD__(v110++, 1));
          DWORD1(__b[46]) = v109;
          HIDWORD(__b[45]) = 4;
          v112 = 5;
        }
        for (i = 4; i != -1; --i)
        {
          __s[i] = v109 % 0x55 + 33;
          v109 /= 0x55u;
        }
        TBufferedStreamingContext::BufferString((uint64_t)__b, (const unsigned __int8 *)__s, v112);
        v114 = HIDWORD(__b[45]) + LODWORD(__b[46]) + 1;
        LODWORD(__b[46]) = v114;
      }
      else
      {
        v114 = __b[46];
      }
      if (v114)
      {
        v143[0] = 13;
        TBufferedStreamingContext::BufferString((uint64_t)__b, v143, 1uLL);
      }
      TBufferedStreamingContext::BufferString((uint64_t)__b, (const unsigned __int8 *)"~>", 2uLL);
      BYTE8(__b[45]) = 0;
      v102 = v136;
    }
    v116 = v125 - v87;
    if (v125 <= v87)
    {
      TBufferedStreamingContext::BufferString((uint64_t)__b, (const unsigned __int8 *)"\r%%EndData\r", 0xBuLL);
    }
    else
    {
      *(_QWORD *)v199 = 0xAAAAAAAAAAAAAAAALL;
      *(_QWORD *)&v117 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v117 + 1) = 0xAAAAAAAAAAAAAAAALL;
      *(_OWORD *)v198 = v117;
      v197 = v117;
      *(_OWORD *)__s = v117;
      v118 = (*((uint64_t (**)(const void **))*v102 + 15))(v102);
      TFontObjectTable::TFontObjectTable((TFontObjectTable *)__s, v139, v118, v87, v116);
      TCIDASCII85EncodableStreamingContext::BufferString((uint64_t)__b, v198[1], v116);
      *(_QWORD *)&__s[8] = &off_1E6176770;
      TDataReference::DucRefCount((TDataReference *)&__s[8]);
    }
    TBufferedStreamingContext::StreamBuffer((uint64_t)__b);
    TBufferedStreamingContext::BufferString((uint64_t)__b, "{restore}if\r", 0xCuLL);
    TCIDASCII85EncodableStreamingContext::BufferString((uint64_t)__b, "\r19 dict dup begin\r/FontType 3 def\r/FontMatrix matrix def\r/FontBBox {0 0 0 0} readonly def\r/PaintType 0 def\r/StrokeWidth 0 def\r/BuildGlyph{save 3 1 roll\r1 index dup\rbegin\r/ShowProc get 3 1 roll\r1 index /CharProcs get exch get exec\r7 -1 roll exec\rend\rrestore\r} bind def\r/BuildChar{1 index /Encoding get exch get\r1 index /BuildGlyph get exec} bind def\r/$SP{3 -1 roll dup /SetupSubFont get exec\rdup setfont\rexch 0 0 2 index stringwidth\r} bind def\r/$SPW{4 -1 roll dup /SetupSubFont get exec\rdup setfont\r3 1 roll 0 0 0 4 2 roll} bind def\r/$SPTW{5 -1 roll dup /SetupSubFont get exec\rdup setfont\r4 1 roll neg  0 3 -1 roll 0} bind def\r/$RP{6 -1 roll dup /SetupSubFont get exec\rdup setfont 5 1 roll\rtranslate -90 rotate 0 0 0 4 2 roll} bind def\r/SetupSubFont{dup /PaintType get 1 index /StrokeWidth get\r3 -1 roll /$SubFontArray get 4 1 roll\r3 index 3 index get\rdup /PaintType known{dup /PaintType get}{0}ifelse\r1 index /StrokeWidth known{1 index /StrokeWidth get}{0}ifelse\r3 index ne exch 4 index ne or\r{dup length 2 add dict begin\r{1 index /FID eq {pop pop}{def}ifelse}forall\r/StrokeWidth exch def\r/PaintType exch def\rcurrentdict end\rdup /CIDFontName known\r{/Anonymous exch /CIDFont defineresource}{/Anonymous exch definefont}ifelse\rdup 4 1 roll put\r}{ pop pop pop get}ifelse\r} bind def\r/ShowProc{systemdict /rectfill known\r{0 setcachelimit}if\r6 -1 roll dup /FontMatrix get exch /FontBBox get aload pop\r4 index transform 4 2 roll\r5 -1 roll transform 4 2 roll\rsetcachedevice\rmoveto dup type /stringtype eq {show}{glyphshow} ifelse\r} bind def\r", 0x5FDu);
    TBufferedStreamingContext::BufferString((uint64_t)__b, (const unsigned __int8 *)"/FontName /", 0xBuLL);
    v119 = strlen(a7);
    TCIDASCII85EncodableStreamingContext::BufferString((uint64_t)__b, (const unsigned __int8 *)a7, v119);
    TBufferedStreamingContext::BufferString((uint64_t)__b, " def\r", 5uLL);
    TBufferedStreamingContext::BufferString((uint64_t)__b, (const unsigned __int8 *)"/Encoding ", 0xAuLL);
    TBufferedStreamingContext::StreamBuffer((uint64_t)__b);
    (*((void (**)(const void **, unsigned int *, _QWORD, _QWORD))*v136 + 32))(v136, v129, 0, *(_QWORD *)&__b[2]);
    TBufferedStreamingContext::BufferString((uint64_t)__b, (const unsigned __int8 *)"/$SubFontArray [", 0x10uLL);
    v120 = (unsigned __int8 *)(*((uint64_t (**)(const void **))*v136 + 14))(v136);
    *(_QWORD *)&v121 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v121 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v206 = v121;
    v205 = v121;
    v204 = v121;
    v203 = v121;
    v202 = v121;
    v201 = v121;
    v200 = v121;
    *(_OWORD *)&v199[80] = v121;
    *(_OWORD *)&v199[64] = v121;
    *(_OWORD *)&v199[48] = v121;
    *(_OWORD *)&v199[32] = v121;
    *(_OWORD *)&v199[16] = v121;
    *(_OWORD *)v199 = v121;
    *(_OWORD *)v198 = v121;
    v197 = v121;
    *(_OWORD *)__s = v121;
    __p[0] = 47;
    TBufferedStreamingContext::BufferString((uint64_t)__b, __p, 1uLL);
    MakeFontNameFromID((unsigned __int8 *)__s, v120, v127);
    TBufferedStreamingContext::BufferString((uint64_t)__b, (const unsigned __int8 *)&__s[1], __s[0]);
    if (v127)
    {
      TBufferedStreamingContext::BufferString((uint64_t)__b, (const unsigned __int8 *)" /", 2uLL);
      TBufferedStreamingContext::BufferString((uint64_t)__b, v120 + 1, *v120);
      TBufferedStreamingContext::BufferString((uint64_t)__b, (const unsigned __int8 *)" dup /CIDFont resourcestatus{3 1 roll pop}if pop", 0x30uLL);
    }
    TBufferedStreamingContext::BufferString((uint64_t)__b, " /CIDFont findresource ", 0x17uLL);
    TBufferedStreamingContext::BufferString((uint64_t)__b, (const unsigned __int8 *)"] def\r", 6uLL);
    TType1CIDFont::StreamCharProcs(v136, 0, (TBufferedStreamingContext *)__b);
    goto LABEL_111;
  }
LABEL_110:
  *(_QWORD *)&__b[45] = a2;
  TType1CIDFont::StreamCIDFontDicts(a1, (uint64_t)__b, a3, v24, a7, (uint64_t)v16, a9, *((uint64_t *)&__b[43] + 1));
LABEL_111:
  *(_QWORD *)&__b[0] = off_1E61C90D8;
  *(_QWORD *)__s = (char *)&__b[43] + 8;
  std::vector<CompFDInfo>::__destroy_vector::operator()[abi:fe180100]((void ***)__s);
  TBufferedCharStringStreamingContext::~TBufferedCharStringStreamingContext((TBufferedCharStringStreamingContext *)__b);
LABEL_112:
  result = v141;
  v141 = 0;
  if (result)
    return MEMORY[0x1B5E0CD14](result, 0x1000C8052888210);
  return result;
}

void sub_1B09D0754(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61,uint64_t a62,uint64_t a63)
{
  __int16 a69;
  _WORD *v71;
  _WORD *exception;

  TFontObjectTable::~TFontObjectTable((TFontObjectTable *)&STACK[0x6D0]);
  if (a2 == 1)
  {
    v71 = __cxa_begin_catch(a1);
    a69 = v71[4];
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E61B2D68;
    exception[4] = v71[4];
  }
  TCIDASCII85EncodableStreamingContext::~TCIDASCII85EncodableStreamingContext((TCIDASCII85EncodableStreamingContext *)&a61);
  if (a27)
    MEMORY[0x1B5E0CD14](a27, 0x1000C8052888210);
  JUMPOUT(0x1B09D0928);
}

void sub_1B09D08EC()
{
  __cxa_end_catch();
  JUMPOUT(0x1B09D08F4);
}

void sub_1B09D0920(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t TType1CIDFont::StreamCIDFontDicts(uint64_t a1, uint64_t a2, int a3, uint64_t a4, const char *a5, uint64_t a6, _DWORD *a7, uint64_t a8)
{
  int v10;
  unsigned int v11;
  int v12;
  unsigned __int16 MappedFDIndex;
  __int128 v14;
  _WORD *CIDFont;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  unsigned int v20;
  _WORD *v21;
  unsigned int v22;
  unsigned __int16 *v23;
  __int16 v24;
  _WORD *v25;
  unsigned int v26;
  unsigned int v27;
  _WORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  int v33;
  unsigned int i;
  uint64_t v35;
  char v36;
  uint64_t v37;
  unint64_t v38;
  __int128 v39;
  uint64_t v40;
  size_t v41;
  unsigned __int8 *v42;
  unsigned __int8 *v43;
  unsigned int *v44;
  unint64_t v45;
  size_t v46;
  uint64_t j;
  uint64_t v48;
  unsigned __int16 *v49;
  int v50;
  int v51;
  _WORD *exception;
  unsigned int v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  unsigned __int8 *v64;
  unsigned __int8 v65;
  unsigned __int8 v66[16];
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  _OWORD v82[16];
  uint64_t v83;

  v83 = *MEMORY[0x1E0C80C00];
  v10 = (*(unsigned __int16 (**)(uint64_t))(*(_QWORD *)a1 + 408))(a1);
  if (!v10)
    goto LABEL_52;
  v11 = 0;
  v12 = 0;
  do
  {
    if (((*(_DWORD *)(a6 + 4 * (v11 >> 5)) << v11) & 0x80000000) != 0)
    {
      LOWORD(v82[0]) = v11;
      MappedFDIndex = TType1CIDFont::GetMappedFDIndex((const void **)a1, (unsigned __int16 *)v82);
      if (v11 == LOWORD(v82[0]))
      {
        if (!*(_WORD *)(a8 + 16 * MappedFDIndex))
          ++v12;
        ++*(_WORD *)(a8 + 16 * MappedFDIndex);
      }
    }
    ++v11;
  }
  while (v10 != v11);
  if (!v12)
  {
LABEL_52:
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E61B2D68;
    exception[4] = 5;
  }
  v64 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  *(_QWORD *)&v14 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v14 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v82[14] = v14;
  v82[15] = v14;
  v82[12] = v14;
  v82[13] = v14;
  v82[10] = v14;
  v82[11] = v14;
  v82[8] = v14;
  v82[9] = v14;
  v82[6] = v14;
  v82[7] = v14;
  v82[4] = v14;
  v82[5] = v14;
  v82[2] = v14;
  v82[3] = v14;
  v82[0] = v14;
  v82[1] = v14;
  CIDFont = TType1CIDFont::GetCIDFont((const void **)a1);
  v16 = a8;
  v60 = (unsigned __int16)CIDFont[9];
  if (CIDFont[9])
  {
    v17 = 0;
    v18 = 0;
    v19 = 0;
    do
    {
      v20 = *(unsigned __int16 *)(v16 + 16 * v17);
      if (*(_WORD *)(v16 + 16 * v17))
      {
        v21 = (_WORD *)(v16 + 16 * v17);
        v21[1] = v19;
        v58 = v20 + 255;
        v22 = (v20 + 255) >> 8;
        v21[3] = v22;
        v23 = v21 + 3;
        if (((MakeFontNameID(void)::nextFontNameID + 1) & 0xFFFE) != 0)
          v24 = MakeFontNameID(void)::nextFontNameID + 1;
        else
          v24 = 1;
        MakeFontNameID(void)::nextFontNameID = v24;
        v21[2] = v24;
        v25 = v21 + 2;
        if (v20 >= 0x101)
        {
          if (v22 <= 2)
            v26 = 2;
          else
            v26 = (v20 + 255) >> 8;
          v27 = v26 - 1;
          do
          {
            if ((++v24 & 0xFFFE) == 0)
              v24 = 1;
            --v27;
          }
          while (v27);
          MakeFontNameID(void)::nextFontNameID = v24;
        }
        v59 = v19;
        v61 = v17;
        v28 = (_WORD *)operator new[]();
        v29 = a8 + 16 * v61;
        v32 = *(_QWORD *)(v29 + 8);
        v31 = (uint64_t *)(v29 + 8);
        v30 = v32;
        *v31 = (uint64_t)v28;
        if (v32)
          MEMORY[0x1B5E0CD14](v30, 0x1000C80BDFB0063);
        v33 = (*(unsigned __int16 (**)(uint64_t))(*(_QWORD *)a1 + 408))(a1);
        if (v33)
        {
          for (i = 0; i != v33; ++i)
          {
            if (((*(_DWORD *)(a6 + 4 * (i >> 5)) << i) & 0x80000000) != 0)
            {
              *(_WORD *)v66 = i;
              if (v18 == (unsigned __int16)TType1CIDFont::GetMappedFDIndex((const void **)a1, (unsigned __int16 *)v66)
                && i == *(unsigned __int16 *)v66)
              {
                *v28++ = i;
              }
            }
          }
        }
        TBufferedStreamingContext::StreamBuffer(a2);
        v35 = *((_QWORD *)TType1CIDFont::GetCIDFont((const void **)a1) + 7) + 488 * v61 + 36;
        MakeFontNameFromID((unsigned __int8 *)v82, v64, (unsigned __int16)*v25);
        if ((*a7 & 0x10000) != 0)
          v36 = 0;
        else
          v36 = a3;
        TType1PSFont::StreamType1Font((_QWORD *)a1, v35, (const char *)v82 + 1, 0, *v31, a3, v36, a2);
        v19 = v59 + (v58 >> 8);
        if (*v23 >= 2u)
        {
          v37 = 512;
          v38 = 1;
          do
          {
            *(_QWORD *)&v39 = 0xAAAAAAAAAAAAAAAALL;
            *((_QWORD *)&v39 + 1) = 0xAAAAAAAAAAAAAAAALL;
            v80 = v39;
            v81 = v39;
            v78 = v39;
            v79 = v39;
            v76 = v39;
            v77 = v39;
            v74 = v39;
            v75 = v39;
            v72 = v39;
            v73 = v39;
            v70 = v39;
            v71 = v39;
            v68 = v39;
            v69 = v39;
            *(_OWORD *)v66 = v39;
            v67 = v39;
            v65 = 47;
            TBufferedStreamingContext::BufferString(a2, &v65, 1uLL);
            MakeFontNameFromID(v66, v64, (unsigned __int16)(*v25 + v38));
            TBufferedStreamingContext::BufferString(a2, &v66[1], v66[0]);
            TBufferedStreamingContext::BufferString(a2, (const unsigned __int8 *)" /", 2uLL);
            TBufferedStreamingContext::BufferString(a2, (const unsigned __int8 *)v82 + 1, LOBYTE(v82[0]));
            TBufferedStreamingContext::BufferString(a2, (const unsigned __int8 *)" findfont dup length dict begin {1 index /FID eq{ pop pop}{def}ifelse}forall /Encoding\r", 0x57uLL);
            TBufferedStreamingContext::StreamBuffer(a2);
            v40 = *v31;
            TBufferedStreamingContext::StreamBuffer(a2);
            (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)a1 + 256))(a1, v40 + v37, 0, *(_QWORD *)(a2 + 32));
            TBufferedStreamingContext::BufferString(a2, "currentdict end definefont pop\r", 0x1FuLL);
            ++v38;
            v37 += 512;
          }
          while (v38 < *v23);
        }
        v17 = v61;
        v16 = a8;
      }
      v18 = ++v17;
    }
    while (v17 != v60);
  }
  TBufferedStreamingContext::BufferString(a2, (const unsigned __int8 *)"%!FontType3-1.0: ", 0x11uLL);
  v41 = strlen(a5);
  TBufferedStreamingContext::BufferString(a2, (const unsigned __int8 *)a5, v41);
  TBufferedStreamingContext::BufferString(a2, "\r19 dict dup begin\r/FontType 3 def\r/FontMatrix matrix def\r/FontBBox {0 0 0 0} readonly def\r/PaintType 0 def\r/StrokeWidth 0 def\r/BuildGlyph{save 3 1 roll\r1 index dup\rbegin\r/ShowProc get 3 1 roll\r1 index /CharProcs get exch get exec\r7 -1 roll exec\rend\rrestore\r} bind def\r/BuildChar{1 index /Encoding get exch get\r1 index /BuildGlyph get exec} bind def\r/$SP{3 -1 roll dup /SetupSubFont get exec\rdup setfont\rexch 0 0 2 index stringwidth\r} bind def\r/$SPW{4 -1 roll dup /SetupSubFont get exec\rdup setfont\r3 1 roll 0 0 0 4 2 roll} bind def\r/$SPTW{5 -1 roll dup /SetupSubFont get exec\rdup setfont\r4 1 roll neg  0 3 -1 roll 0} bind def\r/$RP{6 -1 roll dup /SetupSubFont get exec\rdup setfont 5 1 roll\rtranslate -90 rotate 0 0 0 4 2 roll} bind def\r/SetupSubFont{dup /PaintType get 1 index /StrokeWidth get\r3 -1 roll /$SubFontArray get 4 1 roll\r3 index 3 index get\rdup /PaintType known{dup /PaintType get}{0}ifelse\r1 index /StrokeWidth known{1 index /StrokeWidth get}{0}ifelse\r3 index ne exch 4 index ne or\r{dup length 2 add dict begin\r{1 index /FID eq {pop pop}{def}ifelse}forall\r/StrokeWidth exch def\r/PaintType exch def\rcurrentdict end\rdup /CIDFontName known\r{/Anonymous exch /CIDFont defineresource}{/Anonymous exch definefont}ifelse\rdup 4 1 roll put\r}{ pop pop pop get}ifelse\r} bind def\r/ShowProc{systemdict /rectfill known\r{0 setcachelimit}if\r6 -1 roll dup /FontMatrix get exch /FontBBox get aload pop\r4 index transform 4 2 roll\r5 -1 roll transform 4 2 roll\rsetcachedevice\rmoveto dup type /stringtype eq {show}{glyphshow} ifelse\r} bind def\r", 0x5FDuLL);
  TBufferedStreamingContext::BufferString(a2, (const unsigned __int8 *)"/FontInfo 4 dict dup begin\r", 0x1BuLL);
  TBufferedStreamingContext::BufferString(a2, (const unsigned __int8 *)"/Registry (", 0xBuLL);
  v42 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 320))(a1);
  TBufferedStreamingContext::BufferString(a2, v42 + 1, *v42);
  TBufferedStreamingContext::BufferString(a2, (const unsigned __int8 *)"/) def\r", 7uLL);
  TBufferedStreamingContext::BufferString(a2, (const unsigned __int8 *)"/Ordering (", 0xBuLL);
  v43 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 328))(a1);
  TBufferedStreamingContext::BufferString(a2, v43 + 1, *v43);
  TBufferedStreamingContext::BufferString(a2, (const unsigned __int8 *)"/) def\r", 7uLL);
  TBufferedStreamingContext::BufferString(a2, (const unsigned __int8 *)"/Supplement ", 0xCuLL);
  v44 = (unsigned int *)TType1CIDFont::GetCIDFont((const void **)a1);
  IntToPString(v44[16], (unsigned __int8 *)(a2 + 66));
  TBufferedStreamingContext::BufferString(a2, (const unsigned __int8 *)(a2 + 67), *(unsigned __int8 *)(a2 + 66));
  TBufferedStreamingContext::BufferString(a2, " def\r", 5uLL);
  v45 = *(_WORD *)(*(_QWORD *)(a1 + 32) + 178) & 0x30E;
  if ((*(_WORD *)(*(_QWORD *)(a1 + 32) + 178) & 0x30E) != 0)
  {
    TBufferedStreamingContext::BufferString(a2, (const unsigned __int8 *)"/FSType ", 8uLL);
    IntToPString(v45, (unsigned __int8 *)(a2 + 66));
    TBufferedStreamingContext::BufferString(a2, (const unsigned __int8 *)(a2 + 67), *(unsigned __int8 *)(a2 + 66));
    TBufferedStreamingContext::BufferString(a2, " def\r", 5uLL);
  }
  TBufferedStreamingContext::BufferString(a2, (const unsigned __int8 *)"end readonly def\r", 0x11uLL);
  TBufferedStreamingContext::BufferString(a2, (const unsigned __int8 *)"/FontName /", 0xBuLL);
  v46 = strlen(a5);
  TBufferedStreamingContext::BufferString(a2, (const unsigned __int8 *)a5, v46);
  TBufferedStreamingContext::BufferString(a2, " def\r", 5uLL);
  TBufferedStreamingContext::BufferString(a2, (const unsigned __int8 *)"/Encoding ", 0xAuLL);
  TBufferedStreamingContext::StreamBuffer(a2);
  (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)a1 + 256))(a1, a4, 0, *(_QWORD *)(a2 + 32));
  TBufferedStreamingContext::BufferString(a2, (const unsigned __int8 *)"/$SubFontArray [", 0x10uLL);
  if ((_DWORD)v60)
  {
    for (j = 0; j != v60; ++j)
    {
      if (*(_WORD *)(a8 + 16 * j))
      {
        v48 = a8 + 16 * j;
        v50 = *(unsigned __int16 *)(v48 + 6);
        v49 = (unsigned __int16 *)(v48 + 6);
        if (v50)
        {
          v51 = 0;
          do
          {
            v66[0] = 47;
            TBufferedStreamingContext::BufferString(a2, v66, 1uLL);
            MakeFontNameFromID((unsigned __int8 *)v82, v64, (unsigned __int16)(*(_WORD *)(a8 + 16 * j + 4) + v51));
            TBufferedStreamingContext::BufferString(a2, (const unsigned __int8 *)v82 + 1, LOBYTE(v82[0]));
            TBufferedStreamingContext::BufferString(a2, (const unsigned __int8 *)" findfont", 9uLL);
            v66[0] = 32;
            TBufferedStreamingContext::BufferString(a2, v66, 1uLL);
            ++v51;
          }
          while (*v49 > (unsigned __int16)v51);
        }
      }
    }
  }
  TBufferedStreamingContext::BufferString(a2, (const unsigned __int8 *)"] def\r", 6uLL);
  return TType1CIDFont::StreamCharProcs((const void **)a1, a8, (TBufferedStreamingContext *)a2);
}

uint64_t TType1CIDFont::GetGlyphCountForStreaming(const void **this)
{
  return *((unsigned __int16 *)TType1CIDFont::GetCIDFont(this) + 8);
}

uint64_t TType1CIDFont::StreamPrivateFontDict(const void **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  __int128 v7;
  const TFontObjectSurrogate *v8;
  uint64_t v9;
  unsigned int *v10;
  unint64_t v11;
  char *v12;
  int v13;
  int v14;
  int v15;
  unsigned int *v16;
  char *v17;
  unsigned int *v18;
  char *v19;
  unsigned int *v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int *v23;
  char *v24;
  char *v25;
  char *v26;
  unsigned int *v27;
  const unsigned __int8 *v28;
  unsigned int v29;
  char *v30;
  int v31;
  int v32;
  int v33;
  size_t v34;
  __int128 v35;
  const TFontObjectSurrogate *v36;
  uint64_t v37;
  unint64_t v38;
  int v39;
  const unsigned __int8 *v40;
  int v41;
  int v42;
  __int128 v43;
  const TFontObjectSurrogate *v44;
  uint64_t v45;
  unint64_t v46;
  unsigned __int8 *v47;
  unint64_t v48;
  unsigned __int8 *v49;
  uint64_t v50;
  int v51;
  int v52;
  unsigned __int8 *v53;
  uint64_t v54;
  unsigned __int8 v55;
  uint64_t result;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  const char *v60;
  _BOOL4 v61;
  int v62;
  uint64_t v63;
  __int16 v64;
  int v65;
  _WORD *CIDFont;
  int v67;
  unsigned int v68;
  int v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  char v74;
  __int128 v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  int v79;
  int v80;
  __int128 v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _WORD *v85;
  _WORD *v86;
  _WORD *exception;
  _WORD *v88;
  uint64_t v89;
  int v90;
  int v91;
  uint64_t v92;
  const unsigned __int8 *i;
  int v94;
  TFontObjectSurrogate *v95;
  int v96;
  unsigned int v97;
  int v98;
  int v99;
  int v100;
  int v101;
  int v102;
  unsigned __int8 *v103;
  _BOOL4 v104;
  const void **v105;
  void *__p;
  _BYTE *v107;
  unint64_t v108;
  char *v109;
  unsigned __int8 v110[8];
  unsigned int v111[4];
  __int128 v112;
  __int128 v113;
  unint64_t v114;
  unsigned __int8 v115[16];
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  uint64_t v131;

  v131 = *MEMORY[0x1E0C80C00];
  v6 = *((_QWORD *)TType1CIDFont::GetCIDFont(a1) + 7);
  v109 = (char *)0xAAAAAAAAAAAAAAAALL;
  v105 = a1;
  (*((void (**)(const void **, char **, char *))*a1 + 37))(a1, &v109, (char *)&v109 + 4);
  *(_QWORD *)&v118 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v7 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v117 = v7;
  *(_OWORD *)v115 = v7;
  v116 = v7;
  v8 = (const TFontObjectSurrogate *)(*((uint64_t (**)(const void **))*v105 + 27))(v105);
  v9 = (*((uint64_t (**)(const void **))*v105 + 15))(v105);
  TFontObjectTable::TFontObjectTable((TFontObjectTable *)v115, v8, v9, 0, (int)v109);
  v11 = ((_DWORD)v109 - 22);
  LODWORD(v109) = (_DWORD)v109 - 22;
  v89 = 0x4FBCDA3AC10C9715 * ((a2 - 36 - v6) >> 3);
  v12 = (char *)(*((_QWORD *)&v117 + 1) + 22);
  v111[0] = -1431655766;
  LODWORD(__p) = -1431655766;
  if (((__int16)v89 & 0x80000000) == 0)
  {
    LOWORD(v13) = 0;
    do
    {
      v12 = (char *)TType1PSFont::ScanForKey((TType1PSFont *)"%ADOBeginFontDict", v12, (const unsigned __int8 *)&v109, (unsigned int *)&__p, v111, v10);
      v13 = (__int16)(v13 + 1);
    }
    while (v13 <= (__int16)v89);
    v11 = v109;
  }
  TType1PSFont::FindValueForKey((TType1PSFont *)"/Private", v12, (const char *)v11, &__p, v111, v10);
  v14 = (int)__p;
  v15 = StringToInt(&v12[__p]);
  v17 = (char *)TType1PSFont::ScanForKey((TType1PSFont *)"dict", &v12[v111[0] + v14], (const unsigned __int8 *)&v109, (unsigned int *)&__p, v111, v16);
  v19 = (char *)TType1PSFont::ScanForKey((TType1PSFont *)"begin", v17, (const unsigned __int8 *)&v109, (unsigned int *)&__p, v111, v18);
  HIDWORD(v109) = (_DWORD)v109;
  TType1PSFont::ScanForKey((TType1PSFont *)"end", v19, (const unsigned __int8 *)&v109, (unsigned int *)&__p, v111, v20);
  v21 = __p;
  LODWORD(v109) = HIDWORD(v109);
  TType1PSFont::ScanForKey((TType1PSFont *)"%ADOEndFontDict", v19, (const unsigned __int8 *)&v109, (unsigned int *)&__p, v111, v22);
  v91 = (__int16)v89;
  if (__p < v21)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E61B2D68;
    exception[4] = 5;
  }
  v24 = &v19[v21];
  v25 = &v19[v21];
  if (*(_WORD *)(a2 + 56) != 4)
  {
    TType1PSFont::FindValueForKey((TType1PSFont *)"/lenIV", v19, (const char *)HIDWORD(v109), &__p, v111, v23);
    if (v111[0] == -1)
    {
      v88 = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)v88 = &off_1E61B2D68;
      v88[4] = 5;
    }
    v25 = &v19[__p];
  }
  *(_DWORD *)&v110[4] = 0;
  v26 = &v19[v21];
  if (*(_BYTE *)(a2 - 36))
  {
    TType1PSFont::ScanForKey((TType1PSFont *)"/RunInt", v19, (const unsigned __int8 *)&v109 + 4, (unsigned int *)&__p, (unsigned int *)&v110[4], v23);
    v26 = &v19[__p];
    TType1PSFont::ScanForKey((TType1PSFont *)"def", v26, (const unsigned __int8 *)&v109 + 4, (unsigned int *)&__p, (unsigned int *)&v110[4], v27);
    *(_DWORD *)&v110[4] += (_DWORD)__p;
  }
  TBufferedStreamingContext::BufferString(a3, (const unsigned __int8 *)"dup /Private ", 0xDuLL);
  v103 = (unsigned __int8 *)(a3 + 66);
  IntToPString((v15 + 5), (unsigned __int8 *)(a3 + 66));
  v28 = (const unsigned __int8 *)(a3 + 67);
  TBufferedStreamingContext::BufferString(a3, (const unsigned __int8 *)(a3 + 67), *(unsigned __int8 *)(a3 + 66));
  TBufferedStreamingContext::BufferString(a3, " dict dup begin\r", 0x10uLL);
  for (i = (const unsigned __int8 *)(a3 + 67); v25 != v24 || v26 != v24; v19 = &v30[v29])
  {
    if (v25 >= v26)
    {
      TBufferedStreamingContext::BufferString(a3, (const unsigned __int8 *)v19, ((_DWORD)v26 - (_DWORD)v19));
      v29 = *(_DWORD *)&v110[4];
      v111[0] = *(_DWORD *)&v110[4] - 1;
      v31 = *(_DWORD *)&v110[4];
      if (*(_DWORD *)&v110[4])
      {
        do
        {
          v110[0] = 32;
          TBufferedStreamingContext::BufferString(a3, v110, 1uLL);
          --v31;
        }
        while (v31);
        v111[0] = -1;
      }
      v30 = v26;
      v26 = v24;
      v28 = (const unsigned __int8 *)(a3 + 67);
    }
    else
    {
      TBufferedStreamingContext::BufferString(a3, (const unsigned __int8 *)v19, ((_DWORD)v25 - (_DWORD)v19));
      v110[0] = 52;
      TBufferedStreamingContext::BufferString(a3, v110, 1uLL);
      v29 = v111[0];
      v30 = v25;
      v25 = v24;
    }
  }
  TBufferedStreamingContext::BufferString(a3, (const unsigned __int8 *)v19, ((_DWORD)v24 - (_DWORD)v19));
  *(_QWORD *)&v115[8] = &off_1E6176770;
  TDataReference::DucRefCount((TDataReference *)&v115[8]);
  TBufferedStreamingContext::BufferString(a3, (const unsigned __int8 *)"/RD {string currentfile exch readstring pop} executeonly def\r", 0x3DuLL);
  TBufferedStreamingContext::BufferString(a3, (const unsigned __int8 *)"/ND {noaccess def} executeonly def\r", 0x23uLL);
  TBufferedStreamingContext::BufferString(a3, (const unsigned __int8 *)"/NP {noaccess put} executeonly def\r", 0x23uLL);
  v98 = *(unsigned __int16 *)(a2 - 32);
  TBufferedStreamingContext::BufferString(a3, (const unsigned __int8 *)"/Subrs ", 7uLL);
  IntToPString(v98, v103);
  TBufferedStreamingContext::BufferString(a3, v28, *(unsigned __int8 *)(a3 + 66));
  TBufferedStreamingContext::BufferString(a3, (const unsigned __int8 *)" array\r", 7uLL);
  v96 = *(__int16 *)(a2 - 34);
  v32 = *(__int16 *)(a2 + 56);
  v33 = *((_DWORD *)TType1CIDFont::GetCIDFont(v105) + 5);
  v107 = (_BYTE *)0xAAAAAAAAAAAAAAAALL;
  v108 = 0xAAAAAAAAAAAAAAAALL;
  if (v32 == 4)
    v34 = 0;
  else
    v34 = 24;
  __p = (void *)0xAAAAAAAAAAAAAAAALL;
  std::vector<unsigned char>::vector(&__p, v34);
  v102 = v32;
  *(_QWORD *)&v118 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v35 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v35 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v117 = v35;
  *(_OWORD *)v115 = v35;
  v116 = v35;
  v36 = (const TFontObjectSurrogate *)(*((uint64_t (**)(const void **))*v105 + 27))(v105);
  v37 = (*((uint64_t (**)(const void **))*v105 + 15))(v105);
  TFontObjectTable::TFontObjectTable((TFontObjectTable *)v115, v36, v37, (*(_DWORD *)(a2 - 28) + v33), v96 + v96 * v98);
  if (v98)
  {
    v38 = 0;
    v39 = 0;
    v40 = (const unsigned __int8 *)*((_QWORD *)&v117 + 1);
    v94 = v33 - 1;
    v100 = v102 & ~(v102 >> 31);
    do
    {
      v41 = BytesToCard(v40, v96);
      v40 += v96;
      v42 = BytesToCard(v40, v96);
      v114 = 0xAAAAAAAAAAAAAAAALL;
      *(_QWORD *)&v43 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v43 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v112 = v43;
      v113 = v43;
      *(_OWORD *)v111 = v43;
      v44 = (const TFontObjectSurrogate *)(*((uint64_t (**)(const void **))*v105 + 27))(v105);
      v45 = (*((uint64_t (**)(const void **))*v105 + 15))(v105);
      v46 = (v42 - v41);
      TFontObjectTable::TFontObjectTable((TFontObjectTable *)v111, v44, v45, (v94 + v41), v46);
      v47 = (unsigned __int8 *)*((_QWORD *)&v113 + 1);
      TBufferedStreamingContext::BufferString(a3, (const unsigned __int8 *)"dup ", 4uLL);
      IntToPString(v38, v103);
      TBufferedStreamingContext::BufferString(a3, i, *(unsigned __int8 *)(a3 + 66));
      v110[4] = 32;
      TBufferedStreamingContext::BufferString(a3, &v110[4], 1uLL);
      v48 = (int)v46 - v100;
      IntToPString((v46 - v100 + 4), v103);
      TBufferedStreamingContext::BufferString(a3, i, *(unsigned __int8 *)(a3 + 66));
      TBufferedStreamingContext::BufferString(a3, " RD ", 4uLL);
      if (v102 == 4)
      {
        TBufferedStreamingContext::BufferString(a3, v47, v46);
      }
      else if ((unsigned __int16)(v102 - 1) > 2u)
      {
        if (v102 != -1)
        {
          v86 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v86 = &off_1E61B2D68;
          v86[4] = 5;
        }
      }
      else
      {
        v49 = (unsigned __int8 *)__p;
        if (v48 > v107 - (_BYTE *)__p)
        {
          std::vector<unsigned char>::__append((unint64_t *)&__p, v48 - (v107 - (_BYTE *)__p));
          v49 = (unsigned __int8 *)__p;
        }
        LenIVDecrypt(v49, v47, v46, v102);
        v50 = 0;
        *(_DWORD *)&v110[4] = 0;
        v51 = 4330;
        do
        {
          v52 = v110[v50 + 4] ^ ((unsigned __int16)(v51 & 0xFF00) >> 8);
          v51 = 22719 - 12691 * (v51 + (v110[v50 + 4] ^ ((unsigned __int16)(v51 & 0xFF00) >> 8)));
          v110[v50++ + 4] = v52;
        }
        while (v50 != 4);
        TBufferedStreamingContext::BufferString(a3, &v110[4], 4uLL);
        if ((_DWORD)v46 != v100)
        {
          v53 = v49;
          v54 = (v46 - v100);
          do
          {
            v55 = *v53 ^ ((unsigned __int16)(v51 & 0xFF00) >> 8);
            *v53++ = v55;
            v51 = 22719 - 12691 * (v51 + v55);
            --v54;
          }
          while (v54);
        }
        TBufferedStreamingContext::BufferString(a3, v49, (v46 - v100));
      }
      TBufferedStreamingContext::BufferString(a3, " NP\r", 4uLL);
      *(_QWORD *)&v111[2] = &off_1E6176770;
      TDataReference::DucRefCount((TDataReference *)&v111[2]);
      v38 = (__int16)++v39;
    }
    while ((int)v38 < v98);
  }
  TBufferedStreamingContext::BufferString(a3, (const unsigned __int8 *)"ND\r", 3uLL);
  *(_QWORD *)&v115[8] = &off_1E6176770;
  TDataReference::DucRefCount((TDataReference *)&v115[8]);
  if (__p)
  {
    v107 = __p;
    operator delete(__p);
  }
  TBufferedStreamingContext::StreamBuffer(a3);
  result = (*((uint64_t (**)(const void **))*v105 + 27))(v105);
  v95 = (TFontObjectSurrogate *)result;
  v57 = *(_QWORD *)(a3 + 696);
  if ((__int16)v89 >= (unint64_t)((*(_QWORD *)(a3 + 704) - v57) >> 4))
  {
    __break(1u);
  }
  else
  {
    v92 = *(_QWORD *)(a3 + 16);
    v58 = *((_QWORD *)TType1CIDFont::GetCIDFont(v105) + 7);
    v59 = v58 + 488 * (__int16)v89;
    v61 = (*(_DWORD *)(v59 + 148) || *(_DWORD *)(v59 + 156))
       && (v60 = *(const char **)(a3 + 720)) != 0
       && (int)StringToInt(v60) > 2014;
    v62 = *(unsigned __int16 *)(v58 + 488 * (__int16)v89 + 92);
    TBufferedStreamingContext::BufferString(a3, (const unsigned __int8 *)"2 index /CharStrings ", 0x15uLL);
    IntToPString(*(unsigned __int16 *)(v57 + 16 * (__int16)v89) + 2, v103);
    TBufferedStreamingContext::BufferString(a3, i, *(unsigned __int8 *)(a3 + 66));
    TBufferedStreamingContext::BufferString(a3, " dict dup begin\r", 0x10uLL);
    TBufferedStreamingContext::StreamBuffer(a3);
    v63 = 0;
    LODWORD(__p) = 0;
    v64 = 4330;
    do
    {
      v65 = *((unsigned __int8 *)&__p + v63) ^ ((unsigned __int16)(v64 & 0xFF00) >> 8);
      v64 = 22719 - 12691 * (v64 + (*((_BYTE *)&__p + v63) ^ ((unsigned __int16)(v64 & 0xFF00) >> 8)));
      *((_BYTE *)&__p + v63++) = v65;
    }
    while (v63 != 4);
    CIDFont = TType1CIDFont::GetCIDFont(v105);
    v67 = (unsigned __int16)CIDFont[8];
    if (CIDFont[8])
    {
      v68 = 0;
      v69 = 0;
      v70 = v62 != 4 || v61;
      v101 = v70;
      v90 = (unsigned __int16)CIDFont[8];
      do
      {
        if (!v68 || ((*(_DWORD *)(v92 + 4 * (v68 >> 5)) << v68) & 0x80000000) != 0)
        {
          memset(v110, 170, sizeof(v110));
          v71 = (*((uint64_t (**)(const void **, _QWORD, unsigned __int8 *, unsigned __int8 *))*v105 + 42))(v105, (unsigned __int16)v68, &v110[4], v110);
          v72 = v71;
          if (!v68 || (_DWORD)v71 == v91)
          {
            v97 = v68;
            v104 = v68 != 0;
            v99 = v71;
            do
            {
              v73 = v69;
              *(_WORD *)(a3 + 522) = 4;
              *(_WORD *)(a3 + 520) = v64;
              *(_DWORD *)(a3 + 544) = 0;
              *(_WORD *)(a3 + 529) = 257;
              *(_BYTE *)(a3 + 548) = 0;
              *(_OWORD *)(a3 + 648) = 0u;
              *(_OWORD *)(a3 + 664) = 0u;
              *(_DWORD *)(a3 + 680) = 0;
              std::vector<unsigned char>::__insert_with_size[abi:fe180100]<unsigned char const*,unsigned char const*>(a3 + 136, *(char **)(a3 + 144), (char *)&__p, (char *)&__p + 4, 4);
              v74 = v104 | v69;
              if (((v104 | v69) & 1) != 0)
              {
                *(_QWORD *)&v75 = 0xAAAAAAAAAAAAAAAALL;
                *((_QWORD *)&v75 + 1) = 0xAAAAAAAAAAAAAAAALL;
                v129 = v75;
                v130 = v75;
                v127 = v75;
                v128 = v75;
                v125 = v75;
                v126 = v75;
                v123 = v75;
                v124 = v75;
                v121 = v75;
                v122 = v75;
                v119 = v75;
                v120 = v75;
                v117 = v75;
                v118 = v75;
                *(_OWORD *)v115 = v75;
                v116 = v75;
                (*((void (**)(const void **, _QWORD, unsigned __int8 *))*v105 + 29))(v105, (unsigned __int16)v97, v115);
                TBufferedStreamingContext::BufferString(a3, &v115[1], v115[0]);
              }
              else
              {
                TBufferedStreamingContext::BufferString(a3, (const unsigned __int8 *)"/.notdef", 8uLL);
              }
              if (v101)
              {
                v76 = *(unsigned int *)v110;
                *(_QWORD *)v115 = 0xAAAAAAAAAAAAAAAALL;
                (*((void (**)(unsigned __int8 *__return_ptr, const void **, uint64_t, _QWORD, _QWORD))*v105
                 + 44))(v115, v105, v72, *(unsigned int *)&v110[4], *(unsigned int *)v110);
                v77 = *(char **)v115;
                v78 = *((_QWORD *)TType1CIDFont::GetCIDFont(v105) + 7);
                v79 = *(unsigned __int16 *)(v78 + 488 * v99 + 92);
                if ((unsigned __int16)(v79 - 1) > 3u)
                {
                  if ((unsigned __int16)(v79 - 1) <= 0xFFFDu)
                  {
                    v85 = __cxa_allocate_exception(0x10uLL);
                    *(_QWORD *)v85 = &off_1E61B2D68;
                    v85[4] = 5;
                  }
                }
                else
                {
                  v76 = (v76 - v79);
                }
                *(_QWORD *)v111 = 0xAAAAAAAAAAAAAAAALL;
                if (((*((uint64_t (**)(const void **, uint64_t, char *, uint64_t, unsigned int *, unsigned int *))*v105
                       + 52))(v105, v72, v77, v76, v111, &v111[1]) & 1) == 0)
                {
                  v83 = v78 + 488 * v99;
                  v111[0] = *(_DWORD *)(v83 + 148);
                  v111[1] = *(_DWORD *)(v83 + 156);
                  TBufferedCharStringStreamingContext::BufferCharData((TBufferedCharStringStreamingContext *)a3, 0xDu, 2, (int *)v111);
                }
                TBufferedCharStringStreamingContext::CharBufferAndEncrypt((TBufferedCharStringStreamingContext *)a3, v77, v76);
                v84 = *(_QWORD *)v115;
                *(_QWORD *)v115 = 0;
                if (v84)
                  MEMORY[0x1B5E0CD14](v84, 0x1000C8077774924);
              }
              else
              {
                v80 = *((_DWORD *)TType1CIDFont::GetCIDFont(v105) + 5);
                *(_QWORD *)&v118 = 0xAAAAAAAAAAAAAAAALL;
                *(_QWORD *)&v81 = 0xAAAAAAAAAAAAAAAALL;
                *((_QWORD *)&v81 + 1) = 0xAAAAAAAAAAAAAAAALL;
                v117 = v81;
                *(_OWORD *)v115 = v81;
                v116 = v81;
                v82 = (*((uint64_t (**)(const void **))*v105 + 15))(v105);
                TFontObjectTable::TFontObjectTable((TFontObjectTable *)v115, v95, v82, (*(_DWORD *)&v110[4] + v80), *(int *)v110);
                std::vector<unsigned char>::__insert_with_size[abi:fe180100]<unsigned char const*,unsigned char const*>(a3 + 136, *(char **)(a3 + 144), *((char **)&v117 + 1), (char *)(*((_QWORD *)&v117 + 1) + *(unsigned int *)v110), *(unsigned int *)v110);
                *(_QWORD *)&v115[8] = &off_1E6176770;
                TDataReference::DucRefCount((TDataReference *)&v115[8]);
              }
              v115[0] = 32;
              TBufferedStreamingContext::BufferString(a3, v115, 1uLL);
              TBufferedStreamingContext::BufferInt((TBufferedStreamingContext *)a3, *(_DWORD *)(a3 + 144) - *(_DWORD *)(a3 + 136));
              TCIDASCII85EncodableStreamingContext::BufferString(a3, " RD ", 4u);
              TBufferedStreamingContext::StreamBuffer(a3);
              std::vector<unsigned char>::__insert_with_size[abi:fe180100]<unsigned char const*,unsigned char const*>(a3 + 136, *(char **)(a3 + 144), " ND\r", "", 4);
              TBufferedCharStringStreamingContext::BufferCharBuffer(a3);
              v69 = 1;
            }
            while ((v74 & 1) == 0);
            v69 = v104 & v73;
            v67 = v90;
            v68 = v97;
          }
        }
        ++v68;
      }
      while (v68 != v67);
    }
    TBufferedStreamingContext::BufferString(a3, "end\r", 4uLL);
    TBufferedStreamingContext::BufferString(a3, (const unsigned __int8 *)"end readonly put\r", 0x11uLL);
    return TBufferedStreamingContext::StreamBuffer(a3);
  }
  return result;
}

void sub_1B09D2010()
{
  __cxa_end_catch();
  JUMPOUT(0x1B09D2024);
}

uint64_t TType1ToType2CharStringConversionContext::GetOutputType(TType1ToType2CharStringConversionContext *this)
{
  return 2;
}

void std::vector<int>::__append(std::vector<int> *this, std::vector<int>::size_type __n)
{
  std::__compressed_pair<int *> *p_end_cap;
  int *v5;
  int *value;
  int *end;
  std::vector<int>::pointer begin;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  int *v16;
  int *v17;
  int v18;

  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  v5 = value;
  end = p_end_cap[-1].__value_;
  if (__n <= value - end)
  {
    if (__n)
    {
      bzero(p_end_cap[-1].__value_, 4 * __n);
      end += __n;
    }
    this->__end_ = end;
  }
  else
  {
    begin = this->__begin_;
    v9 = (char *)end - (char *)this->__begin_;
    v10 = __n + (v9 >> 2);
    if (v10 >> 62)
      std::vector<char,TInlineBufferAllocator<char,1024ul>>::__throw_length_error[abi:fe180100]();
    v11 = v9 >> 2;
    v12 = (char *)v5 - (char *)begin;
    if (v12 >> 1 > v10)
      v10 = v12 >> 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL)
      v13 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    if (v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:fe180100]<std::allocator<int>>((uint64_t)p_end_cap, v13);
      begin = this->__begin_;
      end = this->__end_;
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[4 * v11];
    v16 = (int *)&v14[4 * v13];
    bzero(v15, 4 * __n);
    v17 = (int *)&v15[4 * __n];
    while (end != begin)
    {
      v18 = *--end;
      *((_DWORD *)v15 - 1) = v18;
      v15 -= 4;
    }
    this->__begin_ = (std::vector<int>::pointer)v15;
    this->__end_ = v17;
    this->__end_cap_.__value_ = v16;
    if (begin)
      operator delete(begin);
  }
}

void PurgeTFontCache(const char *a1)
{
  os_unfair_lock_s *v2;

  pthread_once(&TLockedLRUCache<TFontCacheNode,48ul>::GetCache(void)::once, (void (*)(void))TLockedLRUCache<TFontCacheNode,48ul>::CreateCache);
  v2 = (os_unfair_lock_s *)TLockedLRUCache<TFontCacheNode,48ul>::sSharedCache;
  os_unfair_lock_lock((os_unfair_lock_t)TLockedLRUCache<TFontCacheNode,48ul>::sSharedCache + 1828);
  TFontCache::Purge((TFontCache *)&v2, a1);
  os_unfair_lock_unlock(v2 + 1828);
}

void sub_1B09D21B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, os_unfair_lock_s *a10)
{
  os_unfair_lock_unlock(a10 + 1828);
  _Unwind_Resume(a1);
}

void TFontCache::Purge(TFontCache *this, const char *a2)
{
  __int128 v3;
  uint64_t *Node;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _OWORD v12[9];
  unint64_t v13;
  uint64_t v14;
  timespec v15;

  v14 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    v13 = 0xAAAAAAAAAAAAAAAALL;
    *(_QWORD *)&v3 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v12[7] = v3;
    v12[8] = v3;
    v12[5] = v3;
    v12[6] = v3;
    v12[3] = v3;
    v12[4] = v3;
    v12[1] = v3;
    v12[2] = v3;
    v12[0] = v3;
    v15.tv_sec = 0;
    v15.tv_nsec = 0;
    TFontCacheNode::TFontCacheNode((TFontCacheNode *)v12, a2, v15, -1);
    Node = TLRUCacheImp<TFontCacheNode,48ul>::FindNode(*(_QWORD *)this, (uint64_t)v12);
    if (Node)
    {
      v5 = (uint64_t)Node;
      v6 = (_QWORD *)Node[15];
      v7 = (_QWORD *)Node[16];
      if (v6 != v7)
      {
        while ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*v6 + 16))(*v6) == 1)
        {
          if (++v6 == v7)
          {
            TLRUCacheImp<TFontCacheNode,48ul>::RemoveNode(*(_QWORD *)this, v5);
            break;
          }
        }
      }
    }
    TFontCacheNode::~TFontCacheNode((TFontCacheNode *)v12);
  }
  else
  {
    v8 = *(_QWORD *)this;
    if (*(_QWORD *)this)
    {
      v9 = (_QWORD *)(v8 + 152 * *(_QWORD *)(v8 + 7296));
      do
      {
        v10 = (_QWORD *)v9[15];
        v11 = (_QWORD *)v9[16];
        if (v10 != v11)
        {
          while ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*v10 + 16))(*v10) == 1)
          {
            if (++v10 == v11)
            {
              TLRUCacheImp<TFontCacheNode,48ul>::RemoveNode(*(_QWORD *)this, (uint64_t)v9);
              v8 = *(_QWORD *)this;
              v9 = (_QWORD *)(*(_QWORD *)this + 7296);
              goto LABEL_17;
            }
          }
          v8 = *(_QWORD *)this;
        }
        if ((_QWORD *)(v8 + 152 * *(_QWORD *)(v8 + 7304)) == v9)
          break;
LABEL_17:
        v9 = (_QWORD *)(v8 + 152 * *v9);
      }
      while (v8);
    }
  }
}

void sub_1B09D2340(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  TFontCacheNode::~TFontCacheNode((TFontCacheNode *)&a9);
  _Unwind_Resume(a1);
}

void dFPPrintTFontCache(void)
{
  os_unfair_lock_s *v0;

  pthread_once(&TLockedLRUCache<TFontCacheNode,48ul>::GetCache(void)::once, (void (*)(void))TLockedLRUCache<TFontCacheNode,48ul>::CreateCache);
  v0 = (os_unfair_lock_s *)((char *)TLockedLRUCache<TFontCacheNode,48ul>::sSharedCache + 7312);
  os_unfair_lock_lock((os_unfair_lock_t)TLockedLRUCache<TFontCacheNode,48ul>::sSharedCache + 1828);
  os_unfair_lock_unlock(v0);
}

void MCacheData::~MCacheData(MCacheData *this)
{
  JUMPOUT(0x1B5E0CD38);
}

__n128 std::atomic_exchange[abi:fe180100]<MCacheData>@<Q0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, _OWORD *a3@<X8>)
{
  std::__sp_mut *sp_mut;
  uint64_t v7;
  uint64_t v8;
  __n128 result;

  sp_mut = std::__get_sp_mut(a1);
  std::__sp_mut::lock(sp_mut);
  v7 = *a1;
  *a1 = *a2;
  *a2 = v7;
  v8 = a1[1];
  a1[1] = a2[1];
  a2[1] = v8;
  std::__sp_mut::unlock(sp_mut);
  result = *(__n128 *)a2;
  *a3 = *(_OWORD *)a2;
  *a2 = 0;
  a2[1] = 0;
  return result;
}

uint64_t TFontData::GetFontData(TFontData *this, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = (*(uint64_t (**)(TFontData *))(*(_QWORD *)this + 56))(this);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5 + 32))(v5, a2, a3);
}

void `non-virtual thunk to'TTTCData::~TTTCData(TTTCData *this)
{
  TTTCData::~TTTCData((TTTCData *)((char *)this - 16));
}

{
  TTTCData::~TTTCData((TTTCData *)((char *)this - 16));
  JUMPOUT(0x1B5E0CD38);
}

uint64_t TTTCData::GetKind(TTTCData *this)
{
  return 3;
}

_DWORD *MapTTCHeader(_DWORD *a1, unint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  _DWORD *exception;

  v2 = 0;
  if (a1 && a2 >= 0x10)
  {
    v3 = a1[2];
    if (v3)
    {
      v4 = bswap32(v3);
      if (4 * (unint64_t)(v4 - 1) + 16 > a2)
      {
LABEL_13:
        exception = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)exception = &off_1E6176998;
        exception[2] = 4;
      }
      v5 = 0;
      if (v4 <= 1)
        v4 = 1;
      v6 = 4 * v4;
      do
      {
        if ((int)bswap32(a1[v5 / 4 + 3]) >= a2)
          goto LABEL_13;
        v5 += 4;
      }
      while (v6 != v5);
      return a1;
    }
    else
    {
      return 0;
    }
  }
  return (_DWORD *)v2;
}

void TTTCMemoryFont::~TTTCMemoryFont(TTTCMemoryFont *this)
{
  *(_QWORD *)this = &off_1E61C92C8;
  *((_QWORD *)this + 2) = &unk_1E61C9318;
  TInMemoryDataReference::~TInMemoryDataReference((TTTCMemoryFont *)((char *)this + 40));
  *((_QWORD *)this + 2) = &off_1E617B870;
  std::shared_ptr<cacheStrike>::~shared_ptr[abi:fe180100]((uint64_t)this + 24);
}

{
  *(_QWORD *)this = &off_1E61C92C8;
  *((_QWORD *)this + 2) = &unk_1E61C9318;
  TInMemoryDataReference::~TInMemoryDataReference((TTTCMemoryFont *)((char *)this + 40));
  *((_QWORD *)this + 2) = &off_1E617B870;
  std::shared_ptr<cacheStrike>::~shared_ptr[abi:fe180100]((uint64_t)this + 24);
}

{
  *(_QWORD *)this = &off_1E61C92C8;
  *((_QWORD *)this + 2) = &unk_1E61C9318;
  TInMemoryDataReference::~TInMemoryDataReference((TTTCMemoryFont *)((char *)this + 40));
  *((_QWORD *)this + 2) = &off_1E617B870;
  std::shared_ptr<cacheStrike>::~shared_ptr[abi:fe180100]((uint64_t)this + 24);
  JUMPOUT(0x1B5E0CD38);
}

void `non-virtual thunk to'TTTCMemoryFont::~TTTCMemoryFont(TTTCMemoryFont *this)
{
  *((_QWORD *)this - 2) = &off_1E61C92C8;
  *(_QWORD *)this = &unk_1E61C9318;
  TInMemoryDataReference::~TInMemoryDataReference((TTTCMemoryFont *)((char *)this + 24));
  *(_QWORD *)this = &off_1E617B870;
  std::shared_ptr<cacheStrike>::~shared_ptr[abi:fe180100]((uint64_t)this + 8);
}

{
  *((_QWORD *)this - 2) = &off_1E61C92C8;
  *(_QWORD *)this = &unk_1E61C9318;
  TInMemoryDataReference::~TInMemoryDataReference((TTTCMemoryFont *)((char *)this + 24));
  *(_QWORD *)this = &off_1E617B870;
  std::shared_ptr<cacheStrike>::~shared_ptr[abi:fe180100]((uint64_t)this + 8);
  JUMPOUT(0x1B5E0CD38);
}

uint64_t TFont::MakeHandler()
{
  return 0;
}

double TFont::GetInstanceNames@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  return result;
}

void TFont::GetNameUsingMap(uint64_t a1@<X0>, unsigned __int16 a2@<W1>, _QWORD *a3@<X2>, TFontNameString *a4@<X8>)
{
  uint64_t **v6;
  const TFontNameString *v7;
  unsigned __int16 v8;

  v8 = a2;
  if (a3
    && (v6 = std::__hash_table<std::__hash_value_type<unsigned short,TFontNameString>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,TFontNameString>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,TFontNameString>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,TFontNameString>>>::find<unsigned short>(a3, &v8)) != 0&& (v7 = (const TFontNameString *)(v6 + 3), TFontNameString::IsValid((TFontNameString *)(v6 + 3))))
  {
    TFontNameString::TFontNameString(a4, v7);
  }
  else
  {
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 88))(a1, v8, 0xFFFFLL, 0xFFFFLL, 0xFFFFLL);
  }
}

uint64_t TFont::GetGlyphsForCharacterRange(TFont *this, unsigned __int16 *a2, CFRange a3)
{
  return 0;
}

uint64_t TFont::GetRegistryOrderingSupplement()
{
  return 0;
}

uint64_t TFont::GetGlyphsForCIDs(TFont *this, const unsigned __int16 *a2, unint64_t a3, unsigned __int16 *a4)
{
  return 0;
}

uint64_t TFont::GetCIDsForGlyphs(TFont *this, const unsigned __int16 *a2, unint64_t a3, unsigned __int16 *a4)
{
  return 0;
}

void AppendFontWithUniquePostscriptName(void **a1, uint64_t a2)
{
  __int128 v4;
  char *v5;
  char *v6;
  char v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  _BYTE v21[96];
  _OWORD v22[6];
  _QWORD v23[12];

  if (a2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 72))(a2);
    if (*a1 != a1[1])
    {
      *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v22[4] = v4;
      v22[5] = v4;
      v22[2] = v4;
      v22[3] = v4;
      v22[0] = v4;
      v22[1] = v4;
      (*(void (**)(_OWORD *__return_ptr, uint64_t))(*(_QWORD *)a2 + 80))(v22, a2);
      v5 = (char *)*a1;
      v6 = (char *)a1[1];
      TFontNameString::TFontNameString((TFontNameString *)v21, (const TFontNameString *)v22);
      if (v5 != v6)
      {
        while (1)
        {
          (*(void (**)(_QWORD *__return_ptr))(**(_QWORD **)v5 + 80))(v23);
          v7 = TFontNameString::operator==((uint64_t)v21, (uint64_t)v23);
          TFontNameString::~TFontNameString((TFontNameString *)v23);
          if ((v7 & 1) != 0)
            break;
          v5 += 8;
          if (v5 == v6)
          {
            v5 = v6;
            break;
          }
        }
      }
      TFontNameString::~TFontNameString((TFontNameString *)v21);
      if (v5 != a1[1])
      {
        (*(void (**)(uint64_t))(*(_QWORD *)a2 + 8))(a2);
        TFontNameString::~TFontNameString((TFontNameString *)v22);
        return;
      }
      TFontNameString::~TFontNameString((TFontNameString *)v22);
    }
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
    v8 = (unint64_t)a1[2];
    v9 = a1[1];
    if ((unint64_t)v9 >= v8)
    {
      v11 = ((char *)v9 - (_BYTE *)*a1) >> 3;
      if ((unint64_t)(v11 + 1) >> 61)
        std::vector<char,TInlineBufferAllocator<char,1024ul>>::__throw_length_error[abi:fe180100]();
      v12 = v8 - (_QWORD)*a1;
      v13 = v12 >> 2;
      if (v12 >> 2 <= (unint64_t)(v11 + 1))
        v13 = v11 + 1;
      if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v13;
      if (v14)
        v15 = (char *)std::__allocate_at_least[abi:fe180100]<std::allocator<TVariationInstance>>((uint64_t)(a1 + 2), v14);
      else
        v15 = 0;
      v16 = &v15[8 * v11];
      v17 = &v15[8 * v14];
      *(_QWORD *)v16 = a2;
      v10 = v16 + 8;
      v19 = (char *)*a1;
      v18 = (char *)a1[1];
      if (v18 != *a1)
      {
        do
        {
          v20 = *((_QWORD *)v18 - 1);
          v18 -= 8;
          *((_QWORD *)v16 - 1) = v20;
          v16 -= 8;
        }
        while (v18 != v19);
        v18 = (char *)*a1;
      }
      *a1 = v16;
      a1[1] = v10;
      a1[2] = v17;
      if (v18)
        operator delete(v18);
    }
    else
    {
      *v9 = a2;
      v10 = v9 + 1;
    }
    a1[1] = v10;
  }
}

void sub_1B09D2A48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  TFontNameString::~TFontNameString((TFontNameString *)va);
  _Unwind_Resume(a1);
}

uint64_t AppendWOFFEntities(void **a1, const TFileReference *a2)
{
  _BYTE *v4;
  _BOOL4 v5;
  __int128 v6;
  const TSFNTFont *v7;
  TTrueTypeFont *v8;
  const __CFData *v9;
  const TSFNTFont *v10;
  TTrueTypeWOFFFont *v11;
  uint64_t v12;
  _BOOL4 v13;
  __int128 v14;
  const TSFNTFont *v15;
  TTrueTypeFont *Format;
  const __CFData *v17;
  const TSFNTFont *v18;
  TTrueTypeWOFFFont *v19;
  CFDataRef *p_theData;
  TOpenTypeCFF2WOFFFont *v21;
  int v22;
  TOpenTypeCFF2WOFFFont *v24;
  int v25;
  TOpenTypeWOFFFont *v26;
  __int128 v27;
  const UInt8 *BytePtr;
  CFIndex Length;
  CFDataRef *v30;
  TOpenTypeWOFFFont *v31;
  _DWORD *TTCHeader;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  int v38;
  TSBITFont *v39;
  const TSFNTFont *v40;
  const TSFNTFont *v41;
  TTrueTypeWOFFFont *v42;
  const TSFNTData *v43;
  const TSFNTData *v44;
  CFDataRef theData;
  __int128 v46;
  _BYTE v47[32];
  _BYTE v48[24];
  __int128 v49;
  unint64_t v50;
  void (**v51)(TDataReference *__hidden);
  __int128 v52;
  uint64_t v53;
  int v54;
  int v55;
  unint64_t v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  int v62;
  _QWORD *v63;
  _QWORD v64[3];
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 cf;
  __int128 v79;
  _OWORD __b[187];
  const __CFData *v81[6];

  v81[3] = *(const __CFData **)MEMORY[0x1E0C80C00];
  (*(void (**)(_OWORD *__return_ptr, const TFileReference *, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(__b, a2, 0, 0);
  v5 = *((_QWORD *)&__b[1] + 1) - *(_QWORD *)&__b[1] >= 0x2CuLL
    && (v4 = (_BYTE *)(*(_QWORD *)(*((_QWORD *)&__b[0] + 1) + 8) + *(_QWORD *)&__b[1]), *v4 == 119)
    && v4[1] == 79
    && v4[2] == 70
    && v4[3] == 70;
  *(_QWORD *)&__b[0] = &off_1E6176770;
  TDataReference::DucRefCount((TDataReference *)__b);
  if (!v5)
  {
    (*(void (**)(_OWORD *__return_ptr, const TFileReference *, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(__b, a2, 0, 0);
    v13 = *((_QWORD *)&__b[0] + 1)
       && (v12 = *(_QWORD *)(*((_QWORD *)&__b[0] + 1) + 8)) != 0
       && *((_QWORD *)&__b[1] + 1) - *(_QWORD *)&__b[1] >= 8uLL
       && *(_DWORD *)(v12 + *(_QWORD *)&__b[1]) == 843468663;
    *(_QWORD *)&__b[0] = &off_1E6176770;
    TDataReference::DucRefCount((TDataReference *)__b);
    if (!v13)
      return 0;
    *(_QWORD *)&v14 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v14 + 1) = 0xAAAAAAAAAAAAAAAALL;
    cf = v14;
    v79 = v14;
    v76 = v14;
    v77 = v14;
    v74 = v14;
    v75 = v14;
    v72 = v14;
    v73 = v14;
    v70 = v14;
    v71 = v14;
    v68 = v14;
    v69 = v14;
    v66 = v14;
    v67 = v14;
    v65 = v14;
    TwOFF2Stream::TwOFF2Stream((TwOFF2Stream *)&v65, a2);
    Format = (TTrueTypeFont *)TSFNTFont::GetFormat((TSFNTFont *)&v65);
    theData = (CFDataRef)0xAAAAAAAAAAAAAAAALL;
    v17 = (const __CFData *)cf;
    if ((_QWORD)cf)
      v17 = (const __CFData *)CFRetain((CFTypeRef)cf);
    theData = v17;
    if (TTrueTypeFont::IsTrueTypeFont(Format, (TSFNTFont *)&v65, v15))
    {
      v19 = (TTrueTypeWOFFFont *)operator new();
      TTrueTypeWOFFFont::TTrueTypeWOFFFont(v19, theData, 0);
LABEL_30:
      AppendFontWithUniquePostscriptName(a1, (uint64_t)v19);
LABEL_31:
      p_theData = &theData;
      goto LABEL_32;
    }
    if (TSBITFont::IsSBITFont(Format, (TSFNTFont *)&v65, v18))
    {
      v19 = (TTrueTypeWOFFFont *)operator new();
      TSBITWOFFFont::TSBITWOFFFont(v19, theData, 0);
      goto LABEL_30;
    }
    if ((_DWORD)Format != 1953784678)
    {
      if ((_DWORD)Format != 1330926671)
        goto LABEL_80;
      memset(v64, 170, sizeof(v64));
      TInMemoryDataReference::TInMemoryDataReference((uint64_t)v64, &theData, 0);
      v54 = -1431655936;
      v56 = 0xAAAAAAAAAAAAAA00;
      v62 = -1431655766;
      *((_QWORD *)&v46 + 1) = 0xAAAAAAAA00000000;
      memset(&v47[8], 0, 24);
      *(_QWORD *)v48 = &off_1E6176770;
      *(_OWORD *)&v48[8] = 0u;
      v49 = 0u;
      v50 = 0xAAAAAAAA00000000;
      v51 = &off_1E6176770;
      v52 = 0uLL;
      v55 = 0;
      v59 = 0;
      v57 = 0u;
      v58 = 0u;
      v53 = 0;
      v60 = -1;
      v61 = 0;
      *(_QWORD *)&v46 = &off_1E6178EE0;
      *(_QWORD *)v47 = &unk_1E61790E8;
      v63 = v64;
      qmemcpy(__b, "2FFCdaehaehhxtmhpxam", 20);
      if (TSFNTFont::HasTableTags((TSFNTFont *)&v46, (uint64_t)__b, 5))
      {
        v24 = (TOpenTypeCFF2WOFFFont *)operator new();
        TOpenTypeCFF2WOFFFont::TOpenTypeCFF2WOFFFont(v24, theData, 0);
        AppendFontWithUniquePostscriptName(a1, (uint64_t)v24);
        v25 = 1;
        goto LABEL_79;
      }
      memset(__b, 170, sizeof(__b));
      TSFNTType1CFFDescriptor::TSFNTType1CFFDescriptor((TSFNTType1CFFDescriptor *)__b, (const TSFNTData *)&v46, 1128678944, 0);
      if (DWORD2(__b[22]) == 1)
      {
        v31 = (TOpenTypeWOFFFont *)operator new();
        TOpenTypeWOFFFont::TOpenTypeWOFFFont(v31, theData, 0);
      }
      else
      {
        if (DWORD2(__b[22]) != 2)
        {
          v25 = 0;
          goto LABEL_78;
        }
        v31 = (TOpenTypeWOFFFont *)operator new();
        TOpenTypeCIDWOFFFont::TOpenTypeCIDWOFFFont(v31, theData, 0);
      }
      AppendFontWithUniquePostscriptName(a1, (uint64_t)v31);
      v25 = 1;
LABEL_78:
      TType1CFFDescriptor::~TType1CFFDescriptor((TType1CFFDescriptor *)__b);
LABEL_79:
      TSFNTFont::~TSFNTFont((TSFNTFont *)&v46);
      TInMemoryDataReference::~TInMemoryDataReference((TInMemoryDataReference *)v64);
      if (v25)
        goto LABEL_31;
LABEL_80:
      v30 = &theData;
      goto LABEL_81;
    }
    *(_QWORD *)&v27 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v27 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)&v47[16] = v27;
    *(_OWORD *)v48 = v27;
    v46 = v27;
    *(_OWORD *)v47 = v27;
    if (theData)
    {
      BytePtr = CFDataGetBytePtr(theData);
      Length = CFDataGetLength(theData);
    }
    else
    {
      BytePtr = 0;
      Length = 0;
    }
    TTTCMemoryFont::TTTCMemoryFont((TTTCMemoryFont *)&v46, BytePtr, Length);
    TTCHeader = TTTCMemoryFont::GetTTCHeader((TTTCMemoryFont *)&v46);
    if (!TTCHeader)
    {
      TTTCMemoryFont::~TTTCMemoryFont((TTTCMemoryFont *)&v46);
      goto LABEL_80;
    }
    v33 = TTCHeader[2];
    if (!v33)
    {
LABEL_73:
      TTTCMemoryFont::~TTTCMemoryFont((TTTCMemoryFont *)&v46);
      goto LABEL_31;
    }
    v34 = bswap32(v33);
    if (v34 <= 1)
      v35 = 1;
    else
      v35 = v34;
    v36 = TTCHeader + 3;
    while (1)
    {
      v37 = *v36++;
      v38 = bswap32(v37);
      memset(v64, 170, sizeof(v64));
      TInMemoryDataReference::TInMemoryDataReference((uint64_t)v64, &theData, v38);
      *((_QWORD *)&__b[8] + 1) = 0xAAAAAAAAAAAAAA00;
      *(_QWORD *)&__b[8] = 2863311530;
      *((_QWORD *)&__b[0] + 1) = 0xAAAAAAAA00000000;
      *((_QWORD *)&__b[1] + 1) = 0;
      __b[2] = 0uLL;
      *(_OWORD *)((char *)&__b[3] + 8) = 0u;
      *(_OWORD *)((char *)&__b[4] + 8) = 0u;
      *((_QWORD *)&__b[5] + 1) = 0xAAAAAAAA00000000;
      *(_QWORD *)&__b[6] = &off_1E6176770;
      memset(&__b[9], 0, 40);
      *((_QWORD *)&__b[6] + 1) = 0;
      memset(&__b[7], 0, 17);
      *((_QWORD *)&__b[11] + 1) = -1;
      *(_QWORD *)&__b[12] = 0xAAAAAAAA00000000;
      *(_QWORD *)&__b[0] = &off_1E6178EE0;
      *(_QWORD *)&__b[3] = &off_1E6176770;
      *(_QWORD *)&__b[1] = &unk_1E61790E8;
      *((_QWORD *)&__b[12] + 1) = v64;
      v39 = (TSBITFont *)TSFNTFont::GetFormat((TSFNTFont *)__b);
      if (TTrueTypeFont::IsTrueTypeFont(v39, (TSFNTFont *)__b, v40))
      {
        v42 = (TTrueTypeWOFFFont *)operator new();
        TTrueTypeWOFFFont::TTrueTypeWOFFFont(v42, theData, v38);
      }
      else if (TSBITFont::IsSBITFont(v39, (TSFNTFont *)__b, v41))
      {
        v42 = (TTrueTypeWOFFFont *)operator new();
        TSBITWOFFFont::TSBITWOFFFont(v42, theData, v38);
      }
      else
      {
        if ((_DWORD)v39 != 1330926671)
          goto LABEL_64;
        qmemcpy(v81, "2FFCdaehaehhxtmhpxam", 20);
        if (TSFNTFont::HasTableTags((TSFNTFont *)__b, (uint64_t)v81, 5))
        {
          v42 = (TTrueTypeWOFFFont *)operator new();
          TOpenTypeCFF2WOFFFont::TOpenTypeCFF2WOFFFont(v42, theData, v38);
        }
        else if (TSFNTOpenTypeCIDFont::IsCFFCIDFont((TSFNTOpenTypeCIDFont *)__b, v43))
        {
          v42 = (TTrueTypeWOFFFont *)operator new();
          TOpenTypeCIDWOFFFont::TOpenTypeCIDWOFFFont(v42, theData, v38);
        }
        else
        {
          if (!TSFNTOpenTypeFont::IsCFFFont((TSFNTOpenTypeFont *)__b, v44))
            goto LABEL_64;
          v42 = (TTrueTypeWOFFFont *)operator new();
          TOpenTypeWOFFFont::TOpenTypeWOFFFont(v42, theData, v38);
        }
      }
      AppendFontWithUniquePostscriptName(a1, (uint64_t)v42);
LABEL_64:
      TSFNTFont::~TSFNTFont((TSFNTFont *)__b);
      TInMemoryDataReference::~TInMemoryDataReference((TInMemoryDataReference *)v64);
      if (!--v35)
        goto LABEL_73;
    }
  }
  *(_QWORD *)&v6 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  cf = v6;
  v79 = v6;
  v76 = v6;
  v77 = v6;
  v74 = v6;
  v75 = v6;
  v72 = v6;
  v73 = v6;
  v70 = v6;
  v71 = v6;
  v68 = v6;
  v69 = v6;
  v66 = v6;
  v67 = v6;
  v65 = v6;
  TwOFFStream::TwOFFStream((TwOFFStream *)&v65, a2);
  v8 = (TTrueTypeFont *)TSFNTFont::GetFormat((TSFNTFont *)&v65);
  v81[0] = (const __CFData *)0xAAAAAAAAAAAAAAAALL;
  v9 = (const __CFData *)cf;
  if ((_QWORD)cf)
    v9 = (const __CFData *)CFRetain((CFTypeRef)cf);
  v81[0] = v9;
  if (TTrueTypeFont::IsTrueTypeFont(v8, (TSFNTFont *)&v65, v7))
  {
    v11 = (TTrueTypeWOFFFont *)operator new();
    TTrueTypeWOFFFont::TTrueTypeWOFFFont(v11, v81[0], 0);
LABEL_23:
    AppendFontWithUniquePostscriptName(a1, (uint64_t)v11);
LABEL_24:
    p_theData = v81;
LABEL_32:
    TCFData::~TCFData((const void **)p_theData);
    TwOFFStream::~TwOFFStream((TwOFFStream *)&v65);
    return 1;
  }
  if (TSBITFont::IsSBITFont(v8, (TSFNTFont *)&v65, v10))
  {
    v11 = (TTrueTypeWOFFFont *)operator new();
    TSBITWOFFFont::TSBITWOFFFont(v11, v81[0], 0);
    goto LABEL_23;
  }
  if ((_DWORD)v8 != 1330926671)
    goto LABEL_48;
  memset(v64, 170, sizeof(v64));
  TInMemoryDataReference::TInMemoryDataReference((uint64_t)v64, v81, 0);
  v54 = -1431655936;
  v56 = 0xAAAAAAAAAAAAAA00;
  v62 = -1431655766;
  *((_QWORD *)&v46 + 1) = 0xAAAAAAAA00000000;
  memset(&v47[8], 0, 24);
  *(_QWORD *)v48 = &off_1E6176770;
  *(_OWORD *)&v48[8] = 0u;
  v49 = 0u;
  v50 = 0xAAAAAAAA00000000;
  v51 = &off_1E6176770;
  v52 = 0uLL;
  v55 = 0;
  v59 = 0;
  v57 = 0u;
  v58 = 0u;
  v53 = 0;
  v60 = -1;
  v61 = 0;
  *(_QWORD *)&v46 = &off_1E6178EE0;
  *(_QWORD *)v47 = &unk_1E61790E8;
  v63 = v64;
  qmemcpy(__b, "2FFCdaehaehhxtmhpxam", 20);
  if (TSFNTFont::HasTableTags((TSFNTFont *)&v46, (uint64_t)__b, 5))
  {
    v21 = (TOpenTypeCFF2WOFFFont *)operator new();
    TOpenTypeCFF2WOFFFont::TOpenTypeCFF2WOFFFont(v21, v81[0], 0);
    AppendFontWithUniquePostscriptName(a1, (uint64_t)v21);
    v22 = 1;
    goto LABEL_47;
  }
  memset(__b, 170, sizeof(__b));
  TSFNTType1CFFDescriptor::TSFNTType1CFFDescriptor((TSFNTType1CFFDescriptor *)__b, (const TSFNTData *)&v46, 1128678944, 0);
  if (DWORD2(__b[22]) == 1)
  {
    v26 = (TOpenTypeWOFFFont *)operator new();
    TOpenTypeWOFFFont::TOpenTypeWOFFFont(v26, v81[0], 0);
  }
  else
  {
    if (DWORD2(__b[22]) != 2)
    {
      v22 = 0;
      goto LABEL_46;
    }
    v26 = (TOpenTypeWOFFFont *)operator new();
    TOpenTypeCIDWOFFFont::TOpenTypeCIDWOFFFont(v26, v81[0], 0);
  }
  AppendFontWithUniquePostscriptName(a1, (uint64_t)v26);
  v22 = 1;
LABEL_46:
  TType1CFFDescriptor::~TType1CFFDescriptor((TType1CFFDescriptor *)__b);
LABEL_47:
  TSFNTFont::~TSFNTFont((TSFNTFont *)&v46);
  TInMemoryDataReference::~TInMemoryDataReference((TInMemoryDataReference *)v64);
  if (v22)
    goto LABEL_24;
LABEL_48:
  v30 = v81;
LABEL_81:
  TCFData::~TCFData((const void **)v30);
  TwOFFStream::~TwOFFStream((TwOFFStream *)&v65);
  return 0;
}

void sub_1B09D3480(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, const void *a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,char a43)
{
  uint64_t v43;

  MEMORY[0x1B5E0CD38](v43, 0x10F1C4098F5C889);
  TType1CFFDescriptor::~TType1CFFDescriptor((TType1CFFDescriptor *)&STACK[0x200]);
  TSFNTFont::~TSFNTFont((TSFNTFont *)&a13);
  TInMemoryDataReference::~TInMemoryDataReference((TInMemoryDataReference *)&a40);
  TCFData::~TCFData(&a12);
  TwOFFStream::~TwOFFStream((TwOFFStream *)&a43);
  _Unwind_Resume(a1);
}

void TFont::CreateFontEntitiesForFile(TFont *this@<X0>, const char *a2@<X1>, timespec a3@<0:X2, 8:X3>, __int16 a4@<W4>, void (***a5)(TSFNTData *__hidden this)@<X8>)
{
  int tv_nsec;
  void (**v9)(TSFNTData *__hidden);
  void *v11;
  os_unfair_lock_s *v12;
  uint64_t *Node;
  __int128 v14;
  void (*GSFontEnsureFontFileAccessSymbolLoc)(TFont *);
  size_t v16;
  TFont *v17;
  char *v18;
  int v19;
  uint64_t v20;
  unint64_t *v21;
  size_t v22;
  TFont *v23;
  const char *v24;
  const char *v25;
  int v26;
  TTrueTypeFont *Format;
  const TSFNTFont *v28;
  const TSFNTFont *v29;
  TSBITDataForkFont *v30;
  TLWFNType1Font *v31;
  const TFileFragmentReference **v32;
  const TSFNTFont *v33;
  void *v34;
  void *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  const TSFNTData *v45;
  size_t v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  __int128 v56;
  uint64_t v57;
  _DWORD *v58;
  BOOL v59;
  _DWORD *v60;
  unsigned int v61;
  unsigned int v62;
  uint64_t v63;
  unsigned int *v64;
  unsigned int v65;
  uint64_t v66;
  const TSFNTFont *v67;
  const TSFNTFont *v68;
  TSBITFont *v69;
  TSBITDataForkFont *v70;
  const TSFNTFont *v71;
  const TSFNTData *v72;
  const TSFNTData *v73;
  const TSFNTData *v74;
  _BYTE *v75;
  int v76;
  TOpenTypeFileDataFont *v77;
  int v78;
  int lock;
  os_unfair_lock_s *locka;
  void (**v81)(TSFNTData *__hidden);
  const void *v82;
  void (**v83)(TSFNTData *__hidden);
  void (**v84)(TSFNTData *__hidden);
  timespec v85;
  void *__p[4];
  void (**v87)(TDataReference *__hidden);
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  void (**v91)(TSFNTData *__hidden);
  __int128 v92;
  __int128 v93;
  uint64_t v94;
  void (**v95)(TDataReference *__hidden);
  __int128 v96;
  __int128 v97;
  int v98;
  int v99;
  void (**v100)(TDataReference *__hidden);
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  int v105;
  unint64_t v106;
  __int128 v107;
  __int128 v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  int v112;
  unint64_t *v113;
  unint64_t v114;
  uint64_t v115;
  _OWORD __b[187];
  _BYTE v117[24];
  uint64_t v118;
  void (**v119)(TDataReference *__hidden);
  unint64_t *v120;
  unint64_t v121;
  __int128 v122;
  unint64_t v123;
  unint64_t v124;
  _BYTE v125[20];
  uint64_t v126;

  tv_nsec = a3.tv_nsec;
  v85.tv_sec = (__darwin_time_t)a2;
  v85.tv_nsec = a3.tv_sec;
  v9 = 0;
  v126 = *MEMORY[0x1E0C80C00];
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  if (LODWORD(a3.tv_nsec))
  {
    pthread_once(&TLockedLRUCache<TFontCacheNode,48ul>::GetCache(void)::once, (void (*)(void))TLockedLRUCache<TFontCacheNode,48ul>::CreateCache);
    v11 = TLockedLRUCache<TFontCacheNode,48ul>::sSharedCache;
    v12 = (os_unfair_lock_s *)((char *)TLockedLRUCache<TFontCacheNode,48ul>::sSharedCache + 7312);
    os_unfair_lock_lock((os_unfair_lock_t)TLockedLRUCache<TFontCacheNode,48ul>::sSharedCache + 1828);
    TFontCacheNode::TFontCacheNode((TFontCacheNode *)__b, (const char *)this, v85, a4);
    Node = TLRUCacheImp<TFontCacheNode,48ul>::FindNode((uint64_t)v11, (uint64_t)__b);
    TFontCacheNode::~TFontCacheNode((TFontCacheNode *)__b);
    if (Node)
    {
      TFontCacheNode::CopyFonts((TFontCacheNode *)&v91, (uint64_t)Node);
      v14 = v92;
      v9 = v91;
    }
    else
    {
      v9 = 0;
      v14 = 0uLL;
    }
    v81 = (void (**)(TSFNTData *__hidden))v14;
    *a5 = v9;
    *(_OWORD *)(a5 + 1) = v14;
    v92 = 0uLL;
    v91 = 0;
    os_unfair_lock_unlock(v12);
    if (v9 != v81)
      return;
  }
  if (GSFontLibraryCore(0) && getGSFontEnsureFontFileAccessSymbolLoc())
  {
    GSFontEnsureFontFileAccessSymbolLoc = (void (*)(TFont *))getGSFontEnsureFontFileAccessSymbolLoc();
    if (!GSFontEnsureFontFileAccessSymbolLoc)
    {
      dlerror();
      abort_report_np();
      __break(1u);
    }
    GSFontEnsureFontFileAccessSymbolLoc(this);
  }
  memset(__p, 0, 24);
  v124 = 0xAAAAAAAAAAAAAAAALL;
  v16 = strlen((const char *)this);
  v17 = (TFont *)((char *)this + v16 - 8);
  if (v16 <= 7)
    v17 = this;
  v18 = (char *)this + v16 + 1;
  do
  {
    if (v18 - 2 <= (char *)v17 || (v19 = *(v18 - 2), v19 == 47))
    {
      v21 = &v124;
      goto LABEL_20;
    }
    --v18;
  }
  while (v19 != 46);
  v20 = 0;
  do
  {
    v125[v20 - 8] = __tolower((char)v19);
    v19 = v18[v20++];
  }
  while (v19);
  v21 = (unint64_t *)&v125[v20 - 8];
LABEL_20:
  *(_BYTE *)v21 = 0;
  v22 = strlen((const char *)this);
  v23 = (TFont *)((char *)this + v22 - 9);
  if (v22 <= 9)
    v23 = this;
  v24 = (char *)this + v22 - 1;
  do
  {
    v25 = v24;
    if (v24 <= (const char *)v23)
      break;
    --v24;
    v26 = *(unsigned __int8 *)v25;
    if (v26 == 46)
      goto LABEL_28;
  }
  while (v26 != 47);
  if (!strncmp(v25, "HelveLTMM", 9uLL) || !strncmp(v25, "TimesLTMM", 9uLL))
  {
    *(_QWORD *)&__b[0] = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&__b[0] + 1) = 0xAAAAAAAAAAAAAAAALL;
    TResourceForkSurrogate::TResourceForkSurrogate((TResourceForkSurrogate *)__b, (const char *)this, v85, 1);
    v31 = (TLWFNType1Font *)operator new();
    TLWFNType1Font::TLWFNType1Font(v31, (const TResourceForkSurrogate *)__b);
    AppendFontWithUniquePostscriptName(__p, (uint64_t)v31);
    v32 = (const TFileFragmentReference **)__b;
    goto LABEL_45;
  }
LABEL_28:
  v114 = 0xAAAAAAAAAAAAAAAALL;
  v115 = 0xAAAAAAAAAAAAAAAALL;
  TFileDataSurrogate::TFileDataSurrogate((TFileDataSurrogate *)&v114, (const char *)this, v85);
  v99 = -1431655766;
  v104 = -1431655936;
  v106 = 0xAAAAAAAAAAAAAA00;
  v112 = -1431655766;
  *(_QWORD *)&v92 = 0xAAAAAAAA00000000;
  v93 = 0uLL;
  v94 = 0;
  v95 = &off_1E6176770;
  v96 = 0u;
  v97 = 0u;
  v98 = 0;
  v105 = 0;
  v109 = 0;
  v107 = 0u;
  v108 = 0u;
  v100 = &off_1E6176770;
  v101 = 0;
  v102 = 0;
  v103 = 0;
  v110 = -1;
  v111 = 0;
  v91 = &off_1E6178EE0;
  *((_QWORD *)&v92 + 1) = &unk_1E61790E8;
  v113 = &v114;
  Format = (TTrueTypeFont *)TSFNTFont::GetFormat((TSFNTFont *)&v91);
  if (strncmp((const char *)this, "/System/", 8uLL)
    && strncmp((const char *)this, "/Library/", 9uLL)
    && !os_variant_has_internal_content())
  {
    lock = 0;
    goto LABEL_39;
  }
  if ((_DWORD)Format != 0x10000 && (_DWORD)Format != 1953658213 && (_DWORD)Format != 1752590188
    || !THierVariationsFont::IsHierVariationsFont((THierVariationsFont *)&v91, v28))
  {
    lock = 1;
LABEL_39:
    if (TTrueTypeFont::IsTrueTypeFont(Format, (TSFNTFont *)&v91, v29))
    {
      v30 = (TSBITDataForkFont *)operator new();
      TTrueTypeDataForkFont::TTrueTypeDataForkFont((uint64_t)v30, &v114);
      goto LABEL_43;
    }
    if (TSBITFont::IsSBITFont(Format, (TSFNTFont *)&v91, v33))
    {
      v30 = (TSBITDataForkFont *)operator new();
      TSBITDataForkFont::TSBITDataForkFont(v30, (const TFileDataSurrogate *)&v114);
      goto LABEL_43;
    }
    if ((_DWORD)Format != 1953784678)
    {
      if ((_DWORD)Format == 1330926671)
      {
        qmemcpy(v117, "2FFCdaehaehhxtmhpxam", 20);
        if (TSFNTFont::HasTableTags((TSFNTFont *)&v91, (uint64_t)v117, 5))
        {
          v30 = (TSBITDataForkFont *)operator new();
          TOpenTypeCFF2DataForkFont::TOpenTypeCFF2DataForkFont(v30, (const TFileDataSurrogate *)&v114);
          goto LABEL_43;
        }
        if (TSFNTOpenTypeCIDFont::IsCFFCIDFont((TSFNTOpenTypeCIDFont *)&v91, v45))
        {
          v30 = (TSBITDataForkFont *)operator new();
          TOpenTypeCIDDataForkFont::TOpenTypeCIDDataForkFont(v30, (const TFileDataSurrogate *)&v114);
          goto LABEL_43;
        }
        if (TSFNTOpenTypeFont::IsCFFFont((TSFNTOpenTypeFont *)&v91, v74))
        {
          v30 = (TSBITDataForkFont *)operator new();
          TOpenTypeDataForkFont::TOpenTypeDataForkFont(v30, (const TFileDataSurrogate *)&v114);
          goto LABEL_43;
        }
      }
      else
      {
        v59 = (_DWORD)v124 == 1868985134 && *(_DWORD *)((char *)&v124 + 3) == 7630447;
        if (v59 || !(v124 ^ 0x7266632E | BYTE4(v124)))
        {
          TXMLSplicedFont::CreateSpliceFonts((TXMLSplicedFont *)&v114, (uint64_t)__b);
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
          *(_OWORD *)__p = __b[0];
          __p[2] = *(void **)&__b[1];
          goto LABEL_44;
        }
      }
LABEL_125:
      if ((AppendWOFFEntities(__p, (const TFileReference *)&v114) & 1) != 0)
      {
        tv_nsec = 0;
        goto LABEL_44;
      }
      v75 = *(_BYTE **)(v115 + 8);
      if (v75)
      {
        TDataReference::TDataReference(__b, v115, 0, 0, 0);
        v75 = (_BYTE *)*((_QWORD *)&__b[0] + 1);
        if (*((_QWORD *)&__b[0] + 1))
        {
          v75 = *(_BYTE **)(*((_QWORD *)&__b[0] + 1) + 8);
          if (v75)
            v75 += *(_QWORD *)&__b[1];
        }
      }
      else
      {
        __b[0] = (unint64_t)&off_1E6176770;
        __b[1] = 0uLL;
      }
      if (*((_QWORD *)&__b[1] + 1) - *(_QWORD *)&__b[1] >= 3uLL && *v75 == 37)
      {
        v84 = v9;
        v76 = v75[1];
        TDataReference::~TDataReference((TDataReference *)__b);
        v59 = v76 == 33;
        v9 = v84;
        if (v59)
        {
          v30 = (TSBITDataForkFont *)operator new();
          TType1FileDataFont::TType1FileDataFont(v30, (const TFileDataSurrogate *)&v114);
          goto LABEL_43;
        }
      }
      else
      {
        TDataReference::~TDataReference((TDataReference *)__b);
      }
      memset(__b, 170, sizeof(__b));
      if (*(_QWORD *)(v115 + 8))
      {
        TDataReference::TDataReference(&v87, v115, 0, 0, 0);
      }
      else
      {
        v87 = &off_1E6176770;
        v88 = 0;
        v89 = 0;
        v90 = 0;
      }
      *(_QWORD *)&v117[8] = 0;
      *(_QWORD *)&v117[16] = 0;
      *(_QWORD *)v117 = &off_1E61768F8;
      LOBYTE(v118) = 0;
      v119 = &off_1E6176770;
      v120 = 0;
      v121 = 0;
      *(_QWORD *)&v122 = 0;
      TType1CFFDescriptor::TType1CFFDescriptor((uint64_t)__b, (uint64_t)&v87, v117, 0);
      TStringRef::~TStringRef((void **)v117);
      TDataReference::~TDataReference((TDataReference *)&v87);
      if (DWORD2(__b[22]) == 1)
      {
        v77 = (TOpenTypeFileDataFont *)operator new();
        TOpenTypeFileDataFont::TOpenTypeFileDataFont(v77, (const TFileDataSurrogate *)&v114, (const TType1CFFDescriptor *)__b);
      }
      else
      {
        if (DWORD2(__b[22]) != 2)
        {
LABEL_146:
          TType1CFFDescriptor::~TType1CFFDescriptor((TType1CFFDescriptor *)__b);
          goto LABEL_44;
        }
        v77 = (TOpenTypeFileDataFont *)operator new();
        TOpenTypeCIDFileDataFont::TOpenTypeCIDFileDataFont(v77, (const TFileDataSurrogate *)&v114, (const TType1CFFDescriptor *)__b);
      }
      AppendFontWithUniquePostscriptName(__p, (uint64_t)v77);
      goto LABEL_146;
    }
    *(_QWORD *)&v56 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v56 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v121 = 0xAAAAAAAAAAAAAAAALL;
    v123 = 0xAAAAAAAAAAAAAAAALL;
    v122 = v56;
    *(_QWORD *)&v117[8] = 0xAAAAAAAA00000000;
    *(_QWORD *)v117 = &off_1E617B800;
    *(_QWORD *)&v117[16] = &unk_1E617B850;
    v118 = 0;
    v119 = 0;
    v120 = &v114;
    (*(void (**)(unint64_t *__return_ptr, unint64_t *, _QWORD, _QWORD))(v114 + 32))(&v121, &v114, 0, 0);
    if ((_QWORD)v122 && (v57 = *(_QWORD *)(v122 + 8)) != 0)
      v58 = (_DWORD *)(v57 + *((_QWORD *)&v122 + 1));
    else
      v58 = 0;
    v60 = MapTTCHeader(v58, v123 - *((_QWORD *)&v122 + 1));
    if (!v60)
    {
      TTTCData::~TTTCData((TTTCData *)v117);
      goto LABEL_125;
    }
    v78 = tv_nsec;
    v61 = v60[2];
    if (!v61)
    {
LABEL_119:
      TTTCData::~TTTCData((TTTCData *)v117);
      tv_nsec = v78;
      goto LABEL_44;
    }
    v62 = bswap32(v61);
    if (v62 <= 1)
      v63 = 1;
    else
      v63 = v62;
    v64 = v60 + 3;
    v83 = v9;
    while (1)
    {
      v65 = *v64++;
      v87 = &off_1E61766C0;
      v88 = v115;
      v89 = 0xAAAAAAAAAAAAAAAALL;
      (*(void (**)(uint64_t))(*(_QWORD *)(v115 + 24) + 24))(v115 + 24);
      v87 = &off_1E6176630;
      LODWORD(v89) = bswap32(v65);
      *((_QWORD *)&__b[8] + 1) = 0xAAAAAAAAAAAAAA00;
      *(_QWORD *)&__b[8] = 2863311530;
      *((_QWORD *)&__b[0] + 1) = 0xAAAAAAAA00000000;
      *((_QWORD *)&__b[1] + 1) = 0;
      __b[2] = 0uLL;
      *(_OWORD *)((char *)&__b[3] + 8) = 0u;
      *(_OWORD *)((char *)&__b[4] + 8) = 0u;
      *((_QWORD *)&__b[5] + 1) = 0xAAAAAAAA00000000;
      *(_QWORD *)&__b[6] = &off_1E6176770;
      memset(&__b[9], 0, 40);
      *((_QWORD *)&__b[6] + 1) = 0;
      memset(&__b[7], 0, 17);
      *((_QWORD *)&__b[11] + 1) = -1;
      *(_QWORD *)&__b[12] = 0xAAAAAAAA00000000;
      *(_QWORD *)&__b[0] = &off_1E6178EE0;
      *(_QWORD *)&__b[3] = &off_1E6176770;
      *(_QWORD *)&__b[1] = &unk_1E61790E8;
      *((_QWORD *)&__b[12] + 1) = &v87;
      v9 = v83;
      v66 = TSFNTFont::GetFormat((TSFNTFont *)__b);
      v69 = (TSBITFont *)v66;
      if (lock
        && ((_DWORD)v66 == 0x10000 || (_DWORD)v66 == 1953658213 || (_DWORD)v66 == 1752590188)
        && THierVariationsFont::IsHierVariationsFont((THierVariationsFont *)__b, v67))
      {
        v70 = HierVariationsFontCreate((const TFileDataSurrogate *)&v87);
      }
      else if (TTrueTypeFont::IsTrueTypeFont(v69, (TSFNTFont *)__b, v68))
      {
        v70 = (TSBITDataForkFont *)operator new();
        TTrueTypeDataForkFont::TTrueTypeDataForkFont((uint64_t)v70, &v87);
      }
      else if (TSBITFont::IsSBITFont(v69, (TSFNTFont *)__b, v71))
      {
        v70 = (TSBITDataForkFont *)operator new();
        TSBITDataForkFont::TSBITDataForkFont(v70, (const TFileDataSurrogate *)&v87);
      }
      else
      {
        if ((_DWORD)v69 != 1330926671)
          goto LABEL_110;
        qmemcpy(v125, "2FFCdaehaehhxtmhpxam", sizeof(v125));
        if (TSFNTFont::HasTableTags((TSFNTFont *)__b, (uint64_t)v125, 5))
        {
          v70 = (TSBITDataForkFont *)operator new();
          TOpenTypeCFF2DataForkFont::TOpenTypeCFF2DataForkFont(v70, (const TFileDataSurrogate *)&v87);
        }
        else if (TSFNTOpenTypeCIDFont::IsCFFCIDFont((TSFNTOpenTypeCIDFont *)__b, v72))
        {
          v70 = (TSBITDataForkFont *)operator new();
          TOpenTypeCIDDataForkFont::TOpenTypeCIDDataForkFont(v70, (const TFileDataSurrogate *)&v87);
        }
        else
        {
          if (!TSFNTOpenTypeFont::IsCFFFont((TSFNTOpenTypeFont *)__b, v73))
            goto LABEL_110;
          v70 = (TSBITDataForkFont *)operator new();
          TOpenTypeDataForkFont::TOpenTypeDataForkFont(v70, (const TFileDataSurrogate *)&v87);
        }
      }
      AppendFontWithUniquePostscriptName(__p, (uint64_t)v70);
LABEL_110:
      TSFNTFont::~TSFNTFont((TSFNTFont *)__b);
      TFileDataSurrogate::~TFileDataSurrogate((const TFileFragmentReference **)&v87);
      if (!--v63)
        goto LABEL_119;
    }
  }
  v30 = HierVariationsFontCreate((const TFileDataSurrogate *)&v114);
LABEL_43:
  AppendFontWithUniquePostscriptName(__p, (uint64_t)v30);
LABEL_44:
  TSFNTFont::~TSFNTFont((TSFNTFont *)&v91);
  v32 = (const TFileFragmentReference **)&v114;
LABEL_45:
  TFileDataSurrogate::~TFileDataSurrogate(v32);
  if (v9)
  {
    operator delete(v9);
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
  }
  v34 = __p[0];
  *a5 = (void (**)(TSFNTData *__hidden))__p[0];
  v35 = __p[1];
  *(_OWORD *)(a5 + 1) = *(_OWORD *)&__p[1];
  if (tv_nsec)
  {
    v36 = (uint64_t)v35;
    if (v34 != v35)
    {
      v82 = v34;
      pthread_once(&TLockedLRUCache<TFontCacheNode,48ul>::GetCache(void)::once, (void (*)(void))TLockedLRUCache<TFontCacheNode,48ul>::CreateCache);
      v37 = TLockedLRUCache<TFontCacheNode,48ul>::sSharedCache;
      locka = (os_unfair_lock_s *)((char *)TLockedLRUCache<TFontCacheNode,48ul>::sSharedCache + 7312);
      os_unfair_lock_lock((os_unfair_lock_t)TLockedLRUCache<TFontCacheNode,48ul>::sSharedCache + 1828);
      if (v37)
      {
        v38 = v37[912];
        if (v37[19 * v38 + 1] != v37[19 * v38 + 2])
        {
          v39 = 0;
          v40 = 0;
          v41 = &v37[19 * v38];
          while (1)
          {
            if (&v37[19 * v37[913]] == v41)
              v42 = 0;
            else
              v42 = &v37[19 * *v41];
            v44 = (_QWORD *)v41[15];
            v43 = (_QWORD *)v41[16];
            if (v44 != v43)
            {
              while ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*v44 + 16))(*v44) == 1)
              {
                if (++v44 == v43)
                {
                  if (v39 <= 0x1F)
                  {
                    v40 = (uint64_t)v41;
                    break;
                  }
                  TLRUCacheImp<TFontCacheNode,48ul>::RemoveNode((uint64_t)v37, (uint64_t)v41);
                  if (!v42)
                    goto LABEL_71;
                  v40 = 0;
                  goto LABEL_63;
                }
              }
            }
            if (!v42)
              break;
LABEL_63:
            ++v39;
            v41 = v42;
            if (v42[1] == v42[2])
              goto LABEL_71;
          }
          if (v40)
            TLRUCacheImp<TFontCacheNode,48ul>::RemoveNode((uint64_t)v37, v40);
        }
      }
LABEL_71:
      *(_QWORD *)&__b[0] = 0;
      v46 = strlen((const char *)this);
      LOBYTE(v91) = 0;
      std::vector<char,TInlineBufferAllocator<char,64ul>>::vector((_QWORD *)__b + 1, v46 + 1, &v91);
      *(timespec *)((char *)&__b[6] + 8) = v85;
      __b[8] = 0uLL;
      std::vector<TFont *>::__init_with_size[abi:fe180100]<TFont **,TFont **>((_QWORD *)&__b[7] + 1, v82, v36, (v36 - (uint64_t)v82) >> 3);
      LOWORD(__b[9]) = 0;
      strlcpy(*((char **)&__b[0] + 1), (const char *)this, *(_QWORD *)&__b[1] - *((_QWORD *)&__b[0] + 1));
      if (*(_QWORD *)&__b[8] - *((_QWORD *)&__b[7] + 1) == 8)
      {
        v47 = (*(uint64_t (**)(_QWORD))(***((_QWORD ***)&__b[7] + 1) + 440))(**((_QWORD **)&__b[7] + 1));
        if (v47)
          LOWORD(__b[9]) = *(_DWORD *)(*(_QWORD *)(v47 + 48) + 56);
      }
      v48 = (_QWORD *)*((_QWORD *)&__b[7] + 1);
      v49 = *(_QWORD **)&__b[8];
      while (v48 != v49)
      {
        (*(void (**)(_QWORD))(*(_QWORD *)*v48 + 24))(*v48);
        ++v48;
      }
      v50 = v37[913];
      v51 = (_QWORD *)TFontCacheNode::operator=((uint64_t)&v37[19 * v50], (uint64_t)__b);
      v52 = v37[912];
      v53 = v52;
      do
      {
        v54 = v53;
        v55 = &v37[19 * v53];
        v53 = *v55;
      }
      while (*v55 != v37[913]);
      v37[913] = v54;
      *v51 = v52;
      v37[912] = v50;
      *v55 = v50;
      TFontCacheNode::~TFontCacheNode((TFontCacheNode *)__b);
      os_unfair_lock_unlock(locka);
    }
  }
}

void sub_1B09D446C(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, _Unwind_Exception *exception_objecta, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,const TFileFragmentReference *a55)
{
  uint64_t v55;
  uint64_t v56;
  uint64_t v58;

  v58 = v56;
  MEMORY[0x1B5E0CD38](v55, 0x10F1C4088C4C3EFLL);
  TSFNTFont::~TSFNTFont((TSFNTFont *)&a29);
  TFileDataSurrogate::~TFileDataSurrogate(&a55);
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1B09D3B3CLL);
  }
  if (__p)
    operator delete(__p);
  if (a17)
  {
    *(_QWORD *)(v58 + 8) = a17;
    operator delete(a17);
  }
  _Unwind_Resume(a1);
}

void TFont::CreateFontEntitiesForDataStream(TFont *this@<X0>, uint64_t a2@<X1>, const void *a3@<X2>, uint64_t a4@<X8>)
{
  int v9;
  TType1MemoryFont *v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  TTrueTypeFont *Format;
  const TSFNTFont *v15;
  const TSFNTFont *v16;
  const TSFNTFont *v17;
  __int128 v18;
  _DWORD *TTCHeader;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  TSBITFont *v28;
  const TSFNTFont *v29;
  const TSFNTFont *v30;
  const TSFNTFont *v31;
  const TSFNTData *v32;
  const TSFNTData *v33;
  uint64_t v34;
  TOpenTypeCFFMemoryFont *v35;
  void **v36;
  uint64_t v37;
  _QWORD v38[4];
  void (**v39)(TInMemoryDataReference *__hidden);
  unint64_t v40;
  unint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  void (**v46)(TSFNTData *__hidden);
  int v47;
  int v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void (**v53)(TDataReference *__hidden);
  __int128 v54;
  __int128 v55;
  int v56;
  int v57;
  void (**v58)(TDataReference *__hidden);
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  int v63;
  unint64_t v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  int v70;
  void (***v71)(TInMemoryDataReference *__hidden);
  void (**v72)(TInMemoryDataReference *__hidden);
  uint64_t v73;
  int v74;
  int v75;
  _OWORD __b[187];
  _BYTE v77[20];
  uint64_t v78;

  v78 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  if (this && a2)
  {
    if ((unint64_t)a2 >= 3)
    {
      v9 = *(unsigned __int8 *)this;
      if (v9 == 37)
      {
        if (*((_BYTE *)this + 1) == 33)
        {
          v10 = (TType1MemoryFont *)operator new();
          TType1MemoryFont::TType1MemoryFont(v10, this, a2);
LABEL_11:
          AppendFontWithUniquePostscriptName((void **)a4, (uint64_t)v10);
          return;
        }
      }
      else if ((unint64_t)a2 >= 6 && v9 == 128 && *((_BYTE *)this + 1) == 1)
      {
        v10 = (TType1MemoryFont *)operator new();
        TType1BinaryMemoryFont::TType1BinaryMemoryFont(v10, this, a2);
        goto LABEL_11;
      }
    }
    v75 = -1431655766;
    v72 = &off_1E6176678;
    v11 = operator new();
    *(_DWORD *)(v11 + 32) = 0;
    v12 = (unsigned int *)(v11 + 32);
    *(_QWORD *)v11 = &off_1E6176818;
    *(_QWORD *)(v11 + 8) = this;
    *(_QWORD *)(v11 + 16) = a2;
    *(_QWORD *)(v11 + 24) = &unk_1E6176840;
    *(_DWORD *)(v11 + 36) = 0;
    v73 = v11;
    v74 = 0;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
    v48 = -1431655766;
    v57 = -1431655766;
    v62 = -1431655936;
    v64 = 0xAAAAAAAAAAAAAA00;
    v70 = -1431655766;
    v47 = 0;
    v51 = 0;
    v52 = 0;
    v53 = &off_1E6176770;
    v54 = 0u;
    v55 = 0u;
    v56 = 0;
    v63 = 0;
    v67 = 0;
    v66 = 0u;
    v65 = 0u;
    v58 = &off_1E6176770;
    v59 = 0;
    v60 = 0;
    v61 = 0;
    v68 = -1;
    v69 = 0;
    v46 = &off_1E6178EE0;
    v49 = &unk_1E61790E8;
    v50 = 0;
    v71 = &v72;
    Format = (TTrueTypeFont *)TSFNTFont::GetFormat((TSFNTFont *)&v46);
    if (TTrueTypeFont::IsTrueTypeFont(Format, (TSFNTFont *)&v46, v15))
    {
      v17 = (const TSFNTFont *)operator new();
      TTrueTypeMemoryFont::TTrueTypeMemoryFont((uint64_t)v17, (uint64_t)&v72, a3);
LABEL_18:
      AppendFontWithUniquePostscriptName((void **)a4, (uint64_t)v17);
LABEL_19:
      TSFNTFont::~TSFNTFont((TSFNTFont *)&v46);
      TInMemoryDataReference::~TInMemoryDataReference((TInMemoryDataReference *)&v72);
      return;
    }
    if (TSBITFont::IsSBITFont(Format, (TSFNTFont *)&v46, v16))
    {
      v17 = (const TSFNTFont *)operator new();
      TSBITMemoryFont::TSBITMemoryFont(v17, (uint64_t)&v72);
      goto LABEL_18;
    }
    if ((_DWORD)Format != 1953784678)
    {
      if ((_DWORD)Format == 1330926671)
      {
        qmemcpy(__b, "2FFCdaehaehhxtmhpxam", 20);
        if (TSFNTFont::HasTableTags((TSFNTFont *)&v46, (uint64_t)__b, 5))
        {
          v17 = (const TSFNTFont *)operator new();
          TOpenTypeCFF2MemoryFont::TOpenTypeCFF2MemoryFont((uint64_t)v17, (uint64_t)&v72);
          goto LABEL_18;
        }
        memset(__b, 170, sizeof(__b));
        TSFNTType1CFFDescriptor::TSFNTType1CFFDescriptor((TSFNTType1CFFDescriptor *)__b, (const TSFNTData *)&v46, 1128678944, 0);
        if (DWORD2(__b[22]) == 1)
        {
          v34 = operator new();
          TOpenTypeMemoryFont::TOpenTypeMemoryFont(v34, (uint64_t)&v72);
          goto LABEL_53;
        }
        if (DWORD2(__b[22]) == 2)
        {
          v34 = operator new();
          TOpenTypeCIDMemoryFont::TOpenTypeCIDMemoryFont(v34, (uint64_t)&v72);
LABEL_53:
          AppendFontWithUniquePostscriptName((void **)a4, v34);
LABEL_65:
          TType1CFFDescriptor::~TType1CFFDescriptor((TType1CFFDescriptor *)__b);
          goto LABEL_19;
        }
        TType1CFFDescriptor::~TType1CFFDescriptor((TType1CFFDescriptor *)__b);
      }
LABEL_55:
      if ((AppendWOFFEntities((void **)a4, (const TFileReference *)&v72) & 1) != 0)
        goto LABEL_19;
      memset(__b, 170, sizeof(__b));
      if (!*(_QWORD *)(v73 + 8) || (*(_BYTE *)(v73 + 19) & 0x80) != 0)
      {
        v38[0] = &off_1E6176770;
        memset(&v38[1], 0, 24);
      }
      else
      {
        TDataReference::TDataReference(v38, v73, 0, 0, 0);
      }
      *((_QWORD *)&v42 + 1) = 0;
      *(_QWORD *)&v43 = 0;
      *(_QWORD *)&v42 = &off_1E61768F8;
      BYTE8(v43) = 0;
      v44 = (unint64_t)&off_1E6176770;
      v45 = 0uLL;
      TType1CFFDescriptor::TType1CFFDescriptor((uint64_t)__b, (uint64_t)v38, &v42, 0);
      TStringRef::~TStringRef((void **)&v42);
      TDataReference::~TDataReference((TDataReference *)v38);
      if (DWORD2(__b[22]) == 1)
      {
        v35 = (TOpenTypeCFFMemoryFont *)operator new();
        TOpenTypeCFFMemoryFont::TOpenTypeCFFMemoryFont(v35, (const TType1CFFDescriptor *)__b);
      }
      else
      {
        if (DWORD2(__b[22]) != 2)
          goto LABEL_65;
        v35 = (TOpenTypeCFFMemoryFont *)operator new();
        TOpenTypeCFFCIDMemoryFont::TOpenTypeCFFCIDMemoryFont(v35, (const TType1CFFDescriptor *)__b);
      }
      AppendFontWithUniquePostscriptName((void **)a4, (uint64_t)v35);
      goto LABEL_65;
    }
    *(_QWORD *)&v18 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v18 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v44 = v18;
    v45 = v18;
    v42 = v18;
    v43 = v18;
    TTTCMemoryFont::TTTCMemoryFont((TTTCMemoryFont *)&v42, this, a2);
    TTCHeader = TTTCMemoryFont::GetTTCHeader((TTTCMemoryFont *)&v42);
    if (!TTCHeader)
    {
      TTTCMemoryFont::~TTTCMemoryFont((TTTCMemoryFont *)&v42);
      goto LABEL_55;
    }
    v36 = (void **)a4;
    v20 = TTCHeader[2];
    if (!v20)
    {
LABEL_47:
      TTTCMemoryFont::~TTTCMemoryFont((TTTCMemoryFont *)&v42);
      goto LABEL_19;
    }
    v21 = 0;
    LODWORD(v22) = bswap32(v20);
    if (v22 <= 1)
      v22 = 1;
    else
      v22 = v22;
    v37 = v22;
    while (1)
    {
      v23 = TTCHeader;
      v24 = TTCHeader[v21 + 3];
      v40 = 0xAAAAAAAAAAAAAAAALL;
      v41 = 0xAAAAAAAAAAAAAAAALL;
      v39 = &off_1E6176678;
      v25 = operator new();
      *(_DWORD *)(v25 + 32) = 0;
      v26 = (unsigned int *)(v25 + 32);
      *(_QWORD *)v25 = &off_1E6176818;
      *(_QWORD *)(v25 + 8) = this;
      *(_QWORD *)(v25 + 16) = a2;
      *(_QWORD *)(v25 + 24) = &unk_1E6176840;
      *(_DWORD *)(v25 + 36) = 0;
      v40 = v25;
      LODWORD(v41) = bswap32(v24);
      do
        v27 = __ldxr(v26);
      while (__stxr(v27 + 1, v26));
      *((_QWORD *)&__b[8] + 1) = 0xAAAAAAAAAAAAAA00;
      *(_QWORD *)&__b[8] = 2863311530;
      *((_QWORD *)&__b[0] + 1) = 0xAAAAAAAA00000000;
      *((_QWORD *)&__b[1] + 1) = 0;
      __b[2] = 0uLL;
      *(_OWORD *)((char *)&__b[3] + 8) = 0u;
      *(_OWORD *)((char *)&__b[4] + 8) = 0u;
      *((_QWORD *)&__b[5] + 1) = 0xAAAAAAAA00000000;
      *(_QWORD *)&__b[6] = &off_1E6176770;
      memset(&__b[9], 0, 40);
      *((_QWORD *)&__b[6] + 1) = 0;
      memset(&__b[7], 0, 17);
      *((_QWORD *)&__b[11] + 1) = -1;
      *(_QWORD *)&__b[12] = 0xAAAAAAAA00000000;
      *(_QWORD *)&__b[0] = &off_1E6178EE0;
      *(_QWORD *)&__b[3] = &off_1E6176770;
      *(_QWORD *)&__b[1] = &unk_1E61790E8;
      *((_QWORD *)&__b[12] + 1) = &v39;
      v28 = (TSBITFont *)TSFNTFont::GetFormat((TSFNTFont *)__b);
      if (TTrueTypeFont::IsTrueTypeFont(v28, (TSFNTFont *)__b, v29))
      {
        v31 = (const TSFNTFont *)operator new();
        TTrueTypeMemoryFont::TTrueTypeMemoryFont((uint64_t)v31, (uint64_t)&v39, 0);
      }
      else if (TSBITFont::IsSBITFont(v28, (TSFNTFont *)__b, v30))
      {
        v31 = (const TSFNTFont *)operator new();
        TSBITMemoryFont::TSBITMemoryFont(v31, (uint64_t)&v39);
      }
      else
      {
        if ((_DWORD)v28 != 1330926671)
          goto LABEL_38;
        qmemcpy(v77, "2FFCdaehaehhxtmhpxam", sizeof(v77));
        if (TSFNTFont::HasTableTags((TSFNTFont *)__b, (uint64_t)v77, 5))
        {
          v31 = (const TSFNTFont *)operator new();
          TOpenTypeCFF2MemoryFont::TOpenTypeCFF2MemoryFont((uint64_t)v31, (uint64_t)&v39);
        }
        else if (TSFNTOpenTypeCIDFont::IsCFFCIDFont((TSFNTOpenTypeCIDFont *)__b, v32))
        {
          v31 = (const TSFNTFont *)operator new();
          TOpenTypeCIDMemoryFont::TOpenTypeCIDMemoryFont((uint64_t)v31, (uint64_t)&v39);
        }
        else
        {
          if (!TSFNTOpenTypeFont::IsCFFFont((TSFNTOpenTypeFont *)__b, v33))
            goto LABEL_38;
          v31 = (const TSFNTFont *)operator new();
          TOpenTypeMemoryFont::TOpenTypeMemoryFont((uint64_t)v31, (uint64_t)&v39);
        }
      }
      AppendFontWithUniquePostscriptName(v36, (uint64_t)v31);
LABEL_38:
      TSFNTFont::~TSFNTFont((TSFNTFont *)__b);
      TInMemoryDataReference::~TInMemoryDataReference((TInMemoryDataReference *)&v39);
      ++v21;
      TTCHeader = v23;
      if (v21 == v37)
        goto LABEL_47;
    }
  }
}

void sub_1B09D5014(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56,uint64_t a57,uint64_t a58,char a59)
{
  uint64_t v59;
  uint64_t v60;
  void *v63;

  MEMORY[0x1B5E0CD38](v60, 0x10F1C4071E37867);
  TType1CFFDescriptor::~TType1CFFDescriptor((TType1CFFDescriptor *)&a59);
  TSFNTFont::~TSFNTFont((TSFNTFont *)&a30);
  TInMemoryDataReference::~TInMemoryDataReference((TInMemoryDataReference *)&a56);
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1B09D4AB0);
  }
  v63 = *(void **)v59;
  if (*(_QWORD *)v59)
  {
    *(_QWORD *)(v59 + 8) = v63;
    operator delete(v63);
  }
  _Unwind_Resume(a1);
}

_DWORD *TTTCMemoryFont::GetTTCHeader(TTTCMemoryFont *this)
{
  uint64_t v2;
  uint64_t v3;
  _DWORD *v4;
  _DWORD *v5;
  void (**v7)(TDataReference *__hidden);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *((_QWORD *)this + 6);
  if (!*(_QWORD *)(v2 + 8) || (*(_BYTE *)(v2 + 19) & 0x80) != 0)
  {
    v4 = 0;
    v7 = &off_1E6176770;
    v8 = 0;
    v9 = 0;
    v10 = 0;
  }
  else
  {
    TDataReference::TDataReference(&v7, v2, 0, 0, 0);
    if (v8 && (v3 = *(_QWORD *)(v8 + 8)) != 0)
      v4 = (_DWORD *)(v3 + v9);
    else
      v4 = 0;
  }
  v5 = MapTTCHeader(v4, *(_QWORD *)(*((_QWORD *)this + 6) + 16));
  v7 = &off_1E6176770;
  TDataReference::DucRefCount((TDataReference *)&v7);
  return v5;
}

void sub_1B09D533C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  TDataReference::~TDataReference((TDataReference *)&a9);
  _Unwind_Resume(a1);
}

uint64_t TFont::Normalize(int a1, uint64_t a2, int a3, void *a4)
{
  if (a2)
    bzero(a4, 2 * a2);
  return 0;
}

uint64_t TFont::GetVariationAxes()
{
  return 0;
}

void TFont::GetVariationInstances(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

uint64_t TFont::GetPostScriptNameSuffixForVariation()
{
  return 0;
}

unint64_t MixString(const char *a1, unint64_t a2)
{
  unint64_t i;
  unsigned int v3;
  unsigned int v4;
  int v5;
  int v6;
  unsigned int v7;
  unsigned int v8;

  if (a2 < 5)
  {
    i = a2;
  }
  else
  {
    for (i = a2; i > 4; i -= 4)
    {
      v3 = *(_DWORD *)a1;
      if (*(_DWORD *)a1)
      {
        v4 = 9 * ((v3 + ~(v3 << 15)) ^ ((v3 + ~(v3 << 15)) >> 10));
        v3 = ((v4 ^ (v4 >> 6)) + ~((v4 ^ (v4 >> 6)) << 11)) ^ (((v4 ^ (v4 >> 6)) + ~((v4 ^ (v4 >> 6)) << 11)) >> 16);
      }
      a2 = v3 ^ a2;
      a1 += 4;
    }
  }
  v5 = 0;
  switch(i)
  {
    case 0uLL:
      return a2;
    case 1uLL:
      goto LABEL_11;
    case 2uLL:
      goto LABEL_10;
    case 3uLL:
      v5 = *((unsigned __int8 *)a1 + 2) << 23;
LABEL_10:
      v5 |= *((unsigned __int8 *)a1 + 1) << 11;
LABEL_11:
      v6 = v5 + *(unsigned __int8 *)a1;
      if (v6)
      {
        v7 = 9 * ((v6 + ~(v6 << 15)) ^ ((v6 + ~(v6 << 15)) >> 10));
        v8 = (v7 ^ (v7 >> 6)) + ~((v7 ^ (v7 >> 6)) << 11);
        v5 = v8 ^ HIWORD(v8);
      }
      else
      {
        v5 = 0;
      }
      break;
    default:
      return v5 ^ a2;
  }
  return v5 ^ a2;
}

_QWORD *TFont::GetGlyphOutlineCache(unint64_t *a1)
{
  unint64_t *v2;
  _QWORD *result;
  TGlyphOutlineCache *v4;
  unint64_t v5;

  v2 = a1 + 5;
  result = (_QWORD *)atomic_load(a1 + 5);
  if (!result)
  {
    v4 = (TGlyphOutlineCache *)(*(uint64_t (**)(unint64_t *))(*a1 + 168))(a1);
    result = TGlyphOutlineCache::CreateGlyphOutlineCache(v4);
    while (1)
    {
      v5 = __ldaxr(v2);
      if (v5)
        break;
      if (!__stlxr((unint64_t)result, v2))
        return result;
    }
    __clrex();
    (*(void (**)(_QWORD *))(*result + 8))(result);
    return (_QWORD *)v5;
  }
  return result;
}

void TFontSurrogate::TFontSurrogate(TFontSurrogate *this)
{
  *(_QWORD *)this = &off_1E617B598;
  *((_QWORD *)this + 1) = 0;
}

{
  *(_QWORD *)this = &off_1E617B598;
  *((_QWORD *)this + 1) = 0;
}

void TFontSurrogate::~TFontSurrogate(TFontSurrogate *this)
{
  JUMPOUT(0x1B5E0CD38);
}

void TFontSurrogate::TFontSurrogate(TFontSurrogate *this, const TFontSurrogate *a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)a2 + 1);
  *(_QWORD *)this = &off_1E617B598;
  *((_QWORD *)this + 1) = v2;
}

{
  uint64_t v2;

  v2 = *((_QWORD *)a2 + 1);
  *(_QWORD *)this = &off_1E617B598;
  *((_QWORD *)this + 1) = v2;
}

uint64_t TFontSurrogate::operator=(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  return result;
}

TSFNTFont *TFontSurrogate::GetFormat(TFontSurrogate *this)
{
  TSFNTFont *result;

  result = (TSFNTFont *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 432))(*((_QWORD *)this + 1));
  if (result)
    return (TSFNTFont *)TSFNTFont::GetFormat(result);
  return result;
}

uint64_t TFontSurrogate::GetTablePart@<X0>(uint64_t this@<X0>, unsigned int *a2@<X4>, unsigned int a3@<W1>, unsigned int a4@<W2>, unsigned int a5@<W3>, _QWORD *a6@<X8>)
{
  uint64_t v7;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;

  if (a3
    && (v7 = this, *(_QWORD *)(this + 8))
    && (this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 72))(this)) != 0
    && a3 <= bswap32(*(unsigned __int16 *)(this + 4)) >> 16
    && ((v12 = this + 16 * a3, v13 = bswap32(*(_DWORD *)(v12 + 8)), v14 = v13 - a4, v13 > a4)
      ? (v15 = v14 >= a5)
      : (v15 = 0),
        v15))
  {
    *a2 = v13;
    v16 = bswap32(*(_DWORD *)(v12 + 4)) + a4;
    if (a5)
      v17 = a5;
    else
      v17 = v14;
    return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v7 + 8) + 48))(*(_QWORD *)(v7 + 8), v16, v17);
  }
  else
  {
    *a6 = &off_1E6176770;
    a6[1] = 0;
    a6[2] = 0;
    a6[3] = 0;
  }
  return this;
}

uint64_t TFontSurrogate::GetFontProtectionInfo(TFontSurrogate *this, unsigned int *a2)
{
  __int128 v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v6;
  __int128 v7;

  *(_QWORD *)&v2 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v2 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v6 = v2;
  v7 = v2;
  (*(void (**)(__int128 *__return_ptr, TFontSurrogate *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)this + 40))(&v6, this, 1330851634, 0, 0);
  v3 = 0;
  if (*((_QWORD *)&v7 + 1) - (_QWORD)v7 >= 0xAuLL)
  {
    if (*((_QWORD *)&v6 + 1) && (v4 = *(_QWORD *)(*((_QWORD *)&v6 + 1) + 8)) != 0)
      v3 = bswap32(*(unsigned __int16 *)(v4 + v7 + 8)) & 0xFFFF0000;
    else
      v3 = 0;
  }
  *(_QWORD *)&v6 = &off_1E6176770;
  TDataReference::DucRefCount((TDataReference *)&v6);
  return v3;
}

BOOL TFontSurrogate::FontTableExists(TFontSurrogate *this, uint64_t a2)
{
  int v4;

  v4 = 0;
  return (*(unsigned int (**)(TFontSurrogate *, uint64_t, int *))(*(_QWORD *)this + 24))(this, a2, &v4) != -1
      && v4 != 0;
}

uint64_t TFontSurrogate::GetFontTableSize(TFontSurrogate *this, uint64_t a2)
{
  unsigned int v3;

  v3 = 0;
  if ((*(unsigned int (**)(TFontSurrogate *, uint64_t, unsigned int *))(*(_QWORD *)this + 24))(this, a2, &v3) == -1)return 0;
  else
    return v3;
}

__CFString *TFPFontImpl::FindFontNamePerScript(TFPFontImpl *this, const char *a2)
{
  uint64_t v4;

  if (!strcmp((const char *)this, "GB1"))
  {
    v4 = 0;
  }
  else if (!strcmp((const char *)this, "CNS1"))
  {
    v4 = 1;
  }
  else if (!strcmp((const char *)this, "Japan1"))
  {
    v4 = 2;
  }
  else
  {
    if (strcmp((const char *)this, "Korea1"))
      return 0;
    v4 = 3;
  }
  return TFPFontImpl::FindFontNamePerScript(char const*)::gPDFFallbackFontName[v4];
}

uint64_t TTTCMemoryFont::GetKind(TTTCMemoryFont *this)
{
  return 4;
}

uint64_t TTTCMemoryFont::GetFontRef(TTTCMemoryFont *this)
{
  return (uint64_t)this + 40;
}

uint64_t TLockedLRUCache<TFontCacheNode,48ul>::CreateCache()
{
  uint64_t result;
  _OWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  result = operator new();
  v1 = (_OWORD *)(result + 104);
  v2 = 48;
  do
  {
    *(_OWORD *)((char *)v1 - 88) = 0uLL;
    *(_OWORD *)((char *)v1 - 104) = 0uLL;
    *((_QWORD *)v1 - 1) = (char *)v1 - 72;
    *v1 = 0uLL;
    v1[1] = 0uLL;
    *(_OWORD *)((char *)v1 + 26) = 0uLL;
    v1 = (_OWORD *)((char *)v1 + 152);
    --v2;
  }
  while (v2);
  *(_OWORD *)(result + 7296) = xmmword_1B0AABAB0;
  v3 = 1;
  v4 = (_QWORD *)result;
  do
  {
    *v4 = v3;
    v4 += 19;
    ++v3;
  }
  while (v3 != 49);
  *(_QWORD *)(result + 7144) = 0;
  *(_DWORD *)(result + 7312) = 0;
  TLockedLRUCache<TFontCacheNode,48ul>::sSharedCache = (_UNKNOWN *)result;
  return result;
}

uint64_t *TLRUCacheImp<TFontCacheNode,48ul>::FindNode(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(_QWORD *)(a1 + 7296);
  v5 = (uint64_t *)(a1 + 152 * v4);
  if (!TFontCacheNode::operator==((uint64_t)v5, a2))
  {
    v6 = *(_QWORD *)(a1 + 7304);
    v7 = v4;
    do
    {
      if (v7 == v6)
        return 0;
      v8 = v7;
      v7 = *v5;
      v5 = (uint64_t *)(a1 + 152 * *v5);
    }
    while (!TFontCacheNode::operator==((uint64_t)v5, a2));
    if (v7 != v4)
    {
      *(_QWORD *)(a1 + 152 * v8) = *v5;
      v9 = *(_QWORD *)(a1 + 7304);
      if (v7 == v9)
      {
        *(_QWORD *)(a1 + 7304) = v8;
        v9 = v8;
      }
      *v5 = v4;
      *(_QWORD *)(a1 + 7296) = v7;
      *(_QWORD *)(a1 + 152 * v9) = v7;
    }
  }
  return v5;
}

void TLRUCacheImp<TFontCacheNode,48ul>::RemoveNode(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  _OWORD v12[2];
  _OWORD v13[4];
  _OWORD *v14;
  __int128 v15;
  _QWORD v16[5];

  v16[4] = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 7304);
  v5 = *(_QWORD *)(a1 + 7296);
  v6 = (uint64_t *)(a1 + 152 * v5);
  if (TFontCacheNode::operator==((uint64_t)v6, a2))
  {
    v7 = *v6;
    v8 = v5;
    v9 = v4;
LABEL_3:
    *(_QWORD *)(a1 + 7296) = v7;
LABEL_4:
    *(_QWORD *)&v10 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v16[3] = 0xAAAAAAAAAAAAAAAALL;
    v13[2] = v10;
    v13[3] = v10;
    v13[0] = v10;
    v13[1] = v10;
    memset(v12, 0, sizeof(v12));
    v14 = v13;
    v15 = 0u;
    memset(v16, 0, 24);
    TFontCacheNode::operator=((uint64_t)v6, (uint64_t)v12);
    v11 = *(_QWORD *)(a1 + 7304);
    if (v8 != v11)
    {
      *(_QWORD *)(a1 + 152 * v9) = v7;
      *(_QWORD *)(a1 + 152 * v11) = v8;
      *(_QWORD *)(a1 + 7304) = v8;
    }
    *v6 = *(_QWORD *)(a1 + 7296);
    TFontCacheNode::~TFontCacheNode((TFontCacheNode *)v12);
  }
  else
  {
    v8 = v5;
    while (v8 != v4)
    {
      v9 = v8;
      v8 = *v6;
      v6 = (uint64_t *)(a1 + 152 * *v6);
      if (TFontCacheNode::operator==((uint64_t)v6, a2))
      {
        v7 = *v6;
        if (v8 == v5)
          goto LABEL_3;
        goto LABEL_4;
      }
    }
  }
}

void sub_1B09D5AA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  TFontCacheNode::~TFontCacheNode((TFontCacheNode *)&a9);
  _Unwind_Resume(a1);
}

void TFontCacheNode::TFontCacheNode(TFontCacheNode *this, const char *__s, timespec a3, __int16 a4)
{
  uint64_t tv_nsec;
  __darwin_time_t tv_sec;
  _QWORD *v9;
  size_t v10;
  _BYTE v11[9];

  tv_nsec = a3.tv_nsec;
  tv_sec = a3.tv_sec;
  *(_QWORD *)this = 0;
  v9 = (_QWORD *)((char *)this + 8);
  v10 = strlen(__s);
  v11[0] = 0;
  std::vector<char,TInlineBufferAllocator<char,64ul>>::vector(v9, v10 + 1, v11);
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 13) = tv_sec;
  *((_QWORD *)this + 14) = tv_nsec;
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 17) = 0;
  *((_WORD *)this + 72) = a4;
  strlcpy(*((char **)this + 1), __s, *((_QWORD *)this + 2) - *((_QWORD *)this + 1));
}

void sub_1B09D5B58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  void **v3;
  void *v5;
  va_list va;

  va_start(va, a2);
  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v2 + 128) = v5;
    operator delete(v5);
  }
  std::vector<CGFontVariation,TInlineBufferAllocator<CGFontVariation,4ul>>::__destroy_vector::operator()[abi:fe180100]((void ***)va);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<char,TInlineBufferAllocator<char,64ul>>::vector(_QWORD *a1, size_t a2, _BYTE *a3)
{
  size_t v5;
  _BYTE *v6;
  _BYTE *v7;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  a1[11] = a1 + 3;
  if (a2)
  {
    v5 = a2;
    std::vector<char,TInlineBufferAllocator<char,64ul>>::__vallocate[abi:fe180100](a1, a2);
    v6 = (_BYTE *)a1[1];
    v7 = &v6[v5];
    do
    {
      *v6++ = *a3;
      --v5;
    }
    while (v5);
    a1[1] = v7;
  }
  return a1;
}

void sub_1B09D5BFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<CGFontVariation,TInlineBufferAllocator<CGFontVariation,4ul>>::__destroy_vector::operator()[abi:fe180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<char,TInlineBufferAllocator<char,64ul>>::__vallocate[abi:fe180100](_QWORD *a1, size_t __sz)
{
  char *result;
  _QWORD *v5;

  if ((__sz & 0x8000000000000000) != 0)
    std::vector<char,TInlineBufferAllocator<char,1024ul>>::__throw_length_error[abi:fe180100]();
  v5 = a1 + 11;
  result = (char *)a1[11];
  if (&result[__sz] <= (char *)a1 + 88)
    *v5 = &result[__sz];
  else
    result = (char *)operator new(__sz);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[__sz];
  return result;
}

BOOL TFontCacheNode::operator==(uint64_t a1, uint64_t a2)
{
  int v3;
  const char *v5;

  v3 = *(unsigned __int16 *)(a2 + 144);
  if (v3 != 0xFFFF
    && (*(_QWORD *)(a1 + 104) != *(_QWORD *)(a2 + 104) || *(_QWORD *)(a1 + 112) != *(_QWORD *)(a2 + 112)))
  {
    return 0;
  }
  v5 = *(const char **)(a1 + 8);
  if (v5 == *(const char **)(a1 + 16) || strcmp(v5, *(const char **)(a2 + 8)))
    return 0;
  if (*(_QWORD *)(a1 + 128) - *(_QWORD *)(a1 + 120) > 8uLL)
    return 1;
  return (__int16)v3 < 1 || *(unsigned __int16 *)(a1 + 144) == v3;
}

_QWORD *TFontCacheNode::CopyFonts(TFontCacheNode *this, uint64_t a2)
{
  char *v3;
  char *v4;
  uint64_t v6;
  const void *v7;

  v3 = *(char **)(a2 + 120);
  v4 = *(char **)(a2 + 128);
  if (v3 == v4)
  {
    v7 = *(const void **)(a2 + 120);
  }
  else
  {
    do
    {
      v6 = *(_QWORD *)v3;
      v3 += 8;
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
    }
    while (v3 != v4);
    v7 = *(const void **)(a2 + 120);
    v3 = *(char **)(a2 + 128);
  }
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  return std::vector<TFont *>::__init_with_size[abi:fe180100]<TFont **,TFont **>(this, v7, (uint64_t)v3, (v3 - (_BYTE *)v7) >> 3);
}

_QWORD *std::vector<TFont *>::__init_with_size[abi:fe180100]<TFont **,TFont **>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v4;
  _QWORD *v7;
  uint64_t v8;
  size_t v9;

  if (a4)
  {
    v4 = result;
    if (a4 >> 61)
      std::vector<char,TInlineBufferAllocator<char,1024ul>>::__throw_length_error[abi:fe180100]();
    result = std::__allocate_at_least[abi:fe180100]<std::allocator<TVariationInstance>>((uint64_t)(result + 2), a4);
    v7 = result;
    *v4 = result;
    v4[1] = result;
    v4[2] = &result[v8];
    v9 = a3 - (_QWORD)a2;
    if (v9)
      result = memmove(result, a2, v9);
    v4[1] = (char *)v7 + v9;
  }
  return result;
}

void sub_1B09D5DE8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t TFontNameString::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;

  if (*(unsigned __int16 *)(a1 + 66) != *(unsigned __int16 *)(a2 + 66))
    return 0;
  result = TStringRef::operator==((_QWORD *)a1, (_QWORD *)a2);
  if (!(_DWORD)result)
    return result;
  if (*(unsigned __int8 *)(a1 + 64) != *(unsigned __int8 *)(a2 + 64)
    || *(unsigned __int16 *)(a1 + 68) != *(unsigned __int16 *)(a2 + 68)
    || *(unsigned __int16 *)(a1 + 70) != *(unsigned __int16 *)(a2 + 70)
    || *(unsigned __int16 *)(a1 + 72) != *(unsigned __int16 *)(a2 + 72))
  {
    return 0;
  }
  v5 = *(const void **)(a1 + 80);
  v6 = *(const void **)(a2 + 80);
  if (v5 == v6 || (result = 0, v5) && v6 && (result = CFEqual(*(CFTypeRef *)(a1 + 80), v6), (_DWORD)result))
  {
    v7 = *(const void **)(a1 + 88);
    v8 = *(const void **)(a2 + 88);
    if (v7 == v8)
    {
      return 1;
    }
    else
    {
      result = 0;
      if (v7)
      {
        if (v8)
          return CFEqual(*(CFTypeRef *)(a1 + 88), v8) != 0;
      }
    }
  }
  return result;
}

BOOL TStringRef::operator==(_QWORD *a1, _QWORD *a2)
{
  size_t v2;
  const void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const void *v8;

  v2 = a1[2];
  if (v2 != a2[2])
    return 0;
  if (!v2)
    return 1;
  v4 = (const void *)a1[1];
  if (!v4)
  {
    v5 = a1[5];
    if (v5 && (v6 = *(_QWORD *)(v5 + 8)) != 0)
      v4 = (const void *)(v6 + a1[6]);
    else
      v4 = 0;
  }
  v8 = (const void *)a2[1];
  if (!v8)
  {
    v7 = a2[5];
    if (!v7)
      return v7;
    v7 = *(_QWORD *)(v7 + 8);
    if (!v7)
      return v7;
    v8 = (const void *)(v7 + a2[6]);
  }
  v7 = 0;
  if (v4 && v8)
    return memcmp(v4, v8, v2) == 0;
  return v7;
}

uint64_t GSFontLibraryCore(char **a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v3 = 0;
  v4 = &v3;
  v5 = 0x2000000000;
  v1 = GSFontLibraryCore(char **)::frameworkLibrary;
  v6 = GSFontLibraryCore(char **)::frameworkLibrary;
  if (!GSFontLibraryCore(char **)::frameworkLibrary)
  {
    v7 = xmmword_1E61C9360;
    v1 = _sl_dlopen();
    v4[3] = v1;
    GSFontLibraryCore(char **)::frameworkLibrary = v1;
  }
  _Block_object_dispose(&v3, 8);
  return v1;
}

void sub_1B09D6034(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

uint64_t getGSFontEnsureFontFileAccessSymbolLoc(void)
{
  uint64_t v0;
  _QWORD v2[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2000000000;
  v0 = getGSFontEnsureFontFileAccessSymbolLoc(void)::ptr;
  v6 = getGSFontEnsureFontFileAccessSymbolLoc(void)::ptr;
  if (!getGSFontEnsureFontFileAccessSymbolLoc(void)::ptr)
  {
    v2[0] = MEMORY[0x1E0C809B0];
    v2[1] = 0x40000000;
    v2[2] = ___ZL38getGSFontEnsureFontFileAccessSymbolLocv_block_invoke;
    v2[3] = &unk_1E61C9378;
    v2[4] = &v3;
    ___ZL38getGSFontEnsureFontFileAccessSymbolLocv_block_invoke((uint64_t)v2);
    v0 = v4[3];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1B09D60E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void TTTCMemoryFont::TTTCMemoryFont(TTTCMemoryFont *this, const void *a2, uint64_t a3)
{
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;

  *((_DWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *(_QWORD *)this = &off_1E61C92C8;
  *((_QWORD *)this + 2) = &unk_1E61C9318;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = &off_1E6176678;
  v6 = operator new();
  *(_DWORD *)(v6 + 32) = 0;
  v7 = (unsigned int *)(v6 + 32);
  *(_QWORD *)v6 = &off_1E6176818;
  *(_QWORD *)(v6 + 8) = a2;
  *(_QWORD *)(v6 + 16) = a3;
  *(_QWORD *)(v6 + 24) = &unk_1E6176840;
  *(_DWORD *)(v6 + 36) = 0;
  *((_QWORD *)this + 6) = v6;
  *((_DWORD *)this + 14) = 0;
  do
    v8 = __ldxr(v7);
  while (__stxr(v8 + 1, v7));
}

void sub_1B09D6234(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 16) = &off_1E617B870;
  std::shared_ptr<cacheStrike>::~shared_ptr[abi:fe180100](v2);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<MCacheData>::shared_ptr[abi:fe180100]<MCacheData,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E61C93A8;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_1B09D62A8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<MCacheData *,std::shared_ptr<MCacheData>::__shared_ptr_default_delete<MCacheData,MCacheData>,std::allocator<MCacheData>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E0CD38);
}

uint64_t std::__shared_ptr_pointer<MCacheData *,std::shared_ptr<MCacheData>::__shared_ptr_default_delete<MCacheData,MCacheData>,std::allocator<MCacheData>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<MCacheData *,std::shared_ptr<MCacheData>::__shared_ptr_default_delete<MCacheData,MCacheData>,std::allocator<MCacheData>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t **std::__hash_table<std::__hash_value_type<unsigned short,TFontNameString>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,TFontNameString>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,TFontNameString>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,TFontNameString>>>::find<unsigned short>(_QWORD *a1, unsigned __int16 *a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  uint64_t ***v6;
  uint64_t **result;
  unint64_t v8;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2;
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = *a2;
    if (*(_QWORD *)&v2 <= v3)
      v5 = v3 % *(_QWORD *)&v2;
  }
  else
  {
    v5 = (v2.i32[0] - 1) & v3;
  }
  v6 = *(uint64_t ****)(*a1 + 8 * v5);
  if (!v6)
    return 0;
  for (result = *v6; result; result = (uint64_t **)*result)
  {
    v8 = (unint64_t)result[1];
    if (v8 == v3)
    {
      if (*((unsigned __int16 *)result + 8) == (_DWORD)v3)
        return result;
    }
    else
    {
      if (v4.u32[0] > 1uLL)
      {
        if (v8 >= *(_QWORD *)&v2)
          v8 %= *(_QWORD *)&v2;
      }
      else
      {
        v8 &= *(_QWORD *)&v2 - 1;
      }
      if (v8 != v5)
        return 0;
    }
  }
  return result;
}

void TType1SFNTFont::FindCharName(TType1SFNTFont *this, unsigned int a2, unsigned __int8 *a3)
{
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  const TFontObjectSurrogate *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int v14;
  _OWORD v15[2];
  __int128 v16;
  unint64_t v17;

  v5 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 4) + 104) + 8 * a2);
  if (v5 >= 0x64)
    v6 = 100;
  else
    v6 = v5;
  if (v5 >= 0x64)
    v7 = v5 - 100;
  else
    v7 = 0;
  v17 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v8 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v15[1] = v8;
  v16 = v8;
  v15[0] = v8;
  v9 = (const TFontObjectSurrogate *)(*(uint64_t (**)(TType1SFNTFont *))(*(_QWORD *)this + 216))(this);
  v10 = (*(uint64_t (**)(TType1SFNTFont *))(*(_QWORD *)this + 120))(this);
  TFontObjectTable::TFontObjectTable((TFontObjectTable *)v15, v9, v10, v7, v6);
  v11 = *((_QWORD *)&v16 + 1) + v6;
  v12 = *((_QWORD *)&v16 + 1) + v6 - 1;
  while (v12 > *((_QWORD *)&v16 + 1))
  {
    if (*(_BYTE *)(v11 - 1) == 47 && *(unsigned __int8 *)(v11 - 2) <= 0x20u)
    {
      v13 = 0;
      LOBYTE(v14) = 47;
      do
      {
        a3[v13 + 1] = v14;
        v14 = *(unsigned __int8 *)(v11 + v13++);
      }
      while (v14 > 0x20);
      *a3 = v13;
      break;
    }
    v12 = v11 - 2;
    --v11;
  }
  *((_QWORD *)&v15[0] + 1) = &off_1E6176770;
  TDataReference::DucRefCount((TDataReference *)((char *)v15 + 8));
}

uint64_t TType1SFNTFont::GetFontDataLength(TType1SFNTFont *this, unsigned int *a2, unsigned int *a3)
{
  __int128 v6;
  const TFontObjectSurrogate *v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD v11[2];
  __int128 v12;
  unint64_t v13;

  v13 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v6 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v11[1] = v6;
  v12 = v6;
  v11[0] = v6;
  v7 = (const TFontObjectSurrogate *)(*(uint64_t (**)(TType1SFNTFont *))(*(_QWORD *)this + 216))(this);
  v8 = (*(uint64_t (**)(TType1SFNTFont *))(*(_QWORD *)this + 120))(this);
  TFontObjectTable::TFontObjectTable((TFontObjectTable *)v11, v7, v8, 0, 24);
  v9 = *((_QWORD *)&v12 + 1);
  *a2 = bswap32(*(_DWORD *)(*((_QWORD *)&v12 + 1) + 12));
  *a3 = bswap32(*(_DWORD *)(v9 + 16));
  LODWORD(a3) = *(_DWORD *)(v9 + 8);
  *((_QWORD *)&v11[0] + 1) = &off_1E6176770;
  TDataReference::DucRefCount((TDataReference *)((char *)v11 + 8));
  return bswap32(a3);
}

void TStreamingContext::~TStreamingContext(TStreamingContext *this)
{
  TBufferedStreamingContext::~TBufferedStreamingContext(this);
  JUMPOUT(0x1B5E0CD38);
}

uint64_t TType1SFNTFont::StreamPSFont(_QWORD *a1, uint64_t a2, int a3, char a4, unsigned int *a5, uint64_t a6, const char *a7, uint64_t a8, unsigned int *a9, uint64_t *a10)
{
  uint64_t v18;
  const char *v19;
  __int128 v20;
  uint64_t v21;
  unsigned __int16 *v22;
  __int128 v23;
  int v24;
  __int16 v25;
  uint64_t v26;
  _BYTE *v27;
  int v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  __int128 v32;
  const TFontObjectSurrogate *v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int v38;
  __int128 v39;
  __int128 v40;
  __int16 v41;
  unsigned __int16 *v42;
  __int128 v43;
  uint64_t v44;
  const char *InstanceName;
  char v46;
  int v47;
  unsigned int v48;
  uint64_t v49;
  const unsigned __int8 *v50;
  unsigned int v51;
  unsigned int v52;
  int v53;
  unsigned int v54;
  char v55;
  int v56;
  uint64_t v57;
  unsigned int v58;
  int v59;
  __int32 *v60;
  unsigned int v61;
  unsigned int v62;
  uint64_t v63;
  unsigned __int16 v64;
  __int16 v65;
  int *v66;
  int v67;
  unsigned int v68;
  __int128 v69;
  const TFontObjectSurrogate *v70;
  uint64_t v71;
  unsigned int v72;
  BOOL v73;
  _BOOL4 v74;
  unint64_t v75;
  unsigned __int8 *v76;
  unsigned __int8 *v77;
  unint64_t v78;
  int v79;
  unint64_t v80;
  size_t v81;
  int v82;
  unsigned int v83;
  __int128 v84;
  unsigned __int8 *v85;
  int v86;
  unint64_t v87;
  __int128 v88;
  const TFontObjectSurrogate *v89;
  uint64_t v90;
  __int16 v91;
  unsigned __int8 *v92;
  uint64_t result;
  uint64_t v94;
  int v95;
  char *__s;
  __int32 *v97;
  unint64_t v98[2];
  __int128 v99;
  unsigned __int8 *v100[2];
  unint64_t v101;
  unsigned int v102;
  unsigned int v103;
  unsigned int v104;
  int v105;
  unsigned int v106;
  unint64_t v107;
  char v108[16];
  _BYTE v109[120];
  __int128 v110;
  _OWORD __b[46];
  unsigned int v112[4];
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  uint64_t v144;

  v144 = *MEMORY[0x1E0C80C00];
  v18 = (*(uint64_t (**)(_QWORD *, _QWORD))(*a1 + 48))(a1, *a9);
  *a9 = v18;
  v107 = 0xAAAAAAAAAAAAAAAALL;
  (*(void (**)(unint64_t *__return_ptr, _QWORD *, uint64_t, uint64_t))(*a1 + 240))(&v107, a1, v18, a8);
  v97 = (__int32 *)v107;
  *(_QWORD *)&v20 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v20 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v143 = v20;
  v142 = v20;
  v141 = v20;
  v140 = v20;
  v139 = v20;
  v138 = v20;
  v137 = v20;
  v136 = v20;
  v135 = v20;
  v134 = v20;
  v133 = v20;
  v132 = v20;
  v131 = v20;
  v130 = v20;
  v129 = v20;
  v128 = v20;
  v127 = v20;
  v126 = v20;
  v125 = v20;
  v124 = v20;
  v123 = v20;
  v122 = v20;
  v121 = v20;
  v120 = v20;
  v119 = v20;
  v118 = v20;
  v117 = v20;
  v116 = v20;
  v115 = v20;
  v114 = v20;
  v113 = v20;
  *(_OWORD *)v112 = v20;
  if (!a5)
  {
    LODWORD(v21) = (*(uint64_t (**)(_QWORD))(*(_QWORD *)a1[4] + 168))(a1[4]);
    if (v21 >= 0xFFFF)
      v21 = 0xFFFFLL;
    else
      v21 = v21;
    a5 = v112;
    TType1PSFont::SetEncoding(v21, v97, v112, v22);
  }
  if ((*((_BYTE *)a9 + 1) & 2) != 0)
  {
    *(_QWORD *)&v39 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v39 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)&v109[104] = v39;
    *(_OWORD *)&v109[88] = v39;
    *(_OWORD *)&v109[72] = v39;
    *(_OWORD *)&v109[56] = v39;
    *(_OWORD *)&v109[40] = v39;
    *(_QWORD *)v108 = &off_1E61B63B8;
    *(_QWORD *)&v108[8] = a1;
    *(_QWORD *)v109 = v97;
    *(_QWORD *)&v109[8] = (*(uint64_t (**)(_QWORD *))(*a1 + 40))(a1);
    *(_QWORD *)&v109[16] = a10;
    *(_QWORD *)&v109[24] = operator new[]();
    *(_QWORD *)&v109[32] = 0;
    *(_DWORD *)&v109[40] = 0;
    *(_DWORD *)&v109[46] = 0;
    *(_QWORD *)&v40 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v40 + 1) = 0xAAAAAAAAAAAAAAAALL;
    __b[22] = v40;
    __b[23] = v40;
    __b[20] = v40;
    __b[21] = v40;
    __b[18] = v40;
    __b[19] = v40;
    __b[16] = v40;
    __b[17] = v40;
    __b[14] = v40;
    __b[15] = v40;
    __b[12] = v40;
    __b[13] = v40;
    __b[10] = v40;
    __b[11] = v40;
    __b[8] = v40;
    __b[9] = v40;
    __b[6] = v40;
    __b[7] = v40;
    __b[4] = v40;
    __b[5] = v40;
    __b[2] = v40;
    __b[3] = v40;
    __b[0] = v40;
    __b[1] = v40;
    TCFFFontSet::TCFFFontSet((TCFFFontSet *)__b, 1, 0, 1, a7);
    *(_QWORD *)&__b[0] = &off_1E61CB900;
    (*(void (**)(_QWORD *, __int32 *, unsigned int *, _OWORD *, uint64_t))(*a1 + 264))(a1, v97, a5, __b, 255);
    TCFFFontSet::StreamOut((TCFFFontSet *)__b, (TBufferedStreamingContext *)v108);
    TCFFFontSet::~TCFFFontSet((TCFFFontSet *)__b);
LABEL_89:
    TBufferedStreamingContext::~TBufferedStreamingContext((TBufferedStreamingContext *)v108);
    goto LABEL_90;
  }
  __s = (char *)a7;
  if ((a1[1] & 1) == 0 || (a4 & 1) == 0 && !TType1PSFont::PrinterIsBad(a2, v19))
  {
    *(_QWORD *)&v23 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v23 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v110 = v23;
    *(_OWORD *)&v109[104] = v23;
    *(_OWORD *)&v109[88] = v23;
    *(_OWORD *)&v109[72] = v23;
    *(_OWORD *)&v109[56] = v23;
    *(_OWORD *)&v109[40] = v23;
    *(_OWORD *)&v109[24] = v23;
    *(_OWORD *)&v109[8] = v23;
    v24 = *((__int16 *)a1 + 8);
    *(_QWORD *)v108 = &off_1E61B63B8;
    *(_QWORD *)&v108[8] = a1;
    *(_QWORD *)v109 = v97;
    *(_QWORD *)&v109[8] = (*(uint64_t (**)(_QWORD *))(*a1 + 40))(a1);
    *(_QWORD *)&v109[16] = a10;
    *(_QWORD *)&v109[24] = operator new[]();
    *(_QWORD *)&v109[32] = 0;
    *(_DWORD *)&v109[40] = 0;
    *(_DWORD *)&v109[46] = 0;
    *(_QWORD *)v108 = &off_1E61C94B0;
    *(_WORD *)&v109[114] = -1;
    *(_DWORD *)&v109[116] = -1;
    if (v24 >= 1)
      v25 = v24 + 1;
    else
      v25 = 1;
    LOWORD(v110) = v25;
    *((_BYTE *)&v110 + v25 + 1) = 14;
    if ((v24 & 0x80000000) == 0)
    {
      v26 = (__int16)v110;
      if ((_WORD)v110)
      {
        v27 = (char *)&v110 + 2;
        v28 = 4330;
        do
        {
          v29 = *v27 ^ ((unsigned __int16)(v28 & 0xFF00) >> 8);
          *v27++ ^= (unsigned __int16)(v28 & 0xFF00) >> 8;
          v28 = 22719 - 12691 * (v28 + v29);
          --v26;
        }
        while (v26);
      }
    }
    if ((a1[1] & 1) != 0)
      TBufferedStreamingContext::BufferString((uint64_t)v108, (const unsigned __int8 *)"\rsystemdict /setpacking known { currentpacking false setpacking } if\r", 0x45uLL);
    v105 = -1431655766;
    v106 = -1431655766;
    v95 = (*(uint64_t (**)(_QWORD *, unsigned int *, int *))(*a1 + 296))(a1, &v106, &v105);
    v30 = (*(uint64_t (**)(_QWORD *))(*a1 + 304))(a1);
    v31 = v106;
    *(_QWORD *)&__b[3] = 0xAAAAAAAAAAAAAAAALL;
    *(_QWORD *)&v32 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v32 + 1) = 0xAAAAAAAAAAAAAAAALL;
    __b[1] = v32;
    __b[2] = v32;
    __b[0] = v32;
    v33 = (const TFontObjectSurrogate *)(*(uint64_t (**)(_QWORD *))(*a1 + 216))(a1);
    v34 = (*(uint64_t (**)(_QWORD *))(*a1 + 120))(a1);
    TFontObjectTable::TFontObjectTable((TFontObjectTable *)__b, v33, v34, v30, v31);
    if ((a1[1] & 0x80) != 0)
    {
      TBufferedStreamingContext::BufferString((uint64_t)v108, *((const unsigned __int8 **)&__b[2] + 1), v31);
      goto LABEL_35;
    }
    LODWORD(v98[0]) = -1431655766;
    v104 = -1431655766;
    TType1PSFont::FindNameRange(*((TType1PSFont **)&__b[2] + 1), (const char *)v31, v98, &v104, v35, v36);
    v102 = 0;
    v103 = -1431655766;
    FindEncoRange(*((unsigned __int8 **)&__b[2] + 1), v31, &v103, &v102);
    v37 = v102;
    if (v102 == -1)
    {
      v38 = 0x7FFFFFFF;
      v103 = 0x7FFFFFFF;
    }
    else
    {
      v38 = v103;
    }
    v47 = v98[0];
    if (LODWORD(v98[0]) >= v38)
    {
      TBufferedStreamingContext::BufferString((uint64_t)v108, *((const unsigned __int8 **)&__b[2] + 1), v38);
      TBufferedStreamingContext::StreamBuffer((uint64_t)v108);
      (*(void (**)(_QWORD *, unsigned int *, _QWORD, uint64_t *))(*a1 + 256))(a1, a5, 0, a10);
      TBufferedStreamingContext::BufferString((uint64_t)v108, (const unsigned __int8 *)(*((_QWORD *)&__b[2] + 1) + v38 + v37), v47 - (v38 + v37));
      v51 = strlen(__s);
      TBufferedStreamingContext::BufferString((uint64_t)v108, (const unsigned __int8 *)__s, v51);
      v49 = v104 + v47;
    }
    else
    {
      TBufferedStreamingContext::BufferString((uint64_t)v108, *((const unsigned __int8 **)&__b[2] + 1), LODWORD(v98[0]));
      v48 = strlen(__s);
      TBufferedStreamingContext::BufferString((uint64_t)v108, (const unsigned __int8 *)__s, v48);
      v49 = v104 + v47;
      v50 = (const unsigned __int8 *)(*((_QWORD *)&__b[2] + 1) + v49);
      if (v38 == 0x7FFFFFFF)
      {
LABEL_34:
        TBufferedStreamingContext::BufferString((uint64_t)v108, v50, (v31 - v49));
LABEL_35:
        *((_QWORD *)&__b[0] + 1) = &off_1E6176770;
        TDataReference::DucRefCount((TDataReference *)((char *)__b + 8));
        v94 = (uint64_t)a5;
        v52 = v106;
        v53 = (*(uint64_t (**)(_QWORD *))(*a1 + 304))(a1);
        v54 = v105;
        if ((*a9 & 0x10000) != 0)
          v55 = 0;
        else
          v55 = a3;
        TBufferedStreamingContext::BeginEexec((TBufferedStreamingContext *)v108, a3, v55);
        v56 = 0;
        v57 = v53 + v52;
        while (1)
        {
          if (v97)
          {
            v59 = v105;
            v58 = v106;
            if (*(__int16 *)&v109[114] == -1)
            {
              v60 = v97;
              v57 = (*(unsigned int (**)(_QWORD *))(*a1 + 304))(a1) + v58;
            }
            else
            {
              v57 = *(unsigned int *)&v109[116];
              v60 = v97;
            }
            if ((a1[1] & 0x40) == 0)
            {
              v61 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)a1[4] + 168))(a1[4]);
              if (v61 >= 0xFFFF)
                v62 = 0xFFFF;
              else
                v62 = v61;
              v63 = *(_QWORD *)(a1[4] + 104);
              v64 = *(_WORD *)&v109[114];
              if (v62 <= (unsigned __int16)(*(_WORD *)&v109[114] + 1))
                v65 = *(_WORD *)&v109[114] + 1;
              else
                v65 = v62;
              while (++v64 < (unsigned __int16)v62)
              {
                if (((v60[v64 >> 5] << v64) & 0x80000000) == 0)
                {
                  *(_WORD *)&v109[114] = v64;
                  v66 = (int *)(v63 + 8 * v64);
                  v67 = *v66;
                  *(_DWORD *)&v109[116] = v66[1] + *v66;
                  v54 = v67 - v57;
                  v56 = 1;
                  goto LABEL_55;
                }
              }
              *(_WORD *)&v109[114] = v65;
            }
            v56 = 0;
            v54 = v59 + v58 - v57 + (*(uint64_t (**)(_QWORD *))(*a1 + 304))(a1);
          }
LABEL_55:
          if (!v54)
            break;
          while (1)
          {
            v68 = v54 >= 0x1400 ? 5120 : v54;
            v101 = 0xAAAAAAAAAAAAAAAALL;
            *(_QWORD *)&v69 = 0xAAAAAAAAAAAAAAAALL;
            *((_QWORD *)&v69 + 1) = 0xAAAAAAAAAAAAAAAALL;
            v99 = v69;
            *(_OWORD *)v100 = v69;
            *(_OWORD *)v98 = v69;
            v70 = (const TFontObjectSurrogate *)(*(uint64_t (**)(_QWORD *))(*a1 + 216))(a1);
            v71 = (*(uint64_t (**)(_QWORD *))(*a1 + 120))(a1);
            TFontObjectTable::TFontObjectTable((TFontObjectTable *)v98, v70, v71, v57, v68);
            v72 = v54 - v68;
            v73 = v54 >> 10 <= 4 || v72 >= 0x10;
            v74 = !v73;
            if ((v56 & v74) != 0)
              v54 = v72 + 16;
            else
              v54 -= v68;
            v75 = (v56 & v74) != 0 ? 5104 : v68;
            v57 = (v75 + v57);
            v76 = v100[1];
            if ((v56 & (v54 == 0)) != 0)
              break;
            TBufferedStreamingContext::BufferString((uint64_t)v108, v100[1], v75);
            v98[1] = (unint64_t)&off_1E6176770;
            TDataReference::DucRefCount((TDataReference *)&v98[1]);
            if (!v54)
              goto LABEL_82;
          }
          v77 = &v100[1][v75];
          v78 = v75 - 1;
          v79 = -1;
          do
          {
            v80 = v78;
            LODWORD(v81) = v79;
            v82 = *--v77;
            --v78;
            ++v79;
          }
          while ((v82 - 48) > 9);
          do
          {
            v83 = v100[1][v80--] - 48;
            v81 = (v81 + 1);
          }
          while (v83 < 0xA);
          TBufferedStreamingContext::BufferString((uint64_t)v108, v100[1], (v80 + 2));
          *(_QWORD *)&v84 = 0xAAAAAAAAAAAAAAAALL;
          *((_QWORD *)&v84 + 1) = 0xAAAAAAAAAAAAAAAALL;
          __b[6] = v84;
          __b[7] = v84;
          __b[4] = v84;
          __b[5] = v84;
          __b[2] = v84;
          __b[3] = v84;
          __b[0] = v84;
          __b[1] = v84;
          memcpy(__b, &v76[v80 + 2], v81);
          if ((_DWORD)v81 && LOBYTE(__b[0]) - 48 <= 9)
          {
            v85 = (unsigned __int8 *)__b + 1;
            do
            {
              *(v85 - 1) = 32;
              v86 = *v85++;
            }
            while ((v86 - 48) < 0xA);
          }
          LOBYTE(__b[0]) = v110 + 48;
          TBufferedStreamingContext::BufferString((uint64_t)v108, (const unsigned __int8 *)__b, v81);
          TBufferedStreamingContext::BufferString((uint64_t)v108, (const unsigned __int8 *)&v110 + 2, (__int16)v110 & 0xFFFFFFFFLL);
          v98[1] = (unint64_t)&off_1E6176770;
          TDataReference::DucRefCount((TDataReference *)&v98[1]);
          v54 = 0;
          v56 = 1;
        }
LABEL_82:
        TBufferedStreamingContext::EndEexec((uint64_t)v108);
        v87 = v95 - (v106 + v105);
        if (v95 != v106 + v105)
        {
          *(_QWORD *)&__b[3] = 0xAAAAAAAAAAAAAAAALL;
          *(_QWORD *)&v88 = 0xAAAAAAAAAAAAAAAALL;
          *((_QWORD *)&v88 + 1) = 0xAAAAAAAAAAAAAAAALL;
          __b[1] = v88;
          __b[2] = v88;
          __b[0] = v88;
          v89 = (const TFontObjectSurrogate *)(*(uint64_t (**)(_QWORD *))(*a1 + 216))(a1);
          v90 = (*(uint64_t (**)(_QWORD *))(*a1 + 120))(a1);
          TFontObjectTable::TFontObjectTable((TFontObjectTable *)__b, v89, v90, v57, v87);
          TBufferedStreamingContext::BufferString((uint64_t)v108, *((const unsigned __int8 **)&__b[2] + 1), v87);
          *((_QWORD *)&__b[0] + 1) = &off_1E6176770;
          TDataReference::DucRefCount((TDataReference *)((char *)__b + 8));
        }
        v91 = *((_WORD *)a1 + 4);
        if ((v91 & 0x80) != 0)
        {
          strncpy((char *)__b + 1, __s, 0xFFuLL);
          LOBYTE(__b[0]) = strlen(__s);
          TBufferedStreamingContext::StreamBuffer((uint64_t)v108);
          v92 = (unsigned __int8 *)(*(uint64_t (**)(_QWORD *))(*a1 + 112))(a1);
          TType1PSFont::StreamReEncodeFont((uint64_t)a1, v94, v92, (unsigned __int8 *)__b, a10);
          v91 = *((_WORD *)a1 + 4);
        }
        if ((v91 & 1) != 0)
          TBufferedStreamingContext::BufferString((uint64_t)v108, (const unsigned __int8 *)"\rsystemdict /setpacking known { setpacking } if\r", 0x30uLL);
        TBufferedStreamingContext::StreamBuffer((uint64_t)v108);
        goto LABEL_89;
      }
      TBufferedStreamingContext::BufferString((uint64_t)v108, v50, v38 - v49);
      TBufferedStreamingContext::StreamBuffer((uint64_t)v108);
      (*(void (**)(_QWORD *, unsigned int *, _QWORD, uint64_t *))(*a1 + 256))(a1, a5, 0, a10);
      v49 = v38 + v37;
    }
    v50 = (const unsigned __int8 *)(*((_QWORD *)&__b[2] + 1) + v49);
    goto LABEL_34;
  }
  memset(__b, 170, 0x2D8uLL);
  v41 = *(_WORD *)(a1[4] + 150);
  TBufferedCharStringStreamingContext::TBufferedCharStringStreamingContext((uint64_t)__b, (uint64_t)a1, (uint64_t)v97, (uint64_t)a10);
  *(_QWORD *)&__b[0] = &off_1E61C9440;
  *((_QWORD *)&__b[43] + 1) = &off_1E61B6420;
  *(_QWORD *)&__b[44] = &__b[10];
  *((_QWORD *)&__b[44] + 1) = a6;
  LOWORD(__b[45]) = v41;
  v42 = (unsigned __int16 *)(*(uint64_t (**)(_QWORD *))(*a1 + 40))(a1);
  BlendHintBlock(v42, *((uint64_t *)&__b[44] + 1), *(void **)&__b[44]);
  *(_QWORD *)&__b[0] = &off_1E61C9440;
  *((_QWORD *)&__b[43] + 1) = &unk_1E61C9490;
  *(_QWORD *)&v43 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v43 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v109[80] = v43;
  *(_OWORD *)&v109[96] = v43;
  *(_OWORD *)&v109[48] = v43;
  *(_OWORD *)&v109[64] = v43;
  *(_OWORD *)&v109[16] = v43;
  *(_OWORD *)&v109[32] = v43;
  *(_OWORD *)v108 = v43;
  *(_OWORD *)v109 = v43;
  v44 = (*(uint64_t (**)(_QWORD *))(*a1 + 40))(a1);
  InstanceName = MStreamSnapShotContext::MakeInstanceName((MStreamSnapShotContext *)((char *)&__b[43] + 8), v108, 128);
  if ((*a9 & 0x10000) != 0)
    v46 = 0;
  else
    v46 = a3;
  TType1PSFont::StreamType1Font(a1, v44, a7, InstanceName, (uint64_t)a5, a3, v46, (uint64_t)__b);
  TBufferedCharStringStreamingContext::~TBufferedCharStringStreamingContext((TBufferedCharStringStreamingContext *)__b);
LABEL_90:
  result = v107;
  v107 = 0;
  if (result)
    return MEMORY[0x1B5E0CD14](result, 0x1000C8052888210);
  return result;
}

void sub_1B09D712C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,__int16 a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,__int16 a57)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

unsigned __int8 *FindEncoRange(unsigned __int8 *result, int a2, unsigned int *a3, unsigned int *a4)
{
  unint64_t v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  int v7;
  unsigned int v8;
  int v9;
  char *v10;
  int v11;

  if (!a2)
    goto LABEL_23;
  v4 = (unint64_t)&result[a2];
  v5 = result;
  v6 = result;
  while (1)
  {
    v7 = *v6++;
    if (v7 == 47)
    {
      if (v5[1] != 69)
      {
        v6 = v5 + 2;
        goto LABEL_22;
      }
      if (v5[2] != 110)
      {
        v6 = v5 + 3;
        goto LABEL_22;
      }
      if (v5[3] != 99)
      {
        v6 = v5 + 4;
        goto LABEL_22;
      }
      if (v5[4] != 111)
      {
        v6 = v5 + 5;
        goto LABEL_22;
      }
      if (v5[5] != 100)
      {
        v6 = v5 + 6;
        goto LABEL_22;
      }
      if (v5[6] != 105)
      {
        v6 = v5 + 7;
        goto LABEL_22;
      }
      if (v5[7] != 110)
      {
        v6 = v5 + 8;
        goto LABEL_22;
      }
      if (v5[8] != 103)
      {
        v6 = v5 + 9;
        goto LABEL_22;
      }
      v6 = v5 + 10;
      if ((char)v5[9] <= 32)
        break;
    }
LABEL_22:
    v5 = v6;
    if ((unint64_t)v6 >= v4)
      goto LABEL_23;
  }
  v9 = (_DWORD)v6 - (_DWORD)result;
  *a3 = (_DWORD)v6 - (_DWORD)result;
  if ((unint64_t)v6 < v4)
  {
    v10 = (char *)v6;
    while (1)
    {
      v11 = *v10++;
      if (v11 <= 32)
      {
        if (v6[1] == 100)
        {
          if (v6[2] == 101)
          {
            if (v6[3] == 102)
            {
              v10 = (char *)(v6 + 5);
              if ((char)v6[4] <= 32)
              {
                v8 = (_DWORD)v10 - (_DWORD)result + ~v9;
                goto LABEL_24;
              }
            }
            else
            {
              v10 = (char *)(v6 + 4);
            }
          }
          else
          {
            v10 = (char *)(v6 + 3);
          }
        }
        else
        {
          v10 = (char *)(v6 + 2);
        }
      }
      v8 = -1;
      v6 = (unsigned __int8 *)v10;
      if ((unint64_t)v10 >= v4)
        goto LABEL_24;
    }
  }
LABEL_23:
  v8 = -1;
LABEL_24:
  *a4 = v8;
  return result;
}

uint64_t StreamBytes(uint64_t a1, const unsigned __int8 *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t result;
  _WORD *exception;
  __int16 v6;

  if (!a3 || (v3 = *a3) == 0 || !*(_DWORD *)v3)
  {
    v6 = 9;
    goto LABEL_8;
  }
  result = (*(uint64_t (**)(_QWORD, uint64_t, const unsigned __int8 *))(v3 + 20))(*(_QWORD *)(v3 + 28), a1, a2);
  if ((_WORD)result)
  {
    v6 = result;
LABEL_8:
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E61B2D68;
    exception[4] = v6;
  }
  return result;
}

void TType1SFNTFont::StreamFontEncoding(_QWORD **a1, uint64_t a2)
{
  __int128 v4;
  const TFontObjectSurrogate *v5;
  uint64_t v6;
  __int128 v7;
  const TFontObjectSurrogate *v8;
  uint64_t v9;
  __int128 v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unsigned __int16 *v15;
  uint64_t v16;
  unsigned __int8 *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  _OWORD v21[2];
  __int128 v22;
  unint64_t v23;
  _OWORD v24[2];
  __int128 v25;
  unint64_t v26;
  void (**v27)(TStreamEncodingContext *__hidden);
  void *__p;
  void *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  v26 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v24[1] = v4;
  v25 = v4;
  v24[0] = v4;
  v5 = (const TFontObjectSurrogate *)((uint64_t (*)(_QWORD **))(*a1)[27])(a1);
  TFontObjectTable::TFontObjectTable((TFontObjectTable *)v24, v5, 1162756943, 0, 12);
  v6 = *((_QWORD *)&v25 + 1);
  v23 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v7 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v21[1] = v7;
  v22 = v7;
  v21[0] = v7;
  v8 = (const TFontObjectSurrogate *)((uint64_t (*)(_QWORD **))(*a1)[27])(a1);
  v9 = bswap32(*(_DWORD *)(v6 + 4));
  TFontObjectTable::TFontObjectTable((TFontObjectTable *)v21, v8, 1162756943, v9, bswap32(*(_DWORD *)(v6 + 8)) - v9);
  *(_QWORD *)&v10 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v60 = v10;
  v61 = v10;
  v58 = v10;
  v59 = v10;
  v56 = v10;
  v57 = v10;
  v54 = v10;
  v55 = v10;
  v52 = v10;
  v53 = v10;
  v50 = v10;
  v51 = v10;
  v48 = v10;
  v49 = v10;
  v46 = v10;
  v47 = v10;
  v44 = v10;
  v45 = v10;
  v42 = v10;
  v43 = v10;
  v40 = v10;
  v41 = v10;
  v38 = v10;
  v39 = v10;
  v36 = v10;
  v37 = v10;
  v34 = v10;
  v35 = v10;
  v32 = v10;
  v33 = v10;
  v11 = (int)bswap32((unsigned __int16)**((_WORD **)&v22 + 1)) >> 16;
  v30 = v10;
  v31 = v10;
  if (v11)
  {
    if (v11 == 1)
    {
      v14 = (int)bswap32(*(unsigned __int16 *)(*((_QWORD *)&v22 + 1) + 2)) >> 16;
      v30 = 0u;
      v31 = 0u;
      v32 = 0u;
      v33 = 0u;
      v34 = 0u;
      v35 = 0u;
      v36 = 0u;
      v37 = 0u;
      v38 = 0u;
      v39 = 0u;
      v40 = 0u;
      v41 = 0u;
      v42 = 0u;
      v43 = 0u;
      v44 = 0u;
      v45 = 0u;
      v46 = 0u;
      v47 = 0u;
      v48 = 0u;
      v49 = 0u;
      v50 = 0u;
      v51 = 0u;
      v52 = 0u;
      v53 = 0u;
      v54 = 0u;
      v55 = 0u;
      v56 = 0u;
      v57 = 0u;
      v58 = 0u;
      v59 = 0u;
      v60 = 0u;
      v61 = 0u;
      if (v14 >= 1)
      {
        v15 = (unsigned __int16 *)(*((_QWORD *)&v22 + 1) + 4);
        v16 = (unsigned __int16)v14;
        v17 = (unsigned __int8 *)(*((_QWORD *)&v22 + 1) + 4 + 2 * (unsigned __int16)v14);
        do
        {
          v18 = *v15++;
          v19 = bswap32(v18);
          v20 = *v17++;
          *((_WORD *)&v30 + v20) = HIWORD(v19);
          --v16;
        }
        while (v16);
      }
      goto LABEL_10;
    }
    if (v11 == 2)
    {
      v12 = 0;
      v13 = *((_QWORD *)&v22 + 1) + 2;
      do
      {
        *(__int128 *)((char *)&v30 + v12) = (__int128)vrev16q_s8(*(int8x16_t *)(v13 + v12));
        v12 += 16;
      }
      while (v12 != 512);
LABEL_10:
      TType1PSFont::StreamEncodingData(a1, (uint64_t)&v30, 0, a2);
    }
  }
  else
  {
    TStreamEncodingContext::TStreamEncodingContext((uint64_t)&v27, a2, 0, 1);
    TStreamEncodingContext::DumpPSEncoding((TStreamEncodingContext *)&v27);
    v27 = &off_1E61B6398;
    if (__p)
    {
      v29 = __p;
      operator delete(__p);
    }
  }
  *((_QWORD *)&v21[0] + 1) = &off_1E6176770;
  TDataReference::DucRefCount((TDataReference *)((char *)v21 + 8));
  *((_QWORD *)&v24[0] + 1) = &off_1E6176770;
  TDataReference::DucRefCount((TDataReference *)((char *)v24 + 8));
}

void sub_1B09D77D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, unsigned int a9, unsigned int a10, int a11, unsigned int a12, unsigned __int8 *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,__int128 a21,__int128 a22,__int128 a23,uint64_t a24,void (**a25)(TStreamEncodingContext *__hidden this),void *__p,uint64_t a27)
{
  uint64_t *v27;
  uint64_t v28;
  _WORD *v31;
  uint64_t v32;
  __int128 v33;
  const TFontObjectSurrogate *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned __int8 *v38;
  _WORD *v39;
  _WORD *v40;
  __int16 v41;
  _WORD *exception;

  a25 = &off_1E61B6398;
  if (__p)
  {
    a27 = (uint64_t)__p;
    operator delete(__p);
  }
  TFontObjectTable::~TFontObjectTable((TFontObjectTable *)&a13);
  TFontObjectTable::~TFontObjectTable((TFontObjectTable *)&a21);
  if (a2 == 1)
  {
    v31 = __cxa_begin_catch(a1);
    if (v31[4] == 4)
    {
      v32 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 304))(v28);
      a11 = -1431655766;
      a12 = -1431655766;
      (*(void (**)(uint64_t, unsigned int *, int *))(*(_QWORD *)v28 + 296))(v28, &a12, &a11);
      a24 = 0xAAAAAAAAAAAAAAAALL;
      *(_QWORD *)&v33 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v33 + 1) = 0xAAAAAAAAAAAAAAAALL;
      a22 = v33;
      a23 = v33;
      a21 = v33;
      v34 = (const TFontObjectSurrogate *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 216))(v28);
      v35 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 120))(v28);
      TFontObjectTable::TFontObjectTable((TFontObjectTable *)&a21, v34, v35, v32, a12);
      v36 = *((_QWORD *)&a23 + 1);
      a9 = -1431655766;
      a10 = -1431655766;
      FindEncoRange(*((unsigned __int8 **)&a23 + 1), a12, &a10, &a9);
      v37 = a9;
      if (a9 == -1)
      {
        v41 = 6;
      }
      else
      {
        v38 = (unsigned __int8 *)(v36 + a10);
        a13 = v38;
        if (!FindKey("StandardEncoding", a9, (const unsigned __int8 **)&a13))
        {
          StreamBytes(v37, v38, v27);
          TFontObjectTable::~TFontObjectTable((TFontObjectTable *)&a21);
          __cxa_end_catch();
          JUMPOUT(0x1B09D77A4);
        }
        v41 = 23;
      }
      exception = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)exception = &off_1E61B2D68;
      exception[4] = v41;
    }
    v39 = v31;
    v40 = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)v40 = &off_1E61B2D68;
    v40[4] = v39[4];
  }
  _Unwind_Resume(a1);
}

void sub_1B09D79CC()
{
  JUMPOUT(0x1B09D7820);
}

void sub_1B09D79D4()
{
  __cxa_end_catch();
  JUMPOUT(0x1B09D7820);
}

void TType1CharStringContext::~TType1CharStringContext(TType1CharStringContext *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1E61C9420;
  v2 = *((_QWORD *)this + 47);
  *((_QWORD *)this + 47) = 0;
  if (v2)
    MEMORY[0x1B5E0CD14](v2, 0x1000C8077774924);
  *((_QWORD *)this + 41) = &off_1E6176770;
  TDataReference::DucRefCount((TType1CharStringContext *)((char *)this + 328));
}

{
  TType1CharStringContext::~TType1CharStringContext(this);
  JUMPOUT(0x1B5E0CD38);
}

void TBufferedType1CharStringStreamingContext::StreamCharString(TBufferedType1CharStringStreamingContext *this, const TType1SFNTFont *a2, unsigned int a3, char *a4, int *a5)
{
  __int128 v10;
  const TFontObjectSurrogate *v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unsigned __int8 *v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  unsigned __int8 *v21;
  unsigned int v22;
  unsigned __int8 *v23;
  unint64_t v24;
  void (**v25)(TType1CharStringContext *__hidden);
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  char *v42;
  uint64_t v43;
  unsigned __int8 *v44;
  uint64_t v45;
  __int128 v46;
  _OWORD v47[3];
  __int128 v48;
  unint64_t v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v10 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v47[2] = v10;
  v48 = v10;
  v47[0] = v10;
  v47[1] = v10;
  v46 = v10;
  v49 = 0xAAAAAAAAAAAAAAAALL;
  v41 = v10;
  v40 = v10;
  v39 = v10;
  v38 = v10;
  v37 = v10;
  v36 = v10;
  v35 = v10;
  v34 = v10;
  v33 = v10;
  v32 = v10;
  v31 = v10;
  v30 = v10;
  v29 = v10;
  v28 = v10;
  v27 = v10;
  v26 = v10;
  v42 = "/.notdef";
  v43 = 8;
  v44 = 0;
  v45 = 0;
  v25 = &off_1E61C9420;
  v11 = (const TFontObjectSurrogate *)(*(uint64_t (**)(const TType1SFNTFont *))(*(_QWORD *)a2 + 216))(a2);
  *(_QWORD *)&v46 = v11;
  WORD2(v47[0]) = *((_WORD *)a2 + 8);
  v12 = *(_QWORD *)(*((_QWORD *)a2 + 4) + 104);
  v13 = (_DWORD *)(v12 + 8 * a3);
  if (a3)
  {
    v14 = (*(v13 - 1) + *(v13 - 2));
    v15 = *v13 - v14;
  }
  else
  {
    v15 = 0;
    v14 = *v13;
  }
  DWORD2(v46) = v14;
  LODWORD(v47[0]) = v15;
  HIDWORD(v46) = *(_DWORD *)(v12 + 8 * a3 + 4);
  v16 = (*(uint64_t (**)(const TType1SFNTFont *))(*(_QWORD *)a2 + 120))(a2);
  TFontObjectTable::TFontObjectTable((TFontObjectTable *)((char *)v47 + 8), v11, v16, v14, v15 + HIDWORD(v46));
  v49 = 0;
  if (a3)
  {
    v17 = (unsigned __int8 *)v48;
    do
      v18 = *v17++;
    while (v18 != 47);
    v19 = 0;
    v42 = (char *)(v17 - 1);
    do
      v20 = v17[v19++] - 48;
    while (v20 < 0x4B);
    v43 = v19;
  }
  v21 = (unsigned __int8 *)(v48 + LODWORD(v47[0]));
  v44 = v21;
  v22 = HIDWORD(v46);
  if (*((__int16 *)a2 + 8) < 0)
  {
    v49 = 0;
  }
  else
  {
    v23 = (unsigned __int8 *)operator new[]();
    LenIVDecrypt(v23, v21, SHIDWORD(v46), *((__int16 *)a2 + 8));
    v24 = v49;
    v49 = (unint64_t)v23;
    if (v24 && (MEMORY[0x1B5E0CD14](v24, 0x1000C8077774924), (v23 = (unsigned __int8 *)v49) == 0))
    {
      v22 = HIDWORD(v46);
    }
    else
    {
      v44 = v23;
      v22 = HIDWORD(v46) - SWORD2(v47[0]);
    }
  }
  v45 = v22;
  TBufferedCharStringStreamingContext::DoCharString(this, (uint64_t)&v25, a4, (uint64_t)a5);
  TType1CharStringContext::~TType1CharStringContext((TType1CharStringContext *)&v25);
}

void sub_1B09D7D24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56)
{
  TFontObjectTable *v56;
  uint64_t v57;

  MEMORY[0x1B5E0CD14](v57, 0x1000C8077774924);
  if (a56)
    MEMORY[0x1B5E0CD14](a56, 0x1000C8077774924);
  TFontObjectTable::~TFontObjectTable(v56);
  _Unwind_Resume(a1);
}

uint64_t TBufferedType1CharStringStreamingContext::StreamDecryptedCharString(TBufferedType1CharStringStreamingContext *this, const TType1PSFont *a2, uint64_t a3, const unsigned __int8 *a4, int *a5)
{
  return (*(uint64_t (**)(TBufferedType1CharStringStreamingContext *, const TType1PSFont *, uint64_t, const unsigned __int8 *, int *))(*(_QWORD *)this + 56))(this, a2, a3, a4, a5);
}

void `non-virtual thunk to'TType1MMSnapShotStreamingContext::~TType1MMSnapShotStreamingContext(TType1MMSnapShotStreamingContext *this)
{
  TBufferedCharStringStreamingContext::~TBufferedCharStringStreamingContext((TType1MMSnapShotStreamingContext *)((char *)this - 696));
}

{
  TBufferedCharStringStreamingContext::~TBufferedCharStringStreamingContext((TType1MMSnapShotStreamingContext *)((char *)this - 696));
  JUMPOUT(0x1B5E0CD38);
}

void TType1MMSnapShotStreamingContext::~TType1MMSnapShotStreamingContext(TType1MMSnapShotStreamingContext *this)
{
  TBufferedCharStringStreamingContext::~TBufferedCharStringStreamingContext(this);
  JUMPOUT(0x1B5E0CD38);
}

uint64_t TType1MMSnapShotStreamingContext::StoreWVCode(uint64_t this, int a2)
{
  uint64_t v2;
  int v3;
  int *v4;
  uint64_t v5;
  int v6;

  if (*(__int16 *)(this + 720) >= 1)
  {
    v2 = *(_QWORD *)(this + 536);
    v3 = *(unsigned __int16 *)(this + 720) + a2;
    v4 = *(int **)(this + 712);
    v5 = a2;
    do
    {
      v6 = *v4++;
      *(_DWORD *)(v2 + 4 * v5++) = v6;
    }
    while (v5 < v3);
  }
  return this;
}

uint64_t TType1MMSnapShotStreamingContext::BlendVal(TType1MMSnapShotStreamingContext *this, int *a2, int a3)
{
  return MStreamSnapShotContext::BlendValue((uint64_t)this + 696, this, a2, a3);
}

BOOL MetadataFromFont(const __CFData *a1, void *a2, int8x8_t *a3, CFDictionaryRef *a4)
{
  UInt8 *BytePtr;
  unsigned int Length;
  _BOOL8 v9;
  CFDataRef theData;

  theData = a1;
  if (a1)
  {
    BytePtr = (UInt8 *)CFDataGetBytePtr(a1);
    Length = CFDataGetLength(theData);
    v9 = MetadataFromFont(BytePtr, Length, a2, a3, a4);
  }
  else
  {
    v9 = 0;
  }
  TCFData::~TCFData((const void **)&theData);
  return v9;
}

void sub_1B09D7EC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  TCFData::~TCFData((const void **)va);
  _Unwind_Resume(a1);
}

BOOL MetadataFromFont(_DWORD *a1, unsigned int a2, void *a3, int8x8_t *a4, CFDictionaryRef *a5)
{
  unint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unint64_t v8;
  unsigned int v9;
  BOOL v10;
  uint64_t v11;
  void *v14;
  CFIndex v15;
  char *v16;
  BOOL v17;
  unsigned int v18;
  const __CFSet *v19;
  unint64_t v20;
  const __CFData *v21;
  const __CFData *v22;
  const __CFData *v23;
  CFIndex Length;
  __CFData *MutableCopy;
  UInt8 *MutableBytePtr;
  const UInt8 *BytePtr;
  unint64_t v28;
  unint64_t v29;
  unint64_t k;
  void *v31;
  char isKindOfClass;
  __CFString *v33;
  const __CFDictionary *v34;
  const __CFDictionary *v35;
  const __CFDictionary *v36;
  CFIndex v37;
  __int128 v38;
  __int128 v39;
  unint64_t m;
  unsigned int v41;
  uint64_t v42;
  void *v43;
  __CFString *v44;
  unint64_t v45;
  unsigned int v46;
  const __CFDictionary *v47;
  void *Value;
  uint64_t v49;
  const __CFArray *v50;
  __int128 v51;
  CFIndex Count;
  CFIndex v53;
  const __CFString *ValueAtIndex;
  __int128 v55;
  const __CFArray *v56;
  CFIndex v57;
  size_t v58;
  char *v59;
  char *v60;
  size_t v61;
  CFStringRef v62;
  __CFSet *v63;
  __int128 v64;
  int v65;
  int Language;
  int Script;
  int v68;
  CFStringRef v69;
  CFStringRef v70;
  __CFArray *v71;
  CFStringRef v72;
  unint64_t v73;
  CFStringRef LikelyLanguageForScript;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t i;
  void *v79;
  void *v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t j;
  void *v85;
  void *v86;
  __int128 v87;
  int v88;
  void *v89;
  uint64_t v90;
  void *v91;
  void *v92;
  _BOOL8 v93;
  CFDictionaryRef v94;
  const void *v95;
  __CFDictionary *v96;
  void *key;
  void *v99;
  const __CFAllocator *bytesDeallocator;
  int8x8_t *v101;
  BOOL v102;
  CFDictionaryRef theDict;
  __int128 v104;
  unsigned int v105;
  CFStringRef cf;
  __CFString *v107;
  uint64_t v109;
  unint64_t v110;
  unsigned int *v112;
  uint64_t v113;
  void *v114;
  id obj;
  void *v116;
  const __CFAllocator *allocator;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  CFDictionaryRef Mutable;
  void *context;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  UInt8 v131[8];
  int v132;
  unint64_t v133;
  CFSetRef theSet;
  _BYTE v135[128];
  _BYTE v136[15];
  void **values[2];
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  _BYTE v145[32];
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  void **keys[2];
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  _BYTE v161[32];
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  UInt8 bytes[16];
  _OWORD v170[4];
  uint64_t v171;
  CFRange v172;

  v171 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 0;
  if (a2 >= 0x10)
  {
    v5 = (unint64_t)a1 + a2;
    v6 = a1 + 4;
    v7 = bswap32(a1[3]);
    v8 = (unint64_t)&a1[3 * v7 + 4];
    v9 = (a2 - 16) / 0xC;
    if ((unint64_t)(a1 + 7) > v5)
      v9 = 0;
    v110 = (unint64_t)a1 + a2;
    v10 = v8 < (unint64_t)v6 || v8 > v5;
    v11 = v10 ? v9 : v7;
    if (*a1 == 0x1000000)
    {
      v14 = (void *)objc_opt_new();
      if (!(_DWORD)v11)
      {
        v102 = 0;
        theDict = 0;
LABEL_153:
        objc_msgSend(v14, "drain");
        v93 = v102;
        if (a5)
        {
          v94 = theDict;
          goto LABEL_155;
        }
        if (theDict)
          CFRelease(theDict);
        return v93;
      }
      v109 = v11;
      key = a3;
      v99 = v14;
      v101 = a4;
      v102 = 0;
      theDict = 0;
      v104 = 0uLL;
      v113 = 0;
      allocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      bytesDeallocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE20];
      while (1)
      {
        v15 = bswap32(v6[2]);
        v16 = (char *)a1 + bswap32(v6[1]);
        v17 = &v16[v15] < v16 || (unint64_t)&v16[v15] > v110;
        v112 = v6;
        if (v17)
          goto LABEL_19;
        if (*v6 == 1819308129)
          break;
        v105 = *v6;
        v41 = bswap32(*v6);
        if (v41 == 1936485991 || v41 == 1684827751)
        {
          v107 = (__CFString *)CFStringCreateWithBytes(allocator, (const UInt8 *)v16, v15, 0x600u, 0);
          if (v107)
          {
            v116 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
            v119 = objc_msgSend(MEMORY[0x1E0CB3500], "whitespaceCharacterSet");
            v129 = 0u;
            v130 = 0u;
            v127 = 0u;
            v128 = 0u;
            obj = (id)-[__CFString componentsSeparatedByString:](v107, "componentsSeparatedByString:", CFSTR(","));
            v120 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v127, v136, 16);
            if (!v120)
            {
LABEL_129:
              if (v105 == 1735289956)
                v91 = v116;
              else
                v91 = (void *)v104;
              v92 = (void *)*((_QWORD *)&v104 + 1);
              if (v105 != 1735289956)
                v92 = v116;
              *(_QWORD *)&v104 = v91;
              *((_QWORD *)&v104 + 1) = v92;
              CFRelease(v107);
              goto LABEL_19;
            }
            v118 = *(_QWORD *)v128;
            while (2)
            {
              v42 = 0;
LABEL_55:
              if (*(_QWORD *)v128 != v118)
                objc_enumerationMutation(obj);
              v43 = *(void **)(*((_QWORD *)&v127 + 1) + 8 * v42);
              context = (void *)MEMORY[0x1B5E0D074]();
              v44 = (__CFString *)objc_msgSend(v43, "stringByTrimmingCharactersInSet:", v119);
              v45 = -[__CFString length](v44, "length");
              if (v45 < 4)
                goto LABEL_65;
              v46 = -[__CFString characterAtIndex:](v44, "characterAtIndex:", 0);
              if (v46 > 0x7F)
              {
                if (__maskrune(v46, 0x8000uLL))
                  goto LABEL_60;
LABEL_65:
                v49 = objc_msgSend(MEMORY[0x1E0C99DC8], "canonicalLanguageIdentifierFromString:", v44);
                if (v49)
                  objc_msgSend(v116, "addObject:", v49);
LABEL_67:
                objc_autoreleasePoolPop(context);
                if (++v42 == v120)
                {
                  v90 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v127, v136, 16);
                  v120 = v90;
                  if (!v90)
                    goto LABEL_129;
                  continue;
                }
                goto LABEL_55;
              }
              break;
            }
            if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v46 + 60) & 0x8000) == 0)
              goto LABEL_65;
LABEL_60:
            v114 = (void *)-[__CFString substringToIndex:](v44, "substringToIndex:", 4);
            v47 = (const __CFDictionary *)atomic_load(&qword_1ECDE6B28);
            if (v47)
            {
LABEL_61:
              Value = (void *)CFDictionaryGetValue(v47, v114);
              if (Value)
              {
                if (v45 == 4)
                {
                  objc_msgSend(v116, "addObjectsFromArray:", Value);
                }
                else if (-[__CFString rangeOfString:](v44, "rangeOfString:", CFSTR("-")) == 4)
                {
                  v75 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
                  v125 = 0u;
                  v126 = 0u;
                  v123 = 0u;
                  v124 = 0u;
                  v76 = objc_msgSend(Value, "countByEnumeratingWithState:objects:count:", &v123, v135, 16);
                  if (v76)
                  {
                    v77 = *(_QWORD *)v124;
                    do
                    {
                      for (i = 0; i != v76; ++i)
                      {
                        if (*(_QWORD *)v124 != v77)
                          objc_enumerationMutation(Value);
                        v79 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("%@-%@"), *(_QWORD *)(*((_QWORD *)&v123 + 1) + 8 * i), v44);
                        objc_msgSend(v75, "addObject:", v79);

                      }
                      v76 = objc_msgSend(Value, "countByEnumeratingWithState:objects:count:", &v123, v135, 16);
                    }
                    while (v76);
                  }
                  v80 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
                  v81 = (void *)objc_opt_new();
                  memset(v170, 0, sizeof(v170));
                  v82 = objc_msgSend(v75, "countByEnumeratingWithState:objects:count:", v170, values, 16);
                  if (v82)
                  {
                    v83 = **(_QWORD **)&v170[1];
                    do
                    {
                      for (j = 0; j != v82; ++j)
                      {
                        if (**(_QWORD **)&v170[1] != v83)
                          objc_enumerationMutation(v75);
                        v85 = *(void **)(*((_QWORD *)&v170[0] + 1) + 8 * j);
                        v86 = (void *)MEMORY[0x1B5E0D074]();
                        *(_DWORD *)bytes = 0;
                        *(_QWORD *)&v87 = 0xAAAAAAAAAAAAAAAALL;
                        *((_QWORD *)&v87 + 1) = 0xAAAAAAAAAAAAAAAALL;
                        *(_OWORD *)&v161[13] = v87;
                        *(_OWORD *)v161 = v87;
                        v160 = v87;
                        v158 = v87;
                        v159 = v87;
                        v156 = v87;
                        v157 = v87;
                        v154 = v87;
                        v155 = v87;
                        *(_OWORD *)keys = v87;
                        objc_msgSend(v85, "cStringUsingEncoding:", 1);
                        v88 = uloc_minimizeSubtags();
                        if (*(int *)bytes <= 0)
                        {
                          v89 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithBytes:length:encoding:", keys, v88, 1);
                          if (v89)
                          {
                            if ((objc_msgSend(v81, "containsObject:", v89) & 1) == 0)
                            {
                              objc_msgSend(v81, "addObject:", v89);
                              objc_msgSend(v80, "addObject:", objc_msgSend(v89, "stringByReplacingOccurrencesOfString:withString:", CFSTR("_"), CFSTR("-")));
                            }

                          }
                        }
                        objc_autoreleasePoolPop(v86);
                      }
                      v82 = objc_msgSend(v75, "countByEnumeratingWithState:objects:count:", v170, values, 16);
                    }
                    while (v82);
                  }

                  objc_msgSend(v116, "addObjectsFromArray:", v80);
                }
                goto LABEL_67;
              }
              goto LABEL_102;
            }
            Mutable = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E0C9AEB8], MEMORY[0x1E0C9B3A0]);
            if (!Mutable)
            {
LABEL_102:
              if (v45 == 4)
              {
                LikelyLanguageForScript = CreateLikelyLanguageForScript(v44);
                if (LikelyLanguageForScript)
                {
                  objc_msgSend(v116, "addObject:", LikelyLanguageForScript);
                  CFRelease(LikelyLanguageForScript);
                }
                else
                {
                  objc_msgSend(v116, "addObject:", v44);
                }
              }
              goto LABEL_67;
            }
            v50 = CFLocaleCopyAvailableLocaleIdentifiers();
            if (!v50)
              goto LABEL_99;
            theSet = CFSetCreateMutable(allocator, 0, MEMORY[0x1E0C9B3B0]);
            *(_QWORD *)&v51 = 0xAAAAAAAAAAAAAAAALL;
            *((_QWORD *)&v51 + 1) = 0xAAAAAAAAAAAAAAAALL;
            *(_OWORD *)((char *)&v170[1] + 8) = v51;
            *(_OWORD *)((char *)&v170[2] + 8) = v51;
            memset(v170, 0, 24);
            *((_QWORD *)&v170[3] + 1) = (char *)&v170[1] + 8;
            Count = CFArrayGetCount(v50);
            if (Count < 1)
            {
LABEL_98:
              CFRelease(v50);
              keys[0] = (void **)v170;
              std::vector<char,TInlineBufferAllocator<char,30ul>>::__destroy_vector::operator()[abi:fe180100](keys);
              TCFSet::~TCFSet((const void **)&theSet);
LABEL_99:
              while (1)
              {
                v73 = __ldaxr(&qword_1ECDE6B28);
                if (v73)
                  break;
                if (!__stlxr((unint64_t)Mutable, &qword_1ECDE6B28))
                {
                  v47 = Mutable;
                  goto LABEL_61;
                }
              }
              __clrex();
              CFRelease(Mutable);
              v47 = (const __CFDictionary *)v73;
              goto LABEL_61;
            }
            v53 = 0;
            while (2)
            {
              ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v50, v53);
              *(_QWORD *)&v55 = 0xAAAAAAAAAAAAAAAALL;
              *((_QWORD *)&v55 + 1) = 0xAAAAAAAAAAAAAAAALL;
              *(_OWORD *)&v161[14] = v55;
              *(_OWORD *)v161 = v55;
              v160 = v55;
              v158 = v55;
              v159 = v55;
              v156 = v55;
              v157 = v55;
              v154 = v55;
              v155 = v55;
              *(_OWORD *)keys = v55;
              if (CFStringGetCString(ValueAtIndex, (char *)keys, 157, 0x600u))
              {
                v56 = v50;
                v57 = Count;
                v58 = strlen((const char *)keys);
                v59 = strchr((char *)keys, 95);
                if (v59)
                {
                  v60 = v59;
                  v61 = v59 - (char *)keys;
                  if (strncmp((const char *)keys, "zh", v59 - (char *)keys))
                  {
                    if (strncmp((const char *)keys, "wuu", v61) && strncmp((const char *)keys, "yue", v61))
                    {
                      *v60 = 0;
                      v58 = v61;
                    }
                  }
                }
                v133 = 0xAAAAAAAAAAAAAAAALL;
                v62 = CFStringCreateWithBytes(allocator, (const UInt8 *)keys, v58, 0x600u, 0);
                v133 = (unint64_t)v62;
                v63 = theSet;
                Count = v57;
                if (!theSet)
                {
                  v50 = v56;
                  goto LABEL_83;
                }
                v50 = v56;
                if (!CFSetContainsValue(theSet, v62))
                {
                  v62 = (CFStringRef)v133;
                  v63 = theSet;
LABEL_83:
                  CFSetAddValue(v63, v62);
                  v132 = 0;
                  *(_QWORD *)&v64 = 0xAAAAAAAAAAAAAAAALL;
                  *((_QWORD *)&v64 + 1) = 0xAAAAAAAAAAAAAAAALL;
                  *(_OWORD *)&v145[14] = v64;
                  v144 = v64;
                  *(_OWORD *)v145 = v64;
                  v142 = v64;
                  v143 = v64;
                  v140 = v64;
                  v141 = v64;
                  v138 = v64;
                  v139 = v64;
                  *(_OWORD *)values = v64;
                  v65 = uloc_addLikelySubtags();
                  if (v132 <= 0)
                  {
                    *((_BYTE *)values + v65) = 0;
                    memset(bytes, 170, 12);
                    Language = uloc_getLanguage();
                    memset(v131, 170, 6);
                    Script = uloc_getScript();
                    if (v132 <= 0)
                    {
                      v68 = Script;
                      v69 = CFStringCreateWithBytes(allocator, bytes, Language, 0x600u, 0);
                      if (v69)
                      {
                        v70 = CFStringCreateWithBytes(allocator, v131, v68, 0x600u, 0);
                        if (v70)
                        {
                          v71 = (__CFArray *)CFDictionaryGetValue(Mutable, v70);
                          if (v71)
                            goto LABEL_92;
                          v71 = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E0C9B378]);
                          if (v71)
                          {
                            v72 = CreateLikelyLanguageForScript(v70);
                            if (v72)
                            {
                              cf = v72;
                              CFArrayAppendValue(v71, v72);
                              CFRelease(cf);
                            }
                            CFDictionaryAddValue(Mutable, v70, v71);
                            CFRelease(v71);
LABEL_92:
                            v172.length = CFArrayGetCount(v71);
                            v172.location = 0;
                            if (!CFArrayContainsValue(v71, v172, v69))
                              CFArrayAppendValue(v71, v69);
                          }
                          CFRelease(v70);
                        }
                        CFRelease(v69);
                      }
                    }
                  }
                }
                TCFString::~TCFString((const void **)&v133);
              }
              if (Count == ++v53)
                goto LABEL_98;
              continue;
            }
          }
        }
LABEL_19:
        v6 = v112 + 3;
        if (++v113 == v109)
        {
          v95 = (const void *)v104;
          if (v104 != 0)
          {
            v96 = theDict;
            if (theDict)
            {
              if ((_QWORD)v104)
                goto LABEL_146;
            }
            else
            {
              v96 = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
              v95 = (const void *)v104;
              if ((_QWORD)v104)
              {
LABEL_146:
                theDict = v96;
                CFDictionaryAddValue(v96, CFSTR("MTD_Typeface_Repertoire_PrimaryScriptLanguages"), v95);
                if (!*((_QWORD *)&v104 + 1))
                  goto LABEL_152;
                goto LABEL_151;
              }
            }
            theDict = v96;
            if (*((_QWORD *)&v104 + 1))
LABEL_151:
              CFDictionaryAddValue(theDict, CFSTR("MTD_Typeface_Repertoire_SupportedLanguages"), *((const void **)&v104 + 1));
          }
LABEL_152:
          v14 = v99;
          goto LABEL_153;
        }
      }
      if ((unint64_t)(v16 + 24) > v110)
        goto LABEL_19;
      v18 = *(_DWORD *)v16;
      if (bswap32(*(_DWORD *)v16) > 1)
        goto LABEL_19;
      if (v101)
      {
        *v101 = vrev16_s8(*(int8x8_t *)(v16 + 12));
        v101[1].i16[0] = bswap32(*((unsigned __int16 *)v16 + 10)) >> 16;
        v101[1].i16[1] = bswap32(*((unsigned __int16 *)v16 + 11)) >> 16;
        v102 = 1;
      }
      if (!a5 || v15 < 0x18)
        goto LABEL_19;
      theSet = (CFSetRef)0xAAAAAAAAAAAAAAAALL;
      v19 = CFDataCreateWithBytesNoCopy(allocator, (const UInt8 *)v16 + 24, v15 - 24, bytesDeallocator);
      v133 = 0xAAAAAAAAAAAAAAAALL;
      theSet = v19;
      if (!v19)
        goto LABEL_135;
      v20 = atomic_load(&qword_1ECDE6B20);
      if (v20 != -1)
      {
        keys[0] = (void **)v170;
        values[0] = (void **)keys;
        std::__call_once(&qword_1ECDE6B20, values, (void (__cdecl *)(void *))std::__call_once_proxy[abi:fe180100]<std::tuple<GetPrivateKey(void)::$_0 &&>>);
      }
      v21 = (const __CFData *)_MergedGlobals_1;
      if (!_MergedGlobals_1
        || (v22 = (const __CFData *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D50]), "initWithBase64EncodedData:options:", v19, 0), (v23 = v22) == 0)|| (Length = CFDataGetLength(v22), MutableCopy = CFDataCreateMutableCopy(allocator, Length, v23), CFRelease(v23), !MutableCopy))
      {
LABEL_135:
        v133 = 0;
LABEL_136:
        TCFData::~TCFData((const void **)&v133);
        TCFData::~TCFData((const void **)&theSet);
        goto LABEL_19;
      }
      MutableBytePtr = CFDataGetMutableBytePtr(MutableCopy);
      BytePtr = CFDataGetBytePtr(v21);
      v28 = CFDataGetLength(MutableCopy);
      v29 = CFDataGetLength(v21);
      if (v28)
      {
        for (k = 0; k != v28; ++k)
          MutableBytePtr[k] ^= v28 % 0xF1 - 83 + BytePtr[k % v29];
      }
      v133 = (unint64_t)MutableCopy;
      if (v18 != 0x1000000)
        goto LABEL_136;
      v31 = (void *)MEMORY[0x1B5E0D074](v29);
      theDict = (CFDictionaryRef)(id)objc_msgSend(MEMORY[0x1E0CB36D8], "JSONObjectWithData:options:error:", MutableCopy, 3, 0);
      objc_autoreleasePoolPop(v31);
      if (theDict)
      {
        objc_opt_class();
        isKindOfClass = objc_opt_isKindOfClass();
        v33 = CFSTR("##### ERROR: converted JSON not a dictionary (%@)");
        if ((isKindOfClass & 1) != 0)
        {
          v34 = (const __CFDictionary *)CFDictionaryGetValue(theDict, CFSTR("MTD_Variation_Instances"));
          v35 = v34;
          if (v34)
          {
            v36 = (const __CFDictionary *)CFDictionaryGetValue(v34, key);
            if (v36)
            {
              CFDictionaryReplaceValue(theDict, CFSTR("MTD_Typeface_ID_ATS_PostscriptName"), key);
              *(_QWORD *)bytes = CFRetain(v35);
              v37 = CFDictionaryGetCount(v36);
              *(_QWORD *)&v38 = 0xAAAAAAAAAAAAAAAALL;
              *((_QWORD *)&v38 + 1) = 0xAAAAAAAAAAAAAAAALL;
              v168 = v38;
              v167 = v38;
              v166 = v38;
              v165 = v38;
              v164 = v38;
              v163 = v38;
              v162 = v38;
              *(_OWORD *)&v161[16] = v38;
              *(_OWORD *)v161 = v38;
              v160 = v38;
              v158 = v38;
              v159 = v38;
              v156 = v38;
              v157 = v38;
              v154 = v38;
              v155 = v38;
              *(_OWORD *)keys = v38;
              values[0] = 0;
              std::vector<void const*,TInlineBufferAllocator<void const*,30ul>>::vector(keys, v37, values);
              *(_QWORD *)&v39 = 0xAAAAAAAAAAAAAAAALL;
              *((_QWORD *)&v39 + 1) = 0xAAAAAAAAAAAAAAAALL;
              v151 = v39;
              v152 = v39;
              v149 = v39;
              v150 = v39;
              v147 = v39;
              v148 = v39;
              *(_OWORD *)&v145[16] = v39;
              v146 = v39;
              v144 = v39;
              *(_OWORD *)v145 = v39;
              v142 = v39;
              v143 = v39;
              v140 = v39;
              v141 = v39;
              v138 = v39;
              v139 = v39;
              *(_OWORD *)values = v39;
              *(_QWORD *)&v170[0] = 0;
              std::vector<void const*,TInlineBufferAllocator<void const*,30ul>>::vector(values, v37, v170);
              CFDictionaryGetKeysAndValues(v36, (const void **)keys[0], (const void **)values[0]);
              if (v37 >= 1)
              {
                for (m = 0; m != v37; ++m)
                {
                  if (m >= keys[1] - keys[0] || m >= values[1] - values[0])
                    __break(1u);
                  CFDictionarySetValue(theDict, keys[0][m], values[0][m]);
                }
              }
              *(_QWORD *)&v170[0] = values;
              std::vector<double,TInlineBufferAllocator<double,30ul>>::__destroy_vector::operator()[abi:fe180100]((void ***)v170);
              values[0] = (void **)keys;
              std::vector<double,TInlineBufferAllocator<double,30ul>>::__destroy_vector::operator()[abi:fe180100](values);
              TCFRetained<void const*>::~TCFRetained((const void **)bytes);
            }
            CFDictionaryRemoveValue(theDict, CFSTR("MTD_Variation_Instances"));
          }
          goto LABEL_139;
        }
      }
      else
      {
        v33 = CFSTR("##### ERROR: could not convert JSON to dictionary (%@)");
      }
      NSLog(&v33->isa, MutableCopy);
      theDict = 0;
LABEL_139:
      v102 = theDict != 0;
      goto LABEL_136;
    }
  }
  v93 = 0;
  if (a5)
  {
    v94 = 0;
LABEL_155:
    *a5 = v94;
  }
  return v93;
}

void sub_1B09D8D74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,const void *a57,const void *a58)
{
  uint64_t v58;

  *(_QWORD *)(v58 - 176) = &STACK[0x290];
  std::vector<double,TInlineBufferAllocator<double,30ul>>::__destroy_vector::operator()[abi:fe180100]((void ***)(v58 - 176));
  STACK[0x290] = (unint64_t)&STACK[0x3A0];
  std::vector<double,TInlineBufferAllocator<double,30ul>>::__destroy_vector::operator()[abi:fe180100]((void ***)&STACK[0x290]);
  TCFRetained<void const*>::~TCFRetained((const void **)(v58 - 192));
  TCFData::~TCFData(&a57);
  TCFData::~TCFData(&a58);
  _Unwind_Resume(a1);
}

CFStringRef CreateLikelyLanguageForScript(const __CFString *a1)
{
  void *v1;
  __int128 v2;
  int Language;
  UInt8 bytes[16];
  _OWORD v6[8];
  _OWORD v7[2];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v1 = (void *)objc_msgSend(CFSTR("und-"), "stringByAppendingString:", a1);
  *(_QWORD *)&v2 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v2 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)((char *)v7 + 14) = v2;
  v6[7] = v2;
  v7[0] = v2;
  v6[5] = v2;
  v6[6] = v2;
  v6[3] = v2;
  v6[4] = v2;
  v6[1] = v2;
  v6[2] = v2;
  v6[0] = v2;
  objc_msgSend(v1, "cStringUsingEncoding:", 1);
  *((_BYTE *)v6 + (int)uloc_addLikelySubtags()) = 0;
  memset(bytes, 170, 12);
  Language = uloc_getLanguage();
  return CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E0C9AE00], bytes, Language, 0x600u, 0);
}

const void **std::__call_once_proxy[abi:fe180100]<std::tuple<GetPrivateKey(void)::$_0 &&>>()
{
  const __CFAllocator *v0;
  const __CFString *v2;
  const __CFArray *ArrayBySeparatingStrings;

  v0 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings((CFAllocatorRef)*MEMORY[0x1E0C9AE00], CFSTR("-----BEGIN RSA PRIVATE KEY-----*MIIJKQIBAAKCAgEAx3NC2Npb2omj6q3V1vQgCcAXkGMc5SGlv3RtdLCnkMDgAp9O*4LS97UAeRFWNxZOjN7JpDrOJBayUqAoXZI+fjvR2HD6i1y013Yszv7Eutjd9M0iE*GctXSzmlUwAE5gwXTVtW5Qr1FFIUnWPzRywLsxFcwDDoA4ZRUemlO2qVIRtrkhY9*/E00X7adcA13TyfalD7x9iGorL3XgpluyRFVulwyAmOS2RAUezia17Mg6Kkyceek*AkdbNYZbVTZnv64DYWjGLgCgke1Boruo/MxbrxN0/qDa05XKUra0t55ZgV8F3P3H*skcc9inUSi4kywnQjdJZr0nIMJTB2D6iPdP6r2vD+kj86DluBVn4YVdRvG4HV4zz*Rhpp43eiWwzzteKqzoLjwfP86srdZwXn/4YZ5vIaaLFTVt5J1USw51sqO3TAyat2*iPtjfEMNoSXcCkJe61fyjjbW3zCSbrxS88Rff/W0cxZvzpPfLiwyHNCCoVg4sZTR*OQfRMQTY07dfzdFEqS6uEgM3u3JNCSY8UNNdRV82GmLGUAvFkhIqfJAOiTxXeYGT*9gYHtdeLUCr9HbutPQb8MC7oGUamwHE7C3fg0uAHt6PB1L25jC2KAGEe7cnnLRZg*lSNTnzSyiZFVM527nflz66AKxgVopKyL9duMYMhBNEtasoKjQ3zm8kTo1ksCAwEA*AQKCAgEApU9sNW5uuWhhmw5v8dSvhUVYgo0TkvpbdZ8bZZ9Rk1G5mZLO/sHvtWfy*bjL26a6flndiShQWWsSbBdgvYWMFHaiTCIAF2hEX10McJiLGE7NUKyBMlVCLTsc9*ttiKNt4Ipk4xbG+ziB8sBPOl3PSt0cJvPMCMXPeECT99ewyxBBrFAvU6dRbMdRRX*01rl646dxUeSpq1pL5u9tvpS74ZVprvpmz9KpGyGfUcCWAuZGB28uNoEfvsDpw5w*PuV0AlRJawA7Wj+c1rZuM2IVA0qiJy8aRj2ugbZiVkIm8RXnG6pVosAZNzNn1sP+*t2kdh8ffutyBBx9BNLrnG8N2F4bN/AZ5PrbdmDnZ5D4HbCXaDQIQPi9tgSGdk1zO*AJ2skP3xDviheBzVgFq5+uy3E8EoxhfeK+YRZgYwGtoFsXO3c5CxtZ3VYLsOCPb9*QMWvxowjcPrd5yISDaIvTs9FnoUpLgBhdMr1+PwcPk9mPP5OtWqEYv4K1fFyjxG1*pCi0+PI+ZIqnMtM9h4HptsZZnOt2/TuwLjA9ZIpoawrZYTLMSBQ2g+W0Tdurwole*mBQNplWS1Shr5NJnxR0lw4F7w6gzs4T2FFb5jdCSRHLb/jq6YrZXgcvg1iLI2GhF*vF6iWah2kDEBB70mUDjDU3kbE24pPkSgldX+6nbz5cy3uIQvh7ECggEBAOzeZmYO*H/OrEG+2pYhtSnG+kA/YXYG0g4Av/IgMkkI593WoYSST7Nsl+iDU/KSG8Rij7QK8*esI2IkPOaKd4VXyjrcsnqf3sEPczlVTf2QHS/BzyYiL6RY5LUcGVaYWVSujxNijN*dWeZgMgbOD7p+An/9/IMvn03biZOzAsTrRQvavvxMxyeJoseXJJWeaBeJ5WqopeP*0Bztbd/9dGkMDd45TdKElp7zEFQ9N5pIeLeQ5lkVX2ocL+CQVeyt9BFgV+5IOte6*Odu/DrvGK0+oxzUx36y1sqp7tGh97Jvk03lDIUbWqKmE34OcNJk5lrEcGuKYhgw5*+ztHUn9pafEAfmkCggEBANePLg8cKZKrufPNTilI65PoEcLFzOcn9a8nY8QhWr8U*QDZLGgL3YvhwQeyNum26fuSR48ZRPYvOGB9yAVUINYNIypJIBnfQgJRjD4ox3dMl*aNYCLNdY4qnzXqVxvlGzDoO5N7Hp1XdCD38Sqdy+s1HEQLqjntMe0Dg8iBt6kNMR*KtUqFJoqGWUMdvQ8sYFMDk1eC6xWAHWcIA1WgBvmLUNdWLbsyDQaXymwS+n5VVHj*C43yqtQXgRHYVa5OYE3tWEcfwt0IyyzbTMmumasK6BbQ8payQDfWpzk7qlFtOdio*bHMdycxWb1+9l07uweLBxDeycY+AtMM+1LlagB0WQJMCggEAPfpDWNjBS4SrHE/y*KCxQmkp+b2bxsIqHDfeAYCjJ7EI2mbahFG0QQJdDR2vzXylf1E6wKVMf28lGVe+g*OpGl7KL3SnzqYeJu3f/FRxv7MBsAlKJnQzexE3ZpwflSTv2tSB41SZ/Y5G6p37If*mXamzBcJzW/AOAtU6vkbMprHYsy1dY67DPXkp+od1ryBvpBkUyj+uiGLFsaZRU6Q*MxxQVKEx16+Rqa13zFLoRZpI298yJoUNHjqZ3GxnzzIE9rb6ywJjQycbFIB9XmyP*0Jwc47JVEF/KjAkqP10TmAbbvpLuFhb8sr5trYYlzSHgaB8uebPm/zP8pJoY3/W5*HrI+YQKCAQEAwanht7GVqDCg4GmTz4O0Iy5cxqDvdr5v/O1mtM9CuGl5R04yEHgy*cwJoOB8dX3guiSyJd6OFqBWBlr7Wc47shQbg+Iu9Q+gPnUFitMYYhZsWlS9fGhrB*ie8dGYcXdk9ouu+tGir7nim7wm8CLVEnyk6H2ScnioYkjGHV5to3Q2opEVq9J8Sr*DB4mwUfGMmQidWAJHMwnnYKnSVRtxKMIB33WNoKFXEpVNR8vFQbtoKRbvSxITkTP*sTirwe6ol1ql9UCT0gIUiDh+xLQZW5Jw8g7H5JxBFenEU6dHXeDEF+M5jDM3Gl6N*sXakekYH67Iql9+6JzN7M+8/L0gf0gIsAQKCAQBeANWy/tf47n9ge0D7DVXVDiLt*v3PrkBUgx25V9AfMUUG38or/0BxWnmSkrxnsKSbPjWC0W4WLdG8XrrD/Da0Otg4L*FCK07umLNXitLGJC7hLSiyumcO0dQXjS+kU9b+7CokSovcSMJv0PYDfLkGIj4Xfd*UedbDFYnynMfig0dL5kbWIB6uWFlDliboGVtly0gBYdT+0p3bAdGzm+5p1sGEYB8*JJaSzsOBdT6nAVI6ONPAt+TbPuWsNl8XeFFx/wXb+UQEDtkub3k/0xuJeeBwzFr1*vj0KkKXDfJRVHjZCwmxb/ShpSApVzI8ujkst6zznEqi2OshndSPPVpYCG0R3*-----END RSA PRIVATE KEY-----*"), CFSTR("*"));
  v2 = CFStringCreateByCombiningStrings(v0, ArrayBySeparatingStrings, CFSTR("\n"));
  _MergedGlobals_1 = (uint64_t)CFStringCreateExternalRepresentation(v0, v2, 0x8000100u, 0x3Fu);
  TCFRetained<__CFString const*>::~TCFRetained((const void **)&v2);
  return TCFRetained<__CFArray const*>::~TCFRetained((const void **)&ArrayBySeparatingStrings);
}

void sub_1B09D8FD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10)
{
  TCFRetained<__CFString const*>::~TCFRetained(&a9);
  TCFRetained<__CFArray const*>::~TCFRetained(&a10);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<void const*,TInlineBufferAllocator<void const*,30ul>>::vector(_QWORD *a1, unint64_t a2, _QWORD *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  a1[33] = a1 + 3;
  if (a2)
  {
    std::vector<double,TInlineBufferAllocator<double,30ul>>::__vallocate[abi:fe180100](a1, a2);
    v6 = (_QWORD *)a1[1];
    v7 = &v6[a2];
    v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_1B09D9074(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<double,TInlineBufferAllocator<double,30ul>>::__destroy_vector::operator()[abi:fe180100](&a9);
  _Unwind_Resume(a1);
}

const void **TCFRetained<void const*>::~TCFRetained(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

void TCFSet::~TCFSet(const void **this)
{
  const void *v1;

  v1 = *this;
  if (v1)
    CFRelease(v1);
}

uint64_t TException::GetErrorCode(TException *this)
{
  return *((unsigned int *)this + 2);
}

void dFPPrintCaches()
{
  os_unfair_lock_s *v0;

  pthread_once(&TLockedLRUCache<TTableCacheNode,16ul>::GetCache(void)::once, (void (*)(void))TLockedLRUCache<TTableCacheNode,16ul>::CreateCache);
  v0 = (os_unfair_lock_s *)((char *)TLockedLRUCache<TTableCacheNode,16ul>::sSharedCache + 784);
  os_unfair_lock_lock((os_unfair_lock_t)TLockedLRUCache<TTableCacheNode,16ul>::sSharedCache + 196);
  os_unfair_lock_unlock(v0);
  dFPPrintTFontCache();
  dFPPrintFileFragmentCache();
}

void TFPInMemoryFont::~TFPInMemoryFont(const void **this)
{
  *this = &off_1E617BCF8;
  TCFData::~TCFData(this + 57);
  TCFData::~TCFData(this + 56);
  TFPFont::~TFPFont((void **)this);
}

{
  TFPInMemoryFont::~TFPInMemoryFont(this);
  JUMPOUT(0x1B5E0CD38);
}

void TFPFont::TFPFont(TFPFont *this, const TFont *a2, CFTypeRef cf, timespec a4)
{
  uint64_t tv_nsec;
  __darwin_time_t tv_sec;
  CFTypeRef v8;
  _BYTE *v9;
  uint64_t v10;
  unint64_t v11;
  float64x2_t *v12;
  unint64_t v13;
  double *v14;
  uint64_t v15;
  char *v16;
  unsigned int *v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  uint8x8_t v21;
  unint64_t v22;
  uint64_t **v23;
  uint64_t *i;
  unint64_t v25;
  _QWORD *v26;
  float v27;
  float v28;
  _BOOL8 v29;
  unint64_t v30;
  unint64_t v31;
  size_t v32;
  uint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  char *v36;
  double v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  unsigned __int8 *v48;
  uint64_t v49;
  unsigned __int8 *v50;
  char *v51;
  char v52;
  int v53;
  char *v54;
  double *v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  const TFont *v62;
  void **v63;
  _QWORD *v64;
  float64x2_t v65;
  uint64_t v66;
  unsigned int v67;
  uint64_t *v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  void *__p;
  _BYTE *v76;
  uint64_t v77;
  void *v78;
  _BYTE *v79;
  uint64_t v80;
  _BYTE __s2[32];
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  uint64_t v96;

  tv_nsec = a4.tv_nsec;
  tv_sec = a4.tv_sec;
  v96 = *MEMORY[0x1E0C80C00];
  *((_DWORD *)this + 2) = 0;
  *(_QWORD *)this = &off_1E617B998;
  *((_QWORD *)this + 2) = a2;
  *((_QWORD *)this + 3) = 0;
  *((_BYTE *)this + 32) = 0;
  if (cf)
    v8 = CFRetain(cf);
  else
    v8 = 0;
  *((_QWORD *)this + 5) = v8;
  *((_QWORD *)this + 6) = tv_sec;
  *((_QWORD *)this + 7) = tv_nsec;
  (*(void (**)(_BYTE *__return_ptr, const TFont *))(*(_QWORD *)a2 + 80))(__s2, a2);
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 17) = (char *)this + 64;
  *((_QWORD *)this + 18) = 0;
  TPostScriptNameString::operator=((uint64_t)this + 64, (TFontNameString *)__s2);
  TFontNameString::~TFontNameString((TFontNameString *)__s2);
  (*(void (**)(_BYTE *__return_ptr, const TFont *, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 88))(__s2, a2, 6, 0xFFFFLL, 0xFFFFLL, 0xFFFFLL);
  *((_QWORD *)this + 27) = 0;
  *((_QWORD *)this + 28) = (char *)this + 152;
  *((_QWORD *)this + 29) = 0;
  TPostScriptNameString::operator=((uint64_t)this + 152, (TFontNameString *)__s2);
  TFontNameString::~TFontNameString((TFontNameString *)__s2);
  v68 = (uint64_t *)((char *)this + 288);
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_DWORD *)this + 80) = 1065353216;
  *((_QWORD *)this + 41) = -1;
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 22) = 0u;
  *((_BYTE *)this + 368) = 0;
  *((_QWORD *)this + 51) = 0;
  *(_OWORD *)((char *)this + 376) = 0u;
  *(_OWORD *)((char *)this + 392) = 0u;
  *((_QWORD *)this + 52) = -1;
  *((_QWORD *)this + 53) = 0;
  *((_QWORD *)this + 54) = 0xFFFFFFFFLL;
  *((_QWORD *)this + 55) = 0;
  (*(void (**)(_QWORD))(**((_QWORD **)this + 2) + 24))(*((_QWORD *)this + 2));
  v78 = 0;
  v79 = 0;
  v80 = 0;
  (*(void (**)(const TFont *, void **))(*(_QWORD *)a2 + 392))(a2, &v78);
  v9 = v78;
  v10 = v79 - (_BYTE *)v78;
  if (v79 == v78)
  {
    v9 = v79;
    if (v79)
      goto LABEL_82;
    return;
  }
  v11 = v10 >> 5;
  *((_QWORD *)this + 32) = v10 >> 5;
  if (56 * (v10 >> 5) <= (unint64_t)(v10 >> 5))
    goto LABEL_81;
  v62 = a2;
  v63 = (void **)((char *)this + 344);
  v12 = (float64x2_t *)malloc_type_malloc(56 * (v10 >> 5), 0x180FCE0uLL);
  v13 = 0;
  *((_QWORD *)this + 33) = v12;
  v14 = &v12->f64[5 * v11];
  *((_QWORD *)this + 35) = v14;
  v61 = v11;
  if (v11 <= 1)
    v15 = 1;
  else
    v15 = v11;
  v66 = v15;
  v64 = (_QWORD *)((char *)this + 304);
  v65 = (float64x2_t)vdupq_n_s64(0x40C3880000000000uLL);
  do
  {
    v16 = (char *)v78;
    if (v13 >= (v79 - (_BYTE *)v78) >> 5)
      goto LABEL_86;
    v17 = (unsigned int *)((char *)v78 + 32 * v13);
    v12->f64[0] = 0.0;
    v18 = *v17;
    LODWORD(v12->f64[1]) = *v17;
    *(_DWORD *)v14 = v18;
    v19 = *v17;
    v67 = v17[1];
    v20 = *((_QWORD *)this + 37);
    if (v20)
    {
      v21 = (uint8x8_t)vcnt_s8((int8x8_t)v20);
      v21.i16[0] = vaddlv_u8(v21);
      if (v21.u32[0] > 1uLL)
      {
        v22 = *v17;
        if (v20 <= v19)
          v22 = v19 % v20;
      }
      else
      {
        v22 = ((_DWORD)v20 - 1) & v19;
      }
      v23 = *(uint64_t ***)(*v68 + 8 * v22);
      if (v23)
      {
        for (i = *v23; i; i = (uint64_t *)*i)
        {
          v25 = i[1];
          if (v25 == v19)
          {
            if (*((_DWORD *)i + 4) == (_DWORD)v19)
              goto LABEL_50;
          }
          else
          {
            if (v21.u32[0] > 1uLL)
            {
              if (v25 >= v20)
                v25 %= v20;
            }
            else
            {
              v25 &= v20 - 1;
            }
            if (v25 != v22)
              break;
          }
        }
      }
    }
    else
    {
      v22 = 0xAAAAAAAAAAAAAAAALL;
    }
    v26 = operator new(0x18uLL);
    *v26 = 0;
    v26[1] = v19;
    *((_DWORD *)v26 + 4) = *v17;
    *((_DWORD *)v26 + 5) = v67;
    v27 = (float)(unint64_t)(*((_QWORD *)this + 39) + 1);
    v28 = *((float *)this + 80);
    if (!v20 || (float)(v28 * (float)v20) < v27)
    {
      v29 = (v20 & (v20 - 1)) != 0;
      if (v20 < 3)
        v29 = 1;
      v30 = v29 | (2 * v20);
      v31 = vcvtps_u32_f32(v27 / v28);
      if (v30 <= v31)
        v32 = v31;
      else
        v32 = v30;
      std::__hash_table<std::__hash_value_type<char const*,unsigned int>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,unsigned int>,TType1ParsingContext::HashCString,TType1ParsingContext::EqualCString,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,unsigned int>,TType1ParsingContext::EqualCString,TType1ParsingContext::HashCString,true>,std::allocator<std::__hash_value_type<char const*,unsigned int>>>::__rehash<true>((uint64_t)v68, v32);
      v20 = *((_QWORD *)this + 37);
      if ((v20 & (v20 - 1)) != 0)
      {
        if (v20 <= v19)
          v22 = v19 % v20;
        else
          v22 = v19;
      }
      else
      {
        v22 = ((_DWORD)v20 - 1) & v19;
      }
    }
    v33 = *v68;
    v34 = *(_QWORD **)(*v68 + 8 * v22);
    if (v34)
    {
      *v26 = *v34;
LABEL_48:
      *v34 = v26;
      goto LABEL_49;
    }
    *v26 = *v64;
    *v64 = v26;
    *(_QWORD *)(v33 + 8 * v22) = v64;
    if (*v26)
    {
      v35 = *(_QWORD *)(*v26 + 8);
      if ((v20 & (v20 - 1)) != 0)
      {
        if (v35 >= v20)
          v35 %= v20;
      }
      else
      {
        v35 &= v20 - 1;
      }
      v34 = (_QWORD *)(*v68 + 8 * v35);
      goto LABEL_48;
    }
LABEL_49:
    ++*((_QWORD *)this + 39);
LABEL_50:
    v36 = &v16[32 * v13];
    v12[1] = vdivq_f64(vrndq_f64(vmulq_f64(*(float64x2_t *)(v36 + 8), v65)), v65);
    v37 = trunc(*((double *)v36 + 3) * 10000.0) / 10000.0;
    v12[2].f64[0] = v37;
    v14[1] = v37;
    ++v13;
    v12 = (float64x2_t *)((char *)v12 + 40);
    v14 += 2;
  }
  while (v13 != v66);
  __p = 0;
  v76 = 0;
  v77 = 0;
  (*(void (**)(_BYTE *__return_ptr, const TFont *, unint64_t, void **))(*(_QWORD *)v62 + 400))(__s2, v62, v61, &__p);
  v38 = *v63;
  if (*v63)
  {
    *((_QWORD *)this + 44) = v38;
    operator delete(v38);
    *v63 = 0;
    *((_QWORD *)this + 44) = 0;
    *((_QWORD *)this + 45) = 0;
  }
  v39 = *(_QWORD *)__s2;
  *((_QWORD *)this + 43) = *(_QWORD *)__s2;
  v40 = *(_QWORD *)&__s2[8];
  *((_OWORD *)this + 22) = *(_OWORD *)&__s2[8];
  v41 = v40 - v39;
  if (v40 != v39)
  {
    v42 = (*(uint64_t (**)(const TFont *))(*(_QWORD *)v62 + 40))(v62);
    if (v42 == 22 || v42 == 16)
    {
      v43 = 0;
      v44 = 0;
      if ((unint64_t)(v41 >> 3) <= 1)
        v45 = 1;
      else
        v45 = v41 >> 3;
      while (1)
      {
        v46 = *((_QWORD *)this + 43);
        if (v44 >= (*((_QWORD *)this + 44) - v46) >> 3)
          break;
        *(_QWORD *)&v47 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v47 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v94 = v47;
        v95 = v47;
        v92 = v47;
        v93 = v47;
        v90 = v47;
        v91 = v47;
        v88 = v47;
        v89 = v47;
        v86 = v47;
        v87 = v47;
        v84 = v47;
        v85 = v47;
        v82 = v47;
        v83 = v47;
        *(_OWORD *)__s2 = v47;
        *(_OWORD *)&__s2[16] = v47;
        v73 = v47;
        v74 = v47;
        v71 = v47;
        v72 = v47;
        v69 = v47;
        v70 = v47;
        (*(void (**)(__int128 *__return_ptr, const TFont *, _QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v62 + 88))(&v69, v62, *(unsigned __int16 *)(v46 + 8 * v44 + 2), 0xFFFFLL, 0xFFFFLL, 0xFFFFLL);
        v48 = (unsigned __int8 *)*((_QWORD *)&v69 + 1);
        if (!*((_QWORD *)&v69 + 1))
        {
          v48 = (unsigned __int8 *)*((_QWORD *)&v71 + 1);
          if (*((_QWORD *)&v71 + 1))
          {
            v48 = *(unsigned __int8 **)(*((_QWORD *)&v71 + 1) + 8);
            if (v48)
              v48 += v72;
          }
        }
        v49 = v70;
        if ((unint64_t)v70 >= 0xFF)
          v49 = 255;
        if (v49)
        {
          v50 = &v48[v49];
          v51 = __s2;
          do
          {
            v53 = *v48++;
            v52 = v53;
            if (v53 == 32)
              v52 = 95;
            *v51++ = v52;
          }
          while (v48 < v50);
        }
        else
        {
          v51 = __s2;
        }
        v54 = (char *)*((_QWORD *)this + 17);
        *v51 = 0;
        if (strstr(v54, __s2))
        {
          v55 = (double *)__p;
          v56 = v76 - (_BYTE *)__p;
          *((_QWORD *)this + 41) = v44;
          v57 = v56 >> 3;
          v58 = v43;
          v59 = 8;
          v60 = v66;
          while (v57 > v58)
          {
            *(double *)(*((_QWORD *)this + 35) + v59) = trunc(v55[v58] * 10000.0) / 10000.0;
            v59 += 16;
            ++v58;
            if (!--v60)
              goto LABEL_77;
          }
          break;
        }
LABEL_77:
        TFontNameString::~TFontNameString((TFontNameString *)&v69);
        ++v44;
        v43 += v61;
        if (v44 == v45)
          goto LABEL_78;
      }
LABEL_86:
      __break(1u);
      return;
    }
  }
LABEL_78:
  if (__p)
  {
    v76 = __p;
    operator delete(__p);
  }
  v9 = v78;
LABEL_81:
  if (v9)
  {
LABEL_82:
    v79 = v9;
    operator delete(v9);
  }
}

void sub_1B09D9A94()
{
  __cxa_end_catch();
  JUMPOUT(0x1B09D9A9CLL);
}

void sub_1B09D9AD8(void *a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1B09D9AE0);
  __clang_call_terminate(a1);
}

uint64_t TFPFont::TFPFont(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, _QWORD *a7)
{
  CFTypeRef v11;
  _QWORD *v12;
  char *v13;
  char *v14;
  uint64_t *v15;
  uint64_t **v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  uint8x8_t v21;
  unint64_t v22;
  uint64_t **v23;
  uint64_t *i;
  unint64_t v25;
  _QWORD *v26;
  float v27;
  float v28;
  _BOOL8 v29;
  unint64_t v30;
  unint64_t v31;
  size_t v32;
  uint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  _QWORD *v36;
  CFTypeRef v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  double *v43;
  BOOL v44;
  int v45;
  double *v46;
  uint64_t v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  uint64_t v57;
  int8x8_t v58;
  unint64_t v59;
  uint8x8_t v60;
  unint64_t v61;
  __int128 v62;
  uint64_t ***v63;
  uint64_t **j;
  unint64_t v65;
  size_t v66;
  size_t v67;
  char *v68;
  uint64_t v72;
  TPostScriptNameString *v74;
  uint64_t v75;
  uint64_t v76;
  void **v77;
  _OWORD __b[66];
  uint64_t v79;

  v79 = *MEMORY[0x1E0C80C00];
  *(_DWORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = &off_1E617B998;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = 0;
  v11 = *(CFTypeRef *)(a2 + 40);
  if (v11)
    v11 = CFRetain(v11);
  *(_QWORD *)(a1 + 40) = v11;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = a1 + 64;
  *(_QWORD *)(a1 + 144) = 0;
  TPostScriptNameString::assign((TPostScriptNameString *)(a1 + 64), *(const char **)(a2 + 136));
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = a1 + 152;
  *(_QWORD *)(a1 + 232) = 0;
  TPostScriptNameString::assign((TPostScriptNameString *)(a1 + 152), *(const char **)(a2 + 224));
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
  v12 = (_QWORD *)(a1 + 264);
  v13 = *(char **)(a2 + 256);
  v74 = (TPostScriptNameString *)(a1 + 64);
  v76 = a5;
  if (v13)
  {
    v14 = (char *)malloc_type_malloc(56 * (_QWORD)v13, 0x29E1ABA6uLL);
    *(_QWORD *)(a1 + 264) = v14;
    *(_QWORD *)(a1 + 272) = 0;
    if (v14)
      v13 = &v14[40 * *(_QWORD *)(a1 + 256)];
    else
      v13 = 0;
  }
  else
  {
    *v12 = 0;
    *(_QWORD *)(a1 + 272) = 0;
  }
  v72 = a4;
  *(_QWORD *)(a1 + 280) = v13;
  v15 = (uint64_t *)(a1 + 288);
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_DWORD *)(a1 + 320) = *(_DWORD *)(a2 + 320);
  std::__hash_table<std::__hash_value_type<char const*,unsigned int>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,unsigned int>,TType1ParsingContext::HashCString,TType1ParsingContext::EqualCString,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,unsigned int>,TType1ParsingContext::EqualCString,TType1ParsingContext::HashCString,true>,std::allocator<std::__hash_value_type<char const*,unsigned int>>>::__rehash<true>(a1 + 288, *(_QWORD *)(a2 + 296));
  v75 = a2;
  v16 = *(uint64_t ***)(a2 + 304);
  if (v16)
  {
    v17 = (_QWORD *)(a1 + 304);
    v18 = *(_QWORD *)(a1 + 296);
    do
    {
      v19 = *((unsigned int *)v16 + 4);
      v20 = v16[2];
      if (v18)
      {
        v21 = (uint8x8_t)vcnt_s8((int8x8_t)v18);
        v21.i16[0] = vaddlv_u8(v21);
        if (v21.u32[0] > 1uLL)
        {
          v22 = *((unsigned int *)v16 + 4);
          if (v18 <= v19)
            v22 = v19 % v18;
        }
        else
        {
          v22 = ((_DWORD)v18 - 1) & v19;
        }
        v23 = *(uint64_t ***)(*v15 + 8 * v22);
        if (v23)
        {
          for (i = *v23; i; i = (uint64_t *)*i)
          {
            v25 = i[1];
            if (v25 == v19)
            {
              if (*((_DWORD *)i + 4) == (_DWORD)v19)
                goto LABEL_49;
            }
            else
            {
              if (v21.u32[0] > 1uLL)
              {
                if (v25 >= v18)
                  v25 %= v18;
              }
              else
              {
                v25 &= v18 - 1;
              }
              if (v25 != v22)
                break;
            }
          }
        }
      }
      else
      {
        v22 = 0xAAAAAAAAAAAAAAAALL;
      }
      v26 = operator new(0x18uLL);
      *v26 = 0;
      v26[1] = v19;
      v26[2] = v20;
      v27 = (float)(unint64_t)(*(_QWORD *)(a1 + 312) + 1);
      v28 = *(float *)(a1 + 320);
      if (!v18 || (float)(v28 * (float)v18) < v27)
      {
        v29 = (v18 & (v18 - 1)) != 0;
        if (v18 < 3)
          v29 = 1;
        v30 = v29 | (2 * v18);
        v31 = vcvtps_u32_f32(v27 / v28);
        if (v30 <= v31)
          v32 = v31;
        else
          v32 = v30;
        std::__hash_table<std::__hash_value_type<char const*,unsigned int>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,unsigned int>,TType1ParsingContext::HashCString,TType1ParsingContext::EqualCString,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,unsigned int>,TType1ParsingContext::EqualCString,TType1ParsingContext::HashCString,true>,std::allocator<std::__hash_value_type<char const*,unsigned int>>>::__rehash<true>(a1 + 288, v32);
        v18 = *(_QWORD *)(a1 + 296);
        if ((v18 & (v18 - 1)) != 0)
        {
          if (v18 <= v19)
            v22 = v19 % v18;
          else
            v22 = v19;
        }
        else
        {
          v22 = ((_DWORD)v18 - 1) & v19;
        }
      }
      v33 = *v15;
      v34 = *(_QWORD **)(*v15 + 8 * v22);
      if (v34)
      {
        *v26 = *v34;
      }
      else
      {
        *v26 = *v17;
        *v17 = v26;
        *(_QWORD *)(v33 + 8 * v22) = v17;
        if (!*v26)
          goto LABEL_48;
        v35 = *(_QWORD *)(*v26 + 8);
        if ((v18 & (v18 - 1)) != 0)
        {
          if (v35 >= v18)
            v35 %= v18;
        }
        else
        {
          v35 &= v18 - 1;
        }
        v34 = (_QWORD *)(*v15 + 8 * v35);
      }
      *v34 = v26;
LABEL_48:
      ++*(_QWORD *)(a1 + 312);
LABEL_49:
      v16 = (uint64_t **)*v16;
    }
    while (v16);
  }
  *(_QWORD *)(a1 + 328) = v76;
  v36 = (_QWORD *)(a1 + 336);
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_BYTE *)(a1 + 368) = 0;
  *(_QWORD *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 384) = 0;
  v37 = (CFTypeRef)atomic_load((unint64_t *)(v75 + 392));
  if (v37)
    v37 = CFRetain(v37);
  *(_QWORD *)(a1 + 400) = 0;
  *(_QWORD *)(a1 + 408) = 0;
  *(_QWORD *)(a1 + 392) = v37;
  *(_QWORD *)(a1 + 416) = -1;
  *(_QWORD *)(a1 + 424) = 0;
  *(_QWORD *)(a1 + 432) = 0xFFFFFFFFLL;
  *(_QWORD *)(a1 + 440) = 0;
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16));
  if (*(_QWORD *)(v75 + 336))
    v38 = *(_QWORD *)(v75 + 336);
  else
    v38 = v75;
  RetainedFPFontRef::Retain((_QWORD *)(a1 + 336), v38);
  v39 = *(_QWORD *)(a1 + 256);
  if (v39)
  {
    memmove(*(void **)(a1 + 264), *(const void **)(v75 + 264), 56 * v39);
    v40 = *(_QWORD *)(a1 + 256);
    if (!v40)
      goto LABEL_76;
    v41 = 0;
    v42 = 0;
    v43 = *(double **)(a1 + 280);
    v44 = 1;
    do
    {
      if (a3)
      {
        v45 = *(_DWORD *)v43;
        v46 = (double *)(v72 + 8);
        v47 = a3;
        do
        {
          if (v45 == *((_DWORD *)v46 - 2))
          {
            v48 = v43[1];
            v49 = *v46;
            v50 = vabdd_f64(v48, *v46);
            if (v50 >= 0.0001)
            {
              v51 = fabs(v48);
              v52 = fabs(v49);
              if (v51 < v52)
                v51 = v52;
              if (v50 / v51 >= 0.0001)
              {
                v43[1] = v49;
                v42 = 1;
                v48 = v49;
              }
            }
            if (v44)
            {
              v53 = *(double *)(*v12 + 40 * v41 + 32);
              v54 = vabdd_f64(v48, v53);
              if (v54 >= 0.0001)
              {
                v55 = fabs(v48);
                v56 = fabs(v53);
                if (v55 < v56)
                  v55 = v56;
                v44 = v54 / v55 < 0.0001;
              }
              else
              {
                v44 = 1;
              }
            }
            else
            {
              v44 = 0;
            }
          }
          v46 += 2;
          --v47;
        }
        while (v47);
      }
      ++v41;
      v43 += 2;
    }
    while (v41 != v40);
    if (!v44)
    {
      if (a6 != 0 && (v42 & 1) != 0)
      {
        if (a7)
        {
          v58 = (int8x8_t)a7[1];
          if (v58)
          {
            v59 = (unsigned __int16)(a6 - 1);
            v60 = (uint8x8_t)vcnt_s8(v58);
            v60.i16[0] = vaddlv_u8(v60);
            if (v60.u32[0] > 1uLL)
            {
              v61 = (unsigned __int16)(a6 - 1);
              if (*(_QWORD *)&v58 <= v59)
                v61 = v59 % *(_QWORD *)&v58;
            }
            else
            {
              v61 = (v58.i32[0] - 1) & v59;
            }
            v63 = *(uint64_t ****)(*a7 + 8 * v61);
            if (v63)
            {
              for (j = *v63; j; j = (uint64_t **)*j)
              {
                v65 = (unint64_t)j[1];
                if (v65 == v59)
                {
                  if (*((unsigned __int16 *)j + 8) == (_DWORD)v59)
                  {
                    TPostScriptNameString::operator=((uint64_t)v74, (TFontNameString *)(j + 3));
                    return a1;
                  }
                }
                else
                {
                  if (v60.u32[0] > 1uLL)
                  {
                    if (v65 >= *(_QWORD *)&v58)
                      v65 %= *(_QWORD *)&v58;
                  }
                  else
                  {
                    v65 &= *(_QWORD *)&v58 - 1;
                  }
                  if (v65 != v61)
                    break;
                }
              }
            }
          }
        }
        else
        {
          *(_QWORD *)&v62 = 0xAAAAAAAAAAAAAAAALL;
          *((_QWORD *)&v62 + 1) = 0xAAAAAAAAAAAAAAAALL;
          __b[4] = v62;
          __b[5] = v62;
          __b[2] = v62;
          __b[3] = v62;
          __b[0] = v62;
          __b[1] = v62;
          (*(void (**)(_OWORD *__return_ptr))(**(_QWORD **)(a1 + 16) + 88))(__b);
          if (TFontNameString::IsValid((TFontNameString *)__b))
          {
            TPostScriptNameString::operator=((uint64_t)v74, (TFontNameString *)__b);
            TFontNameString::~TFontNameString((TFontNameString *)__b);
            return a1;
          }
          TFontNameString::~TFontNameString((TFontNameString *)__b);
        }
      }
      if ((v42 & 1) != 0)
      {
        memset(__b, 170, sizeof(__b));
        v66 = *(_QWORD *)(a1 + 232) + 256;
        LOBYTE(v77) = 0;
        std::vector<char,TInlineBufferAllocator<char,1024ul>>::vector(__b, v66, &v77);
        v67 = TFPFont::ComposePostScriptNameForVariation(a1, *(_QWORD *)(a1 + 256), *(_QWORD *)(a1 + 280), *(char **)&__b[0], *((_QWORD *)&__b[0] + 1) - *(_QWORD *)&__b[0], (uint64_t)a7)+ 1;
        if (v67 < 0x41 || *(_QWORD *)(a1 + 144) >= v67)
        {
          v68 = *(char **)(a1 + 136);
        }
        else
        {
          v68 = (char *)reallocf(*(void **)(a1 + 128), v67);
          *(_QWORD *)(a1 + 128) = v68;
          *(_QWORD *)(a1 + 136) = v68;
        }
        *(_QWORD *)(a1 + 144) = v67;
        strlcpy(v68, *(const char **)&__b[0], v67);
        v77 = (void **)__b;
        std::vector<char,TInlineBufferAllocator<char,1024ul>>::__destroy_vector::operator()[abi:fe180100](&v77);
      }
    }
    else
    {
LABEL_76:
      TPostScriptNameString::assign(v74, *(const char **)(a1 + 224));
      v57 = *v36;
      if (*v36)
      {
        if (!(*(unsigned int (**)(_QWORD))(*(_QWORD *)v57 + 32))(*v36))
          (*(void (**)(uint64_t))(*(_QWORD *)v57 + 8))(v57);
        *v36 = 0;
      }
    }
  }
  return a1;
}

void sub_1B09DA1D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  uint64_t v17;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    (*(void (**)(_QWORD))(**(_QWORD **)(v17 + 16) + 32))(*(_QWORD *)(v17 + 16));
    __cxa_rethrow();
  }
  _Unwind_Resume(exception_object);
}

uint64_t TFPFont::GetDefaultInstance(TFPFont *this)
{
  return *((_QWORD *)this + 42);
}

uint64_t TPostScriptNameString::operator=(uint64_t a1, TFontNameString *a2)
{
  const void *v4;
  size_t v5;
  CFStringEncoding v6;
  size_t v7;
  void *v9;
  CFStringRef v10;
  _BYTE *v11;
  size_t v12;
  size_t v13;
  _BYTE *v14;
  int v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  CFStringEncoding v19;
  uint64_t v20;
  void *v21;
  CFAbsoluteTime Current;
  size_t v24;
  void *v26;
  size_t v27;
  uint64_t v28;
  uint64_t v29;
  CFStringRef v30;

  v4 = (const void *)*((_QWORD *)a2 + 1);
  if (!v4)
  {
    v17 = *((_QWORD *)a2 + 5);
    if (!v17 || (v18 = *(_QWORD *)(v17 + 8)) == 0)
    {
LABEL_44:
      *(_QWORD *)(a1 + 80) = 21;
      Current = CFAbsoluteTimeGetCurrent();
      snprintf_l(*(char **)(a1 + 72), *(_QWORD *)(a1 + 80), 0, "font%016llx", (unint64_t)Current);
      return a1;
    }
    v4 = (const void *)(v18 + *((_QWORD *)a2 + 6));
  }
  v5 = *((_QWORD *)a2 + 2);
  if (*((_QWORD *)a2 + 10))
  {
    v6 = -1;
LABEL_4:
    v7 = v5 + 1;
    if (v7 >= 0x41 && *(_QWORD *)(a1 + 80) < v7)
    {
      v9 = reallocf(*(void **)(a1 + 64), v7);
      *(_QWORD *)(a1 + 64) = v9;
      *(_QWORD *)(a1 + 72) = v9;
    }
    *(_QWORD *)(a1 + 80) = v7;
    v10 = CopyFontNameString((CFTypeRef *)a2, v6);
    v30 = v10;
    if (!v10 || !CFStringGetCString(v10, *(char **)(a1 + 72), *(_QWORD *)(a1 + 80), 0))
    {
      memcpy(*(void **)(a1 + 72), v4, *(_QWORD *)(a1 + 80) - 1);
      *(_BYTE *)(*(_QWORD *)(a1 + 80) + *(_QWORD *)(a1 + 72) - 1) = 0;
    }
    TCFString::~TCFString((const void **)&v30);
    goto LABEL_13;
  }
  v19 = DetermineCFEncoding((const unsigned __int8 *)v4, *((unsigned __int16 *)a2 + 34), *((unsigned __int16 *)a2 + 35));
  if (!v19)
  {
    v24 = v5 + 1;
    if (v5 + 1 < 0x41 || *(_QWORD *)(a1 + 80) >= v24)
    {
      v26 = *(void **)(a1 + 72);
    }
    else
    {
      v26 = reallocf(*(void **)(a1 + 64), v5 + 1);
      *(_QWORD *)(a1 + 64) = v26;
      *(_QWORD *)(a1 + 72) = v26;
    }
    *(_QWORD *)(a1 + 80) = v24;
    memcpy(v26, v4, v5);
    *(_BYTE *)(*(_QWORD *)(a1 + 80) + *(_QWORD *)(a1 + 72) - 1) = 0;
    goto LABEL_13;
  }
  v6 = v19;
  if (v19 != 268435712)
    goto LABEL_4;
  if ((v5 & 1) != 0)
  {
    v6 = 268435712;
    goto LABEL_4;
  }
  v20 = (v5 >> 1) + 1;
  if (v5 >= 0x80 && *(_QWORD *)(a1 + 80) <= v5 >> 1)
  {
    v21 = reallocf(*(void **)(a1 + 64), (v5 >> 1) + 1);
    *(_QWORD *)(a1 + 64) = v21;
    *(_QWORD *)(a1 + 72) = v21;
    *(_QWORD *)(a1 + 80) = v20;
    goto LABEL_55;
  }
  *(_QWORD *)(a1 + 80) = v20;
  if (v5)
  {
LABEL_55:
    v27 = 0;
    v28 = 0;
    while (!*((_BYTE *)v4 + v27))
    {
      v29 = v28 + 1;
      *(_BYTE *)(*(_QWORD *)(a1 + 72) + v28) = *((_BYTE *)v4 + v27 + 1);
      v27 += 2;
      ++v28;
      if (v27 >= v5)
        goto LABEL_58;
    }
    v29 = v28;
    goto LABEL_58;
  }
  v29 = 0;
LABEL_58:
  *(_BYTE *)(*(_QWORD *)(a1 + 72) + v29) = 0;
LABEL_13:
  v11 = *(_BYTE **)(a1 + 72);
  if (!v11)
    goto LABEL_44;
  v12 = strlen(*(const char **)(a1 + 72));
  if (v12)
  {
    v13 = v12;
    v14 = *(_BYTE **)(a1 + 72);
    while (1)
    {
      v15 = *v14;
      if ((v15 - 33) > 0x5D)
      {
        if (v15 == 32)
        {
          *v11++ = 45;
          goto LABEL_29;
        }
        if (!*v14)
        {
LABEL_27:
          *v11++ = v15;
          goto LABEL_29;
        }
      }
      else
      {
        v16 = (v15 - 37) > 0x38 || ((1 << (v15 - 37)) & 0x140000002800419) == 0;
        if (v16 && v15 != 123 && v15 != 125)
          goto LABEL_27;
      }
      --v13;
LABEL_29:
      ++v14;
      if (!--v12)
        goto LABEL_41;
    }
  }
  v13 = 0;
LABEL_41:
  if (*v11)
    *v11 = 0;
  if (!v13)
    goto LABEL_44;
  return a1;
}

void sub_1B09DA588(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  TCFString::~TCFString((const void **)va);
  _Unwind_Resume(a1);
}

size_t TFPFont::ComposePostScriptNameForVariation(uint64_t a1, uint64_t a2, uint64_t a3, char *__dst, size_t __size, uint64_t a6)
{
  size_t v11;
  _QWORD v13[2];

  strlcpy(__dst, *(const char **)(a1 + 224), __size);
  v11 = strlen(__dst);
  if (a2)
  {
    v13[0] = a2;
    v13[1] = a3;
    v11 += (*(uint64_t (**)(_QWORD, _QWORD *, char *, uint64_t))(**(_QWORD **)(a1 + 16) + 416))(*(_QWORD *)(a1 + 16), v13, &__dst[v11], a6);
  }
  return v11;
}

void TFPFont::GetVariationAxes(TFPFont *this, unint64_t *a2)
{
  uint64_t v4;
  unint64_t *v5;
  void *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  const __CFAllocator *v12;
  _QWORD *v13;
  __int128 v14;
  CFStringRef v15;
  uint64_t v17;
  uint64_t v18;
  CFTypeRef *v19;
  _OWORD v20[6];
  void *__p;
  _BYTE *v22;
  uint64_t v23;
  char cStr[4];
  char v25;

  v4 = *((_QWORD *)this + 42);
  if (v4)
  {
    FPFontGetVariationAxes(v4);
    return;
  }
  if (*((_QWORD *)this + 32))
  {
    v5 = (unint64_t *)((char *)this + 272);
    if (atomic_load((unint64_t *)this + 34))
    {
LABEL_5:
      *a2 = *((_QWORD *)this + 32);
      return;
    }
    v7 = (void *)operator new[]();
    v8 = (unint64_t)v7;
    v9 = *((_QWORD *)this + 32);
    if (v9)
      memmove(v7, *((const void **)this + 33), 40 * v9);
    __p = 0;
    v22 = 0;
    v23 = 0;
    (*(void (**)(_QWORD, void **))(**((_QWORD **)this + 2) + 392))(*((_QWORD *)this + 2), &__p);
    if (!*((_QWORD *)this + 32))
    {
      do
      {
LABEL_18:
        if (__ldaxr(v5))
        {
          __clrex();
          v17 = *((_QWORD *)this + 32);
          if (v17)
          {
            v18 = 0;
            v19 = (CFTypeRef *)v8;
            do
            {
              if (*v19)
              {
                CFRelease(*v19);
                v17 = *((_QWORD *)this + 32);
              }
              ++v18;
              v19 += 5;
            }
            while (v18 != v17);
          }
          if (__p)
          {
            v22 = __p;
            operator delete(__p);
          }
          MEMORY[0x1B5E0CD14](v8, 0x1060C8058154DEFLL);
          goto LABEL_5;
        }
      }
      while (__stlxr(v8, v5));
      if (__p)
      {
        v22 = __p;
        operator delete(__p);
      }
      goto LABEL_5;
    }
    v10 = 0;
    v11 = 0;
    v12 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v13 = (_QWORD *)v8;
    while (1)
    {
      *(_QWORD *)&v14 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v14 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v20[4] = v14;
      v20[5] = v14;
      v20[2] = v14;
      v20[3] = v14;
      v20[0] = v14;
      v20[1] = v14;
      if (v11 >= (v22 - (_BYTE *)__p) >> 5)
        break;
      (*(void (**)(_OWORD *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t))(**((_QWORD **)this + 2)
                                                                                              + 88))(v20, *((_QWORD *)this + 2), *(unsigned __int16 *)((char *)__p + v10 + 6), 0xFFFFLL, 0xFFFFLL, 0xFFFFLL);
      if (TFontNameString::IsValid((TFontNameString *)v20))
      {
        v15 = CopyFontNameString((CFTypeRef *)v20, 0xFFFFFFFF);
      }
      else
      {
        if (v11 >= (v22 - (_BYTE *)__p) >> 5)
          break;
        *(_DWORD *)cStr = bswap32(*(_DWORD *)((char *)__p + v10));
        v25 = 0;
        v15 = CFStringCreateWithCString(v12, cStr, 0);
      }
      *v13 = v15;
      v13 += 5;
      TFontNameString::~TFontNameString((TFontNameString *)v20);
      ++v11;
      v10 += 32;
      if (v11 == *((_QWORD *)this + 32))
        goto LABEL_18;
    }
    __break(1u);
  }
  else
  {
    *a2 = 0;
  }
}

void sub_1B09DA8B0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  uint64_t v22;

  if (__p)
    operator delete(__p);
  MEMORY[0x1B5E0CD14](v22, 0x1060C8058154DEFLL);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B09DA878);
}

CFStringRef CopyFontNameString(CFTypeRef *a1, CFStringEncoding a2)
{
  CFStringEncoding v3;
  const unsigned __int8 *v4;
  _QWORD *v5;
  uint64_t v6;
  CFIndex v7;

  if (a1[10])
    return (CFStringRef)CFRetain(a1[10]);
  v3 = a2;
  v4 = (const unsigned __int8 *)a1[1];
  if (!v4)
  {
    v5 = a1[5];
    if (v5 && (v6 = v5[1]) != 0)
      v4 = (const unsigned __int8 *)a1[6] + v6;
    else
      v4 = 0;
  }
  v7 = *((unsigned int *)a1 + 4);
  if (a2 == -1)
  {
    v3 = DetermineCFEncoding(v4, *((unsigned __int16 *)a1 + 34), *((unsigned __int16 *)a1 + 35));
    if (!v4)
      return 0;
  }
  else if (!v4)
  {
    return 0;
  }
  if (v7 && v3 != -1)
    return CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v4, v7, v3, 0);
  return 0;
}

THVARTable *TFPFont::GetHVARTable(TFPFont *this, const TSFNTFont *a2)
{
  unint64_t *v2;
  unint64_t v3;
  THVARTable *v4;
  unint64_t v6;
  char v7;

  v2 = (unint64_t *)((char *)this + 376);
  v3 = atomic_load((unint64_t *)this + 47);
  if (v3)
  {
    if (v3 == -1)
      return 0;
    else
      return (THVARTable *)v3;
  }
  v4 = (THVARTable *)operator new();
  THVARTable::THVARTable(v4, a2, 1213612370, 20);
  if (!*((_QWORD *)v4 + 9))
  {
    v6 = 0;
    atomic_store(0xFFFFFFFFFFFFFFFFLL, v2);
LABEL_12:
    (*(void (**)(THVARTable *))(*(_QWORD *)v4 + 8))(v4);
    return (THVARTable *)v6;
  }
  while (1)
  {
    v6 = __ldaxr(v2);
    if (v6)
      break;
    if (!__stlxr((unint64_t)v4, v2))
    {
      v7 = 1;
      goto LABEL_11;
    }
  }
  v7 = 0;
  __clrex();
LABEL_11:
  if ((v7 & 1) == 0)
    goto LABEL_12;
  return v4;
}

void sub_1B09DAA94(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E0CD38](v1, 0x10E1C4069E1901FLL);
  _Unwind_Resume(a1);
}

void *TFPFont::GetHVARScalars(TFPFont *this, const THVARTable *a2)
{
  unint64_t *v2;
  void *v3;
  uint64_t v6;
  const __int16 *v7;
  unint64_t v8;
  size_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;

  v2 = (unint64_t *)((char *)this + 384);
  v3 = (void *)atomic_load((unint64_t *)this + 48);
  if (!v3)
  {
    v13 = 0;
    v6 = (*(uint64_t (**)(TFPFont *, unint64_t *))(*(_QWORD *)this + 232))(this, &v13);
    if (v6)
    {
      v7 = (const __int16 *)v6;
      v8 = *((_QWORD *)a2 + 9);
      if (v8 >> 61)
        v9 = -1;
      else
        v9 = 8 * v8;
      v3 = (void *)operator new[]();
      bzero(v3, v9);
      if (*((_QWORD *)a2 + 9))
      {
        v10 = 0;
        v11 = v13;
        do
        {
          *((double *)v3 + v10) = ItemVariationStore::VariationRegionList::ComputeScalar(*((ItemVariationStore::VariationRegionList **)a2 + 10), v10, v11, v7);
          ++v10;
        }
        while (v10 != *((_QWORD *)a2 + 9));
      }
      v12 = __ldaxr(v2);
      if (v12)
      {
        __clrex();
      }
      else if (!__stlxr((unint64_t)v3, v2))
      {
        return v3;
      }
      MEMORY[0x1B5E0CD14](v3, 0x1000C8000313F17);
      return (void *)v12;
    }
    else
    {
      return 0;
    }
  }
  return v3;
}

uint64_t TFPFont::GetVariationValues(TFPFont *this, unint64_t *a2)
{
  _QWORD *EmSpaceTrueTypeScaler;
  uint64_t v4;

  *a2 = *((_QWORD *)this + 32);
  if (*((_QWORD *)this + 35))
  {
    EmSpaceTrueTypeScaler = (_QWORD *)TFPFont::GetEmSpaceTrueTypeScaler((os_unfair_lock_s *)this);
    if (EmSpaceTrueTypeScaler)
    {
      v4 = 21;
      return (*(uint64_t (**)(void))(*EmSpaceTrueTypeScaler + 8 * v4))();
    }
    EmSpaceTrueTypeScaler = (_QWORD *)TFPFont::GetHandler(this);
    if (EmSpaceTrueTypeScaler)
    {
      v4 = 11;
      return (*(uint64_t (**)(void))(*EmSpaceTrueTypeScaler + 8 * v4))();
    }
  }
  return 0;
}

uint64_t TFPFont::GetVariations(TFPFont *this, unint64_t *a2)
{
  *a2 = *((_QWORD *)this + 32);
  return *((_QWORD *)this + 35);
}

uint64_t TFPFont::GetEmSpaceTrueTypeScaler(os_unfair_lock_s *this)
{
  os_unfair_lock_s *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v11[160];
  uint64_t v12;
  _DWORD v13[2];
  __int128 v14;
  __int128 v15;
  __int128 v16;
  int v17;

  v2 = this + 109;
  os_unfair_lock_lock(this + 109);
  v3 = *(_QWORD *)&this[110]._os_unfair_lock_opaque;
  if (!v3)
  {
    v4 = *(_QWORD *)&this[64]._os_unfair_lock_opaque;
    v5 = *(_QWORD *)&this[70]._os_unfair_lock_opaque;
    v6 = *(_QWORD *)&this[4]._os_unfair_lock_opaque;
    v13[0] = 0;
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 72))(v6);
    v14 = xmmword_1B0AABB70;
    v15 = xmmword_1B0AABB70;
    v16 = xmmword_1B0AABB80;
    v13[1] = v7 << 16;
    v17 = 0x10000;
    TScalerStrike::TScalerStrike((uint64_t)v11, v6, v4, v5, (__int128 *)v13);
    TFontScaler::CreateFontScaler((uint64_t)v11, 0, &v12);
    v8 = v12;
    TScalerStrike::~TScalerStrike((TScalerStrike *)v11);
    if (v8)
      v3 = v8;
    else
      v3 = -1;
    *(_QWORD *)&this[110]._os_unfair_lock_opaque = v3;
  }
  if (v3 == -1)
    v9 = 0;
  else
    v9 = v3;
  os_unfair_lock_unlock(v2);
  return v9;
}

void sub_1B09DAD44(void *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  TScalerStrike::~TScalerStrike((TScalerStrike *)va);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B09DAD18);
}

void sub_1B09DAD70(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

unint64_t TFPFont::GetHandler(TFPFont *this)
{
  unsigned __int8 v2;
  uint64_t v3;
  unint64_t FontHandler;
  unint64_t *v5;
  _QWORD v8[2];

  v2 = atomic_load((unsigned __int8 *)this + 32);
  if ((v2 & 1) == 0)
  {
    v3 = *((_QWORD *)this + 35);
    v8[0] = *((_QWORD *)this + 32);
    v8[1] = v3;
    FontHandler = TFontHandler::CreateFontHandler(*((const void **)this + 2), *((_QWORD *)this + 42) == 0, (uint64_t)v8);
    if (FontHandler)
    {
      v5 = (unint64_t *)((char *)this + 24);
      while (!__ldaxr(v5))
      {
        if (!__stlxr(FontHandler, v5))
          goto LABEL_8;
      }
      __clrex();
      (*(void (**)(unint64_t))(*(_QWORD *)FontHandler + 8))(FontHandler);
    }
LABEL_8:
    atomic_store(1u, (unsigned __int8 *)this + 32);
  }
  return atomic_load((unint64_t *)this + 3);
}

void TTableDataReference::~TTableDataReference(TTableDataReference *this)
{
  *(_QWORD *)this = &off_1E6176770;
  TDataReference::DucRefCount(this);
}

{
  *(_QWORD *)this = &off_1E6176770;
  TDataReference::DucRefCount(this);
  JUMPOUT(0x1B5E0CD38);
}

CFTypeRef TFPFont::CopyMetadata(TFPFont *this)
{
  unint64_t *v1;
  CFDictionaryRef v2;
  CFTypeRef *v3;
  CFTypeRef v5;
  void *v6;
  unint64_t v7;
  CFTypeRef cf;
  const void *v10;
  CFDictionaryRef v11;

  v1 = (unint64_t *)((char *)this + 400);
  v2 = (CFDictionaryRef)atomic_load((unint64_t *)this + 50);
  v3 = (CFTypeRef *)MEMORY[0x1E0C9B0D0];
  if (!v2)
  {
    v5 = (CFTypeRef)(*(uint64_t (**)(TFPFont *, uint64_t))(*(_QWORD *)this + 80))(this, 1835365473);
    if (v5)
      v5 = CFRetain(v5);
    cf = 0;
    v10 = v5;
    if (!*((_QWORD *)this + 42) || (*((_QWORD *)this + 41) & 0x8000000000000000) != 0)
    {
      v6 = 0;
    }
    else
    {
      v6 = (void *)(*(uint64_t (**)(TFPFont *))(*(_QWORD *)this + 104))(this);
      cf = v6;
      v5 = v10;
    }
    v11 = 0;
    MetadataFromFont((const __CFData *)v5, v6, 0, &v11);
    v2 = v11;
    if (!v11)
      v2 = (CFDictionaryRef)CFRetain(*v3);
    while (1)
    {
      v7 = __ldaxr(v1);
      if (v7)
        break;
      if (!__stlxr((unint64_t)v2, v1))
        goto LABEL_14;
    }
    __clrex();
    CFRelease(v2);
    v2 = (CFDictionaryRef)v7;
LABEL_14:
    TCFRetained<__CFString const*>::~TCFRetained(&cf);
    TCFData::~TCFData(&v10);
  }
  if (v2 == *v3)
    return 0;
  else
    return CFRetain(v2);
}

void sub_1B09DAFC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  const void *v3;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, const void *);
  TCFRetained<__CFString const*>::~TCFRetained((const void **)va);
  TCFData::~TCFData((const void **)va1);
  _Unwind_Resume(a1);
}

uint64_t DetermineCFEncoding(const unsigned __int8 *a1, int a2, uint64_t a3)
{
  uint64_t result;
  unsigned int v4;

  if (!a1)
    return 0xFFFFFFFFLL;
  result = 268435712;
  switch(a2)
  {
    case 0:
      return result;
    case 1:
      result = a3;
      break;
    case 2:
      if (a3 >= 3)
        return 0xFFFFFFFFLL;
      result = dword_1B0AABDC8[(__int16)a3];
      break;
    case 3:
      if ((_DWORD)a3)
        v4 = -1;
      else
        v4 = 0;
      if ((_DWORD)a3 == 1)
        result = 268435712;
      else
        result = v4;
      break;
    default:
      return 0xFFFFFFFFLL;
  }
  return result;
}

size_t TPostScriptNameString::assign(TPostScriptNameString *this, const char *__s)
{
  size_t v4;
  char *v6;

  v4 = strlen(__s) + 1;
  if (v4 < 0x41 || *((_QWORD *)this + 10) >= v4)
  {
    v6 = (char *)*((_QWORD *)this + 9);
  }
  else
  {
    v6 = (char *)reallocf(*((void **)this + 8), v4);
    *((_QWORD *)this + 8) = v6;
    *((_QWORD *)this + 9) = v6;
  }
  *((_QWORD *)this + 10) = v4;
  return strlcpy(v6, __s, v4);
}

CFStringRef TFPFont::CopyPostScriptName(TFPFont *this)
{
  const char *v1;
  size_t v2;
  BOOL v3;

  v1 = (const char *)*((_QWORD *)this + 17);
  v2 = strlen(v1);
  if (v1)
    v3 = v2 == 0;
  else
    v3 = 1;
  if (v3)
    return 0;
  else
    return CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const UInt8 *)v1, v2, 0x600u, 0);
}

void sub_1B09DB110(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B09DB0DCLL);
}

uint64_t TFPFont::GetPostScriptName(TFPFont *this)
{
  return *((_QWORD *)this + 17);
}

CFStringRef TFPFont::CopyNameTablePostScriptName(TFPFont *this)
{
  TSFNTFont *v1;
  __int128 v2;
  CFStringRef v3;
  _OWORD v5[6];

  v1 = (TSFNTFont *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 432))(*((_QWORD *)this + 2));
  if (!v1)
    return 0;
  *(_QWORD *)&v2 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v2 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v5[4] = v2;
  v5[5] = v2;
  v5[2] = v2;
  v5[3] = v2;
  v5[0] = v2;
  v5[1] = v2;
  TSFNTFont::GetPostscriptName(v1, (TFontNameString *)v5);
  v3 = CopyFontNameString((CFTypeRef *)v5, 0xFFFFFFFF);
  TFontNameString::~TFontNameString((TFontNameString *)v5);
  return v3;
}

uint64_t TFPFont::GetVariationPrefix(uint64_t a1, char **a2)
{
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  char *v6;
  unint64_t v7;
  BOOL v8;
  size_t v9;
  _QWORD v11[12];
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;

  if (*(_QWORD *)(a1 + 256))
  {
    v3 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v16 = v4;
    v17 = v4;
    v14 = v4;
    v15 = v4;
    v12 = v4;
    v13 = v4;
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3 + 88))(&v12, v3, 25, 0xFFFFLL, 0xFFFFLL, 0xFFFFLL);
    if (!TFontNameString::IsValid((TFontNameString *)&v12))
    {
      (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3 + 88))(v11, v3, 16, 0xFFFFLL, 0xFFFFLL, 0xFFFFLL);
      TFontNameString::operator=((uint64_t)&v12, (uint64_t)v11);
      TFontNameString::~TFontNameString((TFontNameString *)v11);
    }
    if (TFontNameString::IsValid((TFontNameString *)&v12))
    {
      v5 = v13;
      v6 = *a2;
      v7 = a2[1] - *a2;
      v8 = (uint64_t)v13 + 1 >= v7;
      v9 = v13 + 1 - v7;
      if (v9 != 0 && v8)
      {
        std::vector<char,TInlineBufferAllocator<char,64ul>>::__append(a2, v9);
        v6 = *a2;
      }
      else if (!v8)
      {
        a2[1] = &v6[v13 + 1];
      }
      if (GetAlphanumericCString((const TFontNameString *)&v12, v6, v5))
      {
        TFontNameString::~TFontNameString((TFontNameString *)&v12);
        return 1;
      }
    }
    TFontNameString::~TFontNameString((TFontNameString *)&v12);
  }
  return 0;
}

void sub_1B09DB2D0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  TFontNameString::~TFontNameString((TFontNameString *)&a9);
  TFontNameString::~TFontNameString((TFontNameString *)&a21);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B09DB2BCLL);
}

BOOL GetAlphanumericCString(const TFontNameString *a1, char *a2, uint64_t a3)
{
  _BOOL4 IsValid;
  _BOOL8 v7;
  __int128 v8;
  char *v9;
  char *v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  _OWORD v16[4];
  void *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  IsValid = TFontNameString::IsValid(a1);
  v7 = 0;
  if (a3 && IsValid)
  {
    *(_QWORD *)&v8 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v16[2] = v8;
    v16[3] = v8;
    v16[0] = v8;
    v16[1] = v8;
    v17 = 0;
    v18 = (char *)v16;
    v19 = 0;
    TPostScriptNameString::operator=((uint64_t)v16, a1);
    v9 = v18;
    v10 = a2;
    if (*v18 == 46)
    {
      *a2 = 46;
      v10 = a2 + 1;
      if (!--a3)
      {
LABEL_14:
        *v10 = 0;
        v7 = v10 != a2;
        free(v17);
        return v7;
      }
      ++v9;
    }
    v11 = MEMORY[0x1E0C80978];
    do
    {
      v13 = *v9++;
      v12 = v13;
      if (!v13)
        break;
      if ((v12 & 0x80000000) != 0 ? __maskrune(v12, 0x500uLL) : *(_DWORD *)(v11 + 4 * v12 + 60) & 0x500)
        *v10++ = v12;
      --a3;
    }
    while (a3);
    goto LABEL_14;
  }
  return v7;
}

void sub_1B09DB438(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(exception_object);
}

uint64_t TFPFont::AppendVariationPostScriptName(uint64_t a1, uint64_t a2, int a3)
{
  __int128 v4;
  _BOOL4 AlphanumericCString;
  const char *v6;
  size_t v7;
  size_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v17[12];
  char __s[16];
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  if ((*(_QWORD *)&a3 & 0xFF0000) == 0)
  {
    v12 = *(_QWORD *)(a1 + 328);
    if (v12 < 0)
      return 0;
    v13 = *(_QWORD *)(a1 + 336) ? *(_QWORD *)(a1 + 336) : a1;
    v14 = *(_QWORD *)(v13 + 344);
    v15 = *(_QWORD *)(v13 + 352);
    if (v14 == v15 || v12 >= (v15 - v14) >> 3)
      return 0;
    LOWORD(a3) = *(_WORD *)(v14 + 8 * v12 + 2);
  }
  if (!(_WORD)a3)
    return 0;
  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v24 = v4;
  v25 = v4;
  v22 = v4;
  v23 = v4;
  v20 = v4;
  v21 = v4;
  *(_OWORD *)__s = v4;
  v19 = v4;
  (*(void (**)(_QWORD *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 16) + 88))(v17, *(_QWORD *)(a1 + 16), (unsigned __int16)a3, 0xFFFFLL, 0xFFFFLL, 0xFFFFLL);
  AlphanumericCString = GetAlphanumericCString((const TFontNameString *)v17, __s, 127);
  TFontNameString::~TFontNameString((TFontNameString *)v17);
  if (!AlphanumericCString)
    return 0;
  v6 = *(const char **)a2;
  v7 = strlen(*(const char **)a2);
  v8 = strlen(__s);
  v9 = v7 + v8 + 1;
  if (v9 > 0x7F)
    return 0;
  v10 = v7 + v8 + 2;
  v11 = *(_QWORD *)(a2 + 8) - (_QWORD)v6;
  if (v11 <= v9)
  {
    std::vector<char,TInlineBufferAllocator<char,64ul>>::__append((_QWORD *)a2, v10 - v11);
    v6 = *(const char **)a2;
  }
  else if (v10 < v11)
  {
    *(_QWORD *)(a2 + 8) = &v6[v10];
  }
  v6[v7] = 45;
  strcpy((char *)&v6[v7 + 1], __s);
  return 1;
}

void sub_1B09DB5F8(void *a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1B09DB600);
  __clang_call_terminate(a1);
}

const __CFString *TFPFont::CopyFontName(TFPFont *this, uint64_t a2)
{
  const __CFString *v2;
  int v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  double *v14;
  double *v15;
  double v16;
  double v17;
  double v18;
  __int128 v19;
  __int128 v20;
  CFStringRef v21;
  const __CFString *v22;
  BOOL v23;
  char v24;
  __int128 v25;
  const __CFString *v26;
  uint64_t v27;
  char v28;
  __int128 v29;
  const __CFString *v30;
  char v31;
  uint64_t v33;
  unint64_t v34;
  const __CFAllocator *v35;
  unsigned int *v36;
  uint64_t v37;
  const __CFString *v38;
  const __CFString *v39;
  char cStr[16];
  CFStringRef appendedString;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  const __CFString *v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;

  v3 = a2;
  v5 = *((_QWORD *)this + 2);
  if ((_DWORD)a2 != 2 && (_DWORD)a2 != 4)
  {
    *(_QWORD *)&v19 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v19 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v53 = v19;
    v54 = v19;
    v51 = v19;
    v52 = v19;
    v49 = v19;
    v50 = v19;
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5 + 88))(&v49, v5, a2, 0xFFFFLL, 0xFFFFLL, 0xFFFFLL);
    v2 = CopyFontNameString((CFTypeRef *)&v49, 0xFFFFFFFF);
    TFontNameString::~TFontNameString((TFontNameString *)&v49);
    return v2;
  }
  v6 = *((_QWORD *)this + 42);
  if (v6)
  {
    v7 = *((_QWORD *)this + 41);
    if ((v7 & 0x8000000000000000) == 0)
    {
      v9 = *(_QWORD *)(v6 + 344);
      v8 = *(_QWORD *)(v6 + 352);
      if (v9 != v8 && v7 < (v8 - v9) >> 3)
      {
        v10 = 0;
        v11 = *(unsigned __int16 *)(v9 + 8 * v7 + 2);
        goto LABEL_20;
      }
      goto LABEL_16;
    }
  }
  v12 = *((_QWORD *)this + 35);
  if (v12)
  {
    v13 = *((_QWORD *)this + 32);
    if (!v13)
    {
LABEL_16:
      v10 = 0;
      v11 = 0;
      goto LABEL_20;
    }
    v14 = (double *)(*((_QWORD *)this + 33) + 32);
    v15 = (double *)(v12 + 8);
    while (1)
    {
      v16 = vabdd_f64(*v15, *v14);
      if (v16 >= 0.0001)
      {
        v17 = fabs(*v15);
        v18 = fabs(*v14);
        if (v17 < v18)
          v17 = v18;
        if (v16 / v17 >= 0.0001)
          break;
      }
      v14 += 5;
      v15 += 2;
      if (!--v13)
        goto LABEL_16;
    }
    v10 = 0;
    v11 = -1;
  }
  else
  {
    v11 = 0;
    v10 = 1;
  }
LABEL_20:
  *(_QWORD *)&v20 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v20 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v53 = v20;
  v54 = v20;
  v51 = v20;
  v52 = v20;
  v49 = v20;
  v50 = v20;
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5 + 88))(&v49, v5, a2, 0xFFFFLL, 0xFFFFLL, 0xFFFFLL);
  v21 = CopyFontNameString((CFTypeRef *)&v49, 0xFFFFFFFF);
  v48 = v21;
  if (v21)
    v23 = 0;
  else
    v23 = v11 == 0;
  v24 = v23;
  if (v23)
    goto LABEL_48;
  if (v3 == 2)
    v2 = 0;
  else
    v2 = v21;
  if (v11 >= 1)
  {
    *(_QWORD *)&v25 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v25 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v46 = v25;
    v47 = v25;
    v44 = v25;
    v45 = v25;
    v42 = v25;
    v43 = v25;
    (*(void (**)(__int128 *__return_ptr, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5 + 88))(&v42, v5, (unsigned __int16)v11, 0xFFFFLL, 0xFFFFLL, 0xFFFFLL);
    appendedString = CopyFontNameString((CFTypeRef *)&v42, 0xFFFFFFFF);
    if (!appendedString)
      goto LABEL_45;
    memset(cStr, 170, sizeof(cStr));
    TComponentsJoinedByString::TComponentsJoinedByString((TComponentsJoinedByString *)cStr, v2, v26);
    v27 = *(_QWORD *)cStr;
    if (!*(_QWORD *)cStr)
    {
LABEL_43:
      TCFRetained<__CFString const*>::~TCFRetained((const void **)&cStr[8]);
      TCFString::~TCFString((const void **)cStr);
      if (v27)
      {
        v31 = 0;
        goto LABEL_46;
      }
LABEL_45:
      v31 = 1;
LABEL_46:
      TCFString::~TCFString((const void **)&appendedString);
      TFontNameString::~TFontNameString((TFontNameString *)&v42);
      if ((v31 & 1) == 0)
        goto LABEL_48;
      goto LABEL_47;
    }
LABEL_33:
    TComponentsJoinedByString::Append((CFStringRef *)cStr, appendedString);
    v2 = *(const __CFString **)cStr;
    *(_QWORD *)cStr = 0;
    goto LABEL_43;
  }
  if (v11 < 0)
  {
    *(_QWORD *)&v42 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v42 + 1) = 0xAAAAAAAAAAAAAAAALL;
    TComponentsJoinedByString::TComponentsJoinedByString((TComponentsJoinedByString *)&v42, v2, v22);
    v33 = v42;
    if ((_QWORD)v42)
    {
      v2 = (const __CFString *)v42;
      if (*((_QWORD *)this + 32))
      {
        v34 = 0;
        v35 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
        v36 = (unsigned int *)(*((_QWORD *)this + 33) + 8);
        v37 = 8;
        do
        {
          v38 = (const __CFString *)*((_QWORD *)v36 - 1);
          if (v38)
          {
            TComponentsJoinedByString::Append((const __CFString **)&v42, v38, *(double *)(*((_QWORD *)this + 35) + v37));
          }
          else
          {
            *(_DWORD *)cStr = bswap32(*v36);
            cStr[4] = 0;
            v39 = CFStringCreateWithCString(v35, cStr, 0);
            if (v39)
            {
              TComponentsJoinedByString::Append((const __CFString **)&v42, v39, *(double *)(*((_QWORD *)this + 35) + v37));
              CFRelease(v39);
            }
          }
          ++v34;
          v37 += 16;
          v36 += 10;
        }
        while (v34 < *((_QWORD *)this + 32));
        v2 = (const __CFString *)v42;
      }
      *(_QWORD *)&v42 = 0;
    }
    TCFRetained<__CFString const*>::~TCFRetained((const void **)&v42 + 1);
    TCFString::~TCFString((const void **)&v42);
    if (v33)
      goto LABEL_48;
  }
  else
  {
    if (v3 == 4)
      v28 = v10;
    else
      v28 = 1;
    if ((v28 & 1) == 0)
    {
      *(_QWORD *)&v29 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v29 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v46 = v29;
      v47 = v29;
      v44 = v29;
      v45 = v29;
      v42 = v29;
      v43 = v29;
      (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5 + 88))(&v42, v5, 2, 0xFFFFLL, 0xFFFFLL, 0xFFFFLL);
      appendedString = CopyFontNameString((CFTypeRef *)&v42, 0xFFFFFFFF);
      if (!appendedString)
        goto LABEL_45;
      memset(cStr, 170, sizeof(cStr));
      TComponentsJoinedByString::TComponentsJoinedByString((TComponentsJoinedByString *)cStr, v2, v30);
      v27 = *(_QWORD *)cStr;
      if (!*(_QWORD *)cStr)
        goto LABEL_43;
      goto LABEL_33;
    }
  }
LABEL_47:
  v2 = v48;
  v48 = 0;
LABEL_48:
  TCFString::~TCFString((const void **)&v48);
  TFontNameString::~TFontNameString((TFontNameString *)&v49);
  if ((v24 & 1) != 0)
    return 0;
  return v2;
}

void sub_1B09DBA3C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, const void *a10, uint64_t a11, const void *a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,const void *a26,char a27)
{
  const void **v27;

  TCFRetained<__CFString const*>::~TCFRetained(v27);
  TCFString::~TCFString(&a10);
  TCFString::~TCFString(&a12);
  TFontNameString::~TFontNameString((TFontNameString *)&a13);
  TCFString::~TCFString(&a26);
  TFontNameString::~TFontNameString((TFontNameString *)&a27);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B09DB92CLL);
}

void TComponentsJoinedByString::Append(CFStringRef *this, CFStringRef appendedString)
{
  __CFString *v4;
  CFIndex Length;

  v4 = (__CFString *)*this;
  if (v4)
  {
    Length = CFStringGetLength(v4);
    v4 = (__CFString *)*this;
    if (Length)
    {
      CFStringAppend(v4, this[1]);
      v4 = (__CFString *)*this;
    }
  }
  CFStringAppend(v4, appendedString);
}

void TComponentsJoinedByString::Append(const __CFString **this, const __CFString *a2, double a3)
{
  const __CFString *v6;

  v6 = *this;
  if (v6 && CFStringGetLength(v6))
    CFStringAppend((CFMutableStringRef)*this, this[1]);
  TCFMutableString::AppendFormat((CFMutableStringRef *)this, a2, a2, this[1], *(_QWORD *)&a3);
}

__CFArray *TFPFont::CopyAllNames(TFPFont *this)
{
  __int128 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const __CFString **v8;
  uint64_t v9;
  double *v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  double v14;
  double v15;
  double v16;
  unint64_t v17;
  uint64_t v18;
  char v19;
  unsigned __int16 v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  CFStringRef v25;
  int v26;
  _BOOL4 v27;
  BOOL v28;
  uint64_t v29;
  __CFString *v30;
  CFDictionaryRef v31;
  const char *v32;
  size_t v33;
  const __CFDictionary *v34;
  const __CFString *v35;
  void **v36;
  const void *v37;
  const void *v38;
  const void *v39;
  const void *v40;
  const void *v41;
  const void *v42;
  const void *v43;
  const void *v44;
  CFLocaleIdentifier v45;
  _BOOL4 v46;
  CFDictionaryRef v47;
  __int128 v48;
  CFStringRef v49;
  CFLocaleIdentifier v50;
  const __CFString *v51;
  CFStringRef *v52;
  uint64_t v53;
  CFDictionaryRef v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  CFTypeRef *v58;
  const __CFDictionary *v59;
  const __CFString *v60;
  void **v61;
  __int128 v62;
  CFStringRef v63;
  uint64_t v64;
  __CFString *v65;
  const void *v66;
  __CFArray *v67;
  unsigned int v69;
  const __CFString **v70;
  uint64_t v71;
  int v72;
  int v73;
  int v74;
  TFPFont *v75;
  int v76;
  const __CFAllocator *alloc;
  CFDictionaryRef v78;
  unint64_t v79;
  CFDictionaryRef theDict[2];
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  unint64_t v86;
  __CFArray *Mutable;
  __int128 v88;
  uint64_t v89;
  CFDictionaryRef *v90;
  unint64_t v91;
  const void *v92[2];

  v88 = 0uLL;
  v89 = 0;
  (*(void (**)(CFDictionaryRef *__return_ptr))(**((_QWORD **)this + 2) + 104))(theDict);
  std::vector<TFontNameString>::__vdeallocate((void **)&v88);
  v88 = *(_OWORD *)theDict;
  v89 = v81;
  theDict[1] = 0;
  *(_QWORD *)&v81 = 0;
  theDict[0] = 0;
  v90 = theDict;
  std::vector<TFontNameString>::__destroy_vector::operator()[abi:fe180100]((void ***)&v90);
  v2 = v88;
  Mutable = (__CFArray *)0xAAAAAAAAAAAAAAAALL;
  alloc = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  if (!Mutable)
    goto LABEL_143;
  v3 = *((_QWORD *)this + 42);
  v75 = this;
  if (!v3 || (v4 = *((_QWORD *)this + 41), v4 < 0))
  {
    v9 = *((_QWORD *)this + 35);
    if (!v9)
    {
      v72 = 0;
      v76 = 0;
      v74 = 0;
      v7 = 0;
      v8 = 0;
      goto LABEL_20;
    }
    v7 = *((_QWORD *)this + 32);
    if (v7)
    {
      v8 = (const __CFString **)*((_QWORD *)this + 33);
      v10 = (double *)(v9 + 8);
      v11 = 4;
      v12 = *((_QWORD *)this + 32);
      while (1)
      {
        v13 = *(double *)&v8[v11];
        v14 = vabdd_f64(*v10, v13);
        if (v14 >= 0.0001)
        {
          v15 = fabs(*v10);
          v16 = fabs(v13);
          if (v15 < v16)
            v15 = v16;
          if (v14 / v15 >= 0.0001)
            break;
        }
        v11 += 5;
        v10 += 2;
        if (!--v12)
          goto LABEL_15;
      }
      v76 = -1;
      v72 = 1;
      goto LABEL_19;
    }
    v72 = 0;
    v76 = 0;
    goto LABEL_18;
  }
  v6 = *(_QWORD *)(v3 + 344);
  v5 = *(_QWORD *)(v3 + 352);
  if (v6 == v5 || v4 >= (v5 - v6) >> 3)
  {
LABEL_15:
    v72 = 0;
    v76 = 0;
    v7 = 0;
LABEL_18:
    v8 = 0;
    goto LABEL_19;
  }
  v72 = 0;
  v7 = 0;
  v8 = 0;
  v76 = *(unsigned __int16 *)(v6 + 8 * v4 + 2);
LABEL_19:
  v74 = 1;
LABEL_20:
  v70 = v8;
  v71 = v7;
  v17 = (*((_QWORD *)&v2 + 1) - (_QWORD)v2) / 96;
  if (*((_QWORD *)&v2 + 1) != (_QWORD)v2)
  {
    v18 = 0;
    v73 = 0;
    v19 = 0;
    if (v76)
      v20 = v76;
    else
      v20 = 2;
    v21 = 1;
    v69 = v20;
    while (1)
    {
      v22 = v88;
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v88 + 1) - v88) >> 5) <= v21 - 1)
        goto LABEL_135;
      v23 = v88 + v18;
      if (*(_WORD *)(v88 + v18 + 66) == 6)
      {
        if ((v19 & 1) != 0)
        {
          v24 = 0;
          v19 = 1;
        }
        else
        {
          v32 = (const char *)*((_QWORD *)v75 + 17);
          theDict[0] = (CFDictionaryRef)0xAAAAAAAAAAAAAAAALL;
          v33 = strlen(v32);
          if (v32 && v33)
          {
            v34 = (const __CFDictionary *)CFStringCreateWithBytes(alloc, (const UInt8 *)v32, v33, 0x600u, 0);
            theDict[0] = v34;
            if (v34)
            {
              v90 = (CFDictionaryRef *)0xAAAAAAAAAAAAAAAALL;
              v35 = CopyFontNameLocaleIdentifier((CFTypeRef *)(v22 + v18));
              TNameEntry::TNameEntry((TNameEntry *)&v90, 6, (const __CFString *)v34, v35);
              if (v90 && CFDictionaryGetCount((CFDictionaryRef)v90) >= 1)
              {
                if (v90)
                {
                  if (CFDictionaryGetCount((CFDictionaryRef)v90))
                    v36 = (void **)v90;
                  else
                    v36 = 0;
                }
                else
                {
                  v36 = 0;
                }
                CFArrayAppendValue(Mutable, v36);
              }
              TCFDictionary::~TCFDictionary((const void **)&v90);
              v19 = 1;
            }
            else
            {
              v19 = 0;
            }
          }
          else
          {
            v19 = 0;
            theDict[0] = 0;
          }
          TCFString::~TCFString((const void **)theDict);
          v24 = 0;
        }
        goto LABEL_100;
      }
      v86 = 0xAAAAAAAAAAAAAAAALL;
      v25 = CopyFontNameString((CFTypeRef *)(v88 + v18), 0xFFFFFFFF);
      v86 = (unint64_t)v25;
      if (v25)
      {
        v26 = *(unsigned __int16 *)(v23 + 66);
        v27 = v26 == 2;
        if (!v74 || (v26 != 4 ? (v28 = v26 == 2) : (v28 = 1), !v28))
        {
          theDict[0] = (CFDictionaryRef)0xAAAAAAAAAAAAAAAALL;
          v86 = 0;
          theDict[0] = CFDictionaryCreateMutable(alloc, 6, 0, MEMORY[0x1E0C9B3A0]);
          if (!theDict[0])
            goto LABEL_63;
          v37 = (const void *)kFPNameKeyKind;
          v38 = (const void *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedShort:", *(unsigned __int16 *)(v23 + 66));
          CFDictionaryAddValue(theDict[0], v37, v38);
          CFDictionaryAddValue(theDict[0], (const void *)kFPNameKeyString, v25);
          CFRelease(v25);
          v39 = (const void *)kFPNameKeyPlatform;
          v40 = (const void *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedShort:", *(unsigned __int16 *)(v22 + v18 + 68));
          CFDictionaryAddValue(theDict[0], v39, v40);
          v41 = (const void *)kFPNameKeyScript;
          v42 = (const void *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedShort:", *(unsigned __int16 *)(v22 + v18 + 70));
          CFDictionaryAddValue(theDict[0], v41, v42);
          v43 = (const void *)kFPNameKeyLanguage;
          v44 = (const void *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedShort:", *(unsigned __int16 *)(v22 + v18 + 72));
          CFDictionaryAddValue(theDict[0], v43, v44);
          v45 = CopyFontNameLocaleIdentifier((CFTypeRef *)(v22 + v18));
          if (v45)
          {
            CFDictionaryAddValue(theDict[0], (const void *)kFPNameKeyLocaleIdentifier, v45);
            CFRelease(v45);
          }
          if (theDict[0] && CFDictionaryGetCount(theDict[0]) >= 1)
          {
            v46 = v26 == 2;
            if (theDict[0])
            {
              if (CFDictionaryGetCount(theDict[0]))
                v47 = theDict[0];
              else
                v47 = 0;
            }
            else
            {
              v47 = 0;
            }
            CFArrayAppendValue(Mutable, v47);
            v24 = 0;
            v73 |= v46;
          }
          else
          {
LABEL_63:
            v24 = 1;
          }
          TCFDictionary::~TCFDictionary((const void **)theDict);
          goto LABEL_99;
        }
        if (v26 == 2)
          v25 = 0;
        if (v72)
        {
          theDict[0] = (CFDictionaryRef)0xAAAAAAAAAAAAAAAALL;
          v29 = *((_QWORD *)v75 + 35);
          v30 = (__CFString *)CopyFontNameLocaleIdentifier((CFTypeRef *)(v22 + v18));
          TNameEntry::TNameEntry(theDict, v25, v71, v70, v29, v30);
          if (theDict[0] && CFDictionaryGetCount(theDict[0]) >= 1)
          {
            if (theDict[0])
            {
              if (CFDictionaryGetCount(theDict[0]))
                v31 = theDict[0];
              else
                v31 = 0;
            }
            else
            {
              v31 = 0;
            }
            CFArrayAppendValue(Mutable, v31);
            v73 = v26 == 2;
          }
          TCFDictionary::~TCFDictionary((const void **)theDict);
        }
        else
        {
          *(_QWORD *)&v48 = 0xAAAAAAAAAAAAAAAALL;
          *((_QWORD *)&v48 + 1) = 0xAAAAAAAAAAAAAAAALL;
          v84 = v48;
          v85 = v48;
          v82 = v48;
          v83 = v48;
          *(_OWORD *)theDict = v48;
          v81 = v48;
          (*(void (**)(CFDictionaryRef *__return_ptr, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(**((_QWORD **)v75 + 2) + 88))(theDict, *((_QWORD *)v75 + 2), v69, *(unsigned __int16 *)(v22 + v18 + 68), *(unsigned __int16 *)(v22 + v18 + 70), *(unsigned __int16 *)(v22 + v18 + 72));
          v79 = 0xAAAAAAAAAAAAAAAALL;
          v49 = CopyFontNameString((CFTypeRef *)theDict, 0xFFFFFFFF);
          v79 = (unint64_t)v49;
          if (v49)
          {
            v78 = (CFDictionaryRef)0xAAAAAAAAAAAAAAAALL;
            v50 = CopyFontNameLocaleIdentifier((CFTypeRef *)v23);
            v78 = CFDictionaryCreateMutable(alloc, 3, 0, MEMORY[0x1E0C9B3A0]);
            v92[0] = v50;
            if (v78)
            {
              v90 = (CFDictionaryRef *)0xAAAAAAAAAAAAAAAALL;
              v91 = 0xAAAAAAAAAAAAAAAALL;
              TComponentsJoinedByString::TComponentsJoinedByString((TComponentsJoinedByString *)&v90, v25, v51);
              if (v90)
              {
                TComponentsJoinedByString::Append(v52, v49);
                if (v26 == 2)
                  v53 = 2;
                else
                  v53 = 4;
                TNameEntry::AddItems(&v78, v53, (const __CFString *)v90, (const __CFString *)v92[0]);
              }
              TCFRetained<__CFString const*>::~TCFRetained((const void **)&v91);
              TCFString::~TCFString((const void **)&v90);
            }
            TCFString::~TCFString(v92);
            if (v78)
            {
              if (CFDictionaryGetCount(v78) < 1)
              {
                v27 = v73;
              }
              else
              {
                if (v78)
                {
                  if (CFDictionaryGetCount(v78))
                    v54 = v78;
                  else
                    v54 = 0;
                }
                else
                {
                  v54 = 0;
                }
                CFArrayAppendValue(Mutable, v54);
              }
            }
            else
            {
              v27 = v73;
            }
            TCFDictionary::~TCFDictionary((const void **)&v78);
            v73 = v27;
          }
          TCFString::~TCFString((const void **)&v79);
          TFontNameString::~TFontNameString((TFontNameString *)theDict);
        }
      }
      v24 = 0;
LABEL_99:
      TCFString::~TCFString((const void **)&v86);
LABEL_100:
      if (v21 < v17)
      {
        v18 += 96;
        ++v21;
        if ((v24 & 1) == 0)
          continue;
      }
      goto LABEL_104;
    }
  }
  v24 = 0;
  LOBYTE(v73) = 0;
LABEL_104:
  if ((v24 & 1) == 0 && (v73 & 1) == 0)
  {
    if (v76 < 1)
    {
      if (v72)
      {
        *(_QWORD *)&v62 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v62 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v84 = v62;
        v85 = v62;
        v82 = v62;
        v83 = v62;
        *(_OWORD *)theDict = v62;
        v81 = v62;
        (*(void (**)(CFDictionaryRef *__return_ptr, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(**((_QWORD **)v75 + 2) + 88))(theDict, *((_QWORD *)v75 + 2), 2, 0xFFFFLL, 0xFFFFLL, 0xFFFFLL);
        v63 = CopyFontNameString((CFTypeRef *)theDict, 0xFFFFFFFF);
        v90 = (CFDictionaryRef *)v63;
        if (!v63)
        {
LABEL_139:
          TCFString::~TCFString((const void **)&v90);
          TFontNameString::~TFontNameString((TFontNameString *)theDict);
          goto LABEL_140;
        }
        v92[0] = (const void *)0xAAAAAAAAAAAAAAAALL;
        v64 = *((_QWORD *)v75 + 35);
        v65 = (__CFString *)CopyFontNameLocaleIdentifier((CFTypeRef *)theDict);
        TNameEntry::TNameEntry((CFMutableDictionaryRef *)v92, v63, v71, v70, v64, v65);
        if (!v92[0] || CFDictionaryGetCount((CFDictionaryRef)v92[0]) < 1)
        {
LABEL_138:
          TCFDictionary::~TCFDictionary(v92);
          goto LABEL_139;
        }
        if (v92[0])
        {
          if (CFDictionaryGetCount((CFDictionaryRef)v92[0]))
            v66 = v92[0];
          else
            v66 = 0;
          goto LABEL_137;
        }
LABEL_136:
        v66 = 0;
LABEL_137:
        CFArrayAppendValue(Mutable, v66);
        goto LABEL_138;
      }
    }
    else if (*((_QWORD *)&v2 + 1) != (_QWORD)v2)
    {
      v55 = 0;
      v56 = 0;
      if (v17 <= 1)
        v57 = 1;
      else
        v57 = (*((_QWORD *)&v2 + 1) - (_QWORD)v2) / 96;
      while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v88 + 1) - v88) >> 5) > v56)
      {
        v58 = (CFTypeRef *)(v88 + v55);
        if (v76 == *(unsigned __int16 *)(v88 + v55 + 66))
        {
          theDict[0] = (CFDictionaryRef)0xAAAAAAAAAAAAAAAALL;
          v59 = (const __CFDictionary *)CopyFontNameString(v58, 0xFFFFFFFF);
          theDict[0] = v59;
          if (v59)
          {
            v90 = (CFDictionaryRef *)0xAAAAAAAAAAAAAAAALL;
            v60 = CopyFontNameLocaleIdentifier(v58);
            TNameEntry::TNameEntry((TNameEntry *)&v90, 2, (const __CFString *)v59, v60);
            if (v90 && CFDictionaryGetCount((CFDictionaryRef)v90) >= 1)
            {
              if (v90)
              {
                if (CFDictionaryGetCount((CFDictionaryRef)v90))
                  v61 = (void **)v90;
                else
                  v61 = 0;
              }
              else
              {
                v61 = 0;
              }
              CFArrayAppendValue(Mutable, v61);
            }
            TCFDictionary::~TCFDictionary((const void **)&v90);
          }
          TCFString::~TCFString((const void **)theDict);
        }
        ++v56;
        v55 += 96;
        if (v57 == v56)
          goto LABEL_140;
      }
LABEL_135:
      __break(1u);
      goto LABEL_136;
    }
  }
LABEL_140:
  if (!Mutable || !CFArrayGetCount(Mutable))
  {
LABEL_143:
    v67 = 0;
    goto LABEL_144;
  }
  v67 = Mutable;
  Mutable = 0;
LABEL_144:
  TCFArray<void const*>::~TCFArray((const void **)&Mutable);
  theDict[0] = (CFDictionaryRef)&v88;
  std::vector<TFontNameString>::__destroy_vector::operator()[abi:fe180100]((void ***)theDict);
  return v67;
}

void sub_1B09DC53C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void **a23)
{
  uint64_t v23;

  TCFString::~TCFString((const void **)(v23 - 160));
  TCFArray<void const*>::~TCFArray((const void **)(v23 - 152));
  a23 = (void **)(v23 - 144);
  std::vector<TFontNameString>::__destroy_vector::operator()[abi:fe180100](&a23);
  _Unwind_Resume(a1);
}

CFLocaleIdentifier CopyFontNameLocaleIdentifier(CFTypeRef *a1)
{
  int v2;
  uint32_t v3;

  if (a1[11])
    return (CFLocaleIdentifier)CFRetain(a1[11]);
  v2 = *((unsigned __int16 *)a1 + 34);
  v3 = *((unsigned __int16 *)a1 + 36);
  if (v2 == 3)
    return CFLocaleCreateLocaleIdentifierFromWindowsLocaleCode((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v3);
  if (v2 == 1)
    return CFLocaleCreateCanonicalLocaleIdentifierFromScriptManagerCodes((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v3, -128);
  return 0;
}

CFMutableDictionaryRef *TNameEntry::TNameEntry(CFMutableDictionaryRef *a1, const __CFString *a2, uint64_t a3, const __CFString **a4, uint64_t a5, __CFString *a6)
{
  CFMutableDictionaryRef Mutable;
  const __CFString *v13;
  __CFString *v14;
  double *v15;
  __CFString *v17;
  unint64_t v18;
  __CFString *v19;

  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 3, 0, MEMORY[0x1E0C9B3A0]);
  *a1 = Mutable;
  v19 = a6;
  if (Mutable)
  {
    v17 = (__CFString *)0xAAAAAAAAAAAAAAAALL;
    v18 = 0xAAAAAAAAAAAAAAAALL;
    TComponentsJoinedByString::TComponentsJoinedByString((TComponentsJoinedByString *)&v17, a2, v13);
    v14 = v17;
    if (v17)
    {
      if (a3 >= 1)
      {
        v15 = (double *)(a5 + 8);
        do
        {
          TComponentsJoinedByString::Append((const __CFString **)&v17, *a4, *v15);
          v15 += 2;
          a4 += 5;
          --a3;
        }
        while (a3);
        v14 = v17;
      }
      TNameEntry::AddItems(a1, 2, v14, v19);
    }
    TCFRetained<__CFString const*>::~TCFRetained((const void **)&v18);
    TCFString::~TCFString((const void **)&v17);
  }
  TCFString::~TCFString((const void **)&v19);
  return a1;
}

void sub_1B09DC7AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  const void **v2;
  const void **v3;
  const void *v5;
  va_list va;
  uint64_t v7;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v5 = va_arg(va1, const void *);
  v7 = va_arg(va1, _QWORD);
  TCFRetained<__CFString const*>::~TCFRetained(v3);
  TCFString::~TCFString((const void **)va);
  TCFString::~TCFString((const void **)va1);
  TCFDictionary::~TCFDictionary(v2);
  _Unwind_Resume(a1);
}

void TNameEntry::TNameEntry(TNameEntry *this, uint64_t a2, const __CFString *a3, const __CFString *a4)
{
  const void *v8;

  *(_QWORD *)this = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 3, 0, MEMORY[0x1E0C9B3A0]);
  v8 = a4;
  TNameEntry::AddItems((CFMutableDictionaryRef *)this, a2, a3, a4);
  TCFString::~TCFString(&v8);
}

void sub_1B09DC864(_Unwind_Exception *a1, uint64_t a2, ...)
{
  const void **v2;
  va_list va;

  va_start(va, a2);
  TCFString::~TCFString((const void **)va);
  TCFDictionary::~TCFDictionary(v2);
  _Unwind_Resume(a1);
}

CFMutableDictionaryRef TFPFont::CopyNames(TFPFont *this)
{
  const __CFAllocator *v2;
  uint64_t i;
  uint64_t v4;
  __CFString **v5;
  __CFString *v6;
  const __CFString *v7;
  CFStringRef v8;
  size_t v9;
  CFMutableDictionaryRef v10;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  CFMutableDictionaryRef theDict;
  void **p_isa;

  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  theDict = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (theDict)
  {
    v14 = 0uLL;
    v15 = 0;
    (*(void (**)(__int128 *__return_ptr))(**((_QWORD **)this + 2) + 112))(&v12);
    std::vector<TFontNameString>::__vdeallocate((void **)&v14);
    v14 = v12;
    v15 = v13;
    v13 = 0;
    v12 = 0uLL;
    p_isa = (void **)&v12;
    std::vector<TFontNameString>::__destroy_vector::operator()[abi:fe180100](&p_isa);
    v4 = *((_QWORD *)&v14 + 1);
    for (i = v14; i != v4; i += 96)
    {
      p_isa = (void **)0xAAAAAAAAAAAAAAAALL;
      v5 = kFPFontFamilyName;
      switch(*(_WORD *)(i + 66))
      {
        case 0:
          v5 = kFPFontCopyrightName;
          goto LABEL_10;
        case 1:
          goto LABEL_10;
        case 2:
          v6 = kFPFontStyleName[0];
          v7 = TFPFont::CopyFontName(this, 2);
          goto LABEL_12;
        case 3:
          v5 = kFPFontUniqueName;
          goto LABEL_10;
        case 4:
          v6 = kFPFontFullName[0];
          v7 = TFPFont::CopyFontName(this, 4);
          goto LABEL_12;
        case 5:
          v5 = kFPFontVersionName;
          goto LABEL_10;
        case 6:
          v6 = (__CFString *)kFPFontPostscriptName;
          v9 = strlen(*((const char **)this + 17));
          v8 = CFStringCreateWithBytes(v2, *((const UInt8 **)this + 17), v9, 0x600u, 0);
          *(_QWORD *)&v12 = 0;
          TCFString::~TCFString((const void **)&v12);
          goto LABEL_13;
        case 7:
          v5 = &kFPFontTrademarkName;
LABEL_10:
          v6 = *v5;
          break;
        default:
          v6 = 0;
          break;
      }
      v7 = CopyFontNameString((CFTypeRef *)i, 0xFFFFFFFF);
LABEL_12:
      v8 = v7;
LABEL_13:
      p_isa = &v8->isa;
      if (v6 && v8)
        CFDictionaryAddValue(theDict, v6, v8);
      TCFString::~TCFString((const void **)&p_isa);
    }
    *(_QWORD *)&v12 = &v14;
    std::vector<TFontNameString>::__destroy_vector::operator()[abi:fe180100]((void ***)&v12);
    v10 = theDict;
  }
  else
  {
    v10 = 0;
  }
  theDict = 0;
  TCFDictionary::~TCFDictionary((const void **)&theDict);
  return v10;
}

void sub_1B09DCAA0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  a9 = (void **)&a13;
  std::vector<TFontNameString>::__destroy_vector::operator()[abi:fe180100](&a9);
  JUMPOUT(0x1B09DCA74);
}

void sub_1B09DCAC0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, const void *a17)
{
  a9 = (void **)&a13;
  std::vector<TFontNameString>::__destroy_vector::operator()[abi:fe180100](&a9);
  TCFDictionary::~TCFDictionary(&a17);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B09DCA7CLL);
}

uint64_t TFPFont::GetLongGlyphsForCharacters(TFPFont *this, const unsigned __int16 *a2, unsigned int *a3, unint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v11;
  unsigned int v12;
  __int128 v13;
  unsigned __int16 *i;
  unsigned __int16 *v15;
  unsigned int v16;
  unsigned int v18;
  void **v19;
  _OWORD v20[6];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  if (a4 >= 0xFFFFFFFF)
    v5 = 0xFFFFFFFFLL;
  else
    v5 = a4;
  v18 = v5;
  if (!(_DWORD)v5)
    return 0;
  v11 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 432))(*((_QWORD *)this + 2));
  if (v11)
  {
    return (*(unsigned int (**)(uint64_t, const unsigned __int16 *, unsigned int *, uint64_t, uint64_t))(*(_QWORD *)v11 + 488))(v11, a2, a3, v5, a5);
  }
  else
  {
    *(_QWORD *)&v13 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v13 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v20[4] = v13;
    v20[5] = v13;
    v20[2] = v13;
    v20[3] = v13;
    v20[0] = v13;
    v20[1] = v13;
    LOWORD(v19) = 0;
    std::vector<unsigned short,TInlineBufferAllocator<unsigned short,30ul>>::vector(v20, a4, &v19);
    (*(void (**)(_QWORD, const unsigned __int16 *, _QWORD, unsigned int *, uint64_t))(**((_QWORD **)this + 2)
                                                                                              + 120))(*((_QWORD *)this + 2), a2, *(_QWORD *)&v20[0], &v18, a5);
    v15 = (unsigned __int16 *)*((_QWORD *)&v20[0] + 1);
    for (i = *(unsigned __int16 **)&v20[0]; i != v15; ++i)
    {
      v16 = *i;
      *a3++ = v16;
    }
    v12 = v18;
    v19 = (void **)v20;
    std::vector<unsigned short,TInlineBufferAllocator<unsigned short,30ul>>::__destroy_vector::operator()[abi:fe180100](&v19);
  }
  return v12;
}

BOOL TFPFont::IsSFNT(TFPFont *this)
{
  int v1;

  v1 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 40))(*((_QWORD *)this + 2));
  return v1 == 33 || (v1 - 2) < 0x14;
}

uint64_t TFPFont::HasNonDefaultVariationValue(TFPFont *this, int a2, double *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  double v7;

  v3 = *((_QWORD *)this + 35);
  v4 = *((_QWORD *)this + 32);
  if (v4)
  {
    v5 = 16 * v4;
    for (i = *((_QWORD *)this + 35); *(_DWORD *)i != a2; i += 16)
    {
      v5 -= 16;
      if (!v5)
        return 0;
    }
  }
  else
  {
    i = *((_QWORD *)this + 35);
  }
  if (i == v3 + 16 * v4)
    return 0;
  v7 = *(double *)(i + 8);
  if (v7 == *(double *)(*((_QWORD *)this + 33) + 40 * ((i - v3) >> 4) + 32))
    return 0;
  *a3 = v7;
  return 1;
}

uint64_t TMVARTable::ValueForTag(TMVARTable *this, int a2)
{
  uint64_t DeltaSetIndexForTag;

  DeltaSetIndexForTag = TMVARTable::GetDeltaSetIndexForTag(this, a2);
  if ((DeltaSetIndexForTag & 0xFF00000000) != 0)
    return ItemVariationStore::ValueForDeltaSet((TMVARTable *)((char *)this + 88), WORD1(DeltaSetIndexForTag), (unsigned __int16)DeltaSetIndexForTag, *((_QWORD *)this + 7), *((const __int16 **)this + 8), 0);
  else
    return 0;
}

uint64_t TFPFont::GetVMetrics(TFPFont *this, FPFontVMetrics *a2)
{
  uint64_t v4;
  int *p_var1;
  int *p_var2;
  unint64_t Handler;
  unint64_t v8;
  int v9;
  int *v10;
  int *v11;
  FPFontVMetrics *v12;
  int v13;
  CGFloat v14;
  CGFloat v15;
  CGFloat v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  __int128 v20;
  unint64_t v21;
  CGPoint v22;
  int v23;
  uint64_t v24;
  const TSFNTFont *v25;
  const __int16 *v26;
  __int128 v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  char v33;
  _DWORD *exception;
  unint64_t v36[4];
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  CGPoint v41;
  CGSize v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  int v58;
  unint64_t v59;
  int v60;
  int v61;
  int v62;
  _QWORD v63[3];

  v4 = *((_QWORD *)this + 2);
  v63[0] = 0;
  v62 = 0;
  p_var1 = &a2->var1;
  p_var2 = &a2->var2;
  Handler = TFPFont::GetHandler(this);
  if (Handler)
  {
    v8 = Handler;
    v9 = (*(uint64_t (**)(unint64_t, FPFontVMetrics *, int *, int *, uint64_t))(*(_QWORD *)Handler + 32))(Handler, a2, p_var1, p_var2, 1);
    if (v9)
      v10 = &v62;
    else
      v10 = p_var2;
    if (v9)
      v11 = (int *)v63;
    else
      v11 = p_var1;
    if (v9)
      v12 = (FPFontVMetrics *)((char *)v63 + 4);
    else
      v12 = a2;
    v60 = -1431655766;
    v61 = -1431655766;
    *(_QWORD *)&v44 = -1;
    v36[0] = -1;
    v54 = -1;
    v59 = -1;
    (*(void (**)(unint64_t, __int128 *, unint64_t *, uint64_t *, unint64_t *, uint64_t))(*(_QWORD *)v8 + 24))(v8, &v44, v36, &v54, &v59, 1);
    (*(void (**)(uint64_t, FPFontVMetrics *, int *, int *, int *, int *, int *, int *, int *, __int128 *, unint64_t *, uint64_t *, unint64_t *))(*(_QWORD *)v4 + 328))(v4, v12, v11, v10, &a2->var3, &a2->var4, &a2->var5, &v61, &v60, &v44, v36, &v54, &v59);
    v13 = v60;
    a2->var6 = (double)v61;
    a2->var7 = (double)v13;
    v14 = *(double *)v36;
    v15 = *(double *)&v54;
    v16 = *(double *)&v59;
    *(_QWORD *)&a2->var8.origin.x = v44;
    a2->var8.origin.y = v14;
    a2->var8.size.width = v15;
    a2->var8.size.height = v16;
  }
  else
  {
    v17 = *((_QWORD *)this + 32);
    v18 = *((_QWORD *)this + 35);
    LODWORD(v54) = 8;
    v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 72))(v4);
    v55 = xmmword_1B0AABB70;
    v56 = xmmword_1B0AABB70;
    v57 = xmmword_1B0AABB80;
    HIDWORD(v54) = v19 << 16;
    v58 = 0x10000;
    *(_QWORD *)&v20 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v20 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v52 = v20;
    v53 = v20;
    v50 = v20;
    v51 = v20;
    v48 = v20;
    v49 = v20;
    v46 = v20;
    v47 = v20;
    v44 = v20;
    v45 = v20;
    TScalerStrike::TScalerStrike((uint64_t)&v44, v4, v17, v18, (__int128 *)&v54);
    v59 = 0xAAAAAAAAAAAAAAAALL;
    TFontScaler::CreateFontScaler((uint64_t)&v44, 0, &v59);
    v21 = v59;
    if (!v59)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)exception = &off_1E6176998;
      exception[2] = 1;
    }
    v43 = 0;
    v41 = (CGPoint)0;
    v42 = (CGSize)0;
    v39 = 0u;
    v40 = 0u;
    v37 = 0u;
    v38 = 0u;
    memset(v36, 0, sizeof(v36));
    (*(void (**)(unint64_t, unint64_t *))(*(_QWORD *)v59 + 16))(v59, v36);
    *(_QWORD *)&a2->var0 = *(unint64_t *)((char *)&v36[1] + 4);
    *(_QWORD *)&a2->var4 = *((_QWORD *)&v37 + 1);
    v22 = v41;
    *(_OWORD *)&a2->var6 = v40;
    v23 = v37;
    a2->var2 = HIDWORD(v36[2]);
    a2->var3 = v23;
    a2->var8.origin = v22;
    a2->var8.size = v42;
    (*(void (**)(unint64_t))(*(_QWORD *)v21 + 8))(v21);
    TScalerStrike::~TScalerStrike((TScalerStrike *)&v44);
  }
  if (*((_QWORD *)this + 42))
  {
    v24 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 432))(*((_QWORD *)this + 2));
    if (v24)
    {
      v25 = (const TSFNTFont *)v24;
      v36[0] = 0;
      v26 = (const __int16 *)(*(uint64_t (**)(TFPFont *, unint64_t *))(*(_QWORD *)this + 232))(this, v36);
      *(_QWORD *)&v52 = 0xAAAAAAAAAAAAAAAALL;
      *(_QWORD *)&v27 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v27 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v50 = v27;
      v51 = v27;
      v48 = v27;
      v49 = v27;
      v46 = v27;
      v47 = v27;
      v44 = v27;
      v45 = v27;
      TMVARTable::TMVARTable((TMVARTable *)&v44, v25, v36[0], v26);
      if (TsfntTable::operator BOOL((TsfntTable *)&v44))
      {
        v28 = TMVARTable::ValueForTag((TMVARTable *)&v44, 1986098019);
        if (v29)
          a2->var0 = (int)(round(*(double *)&v28) + (double)a2->var0);
        v30 = TMVARTable::ValueForTag((TMVARTable *)&v44, 1986294627);
        if (v31)
          *p_var1 = (int)(round(*(double *)&v30) + (double)*p_var1);
        v32 = TMVARTable::ValueForTag((TMVARTable *)&v44, 1986815856);
        if (v33)
          *p_var2 = (int)(round(*(double *)&v32) + (double)*p_var2);
      }
      *(_QWORD *)&v44 = &off_1E6176770;
      TDataReference::DucRefCount((TDataReference *)&v44);
    }
  }
  return 1;
}

void sub_1B09DD15C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  TMVARTable::~TMVARTable((TMVARTable *)&a35);
  _Unwind_Resume(a1);
}

uint64_t TFPFont::GetAverageGlyphHeight(TFPFont *this, unsigned int *a2)
{
  int v4;
  char v5;
  uint64_t v6;
  char v7;
  CGRect v9;

  v4 = 0;
  v5 = 0;
  v6 = 0;
  do
  {
    v7 = v5;
    v9.origin.x = (*(double (**)(TFPFont *, _QWORD))(*(_QWORD *)this + 568))(this, a2[v6]);
    v4 += (int)CGRectGetMaxY(v9);
    v5 = 1;
    v6 = 1;
  }
  while ((v7 & 1) == 0);
  return (v4 >> 1);
}

unint64_t TFPFont::GetCharactersWithGlyphNameForGlyph(TFPFont *this, unsigned int a2, unsigned __int16 *a3, unint64_t a4)
{
  __int128 v6;
  const char *v7;
  size_t v8;
  char *v9;
  __int128 v10;
  char *v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t Unicodes;
  uint64_t v16;
  unint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v22;
  size_t v23;
  int v24;
  char *v25;
  unint64_t v26;
  size_t v27;
  unsigned __int8 *v28;
  int v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  int v37;
  size_t v38;
  unsigned __int8 *v39;
  int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  char *__big[2];
  size_t __len[2];
  __int128 v51;
  __int128 v52;
  unsigned int v53[4];
  char *__dst[2];
  __int128 v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v6 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v51 = v6;
  v52 = v6;
  *(_OWORD *)__big = v6;
  *(_OWORD *)__len = v6;
  (*(void (**)(char **__return_ptr))(*(_QWORD *)this + 336))(__big);
  v7 = __big[1];
  if (!__big[1])
  {
    if (!*((_QWORD *)&v51 + 1))
      goto LABEL_68;
    v47 = *(_QWORD *)(*((_QWORD *)&v51 + 1) + 8);
    if (!v47)
      goto LABEL_68;
    v7 = (const char *)(v47 + v52);
  }
  v8 = __len[0];
  v9 = strnstr(v7, ".", __len[0]);
  if (v9)
    v8 = v9 - v7;
  if (v8)
  {
    *(_QWORD *)&v10 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v56 = v10;
    v57 = v10;
    *(_OWORD *)__dst = v10;
    v55 = v10;
    LOBYTE(v53[0]) = 0;
    std::vector<char,TInlineBufferAllocator<char,30ul>>::vector((uint64_t)__dst, v8 + 1, v53);
    v11 = __dst[0];
    strncpy(__dst[0], v7, v8);
    if (!v11)
    {
      v22 = 0;
      goto LABEL_72;
    }
    v12 = 0;
    while (1)
    {
      v13 = strchr(v11, 95);
      v14 = v13;
      if (v13)
        *v13 = 0;
      *(_OWORD *)v53 = xmmword_1B0AABBE0;
      if (GetLatinEncodingTaxonomy(void)::once != -1)
        dispatch_once(&GetLatinEncodingTaxonomy(void)::once, &__block_literal_global_4633);
      Unicodes = TGlyphNameToUnicodeTaxisLookup::GetUnicodes((const char ***)GetLatinEncodingTaxonomy(void)::gGlyphNameToUnicodeDict, v11, (unsigned int (*)[4])v53);
      if (!Unicodes)
      {
        v23 = strlen(v11);
        if (v23 < 7)
        {
LABEL_44:
          if (v23 >= 5)
            goto LABEL_45;
        }
        else
        {
          v24 = strncmp(v11, "uni", 3uLL);
          if (v23 <= 0x7F && !v24)
          {
            v25 = v11 + 3;
            v26 = v23 - 3;
            v27 = v23 - 3;
            v28 = (unsigned __int8 *)(v11 + 3);
            do
            {
              v29 = *v28;
              v30 = v29 - 48;
              v31 = v29 - 65;
              if (v30 >= 0xA && v31 >= 6)
                goto LABEL_44;
              ++v28;
              --v27;
            }
            while (v27);
            if (a4 > v12)
            {
              while (1)
              {
                v33 = 0;
                v34 = 0;
                do
                {
                  v35 = v33;
                  if (v26 == v33)
                    goto LABEL_39;
                  v36 = v25[v33];
                  v37 = 16 * v34 + (char)v36 - 55;
                  v34 = v36 + 16 * v34 - 48;
                  if ((v36 - 48) > 9)
                    v34 = v37;
                  v33 = v35 + 1;
                }
                while (v35 != 3);
                ++v25;
LABEL_39:
                if ((unsigned __int16)((unsigned __int16)v34 >> 11) >= 0x1Bu
                  && (unsigned __int16)v34 - 57344 >= 0x102000)
                {
                  break;
                }
                v26 += ~v35;
                v22 = v12 + 1;
                a3[v12] = v34;
                if (v26 >= 4)
                {
                  v25 += 3;
                  ++v12;
                  if (v22 < a4)
                    continue;
                }
                goto LABEL_62;
              }
            }
LABEL_55:
            v22 = v12;
LABEL_62:
            v12 = v22;
            goto LABEL_63;
          }
LABEL_45:
          if (v23 <= 7 && *v11 == 117)
          {
            v38 = v23 - 1;
            v39 = (unsigned __int8 *)(v11 + 1);
            do
            {
              v40 = *v39;
              v41 = v40 - 48;
              v42 = v40 - 65;
              if (v41 >= 0xA && v42 >= 6)
                goto LABEL_71;
              ++v39;
              --v38;
            }
            while (v38);
            v44 = strtoul_l(v11 + 1, 0, 16, 0);
            if (v44 >> 11 >= 0x1B && v44 - 57344 >= 0x102000)
              goto LABEL_55;
            if (!HIWORD(v44))
            {
              v45 = 1;
              v46 = v12;
              goto LABEL_60;
            }
            v46 = v12 + 1;
            if (v12 + 1 < a4 - v12)
            {
              a3[v12] = (v44 >> 10) - 10304;
              v45 = 2;
              LOWORD(v44) = v44 & 0x3FF | 0xDC00;
LABEL_60:
              v12 += v45;
              a3[v46] = v44;
            }
            v22 = v12;
            if (v12 != a4)
              goto LABEL_62;
            v12 = a4;
          }
        }
LABEL_71:
        v22 = v12;
        goto LABEL_72;
      }
      v16 = 0;
      v17 = a4 - v12;
      while (1)
      {
        v18 = v53[v16];
        if (HIWORD(v18))
          break;
        v19 = 1;
        v20 = v12;
LABEL_20:
        v12 += v19;
        a3[v20] = v18;
        if (Unicodes == ++v16)
          goto LABEL_21;
      }
      v20 = v12 + 1;
      if (HIWORD(v18) <= 0x10u && v20 < v17)
        break;
LABEL_21:
      v22 = v12;
      if (v12 == a4)
      {
        v22 = a4;
        goto LABEL_72;
      }
LABEL_63:
      v11 = v14 + 1;
      if (!v14)
      {
LABEL_72:
        *(_QWORD *)v53 = __dst;
        std::vector<char,TInlineBufferAllocator<char,30ul>>::__destroy_vector::operator()[abi:fe180100]((void ***)v53);
        goto LABEL_73;
      }
    }
    a3[v12] = (v18 >> 10) - 10304;
    v19 = 2;
    LOWORD(v18) = v18 & 0x3FF | 0xDC00;
    goto LABEL_20;
  }
LABEL_68:
  v22 = 0;
LABEL_73:
  TStringRef::~TStringRef((void **)__big);
  return v22;
}

void sub_1B09DD640(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void **a19, uint64_t a20,char a21)
{
  a19 = (void **)&a21;
  std::vector<char,TInlineBufferAllocator<char,30ul>>::__destroy_vector::operator()[abi:fe180100](&a19);
  TStringRef::~TStringRef(&a11);
  _Unwind_Resume(a1);
}

uint64_t FPFontGetVersion()
{
  return 50331648;
}

TFPInMemoryFont *FPFontCreateWithDataAndExtra(const __CFData *a1, const void *a2)
{
  TFont *BytePtr;
  CFIndex Length;
  _QWORD *v6;
  TFPInMemoryFont *result;
  TFPInMemoryFont *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD v11[3];

  if (!a1)
    return 0;
  memset(v11, 170, sizeof(v11));
  BytePtr = (TFont *)CFDataGetBytePtr(a1);
  Length = CFDataGetLength(a1);
  TFont::CreateFontEntitiesForDataStream(BytePtr, Length, a2, (uint64_t)v11);
  v6 = (_QWORD *)v11[0];
  if (v11[0] == v11[1])
  {
    v8 = 0;
    if (v11[0])
    {
LABEL_13:
      v11[1] = v6;
      operator delete(v6);
    }
    return v8;
  }
  result = (TFPInMemoryFont *)operator new();
  if (v11[1] != v11[0])
  {
    v8 = result;
    TFPInMemoryFont::TFPInMemoryFont(result, *(const TFont **)v11[0], a1, (const __CFData *)a2);
    (*(void (**)(TFPInMemoryFont *))(*(_QWORD *)v8 + 24))(v8);
    v6 = (_QWORD *)v11[0];
    v9 = (_QWORD *)v11[1];
    if (v11[0] != v11[1])
    {
      do
      {
        v10 = *v6;
        if (!(*(unsigned int (**)(_QWORD))(*(_QWORD *)*v6 + 32))(*v6))
          (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
        ++v6;
      }
      while (v6 != v9);
      v6 = (_QWORD *)v11[0];
    }
    if (!v6)
      return v8;
    goto LABEL_13;
  }
  __break(1u);
  return result;
}

void sub_1B09DD7AC(void *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E0CD38](v1, 0x10F1C40DAECAF6FLL);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B09DD728);
}

void sub_1B09DD7E4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B09DD790);
}

TFPInMemoryFont *FPFontCreateWithData(const __CFData *a1)
{
  return FPFontCreateWithDataAndExtra(a1, 0);
}

__darwin_time_t GetContentModificationTime(const char *a1)
{
  stat v3;

  memset(&v3, 0, sizeof(v3));
  if (!strncmp(a1, "/System/", 8uLL))
    return 0;
  stat(a1, &v3);
  return v3.st_ctimespec.tv_sec;
}

uint64_t AppendVariationFonts(__CFArray *a1, const char *a2)
{
  const __CFArray *v3;
  CFIndex v4;
  _QWORD *ValueAtIndex;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _BYTE *v10;
  void *v11;
  __int128 v12;
  CFIndex i;
  const void *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  __int128 v19;
  void *v20;
  int64_t v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  int VariationPrefix;
  int v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  double *v31;
  unint64_t v32;
  unint64_t v33;
  double *v34;
  unint64_t v35;
  int *v36;
  int v37;
  int v38;
  double v39;
  unsigned __int16 *v40;
  uint64_t v41;
  const char **v42;
  int v43;
  __int128 v44;
  char *v45;
  size_t v46;
  uint64_t v47;
  int v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  uint64_t v53;
  double *v54;
  unint64_t v55;
  unint64_t v56;
  double *v57;
  unint64_t v58;
  int *v59;
  int v60;
  int v61;
  double v62;
  unsigned __int16 *v63;
  uint64_t v64;
  const void *v65;
  CFIndex v66;
  CFIndex v67;
  CFIndex v68;
  CFIndex v69;
  __int128 v70;
  __int128 v71;
  CFIndex v72;
  _QWORD **v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _BOOL4 v77;
  uint64_t v78;
  uint64_t v79;
  const __CFAllocator *allocator;
  __CFArray *theArray;
  const char *v83;
  char v84;
  CFIndex Count;
  unint64_t v86;
  CFIndex range;
  __CFSet *range_8;
  void **p_callBacks;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  CFMutableArrayRef Mutable;
  uint64_t v94;
  _QWORD *v95;
  char *v96;
  unint64_t v97;
  uint64_t v98;
  void *__p;
  char *v100;
  char *v101;
  unint64_t v102;
  char v103;
  _OWORD v104[2];
  unint64_t v105;
  void *v106[3];
  void *v107;
  _BYTE *v108;
  uint64_t v109;
  __int128 callBacks;
  _BYTE callBacks_16[80];
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  char *v123;
  char *v124;
  uint64_t v125;
  _OWORD v126[4];
  _OWORD *v127;
  _OWORD v128[6];
  uint64_t v129;
  CFRange v130;
  CFRange v131;

  v3 = a1;
  v129 = *MEMORY[0x1E0C80C00];
  Count = CFArrayGetCount(a1);
  if (Count < 1)
  {
    v84 = 0;
    return v84 & 1;
  }
  v84 = 0;
  range_8 = 0;
  v4 = 0;
  allocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v83 = a2;
  theArray = v3;
  while (1)
  {
    range = v4;
    ValueAtIndex = CFArrayGetValueAtIndex(v3, v4);
    v6 = (uint64_t)ValueAtIndex;
    v8 = ValueAtIndex[32];
    v7 = ValueAtIndex[33];
    if (v8 && v7 != 0)
      break;
LABEL_120:
    if (a2 && (v84 & 1) != 0)
      goto LABEL_127;
LABEL_122:
    if (++v4 >= Count)
      goto LABEL_128;
  }
  v107 = 0;
  v108 = 0;
  v109 = 0;
  memset(v106, 170, sizeof(v106));
  (*(void (**)(void **__return_ptr, _QWORD, unint64_t, void **))(*(_QWORD *)ValueAtIndex[2] + 400))(v106, ValueAtIndex[2], v8, &v107);
  v11 = v106[0];
  v10 = v106[1];
  if (v106[0] == v106[1])
  {
    v48 = 0;
    v4 = range;
    if (v106[0])
    {
LABEL_116:
      v106[1] = v11;
      operator delete(v11);
    }
LABEL_117:
    if (v107)
    {
      v108 = v107;
      operator delete(v107);
    }
    if (v48)
      goto LABEL_122;
    goto LABEL_120;
  }
  *(_QWORD *)&v12 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v104[1] = v12;
  v104[0] = v12;
  v105 = 0xAAAAAAAAFFFFFFFFLL;
  (*(void (**)(_OWORD *__return_ptr, _QWORD, void **))(**(_QWORD **)(v6 + 16) + 96))(v104, *(_QWORD *)(v6 + 16), v106);
  if ((unint64_t)a2 | (unint64_t)range_8)
    goto LABEL_15;
  callBacks = xmmword_1E61C95B8;
  *(_OWORD *)callBacks_16 = unk_1E61C95C8;
  *(_OWORD *)&callBacks_16[16] = xmmword_1E61C95D8;
  range_8 = CFSetCreateMutable(allocator, 0, (const CFSetCallBacks *)&callBacks);
  if (!range_8)
  {
    std::__hash_table<std::__hash_value_type<unsigned short,TFontNameString>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,TFontNameString>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,TFontNameString>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,TFontNameString>>>::~__hash_table((uint64_t)v104);
    range_8 = 0;
    v48 = 4;
LABEL_115:
    v4 = range;
    v11 = v106[0];
    if (v106[0])
      goto LABEL_116;
    goto LABEL_117;
  }
  if (Count >= 1)
  {
    for (i = 0; i != Count; ++i)
    {
      v14 = CFArrayGetValueAtIndex(v3, i);
      CFSetAddValue(range_8, v14);
    }
  }
LABEL_15:
  v15 = 0;
  v16 = (v10 - (_BYTE *)v11) >> 3;
  while (1)
  {
    v17 = v7 + v15;
    if (*(_DWORD *)(v7 + v15 + 8) == 1869640570)
      break;
    v15 += 40;
    if (40 * v8 == v15)
    {
      v17 = v7 + 40 * v8;
      break;
    }
  }
  if (v17 == v7 + 40 * v8)
    v18 = 0;
  else
    v18 = v17;
  *(_QWORD *)&v19 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v19 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v128[4] = v19;
  v128[5] = v19;
  v128[2] = v19;
  v128[3] = v19;
  v128[0] = v19;
  v128[1] = v19;
  callBacks = 0uLL;
  std::vector<CGFontVariation,TInlineBufferAllocator<CGFontVariation,4ul>>::vector(v128, v8, &callBacks);
  v103 = 0;
  v102 = 0xAAAAAAAAAAAAAAAALL;
  v95 = v128;
  v96 = &v103;
  v97 = v8;
  v98 = v7;
  v100 = 0;
  v101 = 0;
  __p = 0;
  v20 = v107;
  v21 = v108 - (_BYTE *)v107;
  if (v108 != v107)
  {
    if (v21 < 0)
      std::vector<char,TInlineBufferAllocator<char,1024ul>>::__throw_length_error[abi:fe180100]();
    v22 = (char *)std::__allocate_at_least[abi:fe180100]<std::allocator<TVariationInstance>>((uint64_t)&v101, v21 >> 3);
    __p = v22;
    v100 = v22;
    v101 = &v22[8 * v23];
    memmove(v22, v20, v21);
    v100 = &v22[8 * (v21 >> 3)];
  }
  v102 = v18;
  *(_QWORD *)&v24 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v24 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v126[2] = v24;
  v126[3] = v24;
  v126[0] = v24;
  v126[1] = v24;
  v123 = 0;
  v124 = 0;
  v125 = 0;
  v127 = v126;
  VariationPrefix = TFPFont::GetVariationPrefix(v6, &v123);
  a2 = v83;
  if (v83)
  {
    v26 = VariationPrefix;
    v27 = 0;
    while (1)
    {
      v28 = v97;
      if (v97)
        break;
LABEL_37:
      v40 = (unsigned __int16 *)v106[0];
      if (v27 >= ((char *)v106[1] - (char *)v106[0]) >> 3)
        goto LABEL_126;
      v41 = *(_QWORD *)&v128[0];
      v42 = (const char **)operator new();
      TFPFont::TFPFont((uint64_t)v42, v6, v8, v41, v27, v40[4 * v27 + 2], v104);
      v43 = 1;
      if (!strcmp(a2, v42[17]))
      {
        v3 = theArray;
        CFArrayAppendValue(theArray, v42);
LABEL_85:
        v84 = 1;
        goto LABEL_87;
      }
      if (v26)
      {
        *(_QWORD *)&v44 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v44 + 1) = 0xAAAAAAAAAAAAAAAALL;
        *(_OWORD *)&callBacks_16[40] = v44;
        *(_OWORD *)&callBacks_16[56] = v44;
        *(_OWORD *)&callBacks_16[8] = v44;
        *(_OWORD *)&callBacks_16[24] = v44;
        v45 = v123;
        callBacks = 0uLL;
        *(_QWORD *)callBacks_16 = 0;
        *(_QWORD *)&callBacks_16[72] = &callBacks_16[8];
        v90 = 0xAAAAAAAAAAAAAA00;
        p_callBacks = (void **)&callBacks;
        v46 = v124 - v123;
        if (v124 != v123)
        {
          std::vector<char,TInlineBufferAllocator<char,64ul>>::__vallocate[abi:fe180100](&callBacks, v124 - v123);
          v47 = *((_QWORD *)&callBacks + 1);
          memmove(*((void **)&callBacks + 1), v45, v46);
          *((_QWORD *)&callBacks + 1) = v47 + v46;
          a2 = v83;
        }
        if (v27 >= ((char *)v106[1] - (char *)v106[0]) >> 3)
          goto LABEL_126;
        v86 = v86 & 0xFFFFFFFF00000000 | *((unsigned __int16 *)v106[0] + 4 * v27 + 1) | 0x10000;
        if (TFPFont::AppendVariationPostScriptName((uint64_t)v42, (uint64_t)&callBacks, *((unsigned __int16 *)v106[0] + 4 * v27 + 1) | 0x10000u)&& !strcmp(a2, (const char *)callBacks))
        {
          if (*(_QWORD *)(v6 + 328) != -1 || !EqualPostScriptNameAndVariations((const void *)v6, v42))
          {
            v3 = theArray;
            CFArrayAppendValue(theArray, v42);
            p_callBacks = (void **)&callBacks;
            std::vector<CGFontVariation,TInlineBufferAllocator<CGFontVariation,4ul>>::__destroy_vector::operator()[abi:fe180100](&p_callBacks);
            goto LABEL_85;
          }
          *(_QWORD *)(v6 + 328) = v27;
          CFArrayAppendValue(theArray, (const void *)v6);
          p_callBacks = (void **)&callBacks;
          std::vector<CGFontVariation,TInlineBufferAllocator<CGFontVariation,4ul>>::__destroy_vector::operator()[abi:fe180100](&p_callBacks);
          v43 = 0;
          v84 = 1;
        }
        else
        {
          p_callBacks = (void **)&callBacks;
          std::vector<CGFontVariation,TInlineBufferAllocator<CGFontVariation,4ul>>::__destroy_vector::operator()[abi:fe180100](&p_callBacks);
          v43 = 1;
        }
      }
      (*((void (**)(const char **))*v42 + 1))(v42);
      if (!v43)
      {
        v3 = theArray;
        goto LABEL_87;
      }
      if (++v27 >= v16)
      {
        v3 = theArray;
        goto LABEL_87;
      }
    }
    v29 = v96;
    v30 = (uint64_t)(v95[1] - *v95) >> 4;
    v31 = (double *)__p;
    v32 = v102;
    v33 = (v100 - (_BYTE *)__p) >> 3;
    v34 = (double *)(*v95 + 8);
    v35 = v97 * v27;
    v36 = (int *)(v98 + 8);
    while (v30)
    {
      v38 = *v36;
      v36 += 10;
      v37 = v38;
      *((_DWORD *)v34 - 2) = v38;
      if (v33 <= v35)
        break;
      v39 = trunc(v31[v35] * 10000.0) / 10000.0;
      *v34 = v39;
      if (!*v29 && v37 == 1869640570 && v32 && v39 != *(double *)(v32 + 32))
        *v29 = 1;
      v34 += 2;
      ++v35;
      --v30;
      if (!--v28)
        goto LABEL_37;
    }
  }
  else
  {
    Mutable = (CFMutableArrayRef)0xAAAAAAAAAAAAAAAALL;
    v94 = 0;
    v49 = 0;
    Mutable = CFArrayCreateMutable(allocator, v16, &TFPFontImpl::GetArrayCallBacks(void)::sCFArrayCallBacks);
    if (v16 <= 1)
      v50 = 1;
    else
      v50 = v16;
    while (1)
    {
      v51 = v97;
      if (v97)
        break;
LABEL_67:
      v63 = (unsigned __int16 *)v106[0];
      if (v49 >= ((char *)v106[1] - (char *)v106[0]) >> 3)
        goto LABEL_126;
      v64 = *(_QWORD *)&v128[0];
      v65 = (const void *)operator new();
      TFPFont::TFPFont((uint64_t)v65, v6, v8, v64, v49, v63[4 * v49 + 2], v104);
      if (CFSetContainsValue(range_8, v65))
      {
        if (!v94 && *(_QWORD *)(v6 + 328) == -1 && EqualPostScriptNameAndVariations((const void *)v6, v65))
        {
          *(_QWORD *)(v6 + 328) = v49;
          CFArrayAppendValue(Mutable, (const void *)v6);
          RetainedFPFontRef::Retain(&v94, v6);
        }
        (*(void (**)(const void *))(*(_QWORD *)v65 + 8))(v65);
      }
      else
      {
        CFSetAddValue(range_8, v65);
        CFArrayAppendValue(Mutable, v65);
      }
      if (++v49 == v50)
      {
        if (Mutable)
        {
          v66 = CFArrayGetCount(Mutable);
          v67 = v66;
          if (v66)
          {
            v68 = v94 != 0;
            v69 = v66 - v68;
            if (v66 > v68)
            {
              *(_QWORD *)&v70 = 0xAAAAAAAAAAAAAAAALL;
              *((_QWORD *)&v70 + 1) = 0xAAAAAAAAAAAAAAAALL;
              v121 = v70;
              v122 = v70;
              v119 = v70;
              v120 = v70;
              v117 = v70;
              v118 = v70;
              v115 = v70;
              v116 = v70;
              v113 = v70;
              v114 = v70;
              *(_OWORD *)&callBacks_16[64] = v70;
              v112 = v70;
              *(_OWORD *)&callBacks_16[32] = v70;
              *(_OWORD *)&callBacks_16[48] = v70;
              *(_OWORD *)callBacks_16 = v70;
              *(_OWORD *)&callBacks_16[16] = v70;
              callBacks = v70;
              p_callBacks = 0;
              std::vector<void const*,TInlineBufferAllocator<void const*,30ul>>::vector(&callBacks, v66, &p_callBacks);
              if (Mutable)
              {
                v130.location = 0;
                v130.length = v67;
                CFArrayGetValues(Mutable, v130, (const void **)callBacks);
              }
              v131.location = range;
              v131.length = v68;
              CFArrayReplaceValues(v3, v131, (const void **)callBacks, v67);
              range += v69;
              Count += v69;
              p_callBacks = (void **)&callBacks;
              std::vector<double,TInlineBufferAllocator<double,30ul>>::__destroy_vector::operator()[abi:fe180100](&p_callBacks);
              v84 = 1;
            }
          }
        }
        TCFArray<void const*>::~TCFArray((const void **)&Mutable);
        RetainedFPFontRef::~RetainedFPFontRef((RetainedFPFontRef *)&v94);
LABEL_87:
        if (v103)
          *(_BYTE *)(v6 + 368) = 1;
        if (!((range < 1) | v84 & 1) && !*(_QWORD *)(v6 + 336))
        {
          *(_QWORD *)&v71 = 0xAAAAAAAAAAAAAAAALL;
          *((_QWORD *)&v71 + 1) = 0xAAAAAAAAAAAAAAAALL;
          callBacks = v71;
          *(_OWORD *)callBacks_16 = v71;
          (*(void (**)(__int128 *__return_ptr, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(v6 + 16) + 48))(&callBacks, *(_QWORD *)(v6 + 16), 0, 0);
          v72 = 0;
          while (1)
          {
            v73 = (_QWORD **)CFArrayGetValueAtIndex(v3, v72);
            v74 = (uint64_t)v73;
            if (!v73[42])
            {
              (*(void (**)(void ***__return_ptr, _QWORD *, _QWORD, _QWORD))(*v73[2] + 48))(&p_callBacks, v73[2], 0, 0);
              if (v92 - v91 == *(_QWORD *)&callBacks_16[8] - *(_QWORD *)callBacks_16)
              {
                if (v90)
                {
                  v75 = *(_QWORD *)(v90 + 8);
                  v76 = v75 + v91;
                  if (!v75)
                    v76 = 0;
                }
                else
                {
                  v76 = 0;
                }
                if (*((_QWORD *)&callBacks + 1))
                {
                  v78 = *(_QWORD *)(*((_QWORD *)&callBacks + 1) + 8);
                  v79 = v78 + *(_QWORD *)callBacks_16;
                  if (!v78)
                    v79 = 0;
                }
                else
                {
                  v79 = 0;
                }
                v77 = v76 == v79;
              }
              else
              {
                v77 = 0;
              }
              p_callBacks = (void **)&off_1E6176770;
              TDataReference::DucRefCount((TDataReference *)&p_callBacks);
              if (v77)
                break;
            }
            if (range == ++v72)
              goto LABEL_111;
          }
          RetainedFPFontRef::Retain((_QWORD *)(v6 + 336), v74);
LABEL_111:
          *(_QWORD *)&callBacks = &off_1E6176770;
          TDataReference::DucRefCount((TDataReference *)&callBacks);
        }
        *(_QWORD *)&callBacks = &v123;
        std::vector<CGFontVariation,TInlineBufferAllocator<CGFontVariation,4ul>>::__destroy_vector::operator()[abi:fe180100]((void ***)&callBacks);
        if (__p)
        {
          v100 = (char *)__p;
          operator delete(__p);
        }
        *(_QWORD *)&callBacks = v128;
        std::vector<CGFontVariation,TInlineBufferAllocator<CGFontVariation,4ul>>::__destroy_vector::operator()[abi:fe180100]((void ***)&callBacks);
        std::__hash_table<std::__hash_value_type<unsigned short,TFontNameString>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,TFontNameString>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,TFontNameString>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,TFontNameString>>>::~__hash_table((uint64_t)v104);
        v48 = 0;
        goto LABEL_115;
      }
    }
    v52 = v96;
    v53 = (uint64_t)(v95[1] - *v95) >> 4;
    v54 = (double *)__p;
    v55 = v102;
    v56 = (v100 - (_BYTE *)__p) >> 3;
    v57 = (double *)(*v95 + 8);
    v58 = v97 * v49;
    v59 = (int *)(v98 + 8);
    while (v53)
    {
      v61 = *v59;
      v59 += 10;
      v60 = v61;
      *((_DWORD *)v57 - 2) = v61;
      if (v56 <= v58)
        break;
      v62 = trunc(v54[v58] * 10000.0) / 10000.0;
      *v57 = v62;
      if (!*v52 && v60 == 1869640570 && v55 && v62 != *(double *)(v55 + 32))
        *v52 = 1;
      v57 += 2;
      ++v58;
      --v53;
      if (!--v51)
        goto LABEL_67;
    }
  }
LABEL_126:
  __break(1u);
LABEL_127:
  v84 = 1;
LABEL_128:
  if (range_8)
    CFRelease(range_8);
  return v84 & 1;
}

void sub_1B09DE4F0(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

uint64_t FPFontCreateWithPathAndName(const __CFString *a1, const __CFString *a2)
{
  CFIndex v4;
  char *v5;
  __int128 v6;
  const char *CString;
  __int128 v8;
  const char *ContentModificationTime;
  __darwin_time_t v10;
  __darwin_time_t v11;
  const TFont **v12;
  uint64_t ValueAtIndex;
  const TFont *v14;
  __int128 v15;
  const char *v16;
  int v17;
  uint64_t (*v18)(void);
  uint64_t v19;
  TSFNTFont *v20;
  unint64_t v21;
  void *v22;
  int64_t v23;
  unint64_t v24;
  __int128 v25;
  _WORD *v26;
  _WORD *v27;
  __int16 v28;
  char *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  char *v39;
  __int16 v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  double *v44;
  void *v45;
  const unsigned __int16 *v46;
  _BYTE *v47;
  char *v48;
  unsigned int v49;
  unsigned int v50;
  _QWORD *v51;
  uint64_t PostscriptName;
  __int16 v53;
  uint64_t v54;
  uint64_t v55;
  unsigned __int16 *v56;
  double *v57;
  uint64_t v58;
  double v59;
  unint64_t v60;
  int64_t v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  unint64_t v67;
  int64_t v68;
  double v69;
  double v70;
  double v71;
  double v72;
  __int128 v73;
  _DWORD *v74;
  uint64_t v75;
  int64_t v76;
  unint64_t v77;
  double *v78;
  unint64_t v79;
  double *v80;
  unint64_t v81;
  char *v82;
  void *v83;
  int64_t v84;
  unint64_t v85;
  unint64_t v86;
  char *v87;
  void **v88;
  void **v89;
  void **v90;
  void *v91;
  void **v92;
  void **v94;
  void **v95;
  const __CFAllocator *v96;
  _QWORD *v97;
  __CFArray *Mutable;
  const __CFArray *v99;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  __darwin_time_t v104;
  const __CFString *v105;
  char *__s1;
  const TFont **v107;
  __int128 v108;
  void *v109;
  _BYTE *v110;
  uint64_t v111;
  void *v112[3];
  void *__p[3];
  void *v114[3];
  _QWORD v115[5];
  char v116;
  void *v117[2];
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  void *v123;
  char *v124;
  char *v125;
  _OWORD v126[4];
  _OWORD *v127;
  _OWORD v128[4];
  void *v129;
  char *__s2;
  uint64_t v131;
  char **v132;
  void *v133;
  unint64_t v134;
  _OWORD v135[15];
  void **v136;
  int64x2_t v137;
  uint64_t v138;
  _OWORD v139[2];
  _OWORD *v140;
  char *__b[135];
  timespec v142;
  timespec v143;

  __b[132] = *(char **)MEMORY[0x1E0C80C00];
  if (!a1 || CFStringGetLength(a1) < 1)
    return 0;
  v4 = CFStringGetMaximumSizeOfFileSystemRepresentation(a1) + 1;
  memset(__b, 170, 0x420uLL);
  LOBYTE(v132) = 0;
  std::vector<char,TInlineBufferAllocator<char,1024ul>>::vector(__b, v4, &v132);
  v5 = __b[0];
  if (!CFStringGetFileSystemRepresentation(a1, __b[0], v4))
  {
    ValueAtIndex = 0;
    goto LABEL_170;
  }
  *(_QWORD *)&v6 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v139[1] = v6;
  v139[0] = v6;
  v137 = 0uLL;
  v138 = 0;
  v140 = v139;
  CString = GetCStringPtr<TInlineVector<char,30ul>>(a2, &v137, 0);
  *(_QWORD *)&v8 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v135[14] = v8;
  v135[13] = v8;
  v135[12] = v8;
  v135[11] = v8;
  v135[10] = v8;
  v135[9] = v8;
  v135[8] = v8;
  v135[7] = v8;
  v135[6] = v8;
  v135[5] = v8;
  v135[4] = v8;
  v135[3] = v8;
  v135[2] = v8;
  v135[1] = v8;
  v135[0] = v8;
  v132 = 0;
  v133 = 0;
  v134 = 0;
  v136 = (void **)v135;
  if (!CString)
  {
    ValueAtIndex = 0;
    goto LABEL_154;
  }
  ContentModificationTime = (const char *)GetContentModificationTime(v5);
  v11 = v10;
  memset(v114, 170, sizeof(v114));
  v142.tv_sec = v10;
  v142.tv_nsec = 1;
  TFont::CreateFontEntitiesForFile((TFont *)v5, ContentModificationTime, v142, 0, (void (***)(TSFNTData *__hidden))v114);
  v12 = (const TFont **)v114[0];
  v107 = (const TFont **)v114[1];
  if (v114[0] == v114[1])
  {
    ValueAtIndex = 0;
    if (!v114[0])
      goto LABEL_154;
    goto LABEL_153;
  }
  v103 = v11;
  v104 = (__darwin_time_t)ContentModificationTime;
  v105 = a1;
  __s1 = (char *)CString;
  ValueAtIndex = 0;
  v102 = 0;
  do
  {
    v14 = *v12;
    if (ValueAtIndex)
      goto LABEL_8;
    ValueAtIndex = operator new();
    v143.tv_sec = v104;
    v143.tv_nsec = v103;
    TFPFont::TFPFont((TFPFont *)ValueAtIndex, v14, v105, v143);
    *(_QWORD *)&v15 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v15 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v128[2] = v15;
    v128[3] = v15;
    v128[0] = v15;
    v128[1] = v15;
    v16 = *(const char **)(ValueAtIndex + 136);
    v129 = 0;
    __s2 = (char *)v128;
    v131 = 0;
    TPostScriptNameString::assign((TPostScriptNameString *)v128, v16);
    v17 = strcmp(__s1, __s2);
    v18 = *(uint64_t (**)(void))(**(_QWORD **)(ValueAtIndex + 16) + 432);
    if (!v17)
    {
      v42 = v18();
      v43 = v42;
      if (v42)
      {
        v123 = 0;
        v124 = 0;
        v125 = 0;
        if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v42 + 392))(v42, &v123))
        {
          v117[0] = 0;
          v117[1] = 0;
          *(_QWORD *)&v118 = 0;
          memset(__p, 170, sizeof(__p));
          (*(void (**)(void **__return_ptr, uint64_t, _QWORD, void **))(*(_QWORD *)v43 + 400))(__p, v43, *(_QWORD *)(ValueAtIndex + 256), v117);
          v44 = (double *)v123;
          if (v123 != v124)
          {
            while (*(_DWORD *)v44 != 1869640570)
            {
              v44 += 4;
              if (v44 == (double *)v124)
              {
                v45 = __p[0];
                goto LABEL_90;
              }
            }
          }
          v45 = __p[0];
          if (v44 != (double *)v124 && __p[1] != __p[0])
          {
            v59 = v44[3];
            v60 = ((char *)v44 - (_BYTE *)v123) >> 5;
            v61 = ((char *)__p[1] - (char *)__p[0]) >> 3;
            v62 = fabs(v59);
            while (1)
            {
              if (((char *)v117[1] - (char *)v117[0]) >> 3 <= v60)
                goto LABEL_172;
              v63 = *((double *)v117[0] + v60);
              v64 = vabdd_f64(v59, v63);
              if (v64 >= 0.0001)
              {
                v65 = fabs(v63);
                if (v62 >= v65)
                  v65 = v62;
                if (v64 / v65 >= 0.0001)
                  break;
              }
              v60 += (v124 - (_BYTE *)v123) >> 5;
              if (!--v61)
                goto LABEL_90;
            }
            *(_BYTE *)(ValueAtIndex + 368) = 1;
          }
LABEL_90:
          if (v45)
          {
            __p[1] = v45;
            operator delete(v45);
          }
          if (v117[0])
          {
            v117[1] = v117[0];
            operator delete(v117[0]);
          }
        }
        if (v123)
        {
          v124 = (char *)v123;
          operator delete(v123);
        }
      }
      (*(void (**)(uint64_t))(*(_QWORD *)ValueAtIndex + 24))(ValueAtIndex);
      free(v129);
      goto LABEL_8;
    }
    v19 = v18();
    v20 = (TSFNTFont *)v19;
    if (!v19)
    {
      v51 = (_QWORD *)ValueAtIndex;
      goto LABEL_114;
    }
    v21 = *(_QWORD *)(ValueAtIndex + 256);
    memset(__p, 0, sizeof(__p));
    memset(v112, 170, sizeof(v112));
    (*(void (**)(void **__return_ptr, uint64_t, unint64_t, void **))(*(_QWORD *)v19 + 400))(v112, v19, v21, __p);
    v22 = v112[1];
    v23 = (char *)v112[1] - (char *)v112[0];
    if (v112[1] == v112[0])
    {
      v51 = (_QWORD *)ValueAtIndex;
      ValueAtIndex = 0;
      if (v112[1])
        goto LABEL_108;
    }
    else
    {
      v101 = v21;
      v24 = v23 >> 3;
      *(_QWORD *)&v25 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v25 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v126[2] = v25;
      v126[3] = v25;
      v126[0] = v25;
      v126[1] = v25;
      v123 = 0;
      v124 = 0;
      v125 = 0;
      v127 = v126;
      std::vector<unsigned short,TInlineBufferAllocator<unsigned short,30ul>>::reserve((char **)&v123, v23 >> 3);
      v26 = v112[0];
      v27 = v112[1];
      while (v26 != v27)
      {
        if (v26[2])
        {
          v28 = v26[2] - 1;
          v29 = v124;
          if (v124 >= v125)
          {
            v31 = (char *)v123;
            v32 = v124 - (_BYTE *)v123;
            if (v124 - (_BYTE *)v123 <= -3)
              std::vector<char,TInlineBufferAllocator<char,1024ul>>::__throw_length_error[abi:fe180100]();
            v33 = v32 >> 1;
            if (v125 - (_BYTE *)v123 <= (unint64_t)((v32 >> 1) + 1))
              v34 = v33 + 1;
            else
              v34 = v125 - (_BYTE *)v123;
            if ((unint64_t)(v125 - (_BYTE *)v123) >= 0x7FFFFFFFFFFFFFFELL)
              v35 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v35 = v34;
            v115[4] = v126;
            if (v35)
            {
              v36 = (char *)TInlineBufferAllocator<unsigned short,30ul>::allocate((uint64_t)v126, v35);
              v31 = (char *)v123;
              v29 = v124;
            }
            else
            {
              v36 = 0;
            }
            v37 = &v36[2 * v33];
            *(_WORD *)v37 = v28;
            if (v29 == v31)
            {
              v39 = &v36[2 * v33];
            }
            else
            {
              v38 = v29;
              v39 = &v36[2 * v33];
              do
              {
                v40 = *((_WORD *)v38 - 1);
                v38 -= 2;
                *((_WORD *)v39 - 1) = v40;
                v39 -= 2;
              }
              while (v38 != v31);
            }
            v30 = v37 + 2;
            v123 = v39;
            v124 = v37 + 2;
            v41 = v125;
            v125 = &v36[2 * v35];
            v115[2] = v29;
            v115[3] = v41;
            v115[0] = v31;
            v115[1] = v31;
            std::__split_buffer<unsigned short,TInlineBufferAllocator<unsigned short,30ul> &>::~__split_buffer((uint64_t)v115);
          }
          else
          {
            *(_WORD *)v124 = v28;
            v30 = v29 + 2;
          }
          v124 = v30;
        }
        v26 += 4;
      }
      v46 = (const unsigned __int16 *)v123;
      v47 = v124;
      if (v123 == v124)
      {
        v47 = v123;
      }
      else
      {
        v48 = (char *)v123 + 2;
        while (v48 != v124)
        {
          v49 = *(unsigned __int16 *)v48;
          v50 = *((unsigned __int16 *)v48 - 1);
          v48 += 2;
          if (v49 < v50)
          {
            v116 = -86;
            std::__sort<std::__less<unsigned short,unsigned short> &,unsigned short *>();
            v46 = (const unsigned __int16 *)v123;
            v47 = v124;
            break;
          }
        }
      }
      PostscriptName = TSFNTFont::FindPostscriptName(v20, v46, (v47 - (_BYTE *)v46) >> 1, __s1);
      v53 = PostscriptName;
      if ((PostscriptName & 0xFF0000) != 0)
      {
        v54 = 0;
        if (v24 <= 1)
          v55 = 1;
        else
          v55 = v24;
        v56 = (unsigned __int16 *)((char *)v112[0] + 4);
        do
        {
          if (((char *)v112[1] - (char *)v112[0]) >> 3 == v54)
            goto LABEL_172;
          if ((unsigned __int16)PostscriptName + 1 == *v56)
            goto LABEL_62;
          ++v54;
          v56 += 4;
        }
        while (v55 != v54);
        v54 = -1;
LABEL_62:
        v109 = 0;
        v110 = 0;
        v111 = 0;
        if ((*(unsigned int (**)(TSFNTFont *, void **))(*(_QWORD *)v20 + 392))(v20, &v109))
        {
          v57 = (double *)v109;
          if (v109 != v110)
          {
            while (*(_DWORD *)v57 != 1869640570)
            {
              v57 += 4;
              if (v57 == (double *)v110)
                goto LABEL_98;
            }
          }
          if (v57 != (double *)v110 && v112[1] != v112[0])
          {
            v66 = v57[3];
            v67 = ((char *)v57 - (_BYTE *)v109) >> 5;
            v68 = ((char *)v112[1] - (char *)v112[0]) >> 3;
            v69 = fabs(v66);
            while (1)
            {
              if (((char *)__p[1] - (char *)__p[0]) >> 3 <= v67)
                goto LABEL_172;
              v70 = *((double *)__p[0] + v67);
              v71 = vabdd_f64(v66, v70);
              if (v71 >= 0.0001)
              {
                v72 = fabs(v70);
                if (v69 >= v72)
                  v72 = v69;
                if (v71 / v72 >= 0.0001)
                  break;
              }
              v67 += (v110 - (_BYTE *)v109) >> 5;
              if (!--v68)
                goto LABEL_98;
            }
            *(_BYTE *)(ValueAtIndex + 368) = 1;
          }
LABEL_98:
          *(_QWORD *)&v73 = 0xAAAAAAAAAAAAAAAALL;
          *((_QWORD *)&v73 + 1) = 0xAAAAAAAAAAAAAAAALL;
          v121 = v73;
          v122 = v73;
          v119 = v73;
          v120 = v73;
          *(_OWORD *)v117 = v73;
          v118 = v73;
          v108 = 0uLL;
          std::vector<CGFontVariation,TInlineBufferAllocator<CGFontVariation,4ul>>::vector(v117, v101, &v108);
          if (v101)
          {
            v74 = v109;
            v75 = (v110 - (_BYTE *)v109) >> 5;
            v76 = ((char *)v117[1] - (char *)v117[0]) >> 4;
            v77 = v54 * v101;
            v78 = (double *)__p[0];
            v79 = ((char *)__p[1] - (char *)__p[0]) >> 3;
            v80 = (double *)((char *)v117[0] + 8);
            v81 = v101;
            while (v75)
            {
              if (!v76)
                break;
              *((_DWORD *)v80 - 2) = *v74;
              if (v79 <= v77)
                break;
              *v80 = trunc(v78[v77] * 10000.0) / 10000.0;
              v80 += 2;
              v74 += 8;
              ++v77;
              --v76;
              --v75;
              if (!--v81)
                goto LABEL_104;
            }
LABEL_172:
            __break(1u);
          }
LABEL_104:
          v58 = operator new();
          TFPFont::TFPFont(v58, ValueAtIndex, v101, (uint64_t)v117[0], v54, (unsigned __int16)(v53 + 1), 0);
          (*(void (**)(uint64_t))(*(_QWORD *)v58 + 24))(v58);
          *(_QWORD *)&v108 = v117;
          std::vector<CGFontVariation,TInlineBufferAllocator<CGFontVariation,4ul>>::__destroy_vector::operator()[abi:fe180100]((void ***)&v108);
          ValueAtIndex = 0;
        }
        else
        {
          v58 = 0;
        }
        if (v109)
        {
          v110 = v109;
          operator delete(v109);
        }
      }
      else
      {
        v58 = 0;
      }
      v117[0] = &v123;
      std::vector<unsigned short,TInlineBufferAllocator<unsigned short,30ul>>::__destroy_vector::operator()[abi:fe180100]((void ***)v117);
      v22 = v112[0];
      v51 = (_QWORD *)ValueAtIndex;
      ValueAtIndex = v58;
      if (v112[0])
      {
LABEL_108:
        v112[1] = v22;
        operator delete(v22);
      }
    }
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (ValueAtIndex)
    {
      free(v129);
      if (v51)
        goto LABEL_130;
      goto LABEL_8;
    }
LABEL_114:
    if (!v102)
    {
      v102 = v51[32];
      if (!v102)
      {
        free(v129);
        v102 = 0;
        ValueAtIndex = 0;
LABEL_130:
        (*(void (**)(_QWORD *))(*v51 + 8))(v51);
        goto LABEL_8;
      }
    }
    (*(void (**)(_QWORD *))(*v51 + 24))(v51);
    v82 = (char *)v133;
    if ((unint64_t)v133 >= v134)
    {
      v84 = ((_BYTE *)v133 - (_BYTE *)v132) >> 3;
      if ((unint64_t)(v84 + 1) >> 61)
        std::vector<char,TInlineBufferAllocator<char,1024ul>>::__throw_length_error[abi:fe180100]();
      v85 = (uint64_t)(v134 - (_QWORD)v132) >> 2;
      if (v85 <= v84 + 1)
        v85 = v84 + 1;
      if (v134 - (unint64_t)v132 >= 0x7FFFFFFFFFFFFFF8)
        v86 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v86 = v85;
      if (v86)
      {
        v87 = (char *)v136;
        if (&v136[v86] <= (void **)&v136)
        {
          v136 += v86;
        }
        else
        {
          if (v86 >> 61)
            std::__throw_bad_array_new_length[abi:fe180100]();
          v87 = (char *)operator new(8 * v86);
        }
      }
      else
      {
        v87 = 0;
      }
      v88 = (void **)&v87[8 * v84];
      *v88 = v51;
      v83 = v88 + 1;
      v89 = (void **)v133;
      v90 = (void **)v132;
      if (v133 != v132)
      {
        do
        {
          v91 = *--v89;
          *--v88 = v91;
        }
        while (v89 != v90);
        v89 = (void **)v132;
      }
      v132 = (char **)v88;
      v133 = v83;
      v92 = (void **)v134;
      v134 = (unint64_t)&v87[8 * v86];
      if (v89)
      {
        if (v135 <= (_OWORD *)v89 && &v136 > (void ***)v89)
        {
          if (v92 == v136)
            v136 = v89;
        }
        else
        {
          operator delete(v89);
        }
      }
    }
    else
    {
      *(_QWORD *)v133 = v51;
      v83 = v82 + 8;
    }
    v133 = v83;
    free(v129);
    ValueAtIndex = 0;
LABEL_8:
    if (!(*(unsigned int (**)(const TFont *))(*(_QWORD *)v14 + 32))(v14))
      (*(void (**)(const TFont *))(*(_QWORD *)v14 + 8))(v14);
    ++v12;
  }
  while (v12 != v107);
  v12 = (const TFont **)v114[0];
  CString = __s1;
  if (v114[0])
  {
LABEL_153:
    v114[1] = v12;
    operator delete(v12);
  }
LABEL_154:
  v94 = (void **)v132;
  v95 = (void **)v133;
  if (v132 != v133)
  {
    v96 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    while (1)
    {
      v97 = *v94;
      if (!ValueAtIndex)
        break;
      if (v97)
        goto LABEL_166;
LABEL_168:
      if (++v94 == v95)
        goto LABEL_169;
    }
    if (v97[32]
      && (Mutable = CFArrayCreateMutable(v96, 0, &TFPFontImpl::GetArrayCallBacks(void)::sCFArrayCallBacks),
          (v99 = Mutable) != 0))
    {
      CFArrayAppendValue(Mutable, v97);
      if (AppendVariationFonts(v99, CString))
      {
        ValueAtIndex = (uint64_t)CFArrayGetValueAtIndex(v99, 1);
        (*(void (**)(uint64_t))(*(_QWORD *)ValueAtIndex + 24))(ValueAtIndex);
      }
      else
      {
        ValueAtIndex = 0;
      }
      CFRelease(v99);
    }
    else
    {
      ValueAtIndex = 0;
    }
LABEL_166:
    if (!(*(unsigned int (**)(_QWORD *))(*v97 + 32))(v97))
      (*(void (**)(_QWORD *))(*v97 + 8))(v97);
    goto LABEL_168;
  }
LABEL_169:
  std::vector<std::pair<unsigned int,int>,TInlineBufferAllocator<std::pair<unsigned int,int>,30ul>>::__destroy_vector::operator()[abi:fe180100]((uint64_t)&v132);
  v132 = (char **)&v137;
  std::vector<char,TInlineBufferAllocator<char,30ul>>::__destroy_vector::operator()[abi:fe180100]((void ***)&v132);
LABEL_170:
  v132 = __b;
  std::vector<char,TInlineBufferAllocator<char,1024ul>>::__destroy_vector::operator()[abi:fe180100]((void ***)&v132);
  return ValueAtIndex;
}

void sub_1B09DF1F4(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1B09DF0B0);
  }
  _Unwind_Resume(a1);
}

void sub_1B09DF250()
{
  std::vector<std::pair<unsigned int,int>,TInlineBufferAllocator<std::pair<unsigned int,int>,30ul>>::__destroy_vector::operator()[abi:fe180100]((uint64_t)&STACK[0x208]);
  JUMPOUT(0x1B09DF264);
}

const char *GetCStringPtr<TInlineVector<char,30ul>>(const __CFString *a1, int64x2_t *a2, CFStringEncoding encoding)
{
  const char *result;
  CFIndex Length;
  CFIndex MaximumSizeForEncoding;
  CFIndex v9;
  char *v10;
  unint64_t v11;

  result = CFStringGetCStringPtr(a1, encoding);
  if (!result)
  {
    Length = CFStringGetLength(a1);
    MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(Length, encoding);
    v9 = MaximumSizeForEncoding + 1;
    v10 = (char *)a2->i64[0];
    v11 = a2->i64[1] - a2->i64[0];
    if (MaximumSizeForEncoding + 1 <= v11)
    {
      if (MaximumSizeForEncoding + 1 < v11)
        a2->i64[1] = (uint64_t)&v10[v9];
    }
    else
    {
      std::vector<char,TInlineBufferAllocator<char,30ul>>::__append(a2, MaximumSizeForEncoding + 1 - v11);
      v10 = (char *)a2->i64[0];
    }
    if (CFStringGetCString(a1, v10, v9, encoding))
      return v10;
    else
      return 0;
  }
  return result;
}

__CFArray *FPFontCreateFontsFromData(const __CFData *a1)
{
  __CFArray *Mutable;
  TFont *BytePtr;
  CFIndex Length;
  const TFont **v5;
  const TFont **v6;
  uint64_t v7;
  const TFont *v8;
  TFPInMemoryFont *v9;
  void *__p[3];

  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, &TFPFontImpl::GetArrayCallBacks(void)::sCFArrayCallBacks);
  if (!a1 || CFDataGetLength(a1) < 1)
    return Mutable;
  memset(__p, 170, sizeof(__p));
  BytePtr = (TFont *)CFDataGetBytePtr(a1);
  Length = CFDataGetLength(a1);
  TFont::CreateFontEntitiesForDataStream(BytePtr, Length, 0, (uint64_t)__p);
  v5 = (const TFont **)__p[0];
  v6 = (const TFont **)__p[1];
  if (__p[0] == __p[1])
  {
    v7 = 0;
    if (!__p[0])
      goto LABEL_14;
  }
  else
  {
    v7 = 0;
    do
    {
      v8 = *v5;
      v9 = (TFPInMemoryFont *)operator new();
      TFPInMemoryFont::TFPInMemoryFont(v9, v8, a1, 0);
      CFArrayAppendValue(Mutable, v9);
      if (!v7)
        v7 = *((_QWORD *)v9 + 32);
      if (!(*(unsigned int (**)(const TFont *))(*(_QWORD *)v8 + 32))(v8))
        (*(void (**)(const TFont *))(*(_QWORD *)v8 + 8))(v8);
      ++v5;
    }
    while (v5 != v6);
    v5 = (const TFont **)__p[0];
    if (!__p[0])
      goto LABEL_14;
  }
  __p[1] = v5;
  operator delete(v5);
LABEL_14:
  if (v7)
    AppendVariationFonts(Mutable, 0);
  return Mutable;
}

void sub_1B09DF4BC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B09DF49CLL);
}

void TFPFont::CreateCopyWithVariation(_QWORD **a1, uint64_t a2, unint64_t a3)
{
  _QWORD **v3;
  uint64_t v6;
  unint64_t v7;
  BOOL v8;
  __int128 v9;
  double *v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  double *v18;
  uint64_t v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *__p[3];
  void *v30;
  _BYTE *v31;
  uint64_t v32;
  unint64_t v33;
  double *v34;
  double *v35;
  double *v36;
  _OWORD v37[2];
  _QWORD v38[2];

  v3 = a1;
  v38[1] = *MEMORY[0x1E0C80C00];
  if (!a2 || !a3)
  {
    ((void (*)(_QWORD **))(*a1)[3])(a1);
    return;
  }
  v33 = 0;
  v6 = ((uint64_t (*)(_QWORD **, unint64_t *))(*a1)[26])(a1, &v33);
  v7 = v33;
  if (v6)
    v8 = v33 == 0;
  else
    v8 = 1;
  if (v8)
    goto LABEL_43;
  if (v33 < a3)
  {
LABEL_42:
    v28 = operator new();
    TFPFont::TFPFont(v28, (uint64_t)v3, a3, a2, -1, 0, 0);
    v3 = (_QWORD **)v28;
LABEL_43:
    ((void (*)(_QWORD **))(*v3)[3])(v3);
    return;
  }
  *(_QWORD *)&v9 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v37[0] = v9;
  v37[1] = v9;
  v10 = (double *)v37;
  v35 = 0;
  v36 = 0;
  v34 = 0;
  v38[0] = v37;
  if (v33 >> 61)
    std::vector<char,TInlineBufferAllocator<char,1024ul>>::__throw_length_error[abi:fe180100]();
  if ((_QWORD *)((char *)v37 + 8 * v33) <= v38)
    v38[0] = (char *)v37 + 8 * v33;
  else
    v10 = (double *)operator new(8 * v33);
  v34 = v10;
  v36 = &v10[v7];
  bzero(v10, 8 * v7);
  v11 = 0;
  v35 = &v10[v7];
  while (2)
  {
    v12 = (_QWORD *)(a2 + 8);
    v13 = a3;
    while (*(_DWORD *)(v6 + 40 * v11 + 8) != *((_DWORD *)v12 - 2))
    {
      v12 += 2;
      if (!--v13)
      {
        if (v7 > v11)
        {
          v12 = (_QWORD *)(v6 + 40 * v11 + 32);
          goto LABEL_20;
        }
LABEL_49:
        __break(1u);
        return;
      }
    }
    if (v7 <= v11)
      goto LABEL_49;
LABEL_20:
    v10[v11++] = *(double *)v12;
    if (v11 != v7)
      continue;
    break;
  }
  v30 = 0;
  v31 = 0;
  v32 = 0;
  memset(__p, 170, sizeof(__p));
  (*(void (**)(void **__return_ptr, _QWORD *, unint64_t, void **))(*v3[2] + 400))(__p, v3[2], v7, &v30);
  v14 = __p[0];
  if (__p[1] == __p[0])
  {
    v25 = 1;
    v14 = __p[1];
LABEL_46:
    if (v14)
    {
LABEL_38:
      __p[1] = v14;
      operator delete(v14);
    }
  }
  else
  {
    v15 = 0;
    v16 = 0;
    v17 = ((char *)__p[1] - (char *)__p[0]) >> 3;
    v18 = (double *)v30;
    if (v17 <= 1)
      v17 = 1;
    while (1)
    {
      v19 = 0;
      if (v33)
      {
        while (v35 - v34 != v19 && (v31 - (_BYTE *)v30) >> 3 > (unint64_t)(v15 + v19))
        {
          v20 = v34[v19];
          v21 = v18[v19];
          v22 = vabdd_f64(v20, v21);
          if (v22 >= 0.0001)
          {
            v23 = fabs(v20);
            v24 = fabs(v21);
            if (v23 < v24)
              v23 = v24;
            if (v22 / v23 >= 0.0001)
              goto LABEL_33;
          }
          if (v33 == ++v19)
            goto LABEL_36;
        }
        goto LABEL_49;
      }
LABEL_33:
      if (v19 == v33)
        break;
      ++v16;
      v18 += v33;
      v15 += v33;
      if (v16 == v17)
      {
        v25 = 1;
        goto LABEL_46;
      }
    }
LABEL_36:
    v26 = operator new();
    if (v16 >= ((char *)__p[1] - (char *)__p[0]) >> 3)
      goto LABEL_49;
    v27 = v26;
    TFPFont::TFPFont(v26, (uint64_t)v3, a3, a2, v16, *((unsigned __int16 *)__p[0] + 4 * v16 + 2), 0);
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 24))(v27);
    v25 = 0;
    v14 = __p[0];
    if (__p[0])
      goto LABEL_38;
  }
  if (v30)
  {
    v31 = v30;
    operator delete(v30);
  }
  std::vector<double,TInlineBufferAllocator<double,4ul>>::__destroy_vector::operator()[abi:fe180100]((uint64_t)&v34);
  if ((v25 & 1) != 0)
    goto LABEL_42;
}

void sub_1B09DF870(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  uint64_t v16;

  if (a2)
  {
    MEMORY[0x1B5E0CD38](v16, 0x10F1C405317EF00);
    if (__p)
      operator delete(__p);
    if (a12)
      operator delete(a12);
    std::vector<double,TInlineBufferAllocator<double,4ul>>::__destroy_vector::operator()[abi:fe180100]((uint64_t)&a16);
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x1B09DF81CLL);
  }
  _Unwind_Resume(exception_object);
}

void TFPFont::CreateVariationFromPostScriptNameSuffix(TFPFont *this, const __CFString *a2)
{
  uint64_t v4;
  __int128 v6;
  const char *CString;
  const char *v8;
  const __CFData *v9;
  size_t v10;
  int v11;
  int v12;
  __int128 v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t i;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint8x8_t v22;
  unint64_t v23;
  uint64_t **v24;
  uint64_t *j;
  unint64_t v26;
  _QWORD *v27;
  float v28;
  _BOOL8 v29;
  unint64_t v30;
  unint64_t v31;
  size_t v32;
  CFMutableDictionaryRef v33;
  _QWORD *v34;
  unint64_t v35;
  size_t v36;
  unint64_t v37;
  unsigned int v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  int v44;
  int v45;
  CFNumberRef v46;
  int v47;
  char *v48;
  int v49;
  int v50;
  char *v51;
  unsigned __int8 *v52;
  uint64_t v53;
  int v54;
  BOOL v55;
  int v56;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  char *v62;
  CFAllocatorRef v63;
  char *v64;
  int v65;
  BOOL v67;
  int v68;
  BOOL v70;
  BOOL v72;
  unint64_t v73;
  __int128 v74;
  unint64_t v75;
  unint64_t v76;
  const UInt8 *BytePtr;
  CFIndex Length;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  const __CFAllocator *v82;
  unsigned __int16 *v83;
  unsigned int *v84;
  float *v85;
  char *v86;
  float v87;
  unsigned int v88;
  __CFDictionary *v89;
  uint64_t v90;
  const __CFData *theData;
  unint64_t v92;
  const __CFAllocator *allocator;
  CFAllocatorRef allocatora;
  CFAllocatorRef allocatorb;
  CFNumberRef v96;
  CFNumberRef v97;
  unsigned int v98;
  unint64_t v99;
  unint64_t v100;
  CFMutableDictionaryRef theDict;
  double valuePtr;
  CFMutableDictionaryRef v103[2];
  __int128 v104;
  unint64_t v105;
  int64x2_t v106;
  uint64_t v107;
  _OWORD v108[2];
  _OWORD *v109;
  uint64_t v110;

  v110 = *MEMORY[0x1E0C80C00];
  if (!a2)
    return;
  v100 = 0xAAAAAAAAAAAAAAAALL;
  v4 = (*(uint64_t (**)(TFPFont *, unint64_t *))(*(_QWORD *)this + 208))(this, &v100);
  if (!v4 || v100 == 0)
    return;
  *(_QWORD *)&v6 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v108[1] = v6;
  v108[0] = v6;
  v107 = 0;
  v106 = 0uLL;
  v109 = v108;
  CString = GetCStringPtr<TInlineVector<char,30ul>>(a2, &v106, 0x600u);
  v8 = CString;
  if (!CString)
    goto LABEL_173;
  v99 = 0xAAAAAAAAAAAAAAAALL;
  v9 = (const __CFData *)(*(uint64_t (**)(TFPFont *, uint64_t))(*(_QWORD *)this + 80))(this, 1296914002);
  v99 = (unint64_t)v9;
  if (v9)
  {
    v10 = strlen(v8);
    if (v10 > 0x1F)
      goto LABEL_172;
    v11 = v10 - 2;
    if (v10 < 2)
      goto LABEL_172;
    v12 = *((unsigned __int8 *)v8 + 1);
    *(_QWORD *)&v13 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v13 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)v103 = v13;
    v104 = v13;
    if (v12 != 46 && (v12 - 48) > 9)
    {
      v14 = 0;
LABEL_150:
      if (v14)
        operator delete(v14);
      goto LABEL_172;
    }
    theData = v9;
    v92 = v100;
    v14 = 0;
    v51 = 0;
    allocatora = 0;
    v52 = (unsigned __int8 *)(v8 + 2);
    v90 = v4;
    while (1)
    {
      v53 = 0;
      v54 = v11;
      do
      {
        *((_BYTE *)v103 + v53) = v12;
        v12 = v52[v53];
        v55 = (v12 - 48) <= 9 || v12 == 46;
        v56 = v53++;
      }
      while (v55 && v54 != v56);
      *((_BYTE *)v103 + v53) = 0;
      LODWORD(valuePtr) = -1;
      sscanf((const char *)v103, "%f", &valuePtr);
      if (v51 >= (char *)allocatora)
      {
        v58 = (v51 - v14) >> 2;
        v59 = v58 + 1;
        if ((unint64_t)(v58 + 1) >> 62)
          std::vector<char,TInlineBufferAllocator<char,1024ul>>::__throw_length_error[abi:fe180100]();
        if ((allocatora - (CFAllocatorRef)v14) >> 1 > v59)
          v59 = (allocatora - (CFAllocatorRef)v14) >> 1;
        v60 = 0x3FFFFFFFFFFFFFFFLL;
        if ((unint64_t)(allocatora - (CFAllocatorRef)v14) < 0x7FFFFFFFFFFFFFFCLL)
          v60 = v59;
        if (v60)
        {
          allocatorb = (CFAllocatorRef)v14;
          if (v60 >> 62)
            std::__throw_bad_array_new_length[abi:fe180100]();
          v61 = v60;
          v62 = (char *)operator new(4 * v60);
          v63 = allocatorb;
          v60 = v61;
        }
        else
        {
          v63 = (CFAllocatorRef)v14;
          v62 = 0;
        }
        v14 = &v62[4 * v58];
        *(_DWORD *)v14 = LODWORD(valuePtr);
        v64 = v14 + 4;
        while (v51 != (char *)v63)
        {
          v65 = *((_DWORD *)v51 - 1);
          v51 -= 4;
          *((_DWORD *)v14 - 1) = v65;
          v14 -= 4;
        }
        allocatora = (CFAllocatorRef)&v62[4 * v60];
        if (v63)
          operator delete(v63);
        v51 = v64;
      }
      else
      {
        *(_DWORD *)v51 = LODWORD(valuePtr);
        v51 += 4;
      }
      v11 = v54 - v53;
      v52 += v53;
      v67 = (v12 - 58) <= 0xFFFFFFF5 && v12 != 46 || v12 == 32;
      if (v67 && v11 + 1 > 0)
      {
        do
        {
          v68 = *v52++;
          v12 = v68;
          v70 = v11-- != 0;
          v72 = (v12 - 58) <= 0xFFFFFFF5 && v12 != 46 || v12 == 32;
        }
        while (v72 && v70);
      }
      v73 = v51 - v14;
      if ((unint64_t)(v51 - v14) > 0x10)
        goto LABEL_150;
      if (v11 < 0)
        break;
      *(_QWORD *)&v74 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v74 + 1) = 0xAAAAAAAAAAAAAAAALL;
      *(_OWORD *)v103 = v74;
      v104 = v74;
      if (v12 != 46 && (v12 - 48) > 9)
        goto LABEL_150;
    }
    if (v14 != v51)
    {
      v75 = v73 >> 2;
      v76 = v92;
      if (v73 >> 2 <= v92)
      {
        if ((BytePtr = CFDataGetBytePtr(theData),
              Length = CFDataGetLength(theData),
              v79 = (unint64_t)&BytePtr[Length],
              v80 = (unint64_t)&BytePtr[2 * v73 + 8],
              v80 >= (unint64_t)(BytePtr + 8))
          && v80 <= v79
          || ((unint64_t)(BytePtr + 16) <= v79 ? (v81 = (unint64_t)(Length - 8) >> 3) : (v81 = 0),
              v81 == v75))
        {
          v82 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
          v103[0] = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
          if (v92)
          {
            v83 = (unsigned __int16 *)(BytePtr + 14);
            v84 = (unsigned int *)(v90 + 8);
            v85 = (float *)v14;
            while (v75)
            {
              v86 = v14;
              v87 = *v85;
              v88 = *v83;
              *(_QWORD *)&valuePtr = *v84;
              v89 = CFNumberCreate(v82, kCFNumberLongType, &valuePtr);
              theDict = v89;
              *(float *)&v97 = v87 / (float)((int)bswap32(v88) >> 16);
              valuePtr = COERCE_DOUBLE(CFNumberCreate(v82, kCFNumberFloatType, &v97));
              v14 = v86;
              CFDictionarySetValue(v103[0], v89, *(const void **)&valuePtr);
              TCFNumber::~TCFNumber((const void **)&valuePtr);
              TCFNumber::~TCFNumber((const void **)&theDict);
              ++v85;
              v83 += 4;
              v84 += 10;
              --v75;
              if (!--v76)
                goto LABEL_167;
            }
            __break(1u);
            return;
          }
LABEL_167:
          v103[0] = 0;
          TCFDictionary::~TCFDictionary((const void **)v103);
        }
      }
      if (!v14)
        goto LABEL_172;
    }
    operator delete(v14);
    goto LABEL_172;
  }
  allocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  theDict = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  *(_OWORD *)v103 = 0u;
  v104 = 0u;
  v105 = 0xAAAAAAAA3F800000;
  v15 = v100;
  if (v100)
  {
    v16 = 0;
    v17 = 0;
    for (i = 0; i != v15; ++i)
    {
      v19 = v4 + 40 * i;
      v20 = *(unsigned int *)(v19 + 8);
      v21 = *(_QWORD *)(v19 + 32);
      if (v17)
      {
        v22 = (uint8x8_t)vcnt_s8((int8x8_t)v17);
        v22.i16[0] = vaddlv_u8(v22);
        if (v22.u32[0] > 1uLL)
        {
          v23 = *(unsigned int *)(v19 + 8);
          if (v17 <= v20)
            v23 = v20 % v17;
        }
        else
        {
          v23 = ((_DWORD)v17 - 1) & v20;
        }
        v24 = (uint64_t **)*((_QWORD *)v103[0] + v23);
        if (v24)
        {
          for (j = *v24; j; j = (uint64_t *)*j)
          {
            v26 = j[1];
            if (v26 == v20)
            {
              if (*((_DWORD *)j + 4) == (_DWORD)v20)
                goto LABEL_57;
            }
            else
            {
              if (v22.u32[0] > 1uLL)
              {
                if (v26 >= v17)
                  v26 %= v17;
              }
              else
              {
                v26 &= v17 - 1;
              }
              if (v26 != v23)
                break;
            }
          }
        }
      }
      else
      {
        v23 = 0xAAAAAAAAAAAAAAAALL;
      }
      v27 = operator new(0x20uLL);
      *v27 = 0;
      v27[1] = v20;
      *((_DWORD *)v27 + 4) = v20;
      v27[3] = v21;
      v28 = (float)(unint64_t)(v16 + 1);
      if (!v17 || (float)(*(float *)&v105 * (float)v17) < v28)
      {
        v29 = (v17 & (v17 - 1)) != 0;
        if (v17 < 3)
          v29 = 1;
        v30 = v29 | (2 * v17);
        v31 = vcvtps_u32_f32(v28 / *(float *)&v105);
        if (v30 <= v31)
          v32 = v31;
        else
          v32 = v30;
        std::__hash_table<std::__hash_value_type<char const*,unsigned int>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,unsigned int>,TType1ParsingContext::HashCString,TType1ParsingContext::EqualCString,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,unsigned int>,TType1ParsingContext::EqualCString,TType1ParsingContext::HashCString,true>,std::allocator<std::__hash_value_type<char const*,unsigned int>>>::__rehash<true>((uint64_t)v103, v32);
        v17 = (unint64_t)v103[1];
        if (((unint64_t)v103[1] & ((unint64_t)v103[1] - 1)) != 0)
        {
          if (v103[1] <= (CFMutableDictionaryRef)v20)
            v23 = v20 % (unint64_t)v103[1];
          else
            v23 = v20;
        }
        else
        {
          v23 = (LODWORD(v103[1]) - 1) & v20;
        }
      }
      v33 = v103[0];
      v34 = (_QWORD *)*((_QWORD *)v103[0] + v23);
      if (v34)
      {
        *v27 = *v34;
      }
      else
      {
        *v27 = v104;
        *(_QWORD *)&v104 = v27;
        *((_QWORD *)v33 + v23) = &v104;
        if (!*v27)
          goto LABEL_56;
        v35 = *(_QWORD *)(*v27 + 8);
        if ((v17 & (v17 - 1)) != 0)
        {
          if (v35 >= v17)
            v35 %= v17;
        }
        else
        {
          v35 &= v17 - 1;
        }
        v34 = (_QWORD *)((char *)v103[0] + 8 * v35);
      }
      *v34 = v27;
LABEL_56:
      v16 = ++*((_QWORD *)&v104 + 1);
      v15 = v100;
LABEL_57:
      ;
    }
  }
  v36 = strlen(v8);
  if (!v36)
    goto LABEL_97;
  v37 = v36;
LABEL_60:
  if (*v8 != 95)
    goto LABEL_171;
  v38 = 0;
  ++v8;
  --v37;
  v98 = 0;
  v39 = 4;
  do
  {
    if (!v37)
      goto LABEL_171;
    v40 = *v8;
    if (v40 == 37)
    {
      if (v37 < 3)
        goto LABEL_171;
      v41 = v8[1];
      if ((v41 - 48) >= 0xA)
      {
        if ((v41 - 97) >= 6)
        {
          if ((v41 - 65) > 5)
            goto LABEL_171;
          v42 = -55;
        }
        else
        {
          v42 = -87;
        }
      }
      else
      {
        v42 = -48;
      }
      v44 = v8[2];
      if ((v44 - 48) >= 0xA)
      {
        if ((v44 - 97) >= 6)
        {
          if ((v44 - 65) > 5)
            goto LABEL_171;
          v45 = -55;
        }
        else
        {
          v45 = -87;
        }
      }
      else
      {
        v45 = -48;
      }
      v38 = (16 * (v42 + v41)) | (v38 << 8) | (v45 + v44);
      v98 = v38;
      v8 += 3;
      v43 = -3;
    }
    else
    {
      ++v8;
      v38 = v40 | (v38 << 8);
      v98 = v38;
      v43 = -1;
    }
    v37 += v43;
    --v39;
  }
  while (v39);
  v97 = (CFNumberRef)0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&valuePtr = v38;
  v46 = CFNumberCreate(allocator, kCFNumberLongType, &valuePtr);
  v97 = v46;
  if (v37 && *v8 != 95)
  {
    v47 = 0;
    v48 = (char *)&v8[v37];
    while (1)
    {
      v49 = *v8;
      if ((v49 - 48) >= 0xA)
      {
        if ((v49 - 97) >= 6)
        {
          if ((v49 - 65) > 5)
          {
            v48 = (char *)v8;
LABEL_94:
            if (!std::__hash_table<std::__hash_value_type<unsigned int,double>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,double>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,double>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,double>>>::find<unsigned int>((uint64_t)v103[0], (unint64_t)v103[1], v38))goto LABEL_170;
            valuePtr = (double)v47 * 0.0000152587891;
            v96 = CFNumberCreate(allocator, kCFNumberDoubleType, &valuePtr);
            CFDictionarySetValue(theDict, v46, v96);
            TCFNumber::~TCFNumber((const void **)&v96);
            v8 = v48;
LABEL_96:
            TCFNumber::~TCFNumber((const void **)&v97);
            if (!v37)
            {
LABEL_97:
              theDict = 0;
              goto LABEL_171;
            }
            goto LABEL_60;
          }
          v50 = -55;
        }
        else
        {
          v50 = -87;
        }
      }
      else
      {
        v50 = -48;
      }
      v47 = v49 + 16 * v47 + v50;
      ++v8;
      if (!--v37)
        goto LABEL_94;
    }
  }
  if (std::__hash_table<std::__hash_value_type<unsigned int,double>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,double>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,double>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,double>>>::find<unsigned int>((uint64_t)v103[0], (unint64_t)v103[1], v38))
  {
    valuePtr = *((double *)std::__hash_table<std::__hash_value_type<unsigned int,double>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,double>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,double>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,double>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t)v103, v38, &v98)+ 3);
    v96 = CFNumberCreate(allocator, kCFNumberDoubleType, &valuePtr);
    CFDictionarySetValue(theDict, v46, v96);
    TCFNumber::~TCFNumber((const void **)&v96);
    goto LABEL_96;
  }
LABEL_170:
  TCFNumber::~TCFNumber((const void **)&v97);
LABEL_171:
  std::__hash_table<std::__hash_value_type<char const*,unsigned int>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,unsigned int>,TType1ParsingContext::HashCString,TType1ParsingContext::EqualCString,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,unsigned int>,TType1ParsingContext::EqualCString,TType1ParsingContext::HashCString,true>,std::allocator<std::__hash_value_type<char const*,unsigned int>>>::~__hash_table((uint64_t)v103);
  TCFDictionary::~TCFDictionary((const void **)&theDict);
LABEL_172:
  TCFData::~TCFData((const void **)&v99);
LABEL_173:
  v103[0] = (CFMutableDictionaryRef)&v106;
  std::vector<char,TInlineBufferAllocator<char,30ul>>::__destroy_vector::operator()[abi:fe180100]((void ***)v103);
}

void sub_1B09E02A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, const void *a20,uint64_t a21,char a22,int a23,__int16 a24,char a25,char a26,char *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  void *v33;

  if (v33)
    operator delete(v33);
  TCFData::~TCFData(&a20);
  a27 = &a33;
  std::vector<char,TInlineBufferAllocator<char,30ul>>::__destroy_vector::operator()[abi:fe180100]((void ***)&a27);
  _Unwind_Resume(a1);
}

__CFData *TFPFont::CopySFNTData(TFPFont *this)
{
  __CFData *result;

  result = (__CFData *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 432))(*((_QWORD *)this + 2));
  if (result)
    return TSFNTFont::CopyData(result);
  return result;
}

BOOL TFPFont::IsSuitcase(TFPFont *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 440))(*((_QWORD *)this + 2)) != 0;
}

CFStringRef TFPFont::CopyVariationPostScriptNamePrefix(TFPFont *this)
{
  __int128 v1;
  CFStringRef v2;
  char **v4;
  char *cStr[3];
  _OWORD v6[4];
  _OWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v1 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v1 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v6[2] = v1;
  v6[3] = v1;
  v6[0] = v1;
  v6[1] = v1;
  memset(cStr, 0, sizeof(cStr));
  v7 = v6;
  v2 = 0;
  if (TFPFont::GetVariationPrefix((uint64_t)this, cStr))
    v2 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], cStr[0], 0x600u);
  v4 = cStr;
  std::vector<CGFontVariation,TInlineBufferAllocator<CGFontVariation,4ul>>::__destroy_vector::operator()[abi:fe180100]((void ***)&v4);
  return v2;
}

void sub_1B09E0494(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, char a10)
{
  a9 = (void **)&a10;
  std::vector<CGFontVariation,TInlineBufferAllocator<CGFontVariation,4ul>>::__destroy_vector::operator()[abi:fe180100](&a9);
  _Unwind_Resume(a1);
}

CFMutableArrayRef TFPFont::CopyAdditionalPostScriptNames(TFPFont *this)
{
  const __CFAllocator *v2;
  __int128 v3;
  CFStringRef v4;
  char *v5;
  CFMutableArrayRef v6;
  CFMutableArrayRef theArray;
  char **v9;
  char *cStr[3];
  _OWORD v11[4];
  _OWORD *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  theArray = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  if (*((_QWORD *)this + 32))
  {
    *(_QWORD *)&v3 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v11[2] = v3;
    v11[3] = v3;
    v11[0] = v3;
    v11[1] = v3;
    memset(cStr, 0, sizeof(cStr));
    v12 = v11;
    if (TFPFont::GetVariationPrefix((uint64_t)this, cStr)
      && TFPFont::AppendVariationPostScriptName((uint64_t)this, (uint64_t)cStr, 0))
    {
      v4 = CFStringCreateWithCString(v2, cStr[0], 0x600u);
      v9 = (char **)v4;
      if (v4)
        CFArrayAppendValue(theArray, v4);
      TCFString::~TCFString((const void **)&v9);
    }
    v9 = cStr;
    std::vector<CGFontVariation,TInlineBufferAllocator<CGFontVariation,4ul>>::__destroy_vector::operator()[abi:fe180100]((void ***)&v9);
  }
  else
  {
    v5 = (char *)(*(uint64_t (**)(TFPFont *))(*(_QWORD *)this + 112))(this);
    cStr[0] = v5;
    if (v5)
      CFArrayAppendValue(theArray, v5);
    TCFString::~TCFString((const void **)cStr);
  }
  if (theArray && CFArrayGetCount(theArray))
  {
    v6 = theArray;
    theArray = 0;
  }
  else
  {
    v6 = 0;
  }
  TCFArray<void const*>::~TCFArray((const void **)&theArray);
  return v6;
}

void sub_1B09E060C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, const void *a10, void **a11, char a12)
{
  TCFString::~TCFString((const void **)&a11);
  a11 = (void **)&a12;
  std::vector<CGFontVariation,TInlineBufferAllocator<CGFontVariation,4ul>>::__destroy_vector::operator()[abi:fe180100](&a11);
  TCFArray<void const*>::~TCFArray(&a10);
  _Unwind_Resume(a1);
}

const __CFString *TFPFont::CopyFullName(TFPFont *this)
{
  return TFPFont::CopyFontName(this, 4);
}

const __CFString *TFPFont::CopyFamilyName(TFPFont *this)
{
  return TFPFont::CopyFontName(this, 1);
}

BOOL TFPFont::IsNamedInstanceAPI(TFPFont *this)
{
  return !*((_QWORD *)this + 42) || *((_QWORD *)this + 41) >= 0;
}

uint64_t TFPFont::GetInstanceNameIDAPI(TFPFont *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *((_QWORD *)this + 42);
  if (!v1)
    return 0;
  v2 = *((_QWORD *)this + 41);
  if (v2 < 0)
    return 0;
  v3 = *(_QWORD *)(v1 + 344);
  v4 = *(_QWORD *)(v1 + 352);
  if (v3 == v4 || v2 >= (v4 - v3) >> 3)
    return 0;
  else
    return *(unsigned __int16 *)(v3 + 8 * v2 + 2);
}

uint64_t TFPFont::HasNamedInstanceWithOpticalSize(TFPFont *this)
{
  TFPFont *v1;

  v1 = (TFPFont *)*((_QWORD *)this + 42);
  if (!v1)
    v1 = this;
  return *((unsigned __int8 *)v1 + 368);
}

uint64_t TFPFont::GetVariationAxisFlags(TFPFont *this, unsigned int a2)
{
  uint64_t *v2;
  int v3;

  v2 = std::__hash_table<std::__hash_value_type<unsigned int,std::pair<unsigned short,unsigned short>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::pair<unsigned short,unsigned short>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::pair<unsigned short,unsigned short>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::pair<unsigned short,unsigned short>>>>::find<unsigned int>((_QWORD *)this + 36, a2);
  if (v2)
    return (unsigned __int16)*((_DWORD *)v2 + 5);
  else
    LOWORD(v3) = 0;
  return (unsigned __int16)v3;
}

uint64_t *TFPFont::GetVariationAxisNameID(TFPFont *this, unsigned int a2)
{
  uint64_t *result;

  result = std::__hash_table<std::__hash_value_type<unsigned int,std::pair<unsigned short,unsigned short>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::pair<unsigned short,unsigned short>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::pair<unsigned short,unsigned short>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::pair<unsigned short,unsigned short>>>>::find<unsigned int>((_QWORD *)this + 36, a2);
  if (result)
    return (uint64_t *)*((unsigned __int16 *)result + 11);
  return result;
}

unint64_t TFPFont::GetStems(TFPFont *this, double *a2, double *a3)
{
  unint64_t result;
  double v7;
  double v8;
  unint64_t *v9;
  unint64_t v10;

  result = (*(uint64_t (**)(TFPFont *))(*(_QWORD *)this + 256))(this);
  v8 = *(double *)(result + 64);
  v7 = *(double *)(result + 72);
  if (v7 == 0.0 || v8 == 0.0)
  {
    v9 = (unint64_t *)((char *)this + 248);
    result = atomic_load(v9);
    if (!result)
    {
      result = operator new();
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = 0;
      while (1)
      {
        v10 = __ldaxr(v9);
        if (v10)
          break;
        if (!__stlxr(result, v9))
          goto LABEL_9;
      }
      __clrex();
      MEMORY[0x1B5E0CD38]();
      result = v10;
    }
LABEL_9:
    if (v7 == 0.0)
      v7 = *(double *)(result + 8);
    if (v8 == 0.0)
      v8 = *(double *)result;
  }
  *a2 = v7;
  *a3 = v8;
  return result;
}

void sub_1B09E0800(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B09E07D0);
}

uint64_t TFPFont::GetTypoMetrics(TFPFont *this, double *a2, double *a3, double *a4)
{
  uint64_t result;
  const TSFNTFont *v9;
  __int128 v10;
  TsfntTable *v11;
  const __int16 *v12;
  __int128 v13;
  double v14;
  char v15;
  double v16;
  char v17;
  double v18;
  char v19;
  _OWORD v20[8];
  unint64_t v21;
  uint64_t v22;
  _OWORD v23[4];

  result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 432))(*((_QWORD *)this + 2));
  if (result)
  {
    v9 = (const TSFNTFont *)result;
    *(_QWORD *)&v10 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v23[2] = v10;
    v23[3] = v10;
    v23[0] = v10;
    v23[1] = v10;
    Tos2Table::Tos2Table((Tos2Table *)v23, (const TSFNTFont *)result);
    if (TsfntTable::operator BOOL(v11))
    {
      if (a2)
        *a2 = (double)((int)bswap32(*(unsigned __int16 *)(TpostTable::GetPost((TpostTable *)v23) + 68)) >> 16);
      if (a3)
        *a3 = (double)((int)bswap32(*(unsigned __int16 *)(TpostTable::GetPost((TpostTable *)v23) + 70)) >> 16);
      if (a4)
        *a4 = (double)((int)bswap32(*(unsigned __int16 *)(TpostTable::GetPost((TpostTable *)v23) + 72)) >> 16);
      v22 = 0;
      v12 = (const __int16 *)(*(uint64_t (**)(TFPFont *, uint64_t *))(*(_QWORD *)this + 232))(this, &v22);
      v21 = 0xAAAAAAAAAAAAAAAALL;
      *(_QWORD *)&v13 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v13 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v20[6] = v13;
      v20[7] = v13;
      v20[4] = v13;
      v20[5] = v13;
      v20[2] = v13;
      v20[3] = v13;
      v20[0] = v13;
      v20[1] = v13;
      TMVARTable::TMVARTable((TMVARTable *)v20, v9, v22, v12);
      if (TsfntTable::operator BOOL((TsfntTable *)v20))
      {
        if (a2)
        {
          v14 = COERCE_DOUBLE(TMVARTable::ValueForTag((TMVARTable *)v20, 1751216995));
          if (!v15)
            v14 = 0.0;
          *a2 = v14 + *a2;
        }
        if (a3)
        {
          v16 = COERCE_DOUBLE(TMVARTable::ValueForTag((TMVARTable *)v20, 1751413603));
          if (!v17)
            v16 = 0.0;
          *a3 = v16 + *a3;
        }
        if (a4)
        {
          v18 = COERCE_DOUBLE(TMVARTable::ValueForTag((TMVARTable *)v20, 1751934832));
          if (!v19)
            v18 = 0.0;
          *a4 = v18 + *a4;
        }
      }
      *(_QWORD *)&v20[0] = &off_1E6176770;
      TDataReference::DucRefCount((TDataReference *)v20);
      *(_QWORD *)&v23[0] = &off_1E6176770;
      TDataReference::DucRefCount((TDataReference *)v23);
      return 1;
    }
    else
    {
      *(_QWORD *)&v23[0] = &off_1E6176770;
      TDataReference::DucRefCount((TDataReference *)v23);
      return 0;
    }
  }
  return result;
}

void sub_1B09E0A24(_Unwind_Exception *a1)
{
  uint64_t v1;

  Tos2Table::~Tos2Table((Tos2Table *)(v1 - 112));
  _Unwind_Resume(a1);
}

uint64_t TFPFont::GetWinMetrics(TFPFont *this, double *a2, double *a3)
{
  uint64_t result;
  const TSFNTFont *v7;
  __int128 v8;
  TsfntTable *v9;
  const __int16 *v10;
  __int128 v11;
  double v12;
  char v13;
  double v14;
  char v15;
  _OWORD v16[8];
  unint64_t v17;
  uint64_t v18;
  _OWORD v19[4];

  result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 432))(*((_QWORD *)this + 2));
  if (result)
  {
    v7 = (const TSFNTFont *)result;
    *(_QWORD *)&v8 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v19[2] = v8;
    v19[3] = v8;
    v19[0] = v8;
    v19[1] = v8;
    Tos2Table::Tos2Table((Tos2Table *)v19, (const TSFNTFont *)result);
    if (TsfntTable::operator BOOL(v9))
    {
      if (a2)
        *a2 = (double)(bswap32(*(unsigned __int16 *)(TpostTable::GetPost((TpostTable *)v19) + 74)) >> 16);
      if (a3)
        *a3 = (double)(bswap32(*(unsigned __int16 *)(TpostTable::GetPost((TpostTable *)v19) + 76)) >> 16);
      v18 = 0;
      v10 = (const __int16 *)(*(uint64_t (**)(TFPFont *, uint64_t *))(*(_QWORD *)this + 232))(this, &v18);
      v17 = 0xAAAAAAAAAAAAAAAALL;
      *(_QWORD *)&v11 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v11 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v16[6] = v11;
      v16[7] = v11;
      v16[4] = v11;
      v16[5] = v11;
      v16[2] = v11;
      v16[3] = v11;
      v16[0] = v11;
      v16[1] = v11;
      TMVARTable::TMVARTable((TMVARTable *)v16, v7, v18, v10);
      if (TsfntTable::operator BOOL((TsfntTable *)v16))
      {
        if (a2)
        {
          v12 = COERCE_DOUBLE(TMVARTable::ValueForTag((TMVARTable *)v16, 1751346273));
          if (!v13)
            v12 = 0.0;
          *a2 = v12 + *a2;
        }
        if (a3)
        {
          v14 = COERCE_DOUBLE(TMVARTable::ValueForTag((TMVARTable *)v16, 1751346276));
          if (!v15)
            v14 = 0.0;
          *a3 = v14 + *a3;
        }
      }
      *(_QWORD *)&v16[0] = &off_1E6176770;
      TDataReference::DucRefCount((TDataReference *)v16);
      *(_QWORD *)&v19[0] = &off_1E6176770;
      TDataReference::DucRefCount((TDataReference *)v19);
      return 1;
    }
    else
    {
      *(_QWORD *)&v19[0] = &off_1E6176770;
      TDataReference::DucRefCount((TDataReference *)v19);
      return 0;
    }
  }
  return result;
}

void sub_1B09E0C0C(_Unwind_Exception *a1)
{
  uint64_t v1;

  Tos2Table::~Tos2Table((Tos2Table *)(v1 - 112));
  _Unwind_Resume(a1);
}

uint64_t TFPFont::GetSubscriptX(TFPFont *this, double *a2, double *a3)
{
  return GetOS2SizeAndOther((_QWORD **)this, (uint64_t (*)(_QWORD *))Tos2Table::GetSubscriptX, 0, a2, a3);
}

uint64_t GetOS2SizeAndOther(_QWORD **a1, uint64_t (*a2)(_QWORD *), uint64_t a3, double *a4, double *a5)
{
  uint64_t result;
  const TSFNTFont *v11;
  __int128 v12;
  TsfntTable *v13;
  _QWORD *v14;
  uint64_t v15;
  __int16 v16;
  int v17;
  int v18;
  int v19;
  const __int16 *v20;
  __int128 v21;
  double v22;
  char v23;
  double v24;
  char v25;
  _OWORD v26[8];
  unint64_t v27;
  unint64_t v28;
  _OWORD v29[4];

  result = (*(uint64_t (**)(_QWORD *))(*a1[2] + 432))(a1[2]);
  if (result)
  {
    v11 = (const TSFNTFont *)result;
    *(_QWORD *)&v12 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v29[2] = v12;
    v29[3] = v12;
    v29[0] = v12;
    v29[1] = v12;
    Tos2Table::Tos2Table((Tos2Table *)v29, (const TSFNTFont *)result);
    if (TsfntTable::operator BOOL(v13))
    {
      v14 = (_QWORD *)((char *)v29 + (a3 >> 1));
      if ((a3 & 1) != 0)
        a2 = *(uint64_t (**)(_QWORD *))(*v14 + a2);
      v15 = a2(v14);
      v17 = HIDWORD(v15);
      v19 = v18;
      if (a4)
        *a4 = (double)(__int16)v15;
      if (a5)
        *a5 = (double)v16;
      v28 = 0;
      v20 = (const __int16 *)((uint64_t (*)(_QWORD **, unint64_t *))(*a1)[29])(a1, &v28);
      v27 = 0xAAAAAAAAAAAAAAAALL;
      *(_QWORD *)&v21 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v21 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v26[6] = v21;
      v26[7] = v21;
      v26[4] = v21;
      v26[5] = v21;
      v26[2] = v21;
      v26[3] = v21;
      v26[0] = v21;
      v26[1] = v21;
      TMVARTable::TMVARTable((TMVARTable *)v26, v11, v28, v20);
      if (TsfntTable::operator BOOL((TsfntTable *)v26))
      {
        if (a4)
        {
          v22 = COERCE_DOUBLE(TMVARTable::ValueForTag((TMVARTable *)v26, v17));
          if (!v23)
            v22 = 0.0;
          *a4 = v22 + *a4;
        }
        if (a5)
        {
          v24 = COERCE_DOUBLE(TMVARTable::ValueForTag((TMVARTable *)v26, v19));
          if (!v25)
            v24 = 0.0;
          *a5 = v24 + *a5;
        }
      }
      *(_QWORD *)&v26[0] = &off_1E6176770;
      TDataReference::DucRefCount((TDataReference *)v26);
      *(_QWORD *)&v29[0] = &off_1E6176770;
      TDataReference::DucRefCount((TDataReference *)v29);
      return 1;
    }
    else
    {
      *(_QWORD *)&v29[0] = &off_1E6176770;
      TDataReference::DucRefCount((TDataReference *)v29);
      return 0;
    }
  }
  return result;
}

void sub_1B09E0E14(_Unwind_Exception *a1)
{
  uint64_t v1;

  Tos2Table::~Tos2Table((Tos2Table *)(v1 - 128));
  _Unwind_Resume(a1);
}

uint64_t TFPFont::GetSubscriptY(TFPFont *this, double *a2, double *a3)
{
  return GetOS2SizeAndOther((_QWORD **)this, (uint64_t (*)(_QWORD *))Tos2Table::GetSubscriptY, 0, a2, a3);
}

uint64_t TFPFont::GetSuperscriptX(TFPFont *this, double *a2, double *a3)
{
  return GetOS2SizeAndOther((_QWORD **)this, (uint64_t (*)(_QWORD *))Tos2Table::GetSuperscriptX, 0, a2, a3);
}

uint64_t TFPFont::GetSuperscriptY(TFPFont *this, double *a2, double *a3)
{
  return GetOS2SizeAndOther((_QWORD **)this, (uint64_t (*)(_QWORD *))Tos2Table::GetSuperscriptY, 0, a2, a3);
}

uint64_t TFPFont::GetStrikeout(TFPFont *this, double *a2, double *a3)
{
  return GetOS2SizeAndOther((_QWORD **)this, (uint64_t (*)(_QWORD *))Tos2Table::GetStrikeout, 0, a2, a3);
}

uint64_t TFPFont::CopyRegistryOrderingSupplement(TFPFont *this, const __CFString **a2, const __CFString **a3, int *a4)
{
  uint64_t v7;
  uint64_t v8;
  const UInt8 *v9;
  uint64_t v10;
  const __CFString *v11;
  const UInt8 *v12;
  uint64_t v13;
  const __CFString *v14;
  int v16;
  void (**v17)(TStringRef *__hidden);
  const UInt8 *v18;
  CFIndex v19;
  unint64_t v20;
  void (**v21)(TDataReference *__hidden);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (**v25)(TStringRef *__hidden);
  const UInt8 *v26;
  CFIndex numBytes;
  unint64_t v28;
  void (**v29)(TDataReference *__hidden);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  numBytes = 0;
  v28 = 0xAAAAAAAAAAAAAA00;
  v25 = &off_1E61768F8;
  v26 = 0;
  v29 = &off_1E6176770;
  v30 = 0;
  v31 = 0;
  v32 = 0;
  v19 = 0;
  v20 = 0xAAAAAAAAAAAAAA00;
  v17 = &off_1E61768F8;
  v18 = 0;
  v21 = &off_1E6176770;
  v22 = 0;
  v23 = 0;
  v24 = 0;
  v16 = 0;
  v7 = (*(uint64_t (**)(_QWORD, void (***)(TStringRef *__hidden), void (***)(TStringRef *__hidden), int *))(**((_QWORD **)this + 2) + 360))(*((_QWORD *)this + 2), &v25, &v17, &v16);
  v8 = v7;
  if (a2)
  {
    if ((_DWORD)v7)
    {
      v9 = v26;
      if (!v26)
      {
        if (v30 && (v10 = *(_QWORD *)(v30 + 8)) != 0)
          v9 = (const UInt8 *)(v10 + v31);
        else
          v9 = 0;
      }
      v11 = CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v9, numBytes, 0x600u, 0);
    }
    else
    {
      v11 = 0;
    }
    *a2 = v11;
  }
  if (a3)
  {
    if ((_DWORD)v8)
    {
      v12 = v18;
      if (!v18)
      {
        if (v22 && (v13 = *(_QWORD *)(v22 + 8)) != 0)
          v12 = (const UInt8 *)(v13 + v23);
        else
          v12 = 0;
      }
      v14 = CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v12, v19, 0x600u, 0);
    }
    else
    {
      v14 = 0;
    }
    *a3 = v14;
  }
  if (a4)
    *a4 = v16;
  TStringRef::~TStringRef((void **)&v17);
  TStringRef::~TStringRef((void **)&v25);
  return v8;
}

void sub_1B09E100C(void *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, void *);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  TStringRef::~TStringRef((void **)va);
  TStringRef::~TStringRef((void **)va1);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B09E0FF4);
}

uint64_t TFPFont::CopyCharacterSet(TFPFont *this)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t v3;

  v1 = *((_QWORD *)this + 2);
  v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 168))(v1);
  if (v2 >= 0xFFFF)
    v3 = 0xFFFFLL;
  else
    v3 = v2;
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v1 + 136))(v1, v3);
}

uint64_t TFPFont::GetOS2UnicodeRanges(TFPFont *this, unsigned int *a2, float a3)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;

  v5 = *((_QWORD *)this + 2);
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 168))(v5);
  if (v6 >= 0xFFFF)
    v7 = 0xFFFFLL;
  else
    v7 = v6;
  return (*(uint64_t (**)(uint64_t, uint64_t, unsigned int *, float))(*(_QWORD *)v5 + 144))(v5, v7, a2, a3);
}

uint64_t TFPFont::GetProtectionInfo(TFPFont *this)
{
  const TSFNTFont *v1;
  __int128 v2;
  uint64_t v3;
  _OWORD v5[3];
  __int128 v6;

  v1 = (const TSFNTFont *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 432))(*((_QWORD *)this + 2));
  if (!v1)
    return 0;
  *(_QWORD *)&v2 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v2 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v5[2] = v2;
  v6 = v2;
  v5[0] = v2;
  v5[1] = v2;
  Tos2Table::Tos2Table((Tos2Table *)v5, v1);
  if (TsfntTable::operator BOOL((TsfntTable *)v5))
  {
    if (WORD4(v6) >= 0x4Eu)
      v3 = bswap32(*(unsigned __int16 *)(TpostTable::GetPost((TpostTable *)v5) + 8)) & 0xFFFF0000;
    else
      v3 = 0;
  }
  else
  {
    v3 = 14;
  }
  *(_QWORD *)&v5[0] = &off_1E6176770;
  TDataReference::DucRefCount((TDataReference *)v5);
  return v3;
}

unint64_t TFPFont::GetUnicharsForGlyph(TFPFont *this, uint64_t a2, unsigned __int16 *a3, unint64_t a4)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  BOOL v12;
  uint64_t v13;
  int v14;
  int v15;
  unint64_t CharactersWithGlyphNameForGlyph;

  if (!(*(unsigned int (**)(TFPFont *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)this + 344))(this, 0, 0, 0)|| (v8 = TFPFont::GetCharactersWithGlyphNameForGlyph(*((TFPFont **)this + 2), a2, a3, a4)) == 0|| (v9 = v8, (FontCoversUnichars(this, a3, v8) & 1) == 0))
  {
    v10 = (*(uint64_t (**)(_QWORD, uint64_t, unsigned __int16 *, unint64_t))(**((_QWORD **)this + 2)
                                                                                           + 152))(*((_QWORD *)this + 2), a2, a3, a4);
    if (!v10)
      goto LABEL_15;
    v9 = v10;
    v11 = *a3;
    v12 = v10 != 1 && (v11 & 0xFC00) == 55296;
    if (v12)
    {
      v14 = a3[1];
      v12 = (v14 & 0xFC00) == 56320;
      v15 = v14 + (v11 << 10) - 56613888;
      v13 = 2;
      if (v12)
        v11 = v15;
      else
        v13 = 1;
    }
    else
    {
      v13 = 1;
    }
    if (v13 == v10 && (v11 - 1113088) <= 0x3FD)
    {
LABEL_15:
      CharactersWithGlyphNameForGlyph = TFPFont::GetCharactersWithGlyphNameForGlyph(*((TFPFont **)this + 2), a2, a3, a4);
      if (FontCoversUnichars(this, a3, CharactersWithGlyphNameForGlyph))
        return CharactersWithGlyphNameForGlyph;
      else
        return 0;
    }
  }
  return v9;
}

unint64_t FontCoversUnichars(const TFPFont *a1, unsigned __int16 *a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v6;
  unint64_t *v7;
  size_t v8;
  unint64_t *v10;
  char *v11;
  char *v12;
  unint64_t v13;
  _QWORD v14[2];

  v3 = a3;
  v14[1] = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    v6 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a1 + 2) + 432))(*((_QWORD *)a1 + 2));
    if (v6 && (*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 472))(v6, 1668112752))
    {
      v7 = &v13;
      v12 = 0;
      v13 = 0xAAAAAAAAAAAAAAAALL;
      v10 = 0;
      v11 = 0;
      v14[0] = &v13;
      if (v3 >> 62)
        std::vector<char,TInlineBufferAllocator<char,1024ul>>::__throw_length_error[abi:fe180100]();
      if ((_QWORD *)((char *)&v14[-1] + 4 * v3) <= v14)
      {
        v14[0] = (char *)&v14[-1] + 4 * v3;
        v8 = 4 * v3;
      }
      else
      {
        v8 = 4 * v3;
        v7 = (unint64_t *)operator new(4 * v3);
      }
      v10 = v7;
      v12 = (char *)v7 + 4 * v3;
      bzero(v7, v8);
      v11 = v12;
      v3 = (*(uint64_t (**)(const TFPFont *, unsigned __int16 *, unint64_t *, unint64_t))(*(_QWORD *)a1 + 440))(a1, a2, v7, v3) == v3;
      std::vector<unsigned int,TInlineBufferAllocator<unsigned int,2ul>>::__destroy_vector::operator()[abi:fe180100]((uint64_t)&v10);
    }
    else
    {
      return 1;
    }
  }
  return v3;
}

void sub_1B09E142C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::vector<unsigned int,TInlineBufferAllocator<unsigned int,2ul>>::__destroy_vector::operator()[abi:fe180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t TFPFont::GetType1Encoding(TFPFont *this, unsigned __int16 *a2)
{
  const void *v4;
  TType1Font *v5;
  TType1Font *v6;
  uint64_t result;

  v4 = (const void *)*((_QWORD *)this + 2);
  if (v4
  {
    v6 = v5;
    *((_OWORD *)a2 + 30) = 0u;
    *((_OWORD *)a2 + 31) = 0u;
    *((_OWORD *)a2 + 28) = 0u;
    *((_OWORD *)a2 + 29) = 0u;
    *((_OWORD *)a2 + 26) = 0u;
    *((_OWORD *)a2 + 27) = 0u;
    *((_OWORD *)a2 + 24) = 0u;
    *((_OWORD *)a2 + 25) = 0u;
    *((_OWORD *)a2 + 22) = 0u;
    *((_OWORD *)a2 + 23) = 0u;
    *((_OWORD *)a2 + 20) = 0u;
    *((_OWORD *)a2 + 21) = 0u;
    *((_OWORD *)a2 + 18) = 0u;
    *((_OWORD *)a2 + 19) = 0u;
    *((_OWORD *)a2 + 16) = 0u;
    *((_OWORD *)a2 + 17) = 0u;
    *((_OWORD *)a2 + 14) = 0u;
    *((_OWORD *)a2 + 15) = 0u;
    *((_OWORD *)a2 + 12) = 0u;
    *((_OWORD *)a2 + 13) = 0u;
    *((_OWORD *)a2 + 10) = 0u;
    *((_OWORD *)a2 + 11) = 0u;
    *((_OWORD *)a2 + 8) = 0u;
    *((_OWORD *)a2 + 9) = 0u;
    *((_OWORD *)a2 + 6) = 0u;
    *((_OWORD *)a2 + 7) = 0u;
    *((_OWORD *)a2 + 4) = 0u;
    *((_OWORD *)a2 + 5) = 0u;
    *((_OWORD *)a2 + 2) = 0u;
    *((_OWORD *)a2 + 3) = 0u;
    *(_OWORD *)a2 = 0u;
    *((_OWORD *)a2 + 1) = 0u;
    if (((*(uint64_t (**)(TType1Font *, unsigned __int16 *))(*(_QWORD *)v5 + 496))(v5, a2) & 1) == 0)
      TType1Font::GetStandardEncoding(v6, a2);
    return 1;
  }
  else
  {
    result = TFPFont::GetEmSpaceTrueTypeScaler((os_unfair_lock_s *)this);
    if (result)
      return (*(uint64_t (**)(uint64_t, unsigned __int16 *))(*(_QWORD *)result + 112))(result, a2);
  }
  return result;
}

void sub_1B09E151C(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B09E150CLL);
}

uint64_t TFPFont::GetTrueTypeEncoding(uint64_t a1, int a2, int a3)
{
  int v6;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  int64x2_t v13;
  uint64_t v14;
  int64x2_t v15;
  __int128 v16;
  int64x2_t v17;
  int64x2_t v18;
  int64x2_t v19;
  int64x2_t v20;
  uint64_t v21;
  __int128 v22;
  int8x16_t v23;
  int8x16_t v24;
  int64x2_t v26;
  __int128 *v27;
  unsigned int v28;
  _OWORD v29[4];
  __int128 v30;
  unint64_t v31;
  void (**v32)(TSFNTData *__hidden);
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  _BYTE v41[48];
  __int128 v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  uint64_t v108;

  v108 = *MEMORY[0x1E0C80C00];
  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 40))(*(_QWORD *)(a1 + 16));
  if (v6 != 33 && (v6 - 2) > 0x13)
    return 0;
  v8 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)&v9 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v42 = v9;
  *(_OWORD *)&v41[32] = v9;
  *(_OWORD *)&v41[16] = v9;
  *(_OWORD *)v41 = v9;
  v40 = v9;
  v39 = v9;
  v38 = v9;
  v37 = v9;
  v36 = v9;
  v35 = v9;
  v34 = v9;
  v33 = v9;
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 56))(v8);
  LODWORD(v33) = 0;
  *(_QWORD *)&v35 = 0;
  *((_QWORD *)&v35 + 1) = &off_1E6176770;
  v36 = 0u;
  v37 = 0u;
  LODWORD(v38) = 0;
  HIDWORD(v40) = 0;
  v41[0] = 0;
  memset(&v41[8], 0, 40);
  *((_QWORD *)&v38 + 1) = &off_1E6176770;
  v39 = 0uLL;
  *(_QWORD *)&v40 = 0;
  BYTE8(v40) = 0;
  *(_QWORD *)&v42 = -1;
  DWORD2(v42) = 0;
  v32 = &off_1E6178EE0;
  *((_QWORD *)&v33 + 1) = &unk_1E61790E8;
  v34 = 0uLL;
  v43 = v10;
  v31 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v11 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v11 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v29[3] = v11;
  v30 = v11;
  v29[1] = v11;
  v29[2] = v11;
  v29[0] = v11;
  TcmapEncodingTable::TcmapEncodingTable((TcmapEncodingTable *)v29, (const TSFNTFont *)&v32, a2, a3, 0xFFFF);
  if (!(_QWORD)v30)
  {
    *(_QWORD *)&v29[0] = &off_1E6176770;
    TDataReference::DucRefCount((TDataReference *)v29);
    TSFNTFont::~TSFNTFont((TSFNTFont *)&v32);
    return 0;
  }
  if (bswap32(*(unsigned __int16 *)v30) >> 16 >= 4
    && (!WORD4(v30) || WORD4(v30) == 3 || WORD4(v30) == 4 && WORD5(v30) == 2))
  {
    v12 = 0;
    v13 = vdupq_n_s64(8uLL);
    v26 = v13;
    do
    {
      v14 = 0;
      v15 = vdupq_n_s64(v12 << 8);
      *(_QWORD *)&v16 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v16 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v107 = v16;
      v106 = v16;
      v105 = v16;
      v104 = v16;
      v103 = v16;
      v102 = v16;
      v101 = v16;
      v100 = v16;
      v99 = v16;
      v98 = v16;
      v97 = v16;
      v96 = v16;
      v95 = v16;
      v94 = v16;
      v93 = v16;
      v92 = v16;
      v91 = v16;
      v90 = v16;
      v89 = v16;
      v88 = v16;
      v87 = v16;
      v86 = v16;
      v85 = v16;
      v84 = v16;
      v82 = v16;
      v83 = v16;
      v80 = v16;
      v81 = v16;
      v78 = v16;
      v79 = v16;
      v76 = v16;
      v77 = v16;
      v74 = 0u;
      v75 = 0u;
      v72 = 0u;
      v73 = 0u;
      v70 = 0u;
      v71 = 0u;
      v68 = 0u;
      v69 = 0u;
      v66 = 0u;
      v67 = 0u;
      v64 = 0u;
      v65 = 0u;
      v62 = 0u;
      v63 = 0u;
      v60 = 0u;
      v61 = 0u;
      v58 = 0u;
      v59 = 0u;
      v56 = 0u;
      v57 = 0u;
      v54 = 0u;
      v55 = 0u;
      v52 = 0u;
      v53 = 0u;
      v50 = 0u;
      v51 = 0u;
      v48 = 0u;
      v49 = 0u;
      v46 = 0u;
      v47 = 0u;
      v17 = (int64x2_t)xmmword_1B0A3B0F0;
      v18 = (int64x2_t)xmmword_1B0AABBB0;
      v19 = (int64x2_t)xmmword_1B0AABBA0;
      v20 = (int64x2_t)xmmword_1B0AABB90;
      v44 = 0u;
      v45 = 0u;
      do
      {
        *(__int128 *)((char *)&v76 + v14) = (__int128)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vaddq_s64(v17, v15), (int32x4_t)vaddq_s64(v18, v15)), (int16x8_t)vuzp1q_s32((int32x4_t)vaddq_s64(v19, v15), (int32x4_t)vaddq_s64(v20, v15)));
        v19 = vaddq_s64(v19, v13);
        v18 = vaddq_s64(v18, v13);
        v17 = vaddq_s64(v17, v13);
        v20 = vaddq_s64(v20, v13);
        v14 += 16;
      }
      while (v14 != 512);
      v28 = 256;
      v27 = &v76;
      TcmapEncodingTable::Map<unsigned short>((uint64_t)v29, (uint64_t *)&v27, 512, &v44, &v28);
      CGFontIndexMapAddRange();
      ++v12;
      v13 = v26;
    }
    while (v12 != 256);
  }
  else
  {
    v21 = 0;
    *(_QWORD *)&v22 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v22 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v58 = v22;
    v59 = v22;
    v56 = v22;
    v57 = v22;
    v54 = v22;
    v55 = v22;
    v52 = v22;
    v53 = v22;
    v50 = v22;
    v51 = v22;
    v48 = v22;
    v49 = v22;
    v46 = v22;
    v47 = v22;
    v44 = v22;
    v45 = v22;
    v107 = 0u;
    v106 = 0u;
    v105 = 0u;
    v104 = 0u;
    v103 = 0u;
    v102 = 0u;
    v101 = 0u;
    v100 = 0u;
    v99 = 0u;
    v98 = 0u;
    v97 = 0u;
    v96 = 0u;
    v95 = 0u;
    v94 = 0u;
    v93 = 0u;
    v92 = 0u;
    v91 = 0u;
    v90 = 0u;
    v89 = 0u;
    v88 = 0u;
    v87 = 0u;
    v86 = 0u;
    v85 = 0u;
    v84 = 0u;
    v82 = 0u;
    v83 = 0u;
    v80 = 0u;
    v81 = 0u;
    v78 = 0u;
    v79 = 0u;
    v23 = (int8x16_t)xmmword_1B0AABBC0;
    v76 = 0u;
    v77 = 0u;
    v24.i64[0] = 0x1010101010101010;
    v24.i64[1] = 0x1010101010101010;
    do
    {
      *(__int128 *)((char *)&v44 + v21) = (__int128)v23;
      v21 += 16;
      v23 = vaddq_s8(v23, v24);
    }
    while (v21 != 256);
    v28 = 256;
    v27 = &v44;
    TcmapEncodingTable::Map<unsigned short>((uint64_t)v29, (uint64_t *)&v27, 256, &v76, &v28);
    CGFontIndexMapAddRange();
  }
  *(_QWORD *)&v29[0] = &off_1E6176770;
  TDataReference::DucRefCount((TDataReference *)v29);
  TSFNTFont::~TSFNTFont((TSFNTFont *)&v32);
  return 1;
}

